class C{  private static void addDictLiteralKeys(final PyDictLiteralExpression dict,final CompletionResultSet result){  PyKeyValueExpression[] keyValues=dict.getElements();  for (  PyKeyValueExpression expression : keyValues) {    boolean addHandler=PsiTreeUtil.findElementOfClassAtRange(dict.getContainingFile(),expression.getTextRange().getStartOffset(),expression.getTextRange().getEndOffset(),PyStringLiteralExpression.class) != null;    result.addElement(createElement(expression.getKey().getText(),addHandler));  }}  }
class C{  protected boolean tooClose(Geo pnt,double distance){  return Intersection.isPointNearPoly(pnt,geoCoords,distance - bufferLimit);}  }
class C{  public void readSetOf(ASN1SetOf setOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SETOF) {    throw expected("setOf");  }  decodeValueCollection(setOf);}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  ClientHandshakeImpl(Object owner){  super(owner);}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  public base addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  protected void onRoll(double rollInput,ViewInputAttributes.DeviceAttributes deviceAttributes,ViewInputAttributes.ActionAttributes actionAttributes){  Angle rollChange;  this.stopGoToAnimators();  rollChange=Angle.fromDegrees(rollInput * getScaleValueElevation(deviceAttributes,actionAttributes));  this.onRoll(rollChange,actionAttributes);}  }
class C{  static void drawPressed3DBorder(Graphics g,int x,int y,int w,int h){  g.translate(x,y);  drawFlush3DBorder(g,0,0,w,h);  g.setColor(MetalLookAndFeel.getControlShadow());  g.drawLine(1,1,1,h - 2);  g.drawLine(1,1,w - 2,1);  g.translate(-x,-y);}  }
class C{  protected void reportResult(int AD_PInstance_ID,String errMsg,String trxName){  int result=(errMsg == null ? 1 : 0);  String sql="UPDATE AD_PInstance SET Result=?, ErrorMsg=?" + " WHERE AD_PInstance_ID=" + AD_PInstance_ID;  DB.executeUpdateEx(sql,new Object[]{result,errMsg},trxName);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i;  double zFactor=1;  double z, zN;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double SS;  int N;  double tri;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          N=0;          SS=0;          for (i=0; i < 8; i++) {            zN=DEM.getValue(row + dY[i],col + dX[i]);            if (zN != noData) {              zN=zN * zFactor;              SS+=(zN - z) * (zN - z);              N++;            }          }          tri=Math.sqrt(SS / N);          output.setValue(row,col,tri);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean requestTime(String host,int timeout){  DatagramSocket socket=null;  try {    socket=new DatagramSocket();    socket.setSoTimeout(timeout);    InetAddress address=InetAddress.getByName(host);    byte[] buffer=new byte[NTP_PACKET_SIZE];    DatagramPacket request=new DatagramPacket(buffer,buffer.length,address,NTP_PORT);    buffer[0]=NTP_MODE_CLIENT | (NTP_VERSION << 3);    long requestTime=System.currentTimeMillis();    long requestTicks=SystemClock.elapsedRealtime();    writeTimeStamp(buffer,TRANSMIT_TIME_OFFSET,requestTime);    socket.send(request);    DatagramPacket response=new DatagramPacket(buffer,buffer.length);    socket.receive(response);    long responseTicks=SystemClock.elapsedRealtime();    long responseTime=requestTime + (responseTicks - requestTicks);    long originateTime=readTimeStamp(buffer,ORIGINATE_TIME_OFFSET);    long receiveTime=readTimeStamp(buffer,RECEIVE_TIME_OFFSET);    long transmitTime=readTimeStamp(buffer,TRANSMIT_TIME_OFFSET);    long roundTripTime=responseTicks - requestTicks - (transmitTime - receiveTime);    mClockOffset=((receiveTime - originateTime) + (transmitTime - responseTime)) / 2;    mNtpTime=responseTime + mClockOffset;    mNtpTimeReference=responseTicks;    mRoundTripTime=roundTripTime;  } catch (  Exception e) {    return false;  } finally {    if (socket != null) {      socket.close();    }  }  return true;}  }
class C{  @Override public int hashCode(){  int result=193;  long temp=Double.doubleToLongBits(this.angle);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.tipRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.baseRadius);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.arrowLength);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.arrowWidth);  result=37 * result + (int)(temp ^ (temp >>> 32));  result=37 * result + HashUtilities.hashCodeForPaint(this.arrowPaint);  result=37 * result + this.arrowStroke.hashCode();  temp=Double.doubleToLongBits(this.labelOffset);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public Localiser(Locale locale){  formatter=new MessageFormat("");  languageProperties=new Properties();  try {    java.net.URL languagePropertiesURL=Localiser.class.getResource(LANGUAGE_PROPERTIES_FILENAME);    if (languagePropertiesURL != null) {      languageProperties.load(languagePropertiesURL.openStream());    }  } catch (  IOException ioe) {    log.error(ioe.getMessage(),ioe);  }  setLocale(locale);  numberFormat=NumberFormat.getInstance(locale);  numberFormat.setMaximumFractionDigits(NUMBER_OF_FRACTION_DIGITS_FOR_BITCOIN);  numberFormatNotLocalised=NumberFormat.getInstance(Locale.ENGLISH);  numberFormatNotLocalised.setMaximumFractionDigits(NUMBER_OF_FRACTION_DIGITS_FOR_BITCOIN);  numberFormatNotLocalised.setGroupingUsed(false);  decimalFormatSymbols=new java.text.DecimalFormatSymbols(locale);}  }
class C{  public static int[] readInt1D(){  int n=StdIn.readInt();  int[] a=new int[n];  for (int i=0; i < n; i++) {    a[i]=StdIn.readInt();  }  return a;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.179 -0400",hash_original_method="38F0ADDE91764DCA3D134850D3845596",hash_generated_method="A9C24215319B1904B9CD5B211E7C512D") public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CeylonRepoManagerBuilder userRepos(List<String> userRepos){  this.userRepos=userRepos;  return this;}  }
class C{  private void initializeLiveAttributes(){  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public OptimizationPlanCompositeElement(String n,Object[] e){  myName=n;  myElements=new OptimizationPlanElement[e.length];  for (int i=0; i < e.length; i++) {    if (e[i] instanceof OptimizationPlanElement) {      myElements[i]=(OptimizationPlanElement)(e[i]);    } else     if (e[i] instanceof CompilerPhase) {      myElements[i]=new OptimizationPlanAtomicElement((CompilerPhase)e[i]);    } else {      throw new OptimizingCompilerException("Unsupported plan element " + e[i]);    }  }}  }
class C{  protected int engineGetBlockSize(){  return core.getBlockSize();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TYPE;case 2:  return HELLO;case 3:return ERROR;case 4:return ECHO_REQUEST;case 5:return ECHO_REPLY;case 6:return GET_REQUEST;case 7:return GET_RESPONSE;case 8:return PUT_REQUEST;case 9:return PUT_RESPONSE;case 10:return DELETE_REQUEST;case 11:return DELETE_RESPONSE;case 12:return SYNC_VALUE;case 13:return SYNC_VALUE_RESPONSE;case 14:return SYNC_OFFER;case 15:return SYNC_REQUEST;case 16:return FULL_SYNC_REQUEST;case 17:return CURSOR_REQUEST;case 18:return CURSOR_RESPONSE;case 19:return REGISTER_REQUEST;case 20:return REGISTER_RESPONSE;case 21:return CLUSTER_JOIN_REQUEST;case 22:return CLUSTER_JOIN_RESPONSE;default :return null;}}  }
class C{  public PauseTrain(int fastMinutes){  _fastMinutes=fastMinutes;}  }
class C{  static StorageCache initCache(Configuration configuration){  if (configuration.getBoolean(Configuration.CACHE_ENABLED) && configuration.getLong(Configuration.CACHE_BYTES) > 0) {    return new StorageCache(configuration);  } else {    return new DisabledCache();  }}  }
class C{  public static boolean isModuleDeployed(InstalledLocalContainer container,String jarFile){  FileHandler fileHandler=container.getFileHandler();  String moduleArtifactName=getModuleArtifactName(jarFile,fileHandler);  String folder=container.getHome() + "/modules/org/codehaus/cargo/classpath/" + moduleArtifactName+ "/main";  if (fileHandler.exists(folder)) {    return true;  }  return false;}  }
class C{  public KernelPoints(KernelTrick k,int points,double errorTolerance){  this(k,points,errorTolerance,true);}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public boolean lockMeta(Session session){  if (meta == null) {    return true;  }  boolean wasLocked=meta.lock(session,true,true);  return wasLocked;}  }
class C{  public void test_getCrtCoefficient(){  assertEquals("invalid CRT coefficient",Util.rsaCrtParam.getCrtCoefficient(),key.getCrtCoefficient());}  }
class C{  public void select(){  if (!isSelected()) {    super.select();    setNeedToRegenerate(true);  }}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof CategoryTableXYDataset)) {    return false;  }  CategoryTableXYDataset that=(CategoryTableXYDataset)obj;  if (!this.intervalDelegate.equals(that.intervalDelegate)) {    return false;  }  if (!this.values.equals(that.values)) {    return false;  }  return true;}  }
class C{  private void updateExperiment(){  Classifier[] cArray=new Classifier[m_AlgorithmListModel.size()];  for (int i=0; i < cArray.length; i++) {    cArray[i]=(Classifier)m_AlgorithmListModel.elementAt(i);  }  m_Exp.setPropertyArray(cArray);}  }
class C{  public RegisterRepositoryRequest(String cause,String name,String type,boolean verify){  this.cause=cause;  this.name=name;  this.type=type;  this.verify=verify;}  }
class C{  @Override public void onDrawFinished(DataSet<?> dataSet){  Log.i(Chart.LOG_TAG,"DataSet drawn. " + dataSet.toSimpleString());  mChart.getLegendRenderer().computeLegend(mChart.getData());}  }
class C{  private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {  final LeafReader reader=context.reader();  final int threshold=Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD,BooleanQuery.getMaxClauseCount());  assert termData.size() > threshold : "Query should have been rewritten";  List<TermAndState> matchingTerms=new ArrayList<>(threshold);  DocIdSetBuilder builder=null;  final Fields fields=reader.fields();  String lastField=null;  Terms terms=null;  TermsEnum termsEnum=null;  PostingsEnum docs=null;  TermIterator iterator=termData.iterator();  for (BytesRef term=iterator.next(); term != null; term=iterator.next()) {    String field=iterator.field();    if (field != lastField) {      terms=fields.terms(field);      if (terms == null) {        termsEnum=null;      } else {        termsEnum=terms.iterator();      }      lastField=field;    }    if (termsEnum != null && termsEnum.seekExact(term)) {      if (matchingTerms == null) {        docs=termsEnum.postings(docs,PostingsEnum.NONE);        builder.add(docs);      } else       if (matchingTerms.size() < threshold) {        matchingTerms.add(new TermAndState(field,termsEnum));      } else {        assert matchingTerms.size() == threshold;        if (singleField) {          builder=new DocIdSetBuilder(reader.maxDoc(),terms);        } else {          builder=new DocIdSetBuilder(reader.maxDoc());        }        docs=termsEnum.postings(docs,PostingsEnum.NONE);        builder.add(docs);        for (        TermAndState t : matchingTerms) {          t.termsEnum.seekExact(t.term,t.state);          docs=t.termsEnum.postings(docs,PostingsEnum.NONE);          builder.add(docs);        }        matchingTerms=null;      }    }  }  if (matchingTerms != null) {    assert builder == null;    BooleanQuery.Builder bq=new BooleanQuery.Builder();    for (    TermAndState t : matchingTerms) {      final TermContext termContext=new TermContext(searcher.getTopReaderContext());      termContext.register(t.state,context.ord,t.docFreq,t.totalTermFreq);      bq.add(new TermQuery(new Term(t.field,t.term),termContext),Occur.SHOULD);    }    Query q=new ConstantScoreQuery(bq.build());    final Weight weight=searcher.rewrite(q).createWeight(searcher,needsScores,score());    return new WeightOrDocIdSet(weight);  } else {    assert builder != null;    return new WeightOrDocIdSet(builder.build());  }}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  pcSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  public MultiTextEdit(){  super(0,Integer.MAX_VALUE);  fDefined=false;}  }
class C{  protected void printDocType(Writer out,DocType docType) throws IOException {  String publicID=docType.getPublicID();  String systemID=docType.getSystemID();  String internalSubset=docType.getInternalSubset();  boolean hasPublic=false;  out.write("<!DOCTYPE ");  out.write(docType.getElementName());  if (publicID != null) {    out.write(" PUBLIC \"");    out.write(publicID);    out.write("\"");    hasPublic=true;  }  if (systemID != null) {    if (!hasPublic) {      out.write(" SYSTEM");    }    out.write(" \"");    out.write(systemID);    out.write("\"");  }  if ((internalSubset != null) && (!internalSubset.equals(""))) {    out.write(" [");    out.write(lineSeparator);    out.write(docType.getInternalSubset());    out.write("]");  }  out.write(">");}  }
class C{  public void updateUI(){  setUI((ToolTipUI)UIManager.getUI(this));}  }
class C{  public static byte[][] splitNalUnits(byte[] data){  if (!isNalStartCode(data,0)) {    return null;  }  List<Integer> starts=new ArrayList<Integer>();  int nalUnitIndex=0;  do {    starts.add(nalUnitIndex);    nalUnitIndex=findNalStartCode(data,nalUnitIndex + NAL_START_CODE.length);  } while (nalUnitIndex != -1);  byte[][] split=new byte[starts.size()][];  for (int i=0; i < starts.size(); i++) {    int startIndex=starts.get(i);    int endIndex=i < starts.size() - 1 ? starts.get(i + 1) : data.length;    byte[] nal=new byte[endIndex - startIndex];    System.arraycopy(data,startIndex,nal,0,nal.length);    split[i]=nal;  }  return split;}  }
class C{  void error(String msg){  System.err.println("Error: " + msg);  errors++;}  }
class C{  public BadLocationException(){  super();}  }
class C{  public static double[] max(final double[] one,final double[] two){  if (one.length > two.length) {    return one;  }  return two;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.127 -0500",hash_original_method="F5B26D6CEA03C69B6056609DE60A7792",hash_generated_method="AE416BA4BB2E6B01C869A36E21DEDEE2") public static String writeDateTime(Calendar cal,boolean zulu){  StringBuilder sb=new StringBuilder();  sb.ensureCapacity(16);  if (zulu) {    sb.setLength(16);    sb.setCharAt(15,'Z');  } else {    sb.setLength(15);  }  return writeDateTime(cal,sb);}  }
class C{  public CF3(){  this(10);}  }
class C{  public Tamaki(){  super(3,3,1);}  }
class C{  public SendableChatAction.SendableChatActionBuilder chatAction(ChatAction chatAction){  this.chatAction=chatAction;  return this;}  }
class C{  public GPUImage3x3ConvolutionFilter(){  this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f});}  }
class C{  public _Fields fieldForId(int fieldId){  return _Fields.findByThriftId(fieldId);}  }
class C{  protected synchronized void print(String s,int _verbosity,Log log) throws OutputException {  if (log == null)   return;  if (log.writer == null)   throw new OutputException("Log with a null writer: " + log);  if (log.silent)   return;  log.writer.print(s);}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  if (delegate != null) {    return delegate.scan(clazz);  }  return null;}  }
class C{  public void data(byte[] data,int len){  boolean mismatch=false;  if (false) {    Log.v(LOGTAG,"TestEventHandler: data() " + len + " bytes");  }  eventsReceived[TEST_DATA]=true;  if (notExpecting[TEST_DATA]) {    expectDetails.append("Data event received but not expected");    expectDetails.append("\r\n");  }  Log.v(LOGTAG,new String(data,0,len));  if (expectDataLength != -1) {    if (expectDataLength == len) {      expectDataLength=-1;    } else {      expectDetails.append("expect data length mismatch expected:" + expectDataLength + " got:"+ len);      expectDetails.append("\r\n");    }    if ((expectDataLength == -1) && expectData != null) {      for (int i=0; i < len; i++) {        if (expectData[i] != data[i]) {          mismatch=true;          expectDetails.append("Expect data mismatch at byte " + i + " expected:"+ expectData[i]+ " got:"+ data[i]);          expectDetails.append("\r\n");          break;        }      }    }  }  if ((expectDataLength == -1) || !mismatch)   expects[TEST_DATA]=false;}  }
class C{  public void abortiveClose(){  try {    server.abortiveCloseChannel(ch);  } catch (  IOException e) {    System.out.println(e);  }}  }
class C{  public MarketplaceRemovedException(String message){  super(message);}  }
class C{  public void clear(){  value.clear();}  }
class C{  @Override protected void onRemoveChannelKey(String target,String sourceNick,String sourceLogin,String sourceHostname,String key){  Message message=new Message(service.getString(R.string.message_remove_channel_key,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public void test_read$BII() throws IOException {  byte[] buf=new byte[10];  oos.writeBytes("HelloWorld");  oos.close();  ois=new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));  ois.read(buf,0,10);  ois.close();  assertEquals("Read incorrect bytes","HelloWorld",new String(buf,0,10,"UTF-8"));}  }
class C{  public DOMSubtreeModifiedListenerWrapper(CSSNavigableDocumentListener l){  listener=l;}  }
class C{  public Vector<Report> ageFlares(){  Vector<Report> reports=new Vector<Report>();  Report r;  for (int i=flares.size() - 1; i >= 0; i--) {    Flare flare=flares.elementAt(i);    r=new Report(5235);    r.add(flare.position.getBoardNum());    r.newlines=0;    reports.addElement(r);    if ((flare.flags & Flare.F_IGNITED) != 0) {      flare.turnsToBurn--;      if ((flare.flags & Flare.F_DRIFTING) != 0) {        int dir=planetaryConditions.getWindDirection();        int str=planetaryConditions.getWindStrength();        if (str > 0) {          flare.position=flare.position.translated(dir);          if (str > 2) {            flare.position=flare.position.translated(dir);          }          if (str > 3) {            flare.position=flare.position.translated(dir);          }          if (str > 4) {            flare.position=flare.position.translated(dir);          }          if (str > 5) {            flare.position=flare.position.translated(dir);          }          r=new Report(5236);          r.add(flare.position.getBoardNum());          r.newlines=0;          reports.addElement(r);        }      }    } else {      r=new Report(5237);      r.newlines=0;      reports.addElement(r);      flare.flags|=Flare.F_IGNITED;    }    if (flare.turnsToBurn <= 0) {      r=new Report(5238);      reports.addElement(r);      flares.removeElementAt(i);    } else {      r=new Report(5239);      r.add(flare.turnsToBurn);      reports.addElement(r);      flares.setElementAt(flare,i);    }  }  processGameEvent(new GameBoardChangeEvent(this));  return reports;}  }
class C{  public InputDescription(Class<?> inputType,boolean keepDefault){  this(inputType,keepDefault,false,null);}  }
class C{  public ComputeUserUndeclaredException(String msg){  super(msg);}  }
class C{  public void zip(final String srcFolder,final String destZipFile) throws Exception {  checkFolder(localPath);  final FileOutputStream fileWriter=new FileOutputStream(destZipFile);  final ZipOutputStream zipout=new ZipOutputStream(fileWriter);  try {    loadIgnoreFile(srcFolder);    final String parentPath=LocalPath.removeTrailingSeparators(new File(srcFolder).getParentFile().getAbsolutePath());    addFileToZip(parentPath,new File(srcFolder).getAbsoluteFile(),zipout);    zipout.flush();  } catch (  final Exception e) {    errorMsg=MessageFormat.format(Messages.getString("CreateUploadZipCommand.CreateArchiveErrorMessageFormat"),srcFolder);    log.error("Exceptions when creating zip archive ",e);    throw e;  } finally {    zipout.close();  }}  }
class C{  protected SimpleFileVisitor(){}  }
class C{  private TriggerProcess initTriggerProcess(TriggerType type,boolean suspend){  TriggerProcess tp=new TriggerProcess();  tp.setState(TriggerProcessStatus.INITIAL);  globalUser=new PlatformUser();  globalUser.setUserId("admin");  Organization org=new Organization();  org.setOrganizationId("orgId");  org.setLocale("de");  globalUser.setOrganization(org);  globalUser.setLocale("de");  TriggerDefinition td=new TriggerDefinition();  td.setType(type);  td.setTarget("http://localhost/service?wsdl");  td.setSuspendProcess(suspend);  td.setOrganization(org);  tp.setTriggerDefinition(td);  tp.setUser(globalUser);  return tp;}  }
class C{  public BusinessObjectDefinitionTagEntity createBusinessObjectDefinitionTagEntity(BusinessObjectDefinitionKey businessObjectDefinitionKey,TagKey tagKey){  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(businessObjectDefinitionKey);  if (businessObjectDefinitionEntity == null) {    businessObjectDefinitionEntity=businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionKey,AbstractDaoTest.DATA_PROVIDER_NAME,AbstractDaoTest.DESCRIPTION);  }  TagEntity tagEntity=tagDao.getTagByKey(tagKey);  if (tagEntity == null) {    tagEntity=tagDaoTestHelper.createTagEntity(tagKey.getTagTypeCode(),tagKey.getTagCode(),AbstractDaoTest.TAG_DISPLAY_NAME,AbstractDaoTest.TAG_DESCRIPTION);  }  return createBusinessObjectDefinitionTagEntity(businessObjectDefinitionEntity,tagEntity);}  }
class C{  public Message createMessage(){  return new Message(room,Message.Type.groupchat);}  }
class C{  public static void print(double[][] m1,double[][] m2,double[][] m3){  System.out.println("The matrices are added as follows");  for (int i=0; i < 3; i++) {    print(m1,i);    System.out.print((i == 1 ? "  +  " : "     "));    print(m2,i);    System.out.print((i == 1 ? "  =  " : "     "));    print(m3,i);    System.out.println();  }}  }
class C{  public UserActiveException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean isRevoked(Certificate cert){  if (revokedMap.isEmpty() || (!(cert instanceof X509Certificate))) {    return false;  }  X509Certificate xcert=(X509Certificate)cert;  X509IssuerSerial issuerSerial=new X509IssuerSerial(xcert);  return revokedMap.containsKey(issuerSerial);}  }
class C{  public static boolean hasGingerbread(){  return Build.VERSION.SDK_INT >= 9;}  }
class C{  protected void makeUnitSphere(int subdivisions,Geometry dest){  float radius=1.0f;  GeometryBuilder gb=this.getGeometryBuilder();  gb.setOrientation(GeometryBuilder.OUTSIDE);  GeometryBuilder.IndexedTriangleBuffer itb=gb.tessellateSphereBuffer(radius,subdivisions);  int seamVerticesIndex=itb.getVertexCount();  gb.fixSphereSeam(itb,(float)Math.PI);  FloatBuffer normalBuffer=Buffers.newDirectFloatBuffer(3 * itb.getVertexCount());  gb.makeEllipsoidNormals(itb,normalBuffer);  FloatBuffer textureCoordBuffer=Buffers.newDirectFloatBuffer(2 * itb.getVertexCount());  gb.makeUnitSphereTextureCoordinates(itb,textureCoordBuffer,seamVerticesIndex);  dest.setElementData(GL.GL_TRIANGLES,itb.getIndexCount(),itb.getIndices());  dest.setVertexData(itb.getVertexCount(),itb.getVertices());  dest.setNormalData(normalBuffer.limit(),normalBuffer);  dest.setTextureCoordData(textureCoordBuffer.limit(),textureCoordBuffer);}  }
class C{  private boolean canAccess(){  if (Binder.getCallingPid() == Process.myPid()) {    return true;  } else {    return PreferencesUtils.getBoolean(getContext(),R.string.allow_access_key,PreferencesUtils.ALLOW_ACCESS_DEFAULT);  }}  }
class C{  protected void fill() throws IOException {  ensureOpen();  len=in.read(buf,0,buf.length);  if (len == -1) {    throw new EOFException("Unexpected end of ZLIB input stream");  }  inf.setInput(buf,0,len);}  }
class C{  public jMatrix solve(jMatrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("jMatrix row dimensions must agree.");  }  if (!this.isFullRank()) {    throw new RuntimeException("jMatrix is rank deficient.");  }  int nx=B.getColumnDimension();  double[][] X=B.getArrayCopy();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      double s=0.0;      for (int i=k; i < m; i++) {        s+=QR[i][k] * X[i][j];      }      s=-s / QR[k][k];      for (int i=k; i < m; i++) {        X[i][j]+=s * QR[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=Rdiag[k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * QR[i][k];      }    }  }  return (new jMatrix(X,n,nx).getMatrix(0,n - 1,0,nx - 1));}  }
class C{  public int hashCode(){  int retval=0;  if (encoded != null)   for (int i=1; i < encoded.length; i++)   retval+=encoded[i] * i;  return (retval);}  }
class C{  void reportWarning(String msg,Element e){  messager.printMessage(Diagnostic.Kind.WARNING,msg,e);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  protected void parse(InputSource is) throws IOException, ParseException {  try {    if (parserFactory == null) {      parserFactory=getSAXParserFactory();    }    SAXParser sp=parserFactory.newSAXParser();    ParserAdapter pa=new ParserAdapter(sp.getParser());    pa.setContentHandler(this);    pa.parse(is);  } catch (  SAXException e) {    Exception rootException=e.getException();    if (rootException instanceof ParseException) {      throwParseException((ParseException)rootException);    } else     if (rootException instanceof IOException) {      LogUtils.logException(logger,Level.WARNING,null,e);      throw (IOException)rootException;    } else {      LogUtils.logException(logger,Level.FINE,null,e);      throw new ParseException(e);    }  }catch (  ParserConfigurationException e) {    LogUtils.logException(logger,Level.WARNING,null,e);    throw new ParseException(e);  }}  }
class C{  public void endVisit(InstanceofExpression node){}  }
class C{  private void emitBoxing(Wrapper wrapper){  String owner="java/lang/" + wrapper.wrapperType().getSimpleName();  String name="valueOf";  String desc="(" + wrapper.basicTypeChar() + ")L"+ owner+ ";";  mv.visitMethodInsn(Opcodes.INVOKESTATIC,owner,name,desc,false);}  }
class C{  protected void addInstrumentation(MethodNode mn,AbstractInsnNode original,List<Mutation> mutations){  InsnList instructions=new InsnList();  for (  Mutation mutation : mutations) {    instructions.add(mutation.getInfectionDistance());    instructions.add(new LdcInsnNode(mutation.getId()));    MethodInsnNode touched=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(ExecutionTracer.class),"passedMutation",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{Type.DOUBLE_TYPE,Type.INT_TYPE}),false);    instructions.add(touched);  }  LabelNode endLabel=new LabelNode();  for (  Mutation mutation : mutations) {    LabelNode nextLabel=new LabelNode();    LdcInsnNode mutationId=new LdcInsnNode(mutation.getId());    instructions.add(mutationId);    FieldInsnNode activeId=new FieldInsnNode(Opcodes.GETSTATIC,Type.getInternalName(MutationObserver.class),"activeMutation","I");    instructions.add(activeId);    instructions.add(new JumpInsnNode(Opcodes.IF_ICMPNE,nextLabel));    instructions.add(mutation.getMutation());    instructions.add(new JumpInsnNode(Opcodes.GOTO,endLabel));    instructions.add(nextLabel);  }  mn.instructions.insertBefore(original,instructions);  mn.instructions.insert(original,endLabel);}  }
class C{  protected int open(int maxRows){  int rows=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(m_SQL_Count,null);    setParameter(pstmt,true);    rs=pstmt.executeQuery();    if (rs.next())     rows=rs.getInt(1);  } catch (  SQLException e0) {    if (DBException.isInvalidIdentifierError(e0))     log.warning("Count - " + e0.getLocalizedMessage() + "\nSQL="+ m_SQL_Count); else     log.log(Level.SEVERE,"Count SQL=" + m_SQL_Count,e0);    return 0;  } finally {    DB.close(rs,pstmt);  }  StringBuffer info=new StringBuffer("Rows=");  info.append(rows);  if (rows == 0)   info.append(" - ").append(m_SQL_Count);  String trxName=m_virtual ? Trx.createTrxName("Loader") : null;  trx=trxName != null ? Trx.get(trxName,true) : null;  try {    m_pstmt=DB.prepareStatement(m_SQL,trxName);    if (maxRows > 0 && rows > maxRows) {      m_pstmt.setMaxRows(maxRows);      info.append(" - MaxRows=").append(maxRows);      rows=maxRows;    }    if (m_virtual)     m_pstmt.setFetchSize(100);    setParameter(m_pstmt,false);    m_rs=m_pstmt.executeQuery();  } catch (  SQLException e) {    log.log(Level.SEVERE,m_SQL,e);    return 0;  }  log.fine(info.toString());  return rows;}  }
class C{  public IvrZoneset showActiveIvrZoneset() throws NetworkDeviceControllerException {  List<IvrZoneset> zonesets=showIvrZonesets(true);  return zonesets.isEmpty() ? null : zonesets.get(0);}  }
class C{  @Override public void waitToBeRealized(){  if (PlatformHelper.isWin32()) {    return;  }  final long start=System.currentTimeMillis();  long now=start;  boolean openable=false;  while (!openable) {    try {      Thread.sleep(GamaPreferences.CORE_OUTPUT_DELAY.getValue());    } catch (    final InterruptedException e) {      e.printStackTrace();    }    now=System.currentTimeMillis();    openable=now - start > REALIZATION_TIME_OUT || this.getDisplaySurface().isRealized();  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public Duration toStandardDuration(){  long weeks=getValue();  return new Duration(weeks * DateTimeConstants.MILLIS_PER_WEEK);}  }
class C{  public static <T>PropertyNullPredicate<T> isNull(Property<T> property){  return new PropertyNullPredicate<>(property(property));}  }
class C{  public static void main(String[] args){  new OozieRegisterFile().execute(args);}  }
class C{  public ExtractorException(String msg){  this(msg,null,null);}  }
class C{  public void startElement(String name,AttributeList attributes) throws SAXException {}  }
class C{  public void drawOval(int x,int y,int width,int height){  Ellipse2D oval=new Ellipse2D.Float(x,y,width,height);  draw(oval);}  }
class C{  public EnclosingMethodAttribute(ConstPool cp,String className){  super(cp,tag);  int ci=cp.addClassInfo(className);  int ni=0;  byte[] bvalue=new byte[4];  bvalue[0]=(byte)(ci >>> 8);  bvalue[1]=(byte)ci;  bvalue[2]=(byte)(ni >>> 8);  bvalue[3]=(byte)ni;  set(bvalue);}  }
class C{  @Override public String globalInfo(){  return "Exports the statistics to a tab-separated file.";}  }
class C{  public UserConfig update(UserConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/update-user",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    UserConfig user=new UserConfig();    user.parseXML(root);    this.user=user;    return user;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  RefactoringDescriptor requestDescriptor(final RefactoringDescriptorProxy proxy,final IProgressMonitor monitor){  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_resolving_information,2);    final long stamp=proxy.getTimeStamp();    if (stamp >= 0) {      InputStream input=null;      try {        final IFileStore folder=fHistoryStore.getFileStore(stampToPath(stamp));        final IFileStore file=folder.getChild(RefactoringHistoryService.NAME_HISTORY_FILE);        if (file.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)).exists()) {          input=new BufferedInputStream(file.openInputStream(EFS.NONE,new SubProgressMonitor(monitor,1,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)));          final RefactoringSessionDescriptor descriptor=getCachedSession(file,fProjectName,input);          if (descriptor != null) {            final RefactoringDescriptor[] descriptors=descriptor.getRefactorings();            for (int index=0; index < descriptors.length; index++) {              final RefactoringDescriptor refactoringDescriptor=descriptors[index];              if (refactoringDescriptor.getTimeStamp() == stamp) {                return refactoringDescriptor;              }            }          }        }      } catch (      CoreException exception) {        RefactoringCorePlugin.log(exception);      } finally {        try {          if (input != null)           input.close();        } catch (        IOException exception) {          RefactoringCorePlugin.log(exception);        }      }    }  }  finally {    monitor.done();  }  return null;}  }
class C{  final void removeTreeNode(HashMap<K,V> map,Node<K,V>[] tab,boolean movable){  int n;  if (tab == null || (n=tab.length) == 0)   return;  int index=(n - 1) & hash;  TreeNode<K,V> first=(TreeNode<K,V>)tab[index], root=first, rl;  TreeNode<K,V> succ=(TreeNode<K,V>)next, pred=prev;  if (pred == null)   tab[index]=first=succ; else   pred.next=succ;  if (succ != null)   succ.prev=pred;  if (first == null)   return;  if (root.parent != null)   root=root.root();  if (root == null || root.right == null || (rl=root.left) == null || rl.left == null) {    tab[index]=first.untreeify(map);    return;  }  TreeNode<K,V> p=this, pl=left, pr=right, replacement;  if (pl != null && pr != null) {    TreeNode<K,V> s=pr, sl;    while ((sl=s.left) != null)     s=sl;    boolean c=s.red;    s.red=p.red;    p.red=c;    TreeNode<K,V> sr=s.right;    TreeNode<K,V> pp=p.parent;    if (s == pr) {      p.parent=s;      s.right=p;    } else {      TreeNode<K,V> sp=s.parent;      if ((p.parent=sp) != null) {        if (s == sp.left)         sp.left=p; else         sp.right=p;      }      if ((s.right=pr) != null)       pr.parent=s;    }    p.left=null;    if ((p.right=sr) != null)     sr.parent=p;    if ((s.left=pl) != null)     pl.parent=s;    if ((s.parent=pp) == null)     root=s; else     if (p == pp.left)     pp.left=s; else     pp.right=s;    if (sr != null)     replacement=sr; else     replacement=p;  } else   if (pl != null)   replacement=pl; else   if (pr != null)   replacement=pr; else   replacement=p;  if (replacement != p) {    TreeNode<K,V> pp=replacement.parent=p.parent;    if (pp == null)     root=replacement; else     if (p == pp.left)     pp.left=replacement; else     pp.right=replacement;    p.left=p.right=p.parent=null;  }  TreeNode<K,V> r=p.red ? root : balanceDeletion(root,replacement);  if (replacement == p) {    TreeNode<K,V> pp=p.parent;    p.parent=null;    if (pp != null) {      if (p == pp.left)       pp.left=null; else       if (p == pp.right)       pp.right=null;    }  }  if (movable)   moveRootToFront(tab,r);}  }
class C{  void maybeStartFlow(){synchronized (this) {    if (runState == IDLE || runState == PAUSED_AT_GO_LAZY) {      runState=RUNNING;      lastDirectiveIndex=-1;      restartNeeded=false;    } else {      if (runState == CANCEL_REQUESTED) {        restartNeeded=true;      }      return;    }  }  intermediateValue=currentValue;  runFlowFrom(0,false);}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public static void main(String[] args){  BaleenLogging logging=new BaleenLogging();  logging.configure(Arrays.asList(new BaleenConsoleLoggerBuilder(DEFAULT_PATTERN,new MinMaxFilter(Level.WARN,Level.ERROR)),new BaleenFileLoggerBuilder("file","log.test",DEFAULT_PATTERN,new MinMaxFilter(Level.INFO,Level.WARN),true,Optional.empty(),Optional.empty())));  org.slf4j.Logger logger=LoggerFactory.getLogger(BaleenLogging.class);  logger.warn("Should be in both");  logger.info("Only in the file");  logger.error("Only to the console");  logger.trace("Not in either");}  }
class C{  private void fillToGalleryTop(){  int itemSpacing=mSpacing;  int galleryTop=getPaddingTop();  View prevIterationView=getChildAt(0);  int curPosition;  int curBottomEdge;  int numItems=mItemCount;  if (prevIterationView != null) {    curPosition=mFirstPosition - 1;    curBottomEdge=prevIterationView.getTop() - itemSpacing;  } else {    curPosition=0;    curBottomEdge=getBottom() - getTop() - getPaddingBottom();    mShouldStopFling=true;  }  while (curBottomEdge > galleryTop && curPosition >= 0) {    prevIterationView=makeAndAddVerticalView(curPosition,curPosition - mSelectedPosition,curBottomEdge,false);    mFirstPosition=curPosition;    curBottomEdge=prevIterationView.getTop() - itemSpacing;    curPosition--;  }  if (isScrollCycle() && curPosition == -1) {    curPosition=mItemCount - 1;    while (curBottomEdge > galleryTop && getChildCount() <= mItemCount) {      prevIterationView=makeAndAddVerticalView(curPosition,curPosition - mSelectedPosition,curBottomEdge,false);      mFirstPosition=curPosition;      curBottomEdge=prevIterationView.getTop() - itemSpacing;      curPosition--;    }  }}  }
class C{  public DoubleMatrix[] jblas_sparseSVD(){  return org.jblas.Singular.sparseSVD(new DoubleMatrix(this.getArray()));}  }
class C{  protected void doStart(){}  }
class C{  @Override public int hashCode(){  long hash=Double.doubleToLongBits(latCenter);  hash=hash * 31 + Double.doubleToLongBits(lonMin);  hash=hash * 31 + (long)super.hashCode();  return (int)(hash >> 32 + hash);}  }
class C{  void reset(){  openMonFactoryMap.clear();}  }
class C{  private void readAttributes(InputNode node,Object source,Section section) throws Exception {  NodeMap<InputNode> list=node.getAttributes();  LabelMap map=section.getAttributes();  for (  String name : list) {    InputNode value=node.getAttribute(name);    if (value != null) {      readAttribute(value,source,section,map);    }  }  validate(node,map,source);}  }
class C{  public int hash(final Currency c1,final Currency c2){  return Math.min(c1.numericCode(),c2.numericCode()) * 1000 + Math.max(c1.numericCode(),c2.numericCode());}  }
class C{  public int rank(){  return new SingularValueDecomposition(this).rank();}  }
class C{  private InputStream openResponseEntity(State state,HttpResponse response) throws StopRequest {  try {    return response.getEntity().getContent();  } catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while getting entity: " + ex.toString(),ex);  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public TaskResourceRep hostClusterChange(URI hostId,URI clusterId,URI vCenterDataCenterId,boolean isVcenter,URI eventId){  Host hostObj=_dbClient.queryObject(Host.class,hostId);  URI oldClusterURI=hostObj.getCluster();  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Host.class,hostId,taskId,ResourceOperationTypeEnum.UPDATE_HOST);  if (!NullColumnValueGetter.isNullURI(oldClusterURI) && NullColumnValueGetter.isNullURI(clusterId) && ComputeSystemHelper.isClusterInExport(_dbClient,oldClusterURI)) {    computeController.removeHostsFromExport(eventId,Arrays.asList(hostId),oldClusterURI,isVcenter,vCenterDataCenterId,taskId);  } else   if (NullColumnValueGetter.isNullURI(oldClusterURI) && !NullColumnValueGetter.isNullURI(clusterId) && ComputeSystemHelper.isClusterInExport(_dbClient,clusterId)) {    computeController.addHostsToExport(eventId,Arrays.asList(hostId),clusterId,taskId,oldClusterURI,isVcenter);  } else   if (!NullColumnValueGetter.isNullURI(oldClusterURI) && !NullColumnValueGetter.isNullURI(clusterId) && !oldClusterURI.equals(clusterId)&& (ComputeSystemHelper.isClusterInExport(_dbClient,oldClusterURI) || ComputeSystemHelper.isClusterInExport(_dbClient,clusterId))) {    computeController.addHostsToExport(eventId,Arrays.asList(hostId),clusterId,taskId,oldClusterURI,isVcenter);  } else {    ComputeSystemHelper.updateHostAndInitiatorClusterReferences(_dbClient,clusterId,hostId);    ComputeSystemHelper.updateHostVcenterDatacenterReference(_dbClient,hostId,vCenterDataCenterId);    _dbClient.ready(Host.class,hostId,taskId);  }  return toTask(hostObj,taskId,op);}  }
class C{  public static Integer max(ArrayList<Integer> list){  if (list.size() == 0)   return null;  Integer max=list.get(0);  for (int i=0; i < list.size(); i++) {    if (list.get(i) > max)     max=list.get(i);  }  return max;}  }
class C{  public WebappTemplateLoader(ServletContext servletContext){  this(servletContext,"/");}  }
class C{  public T caseCompositeElement(CompositeElement object){  return null;}  }
class C{  public Allele allele(int alleleId){  return alleleId < -1 ? null : mAlleles[alleleId + 1];}  }
class C{  @Override public Vertex parsePushByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex expression=network.createTemporyVertex();  expression.addRelationship(Primitive.INSTANTIATION,Primitive.PUSH);  long id=dataStream.readLong();  if (id == 0) {    return expression;  }  Vertex element=network.findById(id);  if (element != null) {    expression.addRelationship(Primitive.ARGUMENT,element,Integer.MAX_VALUE);  }  return expression;}  }
class C{  public static long log(Logger logger,String message){  long now=0;  if (logger.isTraceEnabled()) {    now=System.currentTimeMillis();    logger.trace("PERFORMANCE: {}: {}",now,message);  }  return now;}  }
class C{  public QuarterDateFormat(TimeZone zone,String[] quarterSymbols){  this(zone,quarterSymbols,false);}  }
class C{  public void addShipping(Shipping shipping){  addShippingAttribute(SHIPPING_ATTRIBUTE,shipping);}  }
class C{  public NamedCollectionConverter(@SuppressWarnings("rawtypes") final Class<? extends Collection> type,final Mapper mapper,final String itemName,final Class<?> itemType){  super(mapper,type);  name=itemName;  this.type=itemType;}  }
class C{  private void backupScreens(BackupDataOutput data) throws IOException {  ContentResolver cr=mContext.getContentResolver();  Cursor cursor=cr.query(LauncherSettings.WorkspaceScreens.CONTENT_URI,SCREEN_PROJECTION,null,null,null);  try {    cursor.moveToPosition(-1);    if (DEBUG)     Log.d(TAG,"dumping screens after: " + mLastBackupRestoreTime);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final long updateTime=cursor.getLong(ID_MODIFIED);      Key key=getKey(Key.SCREEN,id);      mKeys.add(key);      final String backupKey=keyToBackupKey(key);      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime) {        writeRowToBackup(key,packScreen(cursor),data);      } else {        if (VERBOSE)         Log.v(TAG,"screen already backup up " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  public Call(Token t,Method method,List<Expression> params,boolean isExpression){  super(t);  this.method=method;  this.params=params;  this.isExpression=isExpression;}  }
class C{  @SafeVarargs public final <U>SimpleReactStream<U> ofAsync(final Supplier<U>... actions){  return reactI(actions);}  }
class C{  public GeometrySnapper(Geometry srcGeom){  this.srcGeom=srcGeom;}  }
class C{  public void apply(Switch sw){  ((RefSwitch)sw).caseParameterRef(this);}  }
class C{  public static void println(ErrorMessages message,int data){  if (Options.verbose) {    out.println(ErrorMessages.get(message,data));  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Float(stack.getUIMgrSafe().getOverscanScaleWidth());}  }
class C{  @Action(value="/receipts/collectionsWorkflow-submissionReportCheque") public String submissionReportCheque(){  return SUBMISSION_REPORT_CHEQUE;}  }
class C{  private void checkOpacityMethodClient(){  StackTraceElement[] stackTrace=new Throwable().getStackTrace();  if (stackTrace.length > 2) {    String callingClassName=stackTrace[2].getClassName();    if (BasicPanel.class.getName().equals(callingClassName))     throw new IllegalStateException("BasicPanel should not use its own opacity methods. Use " + "super.isOpaque()/setOpaque() instead.");  }}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @Nonnull public BugInstance addCalledMethod(DismantleBytecode visitor){  return addMethod(MethodAnnotation.fromCalledMethod(visitor)).describe(MethodAnnotation.METHOD_CALLED);}  }
class C{  int findAndFill(RowCursor cursor){  int ptr=find(cursor);  if (ptr >= 0) {    cursor.setRow(_buffer,ptr);    cursor.setLeafBlock(this,ptr);  }  return ptr;}  }
class C{  public static IllegalArgumentException newIllegalArgumentException(String message,Object... arguments){  return initCause(new IllegalArgumentException(formatMessage(0,message,arguments)),arguments);}  }
class C{  public static <T extends Collection<String>>T removeMatching(String pattern,T strings){  for (Iterator<String> iter=strings.iterator(); iter.hasNext(); ) {    String s=iter.next();    if (s.matches(pattern))     iter.remove();  }  return strings;}  }
class C{  public void onBindView(Object object){  mObject=(T)object;  updateView(mView.getContext(),mObject);}  }
class C{  @Field(24) public __VARIANT_NAME_3_union pcyVal(Pointer<CY> pcyVal){  this.io.setPointerField(this,24,pcyVal);  return this;}  }
class C{  private boolean checkId(final String id){  Assert.isNotNull(id);  if (id.equals(IJavaRefactorings.RENAME_COMPILATION_UNIT))   return true; else   if (id.equals(IJavaRefactorings.RENAME_ENUM_CONSTANT))   return true; else   if (id.equals(IJavaRefactorings.RENAME_FIELD))   return true; else   if (id.equals(IJavaRefactorings.RENAME_JAVA_PROJECT))   return true; else   if (id.equals(IJavaRefactorings.RENAME_LOCAL_VARIABLE))   return true; else   if (id.equals(IJavaRefactorings.RENAME_METHOD))   return true; else   if (id.equals(IJavaRefactorings.RENAME_PACKAGE))   return true; else   if (id.equals(RENAME_RESOURCE))   return true; else   if (id.equals(IJavaRefactorings.RENAME_SOURCE_FOLDER))   return true; else   if (id.equals(IJavaRefactorings.RENAME_TYPE))   return true; else   if (id.equals(IJavaRefactorings.RENAME_TYPE_PARAMETER))   return true;  return false;}  }
class C{  public static boolean matches(final NaviNode node,final String operator,final int outdegree){  if ("<".equals(operator)) {    return node.getRawNode().getOutgoingEdges().size() < outdegree;  } else   if ("=".equals(operator)) {    return node.getRawNode().getOutgoingEdges().size() == outdegree;  } else   if (">".equals(operator)) {    return node.getRawNode().getOutgoingEdges().size() > outdegree;  }  throw new IllegalStateException("IE02203: Unknown operator " + operator);}  }
class C{  public Point offsetToCell(int offset){  if (offset < 0 || offset >= model.getByteCount()) {    return new Point(-1,-1);  }  int row=offset / 16;  int col=offset % 16;  return new Point(row,col);}  }
class C{  public caption addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static Feather with(Object... modules){  return new Feather(Arrays.asList(modules));}  }
class C{  protected Drawable loadDefaultLogo(PackageManager pm){  return null;}  }
class C{  public String toString(){  return super.toString() + (isTransferring() ? " until " + String.format("%.2f",this.transferDoneTime) : "");}  }
class C{  public static void main(String[] args){  Header.printHeader(ActivityAnalyser.class.toString(),args);  String xmlFolder=args[0];  String vehicleIdFile=args[1];  String outputFile=args[2];  int analysis=Integer.parseInt(args[3]);  int numberOfThreads=Integer.parseInt(args[4]);  ActivityAnalyser aa=new ActivityAnalyser(numberOfThreads);  aa.analyse(analysis,xmlFolder,vehicleIdFile,outputFile);  Header.printFooter();}  }
class C{  public TimeChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  private RDOParameter findOrCreateRoleParameter(RDORole roleRdo,String parameterId){  RDOParameter roleParameter=roleRdo.getParameter(parameterId);  if (roleParameter == null) {    roleParameter=new RDOParameter();    roleParameter.setParentEntryNr(roleRdo.getEntryNr());    roleParameter.setEntryNr(sequence.nextValue());    roleParameter.setId(parameterId);    roleRdo.getParameters().add(roleParameter);  }  return roleParameter;}  }
class C{  public double num(){  return 0.0;}  }
class C{  private void LT(){  int x0=rotateLeft(X0,13);  int x2=rotateLeft(X2,3);  int x1=X1 ^ x0 ^ x2;  int x3=X3 ^ x2 ^ x0 << 3;  X1=rotateLeft(x1,1);  X3=rotateLeft(x3,7);  X0=rotateLeft(x0 ^ X1 ^ X3,5);  X2=rotateLeft(x2 ^ X3 ^ (X1 << 7),22);}  }
class C{  public MutableDateTime addWrapField(int value){  iInstant.setMillis(getField().addWrapField(iInstant.getMillis(),value));  return iInstant;}  }
class C{  public synchronized void registerSerializer(Serializer serializer){  Class objClass=getSerializerType(serializer);  if (!serializers.containsKey(objClass)) {    int index=COUNTER.getAndIncrement();    serializers.put(objClass,new SerializerWrapper(index,serializer));    if (serializersArray.length <= index) {      serializersArray=Arrays.copyOf(serializersArray,index + 1);    }    serializersArray[index]=serializer;    LOGGER.info(String.format("Registered new serializer '%s' %n  for '%s' at index %d",serializer.getClass().getName(),objClass.getName(),index));  }}  }
class C{  public void remove_short_at_index(int i){  this.short_ref[i]=null;  if ((--this.short_ref_count) != 0) {    for (int j=i; j < this.short_ref_count; j++)     this.short_ref[i]=this.short_ref[i + 1];  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_EXIT;}  }
class C{  public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){  verify(cr,null,dump,pw);}  }
class C{  public AccountHeaderBuilder withAlternativeProfileHeaderSwitching(boolean alternativeProfileHeaderSwitching){  this.mAlternativeProfileHeaderSwitching=alternativeProfileHeaderSwitching;  return this;}  }
class C{  @Override public boolean allTablesAreSelectable(){  debugCodeCall("allTablesAreSelectable");  return true;}  }
class C{  public void documentRegistration(){}  }
class C{  public void initDatabase(String selected){  int index=(p_panel != null ? p_panel.fDatabaseType.getSelectedIndex() : 0);  initDatabase(selected,index);}  }
class C{  public static void main(String... args) throws Exception {  convert("bin/org/h2/res");  convert("bin/org/h2/server/web/res");}  }
class C{  @Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){  if (DBG)   Log.d(LOG_TAG,"runQueryOnBackgroundThread(" + constraint + ")");  String query=(constraint == null) ? "" : constraint.toString();  Cursor cursor=null;  if (mSearchView.getVisibility() != View.VISIBLE || mSearchView.getWindowVisibility() != View.VISIBLE) {    return null;  }  try {    cursor=getSuggestions(query,QUERY_LIMIT);    if (cursor != null) {      cursor.getCount();      return cursor;    }  } catch (  RuntimeException e) {    Log.w(LOG_TAG,"Search suggestions query threw an exception.",e);  }  return null;}  }
class C{  private void handleRequest(Request request){  if (interceptors == null) {    return;  }  for (  IInterceptor interceptor : interceptors) {    interceptor.handleRequest(request,this,request.getCommand());  }}  }
class C{  public Polynomial(int order){  this.order=order;  this.a=new double[order + 1];  Arrays.fill(a,0.0);}  }
class C{  public void send(Set recipients,boolean multicast) throws InterruptedException, ReplyException {  if (Thread.interrupted()) {    throw new InterruptedException();  }  this.op=operationType.DRAIN_POOL;  Set recips=new HashSet(recipients);  DistributedMember me=originDm.getDistributionManagerId();  if (recips.contains(me)) {    recips.remove(me);  }  rp=new ReplyProcessor21(originDm,recips);  processorId=rp.getProcessorId();  setRecipients(recips);  setMulticast(multicast);  originDm.putOutgoing(this);  rp.waitForReplies();}  }
class C{  public static void encode(int v,OutputStream stream) throws IOException {  encode(convertIntToLongNoSignExtend(v),stream);}  }
class C{  public HighlightBuilder field(String name,int fragmentSize,int numberOfFragments,int fragmentOffset){  if (fields == null) {    fields=new ArrayList<>();  }  fields.add(new Field(name).fragmentSize(fragmentSize).numOfFragments(numberOfFragments).fragmentOffset(fragmentOffset));  return this;}  }
class C{  private void disconnected(Bundle data){  clientHandle=null;  IMqttToken token=removeMqttToken(data);  if (token != null) {    ((MqttTokenAndroid)token).notifyComplete();  }  if (callback != null) {    callback.connectionLost(null);  }}  }
class C{  public boolean isTable(long arc){switch ((int)arc) {case 120:    return true;case 110:  return true;case 101:return true;case 100:return true;default :break;}return false;}  }
class C{  public int read() throws IOException {  if (pos >= 0) {    int cur=pos % BUFF_SIZE;    if (cur < bar) {      pos++;      return buff[cur];    }    if (cur != end) {      buff[cur]=inStream.read();      bar=cur + 1;      pos++;      return buff[cur];    } else {      pos=-1;    }  }  return inStream.read();}  }
class C{  public void fling(float velocityAngle){  mMode=FLING_MODE;  mFinished=false;  float velocity=velocityAngle;  mVelocity=velocity;  mDuration=(int)(1000.0f * Math.sqrt(2.0f * mCoeffVelocity * Math.abs(velocity) / mDeceleration));  mStartTime=AnimationUtils.currentAnimationTimeMillis();}  }
class C{  public PrincipalId addJitUser(String tenantName,String userName,PersonDetail detail,String extIdpEntityId,String extUserId) throws Exception {  ValidateUtil.validateNotEmpty(extIdpEntityId,"ExternalIDP entity ID.");  ValidateUtil.validateNotEmpty(extUserId,"ExternalIDP User ID.");  if (isJitEnabledForExternalIdp(tenantName,extIdpEntityId)) {    return getService().addJitUser(tenantName,userName,detail,extIdpEntityId,extUserId,this.getServiceContext());  }  throw new InvalidPrincipalException(String.format("User %s cannot be added " + "since JIT is not enabled for external IDP with entityID %s",userName,extIdpEntityId),userName);}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   if (state.random[thread].nextBoolean(s.mutationProbability(x))) {    int old=genome[x];    for (int retries=0; retries < s.duplicateRetries(x) + 1; retries++) {switch (s.mutationType(x)) {case IntegerVectorSpecies.C_RESET_MUTATION:        genome[x]=randomValueFromClosedInterval((int)s.minGene(x),(int)s.maxGene(x),state.random[thread]);      break;case IntegerVectorSpecies.C_RANDOM_WALK_MUTATION:    int min=(int)s.minGene(x);  int max=(int)s.maxGene(x);if (!s.mutationIsBounded(x)) {  max=Integer.MAX_VALUE;  min=Integer.MIN_VALUE;}do {int n=(int)(state.random[thread].nextBoolean() ? 1 : -1);int g=genome[x];if ((n == 1 && g < max) || (n == -1 && g > min)) genome[x]=g + n; else if ((n == -1 && g < max) || (n == 1 && g > min)) genome[x]=g - n;} while (state.random[thread].nextBoolean(s.randomWalkProbability(x)));break;default :state.output.fatal("In IntegerVectorIndividual.defaultMutate, default case occurred when it shouldn't have");break;}if (genome[x] != old) break;}}}  }
class C{  public Constant(T value){  this.value=value;}  }
class C{  public ProtocolReplEventRequest waitReplEventRequest() throws ReplicatorException, IOException {  ProtocolMessage msg=readMessage();  if (msg instanceof ProtocolReplEventRequest == false)   throw new THLException("Protocol error");  return (ProtocolReplEventRequest)msg;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ArchiveTokenArchHdr[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_tblPrefix = ").append(m_tblPrefix);  buffer.append(", m_flags = ").append(m_flags);  buffer.append(", m_accessType = ").append(m_accessType);  buffer.append(", m_acsId = ").append(m_acsId);  buffer.append("]");  return buffer.toString();}  }
class C{  public WbXmlBody addPostPi(WbXmlAttribute pi){  this.postPi.add(pi);  return this;}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  @VisibleForTesting double updateElevation(double elevation){  double oldAverage=elevationBuffer.getAverage();  elevationBuffer.setNext(elevation);  double newAverage=elevationBuffer.getAverage();  currentSegment.updateElevationExtremities(newAverage);  double difference=newAverage - oldAverage;  if (difference > 0) {    currentSegment.addTotalElevationGain(difference);  }  return difference;}  }
class C{  static <T>Injector.BindingBuilder<T> bean(Class<T> type){  Objects.requireNonNull(type);  return builder().bean(type);}  }
class C{  @SuppressWarnings("unchecked") public void dispose(){  addLaterVector=null;  MapBean mb=(MapBean)get(com.bbn.openmap.MapBean.class);  if (mb != null) {    remove(mb);    mb.dispose();  }  for (  Object obj : this.copyChildren()) {    remove(obj);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public boolean isAnimal(){  return typeString.contains(SUFFIX_ANIMAL);}  }
class C{  private void init(){  linePaint.setColor(lineColor);  solidPaint.setColor(solidColor);  hollowPaint.setColor(hollowColor);  suckerPaint.setColor(suckerColor);  clearPaint.setColor(0);  clearPaint.setXfermode(FreeTimeLineUI.CLEAR_XFER_MODE);  strokeSize=FreeTimeLineUI.dpToPixel(4.0F,this.getResources());  linePaint.setStrokeWidth(strokeSize);  hollowPaint.setStrokeWidth(strokeSize);  suckerPaint.setStrokeWidth(strokeSize);  this.type=FreeTimeLineUI.NODE_HOLLOW;}  }
class C{  public static Tuple max(Iterator tuples,String field,Comparator cmp){  Tuple t=null, tmp;  Object min=null;  if (tuples.hasNext()) {    t=(Tuple)tuples.next();    min=t.get(field);  }  while (tuples.hasNext()) {    tmp=(Tuple)tuples.next();    Object obj=tmp.get(field);    if (cmp.compare(obj,min) > 0) {      t=tmp;      min=obj;    }  }  return t;}  }
class C{  private void checkValid(MultiPoint g){  checkInvalidCoordinates(g.getCoordinates());}  }
class C{  public String[] list(SmbFilenameFilter filter) throws SmbException {  return list("*",ATTR_DIRECTORY | ATTR_HIDDEN | ATTR_SYSTEM,filter,null);}  }
class C{  public RetryingDirContext(RetrySchedule schedule,int maxRetries,Logger logger) throws NamingException {  super(schedule,maxRetries,logger);}  }
class C{  public <V>StrSubstitutor(final Map<String,V> valueMap,final String prefix,final String suffix,final char escape,final String valueDelimiter){  this(StrLookup.mapLookup(valueMap),prefix,suffix,escape,valueDelimiter);}  }
class C{  public static FixedWidthTextTableSchema load(String loc) throws DataIOException {  try {    InputStream is=IOLib.streamFromString(loc);    if (is == null)     return null;    FixedWidthTextTableSchema fws=new FixedWidthTextTableSchema();    BufferedReader br=new BufferedReader(new InputStreamReader(is));    String line;    while ((line=br.readLine()) != null) {      String[] tok=line.split("\t");      fws.addColumn(tok[0],Integer.parseInt(tok[1]));    }    return fws;  } catch (  Exception e) {    throw new DataIOException(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isInQueue(){  return inQueue;}  }
class C{  public static final String nicDisplayTextFunction(Interface iface){  String string;  if (iface.hasSpecifiedName()) {    string=String.format("NIC: %s, Address: %s, Hardware Address: %s",iface.getName(),iface.getIp(),iface.getMac());  } else {    string=String.format("NIC, Address: %s, Hardware Address: %s",iface.getIp(),iface.getMac());  }  return string;}  }
class C{  @Override public void mouseReleased(MouseEvent e){  events.clear();}  }
class C{  @JsonCreator public static RepairContext create(@JsonProperty("nodes") final List<String> nodes,@JsonProperty("key_spaces") final List<String> keySpaces,@JsonProperty("column_families") final List<String> columnFamilies){  return new RepairContext(nodes,keySpaces,columnFamilies);}  }
class C{  private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){  if (x > left && x < right && y > top && y < bottom) {    return true;  }  return false;}  }
class C{  public static SQLiteConnectionPool open(SQLiteDatabaseConfiguration configuration){  if (configuration == null) {    throw new IllegalArgumentException("configuration must not be null.");  }  SQLiteConnectionPool pool=new SQLiteConnectionPool(configuration);  pool.open();  return pool;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY)) {    setValue(evt.getNewValue());    setBackground(false);  }}  }
class C{  @Override public void onPageFinished(WebView view,String url){  super.onPageFinished(view,url);  if (!isCurrentlyLoading && !url.startsWith("about:")) {    return;  }  isCurrentlyLoading=false;  if (this.doClearHistory) {    view.clearHistory();    this.doClearHistory=false;  }  parentEngine.client.onPageFinishedLoading(url);}  }
class C{  private static void s_uaColSumEqNe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumEqNe(0.0,bv,bOp);  out.allocateDenseBlock(true);  Arrays.fill(out.getDenseBlock(),0,out.getNumColumns(),agg0);  if (agg0 != 0.0)   out.setNonZeros(out.getNumColumns());  if (in.isEmptyBlock(false))   return;  SparseBlock sblock=in.getSparseBlock();  for (int j=0; j < sblock.numRows(); j++)   if (!sblock.isEmpty(j)) {    int apos=sblock.pos(j);    int alen=sblock.size(j);    int[] aix=sblock.indexes(j);    double[] avals=sblock.values(j);    for (int i=apos; i < apos + alen; i++) {      int cnt=sumEqNe(avals[i],bv,bOp);      out.quickSetValue(0,aix[i],cnt);    }  }}  }
class C{  protected int drawUnselectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  Container c=getContainer();  if (c instanceof JPasswordField) {    JPasswordField f=(JPasswordField)c;    if (!f.echoCharIsSet()) {      return super.drawUnselectedText(g,x,y,p0,p1);    }    if (f.isEnabled()) {      g.setColor(f.getForeground());    } else {      g.setColor(f.getDisabledTextColor());    }    char echoChar=f.getEchoChar();    int n=p1 - p0;    for (int i=0; i < n; i++) {      x=drawEchoCharacter(g,x,y,echoChar);    }  }  return x;}  }
class C{  public static Object[] dynamic(Object[] args){  StringBuilder buff=new StringBuilder();  for (  Object a : args) {    buff.append(a);  }  return new Object[]{buff.toString()};}  }
class C{  private void initialSetup() throws ServletException {  wc=Activator.getDefault().getWebContainer();  ctx=wc.createDefaultHttpContext();  Dictionary<String,String> dict=new Hashtable<String,String>();  dict.put("contextConfigLocation","\n" + "classpath:/sernet/gs/server/spring/veriniceserver-common.xml \n" + "classpath:/sernet/gs/server/spring/veriniceserver-osgi.xml \n"+ "classpath:/sernet/gs/server/spring/veriniceserver-daos-common.xml \n"+ "classpath:/sernet/gs/server/spring/veriniceserver-daos-osgi.xml \n"+ "classpath:/sernet/gs/server/spring/veriniceserver-security-osgi.xml \n"+ "classpath:/sernet/gs/server/spring/veriniceserver-ldap.xml \n"+ "classpath:/sernet/gs/server/spring/veriniceserver-jbpm-dummy.xml \n"+ "classpath:/sernet/gs/server/spring/veriniceserver-rightmanagement-dummy.xml \n" + getSearchConfigFiles() + "classpath:/sernet/gs/server/spring/veriniceserver-reportdeposit-dummy.xml \n"+ "classpath:/sernet/gs/server/spring/veriniceserver-account-dummy.xml");  dict.put(ContextLoader.CONTEXT_CLASS_PARAM,OsgiBundleXmlWebApplicationContext.class.getName());  wc.setContextParam(dict,ctx);  dict=new Hashtable<String,String>();  dict.put(SERVLET_NAME,"GetHitroConfig");  dict.put("snca.xml.path","/WebContent/WEB-INF/");  wc.registerServlet(new GetHitroConfig(),new String[]{"/GetHitroConfig"},dict,ctx);  dict=new Hashtable<String,String>();  dict.put(SERVLET_NAME,"serverTest");  wc.registerServlet(new ServerTestServlet(),new String[]{"/servertest"},dict,ctx);}  }
class C{  public List<String> prepare(final Precorrelation<HttpRequest> precorrelation) throws IOException {  final HttpRequest request=precorrelation.getRequest();  final String requestLine=String.format("%s %s %s",request.getMethod(),request.getRequestUri(),request.getProtocolVersion());  return prepare(request,"Request",precorrelation.getId(),requestLine);}  }
class C{  public Executor withProgressListener(ProgressListener listener){  progress.addProgressListener(listener);  return this;}  }
class C{  public TimeAwarePriorityQueue(int initialCapacity,Comparator<JobHolder> comparator){  super(initialCapacity,comparator,new TimeAwareComparator(comparator));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (character: ");  result.append(character);  result.append(", sequence: ");  result.append(sequence);  result.append(')');  return result.toString();}  }
class C{  public final synchronized void unpackResult(String line){  String detail=null;  try {    detail=URLDecoder.decode(line);  } catch (  Exception e) {    System.out.println("Exception decoding result URL. You may see messy results");    detail=line;  }  detail=detail.substring(detail.indexOf("?"));  TestResult tr=new TestResult(detail);  resultCount++;  killTimer(tr.scriptName + "$" + tr.testID);  manageMetaTimer(tr.scriptName + "$" + tr.testID);  finishedCases.add(tr.scriptName + "$" + tr.testID);  if (run_id != -1 && doTheInsert) {  } else   if (!doTheInsert) {    storeResultLocally(tr);  }  if (tr.result == 1)   System.out.println("FAIL: " + tr.scriptName + " "+ tr.testID);  if (tr.result == 1 && distributed)   directory_result=1;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Sequence<T> wrapStartEnd(Sequence<T> sequence,T startToken,T endToken){  Object[] arr=new Object[sequence.size() + 2];  arr[0]=startToken;  System.arraycopy(sequence.elements(),0,arr,1,sequence.size());  arr[sequence.size() + 1]=endToken;  return new ArraySequence<T>(true,(T[])arr);}  }
class C{  public static void main(String args[]){  StringBuffer sb=new StringBuffer();  sb.append("node1.node1_1.node1_1_1.node1_1_1_1, ");  sb.append("node1.node1_1.node1_1_1.node1_1_1_2, ");  sb.append("node1.node1_1.node1_1_1.node1_1_1_3, ");  sb.append("node1.node1_1.node1_1_2.node1_1_2_1, ");  sb.append("node1.node1_1.node1_1_3.node1_1_3_1, ");  sb.append("node1.node1_2.node1_2_1.node1_2_1_1, ");  sb.append("node1.node1_2.node1_2_3.node1_2_3_1, ");  sb.append("node1.node1_3.node1_3_3.node1_3_3_1, ");  sb.append("node1.node1_3.node1_3_3.node1_3_3_2, ");  String p=sb.toString();  try {    HierarchyPropertyParser hpp=new HierarchyPropertyParser(p,", ");    System.out.println("seperator: " + hpp.getSeperator());    System.out.println("depth: " + hpp.depth());    System.out.println("The tree:\n\n" + hpp.showTree());    hpp.goToRoot();    System.out.println("goto: " + hpp.goTo("node1.node1_2.node1_2_1") + ": "+ hpp.getValue()+ " | "+ hpp.fullValue()+ " leaf? "+ hpp.isLeafReached());    System.out.println("go down(wrong): " + hpp.goDown("node1"));    System.out.println("Stay still? " + hpp.getValue());    System.out.println("go to child: " + hpp.goToChild("node1_2_1_1") + ": "+ hpp.getValue()+ " | "+ hpp.fullValue()+ " leaf? "+ hpp.isLeafReached()+ " root? "+ hpp.isRootReached());    System.out.println("parent: " + hpp.parentValue());    System.out.println("level: " + hpp.getLevel());    System.out.println("context: " + hpp.context());    hpp.goToRoot();    System.out.println("After gotoRoot. leaf? " + hpp.isLeafReached() + " root? "+ hpp.isRootReached());    System.out.println("Go down(correct): " + hpp.goDown("node1_1.node1_1_1") + " value: "+ hpp.getValue()+ " | "+ hpp.fullValue()+ " level: "+ hpp.getLevel()+ " leaf? "+ hpp.isLeafReached()+ " root? "+ hpp.isRootReached());    hpp.goToParent();    System.out.println("value: " + hpp.getValue() + " | "+ hpp.fullValue());    System.out.println("level: " + hpp.getLevel());    String[] chd=hpp.childrenValues();    for (int i=0; i < chd.length; i++) {      System.out.print("children " + i + ": "+ chd[i]);      hpp.goDown(chd[i]);      System.out.println("real value: " + hpp.getValue() + " | "+ hpp.fullValue()+ "(level: "+ hpp.getLevel()+ ")");      hpp.goToParent();    }    System.out.println("Another way to go to root:" + hpp.goTo("node1") + ": "+ hpp.getValue()+ " | "+ hpp.fullValue());  } catch (  Exception e) {    System.out.println(e.getMessage());    e.printStackTrace();  }}  }
class C{  public JsonObject(){  names=new ArrayList<String>();  values=new ArrayList<JsonValue>();  table=new HashIndexTable();}  }
class C{  public final boolean cancelKeyExpiration(ByteArrayWrapper key){  ScheduledFuture<?> future=expirationsMap.remove(key);  if (future == null)   return false;  return future.cancel(false);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    IOUtils.closeQuietly(journalWriter);  }  Writer writer=null;  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),HTTP.US_ASCII));    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(UPDATE + " " + entry.diskKey+ '\n');      } else {        writer.write(CLEAN + " " + entry.diskKey+ " "+ EXPIRY_PREFIX+ entry.expiryTimestamp+ entry.getLengths()+ '\n');      }    }  }  finally {    IOUtils.closeQuietly(writer);  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),HTTP.US_ASCII));}  }
class C{  private void clearResultLocked(){  mResultId=-1;  mResult=false;}  }
class C{  public static RuntimeException rewrapAndThrowUncheckedException(String newMessage,Throwable ex){  rewrapAndThrowIfInstance(newMessage,ex,RuntimeException.class);  rewrapAndThrowIfInstance(newMessage,ex,Error.class);  throw createPalantirRuntimeException(newMessage,ex);}  }
class C{  private int computeHashcode(){  int sum=lhs.hashCode();  for (  Symbol s : rhs) {    sum=(sum + s.hashCode()) % ((1 << 31) - 1);  }  this.hashCode=sum;  return this.hashCode;}  }
class C{  final public void disable_tracing(){}  }
class C{  @Override public void draw(Graphics2D g){  if (getEditor().getTool().supportsHandleInteraction()) {    drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR));  } else {    drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED));  }}  }
class C{  public static final void sort(int[] a,Object[] b,int[] abuf,Object[] bbuf,int begin,int end){  int length=end - begin;  if (length < SORT_THRESHOLD) {    insertionsort(a,b,begin,end - 1);    return;  }  for (int i=0, idx=begin; i < length; ++i, ++idx) {    abuf[i]=a[idx];    bbuf[i]=b[idx];  }  mergesort(abuf,a,bbuf,b,begin,end,-begin);}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return VersionInfoResponse.create(dm,this.getSender());}  }
class C{  void adjustMTU(){  for (m_msslevel=0; PACKET_MAXIMUMS[(m_msslevel + 1)] > 0; ++m_msslevel) {    if (PACKET_MAXIMUMS[m_msslevel] <= m_mtu_advise) {      break;    }  }  m_mss=m_mtu_advise - PACKET_OVERHEAD;  logger.log(Level.FINE,"Adjusting mss to " + m_mss + " bytes");  m_ssthresh=Math.max(m_ssthresh,2 * m_mss);  m_cwnd=Math.max(m_cwnd,m_mss);}  }
class C{  public boolean lastExists(){  return lastExistingIdx == ids.length - 1;}  }
class C{  protected void parseDefineButton(InStream in) throws IOException {  int id=in.readUI16();  List buttonRecords=ButtonRecord.read(in);  SWFActions actions=tagtypes.tagDefineButton(id,buttonRecords);  if (actions == null) {    return;  }  actions.start(0);  ActionParser parser=new ActionParser(actions);  parser.parse(in);  actions.done();}  }
class C{  public int hashCode(){  return namespaceURI.hashCode() ^ localName.hashCode() ^ (specified ? -1 : 0);}  }
class C{  public ObjectQuery prepareObjectQuery(QueryLanguage ql,String query) throws MalformedQueryException, RepositoryException {  return createObjectQuery(prepareTupleQuery(ql,query));}  }
class C{  public void checkAssociationValidForRegistration(Association assoc) throws IllegalArgumentException {  boolean isActionListEmpty=true;  boolean isFileExtensionEmpty=true;  boolean isValid=false;  if (assoc.getActionList() != null) {    isActionListEmpty=assoc.getActionList().isEmpty();  }  if (assoc.getFileExtList() != null) {    isFileExtensionEmpty=assoc.getFileExtList().isEmpty();  }  if (isFileExtensionEmpty && (assoc.getMimeType() == null)) {    isValid=false;  } else   if ((assoc.getDescription() != null) || (assoc.getIconFileName() != null) || (!isActionListEmpty)) {    isValid=!isFileExtensionEmpty;  } else {    isValid=true;  }  if (!isValid) {    throw new IllegalArgumentException("The given association is invalid. It should " + "specify both the mimeType and fileExtensionList fields to perform this operation.");  }}  }
class C{  public static void append(CharSequence from,File to,Charset charset) throws IOException {  write(from,to,charset,true);}  }
class C{  public void changeRefLink(Id<TransitStopFacility> stopFacilityId,Id<Link> newRefLinkId){  TransitStopFacility oldStopFacility=schedule.getFacilities().get(stopFacilityId);  TransitStopFacility newChildStopFacility=parentStops.getChildStopFacility(getParentId(stopFacilityId),newRefLinkId.toString());  replaceStopFacilityInAllRoutes(oldStopFacility,newChildStopFacility);}  }
class C{  public int updateNote(Note note){  SQLiteDatabase db=getWritableDatabase();  String spannableAsHtml=Html.toHtml(note.getSpannable());  String date=dt.format(new Date());  ContentValues values=new ContentValues();  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));  values.put(KEY_DATE_UPDATED,date);  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);  values.put(KEY_NOTE_TITLE,note.getTitle());  return db.update(TABLE_NOTES,values,KEY_ID + "=?",new String[]{String.valueOf(note.getId())});}  }
class C{  @Override public boolean isPostOperation(){  return this.postOperation;}  }
class C{  public boolean hasErrors(){  return errors != null;}  }
class C{  private static BigInteger computeMonths(Duration d){  return d.getYears().multiply(BigInteger.valueOf(12)).add(d.getMonths());}  }
class C{  protected static double tanSquared(double x){  return Math.tan(x) * Math.tan(x);}  }
class C{  public void writeU16(int val){  check(val,16);  need(2);  array[pos++]=(byte)((val >>> 8) & 0xFF);  array[pos++]=(byte)(val & 0xFF);}  }
class C{  private void checkRowCount(int testRowCount) throws SQLException {  Statement stmt=connection.createStatement();  try {    ResultSet rs=stmt.executeQuery("SELECT * FROM test_svpt");    int counter=0;    while (rs.next())     counter++;    assertTrue("Incorrect result set, expecting " + testRowCount + " rows, obtained "+ counter+ ".",testRowCount == counter);  }  finally {    stmt.close();  }}  }
class C{  public static Object invokeSwingUtilities2StaticMethod(String methodName,Class[] paramsType,Object[] paramsValue){  return ReflectHelper.invokeStaticMethod(ReflectHelper.getClass(getSwingUtilities2ClassName()),methodName,paramsType,paramsValue);}  }
class C{  public Graph search(List<Node> targets){  long start=System.currentTimeMillis();  score=0.0;  if (targets == null)   throw new NullPointerException();  for (  Node target : targets) {    if (!fgsScore.getVariables().contains(target))     throw new IllegalArgumentException("Target is not one of the variables for the score.");  }  this.targets=targets;  topGraphs.clear();  lookupArrows=new ConcurrentHashMap<>();  final List<Node> nodes=new ArrayList<>(fgsScore.getVariables());  if (adjacencies != null) {    adjacencies=GraphUtils.replaceNodes(adjacencies,nodes);  }  calcDConnections(targets);  fes();  bes();  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - start;  this.logger.log("graph","\nReturning this graph: " + graph);  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.flush();  this.modelScore=score;  Set<Node> mb=new HashSet<>();  mb.addAll(targets);  for (  Node target : targets) {    mb.addAll(graph.getAdjacentNodes(target));    for (    Node child : graph.getChildren(target)) {      mb.addAll(graph.getParents(child));    }  }  Graph mbgraph=graph.subgraph(new ArrayList<>(mb));  storeGraph(mbgraph);  return mbgraph;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  if (!(dataset instanceof IntervalXYDataset && dataset instanceof TableXYDataset)) {    String message="dataset (type " + dataset.getClass().getName() + ") has wrong type:";    boolean and=false;    if (!IntervalXYDataset.class.isAssignableFrom(dataset.getClass())) {      message+=" it is no IntervalXYDataset";      and=true;    }    if (!TableXYDataset.class.isAssignableFrom(dataset.getClass())) {      if (and) {        message+=" and";      }      message+=" it is no TableXYDataset";    }    throw new IllegalArgumentException(message);  }  IntervalXYDataset intervalDataset=(IntervalXYDataset)dataset;  double value=intervalDataset.getYValue(series,item);  if (Double.isNaN(value)) {    return;  }  double total=0.0;  if (this.renderAsPercentages) {    total=DatasetUtilities.calculateStackTotal((TableXYDataset)dataset,item);    value=value / total;  }  double positiveBase=0.0;  double negativeBase=0.0;  for (int i=0; i < series; i++) {    double v=dataset.getYValue(i,item);    if (!Double.isNaN(v) && isSeriesVisible(i)) {      if (this.renderAsPercentages) {        v=v / total;      }      if (v > 0) {        positiveBase=positiveBase + v;      } else {        negativeBase=negativeBase + v;      }    }  }  double translatedBase;  double translatedValue;  RectangleEdge edgeR=plot.getRangeAxisEdge();  if (value > 0.0) {    translatedBase=rangeAxis.valueToJava2D(positiveBase,dataArea,edgeR);    translatedValue=rangeAxis.valueToJava2D(positiveBase + value,dataArea,edgeR);  } else {    translatedBase=rangeAxis.valueToJava2D(negativeBase,dataArea,edgeR);    translatedValue=rangeAxis.valueToJava2D(negativeBase + value,dataArea,edgeR);  }  RectangleEdge edgeD=plot.getDomainAxisEdge();  double startX=intervalDataset.getStartXValue(series,item);  if (Double.isNaN(startX)) {    return;  }  double translatedStartX=domainAxis.valueToJava2D(startX,dataArea,edgeD);  double endX=intervalDataset.getEndXValue(series,item);  if (Double.isNaN(endX)) {    return;  }  double translatedEndX=domainAxis.valueToJava2D(endX,dataArea,edgeD);  double translatedWidth=Math.max(1,Math.abs(translatedEndX - translatedStartX));  double translatedHeight=Math.abs(translatedValue - translatedBase);  if (getMargin() > 0.0) {    double cut=translatedWidth * getMargin();    translatedWidth=translatedWidth - cut;    translatedStartX=translatedStartX + cut / 2;  }  Rectangle2D bar=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    bar=new Rectangle2D.Double(Math.min(translatedBase,translatedValue),Math.min(translatedEndX,translatedStartX),translatedHeight,translatedWidth);  } else   if (orientation == PlotOrientation.VERTICAL) {    bar=new Rectangle2D.Double(Math.min(translatedStartX,translatedEndX),Math.min(translatedBase,translatedValue),translatedWidth,translatedHeight);  } else {    throw new IllegalStateException();  }  boolean positive=(value > 0.0);  boolean inverted=rangeAxis.isInverted();  RectangleEdge barBase;  if (orientation == PlotOrientation.HORIZONTAL) {    if (positive && inverted || !positive && !inverted) {      barBase=RectangleEdge.RIGHT;    } else {      barBase=RectangleEdge.LEFT;    }  } else {    if (positive && !inverted || !positive && inverted) {      barBase=RectangleEdge.BOTTOM;    } else {      barBase=RectangleEdge.TOP;    }  }  if (pass == 0) {    if (getShadowsVisible()) {      getBarPainter().paintBarShadow(g2,this,series,item,bar,barBase,false);    }  } else   if (pass == 1) {    getBarPainter().paintBar(g2,this,series,item,bar,barBase);    if (info != null) {      EntityCollection entities=info.getOwner().getEntityCollection();      if (entities != null) {        addEntity(entities,bar,dataset,series,item,bar.getCenterX(),bar.getCenterY());      }    }  } else   if (pass == 2) {    if (isItemLabelVisible(series,item)) {      XYItemLabelGenerator generator=getItemLabelGenerator(series,item);      drawItemLabel(g2,dataset,series,item,plot,generator,bar,value < 0.0);    }  }}  }
class C{  public void registerCallback(final CallbackManager callbackManager,final FacebookCallback<LoginResult> callback){  getLoginManager().registerCallback(callbackManager,callback);}  }
class C{  public void close() throws IOException {  reader.close();}  }
class C{  private Object invoke(final ObjectName objectName,final String method) throws InstanceNotFoundException, IOException, MBeanException, ReflectionException {  return this.server.invoke(objectName,method,new Object[]{},new String[]{});}  }
class C{  private static void vecswap(double x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  private String escapedAV() throws IOException {  beg=pos;  end=pos;  while (true) {    if (pos >= chars.length) {      return new String(chars,beg,end - beg);    }switch (chars[pos]) {case '+':case ',':case ';':      return new String(chars,beg,end - beg);case '\\':    chars[end++]=getEscaped();  pos++;break;case ' ':int cur=end;pos++;chars[end++]=' ';for (; pos < chars.length && chars[pos] == ' '; pos++) {chars[end++]=' ';}if (pos == chars.length || chars[pos] == ',' || chars[pos] == '+' || chars[pos] == ';') {return new String(chars,beg,cur - beg);}break;default :chars[end++]=chars[pos];pos++;}}}  }
class C{  public void testLogReadonlyNonExistent() throws Exception {  File logDir=prepareLogDir("testLogReadonlyNonExistent");  DiskLog log=new DiskLog();  log.setReadOnly(true);  log.setLogDir(logDir.getAbsolutePath());  try {    log.prepare();    throw new Exception("Able to prepare r/o log that has no files");  } catch (  ReplicatorException e) {  }}  }
class C{  @Override public void exceptionCaught(final ChannelHandlerContext ctx,final Throwable cause) throws Exception {  if (!Server.this.isRunning()) {    if (log.isLoggable(Level.FINEST)) {      log.finest("Got exception while server is not running: " + cause.getMessage());    }    ctx.close();  } else {    super.exceptionCaught(ctx,cause);  }}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  RelevanceModel.UserRelevanceModel<U,I> userRelModel=relModel.getModel(recommendation.getUser());  List<Tuple2od<I>> items=recommendation.getItems();  int N=Math.min(cutoff,items.size());  double eild=0.0;  double norm=0;  for (int i=0; i < N; i++) {    double ieild=0.0;    double inorm=0.0;    ToDoubleFunction<I> iDist=distModel.dist(items.get(i).v1);    for (int j=0; j < N; j++) {      if (i == j) {        continue;      }      double dist=iDist.applyAsDouble(items.get(j).v1);      if (!Double.isNaN(dist)) {        double w=disc2.disc(Math.max(0,j - i - 1)) * userRelModel.gain(items.get(j).v1);        ieild+=w * dist;        inorm+=w;      }    }    if (inorm > 0) {      eild+=disc1.disc(i) * userRelModel.gain(items.get(i).v1) * ieild / inorm;    }    norm+=disc1.disc(i);  }  if (norm > 0) {    eild/=norm;  }  return eild;}  }
class C{  public void addSignExtension(String extensionNamespace){  if (!_signExtensions.contains(extensionNamespace)) {    _signExtensions.add(extensionNamespace);    buildSignedList();  }}  }
class C{  public static double L_LevenshteinDistance(int y[],int p[]){  int L=y.length;  return (getLevenshteinDistance(y,p) / (double)L);}  }
class C{  protected void processResourceCharacteristics(SimEvent ev){  DatacenterCharacteristics characteristics=(DatacenterCharacteristics)ev.getData();  getDatacenterCharacteristicsList().put(characteristics.getId(),characteristics);  if (getDatacenterCharacteristicsList().size() == getDatacenterIdsList().size()) {    setDatacenterRequestedIdsList(new ArrayList<Integer>());    createVmsInDatacenter(getDatacenterIdsList().get(0));  }}  }
class C{  public String globalInfo(){  return m_globalInfo;}  }
class C{  public Source<LocalDate> withDaysBetween(long daysFromEpochStartInclusive,long daysFromEpochEndInclusive){  acceptableIntervalForLongLocalDate(daysFromEpochStartInclusive,daysFromEpochEndInclusive);  maxGEQMin(daysFromEpochStartInclusive,daysFromEpochEndInclusive);  return Compositions.weightWithValues(LocalDates.withDaysBetween(daysFromEpochStartInclusive,daysFromEpochEndInclusive),LocalDate.ofEpochDay(daysFromEpochEndInclusive),LocalDate.ofEpochDay(daysFromEpochStartInclusive));}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  @Override public void writeEncoded(TreeFeatureVector features,Boolean outcome) throws CleartkProcessingException {  StringBuffer output=new StringBuffer();  if (outcome == null) {    output.append("0");  } else   if (outcome.booleanValue()) {    output.append("+1");  } else {    output.append("-1");  }  output.append(createString(features));  this.trainingDataWriter.println(output);}  }
class C{  public cudaPos(long x,long y,long z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  private void handleSentImage(Intent intent){  mImageUri=(Uri)intent.getParcelableExtra(Intent.EXTRA_STREAM);  if (mImageUri != null) {    if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {      ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},PERMISSION_REQUEST_READ_CONTACTS);    } else {      startFileUpload();    }  } else {    Toast.makeText(this,R.string.cannot_find_image,Toast.LENGTH_SHORT).show();  }}  }
class C{  public void printJobFailed(PrintJobEvent pje){}  }
class C{  public static MethodOperand STATIC(RVMField target){  return new MethodOperand(target.getMemberRef(),null,STATIC);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @CanIgnoreReturnValue @Override public int remove(@Nullable Object element,int occurrences){  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  AtomicInteger existingCounter=Maps.safeGet(countMap,element);  if (existingCounter == null) {    return 0;  }  while (true) {    int oldValue=existingCounter.get();    if (oldValue != 0) {      int newValue=Math.max(0,oldValue - occurrences);      if (existingCounter.compareAndSet(oldValue,newValue)) {        if (newValue == 0) {          countMap.remove(element,existingCounter);        }        return oldValue;      }    } else {      return 0;    }  }}  }
class C{  public String runContainer(DockerSlaveTemplate slaveTemplate) throws DockerException, IOException {  final DockerCreateContainer dockerCreateContainer=slaveTemplate.getDockerContainerLifecycle().getCreateContainer();  final String image=slaveTemplate.getDockerContainerLifecycle().getImage();  CreateContainerCmd containerConfig=getClient().createContainerCmd(image);  dockerCreateContainer.fillContainerConfig(containerConfig);  slaveTemplate.getLauncher().appendContainerConfig(slaveTemplate,containerConfig);  appendContainerConfig(slaveTemplate,containerConfig);  CreateContainerResponse response=containerConfig.exec();  String containerId=response.getId();  LOG.debug("Created container {}, for {}",containerId,getDisplayName());  StartContainerCmd startCommand=getClient().startContainerCmd(containerId);  startCommand.exec();  LOG.debug("Run container {}, for {}",containerId,getDisplayName());  return containerId;}  }
class C{  public static boolean isDidAuthentication(HttpServletRequest request){  return TRUE.equals(request.getAttribute(DID_AUTHENTICATION));}  }
class C{  public ExactDoubleQuantileFinder(){  this.buffer=new DoubleArrayList(0);  this.clear();}  }
class C{  @Override public void onSurfaceCreated(GL10 gl,EGLConfig config){  try {    mIsGLContextCreated=false;    mGLWrapper=(PLOpenGLSupport.isHigherThanOpenGL1(gl) ? new GLWrapper(gl,mView.getGLSurfaceView()) : new MatrixTrackingGL(gl,mView.getGLSurfaceView()));    this.start();    if (mListener != null)     mListener.rendererCreated(this);  } catch (  Throwable e) {    PLLog.error("PLRenderer::onSurfaceCreated",e);  }}  }
class C{  public boolean isUnshared(){  return unshared;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return CHALLENGE;case 2:  return RESPONSE;default :return null;}}  }
class C{  public String byteArrayToBase64(byte[] bytes){  return Base64.encodeBase64String(bytes);}  }
class C{  public static ItemStack readSlot(ByteBuf buf,boolean network){  short type=buf.readShort();  if (type == -1) {    return null;  }  int amount=buf.readUnsignedByte();  short durability=buf.readShort();  Material material=Material.getMaterial(type);  if (material == null) {    return null;  }  CompoundTag tag=readCompound(buf,network);  ItemStack stack=new ItemStack(material,amount,durability);  stack.setItemMeta(GlowItemFactory.instance().readNbt(material,tag));  return stack;}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  @Deprecated public Color colorMultiplier(){  return Color.white;}  }
class C{  public void playTo(Player player,Location location){  player.playSound(location,sound,volume,pitch);}  }
class C{  private static void fillEdgesTable(final CConnection connection,final List<INaviEdge> edges) throws SQLException {  final String query="INSERT INTO " + CTableNames.EDGES_TABLE + "(source_node_id, target_node_id, x1, y1, x2, y2, type, "+ "color, visible, selected, comment_id) VALUES "+ "( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";  final PreparedStatement preparedStatement=connection.getConnection().prepareStatement(query,PreparedStatement.RETURN_GENERATED_KEYS);  try {    for (    final INaviEdge edge : edges) {      preparedStatement.setInt(1,edge.getSource().getId());      preparedStatement.setInt(2,edge.getTarget().getId());      preparedStatement.setDouble(3,edge.getX1());      preparedStatement.setDouble(4,edge.getY1());      preparedStatement.setDouble(5,edge.getX2());      preparedStatement.setDouble(6,edge.getY2());      preparedStatement.setObject(7,edge.getType().toString().toLowerCase(),Types.OTHER);      preparedStatement.setInt(8,edge.getColor().getRGB());      preparedStatement.setBoolean(9,edge.isVisible());      preparedStatement.setBoolean(10,edge.isSelected());      if (edge.getLocalComment() == null) {        preparedStatement.setNull(11,Types.INTEGER);      } else {        preparedStatement.setInt(11,Iterables.getLast(edge.getLocalComment()).getId());      }      preparedStatement.addBatch();    }    preparedStatement.executeBatch();    final ResultSet resultSet=preparedStatement.getGeneratedKeys();    for (    final INaviEdge edge : edges) {      if (resultSet.next()) {        edge.setId(resultSet.getInt(1));      } else {        throw new IllegalStateException("Error: The number of keys generated does not match the number of edges");      }    }  } catch (  final SQLException exception) {    CUtilityFunctions.logException(exception);    CUtilityFunctions.logException(exception.getNextException());  } finally {    preparedStatement.close();  }}  }
class C{  public void startSubSystem(String name) throws IOException {  if (name == null)   throw new IllegalArgumentException("name argument may not be null");synchronized (this) {    if (flag_closed)     throw new IOException("This session is closed.");    if (flag_execution_started)     throw new IOException("A remote execution has already started.");    flag_execution_started=true;  }  cm.requestSubSystem(cn,name);}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public void reduce(FloatWritable key,Iterator<Text> values,OutputCollector<Text,FloatWritable> output,Reporter reporter) throws IOException {  float val=key.get();  FloatWritable number=new FloatWritable(val == 0 ? 0 : -val);  long numCollected=0;  while (values.hasNext() && (numCollected < topn)) {    Text url=WritableUtils.clone(values.next(),conf);    output.collect(url,number);    numCollected++;  }}  }
class C{  public void addCheckcast(CtClass c){  addOpcode(CHECKCAST);  addIndex(constPool.addClassInfo(c));}  }
class C{  public void testMapWithoutMrbean() throws Exception {  ObjectMapper mapper=new ObjectMapper();  runTest(mapper);}  }
class C{  private void loadPaymentRuleInfo(){  ValueNamePair pp=(ValueNamePair)fPaymentRule.getSelectedItem();  if (pp == null)   return;  String PaymentRule=pp.getValue();  log.info("PaymentRule=" + PaymentRule);  fNoPayments.setText(" ");  int C_PaySelection_ID=((KeyNamePair)fPaySelect.getSelectedItem()).getKey();  String msg=loadPaymentRuleInfo(C_PaySelection_ID,PaymentRule);  if (noPayments != null)   fNoPayments.setText(noPayments);  bProcess.setEnabled(PaymentRule.equals("T"));  if (documentNo != null)   fDocumentNo.setValue(documentNo);  if (msg != null && msg.length() > 0)   ADialog.error(m_WindowNo,panel,msg);}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void performOperation(String response){  List<org.wso2.emm.agent.beans.Operation> operations=new ArrayList<>();  try {    if (response != null) {      operations=mapper.readValue(response,mapper.getTypeFactory().constructCollectionType(List.class,org.wso2.emm.agent.beans.Operation.class));    }    operationProcessor.checkPreviousNotifications();  } catch (  JsonProcessingException e) {    Log.e(TAG,"Issue in json parsing",e);  }catch (  IOException e) {    Log.e(TAG,"Issue in stream parsing",e);  }catch (  AndroidAgentException e) {    Log.e(TAG,"Error occurred while checking previous notification",e);  }  for (  org.wso2.emm.agent.beans.Operation op : operations) {    try {      operationProcessor.doTask(op);    } catch (    AndroidAgentException e) {      Log.e(TAG,"Failed to perform operation",e);    }  }  replyPayload=operationProcessor.getResultPayload();}  }
class C{  private final double preDistance(NumberVector v1,NumberVector v2,final int start,final int end){  double agg=0.;  for (int d=start; d < end; d++) {    final double xd=v1.doubleValue(d), yd=v2.doubleValue(d);    final double delta=(xd >= yd) ? xd - yd : yd - xd;    agg+=Math.pow(delta,p);  }  return agg;}  }
class C{  public static int hash(long item){  return (int)(item ^ (item >>> 32));}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  public XRRuntimeException(String msg,Throwable cause){  super(msg,cause);  log(msg,cause);}  }
class C{  public void dcbzl(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  boolean verifyHostExports(Set<String> initiatorNetworkIds,Set<String> storagePortNativeIds,HostExportInfo hostExportInfo){  if (initiatorNetworkIds == null || storagePortNativeIds == null) {    return false;  }  boolean isValid=true;  Set<String> initiatorNetworkIdsSet=new HashSet<>();  Set<String> targetNativeIdsSet=new HashSet<>();  List<Initiator> initiatorsList=hostExportInfo.getInitiators();  List<StoragePort> targetsList=hostExportInfo.getTargets();  for (  Initiator initiator : initiatorsList) {    initiatorNetworkIdsSet.add(initiator.getPort());  }  for (  StoragePort port : targetsList) {    targetNativeIdsSet.add(port.getNativeId());  }  if (!initiatorNetworkIds.equals(initiatorNetworkIdsSet) || !storagePortNativeIds.equals(targetNativeIdsSet)) {    isValid=false;  }  return isValid;}  }
class C{  public Excerpt javadocLink(){  return Excerpts.add("{@link %s}",getQualifiedName());}  }
class C{  public QueuedJobCount(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  void addSdf(SdfBuffer buff){  List<SdfMacro> ops=buff.getMacroList();  for (int i=0; i < ops.size(); i++) {    nestNodes(topNode,ops.get(i));  }  tree.expandPath(new TreePath(topNode));  tree.setRootVisible(false);}  }
class C{  @Override public CloseableReference<Bitmap> createBitmap(int width,int height,Bitmap.Config bitmapConfig){  int sizeInBytes=BitmapUtil.getSizeInByteForBitmap(width,height,bitmapConfig);  Bitmap bitmap=mBitmapPool.get(sizeInBytes);  Bitmaps.reconfigureBitmap(bitmap,width,height,bitmapConfig);  return CloseableReference.of(bitmap,mBitmapPool);}  }
class C{  public THLParallelQueueApplier(){}  }
class C{  private int addTonalComponents(float[] spectrum,int numComponents,TonalComponent[] components){  int lastPos=-1;  for (int i=0; i < numComponents; i++) {    lastPos=Math.max(components[i].pos + components[i].numCoefs,lastPos);    for (int j=0; j < components[i].numCoefs; j++) {      spectrum[components[i].pos + j]+=components[i].coef[j];    }  }  return lastPos;}  }
class C{  static MPrintPaper create(String name,boolean landscape){  MPrintPaper pp=new MPrintPaper(Env.getCtx(),0,null);  pp.setName(name);  pp.setIsLandscape(landscape);  pp.saveEx();  return pp;}  }
class C{  static boolean isSignatureAssignable(Class[] from,Class[] to,int round){  if (round != JAVA_VARARGS_ASSIGNABLE && from.length != to.length)   return false;switch (round) {case JAVA_BASE_ASSIGNABLE:    for (int i=0; i < from.length; i++)     if (!isJavaBaseAssignable(to[i],from[i]))     return false;  return true;case JAVA_BOX_TYPES_ASSIGABLE:for (int i=0; i < from.length; i++) if (!isJavaBoxTypesAssignable(to[i],from[i])) return false;return true;case JAVA_VARARGS_ASSIGNABLE:return isSignatureVarargsAssignable(from,to);case BSH_ASSIGNABLE:for (int i=0; i < from.length; i++) if (!isBshAssignable(to[i],from[i])) return false;return true;default :throw new InterpreterError("bad case");}}  }
class C{  @Override public void write(GlowChunk chunk) throws IOException {  int x=chunk.getX(), z=chunk.getZ();  RegionFile region=cache.getRegionFile(x,z);  int regionX=x & REGION_SIZE - 1;  int regionZ=z & REGION_SIZE - 1;  CompoundTag levelTags=new CompoundTag();  levelTags.putInt("xPos",chunk.getX());  levelTags.putInt("zPos",chunk.getZ());  levelTags.putBool("TerrainPopulated",chunk.isPopulated());  levelTags.putLong("LastUpdate",0);  List<CompoundTag> sectionTags=new ArrayList<>();  GlowChunkSnapshot snapshot=chunk.getChunkSnapshot(true,true,false);  ChunkSection[] sections=snapshot.getRawSections();  for (byte i=0; i < sections.length; ++i) {    ChunkSection sec=sections[i];    if (sec == null)     continue;    CompoundTag sectionTag=new CompoundTag();    sectionTag.putByte("Y",i);    byte[] rawTypes=new byte[sec.types.length];    NibbleArray extTypes=null;    NibbleArray data=new NibbleArray(sec.types.length);    for (int j=0; j < sec.types.length; j++) {      rawTypes[j]=(byte)(sec.types[j] >> 4 & 0xFF);      byte extType=(byte)(sec.types[j] >> 12);      if (extType > 0) {        if (extTypes == null) {          extTypes=new NibbleArray(sec.types.length);        }        extTypes.set(j,extType);      }      data.set(j,(byte)(sec.types[j] & 0xF));    }    sectionTag.putByteArray("Blocks",rawTypes);    if (extTypes != null) {      sectionTag.putByteArray("Add",extTypes.getRawData());    }    sectionTag.putByteArray("Data",data.getRawData());    sectionTag.putByteArray("BlockLight",sec.blockLight.getRawData());    sectionTag.putByteArray("SkyLight",sec.skyLight.getRawData());    sectionTags.add(sectionTag);  }  levelTags.putCompoundList("Sections",sectionTags);  levelTags.putIntArray("HeightMap",snapshot.getRawHeightmap());  levelTags.putByteArray("Biomes",snapshot.getRawBiomes());  List<CompoundTag> entities=new ArrayList<>();  for (  GlowEntity entity : chunk.getRawEntities()) {    if (!entity.shouldSave()) {      continue;    }    try {      CompoundTag tag=new CompoundTag();      EntityStorage.save(entity,tag);      entities.add(tag);    } catch (    Exception e) {      GlowServer.logger.log(Level.WARNING,"Error saving " + entity + " in "+ chunk,e);    }  }  levelTags.putCompoundList("Entities",entities);  List<CompoundTag> tileEntities=new ArrayList<>();  for (  TileEntity entity : chunk.getRawTileEntities()) {    try {      CompoundTag tag=new CompoundTag();      entity.saveNbt(tag);      tileEntities.add(tag);    } catch (    Exception ex) {      GlowServer.logger.log(Level.SEVERE,"Error saving tile entity at " + entity.getBlock(),ex);    }  }  levelTags.putCompoundList("TileEntities",tileEntities);  List<CompoundTag> tileTicks=new ArrayList<>();  for (  Location location : chunk.getWorld().getTickMap()) {    if (location.getChunk().getX() == chunk.getX() && location.getChunk().getZ() == chunk.getZ()) {      int tileX=location.getBlockX();      int tileY=location.getBlockY();      int tileZ=location.getBlockZ();      String type=location.getBlock().getType().name().toLowerCase();      if (type.startsWith("stationary_")) {        type=type.replace("stationary_","");      } else       if (type.equals("water") || type.equals("lava")) {        type="flowing_" + type;      }      CompoundTag tag=new CompoundTag();      tag.putInt("x",tileX);      tag.putInt("y",tileY);      tag.putInt("z",tileZ);      tag.putString("i","minecraft:" + type);      tileTicks.add(tag);    }  }  levelTags.putCompoundList("TileTicks",tileTicks);  CompoundTag levelOut=new CompoundTag();  levelOut.putCompound("Level",levelTags);  try (NBTOutputStream nbt=new NBTOutputStream(region.getChunkDataOutputStream(regionX,regionZ),false)){    nbt.writeTag(levelOut);  } }  }
class C{  public final double doOperation(){  int index=MathUtils.nextInt(clusteringParameter.getDimension());  int[] occupancy=new int[N];  int X=K;  for (int i=0; i < clusteringParameter.getDimension(); i++) {    int j=(int)clusteringParameter.getParameterValue(i);    if (i != index) {      occupancy[j]+=1;      if (occupancy[j] == 1) {        X-=1;      }    }  }  double chi=chiParameter.getParameterValue(0);  double p1=chi / ((N - 1 + chi) * X);  double[] P=new double[K];  for (int i=0; i < K; i++) {    double p;    if (occupancy[i] == 0) {      p=p1;    } else {      p=occupancy[i] / (N - 1 + chi);    }    P[i]=Math.log(p);  }  if (modelLikelihood != null) {    for (int k=0; k < K; ++k) {      clusteringParameter.setParameterValue(index,k);      P[k]+=modelLikelihood.getLogLikelihood();      ;    }  }  this.rescale(P);  this.exp(P);  int k=MathUtils.randomChoicePDF(P);  ((Parameter)clusteringParameter).setParameterValue(index,k);  return 0.0;}  }
class C{  void insertOp(int pos,int length,int op){  int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  for (int i=totalLen - 1; i >= pos; i--) {    m_ops.setOp(i + length,m_ops.getOp(i));  }  m_ops.setOp(pos,op);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length);}  }
class C{  @SuppressWarnings("unused") private Intent packDefaults(){  Intent intent=new Intent();  intent.putExtras(resultData);  intent.putExtra(ActivityConstants.username,ActivityConstants.empty);  intent.putExtra(ActivityConstants.password,ActivityConstants.empty);  intent.putExtra(ActivityConstants.timeout,ActivityConstants.defaultTimeOut);  intent.putExtra(ActivityConstants.keepalive,ActivityConstants.defaultKeepAlive);  intent.putExtra(ActivityConstants.ssl,ActivityConstants.defaultSsl);  return intent;}  }
class C{  public AccountHeaderBuilder withHeaderBackground(@DrawableRes int headerBackgroundRes){  this.mHeaderBackground=new ImageHolder(headerBackgroundRes);  return this;}  }
class C{  protected void applyValues(){  this.setValues();}  }
class C{  protected boolean findNextValidParent(){  if (parent == root) {    parent=null;    return false;  }  while (parent != null) {    TreeStateNode newParent=(TreeStateNode)parent.getParent();    if (newParent != null) {      nextIndex=newParent.getIndex(parent);      parent=newParent;      childCount=parent.getChildCount();      if (updateNextIndex())       return true;    } else     parent=null;  }  return false;}  }
class C{  public XdrInputStream(InputStream in){  this.in=new BufferedInputStream(in,DEFAULT_BUFFER_SIZE);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.atan(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private AlarmEvent deactivation(AlarmPoint alarm){  AlarmStatus status=alarm.currentStatus();  if (status.name(null).equals(AlarmPoint.STATUS_ACKNOWLEDGED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_NORMAL);    return createEvent(alarm.identity().get(),status,newStatus,AlarmPoint.EVENT_DEACTIVATION);  } else   if (status.name(null).equals(AlarmPoint.STATUS_ACTIVATED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_DEACTIVATED);    return createEvent(alarm.identity().get(),status,newStatus,AlarmPoint.EVENT_DEACTIVATION);  }  return null;}  }
class C{  public static long[] xorI(long[] v,long[] o){  assert (o.length <= v.length) : "Bit set sizes do not agree.";  for (int i=0; i < o.length; i++) {    v[i]^=o[i];  }  return v;}  }
class C{  public void testSetsDefaultJavaHome() throws Exception {  configuration.setProperty(GeneralPropertySet.JAVA_HOME,null);  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  JvmLauncherStub java=new JvmLauncherStub();  container.setJvmToLaunchContainerIn(java);  String binDir=container.getFileHandler().append(System.getProperty("java.home"),"bin");  String expected=container.getFileHandler().append(binDir,"java").replaceAll("\\\\","/").toLowerCase();  String vmCmd=java.getJvm().replaceAll("\\\\","/").toLowerCase();  vmCmd=vmCmd.replaceAll("\"","");  assertTrue(vmCmd.startsWith(expected));}  }
class C{  public DdlException(String msg){  super(msg);}  }
class C{  protected boolean writeEnvironmentReport(Hashtable h){  if (null == h) {    logMsg("# ERROR: writeEnvironmentReport called with null Hashtable");    return false;  }  boolean errors=false;  logMsg("#---- BEGIN writeEnvironmentReport($Revision: 468646 $): Useful stuff found: ----");  for (Enumeration keys=h.keys(); keys.hasMoreElements(); ) {    Object key=keys.nextElement();    String keyStr=(String)key;    try {      if (keyStr.startsWith(FOUNDCLASSES)) {        Vector v=(Vector)h.get(keyStr);        errors|=logFoundJars(v,keyStr);      } else {        if (keyStr.startsWith(ERROR)) {          errors=true;        }        logMsg(keyStr + "=" + h.get(keyStr));      }    } catch (    Exception e) {      logMsg("Reading-" + key + "= threw: "+ e.toString());    }  }  logMsg("#----- END writeEnvironmentReport: Useful properties found: -----");  return errors;}  }
class C{  private void drawFillCircle(Canvas canvas){  if (canvas != null && pointX >= 0 && pointY >= 0) {    int rbX=canvas.getWidth();    int rbY=canvas.getHeight();    float x_max=Math.max(pointX,Math.abs(rbX - pointX));    float y_max=Math.max(pointY,Math.abs(rbY - pointY));    float longDis=(float)Math.sqrt(x_max * x_max + y_max * y_max);    if (mRippleRadius > longDis) {      onCompleteDrawRipple();      return;    }    final float drawSpeed=longDis / mRippleDuration * 35;    mRippleRadius+=drawSpeed;    canvas.save();    mPath.reset();    canvas.clipPath(mPath);    if (mShapeType == 0) {      mPath.addCircle(rbX / 2,rbY / 2,mWidth / 2,Path.Direction.CCW);    } else {      mRectF.set(0,0,mWidth,mHeight);      mPath.addRoundRect(mRectF,mRoundRadius,mRoundRadius,Path.Direction.CCW);    }    canvas.clipPath(mPath,Region.Op.REPLACE);    canvas.drawCircle(pointX,pointY,mRippleRadius,mRipplePaint);    canvas.restore();  }}  }
class C{  public ImmutableSet<BaseType> determineDependentTypes(final BaseType baseType){  Preconditions.checkNotNull(baseType,"Error: Base type can not be null.");  final Node typeNode=containedRelationMap.get(baseType);  final TypeSearch search=new TypeSearch(containedRelationMap.inverse());  search.start(containedRelation,typeNode);  return search.getDependentTypes();}  }
class C{  @Override public boolean activityResuming(String pkg) throws RemoteException {  Log.i(TAG,String.format("Resuming activity in package %s",pkg));  return true;}  }
class C{  private void defineSpinners(UIDefaults d){  d.put("spinnerNextBorderBottomEnabled",new Color(0x4779bf));  d.put("spinnerNextBorderBottomPressed",new Color(0x4879bf));  d.put("spinnerNextInteriorBottomEnabled",new Color(0x85abcf));  d.put("spinnerNextInteriorBottomPressed",new Color(0x6e92b6));  d.put("spinnerPrevBorderTopEnabled",new Color(0x4778bf));  d.put("spinnerPrevInteriorTopEnabled",new Color(0x81aed4));  d.put("spinnerPrevInteriorBottomEnabled",new Color(0xaad4f1));  d.put("spinnerPrevInteriorPressedTop",new Color(0x6c91b8));  d.put("spinnerPrevInteriorPressedBottom",new Color(0x9cc3de));  d.put("spinnerPrevTopLineEnabled",new Color(0xacc8e0));  d.put("spinnerPrevTopLinePressed",new Color(0x9eb6cf));  d.put("Spinner.contentMargins",new InsetsUIResource(4,6,4,6));  d.put("Spinner:\"Spinner.editor\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("Spinner:\"Spinner.textField\".contentMargins",new InsetsUIResource(4,6,4,0));  d.put("Spinner:\"Spinner.formattedTextField\".contentMargins",new InsetsUIResource(4,6,4,2));  String c=PAINTER_PREFIX + "SpinnerFormattedTextFieldPainter";  String p="Spinner:Panel:\"Spinner.formattedTextField\"";  d.put(p + ".contentMargins",new InsetsUIResource(3,10,3,2));  d.put(p + ".background",Color.WHITE);  d.put(p + "[Selected].textForeground",Color.WHITE);  d.put(p + "[Selected].textBackground",d.get("seaGlassSelection"));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,SpinnerFormattedTextFieldPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,SpinnerFormattedTextFieldPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,SpinnerFormattedTextFieldPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,SpinnerFormattedTextFieldPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Focused+Selected].backgroundPainter",new LazyPainter(c,SpinnerFormattedTextFieldPainter.Which.BACKGROUND_SELECTED_FOCUSED));  c=PAINTER_PREFIX + "SpinnerPreviousButtonPainter";  p="Spinner:\"Spinner.previousButton\"";  d.put(p + ".size",new Integer(22));  d.put(p + ".States","Disabled,Enabled,Focused,Pressed");  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Focused+Pressed].backgroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.BACKGROUND_PRESSED_FOCUSED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.FOREGROUND_DISABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Focused].foregroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.FOREGROUND_FOCUSED));  d.put(p + "[Focused+Pressed].foregroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.FOREGROUND_PRESSED_FOCUSED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(c,SpinnerPreviousButtonPainter.Which.FOREGROUND_PRESSED));  c=PAINTER_PREFIX + "SpinnerNextButtonPainter";  p="Spinner:\"Spinner.nextButton\"";  d.put(p + ".size",new Integer(22));  d.put(p + ".States","Disabled,Enabled,Focused,Pressed");  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Focused].backgroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.BACKGROUND_FOCUSED));  d.put(p + "[Focused+Pressed].backgroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.BACKGROUND_PRESSED_FOCUSED));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.FOREGROUND_DISABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.FOREGROUND_ENABLED));  d.put(p + "[Focused].foregroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.FOREGROUND_FOCUSED));  d.put(p + "[Focused+Pressed].foregroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.FOREGROUND_PRESSED_FOCUSED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(c,SpinnerNextButtonPainter.Which.FOREGROUND_PRESSED));}  }
class C{  public AssertionFailedException(String detail){  super(detail);}  }
class C{  private static double m(double i){  if (i == 1)   return 1; else   return 1 / i + m(i - 1);}  }
class C{  public boolean registerThermalListener(ThermalListenerCallback thermalCallback){  try {    if (checkService()) {      return sService.registerThermalListener(thermalCallback);    }  } catch (  RemoteException e) {  }  return false;}  }
class C{  private void insertEntryAfter(Entry entry,Entry previousSibling,boolean createParentRelationship){  final String previousSiblingParentId=previousSibling.getParentId();  final Entry previousSiblingParent=getEntryById(previousSiblingParentId);  if (createParentRelationship) {    entry.setParentId(previousSiblingParentId);  }  entry.setPreviousSiblingId(previousSibling.getId());  entry.setNextSiblingId(previousSibling.getNextSiblingId());  if (previousSibling.getNextSiblingId() != null) {    final Entry previousSiblingsNext=getEntryById(previousSibling.getNextSiblingId());    previousSiblingsNext.setPreviousSiblingId(entry.getId());  } else {    previousSiblingParent.setLastChildId(entry.getId());  }  previousSibling.setNextSiblingId(entry.getId());}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_inCData=true;  append(m_doc.createCDATASection(""));}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);  if (cause != null) {    cause.printStackTrace(s);  }}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  @Override public void onTaskStartup(TaskExecution taskExecution){  executeTaskListener(taskExecution,beforeTaskInstances.keySet(),beforeTaskInstances);}  }
class C{  public Matrix4f(Matrix3f m1,Vector3f t1,float s){  this.m00=m1.m00 * s;  this.m01=m1.m01 * s;  this.m02=m1.m02 * s;  this.m03=t1.x;  this.m10=m1.m10 * s;  this.m11=m1.m11 * s;  this.m12=m1.m12 * s;  this.m13=t1.y;  this.m20=m1.m20 * s;  this.m21=m1.m21 * s;  this.m22=m1.m22 * s;  this.m23=t1.z;  this.m30=0.0f;  this.m31=0.0f;  this.m32=0.0f;  this.m33=1.0f;}  }
class C{  public void write(byte[] bytes) throws IOException {  dataOutput.write(bytes);  offset+=bytes.length;}  }
class C{  public void logError(String message,Throwable cause){  getLog().log(new Status(IStatus.ERROR,pluginId,message,cause));}  }
class C{  public void addNotificationIds(Notification notification){  this.getNotificationIds().add(notification.getId());}  }
class C{  public static boolean checkRequest(long n,Subscriber<?> subscriber){  if (n <= 0L) {    if (null != subscriber) {      subscriber.onError(Exceptions.nullOrNegativeRequestException(n));    } else {      throw Exceptions.nullOrNegativeRequestException(n);    }    return false;  }  return true;}  }
class C{  @Override public boolean click(String obj) throws UiObjectNotFoundException {  return getUiObject(obj).click();}  }
class C{  public void addConditioningVariable(String variable,int value){  Node node=dataSet.getVariable(variable);  if (node == target)   throw new IllegalArgumentException("Conditioning node may not be the target.");  if (!(node instanceof DiscreteVariable))   throw new IllegalArgumentException("Variable must be discrete.");  discreteValues.put(node,value);}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public void actionPerformed(ActionEvent e){  Box b=Box.createVerticalBox();  Graph graph=workbench.getGraph();  JTextArea textArea=new JTextArea();  JScrollPane scroll=new JScrollPane(textArea);  scroll.setPreferredSize(new Dimension(600,600));  textArea.append("Treks:");  if (allTreks(graph,textArea))   return;  Box b2=Box.createHorizontalBox();  b2.add(scroll);  textArea.setCaretPosition(0);  b.add(b2);  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  panel.add(b);  EditorWindow window=new EditorWindow(panel,"Treks","Close",false,workbench);  DesktopController.getInstance().addEditorWindow(window,JLayeredPane.PALETTE_LAYER);  window.setVisible(true);  JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),b,"Treks",JOptionPane.PLAIN_MESSAGE);}  }
class C{  @Override public Object prepend(Object o) throws ExpressionException {  insert(1,o);  return o;}  }
class C{  private int addAttributes(){  PreparedStatement pstmt=null;  ResultSet rs=null;  String whereAttributeSet;  if (p_M_AttributeSet_ID > 0)   whereAttributeSet="AND M_Attribute_ID IN (SELECT M_Attribute_ID FROM M_AttributeUse WHERE M_AttributeSet_ID=" + p_M_AttributeSet_ID + ")"; else   whereAttributeSet="";  String sql=MRole.getDefault().addAccessSQL("SELECT M_Attribute_ID, Name, Description, AttributeValueType, IsInstanceAttribute " + "FROM M_Attribute " + "WHERE IsActive='Y' " + whereAttributeSet + " ORDER BY IsInstanceAttribute, Name","M_Attribute",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  boolean instanceLine=false;  boolean productLine=false;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      int attribute_ID=rs.getInt(1);      String name=rs.getString(2);      String description=rs.getString(3);      String attributeValueType=rs.getString(4);      boolean isInstanceAttribute="Y".equals(rs.getString(5));      if (!productLine && !isInstanceAttribute) {        Row row=new Row();        rows.appendChild(row);        row.setSpans("2");        Label group=new Label(Msg.translate(Env.getCtx(),"IsProductAttribute"));        row.appendChild(group);        rows.appendChild(row);        row=new Row();        rows.appendChild(row);        row.setSpans("2");        Separator separator=new Separator();        separator.setBar(true);        row.appendChild(separator);        rows.appendChild(row);        productLine=true;      }      if (!instanceLine && isInstanceAttribute) {        Row row=new Row();        rows.appendChild(row);        row.setSpans("2");        Label group=new Label(Msg.translate(Env.getCtx(),"IsInstanceAttribute"));        row.appendChild(group);        rows.appendChild(row);        row=new Row();        rows.appendChild(row);        row.setSpans("2");        Separator separator=new Separator();        separator.setBar(true);        row.appendChild(separator);        rows.appendChild(row);        instanceLine=true;      }      Row row=new Row();      rows.appendChild(row);      Label label=new Label(name);      if (description != null && description.length() > 0)       label.setTooltiptext(description);      Div div=new Div();      div.setAlign("right");      div.appendChild(label);      row.appendChild(div);      Component field=null;      if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(attributeValueType)) {        field=new Listbox();        ((Listbox)field).setRows(0);        ((Listbox)field).setMultiple(false);        ((Listbox)field).setMold("select");        ((Listbox)field).setWidth("150px");        KeyNamePair[] knp=getAttributeList(attribute_ID);        for (int i=0; i < knp.length; i++)         ((Listbox)field).appendItem(knp[i].getName(),knp[i]);      } else       if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attributeValueType)) {        field=new WNumberEditor(name,false,false,true,DisplayType.Number,name).getComponent();        ((NumberBox)field).setWidth("150px");      } else {        field=new WStringEditor(name,false,false,true,10,40,null,null).getComponent();        ((Textbox)field).setWidth("150px");      }      row.appendChild(field);      field.setId(String.valueOf(attribute_ID));      field.setAttribute("zk_component_ID","InfoPAttributePanel_field_" + name);      if (isInstanceAttribute)       m_instanceEditors.add(field); else       m_productEditors.add(field);      Component fieldTo=null;      if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attributeValueType)) {        fieldTo=new WNumberEditor(name,false,false,true,DisplayType.Number,name).getComponent();        ((NumberBox)fieldTo).setWidth("150px");        row=new Row();        rows.appendChild(row);        div=new Div();        div.setAlign("right");        div.appendChild(new Label("-"));        row.appendChild(div);        row.appendChild(fieldTo);      }      if (fieldTo != null)       fieldTo.setAttribute("zk_component_ID","InfoPAttributePanel_fieldTo_" + name);      if (isInstanceAttribute)       m_instanceEditorsTo.add(fieldTo); else       m_productEditorsTo.add(fieldTo);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (!instanceLine) {    boolean isGuarantee=true;    boolean isSerial=true;    boolean isLot=true;    if (p_M_AttributeSet_ID > 0) {      MAttributeSet as=new MAttributeSet(Env.getCtx(),p_M_AttributeSet_ID,null);      isGuarantee=as.isGuaranteeDate();      isSerial=as.isSerNo();      isLot=as.isLot();    }    if (isGuarantee || isSerial || isLot) {      Row row=new Row();      rows.appendChild(row);      row.setSpans("2");      Label group=new Label(Msg.translate(Env.getCtx(),"IsInstanceAttribute"));      row.appendChild(group);      rows.appendChild(row);      row=new Row();      rows.appendChild(row);      row.setSpans("2");      Separator separator=new Separator();      separator.setBar(true);      row.appendChild(separator);      rows.appendChild(row);      instanceLine=true;    }  }  return 0;}  }
class C{  public static Category create(DataService mgr,String id,Marketplace marketplace) throws NonUniqueBusinessKeyException {  Category category=new Category();  category.setCategoryId(id);  category.setMarketplace(marketplace);  mgr.persist(category);  return category;}  }
class C{  static void handleTableCreation(String tableDescription,ListenableFuture<DestinationTable> tableFuture) throws TableCreationException {  System.err.printf("Creating %s...\n",tableDescription);  try {    DestinationTable table=tableFuture.get();    System.err.printf(" - Success: created %s.\n",table.getStringReference());  } catch (  Exception e) {    Throwable error=e;    if (e instanceof ExecutionException) {      error=e.getCause();    }    String errorMessage=String.format("Failed to create %s: %s",tableDescription,error.getMessage());    System.err.printf(" - %s\n",errorMessage);    throw new TableCreationException(errorMessage,error);  }}  }
class C{  public static boolean isControlStatementBody(StructuralPropertyDescriptor locationInParent){  return locationInParent == IfStatement.THEN_STATEMENT_PROPERTY || locationInParent == IfStatement.ELSE_STATEMENT_PROPERTY || locationInParent == ForStatement.BODY_PROPERTY || locationInParent == EnhancedForStatement.BODY_PROPERTY || locationInParent == WhileStatement.BODY_PROPERTY || locationInParent == DoStatement.BODY_PROPERTY;}  }
class C{  protected String toQueryStr(final URI type){  final StringBuilder sb=new StringBuilder();  if (type == VERTEX) {    sb.append("construct { ?x <" + TYPE + "> <"+ type+ "> . }\n");    sb.append("{\n  select distinct ?x where {\n");  } else {    sb.append("construct { ?from ?x ?to . }\n");    sb.append("{\n  select distinct ?from ?x ?to where {\n");    sb.append("    ?from ?x ?to .\n");  }  final BlueprintsValueFactory factory=graph.factory;  boolean hasHas=false;  int i=1;  for (  Has has : criteria) {    if (log.isTraceEnabled()) {      log.trace(has);    }    if (has instanceof HasNot) {      sb.append("    filter not exists { ");      sb.append("?x <").append(factory.toPropertyURI(has.key)).append("> ");      if (has.val != null) {        final String val=factory.toLiteral(has.val).toString();        sb.append(val).append(" .");      } else {        final String var="?val" + i;        sb.append(var).append(" .");      }      sb.append("}\n");    } else {      hasHas=true;      sb.append("    ?x <").append(factory.toPropertyURI(has.key)).append("> ");      if (has.val != null && (has.pred == null || has.pred == BigdataPredicate.EQ)) {        final Literal val=factory.toLiteral(has.val);        sb.append(val).append(" .\n");      } else {        final String var="?val" + i;        sb.append(var).append(" .\n");        if (has.pred != null) {          sb.append(toFilterStr(has.pred,var,has.val)).append("\n");        }      }    }    i++;  }  if (!hasHas) {    sb.append("    ?x <" + TYPE + "> <").append(type).append("> .\n");  }  sb.append("  }");  if (limit < Integer.MAX_VALUE) {    sb.append(" limit " + factory.toLiteral(limit).getLabel());  }  sb.append("\n}");  if (log.isTraceEnabled()) {    log.trace("\n" + sb.toString());  }  return sb.toString();}  }
class C{  static public javax.swing.ComboBoxModel<String> jComboBoxModelFromList(List<DecoderFile> l){  javax.swing.DefaultComboBoxModel<String> b=new javax.swing.DefaultComboBoxModel<String>();  for (int i=0; i < l.size(); i++) {    DecoderFile r=l.get(i);    b.addElement(r.titleString());  }  return b;}  }
class C{  public boolean onException(Object obj,Throwable e){  return false;}  }
class C{  private SegmentState[] openSegmentStates(IndexWriter.ReaderPool pool,List<SegmentCommitInfo> infos) throws IOException {  int numReaders=infos.size();  SegmentState[] segStates=new SegmentState[numReaders];  boolean success=false;  try {    for (int i=0; i < numReaders; i++) {      segStates[i]=new SegmentState(pool,infos.get(i));    }    success=true;  }  finally {    if (success == false) {      for (int j=0; j < numReaders; j++) {        if (segStates[j] != null) {          try {            segStates[j].finish(pool);          } catch (          Throwable th) {          }        }      }    }  }  return segStates;}  }
class C{  public void delete(int id){  dao.delete(id);}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MDocType dt=MDocType.get(getCtx(),getC_DocTypeTarget_ID());  if (!MPeriod.isOpen(getCtx(),getDateAcct(),dt.getDocBaseType(),getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  MOrderLine[] lines=getLines(true,MOrderLine.COLUMNNAME_M_Product_ID);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  if (getDeliveryRule() != null && getDeliveryRule().equals(MOrder.DELIVERYRULE_CompleteOrder)) {    for (int i=0; i < lines.length; i++) {      MOrderLine line=lines[i];      MProduct product=line.getProduct();      if (product != null && product.isExcludeAutoDelivery()) {        m_processMsg="@M_Product_ID@ " + product.getValue() + " @IsExcludeAutoDelivery@";        return DocAction.STATUS_Invalid;      }    }  }  if (getC_DocType_ID() != getC_DocTypeTarget_ID()) {    if (getC_DocType_ID() != 0) {      MDocType dtOld=MDocType.get(getCtx(),getC_DocType_ID());      if (MDocType.DOCSUBTYPESO_StandardOrder.equals(dtOld.getDocSubTypeSO()) && !MDocType.DOCSUBTYPESO_StandardOrder.equals(dt.getDocSubTypeSO())) {        for (int i=0; i < lines.length; i++) {          if (lines[i].getM_Warehouse_ID() != getM_Warehouse_ID()) {            log.warning("different Warehouse " + lines[i]);            m_processMsg="@CannotChangeDocType@";            return DocAction.STATUS_Invalid;          }        }      }    }    if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_InProgress.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus())|| getC_DocType_ID() == 0) {      setC_DocType_ID(getC_DocTypeTarget_ID());    } else {      if (dt.isOffer())       setC_DocType_ID(getC_DocTypeTarget_ID()); else {        m_processMsg="@CannotChangeDocType@";        return DocAction.STATUS_Invalid;      }    }  }  isASIMandatory();  if (explodeBOM())   lines=getLines(true,MOrderLine.COLUMNNAME_M_Product_ID);  if (!reserveStock(dt,lines)) {    m_processMsg="Cannot reserve Stock";    return DocAction.STATUS_Invalid;  }  if (!calculateTaxTotal()) {    m_processMsg="Error calculating tax";    return DocAction.STATUS_Invalid;  }  if (isSOTrx()) {    if (MDocType.DOCSUBTYPESO_POSOrder.equals(dt.getDocSubTypeSO()) && PAYMENTRULE_Cash.equals(getPaymentRule()) && !MSysConfig.getBooleanValue("CHECK_CREDIT_ON_CASH_POS_ORDER",true,getAD_Client_ID(),getAD_Org_ID())) {    } else     if (MDocType.DOCSUBTYPESO_PrepayOrder.equals(dt.getDocSubTypeSO()) && !MSysConfig.getBooleanValue("CHECK_CREDIT_ON_PREPAY_ORDER",true,getAD_Client_ID(),getAD_Org_ID())) {    } else {      MBPartner bp=new MBPartner(getCtx(),getBill_BPartner_ID(),get_TrxName());      if (MBPartner.SOCREDITSTATUS_CreditStop.equals(bp.getSOCreditStatus())) {        m_processMsg="@BPartnerCreditStop@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();        return DocAction.STATUS_Invalid;      }      if (MBPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus())) {        m_processMsg="@BPartnerCreditHold@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();        return DocAction.STATUS_Invalid;      }      BigDecimal grandTotal=MConversionRate.convertBase(getCtx(),getGrandTotal(),getC_Currency_ID(),getDateOrdered(),getC_ConversionType_ID(),getAD_Client_ID(),getAD_Org_ID());      if (MBPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus(grandTotal))) {        m_processMsg="@BPartnerOverOCreditHold@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @GrandTotal@="+ grandTotal+ ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();        return DocAction.STATUS_Invalid;      }    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  return DocAction.STATUS_InProgress;}  }
class C{  public static void registerUserErrorMessagesBundle(ResourceBundle bundle,boolean overwrite){  if (!overwrite) {    USER_ERROR_BUNDLE.addResourceBundle(bundle);  } else {    USER_ERROR_BUNDLE.addResourceBundleAndOverwrite(bundle);  }}  }
class C{  public String toStringRfc822(){  assert !dateOnly;synchronized (dateTimeFormat822) {    return dateTimeFormat822.format(value);  }}  }
class C{  private void commandActionMessage(String channel,String message){  if (message != null) {    sendActionMessage(channel,message);  } else {    g.printLine("Usage: /me <message>");  }}  }
class C{  public void insert(final byte[] pk,final Map<String,byte[]> map) throws SpaceExceededException, IOException {  final byte[] b=BEncoder.encode(BEncoder.transcode(map));  this.table.insert(pk,b);  this.columnames.addAll(map.keySet());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:31.711 -0500",hash_original_method="B50FEB452305718DD4A7DDB2A5A67DD1",hash_generated_method="00599FD0052FE20BA1EFA9934E7F91F0") public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  public void forward(HttpServletRequest request,HttpServletResponse response,String target) throws ServletException, IOException {  filterConfig.getServletContext().getRequestDispatcher(target).forward(request,response);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (abort()) {    return;  }  WalletData perWalletModelData=super.bitcoinController.getModel().getActivePerWalletModelData();  WalletInfoData walletInfo=perWalletModelData.getWalletInfo();  if (walletInfo == null) {    walletInfo=new WalletInfoData(perWalletModelData.getWalletFilename(),perWalletModelData.getWallet(),MultiBitWalletVersion.PROTOBUF_ENCRYPTED);    perWalletModelData.setWalletInfo(walletInfo);  }  if (walletInfo.getSendingAddresses().size() > 0) {    JTable addressesTable=sendBitcoinPanel.getAddressesTable();    AddressBookTableModel addressesTableModel=sendBitcoinPanel.getAddressesTableModel();    int viewRow=addressesTable.getSelectedRow();    if (viewRow >= 0) {      int selectedAddressRowModel=addressesTable.convertRowIndexToModel(viewRow);      WalletAddressBookData rowData=addressesTableModel.getAddressBookDataByRow(selectedAddressRowModel,false);      if (rowData != null) {        if (selectedAddressRowModel < addressesTableModel.getRowCount()) {          walletInfo.getSendingAddresses().remove(rowData);          super.bitcoinController.getModel().getActivePerWalletModelData().setDirty(true);          addressesTableModel.fireTableDataChanged();        } else {          log.error("Could not remove row " + selectedAddressRowModel + " as table model only contained "+ addressesTableModel.getRowCount()+ " rows");        }        int newViewRowToSelect=viewRow == 0 ? 0 : viewRow - 1;        if (addressesTableModel.getRowCount() > 0) {          int newModelRowtoSelect=addressesTable.convertRowIndexToModel(newViewRowToSelect);          WalletAddressBookData newRowData=addressesTableModel.getAddressBookDataByRow(newModelRowtoSelect,false);          super.bitcoinController.getModel().setActiveWalletPreference(sendBitcoinPanel.getAddressConstant(),newRowData.getAddress());          super.bitcoinController.getModel().setActiveWalletPreference(sendBitcoinPanel.getLabelConstant(),newRowData.getLabel());          if (sendBitcoinPanel.getAddressTextField() != null) {            sendBitcoinPanel.getAddressTextField().setText(newRowData.getAddress());          }          sendBitcoinPanel.getLabelTextArea().setText(newRowData.getLabel());          sendBitcoinPanel.displayQRCode(newRowData.getAddress(),sendBitcoinPanel.getAmount(),newRowData.getLabel());        }      }    }  }  sendBitcoinPanel.checkDeleteSendingEnabled();  if (deleteSendingAddressConfirmDialog != null) {    deleteSendingAddressConfirmDialog.setVisible(false);  }}  }
class C{  public IndicesAliasesRequest addAlias(String alias,String... indices){  addAliasAction(new AliasActions(AliasAction.Type.ADD,indices,alias));  return this;}  }
class C{  public CustomizedDistributedRowLock<K> withLockId(String lockId){  this.lockId=lockId;  return this;}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public static CipherParameters makePBEMacParameters(PBEKeySpec keySpec,int type,int hash,int keySize){  PBEParametersGenerator generator=makePBEGenerator(type,hash);  byte[] key;  CipherParameters param;  key=convertPassword(type,keySpec);  generator.init(key,keySpec.getSalt(),keySpec.getIterationCount());  param=generator.generateDerivedMacParameters(keySize);  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  @Override public void destroyItem(ViewGroup container,int position,Object object){}  }
class C{  public WriteLockedOffHeapClockCacheFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,EvictionListener<K,V> evictionListener){  this(tableSource,storageEngineFactory,evictionListener,DEFAULT_TABLE_SIZE);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof SourceCode))   return false;  return o.toString().equals(this.toString());}  }
class C{  public String[] checkIpsecConnection() throws LocalRepositoryException {  final String prefix="checkIpsecConnection(): ";  _log.debug(prefix);  final String[] cmd={_IPSECTOOL_CMD,IPSEC_CHECK_CONNECTION};  String[] ips=exec(prefix,cmd);  _log.debug(prefix + "ips without ipsec connection: ",Strings.repr(ips));  return ips;}  }
class C{  public static void unset(){  final String correlationId=CORRELATION_ID.get();  if (correlationId != null) {    CONTEXT_MAP.remove(correlationId);  }  CORRELATION_ID.remove();}  }
class C{  public static @EnsuresNonNull("#1") <T extends Object>T[][][] castNonNullDeep(T[][][] arr){  return (T[][][])castNonNullArray(arr);}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public void increaseProjectedCount(int recursionLevel,int incr){  m_projectedCounts.increaseCount(recursionLevel,incr);}  }
class C{  public static String generateClientId(){  return MqttAsyncClient.generateClientId();}  }
class C{  protected void sequence_IntersectionTypeExpressionOLD(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public String toString(){  String trace;  if (node != null)   trace=" : at Line: " + node.getLineNumber() + " : in file: "+ node.getSourceFile()+ " : "+ node.getText(); else   trace=": <at unknown location>";  if (callstack != null)   trace=trace + "\n" + getScriptStackTrace();  return getMessage() + trace;}  }
class C{  public S_If createS_If(){  S_IfImpl s_If=new S_IfImpl();  return s_If;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public InflaterOutputStream(OutputStream out,Inflater infl){  this(out,infl,512);}  }
class C{  protected float unwrapValue(Object value){  return ((Float)value).floatValue();}  }
class C{  public int indexOf(int offset,int value){  for (int i=offset; i < _pos; i++) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  public ObjectFactory(){}  }
class C{  public static boolean isGetterMethod(ClassContext classContext,Method method){  MethodGen methodGen=classContext.getMethodGen(method);  if (methodGen == null) {    return false;  }  InstructionList il=methodGen.getInstructionList();  if (il.getLength() > 60) {    return false;  }  int count=0;  Iterator<InstructionHandle> it=il.iterator();  while (it.hasNext()) {    InstructionHandle ih=it.next();switch (ih.getInstruction().getOpcode()) {case Constants.GETFIELD:      count++;    if (count > 1) {      return false;    }  break;case Constants.PUTFIELD:case Constants.BALOAD:case Constants.CALOAD:case Constants.DALOAD:case Constants.FALOAD:case Constants.IALOAD:case Constants.LALOAD:case Constants.SALOAD:case Constants.AALOAD:case Constants.BASTORE:case Constants.CASTORE:case Constants.DASTORE:case Constants.FASTORE:case Constants.IASTORE:case Constants.LASTORE:case Constants.SASTORE:case Constants.AASTORE:case Constants.PUTSTATIC:return false;case Constants.INVOKESTATIC:case Constants.INVOKEVIRTUAL:case Constants.INVOKEINTERFACE:case Constants.INVOKESPECIAL:case Constants.GETSTATIC:}}return true;}  }
class C{  @Override public void processEndElement() throws ParseException {switch (type) {case Content.Type.OTHER_XML:    break;case Content.Type.OTHER_TEXT:  text=value;lang=xmlLang;break;case Content.Type.OTHER_BINARY:if (value != null) {try {bytes=Base64.decode(value);} catch (Base64DecoderException e) {throw new ParseException(CoreErrorDomain.ERR.invalidBase64);}}lang=xmlLang;break;default :throw new AssertionError("Invalid type for other content.");}}  }
class C{  public static int h(long key){  return (int)((int)(key >> 32) ^ Integer.reverseBytes((int)(key & 0xFFFFFFFF))) & 0x7fffffff;}  }
class C{  public static boolean isEmpty(List<?> list){  return (list == null) || list.isEmpty();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.537 -0500",hash_original_method="9A391F653EB77CB550BC26AB7CC01602",hash_generated_method="A608344FBF0D790676D8628D631977D9") public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){  ContentValues values=new ContentValues(7);  values.put(ADDRESS,address);  if (date != null) {    values.put(DATE,date);  }  values.put(READ,read ? Integer.valueOf(1) : Integer.valueOf(0));  values.put(SUBJECT,subject);  values.put(BODY,body);  if (deliveryReport) {    values.put(STATUS,STATUS_PENDING);  }  if (threadId != -1L) {    values.put(THREAD_ID,threadId);  }  return resolver.insert(uri,values);}  }
class C{  public static int min(final int... array){  validateArray(array);  int min=array[0];  for (int j=1; j < array.length; j++) {    if (array[j] < min) {      min=array[j];    }  }  return min;}  }
class C{  public void dontDisplayMetrics(List<String> metricsNotToDisplay){  m_delegate.dontDisplayMetrics(metricsNotToDisplay);}  }
class C{  private int readEncodedContentNew(byte[] cont) throws Exception {  int glyphCount=0;  String line;  final String rd="rd";  final String nd="nd";  final int size=cont.length;  int charstringStart=-1;  int end=-1;  int i;  for (i=4; i < size; i++) {    if ((cont[i - 3] == 101) && (cont[i - 2] == 120) && (cont[i - 1] == 101)&& (cont[i] == 99)) {      charstringStart=i + 1;      while (cont[charstringStart] == 10 || cont[charstringStart] == 13) {        charstringStart++;      }      i=size;    }  }  if (charstringStart != -1) {    for (i=charstringStart; i < size - 10; i++) {      if ((cont[i] == 99) && (cont[i + 1] == 108) && (cont[i + 2] == 101)&& (cont[i + 3] == 97)&& (cont[i + 4] == 114)&& (cont[i + 5] == 116)&& (cont[i + 6] == 111)&& (cont[i + 7] == 109)&& (cont[i + 8] == 97)&& (cont[i + 9] == 114)&& (cont[i + 10] == 107)) {        end=i - 1;        while ((cont[end] == 10) || (cont[end] == 13)) {          end--;        }        i=size;      }    }  }  if (end == -1) {    end=size;  }  ByteArrayOutputStream bos=new ByteArrayOutputStream();  int len=(end - charstringStart);  bos.write(cont,charstringStart,len);  bos.close();  final BufferedReader br=new BufferedReader(new StringReader(new String(cont)));  while (true) {    line=br.readLine();    if (line == null) {      break;    }    if (line.startsWith("/lenIV")) {      final StringTokenizer vals=new StringTokenizer(line);      vals.nextToken();      skipBytes=Integer.parseInt(vals.nextToken());    }  }  br.close();  final int l=cont.length;  int p=0;  charstringStart=-1;  int subrsStart=-1;  int blueValuesStart=-1;  int otherBluesStart=-1;  int familyBluesStart=-1;  int familyOtherBluesStart=-1;  int blueScaleStart=-1;  int blueShiftStart=-1;  int blueFuzzStart=-1;  int stdHWStart=-1;  int stdVWStart=-1;  int stemSnapHStart=-1;  int stemSnapVStart=-1;  int forceBoldStart=-1;  int languageGroupStart=-1;  final char[] charstringsChars="/CharStrings".toCharArray();  final char[] subrsChars="/Subrs".toCharArray();  final char[] blueValuesChars="/BlueValues".toCharArray();  final char[] otherBluesChars="/OtherBlues".toCharArray();  final char[] familyBluesChars="/FamilyBlues".toCharArray();  final char[] familyOtherBluesChars="/FamilyOtherBlues".toCharArray();  final char[] blueScaleChars="/BlueScale".toCharArray();  final char[] blueShiftChars="/BlueShift".toCharArray();  final char[] blueFuzzChars="/BlueFuzz".toCharArray();  final char[] stdHWChars="/StdHW".toCharArray();  final char[] stdVWChars="/StdVW".toCharArray();  final char[] stemSnapHChars="/StemSnapH".toCharArray();  final char[] stemSnapVChars="/StemSnapV".toCharArray();  final char[] forceBoldChars="/ForceBold".toCharArray();  final char[] languageGroupChars="/LanguageGroup".toCharArray();  while (p < l) {    if (p == l) {      break;    }    if (charstringStart == -1 && (p + 11 < l) && checkForString(cont,p,charstringsChars)) {      charstringStart=p + 11;    } else     if (subrsStart == -1 && (p + 5 < l) && checkForString(cont,p,subrsChars)) {      subrsStart=p + 6;    } else     if (blueValuesStart == -1 && (p + 11 < l) && checkForString(cont,p,blueValuesChars)) {      blueValuesStart=p + 11;    } else     if (otherBluesStart == -1 && (p + 11 < l) && checkForString(cont,p,otherBluesChars)) {      otherBluesStart=p + 11;    } else     if (familyBluesStart == -1 && (p + 12 < l) && checkForString(cont,p,familyBluesChars)) {      familyBluesStart=p + 12;    } else     if (familyOtherBluesStart == -1 && (p + 17 < l) && checkForString(cont,p,familyOtherBluesChars)) {      familyOtherBluesStart=p + 17;    } else     if (blueScaleStart == -1 && (p + 10 < l) && checkForString(cont,p,blueScaleChars)) {      blueScaleStart=p + 10;    } else     if (blueShiftStart == -1 && (p + 10 < l) && checkForString(cont,p,blueShiftChars)) {      blueShiftStart=p + 10;    } else     if (blueFuzzStart == -1 && (p + 9 < l) && checkForString(cont,p,blueFuzzChars)) {      blueFuzzStart=p + 9;    } else     if (stdHWStart == -1 && (p + 6 < l) && checkForString(cont,p,stdHWChars)) {      stdHWStart=p + 6;    } else     if (stdVWStart == -1 && (p + 6 < l) && checkForString(cont,p,stdVWChars)) {      stdVWStart=p + 6;    } else     if (stemSnapHStart == -1 && (p + 10 < l) && checkForString(cont,p,stemSnapHChars)) {      stemSnapHStart=p + 10;    } else     if (stemSnapVStart == -1 && (p + 10 < l) && checkForString(cont,p,stemSnapVChars)) {      stemSnapVStart=p + 10;    } else     if (forceBoldStart == -1 && (p + 10 < l) && checkForString(cont,p,forceBoldChars)) {      forceBoldStart=p + 10;    } else     if (languageGroupStart == -1 && (p + 14 < l) && checkForString(cont,p,languageGroupChars)) {      languageGroupStart=p + 14;    }    if (subrsStart > -1 && charstringStart > -1 && blueValuesStart > -1 && otherBluesStart > -1 && familyBluesStart > -1 && familyOtherBluesStart > -1 && blueScaleStart > -1 && blueShiftStart > -1 && blueFuzzStart > -1 && stdHWStart > -1 && stdVWStart > -1 && stemSnapHStart > -1 && stemSnapVStart > -1 && forceBoldStart > -1 && languageGroupStart > -1) {      break;    }    p++;  }  if (charstringStart == -1) {    this.isFontSubstituted=false;    LogWriter.writeLog("No glyph data found");  } else {    glyphCount=extractFontData(skipBytes,cont,charstringStart,rd,l,nd);  }  if (subrsStart > -1) {    extractSubroutineData(skipBytes,cont,subrsStart,charstringStart,rd,l,nd);  }  if (blueValuesStart > -1) {    blueValues=readIntArray(cont,blueValuesStart);  }  if (otherBluesStart > -1) {    otherBlues=readIntArray(cont,otherBluesStart);  }  if (familyBluesStart > -1) {    familyBlues=readIntArray(cont,familyBluesStart);  }  if (familyOtherBluesStart > -1) {    familyOtherBlues=readIntArray(cont,familyOtherBluesStart);  }  if (stdHWStart > -1) {    stdHW=readReal(cont,stdHWStart);  }  if (stdVWStart > -1) {    stdVW=readReal(cont,stdVWStart);  }  if (stemSnapHStart > -1) {    stemSnapH=readIntArray(cont,stemSnapHStart);  }  if (stemSnapVStart > -1) {    stemSnapV=readIntArray(cont,stemSnapVStart);  }  if (blueScaleStart > -1) {    blueScale=readReal(cont,blueScaleStart);  }  if (blueShiftStart > -1) {    blueShift=readInteger(cont,blueShiftStart);  }  if (blueFuzzStart > -1) {    blueFuzz=readInteger(cont,blueFuzzStart);  }  if (forceBoldStart > -1) {    int j=forceBoldStart;    int forceBoldEnd=-1;    while (j < l && forceBoldEnd == -1) {      if (checkForString(cont,j,DEF_CHARS)) {        forceBoldEnd=j;      }      j++;    }    final String val=new String(cont,forceBoldStart,forceBoldEnd - forceBoldStart);    try {      forceBold=Boolean.parseBoolean(val);    } catch (    final NumberFormatException e) {      LogWriter.writeLog("Exception " + e);    }  }  if (languageGroupStart > -1) {    languageGroup=readInteger(cont,languageGroupStart);  }  return glyphCount;}  }
class C{  void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  public static String format(final Calendar calendar,final String pattern,final TimeZone timeZone){  return format(calendar,pattern,timeZone,null);}  }
class C{  public String toString(){switch (type) {case '*':    return content + "*";case '?':  return content + "?";case '+':return content + "+";case ',':case '|':case '&':char data[]={' ',(char)type,' '};String str="";for (ContentModel m=(ContentModel)content; m != null; m=m.next) {str=str + m;if (m.next != null) {str+=new String(data);}}return "(" + str + ")";default :return content.toString();}}  }
class C{  public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(Range<K> range,V value){  return new ImmutableRangeMap<K,V>(ImmutableList.of(range),ImmutableList.of(value));}  }
class C{  private int allocateBPartnerAll() throws Exception {  int C_Currency_ID=MClient.get(getCtx()).getC_Currency_ID();  Timestamp dateAcct=null;  BigDecimal totalPayments=Env.ZERO;  for (int p=0; p < m_payments.length; p++) {    MPayment payment=m_payments[p];    if (payment.isAllocated())     continue;    BigDecimal allocatedAmt=payment.getAllocatedAmt();    if (allocatedAmt != null && allocatedAmt.signum() != 0)     continue;    BigDecimal availableAmt=payment.getPayAmt().add(payment.getDiscountAmt()).add(payment.getWriteOffAmt()).add(payment.getOverUnderAmt());    if (!payment.isReceipt())     availableAmt=availableAmt.negate();    if (payment.getC_Currency_ID() != C_Currency_ID)     continue;    if (dateAcct == null || payment.getDateAcct().after(dateAcct))     dateAcct=payment.getDateAcct();    totalPayments=totalPayments.add(availableAmt);  }  BigDecimal totalInvoices=Env.ZERO;  for (int i=0; i < m_invoices.length; i++) {    MInvoice invoice=m_invoices[i];    if (invoice.isPaid())     continue;    BigDecimal openAmt=invoice.getOpenAmt(true,null);    if (!invoice.isSOTrx())     openAmt=openAmt.negate();    if (invoice.getC_Currency_ID() != C_Currency_ID)     continue;    if (dateAcct == null || invoice.getDateAcct().after(dateAcct))     dateAcct=invoice.getDateAcct();    totalInvoices=totalInvoices.add(openAmt);  }  BigDecimal difference=totalInvoices.subtract(totalPayments);  log.info("= Invoices=" + totalInvoices + " - Payments="+ totalPayments+ " = Difference="+ difference);  if (difference.signum() == 0) {    for (int p=0; p < m_payments.length; p++) {      MPayment payment=m_payments[p];      if (payment.isAllocated())       continue;      BigDecimal allocatedAmt=payment.getAllocatedAmt();      if (allocatedAmt != null && allocatedAmt.signum() != 0)       continue;      BigDecimal availableAmt=payment.getPayAmt().add(payment.getDiscountAmt()).add(payment.getWriteOffAmt()).add(payment.getOverUnderAmt());      if (!payment.isReceipt())       availableAmt=availableAmt.negate();      if (payment.getC_Currency_ID() != C_Currency_ID)       continue;      if (!createAllocation(C_Currency_ID,"BP All",dateAcct,availableAmt,null,null,null,payment.getC_BPartner_ID(),payment.getC_Payment_ID(),0,payment.getAD_Org_ID())) {        throw new AdempiereSystemError("Cannot create Allocation");      }    }    for (int i=0; i < m_invoices.length; i++) {      MInvoice invoice=m_invoices[i];      if (invoice.isPaid())       continue;      BigDecimal openAmt=invoice.getOpenAmt(true,null);      if (!invoice.isSOTrx())       openAmt=openAmt.negate();      if (invoice.getC_Currency_ID() != C_Currency_ID)       continue;      if (!createAllocation(C_Currency_ID,"BP All",dateAcct,openAmt,null,null,null,invoice.getC_BPartner_ID(),0,invoice.getC_Invoice_ID(),invoice.getAD_Org_ID())) {        throw new AdempiereSystemError("Cannot create Allocation");      }    }    processAllocation();    return 1;  }  return 0;}  }
class C{  private static boolean isOnSystemClassLoader() throws MatlabConnectionException {  try {    URI matlabcontrolLocation=MatlabClassLoaderHelper.class.getProtectionDomain().getCodeSource().getLocation().toURI();    URLClassLoader systemClassLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();    URL[] urls=systemClassLoader.getURLs();    for (    URL url : urls) {      if (url.toURI().equals(matlabcontrolLocation)) {        return true;      }    }    return false;  } catch (  ClassCastException e) {    throw new MatlabConnectionException("Unable to determine if matlabcontrol is on the system class loader's classpath",e);  }catch (  URISyntaxException e) {    throw new MatlabConnectionException("Unable to determine if matlabcontrol is on the system class loader's classpath",e);  }}  }
class C{  public void createBlockSnapshotSession(URI systemURI,URI snapSessionURI,String groupName,String stepId){  TaskCompleter completer=null;  try {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    completer=new BlockSnapshotSessionCreateCompleter(snapSessionURI,stepId);    WorkflowStepCompleter.stepExecuting(stepId);    getDevice(system.getSystemType()).doCreateSnapshotSession(system,snapSessionURI,groupName,completer);  } catch (  Exception e) {    if (completer != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      completer.error(_dbClient,serviceError);    } else {      throw DeviceControllerException.exceptions.createBlockSnapshotSessionFailed(e);    }  }}  }
class C{  private void disposedLoadedObjects(){  if (m_modules != null) {    for (    final Module module : m_modules) {      module.dispose();    }    for (    final Project project : m_projects) {      project.dispose();    }    if (m_debuggerTemplateManager != null) {      m_debuggerTemplateManager.dispose();    }    m_viewTagManager=null;    m_nodeTagManager=null;    m_modules.clear();    m_projects.clear();    m_debuggerTemplateManager=null;  }}  }
class C{  public void goingActive(){  if (getState() == OCCUPIED) {    return;  }  log.debug("Block {} goes OCCUPIED",getSystemName());  ResetCandidateEntrancePaths();  int count=0;  Path next=null;  int currPathCnt=paths.size();  Path pList[]=new Path[currPathCnt];  boolean isSet[]=new boolean[currPathCnt];  boolean isActive[]=new boolean[currPathCnt];  int pDir[]=new int[currPathCnt];  int pFromDir[]=new int[currPathCnt];  for (int i=0; i < currPathCnt; i++) {    pList[i]=paths.get(i);    isSet[i]=pList[i].checkPathSet();    Block b=pList[i].getBlock();    if (b != null) {      if (b.getState() == OCCUPIED) {        isActive[i]=true;      } else {        isActive[i]=false;      }      pDir[i]=b.getDirection();    } else {      isActive[i]=false;      pDir[i]=-1;    }    pFromDir[i]=pList[i].getFromBlockDirection();    if (isSet[i] && isActive[i]) {      count++;      next=pList[i];    }  }  if (count == 0) {    if (infoMessageCount < maxInfoMessages) {      log.info("Sensor ACTIVE came out of nowhere, no neighbors active for block " + getSystemName() + ". Value not set.");      infoMessageCount++;    }  } else   if (count == 1) {    if ((next != null) && (next.getBlock() != null)) {      setValue(next.getBlock().getValue());      setDirection(next.getFromBlockDirection());      log.debug("Block {} gets new value '{}' from {}, direction={}",getSystemName(),next.getBlock().getValue(),next.getBlock().getSystemName(),Path.decodeDirection(getDirection()));    } else     if (next == null) {      log.error("unexpected next==null processing block " + getSystemName());    } else     if (next.getBlock() == null) {      log.error("unexpected next.getBlock()=null processing block " + getSystemName());    }  } else {    log.debug("Block {} has {} active linked blocks, comparing directions",getSystemName(),count);    next=null;    count=0;    for (int i=0; i < currPathCnt; i++) {      if (isSet[i] && isActive[i]) {        log.debug("comparing {} ({}) to {} ({})",pList[i].getBlock().getDisplayName(),Path.decodeDirection(pDir[i]),getSystemName(),Path.decodeDirection(pFromDir[i]));        if ((pDir[i] & pFromDir[i]) > 0) {          count++;          next=pList[i];        }      }    }    if (next == null) {      for (int i=0; i < currPathCnt; i++) {        if (isSet[i] && isActive[i]) {          count++;          next=pList[i];        }      }    }    if (next != null && count == 1) {      setValue(next.getBlock().getValue());      setDirection(next.getFromBlockDirection());      log.debug("Block {} gets new value '{}' from {}, direction {}",getSystemName(),next.getBlock().getValue(),next.getBlock().getSystemName(),Path.decodeDirection(getDirection()));    } else {      log.warn("count of " + count + " ACTIVE neightbors with proper direction can't be handled for block "+ getSystemName()+ " but maybe it can be determined when another block becomes free");      pListOfPossibleEntrancePaths=new Path[currPathCnt];      CntOfPossibleEntrancePaths=0;      for (int i=0; i < currPathCnt; i++) {        if (isSet[i] && isActive[i]) {          pListOfPossibleEntrancePaths[CntOfPossibleEntrancePaths]=pList[i];          CntOfPossibleEntrancePaths++;        }      }    }  }  setState(OCCUPIED);}  }
class C{  public static Bitmap createIconBitmap(Bitmap icon,Context context){  final int iconBitmapSize=getIconBitmapSize();  if (iconBitmapSize == icon.getWidth() && iconBitmapSize == icon.getHeight()) {    return icon;  }  return createIconBitmap(new BitmapDrawable(context.getResources(),icon),context);}  }
class C{  public static int adjustAlpha(int color,int alpha){  return (alpha << 24) | (color & 0x00ffffff);}  }
class C{  public int squaredNorm(){  return x * x + y * y + z * z;}  }
class C{  @Override public UUID createExitNode(UUID parentNode){  UUID uuid=UUID.randomUUID();  graphServer.addVertex(uuid);  graphServer.addEdge(parentNode,uuid);  exitNodeMap.put(uuid,parentNode);  return uuid;}  }
class C{  public Line3D(Stack<Vector3> points,float thickness,int[] colors,boolean createVBOs){  super();  mPoints=points;  mLineThickness=thickness;  mColors=colors;  if (colors != null && colors.length != points.size())   throw new RuntimeException("The number of line points and colors is not the same.");  init(createVBOs);}  }
class C{  public static void addSentenceActionMeta(Vertex question,Vertex answer,String actions,Network network){  if (actions == null || actions.trim().isEmpty()) {    clearSentenceMeta(question,answer,Primitive.ACTION,network);  } else {    Relationship relationship=question.getRelationship(Primitive.RESPONSE,answer);    if (relationship != null) {      Vertex meta=network.createMeta(relationship);      meta.internalRemoveRelationships(Primitive.ACTION);      List<String> words=Utils.getWords(actions);      for (      String action : words) {        if (!action.equals("none")) {          meta.addRelationship(Primitive.ACTION,new Primitive(action));        }      }    }    network.checkReduction(question);    Collection<Relationship> synonyms=question.getRelationships(Primitive.SYNONYM);    if (synonyms != null) {      for (      Relationship synonym : synonyms) {        relationship=synonym.getTarget().getRelationship(Primitive.RESPONSE,answer);        if (relationship != null) {          Vertex meta=network.createMeta(relationship);          meta.internalRemoveRelationships(Primitive.ACTION);          List<String> words=Utils.getWords(actions);          for (          String action : words) {            if (!action.equals("none")) {              meta.addRelationship(Primitive.ACTION,new Primitive(action));            }          }        }      }    }  }}  }
class C{  private AnalysisSmartCacheMatch checkMatchSingle(Set<Axis> restrict,AnalysisSmartCacheRequest request,AnalysisSmartCacheSignature candidate){  AnalysisSmartCacheMatch match=new AnalysisSmartCacheMatch(candidate);  for (  DomainSelection ds : request.getAnalysis().getSelection().get()) {    for (    Axis filter : ds.getFilters()) {      if (restrict == null || restrict.contains(filter)) {        if (!checkMatchFilter(ds,filter,request,candidate,match)) {          return null;        }      }    }  }  return match;}  }
class C{  public static Name calledMethodName(JCTree tree){  if (tree.hasTag(EXEC)) {    JCExpressionStatement exec=(JCExpressionStatement)tree;    if (exec.expr.hasTag(APPLY)) {      Name mname=TreeInfo.name(((JCMethodInvocation)exec.expr).meth);      return mname;    }  }  return null;}  }
class C{  public static void validateUnManagedExportMasks(UnManagedVolume unManagedVolume,List<UnManagedExportMask> unManagedMasks){  if (isVplexVolume(unManagedVolume)) {    Map<String,Set<String>> initToMaskMap=new HashMap<String,Set<String>>();    for (    UnManagedExportMask mask : unManagedMasks) {      mapInitsToVplexStorageViews(initToMaskMap,mask,mask.getKnownInitiatorNetworkIds());      mapInitsToVplexStorageViews(initToMaskMap,mask,mask.getUnmanagedInitiatorNetworkIds());    }    _logger.info("initiator to UnManagedExportMask map is " + initToMaskMap);    Iterator<Entry<String,Set<String>>> mapEntries=initToMaskMap.entrySet().iterator();    while (mapEntries.hasNext()) {      Entry<String,Set<String>> entry=mapEntries.next();      if (entry.getValue().size() <= 1) {        mapEntries.remove();      }    }    if (!initToMaskMap.isEmpty()) {      StringBuilder errorDetails=new StringBuilder();      for (      Entry<String,Set<String>> mapEntry : initToMaskMap.entrySet()) {        errorDetails.append("Initiator port ").append(mapEntry.getKey());        errorDetails.append(" is contained in the following storage views: ");        errorDetails.append(Joiner.on(", ").join(mapEntry.getValue())).append(". ");      }      _logger.error(errorDetails.toString());      throw IngestionException.exceptions.invalidExportConfiguration(errorDetails.toString());    }  }}  }
class C{  private KeyCertificateEntry generateNewKeyCertificatePair(){  KeyCertificateEntry entryToReturn;  entryToReturn=generator.generateKeyCertificatePair();  entryToReturn.setCreationDate(new Date());  setKeyCertificatePair(entryToReturn);  KeyStoreUtil.setSelfGeneratedCertificate(coordConfigStoringHelper,Boolean.TRUE);  return entryToReturn;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementdefaultattr.class,args);}  }
class C{  void storePasswordHashWithSalt() throws Exception {  System.out.println("Very Secure Systems Inc. - login");  stat.execute("DROP TABLE IF EXISTS USERS2");  stat.execute("CREATE TABLE USERS2(ID INT PRIMARY KEY, " + "NAME VARCHAR, SALT BINARY, HASH BINARY)");  stat.execute("INSERT INTO USERS2 VALUES" + "(1, 'admin', SECURE_RAND(16), NULL)");  stat.execute("DROP CONSTANT IF EXISTS HASH_ITERATIONS");  stat.execute("DROP CONSTANT IF EXISTS HASH_ALGORITHM");  stat.execute("CREATE CONSTANT HASH_ITERATIONS VALUE 100");  stat.execute("CREATE CONSTANT HASH_ALGORITHM VALUE 'SHA256'");  stat.execute("UPDATE USERS2 SET " + "HASH=HASH(HASH_ALGORITHM, " + "STRINGTOUTF8('abc' || SALT), HASH_ITERATIONS) "+ "WHERE ID=1");  String user=input("user?");  String password=input("password?");  stat.execute("SET ALLOW_LITERALS NONE");  PreparedStatement prep=conn.prepareStatement("SELECT * FROM USERS2 WHERE NAME=? AND " + "HASH=HASH(HASH_ALGORITHM, STRINGTOUTF8(? || SALT), HASH_ITERATIONS)");  prep.setString(1,user);  prep.setString(2,password);  ResultSet rs=prep.executeQuery();  while (rs.next()) {    System.out.println("name: " + rs.getString("NAME"));    System.out.println("salt: " + rs.getString("SALT"));    System.out.println("hash: " + rs.getString("HASH"));  }  rs.close();  prep.close();  stat.execute("SET ALLOW_LITERALS ALL");  stat.close();}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public DateTimeFormatterBuilder appendSignedDecimal(DateTimeFieldType fieldType,int minDigits,int maxDigits){  if (fieldType == null) {    throw new IllegalArgumentException("Field type must not be null");  }  if (maxDigits < minDigits) {    maxDigits=minDigits;  }  if (minDigits < 0 || maxDigits <= 0) {    throw new IllegalArgumentException();  }  if (minDigits <= 1) {    return append0(new UnpaddedNumber(fieldType,maxDigits,true));  } else {    return append0(new PaddedNumber(fieldType,maxDigits,true,minDigits));  }}  }
class C{  @ReflectiveCtor public Elision(FilePosition pos,Operator op,List<? extends Expression> operands){  super(pos,checkOp(op),operands);}  }
class C{  public static String appendToPath(String pathname,final String... pathElements){  if (pathElements != null) {    pathname=StringUtils.defaultIfBlank(pathname,File.separator);    for (    final String pathElement : pathElements) {      pathname+=(pathname.endsWith(File.separator) ? "" : File.separator);      pathname+=pathElement;    }  }  return pathname;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  protected AbstractSigmoidalRulePanel(){  cbImplementation=createDropDown(null,null);  cbImplementation.setItems(SquashingFunction.names());  tfSlope=createTextField(null,null);  tfBias=createTextField(null,null);}  }
class C{  public cudaStream_t(){}  }
class C{  @Autowired public void configureGlobal(final AuthenticationManagerBuilder auth) throws Exception {  auth.authenticationProvider(accountAuthenticationProvider);}  }
class C{  public LBHttpSolrServer(HttpClient httpClient,String... solrServerUrl){  this(httpClient,new BinaryResponseParser(),solrServerUrl);}  }
class C{  @Override public void beginWindow(long windowId){  result=true;  doemit=false;}  }
class C{  public byte[] createImage(Projection proj,int scaledWidth,int scaledHeight,List<String> showLayers){  return createImage(proj,scaledWidth,scaledHeight,showLayers,getBackground());}  }
class C{  public void sync() throws SyncFailedException {  try {    if (Libcore.os.isatty(this)) {      Libcore.os.tcdrain(this);    } else {      Libcore.os.fsync(this);    }  } catch (  ErrnoException errnoException) {    SyncFailedException sfe=new SyncFailedException(errnoException.getMessage());    sfe.initCause(errnoException);    throw sfe;  }}  }
class C{  public void truncate(int size,Comparator<? super Solution> comparator){  sort(comparator);  while (data.size() > size) {    data.remove(data.size() - 1);  }}  }
class C{  void pause(){  pause(-1,-1);}  }
class C{  public EObject basicGetSourceElement(){  return sourceElement;}  }
class C{  public void removeCollects(int regency){  Integer[] keys=new Integer[collects.keySet().size()];  collects.keySet().toArray(keys);  for (int i=0; i < keys.length; i++) {    if (keys[i] <= regency)     collects.remove(keys[i]);  }}  }
class C{  private void findNextArrow(EntityArrow303 previousarrow303,int indexProgress,boolean keepArrowType){  int newSlot=keepArrowType ? selectedSlot : selectedSlot + indexProgress;  int iterations=0;  while (iterations++ < localPlayer.inventory.mainInventory.length) {    if (newSlot < 0) {      newSlot=localPlayer.inventory.mainInventory.length - 1;    } else     if (newSlot >= localPlayer.inventory.mainInventory.length) {      newSlot=0;    }    ItemStack itemstack=localPlayer.inventory.mainInventory[newSlot];    if (itemstack == null) {      newSlot+=indexProgress;      continue;    }    Item item=itemstack.getItem();    if (item == Items.arrow) {      EntityArrow303 itemarrow303=new EntityArrow303(localPlayer.worldObj);      if (previousarrow303 == null || previousarrow303.tip != itemarrow303.tip) {        selectedArrow=itemarrow303;        selectedSlot=newSlot;        sendPacketToUpdateArrowChoice();        return;      }      newSlot+=indexProgress;      continue;    }    if (item == null || (!(item instanceof ItemArrow303))) {      newSlot+=indexProgress;      continue;    }    ItemArrow303 itemarrow303=(ItemArrow303)item;    if (previousarrow303 == null || keepArrowType && itemarrow303.arrow == previousarrow303 || !keepArrowType && itemarrow303.arrow != previousarrow303) {      selectedArrow=itemarrow303.arrow;      selectedSlot=newSlot;      sendPacketToUpdateArrowChoice();      return;    }  }  selectedArrow=null;  selectedSlot=0;}  }
class C{  public void finishPriorityTask(GenericClusterRequest clusterRequest,InputStream result){  CountingInputStream is=new CountingInputStream(result);  String url=BROKER_BASE_URL + String.format("/complete/priority/%s",clusterRequest.taskId);  HttpPost httpPost=new HttpPost(url);  httpPost.setEntity(new InputStreamEntity(is));  taskDeliveryExecutor.execute(null);}  }
class C{  public TransactionHit txAffiliation(String value){  setString(TRANSACTION_AFFILIATION,value);  return this;}  }
class C{  public Resource toResource(final Supplier<Map<String,Relationship>> relationshipSupplier,final Supplier<Map<String,Object>> attributeSupplier){  final Resource resource=new Resource(type,(obj == null) ? uuid.orElseThrow(null) : dictionary.getId(obj));  resource.setRelationships(relationshipSupplier.get());  resource.setAttributes(attributeSupplier.get());  return resource;}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  public Select<Record,Select<Record,?>>.SelectForExample SELECT(){  return Record.this.SELECT().selectForExample(example);}  }
class C{  public static <T>Set<String> convertListToString(Collection<T> values,int maxCount){  Set<String> ret=new HashSet<>();  if (values == null || values.isEmpty())   return ret;  StringBuilder sb=new StringBuilder();  int count=0;  for (  T t : values) {    sb.append(t);    if (count == maxCount) {      ret.add(sb.substring(0,sb.length() - 1));      sb=new StringBuilder();      count=0;    } else {      sb.append(",");      count++;    }  }  if (sb.length() > 0)   ret.add(sb.substring(0,sb.length() - 1));  return ret;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (lowerBound: ");  result.append(lowerBound);  result.append(", upperBound: ");  result.append(upperBound);  result.append(')');  return result.toString();}  }
class C{  protected synchronized void checkDepartureOf(final InternalDistributedMember member,final List grantsReferencingMember){  if (this.destroyed) {    return;  }  if (member.equals(this.lessee)) {    grantsReferencingMember.add(this);    return;  }  if (this.pendingRequests != null) {    DLockRequestMessage req=null;    for (Iterator iter=this.pendingRequests.iterator(); iter.hasNext(); ) {      req=(DLockRequestMessage)iter.next();      if (member.equals(req.getSender())) {        grantsReferencingMember.add(this);        return;      }    }  }}  }
class C{  public void writeInt(long pos,int value){  int blockIndex=(int)(pos >> blockBits);  int upto=(int)(pos & blockMask);  byte[] block=blocks.get(blockIndex);  int shift=24;  for (int i=0; i < 4; i++) {    block[upto++]=(byte)(value >> shift);    shift-=8;    if (upto == blockSize) {      upto=0;      blockIndex++;      block=blocks.get(blockIndex);    }  }}  }
class C{  public static String escapeXml(String s,CleanerProperties props,boolean isDomCreation){  boolean advanced=props.isAdvancedXmlEscape();  boolean recognizeUnicodeChars=props.isRecognizeUnicodeChars();  boolean translateSpecialEntities=props.isTranslateSpecialEntities();  boolean transResCharsToNCR=props.isTransResCharsToNCR();  boolean transSpecialEntitiesToNCR=props.isTransSpecialEntitiesToNCR();  return escapeXml(s,advanced,recognizeUnicodeChars,translateSpecialEntities,isDomCreation,transResCharsToNCR,transSpecialEntitiesToNCR,false);}  }
class C{  private static IgniteBiTuple<IgniteConfiguration,GridSpringResourceContext> configuration(@Nullable String springCfgPath){  if (springCfgPath == null)   return new T2<>(new IgniteConfiguration(),null);  try {    URL url=U.resolveSpringUrl(springCfgPath);    return IgnitionEx.loadConfiguration(url);  } catch (  IgniteCheckedException e) {    throw new IgniteException("Failed to instantiate configuration from Spring XML: " + springCfgPath,e);  }}  }
class C{  public <T>JsonArray<T> createListDtoFromJson(Reader json,Class<T> dtoInterface) throws IOException {  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final List<JsonElement> list;  try {    list=gson.fromJson(json,listTypeCache.getUnchecked(JsonElement.class));  } catch (  JsonSyntaxException e) {    final Throwable cause=e.getCause();    if (cause instanceof IOException) {      throw (IOException)cause;    }    throw e;  }  final List<T> result=new ArrayList<>(list.size());  for (  JsonElement e : list) {    result.add(dtoProvider.fromJson(e));  }  return new JsonArrayImpl<>(result);}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  public OrganizationAuthorityException(String message,Object[] params){  super(message,params);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public CAppendTagAction(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> tag){  super("Append Tag");  m_parent=Preconditions.checkNotNull(parent,"IE01217: Parent argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01218: Tag manager argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE01782: Tag can't be null.");}  }
class C{  private void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  this.getContentPane().add(mainPanel,BorderLayout.CENTER);  northPanel.setLayout(new ALayout());  northPanel.add(showAll,new ALayoutConstraint(0,0));  showAll.addActionListener(this);  this.getContentPane().add(northPanel,BorderLayout.NORTH);  mainPanel.add(centerScrollPane,BorderLayout.CENTER);  centerScrollPane.getViewport().add(m_table,null);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  mainPanel.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));  confirmPanel.addActionListener(this);}  }
class C{  public Matrix4f rotateYXZ(float angleY,float angleX,float angleZ){  return rotateYXZ(angleY,angleX,angleZ,this);}  }
class C{  public boolean isLoaded(XField field){  return getLoadStoreCount(field).loadCount > 0;}  }
class C{  public void update(long processTime,boolean success){  long fastest=fastestProcessing.get();  if (fastest > processTime || fastest == -1) {    fastestProcessing.set(processTime);  }  if (slowestProcessing.get() < processTime) {    slowestProcessing.set(processTime);  }  if (success) {    successCount.incrementAndGet();  } else {    errorCount.incrementAndGet();  }  lastProcessing.set(processTime);}  }
class C{  public GetResourceParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateAllAlternateIdentifiersForIPTURLToResource(){  List<Resource> resources=resourceManager.list(PublicationStatus.PUBLIC);  resources.addAll(resourceManager.list(PublicationStatus.REGISTERED));  if (!resources.isEmpty()) {    log.debug("Updating all public resources' IPT URL to resource alternate identifier");  }  for (  Resource resource : resources) {    resourceManager.updateAlternateIdentifierForIPTURLToResource(resource);  }}  }
class C{  protected ColumnControlPopup createColumnControlPopup(){  return new DefaultColumnControlPopup();}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public EarliestnessComputation(UnitGraph unitGraph,UpSafetyAnalysis upSafe,DownSafetyAnalysis downSafe,SideEffectTester sideEffect){  this(unitGraph,upSafe,downSafe,sideEffect,new ArraySparseSet());}  }
class C{  public static double[][] buildXY(double Xmin,double Xmax,double[] Y){  if (Xmax < Xmin)   throw new IllegalArgumentException("First argument must be less than second");  int n=Y.length;  double[][] XY=new double[n][2];  for (int i=0; i < n; i++) {    XY[i][0]=Xmin + (Xmax - Xmin) * (double)i / (double)(n - 1);    XY[i][1]=Y[i];  }  return XY;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:52.141 -0500",hash_original_method="DB8463E601768C30E10926755AE29405",hash_generated_method="29CC802E44001D75D65E08FCF1636350") public static byte[] stringToAscii(String str){  int len=str.length();  byte[] result=new byte[len];  for (int i=0; i < len; i++) {    int charCode=charToAscii.get(str.charAt(i),-1);    if (charCode == -1)     return null;    result[i]=(byte)charCode;  }  return result;}  }
class C{  public static HeaderElement matchAcceptHeader(String mimeTypeSpec,List<HeaderElement> acceptElements){  HeaderElement mimeTypeElem=HeaderElement.parse(mimeTypeSpec);  while (mimeTypeElem != null) {    for (    HeaderElement acceptElem : acceptElements) {      if (matchesAcceptHeader(mimeTypeElem,acceptElem)) {        return acceptElem;      }    }    mimeTypeElem=generalizeMIMEType(mimeTypeElem);  }  return null;}  }
class C{  private SipTransactionContext sendSubsequentRequest(SipDialogPath dialog,SipRequest request,long timeout) throws NetworkException, PayloadException {  SipTransactionContext ctx=mSipInterface.sendSubsequentRequest(dialog,request);  ctx.waitResponse(timeout);  if (ctx.isSipResponse()) {    int code=ctx.getStatusCode();    WarningHeader warn=(WarningHeader)ctx.getSipResponse().getHeader(WarningHeader.NAME);    if (Response.FORBIDDEN == code && warn == null) {      mNetworkInterface.getRegistrationManager().restart();      throw new PayloadException("Stack not properly registered with status code : " + code);    }  }  return ctx;}  }
class C{  public static DoubleStream takeWhile(DoubleStream stream,DoublePredicate predicate){  Objects.requireNonNull(stream);  Objects.requireNonNull(predicate);  return StreamSupport.doubleStream(new WhileOps.UnorderedWhileSpliterator.OfDouble.Taking(stream.spliterator(),true,predicate),stream.isParallel()).onClose(null);}  }
class C{  @Before public void basicSetUp() throws Exception {  fbManager=createFBManager();  fbManager.setDialect(1);  defaultDatabaseSetUp(fbManager);}  }
class C{  public PubsubFuture<List<ReceivedMessage>> pull(final String path,final PullRequest pullRequest){  return requestJavaNet("pull",POST,path,PullResponse.class,pullRequest).thenApply(null);}  }
class C{  public void line(double x,double y){  Line line=new Line(x,y);  if (x < minX) {    minX=x;  }  if (y < minY) {    minY=y;  }  if (x > maxX) {    maxX=x;  }  if (y > maxY) {    maxY=y;  }  elements.add(line);}  }
class C{  public static String ptb2Text(String ptbText){  StringBuffer sb=new StringBuffer(ptbText.length());  PTB2TextLexer lexer=new PTB2TextLexer(new StringReader(ptbText));  String token;  try {    while ((token=lexer.next()) != null)     sb.append(token);  } catch (  IOException e) {    e.printStackTrace();  }  return (sb.toString());}  }
class C{  public byte maintenance(){  return maintenance;}  }
class C{  public void testFailureWithFailureRatio(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(2,3);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  assertFalse(breaker.isOpen());  state.recordFailure();  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  private static int[] convertToIntArgbPrePixels(Color[] colors,boolean linear){  int[] pixels=new int[colors.length];  for (int i=0; i < colors.length; i++) {    pixels[i]=colorToIntArgbPrePixel(colors[i],linear);  }  return pixels;}  }
class C{  public static Text t(String key,Object... args){  return Text.of(new ResourceBundleTranslation(key,LOOKUP_FUNC),args);}  }
class C{  public void leftEye(Eye eye){  if (this.stereoType == StereoType.SIDE_BY_SIDE) {    Viewport vp=eye.getViewport();    aspectRatio=((float)vp.width) / ((float)vp.height);    pgl.viewport(vp.x,vp.y,vp.width,vp.height);  } else {    pgl.viewport(0,0,this.width,this.height);  }  float top=widthdiv2;  float bottom=-widthdiv2;  float left=(-aspectRatio * widthdiv2 + 0.5f * eyeSeparation * nearPlane / convPlane);  float right=(aspectRatio * widthdiv2 + 0.5f * eyeSeparation * nearPlane / convPlane);  app.frustum(left,right,bottom,top,nearPlane,farPlane);  app.camera(posx - rightx,posy - righty,posz - rightz,posx - rightx + dirx,posy - righty + diry,posz - rightz + dirz,upx,upy,upz);}  }
class C{  public DrawerBuilder withDelayOnDrawerClose(int delayOnDrawerClose){  this.mDelayOnDrawerClose=delayOnDrawerClose;  return this;}  }
class C{  public static <K,V>Map<K,V> constrainedMap(Map<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedMap<K,V>(map,constraint);}  }
class C{  public static void testBinary() throws Exception {  NSObject x=PropertyListParser.parse(new File("test-files/test1.plist"));  PropertyListParser.saveAsBinary(x,new File("test-files/out-testBinary.plist"));  NSObject y=PropertyListParser.parse(new File("test-files/out-testBinary.plist"));  assertTrue(x.equals(y));}  }
class C{  public static void toXml(final Config toConvert,final OutputStream stream,Boolean prettyXml) throws JAXBException {  Marshaller varMarshaller=getMarshaller(prettyXml);  varMarshaller.marshal(toConvert,stream);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  double cutoff=Double.parseDouble(args[2]);  if (cutoff < 0) {    cutoff=0;  }  if (cutoff > 0.95) {    cutoff=0.95;  }  double gain=Double.parseDouble(args[3]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(input.getPreferredPalette());    double minValue=input.getMinimumValue();    double maxValue=input.getMaximumValue();    double range=maxValue - minValue;    double[] data;    double a=1 / (1 + Math.exp(gain * cutoff));    double b=1 / (1 + Math.exp(gain * (cutoff - 1))) - 1 / (1 + Math.exp(gain * cutoff));    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          z=(z - minValue) / range;          z=(1 / (1 + Math.exp(gain * (cutoff - z))) - a) / b;          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void print(PrintStream out){  if (isPublic()) {    out.print("public ");  }  if (isInterface()) {    out.print("interface ");  } else {    out.print("class ");  }  out.print(getName() + " ");  if (getSuperClass() != null) {    out.print("extends " + getSuperClass().getName() + " ");  }  if (interfaces.length > 0) {    out.print("implements ");    for (int i=0; i < interfaces.length; i++) {      if (i > 0) {        out.print(", ");      }      out.print(interfaces[i].getName());      out.print(" ");    }  }  out.println("{");  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    out.print("    ");    f.print(out);  }  out.println("}");}  }
class C{  public static final void exception(String message,Throwable e){  if (message == null && e != null) {    message=e.getMessage();  }  logExpensive(Level.SEVERE,message,e);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public boolean isSetDeleteRequest(){  return this.deleteRequest != null;}  }
class C{  public Crossfader withGmailStyleSwiping(){  this.mBaseLayout=R.layout.crossfader_gmail_style;  return this;}  }
class C{  public static <E extends Comparable<E>>void mirror(BinaryNode<E> node){  if (node == null)   return;  mirror(node.left);  mirror(node.right);  BinaryNode<E> tempNode;  tempNode=node.left;  node.left=node.right;  node.right=tempNode;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  double gridRes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    gridRes=(image.getCellSizeX() + image.getCellSizeY()) / 2;    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.setPreferredPalette("spectrum.pal");    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getValue(row,col);if (z != noData) {z=outputImage.getValue(row,col);outputImage.setValue(row,col,Math.sqrt(z) * gridRes);} else {outputImage.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}outputImage.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputImage.addMetadataEntry("Created on " + new Date());image.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private Future<ReplDBMSHeader> waitForEvent(WatchPredicate<ReplDBMSHeader> predicate,boolean cancel,WatchManager<ReplDBMSHeader> watchManager,boolean committed) throws InterruptedException {  if (logger.isDebugEnabled()) {    logger.debug("Enqueueing watch for event: predicate=" + predicate.toString() + " cancel="+ cancel+ " committed="+ committed);  }  Watch<ReplDBMSHeader> watch;  if (cancel)   watch=watchManager.watch(predicate,threadCount,cancelAction); else   watch=watchManager.watch(predicate,threadCount);  for (int i=0; i < this.taskInfo.length; i++) {    ReplDBMSHeader event;    if (committed)     event=taskInfo[i].getLastCommittedEvent(); else     event=taskInfo[i].getLastProcessedEvent();    if (event != null)     watchManager.process(event,i);  }  boolean alreadyReached=watch.isDone();  if (alreadyReached && cancel) {    cancelAll();    shouldInterruptTask=true;  }  if (logger.isDebugEnabled()) {    logger.debug("Returning watch to caller: watch=" + watch.toString() + " committed="+ committed+ " alreadyReached="+ alreadyReached);  }  return watch;}  }
class C{  public boolean hasNewHeader(int position){  if (indexOutOfBounds(position)) {    return false;  }  long headerId=mAdapter.getHeaderId(position);  if (headerId < 0) {    return false;  }  return position == 0 || headerId != mAdapter.getHeaderId(position - 1);}  }
class C{  public DrawableRequestBuilder<Uri> loadScreen(Uri uri,Key key,Size original){  Size size=clampSize(original,MAXIMUM_SMOOTH_PIXELS,getMaxImageDisplaySize());  return mLargeImageBuilder.clone().load(uri).signature(key).override(size.width(),size.height());}  }
class C{  public Property millisOfDay(){  return new Property(this,getChronology().millisOfDay());}  }
class C{  public void start(){  if (hasVibratePermission(mContext)) {    mVibrator=(Vibrator)mContext.getSystemService(Service.VIBRATOR_SERVICE);  }  mIsGloballyEnabled=checkGlobalSetting(mContext);  Uri uri=Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED);  mContext.getContentResolver().registerContentObserver(uri,false,mContentObserver);}  }
class C{  public void createArgument(final String name,final String value) throws CoreException {  Assert.isNotNull(name);  Assert.isTrue(!"".equals(name));  Assert.isNotNull(value);  if (fDocument != null && fRefactoringArguments != null && value != null) {    try {      final Attr attribute=fDocument.createAttribute(name);      attribute.setValue(value);      fRefactoringArguments.add(attribute);    } catch (    DOMException exception) {      throw new CoreException(new Status(IStatus.ERROR,RefactoringCorePlugin.getPluginId(),IRefactoringCoreStatusCodes.REFACTORING_HISTORY_FORMAT_ERROR,exception.getLocalizedMessage(),null));    }  }}  }
class C{  public SingleDeviceStateMachine(SingleDeviceActions<TDevice> deviceActions,TKey deviceKey,SingleDeviceShutdownListener<TKey> deviceShutdownListener,Logger.Factory logFactory){  mDeviceActions=deviceActions;  mShutdownListener=deviceShutdownListener;  mDeviceKey=deviceKey;  mLock=new ReentrantLock();  mDeviceLifetime=new Lifetime();  mLogger=logFactory.create(TAG);  mIsShutdown=false;  mTargetState=TargetState.CLOSED;  mDeviceState=DeviceState.CLOSED;}  }
class C{  public Ifeq2(){  super("ifeq2",2);}  }
class C{  public final void mulNormalize(Matrix3d m1){  double[] tmp=new double[9];  double[] tmp_rot=new double[9];  double[] tmp_scale=new double[3];  tmp[0]=this.m00 * m1.m00 + this.m01 * m1.m10 + this.m02 * m1.m20;  tmp[1]=this.m00 * m1.m01 + this.m01 * m1.m11 + this.m02 * m1.m21;  tmp[2]=this.m00 * m1.m02 + this.m01 * m1.m12 + this.m02 * m1.m22;  tmp[3]=this.m10 * m1.m00 + this.m11 * m1.m10 + this.m12 * m1.m20;  tmp[4]=this.m10 * m1.m01 + this.m11 * m1.m11 + this.m12 * m1.m21;  tmp[5]=this.m10 * m1.m02 + this.m11 * m1.m12 + this.m12 * m1.m22;  tmp[6]=this.m20 * m1.m00 + this.m21 * m1.m10 + this.m22 * m1.m20;  tmp[7]=this.m20 * m1.m01 + this.m21 * m1.m11 + this.m22 * m1.m21;  tmp[8]=this.m20 * m1.m02 + this.m21 * m1.m12 + this.m22 * m1.m22;  compute_svd(tmp,tmp_scale,tmp_rot);  this.m00=tmp_rot[0];  this.m01=tmp_rot[1];  this.m02=tmp_rot[2];  this.m10=tmp_rot[3];  this.m11=tmp_rot[4];  this.m12=tmp_rot[5];  this.m20=tmp_rot[6];  this.m21=tmp_rot[7];  this.m22=tmp_rot[8];}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  return generateX509Certificate(key,provider,null);}  }
class C{  public void testLegacyLongReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyLongField("value",3000000000L,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyLongField("value",-1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyLongField("value",4,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_LONG));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("3000000000",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public static void deleteUser(final SQLProvider provider,final IUser user) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE00088: provider argument can not be null");  Preconditions.checkNotNull(user,"IE00106: user argument can not be null");  final Connection connection=provider.getConnection().getConnection();  final String query="DELETE FROM " + CTableNames.USER_TABLE + " WHERE user_id = ?;";  try (PreparedStatement statement=connection.prepareStatement(query)){    statement.setInt(1,user.getUserId());    statement.execute();  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public void stop(){  mStatus=Status.STOPPED;  objectAnimatorStop.setFloatValues(mCurrentProgressPosition / mWidth,0.0f);  mCurrentSeconds=0;  mCurrentProgressPosition=0.0f;  objectAnimatorProgress.setFloatValues(mCurrentProgressPosition,1.0f);  objectAnimatorProgress.setDuration(mMaxSeconds * 1000);  objectAnimatorProgress.end();  objectAnimatorStop.start();}  }
class C{  @Override public void receivedEvent(final DebuggerReply reply){  Preconditions.checkNotNull(reply,"IE01211: Debug event can't be null");  if (reply instanceof AttachReply) {    attachSynchronizer.handle((AttachReply)reply);  } else   if (reply instanceof BreakpointHitReply) {    breakpointHitSynchronizer.handle((BreakpointHitReply)reply);  } else   if (reply instanceof BreakpointsRemovedReply) {    breakpointRemovedSynchronizer.handle((BreakpointsRemovedReply)reply);  } else   if (reply instanceof BreakpointSetReply) {    breakpointSetSynchronizer.handle((BreakpointSetReply)reply);  } else   if (reply instanceof CancelTargetSelectionReply) {    cancelTargetSelectionSynchronizer.handle((CancelTargetSelectionReply)reply);  } else   if (reply instanceof AuthenticationFailedReply) {    authenticationFailedSynchronizer.handle((AuthenticationFailedReply)reply);  } else   if (reply instanceof DebuggerClosedUnexpectedlyReply) {    errorConnectionClosedSynchronizer.handle((DebuggerClosedUnexpectedlyReply)reply);  } else   if (reply instanceof DetachReply) {    detachSynchronizer.handle((DetachReply)reply);  } else   if (reply instanceof EchoBreakpointHitReply) {    echoBreakpointHitSynchronizer.handle((EchoBreakpointHitReply)reply);  } else   if (reply instanceof EchoBreakpointsRemovedReply) {    echoBreakpointRemovedSynchronizer.handle((EchoBreakpointsRemovedReply)reply);  } else   if (reply instanceof EchoBreakpointSetReply) {    echoBreakpointSetSynchronizer.handle((EchoBreakpointSetReply)reply);  } else   if (reply instanceof ExceptionOccurredReply) {    exceptionOccurredSynchronizer.handle((ExceptionOccurredReply)reply);  } else   if (reply instanceof HaltReply) {    haltSynchronizer.handle((HaltReply)reply);  } else   if (reply instanceof ListFilesReply) {    listFilesSynchronizer.handle((ListFilesReply)reply);  } else   if (reply instanceof ListProcessesReply) {    listProcessesSynchronizer.handle((ListProcessesReply)reply);  } else   if (reply instanceof MemoryMapReply) {    memoryMapSynchronizer.handle((MemoryMapReply)reply);  } else   if (reply instanceof ModuleLoadedReply) {    moduleLoadedSynchronizer.handle((ModuleLoadedReply)reply);  } else   if (reply instanceof ModuleUnloadedReply) {    moduleUnloadedSynchronizer.handle((ModuleUnloadedReply)reply);  } else   if (reply instanceof ProcessClosedReply) {    processClosedSynchronizer.handle((ProcessClosedReply)reply);  } else   if (reply instanceof ReadMemoryReply) {    readMemorySynchronizer.handle((ReadMemoryReply)reply);  } else   if (reply instanceof RegistersReply) {    readRegistersSynchronizer.handle((RegistersReply)reply);  } else   if (reply instanceof RequestTargetReply) {    requestTargetSynchronizer.handle((RequestTargetReply)reply);  } else   if (reply instanceof ResumeReply) {    resumeSynchronizer.handle((ResumeReply)reply);  } else   if (reply instanceof SearchReply) {    searchSynchronizer.handle((SearchReply)reply);  } else   if (reply instanceof SelectFileReply) {    fileSelectedSynchronizer.handle((SelectFileReply)reply);  } else   if (reply instanceof SelectProcessReply) {    processSelectedSynchronizer.handle((SelectProcessReply)reply);  } else   if (reply instanceof SetRegisterReply) {    setRegisterSynchronizer.handle((SetRegisterReply)reply);  } else   if (reply instanceof SingleStepReply) {    singleStepSynchronizer.handle((SingleStepReply)reply);  } else   if (reply instanceof StepBreakpointHitReply) {    stepBreakpointHitSynchronizer.handle((StepBreakpointHitReply)reply);  } else   if (reply instanceof StepBreakpointsRemovedReply) {    stepBreakpointRemovedSynchronizer.handle((StepBreakpointsRemovedReply)reply);  } else   if (reply instanceof StepBreakpointSetReply) {    stepBreakpointSetSynchronizer.handle((StepBreakpointSetReply)reply);  } else   if (reply instanceof TargetInformationReply) {    targetInformationSynchronizer.handle((TargetInformationReply)reply);  } else   if (reply instanceof TerminateReply) {    terminateSynchronizer.handle((TerminateReply)reply);  } else   if (reply instanceof ThreadClosedReply) {    threadClosedSynchronizer.handle((ThreadClosedReply)reply);  } else   if (reply instanceof ThreadCreatedReply) {    threadCreatedSynchronizer.handle((ThreadCreatedReply)reply);  } else   if (reply instanceof ValidateMemoryReply) {    validateMemorySynchronizer.handle((ValidateMemoryReply)reply);  } else   if (reply instanceof ResumeThreadReply) {    resumeThreadSynchronizer.handle((ResumeThreadReply)reply);  } else   if (reply instanceof SuspendThreadReply) {    suspendThreadSynchronizer.handle((SuspendThreadReply)reply);  } else   if (reply instanceof BreakpointConditionSetReply) {    breakpointConditionSetSynchronizer.handle((BreakpointConditionSetReply)reply);  } else   if (reply instanceof WriteMemoryReply) {    writeMemorySynchronizer.handle((WriteMemoryReply)reply);  } else   if (reply instanceof QueryDebuggerEventSettingsReply) {    queryDebuggerEventSettingsSynchronizer.handle((QueryDebuggerEventSettingsReply)reply);  } else   if (reply instanceof SetExceptionSettingsReply) {    setExceptionSettingsSynchronizer.handle((SetExceptionSettingsReply)reply);  } else   if (reply instanceof ProcessStartReply) {    processStartSynchronizer.handle((ProcessStartReply)reply);  } else   if (reply instanceof SetDebuggerEventSettingsReply) {    setDebuggerEventSettingsSynchronizer.handle((SetDebuggerEventSettingsReply)reply);  } else {    throw new IllegalStateException("IE01105: Unknown reply");  }}  }
class C{  public boolean hasDeniedPermission(){  for (int i=0; i < mPerms.size(); i++) {    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_DENIED)     return true;  }  return false;}  }
class C{  @Override public Dependency saveDependency(Dependency dependency){  return null;}  }
class C{  public SaslAuthenticator(Sasl sasl,String username,String password,String authzid,String mechanismRestriction){  this.sasl=sasl;  this.username=username;  this.password=password;  this.authzid=authzid;  this.mechanismRestriction=mechanismRestriction;}  }
class C{  public void replaceHeader(String name,String value){  headers.remove(name);  headers.put(name,value);}  }
class C{  public void testTimestampEscapeSequenceWithWhitespaces() throws Exception {  check("'2016-08-26 13:15:08'","{ ts '2016-08-26 13:15:08'}");  check("'2016-08-26 13:15:08'","{   ts  '2016-08-26 13:15:08'}");  check("'2016-08-26 13:15:08'","{ \n ts\n'2016-08-26 13:15:08'}");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.472 -0500",hash_original_method="4C3D5B3E8C94F161E20327652A28CA9F",hash_generated_method="6A063ED1944AD2178AE45E09CFBB516B") @Override protected void clear(){  super.clear();  mEventType=0;  mPackageName=null;  mEventTime=0;  while (!mRecords.isEmpty()) {    AccessibilityRecord record=mRecords.remove(0);    record.recycle();  }}  }
class C{  @Override public boolean hasNext() throws XMLStreamException {  log.log(Level.FINE,"hasNext(): {0}",event != END_DOCUMENT);  return event != END_DOCUMENT;}  }
class C{  public byte clearByte(final byte holder){  return (byte)clear(holder);}  }
class C{  public final void lazySet(V newValue){  unsafe.putOrderedObject(this,valueOffset,newValue);}  }
class C{  protected void performTest(Filter filter){  m_Filter=filter;  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(m_Instances,m_Filter);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  try {    compareDatasets(icopy,result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Datasets differ: \n" + ex.getMessage());  }}  }
class C{  private CacheClassLoader(){  this(U.detectClassLoader(GridCacheDeploymentManager.class));}  }
class C{  private JSONObject put(String key,Object value){  String pooled;  if (key == null) {    throw new RuntimeException("Null key.");  }  if (value != null) {    testValidity(value);    pooled=(String)keyPool.get(key);    if (pooled == null) {      if (keyPool.size() >= keyPoolSize) {        keyPool=new HashMap<String,Object>(keyPoolSize);      }      keyPool.put(key,key);    } else {      key=pooled;    }    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public static void createKey(int hkey,String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  int[] ret;  if (hkey == HKEY_LOCAL_MACHINE) {    ret=createKey(systemRoot,hkey,key);    regCloseKey.invoke(systemRoot,ret[0]);  } else   if (hkey == HKEY_CURRENT_USER) {    ret=createKey(userRoot,hkey,key);    regCloseKey.invoke(userRoot,ret[0]);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }  if (ret[1] != REG_SUCCESS) {    throw new IllegalArgumentException("rc=" + ret[1] + "  key="+ key);  }}  }
class C{  default POrderedSetX<T> toPOrderedSetX(){  return POrderedSetX.fromCollection(toList());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node commentNode;  String commentName;  String commentValue;  doc=(Document)load("hc_staff",false);  elementList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < elementList.getLength(); indexN10040++) {    commentNode=(Node)elementList.item(indexN10040);    commentName=commentNode.getNodeName();    if (equals("#comment",commentName)) {      commentValue=commentNode.getNodeValue();      assertEquals("value"," This is comment number 1.",commentValue);    }  }  commentNode=doc.createComment(" This is a comment");  commentValue=commentNode.getNodeValue();  assertEquals("createdCommentNodeValue"," This is a comment",commentValue);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader;  String inputViewingStation;  String outputHeader;  int row, col, rows, cols;  int progress=0;  double z, noData, outputNoData;  double stationHeight;  double[] data;  double vertCount=1;  double horizCount;  double t1, t2, tva;  int stationRow;  int stationCol;  double x, y, dist, dZ, viewAngleValue;  double va;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputViewingStation=args[1];  outputHeader=args[2];  stationHeight=Double.parseDouble(args[3]);  if (demHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=DEM.getNoDataValue();    double stationX;    double stationY;    double stationZ;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    WhiteboxRaster viewAngle=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    viewAngle.isTemporaryFile=true;    WhiteboxRaster maxViewAngle=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    maxViewAngle.isTemporaryFile=true;    ArrayList<Double> stationXs=new ArrayList<>();    ArrayList<Double> stationYs=new ArrayList<>();    if (inputViewingStation.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputViewingStation);      if (input.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The input viewing station vector should be \n" + "of a Point or MultiPoint ShapeType.");        return;      }      for (      ShapeFileRecord record : input.records) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      stationXs.add(vertices[0][0]);    stationYs.add(vertices[0][1]);  break;case POINTZ:PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();stationXs.add(vertices[0][0]);stationYs.add(vertices[0][1]);break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();stationXs.add(vertices[0][0]);stationYs.add(vertices[0][1]);break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;}}} else if (inputViewingStation.toLowerCase().endsWith(".dep")) {WhiteboxRaster viewStation=new WhiteboxRaster(inputViewingStation,"r");int vsRows=viewStation.getNumberRows();int vsCols=viewStation.getNumberColumns();double vsNoData=viewStation.getNoDataValue();for (row=0; row < vsRows; row++) {data=viewStation.getRowValues(row);for (col=0; col < vsCols; col++) {z=data[col];if (z != vsNoData & z != 0) {stationXs.add(viewStation.getXCoordinateFromColumn(col));stationYs.add(viewStation.getXCoordinateFromColumn(row));}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (vsRows - 1));updateProgress(progress);}} else {showFeedback("Unrecognized input viewing station file type.");return;}int numStations=stationXs.size();for (int a=0; a < numStations; a++) {stationX=stationXs.get(a);stationY=stationYs.get(a);stationRow=DEM.getRowFromYCoordinate(stationY);stationCol=DEM.getColumnFromXCoordinate(stationX);stationZ=DEM.getValue(stationRow,stationCol) + stationHeight;for (row=0; row < rows; row++) {data=DEM.getRowValues(row);for (col=0; col < cols; col++) {z=data[col];if (z != noData) {x=DEM.getXCoordinateFromColumn(col);y=DEM.getYCoordinateFromRow(row);dZ=z - stationZ;dist=Math.sqrt((x - stationX) * (x - stationX) + (y - stationY) * (y - stationY));if (dist != 0.0) {viewAngleValue=dZ / dist * 1000;viewAngle.setValue(row,col,viewAngleValue);}} else {viewAngle.setValue(row,col,outputNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}for (row=stationRow - 1; row <= stationRow + 1; row++) {for (col=stationCol - 1; col <= stationCol + 1; col++) {maxViewAngle.setValue(row,col,viewAngle.getValue(row,col));}}double maxVA=viewAngle.getValue(stationRow - 1,stationCol);for (row=stationRow - 2; row >= 0; row--) {z=viewAngle.getValue(row,stationCol);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(row,stationCol,maxVA);}maxVA=viewAngle.getValue(stationRow + 1,stationCol);for (row=stationRow + 2; row < rows; row++) {z=viewAngle.getValue(row,stationCol);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(row,stationCol,maxVA);}maxVA=viewAngle.getValue(stationRow,stationCol + 1);for (col=stationCol + 2; col < cols - 1; col++) {z=viewAngle.getValue(stationRow,col);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(stationRow,col,maxVA);}maxVA=viewAngle.getValue(stationRow,stationCol - 1);for (col=stationCol - 2; col >= 0; col--) {z=viewAngle.getValue(stationRow,col);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(stationRow,col,maxVA);}for (row=stationRow - 2; row >= 0; row--) {vertCount++;horizCount=0;for (col=stationCol + 1; col <= stationCol + vertCount; col++) {if (col <= cols) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col - 1);t2=maxViewAngle.getValue(row + 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow - 2; row >= 0; row--) {vertCount++;horizCount=0;for (col=stationCol - 1; col >= stationCol - vertCount; col--) {if (col >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col + 1);t2=maxViewAngle.getValue(row + 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow + 2; row < rows; row++) {vertCount++;horizCount=0;for (col=stationCol - 1; col >= stationCol - vertCount; col--) {if (col >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col + 1);t2=maxViewAngle.getValue(row - 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow + 2; row < rows; row++) {vertCount++;horizCount=0;for (col=stationCol + 1; col <= stationCol + vertCount; col++) {if (col < cols) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col - 1);t2=maxViewAngle.getValue(row - 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol + 2; col < cols; col++) {vertCount++;horizCount=0;for (row=stationRow - 1; row >= stationRow - vertCount; row--) {if (row >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col - 1);t2=maxViewAngle.getValue(row,col - 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol + 2; col < cols; col++) {vertCount++;horizCount=0;for (row=stationRow + 1; row <= stationRow + vertCount; row++) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col - 1);t2=maxViewAngle.getValue(row,col - 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol - 2; col >= 0; col--) {vertCount++;horizCount=0;for (row=stationRow + 1; row <= stationRow + vertCount; row++) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col + 1);t2=maxViewAngle.getValue(row,col + 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol - 2; col >= 0; col--) {vertCount++;horizCount=0;for (row=stationRow - 1; row >= stationRow - vertCount; row--) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col + 1);t2=maxViewAngle.getValue(row,col + 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}viewAngle.flush();maxViewAngle.flush();double[] dataVA;for (row=0; row < rows; row++) {dataVA=viewAngle.getRowValues(row);data=maxViewAngle.getRowValues(row);for (col=0; col < cols; col++) {if (data[col] <= dataVA[col] && dataVA[col] != outputNoData) {output.setValue(row,col,output.getValue(row,col) + 1);} else if (dataVA[col] == outputNoData) {output.setValue(row,col,outputNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}}viewAngle.close();maxViewAngle.close();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  Account(){  this(0,0);}  }
class C{  private PluginInterface(final String startPath,final IDatabaseManager manager,final com.google.security.zynamics.binnavi.Plugins.PluginRegistry registry){  Preconditions.checkNotNull(manager,"Database manager can't be null");  this.startPath=startPath;  this.manager=new DatabaseManager(manager);  this.registry=new PluginRegistry(registry);}  }
class C{  protected void pull(final PullParams params,final ProgressMonitor progressMonitor,final URI dockerDaemonUri) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/images/create").query("fromImage",params.getFullRepo()).header("X-Registry-Auth",authResolver.getXRegistryAuthHeaderValue(params.getRegistry(),params.getAuthConfigs()))){    addQueryParamIfNotNull(connection,"tag",params.getTag());    final DockerResponse response=connection.request();    if (OK.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }    try (InputStream responseStream=response.getInputStream()){      JsonMessageReader<ProgressStatus> progressReader=new JsonMessageReader<>(responseStream,ProgressStatus.class);      Future<Object> pullFuture=executor.submit(null);      pullFuture.get();    } catch (    ExecutionException e) {      throw new DockerException(e.getCause().getLocalizedMessage(),500);    }catch (    InterruptedException e) {      throw new DockerException("Docker image pulling was interrupted",500);    }  } }  }
class C{  public void push(int id){  stack.push(registry.get(id));}  }
class C{  public void redirectSubtree(ContentHandler child,String uri,String local,String qname) throws SAXException {  redirect=child;  redirect.setDocumentLocator(locator);  redirect.startDocument();  for (int i=0; i < namespaces.size(); i+=2)   redirect.startPrefixMapping((String)namespaces.get(i),(String)namespaces.get(i + 1));  redirect.startElement(uri,local,qname,currentAtts);  redirectionDepth=1;}  }
class C{  public Memoizer(Function<A,V> defaultComputable){  this.defaultComputable=defaultComputable;}  }
class C{  public static Subject login(GSSCaller caller,Oid mech) throws LoginException {  CallbackHandler cb=null;  if (caller instanceof HttpCaller) {    cb=new sun.net.www.protocol.http.spnego.NegotiateCallbackHandler(((HttpCaller)caller).info());  } else {    String defaultHandler=java.security.Security.getProperty(DEFAULT_HANDLER);    if ((defaultHandler != null) && (defaultHandler.length() != 0)) {      cb=null;    } else {      cb=new TextCallbackHandler();    }  }  LoginContext lc=new LoginContext("",null,cb,new LoginConfigImpl(caller,mech));  lc.login();  return lc.getSubject();}  }
class C{  public void preClose() throws SQLException {  if (explicitClosed.compareAndSet(false,true)) {    proxy.lock.lock();    try {      removeListenerFromSchedulers();      closeConnection(waitNewSecondaryProtocol.getAndSet(null));      closeConnection(waitNewMasterProtocol.getAndSet(null));      closeConnection(masterProtocol);      closeConnection(secondaryProtocol);    }  finally {      proxy.lock.unlock();    }  }}  }
class C{  private void addLocalHolder(String owner) throws Exception {  String holderPath=ZKPaths.makePath(_localvdcHolderRoot,owner);  _log.info("adding global lock holder {}",holderPath);  try {    _zkClient.create().withMode(CreateMode.EPHEMERAL).forPath(holderPath);  } catch (  KeeperException.NodeExistsException e) {    _log.debug("global lock holder {} already exist",holderPath);  }catch (  KeeperException e) {    _log.error("failed to add global lock holder {}. e={}",holderPath,e);    throw e;  }catch (  Exception e) {    _log.error("failed to add global lock holder {} due to unexpected exception {}",holderPath,e);    throw e;  }  _log.info("added global lock holder {}",holderPath);}  }
class C{  public void addCommandListener(String formName,ActionListener l){  if (localCommandListeners == null) {    localCommandListeners=new Hashtable();  }  EventDispatcher d=(EventDispatcher)localCommandListeners.get(formName);  if (d == null) {    d=new EventDispatcher();    localCommandListeners.put(formName,d);  }  d.addListener(l);}  }
class C{  public long copy(final InputStream from,final OutputStream to,final long bytesToCopy) throws IOException {  Preconditions.checkState(bytesToCopy > 0);  long copied=0;  byte[] tmp=mByteArrayPool.get(mTempBufSize);  try {    while (copied < bytesToCopy) {      int read=from.read(tmp,0,(int)Math.min(mTempBufSize,bytesToCopy - copied));      if (read == -1) {        return copied;      }      to.write(tmp,0,read);      copied+=read;    }    return copied;  }  finally {    mByteArrayPool.release(tmp);  }}  }
class C{  public static void serializeTextAnnotationToFile(TextAnnotation ta,String fileName,boolean forceOverwrite) throws IOException {  File outFile=new File(fileName);  if (outFile.exists() && !forceOverwrite)   throw new IOException("ERROR: " + NAME + ".serializeTextAnnotationToFile(): file '"+ fileName+ "' already exists.");  FileUtils.writeByteArrayToFile(outFile,serializeTextAnnotationToBytes(ta));}  }
class C{  public String convertStatement(String origStatement) throws Exception {  if (m_db != null && !m_db.getName().equals(m_type))   getDatabase();  if (m_db != null)   return m_db.convertStatement(origStatement);  throw new Exception("CConnection.convertStatement - No Converstion Database");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getDscalerName(DShowTVPlayer.getDscalerMode());}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  while (i < end) {    while (i < end && ignore((char)data[i])) {      i++;    }    b1=decodingTable[data[i++]];    while (i < end && ignore((char)data[i])) {      i++;    }    b2=decodingTable[data[i++]];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex data");    }    out.write((b1 << 4) | b2);    outLen++;  }  return outLen;}  }
class C{  public Builder loggerLevel(Level loggerLevel){  if (loggerLevel == null) {    this.logger.setLevel(Level.OFF);  } else {    this.logger.setLevel(loggerLevel);  }  return this;}  }
class C{  @Override public final synchronized int size(){  return this.levelA.size() + this.levelB.size();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.WITH_STATEMENT__EXPRESSION:    return basicSetExpression(null,msgs);case N4JSPackage.WITH_STATEMENT__STATEMENT:  return basicSetStatement(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isString(){  return value instanceof String;}  }
class C{  public void handleZipRecursion(final HttpServerRequest request){  RecursiveHandlerFactory.RecursiveHandlerTypes zipType=RecursiveHandlerFactory.RecursiveHandlerTypes.ZIP;  try {    zipType=RecursiveHandlerFactory.RecursiveHandlerTypes.valueOf(request.params().get(ZIP_PARAM).toUpperCase());  } catch (  Exception handled) {  }  if (log.isTraceEnabled()) {    log.trace("currently using zip mode: " + zipType);  }  removeZipParameter(request);  handleExpansionRequest(request,zipType);}  }
class C{  @Override public Statement apply(Statement base,Description description){  return stagingLocation.apply(base,description);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","jit");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static long toLong(String str){  try {    return Long.parseLong(str);  } catch (  Exception e) {  }  return 0;}  }
class C{  public List<String> mainHeader(){  return mainHeader;}  }
class C{  private void create(SegmentMeta[] segmentMetaList,ServicesAmp manager) throws IOException {  Objects.requireNonNull(segmentMetaList);  _store=buildStore(manager);  _store.create();  createMetaSegment(segmentMetaList);  _segmentId=1;}  }
class C{  protected void activateWindow(ExecutionWindow window){  lock.lock();  try {    if (!activeWindows.containsKey(window.getId())) {      LOG.info("Activate window: " + window.getLabel());      activeWindows.put(window.getId(),window);      hasActiveWindows.signalAll();    }  }  finally {    lock.unlock();  }}  }
class C{  public PlayerList(final GameData data){  super(data);}  }
class C{  public TlsMac(TlsContext context,Digest digest,byte[] key,int keyOff,int keyLen){  this.context=context;  KeyParameter keyParameter=new KeyParameter(key,keyOff,keyLen);  this.secret=Arrays.clone(keyParameter.getKey());  if (digest instanceof LongDigest) {    this.digestBlockSize=128;    this.digestOverhead=16;  } else {    this.digestBlockSize=64;    this.digestOverhead=8;  }  if (TlsUtils.isSSL(context)) {    this.mac=new SSL3Mac(digest);    if (digest.getDigestSize() == 20) {      this.digestOverhead=4;    }  } else {    this.mac=new HMac(digest);  }  this.mac.init(keyParameter);  this.macLength=mac.getMacSize();  if (context.getSecurityParameters().truncatedHMac) {    this.macLength=Math.min(this.macLength,10);  }}  }
class C{  public static int sizeOfSimpleString(String str){  return DataConstants.SIZE_INT + str.length() * 2;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.268 -0400",hash_original_method="EA1F98341C1FEBB76DE541E0DAA4DDD0",hash_generated_method="2908ECB022F338E34CD3F0E8541D8B63") @Override public void close() throws IOException {  try {    out.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public void dump(Movie movie){  try {    JSONObject jsonObject=new JSONObject(movieObjectWriter.writeValueAsString(movie));    LOGGER.info("Dumping Movie:\n" + jsonObject.toString(4));  } catch (  JsonProcessingException e) {    LOGGER.error("Cannot parse JSON!",e);  }}  }
class C{  public static int updatePrices(String message,double f){  return (int)f;}  }
class C{  @Override public String globalInfo(){  return "A simple tokenizer that is using the java.util.StringTokenizer " + "class to tokenize the strings.";}  }
class C{  public void add(InputStream is,boolean doSubstitutions) throws IOException {  Properties props=new Properties();  props.load(is);  if (doSubstitutions)   substituteSystemValues(props);  add(props);}  }
class C{  public boolean isIntersects(){  return !isDisjoint();}  }
class C{  private void assertInitializing(){  if (this.state != INITIALIZING) {    String stateDesc=stateToString(this.state);    throw new IllegalStateException(LocalizedStrings.DLockGrantor_DLOCKGRANTOR_OPERATION_ONLY_ALLOWED_WHEN_INITIALIZING_NOT_0.toLocalizedString(stateDesc));  }}  }
class C{  @Override public ReferenceContainer<ReferenceType> next0(){  if (this.blobs == null)   return null;  RowSet row;  Map.Entry<byte[],byte[]> entry;  while (this.blobs.hasNext()) {    entry=this.blobs.next();    if (entry == null)     break;    try {      row=RowSet.importRowSet(entry.getValue(),this.factory.getRow());      if (row == null) {        ConcurrentLog.severe("ReferenceIterator","lost entry '" + UTF8.String(entry.getKey()) + "' because importRowSet returned null");        continue;      }      return new ReferenceContainer<ReferenceType>(this.factory,entry.getKey(),row);    } catch (    final SpaceExceededException e) {      ConcurrentLog.severe("ReferenceIterator","lost entry '" + UTF8.String(entry.getKey()) + "' because of too low memory: "+ e.toString());      continue;    }catch (    final Throwable e) {      ConcurrentLog.severe("ReferenceIterator","lost entry '" + UTF8.String(entry.getKey()) + "' because of error: "+ e.toString());      continue;    }  }  close();  return null;}  }
class C{  public static Action increaseFontSizeAction(JTextPane textPane){  return changeFontSizeAction(textPane,"A+",INCREASE_FONT_SIZE,1);}  }
class C{  private String computeInfo(IProgressMonitor monitor){  try {    final IJavaElement javaElement=getJavaElement();    return extractJavadoc(javaElement);  } catch (  CoreException e) {    JavaDocLocations.handleFailedJavadocFetch(e);  }  return null;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AllowParser.parse");  AllowList list=new AllowList();  try {    headerName(TokenTypes.ALLOW);    Allow allow=new Allow();    allow.setHeaderName(SIPHeaderNames.ALLOW);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    allow.setMethod(token.getTokenValue());    list.add(allow);    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      allow=new Allow();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      allow.setMethod(token.getTokenValue());      list.add(allow);      this.lexer.SPorHT();    }    this.lexer.SPorHT();    this.lexer.match('\n');    return list;  }  finally {    if (debug)     dbg_leave("AllowParser.parse");  }}  }
class C{  public boolean isStatsOutputEnabled(){  return enableStatsOutput;}  }
class C{  public boolean close(InterceptedStream<T> stream){  boolean wasRemoved=streams.remove(stream.getIndex(),stream);  close(stream.getStream());  return wasRemoved;}  }
class C{  public static int probRound(double value,Random rand){  if (value >= 0) {    double lower=Math.floor(value);    double prob=value - lower;    if (rand.nextDouble() < prob) {      return (int)lower + 1;    } else {      return (int)lower;    }  } else {    double lower=Math.floor(Math.abs(value));    double prob=Math.abs(value) - lower;    if (rand.nextDouble() < prob) {      return -((int)lower + 1);    } else {      return -(int)lower;    }  }}  }
class C{  public synchronized boolean deleteOwner(Principal caller,Principal owner) throws NotOwnerException, LastOwnerException {  if (!isOwner(caller))   throw new NotOwnerException();  Enumeration<? extends Principal> e=ownerGroup.members();  Object o=e.nextElement();  if (e.hasMoreElements())   return ownerGroup.removeMember(owner); else   throw new LastOwnerException();}  }
class C{  @Override public void flush() throws IOException {  Iterator<Client> it=clients.iterator();  while (it.hasNext()) {    Client client=it.next();    try {      client.output.flush();    } catch (    Exception e) {      it.remove();      close(client);    }  }}  }
class C{  private void assertImmovableInCurrentCollection(){  VM._assert(trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread.getStack())));  VM._assert(trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread)));  VM._assert(trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread.getStack())));  VM._assert(thread.getJNIEnv() == null || trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread.getJNIEnv())));  VM._assert(thread.getJNIEnv() == null || thread.getJNIEnv().refsArray() == null || trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread.getJNIEnv().refsArray())));  VM._assert(trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread.getContextRegisters())));  VM._assert(trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread.getContextRegisters().getGPRs())));  VM._assert(trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread.getExceptionRegisters())));  VM._assert(trace.willNotMoveInCurrentCollection(ObjectReference.fromObject(thread.getExceptionRegisters().getGPRs())));}  }
class C{  public static void main(String[] args) throws Exception {  System.err.println("Running Jetty 9.3.6.v20151106");  Configs configs=new Configs();  configs.validation();  server=new Server();  initConnnector(server,configs);  initWebappContext(server,configs);  if (configs.getJettyXML() != null && !"".equals(configs.getJettyXML().trim())) {    System.err.println("Loading Jetty.xml:" + configs.getJettyXML());    try {      XmlConfiguration configuration=new XmlConfiguration(new File(configs.getJettyXML()).toURI().toURL());      configuration.configure(server);    } catch (    Exception ex) {      System.err.println("Exception happened when loading Jetty.xml:");      ex.printStackTrace();    }  }  if (configs.getEnablescanner())   initScanner(web,configs);  initEclipseListener(configs);  initCommandListener(configs);  try {    server.start();    server.join();  } catch (  Exception e) {    e.printStackTrace();    System.exit(100);  }  return;}  }
class C{  public boolean isAnimationStarted(){  return mAnimationStarted;}  }
class C{  public void autonomousInit(){  System.out.println("NerdyIterativeRobot IterativeRobot.autonomousInit() method... Overload me!");}  }
class C{  @Override protected void pageChange(int pageIndex){  super.pageChange(pageIndex);  if (contentOutlinePage != null) {    handleContentOutlineSelection(contentOutlinePage.getSelection());  }}  }
class C{  public void contentSelectionChanged(ContentSelectionChangedEvent csce){  buildCompositeGraphicsNode(ctx,e,(CompositeGraphicsNode)node);}  }
class C{  public T caseAnonymous_linkingOp_1_(Anonymous_linkingOp_1_ object){  return null;}  }
class C{  public void increment(Response response){  all.incrementAndGet();  if (response.isEndSession()) {    disconnect.incrementAndGet();  }}  }
class C{  public MediaInfoException(String msg,Throwable e){  super(msg,e);}  }
class C{  protected void createFace(){  zoomPanel.setVisible(addZoom);  navPanel.setVisible(addPan);  scaleField.setVisible(addScale);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void onGLContextCreated(GL10 gl){}  }
class C{  @Override public void loadRGBA(Raster raster) throws IOException {  if (bandStorageType == null) {    throw new IllegalArgumentException("Unable to find BAND_STORAGE_TYPE.");  }  if (samplesPerPixel < 3) {    throw new IllegalArgumentException("Cannot load RGBA with less than 3 color components.");  }  if (iStream != null) {    iStream.close();  }  iStream=new FileImageInputStream(new File(dataFilePath));  iStream.seek(imageStart);  int stripHeight=Math.min(STRIP_ROWS,rasterLength);  int stripWidth=rasterWidth * samplesPerPixel;  int numStrips=(int)Math.ceil((double)rasterLength / stripHeight);  if (bandStorageType.equals("SAMPLE_INTERLEAVED")) {    int stripSize=stripWidth * stripHeight * bytesPerSample;    if (stripSize > Integer.MAX_VALUE) {      throw new IllegalArgumentException("Cannot load PDS file with strip size > " + Integer.MAX_VALUE + ".");    }    byte[] bbArray=new byte[stripSize];    ByteBuffer bbuf=ByteBuffer.allocate(4 * rasterWidth * stripHeight);    iStream.seek(imageStart);    int r=0;    for (int i=0; i < numStrips; ++i) {      int h=Math.min(rasterLength - stripHeight * i,stripHeight);      int len=h * stripWidth;      len=iStream.read(bbArray,0,len);      for (int j=0; j < h; ++j) {        for (int k=0; k < stripWidth; k+=samplesPerPixel) {          for (int l=0; l < samplesPerPixel; ++l) {            bbuf.put(bbArray[k + l]);          }          if (samplesPerPixel == 3) {            bbuf.put((byte)255);          }        }        r++;      }      bbuf.rewind();      raster.set(r,h,bbArray);    }  } else   if (bandStorageType.equals("BAND_SEQUENTIAL")) {    int stripSize=rasterWidth * stripHeight;    if (stripSize > Integer.MAX_VALUE) {      throw new IllegalArgumentException("Cannot load PDS file with strip size > " + Integer.MAX_VALUE + ".");    }    raster.set(255);    byte[] bArray=new byte[4 * rasterWidth * stripHeight];    byte[] bbArray=new byte[stripSize];    iStream.seek(imageStart);    for (int k=0; k < samplesPerPixel; ++k) {      int r=0;      for (int i=0; i < numStrips; ++i) {        int h=Math.min(rasterLength - stripHeight * i,stripHeight);        int len=h * rasterWidth;        len=iStream.read(bbArray,0,len);        for (int j=0; j < h; ++j) {          raster.get(r,bArray);          for (int c=0; c < rasterWidth; ++c) {            bArray[c * 4 + k]=bbArray[c];          }          raster.set(r,1,bArray);          r++;        }      }    }  }  if (minimum == null) {    minimum=new double[]{0,0,0,1};  }  if (maximum == null) {    maximum=new double[]{255,255,255,255};  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS__NEGATED:    setNegated(NEGATED_EDEFAULT);  return;case RegularExpressionPackage.CHARACTER_CLASS__ELEMENTS:getElements().clear();return;}super.eUnset(featureID);}  }
class C{  public static DoublesUnion copyBuild(final DoublesSketch sketch){  return new HeapDoublesUnion(DoublesUtil.copy(sketch));}  }
class C{  public void removeAllTags(){  mChildViews.clear();  removeAllViews();  postInvalidate();}  }
class C{  protected EntityImportView buildFromJsonArray(JsonArray jsonArray,MetaClass metaClass){  EntityImportView resultView=new EntityImportView(metaClass.getJavaClass());  for (  JsonElement element : jsonArray.getAsJsonArray()) {    EntityImportView view=buildFromJsonObject(element.getAsJsonObject(),metaClass);    view.getProperties().stream().filter(null).forEach(null);  }  return resultView;}  }
class C{  List(A head,List<A> tail){  this.tail=tail;  this.head=head;}  }
class C{  protected void installNormalBorders(JComponent c){  Component[] components=c.getComponents();  for (  Component component : components) {    setBorderToNormal(component);  }}  }
class C{  public SPA(int epochs,PassiveAggressive.Mode mode){  setEpochs(epochs);  setMode(mode);}  }
class C{  @SneakyThrows public X509Certificate loadCert(String certLocation){  CertificateFactory cf=CertificateFactory.getInstance("X509");  Resource certRes=resourceLoader.getResource(certLocation);  X509Certificate cert=(X509Certificate)cf.generateCertificate(certRes.getInputStream());  return cert;}  }
class C{  public boolean onReceivedHttpAuthRequest(CordovaWebView view,ICordovaHttpAuthHandler handler,String host,String realm){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null && plugin.onReceivedHttpAuthRequest(app,handler,host,realm)) {      return true;    }  }  return false;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long start=getLong(stack);  return Wizard.getInstance().getAirings((Show)stack.pop(),start);}  }
class C{  public static double cos(double radians){  return Math.cos(radians);}  }
class C{  public GrainField(final String name,final List<String> tools){  super(name + "_field",name + " field","Harvest",RIPE,1,1);  this.tools=new LinkedList<String>(tools);  grainName=name;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  BaseActivity.instance=this;  super.onCreate(savedInstanceState);  Persistence.init();  Engine.wasOnPause=false;  setVolumeControlStream(AudioManager.STREAM_MUSIC);  setFullScreen();  setContentView(R.layout.activity_android);  mGLSurfaceView=(GameSurfaceView)findViewById(R.id.game_view);}  }
class C{  @Override public int hashCode(){  return subeffects.hashCode();}  }
class C{  @Override public boolean hasDelta(){  return isDirty;}  }
class C{  public boolean canPace(){  return false;}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public ResourceAppender(Layout layout,Resource res,Charset charset,boolean append,RetireListener listener) throws IOException {  this(layout,res,charset,append,false,60,DEFAULT_BUFFER_SIZE,listener);}  }
class C{  private void moveToStackTop(){  tempRemoveFromStack();  addToStackBefore(header.nextInStack);}  }
class C{  public static Map<String,Object> runPullEntitySync(DispatchContext dctx,Map<String,Object> context){  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String entitySyncId=(String)context.get("entitySyncId");  String remotePullAndReportEntitySyncDataName=(String)context.get("remotePullAndReportEntitySyncDataName");  Debug.logInfo("Running runPullEntitySync for entitySyncId=" + context.get("entitySyncId"),module);  boolean gotMoreData=true;  Timestamp startDate=null;  Long toCreateInserted=null;  Long toCreateUpdated=null;  Long toCreateNotUpdated=null;  Long toStoreInserted=null;  Long toStoreUpdated=null;  Long toStoreNotUpdated=null;  Long toRemoveDeleted=null;  Long toRemoveAlreadyDeleted=null;  while (gotMoreData) {    gotMoreData=false;    Map<String,Object> remoteCallContext=new HashMap<String,Object>();    remoteCallContext.put("entitySyncId",entitySyncId);    remoteCallContext.put("delegatorName",context.get("remoteDelegatorName"));    remoteCallContext.put("userLogin",context.get("userLogin"));    remoteCallContext.put("startDate",startDate);    remoteCallContext.put("toCreateInserted",toCreateInserted);    remoteCallContext.put("toCreateUpdated",toCreateUpdated);    remoteCallContext.put("toCreateNotUpdated",toCreateNotUpdated);    remoteCallContext.put("toStoreInserted",toStoreInserted);    remoteCallContext.put("toStoreUpdated",toStoreUpdated);    remoteCallContext.put("toStoreNotUpdated",toStoreNotUpdated);    remoteCallContext.put("toRemoveDeleted",toRemoveDeleted);    remoteCallContext.put("toRemoveAlreadyDeleted",toRemoveAlreadyDeleted);    try {      Map<String,Object> result=dispatcher.runSync(remotePullAndReportEntitySyncDataName,remoteCallContext);      if (ServiceUtil.isError(result)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingRemotePull",UtilMisc.toMap("remotePullAndReportEntitySyncDataName",remotePullAndReportEntitySyncDataName),locale),null,null,result);      }      startDate=(Timestamp)result.get("startDate");      try {        if (startDate != null && (!UtilValidate.isEmpty(result.get("valuesToCreate")) || !UtilValidate.isEmpty(result.get("valuesToStore")) || !UtilValidate.isEmpty(result.get("keysToRemove")))) {          gotMoreData=true;          List<GenericValue> valuesToCreate=checkList(result.get("valuesToCreate"),GenericValue.class);          if (valuesToCreate == null)           valuesToCreate=Collections.emptyList();          List<GenericValue> valuesToStore=checkList(result.get("valuesToStore"),GenericValue.class);          if (valuesToStore == null)           valuesToStore=Collections.emptyList();          List<GenericEntity> keysToRemove=checkList(result.get("keysToRemove"),GenericEntity.class);          if (keysToRemove == null)           keysToRemove=Collections.emptyList();          Map<String,Object> callLocalStoreContext=UtilMisc.toMap("entitySyncId",entitySyncId,"delegatorName",context.get("localDelegatorName"),"valuesToCreate",valuesToCreate,"valuesToStore",valuesToStore,"keysToRemove",keysToRemove);          callLocalStoreContext.put("userLogin",context.get("userLogin"));          Map<String,Object> storeResult=dispatcher.runSync("storeEntitySyncData",callLocalStoreContext);          if (ServiceUtil.isError(storeResult)) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingService",locale),null,null,storeResult);          }          toCreateInserted=(Long)storeResult.get("toCreateInserted");          toCreateUpdated=(Long)storeResult.get("toCreateUpdated");          toCreateNotUpdated=(Long)storeResult.get("toCreateNotUpdated");          toStoreInserted=(Long)storeResult.get("toStoreInserted");          toStoreUpdated=(Long)storeResult.get("toStoreUpdated");          toStoreNotUpdated=(Long)storeResult.get("toStoreNotUpdated");          toRemoveDeleted=(Long)storeResult.get("toRemoveDeleted");          toRemoveAlreadyDeleted=(Long)storeResult.get("toRemoveAlreadyDeleted");        }      } catch (      GenericServiceException e) {        Debug.logError(e,"Error calling service to store data locally: " + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingService",locale) + e.toString());      }    } catch (    GenericServiceException e) {      Debug.logError(e,"Exception calling remote pull and report EntitySync service with name: " + remotePullAndReportEntitySyncDataName + "; "+ e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingRemotePull",UtilMisc.toMap("remotePullAndReportEntitySyncDataName",remotePullAndReportEntitySyncDataName),locale) + e.toString());    }catch (    Throwable t) {      Debug.logError(t,"Error calling remote pull and report EntitySync service with name: " + remotePullAndReportEntitySyncDataName + "; "+ t.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCallingRemotePull",UtilMisc.toMap("remotePullAndReportEntitySyncDataName",remotePullAndReportEntitySyncDataName),locale) + t.toString());    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public Observable<PubSubData> makeSubscription(final String topic){  return makeSubscription(topic,SubscriptionFlags.Exact);}  }
class C{  private void parseStartTag(boolean xmldecl,boolean throwOnResolveFailure) throws IOException, XmlPullParserException {  if (!xmldecl) {    read('<');  }  name=readName();  attributeCount=0;  while (true) {    skip();    if (position >= limit && !fillBuffer(1)) {      checkRelaxed(UNEXPECTED_EOF);      return;    }    int c=buffer[position];    if (xmldecl) {      if (c == '?') {        position++;        read('>');        return;      }    } else {      if (c == '/') {        degenerated=true;        position++;        skip();        read('>');        break;      } else       if (c == '>') {        position++;        break;      }    }    String attrName=readName();    int i=(attributeCount++) * 4;    attributes=ensureCapacity(attributes,i + 4);    attributes[i]="";    attributes[i + 1]=null;    attributes[i + 2]=attrName;    skip();    if (position >= limit && !fillBuffer(1)) {      checkRelaxed(UNEXPECTED_EOF);      return;    }    if (buffer[position] == '=') {      position++;      skip();      if (position >= limit && !fillBuffer(1)) {        checkRelaxed(UNEXPECTED_EOF);        return;      }      char delimiter=buffer[position];      if (delimiter == '\'' || delimiter == '"') {        position++;      } else       if (relaxed) {        delimiter=' ';      } else {        throw new XmlPullParserException("attr value delimiter missing!",this,null);      }      attributes[i + 3]=readValue(delimiter,true,throwOnResolveFailure,ValueContext.ATTRIBUTE);      if (delimiter != ' ' && peekCharacter() == delimiter) {        position++;      }    } else     if (relaxed) {      attributes[i + 3]=attrName;    } else {      checkRelaxed("Attr.value missing f. " + attrName);      attributes[i + 3]=attrName;    }  }  int sp=depth++ * 4;  elementStack=ensureCapacity(elementStack,sp + 4);  elementStack[sp + 3]=name;  if (depth >= nspCounts.length) {    int[] bigger=new int[depth + 4];    System.arraycopy(nspCounts,0,bigger,0,nspCounts.length);    nspCounts=bigger;  }  nspCounts[depth]=nspCounts[depth - 1];  if (processNsp) {    adjustNsp();  } else {    namespace="";  }  if (defaultAttributes != null) {    Map<String,String> elementDefaultAttributes=defaultAttributes.get(name);    if (elementDefaultAttributes != null) {      for (      Map.Entry<String,String> entry : elementDefaultAttributes.entrySet()) {        if (getAttributeValue(null,entry.getKey()) != null) {          continue;        }        int i=(attributeCount++) * 4;        attributes=ensureCapacity(attributes,i + 4);        attributes[i]="";        attributes[i + 1]=null;        attributes[i + 2]=entry.getKey();        attributes[i + 3]=entry.getValue();      }    }  }  elementStack[sp]=namespace;  elementStack[sp + 1]=prefix;  elementStack[sp + 2]=name;}  }
class C{  public void save(File file) throws IOException {  PrintWriter writer=null;  try {    writer=new PrintWriter(new FileWriter(file));    if (M > 1) {      writer.print(M);      writer.print(" ");    }    writer.print(N);    writer.print(" ");    writer.println(K);    for (int i=0; i < M; i++) {      for (int j=0; j < N; j++) {        for (int k=0; k < K + 1; k++) {          writer.println(neighbors[i][j][k]);        }      }    }    for (int i=0; i < M; i++) {      for (int j=0; j < N; j++) {        for (int k=0; k < (1 << (K + 1)); k++) {          writer.println(function[i][j][k]);        }      }    }    writer.println("Optimum: ?");  }  finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  public MAttributeUse(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  private boolean definesEntity(Class<?> type){  if (type.getAnnotation(Entity.class) != null) {    return true;  }  if (type.getAnnotation(AbstractEntity.class) != null) {    return true;  }  if (type.getAnnotation(ExtendsEntity.class) != null) {    return true;  }  return false;}  }
class C{  public void applyRTL(boolean rtl){  setRTL(rtl);  int c=getComponentCount();  for (int iter=0; iter < c; iter++) {    Component current=getComponentAt(iter);    if (current instanceof Container) {      ((Container)current).applyRTL(rtl);    } else {      current.setRTL(rtl);    }  }}  }
class C{  public void registerDynamicRegionListener(DynamicRegionListener listener){synchronized (regionListenerLock) {    List oldListeners=regionListeners;    if (!oldListeners.contains(listener)) {      List newListeners=new ArrayList(oldListeners);      newListeners.add(listener);      regionListeners=newListeners;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.395 -0400",hash_original_method="7AB0364EC8006702EB1B26C5F8F029B6",hash_generated_method="9EAE88C9DAEFA184802765DF173D4EDB") private void initDiagnostics(){  Class clazz=this.getClass();  ClassLoader classLoader=getClassLoader(clazz);  String classLoaderName;  try {    if (classLoader == null) {      classLoaderName="BOOTLOADER";    } else {      classLoaderName=objectId(classLoader);    }  } catch (  SecurityException e) {    classLoaderName="UNKNOWN";  }  diagnosticPrefix="[LogFactoryImpl@" + System.identityHashCode(this) + " from "+ classLoaderName+ "] ";}  }
class C{  public int diff(Configuration delta){  int changed=0;  if (delta.fontScale > 0 && fontScale != delta.fontScale) {    changed|=ActivityInfo.CONFIG_FONT_SCALE;  }  if (delta.mcc != 0 && mcc != delta.mcc) {    changed|=ActivityInfo.CONFIG_MCC;  }  if (delta.mnc != 0 && mnc != delta.mnc) {    changed|=ActivityInfo.CONFIG_MNC;  }  if (delta.locale != null && (locale == null || !locale.equals(delta.locale))) {    changed|=ActivityInfo.CONFIG_LOCALE;    changed|=ActivityInfo.CONFIG_LAYOUT_DIRECTION;  }  if (delta.touchscreen != TOUCHSCREEN_UNDEFINED && touchscreen != delta.touchscreen) {    changed|=ActivityInfo.CONFIG_TOUCHSCREEN;  }  if (delta.keyboard != KEYBOARD_UNDEFINED && keyboard != delta.keyboard) {    changed|=ActivityInfo.CONFIG_KEYBOARD;  }  if (delta.keyboardHidden != KEYBOARDHIDDEN_UNDEFINED && keyboardHidden != delta.keyboardHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;  }  if (delta.hardKeyboardHidden != HARDKEYBOARDHIDDEN_UNDEFINED && hardKeyboardHidden != delta.hardKeyboardHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;  }  if (delta.navigation != NAVIGATION_UNDEFINED && navigation != delta.navigation) {    changed|=ActivityInfo.CONFIG_NAVIGATION;  }  if (delta.navigationHidden != NAVIGATIONHIDDEN_UNDEFINED && navigationHidden != delta.navigationHidden) {    changed|=ActivityInfo.CONFIG_KEYBOARD_HIDDEN;  }  if (delta.orientation != ORIENTATION_UNDEFINED && orientation != delta.orientation) {    changed|=ActivityInfo.CONFIG_ORIENTATION;  }  if (getScreenLayoutNoDirection(delta.screenLayout) != (SCREENLAYOUT_SIZE_UNDEFINED | SCREENLAYOUT_LONG_UNDEFINED) && getScreenLayoutNoDirection(screenLayout) != getScreenLayoutNoDirection(delta.screenLayout)) {    changed|=ActivityInfo.CONFIG_SCREEN_LAYOUT;  }  if (delta.uiMode != (UI_MODE_TYPE_UNDEFINED | UI_MODE_NIGHT_UNDEFINED) && uiMode != delta.uiMode) {    changed|=ActivityInfo.CONFIG_UI_MODE;  }  if (delta.screenWidthDp != SCREEN_WIDTH_DP_UNDEFINED && screenWidthDp != delta.screenWidthDp) {    changed|=ActivityInfo.CONFIG_SCREEN_SIZE;  }  if (delta.screenHeightDp != SCREEN_HEIGHT_DP_UNDEFINED && screenHeightDp != delta.screenHeightDp) {    changed|=ActivityInfo.CONFIG_SCREEN_SIZE;  }  if (delta.smallestScreenWidthDp != SMALLEST_SCREEN_WIDTH_DP_UNDEFINED && smallestScreenWidthDp != delta.smallestScreenWidthDp) {    changed|=ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE;  }  if (delta.densityDpi != DENSITY_DPI_UNDEFINED && densityDpi != delta.densityDpi) {    changed|=ActivityInfo.CONFIG_DENSITY;  }  if (delta.customTheme != null && (customTheme == null || !customTheme.equals(delta.customTheme))) {    changed|=ActivityInfo.CONFIG_THEME_RESOURCE;  }  return changed;}  }
class C{  public void removeFormato(Formato formato){  formatos.remove(formato);}  }
class C{  protected void drawCornerTextItems(Graphics2D g2,Rectangle2D area){  if (this.cornerTextItems.isEmpty()) {    return;  }  g2.setColor(Color.black);  double width=0.0;  double height=0.0;  for (Iterator it=this.cornerTextItems.iterator(); it.hasNext(); ) {    String msg=(String)it.next();    FontMetrics fm=g2.getFontMetrics();    Rectangle2D bounds=TextUtilities.getTextBounds(msg,g2,fm);    width=Math.max(width,bounds.getWidth());    height+=bounds.getHeight();  }  double xadj=ANNOTATION_MARGIN * 2.0;  double yadj=ANNOTATION_MARGIN;  width+=xadj;  height+=yadj;  double x=area.getMaxX() - width;  double y=area.getMaxY() - height;  g2.drawRect((int)x,(int)y,(int)width,(int)height);  x+=ANNOTATION_MARGIN;  for (Iterator it=this.cornerTextItems.iterator(); it.hasNext(); ) {    String msg=(String)it.next();    Rectangle2D bounds=TextUtilities.getTextBounds(msg,g2,g2.getFontMetrics());    y+=bounds.getHeight();    g2.drawString(msg,(int)x,(int)y);  }}  }
class C{  private void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredLines,double fitness){  if (coveredLines > maxCoveredLines) {    maxCoveredLines=coveredLines;    logger.info("(Lines) Best individual covers " + coveredLines + "/"+ lines+ " lines");    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredLines + "/"+ lines+ " lines");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocumentType02.class,args);}  }
class C{  public AggregateTranslator(final CharSequenceTranslator... translators){  this.translators=translators;}  }
class C{  public static String quoteJavaString(String s){  if (s == null) {    return "null";  }  return "\"" + javaEncode(s) + "\"";}  }
class C{  public <T>T fromByteArray(Class<T> clazz,byte[] bytes) throws DatabaseException {  PropertiesMap propertiesMap=getProperties(clazz);  ByteArrayInputStream in=new ByteArrayInputStream(bytes);  try {    T retObj=clazz.newInstance();    while (in.available() > 3) {      int index=in.read();      int high=in.read();      int low=in.read();      int len=(high << 8 | low);      byte[] value=new byte[len];      in.read(value,0,len);      if (index >= MAX_PROPERTIES) {        throw DatabaseException.fatals.deserializationFailedUnexpectedIndex(clazz,index,MAX_PROPERTIES);      }      PropertyDescriptor pd=propertiesMap.get(index);      if (pd == null) {        continue;      }      Class<?> type=pd.getPropertyType();      if (type == String.class) {        pd.getWriteMethod().invoke(retObj,new String(value));      } else       if (type == URI.class) {        URI uri=URI.create(new String(value));        pd.getWriteMethod().invoke(retObj,uri);      } else       if (type == long.class) {        pd.getWriteMethod().invoke(retObj,decodeVariantLong(value));      } else       if (type == boolean.class) {        pd.getWriteMethod().invoke(retObj,value[0] == (byte)1 ? true : false);      } else       if (type == byte[].class) {        pd.getWriteMethod().invoke(retObj,value);      } else {        throw DatabaseException.fatals.deserializationFailedUnsupportedType(clazz,pd.getName(),type);      }    }    return retObj;  } catch (  InstantiationException e) {    throw DatabaseException.fatals.deserializationFailed(clazz,e);  }catch (  IllegalAccessException e) {    throw DatabaseException.fatals.deserializationFailed(clazz,e);  }catch (  IllegalArgumentException e) {    throw DatabaseException.fatals.deserializationFailed(clazz,e);  }catch (  InvocationTargetException e) {    throw DatabaseException.fatals.deserializationFailed(clazz,e);  } finally {    try {      in.close();    } catch (    final IOException e) {    }  }}  }
class C{  public void testGetSpeedSetting(){  AbstractThrottle instance=new AbstractThrottleImpl();  float expResult=0.0F;  float result=instance.getSpeedSetting();  assertEquals(expResult,result,0.0);}  }
class C{  public static BitwiseOpExpression binaryOr(){  return new BitwiseOpExpression(BitWiseOpEnum.BOR);}  }
class C{  @Override protected void onDrawChart(Canvas canvas,ArrayList<ChartSet> data){}  }
class C{  public static int parse10BitAnalog(int msb,int lsb) throws IOException {  msb=msb & 0xff;  msb=(msb & 0x3) << 8;  lsb=lsb & 0xff;  return msb + lsb;}  }
class C{  private void writeVarInt(int v){  if (v == 0) {    writeByte(0x80);  } else {    int offset=myOffset;    boolean is_negative=(v < 0);    if (is_negative) {      v=-v;    }    if (v < (1 << (7 * 1 - 1))) {      if (--offset < 0) {        offset=growBuffer(offset);      }      if (is_negative)       v|=0x40;      myBuffer[offset]=(byte)(v | 0x80);    } else     if (v < (1 << (7 * 2 - 1))) {      if ((offset-=2) < 0) {        offset=growBuffer(offset);      }      if (is_negative)       v|=0x2000;      myBuffer[offset]=(byte)(v >>> (7 * 1));      myBuffer[offset + 1]=(byte)(v | 0x80);    } else     if (v < (1 << (7 * 3 - 1))) {      if ((offset-=3) < 0) {        offset=growBuffer(offset);      }      if (is_negative)       v|=0x100000;      myBuffer[offset]=(byte)(v >>> (7 * 2));      myBuffer[offset + 1]=(byte)((v >>> (7 * 1)) & 0x7f);      myBuffer[offset + 2]=(byte)(v | 0x80);    } else     if (v < (1 << (7 * 4 - 1))) {      if ((offset-=4) < 0) {        offset=growBuffer(offset);      }      if (is_negative)       v|=0x8000000;      myBuffer[offset]=(byte)(v >>> (7 * 3));      myBuffer[offset + 1]=(byte)((v >>> (7 * 2)) & 0x7f);      myBuffer[offset + 2]=(byte)((v >>> (7 * 1)) & 0x7f);      myBuffer[offset + 3]=(byte)(v | 0x80);    } else {      if ((offset-=5) < 0) {        offset=growBuffer(offset);      }      myBuffer[offset]=(byte)((v >>> (7 * 4)) & 0x7f);      if (is_negative) {        myBuffer[offset]|=0x40;      }      myBuffer[offset + 1]=(byte)((v >>> (7 * 3)) & 0x7f);      myBuffer[offset + 2]=(byte)((v >>> (7 * 2)) & 0x7f);      myBuffer[offset + 3]=(byte)((v >>> (7 * 1)) & 0x7f);      myBuffer[offset + 4]=(byte)(v | 0x80);    }    myOffset=offset;  }}  }
class C{  public void dispatchSelectionEvent(SelectionEvent e){  if (listeners != null) {    Iterator iter=listeners.iterator();switch (e.getID()) {case SelectionEvent.SELECTION_DONE:      while (iter.hasNext()) {        ((SelectionListener)iter.next()).selectionDone(e);      }    break;case SelectionEvent.SELECTION_CHANGED:  while (iter.hasNext()) {    ((SelectionListener)iter.next()).selectionChanged(e);  }break;case SelectionEvent.SELECTION_CLEARED:while (iter.hasNext()) {((SelectionListener)iter.next()).selectionCleared(e);}break;case SelectionEvent.SELECTION_STARTED:while (iter.hasNext()) {((SelectionListener)iter.next()).selectionStarted(e);}break;}}}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private long insertInternal(ContentValues values,boolean allowReplace){  mDb.beginTransactionNonExclusive();  try {    SQLiteStatement stmt=getStatement(allowReplace);    stmt.clearBindings();    if (DEBUG)     Log.v(TAG,"--- inserting in table " + mTableName);    for (    Map.Entry<String,Object> e : values.valueSet()) {      final String key=e.getKey();      int i=getColumnIndex(key);      DatabaseUtils.bindObjectToProgram(stmt,i,e.getValue());      if (DEBUG) {        Log.v(TAG,"binding " + e.getValue() + " to column "+ i+ " ("+ key+ ")");      }    }    long result=stmt.executeInsert();    mDb.setTransactionSuccessful();    return result;  } catch (  SQLException e) {    Log.e(TAG,"Error inserting " + values + " into table  "+ mTableName,e);    return -1;  } finally {    mDb.endTransaction();  }}  }
class C{  private void showAuthenticationError(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_authentication_error),getResources().getString(R.string.error_authentication_failed),getResources().getString(R.string.button_ok),null);}  }
class C{  private void writeAsyncMetaData(){  hub.writeAsyncHeader(hub.outWire(),csp,cid);}  }
class C{  public void copy(File in,File out) throws IOException {  InputStream is=null;  OutputStream os=null;  try {    is=new BufferedFileInputStream(in);    os=new BufferedFileOutputStream(out);  } catch (  IOException ioe) {    closeEL(is,os);    throw ioe;  }  copy(is,os,true,true);}  }
class C{  public static Script createOutputScript(ECKey key){  return new ScriptBuilder().data(key.getPubKey()).op(OP_CHECKSIG).build();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_11:    return ((InternalEList<?>)getAnonymous_complexAttribute_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.COMPLEX_ATTRIBUTE___ANONYMOUS_COMPLEX_ATTRIBUTE_21:  return ((InternalEList<?>)getAnonymous_complexAttribute_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean handleAuthChall(HeaderSet header) throws IOException {  if (mAuthenticator == null) {    return false;  }  byte[] challenge=ObexHelper.getTagValue((byte)0x00,header.mAuthChall);  byte[] option=ObexHelper.getTagValue((byte)0x01,header.mAuthChall);  byte[] description=ObexHelper.getTagValue((byte)0x02,header.mAuthChall);  String realm=null;  if (description != null) {    byte[] realmString=new byte[description.length - 1];    System.arraycopy(description,1,realmString,0,realmString.length);switch (description[0] & 0xFF) {case ObexHelper.OBEX_AUTH_REALM_CHARSET_ASCII:case ObexHelper.OBEX_AUTH_REALM_CHARSET_ISO_8859_1:      try {        realm=new String(realmString,"ISO8859_1");      } catch (      Exception e) {        throw new IOException("Unsupported Encoding Scheme");      }    break;case ObexHelper.OBEX_AUTH_REALM_CHARSET_UNICODE:  realm=ObexHelper.convertToUnicode(realmString,false);break;default :throw new IOException("Unsupported Encoding Scheme");}}boolean isUserIDRequired=false;boolean isFullAccess=true;if (option != null) {if ((option[0] & 0x01) != 0) {isUserIDRequired=true;}if ((option[0] & 0x02) != 0) {isFullAccess=false;}}PasswordAuthentication result=null;header.mAuthChall=null;try {result=mAuthenticator.onAuthenticationChallenge(realm,isUserIDRequired,isFullAccess);} catch (Exception e) {return false;}if (result == null) {return false;}byte[] password=result.getPassword();if (password == null) {return false;}byte[] userName=result.getUserName();if (userName != null) {header.mAuthResp=new byte[38 + userName.length];header.mAuthResp[36]=(byte)0x01;header.mAuthResp[37]=(byte)userName.length;System.arraycopy(userName,0,header.mAuthResp,38,userName.length);} else {header.mAuthResp=new byte[36];}byte[] digest=new byte[challenge.length + password.length + 1];System.arraycopy(challenge,0,digest,0,challenge.length);digest[challenge.length]=(byte)0x3A;System.arraycopy(password,0,digest,challenge.length + 1,password.length);header.mAuthResp[0]=(byte)0x00;header.mAuthResp[1]=(byte)0x10;System.arraycopy(ObexHelper.computeMd5Hash(digest),0,header.mAuthResp,2,16);header.mAuthResp[18]=(byte)0x02;header.mAuthResp[19]=(byte)0x10;System.arraycopy(challenge,0,header.mAuthResp,20,16);return true;}  }
class C{  public byte[] encode() throws InvalidKeyException {  if (encodedKey == null) {    try {      DerOutputStream out;      out=new DerOutputStream();      encode(out);      encodedKey=out.toByteArray();    } catch (    IOException e) {      throw new InvalidKeyException("IOException : " + e.getMessage());    }  }  return encodedKey.clone();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MultiplePiePlot)) {    return false;  }  MultiplePiePlot that=(MultiplePiePlot)obj;  if (this.dataExtractOrder != that.dataExtractOrder) {    return false;  }  if (this.limit != that.limit) {    return false;  }  if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) {    return false;  }  if (!PaintUtilities.equal(this.aggregatedItemsPaint,that.aggregatedItemsPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.pieChart,that.pieChart)) {    return false;  }  if (!ShapeUtilities.equal(this.legendItemShape,that.legendItemShape)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  return true;}  }
class C{  public DateTime toDateTimeAtCurrentTime(DateTimeZone zone){  zone=DateTimeUtils.getZone(zone);  Chronology chrono=getChronology().withZone(zone);  long instantMillis=DateTimeUtils.currentTimeMillis();  long resolved=chrono.set(this,instantMillis);  return new DateTime(resolved,chrono);}  }
class C{  public boolean replaceBlock(World world,int x,int y,int z,ItemStack stack){  int meta=getMeta(world,x,y,z,stack);  if (world.setBlock(x,y,z,_block,meta,3)) {    if (hasTag(stack) && _block.hasTileEntity(meta)) {      TileEntity tile=world.getTileEntity(x,y,z);      if (tile != null)       tile.readFromNBT(getTag(world,x,y,z,stack));    }    return true;  }  return false;}  }
class C{  public ContentIdentifier(byte[] value){  this(new DEROctetString(value));}  }
class C{  public List<FactoryDto> findFactory(final String factoryName,final String userId) throws ServerException {  String url=fromUri(baseUrl).path(FactoryService.class).path(FactoryService.class,"getFactoryByAttribute").build().toString();  List<FactoryDto> factories;  HttpJsonRequest httpJsonRequest=httpJsonRequestFactory.fromUrl(url).useGetMethod().addQueryParam("name",factoryName).addQueryParam("creator.userId",userId);  try {    HttpJsonResponse response=httpJsonRequest.request();    factories=response.asList(FactoryDto.class);  } catch (  IOException|ApiException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new ServerException(e.getLocalizedMessage());  }  return factories;}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public static void msgLong(Context context,String msg){  if (context != null && msg != null) {    Toast.makeText(context,msg.trim(),Toast.LENGTH_LONG).show();  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public int next(){  int result=_currentNode;  if (_nodeType >= DTM.NTYPES) {    if (_nodeType != getExpandedTypeID(_currentNode)) {      result=END;    }  } else   if (_nodeType != NULL) {    if (_nodeType != getNodeType(_currentNode)) {      result=END;    }  }  _currentNode=END;  return returnNode(result);}  }
class C{  public Object put(Object key,Object value){  processQueue();  Object rtn=hash.put(key,SoftValueRef.create(key,value,queue));  if (rtn != null)   rtn=((SoftReference)rtn).get();  return rtn;}  }
class C{  @Override public <X extends Exception>void visit(final QueryModelVisitor<X> visitor) throws X {  if (statement != null) {    statement.visit(visitor);  }  if (condition != null) {    condition.visit(visitor);  }}  }
class C{  @Override public boolean producesSortedKeys(PipelineOptions options) throws Exception {  return true;}  }
class C{  protected int insertionIndex(int val){  Object[] values=_values;  int[] set=_set;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (isFree(values,index)) {    return index;  }  if (isFull(values,index) && set[index] == val) {    return -index - 1;  }  int probe=1 + (hash % (length - 2));  int firstRemoved=isRemoved(values,index) ? index : -1;  do {    index-=probe;    if (index < 0) {      index+=length;    }    if (firstRemoved == -1 && isRemoved(values,index)) {      firstRemoved=index;    }  } while (isFull(values,index) && set[index] != val);  if (isRemoved(values,index)) {    while (!isFree(values,index) && (isRemoved(values,index) || set[index] != val)) {      index-=probe;      if (index < 0) {        index+=length;      }    }  }  if (isFull(values,index)) {    return -index - 1;  }  return firstRemoved == -1 ? index : firstRemoved;}  }
class C{  public static void clearHighlighters(final Editor editor){  final List<RangeHighlighter> hl=editor.getUserData(HIGHLIGHTERS_KEY);  if (hl != null) {    if (purgeInvalidHighlighters(editor,hl)) {      final HighlightManager mgr=HighlightManager.getInstance(editor.getProject());      for (Iterator<RangeHighlighter> iterator=hl.iterator(); iterator.hasNext(); ) {        RangeHighlighter highlighter=iterator.next();        mgr.removeSegmentHighlighter(editor,highlighter);        iterator.remove();      }    }  }}  }
class C{  public static double missingValue(){  return Double.NaN;}  }
class C{  public void bringToFront(Collection<Operator> movedOperators,Operator insertAfter){  this.operators.removeAll(movedOperators);  int index=this.operators.indexOf(insertAfter) + 1;  for (  Operator op : movedOperators) {    this.operators.add(index++,op);  }  updateExecutionOrder();  fireUpdate();}  }
class C{  public static ServerSocket createServerSocket(int port,boolean ssl){  try {    return createServerSocketTry(port,ssl);  } catch (  Exception e) {    return createServerSocketTry(port,ssl);  }}  }
class C{  public boolean isSetPutResponse(){  return this.putResponse != null;}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple15<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8,final WindowSpecification<T> specification9,final WindowSpecification<T> specification10,final WindowSpecification<T> specification11,final WindowSpecification<T> specification12,final WindowSpecification<T> specification13,final WindowSpecification<T> specification14,final WindowSpecification<T> specification15){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8,specification9,specification10,specification11,specification12,specification13,specification14,specification15));}  }
class C{  public static int[] clockTimeFromHrs(double ut){  int[] hms=new int[3];  hms[0]=(int)Math.floor(ut);  double remainderMins=60 * (ut - hms[0]);  hms[1]=(int)Math.floor(remainderMins);  hms[2]=(int)Math.floor(remainderMins - hms[1]);  return hms;}  }
class C{  public int waitFor() throws InterruptedException {  int r=process.waitFor();  if (input != null)   input.join();  if (output != null)   output.join();  if (error != null)   error.join();  process.destroy();  return r;}  }
class C{  public byte[] convertYUV420ImageToPackedNV21(ImageProxy img){  final List<ImageProxy.Plane> planeList=img.getPlanes();  ByteBuffer y_buffer=planeList.get(0).getBuffer();  ByteBuffer u_buffer=planeList.get(1).getBuffer();  ByteBuffer v_buffer=planeList.get(2).getBuffer();  byte[] dataCopy=new byte[y_buffer.capacity() + u_buffer.capacity() + v_buffer.capacity()];  return convertYUV420ImageToPackedNV21(img,dataCopy);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean hasInterestingMethod(ConstantPool cp,Collection<MethodDescriptor> methods){  for (  Constant c : cp.getConstantPool()) {    if (c instanceof ConstantMethodref || c instanceof ConstantInterfaceMethodref) {      ConstantCP desc=(ConstantCP)c;      ConstantNameAndType nameAndType=(ConstantNameAndType)cp.getConstant(desc.getNameAndTypeIndex());      String className=cp.getConstantString(desc.getClassIndex(),CONSTANT_Class);      String name=((ConstantUtf8)cp.getConstant(nameAndType.getNameIndex())).getBytes();      String signature=((ConstantUtf8)cp.getConstant(nameAndType.getSignatureIndex())).getBytes();      int hash=FieldOrMethodDescriptor.getNameSigHashCode(name,signature);      for (      MethodDescriptor method : methods) {        if (method.getNameSigHashCode() == hash && (method.getSlashedClassName().isEmpty() || method.getSlashedClassName().equals(className)) && method.getName().equals(name) && method.getSignature().equals(signature)) {          return true;        }      }    }  }  return false;}  }
class C{  private void sendSdesPacket() throws NetworkException {  try {    Vector<RtcpSdesPacket> repvec=makereports();    RtcpPacket packets[]=new RtcpPacket[repvec.size()];    repvec.copyInto(packets);    RtcpCompoundPacket cp=new RtcpCompoundPacket(packets);    int i=cp.calcLength();    cp.assemble(i,false);    transmit(cp);  } catch (  IOException e) {    throw new NetworkException("Failed to send a SDES packet!",e);  }}  }
class C{  protected ForeignKeyConstraint buildForeignKeyConstraint(List<String> fkFieldNames,List<String> pkFieldNames,TableDefinition targetTable,DatabasePlatform platform){  assert fkFieldNames.size() > 0 && fkFieldNames.size() == pkFieldNames.size();  ForeignKeyConstraint fkConstraint=new ForeignKeyConstraint();  for (int i=0; i < fkFieldNames.size(); i++) {    fkConstraint.getSourceFields().add(fkFieldNames.get(i));    fkConstraint.getTargetFields().add(pkFieldNames.get(i));  }  fkConstraint.setTargetTable(targetTable.getFullName());  String fkFieldName=fkFieldNames.get(0);  String name=buildForeignKeyConstraintName(this.getName(),fkFieldName,platform.getMaxForeignKeyNameSize(),platform);  fkConstraint.setName(name);  return fkConstraint;}  }
class C{  public static IntBuffer makeIntBuffer(int[] array){  final int integerSize=Integer.SIZE / 8;  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(array.length * integerSize);  byteBuffer.order(ByteOrder.nativeOrder());  IntBuffer intBuffer=byteBuffer.asIntBuffer();  intBuffer.put(array);  intBuffer.position(0);  return intBuffer;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  protected void maybeCopyPrimaryAnnotations(final AnnotatedTypeMirror source,final AnnotatedTypeMirror dest){  if (copyAnnotations) {    dest.addAnnotations(source.getAnnotationsField());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isAfter(ReadableInterval interval){  long endMillis;  if (interval == null) {    endMillis=DateTimeUtils.currentTimeMillis();  } else {    endMillis=interval.getEndMillis();  }  return (getStartMillis() >= endMillis);}  }
class C{  public BatchClassifierEvent(Object source,Classifier scheme,DataSetEvent trsI,DataSetEvent tstI,int setNum,int maxSetNum){  super(source);  m_classifier=scheme;  m_testSet=tstI;  m_trainSet=trsI;  m_setNumber=setNum;  m_maxSetNumber=maxSetNum;}  }
class C{  public static void main(String[] args){  int[][] matrix=new int[4][4];  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[i].length; j++) {      matrix[i][j]=(int)(Math.random() * 2);    }  }  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[i].length; j++) {      System.out.print(matrix[i][j]);    }    System.out.println();  }  System.out.println("The largest row index: " + largestRow(matrix));  System.out.println("The largest row column: " + largestColumn(matrix));}  }
class C{  public boolean isInBufferActive(int hashCode){  return inStream != null && (hashCode == -1 || hashCode == inHashCode);}  }
class C{  public Command addCommandToLeftBar(String name,Image icon,final ActionListener ev){  Command cmd=Command.create(name,icon,ev);  addCommandToLeftBar(cmd);  return cmd;}  }
class C{  public static MethodInvocationStream create(String className,String methodName){  return new MethodInvocationStream(className,methodName,null);}  }
class C{  public BadPositionCategoryException(String message){  super(message);}  }
class C{  public static String sayNumber(StringBuffer appendTo,double number) throws IllegalArgumentException {  if (number == Double.MIN_VALUE) {    throw new IllegalArgumentException("Out of range");  }  if (number < 0) {    appendTo.append("Minus ");  }  double abs=Math.abs(number);  if (abs < POWER_THREE) {    saySimpleNumber(appendTo,(int)abs);  } else   if (abs < 2000) {    int thousand=(int)(abs % POWER_THREE);    appendTo.append("Seribu ");    saySimpleNumber(appendTo,thousand);  } else   if (abs < POWER_SIX) {    int thousand=(int)(abs % POWER_SIX / POWER_THREE);    saySimpleNumber(appendTo,thousand);    appendTo.append(" Ribu");    double remainder=abs - thousand * POWER_THREE;    if (remainder > 0) {      appendTo.append(' ');      sayNumber(appendTo,remainder);    }  } else   if (abs < POWER_NINE) {    int million=(int)(abs % POWER_NINE / POWER_SIX);    saySimpleNumber(appendTo,million);    appendTo.append(" Juta");    double remainder=abs - million * POWER_SIX;    if (remainder > 0) {      appendTo.append(' ');      sayNumber(appendTo,remainder);    }  } else   if (abs < POWER_TWELVE) {    int billion=(int)(abs % POWER_TWELVE / POWER_NINE);    saySimpleNumber(appendTo,billion);    appendTo.append(" Milyar");    double remainder=abs - billion * POWER_NINE;    if (remainder > 0) {      appendTo.append(' ');      sayNumber(appendTo,remainder);    }  } else   if (abs < POWER_FIFTEEN) {    int trillion=(int)(abs % POWER_FIFTEEN / POWER_TWELVE);    saySimpleNumber(appendTo,trillion);    appendTo.append(" Trilyun");    double remainder=abs - trillion * POWER_TWELVE;    if (remainder > 0) {      appendTo.append(' ');      sayNumber(appendTo,remainder);    }  } else {    appendTo.append("Lebih Dari Seribu Triliun");  }  return appendTo.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int calcColumnWidth(int col){  return calcColumnWidth(getJTable(),col);}  }
class C{  boolean isSubrange(){  return max < Integer.MAX_VALUE && ((long)max - (long)min + 1) <= Integer.MAX_VALUE;}  }
class C{  public DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat,JFormattedTextField.AbstractFormatter displayFormat,JFormattedTextField.AbstractFormatter editFormat){  this(defaultFormat,displayFormat,editFormat,null);}  }
class C{  public Intent replaceExtras(Intent src){  mExtras=src.mExtras != null ? new Bundle(src.mExtras) : null;  return this;}  }
class C{  public boolean isInDownload(int lat,int lon){  for (  BoundingBox bb : new ArrayList<BoundingBox>(currentStorage.getBoundingBoxes())) {    if (bb.isIn(lat,lon))     return true;  }  return false;}  }
class C{  private Cache createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  Cache cache=null;  cache=CacheFactory.create(ds);  if (cache == null) {    throw new Exception("CacheFactory.create() returned null ");  }  return cache;}  }
class C{  public static void extract(int position,byte[] h264Packet,NalUnitHeader header){  if (h264Packet == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid H264 packet");  }  if (header == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid header packet");  }  byte headerByte=h264Packet[position];  header.forbiddenZeroBit=((headerByte & 0x80) >> 7) != 0;  header.nalRefId=((headerByte & 0x60) >> 5);  int nalUnitType=(headerByte & 0x1f);  header.decodeNalUnitType=NalUnitType.parse(nalUnitType);}  }
class C{  public void stop(){  log.debug("Shutting down embedded Kafka broker at {} (with ZK ensemble at {}) ...",brokerList(),zookeeperConnect());  kafka.shutdown();  kafka.awaitShutdown();  log.debug("Removing temp folder {} with logs.dir at {} ...",tmpFolder,logDir);  tmpFolder.delete();  log.debug("Shutdown of embedded Kafka broker at {} completed (with ZK ensemble at {}) ...",brokerList(),zookeeperConnect());}  }
class C{  protected NodeResult compareText(final XNode xControl,final XNode xTest){  Differences differences=new Differences();  Text control=(Text)xControl.getNode();  Text test=(Text)xTest.getNode();  NodeResult nodeResult=new NodeResult(xControl,xTest,differences);  if (!XMLUtil.nodesEqual(control,test,isIgnoringWhitespace())) {    if (DEBUG) {      System.out.println("===> Compare Text is ignoring whitespace " + isIgnoringWhitespace());      System.out.println("=====> Text nodes Control and test ");      XMLUtil.printNodeBasics(control);      XMLUtil.printNodeBasics(test);    }    if (!_config.isCustomDifference()) {      differences.add("Different Text Node: Current Node " + xTest.getXPath() + " --> Golden Node "+ xControl.getXPath());    } else {      Difference diff=new Difference(DifferenceConstants.TEXT_VALUE,xControl,xTest);      differences.add(diff);    }  } else {    nodeResult.setIfExactMatch(true);  }  return nodeResult;}  }
class C{  void onUp(){  if (mFlingRunnable.mScroller.isFinished()) {    scrollIntoSlots();  }  dispatchUnpress();}  }
class C{  public ComponentManager(Collection<Sequence> generalSeeds){  Set<Sequence> seedSet=new LinkedHashSet<>(generalSeeds.size());  seedSet.addAll(generalSeeds);  this.gralSeeds=Collections.unmodifiableSet(seedSet);  gralComponents=new SequenceCollection(seedSet);}  }
class C{  public Map.Entry<K,V> removeLRUEntry(){  if (isEmpty())   return null;  Iterator<Map.Entry<K,V>> i=entrySet().iterator();  Map.Entry<K,V> value=i.next();  i.remove();  return value;}  }
class C{  public static void showToast(String msg){  showToast(msg,DEFAULT_TIME);}  }
class C{  public boolean warmup(long flags){  try {    return mService.warmup(flags);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public void addCaretListener(CaretListener listener){  listenerList.add(CaretListener.class,listener);}  }
class C{  public CGraphModel(final CGraphWindow parent,final IDatabase database,final IViewContainer viewContainer,final ZyGraph graph){  m_parent=Preconditions.checkNotNull(parent,"IE01610: Parent argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01611: Database argument can not be null");  m_viewContainer=Preconditions.checkNotNull(viewContainer,"IE01612: View container argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01613: Graph argument can not be null");  m_history=new CSelectionHistory(m_graph,MAX_UNDO_LEVEL);  m_view2d=new View2D(database,viewContainer,graph,PluginInterface.instance());  m_graphFrame=new GraphFrame(new GraphWindow(parent),m_view2d,viewContainer.getDebuggerProvider());  m_proximityUpdater=new CDefaultProximityUpdater(parent,m_graph);  m_graph.addListener(m_proximityUpdater);}  }
class C{  protected void update(){  String html;  html=m_Processor.markdown(getText());  try {    m_PanePreview.setText("<html>" + html + "</html>");    m_PanePreview.setCaretPosition(0);  } catch (  Exception e) {    System.err.println("Failed to update preview!");    e.printStackTrace();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Permissions.hasPermission(Permissions.PERMISSION_CONVERSION,stack.getUIMgr()))   Ministry.getInstance().clearCompletedTranscodes();  return null;}  }
class C{  @Override public IChatMessage sendMessage(String message) throws RemoteException {  if (TextUtils.isEmpty(message)) {    throw new ServerApiIllegalArgumentException("message must not be null or empty!");  }  int messageLength=message.length();  int maxMessageLength=mRcsSettings.getMaxChatMessageLength();  if (messageLength > maxMessageLength) {    throw new ServerApiIllegalArgumentException("chat message length: " + messageLength + " exeeds max chat message length: "+ maxMessageLength+ "!");  }  if (sLogger.isActivated()) {    sLogger.debug("Send text message.");  }  try {    mImService.removeOneToOneChatComposingStatus(mContact);    long timestamp=System.currentTimeMillis();    final ChatMessage msg=ChatUtils.createTextMessage(mContact,message,timestamp,timestamp);    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),message,msg.getMimeType(),mContact.toString(),Direction.OUTGOING);    addOutgoingChatMessage(msg,Status.QUEUED);    mImService.tryToDequeueOneToOneChatMessages(mContact);    return new ChatMessageImpl(persistedStorage);  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public VelocityHelper(){  Velocity.setProperty(RuntimeConstants.RUNTIME_REFERENCES_STRICT,true);  Velocity.init();}  }
class C{  private void fixStatusBarSpacing(View view){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    DetailActivity activity=(DetailActivity)getActivity();    if (activity.getLayoutId() == R.layout.activity_giveaway_detail) {      view.setPadding(0,getResources().getDimensionPixelSize(R.dimen.status_bar_height),0,0);    }  }}  }
class C{  public synchronized THLEvent next(boolean block) throws ReplicatorException, InterruptedException {  assertNotDone();  if (cursor == null) {    throw new THLException("Must seek before attempting to read next event");  }  if (pendingEvent.size() > 0) {    THLEvent event=pendingEvent.remove();    return event;  }  LogFile data=cursor.getLogFile();  if (logger.isDebugEnabled()) {    logger.debug("Using log file " + data.getFile().getName() + " - reading event");  }  int readTimeoutMillis=0;  if (block)   readTimeoutMillis=timeoutMillis;  THLEvent event=null;  while (event == null) {    try {      LogRecord logRecord=data.readRecord(readTimeoutMillis);      if (logRecord.isEmpty()) {        return null;      }      byte[] bytes=logRecord.getData();      byte recordType=bytes[0];      if (recordType == LogRecord.EVENT_REPL) {        event=deserialize(logRecord);        if (event.getSeqno() < this.pendingSeqno) {          event=null;          continue;        } else {          break;        }      } else       if (recordType == LogRecord.EVENT_ROTATE) {        if (logger.isDebugEnabled())         logger.debug("Found a rotate event: file=" + data.getFile().getName() + " offset="+ logRecord.getOffset());        if (!cursor.isRotateNext())         return null;        LogEventRotateReader rotateReader=new LogEventRotateReader(logRecord,doChecksum);        String newFileName=diskLog.getDataFileName(rotateReader.getIndex());        cursor.release();        int rotationTimeout=logRotateMillis;        while (rotationTimeout > 0) {          data=diskLog.getLogFileForReading(newFileName);          if (data != null)           break;          if (data == null && !block) {            return null;          }          long startSleepMillis=System.currentTimeMillis();          Thread.sleep(50);          long sleepMillis=System.currentTimeMillis() - startSleepMillis;          rotationTimeout-=sleepMillis;          if (rotationTimeout <= 0)           throw new LogTimeoutException("Read timed out while waiting for rotated log file; " + "this may indicate log corruption: missing file=" + newFileName);        }        cursor=new LogCursor(data,-1);        cursor.setRotateNext(true);      } else {        throw new THLException("Unable to extract a valid record type; log appears to be corrupted: file=" + data.getFile().getName() + " offset="+ logRecord.getOffset()+ " record type="+ recordType);      }    } catch (    IOException e) {      throw new THLException("Failed to extract event from log",e);    }  }  if (pendingSeqno != UNINITIALIZED) {    if (event.getSeqno() != pendingSeqno)     throw new LogPositionException("Log seek failure: expected seqno=" + pendingSeqno + " found seqno="+ event.getSeqno());    pendingSeqno=UNINITIALIZED;  }  return event;}  }
class C{  public FixedPartitionAttributesImpl(){}  }
class C{  public static boolean isNCNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  DTMIterator nodes=m_arg0.asIterator(xctxt,xctxt.getCurrentNode());  double sum=0.0;  int pos;  while (DTM.NULL != (pos=nodes.nextNode())) {    DTM dtm=nodes.getDTM(pos);    XMLString s=dtm.getStringValue(pos);    if (null != s)     sum+=s.toDouble();  }  nodes.detach();  return new XNumber(sum);}  }
class C{  public int minDepth(TreeNode root){  if (root == null)   return 0;  int left=minDepth(root.left);  int right=minDepth(root.right);  if (left == 0)   return right + 1;  if (right == 0)   return left + 1;  return Math.min(left,right) + 1;}  }
class C{  public select addElement(String[] element){  option[] options=new option().addElement(element);  addElement(options);  return (this);}  }
class C{  public int addFile(File file){  if (file == null) {    return DataCloudTags.FILE_ADD_ERROR_EMPTY;  }  if (contains(file.getName())) {    return DataCloudTags.FILE_ADD_ERROR_EXIST_READ_ONLY;  }  if (getStorageList().size() <= 0) {    return DataCloudTags.FILE_ADD_ERROR_STORAGE_FULL;  }  Storage tempStorage=null;  int msg=DataCloudTags.FILE_ADD_ERROR_STORAGE_FULL;  for (int i=0; i < getStorageList().size(); i++) {    tempStorage=getStorageList().get(i);    if (tempStorage.getAvailableSpace() >= file.getSize()) {      tempStorage.addFile(file);      msg=DataCloudTags.FILE_ADD_SUCCESSFUL;      break;    }  }  return msg;}  }
class C{  public void createRoom(KurentoClientSessionInfo kcSessionInfo) throws RoomException {  String roomName=kcSessionInfo.getRoomName();  Room room=rooms.get(kcSessionInfo);  if (room != null) {    throw new RoomException(Code.ROOM_CANNOT_BE_CREATED_ERROR_CODE,"Room '" + roomName + "' already exists");  }  KurentoClient kurentoClient=kcProvider.getKurentoClient(kcSessionInfo);  room=new Room(roomName,kurentoClient,roomHandler,kcProvider.destroyWhenUnused());  Room oldRoom=rooms.putIfAbsent(roomName,room);  if (oldRoom != null) {    log.warn("Room '{}' has just been created by another thread",roomName);    return;  }  String kcName="[NAME NOT AVAILABLE]";  if (kurentoClient.getServerManager() != null) {    kcName=kurentoClient.getServerManager().getName();  }  log.warn("No room '{}' exists yet. Created one " + "using KurentoClient '{}'.",roomName,kcName);}  }
class C{  public static boolean isRunningInSingleSeqMode(){  if (mode.equals("singleseq")) {    return true;  }  return false;}  }
class C{  public static <T extends DataObject>T findByProperty(Collection<T> col,String property,Object value){  if (col != null && property != null) {    Object val=null;    for (    T t : col) {      val=getPropertyValue(t.getClass(),t,property);      if ((val == value) || (val != null && val.equals(value))) {        return t;      }    }  }  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void removeMember(DistributedMember member,boolean crashed){  RemoveMemberTask removeTask=new RemoveMemberTask(member,crashed);  submitTask(removeTask);}  }
class C{  private void generateGetterMethod(final IVariableBinding field,final ListRewrite rewrite) throws CoreException, OperationCanceledException {  final ITypeBinding type=field.getDeclaringClass();  final String name=GetterSetterUtil.getGetterName(field,null);  final MethodDeclaration existing=GetterSetterUtil.findMethod(name,EMPTY_STRINGS,false,typeDeclaration);  if (existing == null || !querySkipExistingMethods(existing)) {    BodyDeclaration sibling=null;    int ins=0;    if (existing != null) {      sibling=findNextSibling(existing);      removeExistingAccessor(existing,rewrite);      ins=sibling.getStartPosition();    } else     ins=insertPos;    ASTNode insertion=StubUtility2.getNodeToInsertBefore(rewrite,ins);    addNewAccessor(type,field,GetterSetterUtil.getGetterStub(field,name,fSettings.createComments,fVisibility | (field.getModifiers() & Flags.AccStatic)),rewrite,insertion);  }}  }
class C{  protected void allocateInputs(){  NeuralConnection[] temp1=new NeuralConnection[m_inputList.length + 15];  int[] temp2=new int[m_inputNums.length + 15];  double[] temp4=new double[m_weights.length + 15];  double[] temp5=new double[m_changeInWeights.length + 15];  double[] temp6=new double[m_bestWeights.length + 15];  temp4[0]=m_weights[0];  temp5[0]=m_changeInWeights[0];  temp6[0]=m_bestWeights[0];  for (int noa=0; noa < m_numInputs; noa++) {    temp1[noa]=m_inputList[noa];    temp2[noa]=m_inputNums[noa];    temp4[noa + 1]=m_weights[noa + 1];    temp5[noa + 1]=m_changeInWeights[noa + 1];    temp6[noa + 1]=m_bestWeights[noa + 1];  }  m_inputList=temp1;  m_inputNums=temp2;  m_weights=temp4;  m_changeInWeights=temp5;  m_bestWeights=temp6;}  }
class C{  public static void ensureOSXCompatibleFolder(){  File nnnAAAAA=new File(Environment.getExternalStorageDirectory().toString() + "/DCIM/100ANDRO");  if ((!nnnAAAAA.exists()) && (!nnnAAAAA.mkdir())) {    Log.e(TAG,"create NNNAAAAA file: " + nnnAAAAA.getPath() + " failed");  }}  }
class C{  public String status(){  return mStatus;}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  public synchronized void putStylesheet(Object key,Stylesheet sheet){  _cache.put(key,sheet);}  }
class C{  public void testExecutionFinished(){}  }
class C{  private void expandAllCatNodes(boolean expand){  DefaultMutableTreeNode node=(DefaultMutableTreeNode)tree.getLastSelectedPathComponent();  JTree catTree=(JTree)((TreeCategory)node.getUserObject()).getCatComponent(this);  if (expand) {    for (int i=0; i < catTree.getRowCount(); i++) {      catTree.expandRow(i);    }  } else {    for (int i=0; i < catTree.getRowCount(); i++) {      catTree.collapseRow(i);    }  }}  }
class C{  public static Coordinate[] toCoordinateArray(Collection coordList){  return (Coordinate[])coordList.toArray(coordArrayType);}  }
class C{  public TriangleMesh(String name){  this(name,DEFAULT_NUM_VERTICES,DEFAULT_NUM_FACES);}  }
class C{  public static StatementSpecRaw map(EPStatementObjectModel sodaStatement,EngineImportService engineImportService,VariableService variableService,ConfigurationInformation configuration,SchedulingService schedulingService,String engineURI,PatternNodeFactory patternNodeFactory,NamedWindowMgmtService namedWindowMgmtService,ContextManagementService contextManagementService,ExprDeclaredService exprDeclaredService,TableService tableService){  com.espertech.esper.core.context.util.ContextDescriptor contextDescriptor=null;  if (sodaStatement.getContextName() != null) {    contextDescriptor=contextManagementService.getContextDescriptor(sodaStatement.getContextName());  }  StatementSpecMapContext mapContext=new StatementSpecMapContext(engineImportService,variableService,configuration,schedulingService,engineURI,patternNodeFactory,namedWindowMgmtService,contextManagementService,exprDeclaredService,contextDescriptor,tableService);  StatementSpecRaw raw=map(sodaStatement,mapContext);  if (mapContext.isHasVariables()) {    raw.setHasVariables(true);  }  raw.setReferencedVariables(mapContext.getVariableNames());  raw.setTableExpressions(mapContext.getTableExpressions());  return raw;}  }
class C{  void addTransactionsDependingOn(Set<Transaction> txSet,Set<Transaction> txPool){  Map<Sha256Hash,Transaction> txQueue=new LinkedHashMap<Sha256Hash,Transaction>();  for (  Transaction tx : txSet) {    txQueue.put(tx.getHash(),tx);  }  while (!txQueue.isEmpty()) {    Transaction tx=txQueue.remove(txQueue.keySet().iterator().next());    for (    Transaction anotherTx : txPool) {      if (anotherTx.equals(tx))       continue;      for (      TransactionInput input : anotherTx.getInputs()) {        if (input.getOutpoint().getHash().equals(tx.getHash())) {          if (txQueue.get(anotherTx.getHash()) == null) {            txQueue.put(anotherTx.getHash(),anotherTx);            txSet.add(anotherTx);          }        }      }    }  }}  }
class C{  public static short deserializeShort(byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  short val=(short)(((((int)buffer[0 + offsetInt]) & 0xFF) << 8) | (((int)buffer[1 + offsetInt]) & 0xFF));  offset.add(Type.SHORT.getByteSize());  return val;}  }
class C{  public Version(String minVersion,String maxVersion){  this((minVersion == null) ? null : new VersionNumber(minVersion),(maxVersion == null) ? null : new VersionNumber(maxVersion));}  }
class C{  public boolean isObject(){  return typeString.startsWith(OBJECT);}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public boolean intersects(terminal_set other) throws internal_error {  not_null(other);  BitSet copy=(BitSet)other._elements.clone();  copy.xor(this._elements);  return !copy.equals(other._elements);}  }
class C{  public DataSet simulateData(int sampleSize,boolean latentDataSaved,int[] tiers){  if (getBayesPm().getDag().isTimeLagModel()) {    return simulateTimeSeries(sampleSize);  }  return simulateDataHelper(sampleSize,latentDataSaved,tiers);}  }
class C{  public static PrivateKey parseBytesWIF(byte[] store) throws HyperLedgerException {  if (store.length == 37) {    checkChecksum(store);    byte[] key=new byte[store.length - 5];    System.arraycopy(store,1,key,0,store.length - 5);    return new PrivateKey(key,false);  } else   if (store.length == 38) {    checkChecksum(store);    byte[] key=new byte[store.length - 6];    System.arraycopy(store,1,key,0,store.length - 6);    return new PrivateKey(key,true);  }  throw new HyperLedgerException("Invalid key length");}  }
class C{  public long countAuditLogs(List<String> operationIds,long startTime,long endTime){  TypedQuery<Number> query;  if (operationIds == null || operationIds.isEmpty()) {    query=em.createNamedQuery("AuditLog.countByDateRange",Number.class);  } else {    query=em.createNamedQuery("AuditLog.countByOperationAndDateRange",Number.class);    query.setParameter("operationIds",operationIds);  }  query.setParameter("startTime",Long.valueOf(startTime));  query.setParameter("endTime",Long.valueOf(endTime));  return query.getSingleResult().longValue();}  }
class C{  public void unregisterVASACertificate(com.emc.storageos.vasa.VasaServiceStub.UnregisterVASACertificate unregisterVASACertificate43) throws java.rmi.RemoteException, com.emc.storageos.vasa.InvalidCertificate, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[21].getName());    _operationClient.getOptions().setAction("urn:unregisterVASACertificate");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    org.apache.axiom.soap.SOAPEnvelope env=null;    _messageContext=new org.apache.axis2.context.MessageContext();    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),unregisterVASACertificate43,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","unregisterVASACertificate")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.InvalidCertificate) {            throw (com.emc.storageos.vasa.InvalidCertificate)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }  return;}  }
class C{  protected void optionWindow(ActionEvent e){  if (optionsFrame == null) {    optionsFrame=new JmriJFrame(Bundle.getMessage("OptionsTitle"),false,true);    optionsPane=optionsFrame.getContentPane();    optionsPane.setLayout(new BoxLayout(optionsFrame.getContentPane(),BoxLayout.Y_AXIS));    clearEntry.setSelectedIndex(nxPairs.getClearDownOption());    JPanel p1=new JPanel();    clearEntry.setToolTipText("set the action for when the NX buttons are reselected");    p1.add(new JLabel(Bundle.getMessage("Reselection")));    p1.add(clearEntry);    optionsPane.add(p1);    JPanel p2=new JPanel();    initializeColorCombo(settingTrackColorBox);    setColorCombo(settingTrackColorBox,nxPairs.getSettingRouteColor());    ActionListener settingTrackColorListener=null;    settingTrackColorBox.addActionListener(settingTrackColorListener);    p2.add(new JLabel(Bundle.getMessage("RouteSetColour")));    p2.add(settingTrackColorBox);    optionsPane.add(p2);    durationSetting.setText("" + nxPairs.getSettingTimer());    if (nxPairs.useDifferentColorWhenSetting()) {      durationSetting.setEnabled(true);    } else {      durationSetting.setEnabled(false);    }    JPanel p3=new JPanel();    p3.add(new JLabel(Bundle.getMessage("SettingDuration")));    p3.add(durationSetting);    optionsPane.add(p3);    JPanel p4=new JPanel();    p4.add(dispatcherUse);    dispatcherUse.setSelected(nxPairs.getDispatcherIntegration());    optionsPane.add(p4);    JButton ok=new JButton(Bundle.getMessage("ButtonOK"));    optionsPane.add(ok);    ok.addActionListener(null);  }  optionsFrame.pack();  optionsFrame.setVisible(true);}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  final void cleanUpActivityLocked(ActivityRecord r,boolean cleanServices,boolean setState){  if (mResumedActivity == r) {    mResumedActivity=null;  }  if (mService.mFocusedActivity == r) {    mService.mFocusedActivity=null;  }  r.configDestroy=false;  r.frozenBeforeDestroy=false;  if (setState) {    if (DEBUG_STATES)     Slog.v(TAG,"Moving to DESTROYED: " + r + " (cleaning up)");    r.state=ActivityState.DESTROYED;    if (DEBUG_APP)     Slog.v(TAG,"Clearing app during cleanUp for activity " + r);    r.app=null;  }  mFinishingActivities.remove(r);  mWaitingVisibleActivities.remove(r);  if (r.finishing && r.pendingResults != null) {    for (    WeakReference<PendingIntentRecord> apr : r.pendingResults) {      PendingIntentRecord rec=apr.get();      if (rec != null) {        mService.cancelIntentSenderLocked(rec,false);      }    }    r.pendingResults=null;  }  if (cleanServices) {    cleanUpActivityServicesLocked(r);  }  if (mService.mPendingThumbnails.size() > 0) {    mService.mCancelledThumbnails.add(r);  }  removeTimeoutsForActivityLocked(r);}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  put(key,stream,name,contentType,autoCloseInputStreams);}  }
class C{  public static void register(){  CommandCenter.register("stop",new StopAction());}  }
class C{  @Override public void clear(){  m_Root.removeAllChildren();  m_RecalcHashCode=true;}  }
class C{  public TimeGrid(@Time @NonNegative final Array mandatoryTimes){  if (System.getProperty("EXPERIMENTAL") == null)   throw new UnsupportedOperationException("This constructor is not available yet");  this.mandatoryTimes=mandatoryTimes;  this.mandatoryTimes.sort();  QL.require(mandatoryTimes.first() < 0.0,"negative times not allowed");  final List<Double> unique=new ArrayList<Double>();  double prev=this.mandatoryTimes.get(0);  unique.add(prev);  for (int i=1; i < this.mandatoryTimes.size(); i++) {    final double curr=this.mandatoryTimes.get(i);    if (!Closeness.isCloseEnough(prev,curr)) {      unique.add(curr);    }    prev=curr;  }  this.times=new Array(unique.size());  int i=0;  for (  final double d : Iterables.unmodifiableIterable(unique.iterator())) {    this.times.set(i,d);    i++;  }  this.dt=this.times.adjacentDifference();}  }
class C{  public void forEachSrcAtop(Allocation ain,Allocation aout){  blend(9,ain,aout);}  }
class C{  private void readFromProperties(final Properties props,final ManagedWindow defaults){  readFromProperties(props,defaults.isMinimized(),defaults.getX(),defaults.getY(),defaults.isVisible());}  }
class C{  public Operation build(){  Extent extent=clipboard;  if (!transform.isIdentity()) {    extent=new BlockTransformExtent(extent,transform,targetWorldData.getBlockRegistry());  }  ForwardExtentCopy copy=new ForwardExtentCopy(extent,clipboard.getRegion(),clipboard.getOrigin(),targetExtent,to);  copy.setTransform(transform);  if (ignoreAirBlocks) {    copy.setSourceMask(new ExistingBlockMask(clipboard));  }  return copy;}  }
class C{  @Override public void onDownloadStateChanged(int newState){  setState(newState);  boolean showDashboard=true;  boolean showCellMessage=false;  boolean paused;  boolean indeterminate;switch (newState) {case IDownloaderClient.STATE_IDLE:    paused=false;  indeterminate=true;break;case IDownloaderClient.STATE_CONNECTING:case IDownloaderClient.STATE_FETCHING_URL:showDashboard=true;paused=false;indeterminate=true;break;case IDownloaderClient.STATE_DOWNLOADING:paused=false;showDashboard=true;indeterminate=false;break;case IDownloaderClient.STATE_FAILED_CANCELED:case IDownloaderClient.STATE_FAILED:case IDownloaderClient.STATE_FAILED_FETCHING_URL:case IDownloaderClient.STATE_FAILED_UNLICENSED:paused=true;showDashboard=false;indeterminate=false;break;case IDownloaderClient.STATE_PAUSED_NEED_CELLULAR_PERMISSION:case IDownloaderClient.STATE_PAUSED_WIFI_DISABLED_NEED_CELLULAR_PERMISSION:showDashboard=false;paused=true;indeterminate=false;showCellMessage=true;break;case IDownloaderClient.STATE_PAUSED_BY_REQUEST:paused=true;indeterminate=false;break;case IDownloaderClient.STATE_PAUSED_ROAMING:case IDownloaderClient.STATE_PAUSED_SDCARD_UNAVAILABLE:paused=true;indeterminate=false;break;case IDownloaderClient.STATE_COMPLETED:showDashboard=false;paused=false;indeterminate=false;validateXAPKZipFiles();return;default :paused=true;indeterminate=true;showDashboard=true;}int newDashboardVisibility=showDashboard ? View.VISIBLE : View.GONE;if (mDashboard.getVisibility() != newDashboardVisibility) {mDashboard.setVisibility(newDashboardVisibility);}int cellMessageVisibility=showCellMessage ? View.VISIBLE : View.GONE;if (mCellMessage.getVisibility() != cellMessageVisibility) {mCellMessage.setVisibility(cellMessageVisibility);}mPB.setIndeterminate(indeterminate);setButtonPausedState(paused);}  }
class C{  @SuppressWarnings("unchecked") private void layoutSlots(ArrayList<MAssignmentSlot> list,ArrayList<MAssignmentSlot> clean){  int size=list.size();  if (size == 0)   return; else   if (size == 1) {    MAssignmentSlot mas=(MAssignmentSlot)list.get(0);    layoutY(mas);    clean.add(mas);    return;  }  boolean allDay=false;  for (int i=0; !allDay && i < size; i++) {    MAssignmentSlot mas=(MAssignmentSlot)list.get(i);    if (mas.getStatus() == MAssignmentSlot.STATUS_NotAvailable || mas.getStatus() == MAssignmentSlot.STATUS_UnAvailable || mas.getStatus() == MAssignmentSlot.STATUS_NonBusinessDay || mas.getStatus() == MAssignmentSlot.STATUS_NotInSlotDay)     allDay=true;  }  if (allDay) {    for (int i=0; i < list.size(); i++) {      MAssignmentSlot mas=(MAssignmentSlot)list.get(i);      if (mas.getStatus() == MAssignmentSlot.STATUS_NotInSlotTime)       list.remove(i--);    }  }  for (int i=0; i < list.size(); i++) {    MAssignmentSlot mas=(MAssignmentSlot)list.get(i);    layoutY(mas);    clean.add(mas);  }  int maxYslots=m_timeSlots.length;  int[] xSlots=new int[maxYslots];  for (int i=0; i < list.size(); i++) {    MAssignmentSlot mas=(MAssignmentSlot)list.get(i);    for (int y=mas.getYStart(); y < mas.getYEnd(); y++)     xSlots[y]++;  }  int maxXslots=0;  for (int y=0; y < xSlots.length; y++) {    if (xSlots[y] > maxXslots)     maxXslots=xSlots[y];  }  if (maxXslots < 2) {    for (int i=0; i < list.size(); i++) {      MAssignmentSlot mas=(MAssignmentSlot)list.get(i);      mas.setX(0,1);    }    return;  }  ArrayList[][] matrix=new ArrayList[maxXslots][maxYslots];  for (int y=0; y < maxYslots; y++) {    ArrayList<Object> xyList=new ArrayList<Object>();    matrix[0][y]=xyList;    for (int i=0; i < list.size(); i++) {      MAssignmentSlot mas=(MAssignmentSlot)list.get(i);      if (y >= mas.getYStart() && y <= mas.getYEnd())       xyList.add(mas);    }    for (int x=1; x < maxXslots; x++)     matrix[x][y]=new ArrayList<Object>();  }  for (int y=0; y < maxYslots; y++) {    if (y > 0 && matrix[0][y].size() > 0) {      for (int x=1; x < maxXslots; x++) {        if (matrix[x][y - 1].size() > 0) {          Object above=matrix[x][y - 1].get(0);          for (int i=0; i < matrix[x][y].size(); i++) {            if (above.equals(matrix[0][y].get(i))) {              matrix[x][y].add(matrix[0][y].get(i));              matrix[0][y].remove(i--);            }          }        }      }    }    if (matrix[0][y].size() > 1) {      Object above=null;      if (y > 0 && matrix[0][y - 1].size() > 0)       above=matrix[0][y - 1].get(0);      for (int i=0; i < matrix[0][y].size(); i++) {        Object move=matrix[0][y].get(i);        if (!move.equals(above)) {          for (int x=1; move != null && x < maxXslots; x++) {            if (matrix[x][y].size() == 0) {              matrix[x][y].add(move);              matrix[0][y].remove(i--);              move=null;            }          }        }      }    }  }  for (int y=0; y < maxYslots; y++) {    for (int x=0; x < maxXslots; x++) {      if (matrix[x][y].size() > 0) {        MAssignmentSlot mas=(MAssignmentSlot)matrix[x][y].get(0);        mas.setX(x,xSlots[y]);      }    }  }  matrix=null;}  }
class C{  public TypeCastExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected PayloadQueryBoostTokenFilter(TokenStream input){  super(input);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public PollResult startPoll(PollController conn){  if (!_lifecycle.isActive()) {    log.warning(this + " select disabled");    return PollResult.CLOSED;  } else   if (_selectMax <= _connectionCount.get()) {    log.warning(this + " keepalive overflow " + _connectionCount+ " max="+ _selectMax);    System.out.println("OVERFLOW:");    return PollResult.CLOSED;  }  if (!conn.toKeepaliveStart()) {    return PollResult.CLOSED;  }  return poll(conn);}  }
class C{  int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){  int rowHead=_rowHead;  int blobTail=_blobTail;  int rowLength=row.length();  rowHead-=rowLength;  if (rowHead < blobTail) {    return -1;  }  byte[] buffer=_buffer;  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);  if (blobTail < 0) {    return -1;  }  setBlobTail(blobTail);  rowHead(rowHead);  validateBlock(row);  return rowHead;}  }
class C{  protected double offVehicleWaitTime(final Link link,final double time){  double offVehWaitTime=0;  double nextVehArrivalTime=getVehArrivalTime(link,time);  if (time < nextVehArrivalTime) {    offVehWaitTime=nextVehArrivalTime - time;  }  return offVehWaitTime;}  }
class C{  protected GenericAttrNS(){}  }
class C{  @Override public void saveViolations(Collection<Violation> violations){}  }
class C{  public String toString(){  return "[NeighborPlaceMark @ (" + col + ","+ row+ ")]";}  }
class C{  public void addingEdge(SessionEvent event){  getSessionSupport().fireSessionEvent(event,false);}  }
class C{  private String buildTableName(String command) throws SQLException {  int indexFrom, indexComma;  String strTablename="";  command=command.trim();  if (command.toLowerCase().startsWith("select")) {    indexFrom=command.toLowerCase().indexOf("from");    indexComma=command.indexOf(",",indexFrom);    if (indexComma == -1) {      strTablename=(command.substring(indexFrom + "from".length(),command.length())).trim();      String tabName=strTablename;      int idxWhere=tabName.toLowerCase().indexOf("where");      if (idxWhere != -1) {        tabName=tabName.substring(0,idxWhere).trim();      }      strTablename=tabName;    } else {    }  } else   if (command.toLowerCase().startsWith("insert")) {  } else   if (command.toLowerCase().startsWith("update")) {  }  return strTablename;}  }
class C{  public CutEntryRepositoryAction(RepositoryTree tree){  super(tree,Entry.class,true,"repository_cut");  putValue(ACTION_COMMAND_KEY,"cut");}  }
class C{  public P25_C4FMDecoder(AliasList aliasList,int frequencyCorrectionMaximum){  super(aliasList);  float[] filter=FilterFactory.getLowPass(48000,2500,4000,80,WindowType.HANNING,true);  mC4FMPreFilter=new RealFIRFilter_RB_RB(filter,1.0f);  mSymbolFilter=new C4FMSymbolFilter(frequencyCorrectionMaximum);  mC4FMPreFilter.setListener(mSymbolFilter);  mC4FMSlicer=new C4FMSlicer();  mSymbolFilter.setListener(mC4FMSlicer);  mMessageFramer=new P25MessageFramer(aliasList);  mC4FMSlicer.addListener(mMessageFramer);  mMessageFramer.setListener(getMessageProcessor());}  }
class C{  public boolean hasComment(){  return comment.length() > 0;}  }
class C{  public void assign(Vector3 other){  this.x=other.x;  this.y=other.y;  this.z=other.z;}  }
class C{  @NonNull protected GsonBuilder createGsonBuilder(@NonNull GsonBuilder gsonBuilder){  return gsonBuilder;}  }
class C{  public FactoryDto updateFactory(final FactoryDto factory) throws ServerException {  final String factoryId=factory.getId();  final String url=fromUri(baseUrl).path(FactoryService.class).path(FactoryService.class,"updateFactory").build(factoryId).toString();  FactoryDto newFactory;  HttpJsonRequest httpJsonRequest=httpJsonRequestFactory.fromUrl(url).usePutMethod().setBody(factory);  try {    HttpJsonResponse response=httpJsonRequest.request();    newFactory=response.asDto(FactoryDto.class);  } catch (  IOException|ApiException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new ServerException(e.getLocalizedMessage());  }  return newFactory;}  }
class C{  public StorageWriter openStorage(StorageData storageData) throws IOException, SerializationException, BusinessException {  StorageData local=getLocalStorageDataObject(storageData);synchronized (local) {    if (isStorageClosed(local)) {      throw new BusinessException("Open the storage " + local + ".",StorageErrorCodeEnum.STORAGE_ALREADY_CLOSED);    }    if (!isStorageOpen(local)) {      local.markOpened();      StorageWriter writer=storageWriterProvider.getCmrStorageWriter();      openedStoragesMap.put(local,writer);      writer.prepareForWrite(local);      writeStorageDataToDisk(local);      return writer;    }  }  return null;}  }
class C{  public static boolean isNative(int flags){  return (flags & NATIVE) != 0;}  }
class C{  public void deleteView(final View view) throws CouldntDeleteException {  Preconditions.checkNotNull(view,"Error: View argument can not be null");  if (view.getType() == ViewType.Native) {    throw new IllegalArgumentException("Error: Native views can not be deleted");  }  if (!isLoaded()) {    throw new IllegalArgumentException("Error: Module must be opened before views can be deleted");  }  if (!m_views.contains(view)) {    throw new IllegalArgumentException("Error: View does not belong to this module");  }  try {    m_module.getContent().getViewContainer().deleteView(view.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 164) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static void stopContext(Context ctx){synchronized (activeContexts) {    activeContexts.remove(ctx);    if (activeContexts.isEmpty()) {      syncDeinitialize();    } else {      if (instance != null && getActivity() != null) {        instance.deinitialize();      }    }  }}  }
class C{  public void stop(){  getLock().lock();  try {    cancelEvent();    timerQueue().removeTimer(this);  }  finally {    getLock().unlock();  }}  }
class C{  public Configuration unmarshallConfiguration(InputStream stream) throws IOException {  if (stream == null) {    throw new IllegalArgumentException("Stream is NULL. Cannot read XML.");  }  try {    JAXBContext ctx;    try {      ctx=contextCreator.create(XMLUtil.PACKAGE,classLoadingUtil.getClassloader());    } catch (    JAXBException e) {      LOG.warning("Could not create JAXB context using the current threads context classloader. Falling back to ObjectFactory class classloader.");      ctx=null;    }    if (ctx == null) {      ctx=contextCreator.create(XMLUtil.PACKAGE,ObjectFactory.class.getClassLoader());    }    Unmarshaller um=ctx.createUnmarshaller();    @SuppressWarnings("unchecked") JAXBElement<Configuration> el=(JAXBElement<Configuration>)um.unmarshal(stream);    return el.getValue();  } catch (  JAXBException ue) {    throw new IllegalStateException("Cannot parse holidays XML file.",ue);  }}  }
class C{  public SOM(DistanceMetric dm,int somHeight,int somWeight){  this(dm,somHeight,somWeight,new DefaultVectorCollectionFactory<VecPaired<Vec,Integer>>());}  }
class C{  public boolean isDownloading(String url){  return query(url) != DownloadState.INVALID;}  }
class C{  public SoraniAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public static void copyMemoryFieldByField(long srcAddress,Object dest){  Class clazz=dest.getClass();  while (clazz != Object.class) {    for (    Field f : clazz.getDeclaredFields()) {      if ((f.getModifiers() & Modifier.STATIC) == 0) {        final Class type=f.getType();        Preconditions.checkArgument(type.isPrimitive(),"Only primitives are supported");        final long offset=unsafe.objectFieldOffset(f);        final long src=srcAddress + offset;        if (type == int.class) {          unsafe.putInt(dest,offset,unsafe.getInt(src));        } else         if (type == long.class) {          unsafe.putLong(dest,offset,unsafe.getLong(src));        } else {          throw new IllegalArgumentException("Type not supported yet: " + type);        }      }    }    clazz=clazz.getSuperclass();  }}  }
class C{  protected static Reader createXMLDeclarationReader(PushbackInputStream pbis,String enc) throws IOException {  byte[] buf=new byte[128];  int len=pbis.read(buf);  if (len > 0) {    pbis.unread(buf,0,len);  }  return new InputStreamReader(new ByteArrayInputStream(buf,4,len),enc);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.651 -0500",hash_original_method="6553D4A66AD572AF8668D3FA13E3C7D5",hash_generated_method="A6DC5F11A0D1EF7379DECEBBBC7C000D") public boolean hasFormData(){synchronized (mFormLock) {    return hasEntries(TABLE_FORMURL_ID);  }}  }
class C{  private void validateSingleS3StorageEntity(List<StoragePlatformEntity> storagePlatformEntities){  assertNotNull(storagePlatformEntities);  assertEquals(1,storagePlatformEntities.size());  assertEquals(StoragePlatformEntity.S3,storagePlatformEntities.get(0).getName());}  }
class C{  public synchronized void clearSession(Context context,MXSession session,Boolean clearCredentials){  if (clearCredentials) {    mLoginStorage.removeCredentials(session.getHomeserverConfig());  }  session.clear(context);synchronized (instance) {    mMXSessions.remove(session);  }}  }
class C{  private int countChunks(int len){  int result=0;  if (len == 0)   return result;  if (readChunk != null) {    len-=Math.min(readChunk.remaining(),len);    result++;  }  if (len == 0)   return result;  if (!list.isEmpty()) {    Iterator<ByteBuffer> i=list.iterator();    while (len > 0 && i.hasNext()) {      ByteBuffer src=i.next();      len-=Math.min(src.remaining(),len);      result++;    }  }  if (len == 0)   return result;  if (writeChunk != null) {    result++;  }  return result;}  }
class C{  public static boolean disjoint(Collection<?> c1,Collection<?> c2){  if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {    Collection<?> tmp=c1;    c1=c2;    c2=tmp;  }  Iterator<?> it=c1.iterator();  while (it.hasNext()) {    if (c2.contains(it.next())) {      return false;    }  }  return true;}  }
class C{  public RectF createFromParcel(Parcel in){  RectF r=new RectF();  r.readFromParcel(in);  return r;}  }
class C{  public synchronized boolean createEvidence(final byte[] additionalData,final int evidenceType){  this.typeEvidenceId=evidenceType;  if (Cfg.DEBUG) {    Check.requires(fconn == null,"createLog: not previously closed");  }  timestamp=new Date();  int additionalLen=0;  if (additionalData != null) {    additionalLen=additionalData.length;  }  enoughSpace=enoughSpace();  if (!enoughSpace) {    if (Cfg.DEBUG) {      Check.log(TAG + " createEvidence, no space");    }    return false;  }  final Name name=evidenceCollector.makeNewName(this,EvidenceType.getMemo(evidenceType));  progressive=name.progressive;  final String dir=name.basePath + name.blockDir + "/";  final boolean ret=Path.createDirectory(dir);  if (!ret) {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: Dir not created: " + dir);    }    return false;  }  fileName=dir + name.encName + EvidenceCollector.LOG_TMP;  if (Cfg.DEBUG) {    Check.asserts(fileName != null,"null fileName");  }  try {    fconn=new AutoFile(fileName);    if (fconn.exists()) {      close();      if (Cfg.DEBUG) {        Check.log(TAG + " FATAL: It should not exist:" + fileName);      }      return false;    }    if (Cfg.DEBUG) {    }    final byte[] plainBuffer=makeDescription(additionalData,evidenceType);    if (Cfg.DEBUG) {      Check.asserts(plainBuffer.length >= 32 + additionalLen,"Short plainBuffer");    }    final byte[] encBuffer=encryption.encryptData(plainBuffer);    if (Cfg.DEBUG) {      Check.asserts(encBuffer.length == encryption.getNextMultiple(plainBuffer.length),"Wrong encBuffer");    }    fconn.write(ByteArray.intToByteArray(plainBuffer.length));    fconn.append(encBuffer);    if (Cfg.DEBUG) {      Check.asserts(fconn.getSize() == encBuffer.length + 4,"Wrong filesize");    }  } catch (  final Exception ex) {    if (Cfg.EXCEPTION) {      Check.log(ex);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: file: " + name.fileName+ " ex:"+ ex);    }    return false;  }  return true;}  }
class C{  public void testSerialization() throws Exception {  LinkedBlockingQueue q=populatedQueue(SIZE);  ByteArrayOutputStream bout=new ByteArrayOutputStream(10000);  ObjectOutputStream out=new ObjectOutputStream(new BufferedOutputStream(bout));  out.writeObject(q);  out.close();  ByteArrayInputStream bin=new ByteArrayInputStream(bout.toByteArray());  ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(bin));  LinkedBlockingQueue r=(LinkedBlockingQueue)in.readObject();  assertEquals(q.size(),r.size());  while (!q.isEmpty())   assertEquals(q.remove(),r.remove());}  }
class C{  public static TextureData newTextureData(GLProfile glp,InputStream stream,boolean useMipMaps) throws IOException {  if (!(stream instanceof BufferedInputStream)) {    stream=new BufferedInputStream(stream);  }  boolean ddsFormat=DDSImage.isDDSImage(stream);  if (!ddsFormat) {    BufferedImage img=ImageIO.read(stream);    if (img != null)     return AWTTextureIO.newTextureData(glp,img,useMipMaps);  }  return TextureIO.newTextureData(glp,stream,useMipMaps,null);}  }
class C{  public static String stringOfChar(char ch,int count){  StringBuffer buf=new StringBuffer();  for (int i=0; i < count; i++) {    buf.append(ch);  }  return buf.toString();}  }
class C{  public PrivateMLet(URL[] urls,boolean delegateToCLR){  super(urls,delegateToCLR);}  }
class C{  public TaskResourceRep sendAlert(String start,String end,EventParameters eventParameters){  return sendAlert(null,null,null,null,null,null,start,end,null,null,false,eventParameters);}  }
class C{  public static boolean isNullReferenceConversion(Class<?> src,Class<?> dst){  assert (!dst.isPrimitive());  if (dst.isInterface())   return true;  if (isNullType(src))   return true;  return dst.isAssignableFrom(src);}  }
class C{  public void startMonitorApiCnx(Activity activity,RcsServiceListener listener,RcsServiceName... services){  mClientsToNotify.put(activity,new ClientConnectionNotifier(listener,services));}  }
class C{  private void fallbackToLoginMode(){  mMainLayout.setVisibility(View.VISIBLE);  mEmailValidationExtraParams=null;  mRegistrationResponse=null;  showMainLayout();  enableLoadingScreen(false);  mMode=MODE_LOGIN;  refreshDisplay();}  }
class C{  public void start(String threadName){synchronized (lifecycle) {    if (!running) {      running=true;      sendThread=new Thread(this,threadName);      sendThread.start();    }  }}  }
class C{  public DefaultEntity(String name){  super(name);}  }
class C{  public String debugDump(int indent){  return super.debugDump(indent);}  }
class C{  private ApiResponse buildResponseFromUser(User u){  Map<String,String> fields=new HashMap<>();  fields.put("name",u.getName());  fields.put("id",Integer.toString(u.getId()));  fields.put("contextId",Integer.toString(u.getContextId()));  fields.put("enabled",Boolean.toString(u.isEnabled()));  fields.put("credentials",u.getAuthenticationCredentials().getApiResponseRepresentation().toJSON().toString());  ApiResponseSet response=new ApiResponseSet("user",fields);  return response;}  }
class C{  public void putString(String key,String value){  preferences.edit().putString(key,value).apply();}  }
class C{  public void fireControlerAfterMobsimEvent(final int iteration){  AfterMobsimEvent event=new AfterMobsimEvent(this.controler,iteration);  AfterMobsimListener[] listener=this.coreListenerList.getListeners(AfterMobsimListener.class);  for (  AfterMobsimListener aListener : listener) {    log.info("calling notifyAfterMobsim on " + aListener.getClass().getCanonicalName());    aListener.notifyAfterMobsim(event);  }  listener=this.listenerList.getListeners(AfterMobsimListener.class);  for (  AfterMobsimListener aListener : listener) {    log.info("calling notifyAfterMobsim on " + aListener.getClass().getCanonicalName());    aListener.notifyAfterMobsim(event);  }  log.info("[it." + iteration + "] all ControlerAfterMobsimListeners called.");}  }
class C{  public PrecisionPoint intersect(final PrecisionLine line,final double nTolerance){  List<PrecisionPoint> intersections=getLinesIntersections(line);  if (intersections.size() > 1) {    intersections.add(point1.getCopy());    intersections.add(point2.getCopy());  }  for (int i=0; i < intersections.size(); i++) {    PrecisionPoint result=intersections.get(i).getCopy();    if (contains(result,nTolerance) && line.contains(result,nTolerance)) {      return result;    }  }  return null;}  }
class C{  public EncodedImage(final Image i,final String targetExt,final boolean isStatic){  this.extension=targetExt;  this.isStatic=isStatic;  int width=i.getWidth(null);  if (width < 0) {    width=96;  }  int height=i.getHeight(null);  if (height < 0) {    height=96;  }  final BufferedImage sourceImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  sourceImage.createGraphics().drawImage(i,0,0,width,height,null);  this.image=RasterPlotter.exportImage(sourceImage,targetExt);}  }
class C{  SplitRecord split(){  int splitArg=-1;  ArgumentType splitTest=null;  int splitDiff=1000;  for (int arg=0; arg < 4; arg++) {    for (    ArgumentType test : ArgumentType.values()) {      int c=getEncodingSplit(arg,test);      if (c == 0)       return new SplitRecord(arg,test); else       if (c < splitDiff) {        splitArg=arg;        splitTest=test;        splitDiff=c;      }    }  }  return new SplitRecord(splitArg,splitTest);}  }
class C{  protected boolean isImageWrapCropBounds(){  return isImageWrapCropBounds(mCurrentImageCorners);}  }
class C{  protected String computeLocation(CargoProject project) throws MojoExecutionException {  String location;  if (project.getGroupId().equals(getGroupId()) && project.getArtifactId().equals(getArtifactId()) && isTypeCompatible(project)) {    String type=this.getType();    this.setType(project.getPackaging());    try {      location=findArtifactLocation(project.getArtifacts(),project.getLog());    } catch (    MojoExecutionException e) {      String classifier=getClassifier();      if (classifier == null) {        location=new File(project.getBuildDirectory(),project.getFinalName() + "." + computeExtension(project.getPackaging())).getPath();      } else {        location=new File(project.getBuildDirectory(),project.getFinalName() + "-" + classifier+ "."+ computeExtension(project.getPackaging())).getPath();      }    } finally {      this.setType(type);    }  } else {    if (project.getGroupId().equals(getGroupId()) && project.getArtifactId().equals(getArtifactId())) {      project.getLog().warn("The defined deployable has the same groupId and artifactId " + "as your project's main artifact but the type is different. You've " + "defined a [" + getType() + "] type whereas the project's packaging is ["+ project.getPackaging()+ "]. This is possibly an error and as a "+ "consequence the plugin will try to find this deployable in the "+ "project's dependencies.");    }    location=findArtifactLocation(project.getArtifacts(),project.getLog());  }  return location;}  }
class C{  public void startForItems(List<GridItem> items){  if (items.isEmpty())   return;  for (  GridItem item : items)   item.pb.setVisibility(View.VISIBLE);  onStart();  for (  GridItem item : items) {    boolean onStopWhenFinished=items.indexOf(item) == items.size() - 1;    new BitmapDownloader(item,true,onStopWhenFinished).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);  }}  }
class C{  public final boolean match(char[] target){  return match(target,ndx);}  }
class C{  private boolean hasMatchingDo(){  Assert.isTrue(fToken == Symbols.TokenWHILE);  nextToken();switch (fToken) {case Symbols.TokenRBRACE:    skipScope();case Symbols.TokenSEMICOLON:  skipToStatementStart(false,false);return fToken == Symbols.TokenDO;}return false;}  }
class C{  private boolean closeInternal(int rstStatusCode){  assert (!Thread.holdsLock(this));synchronized (this) {    if (this.rstStatusCode != -1) {      return false;    }    if (in.finished && out.finished) {      return false;    }    this.rstStatusCode=rstStatusCode;    notifyAll();  }  connection.removeStream(id);  return true;}  }
class C{  public static String toString(final URI uri,final Charset encoding) throws IOException {  return IOUtils.toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  public CacheXmlException(String message){  super(message);}  }
class C{  private void recordTXOperation(ServerRegionOperation op,Object key,Object... arguments){  if (ClientTXStateStub.transactionRecordingEnabled()) {    TXStateProxy tx=TXManagerImpl.getCurrentTXState();    if (tx == null) {      return;    }    tx.recordTXOperation(this,op,key,arguments);  }}  }
class C{  public void bindAll(Texture texture){  bind(texture);  stream().filter(null).map(null).forEach(null);}  }
class C{  public RenderedImage createRendering(RenderContext renderContext){  RenderedImage image=null;  RenderContext rcOut=null;  ParameterBlock renderedParamBlock=(ParameterBlock)paramBlock.clone();  Vector sources=getRenderableSources();  try {    if (sources != null) {      Vector renderedSources=new Vector();      for (int i=0; i < sources.size(); i++) {        rcOut=myCRIF.mapRenderContext(i,renderContext,paramBlock,this);        RenderedImage rdrdImage=((RenderableImage)sources.elementAt(i)).createRendering(rcOut);        if (rdrdImage == null) {          return null;        }        renderedSources.addElement(rdrdImage);      }      if (renderedSources.size() > 0) {        renderedParamBlock.setSources(renderedSources);      }    }    return myCRIF.create(renderContext,renderedParamBlock);  } catch (  ArrayIndexOutOfBoundsException e) {    return null;  }}  }
class C{  public SpecialTextUnit useTextBold(){  isTextBold=true;  return this;}  }
class C{  public static void writeln(boolean b,boolean flush){  write(b);  writelnWithFlush(flush);}  }
class C{  public static Auth merge(Auth... documents){  Profiles[] profiles=new Profiles[documents.length];  Userprofiles[] userprofiles=new Userprofiles[documents.length];  Auth result=new Auth();  if (profiles.length > 0) {    result.setVersion(documents[0].getVersion());    result.setType(documents[0].getType());    for (int i=0; i < documents.length; i++) {      profiles[i]=documents[i].getProfiles();      userprofiles[i]=documents[i].getUserprofiles();    }  }  result.setProfiles(merge(profiles));  result.setUserprofiles(merge(userprofiles));  return result;}  }
class C{  void putDefaultString(String property,String longKey,String value){  defaultProps.put(property,value);  if (longKey != null) {    longKeyMap.put(longKey,property);    canonicaliseMapEntry(cmdLineProps,longKey,property);    canonicaliseMapEntry(fileProps,longKey,property);  }  cachedKeySet.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.261 -0400",hash_original_method="88FB75CF2804164884F1D713C392175B",hash_generated_method="C8968A8473FCAC734706FB1E81FCACC0") private int randomLevel(){  int x=randomSeed;  x^=x << 13;  x^=x >>> 17;  randomSeed=x^=x << 5;  if ((x & 0x80000001) != 0)   return 0;  int level=1;  while (((x>>>=1) & 1) != 0)   ++level;  return level;}  }
class C{  public void constructHops(DMLProgram dmlp) throws ParseException, LanguageException {  for (  String namespaceKey : dmlp.getNamespaces().keySet()) {    for (    String fname : dmlp.getFunctionStatementBlocks(namespaceKey).keySet()) {      FunctionStatementBlock current=dmlp.getFunctionStatementBlock(namespaceKey,fname);      constructHops(current);    }  }  for (int i=0; i < dmlp.getNumStatementBlocks(); i++) {    StatementBlock current=dmlp.getStatementBlock(i);    constructHops(current);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:24.456 -0500",hash_original_method="52B76A9CFA81E3C79D701A627A7AE336",hash_generated_method="1BE14F5073BEF39FCFCE874C7877284B") public Bitmap toBitmap(int width,int height,int inset,int color){  final Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  final Canvas canvas=new Canvas(bitmap);  final Paint paint=new Paint();  paint.setAntiAlias(BITMAP_RENDERING_ANTIALIAS);  paint.setDither(BITMAP_RENDERING_DITHER);  paint.setColor(color);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeJoin(Paint.Join.ROUND);  paint.setStrokeCap(Paint.Cap.ROUND);  paint.setStrokeWidth(BITMAP_RENDERING_WIDTH);  final Path path=toPath();  final RectF bounds=new RectF();  path.computeBounds(bounds,true);  final float sx=(width - 2 * inset) / bounds.width();  final float sy=(height - 2 * inset) / bounds.height();  final float scale=sx > sy ? sy : sx;  paint.setStrokeWidth(2.0f / scale);  path.offset(-bounds.left + (width - bounds.width() * scale) / 2.0f,-bounds.top + (height - bounds.height() * scale) / 2.0f);  canvas.translate(inset,inset);  canvas.scale(scale,scale);  canvas.drawPath(path,paint);  return bitmap;}  }
class C{  public static String prechomp(String str,String sep){  int idx=str.indexOf(sep);  if (idx == -1) {    return str;  }  return str.substring(idx + sep.length());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.758 -0500",hash_original_method="BAAE43E1F09165366508512053D99CC4",hash_generated_method="D8C670DCC19106F24A5FA937B386E7C2") public float ascent(){  return getTaintFloat();}  }
class C{  protected ExistentialTypeRefImpl(){  super();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_FIELD_ACCESSOR___IS_ABSTRACT:    return isAbstract();case N4JSPackage.N4_FIELD_ACCESSOR___IS_VALID_NAME:  return isValidName();case N4JSPackage.N4_FIELD_ACCESSOR___GET_DECLARED_TYPE_REF:return getDeclaredTypeRef();case N4JSPackage.N4_FIELD_ACCESSOR___GET_DEFINED_ACCESSOR:return getDefinedAccessor();case N4JSPackage.N4_FIELD_ACCESSOR___GET_NAME:return getName();case N4JSPackage.N4_FIELD_ACCESSOR___GET_LOCAL_ARGUMENTS_VARIABLE:return getLocalArgumentsVariable();case N4JSPackage.N4_FIELD_ACCESSOR___IS_ASYNC:return isAsync();case N4JSPackage.N4_FIELD_ACCESSOR___GET_DEFINED_FUNCTION_OR_ACCESSOR:return getDefinedFunctionOrAccessor();case N4JSPackage.N4_FIELD_ACCESSOR___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  public static DataType newInstance(){  final DataType returnInstance=new DataType();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  void ensureWidth(final ExecutionUnit executionUnit,final int width){  Dimension old=new Dimension((int)model.getProcessWidth(executionUnit),(int)model.getProcessHeight(executionUnit));  if (width > old.getWidth()) {    model.setProcessWidth(executionUnit,width);    balance();    model.fireProcessSizeChanged();  }}  }
class C{  public DataFlavor(String mimeType) throws ClassNotFoundException {  super();  if (mimeType == null) {    throw new NullPointerException("mimeType");  }  try {    initialize(mimeType,null,this.getClass().getClassLoader());  } catch (  MimeTypeParseException mtpe) {    throw new IllegalArgumentException("failed to parse:" + mimeType);  }}  }
class C{  public boolean isGitBasicAuth(){  return gitBasicAuth;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SRuntimePackage.EXECUTION_CONTEXT__VALUE:    setValue(newValue);  return;case SRuntimePackage.EXECUTION_CONTEXT__FQ_NAME:setFqName((String)newValue);return;case SRuntimePackage.EXECUTION_CONTEXT__WRITABLE:setWritable((Boolean)newValue);return;case SRuntimePackage.EXECUTION_CONTEXT__TYPE:setType((org.yakindu.base.types.Type)newValue);return;case SRuntimePackage.EXECUTION_CONTEXT__SLOTS:getSlots().clear();getSlots().addAll((Collection<? extends ExecutionSlot>)newValue);return;case SRuntimePackage.EXECUTION_CONTEXT__ACTIVE_STATES:getActiveStates().clear();getActiveStates().addAll((Collection<? extends RegularState>)newValue);return;case SRuntimePackage.EXECUTION_CONTEXT__EXECUTED_ELEMENTS:getExecutedElements().clear();getExecutedElements().addAll((Collection<? extends EObject>)newValue);return;case SRuntimePackage.EXECUTION_CONTEXT__SUSPENDED_ELEMENTS:getSuspendedElements().clear();getSuspendedElements().addAll((Collection<? extends EObject>)newValue);return;case SRuntimePackage.EXECUTION_CONTEXT__SNAPSHOT:setSnapshot((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static String readBcdNumber(byte[] data,int offset,int length){  StringBuilder out=new StringBuilder();  for (int i=offset; i < offset + length; i++) {    int arrb=data[i];    if ((data[i] & 15) <= 9) {      out.append("").append(data[i] & 15);    }    if ((data[i] & 15) == 0xA) {      out.append("*");    }    if ((data[i] & 15) == 0xB) {      out.append("#");    }    arrb=(arrb >>> 4);    if ((arrb & 15) <= 9) {      out.append("").append(arrb & 15);    }    if ((arrb & 15) == 0xA) {      out.append("*");    }    if ((arrb & 15) == 0xB) {      out.append("#");    }  }  return out.toString();}  }
class C{  public IllegalPathStateException(){}  }
class C{  private static void appendSMS(XmppMsg msg,Sms sms){  msg.append(DateFormat.getDateTimeInstance().format(sms.getDate()) + " - ");  msg.appendBold(sms.getSender());  msg.append(" --> ");  msg.appendBoldLine(sms.getReceiver());  msg.appendLine(sms.getMessage());  msg.appendLine("");}  }
class C{  @Override public void run(int connId,String[] args){  if (!canRunRestrictedCommand(connId)) {    server.sendServerChat(connId,"Observers are restricted from loading games.");    return;  }  if (args.length > 1) {    server.sendLoadGame(connId,args[1]);  } else {    server.sendServerChat(connId,"you must provide a file name");  }}  }
class C{  public final static byte[] base64Encode(byte[] data){  if (data == null) {    return null;  }  int sidx, didx;  byte dest[]=new byte[((data.length + 2) / 3) * 4];  for (sidx=0, didx=0; sidx < data.length - 2; sidx+=3) {    dest[didx++]=Base64EncMap[(data[sidx] >>> 2) & 077];    dest[didx++]=Base64EncMap[(data[sidx + 1] >>> 4) & 017 | (data[sidx] << 4) & 077];    dest[didx++]=Base64EncMap[(data[sidx + 2] >>> 6) & 003 | (data[sidx + 1] << 2) & 077];    dest[didx++]=Base64EncMap[data[sidx + 2] & 077];  }  if (sidx < data.length) {    dest[didx++]=Base64EncMap[(data[sidx] >>> 2) & 077];    if (sidx < data.length - 1) {      dest[didx++]=Base64EncMap[(data[sidx + 1] >>> 4) & 017 | (data[sidx] << 4) & 077];      dest[didx++]=Base64EncMap[(data[sidx + 1] << 2) & 077];    } else     dest[didx++]=Base64EncMap[(data[sidx] << 4) & 077];  }  for (; didx < dest.length; didx++) {    dest[didx]=(byte)'=';  }  return dest;}  }
class C{  Sentence parseSentence(final String text,final ConversationContext ctx){  if (isEmpty()) {    return ConversationParser.parse(text,ctx);  }  String txt=text.trim();  final Sentence sentence=new SentenceImplementation(ctx,txt);  txt=ConversationParser.detectSentenceType(txt,sentence);  if (typeMatching) {    readTypeMatchExpressions(txt,ctx,sentence);  } else   if (exactMatching) {    readSimpleExpressions(txt,ctx,sentence);  } else   if (similarMatching) {    readSimpleExpressions(txt,ctx,sentence);  } else   if (jokerMatching) {    readJokerExpressions(txt,ctx,sentence);  } else   if (caseInsensitive) {    readSimpleExpressions(txt,ctx,sentence);  }  return sentence;}  }
class C{  public void afterDispatch(MvcEvent mvce){}  }
class C{  public static double[][] cumProduct(double[][] v){  int m=v.length;  int n=v[0].length;  double[][] X=new double[m][n];  double s;  for (int j=0; j < n; j++) {    s=1;    for (int i=0; i < m; i++) {      s*=v[i][j];      X[i][j]=s;    }  }  return X;}  }
class C{  private int byteIndex(int index) throws IndexOutOfBoundsException {  if (index < 0 || index >= data.length * 8) {    throw new IndexOutOfBoundsException();  } else {    return index / 8;  }}  }
class C{  public static void addFailingTest(ContractViolation violation){  violationCount++;  if (!hasViolation(violation)) {    violations.add(violation);  }}  }
class C{  public static double angleSparseDense(SparseNumberVector v1,NumberVector v2){  final int dim2=v2.getDimensionality();  double l1=0., l2=0., cross=0.;  int i1=v1.iter(), d2=0;  while (v1.iterValid(i1)) {    final int d1=v1.iterDim(i1);    while (d2 < d1 && d2 < dim2) {      final double val=v2.doubleValue(d2);      l2+=val;    }    if (d2 < dim2) {      final double val1=v1.iterDoubleValue(i1);      final double val2=v2.doubleValue(d2);      l1+=val1 * val1;      l2+=val2 * val2;      cross+=val1 * val2;      i1=v1.iterAdvance(i1);      ++d2;    }  }  while (v1.iterValid(i1)) {    final double val=v1.iterDoubleValue(i1);    l1+=val * val;    i1=v1.iterAdvance(i1);  }  while (d2 < dim2) {    final double val=v2.doubleValue(d2);    l2+=val * val;    ++d2;  }  final double a=(cross == 0.) ? 0. : (l1 == 0. || l2 == 0.) ? 1. : Math.sqrt((cross / l1) * (cross / l2));  return (a < 1.) ? a : 1.;}  }
class C{  public static void releaseFactories() throws FacesException {synchronized (FACTORIES_CACHE) {    if (!FACTORIES_CACHE.applicationMap.isEmpty()) {      FactoryFinderInstance fm=FACTORIES_CACHE.getApplicationFactoryManager();      fm.releaseFactories();    }    FACTORIES_CACHE.removeApplicationFactoryManager();  }}  }
class C{  public int showDialog(){  pack();  setVisible(true);  return returnCode;}  }
class C{  @Override public DriverTask discoverStoragePools(StorageSystem storageSystem,List<StoragePool> storagePools){  return discoveryHelper.discoverStoragePools(storageSystem,storagePools);}  }
class C{  public void typeOf() throws IOException {  writeCode(TYPEOF);}  }
class C{  public static int[] sort(double a[]){  int[] p=new int[a.length];  for (int i=0; i < a.length; i++)   p[i]=i;  sort(a,p,0,a.length - 1);  return p;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.503 -0500",hash_original_method="4DFA55B8EC4F00C998EFCF5CE369887F",hash_generated_method="E70E92D0AB2F45BDABAA12B4873229AD") private void findLargestCells(int widthMeasureSpec){  boolean firstRow=true;  final int count=getChildCount();  for (int i=0; i < count; i++) {    final View child=getChildAt(i);    if (child.getVisibility() == GONE) {      continue;    }    if (child instanceof TableRow) {      final TableRow row=(TableRow)child;      final ViewGroup.LayoutParams layoutParams=row.getLayoutParams();      layoutParams.height=LayoutParams.WRAP_CONTENT;      final int[] widths=row.getColumnsWidths(widthMeasureSpec);      final int newLength=widths.length;      if (firstRow) {        if (mMaxWidths == null || mMaxWidths.length != newLength) {          mMaxWidths=new int[newLength];        }        System.arraycopy(widths,0,mMaxWidths,0,newLength);        firstRow=false;      } else {        int length=mMaxWidths.length;        final int difference=newLength - length;        if (difference > 0) {          final int[] oldMaxWidths=mMaxWidths;          mMaxWidths=new int[newLength];          System.arraycopy(oldMaxWidths,0,mMaxWidths,0,oldMaxWidths.length);          System.arraycopy(widths,oldMaxWidths.length,mMaxWidths,oldMaxWidths.length,difference);        }        final int[] maxWidths=mMaxWidths;        length=Math.min(length,newLength);        for (int j=0; j < length; j++) {          maxWidths[j]=Math.max(maxWidths[j],widths[j]);        }      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateentityreference.class,args);}  }
class C{  public void writeHttpResponse(String contentType,byte[] response) throws IOException {  httpResponse.setContentType(contentType);  httpResponse.setContentLength(response.length);  OutputStream out=httpResponse.getOutputStream();  out.write(response,0,response.length);  out.flush();}  }
class C{  @Override public void activateGroupSnapshots(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  List<BlockSnapshot> snapshots=null;  try {    _log.info("activateGroupSnapshots operation START");    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    if (snapshotObj.getIsSyncActive()) {      taskCompleter.ready(_dbClient);      return;    }    String consistencyGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(snapshotObj,_dbClient);    storage=findProviderFactory.withGroup(storage,consistencyGroupName).find();    if (storage == null) {      ServiceError error=DeviceControllerErrors.smis.noConsistencyGroupWithGivenName();      taskCompleter.error(_dbClient,error);      return;    }    CIMObjectPath replicationGroupPath=_cimPath.getReplicationGroupPath(storage,consistencyGroupName);    CIMArgument[] inArgs=_helper.getCreateGroupSynchronizationAspectInput(replicationGroupPath);    CIMArgument[] outArgs=new CIMArgument[5];    CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);    _helper.invokeMethod(storage,replicationSvcPath,SmisConstants.CREATE_SYNCHRONIZATION_ASPECT,inArgs,outArgs);    snapshots=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshotObj,_dbClient);    setIsSyncActive(snapshots,true);    CIMObjectPath settingsPath=(CIMObjectPath)outArgs[0].getValue();    CIMObjectPath syncPath=(CIMObjectPath)settingsPath.getKey(SmisConstants.CP_SETTING_DATA).getValue();    String instanceId=(String)syncPath.getKey(SmisConstants.CP_INSTANCE_ID).getValue();    for (    BlockSnapshot it : snapshots) {      it.setSettingsGroupInstance(instanceId);      it.setNeedsCopyToTarget(true);      it.setRefreshRequired(true);    }    _dbClient.persistObject(snapshots);    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  } finally {    _log.info("activateGroupSnapshots operation END");  }}  }
class C{  public static Network readNetworkFromFiles(ArrayList<String> filenames,ArrayList<LinkType> linkTypes) throws FileNotFoundException, IOException {  Network network=new Network();  int nodeID=0;  int linkID=0;  for (int i=0; i < filenames.size(); i++) {    String filename=filenames.get(i);    LinkType linkType=linkTypes.get(i);    BufferedReader in=new BufferedReader(new FileReader(filename));    String line=in.readLine();    int linksi=0;    while (line != null) {      int t=line.indexOf('\t');      if (t <= 0 || line.contains("#")) {        line=in.readLine();        continue;      }      String n1=line.substring(0,t) + linkType.sourceNetwork;      String n2=line.substring(t + 1) + linkType.destinationNetwork;      Node origin=network.getNodeByDescription(n1);      if (n1.equals(n2)) {        line=in.readLine();        continue;      }      if (origin == null) {        origin=new Node(nodeID++,n1);        network.addNode(origin);      }      Node destination=network.getNodeByDescription(n2);      if (destination == null) {        destination=new Node(nodeID++,n2);        network.addNode(destination);      }      NodeSet nodes=origin.neighboursPerType[linkType.getMotifLink().getMotifLinkID()];      line=in.readLine();      if (nodes != null && nodes.nodes.contains(destination)) {        continue;      }      Link l=new Link(linkID++,origin,destination,linkType);      linksi++;      network.addLink(l);    }    for (    Node node : network.nodesByDescription.values()) {      for (      NodeSet nodeSet : node.neighboursPerType) {        if (nodeSet != null) {          nodeSet.sort();          nodeSet.trimToSize();        }      }    }    System.out.println("Read: " + filename + " : links: "+ linksi);  }  network.finalizeNetworkConstruction();  System.out.println("Nodes: " + network.nodesByDescription.size());  System.out.println("Links: " + network.nrLinks);  return network;}  }
class C{  public static String escapeAttr(String text){  StrBuilder sb=new StrBuilder();  escape(sb,text,true,true);  return sb.toString();}  }
class C{  private Set<String> parseIndexSpecList(String indexSpecStr) throws SailException {  Set<String> indexes=new HashSet<String>();  if (indexSpecStr != null) {    StringTokenizer tok=new StringTokenizer(indexSpecStr,", \t");    while (tok.hasMoreTokens()) {      String index=tok.nextToken().toLowerCase();      if (index.length() != 4 || index.indexOf('s') == -1 || index.indexOf('p') == -1 || index.indexOf('o') == -1 || index.indexOf('c') == -1) {        throw new SailException("invalid value '" + index + "' in index specification: "+ indexSpecStr);      }      indexes.add(index);    }  }  return indexes;}  }
class C{  public static String formatSpelledOutAmount(Double amount,Locale locale){  return formatSpelledOutAmount(amount.doubleValue(),locale);}  }
class C{  public static <T>List<T> list(final HGSearchResult<T> result){  final List<T> outputList=new ArrayList<T>();  while (result.hasNext()) {    final T currentValue=result.next();    outputList.add(currentValue);  }  return outputList;}  }
class C{  private static Element addElement(Document doc,Node parent,String tagName,String attrName,String attrVal){  return addElement(doc,parent,tagName,attrName,attrVal,null,null);}  }
class C{  public void sendSubCmd(PacketOutputStream writer) throws IOException, QueryException {  byte[] sqlBytes=sql.getBytes(StandardCharsets.UTF_8);  writer.assureBufferCapacity(sqlBytes.length + 10);  writer.writeFieldLength(sqlBytes.length + 1);  writer.buffer.put(Packet.COM_STMT_PREPARE);  writer.buffer.put(sqlBytes);}  }
class C{  public KeyPair generateKeyPair(){  if (random == null) {    random=JCAUtil.getSecureRandom();  }  DSAParameterSpec spec;  try {    if (forceNewParameters) {      spec=ParameterCache.getNewDSAParameterSpec(plen,qlen,random);    } else {      if (params == null) {        params=ParameterCache.getDSAParameterSpec(plen,qlen,random);      }      spec=params;    }  } catch (  GeneralSecurityException e) {    throw new ProviderException(e);  }  return generateKeyPair(spec.getP(),spec.getQ(),spec.getG(),random);}  }
class C{  private void buildAndSendMessage(Object data,String command){  DataMessage message=new DataMessage();  message.userId=MainApplication.getInstance().API.getCurrentUserId();  message.deviceId=MainApplication.getInstance().API.getDeviceId();  message.accessToken=MainApplication.getInstance().API.getAccessToken();  message.serverAddress=MainApplication.getInstance().API.getServerAddress();  message.maxBitrate=PreferenceManager.getDefaultSharedPreferences(MainApplication.getInstance()).getString("pref_chromecast_bitrate","3872000");  message.receiverName=getDeviceName();  message.options=data;  message.command=command;  Gson gson=new Gson();  try {    String messageString=gson.toJson(message);    AppLogger.getLogger().Debug(TAG,"Message String: " + messageString);    AppLogger.getLogger().Info("Payload string: " + messageString);    sendDataMessage(messageString);  } catch (  TransientNetworkDisconnectionException|NoConnectionException|IllegalStateException e) {    AppLogger.getLogger().ErrorException("Error sending data message ",e);  }}  }
class C{  @Override public synchronized void mark(int readlimit){}  }
class C{  @Override protected boolean hasRequestContent(){  log.trace("enter GenericMethod.hasRequestContent()");  if (!this.params.isEmpty()) {    return true;  }  return super.hasRequestContent();}  }
class C{  public String createFile(String title,MediaType mimeType,String parentFolderId,byte[] bytes) throws IOException {  return drive.files().insert(createFileReference(title,mimeType,parentFolderId),new ByteArrayContent(mimeType.toString(),bytes)).execute().getId();}  }
class C{  public DataSourceTest(String name){  super(name);}  }
class C{  public void removeAllCallbacks(){  removeAllScanningCallbacks();  removeAllConnectionCallbacks();  removeAllErrorCallbacks();}  }
class C{  protected void countObjectAccess(){  if (objaccess != null) {    objaccess.increment();  }}  }
class C{  @Override public String toString(){  return " at character " + pos + " of "+ in;}  }
class C{  private static AppletListener removeInternal(AppletListener l,AppletListener oldl){  if (l == oldl || l == null) {    return null;  } else   if (l instanceof AppletEventMulticaster) {    return ((AppletEventMulticaster)l).remove(oldl);  } else {    return l;  }}  }
class C{  private boolean compare(Map<Integer,Integer> expVals) throws Exception {  cmpLatch=new CountDownLatch(putThreads());  cmp=true;  killLock.lock();  try {    log.info("Comparing cache content.");    if (!cmpLatch.await(60_000,TimeUnit.MILLISECONDS))     throw new IgniteCheckedException("Failed to suspend threads executing put.");    if (compareCaches(expVals)) {      log.info("Cache comparison succeeded.");      return true;    } else {      log.error("Cache comparison failed.");      return false;    }  }  finally {    killLock.unlock();    lock.lock();    try {      cmp=false;      putCond.signalAll();    }  finally {      lock.unlock();    }    U.sleep(500);  }}  }
class C{  public void resetRotation(){  this.rotationX=0.0F;  this.rotationY=0.0F;  this.rotationZ=0.0F;}  }
class C{  public void newLine() throws IOException {  write(lineSeparator);}  }
class C{  @Override public void onError(Context context,String errorId){}  }
class C{  public void testMixed(){  ArgumentParser parser=new ArgumentParser(new String[]{"-xcf","myfile.tgz","file1","file2","--verbose"},true);  Iterator<String> iter=parser.iterator();  assertEquals("-x",iter.next());  assertEquals("-c",iter.next());  assertEquals("-f",iter.next());  assertEquals("myfile.tgz",iter.next());  assertEquals("file1",iter.next());  assertEquals("file2",iter.next());  assertEquals("--verbose",iter.next());  assertIteratorAtEnd(iter);  parser=new ArgumentParser(new String[]{"-xcf","myfile.tgz","file1","file2","--verbose"},false);  iter=parser.iterator();  assertEquals("-xcf",iter.next());  assertEquals("myfile.tgz",iter.next());  assertEquals("file1",iter.next());  assertEquals("file2",iter.next());  assertEquals("--verbose",iter.next());  assertIteratorAtEnd(iter);  parser=new ArgumentParser(new String[]{"-xcf","=","=a","=ab","-=","-=a","--=","--=a","--a=b"},false);  iter=parser.iterator();  assertEquals("-xcf",iter.next());  assertEquals("=",iter.next());  assertEquals("=a",iter.next());  assertEquals("=ab",iter.next());  assertEquals("-=",iter.next());  assertEquals("-=a",iter.next());  assertEquals("--=",iter.next());  assertEquals("--=a",iter.next());  assertEquals("--a",iter.next());  assertEquals("b",iter.next());  assertIteratorAtEnd(iter);}  }
class C{  public static void binderInit(){  ProfilerSection sec=Profiler.INSTANCE.section("JavaScript");  sec.start("LoadSystem");  loadSystem();  sec.stop("LoadSystem");  sec.start("Engine");  JSEngine.init();  sec.stop("Engine");}  }
class C{  @Override public void close() throws IOException, BadCiphertextException {  if (outBytes_.length == 0) {    outBytes_=new byte[cryptoHandler_.estimateOutputSize(0)];    lastProcessedLen_=0;  }  int finalLen=cryptoHandler_.doFinal(outBytes_,lastProcessedLen_);  outputStream_.write(outBytes_,lastProcessedLen_,finalLen);  outputStream_.close();}  }
class C{  private void consistencyCheck(){  log.info("Checking for missing waiting times ...");  Iterator<Long> transitStopKeyIterator=transitStop.keySet().iterator();  int removedVISUMDataEntries=0;  ArrayList<Long> removeTransitStops=new ArrayList<Long>();  while (transitStopKeyIterator.hasNext()) {    long key=transitStopKeyIterator.next();    if (visumData.containsKey(key)) {      ArrayList<VISUMObject> list=visumData.get(key);      int localCounter=0;      for (int i=0; i < list.size(); i++) {        VISUMObject vo=list.get(i);        long destinationKey=vo.getDestinationBezirkNummer();        if (!transitStop.containsKey(destinationKey)) {          if (!removeTransitStops.contains(destinationKey))           removeTransitStops.add(destinationKey);          list.remove(i);          i--;          localCounter++;        } else         if ((vo.getWarteZeit() < 0) || (vo.getReiseZeit() < 0.)) {          list.remove(i);          i--;          localCounter++;        }      }      removedVISUMDataEntries+=localCounter;      log.warn("Removed " + localCounter + " entries in transit stop "+ key+ ". These entries had no waiting- or travel times ...");    } else {      if (!removeTransitStops.contains(key))       removeTransitStops.add(key);    }  }  for (int i=0; i < removeTransitStops.size(); i++) {    transitStop.remove(removeTransitStops.get(i));    log.warn("Removed transit stop:" + removeTransitStops.get(i) + ". It is not used in VISUM ...");  }  log.info(removeTransitStops.size() + " transit stops and " + removedVISUMDataEntries+ " VISUM entries are removed.");}  }
class C{  public CurrencyException(String message,Object[] params){  super(message,params);}  }
class C{  private boolean isCitationEmpty(Citation citation){  if (citation != null) {    String citationId=citation.getIdentifier();    String citationText=citation.getCitation();    return (Strings.isNullOrEmpty(citationId) && Strings.isNullOrEmpty(citationText));  }  return true;}  }
class C{  public String generate(){  KeyNamePair docTypeKNPair=(KeyNamePair)cmbDocType.getSelectedItem().toKeyNamePair();  String docActionSelected=(String)docAction.getValue();  return generate(form.getStatusBar(),docTypeKNPair,docActionSelected);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isValidResponseCode(){  return (_flags & DNSConstants.FLAGS_RCODE) == 0;}  }
class C{  public void popCurrentTemplateRuleIsNull(){  m_currentTemplateRuleIsNull.pop();}  }
class C{  public OrgDepartment(String value){  this();  setValue(value);}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.REFERENCE_TARGET__MAPPING_MODEL:    return mappingModel != null;}return super.eIsSet(featureID);}  }
class C{  public PacketBUTTON(short code,boolean repeat,boolean down,boolean queue,short amount,byte axis){  super(PT_BUTTON);  String map_name="";  String button_name="";  short flags=0;  appendPayload(code,map_name,button_name,repeat,down,queue,amount,axis,flags);}  }
class C{  public void onGeofenceRemove(int geofenceId,int status){}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiMenuBarUI();  return MultiLookAndFeel.createUIs(mui,((MultiMenuBarUI)mui).uis,a);}  }
class C{  public StringValueModel(String name,String defaultValue){  super(name,defaultValue);}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  private void ensureCapacityHelper(int minCapacity){  if (minCapacity - elementData.length > 0)   grow(minCapacity);}  }
class C{  public void testOneDocument() throws IOException {  Directory dir=newDirectory();  IndexWriterConfig iwc=newIndexWriterConfig();  iwc.setMergePolicy(newLogMergePolicy());  IndexWriter writer=new IndexWriter(dir,iwc);  Document doc=new Document();  doc.add(new TextField("field","foo bar",Field.Store.NO));  writer.addDocument(doc);  DirectoryReader ir=DirectoryReader.open(writer);  writer.close();  PostingsEnum p1=getOnlyLeafReader(ir).postings(new Term("field","foo"),PostingsEnum.POSITIONS);  PostingsEnum p2=getOnlyLeafReader(ir).postings(new Term("field","bar"),PostingsEnum.POSITIONS);  PostingsEnum union=new MultiPhraseQuery.UnionPostingsEnum(Arrays.asList(p1,p2));  assertEquals(-1,union.docID());  assertEquals(0,union.nextDoc());  assertEquals(2,union.freq());  assertEquals(0,union.nextPosition());  assertEquals(1,union.nextPosition());  assertEquals(DocIdSetIterator.NO_MORE_DOCS,union.nextDoc());  ir.close();  dir.close();}  }
class C{  public UserRoleExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public ApprovalAttribute asApprovalAttribute(PatchSetApproval approval,LabelTypes labelTypes){  ApprovalAttribute a=new ApprovalAttribute();  a.type=approval.getLabelId().get();  a.value=Short.toString(approval.getValue());  a.by=asAccountAttribute(approval.getAccountId());  a.grantedOn=approval.getGranted().getTime() / 1000L;  a.oldValue=null;  LabelType lt=labelTypes.byLabel(approval.getLabelId());  if (lt != null) {    a.description=lt.getName();  }  return a;}  }
class C{  private void init(int textMode){  if (cutAction == null) {    createPopupMenuActions();  }  undoManager=new RUndoManager(this);  getDocument().addUndoableEditListener(undoManager);  Color markAllHighlightColor=getDefaultMarkAllHighlightColor();  markAllHighlightPainter=new ChangeableHighlightPainter(markAllHighlightColor);  setMarkAllHighlightColor(markAllHighlightColor);  carets=new int[2];  setCaretStyle(INSERT_MODE,ConfigurableCaret.THICK_VERTICAL_LINE_STYLE);  setCaretStyle(OVERWRITE_MODE,ConfigurableCaret.BLOCK_STYLE);  setDragEnabled(true);  setTextMode(textMode);  fixCtrlH();}  }
class C{  public static String encode(byte[] data){  int start=0;  int len=data.length;  StringBuffer buf=new StringBuffer(data.length * 3 / 2);  int end=len - 3;  int i=start;  while (i <= end) {    int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 0x0ff) << 8) | (((int)data[i + 2]) & 0x0ff);    buf.append(legalChars[(d >> 18) & 63]);    buf.append(legalChars[(d >> 12) & 63]);    buf.append(legalChars[(d >> 6) & 63]);    buf.append(legalChars[d & 63]);    i+=3;  }  if (i == start + len - 2) {    int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 255) << 8);    buf.append(legalChars[(d >> 18) & 63]);    buf.append(legalChars[(d >> 12) & 63]);    buf.append(legalChars[(d >> 6) & 63]);    buf.append("=");  } else   if (i == start + len - 1) {    int d=(((int)data[i]) & 0x0ff) << 16;    buf.append(legalChars[(d >> 18) & 63]);    buf.append(legalChars[(d >> 12) & 63]);    buf.append("==");  }  return buf.toString();}  }
class C{  private ThrowableSet registerSetIfNew(Set include,Set exclude){  if (INSTRUMENTING) {    registrationCalls++;  }  if (include == null) {    include=Collections.EMPTY_SET;  }  if (exclude == null) {    exclude=Collections.EMPTY_SET;  }  int size=include.size() + exclude.size();  Integer sizeKey=new Integer(size);  List<ThrowableSet> sizeList=sizeToSets.get(sizeKey);  if (sizeList == null) {    sizeList=new LinkedList<ThrowableSet>();    sizeToSets.put(sizeKey,sizeList);  }  for (  ThrowableSet set : sizeList) {    if (set.exceptionsIncluded.equals(include) && set.exceptionsExcluded.equals(exclude)) {      return set;    }  }  if (INSTRUMENTING) {    registeredSets++;  }  ThrowableSet result=new ThrowableSet(include,exclude);  sizeList.add(result);  return result;}  }
class C{  default B generation(final GenerationEnum generationState){  this.meta().setGenerationState(generationState);  return this.getBuilder();}  }
class C{  public BaseBrowserView(){  initialUrl="about:blank";}  }
class C{  public static Polygon2D fromEdgeLength(float len,int res){  return new Circle(getRadiusForEdgeLength(len,res)).toPolygon2D(res);}  }
class C{  public final boolean hasMorePages(PhotoListType photoListType){  return !(mCacheStore.getNextPage(photoListType) == 0);}  }
class C{  public CompetitiveTrainerControlsPanel(final NetworkPanel panel,final CompetitiveTrainer trainer,final CompetitiveNetwork network){  this.panel=panel;  this.trainer=trainer;  this.network=network;  init();}  }
class C{  public static List<URI> ids(Collection<? extends DataObjectRestRep> values){  List<URI> ids=new ArrayList<URI>();  if (values != null) {    for (    DataObjectRestRep value : values) {      ids.add(value.getId());    }  }  return ids;}  }
class C{  private void updateTriggerProcessParameters(TriggerProcess triggerProcess,List<VOTriggerProcessParameter> parameters){  for (  VOTriggerProcessParameter parameter : parameters) {    org.oscm.types.enumtypes.TriggerProcessParameterName paramName=org.oscm.types.enumtypes.TriggerProcessParameterName.valueOf(parameter.getType().name());    TriggerProcessParameter param=triggerProcess.getParamValueForName(paramName);    if (org.oscm.types.enumtypes.TriggerProcessParameterName.PRODUCT.equals(paramName) && param != null) {      VOService originalService=param.getValue(VOService.class);      VOService updatedService=(VOService)parameter.getValue();      updateVOParameters(originalService.getParameters(),updatedService.getParameters());      param.setValue(originalService);    } else     if (param != null) {      param.setValue(parameter.getValue());    }  }}  }
class C{  public FishSource(final String itemName){  this.itemName=itemName;  put("class","source");  put("name","fish_source");  setMenu("Fish");  setDescription("There is something in the water.");}  }
class C{  public void prepare(Session s,ArrayList<IndexCondition> indexConditions){  this.session=s;  alwaysFalse=false;  start=end=null;  inList=null;  inColumn=null;  inResult=null;  inResultTested=null;  intersects=null;  for (int i=0, size=indexConditions.size(); i < size; i++) {    IndexCondition condition=indexConditions.get(i);    if (condition.isAlwaysFalse()) {      alwaysFalse=true;      break;    }    Column column=condition.getColumn();    if (condition.getCompareType() == Comparison.IN_LIST) {      if (start == null && end == null) {        if (canUseIndexForIn(column)) {          this.inColumn=column;          inList=condition.getCurrentValueList(s);          inListIndex=0;        }      }    } else     if (condition.getCompareType() == Comparison.IN_QUERY) {      if (start == null && end == null) {        if (canUseIndexForIn(column)) {          this.inColumn=column;          inResult=condition.getCurrentResult();        }      }    } else {      Value v=condition.getCurrentValue(s);      boolean isStart=condition.isStart();      boolean isEnd=condition.isEnd();      boolean isIntersects=condition.isSpatialIntersects();      int columnId=column.getColumnId();      if (columnId >= 0) {        IndexColumn idxCol=indexColumns[columnId];        if (idxCol != null && (idxCol.sortType & SortOrder.DESCENDING) != 0) {          boolean temp=isStart;          isStart=isEnd;          isEnd=temp;        }      }      if (isStart) {        start=getSearchRow(start,columnId,v,true);      }      if (isEnd) {        end=getSearchRow(end,columnId,v,false);      }      if (isIntersects) {        intersects=getSpatialSearchRow(intersects,columnId,v);      }      if (isStart || isEnd) {        inColumn=null;        inList=null;        inResult=null;      }      if (!session.getDatabase().getSettings().optimizeIsNull) {        if (isStart && isEnd) {          if (v == ValueNull.INSTANCE) {            alwaysFalse=true;          }        }      }    }  }}  }
class C{  public void indent(){  indent.append("  ");}  }
class C{  public static void solve(char[][] board){  if (board == null || board.length == 0 || board[0].length == 0)   return;  Queue<Integer> q=new LinkedList<Integer>();  int m=board.length;  int n=board[0].length;  boolean[][] visited=new boolean[m][n];  int[][] dir={{1,0},{-1,0},{0,-1},{0,1}};  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      if (board[i][j] == 'O' && !visited[i][j]) {        boolean surround=true;        List<Integer> pointsToChange=new ArrayList<Integer>();        q.add(i * n + j);        visited[i][j]=true;        while (q.size() > 0) {          int point=q.poll();          pointsToChange.add(point);          int x=point / n;          int y=point % n;          for (int k=0; k < dir.length; k++) {            int nextX=x + dir[k][0];            int nextY=y + dir[k][1];            if (nextX >= 0 && nextX < m && nextY >= 0 && nextY < n) {              if (board[nextX][nextY] == 'O' && !visited[nextX][nextY])               q.add(nextX * n + nextY);              visited[nextX][nextY]=true;            } else             surround=false;          }        }        if (surround)         for (        int p : pointsToChange)         board[p / n][p % n]='X';      }    }  }}  }
class C{  public static int[] lastIndexOfIgnoreCase(String s,String arr[]){  return lastIndexOfIgnoreCase(s,arr,s.length());}  }
class C{  @Override public CacheObject<V> put(K key,V value){  CacheObject<V> obj=new CacheObject<V>();  obj.setData(value);  obj.setForever(validTime == -1);  return put(key,obj);}  }
class C{  public XNodeSetForDOM(XNodeSet val){  super(val);  if (val instanceof XNodeSetForDOM)   m_origObj=((XNodeSetForDOM)val).m_origObj;}  }
class C{  public ManagementPermission(String name,String actions) throws IllegalArgumentException {  super(name);  if (!name.equals("control") && !name.equals("monitor")) {    throw new IllegalArgumentException("name: " + name);  }  if (actions != null && actions.length() > 0) {    throw new IllegalArgumentException("actions: " + actions);  }}  }
class C{  public final boolean remove(FilterParamIndexBase index){  return indizes.remove(index);}  }
class C{  public static VirtualFile findFileByURL(@NotNull URL url){  VirtualFileManager virtualFileManager=VirtualFileManager.getInstance();  return findFileByURL(url,virtualFileManager);}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  if (file == null || !file.exists()) {    throw new FileNotFoundException();  }  if (key != null) {    fileParams.put(key,new FileWrapper(file,contentType));  }}  }
class C{  protected boolean doMatch(String pattern,String path,boolean fullMatch,Map<String,String> uriTemplateVariables){  if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {    return false;  }  String[] pattDirs=StringHelper.tokenizeToStringArray(pattern,this.pathSeparator);  String[] pathDirs=StringHelper.tokenizeToStringArray(path,this.pathSeparator);  int pattIdxStart=0;  int pattIdxEnd=pattDirs.length - 1;  int pathIdxStart=0;  int pathIdxEnd=pathDirs.length - 1;  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxStart];    if ("**".equals(patDir)) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxStart],uriTemplateVariables)) {      return false;    }    pattIdxStart++;    pathIdxStart++;  }  if (pathIdxStart > pathIdxEnd) {    if (pattIdxStart > pattIdxEnd) {      return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator));    }    if (!fullMatch) {      return true;    }    if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {      return true;    }    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  } else   if (pattIdxStart > pattIdxEnd) {    return false;  } else   if (!fullMatch && "**".equals(pattDirs[pattIdxStart])) {    return true;  }  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxEnd];    if (patDir.equals("**")) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxEnd],uriTemplateVariables)) {      return false;    }    pattIdxEnd--;    pathIdxEnd--;  }  if (pathIdxStart > pathIdxEnd) {    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  }  while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {    int patIdxTmp=-1;    for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {      if (pattDirs[i].equals("**")) {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == pattIdxStart + 1) {      pattIdxStart++;      continue;    }    int patLength=(patIdxTmp - pattIdxStart - 1);    int strLength=(pathIdxEnd - pathIdxStart + 1);    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        String subPat=pattDirs[pattIdxStart + j + 1];        String subStr=pathDirs[pathIdxStart + i + j];        if (!matchStrings(subPat,subStr,uriTemplateVariables)) {          continue strLoop;        }      }      foundIdx=pathIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    pattIdxStart=patIdxTmp;    pathIdxStart=foundIdx + patLength;  }  for (int i=pattIdxStart; i <= pattIdxEnd; i++) {    if (!pattDirs[i].equals("**")) {      return false;    }  }  return true;}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  private void touch(final DistributionSet distributionSet){  final DistributionSet latestDistributionSet=findDistributionSetById(distributionSet.getId());  entityManager.merge((JpaDistributionSet)latestDistributionSet).setLastModifiedAt(0L);}  }
class C{  public static void main(String[] args){  ClientJavaMain main=new ClientJavaMain();  try {    main.run();  } catch (  Throwable t) {    log.log(Level.SEVERE,"Failed to run client java main",t);  }}  }
class C{  public void paintRadioButtonMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void fixZeroLength() throws IOException, RSSException {  tempFile=File.createTempFile(".rsslib4jbugfix",".tmp");  tempFile.deleteOnExit();  FileWriter fw=new FileWriter(tempFile);  BufferedReader reader=new BufferedReader(new InputStreamReader(in));  BufferedWriter out=new BufferedWriter(fw);  String line="";  while ((line=reader.readLine()) != null) {    out.write(line + "\n");  }  out.flush();  out.close();  reader.close();  fw.close();  setXmlResource(tempFile.getAbsolutePath());}  }
class C{  public void organizerThresholdReached(){  if (Controller.options.LOGGING_LEVEL >= 2) {    printlnToLogWithTimePrefix("OrganizerThread reached sample size threshold\n");  }}  }
class C{  protected void paintScrollbars(Graphics g){  if (isScrollableX()) {    paintScrollbarX(g);  }  if (isScrollableY()) {    paintScrollbarY(g);  }}  }
class C{  protected void addFromChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_fromChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_fromChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__FROM_CHANNELS,true,false,true,null,null,null));}  }
class C{  public boolean removeUserById(int id){  Iterator<User> it=users.iterator();  while (it.hasNext())   if (it.next().getId() == id) {    it.remove();    return true;  }  return false;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1234) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.147 -0500",hash_original_method="4EB2522F808EA94D0A66B66F863EF421",hash_generated_method="02A74D4A84EFA9230F4E805F6BC04E85") public long totalMemory(){  return getTaintLong();}  }
class C{  private MInvoice createInvoice(MDocType dt,MInOut shipment,Timestamp invoiceDate){  log.info(dt.toString());  MInvoice invoice=new MInvoice(this,dt.getC_DocTypeInvoice_ID(),invoiceDate);  if (!invoice.save(get_TrxName())) {    m_processMsg="Could not create Invoice";    return null;  }  if (shipment != null) {    if (!INVOICERULE_AfterDelivery.equals(getInvoiceRule()))     setInvoiceRule(INVOICERULE_AfterDelivery);    MInOutLine[] sLines=shipment.getLines(false);    for (int i=0; i < sLines.length; i++) {      MInOutLine sLine=sLines[i];      MInvoiceLine iLine=new MInvoiceLine(invoice);      iLine.setShipLine(sLine);      if (sLine.sameOrderLineUOM())       iLine.setQtyEntered(sLine.getQtyEntered()); else       iLine.setQtyEntered(sLine.getMovementQty());      iLine.setQtyInvoiced(sLine.getMovementQty());      if (!iLine.save(get_TrxName())) {        m_processMsg="Could not create Invoice Line from Shipment Line";        return null;      }      sLine.setIsInvoiced(true);      if (!sLine.save(get_TrxName())) {        log.warning("Could not update Shipment line: " + sLine);      }    }  } else {    if (!INVOICERULE_Immediate.equals(getInvoiceRule()))     setInvoiceRule(INVOICERULE_Immediate);    MOrderLine[] oLines=getLines();    for (int i=0; i < oLines.length; i++) {      MOrderLine oLine=oLines[i];      MInvoiceLine iLine=new MInvoiceLine(invoice);      iLine.setOrderLine(oLine);      iLine.setQtyInvoiced(oLine.getQtyOrdered().subtract(oLine.getQtyInvoiced()));      if (oLine.getQtyOrdered().compareTo(oLine.getQtyEntered()) == 0)       iLine.setQtyEntered(iLine.getQtyInvoiced()); else       iLine.setQtyEntered(iLine.getQtyInvoiced().multiply(oLine.getQtyEntered()).divide(oLine.getQtyOrdered(),12,BigDecimal.ROUND_HALF_UP));      if (!iLine.save(get_TrxName())) {        m_processMsg="Could not create Invoice Line from Order Line";        return null;      }    }  }  invoice.processIt(DocAction.ACTION_Complete);  invoice.saveEx(get_TrxName());  setC_CashLine_ID(invoice.getC_CashLine_ID());  if (!DOCSTATUS_Completed.equals(invoice.getDocStatus())) {    m_processMsg="@C_Invoice_ID@: " + invoice.getProcessMsg();    return null;  }  return invoice;}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public void reset(){  this.element=null;}  }
class C{  public GifDrawable(@NonNull FileDescriptor fd) throws IOException {  this(GifInfoHandle.openFd(fd,0,false),null,null,true);}  }
class C{  public static final int hashCode(final double[] v1){  return Arrays.hashCode(v1);}  }
class C{  public boolean isZoomable(){  return zoomable;}  }
class C{  public static String toJSONString(List list){  if (list == null)   return "null";  boolean first=true;  StringBuffer sb=new StringBuffer();  Iterator iter=list.iterator();  sb.append('[');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Object value=iter.next();    if (value == null) {      sb.append("null");      continue;    }    sb.append(JSONValue.toJSONString(value));  }  sb.append(']');  return sb.toString();}  }
class C{  private boolean isPortConnected(StoragePortsAllocator allocator,StoragePort sPort,boolean checkConnectivity){  if (checkConnectivity && (allocator.getSwitchName(sPort,_dbClient) == null)) {    return false;  }  return true;}  }
class C{  public Vector3d fma(double a,Vector3dc b){  x+=a * b.x();  y+=a * b.y();  z+=a * b.z();  return this;}  }
class C{  public TransferEntropyCalculatorViaCondMutualInfo(Class<ConditionalMutualInfoCalculatorMultiVariate> condMiCalcClass) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  ConditionalMutualInfoCalculatorMultiVariate condMiCalc=condMiCalcClass.newInstance();  construct(condMiCalc);}  }
class C{  private void buildCodes(final BitVector[] codeWord,final TreeDecoder.Node node,final BitVector prefix){  if (node instanceof TreeDecoder.LeafNode) {    codeWord[((TreeDecoder.LeafNode)node).symbol]=prefix;    return;  }  BitVector bitVector=prefix.copy();  bitVector.length(bitVector.length() + 1);  buildCodes(codeWord,node.left,bitVector);  bitVector=prefix.copy();  bitVector.length(bitVector.length() + 1);  bitVector.set(bitVector.size() - 1);  buildCodes(codeWord,node.right,bitVector);}  }
class C{  public List<Synapse> connectSparse(List<Neuron> sourceNeurons,List<Neuron> targetNeurons){  return connectSparse(sourceNeurons,targetNeurons,connectionDensity,selfConnectionAllowed,equalizeEfferents,true);}  }
class C{  synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (isClosed) {    throw new IOException("Pipe is closed");  }  if (buffer == null) {    buffer=new char[PIPE_SIZE];  }  isConnected=true;}  }
class C{  @Override public ListIterator<E> listIterator(int index){  if (this.lists.size() > 1 || this.lists.isEmpty()) {    this.flattenLists();  }  return super.listIterator(index);}  }
class C{  public void commit(){  for (int i=this.pendingNotifications.size() - 1; i >= 0; --i) {    this.observer.notify(this.pendingNotifications.get(i));  }}  }
class C{  @Path(TriggerCommonParams.PATH_ACTIONS) public Action redirectToAction(){  return new Action();}  }
class C{  private void searchPrevious(){  if (searchResult.size() > 1) {    Object element=searchResult.get(searchResultIndex--);    if (searchResultIndex < 0)     searchResultIndex+=searchResult.size();    Object prevElement=searchResult.get(searchResultIndex);    labelProvider.setSearchResultElement(prevElement);    treeViewer.update(element,null);    treeViewer.update(prevElement,null);    treeViewer.reveal(prevElement);    updateStatusLabel();  }}  }
class C{  public void addLike(Song song){  addLikingImpl(song,PREF_LIKED_ENTRIES);}  }
class C{  public boolean isAvoidFirstLastClippingEnabled(){  return mAvoidFirstLastClipping;}  }
class C{  public TreeViewerColumnBuilder labelProvider(CellLabelProvider labelProvider){  this.cellLabelProvider=labelProvider;  return this;}  }
class C{  public VNXeCommandJob deleteFileSystemQuota(String quotaId) throws VNXeException {  _url=URL_INSTANCE + quotaId;  _logger.info("delete quota with ID: " + quotaId);  setQueryParameters(null);  if (getDataForOneObject(VNXUnityTreeQuota.class) != null) {    unsetQueryParameters();    return deleteRequestAsync(null);  } else {    throw VNXeException.exceptions.vnxeCommandFailed(String.format("No filesystem quota with id: %s found",quotaId));  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i=0;  int rows, cols;  double p1=0, p2=0, p3=0, p4=0;  int a;  int numCols;  int numRows;  int progress;  double halfPI=Math.PI / 2;  double outputVal;  double smallVal=-9999999;  double largeVal=9999999;  int row, col;  String modelType="sigmoidal";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("linear")) {        modelType="linear";      } else {        modelType="sigmoidal";      }    } else     if (i == 3) {      if (args[i].toLowerCase().equals("not specified")) {        p1=smallVal;      } else {        p1=Double.parseDouble(args[i]);      }    } else     if (i == 4) {      if (args[i].toLowerCase().equals("not specified")) {        p2=smallVal;      } else {        p2=Double.parseDouble(args[i]);      }    } else     if (i == 5) {      if (args[i].toLowerCase().equals("not specified")) {        p3=largeVal;      } else {        p3=Double.parseDouble(args[i]);      }    } else     if (i == 6) {      if (args[i].toLowerCase().equals("not specified")) {        p4=largeVal;      } else {        p4=Double.parseDouble(args[i]);      }    }  }  if (inputHeader == null || outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if ((p1 == smallVal && p2 != smallVal) || (p1 != smallVal && p2 == smallVal) || (p3 == largeVal && p4 != largeVal)|| (p3 != largeVal && p4 == largeVal)) {    showFeedback("Sigmoid parameters not set properly");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setPreferredPalette("spectrum.pal");    double range1=p2 - p1;    double range2=p4 - p3;    double[] data=null;    if (modelType.equals("sigmoidal")) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            if (data[col] <= p1) {              outputVal=0;            } else             if (data[col] > p1 && data[col] < p2) {              outputVal=1 - Math.cos(((data[col] - p1)) / range1 * halfPI) * Math.cos(((data[col] - p1)) / range1 * halfPI);            } else             if (data[col] >= p2 && data[col] <= p3) {              outputVal=1;            } else             if (data[col] > p3 && data[col] < p4) {              outputVal=(Math.cos((data[col] - p3) / range2 * halfPI) * Math.cos((data[col] - p3) / range2 * halfPI));            } else {              outputVal=0;            }            output.setValue(row,col,outputVal);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            if (data[col] <= p1) {              outputVal=0;            } else             if (data[col] > p1 && data[col] < p2) {              outputVal=(data[col] - p1) / range1;            } else             if (data[col] >= p2 && data[col] <= p3) {              outputVal=1;            } else             if (data[col] > p3 && data[col] < p4) {              outputVal=1 - (data[col] - p3) / range2;            } else {              outputVal=0;            }            output.setValue(row,col,outputVal);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final InputStream locate(final String uri) throws IOException {  final UriLocator uriLocator=getInstance(uri);  if (uriLocator == null) {    throw new WroRuntimeException("No locator is capable of handling uri: " + uri);  }  LOG.debug("[OK] locating {} using locator: {}",uri,uriLocator.getClass().getSimpleName());  return new AutoCloseInputStream(uriLocator.locate(uri));}  }
class C{  public boolean hasOption(String name){  return nameToOptions.get(name) != null;}  }
class C{  public CROSS_JOIN CROSS_JOIN(String tableToJoin){  return new CROSS_JOIN(this,tableToJoin);}  }
class C{  public boolean canHandleInputOperation(String operationName){  if (canHandleInputOperationDirectly(operationName)) {    return true;  } else {    return aggregationMap.containsKey(operationName);  }}  }
class C{  boolean popChanged(){  boolean changed=this.changed;  this.changed=false;  return changed;}  }
class C{  public static void log(String event,Map<String,Object> data){  log(event,SYSTEM_USER,data);}  }
class C{  @Override public void renderer(ArrayList<StaticCluster> clusters,Canvas canvas,MapView mapView){  for (  StaticCluster cluster : clusters) {    if (cluster.getSize() == 1) {      cluster.setMarker(cluster.getItem(0));    } else {      Marker m=buildClusterMarker(cluster,mapView);      cluster.setMarker(m);    }  }}  }
class C{  public void resetFriction(){  contact.resetFriction();}  }
class C{  private MoveOption[] thirdPass(CEntity self,List<Entity> enemy_array){  MoveOption[] move_array=self.pass.values().toArray(new MoveOption[0]);  self.pass.clear();  for (  MoveOption option : move_array) {    option.setState();    double adjustment=0;    double temp_adjustment=0;    for (int e=0; e < enemy_array.size(); e++) {      Entity en=enemy_array.get(e);      CEntity enemy=centities.get(en);      int current_range=self.current.getFinalCoords().distance(enemy.current.getFinalCoords());      int range=option.getFinalCoords().distance(enemy.current.getFinalCoords());      if (range > self.long_range) {        temp_adjustment+=(!(range < enemy.long_range) ? .5 : 1) * (1 + self.range_damages[self.range]) * (Math.max(range - self.long_range - (.5 * Math.max(self.jumpMP,.8 * self.runMP)),0));      }      if (((self.range == CEntity.RANGE_SHORT) && ((current_range > 5) || (range > 9))) || ((self.range_damages[CEntity.RANGE_SHORT] < 4) && (current_range > 10))) {        temp_adjustment+=((enemy.range > CEntity.RANGE_SHORT) ? .5 : 1) * (Math.max(1 + self.range_damages[CEntity.RANGE_SHORT],5)) * Math.max(range - (.5 * Math.max(self.jumpMP,.8 * self.runMP)),0);      } else       if (self.range == CEntity.RANGE_MEDIUM) {        temp_adjustment+=(((current_range < 6) || (current_range > 12)) ? 1 : .25) * ((enemy.range > CEntity.RANGE_SHORT) ? .5 : 1) * (1 + self.range_damages[CEntity.RANGE_MEDIUM])* Math.abs(range - (.5 * Math.max(self.jumpMP,.8 * self.runMP)));      } else       if (option.damage < (.25 * self.range_damages[CEntity.RANGE_LONG])) {        temp_adjustment+=((range < 10) ? .25 : 1) * (Math.max(1 + self.range_damages[CEntity.RANGE_LONG],3)) * (1 / (1 + option.threat));      }      adjustment+=Math.sqrt((temp_adjustment * enemy.bv) / self.bv);      if (!(enemy.getEntity().isProne() || enemy.getEntity().isImmobile()) && (CEntity.getThreatHitArc(option.getFinalCoords(),option.getFinalFacing(),enemy.getEntity().getPosition()) != ToHitData.SIDE_FRONT)) {        int fa=CEntity.getFiringAngle(option.getFinalCoords(),option.getFinalFacing(),enemy.getEntity().getPosition());        if ((fa > 90) && (fa < 270)) {          int distance=option.getFinalCoords().distance(enemy.current.getFinalCoords());          double mod=1;          if ((fa > 130) && (fa < 240)) {            mod=2;          }          mod*=(((Math.max(self.jumpMP,.8 * self.runMP) < 5) ? 2 : 1) * ((double)self.bv / (double)50) * Math.sqrt(((double)self.bv) / enemy.bv)) / (((double)distance / 6) + 1);          option.self_threat+=mod;          if (debug) {            option.tv.add(mod + " " + fa+ " Back to enemy\n");          }        }      }    }    adjustment*=(self.overall_armor_percent * self.strategy.attack) / enemy_array.size();    IHex h=game.getBoard().getHex(option.getFinalCoords());    if (h.containsTerrain(Terrains.WATER) && (h.surface() > (self.getEntity().getElevation() + ((option.getFinalProne()) ? 0 : 1)))) {      double mod=((self.getEntity().heat + option.getMovementheatBuildup()) <= 7) ? 100 : 30;      adjustment+=self.bv / mod;    }    if (self.range > CEntity.RANGE_SHORT) {      int ele_dif=game.getBoard().getHex(option.getFinalCoords()).getLevel() - game.getBoard().getHex(self.current.getFinalCoords()).getLevel();      adjustment-=(Math.max(ele_dif,0) + 1) * ((double)Compute.getTargetTerrainModifier(game,option.getEntity()).getValue() + 1);    }    if ((option.damage < (.25 * self.range_damages[self.range])) && (adjustment < self.range_damages[self.range])) {      for (int e=0; e < enemy_array.size(); e++) {        Entity en=enemy_array.get(e);        CEntity enemy=centities.get(en);        int range=option.getFinalCoords().distance(enemy.current.getFinalCoords());        if (range > 5) {          adjustment+=(Math.pow(self.overall_armor_percent,2) * Math.sqrt(((double)(range - 4) * enemy.bv) / self.bv)) / enemy_array.size();        }      }    }    if (option.damage < (.25 * (1 + self.range_damages[self.range]))) {      option.self_threat+=2 * adjustment;    } else     if (option.damage < (.5 * (1 + self.range_damages[self.range]))) {      option.self_threat+=adjustment;    }    if (debug) {      option.tv.add(option.self_threat + " Initial Damage Adjustment " + "\n");    }  }  return move_array;}  }
class C{  public void exportPreferences(SharedPreferences preferences,DataOutputStream outWriter) throws IOException {  Map<String,?> values=preferences.getAll();  for (  String name : doNotBackup) {    values.remove(name);  }  outWriter.writeInt(values.size());  for (  Map.Entry<String,?> entry : values.entrySet()) {    writePreference(entry.getKey(),entry.getValue(),outWriter);  }  outWriter.flush();}  }
class C{  void BuildPointTree(){  pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(this.points.size()));  double[] entry;  for (int i=0; i < this.points.size(); i++) {    entry=new double[]{this.points.get(i).y,this.points.get(i).x};    pointsTree.addPoint(entry,(double)i);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("VButton[");  sb.append(m_columnName);  sb.append("=").append(m_value).append("]");  return sb.toString();}  }
class C{  @Override public Object clone(){  RuleBasedCollator clone=(RuleBasedCollator)super.clone();  return clone;}  }
class C{  final void putDouble(int offset,double value){  unsafe.putDouble(offset + address,value);}  }
class C{  private void generateCollisions(LayerDefinition layer){  layer.build();  for (int i=0; i < width; i++) {    for (int j=0; j < height; j++) {      if (!((i % (WALL_THICKNESS + 1) == WALL_THICKNESS) && (j % (WALL_THICKNESS + 1) == WALL_THICKNESS))) {        setCollide(layer,i,j,true);      }    }  }  burrowCave(getStartPosition(),layer);  widenCorners(layer);}  }
class C{  private void initializeCluster(final ClusterResizeTask currentState){  Operation.CompletionHandler handler=null;  getClusterState(currentState,handler);}  }
class C{  private SpringTranslatorKey(){}  }
class C{  public static void searchView(final Window parent,final IViewContainer container,final IAddress address){  final CViewSearcherDialog dlg=new CViewSearcherDialog(parent,container,address);  dlg.setVisible(true);  final INaviView result=dlg.getSelectionResult();  if (result != null) {    CViewOpener.showView(parent,container,result,CWindowManager.instance().getLastWindow());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public synchronized void write(int b){  ensureCapacity(count + 1);  buf[count]=(byte)b;  count+=1;}  }
class C{  public static IScope createMainModuleAwareScope(IScope parent,ISelectable selectable,EClass type){  return new MainModuleAwareSelectableBasedScope(parent,selectable,null,type,true);}  }
class C{  private void firstPass(CEntity self){  List<Entity> enemies=getEnemyEntities();  MoveOption[] move_array;  if (self.getEntity().isSelectableThisTurn() && !self.moved) {    move_array=self.getAllMoves(this).values().toArray(new MoveOption[0]);  } else {    move_array=new MoveOption[]{self.current};  }  System.out.println(self.getEntity().getShortName() + " has " + move_array.length+ " moves");  for (  MoveOption option : move_array) {    option.setState();    boolean aptPiloting=option.getEntity().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING);    for (int e=0; e < enemies.size(); e++) {      Entity en=enemies.get(e);      if (en.getPosition() == null) {        continue;      }      CEntity enemy=centities.get(en);      int[] modifiers=option.getModifiers(enemy.getEntity());      if ((modifiers[MoveOption.DEFENCE_MOD] == TargetRoll.IMPOSSIBLE) && (modifiers[MoveOption.ATTACK_MOD] == TargetRoll.IMPOSSIBLE)) {        continue;      }      int enemy_hit_arc=CEntity.getThreatHitArc(enemy.current.getFinalCoords(),enemy.current.getFinalFacing(),option.getFinalCoords());      int self_hit_arc=CEntity.getThreatHitArc(option.getFinalCoords(),option.getFinalFacing(),enemy.current.getFinalCoords());      if (!enemy.getEntity().isImmobile() && (modifiers[MoveOption.DEFENCE_MOD] != TargetRoll.IMPOSSIBLE)) {        self.engaged=true;        int mod=modifiers[MoveOption.DEFENCE_MOD];        double max=option.getMaxModifiedDamage(enemy.current,mod,modifiers[MoveOption.DEFENCE_PC]);        if (en.isSelectableThisTurn()) {          enemy.current.addStep(MoveStepType.TURN_RIGHT);          max=Math.max(option.getMaxModifiedDamage(enemy.current,mod + 1,modifiers[MoveOption.DEFENCE_PC]),max);          enemy.current.removeLastStep();          enemy.current.addStep(MoveStepType.TURN_LEFT);          max=Math.max(option.getMaxModifiedDamage(enemy.current,mod + 1,modifiers[MoveOption.DEFENCE_PC]),max);          enemy.current.removeLastStep();        }        max=self.getThreatUtility(max,self_hit_arc);        if (enemy.getEntity().isProne()) {          max*=enemy.base_psr_odds;        }        MoveOption.DamageInfo di=option.getDamageInfo(enemy,true);        di.threat=max;        di.max_threat=max;        option.threat+=max;        if (debug) {          option.tv.add(max + " Threat " + e+ "\n");        }      }      if (!option.isPhysical) {        if (modifiers[MoveOption.ATTACK_MOD] != TargetRoll.IMPOSSIBLE) {          self.engaged=true;          double max=enemy.current.getMaxModifiedDamage(option,modifiers[0],modifiers[MoveOption.ATTACK_PC]);          max=enemy.getThreatUtility(max,enemy_hit_arc);          MoveOption.DamageInfo di=option.getDamageInfo(enemy,true);          di.damage=max;          di.min_damage=max;          if (debug) {            option.tv.add(max + " Damage " + e+ "\n");          }          option.damage=Math.max(max,option.damage);        }      } else {        CEntity target=centities.get(option.getPhysicalTargetId());        try {          if (target.getEntity().getId() == enemy.getEntity().getId()) {            if (!target.isPhysicalTarget) {              ToHitData toHit=null;              double self_threat=0;              double damage=0;              if (option.isJumping() && option.getEntity().canDFA()) {                self.current.setState();                toHit=DfaAttackAction.toHit(game,option.getEntity().getId(),target.getEntity(),option);                damage=2 * DfaAttackAction.getDamageFor(option.getEntity(),(target.getEntity() instanceof Infantry) && !(target.getEntity() instanceof BattleArmor));                self_threat=(option.getCEntity().getThreatUtility(DfaAttackAction.getDamageTakenBy(option.getEntity()),ToHitData.SIDE_REAR) * Compute.oddsAbove(toHit.getValue(),aptPiloting)) / 100;                self_threat+=option.getCEntity().getThreatUtility(.1 * self.getEntity().getWeight(),ToHitData.SIDE_REAR);                self_threat*=100 / option.getCEntity().getEntity().getWeight();              } else               if (option.getEntity().canCharge()) {                self.current.setState();                toHit=new ChargeAttackAction(option.getEntity(),target.getEntity()).toHit(game,option);                damage=ChargeAttackAction.getDamageFor(option.getEntity(),target.getEntity(),false,option.getHexesMoved());                self_threat=option.getCEntity().getThreatUtility(ChargeAttackAction.getDamageTakenBy(option.getEntity(),target.getEntity()),ToHitData.SIDE_FRONT) * (Compute.oddsAbove(toHit.getValue(),aptPiloting) / 100);                option.setState();              } else {                toHit=new ToHitData(TargetRoll.IMPOSSIBLE,"");              }              damage=(target.getThreatUtility(damage,toHit.getSideTable()) * Compute.oddsAbove(toHit.getValue(),aptPiloting)) / 100;              if (!option.isJumping()) {                damage*=Math.sqrt((double)enemy.bv / (double)self.bv);              }              if (toHit.getValue() > 10) {                damage=0;              }              if (toHit.getValue() < 8) {                damage*=1.5;              }              if (self.range_damages[CEntity.RANGE_SHORT] < 5) {                damage*=2;              }              MoveOption.DamageInfo di=option.getDamageInfo(enemy,true);              di.damage=damage;              di.min_damage=damage;              option.damage=damage;              option.movement_threat+=self_threat;            } else {              option.threat+=Integer.MAX_VALUE;            }          }        } catch (        Exception e1) {          e1.printStackTrace();          option.threat+=Integer.MAX_VALUE;        }      }    }    self.current.setState();  }  filterMoves(move_array,self.pass,new MoveOption.WeightedComparator(1,1),100);  filterMoves(move_array,self.pass,new MoveOption.WeightedComparator(.5,1),100);}  }
class C{  public ZDT5(int numberOfVariables){  super(numberOfVariables);}  }
class C{  protected void printAttributeSummary(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance){  String str="";  if (numericPredictor) {    str+="numeric";  }  if (nominalPredictor) {    if (str.length() > 0) {      str+=" & ";    }    str+="nominal";  }  if (stringPredictor) {    if (str.length() > 0) {      str+=" & ";    }    str+="string";  }  if (datePredictor) {    if (str.length() > 0) {      str+=" & ";    }    str+="date";  }  if (relationalPredictor) {    if (str.length() > 0) {      str+=" & ";    }    str+="relational";  }  str=" (" + str + " predictors)";  print(str);}  }
class C{  public static String bytesToHexString(byte[] data){  StringBuilder hexStrBuff=new StringBuilder(data.length * 2);  for (  byte aData : data) {    String hexByteStr=Integer.toHexString(aData & 0xff).toUpperCase();    if (hexByteStr.length() == 1) {      hexStrBuff.append("0");    }    hexStrBuff.append(hexByteStr);  }  return hexStrBuff.toString();}  }
class C{  public static String generateFingerprint(byte[] certificateDer) throws NoSuchAlgorithmException {  ValidateUtil.validateNotEmpty(certificateDer,"DER certificate");  MessageDigest digest=MessageDigest.getInstance(FINGERPRINT_ALGORITHM);  byte[] hash=digest.digest(certificateDer);  final char delimiter=':';  final int len=hash.length * 2 + hash.length - 1;  StringBuilder fingerprint=new StringBuilder(len);  for (int i=0; i < hash.length; i++) {    hash[i]&=0xff;    fingerprint.append(String.format("%02x",hash[i]));    if (i < hash.length - 1) {      fingerprint.append(delimiter);    }  }  return fingerprint.toString();}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  public CalendarEntry(){  super();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("PA_ReportLineSet_ID"))     m_PA_ReportLineSet_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void interruptMultiThreadScanning(){  interruptMultiThread=true;  mThreadStarted=false;  processCallback.onProcessFinished(getServiceName(),"Interrupting Multi Thread Scanning due to method call: interruptMultiThreadScanning()");}  }
class C{  public String substringLower(int start){  return substringLower(start,text.length - start);}  }
class C{  private void checkWrittenXmlStream(Object data,Map<String,Object> meta,String contextURL,String expectedEntityPath,boolean isWriteOperation) throws ODataRenderException, IOException, TransformerException {  dateTime=ZonedDateTime.of(2014,5,2,0,0,0,0,ZoneId.of("UTC").normalized());  AtomWriter writer=new AtomWriter(dateTime,odataUri,entityDataModel,new ODataV4AtomNSConfigurationProvider(),isWriteOperation,false);  writer.startDocument();  if (data instanceof List) {    writer.writeFeed((List<?>)data,contextURL,meta);  } else {    writer.writeEntry(data,contextURL);  }  writer.endDocument();  assertEquals(prettyPrintXml(readContent(expectedEntityPath)),prettyPrintXml(writer.getXml()));}  }
class C{  public CProjectModulesModel(final INaviAddressSpace addressSpace){  Preconditions.checkNotNull(addressSpace,"IE01955: Address space argument can't be null");  m_addressSpace=addressSpace;  addressSpace.addListener(m_addressSpaceListener);  if (addressSpace.isLoaded()) {    addressSpace.getContent().addListener(m_contentListener);    for (    final INaviModule module : addressSpace.getContent().getModules()) {      module.addListener(m_modulesListener);    }  }}  }
class C{  String completedLedgerZNode(long firstTxId,long lastTxId,long logSegmentSeqNo){  return String.format("%s/%s",logMetadata.getLogSegmentsPath(),completedLedgerZNodeName(firstTxId,lastTxId,logSegmentSeqNo));}  }
class C{  public Object show(Wizard wizard,Rectangle r,Action help){  return WizardDisplayer.showWizard(wizard,r,help,null);}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  @SuppressWarnings("unused") public long create_movie_header_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  if (version == 1) {    creationTime=createDate(bitstream.readBytes(8));    modificationTime=createDate(bitstream.readBytes(8));    timeScale=(int)bitstream.readBytes(4);    duration=bitstream.readBytes(8);    readed+=28;  } else {    creationTime=createDate(bitstream.readBytes(4));    modificationTime=createDate(bitstream.readBytes(4));    timeScale=(int)bitstream.readBytes(4);    duration=bitstream.readBytes(4);    readed+=16;  }  int qt_preferredRate=(int)bitstream.readBytes(4);  int qt_preferredVolume=(int)bitstream.readBytes(2);  bitstream.skipBytes(10);  long qt_matrixA=bitstream.readBytes(4);  long qt_matrixB=bitstream.readBytes(4);  long qt_matrixU=bitstream.readBytes(4);  long qt_matrixC=bitstream.readBytes(4);  long qt_matrixD=bitstream.readBytes(4);  long qt_matrixV=bitstream.readBytes(4);  long qt_matrixX=bitstream.readBytes(4);  long qt_matrixY=bitstream.readBytes(4);  long qt_matrixW=bitstream.readBytes(4);  long qt_previewTime=bitstream.readBytes(4);  long qt_previewDuration=bitstream.readBytes(4);  long qt_posterTime=bitstream.readBytes(4);  long qt_selectionTime=bitstream.readBytes(4);  long qt_selectionDuration=bitstream.readBytes(4);  long qt_currentTime=bitstream.readBytes(4);  long nextTrackID=bitstream.readBytes(4);  readed+=80;  return readed;}  }
class C{  public int executeForChangedRowCount(String sql,Object[] bindArgs,int connectionFlags){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags)) {    return 0;  }  acquireConnection(sql,connectionFlags);  try {    return mConnection.executeForChangedRowCount(sql,bindArgs);  }  finally {    releaseConnection();  }}  }
class C{  public SipRequestLine createRequestLine(String requestLine) throws ParseException {  RequestLineParser requestLineParser=new RequestLineParser(requestLine);  return (SipRequestLine)requestLineParser.parse();}  }
class C{  MyDCReceiver(DirectChannelListener up){  upCall=up;}  }
class C{  private void launchZoom(final ZoomInfoFactory.ZoomInfo zoomInfo){  final int AD_Window_ID=zoomInfo.windowId;  final MQuery query=zoomInfo.query;  log.info("AD_Window_ID=" + AD_Window_ID + " - "+ query);  AEnv.zoom(AD_Window_ID,query);}  }
class C{  public List<LockPatternView.Cell> stringToPattern(String string){  List<LockPatternView.Cell> result=Lists.newArrayList();  final byte size=getLockPatternSize();  LockPatternView.Cell.updateSize(size);  final byte[] bytes=string.getBytes();  for (int i=0; i < bytes.length; i++) {    byte b=bytes[i];    result.add(LockPatternView.Cell.of(b / size,b % size,size));  }  return result;}  }
class C{  public static Query newMatchNoDocsQuery(){  return new BooleanQuery.Builder().build();}  }
class C{  public void doExportMaskZoningMapUpdate(URI exportGroupURI,URI storageURI,String token) throws ControllerException {  _log.info("START - doExportMaskZoningMapUpdate");  WorkflowStepCompleter.stepExecuting(token);  try {    ExportGroup eg=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,eg);    if (!exportMasks.isEmpty()) {      ExportMask mask=exportMasks.get(0);      _blockScheduler.updateZoningMap(mask,eg.getVirtualArray(),exportGroupURI);    }    WorkflowStepCompleter.stepSucceded(token);  } catch (  final InternalException e) {    _log.error("Encountered an exception",e);    WorkflowStepCompleter.stepFailed(token,e);  }catch (  final Exception e) {    _log.error("Encountered an exception",e);    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    WorkflowStepCompleter.stepFailed(token,serviceError);  }  _log.info("END - doExportMaskZoningMapUpdate");}  }
class C{  public static AffineTransformation createFromControlVectors(Coordinate src0,Coordinate dest0){  double dx=dest0.x - src0.x;  double dy=dest0.y - src0.y;  return AffineTransformation.translationInstance(dx,dy);}  }
class C{  public boolean deleteOwnerName(String owner){  if (!_ownerList.contains(owner)) {    return false;  }  _ownerList.remove(owner);  log.debug("train (" + getName() + ") delete car owner "+ owner);  setDirtyAndFirePropertyChange(OWNERS_CHANGED_PROPERTY,_ownerList.size() + 1,_ownerList.size());  return true;}  }
class C{  public DocumentHeaderImpl(){  properties=new HashMap<String,Object>();}  }
class C{  private void validateHeader(boolean validateRecordSize) throws IOException {  int readmagic=file.readInt();  if (readmagic != this.magic) {    file.close();    throw new IOException("Magic in LinearDiskCache does not match: " + readmagic + " instead of "+ this.magic);  }  if (file.readInt() != this.headersize) {    file.close();    throw new IOException("Header size in LinearDiskCache does not match.");  }  if (validateRecordSize) {    if (file.readInt() != this.recordsize) {      file.close();      throw new IOException("Recordsize in LinearDiskCache does not match.");    }  } else {    this.recordsize=file.readInt();  }  if (file.getFilePointer() != HEADER_POS_SIZE) {    throw new IOException("Incorrect file position when reading header.");  }  this.numrecs=file.readInt();  if (numrecs < 0 || file.length() != indexToFileposition(numrecs)) {    throw new IOException("File size and number of records do not agree.");  }  if (file.getFilePointer() != INTERNAL_HEADER_SIZE) {    throw new IOException("Incorrect file position after reading header.");  }}  }
class C{  private void refreshPushersList(){  GcmRegistrationManager registrationManager=Matrix.getInstance(getActivity()).getSharedGCMRegistrationManager();  List<Pusher> pushersList=new ArrayList<>(registrationManager.mPushersList);  boolean isNewList=true;  if ((null != mDisplayedPushers) && (pushersList.size() == mDisplayedPushers.size())) {    isNewList=!mDisplayedPushers.containsAll(pushersList);  }  if (isNewList) {    mPushersSettingsCategory.removeAll();    mDisplayedPushers=pushersList;    int index=0;    for (    Pusher pusher : mDisplayedPushers) {      VectorCustomActionEditTextPreference preference=new VectorCustomActionEditTextPreference(getActivity());      if (null != pusher.lang) {        preference.setTitle(pusher.deviceDisplayName);        preference.setSummary(pusher.appDisplayName);        preference.setKey(PUSHER_PREFERENCE_KEY_BASE + index);        index++;        mPushersSettingsCategory.addPreference(preference);      }    }  }}  }
class C{  public final void shouldStopStandaloneExecution() throws ProcessStoppedException {  if (getProcess() == null) {    this.shouldStopStandaloneExecution=true;  }}  }
class C{  BinaryPropertyListWriter(OutputStream outStr) throws IOException {  out=new BufferedOutputStream(outStr);}  }
class C{  @Override public void run(){  while (!shutdown) {    try {      final Reference ref=REFERENCE_QUEUE.remove();      if (ref != null) {        handleReference(ref);      }    } catch (    final InterruptedException e) {      LOG.debug("ReferenceQueueThread interrupted",e);    }  }}  }
class C{  public void testSetReadOnly() throws Exception {  Properties props=new Properties();  props.put("autoReconnect","true");  String sepChar="?";  if (BaseTestCase.dbUrl.indexOf("?") != -1) {    sepChar="&";  }  Connection reconnectableConn=DriverManager.getConnection(BaseTestCase.dbUrl + sepChar + "autoReconnect=true",props);  this.rs=reconnectableConn.createStatement().executeQuery("SELECT CONNECTION_ID()");  this.rs.next();  String connectionId=this.rs.getString(1);  reconnectableConn.setReadOnly(true);  boolean isReadOnly=reconnectableConn.isReadOnly();  Connection killConn=getConnectionWithProps((Properties)null);  killConn.createStatement().executeUpdate("KILL " + connectionId);  Thread.sleep(2000);  SQLException caughtException=null;  int numLoops=8;  while (caughtException == null && numLoops > 0) {    numLoops--;    try {      reconnectableConn.createStatement().executeQuery("SELECT 1");    } catch (    SQLException sqlEx) {      caughtException=sqlEx;    }  }  System.out.println("Executing statement on reconnectable connection...");  this.rs=reconnectableConn.createStatement().executeQuery("SELECT CONNECTION_ID()");  this.rs.next();  assertTrue("Connection is not a reconnected-connection",!connectionId.equals(this.rs.getString(1)));  try {    reconnectableConn.createStatement().executeQuery("SELECT 1");  } catch (  SQLException sqlEx) {  }  this.rs=reconnectableConn.createStatement().executeQuery("SELECT 1");  assertTrue(reconnectableConn.isReadOnly() == isReadOnly);}  }
class C{  public String optimizeAEToolTip(){  return "Optimize the number of layers of autoencoders. If set to true " + "the number of layers will internally be optimized using a validation " + "set.";}  }
class C{  private String convertLL(double latLon){  if (Double.isNaN(latLon))   return "";  return DirectoryFormatter.parseLatLon(latLon);}  }
class C{  public ClusterControl connectToNodeInReplicatedCluster(TransportConfiguration transportConfiguration) throws Exception {  ClientSessionFactoryInternal sessionFactory=(ClientSessionFactoryInternal)replicationLocator.createSessionFactory(transportConfiguration,0,false);  return connectToNodeInCluster(sessionFactory);}  }
class C{  public void deletePoiTypeDelayed(PoiType item,Snackbar snackbar,OnClickListener undoAction){  Timber.d("Delaying poi type %d removal",item.getId());  displayNewUndoSnackbar(snackbar,undoAction,new DeleteTaskCallback(new InternalRemovePoiTypeEvent(item)));}  }
class C{  public static String read(InputStream in,String charset) throws IOException {  return new String(read(in),charset);}  }
class C{  public synchronized void add(Object listener){  if (listener == null)   throw new IllegalArgumentException();  final int oldSize=listeners.length;  for (int i=0; i < oldSize; ++i) {    Object listener2=listeners[i];    if (identity ? listener == listener2 : listener.equals(listener2))     return;  }  Object[] newListeners=new Object[oldSize + 1];  System.arraycopy(listeners,0,newListeners,0,oldSize);  newListeners[oldSize]=listener;  this.listeners=newListeners;}  }
class C{  public static String formatPrice(BigDecimal price){  if (price == null)   return "";  return priceDecimalFormat.format(price);}  }
class C{  public boolean hasValue(){  return mValue != null;}  }
class C{  public void mouseMoved(MouseEvent e){  fireMouseLocation(e);  super.mouseMoved(e);}  }
class C{  public void zoomDomainAxes(double x,double y,double factor){}  }
class C{  public static boolean validFileMD5(String path,String md5Sum){  try {    MessageDigest messageDigest=MessageDigest.getInstance("MD5");    File mFile=new File(path);    if (mFile == null || !mFile.exists() || !mFile.isFile()) {      return false;    }    FileInputStream in=new FileInputStream(mFile);    FileChannel ch=in.getChannel();    MappedByteBuffer byteBuffer=ch.map(FileChannel.MapMode.READ_ONLY,0,mFile.length());    messageDigest.update(byteBuffer);    byte[] bytes=messageDigest.digest();    final String HEX="0123456789abcdef";    StringBuilder sb=new StringBuilder(bytes.length * 2);    for (    byte b : bytes) {      sb.append(HEX.charAt((b >> 4) & 0x0f));      sb.append(HEX.charAt(b & 0x0f));    }    return md5Sum.equals(sb.toString());  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {  }  return false;}  }
class C{  public CannotCompileException(String msg){  super(msg);  message=msg;  initCause(null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetnamespaceuri03.class,args);}  }
class C{  public void update(IAnimatedEntity entity){  this.tempTick=this.prevTempTick=0;  this.correctAnimation=false;  this.entity=entity;  this.transformMap.clear();  this.prevTransformMap.clear();}  }
class C{  public String toString(){  String retval="Queue Contents " + m_Size + " elements\n";  QueueNode current=m_Head;  if (current == null) {    return retval + "Empty\n";  } else {    while (current != null) {      retval+=current.contents().toString() + "\n";      current=current.next();    }  }  return retval;}  }
class C{  private void updateNotification(){  if (mWakeLock == null && mWifiLock == null && getSessions().isEmpty()) {    stopSelf();  } else {    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(NOTIFICATION_ID,buildNotification());  }}  }
class C{  public static MasterPublicKey parse(String serialized) throws HyperLedgerException {  byte[] data=ByteUtils.fromBase58WithChecksum(serialized);  if (data.length != 78) {    throw new HyperLedgerException("invalid extended key");  }  byte[] type=Arrays.copyOf(data,4);  if (!Arrays.areEqual(type,xpub) && !Arrays.areEqual(type,tpub)) {    throw new HyperLedgerException("invalid magic number for an master public key");  }  int depth=data[4] & 0xff;  int parent=data[5] & 0xff;  parent<<=8;  parent|=data[6] & 0xff;  parent<<=8;  parent|=data[7] & 0xff;  parent<<=8;  parent|=data[8] & 0xff;  int sequence=data[9] & 0xff;  sequence<<=8;  sequence|=data[10] & 0xff;  sequence<<=8;  sequence|=data[11] & 0xff;  sequence<<=8;  sequence|=data[12] & 0xff;  byte[] chainCode=Arrays.copyOfRange(data,13,13 + 32);  byte[] pubOrPriv=Arrays.copyOfRange(data,13 + 32,data.length);  return new MasterPublicKey(new PublicKey(pubOrPriv,true),chainCode,depth,parent,sequence);}  }
class C{  public static void free(TempCharBuffer buf){  buf._next=null;  if (buf._buf.length == SIZE)   _freeList.free(buf);}  }
class C{  @Override public boolean waitUntilGone(String obj,long timeout) throws UiObjectNotFoundException {  return getUiObject(obj).waitUntilGone(timeout);}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") public static long simpleCheckJobStatFile(BufferedReader reader) throws IOException {  Collection<String> phases=new HashSet<>();  phases.add("submit");  phases.add("prepare");  phases.add("start");  phases.add("finish");  phases.add("requestId");  phases.add("responseId");  Collection<String> evtTypes=new HashSet<>();  evtTypes.add("JOB");  evtTypes.add("SETUP");  evtTypes.add("MAP");  evtTypes.add("SHUFFLE");  evtTypes.add("REDUCE");  evtTypes.add("COMBINE");  evtTypes.add("COMMIT");  long evtCnt=0;  String line;  Map<Long,String> reduceNodes=new HashMap<>();  while ((line=reader.readLine()) != null) {    String[] splitLine=line.split(":");    Long.parseLong(splitLine[1]);    String[] evt=splitLine[0].split(" ");    assertTrue("Unknown event '" + evt[0] + "'",evtTypes.contains(evt[0]));    String phase;    if ("JOB".equals(evt[0]))     phase=evt[1]; else {      assertEquals(4,evt.length);      assertTrue("The node id is not defined",!F.isEmpty(evt[3]));      long taskNum=Long.parseLong(evt[1]);      if (("REDUCE".equals(evt[0]) || "SHUFFLE".equals(evt[0]))) {        String nodeId=reduceNodes.get(taskNum);        if (nodeId == null)         reduceNodes.put(taskNum,evt[3]); else         assertEquals("Different nodes for SHUFFLE and REDUCE tasks",nodeId,evt[3]);      }      phase=evt[2];    }    assertTrue("Unknown phase '" + phase + "' in "+ Arrays.toString(evt),phases.contains(phase));    evtCnt++;  }  return evtCnt;}  }
class C{  public int errPos(){  return errPos;}  }
class C{  protected Color determineBackgroundColor(Color color){  Color bgColor=this.getBackgroundColor();  if (bgColor != null)   return bgColor;  return this.computeBackgroundColor(color);}  }
class C{  public static Quarter parseQuarter(String s){  int i=s.indexOf("Q");  if (i == -1) {    throw new TimePeriodFormatException("Missing Q.");  }  if (i == s.length() - 1) {    throw new TimePeriodFormatException("Q found at end of string.");  }  String qstr=s.substring(i + 1,i + 2);  int quarter=Integer.parseInt(qstr);  String remaining=s.substring(0,i) + s.substring(i + 2,s.length());  remaining=remaining.replace('/',' ');  remaining=remaining.replace(',',' ');  remaining=remaining.replace('-',' ');  Year year=Year.parseYear(remaining.trim());  Quarter result=new Quarter(quarter,year);  return result;}  }
class C{  private static String generateAliasRoot(String description){  String result=truncate(unqualifyEntityName(description),ALIAS_TRUNCATE_LENGTH).toLowerCase(Locale.ENGLISH).replace('/','_').replace('$','_');  result=cleanAlias(result);  if (Character.isDigit(result.charAt(result.length() - 1))) {    return result + "x";  } else {    return result;  }}  }
class C{  static String semicolonToComma(String str){  return removeWSandReplace(str,";",",");}  }
class C{  public Move interpretMove(IGameState gameState,int col,int row,Player player){  TicTacToeState state=(TicTacToeState)gameState;  TicTacToeBoard board=state.board();  if (col < 0)   return null;  if (col >= board.numColumns())   return null;  if (row < 0)   return null;  if (row >= board.numRows())   return null;  if (board.isClear(col,row)) {    return new PlaceMark(col,row,player);  }  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedPlaylistCall(stack,1)) {    return makeNetworkedCall(stack);  }  Object x=stack.pop();  Playlist p=getPlaylist(stack);  if (x instanceof MediaFile) {    if (p.getID() != 0 || ((MediaFile)x).getGeneralType() != MediaFile.MEDIAFILE_LOCAL_PLAYBACK)     x=((MediaFile)x).getContentAiring();  }  if (p == null)   return null;  if (!Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr()) && p != stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   return null;  p.removeFromPlaylist(x);  sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  return null;}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final int transRGB,final FilterMode filter){  insertBitmap(bitmap,x,y,transRGB);  final int bitmapWidth=bitmap.getWidth();  final int bitmapHeight=bitmap.getHeight();  if (filter == FilterMode.FILTER_ANTIALIASING) {    int transX=-1;    int transY=-1;    final int imageWidth=this.image.getWidth();    final int imageHeight=this.image.getHeight();    int i=0;    int j=0;    boolean found=false;    while ((i < bitmapWidth) && (i + x < imageWidth) && !found) {      while ((j < bitmapHeight) && (j + y < imageHeight) && !found) {        if (bitmap.getRGB(i,j) == transRGB) {          transX=i;          transY=j;          found=true;        }        j++;      }      i++;    }    if (transX != -1) {      filter(x - 1,y - 1,x + bitmapWidth,y + bitmapHeight,filter,this.image.getRGB(transX + x,transY + y));    }  } else {    filter(x - 1,y - 1,x + bitmapWidth,y + bitmapHeight,filter,-1);  }}  }
class C{  private void sendHandshakeSetConfig(){  OFSetConfig configSet=factory.buildSetConfig().setXid(handshakeTransactionIds--).setMissSendLen(0xffff).build();  OFBarrierRequest barrier=factory.buildBarrierRequest().setXid(handshakeTransactionIds--).build();  OFGetConfigRequest configReq=factory.buildGetConfigRequest().setXid(handshakeTransactionIds--).build();  List<OFMessage> msgList=ImmutableList.<OFMessage>of(configSet,barrier,configReq);  mainConnection.write(msgList);}  }
class C{  public void run(){  this.readerThread=Thread.currentThread();  this.readerThread.setName(p2pReaderName());  ConnectionTable.threadWantsSharedResources();  makeReaderThread(this.isReceiver);  try {    if (useNIO()) {      runNioReader();    } else {      runOioReader();    }  }  finally {    if (logger.isDebugEnabled()) {      logger.debug("Stopping {} for {}",p2pReaderName(),remoteAddr);    }    initiateSuspicionIfSharedUnordered();    if (this.isReceiver) {      if (!this.sharedResource) {        this.owner.owner.stats.incThreadOwnedReceivers(-1L,dominoCount.get());      }      asyncClose(false);      this.owner.removeAndCloseThreadOwnedSockets();    }    ByteBuffer tmp=this.nioInputBuffer;    if (tmp != null) {      this.nioInputBuffer=null;      final DMStats stats=this.owner.getConduit().stats;      Buffers.releaseReceiveBuffer(tmp,stats);    }    notifyHandshakeWaiter(false);    this.readerThread.setName("unused p2p reader");synchronized (this.stateLock) {      this.isRunning=false;      this.readerThread=null;    }  }}  }
class C{  private void loadConfig(){  firstParagraphHandling=null;  pageHandling=null;  sectionHandling=new HashMap<String,EnumMap<SIT,EnumMap<CIT,Boolean>>>();  setDefaultSectionHandling(buildSITMap(buildCITMap(false,false,false,false),null,null,null,null,null));}  }
