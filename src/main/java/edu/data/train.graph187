class C{  protected byte[] readClass(final String nameClass) throws ClassNotFoundException, IOException {  byte[] classBuffer=null;  int i=0;synchronized (m_jarVect) {    while (classBuffer == null && i < m_jarVect.size()) {      String nameClass1=nameClass.replace('.','\\') + ".class";      classBuffer=readEntryFromJar((String)m_jarVect.elementAt(i),nameClass1);      if (classBuffer == null) {        nameClass1=nameClass.replace('.','/') + ".class";        classBuffer=readEntryFromJar((String)m_jarVect.elementAt(i),nameClass1);      }      i++;    }  }  if (classBuffer == null)   throw new ClassNotFoundException(nameClass);  return classBuffer;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.194 -0500",hash_original_method="6589A168C51AEA92DBDCD8B282926324",hash_generated_method="6DBB8521784273138C30FBFC45BA2EEC") public void scheduleAtFixedRate(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay,period,true);}  }
class C{  private void scan(ObjectReference object){  if (VERBOSE) {    Trace.trace(Item.SANITY,"scanning object %s",ObjectModel.getString(object));  }  for (int i=0; i < ObjectModel.getRefs(object); i++) {    Address slot=ObjectModel.getRefSlot(object,i);    ObjectReference ref=loadReferenceSlot(slot);    if (!ref.isNull()) {      visitor.visitPointer(object,slot,ref);      traceObject(ref,false);    }  }}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  private Command processPacketInMessage(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  Match m=createMatchFromPacket(sw,inPort,cntx);  MacAddress sourceMac=m.get(MatchField.ETH_SRC);  MacAddress destMac=m.get(MatchField.ETH_DST);  VlanVid vlan=m.get(MatchField.VLAN_VID) == null ? VlanVid.ZERO : m.get(MatchField.VLAN_VID).getVlanVid();  if (sourceMac == null) {    sourceMac=MacAddress.NONE;  }  if (destMac == null) {    destMac=MacAddress.NONE;  }  if (vlan == null) {    vlan=VlanVid.ZERO;  }  if ((destMac.getLong() & 0xfffffffffff0L) == 0x0180c2000000L) {    if (log.isTraceEnabled()) {      log.trace("ignoring packet addressed to 802.1D/Q reserved addr: switch {} vlan {} dest MAC {}",new Object[]{sw,vlan,destMac.toString()});    }    return Command.STOP;  }  if ((sourceMac.getLong() & 0x010000000000L) == 0) {    this.addToPortMap(sw,sourceMac,vlan,inPort);  }  OFPort outPort=getFromPortMap(sw,destMac,vlan);  if (outPort == null) {    this.writePacketOutForPacketIn(sw,pi,OFPort.FLOOD);  } else   if (outPort.equals(inPort)) {    log.trace("ignoring packet that arrived on same port as learned destination:" + " switch {} vlan {} dest MAC {} port {}",new Object[]{sw,vlan,destMac.toString(),outPort.getPortNumber()});  } else {    this.pushPacket(sw,m,pi,outPort);    this.writeFlowMod(sw,OFFlowModCommand.ADD,OFBufferId.NO_BUFFER,m,outPort);    if (LEARNING_SWITCH_REVERSE_FLOW) {      Match.Builder mb=m.createBuilder();      mb.setExact(MatchField.ETH_SRC,m.get(MatchField.ETH_DST)).setExact(MatchField.ETH_DST,m.get(MatchField.ETH_SRC)).setExact(MatchField.IN_PORT,outPort);      if (m.get(MatchField.VLAN_VID) != null) {        mb.setExact(MatchField.VLAN_VID,m.get(MatchField.VLAN_VID));      }      this.writeFlowMod(sw,OFFlowModCommand.ADD,OFBufferId.NO_BUFFER,mb.build(),inPort);    }  }  return Command.CONTINUE;}  }
class C{  public Address plus(long v){  return new Address(value.plus(v));}  }
class C{  public Rational map(Rational S){  Polynomial P=new Polynomial(N.a[N.order]);  Polynomial T=new Polynomial(1.0);  for (int i=N.order - 1; i >= 0; i--) {    T=T.times(S.D);    P=P.times(S.N).plus(T.times(N.a[i]));  }  Polynomial Q=new Polynomial(D.a[D.order]);  T=new Polynomial(1.0);  for (int i=D.order - 1; i >= 0; i--) {    T=T.times(S.D);    Q=Q.times(S.N).plus(T.times(D.a[i]));  }  if (D.order > N.order) {    for (int i=0; i < D.order - N.order; i++)     P=P.times(S.D);  } else   if (N.order > D.order) {    for (int i=0; i < N.order - D.order; i++)     Q=Q.times(S.D);  }  P.trim();  Q.trim();  return new Rational(P,Q);}  }
class C{  public boolean hasPossibleMethod(String name,Expression arguments){  int count=0;  if (arguments instanceof TupleExpression) {    TupleExpression tuple=(TupleExpression)arguments;    count=tuple.getExpressions().size();  }  ClassNode node=this;  do {    for (    MethodNode method : getMethods(name)) {      if (method.getParameters().length == count && !method.isStatic()) {        return true;      }    }    node=node.getSuperClass();  } while (node != null);  return false;}  }
class C{  @Override public void drag(int from,int to){}  }
class C{  public boolean isListenerForSource(Object source){  return (source instanceof UIViewRoot);}  }
class C{  public void testServiceBindDependencyOrdering(){  new Helper(){{      given=select(varNode(x),where(stmtPatternWithVar("X"),stmtPatternWithVar("inEndpoint"),stmtPatternWithVar("inParams"),serviceFTSWithVariable("outRes","outScore","outSnippet","inSearch","inEndpoint","inParams"),stmtPatternWithVar("outRes"),stmtPatternWithVar("outScore"),stmtPatternWithVar("outSnippet"),assignmentWithVar("inSearch","X"),assignmentWithVar("dummy","Y")));      expected=select(varNode(x),where(stmtPatternWithVar("X"),stmtPatternWithVar("inEndpoint"),stmtPatternWithVar("inParams"),stmtPatternWithVar("outRes"),stmtPatternWithVar("outScore"),stmtPatternWithVar("outSnippet"),assignmentWithVar("inSearch","X"),serviceFTSWithVariable("outRes","outScore","outSnippet","inSearch","inEndpoint","inParams"),assignmentWithVar("dummy","Y")));    }  }.test();}  }
class C{  private static Pair<String,String> postIndexedLSL(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String index=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,immediateNodeValue,qw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public boolean validateMaximum(final String candidate){  boolean valid=true;  try {    if (Double.parseDouble(candidate) <= this.minimumValue) {      valid=false;    }  } catch (  final NumberFormatException e) {    valid=false;  }  return valid;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=false;  if (curNumberOfParameters == 2) {    thumb=evalBool(stack.pop());  }  SeriesInfo si=getSeriesInfo(stack);  if (si == null)   return null;  String imageURL=si.getImageURL(thumb);  if (imageURL == null || imageURL.length() == 0)   return null; else   return MetaImage.getMetaImage(imageURL,stack.getUIComponent());}  }
class C{  public boolean init(MBankStatementLoader controller){  boolean result=false;  FileInputStream m_stream=null;  try {    if (controller.getLocalFileName() != null) {      m_stream=new FileInputStream(controller.getLocalFileName());    } else     if (controller.getFileName() != null) {      m_stream=new FileInputStream(controller.getFileName());    } else {      return result;    }    if (!super.init(controller)) {      return result;    }    if (m_stream == null) {      return result;    }    result=attachInput(m_stream);  } catch (  Exception e) {    m_errorMessage="ErrorReadingData";    m_errorDescription="";  }  return result;}  }
class C{  public EncryptedPrivateKeyInfo(byte[] encoded) throws IOException {  if (encoded == null) {    throw new IllegalArgumentException("encoding must not be null");  }  DerValue val=new DerValue(encoded);  DerValue[] seq=new DerValue[2];  seq[0]=val.data.getDerValue();  seq[1]=val.data.getDerValue();  if (val.data.available() != 0) {    throw new IOException("overrun, bytes = " + val.data.available());  }  this.algid=AlgorithmId.parse(seq[0]);  if (seq[0].data.available() != 0) {    throw new IOException("encryptionAlgorithm field overrun");  }  this.encryptedData=seq[1].getOctetString();  if (seq[1].data.available() != 0)   throw new IOException("encryptedData field overrun");  this.encoded=encoded.clone();}  }
class C{  public static int copy(Reader in,Writer out) throws IOException {  Preconditions.checkNotNull(in,"No Reader specified");  Preconditions.checkNotNull(out,"No Writer specified");  try {    int byteCount=0;    char[] buffer=new char[BUFFER_SIZE];    int bytesRead;    while ((bytesRead=in.read(buffer)) != -1) {      out.write(buffer,0,bytesRead);      byteCount+=bytesRead;    }    out.flush();    return byteCount;  }  finally {    try {      in.close();    } catch (    IOException ex) {    }    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public void releaseCatalogConnection(Database conn){  conn.disconnect();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void stopExpirationTimer(ContactId contact){  if (sLogger.isActivated()) {    sLogger.debug("Stop is-composing timer");  }  if (mTimerTask != null) {    mTimerTask.cancel();    mTimerTask=null;  }}  }
class C{  EWListViewChildET findMotionView(int x,int y){  boolean isTopStart=y < getHeight() / 2;  int childCount=getChildCount();  if (childCount > 0) {    if (isTopStart) {      for (int i=0; i < childCount; i++) {        if (!(getChildAt(i) instanceof EWListViewChildET))         return null;        EWListViewChildET v=(EWListViewChildET)getChildAt(i);        if (y <= v.getBottom()) {          v.y=y - v.getTop();          v.x=x;          Log.e("J","ET-->y::" + y + "--updata->"+ v.y);          return v;        }      }    } else {      for (int i=childCount - 1; i >= 0; i--) {        if (!(getChildAt(i) instanceof EWListViewChildET))         return null;        EWListViewChildET v=(EWListViewChildET)getChildAt(i);        if (y >= v.getTop()) {          v.y=y - v.getTop();          v.x=x;          Log.e("J","ET-->y::" + y + "--updata->"+ v.y);          return v;        }      }    }  }  return null;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public void showDialog(@NotNull AsyncCallback<Void> callback){  this.callback=callback;  view.setMessage("");  view.setHost("");  view.setEnabledUploadButton(false);  view.showDialog();}  }
class C{  void writeCustomMetricTimeseriesValue() throws IOException {  Map<String,String> metricLabel=ImmutableMap.of("environment","STAGING");  Map<String,String> resourceLabel=ImmutableMap.of("instance_id","test-instance","zone","us-central1-f");  CreateTimeSeriesRequest timeSeriesRequest=new CreateTimeSeriesRequest();  TimeSeries timeSeries=new TimeSeries();  Metric metric=new Metric();  metric.setType(metricType);  metric.setLabels(metricLabel);  timeSeries.setMetric(metric);  MonitoredResource monitoredResource=new MonitoredResource();  monitoredResource.setType("gce_instance");  monitoredResource.setLabels(resourceLabel);  timeSeries.setResource(monitoredResource);  Point point=new Point();  TimeInterval ti=new TimeInterval();  String now=getNow();  ti.setStartTime(now);  ti.setEndTime(now);  point.setInterval(ti);  point.setValue(new TypedValue().setInt64Value(getRandomPoint()));  timeSeries.setPoints(Lists.<Point>newArrayList(point));  timeSeriesRequest.setTimeSeries(Lists.<TimeSeries>newArrayList(timeSeries));  monitoringService.projects().timeSeries().create(projectResource,timeSeriesRequest).execute();}  }
class C{  @Override public boolean unload(Entity unit){  boolean retval=troops.removeElement(unit.getId());  if (retval) {    currentSpace+=1;    unloadedThisTurn+=1;  }  return retval;}  }
class C{  public X509CertificateHolderSelector(X500Name issuer,BigInteger serialNumber,byte[] subjectKeyId){  this.issuer=issuer;  this.serialNumber=serialNumber;  this.subjectKeyId=subjectKeyId;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static BigInteger reduceInto(BigInteger n,BigInteger begin,BigInteger end){  return n.subtract(begin).mod(end.subtract(begin)).add(begin);}  }
class C{  public void createPictScenario03_3() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-28 00:00:00");  String supplierAdminId="Pict03_3Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_3SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_3Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_3Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_3CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_3",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_3",serviceDetails,customerAdmin,role);  long usageStartTime=DateTimeHandling.calculateMillis("2013-03-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-03-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:20:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-04-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_3",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_3",customer);}  }
class C{  @Override public void write(String str,int off,int len) throws IOException {  final int off_plus_len=off + len;  for (int i=off; i < off_plus_len; ) {    char c=str.charAt(i++);    if (c < 0x80) {      _bytes[_index]=(byte)c;      if (++_index >= _bytes.length) {        flushBuffer();      }    } else {      write(c);    }  }}  }
class C{  public static final String generateHash(final String s){  try {    MessageDigest digest=java.security.MessageDigest.getInstance("MD5");    digest.update(s.getBytes());    byte messageDigest[]=digest.digest();    StringBuffer hexString=new StringBuffer();    for (int i=0; i < messageDigest.length; i++) {      String h=Integer.toHexString(0xFF & messageDigest[i]);      while (h.length() < 2)       h="0" + h;      hexString.append(h);    }    return hexString.toString();  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return "";}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ToStringBuilder append(char[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public VideoPlayerPaneItem(){  super(TITLE,LABEL);  _playerField=new SizedTextField(25,SizePolicy.RESTRICT_HEIGHT);  LabeledComponent comp=new LabeledComponent(OPTION_LABEL,_playerField);  add(comp.getComponent());}  }
class C{  private static String createString(byte bytes[]){  StringBuffer sb=new StringBuffer();  for (  byte b : bytes) {    if (Character.isLetterOrDigit(b) || Character.isWhitespace(b)) {      sb.append((char)b);    }  }  return sb.toString();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.359 -0400",hash_original_method="62E7172DD8437600599EFB859FBECAC1",hash_generated_method="F18A99B335F562AFDA4B0537816312B8") public void startActivityFromFragment(Fragment fragment,Intent intent,int requestCode){  if (requestCode == -1) {    super.startActivityForResult(intent,-1);    return;  }  if ((requestCode & 0xffff0000) != 0) {    throw new IllegalArgumentException("Can only use lower 16 bits for requestCode");  }  super.startActivityForResult(intent,((fragment.mIndex + 1) << 16) + (requestCode & 0xffff));}  }
class C{  public void registerCustomTooltipRenderer(RenderTooltipInterface renderer){  renderField.registerCustomTooltipRenderer(renderer);}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  if (!isVisible()) {    AxisState state=new AxisState(cursor);    List ticks=refreshTicks(g2,state,dataArea,edge);    state.setTicks(ticks);    return state;  }  double xOffset=0.0;  double yOffset=0.0;  Plot plot=getPlot();  if (plot instanceof CategoryPlot) {    CategoryPlot cp=(CategoryPlot)plot;    CategoryItemRenderer r=cp.getRenderer();    if (r instanceof Effect3D) {      Effect3D e3D=(Effect3D)r;      xOffset=e3D.getXOffset();      yOffset=e3D.getYOffset();    }  }  double adjustedX=dataArea.getMinX();  double adjustedY=dataArea.getMinY();  double adjustedW=dataArea.getWidth() - xOffset;  double adjustedH=dataArea.getHeight() - yOffset;  if (edge == RectangleEdge.LEFT || edge == RectangleEdge.BOTTOM) {    adjustedY+=yOffset;  } else   if (edge == RectangleEdge.RIGHT || edge == RectangleEdge.TOP) {    adjustedX+=xOffset;  }  Rectangle2D adjustedDataArea=new Rectangle2D.Double(adjustedX,adjustedY,adjustedW,adjustedH);  AxisState info=drawTickMarksAndLabels(g2,cursor,plotArea,adjustedDataArea,edge);  if (getAttributedLabel() != null) {    info=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,info);  } else {    info=drawLabel(getLabel(),g2,plotArea,dataArea,edge,info);  }  return info;}  }
class C{  @Override public final N pop(){  int spin=0;  for (; ; ) {    final long writeLock=seqLock.tryWriteLock();    if (writeLock > 0) {      try {        final int stackTop=this.stackTop.get();        final int lastRef=stackTop - 1;        if (stackTop > 0) {          try {            final N n=stack.get(lastRef);            stack.set(lastRef,null);            stackNotFullCondition.signal();            return n;          }  finally {            this.stackTop.set(lastRef);          }        } else {          return null;        }      }  finally {        seqLock.unlock(writeLock);      }    }    spin=Condition.progressiveYield(spin);  }}  }
class C{  private void rederiveColor(){  Color src=UIManager.getColor(uiDefaultParentName);  if (src != null) {    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);    tmp[0]=clamp(tmp[0] + hOffset);    tmp[1]=clamp(tmp[1] + sOffset);    tmp[2]=clamp(tmp[2] + bOffset);    int alpha=clamp(src.getAlpha() + aOffset);    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);  } else {    float[] tmp=new float[3];    tmp[0]=clamp(hOffset);    tmp[1]=clamp(sOffset);    tmp[2]=clamp(bOffset);    int alpha=clamp(aOffset);    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);  }}  }
class C{  public SimpleMetadataReaderFactory(){  this.resourceLoader=new DefaultResourceLoader();}  }
class C{  @Override public int analyseProtocol(){  logging.log(getClass(),"\nAnalyse: " + getProtocol() + " with ID: "+ getToken(),Logging.DEBUG);  ArrayList<SSOProtocol> last_protocolflow=SSOProtocol.getLastProtocolFlow();  if (last_protocolflow != null) {    double listsize=(double)last_protocolflow.size();    double protocol=0;    double token=0;    long tmp=0;    long curr_time=0;    long last_time=0;    boolean wait=true;    for (    SSOProtocol sso : last_protocolflow) {      if (sso.getProtocol().contains(this.getProtocol())) {        logging.log(getClass(),sso.getProtocol(),Logging.DEBUG);        protocol++;      }      if (sso.getToken().equals(this.getToken())) {        logging.log(getClass(),sso.getToken(),Logging.DEBUG);        token++;      }      if (wait) {        wait=false;      } else {        curr_time=sso.getTimestamp();        tmp+=curr_time - last_time;        logging.log(getClass(),"Diff: " + (curr_time - last_time),Logging.DEBUG);      }      last_time=sso.getTimestamp();    }    if (listsize >= 0) {      double diff_time=((double)tmp / listsize);      double curr_diff_time=getTimestamp() - last_protocolflow.get(last_protocolflow.size() - 1).getTimestamp();      double time_bonus=0;      logging.log(getClass(),"CurrDiff:" + curr_diff_time + " Diff:"+ diff_time,Logging.DEBUG);      if (curr_diff_time <= (diff_time + 4000)) {        time_bonus=0.35;      }      double prob=((protocol / listsize) + (token / listsize) * 2) / 3 + (time_bonus);      logging.log(getClass(),"Probability: " + prob,Logging.DEBUG);      if (prob >= 0.7) {        return getIDOfLastList();      }    }  }  return newProtocolflowID();}  }
class C{  protected void beginUpdate(IEventListener listener){  source=listener;  updateCounter.incrementAndGet();}  }
class C{  public void updateRaster(int x1,int y1,String url,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(x1,y1,url,properties,link.dos);}  }
class C{  public void close(){  if (connected) {    try {      transport.close();    } catch (    IOException ex) {      logger.debug("close()",ex);    } finally {      connected=false;    }  }  transport=null;}  }
class C{  private void parsePAData(byte[] data) throws IOException, Asn1Exception {  DerValue derPA=new DerValue(data);  List<PAData> paList=new ArrayList<>();  while (derPA.data.available() > 0) {    DerValue tmp=derPA.data.getDerValue();    PAData pa_data=new PAData(tmp);    paList.add(pa_data);    if (DEBUG) {      System.out.println(pa_data);    }  }  pa=paList.toArray(new PAData[paList.size()]);}  }
class C{  protected PapeResponse(ParameterList params){  super(params);}  }
class C{  public InlineStateMachine_ createInlineStateMachine_(){  InlineStateMachine_Impl inlineStateMachine_=new InlineStateMachine_Impl();  return inlineStateMachine_;}  }
class C{  private void installApplication(JSONObject data,String code){  String appUrl=null;  String type=null;  String os=null;  try {    JSONObject applicationData=data;    appUrl=(String)applicationData.get(resources.getString(R.string.intent_extra_identity));    if (!applicationData.isNull(resources.getString(R.string.intent_extra_type))) {      type=(String)applicationData.get(resources.getString(R.string.intent_extra_type));    }    if (!applicationData.isNull(resources.getString(R.string.intent_extra_platform_id))) {      os=(String)applicationData.get(resources.getString(R.string.intent_extra_platform_id));    } else     if (!applicationData.isNull(resources.getString(R.string.intent_extra_os))) {      os=(String)applicationData.get(resources.getString(R.string.intent_extra_os));    }    if (type != null && type.equalsIgnoreCase(resources.getString(R.string.intent_extra_enterprise))) {      if (os != null) {        if (os.equalsIgnoreCase(resources.getString(R.string.intent_extra_android))) {          appList.installApp(appUrl);        }      } else {        appList.installApp(appUrl);      }    } else     if (type != null && type.equalsIgnoreCase(resources.getString(R.string.intent_extra_market))) {      if (os != null) {        if (os.equalsIgnoreCase(resources.getString(R.string.intent_extra_android))) {          triggerGooglePlayApp(appUrl);        }      } else {        triggerGooglePlayApp(appUrl);      }    } else {      if (os != null) {        if (os.equalsIgnoreCase(resources.getString(R.string.intent_extra_android))) {          appList.installApp(appUrl);        }      } else {        appList.installApp(appUrl);      }    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }}  }
class C{  public URI(String scheme,String userInfo,String host,int port,String path,String query,String fragment) throws URISyntaxException {  if (scheme == null && userInfo == null && host == null && path == null && query == null && fragment == null) {    this.path="";    return;  }  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {    throw new URISyntaxException(path,"Relative path");  }  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (userInfo != null || host != null || port != -1) {    uri.append("//");  }  if (userInfo != null) {    USER_INFO_ENCODER.appendEncoded(uri,userInfo);    uri.append('@');  }  if (host != null) {    if (host.indexOf(':') != -1 && host.indexOf(']') == -1 && host.indexOf('[') == -1) {      host="[" + host + "]";    }    uri.append(host);  }  if (port != -1) {    uri.append(':');    uri.append(port);  }  if (path != null) {    PATH_ENCODER.appendEncoded(uri,path);  }  if (query != null) {    uri.append('?');    ALL_LEGAL_ENCODER.appendEncoded(uri,query);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),true);}  }
class C{  public static boolean contains(Coordinate coord,Coordinate[] p){  int wn=getWindingNumber(coord,p);  return wn != 0;}  }
class C{  public MeanAndStandardDeviation(double mean,double standardDeviation){  this(new Double(mean),new Double(standardDeviation));}  }
class C{  public static String pad(String string,int n,String padding,boolean right){  if (n < 0) {    n=0;  }  if (n < string.length()) {    return string.substring(0,n);  } else   if (n == string.length()) {    return string;  }  char paddingChar;  if (padding == null || padding.length() == 0) {    paddingChar=' ';  } else {    paddingChar=padding.charAt(0);  }  StringBuilder buff=new StringBuilder(n);  n-=string.length();  if (right) {    buff.append(string);  }  for (int i=0; i < n; i++) {    buff.append(paddingChar);  }  if (!right) {    buff.append(string);  }  return buff.toString();}  }
class C{  protected ECPoint multiplyPositive(ECPoint p,BigInteger k){  ECPoint[] R=new ECPoint[]{p.getCurve().getInfinity(),p};  int n=k.bitLength();  int i=n;  while (--i >= 0) {    int b=k.testBit(i) ? 1 : 0;    int bp=1 - b;    R[bp]=R[bp].add(R[b]);    R[b]=R[b].twice();  }  return R[0];}  }
class C{  public long themeColor(){  return mThemeColor;}  }
class C{  public void testLongValue(){  LongAdder ai=new LongAdder();  assertEquals(0,ai.longValue());  ai.increment();  assertEquals(1,ai.longValue());}  }
class C{  @Override public void accept(final MethodVisitor mv){switch (type) {case Opcodes.F_NEW:case Opcodes.F_FULL:    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));  break;case Opcodes.F_APPEND:mv.visitFrame(type,local.size(),asArray(local),0,null);break;case Opcodes.F_CHOP:mv.visitFrame(type,local.size(),null,0,null);break;case Opcodes.F_SAME:mv.visitFrame(type,0,null,0,null);break;case Opcodes.F_SAME1:mv.visitFrame(type,0,null,1,asArray(stack));break;}}  }
class C{  public OMGraphic evaluate(OMGraphic omg,OMGraphicList labels,Projection mapProj){  if (dbf != null) {    omg=dbf.evaluate(omg,labels,mapProj);  }  return omg;}  }
class C{  public void testAnd(){  m_Filter=getFilter("(ATT1 is 'r') and (ATT2 <= 5)");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(6,result.numInstances());}  }
class C{  public void truncate(int newsize){  if (newsize < size) {    double[] odists=dists;    dists=new double[newsize];    System.arraycopy(odists,0,dists,0,newsize);    int[] oids=ids;    ids=new int[newsize];    System.arraycopy(oids,0,ids,0,newsize);    size=newsize;  }}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  public void testDeployRar(){  this.fileHandler.createFile("ram:///test.rar");  RAR rar=(RAR)factory.createDeployable("jonas5x","ram:///test.rar",DeployableType.RAR);  deployer.deploy(rar);  assertTrue(fileHandler.exists(deployer.getDeployableDir(rar) + "/test.rar"));}  }
class C{  protected void createFullGeometry(DrawContext dc,Terrain terrain,ShapeData shapeData,boolean skipOuterBoundary){  for (  ExtrudedBoundaryInfo boundary : shapeData) {    boundary.capEdgeIndices=this.getCapEdgeIndices(boundary.locations.size());    boundary.sideIndices=this.getSideIndices(boundary.locations.size());    boundary.sideEdgeIndices=this.getSideEdgeIndices(boundary.locations.size());  }  if (this.isEnableSides() || this.isEnableCap())   this.createVertices(terrain,shapeData,skipOuterBoundary);  if (this.isEnableSides()) {    this.createSideGeometry(shapeData);    if (this.mustApplyLighting(dc,this.getActiveSideAttributes()))     this.createSideNormals(shapeData);    if (!dc.isPickingMode() && this.mustApplySideTextures())     this.createSideTextureCoords(shapeData);  }  if (this.isEnableCap()) {    this.createCapGeometry(dc,shapeData);    if (this.mustApplyLighting(dc,this.getActiveCapAttributes()))     this.createCapNormals(shapeData);  }}  }
class C{  private List<PlanElement> fillWithActivities(final List<Leg> baseTrip,final Facility fromFacility,final Facility toFacility,double departureTime,Person person){  List<PlanElement> trip=new ArrayList<>();  Coord nextCoord=null;  int i=0;  for (  Leg leg : baseTrip) {    if (i == 0) {      Facility firstToFacility;      if ((baseTrip.size() > 1) && (baseTrip.get(1).getRoute() instanceof ExperimentalTransitRoute)) {        ExperimentalTransitRoute tRoute=(ExperimentalTransitRoute)baseTrip.get(1).getRoute();        firstToFacility=this.transitSchedule.getFacilities().get(tRoute.getAccessStopId());      } else {        firstToFacility=toFacility;      }      trip.add(leg);    } else {      if (leg.getRoute() instanceof ExperimentalTransitRoute) {        ExperimentalTransitRoute tRoute=(ExperimentalTransitRoute)leg.getRoute();        tRoute.setTravelTime(leg.getTravelTime());        tRoute.setDistance(RouteUtils.calcDistance(tRoute,transitSchedule,network));        Activity act=PopulationUtils.createActivityFromCoordAndLinkId(PtConstants.TRANSIT_ACTIVITY_TYPE,this.transitSchedule.getFacilities().get(tRoute.getAccessStopId()).getCoord(),tRoute.getStartLinkId());        act.setMaximumDuration(0.0);        trip.add(act);        nextCoord=this.transitSchedule.getFacilities().get(tRoute.getEgressStopId()).getCoord();      } else {        Activity act=PopulationUtils.createActivityFromCoordAndLinkId(PtConstants.TRANSIT_ACTIVITY_TYPE,nextCoord,leg.getRoute().getStartLinkId());        act.setMaximumDuration(0.0);        trip.add(act);      }      trip.add(leg);    }    i++;  }  return trip;}  }
class C{  public boolean showCookiesSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_COOKIES;}  }
class C{  public String RM1Code(String mac){  JsonObject out=broadlinkExecuteCommand(BroadlinkConstants.CMD_RM1_CODE_ID,BroadlinkConstants.CMD_RM1_CODE,mac);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  if (0 != code)   return null;  String data=out.get("data").getAsString();  Log.e("RM1StudyCode",data);  return data;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:28.558 -0500",hash_original_method="CA741F0DB07B20B1C302E68F5EF5136C",hash_generated_method="C48BCEC0AB24F9C8AB381CE696E70EFA") public Surface(){  if (DEBUG_RELEASE) {    mCreationStack=new Exception();  }  mCanvas=new CompatibleCanvas();}  }
class C{  public <V>HashMap<String,V> newStringMap(){  return dbSettings.databaseToUpper ? new HashMap<String,V>() : new CaseInsensitiveMap<V>();}  }
class C{  public short[][] plugInVinegars(short[] x){  short tmpMult=0;  short[][] coeff=new short[oi][oi + 1];  short[] sum=new short[oi];  for (int k=0; k < oi; k++) {    for (int i=0; i < vi; i++) {      for (int j=0; j < vi; j++) {        tmpMult=GF2Field.multElem(coeff_beta[k][i][j],x[i]);        tmpMult=GF2Field.multElem(tmpMult,x[j]);        sum[k]=GF2Field.addElem(sum[k],tmpMult);      }    }  }  for (int k=0; k < oi; k++) {    for (int i=0; i < oi; i++) {      for (int j=0; j < vi; j++) {        tmpMult=GF2Field.multElem(coeff_alpha[k][i][j],x[j]);        coeff[k][i]=GF2Field.addElem(coeff[k][i],tmpMult);      }    }  }  for (int k=0; k < oi; k++) {    for (int i=0; i < vi; i++) {      tmpMult=GF2Field.multElem(coeff_gamma[k][i],x[i]);      sum[k]=GF2Field.addElem(sum[k],tmpMult);    }  }  for (int k=0; k < oi; k++) {    for (int i=vi; i < viNext; i++) {      coeff[k][i - vi]=GF2Field.addElem(coeff_gamma[k][i],coeff[k][i - vi]);    }  }  for (int k=0; k < oi; k++) {    sum[k]=GF2Field.addElem(sum[k],coeff_eta[k]);  }  for (int k=0; k < oi; k++) {    coeff[k][oi]=sum[k];  }  return coeff;}  }
class C{  public void nextIteration(double[][] means){  this.means=means;  changed=false;  final int k=means.length;  final int dim=means[0].length;  centroids=new double[k][dim];  sizes=new int[k];  Arrays.fill(varsum,0.);}  }
class C{  public Bagging(Regressor baseRegressor,int extraSamples,boolean simultaniousTraining,int rounds,Random random){  this(extraSamples,simultaniousTraining,rounds,random);  this.baseRegressor=baseRegressor;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.093 -0400",hash_original_method="D5453C8E1476C88A8081358CF5377930",hash_generated_method="7EE2E149C1AA34154359A29494D49888") private NumericShaper(int ranges,int defaultContext,boolean isContextual){  this.fRanges=ranges;  this.fDefaultContextIndex=getIndexFromRange(defaultContext);  this.fContextual=isContextual;  if (!fContextual) {    fSingleRangeIndex=getIndexFromRange(ranges);  }}  }
class C{  private void socksSendRequest(int command,InetAddress address,int port) throws IOException {  Socks4Message request=new Socks4Message();  request.setCommandOrResult(command);  request.setPort(port);  request.setIP(address.getAddress());  request.setUserId("default");  getOutputStream().write(request.getBytes(),0,request.getLength());}  }
class C{  public void testDoubleValuePos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  double result=1.2380964839238476E53;  assertEquals("incorrect value",result,aNumber.doubleValue(),0);}  }
class C{  public static byte[] startRowInclusiveOrLargestRow(RangeRequest rangeRequest){  Preconditions.checkArgument(rangeRequest.isReverse());  if (rangeRequest.getStartInclusive().length == 0) {    return getLastRowName();  }  return rangeRequest.getStartInclusive();}  }
class C{  protected static String timestr(long time_val,long total_time){  boolean neg;  long ms=0;  long sec=0;  long percent10;  String pad;  neg=time_val < 0;  if (neg)   time_val=-time_val;  ms=time_val % 1000;  sec=time_val / 1000;  if (sec < 10)   pad="   "; else   if (sec < 100)   pad="  "; else   if (sec < 1000)   pad=" "; else   pad="";  percent10=(time_val * 1000) / total_time;  return (neg ? "-" : "") + pad + sec+ "."+ ((ms % 1000) / 100)+ ((ms % 100) / 10)+ (ms % 10)+ "sec"+ " ("+ percent10 / 10 + "." + percent10 % 10 + "%)";}  }
class C{  public static boolean isAlive(final Thread thread){  return (thread != null && thread.isAlive());}  }
class C{  public static String[] splitOnCharWithQuoting(String s,char splitChar,char quoteChar,char escapeChar){  List<String> result=new ArrayList<String>();  int i=0;  int length=s.length();  StringBuffer b=new StringBuffer();  while (i < length) {    char curr=s.charAt(i);    if (curr == splitChar) {      if (b.length() > 0) {        result.add(b.toString());        b=new StringBuffer();      }      i++;    } else     if (curr == quoteChar) {      i++;      while (i < length) {        curr=s.charAt(i);        if (curr == escapeChar) {          b.append(s.charAt(i + 1));          i+=2;        } else         if (curr == quoteChar) {          i++;          break;        } else {          b.append(s.charAt(i));          i++;        }      }    } else {      b.append(curr);      i++;    }  }  if (b.length() > 0) {    result.add(b.toString());  }  return result.toArray(new String[0]);}  }
class C{  @Override protected Bitmap decodeByteArrayAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef,BitmapFactory.Options options){  final PooledByteBuffer pooledByteBuffer=bytesRef.get();  final int length=pooledByteBuffer.size();  final CloseableReference<byte[]> encodedBytesArrayRef=mFlexByteArrayPool.get(length);  try {    final byte[] encodedBytesArray=encodedBytesArrayRef.get();    pooledByteBuffer.read(0,encodedBytesArray,0,length);    Bitmap bitmap=BitmapFactory.decodeByteArray(encodedBytesArray,0,length,options);    return Preconditions.checkNotNull(bitmap,"BitmapFactory returned null");  }  finally {    CloseableReference.closeSafely(encodedBytesArrayRef);  }}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int x0=BytesTo32Bits(src,srcIndex) ^ gSubKeys[INPUT_WHITEN];  int x1=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[INPUT_WHITEN + 1];  int x2=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[INPUT_WHITEN + 2];  int x3=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[INPUT_WHITEN + 3];  int k=ROUND_SUBKEYS;  int t0, t1;  for (int r=0; r < ROUNDS; r+=2) {    t0=Fe32_0(x0);    t1=Fe32_3(x1);    x2^=t0 + t1 + gSubKeys[k++];    x2=x2 >>> 1 | x2 << 31;    x3=(x3 << 1 | x3 >>> 31) ^ (t0 + 2 * t1 + gSubKeys[k++]);    t0=Fe32_0(x2);    t1=Fe32_3(x3);    x0^=t0 + t1 + gSubKeys[k++];    x0=x0 >>> 1 | x0 << 31;    x1=(x1 << 1 | x1 >>> 31) ^ (t0 + 2 * t1 + gSubKeys[k++]);  }  Bits32ToBytes(x2 ^ gSubKeys[OUTPUT_WHITEN],dst,dstIndex);  Bits32ToBytes(x3 ^ gSubKeys[OUTPUT_WHITEN + 1],dst,dstIndex + 4);  Bits32ToBytes(x0 ^ gSubKeys[OUTPUT_WHITEN + 2],dst,dstIndex + 8);  Bits32ToBytes(x1 ^ gSubKeys[OUTPUT_WHITEN + 3],dst,dstIndex + 12);}  }
class C{  @Override public String generateToolTip(XYDataset dataset,int series,int item){  return generateLabelString(dataset,series,item);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String toPreference(final String preferencesId,final String preferenceId){  return '#' + preferencesId + '.'+ preferenceId;}  }
class C{  public int lastIndexOf(char ch,int startIndex){  startIndex=(startIndex >= size ? size - 1 : startIndex);  if (startIndex < 0) {    return -1;  }  for (int i=startIndex; i >= 0; i--) {    if (buffer[i] == ch) {      return i;    }  }  return -1;}  }
class C{  private boolean isGitUrlCorrect(@NotNull String url){  if (WHITE_SPACE.test(url)) {    view.markURLInvalid();    view.setURLErrorMessage(locale.importProjectMessageStartWithWhiteSpace());    return false;  }  if (SCP_LIKE_SYNTAX.test(url)) {    view.markURLValid();    view.setURLErrorMessage(null);    return true;  }  if (!PROTOCOL.test(url)) {    view.markURLInvalid();    view.setURLErrorMessage(locale.importProjectMessageProtocolIncorrect());    return false;  }  if (!(HOST1.test(url) || HOST2.test(url))) {    view.markURLInvalid();    view.setURLErrorMessage(locale.importProjectMessageHostIncorrect());    return false;  }  if (!(REPO_NAME.test(url))) {    view.markURLInvalid();    view.setURLErrorMessage(locale.importProjectMessageNameRepoIncorrect());    return false;  }  view.markURLValid();  view.setURLErrorMessage(null);  return true;}  }
class C{  public static boolean isIdEmbeddedInURL(final String resourceId,UriInfo uriInfo){  try {    final Set<Entry<String,List<String>>> pathParameters=uriInfo.getPathParameters().entrySet();    for (    final Entry<String,List<String>> entry : pathParameters) {      for (      final String param : entry.getValue()) {        if (param.equals(resourceId)) {          return true;        }      }    }  } catch (  Exception e) {  }  return false;}  }
class C{  public static String slurpFileNoExceptions(File file){  try {    return slurpReader(new FileReader(file));  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  private Map<MemberType,Integer> computeSearchLimits(int limit,MemberType memberType){  Map<MemberType,Integer> memberTypeToLimit=new HashMap<MemberType,Integer>();  int limitPerPrincipalType=limit;  if (memberType == MemberType.ALL) {    limitPerPrincipalType=limit < 0 ? -1 : limit / (MemberType.values().length - 1);    int solutionUserLimit=limitPerPrincipalType < 0 ? -1 : limitPerPrincipalType + (limit % (MemberType.values().length - 1));    memberTypeToLimit.put(MemberType.USER,limitPerPrincipalType);    memberTypeToLimit.put(MemberType.GROUP,limitPerPrincipalType);    memberTypeToLimit.put(MemberType.SOLUTIONUSER,solutionUserLimit);  } else {    memberTypeToLimit.put(memberType,limit);  }  return memberTypeToLimit;}  }
class C{  private static int wordIndex(int bitIndex){  return bitIndex >> ADDRESS_BITS_PER_WORD;}  }
class C{  public static void register(){  CommandCenter.register(WALK,new AutoWalkAction());}  }
class C{  public static double[] renormalize(final int[] a){  double s=0;  for (  final int v : a) {    s+=v;  }  s=1 / s;  final double[] p=new double[a.length];  for (int k=0; k < a.length; k++) {    p[k]=s * a[k];  }  return p;}  }
class C{  public synchronized boolean isNotificationEnabled(Notification notification){  String type=notification.getType();  if (type == null) {    return false;  }  try {    for (    String prefix : enabledTypes) {      if (type.startsWith(prefix)) {        return true;      }    }  } catch (  java.lang.NullPointerException e) {    return false;  }  return false;}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  @LogMessageDoc(level="ERROR",message="failed to access storage: {reason}",explanation="Could not retrieve static flows from the system " + "database",recommendation=LogMessageDoc.CHECK_CONTROLLER) private Map<String,Map<String,OFFlowMod>> readEntriesFromStorage(){  Map<String,Map<String,OFFlowMod>> entries=new ConcurrentHashMap<String,Map<String,OFFlowMod>>();  try {    Map<String,Object> row;    IResultSet resultSet=storageSourceService.executeQuery(TABLE_NAME,ColumnNames,null,null);    for (Iterator<IResultSet> it=resultSet.iterator(); it.hasNext(); ) {      row=it.next().getRow();      parseRow(row,entries);    }  } catch (  StorageException e) {    log.error("failed to access storage: {}",e.getMessage());  }  return entries;}  }
class C{  public boolean isAcctBalanced(){  if (m_lines.size() == 0)   return true;  BigDecimal balance=getAcctBalance();  boolean retValue=balance.signum() == 0;  if (retValue)   log.finer(toString()); else   log.warning("NO - Diff=" + balance + " - "+ toString());  return retValue;}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> reverseOrder(){  return new Builder<K,V>(Ordering.natural().reverse());}  }
class C{  public UpdateRequest id(String id){  this.id=id;  return this;}  }
class C{  private void updateFixedAllocator(final int index,final long addr) throws ChecksumError, InterruptedException, IOException {  final ByteBuffer buf=m_writeCacheService.read(addr,ALLOC_BLOCK_SIZE);  final ByteArrayInputStream baBuf=new ByteArrayInputStream(buf.array());  final DataInputStream strBuf=new DataInputStream(baBuf);  final int allocSize=strBuf.readInt();  assert allocSize > 0;  final int slotIndex=slotSizeIndex(allocSize);  if (slotIndex == -1)   throw new IllegalStateException("Invalid allocation size: " + allocSize);  final FixedAllocator allocator=new FixedAllocator(this,allocSize);  final ArrayList<? extends Allocator> freeList=m_freeFixed[slotIndex];  if (index < m_allocs.size()) {    final FixedAllocator old=m_allocs.get(index);    freeList.remove(old);    m_allocs.set(index,allocator);    allocator.setFreeList(freeList);  } else {    assert index == m_allocs.size();    m_allocs.add(allocator);  }}  }
class C{  public void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.addOnItemTouchListener(listener);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PARAMETERIZED_ACCESS;}  }
class C{  private void accumulateCost(Message[] commands){  SessionState state=ProxySession.getSession().getSessionState();  AttackState attackState=(AttackState)state.getAttribute(ATTACK_STATE_KEY);  if (attackState != null) {    for (    Message command : commands) {switch (command.getInt("id")) {case 600:case 604:        attackState.accumulateCost(command.getInt("typeId"));      break;case 700:    attackState.nextMatch();  break;}}}}  }
class C{  protected void engineInit(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  core.init(opmode,key,random);}  }
class C{  @Override protected void handleTargeted(List<Attribute.TypeCompound> extendsAndImplementsAnnos){  for (  final Attribute.TypeCompound anno : extendsAndImplementsAnnos) {    if (anno.position.type_index >= SUPERCLASS_INDEX && anno.position.location.isEmpty()) {      type.addAnnotation(anno);    }  }}  }
class C{  public Task<HostRestRep> osInstall(URI id,OsInstallParam input){  return putTask(input,getIdUrl() + "/os-install",id);}  }
class C{  public boolean isPaintable(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-26 10:48:13.743 -0500",hash_original_method="B7C95DC991903F722F3C7A4F9E11CCF0",hash_generated_method="FDD619831FEE635BBD068D26E51864CD") private void throwIfClosed(){  if (mNativeDocument == 0) {    throw new IllegalStateException("document is closed!");  }}  }
class C{  public int size(){  return elements;}  }
class C{  private Ref xorOp() throws PageException {  Ref ref=orOp();  while (cfml.forwardIfCurrent("xor")) {    cfml.removeSpace();    ref=new Xor(ref,orOp());  }  return ref;}  }
class C{  protected FetchResponse(){  _parameters.set(new Parameter("mode","fetch_response"));  if (DEBUG)   _log.debug("Created empty fetch response.");}  }
class C{  protected void processMouseEvent(MouseEvent me){  super.processMouseEvent(me);  if (me.getID() == MouseEvent.MOUSE_CLICKED) {    int idx=locationToIndex(me.getPoint());    if (idx != -1 && isSelectedIndex(idx)) {      String selection=(String)getSelectedValue();      SearchField.this.setText(selection);      SearchField.this.hidePopup();    }  }}  }
class C{  public static boolean containsEntry(File file,String entryPath){  if (file.canRead()) {    try {      JarFile jarFile=new JarFile(file);      try {        return jarFile.getEntry(entryPath) != null;      }  finally {        jarFile.close();      }    } catch (    IOException ignored) {    }  }  return false;}  }
class C{  public static void start(ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      ((EnvironmentClassLoader)loader).start();      return;    }  }  init(loader);  for (int i=0; i < _globalEnvironmentListeners.size(); i++) {    EnvLoaderListener listener=_globalEnvironmentListeners.get(i);    listener.environmentStart(null);  }}  }
class C{  public boolean forEach(TIntProcedure procedure){  int[] set=_set;  Object[] values=_values;  for (int i=set.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public void print(){  out.flush();}  }
class C{  private int computeSize(final ISItem item){  return (int)(computeModifierBounded(item.getzPosition()) * maxItemWidth);}  }
class C{  public LocalDateTime withFields(ReadablePartial partial){  if (partial == null) {    return this;  }  return withLocalMillis(getChronology().set(partial,getLocalMillis()));}  }
class C{  protected Angle computeRotation(Vec4 screenPoint,Vec4 orientationScreenPoint){  double deltaX=screenPoint.x - orientationScreenPoint.x;  double deltaY=screenPoint.y - orientationScreenPoint.y;  if (deltaX != 0) {    double angle=Math.atan(deltaY / deltaX);    return Angle.fromRadians(angle);  } else {    return Angle.POS90;  }}  }
class C{  protected void onShowView(final V view){}  }
class C{  public static Matrix identity(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? 1.0 : 0.0);    }  }  return A;}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader;  String outputFileName;  boolean flag;  int row, col;  double xCoord, yCoord;  int progress;  int i;  double value, z, zN;  double contourInterval;  double baseContour;  double zConvFactor=1.0;  int FID=0;  double topNeighbour, leftNeighbour;  int[] rowVals=new int[2];  int[] colVals=new int[2];  int traceDirection=0;  int previousTraceDirection=0;  double currentHalfRow=0, currentHalfCol=0;  double[] elevClassData=new double[4];  long numPoints;  double contourValue=0;  boolean val1, val2;  boolean[] edges=new boolean[4];  boolean[] untraversed=new boolean[4];  int[] visitedData=new int[4];  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  outputFileName=args[1];  contourInterval=Double.parseDouble(args[2]);  if (contourInterval <= 0) {    showFeedback("The contour interval must be greater than zero.");    return;  }  baseContour=Double.parseDouble(args[3]);  zConvFactor=Double.parseDouble(args[4]);  if ((demHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(demHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double east=DEM.getEast() - gridResX / 2.0;    double west=DEM.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=DEM.getNorth() - gridResY / 2.0;    double south=DEM.getSouth() + gridResY / 2.0;    double NSRange=north - south;    String tempHeader1=demHeader.replace(".dep","_temp1.dep");    WhiteboxRaster temp1=new WhiteboxRaster(tempHeader1,"rw",demHeader,WhiteboxRaster.DataType.INTEGER,0);    temp1.isTemporaryFile=true;    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POLYLINE);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("ELEV");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int[] parts={0};    for (row=0; row < rows; row++) {      col=0;      z=DEM.getValue(row,col);      if (z != noData) {        z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;        zN=DEM.getValue(row - 1,col);        topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;        if (topNeighbour != z && zN != noData) {          contourValue=Math.max(z,topNeighbour);          currentHalfRow=row - 0.5;          currentHalfCol=-0.5;          traceDirection=-1;          numPoints=0;          FID++;          PointsList points=new PointsList();          flag=true;          do {            rowVals[0]=(int)Math.floor(currentHalfRow);            rowVals[1]=(int)Math.ceil(currentHalfRow);            colVals[0]=(int)Math.floor(currentHalfCol);            colVals[1]=(int)Math.ceil(currentHalfCol);            if (DEM.getValue(rowVals[0],colVals[0]) != noData) {              elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[0]=noData;            }            if (DEM.getValue(rowVals[0],colVals[1]) != noData) {              elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[1]=noData;            }            if (DEM.getValue(rowVals[1],colVals[0]) != noData) {              elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[2]=noData;            }            if (DEM.getValue(rowVals[1],colVals[1]) != noData) {              elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[3]=noData;            }            edges=new boolean[4];            if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {              edges[0]=true;            }            if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {              edges[1]=true;            }            if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {              edges[2]=true;            }            if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {              edges[3]=true;            }            visitedData=new int[4];            visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);            visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);            visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);            visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);            untraversed=new boolean[4];            if (visitedData[1] == 0 && visitedData[3] == 0) {              untraversed[0]=true;            } else {              val1=BitOps.checkBit(visitedData[1],2);              val2=BitOps.checkBit(visitedData[3],0);              untraversed[0]=!(val1 | val2);            }            if (visitedData[2] == 0 && visitedData[3] == 0) {              untraversed[1]=true;            } else {              val1=BitOps.checkBit(visitedData[2],1);              val2=BitOps.checkBit(visitedData[3],3);              untraversed[1]=!(val1 | val2);            }            if (visitedData[0] == 0 && visitedData[2] == 0) {              untraversed[2]=true;            } else {              val1=BitOps.checkBit(visitedData[0],2);              val2=BitOps.checkBit(visitedData[2],0);              untraversed[2]=!(val1 | val2);            }            if (visitedData[0] == 0 && visitedData[1] == 0) {              untraversed[3]=true;            } else {              val1=BitOps.checkBit(visitedData[0],1);              val2=BitOps.checkBit(visitedData[1],3);              untraversed[3]=!(val1 | val2);            }            previousTraceDirection=traceDirection;            if (edges[0] && untraversed[0]) {              traceDirection=0;            } else             if (edges[1] && untraversed[1]) {              traceDirection=1;            } else             if (edges[2] && untraversed[2]) {              traceDirection=2;            } else             if (edges[3] && untraversed[3]) {              traceDirection=3;            } else {              traceDirection=-1;              flag=false;            }            if (previousTraceDirection != traceDirection) {              xCoord=west + (currentHalfCol / cols) * EWRange;              yCoord=north - (currentHalfRow / rows) * NSRange;              points.addPoint(xCoord,yCoord);            }switch (traceDirection) {case 0:              currentHalfCol+=1.0;            temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));          temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));        break;case 1:      currentHalfRow+=1.0;    temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));  temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 5:",progress);}for (col=0; col < cols; col++) {row=0;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (leftNeighbour != z && zN != noData) {contourValue=Math.max(z,leftNeighbour);currentHalfRow=-0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * col / (cols - 1));updateProgress("Loop 2 of 5:",progress);}for (row=0; row < rows; row++) {col=cols - 1;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row - 1,col);topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (topNeighbour != z && zN != noData) {contourValue=Math.max(z,topNeighbour);currentHalfRow=row - 0.5;currentHalfCol=col + 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 3 of 5:",progress);}for (col=0; col < cols; col++) {row=rows - 1;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (leftNeighbour != z && zN != noData) {contourValue=Math.max(z,leftNeighbour);currentHalfRow=row + 0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * col / (cols - 1));updateProgress("Loop 4 of 5:",progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row - 1,col);topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;value=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((value * zConvFactor) - baseContour) / contourInterval) * contourInterval;if ((topNeighbour != z && zN != noData) || (leftNeighbour != z && value != noData)) {contourValue=Math.max(z,topNeighbour);currentHalfRow=row - 0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 5 of 5:",progress);}DEM.close();temp1.close();output.write();writer.write();returnData(outputFileName);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean doOneRound(RaptorState inputState,RaptorState outputState,boolean useFrequencies,BoardingAssumption boardingAssumption){  stopsTouchedThisRound.clear();  PATTERNS:   for (int p=patternsTouchedThisRound.nextSetBit(0); p >= 0; p=patternsTouchedThisRound.nextSetBit(p + 1)) {    TripPattern timetable=data.tripPatterns.get(p);    if (!timetable.servicesActive.intersects(servicesActive)) {      continue;    }    int stopPositionInPattern=-1;    int bestFreqBoardTime=Integer.MAX_VALUE;    int bestFreqBoardStop=-1;    int bestFreqBoardStopIndex=-1;    TripSchedule bestFreqTrip=null;    if (useFrequencies) {      for (      int stopIndex : timetable.stops) {        stopPositionInPattern+=1;        int remainOnBoardTime;        if (bestFreqTrip != null) {          remainOnBoardTime=bestFreqBoardTime + (bestFreqTrip.arrivals[stopPositionInPattern] - bestFreqTrip.departures[bestFreqBoardStop]);        } else {          remainOnBoardTime=Integer.MAX_VALUE;        }        if (inputState.bestTimes[stopIndex] != UNREACHED) {          for (int tripScheduleIdx=0; tripScheduleIdx < timetable.tripSchedules.size(); tripScheduleIdx++) {            TripSchedule ts=timetable.tripSchedules.get(tripScheduleIdx);            if (ts.headwaySeconds == null || !servicesActive.get(ts.serviceCode)) {              continue;            }            int boardTime=Integer.MAX_VALUE;            FREQUENCY_ENTRIES:             for (int freqEntryIdx=0; freqEntryIdx < ts.headwaySeconds.length; freqEntryIdx++) {              int boardTimeThisEntry;              if (boardingAssumption == BoardingAssumption.BEST_CASE) {                if (inputState.bestTimes[stopIndex] + BOARD_SLACK_SECONDS > ts.endTimes[freqEntryIdx] + ts.departures[stopPositionInPattern])                 continue FREQUENCY_ENTRIES;                boardTimeThisEntry=Math.max(inputState.bestTimes[stopIndex] + BOARD_SLACK_SECONDS,ts.startTimes[freqEntryIdx] + ts.departures[stopPositionInPattern]);              } else               if (boardingAssumption == BoardingAssumption.WORST_CASE) {                if (inputState.bestTimes[stopIndex] + BOARD_SLACK_SECONDS > ts.endTimes[freqEntryIdx] + ts.departures[stopPositionInPattern] - ts.headwaySeconds[freqEntryIdx])                 continue FREQUENCY_ENTRIES;                boardTimeThisEntry=Math.max(inputState.bestTimes[stopIndex] + BOARD_SLACK_SECONDS + ts.headwaySeconds[freqEntryIdx],ts.startTimes[freqEntryIdx] + ts.departures[stopPositionInPattern] + ts.headwaySeconds[freqEntryIdx]);              } else {                int offset=offsets.offsets.get(p)[tripScheduleIdx][freqEntryIdx];                boardTimeThisEntry=ts.startTimes[freqEntryIdx] + ts.departures[stopPositionInPattern] + offset;                while (boardTimeThisEntry < inputState.bestTimes[stopIndex] + BOARD_SLACK_SECONDS) {                  boardTimeThisEntry+=ts.headwaySeconds[freqEntryIdx];                  if (boardTimeThisEntry - ts.departures[stopPositionInPattern] > ts.endTimes[freqEntryIdx]) {                    continue FREQUENCY_ENTRIES;                  }                }              }              boardTime=Math.min(boardTime,boardTimeThisEntry);            }            if (boardTime != Integer.MAX_VALUE && boardTime < remainOnBoardTime) {              if (bestFreqBoardStop == stopPositionInPattern && bestFreqBoardTime < boardTime)               continue;              bestFreqBoardTime=boardTime;              bestFreqBoardStop=stopPositionInPattern;              bestFreqBoardStopIndex=stopIndex;              bestFreqTrip=ts;            }          }        }        if (remainOnBoardTime != Integer.MAX_VALUE && remainOnBoardTime < max_time) {          if (outputState.bestNonTransferTimes[stopIndex] > remainOnBoardTime) {            outputState.bestNonTransferTimes[stopIndex]=remainOnBoardTime;            outputState.nonTransferInVehicleTravelTime[stopIndex]=inputState.inVehicleTravelTime[bestFreqBoardStopIndex] + remainOnBoardTime - bestFreqBoardTime;            outputState.nonTransferWaitTime[stopIndex]=inputState.waitTime[bestFreqBoardStopIndex] + bestFreqBoardTime - inputState.bestTimes[bestFreqBoardStopIndex];            outputState.previousPatterns[stopIndex]=p;            outputState.previousStop[stopIndex]=bestFreqBoardStopIndex;            stopsTouchedThisRound.set(stopIndex);            stopsTouchedThisSearch.set(stopIndex);            if (outputState.bestTimes[stopIndex] > remainOnBoardTime) {              outputState.bestTimes[stopIndex]=remainOnBoardTime;              outputState.transferStop[stopIndex]=-1;              outputState.inVehicleTravelTime[stopIndex]=inputState.inVehicleTravelTime[bestFreqBoardStopIndex] + remainOnBoardTime - bestFreqBoardTime;              outputState.waitTime[stopIndex]=inputState.waitTime[bestFreqBoardStopIndex] + bestFreqBoardTime - inputState.bestTimes[bestFreqBoardStopIndex];            }            if (outputState.bestNonTransferTimes[stopIndex] > inputState.bestNonTransferTimes[stopIndex] || outputState.bestTimes[stopIndex] > inputState.bestTimes[stopIndex]) {              LOG.error("Relaxing stop increased travel time at stop {}, can't happen",stopIndex);            }            if (remainOnBoardTime < outputState.departureTime) {              LOG.error("Negative speed travel, path dump follows:\n{}",outputState.dump(stopIndex));            }          }        }      }      if (bestFreqTrip != null)       continue PATTERNS;    }    TripSchedule onTrip=null;    int onTripIdx=-1;    int boardStopIndex=-1;    int boardTime=0;    stopPositionInPattern=-1;    for (    int stopIndex : timetable.stops) {      stopPositionInPattern+=1;      if (onTrip == null) {        if (inputState.bestTimes[stopIndex] == UNREACHED) {          continue;        }        int tripIdx=-1;        for (        TripSchedule trip : timetable.tripSchedules) {          tripIdx++;          if (trip.headwaySeconds != null || !servicesActive.get(trip.serviceCode))           continue;          int dep=trip.departures[stopPositionInPattern];          if (dep > inputState.bestTimes[stopIndex] + BOARD_SLACK_SECONDS) {            onTrip=trip;            onTripIdx=tripIdx;            boardStopIndex=stopIndex;            boardTime=dep;            break;          }        }        continue;      } else {        int arrivalTime=onTrip.arrivals[stopPositionInPattern];        if (arrivalTime > max_time)         continue PATTERNS;        if (arrivalTime < outputState.bestNonTransferTimes[stopIndex]) {          outputState.bestNonTransferTimes[stopIndex]=arrivalTime;          outputState.previousPatterns[stopIndex]=p;          outputState.previousStop[stopIndex]=boardStopIndex;          outputState.nonTransferInVehicleTravelTime[stopIndex]=inputState.inVehicleTravelTime[boardStopIndex] + arrivalTime - boardTime;          outputState.nonTransferWaitTime[stopIndex]=inputState.waitTime[boardStopIndex] + boardTime - inputState.bestTimes[boardStopIndex];          if (outputState.nonTransferWaitTime[stopIndex] > outputState.bestNonTransferTimes[stopIndex] - outputState.departureTime) {            LOG.error("Wait time exceeds travel time:\n{}",outputState.dump(stopIndex));            LOG.error("This is a bug");          }          stopsTouchedThisRound.set(stopIndex);          stopsTouchedThisSearch.set(stopIndex);          if (arrivalTime < outputState.bestTimes[stopIndex]) {            outputState.bestTimes[stopIndex]=arrivalTime;            outputState.transferStop[stopIndex]=-1;            outputState.inVehicleTravelTime[stopIndex]=inputState.inVehicleTravelTime[boardStopIndex] + arrivalTime - boardTime;            outputState.waitTime[stopIndex]=inputState.waitTime[boardStopIndex] + boardTime - inputState.bestTimes[boardStopIndex];          }        }        if (inputState.bestTimes[stopIndex] < arrivalTime) {          int bestTripIdx=onTripIdx;          while (--bestTripIdx >= 0) {            TripSchedule trip=timetable.tripSchedules.get(bestTripIdx);            if (trip.headwaySeconds != null || !servicesActive.get(trip.serviceCode)) {              continue;            }            if (trip.departures[stopPositionInPattern] > inputState.bestTimes[stopIndex] + BOARD_SLACK_SECONDS) {              onTripIdx=bestTripIdx;              onTrip=trip;              boardStopIndex=stopIndex;              boardTime=trip.departures[stopPositionInPattern];            } else {              break;            }          }        }      }    }  }  doTransfers(outputState);  return !patternsTouchedThisRound.isEmpty();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.645 -0500",hash_original_method="3A00FD245E091565EAC4D2A0BF135C63",hash_generated_method="8901A73A778C103F6D40C70DADE93696") public boolean checkBranchId(){  return this.checkBranchId;}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public static <T,ID>int dropTable(ConnectionSource connectionSource,Class<T> dataClass,boolean ignoreErrors) throws SQLException {  DatabaseType databaseType=connectionSource.getDatabaseType();  Dao<T,ID> dao=DaoManager.createDao(connectionSource,dataClass);  if (dao instanceof BaseDaoImpl<?,?>) {    return doDropTable(databaseType,connectionSource,((BaseDaoImpl<?,?>)dao).getTableInfo(),ignoreErrors);  } else {    TableInfo<T,ID> tableInfo=new TableInfo<T,ID>(connectionSource,null,dataClass);    return doDropTable(databaseType,connectionSource,tableInfo,ignoreErrors);  }}  }
class C{  @Override public boolean load(Element sharedLogix,Element perNodeLogix){  replaceLogixManager();  loadLogixs(sharedLogix);  return true;}  }
class C{  private Attribute findNextDeclaredAttribute(){  if (metadataIterator != null) {    while (metadataIterator.hasNext()) {      AttributeKey<?> nextKey=metadataIterator.next();      if (ElementCreatorImpl.ATTRIBUTE_MARKER == nextKey) {        mode=Mode.UNDECLARED;        return null;      }      AttributeMetadata<?> attMeta=metadata.bindAttribute(nextKey);      if (!attMeta.isVisible()) {        continue;      }      Object value=attMeta.generateValue(element,metadata);      if (value != null) {        return new Attribute(nextKey,value);      }    }    metadataIterator=null;  }  mode=Mode.UNDECLARED;  return null;}  }
class C{  protected void addIfdData(IfdData data){  mIfdDatas[data.getId()]=data;}  }
class C{  public void addListener(LifecycleListener listener){synchronized (this) {    if (isDestroyed()) {      IllegalStateException e=new IllegalStateException("attempted to add listener to a destroyed lifecyle " + this);      if (_log != null)       _log.log(Level.WARNING,e.toString(),e); else       Logger.getLogger(Lifecycle.class.getName()).log(Level.WARNING,e.toString(),e);      return;    }    if (_listeners == null)     _listeners=new ArrayList<WeakReference<LifecycleListener>>();    for (int i=_listeners.size() - 1; i >= 0; i--) {      LifecycleListener oldListener=_listeners.get(i).get();      if (listener == oldListener)       return; else       if (oldListener == null)       _listeners.remove(i);    }    _listeners.add(new WeakReference<LifecycleListener>(listener));  }}  }
class C{  public EnchantmentStorageMetaBuilder start(final EnchantmentStorageMeta meta){  return new EnchantmentStorageMetaBuilder(meta);}  }
class C{  public GAVariation(Variation crossover,Variation mutation){  super(crossover,mutation);  setName(crossover.getClass().getSimpleName());}  }
class C{  public BufferParameters(){}  }
class C{  public void addNode(TopologicalNode node){  nodeList.add(node);}  }
class C{  public void include(R rule){  addRule(rule,true);}  }
class C{  public int[] shuffle(){  int[] a=nums.clone();  for (int i=1; i < a.length; i++) {    int j=r.nextInt(i + 1);    int temp=a[i];    a[i]=a[j];    a[j]=temp;  }  return a;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @SuppressWarnings("unchecked") public T[] build(){  return build((Consumer<T>)NO_ACTION);}  }
class C{  private static void appendOptionalParameter(StringBuilder sb,String paramName,String paramValue,boolean base64Encode) throws UnsupportedEncodingException {  if (paramValue != null && paramValue != "") {    if (sb.length() != 0) {      sb.append("&");    }    sb.append(paramName + "=");    if (base64Encode) {      paramValue=SharedUtils.encodeString(paramValue);    }    try {      sb.append(URLEncoder.encode(paramValue,"UTF-8"));    } catch (    UnsupportedEncodingException e) {    }  }}  }
class C{  static public int packLong(byte[] ba,long value) throws IOException {  if (value < 0) {    throw new IllegalArgumentException("negative value: v=" + value);  }  int i=1;  while ((value & ~0x7FL) != 0) {    ba[i - 1]=(byte)(((int)value & 0x7F) | 0x80);    value>>>=7;    i++;  }  ba[i - 1]=(byte)value;  return i;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.182 -0500",hash_original_method="CAD829645188BB4FEA744BF7331A1E52",hash_generated_method="1222D259807353680677815467D7A3EB") public int stat(int articleNumber) throws IOException {  return sendCommand(NNTPCommand.STAT,Integer.toString(articleNumber));}  }
class C{  public void unsetActiveSession(){  if (log.isInfoEnabled()) {    log.info("Setting no active session for site '" + site + "'.");  }  if (this.activeSession != null) {    this.activeSession.setActive(false);    if (this.activeSession.getTokenValuesCount() == 0) {      this.removeHttpSession(this.activeSession);    } else {      model.fireHttpSessionUpdated(this.activeSession);    }    this.activeSession=null;  }}  }
class C{  public static void run(final String inputNetworkFile,final String outputNetworkFile){  final Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  final Network network=scenario.getNetwork();  new MatsimNetworkReader(scenario.getNetwork()).readFile(inputNetworkFile);  NetworkCleaner cleaner=new org.matsim.core.network.algorithms.NetworkCleaner();  cleaner.run(network);  NetworkSimplifier simplifier=new org.matsim.contrib.matsim4urbansim.utils.network.NetworkSimplifier();  simplifier.setMergeLinkStats(true);  Set<Integer> nodeTypesToMerge=new TreeSet<Integer>();  nodeTypesToMerge.add(NetworkCalcTopoType.PASS1WAY);  nodeTypesToMerge.add(NetworkCalcTopoType.PASS2WAY);  simplifier.setNodesToMerge(nodeTypesToMerge);  simplifier.run(network);  new NetworkWriter(network).write(outputNetworkFile);}  }
class C{  public BasicTacticalSymbolAttributes(){}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static void logElapsedTime(String title,long timeInNanos){  logger.info(String.format("Time elapsed (%s): %d",title,timeInNanos / NANOS_PER_SECOND));}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private static int paddingBytecode(PseudoBytecode head){  PseudoBytecode bcode=head.next;  int bsize=0;  while (bcode != null) {    bsize+=bcode.getSize();    bcode=bcode.next;  }  int padding=3 - (bsize + 3) & 0x03;  for (int i=0; i < padding; i++) {    bcode=new Nop();    bcode.next=head.next;    head.next=bcode;  }  bsize+=padding;  return bsize;}  }
class C{  static String toString(ExecutableElement element){  StringBuilder sb=new StringBuilder();  sb.append(element.getSimpleName());  sb.append("(");  for (Iterator<? extends VariableElement> i=element.getParameters().iterator(); i.hasNext(); ) {    sb.append(standarizeType(i.next().asType()));    if (i.hasNext()) {      sb.append(",");    }  }  sb.append(")");  return sb.toString();}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  public TagEntity createTagEntity(TagTypeEntity tagTypeEntity,String tagCode,String tagDisplayName,String tagDescription){  TagEntity tagEntity=new TagEntity();  tagEntity.setTagType(tagTypeEntity);  tagEntity.setTagCode(tagCode);  tagEntity.setDisplayName(tagDisplayName);  tagEntity.setDescription(tagDescription);  tagEntity.setParentTagEntity(null);  return tagDao.saveAndRefresh(tagEntity);}  }
class C{  public static Long asLong(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Integer) {    return Long.valueOf((Integer)obj);  }  if (obj instanceof Long) {    return (Long)obj;  }  throw new ClassCastException("Expected value of type Long or Integer");}  }
class C{  private void log(LogEntryType type,String tag,String message){  if (type.ordinal() >= mLogLevel.ordinal()) {    LogEntry logEntry=new LogEntry(type,tag,message);    logEntry.writeToLogCat();    mEntryList.add(logEntry);  }}  }
class C{  public int compare(Object obj1,Object obj2){  DataFlavor flavor1=(DataFlavor)obj1;  DataFlavor flavor2=(DataFlavor)obj2;  if (flavor1.isFlavorTextType()) {    if (flavor2.isFlavorTextType()) {      return super.compare(obj1,obj2);    } else {      return 1;    }  } else   if (flavor2.isFlavorTextType()) {    return -1;  } else {    return 0;  }}  }
class C{  public boolean isMandatory(){  return false;}  }
class C{  @Override public Topic createTopic(final String topicName) throws JMSException {  if (cri.getType() == ActiveMQRAConnectionFactory.QUEUE_CONNECTION || cri.getType() == ActiveMQRAConnectionFactory.XA_QUEUE_CONNECTION) {    throw new IllegalStateException("Cannot create topic for javax.jms.QueueSession");  }  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createTopic " + session + " topicName="+ topicName);  }  Topic result=session.createTopic(topicName);  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createdTopic " + session + " topic="+ result);  }  return result;}  }
class C{  private void sendClientMessage() throws IOException {  ArrayList<ByteString> blindedFriends=Crypto.byteArraysToStrings(mClientPSI.encodeBlindedItems());  ClientMessage cm=new ClientMessage.Builder().messages(getMessages()).blindedFriends(blindedFriends).build();  boolean success=lengthValueWrite(out,cm);  if (!success) {    setExchangeStatus(Status.ERROR);    setErrorMessage("Length/value write of client message failed.");    throw new IOException("Length/value write of client message failed, but exception is hidden (see Exchange.java)");  }}  }
class C{  private void removeBranchID(Request request){  ViaHeader viaHeader=(ViaHeader)request.getHeader(ViaHeader.NAME);  viaHeader.removeParameter("branch");}  }
class C{  private void generateGaussianExamples(Instances format,int numInstances,Random random,SubspaceClusterDefinition cl,String cName){  boolean makeInteger=cl.isInteger();  Instance example=null;  int numAtts=m_NumAttributes;  if (getClassFlag()) {    numAtts++;  }  example=new DenseInstance(numAtts);  example.setDataset(format);  boolean[] attributes=cl.getAttributes();  double[] meanValue=cl.getMeanValue();  double[] stddevValue=cl.getStddevValue();  for (int j=0; j < numInstances; j++) {    int num=-1;    for (int i=0; i < m_NumAttributes; i++) {      if (attributes[i]) {        num++;        double value=meanValue[num] + (random.nextGaussian() * stddevValue[num]);        if (makeInteger) {          value=Math.round(value);        }        example.setValue(i,value);      } else {        example.setMissing(i);      }    }    if (getClassFlag()) {      example.setClassValue(cName);    }    format.add(example);  }}  }
class C{  private String jusifyLastLine(int start,int end,ArrayList<String> A,int B){  StringBuilder res=new StringBuilder(String.join(" ",A.subList(start,end + 1)));  while (res.length() < B) {    res.append(" ");  }  return res.toString();}  }
class C{  public void forEachSrcOver(Allocation ain,Allocation aout){  blend(3,ain,aout);}  }
class C{  public JiangConrathComparator(LexicalSemanticResource lexSemResource,Entity root) throws LexicalSemanticResourceException {  super(lexSemResource,root);}  }
class C{  public int rtf(){  return DTM.NULL;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (semIm == null) {    throw new NullPointerException();  }  if (parameter == null) {    throw new NullPointerException();  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public NetworkRestRep deregisterNetwork(@PathParam("id") URI id){  Network network=queryResource(id);  ArgValidator.checkEntity(network,id,isIdEmbeddedInURL(id));  if (RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(network.getRegistrationStatus())) {    network.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(network);    auditOp(OperationTypeEnum.DEREGISTER_NETWORK,true,null,network.getLabel(),network.getId().toString());  }  return MapNetwork.toNetworkRestRep(network,_dbClient);}  }
class C{  @Override public long skip(long toSkip) throws IOException {  for (long i=0; i < toSkip; i++) {    int intRead=read();    if (intRead == -1)     return i;  }  return toSkip;}  }
class C{  public Iterator<E> iterator(){  return new Itr(toArray());}  }
class C{  protected int bytesPerAtom(){  return (4);}  }
class C{  void removeOldEntries(){  Iterator<Map.Entry<K,V>> iterator=entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<K,V> entry=iterator.next();    if (entry.getValue().isExpired()) {      iterator.remove();    } else {      return;    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void resetKeyboardActions(){  for (int counter=0; counter < 3; counter++) {    InputMap inputMap=getInputMap(counter,false);    if (inputMap != null) {      inputMap.clear();    }  }  ActionMap am=getActionMap(false);  if (am != null) {    am.clear();  }}  }
class C{  public void renderCenter(GL2 gl){  Vector2 c=this.mass.getCenter();  gl.glColor4fv(Preferences.getBodyCenterColor(),0);  RenderUtilities.drawPoint(gl,c);}  }
class C{  public void init(RemoteAuthenticatedUser currentUser){  this.currentUser=currentUser;}  }
class C{  public void testGetInstanceStringString01() throws NoSuchAlgorithmException, IllegalArgumentException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    KeyAgreement.getInstance(null,defaultProviderName);    fail("NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyAgreement.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final void put(String key,int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;    int newValues[]=new int[m_mapSize];    System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);    m_values=newValues;  }  m_map[m_firstFree]=key;  m_values[m_firstFree]=value;  m_firstFree++;}  }
class C{  private boolean lambdaIdentSymbolFilter(Symbol sym){  return (sym.kind == VAR || sym.kind == MTH) && !sym.isStatic() && sym.name != names.init;}  }
class C{  public void detachDiskAsync(final String vmId,VmDiskOperation vmDiskOperation,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/detach_disk",getBasePath(),vmId);  createObjectAsync(path,serializeObjectAsJson(vmDiskOperation),responseCallback);}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  HeikinAshiDataset clone=(HeikinAshiDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  private SimpleOrderedMap<List<NamedList<Object>>> processSingle(List<String> pivotFields,String refinements,List<StatsField> statsFields,final ParsedParams parsed,List<FacetComponent.FacetBase> facetQueries,List<RangeFacetRequest> facetRanges) throws IOException {  SolrIndexSearcher searcher=rb.req.getSearcher();  SimpleOrderedMap<List<NamedList<Object>>> pivotResponse=new SimpleOrderedMap<>();  String field=pivotFields.get(0);  SchemaField sfield=searcher.getSchema().getField(field);  Deque<String> fnames=new LinkedList<>();  for (int i=pivotFields.size() - 1; i > 1; i--) {    fnames.push(pivotFields.get(i));  }  NamedList<Integer> facetCounts;  Deque<String> vnames=new LinkedList<>();  if (null != refinements) {    List<String> refinementValuesByField=PivotFacetHelper.decodeRefinementValuePath(refinements);    for (int i=refinementValuesByField.size() - 1; i > 0; i--) {      vnames.push(refinementValuesByField.get(i));    }    String firstFieldsValues=refinementValuesByField.get(0);    facetCounts=new NamedList<>();    facetCounts.add(firstFieldsValues,getSubsetSize(parsed.docs,sfield,firstFieldsValues));  } else {    facetCounts=this.getTermCountsForPivots(field,parsed);  }  if (pivotFields.size() > 1) {    String subField=pivotFields.get(1);    pivotResponse.add(parsed.key,doPivots(facetCounts,field,subField,fnames,vnames,parsed,statsFields,facetQueries,facetRanges));  } else {    pivotResponse.add(parsed.key,doPivots(facetCounts,field,null,fnames,vnames,parsed,statsFields,facetQueries,facetRanges));  }  return pivotResponse;}  }
class C{  public final ArrayList<WifiRecord> loadWifisBySession(final int session,final String sort){  final ArrayList<WifiRecord> wifis=new ArrayList<>();  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(Uri.withAppendedPath(ContentProvider.CONTENT_URI_WIFI,ContentProvider.CONTENT_URI_SESSION_SUFFIX),session),null,null,null,sort);  final int columnIndex=cursor.getColumnIndex(Schema.COL_BSSID);  final int columnIndex2=cursor.getColumnIndex(Schema.COL_SSID);  final int columnIndex3=cursor.getColumnIndex(Schema.COL_CAPABILITIES);  final int columnIndex4=cursor.getColumnIndex(Schema.COL_FREQUENCY);  final int columnIndex5=cursor.getColumnIndex(Schema.COL_LEVEL);  final int columnIndex6=cursor.getColumnIndex(Schema.COL_TIMESTAMP);  final int columnIndex7=cursor.getColumnIndex(Schema.COL_BEGIN_POSITION_ID);  final int columnIndex8=cursor.getColumnIndex(Schema.COL_END_POSITION_ID);  final int columnIndex9=cursor.getColumnIndex(Schema.COL_KNOWN_WIFI);  while (cursor.moveToNext()) {    final WifiRecord wifi=new WifiRecord();    wifi.setBssid(cursor.getString(columnIndex));    wifi.setSsid(cursor.getString(columnIndex2));    wifi.setCapabilities(cursor.getString(columnIndex3));    wifi.setFrequency(cursor.getInt(columnIndex4));    wifi.setLevel(cursor.getInt(columnIndex5));    wifi.setOpenBmapTimestamp(cursor.getLong(columnIndex6));    wifi.setBeginPosition(loadPositionById(cursor.getString(columnIndex7)));    wifi.setEndPosition(loadPositionById(cursor.getString(columnIndex8)));    wifi.setCatalogStatus(CatalogStatus.values()[cursor.getInt(columnIndex9)]);    wifis.add(wifi);  }  cursor.close();  return wifis;}  }
class C{  public void add(List<Value> items){  for (  Value Value : items) {    this.add(Value);  }}  }
class C{  protected boolean saveKeyStore(KeyStoreHistory history){  File saveFile=null;  try {    KeyStoreState currentState=history.getCurrentState();    kseFrame.focusOnKeyStore(currentState.getKeyStore());    saveFile=history.getFile();    if (saveFile == null) {      return saveKeyStoreAs(history);    }    Password password=currentState.getPassword();    if (password == null) {      SetPasswordAction setPasswordAction=new SetPasswordAction(kseFrame);      if (setPasswordAction.setKeyStorePassword()) {        currentState=history.getCurrentState();        password=currentState.getPassword();      } else {        return false;      }    }    KeyStoreUtil.save(currentState.getKeyStore(),saveFile,password);    currentState.setPassword(password);    currentState.setAsSavedState();    kseFrame.updateControls(false);    return true;  } catch (  FileNotFoundException ex) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("SaveAction.NoWriteFile.message"),saveFile),res.getString("SaveAction.SaveKeyStore.Title"),JOptionPane.WARNING_MESSAGE);    return false;  }catch (  Exception ex) {    DError.displayError(frame,ex);    return false;  }}  }
class C{  public void registerCursor(Cursor cursor){  if (cursorRegistry == null) {    cursorRegistry=new HashSet<Cursor>();  }  cursorRegistry.add(cursor);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (contentHandler != null) {    contentHandler.startPrefixMapping(prefix,uri);  }}  }
class C{  public void endRegisterInterest(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(registerInterestInProgressId,-1);  int endRegisterInterestId;  if (timedOut) {    endRegisterInterestId=registerInterestTimedOutId;  } else   if (failed) {    endRegisterInterestId=registerInterestFailedId;  } else {    endRegisterInterestId=registerInterestId;  }  this.stats.incInt(endRegisterInterestId,1);  this.stats.incLong(registerInterestDurationId,duration);}  }
class C{  public DrawerBuilder withHeaderDivider(boolean headerDivider){  this.mHeaderDivider=headerDivider;  return this;}  }
class C{  public static ClassInfo of(Class<?> underlyingClass,boolean ignoreCase){  if (underlyingClass == null) {    return null;  }  final Map<Class<?>,ClassInfo> cache=ignoreCase ? CACHE_IGNORE_CASE : CACHE;  ClassInfo classInfo;synchronized (cache) {    classInfo=cache.get(underlyingClass);    if (classInfo == null) {      classInfo=new ClassInfo(underlyingClass,ignoreCase);      cache.put(underlyingClass,classInfo);    }  }  return classInfo;}  }
class C{  public AttributeModifier build(){  return new BasicAttributeModifier((this.uuid == null) ? UUID.randomUUID() : this.uuid,this.name,this.value,this.operation,(this.slot == null) ? ModifierSlot.NOT_SET : this.slot,this.type);}  }
class C{  public void postEvaluationStatistics(final EvolutionState state){  super.postEvaluationStatistics(state);  Individual[] best_i=new Individual[state.population.subpops.length];  for (int x=0; x < state.population.subpops.length; x++) {    best_i[x]=state.population.subpops[x].individuals[0];    for (int y=1; y < state.population.subpops[x].individuals.length; y++)     if (state.population.subpops[x].individuals[y].fitness.betterThan(best_i[x].fitness))     best_i[x]=state.population.subpops[x].individuals[y];    boolean newBestOfRun=false;    if (best_of_run[x] == null || best_i[x].fitness.betterThan(best_of_run[x].fitness)) {      best_of_run[x]=(Individual)(best_i[x].clone());      best_of_run_generation[x]=state.generation;      newBestOfRun=true;    }    if (detailToLog.equals("all") || (detailToLog.equals("change") && newBestOfRun)) {      state.output.println("BEST INDIVIDUAL OF GENERATION",Output.V_NO_GENERAL,statisticslog);      state.output.println("Generation: " + state.generation,Output.V_NO_GENERAL,statisticslog);      best_i[x].printIndividualForHumans(state,statisticslog,Output.V_NO_GENERAL);    }  }}  }
class C{  public static Objectify ofy(){  return ObjectifyService.ofy();}  }
class C{  public void drawOval(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing oval: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawOval(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawOval(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawOval(x,y,width,height);}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public boolean askWithTTEntails(String queryString){  PLParser parser=new PLParser();  Sentence alpha=parser.parse(queryString);  return new TTEntails().ttEntails(this,alpha);}  }
class C{  public HtmlPolicyBuilder allowElements(String... elementNames){  return allowElements(ElementPolicy.IDENTITY_ELEMENT_POLICY,elementNames);}  }
class C{  public static final void shuffle(Object[] a,int start,int len,Random r){  for (int i=start + len; i > 1; --i) {    Object t=a[i];    int j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  public static serverObjects respond(@SuppressWarnings("unused") final RequestHeader header,final serverObjects post,final serverSwitch env){  final Switchboard sb=(Switchboard)env;  final serverObjects prop=new serverObjects();  String hash=null;  if (post != null) {    hash=post.get("hash",null);  }  if (hash != null) {    Seed seed=sb.peers.getConnected(hash);    if (seed != null) {      String peersUrl=seed.getPublicAddress(seed.getIP());      if (peersUrl != null) {        String path=post.get("path","/");        if (!path.startsWith("/"))         path="/" + path;        prop.put(serverObjects.ACTION_LOCATION,"http://" + peersUrl + path);      }    } else {      prop.put("msg","peer not available");    }  } else {    prop.put("msg","parameter missing");  }  return prop;}  }
class C{  public Node addNode(Coordinate coord){  Node node=(Node)nodeMap.get(coord);  if (node == null) {    node=nodeFact.createNode(coord);    nodeMap.put(coord,node);  }  return node;}  }
class C{  private double round(double data){  return Math.rint(data / m_Precision) * m_Precision;}  }
class C{  public Builder deletePhoto(Photo photo){  Photo deletePhoto=new Photo.Builder().setValue(photo.getValueAsURI()).setType(photo.getType()).setOperation(DELETE).build();  photos.add(deletePhoto);  return this;}  }
class C{  public void initialize(JFrame mainFrame){  this.mainFrame=mainFrame;  String lastDirectoryPath=(String)ConfigurationManager.getInstance().readString(PATH_KEY,null);  if (lastDirectoryPath != null) {    lastDirectory=new File(lastDirectoryPath);  }}  }
class C{  public void removeDocuments(List<Query> queries){  IndexWriter writer=getWriter();  for (  Query query : queries) {    try {      writer.deleteDocuments(query);    } catch (    Exception e) {      e.printStackTrace();      closeWriter(writer);      throw new RuntimeException(e);    }  }  closeWriter(writer);}  }
class C{  private int trimToPowerOf2(int initialCapacity){  int capacity=1;  while (capacity < initialCapacity) {    capacity<<=1;  }  return capacity;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public static MutableDirectedGraph<INaviViewNode,INaviEdge> loadView(final AbstractSQLProvider provider,final INaviView view,final List<INaviModule> list,final CTagManager nodeTagManager) throws CouldntLoadDataException, CPartialLoadException {  checkArguments(provider,view,list,nodeTagManager);  try {    final List<INaviViewNode> nodes=PostgreSQLNodeLoader.loadNodes(provider,view,list,nodeTagManager);    NodeCache.get(provider).addNodes(nodes);    final List<INaviEdge> edges=PostgreSQLEdgeLoader.loadEdges(provider,view,nodes);    EdgeCache.get(provider).addEdges(edges);    return new MutableDirectedGraph<INaviViewNode,INaviEdge>(nodes,edges);  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public String addStepsForUpdateApplication(Workflow workflow,ApplicationAddVolumeList addVolList,List<URI> removeVolumeURIs,String waitForStep,String taskId){  String waitFor=waitForStep;  Table<URI,String,List<URI>> storageRGToRemoveVolumes=getStorageSystemRGVolumes(removeVolumeURIs,null);  if (addVolList != null) {    Table<URI,String,List<URI>> storageRGToAddVolumes=getStorageSystemRGVolumes(addVolList.getVolumes(),addVolList.getReplicationGroupName());    for (    Cell<URI,String,List<URI>> cell : storageRGToAddVolumes.cellSet()) {      URI storage=cell.getRowKey();      String rgName=cell.getColumnKey();      List<URI> addVolumes=cell.getValue();      List<URI> removeVolumes=new ArrayList<URI>();      if (NullColumnValueGetter.isNotNullValue(rgName)) {        removeVolumes.addAll(addVolumes);      }      if (storageRGToRemoveVolumes.contains(storage,rgName)) {        removeVolumes.addAll(storageRGToRemoveVolumes.remove(storage,rgName));      }      waitFor=addStepsForUpdateApplicationSingleStorage(workflow,storage,addVolList.getReplicationGroupName(),addVolumes,removeVolumes,waitFor,taskId);    }  }  for (  Cell<URI,String,List<URI>> cell : storageRGToRemoveVolumes.cellSet()) {    waitFor=addStepsForUpdateApplicationSingleStorage(workflow,cell.getRowKey(),null,null,cell.getValue(),waitFor,taskId);  }  return waitFor;}  }
class C{  public static int binarySearch(double[] array,int startIndex,int endIndex,double value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  long longBits=Double.doubleToLongBits(value);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (lessThan(array[mid],value)) {      low=mid + 1;    } else     if (longBits == Double.doubleToLongBits(array[mid])) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (lessThan(value,array[mid]) ? 1 : 2);}  }
class C{  public static boolean isNew(UIComponent component){  UIComponent c=component;  if (c != null) {    UIComponent parent=c.getParent();    if (parent != null) {      if (UIComponent.isCompositeComponent(parent)) {        c=parent;      }    }    return c.getParent() == null;  } else {    return false;  }}  }
class C{  public int readUnsignedByteBE() throws IOException {  return inputStream.readUnsignedByte();}  }
class C{  public EchoBreakpointSetParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BPE_SET_SUCCESS);}  }
class C{  @PostConstruct public void init(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:06.585 -0500",hash_original_method="E451B33DF0760BCBC0A94001216332F0",hash_generated_method="61DC1FEC35105D4CA9CB72BF594E062E") public void readExternal(ObjectInput objectInput) throws IOException {  boolean useFlyweightMapStorage=objectInput.readBoolean();  if (useFlyweightMapStorage) {    areaCodeMapStorage=new FlyweightMapStorage();  } else {    areaCodeMapStorage=new DefaultMapStorage();  }  areaCodeMapStorage.readExternal(objectInput);}  }
class C{  public EmptyTileFactory(){  this(new TileFactoryInfo("EmptyTileFactory 256x256",1,15,17,256,true,true,"","x","y","z"));}  }
class C{  public T pop(){  if (head.delay > 0) {    throw new IllegalStateException("cannot pop the head element when it has a non-zero delay");  }  T popped=head.value;  head=head.next;  size--;  return popped;}  }
class C{  protected void emit_VersionConstraint_RightParenthesisKeyword_0_2_1_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public boolean needsHighlight(int xIndex,int dataSetIndex){  if (!valuesToHighlight() || dataSetIndex < 0)   return false;  for (int i=0; i < mIndicesToHighlight.length; i++)   if (mIndicesToHighlight[i].getXIndex() == xIndex && mIndicesToHighlight[i].getDataSetIndex() == dataSetIndex)   return true;  return false;}  }
class C{  @Override protected void doDrawInterior(DrawContext dc){  return;}  }
class C{  public String globalInfo(){  return " A SplitEvaluator that produces results for a density based clusterer. ";}  }
class C{  private void prepareVolumes(StorageSystem storage,Map<String,String> volumeUriToHluMap,List<StorageVolume> driverVolumes,Map<String,String> driverVolumeToHLUMap,Map<String,String> volumeNativeIdToUriMap){  for (  Map.Entry<String,String> volumeUriToHlu : volumeUriToHluMap.entrySet()) {    String volumeURI=volumeUriToHlu.getKey();    BlockObject volume=(BlockObject)dbClient.queryObject(URIUtil.uri(volumeURI));    StorageVolume driverVolume=createDriverVolume(storage,volume);    driverVolumes.add(driverVolume);    driverVolumeToHLUMap.put(driverVolume.getNativeId(),volumeUriToHlu.getValue());    volumeNativeIdToUriMap.put(driverVolume.getNativeId(),volumeURI);  }  log.info("prepareVolumes: volume-HLU pairs for driver: {}",driverVolumeToHLUMap);}  }
class C{  @Override protected void doPut(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String command=request.getServletPath();  if (command.equals("/deploy")) {    String contextPath=request.getParameter("path");    deployArchive(request,response,contextPath);  } else {    sendError(response,"Command " + command + " is not recognized with PUT");  }}  }
class C{  private void validateFocusIndex(){  if (focusIndex >= tabPane.getTabCount()) {    setFocusIndex(tabPane.getSelectedIndex(),false);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected boolean accept(final IChangeRecord record){  return true;}  }
class C{  public ExceptionSubclassesTest(String name){  super(name);}  }
class C{  public void load(){}  }
class C{  private final void moveDeferredMessageAtFrontOfQueue(){  for (int i=mDeferredMessages.size() - 1; i >= 0; i--) {    Message curMsg=mDeferredMessages.get(i);    if (mDbg)     mSm.log("moveDeferredMessageAtFrontOfQueue; what=" + curMsg.what);    sendMessageAtFrontOfQueue(curMsg);  }  mDeferredMessages.clear();}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void releaseWakeLock(){}  }
class C{  public static void cleanup(Object o){  Util.getImplementation().cleanup(o);}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  protected void clearFilters(){  filters.clear();}  }
class C{  public static InputStream openSystemFile(String filename) throws FileNotFoundException {  try {    return new FileInputStream(filename);  } catch (  FileNotFoundException e) {    String resname=filename.replace(File.separatorChar,'/');    InputStream result=ClassLoader.getSystemResourceAsStream(resname);    if (result == null) {      throw e;    }    return result;  }}  }
class C{  private String createMismatchMessage(String mismatch,MigrationVersion version,Object applied,Object resolved){  return String.format("Migration " + mismatch + " mismatch for migration %s\n"+ "-> Applied to database : %s\n"+ "-> Resolved locally    : %s",version,applied,resolved);}  }
class C{  private void writeXMLFile(){  try {    Source source=new DOMSource(doc);    Result result=new StreamResult(usersDataFile);    Transformer xformer=TransformerFactory.newInstance().newTransformer();    xformer.transform(source,result);  } catch (  TransformerConfigurationException e) {    e.printStackTrace();  }catch (  TransformerException e) {    e.printStackTrace();  }}  }
class C{  public MultiMatchQueryBuilder fuzziness(Object fuzziness){  this.fuzziness=Fuzziness.build(fuzziness);  return this;}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  @Override public void addInformation(ItemStack itemStack,EntityPlayer entityPlayer,List par3List,boolean par4){  Pos3D coord=getLink(itemStack);  par3List.add("\uaa74" + LangUtils.localize("info.radarGun.savedCoords"));  par3List.add(LangUtils.localize("gui.misc.x") + " " + (int)coord.xPos+ ", "+ LangUtils.localize("gui.misc.y")+ " "+ (int)coord.yPos+ ", "+ LangUtils.localize("gui.misc.z")+ " "+ (int)coord.zPos);  par3List.add((int)new Pos3D(entityPlayer).distance(coord) + " " + LangUtils.localize("info.radarGun.meters")+ " ("+ (int)(new Pos3D(entityPlayer).xPos - coord.xPos)+ ", "+ (int)(new Pos3D(entityPlayer).yPos - coord.yPos)+ ", "+ (int)(new Pos3D(entityPlayer).zPos - coord.zPos)+ ")");  super.addInformation(itemStack,entityPlayer,par3List,par4);}  }
class C{  public static void show(){  defer=false;  draw();}  }
class C{  public static CachedFile inCache(File f){  if (f == null) {    if (logger.isTraceEnabled())     logger.trace("inCache(f) - unexpected null parameter");    return null;  }  CachedFile cf_result=cachedFilesMap.get(f.getPath());  if (logger.isTraceEnabled())   logger.trace("inCache=" + (cf_result != null) + ": "+ f.getPath());  return cf_result;}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  private final boolean localPt(){switch (pgnOptions.view.pieceType) {case PGNOptions.PT_ENGLISH:    return false;case PGNOptions.PT_LOCAL:case PGNOptions.PT_FIGURINE:default :  return true;}}  }
class C{  public static SQLException createException(QueryException exception,MariaDbConnection connection,java.sql.Statement statement){  SQLException sqlException=get(exception);  String sqlState=exception.getSqlState();  SqlStates state=SqlStates.fromString(sqlState);  if (connection != null) {    if (state.equals(SqlStates.CONNECTION_EXCEPTION)) {      connection.setHostFailed();      if (connection.pooledConnection != null) {        connection.pooledConnection.fireConnectionErrorOccured(sqlException);      }    } else     if (connection.pooledConnection != null && statement != null) {      connection.pooledConnection.fireStatementErrorOccured(statement,sqlException);    }  }  return sqlException;}  }
class C{  @RequestMapping(value={"/admin/","/admin"},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@RequestParam Map<String,String> map,Principal principal){  RestWrapper restWrapper=null;  try {    String configGroup=map.get("configGroup");    GeneralConfig generalConfigUpdate=new GeneralConfig();    for (    String key : map.keySet()) {      LOGGER.info("getting into loop" + key);      if ("configGroup".equals(key)) {        continue;      }      GeneralConfig generalConfig=new GeneralConfig();      generalConfig.setConfigGroup(configGroup);      generalConfig.setKey(key);      generalConfig.setDefaultVal(map.get(key));      GeneralConfigId jpaGeneralConfigId=new GeneralConfigId();      jpaGeneralConfigId.setConfigGroup(generalConfig.getConfigGroup());      jpaGeneralConfigId.setGcKey(generalConfig.getKey());      com.wipro.ats.bdre.md.dao.jpa.GeneralConfig jpaGeneralConfig=generalConfigDAO.get(jpaGeneralConfigId);      jpaGeneralConfig.setDefaultVal(generalConfig.getDefaultVal());      generalConfigDAO.update(jpaGeneralConfig);      generalConfigUpdate=generalConfig;    }    restWrapper=new RestWrapper(generalConfigUpdate,RestWrapper.OK);    LOGGER.info(" Record with key:" + generalConfigUpdate.getKey() + " and config group:"+ generalConfigUpdate.getConfigGroup()+ " updated in general_config by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public boolean isSetSyncRequest(){  return this.syncRequest != null;}  }
class C{  public boolean isTable(long arc){switch ((int)arc) {default :    break;}return false;}  }
class C{  public Reflect call(String name) throws ReflectException {  return call(name,new Object[0]);}  }
class C{  @Override public String format(Date date){  return format(date,"medium");}  }
class C{  public void printFlags(long flags) throws IOException {  if ((flags & SYNTHETIC) != 0)   print("/*synthetic*/ ");  if (suppressFinalAndSemicolonsInTry) {    flags=flags & ~FINAL;    suppressFinalAndSemicolonsInTry=false;  }  print(TreeInfo.flagNames(flags));  if ((flags & EXTENDED_STANDARD_FLAGS) != 0)   print(" ");  if ((flags & ANNOTATION) != 0)   print("@");}  }
class C{  protected void bootstrap(List<Relation> relations){  for (  Relation relation : relations) {    DomainPK left=relation.getLeftId();    DomainPK right=relation.getRightId();    if (left != null && right != null) {      left.setCustomerId(relation.getCustomerId());      right.setCustomerId(relation.getCustomerId());      getVicinity(left).add(right);      getDirectVicinity(left).add(right);      getPaths(left,right).add(new DirectPath(relation,left));      if (!left.equals(right)) {        getVicinity(right).add(left);        getDirectVicinity(right).add(left);        getPaths(right,left).add(new DirectPath(relation,right));      }    }  }}  }
class C{  public static String replaceInvalidCharacters(String source){  source=source.replaceAll(": "," - ");  source=source.replaceAll(":","-");  return source.replaceAll("([\"\\\\:<>|/?*])","");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.133 -0500",hash_original_method="49FEABF0AD0150DE31C3D1B1392EC32F",hash_generated_method="C2AC3C6088B13DD2017B67031689708B") public static void sort(char[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.isMusic());}  }
class C{  public void run(){  String line;  try {    while (isConnectionOpen) {      line=in.readLine();      if (line == null)       break;      processLine(line);    }  } catch (  IOException e) {  } finally {    try {      close();    } catch (    IOException e2) {    }  }  Debug.message("httpconnection","Connection closed. Exiting thread");}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="lr";  String vmSelectionPolicy="rs";  String parameter="1.2";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int codePointCount(net.sourceforge.retroweaver.harmony.runtime.java.lang.CharSequence seq,int beginIndex,int endIndex){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length();  if (beginIndex < 0 || endIndex > len || beginIndex > endIndex) {    throw new IndexOutOfBoundsException();  }  int result=0;  for (int i=beginIndex; i < endIndex; i++) {    char c=seq.charAt(i);    if (isHighSurrogate(c)) {      if (++i < endIndex) {        c=seq.charAt(i);        if (!isLowSurrogate(c)) {          result++;        }      }    }    result++;  }  return result;}  }
class C{  public boolean isOverwriteOrgTrx(){  Object oo=get_Value(COLUMNNAME_OverwriteOrgTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int findFirstDifference(final DeserializableList<T> rhs){  return this.findFirstDifferenceInternal(rhs);}  }
class C{  public void register(String type,GestionDocumentalServiceBuilder builder){  if (StringUtils.isNotBlank(type)) {    builders.put(type,builder);  }}  }
class C{  public synchronized static void register(){  if (!alreadyCalled) {    GeoTIFFDescriptor odesc=new GeoTIFFDescriptor();    XTIFFDescriptor.register(odesc);    XTIFFDirectory.setFactory(new GeoTIFFFactory());    alreadyCalled=true;  }}  }
class C{  static AsynchronousFileChannel newAsynchronousFileChannel(String pathForWindows,String pathToCheck,Set<? extends OpenOption> options,long pSecurityDescriptor,ThreadPool pool) throws IOException {  Flags flags=Flags.toFlags(options);  flags.overlapped=true;  if (!flags.read && !flags.write) {    flags.read=true;  }  if (flags.append)   throw new UnsupportedOperationException("APPEND not allowed");  FileDescriptor fdObj;  try {    fdObj=open(pathForWindows,pathToCheck,flags,pSecurityDescriptor);  } catch (  WindowsException x) {    x.rethrowAsIOException(pathForWindows);    return null;  }  try {    return WindowsAsynchronousFileChannelImpl.open(fdObj,flags.read,flags.write,pool);  } catch (  IOException x) {    long handle=fdAccess.getHandle(fdObj);    CloseHandle(handle);    throw x;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Expression parseExpression(String expressionString){  try {    return spelExpressionParser.parseExpression(expressionString);  } catch (  ParseException e) {    throw new IllegalArgumentException("Error parsing SpEL \"" + expressionString + "\"",e);  }}  }
class C{  public void print(double x){  out.print(x);  out.flush();}  }
class C{  private void parseTransportProtocol(Node node){  String psSignalling=null;  String psMedia=null;  String psRtMedia=null;  String wifiSignalling=null;  String wifiMedia=null;  String wifiRtMedia=null;  if (node == null) {    return;  }  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (psSignalling == null) {        if ((psSignalling=getValueByParamName("psSignalling",childnode,TYPE_TXT)) != null) {          if (psSignalling.equals("SIPoUDP")) {            mRcsSettings.writeString(RcsSettingsData.SIP_DEFAULT_PROTOCOL_FOR_MOBILE,ListeningPoint.UDP);          } else           if (psSignalling.equals("SIPoTCP")) {            mRcsSettings.writeString(RcsSettingsData.SIP_DEFAULT_PROTOCOL_FOR_MOBILE,ListeningPoint.TCP);          } else           if (psSignalling.equals("SIPoTLS")) {            mRcsSettings.writeString(RcsSettingsData.SIP_DEFAULT_PROTOCOL_FOR_MOBILE,ListeningPoint.TLS);          }          continue;        }      }      if (wifiSignalling == null) {        if ((wifiSignalling=getValueByParamName("wifiSignalling",childnode,TYPE_TXT)) != null) {          if (wifiSignalling.equals("SIPoUDP")) {            mRcsSettings.writeString(RcsSettingsData.SIP_DEFAULT_PROTOCOL_FOR_WIFI,ListeningPoint.UDP);          } else           if (wifiSignalling.equals("SIPoTCP")) {            mRcsSettings.writeString(RcsSettingsData.SIP_DEFAULT_PROTOCOL_FOR_WIFI,ListeningPoint.TCP);          } else           if (wifiSignalling.equals("SIPoTLS")) {            mRcsSettings.writeString(RcsSettingsData.SIP_DEFAULT_PROTOCOL_FOR_WIFI,ListeningPoint.TLS);          }          continue;        }      }      if (wifiMedia == null) {        if ((wifiMedia=getValueByParamName("wifiMedia",childnode,TYPE_TXT)) != null) {          if (wifiMedia.equals("MSRP")) {            mRcsSettings.writeBoolean(RcsSettingsData.SECURE_MSRP_OVER_WIFI,false);          } else           if (wifiMedia.equals("MSRPoTLS")) {            mRcsSettings.writeBoolean(RcsSettingsData.SECURE_MSRP_OVER_WIFI,true);          }          continue;        }      }      if (wifiRtMedia == null) {        if ((wifiRtMedia=getValueByParamName("wifiRTMedia",childnode,TYPE_TXT)) != null) {          if ("RTP".equals(wifiMedia)) {            mRcsSettings.writeBoolean(RcsSettingsData.SECURE_RTP_OVER_WIFI,false);          } else           if ("SRTP".equals(wifiMedia)) {            mRcsSettings.writeBoolean(RcsSettingsData.SECURE_RTP_OVER_WIFI,true);          }        }      }      if (psMedia == null) {        if ((psMedia=getValueByParamName("psMedia",childnode,TYPE_TXT)) != null) {          if ("MSRP".equals(psMedia)) {            mRcsSettings.writeBoolean(RcsSettingsData.SECURE_MSRP_OVER_MOBILE,false);          } else           if ("MSRPoTLS".equals(psMedia)) {            mRcsSettings.writeBoolean(RcsSettingsData.SECURE_MSRP_OVER_MOBILE,true);          }          continue;        }      }      if (psRtMedia == null) {        if ((psRtMedia=getValueByParamName("psRTMedia",childnode,TYPE_TXT)) != null) {          if ("RTP".equals(psRtMedia)) {            mRcsSettings.writeBoolean(RcsSettingsData.SECURE_RTP_OVER_MOBILE,false);          } else           if ("SRTP".equals(psRtMedia)) {            mRcsSettings.writeBoolean(RcsSettingsData.SECURE_RTP_OVER_MOBILE,true);          }        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public MetadataType(final String id) throws NullPointerException {  if (id == null) {    throw new NullPointerException("Cannot build a metadata type with " + "a null identifier.");  }  this.id=id;}  }
class C{  static String findAtomString(String str){  Atom atom=findUnicodeAtom(str);  if (atom != null) {    try {      return atom.toUnicodeString();    } catch (    UTFDataFormatException e) {      throw new Error("Error in UTF data encoding: ",e);    }  }  return null;}  }
class C{  public void registerSpaceObject(ISpaceObject object,int dimId,int stationId){  object.setId(stationId);  stationLocations.put(stationId,object);  int radius=(int)Math.floor(Math.ceil(Math.sqrt(stationId + 1)) / 2);  int ringIndex=(int)(stationId - Math.pow((radius * 2) - 1,2));  int x, z;  if (ringIndex < (radius * 2 + 1) * 2) {    x=ringIndex % (radius * 2 + 1) - radius;    if (ringIndex < (radius * 2 + 1))     z=-radius; else     z=radius;  } else {    int newIndex=ringIndex - (radius * 2 + 1) * 2;    z=newIndex % ((radius - 1) * 2 + 1) - (radius - 1);    if (newIndex < ((radius - 1) * 2 + 1))     x=-radius; else     x=radius;  }  object.setPos(2 * x,2 * z);  if (!object.hasCustomSpawnLocation())   object.setSpawnLocation(2 * Configuration.stationSize * x + Configuration.stationSize / 2,128,2 * Configuration.stationSize * z + Configuration.stationSize / 2);  object.setOrbitingBody(dimId);  moveStationToBody(object,dimId,false);}  }
class C{  @Override public void onTcpWriteable(PseudoTCPBase tcp){  if (tcp == getLocalTcp()) {    logger.log(Level.FINER,"Flow Control Lifted");    try {      if (writeData()) {        close();      }    } catch (    IOException ex) {      ex.printStackTrace();      fail(ex.getMessage());    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  double x, y;  double z;  double gpsTime;  int intensity;  byte classValue, numReturns, returnNum, scanAngle;  int a;  int progress=0;  int numPoints=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      numPointsInFile=las.getNumPointRecords();      if (numPointsInFile > 70000000) {        showFeedback("Error: The number of points exceeds the limit on the number of features that a shapefile can contain.");        return;      }      String outputFile=pointFiles[j].replace(".las",".shp");      File file=new File(outputFile);      if (file.exists()) {        file.delete();      }      DBFField fields[]=new DBFField[8];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      fields[1]=new DBFField();      fields[1].setName("Z");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("I");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(8);      fields[2].setDecimalCount(0);      fields[3]=new DBFField();      fields[3].setName("CLASS");      fields[3].setDataType(DBFField.DBFDataType.NUMERIC);      fields[3].setFieldLength(4);      fields[3].setDecimalCount(0);      fields[4]=new DBFField();      fields[4].setName("RTN_NUM");      fields[4].setDataType(DBFField.DBFDataType.NUMERIC);      fields[4].setFieldLength(4);      fields[4].setDecimalCount(0);      fields[5]=new DBFField();      fields[5].setName("NUM_RTNS");      fields[5].setDataType(DBFField.DBFDataType.NUMERIC);      fields[5].setFieldLength(4);      fields[5].setDecimalCount(0);      fields[6]=new DBFField();      fields[6].setName("SCAN_ANGLE");      fields[6].setDataType(DBFField.DBFDataType.NUMERIC);      fields[6].setFieldLength(4);      fields[6].setDecimalCount(0);      fields[7]=new DBFField();      fields[7].setName("GPS_TIME");      fields[7].setDataType(DBFField.DBFDataType.NUMERIC);      fields[7].setFieldLength(14);      fields[7].setDecimalCount(6);      ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);      numPoints=0;      progress=0;      int oldProgress=-1;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          classValue=point.getClassification();          returnNum=point.getReturnNumber();          numReturns=point.getNumberOfReturns();          scanAngle=point.getScanAngle();          gpsTime=point.getGPSTime();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);          Object[] rowData=new Object[8];          rowData[0]=(double)numPoints + 1;          rowData[1]=z;          rowData[2]=(double)intensity;          rowData[3]=(double)classValue;          rowData[4]=(double)returnNum;          rowData[5]=(double)numReturns;          rowData[6]=(double)scanAngle;          rowData[7]=gpsTime;          output.addRecord(wbGeometry,rowData);          numPoints++;        }        progress=(int)(100f * a / numPointsInFile);        if (progress != oldProgress) {          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);        }      }      output.write();    }    showFeedback("Operation Complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Vector2i sub(int x,int y){  this.x-=x;  this.y-=y;  return this;}  }
class C{  public TagEntity createTagEntity(String tagType,String tagCode,String tagDisplayName,String tagDescription){  TagTypeEntity tagTypeEntity=tagTypeDao.getTagTypeByKey(new TagTypeKey(tagType));  if (tagTypeEntity == null) {    tagTypeEntity=tagTypeDaoTestHelper.createTagTypeEntity(tagType,AbstractDaoTest.TAG_TYPE_DISPLAY_NAME,AbstractDaoTest.INTEGER_VALUE);  }  return createTagEntity(tagTypeEntity,tagCode,tagDisplayName,tagDescription);}  }
class C{  public static IASTFragment createFragmentForSourceRange(ISourceRange range,ASTNode scope,ICompilationUnit cu) throws JavaModelException {  SelectionAnalyzer sa=new SelectionAnalyzer(Selection.createFromStartLength(range.getOffset(),range.getLength()),false);  scope.accept(sa);  if (isSingleNodeSelected(sa,range,cu))   return ASTFragmentFactory.createFragmentForFullSubtree(sa.getFirstSelectedNode());  if (isEmptySelectionCoveredByANode(range,sa))   return ASTFragmentFactory.createFragmentForFullSubtree(sa.getLastCoveringNode());  return ASTFragmentFactory.createFragmentForSubPartBySourceRange(sa.getLastCoveringNode(),range,cu);}  }
class C{  protected void init(Instances data) throws Exception {  if (m_SVM == null) {    throw new Exception("SVM not initialized in optimizer. Use RegOptimizer.setSVMReg()");  }  m_C=m_SVM.getC();  m_data=data;  m_classIndex=data.classIndex();  m_nInstances=data.numInstances();  m_kernel=Kernel.makeCopy(m_SVM.getKernel());  m_kernel.buildKernel(data);  m_target=new double[m_nInstances];  for (int i=0; i < m_nInstances; i++) {    m_target[i]=data.instance(i).classValue();  }  m_random=new Random(m_nSeed);  m_alpha=new double[m_target.length];  m_alphaStar=new double[m_target.length];  m_supportVectors=new SMOset(m_nInstances);  m_b=0.0;  m_nEvals=0;  m_nCacheHits=-1;}  }
class C{  public void start(String tag){  tag(tag,(String[])null,null,0,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void deleteRow(Value[] current) throws SQLException {  StatementBuilder buff=new StatementBuilder("DELETE FROM ");  appendTableName(buff);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  setKey(prep,1,current);  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  public void add(RelativeStrengthIndexItem dataItem,boolean notify){  if (!this.isEmpty()) {    RelativeStrengthIndexItem item0=(RelativeStrengthIndexItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  private void findVolumesSLOFromSGInstance(WBEMClient client,CIMObjectPath path,Map<String,String> volumesWithSLO){  try {    CIMInstance instance=client.getInstance(path,false,true,SmisConstants.PS_HOST_IO);    String fastSetting=SmisUtils.getSLOPolicyName(instance);    CloseableIterator<CIMObjectPath> volPaths=client.associatorNames(path,null,Constants.STORAGE_VOLUME,null,null);    while (volPaths.hasNext()) {      CIMObjectPath volPath=volPaths.next();      String volumeNativeGuid=getVolumeNativeGuid(volPath);      if (!volumesWithSLO.containsKey(volumeNativeGuid) || fastSetting != null) {        logger.debug("Volume key: {} fastSetting: {}",volumeNativeGuid,fastSetting);        volumesWithSLO.put(volumeNativeGuid,fastSetting);      }    }  } catch (  Exception e) {    logger.warn("Finding unexported volume SLOName failed during unmanaged volume discovery",e);  }}  }
class C{  public EditorColorIcon(DrawingEditor editor,AttributeKey<Color> key,URL imageLocation,Shape colorShape){  super(imageLocation);  this.editor=editor;  this.key=key;  this.colorShape=colorShape;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.500 -0500",hash_original_method="B35375ECAB57B816953617EBE5B4DD2F",hash_generated_method="56C909299110BEF81A6B603458F1C204") protected void quitting(){}  }
class C{  public static float readFloatWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_FLOAT)   state.output.fatal("Line " + d.lineNumber + " has no floating point number after preamble '"+ preamble+ "'\n-->"+ d.data);  return (float)(d.d);}  }
class C{  public synchronized void addTask(Runnable runnable){  if (runnable == null) {    String message=Logging.getMessage("nullValue.RunnableIsNull");    Logging.logger().fine(message);    throw new IllegalArgumentException(message);  }  if (this.activeTasks.contains(runnable) || this.executor.getQueue().contains(runnable))   return;  this.executor.execute(runnable);}  }
class C{  public Facet computeDimensionFacets(Domain domain,DashboardSelection sel,Axis axis,String filter,int offset,int size,Integer timeoutMs) throws ComputingException, InterruptedException, ExecutionException, TimeoutException {  DomainHierarchy hierarchy=universe.getDomainHierarchy(domain,true);  DimensionIndex index=hierarchy.getDimensionIndex(axis);  DomainHierarchyManager.INSTANCE.computeIndex(domain.getId(),index);  if (index.getStatus() == Status.STALE) {    hierarchy.isDone(index,timeoutMs);  }  return computeDimensionFacets(domain,index,sel,filter,offset,size);}  }
class C{  public static String unescapeJavaString(String st){  StringBuilder sb=new StringBuilder(st.length());  for (int i=0; i < st.length(); i++) {    char ch=st.charAt(i);    if (ch == '\\') {      char nextChar=(i == st.length() - 1) ? '\\' : st.charAt(i + 1);      if (nextChar >= '0' && nextChar <= '7') {        String code="" + nextChar;        i++;        if ((i < st.length() - 1) && st.charAt(i + 1) >= '0' && st.charAt(i + 1) <= '7') {          code+=st.charAt(i + 1);          i++;          if ((i < st.length() - 1) && st.charAt(i + 1) >= '0' && st.charAt(i + 1) <= '7') {            code+=st.charAt(i + 1);            i++;          }        }        sb.append((char)Integer.parseInt(code,8));        continue;      }switch (nextChar) {case '\\':        ch='\\';      break;case 'b':    ch='\b';  break;case 'f':ch='\f';break;case 'n':ch='\n';break;case 'r':ch='\r';break;case 't':ch='\t';break;case '\"':ch='\"';break;case '\'':ch='\'';break;case 'u':if (i >= st.length() - 5) {ch='u';break;}int code=Integer.parseInt("" + st.charAt(i + 2) + st.charAt(i + 3)+ st.charAt(i + 4)+ st.charAt(i + 5),16);sb.append(Character.toChars(code));i+=5;continue;}i++;}sb.append(ch);}return sb.toString();}  }
class C{  public final IStateVector<GraphNode,LatticeElement> solve(){  return convert(new com.google.security.zynamics.reil.algorithms.mono.MonotoneSolver<GraphNode,LatticeElement,ObjectType,LatticeWrapper<LatticeElement,ObjectType>>(graph,new LatticeWrapper<LatticeElement,ObjectType>(lattice),state,transformationList,walker,null).solve());}  }
class C{  private void vectAlignThePath(){  VectorDrawable vectorInitial, vectorFinal;  String currentPathName;  Path pathInitial, pathFinal;  String[] align=null;  printer.jumpLine();  printer.paragraphSeparator();  CustomLogger.log("I begin to morph the path");  for (int i=0; i < vectorDrawables.size() - 1; i++) {    vectorInitial=vectorDrawables.get(i);    vectorFinal=vectorDrawables.get(i + 1);    for (    Map.Entry<String,Path> entry : vectorInitial.getPathToMorphSortByMorphingName().entrySet()) {      currentPathName=entry.getKey();      CustomLogger.log("We found a android:MorphingName :" + currentPathName + " in the initial vector");      if (vectorFinal.getPathToMorphSortByMorphingName().containsKey(currentPathName)) {        CustomLogger.log("We found the same PathName :" + currentPathName + " in the final vector");        pathInitial=vectorInitial.getPathToMorphSortByMorphingName().get(currentPathName);        pathFinal=vectorFinal.getPathToMorphSortByMorphingName().get(currentPathName);        try {          CustomLogger.log("We launch the morphing process between those two elements");          align=VectAlign.align(pathInitial.getPathData(),pathFinal.getPathData(),VectAlign.Mode.BASE);        } catch (        Exception e) {          CustomLogger.logError("It failed :(",e);          printer.printExceptionInMorphing(e,absoluteWorkingDirectoryPath,pathInitial.getPathData(),pathFinal.getPathData());        }        CustomLogger.log("It works, we normalize the path called " + currentPathName);        CustomLogger.log("Initial Path returns " + align[0]);        CustomLogger.log("Final Path returns " + align[1]);        pathInitial.setNormalizedInitialPathData(align[0]);        pathInitial.setNormalizedFinalPathData(align[1]);        if (pathFinal.getFillColor() != null) {          pathInitial.setFillColorTarget(pathFinal.getFillColor());        }        if (pathFinal.getStrokeColor() != null) {          pathInitial.setStrokeColorTarget(pathFinal.getStrokeColor());        }        if (pathFinal.getStrokeWidth() != null) {          pathInitial.setStrokeWidthTarget(pathFinal.getStrokeWidth());        }        if (pathFinal.getStrokeAlpha() != null) {          pathInitial.setStrokeAlphaTarget(pathFinal.getStrokeAlpha());        }        if (pathFinal.getStrokeAlpha() != null) {          pathInitial.setStrokeAlphaTarget(pathFinal.getStrokeAlpha());        }      }    }  }}  }
class C{  @SuppressWarnings("unchecked") protected GenericServiceAPIResponseEntity<String> putEntitiesWithService(String resourceURL,List<? extends TaggedLogAPIEntity> entities,String serviceName) throws JsonMappingException, JsonGenerationException, IOException {  final String json=marshall(entities);  final WebResource r=getWebResource(resourceURL);  return putAuthHeaderIfNeeded(r.queryParam(SERVICE_NAME,serviceName).accept(DEFAULT_MEDIA_TYPE)).header(CONTENT_TYPE,DEFAULT_HTTP_HEADER_CONTENT_TYPE).put(GenericServiceAPIResponseEntity.class,json);}  }
class C{  @POST @Path("/{id}/deactivate") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteStorageSystemType(@PathParam("id") URI id){  log.info("deleteStorageSystemType: {}",id);  Map<String,String> nativeDriverNameMap=StorageSystemTypesInitUtils.getDisplayNames();  StorageSystemType sstype=queryObject(StorageSystemType.class,id,true);  ArgValidator.checkEntity(sstype,id,isIdEmbeddedInURL(id));  if (nativeDriverNameMap.get(sstype.getStorageTypeName()) == null) {    _dbClient.markForDeletion(sstype);    auditOp(OperationTypeEnum.REMOVE_STORAGE_SYSTEM_TYPE,true,AuditLogManager.AUDITOP_BEGIN,sstype.getId().toString(),sstype.getStorageTypeName(),sstype.getMetaType());    return Response.ok().build();  } else {    return Response.status(403).build();  }}  }
class C{  public SerialLight(String systemName){  super(systemName);  initializeLight(systemName);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result;  String desc;  SelectedTag tag;  int i;  result=new Vector<Option>();  desc="";  for (i=0; i < TAGS_GUI.length; i++) {    tag=new SelectedTag(TAGS_GUI[i].getID(),TAGS_GUI);    desc+="\t" + tag.getSelectedTag().getIDStr() + " = "+ tag.getSelectedTag().getReadable()+ "\n";  }  result.addElement(new Option("\tDetermines the layout of the GUI:\n" + desc + "\t(default: "+ new SelectedTag(GUI_MDI,TAGS_GUI)+ ")","gui",1,"-gui " + Tag.toOptionList(TAGS_GUI)));  return result.elements();}  }
class C{  public List<JCCompilationUnit> parseFiles(Iterable<JavaFileObject> fileObjects){  if (shouldStop(CompileState.PARSE))   return List.nil();  ListBuffer<JCCompilationUnit> trees=new ListBuffer<>();  Set<JavaFileObject> filesSoFar=new HashSet<JavaFileObject>();  for (  JavaFileObject fileObject : fileObjects) {    if (!filesSoFar.contains(fileObject)) {      filesSoFar.add(fileObject);      trees.append(parse(fileObject));    }  }  return trees.toList();}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  public static String generateGUID(boolean secure){  String localHostAddr;{    java.net.InetAddress id;    try {      id=java.net.InetAddress.getLocalHost();      localHostAddr=id.toString();    } catch (    java.net.UnknownHostException e) {      localHostAddr="localhost";    }  }  long time=System.currentTimeMillis();  long rand;  if (secure) {    rand=secureRand.nextLong();  } else {    rand=SecurityUtils.random.nextLong();  }  StringBuilder sb=new StringBuilder(32);  sb.append(localHostAddr).append(":").append(Long.toString(time)).append(":").append(Long.toString(rand));  byte[] array;  try {    MessageDigest md5=MessageDigest.getInstance(ECRYPTION_ALGORYTHM);    md5.update(sb.toString().getBytes());    array=md5.digest();  } catch (  NoSuchAlgorithmException e) {    array=new byte[16];    random.nextBytes(array);  }  sb.setLength(0);  for (int j=0; j < array.length; ++j) {    int b=array[j] & 0xFF;    if (b < 0x10) {      sb.append('0');    }    sb.append(Integer.toHexString(b));  }  String raw=sb.toString().toUpperCase();  sb.setLength(0);  sb.append(raw.substring(0,8));  sb.append("-");  sb.append(raw.substring(8,12));  sb.append("-");  sb.append(raw.substring(12,16));  sb.append("-");  sb.append(raw.substring(16,20));  sb.append("-");  sb.append(raw.substring(20));  return sb.toString();}  }
class C{  protected Runnable createRequestTask(){  return new RequestTask(this);}  }
class C{  public Bundler putDouble(String key,double value){  bundle.putDouble(key,value);  return this;}  }
class C{  public static <A,B,T extends Transform<A,B>>Stream<T> create(TransformFactory factory,Class<A> from,Class<B> to){  return create(factory,new BridgeTransform<>(from,to,factory));}  }
class C{  public boolean scribeAndFlush(ScribeEvent event,long ownerId){  try {    getScribeHandler(ownerId).scribeAndFlush(event);    return true;  } catch (  IOException e) {    CommonUtils.logControlledError(kit.getContext(),"Failed to scribe event",e);    return false;  }}  }
class C{  protected void removeQueryFuture(long reqId){  futs.remove(reqId);}  }
class C{  public DefeatCommand(Server server){  super(server,commandName,helpText);}  }
class C{  @Override public boolean provides(Class<?> type){  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals((jmri.ReporterManager.class))) {    return true;  }  return super.provides(type);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double stdDeviation=0;  float progress=0;  int col, row;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (image.getDataScale() == WhiteboxRaster.DataScale.BOOLEAN || image.getDataScale() == WhiteboxRaster.DataScale.CATEGORICAL || image.getDataScale() == WhiteboxRaster.DataScale.RGB) {      showFeedback("This tool should only be used with data on a continuous scale.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    updateProgress("Calculating image average:",0);    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          imageTotal+=data[col];          imageN++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    imageAverage=imageTotal / imageN;    updateProgress("Calculating the standard deviation:",0);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          imageTotalDeviation+=(data[col] - imageAverage) * (data[col] - imageAverage);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the standard deviation:",(int)progress);    }    stdDeviation=Math.sqrt(imageTotalDeviation / (imageN - 1));    updateProgress("Calculating the z-scores:",0);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          output.setValue(row,col,(data[col] - imageAverage) / stdDeviation);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the z-scores:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DecimalFormat df;    df=new DecimalFormat("0.000");    String retstr=null;    retstr="CONVERT TO Z-SCORE\n";    retstr=retstr + "Input image:\t\t" + image.getShortHeaderFile()+ "\n";    retstr=retstr + "Created image:\t\t" + output.getShortHeaderFile()+ "\n";    retstr=retstr + "Input image average:\t" + df.format(imageAverage)+ "\n";    retstr=retstr + "Input image std. dev.:\t" + df.format(stdDeviation)+ "\n";    retstr=retstr + "N:\t\t" + imageN;    returnData(retstr);    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void actionPerformed(ActionEvent e){  log.fine("Event " + e);  log.fine("Event Source " + e.getSource());  return;}  }
class C{  public static String self(HttpServletRequest req){  StringBuffer sb=new StringBuffer(req.getServletPath());  String qs=req.getQueryString();  if (!StringUtil.isEmpty(qs))   sb.append('?').append(qs);  return sb.toString();}  }
class C{  public void search(SearchPattern pattern,SearchParticipant[] participants,IJavaSearchScope scope,SearchRequestor requestor,IProgressMonitor monitor) throws CoreException {  this.basicEngine.search(pattern,participants,scope,requestor,monitor);}  }
class C{  public void dispose(){  ctx.removeViewport(e);  super.dispose();}  }
class C{  public boolean mustSubdivide(RenderContext rc,double detailFactor){  double distance=this.getExtent(rc).distanceTo(rc.cameraPoint);  double texelSize=this.level.texelHeight * rc.globe.getEquatorialRadius();  double pixelSize=rc.pixelSizeAtDistance(distance);  return texelSize > pixelSize * detailFactor;}  }
class C{  private void checkCGForMirrors(BlockConsistencyGroup consistencyGroup,List<Volume> cgVolumes){  for (  Volume volume : cgVolumes) {    StringSet mirrors=volume.getMirrors();    if (mirrors != null && !mirrors.isEmpty()) {      throw APIException.badRequests.cannotCreateVolumeAsConsistencyGroupHasMirrors(consistencyGroup.getLabel(),consistencyGroup.getId());    }  }}  }
class C{  static void exhaustInputStream(final InputStream inStream) throws IOException {  byte buffer[]=new byte[1024];  while (inStream.read(buffer) >= 0) {    ;  }}  }
class C{  protected SVGGlyphElementBridge(){}  }
class C{  public void removeAllStatements(){  List<EPStatement> statements=new ArrayList<EPStatement>();  for (  String stmtName : statementNames) {    EPStatement stmt=unisolatedServices.getStatementLifecycleSvc().getStatementByName(stmtName);    if (stmt == null) {      log.debug("Statement '" + stmtName + "', the statement could not be found");      continue;    }    if (stmt.getServiceIsolated() != null && (!stmt.getServiceIsolated().equals(isolatedServiceName))) {      log.error("Error returning statement '" + stmtName + "', the internal isolation information is incorrect, isolated service for statement is currently '"+ stmt.getServiceIsolated()+ "' and mismatches this isolated services named '"+ isolatedServiceName+ "'");      continue;    }    statements.add(stmt);  }  removeStatement(statements.toArray(new EPStatement[statements.size()]));}  }
class C{  @Deprecated public void clearPluginObjects(){  pluginMap.clear();}  }
class C{  public void dispose(){  mListeners.clear();}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  private void beforeName() throws IOException {  JsonScope context=peek();  if (context == JsonScope.NONEMPTY_OBJECT) {    out.write(',');  } else   if (context != JsonScope.EMPTY_OBJECT) {    throw new IllegalStateException("Nesting problem: " + stack);  }  newline();  replaceTop(JsonScope.DANGLING_NAME);}  }
class C{  public Type rightDeclaredType(){  return (right instanceof TypeRef) ? ((TypeRef)right).getDeclaredType() : null;}  }
class C{  protected Set keySet(){  return wrapper.getClassIntrospector().keySet(object.getClass());}  }
class C{  void encode(OutputStream os,boolean include_h) throws IOException {  int q=params.q;  os.write(getEncoded(f));  if (params.basisType == NTRUSigningKeyGenerationParameters.BASIS_TYPE_STANDARD) {    IntegerPolynomial fPrimeInt=fPrime.toIntegerPolynomial();    for (int i=0; i < fPrimeInt.coeffs.length; i++) {      fPrimeInt.coeffs[i]+=q / 2;    }    os.write(fPrimeInt.toBinary(q));  } else {    os.write(getEncoded(fPrime));  }  if (include_h) {    os.write(h.toBinary(q));  }}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  private static char convertToRomanNumber(char c){  if (c == 0x66b) {    return '.';  } else   if (0x660 <= c && c <= 0x669) {    return (char)(c - (char)0x630);  } else   if (0x6f0 <= c && c <= 0x6f9) {    return (char)(c - (char)0x6c0);  } else   if (0x966 <= c && c <= 0x96f) {    return (char)(c - (char)0x936);  } else   if (0x9e6 <= c && c <= 0x9ef) {    return (char)(c - (char)0x9b6);  } else   if (0xa66 <= c && c <= 0xa6f) {    return (char)(c - (char)0xa36);  } else   if (0xae6 <= c && c <= 0xaef) {    return (char)(c - (char)0xab6);  } else   if (0xb66 <= c && c <= 0xb6f) {    return (char)(c - (char)0xb36);  } else   if (0xc66 <= c && c <= 0xc6f) {    return (char)(c - (char)0xc36);  } else   if (0xd66 <= c && c <= 0xd6f) {    return (char)(c - (char)0xd36);  } else   if (0xe50 <= c && c <= 0xe59) {    return (char)(c - (char)0xe20);  } else   if (0xed0 <= c && c <= 0xed9) {    return (char)(c - (char)0xea0);  } else   if (0xf20 <= c && c <= 0xf29) {    return (char)(c - (char)0xe90);  } else   if (0x1040 <= c && c <= 0x1049) {    return (char)(c - (char)0x1010);  } else   if (0x17e0 <= c && c <= 0x17e9) {    return (char)(c - (char)0x17b0);  } else   if (0x1810 <= c && c <= 0x1819) {    return (char)(c - (char)0x17e0);  } else   if (0x1b50 <= c && c <= 0x1b59) {    return (char)(c - (char)0x1b20);  } else   if (0x1bb0 <= c && c <= 0x1bb9) {    return (char)(c - (char)0x1b80);  } else   if (0x1c40 <= c && c <= 0x1c49) {    return (char)(c - (char)0x1c10);  } else   if (0x1c50 <= c && c <= 0x1c59) {    return (char)(c - (char)0x1c20);  } else   if (0xa8d0 <= c && c <= 0xa8d9) {    return (char)(c - (char)0xa8a0);  }  return c;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void testFieldIsMissing() throws Exception {  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,indexAnalyzer);  Document doc=new Document();  Field body=new Field("body","test this is.  another sentence this test has.  far away is that planet.",fieldType);  doc.add(body);  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher searcher=newSearcher(ir);  UnifiedHighlighter highlighter=new UnifiedHighlighter(searcher,indexAnalyzer);  Query query=new TermQuery(new Term("bogus","highlighting"));  int[] docIDs=new int[]{0};  String snippets[]=highlighter.highlightFields(new String[]{"bogus"},query,docIDs,new int[]{2}).get("bogus");  assertEquals(1,snippets.length);  assertNull(snippets[0]);  ir.close();}  }
class C{  public void mouseReleased(java.awt.event.MouseEvent e){  for (int i=0; i < dndCatchers.size(); i++) {    if (((DefaultDnDCatcher)dndCatchers.get(i)).consume(e))     break;  }}  }
class C{  protected List createMessageList(){  Map.Entry entry=null;  Map.Entry internalEntry=null;  MapWrapper threadIdToSequenceIdMap=null;  String regionName=null;  ThreadIdentifier tid=null;  Long sequenceId=null;  EventID eventId=null;  List queueRemovalMessageList=new LinkedList();  Iterator internalIterator=null;  Iterator iterator=dispatchedMessagesMap.entrySet().iterator();  while (iterator.hasNext()) {    entry=(Map.Entry)iterator.next();    regionName=(String)entry.getKey();    queueRemovalMessageList.add(regionName);    threadIdToSequenceIdMap=(MapWrapper)entry.getValue();    Map internalMap=threadIdToSequenceIdMap.map;synchronized (internalMap) {      iterator.remove();      threadIdToSequenceIdMap.map=new HashMap();    }    queueRemovalMessageList.add(Integer.valueOf(internalMap.size()));    internalIterator=internalMap.entrySet().iterator();    while (internalIterator.hasNext()) {      internalEntry=(Map.Entry)internalIterator.next();      tid=(ThreadIdentifier)internalEntry.getKey();      sequenceId=(Long)internalEntry.getValue();      eventId=new EventID(tid.getMembershipID(),tid.getThreadID(),sequenceId.longValue());      queueRemovalMessageList.add(eventId);    }  }  return queueRemovalMessageList;}  }
class C{  protected float unwrapKey(Object key){  return ((Float)key).floatValue();}  }
class C{  public StoragePort[] queryStoragePorts(String[] processorId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryStoragePorts(): ";  log.info(methodName + "Entry with  processor Ids");  if (processorId != null) {    log.debug(methodName + "processor Ids[" + Arrays.asList(processorId)+ "]");  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  StoragePort[] ports=sosManager.queryStoragePorts(processorId);  log.info(methodName + "Exit returning storage ports of size[" + ports.length+ "]");  return ports;}  }
class C{  public void loginForImplicitGrant(@NonNull Activity activity){  Intent intent=LoginActivity.newIntent(activity,sessionConfiguration,ResponseType.TOKEN);  activity.startActivityForResult(intent,requestCode);}  }
class C{  public static void removeQuery(ISearchQuery query){  InternalSearchUI.getInstance().removeQuery(query);}  }
class C{  public void renderField(RenderInputFieldInterface renderer,PaymentProductField field,BasicPaymentItem selectedProduct,AccountOnFile accountOnFile,InputDataPersister inputDataPersister,PaymentContext paymentContext){  if (renderer != null) {    LinearLayout rowView=new LinearLayout(parentView.getContext());    rowView.setOrientation(LinearLayout.VERTICAL);    rowView.setPadding(0,20,0,0);    labelRenderer.renderLabel(field,selectedProduct,rowView);    LinearLayout rowContentView=new LinearLayout(parentView.getContext());    rowContentView.setOrientation(LinearLayout.HORIZONTAL);    View view=renderer.renderField(field,selectedProduct,rowContentView,accountOnFile,inputDataPersister,paymentContext);    view.setTag(field.getId());    if (!isFocusSet) {      view.requestFocus();      isFocusSet=true;    }    if (view.isEnabled()) {      tooltipRenderer.renderTooltip(field.getId(),selectedProduct,rowContentView);    }    rowView.addView(rowContentView);    LayoutParams rowParams=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);    parentView.addView(rowView,rowParams);  }}  }
class C{  public static String mnem(int opcode){  return Mneumonics.mnem[opcode];}  }
class C{  private void addDisplay(int parentM_Product_ID,int M_Product_ID,String bomType,String name,BigDecimal lineQty){  log.fine("M_Product_ID=" + M_Product_ID + ",Type="+ bomType+ ",Name="+ name+ ",Qty="+ lineQty);  boolean selected=true;  Hbox boxQty=new Hbox();  boxQty.setWidth("100%");  boxQty.setWidths("10%, 40%, 50%");  if (MProductBOM.BOMTYPE_StandardPart.equals(bomType)) {    String title="";    Checkbox cb=new Checkbox();    cb.setLabel(title);    cb.setChecked(true);    cb.setEnabled(false);    m_selectionList.add(cb);    boxQty.appendChild(cb);  } else   if (MProductBOM.BOMTYPE_OptionalPart.equals(bomType)) {    String title=Msg.getMsg(Env.getCtx(),"Optional");    Checkbox cb=new Checkbox();    cb.setLabel(title);    cb.setChecked(false);    selected=false;    cb.addEventListener(Events.ON_CHECK,this);    m_selectionList.add(cb);    boxQty.appendChild(cb);  } else {    String title=Msg.getMsg(Env.getCtx(),"Alternative") + " " + bomType;    Radio b=new Radio();    b.setLabel(title);    String groupName=String.valueOf(parentM_Product_ID) + "_" + bomType;    Radiogroup group=m_buttonGroups.get(groupName);    if (group == null) {      log.fine("ButtonGroup=" + groupName);      group=new Radiogroup();      m_buttonGroups.put(groupName,group);      group.appendChild(b);      b.setSelected(true);    } else {      group.appendChild(b);      b.setSelected(false);      selected=false;    }    b.addEventListener(Events.ON_CLICK,this);    m_selectionList.add(b);    boxQty.appendChild(b);  }  m_productList.add(new Integer(M_Product_ID));  Decimalbox qty=new Decimalbox();  qty.setValue(lineQty);  qty.setReadonly(!selected);  m_qtyList.add(qty);  Label label=new Label(name);  HtmlBasedComponent c=(HtmlBasedComponent)label.rightAlign();  c.setStyle(c.getStyle() + ";margin-right: 5px");  boxQty.appendChild(c);  boxQty.appendChild(qty);  grpSelectProd.appendChild(boxQty);}  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  public void print(PrintStream ps){  ps.println("Numerator: ");  N.print(ps);  ps.println("Denominator: ");  D.print(ps);}  }
class C{  public BooleanMemberValue(int index,ConstPool cp){  super('Z',cp);  this.valueIndex=index;}  }
class C{  public void testSuggestPerformance(){  assertTrue(runText(false) <= runText(true));}  }
class C{  private int rotateLeft(int x,int y){  return (x << y) | (x >>> -y);}  }
class C{  private void writeDictionaryFile() throws IOException {  ColumnDictionaryChunk columnDictionaryChunk=new ColumnDictionaryChunk();  columnDictionaryChunk.setValues(oneDictionaryChunkList);  writeThriftObject(columnDictionaryChunk);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final boolean addAll(int index,Collection<? extends E> newElements){  throw new UnsupportedOperationException();}  }
class C{  public static URI convertToUri(String namespace,String value){  if (value == null)   return null;  URI subjUri;  try {    subjUri=valueFactory.createURI(value);  } catch (  Exception e) {    if (namespace == null)     return null;    subjUri=valueFactory.createURI(namespace,value);  }  return subjUri;}  }
class C{  public static StateBackgroundWithSurfaceTexture from(State previousState,RefCountBase<ResourceConstructed> resourceConstructed,RefCountBase<ResourceSurfaceTexture> resourceSurfaceTexture){  return new StateBackgroundWithSurfaceTexture(previousState,resourceConstructed,resourceSurfaceTexture);}  }
class C{  QueryDeadline checkDeadline(final long nowNanosIsIgnored){  final AbstractRunningQuery q=queryRef.get();  if (q == null) {    return null;  }  q.checkDeadline();  if (q.isDone()) {    return null;  }  return this;}  }
class C{  @Override public void write(int b){}  }
class C{  private void logUpdateDetail(int counter,String annotation){  if (annotation == null)   annotation="";  if (counter > 0) {    String detailType=m_detailTypes;    if (counter == 1)     detailType=m_detailType;    s_logger.log(Level.FINE,"updateDetailResult",new Object[]{Integer.toString(counter),detailType,annotation});  }  if (m_detailCounterUpd == null)   m_detailCounterUpd=new Integer(0);  m_detailCounterUpd=new Integer(m_detailCounterUpd.intValue() + counter);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public void addRegister(int regNbr,String variableName){  registerNumbers[next]=regNbr;  variableNames[next]=variableName;  next++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.196 -0400",hash_original_method="55E6E177951B42431803927A7959D0FA",hash_generated_method="FDE5374E2895AAB62AF7D363376A3B7E") private void doAcquireInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public LocalTime withSecondOfMinute(int second){  return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(),second));}  }
class C{  public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  public void renderScreenString(Appendable writer,Map<String,Object> context,ScreenStringRenderer screenStringRenderer) throws ScreenRenderException {  context.put("nullField",GenericEntity.NULL_FIELD);  Map<String,String> parameters=UtilGenerics.cast(context.get("parameters"));  boolean beganTransaction=false;  int transactionTimeout=-1;  if (parameters != null) {    String transactionTimeoutPar=parameters.get("TRANSACTION_TIMEOUT");    if (transactionTimeoutPar != null) {      try {        transactionTimeout=Integer.parseInt(transactionTimeoutPar);      } catch (      NumberFormatException nfe) {        String msg="TRANSACTION_TIMEOUT parameter for screen [" + this.sourceLocation + "#"+ getName()+ "] is invalid and it will be ignored: "+ nfe.toString();        Debug.logWarning(msg,module);      }    }  }  if (transactionTimeout < 0 && !transactionTimeoutExdr.isEmpty()) {    String transactionTimeoutStr=transactionTimeoutExdr.expandString(context);    if (UtilValidate.isNotEmpty(transactionTimeoutStr)) {      try {        transactionTimeout=Integer.parseInt(transactionTimeoutStr);      } catch (      NumberFormatException e) {        Debug.logWarning(e,"Could not parse transaction-timeout value, original=[" + transactionTimeoutExdr + "], expanded=["+ transactionTimeoutStr+ "]",module);      }    }  }  try {    if (useTransaction) {      if (transactionTimeout < 0) {        beganTransaction=TransactionUtil.begin();      }      if (transactionTimeout > 0) {        beganTransaction=TransactionUtil.begin(transactionTimeout);      }    }    this.section.renderWidgetString(writer,context,screenStringRenderer);    TransactionUtil.commit(beganTransaction);  } catch (  Exception e) {    String errMsg="Error rendering screen [" + this.sourceLocation + "#"+ getName()+ "]: "+ e.toString();    Debug.logError(errMsg + ". Rolling back transaction.",module);    try {      TransactionUtil.rollback(beganTransaction,errMsg,e);    } catch (    GenericEntityException e2) {      Debug.logError(e2,"Could not rollback transaction: " + e2.toString(),module);    }    throw new ScreenRenderException(errMsg,e);  }}  }
class C{  @Override public boolean isMultiple(){  return geometry.isMultiple();}  }
class C{  public static int[] objArrayConcat(int[] o1,int[] o2){  int[] ret=new int[o1.length + o2.length];  System.arraycopy(o1,0,ret,0,o1.length);  System.arraycopy(o2,0,ret,o1.length,o2.length);  return ret;}  }
class C{  private byte[] maskGeneratorFunction1(byte[] Z,int zOff,int zLen,int length){  byte[] mask=new byte[length];  byte[] hashBuf=new byte[mgfhLen];  byte[] C=new byte[4];  int counter=0;  mgfDigest.reset();  while (counter < (length / mgfhLen)) {    ItoOSP(counter,C);    mgfDigest.update(Z,zOff,zLen);    mgfDigest.update(C,0,C.length);    mgfDigest.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * mgfhLen,mgfhLen);    counter++;  }  if ((counter * mgfhLen) < length) {    ItoOSP(counter,C);    mgfDigest.update(Z,zOff,zLen);    mgfDigest.update(C,0,C.length);    mgfDigest.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * mgfhLen,mask.length - (counter * mgfhLen));  }  return mask;}  }
class C{  protected NetworkModule[] createNetworkModules(String address,MqttConnectOptions options) throws MqttException, MqttSecurityException {  final String methodName="createNetworkModules";  log.fine(CLASS_NAME,methodName,"116",new Object[]{address});  NetworkModule[] networkModules=null;  String[] serverURIs=options.getServerURIs();  String[] array=null;  if (serverURIs == null) {    array=new String[]{address};  } else   if (serverURIs.length == 0) {    array=new String[]{address};  } else {    array=serverURIs;  }  networkModules=new NetworkModule[array.length];  for (int i=0; i < array.length; i++) {    networkModules[i]=createNetworkModule(array[i],options);  }  log.fine(CLASS_NAME,methodName,"108");  return networkModules;}  }
class C{  @Deprecated public void removeCard(String key) throws HeaderCardException {  deleteKey(key);}  }
class C{  private JTable createTable(int maxPreferredWidth){  String[] columnNames={"Item","Price","Description"};  Object[][] data=new Object[event.getSlot("content").size()][];  RPSlot slot=event.getSlot("content");  int i=0;  for (  RPObject item : slot) {    data[i]=createDataRow(item,maxPreferredWidth);    i++;  }  return new JTable(data,columnNames);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:55.646 -0500",hash_original_method="4CA8000463C36260BD9C3E4A41E197CE",hash_generated_method="4CA8000463C36260BD9C3E4A41E197CE") void addAlias(String alias){  if ((aliases == null) || (aliases.size() == 0)) {    aliases=new ArrayList<String>();  }  aliases.add(alias);}  }
class C{  public void removeDownloadListener(DownloadTaskListener listener){  if (listener == null) {    listeners.clear();  } else {    listeners.remove(listener);  }}  }
class C{  public static byte parseByte(String string) throws NumberFormatException {  return parseByte(string,10);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public static void main(String args[]){  SpatialGrid test=SpatialGrid.readFromFile("/Users/thomas/Development/opus_home/data/seattle_parcel/results/interpolationQuickTest/results/400.0travel_time_accessibility.txt");  test.writeToFile("/Users/thomas/Development/opus_home/data/seattle_parcel/results/interpolationQuickTest/results/400.0travel_time_accessibilityTEST.txt");}  }
class C{  public void endVisit(Javadoc node){}  }
class C{  @Scheduled(initialDelay=10000,fixedDelay=2000) public void rolloutEventScheduler(){  final Iterator<RolloutEventKey> rolloutIterator=rolloutEvents.iterator();  while (rolloutIterator.hasNext()) {    final RolloutEventKey eventKey=rolloutIterator.next();    eventBus.post(new RolloutChangeEvent(1,eventKey.tenant,eventKey.rolloutId));    rolloutIterator.remove();  }  final Iterator<RolloutEventKey> rolloutGroupIterator=rolloutGroupEvents.iterator();  while (rolloutGroupIterator.hasNext()) {    final RolloutEventKey eventKey=rolloutGroupIterator.next();    eventBus.post(new RolloutGroupChangeEvent(1,eventKey.tenant,eventKey.rolloutId,eventKey.rolloutGroupId));    rolloutGroupIterator.remove();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.653 -0500",hash_original_method="E566E8F19B44FC1FECCBFF06B810AB67",hash_generated_method="C7B448223FE99A38ED9326670A6E96CB") public boolean equals(Object otherObject){  if (otherObject == null) {    return false;  }  if (!otherObject.getClass().equals(this.getClass())) {    return false;  }  DuplicateNameValueList other=(DuplicateNameValueList)otherObject;  if (nameValueMap.size() != other.nameValueMap.size()) {    return false;  }  Iterator<String> li=this.nameValueMap.keySet().iterator();  while (li.hasNext()) {    String key=(String)li.next();    Collection nv1=this.getNameValue(key);    Collection nv2=(Collection)other.nameValueMap.get(key);    if (nv2 == null)     return false; else     if (!nv2.equals(nv1))     return false;  }  return true;}  }
class C{  public void displayError(String message){  displayMessage(message);}  }
class C{  public CTextArea(){  this(new JTextArea());}  }
class C{  public FlipVerticalToAnimation(View view){  this.view=view;  flipToView=null;  pivot=PIVOT_CENTER;  direction=DIRECTION_UP;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public static int binarySearch(double[] a,double key){  return binarySearch(a,key,0,a.length - 1);}  }
class C{  public BufferedSageFile(SageFileSource sageFileSource){  this(sageFileSource,READ_BUFFER_SIZE,WRITE_BUFFER_SIZE);}  }
class C{  public Box rotate(float rotation,float x,float y,float z,Vec3UV center){  ROTATION_MATRIX.setRotations((float)Math.toRadians(x * rotation),(float)Math.toRadians(y * rotation),(float)Math.toRadians(z * rotation));  for (  Box box : this.childBoxes) {    box.rotate(rotation,x,y,z,center);  }  for (  Quad quad : this.quads) {    for (int i=0; i < 4; i++) {      Vec3UV vec=quad.vertices[i];      Vec3UV rotatedPoint=null;      rotatedPoint=ROTATION_MATRIX.transformVec(vec,center);      vec.x=rotatedPoint.x;      vec.y=rotatedPoint.y;      vec.z=rotatedPoint.z;    }  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:54.914 -0500",hash_original_method="895FBB9B6BA00626F6F635DDC47F48B7",hash_generated_method="5A04B31D95F8294D7A375311360DCE87") protected String encodeBody(){  return eventType;}  }
class C{  private void preInit(int index,int AD_Column_ID,int displayType,String ColumnName){  m_columnName[index]=ColumnName;  String what=Msg.translate(Env.getCtx(),ColumnName);  m_label[index]=new Label(what);  Lookup lookup=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,displayType);  if (displayType == DisplayType.Search) {    m_from[index]=new WSearchEditor(ColumnName,false,false,true,lookup);    m_to[index]=new WSearchEditor(ColumnName,false,false,true,lookup);  } else {    m_from[index]=new WTableDirEditor(ColumnName,false,false,true,lookup);    m_to[index]=new WTableDirEditor(ColumnName,false,false,true,lookup);  }}  }
class C{  void sendMetaEvents(MidiMessage message){  if (metaEventListeners.size() == 0)   return;  getEventDispatcher().sendAudioEvents(message,metaEventListeners);}  }
class C{  protected Solution select(List<Solution> solutions,int index){  double[] weight=weights.get(index);  double minDistance=Double.POSITIVE_INFINITY;  Solution minSolution=null;  for (  Solution solution : solutions) {    if (!solution.violatesConstraints()) {      double[] objectives=(double[])solution.getAttribute(NORMALIZED_OBJECTIVES);      double penalty=numberOfObjectives * Math.pow(scalingFactor,alpha) * acosine(weight,objectives) / minAngles[index];      double tempDistance=Vector.magnitude(objectives) * (1.0 + penalty);      if (tempDistance < minDistance) {        minDistance=tempDistance;        minSolution=solution;      }    }  }  if (minSolution == null) {    for (    Solution solution : solutions) {      double tempDistance=0.0;      for (int i=0; i < solution.getNumberOfConstraints(); i++) {        tempDistance+=Math.abs(solution.getConstraint(i));      }      if (tempDistance < minDistance) {        minDistance=tempDistance;        minSolution=solution;      }    }  }  return minSolution;}  }
class C{  public static int murmurhash3_x86_32(int[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + len;  for (int i=offset; i < roundedEnd; i++) {    int k1=data[i];    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  h1^=len;  h1^=h1 >>> 16;  h1*=0x85ebca6b;  h1^=h1 >>> 13;  h1*=0xc2b2ae35;  h1^=h1 >>> 16;  return h1;}  }
class C{  public static double[][] matrixProduct(double[][] A,double[][] B) throws Exception {  if (A[0].length != B.length) {    throw new Exception("Number of columns of a " + A[0].length + " does not match the number of rows of b "+ B.length);  }  double[][] result=new double[A.length][B[0].length];  for (int r=0; r < result.length; r++) {    for (int c=0; c < result[r].length; c++) {      result[r][c]=0;      for (int k=0; k < A[r].length; k++) {        result[r][c]+=A[r][k] * B[k][c];      }    }  }  return result;}  }
class C{  public boolean isStatic(){  return this.isDeclaredStatic();}  }
class C{  private SSLConfig configureLegacyJMXSSL(SSLConfig sslConfig){  sslConfig.setCiphers(getDistributionConfig().getJmxManagerSSLCiphers());  sslConfig.setEnabled(getDistributionConfig().getJmxManagerSSLEnabled());  sslConfig.setKeystore(getDistributionConfig().getJmxManagerSSLKeyStore());  sslConfig.setKeystorePassword(getDistributionConfig().getJmxManagerSSLKeyStorePassword());  sslConfig.setKeystoreType(getDistributionConfig().getJmxManagerSSLKeyStoreType());  sslConfig.setTruststore(getDistributionConfig().getJmxManagerSSLTrustStore());  sslConfig.setTruststorePassword(getDistributionConfig().getJmxManagerSSLTrustStorePassword());  sslConfig.setProtocols(getDistributionConfig().getJmxManagerSSLProtocols());  sslConfig.setRequireAuth(getDistributionConfig().getJmxManagerSSLRequireAuthentication());  return sslConfig;}  }
class C{  static FactoryBean createIt(@JsonProperty("mixed") double xyz){  return null;}  }
class C{  public synchronized void unsetPriority(final boolean recursive){  if (null != m_parent) {    m_priority=m_parent.m_priority;  } else {    m_priority=Priority.DEBUG;  }  m_priorityForceSet=false;  resetChildPriorities(recursive);}  }
class C{  public UserConfig updateIcon(String file,UserConfig config){  config.addCredentials(this);  String xml=POSTIMAGE(this.url + "/update-user-icon",file,"image.jpg",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=new UserConfig();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  @Override public boolean shouldExecute(){  return theMinion.master != null && theMinion.getDistanceSqToEntity(theMinion.master) > (double)(this.minDist * this.minDist) && shouldFollowMaster();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void initColumnObject(int idx,Object val){  origVals[idx - 1]=val;}  }
class C{  public ExecutionExit createExecutionExit(){  ExecutionExitImpl executionExit=new ExecutionExitImpl();  return executionExit;}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  private void checkRootPropertyUpdate(String prop,String setVal,String expGetVal) throws Exception {  igfs.update(IgfsPath.ROOT,Collections.singletonMap(prop,setVal));  igfs.format();  IgfsFile file=igfs.info(IgfsPath.ROOT);  assert file != null;  Map<String,String> props=file.properties();  assertEquals(expGetVal,props.get(prop));}  }
class C{  static public boolean isTypePrimitive(String fieldSig){  char c=fieldSig.charAt(0);  return (c != 'L');}  }
class C{  public void finalStatistics(final EvolutionState state,final int result){  super.finalStatistics(state,result);  if (doFinal)   state.output.println("\nBest Individual of Run:",statisticslog);  for (int x=0; x < state.population.subpops.length; x++) {    if (doFinal)     state.output.println("Subpopulation " + x + ":",statisticslog);    if (doFinal)     best_of_run[x].printIndividualForHumans(state,statisticslog);    if (doMessage && !silentPrint)     state.output.message("Subpop " + x + " best fitness of run: "+ best_of_run[x].fitness.fitnessToStringForHumans());    if (doFinal && doDescription)     if (state.evaluator.p_problem instanceof SimpleProblemForm)     ((SimpleProblemForm)(state.evaluator.p_problem.clone())).describe(state,best_of_run[x],x,0,statisticslog);  }}  }
class C{  public void prepareTestS3Files(String bucketName,String s3KeyPrefix,Path localTempPath,List<String> localFilePaths,List<String> directoryPaths) throws Exception {  for (  String file : localFilePaths) {    AbstractServiceTest.createLocalFile(localTempPath.toString(),file,AbstractServiceTest.FILE_SIZE_1_KB);  }  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=s3DaoTestHelper.getTestS3FileTransferRequestParamsDto();  if (bucketName != null) {    s3FileTransferRequestParamsDto.setS3BucketName(bucketName);  }  s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefix);  s3FileTransferRequestParamsDto.setLocalPath(localTempPath.toString());  s3FileTransferRequestParamsDto.setRecursive(true);  S3FileTransferResultsDto results=s3Service.uploadDirectory(s3FileTransferRequestParamsDto);  assertEquals(Long.valueOf(localFilePaths.size()),results.getTotalFilesTransferred());  for (  String directoryPath : directoryPaths) {    s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefix + "/" + directoryPath);    s3Service.createDirectory(s3FileTransferRequestParamsDto);  }  s3FileTransferRequestParamsDto.setS3KeyPrefix(s3KeyPrefix);  assertEquals(localFilePaths.size() + directoryPaths.size(),s3Service.listDirectory(s3FileTransferRequestParamsDto).size());}  }
class C{  public static void writeln(Offset o,boolean flush){  write(o);  writelnWithFlush(flush);}  }
class C{  public static NumericDolphinBinder<Integer> bindInteger(Property<Integer> property){  requireNonNull(property,"property");  return new IntegerDolphinBinder(property);}  }
class C{  protected K entryKey(final HashEntry<K,V> entry){  return entry.getKey();}  }
class C{  public static void checkConstraintViolation(@Nonnull ConstraintViolationException e,@Nonnull String property,@Nonnull String messageContains) throws AssertionError {  System.out.println(e.getMessage());  Set<ConstraintViolation<?>> constraintViolations=e.getConstraintViolations();  for (  ConstraintViolation<?> violation : constraintViolations) {    if (property.equalsIgnoreCase(violation.getPropertyPath().iterator().next().getName())) {      Assert.assertTrue(violation.getMessage().contains(messageContains));      return;    }  }  Assert.fail("Constraint violation did not contain a violation on property " + property);}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new FishSource(getSpecies(ctx));}  }
class C{  @Deprecated public static synchronized boolean unregisterHandler(UrlInterceptHandler handler){  return getHandlers().remove(handler);}  }
class C{  protected void editControlAction(int row){  lc=controlList.get(row);  if (lc == null) {    log.error("Invalid light control edit specified");    return;  }  inEditControlMode=true;  addEditControlWindow();  int ctType=lc.getControlType();switch (ctType) {case Light.SENSOR_CONTROL:    setUpControlType(sensorControl);  typeBox.setSelectedIndex(sensorControlIndex);field1a.setText(lc.getControlSensorName());stateBox.setSelectedIndex(sensorActiveIndex);if (lc.getControlSensorSense() == Sensor.INACTIVE) {stateBox.setSelectedIndex(sensorInactiveIndex);}break;case Light.FAST_CLOCK_CONTROL:setUpControlType(fastClockControl);typeBox.setSelectedIndex(fastClockControlIndex);int onHour=lc.getFastClockOnHour();int onMin=lc.getFastClockOnMin();int offHour=lc.getFastClockOffHour();int offMin=lc.getFastClockOffMin();field1b.setText(formatTime(onHour,onMin));field2a.setText(formatTime(offHour,offMin));break;case Light.TURNOUT_STATUS_CONTROL:setUpControlType(turnoutStatusControl);typeBox.setSelectedIndex(turnoutStatusControlIndex);field1c.setText(lc.getControlTurnoutName());stateBox.setSelectedIndex(turnoutClosedIndex);if (lc.getControlTurnoutState() == Turnout.THROWN) {stateBox.setSelectedIndex(turnoutThrownIndex);}break;case Light.TIMED_ON_CONTROL:setUpControlType(timedOnControl);typeBox.setSelectedIndex(timedOnControlIndex);int duration=lc.getTimedOnDuration();field1d.setText(lc.getControlTimedOnSensorName());field2b.setText(Integer.toString(duration));break;case Light.TWO_SENSOR_CONTROL:setUpControlType(twoSensorControl);typeBox.setSelectedIndex(twoSensorControlIndex);field1a.setText(lc.getControlSensorName());field1a2.setText(lc.getControlSensor2Name());stateBox.setSelectedIndex(sensorActiveIndex);if (lc.getControlSensorSense() == Sensor.INACTIVE) {stateBox.setSelectedIndex(sensorInactiveIndex);}break;case Light.NO_CONTROL:setUpControlType(noControl);typeBox.setSelectedIndex(noControlIndex);field1a.setText("");stateBox.setSelectedIndex(sensorActiveIndex);break;}updateControl.setVisible(true);createControl.setVisible(false);addControlFrame.pack();addControlFrame.setVisible(true);}  }
class C{  public static String streamAliasFromName(String name){  Objects.requireNonNull(name,"name");  if (!name.startsWith(ALIAS_PREFIX))   return null;  return name.substring(ALIAS_PREFIX.length());}  }
class C{  public TypeFakeDefinition createTypeFakeDefinition(){  TypeFakeDefinitionImpl typeFakeDefinition=new TypeFakeDefinitionImpl();  return typeFakeDefinition;}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  public static cuComplex cuCdiv(cuComplex x,cuComplex y){  cuComplex quot;  float s=((float)Math.abs(cuCreal(y))) + ((float)Math.abs(cuCimag(y)));  float oos=1.0f / s;  float ars=cuCreal(x) * oos;  float ais=cuCimag(x) * oos;  float brs=cuCreal(y) * oos;  float bis=cuCimag(y) * oos;  s=(brs * brs) + (bis * bis);  oos=1.0f / s;  quot=cuCmplx(((ars * brs) + (ais * bis)) * oos,((ais * brs) - (ars * bis)) * oos);  return quot;}  }
class C{  public void add(Character ok){  add(ok.charValue());}  }
class C{  public CMSSignedData generate(CMSProcessable content,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(content,CMSUtils.getProvider(sigProvider));}  }
class C{  public void addPlugin(AbstractPlugin plugin){  plugin.addPluginObserver(this);  allPlugins.add(plugin);}  }
class C{  private void calcPlotRect(Dimension size){  int left=graphInsets.left;  int top=graphInsets.top;  int width=size.width - graphInsets.left - graphInsets.right;  int height=size.height - graphInsets.top - graphInsets.bottom;  plotRect=new Rectangle(left,top,width,height);}  }
class C{  public String bucketName(){  return bucketName;}  }
class C{  public static boolean equalsWithNull(Object o1,Object o2){  if (o1 == null) {    return o2 == null;  }  return o2 != null && (o1.equals(o2));}  }
class C{  public void paintSpinnerBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static boolean isGeolocType(String mime){  return mime.toLowerCase().equals("application/vnd.gsma.rcspushlocation+xml");}  }
class C{  @Deprecated public Builder cacheOnDisc(){  return cacheOnDisk(true);}  }
class C{  private boolean isAlreadyHandled(Intent intent){  return intent.getBooleanExtra(INTENT_HANDLED,false);}  }
class C{  public static List<DataFileFooter> readCarbonIndexFile(String taskId,List<TableBlockInfo> tableBlockInfoList,AbsoluteTableIdentifier absoluteTableIdentifier) throws CarbonUtilException {  Collections.sort(tableBlockInfoList);  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());  String carbonIndexFilePath=carbonTablePath.getCarbonIndexFilePath(taskId,"0",tableBlockInfoList.get(0).getSegmentId());  DataFileFooterConverter fileFooterConverter=new DataFileFooterConverter();  try {    return fileFooterConverter.getIndexInfo(carbonIndexFilePath,tableBlockInfoList);  } catch (  IOException e) {    throw new CarbonUtilException("Problem while reading the file metadata",e);  }}  }
class C{  public ToStringBuilder append(String fieldName,long[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public boolean isPaused(){  return isPaused;}  }
class C{  @Override public final void postSetUp() throws Exception {  final Host host=Host.getHost(0);  server1=host.getVM(0);  server2=host.getVM(1);  client1=host.getVM(2);  PORT1=((Integer)server1.invoke(null)).intValue();  PORT2=((Integer)server2.invoke(null)).intValue();  client1.invoke(null);}  }
class C{  public PatternFilenameFilter(Pattern pattern){  this.pattern=Preconditions.checkNotNull(pattern);}  }
class C{  private FillArrayDataPayloadDecodedInstruction(InstructionCodec format,int opcode,Object data,int size,int elementWidth){  super(format,opcode,0,null,0,0L);  this.data=data;  this.size=size;  this.elementWidth=elementWidth;}  }
class C{  public boolean isMenuOpen(){  return Display.getInstance().getCurrent() == menu;}  }
class C{  private void disableImageForSnapshots(URI protectionDevice,List<URI> snapshotList,boolean setSnapshotsInactive,boolean setSnapshotSyncActive,String opId) throws ControllerException {  TaskCompleter completer=null;  try {    _log.info("Deactivating a bookmark on the RP CG(s)");    completer=new BlockSnapshotDeactivateCompleter(snapshotList,opId);    ProtectionSystem system=null;    try {      system=_dbClient.queryObject(ProtectionSystem.class,protectionDevice);    } catch (    DatabaseException e) {      throw DeviceControllerExceptions.recoverpoint.databaseExceptionDeactivateSnapshot(protectionDevice);    }    if (system == null) {      throw DeviceControllerExceptions.recoverpoint.databaseExceptionDeactivateSnapshot(protectionDevice);    }    Set<String> volumeWWNs=new HashSet<String>();    String emName="";    for (    URI snapshotID : snapshotList) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);      if (snapshot.getEmName() != null) {        emName=snapshot.getEmName();      }      Volume volume=_dbClient.queryObject(Volume.class,snapshot.getParent().getURI());      if (Volume.checkForVplexBackEndVolume(_dbClient,volume)) {        volume=Volume.fetchVplexVolume(_dbClient,volume);      }      if (volume.checkPersonality(Volume.PersonalityTypes.TARGET.toString())) {        volumeWWNs.add(RPHelper.getRPWWn(volume.getId(),_dbClient));      } else {        ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());        Volume targetVolume=ProtectionSet.getTargetVolumeFromSourceAndInternalSiteName(_dbClient,protectionSet,volume,snapshot.getEmInternalSiteName());        volumeWWNs.add(RPHelper.getRPWWn(targetVolume.getId(),_dbClient));      }      RecoverPointClient rp=RPHelper.getRecoverPointClient(system);      MultiCopyDisableImageRequestParams request=new MultiCopyDisableImageRequestParams();      request.setVolumeWWNSet(volumeWWNs);      request.setEmName(emName);      if (doDisableImageCopies(snapshot)) {        MultiCopyDisableImageResponse response=rp.disableImageCopies(request);        if (response == null) {          throw DeviceControllerExceptions.recoverpoint.failedDisableAccessOnRP();        }      }    }    StringSet snapshots=new StringSet();    for (    URI snapshotID : snapshotList) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);      snapshot.setInactive(setSnapshotsInactive);      snapshot.setIsSyncActive(setSnapshotSyncActive);      snapshots.add(snapshot.getNativeId());      _dbClient.updateObject(snapshot);    }    completer.ready(_dbClient);  } catch (  InternalException e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,e);    }  }catch (  URISyntaxException e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,DeviceControllerException.errors.invalidURI(e));    }  }catch (  Exception e) {    _log.error("Operation failed with Exception: ",e);    if (completer != null) {      completer.error(_dbClient,DeviceControllerException.errors.jobFailed(e));    }  }}  }
class C{  @Override public String basePath(){  return "/wm/topology";}  }
class C{  public FlipAnimation(View fromView,View toView){  this.fromView=fromView;  this.toView=toView;  setDuration(FLIP_DURATION);  setFillAfter(false);  setInterpolator(new AccelerateDecelerateInterpolator());}  }
class C{  public void reset(){  m_startingTime=System.currentTimeMillis();  m_currentRotation=0;}  }
class C{  public void put(String key,String value){  if (key != null && value != null) {    urlParams.put(key,value);  }}  }
class C{  public Name operatorName(JCTree.Tag tag){  return opname[tag.operatorIndex()];}  }
class C{  public void add(String columnName){  columnNames.add(columnName);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:48.307 -0500",hash_original_method="F616355A61EDB472AF49A2D85F949B07",hash_generated_method="FC9D3D53408896E06586C68BE0F93BE5") public static boolean equals(byte[] array1,byte[] array2,int length){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length < length || array2.length < length) {    return false;  }  for (int i=0; i < length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void init(){  subPanel.setLayout(new BorderLayout());  topic=new JComboBox();  topic.setEditable(true);  topic.setMaximumSize(MQTTFrame.TEXT_FIELD_DIMENSION);  topic.setMaximumRowCount(5);  receivedTopic=new JTextField(15);  receivedTopic.setMaximumSize(MQTTFrame.TEXT_FIELD_DIMENSION);  receivedTopic.setEditable(false);  receivedTopic.setBackground(Color.lightGray);  receivedTopic.setMargin(MQTTFrame.TEXT_MARGINS);  receivedQoS=new JTextField(3);  receivedQoS.setMaximumSize(MQTTFrame.DROP_DOWN_DIMENSION);  receivedQoS.setEditable(false);  receivedQoS.setBackground(Color.lightGray);  receivedQoS.setMargin(MQTTFrame.TEXT_MARGINS);  receivedRetain=new JCheckBox();  receivedRetain.setMaximumSize(MQTTFrame.DROP_DOWN_DIMENSION);  receivedRetain.setEnabled(false);  receivedRetain.setMargin(MQTTFrame.TEXT_MARGINS);  receivedRetain.setSelected(false);  receivedData=new JTextArea(3,30);  receivedData.setBorder(new BevelBorder(BevelBorder.LOWERED));  receivedData.setEditable(false);  receivedData.setBackground(Color.lightGray);  receivedData.setMargin(MQTTFrame.TEXT_MARGINS);  qosList=new JComboBox(qos);  qosList.setSelectedIndex(0);  qosList.setMaximumSize(MQTTFrame.DROP_DOWN_DIMENSION);  qosList.setToolTipText("The QoS at which publications will be delivered");  JPanel sendTopicPanel=new JPanel();  sendTopicPanel.setLayout(new BoxLayout(sendTopicPanel,BoxLayout.X_AXIS));  sendTopicPanel.add(new JLabel(" Subscribe Topic:"));  sendTopicPanel.add(topic);  sendTopicPanel.add(new JLabel(" Request QoS:"));  sendTopicPanel.add(qosList);  sendTopicPanel.add(new JLabel("  "));  JPanel rcvdTopicPanel=new JPanel();  rcvdTopicPanel.setLayout(new BoxLayout(rcvdTopicPanel,BoxLayout.X_AXIS));  rcvdTopicPanel.add(new JLabel(" Received Topic:"));  rcvdTopicPanel.add(receivedTopic);  rcvdTopicPanel.add(new JLabel(" QoS:"));  rcvdTopicPanel.add(receivedQoS);  rcvdTopicPanel.add(new JLabel(" Retained:"));  rcvdTopicPanel.add(receivedRetain);  JPanel titleAndTopics=new JPanel();  titleAndTopics.setLayout(new GridLayout(3,1));  subLabel=new JLabel(PANEL_TITLE + " - text display");  Font f=subLabel.getFont();  subLabel.setFont(new Font(f.getName(),Font.BOLD,f.getSize() + 1));  titleAndTopics.add(subLabel);  titleAndTopics.add(sendTopicPanel);  titleAndTopics.add(rcvdTopicPanel);  JPanel subButtonsLayout=new JPanel();  JPanel buttons=new JPanel();  buttons.setLayout(new GridLayout(4,1));  hexDisplay=false;  hexButton=new JButton("Hex");  hexButton.addActionListener(this);  fileButton=new JButton("Save...");  fileButton.setEnabled(true);  fileButton.addActionListener(this);  subButton=new JButton("Subscribe");  subButton.setEnabled(false);  subButton.addActionListener(this);  unsubButton=new JButton("Unsubscribe");  unsubButton.setEnabled(false);  unsubButton.addActionListener(this);  buttons.add(subButton);  buttons.add(unsubButton);  buttons.add(fileButton);  buttons.add(hexButton);  subButtonsLayout.add(buttons);  subPanel.add(titleAndTopics,BorderLayout.NORTH);  subPanel.add(new JScrollPane(receivedData),BorderLayout.CENTER);  subPanel.add(subButtonsLayout,BorderLayout.EAST);}  }
class C{  protected Expression parseMethodExpression(Expression e,Identifier id) throws SyntaxError, IOException {  long p=scan();  int i=argIndex;  if (token != RPAREN) {    addArgument(parseExpression());    while (token == COMMA) {      scan();      addArgument(parseExpression());    }  }  expect(RPAREN);  return new MethodExpression(p,e,id,exprArgs(i));}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  protected LocationPK(){  super();}  }
class C{  public static void addBuilderToProject(IProject project,String builderId) throws CoreException {  if (hasBuilder(project,builderId)) {    return;  }  IProjectDescription description=project.getDescription();  List<ICommand> builders=new ArrayList<ICommand>(Arrays.asList(description.getBuildSpec()));  ICommand newBuilder=description.newCommand();  newBuilder.setBuilderName(builderId);  builders.add(newBuilder);  description.setBuildSpec(builders.toArray(new ICommand[builders.size()]));  project.setDescription(description,null);}  }
class C{  public void run(){  try {    Runtime.getRuntime().exec(new String[]{"java","-classpath",System.getProperty("java.class.path"),getMainClass().getName()});  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override protected boolean _step(final IScope scope){  return true;}  }
class C{  public Object put(String key,Object value){  int hash=key.hashCode() & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key == key) {      Object old=e.value;      e.value=value;      return old;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  Entry e=new Entry(hash,key,value,table[index]);  table[index]=e;  return null;}  }
class C{  @Override public Cursor queryCharacters(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  final MatrixCursor cursor=new MatrixCursor(CharacterContract.CharacterEntry.sColumnsToDisplay);synchronized (this) {    for (    CharacterRecord cr : mCharacterMap.values())     buildCursorConditionally(cursor,cr,selection,selectionArgs);  }  return cursor;}  }
class C{  public RegexValidator(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Pattern regex){  super(context,resourceId);  setRegex(regex);}  }
class C{  public void test_CONTEXTS() throws Exception {  if (getTestMode() != TestMode.quads)   return;  doInsertbyURL("POST",packagePath + "test_estcard.trig");  final RepositoryResult<Resource> contexts=cxn.getContextIDs();  int size=0;  while (contexts.hasNext()) {    contexts.next();    size++;  }  assertEquals(3,size);}  }
class C{  public UploadSnapshot(ExecutorDriver driver,CassandraDaemonProcess daemon,BackupUploadTask cassandraTask,BackupStorageDriver backupStorageDriver){  this.daemon=daemon;  this.driver=driver;  this.cassandraTask=cassandraTask;  this.backupStorageDriver=backupStorageDriver;  context=cassandraTask.getBackupRestoreContext();}  }
class C{  @Override public <U>CompletableFuture<U> reduce(final U identity,final BiFunction<U,? super T,U> accumulator,final BinaryOperator<U> combiner){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public ListBindingSet(List<String> bindingNames,List<? extends Value> values){  assert bindingNames.size() == values.size() : "number of binding names and values not equal";  this.bindingNames=bindingNames;  this.values=values;}  }
class C{  private static boolean isXLargeTablet(@NonNull final Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public static Validator<CharSequence> letterOrNumber(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  return new LetterOrNumberValidator(context,resourceId,caseSensitivity,allowSpaces,allowedCharacters);}  }
class C{  public DecoderException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.097 -0500",hash_original_method="17512CE00D4450F012CF195B2D29239B",hash_generated_method="0D8D59A4B9A117C6EE0DA6D251D5C754") public List<List<AttributeTypeAndValue>> parse() throws IOException {  List<List<AttributeTypeAndValue>> list=new ArrayList<List<AttributeTypeAndValue>>();  String attType=nextAT();  if (attType == null) {    return list;  }  List<AttributeTypeAndValue> atav=new ArrayList<AttributeTypeAndValue>();  while (true) {    if (pos == chars.length) {      atav.add(new AttributeTypeAndValue(attType,new AttributeValue("",false)));      list.add(0,atav);      return list;    }switch (chars[pos]) {case '"':      atav.add(new AttributeTypeAndValue(attType,new AttributeValue(quotedAV(),hasQE)));    break;case '#':  atav.add(new AttributeTypeAndValue(attType,new AttributeValue(hexAV(),encoded)));break;case '+':case ',':case ';':atav.add(new AttributeTypeAndValue(attType,new AttributeValue("",false)));break;default :atav.add(new AttributeTypeAndValue(attType,new AttributeValue(escapedAV(),hasQE)));}if (pos >= chars.length) {list.add(0,atav);return list;}if (chars[pos] == ',' || chars[pos] == ';') {list.add(0,atav);atav=new ArrayList<AttributeTypeAndValue>();} else if (chars[pos] != '+') {throw new IOException("Invalid distinguished name string");}pos++;attType=nextAT();if (attType == null) {throw new IOException("Invalid distinguished name string");}}}  }
class C{  private static String concatenate(List list){  final StringBuilder buf=new StringBuilder();  for (  Object o : list) {    if (!(o instanceof String)) {      throw new RuntimeException("each element of a string list must be a string; found: " + o);    }    buf.append((String)o);    buf.append("\n");  }  return buf.toString();}  }
class C{  public static String[] align(String from,String to,Mode alignMode){  String result[]=null;  PathParser.PathDataNode[] fromList=PathParser.createNodesFromPathData(from);  PathParser.PathDataNode[] toList=PathParser.createNodesFromPathData(to);  System.out.println("Sequences sizes: " + fromList.length + " / "+ toList.length);  System.out.println("Aligning mode: " + alignMode);  if (PathParser.canMorph(fromList,toList)) {    result=new String[]{from,to};    System.out.println(" >> Paths are already morphable!!! Leaving sequences untouched <<");  } else {    ArrayList<PathParser.PathDataNode>[] aligns=null;switch (alignMode) {case BASE:case LINEAR:      aligns=new RawAlignMode().align(fromList,toList);    break;case SUB_BASE:case SUB_LINEAR:  aligns=new SubAlignMode().align(fromList,toList);break;}if (aligns == null) {System.err.println("Unable to NW-align lists!");return null;} else System.out.println("Sequence aligned! (" + aligns[0].size() + " elements)");AbstractFillMode fillMode=null;switch (alignMode) {case BASE:case SUB_BASE:fillMode=new BaseFillMode();break;case LINEAR:case SUB_LINEAR:fillMode=new LinearInterpolateFillMode();break;}fillMode.fillInjectedNodes(aligns[0],aligns[1]);PathNodeUtils.simplify(aligns[0],aligns[1]);result=new String[]{PathNodeUtils.pathNodesToString(aligns[0]),PathNodeUtils.pathNodesToString(aligns[1])};}return result;}  }
class C{  @Override protected void doAction(){  KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();  KeyStoreState currentState=history.getCurrentState();  String alias=kseFrame.getSelectedEntryAlias();  Password password=currentState.getEntryPassword(alias);  if (password != null) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("UnlockKeyPairAction.KeyPairAlreadyUnlocked.message"),alias),KSE.getApplicationName(),JOptionPane.WARNING_MESSAGE);    return;  }  unlockEntry(alias,currentState);}  }
class C{  public static void merge(final Network networkA,final String prefixA,final Network networkB,final String prefixB,final Network mergedNetwork){  double capacityFactor=mergedNetwork.getCapacityPeriod() / networkA.getCapacityPeriod();  NetworkFactory factory=mergedNetwork.getFactory();  for (  Node node : networkA.getNodes().values()) {    Node node2=factory.createNode(Id.create(prefixA + node.getId().toString(),Node.class),node.getCoord());    mergedNetwork.addNode(node2);  }  for (  Link link : networkA.getLinks().values()) {    Id<Node> fromNodeId=Id.create(prefixA + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(prefixA + link.getToNode().getId().toString(),Node.class);    Node fromNode=mergedNetwork.getNodes().get(fromNodeId);    Node toNode=mergedNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(prefixA + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    mergedNetwork.addLink(link2);  }  capacityFactor=mergedNetwork.getCapacityPeriod() / networkB.getCapacityPeriod();  for (  Node node : networkB.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(prefixB + node.getId().toString(),Node.class),node.getCoord());    mergedNetwork.addNode(node2);  }  for (  Link link : networkB.getLinks().values()) {    Id<Node> fromNodeId=Id.create(prefixB + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(prefixB + link.getToNode().getId().toString(),Node.class);    Node fromNode=mergedNetwork.getNodes().get(fromNodeId);    Node toNode=mergedNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(prefixB + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    mergedNetwork.addLink(link2);  }}  }
class C{  public static void init(@NonNull final Context context,@NonNull final String prefsFileName){  getInstance(context).initFor(prefsFileName);}  }
class C{  public ExecutionError(@Nullable String message,@Nullable Error cause){  super(message,cause);}  }
class C{  public void test_read_writeFloat() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeFloat(Float.MAX_VALUE);  raf.writeFloat(555.55f);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read. ",Float.MAX_VALUE,raf.readFloat());  assertEquals("Test 2: Incorrect value written or read. ",555.55f,raf.readFloat());  try {    raf.readFloat();    fail("Test 3: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeFloat(Float.MIN_VALUE);    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readFloat();    fail("Test 5: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public DaemonThreadFactory(final String threadPrefix){  super(threadPrefix,null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.470 -0500",hash_original_method="A5C9B1F940A6E4E0B7C56A8CD89F3E5B",hash_generated_method="CF35E1D7B63D21B25C3AC38B2AA64EC0") public static String toString(byte value){  String str=new String();  str.addTaint(value);  return str;}  }
class C{  protected void clearTargetCollection() throws Exception {  this.deleteCollection(TARGET_COLLECTION);  this.waitForCollectionToDisappear(TARGET_COLLECTION);  this.createCollection(TARGET_COLLECTION);  this.waitForRecoveriesToFinish(TARGET_COLLECTION,true);  this.updateMappingsFromZk(TARGET_COLLECTION);}  }
class C{  public ObjectFactory(){}  }
class C{  public void copyFromGroup(@NotNull DefaultActionGroup other){  copyFrom(other);  setPopup(other.isPopup());  mySortedChildren.clear();  mySortedChildren.addAll(other.mySortedChildren);  myPairs.clear();  myPairs.addAll(other.myPairs);}  }
class C{  protected void appendClassName(StringBuffer buffer,Object object){  if (useClassName && object != null) {    register(object);    if (useShortClassName) {      buffer.append(getShortClassName(object.getClass()));    } else {      buffer.append(object.getClass().getName());    }  }}  }
class C{  public AlphaTransform(){}  }
class C{  public static String toArrayString(Object[] arguments){  return toArrayString(arguments,false,-1,false);}  }
class C{  public Resource[] scanForResources(String path,String prefix,String suffix) throws IOException {  LOG.debug("Scanning for classpath resources at '" + path + "' (Prefix: '"+ prefix+ "', Suffix: '"+ suffix+ "')");  Set<Resource> resources=new TreeSet<Resource>();  Set<String> resourceNames=findResourceNames(path,prefix,suffix);  for (  String resourceName : resourceNames) {    resources.add(new ClassPathResource(resourceName,classLoader));    LOG.debug("Found resource: " + resourceName);  }  return resources.toArray(new Resource[resources.size()]);}  }
class C{  private void writeInputStream(HttpServletResponse response,String targetExt,InputStream inStream) throws IOException {  final String mimeType=Classification.ext2mime(targetExt,MimeTypes.Type.TEXT_HTML.asString());  response.setContentType(mimeType);  response.setStatus(HttpServletResponse.SC_OK);  byte[] buffer=new byte[4096];  int l, size=0;  try {    while ((l=inStream.read(buffer)) > 0) {      response.getOutputStream().write(buffer,0,l);      size+=l;    }    response.setContentLength(size);  } catch (  IOException e) {    ConcurrentLog.fine("FILEHANDLER","YaCyDefaultServlet: resource content stream could not be written to response.");    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  } finally {    try {      inStream.close();    } catch (    IOException ignored) {    }  }}  }
class C{  private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){  if (str == null || suffix == null) {    return str == null && suffix == null;  }  if (suffix.length() > str.length()) {    return false;  }  final int strOffset=str.length() - suffix.length();  return regionMatches(str,ignoreCase,strOffset,suffix,0,suffix.length());}  }
class C{  public static void w(String tag,Throwable tr){  w(tag,null,tr);}  }
class C{  public boolean remove(StateMachineInterceptor<S,E> interceptor){  return interceptors.remove(interceptor);}  }
class C{  public ASCII85OutputStream(OutputStream out){  super(out);  characters=MAX_CHARS_PER_LINE;  end=false;  bIndex=0;  try {    newline=System.getProperty("line.separator");  } catch (  SecurityException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.995 -0500",hash_original_method="677EA2B2000D6A74FF8682A7B068EF0E",hash_generated_method="C16FF6AA6516C4C904778FACB705FBF2") public static String actionToString(int action){switch (action) {case ACTION_DOWN:    return "ACTION_DOWN";case ACTION_UP:  return "ACTION_UP";case ACTION_CANCEL:return "ACTION_CANCEL";case ACTION_OUTSIDE:return "ACTION_OUTSIDE";case ACTION_MOVE:return "ACTION_MOVE";case ACTION_HOVER_MOVE:return "ACTION_HOVER_MOVE";case ACTION_SCROLL:return "ACTION_SCROLL";case ACTION_HOVER_ENTER:return "ACTION_HOVER_ENTER";case ACTION_HOVER_EXIT:return "ACTION_HOVER_EXIT";}int index=(action & ACTION_POINTER_INDEX_MASK) >> ACTION_POINTER_INDEX_SHIFT;switch (action & ACTION_MASK) {case ACTION_POINTER_DOWN:return "ACTION_POINTER_DOWN(" + index + ")";case ACTION_POINTER_UP:return "ACTION_POINTER_UP(" + index + ")";default :return Integer.toString(action);}}  }
class C{  private void processClonesBeforeDeletion(StorageSystem storage,Set<Volume> clones) throws Exception {  _log.info("process clones before deletion");  for (  Volume clone : clones) {    String groupName=clone.getReplicationGroupInstance();    if (storage.deviceIsType(Type.vmax) && NullColumnValueGetter.isNotNullValue(groupName)) {      CIMObjectPath cgPath=_cimPath.getReplicationGroupPath(storage,clone.getReplicationGroupInstance());      ReplicationUtils.deleteTargetDeviceGroup(storage,cgPath,_dbClient,_helper,_cimPath);      URIQueryResultList queryResults=new URIQueryResultList();      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeReplicationGroupInstanceConstraint(clone.getReplicationGroupInstance()),queryResults);      Iterator<URI> resultsIter=queryResults.iterator();      while (resultsIter.hasNext()) {        URI cloneUri=resultsIter.next();        Volume theClone=_dbClient.queryObject(Volume.class,cloneUri);        theClone.setReplicationGroupInstance(NullColumnValueGetter.getNullStr());        _dbClient.persistObject(theClone);      }    }  }}  }
class C{  public static ProductDetailsFragment newInstance(@SuppressWarnings("TypeMayBeWeakened") Product product){  ProductDetailsFragment productDetailsFragment=new ProductDetailsFragment();  Bundle args=new Bundle();  args.putSerializable(KEY_PRODUCT,product);  productDetailsFragment.setArguments(args);  return productDetailsFragment;}  }
class C{  public KrbAsReqBuilder action() throws KrbException, Asn1Exception, IOException {  checkState(State.INIT,"Cannot call action");  state=State.REQ_OK;  return send().resolve();}  }
class C{  public void test_optional_with_filter_that_fails() throws Exception {  new TestHelper("optional-with-filter-that-fails-01","optional-with-filter-that-fails-01.rq","optional-with-filter-that-fails-01.ttl","optional-with-filter-that-fails-01.srx").runTest();}  }
class C{  public String substring(int start){  if (start == 0) {    return this;  }  if (0 <= start && start <= count) {    return new String(offset + start,count - start,value);  }  throw new StringIndexOutOfBoundsException(start);}  }
class C{  public NotificationChain basicSetFeatureType(FeatureType newFeatureType,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newFeatureType,SGenPackage.FEATURE_PARAMETER__FEATURE_TYPE,msgs);  return msgs;}  }
class C{  private void write(Object source,OutputNode node,Context context) throws Exception {  new Traverser(context).write(node,source);}  }
class C{  private Map<String,Object> handleValidationErrorResponse(ValidationErrors validationErrors){  List<ValidationError> errors=validationErrors.getAllDeepValidationErrors();  verify(!errors.isEmpty(),"Payment failed but validation error list was empty");  for (  ValidationError error : errors) {    logger.warningfmt("Payment validation failed on field: %s\nCode: %s\nMessage: %s",error.getAttribute(),error.getCode(),error.getMessage());  }  return JsonResponseHelper.createFormFieldError(errors.get(0).getMessage(),errors.get(0).getAttribute());}  }
class C{  public static <U,I>Function<U,Predicate<I>> notInTrain(PreferenceData<U,I> trainData){  return null;}  }
class C{  public AddReferencesRequest clone(){  AddReferencesRequest result=new AddReferencesRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  if (ReferencesToAdd != null) {    result.ReferencesToAdd=new AddReferencesItem[ReferencesToAdd.length];    for (int i=0; i < ReferencesToAdd.length; i++)     result.ReferencesToAdd[i]=ReferencesToAdd[i].clone();  }  return result;}  }
class C{  @Override public int findSegment(Point2D.Double find,double tolerance){  if (get(TRANSFORM) != null) {    try {      find=(Point2D.Double)get(TRANSFORM).inverseTransform(find,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      System.err.println("Warning: SVGBezierFigure.findSegment. Figure has noninvertible Transform.");    }  }  return getBezierPath().findSegment(find,tolerance);}  }
class C{  public void unlinkBlockSnapshotSessionTarget(URI systemURI,URI snapSessionURI,URI snapshotURI,Boolean deleteTarget,String stepId){  TaskCompleter completer=null;  try {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    completer=new BlockSnapshotSessionUnlinkTargetCompleter(snapSessionURI,snapshotURI,deleteTarget,stepId);    getDevice(system.getSystemType()).doUnlinkBlockSnapshotSessionTarget(system,snapSessionURI,snapshotURI,deleteTarget,completer);  } catch (  Exception e) {    if (completer != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      completer.error(_dbClient,serviceError);    } else {      throw DeviceControllerException.exceptions.unlinkBlockSnapshotSessionTargetsFailed(e);    }  }}  }
class C{  public void paint(Graphics g,JComponent c){}  }
class C{  public static void appendConnections(Vector<BeanConnection> connections,int tab){  if (tab < TABBED_CONNECTIONS.size()) {    Vector<BeanConnection> cons=TABBED_CONNECTIONS.get(tab);    for (int i=0; i < connections.size(); i++) {      cons.add(connections.get(i));    }  }}  }
class C{  public final boolean isWriteAccess(){  return this.isWriteAccess;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing air=getAir(stack);  return stack.getUIMgrSafe().getVideoFrame().getPCRestrictionsForAiring(air);}  }
class C{  public ContentAssistHistory(int maxLHS,int maxRHS){  Assert.isLegal(maxLHS > 0);  Assert.isLegal(maxRHS > 0);  fMaxLHS=maxLHS;  fMaxRHS=maxRHS;  fLHSCache=new MRUMap<String,MRUSet<String>>(fMaxLHS);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__CHARACTER:    setCharacter(CHARACTER_EDEFAULT);  return;case RegularExpressionPackage.CHARACTER_ESCAPE_SEQUENCE__SEQUENCE:setSequence(SEQUENCE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void XtestRangePerformance() throws Exception {  int indexSize=1999;  float fractionCovered=1.0f;  String l=t(0);  String u=t((int)(indexSize * 10 * fractionCovered));  SolrQueryRequest req=lrf.makeRequest();  QParser parser=QParser.getParser("foomany_s:[" + l + " TO "+ u+ "]",null,req);  Query range=parser.getQuery();  QParser parser2=QParser.getParser("{!frange l=" + l + " u="+ u+ "}foomany_s",null,req);  Query frange=parser2.getQuery();  req.close();  createIndex2(indexSize,"foomany_s");  doSetGen(1,range);  doSetGen(1,frange);  doSetGen(100,range);  doSetGen(10000,frange);}  }
class C{  protected Command createSelectCommand(){  return new Command(parent.getUIManager().localize("select","Select"));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.162 -0500",hash_original_method="4A7519F376EC7B19E89A23705C5BAAD6",hash_generated_method="709FF115FFE9F07757B4CC928089959E") private void checkPeerCertificatesPresent() throws SSLPeerUnverifiedException {  if (peerCertificates == null || peerCertificates.length == 0) {    throw new SSLPeerUnverifiedException("No peer certificates");  }}  }
class C{  public void test_ConstructorLjava_lang_String(){  Locale x=new Locale("xx");  assertTrue("Failed to create Locale",x.getVariant().equals(""));  try {    new Locale(null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public ServiceActivator createServiceActivator(){  ServiceActivatorImpl serviceActivator=new ServiceActivatorImpl();  return serviceActivator;}  }
class C{  public void close() throws IOException {  while (!this.atEndOfData) {    char ch=this.savedChar;    if (ch == 0) {      ch=this.reader.read();    } else {      this.savedChar=0;    }    if (ch == ']') {      char ch2=this.reader.read();      if (ch2 == ']') {        char ch3=this.reader.read();        if (ch3 == '>') {          break;        }        this.savedChar=ch2;        this.reader.unread(ch3);      } else {        this.reader.unread(ch2);      }    }  }  this.atEndOfData=true;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public void rollback() throws SQLException {  if (logger.isDebugEnabled())   logger.debug("Rolling back transaction");  connection.rollback();}  }
class C{  public void mod(BigInteger modulus){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]=coeffs[i].mod(modulus);  }}  }
class C{  public void diff(final TLCState other){  if (this == other || wasDiffed || other.isStuttering() || other.isBackToState()) {    return;  }  wasDiffed=true;  final List<TLCVariable> predecessorVariables=this.getVariablesAsList();  final List<TLCVariable> secondVariables=other.getVariablesAsList();  for (int i=0; i < predecessorVariables.size(); i++) {    final TLCVariableValue firstValue=predecessorVariables.get(i).getValue();    final TLCVariableValue secondValue=secondVariables.get(i).getValue();    firstValue.diff(secondValue);  }}  }
class C{  public void postCompileStep(Compiler compiler){  m_isTopLevel=compiler.getLocationPathDepth() == -1;}  }
class C{  public void addTestProvider(String name,boolean requiresNetwork,boolean requiresSatellite,boolean requiresCell,boolean hasMonetaryCost,boolean supportsAltitude,boolean supportsSpeed,boolean supportsBearing,int powerRequirement,int accuracy){  ProviderProperties properties=new ProviderProperties(requiresNetwork,requiresSatellite,requiresCell,hasMonetaryCost,supportsAltitude,supportsSpeed,supportsBearing,powerRequirement,accuracy);  if (name.matches(LocationProvider.BAD_CHARS_REGEX)) {    throw new IllegalArgumentException("provider name contains illegal character: " + name);  }  try {    mService.addTestProvider(name,properties);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.473 -0400",hash_original_method="D603D6A8B937767723C974F30C64091E",hash_generated_method="6748068435EBC03C7FF026C219C94338") public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor old=super.swapCursor(newCursor);  resetMappings();  return old;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MutableNodeData(final int branchingFactor,final INodeData src){  if (src == null)   throw new IllegalArgumentException();  keys=new MutableKeyBuffer(branchingFactor,src.getKeys());  nentries=src.getSpannedTupleCount();  if (nentries <= 0)   throw new RuntimeException();  childAddr=new long[branchingFactor + 1];  childEntryCounts=new long[branchingFactor + 1];  final int nkeys=keys.size();  long sum=0;  for (int i=0; i <= nkeys; i++) {    childAddr[i]=src.getChildAddr(i);    final long tmp=childEntryCounts[i]=src.getChildEntryCount(i);    if (tmp <= 0)     throw new RuntimeException();    sum+=tmp;  }  this.hasVersionTimestamps=src.hasVersionTimestamps();  if (src.hasVersionTimestamps()) {    minimumVersionTimestamp=src.getMinimumVersionTimestamp();    maximumVersionTimestamp=src.getMaximumVersionTimestamp();  }  if (sum != nentries)   throw new RuntimeException();}  }
class C{  private String translateViewDefinition(String sourceVendorName,String sourceSchemaName,String targetVendorName,String targetSchemaName,String viewDefinition){  if (viewDefinition != null)   viewDefinition=viewDefinition.trim();  if (isAttemptTranslation() || getDBVendorID(sourceVendorName) == getDBVendorID(targetVendorName))   return m_interfaces.get(getDBVendorID(targetVendorName)).translateViewDefinitionFull(getDBEngine(),sourceVendorName.toUpperCase(),sourceSchemaName,targetSchemaName,viewDefinition); else   return m_interfaces.get(getDBVendorID(targetVendorName)).translateViewDefinitionStub(sourceVendorName.toUpperCase(),viewDefinition);}  }
class C{  public SensorSelectionEvent(final VisionWorld source,final Set<Sensor> oldSelection,final Set<Sensor> selection){  super(source);  if (oldSelection == null) {    throw new IllegalArgumentException("oldSelection must not be null");  }  if (selection == null) {    throw new IllegalArgumentException("selection must not be null");  }  this.oldSelection=oldSelection;  this.selection=selection;}  }
class C{  public boolean processTasks(){  boolean result=false;  Runnable task;  while ((task=tasks.poll()) != null) {    result=true;    task.run();  }  return result;}  }
class C{  public Authority withUsername(User username){  this.users.add(username);  return this;}  }
class C{  public Boolean isEhciEnabled(){  return ehciEnabled;}  }
class C{  private void showDialog(){  int index=getValueIndex();  index=index < 0 ? 0 : index;  final int height=LIST_ITEM_HEIGHT * getEntries().length + LIST_PADDING * 2;  View parent=((View)mViewHolder.itemView.getParent().getParent().getParent());  int parentHeight=parent.getHeight();  if (height > parentHeight) {    mPopupWindow.setHeight(parentHeight - LIST_PADDING * 2);    mRecyclerView.setOverScrollMode(View.OVER_SCROLL_IF_CONTENT_SCROLLS);    mRecyclerView.scrollToPosition(index);  } else {    mRecyclerView.setOverScrollMode(View.OVER_SCROLL_NEVER);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    mPopupWindow.setElevation(48f);  }  mPopupWindow.setAnimationStyle(R.style.Animation_SimpleMenuCenter);  int width=mViewHolder.itemView.getWidth() - POPUP_PADDING_X * 2;  mPopupWindow.setWidth(width);  mPopupWindow.showAtLocation(mViewHolder.itemView,Gravity.CENTER_VERTICAL,0,0);}  }
class C{  public static RefactoringStatus checkTypeName(String name,IJavaElement context){  if (name.indexOf(".") != -1)   return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.Checks_no_dot); else   return checkName(name,JavaConventionsUtil.validateJavaTypeName(name,context));}  }
class C{  @Deprecated public boolean isImSessionSupported(){  return mImSession;}  }
class C{  public AnimatableNumberListValue(AnimationTarget target,float[] numbers){  super(target);  this.numbers=numbers;}  }
class C{  protected boolean hasDefineRequestBody(){  return mRequestBody != null;}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  protected Query parseEscapedQuery(ExtendedSolrQueryParser up,String escapedUserQuery,ExtendedDismaxConfiguration config) throws SyntaxError {  Query query=up.parse(escapedUserQuery);  if (query instanceof BooleanQuery) {    BooleanQuery.Builder t=new BooleanQuery.Builder();    SolrPluginUtils.flattenBooleanQuery(t,(BooleanQuery)query);    SolrPluginUtils.setMinShouldMatch(t,config.minShouldMatch,config.mmAutoRelax);    query=t.build();  }  return query;}  }
class C{  public DomainItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected void displayImageFromNetwork(String imageUri,Object extra) throws IOException {}  }
class C{  private void assertCostShipment(CostResult costResult,int C_OrderLine_ID,MAcctSchema as,String trxName){  MCost cost=assertCost(costResult);  String whereClause="M_Product_ID=? AND M_CostElement_ID=? AND M_CostType_ID=? AND M_InOutLine_ID IN (SELECT M_InOutLine_ID FROM M_InOutLine iol WHERE iol.C_OrderLine_ID=?)";  ArrayList<Object> parameters=new ArrayList();  parameters.add(costResult.M_Product_ID);  parameters.add(cost.getM_CostElement_ID());  parameters.add(cost.getM_CostType_ID());  parameters.add(C_OrderLine_ID);  assertCostDetail(costResult,whereClause,parameters);}  }
class C{  public static String generateTraceString(String errorMsg,Throwable e){  StringWriter w=new StringWriter();  w.append("Message is: ").append(errorMsg);  PrintWriter out=new PrintWriter(w);  if (!StringUtils.isEmpty(errorMsg)) {    out.println(errorMsg);  }  if (e != null) {    e.printStackTrace(out);  }  return w.toString();}  }
class C{  static public String convertJNITypeToSig(String type){switch (type) {case "jboolean":    return "Z";case "jbyte":  return "B";case "jchar":return "C";case "jshort":return "S";case "jint":return "I";case "jlong":return "J";case "jfloat":return "F";case "jdouble":return "D";default :return null;}}  }
class C{  @Override public void endWindow(){  for (  Map.Entry<K,MutableDouble> e : sums.entrySet()) {    K key=e.getKey();    double d=e.getValue().doubleValue();    if (doubleAverage.isConnected()) {      doubleAverage.emit(new KeyValPair<K,Double>(key,d / counts.get(key).doubleValue()));    }    if (intAverage.isConnected()) {      intAverage.emit(new KeyValPair<K,Integer>(key,(int)d));    }    if (longAverage.isConnected()) {      longAverage.emit(new KeyValPair<K,Long>(key,(long)d));    }  }  sums.clear();  counts.clear();}  }
class C{  public void assertEquals(java.util.Date expected,java.util.Date actual){  if (expected != actual && !expected.equals(actual)) {    DateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");    SimpleTimeZone gmt=new SimpleTimeZone(0,"Z");    df.setTimeZone(gmt);    fail("Expected: " + df.format(expected) + " actual: "+ df.format(actual));  }}  }
class C{  public boolean equals(Object partial){  if (this == partial) {    return true;  }  if (partial instanceof LocalTime) {    LocalTime other=(LocalTime)partial;    if (iChronology.equals(other.iChronology)) {      return iLocalMillis == other.iLocalMillis;    }  }  return super.equals(partial);}  }
class C{  public Bundler putChar(String key,char value){  bundle.putChar(key,value);  return this;}  }
class C{  public static BitIndex createIndex(final long length,final int bits) throws NegativeArraySizeException, IllegalArgumentException {  if (bits < 1 || bits > 64) {    throw new IllegalArgumentException("Illegal bits value=" + bits);  }  return new BitIndex(length,bits);}  }
class C{  public OpenApplicationFileAction(Application app){  super(app);  putValue(Action.NAME,"OSX Open File");}  }
class C{  public String toString(){  return syncbaseID + "." + (syncBegin ? "begin" : "end")+ (offset != 0 ? super.toString() : "");}  }
class C{  public long tryReadLock(){  for (; ; ) {    long s, m, next;    if ((m=(s=state) & ABITS) == WBIT)     return 0L; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))       return next;    } else     if ((next=tryIncReaderOverflow(s)) != 0L)     return next;  }}  }
class C{  public static org.oscm.internal.vo.VOTechnicalService convertToUp(org.oscm.vo.VOTechnicalService oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOTechnicalService newVO=new org.oscm.internal.vo.VOTechnicalService();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEventDefinitions(convertToUpVOEventDefinition(oldVO.getEventDefinitions()));  newVO.setTechnicalServiceId(oldVO.getTechnicalServiceId());  newVO.setTechnicalServiceBuildId(oldVO.getTechnicalServiceBuildId());  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setTechnicalServiceDescription(oldVO.getTechnicalServiceDescription());  newVO.setBaseUrl(oldVO.getBaseUrl());  newVO.setProvisioningUrl(oldVO.getProvisioningUrl());  newVO.setLoginPath(oldVO.getLoginPath());  newVO.setProvisioningVersion(oldVO.getProvisioningVersion());  newVO.setParameterDefinitions(convertToUpVOParameterDefinition(oldVO.getParameterDefinitions()));  newVO.setRoleDefinitions(convertToUpVORoleDefinition(oldVO.getRoleDefinitions()));  newVO.setTags(oldVO.getTags());  newVO.setLicense(oldVO.getLicense());  newVO.setAccessInfo(oldVO.getAccessInfo());  newVO.setTechnicalServiceOperations(convertToUpVOTechnicalServiceOperation(oldVO.getTechnicalServiceOperations()));  newVO.setExternalBilling(oldVO.isExternalBilling());  return newVO;}  }
class C{  public synchronized void add(int index,double x,double y){  while (mXY.get(x) != null) {    x+=getPadding(x);  }  mXY.put(index,x,y);  updateRange(x,y);}  }
class C{  @ParameterParser(syntax="(arg3=STRING 'at' arg2=STRING)?") @Xpect public void proposalChange(@StringDiffExpectation IStringDiffExpectation expectation,@ThisResource XtextResource resource,RegionWithCursor arg2,String arg3) throws Exception {  RegionWithCursor offset=arg2;  String text=arg3;  N4ContentAssistProcessorTestBuilder fixture=n4ContentAssistProcessorTestBuilderHelper.createTestBuilderForResource(resource);  ICompletionProposal proposal=exactlyMatchingProposal(offset,fixture,text);  String before=resource.getParseResult().getRootNode().getText();  if (proposal != null) {    IXtextDocument document=fixture.getDocument(XtextResourceCleanUtil.cleanXtextResource(resource),before);    String after=applyProposal(proposal,document);    before=XpectCommentRemovalUtil.removeAllXpectComments(before);    after=XpectCommentRemovalUtil.removeAllXpectComments(after);    expectation.assertDiffEquals(before,after);  }}  }
class C{  public DialogueState(BNetwork network,Assignment evidence){  super();  super.reset(network);  this.evidence=new Assignment(evidence);  parameterVars=new HashSet<String>();  incrementalVars=new HashSet<String>();}  }
class C{  public static void initClassPath(String jdkHome){  try {    URLClassLoader urlClassLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();    boolean found=false;    for (    URL url : urlClassLoader.getURLs()) {      if (url.getPath().endsWith("/tools.jar") || url.getPath().endsWith("/Classes/classes.jar")) {        found=true;        logger.debug("tools.jar already in classpath");        break;      }    }    if (!found) {      logger.debug("adding tools.jar in classpath");      File toolsLib=null;      if (!StringUtils.isBlank(jdkHome)) {        logger.debug("lookup in " + jdkHome);        toolsLib=new File(jdkHome,"lib/tools.jar");        if (!toolsLib.exists()) {          toolsLib=new File(jdkHome,"../lib/tools.jar");        }        if (!toolsLib.exists()) {          toolsLib=new File(jdkHome,"/Classes/classes.jar");        }        if (!toolsLib.exists()) {          toolsLib=new File(jdkHome,"../Classes/classes.jar");        }      }      if (toolsLib == null || !toolsLib.exists()) {        logger.debug("lookup in JAVA_HOME=" + System.getenv("JAVA_HOME"));        toolsLib=new File(System.getenv("JAVA_HOME"),"lib/tools.jar");        if (!toolsLib.exists()) {          toolsLib=new File(System.getenv("JAVA_HOME"),"../lib/tools.jar");        }        if (!toolsLib.exists()) {          toolsLib=new File(System.getenv("JAVA_HOME"),"/Classes/classes.jar");        }        if (!toolsLib.exists()) {          toolsLib=new File(System.getenv("JAVA_HOME"),"../Classes/classes.jar");        }      }      if (!toolsLib.exists()) {        return;      }      Method method=URLClassLoader.class.getDeclaredMethod("addURL",URL.class);      method.setAccessible(true);      method.invoke(urlClassLoader,toolsLib.toURI().toURL());      logger.debug("updated classpath with: " + toolsLib);    }  } catch (  Exception e) {    logger.error(e.getMessage(),e);  }}  }
class C{  public Taxonomy(){}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  @Override public void parseProperties(Properties zkProp) throws IOException, ConfigException {  for (  Entry<Object,Object> entry : zkProp.entrySet()) {    String key=entry.getKey().toString().trim();    String value=entry.getValue().toString().trim();    if (key.equals("dataDir")) {      dataDir=value;    } else     if (key.equals("dataLogDir")) {      dataLogDir=value;    } else     if (key.equals("clientPort")) {      setClientPort(Integer.parseInt(value));    } else     if (key.equals("tickTime")) {      tickTime=Integer.parseInt(value);    } else     if (key.equals("initLimit")) {      initLimit=Integer.parseInt(value);    } else     if (key.equals("syncLimit")) {      syncLimit=Integer.parseInt(value);    } else     if (key.equals("electionAlg")) {      electionAlg=Integer.parseInt(value);    } else     if (key.equals("maxClientCnxns")) {      maxClientCnxns=Integer.parseInt(value);    } else     if (key.startsWith("server.")) {      int dot=key.indexOf('.');      long sid=Long.parseLong(key.substring(dot + 1));      String parts[]=value.split(":");      if ((parts.length != 2) && (parts.length != 3)) {        LOG.error(value + " does not have the form host:port or host:port:port");      }      InetSocketAddress addr=new InetSocketAddress(parts[0],Integer.parseInt(parts[1]));      if (parts.length == 2) {        servers.put(Long.valueOf(sid),new QuorumPeer.QuorumServer(sid,addr));      } else       if (parts.length == 3) {        InetSocketAddress electionAddr=new InetSocketAddress(parts[0],Integer.parseInt(parts[2]));        servers.put(Long.valueOf(sid),new QuorumPeer.QuorumServer(sid,addr,electionAddr));      }    } else     if (key.startsWith("group")) {      int dot=key.indexOf('.');      long gid=Long.parseLong(key.substring(dot + 1));      numGroups++;      String parts[]=value.split(":");      for (      String s : parts) {        long sid=Long.parseLong(s);        if (serverGroup.containsKey(sid))         throw new ConfigException("Server " + sid + "is in multiple groups"); else         serverGroup.put(sid,gid);      }    } else     if (key.startsWith("weight")) {      int dot=key.indexOf('.');      long sid=Long.parseLong(key.substring(dot + 1));      serverWeight.put(sid,Long.parseLong(value));    } else {      System.setProperty("zookeeper." + key,value);    }  }  if (dataDir == null) {    throw new IllegalArgumentException("dataDir is not set");  }  if (dataLogDir == null) {    dataLogDir=dataDir;  } else {    if (!new File(dataLogDir).isDirectory()) {      throw new IllegalArgumentException("dataLogDir " + dataLogDir + " is missing.");    }  }  if (tickTime == 0) {    throw new IllegalArgumentException("tickTime is not set");  }  if (servers.size() > 1) {    if (initLimit == 0) {      throw new IllegalArgumentException("initLimit is not set");    }    if (syncLimit == 0) {      throw new IllegalArgumentException("syncLimit is not set");    }    if (electionAlg != 0) {      for (      QuorumPeer.QuorumServer s : servers.values()) {        if (s.electionAddr == null)         throw new IllegalArgumentException("Missing election port for server: " + s.id);      }    }    if (serverGroup.size() > 0) {      if (servers.size() != serverGroup.size())       throw new ConfigException("Every server must be in exactly one group");      for (      QuorumPeer.QuorumServer s : servers.values()) {        if (!serverWeight.containsKey(s.id))         serverWeight.put(s.id,(long)1);      }      quorumVerifier=new QuorumHierarchical(numGroups,serverWeight,serverGroup);    } else {      LOG.info("Defaulting to majority quorums");      quorumVerifier=new QuorumMaj(servers.size());    }    File myIdFile=new File(dataDir,"myid");    if (!myIdFile.exists()) {      Long myid=getMyServerId();      if (myid != null) {        serverId=myid;        return;      }      if (zkRun == null)       return;      throw new IllegalArgumentException(myIdFile.toString() + " file is missing");    }    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile),StandardCharsets.UTF_8));    String myIdString;    try {      myIdString=br.readLine();    }  finally {      br.close();    }    try {      serverId=Long.parseLong(myIdString);    } catch (    NumberFormatException e) {      throw new IllegalArgumentException("serverid " + myIdString + " is not a number");    }  }}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:17.556 -0500",hash_original_method="3D8923075A9F95B30754D64C899AFA66",hash_generated_method="BB59D398D3F667713061D80B34E12A3C") public Process exec(String[] taintedCommand,String[] taintedEnvironment,File workingDirectory,boolean redirectErrorStream) throws IOException {  if (taintedCommand == null) {    throw new NullPointerException();  }  if (taintedCommand.length == 0) {    throw new IndexOutOfBoundsException();  }  String[] command=taintedCommand.clone();  String[] environment=taintedEnvironment != null ? taintedEnvironment.clone() : null;  for (  String arg : command) {    if (arg == null) {      throw new NullPointerException();    }  }  if (environment != null) {    for (    String env : environment) {      if (env == null) {        throw new NullPointerException();      }    }  }  FileDescriptor in=new FileDescriptor();  FileDescriptor out=new FileDescriptor();  FileDescriptor err=new FileDescriptor();  String workingPath=(workingDirectory == null) ? null : workingDirectory.getPath();synchronized (processReferences) {    int pid;    try {      pid=exec(command,environment,workingPath,in,out,err,redirectErrorStream);    } catch (    IOException e) {      IOException wrapper=new IOException("Error running exec()." + " Command: " + Arrays.toString(command) + " Working Directory: "+ workingDirectory+ " Environment: "+ Arrays.toString(environment));      wrapper.initCause(e);      throw wrapper;    }    ProcessImpl process=new ProcessImpl(pid,in,out,err);    ProcessReference processReference=new ProcessReference(process,referenceQueue);    processReferences.put(pid,processReference);    processReferences.notifyAll();    return process;  }}  }
class C{  public void testCreate_3args_1(){  System.out.println("create PageAuditCommand with crawler");  String url="";  Set<Parameter> paramSet=null;  boolean isSite=false;  auditCommandFactory.setAuditPageWithCrawler(true);  AuditCommand result=this.auditCommandFactory.create(url,paramSet,isSite);  assertTrue(result instanceof PageAuditCrawlerCommandImpl);  EasyMock.verify(mockAuditDataService);  EasyMock.verify(mockAudit);}  }
class C{  private static int CallNonvirtualObjectMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualObjectMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,null,true);    return env.pushJNIRef(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private void callMethodForProperty(org.codehaus.cargo.container.deployable.Deployable deployable,String name,String value,CargoProject project) throws Exception {  String setterMethodName=getSetterMethodName(name);  Method method;  Object argument;  try {    method=deployable.getClass().getMethod(setterMethodName,new Class[]{String.class});    argument=value;  } catch (  NoSuchMethodException e) {    method=deployable.getClass().getMethod(setterMethodName,new Class[]{String[].class});    List<String> valueList=new ArrayList<String>();    StringTokenizer commaSeparatedValue=new StringTokenizer(value,",");    while (commaSeparatedValue.hasMoreTokens()) {      String commaSeparatedLine=commaSeparatedValue.nextToken().trim();      if (!commaSeparatedLine.isEmpty()) {        valueList.add(commaSeparatedLine);      }    }    String[] valueArray=new String[valueList.size()];    valueArray=valueList.toArray(valueArray);    argument=valueArray;  }  project.getLog().debug("Invoking setter method " + method + " for deployable "+ deployable+ " with argument "+ argument);  method.invoke(deployable,new Object[]{argument});}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_RANGE__LEFT:    return basicSetLeft(null,msgs);case RegularExpressionPackage.CHARACTER_CLASS_RANGE__RIGHT:  return basicSetRight(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static int round(float f){  return (int)floor(f + 0.5f);}  }
class C{  public StateMachine_ createStateMachine_(){  StateMachine_Impl stateMachine_=new StateMachine_Impl();  return stateMachine_;}  }
class C{  public void resetSendScheduleTime(){  sndSchedTime=U.currentTimeMillis();}  }
class C{  public void addMaxUploadSize(MaxUploadSize maxUploadSize){  getMaxUploadSizes().add(maxUploadSize);}  }
class C{  public static void aged(final Player player,final int age){  if (age >= 60) {    process(player,TutorialEventType.TIMED_RULES);  } else   if (age >= 45) {    process(player,TutorialEventType.TIMED_PASSWORD);  } else   if (age >= 30) {    if (player.isNew()) {      process(player,TutorialEventType.TIMED_OUTFIT);    }  } else   if (age >= 15) {    if (player.getOutfit().isNaked()) {      process(player,TutorialEventType.TIMED_NAKED);    }  } else   if (age >= 5) {    process(player,TutorialEventType.TIMED_HELP);  }}  }
class C{  public void removeConsumer(NamedWindowConsumerView namedWindowConsumerView){  EPStatementAgentInstanceHandle handleRemoved=null;  for (  Map.Entry<EPStatementAgentInstanceHandle,List<NamedWindowConsumerView>> entry : consumersNonContext.entrySet()) {    boolean foundAndRemoved=entry.getValue().remove(namedWindowConsumerView);    if ((foundAndRemoved) && (entry.getValue().size() == 0)) {      handleRemoved=entry.getKey();      break;    }  }  if (handleRemoved != null) {    Map<EPStatementAgentInstanceHandle,List<NamedWindowConsumerView>> newConsumers=NamedWindowUtil.createConsumerMap(isPrioritized);    newConsumers.putAll(consumersNonContext);    newConsumers.remove(handleRemoved);    consumersNonContext=newConsumers;  }}  }
class C{  public RpfFileSections(BinaryFile binFile){  parse(binFile);}  }
class C{  public static Object newInstanceSafe(final Class<?> klass){  try {    return klass.newInstance();  } catch (  InstantiationException e) {    return null;  }catch (  IllegalAccessException e) {    return null;  }}  }
class C{  PointF nextIrisPosition(PointF eyePosition,float eyeRadius,float irisRadius){  mEyePosition=eyePosition;  mEyeRadius=eyeRadius;  if (mIrisPosition == null) {    mIrisPosition=eyePosition;  }  mIrisRadius=irisRadius;  long nowMs=SystemClock.elapsedRealtime();  long elapsedTimeMs=nowMs - mLastUpdateTimeMs;  float simulationRate=(float)elapsedTimeMs / TIME_PERIOD_MS;  mLastUpdateTimeMs=nowMs;  if (!isStopped()) {    vy+=GRAVITY * simulationRate;  }  vx=applyFriction(vx,simulationRate);  vy=applyFriction(vy,simulationRate);  float x=mIrisPosition.x + (vx * mIrisRadius * simulationRate);  float y=mIrisPosition.y + (vy * mIrisRadius * simulationRate);  mIrisPosition=new PointF(x,y);  makeIrisInBounds(simulationRate);  return mIrisPosition;}  }
class C{  public static boolean isDiagonalWin(String[][] m,String t){  int count=0;  for (int i=0; i < m.length; i++) {    if (m[i][i] == t)     count++;    if (count == 3)     return true;  }  count=0;  for (int i=0, j=m[i].length - 1; j >= 0; j--, i++) {    if (m[i][j] == t)     count++;    if (count == 3)     return true;  }  return false;}  }
class C{  private SwaggerParameter parameterToSwaggerParameter(HashMap<String,SwaggerModel> models,Class parameter,Type genericParameterType,Annotation[] parameterAnnotation){  SwaggerParameter swaggerParameter=new SwaggerParameter();  swaggerParameter.setDataType(getTypeName(models,parameter,genericParameterType));  for (  Annotation paramAnnotation : parameterAnnotation) {    if (paramAnnotation instanceof QueryParam) {      swaggerParameter.setParamType(QUERY_TYPE);      swaggerParameter.setName(((QueryParam)paramAnnotation).value());    } else     if (paramAnnotation instanceof PathParam) {      swaggerParameter.setParamType(PATH_PARAM);      swaggerParameter.setName(((PathParam)paramAnnotation).value());      swaggerParameter.setRequired(true);    } else     if (paramAnnotation instanceof MatrixParam) {      swaggerParameter.setParamType(MATRIX_PARAM);      swaggerParameter.setName(((MatrixParam)paramAnnotation).value());    } else     if (paramAnnotation instanceof HeaderParam) {      swaggerParameter.setParamType(HEADER_PARAM);      swaggerParameter.setName(((HeaderParam)paramAnnotation).value());    } else     if (paramAnnotation instanceof FormParam) {      swaggerParameter.setParamType(FORM_PARAM);      swaggerParameter.setName(((FormParam)paramAnnotation).value());    } else     if (paramAnnotation instanceof CookieParam) {      swaggerParameter.setParamType(COOKIE);      swaggerParameter.setName(((CookieParam)paramAnnotation).value());    } else     if (paramAnnotation instanceof ApiParam) {      swaggerParameter.setRequired(((ApiParam)paramAnnotation).required());      swaggerParameter.setDescription(((ApiParam)paramAnnotation).value());      swaggerParameter.setDefaultValue(((ApiParam)paramAnnotation).defaultValue());      String allowableValues=((ApiParam)paramAnnotation).allowableValues();      if (allowableValues != null && !allowableValues.isEmpty()) {        swaggerParameter.setAllowableValues(parseAllowableValues(allowableValues));      }    }  }  return swaggerParameter;}  }
class C{  public JunctionStateData(StateHolder<S,E> state,Guard<S,E> guard){  Assert.notNull(state,"Holder must be set");  this.state=state;  this.guard=guard;}  }
class C{  public IndexShardRepository indexShardRepository(String repository){  RepositoryHolder holder=repositories.get(repository);  if (holder != null) {    return holder.indexShardRepository;  }  throw new RepositoryMissingException(repository);}  }
class C{  public JFileChooser(String currentDirectoryPath){  this(currentDirectoryPath,(FileSystemView)null);}  }
class C{  protected Schema addWhitespace(Schema schema){  schema.setPartitionKeyGroup(addWhitespace(schema.getPartitionKeyGroup()));  List<SchemaColumn> allSchemaColumns=new ArrayList<>();  allSchemaColumns.addAll(schema.getColumns());  allSchemaColumns.addAll(schema.getPartitions());  for (  SchemaColumn schemaColumn : allSchemaColumns) {    schemaColumn.setName(addWhitespace(schemaColumn.getName()));    schemaColumn.setType(addWhitespace(schemaColumn.getType()));    schemaColumn.setSize(schemaColumn.getSize() == null ? null : addWhitespace(schemaColumn.getSize()));    schemaColumn.setDefaultValue(schemaColumn.getDefaultValue() == null ? null : addWhitespace(schemaColumn.getDefaultValue()));  }  return schema;}  }
class C{  public void reset() throws IOException {  next=mark;}  }
class C{  public static double[] logs2probs(double[] a){  double max=a[maxIndex(a)];  double sum=0.0;  double[] result=new double[a.length];  for (int i=0; i < a.length; i++) {    result[i]=Math.exp(a[i] - max);    sum+=result[i];  }  normalize(result,sum);  return result;}  }
class C{  public void testWithoutSubquery() throws RepositoryException, QueryEvaluationException, TupleQueryResultHandlerException, MalformedQueryException {  final String query="SELECT ?i ?i_label ?i_class ?i_v1" + "WHERE {" + "?i <http://www.w3.org/2000/01/rdf-schema#label> ?i_label ."+ "?i a ?i_class ."+ "?i_class <http://www.w3.org/2000/01/rdf-schema#subClassOf>* <http://dragon-research.com/cham/model/model1#Model1Class> ."+ "OPTIONAL { ?i <http://dragon-research.com/cham/model/model1#name> ?i_v1 } ."+ "}"+ "ORDER BY ?i_label";  final RepositoryConnection conn=repository.getConnection();  final TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,query);  RdfCloudTripleStoreConnectionTest.CountTupleHandler countTupleHandler=new RdfCloudTripleStoreConnectionTest.CountTupleHandler();  tupleQuery.evaluate(countTupleHandler);  assertEquals(6,countTupleHandler.getCount());  conn.close();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public Matrix4x3f reflect(Vector3fc normal,Vector3fc point){  return reflect(normal.x(),normal.y(),normal.z(),point.x(),point.y(),point.z());}  }
class C{  public void remove(terminal sym) throws internal_error {  not_null(sym);  _elements.clear(sym.index());}  }
class C{  public static PrintJobAttributeSet unmodifiableView(PrintJobAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiablePrintJobAttributeSet(attributeSet);}  }
class C{  private static int supplementalHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  protected void addDefaultCaseCoveredCall(BytecodeInstruction v,InsnList instrumentation,int defaultCaseBranchId){  instrumentation.add(new LdcInsnNode(0));  instrumentation.add(new LdcInsnNode(Opcodes.IFEQ));  instrumentation.add(new LdcInsnNode(defaultCaseBranchId));  instrumentation.add(new LdcInsnNode(v.getInstructionId()));  instrumentation.add(new MethodInsnNode(Opcodes.INVOKESTATIC,EXECUTION_TRACER,"passedBranch","(IIII)V",false));}  }
class C{  public void sendTestMessage(XNetReply m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyReply(m,null);  return;}  }
class C{  private Path convertPath(Path path,URI newUri){  assert newUri != null;  if (path != null) {    URI pathUri=path.toUri();    try {      return new Path(new URI(pathUri.getScheme() != null ? newUri.getScheme() : null,pathUri.getAuthority() != null ? newUri.getAuthority() : null,pathUri.getPath(),null,null));    } catch (    URISyntaxException e) {      throw new IgniteException("Failed to construct secondary file system path from the primary file " + "system path: " + path,e);    }  } else   return null;}  }
class C{  public static Image gaussianBlurImage(Image image,float radius){  return Display.getInstance().gaussianBlurImage(image,radius);}  }
class C{  public static boolean isNativeFontSchemeSupported(){  return Display.impl.isNativeFontSchemeSupported();}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public CNode(int numAttributes){  m_numAttributes=numAttributes;}  }
class C{  public float[] toArray(){  return this.points;}  }
class C{  public void addExceptionMessages(Enumeration<?> messages){  while (messages.hasMoreElements()) {    ExceptionMessage m=(ExceptionMessage)messages.nextElement();    m_exceptionMessages.addElement(m);  }}  }
class C{  public Configuration(String domain,String apiKey,String from){  this.domain=domain;  this.apiKey=apiKey;  this.from=from;}  }
class C{  public static AsynchronousChannelProvider create(){  return new WindowsAsynchronousChannelProvider();}  }
class C{  public FunctionblockModel createFunctionblockModel(){  FunctionblockModelImpl functionblockModel=new FunctionblockModelImpl();  return functionblockModel;}  }
class C{  public void testValueOfDoublePos3(){  double a=12321237576.9878838;  BigDecimal result=BigDecimal.valueOf(a);  String res="12321237576.987885";  int resScale=6;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void test_optimizer(){  log.error("write test");}  }
class C{  public RaceControlPanel(){  add(goButton);  add(stopButton);}  }
class C{  public boolean isUplevelValue(){  if (!isSynthetic() || !isVariable() || isStatic()) {    return false;  }  String name=this.name.toString();  return name.startsWith(prefixVal) || name.startsWith(prefixLoc) || name.startsWith(prefixThis);}  }
class C{  public static boolean supportsAdd(int type){switch (type) {case Value.BYTE:case Value.DECIMAL:case Value.DOUBLE:case Value.FLOAT:case Value.INT:case Value.LONG:case Value.SHORT:    return true;default :  return false;}}  }
class C{  private void generateControllerBlock(String controller){  try {    JClassType controllerClass=getControllerClass(controller);    if (!controllerClassNames.containsKey(controller) && controllerClass != null) {      String genClass=new ControllerProxyCreator(context,controllerClass).create();      controllerClassNames.put(controller,genClass);    }  } catch (  Throwable e) {    throw new CruxGeneratorException("Error for register client event handler. Controller: [" + controller + "].",e);  }}  }
class C{  public String schemaName(){  return name();}  }
class C{  @DSComment("No action/impact") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.309 -0500",hash_original_method="7EAF111F5AA6799458B5BA4ED6EF193C",hash_generated_method="F3DE1CB784C5627EDBD69D821D89A075") public Exchanger(){  droidsafeData=new LinkedList<Object>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.923 -0500",hash_original_method="EA55CECCBAC2EAE8EDC221C89634D263",hash_generated_method="9662650A19DBD3BBFE05123312520AA9") public boolean acceptIncomingConnect(BluetoothDevice device){  if (DBG)   log("acceptIncomingConnect");  if (mService != null && isEnabled()) {    try {      return mService.acceptIncomingConnect(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public static String[] lsFilesRecursive(String directory,FilenameFilter filter) throws IOException {  File dir=new File(directory);  ArrayList<String> files=new ArrayList<>();  for (  File filepath : dir.listFiles(filter)) {    if (isFile(filepath.getAbsolutePath()))     files.add(filepath.getAbsolutePath()); else     if (isDirectory(filepath.getAbsolutePath()))     files.addAll(Arrays.asList(lsFilesRecursive(filepath.getAbsolutePath(),filter)));  }  return files.toArray(new String[files.size()]);}  }
class C{  public StrTokenizer reset(final String input){  reset();  if (input != null) {    this.chars=input.toCharArray();  } else {    this.chars=null;  }  return this;}  }
class C{  public Coin times(final long factor){  return multiply(factor);}  }
class C{  private Shape decodeInterior(int width,int height){  path.reset();  path.moveTo(1,1);  path.lineTo(width - 2,1);  path.lineTo(width - 2,height - 3);  path.lineTo(width - 3,height - 2);  path.lineTo(1,height - 2);  path.closePath();  return path;}  }
class C{  public static void removeView(Context context,View view){  if (context == null || view == null) {    throw new IllegalArgumentException("argument cannot be null.");  }  mWindowManager=getWindowManager(context);  mWindowManager.removeView(view);}  }
class C{  protected void readHeader(){  String id="";  for (int i=0; i < 6; i++) {    id+=(char)read();  }  if (!id.startsWith("GIF")) {    status=STATUS_FORMAT_ERROR;    return;  }  readLSD();  if (gctFlag && !err()) {    gct=readColorTable(gctSize);    bgColor=gct[bgIndex];  }}  }
class C{  public CopyAreaPerformance(){  setOpaque(true);}  }
class C{  boolean isNavigatable(int index){  if (!super.isNavigatable(index)) {    return getBufferedChar(index) == getDecimalSeparator();  }  return true;}  }
class C{  public static String readTextFile(InputStream is){  StringBuilder contents=new StringBuilder();  try {    BufferedReader input=new BufferedReader(new InputStreamReader(is));    try {      String line=null;      while ((line=input.readLine()) != null) {        contents.append(line);        contents.append(System.getProperty("line.separator"));      }    }  finally {      input.close();    }  } catch (  IOException ex) {    ex.printStackTrace();  }  return contents.toString();}  }
class C{  int doFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  return cipher.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public GemFireConfigException(String message){  super(message);}  }
class C{  public final void log(String tag,int level,String message){  log(null,0,null,tag,level,message);}  }
class C{  public static String tranDate2DateStr(Date date){  try {    SimpleDateFormat formatter2=new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());    formatter2.setTimeZone(timeZone);    return formatter2.format(date);  } catch (  Throwable e) {    Log.e(TAG,e.toString());    return "2014-01-01";  }}  }
class C{  public HashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  }  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  }  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  table=new Entry[capacity];  init();}  }
class C{  public void validate(){  if (this.getMcastPort() < MIN_MCAST_PORT || this.getMcastPort() > MAX_MCAST_PORT) {    throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_MCASTPORT_MUST_BE_AN_INTEGER_INCLUSIVELY_BETWEEN_0_AND_1.toLocalizedString(new Object[]{Integer.valueOf(MIN_MCAST_PORT),Integer.valueOf(MAX_MCAST_PORT)}));  }  LogWriterImpl.levelNameToCode(this.logLevel);  if (this.logFileSizeLimit < MIN_LOG_FILE_SIZE_LIMIT || this.logFileSizeLimit > MAX_LOG_FILE_SIZE_LIMIT) {    throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_LOGFILESIZELIMIT_MUST_BE_AN_INTEGER_BETWEEN_0_AND_1.toLocalizedString(new Object[]{Integer.valueOf(MIN_LOG_FILE_SIZE_LIMIT),Integer.valueOf(MAX_LOG_FILE_SIZE_LIMIT)}));  }  if (this.logDiskSpaceLimit < MIN_LOG_DISK_SPACE_LIMIT || this.logDiskSpaceLimit > MAX_LOG_DISK_SPACE_LIMIT) {    throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_LOGDISKSPACELIMIT_MUST_BE_AN_INTEGER_BETWEEN_0_AND_1.toLocalizedString(new Object[]{Integer.valueOf(MIN_LOG_DISK_SPACE_LIMIT),Integer.valueOf(MAX_LOG_DISK_SPACE_LIMIT)}));  }  parseEntityConfigXMLFile();}  }
class C{  public BatikTestDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  domImpl=null;  SAXParserFactory saxFactory=SAXParserFactory.newInstance();  try {    SAXParser saxParser=saxFactory.newSAXParser();    xmlReader=saxParser.getXMLReader();  } catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }  String xmlReaderClassName=xmlReader.getClass().getName();  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class domFactoryClass=classLoader.loadClass("org.apache.batik.dom.svg.SAXSVGDocumentFactory");    Constructor domFactoryConstructor=domFactoryClass.getConstructor(new Class[]{String.class});    domFactory=domFactoryConstructor.newInstance(new Object[]{xmlReaderClassName});    createDocument=domFactoryClass.getMethod("createDocument",new Class[]{String.class,java.io.InputStream.class});  } catch (  InvocationTargetException ex) {    throw new DOMTestIncompatibleException(ex.getTargetException(),null);  }catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  public int readTimeoutMillis(){  return readTimeout;}  }
class C{  protected void validateCommandLine() throws CommandException {}  }
class C{  @Override protected Light createNewLight(String systemName,String userName){  String addr=systemName.substring(getSystemPrefix().length() + 1);  Light l=new CbusLight(getSystemPrefix(),addr,memo.getTrafficController());  l.setUserName(userName);  return l;}  }
class C{  public Learner emptyClone(){  return new MikheevLearner();}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  protected String composeWarfightingSymCode(){  StringBuilder sb=new StringBuilder();  appendFieldValue(sb,this.getScheme(),1);  appendFieldValue(sb,this.getStandardIdentity(),1);  appendFieldValue(sb,this.getBattleDimension(),1);  appendFieldValue(sb,this.getStatus(),1);  appendFieldValue(sb,this.getFunctionId(),6);  appendFieldValue(sb,this.getSymbolModifier(),2);  appendFieldValue(sb,this.getCountryCode(),2);  appendFieldValue(sb,this.getOrderOfBattle(),1);  return sb.toString();}  }
class C{  public Boolean isZeroConfiguration(){  return zeroConfiguration;}  }
class C{  public RequestSpec<T_Response> param(final String key,final String value){  params.add(key,value);  return reset();}  }
class C{  public void abort(){  if (!mAborted) {    mAborted=true;    mPaused=false;    final Intent pauseAction=new Intent(DfuBaseService.BROADCAST_ACTION);    pauseAction.putExtra(DfuBaseService.EXTRA_ACTION,DfuBaseService.ACTION_ABORT);    mBroadcastManager.sendBroadcast(pauseAction);  }}  }
class C{  public void test_sssp_weightedGraph() throws Exception {  final SmallWeightedGraphProblem p=setupSmallWeightedGraphProblem();  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(null);    final IGASContext<SSSP.VS,SSSP.ES,Integer> gasContext=gasEngine.newGASContext(graphAccessor,new SSSP());    gasContext.setLinkType((URI)p.getFoafKnows());    gasContext.setLinkAttributeType((URI)p.getLinkWeight());    final IGASState<SSSP.VS,SSSP.ES,Integer> gasState=gasContext.getGASState();    gasState.setFrontier(gasContext,p.getV1());    gasContext.call();    assertEquals(0.0,gasState.getState(p.getV1()).dist());    assertEquals(100.0,gasState.getState(p.getV2()).dist());    assertEquals(100.0,gasState.getState(p.getV3()).dist());    assertEquals(150.0,gasState.getState(p.getV4()).dist());    assertEquals(175.0,gasState.getState(p.getV5()).dist());  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  public SessionNodeWrapper(SessionNode sessionNode){  super(sessionNode.getDisplayName());  this.sessionNode=sessionNode;  setNodeType(NodeType.SESSION);}  }
class C{  protected void fireVetoableChange(String propertyName,Object oldValue,Object newValue) throws java.beans.PropertyVetoException {  if (vetoableChangeSupport == null) {    return;  }  vetoableChangeSupport.fireVetoableChange(propertyName,oldValue,newValue);}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public static MosaicLevy createMosaicLevy(final MosaicId mosaicId){  return new MosaicLevy(MosaicTransferFeeType.Absolute,generateRandomAccount(),mosaicId,Quantity.fromValue(123));}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){  super.onPageScrolled(position,positionOffset,positionOffsetPixels);  for (int i=0; i < viewAnimations.size(); i++) {    viewAnimations.get(i).play(position,positionOffset);    viewAnimations.get(i).end(position - 1);  }}  }
class C{  public Date randomDate(){  if (random.nextInt(10) == 0) {    return null;  }  StringBuilder buff=new StringBuilder();  buff.append(getInt(10) + 2000);  buff.append('-');  int month=getInt(12) + 1;  if (month < 10) {    buff.append('0');  }  buff.append(month);  buff.append('-');  int day=getInt(28) + 1;  if (day < 10) {    buff.append('0');  }  buff.append(day);  return Date.valueOf(buff.toString());}  }
class C{  public OscBundle(){  messages=new ArrayList<OscMessage>();}  }
class C{  public void parse(InputSource input) throws SAXException, IOException {  setupParse();  parent.parse(input);}  }
class C{  @MediumTest public void testRequestLayout() throws Exception {  MockContext context=new MockContext2();  ListView listView=new ListView(context);  List<String> items=Lists.newArrayList("hello");  Adapter<String> adapter=new Adapter<String>(context,0,items);  listView.setAdapter(adapter);  int measureSpec=View.MeasureSpec.makeMeasureSpec(100,View.MeasureSpec.EXACTLY);  adapter.notifyDataSetChanged();  listView.measure(measureSpec,measureSpec);  listView.layout(0,0,100,100);  MockView childView=(MockView)listView.getChildAt(0);  childView.requestLayout();  childView.onMeasureCalled=false;  listView.measure(measureSpec,measureSpec);  listView.layout(0,0,100,100);  Assert.assertTrue(childView.onMeasureCalled);}  }
class C{  public static AxSf completeFolder(Map translatedIds,AxSf axsfQ,AxSf newAxSF,Locale locale,List changeFields,FieldFormat fieldFormat,boolean consolidacion) throws ParseException {  newAxSF=addTranslateAttributes(translatedIds,newAxSF);  SimpleDateFormat longFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(Keys.I18N_DATE_LONGFORMAT));  SimpleDateFormat shortFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(Keys.I18N_DATE_SHORTFORMAT));  if (changeFields != null) {    BookUseCase bookUseCase=new BookUseCase();    for (Iterator it=changeFields.iterator(); it.hasNext(); ) {      FlushFdrField flushFdrField=(FlushFdrField)it.next();      if (axsfQ instanceof AxSfIn) {        newAxSF=addField2AxSfIn(bookUseCase,flushFdrField,axsfQ,newAxSF,locale,longFormatter,shortFormatter,fieldFormat);      }      if (axsfQ instanceof AxSfOut) {        newAxSF=addField2AxSfOut(bookUseCase,flushFdrField,axsfQ,newAxSF,locale,longFormatter,shortFormatter,fieldFormat);      }      newAxSF=addField2AxSf(flushFdrField,newAxSF,longFormatter,shortFormatter,consolidacion);    }  }  newAxSF.setLocale(locale);  return newAxSF;}  }
class C{  public void updateBinaryStream(int columnIndex,java.io.InputStream x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public void addConfiguredProperty(Property property){  this.properties.add(property);}  }
class C{  public static final int createType(final Connection connection,final int moduleId,final String name,final int size,final Integer childPointerTypeId,final boolean signed,final BaseTypeCategory category) throws CouldntSaveDataException {  try {    final String query=String.format("INSERT INTO %s (module_id, id, name, size, pointer, signed, category) " + "VALUES (?, nextval('bn_base_types_id_seq'), ?, ?, ?, ?, ?) returning id",CTableNames.BASE_TYPES_TABLE);    final PreparedStatement statement=connection.prepareStatement(query);    try {      statement.setInt(1,moduleId);      statement.setString(2,name);      statement.setInt(3,size);      if (childPointerTypeId == null) {        statement.setNull(4,Types.INTEGER);      } else {        statement.setInt(4,childPointerTypeId);      }      statement.setBoolean(5,signed);      statement.setObject(6,category.toString(),Types.OTHER);      final ResultSet resultSet=statement.executeQuery();      if (resultSet.next()) {        return resultSet.getInt(1);      } else {        throw new CouldntSaveDataException("Empty result set while inserting base type.");      }    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ExternalInputInfo) {    ExternalInputInfo eii=(ExternalInputInfo)o;    return this.id.equals(eii.id) && this.name.equals(eii.name);  }  return false;}  }
class C{  protected void notifyClear(){  for (  ISharedObjectListener listener : listeners) {    listener.onSharedObjectClear(this);  }}  }
class C{  private Ed25519GroupElement toCoordinateSystem(final CoordinateSystem newCoordinateSystem){switch (this.coordinateSystem) {case P2:switch (newCoordinateSystem) {case P2:      return p2(this.X,this.Y,this.Z);default :    throw new IllegalArgumentException();}case P3:switch (newCoordinateSystem) {case P2:return p2(this.X,this.Y,this.Z);case P3:return p3(this.X,this.Y,this.Z,this.T);case CACHED:return cached(this.Y.add(this.X),this.Y.subtract(this.X),this.Z,this.T.multiply(Ed25519Field.D_Times_TWO));default :throw new IllegalArgumentException();}case P1xP1:switch (newCoordinateSystem) {case P2:return p2(this.X.multiply(this.T),this.Y.multiply(this.Z),this.Z.multiply(this.T));case P3:return p3(this.X.multiply(this.T),this.Y.multiply(this.Z),this.Z.multiply(this.T),this.X.multiply(this.Y));case P1xP1:return p1xp1(this.X,this.Y,this.Z,this.T);default :throw new IllegalArgumentException();}case PRECOMPUTED:switch (newCoordinateSystem) {case PRECOMPUTED:return precomputed(this.X,this.Y,this.Z);default :throw new IllegalArgumentException();}case CACHED:switch (newCoordinateSystem) {case CACHED:return cached(this.X,this.Y,this.Z,this.T);default :throw new IllegalArgumentException();}default :throw new UnsupportedOperationException();}}  }
class C{  public static void sort(Object[] array){  if (array.length > 1) {    Arrays.sort(array,INSTANCE);  }}  }
class C{  public boolean isOtherToWhiteSpace(){  return otherToWhiteSpace;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:35.339 -0500",hash_original_method="06D01573106AABBDA29C827B71F8CBAD",hash_generated_method="B6D030B70A5C7510AA28AA1FD161CB44") public static int smallestDigitsMccForMnc(int mcc){  MccEntry entry;  entry=entryForMcc(mcc);  if (entry == null) {    return 2;  } else {    return entry.smallestDigitsMnc;  }}  }
class C{  public LocalSocketAddress(String name,Namespace namespace){  this.name=name;  this.namespace=namespace;}  }
class C{  private static void merge(Map<String,Object> merged,Map<String,Object> attributes){  for (  HashMap.Entry<String,Object> newEntry : attributes.entrySet()) {    String key=newEntry.getKey();    if (key.equals(ChronixQueryParams.SOLR_VERSION_FIELD)) {      continue;    }    if (!merged.containsKey(key)) {      merged.put(key,new LinkedHashSet());    }    LinkedHashSet values=(LinkedHashSet)merged.get(key);    Object value=newEntry.getValue();    if (value instanceof Collection && !values.contains(value)) {      values.addAll((Collection)value);    } else     if (!values.contains(value)) {      values.add(value);    }  }}  }
class C{  private void prepareVolumeData() throws Exception {  s_logger.info("Preparing Volumes for FullCopyVolumeDetachedStateMigrationTest");  for (int i=0; i < INSTANCES_TO_CREATE; i++) {    Volume fullCopyVol=new Volume();    Volume sourceVol=new Volume();    URI fullCopyURI=URIUtil.createId(Volume.class);    URI sourceURI=URIUtil.createId(Volume.class);    fullCopyVol.setId(fullCopyURI);    fullCopyVol.setAssociatedSourceVolume(sourceURI);    fullCopyVol.setReplicaState(ReplicationState.DETACHED.name());    sourceVol.setId(sourceURI);    StringSet fullCopies=new StringSet();    fullCopies.add(fullCopyURI.toString());    sourceVol.setFullCopies(fullCopies);    _dbClient.createObject(fullCopyVol);    _dbClient.createObject(sourceVol);    _sourceFullCopyMap.put(sourceURI,fullCopyURI);  }}  }
class C{  @Override public void beforeFirst() throws SQLException {  try {    debugCodeCall("beforeFirst");    checkClosed();    if (result.getRowId() >= 0) {      resetResult();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public SpelExpressionAction(Expression expression){  Assert.notNull(expression,"Expression cannot be null");  this.expression=expression;  this.methods=new StateContextExpressionMethods(new StandardEvaluationContext());}  }
class C{  public DValue(long id){  init(VariableType.UNKNOWN,null,null,0,new Long(id));  setIsolateId(0);}  }
class C{  @CanIgnoreReturnValue V checkValue(@Nullable V value){  return value;}  }
class C{  private void packAllColumns(){  checkboxColumn.getColumn().pack();  imageColumn.getColumn().pack();  numberColumn.getColumn().pack();  nameColumn.getColumn().pack();  nameColumn.getColumn().setWidth(Math.min(nameColumn.getColumn().getWidth(),WIDTH_COL_NAME));  descriptionColumn.getColumn().pack();}  }
class C{  protected String paramString(){  String preferredSizeString=(isPreferredSizeSet() ? getPreferredSize().toString() : "");  String minimumSizeString=(isMinimumSizeSet() ? getMinimumSize().toString() : "");  String maximumSizeString=(isMaximumSizeSet() ? getMaximumSize().toString() : "");  String borderString=(border == null ? "" : (border == this ? "this" : border.toString()));  return super.paramString() + ",alignmentX=" + alignmentX+ ",alignmentY="+ alignmentY+ ",border="+ borderString+ ",flags="+ flags+ ",maximumSize="+ maximumSizeString+ ",minimumSize="+ minimumSizeString+ ",preferredSize="+ preferredSizeString;}  }
class C{  public boolean isMouseTrackingActive(){  return isDecsetInternalBitSet(DECSET_BIT_MOUSE_TRACKING_PRESS_RELEASE) || isDecsetInternalBitSet(DECSET_BIT_MOUSE_TRACKING_BUTTON_EVENT);}  }
class C{  public Builder addTokenFilter(Class<? extends TokenFilterFactory> factory,String... params) throws IOException {  return addTokenFilter(factory,paramsToMap(params));}  }
class C{  BigInteger copy(){  prepareJavaRepresentation();  int[] copyDigits=new int[numberLength];  System.arraycopy(digits,0,copyDigits,0,numberLength);  return new BigInteger(sign,numberLength,copyDigits);}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return false;}  }
class C{  private void validateUpdateIsPossible() throws TypeUpdateException, AtlasException {  for (  IDataType newType : transientTypes.values()) {    IDataType oldType=null;    try {      oldType=TypeSystem.this.getDataType(IDataType.class,newType.getName());    } catch (    TypeNotFoundException e) {      LOG.debug("No existing type %s found - update OK",newType.getName());    }    if (oldType != null) {      oldType.validateUpdate(newType);    }  }}  }
class C{  @Inline public void ensureClassInitialized(Class<?> c){  RVMType type=JikesRVMSupport.getTypeForClass(c);  if (!type.isInitialized()) {    if (type.isClassType()) {      RuntimeEntrypoints.initializeClassForDynamicLink(type.asClass());    } else {      type.resolve();      type.instantiate();      type.initialize();    }  }}  }
class C{  private String determineActiveMcc(final Cursor cursor){  if (cursor.moveToFirst()) {    final String activeMcc=cursor.getString(mColMcc);    cursor.moveToPrevious();    return activeMcc;  }  return null;}  }
class C{  public boolean isUpgradeSubscriptionPending(long subscriptionKey){  ArgumentValidator.notNull("subscriptionKey",String.valueOf(subscriptionKey));  return executeCheckForModifyOrUpgradeSubscriptionPending(Arrays.asList(TriggerType.UPGRADE_SUBSCRIPTION),subscriptionKey);}  }
class C{  void saveTable(Path saveTo) throws IOException {  if (!Files.isDirectory(saveTo.getParent()))   return;  ByteBuffer tableBuffer=ByteBuffer.allocateDirect(50 * 1024 * 1024);  Map<String,Object> tableMap=new TreeMap<>();  RoutingTable table=routingTableCOW;  List<Map<String,Object>> main=new ArrayList<>();  List<Map<String,Object>> replacements=new ArrayList<>();  table.stream().map(null).forEach(null);  tableMap.put("mainEntries",main);  tableMap.put("replacements",replacements);  ByteBuffer doubleBuf=ByteBuffer.wrap(new byte[8]);  doubleBuf.putDouble(0,dht.getEstimator().getRawDistanceEstimate());  tableMap.put("log2estimate",doubleBuf);  tableMap.put("timestamp",System.currentTimeMillis());  tableMap.put("oldKey",getRootID().getHash());  new BEncoder().encodeInto(tableMap,tableBuffer);  Path tempFile=Files.createTempFile(saveTo.getParent(),"saveTable","tmp");  try (SeekableByteChannel chan=Files.newByteChannel(tempFile,StandardOpenOption.WRITE,StandardOpenOption.SYNC)){    chan.write(tableBuffer);    chan.close();    Files.move(tempFile,saveTo,StandardCopyOption.ATOMIC_MOVE,StandardCopyOption.REPLACE_EXISTING);  }   ;}  }
class C{  protected StringBuffer rebuildListProperty(List<String> aList){  StringBuffer list=null;  if (aList != null) {    list=new StringBuffer();    for (    String toolKey : aList) {      list.append(toolKey).append(" ");    }  }  return list;}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  byte[] states=_hash._states;  int i=_index;  while (i-- > 0 && (states[i] != TPrimitiveHash.FULL))   ;  return i;}  }
class C{  public boolean hasMailClass(){  return super.hasAttribute(MAIL_CLASS);}  }
class C{  public void updateTalentRatings(){  teamOffTalent=getOffTalent();  teamDefTalent=getDefTalent();  teamPollScore=teamPrestige + getOffTalent() + getDefTalent();}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  public static int mapIsEmpty(Map<?,?> m){  return m.isEmpty() ? BooleanHelper.TRUE : -m.size();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_2__MORE_CODE_1:    return ((InternalEList<?>)getMoreCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void add(RelayObserver<T> o){  do {    State oldState=get();    State newState=oldState.add(o);    if (compareAndSet(oldState,newState)) {      onAdded.call(o);      break;    }  } while (true);}  }
class C{  private void populateTaskList(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){  Set<URI> groupSet=new HashSet<URI>();  addTask(taskList,source,taskId,operationType);  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {    BlockMirror mirror=entry.getKey();    Volume mirrorSource=entry.getValue();    if (source.isInCG() && null != taskList.getTaskList()) {      groupSet.add(mirrorSource.getConsistencyGroup());    }  }  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);  for (  BlockConsistencyGroup group : groups) {    addTask(taskList,group,taskId,operationType);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tSets the attribute index.","C",1,"-C <col>"));  newVector.addElement(new Option("\tSpecify the list of values to indicate. First and last are\n" + "\tvalid indexes (default last)","V",1,"-V <index1,index2-index4,...>"));  newVector.addElement(new Option("\tSet if new boolean attribute nominal.","N",0,"-N <index>"));  return newVector.elements();}  }
class C{  public boolean equals(String ns,String localPart){  String thisnamespace=getNamespaceURI();  return getLocalName().equals(localPart) && (((null != thisnamespace) && (null != ns)) ? thisnamespace.equals(ns) : ((null == thisnamespace) && (null == ns)));}  }
class C{  public void doLayout(){  for (int i=0; i < getComponentCount(); i++) {    Marker m=(Marker)getComponent(i);    m.updateLocation();  }  listener.caretUpdate(null);}  }
class C{  void show(String classname){  try {    footer_l.setText("");    serialversion_t.setText("");    if (classname.equals("")) {      return;    }    String s=serialSyntax(classname);    if (s != null) {      serialversion_t.setText(s);    } else {      footer_l.setText(Res.getText("NotSerializable",classname));    }  } catch (  ClassNotFoundException cnf) {    footer_l.setText(Res.getText("ClassNotFound",classname));  }}  }
class C{  public static String exportAscii(PGPPublicKey pgpKey) throws PGPException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  try (OutputStream os=new ArmoredOutputStream(out)){    pgpKey.encode(os);  } catch (  IOException ex) {    throw new PGPException("Failed to export PGP key",ex);  }  return out.toString();}  }
class C{  private boolean advanceToEligibleSample(){  boolean haveNext=rollingBuffer.peekSample(sampleInfoHolder);  if (needKeyframe) {    while (haveNext && !sampleInfoHolder.isSyncFrame()) {      rollingBuffer.skipSample();      haveNext=rollingBuffer.peekSample(sampleInfoHolder);    }  }  if (!haveNext) {    return false;  }  if (spliceOutTimeUs != Long.MIN_VALUE && sampleInfoHolder.timeUs >= spliceOutTimeUs) {    return false;  }  return true;}  }
class C{  public Long renamenx(final byte[] oldkey,final byte[] newkey){  checkIsInMulti();  client.renamenx(oldkey,newkey);  return client.getIntegerReply();}  }
class C{  public void dataStatusChanged(DataStatusEvent e){  if (m_disposing)   return;  log.info(e.getMessage());  String dbInfo=e.getMessage();  if (m_curTab != null && m_curTab.isQueryActive())   dbInfo="[ " + dbInfo + " ]";  statusBar.setStatusDB(dbInfo,e);  if (!isNested)   m_window.setTitle(getTitle());  if (e.getAD_Message() != null || e.getInfo() != null) {    StringBuffer sb=new StringBuffer();    String msg=e.getMessage();    if (msg != null && msg.length() > 0)     sb.append(Msg.getMsg(m_ctx,e.getAD_Message()));    String info=e.getInfo();    if (info != null && info.length() > 0) {      if (sb.length() > 0 && !sb.toString().trim().endsWith(":"))       sb.append(": ");      sb.append(info);    }    if (sb.length() > 0) {      int pos=sb.indexOf("\n");      if (pos != -1)       sb.replace(pos,pos + 1," - ");      setStatusLine(sb.toString(),e.isError());    }  }  if (e.isError() && !e.isConfirmed()) {    ADialog.error(m_curWindowNo,this,e.getAD_Message(),e.getInfo());    e.setConfirmed(true);    m_errorDisplayed=true;  } else   if (e.isWarning() && !e.isConfirmed()) {    ADialog.warn(m_curWindowNo,this,e.getAD_Message(),e.getInfo());    e.setConfirmed(true);  }  boolean firstRow=e.isFirstRow();  aFirst.setEnabled(!firstRow);  aPrevious.setEnabled(!firstRow);  boolean lastRow=e.isLastRow();  aNext.setEnabled(!lastRow);  aLast.setEnabled(!lastRow);  boolean changed=e.isChanged() || e.isInserting();  int changedColumn=e.getChangedColumn();  boolean inserting=e.isInserting();  if (e.getAD_Message() != null && e.getAD_Message().equals("Saved"))   changed=false;  boolean readOnly=m_curTab.isReadOnly();  boolean insertRecord=!readOnly;  if (insertRecord)   insertRecord=m_curTab.isInsertRecord();  aNew.setEnabled(((inserting && changedColumn > 0) || !inserting) && insertRecord);  aCopy.setEnabled(!changed && insertRecord);  aRefresh.setEnabled(!changed);  aDelete.setEnabled(!changed && !readOnly);  aDeleteSelection.setEnabled(!changed && !readOnly);  if (readOnly && m_curTab.isAlwaysUpdateField())   readOnly=false;  aIgnore.setEnabled(changed && !readOnly);  aSave.setEnabled(changed && !readOnly);  if (e.getTotalRows() == 0 && insertRecord) {    aNew.setEnabled(true);    aDelete.setEnabled(false);    aDeleteSelection.setEnabled(false);  }  aMulti.setPressed(!m_curGC.isSingleRow());  if (isFirstTab())   aHistory.setPressed(!m_curTab.isOnlyCurrentRows());  String trxInfo=m_curTab.getTrxInfo();  if (trxInfo != null)   statusBar.setInfo(trxInfo);  boolean canHaveAttachment=m_curTab.canHaveAttachment();  if (canHaveAttachment && e.isLoading() && m_curTab.getCurrentRow() > e.getLoadedRows())   canHaveAttachment=false;  if (canHaveAttachment && m_curTab.getRecord_ID() == -1)   canHaveAttachment=false;  if (canHaveAttachment) {    aAttachment.setEnabled(true);    aAttachment.setPressed(m_curTab.hasAttachment());    aChat.setEnabled(true);    aChat.setPressed(m_curTab.hasChat());  } else {    aAttachment.setEnabled(false);    aChat.setEnabled(false);  }  if (m_isPersonalLock)   aLock.setPressed(m_curTab.isLocked());  if (m_curWinTab instanceof VTabbedPane)   ((VTabbedPane)m_curWinTab).evaluate(e);}  }
class C{  @Override public void onMessage(final ClientMessage message){  ActiveMQMessage msg=ActiveMQMessage.createMessage(message,session.getCoreSession(),options);  if (individualACK) {    msg.setIndividualAcknowledge();  }  try {    msg.doBeforeReceive();  } catch (  Exception e) {    ActiveMQJMSClientLogger.LOGGER.errorPreparingMessageForReceipt(msg.getCoreMessage().toString(),e);    return;  }  if (transactedOrClientAck) {    try {      message.acknowledge();    } catch (    ActiveMQException e) {      ((ClientSessionInternal)session.getCoreSession()).markRollbackOnly();      ActiveMQJMSClientLogger.LOGGER.errorProcessingMessage(e);    }  }  try {    connection.getThreadAwareContext().setCurrentThread(false);    listener.onMessage(msg);  } catch (  RuntimeException e) {    ActiveMQJMSClientLogger.LOGGER.onMessageError(e);    if (!transactedOrClientAck) {      try {        if (individualACK) {          message.individualAcknowledge();        }        session.getCoreSession().rollback(true);        session.setRecoverCalled(true);      } catch (      Exception e2) {        ActiveMQJMSClientLogger.LOGGER.errorRecoveringSession(e2);      }    }  } finally {    connection.getThreadAwareContext().clearCurrentThread(false);  }  if (!session.isRecoverCalled() && !individualACK) {    try {      if (!consumer.isClosed() && !transactedOrClientAck) {        message.acknowledge();      }    } catch (    ActiveMQException e) {      ((ClientSessionInternal)session.getCoreSession()).markRollbackOnly();      ActiveMQJMSClientLogger.LOGGER.errorProcessingMessage(e);    }  }  session.setRecoverCalled(false);}  }
class C{  public FileDownloadConfiguration build(){  return new FileDownloadConfiguration(this);}  }
class C{  public static String generateRandomFinNumber(Delegator delegator,int length,boolean isId) throws GenericEntityException {  if (length > 19) {    length=19;  }  Random rand=new Random();  boolean isValid=false;  String number=null;  while (!isValid) {    number="";    for (int i=0; i < length; i++) {      int randInt=rand.nextInt(9);      number=number + randInt;    }    if (isId) {      int check=UtilValidate.getLuhnCheckDigit(number);      number=number + check;      if (checkFinAccountNumber(number)) {        isValid=checkIsNumberInDatabase(delegator,number);      }    } else {      isValid=true;    }  }  return number;}  }
class C{  public boolean isId(){  return false;}  }
class C{  public BitmapAjaxCallback(){  type(Bitmap.class).memCache(true).fileCache(true).url("");}  }
class C{  public void add(ScanResult scanResult){  int existingPosition=getPosition(scanResult.getDevice().getAddress());  if (existingPosition >= 0) {    mArrayList.set(existingPosition,scanResult);  } else {    mArrayList.add(scanResult);  }}  }
class C{  @Override protected void addCookieRequestHeader(final HttpState state,final HttpConnection conn) throws IOException, HttpException {}  }
class C{  public final void addItem(final int id,@StringRes final int titleId){  Item item=new Item(getContext(),id,titleId);  adapter.add(item);  adaptGridViewHeight();}  }
class C{  public static int nullSafeHashCode(byte[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + array[i];  }  return hash;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static WindowActionEvent createWindowClosedEvent(){  return new WindowActionEvent(null,WindowAction.CLOSED);}  }
class C{  public ItemCollectionPage(final BaseItemCollectionResponse response,final IItemCollectionRequestBuilder builder){  super(response,builder);}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public static boolean equal(double a,double b){  return (Math.abs(a - b) < EPSILON);}  }
class C{  public IntTable(IntTable t){  count=t.count;  table=new Entry[t.table.length];  for (int i=0; i < table.length; i++) {    Entry e=t.table[i];    Entry n=null;    if (e != null) {      n=new Entry(e.hash,e.key,e.value,null);      table[i]=n;      e=e.next;      while (e != null) {        n.next=new Entry(e.hash,e.key,e.value,null);        n=n.next;        e=e.next;      }    }  }}  }
class C{  public static PapeRequest createPapeRequest(){  return new PapeRequest();}  }
class C{  public ReilGraph(final List<ReilBlock> nodes,final List<ReilEdge> edges){  super(nodes,edges);  for (  final Object block : nodes) {    if (!(block instanceof ReilBlock)) {      throw new IllegalArgumentException("Error: Block list contains objects that are not ReilBlock objects");    }  }  for (  final Object block : edges) {    if (!(block instanceof ReilEdge)) {      throw new IllegalArgumentException("Error: Edge list contains objects that are not ReilEdge objects");    }  }}  }
class C{  void testAll() throws Exception {  KeyStore ks;  remove("x.jks");  remove("x.jceks");  remove("x.p12");  remove("x2.jceks");  remove("x2.jks");  remove("x.jks.p1.cert");  remove("x.jks");  remove("x.jks.p1.cert");  testOK("","-keystore x.jks -storepass changeit -keypass changeit -genkeypair -alias p1 -dname CN=olala");  testOK("","-keystore x.jks -storepass changeit -exportcert -alias p1 -file x.jks.p1.cert");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.getKey("p1","changeit".toCharArray()) != null,"key not DSA");  assertTrue(new File("x.jks.p1.cert").exists(),"p1 export err");  testOK("","-keystore x.jks -storepass changeit -delete -alias p1");  testOK("y\n","-keystore x.jks -storepass changeit -importcert -alias c1 -file x.jks.p1.cert");  testOK("","-keystore x.jks -storepass changeit -importcert -alias c2 -file x.jks.p1.cert -noprompt");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.getCertificate("c1") != null,"import c1 err");  byte[] encoded=ks.getCertificate("c1").getEncoded();  X509CertImpl certImpl=new X509CertImpl(encoded);  assertTrue(certImpl.getVersion() == 3,"Version is not 3");  testOK("","-keystore x.jks -storepass changeit -keypass changeit -genkeypair -alias p1 -dname CN=olala");  testOK("changeit\n","-keystore x.jks -changealias -alias p1 -destalias p11");  testOK("changeit\n","-keystore x.jks -changealias -alias c1 -destalias c11");  testOK("changeit\n\n","-keystore x.jks -keyclone -alias p11 -destalias p111");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(!ks.containsAlias("p1"),"there is no p1");  assertTrue(!ks.containsAlias("c1"),"there is no c1");  assertTrue(ks.containsAlias("p11"),"there is p11");  assertTrue(ks.containsAlias("c11"),"there is c11");  assertTrue(ks.containsAlias("p111"),"there is p111");  remove("x.jceks");  testOK("changeit\nchangeit\n\n","-keystore x.jceks -storetype JCEKS -genseckey -alias s1");  testFail("changeit\n\n","-keystore x.jceks -storetype JCEKS -genseckey -alias s11 -keysize 128");  testOK("changeit\n\n","-keystore x.jceks -storetype JCEKS -genseckey -keyalg DESede -alias s2");  testFail("changeit\n\n","-keystore x.jceks -storetype AES -genseckey -keyalg Rijndael -alias s3");  testOK("changeit\n\n","-keystore x.jceks -storetype JCEKS -genseckey -keyalg AES -alias s3 -keysize 128");  testOK("\n","-keystore x.jceks -storetype JCEKS -storepass changeit -genseckey -alias s4");  testOK("keypass\nkeypass\n","-keystore x.jceks -storetype JCEKS -storepass changeit -genseckey -alias s5");  testOK("bad\n\bad\nkeypass\nkeypass\n","-keystore x.jceks -storetype JCEKS -storepass changeit -genseckey -alias s6");  testFail("bad\n\bad\nbad\n","-keystore x.jceks -storetype JCEKS -storepass changeit -genseckey -alias s7");  testFail("bad\n\bad\nbad\nkeypass\n","-keystore x.jceks -storetype JCEKS -storepass changeit -genseckey -alias s7");  ks=loadStore("x.jceks","changeit","JCEKS");  assertTrue(ks.getKey("s1","changeit".toCharArray()).getAlgorithm().equalsIgnoreCase("DES"),"s1 is DES");  assertTrue(ks.getKey("s1","changeit".toCharArray()).getEncoded().length == 8,"DES is 56");  assertTrue(ks.getKey("s2","changeit".toCharArray()).getEncoded().length == 24,"DESede is 168");  assertTrue(ks.getKey("s2","changeit".toCharArray()).getAlgorithm().equalsIgnoreCase("DESede"),"s2 is DESede");  assertTrue(ks.getKey("s3","changeit".toCharArray()).getAlgorithm().equalsIgnoreCase("AES"),"s3 is AES");  assertTrue(ks.getKey("s4","changeit".toCharArray()).getAlgorithm().equalsIgnoreCase("DES"),"s4 is DES");  assertTrue(ks.getKey("s5","keypass".toCharArray()).getAlgorithm().equalsIgnoreCase("DES"),"s5 is DES");  assertTrue(ks.getKey("s6","keypass".toCharArray()).getAlgorithm().equalsIgnoreCase("DES"),"s6 is DES");  assertTrue(!ks.containsAlias("s7"),"s7 not created");  remove("x.jks");  remove("x.jceks");  testOK("changeit\nchangeit\n\n","-keystore x.jceks -storetype JCEKS -genkeypair -alias p1 -dname CN=Olala");  testOK("","-keystore x.jceks -storetype JCEKS -storepass changeit -importcert -alias c1 -file x.jks.p1.cert -noprompt");  ks=loadStore("x.jceks","changeit","JCEKS");  assertTrue(ks.size() == 2,"2 entries in JCEKS");  testFail("changeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -destalias pp");  testFail("changeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srckeypass changeit");  testFail("changeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -destkeypass changeit");  testOK("changeit\nchangeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 2,"2 entries in JKS");  testOK("changeit\nchangeit\ny\ny\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS");  ks=loadStore("x.jks","changeit","JKS");  testOK("changeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -noprompt");  assertTrue(err.indexOf("Warning") != -1,"noprompt will warn");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 2,"2 entries in JKS");  testOK("changeit\nchangeit\n\ns1\n\ns2\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 4,"4 entries in JKS");  remove("x.jks");  testOK("changeit\nchangeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias p1");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 1,"1 entries in JKS");  testOK("changeit\nchangeit\ny\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias p1");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 1,"1 entries in JKS");  testOK("changeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias p1 -noprompt");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 1,"1 entries in JKS");  testOK("changeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias p1 -destalias p2");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 2,"2 entries in JKS");  testOK("changeit\nchangeit\n\nnewalias\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias p1");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 3,"3 entries in JKS");  remove("x.jks");  testOK("changeit\nkeypass\nkeypass\n","-keystore x.jceks -storetype JCEKS -genkeypair -alias p2 -dname CN=Olala");  testOK("changeit\nchangeit\nchangeit\nkeypass\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias p2");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 1,"1 entries in JKS");  testOK("changeit\nchangeit\nkeypass\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias p2 -destalias p3 -destkeypass keypass2");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 2,"2 entries in JKS");  assertTrue(ks.getKey("p2","keypass".toCharArray()) != null,"p2 has old password");  assertTrue(ks.getKey("p3","keypass2".toCharArray()) != null,"p3 has new password");  remove("x.jks");  testOK("changeit\nchangeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias c1");  testOK("changeit\n\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias c1 -destalias c2");  assertTrue(err.indexOf("WARNING") != -1,"But will warn");  testOK("changeit\n\ny\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias c1 -destalias c2");  testOK("changeit\n\n\nc3\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias c1 -destalias c2");  ks=loadStore("x.jks","changeit","JKS");  assertTrue(ks.size() == 3,"3 entries in JKS");  remove("x.jks");  testOK("changeit\n\n","-keystore x.jceks -storetype JCEKS -genseckey -alias s1");  testOK("changeit\n\n","-keystore x.jceks -storetype JCEKS -genseckey -alias s2");  testOK("changeit\n","-keystore x.jceks -storetype JCEKS -delete -alias p2");  ks=loadStore("x.jceks","changeit","JCEKS");  assertTrue(ks.size() == 4,"4 entries in JCEKS");  testOK("changeit\nchangeit\nchangeit\n","-importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS -srcalias s1");  assertTrue(err.indexOf("not imported") != -1,"Not imported");  assertTrue(err.indexOf("Cannot store non-PrivateKeys") != -1,"Not imported");  remove("x.jks");  testOK("\n\n","-srcstorepass changeit -deststorepass changeit -importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS");  assertTrue(err.indexOf("s1 not") != -1,"s1 not");  assertTrue(err.indexOf("s2 not") != -1,"s2 not");  assertTrue(err.indexOf("c1 success") != -1,"c1 success");  assertTrue(err.indexOf("p1 success") != -1,"p1 success");  remove("x.jks");  testOK("yes\n","-srcstorepass changeit -deststorepass changeit -importkeystore -srckeystore x.jceks -srcstoretype JCEKS -destkeystore x.jks -deststoretype JKS");  remove("x.jks");  testFail("changeit\nchangeit\n","-keystore x.jks -genkeypair -alias p1 -dname CN=olala");  remove("x.jks");  testOK("changeit\nchangeit\n\n","-keystore x.jks -genkeypair -alias p1 -dname CN=olala");  remove("x.p12");  testOK("","-keystore x.p12 -storetype PKCS12 -storepass changeit -genkeypair -alias p0 -dname CN=olala");  testOK("changeit\n","-keystore x.p12 -storetype PKCS12 -genkeypair -alias p1 -dname CN=olala");  testOK("changeit\n","-keystore x.p12 -keypass changeit -storetype PKCS12 -genkeypair -alias p3 -dname CN=olala");  assertTrue(err.indexOf("Warning") == -1,"PKCS12 silent when keypass == storepass");  testOK("changeit\n","-keystore x.p12 -keypass another -storetype PKCS12 -genkeypair -alias p2 -dname CN=olala");  assertTrue(err.indexOf("Warning") != -1,"PKCS12 warning when keypass != storepass");  testFail("","-keystore x.p12 -storepass changeit -storetype PKCS12 -keypasswd -new changeit -alias p3");  testOK("","-keystore x.p12 -storepass changeit -storetype PKCS12 -changealias -alias p3 -destalias p33");  testOK("","-keystore x.p12 -storepass changeit -storetype PKCS12 -keyclone -alias p33 -destalias p3");  remove("x.p12");  testOK("","-keystore x.p12 -storetype PKCS12 -storepass changeit -genkeypair -alias p0 -dname CN=olala");  testOK("","-storepass changeit -keystore x.p12 -storetype PKCS12 -genkeypair -alias p1 -dname CN=olala");  testOK("","-storepass changeit -keystore x.p12 -keypass changeit -storetype PKCS12 -genkeypair -alias p3 -dname CN=olala");  assertTrue(err.indexOf("Warning") == -1,"PKCS12 silent when keypass == storepass");  testOK("","-storepass changeit -keystore x.p12 -keypass another -storetype PKCS12 -genkeypair -alias p2 -dname CN=olala");  assertTrue(err.indexOf("Warning") != -1,"PKCS12 warning when keypass != storepass");  remove("x.jks");  remove("x.jceks");  remove("x.p12");  remove("x2.jceks");  remove("x2.jks");  remove("x.jks.p1.cert");}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void saveOffsetInExternalStore(String topic,int partition,long offset){  try {    FileWriter writer=new FileWriter(storageName(topic,partition),false);    BufferedWriter bufferedWriter=new BufferedWriter(writer);    bufferedWriter.write(offset + "");    bufferedWriter.flush();    bufferedWriter.close();  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  }}  }
class C{  public static boolean isSameLength(final short[] array1,final short[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public static String joinObjects(String sep,Iterable<?> l){  return sepList(sep,l,-1);}  }
class C{  public Boolean isChngAllwdInd(){  return chngAllwdInd;}  }
class C{  public ImportDeclaration newImportDeclaration(){  ImportDeclaration result=new ImportDeclaration(this);  return result;}  }
class C{  public void onCreate(SQLiteDatabase paramSQLiteDatabase){  int numSchemas=sSchemas.length;  for (int i=0; i < numSchemas; i++) {    try {      String[][] schema=(String[][])sSchemas[i];      paramSQLiteDatabase.execSQL(createTableQueryFromArray(sTables[i],schema));    } catch (    Exception localException) {      while (true)       localException.printStackTrace();    }  }}  }
class C{  protected void insertUniqueEdge(Edge e){  Edge existingEdge=edgeList.findEqualEdge(e);  if (existingEdge != null) {    Label existingLabel=existingEdge.getLabel();    Label labelToMerge=e.getLabel();    if (!existingEdge.isPointwiseEqual(e)) {      labelToMerge=new Label(e.getLabel());      labelToMerge.flip();    }    existingLabel.merge(labelToMerge);    int mergeDelta=depthDelta(labelToMerge);    int existingDelta=existingEdge.getDepthDelta();    int newDelta=existingDelta + mergeDelta;    existingEdge.setDepthDelta(newDelta);  } else {    edgeList.add(e);    e.setDepthDelta(depthDelta(e.getLabel()));  }}  }
class C{  public void expand(S1Angle minRadius,int maxLevelDiff){  int minLevel=S2CellId.MAX_LEVEL;  for (  S2CellId id : this) {    minLevel=Math.min(minLevel,id.level());  }  int radiusLevel=S2Projections.MIN_WIDTH.getMaxLevel(minRadius.radians());  if (radiusLevel == 0 && minRadius.radians() > S2Projections.MIN_WIDTH.getValue(0)) {    expand(0);  }  expand(Math.min(minLevel + maxLevelDiff,radiusLevel));}  }
class C{  static <T>GeneralRange<T> all(Comparator<? super T> comparator){  return new GeneralRange<T>(comparator,false,null,OPEN,false,null,OPEN);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + min+ ","+ max+ ")";}  }
class C{  @Deprecated public void reset(){  flush();}  }
class C{  @Override public int size(){  return size;}  }
class C{  public static byte[] generateBytes(int length){  byte[] bytes=new byte[length];  for (int i=0; i < length; i++) {    bytes[i]=(byte)(i & 0xff);  }  return bytes;}  }
class C{  protected AbstractMRReply newReply(){  return new XBeeReply();}  }
class C{  private void parseWildCards(){  if (fPattern.startsWith("*"))   fHasLeadingStar=true;  if (fPattern.endsWith("*")) {    if (fLength > 1 && fPattern.charAt(fLength - 2) != '\\') {      fHasTrailingStar=true;    }  }  Vector<String> temp=new Vector<String>();  int pos=0;  StringBuffer buf=new StringBuffer();  while (pos < fLength) {    char c=fPattern.charAt(pos++);switch (c) {case '\\':      if (pos >= fLength) {        buf.append(c);      } else {        char next=fPattern.charAt(pos++);        if (next == '*' || next == '?' || next == '\\') {          buf.append(next);        } else {          buf.append(c);          buf.append(next);        }      }    break;case '*':  if (buf.length() > 0) {    temp.addElement(buf.toString());    fBound+=buf.length();    buf.setLength(0);  }break;case '?':buf.append(fSingleWildCard);break;default :buf.append(c);}}if (buf.length() > 0) {temp.addElement(buf.toString());fBound+=buf.length();}fSegments=new String[temp.size()];temp.copyInto(fSegments);}  }
class C{  public final int elementAt(int i){  return m_map[i];}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.EVENT__NAME:    setName((String)newValue);  return;case FunctionblockPackage.EVENT__PROPERTIES:getProperties().clear();getProperties().addAll((Collection<? extends Property>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Matrix4x3d m12(double m12){  this.m12=m12;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public ToStringBuilder append(String fieldName,float[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  @Override public void stopHook(){}  }
class C{  public void delegateLoadingOf(String classname){  if (classname.endsWith("."))   notDefinedPackages.addElement(classname); else   notDefinedHere.put(classname,this);}  }
class C{  public List<Node> listAvailableCrossoverNodes(Node node,Class<?> type){  List<Node> result=new ArrayList<Node>();  if (type.isAssignableFrom(node.getReturnType())) {    result.add(node);  }  for (int i=0; i < node.getNumberOfArguments(); i++) {    result.addAll(listAvailableCrossoverNodes(node.getArgument(i),type));  }  return result;}  }
class C{  public void invalidateHeaders(){  mHeaderProvider.invalidate();  mHeaderRects.clear();}  }
class C{  @Override public void onRemoteOperationFinish(RemoteOperation operation,RemoteOperationResult result){  super.onRemoteOperationFinish(operation,result);  if (result.isSuccess() || (operation instanceof GetSharesForFileOperation && result.getCode() == RemoteOperationResult.ResultCode.SHARE_NOT_FOUND)) {    Log_OC.d(TAG,"Refreshing view on successful operation or finished refresh");    refreshSharesFromStorageManager();  }  if (operation instanceof CreateShareViaLinkOperation && result.isSuccess()) {    String link=((OCShare)(result.getData().get(0))).getShareLink();    Log_OC.d(TAG,"Share link = " + link);    Intent intentToShareLink=new Intent(Intent.ACTION_SEND);    intentToShareLink.putExtra(Intent.EXTRA_TEXT,link);    intentToShareLink.setType("text/plain");    String[] packagesToExclude=new String[]{getPackageName()};    DialogFragment chooserDialog=ShareLinkToDialog.newInstance(intentToShareLink,packagesToExclude);    chooserDialog.show(getSupportFragmentManager(),FTAG_CHOOSER_DIALOG);  }  if (operation instanceof UnshareOperation && result.isSuccess() && getEditShareFragment() != null) {    getSupportFragmentManager().popBackStack();  }  if (operation instanceof UpdateSharePermissionsOperation && getEditShareFragment() != null && getEditShareFragment().isAdded()) {    getEditShareFragment().onUpdateSharePermissionsFinished(result);  }}  }
class C{  public static Document createXMLDtrValidationList(ValidationResults results,int initRow,int enabled,int typeBusc,Locale locale,String name,String ref,String i18nTitle,List fieldsInfo,String caseSensitive){  Document doc=createDocument(initRow,results,RBUtil.getInstance(locale).getProperty(i18nTitle),name,ref,fieldsInfo,locale,caseSensitive,0,0);  Element root=doc.getRootElement();  Element nodeList=root.addElement(XML_NODELIST_TEXT);  if (results.getResults().isEmpty()) {    addNode(Integer.MIN_VALUE,"","","",null,"",-1,"",nodeList,ref);  } else {    Object object=null;    for (Iterator it=results.getResults().iterator(); it.hasNext(); ) {      object=it.next();      if (object instanceof ScrTypeadm || object instanceof ScrTypeadmeu || object instanceof ScrTypeadmgl|| object instanceof ScrTypeadmct) {        addNodeAdm(object,ref,nodeList);      } else       if (object instanceof ScrOrg || object instanceof ScrOrgeu || object instanceof ScrOrggl|| object instanceof ScrOrgct) {        addNodeOrg(object,ref,nodeList);      }    }  }  return doc;}  }
class C{  private void internalDifference(CharSet that){  chars=doIntersection(that.doComplement());}  }
class C{  public static StorageProcessor parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageProcessor object=new StorageProcessor();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageProcessor".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageProcessor)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list2=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","uniqueIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUniqueIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","spIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list2.add(null);        reader.next();      } else {        list2.add(reader.getElementText());      }      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","spIdentifier").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list2.add(null);              reader.next();            } else {              list2.add(reader.getElementText());            }          } else {            loopDone2=true;          }        }      }      object.setSpIdentifier((java.lang.String[])list2.toArray(new java.lang.String[list2.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public boolean isProjected(){  return projected;}  }
class C{  private void stepInput(final Port port){  final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);  if (!receivingPipe.isReading()) {    receivingPipe.beginRead();  }  if (receivingPipe.canTransfer()) {    process(receivingPipe.read());    receivingPipe.beginRead();  }}  }
class C{  public static String toUpperCase(final String value){  return (value == null ? null : value.toUpperCase());}  }
class C{  public int locals(int pos,int offset,int num){  return typeInfoArray(pos,offset,num,true);}  }
class C{  public void put(int keyAddress,int valueAddress){  map.put(keyAddress,valueAddress);}  }
class C{  public int span(final CharSet s,int from){  final int length=length();  if (s.size() == 0)   return 0;  final char[] a=array;  if (from < 0)   from=0;  int i=from - 1;  while (++i < length)   if (!s.contains(a[i]))   break;  return i - from;}  }
class C{  public StackBlurFilter(int radius){  this(radius,3);}  }
class C{  public void readRow() throws CarbonSortKeyAndGroupByException {  if (prefetch) {    fillDataForPrefetch();  } else   if (isSortTempFileCompressionEnabled) {    if (bufferRowCounter >= bufferSize) {      try {        new DataFetcher(false).call();        bufferRowCounter=0;      } catch (      Exception e) {        LOGGER.error(e);        throw new CarbonSortKeyAndGroupByException(tempFile + " Problem while reading",e);      }    }    prefetchRecordsProceesed++;    returnRow=currentBuffer[bufferRowCounter++];  } else {    Object[] outRow=getRowFromStream();    this.returnRow=outRow;  }}  }
class C{  public DomainModelException(String message){  super(message);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static CreateStatement orIgnore(CharSequence table){  return produce(table,"IGNORE");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.selectionListeners.add(listener);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public boolean isStrict(){  return detail.isStrict();}  }
class C{  public RyaStatementWritable(RyaStatement ryaStatement,RyaTripleContext ryaContext){  this(ryaContext);  this.ryaStatement=ryaStatement;}  }
class C{  @Override public void addHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("Provided listener is null");  }  if (listeners == null) {    listeners=new ArrayList<HandshakeCompletedListener>();  }  listeners.add(listener);}  }
class C{  public Xid[] recover(int flag) throws XAException {  return recover(this.underlyingConnection,flag);}  }
class C{  @Override public boolean isResetted(){  return (!reset && !scrolling && !inertia&& !accelerometer&& !sensorialRotation);}  }
class C{  public static IntSextad serializableInstance(){  return new IntSextad(0,1,2,3,4,5);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  if (!SVGUtilities.matchUserAgent(e,ctx.getUserAgent()))   return null;  CompositeGraphicsNode gn=buildCompositeGraphicsNode(ctx,e,null);  associateSVGContext(ctx,e,gn);  return gn;}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public SynchronizedStatement newSynchronizedStatement(){  return new SynchronizedStatement(this);}  }
class C{  public HMAC(MessageDigest digest,byte[] key){  this(digest,64,key);}  }
class C{  public int type(){  return type;}  }
class C{  public long sizeInBytes(){  return (long)file.numBuffers() * (long)BUFFER_SIZE;}  }
class C{  private static boolean stripWhitespace(InlineBox iB,boolean collapseLeading){  IdentValue whitespace=iB.getStyle().getIdent(CSSName.WHITE_SPACE);  String text=iB.getText();  text=collapseWhitespace(iB,whitespace,text,collapseLeading);  boolean collapseNext=(text.endsWith(SPACE) && (whitespace == IdentValue.NORMAL || whitespace == IdentValue.NOWRAP || whitespace == IdentValue.PRE));  iB.setText(text);  if (text.trim().equals("")) {    if (whitespace == IdentValue.NORMAL || whitespace == IdentValue.NOWRAP) {      iB.setRemovableWhitespace(true);    } else     if (whitespace == IdentValue.PRE) {      iB.setRemovableWhitespace(false);    } else     if (text.indexOf(EOL) < 0) {      iB.setRemovableWhitespace(true);    }  }  return text.equals("") ? collapseLeading : collapseNext;}  }
class C{  protected StatusImpl(){  super();}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("jrun4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JRun4xStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("jrun4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JRun4xStandaloneLocalConfigurationCapability.class);}  }
class C{  public <T>T findAndTransform(TupleVisitor<E,T> visitor){  for (  List<E> tuple : tuples) {    T transformedTuple=visitor.apply(tuple);    if (transformedTuple != null) {      return transformedTuple;    }  }  return null;}  }
class C{  @RequestMapping(value="/SAML2/IDPSSO/{tenant:.*}") public void ssoBindingError(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletResponse response) throws IOException {  logger.info("IDP SSO binding error! The client locale is " + locale.toString() + ", tenant is "+ tenant);  ssoDefaultTenantError(locale,response);}  }
class C{  public void triangulate(PolygonSet ps){  _triangulations.clear();  _triangulations.addAll(ps.getPolygons());  start();}  }
class C{  public Blood(final String clazz){  this(clazz,Rand.rand(4));}  }
class C{  protected void computeParameters(){  Debug.message("proj","LLXY.computeParameters()");  super.computeParameters();  hy=height / 2;  wx=width / 2;  cLon=ProjMath.radToDeg(centerX);  cLat=ProjMath.radToDeg(centerY);  ppd=world.x / 360f;  double latLimit=90 - (hy / ppd);  if (latLimit < 0.0f)   latLimit=0.0f;  if (cLat > latLimit) {    cLat=latLimit;    centerY=ProjMath.degToRad(cLat);  } else   if (cLat < -latLimit) {    cLat=-latLimit;    centerY=ProjMath.degToRad(cLat);  }  cLonRad=Math.toRadians(cLon);  if (Debug.debugging("llxy")) {    Debug.output("LLXY.computeParameters: with center lat:" + cLat + ", lon:"+ cLon+ " | width:"+ width+ ", height:"+ height+ " | scale:"+ scale);  }}  }
class C{  public static int startsWith(String[] searchStrings,String text){  int index=-1;  for (int i=0; i < searchStrings.length; i++) {    if (text.startsWith(searchStrings[i])) {      if (index == -1 || searchStrings[i].length() > searchStrings[index].length())       index=i;    }  }  return index;}  }
class C{  public void addDummyLunPath(HDSApiClient client,BlockObject volume) throws Exception {  StorageSystem system=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  String systemObjectId=HDSUtils.getSystemObjectID(system);  ReentrantLock lock=null;  try {    locker.acquireLock(systemObjectId,HDSConstants.LOCK_WAIT_SECONDS);    lock=getLock(systemObjectId);    lock.lock();    log.info("Acquired Lock to add lun path");    HostStorageDomain hsd=getDummyHSDFromStorageSystem(client,systemObjectId);    if (null == hsd) {      log.info("Creating dummy HSD for ShadowImage");      URIQueryResultList storagePortURIs=new URIQueryResultList();      dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(system.getId()),storagePortURIs);      StoragePort storagePort=null;      Iterator<URI> storagePortsIter=storagePortURIs.iterator();      while (storagePortsIter.hasNext()) {        URI storagePortURI=storagePortsIter.next();        storagePort=dbClient.queryObject(StoragePort.class,storagePortURI);        if (storagePort != null && !storagePort.getInactive()) {          break;        }      }      if (storagePort != null) {        String portId=HDSUtils.getPortID(storagePort);        hsd=client.getHDSApiExportManager().addHostStorageDomain(systemObjectId,portId,HDSConstants.HOST_GROUP_DOMAIN_TYPE,null,HDSConstants.DUMMY_HSD,null,null,system.getModel());        log.info("Created dummy HSD on {} portid",portId);      }    }    List<FreeLun> freeLunList=client.getHDSApiExportManager().getFreeLUNInfo(systemObjectId,hsd.getObjectID());    log.debug("freeLunList.size :{}",freeLunList.size());    log.debug("Free lun:{}",freeLunList.get(0).getLun());    Map<String,String> deviceLunList=new HashMap<String,String>();    deviceLunList.put(volume.getNativeId(),freeLunList.get(0).getLun());    client.getHDSApiExportManager().addLUN(systemObjectId,hsd.getPortID(),hsd.getDomainID(),deviceLunList,system.getModel());    log.info("Completed addDummyLunPath method");  }  finally {    if (lock != null) {      lock.unlock();      log.info("Released Lock to add lun path");    }    locker.releaseLock(systemObjectId);  }}  }
class C{  public static ActivityFacilities createFacilitiesFromPlans(Population population){  ActivityFacilitiesFactory aff=new ActivityFacilitiesFactoryImpl();  ActivityFacilities facilities=FacilitiesUtils.createActivityFacilities();  for (  Person person : population.getPersons().values()) {    for (    Plan plan : person.getPlans()) {      Id<Person> personId=person.getId();      for (      PlanElement planElement : plan.getPlanElements()) {        if (planElement instanceof Activity) {          Activity activity=(Activity)planElement;          Coord coord=activity.getCoord();          if (coord == null) {            throw new NullPointerException("Activity does not have any coordinates.");          }          String activityType=activity.getType();          Integer i=1;          Id<ActivityFacility> facilityId=Id.create(activityType + "_" + personId.toString()+ "_"+ i.toString(),ActivityFacility.class);          while (facilities.getFacilities().containsKey(facilityId)) {            i++;            facilityId=Id.create(activityType + "_" + personId.toString()+ "_"+ i.toString(),ActivityFacility.class);          }          ActivityFacility facility=aff.createActivityFacility(facilityId,activity.getCoord());          facility.addActivityOption(aff.createActivityOption(activityType));          facilities.addActivityFacility(facility);        }      }    }  }  return facilities;}  }
class C{  public synchronized void append(LoggingEvent event){  if (hold) {    list.add(event);  } else {    super.append(event);  }}  }
class C{  public void removeListener(ExceptionListener listener){  listeners.remove(listener);}  }
class C{  public void retrieveXMLMetaData(Integer modelInternalId,boolean forcedModelRefresh,long intervalLengthInMillis) throws AdeException {  m_intervalLengthInMillis=intervalLengthInMillis;  if (m_currentModelInternalId.equals(modelInternalId) || forcedModelRefresh || m_isMetaDataStale) {    IDataStoreModels<IMainScorer> modelsApi=Ade.getAde().getDataStore().models();    List<IModelMetaData> modelMetaDataList=modelsApi.getModelList();    for (    IModelMetaData modelMetaData : modelMetaDataList) {      if (modelMetaData.getModelInternalId().equals(modelInternalId)) {        m_analysisGroup=modelMetaData.getGroupName();        if (!m_currentModelInternalId.equals(modelInternalId)) {          m_currentModelInternalId=modelInternalId;          m_gc.setTimeInMillis(modelMetaData.getCreationDate().getTime());          m_modelCreationDate=s_dataTypeFactory.newXMLGregorianCalendar(m_gc);          String modelVersion=modelMetaData.getAdeVersion().toString();          if (isModelVersionSupported(modelVersion)) {            IModel currentModelForAnalysisGroup=modelsApi.loadModel(modelInternalId);            IMainScorer modelMainScorer=(IMainScorer)currentModelForAnalysisGroup;            IModelMetaData currentModelMetaData=currentModelForAnalysisGroup.getModelMetaData();            String[] commandLineArguments=currentModelMetaData.getCommandLineArguments();            Train train=new Train();            train.parseAdeExtArgs(commandLineArguments);            Date modelStart, modelEnd;            if (train.getStartDateTime() != null) {              modelStart=train.getStartDateTime().toDate();            } else {              modelStart=modelMetaData.getStartTime();            }            if (train.getEndDateTime() != null) {              modelEnd=train.getEndDateTime().toDate();            } else {              modelEnd=modelMetaData.getEndTime();            }            long trainDurationInMillis=modelEnd.getTime() - modelStart.getTime();            m_trainingLengthInDays=(int)(trainDurationInMillis / DateTimeUtils.MILLIS_IN_DAY);            m_limitedModelIndicator=ExtLimitedModelIndicator.getLimitedModelIndicator(modelMainScorer);            m_isMetaDataStale=false;          } else {            m_trainingLengthInDays=NOT_AVAILABLE;            m_limitedModelIndicator=ExtLimitedModelIndicator.Unknown;          }        }        break;      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.320 -0500",hash_original_method="B50D7EE39281F850FBFCC110ACB58D68",hash_generated_method="E6A68EB3D0C385C7DC5941B47EA8AB35") public boolean allowsAllContentTypes(){  if (mediaRange == null)   return false; else   return 1 == (mediaRange.type.compareTo(STAR));}  }
class C{  public AbstractApplicationAction(Application app){  this.app=app;  installApplicationListeners(app);  updateApplicationEnabled();}  }
class C{  public LinearTransfer(float slope,float intercept){  this.slope=slope;  this.intercept=intercept;}  }
class C{  private final boolean isInDestroyingThread(){  return this.partitionedRegion.locallyDestroyingThread == Thread.currentThread();}  }
class C{  public void createErrorDialog(String message,int code){  IStatus status=new Status(IStatus.ERROR,ID,code,message,null);  StatusManager.getManager().handle(status,StatusManager.SHOW | StatusManager.LOG);}  }
class C{  public DD sqr(){  return this.multiply(this);}  }
class C{  public static char high(int uc){  assert neededFor(uc);  return (char)(0xd800 | (((uc - UCS4_MIN) >> 10) & 0x3ff));}  }
class C{  @Override public void writeText(Object text,String componentPropertyName) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  closeStartIfNecessary();  String textStr=text.toString();  if (dontEscape) {    writer.write(textStr);  } else   if (isPartial || !writingCdata) {    ensureTextBufferCapacity(textStr);    HtmlUtils.writeText(writer,escapeUnicode,escapeIso,buffer,textStr,textBuffer);  } else {    assert writingCdata;    int textLen=textStr.length();    if (textLen > cdataTextBufferSize) {      writeEscaped(textStr.toCharArray(),0,textLen);    } else     if (textLen >= 16) {      textStr.getChars(0,textLen,cdataTextBuffer,0);      writeEscaped(cdataTextBuffer,0,textLen);    } else {      for (int i=0; i < textLen; i++) {        cdataTextBuffer[i]=textStr.charAt(i);      }      writeEscaped(cdataTextBuffer,0,textLen);    }  }}  }
class C{  public static final double[][] minus(final double[][] m1,final double[][] m2){  return minusEquals(copy(m1),m2);}  }
class C{  public static void i(String tag,String s){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,s);}  }
class C{  public boolean allowMultipleAdditions(String systemName){  return true;}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  return recommendation.getItems().isEmpty() ? 0.0 : 1.0;}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  if (e == null)   throw new NullPointerException();  long nanos=unit.toNanos(timeout);  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(new Node<E>(e));    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();  return true;}  }
class C{  protected int engineGetKeySize(Key key) throws InvalidKeyException {  return 56;}  }
class C{  public boolean isSetGui(){  return this.gui != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:30.626 -0500",hash_original_method="06417D4703E772AA57E4535D9CA52E2C",hash_generated_method="99B4ACAFFAB3664C2AC840E93AE48F1B") public boolean removeSubTask(int taskId,int subTaskIndex) throws SecurityException {  try {    return ActivityManagerNative.getDefault().removeSubTask(taskId,subTaskIndex);  } catch (  RemoteException e) {    return false;  }}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public boolean isShowProfileLine(){  return this.showProfileLine;}  }
class C{  public static float multiplyQuadrature(float inphaseA,float quadratureA,float inphaseB,float quadratureB){  return (quadratureA * inphaseB) + (inphaseA * quadratureB);}  }
class C{  private void postPlugin(final boolean isPing) throws IOException {  String pluginName=modName;  MinecraftServer server=FMLCommonHandler.instance().getMinecraftServerInstance();  boolean onlineMode=server.isServerInOnlineMode();  String pluginVersion=modVersion;  String serverVersion;  if (server.isDedicatedServer()) {    serverVersion="MinecraftForge (MC: " + server.getMinecraftVersion() + ")";  } else {    serverVersion="MinecraftForgeSSP (MC: " + server.getMinecraftVersion() + ")";  }  int playersOnline=server.getCurrentPlayerCount();  StringBuilder json=new StringBuilder(1024);  json.append('{');  appendJSONPair(json,"guid",guid);  appendJSONPair(json,"plugin_version",pluginVersion);  appendJSONPair(json,"server_version",serverVersion);  appendJSONPair(json,"players_online",Integer.toString(playersOnline));  String osname=System.getProperty("os.name");  String osarch=System.getProperty("os.arch");  String osversion=System.getProperty("os.version");  String java_version=System.getProperty("java.version");  int coreCount=Runtime.getRuntime().availableProcessors();  if (osarch.equals("amd64")) {    osarch="x86_64";  }  appendJSONPair(json,"osname",osname);  appendJSONPair(json,"osarch",osarch);  appendJSONPair(json,"osversion",osversion);  appendJSONPair(json,"cores",Integer.toString(coreCount));  appendJSONPair(json,"auth_mode",onlineMode ? "1" : "0");  appendJSONPair(json,"java_version",java_version);  if (isPing) {    appendJSONPair(json,"ping","1");  }  json.append('}');  URL url=new URL(BASE_URL + String.format(REPORT_URL,urlEncode(pluginName)));  URLConnection connection;  if (isMineshafterPresent()) {    connection=url.openConnection(Proxy.NO_PROXY);  } else {    connection=url.openConnection();  }  byte[] uncompressed=json.toString().getBytes();  byte[] compressed=gzip(json.toString());  connection.addRequestProperty("User-Agent","MCStats/" + REVISION);  connection.addRequestProperty("Content-Type","application/json");  connection.addRequestProperty("Content-Encoding","gzip");  connection.addRequestProperty("Content-Length",Integer.toString(compressed.length));  connection.addRequestProperty("Accept","application/json");  connection.addRequestProperty("Connection","close");  connection.setDoOutput(true);  OutputStream os=connection.getOutputStream();  os.write(compressed);  os.flush();  final BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));  String response=reader.readLine();  os.close();  reader.close();  if (response == null || response.startsWith("ERR") || response.startsWith("7")) {    if (response == null) {      response="null";    } else     if (response.startsWith("7")) {      response=response.substring(response.startsWith("7,") ? 2 : 1);    }    throw new IOException(response);  }}  }
class C{  public static synchronized String toXml(Object source,Class<?>[] types){  ByteArrayOutputStream out=new ByteArrayOutputStream();  try {    XMLEncoder encoder=new XMLEncoder(out);    ;    setPersistenceDelegates(encoder,types);    Object valueToWrite=source;    if (valueToWrite.getClass() == Collections.EMPTY_LIST.getClass()) {      valueToWrite=new ArrayList<Object>();    }    if (valueToWrite.getClass() == Collections.singletonList(null).getClass()) {      valueToWrite=new ArrayList<Object>((Collection<?>)source);    }    if (valueToWrite.getClass() == Arrays.asList(new Object[]{}).getClass()) {      valueToWrite=new ArrayList<Object>((Collection<?>)source);    }    encoder.writeObject(valueToWrite);    encoder.close();  }  finally {    close(out);  }  String result=null;  try {    result=new String(out.toByteArray(),"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }  return result;}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    try {      camera.autoFocus(autoFocusCallback);    } catch (    Exception e) {    }  }}  }
class C{  @Override public boolean mayFireAgain(){  return (getNextFireTime() != null);}  }
class C{  private void log(String message){  if (context != null)   context.log("ContextListener: " + message); else   System.out.println("ContextListener: " + message);}  }
class C{  public static List<IJavaCompletionProposal> createProposalsForProblemsOnSyncType(ASTNode node,String methodBindingKey){  RpcPair rpcPair=resolveRpcPair(node,methodBindingKey,PeerTypeResolver.ASYNC_RESOLVER);  if (Util.getCallbackParameter(rpcPair.srcMethod) == null) {    return Collections.emptyList();  }  return createProposal(rpcPair,BUILDER);}  }
class C{  public void testStop() throws Exception {  create(igfs,paths(DIR,SUBDIR),null);  IgfsOutputStream os=igfs.create(FILE,true);  os.write(chunk);  igfs.stop(true);  afterTestsStopped();  beforeTestsStarted();}  }
class C{  public void hideError(){  if (viewLoading == null) {    throw new NullPointerException("Unable to access Error View, check if the error view was initialized.");  } else {    isErrorViewBeingShown=false;    changeViewsVisibility();    setViewVisibility(viewError,View.GONE);  }}  }
class C{  public static String makeRandomAlphanumericString(int numChars){  SecureRandom rng=RNG_QUEUE.poll();  if (rng == null) {    rng=new SecureRandom();  }  StringBuilder output=new StringBuilder(numChars);  while (output.length() != numChars) {    int index=rng.nextInt(ALPHANUM.length);    output.append(ALPHANUM[index]);  }  RNG_QUEUE.add(rng);  return output.toString();}  }
class C{  public void removeLayoutComponent(Component comp){  if (!m_data.containsValue(comp))   return;  Iterator it=m_data.keySet().iterator();  while (it.hasNext()) {    Object key=it.next();    if (m_data.get(key).equals(comp)) {      m_data.remove(key);      return;    }  }}  }
class C{  public void start(Servant servant,String[] args,String iorFile,String naming){  start(servant,args,iorFile,naming,true);}  }
class C{  public IfElse(Class<?> type){  super(type,Boolean.class,type,type);}  }
class C{  public Domain findDomainByName(String name){  for (  Domain domain : domains) {    if (domain.getName().equals(name)) {      return domain;    }  }  return null;}  }
class C{  private String createWebXml(String depDirLoc){  String path=null;  try {    String cmpntFileLoc=ACSFilterUtil.getSelectedProject().getFolder(depDirLoc).getLocation().toOSString();    File fileObject=new File(cmpntFileLoc);    if (!fileObject.exists()) {      fileObject.mkdir();    }    String cmpntFile=String.format("%s%s%s",cmpntFileLoc,File.separator,Messages.depFileName);    if (!new File(cmpntFile).exists()) {      URL url=Activator.getDefault().getBundle().getEntry(Messages.resFileLoc);      URL fileURL=FileLocator.toFileURL(url);      URL resolve=FileLocator.resolve(fileURL);      File file=new File(resolve.getFile());      FileInputStream fis=new FileInputStream(file);      File outputFile=new File(cmpntFile);      OutputStream fos=new FileOutputStream(outputFile);      writeFile(fis,fos);      path=cmpntFile;    } else {      path=cmpntFile;    }  } catch (  IOException e) {    MessageDialog.openError(this.getShell(),Messages.acsErrTtl,Messages.fileCrtErrMsg);    finishVal=false;    Activator.getDefault().log(e.getMessage(),e);  }  return new File(path).getPath();}  }
class C{  public static void killAllCommands(){  INSTANCE.scheduler.killAll();}  }
class C{  public void releaseControl(){  mCurrentStream=-1;  AudioManagerCompatUtils.forceVolumeControlStream(mAudioManager,-1);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  private static ValueLob createBlob(InputStream in,long length){  try {    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(remaining);    byte[] buff;    if (len >= Integer.MAX_VALUE) {      buff=IOUtils.readBytesAndClose(in,-1);      len=buff.length;    } else {      buff=DataUtils.newBytes(len);      len=IOUtils.readFully(in,buff,len);    }    if (len <= getMaxLengthInplaceLob()) {      byte[] small=DataUtils.newBytes(len);      System.arraycopy(buff,0,small,0,len);      return ValueLob.createSmallLob(Value.BLOB,small);    }    ValueLob lob=new ValueLob(Value.BLOB,null);    lob.createFromStream(buff,len,in,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  @Override public void putEvents(EntityAuditEvent... events) throws AtlasException {  putEvents(Arrays.asList(events));}  }
class C{  private static final SecretKey constructSecretKey(byte[] encodedKey,String encodedKeyAlgorithm){  return new SecretKeySpec(encodedKey,encodedKeyAlgorithm);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public BusinessObjectDataStatusUpdateResponse updateBusinessObjectDataStatus(BusinessObjectDataKey businessObjectDataKey,String businessObjectDataStatus) throws URISyntaxException, IOException, JAXBException {  BusinessObjectDataStatusUpdateRequest request=new BusinessObjectDataStatusUpdateRequest();  request.setStatus(businessObjectDataStatus);  JAXBContext requestContext=JAXBContext.newInstance(BusinessObjectDataStatusUpdateRequest.class);  Marshaller requestMarshaller=requestContext.createMarshaller();  requestMarshaller.setProperty(Marshaller.JAXB_ENCODING,StandardCharsets.UTF_8.name());  requestMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  StringWriter sw=new StringWriter();  requestMarshaller.marshal(request,sw);  BusinessObjectDataStatusUpdateResponse businessObjectDataStatusUpdateResponse;  try (CloseableHttpClient client=httpClientOperations.createHttpClient()){    StringBuilder uriPathBuilder=new StringBuilder(300);    uriPathBuilder.append(HERD_APP_REST_URI_PREFIX + "/businessObjectDataStatus/namespaces/").append(businessObjectDataKey.getNamespace());    uriPathBuilder.append("/businessObjectDefinitionNames/").append(businessObjectDataKey.getBusinessObjectDefinitionName());    uriPathBuilder.append("/businessObjectFormatUsages/").append(businessObjectDataKey.getBusinessObjectFormatUsage());    uriPathBuilder.append("/businessObjectFormatFileTypes/").append(businessObjectDataKey.getBusinessObjectFormatFileType());    uriPathBuilder.append("/businessObjectFormatVersions/").append(businessObjectDataKey.getBusinessObjectFormatVersion());    uriPathBuilder.append("/partitionValues/").append(businessObjectDataKey.getPartitionValue());    for (int i=0; i < org.apache.commons.collections4.CollectionUtils.size(businessObjectDataKey.getSubPartitionValues()) && i < BusinessObjectDataEntity.MAX_SUBPARTITIONS; i++) {      uriPathBuilder.append("/subPartition").append(i + 1).append("Values/").append(businessObjectDataKey.getSubPartitionValues().get(i));    }    uriPathBuilder.append("/businessObjectDataVersions/").append(businessObjectDataKey.getBusinessObjectDataVersion());    URIBuilder uriBuilder=new URIBuilder().setScheme(getUriScheme()).setHost(regServerAccessParamsDto.getRegServerHost()).setPort(regServerAccessParamsDto.getRegServerPort()).setPath(uriPathBuilder.toString());    HttpPut httpPut=new HttpPut(uriBuilder.build());    httpPut.addHeader("Content-Type",DEFAULT_CONTENT_TYPE);    httpPut.addHeader("Accepts",DEFAULT_ACCEPT);    if (regServerAccessParamsDto.getUseSsl()) {      httpPut.addHeader(getAuthorizationHeader());    }    httpPut.setEntity(new StringEntity(sw.toString()));    LOGGER.info(String.format("    HTTP POST URI: %s",httpPut.getURI().toString()));    LOGGER.info(String.format("    HTTP POST Headers: %s",Arrays.toString(httpPut.getAllHeaders())));    LOGGER.info(String.format("    HTTP POST Entity Content:%n%s",sw.toString()));    businessObjectDataStatusUpdateResponse=getBusinessObjectDataStatusUpdateResponse(httpClientOperations.execute(client,httpPut));  }   LOGGER.info("Successfully updated status of the business object data.");  return businessObjectDataStatusUpdateResponse;}  }
class C{  private boolean cmd_saveInvoice(int C_Invoice_ID){  log.config("C_Invoice_ID=" + C_Invoice_ID);  MInvoice invoice=new MInvoice(Env.getCtx(),C_Invoice_ID,null);  if (invoice.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Invoice_ID=" + C_Invoice_ID);    return false;  }  int lineCount=0;  for (int i=0; i < m_selectionList.size(); i++) {    if (isSelectionSelected(m_selectionList.get(i))) {      BigDecimal qty=m_qtyList.get(i).getValue();      int M_Product_ID=m_productList.get(i).intValue();      MInvoiceLine il=new MInvoiceLine(invoice);      il.setM_Product_ID(M_Product_ID,true);      il.setQty(qty);      il.setPrice();      il.setTax();      if (il.save())       lineCount++; else       log.log(Level.SEVERE,"Line not saved");    }  }  FDialog.info(-1,this,invoice.getDocumentInfo() + " " + Msg.translate(Env.getCtx(),"Inserted")+ "="+ lineCount);  log.config("#" + lineCount);  return true;}  }
class C{  public String toString(){  return "\nAccount ID: " + id + "\nDate created: "+ getDateCreated()+ "\nBalance: $"+ String.format("%.2f",balance)+ "\nMonthly interest: $"+ String.format("%.2f",getMonthlyInterest());}  }
class C{  public void changeEndColor(@ColorInt int color){  stopAnimation();  setEndColor(color);  reinitialize();}  }
class C{  public static Long translateSizeToBytes(Long size,String unit){  long multiplier=1;  String sizeSubstr;  if (unit.equals(SIZE_TB)) {    multiplier=1024 * 1024 * 1024* 1024L;  } else   if (unit.equals(SIZE_GB)) {    multiplier=1024 * 1024 * 1024L;  } else   if (unit.equals(SIZE_MB)) {    multiplier=1024 * 1024L;  } else   if (unit.equals(SIZE_KB)) {    multiplier=1024L;  }  return size * multiplier;}  }
class C{  private void systemExit(int status){  try {    LOGGER.debug("Send shutdown message to workers ");    messageSender.sendShutDownMessage();    Thread.sleep(1 * 30 * 1000);    LOGGER.debug("Shutdown message was sent to workers .. ");    if (printWorkerSummary) {      printWorkerSummary();    }    databaseCleaner.closeDatabaseCleaner();    LOGGER.debug("Ending");  } catch (  InterruptedException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    cleanUpWorkingDirectory();    if (status != 0) {      System.err.println("InterProScan analysis failed. Exception thrown by DistributedBlackBoxMaster. Check the log file for details");    }    System.exit(status);  }  System.exit(status);}  }
class C{  public static DataAccessException convertGuzzAccessException(GuzzException ex){  if (ex instanceof JDBCException) {    JDBCException e=(JDBCException)ex;    return new UncategorizedSQLException(e.getMessage(),e.getSQL(),e.getSQLException());  }  return new DataAccessResourceFailureException(ex.getMessage(),ex);}  }
class C{  public void actionPerformed(ActionEvent e){  log.finer(m_mField.getColumnName() + ": Value=" + m_editor.getValue());  if (e.getSource() == m_editor && actionListener != null)   actionListener.actionPerformed(e);}  }
class C{  public StyleContext(){  styles=new NamedStyle(null);  addStyle(DEFAULT_STYLE,null);}  }
class C{  public RrdSyncThreadPool registerShutdownHook(){  Thread shutdownThread=new ShutdownThread();  boolean wasNull=shutdownHook.compareAndSet(null,shutdownThread);  if (wasNull) {    Runtime.getRuntime().addShutdownHook(shutdownThread);  }  return this;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trailingComma: ");  result.append(trailingComma);  result.append(')');  return result.toString();}  }
class C{  public static double limitEyeElevation(double elevation,ViewPropertyLimits viewLimits){  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double newElevation=elevation;  double[] elevLimits=viewLimits.getEyeElevationLimits();  if (elevation < elevLimits[0]) {    newElevation=elevLimits[0];  } else   if (elevation > elevLimits[1]) {    newElevation=elevLimits[1];  }  return (newElevation);}  }
class C{  public void init() throws MessagingException {  String repositoryPath=getInitParameter("repositoryPath");  if (repositoryPath == null) {    throw new MessagingException("repositoryPath is null");  }  feedType=getInitParameter("feedType");  if (feedType == null) {    throw new MessagingException("feedType is null");  }  String maxSizeParam=getInitParameter("maxSize");  if (maxSizeParam != null) {    setMaxSize(Integer.parseInt(maxSizeParam));  }  log("maxSize: " + getMaxSize());  initDb();}  }
class C{  private void addLine(){  CharSequence content;  if (columnIsInTab) {    int afterTab=index + 1;    CharSequence rest=line.subSequence(afterTab,line.length());    int spaces=Parsing.columnsToNextTabStop(column);    StringBuilder sb=new StringBuilder(spaces + rest.length());    for (int i=0; i < spaces; i++) {      sb.append(' ');    }    sb.append(rest);    content=sb.toString();  } else {    content=line.subSequence(index,line.length());  }  getActiveBlockParser().addLine(content);}  }
class C{  public void forwardTable(TraceLocal trace){  Address entry=getFirst();  while (!entry.isZero()) {    ObjectReference obj=getObjectReference(entry);    SimpleHashtable.replaceKey(entry,trace.getForwardedReference(obj).toAddress().toWord());    entry=getNext(entry);  }}  }
class C{  public Label(int onLoc){  elt[0]=new TopologyLocation(onLoc);  elt[1]=new TopologyLocation(onLoc);}  }
class C{  public void callDoubleAsync(String key,Callback<Double> callback){  callAsync(key,callback);}  }
class C{  public static int withAlpha(int color,int alpha){  return (color & 0x00ffffff) | (alpha << 24);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYLineAndShapeRenderer)) {    return false;  }  XYStepRenderer that=(XYStepRenderer)obj;  if (this.stepPoint != that.stepPoint) {    return false;  }  return super.equals(obj);}  }
class C{  public static MetaClass metaClass(Object self,Closure closure){  MetaClass emc=hasPerInstanceMetaClass(self);  if (emc == null) {    final ExpandoMetaClass metaClass=new ExpandoMetaClass(self.getClass(),false,true);    metaClass.initialize();    metaClass.define(closure);    if (self instanceof GroovyObject) {      setMetaClass((GroovyObject)self,metaClass);    } else {      setMetaClass(self,metaClass);    }    return metaClass;  } else {    if (emc instanceof ExpandoMetaClass) {      ((ExpandoMetaClass)emc).define(closure);      return emc;    } else {      if (emc instanceof DelegatingMetaClass && ((DelegatingMetaClass)emc).getAdaptee() instanceof ExpandoMetaClass) {        ((ExpandoMetaClass)((DelegatingMetaClass)emc).getAdaptee()).define(closure);        return emc;      } else {        throw new RuntimeException("Can't add methods to non-ExpandoMetaClass " + emc);      }    }  }}  }
class C{  public DoubleMatrix2D like(int rows,int columns){  return new DenseDoubleMatrix2D(rows,columns);}  }
class C{  private String[] diff_halfMatchI(String longtext,String shorttext,int i){  String seed=longtext.substring(i,i + longtext.length() / 4);  int j=-1;  String best_common="";  String best_longtext_a="", best_longtext_b="";  String best_shorttext_a="", best_shorttext_b="";  while ((j=shorttext.indexOf(seed,j + 1)) != -1) {    int prefixLength=diff_commonPrefix(longtext.substring(i),shorttext.substring(j));    int suffixLength=diff_commonSuffix(longtext.substring(0,i),shorttext.substring(0,j));    if (best_common.length() < suffixLength + prefixLength) {      best_common=shorttext.substring(j - suffixLength,j) + shorttext.substring(j,j + prefixLength);      best_longtext_a=longtext.substring(0,i - suffixLength);      best_longtext_b=longtext.substring(i + prefixLength);      best_shorttext_a=shorttext.substring(0,j - suffixLength);      best_shorttext_b=shorttext.substring(j + prefixLength);    }  }  if (best_common.length() * 2 >= longtext.length()) {    return new String[]{best_longtext_a,best_longtext_b,best_shorttext_a,best_shorttext_b,best_common};  } else {    return null;  }}  }
class C{  public void insert(EventBean theEvent){  events.add(theEvent);  EventBean[] oldEvents=null;  if (events.size() > depth) {    oldEvents=new EventBean[]{events.remove(0)};  }  for (  View child : childViews) {    child.update(new EventBean[]{theEvent},oldEvents);  }}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public UnicodeInputStream(final InputStream inputStream) throws NullPointerException, IOException {  this(inputStream,true);}  }
class C{  public void checkFieldCacheSource(QParser parser) throws SolrException {  if (!(indexed() || hasDocValues())) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"can not use FieldCache on a field which is neither indexed nor has doc values: " + getName());  }  if (multiValued()) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"can not use FieldCache on multivalued field: " + getName());  }}  }
class C{  private final void addUser(String channel,User user){  channel=channel.toLowerCase();synchronized (_channels) {    Hashtable<User,User> users=_channels.get(channel);    if (users == null) {      users=new Hashtable<User,User>();      _channels.put(channel,users);    }    users.put(user,user);  }}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public Element addElementToRegistry(String hashcode,Element element,boolean filter){  if (hashcode == null)   return (this);  setFilterState(filter);  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void target(Targetable t){  if (ce() == null) {    return;  }  final int weaponId=clientgui.mechD.wPan.getSelectedWeaponNum();  Mounted weapon=ce().getEquipment(weaponId);  if ((weapon != null) && weapon.getType().hasFlag(WeaponType.F_VGL)) {    int facing;    if (ce().isSecondaryArcWeapon(weaponId)) {      facing=ce().getSecondaryFacing();    } else {      facing=ce().getFacing();    }    facing=(facing + weapon.getFacing()) % 6;    Coords c=ce().getPosition().translated(facing);    IBoard board=clientgui.getClient().getGame().getBoard();    Targetable hexTarget=new HexTarget(c,board,Targetable.TYPE_HEX_CLEAR);    setIgnoringEvents(true);    clientgui.getBoardView().select(c);    setIgnoringEvents(false);    target=hexTarget;  } else {    target=t;  }  if ((target instanceof Entity) && Compute.isGroundToAir(ce(),target)) {    Coords targetPos=Compute.getClosestFlightPath(cen,ce().getPosition(),(Entity)target);    clientgui.getBoardView().cursor(targetPos);  }  ash.setAimingMode();  updateTarget();  ash.showDialog();}  }
class C{  public void handleChangesToSavingsProductToGLAccountMappings(final Long savingsProductId,final Map<String,Object> changes,final JsonElement element,final AccountingRuleType accountingRuleType){switch (accountingRuleType) {case NONE:    break;case CASH_BASED:  mergeSavingsToAssetAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.SAVINGS_REFERENCE.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.SAVINGS_REFERENCE.toString(),changes);mergeSavingsToAssetAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.OVERDRAFT_PORTFOLIO_CONTROL.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.OVERDRAFT_PORTFOLIO_CONTROL.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.OVERDRAFT_PORTFOLIO_CONTROL.toString(),changes);mergeSavingsToIncomeAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.INCOME_FROM_FEES.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.INCOME_FROM_FEES.toString(),changes);mergeSavingsToIncomeAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.INCOME_FROM_PENALTIES.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.INCOME_FROM_PENALTIES.toString(),changes);mergeSavingsToIncomeAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_INTEREST.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.INCOME_FROM_INTEREST.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.INCOME_FROM_INTEREST.toString(),changes);mergeSavingsToExpenseAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.INTEREST_ON_SAVINGS.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.INTEREST_ON_SAVINGS.toString(),changes);mergeSavingsToExpenseAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.LOSSES_WRITTEN_OFF.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.LOSSES_WRITTEN_OFF.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.LOSSES_WRITTEN_OFF.toString(),changes);mergeSavingsToLiabilityAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.SAVINGS_CONTROL.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.SAVINGS_CONTROL.toString(),changes);mergeSavingsToLiabilityAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.TRANSFERS_SUSPENSE.getValue(),CASH_ACCOUNTS_FOR_SAVINGS.TRANSFERS_SUSPENSE.toString(),changes);createOrmergeSavingsToLiabilityAccountMappingChanges(element,SAVINGS_PRODUCT_ACCOUNTING_PARAMS.ESCHEAT_LIABILITY.getValue(),savingsProductId,CASH_ACCOUNTS_FOR_SAVINGS.ESCHEAT_LIABILITY.getValue(),changes);break;case ACCRUAL_PERIODIC:break;case ACCRUAL_UPFRONT:break;default :break;}}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public EmptyImportCustomizerProvider(final Set<String> extraImports,final Set<String> extraStaticImports){  this.extraStaticImports.addAll(extraStaticImports);  this.extraImports.addAll(extraImports);}  }
class C{  public Args parseArgs(){  try {    Args argsObj=new Args();switch (action) {case NOOP:      break;case START_SLAVE:case STOP_SLAVE:    argsObj.fromShard=(String)args.get(0);  argsObj.toShard=(String)args.get(1);argsObj.timeoutMs=Long.parseLong(String.valueOf(args.get(2)));break;case MIGRATE_1:argsObj.rangeStart=(Integer)args.get(0);argsObj.rangeStop=(Integer)args.get(1);argsObj.fromShard=(String)args.get(2);argsObj.toShard=(String)args.get(3);argsObj.timeoutMs=Long.parseLong(String.valueOf(args.get(4)));break;case MIGRATE_2:case MIGRATE_3:argsObj.rangeStart=(Integer)args.get(0);argsObj.rangeStop=(Integer)args.get(1);argsObj.fromShard=(String)args.get(2);argsObj.toShard=(String)args.get(3);argsObj.complete=(Boolean)args.get(4);break;case MIGRATE_ROLLBACK:argsObj.rangeStart=(Integer)args.get(0);argsObj.rangeStop=(Integer)args.get(1);break;}return argsObj;} catch (Exception e) {logger.error("Cannot parse args={}, message={}",args,e.getMessage());throw new IllegalStateException(e);}}  }
class C{  protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){  ButtonModel model=menuItem.getModel();  FontMetrics fm=SwingUtilities2.getFontMetrics(menuItem,g);  int mnemIndex=menuItem.getDisplayedMnemonicIndex();  if (!model.isEnabled()) {    if (UIManager.get("MenuItem.disabledForeground") instanceof Color) {      g.setColor(UIManager.getColor("MenuItem.disabledForeground"));      SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());    } else {      g.setColor(menuItem.getBackground().brighter());      SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());      g.setColor(menuItem.getBackground().darker());      SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x - 1,textRect.y + fm.getAscent() - 1);    }  } else {    if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {      g.setColor(selectionForeground);    }    SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());  }}  }
class C{  public CSaveFormattedField(final AbstractFormatter formatter){  super(formatter);}  }
class C{  public ThreadCreatedParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_THREAD_CREATED);}  }
class C{  public Type asUninitialized(int newAt){  if (newAt < 0) {    throw new IllegalArgumentException("newAt < 0");  }  if (!isReference()) {    throw new IllegalArgumentException("not a reference type: " + descriptor);  }  if (isUninitialized()) {    throw new IllegalArgumentException("already uninitialized: " + descriptor);  }  String newDesc='N' + Hex.u2(newAt) + descriptor;  Type result=new Type(newDesc,BT_OBJECT,newAt);  result.initializedType=this;  return putIntern(result);}  }
class C{  public void removePainter(Painter<T> painter){  Collection<Painter<T>> old=new ArrayList<Painter<T>>(getPainters());  this.painters.remove(painter);  if (painter instanceof AbstractPainter) {    ((AbstractPainter<?>)painter).removePropertyChangeListener(handler);  }  setDirty(true);  firePropertyChange("painters",old,getPainters());}  }
class C{  public void add(Collection<T> points){  add(root,points);}  }
class C{  public boolean removeWithNode(N node){  return removeWithController(controllerNodeMap.inverse().get(node)) != null;}  }
class C{  @SuppressWarnings("unchecked") public PircBotX(@NonNull Configuration configuration){  botId=BOT_COUNT.getAndIncrement();  this.configuration=configuration;  this.nick=configuration.getName();  this.userChannelDao=configuration.getBotFactory().createUserChannelDao(this);  UserHostmask botHostmask=configuration.getBotFactory().createUserHostmask(this,null,configuration.getName(),configuration.getLogin(),null);  getUserChannelDao().createUser(botHostmask);  this.serverInfo=configuration.getBotFactory().createServerInfo(this);  this.outputRaw=configuration.getBotFactory().createOutputRaw(this);  this.outputIRC=configuration.getBotFactory().createOutputIRC(this);  this.outputCAP=configuration.getBotFactory().createOutputCAP(this);  this.outputDCC=configuration.getBotFactory().createOutputDCC(this);  this.dccHandler=configuration.getBotFactory().createDccHandler(this);  this.inputParser=configuration.getBotFactory().createInputParser(this);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTreeUI();  return MultiLookAndFeel.createUIs(mui,((MultiTreeUI)mui).uis,a);}  }
class C{  @Override @Retained protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {  @Retained EntryEventImpl event=EntryEventImpl.create(rgn,Operation.PUTALL_UPDATE,null,null,this.callbackArg,true,getSender());  if (this.context != null) {    event.context=this.context;  }  event.setPossibleDuplicate(this.possibleDuplicate);  event.setEventId(this.eventId);  return event;}  }
class C{  public static Result evaluateModel(MultiLabelClassifier h,String options[]) throws Exception {  boolean needPrebuiltModel=false;  Instances test=null;  if (Utils.getOptionPos('T',options) > -1) {    test=Evaluation.loadDataset(options,'T');    MLUtils.prepareData(test);    needPrebuiltModel=true;  }  Instances train=null;  if (Utils.getOptionPos('t',options) > -1) {    train=Evaluation.loadDataset(options,'t');    MLUtils.prepareData(train);    needPrebuiltModel=false;  }  String predictions=Utils.getOption("predictions",options);  boolean doEval=!Utils.getFlag("no-eval",options);  int nWin=OptionUtils.parse(options,'x',10);  int nInit=OptionUtils.parse(options,"split-percentage",10);  double rLabeled=OptionUtils.parse(options,"supervision",1.);  String Top=OptionUtils.parse(options,"threshold","0.5");  String Vop=OptionUtils.parse(options,"verbosity","3");  String dname=null;  if (Utils.getOptionPos('d',options) >= 0)   dname=Utils.getOption('d',options);  String lname=null;  Instances dataHeader=null;  if (Utils.getOptionPos('l',options) >= 0) {    lname=Utils.getOption('l',options);    Object[] data=SerializationHelper.readAll(lname);    MultiLabelClassifier h2=(MultiLabelClassifier)data[0];    if (h.getClass() != h2.getClass())     throw new IllegalArgumentException("Classifier stored in '" + lname + "' is not a "+ h.getClass().getName());    if (data.length > 1) {      dataHeader=(Instances)data[1];      String msg;      if (train != null) {        msg=train.equalHeadersMsg(dataHeader);        if (msg != null)         throw new IllegalArgumentException("New training data is not compatible with training header stored in '" + lname + "':\n"+ msg);      }      if (test != null) {        msg=test.equalHeadersMsg(dataHeader);        if (msg != null)         throw new IllegalArgumentException("New test data is not compatible with training header stored in '" + lname + "':\n"+ msg);      }    }    h=h2;    needPrebuiltModel=false;  }  if (needPrebuiltModel)   throw new IllegalArgumentException("Options require a prebuilt model, but none available!");  if (h.getDebug()) {    if (train != null)     System.out.println(":- Dataset -: " + MLUtils.getDatasetName(train) + "\tL="+ train.classIndex()+ "");    if (test != null)     System.out.println(":- Test -: " + MLUtils.getDatasetName(test) + "\tL="+ test.classIndex()+ "");  }  Utils.checkForRemainingOptions(options);  Result result=null;  if (train != null) {    if (doEval) {      result=evaluateModelPrequentialBasic(h,train,nWin,rLabeled,Top,Vop);    } else {      Instances init=new Instances(train,0,nWin);      h.buildClassifier(init);      for (      Instance inst : train)       ((UpdateableClassifier)h).updateClassifier(inst);    }  }  if (test != null && doEval) {    if (h.getDebug())     System.out.println("Non-incremental evaluation on provided test set");    result=Evaluation.evaluateModel(h,test,Top,Vop);  }  if (dname != null) {    dataHeader=new Instances(train,0);    SerializationHelper.writeAll(dname,new Object[]{h,dataHeader});  }  if (!predictions.isEmpty()) {    if (test == null) {      System.err.println("No test set provided, cannot make predictions!");    } else {      Instances predicted=new Instances(test,0);      for (int i=0; i < test.numInstances(); i++) {        double pred[]=h.distributionForInstance(test.instance(i));        if (h instanceof MultiTargetClassifier)         pred=Arrays.copyOf(pred,test.classIndex());        Instance predInst=(Instance)test.instance(i).copy();        for (int j=0; j < pred.length; j++)         predInst.setValue(j,pred[j]);        predicted.add(predInst);      }      AbstractFileSaver saver=ConverterUtils.getSaverForFile(predictions);      if (saver == null) {        System.err.println("Failed to determine saver for '" + predictions + "', using "+ ArffSaver.class.getName());        saver=new ArffSaver();      }      saver.setFile(new File(predictions));      saver.setInstances(predicted);      saver.writeBatch();      System.out.println("Predictions saved to: " + predictions);    }  }  return result;}  }
class C{  public void grantRole(Role role,Right right){  if (grantedRoles == null) {    grantedRoles=New.hashMap();  }  grantedRoles.put(role,right);}  }
class C{  public static boolean isLandscape(Context context){  return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;}  }
class C{  public Formula(String formula){  this.formula=formula;}  }
class C{  public XYDataItem(Number x,Number y){  ParamChecks.nullNotPermitted(x,"x");  this.x=x;  this.y=y;}  }
class C{  @Path("{secretName}") @Timed @ExceptionMetered @DELETE public Response deleteSecretSeries(@Auth AutomationClient automationClient,@PathParam("secretName") String secretName){  secretDAO.getSecretByName(secretName).orElseThrow(null);  secretDAO.deleteSecretsByName(secretName);  Map<String,String> extraInfo=new HashMap<>();  extraInfo.put("deprecated","true");  auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_DELETE,automationClient.getName(),secretName,extraInfo));  return Response.ok().build();}  }
class C{  public void callIntent(String phoneNumber){  mContext.startActivity(new Intent(Intent.ACTION_CALL,Uri.parse("tel: " + phoneNumber)).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));}  }
class C{  public boolean isControlPressed(){  return controlPressed;}  }
class C{  private RMIGenerator(BatchEnvironment env,ClassDefinition cdef,File destDir,RemoteClass remoteClass,int version) throws ClassNotFound {  this.destDir=destDir;  this.cdef=cdef;  this.env=env;  this.remoteClass=remoteClass;  this.version=version;  remoteMethods=remoteClass.getRemoteMethods();  remoteClassName=remoteClass.getName();  stubClassName=Names.stubFor(remoteClassName);  skeletonClassName=Names.skeletonFor(remoteClassName);  methodFieldNames=nameMethodFields(remoteMethods);  stubFile=sourceFileForClass(remoteClassName,stubClassName,destDir,env);  skeletonFile=sourceFileForClass(remoteClassName,skeletonClassName,destDir,env);  defException=env.getClassDeclaration(idJavaLangException).getClassDefinition(env);  defRemoteException=env.getClassDeclaration(idRemoteException).getClassDefinition(env);  defRuntimeException=env.getClassDeclaration(idJavaLangRuntimeException).getClassDefinition(env);}  }
class C{  public boolean thisIsYou(Object n){  return id.equals(n);}  }
class C{  private void touchEventsCancelled(){  if (mCellIsMobile) {    mAboveItemId=INVALID_ID;    mBelowItemId=INVALID_ID;    ((PlaylistAdapter)((HeaderViewListAdapter)getAdapter()).getWrappedAdapter()).setVisibility(getPositionForID(mMobileItemId) - 1,VISIBLE);    mMobileItemId=INVALID_ID;    mHoverCell=null;    invalidate();  }  mCellIsMobile=false;  mIsMobileScrolling=false;  mActivePointerId=INVALID_POINTER_ID;}  }
class C{  protected NotequalsOp_Impl(){  super();}  }
class C{  protected void catchException(Exception exception,ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  super.catchException(exception,mapping,form,request,response);  request.setAttribute(Constants.EXCEPCION_KEY,((ArchigestActionProcessException)exception).getNested());  setReturnActionFordward(request,mapping.findForward("globalerror"));}  }
class C{  private boolean isPlatformExtern(String filePath,String symbolName){  if (platformSymbolsMissingInTypeScript.contains(symbolName))   return false;  if (filePath.startsWith("externs.zip//"))   return true;  String fileName=new File(filePath).getName();  return platformExternsFilenames.contains(fileName) || fileName.startsWith("es") || fileName.startsWith("gecko_")|| fileName.startsWith("w3c_")|| fileName.startsWith("ie_")|| fileName.startsWith("webkit_");}  }
class C{  public GaussianBlurFilter(){  this(3);}  }
class C{  @Override synchronized void doAbort(Executor executor){  for (  MySQLConnection c : this.liveConnections.values()) {    try {      c.abort(executor);    } catch (    SQLException e) {    }  }  if (!this.isClosed) {    this.balancer.destroy();    if (this.connectionGroup != null) {      this.connectionGroup.closeConnectionProxy(this);    }  }  this.liveConnections.clear();  this.connectionsToHostsMap.clear();}  }
class C{  public void put(String key,long value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  @Override public Void visitMethodInvocation(MethodInvocationTree node,Void p){  if (TreeUtils.elementFromUse(node) == null || TreeUtils.isEnumSuper(node)) {    return super.visitMethodInvocation(node,p);  }  if (shouldSkipUses(node)) {    return super.visitMethodInvocation(node,p);  }  Pair<AnnotatedExecutableType,List<AnnotatedTypeMirror>> mfuPair=atypeFactory.methodFromUse(node);  AnnotatedExecutableType invokedMethod=mfuPair.first;  List<AnnotatedTypeMirror> typeargs=mfuPair.second;  List<AnnotatedTypeParameterBounds> paramBounds=new ArrayList<>();  for (  AnnotatedTypeVariable param : invokedMethod.getTypeVariables()) {    paramBounds.add(param.getBounds());  }  checkTypeArguments(node,paramBounds,typeargs,node.getTypeArguments());  List<AnnotatedTypeMirror> params=AnnotatedTypes.expandVarArgs(atypeFactory,invokedMethod,node.getArguments());  checkArguments(params,node.getArguments());  if (isVectorCopyInto(invokedMethod)) {    typeCheckVectorCopyIntoArgument(node,params);  }  ExecutableElement invokedMethodElement=invokedMethod.getElement();  if (!ElementUtils.isStatic(invokedMethodElement) && !TreeUtils.isSuperCall(node)) {    checkMethodInvocability(invokedMethod,node);  }  checkPreconditions(node,contractsUtils.getPreconditions(invokedMethodElement));  scan(node.getMethodSelect(),p);  return null;}  }
class C{  public void initialize(){  jobServices.addService(ThreadFactory.class,getThreads());  jobServices.addService(ScheduledExecutorService.class,getScheduler());  invokeAction(null);}  }
class C{  public void init(AsymmetricKeyParameter privateKey,CipherParameters params,KeyParser publicKeyParser){  this.forEncryption=false;  this.privParam=privateKey;  this.keyParser=publicKeyParser;  extractParams(params);}  }
class C{  public void dispose(){  try {    _disposed=true;    _socket.close();  } catch (  Exception e) {  }}  }
class C{  private void performHighlight(MotionEvent e){  Highlight h=mChart.getHighlightByTouchPoint(e.getX(),e.getY());  if (h == null || h.equalTo(mLastHighlighted)) {    mChart.highlightTouch(null);    mLastHighlighted=null;  } else {    mLastHighlighted=h;    mChart.highlightTouch(h);  }}  }
class C{  public void testDetectLanguageEn(){  LOGGER.debug("detectLanguage en");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "en.wikipedia.org-wiki-Web_accessibility_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("en",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("en",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("en",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public static ReadStreamOld openRead(InputStream is){  if (is instanceof ReadStreamOld)   return (ReadStreamOld)is;  VfsStreamOld s=new VfsStreamOld(is,null);  return new ReadStreamOld(s);}  }
class C{  public static boolean isHeterozygous(VcfRecord rec,int sample){  final int[] gtArray=getValidGt(rec,sample);  return isHeterozygous(gtArray);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected TemplateSegmentImpl(){  super();}  }
class C{  private void showDeleteTip(String showText){  Toast.makeText(WordsBookActivity.this,showText,Toast.LENGTH_SHORT).show();}  }
class C{  @SuppressWarnings({"UnusedParameters"}) public BitmapDrawable(Resources res,String filepath){  this(new BitmapState(BitmapFactory.decodeFile(filepath)),null);  mBitmapState.mTargetDensity=mTargetDensity;  if (mBitmap == null) {    android.util.Log.w("BitmapDrawable","BitmapDrawable cannot decode " + filepath);  }}  }
class C{  public String convertSWFToHTML(byte[] b2) throws Exception {  return convertSWFToHTML(new ByteArrayInputStream(b2));}  }
class C{  public void projectionChanged(ProjectionEvent e){  setProjection((Projection)e.getProjection().makeClone());}  }
class C{  private String logVolumeInfo(Volume volume){  StringBuilder buf=new StringBuilder();  if (null != volume && !NullColumnValueGetter.isNullURI(volume.getId())) {    VirtualArray varray=_dbClient.queryObject(VirtualArray.class,volume.getVirtualArray());    VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    ProtectionSystem ps=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());    BlockConsistencyGroup consistencyGroup=_dbClient.queryObject(BlockConsistencyGroup.class,volume.getConsistencyGroup());    buf.append(String.format("%nPreparing RP %s Volume:%n",volume.getPersonality()));    buf.append(String.format("\t Name : [%s] (%s)%n",volume.getLabel(),volume.getId()));    buf.append(String.format("\t Personality : [%s]%n",volume.getPersonality()));    if (RPHelper.isVPlexVolume(volume,_dbClient) && (null != volume.getAssociatedVolumes())) {      buf.append(String.format("\t VPLEX : [%s] %n",((volume.getAssociatedVolumes().size() > 1) ? "Distributed" : "Local")));      buf.append(String.format("\t\t====="));      for (      String uriString : volume.getAssociatedVolumes()) {        Volume backingVolume=_dbClient.queryObject(Volume.class,URI.create(uriString));        VirtualArray backingVolumeVarray=_dbClient.queryObject(VirtualArray.class,backingVolume.getVirtualArray());        VirtualPool backingVolumeVpool=_dbClient.queryObject(VirtualPool.class,backingVolume.getVirtualPool());        StorageSystem backingVolumeStorageSystem=_dbClient.queryObject(StorageSystem.class,backingVolume.getStorageController());        StoragePool backingVolumePool=_dbClient.queryObject(StoragePool.class,backingVolume.getPool());        buf.append(String.format("%n\t\t Backing Volume Name : [%s] (%s)%n",backingVolume.getLabel(),backingVolume.getId()));        buf.append(String.format("\t\t Backing Volume Virtual Array : [%s] (%s) %n",backingVolumeVarray.getLabel(),backingVolumeVarray.getId()));        buf.append(String.format("\t\t Backing Volume Virtual Pool : [%s] (%s) %n",backingVolumeVpool.getLabel(),backingVolumeVpool.getId()));        buf.append(String.format("\t\t Backing Volume Storage System : [%s] (%s) %n",backingVolumeStorageSystem.getLabel(),backingVolumeStorageSystem.getId()));        buf.append(String.format("\t\t Backing Volume Storage Pool : [%s] (%s) %n",backingVolumePool.getLabel(),backingVolumePool.getId()));        if (NullColumnValueGetter.isNotNullValue(backingVolume.getInternalSiteName())) {          String internalSiteName=((ps.getRpSiteNames() != null) ? ps.getRpSiteNames().get(backingVolume.getInternalSiteName()) : backingVolume.getInternalSiteName());          buf.append(String.format("\t\t Backing Volume RP Internal Site : [%s %s] %n",internalSiteName,backingVolume.getInternalSiteName()));          buf.append(String.format("\t\t Backing Volume RP Copy Name : [%s] %n",backingVolume.getRpCopyName()));        }      }      buf.append(String.format("\t\t=====%n"));    }    buf.append(String.format("\t Consistency Group : [%s] (%s)%n",consistencyGroup.getLabel(),consistencyGroup.getId()));    buf.append(String.format("\t Virtual Array : [%s] (%s)%n",varray.getLabel(),varray.getId()));    buf.append(String.format("\t Virtual Pool : [%s] (%s)%n",vpool.getLabel(),vpool.getId()));    buf.append(String.format("\t Capacity : [%s] %n",volume.getCapacity()));    if (!NullColumnValueGetter.isNullURI(volume.getStorageController())) {      StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,volume.getStorageController());      buf.append(String.format("\t Storage System : [%s] (%s)%n",storageSystem.getLabel(),storageSystem.getId()));    }    if (!NullColumnValueGetter.isNullURI(volume.getPool())) {      StoragePool pool=_dbClient.queryObject(StoragePool.class,volume.getPool());      buf.append(String.format("\t Storage Pool : [%s] (%s)%n",pool.getLabel(),pool.getId()));    }    if (!NullColumnValueGetter.isNullURI(volume.getAutoTieringPolicyUri())) {      AutoTieringPolicy policy=_dbClient.queryObject(AutoTieringPolicy.class,volume.getAutoTieringPolicyUri());      buf.append(String.format("\t Auto Tier Policy : [%s]%n",policy.getPolicyName()));    }    buf.append(String.format("\t RP Protection System : [%s] (%s)%n",ps.getLabel(),ps.getId()));    buf.append(String.format("\t RP Replication Set : [%s]%n",volume.getRSetName()));    if (Volume.PersonalityTypes.SOURCE.name().equals(volume.getPersonality())) {      buf.append(String.format("\t RP MetroPoint enabled : [%s]%n",(VirtualPool.vPoolSpecifiesMetroPoint(vpool) ? "true" : "false")));    }    if (volume.getRpTargets() != null && !volume.getRpTargets().isEmpty()) {      buf.append(String.format("\t RP Target Volume(s) for Source : ["));      for (      String targetVolumeId : volume.getRpTargets()) {        Volume targetVolume=_dbClient.queryObject(Volume.class,URI.create(targetVolumeId));        buf.append(String.format("%s, ",targetVolume.getLabel()));      }      int endIndex=buf.length();      buf.delete(endIndex - 2,endIndex);      buf.append(String.format("]%n"));    }    String internalSiteName=((ps.getRpSiteNames() != null) ? ps.getRpSiteNames().get(volume.getInternalSiteName()) : volume.getInternalSiteName());    buf.append(String.format("\t RP Internal Site : [%s %s]%n",internalSiteName,volume.getInternalSiteName()));    buf.append(String.format("\t RP Copy Name : [%s]%n",volume.getRpCopyName()));  }  return buf.toString();}  }
class C{  @Override public void clear(){  fromList.clear();}  }
class C{  public SIPHeader parse() throws ParseException {  WarningList warningList=new WarningList();  if (debug)   dbg_enter("WarningParser.parse");  try {    headerName(TokenTypes.WARNING);    while (lexer.lookAhead(0) != '\n') {      Warning warning=new Warning();      warning.setHeaderName(SIPHeaderNames.WARNING);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      try {        int code=Integer.parseInt(token.getTokenValue());        warning.setCode(code);      } catch (      NumberFormatException ex) {        throw createParseException(ex.getMessage());      }catch (      InvalidArgumentException ex) {        throw createParseException(ex.getMessage());      }      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      if (lexer.lookAhead(0) == ':') {        this.lexer.match(':');        this.lexer.match(TokenTypes.ID);        Token token2=lexer.getNextToken();        warning.setAgent(token.getTokenValue() + ":" + token2.getTokenValue());      } else {        warning.setAgent(token.getTokenValue());      }      this.lexer.SPorHT();      String text=this.lexer.quotedString();      warning.setText(text);      this.lexer.SPorHT();      warningList.add(warning);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        warning=new Warning();        this.lexer.match(TokenTypes.ID);        Token tok=lexer.getNextToken();        try {          int code=Integer.parseInt(tok.getTokenValue());          warning.setCode(code);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        tok=lexer.getNextToken();        if (lexer.lookAhead(0) == ':') {          this.lexer.match(':');          this.lexer.match(TokenTypes.ID);          Token token2=lexer.getNextToken();          warning.setAgent(tok.getTokenValue() + ":" + token2.getTokenValue());        } else {          warning.setAgent(tok.getTokenValue());        }        this.lexer.SPorHT();        text=this.lexer.quotedString();        warning.setText(text);        this.lexer.SPorHT();        warningList.add(warning);      }    }  }  finally {    if (debug)     dbg_leave("WarningParser.parse");  }  return warningList;}  }
class C{  public synchronized int sendMessageToMembers(Object newMessage){  try {    syncMessageToCurrentScope("sendVarsToMessage",newMessage,false);  } catch (  Exception err) {    log.error("[sendMessage]",err);  }  return 1;}  }
class C{  private static void createThumbnailFromEXIF(String filePath,int targetSize,int maxPixels,SizedThumbnailBitmap sizedThumbBitmap){  if (filePath == null)   return;  ExifInterface exif=null;  byte[] thumbData=null;  try {    exif=new ExifInterface(filePath);    thumbData=exif.getThumbnail();  } catch (  IOException ex) {    Log.w(TAG,ex);  }  BitmapFactory.Options fullOptions=new BitmapFactory.Options();  BitmapFactory.Options exifOptions=new BitmapFactory.Options();  int exifThumbWidth=0;  int fullThumbWidth=0;  if (thumbData != null) {    exifOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,exifOptions);    exifOptions.inSampleSize=computeSampleSize(exifOptions,targetSize,maxPixels);    exifThumbWidth=exifOptions.outWidth / exifOptions.inSampleSize;  }  fullOptions.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filePath,fullOptions);  fullOptions.inSampleSize=computeSampleSize(fullOptions,targetSize,maxPixels);  fullThumbWidth=fullOptions.outWidth / fullOptions.inSampleSize;  if (thumbData != null && exifThumbWidth >= fullThumbWidth) {    int width=exifOptions.outWidth;    int height=exifOptions.outHeight;    exifOptions.inJustDecodeBounds=false;    sizedThumbBitmap.mBitmap=BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,exifOptions);    if (sizedThumbBitmap.mBitmap != null) {      sizedThumbBitmap.mThumbnailData=thumbData;      sizedThumbBitmap.mThumbnailWidth=width;      sizedThumbBitmap.mThumbnailHeight=height;    }  } else {    fullOptions.inJustDecodeBounds=false;    sizedThumbBitmap.mBitmap=BitmapFactory.decodeFile(filePath,fullOptions);  }}  }
class C{  private String executeMeshDeviceUpgradeLocal(JSONObject requestJson){  try {    JSONObject jsonGet=requestJson.getJSONObject(GET);    String action=jsonGet.getString(ACTION);    String filename=jsonGet.getString(FILE_NAME);    String version=jsonGet.getString(VERSION);    byte[] bin=null;    if (filename.equals(USER1_BIN)) {      bin=mUser1Bin;    } else     if (filename.equals(USER2_BIN)) {      bin=mUser2Bin;    } else {      log.warn("filename is invalid, it isn't 'user1.bin' or 'user2.bin'.");      return null;    }    int total=bin.length;    int offset=jsonGet.getInt(OFFSET);    log.debug("__executeMeshDeviceUpgradeLocal(): offset = " + offset);    int size=jsonGet.getInt(SIZE);    log.debug("__executeMeshDeviceUpgradeLocal(): size = " + size);    if (offset + size > total) {      size=total - offset;    }    byte[] encoded=Base64Util.encode(bin,offset,size);    int size_base64=encoded.length;    JSONObject jsonResponse=new JSONObject();    JSONObject jsonDeviceRom=new JSONObject();    jsonDeviceRom.put(FILE_NAME,filename);    jsonDeviceRom.put(VERSION,version);    jsonDeviceRom.put(OFFSET,offset);    jsonDeviceRom.put(TOTAL,total);    jsonDeviceRom.put(SIZE,size);    jsonDeviceRom.put(SIZE_BASE64,size_base64);    jsonDeviceRom.put(ACTION,action);    jsonDeviceRom.put(ROM_BASE64,"__rombase64");    jsonResponse.put(DEVICE_ROM,jsonDeviceRom);    jsonResponse.put(STATUS,200);    return jsonResponse.toString().replace("__rombase64",new String(encoded));  } catch (  JSONException e) {    e.printStackTrace();  }  return null;}  }
class C{  public boolean removeDataChannel(){  if (TextUtils.isEmpty(mDataNamespace)) {    return false;  }  try {    if (null != Cast.CastApi && null != mApiClient) {      Cast.CastApi.removeMessageReceivedCallbacks(mApiClient,mDataNamespace);    }    mDataChannel=null;    Utils.saveStringToPreference(mContext,PREFS_KEY_CAST_CUSTOM_DATA_NAMESPACE,null);    return true;  } catch (  Exception e) {    LOGE(TAG,"Failed to remove namespace: " + mDataNamespace,e);  }  return false;}  }
class C{  public boolean ensureSchemaAgreement(){  long start=System.currentTimeMillis();  Map<String,List<String>> schemas=null;  while (System.currentTimeMillis() - start < DbClientContext.MAX_SCHEMA_WAIT_MS) {    try {      log.info("sleep for {} seconds before checking schema versions.",DbClientContext.SCHEMA_RETRY_SLEEP_MILLIS / 1000);      Thread.sleep(DbClientContext.SCHEMA_RETRY_SLEEP_MILLIS);    } catch (    InterruptedException ex) {      log.warn("Interrupted during sleep");    }    schemas=getSchemaVersions();    if (schemas.size() > 2) {      continue;    }    if (schemas.size() == 1) {      if (!schemas.containsKey(StorageProxy.UNREACHABLE)) {        return false;      } else {        continue;      }    }    if (schemas.containsKey(StorageProxy.UNREACHABLE)) {      return true;    }  }  log.error("Unable to converge schema versions {}",schemas);  throw new IllegalStateException("Unable to converge schema versions");}  }
class C{  public void extractPlansExcludingLinkInfo(){  Scenario scIn=LoadMyScenarios.loadScenarioFromPlans(inputPlans);  Population popOut=scOut.getPopulation();  for (  Person p : scIn.getPopulation().getPersons().values()) {    Person pOut=popOut.getFactory().createPerson(p.getId());    popOut.addPerson(pOut);    for (    Plan plan : p.getPlans()) {      Plan planOut=popOut.getFactory().createPlan();      List<PlanElement> pes=plan.getPlanElements();      for (      PlanElement pe : pes) {        if (pe instanceof Leg) {          Leg leg=(Leg)pe;          Leg legOut=popOut.getFactory().createLeg(leg.getMode());          planOut.addLeg(legOut);        } else {          Activity actIn=(Activity)pe;          Activity actOut=popOut.getFactory().createActivityFromCoord(actIn.getType(),actIn.getCoord());          actOut.setEndTime(actIn.getEndTime());          planOut.addActivity(actOut);        }      }      pOut.addPlan(planOut);    }  }}  }
class C{  public TableRowElement generateRow(List l){  TableRowElement tr=new TableRowElement();  addToRow(tr,l);  return tr;}  }
class C{  protected Rectangle rectangleForCurrentValue(){  int width=comboBox.getWidth();  int height=comboBox.getHeight();  Insets insets=getInsets();  int buttonSize=height - (insets.top + insets.bottom);  if (arrowButton != null) {    buttonSize=arrowButton.getWidth();  }  if (BasicGraphicsUtils.isLeftToRight(comboBox)) {    return new Rectangle(insets.left,insets.top,width - (insets.left + insets.right + buttonSize),height - (insets.top + insets.bottom));  } else {    return new Rectangle(insets.left + buttonSize,insets.top,width - (insets.left + insets.right + buttonSize),height - (insets.top + insets.bottom));  }}  }
class C{  public BrushCommands(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;}  }
class C{  public static String byteArrayToBinaryString(byte[] block){  StringBuffer strBuf=new StringBuffer();  int iLen=block.length;  for (int i=0; i < iLen; i++) {    byte2bin(block[i],strBuf);    if ((i < iLen - 1) & WITH_BYTE_SEPARATOR) {      strBuf.append(BYTE_SEPARATOR);    }  }  return strBuf.toString();}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final synchronized void changeVariation(int delta){  if (game.numVariations() > 1) {    abortSearch();    game.changeVariation(delta);    updateComputeThreads();    setSelection();    updateGUI();  }}  }
class C{  public CStepOverAction(final JFrame parent,final IFrontEndDebuggerProvider debugger,final ZyGraph graph){  m_parent=Preconditions.checkNotNull(parent,"IE00311: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01546: Debugger argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01547: Graph argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Step Over");}  }
class C{  private void writeNonstuffed(byte[] b,int off,int len) throws IOException {  out.write(b,off,len);}  }
class C{  public static int indexOf(short[] array,short[] sub,int startIndex){  return indexOf(array,sub,startIndex,array.length);}  }
class C{  private void tryRippleExit(){  if (mRipple != null) {    if (mExitingRipples == null) {      mExitingRipples=new Ripple[MAX_RIPPLES];    }    mExitingRipples[mExitingRipplesCount++]=mRipple;    mRipple.exit();    mRipple=null;  }}  }
class C{  private void invokePlugin(Node.CustomTag n){  TagPlugin tagPlugin=tagPlugins.get(n.getTagHandlerClass().getName());  if (tagPlugin == null) {    return;  }  TagPluginContext tagPluginContext=new TagPluginContextImpl(n,pageInfo);  n.setTagPluginContext(tagPluginContext);  tagPlugin.doTag(tagPluginContext);}  }
class C{  public void bringToFront(Figure figure){  if (basicRemove(figure) != -1) {    basicAdd(figure);    fireAreaInvalidated(figure.getDrawingArea());  }}  }
class C{  protected void startEditingTimer(){  if (timer == null) {    timer=new Timer(1200,this);    timer.setRepeats(false);  }  timer.start();}  }
class C{  public RecurrenceExceptionEntry addWhen(When when){  super.addElement(When.KEY,when);  return this;}  }
class C{  @Override public Result init(long timeout){  Result result=super.init(timeout);  if (result.isSuccess() == false) {    return result;  }  SessionParams params=getParams();  BridgeContext context=getContext();  RenderResources resources=getParams().getResources();  DisplayMetrics metrics=getContext().getMetrics();  mIsAlphaChannelImage=getBooleanThemeValue(resources,"windowIsFloating",true);  mWindowIsFloating=getBooleanThemeValue(resources,"windowIsFloating",true);  findBackground(resources);  findStatusBar(resources,metrics);  findActionBar(resources,metrics);  findNavigationBar(resources,metrics);  boolean hasSystemNavBar=true;  boolean hasNavigationBar=true;  IWindowManager iwm=new IWindowManagerImpl(getContext().getConfiguration(),metrics,Surface.ROTATION_0,hasSystemNavBar,hasNavigationBar);  WindowManagerGlobal_Delegate.setWindowManagerService(iwm);  mInflater=new BridgeInflater(context,params.getProjectCallback());  context.setBridgeInflater(mInflater);  mBlockParser=new BridgeXmlBlockParser(params.getLayoutDescription(),context,false);  return SUCCESS.createResult();}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  public void message(XNetMessage msg){  Z21Message message=new Z21Message(msg);  log.debug("XPressNet Message {} forwarded to z21 Interface as {}",msg,message);  _memo.getTrafficController().sendz21Message(message,this);}  }
class C{  public BusinessObjectDataEntity createTestValidBusinessObjectData(){  return createTestValidBusinessObjectData(AbstractServiceTest.SUBPARTITION_VALUES,AbstractServiceTest.NO_ATTRIBUTE_DEFINITIONS,AbstractServiceTest.NO_ATTRIBUTES);}  }
class C{  public void removeZeppelinConnection(String noteId){  if (zeppelinConnectionMap.containsKey(noteId)) {    Session conn=zeppelinConnectionMap.get(noteId);    if (conn.isOpen()) {      conn.close();    }    zeppelinConnectionMap.remove(noteId);  }  LOG.info("Removed Zeppelin ws connection for the following note {}",noteId);}  }
class C{  public MvcEvent(Dispatcher d,AppEvent ae){  super(d);  this.dispatcher=d;  this.appEvent=ae;}  }
class C{  public final int _hashToIndex(int rawHash){  rawHash+=(rawHash >>> 15);  return (rawHash & _indexMask);}  }
class C{  @SuppressWarnings("unchecked") private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  protected void onFirstTimeLaunched(){}  }
class C{  private void prepareCowardSoldier(){  final SpeakerNPC henry=npcs.get("Henry");  henry.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new AndCondition(new QuestNotCompletedCondition(QUEST_SLOT),new QuestNotInStateCondition(QUEST_SLOT,"map")),ConversationStates.QUEST_OFFERED,"Find my #group, Peter, Tom, and Charles, prove it and I will reward you. Will you do it?",null);  henry.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new OrCondition(new QuestCompletedCondition(QUEST_SLOT),new QuestInStateCondition(QUEST_SLOT,"map")),ConversationStates.ATTENDING,"I'm so sad that most of my friends are dead.",null);  henry.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.YES_MESSAGES,null,ConversationStates.ATTENDING,"Thank you! I'll be waiting for your return.",new SetQuestAction(QUEST_SLOT,"start"));  henry.add(ConversationStates.QUEST_OFFERED,"group",null,ConversationStates.QUEST_OFFERED,"The General sent five of us to explore this area in search for #treasure. So, will you help me find them?",null);  henry.add(ConversationStates.QUEST_OFFERED,"treasure",null,ConversationStates.QUEST_OFFERED,"A big treasure is rumored to be #somewhere in this dungeon. Will you help me find my group?",null);  henry.add(ConversationStates.QUEST_OFFERED,ConversationPhrases.NO_MESSAGES,null,ConversationStates.ATTENDING,"OK. I understand. I'm scared of the #dwarves myself.",new SetQuestAndModifyKarmaAction(QUEST_SLOT,"rejected",-5.0));  final List<ChatAction> actions=new LinkedList<ChatAction>();  actions.add(new IncreaseXPAction(2500));  actions.add(new DropInfostringItemAction("leather legs","tom"));  actions.add(new DropInfostringItemAction("scale armor","peter"));  actions.add(new IncreaseKarmaAction(15.0));  actions.add(new GiveMapAction(false));  henry.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(henry.getName()),new QuestInStateCondition(QUEST_SLOT,"start"),new PlayerHasInfostringItemWithHimCondition("leather legs","tom"),new PlayerHasInfostringItemWithHimCondition("note","charles"),new PlayerHasInfostringItemWithHimCondition("scale armor","peter")),ConversationStates.ATTENDING,"Oh my! Peter, Tom, and Charles are all dead? *cries*. Anyway, here is your reward. And keep the IOU.",new MultipleActions(actions));  henry.add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new AndCondition(new GreetingMatchesNameCondition(henry.getName()),new QuestInStateCondition(QUEST_SLOT,"start"),new NotCondition(new AndCondition(new PlayerHasInfostringItemWithHimCondition("leather legs","tom"),new PlayerHasInfostringItemWithHimCondition("note","charles"),new PlayerHasInfostringItemWithHimCondition("scale armor","peter")))),ConversationStates.ATTENDING,"You didn't prove that you have found them all!",null);  henry.add(ConversationStates.ATTENDING,Arrays.asList("map","group","help"),new OrCondition(new QuestCompletedCondition(QUEST_SLOT),new AndCondition(new HenryQuestCompletedCondition(),new PlayerOwnsItemIncludingBankCondition("map"))),ConversationStates.ATTENDING,"I'm so sad that most of my friends are dead.",null);  henry.add(ConversationStates.ATTENDING,Arrays.asList("map"),new AndCondition(new QuestNotCompletedCondition(QUEST_SLOT),new HenryQuestCompletedCondition(),new NotCondition(new PlayerOwnsItemIncludingBankCondition("map"))),ConversationStates.ATTENDING,"Luckily I drew a copy of the map, but please don't lose this one.",new GiveMapAction(true));  henry.add(ConversationStates.ATTENDING,Arrays.asList("map"),new HenryQuestNotCompletedCondition(),ConversationStates.ATTENDING,"If you find my friends, I will give you the map.",null);}  }
class C{  public final void testRSAOtherPrimeInfo03(){  try {    new RSAOtherPrimeInfo(BigInteger.valueOf(1L),null,BigInteger.valueOf(3L));    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  @Deprecated static public Dcc4PcTrafficController instance(){  return self;}  }
class C{  public void testSelectOneNoValue() throws Exception {  HtmlPage page=getPage("/faces/selectItemEscape.jsp");  assertTrue(-1 != page.asText().indexOf("menu1_Wayne &lt;Gretzky&gt;"));  assertTrue(-1 != page.asText().indexOf("menu1_Bobby +Orr+"));  assertTrue(-1 != page.asText().indexOf("menu1_Brad &amp;{Park}"));  assertTrue(-1 != page.asText().indexOf("menu1_Brad &amp;{Park}"));  assertTrue(-1 != page.asText().indexOf("menu2_Wayne &lt;Gretzky&gt;"));  assertTrue(-1 != page.asText().indexOf("menu2_Bobby +Orr+"));  assertTrue(-1 != page.asText().indexOf("menu2_Brad &amp;{Park}"));  assertTrue(-1 != page.asText().indexOf("menu2_Brad &amp;{Park}"));  assertTrue(-1 != page.asText().indexOf("menu3_Wayne <Gretzky>"));  assertTrue(-1 != page.asText().indexOf("menu3_Bobby +Orr+"));  assertTrue(-1 != page.asText().indexOf("menu3_Brad &{Park}"));  assertTrue(-1 != page.asText().indexOf("menu3_Gordie &Howe&"));}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  RectHV that=(RectHV)other;  if (this.xmin != that.xmin)   return false;  if (this.ymin != that.ymin)   return false;  if (this.xmax != that.xmax)   return false;  if (this.ymax != that.ymax)   return false;  return true;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  if (0 != version.compareTo(BigInteger.valueOf(0))) {    v.add(new DERTaggedObject(true,0,new ASN1Integer(version)));  }  v.add(f);  v.add(a);  v.add(b);  v.add(n);  v.add(bp);  return new DERSequence(v);}  }
class C{  public void deleteValue(String idDescr,String idCampo,String orden){  try {    DbConnection conn=getConnection();    final StringBuffer qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(REFERENCE_CAMPO_ID_DESCR,idDescr)).append(" AND ").append(DBUtils.generateEQTokenField(REFERENCE_CAMPO_ID_CAMPO,idCampo));    if (StringUtils.isNotBlank(orden))     qual.append(" AND ").append(DBUtils.generateEQTokenField(REFERENCE_CAMPO_ORDEN,orden));    DbDeleteFns.delete(conn,TABLE_NAME,qual.toString());  } catch (  Exception e) {    logger.error("Error eliminando campo de tipo referencia para el descriptor " + idDescr,e);    throw new DBException("eliminando campo de tipo referencia",e);  }}  }
class C{  protected void insertUniqueEdge(Edge e){  Edge existingEdge=edgeList.findEqualEdge(e);  if (existingEdge != null) {    Label existingLabel=existingEdge.getLabel();    Label labelToMerge=e.getLabel();    if (!existingEdge.isPointwiseEqual(e)) {      labelToMerge=new Label(e.getLabel());      labelToMerge.flip();    }    Depth depth=existingEdge.getDepth();    if (depth.isNull()) {      depth.add(existingLabel);    }    depth.add(labelToMerge);    existingLabel.merge(labelToMerge);  } else {    edgeList.add(e);  }}  }
class C{  @Override public String toString(){  return toHexString();}  }
class C{  public static String toStringBinary(final byte[] b){  return toStringBinary(b,0,b.length);}  }
class C{  public static boolean isGarbageText(String text){  boolean result=false;  if (text.trim().length() < MIN_INITIAL_TEXT_LENGTH) {    result=true;  } else   if (text.length() > 30) {    result=true;    for (int i=0; i < text.length(); i++) {      if (Character.getType(text.charAt(i)) == Character.SPACE_SEPARATOR) {        result=false;        break;      }    }  }  return result;}  }
class C{  public FastStringBuffer insert(int offset,char c){  int newCount=count + 1;  if (newCount > value.length) {    resizeForMinimum(newCount);  }  System.arraycopy(value,offset,value,offset + 1,count - offset);  value[offset]=c;  count=newCount;  return this;}  }
class C{  public HashMap<String,Object> saveAsHashMap(){  HashMap<String,Object> map=new HashMap<String,Object>();  map.put("Azimuth",new Double(light.getAzimuth()));  map.put("Elevation",new Double(light.getElevation()));  StateUtil.putVector3(map,"Direction",direction);  StateUtil.putColorRGBA(map,"GlobalAmbientIntensity",globalAmbientIntensity);  StateUtil.putColorRGBA(map,"DiffuseIntensity",diffuseIntensity);  StateUtil.putColorRGBA(map,"AmbientIntensity",ambientIntensity);  StateUtil.putColorRGBA(map,"HeadlightIntensity",headlightIntensity);  map.put("LightEnabled",new Boolean(lightEnabled));  map.put("IsLamp",new Boolean(isLamp));  map.put("HeadlightEnabled",new Boolean(headlightEnabled));  StateUtil.putVector3(map,"ReferenceLocation",refLoc);  map.put("Epoch",epoch);  map.put("TimeUTC",new Long(timeUTC));  StateUtil.putColorRGBA(map,"BackgroundColor",background);  return (map);}  }
class C{  @Override public boolean isSigned(int columnIndex){  return true;}  }
class C{  public TungstenProperties createSimpleRuntime() throws Exception {  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,"test");  builder.setRole("master");  builder.addPipeline("master","master",null);  builder.addStage("master","dummy","dummy",null);  builder.addComponent("extractor","dummy",DummyExtractor.class);  builder.addComponent("applier","dummy",DummyApplier.class);  return builder.getConfig();}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (Decode.class.isAssignableFrom(targetType)) {    rVal=true;  }  return (rVal);}  }
class C{  public VcfEvalParamsBuilder baselineSample(final String sampleName){  mBaselineSample=sampleName;  return self();}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Element e,GraphicsNode node){  super.buildGraphicsNode(ctx,e,node);  if (ctx.isInteractive()) {    NodeEventTarget target=(NodeEventTarget)e;    CursorHolder ch=new CursorHolder(CursorManager.DEFAULT_CURSOR);    al=new AnchorListener(ctx.getUserAgent(),ch);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_CLICK,al,false,null);    ctx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_CLICK,al,false);    bl=new CursorMouseOverListener(ctx.getUserAgent(),ch);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOVER,bl,false,null);    ctx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOVER,bl,false);    cl=new CursorMouseOutListener(ctx.getUserAgent(),ch);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOUT,cl,false,null);    ctx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOUT,cl,false);  }}  }
class C{  @PUT @Path("/{resourceServerName}") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public ResourceServerDTO update(@PathParam("resourceServerName") String resourceServerName,ResourceServerDTO resourceServerDTO){  try {    if (!resourceServerName.equals(resourceServerDTO.getName())) {      throw new InvalidArgumentException("resource server name in url path does not match that in request body");    }    ResourceServer resourceServer=ResourceServerMapper.getResourceServer(resourceServerDTO);    getIDMClient().setResourceServer(this.tenant,resourceServer);    return ResourceServerMapper.getResourceServerDTO(getIDMClient().getResourceServer(this.tenant,resourceServer.getName()));  } catch (  NoSuchTenantException|NoSuchResourceServerException e) {    logger.debug("Failed to update resource server '{}' on tenant '{}' due to missing tenant or resource server",resourceServerName,this.tenant,e);    throw new NotFoundException(this.sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException e) {    logger.debug("Failed to update resource server '{}' on tenant '{}' due to a client side error",resourceServerName,this.tenant,e);    throw new BadRequestException(this.sm.getString("res.resourceserver.update.failed",resourceServerName,this.tenant),e);  }catch (  Exception e) {    logger.error("Failed to update resource server '{}' on tenant '{}' due to a server side error",resourceServerName,this.tenant,e);    throw new InternalServerErrorException(this.sm.getString("ec.500"),e);  }}  }
class C{  public static boolean hasNetworkConnection(){  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);  return connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnectedOrConnecting();}  }
class C{  @Override public String toString(){  return toString(0);}  }
class C{  private void open() throws FileNotFoundException, IOException {  fileOutput=new FileOutputStream(file,true);  bufferedOutput=new BufferedOutputStream(fileOutput,bufferSize);  dataOutput=new DataOutputStream(bufferedOutput);  fileOutput.getFD().sync();  offset=fileOutput.getChannel().size();}  }
class C{  public void onAddParticipantFailed(ContactId contact,String reason){  if (sLogger.isActivated()) {    sLogger.info("Add participant request has failed " + reason);  }synchronized (mLock) {    mBroadcaster.broadcastParticipantStatusChanged(mChatId,contact,ParticipantStatus.FAILED);  }}  }
class C{  protected T childValue(T parentValue){  return parentValue;}  }
class C{  public @NonNull JsRuntimeReplFactoryBuilder importClass(@NonNull Class<?> aClass){  mClasses.add(aClass);  return this;}  }
class C{  private void loadCurrencies(){  s_Currencies=new Hashtable<Integer,KeyNamePair>(12);  String SQL="SELECT C_Currency_ID, ISO_Code FROM C_Currency " + "WHERE (IsEMUMember='Y' AND EMUEntryDate<SysDate) OR IsEuro='Y' " + "ORDER BY 2";  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int id=rs.getInt(1);      String name=rs.getString(2);      s_Currencies.put(new Integer(id),new KeyNamePair(id,name));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,SQL,e);  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void addListenerTriplet(Object listenerInstance,Method listenerMethod,Object[] methodArguments){  if (!this.isRunning) {    this.triplets.add(new TripletContainer(listenerInstance,listenerMethod,methodArguments));  }}  }
class C{  public static OFGroup createMPLSTunnelLabel2(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_TUNNEL_LABEL_2 << 24)| (OFDPAGroupType.MPLS_LABEL << 28));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override @DSSafe(DSCat.SAFE_LIST) public boolean add(E object){  if (super.getIndexOf(object) != -1)   return super.add(object);  return getTaintBoolean();}  }
class C{  private DestinationTable withQuery(String query){  checkState(type == TableType.VIEW);  this.query=query;  return this;}  }
class C{  public Workflow execute(List<ProcessInfo> processInfos,String workflowName){  CommonNodeMaintainer nodeMaintainer=new CommonNodeMaintainer();  NodeCollection nc=nodeMaintainer.getNc();  Set<String> printedNodeNames=new HashSet<String>();  if (workflowName == null || workflowName.trim().isEmpty()) {    LOGGER.error(EMPTYERROR);    throw new MetadataException(EMPTYERROR);  }  final String prefixXml="<workflow-app name=\"" + workflowName + "\" xmlns=\"uri:oozie:workflow:0.4\">\n";  String pid=processInfos.get(0).getProcessId().toString();  StringBuilder credentials=new StringBuilder();  credentials.append(isSecurityEnabled(pid,"security"));  final String postfixXml="\n</workflow-app>";  StringBuilder workflowXML=new StringBuilder();  StringBuilder stepXML=new StringBuilder();  LOGGER.info("Starting workflow generation for " + workflowName);  Map<Integer,ProcessInfo> tempProcessInfos=new HashMap<Integer,ProcessInfo>();  for (  ProcessInfo processInfo : processInfos) {    tempProcessInfos.put(processInfo.getProcessId(),processInfo);  }  for (  ProcessInfo processInfo : processInfos) {    LOGGER.debug("processing " + processInfo);    NodeCollection nodeCollection=uniqNodeCollectionTreeMap.get(processInfo.getProcessId());    if (nodeCollection == null) {      nodeCollection=new NodeCollection(processInfo);    }    String[] children=processInfo.getNextProcessIds().split(",");    for (    String child : children) {      LOGGER.debug("Analyzing child: " + child);      Integer childKey=new Integer(child);      NodeCollection childNodeCollection=uniqNodeCollectionTreeMap.get(childKey);      if (childNodeCollection == null) {        childNodeCollection=new NodeCollection(tempProcessInfos.get(childKey));      }      childNodeCollection.addParent(nodeCollection,nodeMaintainer);      nodeCollection.addChild(childNodeCollection,nodeMaintainer);      uniqNodeCollectionTreeMap.put(childKey,childNodeCollection);    }    if (nodeCollection.getHaltStepNode().getToNode().getId().equals(tempProcessInfos.get(nodeCollection.getId()).getParentProcessId())) {      nodeCollection.getHaltStepNode().setToNode(nc.getHaltJobNode());    }    if (tempProcessInfos.get(nodeCollection.getId()).getParentProcessId() == 0) {      OozieNode firstNode=null;      if (nodeCollection.getForkNode() != null) {        LOGGER.info("First node in the workflow is a fork");        firstNode=nodeCollection.getForkNode();      } else {        firstNode=nodeCollection.getChildren().get(0).getInitStepNode();      }      LOGGER.debug("firstNode=" + firstNode.getName());      nc.getRecoveryDecisionNode().setToNode(firstNode);    }    uniqNodeCollectionTreeMap.put(processInfo.getProcessId(),nodeCollection);  }  LOGGER.debug("uniqNodeCollectionTreeMap=" + uniqNodeCollectionTreeMap);  Map<String,OozieNode> oozieNodeMap=new HashMap<String,OozieNode>();  oozieNodeMap.put(nc.getStart().getName(),nc.getStart());  oozieNodeMap.put(nc.getInitJobNode().getName(),nc.getInitJobNode());  LOGGER.debug("nodeMaintainer.restartNodes=" + nodeMaintainer.getRestartNodes());  nc.getRecoveryDecisionNode().setPreviousHaltNodes(nodeMaintainer.getRestartNodes());  oozieNodeMap.put(nc.getRecoveryDecisionNode().getName(),nc.getRecoveryDecisionNode());  for (  Integer id : uniqNodeCollectionTreeMap.keySet()) {    if (tempProcessInfos.get(id).getParentProcessId() == 0) {      uniqNodeCollectionTreeMap.get(id).setActionNode(null);      uniqNodeCollectionTreeMap.get(id).setTermStepNode(null);      uniqNodeCollectionTreeMap.get(id).setHaltStepNode(null);      uniqNodeCollectionTreeMap.get(id).setInitStepNode(null);      nc.setIdForProcessNodes(id);    }    LOGGER.debug("Adding collection for: " + id);    oozieNodeMap.putAll(uniqNodeCollectionTreeMap.get(id).getOozieNodes());    stepXML.append(uniqNodeCollectionTreeMap.get(id).toXML(printedNodeNames));  }  oozieNodeMap.put(nc.getHaltJobNode().getName(),nc.getHaltJobNode());  oozieNodeMap.put(nc.getTermJobNode().getName(),nc.getTermJobNode());  oozieNodeMap.put(nc.getHalt().getName(),nc.getHalt());  oozieNodeMap.put(nc.getKill().getName(),nc.getKill());  LOGGER.debug("oozieNodeMap size=" + oozieNodeMap.size());  workflowXML.append(prefixXml);  workflowXML.append(credentials.toString());  workflowXML.append(nc.getStart().getXML());  workflowXML.append(nc.getInitJobNode().getXML());  workflowXML.append(nc.getRecoveryDecisionNode().getXML());  workflowXML.append(stepXML);  workflowXML.append(nc.getHaltJobNode().getXML());  workflowXML.append(nc.getTermJobNode().getXML());  workflowXML.append(nc.getKill().getXML());  workflowXML.append(nc.getHalt().getXML());  workflowXML.append(postfixXml);  LOGGER.debug("Complete !");  Workflow workflow=new Workflow();  workflow.setXml(workflowXML);  workflow.setDot(DotUtil.getDot(oozieNodeMap.values()));  return workflow;}  }
class C{  public void notifyExternalVDCs(String rawToken){  String tokenId=tokenEncoder.decode(rawToken).getTokenId().toString();  String originatorVDCId=URIUtil.parseVdcIdFromURI(tokenId);  if (!VdcUtil.getLocalShortVdcId().equals(originatorVDCId)) {    log.info("Calling token originator to propagate deletion of token");    boolean failed=false;    try {      ClientResponse resp=geoClientCacheMgt.getGeoClient(originatorVDCId).logoutToken(rawToken,null,false);      if (resp.getStatus() != ClientResponse.Status.OK.getStatusCode()) {        failed=true;      }    } catch (    Exception ex) {      failed=true;    }    if (failed) {      throw RetryableSecurityException.retryables.unableToNotifyTokenOriginatorForLogout(originatorVDCId);    }  }  RequestedTokenMap map=getTokenMap(tokenId);  if (map == null || map.getVDCIDs().isEmpty()) {    return;  }  log.info("This token had potential copies still active in other VDCs.  Notifying...");  for (  String shortId : map.getVDCIDs()) {    try {      ClientResponse resp=geoClientCacheMgt.getGeoClient(shortId).logoutToken(rawToken,null,false);      if (resp.getStatus() != ClientResponse.Status.OK.getStatusCode()) {        log.warn("Unable to successfully verify that remote copy of token was deleted.  It will expire is less than 10 minutes.");      }    } catch (    Exception e) {      log.error("Could not contact remote VDC to invalidate token: {}",shortId);    }    removeRequestingVDC(tokenId,shortId);  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (value == null || value.trim().length() == 0)   errors.add("value",new ActionMessage("errors.required",""));  return errors;}  }
class C{  public boolean canPace(){  return true;}  }
class C{  public static boolean isReadable(final String file){  if (TextUtils.isEmpty(file)) {    Log.e(FileUtils.class,"isReadable(): Null or Empty parameter given");    return false;  }  return isReadable(new File(file));}  }
class C{  @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  if (intent.getExtras() != null) {    String newFilePath=intent.getExtras().getString(EXTRA_NEW_FILE_PATH_STRING);    if (newFilePath != null) {      if (mChooserAdapter == null) {        new GetLipFlipsTask(this).execute();      } else {        File newFile=new File(newFilePath);        mChooserAdapter.add(0,newFile);        checkItems();        scanMedia(new String[]{newFilePath});      }      return;    }    mFilesToDelete=intent.getExtras().getStringArray(EXTRA_DELETE_FILE);    if (mFilesToDelete != null && mFilesToDelete.length > 0) {      onDeleteFilesComplete(mFilesToDelete);    }  }}  }
class C{  protected ProjectDependencyImpl(){  super();}  }
class C{  public ParameterDatabase(java.util.Dictionary map) throws FileNotFoundException, IOException {  this();  label="Dictionary: " + System.identityHashCode(map);  java.util.Enumeration keys=map.keys();  while (keys.hasMoreElements()) {    Object obj=keys.nextElement();    set(new Parameter("" + obj),"" + map.get(obj));  }  for (int x=0; ; x++) {    String s=getProperty("parent." + x);    if (s == null)     return;    if (new File(s).isAbsolute())     parents.addElement(new ParameterDatabase(new File(s))); else     throw new FileNotFoundException("Attempt to load a relative file, but there's no parent file: " + s);  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public int indexOfFromTo(short element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  short[] theElements=elements;  for (int i=from; i <= to; i++) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  @Override public void run(){  if (CollectionUtils.isNotEmpty(schedulerState.getKillableTaskIds())) {    Set<TaskID> killableTasks=Sets.newHashSet(schedulerState.getKillableTaskIds());    Status driverStatus=driverManager.getDriverStatus();    if (Status.DRIVER_RUNNING != driverStatus) {      LOGGER.warn("Cannot kill tasks because Mesos Driver is not running. Status: {}",driverStatus);      return;    }    for (    TaskID taskIdToKill : killableTasks) {      LOGGER.info("Received task kill request for task: {}",taskIdToKill);      if (isPendingTask(taskIdToKill)) {        handlePendingTask(taskIdToKill);      } else {        handleNonPendingTask(taskIdToKill);      }    }  }}  }
class C{  static void fail(String message,Object... args){  errors++;  System.out.printf(message,args);}  }
class C{  private static void WriteFlushRead() throws Throwable {  PairedInputStream pis=new PairedInputStream();  InflaterInputStream iis=new InflaterInputStream(pis);  PairedOutputStream pos=new PairedOutputStream(pis);  pis.setPairedOutputStream(pos);  DeflaterOutputStream dos=new DeflaterOutputStream(pos,true);  check(iis,dos);}  }
class C{  public static <T>void blockingSubscribePrint(Observable<T> observable,String name){  CountDownLatch latch=new CountDownLatch(1);  subscribePrint(observable.finallyDo(null),name);  try {    latch.await();  } catch (  InterruptedException e) {  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcHeaderFile=null;  String arcDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",(int)progress);      arcDataFile=imageFiles[i];      if (!((new File(arcDataFile)).exists())) {        showFeedback("ArcGIS raster file does not exist.");        break;      }      arcHeaderFile=arcDataFile.replace(".flt",".hdr");      if (!arcHeaderFile.contains(".hdr")) {        arcHeaderFile=arcDataFile.replace(".FLT",".hdr");      }      whiteboxHeaderFile=arcHeaderFile.replace(".hdr",".dep");      whiteboxDataFile=arcHeaderFile.replace(".hdr",".tas");      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxDataFile)).delete();      File fromfile=new File(arcDataFile);      File tofile=new File(whiteboxDataFile);      inStream=new FileInputStream(fromfile);      outStream=new FileOutputStream(tofile);      byte[] buffer=new byte[1024];      int length;      while ((length=inStream.read(buffer)) > 0) {        outStream.write(buffer,0,length);      }      inStream.close();      outStream.close();      boolean success=createHeaderFile(arcHeaderFile,whiteboxHeaderFile);      if (!success) {        showFeedback("Arc header file was not read properly. " + "Tool failed to import");        return;      }      output=new WhiteboxRaster(whiteboxHeaderFile,"r");      output.findMinAndMaxVals();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.writeHeaderFile();      output.close();      returnData(whiteboxHeaderFile);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public AbstractDelegatingRepositoryImplConfig(String type,RepositoryImplConfig delegate){  this(type);  setDelegate(delegate);}  }
class C{  public void fireProjectionMethodChanged(){  for (  ProjectorListener listener : listeners) {    listener.projectionMethodChanged();  }}  }
class C{  public boolean isAtDomain(){  return isAtElement(RDE_DOMAIN_URI,"domain");}  }
class C{  public void testToString(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  assertEquals("0.0",ai.toString());  ai.accumulate(1.0);  assertEquals(Double.toString(1.0),ai.toString());}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://ecommerce.org/schema";  String qualifiedName="xml:local";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private int deleteRemoteFiles(Set<Integer> idList){  if (!isDBAvailable())   return 0;  int deletedCount=0;  if (idList != null && !idList.isEmpty()) {    SQLiteDatabase db=getOpenHelper().getWritableDatabase();    write.lock();    try {      for (      String ids : StringSupport.convertListToString(idList,400)) {        deletedCount+=db.delete(TABLE_REMOTEFILES,"id IN (" + ids + ")",null);      }    }  finally {      write.unlock();    }  }  return deletedCount;}  }
class C{  public static RegionUpdater newRegionUpdater(ReplaceEdit originalEdit,ASTNode node,ReferenceUpdater referenceUpdater,ASTMatcher matcher) throws RefactoringException {  if (node instanceof Name) {    return new NameRegionUpdater(originalEdit,referenceUpdater,(Name)node,matcher);  } else   if (node instanceof TextElement) {    return new TextElementRegionUpdater(originalEdit,referenceUpdater,(TextElement)node,matcher);  }  throw new RefactoringException("This AST node type is not supported");}  }
class C{  public CFunctionViewsModel(final IDatabase database,final INaviModule module){  m_module=Preconditions.checkNotNull(module,"IE01215: Module can't be null");  m_database=database;  module.addListener(m_moduleListener);  m_activeDebugger=module.getConfiguration().getDebugger();  if (m_activeDebugger != null) {    final BreakpointManager manager=m_activeDebugger.getBreakpointManager();    manager.addListener(m_breakpointManagerListener);  }  if (module.isLoaded()) {    for (    final IFlowgraphView view : m_module.getContent().getViewContainer().getNativeFlowgraphViews()) {      view.addListener(m_viewListener);    }    for (    final INaviFunction function : m_module.getContent().getFunctionContainer().getFunctions()) {      function.addListener(m_viewListener);    }  }}  }
class C{  public RectangleConstraint toRangeWidth(Range range){  ParamChecks.nullNotPermitted(range,"range");  return new RectangleConstraint(range.getUpperBound(),range,LengthConstraintType.RANGE,this.height,this.heightRange,this.heightConstraintType);}  }
class C{  @Deprecated public AbstractXmlDriver(final NameCoder nameCoder){  super(nameCoder);}  }
class C{  private static <K,V>CacheConfiguration<K,V> cacheCountry(){  CacheConfiguration<K,V> ccfg=cacheConfiguration(COUNTRY_CACHE_NAME);  Collection<QueryEntity> qryEntities=new ArrayList<>();  QueryEntity type=new QueryEntity();  qryEntities.add(type);  type.setKeyType(Integer.class.getName());  type.setValueType(Country.class.getName());  LinkedHashMap<String,String> qryFlds=new LinkedHashMap<>();  qryFlds.put("id","java.lang.Integer");  qryFlds.put("name","java.lang.String");  qryFlds.put("population","java.lang.Integer");  type.setFields(qryFlds);  ccfg.setQueryEntities(qryEntities);  return ccfg;}  }
class C{  public ArrayIndexOutOfBoundsException(int index){  super("Array index out of range: " + index);}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  cipher.init(true,params);}  }
class C{  public MInventoryLineMA(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public Object parse(char[] chars){  if (chars == null) {    throw new IllegalArgumentException("chars must not be null");  }  Object content;  content=createParser().parse(chars);  return content;}  }
class C{  public void clear(){  mCapabilities.clear();}  }
class C{  protected static boolean SI32(long value){  return (value <= 0x7FFFFFFFL) && (value >= 0xFFFFFFFF80000000L);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  private AddNeuronsDialog(final NetworkPanel networkPanel){  this.networkPanel=networkPanel;  baseNeuron=new Neuron(networkPanel.getNetwork(),DEFAULT_NEURON);  networkPanel.clearSelection();}  }
class C{  protected void validateParameterList(NameValuePair[] param){}  }
class C{  public synchronized void undo() throws CannotUndoException {  if (inProgress) {    UndoableEdit edit=editToBeUndone();    if (edit == null) {      throw new CannotUndoException();    }    undoTo(edit);  } else {    super.undo();  }}  }
class C{  public Node addChild(Node parent){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  PerformanceVector evaluate(ExampleSet testSet,Model model) throws OperatorException {  innerTestSetSource.deliver(testSet);  innerModelSource.deliver(model);  getSubprocess(2).execute();  return innerPerformanceSink.getData(PerformanceVector.class);}  }
class C{  @Override public void removeVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.removeVetoableChangeListener(name,vcl);}  }
class C{  boolean isExternalStorageReadable(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    return true;  }  return false;}  }
class C{  @KnownFailure(" Ticket 91 : relies on not supported features: getCatalog, keys") public void test_getPrimaryKeysLjava_lang_StringLjava_lang_StringLjava_lang_String() throws SQLException {  ResultSet rs=meta.getPrimaryKeys(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);  ResultSetMetaData rsmd=rs.getMetaData();  assertTrue("Rows not obtained",rs.next());  int col=rsmd.getColumnCount();  assertEquals("Incorrect number of columns",6,col);  String[] columnNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","KEY_SEQ","PK_NAME"};  for (int c=1; c <= col; ++c) {    assertEquals("Incorrect column name",columnNames[c - 1],rsmd.getColumnName(c));  }  assertEquals("Incorrect table catalogue",conn.getCatalog(),rs.getString("TABLE_CAT").toLowerCase());  assertEquals("Incorrect table schema","",rs.getString("TABLE_SCHEM"));  assertEquals("Incorrect table name",DatabaseCreator.TEST_TABLE1,rs.getString("TABLE_NAME").toLowerCase());  assertEquals("Incorrect column name","id",rs.getString("COLUMN_NAME").toLowerCase());  assertEquals("Incorrect sequence number",1,rs.getShort("KEY_SEQ"));  assertEquals("Incorrect primary key name","primary",rs.getString("PK_NAME").toLowerCase());  rs.close();  conn.close();  try {    meta.getPrimaryKeys(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public NoteUpdater(Article article,String note){  this.article=article;  this.note=note;}  }
class C{  protected void deleteSessionVariables(String sessionId,String... varNames){  if (sessionId.equals("")) {    return;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    Entity.Builder builder=Entity.builder(stateEntity);    StringBuilder delNames=new StringBuilder();    for (    String varName : varNames) {      delNames.append(varName + " ");      builder=builder.remove(varName);    }    datastore.update(builder.build());  } catch (  NullPointerException e) {  } finally {    if (transaction.active()) {      transaction.rollback();    }  }}  }
class C{  public double distanceSq(final Double3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public LongAccumulator(LongBinaryOperator accumulatorFunction,long identity){  this.function=accumulatorFunction;  base=this.identity=identity;}  }
class C{  Property(YearMonth partial,int fieldIndex){  super();  iBase=partial;  iFieldIndex=fieldIndex;}  }
class C{  public static InputStream openStreamFromClasspath(Object obj,String resource){  InputStream readStream=null;  try {    ClassLoader loader=obj.getClass().getClassLoader();    if (loader == null) {      readStream=ClassLoader.getSystemResourceAsStream(resource);    } else {      readStream=loader.getResourceAsStream(resource);    }    if (readStream == null) {      URL stream=resource.getClass().getResource(resource);      if (stream != null)       readStream=stream.openStream();    }  } catch (  Exception ex) {    XRLog.exception("Could not open stream from CLASSPATH: " + resource,ex);  }  return readStream;}  }
class C{  public void exit(){  ((Depth)get()).dec();}  }
class C{  public void start(){  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(_classLoader);    if (!_lifecycle.toStarting())     return;    _startTime=CurrentTime.currentTime();    if (!CurrentTime.isTest()) {      log.info("");      log.info(Version.getFullVersion());      log.info("");      log.info(System.getProperty("os.name") + " " + System.getProperty("os.version")+ " "+ System.getProperty("os.arch"));      log.info(System.getProperty("java.runtime.name") + " " + System.getProperty("java.runtime.version")+ ", "+ System.getProperty("file.encoding")+ ", "+ System.getProperty("user.language"));      log.info(System.getProperty("java.vm.name") + " " + System.getProperty("java.vm.version")+ ", "+ System.getProperty("sun.arch.data.model")+ ", "+ System.getProperty("java.vm.info")+ ", "+ System.getProperty("java.vm.vendor"));      log.info("");      log.info("user.name  = " + System.getProperty("user.name"));    }    startSystems();    _lifecycle.toActive();    for (    AfterServerStartListener listener : _afterStartListeners) {      listener.afterStart();    }  }  finally {    if (!_lifecycle.isActive())     _lifecycle.toError();    thread.setContextClassLoader(oldLoader);  }}  }
class C{  public static boolean updateLastPasswordUpdateAttribute(final PwmApplication pwmApplication,final SessionLabel sessionLabel,final UserIdentity userIdentity) throws ChaiUnavailableException, PwmUnrecoverableException {  final ChaiUser theUser=pwmApplication.getProxiedChaiUser(userIdentity);  boolean success=false;  final LdapProfile ldapProfile=pwmApplication.getConfig().getLdapProfiles().get(userIdentity.getLdapProfileID());  final String updateAttribute=ldapProfile.readSettingAsString(PwmSetting.PASSWORD_LAST_UPDATE_ATTRIBUTE);  if (updateAttribute != null && updateAttribute.length() > 0) {    try {      theUser.writeDateAttribute(updateAttribute,new Date());      LOGGER.debug(sessionLabel,"wrote pwdLastModified update attribute for " + theUser.getEntryDN());      success=true;    } catch (    ChaiOperationException e) {      LOGGER.debug(sessionLabel,"error writing update attribute for user '" + theUser.getEntryDN() + "' "+ e.getMessage());    }  }  return success;}  }
class C{  private FeatureVector loadFeatureVector(int block_id){  int featurePosition=getIntFromByteBuffer(block_id,features);  final int numFeatures=encoding.readId(features,featurePosition);  featurePosition+=EncoderConfiguration.ID_SIZE;  final FeatureVector featureVector=new FeatureVector();  FloatEncoder encoder;  String featureName;  for (int i=0; i < numFeatures; i++) {    final int innerId=encoding.readId(features,featurePosition);    final int outerId=encoding.outerId(innerId);    encoder=encoding.encoder(innerId);    featureName=Vocabulary.word(outerId);    final float value=encoder.read(features,featurePosition);    try {      int index=Integer.parseInt(featureName);      featureVector.increment(index,-value);    } catch (    NumberFormatException e) {      featureVector.increment(featureName,value);    }    featurePosition+=EncoderConfiguration.ID_SIZE + encoder.size();  }  return featureVector;}  }
class C{  @SuppressLint("InflateParams") static Folder fromXml(Launcher launcher){  return (Folder)launcher.getLayoutInflater().inflate(FeatureFlags.LAUNCHER3_ICON_NORMALIZATION ? R.layout.user_folder_icon_normalized : R.layout.user_folder,null);}  }
class C{  protected SparseDoubleMatrix1D(int size,AbstractIntDoubleMap elements,int offset,int stride){  setUp(size,offset,stride);  this.elements=elements;  this.isNoView=false;}  }
class C{  public void moveTo(Object xm1,Object ym1){  add(new Segment(SegType.MOVETO,xm1,ym1));}  }
class C{  protected boolean pinch(float scale){  return false;}  }
class C{  public static Object invalidateKey1(){  try {    Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(region);    region.invalidate("key1");    return eventId;  } catch (  Exception e) {    fail("put failed due to ",e);  }  return null;}  }
class C{  DateTimeParseContext(DateTimeFormatter formatter){  super();  this.formatter=formatter;  parsed.add(new Parsed());}  }
class C{  private Map<String,String> makeWorkerProps(){  Map<String,String> props=new HashMap<>();  props.put(WorkerConfig.INTERNAL_KEY_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.storage.StringConverter");  props.put(WorkerConfig.INTERNAL_VALUE_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.storage.StringConverter");  props.put("internal.key.converter.schemas.enable","false");  props.put("internal.value.converter.schemas.enable","false");  props.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.storage.StringConverter");  props.put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.storage.StringConverter");  props.put("key.converter.schemas.enable","false");  props.put("value.converter.schemas.enable","false");  props.put(WorkerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaBroker.getBrokerAddress());  props.put("offset.storage.file.filename","/tmp/connect.offsets");  props.put(WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_CONFIG,"10");  return props;}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new DataLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;    len-=gapLen;    inOff+=gapLen;    while (len > blockSize) {      System.arraycopy(in,inOff,buf,bufOff,blockSize);      resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);      System.arraycopy(buf,blockSize,buf,0,blockSize);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  public synchronized static WorkflowStateConstant makeStateConstant(String name){  String interned=name.intern();  WorkflowStateConstant result=constantPool.get(interned);  if (result == null) {    result=new WorkflowStateConstant(interned);    constantPool.put(interned,result);  }  return result;}  }
class C{  public void assertNotEqual(float expected,float actual,double minRelativeError,String errorMessage){  TestUtils.assertNotEqual(expected,actual,minRelativeError,errorMessage);}  }
