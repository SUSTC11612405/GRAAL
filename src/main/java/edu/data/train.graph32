class C{  public void previous(){  loadPrevious(timelineStateHolder.positionForPrevious(),new PreviousCallback(timelineStateHolder));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  String name;  Attr setAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("street");  setAttr=testEmployee.setAttributeNode(newAttribute);  name=testEmployee.getAttribute("street");  assertEquals("elementReplaceExistingAttributeAssert","",name);}  }
class C{  public static int constrainedRotation(float rotation){  int r=(int)((rotation % 360) / 90);  r=(r < 0) ? (r + 4) : r;  return r * 90;}  }
class C{  public Builder seconds(Integer seconds){  this.seconds=seconds;  return this;}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID);}  }
class C{  public EnhancedServer remoteConnection(RemoteConnection.Supplier supplier){  RemoteConnection connection=supplier.get();  this.remoteConnections.add(connection);  return this;}  }
class C{  @Override public String toString(){  return store.toString();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.588 -0500",hash_original_method="7A084406CC3B18F733E08ECB30CF0A86",hash_generated_method="891CC4941D384D14DFB199FC6400C0E7") public ElementType rootElementType(){  return theRoot;}  }
class C{  public boolean supportsSQL(){  return filter.supportsSQL();}  }
class C{  private void drawRoute(Set<Plottable> plottables,Graphics2D g,JXMapViewer viewer){  Point2D lastPoint=null;  for (  Plottable plottable : plottables) {    Point2D currentPoint=viewer.getTileFactory().geoToPixel(plottable.getGeoPosition(),viewer.getZoom());    if (lastPoint != null) {      g.drawLine((int)lastPoint.getX(),(int)lastPoint.getY(),(int)currentPoint.getX(),(int)currentPoint.getY());    }    lastPoint=currentPoint;  }}  }
class C{  public void reconnectCommand(){  sendMessage(CMD_RECONNECT);}  }
class C{  XPath createMatchPatternXPath(String str,ElemTemplateElement owningTemplate) throws javax.xml.transform.TransformerException {  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  XPath xpath=new XPath(str,owningTemplate,this,XPath.MATCH,handler,m_funcTable);  xpath.callVisitors(xpath,new ExpressionVisitor(getStylesheetRoot()));  return xpath;}  }
class C{  public MatteBorder(Icon tileIcon){  this(-1,-1,-1,-1,tileIcon);}  }
class C{  public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_ModesAndMeans == null) {    double sumOfWeights=getInputFormat().sumOfWeights();    double[][] counts=new double[getInputFormat().numAttributes()][];    for (int i=0; i < getInputFormat().numAttributes(); i++) {      if (getInputFormat().attribute(i).isNominal()) {        counts[i]=new double[getInputFormat().attribute(i).numValues()];        if (counts[i].length > 0)         counts[i][0]=sumOfWeights;      }    }    double[] sums=new double[getInputFormat().numAttributes()];    for (int i=0; i < sums.length; i++) {      sums[i]=sumOfWeights;    }    double[] results=new double[getInputFormat().numAttributes()];    for (int j=0; j < getInputFormat().numInstances(); j++) {      Instance inst=getInputFormat().instance(j);      for (int i=0; i < inst.numValues(); i++) {        if (!inst.isMissingSparse(i)) {          double value=inst.valueSparse(i);          if (inst.attributeSparse(i).isNominal()) {            if (counts[inst.index(i)].length > 0) {              counts[inst.index(i)][(int)value]+=inst.weight();              counts[inst.index(i)][0]-=inst.weight();            }          } else           if (inst.attributeSparse(i).isNumeric()) {            results[inst.index(i)]+=inst.weight() * inst.valueSparse(i);          }        } else {          if (inst.attributeSparse(i).isNominal()) {            if (counts[inst.index(i)].length > 0) {              counts[inst.index(i)][0]-=inst.weight();            }          } else           if (inst.attributeSparse(i).isNumeric()) {            sums[inst.index(i)]-=inst.weight();          }        }      }    }    m_ModesAndMeans=new double[getInputFormat().numAttributes()];    for (int i=0; i < getInputFormat().numAttributes(); i++) {      if (getInputFormat().attribute(i).isNominal()) {        if (counts[i].length == 0)         m_ModesAndMeans[i]=Utils.missingValue(); else         m_ModesAndMeans[i]=(double)Utils.maxIndex(counts[i]);      } else       if (getInputFormat().attribute(i).isNumeric()) {        if (Utils.gr(sums[i],0)) {          m_ModesAndMeans[i]=results[i] / sums[i];        }      }    }    for (int i=0; i < getInputFormat().numInstances(); i++) {      convertInstance(getInputFormat().instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  private void dispatch(byte[] clslbls,MessageAndMetadata<byte[],byte[]> message,KafkaDataMessage msg,byte[] outSipHashKey,byte[] outAESKey){  if (null == this.subscriptions || this.subscriptions.isEmpty()) {    return;  }  long classid=msg.getClassId();  long labelsid=msg.getLabelsId();  for (int i=0; i < 8; i++) {    clslbls[7 - i]=(byte)(classid & 0xff);    clslbls[15 - i]=(byte)(labelsid & 0xff);    classid>>>=8;    labelsid>>>=8;  }  BigInteger id=new BigInteger(clslbls);  Map<String,Set<BigInteger>> subs=this.subscriptions;  boolean msgReady=this.identicalAESKeys && this.identicalSipHashKeys;  byte[] key=message.key();  byte[] value=null;  Map<String,String> labels=new HashMap<String,String>();  for (  String topic : subs.keySet()) {    if (!subs.get(topic).contains(id)) {      continue;    }    KeyedMessage<byte[],byte[]> outmsg=null;    if (msgReady) {      value=message.message();      outmsg=new KeyedMessage<byte[],byte[]>(topic,key,value);    } else {      if (null == value) {        TSerializer serializer=new TSerializer(new TCompactProtocol.Factory());        try {          value=serializer.serialize(msg);        } catch (        TException te) {          continue;        }        if (null != outAESKey) {          value=CryptoUtils.wrap(outAESKey,value);        }        if (null != outSipHashKey) {          value=CryptoUtils.addMAC(outSipHashKey,value);        }      }      outmsg=new KeyedMessage<byte[],byte[]>(topic,key,value);    }    try {      sendDataMessage(outmsg);    } catch (    IOException ioe) {    }  }  try {    sendDataMessage(null);  } catch (  IOException ioe) {  }}  }
class C{  private int numParameters(){  return m_numParameters;}  }
class C{  public static boolean isPubKeyCanonical(byte[] pubkey){  if (pubkey.length < 33)   return false;  if (pubkey[0] == 0x04) {    if (pubkey.length != 65)     return false;  } else   if (pubkey[0] == 0x02 || pubkey[0] == 0x03) {    if (pubkey.length != 33)     return false;  } else   return false;  return true;}  }
class C{  public static InsertIntoClause create(String streamName){  return new InsertIntoClause(streamName);}  }
class C{  public IgniteFutureTimeoutException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  @Deprecated public RMISecurityException(String name,String arg){  this(name);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public void quorumLost(Collection<InternalDistributedMember> failures,NetView view){  boolean notify=failures.size() > 1;  if (!notify) {    notify=services.getConfig().isNetworkPartitionDetectionEnabled();  }  if (notify) {    List<InternalDistributedMember> remaining=new ArrayList<>(view.getMembers());    remaining.removeAll(failures);    if (inhibitForceDisconnectLogging) {      if (logger.isDebugEnabled()) {        logger.debug("<ExpectedException action=add>Possible loss of quorum</ExpectedException>");      }    }    logger.fatal(LocalizedMessage.create(LocalizedStrings.GroupMembershipService_POSSIBLE_LOSS_OF_QUORUM_DETECTED,new Object[]{failures.size(),failures}));    if (inhibitForceDisconnectLogging) {      if (logger.isDebugEnabled()) {        logger.debug("<ExpectedException action=remove>Possible loss of quorum</ExpectedException>");      }    }    try {      this.listener.quorumLost(new HashSet<>(failures),remaining);    } catch (    CancelException e) {    }  }}  }
class C{  public Timestamp(Date stamp,String format){  super();  m_Stamp=stamp;  setFormat(format);}  }
class C{  public boolean isVirtualColumn(int index){  if (index < 0 || index >= m_columns.length)   return true;  return m_columns[index].ColumnSQL != null && m_columns[index].ColumnSQL.length() > 0;}  }
class C{  private void handleInput(HTMLElement element,int align){  String type=element.getAttributeById(HTMLElement.ATTR_TYPE);  if (type == null) {    return;  }  int typeID=INPUT_TYPES.indexOf(type.toLowerCase());  if (typeID == -1) {    if (htmlCallback != null) {      if (!htmlCallback.parsingError(HTMLCallback.ERROR_ATTIBUTE_VALUE_INVALID,element.getTagName(),element.getAttributeName(new Integer(HTMLElement.ATTR_TYPE)),type,"Unsupported input type '" + type + "'. Supported types: text, password, checkbox, radio, submit, reset, hidden, image")) {        cancel();      }    }    return;  }  String name=element.getAttributeById(HTMLElement.ATTR_NAME);  String id=element.getAttributeById(HTMLElement.ATTR_ID);  String value=element.getAttributeById(HTMLElement.ATTR_VALUE);  if (value == null) {    value="";  }  Component cmp=null;switch (typeID) {case INPUT_CHECKBOX:    CheckBox cb=new CheckBox();  if (element.getAttributeById(HTMLElement.ATTR_CHECKED) != null) {    cb.setSelected(true);  }cmp=cb;if (curForm != null) {curForm.addCheckBox(name,cb,value);}break;case INPUT_HIDDEN:if (curForm != null) {curForm.addInput(name,value,null);}break;case INPUT_EMAIL:case INPUT_TEXT:case INPUT_PASSWORD:TextField tf=new TextField(value);tf.setLeftAndRightEditingTrigger(false);if (typeID == INPUT_PASSWORD) {tf.setConstraint(TextField.PASSWORD);}if (typeID == INPUT_EMAIL) {tf.setConstraint(TextField.EMAILADDR);}if (SUPPORT_INPUT_FORMAT) {HTMLInputFormat inputFormat=HTMLInputFormat.getInputFormat(element.getAttributeById(HTMLElement.ATTR_FORMAT));if (inputFormat != null) {tf=(TextField)inputFormat.applyConstraints(tf);if (curForm != null) {curForm.setInputFormat(tf,inputFormat);}}String emptyOk=element.getAttributeById(HTMLElement.ATTR_EMPTYOK);if ((emptyOk != null) && (curForm != null)) {if (emptyOk.equalsIgnoreCase("true")) {curForm.setEmptyOK(tf,true);} else if (emptyOk.equalsIgnoreCase("false")) {curForm.setEmptyOK(tf,false);}}}int size=getInt(element.getAttributeById(HTMLElement.ATTR_SIZE));int maxlen=getInt(element.getAttributeById(HTMLElement.ATTR_MAXLENGTH));if (size == 0) {size=DEFAULT_TEXTFIELD_SIZE;}if (maxlen != 0) {tf.setMaxSize(maxlen);if (size > maxlen) {size=maxlen;}}tf.setPreferredW(tf.getStyle().getFont().stringWidth("W") * size);tf.getSelectedStyle().setFont(font.getFont());tf.getUnselectedStyle().setFont(font.getFont());if ((!PROCESS_HTML_MP1_ONLY) && (element.getAttributeById(HTMLElement.ATTR_READONLY) != null)) {tf.setEditable(false);}cmp=tf;if (curForm != null) {curForm.addInput(name,cmp,value);textfieldsToForms.put(tf,curForm);}break;case INPUT_RADIO:RadioButton rb=new RadioButton(" ");if (element.getAttributeById(HTMLElement.ATTR_CHECKED) != null) {rb.setSelected(true);}cmp=rb;if (curForm != null) {curForm.addRadioButton(name,rb,value);}break;case INPUT_RESET:Command resetCmd=null;if (curForm != null) {resetCmd=curForm.createResetCommand(value);}if (resetCmd == null) {resetCmd=new Command(getUIManager().localize("html.reset",HTMLForm.DEFAULT_RESET_TEXT));}Button resetButton=new Button(resetCmd);cmp=resetButton;break;case INPUT_BUTTON:case INPUT_SUBMIT:Command submitCmd=null;if (curForm != null) {submitCmd=curForm.createSubmitCommand(name,value);}if (submitCmd == null) {submitCmd=new Command(value.equals("") ? value=getUIManager().localize("html.submit",HTMLForm.DEFAULT_SUBMIT_TEXT) : value);}Button submitButton=new Button(submitCmd);cmp=submitButton;break;case INPUT_IMAGE:submitCmd=null;if (curForm != null) {submitCmd=curForm.createSubmitCommand(name,value);}handleImage(element,align,submitCmd);break;}if (cmp != null) {if ((!PROCESS_HTML_MP1_ONLY) && (element.getAttributeById(HTMLElement.ATTR_DISABLED) != null)) {cmp.setEnabled(false);}String aKey=element.getAttributeById(HTMLElement.ATTR_ACCESSKEY);if ((aKey != null) && (aKey.length() == 1)) {addAccessKey(aKey.charAt(0),cmp,false);}if (eventsListener != null) {eventsListener.registerComponent(cmp,element);}element.setAssociatedComponents(cmp);if ((curForm != null) && (curForm.action == null)) {cmp.setEnabled(false);} else if (firstFocusable == null) {firstFocusable=cmp;}if (id != null) {inputFields.put(id,cmp);}}addCmp(cmp,align);}  }
class C{  public static final byte[] inflate(byte[] in) throws IOException {  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);  InflaterInputStream inStream=new InflaterInputStream(new ByteArrayInputStream(in));  byte[] buf=new byte[BUF_SIZE];  while (true) {    int size=inStream.read(buf);    if (size <= 0)     break;    outStream.write(buf,0,size);  }  outStream.close();  return outStream.toByteArray();}  }
class C{  public RegistrationException(){  super();}  }
class C{  private void sumUsingPrimitiveStream(){  int sumQuantity=trades.stream().mapToInt(null).sum();  System.out.println("Total quantity (using primitive stream):" + sumQuantity);}  }
class C{  public static NSObject parse(Document doc) throws PropertyListFormatException, IOException, ParseException {  DocumentType docType=doc.getDoctype();  if (docType == null) {    if (!doc.getDocumentElement().getNodeName().equals("plist")) {      throw new UnsupportedOperationException("The given XML document is not a property list.");    }  } else   if (!docType.getName().equals("plist")) {    throw new UnsupportedOperationException("The given XML document is not a property list.");  }  Node rootNode;  if (doc.getDocumentElement().getNodeName().equals("plist")) {    List<Node> rootNodes=filterElementNodes(doc.getDocumentElement().getChildNodes());    if (rootNodes.isEmpty()) {      throw new PropertyListFormatException("The given XML property list has no root element!");    } else     if (rootNodes.size() == 1) {      rootNode=rootNodes.get(0);    } else {      throw new PropertyListFormatException("The given XML property list has more than one root element!");    }  } else {    rootNode=doc.getDocumentElement();  }  return parseObject(rootNode);}  }
class C{  public void addOrder(String columnName,boolean ascending){  if (columnName == null) {    return;  }  for (int i=0; i < columns.size(); i++) {    if (!columnName.equals(columns.get(i).getData())) {      continue;    }    order.add(new Order(i,ascending ? "asc" : "desc"));  }}  }
class C{  public static synchronized boolean initializeRealtimeClasses(){  final Initializer initializer=new Initializer(OSGiServices.class.getClassLoader());  initializer.loadClass(MathLib.class);  initializer.loadClass(Text.class);  initializer.loadClass(TypeFormat.class);  initializer.loadClass(Struct.class);  initializer.loadClass(BitSet.class);  initializer.loadClass(Index.class);  initializer.loadClass(JAXBAnnotatedObjectReaderImpl.class);  initializer.loadClass(JAXBAnnotatedObjectWriterImpl.class);  initializer.loadClass(XMLStreamReaderImpl.class);  initializer.loadClass(XMLStreamWriterImpl.class);  return initializer.initializeLoadedClasses();}  }
class C{  public String findURIFromDoc(int owner){  int n=m_sourceTree.size();  for (int i=0; i < n; i++) {    SourceTree sTree=(SourceTree)m_sourceTree.elementAt(i);    if (owner == sTree.m_root)     return sTree.m_url;  }  return null;}  }
class C{  public speciesOrGridDisplayStatement createspeciesOrGridDisplayStatement(){  speciesOrGridDisplayStatementImpl speciesOrGridDisplayStatement=new speciesOrGridDisplayStatementImpl();  return speciesOrGridDisplayStatement;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:45.068 -0500",hash_original_method="5A39796CA8340A67B1FFF4D32268D0FF",hash_generated_method="519CB9D5598641D49CD5C6D24A5E2D01") private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  public synchronized void merge(GTSEncoder encoder) throws IOException {  if (0 == this.size() && this.baseTimestamp == encoder.baseTimestamp && Arrays.equals(this.wrappingKey,encoder.wrappingKey)) {    this.reset(encoder);    return;  }  if (this.baseTimestamp != encoder.baseTimestamp || !Arrays.equals(this.wrappingKey,encoder.wrappingKey) || this.lastTimestamp != encoder.initialTimestamp || this.lastGeoXPPoint != encoder.initialGeoXPPoint || this.lastElevation != encoder.initialElevation || this.lastLongValue != encoder.initialLongValue || this.lastDoubleValue != encoder.initialDoubleValue || this.lastBDValue != encoder.initialBDValue || this.lastStringValue != encoder.initialStringValue) {    GTSDecoder decoder=encoder.getDecoder(true);    while (decoder.next()) {      this.addValue(decoder.getTimestamp(),decoder.getLocation(),decoder.getElevation(),decoder.getValue());    }  } else {    this.stream.write(encoder.getBytes());    this.lastTimestamp=encoder.lastTimestamp;    this.lastElevation=encoder.lastElevation;    this.lastGeoXPPoint=encoder.lastGeoXPPoint;    this.lastLongValue=encoder.lastLongValue;    this.lastBDValue=encoder.lastBDValue;    this.lastDoubleValue=encoder.lastDoubleValue;    this.lastStringValue=encoder.lastStringValue;    this.count+=encoder.getCount();  }}  }
class C{  public static int read(InputStream in,byte[] b,int off,int len) throws IOException {  int cnt=0;  while (cnt < len) {    int readOnce=in.read(b,off + cnt,len - cnt);    if (readOnce <= 0)     break;    cnt+=readOnce;  }  return cnt;}  }
class C{  public void write(String str,int off,int len){  int newcount=count + len;  if (newcount > buf.length) {    expandCapacity(newcount);  }  str.getChars(off,off + len,buf,count);  count=newcount;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static double[] convertFloatsToDoubles(float[] input,double[] output){  if (input == null || output == null)   return output;  for (int i=0; i < input.length; ++i) {    output[i]=(double)input[i];  }  return output;}  }
class C{  public final Region createRegion(final String name,final RegionAttributes attributes) throws CacheException {  return createRegion(name,"root",attributes);}  }
class C{  public int parseInt() throws SyntaxError {  String str=parseArg();  if (argWasQuoted())   throw new SyntaxError("Expected double instead of quoted string:" + str);  int value=Integer.parseInt(str);  return value;}  }
class C{  public TerminalSeq(Iterator<Terminal> iterator){  this.terminals=new LinkedList<Terminal>();  while (iterator.hasNext()) {    this.terminals.add(iterator.next());  }}  }
class C{  public Builder addEncodedQueryParameter(String encodedName,String encodedValue){  if (encodedName == null) {    throw new IllegalArgumentException("encodedName == null");  }  if (encodedQueryNamesAndValues == null) {    encodedQueryNamesAndValues=new ArrayList<>();  }  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,false,true,true));  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,false,true,true) : null);  return this;}  }
class C{  public boolean isRequestOneToOneDeliveryDisplayedReportsEnabled(){  return mRcsSettings.isImReportsActivated() && !mRcsSettings.isAlbatrosRelease();}  }
class C{  static void calculateWeights(final Path best){  calculateWeights(best,best.getCalledIncluded(),best.getBaselineIncluded());}  }
class C{  private void refreshConfigurables(String serverName){  ConfigurableController controller=remoteControllers.get(serverName);  if (controller.getModel().getSource().isConnected()) {    controller.getView().refreshConfigurables(serverName);  }}  }
class C{  private void pause(){  noxItemCatalog.pause();  noxItemCatalog.deleteObserver(catalogObserver);}  }
class C{  private List<String> missingFood(final Player player,final boolean hash){  final List<String> result=new LinkedList<String>();  String doneText=player.getQuest(QUEST_SLOT);  if (doneText == null) {    doneText="";  }  final List<String> done=Arrays.asList(doneText.split(";"));  for (  String ingredient : NEEDED_FOOD) {    if (!done.contains(ingredient)) {      if (hash) {        ingredient="#" + ingredient;      }      result.add(ingredient);    }  }  return result;}  }
class C{  private void updateThisSwingSet(){  if (isApplet()) {    SwingUtilities.updateComponentTreeUI(getApplet());  } else {    JFrame frame=getFrame();    if (frame == null) {      SwingUtilities.updateComponentTreeUI(this);    } else {      SwingUtilities.updateComponentTreeUI(frame);    }  }  SwingUtilities.updateComponentTreeUI(popupMenu);  if (aboutBox != null) {    SwingUtilities.updateComponentTreeUI(aboutBox);  }}  }
class C{  UsageLogging(Properties licenseProperties,String modulename,UUID runId,File configFileOverride,boolean suppress) throws IOException {  final String usageValue=licenseProperties.getProperty(REQUIRE_USAGE);  mRequireUsage=usageValue != null && Boolean.valueOf(usageValue);  final String destinationValue=licenseProperties.getProperty(USAGE_DESTINATION);  mUsageDestination=destinationValue == null ? UsageDestination.NONE : UsageDestination.valueOf(destinationValue.toUpperCase(Locale.ROOT));  mUsageConfiguration=configFileOverride == null ? new UsageConfiguration() : new UsageConfiguration(configFileOverride);  mModuleName=modulename;  mRunId=runId;  if (suppress) {    mClient=new NullUsageLoggingClient();  } else {    if (mUsageConfiguration.isEnabled() && mUsageConfiguration.getUsageHost() != null) {      mClient=new HttpUsageLoggingClient(mUsageConfiguration.getUsageHost(),mUsageConfiguration,requireUsage());    } else     if (mUsageConfiguration.isEnabled() && allowFileLogging() && mUsageConfiguration.getUsageDir() != null) {      mClient=new FileUsageLoggingClient(new File(mUsageConfiguration.getUsageDir()),mUsageConfiguration,requireUsage());    } else     if (requireUsage()) {      throw new NoTalkbackSlimException("Usage logging is required by license, but has not been correctly configured during install. " + SEE_MANUAL);    } else {      mClient=new NullUsageLoggingClient();    }  }}  }
class C{  public static boolean askForPermissions(){  if (hasPermissions())   return true;  if (sessionStart()) {    SuperUserCommand superUserCommand=new SuperUserCommand("echo 'root'");    Logger.getInstance().logInfo("SuperUser","askForPermissions");    if (superUserCommand.execute()) {      String[] output=superUserCommand.getStandardOutput();      if (output.length >= 1 && output[0].equals("root")) {        return true;      }    }  }  sessionStop();  return false;}  }
class C{  public void dispatchCUISelection(Actor actor){  checkNotNull(actor);  if (!hasCUISupport) {    return;  }  if (selector instanceof CUIRegion) {    CUIRegion tempSel=(CUIRegion)selector;    if (tempSel.getProtocolVersion() > cuiVersion) {      actor.dispatchCUIEvent(new SelectionShapeEvent(tempSel.getLegacyTypeID()));      tempSel.describeLegacyCUI(this,actor);    } else {      actor.dispatchCUIEvent(new SelectionShapeEvent(tempSel.getTypeID()));      tempSel.describeCUI(this,actor);    }  }}  }
class C{  public void addJournal(VJournal journal){  addComponent(journal);}  }
class C{  public static ThreadSafeFrame wrap(Object syncObj,Frame frame){  if (frame != null)   return new ThreadSafeFrame(syncObj,frame); else   return null;}  }
class C{  public T onmousemove(String value){  return attr("onmousemove",value);}  }
class C{  @Util public static void handleError(){  params.flash();  Validation.keep();  redirectToReferrer();}  }
class C{  protected void assertChanges(VirtualFile[] virtualFiles,FileStatus[] fileStatuses) throws VcsException {  Map<FilePath,Change> result=getChanges(virtualFiles);  for (int i=0; i < virtualFiles.length; i++) {    FilePath fp=VcsUtil.getFilePath(virtualFiles[i]);    FileStatus status=fileStatuses[i];    if (status == null) {      assertFalse("File [" + tos(fp) + " shouldn't be in the changelist, but it was.",result.containsKey(fp));      continue;    }    assertTrue("File [" + tos(fp) + "] didn't change. Changes: "+ tos(result),result.containsKey(fp));    assertEquals("File statuses don't match for file [" + tos(fp) + "]",result.get(fp).getFileStatus(),status);  }}  }
class C{  public String meanStddevTipText(){  return "The mean and stddev, in case of gaussian.";}  }
class C{  private static int capacityForInitSize(int size){  int result=(size >> 1) + size;  return (result & ~(MAXIMUM_CAPACITY - 1)) == 0 ? result : MAXIMUM_CAPACITY;}  }
class C{  public ExtendedResolver() throws UnknownHostException {  init();  String[] servers=ResolverConfig.getCurrentConfig().servers();  if (servers != null) {    for (int i=0; i < servers.length; i++) {      Resolver r=new SimpleResolver(servers[i]);      r.setTimeout(quantum);      resolvers.add(r);    }  } else   resolvers.add(new SimpleResolver());}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double powerValue=0;  double z=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      powerValue=Double.parseDouble(args[i]);    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (powerValue < 0.1) {      powerValue=0.1;    }    if (powerValue > 20) {      powerValue=20;    }    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("blueyellow.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          if (slope[col] != 0) {            z=(Math.pow(area[col],powerValue)) * (Math.tan(Math.toRadians(slope[col])));          } else {            z=0;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int feed(IBytesConsumer consumer,int maxbytes){  if (pendinglen == 0)   refillBuffer();  int tofeed=maxbytes >= 0 && maxbytes < pendinglen ? maxbytes : pendinglen;  int n=0;  if (tofeed > 0) {    n=consumer.consume(buf,offset,tofeed);    if (n > 0) {      offset+=n;      pendinglen-=n;    }  }  if (n < 1 && failIfNoFeed)   throw new PngjInputException("Failed to feed bytes (premature ending?)");  return n;}  }
class C{  private void initValues(){  IPreferenceStore store=doGetPreferenceStore();  final String storedItems=store.getString(CheckerPreferences.PREF_CHECKER_CUSTOM_CLASSES);  if (!storedItems.equals("")) {    customCheckers.setItems(storedItems.split(","));  }}  }
class C{  public static Matrix makeW(int d,int h,Random r){  double W_[][]=MatrixUtils.multiply(MatrixUtils.randn(d + 1,h + 1,r),0.20);  MatrixUtils.fillRow(W_,0,0.0);  MatrixUtils.fillCol(W_,0,0.0);  return new Matrix(W_);}  }
class C{  public boolean removeSpringConfig(SpringConfig springConfig){  if (springConfig == null) {    throw new IllegalArgumentException("springConfig is required");  }  return mSpringConfigMap.remove(springConfig) != null;}  }
class C{  public void listen(GridOffHeapEventListener lsnr){  this.lsnr=lsnr;}  }
class C{  private Future<StreamState> streamRanges(Map<String,Multimap<Range<Token>,InetAddress>> rangesToStreamByKeyspace){  Map<String,Map<InetAddress,List<Range<Token>>>> sessionsToStreamByKeyspace=new HashMap<>();  for (  Map.Entry<String,Multimap<Range<Token>,InetAddress>> entry : rangesToStreamByKeyspace.entrySet()) {    String keyspace=entry.getKey();    Multimap<Range<Token>,InetAddress> rangesWithEndpoints=entry.getValue();    if (rangesWithEndpoints.isEmpty())     continue;    Map<InetAddress,List<Range<Token>>> rangesPerEndpoint=new HashMap<>();    for (    Map.Entry<Range<Token>,InetAddress> endPointEntry : rangesWithEndpoints.entries()) {      Range<Token> range=endPointEntry.getKey();      InetAddress endpoint=endPointEntry.getValue();      List<Range<Token>> curRanges=rangesPerEndpoint.get(endpoint);      if (curRanges == null) {        curRanges=new LinkedList<>();        rangesPerEndpoint.put(endpoint,curRanges);      }      curRanges.add(range);    }    sessionsToStreamByKeyspace.put(keyspace,rangesPerEndpoint);  }  StreamPlan streamPlan=new StreamPlan("Unbootstrap");  for (  Map.Entry<String,Map<InetAddress,List<Range<Token>>>> entry : sessionsToStreamByKeyspace.entrySet()) {    String keyspaceName=entry.getKey();    Map<InetAddress,List<Range<Token>>> rangesPerEndpoint=entry.getValue();    for (    Map.Entry<InetAddress,List<Range<Token>>> rangesEntry : rangesPerEndpoint.entrySet()) {      List<Range<Token>> ranges=rangesEntry.getValue();      InetAddress newEndpoint=rangesEntry.getKey();      InetAddress preferred=SystemKeyspace.getPreferredIP(newEndpoint);      streamPlan.transferRanges(newEndpoint,preferred,keyspaceName,ranges);    }  }  return streamPlan.execute();}  }
class C{  public boolean hasCharacteristic(int characteristic){  return (characteristics & characteristic) > 0;}  }
class C{  public Vertex(Graph<V,E> source,Type type,V vertex){  super(source,type);  this.vertex=vertex;}  }
class C{  private void sendNextSketchBlock(){  byte[] rawBlock=sketchBlocksToSend.get(currSketchBlockNum);  Buffer block=new Buffer();  block.write(rawBlock);  sendMessage(BeanMessageID.BL_FW_BLOCK,block);  resetSketchBlockSendTimeout();  int blocksSent=currSketchBlockNum + 1;  int totalBlocks=sketchBlocksToSend.size();  onSketchUploadProgress.onResult(UploadProgress.create(blocksSent,totalBlocks));  currSketchBlockNum++;  if (currSketchBlockNum >= sketchBlocksToSend.size()) {    resetSketchUploadState();  }}  }
class C{  public String metaphone(String txt){  boolean hard=false;  if ((txt == null) || (txt.length() == 0)) {    return "";  }  if (txt.length() == 1) {    return txt.toUpperCase();  }  char[] inwd=txt.toUpperCase().toCharArray();  StringBuffer local=new StringBuffer(40);  StringBuffer code=new StringBuffer(10);switch (inwd[0]) {case 'K':case 'G':case 'P':    if (inwd[1] == 'N') {      local.append(inwd,1,inwd.length - 1);    } else {      local.append(inwd);    }  break;case 'A':if (inwd[1] == 'E') {  local.append(inwd,1,inwd.length - 1);} else {  local.append(inwd);}break;case 'W':if (inwd[1] == 'R') {local.append(inwd,1,inwd.length - 1);break;}if (inwd[1] == 'H') {local.append(inwd,1,inwd.length - 1);local.setCharAt(0,'W');} else {local.append(inwd);}break;case 'X':inwd[0]='S';local.append(inwd);break;default :local.append(inwd);}int wdsz=local.length();int n=0;while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {char symb=local.charAt(n);if ((symb != 'C') && (isPreviousChar(local,n,symb))) {n++;} else {switch (symb) {case 'A':case 'E':case 'I':case 'O':case 'U':if (n == 0) {code.append(symb);}break;case 'B':if (isPreviousChar(local,n,'M') && isLastChar(wdsz,n)) {break;}code.append(symb);break;case 'C':if (isPreviousChar(local,n,'S') && !isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {break;}if (regionMatch(local,n,"CIA")) {code.append('X');break;}if (!isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {code.append('S');break;}if (isPreviousChar(local,n,'S') && isNextChar(local,n,'H')) {code.append('K');break;}if (isNextChar(local,n,'H')) {if ((n == 0) && (wdsz >= 3) && isVowel(local,2)) {code.append('K');} else {code.append('X');}} else {code.append('K');}break;case 'D':if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'G') && (this.frontv.indexOf(local.charAt(n + 2)) >= 0)) {code.append('J');n+=2;} else {code.append('T');}break;case 'G':if (isLastChar(wdsz,n + 1) && isNextChar(local,n,'H')) {break;}if (!isLastChar(wdsz,n + 1) && isNextChar(local,n,'H') && !isVowel(local,n + 2)) {break;}if ((n > 0) && (regionMatch(local,n,"GN") || regionMatch(local,n,"GNED"))) {break;}if (isPreviousChar(local,n,'G')) {hard=true;} else {hard=false;}if (!isLastChar(wdsz,n) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {code.append('J');} else {code.append('K');}break;case 'H':if (isLastChar(wdsz,n)) {break;}if ((n > 0) && (this.varson.indexOf(local.charAt(n - 1)) >= 0)) {break;}if (isVowel(local,n + 1)) {code.append('H');}break;case 'F':case 'J':case 'L':case 'M':case 'N':case 'R':code.append(symb);break;case 'K':if (n > 0) {if (!isPreviousChar(local,n,'C')) {code.append(symb);}} else {code.append(symb);}break;case 'P':if (isNextChar(local,n,'H')) {code.append('F');} else {code.append(symb);}break;case 'Q':code.append('K');break;case 'S':if (regionMatch(local,n,"SH") || regionMatch(local,n,"SIO") || regionMatch(local,n,"SIA")) {code.append('X');} else {code.append('S');}break;case 'T':if (regionMatch(local,n,"TIA") || regionMatch(local,n,"TIO")) {code.append('X');break;}if (regionMatch(local,n,"TCH")) {break;}if (regionMatch(local,n,"TH")) {code.append('0');} else {code.append('T');}break;case 'V':code.append('F');break;case 'W':case 'Y':if (!isLastChar(wdsz,n) && isVowel(local,n + 1)) {code.append(symb);}break;case 'X':code.append('K');code.append('S');break;case 'Z':code.append('S');break;}n++;}if (code.length() > this.getMaxCodeLen()) {code.setLength(this.getMaxCodeLen());}}return code.toString();}  }
class C{  public Bounds addHorizontalPlane(final PlanetModel planetModel,final double latitude,final Plane horizontalPlane,final Membership... bounds){  return addPlane(planetModel,horizontalPlane,bounds);}  }
class C{  private void fireMenuKeyReleased(MenuKeyEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyReleased(event);    }  }}  }
class C{  private String generateId(){  return UUID.randomUUID().toString().toUpperCase() + "-GF";}  }
class C{  public Queue createDeadletterQueue(final String queueName){  return new Queue(queueName,true,false,false,getTTLArgs());}  }
class C{  public static void objectArraySet(Object[] a,int i,Object v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  static boolean headersContainValue(HttpHeaders headers,String headerName,String value){  Object values=headers.get(headerName);  if (values instanceof Collection) {    @SuppressWarnings("unchecked") Collection<Object> valuesCollection=(Collection<Object>)values;    return valuesCollection.contains(value);  }  return false;}  }
class C{  public void renderListHead(ListHead head){  Component header;  WTableColumn column;  for (int columnIndex=0; columnIndex < m_tableColumns.size(); columnIndex++) {    column=m_tableColumns.get(columnIndex);    header=getListHeaderComponent(column.getHeaderValue(),columnIndex,column.getColumnClass());    head.appendChild(header);  }  head.setSizable(true);  return;}  }
class C{  public PatternMatcher execute() throws DataflowAnalysisException {  workList.addLast(cfg.getEntry());  while (!workList.isEmpty()) {    BasicBlock basicBlock=workList.removeLast();    visitedBlockMap.put(basicBlock,basicBlock);    BasicBlock.InstructionIterator i=basicBlock.instructionIterator();    while (i.hasNext()) {      attemptMatch(basicBlock,i.duplicate());      i.next();    }    Iterator<BasicBlock> succIterator=cfg.successorIterator(basicBlock);    while (succIterator.hasNext()) {      BasicBlock succ=succIterator.next();      if (visitedBlockMap.get(succ) == null) {        workList.addLast(succ);      }    }  }  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  Person p=getPerson(stack);  if (p != null && p.hasImage()) {    return MetaImage.getMetaImage(p.getImageURL(thumb),stack.getUIComponent());  } else   return null;}  }
class C{  private static void displayMessage(String message){  System.out.println(message);  System.out.flush();}  }
class C{  public void record(long value){  histogram.recordValue(value);}  }
class C{  protected static URL appendUrlPath(URL url,String append) throws MalformedURLException {  return new URL(url.getProtocol() + "://" + url.getAuthority()+ url.getPath()+ append+ (url.getQuery() != null ? "?" + url.getQuery() : ""));}  }
class C{  public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  private void checkProductUsingUPC(){  String upc=upcField.getDisplay();  ListModelTable model=(ListModelTable)window.getWListbox().getModel();  List<MProduct> products=MProduct.getByUPC(Env.getCtx(),upc,null);  for (  MProduct product : products) {    int row=findProductRow(product.get_ID());    if (row >= 0) {      BigDecimal qty=(BigDecimal)model.getValueAt(row,1);      model.setValueAt(qty,row,1);      model.setValueAt(Boolean.TRUE,row,0);      model.updateComponent(row,row);    }  }  upcField.setValue("");  upcField.setHasFocus(true);}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.437 -0500",hash_original_method="C32886C5E5EF95CE74E82DCEA7E677B6",hash_generated_method="D3B6DAB676DE9F36C58223BD4E21C20A") public SIPServerTransaction findPendingTransaction(SIPRequest requestReceived){  if (this.stackLogger.isLoggingEnabled()) {    this.stackLogger.logDebug("looking for pending tx for :" + requestReceived.getTransactionId());  }  return (SIPServerTransaction)pendingTransactions.get(requestReceived.getTransactionId());}  }
class C{  public T download(String url,File target,Object handler,String callback){  AjaxCallback<File> cb=new AjaxCallback<File>();  cb.weakHandler(handler,callback);  return download(url,target,cb);}  }
class C{  private static FormObject[] sortCompsDesending(final FormObject[] array){  final int items=array.length;  int left=items / 2;  int right=items - 1;  while (left > 0) {    left-=1;    siftCompsDesending(array,left,right);  }  while (right > 0) {    final FormObject tempA=array[0];    array[0]=array[right];    array[right]=tempA;    right-=1;    siftCompsDesending(array,left,right);  }  return array;}  }
class C{  @Override public XMLEventWriter createXMLEventWriter(OutputStream out) throws XMLStreamException {  return new WbXmlEventWriter(out,(WbXmlDefinition)props.get(DEFINITION_PROPERTY),(WbXmlEncoder.StrtblType)props.get(ENCODING_TYPE_PROPERTY),(Boolean)props.get(SKIP_SPACES_PROPERTY));}  }
class C{  void dispatchAdded(final RPObject object){  try {    logger.debug("Object(" + object.getID() + ") added to client");    fireAdded(object);  } catch (  final Exception e) {    logger.error("dispatchAdded failed, object is " + object,e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.325 -0500",hash_original_method="85074EE9682A2A9BF13F64A0DA58B9BC",hash_generated_method="B138EB5B93DA05A5788C8DE0A12B3A73") public void endElement(String qName) throws SAXException {  if (!namespaces) {    if (contentHandler != null) {      contentHandler.endElement("","",qName.intern());    }    return;  }  String names[]=processName(qName,false,false);  if (contentHandler != null) {    contentHandler.endElement(names[0],names[1],names[2]);    Enumeration prefixes=nsSupport.getDeclaredPrefixes();    while (prefixes.hasMoreElements()) {      String prefix=(String)prefixes.nextElement();      contentHandler.endPrefixMapping(prefix);    }  }  nsSupport.popContext();}  }
class C{  public static String removeVowelsSkipStarts(String s){  String result=s;  if (!s.startsWith(" ")) {    result=result.substring(1);  }  result=encodeStartingVowels(result);  result=removeVowels(result);  result=decodeStartingVowels(result);  if (!s.startsWith(" ")) {    result=s.charAt(0) + result;  }  return result;}  }
class C{  public static PedigreeField parsePedigreeLine(String line){  return new PedigreeField(line);}  }
class C{  public UnicodeTranslatorStar(){}  }
class C{  public Activity currentActivity(){  Activity activity=activityStack.lastElement();  return activity;}  }
class C{  public ConnectionWatchDog(int length,AsyncWorker thread){  m_length=length;  m_elapsed=0;  underControl=thread;}  }
class C{  public static String extractMsisdnFromProvisioningResponse(String header){  Matcher matcher=PATTERN_EXTRACT_URI.matcher(header);  if (matcher.find()) {    return matcher.group(1);  }  throw new NoSuchElementException("Cannot found MSISDN!");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public static void log(final IRule rule,final IRuleState ruleState,final JoinStats[] joinStats){  if (log.isInfoEnabled()) {    log.info(JoinStats.toString(rule,ruleState,joinStats));  }}  }
class C{  @Override public boolean isValid(){  return getItemStacks().size() > 0 || ore != null;}  }
class C{  public UpdateRequest add(final SolrInputDocument doc,Boolean overwrite){  return add(doc,null,overwrite);}  }
class C{  @SuppressWarnings("unchecked") public static List<CORSRule> parseListBucketCORS(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    List<CORSRule> corsRules=new ArrayList<CORSRule>();    List<Element> corsRuleElems=root.getChildren("CORSRule");    for (    Element corsRuleElem : corsRuleElems) {      CORSRule rule=new CORSRule();      List<Element> allowedOriginElems=corsRuleElem.getChildren("AllowedOrigin");      for (      Element allowedOriginElement : allowedOriginElems) {        rule.getAllowedOrigins().add(allowedOriginElement.getValue());      }      List<Element> allowedMethodElems=corsRuleElem.getChildren("AllowedMethod");      for (      Element allowedMethodElement : allowedMethodElems) {        rule.getAllowedMethods().add(allowedMethodElement.getValue());      }      List<Element> allowedHeaderElems=corsRuleElem.getChildren("AllowedHeader");      for (      Element allowedHeaderElement : allowedHeaderElems) {        rule.getAllowedHeaders().add(allowedHeaderElement.getValue());      }      List<Element> exposeHeaderElems=corsRuleElem.getChildren("ExposeHeader");      for (      Element exposeHeaderElement : exposeHeaderElems) {        rule.getExposeHeaders().add(exposeHeaderElement.getValue());      }      Element maxAgeSecondsElem=corsRuleElem.getChild("MaxAgeSeconds");      if (maxAgeSecondsElem != null) {        rule.setMaxAgeSeconds(Integer.parseInt(maxAgeSecondsElem.getValue()));      }      corsRules.add(rule);    }    return corsRules;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public FROM FROM(@NonNull String tableName){  return new FROM(this,tableName);}  }
class C{  private Collection<ScriptCommand> createSessionManagementPropertiesScripts(){  Collection<ScriptCommand> sessionManPropertiesCommands=new ArrayList<ScriptCommand>();  String sessManProps=getPropertyValue(WebSpherePropertySet.SESSION_MANAGEMENT_PROPERTIES);  if (sessManProps != null && !sessManProps.isEmpty()) {    Properties parsedProperty=PropertyUtils.splitPropertiesOnPipe(sessManProps);    for (    Entry<Object,Object> propertyItem : parsedProperty.entrySet()) {      String propertyName=propertyItem.getKey().toString();      String propertyValue=propertyItem.getValue().toString();      sessionManPropertiesCommands.add(factory.setSessionManagementPropertyScript(propertyName,propertyValue));    }  }  return sessionManPropertiesCommands;}  }
class C{  public XmlPullParser newPullParser() throws XmlPullParserException {  if (parserClasses == null)   throw new XmlPullParserException("Factory initialization was incomplete - has not tried " + classNamesLocation);  if (parserClasses.size() == 0)   throw new XmlPullParserException("No valid parser classes found in " + classNamesLocation);  final StringBuffer issues=new StringBuffer();  for (int i=0; i < parserClasses.size(); i++) {    final Class ppClass=(Class)parserClasses.elementAt(i);    try {      final XmlPullParser pp=(XmlPullParser)ppClass.newInstance();      for (Enumeration e=features.keys(); e.hasMoreElements(); ) {        final String key=(String)e.nextElement();        final Boolean value=(Boolean)features.get(key);        if (value != null && value.booleanValue()) {          pp.setFeature(key,true);        }      }      return pp;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create parser: " + issues);}  }
class C{  protected void updateButtonState(){  getCancelButton().setEnabled(isEditable() & isEnabled());  getFindButton().setEnabled(isEnabled());  getPopupButton().setEnabled(isEnabled());}  }
class C{  @Override public String toString(){  return toString("=== Confusion Matrix ===\n");}  }
class C{  @Override public IChunkedOrderedIterator<E> iterator(){  return iterator(0L,0L,0);}  }
class C{  @Override public ChatEvent parse(String text){  text=text.trim();  if (text.length() < 600) {    if (text.startsWith(SHOUT_1)) {      String name=text.substring(SHOUT_1.length()).trim();      RaptorStringTokenizer stringtokenizer=new RaptorStringTokenizer(name," ");      String s1=IcsUtils.stripTitles(stringtokenizer.nextToken()).trim();      for (int i=0; i < s1.length(); i++) {        if (VALID_HANDLE_CHARS.indexOf(s1.charAt(i)) == -1) {          s1=s1.substring(0,i);          break;        }      }      return new ChatEvent(s1,ChatType.SHOUT,text);    }    RaptorStringTokenizer stringtokenizer1=new RaptorStringTokenizer(text," ");    if (stringtokenizer1.hasMoreTokens()) {      String s2=stringtokenizer1.nextToken();      if (stringtokenizer1.hasMoreTokens()) {        String s3=stringtokenizer1.nextToken();        if (s3.equals(SHOUT_2)) {          return new ChatEvent(IcsUtils.stripTitles(s2).trim(),ChatType.SHOUT,text.trim());        }      }    }    return null;  }  return null;}  }
class C{  static boolean isType(Symbol sym){  return sym != null && sym.kind == TYP;}  }
class C{  public void writeGraphic(final CategoryHistogram modeData,final String filename,final String legMode){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(modeData,legMode),1024,768);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @SuppressWarnings("unused") @Deprecated private static ArrayList<GPSPoint> sortTimeRadix(int maxT,ArrayList<GPSPoint> log){  final int RUNS=(int)Math.ceil(Math.log10(maxT - 1));  ;  final int RADIX=10;  ArrayList<ArrayList<GPSPoint>> buckets=new ArrayList<ArrayList<GPSPoint>>(RADIX);  for (int i=0; i < RADIX; i++) {    buckets.add(i,new ArrayList<GPSPoint>());  }  for (int r=1; r <= RUNS; r++) {    ArrayList<GPSPoint> sortedLog=new ArrayList<GPSPoint>();    int mod=(int)Math.pow(RADIX,r);    int div=(int)Math.pow(RADIX,r - 1);    for (int j=0; j < log.size(); j++) {      int bucketNum=(int)((log.get(j).getTime().getTimeInMillis() % mod) / div);      buckets.get(bucketNum).add(log.get(j));    }    for (int k=0; k < buckets.size(); k++) {      sortedLog.addAll(buckets.get(k));      buckets.set(k,new ArrayList<GPSPoint>());    }    log=sortedLog;  }  return log;}  }
class C{  public MinecraftDirectory(String rootDir){  this(new File(rootDir));}  }
class C{  public static Scenario loadScenarioFromPlans(String plansFile){  Config config=new Config();  config.addCoreModules();  config.plans().setInputFile(plansFile);  Scenario scenario=ScenarioUtils.loadScenario(config);  return scenario;}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public static boolean isViable(World worldObj,int x,int y,int z,int yoffset){  Block id=worldObj.getBlockState(new BlockPos(x,y,z)).getBlock();  if (id == Blocks.ladder && isPassableBlock(worldObj,x,y + 1,z)) {    return true;  }  if (!isPassableBlock(worldObj,x,y,z) || !isPassableBlock(worldObj,x,y + 1,z)) {    return false;  }  if (isPassableBlock(worldObj,x,y - 1,z)) {    if (id == Blocks.air || id.isPassable(worldObj,new BlockPos(x,y - 1,z))) {      return false;    }  }  if (yoffset < 0) {    yoffset*=-1;    int ycheckhigher=1;    while (ycheckhigher <= yoffset) {      if (!isPassableBlock(worldObj,x,y + yoffset,z)) {        return false;      }      ycheckhigher++;    }  }  return true;}  }
class C{  public FacebookGraphResponseException(GraphResponse graphResponse,String errorMessage){  super(errorMessage);  this.graphResponse=graphResponse;}  }
class C{  public void writeTo(OutputStream os) throws IOException {  DataOutputStream dos=new DataOutputStream(os);  dos.writeInt(N);  dos.writeInt(q);  dos.writeInt(d);  dos.writeInt(d1);  dos.writeInt(d2);  dos.writeInt(d3);  dos.writeInt(B);  dos.writeInt(basisType);  dos.writeDouble(beta);  dos.writeDouble(normBound);  dos.writeDouble(keyNormBound);  dos.writeInt(signFailTolerance);  dos.writeBoolean(primeCheck);  dos.writeBoolean(sparse);  dos.writeInt(bitsF);  dos.write(keyGenAlg);  dos.writeUTF(hashAlg.getAlgorithmName());  dos.write(polyType);}  }
class C{  protected FloatOption(OptionSet set,String name,String desc,float defaultValue){  super(set,FLOAT_OPTION,name,desc);  this.value=this.defaultValue=defaultValue;}  }
class C{  public int transformToActualPosition(int position){  return position % getActualItemCountFromAdapter();}  }
class C{  public ArrayVal(double[] values){  this.array=new double[values.length];  for (int i=0; i < array.length; i++) {    array[i]=values[i];  }  hashcode=Arrays.hashCode(array);}  }
class C{  public ConnectUriManager(List<String> connectUri) throws THLException {  this.uriList=connectUri;  if (connectUri.size() == 0) {    throw new THLException("Connect URI value is empty; must be a list of one or more THL URIs");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private double[] arrayDifference(double[] array1,double[] array2){  double[] difference=new double[array1.length];  for (int i=0; i < array1.length; i++) {    difference[i]=array1[i] - array2[i];  }  return difference;}  }
class C{  public void testRecoveryAfterAnError0_Runtime() throws Exception {  doTestRecoveryAfterAnError(0,HadoopErrorSimulator.Kind.Runtime);}  }
class C{  private boolean fixReplacementOffsetInString(PsiElement element,OffsetMap offsetMap){  int endCharIndex=StringUtils.indexOfAny(element.getText(),new char[]{'\n',' '});  if (endCharIndex > 0) {    offsetMap.addOffset(IDENTIFIER_END_OFFSET,element.getTextOffset() + endCharIndex);    return true;  }  return false;}  }
class C{  public void subdivide(Segment s0,Segment s1){  Cubic c0=null, c1=null;  if (s0 instanceof Cubic)   c0=(Cubic)s0;  if (s1 instanceof Cubic)   c1=(Cubic)s1;  subdivide(c0,c1);}  }
class C{  public static List<Alert> findByPrefix(EntityManager em,String prefix){  requireArgument(em != null,"Entity Manager cannot be null");  requireArgument(prefix != null && !prefix.isEmpty(),"Cannot find alerts starting with null of empty prefix");  TypedQuery<Alert> query=em.createNamedQuery("Alert.findByPrefix",Alert.class);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("name",prefix + "%");    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public JButton(Action a){  this();  setAction(a);}  }
class C{  private FinalizeDeploymentMigrationWorkflowService.State buildValidStartState(@Nullable FinalizeDeploymentMigrationWorkflowService.TaskState.TaskStage startStage,@Nullable FinalizeDeploymentMigrationWorkflowService.TaskState.SubStage startSubStage) throws Throwable {  FinalizeDeploymentMigrationWorkflowService.State startState=new FinalizeDeploymentMigrationWorkflowService.State();  startState.controlFlags=ControlFlags.CONTROL_FLAG_OPERATION_PROCESSING_DISABLED;  startState.sourceLoadBalancerAddress="lbLink1";  startState.destinationDeploymentId="deployment1";  startState.taskPollDelay=1;  if (null != startStage) {    startState.taskState=new FinalizeDeploymentMigrationWorkflowService.TaskState();    startState.taskState.stage=startStage;    startState.taskState.subStage=startSubStage;    if (TaskState.TaskStage.STARTED == startStage) {switch (startSubStage) {case STOP_MIGRATE_TASKS:case REINSTALL_AGENTS:case UPGRADE_AGENTS:case MIGRATE_FINAL:case RESUME_DESTINATION_SYSTEM:case PAUSE_SOURCE_SYSTEM:        startState.sourceDeploymentId="deployment2";      startState.sourceZookeeperQuorum="127.0.0.1";    break;}}}return startState;}  }
class C{  protected TFunctionImpl(){  super();}  }
class C{  public LineFileDocs(Random random,String path) throws IOException {  this.path=path;  this.random=new Random(random.nextLong());  open(random);}  }
class C{  private double score(Vec x,boolean averaged){  double score=0;  double denom=0;  double finalScore=0;  for (int i=0; i < supports.size(); i++) {    double eta_s=signedEtas.get(i);    double tmp=eta_s * K.eval(supports.get(i),x) / normalizers.get(i);    double denom_tmp=2 * eta_s * associatedScores.get(i) + eta_s * eta_s;    denom+=denom / Math.max(1,denom) + denom_tmp;    score+=tmp / Math.max(1,denom);    if (averaged)     finalScore+=score * rounds.get(i);  }  if (averaged)   return finalScore; else   return score;}  }
class C{  public boolean transformPushWhitelistTokenSending(@NonNull Message message,@NonNull String[] whitelistTokens){  String localUserId=message.getFrom().getAddress();  String remoteUserId=message.getTo().getAddress();  String body=message.getBody();  SessionID sessionId=getSessionId(localUserId,remoteUserId);  try {    TLV tokenTlv=mPushManager.createWhitelistTokenExchangeTlvWithToken(whitelistTokens,null);    List<TLV> tlvs=new ArrayList<>(1);    tlvs.add(tokenTlv);    if (mOtrEngine != null && sessionId != null) {      SessionStatus sessionStatus=mOtrEngine.getSessionStatus(sessionId);      if (sessionStatus != SessionStatus.ENCRYPTED) {        OtrDebugLogger.log("Could not send ChatSecure-Push Whitelist Token TLV. Session not encrypted.");        return false;      }      OtrDebugLogger.log("session status: " + sessionStatus);      body=mOtrEngine.transformSending(sessionId,body,tlvs);      message.setTo(mOtrEngineHost.appendSessionResource(sessionId,message.getTo()));    }    message.setBody(body);    return true;  } catch (  UnsupportedEncodingException e) {    Log.e(ImApp.LOG_TAG,"Failed to craft ChatSecure-Push Whitelist Token TLV",e);    return false;  }catch (  OtrException e) {    OtrDebugLogger.log("error encrypting",e);    return false;  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  getCurrentProcessor().ignorableWhitespace(this,ch,start,length);}  }
class C{  static boolean containsTokenWithValue(final Token[] tokens,final Object value){  for (  final Token token : tokens) {    if (token.getValue() == value) {      return true;    }  }  return false;}  }
class C{  public long addSubscription(String url,@NonNull Provider.RefreshMode refreshMode) throws SubscriptionNotInsertedException {  if (!url.toLowerCase().matches("^\\w+://.*")) {    url="http://" + url;    Log.w(TAG,"Feed download protocol defaults to http, new url: " + url);  }  long id=generateId(url);  Cursor c=resolver.query(Provider.getUri(Provider.T_PODCAST,id),null,null,null,null);  int count=c.getCount();  c.close();  if (count == 1) {    return 0;  } else {    ContentValues values=new ContentValues(5);    values.put(Provider.K_PFURL,url);    values.put(Provider.K_PRMODE,refreshMode.ordinal());    values.put(Provider.K_ID,id);    values.put(Provider.K_PSTATE,Provider.PSTATE_NEW);    values.put(Provider.K_PTSTAMP,0);    values.put(Provider.K_PATSTAMP,new Date().getTime());    if (resolver.insert(Provider.podcastUri,values) == null) {      throw new SubscriptionNotInsertedException();    } else {      return id;    }  }}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (!(other instanceof MembershipAttributes))   return false;  final MembershipAttributes that=(MembershipAttributes)other;  if (this.requiredRoles != that.requiredRoles && !(this.requiredRoles != null && this.requiredRoles.equals(that.requiredRoles)))   return false;  if (this.lossAction != that.lossAction && !(this.lossAction != null && this.lossAction.equals(that.lossAction)))   return false;  if (this.resumptionAction != that.resumptionAction && !(this.resumptionAction != null && this.resumptionAction.equals(that.resumptionAction)))   return false;  return true;}  }
class C{  public String createUrl(boolean createDB){  return getUrl();}  }
class C{  static void accumMultiSeg(int counts[],SortedSetDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final int segCounts[];  if (map == null) {    segCounts=counts;  } else {    segCounts=new int[1 + (int)si.getValueCount()];  }  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    si.setDocument(doc);    int term=(int)si.nextOrd();    if (term < 0) {      counts[0]++;    } else {      do {        segCounts[1 + term]++;      } while ((term=(int)si.nextOrd()) >= 0);    }  }  if (map != null) {    migrateGlobal(counts,segCounts,subIndex,map);  }}  }
class C{  private static String checkTfPath(final String exePath,final String[] exeNames){  if (StringUtils.isNotEmpty(exePath)) {    for (    final String filename : exeNames) {      final File tfFile=new File(exePath,filename);      if (tfFile.exists()) {        return tfFile.toString();      }    }  }  return null;}  }
class C{  public static Rect rect(double width,double height){  Rect rect=new Rect();  rect.xMax=(int)(width * SwfConstants.TWIPS_PER_PIXEL);  rect.yMax=(int)(height * SwfConstants.TWIPS_PER_PIXEL);  return rect;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static void clone(final String remoteUri,final Path localClonePath,final String branch){  checkNotNull(remoteUri,"remoteUri");  checkNotNull(localClonePath,"clonePath");  checkNotNull(branch,"branch");  final File destinationFolder=localClonePath.toFile();  if (!destinationFolder.exists()) {    try {      createDirectories(localClonePath);    } catch (    final IOException e) {      final String message="Error while creating directory for local repository under " + localClonePath + ".";      LOGGER.error(message,e);      throw new RuntimeException(message,e);    }    LOGGER.info("Creating folder for repository at '" + localClonePath + "'.");  }  checkState(destinationFolder.exists(),"Repository folder does not exist folder does not exist: " + destinationFolder.getAbsolutePath());  final File[] existingFiles=destinationFolder.listFiles();  if (!isEmpty(existingFiles)) {    LOGGER.info("Repository already exists. Aborting clone phase. Files in " + destinationFolder + " are: "+ Joiner.on(',').join(existingFiles));    try (final Git git=open(localClonePath.toFile())){      final String currentBranch=git.getRepository().getBranch();      if (!currentBranch.equals(branch)) {        LOGGER.info("Desired branch differs from the current one. Desired: '" + branch + "' current: '"+ currentBranch+ "'.");        git.pull().setProgressMonitor(createMonitor()).call();        final Ref remoteBranchRef=from(git.branchList().setListMode(REMOTE).call()).firstMatch(null).orNull();        if (null == remoteBranchRef) {          LOGGER.info("Cleaning up current git clone and running clone phase from scratch.");          deleteRecursively(destinationFolder);          clone(remoteUri,localClonePath,currentBranch);        } else {          git.pull().setProgressMonitor(createMonitor()).call();          LOGGER.info("Pulled from upstream.");        }      }    } catch (    final Exception e) {      final String msg="Error when performing git pull in " + localClonePath + " from "+ remoteUri+ ".";      LOGGER.error(msg,e);      throw new RuntimeException("Error when performing git pull in " + localClonePath + " from "+ remoteUri+ ".",e);    }    return;  }  LOGGER.info("Cloning repository from '" + remoteUri + "'...");  final CloneCommand cloneCommand=cloneRepository().setURI(remoteUri).setDirectory(destinationFolder).setBranch(branch).setProgressMonitor(createMonitor()).setTransportConfigCallback(TRANSPORT_CALLBACK);  try (final Git git=cloneCommand.call()){    LOGGER.info("Repository content has been successfully cloned to '" + git.getRepository().getDirectory() + "'.");  } catch (  final GitAPIException e) {    final String message="Error while cloning repository.";    LOGGER.error(message,e);    LOGGER.info("Trying to clean up local repository content: " + destinationFolder + ".");    deleteRecursively(destinationFolder);    LOGGER.info("Inconsistent checkout directory was successfully cleaned up.");    throw new RuntimeException(message,e);  }}  }
class C{  public static int countWhitespacesAtTheBeginningOfLine(String text){  MatchResult result=RegExpUtils.findMatchAfterIndex(UnicodeUtils.regexpNotWhitespaceExcludingNewlineAndCarriageReturn,text,-1);  return result == null ? text.length() : result.getIndex();}  }
class C{  public void updateVirtualMethod(RVMMethod m){  RVMMethod dm=findDeclaredMethod(m.getName(),m.getDescriptor());  if (dm != null && dm != m)   return;  updateTIBEntry(m);  if (m.isPrivate())   return;  for (  RVMClass sc : getSubClasses()) {    if (sc.isResolved()) {      sc.updateVirtualMethod(m);    }  }}  }
class C{  public StoredGraphs search(){  TetradMatrix A, W;  StoredGraphs graphs=new StoredGraphs();  try {    long sTime=(new Date()).getTime();    boolean fastIca=true;    if (fastIca) {      W=getWFastIca();      System.out.println("W = " + W);      graphs=findCandidateModels(dataSet.getVariables(),W,true);    } else {      double zeta=1;      final List<Mapping> allMappings=createMappings(null,null,dataSet.getNumColumns());      double[][] _w=estimateW(new TetradMatrix(dataSet.getDoubleData().toArray()),dataSet.getNumColumns(),-zeta,zeta,allMappings);      W=new TetradMatrix(_w);      System.out.println("W = " + W);      graphs=findCandidateModel(dataSet.getVariables(),W,true);    }    elapsedTime=(new Date()).getTime() - sTime;  } catch (  Exception e) {    e.printStackTrace();  }  return graphs;}  }
class C{  protected double secureProduct(Vector v){  double sum=0;  for (int i=0; i < v.dimension(); i++)   sum+=components[i] * v.components[i];  return sum;}  }
class C{  public final void removeHelperTextColor(@ColorInt final int color){  int index=helperTextColors.indexOf(color);  if (index != -1) {    helperTextColors.remove(index);    verifyPasswordStrength();  }}  }
class C{  public String[] ignoreIndexSettings(){  return ignoreIndexSettings;}  }
class C{  public RandomGenerator(int numberOfObjectives,int numberOfPoints){  super();  this.numberOfObjectives=numberOfObjectives;  this.numberOfPoints=numberOfPoints;}  }
class C{  public static List<Assignment> deserializeAssignmentList(final List<String> serializedList){  return deserializeAssignmentList(serializedList,false);}  }
class C{  public long size(){  VirtualFile f=getVirtualFile();  return f == null ? 0 : f.size();}  }
class C{  private void remove(TaggedLineString line,int start,int end){  for (int i=start; i < end; i++) {    TaggedLineSegment seg=line.getSegment(i);    inputIndex.remove(seg);  }}  }
class C{  public int indexOf(StrMatcher matcher){  return indexOf(matcher,0);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_methodBody_1_();}  }
class C{  public boolean paretoDominates(MultiObjectiveFitness other){  boolean abeatsb=false;  if (objectives.length != other.objectives.length)   throw new RuntimeException("Attempt made to compare two multiobjective fitnesses; but they have different numbers of objectives.");  for (int x=0; x < objectives.length; x++) {    if (maximize[x] != other.maximize[x])     throw new RuntimeException("Attempt made to compare two multiobjective fitnesses; but for objective #" + x + ", one expects higher values to be better and the other expectes lower values to be better.");    if (maximize[x]) {      if (objectives[x] > other.objectives[x])       abeatsb=true; else       if (objectives[x] < other.objectives[x])       return false;    } else {      if (objectives[x] < other.objectives[x])       abeatsb=true; else       if (objectives[x] > other.objectives[x])       return false;    }  }  return abeatsb;}  }
class C{  @SuppressWarnings({"deprecation"}) public static String post(SSLContext sslContext,String url,String contentType,String content) throws UtilException {  org.apache.http.client.HttpClient httpClient=null;  if (sslContext != null) {    SSLConnectionSocketFactory sslsf=new SSLConnectionSocketFactory(sslContext,new String[]{"TLSv1"},null,SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);    httpClient=HttpClients.custom().setSSLSocketFactory(sslsf).build();  } else {    httpClient=HttpClients.custom().build();  }  HttpPost request=new HttpPost(url);  try {    StringEntity params=new StringEntity(content,GlobalConstants.DEFAULT_CHARSET);    request.addHeader("content-type",contentType);    request.setEntity(params);    HttpResponse response=httpClient.execute(request);    int statusCode=response.getStatusLine().getStatusCode();    if (statusCode == HttpStatus.SC_OK) {      return EntityUtils.toString(response.getEntity(),GlobalConstants.DEFAULT_CHARSET);    } else {      throw new UtilException(ErrorCodeDef.HTTP_REQUEST_ERROR_10035,"Http request failed, message :${0}",statusCode);    }  } catch (  IOException e) {    throw new UtilException(ErrorCodeDef.HTTP_REQUEST_ERROR_10035,"Http request failed, message :${0}",e,e.getMessage());  }}  }
class C{  private void handleOnOffSwitchClick(int idx,boolean action){  listener.onSwitchClick(idx,action);}  }
class C{  public static void main(String[] args) throws Exception {  new SPQRNodeServer().run(args);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  header=new Entry(null,null,null);  header.next=header.previous=header;  for (int i=0; i < size; i++)   add(s.readObject());}  }
class C{  public static void assertEquals(String message,List<IOObject> expected,List<IOObject> actual){  assertSize(expected,actual);  Iterator<IOObject> expectedIter=expected.iterator();  Iterator<IOObject> actualIter=actual.iterator();  int objectIndex=1;  while (expectedIter.hasNext() && actualIter.hasNext()) {    IOObject expectedIOO=expectedIter.next();    IOObject actualIOO=actualIter.next();    String subMessage=message + " IOObject \"" + actualIOO.getSource()+ "\" at position "+ objectIndex+ " does not match the expected value ";    assertEquals(subMessage,expectedIOO,actualIOO);    objectIndex++;  }}  }
class C{  private void informModuleNotification(final ViewNotificationContainer moduleViewNotificationContainer,final SQLProvider provider) throws CouldntLoadDataException {  if (moduleViewNotificationContainer.getDatabaseOperation().equals("INSERT")) {    final INaviModule module=moduleViewNotificationContainer.getNotificationModule().get();    if (!module.isLoaded()) {      return;    }    final Integer viewId=moduleViewNotificationContainer.getViewId();    final ImmutableNaviViewConfiguration databaseViewConfiguration=provider.loadFlowGraphInformation(module,viewId);    final CModuleViewGenerator generator=new CModuleViewGenerator(provider,module);    final INaviView view=generator.generate(databaseViewConfiguration,GraphType.FLOWGRAPH);    module.getContent().getViewContainer().addView(view);  }  if (moduleViewNotificationContainer.getDatabaseOperation().equals("UPDATE")) {    return;  }  if (moduleViewNotificationContainer.getDatabaseOperation().equals("DELETE")) {    final INaviModule module=moduleViewNotificationContainer.getNotificationModule().get();    if (!module.isLoaded()) {      return;    }    final Integer viewId=moduleViewNotificationContainer.getViewId();    final INaviView view=ViewManager.get(provider).getView(viewId);    module.getContent().getViewContainer().deleteViewInternal(view);  }}  }
class C{  public static CharLiteralExpr escape(String string){  return new CharLiteralExpr(Utils.escapeEndOfLines(string));}  }
class C{  public static Scs cs_permute(Scs A,int[] pinv,int[] q,boolean values){  int t, j, k, nz=0, m, n, Ap[], Ai[], Cp[], Ci[];  float Cx[], Ax[];  Scs C;  if (!Scs_util.CS_CSC(A))   return (null);  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  C=Scs_util.cs_spalloc(m,n,Ap[n],values && Ax != null,false);  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (k=0; k < n; k++) {    Cp[k]=nz;    j=q != null ? (q[k]) : k;    for (t=Ap[j]; t < Ap[j + 1]; t++) {      if (Cx != null)       Cx[nz]=Ax[t];      Ci[nz++]=pinv != null ? (pinv[Ai[t]]) : Ai[t];    }  }  Cp[n]=nz;  return C;}  }
class C{  public SourceMapper(IPath sourcePath,String rootPath,Map options,String encoding){  this.areRootPathsComputed=false;  this.options=options;  this.encoding=encoding;  this.defaultEncoding="UTF-8";  if (rootPath != null) {    this.rootPaths=new ArrayList();    this.rootPaths.add(rootPath);  }  this.sourcePath=sourcePath;  this.sourceRanges=new HashMap();  this.parametersRanges=new HashMap();  this.parameterNames=new HashMap();  this.importsTable=new HashMap();  this.importsCounterTable=new HashMap();}  }
class C{  private String primaryStateToString(byte value){switch (value) {case NO_PRIMARY_NOT_HOSTING:    return "NO_PRIMARY_NOT_HOSTING";case NO_PRIMARY_HOSTING:  return "NO_PRIMARY_HOSTING";case OTHER_PRIMARY_NOT_HOSTING:return "OTHER_PRIMARY_NOT_HOSTING";case OTHER_PRIMARY_HOSTING:return "OTHER_PRIMARY_HOSTING";case VOLUNTEERING_HOSTING:return "VOLUNTEERING_HOSTING";case BECOMING_HOSTING:return "BECOMING_HOSTING";case IS_PRIMARY_HOSTING:return "IS_PRIMARY_HOSTING";case CLOSED:return "CLOSED";default :return "<unhandled primaryState " + value + " >";}}  }
class C{  public synchronized Session createSession(User user){  Session session=new Session(this,user,++nextSessionId);  userSessions.add(session);  trace.info("create session #{0}",session.getId(),"engine");  return session;}  }
class C{  public RemoteMethodCallResults invokeAndWait(final String endPointName,final RemoteMethodCall remoteCall){  EndPoint local;synchronized (m_endPointMutex) {    local=m_localEndPoints.get(endPointName);  }  if (local == null) {    return invokeAndWaitRemote(remoteCall);  } else {    final long number=local.takeANumber();    final List<RemoteMethodCallResults> results=local.invokeLocal(remoteCall,number,getLocalNode());    if (results.size() == 0) {      throw new RemoteNotFoundException("Not found:" + endPointName);    }    if (results.size() > 1) {      throw new IllegalStateException("Too many implementors, got back:" + results);    }    return results.get(0);  }}  }
class C{  public void readFromClassPath(final String propertyFileLocation) throws ConfigurationException {  properties=readPropertyFileFromClassPath(propertyFileLocation);}  }
class C{  private Preconditions(){}  }
class C{  @SuppressWarnings("rawtypes") public CIMObjectPath addZoneAlias(WBEMClient client,CIMInstance zoneServiceIns,String fabricId,String fabricWwn,ZoneWwnAlias alias) throws WBEMException {  CIMObjectPath aliasPath=null;  CIMArgument[] outargs=new CIMArgument[1];  CIMArgument[] inargs=new CIMArgument[1];  inargs[0]=_cimArgumentFactory.string(_CollectionAlias,alias.getName());  _log.info("Creating alias: " + alias.getName());  UnsignedInteger32 result=new UnsignedInteger32(Integer.MAX_VALUE);  int count=0;  while (result.intValue() != 0 && count < 2) {    result=(UnsignedInteger32)client.invokeMethod(zoneServiceIns.getObjectPath(),_CreateZoneAlias,inargs,outargs);    if (result.intValue() == 0 && outargs[0].getValue() != null) {      aliasPath=(CIMObjectPath)outargs[0].getValue();      _log.info("Created alias: " + alias.getName() + " with path "+ aliasPath);      break;    } else     if (result.intValue() == 32770) {      _log.info("Created alias: " + alias.getName() + " failed with result.intvalue() 32770: "+ "Transaction Not Started. Retry to get a new session lock.");      endSession(client,zoneServiceIns,false);      zoneServiceIns=startSession(client,fabricId,fabricWwn);      count++;    } else {      throw new NetworkDeviceControllerException("Created alias failed: " + alias.getName() + " with result.intValue() "+ result.intValue());    }  }  if (aliasPath == null) {    if (count >= 2) {      _log.info("Failed to create alias " + alias.getName() + ". The maximum number of retries ("+ (count + 1)+ ") was reached without successfully starting a transaction.");    }  } else {    addZoneOrAliasMember(client,zoneServiceIns,fabricWwn,aliasPath,alias.getAddress());  }  return aliasPath;}  }
class C{  private static long seconds2000NoTZ(long millis){  DateTimeZone dtz=DateTimeZone.getDefault();  millis+=dtz.getOffset(millis);  return millis / 1000 - 946684800;}  }
class C{  public static boolean isDragImageSupported(){  Toolkit t=Toolkit.getDefaultToolkit();  Boolean supported;  try {    supported=(Boolean)Toolkit.getDefaultToolkit().getDesktopProperty("DnD.isDragImageSupported");    return supported.booleanValue();  } catch (  Exception e) {    return false;  }}  }
class C{  private static void queryNextReminderAndSchedule(Cursor instancesCursor,Context context,ContentResolver contentResolver,AlarmManagerInterface alarmManager,int batchSize,long currentMillis){  if (AlertService.DEBUG) {    int eventCount=instancesCursor.getCount();    if (eventCount == 0) {      Log.d(TAG,"No events found starting within 1 week.");    } else {      Log.d(TAG,"Query result count for events starting within 1 week: " + eventCount);    }  }  Map<Integer,List<Long>> eventMap=new HashMap<Integer,List<Long>>();  Time timeObj=new Time();  long nextAlarmTime=Long.MAX_VALUE;  int nextAlarmEventId=0;  instancesCursor.moveToPosition(-1);  while (!instancesCursor.isAfterLast()) {    int index=0;    eventMap.clear();    StringBuilder eventIdsForQuery=new StringBuilder();    eventIdsForQuery.append('(');    while (index++ < batchSize && instancesCursor.moveToNext()) {      int eventId=instancesCursor.getInt(INSTANCES_INDEX_EVENTID);      long begin=instancesCursor.getLong(INSTANCES_INDEX_BEGIN);      boolean allday=instancesCursor.getInt(INSTANCES_INDEX_ALL_DAY) != 0;      long localStartTime;      if (allday) {        localStartTime=Utils.convertAlldayUtcToLocal(timeObj,begin,Time.getCurrentTimezone());      } else {        localStartTime=begin;      }      List<Long> startTimes=eventMap.get(eventId);      if (startTimes == null) {        startTimes=new ArrayList<Long>();        eventMap.put(eventId,startTimes);        eventIdsForQuery.append(eventId);        eventIdsForQuery.append(",");      }      startTimes.add(localStartTime);      if (Log.isLoggable(TAG,Log.DEBUG)) {        timeObj.set(localStartTime);        StringBuilder msg=new StringBuilder();        msg.append("Events cursor result -- eventId:").append(eventId);        msg.append(", allDay:").append(allday);        msg.append(", start:").append(localStartTime);        msg.append(" (").append(timeObj.format("%a, %b %d, %Y %I:%M%P")).append(")");        Log.d(TAG,msg.toString());      }    }    if (eventIdsForQuery.charAt(eventIdsForQuery.length() - 1) == ',') {      eventIdsForQuery.deleteCharAt(eventIdsForQuery.length() - 1);    }    eventIdsForQuery.append(')');    Cursor cursor=null;    try {      cursor=contentResolver.query(Reminders.CONTENT_URI,REMINDERS_PROJECTION,REMINDERS_WHERE + eventIdsForQuery,null,null);      cursor.moveToPosition(-1);      while (cursor.moveToNext()) {        int eventId=cursor.getInt(REMINDERS_INDEX_EVENT_ID);        int reminderMinutes=cursor.getInt(REMINDERS_INDEX_MINUTES);        List<Long> startTimes=eventMap.get(eventId);        if (startTimes != null) {          for (          Long startTime : startTimes) {            long alarmTime=startTime - reminderMinutes * DateUtils.MINUTE_IN_MILLIS;            if (alarmTime > currentMillis && alarmTime < nextAlarmTime) {              nextAlarmTime=alarmTime;              nextAlarmEventId=eventId;            }            if (Log.isLoggable(TAG,Log.DEBUG)) {              timeObj.set(alarmTime);              StringBuilder msg=new StringBuilder();              msg.append("Reminders cursor result -- eventId:").append(eventId);              msg.append(", startTime:").append(startTime);              msg.append(", minutes:").append(reminderMinutes);              msg.append(", alarmTime:").append(alarmTime);              msg.append(" (").append(timeObj.format("%a, %b %d, %Y %I:%M%P")).append(")");              Log.d(TAG,msg.toString());            }          }        }      }    }  finally {      if (cursor != null) {        cursor.close();      }    }  }  if (nextAlarmTime < Long.MAX_VALUE) {    scheduleAlarm(context,nextAlarmEventId,nextAlarmTime,currentMillis,alarmManager);  }}  }
class C{  public boolean doesStandbyProdCopyExist(RecoverPointVolumeProtectionInfo volume){  try {    ConsistencyGroupUID cgID=new ConsistencyGroupUID();    cgID.setId(volume.getRpVolumeGroupID());    ConsistencyGroupState state=functionalAPI.getGroupState(cgID);    ConsistencyGroupSettings cgSettings=functionalAPI.getGroupSettings(cgID);    ConsistencyGroupCopyUID standbyProdCopy=RecoverPointUtils.getStandbyProductionCopy(cgSettings,state);    if (standbyProdCopy != null) {      String stanbyProdCopyName=functionalAPI.getGroupCopyName(standbyProdCopy);      logger.info(String.format("Determined that standby production copy %s exists in CG %s.",stanbyProdCopyName,volume.getRpProtectionName()));      return true;    }    logger.info(String.format("Determined that no standby production copy exists in CG %s.",volume.getRpProtectionName()));    return false;  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedStandbyProdCopyLookup(volume.getRpProtectionName(),e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedStandbyProdCopyLookup(volume.getRpProtectionName(),e);  }}  }
class C{  public static boolean tryCancelUpdate(final QueryEngine queryEngine,RunningQuery query){  if (query != null) {    final IRunningQuery q;    try {      q=queryEngine.getRunningQuery(query.getQueryUuid());      if (q != null && q.cancel(true)) {        return true;      }    } catch (    RuntimeException ex) {      return false;    }  }  return false;}  }
class C{  public Expression locationPathPattern(int opPos) throws TransformerException {  opPos=getFirstChildPos(opPos);  return stepPattern(opPos,0,null);}  }
class C{  private boolean readHeader() throws IOException {  if (consecutiveLineBreaks > 1) {    consecutiveLineBreaks=0;    return false;  }  readName();  consecutiveLineBreaks=0;  readValue();  return consecutiveLineBreaks > 0;}  }
class C{  private void deleteCharacter(){  if (insertionPoint < buffer.length()) {    buffer.deleteCharAt(insertionPoint);    sendComposedText();  } else {    beep();  }}  }
class C{  protected DefaultSelectorFactory(){}  }
class C{  private void connectTxSc1SerialDevice(SerialInterface serialInterface,FMountCircuit fMountCircuit,IoPort[] txIoPorts){  SerialDevice.interConnectSerialDevices(serialInterface,fMountCircuit);  Pin.interconnect(txIoPorts[IoPort.PORT_I].getPin(3),fMountCircuit.getFromTXPin());  Pin.interconnect(txIoPorts[IoPort.PORT_J].getPin(7),fMountCircuit.getToTXPin());}  }
class C{  void warning(String key,Object... args){  out.println(ownName + ": " + getLocalizedString(key,args));}  }
class C{  public boolean removeAll(Iterable<? extends Solution> iterable){  boolean changed=false;  for (  Solution solution : iterable) {    changed|=remove(solution);  }  return changed;}  }
class C{  public void put(String key,InputStream stream,String name,String contentType){  put(key,stream,name,contentType,autoCloseInputStreams);}  }
class C{  public Digest(boolean signed){  this.signed=signed;}  }
class C{  @Override public void onDestroy(){  unregisterReceiver(mPacManReceiver);  PluginsLookup.getDefault().removeProviderListener(this);  ProviderAggregator.getDefault().removeUpdateCallback(this);  mRemoteMetadata.release();  mHandler.removeCallbacks(mPrefetcher);  mPrefetcher.cancel();  mPrefetcher=null;  if (mHasAudioFocus) {    abandonAudioFocus();  }  mIsForeground=false;  List<ProviderConnection> connections=PluginsLookup.getDefault().getAvailableProviders();  for (  ProviderConnection pc : connections) {    IMusicProvider provider=pc.getBinder();    try {      if (provider != null) {        provider.unregisterCallback(mProviderCallback);      } else {        Log.e(TAG,"Cannot unregister callback: provider binder is null");      }    } catch (    RemoteException e) {      Log.e(TAG,"Cannot unregister callback",e);    }  }  PluginsLookup.getDefault().tearDown(mNativeHub);  savePlaybackQueue();  mNativeHub.onStop();  mNativeHub.setOnAudioWrittenListener(null);  mNativeSink.release();  mCommandsHandlerThread.interrupt();  RefWatcher watcher=OmniMusic.getRefWatcher(this);  watcher.watch(this);  super.onDestroy();}  }
class C{  private void writeVarUInt(int v){  int offset=myOffset;  if (v < (1 << (7 * 1))) {    if (--offset < 0) {      offset=growBuffer(offset);    }    myBuffer[offset]=(byte)(v | 0x80);  } else   if (v < (1 << (7 * 2))) {    if ((offset-=2) < 0) {      offset=growBuffer(offset);    }    myBuffer[offset]=(byte)(v >>> (7 * 1));    myBuffer[offset + 1]=(byte)(v | 0x80);  } else   if (v < (1 << (7 * 3))) {    if ((offset-=3) < 0) {      offset=growBuffer(offset);    }    myBuffer[offset]=(byte)(v >>> (7 * 2));    myBuffer[offset + 1]=(byte)((v >>> (7 * 1)) & 0x7f);    myBuffer[offset + 2]=(byte)(v | 0x80);  } else   if (v < (1 << (7 * 4))) {    if ((offset-=4) < 0) {      offset=growBuffer(offset);    }    myBuffer[offset]=(byte)(v >>> (7 * 3));    myBuffer[offset + 1]=(byte)((v >>> (7 * 2)) & 0x7f);    myBuffer[offset + 2]=(byte)((v >>> (7 * 1)) & 0x7f);    myBuffer[offset + 3]=(byte)(v | 0x80);  } else {    if ((offset-=5) < 0) {      offset=growBuffer(offset);    }    myBuffer[offset]=(byte)(v >>> (7 * 4));    myBuffer[offset + 1]=(byte)((v >>> (7 * 3)) & 0x7f);    myBuffer[offset + 2]=(byte)((v >>> (7 * 2)) & 0x7f);    myBuffer[offset + 3]=(byte)((v >>> (7 * 1)) & 0x7f);    myBuffer[offset + 4]=(byte)(v | 0x80);  }  myOffset=offset;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.BLOCK__STATEMENTS:    getStatements().clear();  getStatements().addAll((Collection<? extends Statement>)newValue);return;case GamlPackage.BLOCK__FUNCTION:setFunction((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  if (bufOff + outOff > out.length) {    throw new DataLengthException("output buffer to small in doFinal");  }  int blockSize=cipher.getBlockSize();  int len=bufOff - blockSize;  byte[] block=new byte[blockSize];  if (forEncryption) {    if (bufOff < blockSize) {      throw new DataLengthException("need at least one block of input for NISTCTS");    }    if (bufOff > blockSize) {      byte[] lastBlock=new byte[blockSize];      if (this.type == CS2 || this.type == CS3) {        cipher.processBlock(buf,0,block,0);        System.arraycopy(buf,blockSize,lastBlock,0,len);        cipher.processBlock(lastBlock,0,lastBlock,0);        if (this.type == CS2 && len == blockSize) {          System.arraycopy(block,0,out,outOff,blockSize);          System.arraycopy(lastBlock,0,out,outOff + blockSize,len);        } else {          System.arraycopy(lastBlock,0,out,outOff,blockSize);          System.arraycopy(block,0,out,outOff + blockSize,len);        }      } else {        System.arraycopy(buf,0,block,0,blockSize);        cipher.processBlock(block,0,block,0);        System.arraycopy(block,0,out,outOff,len);        System.arraycopy(buf,bufOff - len,lastBlock,0,len);        cipher.processBlock(lastBlock,0,lastBlock,0);        System.arraycopy(lastBlock,0,out,outOff + len,blockSize);      }    } else {      cipher.processBlock(buf,0,block,0);      System.arraycopy(block,0,out,outOff,blockSize);    }  } else {    if (bufOff < blockSize) {      throw new DataLengthException("need at least one block of input for CTS");    }    byte[] lastBlock=new byte[blockSize];    if (bufOff > blockSize) {      if (this.type == CS3 || (this.type == CS2 && ((buf.length - bufOff) % blockSize) != 0)) {        if (cipher instanceof CBCBlockCipher) {          BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();          c.processBlock(buf,0,block,0);        } else {          cipher.processBlock(buf,0,block,0);        }        for (int i=blockSize; i != bufOff; i++) {          lastBlock[i - blockSize]=(byte)(block[i - blockSize] ^ buf[i]);        }        System.arraycopy(buf,blockSize,block,0,len);        cipher.processBlock(block,0,out,outOff);        System.arraycopy(lastBlock,0,out,outOff + blockSize,len);      } else {        BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();        c.processBlock(buf,bufOff - blockSize,lastBlock,0);        System.arraycopy(buf,0,block,0,blockSize);        if (len != blockSize) {          System.arraycopy(lastBlock,len,block,len,blockSize - len);        }        cipher.processBlock(block,0,block,0);        System.arraycopy(block,0,out,outOff,blockSize);        for (int i=0; i != len; i++) {          lastBlock[i]^=buf[i];        }        System.arraycopy(lastBlock,0,out,outOff + blockSize,len);      }    } else {      cipher.processBlock(buf,0,block,0);      System.arraycopy(block,0,out,outOff,blockSize);    }  }  int offset=bufOff;  reset();  return offset;}  }
class C{  private boolean isExpression(Instruction inst){  if (inst.isDynamicLinkingPoint())   return false;switch (inst.operator().format) {case InstructionFormat.Unary_format:case InstructionFormat.GuardedUnary_format:case InstructionFormat.Binary_format:case InstructionFormat.GuardedBinary_format:case InstructionFormat.InstanceOf_format:    return true;case InstructionFormat.Call_format:  return inst.isPureCall();default :return false;}}  }
class C{  private String createSubQueryUdocsNotInEliminacion(DbColumnDef idElementoCuadro,String subQueryIdsUdocConservar){  StringBuffer select=new StringBuffer();  TableDef tablaUdocDeposito=new TableDef(UDocEnUiDepositoDbEntityImpl.TABLE_NAME,UDocEnUiDepositoDbEntityImpl.TABLE_NAME);  TableDef tablaUiDeposito=new TableDef(UInstalacionDepositoDBEntity.TABLE_NAME,UInstalacionDepositoDBEntity.TABLE_NAME);  TableDef tablaSolicitudUdoc=new TableDef(DetalleDBEntity.TABLE_NAME,DetalleDBEntity.TABLE_NAME);  TableDef tablaUnidadElectronica=new TableDef(UnidadDocumentalElectronicaDBEntityImpl.TABLE_NAME,UnidadDocumentalElectronicaDBEntityImpl.TABLE_NAME);  select.append(DBUtils.SELECT).append(DetalleDBEntity.IDUDOC_FIELD).append(DBUtils.FROM).append(tablaSolicitudUdoc.getDeclaration()).append(DBUtils.WHERE).append(DBUtils.generateNEQTokenField(DetalleDBEntity.ESTADO_FIELD,PrestamosConstants.ESTADO_DETALLE_DENEGADA)).append(DBUtils.AND).append(DBUtils.generateNEQTokenField(DetalleDBEntity.ESTADO_FIELD,PrestamosConstants.ESTADO_DETALLE_DEVUELTA)).append(DBUtils.UNION).append(DBUtils.SELECT).append(UnidadDocumentalElectronicaDBEntityImpl.IDELEMENTOCF_FIELD).append(DBUtils.FROM).append(tablaUnidadElectronica.getDeclaration()).append(DBUtils.WHERE).append(DBUtils.generateNEQTokenField(UnidadDocumentalElectronicaDBEntityImpl.MARCAS_BLOQUEO_FIELD,0)).append(DBUtils.AND).append(DBUtils.generateJoinCondition(UnidadDocumentalElectronicaDBEntityImpl.IDELEMENTOCF_FIELD,idElementoCuadro)).append(DBUtils.UNION).append(DBUtils.SELECT).append(UDocEnUiDepositoDbEntityImpl.IDUNIDADDOC_FIELD).append(DBUtils.FROM).append(tablaUdocDeposito.getDeclaration()).append(Constants.COMMA).append(tablaUiDeposito.getDeclaration()).append(DBUtils.WHERE).append(DBUtils.generateJoinCondition(UDocEnUiDepositoDbEntityImpl.IDUINSTALACION_FIELD,UInstalacionDepositoDBEntity.ID_FIELD)).append(DBUtils.AND).append(DBUtils.generateJoinCondition(UDocEnUiDepositoDbEntityImpl.IDUNIDADDOC_FIELD,idElementoCuadro)).append(DBUtils.AND).append(DBUtils.generateNEQTokenField(UInstalacionDepositoDBEntity.MARCAS_BLOQUEO_FIELD,0));  if (!StringUtils.isEmpty(subQueryIdsUdocConservar)) {    select.append(DBUtils.UNION).append(subQueryIdsUdocConservar);  }  return select.toString();}  }
class C{  protected void writeFactoriesAddition(final StringBuilder sb,final Map<String,String> factoryMap){  if (factoryMap == null || factoryMap.isEmpty()) {    return;  }  sb.append(in);  sb.append("_factories(");  for (  final String key : factoryMap.keySet()) {    final String[] segments=key.split("\\$");    final String clazz=segments[0];    final String handles="Arrays.asList(" + segments[1] + ")";    sb.append("new ").append(clazz);    sb.append("(").append(handles).append("),");  }  sb.setLength(sb.length() - 1);  sb.append(");");}  }
class C{  @SuppressWarnings("unchecked") public static <T>EmitterInterfaceInfo<T> forInterface(Class<? extends T> iface){  return (EmitterInterfaceInfo<T>)cache.computeIfAbsent(iface,null);}  }
class C{  private void generateAfterBodyCall(String method){  loadHookDispatcher();  swap();  push(methodId);  dup2X1();  pop2();  if (isStatic) {    pushNull();  } else {    loadThis();  }  swap();  loadArgArray();  swap();  mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,IInstrumenterConstant.IHOOK_DISPATCHER_INTERNAL_NAME,method,IInstrumenterConstant.DISPATCH_METHOD_AFTER_BODY_DESCRIPTOR,true);}  }
class C{  public void testLiangFigure6(){  int[] a={0,0,0,0,1,1,1,1};  int[] b={0,0,1,1,0,0,1,1};  int[] c={0,1,0,1,0,1,0,1};  int[] ap={0,0,1,1,0,0,1,1};  int[] bp={0,1,0,1,1,1,1,1};  int[] cp={0,0,0,1,0,1,1,1};  for (int i=0; i < ntimes - 1; i++) {    cases[i][0]=a[i];    cases[i][1]=b[i];    cases[i][2]=c[i];    cases[i + 1][3]=ap[i];    cases[i + 1][4]=bp[i];    cases[i + 1][5]=cp[i];  }  cases[8][0]=0;  cases[8][1]=0;  cases[8][2]=0;  cases[0][3]=0;  cases[0][4]=0;  cases[0][5]=0;  RevealEvaluator re=new RevealEvaluator(cases);  double rea=re.entropy(a);  assertEquals(1.0,rea,TOLERANCE);  System.out.println("H(a) = " + rea);  double reb=re.entropy(b);  assertEquals(1.0,reb,TOLERANCE);  System.out.println("H(b) = " + reb);  double rec=re.entropy(c);  assertEquals(1.0,rec,TOLERANCE);  System.out.println("H(c) = " + rec);  double reab=re.jointEntropy(a,b);  assertEquals(2.0,reab,TOLERANCE);  System.out.println("H(a,b) = " + reab);  double reap=re.entropy(ap);  assertEquals(1.0,reap,TOLERANCE);  System.out.println("H(ap) = " + reap);  double rebp=re.entropy(bp);  assertEquals(0.8112781244591328,rebp,TOLERANCE);  System.out.println("H(bp) = " + rebp);  double recp=re.entropy(cp);  assertEquals(1.0,recp,TOLERANCE);  System.out.println("H(cp) = " + recp);  double reapa=re.jointEntropy(ap,a);  assertEquals(2.0,reapa,TOLERANCE);  System.out.println("H(ap, a) = " + reapa);  double rebpb=re.jointEntropy(bp,b);  assertEquals(1.8112781244591327,rebpb,TOLERANCE);  System.out.println("H(bp, b) = " + rebpb);  double recpb=re.jointEntropy(cp,b);  assertEquals(1.8112781244591327,recpb,TOLERANCE);  System.out.println("H(cp, b) = " + recpb);  int[][] ab=new int[2][8];  for (int i=0; i < 8; i++) {    ab[0][i]=a[i];    ab[1][i]=b[i];  }  double rebpab=re.jointEntropy(bp,ab);  assertEquals(2.5,rebpab,TOLERANCE);  System.out.println("H(bp, a, b) = " + rebpab);  double recpab=re.jointEntropy(cp,ab);  assertEquals(2.5,recpab,TOLERANCE);  System.out.println("H(cp, a, b) = " + recpab);  int[][] abc=new int[3][8];  for (int i=0; i < 8; i++) {    abc[0][i]=a[i];    abc[1][i]=b[i];    abc[2][i]=c[i];  }  double recpabc=re.jointEntropy(cp,abc);  assertEquals(3.0,recpabc,TOLERANCE);  System.out.println("H(cp, a, b, c) = " + recpabc);  int[] p=new int[1];  p[0]=0;  double rembpa=re.mutualInformation(4,p,1);  assertEquals(0.31127812445913294,rembpa,TOLERANCE);  System.out.println("M(Bp, A) = " + rembpa);  int[] pp=new int[2];  pp[0]=0;  pp[1]=1;  double rmcpab=re.mutualInformation(5,pp,1);  assertEquals(0.5,rmcpab,TOLERANCE);  System.out.println("M(Cp, [A,B]) = " + rmcpab);  int[] ppp=new int[3];  ppp[0]=0;  ppp[1]=1;  ppp[2]=2;  double rmcpabc=re.mutualInformation(5,ppp,1);  assertEquals(1.0,rmcpabc,TOLERANCE);  System.out.println("M(Cp, [A,B,C]) = " + rmcpabc);}  }
class C{  public void testDynamicRepeatedMessageNotNull() throws Exception {  TestAllTypes REPEATED_NESTED=TestAllTypes.newBuilder().setOptionalInt32(1).setOptionalString("foo").setOptionalForeignMessage(ForeignMessage.getDefaultInstance()).addRepeatedString("bar").addRepeatedForeignMessage(ForeignMessage.getDefaultInstance()).addRepeatedForeignMessage(ForeignMessage.getDefaultInstance()).build();  Descriptors.Descriptor descriptor=TestRequired.getDescriptor();  DynamicMessage result=DynamicMessage.newBuilder(TestAllTypes.getDescriptor()).mergeFrom(DynamicMessage.newBuilder(REPEATED_NESTED).build()).build();  assertTrue(result.getField(result.getDescriptorForType().findFieldByName("repeated_foreign_message")) instanceof List<?>);  assertEquals(result.getRepeatedFieldCount(result.getDescriptorForType().findFieldByName("repeated_foreign_message")),2);}  }
class C{  public int exit_code(){  return Integer.parseInt(fields[51]);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public void doMatch(){  boolean matchFound=false;  for (  ConsumablePattern<T> pattern : patterns) {    if (pattern.matches(value)) {      pattern.consume(value);      matchFound=true;      break;    }  }  if (!matchFound) {    throw new MatchException("No match found for " + value);  }}  }
class C{  @Override protected void doPut(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String[] serverClasses=this.context.getServerClasses();  try {    this.context.setServerClasses(null);    String command=request.getServletPath();    if (command.equals("/deploy")) {      String contextPath=request.getParameter("path");      deployArchive(request,response,contextPath);    } else {      sendError(response,"Command " + command + " is not recognized with PUT");    }  }  finally {    this.context.setServerClasses(serverClasses);  }}  }
class C{  protected synchronized void damage(Rectangle r){  if (r != null) {    validateWidth(r);    x=r.x - 1;    y=r.y;    width=r.width + 4;    height=r.height;    repaint();  }}  }
class C{  public static synchronized void restoreConsoleAppender(){  if (stdoutAppender == null) {    return;  }  final AppenderContext appenderContext=LogService.getAppenderContext(LogService.ROOT_LOGGER_NAME);  final LoggerConfig config=appenderContext.getLoggerConfig();  Appender stdout=config.getAppenders().get(STDOUT);  if (stdout == null) {    config.addAppender(stdoutAppender,Level.ALL,null);    appenderContext.getLoggerContext().updateLoggers();  }}  }
class C{  public boolean isShowB(){  return showB;}  }
class C{  public void test_updateLargeValueWithSmallValue(){  final MyRawStore store=new MyRawStore(new SimpleMemoryRawStore());  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setRawRecords(true);  metadata.setMaxRecLen(64);  final BTree btree=BTree.create(store,metadata);  assertEquals(64,btree.getMaxRecLen());  assertTrue(((ILeafData)btree.getRoot()).hasRawRecords());  final byte[] key=new byte[]{1};  final byte[] val=new byte[btree.getMaxRecLen() + 1];  r.nextBytes(val);  assertNull(btree.insert(key,val));  final Leaf root=(Leaf)btree.getRoot();  final long addr=root.getRawRecord(0);  assertTrue(addr != IRawStore.NULL);  final ByteBuffer actual=btree.readRawRecord(addr);  TestCase3.assertEquals(val,actual);  final byte[] newval=new byte[btree.getMaxRecLen() - 1];  r.nextBytes(newval);  store.expectDelete=addr;  final byte[] oldval=btree.insert(key,newval);  assertEquals(IRawStore.NULL,store.expectDelete);  assertEquals(val,oldval);  assertEquals(IRawStore.NULL,root.getRawRecord(0));}  }
class C{  public void updateCount(int highlightsCountNew,int highlightsCount,int ignoredCountNew,int ignoredCount){  highlights.setText(buildCount(HIGHLIGHTS_LABEL,highlightsCountNew,highlightsCount));  ignored.setText(buildCount(IGNORED_LABEL,ignoredCountNew,ignoredCount));}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  public int modelIndex(final int viewIndex){  return convertRowIndexToModel(viewIndex);}  }
class C{  synchronized public void terminate(){  done=true;}  }
class C{  public JLTransform(final int k,final TransformMode mode){  this(k,mode,true);}  }
class C{  public NormalMethod(Token t,String name,int params,Type returnType,List<Declaration> decls,Statement body){  super(t,name,params,returnType);  this.decls=decls;  this.body=body;}  }
class C{  public static <T extends ServiceDocument,B extends ServiceDocument>B doPost(VerificationHost host,Class<B> type,URI uri) throws Throwable {  final ServiceDocument[] doc={null};  host.testStart(1);  Operation post=Operation.createPost(uri).setCompletion(null);  host.send(post);  host.testWait();  host.logThroughput();  B outState=host.getServiceState(null,type,UriUtils.buildUri(uri.getHost(),uri.getPort(),doc[0].documentSelfLink,null));  return outState;}  }
class C{  private static <T>T pgpCast(@Nullable Object object,Class<T> expect) throws PGPException {  if (object == null) {    throw new PGPException(String.format("Expected %s but out of objects",expect.getSimpleName()));  }  if (!expect.isAssignableFrom(object.getClass())) {    throw new PGPException(String.format("Expected %s but got %s",expect.getSimpleName(),object.getClass().getSimpleName()));  }  return expect.cast(object);}  }
class C{  public synchronized Relationship addRelationship(Vertex type,Vertex target){  return addRelationship(type,target,-1,false);}  }
class C{  public void loadProperties(boolean silent){  loadPropertiesFile(System.getProperty(PROPERTIES_FILE,"evosuite-files/evosuite.properties"),silent);  initializeProperties();}  }
class C{  public static String writeGeometry(Geometry geometry,double z){  KMLWriter writer=new KMLWriter();  writer.setZ(z);  return writer.write(geometry);}  }
class C{  @Override public boolean isAllocatable(Register r){  if (r.number == THREAD_REGISTER.value() || r.number == FRAME_POINTER.value() || r.number == JTOC_POINTER.value()) {    return false;  } else {    return (r.number < FIRST_SPECIAL);  }}  }
class C{  public static Address fromP2SHScript(NetworkParameters params,Script scriptPubKey){  checkArgument(scriptPubKey.isPayToScriptHash(),"Not a P2SH script");  return fromP2SHHash(params,scriptPubKey.getPubKeyHash());}  }
class C{  public boolean isCreateField(){  return fCreateField;}  }
class C{  public AdaptiveGridArchive(int capacity,Problem problem,int numberOfDivisions){  this.capacity=capacity;  this.problem=problem;  this.numberOfDivisions=numberOfDivisions;  minimum=new double[problem.getNumberOfObjectives()];  maximum=new double[problem.getNumberOfObjectives()];  density=new int[(int)Math.pow(numberOfDivisions,problem.getNumberOfObjectives())];  adaptGrid();}  }
class C{  public ToHeader createToHeader(Address address,String tag) throws ParseException {  if (address == null)   throw new NullPointerException("null address");  To to=new To();  to.setAddress(address);  if (tag != null)   to.setTag(tag);  return to;}  }
class C{  public final double sampleCount(){  long lastAcquireCount=_lastAcquireCount;  _lastAcquireCount=_acquireCount.get();  return _lastAcquireCount - lastAcquireCount;}  }
class C{  private void logQuery(final String queryStr){  sparqlLog.info(null);}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  private int findBestBucket(){  Bucket[] buckets=_collList;  int bestCount=Integer.MAX_VALUE;  int bestIx=-1;  for (int i=0, len=_collEnd; i < len; ++i) {    int count=buckets[i].length();    if (count < bestCount) {      if (count == 1) {        return i;      }      bestCount=count;      bestIx=i;    }  }  return bestIx;}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  public void disconnect(){  this.user=null;  this.domain=null;}  }
class C{  public boolean isCoveredByA(Coordinate coord){  if (isCovered(coord,resultPolyList))   return true;  return false;}  }
class C{  private static Scenario parseSchedule(String scheduleFile,String networkFile){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new MatsimNetworkReader(sc.getNetwork()).readFile(networkFile);  new TransitScheduleReader(sc).readFile(scheduleFile);  return sc;}  }
class C{  public final void lazySet(boolean newValue){  int v=newValue ? 1 : 0;  unsafe.putOrderedInt(this,valueOffset,v);}  }
class C{  protected static DataStoreProducer createDataStoreProducerFromFiles(File[] files) throws IllegalArgumentException {  if (files == null || files.length == 0) {    String message=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String commonPixelFormat=null;  for (  File file : files) {    AVList params=new AVListImpl();    if (DataInstallUtil.isDataRaster(file,params)) {      String pixelFormat=params.getStringValue(AVKey.PIXEL_FORMAT);      if (WWUtil.isEmpty(commonPixelFormat)) {        if (WWUtil.isEmpty(pixelFormat)) {          String message=Logging.getMessage("generic.UnrecognizedSourceType",file.getAbsolutePath());          Logging.logger().severe(message);          throw new IllegalArgumentException(message);        } else {          commonPixelFormat=pixelFormat;        }      } else       if (commonPixelFormat != null && !commonPixelFormat.equals(pixelFormat)) {        if (WWUtil.isEmpty(pixelFormat)) {          String message=Logging.getMessage("generic.UnrecognizedSourceType",file.getAbsolutePath());          Logging.logger().severe(message);          throw new IllegalArgumentException(message);        } else {          String reason=Logging.getMessage("generic.UnexpectedRasterType",pixelFormat);          String details=file.getAbsolutePath() + ": " + reason;          String message=Logging.getMessage("DataRaster.IncompatibleRaster",details);          Logging.logger().severe(message);          throw new IllegalArgumentException(message);        }      }    } else     if (DataInstallUtil.isWWDotNetLayerSet(file)) {      return new WWDotNetLayerSetConverter();    }  }  if (AVKey.IMAGE.equals(commonPixelFormat)) {    return new TiledImageProducer();  } else   if (AVKey.ELEVATION.equals(commonPixelFormat)) {    return new TiledElevationProducer();  }  String message=Logging.getMessage("generic.UnexpectedRasterType",commonPixelFormat);  Logging.logger().severe(message);  throw new IllegalArgumentException(message);}  }
class C{  public ObjectMatrix1D like1D(int size){  return new DenseObjectMatrix1D(size);}  }
class C{  private void finalizeQuery(final UUID queryId) throws QueryCancelledException {  if (queryId == null)   return;  final boolean isQueryCancelled=isQueryCancelled(queryId);  tearDownQuery(queryId);  if (isQueryCancelled) {    if (log.isDebugEnabled()) {      log.debug(queryId + " execution canceled.");    }    throw new QueryCancelledException(queryId + " execution canceled.",queryId);  }}  }
class C{  public void executeImpl(){  if (getArgs().getIterator().hasNext()) {    final ContentValues values=makeRawContact(1);    getArgs().getAdapter().startInsert(this,INSERT_RAW_CONTACT,RawContacts.CONTENT_URI,values);  } else   Utils.showToast(getArgs().getOps().getActivityContext(),getArgs().getCounter().getValue() + " contact(s) inserted");}  }
class C{  boolean isTerminatedOnBye(){  return this.terminateOnBye;}  }
class C{  LaunchConfiguration(ILaunch launch,String name,WebAppDebugModel model){  id=model.getModelNodeNextId();  this.launch=launch;  this.name=name;  this.model=model;  String typeId=WebAppLaunchConfiguration.TYPE_ID;  ILaunchConfiguration launchConfiguration=launch.getLaunchConfiguration();  if (launchConfiguration != null) {    try {      typeId=launchConfiguration.getType().getIdentifier();    } catch (    CoreException e) {      GWTPluginLog.logError(e,"Could not determine the launch configuration type");    }  }  this.launchTypeId=typeId;}  }
class C{  public PropertyTable sort(){  sorted=true;  widget.refillData();  return this;}  }
class C{  public void testParallelDocMaker() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"content.source.log.step=3","doc.term.vector=false","content.source.forever=false","directory=FSDirectory","doc.stored=false","doc.tokenized=false","# ----- alg ","CreateIndex","[ { AddDoc } : * ] : 4 ","CloseIndex"};  Benchmark benchmark=execBenchmark(algLines);  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  int ndocsExpected=20;  assertEquals("wrong number of docs in the index!",ndocsExpected,ir.numDocs());  ir.close();}  }
class C{  protected void doFloodBDDP(DatapathId pinSwitch,OFPacketIn pi,FloodlightContext cntx){  TopologyInstance ti=getCurrentInstance(false);  Set<DatapathId> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);  if (switches == null) {    switches=new HashSet<DatapathId>();    switches.add(pinSwitch);  }  for (  DatapathId sid : switches) {    IOFSwitch sw=switchService.getSwitch(sid);    if (sw == null)     continue;    Collection<OFPort> enabledPorts=sw.getEnabledPortNumbers();    if (enabledPorts == null)     continue;    Set<OFPort> ports=new HashSet<OFPort>();    ports.addAll(enabledPorts);    Set<OFPort> portsKnownToTopo=ti.getPortsWithLinks(sid);    if (portsKnownToTopo != null) {      for (      OFPort p : portsKnownToTopo) {        NodePortTuple npt=new NodePortTuple(sid,p);        if (ti.isBroadcastDomainPort(npt) == false) {          ports.remove(p);        }      }    }    Set<OFPort> portsToEliminate=getPortsToEliminateForBDDP(sid);    if (portsToEliminate != null) {      ports.removeAll(portsToEliminate);    }    if (pinSwitch == sid) {      ports.remove((pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)));    }    doMultiActionPacketOut(pi.getData(),sw,ports,cntx);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void play() throws IOException {  handleCommand("new");  while (true) {    if (currentMove > 0) {      Position prevPos=new Position(pos);      prevPos.unMakeMove(moveList.get(currentMove - 1),uiInfoList.get(currentMove - 1));      String moveStr=TextIO.moveToString(prevPos,moveList.get(currentMove - 1),false);      if (haveDrawOffer()) {        moveStr+=" (offer draw)";      }      String msg=String.format("Last move: %d%s %s",prevPos.fullMoveCounter,prevPos.whiteMove ? "." : "...",moveStr);      System.out.println(msg);    }{      Evaluate eval=new Evaluate();      int evScore=eval.evalPos(pos) * (pos.whiteMove ? 1 : -1);      System.out.printf("Eval: %.2f%n",evScore / 100.0);    }    System.out.print(TextIO.asciiBoard(pos));    String stateStr=getGameStateString();    if (stateStr.length() > 0) {      System.out.printf("%s%n",stateStr);    }    if (getGameState() != GameState.ALIVE) {      activateHumanPlayer();    }    Player pl=pos.whiteMove ? whitePlayer : blackPlayer;    String moveStr=pl.getCommand(new Position(pos),haveDrawOffer(),getHistory());    if (moveStr.equals("quit")) {      return;    } else {      boolean ok=processString(moveStr);      if (!ok) {        System.out.printf("Invalid move: %s\n",moveStr);      }    }  }}  }
class C{  private void build(EventNode element){  for (  Attribute entry : element) {    InputAttribute value=new InputAttribute(source,entry);    if (!entry.isReserved()) {      put(value.getName(),value);    }  }}  }
class C{  private void activeDirections(){  RecyclerView instructionsRV;  RecyclerView.Adapter instructionsAdapter;  RecyclerView.LayoutManager instructionsLayoutManager;  instructionsRV=(RecyclerView)activity.findViewById(R.id.nav_instruction_recycler_view);  instructionsRV.setHasFixedSize(true);  instructionsLayoutManager=new LinearLayoutManager(activity);  instructionsRV.setLayoutManager(instructionsLayoutManager);  instructionsAdapter=new InstructionAdapter(Navigator.getNavigator().getGhResponse().getInstructions());  instructionsRV.setAdapter(instructionsAdapter);  initNavListView();}  }
class C{  private static void bindParam(Param param,Object target,Field field,ParameterAccess parameters){  String fieldName=field.getName();  Class<?> fieldType=field.getType();  String paramName=StringUtils.defaultIfBlank(param.value(),fieldName);  Object value=parameters.get(paramName);  if (value == null && param.required()) {    String message=String.format("Required parameter '%s' is missing for field %s on %s",paramName,fieldName,field.getDeclaringClass().getName());    throw new BindingException(message);  } else   if (value != null) {    if (log.isDebugEnabled()) {      log.debug(String.format("Binding parameter '%s' to field '%s'",paramName,fieldName));    }    try {      field.setAccessible(true);      field.set(target,convert(value,fieldType));    } catch (    Exception e) {      String message=String.format("Error binding parameter '%s' to field '%s'",paramName,fieldName);      throw new BindingException(message,e);    }  }}  }
class C{  public Message(String to){  setTo(to);}  }
class C{  public boolean decodeContentLength(int startIndex){  return decodeIntegerValue(startIndex);}  }
class C{  public Object clone(){  Object retval=super.clone();  return retval;}  }
class C{  public void purgeMethodAnalyses(MethodDescriptor methodDescriptor){  Set<Map.Entry<Class<?>,Map<MethodDescriptor,Object>>> entrySet=methodAnalysisObjectMap.entrySet();  for (Iterator<Map.Entry<Class<?>,Map<MethodDescriptor,Object>>> i=entrySet.iterator(); i.hasNext(); ) {    Map.Entry<Class<?>,Map<MethodDescriptor,Object>> entry=i.next();    Class<?> cls=entry.getKey();    if (!DataflowAnalysis.class.isAssignableFrom(cls) && !Dataflow.class.isAssignableFrom(cls)) {      continue;    }    entry.getValue().remove(methodDescriptor);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.930 -0500",hash_original_method="6F26EA9283182B6EDEDBB0B351568D69",hash_generated_method="F662A6A65B44702E63645DCDC7DA2C8A") public boolean hasAlmanac(){  return mHasAlmanac;}  }
class C{  public AsyncResult RegisterNodesAsync(RequestHeader RequestHeader,NodeId... NodesToRegister){  RegisterNodesRequest req=new RegisterNodesRequest(RequestHeader,NodesToRegister);  return channel.serviceRequestAsync(req);}  }
class C{  public boolean drawImage(Image img,int x,int y,Color bgcolor,ImageObserver observer){  if (img == null) {    return true;  }  ImageWaiter dim=new ImageWaiter(img);  addDrawingRect(x,y,dim.getWidth(),dim.getHeight());  mPrintMetrics.drawImage(this,img);  return mGraphics.drawImage(img,x,y,bgcolor,observer);}  }
class C{  public static String randomUUID(int length){  String chars="ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";  String uuid="";  for (int i=0; i < length; i++) {    uuid+=chars.charAt((int)(Math.random() * chars.length()));  }  return uuid;}  }
class C{  public DefaultSignedAttributeTableGenerator(AttributeTable attributeTable){  if (attributeTable != null) {    table=attributeTable.toHashtable();  } else {    table=new Hashtable();  }}  }
class C{  protected String formatCsv(final String text,final char csvSeparator){  String result=text;  if (result.indexOf('\n') != -1) {    result=result.replace('\n',' ');  }  int index=result.indexOf('"');  while (index != -1) {    result=new StringBuilder(result).insert(index,'"').toString();    index=result.indexOf('"',index + 2);  }  if (text.indexOf(csvSeparator) != -1 || text.indexOf('"') != -1) {    final String tmp='"' + result + '"';    result=tmp;  }  return result;}  }
class C{  public RealFIRFilter_RB_RB(float[] coefficients,float gain){  super(coefficients,gain);}  }
class C{  public Multiply(){  super("basic.multiplication",2,Ontology.NUMERICAL);}  }
class C{  private void updateSelectedServiceForUpgrade(final Long serviceKey) throws SaaSApplicationException {  Service selectedService=getServiceFromServer(serviceKey);  if (selectedService == null) {    return;  }  if (selectedService.getVO().getStatus() != ServiceStatus.ACTIVE) {    return;  }  model.setService(selectedService);  Collections.sort(selectedService.getPriceModel().getVo().getSteppedPrices(),new SteppedPriceComparator());  updateServiceEvents(selectedService.getPriceModel().getVo());  List<PricedParameterRow> serviceParameters=PricedParameterRow.createPricedParameterRowList(selectedService.getVO(),true,true,true,true,false);  model.setServiceParameters(serviceParameters);  mapToCurrentSubscriptionValues(model.getSubscriptionParameters(),model.getServiceParameters());}  }
class C{  protected int addObservationsAfterParamsDetermined(double[] source,double[] destination,boolean[] sourceValid,boolean[] destValid) throws Exception {  Vector<int[]> startAndEndTimePairs=computeStartAndEndTimePairs(sourceValid,destValid);  int totalObservationsAdded=0;  for (  int[] timePair : startAndEndTimePairs) {    int startTime=timePair[0];    int endTime=timePair[1];    totalObservationsAdded+=addObservationsAfterParamsDetermined(MatrixUtils.select(source,startTime,endTime - startTime + 1),MatrixUtils.select(destination,startTime,endTime - startTime + 1));  }  return totalObservationsAdded;}  }
class C{  @Override public void report(){  Instrumentation.disableInstrumentation();  VM.sysWrite("Printing " + dataName + ":\n");  VM.sysWrite("--------------------------------------------------\n");  double total=0;  for (  String stringName : stringToCounterMap.keySet()) {    int counterIdx=getCounterIndexForString(stringName);    double counterVal=getCounter(counterIdx);    VM.sysWrite(doubleToString(counterVal) + " " + stringName+ "\n");    total+=counterVal;  }  VM.sysWrite("Total: " + doubleToString(total) + "\n");}  }
class C{  public void randomize(){  for (int i=0; i < lookupTable.length; i++) {    this.lookupTable[i]=RandomUtil.getInstance().nextDouble() > 0.5;  }}  }
class C{  public static int[] randomInts(int max,int count){  int[] vals=new int[count];  for (int i=0; i < count; i++)   vals[i]=SEEDED_RANDOM.nextInt(max);  return vals;}  }
class C{  public void updateColor(){  if (synapse.getStrength() < 0) {    circle.setPaint(inhibitoryColor);  } else   if (synapse.getStrength() == 0) {    circle.setPaint(zeroWeightColor);  } else {    circle.setPaint(excitatoryColor);  }  if (source.getNeuron().isSpike()) {    line.setStrokePaint(NeuronNode.getSpikingColor());  } else {    line.setStrokePaint(lineColor);  }}  }
class C{  private void putResize(long key,V value){  if (key == 0) {    zeroValue=value;    hasZeroValue=true;    return;  }  int index1=(int)(key & mask);  long key1=keyTable[index1];  if (key1 == EMPTY) {    keyTable[index1]=key;    valueTable[index1]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index2=hash2(key);  long key2=keyTable[index2];  if (key2 == EMPTY) {    keyTable[index2]=key;    valueTable[index2]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index3=hash3(key);  long key3=keyTable[index3];  if (key3 == EMPTY) {    keyTable[index3]=key;    valueTable[index3]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  push(key,value,index1,key1,index2,key2,index3,key3);}  }
class C{  public static boolean invertM(double[] mInv,int mInvOffset,double[] m,int mOffset){  final double src0=m[mOffset + 0];  final double src4=m[mOffset + 1];  final double src8=m[mOffset + 2];  final double src12=m[mOffset + 3];  final double src1=m[mOffset + 4];  final double src5=m[mOffset + 5];  final double src9=m[mOffset + 6];  final double src13=m[mOffset + 7];  final double src2=m[mOffset + 8];  final double src6=m[mOffset + 9];  final double src10=m[mOffset + 10];  final double src14=m[mOffset + 11];  final double src3=m[mOffset + 12];  final double src7=m[mOffset + 13];  final double src11=m[mOffset + 14];  final double src15=m[mOffset + 15];  final double atmp0=src10 * src15;  final double atmp1=src11 * src14;  final double atmp2=src9 * src15;  final double atmp3=src11 * src13;  final double atmp4=src9 * src14;  final double atmp5=src10 * src13;  final double atmp6=src8 * src15;  final double atmp7=src11 * src12;  final double atmp8=src8 * src14;  final double atmp9=src10 * src12;  final double atmp10=src8 * src13;  final double atmp11=src9 * src12;  final double dst0=(atmp0 * src5 + atmp3 * src6 + atmp4 * src7) - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);  final double dst1=(atmp1 * src4 + atmp6 * src6 + atmp9 * src7) - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);  final double dst2=(atmp2 * src4 + atmp7 * src5 + atmp10 * src7) - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);  final double dst3=(atmp5 * src4 + atmp8 * src5 + atmp11 * src6) - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);  final double dst4=(atmp1 * src1 + atmp2 * src2 + atmp5 * src3) - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);  final double dst5=(atmp0 * src0 + atmp7 * src2 + atmp8 * src3) - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);  final double dst6=(atmp3 * src0 + atmp6 * src1 + atmp11 * src3) - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);  final double dst7=(atmp4 * src0 + atmp9 * src1 + atmp10 * src2) - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);  final double btmp0=src2 * src7;  final double btmp1=src3 * src6;  final double btmp2=src1 * src7;  final double btmp3=src3 * src5;  final double btmp4=src1 * src6;  final double btmp5=src2 * src5;  final double btmp6=src0 * src7;  final double btmp7=src3 * src4;  final double btmp8=src0 * src6;  final double btmp9=src2 * src4;  final double btmp10=src0 * src5;  final double btmp11=src1 * src4;  final double dst8=(btmp0 * src13 + btmp3 * src14 + btmp4 * src15) - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);  final double dst9=(btmp1 * src12 + btmp6 * src14 + btmp9 * src15) - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);  final double dst10=(btmp2 * src12 + btmp7 * src13 + btmp10 * src15) - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);  final double dst11=(btmp5 * src12 + btmp8 * src13 + btmp11 * src14) - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);  final double dst12=(btmp2 * src10 + btmp5 * src11 + btmp1 * src9) - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);  final double dst13=(btmp8 * src11 + btmp0 * src8 + btmp7 * src10) - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);  final double dst14=(btmp6 * src9 + btmp11 * src11 + btmp3 * src8) - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);  final double dst15=(btmp10 * src10 + btmp4 * src8 + btmp9 * src9) - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);  final double det=src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;  if (det == 0.0f) {    return false;  }  final double invdet=1.0f / det;  mInv[mInvOffset]=dst0 * invdet;  mInv[1 + mInvOffset]=dst1 * invdet;  mInv[2 + mInvOffset]=dst2 * invdet;  mInv[3 + mInvOffset]=dst3 * invdet;  mInv[4 + mInvOffset]=dst4 * invdet;  mInv[5 + mInvOffset]=dst5 * invdet;  mInv[6 + mInvOffset]=dst6 * invdet;  mInv[7 + mInvOffset]=dst7 * invdet;  mInv[8 + mInvOffset]=dst8 * invdet;  mInv[9 + mInvOffset]=dst9 * invdet;  mInv[10 + mInvOffset]=dst10 * invdet;  mInv[11 + mInvOffset]=dst11 * invdet;  mInv[12 + mInvOffset]=dst12 * invdet;  mInv[13 + mInvOffset]=dst13 * invdet;  mInv[14 + mInvOffset]=dst14 * invdet;  mInv[15 + mInvOffset]=dst15 * invdet;  return true;}  }
class C{  @CanIgnoreReturnValue public E removeFirst(){  return remove();}  }
class C{  public void memberValuePair(String memberName) throws IOException {  memberValuePair(pool.addUtf8Info(memberName));}  }
class C{  public NotificationChain basicSetDeclaredUpperBound(TypeRef newDeclaredUpperBound,NotificationChain msgs){  TypeRef oldDeclaredUpperBound=declaredUpperBound;  declaredUpperBound=newDeclaredUpperBound;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TYPE_VARIABLE__DECLARED_UPPER_BOUND,oldDeclaredUpperBound,newDeclaredUpperBound);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public SearchScript search(SearchLookup lookup,Script script,ScriptContext scriptContext){  CompiledScript compiledScript=compile(script,scriptContext,SearchContext.current());  return getScriptEngineServiceForLang(compiledScript.lang()).search(compiledScript,lookup,script.getParams());}  }
class C{  public void writeCountedString(byte[] s){  if (s.length > 0xFF) {    throw new IllegalArgumentException("Invalid counted string");  }  need(1 + s.length);  array[pos++]=(byte)(s.length & 0xFF);  writeByteArray(s,0,s.length);}  }
class C{  public List<StoragePool> matchAttributes(List<StoragePool> allPools,Map<String,Object> attributeMap,DbClient dbClient,CoordinatorClient coordinator,String matcherGroupName,StringBuffer errorMessage){  List<StoragePool> matchedPools=new ArrayList<StoragePool>();  if (!CollectionUtils.isEmpty(allPools)) {    matchedPools.addAll(allPools);    try {      _logger.info("Starting execution of {} group matchers .",matcherGroupName);      @SuppressWarnings("unchecked") List<AttributeMatcher> attrMatcherList=(List<AttributeMatcher>)getBeanFromContext(matcherGroupName);      ObjectLocalCache cache=new ObjectLocalCache(dbClient);      initializeCommonReferencesForAllMatchers(cache,coordinator);      for (      AttributeMatcher matcher : attrMatcherList) {        int poolSizeAtTheStart=matchedPools.size();        if (!matchedPools.isEmpty()) {          _logger.debug("passing {} pools to match",matchedPools.size());          matchedPools=matcher.runMatchStoragePools(matchedPools,attributeMap,errorMessage);          if (matchedPools.isEmpty()) {            _logger.info(String.format("Failed to find match because of %s",matcher.getClass().getSimpleName()));          } else           if (matchedPools.size() < poolSizeAtTheStart) {            _logger.info(String.format("%s eliminated %d pools from the matched list",matcher.getClass().getSimpleName(),poolSizeAtTheStart - matchedPools.size()));          }        } else {          _logger.info("No storage pools found matching with attributeMap passed");          break;        }      }      cache.clearCache();    } catch (    Exception ex) {      matchedPools.clear();      _logger.error("Exception occurred while matching pools with vPools",ex);    } finally {      _logger.info("Ended execution of {} group matchers .",matcherGroupName);    }  } else {    errorMessage.append("Virtual pool does not have matching Storage pool.");    _logger.error(errorMessage.toString());  }  return matchedPools;}  }
class C{  static byte[] applyMask(final ImageData imageData,final GenericColorSpace decodeColorData,final PdfObject newMask,final PdfObject XObject,byte[] maskDataSream){  final int[] maskArray=XObject.getIntArray(PdfDictionary.Mask);  byte[] objectData=imageData.getObjectData();  int w=imageData.getWidth();  int h=imageData.getHeight();  int d=imageData.getDepth();  objectData=convertData(decodeColorData,objectData,w,h,imageData,d,1,null);  XObject.setIntNumber(PdfDictionary.BitsPerComponent,8);  if (maskArray != null) {    objectData=applyMaskArray(w,h,objectData,maskArray);  } else {    objectData=applyMaskStream(maskDataSream,imageData,newMask,XObject);  }  final float[] maskDecodeArray=newMask.getFloatArray(PdfDictionary.Decode);  if (maskDecodeArray != null) {    ImageCommands.applyDecodeArray(objectData,maskDecodeArray.length / 2,maskDecodeArray,ColorSpaces.DeviceRGB);  }  return objectData;}  }
class C{  public int supportedSpeedModes(){  return (jmri.DccThrottle.SpeedStepMode128);}  }
class C{  private void updateAction(){  boolean atLeastOneSourceSelected=(networkPanel.getSourceModelNeurons().size() > 0);  boolean atLeastOneTargetSelected=(networkPanel.getSelectedModelElements().size() > 0);  if (atLeastOneSourceSelected && atLeastOneTargetSelected) {    setEnabled(true);  } else {    setEnabled(false);  }}  }
class C{  public LineNumberInputStream(InputStream in){  super(in);}  }
class C{  private AddResult addTestMethod(Method m,List<String> names,Class<?> theClass,@Nullable IgnoreDescriptor clsIgnore){  String name=m.getName();  if (names.contains(name))   return new AddResult(false,null);  if (!isPublicTestMethod(m)) {    if (isTestMethod(m))     addTest(warning("Test method isn't public: " + m.getName() + "("+ theClass.getCanonicalName()+ ")"));    return new AddResult(false,null);  }  names.add(name);  IgnoreDescriptor ignore=IgnoreDescriptor.forMethod(theClass,m);  if (ignore == null)   ignore=clsIgnore;  if (ignoredOnly) {    if (ignore != null) {      Test test=createTest(theClass,name);      if (ignore.forceFailure()) {        if (test instanceof GridAbstractTest)         ((GridAbstractTest)test).forceFailure(ignore.reason()); else         test=new ForcedFailure(name,ignore.reason());      }      addTest(test);      return new AddResult(true,test);    }  } else {    if (ignore == null) {      Test test=createTest(theClass,name);      addTest(test);      return new AddResult(true,test);    }  }  return new AddResult(false,null);}  }
class C{  public boolean isValidBSTC(TreeNode root){  if (root == null) {    return true;  }  List<Integer> result=new ArrayList<Integer>();  inOrderList(root,result);  for (int i=0; i < result.size() - 1; i++) {    if (result.get(i) >= result.get(i + 1)) {      return false;    }  }  return true;}  }
class C{  public RemoteRepositoryManager(final String serviceURL,final boolean useLBS){  this(serviceURL,useLBS,null,null);}  }
class C{  private boolean inQuotes(boolean inQuotes){  return (inQuotes && !ignoreQuotations) || inField;}  }
class C{  public static int ETXTBSY(){  return Errno.ETXTBSY.intValue();}  }
class C{  public <T extends JCTree>List<T> translate(List<T> trees){  if (trees == null)   return null;  for (List<T> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  @Override public void serialize(CumulativeTimeBucket ctb,JsonGenerator jGen,SerializerProvider serializer) throws IOException, JsonProcessingException {  jGen.writeStartObject();  Timestamp ts=new Timestamp(ctb.getStartTimeNs() / 1000000);  jGen.writeStringField("start-time",ts.toString());  jGen.writeStringField("current-time",new Timestamp(System.currentTimeMillis()).toString());  jGen.writeNumberField("total-packets",ctb.getTotalPktCnt());  jGen.writeNumberField("average",ctb.getAverageProcTimeNs());  jGen.writeNumberField("min",ctb.getMinTotalProcTimeNs());  jGen.writeNumberField("max",ctb.getMaxTotalProcTimeNs());  jGen.writeNumberField("std-dev",ctb.getTotalSigmaProcTimeNs());  jGen.writeArrayFieldStart("modules");  for (  OneComponentTime oct : ctb.getModules()) {    serializer.defaultSerializeValue(oct,jGen);  }  jGen.writeEndArray();  jGen.writeEndObject();}  }
class C{  public boolean contains(Cell other){  for (int dim=0; dim < numDims; dim++) {    int offset=bytesPerDim * dim;    if (StringHelper.compare(bytesPerDim,other.minPackedValue,offset,minPackedValue,offset) < 0) {      return false;    }    if (StringHelper.compare(bytesPerDim,other.maxPackedValue,offset,maxPackedValue,offset) > 0) {      return false;    }  }  return true;}  }
class C{  public R2Indicator(Problem problem,int subdivisions,NondominatedPopulation referenceSet,UtilityFunction utilityFunction){  super(problem,subdivisions,referenceSet,utilityFunction);}  }
class C{  public void removeAllPatterns(){  patternCount=0;  for (int i=0; i < patterns.length; i++)   patterns[i]=null;}  }
class C{  public void skipValue() throws IOException {  skipping=true;  try {    int count=0;    do {      JsonToken token=advance();      if (token == JsonToken.BEGIN_ARRAY || token == JsonToken.BEGIN_OBJECT) {        count++;      } else       if (token == JsonToken.END_ARRAY || token == JsonToken.END_OBJECT) {        count--;      }    } while (count != 0);  }  finally {    skipping=false;  }}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  protected BannerMetaBuilder(final BannerMeta meta){  this.meta=meta.clone();}  }
class C{  public static ForbiddenGraphModel serializableInstance(){  return new ForbiddenGraphModel(new Parameters(),GraphWrapper.serializableInstance());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:15.754 -0400",hash_original_method="69D946FD97044C86CE0465D31431BEE8",hash_generated_method="B8A799CD62E8854F6C88BB7FED1CBA85") public void addCertStore(CertStore store){  if (store == null) {    return;  }  if (certStores == null) {    certStores=new ArrayList<CertStore>();  }  certStores.add(store);}  }
class C{  static public void startCrisis(){synchronized (lockCrisis) {    crisis=true;  }}  }
class C{  protected void drawPoint(Graphics2D g,PlotterPoint point,ColorProvider colorProvider,int midX,int midY,double radius){  int x=midX;  int y=midY;  x+=(int)(point.getX() * radius * scale);  y-=(int)(point.getY() * radius * scale);  Color pointColor=Color.red;  if (colorColumn != -1) {    pointColor=colorProvider.getPointColor(point.getColor());  }  drawPoint(g,x,y,pointColor,point.getBorderColor());}  }
class C{  protected ModelReferenceImpl(){  super();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"CDP");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset));}  }
class C{  public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  protected void assertMkdirs(File file){  assertTrue("Could not create directory '" + file.getAbsolutePath() + "'",file.mkdirs());}  }
class C{  public PolynomialGF2mSmallM(GF2mField field,byte[] enc){  this.field=field;  int d=8;  int count=1;  while (field.getDegree() > d) {    count++;    d+=8;  }  if ((enc.length % count) != 0) {    throw new IllegalArgumentException(" Error: byte array is not encoded polynomial over given finite field GF2m");  }  coefficients=new int[enc.length / count];  count=0;  for (int i=0; i < coefficients.length; i++) {    for (int j=0; j < d; j+=8) {      coefficients[i]^=(enc[count++] & 0x000000ff) << j;    }    if (!this.field.isElementOfThisField(coefficients[i])) {      throw new IllegalArgumentException(" Error: byte array is not encoded polynomial over given finite field GF2m");    }  }  if ((coefficients.length != 1) && (coefficients[coefficients.length - 1] == 0)) {    throw new IllegalArgumentException(" Error: byte array is not encoded polynomial over given finite field GF2m");  }  computeDegree();}  }
class C{  public IndicesAliasesRequestBuilder addAlias(String index,String alias,Map<String,Object> filter){  request.addAlias(alias,filter,index);  return this;}  }
class C{  public static void randomizePrimitives(TestCase test){  for (  Statement s : test) {    if (s instanceof PrimitiveStatement<?>) {      if (s instanceof NullStatement) {        continue;      }      ((PrimitiveStatement<?>)s).randomize();    }  }}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public static void defineDeptEmployeeTypes(TypeSystem ts) throws AtlasException {  String _description="_description";  EnumTypeDefinition orgLevelEnum=new EnumTypeDefinition("OrgLevel","OrgLevel" + _description,new EnumValue("L1",1),new EnumValue("L2",2));  StructTypeDefinition addressDetails=createStructTypeDef("Address","Address" + _description,createRequiredAttrDef("street",DataTypes.STRING_TYPE),createRequiredAttrDef("city",DataTypes.STRING_TYPE));  HierarchicalTypeDefinition<ClassType> deptTypeDef=createClassTypeDef(DEPARTMENT_TYPE,"Department" + _description,ImmutableSet.<String>of(),createRequiredAttrDef("name",DataTypes.STRING_TYPE),new AttributeDefinition("employees",String.format("array<%s>","Person"),Multiplicity.OPTIONAL,true,"department"));  HierarchicalTypeDefinition<ClassType> personTypeDef=createClassTypeDef("Person","Person" + _description,ImmutableSet.<String>of(),createRequiredAttrDef("name",DataTypes.STRING_TYPE),createOptionalAttrDef("orgLevel","OrgLevel"),createOptionalAttrDef("address","Address"),new AttributeDefinition("department","Department",Multiplicity.REQUIRED,false,"employees"),new AttributeDefinition("manager","Manager",Multiplicity.OPTIONAL,false,"subordinates"),new AttributeDefinition("mentor","Person",Multiplicity.OPTIONAL,false,null),createOptionalAttrDef("birthday",DataTypes.DATE_TYPE),createOptionalAttrDef("hasPets",DataTypes.BOOLEAN_TYPE),createOptionalAttrDef("numberOfCars",DataTypes.BYTE_TYPE),createOptionalAttrDef("houseNumber",DataTypes.SHORT_TYPE),createOptionalAttrDef("carMileage",DataTypes.INT_TYPE),createOptionalAttrDef("shares",DataTypes.LONG_TYPE),createOptionalAttrDef("salary",DataTypes.DOUBLE_TYPE),createOptionalAttrDef("age",DataTypes.FLOAT_TYPE),createOptionalAttrDef("numberOfStarsEstimate",DataTypes.BIGINTEGER_TYPE),createOptionalAttrDef("approximationOfPi",DataTypes.BIGDECIMAL_TYPE));  HierarchicalTypeDefinition<ClassType> managerTypeDef=createClassTypeDef("Manager","Manager" + _description,ImmutableSet.of("Person"),new AttributeDefinition("subordinates",String.format("array<%s>","Person"),Multiplicity.COLLECTION,false,"manager"));  HierarchicalTypeDefinition<TraitType> securityClearanceTypeDef=createTraitTypeDef("SecurityClearance","SecurityClearance" + _description,ImmutableSet.<String>of(),createRequiredAttrDef("level",DataTypes.INT_TYPE));  ts.defineTypes(ImmutableList.of(orgLevelEnum),ImmutableList.of(addressDetails),ImmutableList.of(securityClearanceTypeDef),ImmutableList.of(deptTypeDef,personTypeDef,managerTypeDef));}  }
class C{  private static LocalDateTime round(LocalDateTime t,String unit){  ChronoUnit uu=CALENDAR_UNITS.get(unit);  if (null == uu) {    throw new IllegalArgumentException("Rounding Unit not recognized: " + unit);  }switch (uu) {case YEARS:    return LocalDateTime.of(LocalDate.of(t.getYear(),1,1),LocalTime.MIDNIGHT);case MONTHS:  return LocalDateTime.of(LocalDate.of(t.getYear(),t.getMonth(),1),LocalTime.MIDNIGHT);case DAYS:return LocalDateTime.of(t.toLocalDate(),LocalTime.MIDNIGHT);default :assert !uu.isDateBased();return t.truncatedTo(uu);}}  }
class C{  public static VOUserSubscription toVOUserSubscription(Subscription subscription,PlatformUser user,LocalizerFacade facade,PerformanceHint scope){  if (subscription == null) {    return null;  }  VOUserSubscription voUsrSub=new VOUserSubscription();switch (scope) {case ONLY_IDENTIFYING_FIELDS:    fillIdentifyingFields(voUsrSub,subscription);  break;case ONLY_FIELDS_FOR_LISTINGS:fillBaseFields(voUsrSub,subscription);break;default :fillAllFields(voUsrSub,subscription,facade);}fillVOUserSubscription(voUsrSub,subscription,user,facade);updateValueObject(voUsrSub,subscription);return voUsrSub;}  }
class C{  protected void runTests() throws Exception {  int[] lines;  int[] jLines;  String targetName="onion.pickle.Mangle";  startUp(targetName);  if (!stratum.equals("unset")) {    vm().setDefaultStratum(stratum);  }  BreakpointEvent bpe=resumeTo(targetName,"main","([Ljava/lang/String;)V");  waitForInput();  ThreadReference thread=bpe.thread();  if (stratum.equals("Java")) {    lines=new int[]{4,5,6,7,8,9};    jLines=new int[]{4,5,6,7,8,9};  } else   if (stratum.equals("Rats")) {    lines=new int[]{1000,1111,1112};    jLines=new int[]{4,5,7};  } else {    lines=new int[]{200,210,217,218};    jLines=new int[]{4,7,8,9};  }  println("Testing stratum: " + stratum);  lineMatch(bpe.location(),jLines[0],lines[0]);  for (int i=1; i < lines.length; ++i) {    StepEvent se=stepOverLine(thread);    lineMatch(se.location(),jLines[i],lines[i]);  }  listenUntilVMDisconnect();  if (!testFailed) {    println("MangleStepTest (" + stratum + "): passed");  } else {    println("MangleStepTest (" + stratum + "): failed");    aTestFailed=true;  }}  }
class C{  public void saveLastState(){  lastStateVector=stateVector.copyInto(lastStateVector);}  }
class C{  static boolean isStatic(Node fullName){  return !(fullName.getFirstChild().isGetProp() && "prototype".equals(fullName.getFirstChild().getLastChild().getString()));}  }
class C{  public static StorageSystem[] createSRDFStorageSystems(DbClient dbClient,String label1,Network network1,String[] portWWNs1,VirtualArray varray1,String label2,Network network2,String[] portWWNs2,VirtualArray varray2){  StorageSystem[] storageSystems=new StorageSystem[3];  StorageSystem storageSystem1=PlacementTestUtils.createStorageSystem(dbClient,"vmax",label1);  storageSystems[1]=storageSystem1;  StorageSystem storageSystem2=PlacementTestUtils.createStorageSystem(dbClient,"vmax",label2);  storageSystems[2]=storageSystem2;  StringSet supportedAsynchronousActions=new StringSet();  supportedAsynchronousActions.add(StorageSystem.AsyncActions.CreateElementReplica.name());  supportedAsynchronousActions.add(StorageSystem.AsyncActions.CreateGroupReplica.name());  storageSystem1.setSupportedAsynchronousActions(supportedAsynchronousActions);  storageSystem2.setSupportedAsynchronousActions(supportedAsynchronousActions);  StringSet supportedReplicationTypes=new StringSet();  supportedReplicationTypes.add(StorageSystem.SupportedReplicationTypes.SRDF.name());  storageSystem1.setSupportedReplicationTypes(supportedReplicationTypes);  storageSystem2.setSupportedReplicationTypes(supportedReplicationTypes);  StringSet connectedTo=new StringSet();  connectedTo.add(storageSystem2.getId().toString());  storageSystem1.setRemotelyConnectedTo(connectedTo);  connectedTo=new StringSet();  connectedTo.add(storageSystem1.getId().toString());  storageSystem2.setRemotelyConnectedTo(connectedTo);  dbClient.updateObject(storageSystem1,storageSystem2);  RemoteDirectorGroup rdg1=new RemoteDirectorGroup();  rdg1.setActive(true);  rdg1.setConnectivityStatus(RemoteDirectorGroup.ConnectivityStatus.UP.name());  rdg1.setLabel("RDG1");  rdg1.setId(URI.create("RDG1" + label1));  rdg1.setNativeGuid("$label1+$label2+6");  rdg1.setRemoteGroupId("6");  rdg1.setRemoteStorageSystemUri(storageSystem2.getId());  rdg1.setSourceGroupId("6");  rdg1.setSourceStorageSystemUri(storageSystem1.getId());  rdg1.setSupportedCopyMode(RemoteDirectorGroup.SupportedCopyModes.ASYNCHRONOUS.name());  dbClient.createObject(rdg1);  RemoteDirectorGroup rdg2=new RemoteDirectorGroup();  rdg2.setActive(true);  rdg2.setConnectivityStatus(RemoteDirectorGroup.ConnectivityStatus.UP.name());  rdg2.setLabel("RDG2");  rdg2.setId(URI.create("RDG2" + label1));  rdg2.setNativeGuid("$label2+$label1+6");  rdg2.setRemoteGroupId("6");  rdg2.setRemoteStorageSystemUri(storageSystem1.getId());  rdg2.setSourceGroupId("6");  rdg2.setSourceStorageSystemUri(storageSystem2.getId());  rdg2.setSupportedCopyMode(RemoteDirectorGroup.SupportedCopyModes.ASYNCHRONOUS.name());  dbClient.createObject(rdg2);  List<StoragePort> system1Ports=new ArrayList<StoragePort>();  for (int i=0; i < portWWNs1.length; i++) {    system1Ports.add(PlacementTestUtils.createStoragePort(dbClient,storageSystem1,network1,portWWNs1[i],varray1,StoragePort.PortType.frontend.name(),"portGroupSite1vmax" + i,"C0+FC0" + i));  }  List<StoragePort> system2Ports=new ArrayList<StoragePort>();  for (int i=0; i < portWWNs2.length; i++) {    system2Ports.add(PlacementTestUtils.createStoragePort(dbClient,storageSystem2,network2,portWWNs2[i],varray2,StoragePort.PortType.frontend.name(),"portGroupSite2vmax" + i,"D0+FC0" + i));  }  return storageSystems;}  }
class C{  private void readObject(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.888 -0400",hash_original_method="4F3E4875B5D995F245642A033A3E9859",hash_generated_method="34877BF524E2DB7C2C78FF9F429235F5") public static IOFileFilter makeFileOnly(IOFileFilter filter){  if (filter == null) {    return FileFileFilter.FILE;  }  return new AndFileFilter(FileFileFilter.FILE,filter);}  }
class C{  private void hideInvisibleElements(){  final Graph2D graph=getGraph();  for (  final INaviEdge edge : m_rawView.getGraph().getEdges()) {    if (!edge.isVisible()) {      graph.removeEdge(getYEdge(edge));    }  }  for (  final INaviViewNode node : m_rawView.getGraph()) {    if (!node.isVisible()) {      graph.removeNode(getYNode(node));    }  }}  }
class C{  public static Document readToken(final String tokenResource) throws SAXException, IOException, ParserConfigurationException {  Validate.notNull(tokenResource);  String resourcePath="/" + tokenResource;  logger.info("Creating assertion token from " + resourcePath);  InputStream is=TestUtils.class.getResourceAsStream(resourcePath);  return SharedUtils.createDOM(is);}  }
class C{  public static void writeBcdNumber(OutputStream os,String number) throws IOException {  int bcd=0x00;  int n=0;  for (int i=0; i < number.length(); i++) {switch (number.charAt(i)) {case '0':      bcd|=0x00;    break;case '1':  bcd|=0x10;break;case '2':bcd|=0x20;break;case '3':bcd|=0x30;break;case '4':bcd|=0x40;break;case '5':bcd|=0x50;break;case '6':bcd|=0x60;break;case '7':bcd|=0x70;break;case '8':bcd|=0x80;break;case '9':bcd|=0x90;break;case '*':bcd|=0xA0;break;case '#':bcd|=0xB0;break;case 'a':bcd|=0xC0;break;case 'b':bcd|=0xE0;break;}n++;if (n == 2) {os.write(bcd);n=0;bcd=0x00;} else {bcd>>=4;}}if (n == 1) {bcd|=0xF0;os.write(bcd);}}  }
class C{  public static synchronized Type tMethod(Type returnType,Type argTypes[]){  StringBuffer buf=new StringBuffer();  buf.append(SIG_METHOD);  for (int i=0; i < argTypes.length; i++) {    buf.append(argTypes[i].getTypeSignature());  }  buf.append(SIG_ENDMETHOD);  buf.append(returnType.getTypeSignature());  String sig=buf.toString();  Type t=(Type)typeHash.get(sig);  if (t == null) {    t=new MethodType(sig,returnType,argTypes);  }  return t;}  }
class C{  public IntegerMap<ProductionRule> show(final PlayerID id,final JFrame parent,final GameData data,final boolean bid,final IntegerMap<ProductionRule> initialPurchase){  if (parent != null) {    final String title="Produce";    final JPanel contents=this;    m_dialog=SwingComponents.newJDialogModal(parent,title,contents);  }  this.m_bid=bid;  this.m_data=data;  this.initRules(id,data,initialPurchase);  this.initLayout();  this.calculateLimits();  m_dialog.pack();  m_dialog.setLocationRelativeTo(parent);  SwingUtilities.invokeLater(null);  m_dialog.setVisible(true);  m_dialog.dispose();  return getProduction();}  }
class C{  public CModulesTableModelSynchronizer(final CModulesTable table,final CDebugPerspectiveModel debugPerspectiveModel){  Preconditions.checkNotNull(table,"IE01460: Model argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01461: Debug perspective model argument can not be null");  m_model=table.getTreeTableModel();  m_renderer=table.getDefaultRenderer();  m_debugPerspectiveModel=debugPerspectiveModel;  synchronizeDebugger(null,debugPerspectiveModel.getCurrentSelectedDebugger());  debugPerspectiveModel.addListener(m_listener);}  }
class C{  public OrExpr newOrExpr(Value op1,Value op2){  return new JOrExpr(op1,op2);}  }
class C{  public JasperReportsResult(){  super();}  }
class C{  public WETriangleMesh addMesh(Mesh3D m){  super.addMesh(m);  return this;}  }
class C{  private void buildUnitOccupation(String propType,UnitTaxCalculationInfo unit){  LOGGER.debug("Entered into buildUnitOccupation, propType=" + propType);  StringBuilder occupierName=new StringBuilder();  if (OWNERSHIP_TYPE_VAC_LAND.equals(propType)) {    if (OCC_OWNER.equals(unit.getUnitOccupation()) || OCC_COMMERCIAL.equals(unit.getUnitOccupation())) {      occupierName.append(propType);    } else     if (OCC_TENANT.equals(unit.getUnitOccupation())) {      occupierName.append(OPEN_PLOT_SHORTFORM + "-" + unit.getUnitOccupier());    }  }  if (!OWNERSHIP_TYPE_VAC_LAND_STR.equals(propType) && !OWNERSHIP_TYPE_STATE_GOVT.equals(propType) && !OWNERSHIP_TYPE_CENTRAL_GOVT_50.equals(propType)) {    if (OCC_TENANT.equals(unit.getUnitOccupation()) || OCC_OWNER.equals(unit.getUnitOccupation())) {      occupierName.append("-" + unit.getUnitOccupier());    } else     if (OCC_OWNER.equals(unit.getUnitOccupation()) || OCC_OWNER.equals(unit.getUnitOccupation())) {      occupierName.append("-" + unit.getUnitOccupation());    }  }  unit.setUnitOccupation(occupierName.toString());  LOGGER.debug("occupierName=" + occupierName + "\nExiting from buildUnitOccupation");}  }
class C{  public static String fromHashToString(Map map){  String type=null;  String value=null;  String resultado=null;  StringBuffer contenido=null;  if (map != null) {    contenido=new StringBuffer();    contenido.append(ContenidoTags.DETAILS_OPEN_TAG);    Iterator it=map.keySet().iterator();    while (it.hasNext()) {      type=(String)it.next();      value=(String)map.get(type);      contenido.append(ContenidoTags.DETAIL_OPEN_TAG);      contenido.append(ContenidoTags.TYPE_OPEN_TAG);      contenido.append(type);      contenido.append(ContenidoTags.TYPE_CLOSE_TAG);      contenido.append(ContenidoTags.VALUE_OPEN_TAG);      contenido.append(value);      contenido.append(ContenidoTags.VALUE_CLOSE_TAG);      contenido.append(ContenidoTags.DETAIL_CLOSE_TAG);    }    contenido.append(ContenidoTags.DETAILS_CLOSE_TAG);    resultado=contenido.toString();  }  return resultado;}  }
class C{  public char nextChar(){  return (char)(next(16));}  }
class C{  public void play(){  if (mediaPlayer.getCurrentMedia() != null) {    if (mediaPlayer.getState() == MediaPlaybackState.Paused || mediaPlayer.getState() == MediaPlaybackState.Playing) {      mediaPlayer.togglePause();    } else     if (mediaPlayer.getState() == MediaPlaybackState.Closed) {      LibraryMediator.instance().playCurrentSelection();    }  } else {    if (GUIMediator.instance().getSelectedTab() != null && GUIMediator.instance().getSelectedTab().equals(GUIMediator.Tabs.LIBRARY)) {      LibraryMediator.instance().playCurrentSelection();    }  }}  }
class C{  public AbstractIterativeScorerWithPriors(Hypergraph<V,E> g,Function<? super E,? extends Number> edge_weights,Function<? super V,? extends S> vertex_priors,double alpha){  super(g,edge_weights);  this.vertex_priors=vertex_priors;  this.alpha=alpha;  initialize();}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  public void beforeFirst(){  if (this.rows.size() > 0) {    this.index=-1;  }}  }
class C{  public FXGException(){  super();  arguments=null;  message=null;  lineNumber=-1;  columnNumber=-1;}  }
class C{  public int parseInt() throws DecodeException {  return parseIntWithTag(ASN_INTEGER);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.VERTEX__PARENT_REGION:    setParentRegion((Region)newValue);  return;case SGraphPackage.VERTEX__INCOMING_TRANSITIONS:getIncomingTransitions().clear();getIncomingTransitions().addAll((Collection<? extends Transition>)newValue);return;case SGraphPackage.VERTEX__OUTGOING_TRANSITIONS:getOutgoingTransitions().clear();getOutgoingTransitions().addAll((Collection<? extends Transition>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected String encodeCookie(SerializableCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    e.printStackTrace();    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  @Override public void start(DeployService2Impl<I> deploy,Result<I> result){  LifecycleState state=deploy.getState();  if (state.isStopped()) {    deploy.startImpl(result);  } else   if (state.isError()) {    deploy.restartImpl(result);  } else   if (deploy.isModifiedNow()) {    deploy.restartImpl(result);  } else {    result.ok(deploy.get());  }}  }
class C{  static private String INT_Min(){  int tempValue=Integer.MIN_VALUE;  return String.valueOf(tempValue);}  }
class C{  private List<CatalogService> filterServicesByACLs(List<CatalogService> services){  List<CatalogService> filteredCatalogServices=Lists.newArrayList();  StorageOSUser storageOSUser=getUserFromContext();  String username=storageOSUser.getName();  if (isAdministrator(storageOSUser)) {    log.debug(username + " has SystemAdmin or TenantAdmin Role, can view all categories.");    filteredCatalogServices.addAll(services);    return filteredCatalogServices;  }  for (  CatalogService service : services) {    if (hasAccess(storageOSUser,service)) {      filteredCatalogServices.add(service);    }  }  return filteredCatalogServices;}  }
class C{  public void removeActionListener(ActionListener l){  actualButton.removeActionListener(l);}  }
class C{  private void updateVMAX3AutoTieringPolicy(StorageSystem storage,List<URI> volumeURIs,VirtualPool newVirtualPool,boolean rollback,TaskCompleter taskCompleter) throws Exception {  _log.info("Changing parking storage group for the VMAX3 non-exported volumes based on newPolicyName.");  String newPolicyName=ControllerUtils.getFastPolicyNameFromVirtualPool(_dbClient,storage,newVirtualPool);  if (null == newPolicyName) {    newPolicyName=Constants.NONE;  }  Set<String> volumeDeviceIds=new HashSet<String>();  String fastSetting=null;  for (  URI volURI : volumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volURI);    volumeDeviceIds.add(volume.getNativeId());    if (null == fastSetting) {      fastSetting=_helper.getVMAX3FastSettingForVolume(volURI,newPolicyName);    }    boolean forceFlag=ExportUtils.useEMCForceFlag(_dbClient,volURI);    _helper.removeVolumeFromParkingSLOStorageGroup(storage,volume.getNativeId(),forceFlag);  }  addVolumesToParkingStorageGroup(storage,fastSetting,volumeDeviceIds);}  }
class C{  public void startNotification(Episode episode,MediaSession session,Bitmap channelArt){  Notification notification=createNotification(episode,session,channelArt);  if (notification != null) {    if (podcastPlayerService.getPlaybackState() == PlaybackState.STATE_PLAYING) {      podcastPlayerService.startForeground(NotificationHelper.NOTIFICATION_ID_PLAYER,notification);    } else {      podcastPlayerService.stopForeground(false);      notificationManager.notify(NotificationHelper.NOTIFICATION_ID_PLAYER,notification);    }  }}  }
class C{  protected void writeHeader() throws IOException {  mOut.write(mHeader.toString().getBytes());}  }
class C{  public void cancel(){  cancelled=true;  Thread thread=this.thread;  if (thread != null) {    thread.interrupt();  }}  }
class C{  public static void writeUTF(String s,DataOutputStream d) throws IOException {  if (s == null) {    d.writeBoolean(false);    return;  }  d.writeBoolean(true);  d.writeUTF(s);}  }
class C{  protected void reportReturn(String methodCall){  reportAllReturns(methodCall,"");}  }
class C{  public static FormatField parseFormatLine(String line){  return new FormatField(line);}  }
class C{  public int size(){  return size;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 172) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void deleteNode(int nTargetNode) throws Exception {  if (m_bNeedsUndoAction) {    addUndoAction(new DeleteNodeAction(nTargetNode));  }  int nAtts=m_Instances.numAttributes() - 1;  int nTargetCard=m_Instances.attribute(nTargetNode).numValues();  Estimator[][] distributions=new Estimator[nAtts][];  for (int iNode=0; iNode < nAtts; iNode++) {    int iNode2=iNode;    if (iNode >= nTargetNode) {      iNode2++;    }    Estimator[] distribution=m_Distributions[iNode2];    if (m_ParentSets[iNode2].contains(nTargetNode)) {      int nParentCard=m_ParentSets[iNode2].getCardinalityOfParents();      nParentCard=nParentCard / nTargetCard;      Estimator[] distribution2=new Estimator[nParentCard];      for (int iParent=0; iParent < nParentCard; iParent++) {        distribution2[iParent]=distribution[iParent];      }      distribution=distribution2;    }    distributions[iNode]=distribution;  }  m_Distributions=distributions;  ParentSet[] parentSets=new ParentSet[nAtts];  for (int iParentSet=0; iParentSet < nAtts; iParentSet++) {    int iParentSet2=iParentSet;    if (iParentSet >= nTargetNode) {      iParentSet2++;    }    ParentSet parentset=m_ParentSets[iParentSet2];    parentset.deleteParent(nTargetNode,m_Instances);    for (int iParent=0; iParent < parentset.getNrOfParents(); iParent++) {      int nParent=parentset.getParent(iParent);      if (nParent > nTargetNode) {        parentset.SetParent(iParent,nParent - 1);      }    }    parentSets[iParentSet]=parentset;  }  m_ParentSets=parentSets;  m_Instances.setClassIndex(-1);  m_Instances.deleteAttributeAt(nTargetNode);  m_Instances.setClassIndex(nAtts - 1);  m_nPositionX.remove(nTargetNode);  m_nPositionY.remove(nTargetNode);  m_nEvidence.remove(nTargetNode);  m_fMarginP.remove(nTargetNode);}  }
class C{  protected void flagToRemoveFromQuarantineQueue(NodePortTuple npt){  if (toRemoveFromQuarantineQueue.contains(npt) == false) {    toRemoveFromQuarantineQueue.add(npt);  }}  }
class C{  public boolean isDeclaredProvidedByRuntime(){  return declaredProvidedByRuntime;}  }
class C{  public static void printError(String msg){  printError(null,msg);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:42.614 -0500",hash_original_method="957AE60D3A9CE570CB89C0AA6C75F6C8",hash_generated_method="2B124FEB513D2470D3DA6C6DFDC1125F") private final void native_compile(String sql){  addTaint(sql.getTaint());}  }
class C{  public MatrixAtom(ArrayOfAtoms array,String options){  this(false,array,options);}  }
class C{  protected int countPositions(){  int count=0;  for (  List<? extends Position> boundary : this.boundaries) {    count+=boundary.size();  }  return count;}  }
class C{  @VisibleForTesting void onHandleIntent(Intent intent,ITrackRecordingService service){  String action=intent.getAction();  if (action != null) {    try {      if (action.equals(getString(R.string.track_action_start))) {        service.startNewTrack();      } else       if (action.equals(getString(R.string.track_action_end))) {        service.endCurrentTrack();      } else       if (action.equals(getString(R.string.track_action_pause))) {        service.pauseCurrentTrack();      } else       if (action.equals(getString(R.string.track_action_resume))) {        service.resumeCurrentTrack();      }    } catch (    RemoteException e) {      Log.d(TAG,"ControlRecordingService onHandleIntent RemoteException",e);    }  }  unbindService(this);  connected=false;}  }
class C{  public final int size(){  return keys.length;}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  public String globalInfo(){  return "This filter removes attributes that do not vary at all or that vary " + "too much. All constant attributes are deleted automatically, along " + "with any that exceed the maximum percentage of variance parameter. "+ "The maximum variance test is only applied to nominal attributes.";}  }
class C{  private void buildBrokenAreas(Rect r){  final int SEGMENT_LESS=SEGMENT * 7 / 9;  final int START_LENGTH=(int)(SEGMENT * 1.1);  float linkLen=0;  int repeat=0;  PathMeasure pmNow=new PathMeasure();  PathMeasure pmPre=new PathMeasure();  for (int i=0; i < mConfig.complexity; i++) {    lineRifts[i].setStartLength(Utils.dp2px(START_LENGTH));    if (repeat > 0) {      repeat--;    } else {      linkLen=Utils.nextInt(Utils.dp2px(SEGMENT_LESS),Utils.dp2px(SEGMENT));      repeat=Utils.nextInt(3);    }    int iPre=(i - 1) < 0 ? mConfig.complexity - 1 : i - 1;    pmNow.setPath(lineRifts[i],false);    pmPre.setPath(lineRifts[iPre],false);    if (hasCircleRifts && pmNow.getLength() > linkLen && pmPre.getLength() > linkLen) {      float[] pointNow=new float[2];      float[] pointPre=new float[2];      circleWidth[i]=Utils.nextInt(Utils.dp2px(1)) + 1;      circleRifts[i]=new Path();      pmNow.getPosTan(linkLen,pointNow,null);      circleRifts[i].moveTo(pointNow[0],pointNow[1]);      pmPre.getPosTan(linkLen,pointPre,null);      circleRifts[i].lineTo(pointPre[0],pointPre[1]);      Path pathArea=new Path();      pmPre.getSegment(linkLen,pmPre.getLength(),pathArea,true);      pathArea.rLineTo(0,0);      drawBorder(pathArea,lineRifts[iPre].getEndPoint(),lineRifts[i].points.get(lineRifts[i].points.size() - 1),r);      for (int j=lineRifts[i].points.size() - 2; j >= 0; j--)       pathArea.lineTo(lineRifts[i].points.get(j).x,lineRifts[i].points.get(j).y);      pathArea.lineTo(pointNow[0],pointNow[1]);      pathArea.lineTo(pointPre[0],pointPre[1]);      pathArea.close();      pathArray.add(pathArea);      pathArea=new Path();      pathArea.moveTo(0,0);      pathArea.lineTo(pointPre[0],pointPre[1]);      pathArea.lineTo(pointNow[0],pointNow[1]);      pathArea.close();      pathArray.add(pathArea);    } else {      Path pathArea=new Path(lineRifts[iPre]);      drawBorder(pathArea,lineRifts[iPre].getEndPoint(),lineRifts[i].points.get(lineRifts[i].points.size() - 1),r);      for (int j=lineRifts[i].points.size() - 2; j >= 0; j--)       pathArea.lineTo(lineRifts[i].points.get(j).x,lineRifts[i].points.get(j).y);      pathArea.close();      pathArray.add(pathArea);    }  }}  }
class C{  protected synchronized void applyEvent(final NetworkChangeEvent event){  if (this.changeEvents == null)   this.changeEvents=new TreeMap<>();  this.changeEvents.put(event.getStartTime(),event);  if (event.getFreespeedChange() != null) {    this.variableFreespeed.incChangeEvents();  }  if (event.getFlowCapacityChange() != null) {    this.variableFlowCapacity.incChangeEvents();  }  if (event.getLanesChange() != null) {    this.variableLanes.incChangeEvents();  }}  }
class C{  public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void testConnectHeadset(){  int iterations=BluetoothTestRunner.sConnectHeadsetIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.HEADSET,null);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("connectHeadset iteration " + (i + 1) + " of "+ iterations);    mTestUtils.connectProfile(adapter,device,BluetoothProfile.HEADSET,String.format("connectHeadset(device=%s)",device));    mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.HEADSET,String.format("disconnectHeadset(device=%s)",device));  }  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  @GET @Controller @Produces("text/html") @Path("view1/{id}") public String view1(@PathParam("id") String id){  return "/requestDispatcher";}  }
class C{  private CDataflowViewCreator(){}  }
class C{  public OrdinalStatisticalTest(int numberOfGroups,Comparator<RankedObservation> comparator){  super();  this.numberOfGroups=numberOfGroups;  this.comparator=comparator;  data=new ArrayList<RankedObservation>();}  }
class C{  public static EnergyNetwork initNetwork(){  Random random=new Random(System.currentTimeMillis());  int id=random.nextInt();  while (usedIds.contains(id)) {    id=random.nextInt();  }  ;  EnergyNetwork net=new EnergyNetwork();  usedIds.add(id);  net.networkID=id;  return net;}  }
class C{  private void resetBoard(){  for (  NineSwitchesGameSwitch gameSwitch : switches) {    gameSwitch.setState(0);  }  switches.get(4).setState(1);}  }
class C{  void updateLocalDeviceComponent(VPlexLocalDeviceComponentInfo componentInfo) throws VPlexApiException {  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.VPLEX_PATH);  uriBuilder.append(componentInfo.getPath());  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Local device component request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw VPlexApiException.exceptions.updatelLocalDeviceComponentFailureStatus(componentInfo.getPath(),String.valueOf(status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,componentInfo);    s_logger.info("Updated Local Device Component Info {}",componentInfo.toString());  } catch (  Exception e) {    throw VPlexApiException.exceptions.failedUpdateLocalDeviceComponentInfo(componentInfo.getPath(),e);  }}  }
class C{  public static String strip(String s){  return s.replaceAll("\u001B\\[[;\\d]*m","");}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Util.log("IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  @Override public void onShown(Snackbar snackbar){  if (callback != null) {    callback.onShown(snackbar);  }}  }
class C{  public static void sort(int[] keys,int[] values){  hybridsort(keys,values,0,keys.length - 1);}  }
class C{  public static void main(String[] args) throws Exception {  new SimpleStatistics().start(args);}  }
class C{  public String toString(){  return map.toString();}  }
class C{  public boolean isEnabledAt(int index){  return pages.get(index).isEnabled();}  }
class C{  @Override public IMatrix matrixValue(final IScope scope,final IType contentsType,final boolean copy) throws GamaRuntimeException {  return listValue(scope,contentsType,false).matrixValue(scope,contentsType,false);}  }
class C{  boolean bindAsUser(Properties ldapProperties,String bindDN,String password){  boolean bindSuccessful=false;  Properties p=(Properties)ldapProperties.clone();  p.put(Context.SECURITY_PRINCIPAL,bindDN);  p.put(Context.SECURITY_CREDENTIALS,password);  DirContext ctx=null;  try {    ctx=new InitialDirContext(p);    bindSuccessful=true;  } catch (  Exception e) {    if (logger.isLoggable(Level.FINEST)) {      logger.finest("Error binding to directory as: " + bindDN);      logger.finest("Exception from JNDI: " + e.toString());    }  } finally {    if (ctx != null) {      try {        ctx.close();      } catch (      NamingException e) {        logger.finest("Exception closing directory: " + e.toString());      }    }  }  return bindSuccessful;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void pop(){  Thread t=Thread.currentThread();  if (t.getClass() == CODE) {    CodenameOneThread c=(CodenameOneThread)t;    c.popStack();  }}  }
class C{  public static PlusMult minusDiv(final double constant){  return new PlusMult(-1 / constant);}  }
class C{  public void readContent() throws IOException {  if (offset + length > buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    offset+=length;  } else {    int bytesRead=in.read(buffer,offset,length);    if (bytesRead != length) {      int c=bytesRead;      do {        if (c < 1 || bytesRead > length) {          throw new ASN1Exception("Failed to read encoded content");        }        c=in.read(buffer,offset + bytesRead,length - bytesRead);        bytesRead+=c;      } while (bytesRead != length);    }    offset+=length;  }}  }
class C{  public void testFirstElement(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.getFirst());    assertEquals(i,q.pollFirst());  }  try {    q.getFirst();    shouldThrow();  } catch (  NoSuchElementException success) {  }  assertNull(q.peekFirst());}  }
class C{  private void startNotification(Attributes atts){  if (!this.seenNotifications) {    if (!this.seenAttribute && !this.seenOperation) {      pw.println("<tr valign=\"top\">");      pw.println("  <th align=\"left\">Notifications</th>");      pw.println("  <th align=\"left\" colspan=\"2\">Name</th>");      pw.println("  <th align=\"left\">Type</th>");      pw.println("  <th align=\"left\">Description</th>");      pw.println("  <th align=\"left\"></th>");      pw.println("</tr>");      pw.println("</tr>");    } else {      pw.println("<tr valign=\"top\">");      pw.println("  <th align=\"left\" colspan=\"6\">Notifications and Fields</th>");      pw.println("</tr>");    }  }  this.seenNotifications=true;  String name=atts.getValue(NAME);  String description=atts.getValue(DESCRIPTION);  pw.println("<tr valign=\"top\">");  pw.println("  <td></td>");  pw.println("  <td colspan=\"3\">" + name + "</td>");  pw.println("  <td colspan=\"3\">" + description + "</td>");  pw.println("</tr>");}  }
class C{  public BasicGeneratorConfig(RelationshipGenerator relationshipGenerator,NodeCreator nodeCreator,RelationshipCreator relationshipCreator){  this.relationshipGenerator=relationshipGenerator;  this.nodeCreator=nodeCreator;  this.relationshipCreator=relationshipCreator;}  }
class C{  public static Iterator<IonValue> iterate(ValueFactory valueFactory,IonReader input){  return new IonIteratorImpl(valueFactory,input);}  }
class C{  MemberState completeAppend(long time){  timeBuffer.record(time);  return completeAppend();}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.025 -0400",hash_original_method="2C0F3D6FFED876F2881377B8BBDD2213",hash_generated_method="5DEAFCD23726202EB27453ED04333FE7") public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  private long endTime(long timeout){  long endTime=U.currentTimeMillis() + timeout;  if (endTime < 0)   endTime=Long.MAX_VALUE;  return endTime;}  }
class C{  public final void clearImageData(){  object_image_name.clear();  object_page_id.clear();  x.clear();  y.clear();  w.clear();  h.clear();  current_item=0;}  }
class C{  public boolean hasListeners(String propertyName){  for (  PropertyChangeListener p : listeners) {    if (!(p instanceof PropertyChangeListenerProxy) || Objects.equal(propertyName,((PropertyChangeListenerProxy)p).getPropertyName())) {      return true;    }  }  return false;}  }
class C{  public BreakpointsRemovedReply(final int packetId,final int errorCode,final List<Pair<RelocatedAddress,Integer>> addresses){  super(packetId,errorCode,addresses);}  }
class C{  public ReasonHeader createReasonHeader(String protocol,int cause,String text) throws InvalidArgumentException, ParseException {  if (protocol == null)   throw new NullPointerException("bad protocol arg");  if (cause < 0)   throw new InvalidArgumentException("bad cause");  Reason reason=new Reason();  reason.setProtocol(protocol);  reason.setCause(cause);  reason.setText(text);  return reason;}  }
class C{  public MesosCluster loadCluster(MesosClusterFactory factory){  String clusterId=readClusterId();  if (clusterId != null) {    try {      return MesosCluster.loadCluster(clusterId,factory);    } catch (    MinimesosException e) {      deleteMinimesosFile();    }  }  return null;}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  protected int drawNextEventTimeDiff(){  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);  return msgInterval[0] + timeDiff;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int refresh(){  if (m_refreshing)   return 0;  return refresh(true);}  }
class C{  private void rollSequence() throws IOException {  closeCurrentSequenceFilePair();  mCurrentSeq=seqFilePair(mRollSeqNum,mSizeLimit);  mRollSeqNum++;}  }
class C{  public int hashCode(){  if (hashCode == 0) {    hashCode=createHashCode();  }  return hashCode;}  }
class C{  private Cluster.Member initializeMember(ObjectName mbeanName,Cluster.Member member) throws InstanceNotFoundException, ReflectionException, IOException {  AttributeList attributeList=this.mbs.getAttributes(mbeanName,PulseConstants.MEMBER_MBEAN_ATTRIBUTES);  for (int i=0; i < attributeList.size(); i++) {    Attribute attribute=(Attribute)attributeList.get(i);    String name=attribute.getName();switch (name) {case PulseConstants.MBEAN_ATTRIBUTE_GEMFIREVERSION:      if (member.getGemfireVersion() == null) {        String gemfireVersion=obtainGemfireVersion(getStringAttribute(attribute.getValue(),attribute.getName()));        member.setGemfireVersion(gemfireVersion);      }    break;case PulseConstants.MBEAN_ATTRIBUTE_MANAGER:  member.setManager(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_TOTALREGIONCOUNT:member.setTotalRegionCount(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_LOCATOR:member.setLocator(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_TOTALDISKUSAGE:member.setTotalDiskUsage(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_SERVER:member.setServer(getBooleanAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_TOTALFILEDESCRIPTOROPEN:member.setTotalFileDescriptorOpen(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_LOADAVERAGE:member.setLoadAverage(getDoubleAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_DISKWRITESRATE:member.setThroughputWrites(getDoubleAttribute(attribute.getValue(),attribute.getName()));member.getThroughputWritesTrend().add(member.getThroughputWrites());break;case PulseConstants.MBEAN_ATTRIBUTE_DISKREADSRATE:member.setThroughputReads(getDoubleAttribute(attribute.getValue(),attribute.getName()));member.getThroughputReadsTrend().add(member.getThroughputReads());break;case PulseConstants.MBEAN_ATTRIBUTE_JVMPAUSES:long trendVal=determineCurrentJVMPauses(PulseConstants.JVM_PAUSES_TYPE_MEMBER,member.getName(),getLongAttribute(attribute.getValue(),attribute.getName()));member.setGarbageCollectionCount(trendVal);member.getGarbageCollectionSamples().add(member.getGarbageCollectionCount());break;case PulseConstants.MBEAN_ATTRIBUTE_USEDMEMORY:member.setCurrentHeapSize(getLongAttribute(attribute.getValue(),attribute.getName()));member.getHeapUsageSamples().add(member.getCurrentHeapSize());break;case PulseConstants.MBEAN_ATTRIBUTE_MAXMEMORY:member.setMaxHeapSize(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_NUMTHREADS:member.setNumThreads(getIntegerAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_MEMBERUPTIME:member.setUptime(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_HOST:member.setHost(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_HOSTNAMEFORCLIENTS:member.setHostnameForClients(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_BINDADDRESS:member.setBindAddress(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_TOTALBYTESONDISK:member.setTotalBytesOnDisk(getLongAttribute(attribute.getValue(),attribute.getName()));member.getTotalBytesOnDiskSamples().add(member.getTotalBytesOnDisk());break;case PulseConstants.MBEAN_ATTRIBUTE_CPUUSAGE:member.setCpuUsage(getDoubleAttribute(attribute.getValue(),attribute.getName()));member.getCpuUsageSamples().add(member.getCpuUsage());break;case PulseConstants.MBEAN_ATTRIBUTE_HOSTCPUUSAGE:member.setHostCpuUsage(Double.valueOf(getIntegerAttribute(attribute.getValue(),attribute.getName())));break;case PulseConstants.MBEAN_ATTRIBUTE_MEMBER:member.setName(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_ID:member.setId(getStringAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEREADS:member.setGetsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));member.getGetsPerSecond().add(member.getGetsRate());break;case PulseConstants.MBEAN_ATTRIBUTE_AVERAGEWRITES:member.setPutsRate(getDoubleAttribute(attribute.getValue(),attribute.getName()));member.getPutsPerSecond().add(member.getPutsRate());break;case PulseConstants.MBEAN_ATTRIBUTE_OFFHEAPFREESIZE:member.setOffHeapFreeSize(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_OFFHEAPUSEDSIZE:member.setOffHeapUsedSize(getLongAttribute(attribute.getValue(),attribute.getName()));break;case PulseConstants.MBEAN_ATTRIBUTE_SERVERGROUPS:String sgValues[]=(String[])attribute.getValue();member.getServerGroups().clear();for (int k=0; k < sgValues.length; k++) {member.getServerGroups().add(sgValues[k]);}break;case PulseConstants.MBEAN_ATTRIBUTE_REDUNDANCYZONES:String rzValue="";if (null != attribute.getValue()) {rzValue=getStringAttribute(attribute.getValue(),attribute.getName());}member.getRedundancyZones().clear();if (!rzValue.isEmpty()) {member.getRedundancyZones().add(rzValue);}break;}}if (PulseController.getPulseProductSupport().equalsIgnoreCase(PulseConstants.PRODUCT_NAME_SQLFIRE)) {try {String memberName=mbeanName.getKeyProperty(PulseConstants.MBEAN_KEY_PROPERTY_MEMBER);ObjectName sfMemberMbeansObjectName=new ObjectName(PulseConstants.OBJECT_NAME_SF_MEMBER_PATTERN + memberName);Set<ObjectName> sfMemberMBeans=this.mbs.queryNames(sfMemberMbeansObjectName,null);for (ObjectName sfMemberMBean : sfMemberMBeans) {AttributeList attrList=this.mbs.getAttributes(sfMemberMBean,PulseConstants.SF_MEMBER_MBEAN_ATTRIBUTES);for (int i=0; i < attrList.size(); i++) {Attribute attribute=(Attribute)attrList.get(i);if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_DATASTORE)) {member.setServer(getBooleanAttribute(attribute.getValue(),attribute.getName()));if (member.isServer()) {cluster.setServerCount(cluster.getServerCount() + 1);}} else if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_NETWORKSERVERCLIENTCONNECTIONSTATS)) {CompositeData nscConnStats=(CompositeData)attribute.getValue();member.setNumSqlfireClients(getLongAttribute(nscConnStats.get(PulseConstants.COMPOSITE_DATA_KEY_CONNECTIONSACTIVE),PulseConstants.COMPOSITE_DATA_KEY_CONNECTIONSACTIVE));}}break;}} catch (MalformedObjectNameException e) {LOGGER.warning(e);}catch (NullPointerException e) {LOGGER.warning(e);}}return member;}  }
class C{  public ArrayLongCompressed(int size,int leadingClearBits,int trailingClearBits){  init(size,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);}  }
class C{  public DevModeServiceClient(MessageTransport transport){  this.transport=transport;}  }
class C{  public boolean add(E o){  ensureCapacity(size + 1);  elementData[size++]=o;  return true;}  }
class C{  public BreakpointAddress(final INaviModule module,final UnrelocatedAddress address){  unrelocatedBreakpointAddress=Preconditions.checkNotNull(address,"IE00234: Address argument can not be null");  this.module=Preconditions.checkNotNull(module,"IE01693: Module arguemnt can not be null");}  }
class C{  public void sort(){}  }
class C{  public Segment(double x1,double y1,double z1,double x2,double y2,double z2){  this(new Coordinate(x1,y1,z1),new Coordinate(x2,y2,z2));}  }
class C{  public JLifeFormattedTextArea(){}  }
class C{  protected boolean isPrimitive(Type type){  requireNonNull(type);switch (type.getName()) {case "byte":case "short":case "int":case "long":case "float":case "double":case "boolean":case "char":    return true;default :  return false;}}  }
class C{  public void dispose(){  m_searchPanel.dispose();  m_settings.getSearchSettings().removeListener(m_internalSearchListener);}  }
class C{  @Override public void sendSqsTextMessage(AwsParamsDto awsParamsDto,String queueName,String messageText){  ClientConfiguration clientConfiguration=new ClientConfiguration();  if (StringUtils.isNotBlank(awsParamsDto.getHttpProxyHost())) {    clientConfiguration.setProxyHost(awsParamsDto.getHttpProxyHost());  }  if (awsParamsDto.getHttpProxyPort() != null) {    clientConfiguration.setProxyPort(awsParamsDto.getHttpProxyPort());  }  sqsOperations.sendSqsTextMessage(clientConfiguration,queueName,messageText);}  }
class C{  public static void main(String[] args){  try {    FileInputStream fis=new FileInputStream(args[0]);    SimpleCharStream scs=new SimpleCharStream(fis,1,1);    TLAplusParserTokenManager tmgr=new TLAplusParserTokenManager(scs,2);    Token t=getNextToken(tmgr);    while (t.kind != 0) {      System.err.println(t);      t=getNextToken(tmgr);    }  } catch (  Exception e) {    System.err.println(e.getMessage());  }}  }
class C{  public static float[] newCubeToBounds(float x,float y,float z,float w,float d,float h){  final float[] result=newBoundsArray();  return cubeToBounds(result,x,y,z,w,d,h);}  }
class C{  public DefaultHttpHeaders(){  this(true);}  }
class C{  public static int displacement(final long index){  return (int)(index & SEGMENT_MASK);}  }
class C{  protected final JsonToken _handleUnexpectedValue(int i) throws IOException, JsonParseException {switch (i) {case '\'':    if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {      return _handleApostropheValue();    }  break;case 'N':_matchToken("NaN",1);if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {return resetAsNaN("NaN",Double.NaN);}_reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");break;case '+':if (_inputPtr >= _inputEnd) {if (!loadMore()) {_reportInvalidEOFInValue();}}return _handleInvalidNumberStart(_inputBuffer[_inputPtr++],false);}_reportUnexpectedChar(i,"expected a valid value (number, String, array, object, 'true', 'false' or 'null')");return null;}  }
class C{  private boolean advanceRpts(PhrasePositions pp) throws IOException {  if (pp.rptGroup < 0) {    return true;  }  PhrasePositions[] rg=rptGroups[pp.rptGroup];  FixedBitSet bits=new FixedBitSet(rg.length);  int k0=pp.rptInd;  int k;  while ((k=collide(pp)) >= 0) {    pp=lesser(pp,rg[k]);    if (!advancePP(pp)) {      return false;    }    if (k != k0) {      bits=FixedBitSet.ensureCapacity(bits,k);      bits.set(k);    }  }  int n=0;  int numBits=bits.length();  while (bits.cardinality() > 0) {    PhrasePositions pp2=pq.pop();    rptStack[n++]=pp2;    if (pp2.rptGroup >= 0 && pp2.rptInd < numBits && bits.get(pp2.rptInd)) {      bits.clear(pp2.rptInd);    }  }  for (int i=n - 1; i >= 0; i--) {    pq.add(rptStack[i]);  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION___MODIFIER_1:    setModifier_1(MODIFIER_1_EDEFAULT);  return;case UmplePackage.ASSOCIATION___ASSOCIATION_END_1:getAssociationEnd_1().clear();return;case UmplePackage.ASSOCIATION___ARROW_1:setArrow_1(ARROW_1_EDEFAULT);return;case UmplePackage.ASSOCIATION___ASSOCIATION_END_2:getAssociationEnd_2().clear();return;}super.eUnset(featureID);}  }
class C{  private void checkMemberAccess(int type){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkMemberAccess(this,type);    String packageName=getPackageName();    if (!packageName.isEmpty()) {      security.checkPackageAccess(packageName);    }  }}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  private void _writeShort(final int value) throws IOException {  this.outStream.writeShort(value,this.byteOrder);}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  dnName.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public NumberTextField(double initialValue){  this(null,initialValue,0,0);}  }
class C{  private static void validate(File file,byte[] actual) throws IOException {  String mode=Settings.getFileProtectionMode();  File digestFile=getDigestFile(file);  if (digestFile.exists()) {    byte[] expected=loadDigest(file);    if (!MessageDigest.isEqual(actual,expected)) {      throw new ValidationException(file,"digest does not match");    }  } else {    if (mode.equalsIgnoreCase(STRICT_MODE)) {      throw new ValidationException(file,"no digest file");    } else {      System.err.println("no digest file exists to validate " + file);    }  }}  }
class C{  public void testDoublesCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.doubles(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  public static byte[] toByteArray2(String filename) throws IOException {  File f=new File(filename);  if (!f.exists()) {    throw new FileNotFoundException(filename);  }  FileChannel channel=null;  FileInputStream fs=null;  try {    fs=new FileInputStream(f);    channel=fs.getChannel();    ByteBuffer byteBuffer=ByteBuffer.allocate((int)channel.size());    while ((channel.read(byteBuffer)) > 0) {    }    return byteBuffer.array();  } catch (  IOException e) {    e.printStackTrace();    throw e;  } finally {    try {      channel.close();    } catch (    IOException e) {      e.printStackTrace();    }    try {      fs.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public List discover(String identifier) throws DiscoveryException {  return _discovery.discover(identifier);}  }
class C{  static public Automaton concatenate(List<Automaton> l){  Automaton result=new Automaton();  for (  Automaton a : l) {    if (a.getNumStates() == 0) {      result.finishState();      return result;    }    int numStates=a.getNumStates();    for (int s=0; s < numStates; s++) {      result.createState();    }  }  int stateOffset=0;  Transition t=new Transition();  for (int i=0; i < l.size(); i++) {    Automaton a=l.get(i);    int numStates=a.getNumStates();    Automaton nextA=(i == l.size() - 1) ? null : l.get(i + 1);    for (int s=0; s < numStates; s++) {      int numTransitions=a.initTransition(s,t);      for (int j=0; j < numTransitions; j++) {        a.getNextTransition(t);        result.addTransition(stateOffset + s,stateOffset + t.dest,t.min,t.max);      }      if (a.isAccept(s)) {        Automaton followA=nextA;        int followOffset=stateOffset;        int upto=i + 1;        while (true) {          if (followA != null) {            numTransitions=followA.initTransition(0,t);            for (int j=0; j < numTransitions; j++) {              followA.getNextTransition(t);              result.addTransition(stateOffset + s,followOffset + numStates + t.dest,t.min,t.max);            }            if (followA.isAccept(0)) {              followOffset+=followA.getNumStates();              followA=(upto == l.size() - 1) ? null : l.get(upto + 1);              upto++;            } else {              break;            }          } else {            result.setAccept(stateOffset + s,true);            break;          }        }      }    }    stateOffset+=numStates;  }  if (result.getNumStates() == 0) {    result.createState();  }  result.finishState();  return result;}  }
class C{  private void reconfigurePipeline(){  if (fDTDValidator == null) {    fBindNamespaces=true;  } else   if (!fDTDValidator.hasGrammar()) {    fBindNamespaces=true;    fPerformValidation=fDTDValidator.validate();    XMLDocumentSource source=fDTDValidator.getDocumentSource();    XMLDocumentHandler handler=fDTDValidator.getDocumentHandler();    source.setDocumentHandler(handler);    if (handler != null)     handler.setDocumentSource(source);    fDTDValidator.setDocumentSource(null);    fDTDValidator.setDocumentHandler(null);  }}  }
class C{  synchronized public void sendX10Sequence(X10Sequence s,SerialListener l){  s.reset();  X10Sequence.Command c;  while ((c=s.getCommand()) != null) {    SpecificMessage m;    if (c.isAddress()) {      m=SpecificMessage.getX10Address(c.getHouseCode(),((X10Sequence.Address)c).getAddress());    } else {      X10Sequence.Function f=(X10Sequence.Function)c;      if (f.getDimCount() > 0) {        m=SpecificMessage.getX10FunctionDim(f.getHouseCode(),f.getFunction(),f.getDimCount());      } else {        m=SpecificMessage.getX10Function(f.getHouseCode(),f.getFunction());      }    }    sendSerialMessage(m,l);    try {      wait(250);    } catch (    InterruptedException ex) {      log.error(null,ex);    }  }}  }
class C{  public AttributeConverter putAttributeConverter(final Class<?> clazz,final AttributeConverter converter){  return this.converters.put(clazz.getCanonicalName(),converter);}  }
class C{  public double put(int key,double value){  double previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public void sendMx1Message(Mx1Message m,Mx1Listener reply){  byte msg[];  if (protocol) {    processPacketForSending(m);    msg=m.getRawPacket();    if (m.replyL1Expected()) {      xmtPackets.put(m.getSequenceNo(),new MessageQueued(m,reply));    }  } else {    int len=m.getNumDataElements();    m.setElement(len - 1,0x0D);    msg=new byte[len];    for (int i=0; i < len; i++) {      msg[i]=(byte)m.getElement(i);    }    if (log.isDebugEnabled()) {      log.debug("queue outgoing packet: " + m.toString());    }  }  notifyLater(m,reply);synchronized (xmtHandler) {    xmtList.addLast(msg);    xmtHandler.notify();  }}  }
class C{  public CatalogServiceRestRep service(){  if (segments.isEmpty()) {    return null;  }  CatalogCategoryRestRep parent=catalog.categories().getRootCatalogCategory(tenantId);  for (Iterator<String> iter=segments.iterator(); iter.hasNext(); ) {    String segment=iter.next();    if (iter.hasNext()) {      parent=getChildCategory(parent,segment);    } else {      return getChildService(parent,segment);    }  }  return null;}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  char c;  if (++bufpos == available)   AdjustBuffSize();  if ((buffer[bufpos]=c=ReadByte()) == '\\') {    if (trackLineColumn) {      UpdateLineColumn(c);    }    int backSlashCnt=1;    for (; ; ) {      if (++bufpos == available)       AdjustBuffSize();      try {        if ((buffer[bufpos]=c=ReadByte()) != '\\') {          if (trackLineColumn) {            UpdateLineColumn(c);          }          if ((c == 'u') && ((backSlashCnt & 1) == 1)) {            if (--bufpos < 0)             bufpos=bufsize - 1;            break;          }          backup(backSlashCnt);          return '\\';        }      } catch (      java.io.IOException e) {        if (backSlashCnt > 1)         backup(backSlashCnt - 1);        return '\\';      }      if (trackLineColumn) {        UpdateLineColumn(c);      }      backSlashCnt++;    }    try {      while ((c=ReadByte()) == 'u')       ++column;      buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));      column+=4;    } catch (    java.io.IOException e) {      throw new Error("Invalid escape character at line " + line + " column "+ column+ ".");    }    if (backSlashCnt == 1)     return c; else {      backup(backSlashCnt - 1);      return '\\';    }  } else {    UpdateLineColumn(c);    return c;  }}  }
class C{  public GifImageButton(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  postInit(GifViewUtils.initImageView(this,attrs,defStyle,0));}  }
class C{  public void dispose(){  view.getConfiguration().getModule().getContent().getTypeInstanceContainer().removeListener(typeInstanceContainerListener);  view.getConfiguration().getModule().getTypeManager().removeListener(typeChangedListener);  view.getConfiguration().getModule().getTypeManager().removeListener(typeSubstitutionChangedListener);  view.removeListener(viewListener);}  }
class C{  public synchronized void updateIconsForPkg(String packageName,UserHandleCompat user){  removeIconsForPkg(packageName,user);  try {    PackageInfo info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES);    long userSerial=mUserManager.getSerialNumberForUser(user);    for (    LauncherActivityInfoCompat app : mLauncherApps.getActivityList(packageName,user)) {      addIconToDBAndMemCache(app,info,userSerial);    }  } catch (  NameNotFoundException e) {    Log.d(TAG,"Package not found",e);    return;  }}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  Instances trainingSet=e.getTrainingSet();  DataSetEvent dse=new DataSetEvent(this,trainingSet);  acceptDataSet(dse);}  }
class C{  public static <T>Observable.Transformer<T,T> applyComputationSchedulers(){  return (Observable.Transformer<T,T>)computationTransformer;}  }
class C{  public boolean isFixedAssetInvoice(){  Object oo=get_Value(COLUMNNAME_IsFixedAssetInvoice);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void myAdd(LinkedList<Integer> l,int i){  l.add(i);}  }
class C{  public MySqlBinLogSpout(MySqlSpoutConfig spoutConfig,ClientFactory clientFactory){  this.spoutConfig=spoutConfig;  this.clientFactory=clientFactory;}  }
class C{  public String toStringRanking(){  int biggest;  int width;  String result;  int[] ranking;  int i;  int curr;  if (m_RankingWins == null)   return "-ranking data not set-";  biggest=Math.max(m_RankingWins[Utils.maxIndex(m_RankingWins)],m_RankingLosses[Utils.maxIndex(m_RankingLosses)]);  width=Math.max(2 + (int)(Math.log(biggest) / Math.log(10)),">-<".length());  result="\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption" + "}\n\\footnotesize\n{\\centering \\begin{tabular}{rlll}\\\\\n\\hline\n";  result+="Resultset & Wins$-$ & Wins & Losses \\\\\n& Losses & & " + "\\\\\n\\hline\n";  ranking=Utils.sort(m_RankingDiff);  for (i=getColCount() - 1; i >= 0; i--) {    curr=ranking[i];    if (getColHidden(curr))     continue;    result+="(" + (curr + 1) + ") & "+ Utils.padLeft("" + m_RankingDiff[curr],width)+ " & "+ Utils.padLeft("" + m_RankingWins[curr],width)+ " & "+ Utils.padLeft("" + m_RankingLosses[curr],width)+ "\\\\\n";  }  result+="\\hline\n\\end{tabular} \\footnotesize \\par}\n\\end{table}";  return result;}  }
class C{  private void handleListenerUnregistration(final HttpServerRequest request){  log.debug("handleListenerUnregistration > " + request.uri());  final String listenerStorageUri=hookRootUri + HOOK_LISTENER_STORAGE_PATH + getUniqueListenerId(request.uri());  storage.delete(listenerStorageUri,null);}  }
class C{  private int RS_MDS_Encode(int k0,int k1){  int r=k1;  for (int i=0; i < 4; i++) {    r=RS_rem(r);  }  r^=k0;  for (int i=0; i < 4; i++) {    r=RS_rem(r);  }  return r;}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,Color bg,ImageObserver observer){  if (img == null) {    return true;  }  if ((width == 0) || (height == 0)) {    return true;  }  final int imgW=img.getWidth(null);  final int imgH=img.getHeight(null);  if (isHiDPIImage(img)) {    return drawHiDPIImage(img,x,y,x + width,y + height,0,0,imgW,imgH,bg,observer);  }  if (width == imgW && height == imgH) {    return copyImage(img,x,y,0,0,width,height,bg,observer);  }  try {    return imagepipe.scaleImage(this,img,x,y,width,height,bg,observer);  } catch (  InvalidPipeException e) {    try {      revalidateAll();      return imagepipe.scaleImage(this,img,x,y,width,height,bg,observer);    } catch (    InvalidPipeException e2) {      return false;    }  } finally {    surfaceData.markDirty();  }}  }
class C{  @Deprecated public SelfStartingMonitoringView(MonitorableRegistry registry,MonitoringView monitoringView){  dynamicMonitoringView=new DynamicMonitoringView(registry,monitoringView);}  }
class C{  public CharacterReference(String kernel,int character){  mKernel=kernel;  mCharacter=character;  if (null == mKernel)   mKernel="";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof MediaFile)   return o; else   return Wizard.getInstance().getFileForFilePath(getFileObj(o));}  }
class C{  public Builder addEncodedQueryParameter(String encodedName,String encodedValue){  if (encodedName == null)   throw new IllegalArgumentException("encodedName == null");  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,false,true,true));  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,false,true,true) : null);  return this;}  }
class C{  public Maybe<A> maybeReadBefore(){  return Maybe.JustWhenTrue(!isStart(),null);}  }
class C{  public Iterator<E> iterator(){  return new PatchingIterator(innerChain);}  }
class C{  public String toString(){  return getClass().getName() + "[id=" + getID()+ ",offset="+ rawOffset+ ",dstSavings="+ dstSavings+ ",useDaylight="+ useDaylight+ ",startYear="+ startYear+ ",startMode="+ startMode+ ",startMonth="+ startMonth+ ",startDay="+ startDay+ ",startDayOfWeek="+ startDayOfWeek+ ",startTime="+ startTime+ ",startTimeMode="+ startTimeMode+ ",endMode="+ endMode+ ",endMonth="+ endMonth+ ",endDay="+ endDay+ ",endDayOfWeek="+ endDayOfWeek+ ",endTime="+ endTime+ ",endTimeMode="+ endTimeMode+ ']';}  }
class C{  public boolean supportsExtendedSQLGrammar() throws SQLException {  return true;}  }
class C{  public Map<String,Object> makeValidContext(String serviceName,String mode,Map<String,? extends Object> context) throws GenericServiceException {  ModelService model=getModelService(serviceName);  return makeValidContext(model,mode,context);}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent dataIntent){  Log.v("Ringdroid","EditActivity onActivityResult");  if (requestCode == REQUEST_CODE_CHOOSE_CONTACT) {    finish();    return;  }}  }
class C{  private void upgradeToProtectedVolume(Volume changeVpoolVolume,VirtualPool newVpool,VirtualPoolChangeParam vpoolChangeParam,String taskId) throws InternalException {  Project project=_dbClient.queryObject(Project.class,changeVpoolVolume.getProject());  if (VirtualPool.vPoolSpecifiesProtection(newVpool)) {    if (!NullColumnValueGetter.isNullURI(changeVpoolVolume.getConsistencyGroup())) {      BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,changeVpoolVolume.getConsistencyGroup());      throw APIException.badRequests.cannotCreateRPVolumesInCG(changeVpoolVolume.getLabel(),cg.getLabel());    }    if (vpoolChangeParam.getConsistencyGroup() == null) {      throw APIException.badRequests.addRecoverPointProtectionRequiresCG();    }    if (!CollectionUtils.isEmpty(getSnapshotsForVolume(changeVpoolVolume))) {      throw APIException.badRequests.cannotAddProtectionWhenSnapshotsExist(changeVpoolVolume.getLabel());    }  }  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,changeVpoolVolume.getCapacity());  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,1);  capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,vpoolChangeParam.getConsistencyGroup());  capabilities.put(VirtualPoolCapabilityValuesWrapper.CHANGE_VPOOL_VOLUME,changeVpoolVolume.getId().toString());  List<Recommendation> recommendations=getRecommendationsForVirtualPoolChangeRequest(changeVpoolVolume,newVpool,vpoolChangeParam,capabilities);  if (recommendations.isEmpty()) {    throw APIException.badRequests.noStorageFoundForVolume();  }  VirtualArray varray=_dbClient.queryObject(VirtualArray.class,changeVpoolVolume.getVirtualArray());  VolumeCreate param=new VolumeCreate(changeVpoolVolume.getLabel(),String.valueOf(changeVpoolVolume.getCapacity()),1,newVpool.getId(),changeVpoolVolume.getVirtualArray(),changeVpoolVolume.getProject().getURI());  TaskList taskList=new TaskList();  createTaskForVolume(changeVpoolVolume,ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VPOOL,taskList,taskId);  Map<VpoolUse,List<Recommendation>> recommendationMap=new HashMap<VpoolUse,List<Recommendation>>();  recommendationMap.put(VpoolUse.ROOT,recommendations);  createVolumes(param,project,varray,newVpool,recommendationMap,taskList,taskId,capabilities);}  }
class C{  private static synchronized void broadcastEstimator(byte[] bytes){  if (null != throttlingProducer) {    try {      if (null != throttlingMAC) {        bytes=CryptoUtils.addMAC(throttlingMAC,bytes);      }      KeyedMessage<byte[],byte[]> message=new KeyedMessage<byte[],byte[]>(throttlingTopic,bytes);      throttlingProducer.send(message);      Sensision.update(SensisionConstants.CLASS_WARP_INGRESS_KAFKA_THROTTLING_OUT_MESSAGES,Sensision.EMPTY_LABELS,1);      Sensision.update(SensisionConstants.CLASS_WARP_INGRESS_KAFKA_THROTTLING_OUT_BYTES,Sensision.EMPTY_LABELS,bytes.length);    } catch (    Exception e) {      Sensision.update(SensisionConstants.CLASS_WARP_INGRESS_KAFKA_THROTTLING_ERRORS,Sensision.EMPTY_LABELS,1);    }  }}  }
class C{  public final String orVirgin(){  return get(Seed.PEERTYPE,Seed.PEERTYPE_VIRGIN);}  }
class C{  public void randomize(){  int nProbs=m_fProbs[0].length;  Random random=new Random();  for (int i=0; i < m_fProbs.length; i++) {    for (int j=0; j < nProbs - 1; j++) {      m_fProbs[i][j]=random.nextDouble();    }    for (int j=0; j < nProbs - 1; j++) {      for (int k=j + 1; k < nProbs - 1; k++) {        if (m_fProbs[i][j] > m_fProbs[i][k]) {          double h=m_fProbs[i][j];          m_fProbs[i][j]=m_fProbs[i][k];          m_fProbs[i][k]=h;        }      }    }    double sum=m_fProbs[i][0];    for (int j=1; j < nProbs - 1; j++) {      m_fProbs[i][j]=m_fProbs[i][j] - sum;      sum+=m_fProbs[i][j];    }    m_fProbs[i][nProbs - 1]=1.0 - sum;  }}  }
class C{  public Builder smartFormatting(Boolean smartFormatting){  this.smartFormatting=smartFormatting;  return this;}  }
class C{  private static void sbrQmfSynthesis(FFT mdct,float out[],float X[][][],float mdctBuf[],float v0[],int vOff[],final int div){  final float sbrQmfWindow[]=div != 0 ? sbr_qmf_window_ds : sbr_qmf_window_us;  final int step=128 >> div;  int v;  int outOffset=0;  for (int i=0; i < 32; i++) {    if (vOff[0] < step) {      int saved_samples=(1280 - 128) >> div;      System.arraycopy(v0,0,v0,SBR_SYNTHESIS_BUF_SIZE - saved_samples,saved_samples);      vOff[0]=SBR_SYNTHESIS_BUF_SIZE - saved_samples - step;    } else {      vOff[0]-=step;    }    v=vOff[0];    if (div != 0) {      for (int n=0; n < 32; n++) {        X[0][i][n]=-X[0][i][n];        X[0][i][32 + n]=X[1][i][31 - n];      }      mdct.imdctHalf(mdctBuf,0,X[0][i],0);      SBRDSP.qmfDeintNeg(v0,v,mdctBuf,0);    } else {      SBRDSP.negOdd64(X[1][i],0);      mdct.imdctHalf(mdctBuf,0,X[0][i],0);      mdct.imdctHalf(mdctBuf,64,X[1][i],0);      SBRDSP.qmfDeintBfly(v0,v,mdctBuf,64,mdctBuf,0);    }    FloatDSP.vectorFmul(out,outOffset,v0,v,sbrQmfWindow,(0),64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (192 >> div),sbrQmfWindow,(64 >> div),out,outOffset,64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (256 >> div),sbrQmfWindow,(128 >> div),out,outOffset,64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (448 >> div),sbrQmfWindow,(192 >> div),out,outOffset,64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (512 >> div),sbrQmfWindow,(256 >> div),out,outOffset,64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (704 >> div),sbrQmfWindow,(320 >> div),out,outOffset,64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (768 >> div),sbrQmfWindow,(384 >> div),out,outOffset,64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (960 >> div),sbrQmfWindow,(448 >> div),out,outOffset,64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (1024 >> div),sbrQmfWindow,(512 >> div),out,outOffset,64 >> div);    FloatDSP.vectorFmulAdd(out,outOffset,v0,v + (1216 >> div),sbrQmfWindow,(576 >> div),out,outOffset,64 >> div);    outOffset+=64 >> div;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private boolean isUserAllowedToStartConfCall(){  boolean isAllowed=false;  if (mRoom.isOngoingConferenceCall()) {    Log.d(LOG_TAG,"## isUserAllowedToStartConfCall(): conference in progress");    isAllowed=true;  } else   if ((null != mRoom) && (mRoom.getActiveMembers().size() > 2)) {    PowerLevels powerLevels=mRoom.getLiveState().getPowerLevels();    if (null != powerLevels) {      isAllowed=powerLevels.getUserPowerLevel(mSession.getMyUserId()) >= powerLevels.invite;    }  } else {    isAllowed=true;  }  Log.d(LOG_TAG,"## isUserAllowedToStartConfCall(): isAllowed=" + isAllowed);  return isAllowed;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.380 -0500",hash_original_method="FA3DDF9B94B3CDEBE6839DEC194373B4",hash_generated_method="CC5C3CF1AA1440CDF3C238739770F717") public static MemoryMappedFile mmapRO(String path) throws ErrnoException {  FileDescriptor fd=Libcore.os.open(path,O_RDONLY,0);  long size=Libcore.os.fstat(fd).st_size;  long address=Libcore.os.mmap(0L,size,PROT_READ,MAP_SHARED,fd,0);  Libcore.os.close(fd);  return new MemoryMappedFile(address,size);}  }
class C{  public SortedSetSortField(String field,boolean reverse,SortedSetSelector.Type selector){  super(field,SortField.Type.CUSTOM,reverse);  if (selector == null) {    throw new NullPointerException();  }  this.selector=selector;}  }
class C{  protected void removeAllNodes(){  path.clear();}  }
class C{  public void transformValues(TFloatFunction function){  Object[] keys=_set;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public static void ensureVisible(Component c){  if (verbose) {    log("ensureVisible(" + c + ")");  }  Form f=Display.getInstance().getCurrent();  f.scrollComponentToVisible(c);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static void registerIslandTypeModel(IFloatingFlower.IslandType islandType,ModelResourceLocation model){  Preconditions.checkState(Loader.instance().isInState(LoaderState.PREINITIALIZATION));  islandTypeModels.put(islandType,model);}  }
class C{  public ParameterizedHashMap(Equality keyEquality){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(int)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);  table=new Entry[DEFAULT_INITIAL_CAPACITY];  this.keyEquality=keyEquality;  init();}  }
class C{  public static MemcacheClientBuilder<String> newStringClient(){  return newStringClient(Charsets.UTF_8);}  }
class C{  public void pushRTFContext(){  m_last_pushed_rtfdtm.push(m_which_rtfdtm);  if (null != m_rtfdtm_stack)   ((SAX2RTFDTM)(getRTFDTM())).pushRewindMark();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.CONDITIONAL_EXPRESSION;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public Builder InlineNewCssClass(String cssClass){  InlineNewCssClass=cssClass;  return this;}  }
class C{  @Deprecated public static CuboidClipboard loadSchematic(File path) throws DataException, IOException {  checkNotNull(path);  return SchematicFormat.MCEDIT.load(path);}  }
class C{  @Override public void insertElementAt(Object obj,int index){  if (!(obj instanceof CheckBoxListItem)) {    super.insertElementAt(new CheckBoxListItem(obj),index);  } else {    super.insertElementAt(obj,index);  }}  }
class C{  @SuppressWarnings("unchecked") private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int size=s.readInt();  allocateElements(size);  head=0;  tail=size;  for (int i=0; i < size; i++)   elements[i]=(E)s.readObject();}  }
class C{  @Get("json") public Map<String,Object> retrieve(){  return retrieveInternal(false);}  }
class C{  public SkyboxVisualPanel2(){  initComponents();  DefaultComboBoxModel<SkyFactory.EnvMapType> model=new DefaultComboBoxModel<SkyFactory.EnvMapType>();  for (  SkyFactory.EnvMapType value : SkyFactory.EnvMapType.values()) {    model.addElement(value);  }  mapTypeCombo.setModel(model);}  }
class C{  public static long calculateTarSize(String path) throws IOException {  return tarSize(path) + TarConstants.EOF_BLOCK;}  }
class C{  public void addExtensions(){  declareExtensions();}  }
class C{  public void add(int index,E element){  addBefore(element,(index == size ? header : entry(index)));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget w=getWidget(stack);  if (w != null) {    Catbert.Context con=new Catbert.Context(stack.getUIMgr());    Catbert.ExecutionPosition ep=ZPseudoComp.processChain(w,con,null,null,false);    if (ep != null) {      ep.addToStackFinal(w);    }    return con.get(null);  }  return null;}  }
class C{  public void dataRefreshAll(){  dataRefreshAll(true,-1);}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  public static void callAgentApp(Context context,String operation,int operationId,String message){  Intent intent=new Intent(Constants.AGENT_APP_SERVICE_NAME);  Intent explicitIntent=createExplicitFromImplicitIntent(context,intent);  if (explicitIntent != null) {    intent=explicitIntent;  }  intent.putExtra("operation",operation);  if (operationId != 0) {    intent.putExtra("id",operationId);  }  if (message != null) {    intent.putExtra("message",message);  }  intent.setPackage(Constants.PACKAGE_NAME);  context.startServiceAsUser(intent,android.os.Process.myUserHandle());}  }
class C{  public void not(){  toBitVector().not();}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public OverpassFilterQuery tagRegexNot(String name,String value){  builder.regexDoesntMatch(name,value);  return this;}  }
class C{  protected String unescape(String value){  if (value.indexOf('\\') == -1) {    return value;  }  return StringUtil.remove(value,'\\');}  }
class C{  public static String longest(List61B<String> list){  int maxDex=0;  for (int i=0; i < list.size(); i+=1) {    String longestString=list.get(maxDex);    String thisString=list.get(i);    if (thisString.length() > longestString.length()) {      maxDex=i;    }  }  return list.get(maxDex);}  }
class C{  public int nextInt(){  throw new UnsupportedOperationException("DiscreteGenerator does not support nextInt()");}  }
class C{  public SQLRecoverableException(String reason){  super(reason,null,0);}  }
class C{  public void testThrowException() throws Exception {  try {    CoderResult.OVERFLOW.throwException();    fail("Should throw BufferOverflowException");  } catch (  BufferOverflowException ex) {  }  try {    CoderResult.UNDERFLOW.throwException();    fail("Should throw BufferOverflowException");  } catch (  BufferUnderflowException ex) {  }  try {    CoderResult.malformedForLength(1).throwException();    fail("Should throw MalformedInputException");  } catch (  MalformedInputException ex) {    assertEquals(ex.getInputLength(),1);  }  try {    CoderResult.unmappableForLength(1).throwException();    fail("Should throw UnmappableCharacterException");  } catch (  UnmappableCharacterException ex) {    assertEquals(ex.getInputLength(),1);  }}  }
class C{  @Deprecated public boolean backHistory(){  if (this.appView != null) {    return appView.backHistory();  }  return false;}  }
class C{  public HashSet(int initialCapacity){  map=new HashMap(initialCapacity);}  }
class C{  public boolean contains(final CharSequence s){  int i=d, l=s.length();  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(s,l,i)))   return false;  return true;}  }
class C{  public N4IDEXpectFileSetup(FileSetupContext ctx,Injector injector){  this.ctx=ctx;  injector.injectMembers(this);}  }
class C{  void withFocusData(Consumer<Entities> cb){  VisualItem item=this.focusItem;  if (item != null && PhysicalVisualization.isNodeGroup(item)) {    Node node=(Node)item.getSourceTuple();    withData(node,cb);  }}  }
class C{  public LocalSageFile(String name,boolean readonly) throws IOException {  randomAccessFile=new RandomAccessFile(name,readonly ? "r" : "rw");  this.readonly=readonly;}  }
class C{  public static ZoneRules of(ZoneOffset offset){  Objects.requireNonNull(offset,"offset");  return new ZoneRules(offset);}  }
class C{  public void addItem(View view){  if (Util.hasValidContents(mInput)) {    mAdapter.addItem(mInput.getText().toString());  }}  }
class C{  private static JSONObject makeRequest(String requestUrl) throws JSONException {  String response=Network.get(requestUrl);  if (response != null) {    return new JSONObject(response);  } else {    Log.w(TAG,"Empty response.");    return null;  }}  }
class C{  public static Builder builder(ConfigureResponse response){  return new Builder(response);}  }
class C{  public static boolean isLoggable(int level){  return sAlwaysLoggable || android.util.Log.isLoggable(TAG,level);}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  K key=tuple.getKey();  ArrayList<Object> list=getObject(key);  list.set(number,tuple.getValue());}  }
class C{  public static InetAddress decode(byte value[]){  try {    return InetAddress.getByAddress(value);  } catch (  UnknownHostException e) {    throw new IllegalArgumentException("encoded bytes are of incorrect length",e);  }}  }
class C{  public void stop(){  puller.switchOf();  System.out.println("Switched of Url Puller");  bandit.switchOf();  System.out.println("Switched of Bandit");  pusher.switchOf();  System.out.println("Switched of Url Pusher");  statusViewer.switchOf();  System.out.println("Switched of Status Viewer");}  }
class C{  public void updateInfo(){  double total=Runtime.getRuntime().totalMemory() / 1024;  double free=Runtime.getRuntime().freeMemory() / 1024;  double used=total - free;  double percent=used * 100 / total;  memoryBar.setMaximum((int)total);  memoryBar.setValue((int)used);  String msg=MessageFormat.format("{0,number,integer} MB - {1,number,integer}%",new Object[]{new BigDecimal(total / 1024),new BigDecimal(percent)});  memoryBar.setString(msg);  msg=Msg.getMsg(m_ctx,"MemoryInfo",new Object[]{new BigDecimal(total),new BigDecimal(free)});  memoryBar.setToolTipText(msg);  if (DB.isConnected()) {    int requests=getRequests();    bRequests.setText(Msg.translate(m_ctx,"R_Request_ID") + ": " + requests);    int notes=getNotes();    bNotes.setText(Msg.translate(m_ctx,"AD_Note_ID") + ": " + notes);    int activities=wfActivity.getActivitiesCount();    centerPane.setTitleAt(m_tabActivities,Msg.getMsg(m_ctx,"WorkflowActivities") + ": " + activities);    MSystem.get(m_ctx).info();  }}  }
class C{  private String nextUnquotedValue() throws IOException {  long i=source.indexOfElement(UNQUOTED_STRING_TERMINALS);  return i != -1 ? buffer.readUtf8(i) : buffer.readUtf8();}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append((int)(rGen.nextDouble() * scale));      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public ListRewriteEvent(List<ASTNode> originalNodes){  this.originalNodes=new ArrayList<ASTNode>(originalNodes);}  }
class C{  public CustomModelLoader registerExtension(@Nonnull LoaderExtension extension){  Validate.notNull(extension);  this.loaderExtensions.add(extension);  return this;}  }
class C{  public ICUTransformFilterFactory(Map<String,String> args){  super(args);  String id=require(args,"id");  String direction=get(args,"direction",Arrays.asList("forward","reverse"),"forward",false);  int dir="forward".equals(direction) ? Transliterator.FORWARD : Transliterator.REVERSE;  transliterator=Transliterator.getInstance(id,dir);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void removeScripType(ScriptType type){  ScriptType scriptType=typeMap.remove(type.getName());  if (scriptType != null) {    getTreeModel().removeType(scriptType);  }}  }
class C{  void sendMessageToHandlerNoControllerReset(List<OFMessage> messages) throws Exception {  setupMessageEvent(messages);  handler.messageReceived(ctx,messageEvent);}  }
class C{  public int find(String what,int start){  try {    ByteBuffer src=ByteBuffer.wrap(this.bytes,0,this.length);    ByteBuffer tgt=encode(what);    byte b=tgt.get();    src.position(start);    while (src.hasRemaining()) {      if (b == src.get()) {        src.mark();        tgt.mark();        boolean found=true;        int pos=src.position() - 1;        while (tgt.hasRemaining()) {          if (!src.hasRemaining()) {            tgt.reset();            src.reset();            found=false;            break;          }          if (!(tgt.get() == src.get())) {            tgt.reset();            src.reset();            found=false;            break;          }        }        if (found) {          return pos;        }      }    }    return -1;  } catch (  CharacterCodingException e) {    e.printStackTrace();    return -1;  }}  }
class C{  Method(MethodDoc methodDoc){  this.methodDoc=methodDoc;  exceptionTypes=methodDoc.thrownExceptions();  Arrays.sort(exceptionTypes,new ClassDocComparator());  operationString=computeOperationString();  nameAndDescriptor=methodDoc.name() + Util.methodDescriptorOf(methodDoc);  methodHash=computeMethodHash();}  }
class C{  public void addRow(Object... row){  if (rows == null) {    throw new IllegalStateException("Cannot add a row when using RowSource");  }  rows.add(row);}  }
class C{  public void showHistory(){  JList list;  ListSelectorDialog dialog;  String tmpStr;  list=new JList(m_History);  dialog=new ListSelectorDialog(m_Parent,list);  if (dialog.showDialog() == ListSelectorDialog.APPROVE_OPTION) {    if (list.getSelectedValue() != null) {      tmpStr=list.getSelectedValue().toString();      if (tmpStr.indexOf("@") > -1) {        setUser(tmpStr.substring(0,tmpStr.indexOf("@")));        setURL(tmpStr.substring(tmpStr.indexOf("@") + 1));        showDialog();      } else {        setUser("");        setURL(tmpStr);      }    }  }  setButtons();}  }
class C{  public GroupNode createGroupNode(final String text,final List<ViewNode> elements){  Preconditions.checkNotNull(text,"Error: Text argument can not be null");  Preconditions.checkNotNull(elements,"Error: Elements argument can not be null");  final List<INaviViewNode> nodes=new ArrayList<INaviViewNode>();  for (  final ViewNode element : elements) {    Preconditions.checkNotNull(element,"Error: Elements list contains a null-element");    nodes.add(element.getNative());  }  final CGroupNode newGroupNode=naviView.getContent().createGroupNode(nodes);  return (GroupNode)cachedNodes.get(newGroupNode);}  }
class C{  public JFXPopup(){  this(null,null);}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public final java_cup.runtime.Symbol CUP$Parser$do_action(int CUP$Parser$act_num,java_cup.runtime.lr_parser CUP$Parser$parser,java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,int CUP$Parser$top) throws java.lang.Exception {  java_cup.runtime.Symbol CUP$Parser$result;switch (CUP$Parser$act_num) {case 42:{      Object RESULT=null;      CUP$Parser$result=parser.getSymbolFactory().newSymbol("element",22,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);    }  return CUP$Parser$result;case 41:{  Object RESULT=null;  CUP$Parser$result=parser.getSymbolFactory().newSymbol("element",22,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 40:{Object RESULT=null;String s=(String)CUP$Parser$stack.peek().value;parser.getStack().peek().addArrayElement(s);CUP$Parser$result=parser.getSymbolFactory().newSymbol("element",22,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 39:{Object RESULT=null;Double d=(Double)CUP$Parser$stack.peek().value;parser.getStack().peek().addArrayElement(d);CUP$Parser$result=parser.getSymbolFactory().newSymbol("element",22,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 38:{Object RESULT=null;Integer i=(Integer)CUP$Parser$stack.peek().value;parser.getStack().peek().addArrayElement(i);CUP$Parser$result=parser.getSymbolFactory().newSymbol("element",22,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 37:{Object RESULT=null;Boolean b=(Boolean)CUP$Parser$stack.peek().value;parser.getStack().peek().addArrayElement(b);CUP$Parser$result=parser.getSymbolFactory().newSymbol("element",22,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 36:{Object RESULT=null;parser.getStack().peek().addArrayElement(null);CUP$Parser$result=parser.getSymbolFactory().newSymbol("element",22,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 35:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("elements",21,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 34:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("elements",21,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 33:{Object RESULT=null;parser.getStack().pop();CUP$Parser$result=parser.getSymbolFactory().newSymbol("array_end",20,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 32:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("array_content",19,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 31:{Object RESULT=null;JSONNode node=parser.getStack().peek().addArray(null);parser.getStack().push(node);CUP$Parser$result=parser.getSymbolFactory().newSymbol("anon_array_start",18,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 30:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("anon_array",15,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 29:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("anon_array",15,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 28:{Object RESULT=null;String name=(String)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;JSONNode node=parser.getStack().peek().addArray(name);parser.getStack().push(node);CUP$Parser$result=parser.getSymbolFactory().newSymbol("named_array_start",17,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 27:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("named_array",16,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 26:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("named_array",16,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 25:{Object RESULT=null;parser.getStack().pop();CUP$Parser$result=parser.getSymbolFactory().newSymbol("object_end",14,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 24:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("object_content",13,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 23:{Object RESULT=null;JSONNode node=parser.getStack().peek().addObject(null);parser.getStack().push(node);CUP$Parser$result=parser.getSymbolFactory().newSymbol("anon_object_start",12,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 22:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("anon_object",9,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 21:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("anon_object",9,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 20:{Object RESULT=null;String name=(String)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;JSONNode node=parser.getStack().peek().addObject(name);parser.getStack().push(node);CUP$Parser$result=parser.getSymbolFactory().newSymbol("named_object_start",11,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 19:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("named_object",10,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 18:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("named_object",10,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 17:{String RESULT=null;String name=(String)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;String s=(String)CUP$Parser$stack.peek().value;parser.getStack().peek().addPrimitive(name,s);CUP$Parser$result=parser.getSymbolFactory().newSymbol("string",8,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 16:{Double RESULT=null;String name=(String)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double d=(Double)CUP$Parser$stack.peek().value;parser.getStack().peek().addPrimitive(name,d);CUP$Parser$result=parser.getSymbolFactory().newSymbol("double",7,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 15:{Integer RESULT=null;String name=(String)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Integer i=(Integer)CUP$Parser$stack.peek().value;parser.getStack().peek().addPrimitive(name,i);CUP$Parser$result=parser.getSymbolFactory().newSymbol("integer",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 14:{Boolean RESULT=null;String name=(String)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Boolean b=(Boolean)CUP$Parser$stack.peek().value;parser.getStack().peek().addPrimitive(name,b);CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolean",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 13:{Object RESULT=null;String name=(String)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;parser.getStack().peek().addNull(name);CUP$Parser$result=parser.getSymbolFactory().newSymbol("null",4,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 12:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("primitive",3,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 11:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("primitive",3,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 10:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("primitive",3,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 9:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("primitive",3,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 8:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("primitive",3,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 7:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("pair",2,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 6:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("pair",2,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 5:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("pair",2,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 4:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("pairs",1,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 3:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("pairs",1,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 2:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("json",0,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 1:{Object RESULT=null;Object start_val=CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=start_val;CUP$Parser$result=parser.getSymbolFactory().newSymbol("$START",0,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}CUP$Parser$parser.done_parsing();return CUP$Parser$result;case 0:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("json",0,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;default :throw new Exception("Invalid action number found in internal parse table");}}  }
class C{  @SuppressWarnings("serial") public void testFilter(){  final FilterNode fn=(FilterNode)new Helper(){{      tmp=filter(FunctionNode.AND(varNode(w),FunctionNode.OR(FunctionNode.EQ(constantNode(w),varNode(y)),FunctionNode.LT(varNode(x),varNode(z)))));    }  }.getTmp();  final QueryRoot query=new QueryRoot(QueryType.SELECT);  final JoinGroupNode jgn=new JoinGroupNode(fn);  query.setWhereClause(jgn);  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("w"));      add(Var.var("x"));      add(Var.var("y"));      add(Var.var("z"));    }  };  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>();  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(query),store);  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),context);  final GlobalAnnotations globals=new GlobalAnnotations(context.getLexiconNamespace(),context.getTimestamp());  AST2BOpUtility.toVE(getBOpContext(),globals,fn.getValueExpressionNode());  assertEquals(requiredBound,fn.getRequiredBound(sa));  assertEquals(desiredBound,fn.getDesiredBound(sa));}  }
class C{  public final void printSummary(){  m_out.println("Parsing summary:");  m_out.println("  Events:");  m_events.print(m_out);  m_out.println("  Errors:");  m_errors.print(m_out);}  }
class C{  public boolean isUserManual(){  return getNode().isUserManual();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean visit(Assignment node){  return true;}  }
class C{  @Override public final int compareTo(Version other){  final int minLength=Math.min(this.m_rawVersion.length,other.m_rawVersion.length);  for (int i=0; i < minLength; i++) {    final int componentComparison=this.m_rawVersion[i].compareTo(other.m_rawVersion[i]);    if (componentComparison != 0) {      return componentComparison;    }  }  final int lengthComparison=Integer.valueOf(this.m_rawVersion.length).compareTo(other.m_rawVersion.length);  if (lengthComparison == 0) {    return 0;  }  final Version longer=lengthComparison > 0 ? this : other;  for (int i=minLength; i < longer.m_rawVersion.length; i++) {    if (longer.m_rawVersion[i] > 0) {      return lengthComparison;    }  }  return 0;}  }
class C{  public void update(){  setText(networkPanel.getNetwork().getTimeLabel());}  }
class C{  public String globalInfo(){  return "Class for building and using a multinomial logistic " + "regression model with a ridge estimator.\n\n" + "There are some modifications, however, compared to the paper of "+ "leCessie and van Houwelingen(1992): \n\n"+ "If there are k classes for n instances with m attributes, the "+ "parameter matrix B to be calculated will be an m*(k-1) matrix.\n\n"+ "The probability for class j with the exception of the last class is\n\n"+ "Pj(Xi) = exp(XiBj)/((sum[j=1..(k-1)]exp(Xi*Bj))+1) \n\n"+ "The last class has probability\n\n"+ "1-(sum[j=1..(k-1)]Pj(Xi)) \n\t= 1/((sum[j=1..(k-1)]exp(Xi*Bj))+1)\n\n"+ "The (negative) multinomial log-likelihood is thus: \n\n"+ "L = -sum[i=1..n]{\n\tsum[j=1..(k-1)](Yij * ln(Pj(Xi)))"+ "\n\t+(1 - (sum[j=1..(k-1)]Yij)) \n\t* ln(1 - sum[j=1..(k-1)]Pj(Xi))"+ "\n\t} + ridge * (B^2)\n\n"+ "In order to find the matrix B for which L is minimised, a "+ "Quasi-Newton Method is used to search for the optimized values of "+ "the m*(k-1) variables.  Note that before we use the optimization "+ "procedure, we 'squeeze' the matrix B into a m*(k-1) vector.  For "+ "details of the optimization procedure, please check "+ "weka.core.Optimization class.\n\n"+ "Although original Logistic Regression does not deal with instance "+ "weights, we modify the algorithm a little bit to handle the "+ "instance weights.\n\n"+ "For more information see:\n\n" + getTechnicalInformation().toString() + "\n\n"+ "Note: Missing values are replaced using a ReplaceMissingValuesFilter, and "+ "nominal attributes are transformed into numeric attributes using a "+ "NominalToBinaryFilter.";}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (m_insideDTD)   return;  charactersFlush();  m_values.addElement(new String(ch,start,length));  int dataIndex=m_valueIndex++;  m_previous=addNode(DTM.COMMENT_NODE,DTM.COMMENT_NODE,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  protected Object cloneTemplate(Node node){  Object obj=null;  try {    obj=template.getClass().newInstance();    if (obj instanceof Collection) {      node=node.getFirstChild();      if (node != null && node instanceof Element && ((Element)node).hasAttribute("as")) {        obj=new Hashtable();      }    }  } catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }  return obj;}  }
class C{  @ObjectiveCName("myUid") public int myUid(){  return modules.getAuthModule().myUid();}  }
class C{  public boolean shipsLoadName(String load){  if (_shipLoadOption.equals(ALL_LOADS)) {    return true;  }  if (_shipLoadOption.equals(INCLUDE_LOADS)) {    return _shipLoadList.contains(load);  }  return !_shipLoadList.contains(load);}  }
class C{  private static Class<?> loadAndInitializeInvokerClass(byte[] classBytes,Object[] patches){  Class<?> invokerClass=UNSAFE.defineAnonymousClass(HOST_CLASS,classBytes,patches);  UNSAFE.ensureClassInitialized(invokerClass);  return invokerClass;}  }
class C{  public ImageInfo inspectImage(InspectImageParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("GET").path(apiVersionPathPrefix + "/images/" + params.getImage()+ "/json")){    final DockerResponse response=connection.request();    if (OK.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }    return parseResponseStreamAndClose(response.getInputStream(),ImageInfo.class);  } }  }
class C{  public static long dataPoints(String periodExpression,String spanExpression){  return dataPoints(inSeconds(periodExpression),inSeconds(spanExpression));}  }
class C{  public Map<String,List<String>> pageParametesAsMultiMap(final PageParameters pageParameters){  final Map<String,List<String>> map=new LinkedHashMap<String,List<String>>();  if (pageParameters != null) {    for (    String key : pageParameters.getNamedKeys()) {      if (!commandConfig.isInternalCommandKey(key)) {        final List<String> vals=new ArrayList<String>();        for (        final StringValue value : pageParameters.getValues(key)) {          vals.add(value.toString());        }        map.put(key,vals);      }    }  }  return map;}  }
class C{  public byte[] toBytes(){  try {    ByteArrayOutputStream out=new ByteArrayOutputStream();    _field.store(out,null);    return out.toByteArray();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public ChartPanel(JFreeChart chart,int width,int height,int minimumDrawWidth,int minimumDrawHeight,int maximumDrawWidth,int maximumDrawHeight,boolean useBuffer,boolean properties,boolean save,boolean print,boolean zoom,boolean tooltips){  this(chart,width,height,minimumDrawWidth,minimumDrawHeight,maximumDrawWidth,maximumDrawHeight,useBuffer,properties,true,save,print,zoom,tooltips);}  }
class C{  public LookupOp(LookupTable lookup,RenderingHints hints){  this.ltable=lookup;  this.hints=hints;  numComponents=ltable.getNumComponents();}  }
class C{  public void incrementInUseCount(){  mInUseLength++;}  }
class C{  private void paintPressed(Graphics2D g,JComponent c,int width,int height){  paintMenu(g,c,width,height,pressed);}  }
class C{  Query makeContains(Rectangle bbox){  Query qMinY=this.makeNumericRangeQuery(field_minY,null,bbox.getMinY(),false,true);  Query qMaxY=this.makeNumericRangeQuery(field_maxY,bbox.getMaxY(),null,true,false);  Query yConditions=this.makeQuery(BooleanClause.Occur.MUST,qMinY,qMaxY);  Query xConditions;  if (!bbox.getCrossesDateLine()) {    Query qMinX=this.makeNumericRangeQuery(field_minX,null,bbox.getMinX(),false,true);    Query qMaxX=this.makeNumericRangeQuery(field_maxX,bbox.getMaxX(),null,true,false);    Query qMinMax=this.makeQuery(BooleanClause.Occur.MUST,qMinX,qMaxX);    Query qNonXDL=this.makeXDL(false,qMinMax);    if (!ctx.isGeo()) {      xConditions=qNonXDL;    } else {      Query qXDLLeft=this.makeNumericRangeQuery(field_minX,null,bbox.getMinX(),false,true);      Query qXDLRight=this.makeNumericRangeQuery(field_maxX,bbox.getMaxX(),null,true,false);      Query qXDLLeftRight=this.makeQuery(BooleanClause.Occur.SHOULD,qXDLLeft,qXDLRight);      Query qXDL=this.makeXDL(true,qXDLLeftRight);      Query qEdgeDL=null;      if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {        double edge=bbox.getMinX() * -1;        qEdgeDL=makeQuery(BooleanClause.Occur.SHOULD,makeNumberTermQuery(field_minX,edge),makeNumberTermQuery(field_maxX,edge));      }      xConditions=this.makeQuery(BooleanClause.Occur.SHOULD,qNonXDL,qXDL,qEdgeDL);    }  } else {    Query qXDLLeft=this.makeNumericRangeQuery(field_minX,null,bbox.getMinX(),false,true);    Query qXDLRight=this.makeNumericRangeQuery(field_maxX,bbox.getMaxX(),null,true,false);    Query qXDLLeftRight=this.makeXDL(true,this.makeQuery(BooleanClause.Occur.MUST,qXDLLeft,qXDLRight));    Query qWorld=makeQuery(BooleanClause.Occur.MUST,makeNumberTermQuery(field_minX,-180),makeNumberTermQuery(field_maxX,180));    xConditions=makeQuery(BooleanClause.Occur.SHOULD,qXDLLeftRight,qWorld);  }  return this.makeQuery(BooleanClause.Occur.MUST,xConditions,yConditions);}  }
class C{  public final void writeBoolean(boolean v) throws IOException {  write(v ? 1 : 0);}  }
class C{  public static boolean isRawTypeRef(TypeRef typeRef){  if (typeRef instanceof ParameterizedTypeRef) {    final Type declType=typeRef.getDeclaredType();    return declType != null && declType.getTypeVars().size() > typeRef.getTypeArgs().size();  }  return false;}  }
class C{  public void add(SelectClauseElementRaw element){  selectClauseElements.add(element);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","lnit");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void confiscate(final HousePortal portal){  notifyIfNeeded(portal.getOwner(),"You have neglected to pay your house taxes for too long. " + "Your house has been repossessed to cover the debt to the state.");  logger.info("repossessed " + portal.getDoorId() + ", which used to belong to "+ portal.getOwner());  portal.changeLock();  portal.setOwner("");}  }
class C{  public byte[] decrypt(String encryptedString) throws NoSuchAlgorithmException, InvalidKeySpecException, IOException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {  if ((encryptedString == null) || (encryptedString.isEmpty())) {    return null;  }  Cipher cipher=getCipher(Cipher.DECRYPT_MODE);  return cipher.doFinal(Base64.decode(encryptedString,Base64.DEFAULT));}  }
class C{  public final Vec4D rotateZ(float theta){  final float co=(float)Math.cos(theta);  final float si=(float)Math.sin(theta);  final float xx=co * x - si * y;  y=si * x + co * y;  x=xx;  return this;}  }
class C{  private static CopyImageResponse checkCopyImageResponse(CopyImageResponse copyImageResponse) throws RpcException {  logger.info("Checking {}",copyImageResponse);switch (copyImageResponse.getResult()) {case OK:    break;case IMAGE_NOT_FOUND:  throw new ImageNotFoundException(copyImageResponse.getError());case SYSTEM_ERROR:throw new SystemErrorException(copyImageResponse.getError());default :throw new RpcException(String.format("Unexpected result: %s",copyImageResponse.getResult()));}return copyImageResponse;}  }
class C{  @DSComment("no security concern") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.228 -0500",hash_original_method="B25B5EE312C01437108EEEF8D289ECD3",hash_generated_method="C63E892A6BA4EC792C3677F2364FB69A") @DSVerified public boolean shouldOverrideUrlLoading(WebView view,String url){  return false;}  }
class C{  public boolean isSetKeys(){  return this.keys != null;}  }
class C{  @Override public void visitEnd(){  outer:   for (  Class<? extends Annotation> toAddAnn : toAddAnnotations) {    Type toAddAnnType=Type.getType(toAddAnn);    if (VERBOSE)     System.out.println("Annotation: " + toAddAnn);    for (    String presentAnn : presentAnnotations) {      if (toAddAnnType.equals(Type.getType(presentAnn))) {        if (VERBOSE)         System.out.println("Annotation already present: " + toAddAnn + " "+ presentAnn);        continue outer;      }    }    if (VERBOSE)     System.out.println("Adding annotation: " + toAddAnn);    mv.visitAnnotation("L" + toAddAnnType.getInternalName() + ";",true);  }  mv.visitEnd();}  }
class C{  protected void addContent(Group bg,OMGraphicHandlerLayer layer){  addContent(bg,layer,0);}  }
class C{  public static boolean isServiceRunning(Context ctx,String serviceName){  if (serviceName == null)   throw new NullPointerException("Service name cannot be null");  ActivityManager manager=(ActivityManager)ctx.getSystemService(Context.ACTIVITY_SERVICE);  for (  RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {    if (service.service.getClassName().equals(serviceName)) {      return true;    }  }  return false;}  }
class C{  public static void recordMainEntryPointTime(){  sApplicationStartWallClockMs=System.currentTimeMillis();}  }
class C{  private void appendType(Type genericType,final StringBuilder builder){  builder.append(getImplName(genericType,false));}  }
class C{  public Property dayOfYear(){  return new Property(this,getChronology().dayOfYear());}  }
class C{  public synchronized boolean wasDoubleClicked(){  return this.value == 2;}  }
class C{  public void pathDirty(){  messageLabel.setText("Press refresh to recalculate.");}  }
class C{  public boolean verifyPoints(final GPInitializer initializer,final GPNode inner1,final GPNode inner2){  if (!inner1.swapCompatibleWith(initializer,inner2))   return false;  if (inner1.depth() + inner2.atDepth() > maxDepth)   return false;  return true;}  }
class C{  public void forNumVMsInvoke(int numVMs,String methodName,Object[] args){  Host host=Host.getHost(0);  for (int i=0; i < numVMs; i++) {    logInfo("Invoking " + methodName + "on VM#"+ i);    host.getVM(i).invoke(this.getClass(),methodName,args);  }}  }
class C{  public void execute(){  try {    prep.execute();  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  public static Sentence newDisjunction(Sentence... disjuncts){  return newDisjunction(Arrays.asList(disjuncts));}  }
class C{  public void testGoodRpc() throws Exception {  String resdata="Response Data";  Response response=Response.newBuilder().setStrData(resdata).build();  socketRpcServer.registerService(new FakeServiceImpl(REQUEST).withResponse(response));  FakeSocket socket=new FakeSocket(false).withRequest(RPC_REQUEST);  runHandler(socket);  assertTrue(socket.getResponse().getCallback());  assertEquals(response.toByteString(),socket.getResponse().getResponseProto());}  }
class C{  @Override public void paintComponent(Graphics g){  Color oldBackground=((Graphics2D)g).getBackground();  if (m_BackgroundColor != null) {    ((Graphics2D)g).setBackground(m_BackgroundColor);  }  g.clearRect(0,0,getSize().width,getSize().height);  ((Graphics2D)g).setBackground(oldBackground);  g.setClip(3,7,getWidth() - 6,getHeight() - 10);  painter(g);  g.setClip(0,0,getWidth(),getHeight());}  }
class C{  public boolean isGeneral(){  return (type & GENERAL) != 0;}  }
class C{  @NoInline private static void arraycopyPiecemeal(char[] src,int srcIdx,char[] dst,int dstIdx,int len){  if (srcIdx < dstIdx) {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  } else {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  }}  }
class C{  public void testMultiWordSynonymsPhrase() throws Exception {  MultiPhraseQuery.Builder expectedBuilder=new MultiPhraseQuery.Builder();  expectedBuilder.add(new Term[]{new Term("field","guinea"),new Term("field","cavy")});  expectedBuilder.add(new Term("field","pig"));  QueryBuilder queryBuilder=new QueryBuilder(new MockSynonymAnalyzer());  assertEquals(expectedBuilder.build(),queryBuilder.createPhraseQuery("field","guinea pig"));}  }
class C{  public static boolean asBoolean(final Object o){  if (o == null) {    return false;  }  if (o instanceof Number) {    return ((Number)o).doubleValue() != 0;  }  if (o instanceof Boolean) {    return (Boolean)o;  }  try {    return !((Boolean)o.getClass().getMethod("isEmpty").invoke(o));  } catch (  Exception e) {    throw new IllegalStateException(format("Don't know how to evaluate an instance of %s as boolean",o.getClass()),e);  }}  }
class C{  private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){  if (x > left && x < right && y > top && y < bottom) {    return true;  }  return false;}  }
class C{  public void visit(Edge e){  State s1=e.getSrc();  State s2=e.getDest();  if (e.isDestAccepting()) {    appendStateToBuilder(s1,this.fsbAcceptingStates);  }  if (s1 != null && s2 != null) {    s1.visited(this);    s2.visited(this);    if (s1.equals(this.fStartState)) {      fsbStartEdges.append(getStateNumber(s1));      fsbStartEdges.append(" -> ");      fsbStartEdges.append(getStateNumber(s2));      fsbStartEdges.append(" [label=\"" + e.getSymbol().toString() + "\"]");      fsbStartEdges.append(";\n ");    } else {      fsbEdges.append(getStateNumber(s1));      fsbEdges.append(" -> ");      fsbEdges.append(getStateNumber(s2));      fsbEdges.append(" [label=\"" + e.getSymbol().toString() + "\"]");      fsbEdges.append(";\n ");    }  }}  }
class C{  @Override public void onAdChanged(){  notifyDataSetChanged();}  }
class C{  private void disableUnsupportedButtons(){  try {    if (mPauseButton != null && !mPlayer.canPause()) {      mPauseButton.setEnabled(false);    }    if (mRewButton != null && !mPlayer.canSeekBackward()) {      mRewButton.setEnabled(false);    }    if (mFfwdButton != null && !mPlayer.canSeekForward()) {      mFfwdButton.setEnabled(false);    }  } catch (  IncompatibleClassChangeError ex) {  }}  }
class C{  public static DataWorldComponent createDataWorld(final NumericTable data,final String name){  DataWorldComponent component=new DataWorldComponent(data,name);  component.init();  return component;}  }
class C{  public JCExpression longToIntForHashCode(JavacTreeMaker maker,JCExpression ref1,JCExpression ref2){  JCExpression shift=maker.Binary(CTC_UNSIGNED_SHIFT_RIGHT,ref1,maker.Literal(32));  JCExpression xorBits=maker.Binary(CTC_BITXOR,shift,ref2);  return maker.TypeCast(maker.TypeIdent(CTC_INT),xorBits);}  }
class C{  public OMArc(double latPoint,double lonPoint,double radius,Length units,double s,double e){  this(new LatLonPoint.Double(latPoint,lonPoint),radius,units,-1,s,e);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.BUILT_IN_TYPE;}  }
class C{  private static String yieldpointPrefix(Operator op){  if (op == YIELDPOINT_PROLOGUE)   return "Prologue";  if (op == YIELDPOINT_EPILOGUE)   return "Epilogue";  if (op == YIELDPOINT_BACKEDGE)   return "Backedge";  return "ERROR";}  }
class C{  private void addCORSHeaders(HttpServerRequest request,Logger log){  String originHeader=request.headers().get("Origin");  if (addCORSheaders && originHeader != null) {    request.response().headers().set("Access-Control-Allow-Origin",originHeader);    request.response().headers().set("Access-Control-Allow-Credentials","true");    request.response().headers().set("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, DELETE");    if (HttpMethod.OPTIONS == request.method()) {      request.response().headers().set("Access-Control-Allow-Headers",request.headers().get("Access-Control-Request-Headers"));    }    log.debug("Setting Access-Control-Allow-Origin headers");  }}  }
class C{  protected void emit_ArrayBindingPattern_CommaKeyword_3_2_0_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void rollbackMethodNull(String stepId) throws WorkflowException {  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  protected int unwrapValue(Object value){  return ((Integer)value).intValue();}  }
class C{  private void doAcquireSharedInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public boolean isRecordProcessable(long epoch,long sequenceNo){  if (epoch < getReadEpoch()) {    return false;  } else   if (epoch > getReadEpoch()) {    return false;  } else {synchronized (this) {      if (sequenceNo < receiveWindowLowerBoundary) {        return false;      } else {        return !isDuplicate(sequenceNo);      }    }  }}  }
class C{  public void readFromParcel(Parcel in){  x=in.readFloat();  y=in.readFloat();}  }
class C{  boolean compareAndSetLeaf(Page oldPage,Page page){  if (oldPage == page) {    return true;  }  int pid=(int)page.getId();  updateTailPid(pid);  if (oldPage instanceof PageLeafImpl && page instanceof PageLeafImpl) {    PageLeafImpl oldLeaf=(PageLeafImpl)oldPage;    PageLeafImpl newLeaf=(PageLeafImpl)page;    if (BlockTree.compareKey(oldLeaf.getMaxKey(),newLeaf.getMaxKey(),0) < 0) {      System.err.println(" DERP: " + oldPage + " "+ page);      Thread.dumpStack();    }  }  boolean result=_pages.compareAndSet(pid,oldPage,page);  return result;}  }
class C{  public boolean equals(Task that){  if (that == null) {    return false;  }  boolean this_present_taskId=true & this.isSetTaskId();  boolean that_present_taskId=true & that.isSetTaskId();  if (this_present_taskId || that_present_taskId) {    if (!(this_present_taskId && that_present_taskId)) {      return false;    }    if (this.taskId != that.taskId) {      return false;    }  }  boolean this_present_taskName=true & this.isSetTaskName();  boolean that_present_taskName=true & that.isSetTaskName();  if (this_present_taskName || that_present_taskName) {    if (!(this_present_taskName && that_present_taskName)) {      return false;    }    if (!this.taskName.equals(that.taskName)) {      return false;    }  }  boolean this_present_className=true & this.isSetClassName();  boolean that_present_className=true & that.isSetClassName();  if (this_present_className || that_present_className) {    if (!(this_present_className && that_present_className)) {      return false;    }    if (!this.className.equals(that.className)) {      return false;    }  }  boolean this_present_method=true & this.isSetMethod();  boolean that_present_method=true & that.isSetMethod();  if (this_present_method || that_present_method) {    if (!(this_present_method && that_present_method)) {      return false;    }    if (!this.method.equals(that.method)) {      return false;    }  }  boolean this_present_moduleCode=true & this.isSetModuleCode();  boolean that_present_moduleCode=true & that.isSetModuleCode();  if (this_present_moduleCode || that_present_moduleCode) {    if (!(this_present_moduleCode && that_present_moduleCode)) {      return false;    }    if (!this.moduleCode.equals(that.moduleCode)) {      return false;    }  }  boolean this_present_priority=true & this.isSetPriority();  boolean that_present_priority=true & that.isSetPriority();  if (this_present_priority || that_present_priority) {    if (!(this_present_priority && that_present_priority)) {      return false;    }    if (this.priority != that.priority) {      return false;    }  }  boolean this_present_isConcurrent=true & this.isSetIsConcurrent();  boolean that_present_isConcurrent=true & that.isSetIsConcurrent();  if (this_present_isConcurrent || that_present_isConcurrent) {    if (!(this_present_isConcurrent && that_present_isConcurrent)) {      return false;    }    if (!this.isConcurrent.equals(that.isConcurrent)) {      return false;    }  }  boolean this_present_taskState=true & this.isSetTaskState();  boolean that_present_taskState=true & that.isSetTaskState();  if (this_present_taskState || that_present_taskState) {    if (!(this_present_taskState && that_present_taskState)) {      return false;    }    if (!this.taskState.equals(that.taskState)) {      return false;    }  }  boolean this_present_lastExecuteTime=true & this.isSetLastExecuteTime();  boolean that_present_lastExecuteTime=true & that.isSetLastExecuteTime();  if (this_present_lastExecuteTime || that_present_lastExecuteTime) {    if (!(this_present_lastExecuteTime && that_present_lastExecuteTime)) {      return false;    }    if (this.lastExecuteTime != that.lastExecuteTime) {      return false;    }  }  boolean this_present_nextExcuteDate=true & this.isSetNextExcuteDate();  boolean that_present_nextExcuteDate=true & that.isSetNextExcuteDate();  if (this_present_nextExcuteDate || that_present_nextExcuteDate) {    if (!(this_present_nextExcuteDate && that_present_nextExcuteDate)) {      return false;    }    if (this.nextExcuteDate != that.nextExcuteDate) {      return false;    }  }  boolean this_present_operatorId=true & this.isSetOperatorId();  boolean that_present_operatorId=true & that.isSetOperatorId();  if (this_present_operatorId || that_present_operatorId) {    if (!(this_present_operatorId && that_present_operatorId)) {      return false;    }    if (this.operatorId != that.operatorId) {      return false;    }  }  boolean this_present_createTime=true & this.isSetCreateTime();  boolean that_present_createTime=true & that.isSetCreateTime();  if (this_present_createTime || that_present_createTime) {    if (!(this_present_createTime && that_present_createTime)) {      return false;    }    if (this.createTime != that.createTime) {      return false;    }  }  return true;}  }
class C{  public Vector4i zero(){  MemUtil.INSTANCE.zero(this);  return this;}  }
class C{  public void ensureCapacity(int minCapacity){  modCount++;  int oldCapacity=elementData.length;  if (minCapacity > oldCapacity) {    Object[] oldData=elementData;    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity)     newCapacity=minCapacity;    elementData=new Object[newCapacity];    System.arraycopy(oldData,0,elementData,0,size);  }}  }
class C{  void elementDequeued(){  if (count == 0)   queueIsEmpty(); else   if (takeIndex == 0)   takeIndexWrapped();}  }
class C{  public Color(){}  }
class C{  public boolean isChanged(){  if (m_change) {    MLocator l=(MLocator)fLocator.getSelectedItem();    if (l != null)     return l.getM_Locator_ID() == m_M_Locator_ID;  }  return m_change;}  }
class C{  public boolean acceptIncomingConnect(BluetoothDevice device){  if (DBG)   log("acceptIncomingConnect");  if (mService != null && isEnabled()) {    try {      return mService.acceptIncomingConnect(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public void brk(AArch64ExceptionCode exceptionCode){  super.brk(exceptionCode.encoding);}  }
class C{  public PropertiesMetalTheme(InputStream stream){  initColors();  loadProperties(stream);}  }
class C{  public Spider thread(ExecutorService executorService,int threadNum){  checkIfRunning();  this.threadNum=threadNum;  if (threadNum <= 0) {    throw new IllegalArgumentException("threadNum should be more than one!");  }  return this;}  }
class C{  public HierarchicalTreeModel(Map<GraphNode,? extends SuccessorEdges> index){  this.index=index;}  }
class C{  Type fold2(int opcode,Type left,Type right){  try {    if (opcode > ByteCodes.preMask) {      Type t1=fold2(opcode >> ByteCodes.preShift,left,right);      return (t1.constValue() == null) ? t1 : fold1(opcode & ByteCodes.preMask,t1);    } else {      Object l=left.constValue();      Object r=right.constValue();switch (opcode) {case iadd:        return syms.intType.constType(intValue(l) + intValue(r));case isub:      return syms.intType.constType(intValue(l) - intValue(r));case imul:    return syms.intType.constType(intValue(l) * intValue(r));case idiv:  return syms.intType.constType(intValue(l) / intValue(r));case imod:return syms.intType.constType(intValue(l) % intValue(r));case iand:return (left.hasTag(BOOLEAN) ? syms.booleanType : syms.intType).constType(intValue(l) & intValue(r));case bool_and:return syms.booleanType.constType(b2i((intValue(l) & intValue(r)) != 0));case ior:return (left.hasTag(BOOLEAN) ? syms.booleanType : syms.intType).constType(intValue(l) | intValue(r));case bool_or:return syms.booleanType.constType(b2i((intValue(l) | intValue(r)) != 0));case ixor:return (left.hasTag(BOOLEAN) ? syms.booleanType : syms.intType).constType(intValue(l) ^ intValue(r));case ishl:case ishll:return syms.intType.constType(intValue(l) << intValue(r));case ishr:case ishrl:return syms.intType.constType(intValue(l) >> intValue(r));case iushr:case iushrl:return syms.intType.constType(intValue(l) >>> intValue(r));case if_icmpeq:return syms.booleanType.constType(b2i(intValue(l) == intValue(r)));case if_icmpne:return syms.booleanType.constType(b2i(intValue(l) != intValue(r)));case if_icmplt:return syms.booleanType.constType(b2i(intValue(l) < intValue(r)));case if_icmpgt:return syms.booleanType.constType(b2i(intValue(l) > intValue(r)));case if_icmple:return syms.booleanType.constType(b2i(intValue(l) <= intValue(r)));case if_icmpge:return syms.booleanType.constType(b2i(intValue(l) >= intValue(r)));case ladd:return syms.longType.constType(new Long(longValue(l) + longValue(r)));case lsub:return syms.longType.constType(new Long(longValue(l) - longValue(r)));case lmul:return syms.longType.constType(new Long(longValue(l) * longValue(r)));case ldiv:return syms.longType.constType(new Long(longValue(l) / longValue(r)));case lmod:return syms.longType.constType(new Long(longValue(l) % longValue(r)));case land:return syms.longType.constType(new Long(longValue(l) & longValue(r)));case lor:return syms.longType.constType(new Long(longValue(l) | longValue(r)));case lxor:return syms.longType.constType(new Long(longValue(l) ^ longValue(r)));case lshl:case lshll:return syms.longType.constType(new Long(longValue(l) << intValue(r)));case lshr:case lshrl:return syms.longType.constType(new Long(longValue(l) >> intValue(r)));case lushr:return syms.longType.constType(new Long(longValue(l) >>> intValue(r)));case lcmp:if (longValue(l) < longValue(r)) return syms.intType.constType(minusOne); else if (longValue(l) > longValue(r)) return syms.intType.constType(one); else return syms.intType.constType(zero);case fadd:return syms.floatType.constType(new Float(floatValue(l) + floatValue(r)));case fsub:return syms.floatType.constType(new Float(floatValue(l) - floatValue(r)));case fmul:return syms.floatType.constType(new Float(floatValue(l) * floatValue(r)));case fdiv:return syms.floatType.constType(new Float(floatValue(l) / floatValue(r)));case fmod:return syms.floatType.constType(new Float(floatValue(l) % floatValue(r)));case fcmpg:case fcmpl:if (floatValue(l) < floatValue(r)) return syms.intType.constType(minusOne); else if (floatValue(l) > floatValue(r)) return syms.intType.constType(one); else if (floatValue(l) == floatValue(r)) return syms.intType.constType(zero); else if (opcode == fcmpg) return syms.intType.constType(one); else return syms.intType.constType(minusOne);case dadd:return syms.doubleType.constType(new Double(doubleValue(l) + doubleValue(r)));case dsub:return syms.doubleType.constType(new Double(doubleValue(l) - doubleValue(r)));case dmul:return syms.doubleType.constType(new Double(doubleValue(l) * doubleValue(r)));case ddiv:return syms.doubleType.constType(new Double(doubleValue(l) / doubleValue(r)));case dmod:return syms.doubleType.constType(new Double(doubleValue(l) % doubleValue(r)));case dcmpg:case dcmpl:if (doubleValue(l) < doubleValue(r)) return syms.intType.constType(minusOne); else if (doubleValue(l) > doubleValue(r)) return syms.intType.constType(one); else if (doubleValue(l) == doubleValue(r)) return syms.intType.constType(zero); else if (opcode == dcmpg) return syms.intType.constType(one); else return syms.intType.constType(minusOne);case if_acmpeq:return syms.booleanType.constType(b2i(l.equals(r)));case if_acmpne:return syms.booleanType.constType(b2i(!l.equals(r)));case string_add:return syms.stringType.constType(left.stringValue() + right.stringValue());default :return null;}}} catch (ArithmeticException e) {return null;}}  }
class C{  public boolean isSetType(){  return EncodingUtils.testBit(__isset_bitfield,__TYPE_ISSET_ID);}  }
class C{  public static void noNullElements(Object[] objects){  noNullElements(objects,"Array must not contain any null objects");}  }
class C{  private void adjustApproximatedKNNDistances(MkCoPEntry entry,Map<DBID,KNNList> knnLists){  MkCoPTreeNode<O> node=getNode(entry);  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      MkCoPLeafEntry leafEntry=(MkCoPLeafEntry)node.getEntry(i);      approximateKnnDistances(leafEntry,knnLists.get(leafEntry.getRoutingObjectID()));    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      MkCoPEntry dirEntry=node.getEntry(i);      adjustApproximatedKNNDistances(dirEntry,knnLists);    }  }  ApproximationLine approx=node.conservativeKnnDistanceApproximation(settings.kmax);  entry.setConservativeKnnDistanceApproximation(approx);}  }
class C{  private void sortFiles() throws IOException {  for (  String filePath : filePaths) {    readProperties(filePath);    Map<String,String> sortedProps=sort(props);    write(sortedProps,filePath);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public ConnectionPoolDataSource createConnectionPoolDataSource(Properties properties) throws SQLException {  Properties propertiesCopy=new Properties();  if (properties != null) {    propertiesCopy.putAll(properties);  }  rejectUnsupportedOptions(propertiesCopy);  rejectPoolingOptions(propertiesCopy);  JdbcDataSource dataSource=new JdbcDataSource();  setupH2DataSource(dataSource,propertiesCopy);  return dataSource;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean deleteImage(String path){  return new File(path).delete();}  }
class C{  public DD ceil(){  if (isNaN())   return NaN;  double fhi=Math.ceil(hi);  double flo=0.0;  if (fhi == hi) {    flo=Math.ceil(lo);  }  return new DD(fhi,flo);}  }
class C{  @Override public Object adapt(Object object,Object type){  if (isFactoryForType(type)) {    Object adapter=super.adapt(object,type);    if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {      return adapter;    }  }  return null;}  }
class C{  public AccountHeaderBuilder withProfileImagesVisible(boolean profileImagesVisible){  this.mProfileImagesVisible=profileImagesVisible;  return this;}  }
class C{  public void previousTrack(){  buildAndSendMessage(null,"PreviousTrack");}  }
class C{  public CalibratedGyroscopeProvider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE));}  }
class C{  @Override public void run(){  amIActive=true;  String redHeader, greenHeader, blueHeader, intensityHeader, saturationHeader, hueHeader;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  redHeader=args[0];  greenHeader=args[1];  blueHeader=args[2];  intensityHeader=args[3];  hueHeader=args[4];  saturationHeader=args[5];  if (redHeader.isEmpty() || greenHeader.isEmpty() || blueHeader == null || intensityHeader.isEmpty() || hueHeader.isEmpty() || saturationHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal;    double r, g, b;    double i, s, h, m;    float progress;    WhiteboxRasterInfo red=new WhiteboxRasterInfo(redHeader);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(greenHeader);    if (green.getNumberRows() != rows || green.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(blueHeader);    if (blue.getNumberRows() != rows || blue.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    double redNoData=red.getNoDataValue();    double greenNoData=green.getNoDataValue();    double blueNoData=blue.getNoDataValue();    WhiteboxRaster intensity=new WhiteboxRaster(intensityHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    WhiteboxRaster hue=new WhiteboxRaster(hueHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    WhiteboxRaster saturation=new WhiteboxRaster(saturationHeader,"rw",redHeader,WhiteboxRaster.DataType.FLOAT,redNoData);    double overallMin=Math.min(Math.min(red.getDisplayMinimum(),green.getDisplayMinimum()),blue.getDisplayMinimum());    double overallMax=Math.max(Math.max(red.getDisplayMaximum(),green.getDisplayMaximum()),blue.getDisplayMaximum());    double range=overallMax - overallMin;    double[] dataRed, dataGreen, dataBlue;    for (row=0; row < rows; row++) {      dataRed=red.getRowValues(row);      dataGreen=green.getRowValues(row);      dataBlue=blue.getRowValues(row);      for (col=0; col < cols; col++) {        redVal=dataRed[col];        greenVal=dataGreen[col];        blueVal=dataBlue[col];        if ((redVal != redNoData) && (greenVal != greenNoData) && (blueVal != blueNoData)) {          r=(redVal - overallMin) / range;          if (r < 0) {            r=0;          }          if (r > 1) {            r=1;          }          g=(greenVal - overallMin) / range;          if (g < 0) {            g=0;          }          if (g > 1) {            g=1;          }          b=(blueVal - overallMin) / range;          if (b < 0) {            b=0;          }          if (b > 1) {            b=1;          }          m=Math.min(Math.min(r,g),b);          i=r + g + b;          if (i == 3) {            h=0;          } else           if (m == b) {            h=(g - b) / (i - 3 * b);          } else           if (m == r) {            h=(b - r) / (i - 3 * r) + 1;          } else {            h=(r - g) / (i - 3 * g) + 2;          }          if (h <= 1) {            s=(i - 3 * b) / i;          } else           if (h <= 2) {            s=(i - 3 * r) / i;          } else {            s=(i - 3 * g) / i;          }          intensity.setValue(row,col,i);          hue.setValue(row,col,h);          saturation.setValue(row,col,s);        } else {          intensity.setValue(row,col,redNoData);          hue.setValue(row,col,redNoData);          saturation.setValue(row,col,redNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    intensity.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    intensity.addMetadataEntry("Created on " + new Date());    intensity.close();    hue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    hue.addMetadataEntry("Created on " + new Date());    hue.close();    saturation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    saturation.addMetadataEntry("Created on " + new Date());    saturation.close();    red.close();    green.close();    blue.close();    returnData(intensityHeader);    returnData(hueHeader);    returnData(saturationHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public List<HostStorageDomain> addHostStorageDomains(String systemId,List<HostStorageDomain> hostGroups,String model) throws Exception {  InputStream responseStream=null;  List<HostStorageDomain> hsdList=null;  try {    Map<String,Object> attributeMap=new HashMap<String,Object>();    StorageArray array=new StorageArray(systemId);    Add addOp=new Add(HDSConstants.HOST_STORAGE_DOMAIN);    attributeMap.put(HDSConstants.STORAGEARRAY,array);    attributeMap.put(HDSConstants.ADD,addOp);    attributeMap.put(HDSConstants.MODEL,model);    attributeMap.put(HDSConstants.HOSTGROUP_LIST,hostGroups);    String addHSDToSystemQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.BATCH_ADD_HSDS_TO_SYSTEM_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Batch query to create HostStorageDomains: {}",addHSDToSystemQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addHSDToSystemQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      hsdList=(List<HostStorageDomain>)javaResult.getBean(HDSConstants.HSD_RESPONSE_BEAN_ID);      if (null == hsdList || hsdList.isEmpty()) {        throw HDSException.exceptions.notAbleToAddHSD(systemId);      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to add HostStorageDomains due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream addHostStorageDomains");      }    }  }  return hsdList;}  }
class C{  public BitmapDrawer scaleRegistration(float regX,float regY){  setScaleRegistration(regX,regY);  return this;}  }
class C{  public static boolean isRuntimeModule(String module){  return module != null && RUNTIME_MODULES_PATTERN.matcher(module).matches();}  }
class C{  public static void outputResultTreeFragment(SerializationHandler handler,XObject obj,XPathContext support) throws org.xml.sax.SAXException {  int doc=obj.rtf();  DTM dtm=support.getDTM(doc);  if (null != dtm) {    for (int n=dtm.getFirstChild(doc); DTM.NULL != n; n=dtm.getNextSibling(n)) {      handler.flushPending();      if (dtm.getNodeType(n) == DTM.ELEMENT_NODE && dtm.getNamespaceURI(n) == null)       handler.startPrefixMapping("","");      dtm.dispatchToEvents(n,handler);    }  }}  }
class C{  public Enumeration entries(){  if (!isOpen())   return null;  return m_zipFile.entries();}  }
class C{  @Override public boolean rowUpdated() throws SQLException {  try {    debugCodeCall("rowUpdated");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void reConnect(String mac){}  }
class C{  protected String tmpname(){synchronized (OsLib.class) {    return TMP_PREFIX + (tmpnames++) + TMP_SUFFIX;  }}  }
class C{  public static void retrieve(String accountName,String deviceId,String deviceToken) throws IOException {  URL url=new URL("https://iotmms" + accountName + ".hanatrial.ondemand.com/com.sap.iotservices.mms/v1/api/http/data/"+ deviceId);  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  connection.setRequestProperty("Authorization","Bearer " + deviceToken);  InputStream inputStream=null;  if (connection.getResponseCode() >= 400) {    inputStream=connection.getErrorStream();  } else {    inputStream=connection.getInputStream();  }  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));  String line;  StringBuffer response=new StringBuffer();  while ((line=bufferedReader.readLine()) != null) {    response.append(line);    response.append('\r');  }  bufferedReader.close();  System.out.println(response.toString());}  }
class C{  private boolean updateCalculatedGoals(){  if (!MEASURETYPE_Calculated.equals(getMeasureType()))   return false;  MGoal[] goals=MGoal.getMeasureGoals(getCtx(),getPA_Measure_ID());  for (int i=0; i < goals.length; i++) {    MGoal goal=goals[i];    MRole role=null;    if (goal.getAD_Role_ID() != 0)     role=MRole.get(getCtx(),goal.getAD_Role_ID()); else     if (goal.getAD_User_ID() != 0) {      MUser user=MUser.get(getCtx(),goal.getAD_User_ID());      MRole[] roles=user.getRoles(goal.getAD_Org_ID());      if (roles.length > 0)       role=roles[0];    }    if (role == null)     role=MRole.getDefault(getCtx(),false);    MMeasureCalc mc=MMeasureCalc.get(getCtx(),getPA_MeasureCalc_ID());    if (mc == null || mc.get_ID() == 0 || mc.get_ID() != getPA_MeasureCalc_ID()) {      log.log(Level.SEVERE,"Not found PA_MeasureCalc_ID=" + getPA_MeasureCalc_ID());      return false;    }    String sql=mc.getSqlPI(goal.getRestrictions(false),goal.getMeasureScope(),getMeasureDataType(),null,role);    BigDecimal ManualActual=DB.getSQLValueBD(null,sql,new Object[]{});    if (ManualActual == null) {      ManualActual=Env.ZERO;      log.fine("No Value = " + sql);    }    goal.setMeasureActual(ManualActual);    goal.save(get_TrxName());  }  return true;}  }
class C{  public IKnowledge parseKnowledge(char[] chars){  CharArrayReader reader=new CharArrayReader(chars);  Lineizer lineizer=new Lineizer(reader,commentMarker);  IKnowledge knowledge=parseKnowledge(lineizer,delimiterType.getPattern());  this.logger.reset();  return knowledge;}  }
class C{  public MarkerAxisBand(NumberAxis axis,double topOuterGap,double topInnerGap,double bottomOuterGap,double bottomInnerGap,Font font){  this.axis=axis;  this.topOuterGap=topOuterGap;  this.topInnerGap=topInnerGap;  this.bottomOuterGap=bottomOuterGap;  this.bottomInnerGap=bottomInnerGap;  this.font=font;  this.markers=new java.util.ArrayList();}  }
class C{  public RefactoringHistoryEvent(final IRefactoringHistoryService service,final int type,final RefactoringDescriptorProxy proxy){  Assert.isNotNull(service);  Assert.isNotNull(proxy);  fService=service;  fType=type;  fProxy=proxy;}  }
class C{  public String toString(){  StringBuffer uriSpecString=new StringBuffer();  if (m_scheme != null) {    uriSpecString.append(m_scheme);    uriSpecString.append(':');  }  uriSpecString.append(getSchemeSpecificPart());  return uriSpecString.toString();}  }
class C{  public static boolean isComponent(Object object){  return object instanceof Component;}  }
class C{  public CertificateNotYetValidException(){  super();}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public String toString(){  return format(-1);}  }
class C{  @Override public boolean isObstacle(final Entity entity){  if (!(entity instanceof Player)) {    return super.isObstacle(entity);  }  final Player player=(Player)entity;  if (player.isGhost()) {    return false;  }  final Player occupant=getOccupant();  if (occupant != null) {    if (contains(occupant)) {      return ((entity != occupant) && !contains(entity));    }    LOGGER.warn("Occupant vanished: " + occupant.getName());    clearOccupant();  }  return false;}  }
class C{  private void movePlayer(final Point p,boolean doubleClick){  if (p.y <= height) {    final RPAction action=new RPAction();    action.put("type","moveto");    action.put("x",(p.x + xOffset) / scale);    action.put("y",(p.y + yOffset) / scale);    if (doubleClick) {      action.put("double_click","");    }    client.send(action);  }}  }
class C{  public Composite composite(){  return comp;}  }
class C{  public void clearPassword(String code){  ComponentName demoDeviceAdmin=new ComponentName(context,AgentDeviceAdminReceiver.class);  resultBuilder.build(code);  devicePolicyManager.setPasswordQuality(demoDeviceAdmin,DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);  devicePolicyManager.setPasswordMinimumLength(demoDeviceAdmin,DEFAULT_PASSWORD_LENGTH);  devicePolicyManager.resetPassword(resources.getString(R.string.shared_pref_default_string),DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);  devicePolicyManager.lockNow();  devicePolicyManager.setPasswordQuality(demoDeviceAdmin,DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);}  }
class C{  private void beforeKey() throws JSONException {  Scope context=peek();  if (context == Scope.NONEMPTY_OBJECT) {    out.append(',');  } else   if (context != Scope.EMPTY_OBJECT) {    throw new JSONException("Nesting problem");  }  newline();  replaceTop(Scope.DANGLING_KEY);}  }
class C{  public ObjectFactory(){}  }
class C{  public static String xmlStartDoc(){  return "<?xml version=\"1.0\"?>\n";}  }
class C{  public static IndexColumn[] wrap(Column[] columns){  IndexColumn[] list=new IndexColumn[columns.length];  for (int i=0; i < list.length; i++) {    list[i]=new IndexColumn();    list[i].column=columns[i];  }  return list;}  }
class C{  public static void addComponent(FaceletContext ctx,UIComponent parent,UIComponent child){  String facetName=getFacetName(parent);  if (facetName == null) {    if (child.getAttributes().containsKey(RIConstants.DYNAMIC_COMPONENT)) {      int childIndex=(Integer)child.getAttributes().get(RIConstants.DYNAMIC_COMPONENT);      if (childIndex >= parent.getChildCount() || childIndex == -1) {        parent.getChildren().add(child);      } else {        parent.getChildren().add(childIndex,child);      }    } else {      parent.getChildren().add(child);    }  } else {    UIComponent existing=parent.getFacets().get(facetName);    if (existing != null && existing != child) {      if (existing.getAttributes().get(ComponentSupport.IMPLICIT_PANEL) == null) {        UIComponent panelGroup=ctx.getFacesContext().getApplication().createComponent(UIPanel.COMPONENT_TYPE);        parent.getFacets().put(facetName,panelGroup);        Map<String,Object> attrs=panelGroup.getAttributes();        attrs.put(ComponentSupport.IMPLICIT_PANEL,true);        panelGroup.getChildren().add(existing);        existing=panelGroup;      }      if (existing.getAttributes().get(ComponentSupport.IMPLICIT_PANEL) != null) {        existing.getChildren().add(child);      } else {        parent.getFacets().put(facetName,child);      }    } else {      parent.getFacets().put(facetName,child);    }  }}  }
class C{  public static void delete(File file,boolean ignoreDir){  if (file == null || !file.exists()) {    return;  }  if (file.isFile()) {    file.delete();    return;  }  File[] fileList=file.listFiles();  if (fileList == null) {    return;  }  for (  File f : fileList) {    delete(f,ignoreDir);  }  if (!ignoreDir)   file.delete();}  }
class C{  public char[] toChars(){  char[] ch=new char[s.length()];  for (int i=0; i < s.length(); i++) {    ch[i]=s.charAt(i);  }  return ch;}  }
class C{  public boolean send(byte[] bytes){  if (!connected)   return false;  try {    outputStream.write(bytes);    outputStream.flush();    return true;  } catch (  IOException e) {    connected=false;    Log.e(TAG,"Fail to send data");    return false;  } finally {    if (!connected) {      closeConnection();    }  }}  }
class C{  public static String toString(byte[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public Chest2DView(){  openChanged=false;  requestOpen=false;}  }
class C{  public void applyToOr(TextView textView,ColorStateList colorDefault){  if (mColorInt != 0) {    textView.setTextColor(mColorInt);  } else   if (mColorRes != -1) {    textView.setTextColor(ContextCompat.getColor(textView.getContext(),mColorRes));  } else   if (colorDefault != null) {    textView.setTextColor(colorDefault);  }}  }
class C{  protected void doneInternal(){  if (states.size() > 0)   throw new JsonWriterException("Unclosed JSON objects and/or arrays when closing writer");  if (first)   throw new JsonWriterException("Nothing was written to the JSON writer");}  }
class C{  public void destroySubcontext(Name name) throws NamingException {  checkIsDestroyed();  Name parsedName=getParsedName(name);  if (parsedName.size() == 0 || parsedName.get(0).length() == 0) {    throw new InvalidNameException(LocalizedStrings.ContextImpl_NAME_CAN_NOT_BE_EMPTY.toLocalizedString());  }  String subContextName=parsedName.get(0);  Object boundObject=ctxMaps.get(subContextName);  if (boundObject == null) {    throw new NameNotFoundException(LocalizedStrings.ContextImpl_NAME_0_NOT_FOUND_IN_THE_CONTEXT.toLocalizedString(subContextName));  }  if (!(boundObject instanceof ContextImpl)) {    throw new NotContextException();  }  ContextImpl contextToDestroy=(ContextImpl)boundObject;  if (parsedName.size() == 1) {    if (contextToDestroy.ctxMaps.size() == 0) {      ctxMaps.remove(subContextName);      contextToDestroy.destroyInternal();    } else {      throw new ContextNotEmptyException(LocalizedStrings.ContextImpl_CAN_NOT_DESTROY_NONEMPTY_CONTEXT.toLocalizedString());    }  } else {    ((ContextImpl)boundObject).destroySubcontext(parsedName.getSuffix(1));  }}  }
class C{  public synchronized void reopen(int _log) throws IOException {  Log oldlog=(Log)logs.elementAt(_log);  logs.setElementAt(oldlog.reopen(),_log);}  }
class C{  private Object readLiteral() throws JSONException {  String literal=nextToInternal("{}[]/\\:,=;# \t\f");  if (literal.length() == 0) {    throw syntaxError("Expected literal value");  } else   if ("null".equalsIgnoreCase(literal)) {    return JSONObject.NULL;  } else   if ("true".equalsIgnoreCase(literal)) {    return Boolean.TRUE;  } else   if ("false".equalsIgnoreCase(literal)) {    return Boolean.FALSE;  }  if (literal.indexOf('.') == -1) {    int base=10;    String number=literal;    if (number.startsWith("0x") || number.startsWith("0X")) {      number=number.substring(2);      base=16;    } else     if (number.startsWith("0") && number.length() > 1) {      number=number.substring(1);      base=8;    }    try {      long longValue=Long.parseLong(number,base);      if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {        return (int)longValue;      } else {        return longValue;      }    } catch (    NumberFormatException e) {    }  }  try {    return Double.valueOf(literal);  } catch (  NumberFormatException ignored) {  }  return new String(literal);}  }
class C{  public DeviceAutomator onHomeScreen(){  return onHomeScreen(5000);}  }
class C{  public void run(){  log.info("IdentServer running on port " + serverSocket.getLocalPort());  while (!serverSocket.isClosed()) {    Socket socket=null;    try {      socket=serverSocket.accept();      BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),encoding));      OutputStreamWriter writer=new OutputStreamWriter(socket.getOutputStream(),encoding);      InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();      String line=reader.readLine();      String response=handleNextConnection(remoteAddress,line);      if (response != null) {        writer.write(response);        writer.flush();      }    } catch (    Exception e) {      if (serverSocket.isClosed()) {        log.debug("Server socket closed, exiting connection loop");        return;      } else       throw new RuntimeException("Exception encountered when opening user socket",e);    } finally {      try {        if (socket != null)         socket.close();      } catch (      IOException e) {        throw new RuntimeException("Exception encountered when closing user socket",e);      }    }  }  if (!serverSocket.isClosed())   try {    close();  } catch (  IOException e) {    log.error("Cannot close IdentServer socket",e);  }}  }
class C{  public TwitchApiRequest(TwitchApi origin,RequestType type,String url,String token){  this.url=url;  this.origin=origin;  this.type=type;  this.token=token;}  }
class C{  public void test_ticket_bg1899_h() throws Exception {  new TestHelper("ticket_bg1899h","ticket_bg1899h.rq","ticket_bg1899h.n3","ticket_bg1899h.srx").runTest();}  }
class C{  private static int _token_sort(String s1,String s2,Boolean partial,Boolean force_ascii){  if (partial == null) {    partial=true;  }  if (force_ascii == null) {    force_ascii=true;  }  x.assertNotNull(s1,"s1 is null");  x.assertNotNull(s2,"s2 is null");  String sorted1=_process_and_sort(s1,force_ascii);  String sorted2=_process_and_sort(s2,force_ascii);  if (partial)   return partial_ratio(sorted1,sorted2); else   return ratio(sorted1,sorted2);}  }
class C{  public int size(){  return messages.size();}  }
class C{  String removeFromPlaylist(int index){  return "invalid.index: " + index;}  }
class C{  static void tick(){  if (Timings.isTimingsEnabled()) {    boolean violated=Timings.fullServerTickTimer.isViolated();    for (    Timing timing : TIMINGS) {      if (timing.isSpecial()) {        continue;      }      timing.tick(violated);    }    TimingsHistory.playerTicks+=Server.getInstance().getOnlinePlayers().size();    TimingsHistory.timedTicks++;  }}  }
class C{  public void migrateVirtualVolume(URI vplexURI,URI virtualVolumeURI,URI targetVolumeURI,URI migrationURI,URI newNhURI,String stepId) throws WorkflowException {  _log.info("Migration {} using target {}",migrationURI,targetVolumeURI);  try {    WorkflowStepCompleter.stepExecuting(stepId);    _workflowService.storeStepData(stepId,Boolean.FALSE);    Volume virtualVolume=getDataObject(Volume.class,virtualVolumeURI,_dbClient);    String virtualVolumeName=virtualVolume.getDeviceLabel();    _log.info("Virtual volume name is {}",virtualVolumeName);    Volume migrationTarget=getDataObject(Volume.class,targetVolumeURI,_dbClient);    StorageSystem targetStorageSystem=getDataObject(StorageSystem.class,migrationTarget.getStorageController(),_dbClient);    _log.info("Storage system for migration target is {}",migrationTarget.getStorageController());    List<String> itls=VPlexControllerUtils.getVolumeITLs(migrationTarget);    VolumeInfo nativeVolumeInfo=new VolumeInfo(targetStorageSystem.getNativeGuid(),targetStorageSystem.getSystemType(),migrationTarget.getWWN().toUpperCase().replaceAll(":",""),migrationTarget.getNativeId(),migrationTarget.getThinlyProvisioned().booleanValue(),itls);    Migration migration=getDataObject(Migration.class,migrationURI,_dbClient);    StringBuilder migrationNameBuilder=new StringBuilder(MIGRATION_NAME_PREFIX);    DateFormat dateFormatter=new SimpleDateFormat(MIGRATION_NAME_DATE_FORMAT);    migrationNameBuilder.append(dateFormatter.format(new Date()));    String migrationName=migrationNameBuilder.toString();    migration.setLabel(migrationName);    _dbClient.updateObject(migration);    _log.info("Migration name is {}",migrationName);    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);    _log.info("Got VPlex API client for VPlex {}",vplexURI);    String speed=customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.MIGRATION_SPEED,vplexSystem.getSystemType(),null);    _log.info("Migration speed is {}",speed);    String transferSize=migrationSpeedToTransferSizeMap.get(speed);    Boolean isRemoteMigration=newNhURI != null;    Boolean useDeviceMigration=migration.getSource() == null;    List<VPlexMigrationInfo> migrationInfoList=client.migrateVirtualVolume(migrationName,virtualVolumeName,Arrays.asList(nativeVolumeInfo),isRemoteMigration,useDeviceMigration,true,true,transferSize);    _log.info("Started VPlex migration");    _workflowService.storeStepData(stepId,Boolean.TRUE);    VPlexMigrationInfo migrationInfo=migrationInfoList.get(0);    migration.setMigrationStatus(VPlexMigrationInfo.MigrationStatus.READY.getStatusValue());    migration.setPercentDone("0");    migration.setStartTime(migrationInfo.getStartTime());    _dbClient.updateObject(migration);    _log.info("Update migration info");    MigrationTaskCompleter migrationCompleter=new MigrationTaskCompleter(migrationURI,stepId);    VPlexMigrationJob migrationJob=new VPlexMigrationJob(migrationCompleter);    ControllerServiceImpl.enqueueJob(new QueueJob(migrationJob));    _log.info("Queued job to monitor migration progress.");  } catch (  VPlexApiException vae) {    _log.error("Exception migrating VPlex virtual volume: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception migrating VPlex virtual volume: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.MIGRATE_VIRTUAL_VOLUME.getName();    ServiceError serviceError=VPlexApiException.errors.migrateVirtualVolume(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public Map<String,String> convert(Map<String,List<Integer>> lineCoverage){  Map<String,String> results=new HashMap<String,String>();  for (  Map.Entry<String,List<Integer>> entry : lineCoverage.entrySet()) {    results.put(entry.getKey(),convertFileCoverage(entry.getValue()));  }  return results;}  }
class C{  public static DbException wrapException(String sql,Exception ex){  SQLException e=DbException.toSQLException(ex);  return DbException.get(ErrorCode.ERROR_ACCESSING_LINKED_TABLE_2,e,sql,e.toString());}  }
class C{  void doSparqlQuery(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (!isReadable(getServletContext(),req,resp)) {    return;  }  final String queryStr=getQueryString(req);  if (queryStr == null) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Not found: query");    return;  }  final Map<String,Value> bindings=parseBindings(req,resp);  if (bindings == null) {    return;  }  final boolean includeInferred=getBooleanValue(req,INCLUDE_INFERRED,true);  try {    final String namespace=getNamespace(req);    final long timestamp=getTimestamp(req);    submitApiTask(new SparqlQueryTask(req,resp,namespace,timestamp,queryStr,includeInferred,bindings,getBigdataRDFContext())).get();  } catch (  Throwable t) {    launderThrowable(t,resp,"SPARQL-QUERY: queryStr=" + queryStr);  }}  }
class C{  public void testRemoveWorstPlans_nullType(){  PlanSelector<Plan,Person> selector=getPlanSelector();  Person person=PopulationUtils.getFactory().createPerson(Id.create(1,Person.class));  Plan plan1=PopulationUtils.createPlan(person);  plan1.setScore(15.0);  Plan plan2=PopulationUtils.createPlan(person);  plan2.setScore(22.0);  Plan plan3=PopulationUtils.createPlan(person);  Plan plan4=PopulationUtils.createPlan(person);  plan4.setScore(1.0);  Plan plan5=PopulationUtils.createPlan(person);  plan5.setScore(18.0);  person.addPlan(plan1);  person.addPlan(plan2);  person.addPlan(plan3);  person.addPlan(plan4);  person.addPlan(plan5);  assertEquals("test we have all plans we want",5,person.getPlans().size());  person.getPlans().remove(selector.selectPlan(person));  assertEquals("test that a plan was removed",4,person.getPlans().size());  assertFalse("test that plan with undefined score was removed.",person.getPlans().contains(plan3));  person.getPlans().remove(selector.selectPlan(person));  assertEquals("test that a plan was removed",3,person.getPlans().size());  assertFalse("test that the plan with minimal score was removed",person.getPlans().contains(plan4));  person.getPlans().remove(selector.selectPlan(person));  person.getPlans().remove(selector.selectPlan(person));  assertEquals("test that two plans were removed",1,person.getPlans().size());  assertTrue("test that the plan left has highest score",person.getPlans().contains(plan2));}  }
class C{  public CharSetMap(Properties props){  this();  mappers[MAP_PROG]=new HashMap(props);}  }
class C{  @Override public boolean test(final Array params){  for (int i=0; i < params.size(); i++) {    if ((params.get(i) < low) || (params.get(i) > high)) {      return false;    }  }  return true;}  }
class C{  public static boolean equals(int[] a,int[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length) {    return false;  }  for (int i=0; i < length; i++) {    if (a[i] != a2[i])     return false;  }  return true;}  }
class C{  public static ShortRange fixed(int num){  return new ShortRange(num,num);}  }
class C{  public void onReqMarketData(Contract contract,String genericTicklist,boolean snapshot) throws BrokerModelException {  try {    if (m_client.isConnected()) {      if (this.isMarketDataRunning(contract)) {        throw new BrokerModelException(contract.getId(),3030,"MarketData request is already in progress for: " + contract.getSymbol() + " Please wait or cancel.");      }      List<TagValue> mktDataOptions=new ArrayList<TagValue>();      m_marketDataRequests.put(contract.getId(),contract);      m_client.reqMktData(contract.getId(),TWSBrokerModel.getIBContract(contract),genericTicklist,snapshot,mktDataOptions);    } else {      throw new BrokerModelException(contract.getId(),3040,"Not conected to TWS market data cannot be retrieved");    }  } catch (  Exception ex) {    throw new BrokerModelException(contract.getId(),3050,"Error broker data Symbol: " + contract.getSymbol() + " Msg: "+ ex.getMessage());  }}  }
class C{  protected String generateJavadoc(int index) throws Exception {  String result;  Method method;  result="";  if (index == 0) {    if (!canInstantiateClass())     return result;    try {      method=getInstance().getClass().getMethod(GLOBALINFO_METHOD,(Class[])null);    } catch (    Exception e) {      return result;    }    result=toHTML((String)method.invoke(getInstance(),(Object[])null));    result=result.trim() + "\n<p/>\n";    if (getUseStars())     result=indent(result,1,"* ");  }  return result;}  }
class C{  public static void deleteContents(File dir) throws IOException {  File[] files=dir.listFiles();  if (files != null) {    for (    File file : files) {      if (file.isDirectory()) {        deleteContents(file);      }      file.delete();    }  }}  }
class C{  public static IntBuffer createIntBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 4);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asIntBuffer();}  }
class C{  public boolean isConnected(){  return mSocketState == SocketState.CONNECTED;}  }
class C{  public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){  super(valueType,name);  char firstLetter=Character.toUpperCase(name.charAt(0));  String theRest=name.substring(1);  String capitalizedName=firstLetter + theRest;  String getterName=PREFIX_GET + capitalizedName;  try {    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);  } catch (  NoSuchMethodException e) {    try {      mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);      mGetter.setAccessible(true);    } catch (    NoSuchMethodException e2) {      getterName=PREFIX_IS + capitalizedName;      try {        mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);      } catch (      NoSuchMethodException e3) {        try {          mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);          mGetter.setAccessible(true);        } catch (        NoSuchMethodException e4) {          try {            mField=propertyHolder.getField(name);            Class fieldType=mField.getType();            if (!typesMatch(valueType,fieldType)) {              throw new NoSuchPropertyException("Underlying type (" + fieldType + ") "+ "does not match Property type ("+ valueType+ ")");            }            return;          } catch (          NoSuchFieldException e5) {            throw new NoSuchPropertyException("No accessor method or field found for" + " property with name " + name);          }        }      }    }  }  Class getterType=mGetter.getReturnType();  if (!typesMatch(valueType,getterType)) {    throw new NoSuchPropertyException("Underlying type (" + getterType + ") "+ "does not match Property type ("+ valueType+ ")");  }  String setterName=PREFIX_SET + capitalizedName;  try {    mSetter=propertyHolder.getDeclaredMethod(setterName,getterType);    mSetter.setAccessible(true);  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  public void basicRemoveAll(Collection<? extends Figure> figures){  for (  Figure f : figures) {    basicRemove(f);  }}  }
class C{  @Deprecated @Override public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  public synchronized void sync(){  if (readOnly) {    return;  }  if (mvStore != null) {    mvStore.sync();  }  if (pageStore != null) {    pageStore.sync();  }}  }
class C{  public static List<org.oscm.internal.vo.VORoleDefinition> convertToUpVORoleDefinition(List<org.oscm.vo.VORoleDefinition> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VORoleDefinition> newVO=new ArrayList<org.oscm.internal.vo.VORoleDefinition>();  for (  org.oscm.vo.VORoleDefinition tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public static void error(final ErrorType type,final String... params){  if (type != null && type.getNumberOfParameters() == params.length) {    final ErrorEvent event=new ErrorEvent(type,params);    userLog(event.getMessage());    notifyAll(event);  }}  }
class C{  protected String predictionsToString(ArrayList<Prediction> predictions){  StringBuffer sb=new StringBuffer();  sb.append(predictions.size()).append(" predictions\n");  for (int i=0; i < predictions.size(); i++) {    sb.append(predictions.get(i)).append('\n');  }  return sb.toString();}  }
class C{  public int code(){  return code;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  initializeDownloadUI();  if (!expansionFilesDelivered()) {    try {      Intent launchIntent=SampleDownloaderActivity.this.getIntent();      Intent intentToLaunchThisActivityFromNotification=new Intent(SampleDownloaderActivity.this,SampleDownloaderActivity.this.getClass());      intentToLaunchThisActivityFromNotification.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);      intentToLaunchThisActivityFromNotification.setAction(launchIntent.getAction());      if (launchIntent.getCategories() != null) {        for (        String category : launchIntent.getCategories()) {          intentToLaunchThisActivityFromNotification.addCategory(category);        }      }      PendingIntent pendingIntent=PendingIntent.getActivity(SampleDownloaderActivity.this,0,intentToLaunchThisActivityFromNotification,PendingIntent.FLAG_UPDATE_CURRENT);      int startResult=DownloaderClientMarshaller.startDownloadServiceIfRequired(this,pendingIntent,SampleDownloaderService.class);      if (startResult != DownloaderClientMarshaller.NO_DOWNLOAD_REQUIRED) {        initializeDownloadUI();        return;      }    } catch (    NameNotFoundException e) {      Log.e(LOG_TAG,"Cannot find own package! MAYDAY!");      e.printStackTrace();    }  } else {    validateXAPKZipFiles();  }}  }
class C{  public void clearCache(){}  }
class C{  public void delete(ForumPostConfig config){  config.addCredentials(this);  POST(this.url + "/delete-forum-post",config.toXML());}  }
class C{  public static void addChemicalOxidizerRecipe(ItemStack input,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalOxidizerRecipe",ItemStack.class,GasStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public boolean isRare(){  return getAIProfiles().containsKey("rare");}  }
class C{  private Set<Map<String,VariableDefinition>> handleMethodCallNodeChild(CCFGMethodCallNode callNode,Set<Map<String,VariableDefinition>> activeDefs,Set<BytecodeInstruction> freeUses,Set<DefUseCoverageTestFitness> foundPairs,Stack<MethodCall> callStack,CCFGMethodEntryNode investigatedMethod){  MethodCall call=MethodCall.constructForCallNode(callNode);  activeDefs=useStoredInformationForMethodCall(investigatedMethod,callNode,activeDefs,freeUses,foundPairs,call);  updateCallStackForCall(callStack,call);  return activeDefs;}  }
class C{  @Override public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){  this.rangeAxis.zoomRange(lowerPercent,upperPercent);}  }
class C{  public Iterator<WeakReference<V>> iterator(){  return map.values().iterator();}  }
class C{  public void test_read$BII() throws IOException {  int bytesRead;  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  byte[] rbuf=new byte[4000];  FileOutputStream fos=new java.io.FileOutputStream(fileName);  fos.write(testString.getBytes(),0,testLength);  fos.close();  bytesRead=raf.read(rbuf,10,testLength / 2);  assertEquals("Test 1: Incorrect number of bytes read. ",testLength / 2,bytesRead);  assertEquals("Test 2: Incorrect bytes read. ",testString.substring(0,testLength / 2),new String(rbuf,10,testLength / 2));  bytesRead=raf.read(rbuf,0,testLength);  assertEquals("Test 3: Incorrect number of bytes read. ",testLength - (testLength / 2),bytesRead);  assertEquals("Test 4: Incorrect bytes read. ",testString.substring(testLength / 2,(testLength / 2) + bytesRead),new String(rbuf,0,bytesRead));  bytesRead=raf.read(rbuf,0,1);  assertTrue("Test 5: EOF (-1) expected. ",bytesRead == -1);  try {    raf.read(rbuf,-1,1);    fail("Test 6: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    raf.read(rbuf,0,-1);    fail("Test 7: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    raf.read(rbuf,2000,2001);    fail("Test 8: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  raf.close();  try {    bytesRead=raf.read(rbuf,0,1);    fail("Test 9: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  private void addToMarker(LatLong endPoint){  MapHandler.getMapHandler().addEndMarker(endPoint);}  }
class C{  public static boolean isRightClick(MouseEvent e){  boolean result;  result=false;  if ((e.getButton() == MouseEvent.BUTTON3) && (e.getClickCount() == 1))   result=true; else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && !e.isShiftDown()&& !e.isControlDown())   result=true;  return result;}  }
class C{  public long serviceInit(long memPtr) throws IgniteCheckedException {  enter();  try {    return PlatformCallbackUtils.serviceInit(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public static boolean isMetaEndOfTrack(MidiMessage midiMsg){  if (midiMsg.getLength() != 3 || midiMsg.getStatus() != MetaMessage.META) {    return false;  }  byte[] msg=midiMsg.getMessage();  return ((msg[1] & 0xFF) == META_END_OF_TRACK_TYPE) && (msg[2] == 0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.785 -0500",hash_original_method="109E9B4E15544A79F6C06A99B1C7962C",hash_generated_method="F8A29B37E60DA9F012391F770E71A270") public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  result.append(in.droidsafeRead());  return result.toString();}  }
class C{  @Override protected void onMethodEnter(){  Type type=Type.getType(ResolveClassController.class);  Method method=new Method("onResolveClass","(Ljava/io/ObjectStreamClass;)V");  loadArg(0);  invokeStatic(type,method);}  }
class C{  public final double distanceSquared(IMovingAgent agent){  return location.distanceSquared(agent.getLocation());}  }
class C{  synchronized void cancel(){  if (HttpLog.LOGV) {    HttpLog.v("Request.cancel(): " + getUri());  }  mLoadingPaused=false;  notify();  mCancelled=true;  if (mConnection != null) {    mConnection.cancel();  }}  }
class C{  static boolean exists(String name){  if (FileUtils.exists(name + Constants.SUFFIX_PAGE_FILE)) {    return true;  }  return FileUtils.exists(name + Constants.SUFFIX_MV_FILE);}  }
class C{  @Override public List<JToolBar> createToolBars(Application app,@Nullable View p){  return Collections.emptyList();}  }
class C{  public JSONObject(Object bean){  this();  populateMap(bean);}  }
class C{  protected boolean isEqualKey(AbstractHashedMap.HashEntry entry,Object key1,Object key2,Object key3,Object key4){  MultiKey multi=(MultiKey)entry.getKey();  return multi.size() == 4 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) && (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2))) && (key4 == null ? multi.getKey(3) == null : key4.equals(multi.getKey(3)));}  }
class C{  private static int min(int a,int b,int c){  return a <= b ? (a <= c ? a : c) : (b <= c ? b : c);}  }
class C{  public String typeName(){  return "string";}  }
class C{  public static void removeArchive(String sourcePath,String destPath,ConsolFun consolFun,int steps) throws IOException {  if (Util.sameFilePath(sourcePath,destPath)) {    throw new IllegalArgumentException(SOURCE_AND_DESTINATION_PATHS_ARE_THE_SAME);  }  RrdDb rrdSource=new RrdDb(sourcePath);  try {    RrdDef rrdDef=rrdSource.getRrdDef();    rrdDef.setPath(destPath);    rrdDef.removeArchive(consolFun,steps);    RrdDb rrdDest=new RrdDb(rrdDef);    try {      rrdSource.copyStateTo(rrdDest);    }  finally {      rrdDest.close();    }  }  finally {    rrdSource.close();  }}  }
class C{  public synchronized void centerViewPort(final float[] transformedPts,final View view){  Matrix save=new Matrix();  save.set(mMatrixTouch);  final float x=transformedPts[0] - offsetLeft();  final float y=transformedPts[1] - offsetTop();  save.postTranslate(-x,-y);  refresh(save,view,false);}  }
class C{  public synchronized boolean markPending(){  if (!pending) {    pending=true;    return true;  }  return false;}  }
class C{  private boolean hasDate(){  return getDate() != null;}  }
class C{  public LinkedHashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor,true);}  }
class C{  void dispose(){}  }
class C{  void appletInfo(){  String str=panel.applet.getAppletInfo();  if (str == null) {    str=amh.getMessage("appletinfo.applet");  }  str+="\n\n";  String atts[][]=panel.applet.getParameterInfo();  if (atts != null) {    for (int i=0; i < atts.length; i++) {      str+=atts[i][0] + " -- " + atts[i][1]+ " -- "+ atts[i][2]+ "\n";    }  } else {    str+=amh.getMessage("appletinfo.param");  }  Point p=location();  new TextFrame(p.x + XDELTA,p.y + YDELTA,amh.getMessage("appletinfo.textframe"),str);}  }
class C{  private static Date parseDate(String string){  try {    return new SimpleDateFormat(ISO_8601_DATE_FORMAT).parse(string);  } catch (  ParseException e) {    return null;  }}  }
class C{  public boolean isSetAnnotation_type(){  return this.annotation_type != null;}  }
class C{  public Setting(String key,String value){  this.key=key;  this.value=value;}  }
class C{  public static boolean isPubid(int c){  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;}  }
class C{  Frame loadNextFrame(Frame top,Frame frame) throws IOException {  if (!canRewind(frame)) {    return null;  }  while (!frame.arc.isLast()) {    frame.arc=fst.readNextRealArc(frame.arc,fstReader);    frame.state=fsa.step(top.state,frame.arc.label);    if (frame.state != -1) {      break;    }  }  if (frame.state == -1) {    return null;  }  return frame;}  }
class C{  public double smooth(DoubleMatrix1D parIn,DoubleMatrix1D gradOutVec){  MGMParams par=new MGMParams(parIn,p,lsum);  MGMParams gradOut=new MGMParams();  for (int i=0; i < par.betad.size(); i++) {    if (par.betad.get(i) < 0)     return Double.POSITIVE_INFINITY;  }  upperTri(par.beta,1);  par.beta.assign(alg.transpose(par.beta),Functions.plus);  for (int i=0; i < q; i++) {    par.phi.viewPart(lcumsum[i],lcumsum[i],l[i],l[i]).assign(0);  }  upperTri(par.phi,0);  par.phi.assign(alg.transpose(par.phi),Functions.plus);  DoubleMatrix2D divBetaD=factory2D.diagonal(factory1D.make(p,1.0).assign(par.betad,Functions.div));  DoubleMatrix2D xBeta=alg.mult(xDat,alg.mult(par.beta,divBetaD));  DoubleMatrix2D dTheta=alg.mult(alg.mult(dDat,par.theta),divBetaD);  DoubleMatrix2D tempLoss=factory2D.make(n,xDat.columns());  DoubleMatrix2D wxProd=alg.mult(xDat,alg.transpose(par.theta));  wxProd.assign(alg.mult(dDat,par.phi),Functions.plus);  for (int i=0; i < n; i++) {    for (int j=0; j < xDat.columns(); j++) {      tempLoss.set(i,j,xDat.get(i,j) - par.alpha1.get(j) - xBeta.get(i,j)- dTheta.get(i,j));    }    for (int j=0; j < dDat.columns(); j++) {      wxProd.set(i,j,wxProd.get(i,j) + par.alpha2.get(j));    }  }  double sqloss=-n / 2.0 * par.betad.copy().assign(Functions.log).zSum() + .5 * Math.pow(alg.normF(alg.mult(tempLoss,factory2D.diagonal(par.betad.copy().assign(Functions.sqrt)))),2);  tempLoss.assign(Functions.mult(-1));  gradOut.beta=alg.mult(alg.transpose(xDat),tempLoss);  DoubleMatrix2D lowerBeta=alg.transpose(lowerTri(gradOut.beta.copy(),-1));  upperTri(gradOut.beta,1).assign(lowerBeta,Functions.plus);  gradOut.alpha1=alg.mult(factory2D.diagonal(par.betad),margSum(tempLoss,1));  gradOut.theta=alg.mult(alg.transpose(dDat),tempLoss);  double catloss=0;  for (int i=0; i < yDat.columns(); i++) {    DoubleMatrix2D wxTemp=wxProd.viewPart(0,lcumsum[i],n,l[i]);    DoubleMatrix2D wxTemp0=wxTemp.copy();    wxTemp.assign(Functions.exp);    DoubleMatrix1D invDenom=factory1D.make(n,1.0).assign(margSum(wxTemp,2),Functions.div);    wxTemp.assign(alg.mult(factory2D.diagonal(invDenom),wxTemp));    for (int k=0; k < n; k++) {      DoubleMatrix1D curRow=wxTemp.viewRow(k);      DoubleMatrix1D curRow0=wxTemp0.viewRow(k);      catloss-=curRow0.get((int)yDat.get(k,i) - 1);      catloss+=logsumexp(curRow0);      curRow.set((int)yDat.get(k,i) - 1,curRow.get((int)yDat.get(k,i) - 1) - 1);    }  }  gradOut.alpha2=margSum(wxProd,1);  DoubleMatrix2D gradW=alg.mult(alg.transpose(xDat),wxProd);  gradOut.theta.assign(alg.transpose(gradW),Functions.plus);  gradOut.phi=alg.mult(alg.transpose(dDat),wxProd);  for (int i=0; i < q; i++) {    gradOut.phi.viewPart(lcumsum[i],lcumsum[i],l[i],l[i]).assign(0);  }  DoubleMatrix2D lowerPhi=alg.transpose(lowerTri(gradOut.phi.copy(),0));  upperTri(gradOut.phi,0).assign(lowerPhi,Functions.plus);  gradOut.betad=factory1D.make(xDat.columns());  for (int i=0; i < p; i++) {    gradOut.betad.set(i,-n / (2.0 * par.betad.get(i)) + alg.norm2(tempLoss.viewColumn(i)) / 2.0 - alg.mult(tempLoss.viewColumn(i),xBeta.viewColumn(i).copy().assign(dTheta.viewColumn(i),Functions.plus)));  }  gradOut.alpha1.assign(Functions.div((double)n));  gradOut.alpha2.assign(Functions.div((double)n));  gradOut.betad.assign(Functions.div((double)n));  gradOut.beta.assign(Functions.div((double)n));  gradOut.theta.assign(Functions.div((double)n));  gradOut.phi.assign(Functions.div((double)n));  gradOutVec.assign(gradOut.toMatrix1D());  return (sqloss + catloss) / ((double)n);}  }
class C{  private double fixToRange(double x,double minX,double maxX){  if (minX > maxX) {    throw new IllegalArgumentException("Requires 'minX' <= 'maxX'.");  }  if (x < minX) {    return minX;  } else   if (x > maxX) {    return maxX;  } else {    return x;  }}  }
class C{  public final List append1(Object value){  ConsCell cell=this.first;  if (cell == null)   return new List(value);  List newList=new List(cell.value);  cell=cell.next;  while (cell != null) {    ConsCell newCell=new ConsCell(cell.value,null);    newList.last.next=newCell;    newList.last=newCell;    cell=cell.next;  }  ConsCell newCell=new ConsCell(value,null);  newList.last.next=newCell;  newList.last=newCell;  return newList;}  }
class C{  public final CC span(int... cells){  if (cells == null || cells.length == 0) {    setSpanX(LayoutUtil.INF);    setSpanY(1);  } else   if (cells.length == 1) {    setSpanX(cells[0]);    setSpanY(1);  } else {    setSpanX(cells[0]);    setSpanY(cells[1]);  }  return this;}  }
class C{  public boolean systemShouldAdvance(){  return !isAtRest() || !wasAtRest();}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(){  return (ImmutableRangeMap<K,V>)EMPTY;}  }
class C{  public static boolean isNotEmpty(Object[] array){  return (array != null && array.length != 0);}  }
class C{  static synchronized void reset(){  caches.clear();}  }
class C{  protected final void checkStateOfPartitioner(DocumentPartitioner partitioner,String partitioning){}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  public static final void drawVerticalText(Graphics graphics,String text,int x,int y,boolean upToDown){  try {    if (SWT.getPlatform().startsWith("rap"))     throw new Exception();    try {      graphics.pushState();      graphics.translate(x,y);      if (upToDown) {        graphics.rotate(90);        graphics.drawText(text,0,-FigureUtilities.getTextExtents(text,graphics.getFont()).height);      } else {        graphics.rotate(270);        graphics.drawText(text,-FigureUtilities.getTextWidth(text,graphics.getFont()),0);      }    }  finally {      graphics.popState();    }  } catch (  Exception e) {    Image image=null;    try {      image=SingleSourceHelper.createVerticalTextImage(text,graphics.getFont(),graphics.getForegroundColor().getRGB(),upToDown);      graphics.drawImage(image,x,y);    }  finally {      if (image != null)       image.dispose();    }  }}  }
class C{  private void validateWill(String dest,Object payload){  if ((dest == null) || (payload == null)) {    throw new IllegalArgumentException();  }  MqttAsyncClient.validateTopic(dest);}  }
class C{  public void updateMethod(RVMMethod m){  if (VM.VerifyAssertions)   VM._assert(isResolved());  if (VM.VerifyAssertions)   VM._assert(m.getDeclaringClass() == this);  if (m.isClassInitializer())   return;  if (m.isStatic() || m.isObjectInitializer()) {    updateJTOCEntry(m);  } else {    updateVirtualMethod(m);    if (m.getDeclaringClass().isJavaLangObjectType()) {      RVMType.updateArrayMethods(m);    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public Long zremrangeByScore(final byte[] key,final double start,final double end){  return zremrangeByScore(key,toByteArray(start),toByteArray(end));}  }
class C{  @SuppressLint("InlinedApi") private void createCameraSource(boolean autoFocus,boolean useFlash){  Context context=getApplicationContext();}  }
class C{  private void unregisterChildListeners(){  Iterator<PropertyChangeListener> iter=fChildListeners.iterator();  while (iter.hasNext()) {    PropertyChangeListener listener=iter.next();    listener.unregister();  }}  }
class C{  private static AbstractMessage receiveMsgProto(){  try {    int msgType=din.readUnsignedByte();    if (msgType == MsgType.REGISTRATION_RESP) {      RegistrationResp regResp=RegistrationResp.parseDelimitedFrom(din);      if (!regResp.hasInitEpoch() || !regResp.hasEpochInterval()) {        Logging.error("Malformed registration response");      } else {        return regResp;      }    } else     if (msgType == MsgType.AUTH_PATH) {      AuthPath authPath=AuthPath.parseDelimitedFrom(din);      if (!authPath.hasLeaf() || !authPath.hasRoot()) {        Logging.error("Malformed auth path");      } else {        return authPath;      }    } else     if (msgType == MsgType.COMMITMENT) {      Commitment comm=Commitment.parseDelimitedFrom(din);      if (!comm.hasEpoch() || !comm.hasRootHash()) {        Logging.error("Malformed commitment");      } else {        return comm;      }    } else     if (msgType == MsgType.SERVER_RESP) {      ServerResp resp=ServerResp.parseDelimitedFrom(din);      if (!resp.hasMessage()) {        Logging.error("Malformed simple server response");      } else {        return resp;      }    }  } catch (  InvalidProtocolBufferException e) {    Logging.error("parsing proto msg: " + e.getMessage());  }catch (  IOException e) {    Logging.error("receiving data from the server: " + e.getMessage());  } finally {    CommonMessaging.close(din);  }  return null;}  }
class C{  void insert(DynamicAABBTreeNode item){  if (this.root == null) {    this.root=item;    return;  }  AABB itemAABB=item.aabb;  DynamicAABBTreeNode node=this.root;  while (!node.isLeaf()) {    AABB aabb=node.aabb;    double perimeter=aabb.getPerimeter();    AABB union=aabb.getUnion(itemAABB);    double unionPerimeter=union.getPerimeter();    double cost=2 * unionPerimeter;    double descendCost=2 * (unionPerimeter - perimeter);    DynamicAABBTreeNode left=node.left;    DynamicAABBTreeNode right=node.right;    double costl=0.0;    if (left.isLeaf()) {      AABB u=left.aabb.getUnion(itemAABB);      costl=u.getPerimeter() + descendCost;    } else {      AABB u=left.aabb.getUnion(itemAABB);      double oldPerimeter=left.aabb.getPerimeter();      double newPerimeter=u.getPerimeter();      costl=newPerimeter - oldPerimeter + descendCost;    }    double costr=0.0;    if (right.isLeaf()) {      AABB u=right.aabb.getUnion(itemAABB);      costr=u.getPerimeter() + descendCost;    } else {      AABB u=right.aabb.getUnion(itemAABB);      double oldPerimeter=right.aabb.getPerimeter();      double newPerimeter=u.getPerimeter();      costr=newPerimeter - oldPerimeter + descendCost;    }    if (cost < costl && cost < costr) {      break;    }    if (costl < costr) {      node=left;    } else {      node=right;    }  }  DynamicAABBTreeNode parent=node.parent;  DynamicAABBTreeNode newParent=new DynamicAABBTreeNode();  newParent.parent=node.parent;  newParent.aabb=node.aabb.getUnion(itemAABB);  newParent.height=node.height + 1;  if (parent != null) {    if (parent.left == node) {      parent.left=newParent;    } else {      parent.right=newParent;    }    newParent.left=node;    newParent.right=item;    node.parent=newParent;    item.parent=newParent;  } else {    newParent.left=node;    newParent.right=item;    node.parent=newParent;    item.parent=newParent;    this.root=newParent;  }  node=item.parent;  while (node != null) {    node=balance(node);    DynamicAABBTreeNode left=node.left;    DynamicAABBTreeNode right=node.right;    node.height=1 + Math.max(left.height,right.height);    node.aabb=left.aabb.getUnion(right.aabb);    node=node.parent;  }}  }
class C{  public synchronized boolean export(Swc swc) throws FileNotFoundException, IOException {  try {    if (!swc.save()) {      return false;    }    if (Trace.swc) {      Trace.trace("Exported SWC " + swc.getLocation() + "("+ swc.getLastModified()+ ")");    }    if (!(swc.getArchive() instanceof SwcWriteOnlyArchive)) {      swcLRUCache.put(swc.getLocation(),swc);    }  } catch (  Exception e) {    if (Trace.error) {      e.printStackTrace();    }    if (e instanceof SwcException) {      throw (SwcException)e;    } else {      SwcException ex=new SwcException.SwcNotExported(swc.getLocation(),e);      ThreadLocalToolkit.log(ex);      throw ex;    }  }  return true;}  }
class C{  private void handleSpecialTypes(){switch (type) {case BEGIN_GROUP:    transformer=BEGIN_GROUP_TNAME;  break;case END_GROUP:transformer=END_GROUP_TNAME;break;case OR:transformer=OR_TNAME;break;case NOT:transformer=NOT_TNAME;break;}}  }
class C{  public void removeGraphModelListener(GraphListener listnr){  m_listeners.remove(listnr);}  }
class C{  protected JButton createArrowButton(){  XPStyle xp=XPStyle.getXP();  if (xp != null) {    return new XPComboBoxButton(xp);  } else {    return super.createArrowButton();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case SESSION_IDS:    return isSetSessionIDs();case PACKET:  return isSetPacket();}throw new IllegalStateException();}  }
class C{  public static <Item extends IItem>void restoreSubItemSelectionStatesForAlternativeStateManagement(Item item,List<String> selectedItems){  if (item instanceof IExpandable && !((IExpandable)item).isExpanded() && ((IExpandable)item).getSubItems() != null) {    List<Item> subItems=(List<Item>)((IExpandable<Item,?>)item).getSubItems();    Item subItem;    String id;    for (int i=0, size=subItems.size(); i < size; i++) {      subItem=subItems.get(i);      id=String.valueOf(subItem.getIdentifier());      if (selectedItems != null && selectedItems.contains(id)) {        subItem.withSetSelected(true);      }      restoreSubItemSelectionStatesForAlternativeStateManagement(subItem,selectedItems);    }  }}  }
class C{  public FI_EscapeSummary simpleEscapeAnalysis(IR ir){  final boolean DEBUG=false;  if (DEBUG) {    VM.sysWrite("ENTER Simple Escape Analysis " + ir.method + "\n");  }  if (DEBUG) {    ir.printInstructions();  }  RVMMethod m=ir.method;  MethodSummary summ=SummaryDatabase.findOrCreateMethodSummary(m);  summ.setInProgress(true);  FI_EscapeSummary result=new FI_EscapeSummary();  DefUse.computeDU(ir);  DefUse.recomputeSSA(ir);  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=reg.getNext()) {    if (reg.isFloatingPoint()) {      continue;    }    if (reg.isInteger()) {      continue;    }    if (reg.isLong()) {      continue;    }    if (reg.isCondition()) {      continue;    }    if (reg.isValidation()) {      continue;    }    if (reg.isPhysical()) {      continue;    }    if (!reg.isSSA()) {      continue;    }    AnalysisResult escapes=checkAllAppearances(reg,ir);    if (escapes.threadLocal) {      result.setThreadLocal(reg,true);    }    if (escapes.methodLocal) {      result.setMethodLocal(reg,true);    }  }  int numParam=0;  for (Enumeration<Operand> e=ir.getParameters(); e.hasMoreElements(); numParam++) {    Register p=((RegisterOperand)e.nextElement()).getRegister();    if (result.isThreadLocal(p)) {      summ.setParameterMayEscapeThread(numParam,false);    } else {      summ.setParameterMayEscapeThread(numParam,true);    }  }  boolean foundEscapingReturn=false;  for (Iterator<Operand> itr=iterateReturnValues(ir); itr.hasNext(); ) {    Operand op=itr.next();    if (op == null) {      continue;    }    if (op.isRegister()) {      Register r=op.asRegister().getRegister();      if (!result.isThreadLocal(r)) {        foundEscapingReturn=true;      }    }  }  if (!foundEscapingReturn) {    summ.setResultMayEscapeThread(false);  }  summ.setInProgress(false);  if (DEBUG) {    VM.sysWrite("LEAVE Simple Escape Analysis " + ir.method + "\n");  }  return result;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static void doMain(String[] args){  String job="java:saveWithQueryBuilder";  String keyspaceName="test";  String inputTableName="tweetsbig";  final String outputTableName="copy_tweetsbig";  ContextProperties p=new ContextProperties(args);  DeepSparkContext deepContext=new DeepSparkContext(p.getCluster(),job,p.getSparkHome(),p.getJars());  CassandraDeepJobConfig<Cells> inputConfig=CassandraConfigFactory.create().host(p.getCassandraHost()).cqlPort(p.getCassandraCqlPort()).rpcPort(p.getCassandraThriftPort()).keyspace(keyspaceName).table(inputTableName).initialize();  long initTime=System.currentTimeMillis();  JavaRDD<Cells> inputRDD=deepContext.createJavaRDD(inputConfig);  System.out.println("**********************" + inputRDD.count() + System.currentTimeMillis());  long timeCreate=System.currentTimeMillis() - initTime;  initTime=System.currentTimeMillis();  CassandraDeepJobConfig<Cells> outputConfig=CassandraConfigFactory.create().host(p.getCassandraHost()).cqlPort(p.getCassandraCqlPort()).rpcPort(p.getCassandraThriftPort()).keyspace(keyspaceName).table(outputTableName).batchSize(2).createTableOnWrite(true).initialize();  deepContext.saveRDD(inputRDD.rdd(),outputConfig);  deepContext.stop();}  }
class C{  public static boolean fileExists(final String path){  final String path_=normalisePath(path);  final boolean exists=new File(path_).exists();  return exists;}  }
class C{  public Entry editEntry(User user,String id,String note,String quotation,boolean isPublic,Long modTime,boolean isAdmin,Errors errors){  if (modTime == null) {    Errors.add(errors,errorMessages.errorModTimeIsNull());    return null;  }  if (user == null) {    Errors.add(errors,errorMessages.errorUserIsNull());    return null;  }  if (id != null && !idGenerator.isIdWellFormed(id)) {    Errors.add(errors,errorMessages.errorIdIsInvalid());    return null;  }  final Entry entry=getEntryById(id);  if (entry == null) {    Errors.add(errors,errorMessages.errorTheEntryCouldNotBeFound());    return null;  }  if (!canUserModifyEntry(user,entry,isAdmin)) {    Errors.add(errors,errorMessages.errorTheUserIsNotEntitledToModifyTheEntry());    return null;  }  if (note != null) {    note=cleanUpText(note);  }  if (entry.isNotebook()) {    entry.setNotebookTitle(note);  } else   if (entry.isSource()) {    entry.setSourceTitle(note);  } else {    entry.setNote(note);  }  entry.setModTime(modTime);  entry.setIsPublic(isPublic);  if (entry.getCreateTime() > modTime.longValue()) {    modTime=entry.getCreateTime();  }  if (entry.isQuotation()) {    if (quotation != null) {      quotation=cleanUpText(quotation);      entry.setQuotation(quotation);    }  }  return entry;}  }
class C{  public boolean isEmpty(){  final boolean result=addedAnnotations.isEmpty() && removedAnnotations.isEmpty() && changedAnnotations.isEmpty();  Log.debug(getClass(),"result",result);  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Set<ObjectName> queryObjectNames(String queryStr,Object... params) throws MalformedObjectNameException {  Set<ObjectName> queried=Collections.emptySet();  queryStr=MessageFormat.format(queryStr,params);  ObjectName queryExp=ObjectName.getInstance(queryStr);  queried=agent.getMBeanServer().queryNames(null,queryExp);  return queried;}  }
class C{  public void calculateTextPosition(int canvasW,int canvasH,ShowcaseView showcaseView,boolean shouldCentreText){  Rect showcase=showcaseView.hasShowcaseView() ? calculator.getShowcaseRect() : new Rect();  int[] areas=new int[4];  areas[0]=showcase.left * canvasH;  areas[1]=showcase.top * canvasW;  areas[2]=(canvasW - showcase.right) * canvasH;  areas[3]=(canvasH - showcase.bottom) * canvasW;  int largest=0;  for (int i=1; i < areas.length; i++) {    if (areas[i] > areas[largest])     largest=i;  }switch (largest) {case 0:    mBestTextPosition[0]=padding;  mBestTextPosition[1]=padding;mBestTextPosition[2]=showcase.left - 2 * padding;break;case 1:mBestTextPosition[0]=padding;mBestTextPosition[1]=padding + actionBarOffset;mBestTextPosition[2]=canvasW - 2 * padding;break;case 2:mBestTextPosition[0]=showcase.right + padding;mBestTextPosition[1]=padding;mBestTextPosition[2]=(canvasW - showcase.right) - 2 * padding;break;case 3:mBestTextPosition[0]=padding;mBestTextPosition[1]=showcase.bottom + padding;mBestTextPosition[2]=canvasW - 2 * padding;break;}if (shouldCentreText) {switch (largest) {case 0:case 2:mBestTextPosition[1]+=canvasH / 4;break;case 1:case 3:mBestTextPosition[2]/=2;mBestTextPosition[0]+=canvasW / 4;break;}} else {switch (largest) {case 0:case 2:mBestTextPosition[1]+=actionBarOffset;break;}}hasRecalculated=true;}  }
class C{  private void processALoad(Instruction s){  Operand index=ALoad.getIndex(s);  if (index.isConstant()) {    findOrCreateVertex((ConstantOperand)index);  }}  }
class C{  @Deprecated public AsyncUserStoreClient createUserStoreClient() throws TTransportException {  if (EvernoteSession.getInstance() == null || EvernoteSession.getInstance().getAuthenticationResult() == null) {    throw new IllegalStateException();  }  return createUserStoreClient(EvernoteSession.getInstance().getAuthenticationResult().getEvernoteHost());}  }
class C{  public boolean isDrawVerticals(){  return this.drawVerticals;}  }
class C{  public void populateDetails(Map<Installment,BigDecimal> breakup){  for (  Map.Entry<Installment,BigDecimal> pair : breakup.entrySet()) {    this.addReceiptDetail(new ReceiptDetail(pair.getKey(),pair.getValue(),REASON_CODE_NA));  }}  }
class C{  public StringLiteral createStringLiteral(){  StringLiteralImpl stringLiteral=new StringLiteralImpl();  return stringLiteral;}  }
class C{  public void addPreferredLocale(Locale locale){  this.locales.add(0,locale);}  }
class C{  public static String toString(ByteBuffer bb){  return bb == null ? null : toString(bb.array(),bb.arrayOffset() + bb.position(),bb.remaining());}  }
class C{  public QualityIndicator(Problem problem,NondominatedPopulation referenceSet){  this.problem=problem;  this.referenceSet=referenceSet;  normalizer=new Normalizer(problem,referenceSet);  normalizedReferenceSet=normalizer.normalize(referenceSet);}  }
class C{  public RandomGroupsHDU(Header header,RandomGroupsData data){  super(header,data);}  }
class C{  public SparseFloatVector(float[] values) throws IllegalArgumentException {  this.dimensionality=values.length;  int size=0;{    for (int i=0; i < values.length; i++) {      if (values[i] != 0.0f) {        size++;      }    }  }  this.indexes=new int[size];  this.values=new float[size];{    int pos=0;    for (int i=0; i < values.length; i++) {      float value=values[i];      if (value != 0.0f) {        this.indexes[pos]=i;        this.values[pos]=value;        pos++;      }    }  }}  }
class C{  public CSSConditionFactory(String cns,String cln,String idns,String idln){  classNamespaceURI=cns;  classLocalName=cln;  idNamespaceURI=idns;  idLocalName=idln;}  }
class C{  public QueryParserHelper(QueryConfigHandler queryConfigHandler,SyntaxParser syntaxParser,QueryNodeProcessor processor,QueryBuilder builder){  this.syntaxParser=syntaxParser;  this.config=queryConfigHandler;  this.processor=processor;  this.builder=builder;  if (processor != null) {    processor.setQueryConfigHandler(queryConfigHandler);  }}  }
class C{  protected void select(T item){  if (TextUtils.isEmpty(item.toString()) || item.toString().equalsIgnoreCase("--")) {    showHint();  } else {    setText(item.toString());    setTextColor(getResources().getColor(R.color.grey_text));    setContentDescription(getResources().getString(R.string.dropdown_list_prefix) + item.toString());  }}  }
class C{  @SuppressWarnings("ConstantConditions") public static void testDoGenerateForClass(final RandomGenerator randomGenerator,final Class<?> type){  Affirm.affirmTrue(String.format("Failed to get the requested type=[%s] from [%s] received=[%s] instead",type,randomGenerator,randomGenerator.doGenerate(type)),type.isInstance(randomGenerator.doGenerate(type)));  Object object=type.cast(randomGenerator.doGenerate(type));  Affirm.affirmNotNull(String.format("Request to registered type [%s] must return non-null value!!",type),object);  Object anotherObject=randomGenerator.doGenerate(type);  if (object.equals(anotherObject)) {    anotherObject=randomGenerator.doGenerate(type);    if (object.equals(anotherObject) && type == Boolean.class) {      for (int counter=0; counter < 20; counter++) {        anotherObject=randomGenerator.doGenerate(type);        if (!object.equals(anotherObject)) {          break;        }      }    }  }  Affirm.affirmFalse(String.format("[%s] generating the same values for type=[%s]",randomGenerator,type),object.equals(anotherObject));}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.config("");  doGet(request,response);}  }
class C{  public BridgeException(BridgeContext ctx,Element e,String code,Object[] params){  this.e=e;  this.code=code;  this.params=params;  if (e != null && ctx != null) {    this.line=ctx.getDocumentLoader().getLineNumber(e);  }}  }
class C{  @SuppressLint("InlinedApi") public static boolean isAndroidTv(Context context){  return context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK);}  }
class C{  private void validateAttributes(Class type,Order order) throws Exception {  if (order != null) {    for (    String name : order.attributes()) {      if (!isAttribute(name)) {        throw new AttributeException("Ordered attribute '%s' missing in %s",name,type);      }    }  }}  }
class C{  public boolean isDeviceRooted(){  if (checkRootBySuAccess()) {    return true;  }  if (checkRootBySuperUserApk()) {    return true;  }  if (checkRootByBuildTags()) {    return true;  }  return false;}  }
class C{  public XmlFriendlyNameCoder(final String dollarReplacement,final String escapeCharReplacement,final String hexPrefix){  this.dollarReplacement=dollarReplacement;  this.escapeCharReplacement=escapeCharReplacement;  this.hexPrefix=hexPrefix;  readResolve();}  }
class C{  public void writeStatus(final Status s) throws IOException {  FileOutputStream fileOutput=null;  ObjectOutputStream objectOutput=null;  try {    fileOutput=new FileOutputStream(new File(workingDir,statusName));    objectOutput=new ObjectOutputStream(fileOutput);    objectOutput.writeObject(s);    objectOutput.flush();  }  finally {    IOUtils.close(objectOutput);    IOUtils.close(fileOutput);  }}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  public boolean cancelDiscovery(){  return mBluetoothAdapter.cancelDiscovery();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer(nbits);  String separator="";  buffer.append('{');  for (int i=0; i < nbits; i++) {    if (get(i)) {      buffer.append(separator);      separator=", ";      buffer.append(i);    }  }  buffer.append('}');  return buffer.toString();}  }
class C{  public void enterSlaveMode(){  CoreCmd ccmd=getQueue.peek();  while (ccmd != null) {    ccmd=getQueue.remove();    ccmd.update(Command.STATUS_SLAVE_MODE,cmember.leaderId);    ccmd=getQueue.peek();  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isSummary() && getAction() != null)   setAction(null);  String action=getAction();  if (action == null)   action="";  if (getAD_Window_ID() != 0 && !action.equals(ACTION_Window))   setAD_Window_ID(0);  if (getAD_Form_ID() != 0 && !action.equals(ACTION_Form))   setAD_Form_ID(0);  if (getAD_Browse_ID() != 0 && !action.equals(ACTION_SmartBrowse))   setAD_Browse_ID(0);  if (getAD_Workflow_ID() != 0 && !action.equals(ACTION_WorkFlow))   setAD_Workflow_ID(0);  if (getAD_Workbench_ID() != 0 && !action.equals(ACTION_Workbench))   setAD_Workbench_ID(0);  if (getAD_Task_ID() != 0 && !action.equals(ACTION_Task))   setAD_Task_ID(0);  if (getAD_Process_ID() != 0 && !(action.equals(ACTION_Process) || action.equals(ACTION_Report)))   setAD_Process_ID(0);  return true;}  }
class C{  public boolean isCompressed(){  return compressed;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (isActive()) {    setDataToLevel();    listChildRecords();  }  return true;}  }
class C{  public Result compile(String[] args,Context context,List<JavaFileObject> fileObjects,Iterable<? extends Processor> processors){  return compile(args,null,context,fileObjects,processors);}  }
class C{  private ExpandCollapseClickListener(Context context,TextView header,View content){  this.context=context;  this.header=header;  this.content=content;}  }
class C{  public synchronized void engineSetKeyEntry(String alias,Key key,char[] password,Certificate[] chain) throws KeyStoreException {  token.ensureValid();  checkWrite();  if (!(key instanceof PrivateKey) && !(key instanceof SecretKey)) {    throw new KeyStoreException("key must be PrivateKey or SecretKey");  } else   if (key instanceof PrivateKey && chain == null) {    throw new KeyStoreException("PrivateKey must be accompanied by non-null chain");  } else   if (key instanceof SecretKey && chain != null) {    throw new KeyStoreException("SecretKey must be accompanied by null chain");  } else   if (password != null && !token.config.getKeyStoreCompatibilityMode()) {    throw new KeyStoreException("Password must be null");  }  KeyStore.Entry entry=null;  try {    if (key instanceof PrivateKey) {      entry=new KeyStore.PrivateKeyEntry((PrivateKey)key,chain);    } else     if (key instanceof SecretKey) {      entry=new KeyStore.SecretKeyEntry((SecretKey)key);    }  } catch (  NullPointerException|IllegalArgumentException e) {    throw new KeyStoreException(e);  }  engineSetEntry(alias,entry,new KeyStore.PasswordProtection(password));}  }
class C{  void initialize(CharSequence title,Drawable icon){  setClickable(true);  setFocusable(true);  if (mTextAppearance != -1) {    setTextAppearance(mTextAppearanceContext,mTextAppearance);  }  setTitle(title);  setIcon(icon);}  }
class C{  public boolean isFlappingStarted(){  return flappingStarted;}  }
class C{  public GroundSlot(StendhalRPZone zone,Entity item){  this.zone=zone;  this.item=item;  this.x=item.getX();  this.y=item.getY();}  }
class C{  private void jumpToPrevTarget(){  Entity targ=getPrevTarget();  if (targ == null) {    return;  }  showTargetChoice=false;  clientgui.bv.centerOnHex(targ.getPosition());  clientgui.getBoardView().select(targ.getPosition());  showTargetChoice=true;  target(targ);}  }
class C{  public SelectionInputDialog(Window owner,String key,Collection<T> selectionValues,T initialSelectionValue,Object... keyArguments){  this(owner,key,selectionValues,initialSelectionValue,null,keyArguments);}  }
class C{  private JCustomerFinder(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  public FacesException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public static Path fromString(String path){  return ROOT.newPath(path);}  }
class C{  public String encode(){  String dayString;  if (day < 10) {    dayString="0" + day;  } else   dayString="" + day;  String hourString;  if (hour < 10) {    hourString="0" + hour;  } else   hourString="" + hour;  String minuteString;  if (minute < 10) {    minuteString="0" + minute;  } else   minuteString="" + minute;  String secondString;  if (second < 10) {    secondString="0" + second;  } else   secondString="" + second;  String encoding="";  if (sipWkDay != null)   encoding+=sipWkDay + Separators.COMMA + Separators.SP;  encoding+=dayString + Separators.SP;  if (sipMonth != null)   encoding+=sipMonth + Separators.SP;  encoding+=year + Separators.SP + hourString+ Separators.COLON+ minuteString+ Separators.COLON+ secondString+ Separators.SP+ GMT;  return encoding;}  }
class C{  public static UpdateStatement orAbort(CharSequence table){  return produce(table,"ABORT");}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  private void addToUses(SsaInsn insn){  RegisterSpecList rl=insn.getSources();  int sz=rl.size();  for (int i=0; i < sz; i++) {    useList[rl.get(i).getReg()].add(insn);  }}  }
class C{  public String convertValueToText(Object value,boolean selected,boolean expanded,boolean leaf,int row,boolean hasFocus){  if (value != null) {    String sValue=value.toString();    if (sValue != null) {      return sValue;    }  }  return "";}  }
class C{  public NormalViewAction(final VisionWorld visionWorld){  super("Normal view");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  putValue(SMALL_ICON,ResourceManager.getImageIcon("grid.png"));  this.visionWorld=visionWorld;}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  private String consumeTokenString() throws JsonParserException {  reusableBuffer.setLength(0);  while (true) {    char c=stringChar();switch (c) {case '\"':      return reusableBuffer.toString();case '\\':    int escape=advanceChar();switch (escape) {case -1:    throw createParseException(null,"EOF encountered in the middle of a string escape",false);case 'b':  reusableBuffer.append('\b');break;case 'f':reusableBuffer.append('\f');break;case 'n':reusableBuffer.append('\n');break;case 'r':reusableBuffer.append('\r');break;case 't':reusableBuffer.append('\t');break;case '"':case '/':case '\\':reusableBuffer.append((char)escape);break;case 'u':reusableBuffer.append((char)(stringHexChar() << 12 | stringHexChar() << 8 | stringHexChar() << 4 | stringHexChar()));break;default :throw createParseException(null,"Invalid escape: \\" + (char)escape,false);}break;default :reusableBuffer.append(c);}}}  }
class C{  private void createForecastRunDetail(MPPForecastRunMaster master,MPPPeriod period){  MPPForecastRunDetail forecastRunDetail=new MPPForecastRunDetail(getCtx(),0,get_TrxName());  forecastRunDetail.setPP_ForecastRun_ID(m_run.get_ID());  forecastRunDetail.setPP_ForecastRunMaster_ID(master.getPP_ForecastRunMaster_ID());  forecastRunDetail.setPP_Period_ID(period.get_ID());  forecastRunDetail.setPeriodNo(period.getPeriodNo());  forecastRunDetail.saveEx();  generateForcastRunLines(forecastRunDetail);  updateDetail(period.get_ID(),forecastRunDetail.get_ID());}  }
class C{  public final int skipBytes(int n) throws IOException {  int total=0;  int cur=0;  while ((total < n) && ((cur=(int)in.skip(n - total)) > 0)) {    total+=cur;  }  return total;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public ParticleString2D(VerletPhysics2D physics,List<VerletParticle2D> plist,float strength){  this.physics=physics;  particles=new ArrayList<VerletParticle2D>(plist);  links=new ArrayList<VerletSpring2D>(particles.size() - 1);  VerletParticle2D prev=null;  for (  VerletParticle2D p : particles) {    physics.addParticle(p);    if (prev != null) {      VerletSpring2D s=createSpring(prev,p,prev.distanceTo(p),strength);      links.add(s);      physics.addSpring(s);    }    prev=p;  }}  }
class C{  protected static void execute(ReviewDb db,String sql) throws SQLException {  try (Statement s=newStatement(db)){    s.execute(sql);  } }  }
class C{  public ErrorDialog(final String message){  this();  body.add(new Label(message));}  }
class C{  @Override protected void copyStatement(final RyaStatement rstmt,final Context context) throws IOException, InterruptedException {  try {    childDao.add(rstmt);    cachedStatements++;  } catch (  final RyaDAOException e) {    throw new IOException("Error serializing RyaStatement",e);  }  if (cachedStatements >= maxStatements) {    flush(context);  }}  }
class C{  protected int generateBinomial(int n,double p){  final double C1_3=0.33333333333333333;  final double C5_8=0.62500000000000000;  final double C1_6=0.16666666666666667;  final int DMAX_KM=20;  int bh, i, K, Km, nK;  double f, rm, U, V, X, T, E;  if (n != n_last || p != p_last) {    n_last=n;    p_last=p;    par=Math.min(p,1.0 - p);    q=1.0 - par;    np=n * par;    if (np <= 0.0)     return -1;    rm=np + par;    m=(int)rm;    if (np < 10) {      p0=Math.exp(n * Math.log(q));      bh=(int)(np + 10.0 * Math.sqrt(np * q));      b=Math.min(n,bh);    } else {      rc=(n + 1.0) * (pq=par / q);      ss=np * q;      i=(int)(2.195 * Math.sqrt(ss) - 4.6 * q);      xm=m + 0.5;      xl=(double)(m - i);      xr=(double)(m + i + 1L);      f=(rm - xl) / (rm - xl * par);      ll=f * (1.0 + 0.5 * f);      f=(xr - rm) / (xr * q);      lr=f * (1.0 + 0.5 * f);      c=0.134 + 20.5 / (15.3 + (double)m);      p1=i + 0.5;      p2=p1 * (1.0 + c + c);      p3=p2 + c / ll;      p4=p3 + c / lr;    }  }  if (np < 10) {    double pk;    K=0;    pk=p0;    U=randomGenerator.nextDouble();    while (U > pk) {      ++K;      if (K > b) {        U=randomGenerator.nextDouble();        K=0;        pk=p0;      } else {        U-=pk;        pk=(double)(((n - K + 1) * par * pk) / (K * q));      }    }    return ((p > 0.5) ? (n - K) : K);  }  for (; ; ) {    V=randomGenerator.nextDouble();    if ((U=randomGenerator.nextDouble() * p4) <= p1) {      K=(int)(xm - U + p1 * V);      return (p > 0.5) ? (n - K) : K;    }    if (U <= p2) {      X=xl + (U - p1) / c;      if ((V=V * c + 1.0 - Math.abs(xm - X) / p1) >= 1.0)       continue;      K=(int)X;    } else     if (U <= p3) {      if ((X=xl + Math.log(V) / ll) < 0.0)       continue;      K=(int)X;      V*=(U - p2) * ll;    } else {      if ((K=(int)(xr - Math.log(V) / lr)) > n)       continue;      V*=(U - p3) * lr;    }    if ((Km=Math.abs(K - m)) <= DMAX_KM || Km + Km + 2L >= ss) {      f=1.0;      if (m < K) {        for (i=m; i < K; ) {          if ((f*=(rc / ++i - pq)) < V)           break;        }      } else {        for (i=K; i < m; ) {          if ((V*=(rc / ++i - pq)) > f)           break;        }      }      if (V <= f)       break;    } else {      V=Math.log(V);      T=-Km * Km / (ss + ss);      E=(Km / ss) * ((Km * (Km * C1_3 + C5_8) + C1_6) / ss + 0.5);      if (V <= T - E)       break;      if (V <= T + E) {        if (n != n_prev || par != p_prev) {          n_prev=n;          p_prev=par;          nm=n - m + 1;          ch=xm * Math.log((m + 1.0) / (pq * nm)) + Arithmetic.stirlingCorrection(m + 1) + Arithmetic.stirlingCorrection(nm);        }        nK=n - K + 1;        if (V <= ch + (n + 1.0) * Math.log((double)nm / (double)nK) + (K + 0.5) * Math.log(nK * pq / (K + 1.0)) - Arithmetic.stirlingCorrection(K + 1) - Arithmetic.stirlingCorrection(nK))         break;      }    }  }  return (p > 0.5) ? (n - K) : K;}  }
class C{  public void initFromFile(String vectorFile) throws IOException {  CloseableVectorStore vectorReaderDisk=VectorStoreReader.openVectorStore(vectorFile,flagConfig);  Enumeration<ObjectVector> vectorEnumeration=vectorReaderDisk.getAllVectors();  logger.fine("Reading vectors from store on disk into memory cache  ...");  while (vectorEnumeration.hasMoreElements()) {    ObjectVector objectVector=vectorEnumeration.nextElement();    this.objectVectors.put(objectVector.getObject().toString(),objectVector);  }  vectorReaderDisk.close();  logger.log(Level.FINE,"Cached {0} vectors.",objectVectors.size());}  }
class C{  public Collection<? extends Element> generateMultiple(Element parent,ElementMetadata<?,?> parentMetadata,ElementMetadata<?,?> metadata){  Preconditions.checkState(path.selectsElement(),"An attribute path cannot be used to generate elements.");  Collection<? extends Element> elements=getFinalElements(path,parent);  if (elements.isEmpty()) {    return elements;  }  List<Element> result=Lists.newArrayListWithCapacity(elements.size());  for (  Element e : elements) {    try {      ElementKey<?,?> realKey=mergeKeys(e.getElementKey(),metadata.getKey());      result.add(Element.createElement(realKey,e));    } catch (    ContentCreationException ex) {      throw new IllegalArgumentException("Invalid metadata",ex);    }  }  return result;}  }
class C{  private double createEndTime(double minTime,double maxTime){  double r=Math.random();  return minTime + r * (maxTime - minTime);}  }
class C{  public Image addImage(String location,Image image){  if (m_maxImageWidth > -1 || m_maxImageHeight > -1) {    image=getScaledImage(image);    image.getWidth(null);  }  imageCache.put(location,image);  return image;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (LINETYPE_SegmentValue.equals(getLineType())) {    if (getCalculationType() != null)     setCalculationType(null);    if (getOper_1_ID() != 0)     setOper_1_ID(0);    if (getOper_2_ID() != 0)     setOper_2_ID(0);  }  return true;}  }
class C{  @Override public boolean init(String instance,String cfgFileName){  this.instancename=instance;  File instanceCfgFile=new File(cfgFileName);  if (instanceCfgFile.exists()) {    try {      this.localcfg=new SchemaConfiguration(instanceCfgFile);    } catch (    IOException ex) {      ConcurrentLog.config(this.instancename,"error reading schema " + cfgFileName);      return false;    }    if (this.localcfg.contains(CollectionSchema.sku) || this.localcfg.contains("_skufieldname")) {      return true;    }    ConcurrentLog.config(this.instancename,"mandatory mapping for sku or _skufieldname missing in " + cfgFileName);    return false;  }  this.localcfg=null;  return false;}  }
class C{  protected void resetStickyFooterSelection(){  if (mStickyFooterView instanceof LinearLayout) {    for (int i=0; i < (mStickyFooterView).getChildCount(); i++) {      (mStickyFooterView).getChildAt(i).setActivated(false);      (mStickyFooterView).getChildAt(i).setSelected(false);    }  }}  }
class C{  private double cdfSlow(int k){  if (k < 0)   throw new IllegalArgumentException();  double sum=0.0;  for (int r=0; r <= k; r++)   sum+=pdf(r);  return sum;}  }
class C{  public ViPRCatalogClient2 withLogin(String username,String password){  auth().login(username,password);  return this;}  }
class C{  public void processOffensive(Vertex input,Vertex speaker,Vertex target,Vertex conversation,Network network){  Vertex originalQuestion=null;  Vertex originalQuestionInput=null;  if (target != null) {    originalQuestionInput=getLastInputInConversation(conversation,speaker,2);    if (originalQuestionInput != null) {      originalQuestion=originalQuestionInput.mostConscious(Primitive.INPUT);    }  }  if (originalQuestion == null) {    log("Offensive missing question",Level.FINE);    return;  }  Vertex wrongResponseInput=originalQuestionInput.mostConscious(Primitive.RESPONSE);  if (wrongResponseInput == null) {    log("Offensive missing response",Level.FINE);    return;  }  Vertex wrongResponse=wrongResponseInput.mostConscious(Primitive.INPUT);  if (wrongResponse == null) {    log("Offensive missing response input",Level.FINE);    return;  }  if (wrongResponse.hasInverseRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE)) {    throw new BotException("The response has been marked as not offensive by the bot's admin, so cannot be flagged as offensive.");  }  log("Offensive response flagged",Bot.WARNING,wrongResponse);  Collection<Relationship> relationships=network.findAllRelationshipsTo(wrongResponse);  for (  Relationship relationship : relationships) {    if (relationship.getType().is(Primitive.RESPONSE)) {      relationship.getSource().removeRelationship(relationship.getType(),relationship.getTarget());    }  }  wrongResponseInput.addRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE);  wrongResponse.addRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE);  network.checkReduction(wrongResponse);  wrongResponse.associateAll(Primitive.SYNONYM,network.createVertex(Primitive.OFFENSIVE),Primitive.ASSOCIATED);  Vertex quotient=getLastQuotient(network);  if ((quotient != null) && !quotient.isPinned()) {    Vertex state=getLastState(network);    log("Correcting quotient",Level.FINE,quotient,state);    state.removeRelationship(Primitive.QUOTIENT,quotient);  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  return true;}  }
class C{  public static boolean isWindows(){  return System.getProperty("os.name").contains("Windows");}  }
class C{  public void render(Graphics g){  byte[] imageData=getRrdGraphInfo().getBytes();  ImageIcon image=new ImageIcon(imageData);  image.paintIcon(null,g,0,0);}  }
class C{  public HistoryEntry createHistoryEntry(){  HistoryEntryImpl historyEntry=new HistoryEntryImpl();  return historyEntry;}  }
class C{  public WhereBuilder and(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "AND",columnName,op,value);  return this;}  }
class C{  private synchronized void removeEdge(final int src,final int tgt){  if (src == tgt) {    throw new IllegalArgumentException();  }  if (!W[src][tgt]) {    throw new IllegalStateException("edge does not exist: src=" + src + ", tgt="+ tgt);  }  updateClosure(src,tgt,false);  W[src][tgt]=false;  outbound[src]--;  inbound[tgt]--;  if (outbound[src] == 0 || inbound[tgt] == 0) {    resetOrder();  }  if (outbound[src] < 0) {    throw new AssertionError();  }  if (inbound[tgt] < 0) {    throw new AssertionError();  }}  }
class C{  private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains(){  Map<String,UpdateRequestProcessorChain> map=new HashMap<>();  UpdateRequestProcessorChain def=initPlugins(map,UpdateRequestProcessorChain.class,UpdateRequestProcessorChain.class.getName());  if (def == null) {    def=map.get(null);  }  if (def == null) {    log.info("no updateRequestProcessorChain defined as default, creating implicit default");    UpdateRequestProcessorFactory[] factories=new UpdateRequestProcessorFactory[]{new LogUpdateProcessorFactory(),new DistributedUpdateProcessorFactory(),new RunUpdateProcessorFactory()};    def=new UpdateRequestProcessorChain(factories,this);  }  map.put(null,def);  map.put("",def);  return map;}  }
class C{  public void attach(ViewGroup.LayoutParams layoutParams){  if (systemOverlay) {    try {      getWindowManager().addView(this,layoutParams);    } catch (    SecurityException e) {      throw new SecurityException("Your application must have SYSTEM_ALERT_WINDOW " + "permission to create a system window.");    }  } else {    ((ViewGroup)getActivityContentView()).addView(this,layoutParams);  }}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintProgressBarBackground(context,g,x,y,w,h);}  }
class C{  protected boolean hasOutstandingChanges(){  return (fieldValue.hasChanged() || fieldName.hasChanged() || fProduct_ID.hasChanged()|| fBPartner_ID.hasChanged());}  }
class C{  boolean skipObject() throws IOException {  int ch=read();  int len;switch (ch) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:    skip(ch - 0x00);  return true;case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:skip(ch - 0x20);return true;case 0x30:case 0x31:case 0x32:case 0x33:len=256 * (ch - 0x30) + read();skip(len);return true;case 0x34:case 0x35:case 0x36:case 0x37:len=256 * (ch - 0x34) + read();skip(len);return true;case 0x3c:case 0x3d:case 0x3e:case 0x3f:skip(2);return true;case 0x41:len=readShort();skip(len);return skipObject();case 0x42:len=readShort();skip(len);return true;case 0x43:scanObjectDef();return skipObject();case 0x44:skip(8);return true;case 0x45:throw new IllegalStateException("Invalid Hessian bytecode 'E'");case 0x46:return true;case 0x47:skipObject();skipObject();return true;case 0x48:{skipMap();return true;}case 0x49:skip(4);return true;case 0x4a:skip(8);return true;case 0x4b:skip(4);return true;case 0x4c:skip(8);return true;case 0x4d:{skipObject();skipMap();return true;}case 0x4e:return true;case 0x4f:{int type=scanInt();String[] def=_classDefs.get(type);len=def.length - 1;for (int i=0; i < len; i++) {skipObject();}return true;}case 0x50:skipObject();skipObject();return true;case 0x51:skipObject();return true;case 0x52:len=readShort();skip(len);return skipObject();case 0x53:len=readShort();skip(len);return true;case 0x54:return true;case 0x55:readType();while (skipObject()) {}return true;case 0x56:readType();len=scanInt();for (int i=0; i < len; i++) {skipObject();}return true;case 0x57:while (skipObject()) {}return true;case 0x58:len=scanInt();for (int i=0; i < len; i++) {skipObject();}return true;case 0x59:skip(4);return true;case 0x5a:return false;case 0x5b:case 0x5c:return true;case 0x5d:skip(1);return true;case 0x5e:skip(2);return true;case 0x5f:return skipObject();case 0x60:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:case 0x6d:case 0x6e:case 0x6f:{int type=ch - 0x60;String[] def=_classDefs.get(type);len=def.length - 1;for (int i=0; i < len; i++) {skipObject();}return true;}case 0x70:case 0x71:case 0x72:case 0x73:case 0x74:case 0x75:case 0x76:case 0x77:skipObject();len=ch - 0x70;for (int i=0; i < len; i++) {skipObject();}return true;case 0x78:case 0x79:case 0x7a:case 0x7b:case 0x7c:case 0x7d:case 0x7e:case 0x7f:len=ch - 0x78;for (int i=0; i < len; i++) {skipObject();}return true;case 0x80:case 0x81:case 0x82:case 0x83:case 0x84:case 0x85:case 0x86:case 0x87:case 0x88:case 0x89:case 0x8a:case 0x8b:case 0x8c:case 0x8d:case 0x8e:case 0x8f:case 0x90:case 0x91:case 0x92:case 0x93:case 0x94:case 0x95:case 0x96:case 0x97:case 0x98:case 0x99:case 0x9a:case 0x9b:case 0x9c:case 0x9d:case 0x9e:case 0x9f:case 0xa0:case 0xa1:case 0xa2:case 0xa3:case 0xa4:case 0xa5:case 0xa6:case 0xa7:case 0xa8:case 0xa9:case 0xaa:case 0xab:case 0xac:case 0xad:case 0xae:case 0xaf:case 0xb0:case 0xb1:case 0xb2:case 0xb3:case 0xb4:case 0xb5:case 0xb6:case 0xb7:case 0xb8:case 0xb9:case 0xba:case 0xbb:case 0xbc:case 0xbd:case 0xbe:case 0xbf:return true;case 0xc0:case 0xc1:case 0xc2:case 0xc3:case 0xc4:case 0xc5:case 0xc6:case 0xc7:case 0xc8:case 0xc9:case 0xca:case 0xcb:case 0xcc:case 0xcd:case 0xce:case 0xcf:skip(1);return true;case 0xd0:case 0xd1:case 0xd2:case 0xd3:case 0xd4:case 0xd5:case 0xd6:case 0xd7:skip(2);return true;case 0xd8:case 0xd9:case 0xda:case 0xdb:case 0xdc:case 0xdd:case 0xde:case 0xdf:case 0xe0:case 0xe1:case 0xe2:case 0xe3:case 0xe4:case 0xe5:case 0xe6:case 0xe7:case 0xe8:case 0xe9:case 0xea:case 0xeb:case 0xec:case 0xed:case 0xee:case 0xef:return true;case 0xf0:case 0xf1:case 0xf2:case 0xf3:case 0xf4:case 0xf5:case 0xf6:case 0xf7:case 0xf8:case 0xf9:case 0xfa:case 0xfb:case 0xfc:case 0xfd:case 0xfe:case 0xff:skip(1);return true;default :throw new UnsupportedOperationException("0x" + Integer.toHexString(ch));}}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && equalsTo(getClass().cast(other));}  }
class C{  public static void rectangle(double x,double y,double halfWidth,double halfHeight){  if (halfWidth < 0)   throw new IllegalArgumentException("half width must be nonnegative");  if (halfHeight < 0)   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public RedshiftDataSource(){}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public int enumerate(Thread[] threads,boolean recurse){  return enumerateGeneric(threads,recurse,0,true);}  }
class C{  public boolean preGenerate(RealisticBiomeBase biome,World world,Random rand,int chunkX,int chunkY,OpenSimplexNoise simplex,CellNoise cell,float strength,float river,boolean hasPlacedVillageBlocks){  if (this.checkRiver) {    if (river > this.maxRiver || river < this.minRiver) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public boolean containsKey(Object key){  Segment<K,V> s;  HashEntry<K,V>[] tab;  int h=hash(key.hashCode());  long u=(((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;  if ((s=(Segment<K,V>)UNSAFE.getObjectVolatile(segments,u)) != null && (tab=s.table) != null) {    for (HashEntry<K,V> e=(HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE); e != null; e=e.next) {      K k;      if ((k=e.key) == key || (e.hash == h && key.equals(k)))       return true;    }  }  return false;}  }
class C{  protected void decodeBufferPrefix(PushbackInputStream inStream,OutputStream outStream) throws IOException {  int c;  StringBuffer q=new StringBuffer(32);  String r;  boolean sawNewLine;  sawNewLine=true;  while (true) {    c=inStream.read();    if (c == -1) {      throw new CEFormatException("UUDecoder: No begin line.");    }    if ((c == 'b') && sawNewLine) {      c=inStream.read();      if (c == 'e') {        break;      }    }    sawNewLine=(c == '\n') || (c == '\r');  }  while ((c != '\n') && (c != '\r')) {    c=inStream.read();    if (c == -1) {      throw new CEFormatException("UUDecoder: No begin line.");    }    if ((c != '\n') && (c != '\r')) {      q.append((char)c);    }  }  r=q.toString();  if (r.indexOf(' ') != 3) {    throw new CEFormatException("UUDecoder: Malformed begin line.");  }  mode=Integer.parseInt(r.substring(4,7));  bufferName=r.substring(r.indexOf(' ',6) + 1);  if (c == '\r') {    c=inStream.read();    if ((c != '\n') && (c != -1))     inStream.unread(c);  }}  }
class C{  protected Node copyInto(Node n){  GenericElementNS ge=(GenericElementNS)super.copyInto(n);  ge.nodeName=nodeName;  return n;}  }
class C{  protected void updateNgCommand(ILaunchConfiguration configuration){  String command=IExternalToolConstants.EMPTY_STRING;  try {    command=configuration.getAttribute(AngularCLILaunchConstants.OPERATION,IExternalToolConstants.EMPTY_STRING);  } catch (  CoreException ce) {    AngularCLIPlugin.logError(ce,"Error while reading ng configuration");  }  commandsCommbo.setText(command);}  }
class C{  public static GraphNode serializableInstance(){  return new SessionNodeWrapper(SessionNode.serializableInstance());}  }
class C{  private Range<Integer> expandToBreakableRegions(Range<Integer> iRange){  int loTok=iRange.lowerEndpoint();  int hiTok=iRange.upperEndpoint() - 1;  if (!partialFormatRanges.contains(loTok) || !partialFormatRanges.contains(hiTok)) {    return EMPTY_RANGE;  }  loTok=partialFormatRanges.rangeContaining(loTok).lowerEndpoint();  hiTok=partialFormatRanges.rangeContaining(hiTok).upperEndpoint();  return Range.closedOpen(loTok,hiTok + 1);}  }
class C{  private void initMetadata(SwcLibrary swcLibrary,LinkerConfiguration linkerConfiguration){  String[] configMetaData=linkerConfiguration.getMetadataToKeep();  if (configMetaData == null) {    return;  }  if (configMetaData.length > 0) {    swcLibrary.addMetadata(Arrays.asList(configMetaData));  }}  }
class C{  public Object clone(){  return new LdapName(unparsed,rdns,0,rdns.size());}  }
class C{  protected SurfaceData initAcceleratedSurface(){  SurfaceData sData;  try {    X11GraphicsConfig gc=(X11GraphicsConfig)vImg.getGraphicsConfig();    ColorModel cm=gc.getColorModel();    long drawable=0;    if (context instanceof Long) {      drawable=((Long)context).longValue();    }    sData=X11SurfaceData.createData(gc,vImg.getWidth(),vImg.getHeight(),cm,vImg,drawable,Transparency.OPAQUE);  } catch (  NullPointerException ex) {    sData=null;  }catch (  OutOfMemoryError er) {    sData=null;  }  return sData;}  }
class C{  public hr addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public void layersChanged(){}  }
class C{  public boolean retainEntries(TIntDoubleProcedure procedure){  boolean modified=false;  byte[] states=_states;  int[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public String globalInfo(){  return "Learns a simple linear regression model. " + "Picks the attribute that results in the lowest squared error. " + "Can only deal with numeric attributes.";}  }
class C{  private void parseUnit(Element unitNode,Vector<Entity> list){  NodeList nl=unitNode.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node currNode=nl.item(i);    if (currNode.getParentNode() != unitNode) {      continue;    }    int nodeType=currNode.getNodeType();    if (nodeType == Node.ELEMENT_NODE) {      String nodeName=currNode.getNodeName();      if (nodeName.equalsIgnoreCase(ENTITY)) {        parseEntity((Element)currNode,list);      } else       if (nodeName.equalsIgnoreCase(PILOT)) {        parsePilot((Element)currNode);      }    } else {      continue;    }  }}  }
class C{  private View fillFromSelection(int selectedTop,int childrenTop,int childrenBottom){  int fadingEdgeLength=getVerticalFadingEdgeLength();  final int selectedPosition=mSelectedPosition;  View sel;  final int topSelectionPixel=getTopSelectionPixel(childrenTop,fadingEdgeLength,selectedPosition);  final int bottomSelectionPixel=getBottomSelectionPixel(childrenBottom,fadingEdgeLength,selectedPosition);  sel=makeAndAddView(selectedPosition,selectedTop,true,mListPadding.left,true);  if (sel.getBottom() > bottomSelectionPixel) {    final int spaceAbove=sel.getTop() - topSelectionPixel;    final int spaceBelow=sel.getBottom() - bottomSelectionPixel;    final int offset=Math.min(spaceAbove,spaceBelow);    sel.offsetTopAndBottom(-offset);  } else   if (sel.getTop() < topSelectionPixel) {    final int spaceAbove=topSelectionPixel - sel.getTop();    final int spaceBelow=bottomSelectionPixel - sel.getBottom();    final int offset=Math.min(spaceAbove,spaceBelow);    sel.offsetTopAndBottom(offset);  }  fillAboveAndBelow(sel,selectedPosition);  if (!mStackFromBottom) {    correctTooHigh(getChildCount());  } else {    correctTooLow(getChildCount());  }  return sel;}  }
class C{  @Override int calculateEndBottomBound(float yAxisDelta){  return calculateEndTopBound(yAxisDelta) + getView().getHeight();}  }
class C{  public boolean distributedJoins(){  return distributedJoins;}  }
class C{  public void test_plainLiterals(){  final Literal a=new LiteralImpl("bigdata");  assertEquals(a,roundTrip_tuned(a));}  }
class C{  protected void checkSAXVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final String SAX_VERSION1_CLASS="org.xml.sax.Parser";  final String SAX_VERSION1_METHOD="parse";  final String SAX_VERSION2_CLASS="org.xml.sax.XMLReader";  final String SAX_VERSION2_METHOD="parse";  final String SAX_VERSION2BETA_CLASSNF="org.xml.sax.helpers.AttributesImpl";  final String SAX_VERSION2BETA_METHODNF="setAttributes";  final Class oneStringArg[]={java.lang.String.class};  final Class attributesArg[]={org.xml.sax.Attributes.class};  try {    Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2BETA_CLASSNF,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(SAX_VERSION2BETA_METHODNF,attributesArg);    h.put(VERSION + "SAX","2.0");  } catch (  Exception e) {    h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());    h.put(ERROR,ERROR_FOUND);    try {      Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2_CLASS,ObjectFactory.findClassLoader(),true);      Method method=clazz.getMethod(SAX_VERSION2_METHOD,oneStringArg);      h.put(VERSION + "SAX-backlevel","2.0beta2-or-earlier");    } catch (    Exception e2) {      h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());      h.put(ERROR,ERROR_FOUND);      try {        Class clazz=ObjectFactory.findProviderClass(SAX_VERSION1_CLASS,ObjectFactory.findClassLoader(),true);        Method method=clazz.getMethod(SAX_VERSION1_METHOD,oneStringArg);        h.put(VERSION + "SAX-backlevel","1.0");      } catch (      Exception e3) {        h.put(ERROR + VERSION + "SAX-backlevel","ERROR attempting to load SAX version 1 class: " + e3.toString());      }    }  }}  }
class C{  public static DiffObject autoMerge(){  return new DiffObject(true);}  }
class C{  public double slope(){  return beta;}  }
class C{  private boolean isPunctuation(final char c){  return ((c == '.') || (c == ',') || (c == '!')|| (c == '?'));}  }
class C{  public Component createAuthComponent(ActionListener al){  return createLoginComponent(al,null,null,null);}  }
class C{  public static void print(StackMapTable smt,PrintWriter writer){  try {    new Printer(smt.get(),writer).parse();  } catch (  BadBytecode e) {    writer.println(e.getMessage());  }}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  public boolean isLoggable(LogRecord record){  if (record.getLevel() == Level.SEVERE || record.getLevel() == Level.WARNING)   return true;  String loggerName=record.getLoggerName();  if (loggerName != null) {    if (loggerName.startsWith("sun.") || loggerName.startsWith("java.awt.") || loggerName.startsWith("javax."))     return false;  }  String className=record.getSourceClassName();  if (className != null) {    if (className.startsWith("sun.") || className.startsWith("java.awt.") || className.startsWith("javax."))     return false;  }  return true;}  }
class C{  @Override public void copyArea(int x,int y,int width,int height,int dx,int dy){}  }
class C{  public CoNLLColumnFormatReader(String corpus,String section,String columnFile,String predicateArgumentViewName,TextAnnotationBuilder textAnnotationBuilder) throws Exception {  super(CorpusReaderConfigurator.buildResourceManager(corpus));  this.section=section;  this.predicateArgumentViewName=predicateArgumentViewName;  this.textAnnotationBuilder=textAnnotationBuilder;  List<URL> list=IOUtils.lsResources(CoNLLColumnFormatReader.class,columnFile);  if (list.size() > 0) {    lines=new ArrayList<>();    URL url=list.get(0);    Scanner scanner=new Scanner(url.openStream());    while (scanner.hasNextLine()) {      lines.add(scanner.nextLine());    }    scanner.close();  } else {    lines=LineIO.read(columnFile);  }}  }
class C{  public static synchronized void releaseOut(){  outCnt--;  if (outCnt == 0)   System.setOut(sysOut);}  }
class C{  @Override public String addEmrStep(String clusterId,StepConfig emrStepConfig,AwsParamsDto awsParamsDto) throws Exception {  List<StepConfig> steps=new ArrayList<>();  steps.add(emrStepConfig);  AddJobFlowStepsRequest jobFlowStepRequest=new AddJobFlowStepsRequest(clusterId,steps);  List<String> emrStepIds=emrOperations.addJobFlowStepsRequest(getEmrClient(awsParamsDto),jobFlowStepRequest);  return emrStepIds.get(0);}  }
class C{  private <T extends DataObject>void queryAndPrintRecord(URI id,Class<T> clazz,DbCliOperation operationType) throws Exception {  T object=queryObject(id,clazz);  if (object == null) {    System.out.println("id: " + id + " [ Deleted ]");    return;  }  BeanInfo bInfo;  try {    bInfo=Introspector.getBeanInfo(clazz);  } catch (  IntrospectionException ex) {    throw new RuntimeException("Unexpected exception getting bean info",ex);  }  if (operationType == DbCliOperation.LIST) {    printBeanProperties(bInfo.getPropertyDescriptors(),object);  } else {    dumpBeanProperties(bInfo.getPropertyDescriptors(),object);  }}  }
class C{  public static XYDataset extractRowFromHeatMapDataset(HeatMapDataset dataset,int row,Comparable seriesName){  XYSeries series=new XYSeries(seriesName);  int cols=dataset.getXSampleCount();  for (int c=0; c < cols; c++) {    series.add(dataset.getXValue(c),dataset.getZValue(c,row));  }  XYSeriesCollection result=new XYSeriesCollection(series);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:56.269 -0500",hash_original_method="601EF7D9B28B5898301EBC35141803DA",hash_generated_method="413F0C46D488B56F71E26B18C416D817") public final Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  if (mode != UNWRAP_MODE) {    throw new IllegalStateException();  }  return spiImpl.engineUnwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public String toString(){  return image;}  }
class C{  public OpenDataException(){  super();}  }
class C{  private int hashCodeImpl(){  int result=0;  for (  Map.Entry<String,Object> e : memberValues.entrySet()) {    result+=(127 * e.getKey().hashCode()) ^ memberValueHashCode(e.getValue());  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.997 -0500",hash_original_method="8766DB09D651E2B3541ACB0418FFA365",hash_generated_method="D09555F2947D75B2837EAF1A3FB8DD71") public Builder penaltyDialog(){  return enable(PENALTY_DIALOG);}  }
class C{  public boolean validate(List<String> warnings){  return true;}  }
class C{  public void enterBus(Path nextPath){  if (startBusStop != null && endBusStop != null) {    if (location.equals(endBusStop)) {      state=STATE_WALKING_ELSEWHERE;      latestBusStop=location.clone();    } else {      state=STATE_DECIDED_TO_ENTER_A_BUS;      this.nextPath=nextPath;    }    return;  }  if (!cbtd.continueTrip()) {    state=STATE_WAITING_FOR_BUS;    this.nextPath=null;    if (rng.nextDouble() > probTakeOtherBus) {      state=STATE_WALKING_ELSEWHERE;      latestBusStop=location.clone();    }  } else {    state=STATE_DECIDED_TO_ENTER_A_BUS;    this.nextPath=nextPath;  }}  }
class C{  public PossibleGraphicalChangeFinder(Graph pag,Collection<Collection<Node>> separations){  if (pag == null) {    throw new NullPointerException("The given pag must not be null.");  }  if (separations == null) {    throw new NullPointerException("The given separation sets must not be null.");  }  this.pag=pag;  this.separations=new ArrayList<>();  for (  Collection<Node> sep : separations) {    this.separations.add(new ArrayList<>(sep));  }}  }
class C{  @Override public IBinder onBind(Intent arg0){  return mBinder;}  }
class C{  public Enumeration<String> keys(){  return (registryList.elements());}  }
class C{  public static boolean isGatewayMesh(String gateway){  if (gateway == null) {    return false;  } else {    String[] gateways=gateway.split("\\.");    if (gateways[0].equals("2") || gateways[0].equals("3") || gateways[0].equals("4")|| gateways[0].equals("5") && gateways[1].equals("255") && gateways[2].equals("255")) {      return true;    } else {      return false;    }  }}  }
class C{  public static double expm1(double value){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.expm1(value) : Math.expm1(value);  }  if (Math.abs(value) < EXP_LO_DISTANCE_TO_ZERO) {    int i=(int)(value * EXP_LO_INDEXING);    double delta=value - i * (1.0 / EXP_LO_INDEXING);    return expLoPosTab[i + EXP_LO_TAB_MID_INDEX] * (expLoNegTab[i + EXP_LO_TAB_MID_INDEX] + delta * (1 + delta * (1.0 / 2 + delta * (1.0 / 6 + delta * (1.0 / 24 + delta * (1.0 / 120))))));  } else {    return FastMath.exp(value) - 1;  }}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  public VersionNumber(String version){  parts=new ArrayList<Integer>();  int start=0;  for (int i=0; i < version.length(); i++) {    char c=version.charAt(i);    if (c == '.') {      addNumber(version,start,i);      start=i + 1;    }  }  addNumber(version,start,version.length());}  }
class C{  public void requestUpdateFromLayout(){  XNetMessage msg=XNetMessage.getFeedbackRequestMsg(baseaddress,(nibble == 0x00));  msg.setElement(1,baseaddress);  msg.setParity();synchronized (this) {    statusRequested=true;  }  tc.sendXNetMessage(msg,null);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public LongParameter(OptionID optionID,long defaultValue){  super(optionID,Long.valueOf(defaultValue));}  }
class C{  public void test1(){  final GridLayoutManager layoutManager=new GridLayoutManager(2,3,new Insets(0,0,0,0),0,0);  final JPanel panel=new JPanel(layoutManager);  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(10,30));  final JTextField field2=new JTextField();  field2.setPreferredSize(new Dimension(10,30));  final JTextField field3=new JTextField();  field3.setPreferredSize(new Dimension(10,30));  panel.add(field1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,new Dimension(0,0),null,null,0));  panel.add(field2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,new Dimension(0,0),null,null,0));  panel.add(field3,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,new Dimension(0,0),null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(30,preferredSize.width);  for (int size=31; size < 100; size++) {    panel.setSize(size,30);    layoutManager.invalidateLayout(panel);    panel.doLayout();  }}  }
class C{  public static MPayment createARReceipt(Properties ctx,MInvoice invoice,String tenderType,BigDecimal amount,String trxName) throws OperationException {  return createPayment(ctx,invoice,MDocType.DOCBASETYPE_ARReceipt,tenderType,amount,invoice.get_TrxName());}  }
class C{  private void checkXmlForCMTDataSourceBackedByImplementationClass(String configuration,DataSourceFixture dataSourceFixture,String className) throws Exception {  String id=getDataSourceId(dataSourceFixture);  String providedDataSourceId=id + "Provided";  String providedDataSourceJndiName=dataSourceFixture.jndiLocation + "Provided";  XMLAssert.assertXpathEvaluatesTo(className,"//data-source[@name='" + providedDataSourceId + "']/@class",configuration);  XMLAssert.assertXpathEvaluatesTo(className,"//data-source[@name='" + providedDataSourceId + "']/@connection-driver",configuration);  XMLAssert.assertXpathEvaluatesTo(providedDataSourceJndiName,"//data-source[@name='" + providedDataSourceId + "']/@location",configuration);  validateDataSource(configuration,dataSourceFixture,providedDataSourceId);  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.jndiLocation,"//data-source[@name='" + id + "']/@location",configuration);  if (dataSourceFixture.connectionType.equals(ConfigurationEntryType.XA_DATASOURCE)) {    XMLAssert.assertXpathEvaluatesTo(providedDataSourceJndiName,"//data-source[@name='" + id + "']/@xa-source-location",configuration);    XMLAssert.assertXpathEvaluatesTo("com.evermind.sql.OrionCMTDataSource","//data-source[@name='" + id + "']/@class",configuration);  } else {    XMLAssert.assertXpathEvaluatesTo(providedDataSourceJndiName,"//data-source[@name='" + id + "']/@source-location",configuration);    XMLAssert.assertXpathEvaluatesTo("com.evermind.sql.OrionPooledDataSource","//data-source[@name='" + id + "']/@class",configuration);  }}  }
class C{  public BinomialMinPQ(Comparator<Key> C,Key[] a){  comp=C;  for (  Key k : a)   insert(k);}  }
class C{  public InputStream openInputStream() throws IOException {  close();  TempBuffer head=_head;  _head=null;  _tail=null;  return new TempInputStream(head);}  }
class C{  public RangeBuilder addUnboundedTo(String key,long to){  ranges.add(new Range(key,null,to));  return this;}  }
class C{  public void reset(){  isFilling=false;  length=0;  sequenceExtensionPosition=0;}  }
class C{  public int clear(){  return --count;}  }
class C{  public NoSuchFieldError(String s){  super(s);}  }
class C{  public void initWithImage(Bitmap image){  CGSize imageSize=CGSize.make(image.getWidth(),image.getHeight());  CGSize realSize=CGSize.make(image.getWidth(),image.getHeight());  int width=toPow2((int)imageSize.width);  int height=toPow2((int)imageSize.height);  boolean needDownScale=false;  float factor=1;  while (width > kMaxTextureSize || height > kMaxTextureSize) {    width/=2;    height/=2;    imageSize.width*=0.5f;    imageSize.height*=0.5f;    factor*=2;    needDownScale=true;  }  if (needDownScale) {    Bitmap bitmap=Bitmap.createScaledBitmap(image,(int)imageSize.width,(int)imageSize.height,false);    image.recycle();    image=bitmap;  }  if (imageSize.width != width || imageSize.height != height) {    Bitmap bitmap=Bitmap.createBitmap(width,height,image.hasAlpha() ? image.getConfig() : Bitmap.Config.RGB_565);    Canvas canvas=new Canvas(bitmap);    canvas.drawBitmap(image,0,0,null);    image.recycle();    image=bitmap;  }  init(image,realSize,realSize);  mWidth=(int)(image.getWidth() * factor);  mHeight=(int)(image.getHeight() * factor);}  }
class C{  public boolean isParseReportRequested(){  return m_isParseReportRequested;}  }
class C{  public void subdivide(Segment s0,Segment s1){  Linear l0=null, l1=null;  if (s0 instanceof Linear)   l0=(Linear)s0;  if (s1 instanceof Linear)   l1=(Linear)s1;  subdivide(l0,l1);}  }
class C{  @SafeVarargs public final AssertSubscriber<T> assertValuesWith(Consumer<T>... expectations){  if (!valuesStorage) {    throw new IllegalStateException("Using assertNoValues() requires enabling values storage");  }  final int expectedValueCount=expectations.length;  if (expectedValueCount != values.size()) {    throw new AssertionError("Different value count: expected = " + expectedValueCount + ", actual = "+ valueCount,null);  }  for (int i=0; i < expectedValueCount; i++) {    Consumer<T> consumer=expectations[i];    T actualValue=values.get(i);    consumer.accept(actualValue);  }  return this;}  }
class C{  public static void main(String[] argv){  runFilter(new Copy(),argv);}  }
class C{  public TxRequest64(XBeeAddress64 destination,int frameId,int[] payload){  this(destination,frameId,Option.UNICAST,payload);}  }
class C{  public LocalDateTime addToCopy(long value){  return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(),value));}  }
class C{  public final Constant asConstant(){  if (this instanceof ConstantNode) {    return ((ConstantNode)this).getValue();  } else {    return null;  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public Vector3 cross(Vector3 that){  x=getY() * that.getZ() - getZ() * that.getY();  y=getZ() * that.getX() - getX() * that.getZ();  z=getX() * that.getY() - getY() * that.getX();  return this;}  }
class C{  public ListNode mergeKLists(ListNode[] lists){  if (lists == null || lists.length == 0) {    return null;  }  Queue<ListNode> pq=new PriorityQueue<>(lists.length,null);  for (  ListNode n : lists) {    if (n != null) {      pq.add(n);    }  }  ListNode dummy=new ListNode(0);  ListNode tail=dummy;  while (!pq.isEmpty()) {    tail.next=pq.poll();    tail=tail.next;    if (tail.next != null) {      pq.add(tail.next);    }  }  return dummy.next;}  }
class C{  public static String formatResult(Object result){  return formatResult(result,0);}  }
class C{  public int ToSeconds(){  return hours * 3600 + minutes * 60 + seconds;}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public Resource _getResource(String name){  Resource f=directory.getRealResource(name);  if (f != null && f.exists() && f.isFile())   return f;  return null;}  }
class C{  public static java.lang.String toString(int i,int radix){  return null;}  }
class C{  protected void paintOrigin(Point2D llp,Graphics graphics,MapBean theMap){  paintOriginPoint(llp,graphics,theMap);  paintOriginLabel(llp,graphics,theMap);}  }
class C{  public static List execute(ExecutablePool pool,String region,Object key,int interestType,InterestResultPolicy policy,boolean isDurable,boolean receiveUpdatesAsInvalidates,byte regionDataPolicy){  AbstractOp op=new RegisterInterestOpImpl(region,key,interestType,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  return (List)pool.executeOnQueuesAndReturnPrimaryResult(op);}  }
class C{  public static boolean contains(boolean[] array,boolean valueToFind){  return indexOf(array,valueToFind) != INDEX_NOT_FOUND;}  }
class C{  public boolean find(){  return regexMatcher.find();}  }
class C{  private void checkFlows(){  if ((mMode == MODE_LOGIN) || (mMode == MODE_FORGOT_PASSWORD) || (mMode == MODE_FORGOT_PASSWORD_WAITING_VALIDATION)) {    checkLoginFlows();  } else {    checkRegistrationFlows();  }}  }
class C{  void calculateLongestLine(){  Component c=getContainer();  font=c.getFont();  metrics=c.getFontMetrics(font);  tabSize=getTabSize() * metrics.charWidth(' ');  Element lines=getElement();  int n=lines.getElementCount();  for (int i=0; i < n; i++) {    Element line=lines.getElement(i);    float w=getLineWidth(i);    if (w > longLineWidth) {      longLineWidth=w;      longLine=line;    }  }}  }
class C{  private void checkKeyPacket(byte[] keyPacket){  if (keyPacket.length < 3) {    throw new IllegalArgumentException("keypacket must be at least " + "3 bytes long");  }  int tag=keyPacket[0];  if ((tag & 128) != 128) {    throw new IllegalArgumentException("keypacket tag is invalid: " + "bit 7 is not set");  }  if ((tag & 64) != 64) {    throw new IllegalArgumentException("old keypacket tag format is " + "unsupported");  }  if (((tag & 6) != 6) && ((tag & 14) != 14) && ((tag & 5) != 5)&& ((tag & 7) != 7)) {    throw new IllegalArgumentException("keypacket tag is invalid: " + "must be 6, 14, 5, or 7");  }}  }
class C{  public void flush() throws IOException {  writer_.flush();}  }
class C{  private static File checkFile(File tsFile,String fileType) throws TypeScriptException {  if (tsFile == null) {    throw new TypeScriptException("[" + fileType + "] file cannot be null");  }  if (!tsFile.exists()) {    throw new TypeScriptException("Cannot find [" + fileType + "] file "+ FileUtils.getPath(tsFile));  }  if (!tsFile.isFile()) {    throw new TypeScriptException("[" + fileType + "] "+ FileUtils.getPath(tsFile)+ " is not a file.");  }  return tsFile;}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public boolean isDeclaredOverride(){  return declaredOverride;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__LIST_1:    return isList_1();case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__NAME_1:  return getName_1();case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1__TYPE_1:return getType_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public BracePair(final IElementType leftBrace,final IElementType rightBrace,final boolean structural){  myLeftBrace=leftBrace;  myRightBrace=rightBrace;  myStructural=structural;}  }
class C{  public static TrapCodeOperand NullPtr(){  return new TrapCodeOperand((byte)RuntimeEntrypoints.TRAP_NULL_POINTER);}  }
class C{  public static void releaseServiceObject(ServiceDiscovery discovery,Object svcObject){  io.vertx.servicediscovery.ServiceDiscovery.releaseServiceObject((io.vertx.servicediscovery.ServiceDiscovery)discovery.getDelegate(),svcObject);}  }
class C{  public static final double[][] timesTranspose(final double[] v1,final double[] v2){  final double[][] re=new double[v1.length][v2.length];  for (int j=0; j < v2.length; j++) {    for (int i=0; i < v1.length; i++) {      re[i][j]=v1[i] * v2[j];    }  }  return re;}  }
class C{  public HashPrintServiceAttributeSet(){  super(PrintServiceAttribute.class);}  }
class C{  public int hammingWeight(int n){  int res=0;  while (n != 0) {    res++;    n&=n - 1;  }  return res;}  }
class C{  private static Instances NumToNom(Instances i) throws Exception {  System.out.println("Type range of variables to make nominal, e.g. \"1,3-4,7\"");  Scanner sc=new Scanner(System.in);  String range=sc.next();  NumericToNominal convert=new NumericToNominal();  String[] options={"-R",range};  convert.setOptions(options);  convert.setInputFormat(i);  System.out.println("\nConverting...\n");  Instances newI=Filter.useFilter(i,convert);  System.out.println(newI.toSummaryString());  return newI;}  }
class C{  @Deactivate protected void deactivate(ComponentContext ctx){}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:46.624 -0500",hash_original_method="D1485373461621933BC43F45AD6A923E",hash_generated_method="0EFF8C92C50C1B5DB93451D6413713EA") @Override public void close(){synchronized (lock) {    if (isOpen()) {      buf=null;    }  }}  }
class C{  public DataSource<CloseableReference<CloseableImage>> fetchDecodedImage(ImageRequest imageRequest,Object callerContext){  return fetchDecodedImage(imageRequest,callerContext,ImageRequest.RequestLevel.FULL_FETCH);}  }
class C{  private MailItemFeed batchInsertMailItems(MailItemEntry... mailItems) throws ServiceException, IOException {  LOGGER.log(Level.INFO,"Batch inserting " + Integer.toString(mailItems.length) + " mailItems");  MailItemFeed feed=new MailItemFeed();  for (int i=0; i < mailItems.length; i++) {    BatchUtils.setBatchId(mailItems[i],Integer.toString(i));    feed.getEntries().add(mailItems[i]);  }  return mailItemService.batch(domain,destinationUser,feed);}  }
class C{  private static void readJson() throws IOException {  JsonFactory jsonFactory=new JsonFactory();  JsonParser jsonParser=jsonFactory.createParser("{\"message\":\"Hi\",\"place\":{\"name\":\"World!\"}}");  JsonToken jsonToken=jsonParser.nextToken();  while (jsonParser.hasCurrentToken()) {    if (jsonToken == VALUE_STRING) {      System.out.print(jsonParser.getText() + " ");    }    jsonToken=jsonParser.nextToken();  }  System.out.println();}  }
class C{  public boolean all_reachable(){  return soot.PhaseOptions.getBoolean(options,"all-reachable");}  }
class C{  private void swap(T from,T to){  T p=(T)from.getPrevious();  T n=(T)from.getNext();  if (null != p) {    to.setPrevious(p);    p.setNext(to);  }  if (null != n) {    to.setNext(n);    n.setPrevious(to);  }  from.setNext(null);  from.setPrevious(null);}  }
class C{  public double testPing(String hostAddress,int port,int timeout){  InetAddress inetAddress=null;  InetSocketAddress socketAddress=null;  Socket socket=new Socket();  long timeToRespond=-1;  long start, stop;  try {    inetAddress=InetAddress.getByName(hostAddress);    socketAddress=new InetSocketAddress(inetAddress,port);    start=System.nanoTime();    socket.connect(socketAddress,timeout);    stop=System.nanoTime();    timeToRespond=(stop - start);  } catch (  Exception e) {    log.error("Fail to check cross-site network latency to node {} with Exception: ",hostAddress,e);    return -1;  } finally {    try {      if (socket.isConnected()) {        socket.close();      }    } catch (    Exception e) {      log.error("Fail to close connection to node {} with Exception: ",hostAddress,e);    }  }  return timeToRespond / 1000000.0;}  }
class C{  public long endTime(){  return endTime;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.087 -0400",hash_original_method="772E48859B8D6014A94196EB87B496F8",hash_generated_method="08C77205267DC41FDD11DCA1C30BC7D4") char[] convertToHex(byte[] hash){  int i;  byte j;  byte fifteen=15;  char[] hex=new char[32];  for (i=0; i < 16; i++) {    hex[i * 2]=getHexChar((byte)((hash[i] & 0xf0) >> 4));    hex[(i * 2) + 1]=getHexChar((byte)(hash[i] & 0x0f));  }  return hex;}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  boolean savedIsSame=m_isSameContext;  m_isSameContext=false;  pred.callVisitors(owner,this);  m_isSameContext=savedIsSame;  return false;}  }
class C{  @Override public boolean isSearchable(int column) throws SQLException {  try {    debugCodeCall("isSearchable",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void showToastShort(String message){  showToastShort(message,0);}  }
class C{  private static int transpositions(final CharSequence first,final CharSequence second){  int transpositions=0;  for (int i=0; i < first.length(); i++) {    if (first.charAt(i) != second.charAt(i)) {      transpositions++;    }  }  return transpositions / 2;}  }
class C{  public String toString(){  return "[" + host + ":"+ port+ (ssf != null ? "," + ssf : "")+ (csf != null ? "," + csf : "")+ "]";}  }
class C{  public InlineQueryResultVideo build(){  return new InlineQueryResultVideo(id,video_url,mime_type,thumb_url,video_width,video_height,title,caption,video_duration,description,reply_markup,input_message_content);}  }
class C{  public boolean isChaResInUse(){  return chaResInUse;}  }
class C{  public boolean validRule(Rule r){  if (!super.validRule(r)) {    return false;  } else   if (r.rhs == null) {    return false;  } else   if (r.rhs.size() < r.lhs.size()) {    return false;  }  return true;}  }
class C{  public synchronized void startListening(Context context){  if (!mListening) {    mContext=context;    IntentFilter filter=new IntentFilter();    filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);    context.registerReceiver(this,filter);    mListening=true;  }}  }
class C{  public String toString(){  return "'" + val.replace("'","''") + "'";}  }
class C{  public T datetime(String value){  return attr("datetime",value);}  }
class C{  public static boolean isAlwaysRevalidate(){  return alwaysRevalidate;}  }
class C{  boolean isSupportedFileSuffix(String fileSuffix){  return mFileSuffixList.contains(fileSuffix);}  }
class C{  @Inline public final void insert(Address addr){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr.isZero());  checkTailInsert(1);  uncheckedTailInsert(addr);}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public DummyEventReportingService(){  super(Long.MAX_VALUE,EventBTree.createTransient());}  }
class C{  public Set<String> addContent(IndependentDistribution distrib){  if (!paused) {    curState.addToState(distrib);    return update();  } else {    log.info("system is paused, ignoring content " + distrib);    return Collections.emptySet();  }}  }
class C{  public DCertificatePolicies(JDialog parent){  super(parent);  setTitle(res.getString("DCertificatePolicies.Title"));  initComponents();}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public boolean epsilonEquals(GMatrix m1,double epsilon){  int i, j;  double diff;  if (nRow != m1.nRow || nCol != m1.nCol) {    return false;  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      diff=values[i][j] - m1.values[i][j];      if ((diff < 0 ? -diff : diff) > epsilon) {        return false;      }    }  }  return true;}  }
class C{  public HashMap<String,String> generateSwfByImages(List<String> images,String outputfile,int fps){  List<String> argvList=Arrays.asList(new String[]{getPathToSwfTools() + "png2swf" + execExt,"-s","insertstop","-o",outputfile,"-r",Integer.toString(fps),"-z"});  argvList.addAll(images);  return ProcessHelper.executeScript("generateSwfByImages",argvList.toArray(new String[0]));}  }
class C{  public static Offset bottomRight(){  return new Offset(WorldWind.OFFSET_FRACTION,1.0,WorldWind.OFFSET_FRACTION,0.0);}  }
class C{  public void updatePlayState(final boolean isPlaying){  if (mNotification == null || mNotificationManager == null) {    return;  }  if (mNotificationTemplate != null) {    mNotificationTemplate.setImageViewResource(R.id.notification_base_play,isPlaying ? R.drawable.btn_notification_playback_pause : R.drawable.btn_notification_playback_play);  }  if (mExpandedView != null) {    mExpandedView.setImageViewResource(R.id.notification_expanded_base_play,isPlaying ? R.drawable.btn_notification_playback_pause : R.drawable.btn_notification_playback_play);  }  mNotificationManager.notify(APOLLO_MUSIC_SERVICE,mNotification);}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws SAXException {  super.appendAndPush(handler,elem);  elem.setDOMBackPointer(handler.getOriginatingNode());  handler.getStylesheet().setTemplate((ElemTemplate)elem);}  }
class C{  protected Map<Character,Integer> match_alphabet(String pattern){  Map<Character,Integer> s=new HashMap<Character,Integer>();  char[] char_pattern=pattern.toCharArray();  for (  char c : char_pattern) {    s.put(c,0);  }  int i=0;  for (  char c : char_pattern) {    s.put(c,s.get(c) | (1 << (pattern.length() - i - 1)));    i++;  }  return s;}  }
class C{  public FuzzyConditionBuilder maxExpansions(Integer maxExpansions){  this.maxExpansions=maxExpansions;  return this;}  }
class C{  public void rotate(float rot,float x,float y,float z){  Matrix4f tmp=new Matrix4f();  tmp.loadRotate(rot,x,y,z);  multiply(tmp);}  }
class C{  @Override public boolean isFigureSelected(Figure checkFigure){  return selectedFigures.contains(checkFigure);}  }
class C{  public void testNewDocument(){  Document d;  try {    d=dbf.newDocumentBuilder().newDocument();  } catch (  Exception e) {    throw new RuntimeException("Unexpected exception",e);  }  assertNotNull(d);  assertNull(d.getDoctype());  assertNull(d.getDocumentElement());  assertNull(d.getNamespaceURI());}  }
class C{  public int length(){  return values.size();}  }
class C{  public AttributeCertificateIssuer(AttCertIssuer issuer){  form=issuer.getIssuer();}  }
class C{  public T caseActionFakeDefinition(ActionFakeDefinition object){  return null;}  }
class C{  public int maxIdleConnectionPoolSize(){  return maxIdleConnectionPoolSize;}  }
class C{  public void invalidateHeaders(){  if (!mHandler.hasMessages(MSG_BUILD_HEADERS)) {    mHandler.sendEmptyMessage(MSG_BUILD_HEADERS);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.921 -0500",hash_original_method="A4B1F2E867C9A510C601A243C52C492E",hash_generated_method="833AD7BCDDF03DA1695D3173C8995B22") protected boolean lineStart(TextView widget,Spannable buffer){  return false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void onSuggestionsFetched(final String query,final List<KeywordSuggestionsResponseModel.Keywords> suggestions,final boolean replace){  if (mSuggestions == null) {    mSuggestions=new ArrayList<KeywordSuggestionsResponseModel.Keywords>();  }  if (replace) {    mSuggestions.clear();  }  mSuggestions.addAll(suggestions);  mSuggestionsAdapter.setSuggestionsMaster(mSuggestions);  performFiltering(query,0);}  }
class C{  public void startActivities(){  startActivities(null);}  }
class C{  public ExecutionTargetException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public synchronized Tradestrategy findById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Tradestrategy instance=entityManager.find(Tradestrategy.class,id);    if (null != instance) {      instance.getStrategy().getIndicatorSeries().size();      instance.getTradeOrders().size();      instance.getPortfolio().getPortfolioAccounts().size();      instance.getCodeValues().size();    }    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public final CC growX(){  hor.setGrow(ResizeConstraint.WEIGHT_100);  return this;}  }
class C{  private void replace(final char[] revA,final char[] revB,final DiffBlock curA,final DiffBlock curB) throws UnsupportedEncodingException {  String text=copy(revB,curB.getRevBStart(),curB.getRevBEnd());  DiffPart action=new DiffPart(DiffAction.REPLACE);  action.setStart(version.length());  codecData.checkBlocksizeS(version.length());  action.setLength(curA.getRevAEnd() - curA.getRevAStart());  codecData.checkBlocksizeE(action.getLength());  action.setText(text);  codecData.checkBlocksizeL(text.getBytes(WIKIPEDIA_ENCODING).length);  diff.add(action);  version.append(text);}  }
class C{  public static HTMLPanelInfo attachToDom(HTMLPanel panel){  if (hiddenDiv == null) {    hiddenDiv=Document.get().createDivElement();    UIObject.setVisible(hiddenDiv,false);    RootPanel.getBodyElement().appendChild(hiddenDiv);  }  Element origParent=panel.getElement().getParentElement();  Element origSibling=panel.getElement().getNextSiblingElement();  HTMLPanelInfo panelInfo=new HTMLPanelInfo(origParent,origSibling);  hiddenDiv.appendChild(panel.getElement());  return panelInfo;}  }
class C{  public void testPawnMoves() throws ChessParseError {  String fen="1r2k3/P1pppp2/8/1pP3p1/1nPp2P1/n4p1P/1P2PP2/4KBNR w K b6 0 1";  Position pos=TextIO.readFEN(fen);  assertEquals(fen,TextIO.toFEN(pos));  List<String> strMoves=getMoveList(pos,false);  assertTrue(strMoves.contains("c5xb6"));  assertTrue(strMoves.contains("a7-a8Q"));  assertTrue(strMoves.contains("a7-a8N"));  assertTrue(strMoves.contains("a7xb8R#"));  assertTrue(strMoves.contains("b2-b3"));  assertTrue(strMoves.contains("b2xa3"));  assertTrue(strMoves.contains("e2-e4"));  assertTrue(strMoves.contains("e2xf3"));  assertEquals(22,strMoves.size());  pos.setEpSquare(-1);  strMoves=getMoveList(pos,false);  assertEquals(21,strMoves.size());  pos.setWhiteMove(false);  strMoves=getMoveList(pos,false);  assertTrue(strMoves.contains("f3xe2"));  assertTrue(strMoves.contains("d4-d3"));  assertTrue(strMoves.contains("e7-e6"));  assertTrue(strMoves.contains("e7-e5"));  assertEquals(26,strMoves.size());  pos.setPiece(Position.getSquare(0,1),Piece.BPAWN);  strMoves=getMoveList(pos,false);  assertTrue(strMoves.contains("a2-a1Q+"));  assertTrue(strMoves.contains("a2-a1R+"));  assertTrue(strMoves.contains("a2-a1N"));  assertTrue(strMoves.contains("a2-a1B"));}  }
class C{  public void performBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState){  performBackup_checked(oldState,data,newState,mFiles,mFiles);}  }
class C{  public static String fmtTime(long ms){  return TIME.format(new Date(ms));}  }
class C{  public void reset(){  m_connection=null;  m_isTarget=isTarget();  m_isTempDisconnected=false;  m_driver=null;  m_url=null;  m_charDevisor=1;  m_isSavepointReleaseable=true;  m_lastSilentError=null;  m_isDoNotInterrupt=false;  m_tables=null;  m_views=null;  m_operators=null;  m_functions=null;  m_triggers=null;  m_sequences=null;  m_primaryKeys=null;  m_foreignKeys=null;  m_checks=null;  m_uniques=null;  m_indexes=null;  m_customPrefixes=null;  m_customEntities=null;  m_systemClients=null;  m_systemLanguages=null;  m_sequenceSystem=null;  m_sequenceUser=null;  setVendor(getVendor());  setHost(getHost());  setPort(getPort());  setName(getName());  setCatalog(getCatalog());  setSchema(getSchema());  setUser(getUser());  setPasswd(getPasswd());  setSystemUser(getSystemUser());  setSystemPasswd(getSystemPasswd());}  }
class C{  @Override public boolean step(final IScope scope){  getSpecies().getExplorationAlgorithm().run(scope);  scope.getGui().getStatus().informStatus("Batch over. " + runNumber + " runs, "+ runNumber * seeds.length + " simulations.");  dispose();  GAMA.getGui().updateExperimentState(IGui.NOTREADY);  return true;}  }
class C{  protected void onStop(){  if (mActionBar != null)   mActionBar.setShowHideAnimationEnabled(false);}  }
class C{  public WifiDirectPeerNetwork(){}  }
class C{  protected Map<String,List<StoragePool>> sortPoolsByVPlexStorageSystem(List<StoragePool> storagePools,String varrayId,String cluster){  Map<String,List<StoragePool>> vplexPoolMap=new HashMap<String,List<StoragePool>>();  Map<URI,List<StoragePool>> poolsBySystem=getPoolsBySystem(storagePools);  for (  URI systemUri : poolsBySystem.keySet()) {    Set<URI> vplexSystemURIs=ConnectivityUtil.getVPlexSystemsAssociatedWithArray(_dbClient,systemUri,new HashSet<String>(Arrays.asList(varrayId)),cluster);    for (    URI vplexUri : vplexSystemURIs) {      StorageSystem vplexSystem=_dbClient.queryObject(StorageSystem.class,vplexUri);      String vplexId=vplexUri.toString();      if (vplexSystem != null) {        if (!vplexPoolMap.containsKey(vplexId)) {          List<StoragePool> vplexPoolList=new ArrayList<StoragePool>();          vplexPoolList.addAll(poolsBySystem.get(systemUri));          vplexPoolMap.put(vplexId,vplexPoolList);        } else {          List<StoragePool> vplexPoolList=vplexPoolMap.get(vplexId);          vplexPoolList.addAll(poolsBySystem.get(systemUri));        }      }    }  }  return vplexPoolMap;}  }
class C{  public Distribution(double[][] table){  int i, j;  m_perClassPerBag=table;  m_perBag=new double[table.length];  m_perClass=new double[table[0].length];  for (i=0; i < table.length; i++) {    for (j=0; j < table[i].length; j++) {      m_perBag[i]+=table[i][j];      m_perClass[j]+=table[i][j];      totaL+=table[i][j];    }  }}  }
class C{  public double eval(double params[]){  return (Math.log(params[0]) / Math.log(params[1]));}  }
class C{  private void disable(){  if (fReconciler != null) {    fReconciler.uninstall();    fReconciler=null;  }  if (fPresenter != null) {    fPresenter.uninstall();    fPresenter=null;  }}  }
class C{  public RgbFilter(final int red,final int green,final int blue){  this(red,green,blue,0,1);}  }
class C{  private void checkInvariants(){  assert (wordsInUse == 0 || words[wordsInUse - 1] != 0);  assert (wordsInUse >= 0 && wordsInUse <= words.length);  assert (wordsInUse == words.length || words[wordsInUse] == 0);}  }
class C{  public static String shorten(String s,int length,String suffix){  length-=suffix.length();  if (s.length() > length) {    for (int j=length; j >= 0; j--) {      if (CharUtil.isWhitespace(s.charAt(j))) {        length=j;        break;      }    }    String temp=s.substring(0,length);    s=temp.concat(suffix);  }  return s;}  }
