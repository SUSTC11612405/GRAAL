class C{  public static void animateToColor(View v,int color){  int originalColor=v.getBackground() != null ? ((ColorDrawable)v.getBackground()).getColor() : 0xff000000;  ValueAnimator colorAnim=ObjectAnimator.ofInt(v,"backgroundColor",originalColor,color);  colorAnim.setDuration(250);  colorAnim.setEvaluator(new ArgbEvaluator());  colorAnim.setInterpolator(new DecelerateInterpolator());  colorAnim.start();}  }
class C{  private RangeMarker printPage(Graphics2D g2d,PageFormat pageFormat,RangeMarker range){  assert isValidRange(range);  int startOffset=range.getStartOffset();  int endOffset=range.getEndOffset();  myOffset=startOffset;  mySegmentEnd=endOffset;  myLineNumber=myDocument.getLineNumber(myOffset) + 1;  Rectangle2D.Double clip=new Rectangle2D.Double(pageFormat.getImageableX(),pageFormat.getImageableY(),pageFormat.getImageableWidth(),pageFormat.getImageableHeight());  draw(g2d,clip);  return myOffset > startOffset && myOffset < endOffset ? myDocument.createRangeMarker(myOffset,endOffset) : null;}  }
class C{  @SuppressWarnings("unchecked") public <T>T createComponent(Class<T> cls){  for (  CachePluginProvider provider : providersList) {    T res=(T)provider.createComponent(cls);    if (res != null)     return res;  }  if (cls.equals(GridCacheDrManager.class))   return (T)new GridOsCacheDrManager(); else   if (cls.equals(CacheConflictResolutionManager.class)) {    T cmp=(T)ctx.createComponent(CacheConflictResolutionManager.class);    if (cmp != null)     return cmp; else     return (T)new CacheOsConflictResolutionManager<>();  } else   if (cls.equals(CacheStoreManager.class))   return (T)new CacheOsStoreManager(ctx,cfg);  throw new IgniteException("Unsupported component type: " + cls);}  }
class C{  public K refresh(boolean refresh){  this.refresh=refresh;  return self();}  }
class C{  @DSComment("Wifi subsystem") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.330 -0500",hash_original_method="D1E32319AD181FF60DD93B5B2DB831F1",hash_generated_method="1DA1A834FB6AFB8AE93CF220DEA6178C") public boolean saveConfiguration(){  try {    return mService.saveConfiguration();  } catch (  RemoteException e) {    return false;  }}  }
class C{  public EventReader provide(InputStream source) throws Exception {  XmlPullParser parser=factory.newPullParser();  if (source != null) {    parser.setInput(source,null);  }  return new PullReader(parser);}  }
class C{  public TSResponse generateTimestamp(TSRequest tsQuery) throws IOException {  HttpURLConnection connection=(HttpURLConnection)tsaURI.toURL().openConnection();  connection.setDoOutput(true);  connection.setUseCaches(false);  connection.setRequestProperty("Content-Type",TS_QUERY_MIME_TYPE);  connection.setRequestMethod("POST");  connection.setConnectTimeout(CONNECT_TIMEOUT);  if (debug != null) {    Set<Map.Entry<String,List<String>>> headers=connection.getRequestProperties().entrySet();    debug.println(connection.getRequestMethod() + " " + tsaURI+ " HTTP/1.1");    for (    Map.Entry<String,List<String>> e : headers) {      debug.println("  " + e);    }    debug.println();  }  connection.connect();  DataOutputStream output=null;  try {    output=new DataOutputStream(connection.getOutputStream());    byte[] request=tsQuery.encode();    output.write(request,0,request.length);    output.flush();    if (debug != null) {      debug.println("sent timestamp query (length=" + request.length + ")");    }  }  finally {    if (output != null) {      output.close();    }  }  BufferedInputStream input=null;  byte[] replyBuffer=null;  try {    input=new BufferedInputStream(connection.getInputStream());    if (debug != null) {      String header=connection.getHeaderField(0);      debug.println(header);      int i=1;      while ((header=connection.getHeaderField(i)) != null) {        String key=connection.getHeaderFieldKey(i);        debug.println("  " + ((key == null) ? "" : key + ": ") + header);        i++;      }      debug.println();    }    verifyMimeType(connection.getContentType());    int contentLength=connection.getContentLength();    replyBuffer=IOUtils.readFully(input,contentLength,false);    if (debug != null) {      debug.println("received timestamp response (length=" + replyBuffer.length + ")");    }  }  finally {    if (input != null) {      input.close();    }  }  return new TSResponse(replyBuffer);}  }
class C{  private void showNotification(){  CharSequence text=getText(R.string.local_service_started);  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,LocalServiceActivities.Controller.class),0);  Notification notification=new Notification.Builder(this).setSmallIcon(R.drawable.stat_sample).setTicker(text).setWhen(System.currentTimeMillis()).setContentTitle(getText(R.string.local_service_label)).setContentText(text).setContentIntent(contentIntent).build();  mNM.notify(NOTIFICATION,notification);}  }
class C{  public boolean isModified(){  return _lifecycle.isDestroyed() || _classLoader.isModified();}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  public boolean addEntrys(List<T> entrys){  if (entrys == null || entrys.isEmpty()) {    return false;  }  mOriginalData.addAll(entrys);  for (  T entry : entrys) {    mViewData.add(new ViewObject<T>(entry));  }  return true;}  }
class C{  protected static int toDigit(final char ch,final int index) throws HexDecodeException {  final int digit=Character.digit(ch,16);  if (digit == -1) {    throw new HexDecodeException("Illegal hexadecimal character " + ch + " at index "+ index);  }  return digit;}  }
class C{  public NetAddress remoteAddress(){  return _myRemoteAddress;}  }
class C{  public GridInternalException(Throwable cause){  super(cause.getMessage(),cause);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.312 -0500",hash_original_method="41561235219E48E784E85B3D8CB5CB93",hash_generated_method="84C045836AE6DFB7D5B0A78EC05DE96A") public ParcelFileDescriptor openDownloadedFile(long id) throws FileNotFoundException {  return mResolver.openFileDescriptor(getDownloadUri(id),"r");}  }
class C{  public void push(Notification notification,NotificationResponseListener listener){  final String notificationTopic=notification.getTopic();  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;  Request req=Utils.buildRequest(client,topic,notification,gateway);  semaphore.acquireUninterruptibly();  req.send(new ResponseListener(semaphore,notification,listener));}  }
class C{  public static String computeChainingValue(final String input,final RKSuiteIdentifier rkSuite) throws NoSuchAlgorithmException {  final MessageDigest md=MessageDigest.getInstance(rkSuite.getHashAlgorithmForPreviousSignatureValue());  md.update(input.getBytes());  final byte[] digest=md.digest();  final int bytesToExtract=rkSuite.getNumberOfBytesExtractedFromPrevSigHash();  final byte[] conDigest=new byte[bytesToExtract];  System.arraycopy(digest,0,conDigest,0,bytesToExtract);  return CashBoxUtils.base64Encode(conDigest,false);}  }
class C{  private static boolean isExtendedWebpSupported(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {    return false;  }  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR1) {    byte[] decodedBytes=Base64.decode(VP8X_WEBP_BASE64,Base64.DEFAULT);    BitmapFactory.Options opts=new BitmapFactory.Options();    opts.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(decodedBytes,0,decodedBytes.length,opts);    if (opts.outHeight != 1 || opts.outWidth != 1) {      return false;    }  }  return true;}  }
class C{  private void initName(String className,String member,ObjectName objectName){  setClassName(className);  setMember(member);  this.objectName=objectName;}  }
class C{  @RequestMapping(value="/businessObjectDataStorageFiles",method=RequestMethod.POST) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_STORAGES_FILES_POST) public BusinessObjectDataStorageFilesCreateResponse createBusinessObjectDataStorageFiles(@RequestBody BusinessObjectDataStorageFilesCreateRequest businessObjectDataStorageFilesCreateRequest){  return businessObjectDataStorageFileService.createBusinessObjectDataStorageFiles(businessObjectDataStorageFilesCreateRequest);}  }
class C{  public Vector3f negate(){  return new Vector3f(-x,-y,-z);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public final boolean sendValues(){  return true;}  }
class C{  public boolean isSetRunners(){  return this.runners != null;}  }
class C{  private void populateLocations(MyTracksLocation... locations){  for (int i=0; i < locations.length; i++) {    MyTracksLocation location=locations[i];    location.setLatitude(i);    location.setLongitude(-i);    location.setAltitude(i * 10);    location.setBearing(i * 100);    location.setAccuracy(i * 1000);    location.setSpeed(i * 10000);    location.setTime(i * 100000);    Sensor.SensorData.Builder power=Sensor.SensorData.newBuilder().setValue(100 + i).setState(Sensor.SensorState.SENDING);    Sensor.SensorData.Builder cadence=Sensor.SensorData.newBuilder().setValue(200 + i).setState(Sensor.SensorState.SENDING);    Sensor.SensorData.Builder heartRate=Sensor.SensorData.newBuilder().setValue(300 + i).setState(Sensor.SensorState.SENDING);    Sensor.SensorDataSet sensorDataSet=Sensor.SensorDataSet.newBuilder().setPower(power).setCadence(cadence).setHeartRate(heartRate).build();    location.setSensorDataSet(sensorDataSet);  }}  }
class C{  public static GeoTimeSerie tickindex(GeoTimeSerie gts){  GeoTimeSerie indexed=gts.clone();  for (int i=0; i < indexed.values; i++) {    indexed.ticks[i]=i;  }  indexed.bucketcount=0;  indexed.bucketspan=0;  indexed.lastbucket=0;  return indexed;}  }
class C{  public PropertyTable hideDescription(){  showDescription=false;  return rebuild();}  }
class C{  public GMatrix(int nRow,int nCol){  values=new double[nRow][nCol];  this.nRow=nRow;  this.nCol=nCol;  int i, j;  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=0.0;    }  }  int l;  if (nRow < nCol) {    l=nRow;  } else {    l=nCol;  }  for (i=0; i < l; i++) {    values[i][i]=1.0;  }}  }
class C{  protected void streamInit(InputStream inputStream) throws FitsException {  this.dataStr=new BufferedDataInputStream(CompressionManager.decompress(inputStream));}  }
class C{  public void testCapitalization3() throws Exception {  Reader reader=new StringReader("AnD");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Capitalization","keep","and the it BIG","onlyFirstWord","true","forceFirstLetter","true").create(stream);  assertTokenStreamContents(stream,new String[]{"And"});}  }
class C{  public void sortValues(){  sortImpl(false,false);}  }
class C{  private void cancel(){  dispose();}  }
class C{  public void traverse(JavacASTVisitor visitor){switch (this.getKind()) {case COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());  ast.traverseChildren(visitor,this);visitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());break;case TYPE:visitor.visitType(this,(JCClassDecl)get());ast.traverseChildren(visitor,this);visitor.endVisitType(this,(JCClassDecl)get());break;case FIELD:visitor.visitField(this,(JCVariableDecl)get());ast.traverseChildren(visitor,this);visitor.endVisitField(this,(JCVariableDecl)get());break;case METHOD:visitor.visitMethod(this,(JCMethodDecl)get());ast.traverseChildren(visitor,this);visitor.endVisitMethod(this,(JCMethodDecl)get());break;case INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());ast.traverseChildren(visitor,this);visitor.endVisitInitializer(this,(JCBlock)get());break;case ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();visitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);ast.traverseChildren(visitor,this);visitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);break;case LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());ast.traverseChildren(visitor,this);visitor.endVisitLocal(this,(JCVariableDecl)get());break;case STATEMENT:visitor.visitStatement(this,get());ast.traverseChildren(visitor,this);visitor.endVisitStatement(this,get());break;case ANNOTATION:switch (up().getKind()) {case TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());break;case FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());break;case METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());break;case ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();JCMethodDecl method=(JCMethodDecl)up().up().get();visitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());break;case LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());break;default :throw new AssertionError("Annotion not expected as child of a " + up().getKind());}break;default :throw new AssertionError("Unexpected kind during node traversal: " + getKind());}}  }
class C{  public TreePath findNext(){  int state=0;  TreePath next;  while (state < 2) {    while ((next=next()) != null) {      String str=currTree().convertValueToText(next.getLastPathComponent(),false,false,false,0,false);      if (matches(str)) {        return next;      }    }    restart();    state++;  }  return null;}  }
class C{  public final String extractMsgFileName(byte[] stegoData,String stegoFileName) throws OpenStegoException {  return null;}  }
class C{  public void addMoreComponents(Component[] components,boolean areThereMore){  infiniteContainer.removeComponent(ip);  infiniteContainer.removeComponent(endMarker);  for (  Component c : components) {    c.setY(infiniteContainer.getHeight());    infiniteContainer.addComponent(c);  }  if (componentLimit > 0) {    int diff=infiniteContainer.getComponentCount() - componentLimit;    while (diff > 0) {      infiniteContainer.removeComponent(infiniteContainer.getComponentAt(0));      diff--;    }  }  infiniteContainer.revalidate();  if (areThereMore) {    infiniteContainer.addComponent(endMarker);    infiniteContainer.revalidate();  }}  }
class C{  private static VeriniceContext instance(){synchronized (VeriniceContext.class) {    if (instance == null) {      instance=new VeriniceContext();    }  }synchronized (instance) {    if (instance.threadLocal.get() == null) {      instance.threadLocal.set(new HashMap<String,Object>());    }  }  return instance;}  }
class C{  public float endOfBin(int binIndex){  return binBoundaries[binIndex + 1];}  }
class C{  public static void syncNow(Context context){  Account[] accounts=AccountManager.get(context).getAccountsByType(Constants.ACCOUNT_TYPE);  String googleAccount=PreferencesUtils.getString(context,R.string.google_account_key,PreferencesUtils.GOOGLE_ACCOUNT_DEFAULT);  for (  Account account : accounts) {    if (account.name.equals(googleAccount)) {      ContentResolver.cancelSync(account,SYNC_AUTHORITY);      ContentResolver.requestSync(account,SYNC_AUTHORITY,new Bundle());      break;    }  }}  }
class C{  public LetterTokenizerFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static void main(String[] args){  final int NUMBER_OF_PALINDROMIC_PRIMES=100;  final int NUMBERS_PER_LINE=10;  int count=0;  int n=2;  while (count < NUMBER_OF_PALINDROMIC_PRIMES) {    if (isPalindromicPrime(n)) {      count++;      System.out.print(count % NUMBERS_PER_LINE == 0 ? n + "\n" : n + " ");    }    n++;  }}  }
class C{  @DELETE public Response removeCredentials(String message) throws IOException, IllegalArgumentException {  String user=SecurityUtils.getPrincipal();  logger.info("removeCredentials credentials for user {} ",user);  UserCredentials uc=credentials.removeUserCredentials(user);  if (uc == null) {    return new JsonResponse(Status.NOT_FOUND).build();  }  return new JsonResponse(Status.OK).build();}  }
class C{  public int numValues(){  return m_AttValues.length;}  }
class C{  private Workflow.Method createMetaVolumesMethod(URI systemURI,URI poolURI,List<URI> volumeURIs,VirtualPoolCapabilityValuesWrapper capabilities){  return new Workflow.Method("createMetaVolumes",systemURI,poolURI,volumeURIs,capabilities);}  }
class C{  public static Dog maxDog(Dog d1,Dog d2){  if (d1.size >= d2.size)   return d1;  return d2;}  }
class C{  public static <TK,FV>FeatureValueCollection<FV> combine(Derivation<TK,FV> hyp){  Counter<FV> counter=new ClassicCounter<FV>();  for (; hyp != null; hyp=hyp.parent) {    if (hyp.features != null) {      for (      FeatureValue<FV> feature : hyp.features) {        counter.incrementCount(feature.name,feature.value);      }    }  }  Set<FV> featureNames=new TreeSet<FV>(counter.keySet());  FeatureValueCollection<FV> combinedList=new FeatureValueList<FV>(featureNames.size());  for (  FV feature : featureNames) {    combinedList.add(new FeatureValue<FV>(feature,counter.getCount(feature)));  }  return combinedList;}  }
class C{  public boolean isNot(){  return isNot;}  }
class C{  public static ContentAssistHistory load(String filePath) throws CoreException {  File file=new File(filePath);  if (file.exists()) {    try (FileInputStream stream=new FileInputStream(file)){      return new ReaderWriter().load(new InputSource(stream));    } catch (    IOException e) {      JavaPlugin.log(e);    }  }  return null;}  }
class C{  private boolean addWarnSign(TimerData data,Column column){switch (column) {case EXCLUSIVEAVERAGE:case EXCLUSIVEMAX:case EXCLUSIVEMIN:case EXCLUSIVESUM:    int affPercentage=(int)(data.getInvocationAffiliationPercentage() * 100);  return data.isExclusiveTimeDataAvailable() && (affPercentage < 100);default :return false;}}  }
class C{  public boolean isMissileGoingToHit(EntityMissile missile){  if (missile == null || missile.targetVector == null) {    return false;  }  return (Vector2.distance(new Vector2(new Pos3D(missile)),new Vector2(xCoord,zCoord)) < alarmRange && Vector2.distance(new Vector2(missile.targetVector),new Vector2(xCoord,zCoord)) < safetyRange);}  }
class C{  public static void main(String[] args){  DemoModule demo=new DemoModule(null);  demo.mainImpl();}  }
class C{  public String toString(){  return ("Depend[" + _source + ",time="+ _lastModified+ ",time-ch="+ (_source.getLastModified() - _lastModified)+ ",len-ch="+ (_source.length() - _length)+ "]");}  }
class C{  public static boolean intersects(SpatialComparable box1,SpatialComparable box2){  final int dim=assertSameDimensionality(box1,box2);  for (int i=0; i < dim; i++) {    if (box2.getMax(i) < box1.getMin(i) || box1.getMax(i) < box2.getMin(i)) {      return false;    }  }  return true;}  }
class C{  public static void json(String json){  createInstance();  printer.json(json);}  }
class C{  public void write(File file,Integer indent,String xmlVersion) throws TransformerException, IOException {  write(file,new XCalOutputProperties(indent,xmlVersion));}  }
class C{  public Builder prior(boolean prior){  this.prior=prior;  return this;}  }
class C{  protected View makeControllerView(){  LayoutInflater inflate=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  mRoot=inflate.inflate(R.layout.player_controller,null);  initControllerView(mRoot);  return mRoot;}  }
class C{  public void runAfterDialog(){  Log.d(TAG,"Play Services Dialog has been shown");}  }
class C{  public boolean isArchive(){  return archive;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/clusters") public ClusterRestRep createCluster(@PathParam("id") URI tid,ClusterCreateParam createParam){  TenantOrg tenant=getTenantById(tid,true);  ClusterService clusterService=_clusterService;  clusterService.validateClusterData(createParam,tid,null,_dbClient);  Cluster cluster=clusterService.createNewCluster(tenant,createParam);  _dbClient.createObject(cluster);  recordTenantResourceOperation(OperationTypeEnum.CREATE_CLUSTER,tid,cluster);  return map(cluster);}  }
class C{  public static boolean isIsatapAddress(Inet6Address ip){  if (isTeredoAddress(ip)) {    return false;  }  byte[] bytes=ip.getAddress();  if ((bytes[8] | (byte)0x03) != (byte)0x03) {    return false;  }  return (bytes[9] == (byte)0x00) && (bytes[10] == (byte)0x5e) && (bytes[11] == (byte)0xfe);}  }
class C{  public void testValueOfPosScalePos(){  long a=98374823947823578L;  int scale=12;  BigDecimal aNumber=BigDecimal.valueOf(a,scale);  String result="98374.823947823578";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  protected void showSystemMenu(){}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public void updateOtherValue(String type,AnimatableValue val){}  }
class C{  public static void main(String[] args) throws Exception {  double initialHeapSize=getHeapSize();  System.out.println("\nChecking weak references and reference queue");  ReferenceQueue<Object[]> wrq=new ReferenceQueue<Object[]>();  allocateUntilNextGC();  Reference<Object[]>[] wra=allocateReferenceArray(WEAK,0.5 * initialHeapSize,wrq);  double weakAvail=checkReferenceArray(wra,wrq);  check("Fraction of weak references before GC still live = " + weakAvail,(weakAvail == 1.0));  allocateDiscard(0.75 * initialHeapSize);  weakAvail=checkReferenceArray(wra,wrq);  check("Fraction of weak references after  GC still live = " + weakAvail,(weakAvail == 0.0));  System.out.println("\nChecking soft references and reference queue");  ReferenceQueue<Object[]> srq=new ReferenceQueue<Object[]>();  allocateUntilNextGC();  Reference<Object[]>[] sra=allocateReferenceArray(SOFT,0.75 * initialHeapSize,srq);  double softAvail=checkReferenceArray(sra,srq);  check("Fraction of soft references before GC still live = " + softAvail,(softAvail == 1.0));  allocateUntilOOM();  softAvail=checkReferenceArray(sra,srq);  check("Fraction of soft references after  GC still live = " + softAvail,(softAvail >= 0.00) && (softAvail <= 0.67),((softAvail >= 0.33) && (softAvail <= 0.66)) ? GOOD : POOR);  System.out.println();  getHeapSize();  System.out.print("\nOverall: ");  System.out.println((failCount == 0) ? "ALL TESTS PASSED" : (failCount + " FAILURES"));}  }
class C{  private String htmlDecode(String content){  return Jsoup.parse(content).text();}  }
class C{  public synchronized void notifyDone(Job doneJob){  LOG.debug("Done notification received for " + doneJob);  Set<Job> newReadyJobs=dagManager.removeJob(doneJob);  for (  Job jobToRun : newReadyJobs) {    LOG.debug("Job " + jobToRun + " is ready to run.");    jobsToRun.add(jobToRun);  }  incrementDoneJobCount();  countLock.lock();  try {    LOG.debug("Submitted jobs: " + submittedJobCount + " Pending jobs: "+ (submittedJobCount - doneJobCount)+ " Completed jobs: "+ doneJobCount);  }  finally {    countLock.unlock();  }}  }
class C{  public ASTRewriteCorrectionProposal(String name,ICompilationUnit cu,ASTRewrite rewrite,int relevance){  this(name,cu,rewrite,relevance,JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE));}  }
class C{  public static String msgType2String(int type){switch (type) {case AbstractMessage.CONNECT:    return "CONNECT";case AbstractMessage.CONNACK:  return "CONNACK";case AbstractMessage.PUBLISH:return "PUBLISH";case AbstractMessage.PUBACK:return "PUBACK";case AbstractMessage.PUBREC:return "PUBREC";case AbstractMessage.PUBREL:return "PUBREL";case AbstractMessage.PUBCOMP:return "PUBCOMP";case AbstractMessage.SUBSCRIBE:return "SUBSCRIBE";case AbstractMessage.SUBACK:return "SUBACK";case AbstractMessage.UNSUBSCRIBE:return "UNSUBSCRIBE";case AbstractMessage.UNSUBACK:return "UNSUBACK";case AbstractMessage.PINGREQ:return "PINGREQ";case AbstractMessage.PINGRESP:return "PINGRESP";case AbstractMessage.DISCONNECT:return "DISCONNECT";default :throw new RuntimeException("Can't decode message type " + type);}}  }
class C{  public void end(){  setCaretPosition(getText().length());}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  g2.setFont(this.font);  Size2D s=this.label.calculateDimensions(g2);  return new Size2D(calculateTotalWidth(s.getWidth()),calculateTotalHeight(s.getHeight()));}  }
class C{  public ActionEvent(Object source,int x,int y,boolean longPointer){  this.source=source;  this.keyEvent=x;  this.y=y;  this.longEvent=longPointer;  this.trigger=Type.PointerReleased;}  }
class C{  boolean resolve(ClassPrepareEvent event){  boolean failure=false;synchronized (eventRequestSpecs) {    for (    EventRequestSpec spec : eventRequestSpecs) {      if (!spec.isResolved()) {        try {          EventRequest eventRequest=spec.resolve(event);          if (eventRequest != null) {            MessageOutput.println("Set deferred",spec.toString());          }        } catch (        Exception e) {          MessageOutput.println("Unable to set deferred",new Object[]{spec.toString(),spec.errorMessageFor(e)});          failure=true;        }      }    }  }  return !failure;}  }
class C{  public static float[] concatAllFloat(float[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  float[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  @Override public void updateAfterMisfire(Calendar cal){  int instr=getMisfireInstruction();  if (instr == Trigger.MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY)   return;  if (instr == Trigger.MISFIRE_INSTRUCTION_SMART_POLICY) {    if (getRepeatCount() == 0) {      instr=MISFIRE_INSTRUCTION_FIRE_NOW;    } else     if (getRepeatCount() == REPEAT_INDEFINITELY) {      instr=MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT;    } else {      instr=MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT;    }  } else   if (instr == MISFIRE_INSTRUCTION_FIRE_NOW && getRepeatCount() != 0) {    instr=MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT;  }  if (instr == MISFIRE_INSTRUCTION_FIRE_NOW) {    setNextFireTime(new Date());  } else   if (instr == MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT) {    Date newFireTime=getFireTimeAfter(new Date());    while (newFireTime != null && cal != null && !cal.isTimeIncluded(newFireTime.getTime())) {      newFireTime=getFireTimeAfter(newFireTime);      if (newFireTime == null)       break;      java.util.Calendar c=java.util.Calendar.getInstance();      c.setTime(newFireTime);      if (c.get(java.util.Calendar.YEAR) > YEAR_TO_GIVEUP_SCHEDULING_AT) {        newFireTime=null;      }    }    setNextFireTime(newFireTime);  } else   if (instr == MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT) {    Date newFireTime=getFireTimeAfter(new Date());    while (newFireTime != null && cal != null && !cal.isTimeIncluded(newFireTime.getTime())) {      newFireTime=getFireTimeAfter(newFireTime);      if (newFireTime == null)       break;      java.util.Calendar c=java.util.Calendar.getInstance();      c.setTime(newFireTime);      if (c.get(java.util.Calendar.YEAR) > YEAR_TO_GIVEUP_SCHEDULING_AT) {        newFireTime=null;      }    }    if (newFireTime != null) {      int timesMissed=computeNumTimesFiredBetween(nextFireTime,newFireTime);      setTimesTriggered(getTimesTriggered() + timesMissed);    }    setNextFireTime(newFireTime);  } else   if (instr == MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT) {    Date newFireTime=new Date();    if (repeatCount != 0 && repeatCount != REPEAT_INDEFINITELY) {      setRepeatCount(getRepeatCount() - getTimesTriggered());      setTimesTriggered(0);    }    if (getEndTime() != null && getEndTime().before(newFireTime)) {      setNextFireTime(null);    } else {      setStartTime(newFireTime);      setNextFireTime(newFireTime);    }  } else   if (instr == MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT) {    Date newFireTime=new Date();    int timesMissed=computeNumTimesFiredBetween(nextFireTime,newFireTime);    if (repeatCount != 0 && repeatCount != REPEAT_INDEFINITELY) {      int remainingCount=getRepeatCount() - (getTimesTriggered() + timesMissed);      if (remainingCount <= 0) {        remainingCount=0;      }      setRepeatCount(remainingCount);      setTimesTriggered(0);    }    if (getEndTime() != null && getEndTime().before(newFireTime)) {      setNextFireTime(null);    } else {      setStartTime(newFireTime);      setNextFireTime(newFireTime);    }  }}  }
class C{  public void init() throws ServletException {}  }
class C{  RuleBasedCollationKey(String source,String key){  super(source);  this.key=key;}  }
class C{  public IntervalCategoryItemLabelGenerator(){  super(DEFAULT_LABEL_FORMAT_STRING,NumberFormat.getInstance());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void addImpl(Component comp,Object constraints,int index){  getContentPane().add(comp,constraints,index);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(java.lang.Math.floor(m_arg0.execute(xctxt).num()));}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void add(BigDecimalPolynomial b){  if (b.coeffs.length > coeffs.length) {    int N=coeffs.length;    coeffs=copyOf(coeffs,b.coeffs.length);    for (int i=N; i < coeffs.length; i++) {      coeffs[i]=ZERO;    }  }  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]=coeffs[i].add(b.coeffs[i]);  }}  }
class C{  public SetSubtitle(int playerId,String subtitle,boolean enable){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("subtitle",subtitle);  addParameterToRequest("enable",enable);}  }
class C{  private void rebuildTable(){  table.saveSelection(classColIdx);  final XTableModel model=table.getXTableModel();  model.getDataVector().clear();  model.fireTableDataChanged();  for (  final Class<? extends IColumn<?>> colClass : RepListColumnRegistry.COLUMN_LIST) {    final boolean isCustom=BaseCustomColumn.class.isAssignableFrom(colClass);    if (isCustom && Settings.REP_LIST_CUST_COL_1_NAME.skillLevel.isBelow())     continue;    final IColumn<?> column=RepListColumnRegistry.getColumnInstance(colClass);    if (column == null)     continue;    final int pos=rlcBean.getColumnClassList().indexOf(colClass) + 1;    final Vector<Object> row=Utils.<Object>asNewVector(colClass,pos > 0 ? pos : -1,column.getRicon(),column.getDisplayName(),pos > 0,isCustom,column.getDescription());    model.addRow(row);  }  table.getRowSorter().setSortKeys(Arrays.asList(new SortKey(posColIdx,SortOrder.ASCENDING)));  for (int i=table.getColumnCount() - 1; i >= 0; i--)   if (i != table.convertColumnIndexToView(descColIdx))   table.packColumns(i);  table.restoreSelection(classColIdx);}  }
class C{  public final double avgCost(){  return m_TotalCost / m_WithClass;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void gracefullyDisposeOf(final Iterable<? extends Disposable> disposables){  if (disposables != null) {    for (    final Disposable disposable : disposables) {      gracefullyDisposeOf(disposable);    }  }}  }
class C{  public void retainProgress(final String title,final String message,final int progress){  mTitle=title;  mMessage=message;  mProgress=progress;}  }
class C{  @Override public void init(RandomGenerator random){}  }
class C{  @VisibleForTesting void simulateAttachForTesting(){  mIsAttachedToWindow=true;  mIsAttachedToInstance=true;  mWasMeasured=true;}  }
class C{  public DefaultListCellRenderer(){  super();  setOpaque(true);  setBorder(getNoFocusBorder());  setName("List.cellRenderer");}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public void opc_invokespecial(short methodIndex,int numArgs,int numReturnValues){  emitByte(opc_invokespecial);  emitShort(methodIndex);  setStack(getStack() - numArgs - 1 + numReturnValues);}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,4,"2500");  childData=child.getData();  assertEquals("characterdataReplaceDataBeginingAssert","2500 North Ave. Dallas, Texas 98551",childData);}  }
class C{  @Override public AlarmEvent evaluate(AlarmPoint alarm,String trigger){  if (trigger.equals(AlarmPoint.TRIGGER_ACTIVATE)) {    return activation(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_DEACTIVATE)) {    return deactivation(alarm);  } else {    throw new IllegalArgumentException("'" + trigger + "' is not supported by this AlarmModel.");  }}  }
class C{  public RefactoringResult applyLinkedRename(LinkedRenameRefactoringApply apply) throws RefactoringException, CoreException {  RefactoringSession session=getRefactoringSession(apply.getSessionId());  if (session instanceof RenameLinkedModeRefactoringSession) {    RenameLinkedModeRefactoringSession renameSession=(RenameLinkedModeRefactoringSession)session;    try {      RefactoringResult refactoringResult=renameSession.doRename(apply.getNewName());      deleteRefactoringSession(apply.getSessionId());      return refactoringResult;    } catch (    InvocationTargetException|InterruptedException|AssertionFailedException e) {      LOG.error(e.getMessage(),e);      return DtoConverter.toRefactoringResultDto(org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus(e.getMessage()));    }  }  throw new RefactoringException("There is no RenameLinkedModeRefactoringSession.");}  }
class C{  public static String formatDate(Date date,String pattern){  return getSimplDateFormat(pattern).format(date);}  }
class C{  public void testRemainderKnuthMultiDigitsByOneDigit(){  byte aBytes[]={113,-83,123,-5,18,-34,67,39,-29};  byte bBytes[]={2,-3,-4,-50};  int aSign=1;  int bSign=-1;  byte rBytes[]={2,-37,-60,59};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  protected FilterInputStream(@Nullable InputStream in){  this.in=in;}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (internalDTDsubset) {    if (includeInternalDTDDeclarations) {      addDTDDeclaration(new ElementDecl(name,model));    }  } else {    if (includeExternalDTDDeclarations) {      addExternalDTDDeclaration(new ElementDecl(name,model));    }  }}  }
class C{  public Entry copy(){  Entry e=new Entry(mVal,mXIndex,mData);  return e;}  }
class C{  public boolean isInclude(){  return include;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation docImpl;  boolean state;  doc=(Document)load("staff",false);  docImpl=doc.getImplementation();  state=docImpl.hasFeature("XML","1.0");  assertTrue("documentGetImplementationAssert",state);}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  public FunctionFirstPassGroupingCollector(ValueSource groupByVS,Map<?,?> vsContext,Sort groupSort,int topNGroups) throws IOException {  super(groupSort,topNGroups);  this.groupByVS=groupByVS;  this.vsContext=vsContext;}  }
class C{  public boolean equalsContents(Object o){  if (this == o) {    return true;  }  if (o == null) {    return false;  }  if (o.getClass() != getClass()) {    return false;  }  if (!super.equalsContents(o)) {    return false;  }  Referenceable obj=(Referenceable)o;  if (!traitNames.equals(obj.getTraits())) {    return false;  }  return true;}  }
class C{  public boolean isApparent(){  if (isVisible) {    return true;  }  if (collapsedUnder != null) {    return collapsedUnder.isApparent();  }  return false;}  }
class C{  public static ITypeBinding findTypeInHierarchy(ITypeBinding hierarchyType,String fullyQualifiedTypeName){  if (hierarchyType.isArray() || hierarchyType.isPrimitive()) {    return null;  }  if (fullyQualifiedTypeName.equals(hierarchyType.getQualifiedName())) {    return hierarchyType;  }  ITypeBinding superClass=hierarchyType.getSuperclass();  if (superClass != null) {    ITypeBinding res=findTypeInHierarchy(superClass,fullyQualifiedTypeName);    if (res != null) {      return res;    }  }  ITypeBinding[] superInterfaces=hierarchyType.getInterfaces();  for (int i=0; i < superInterfaces.length; i++) {    ITypeBinding res=findTypeInHierarchy(superInterfaces[i],fullyQualifiedTypeName);    if (res != null) {      return res;    }  }  return null;}  }
class C{  public static void push(int method){  Thread t=Thread.currentThread();  if (t.getClass() == CODE) {    CodenameOneThread c=(CodenameOneThread)t;    c.pushStack(method);  }}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int readInt() throws IOException {  return 'W';}  }
class C{  @Override public EmptyBindingSet copyMinusErrors(final IVariable[] variablesToDrop){  return this;}  }
class C{  public boolean isSingleAssignment(){  Object oo=get_Value(COLUMNNAME_IsSingleAssignment);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Source<Float> fromNegativeFloatMaxToNegativeZero(){  return Compositions.weightWithValues(Floats.fromNegativeFloatMaxToNegativeZero(),-Float.MAX_VALUE,-0f);}  }
class C{  @Override public void onTokenRefresh(){  Log.d(LOG_TAG,"onTokenRefresh");  Matrix.getInstance(this).getSharedGcmRegistrationManager().refreshPushToken(this,null);}  }
class C{  protected synchronized void cullCache(){  if (maxCacheSize < 0) {    return;  }  if (map.size() > maxCacheSize) {    deleteExpiredEntries();    int desiredSize=(int)(maxCacheSize * .90);    for (int i=map.size(); i > desiredSize; i--) {      if (remove(lastAccessedList.getLast().object,true) == null) {        System.err.println("Error attempting to cullCache with remove(" + lastAccessedList.getLast().object.toString() + ") - "+ "cacheObject not found in cache!");        lastAccessedList.getLast().remove();      }    }  }}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public static long sizeOf(char[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + (long)Character.BYTES * arr.length);}  }
class C{  public int readInt(){  return (data[position++] & 0xFF) << 24 | (data[position++] & 0xFF) << 16 | (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF);}  }
class C{  public PaneProgPane(){}  }
class C{  public LiveExprNode pushNeg(boolean hasNeg){  if (hasNeg) {    return new LNAll(getBody().pushNeg(true));  } else {    return new LNEven(getBody().pushNeg(false));  }}  }
class C{  public int encodeBase64Partial(int bits,int outputBytes,char[] buffer,int outPtr){  buffer[outPtr++]=_base64ToAsciiC[(bits >> 18) & 0x3F];  buffer[outPtr++]=_base64ToAsciiC[(bits >> 12) & 0x3F];  if (_usesPadding) {    buffer[outPtr++]=(outputBytes == 2) ? _base64ToAsciiC[(bits >> 6) & 0x3F] : _paddingChar;    buffer[outPtr++]=_paddingChar;  } else {    if (outputBytes == 2) {      buffer[outPtr++]=_base64ToAsciiC[(bits >> 6) & 0x3F];    }  }  return outPtr;}  }
class C{  @Override protected DataObject queryResource(URI id){  QuotaOfCinder objQuotaOfCinder=_dbClient.queryObject(QuotaOfCinder.class,id);  return objQuotaOfCinder;}  }
class C{  protected void requestWindowFeatureHook(){}  }
class C{  private static void matchIP(String expectedIP,X509Certificate cert) throws CertificateException {  Collection<List<?>> subjAltNames=cert.getSubjectAlternativeNames();  if (subjAltNames == null) {    throw new CertificateException("No subject alternative names present");  }  for (  List<?> next : subjAltNames) {    if (((Integer)next.get(0)).intValue() == ALTNAME_IP) {      String ipAddress=(String)next.get(1);      if (expectedIP.equalsIgnoreCase(ipAddress)) {        return;      } else {        try {          if (InetAddress.getByName(expectedIP).equals(InetAddress.getByName(ipAddress))) {            return;          }        } catch (        UnknownHostException e) {        }catch (        SecurityException e) {        }      }    }  }  throw new CertificateException("No subject alternative " + "names matching " + "IP address " + expectedIP + " found");}  }
class C{  private StructuredPostal(){}  }
class C{  private Map<String,SearchComponent> loadSearchComponents(){  Map<String,SearchComponent> components=new HashMap<>();  initPlugins(components,SearchComponent.class);  for (  Map.Entry<String,SearchComponent> e : components.entrySet()) {    SearchComponent c=e.getValue();    if (c instanceof HighlightComponent) {      HighlightComponent hl=(HighlightComponent)c;      if (!HighlightComponent.COMPONENT_NAME.equals(e.getKey())) {        components.put(HighlightComponent.COMPONENT_NAME,hl);      }      break;    }  }  addIfNotPresent(components,HighlightComponent.COMPONENT_NAME,HighlightComponent.class);  addIfNotPresent(components,QueryComponent.COMPONENT_NAME,QueryComponent.class);  addIfNotPresent(components,FacetComponent.COMPONENT_NAME,FacetComponent.class);  addIfNotPresent(components,MoreLikeThisComponent.COMPONENT_NAME,MoreLikeThisComponent.class);  addIfNotPresent(components,StatsComponent.COMPONENT_NAME,StatsComponent.class);  addIfNotPresent(components,DebugComponent.COMPONENT_NAME,DebugComponent.class);  addIfNotPresent(components,RealTimeGetComponent.COMPONENT_NAME,RealTimeGetComponent.class);  addIfNotPresent(components,ExpandComponent.COMPONENT_NAME,ExpandComponent.class);  return components;}  }
class C{  public static void substituteProperties(Node node,Properties properties){  Node child;  Node next=node.getFirstChild();  while ((child=next) != null) {    next=child.getNextSibling();    if (child.getNodeType() == Node.TEXT_NODE) {      child.setNodeValue(PropertiesUtil.substituteProperty(child.getNodeValue(),properties));    } else     if (child.getNodeType() == Node.ELEMENT_NODE) {      NamedNodeMap attributes=child.getAttributes();      for (int i=0; i < attributes.getLength(); i++) {        Node attribute=attributes.item(i);        attribute.setNodeValue(PropertiesUtil.substituteProperty(attribute.getNodeValue(),properties));      }      substituteProperties(child,properties);    }  }}  }
class C{  public void addAnimatedNode(Region node){  addAnimatedNode(node,null);}  }
class C{  @Override protected void handleVariableChangedEvent(Variable variable,int index,Parameter.ChangeType type){  if (variable == getScaledData()) {    residualKnown=false;    traceKnown=false;    likelihoodKnown=false;    if (!RecomputeResiduals) {      if (index != -1 && !changedValues.contains(index))       changedValues.add(index); else {        totalRecompute=true;        changedValues.clear();      }      dataKnown=false;    }  }  if (variable == factors) {    if (!RecomputeFactors) {      factorsKnown=false;      int row=index / factors.getRowDimension();      if (index != -1)       for (int i=0; i < data.getRowDimension(); i++) {        if (!changedValues.contains(row * data.getRowDimension() + i))         changedValues.add(row * data.getRowDimension() + i);      } else {        totalRecompute=true;        changedValues.clear();      }    }    LxFKnown=false;    residualKnown=false;    traceKnown=false;    likelihoodKnown=false;  }  if (variable == loadings) {    if (!RecomputeLoadings) {      loadingsKnown=false;      int col=index % loadings.getRowDimension();      if (index != -1) {        for (int i=0; i < data.getColumnDimension(); i++) {          if (!changedValues.contains(i * data.getRowDimension() + col))           changedValues.add(i * data.getRowDimension() + col);        }      } else {        totalRecompute=true;        changedValues.clear();      }    }    LxFKnown=false;    residualKnown=false;    traceKnown=false;    likelihoodKnown=false;  }  if (variable == colPrecision) {    logDetColKnown=false;    traceKnown=false;    likelihoodKnown=false;  }}  }
class C{  @Override public Properties trackScreenView(@NonNull String screenName){  return trackScreenView(screenName,null,null);}  }
class C{  public static int fieldOffsetRelative(BinaryPositionReadable stream,int pos,int fieldOffsetSize){  int res;  if (fieldOffsetSize == OFFSET_1)   res=(int)stream.readBytePositioned(pos) & 0xFF; else   if (fieldOffsetSize == OFFSET_2)   res=(int)stream.readShortPositioned(pos) & 0xFFFF; else   res=stream.readIntPositioned(pos);  return res;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TSink<byte[]> sendBytes(TStream<byte[]> stream){  Objects.requireNonNull(stream,"stream");  return sendBinary(stream,null);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    if (retryPolicy != null) {      retryPolicy.retry(exception);    } else {      Loger.debug("not retry policy");    }  } catch (  VolleyError e) {    Loger.debug(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  Loger.debug(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static final void showToast(Context context,String msg){  if (cacheToast != null) {    cacheToast.cancel();  }  cacheToast=Toast.makeText(context.getApplicationContext(),msg,Toast.LENGTH_SHORT);  cacheToast.show();}  }
class C{  @RequestMapping(value="/annuals",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> update(@RequestBody Annual annual) throws URISyntaxException {  log.debug("REST request to update Annual : {}",annual);  if (annual.getId() == null) {    return create(annual);  }  annual=annualRepository.save(annual);  return ResponseEntity.ok().build();}  }
class C{  synchronized void unregister(String jobId,String opletId){  String prefix=mkStreamIdNamePrefix(jobId,opletId);  List<StreamScope<?>> toUnregister=new ArrayList<>();  for (  String name : getNames()) {    if (name.startsWith(prefix)) {      toUnregister.add(lookup(name));    }  }  for (  StreamScope<?> streamScope : toUnregister) {    unregister(streamScope);  }}  }
class C{  public static void writeln(String s,boolean flush){  write(s);  writelnWithFlush(flush);}  }
class C{  @Override public void updateObject(String columnLabel,Object x,int scale) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + quote(columnLabel) + ", x, "+ scale+ ");");    }    update(columnLabel,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public YieldInterval(){  super(Harness.options,"Yield Interval","Yield interval for fixed scheduler policies",Integer.valueOf(System.getProperty("mmtk.harness.yieldpolicy.fixed.interval","10")));}  }
class C{  public int index(){  return _index;}  }
class C{  public String convertIterableOfTClassifierToString(EDataType eDataType,Object instanceValue){  return super.convertToString(instanceValue);}  }
class C{  @Override public void generateOptimizedBoolean(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  if (this.constant != Constant.NotAConstant) {    super.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    return;  }  if (((this.bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL) {    if ((this.left.implicitConversion & COMPILE_TYPE_MASK) == T_boolean) {      generateOptimizedBooleanEqual(currentScope,trueLabel,falseLabel,valueRequired);    } else {      generateOptimizedNonBooleanEqual(currentScope,trueLabel,falseLabel,valueRequired);    }  } else {    if ((this.left.implicitConversion & COMPILE_TYPE_MASK) == T_boolean) {      generateOptimizedBooleanEqual(currentScope,falseLabel,trueLabel,valueRequired);    } else {      generateOptimizedNonBooleanEqual(currentScope,falseLabel,trueLabel,valueRequired);    }  }}  }
class C{  public JSONArray(Collection collection){  this.myArrayList=new ArrayList();  if (collection != null) {    Iterator iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  ServerMember update(Member.Type type,Instant time){  if (this.type != type) {    this.type=Assert.notNull(type,"type");    if (time.isAfter(updated)) {      this.updated=Assert.notNull(time,"time");    }    if (typeChangeListeners != null) {      typeChangeListeners.accept(type);    }  }  return this;}  }
class C{  private boolean collectVersionConflictsToIgnore(){  log("Checking for orphans in " + ignoreConflictsFile.getName(),verboseLevel);  boolean orphansFound=false;  InterpolatedProperties properties=new InterpolatedProperties();  try (InputStream inputStream=new FileInputStream(ignoreConflictsFile);Reader reader=new InputStreamReader(inputStream,StandardCharsets.UTF_8)){    properties.load(reader);  } catch (  IOException e) {    throw new BuildException("Exception reading " + ignoreConflictsFile + ": "+ e.toString(),e);  }  for (  Object obj : properties.keySet()) {    String coordinate=(String)obj;    if (COORDINATE_KEY_PATTERN.matcher(coordinate).matches()) {      if (!directDependencies.containsKey(coordinate)) {        orphansFound=true;        log("ORPHAN coordinate key '" + coordinate + "' in "+ ignoreConflictsFile.getName()+ " is not found in "+ centralizedVersionsFile.getName(),Project.MSG_ERR);      } else {        String versionsToIgnore=properties.getProperty(coordinate);        List<String> ignore=Arrays.asList(versionsToIgnore.trim().split("\\s*,\\s*|\\s+"));        ignoreConflictVersions.put(coordinate,new HashSet<>(ignore));      }    }  }  return !orphansFound;}  }
class C{  @Override protected final long total(){  return Memory.total();}  }
class C{  public int readServerResponse() throws IOException {  StringBuffer replyBuf=new StringBuffer(32);  int c;  int continuingCode=-1;  int code;  String response;  serverResponse.setSize(0);  while (true) {    while ((c=serverInput.read()) != -1) {      if (c == '\r') {        if ((c=serverInput.read()) != '\n')         replyBuf.append('\r');      }      replyBuf.append((char)c);      if (c == '\n')       break;    }    response=replyBuf.toString();    replyBuf.setLength(0);    if (debug) {      System.out.print(response);    }    if (response.length() == 0) {      code=-1;    } else {      try {        code=Integer.parseInt(response.substring(0,3));      } catch (      NumberFormatException e) {        code=-1;      }catch (      StringIndexOutOfBoundsException e) {        continue;      }    }    serverResponse.addElement(response);    if (continuingCode != -1) {      if (code != continuingCode || (response.length() >= 4 && response.charAt(3) == '-')) {        continue;      } else {        continuingCode=-1;        break;      }    } else     if (response.length() >= 4 && response.charAt(3) == '-') {      continuingCode=code;      continue;    } else {      break;    }  }  return lastReplyCode=code;}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public final F f(){  return f;}  }
class C{  public void load() throws IOException {  parseHeaderItem();  loadStrings();  loadTypeIds();  loadProtoIds();  loadFieldIds();  loadMethodIds();  loadClassDefs();  markInternalClasses();}  }
class C{  public BipartiteMatchingMinCost(DisjointPairs<?,?> pr){  super(pr.numVertices(),pr.sourceIndex(),pr.sinkIndex());  this.populate(pr.getEdges());  this.pr=pr;}  }
class C{  public AnimationBuilder repeatMode(@ViewAnimator.RepeatMode int repeatMode){  viewAnimator.repeatMode(repeatMode);  return this;}  }
class C{  private static byte[] decode_base64(String s,int maxolen) throws IllegalArgumentException {  StringBuffer rs=new StringBuffer();  int off=0, slen=s.length(), olen=0;  byte ret[];  byte c1, c2, c3, c4, o;  if (maxolen <= 0)   throw new IllegalArgumentException("Invalid maxolen");  while (off < slen - 1 && olen < maxolen) {    c1=char64(s.charAt(off++));    c2=char64(s.charAt(off++));    if (c1 == -1 || c2 == -1)     break;    o=(byte)(c1 << 2);    o|=(c2 & 0x30) >> 4;    rs.append((char)o);    if (++olen >= maxolen || off >= slen)     break;    c3=char64(s.charAt(off++));    if (c3 == -1)     break;    o=(byte)((c2 & 0x0f) << 4);    o|=(c3 & 0x3c) >> 2;    rs.append((char)o);    if (++olen >= maxolen || off >= slen)     break;    c4=char64(s.charAt(off++));    o=(byte)((c3 & 0x03) << 6);    o|=c4;    rs.append((char)o);    ++olen;  }  ret=new byte[olen];  for (off=0; off < olen; off++)   ret[off]=(byte)rs.charAt(off);  return ret;}  }
class C{  protected CheckList(IceMediaStream parentStream){  this.parentStream=parentStream;  logger=new Logger(classLogger,parentStream.getParentAgent().getLogger());}  }
class C{  private void checkManifestPermissions(){  if (ActivityCompat.checkSelfPermission(AuthenticationActivity.this,android.Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {    ActivityCompat.requestPermissions(AuthenticationActivity.this,new String[]{android.Manifest.permission.READ_PHONE_STATE,android.Manifest.permission.ACCESS_COARSE_LOCATION,android.Manifest.permission.ACCESS_FINE_LOCATION,android.Manifest.permission.WRITE_EXTERNAL_STORAGE},110);  } else {    getConfigurationsFromServer();  }}  }
class C{  private void suspendStepsMatchingProperty(Workflow workflow){  String suspendOn=_coordinator.getPropertyInfo().getProperty(WORKFLOW_SUSPEND_ON_CLASS_METHOD_PROPERTY);  if (_suspendClassMethodTestOnly != null) {    suspendOn=_suspendClassMethodTestOnly;  }  String suspendClass=null;  String suspendMethod=null;  if (suspendOn != null && !suspendOn.trim().isEmpty()) {    _log.info("suspend on class/method is SET to: " + suspendOn);    if (suspendOn.contains(".")) {      suspendClass=suspendOn.substring(0,suspendOn.indexOf("."));      suspendMethod=suspendOn.substring(suspendOn.indexOf(".") + 1);    } else {      suspendClass=suspendOn;      suspendMethod="*";    }    for (    Step step : workflow.getStepMap().values()) {      boolean suspendStep=false;      if (suspendClass.equals("*") && suspendMethod.equals("*")) {        suspendStep=true;      } else       if (step.controllerName.endsWith(suspendClass) && (step.executeMethod.methodName.equals(suspendMethod) || suspendMethod.equals("*"))) {        suspendStep=true;      } else       if (suspendClass.equals("*") && step.executeMethod.methodName.equals(suspendMethod)) {        suspendStep=true;      }      if (suspendStep) {        logStep(workflow,step);        if (workflow.getSuspendSteps() == null) {          workflow.setSuspendSteps(new HashSet<URI>());        }        _log.info("Adding step " + step.description + " to workflow list of steps to suspend: "+ workflow._workflowURI.toString());        workflow.getSuspendSteps().add(step.workflowStepURI);      }    }  }}  }
class C{  public long fetchIntegerAsLong() throws BerException {  return fetchIntegerAsLong(IntegerTag);}  }
class C{  public static int Hash(long fp){  return (int)fp;}  }
class C{  public static boolean isEmpty(String str,boolean trimWhitespaces){  if (str == null)   return true;  if (trimWhitespaces)   return str.trim().length() == 0; else   return str.length() == 0;}  }
class C{  public static boolean hasCache(String fileName){  return new File(pathForCacheEntry(fileName)).exists();}  }
class C{  public static float[] createGaussianKernel1D(float sigma,boolean normalize){  int size=3;  float[] gaussianKernel;  if (sigma <= 0) {    gaussianKernel=new float[3];    gaussianKernel[1]=1;  } else {    size=Math.max(3,(int)(2 * (int)(3 * sigma + 0.5) + 1));    float two_sq_sigma=2 * sigma * sigma;    gaussianKernel=new float[size];    for (int x=size / 2; x >= 0; --x) {      float val=(float)Math.exp(-(float)(x * x) / two_sq_sigma);      gaussianKernel[size / 2 - x]=val;      gaussianKernel[size / 2 + x]=val;    }  }  if (normalize) {    float sum=0;    for (    float value : gaussianKernel)     sum+=value;    for (int i=0; i < gaussianKernel.length; i++)     gaussianKernel[i]/=sum;  }  return gaussianKernel;}  }
class C{  public RecordBuffer<R> remove(List<Integer> itemsToRemoveSorted){  if (!itemsToRemoveSorted.isEmpty()) {    Iterator<Integer> toRemoveIt=itemsToRemoveSorted.iterator();    int toRemoveIndex=toRemoveIt.next();    int newIndex=toRemoveIndex;    for (int originalIndex=toRemoveIndex; originalIndex < records.size(); ++originalIndex) {      if (originalIndex == toRemoveIndex) {        currentSizeBytes-=records.get(toRemoveIndex).length();        toRemoveIndex=toRemoveIt.hasNext() ? toRemoveIt.next() : -1;      } else {        records.set(newIndex++,records.get(originalIndex));      }    }    records.subList(newIndex,records.size()).clear();  }  return this;}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (Iterator<E> it=q.iterator(); it.hasNext(); ) {      if (o == it.next()) {        it.remove();        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  public static TextArea create(String text,int columns){  if (Display.impl.isNativeInputSupported()) {    return new TextArea(text,1,columns);  }  return new TextField(text,columns);}  }
class C{  private void parseArmor(Element armorTag,Entity entity,int loc){  String points=armorTag.getAttribute(POINTS);  String type=armorTag.getAttribute(TYPE);  if ((points == null) || (points.length() == 0)) {    warning.append("Could not find points for armor.\n");  } else {    int pointsVal=-1;    try {      pointsVal=Integer.parseInt(points);    } catch (    NumberFormatException excep) {    }    if (points.equals(NA)) {      pointsVal=IArmorState.ARMOR_NA;    } else     if (points.equals(DESTROYED)) {      pointsVal=IArmorState.ARMOR_DESTROYED;    } else     if ((pointsVal < 0) || (pointsVal > 2000)) {      warning.append("Found invalid points value: ").append(points).append(".\n");      return;    }    if ((type.length() == 0) || type.equals(FRONT)) {      if (entity.getOArmor(loc) < pointsVal) {        warning.append("The entity, ").append(entity.getShortName()).append(" does not start with ").append(pointsVal).append(" points of armor for location: ").append(loc).append(".\n");      } else {        entity.setArmor(pointsVal,loc);      }    } else     if (type.equals(INTERNAL)) {      if (entity.getOInternal(loc) < pointsVal) {        warning.append("The entity, ").append(entity.getShortName()).append(" does not start with ").append(pointsVal).append(" points of internal structure for " + "location: ").append(loc).append(".\n");      } else {        entity.setInternal(pointsVal,loc);      }    } else     if (type.equals(REAR)) {      if (!entity.hasRearArmor(loc)) {        warning.append("The entity, ").append(entity.getShortName()).append(" has no rear armor for location: ").append(loc).append(".\n");      } else       if (entity.getOArmor(loc,true) < pointsVal) {        warning.append("The entity, ").append(entity.getShortName()).append(" does not start with ").append(pointsVal).append(" points of rear armor for location: ").append(loc).append(".\n");      } else {        entity.setArmor(pointsVal,loc,true);      }    }  }}  }
class C{  public void testIsCheckSumValid(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  assertEquals(true,instance.isCheckSumValid(msgStandalone));  assertEquals(false,instance.isCheckSumValid(msgBadChkSumStandalone));}  }
class C{  public boolean minValue(double val,double minVal){  return GenericValidator.minValue(val,minVal);}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("VarargsTarg");  targetClass=(ClassType)bpe.location().declaringType();  mainThread=bpe.thread();  bpe=resumeTo("VarargsTarg","bkpt","()V");  ReferenceType rt=findReferenceType("VarargsTarg");  List mList;  mList=rt.methodsByName("varString");  Method varString=(Method)mList.get(0);  mList=rt.methodsByName("varString2");  Method varString2=(Method)mList.get(0);  if (!varString.isVarArgs()) {    fail("failure: varString is not flagged as being var args");  }  if (!varString2.isVarArgs()) {    fail("failure: varString2 is not flagged as being var args");  }{    ArrayList nullArg1=new ArrayList(0);    doInvoke(targetClass,varString,nullArg1,"");  }{    ArrayList nullArg1=new ArrayList(1);    nullArg1.add(null);    doInvoke(targetClass,varString,nullArg1,"-null-");  }{    ArrayList nullArg2=new ArrayList(1);    nullArg2.add(vm().mirrorOf(9));    doInvoke(targetClass,varString2,nullArg2,"9");  }{    ArrayList nullArg2=new ArrayList(2);    nullArg2.add(vm().mirrorOf(9));    nullArg2.add(null);    doInvoke(targetClass,varString2,nullArg2,"9-null-");  }{    ArrayList args1=new ArrayList(4);    args1.add(vm().mirrorOf("1"));    doInvoke(targetClass,varString,args1,"1");    args1.add(vm().mirrorOf("2"));    args1.add(vm().mirrorOf("3"));    args1.add(vm().mirrorOf("4"));    doInvoke(targetClass,varString,args1,"1234");  }{    ArrayList args2=new ArrayList(2);    args2.add(vm().mirrorOf(9));    args2.add(vm().mirrorOf("1"));    doInvoke(targetClass,varString2,args2,"91");    args2.add(vm().mirrorOf("2"));    doInvoke(targetClass,varString2,args2,"912");  }{    Field ff=targetClass.fieldByName("strArray");    Value vv1=targetClass.getValue(ff);    ArrayList argsArray=new ArrayList(1);    argsArray.add(vv1);    doInvoke(targetClass,varString,argsArray,"ab");    argsArray.add(vm().mirrorOf("x"));    boolean isOk=false;    try {      doInvokeNoVerify(targetClass,varString,argsArray);    } catch (    Exception ee) {      isOk=true;    }    if (!isOk) {      fail("failure: an array and a String didn't cause an exception");    }  }{    Field vtField=targetClass.fieldByName("vt1");    Value vv1=targetClass.getValue(vtField);    vtField=targetClass.fieldByName("vt2");    Value vv2=targetClass.getValue(vtField);    Value vv3;{      mList=rt.methodsByName("<init>");      Method ctor=(Method)mList.get(0);      if (!ctor.isVarArgs()) {        fail("failure: Constructor is not varargs");      }      ArrayList argsArray=new ArrayList(2);      argsArray.add(vm().mirrorOf("vt3"));      argsArray.add(vm().mirrorOf("xx"));      vv3=targetClass.newInstance(mainThread,ctor,argsArray,0);    }    mList=rt.methodsByName("varStringInstance");    Method varStringInstance=(Method)mList.get(0);    ArrayList argsArray=new ArrayList(3);    argsArray.add(vv1);    argsArray.add(vv2);    argsArray.add(vv3);    doInvoke(vv1,varStringInstance,argsArray,"vt1: vt1vt2vt3xx");  }{    List mlist;    Method mm;    ArrayList ll=new ArrayList(2);    mlist=rt.methodsByName("fixedInt");    mm=(Method)mlist.get(0);    ll.add(vm().mirrorOf(21));    doInvoke(targetClass,mm,ll,"21");    mlist=rt.methodsByName("varInt");    mm=(Method)mlist.get(0);    Field ff=targetClass.fieldByName("intArray");    Value vv1=targetClass.getValue(ff);    ll.set(0,vv1);    doInvoke(targetClass,mm,ll,"12");    ll.set(0,vm().mirrorOf(21));    ll.add(vm().mirrorOf(22));    doInvoke(targetClass,mm,ll,"2122");    mlist=rt.methodsByName("varInteger");    mm=(Method)mlist.get(0);  }  listenUntilVMDisconnect();  if (!testFailed) {    println("VarargsTest: passed");  } else {    throw new Exception("VarargsTest: failed");  }}  }
class C{  public void logError(String message){  LogUtils.logError(log,null,message);}  }
class C{  protected float toDp(final float px){  return px / views[0].getContext().getResources().getDisplayMetrics().density;}  }
class C{  public WriteMultipleCoilsResponse(int ref,int count){  super();  reference=ref;  bitCount=count;  setDataLength(4);}  }
class C{  public long roundCeiling(long instant){  throw unsupported();}  }
class C{  public boolean isAcceptSetted(int acceptor){  updateArrays();  int p=this.controller.getCurrentViewPos(acceptor);  if (p >= 0) {    return accept[p] != null;  } else {    return false;  }}  }
class C{  @NotNull @ObjectiveCName("bindUploadWithRid:withCallback:") public UploadFileVM bindUpload(long rid,UploadFileVMCallback callback){  return new UploadFileVM(rid,callback,modules);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_FIELD_ACCESSOR__BODY:    setBody((Block)null);  return;case N4JSPackage.N4_FIELD_ACCESSOR__LOK:set_lok((LocalArgumentsVariable)null);return;case N4JSPackage.N4_FIELD_ACCESSOR__DECLARED_NAME:setDeclaredName((LiteralOrComputedPropertyName)null);return;}super.eUnset(featureID);}  }
class C{  public void put(String key,int value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  public boolean isForbiddenBitSet(){  return forbiddenZeroBit;}  }
class C{  public boolean addFieldValues(Object[] fieldValues){  return super.add(fieldValues);}  }
class C{  void notifyFailure(Throwable exception){synchronized (waitObject) {    isComplete=true;    if (exception instanceof MqttException) {      pendingException=(MqttException)exception;    } else {      pendingException=new MqttException(exception);    }    waitObject.notifyAll();    if (exception instanceof MqttException) {      lastException=(MqttException)exception;    }    if (listener != null) {      listener.onFailure(this,exception);    }  }}  }
class C{  void readBlock(IndexInput in,byte[] encoded,int[] decoded) throws IOException {  final int numBits=in.readByte();  assert numBits <= 32 : numBits;  if (numBits == ALL_VALUES_EQUAL) {    final int value=in.readVInt();    Arrays.fill(decoded,0,BLOCK_SIZE,value);    return;  }  final int encodedSize=encodedSizes[numBits];  in.readBytes(encoded,0,encodedSize);  final PackedInts.Decoder decoder=decoders[numBits];  final int iters=iterations[numBits];  assert iters * decoder.byteValueCount() >= BLOCK_SIZE;  decoder.decode(encoded,0,decoded,0,iters);}  }
class C{  public Check basicGetCheck(){  return check;}  }
class C{  @Override public boolean onEquipped(RPEntity equipper,String slot){  super.onEquipped(equipper,slot);  Outfit flagOutfit;  flagOutfit=new Outfit(this.detailValue,null,null,null,null);  equipper.put("outfit_colors","detail",this.colorValue);  equipper.setOutfit(flagOutfit.putOver(equipper.getOutfit()));  return true;}  }
class C{  private Object readResolve(){  return iChronology.era();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected Page(Wikipedia wiki,long id,de.tudarmstadt.ukp.wikipedia.api.hibernate.Page hibernatePage) throws WikiApiException {  this.wiki=wiki;  this.pageDAO=new PageDAO(wiki);  this.hibernatePage=hibernatePage;}  }
class C{  public PDFFontDescriptor(String basefont){  setFontName(basefont);}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=IMAGE_WIDTH + MAX_TEXT_WIDTH + TOAST_HEIGHT;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override public void registerContentObserver(Uri uri,boolean notifyForDescendents,ContentObserver observer){}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(this.addrType);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putOctetString(address);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public static void i(String msg){  if (sIsLogEnabled) {    Log.i(sApplicationTag,getContent(getCurrentStackTraceElement()) + ">" + msg);  }}  }
class C{  HttpResponseTemp(T data,ResultStat code,String msg){  this.result=data;  this.resultCode=code.responseCode;  this.resultMsg=msg;}  }
class C{  private void readObject(){}  }
class C{  public void paint(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c){  Rectangle alloc=bounds.getBounds();  try {    TextUI mapper=c.getUI();    Rectangle p0=mapper.modelToView(c,offs0);    Rectangle p1=mapper.modelToView(c,offs1);    Color color=getColor();    if (color == null) {      g.setColor(c.getSelectionColor());    } else {      g.setColor(color);    }    boolean firstIsDot=false;    boolean secondIsDot=false;    if (c.isEditable()) {      int dot=c.getCaretPosition();      firstIsDot=(offs0 == dot);      secondIsDot=(offs1 == dot);    }    if (p0.y == p1.y) {      Rectangle r=p0.union(p1);      if (r.width > 0) {        if (firstIsDot) {          r.x++;          r.width--;        } else         if (secondIsDot) {          r.width--;        }      }      g.fillRect(r.x,r.y,r.width,r.height);    } else {      int p0ToMarginWidth=alloc.x + alloc.width - p0.x;      if (firstIsDot && p0ToMarginWidth > 0) {        p0.x++;        p0ToMarginWidth--;      }      g.fillRect(p0.x,p0.y,p0ToMarginWidth,p0.height);      if ((p0.y + p0.height) != p1.y) {        g.fillRect(alloc.x,p0.y + p0.height,alloc.width,p1.y - (p0.y + p0.height));      }      if (secondIsDot && p1.x > alloc.x) {        p1.x--;      }      g.fillRect(alloc.x,p1.y,(p1.x - alloc.x),p1.height);    }  } catch (  BadLocationException e) {  }}  }
class C{  public ContainerTag with(DomContent child){  if (this == child) {    throw new Error("Cannot append a tag to itself.");  }  children.add(child);  return this;}  }
class C{  private void broadcastNewClient(Client client){  JsonObject jBroadcast=new JsonObject();  JsonObject jData=new JsonObject();  jData.addProperty(ACTION_KEY,BROADCAST_NEW_CLIENT);  JsonObject jClient=gson.toJsonTree(client).getAsJsonObject();  jData.add(CLIENT_KEY,jClient);  jBroadcast.add(DATA_KEY,jData);  friendlyGcmServer.send(NEW_CLIENT_TOPIC,jBroadcast);}  }
class C{  private void validateBusinessObjectFormatDdlRequest(BusinessObjectFormatDdlRequest request){  Assert.notNull(request,"A business object format DDL request must be specified.");  Assert.hasText(request.getNamespace(),"A namespace must be specified.");  request.setNamespace(request.getNamespace().trim());  Assert.hasText(request.getBusinessObjectDefinitionName(),"A business object definition name must be specified.");  request.setBusinessObjectDefinitionName(request.getBusinessObjectDefinitionName().trim());  Assert.hasText(request.getBusinessObjectFormatUsage(),"A business object format usage must be specified.");  request.setBusinessObjectFormatUsage(request.getBusinessObjectFormatUsage().trim());  Assert.hasText(request.getBusinessObjectFormatFileType(),"A business object format file type must be specified.");  request.setBusinessObjectFormatFileType(request.getBusinessObjectFormatFileType().trim());  Assert.notNull(request.getOutputFormat(),"An output format must be specified.");  Assert.hasText(request.getTableName(),"A table name must be specified.");  request.setTableName(request.getTableName().trim());  if (BooleanUtils.isTrue(request.isReplaceColumns())) {    Assert.isTrue(BooleanUtils.isNotTrue(request.isIncludeDropTableStatement()),"'includeDropTableStatement' must not be specified when 'replaceColumns' is true");    Assert.isTrue(BooleanUtils.isNotTrue(request.isIncludeIfNotExistsOption()),"'includeIfNotExistsOption' must not be specified when 'replaceColumns' is true");    Assert.isTrue(StringUtils.isBlank(request.getCustomDdlName()),"'customDdlName' must not be specified when 'replaceColumns' is true");  }  if (request.getCustomDdlName() != null) {    request.setCustomDdlName(request.getCustomDdlName().trim());  }}  }
class C{  protected void resetAttribute(){}  }
class C{  public static void showHelpFile(final JFrame parent){  try {    Desktop.getDesktop().open(new File(MANUAL_FILE));  } catch (  final Exception e) {    CUtilityFunctions.logException(e);    final String message="E00198: " + "Could not open help file";    final String description=CUtilityFunctions.createDescription(String.format("The help file '%s' could not be opened.",MANUAL_FILE),new String[]{"The manual file was accidentaly deleted."},new String[]{"BinNavi could not open the help file. Please try to open the " + "help file manually."});    NaviErrorDialog.show(parent,message,description,e);  }}  }
class C{  public static void shakeX(View v){  shakeX(v,10,1000,5.0f);}  }
class C{  @SuppressWarnings("unchecked") private static void handleSuperClasses(GetStaticGraph staticUsageTree,ClassNode targetClass){  String superClassName=targetClass.superName;  if (superClassName == null || superClassName.isEmpty())   return;  if (superClassName.equals("java/lang/Object"))   return;  logger.debug("Creating calltree for superclass: " + superClassName);  ClassNode superClass=DependencyAnalysis.getClassNode(superClassName);  List<MethodNode> methods=superClass.methods;  for (  MethodNode mn : methods) {    logger.debug("Method: " + mn.name);    if (mn.name.equals("<init>"))     continue;    if (mn.name.equals("<clinit>"))     continue;    if ((mn.access & Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT)     continue;    if ((mn.access & Opcodes.ACC_PUBLIC) == Opcodes.ACC_PUBLIC) {      if (!isOverridden(mn.name + mn.desc)) {        handleMethodNode(staticUsageTree,superClass,mn,0);      }    }  }  handleSuperClasses(staticUsageTree,superClass);}  }
class C{  public NumericalMultiplyDivideExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  static void shiftDown(Pointer address,int dst_offset,int src_offset,int count){  Address startAddress=getAddressFromPointer(address);  for (int i=0; i < count; i++) {    startAddress.store(startAddress.loadByte(Offset.fromIntSignExtend(src_offset + i)),Offset.fromIntSignExtend(dst_offset + i));  }}  }
class C{  public static Automaton minimize(Automaton a,int maxDeterminizedStates){  if (a.getNumStates() == 0 || (a.isAccept(0) == false && a.getNumTransitions(0) == 0)) {    return new Automaton();  }  a=Operations.determinize(a,maxDeterminizedStates);  if (a.getNumTransitions(0) == 1) {    Transition t=new Transition();    a.getTransition(0,0,t);    if (t.dest == 0 && t.min == Character.MIN_CODE_POINT && t.max == Character.MAX_CODE_POINT) {      return a;    }  }  a=Operations.totalize(a);  final int[] sigma=a.getStartPoints();  final int sigmaLen=sigma.length, statesLen=a.getNumStates();  @SuppressWarnings({"rawtypes","unchecked"}) final ArrayList<Integer>[][] reverse=(ArrayList<Integer>[][])new ArrayList[statesLen][sigmaLen];  @SuppressWarnings({"rawtypes","unchecked"}) final HashSet<Integer>[] partition=(HashSet<Integer>[])new HashSet[statesLen];  @SuppressWarnings({"rawtypes","unchecked"}) final ArrayList<Integer>[] splitblock=(ArrayList<Integer>[])new ArrayList[statesLen];  final int[] block=new int[statesLen];  final StateList[][] active=new StateList[statesLen][sigmaLen];  final StateListNode[][] active2=new StateListNode[statesLen][sigmaLen];  final LinkedList<IntPair> pending=new LinkedList<>();  final BitSet pending2=new BitSet(sigmaLen * statesLen);  final BitSet split=new BitSet(statesLen), refine=new BitSet(statesLen), refine2=new BitSet(statesLen);  for (int q=0; q < statesLen; q++) {    splitblock[q]=new ArrayList<>();    partition[q]=new HashSet<>();    for (int x=0; x < sigmaLen; x++) {      active[q][x]=new StateList();    }  }  for (int q=0; q < statesLen; q++) {    final int j=a.isAccept(q) ? 0 : 1;    partition[j].add(q);    block[q]=j;    for (int x=0; x < sigmaLen; x++) {      final ArrayList<Integer>[] r=reverse[a.step(q,sigma[x])];      if (r[x] == null) {        r[x]=new ArrayList<>();      }      r[x].add(q);    }  }  for (int j=0; j <= 1; j++) {    for (int x=0; x < sigmaLen; x++) {      for (      int q : partition[j]) {        if (reverse[q][x] != null) {          active2[q][x]=active[j][x].add(q);        }      }    }  }  for (int x=0; x < sigmaLen; x++) {    final int j=(active[0][x].size <= active[1][x].size) ? 0 : 1;    pending.add(new IntPair(j,x));    pending2.set(x * statesLen + j);  }  int k=2;  while (!pending.isEmpty()) {    final IntPair ip=pending.removeFirst();    final int p=ip.n1;    final int x=ip.n2;    pending2.clear(x * statesLen + p);    for (StateListNode m=active[p][x].first; m != null; m=m.next) {      final ArrayList<Integer> r=reverse[m.q][x];      if (r != null) {        for (        int i : r) {          if (!split.get(i)) {            split.set(i);            final int j=block[i];            splitblock[j].add(i);            if (!refine2.get(j)) {              refine2.set(j);              refine.set(j);            }          }        }      }    }    for (int j=refine.nextSetBit(0); j >= 0; j=refine.nextSetBit(j + 1)) {      final ArrayList<Integer> sb=splitblock[j];      if (sb.size() < partition[j].size()) {        final HashSet<Integer> b1=partition[j];        final HashSet<Integer> b2=partition[k];        for (        int s : sb) {          b1.remove(s);          b2.add(s);          block[s]=k;          for (int c=0; c < sigmaLen; c++) {            final StateListNode sn=active2[s][c];            if (sn != null && sn.sl == active[j][c]) {              sn.remove();              active2[s][c]=active[k][c].add(s);            }          }        }        for (int c=0; c < sigmaLen; c++) {          final int aj=active[j][c].size, ak=active[k][c].size, ofs=c * statesLen;          if (!pending2.get(ofs + j) && 0 < aj && aj <= ak) {            pending2.set(ofs + j);            pending.add(new IntPair(j,c));          } else {            pending2.set(ofs + k);            pending.add(new IntPair(k,c));          }        }        k++;      }      refine2.clear(j);      for (      int s : sb) {        split.clear(s);      }      sb.clear();    }    refine.clear();  }  Automaton result=new Automaton();  Transition t=new Transition();  int[] stateMap=new int[statesLen];  int[] stateRep=new int[k];  result.createState();  for (int n=0; n < k; n++) {    boolean isInitial=false;    for (    int q : partition[n]) {      if (q == 0) {        isInitial=true;        break;      }    }    int newState;    if (isInitial) {      newState=0;    } else {      newState=result.createState();    }    for (    int q : partition[n]) {      stateMap[q]=newState;      result.setAccept(newState,a.isAccept(q));      stateRep[newState]=q;    }  }  for (int n=0; n < k; n++) {    int numTransitions=a.initTransition(stateRep[n],t);    for (int i=0; i < numTransitions; i++) {      a.getNextTransition(t);      result.addTransition(n,stateMap[t.dest],t.min,t.max);    }  }  result.finishState();  return Operations.removeDeadStates(result);}  }
class C{  public ProtocolVersion(String protocol,int major,int minor){  if (protocol == null) {    throw new IllegalArgumentException("Protocol name must not be null.");  }  if (major < 0) {    throw new IllegalArgumentException("Protocol major version number must not be negative.");  }  if (minor < 0) {    throw new IllegalArgumentException("Protocol minor version number may not be negative");  }  this.protocol=protocol;  this.major=major;  this.minor=minor;}  }
class C{  @Override public void terminateSession(String sessionid) throws org.apache.thrift.TException {  if (!msgQueues.containsKey(sessionid)) {    return;  }  SessionQueue pQueue=msgQueues.get(sessionid);  log.debug("terminateSession: SessionId: " + sessionid + "\n");  String data="FilterTimeout";  ByteBuffer bb=ByteBuffer.wrap(data.getBytes());  BlockingQueue<ByteBuffer> queue=pQueue.getQueue();  if (queue != null) {    if (!queue.offer(bb)) {      log.error("Failed to queue message for session: " + sessionid);    }    msgQueues.remove(sessionid);  } else {    log.error("queue for session {} is null",sessionid);  }}  }
class C{  public ToolMetaBuilder start(){  return new ToolMetaBuilder();}  }
class C{  public void doWriteObject(@Nullable Object obj) throws BinaryObjectException {  if (obj == null)   out.writeByte(GridBinaryMarshaller.NULL); else {    BinaryWriterExImpl writer=new BinaryWriterExImpl(ctx,out,schema,handles());    writer.marshal(obj);  }}  }
class C{  public void write(OutputStream out,Drawing drawing,AffineTransform drawingTransform,Dimension imageSize) throws IOException {  write(out,drawing,drawing.getChildren(),drawingTransform,imageSize);}  }
class C{  public void translate(double offsetx,double offsety){  inverse=null;  transform.translate(offsetx,offsety);  fireStateChanged();}  }
class C{  @Deprecated public XMLSignatureInput engineResolve(Attr uri,String BaseURI) throws ResourceResolverException {  throw new UnsupportedOperationException();}  }
class C{  private void _alwaysScheduleAfter(Activity before,Activity after){  before.addActivityListener(new ScheduleAfterActivity(after,false));}  }
class C{  private void generateHeightmap(int x,int y,int z){  this.depthRegion=this.depthNoise.generateNoiseOctaves(this.depthRegion,x,z,5,5,200.0D,200.0D,0.5D);  float scaleXZ=684.412F * 8;  float scaleY=684.412F * 8;  this.mainNoiseRegion=this.mainPerlinNoise.generateNoiseOctaves(this.mainNoiseRegion,x,y,z,5,33,5,(double)(scaleXZ / 80.0F),(double)(scaleY / 160.0F),(double)(scaleXZ / 80.0F));  this.minLimitRegion=this.minLimitPerlinNoise.generateNoiseOctaves(this.minLimitRegion,x,y,z,5,33,5,(double)scaleXZ,(double)scaleY,(double)scaleXZ);  this.maxLimitRegion=this.maxLimitPerlinNoise.generateNoiseOctaves(this.maxLimitRegion,x,y,z,5,33,5,(double)scaleXZ,(double)scaleY,(double)scaleXZ);  int noiseIndex=0;  int heightMapIndex=0;  for (int heightMapX=0; heightMapX < 5; ++heightMapX) {    for (int heightMapZ=0; heightMapZ < 5; ++heightMapZ) {      float biomeVariation=0.0F;      float biomeDepth=0.0F;      float totalBiomeWeight=0.0F;      Biome centerBiome=this.biomesForGeneration[heightMapX + 5 + (heightMapZ + 5) * 15];      float nearestOtherBiomeSq=50;      for (int offsetX=-5; offsetX <= 5; ++offsetX) {        for (int offsetZ=-5; offsetZ <= 5; ++offsetZ) {          Biome nearbyBiome=this.biomesForGeneration[heightMapX + 5 + offsetX+ (heightMapZ + 5 + offsetZ) * 15];          float nearbyBiomeDepth=nearbyBiome.getBaseHeight();          float nearbyBiomeVariation=nearbyBiome.getHeightVariation();          if (offsetX >= -2 && offsetX <= 2 && offsetZ >= -2 && offsetZ <= 2) {            float weight=this.biomeWeights[offsetX + 2 + (offsetZ + 2) * 5];            if (nearbyBiome.getBaseHeight() > centerBiome.getBaseHeight()) {              weight/=2.0F;            }            biomeVariation+=nearbyBiomeVariation * weight;            biomeDepth+=nearbyBiomeDepth * weight;            totalBiomeWeight+=weight;          }          float distWeighted=(offsetX * offsetX + offsetZ * offsetZ);          if (nearbyBiome != centerBiome && distWeighted < nearestOtherBiomeSq) {            nearestOtherBiomeSq=distWeighted;          }        }      }      this.terrainBiomeWeights[heightMapIndex]=MathHelper.clamp_float(Math.max((nearestOtherBiomeSq - 2) / 46.0F,0.0F),0.0F,1.0F);      biomeVariation=biomeVariation / totalBiomeWeight;      biomeDepth=biomeDepth / totalBiomeWeight;      double depthPerturbation=this.depthRegion[heightMapIndex] / 8000.0D;      if (depthPerturbation < 0.0D) {        depthPerturbation=-depthPerturbation * 0.3D;      }      depthPerturbation=depthPerturbation * 3.0D - 2.0D;      if (depthPerturbation < 0.0D) {        depthPerturbation=depthPerturbation / 2.0D;        if (depthPerturbation < -1.0D) {          depthPerturbation=-1.0D;        }        depthPerturbation=depthPerturbation / 1.4D;        depthPerturbation=depthPerturbation / 2.0D;      } else {        if (depthPerturbation > 1.0D) {          depthPerturbation=1.0D;        }        depthPerturbation=depthPerturbation / 8.0D;      }      ++heightMapIndex;      for (int heightMapY=0; heightMapY < 33; ++heightMapY) {        double densityOffset=((double)heightMapY * 8.0D - biomeDepth - (depthPerturbation * biomeVariation / 256.0D)) / 256.0D;        double maxGenDensity16=0.0D;        for (int i=0; i < 16 - 1; i++) {          maxGenDensity16+=2 * Math.pow(2.0D,i);        }        maxGenDensity16/=2.0D;        double maxGenDensity8=0.0D;        for (int i=0; i < 8 - 1; i++) {          maxGenDensity8+=2 * Math.pow(2.0D,i);        }        maxGenDensity8/=2.0D;        double minDensity=(this.minLimitRegion[noiseIndex] / maxGenDensity16) * biomeVariation / 256.0D;        double maxDensity=(this.maxLimitRegion[noiseIndex] / maxGenDensity16) * biomeVariation / 256.0D;        double mainDensity=(this.mainNoiseRegion[noiseIndex] / maxGenDensity8);        this.heightMap[noiseIndex]=MathHelper.denormalizeClamp(minDensity,maxDensity,mainDensity) - densityOffset;        ++noiseIndex;      }    }  }}  }
class C{  public AutoColorCorrelogram(int maxDistance){}  }
class C{  public Add3(){  super("add3",3);}  }
class C{  private String compute(String left,double right,boolean isInteger){  if (left == null && Double.isNaN(right)) {    return null;  }  if (isInteger && right == (int)right) {    return (left == null ? "" : left) + (int)right;  } else   if (Double.isInfinite(right)) {    return (left == null ? "" : left) + Tools.formatNumber(right);  } else {    return (left == null ? "" : left) + (Double.isNaN(right) ? "" : right);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapinuseattributeerr.class,args);}  }
class C{  public double area(){  return area(this.p0,this.p1,this.p2);}  }
class C{  public EaseIn(){  this(DEFAULT_OVERSHOOT_AMOUNT);}  }
class C{  public JavaContext(TemplateContextType type,Document document,Position completionPosition,CompilationUnit compilationUnit){  super(type,document,completionPosition,compilationUnit);}  }
class C{  public String globalInfo(){  return "Split an incoming data set into cross validation folds. " + "Separate train and test sets are produced for each of the k folds.";}  }
class C{  private void buildInjectedFlowMap(){  Set<SootClass> classesToInspect=new LinkedHashSet<SootClass>();  Map<SootField,Map<Object,InfoKind>> fieldFlowMap=new LinkedHashMap<SootField,Map<Object,InfoKind>>();  Map<SootClass,Set<SootField>> trackedFields=new LinkedHashMap<SootClass,Set<SootField>>();  for (  String fullFieldName : flowsToInject.keySet()) {    String field=getField(fullFieldName);    String clz=getClass(fullFieldName);    SootClass sootClass=Scene.v().getSootClass(clz);    classesToInspect.add(sootClass);    SootField modeledField=sootClass.getFieldByName(field);    fieldFlowMap.put(modeledField,flowsToInject.get(fullFieldName));    if (!trackedFields.containsKey(sootClass))     trackedFields.put(sootClass,new LinkedHashSet<SootField>());    trackedFields.get(sootClass).add(modeledField);  }  for (  IAllocNode node : ValueAnalysis.v().getResults().keySet()) {    Type type=node.getType();    if (type instanceof RefType) {      SootClass clz=((RefType)type).getSootClass();      if (classesToInspect.contains(clz)) {        RefVAModel modeledClass=(RefVAModel)ValueAnalysis.v().getResult(node);        for (        SootField field : trackedFields.get(clz)) {          Set<VAModel> values=modeledClass.getFieldVAModels(field);          Set<InfoKind> flowsFound=test(values,fieldFlowMap.get(field));          if (flowsFound.size() > 0)           injectedFlows.put(node,flowsFound);        }      }    } else {      logger.error("Unknown type for Value Analysis results: {} {}",node,type);      droidsafe.main.Main.exit(1);    }  }}  }
class C{  public void onCreate(SQLiteDatabase paramSQLiteDatabase){  int numSchemas=sSchemas.length;  for (int i=0; i < numSchemas; i++) {    try {      String[][] schema=(String[][])sSchemas[i];      paramSQLiteDatabase.execSQL(createTableQueryFromArray(sTables[i],schema));    } catch (    Exception localException) {      while (true)       localException.printStackTrace();    }  }}  }
class C{  public static void convertRectToScreen(Rectangle r,Component c){  Point p=new Point(r.x,r.y);  SwingUtilities.convertPointToScreen(p,c);  r.x=p.x;  r.y=p.y;}  }
class C{  private static byte[] asciiBytes(String value){  Preconditions.checkNotNull(value);  try {    return value.getBytes("ASCII");  } catch (  UnsupportedEncodingException uee) {    throw new RuntimeException("ASCII not found!",uee);  }}  }
class C{  public synchronized boolean publish(String info) throws PayloadException, NetworkException {  mDialogPath=createDialogPath();  mDialogPath.setLocalContent(info);  SipRequest publish=SipMessageFactory.createPublish(mDialogPath,mExpirePeriod,mEntityTag,info);  sendPublish(publish);  return mPublished;}  }
class C{  @Override public List<String> createMetaVolumeMembers(StorageSystem storageSystem,StoragePool storagePool,Volume metaHead,int memberCount,long memberCapacity,MetaVolumeTaskCompleter metaVolumeTaskCompleter) throws Exception {  log.info(String.format("Create Meta Volume Members Start - Array: %s, Pool: %s, %n Volume: %s, Count:%s, Member capacity: %s",storageSystem.getSerialNumber(),storagePool.getNativeId(),metaHead.getLabel(),memberCount,memberCapacity));  try {    String systemObjectID=HDSUtils.getSystemObjectID(storageSystem);    String poolObjectID=HDSUtils.getPoolObjectID(storagePool);    HDSApiClient hdsApiClient=hdsApiFactory.getClient(HDSUtils.getHDSServerManagementServerInfo(storageSystem),storageSystem.getSmisUserName(),storageSystem.getSmisPassword());    String asyncTaskMessageId=hdsApiClient.createThickVolumes(systemObjectID,poolObjectID,memberCapacity,memberCount,"",VOLUME_FORMAT_TYPE,storageSystem.getModel(),null);    HDSCreateMetaVolumeMembersJob metaVolumeMembersJob=new HDSCreateMetaVolumeMembersJob(asyncTaskMessageId,storageSystem.getId(),metaHead,memberCount,metaVolumeTaskCompleter);    invokeMethodSynchronously(hdsApiFactory,asyncTaskMessageId,metaVolumeMembersJob);    return metaVolumeMembersJob.getMetaMembers();  } catch (  Exception e) {    log.error("Problem in createMetaVolumeMembers: ",e);    ServiceError error=DeviceControllerErrors.hds.methodFailed("createMetaVolumeMemebers",e.getMessage());    metaVolumeTaskCompleter.getVolumeTaskCompleter().error(dbClient,error);    throw e;  } finally {    log.info(String.format("Create Meta Volume Members End - Array: %s, Pool: %s, %n Volume: %s",storageSystem.getSerialNumber(),storagePool.getNativeId(),metaHead.getLabel()));  }}  }
class C{  public boolean computeScrollOffset(){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mScrollerX.mStartTime;final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {float q=(float)(elapsedTime) / duration;if (mInterpolator == null) {  q=viscousFluid(q);} else {  q=mInterpolator.getInterpolation(q);}mScrollerX.updateScroll(q);mScrollerY.updateScroll(q);} else {abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update()) {if (!mScrollerX.continueWhenFinished()) {mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update()) {if (!mScrollerY.continueWhenFinished()) {mScrollerY.finish();}}}break;}return true;}  }
class C{  protected void loadBuffer(){  int resIdx=minuteSpacing / 5;  if (resIdx < 0)   resIdx=0; else   if (resIdx > 3)   resIdx=3;  String fileName=path + etopoFileNames[resIdx];  dataBuffer=null;  try {    BinaryBufferedFile binFile=new BinaryBufferedFile(fileName);    binFile.byteOrder(true);    bufferWidth=etopoWidths[resIdx];    bufferHeight=etopoHeights[resIdx];    int spacer=1;switch (minuteSpacing) {case (2):      spacer=1 + this.spacer;    break;case (5):  spacer=0 + this.spacer;break;default :spacer=1 + this.spacer;}dataBuffer=new short[(bufferWidth + spacer) * bufferHeight];for (int i=0; i < bufferWidth * bufferHeight; i++) dataBuffer[i]=binFile.readShort();binFile.close();bufferWidth+=spacer;} catch (FileNotFoundException e) {Debug.error("ETOPOLayer loadBuffer(): file " + fileName + " not found");}catch (IOException e) {Debug.error("ETOPOLayer loadBuffer(): File IO Error!\n" + e.toString());}catch (FormatException e) {Debug.error("ETOPOLayer loadBuffer(): Format exception!\n" + e.toString());}}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  String name;  JSONObject jo=new JSONObject();  Object value;  JSONTokener x=new JSONTokener(string);  jo.put("name",x.nextTo('='));  x.next('=');  jo.put("value",x.nextTo(';'));  x.next();  while (x.more()) {    name=unescape(x.nextTo("=;"));    if (x.next() != '=') {      if (name.equals("secure")) {        value=Boolean.TRUE;      } else {        throw x.syntaxError("Missing '=' in cookie parameter.");      }    } else {      value=unescape(x.nextTo(';'));      x.next();    }    jo.put(name,value);  }  return jo;}  }
class C{  private void checkWritePermissions(SqlArguments args){  if ((TABLE_SECURE.equals(args.table) || TABLE_GLOBAL.equals(args.table)) && getContext().checkCallingOrSelfPermission(android.Manifest.permission.WRITE_SECURE_SETTINGS) != PackageManager.PERMISSION_GRANTED) {    throw new SecurityException(String.format("Permission denial: writing to secure settings requires %1$s",android.Manifest.permission.WRITE_SECURE_SETTINGS));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.561 -0500",hash_original_method="9C711BE19A8C0E0A7CB116A3F753C6F0",hash_generated_method="3E11F84AAB428D962C364CC48C7D950E") public String encodeBody(){  return optionTag;}  }
class C{  @Override protected void promoteEOL(){  SemicolonInjectionHelper.promoteEOL(this);}  }
class C{  public void init(String videoIds) throws IOException {  super.init();  super.videosList.setId(videoIds);  super.videosList.setChart(null);}  }
class C{  static String scanPublicID(StringBuffer publicID,IXMLReader reader) throws IOException, XMLParseException {  if (!XMLUtil.checkLiteral(reader,"UBLIC")) {    return null;  }  XMLUtil.skipWhitespace(reader,null);  publicID.append(XMLUtil.scanString(reader,'\0',null));  XMLUtil.skipWhitespace(reader,null);  return XMLUtil.scanString(reader,'\0',null);}  }
class C{  @Deprecated public void execute(){}  }
class C{  boolean isEvenRun(){  return (level & 1) == 0;}  }
class C{  @DSSink({DSSinkKind.SYNCHRONIZATION_DATA}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.541 -0500",hash_original_method="44E20F477AE4DBE39F2143CAA1307C1F",hash_generated_method="36868A8632F5BB2EF68675431B9B2D63") public Message sendMessageSynchronously(Message msg){  Message resultMsg=SyncMessenger.sendMessageSynchronously(mDstMessenger,msg);  return resultMsg;}  }
class C{  public Ln(){  super("ln",1);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (item.getItemId() == android.R.id.home) {    Intent data=new Intent();    data.putExtra(CLOSE_NESTED,getNestingStringForHomePressed());    setResult(0,data);    finish();    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public void union(double x,double y,double w,double h){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(x,y,w,h);    status=INUSE;    return;  }  clip[0]=Math.min(clip[0],x);  clip[1]=Math.min(clip[1],y);  clip[6]=Math.max(clip[6],x + w);  clip[7]=Math.max(clip[7],y + h);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  UserDBDao.dropTable(db,ifExists);  DeviceDBDao.dropTable(db,ifExists);  GroupDBDao.dropTable(db,ifExists);  GroupLocalDeviceDBDao.dropTable(db,ifExists);  GroupCloudDeviceDBDao.dropTable(db,ifExists);  GroupRemoveDeviceDBDao.dropTable(db,ifExists);  ApDBDao.dropTable(db,ifExists);  DownloadIdValueDBDao.dropTable(db,ifExists);  GenericDataDirectoryDBDao.dropTable(db,ifExists);  GenericDataDBDao.dropTable(db,ifExists);}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ActivationDesc) {    ActivationDesc desc=(ActivationDesc)obj;    return ((groupID == null ? desc.groupID == null : groupID.equals(desc.groupID)) && (className == null ? desc.className == null : className.equals(desc.className)) && (location == null ? desc.location == null : location.equals(desc.location))&& (data == null ? desc.data == null : data.equals(desc.data))&& (restart == desc.restart));  } else {    return false;  }}  }
class C{  private static Response make(final CharSequence msg,final Level level,final String cookie) throws UnsupportedEncodingException {  return new RsWithCookie(cookie,new Sprintf(RsFlash.TEXT_FORMAT,URLEncoder.encode(msg.toString(),Charset.defaultCharset().name()),level.getName()),"Path=/",String.format(Locale.ENGLISH,"Expires=%1$ta, %1$td %1$tb %1$tY %1$tT GMT",new Date(System.currentTimeMillis() + TimeUnit.HOURS.toMillis(1L))));}  }
class C{  public static Rectangle2D convertMaskRegion(Element maskElement,Element maskedElement,GraphicsNode maskedNode,BridgeContext ctx){  String xStr=maskElement.getAttributeNS(null,SVG_X_ATTRIBUTE);  if (xStr.length() == 0) {    xStr=SVG_MASK_X_DEFAULT_VALUE;  }  String yStr=maskElement.getAttributeNS(null,SVG_Y_ATTRIBUTE);  if (yStr.length() == 0) {    yStr=SVG_MASK_Y_DEFAULT_VALUE;  }  String wStr=maskElement.getAttributeNS(null,SVG_WIDTH_ATTRIBUTE);  if (wStr.length() == 0) {    wStr=SVG_MASK_WIDTH_DEFAULT_VALUE;  }  String hStr=maskElement.getAttributeNS(null,SVG_HEIGHT_ATTRIBUTE);  if (hStr.length() == 0) {    hStr=SVG_MASK_HEIGHT_DEFAULT_VALUE;  }  short unitsType;  String units=maskElement.getAttributeNS(null,SVG_MASK_UNITS_ATTRIBUTE);  if (units.length() == 0) {    unitsType=OBJECT_BOUNDING_BOX;  } else {    unitsType=parseCoordinateSystem(maskElement,SVG_MASK_UNITS_ATTRIBUTE,units,ctx);  }  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,maskedElement);  return convertRegion(xStr,yStr,wStr,hStr,unitsType,maskedNode,uctx);}  }
class C{  public static void print(Message message,Appendable output) throws IOException {  JsonGenerator generator=new JsonGenerator(output);  generator.print("{");  print(message,generator);  generator.print("}");}  }
class C{  public Object deliverMoreNodes(boolean parsemore){  if (fNoMoreEvents)   return Boolean.FALSE;  try {    Object result=fCoroutineManager.co_resume(parsemore ? Boolean.TRUE : Boolean.FALSE,fControllerCoroutineID,fSourceCoroutineID);    if (result == Boolean.FALSE)     fCoroutineManager.co_exit(fControllerCoroutineID);    return result;  } catch (  NoSuchMethodException e) {    return e;  }}  }
class C{  public TypeChecker(AbstractTreePrinter translator){  this.translator=translator;}  }
class C{  private void exchangeRemoteLocators(int port,DistributionConfigImpl config,LocatorMembershipListener locatorListener,final String hostnameForClients){  RemoteLocatorJoinRequest request=buildRemoteDSJoinRequest(port,config,hostnameForClients);  String remoteDistributedSystems=config.getRemoteLocators();  if (remoteDistributedSystems.length() > 0) {    StringTokenizer remoteLocators=new StringTokenizer(remoteDistributedSystems,",");    while (remoteLocators.hasMoreTokens()) {      DistributionLocatorId remoteLocatorId=new DistributionLocatorId(remoteLocators.nextToken());      LocatorDiscovery localDiscovery=new LocatorDiscovery(this,remoteLocatorId,request,locatorListener);      LocatorDiscovery.RemoteLocatorDiscovery remoteLocatorDiscovery=localDiscovery.new RemoteLocatorDiscovery();      this._executor.execute(remoteLocatorDiscovery);    }  }}  }
class C{  public byte[] encode(byte[] raw){  return toAsciiBytes(raw);}  }
class C{  public synchronized JSONObject toJSONObject(){  JSONObject res=new JSONObject();  res.putAll(this);  return res;}  }
class C{  public void translateRectInScreenToAppWinFrame(Rect rect){  rect.scale(applicationInvertedScale);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String accumHeader=null;  String outputHeader=null;  int row, col, x, y, x2, y2, nx, ny;  int progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double nFlowDir=0;  boolean isOutlet=false;  double maxFlowAccum=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      accumHeader=args[i];    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (accumHeader == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double streamsNoData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster accum=new WhiteboxRaster(accumHeader,"r");    if (accum.getNumberRows() != rows || accum.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    updateProgress("Finding network links:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) != 0 && streams.getValue(row,col) != streamsNoData) {          isOutlet=false;          flowDir=pntr.getValue(row,col);          if (flowDir == 0) {            isOutlet=true;          } else {            c=(int)(Math.log(flowDir) / LnOf2);            if (streams.getValue(row + dY[c],col + dX[c]) == 0 || streams.getValue(row + dY[c],col + dX[c]) == streamsNoData) {              isOutlet=true;            }          }          if (isOutlet) {            x=col;            y=row;            flag=true;            do {              output.setValue(y,x,1.0);              maxFlowAccum=0;              nx=0;              ny=0;              for (c=0; c < 8; c++) {                x2=x + dX[c];                y2=y + dY[c];                nFlowDir=pntr.getValue(y2,x2);                if (streams.getValue(y2,x2) > 0 && nFlowDir == inflowingVals[c]) {                  if (accum.getValue(y2,x2) > maxFlowAccum) {                    nx=x2;                    ny=y2;                    maxFlowAccum=accum.getValue(y2,x2);                  }                }              }              if (maxFlowAccum > 0) {                x=nx;                y=ny;              } else {                flag=false;              }            } while (flag);          }        } else         if (streams.getValue(row,col) == streamsNoData) {          output.setValue(row,col,streamsNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String[] types(){  return this.types;}  }
class C{  static Statement parseStatement(Player player,String line){  Parser p=new Parser(player,line);  p.parseStatement();  return p.stat;}  }
class C{  public SokobanBoard(SokobanListener sokobanListener){  super(WIDTH,HEIGHT);  super.addBehaviour(new NoLoginAreaBehaviour(42,126,"Talk to Hiro to play another game."));  super.addBehaviour(new NoTeleportInBehaviour());  try {    int cnt=0;    InputStream stream=this.getClass().getResourceAsStream("sokoban.txt");    BufferedReader br=new BufferedReader(new InputStreamReader(stream));    List<String> lines=new LinkedList<String>();    String line=br.readLine();    while (line != null) {      lines.add(line);      line=br.readLine();      cnt++;    }    levelData=lines.toArray(new String[cnt]);    br.close();  } catch (  IOException e) {    logger.error(e,e);  }  this.sokobanListener=sokobanListener;  TurnNotifier.get().notifyInTurns(0,this);}  }
class C{  public void testFloatValueNegative1(){  String a="-27467238";  float result=-2.7467238E7f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechild.class,args);}  }
class C{  public void dragDropEnd(DragSourceDropEvent e){  if (log.isDebugEnabled()) {    log.debug("DragJLabel.dragDropEnd ");  }}  }
class C{  @Override public Socket accept() throws IOException {  if (logger != null) {    logger.println("SSLServerSocketImpl.accept ..");  }  SSLSocketImpl s=new SSLSocketImpl((SSLParametersImpl)sslParameters.clone());  implAccept(s);  s.init();  if (logger != null) {    logger.println("SSLServerSocketImpl: accepted, initialized");  }  return s;}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  EcorePackage theEcorePackage=(EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);  TypesPackage theTypesPackage=(TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);  TypeRefsPackage theTypeRefsPackage=(TypeRefsPackage)EPackage.Registry.INSTANCE.getEPackage(TypeRefsPackage.eNS_URI);  scriptEClass.getESuperTypes().add(this.getVariableEnvironmentElement());  scriptEClass.getESuperTypes().add(this.getAnnotableElement());  exportDeclarationEClass.getESuperTypes().add(this.getAnnotableScriptElement());  importDeclarationEClass.getESuperTypes().add(this.getAnnotableScriptElement());  namedImportSpecifierEClass.getESuperTypes().add(this.getImportSpecifier());  defaultImportSpecifierEClass.getESuperTypes().add(this.getNamedImportSpecifier());  namespaceImportSpecifierEClass.getESuperTypes().add(this.getImportSpecifier());  namespaceImportSpecifierEClass.getESuperTypes().add(this.getTypeDefiningElement());  typedElementEClass.getESuperTypes().add(this.getTypeProvidingElement());  variableEClass.getESuperTypes().add(this.getTypedElement());  variableEClass.getESuperTypes().add(theTypesPackage.getIdentifiableElement());  variableEClass.getESuperTypes().add(this.getNamedElement());  annotableScriptElementEClass.getESuperTypes().add(this.getAnnotableElement());  annotableScriptElementEClass.getESuperTypes().add(this.getScriptElement());  annotableExpressionEClass.getESuperTypes().add(this.getAnnotableElement());  annotableExpressionEClass.getESuperTypes().add(this.getExpression());  annotationListEClass.getESuperTypes().add(this.getAbstractAnnotationList());  annotationListEClass.getESuperTypes().add(this.getScriptElement());  annotationListEClass.getESuperTypes().add(this.getStatement());  annotationListEClass.getESuperTypes().add(this.getExportableElement());  expressionAnnotationListEClass.getESuperTypes().add(this.getAbstractAnnotationList());  expressionAnnotationListEClass.getESuperTypes().add(this.getExpression());  annotationEClass.getESuperTypes().add(this.getNamedElement());  literalAnnotationArgumentEClass.getESuperTypes().add(this.getAnnotationArgument());  typeRefAnnotationArgumentEClass.getESuperTypes().add(this.getAnnotationArgument());  functionOrFieldAccessorEClass.getESuperTypes().add(this.getAnnotableElement());  functionOrFieldAccessorEClass.getESuperTypes().add(this.getVariableEnvironmentElement());  functionOrFieldAccessorEClass.getESuperTypes().add(this.getThisArgProvider());  functionOrFieldAccessorEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  functionDefinitionEClass.getESuperTypes().add(this.getFunctionOrFieldAccessor());  functionDefinitionEClass.getESuperTypes().add(this.getTypeDefiningElement());  fieldAccessorEClass.getESuperTypes().add(this.getFunctionOrFieldAccessor());  fieldAccessorEClass.getESuperTypes().add(this.getTypeProvidingElement());  fieldAccessorEClass.getESuperTypes().add(this.getPropertyNameOwner());  functionDeclarationEClass.getESuperTypes().add(this.getAnnotableScriptElement());  functionDeclarationEClass.getESuperTypes().add(this.getModifiableElement());  functionDeclarationEClass.getESuperTypes().add(this.getStatement());  functionDeclarationEClass.getESuperTypes().add(this.getFunctionDefinition());  functionDeclarationEClass.getESuperTypes().add(this.getGenericDeclaration());  functionDeclarationEClass.getESuperTypes().add(this.getExportableElement());  functionDeclarationEClass.getESuperTypes().add(this.getNamedElement());  functionExpressionEClass.getESuperTypes().add(this.getFunctionDefinition());  functionExpressionEClass.getESuperTypes().add(this.getAnnotableExpression());  functionExpressionEClass.getESuperTypes().add(this.getGenericDeclaration());  functionExpressionEClass.getESuperTypes().add(this.getNamedElement());  arrowFunctionEClass.getESuperTypes().add(this.getFunctionExpression());  localArgumentsVariableEClass.getESuperTypes().add(this.getVariable());  formalParameterEClass.getESuperTypes().add(this.getAnnotableElement());  formalParameterEClass.getESuperTypes().add(this.getVariable());  blockEClass.getESuperTypes().add(this.getStatement());  blockEClass.getESuperTypes().add(this.getVariableEnvironmentElement());  statementEClass.getESuperTypes().add(this.getScriptElement());  variableStatementEClass.getESuperTypes().add(this.getStatement());  variableStatementEClass.getESuperTypes().add(this.getVariableDeclarationContainer());  exportedVariableStatementEClass.getESuperTypes().add(this.getVariableStatement());  exportedVariableStatementEClass.getESuperTypes().add(this.getExportableElement());  exportedVariableStatementEClass.getESuperTypes().add(this.getAnnotableScriptElement());  exportedVariableStatementEClass.getESuperTypes().add(this.getModifiableElement());  variableBindingEClass.getESuperTypes().add(this.getVariableDeclarationOrBinding());  exportedVariableBindingEClass.getESuperTypes().add(this.getVariableBinding());  variableDeclarationEClass.getESuperTypes().add(this.getVariableDeclarationOrBinding());  variableDeclarationEClass.getESuperTypes().add(this.getAnnotableElement());  variableDeclarationEClass.getESuperTypes().add(this.getVariable());  exportedVariableDeclarationEClass.getESuperTypes().add(this.getVariableDeclaration());  emptyStatementEClass.getESuperTypes().add(this.getStatement());  expressionStatementEClass.getESuperTypes().add(this.getStatement());  ifStatementEClass.getESuperTypes().add(this.getStatement());  iterationStatementEClass.getESuperTypes().add(this.getStatement());  doStatementEClass.getESuperTypes().add(this.getIterationStatement());  whileStatementEClass.getESuperTypes().add(this.getIterationStatement());  forStatementEClass.getESuperTypes().add(this.getVariableDeclarationContainer());  forStatementEClass.getESuperTypes().add(this.getIterationStatement());  forStatementEClass.getESuperTypes().add(this.getVariableEnvironmentElement());  continueStatementEClass.getESuperTypes().add(this.getStatement());  breakStatementEClass.getESuperTypes().add(this.getStatement());  returnStatementEClass.getESuperTypes().add(this.getStatement());  withStatementEClass.getESuperTypes().add(this.getStatement());  withStatementEClass.getESuperTypes().add(this.getVariableEnvironmentElement());  switchStatementEClass.getESuperTypes().add(this.getStatement());  switchStatementEClass.getESuperTypes().add(this.getVariableEnvironmentElement());  caseClauseEClass.getESuperTypes().add(this.getAbstractCaseClause());  defaultClauseEClass.getESuperTypes().add(this.getAbstractCaseClause());  labelledStatementEClass.getESuperTypes().add(this.getStatement());  labelledStatementEClass.getESuperTypes().add(this.getNamedElement());  throwStatementEClass.getESuperTypes().add(this.getStatement());  tryStatementEClass.getESuperTypes().add(this.getStatement());  catchBlockEClass.getESuperTypes().add(this.getAbstractCatchBlock());  catchBlockEClass.getESuperTypes().add(this.getVariableEnvironmentElement());  catchVariableEClass.getESuperTypes().add(this.getVariable());  finallyBlockEClass.getESuperTypes().add(this.getAbstractCatchBlock());  debuggerStatementEClass.getESuperTypes().add(this.getStatement());  primaryExpressionEClass.getESuperTypes().add(this.getExpression());  parenExpressionEClass.getESuperTypes().add(this.getPrimaryExpression());  identifierRefEClass.getESuperTypes().add(this.getPrimaryExpression());  identifierRefEClass.getESuperTypes().add(this.getStrictModeRelevant());  superLiteralEClass.getESuperTypes().add(this.getPrimaryExpression());  thisLiteralEClass.getESuperTypes().add(this.getPrimaryExpression());  thisLiteralEClass.getESuperTypes().add(this.getStrictModeRelevant());  arrayLiteralEClass.getESuperTypes().add(this.getPrimaryExpression());  arrayElementEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  arrayPaddingEClass.getESuperTypes().add(this.getArrayElement());  objectLiteralEClass.getESuperTypes().add(this.getPrimaryExpression());  objectLiteralEClass.getESuperTypes().add(this.getThisTarget());  objectLiteralEClass.getESuperTypes().add(this.getTypeDefiningElement());  propertyAssignmentEClass.getESuperTypes().add(this.getAnnotableElement());  propertyAssignmentEClass.getESuperTypes().add(this.getVariableEnvironmentElement());  propertyAssignmentEClass.getESuperTypes().add(this.getPropertyNameOwner());  propertyAssignmentEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  propertyNameOwnerEClass.getESuperTypes().add(this.getNamedElement());  annotablePropertyAssignmentEClass.getESuperTypes().add(this.getPropertyAssignment());  propertyAssignmentAnnotationListEClass.getESuperTypes().add(this.getAbstractAnnotationList());  propertyAssignmentAnnotationListEClass.getESuperTypes().add(this.getPropertyAssignment());  propertyNameValuePairEClass.getESuperTypes().add(this.getAnnotablePropertyAssignment());  propertyNameValuePairEClass.getESuperTypes().add(this.getTypedElement());  propertyNameValuePairEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  propertyNameValuePairSingleNameEClass.getESuperTypes().add(this.getPropertyNameValuePair());  propertyMethodDeclarationEClass.getESuperTypes().add(this.getAnnotablePropertyAssignment());  propertyMethodDeclarationEClass.getESuperTypes().add(this.getMethodDeclaration());  propertyMethodDeclarationEClass.getESuperTypes().add(this.getTypeProvidingElement());  getterDeclarationEClass.getESuperTypes().add(this.getFieldAccessor());  getterDeclarationEClass.getESuperTypes().add(this.getTypedElement());  setterDeclarationEClass.getESuperTypes().add(this.getFieldAccessor());  propertyGetterDeclarationEClass.getESuperTypes().add(this.getGetterDeclaration());  propertyGetterDeclarationEClass.getESuperTypes().add(this.getAnnotablePropertyAssignment());  propertySetterDeclarationEClass.getESuperTypes().add(this.getSetterDeclaration());  propertySetterDeclarationEClass.getESuperTypes().add(this.getAnnotablePropertyAssignment());  expressionEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  newTargetEClass.getESuperTypes().add(this.getExpression());  newExpressionEClass.getESuperTypes().add(this.getExpression());  newExpressionEClass.getESuperTypes().add(this.getParameterizedAccess());  parameterizedCallExpressionEClass.getESuperTypes().add(this.getExpression());  parameterizedCallExpressionEClass.getESuperTypes().add(this.getParameterizedAccess());  argumentEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  indexedAccessExpressionEClass.getESuperTypes().add(this.getExpression());  taggedTemplateStringEClass.getESuperTypes().add(this.getExpression());  parameterizedPropertyAccessExpressionEClass.getESuperTypes().add(this.getExpression());  parameterizedPropertyAccessExpressionEClass.getESuperTypes().add(this.getParameterizedAccess());  awaitExpressionEClass.getESuperTypes().add(this.getExpression());  promisifyExpressionEClass.getESuperTypes().add(this.getExpression());  yieldExpressionEClass.getESuperTypes().add(this.getExpression());  literalEClass.getESuperTypes().add(this.getPrimaryExpression());  nullLiteralEClass.getESuperTypes().add(this.getLiteral());  booleanLiteralEClass.getESuperTypes().add(this.getLiteral());  stringLiteralEClass.getESuperTypes().add(this.getLiteral());  templateLiteralEClass.getESuperTypes().add(this.getPrimaryExpression());  templateSegmentEClass.getESuperTypes().add(this.getLiteral());  numericLiteralEClass.getESuperTypes().add(this.getLiteral());  doubleLiteralEClass.getESuperTypes().add(this.getNumericLiteral());  abstractIntLiteralEClass.getESuperTypes().add(this.getNumericLiteral());  intLiteralEClass.getESuperTypes().add(this.getAbstractIntLiteral());  binaryIntLiteralEClass.getESuperTypes().add(this.getAbstractIntLiteral());  octalIntLiteralEClass.getESuperTypes().add(this.getAbstractIntLiteral());  legacyOctalIntLiteralEClass.getESuperTypes().add(this.getAbstractIntLiteral());  hexIntLiteralEClass.getESuperTypes().add(this.getAbstractIntLiteral());  scientificIntLiteralEClass.getESuperTypes().add(this.getAbstractIntLiteral());  regularExpressionLiteralEClass.getESuperTypes().add(this.getLiteral());  postfixExpressionEClass.getESuperTypes().add(this.getExpression());  unaryExpressionEClass.getESuperTypes().add(this.getExpression());  castExpressionEClass.getESuperTypes().add(this.getExpression());  multiplicativeExpressionEClass.getESuperTypes().add(this.getExpression());  additiveExpressionEClass.getESuperTypes().add(this.getExpression());  shiftExpressionEClass.getESuperTypes().add(this.getExpression());  relationalExpressionEClass.getESuperTypes().add(this.getExpression());  equalityExpressionEClass.getESuperTypes().add(this.getExpression());  binaryBitwiseExpressionEClass.getESuperTypes().add(this.getExpression());  binaryLogicalExpressionEClass.getESuperTypes().add(this.getExpression());  conditionalExpressionEClass.getESuperTypes().add(this.getExpression());  assignmentExpressionEClass.getESuperTypes().add(this.getExpression());  commaExpressionEClass.getESuperTypes().add(this.getExpression());  typeDefiningElementEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  genericDeclarationEClass.getESuperTypes().add(this.getTypeDefiningElement());  n4TypeDefinitionEClass.getESuperTypes().add(this.getAnnotableElement());  n4TypeDefinitionEClass.getESuperTypes().add(this.getTypeDefiningElement());  n4TypeDeclarationEClass.getESuperTypes().add(this.getN4TypeDefinition());  n4TypeDeclarationEClass.getESuperTypes().add(this.getAnnotableScriptElement());  n4TypeDeclarationEClass.getESuperTypes().add(this.getModifiableElement());  n4TypeDeclarationEClass.getESuperTypes().add(this.getExportableElement());  n4TypeDeclarationEClass.getESuperTypes().add(this.getNamedElement());  n4ClassifierDeclarationEClass.getESuperTypes().add(this.getN4TypeDeclaration());  n4ClassifierDeclarationEClass.getESuperTypes().add(this.getN4ClassifierDefinition());  n4ClassifierDeclarationEClass.getESuperTypes().add(this.getGenericDeclaration());  n4ClassifierDeclarationEClass.getESuperTypes().add(this.getThisTarget());  n4ClassifierDefinitionEClass.getESuperTypes().add(this.getN4TypeDefinition());  n4ClassDefinitionEClass.getESuperTypes().add(this.getN4ClassifierDefinition());  n4ClassDefinitionEClass.getESuperTypes().add(this.getThisTarget());  n4ClassDeclarationEClass.getESuperTypes().add(this.getN4ClassDefinition());  n4ClassDeclarationEClass.getESuperTypes().add(this.getN4ClassifierDeclaration());  n4ClassExpressionEClass.getESuperTypes().add(this.getN4ClassDefinition());  n4ClassExpressionEClass.getESuperTypes().add(this.getPrimaryExpression());  n4ClassExpressionEClass.getESuperTypes().add(this.getAnnotableExpression());  n4ClassExpressionEClass.getESuperTypes().add(this.getNamedElement());  n4InterfaceDeclarationEClass.getESuperTypes().add(this.getN4ClassifierDeclaration());  n4EnumDeclarationEClass.getESuperTypes().add(this.getN4TypeDeclaration());  n4EnumLiteralEClass.getESuperTypes().add(this.getNamedElement());  n4EnumLiteralEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  n4MemberDeclarationEClass.getESuperTypes().add(this.getAnnotableElement());  n4MemberDeclarationEClass.getESuperTypes().add(this.getModifiableElement());  n4MemberDeclarationEClass.getESuperTypes().add(this.getTypeProvidingElement());  n4MemberDeclarationEClass.getESuperTypes().add(theTypesPackage.getTypableElement());  n4MemberDeclarationEClass.getESuperTypes().add(this.getNamedElement());  annotableN4MemberDeclarationEClass.getESuperTypes().add(this.getN4MemberDeclaration());  n4MemberAnnotationListEClass.getESuperTypes().add(this.getAbstractAnnotationList());  n4MemberAnnotationListEClass.getESuperTypes().add(this.getN4MemberDeclaration());  n4FieldDeclarationEClass.getESuperTypes().add(this.getAnnotableN4MemberDeclaration());  n4FieldDeclarationEClass.getESuperTypes().add(this.getTypedElement());  n4FieldDeclarationEClass.getESuperTypes().add(this.getThisArgProvider());  n4FieldDeclarationEClass.getESuperTypes().add(this.getPropertyNameOwner());  methodDeclarationEClass.getESuperTypes().add(this.getFunctionDefinition());  methodDeclarationEClass.getESuperTypes().add(this.getGenericDeclaration());  methodDeclarationEClass.getESuperTypes().add(this.getTypedElement());  methodDeclarationEClass.getESuperTypes().add(this.getPropertyNameOwner());  n4MethodDeclarationEClass.getESuperTypes().add(this.getAnnotableN4MemberDeclaration());  n4MethodDeclarationEClass.getESuperTypes().add(this.getMethodDeclaration());  n4FieldAccessorEClass.getESuperTypes().add(this.getAnnotableN4MemberDeclaration());  n4FieldAccessorEClass.getESuperTypes().add(this.getFieldAccessor());  n4GetterDeclarationEClass.getESuperTypes().add(this.getGetterDeclaration());  n4GetterDeclarationEClass.getESuperTypes().add(this.getN4FieldAccessor());  n4SetterDeclarationEClass.getESuperTypes().add(this.getSetterDeclaration());  n4SetterDeclarationEClass.getESuperTypes().add(this.getN4FieldAccessor());  objectBindingPatternEClass.getESuperTypes().add(this.getBindingPattern());  arrayBindingPatternEClass.getESuperTypes().add(this.getBindingPattern());  bindingPropertyEClass.getESuperTypes().add(this.getPropertyNameOwner());  initEClass(namedElementEClass,NamedElement.class,"NamedElement",IS_ABSTRACT,IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getNamedElement__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(scriptEClass,Script.class,"Script",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getScript_Annotations(),this.getAnnotation(),null,"annotations",null,0,-1,Script.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getScript_ScriptElements(),this.getScriptElement(),null,"scriptElements",null,0,-1,Script.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getScript_Module(),theTypesPackage.getTModule(),null,"module",null,0,1,Script.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getScript_FlaggedUsageMarkingFinished(),theEcorePackage.getEBoolean(),"flaggedUsageMarkingFinished",null,0,1,Script.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(scriptElementEClass,ScriptElement.class,"ScriptElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(exportDeclarationEClass,ExportDeclaration.class,"ExportDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExportDeclaration_ExportedElement(),this.getExportableElement(),null,"exportedElement",null,0,1,ExportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExportDeclaration_DefaultExportedExpression(),this.getExpression(),null,"defaultExportedExpression",null,0,1,ExportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExportDeclaration_NamedExports(),this.getExportSpecifier(),null,"namedExports",null,0,-1,ExportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExportDeclaration_WildcardExport(),theEcorePackage.getEBoolean(),"wildcardExport",null,0,1,ExportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExportDeclaration_DefaultExport(),theEcorePackage.getEBoolean(),"defaultExport",null,0,1,ExportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExportDeclaration_ReexportedFrom(),theTypesPackage.getTModule(),null,"reexportedFrom",null,0,1,ExportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(exportSpecifierEClass,ExportSpecifier.class,"ExportSpecifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExportSpecifier_Element(),this.getIdentifierRef(),null,"element",null,0,1,ExportSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExportSpecifier_Alias(),theEcorePackage.getEString(),"alias",null,0,1,ExportSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(exportableElementEClass,ExportableElement.class,"ExportableElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getExportableElement__IsExported(),theEcorePackage.getEBoolean(),"isExported",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getExportableElement__IsExportedAsDefault(),theEcorePackage.getEBoolean(),"isExportedAsDefault",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getExportableElement__GetExportedName(),theEcorePackage.getEString(),"getExportedName",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getExportableElement__IsToplevel(),theEcorePackage.getEBoolean(),"isToplevel",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(importDeclarationEClass,ImportDeclaration.class,"ImportDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getImportDeclaration_ImportSpecifiers(),this.getImportSpecifier(),null,"importSpecifiers",null,0,-1,ImportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getImportDeclaration_ImportFrom(),theEcorePackage.getEBoolean(),"importFrom",null,0,1,ImportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getImportDeclaration_Module(),theTypesPackage.getTModule(),null,"module",null,0,1,ImportDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(importSpecifierEClass,ImportSpecifier.class,"ImportSpecifier",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getImportSpecifier_FlaggedUsedInCode(),theEcorePackage.getEBoolean(),"flaggedUsedInCode",null,0,1,ImportSpecifier.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(namedImportSpecifierEClass,NamedImportSpecifier.class,"NamedImportSpecifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getNamedImportSpecifier_ImportedElement(),theTypesPackage.getTExportableElement(),null,"importedElement",null,0,1,NamedImportSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getNamedImportSpecifier_ImportedElementAsText(),theEcorePackage.getEString(),"importedElementAsText",null,0,1,NamedImportSpecifier.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getNamedImportSpecifier_Alias(),theEcorePackage.getEString(),"alias",null,0,1,NamedImportSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getNamedImportSpecifier__IsDefaultImport(),theEcorePackage.getEBoolean(),"isDefaultImport",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(defaultImportSpecifierEClass,DefaultImportSpecifier.class,"DefaultImportSpecifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getDefaultImportSpecifier__GetAlias(),theEcorePackage.getEString(),"getAlias",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getDefaultImportSpecifier__IsDefaultImport(),theEcorePackage.getEBoolean(),"isDefaultImport",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(namespaceImportSpecifierEClass,NamespaceImportSpecifier.class,"NamespaceImportSpecifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getNamespaceImportSpecifier_DeclaredDynamic(),theEcorePackage.getEBoolean(),"declaredDynamic",null,0,1,NamespaceImportSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getNamespaceImportSpecifier_Alias(),theEcorePackage.getEString(),"alias",null,0,1,NamespaceImportSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeProvidingElementEClass,TypeProvidingElement.class,"TypeProvidingElement",IS_ABSTRACT,IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getTypeProvidingElement__GetDeclaredTypeRef(),theTypeRefsPackage.getTypeRef(),"getDeclaredTypeRef",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(typedElementEClass,TypedElement.class,"TypedElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypedElement_DeclaredTypeRef(),theTypeRefsPackage.getTypeRef(),null,"declaredTypeRef",null,0,1,TypedElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTypedElement_BogusTypeRef(),theTypeRefsPackage.getTypeRef(),null,"bogusTypeRef",null,0,1,TypedElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(variableEnvironmentElementEClass,VariableEnvironmentElement.class,"VariableEnvironmentElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getVariableEnvironmentElement__AppliesOnlyToBlockScopedElements(),theEcorePackage.getEBoolean(),"appliesOnlyToBlockScopedElements",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(thisTargetEClass,ThisTarget.class,"ThisTarget",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(thisArgProviderEClass,ThisArgProvider.class,"ThisArgProvider",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(variableEClass,Variable.class,"Variable",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getVariable__IsConst(),theEcorePackage.getEBoolean(),"isConst",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(annotableElementEClass,AnnotableElement.class,"AnnotableElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getAnnotableElement__GetAnnotations(),this.getAnnotation(),"getAnnotations",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(annotableScriptElementEClass,AnnotableScriptElement.class,"AnnotableScriptElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAnnotableScriptElement_AnnotationList(),this.getAnnotationList(),null,"annotationList",null,0,1,AnnotableScriptElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getAnnotableScriptElement__GetAnnotations(),this.getAnnotation(),"getAnnotations",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(annotableExpressionEClass,AnnotableExpression.class,"AnnotableExpression",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAnnotableExpression_AnnotationList(),this.getExpressionAnnotationList(),null,"annotationList",null,0,1,AnnotableExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getAnnotableExpression__GetAnnotations(),this.getAnnotation(),"getAnnotations",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(abstractAnnotationListEClass,AbstractAnnotationList.class,"AbstractAnnotationList",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAbstractAnnotationList_Annotations(),this.getAnnotation(),null,"annotations",null,0,-1,AbstractAnnotationList.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(annotationListEClass,AnnotationList.class,"AnnotationList",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(expressionAnnotationListEClass,ExpressionAnnotationList.class,"ExpressionAnnotationList",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(annotationEClass,Annotation.class,"Annotation",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getAnnotation_Name(),theEcorePackage.getEString(),"name",null,0,1,Annotation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getAnnotation_Args(),this.getAnnotationArgument(),null,"args",null,0,-1,Annotation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getAnnotation__GetAnnotatedElement(),theEcorePackage.getEObject(),"getAnnotatedElement",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(annotationArgumentEClass,AnnotationArgument.class,"AnnotationArgument",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getAnnotationArgument__Value(),theEcorePackage.getEObject(),"value",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getAnnotationArgument__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(literalAnnotationArgumentEClass,LiteralAnnotationArgument.class,"LiteralAnnotationArgument",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getLiteralAnnotationArgument_Literal(),this.getLiteral(),null,"literal",null,0,1,LiteralAnnotationArgument.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getLiteralAnnotationArgument__Value(),this.getLiteral(),"value",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(typeRefAnnotationArgumentEClass,TypeRefAnnotationArgument.class,"TypeRefAnnotationArgument",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeRefAnnotationArgument_TypeRef(),theTypeRefsPackage.getTypeRef(),null,"typeRef",null,0,1,TypeRefAnnotationArgument.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTypeRefAnnotationArgument__Value(),theTypeRefsPackage.getTypeRef(),"value",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(functionOrFieldAccessorEClass,FunctionOrFieldAccessor.class,"FunctionOrFieldAccessor",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFunctionOrFieldAccessor_Body(),this.getBlock(),null,"body",null,0,1,FunctionOrFieldAccessor.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionOrFieldAccessor__lok(),this.getLocalArgumentsVariable(),null,"_lok",null,0,1,FunctionOrFieldAccessor.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getFunctionOrFieldAccessor__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionOrFieldAccessor__GetLocalArgumentsVariable(),this.getLocalArgumentsVariable(),"getLocalArgumentsVariable",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionOrFieldAccessor__IsAsync(),theEcorePackage.getEBoolean(),"isAsync",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionOrFieldAccessor__GetDefinedFunctionOrAccessor(),theTypesPackage.getIdentifiableElement(),"getDefinedFunctionOrAccessor",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(functionDefinitionEClass,FunctionDefinition.class,"FunctionDefinition",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFunctionDefinition_Fpars(),this.getFormalParameter(),null,"fpars",null,0,-1,FunctionDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionDefinition_ReturnTypeRef(),theTypeRefsPackage.getTypeRef(),null,"returnTypeRef",null,0,1,FunctionDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getFunctionDefinition_Generator(),theEcorePackage.getEBoolean(),"generator",null,0,1,FunctionDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getFunctionDefinition_DeclaredAsync(),theEcorePackage.getEBoolean(),"declaredAsync",null,0,1,FunctionDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getFunctionDefinition__IsAsync(),theEcorePackage.getEBoolean(),"isAsync",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(fieldAccessorEClass,FieldAccessor.class,"FieldAccessor",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getFieldAccessor__GetDeclaredTypeRef(),theTypeRefsPackage.getTypeRef(),"getDeclaredTypeRef",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFieldAccessor__GetDefinedAccessor(),theTypesPackage.getFieldAccessor(),"getDefinedAccessor",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(functionDeclarationEClass,FunctionDeclaration.class,"FunctionDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFunctionDeclaration_Name(),theEcorePackage.getEString(),"name",null,0,1,FunctionDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getFunctionDeclaration__IsExternal(),theEcorePackage.getEBoolean(),"isExternal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(functionExpressionEClass,FunctionExpression.class,"FunctionExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFunctionExpression_Name(),theEcorePackage.getEString(),"name",null,0,1,FunctionExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getFunctionExpression__IsArrowFunction(),theEcorePackage.getEBoolean(),"isArrowFunction",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(arrowFunctionEClass,ArrowFunction.class,"ArrowFunction",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getArrowFunction_HasBracesAroundBody(),theEcorePackage.getEBoolean(),"hasBracesAroundBody",null,0,1,ArrowFunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getArrowFunction__IsArrowFunction(),theEcorePackage.getEBoolean(),"isArrowFunction",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getArrowFunction__IsSingleExprImplicitReturn(),theEcorePackage.getEBoolean(),"isSingleExprImplicitReturn",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getArrowFunction__ImplicitReturnExpr(),this.getExpression(),"implicitReturnExpr",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(localArgumentsVariableEClass,LocalArgumentsVariable.class,"LocalArgumentsVariable",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getLocalArgumentsVariable__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(formalParameterEClass,FormalParameter.class,"FormalParameter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFormalParameter_Annotations(),this.getAnnotation(),null,"annotations",null,0,-1,FormalParameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getFormalParameter_Variadic(),theEcorePackage.getEBoolean(),"variadic",null,0,1,FormalParameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFormalParameter_DefinedTypeElement(),theTypesPackage.getTFormalParameter(),null,"definedTypeElement",null,0,1,FormalParameter.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFormalParameter_Initializer(),this.getExpression(),null,"initializer",null,0,1,FormalParameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFormalParameter_BindingPattern(),this.getBindingPattern(),null,"bindingPattern",null,0,1,FormalParameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(blockEClass,Block.class,"Block",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBlock_Statements(),this.getStatement(),null,"statements",null,0,-1,Block.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getBlock__AppliesOnlyToBlockScopedElements(),theEcorePackage.getEBoolean(),"appliesOnlyToBlockScopedElements",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBlock__GetAllStatements(),this.getIteratorOfStatement(),"getAllStatements",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBlock__GetAllReturnStatements(),this.getIteratorOfReturnStatement(),"getAllReturnStatements",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBlock__GetAllNonVoidReturnStatements(),this.getIteratorOfReturnStatement(),"getAllNonVoidReturnStatements",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBlock__GetAllVoidReturnStatements(),this.getIteratorOfReturnStatement(),"getAllVoidReturnStatements",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBlock__HasNonVoidReturn(),theEcorePackage.getEBoolean(),"hasNonVoidReturn",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(statementEClass,Statement.class,"Statement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(variableDeclarationContainerEClass,VariableDeclarationContainer.class,"VariableDeclarationContainer",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getVariableDeclarationContainer_VarDeclsOrBindings(),this.getVariableDeclarationOrBinding(),null,"varDeclsOrBindings",null,0,-1,VariableDeclarationContainer.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getVariableDeclarationContainer_VarStmtKeyword(),this.getVariableStatementKeyword(),"varStmtKeyword",null,0,1,VariableDeclarationContainer.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getVariableDeclarationContainer__GetVarDecl(),this.getVariableDeclaration(),"getVarDecl",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getVariableDeclarationContainer__IsBlockScoped(),theEcorePackage.getEBoolean(),"isBlockScoped",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(variableStatementEClass,VariableStatement.class,"VariableStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(exportedVariableStatementEClass,ExportedVariableStatement.class,"ExportedVariableStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getExportedVariableStatement__IsExternal(),theEcorePackage.getEBoolean(),"isExternal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(variableDeclarationOrBindingEClass,VariableDeclarationOrBinding.class,"VariableDeclarationOrBinding",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getVariableDeclarationOrBinding__GetVariableDeclarations(),this.getVariableDeclaration(),"getVariableDeclarations",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(variableBindingEClass,VariableBinding.class,"VariableBinding",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getVariableBinding_Pattern(),this.getBindingPattern(),null,"pattern",null,0,1,VariableBinding.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getVariableBinding_Expression(),this.getExpression(),null,"expression",null,0,1,VariableBinding.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(exportedVariableBindingEClass,ExportedVariableBinding.class,"ExportedVariableBinding",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExportedVariableBinding_DefinedVariable(),theTypesPackage.getTVariable(),null,"definedVariable",null,0,1,ExportedVariableBinding.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(variableDeclarationEClass,VariableDeclaration.class,"VariableDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getVariableDeclaration_Annotations(),this.getAnnotation(),null,"annotations",null,0,-1,VariableDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getVariableDeclaration_Expression(),this.getExpression(),null,"expression",null,0,1,VariableDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getVariableDeclaration__IsConst(),theEcorePackage.getEBoolean(),"isConst",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(exportedVariableDeclarationEClass,ExportedVariableDeclaration.class,"ExportedVariableDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExportedVariableDeclaration_DefinedVariable(),theTypesPackage.getTVariable(),null,"definedVariable",null,0,1,ExportedVariableDeclaration.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(emptyStatementEClass,EmptyStatement.class,"EmptyStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(expressionStatementEClass,ExpressionStatement.class,"ExpressionStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExpressionStatement_Expression(),this.getExpression(),null,"expression",null,0,1,ExpressionStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(ifStatementEClass,IfStatement.class,"IfStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getIfStatement_Expression(),this.getExpression(),null,"expression",null,0,1,IfStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getIfStatement_IfStmt(),this.getStatement(),null,"ifStmt",null,0,1,IfStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getIfStatement_ElseStmt(),this.getStatement(),null,"elseStmt",null,0,1,IfStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(iterationStatementEClass,IterationStatement.class,"IterationStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getIterationStatement_Statement(),this.getStatement(),null,"statement",null,0,1,IterationStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getIterationStatement_Expression(),this.getExpression(),null,"expression",null,0,1,IterationStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(doStatementEClass,DoStatement.class,"DoStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(whileStatementEClass,WhileStatement.class,"WhileStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(forStatementEClass,ForStatement.class,"ForStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getForStatement_InitExpr(),this.getExpression(),null,"initExpr",null,0,1,ForStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getForStatement_UpdateExpr(),this.getExpression(),null,"updateExpr",null,0,1,ForStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getForStatement_ForIn(),theEcorePackage.getEBoolean(),"forIn",null,0,1,ForStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getForStatement_ForOf(),theEcorePackage.getEBoolean(),"forOf",null,0,1,ForStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getForStatement__IsForPlain(),theEcorePackage.getEBoolean(),"isForPlain",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getForStatement__AppliesOnlyToBlockScopedElements(),theEcorePackage.getEBoolean(),"appliesOnlyToBlockScopedElements",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(continueStatementEClass,ContinueStatement.class,"ContinueStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getContinueStatement_Label(),this.getLabelledStatement(),null,"label",null,0,1,ContinueStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(breakStatementEClass,BreakStatement.class,"BreakStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBreakStatement_Label(),this.getLabelledStatement(),null,"label",null,0,1,BreakStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(returnStatementEClass,ReturnStatement.class,"ReturnStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReturnStatement_Expression(),this.getExpression(),null,"expression",null,0,1,ReturnStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(withStatementEClass,WithStatement.class,"WithStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getWithStatement_Expression(),this.getExpression(),null,"expression",null,0,1,WithStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getWithStatement_Statement(),this.getStatement(),null,"statement",null,0,1,WithStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(switchStatementEClass,SwitchStatement.class,"SwitchStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSwitchStatement_Expression(),this.getExpression(),null,"expression",null,0,1,SwitchStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getSwitchStatement_Cases(),this.getAbstractCaseClause(),null,"cases",null,0,-1,SwitchStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getSwitchStatement__AppliesOnlyToBlockScopedElements(),theEcorePackage.getEBoolean(),"appliesOnlyToBlockScopedElements",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getSwitchStatement__GetDefaultClause(),this.getDefaultClause(),"getDefaultClause",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getSwitchStatement__GetCaseClauses(),this.getCaseClause(),"getCaseClauses",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(abstractCaseClauseEClass,AbstractCaseClause.class,"AbstractCaseClause",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAbstractCaseClause_Statements(),this.getStatement(),null,"statements",null,0,-1,AbstractCaseClause.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(caseClauseEClass,CaseClause.class,"CaseClause",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCaseClause_Expression(),this.getExpression(),null,"expression",null,0,1,CaseClause.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(defaultClauseEClass,DefaultClause.class,"DefaultClause",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(labelledStatementEClass,LabelledStatement.class,"LabelledStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getLabelledStatement_Name(),theEcorePackage.getEString(),"name",null,0,1,LabelledStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getLabelledStatement_Statement(),this.getStatement(),null,"statement",null,0,1,LabelledStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(throwStatementEClass,ThrowStatement.class,"ThrowStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getThrowStatement_Expression(),this.getExpression(),null,"expression",null,0,1,ThrowStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(tryStatementEClass,TryStatement.class,"TryStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTryStatement_Block(),this.getBlock(),null,"block",null,0,1,TryStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTryStatement_Catch(),this.getCatchBlock(),null,"catch",null,0,1,TryStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTryStatement_Finally(),this.getFinallyBlock(),null,"finally",null,0,1,TryStatement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(abstractCatchBlockEClass,AbstractCatchBlock.class,"AbstractCatchBlock",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAbstractCatchBlock_Block(),this.getBlock(),null,"block",null,0,1,AbstractCatchBlock.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(catchBlockEClass,CatchBlock.class,"CatchBlock",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCatchBlock_CatchVariable(),this.getCatchVariable(),null,"catchVariable",null,0,1,CatchBlock.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(catchVariableEClass,CatchVariable.class,"CatchVariable",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCatchVariable_BindingPattern(),this.getBindingPattern(),null,"bindingPattern",null,0,1,CatchVariable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(finallyBlockEClass,FinallyBlock.class,"FinallyBlock",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(debuggerStatementEClass,DebuggerStatement.class,"DebuggerStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(primaryExpressionEClass,PrimaryExpression.class,"PrimaryExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(parenExpressionEClass,ParenExpression.class,"ParenExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParenExpression_Expression(),this.getExpression(),null,"expression",null,0,1,ParenExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getParenExpression__IsValidSimpleAssignmentTarget(),theEcorePackage.getEBoolean(),"isValidSimpleAssignmentTarget",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(identifierRefEClass,IdentifierRef.class,"IdentifierRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getIdentifierRef_Id(),theTypesPackage.getIdentifiableElement(),null,"id",null,0,1,IdentifierRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getIdentifierRef_IdAsText(),theEcorePackage.getEString(),"idAsText",null,0,1,IdentifierRef.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getIdentifierRef__IsValidSimpleAssignmentTarget(),theEcorePackage.getEBoolean(),"isValidSimpleAssignmentTarget",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(strictModeRelevantEClass,StrictModeRelevant.class,"StrictModeRelevant",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getStrictModeRelevant_StrictMode(),theEcorePackage.getEBoolean(),"strictMode",null,0,1,StrictModeRelevant.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEClass(superLiteralEClass,SuperLiteral.class,"SuperLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getSuperLiteral__IsSuperConstructorAccess(),theEcorePackage.getEBoolean(),"isSuperConstructorAccess",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getSuperLiteral__IsSuperMemberAccess(),theEcorePackage.getEBoolean(),"isSuperMemberAccess",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(thisLiteralEClass,ThisLiteral.class,"ThisLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(arrayLiteralEClass,ArrayLiteral.class,"ArrayLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getArrayLiteral_Elements(),this.getArrayElement(),null,"elements",null,0,-1,ArrayLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getArrayLiteral_TrailingComma(),theEcorePackage.getEBoolean(),"trailingComma",null,0,1,ArrayLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(arrayElementEClass,ArrayElement.class,"ArrayElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getArrayElement_Spread(),theEcorePackage.getEBoolean(),"spread",null,0,1,ArrayElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getArrayElement_Expression(),this.getExpression(),null,"expression",null,0,1,ArrayElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(arrayPaddingEClass,ArrayPadding.class,"ArrayPadding",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(objectLiteralEClass,ObjectLiteral.class,"ObjectLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getObjectLiteral_PropertyAssignments(),this.getPropertyAssignment(),null,"propertyAssignments",null,0,-1,ObjectLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(propertyAssignmentEClass,PropertyAssignment.class,"PropertyAssignment",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getPropertyAssignment__GetDefinedMember(),theTypesPackage.getTStructMember(),"getDefinedMember",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getPropertyAssignment__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(propertyNameOwnerEClass,PropertyNameOwner.class,"PropertyNameOwner",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPropertyNameOwner_DeclaredName(),this.getLiteralOrComputedPropertyName(),null,"declaredName",null,0,1,PropertyNameOwner.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getPropertyNameOwner__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getPropertyNameOwner__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(literalOrComputedPropertyNameEClass,LiteralOrComputedPropertyName.class,"LiteralOrComputedPropertyName",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getLiteralOrComputedPropertyName_Kind(),this.getPropertyNameKind(),"kind",null,0,1,LiteralOrComputedPropertyName.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getLiteralOrComputedPropertyName_LiteralName(),theEcorePackage.getEString(),"literalName",null,0,1,LiteralOrComputedPropertyName.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getLiteralOrComputedPropertyName_ComputedName(),theEcorePackage.getEString(),"computedName",null,0,1,LiteralOrComputedPropertyName.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getLiteralOrComputedPropertyName_Expression(),this.getExpression(),null,"expression",null,0,1,LiteralOrComputedPropertyName.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getLiteralOrComputedPropertyName__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(annotablePropertyAssignmentEClass,AnnotablePropertyAssignment.class,"AnnotablePropertyAssignment",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAnnotablePropertyAssignment_AnnotationList(),this.getPropertyAssignmentAnnotationList(),null,"annotationList",null,0,1,AnnotablePropertyAssignment.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getAnnotablePropertyAssignment__GetAnnotations(),this.getAnnotation(),"getAnnotations",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(propertyAssignmentAnnotationListEClass,PropertyAssignmentAnnotationList.class,"PropertyAssignmentAnnotationList",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getPropertyAssignmentAnnotationList__GetDefinedMember(),theTypesPackage.getTStructMember(),"getDefinedMember",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(propertyNameValuePairEClass,PropertyNameValuePair.class,"PropertyNameValuePair",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPropertyNameValuePair_DefinedField(),theTypesPackage.getTStructField(),null,"definedField",null,0,1,PropertyNameValuePair.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getPropertyNameValuePair_Expression(),this.getExpression(),null,"expression",null,0,1,PropertyNameValuePair.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getPropertyNameValuePair__GetDefinedMember(),theTypesPackage.getTStructField(),"getDefinedMember",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getPropertyNameValuePair__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(propertyNameValuePairSingleNameEClass,PropertyNameValuePairSingleName.class,"PropertyNameValuePairSingleName",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPropertyNameValuePairSingleName_IdentifierRef(),this.getIdentifierRef(),null,"identifierRef",null,0,1,PropertyNameValuePairSingleName.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getPropertyNameValuePairSingleName__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(propertyMethodDeclarationEClass,PropertyMethodDeclaration.class,"PropertyMethodDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPropertyMethodDeclaration_DefinedMethod(),theTypesPackage.getTStructMethod(),null,"definedMethod",null,0,1,PropertyMethodDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getPropertyMethodDeclaration__GetDefinedMember(),theTypesPackage.getTStructMethod(),"getDefinedMember",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(getterDeclarationEClass,GetterDeclaration.class,"GetterDeclaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getGetterDeclaration_DefinedGetter(),theTypesPackage.getTGetter(),null,"definedGetter",null,0,1,GetterDeclaration.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getGetterDeclaration__GetDefinedAccessor(),theTypesPackage.getTGetter(),"getDefinedAccessor",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(setterDeclarationEClass,SetterDeclaration.class,"SetterDeclaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSetterDeclaration_DefinedSetter(),theTypesPackage.getTSetter(),null,"definedSetter",null,0,1,SetterDeclaration.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getSetterDeclaration_Fpar(),this.getFormalParameter(),null,"fpar",null,0,1,SetterDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getSetterDeclaration__GetDefinedAccessor(),theTypesPackage.getTSetter(),"getDefinedAccessor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getSetterDeclaration__GetDeclaredTypeRef(),theTypeRefsPackage.getTypeRef(),"getDeclaredTypeRef",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(propertyGetterDeclarationEClass,PropertyGetterDeclaration.class,"PropertyGetterDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getPropertyGetterDeclaration__GetDefinedGetter(),theTypesPackage.getTStructGetter(),"getDefinedGetter",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getPropertyGetterDeclaration__GetDefinedMember(),theTypesPackage.getTStructGetter(),"getDefinedMember",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getPropertyGetterDeclaration__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(propertySetterDeclarationEClass,PropertySetterDeclaration.class,"PropertySetterDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getPropertySetterDeclaration__GetDefinedSetter(),theTypesPackage.getTStructSetter(),"getDefinedSetter",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getPropertySetterDeclaration__GetDefinedMember(),theTypesPackage.getTStructSetter(),"getDefinedMember",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getPropertySetterDeclaration__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(expressionEClass,Expression.class,"Expression",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getExpression__IsValidSimpleAssignmentTarget(),theEcorePackage.getEBoolean(),"isValidSimpleAssignmentTarget",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(newTargetEClass,NewTarget.class,"NewTarget",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(newExpressionEClass,NewExpression.class,"NewExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getNewExpression_Callee(),this.getExpression(),null,"callee",null,0,1,NewExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getNewExpression_Arguments(),this.getArgument(),null,"arguments",null,0,-1,NewExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getNewExpression_WithArgs(),theEcorePackage.getEBoolean(),"withArgs",null,0,1,NewExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(parameterizedAccessEClass,ParameterizedAccess.class,"ParameterizedAccess",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParameterizedAccess_TypeArgs(),theTypeRefsPackage.getTypeRef(),null,"typeArgs",null,0,-1,ParameterizedAccess.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getParameterizedAccess__IsParameterized(),theEcorePackage.getEBoolean(),"isParameterized",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(parameterizedCallExpressionEClass,ParameterizedCallExpression.class,"ParameterizedCallExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParameterizedCallExpression_Target(),this.getExpression(),null,"target",null,0,1,ParameterizedCallExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getParameterizedCallExpression_Arguments(),this.getArgument(),null,"arguments",null,0,-1,ParameterizedCallExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getParameterizedCallExpression__GetReceiver(),this.getExpression(),"getReceiver",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(argumentEClass,Argument.class,"Argument",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getArgument_Spread(),theEcorePackage.getEBoolean(),"spread",null,0,1,Argument.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getArgument_Expression(),this.getExpression(),null,"expression",null,0,1,Argument.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(indexedAccessExpressionEClass,IndexedAccessExpression.class,"IndexedAccessExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getIndexedAccessExpression_Target(),this.getExpression(),null,"target",null,0,1,IndexedAccessExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getIndexedAccessExpression_Index(),this.getExpression(),null,"index",null,0,1,IndexedAccessExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getIndexedAccessExpression__IsValidSimpleAssignmentTarget(),theEcorePackage.getEBoolean(),"isValidSimpleAssignmentTarget",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(taggedTemplateStringEClass,TaggedTemplateString.class,"TaggedTemplateString",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTaggedTemplateString_Target(),this.getExpression(),null,"target",null,0,1,TaggedTemplateString.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTaggedTemplateString_Template(),this.getTemplateLiteral(),null,"template",null,0,1,TaggedTemplateString.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(parameterizedPropertyAccessExpressionEClass,ParameterizedPropertyAccessExpression.class,"ParameterizedPropertyAccessExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParameterizedPropertyAccessExpression_Target(),this.getExpression(),null,"target",null,0,1,ParameterizedPropertyAccessExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getParameterizedPropertyAccessExpression_Property(),theTypesPackage.getIdentifiableElement(),null,"property",null,0,1,ParameterizedPropertyAccessExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getParameterizedPropertyAccessExpression_PropertyAsText(),theEcorePackage.getEString(),"propertyAsText",null,0,1,ParameterizedPropertyAccessExpression.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getParameterizedPropertyAccessExpression__IsValidSimpleAssignmentTarget(),theEcorePackage.getEBoolean(),"isValidSimpleAssignmentTarget",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(awaitExpressionEClass,AwaitExpression.class,"AwaitExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAwaitExpression_Expression(),this.getExpression(),null,"expression",null,0,1,AwaitExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(promisifyExpressionEClass,PromisifyExpression.class,"PromisifyExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPromisifyExpression_Expression(),this.getExpression(),null,"expression",null,0,1,PromisifyExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(yieldExpressionEClass,YieldExpression.class,"YieldExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getYieldExpression_Expression(),this.getExpression(),null,"expression",null,0,1,YieldExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getYieldExpression_Many(),theEcorePackage.getEBoolean(),"many",null,0,1,YieldExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(literalEClass,Literal.class,"Literal",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getLiteral__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(nullLiteralEClass,NullLiteral.class,"NullLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getNullLiteral__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(booleanLiteralEClass,BooleanLiteral.class,"BooleanLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getBooleanLiteral_True(),theEcorePackage.getEBoolean(),"true",null,0,1,BooleanLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getBooleanLiteral__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(stringLiteralEClass,StringLiteral.class,"StringLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getStringLiteral_Value(),theEcorePackage.getEString(),"value",null,0,1,StringLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getStringLiteral_RawValue(),theEcorePackage.getEString(),"rawValue",null,0,1,StringLiteral.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getStringLiteral__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(templateLiteralEClass,TemplateLiteral.class,"TemplateLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTemplateLiteral_Segments(),this.getExpression(),null,"segments",null,0,-1,TemplateLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTemplateLiteral__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(templateSegmentEClass,TemplateSegment.class,"TemplateSegment",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTemplateSegment_RawValue(),theEcorePackage.getEString(),"rawValue",null,0,1,TemplateSegment.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTemplateSegment__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(numericLiteralEClass,NumericLiteral.class,"NumericLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getNumericLiteral_Value(),theEcorePackage.getEBigDecimal(),"value",null,0,1,NumericLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getNumericLiteral__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(doubleLiteralEClass,DoubleLiteral.class,"DoubleLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getDoubleLiteral__ToDouble(),theEcorePackage.getEDouble(),"toDouble",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getDoubleLiteral__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(abstractIntLiteralEClass,AbstractIntLiteral.class,"AbstractIntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getAbstractIntLiteral__ToInt(),theEcorePackage.getEInt(),"toInt",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getAbstractIntLiteral__ToLong(),theEcorePackage.getELong(),"toLong",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getAbstractIntLiteral__ToBigInteger(),theEcorePackage.getEBigInteger(),"toBigInteger",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(intLiteralEClass,IntLiteral.class,"IntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(binaryIntLiteralEClass,BinaryIntLiteral.class,"BinaryIntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(octalIntLiteralEClass,OctalIntLiteral.class,"OctalIntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(legacyOctalIntLiteralEClass,LegacyOctalIntLiteral.class,"LegacyOctalIntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(hexIntLiteralEClass,HexIntLiteral.class,"HexIntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(scientificIntLiteralEClass,ScientificIntLiteral.class,"ScientificIntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(regularExpressionLiteralEClass,RegularExpressionLiteral.class,"RegularExpressionLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getRegularExpressionLiteral_Value(),theEcorePackage.getEString(),"value",null,0,1,RegularExpressionLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getRegularExpressionLiteral__GetValueAsString(),theEcorePackage.getEString(),"getValueAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(postfixExpressionEClass,PostfixExpression.class,"PostfixExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPostfixExpression_Expression(),this.getExpression(),null,"expression",null,0,1,PostfixExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getPostfixExpression_Op(),this.getPostfixOperator(),"op",null,0,1,PostfixExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(unaryExpressionEClass,UnaryExpression.class,"UnaryExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getUnaryExpression_Op(),this.getUnaryOperator(),"op",null,0,1,UnaryExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getUnaryExpression_Expression(),this.getExpression(),null,"expression",null,0,1,UnaryExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(castExpressionEClass,CastExpression.class,"CastExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCastExpression_Expression(),this.getExpression(),null,"expression",null,0,1,CastExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getCastExpression_TargetTypeRef(),theTypeRefsPackage.getTypeRef(),null,"targetTypeRef",null,0,1,CastExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(multiplicativeExpressionEClass,MultiplicativeExpression.class,"MultiplicativeExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getMultiplicativeExpression_Lhs(),this.getExpression(),null,"lhs",null,0,1,MultiplicativeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getMultiplicativeExpression_Op(),this.getMultiplicativeOperator(),"op",null,0,1,MultiplicativeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getMultiplicativeExpression_Rhs(),this.getExpression(),null,"rhs",null,0,1,MultiplicativeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(additiveExpressionEClass,AdditiveExpression.class,"AdditiveExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAdditiveExpression_Lhs(),this.getExpression(),null,"lhs",null,0,1,AdditiveExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getAdditiveExpression_Op(),this.getAdditiveOperator(),"op",null,0,1,AdditiveExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getAdditiveExpression_Rhs(),this.getExpression(),null,"rhs",null,0,1,AdditiveExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(shiftExpressionEClass,ShiftExpression.class,"ShiftExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getShiftExpression_Lhs(),this.getExpression(),null,"lhs",null,0,1,ShiftExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getShiftExpression_Op(),this.getShiftOperator(),"op",null,0,1,ShiftExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getShiftExpression_Rhs(),this.getExpression(),null,"rhs",null,0,1,ShiftExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(relationalExpressionEClass,RelationalExpression.class,"RelationalExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getRelationalExpression_Lhs(),this.getExpression(),null,"lhs",null,0,1,RelationalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getRelationalExpression_Op(),this.getRelationalOperator(),"op",null,0,1,RelationalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getRelationalExpression_Rhs(),this.getExpression(),null,"rhs",null,0,1,RelationalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(equalityExpressionEClass,EqualityExpression.class,"EqualityExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEqualityExpression_Lhs(),this.getExpression(),null,"lhs",null,0,1,EqualityExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getEqualityExpression_Op(),this.getEqualityOperator(),"op",null,0,1,EqualityExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEqualityExpression_Rhs(),this.getExpression(),null,"rhs",null,0,1,EqualityExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(binaryBitwiseExpressionEClass,BinaryBitwiseExpression.class,"BinaryBitwiseExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBinaryBitwiseExpression_Lhs(),this.getExpression(),null,"lhs",null,0,1,BinaryBitwiseExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getBinaryBitwiseExpression_Op(),this.getBinaryBitwiseOperator(),"op",null,0,1,BinaryBitwiseExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBinaryBitwiseExpression_Rhs(),this.getExpression(),null,"rhs",null,0,1,BinaryBitwiseExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(binaryLogicalExpressionEClass,BinaryLogicalExpression.class,"BinaryLogicalExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBinaryLogicalExpression_Lhs(),this.getExpression(),null,"lhs",null,0,1,BinaryLogicalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getBinaryLogicalExpression_Op(),this.getBinaryLogicalOperator(),"op",null,0,1,BinaryLogicalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBinaryLogicalExpression_Rhs(),this.getExpression(),null,"rhs",null,0,1,BinaryLogicalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(conditionalExpressionEClass,ConditionalExpression.class,"ConditionalExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getConditionalExpression_Expression(),this.getExpression(),null,"expression",null,0,1,ConditionalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getConditionalExpression_TrueExpression(),this.getExpression(),null,"trueExpression",null,0,1,ConditionalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getConditionalExpression_FalseExpression(),this.getExpression(),null,"falseExpression",null,0,1,ConditionalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(assignmentExpressionEClass,AssignmentExpression.class,"AssignmentExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAssignmentExpression_Lhs(),this.getExpression(),null,"lhs",null,0,1,AssignmentExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getAssignmentExpression_Op(),this.getAssignmentOperator(),"op",null,0,1,AssignmentExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getAssignmentExpression_Rhs(),this.getExpression(),null,"rhs",null,0,1,AssignmentExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(commaExpressionEClass,CommaExpression.class,"CommaExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCommaExpression_Exprs(),this.getExpression(),null,"exprs",null,0,-1,CommaExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeDefiningElementEClass,TypeDefiningElement.class,"TypeDefiningElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeDefiningElement_DefinedType(),theTypesPackage.getType(),null,"definedType",null,0,1,TypeDefiningElement.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(genericDeclarationEClass,GenericDeclaration.class,"GenericDeclaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getGenericDeclaration_TypeVars(),theTypesPackage.getTypeVariable(),null,"typeVars",null,0,-1,GenericDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(n4TypeDefinitionEClass,N4TypeDefinition.class,"N4TypeDefinition",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getN4TypeDefinition__IsExternal(),theEcorePackage.getEBoolean(),"isExternal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4TypeDeclarationEClass,N4TypeDeclaration.class,"N4TypeDeclaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getN4TypeDeclaration_Name(),theEcorePackage.getEString(),"name",null,0,1,N4TypeDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getN4TypeDeclaration__IsExternal(),theEcorePackage.getEBoolean(),"isExternal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4ClassifierDeclarationEClass,N4ClassifierDeclaration.class,"N4ClassifierDeclaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getN4ClassifierDeclaration_TypingStrategy(),theTypesPackage.getTypingStrategy(),"typingStrategy",null,0,1,N4ClassifierDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(n4ClassifierDefinitionEClass,N4ClassifierDefinition.class,"N4ClassifierDefinition",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getN4ClassifierDefinition_OwnedMembersRaw(),this.getN4MemberDeclaration(),this.getN4MemberDeclaration_Owner(),"ownedMembersRaw",null,0,-1,N4ClassifierDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetOwnedMembers(),this.getN4MemberDeclaration(),"getOwnedMembers",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetOwnedCtor(),this.getN4MethodDeclaration(),"getOwnedCtor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetOwnedCallableCtor(),this.getN4MethodDeclaration(),"getOwnedCallableCtor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetOwnedMethods(),this.getN4MethodDeclaration(),"getOwnedMethods",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetOwnedFields(),this.getN4FieldDeclaration(),"getOwnedFields",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetOwnedGetters(),this.getN4GetterDeclaration(),"getOwnedGetters",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetOwnedSetters(),this.getN4SetterDeclaration(),"getOwnedSetters",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetSuperClassifierRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getSuperClassifierRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassifierDefinition__GetImplementedOrExtendedInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getImplementedOrExtendedInterfaceRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4ClassDefinitionEClass,N4ClassDefinition.class,"N4ClassDefinition",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getN4ClassDefinition_SuperClassRef(),theTypeRefsPackage.getParameterizedTypeRef(),null,"superClassRef",null,0,1,N4ClassDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getN4ClassDefinition_SuperClassExpression(),this.getExpression(),null,"superClassExpression",null,0,1,N4ClassDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getN4ClassDefinition_ImplementedInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRef(),null,"implementedInterfaceRefs",null,0,-1,N4ClassDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getN4ClassDefinition__GetDefinedTypeAsClass(),theTypesPackage.getTClass(),"getDefinedTypeAsClass",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassDefinition__GetSuperClassifierRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getSuperClassifierRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4ClassDefinition__GetImplementedOrExtendedInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getImplementedOrExtendedInterfaceRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4ClassDeclarationEClass,N4ClassDeclaration.class,"N4ClassDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getN4ClassDeclaration__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4ClassExpressionEClass,N4ClassExpression.class,"N4ClassExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getN4ClassExpression_Name(),theEcorePackage.getEString(),"name",null,0,1,N4ClassExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(n4InterfaceDeclarationEClass,N4InterfaceDeclaration.class,"N4InterfaceDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getN4InterfaceDeclaration_SuperInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRef(),null,"superInterfaceRefs",null,0,-1,N4InterfaceDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getN4InterfaceDeclaration__GetDefinedTypeAsInterface(),theTypesPackage.getTInterface(),"getDefinedTypeAsInterface",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4InterfaceDeclaration__GetSuperClassifierRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getSuperClassifierRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4InterfaceDeclaration__GetImplementedOrExtendedInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getImplementedOrExtendedInterfaceRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4EnumDeclarationEClass,N4EnumDeclaration.class,"N4EnumDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getN4EnumDeclaration_Literals(),this.getN4EnumLiteral(),null,"literals",null,0,-1,N4EnumDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getN4EnumDeclaration__GetDefinedTypeAsEnum(),theTypesPackage.getTEnum(),"getDefinedTypeAsEnum",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4EnumLiteralEClass,N4EnumLiteral.class,"N4EnumLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getN4EnumLiteral_Name(),theEcorePackage.getEString(),"name",null,0,1,N4EnumLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getN4EnumLiteral_Value(),theEcorePackage.getEString(),"value",null,0,1,N4EnumLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getN4EnumLiteral_DefinedLiteral(),theTypesPackage.getTEnumLiteral(),null,"definedLiteral",null,0,1,N4EnumLiteral.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(modifiableElementEClass,ModifiableElement.class,"ModifiableElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getModifiableElement_DeclaredModifiers(),this.getN4Modifier(),"declaredModifiers",null,0,-1,ModifiableElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(n4MemberDeclarationEClass,N4MemberDeclaration.class,"N4MemberDeclaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getN4MemberDeclaration_Owner(),this.getN4ClassifierDefinition(),this.getN4ClassifierDefinition_OwnedMembersRaw(),"owner",null,0,1,N4MemberDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getN4MemberDeclaration__GetDefinedTypeElement(),theTypesPackage.getTMember(),"getDefinedTypeElement",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MemberDeclaration__IsDeclaredStatic(),theEcorePackage.getEBoolean(),"isDeclaredStatic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MemberDeclaration__IsStatic(),theEcorePackage.getEBoolean(),"isStatic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MemberDeclaration__IsDeclaredFinal(),theEcorePackage.getEBoolean(),"isDeclaredFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MemberDeclaration__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MemberDeclaration__IsConstructor(),theEcorePackage.getEBoolean(),"isConstructor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MemberDeclaration__IsCallableConstructor(),theEcorePackage.getEBoolean(),"isCallableConstructor",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(annotableN4MemberDeclarationEClass,AnnotableN4MemberDeclaration.class,"AnnotableN4MemberDeclaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAnnotableN4MemberDeclaration_AnnotationList(),this.getN4MemberAnnotationList(),null,"annotationList",null,0,1,AnnotableN4MemberDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getAnnotableN4MemberDeclaration__GetAnnotations(),this.getAnnotation(),"getAnnotations",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4MemberAnnotationListEClass,N4MemberAnnotationList.class,"N4MemberAnnotationList",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getN4MemberAnnotationList__GetDefinedTypeElement(),theTypesPackage.getTMember(),"getDefinedTypeElement",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MemberAnnotationList__GetDeclaredTypeRef(),theTypeRefsPackage.getTypeRef(),"getDeclaredTypeRef",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MemberAnnotationList__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4FieldDeclarationEClass,N4FieldDeclaration.class,"N4FieldDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getN4FieldDeclaration_DefinedField(),theTypesPackage.getTField(),null,"definedField",null,0,1,N4FieldDeclaration.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getN4FieldDeclaration_Expression(),this.getExpression(),null,"expression",null,0,1,N4FieldDeclaration.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getN4FieldDeclaration__GetDefinedTypeElement(),theTypesPackage.getTMember(),"getDefinedTypeElement",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4FieldDeclaration__IsConst(),theEcorePackage.getEBoolean(),"isConst",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4FieldDeclaration__IsStatic(),theEcorePackage.getEBoolean(),"isStatic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4FieldDeclaration__IsValid(),theEcorePackage.getEBoolean(),"isValid",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4FieldDeclaration__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(methodDeclarationEClass,MethodDeclaration.class,"MethodDeclaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getMethodDeclaration__ExistsExplicitSuperCall(),theEcorePackage.getEBoolean(),"existsExplicitSuperCall",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getMethodDeclaration__GetDefinedTypeElement(),theTypesPackage.getTMember(),"getDefinedTypeElement",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getMethodDeclaration__IsStatic(),theEcorePackage.getEBoolean(),"isStatic",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4MethodDeclarationEClass,N4MethodDeclaration.class,"N4MethodDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getN4MethodDeclaration__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MethodDeclaration__IsConstructor(),theEcorePackage.getEBoolean(),"isConstructor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MethodDeclaration__IsCallableConstructor(),theEcorePackage.getEBoolean(),"isCallableConstructor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MethodDeclaration__IsStatic(),theEcorePackage.getEBoolean(),"isStatic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4MethodDeclaration__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4FieldAccessorEClass,N4FieldAccessor.class,"N4FieldAccessor",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getN4FieldAccessor__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getN4FieldAccessor__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4GetterDeclarationEClass,N4GetterDeclaration.class,"N4GetterDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getN4GetterDeclaration__GetDefinedTypeElement(),theTypesPackage.getTMember(),"getDefinedTypeElement",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(n4SetterDeclarationEClass,N4SetterDeclaration.class,"N4SetterDeclaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getN4SetterDeclaration__GetDefinedTypeElement(),theTypesPackage.getTMember(),"getDefinedTypeElement",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(bindingPatternEClass,BindingPattern.class,"BindingPattern",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBindingPattern_Properties(),this.getBindingProperty(),null,"properties",null,0,-1,BindingPattern.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBindingPattern_Elements(),this.getBindingElement(),null,"elements",null,0,-1,BindingPattern.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(objectBindingPatternEClass,ObjectBindingPattern.class,"ObjectBindingPattern",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(arrayBindingPatternEClass,ArrayBindingPattern.class,"ArrayBindingPattern",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(bindingPropertyEClass,BindingProperty.class,"BindingProperty",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBindingProperty_Value(),this.getBindingElement(),null,"value",null,0,1,BindingProperty.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBindingProperty_VarDecl(),this.getVariableDeclaration(),null,"varDecl",null,0,1,BindingProperty.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getBindingProperty__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBindingProperty__IsValidName(),theEcorePackage.getEBoolean(),"isValidName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(bindingElementEClass,BindingElement.class,"BindingElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getBindingElement_Rest(),theEcorePackage.getEBoolean(),"rest",null,0,1,BindingElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBindingElement_VarDecl(),this.getVariableDeclaration(),null,"varDecl",null,0,1,BindingElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBindingElement_NestedPattern(),this.getBindingPattern(),null,"nestedPattern",null,0,1,BindingElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBindingElement_Expression(),this.getExpression(),null,"expression",null,0,1,BindingElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEEnum(variableStatementKeywordEEnum,VariableStatementKeyword.class,"VariableStatementKeyword");  addEEnumLiteral(variableStatementKeywordEEnum,VariableStatementKeyword.VAR);  addEEnumLiteral(variableStatementKeywordEEnum,VariableStatementKeyword.CONST);  addEEnumLiteral(variableStatementKeywordEEnum,VariableStatementKeyword.LET);  initEEnum(propertyNameKindEEnum,PropertyNameKind.class,"PropertyNameKind");  addEEnumLiteral(propertyNameKindEEnum,PropertyNameKind.IDENTIFIER);  addEEnumLiteral(propertyNameKindEEnum,PropertyNameKind.STRING);  addEEnumLiteral(propertyNameKindEEnum,PropertyNameKind.NUMBER);  addEEnumLiteral(propertyNameKindEEnum,PropertyNameKind.COMPUTED);  initEEnum(postfixOperatorEEnum,PostfixOperator.class,"PostfixOperator");  addEEnumLiteral(postfixOperatorEEnum,PostfixOperator.INC);  addEEnumLiteral(postfixOperatorEEnum,PostfixOperator.DEC);  initEEnum(unaryOperatorEEnum,UnaryOperator.class,"UnaryOperator");  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.DELETE);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.VOID);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.TYPEOF);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.INC);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.DEC);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.POS);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.NEG);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.INV);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.NOT);  initEEnum(multiplicativeOperatorEEnum,MultiplicativeOperator.class,"MultiplicativeOperator");  addEEnumLiteral(multiplicativeOperatorEEnum,MultiplicativeOperator.TIMES);  addEEnumLiteral(multiplicativeOperatorEEnum,MultiplicativeOperator.DIV);  addEEnumLiteral(multiplicativeOperatorEEnum,MultiplicativeOperator.MOD);  initEEnum(additiveOperatorEEnum,AdditiveOperator.class,"AdditiveOperator");  addEEnumLiteral(additiveOperatorEEnum,AdditiveOperator.ADD);  addEEnumLiteral(additiveOperatorEEnum,AdditiveOperator.SUB);  initEEnum(relationalOperatorEEnum,RelationalOperator.class,"RelationalOperator");  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.LT);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.GT);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.LTE);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.GTE);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.INSTANCEOF);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.IN);  initEEnum(equalityOperatorEEnum,EqualityOperator.class,"EqualityOperator");  addEEnumLiteral(equalityOperatorEEnum,EqualityOperator.SAME);  addEEnumLiteral(equalityOperatorEEnum,EqualityOperator.NSAME);  addEEnumLiteral(equalityOperatorEEnum,EqualityOperator.EQ);  addEEnumLiteral(equalityOperatorEEnum,EqualityOperator.NEQ);  initEEnum(binaryBitwiseOperatorEEnum,BinaryBitwiseOperator.class,"BinaryBitwiseOperator");  addEEnumLiteral(binaryBitwiseOperatorEEnum,BinaryBitwiseOperator.AND);  addEEnumLiteral(binaryBitwiseOperatorEEnum,BinaryBitwiseOperator.OR);  addEEnumLiteral(binaryBitwiseOperatorEEnum,BinaryBitwiseOperator.XOR);  initEEnum(binaryLogicalOperatorEEnum,BinaryLogicalOperator.class,"BinaryLogicalOperator");  addEEnumLiteral(binaryLogicalOperatorEEnum,BinaryLogicalOperator.AND);  addEEnumLiteral(binaryLogicalOperatorEEnum,BinaryLogicalOperator.OR);  initEEnum(shiftOperatorEEnum,ShiftOperator.class,"ShiftOperator");  addEEnumLiteral(shiftOperatorEEnum,ShiftOperator.SHL);  addEEnumLiteral(shiftOperatorEEnum,ShiftOperator.SHR);  addEEnumLiteral(shiftOperatorEEnum,ShiftOperator.USHR);  initEEnum(assignmentOperatorEEnum,AssignmentOperator.class,"AssignmentOperator");  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.MUL_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.DIV_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.MOD_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.ADD_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.SUB_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.SHL_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.SHR_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.USHR_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.AND_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.XOR_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.OR_ASSIGN);  initEEnum(n4ModifierEEnum,N4Modifier.class,"N4Modifier");  addEEnumLiteral(n4ModifierEEnum,N4Modifier.UNDEFINED);  addEEnumLiteral(n4ModifierEEnum,N4Modifier.EXTERNAL);  addEEnumLiteral(n4ModifierEEnum,N4Modifier.PRIVATE);  addEEnumLiteral(n4ModifierEEnum,N4Modifier.PROJECT);  addEEnumLiteral(n4ModifierEEnum,N4Modifier.PROTECTED);  addEEnumLiteral(n4ModifierEEnum,N4Modifier.PUBLIC);  addEEnumLiteral(n4ModifierEEnum,N4Modifier.ABSTRACT);  addEEnumLiteral(n4ModifierEEnum,N4Modifier.STATIC);  addEEnumLiteral(n4ModifierEEnum,N4Modifier.CONST);  initEDataType(iteratorOfStatementEDataType,Iterator.class,"IteratorOfStatement",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS,"java.util.Iterator<eu.numberfour.n4js.n4JS.Statement>");  initEDataType(iteratorOfReturnStatementEDataType,Iterator.class,"IteratorOfReturnStatement",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS,"java.util.Iterator<eu.numberfour.n4js.n4JS.ReturnStatement>");  createResource(eNS_URI);}  }
class C{  void indent(){  lmargin=lmargin + width;}  }
class C{  public static List<List<String>> parseProperty(String property,String propertyDelimiter,String propertyElementDelimiter){  List<List<String>> parsedProperty=new ArrayList<List<String>>();  if (property != null && !property.isEmpty()) {    StringTokenizer propertyEntries=new StringTokenizer(property,propertyDelimiter);    while (propertyEntries.hasMoreTokens()) {      String propertyEntry=propertyEntries.nextToken().trim();      if (propertyEntry != null && !propertyEntry.isEmpty()) {        List<String> propertyValueList=new ArrayList<String>();        StringTokenizer propertyValues=new StringTokenizer(propertyEntry,propertyElementDelimiter);        while (propertyValues.hasMoreTokens()) {          propertyValueList.add(propertyValues.nextToken().trim());        }        parsedProperty.add(propertyValueList);      }    }  }  return parsedProperty;}  }
class C{  protected void fireRemoveUpdate(DocumentEvent chng){  Element lineMap=getDefaultRootElement();  int numLines=lineMap.getElementCount();  DocumentEvent.ElementChange change=chng.getChange(lineMap);  Element[] removed=change == null ? null : change.getChildrenRemoved();  if (removed != null && removed.length > 0) {    int line=change.getIndex();    int previousLine=line - 1;    int previousTokenType=(previousLine > -1 ? lastTokensOnLines.get(previousLine) : Token.NULL);    Element[] added=change.getChildrenAdded();    int numAdded=added == null ? 0 : added.length;    int endBefore=line + removed.length - numAdded;    lastTokensOnLines.removeRange(line,endBefore);    updateLastTokensBelow(line,numLines,previousTokenType);  } else {    int line=lineMap.getElementIndex(chng.getOffset());    if (line >= lastTokensOnLines.getSize())     return;    int previousLine=line - 1;    int previousTokenType=(previousLine > -1 ? lastTokensOnLines.get(previousLine) : Token.NULL);    updateLastTokensBelow(line,numLines,previousTokenType);  }  super.fireRemoveUpdate(chng);}  }
class C{  public void connectServer(Connection connection){  threadContext.checkThread();  connection.handler(RegisterRequest.class,null);  connection.handler(ConnectRequest.class,null);  connection.handler(AcceptRequest.class,null);  connection.handler(KeepAliveRequest.class,null);  connection.handler(UnregisterRequest.class,null);  connection.handler(PublishRequest.class,null);  connection.handler(ConfigureRequest.class,null);  connection.handler(InstallRequest.class,null);  connection.handler(JoinRequest.class,null);  connection.handler(ReconfigureRequest.class,null);  connection.handler(LeaveRequest.class,null);  connection.handler(AppendRequest.class,null);  connection.handler(PollRequest.class,null);  connection.handler(VoteRequest.class,null);  connection.handler(CommandRequest.class,null);  connection.handler(QueryRequest.class,null);  connection.closeListener(null);}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  if (attribute != null)   request.setAttribute(attribute,this);  long startTime=System.currentTimeMillis();  chain.doFilter(request,response);  long stopTime=System.currentTimeMillis();  filterConfig.getServletContext().log(this.toString() + ": " + (stopTime - startTime)+ " milliseconds");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.200 -0500",hash_original_method="4C14C55105A23524352CD131708D205A",hash_generated_method="C2051A12288BDA05573D45CB4F842EE0") private void sendMessageInternal(Message msg){  if (mSynchronous) {    mMessageQueue.add(msg);  } else {    sendMessage(msg);  }}  }
class C{  public UTF8StreamWriter(int capacity){  _bytes=new byte[capacity];}  }
class C{  protected void process(){  double[] clusterAssignments;  int i;  double[] values;  int j;  int[] classAssignments;  clusterAssignments=m_Evaluation.getClusterAssignments();  classAssignments=null;  if (m_Instances.classIndex() >= 0) {    classAssignments=m_Evaluation.getClassesToClusters();    m_PlotShapes=new int[m_Instances.numInstances()];    for (i=0; i < m_Instances.numInstances(); i++) {      m_PlotShapes[i]=Plot2D.CONST_AUTOMATIC_SHAPE;    }  }  for (i=0; i < m_Instances.numInstances(); i++) {    values=new double[m_PlotInstances.numAttributes()];    for (j=0; j < m_Instances.numAttributes(); j++) {      values[j]=m_Instances.instance(i).value(j);    }    if (clusterAssignments[i] < 0) {      values[j]=Utils.missingValue();    } else {      values[j]=clusterAssignments[i];    }    m_PlotInstances.add(new DenseInstance(1.0,values));    if (m_PlotShapes != null) {      if (clusterAssignments[i] >= 0) {        if ((int)m_Instances.instance(i).classValue() != classAssignments[(int)clusterAssignments[i]]) {          m_PlotShapes[i]=Plot2D.ERROR_SHAPE;        }      } else {        m_PlotShapes[i]=Plot2D.MISSING_SHAPE;      }    }  }}  }
class C{  public boolean isComplete(){  Object oo=get_Value(COLUMNNAME_IsComplete);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public MailItemEntry(){  super();  getCategories().add(MAILITEM_CATEGORY);}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  public static SourceLineAnnotation fromVisitedInstruction(JavaClass jclass,Method method,int pc){  LineNumberTable lineNumberTable=method.getCode().getLineNumberTable();  String className=jclass.getClassName();  String sourceFile=jclass.getSourceFileName();  if (lineNumberTable == null) {    return createUnknown(className,sourceFile,pc,pc);  }  int startLine=lineNumberTable.getSourceLine(pc);  return new SourceLineAnnotation(className,sourceFile,startLine,startLine,pc,pc);}  }
class C{  static public void assertBefore(final UUID serviceId1,final UUID serviceId2,final long t1,final long t2,final long maxSkew) throws ClocksNotSynchronizedException {  if (t1 < t2) {    return;  }  final long delta=Math.abs(t1 - t2);  if (delta <= maxSkew)   return;  throw new ClocksNotSynchronizedException("service1=" + serviceId1 + ", serviceId2="+ serviceId2+ ", skew="+ delta+ "ms exceeds maximumSkew="+ maxSkew+ "ms.");}  }
class C{  public static boolean hasEmbeddedIPv4ClientAddress(Inet6Address ip){  return isCompatIPv4Address(ip) || is6to4Address(ip) || isTeredoAddress(ip);}  }
class C{  public Matrix compute(Matrix loghyper,Matrix X){  if (X.getColumnDimension() != D)   throw new IllegalArgumentException("The number of dimensions specified on the covariance function " + D + " must agree with the size of the input vector"+ X.getColumnDimension());  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters)   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters);  final Matrix ell=exp(loghyper.getMatrix(0,D - 1,0,0));  final double sf2=Math.exp(2 * loghyper.get(D,0));  Matrix diag=new Matrix(D,D);  for (int i=0; i < D; i++)   diag.set(i,i,1 / ell.get(i,0));  K=exp(squareDist(diag.times(X.transpose())).times(-0.5)).times(sf2);  return K;}  }
class C{  public long readLong(int len) throws IOException {  int i;  long x=0;  if (len < 0 || len > 64)   throw new IllegalArgumentException("You cannot read " + len + " bits into a long.");  if (fill < 16)   refill();  if (len <= fill)   return readFromCurrent(len);  len-=fill;  x=readFromCurrent(fill);  i=len >> 3;  while (i-- != 0)   x=x << 8 | read();  readBits+=len & ~7;  len&=7;  return (x << len) | readFromCurrent(len);}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.523 -0500",hash_original_method="300503D60C48D249178D35D7CDB92339",hash_generated_method="FC9E29D42D611ABE43D557232408FD20") public Intent putExtras(Bundle extras){  mExtras.putAll(extras.mMap);  return this;}  }
class C{  public UnexpectedException(String s){  super(s);}  }
class C{  private SearchResultDTO findPrincipals(MemberType principalType,PrincipalId id,String tenant,SearchCriteria searchCriteria,int limit) throws Exception {  SearchResultDTO.Builder builder=SearchResultDTO.builder();  Map<MemberType,Integer> searchLimits=computeSearchLimits(limit,principalType);  if (principalType == MemberType.USER || principalType == MemberType.ALL) {    Set<PersonUser> idmPersonUsers=getIDMClient().findPersonUsersInGroup(tenant,id,searchCriteria.getSearchString(),searchLimits.get(MemberType.USER));    builder.withUsers(UserMapper.getUserDTOs(idmPersonUsers,false));  }  if (principalType == MemberType.GROUP || principalType == MemberType.ALL) {    Set<Group> idmGroups=getIDMClient().findGroupsInGroup(tenant,id,searchCriteria.getSearchString(),searchLimits.get(MemberType.GROUP));    builder.withGroups(GroupMapper.getGroupDTOs(idmGroups));  }  if (principalType == MemberType.SOLUTIONUSER || principalType == MemberType.ALL) {    Set<SolutionUser> idmSolutionUsers=getIDMClient().findSolutionUsersInGroup(tenant,id.getName(),searchCriteria.getSearchString(),searchLimits.get(MemberType.SOLUTIONUSER));    builder.withSolutionUsers(SolutionUserMapper.getSolutionUserDTOs(idmSolutionUsers));  }  return builder.build();}  }
class C{  private void performDrag(MotionEvent event){  mMatrix.set(mSavedMatrix);  OnChartGestureListener l=mChart.getOnChartGestureListener();  float dX, dY;  if (mChart.isAnyAxisInverted() && mClosestDataSetToTouch != null && mChart.getAxis(mClosestDataSetToTouch.getAxisDependency()).isInverted()) {    if (mChart instanceof HorizontalBarChart) {      dX=-(event.getX() - mTouchStartPoint.x);      dY=event.getY() - mTouchStartPoint.y;    } else {      dX=event.getX() - mTouchStartPoint.x;      dY=-(event.getY() - mTouchStartPoint.y);    }  } else {    dX=event.getX() - mTouchStartPoint.x;    dY=event.getY() - mTouchStartPoint.y;  }  mMatrix.postTranslate(dX,dY);  if (l != null)   l.onChartTranslate(event,dX,dY);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.323 -0500",hash_original_method="1378C07218E9226BC9F7AD403D7C2636",hash_generated_method="AF102C8B9D9B8D59C4558BD3737378FF") public Enumeration<K> keys(){  return new KeyIterator();}  }
class C{  public Cast createCast(){  CastImpl cast=new CastImpl();  return cast;}  }
class C{  public void clear(){  setLength(0);}  }
class C{  @CheckReturnValue public <T>Subject2<A,T> asWithPrecursor(Function<A,T> mapping){  return asWithPrecursor(mapping,null);}  }
class C{  public boolean hasControl(){  return hasElement(Control.KEY);}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  public ShardId shardId(){  if (shardIdentifier != null) {    return shardIdentifier;  }  shardIdentifier=new ShardId(index,shardId);  return shardIdentifier;}  }
class C{  public static void sort(Object[] array,int start,int end){  ComparableTimSort.sort(array,start,end);}  }
class C{  private CFunctionHelpers(){}  }
class C{  public static boolean isXML11ValidName(String name){  int length=name.length();  if (length == 0)   return false;  int i=1;  char ch=name.charAt(0);  if (!isXML11NameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=name.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=name.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=name.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  @RequestProcessing(value="/activity/1A0001",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void show1A0001(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/activity/1A0001.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final JSONObject currentUser=(JSONObject)request.getAttribute(User.USER);  final String userId=currentUser.optString(Keys.OBJECT_ID);  final boolean closed=Symphonys.getBoolean("activity1A0001Closed");  dataModel.put(Common.CLOSED,closed);  final Calendar calendar=Calendar.getInstance();  final int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);  final boolean closed1A0001=dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY;  dataModel.put(Common.CLOSED_1A0001,closed1A0001);  final int hour=calendar.get(Calendar.HOUR_OF_DAY);  final int minute=calendar.get(Calendar.MINUTE);  final boolean end=hour > 14 || (hour == 14 && minute > 55);  dataModel.put(Common.END,end);  final boolean collected=activityQueryService.isCollected1A0001Today(userId);  dataModel.put(Common.COLLECTED,collected);  final boolean participated=activityQueryService.is1A0001Today(userId);  dataModel.put(Common.PARTICIPATED,participated);  while (true) {    if (closed) {      dataModel.put(Keys.MSG,langPropsService.get("activityClosedLabel"));      break;    }    if (closed1A0001) {      dataModel.put(Keys.MSG,langPropsService.get("activity1A0001CloseLabel"));      break;    }    if (collected) {      dataModel.put(Keys.MSG,langPropsService.get("activityParticipatedLabel"));      break;    }    if (participated) {      dataModel.put(Common.HOUR,hour);      final List<JSONObject> records=pointtransferQueryService.getLatestPointtransfers(userId,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_1A0001,1);      final JSONObject pointtransfer=records.get(0);      final String data=pointtransfer.optString(Pointtransfer.DATA_ID);      final String smallOrLarge=data.split("-")[1];      final int sum=pointtransfer.optInt(Pointtransfer.SUM);      String msg=langPropsService.get("activity1A0001BetedLabel");      final String small=langPropsService.get("activity1A0001BetSmallLabel");      final String large=langPropsService.get("activity1A0001BetLargeLabel");      msg=msg.replace("{smallOrLarge}",StringUtils.equals(smallOrLarge,"0") ? small : large);      msg=msg.replace("{point}",String.valueOf(sum));      dataModel.put(Keys.MSG,msg);      break;    }    if (end) {      dataModel.put(Keys.MSG,langPropsService.get("activityEndLabel"));      break;    }    break;  }  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public void updateRaster(float lt,float ln,Image image,int image_width,int image_height,LinkProperties properties,int graphicUpdateMask) throws IOException, InterruptedException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,image,image_width,image_height,properties,link.dos);}  }
class C{  public Spring createSpring(){  Spring spring=new Spring(this);  registerSpring(spring);  return spring;}  }
class C{  JMenu createViewMenu(){  JMenu viewMenu=new JMenu("View");  JMenu toolbarMenu=new JMenu("Toolbars");  toolbarMenu.add(actionManager.getShowMainToolBarMenuItem());  toolbarMenu.add(actionManager.getShowRunToolBarMenuItem());  toolbarMenu.add(actionManager.getShowEditToolBarMenuItem());  viewMenu.add(toolbarMenu);  viewMenu.addSeparator();  viewMenu.add(actionManager.getShowPrioritiesAction());  viewMenu.add(actionManager.getShowWeightsAction());  return viewMenu;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Path removeFileExtension(){  String extension=getFileExtension();  if (extension == null || extension.equals("")) {    return this;  }  String lastSegment=lastSegment();  int index=lastSegment.lastIndexOf(extension) - 1;  return removeLastSegments(1).append(lastSegment.substring(0,index));}  }
class C{  public boolean shouldUpdate(){  return isValid && availableVersion.greaterThan(currentVersion);}  }
class C{  public List<String> resolveGroups(final List<String> groupSids){  List<String> resolvedGroups=new ArrayList<String>();  List<List<String>> partitionedGroupSids=Lists.partition(groupSids,_maxPageSize);  _log.debug("User is in {} number of token groups",groupSids.size());  if (partitionedGroupSids.size() > 1) {    _log.info("Partitioning group query into {} lists since max results is {}",partitionedGroupSids.size(),_maxPageSize);  }  for (  List<String> groupSidPartition : partitionedGroupSids) {    SearchControls groupSearchControls=new SearchControls(SearchControls.SUBTREE_SCOPE,_maxPageSize,_searchControls.getTimeLimit(),null,_searchControls.getReturningObjFlag(),_searchControls.getDerefLinkFlag());    final String groupSidLdapQuery=getGroupSidQueryFilter(OBJECT_SID,groupSidPartition);    if (groupSidLdapQuery == null) {      _log.error("Group sid query filter was null when trying to resolve groups");      return resolvedGroups;    }    @SuppressWarnings("unchecked") final List<List<GroupAttribute>> resolvedGroupAttributeList=safeLdapSearch(_baseDN,groupSidLdapQuery,groupSearchControls,new GroupsMapper(_groupWhiteList.getType()));    if (null == resolvedGroupAttributeList) {      _log.error("Query to resolve groups returned no results");      return resolvedGroups;    }    for (    List<GroupAttribute> resolvedGroupAttribute : resolvedGroupAttributeList) {      if (!resolvedGroupAttribute.isEmpty()) {        resolvedGroups.add(resolvedGroupAttribute.get(0).getGroupNameWithDomain());      }    }  }  return resolvedGroups;}  }
class C{  public static synchronized void init(Context context){  instance=new DiscoveryManager(context);}  }
class C{  public static void registerLog4jMBeans() throws JMException {  final HierarchyDynamicMBean hdm=new HierarchyDynamicMBean();{    final MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();    final ObjectName mbo=new ObjectName("log4j:hierarchy=default");    mbs.registerMBean(hdm,mbo);  }{    final Logger rootLogger=Logger.getRootLogger();    hdm.addLoggerMBean(rootLogger.getName());  }{    final LoggerRepository r=LogManager.getLoggerRepository();    final Enumeration enumer=r.getCurrentLoggers();    while (enumer.hasMoreElements()) {      final Logger logger=(Logger)enumer.nextElement();      hdm.addLoggerMBean(logger.getName());    }  }}  }
class C{  public static PrintServiceAttributeSet unmodifiableView(PrintServiceAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiablePrintServiceAttributeSet(attributeSet);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.121 -0500",hash_original_method="04CF7BEB7F762D6DB023733A3E9A3C83",hash_generated_method="E38AB502E23B20B2B1798D00F04FB994") private void readAttributeListDeclaration() throws IOException, XmlPullParserException {  read(START_ATTLIST);  skip();  String elementName=readName();  while (true) {    skip();    int c=peekCharacter();    if (c == '>') {      position++;      return;    }    String attributeName=readName();    skip();    if (position + 1 >= limit && !fillBuffer(2)) {      throw new XmlPullParserException("Malformed attribute list",this,null);    }    if (buffer[position] == NOTATION[0] && buffer[position + 1] == NOTATION[1]) {      read(NOTATION);      skip();    }    c=peekCharacter();    if (c == '(') {      position++;      while (true) {        skip();        readName();        skip();        c=peekCharacter();        if (c == ')') {          position++;          break;        } else         if (c == '|') {          position++;        } else {          throw new XmlPullParserException("Malformed attribute type",this,null);        }      }    } else {      readName();    }    skip();    c=peekCharacter();    if (c == '#') {      position++;      c=peekCharacter();      if (c == 'R') {        read(REQUIRED);      } else       if (c == 'I') {        read(IMPLIED);      } else       if (c == 'F') {        read(FIXED);      } else {        throw new XmlPullParserException("Malformed attribute type",this,null);      }      skip();      c=peekCharacter();    }    if (c == '"' || c == '\'') {      position++;      String value=readValue((char)c,true,true,ValueContext.ATTRIBUTE);      position++;      defineAttributeDefault(elementName,attributeName,value);    }  }}  }
class C{  public String sanitize(@Nullable String html){  return sanitize(html,null,null);}  }
class C{  public boolean containsCategory(String category){  return !hiddenBugCategorySet.contains(category);}  }
class C{  private Sprite createTextBox(final String text,final NotificationType type,final boolean isTalking){  if (type == NotificationType.TUTORIAL) {    BackgroundPainter painter=new BackgroundPainter(TUTORIAL_BACKGROUND,TUTORIAL_LEFT_TILE_WIDTH,TUTORIAL_CENTER_TILE_WIDTH,TUTORIAL_TOP_TILE_HEIGHT,TUTORIAL_CENTER_TILE_HEIGHT);    return getTextFactory().createFancyTextBox(text,type.getColor(),BUBBLE_TEXT_WIDTH,45,6,6,6,painter);  }  return getTextFactory().createTextBox(text,BUBBLE_TEXT_WIDTH,type.getColor(),Color.white,isTalking);}  }
class C{  @SuppressWarnings("deprecation") public static void logUrl(IDiagnosticsLogger log,StringBuffer sbRequestUrl,SignableSAMLObject samlObject,String relayStateParameter,String signatureAlgorithm,String signature,String extra) throws MarshallingException, IOException {  String samlParameterName=Shared.SAML_REQUEST_PARAMETER;  if (samlObject instanceof LogoutResponse) {    samlParameterName=Shared.SAML_RESPONSE_PARAMETER;  }  log.debug("We are going to GET URL " + sbRequestUrl.toString() + (samlObject != null ? "?" + samlParameterName + "="+ URLEncoder.encode(SharedUtils.encodeRequest(samlObject)) : "")+ (relayStateParameter != null ? ("&RelayState=" + URLEncoder.encode(relayStateParameter)) : "")+ (signatureAlgorithm != null ? ("&SigAlg=" + URLEncoder.encode(signatureAlgorithm)) : "")+ (signature != null ? ("&Signature=" + URLEncoder.encode(signature)) : "")+ (extra != null ? "&" + extra : ""));}  }
class C{  final protected Map<String,Object> annotationsCopy(){  return new LinkedHashMap<String,Object>(annotations);}  }
class C{  public void initInBuffer(Object obj){  collector().initInBuffer(getRuleName(),obj);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforerefchildnull.class,args);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  try {    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  public int offset(){  return offset;}  }
class C{  public void closeFile() throws IOException {  file.close();  file=null;}  }
class C{  public final static float distance(float x1,float y1,float x2,float y2){  double xdiff=x2 - x1;  double ydiff=y2 - y1;  return (float)Math.sqrt((xdiff * xdiff + ydiff * ydiff));}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void removeAttackListener(AttackListener l){  listeners.remove(l);}  }
class C{  @Override public V remove(Object key){  Object k=maskNull(key);  int h=hasher(k);  Entry<K,V>[] tab=getTable();  int i=indexFor(h,tab.length);  Entry<K,V> prev=tab[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (h == e.hash && eq(k,e.get())) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return e.value;    }    prev=e;    e=next;  }  return null;}  }
class C{  public double doubleValue(){  return 0.0d;}  }
class C{  private void find95(){  String s="winipcfg.out";  try {    Process p;    p=Runtime.getRuntime().exec("winipcfg /all /batch " + s);    p.waitFor();    File f=new File(s);    findWin(new FileInputStream(f));    new File(s).delete();  } catch (  Exception e) {    return;  }}  }
class C{  public static Long nextLogSegmentSequenceNumber(List<LogSegmentMetadata> segmentListDesc){  int lastAssignedLogSegmentIdx=-1;  Long lastAssignedLogSegmentSeqNo=null;  Long nextLogSegmentSeqNo=null;  for (int i=0; i < segmentListDesc.size(); i++) {    LogSegmentMetadata metadata=segmentListDesc.get(i);    if (LogSegmentMetadata.supportsLogSegmentSequenceNo(metadata.getVersion())) {      lastAssignedLogSegmentSeqNo=metadata.getLogSegmentSequenceNumber();      lastAssignedLogSegmentIdx=i;      break;    }  }  if (null != lastAssignedLogSegmentSeqNo) {    nextLogSegmentSeqNo=lastAssignedLogSegmentSeqNo + lastAssignedLogSegmentIdx + 1;  }  return nextLogSegmentSeqNo;}  }
class C{  public void testNoExtras() throws Exception {  Path dir=wrap(createTempDir(),false,false);  Files.createDirectory(dir.resolve("foobar"));  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir.resolve("foobar"))){    for (    Path path : stream) {      fail("should not have found file: " + path);    }  } }  }
class C{  @Override public String toStringValue(){  return "null";}  }
class C{  public static org.oscm.internal.types.exception.PSPProcessingException convertToUp(PSPProcessingException e){  return convertExceptionToUp(e,org.oscm.internal.types.exception.PSPProcessingException.class);}  }
class C{  @Override public SampledVertexDecorator<V> createVertex(V delegate){  return new SampledVertexDecorator<V>(delegate);}  }
class C{  public synchronized void snapshot(Object value) throws IOException {  int oldVersion=version;  incrVersion();  String fname=versionName(snapshotPrefix);  File snapshotFile=new File(fname);  FileOutputStream out=new FileOutputStream(snapshotFile);  try {    try {      handler.snapshot(out,value);    } catch (    IOException e) {      throw e;    }catch (    Exception e) {      throw new IOException("snapshot failed",e);    }    lastSnapshot=System.currentTimeMillis();  }  finally {    out.close();    snapshotBytes=snapshotFile.length();  }  openLogFile(true);  writeVersionFile(true);  commitToNewVersion();  deleteSnapshot(oldVersion);  deleteLogFile(oldVersion);}  }
class C{  public boolean isSupportBLE(){  return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE);}  }
class C{  public final String[] split(CharSequence input,int limit){  return this.pattern.split(input,limit);}  }
class C{  private byte[] dataKey(long offset){  return subspace.pack(Tuple2.from(DATA_KEY,String.format("%16d",offset)));}  }
class C{  public XMLString concat(String str){  return new XMLStringDefault(m_str.concat(str));}  }
class C{  static Object valueConversion(Class<?> src,Class<?> dst,boolean strict,boolean monobox){  assert (!VerifyType.isNullConversion(src,dst,strict));  if (dst == void.class)   return dst;  MethodHandle fn;  if (src.isPrimitive()) {    if (src == void.class) {      return void.class;    } else     if (dst.isPrimitive()) {      fn=ValueConversions.convertPrimitive(src,dst);    } else {      Wrapper wsrc=Wrapper.forPrimitiveType(src);      fn=ValueConversions.boxExact(wsrc);      assert (fn.type().parameterType(0) == wsrc.primitiveType());      assert (fn.type().returnType() == wsrc.wrapperType());      if (!VerifyType.isNullConversion(wsrc.wrapperType(),dst,strict)) {        MethodType mt=MethodType.methodType(dst,src);        if (strict)         fn=fn.asType(mt); else         fn=MethodHandleImpl.makePairwiseConvert(fn,mt,false);      }    }  } else   if (dst.isPrimitive()) {    Wrapper wdst=Wrapper.forPrimitiveType(dst);    if (monobox || src == wdst.wrapperType()) {      fn=ValueConversions.unboxExact(wdst,strict);    } else {      fn=(strict ? ValueConversions.unboxWiden(wdst) : ValueConversions.unboxCast(wdst));    }  } else {    return dst;  }  assert (fn.type().parameterCount() <= 1) : "pc" + Arrays.asList(src.getSimpleName(),dst.getSimpleName(),fn);  return fn;}  }
class C{  public void actionPerformed(final ActionEvent e){  final ActionMap map=tabPane.getActionMap();  if (map != null) {    String actionKey;    if (e.getSource() == scrollForwardButton) {      actionKey="scrollTabsForwardAction";    } else {      actionKey="scrollTabsBackwardAction";    }    final Action action=map.get(actionKey);    if (action != null && action.isEnabled()) {      action.actionPerformed(new ActionEvent(tabPane,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));    }  }}  }
class C{  public StaticRenderer(){  renderingHints=new RenderingHints(null);  renderingHints.add(defaultRenderingHints);  usr2dev=new AffineTransform();}  }
class C{  private void bindPreferenceSummaryToValue(int keyId,int resId){  Preference preference=findPreference(getString(keyId));  preference.setOnPreferenceChangeListener(sListener);  sListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(getString(keyId),getString(resId)));}  }
class C{  void clearSelection(){  ContentViewCore baseContentView=getBaseContentView();  if (baseContentView != null) {    baseContentView.clearSelection();  }  resetAllStates();}  }
class C{  public AccountHeaderBuilder withSelectionSecondLine(String selectionSecondLine){  this.mSelectionSecondLine=selectionSecondLine;  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void cleanup(){  if (document != null) {    cleanElementUI(document);  }  if (eventsListener != null) {    eventsListener.deregisterAll();  }  displayWidth=Display.getInstance().getDisplayWidth();  leftIndent=0;  x=0;  containers=new Vector();  marqueeComponents=new Vector();  marqueeMotion=null;  anchors=new Hashtable();  anchor=null;  accesskey='\0';  for (Enumeration e=accessKeys.keys(); e.hasMoreElements(); ) {    int keyCode=((Integer)e.nextElement()).intValue();    getComponentForm().removeKeyListener(keyCode,this);  }  accessKeys.clear();  fieldsets=new Vector();  curTable=null;  tables=new Vector();  tableCells=new Vector();  ulLevel=0;  olIndex=Integer.MIN_VALUE;  olUpperLevelIndex=new Vector();  listType=HTMLListIndex.LIST_NUMERIC;  underlineCount=0;  strikethruCount=0;  textDecoration=0;  imageMapComponents=null;  imageMapData=null;  curImageMap=null;  superscript=0;  maxSuperscript=0;  counters=null;  font=defaultFont;  labelForID=null;  inputFields=new Hashtable();  link=null;  linkVisited=false;  mainLink=null;  firstFocusable=null;  curForm=null;  curTextArea=null;  curComboBox=null;  textfieldsToForms=new Hashtable();  optionTag=false;  optionSelected=false;  preTagCount=0;  quoteTagCount=0;  mainContainer=new Container();  if (pageUIID != null) {    mainContainer.setUIID(pageUIID);  }  if (pageStyle != null) {    applyPageStyle();  }  mainContainer.setScrollableX(false);  mainContainer.setLayout(new BoxLayout(BoxLayout.Y_AXIS));  curContainer=mainContainer;  curLine=new Container();  lastWasEmpty=false;  width=Display.getInstance().getDisplayWidth() - getStyle().getMargin(Component.LEFT) - getStyle().getPadding(Component.LEFT)- getStyle().getMargin(Component.RIGHT)- getStyle().getPadding(Component.RIGHT)- 10;  textColor=DEFAULT_TEXT_COLOR;}  }
class C{  private Job<T> grabJob(){  while (!queue.isEmpty()) {    if (!limit.tryAcquire()) {      return null;    }    final Job<T> job=queue.poll();    if (job != null) {      return job;    }    limit.release();  }  return null;}  }
class C{  private synchronized void pauseTrackDataHub(){  trackDataHub.unregisterTrackDataListener(this);  trackDataHub=null;}  }
class C{  private void loadPinCodeActivity(){  Intent intent=new Intent(AlreadyRegisteredActivity.this,PinCodeActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());  startActivity(intent);}  }
class C{  public final boolean resolveBoxing(){  return this.ast.getBindingResolver().resolveBoxing(this);}  }
class C{  private void updateColumnWidth(final DynamicColumnData dynamicColumnData,final Double width){  final TableColumn tableColumn=dynamicColumnData.getTableColumn();  final TreeColumn treeColumn=dynamicColumnData.getTreeColumn();  if (tableColumn != null) {    tableColumn.setWidth(width.intValue());  } else   if (treeColumn != null) {    treeColumn.setWidth(width.intValue());  } else {    throw new IllegalStateException("No valid to set the column width!");  }}  }
class C{  public static Rectangle2D convertFilterChainRegion(Element filterElement,Element filteredElement,GraphicsNode filteredNode,BridgeContext ctx){  String xStr=getChainableAttributeNS(filterElement,null,SVG_X_ATTRIBUTE,ctx);  if (xStr.length() == 0) {    xStr=SVG_FILTER_X_DEFAULT_VALUE;  }  String yStr=getChainableAttributeNS(filterElement,null,SVG_Y_ATTRIBUTE,ctx);  if (yStr.length() == 0) {    yStr=SVG_FILTER_Y_DEFAULT_VALUE;  }  String wStr=getChainableAttributeNS(filterElement,null,SVG_WIDTH_ATTRIBUTE,ctx);  if (wStr.length() == 0) {    wStr=SVG_FILTER_WIDTH_DEFAULT_VALUE;  }  String hStr=getChainableAttributeNS(filterElement,null,SVG_HEIGHT_ATTRIBUTE,ctx);  if (hStr.length() == 0) {    hStr=SVG_FILTER_HEIGHT_DEFAULT_VALUE;  }  short unitsType;  String units=getChainableAttributeNS(filterElement,null,SVG_FILTER_UNITS_ATTRIBUTE,ctx);  if (units.length() == 0) {    unitsType=OBJECT_BOUNDING_BOX;  } else {    unitsType=parseCoordinateSystem(filterElement,SVG_FILTER_UNITS_ATTRIBUTE,units,ctx);  }  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,filteredElement);  Rectangle2D region=convertRegion(xStr,yStr,wStr,hStr,unitsType,filteredNode,uctx);  units=getChainableAttributeNS(filterElement,null,SVG12Constants.SVG_FILTER_MARGINS_UNITS_ATTRIBUTE,ctx);  if (units.length() == 0) {    unitsType=USER_SPACE_ON_USE;  } else {    unitsType=parseCoordinateSystem(filterElement,SVG12Constants.SVG_FILTER_MARGINS_UNITS_ATTRIBUTE,units,ctx);  }  String dxStr=filterElement.getAttributeNS(null,SVG12Constants.SVG_MX_ATRIBUTE);  if (dxStr.length() == 0) {    dxStr=SVG12Constants.SVG_FILTER_MX_DEFAULT_VALUE;  }  String dyStr=filterElement.getAttributeNS(null,SVG12Constants.SVG_MY_ATRIBUTE);  if (dyStr.length() == 0) {    dyStr=SVG12Constants.SVG_FILTER_MY_DEFAULT_VALUE;  }  String dwStr=filterElement.getAttributeNS(null,SVG12Constants.SVG_MW_ATRIBUTE);  if (dwStr.length() == 0) {    dwStr=SVG12Constants.SVG_FILTER_MW_DEFAULT_VALUE;  }  String dhStr=filterElement.getAttributeNS(null,SVG12Constants.SVG_MH_ATRIBUTE);  if (dhStr.length() == 0) {    dhStr=SVG12Constants.SVG_FILTER_MH_DEFAULT_VALUE;  }  return extendRegion(dxStr,dyStr,dwStr,dhStr,unitsType,filteredNode,region,uctx);}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  static void checkSerialClassName(Serializable obj,String expected){  String cn=serialClassName(obj);  if (!cn.equals(expected))   throw new RuntimeException(obj.getClass() + " serialized as " + cn+ ", expected "+ expected);}  }
class C{  public int indexOfAnyOf(final CharSet s,final int from){  final int n=s.size();  if (n == 0)   return -1;  if (n == 1)   return indexOf(s.iterator().nextChar(),from);  final char[] a=array;  final int length=length();  int i=(from < 0 ? 0 : from) - 1;  while (++i < length)   if (s.contains(a[i]))   return i;  return -1;}  }
class C{  SolrInputField f(String name,Object... values){  return field(name,1.0F,values);}  }
class C{  public boolean nextBoolean(double probability){  if (probability < 0.0 || probability > 1.0)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0)   return false; else   if (probability == 1.0)   return true;  return nextDouble() < probability;}  }
class C{  public MimSearchEditor(MimBuildRunner runner){  this(runner,"Result MAG");}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  int renderType=OMGraphic.RENDERTYPE_UNKNOWN;  if (ga != null) {    renderType=ga.getRenderType();  }  if (Debug.debugging("eomg")) {    Debug.output("EditableOMPoint.createGraphic(): rendertype = " + renderType);  }switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    point=new OMPoint(90f,-180f);  break;case (OMGraphic.RENDERTYPE_OFFSET):point=new OMPoint(90f,-180f,0,0);break;default :point=new OMPoint(-1,-1);}if (ga != null) {ga.setTo(point);}assertGrabPoints();}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static Properties readProperties(InputStream in) throws IOException {  return readProperties(in,null);}  }
class C{  public boolean first() throws GenericEntityException {  try {    return resultSet.first();  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the cursor to first",e);  }}  }
class C{  public static void main(String[] args){  int idx=0;  boolean allowMissingModules=false;  String overrides=null;  String runClassOrMethod=null;  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (!arg.startsWith("-"))     break;    if (arg.equals("--allow-missing-modules")) {      allowMissingModules=true;    } else     if (arg.equals("--overrides") || arg.equals("--maven-overrides")) {      if (i + 1 >= args.length) {        usage();      }      overrides=args[++i];      idx++;    } else     if (arg.equals("--run")) {      if (i + 1 >= args.length) {        usage();      }      runClassOrMethod=args[++i];      idx++;    } else     usage();    idx++;  }  if (args.length < (1 + idx)) {    usage();  }  ModuleSpec moduleSpec=ModuleSpec.parse(args[idx],Option.VERSION_REQUIRED);  String version;  if (moduleSpec.getName().equals(com.redhat.ceylon.model.typechecker.model.Module.DEFAULT_MODULE_NAME))   version=null; else   version=moduleSpec.getVersion();  String[] moduleArgs=Arrays.copyOfRange(args,1 + idx,args.length);  Main.instance().allowMissingModules(allowMissingModules).overrides(overrides).run(moduleSpec.getName(),version,runSpecToJavaClass(moduleSpec.getName(),runClassOrMethod),moduleArgs);}  }
class C{  public synchronized boolean hasOrInheritsRelationship(Vertex type,Vertex target,Map<Vertex,Vertex> recursion){  Relationship relationship=getRelationship(type,target);  if (relationship == null) {    if (target.isVariable()) {      Collection<Relationship> relationships=getRelationships(type);      if (relationships != null) {        if (recursion == null) {          recursion=new HashMap<Vertex,Vertex>();        }        boolean inverse=true;        for (        Relationship each : relationships) {          if (target.matches(each.getTarget(),recursion) == Boolean.TRUE) {            if (!each.isInverse()) {              return true;            } else {              inverse=true;            }          }        }        if (inverse) {          return false;        }      }    }    Collection<Relationship> classifications=null;    if (instanceOf(Primitive.CLASSIFICATION)) {      classifications=getRelationships(Primitive.SPECIALIZATION);    } else {      classifications=getRelationships(Primitive.INSTANTIATION);    }    if (classifications != null) {      if (type.isPrimitive() && type.getData().equals(Primitive.INSTANTIATION)) {        type=this.network.createVertex(Primitive.SPECIALIZATION);      }      for (      Relationship classification : classifications) {        if (recursion == null) {          recursion=new HashMap<Vertex,Vertex>();        }        recursion.put(this,this);        if (!recursion.containsKey(classification.getTarget()) && classification.getTarget().hasOrInheritsRelationship(type,target,recursion)) {          return true;        }      }    }  }  return (relationship != null) && (!relationship.isInverse());}  }
class C{  public static String bytesToString(int[] b){  if (b.length < 4) {    return "0.0.0.0";  }  return String.format("%d.%d.%d.%d",b[0],b[1],b[2],b[3]);}  }
class C{  public LongArrayList(int initialCapacity){  this(new long[initialCapacity]);  setSizeRaw(0);}  }
class C{  public void removeFromTemplateContext(String name){  if (templateContext != null)   templateContext.remove(name);}  }
class C{  private int hashCode(double key){  long bits=Double.doubleToLongBits(key);  return (int)(bits ^ (bits >> 32));}  }
class C{  public void update(final List<ScanResult> results){  for (  final ScanResult result : results) {    final ExtendedBluetoothDevice device=findDevice(result);    if (device == null) {      mDevices.add(new ExtendedBluetoothDevice(result));    } else {      device.name=result.getScanRecord() != null ? result.getScanRecord().getDeviceName() : null;      device.rssi=result.getRssi();    }  }  notifyDataSetChanged();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Set<String> keySet(){  return mValues.keySet();}  }
class C{  protected void storeState(){  storedRateFactor=rateFactor;}  }
class C{  public NamingEnumeration<javax.naming.Binding> listBindings(Name name) throws NamingException {  if (_nc == null)   throw new ConfigurationException("Context does not have a corresponding NamingContext");  if (name.size() > 0) {    try {      java.lang.Object obj=lookup(name);      if (obj instanceof CNCtx) {        return new CNBindingEnumeration((CNCtx)obj,true,_env);      } else {        throw new NotContextException(name.toString());      }    } catch (    NamingException ne) {      throw ne;    }catch (    BAD_PARAM e) {      NamingException ne=new NotContextException(name.toString());      ne.setRootCause(e);      throw ne;    }  }  return new CNBindingEnumeration(this,false,_env);}  }
class C{  private final void shiftKeys(int pos){  int last, slot;  long curr;  final long[] key=Long2LongOpenHashMap.this.key;  for (; ; ) {    pos=((last=pos) + 1) & mask;    for (; ; ) {      if (((curr=key[pos]) == (0))) {        key[last]=(0);        return;      }      slot=(int)it.unimi.dsi.fastutil.HashCommon.mix((curr)) & mask;      if (last <= pos ? last >= slot || slot > pos : last >= slot && slot > pos)       break;      pos=(pos + 1) & mask;    }    if (pos < last) {      if (wrapped == null)       wrapped=new LongArrayList(2);      wrapped.add(key[pos]);    }    key[last]=curr;    value[last]=value[pos];  }}  }
class C{  public boolean isStopping(){  return _lifecycle.isStopping();}  }
class C{  private void afterImageMove(){  final ReferencedEnvelope env=content.getViewport().getBounds();  if (env == null)   return;  final int dx=imageOrigin.x;  final int dy=imageOrigin.y;  final DirectPosition2D newPos=new DirectPosition2D(dx,dy);  screenToWorld.transform(newPos,newPos);  env.translate(env.getMinimum(0) - newPos.x,env.getMaximum(1) - newPos.y);  doSetDisplayArea(env);  imageOrigin.setLocation(0,0);  redrawBaseImage=true;}  }
class C{  protected void makeChildrenTransparent(){  getChildren().forEach(null);}  }
class C{  public void testDoConfigureSetsAdminServer() throws Exception {  configuration.setProperty(WebLogicPropertySet.SERVER,SERVER);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(SERVER,"//weblogic:admin-server-name",config);}  }
class C{  public static void assumeFalse(boolean assumption,String message) throws TestAbortedException {  assumeFalse(null,null);}  }
class C{  protected MediaEntry(){  super();}  }
class C{  public static boolean isIPv6Reference(String address){  return address.charAt(0) == '[' && address.charAt(address.length() - 1) == ']';}  }
class C{  private static Identity applyRules(final Identity identity){  if (!identity.equals(Identity.ANONYMOUS)) {    final String urn=identity.urn();    if (urn.isEmpty()) {      throw new DecodingException("urn is empty");    }    if (!CcStrict.PTN.matcher(urn).matches()) {      throw new DecodingException(String.format("urn isn't valid: \"%s\"",urn));    }  }  return identity;}  }
class C{  void readCheckpointDelta(TableKelp table,PageServiceImpl pageActor,ReadStream is,int length) throws IOException {  Row row=table.row();  int removeLength=row.removeLength();  int rowLength=row.length();  BlockLeaf block=_blocks[0];  long endPosition=is.position() + length;  int rowHead=block.rowHead();  int blobTail=block.getBlobTail();  long pos;  while ((pos=is.position()) < endPosition) {    int code=is.read();    is.unread();    code=code & CODE_MASK;    if (code == REMOVE) {      rowHead-=removeLength;      if (rowHead < blobTail) {        block=extendBlocks();        rowHead=BLOCK_SIZE - removeLength;        blobTail=0;      }      is.readAll(block.getBuffer(),rowHead,removeLength);    } else     if (code == INSERT) {      rowHead-=rowLength;      while ((blobTail=row.readCheckpoint(is,block.getBuffer(),rowHead,blobTail)) < 0) {        is.position(pos);        block=extendBlocks();        rowHead=BLOCK_SIZE - rowLength;        blobTail=0;      }    } else {      throw new IllegalStateException(L.l("{0} Corrupted checkpoint at pos={1} with code {2}",this,pos,code));    }    block.rowHead(rowHead);    block.setBlobTail(blobTail);  }  clearDirty();  validate(table);}  }
class C{  public JDBC4ConnectionWrapper(MysqlPooledConnection mysqlPooledConnection,com.mysql.jdbc.Connection mysqlConnection,boolean forXa) throws SQLException {  super(mysqlPooledConnection,mysqlConnection,forXa);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if (params == null) {    return false;  }  final RPAction adminlevel=new RPAction();  adminlevel.put("type","adminlevel");  adminlevel.put("target",params[0]);  if ((params.length > 1) && (params[1] != null)) {    adminlevel.put("newlevel",params[1]);  }  ClientSingletonRepository.getClientFramework().send(adminlevel);  return true;}  }
class C{  public byte[] wrap(byte[] in,int inOff,int inLen){  if (!forWrapping) {    throw new IllegalStateException("Not initialized for wrapping");  }  byte keyToBeWrapped[]=new byte[inLen];  System.arraycopy(in,inOff,keyToBeWrapped,0,inLen);  byte[] CKS=calculateCMSKeyChecksum(keyToBeWrapped);  byte[] WKCKS=new byte[keyToBeWrapped.length + CKS.length];  System.arraycopy(keyToBeWrapped,0,WKCKS,0,keyToBeWrapped.length);  System.arraycopy(CKS,0,WKCKS,keyToBeWrapped.length,CKS.length);  int blockSize=engine.getBlockSize();  if (WKCKS.length % blockSize != 0) {    throw new IllegalStateException("Not multiple of block length");  }  engine.init(true,paramPlusIV);  byte TEMP1[]=new byte[WKCKS.length];  for (int currentBytePos=0; currentBytePos != WKCKS.length; currentBytePos+=blockSize) {    engine.processBlock(WKCKS,currentBytePos,TEMP1,currentBytePos);  }  byte[] TEMP2=new byte[this.iv.length + TEMP1.length];  System.arraycopy(this.iv,0,TEMP2,0,this.iv.length);  System.arraycopy(TEMP1,0,TEMP2,this.iv.length,TEMP1.length);  byte[] TEMP3=reverse(TEMP2);  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(true,param2);  for (int currentBytePos=0; currentBytePos != TEMP3.length; currentBytePos+=blockSize) {    engine.processBlock(TEMP3,currentBytePos,TEMP3,currentBytePos);  }  return TEMP3;}  }
class C{  public static boolean isTerminalLocked(Properties ctx) throws TerminalNotFoundException {  int terminalId=getTerminalId(ctx);  return isTerminalLocked(ctx,terminalId);}  }
class C{  public static String randomNumeric(int count){  return random(count,false,true);}  }
class C{  public void noop() throws IOException {  spdyWriter.noop();}  }
class C{  private static <O,A,C extends MultiValueNullableAttribute<O,A>,R extends Class<? extends C>>R generateMultiValueNullableAttribute(Class<C> attributeSuperClass,Class<O> pojoClass,Class<A> attributeValueType,String attributeName,boolean componentValuesNullable,String target){  try {    ClassPool pool=new ClassPool(false);    pool.appendClassPath(new ClassClassPath(pojoClass));    CtClass attributeClass=pool.makeClass(pojoClass.getName() + "$$CQEngine_" + attributeSuperClass.getSimpleName()+ "_"+ attributeName);    attributeClass.setSuperclass(pool.get(attributeSuperClass.getName()));    SignatureAttribute.ClassType genericTypeOfAttribute=new SignatureAttribute.ClassType(attributeSuperClass.getName(),new SignatureAttribute.TypeArgument[]{new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(pojoClass.getName())),new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(attributeValueType.getName()))});    attributeClass.setGenericSignature(genericTypeOfAttribute.encode());    CtConstructor constructor=CtNewConstructor.make("public " + attributeClass.getSimpleName() + "() { "+ "super(\""+ attributeName+ "\", "+ componentValuesNullable+ ");"+ " }",attributeClass);    attributeClass.addConstructor(constructor);    CtMethod getterMethod=CtMethod.make("public java.lang.Iterable getNullableValues(" + pojoClass.getName() + " object, "+ QueryOptions.class.getName()+ " queryOptions) { "+ "return "+ GeneratedAttributeSupport.class.getName()+ ".valueOf("+ target+ ");"+ " }",attributeClass);    getterMethod.setGenericSignature(new SignatureAttribute.MethodSignature(new SignatureAttribute.TypeParameter[0],new SignatureAttribute.Type[]{new SignatureAttribute.ClassType(pojoClass.getName())},new SignatureAttribute.ClassType(java.lang.Iterable.class.getName(),new SignatureAttribute.TypeArgument[]{new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(attributeValueType.getName()))}),new SignatureAttribute.ObjectType[0]).encode());    attributeClass.addMethod(getterMethod);    CtMethod getterBridgeMethod=CtMethod.make("public java.lang.Iterable getNullableValues(java.lang.Object object, " + QueryOptions.class.getName() + " queryOptions) { "+ "return getNullableValues(("+ pojoClass.getName()+ ")object, queryOptions);"+ " }",attributeClass);    getterBridgeMethod.setModifiers(getterBridgeMethod.getModifiers() | AccessFlag.BRIDGE);    attributeClass.addMethod(getterBridgeMethod);    @SuppressWarnings("unchecked") R result=(R)attributeClass.toClass(pojoClass.getClassLoader(),pojoClass.getProtectionDomain());    attributeClass.detach();    return result;  } catch (  Exception e) {    throw new IllegalStateException(getExceptionMessage(pojoClass,attributeValueType,attributeName),e);  }}  }
class C{  private static int bitLen(int w){  return (w < 1 << 15 ? (w < 1 << 7 ? (w < 1 << 3 ? (w < 1 << 1 ? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) : (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 ? (w < 1 << 4 ? 4 : 5) : (w < 1 << 6 ? 6 : 7))) : (w < 1 << 11 ? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) : (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 ? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) : (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 ? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) : (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));}  }
class C{  public ButtonClickerObserver(final ButtonClickerActivity buttonClickerActivity){  super(buttonClickerActivity);  this.baseActivity=buttonClickerActivity;}  }
class C{  @Override public void updateUI(){  super.updateUI();  if (tree != null) {    tree.updateUI();  }  LookAndFeel.installColorsAndFont(this,"Tree.background","Tree.foreground","Tree.font");}  }
class C{  public static void nodesToPath(PathDataNode[] node,Path path){  float[] current=new float[4];  char previousCommand='m';  for (int i=0; i < node.length; i++) {    addCommand(path,current,previousCommand,node[i].mType,node[i].mParams);    previousCommand=node[i].mType;  }}  }
class C{  public ArrayStack(int initialSize){  super(initialSize);}  }
class C{  public MemoryUsage(long init,long used,long committed,long max){  if (init < -1) {    throw new IllegalArgumentException("init parameter = " + init + " is negative but not -1.");  }  if (max < -1) {    throw new IllegalArgumentException("max parameter = " + max + " is negative but not -1.");  }  if (used < 0) {    throw new IllegalArgumentException("used parameter = " + used + " is negative.");  }  if (committed < 0) {    throw new IllegalArgumentException("committed parameter = " + committed + " is negative.");  }  if (used > committed) {    throw new IllegalArgumentException("used = " + used + " should be <= committed = "+ committed);  }  if (max >= 0 && committed > max) {    throw new IllegalArgumentException("committed = " + committed + " should be < max = "+ max);  }  this.init=init;  this.used=used;  this.committed=committed;  this.max=max;}  }
class C{  public Step basicGetStep(){  return step;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static String normalizeDir(String path){  return (path != null && (!(path.endsWith("/") || path.endsWith("\\")))) ? path + File.separator : path;}  }
class C{  public JulianDate shift(int shift){  JulianDate date=new JulianDate(this);  date.julian+=shift;  return date;}  }
class C{  public PLSphericalPanorama(){  super();}  }
class C{  public static byte[] toByteArray(long macAddress){  return MacAddress.of(macAddress).getBytes();}  }
class C{  public static void scaleM(float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[mi]*=x;    m[4 + mi]*=y;    m[8 + mi]*=z;  }}  }
class C{  private ServiceRefAmp sessionImpl(String address){  if (!address.startsWith("session:") || !address.endsWith("/")) {    throw new IllegalArgumentException(address);  }  String sessionId=cookie("JSESSIONID");  if (sessionId == null) {    sessionId=generateSessionId();    cookie("JSESSIONID",sessionId);  }  return services().service(address + sessionId);}  }
class C{  public String toString(){  StringBuffer path=new StringBuffer();  if (absolute)   path.append("/");  for (int i=0; i < elements.size(); i++) {    if (i > 0)     path.append("/");    path.append(elements.get(i));  }  return path.toString();}  }
class C{  public void stopShakeDetection(ShakeListener shakeListener){  stopLibrarySensorDetection(shakeListener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.017 -0500",hash_original_method="BFC7ADC7798C8B302495F7610AC35F84",hash_generated_method="FEC72A6428B4F8560217DFB206957375") @DSSafe(DSCat.SAFE_OTHERS) public static byte[] sha384(InputStream data) throws IOException {  return digest(getSha384Digest(),data);}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  protected void test(jmetal.core.Problem problemA,Problem problemB) throws Exception {  JMetalProblemAdapter adapter=new JMetalProblemAdapter(problemB);  for (int i=0; i < TestThresholds.SAMPLES; i++) {    jmetal.core.Solution solutionA=new jmetal.core.Solution(problemA);    Solution solutionB=adapter.translate(solutionA);    problemA.evaluate(solutionA);    problemB.evaluate(solutionB);    compare(solutionA,solutionB);  }}  }
class C{  public SoftReference(T r,ReferenceQueue<? super T> q){  super(r,q);}  }
class C{  public String str(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof DiskWriteAttributesImpl)) {    return false;  }  DiskWriteAttributesImpl other=(DiskWriteAttributesImpl)o;  if (other.isSynchronous() != isSynchronous()) {    return false;  }  boolean result=other.isRollOplogs() == isRollOplogs() && other.getMaxOplogSize() == getMaxOplogSize();  if (!isSynchronous()) {    result=result && other.getTimeInterval() == getTimeInterval() && other.getBytesThreshold() == getBytesThreshold();  }  return result;}  }
class C{  protected void waitForFileToGrow(File file) throws Exception {  int currentWaitTime=0;  while (!file.exists()) {    Log.i(LOG_TAG,"Waiting for file to exist...");    currentWaitTime=timeoutWait(currentWaitTime,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME,"Timed out waiting for file to be created.");  }  long originalSize=file.length();  while (file.length() <= originalSize) {    Log.i(LOG_TAG,"Waiting for file to be written to...");    currentWaitTime=timeoutWait(currentWaitTime,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME,"Timed out waiting for file to be written to.");  }}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Interval))   return false;  Interval other=(Interval)o;  return other.start == this.start && other.end == this.end;}  }
class C{  private static DateValue[] everyOtherMonthInYear(DateValue start){  return monthsInYear(start,2);}  }
class C{  public static SolrConfig createConfig(String solrHome,String coreName,String confFile){  System.setProperty("solr.test.sys.prop1","propone");  System.setProperty("solr.test.sys.prop2","proptwo");  try {    return new SolrConfig(solrHome + File.separator + coreName,confFile,null);  } catch (  Exception xany) {    throw new RuntimeException(xany);  }}  }
class C{  public static StringBlock read(IntReader reader) throws IOException {  XmlResourceParser.readCheckType(reader,CHUNK_TYPE);  int chunkSize=reader.readInt();  int stringCount=reader.readInt();  int styleOffsetCount=reader.readInt();  reader.readInt();  int stringsOffset=reader.readInt();  int stylesOffset=reader.readInt();  StringBlock block=new StringBlock();  block.m_stringOffsets=reader.readIntArray(stringCount);  if (styleOffsetCount != 0) {    block.m_styleOffsets=reader.readIntArray(styleOffsetCount);  }{    int size=((stylesOffset == 0) ? chunkSize : stylesOffset) - stringsOffset;    if ((size % 4) != 0) {      throw new IOException("String data size is not multiple of 4 (" + size + ").");    }    block.m_strings=reader.readIntArray(size / 4);  }  if (stylesOffset != 0) {    int size=(chunkSize - stylesOffset);    if ((size % 4) != 0) {      throw new IOException("Style data size is not multiple of 4 (" + size + ").");    }    block.m_styles=reader.readIntArray(size / 4);  }  return block;}  }
class C{  private double clamp(double value,double min,double max){  if (value < min) {    return min;  }  if (value > max) {    return max;  }  return value;}  }
class C{  protected static final Map<Integer,Set<CTag>> loadTags(final CConnection connection,final INaviProject project,final CTagManager viewTagManager) throws SQLException {  return PostgreSQLViewTagLoader.loadViewTags(connection,CTableNames.PROJECT_VIEWS_TABLE,"project_id",project.getConfiguration().getId(),viewTagManager);}  }
class C{  public int writeZeta(int x,final int k) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (k < 1)   throw new IllegalArgumentException("The shrinking factor " + k + " is not positive");  if (k == 3 && x < MAX_PRECOMPUTED)   return writeInt(ZETA_3[x],ZETA_3[x] >>> 26);  final int msb=Fast.mostSignificantBit(++x);  final int h=msb / k;  final int l=writeUnary(h);  final int left=1 << h * k;  return l + (x - left < left ? writeInt(x - left,h * k + k - 1) : writeInt(x,h * k + k));}  }
class C{  private String scanBlockScalarIgnoredLine(Mark startMark){  int ff=0;  while (reader.peek(ff) == ' ') {    ff++;  }  if (ff > 0) {    reader.forward(ff);  }  if (reader.peek() == '#') {    ff=0;    while (Constant.NULL_OR_LINEBR.hasNo(reader.peek(ff))) {      ff++;    }    if (ff > 0) {      reader.forward(ff);    }  }  char ch=reader.peek();  String lineBreak=scanLineBreak();  if (lineBreak.length() == 0 && ch != '\0') {    throw new ScannerException("while scanning a block scalar",startMark,"expected a comment or a line break, but found " + ch,reader.getMark());  }  return lineBreak;}  }
class C{  public synchronized void removeHost(String hostPortPair) throws SQLException {  if (this.connectionGroup != null) {    if (this.connectionGroup.getInitialHosts().size() == 1 && this.connectionGroup.getInitialHosts().contains(hostPortPair)) {      throw SQLError.createSQLException("Cannot remove only configured host.",null);    }  }  this.hostsToRemove.add(hostPortPair);  this.connectionsToHostsMap.remove(this.liveConnections.remove(hostPortPair));  if (this.hostsToListIndexMap.remove(hostPortPair) != null) {    long[] newResponseTimes=new long[this.responseTimes.length - 1];    int newIdx=0;    for (    String h : this.hostList) {      if (!this.hostsToRemove.contains(h)) {        Integer idx=this.hostsToListIndexMap.get(h);        if (idx != null && idx < this.responseTimes.length) {          newResponseTimes[newIdx]=this.responseTimes[idx];        }        this.hostsToListIndexMap.put(h,newIdx++);      }    }    this.responseTimes=newResponseTimes;  }  if (hostPortPair.equals(this.currentConnection.getHostPortPair())) {    invalidateConnection(this.currentConnection);    pickNewConnection();  }}  }
class C{  public void testBadStreamSize(){  ThreadLocalRandom r=ThreadLocalRandom.current();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);}  }
class C{  public void recordInBuffer(Object obj){  collector().recordInBuffer(getRuleName(),obj);}  }
class C{  public ImageAnalyzer(File file) throws IOException {  InputStream is=new FileInputStream(file);  try {    analyze(is);  }  finally {    is.close();  }}  }
class C{  public int yToLine(int y){  FontMetrics fm=painter.getFontMetrics();  int height=fm.getHeight();  return Math.max(0,Math.min(getLineCount() - 1,y / height + firstLine));}  }
class C{  public Get(Class<?> type,String name){  super(type);  this.name=name;}  }
class C{  public Mention(WordToken annotation){  this(annotation,MentionType.PRONOUN);}  }
class C{  public void onLoggedIn(){}  }
class C{  public ListSelectDialogBuilder<T> addListItem(T item){  this.content.add(item);  return this;}  }
class C{  public SelectionInputDialog(Window owner,String key,boolean editable,Collection<T> selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){  this(owner,key,selectionValues,initialSelectionValue,inputValidator,keyArguments);  comboBox.setEditable(editable);}  }
class C{  final void updateHead(Node<E> h,Node<E> p){  if (h != p && casHead(h,p))   h.lazySetNext(h);}  }
class C{  public void expectErrorSuffix(String... parts){  expected=join(parts);  expectedSuffix=true;}  }
class C{  @Override public int read(byte[] buf,int offset,int byteCount) throws IOException {  BlockGuard.getThreadPolicy().onNetwork();synchronized (readLock) {    checkOpen();    Arrays.checkOffsetAndCount(buf.length,offset,byteCount);    if (byteCount == 0) {      return 0;    }    return NativeCrypto.SSL_read(sslNativePointer,socket.getFileDescriptor$(),OpenSSLSocketImpl.this,buf,offset,byteCount,getSoTimeout());  }}  }
class C{  public String system(){  return system;}  }
class C{  public String toFormattedString(){  return "Device properties:\n    " + createString("\n    ");}  }
class C{  protected void receiveEntityNovaNetworkModeChange(Packet c){  try {    int entityId=c.getIntValue(0);    String networkID=c.getObject(1).toString();    Entity e=getGame().getEntity(entityId);    if (e != null) {      e.setNewRoundNovaNetworkString(networkID);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public Permutation(int[] perm){  if (!isPermutation(perm)) {    throw new IllegalArgumentException("array is not a permutation vector");  }  this.perm=IntUtils.clone(perm);}  }
class C{  @Override public InetAddress addressLocal(){  SocketChannel s=_channel;  if (s != null) {    try {      InetSocketAddress addr=(InetSocketAddress)s.getLocalAddress();      return addr.getAddress();    } catch (    IOException e) {      throw new RuntimeException(e);    }  } else {    return null;  }}  }
class C{  @UiThread @NonNull @Override public HorizontalParentViewHolder onCreateParentViewHolder(@NonNull ViewGroup parent,int viewType){  View view=mInflater.inflate(R.layout.list_item_parent_horizontal,parent,false);  return new HorizontalParentViewHolder(view);}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  protected CharSet(final String... set){  super();  final int sz=set.length;  for (int i=0; i < sz; i++) {    add(set[i]);  }}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public boolean isRecursive(){  return this.recursive;}  }
class C{  public ExtentTest fail(String details){  log(Status.FAIL,details);  return this;}  }
class C{  public void resume(){  if (mPopupWindow.isShowing()) {    mPopupWindow.dismiss();    resumeAnim();  }}  }
class C{  private static List<DatabaseConnection> findDatabaseConnections(JPADataSource datasource){  if (datasource == null) {    throw new NullPointerException("The datasource parameter cannot be null.");  }  String databaseUrl=datasource.getUrl();  String user=datasource.getUsername();  if (databaseUrl == null || user == null) {    return Collections.emptyList();  }  List<DatabaseConnection> result=new ArrayList<DatabaseConnection>();  for (  DatabaseConnection dbconn : ConnectionManager.getDefault().getConnections()) {    if (databaseUrl.equals(dbconn.getDatabaseURL()) && user.equals(dbconn.getUser())) {      result.add(dbconn);    }  }  if (result.size() > 0) {    return Collections.unmodifiableList(result);  } else {    return Collections.emptyList();  }}  }
class C{  public Vertex parseElement(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean includeBinary,boolean debug,Network network){  List<String> comments=getComments(stream);  stream.skipWhitespace();  int brackets=0;  while (stream.peek() == '(') {    includeBinary=true;    brackets++;    stream.skip();    stream.skipWhitespace();  }  if (stream.peek() == '[') {    stream.skip();    Vertex array=network.createInstance(Primitive.ARRAY);    stream.skipWhitespace();    if (stream.peek() == ']') {      stream.skip();      array.addRelationship(Primitive.LENGTH,network.createVertex(0));      return array;    }    boolean more=true;    int index=0;    while (more) {      Vertex element=parseElement(stream,elements,debug,network);      array.addRelationship(Primitive.ELEMENT,element,index);      index++;      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        more=false;      }    }    stream.skipWhitespace();    ensureNext(']',stream);    return array;  }  if (stream.peek() == '{') {    stream.skip();    Vertex object=network.createVertex();    stream.skipWhitespace();    if (stream.peek() == '}') {      stream.skip();      return object;    }    boolean more=true;    while (more) {      String attribute=stream.nextWord();      ensureNext(':',stream);      Vertex element=parseElement(stream,elements,debug,network);      object.addRelationship(new Primitive(attribute),element);      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        more=false;      }    }    stream.skipWhitespace();    ensureNext('}',stream);    return object;  }  String token=stream.peekWord();  if (token == null) {    throw new SelfParseException("Unexpected end, element expected",stream);  }  token=token.toLowerCase();  if (token.equals(VAR)) {    token=VARIABLE;  }  String source="";  int lineNumber=0;  if (debug) {    source=stream.currentLine();    lineNumber=stream.currentLineNumber();  }  Vertex expression=null;  if (OPERATORS.contains(token)) {    expression=parseOperator(stream,elements,debug,network);  } else   if (token.equals("^")) {    stream.nextWord();    expression=parseElementName(Primitive.VARIABLE,stream,elements,debug,network);    Vertex meaning=network.createInstance(Primitive.VARIABLE);    meaning.addRelationship(Primitive.INSTANTIATION,new Primitive(expression.getName()));    expression.addRelationship(Primitive.MEANING,meaning);  } else   if (TYPES.contains(token)) {    stream.nextWord();    if (token.equals(TEMPLATE)) {      stream.skipWhitespace();      ensureNext('(',stream);      expression=parseTemplate(null,stream,elements,debug,network);      stream.skipWhitespace();      ensureNext(')',stream);    } else     if (token.equals(PATTERN)) {      stream.skipWhitespace();      ensureNext('(',stream);      ensureNext('"',stream);      expression=network.createPattern(stream.nextStringDoubleQuotes(),this);      stream.skipWhitespace();      ensureNext(')',stream);    } else     if (token.equals(VARIABLE)) {      expression=parseElementName(Primitive.VARIABLE,stream,elements,debug,network);    } else {      stream.skipWhitespace();      if (stream.peek() != '(') {        throw new SelfParseException("Expected '(' in " + token + " declaration",stream);      }      stream.skip();      Long id=null;      if (Character.isDigit(stream.peek())) {        String idText=stream.nextWord();        try {          id=Long.valueOf(idText);        } catch (        NumberFormatException exception) {          throw new SelfParseException("Invalid " + token + " id: "+ idText,stream);        }      }      char peek=stream.peek();      String name=null;      if ((id == null) || (peek == ':')) {        if (id != null) {          stream.skip();        }        name=stream.nextWord();        if (name != null && Character.isLetter(name.charAt(0))) {          throw new SelfParseException("Invalid " + token + " declaration: "+ name,stream);        }      }      Map<String,Vertex> elementsForType=elements.get(token);      if (name != null) {        if (elementsForType != null) {          expression=elementsForType.get(name);        }      }      if (expression == null) {        if (id != null) {          expression=network.findById(id);          if (expression == null) {            throw new SelfParseException("Id element reference not found: " + id,stream);          }          if ((elementsForType != null) && (name != null)) {            elementsForType.put(name,expression);          }        } else         if (name != null) {          if (token.equals(STATE)) {            expression=network.createInstance(Primitive.STATE);            expression.setName(name);          } else           if (token.equals(VARIABLE)) {            expression=network.createInstance(Primitive.VARIABLE);            expression.setName(name);          } else           if (token.equals(FUNCTION)) {            expression=network.createInstance(Primitive.FUNCTION);            expression.setName(name);          } else {            throw new SelfParseException("Invalid element: " + token,stream);          }          if (name != null) {            elementsForType=elements.get(token);            if (elementsForType != null) {              elementsForType.put(name,expression);            }          }        } else {          throw new SelfParseException("Invalid element: " + token,stream);        }      }      stream.skipWhitespace();      ensureNext(')',stream);    }  } else {    char next=stream.peek();    try {      if (next == '#') {        stream.skip();        String data=stream.upToAny(PRIMITIVE_TOKENS);        expression=network.createVertex(new Primitive(data));      } else       if (next == '"') {        stream.skip();        String data=stream.nextStringDoubleQuotes();        expression=network.createVertex(data);      } else       if (next == '\'') {        stream.skip();        String data=stream.nextStringQuotes();        expression=network.createVertex(data);      } else       if (Character.isDigit(next) || next == '-' || next == '+') {        int position=stream.getPosition();        String data=stream.nextWord();        if (data.indexOf(',') != -1) {          stream.setPosition(position);          data=stream.upTo(',');        }        int index=data.indexOf('.');        if ((index != -1) && (index + 1 < data.length())) {          if (!Character.isDigit(data.charAt(index + 1))) {            stream.setPosition(position);            data=stream.upTo('.');          }        }        expression=network.createVertex(new BigInteger(data));      } else {        expression=parseElementName(null,stream,elements,debug,network);      }    } catch (    SelfParseException exception) {      throw exception;    }catch (    Exception exception) {      throw new SelfParseException("Invalid data: " + next,stream,exception);    }  }  stream.skipWhitespace();  char peek=stream.peek();  while (".=!&|)[<>+-*/".indexOf(peek) != -1) {    String operator1=stream.peek(1);    String operator=stream.peek(2);    if (peek == ')') {      if (brackets > 0) {        brackets--;        stream.skip();      } else {        break;      }    } else     if (peek == '.') {      stream.skip();      int position=stream.getPosition();      String attribute=stream.nextWord();      if (!Character.isAlphabetic(attribute.charAt(0))) {        throw new SelfParseException("Invalid attribute name: " + attribute,stream);      }      if (attribute.indexOf('.') != -1) {        stream.setPosition(position);        stream.skipWhitespace();        attribute=stream.upTo('.');      }      Vertex newExpression=network.createInstance(Primitive.EXPRESSION);      stream.skipWhitespace();      Vertex associate=null;      Vertex associateRelationship=null;      peek=stream.peek();      if (peek == '(') {        newExpression.addRelationship(Primitive.OPERATOR,Primitive.CALL);        newExpression.setName(CALL);        newExpression.addRelationship(Primitive.THIS,expression,0);        newExpression.addRelationship(Primitive.FUNCTION,network.createVertex(new Primitive(attribute)),1);        parseArguments(newExpression,Primitive.ARGUMENT,0,stream,elements,false,debug,network);      } else {        if (peek == '[') {          stream.skip();          Vertex index=parseElement(stream,elements,debug,network);          stream.skipWhitespace();          if (stream.peek() == ',') {            associate=index;            associateRelationship=parseElement(stream,elements,debug,network);          } else {            newExpression.addRelationship(Primitive.INDEX,index);          }          ensureNext(']',stream);          peek=stream.peek();        }        boolean isSet=false;        String peek2=stream.peek(2);        if (peek == '=' && peek2.equals("=+")) {          isSet=true;          stream.skip(2);          newExpression.addRelationship(Primitive.OPERATOR,Primitive.ADD);          newExpression.setName(ADD);        } else         if (peek == '=' && peek2.equals("=-")) {          isSet=true;          stream.skip(2);          newExpression.addRelationship(Primitive.OPERATOR,Primitive.REMOVE);          newExpression.setName(REMOVE);        } else         if (peek == '=' && !peek2.equals("==")) {          isSet=true;          stream.skip();          newExpression.addRelationship(Primitive.OPERATOR,Primitive.SET);          newExpression.setName(SET);        } else {          newExpression.addRelationship(Primitive.OPERATOR,Primitive.GET);          newExpression.setName(GET);        }        newExpression.addRelationship(Primitive.ARGUMENT,expression,0);        newExpression.addRelationship(Primitive.ARGUMENT,network.createVertex(new Primitive(attribute)),1);        if (isSet) {          Vertex argument=parseElement(stream,elements,debug,network);          newExpression.addRelationship(Primitive.ARGUMENT,argument,2);        }        if (associate != null) {          newExpression.addRelationship(Primitive.ARGUMENT,associate,3);          newExpression.addRelationship(Primitive.ARGUMENT,associateRelationship,4);        }      }      expression=newExpression;    } else     if (peek == '[') {      stream.skip();      Vertex newExpression=network.createInstance(Primitive.EXPRESSION);      Vertex variable=parseElement(stream,elements,debug,network);      stream.skipWhitespace();      ensureNext(']',stream);      stream.skipWhitespace();      peek=stream.peek();      if (peek == '(') {        newExpression.addRelationship(Primitive.OPERATOR,Primitive.CALL);        newExpression.setName(CALL);        newExpression.addRelationship(Primitive.THIS,expression,0);        newExpression.addRelationship(Primitive.FUNCTION,variable,1);        parseArguments(newExpression,Primitive.ARGUMENT,0,stream,elements,false,debug,network);      } else {        boolean isSet=false;        String peek2=stream.peek(2);        if (peek == '=' && peek2.equals("=+")) {          isSet=true;          stream.skip(2);          newExpression.addRelationship(Primitive.OPERATOR,Primitive.ADD);          newExpression.setName(ADD);        } else         if (peek == '=' && peek2.equals("=-")) {          isSet=true;          stream.skip(2);          newExpression.addRelationship(Primitive.OPERATOR,Primitive.REMOVE);          newExpression.setName(REMOVE);        } else         if (stream.peek() == '=' && !stream.peek(2).equals("==")) {          isSet=true;          stream.skip();          newExpression.addRelationship(Primitive.OPERATOR,Primitive.SET);          newExpression.setName(SET);        } else {          newExpression.addRelationship(Primitive.OPERATOR,Primitive.GET);          newExpression.setName(GET);        }        newExpression.addRelationship(Primitive.ARGUMENT,expression,0);        newExpression.addRelationship(Primitive.ARGUMENT,variable,1);        if (isSet) {          Vertex argument=parseElement(stream,elements,debug,network);          newExpression.addRelationship(Primitive.ARGUMENT,argument,2);        }      }      expression=newExpression;    } else     if (includeBinary) {      Primitive operation=BINARY_OPERATORS.get(operator);      Primitive operation1=null;      if (operation == null) {        operation1=BINARY_OPERATORS.get(operator1);      }      if (operator.equals("//")) {        break;      } else       if (operator.equals("++")) {        stream.skip(2);        Vertex newExpression=network.createInstance(Primitive.EXPRESSION);        newExpression.addRelationship(Primitive.OPERATOR,Primitive.INCREMENT);        newExpression.setName(INCREMENT);        newExpression.addRelationship(Primitive.ARGUMENT,expression,0);        expression=newExpression;      } else       if (operator.equals("--")) {        stream.skip(2);        Vertex newExpression=network.createInstance(Primitive.EXPRESSION);        newExpression.addRelationship(Primitive.OPERATOR,Primitive.DECREMENT);        newExpression.setName(DECREMENT);        newExpression.addRelationship(Primitive.ARGUMENT,expression,0);        expression=newExpression;      } else       if (operation != null || operation1 != null) {        if (operation == null) {          stream.skip();          operator=operator1;          operation=operation1;        } else {          stream.skip(2);        }        Vertex newExpression=network.createInstance(Primitive.EXPRESSION);        newExpression.addRelationship(Primitive.OPERATOR,operation);        newExpression.setName(operator);        newExpression.addRelationship(Primitive.ARGUMENT,expression,0);        Vertex argument=parseElement(stream,elements,false,debug,network);        newExpression.addRelationship(Primitive.ARGUMENT,argument,1);        expression=newExpression;      } else       if (peek == '=' && expression.isVariable()) {        stream.skip();        Vertex newExpression=network.createInstance(Primitive.EXPRESSION);        newExpression.addRelationship(Primitive.OPERATOR,Primitive.ASSIGN);        newExpression.setName(ASSIGN);        newExpression.addRelationship(Primitive.ARGUMENT,expression,0);        Vertex argument=parseElement(stream,elements,true,debug,network);        newExpression.addRelationship(Primitive.ARGUMENT,argument,1);        expression=newExpression;      } else {        throw new SelfParseException("Invalid operator: " + operator,stream);      }    } else {      break;    }    stream.skipWhitespace();    peek=stream.peek();  }  stream.skipWhitespace();  while (brackets > 0) {    stream.skipWhitespace();    ensureNext(')',stream);    brackets--;  }  if (debug && expression.instanceOf(Primitive.EXPRESSION)) {    for (    String comment : comments) {      expression.addRelationship(Primitive.COMMENT,network.createVertex(comment));    }    expression.addRelationship(Primitive.SOURCE,network.createVertex(source));    expression.addRelationship(Primitive.LINE_NUMBER,network.createVertex(lineNumber));  }  return expression;}  }
class C{  public static boolean isLicensed(){  if (SetupUtils.isOssBuild()) {    return true;  }  return LicenseUtils.isLicensed(false);}  }
class C{  public StartItemsCollectionWithLimitAction(final String quest,final List<String> items,int limit){  this.questSlot=checkNotNull(quest);  this.items=new LinkedList<String>(items);  this.limit=limit;}  }
class C{  public void addMiterLimit(float limit){  PDFChangeStrokeCmd sc=new PDFChangeStrokeCmd();  sc.setMiterLimit(limit);  addCommand(sc);}  }
class C{  public Request body(String body){  Objects.requireNonNull(body);  _body=body.getBytes();  return this;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public static void postCore(ProfilerSection section){  ProfilerSection section1=section.section("CoreJava");  section1.start("Post");  for (  Object core : coreObjects) {    try {      core.getClass().getDeclaredMethod("postinit").invoke(core);    } catch (    Throwable e) {    }  }  section1.stop("Post");}  }
class C{  public synchronized int encryptData(byte[] output,int outputPos,byte[] input,int inputOffset,int inputLength){  try {    sr.nextBytes(ivData);    System.arraycopy(ivData,0,output,outputPos,IV_LENGTH);    encryptCipher.init(Cipher.ENCRYPT_MODE,skeySpec,new IvParameterSpec(ivData));    encryptCipher.doFinal(input,inputOffset,inputLength,output,outputPos + IV_LENGTH);    return IV_LENGTH + encryptCipher.getOutputSize(inputLength);  } catch (  Exception e) {    throw new IllegalStateException(e);  }}  }
class C{  @Override public void mouseEntered(MouseEvent e){}  }
class C{  public <T extends GeoVisibleResource>Iterator<T> queryObjects(Class<T> clazz,List<URI> ids) throws Exception {  BulkIdParam param=new BulkIdParam();  param.setIds(ids);  WebResource rRoot=createRequest(GEOVISIBLE_URI + clazz.getName() + "/objects");  rRoot.accept(MediaType.APPLICATION_OCTET_STREAM);  ClientResponse resp=addSignature(rRoot).post(ClientResponse.class,param);  InputStream input=resp.getEntityInputStream();  ObjectInputStream objInputStream=new ObjectInputStream(input);  @SuppressWarnings("unchecked") ResourcesResponse<T> resources=(ResourcesResponse<T>)objInputStream.readObject();  List<T> list=resources.getObjects();  return list.iterator();}  }
class C{  public Path addTrailingSeparator(){  if (hasTrailingSeparator() || isRoot()) {    return this;  }  if (isEmpty()) {    return new Path(device,segments,HAS_LEADING);  }  return new Path(device,segments,separators | HAS_TRAILING);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:      return SexecPackage.REACTION__NAME;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object elem=stack.pop();  Object obj=stack.pop();  int rv=-1;  if (obj == null)   rv=-1; else   if (obj instanceof java.util.List)   rv=((java.util.List)obj).indexOf(elem); else   if (obj instanceof Object[])   rv=java.util.Arrays.asList((Object[])obj).indexOf(elem);  return new Integer(rv);}  }
class C{  public static double transposeTimesTimes(final double[] a,final double[][] B,final double[] c){  assert (B.length == a.length) : ERR_MATRIX_INNERDIM;  double sum=0.0;  for (int j=0; j < B[0].length; j++) {    double s=0;    for (int k=0; k < a.length; k++) {      s+=a[k] * B[k][j];    }    sum+=s * c[j];  }  return sum;}  }
class C{  private void checkCleanupOffheapAfterCacheDestroy() throws Exception {  final String spaceName="gg-swap-cache-" + CACHE_NAME;  try (Ignite g=startGrid(0)){    checkOffheapAllocated(spaceName,false);    IgniteCache<Integer,String> cache=g.getOrCreateCache(createCacheConfiguration());    cache.put(1,"value_1");    cache.put(2,"value_2");    checkOffheapAllocated(spaceName,true);    g.destroyCache(cache.getName());    checkOffheapAllocated(spaceName,false);  } }  }
class C{  public boolean isCycleLeft(){  return cycleLeft;}  }
class C{  public void dragEnter(DropTargetDragEvent dtde){}  }
class C{  private boolean isGzipAllowed(final HttpServletRequest request){  return !DispatcherStreamLocator.isIncludedRequest(request) && WroUtil.isGzipSupported(request);}  }
class C{  public void logging(String msg1,String msg2){  System.out.print(msg1);  System.out.print(" ");  System.out.println(msg2);}  }
class C{  public MekaDialog(Dialog owner){  this(owner,ModalityType.MODELESS);}  }
class C{  public void endGetAllSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(getAllSendInProgressId,-1);  int endGetAllSendId;  if (failed) {    endGetAllSendId=getAllSendFailedId;  } else {    endGetAllSendId=getAllSendId;  }  this.sendStats.incInt(endGetAllSendId,1);  this.stats.incLong(getAllSendDurationId,duration);}  }
class C{  private ChatCondition createCondition(String condition) throws CompilationFailedException {  final GroovyShell interp=createGroovyShell();  String code="import games.stendhal.server.entity.npc.condition.*;\r\n" + condition;  ChatCondition created=(ChatCondition)interp.evaluate(code);  return created;}  }
class C{  public JobOriginatingUserName(String userName,Locale locale){  super(userName,locale);}  }
class C{  public void buildReport(String organizationId,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  this.buildReport(organizationId,result,false);}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  private void normalizeTime(){  int addMinutes=((second < 0) ? (second - 59) : second) / 60;  second-=addMinutes * 60;  minute+=addMinutes;  int addHours=((minute < 0) ? (minute - 59) : minute) / 60;  minute-=addHours * 60;  hour+=addHours;  int addDays=((hour < 0) ? (hour - 23) : hour) / 24;  hour-=addDays * 24;  day+=addDays;}  }
class C{  private void drawImage(Graphics g,int yLoc,boolean getScaled){  int xLoc=100;  int delta=(int)(SCALE_FACTOR * FULL_SIZE);  if (getScaled) {    for (int scaledSize=FULL_SIZE; scaledSize > 0; scaledSize-=delta) {      Image scaledImage=originalImage.getScaledInstance(scaledSize,scaledSize,Image.SCALE_AREA_AVERAGING);      g.drawImage(scaledImage,xLoc,yLoc + (FULL_SIZE - scaledSize) / 2,null);      xLoc+=scaledSize + 20;    }  } else {    for (int scaledSize=FULL_SIZE; scaledSize > 0; scaledSize-=delta) {      g.drawImage(originalImage,xLoc,yLoc + (FULL_SIZE - scaledSize) / 2,scaledSize,scaledSize,null);      xLoc+=scaledSize + 20;    }  }}  }
class C{  public static IntList list(Integer... args){  IntList result, p;  if (args.length > 0) {    result=new IntList(args[0],null);  } else {    return null;  }  int k;  for (k=1, p=result; k < args.length; k+=1, p=p.tail) {    p.tail=new IntList(args[k],null);  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void deleteSSHKey(Integer targetUserId,Integer targetKeyId) throws IOException {  String tailUrl=GitlabUser.USERS_URL + "/" + targetUserId+ GitlabSSHKey.KEYS_URL+ "/"+ targetKeyId;  retrieve().method("DELETE").to(tailUrl,Void.class);}  }
class C{  public String toString(){  Node<V>[] t;  int f=(t=table) == null ? 0 : t.length;  Traverser<V> it=new Traverser<V>(t,f,0,f);  StringBuilder sb=new StringBuilder();  sb.append('{');  Node<V> p;  if ((p=it.advance()) != null) {    for (; ; ) {      V k=p.key;      sb.append(k == this ? "(this Set)" : k);      if ((p=it.advance()) == null)       break;      sb.append(',').append(' ');    }  }  return sb.append('}').toString();}  }
class C{  public Socks4Message(int cmd,InetAddress ip,int port,String user){  this(SOCKS_VERSION,cmd,ip,port,user);}  }
class C{  public int peekEOFServerStatus(){  if (isEOF() && getDataLength() >= 5) {    return (byteBuffer[EOF_SERVER_STATUS_OFFSET] & 0xff) | ((byteBuffer[EOF_SERVER_STATUS_OFFSET + 1] & 0xff) << 8);  }  return -1;}  }
class C{  public double compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  public static String encodeBytes(byte[] source){  return encodeBytes(source,0,source.length,NO_OPTIONS);}  }
class C{  private void readTSpanElement(IXMLElement elem,DefaultStyledDocument doc) throws IOException {  try {    if (elem.getContent() != null) {      doc.insertString(doc.getLength(),toText(elem,elem.getContent()),null);    } else {      for (      IXMLElement node : elem.getChildren()) {        if (node.getName() != null && node.getName().equals("tspan")) {          readTSpanElement((IXMLElement)node,doc);        } else {          if (DEBUG) {            System.out.println("SVGInputFormat unknown text node " + node.getName());          }        }      }    }  } catch (  BadLocationException e) {    InternalError ex=new InternalError(e.getMessage());    ex.initCause(e);    throw ex;  }}  }
class C{  public LogisticGrowthN0Model(String name,Parameter N0Parameter,Parameter growthRateParameter,Parameter t50Parameter,Type units,boolean usingGrowthRate){  super(name);  logisticGrowthN0=new LogisticGrowthN0(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1));  this.t50Parameter=t50Parameter;  addVariable(t50Parameter);  t50Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1));  this.usingGrowthRate=usingGrowthRate;  setUnits(units);}  }
class C{  synchronized boolean useCompatibleMode() throws RepositoryException {  if (compatibleMode == null) {    try {      final String serverProtocolVersion=createHTTPClient().getServerProtocol();      this.compatibleMode=(Integer.parseInt(serverProtocolVersion) < 7);    } catch (    NumberFormatException e) {      throw new RepositoryException("could not read protocol version from server: ",e);    }catch (    IOException e) {      throw new RepositoryException("could not read protocol version from server: ",e);    }  }  return compatibleMode;}  }
class C{  private static String urlEncodeKey(String key){  StringBuffer resultUri=new StringBuffer();  String[] keys=key.split("/");  resultUri.append(HttpUtil.urlEncode(keys[0],DEFAULT_CHARSET_NAME));  for (int i=1; i < keys.length; i++) {    resultUri.append("/").append(HttpUtil.urlEncode(keys[i],DEFAULT_CHARSET_NAME));  }  if (key.endsWith("/")) {    for (int i=key.length() - 1; i >= 0; i--) {      if (key.charAt(i) == '/') {        resultUri.append("/");      } else {        break;      }    }  }  return resultUri.toString();}  }
class C{  @Override public boolean containsAll(Collection<?> c){  boolean result;  Iterator<?> iter;  result=true;  iter=c.iterator();  while (iter.hasNext()) {    if (!contains(iter.next())) {      result=false;      break;    }  }  return result;}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public void parseBodies(CompilationUnitDeclaration unit){  TypeDeclaration[] types=unit.types;  if (types == null)   return;  for (int i=0; i < types.length; i++) {    TypeDeclaration type=types[i];    this.patternLocator.match(type,this.nodeSet);    this.parseBodies(type,unit);  }}  }
class C{  private void printModifiers(List<IExtendedModifier> ext){  for (Iterator<IExtendedModifier> it=ext.iterator(); it.hasNext(); ) {    ASTNode p=(ASTNode)it.next();    p.accept(this);    this.fBuffer.append(" ");  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANG_1:    getCodeLang_1().clear();  getCodeLang_1().addAll((Collection<? extends CodeLang_>)newValue);return;case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2__CODE_LANGS_1:getCodeLangs_1().clear();getCodeLangs_1().addAll((Collection<? extends CodeLangs_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Object propertyNamed(String propertyName){  return properties_.get(propertyName);}  }
class C{  public Vector<String> find(){  Vector<String> list;  int i;  Class<?> cls;  Object obj;  CapabilitiesHandler handler;  boolean fits;  Capabilities caps;  m_Matches=new Vector<String>();  m_Misses=new Vector<String>();  list=ClassDiscovery.find(m_Superclass,m_Packages.toArray(new String[m_Packages.size()]));  for (i=0; i < list.size(); i++) {    try {      cls=Class.forName(list.get(i));      obj=cls.newInstance();      if (cls == this.getClass()) {        continue;      }      if (!(obj instanceof CapabilitiesHandler)) {        continue;      }      handler=(CapabilitiesHandler)obj;      caps=handler.getCapabilities();      fits=true;      for (      Capability cap : Capability.values()) {        if (m_Capabilities.handles(cap)) {          if (!(caps.handles(cap))) {            fits=false;            break;          }        }      }      if (!fits) {        m_Misses.add(list.get(i));        continue;      }      for (      Capability cap : Capability.values()) {        if (m_NotCapabilities.handles(cap)) {          if ((caps.handles(cap))) {            fits=false;            break;          }        }      }      if (!fits) {        m_Misses.add(list.get(i));        continue;      }      if (caps.getMinimumNumberInstances() > m_Capabilities.getMinimumNumberInstances()) {        m_Misses.add(list.get(i));        continue;      }      m_Matches.add(list.get(i));    } catch (    Exception e) {    }  }  return m_Matches;}  }
class C{  @Override public void updateObject(int columnIndex,Object x,int scale) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + columnIndex + ", x, "+ scale+ ");");    }    update(columnIndex,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public MapContent(Reader content) throws IOException {  this(new JSONParser().parse(content));}  }
class C{  public static int copyStream(InputStream sourceStream,OutputStream destinationStream) throws IOException {  int bytesRead=0;  int totalBytes=0;  byte[] buffer=new byte[1024];  while (bytesRead >= 0) {    bytesRead=sourceStream.read(buffer,0,buffer.length);    if (bytesRead > 0) {      destinationStream.write(buffer,0,bytesRead);    }    totalBytes+=bytesRead;  }  destinationStream.flush();  destinationStream.close();  return totalBytes;}  }
class C{  public boolean isSpinning(){  if (isSpinning) {    return true;  } else {    return false;  }}  }
class C{  public JRadioButton(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  public static void closeResource(Object resource){  if (resource == null) {    return;  }  try {    if (resource instanceof HttpURLConnection) {      ((HttpURLConnection)resource).disconnect();    } else     if (resource instanceof Closeable) {      ((Closeable)resource).close();    } else     if (resource instanceof Connection) {      ((Connection)resource).close();    } else     if (resource instanceof PreparedStatement) {      ((PreparedStatement)resource).close();    } else {      Timber.w("Unable to close object: %s",resource.getClass().getSimpleName());    }  } catch (  Exception e) {    Timber.e(e,"Error closing resources of type: %s",resource.getClass().getSimpleName());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addPackage(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  final List<LauncherActivityInfoCompat> matches=launcherApps.getActivityList(packageName,user);  for (  LauncherActivityInfoCompat info : matches) {    add(new AppInfo(context,info,user,mIconCache));  }}  }
class C{  public boolean verify(String hostname,javax.net.ssl.SSLSession session){  return (true);}  }
class C{  String sourceFormForInitializer(AnnotationValue annotationValue,ProcessingEnvironment processingEnv,String memberName,Element context){  SourceFormVisitor visitor=new InitializerSourceFormVisitor(processingEnv,memberName,context);  StringBuilder sb=new StringBuilder();  visitor.visit(annotationValue,sb);  return sb.toString();}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public final void testSetEditText(){  EditText editText=new EditText(getContext());  EqualValidator equalValidator=new EqualValidator("foo",new EditText(getContext()));  equalValidator.setEditText(editText);  assertEquals(editText,equalValidator.getEditText());}  }
class C{  public void addLeaf(String name,String path){  NamedIcon icon=NamedIcon.getIconByName(path);  if (icon == null) {    log.warn("path \"" + path + "\" is not a NamedIcon.");    return;  }  int h=icon.getIconHeight();  for (int i=0; i < _leaves.size(); i++) {    CatalogTreeLeaf leaf=_leaves.get(i);    if (h < leaf.getSize()) {      _leaves.add(i + 1,new CatalogTreeLeaf(name,path,h));      return;    }  }  _leaves.add(new CatalogTreeLeaf(name,path,h));}  }
class C{  private boolean useRelation(Relation rel,RelationReference ref){  if (rel.getLeftCardinality() != Cardinality.MANY && rel.getRightCardinality() != Cardinality.MANY) {    return ref.getDirection() == RelationDirection.LEFT_TO_RIGHT;  } else   if (rel.getLeftCardinality() != Cardinality.MANY) {    return ref.getDirection() == RelationDirection.RIGHT_TO_LEFT;  } else   if (rel.getRightCardinality() != Cardinality.MANY) {    return ref.getDirection() == RelationDirection.LEFT_TO_RIGHT;  } else {    return false;  }}  }
class C{  public void testSameObject(){  String value1="12378246728727834290276457386374882976782849";  String value2="-5634562095872038262928728727834290276457386374882976782849";  BigInteger aNumber1=new BigInteger(value1);  BigInteger aNumber2=new BigInteger(value2);  int code1=aNumber1.hashCode();  aNumber1.add(aNumber2).shiftLeft(125);  aNumber1.subtract(aNumber2).shiftRight(125);  aNumber1.multiply(aNumber2).toByteArray();  aNumber1.divide(aNumber2).bitLength();  aNumber1.gcd(aNumber2).pow(7);  int code2=aNumber1.hashCode();  assertTrue("hash codes for the same object differ",code1 == code2);}  }
class C{  public void serializeAsField(Object bean,JsonGenerator jgen,SerializerProvider prov) throws Exception {  Object value=get(bean);  if (value == null) {    if (!_suppressNulls) {      jgen.writeFieldName(_name);      prov.defaultSerializeNull(jgen);    }    return;  }  if (value == bean) {    _reportSelfReference(bean);  }  if (_suppressableValue != null && _suppressableValue.equals(value)) {    return;  }  JsonSerializer<Object> ser=_serializer;  if (ser == null) {    Class<?> cls=value.getClass();    PropertySerializerMap map=_dynamicSerializers;    ser=map.serializerFor(cls);    if (ser == null) {      ser=_findAndAddDynamic(map,cls,prov);    }  }  jgen.writeFieldName(_name);  if (_typeSerializer == null) {    ser.serialize(value,jgen,prov);  } else {    ser.serializeWithType(value,jgen,prov,_typeSerializer);  }}  }
class C{  public void fireAnnotationMoved(WorkflowAnnotation anno){  List<WorkflowAnnotation> list=new LinkedList<>();  list.add(anno);  fireAnnotationsMoved(list);}  }
class C{  protected void startTransactionTimer(){  if (this.transactionTimerStarted.compareAndSet(false,true)) {    TimerTask myTimer=new TransactionTimer();    if (sipStack.getTimer() != null) {      sipStack.getTimer().schedule(myTimer,BASE_TIMER_INTERVAL,BASE_TIMER_INTERVAL);    }  }}  }
class C{  public ExportAllDBTables(){  super();  try {    init();  } catch (  AdeException e) {    logger.error("Problem in initialization: " + e);  }}  }
class C{  @Override public boolean equals(final Object obj){  if (!(obj instanceof GitVersion)) {    return false;  }  GitVersion other=(GitVersion)obj;  if (compareTo(other) != 0) {    return false;  }  if (myType == Type.UNDEFINED || other.myType == Type.UNDEFINED) {    return true;  }  return myType == other.myType;}  }
class C{  private void disableIndexForm(){  editIndexIndex=-1;  indexName.setText("");  indexType.setText("");  selectedColumns.removeAll();  indexName.setEnabled(false);  indexType.setEnabled(false);  selectedColumns.setEnabled(false);  delIndex.setEnabled(false);  indexAddButton.setEnabled(false);  indexRemoveButton.setEnabled(false);  indexUpButton.setEnabled(false);  indexDownButton.setEnabled(false);}  }
class C{  public MicroPipelineShutdownResponse(final String pipelineId,final MicroPipelineShutdownState state,final String msg){  this.pipelineId=pipelineId;  this.state=state;  this.message=msg;}  }
class C{  private void validate(){  mInvalid=false;  for (int x=0; x < mRanges.size(); x++) {    if (!mRanges.get(x).isValid()) {      mInvalid=true;    }    for (int y=x + 1; y < mRanges.size(); y++) {      if (mRanges.get(x).overlaps(mRanges.get(y))) {        mInvalid=true;      }    }  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TANNOTATION___HAS_STRING_ARGUMENT__STRING:    return hasStringArgument((String)arguments.get(0));case TypesPackage.TANNOTATION___GET_ANNOTATION_AS_STRING:  return getAnnotationAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public static CCTMXTiledMap tiledMap(String tmxFile){  return new CCTMXTiledMap(tmxFile);}  }
class C{  @Nullable @ObjectiveCName("removeContactCommandWithUid:") public Command<Boolean> removeContact(int uid){  return modules.getContactsModule().removeContact(uid);}  }
class C{  public void invokeAndWait(Runnable task){  if (roomLock.isHeldByCurrentThread()) {    if (cachedRunnables == null) {      cachedRunnables=new ArrayList<Runnable>();    }    cachedRunnables.add(task);  } else {    roomLock.lock();    try {      cachedRunnables=null;      if (!closed) {        task.run();      }      if (cachedRunnables != null) {        for (int i=0; i < cachedRunnables.size(); i++) {          if (!closed) {            cachedRunnables.get(i).run();          }        }        cachedRunnables=null;      }    }  finally {      roomLock.unlock();    }  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'USER' ("+ "'LAST_NAME' TEXT,"+ "'FIRST_NAME' TEXT,"+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.205 -0400",hash_original_method="7CC795373BAAA161D6C74B697A2C20C3",hash_generated_method="A16FA759FDFFBE5E34A3BB7282B982DE") public LockableFileWriter(File file,String encoding,boolean append,String lockDir) throws IOException {  this(file,Charsets.toCharset(encoding),append,lockDir);}  }
class C{  public void testMoveDirectorySourceParentRootDestinationMissingPartially() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW,dir),null);  create(igfs,paths(DIR_NEW),null);  igfs.rename(dir,SUBDIR_NEW);  checkExist(igfs,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,dir);}  }
class C{  public void clear(){  clear(DEFAULT_CLEAR_COLOR);}  }
class C{  public static int[] extractArcs(ASN1ObjectIdentifier oid) throws InvalidObjectIdException {  String oidStr=oid.getId();  StringTokenizer strTokCnt=new StringTokenizer(oidStr,".",false);  int arcCount=strTokCnt.countTokens();  StringTokenizer strTok=new StringTokenizer(oidStr,".",true);  boolean expectDelimiter=false;  int[] arcs=new int[arcCount];  int i=0;  while (strTok.hasMoreTokens()) {    String token=strTok.nextToken();    if (expectDelimiter && (!token.equals(".") || !strTok.hasMoreTokens())) {      throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message"));    } else     if (!expectDelimiter) {      try {        arcs[i]=Integer.parseInt(token);        if (arcs[i] < 0) {          throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message"));        }        i++;      } catch (      NumberFormatException ex) {        throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message"));      }    }    expectDelimiter=!expectDelimiter;  }  return arcs;}  }
class C{  private boolean isOverridden(OutputNode node,Object value,Type type) throws Exception {  return factory.setOverride(type,value,node);}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public PosterOutputStream(){  super(256);}  }
class C{  public Drawable loadIcon(PackageManager pm){  return mService.loadIcon(pm);}  }
class C{  public ASN1Implicit(int tagNumber,ASN1Type type){  super(CLASS_CONTEXTSPECIFIC,tagNumber);  if ((type instanceof ASN1Choice) || (type instanceof ASN1Any)) {    throw new IllegalArgumentException("Implicit tagging can not be used for ASN.1 ANY or CHOICE type");  }  this.type=type;  if (type.checkTag(type.id)) {    if (type.checkTag(type.constrId)) {      taggingType=TAGGING_STRING;    } else {      taggingType=TAGGING_PRIMITIVE;    }  } else {    taggingType=TAGGING_CONSTRUCTED;  }}  }
class C{  public void testGetIndexedProperty(){  ArbitraryPropertySupport instance=(new UnboundBeanImpl()).aps();  assertEquals(null,instance.getIndexedProperty(NOT_A_PROPERTY,0));  assertEquals(OLD_VALUE,instance.getIndexedProperty(INDEXED_PROPERTY,0));  boolean outOfBounds=false;  try {    instance.getIndexedProperty(INDEXED_PROPERTY,1);  } catch (  IndexOutOfBoundsException ex) {    outOfBounds=true;  }  assertTrue(outOfBounds);  assertEquals(OLD_VALUE,instance.getIndexedProperty(MAPPED_INDEXED,0));  assertEquals(null,instance.getIndexedProperty(MAPPED_INDEXED,1));}  }
class C{  public ServerRuntimeException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public boolean isOpaque(){  return opaque;}  }
class C{  public void stopUsingGps(){  if (locationManager != null) {    locationManager.removeUpdates(GPSTracker.this);  }}  }
class C{  private PacketHeader readPacketHeader(int magicNumber) throws IOException {  int tsSec=is.readInt();  int tsUsec=is.readInt();  int inclLen=is.readInt();  int origLen=is.readInt();  if (magicNumber == 0xD4C3B2A1) {    tsSec=ByteOrderConverter.swap(tsSec);    tsUsec=ByteOrderConverter.swap(tsUsec);    inclLen=ByteOrderConverter.swap(inclLen);    origLen=ByteOrderConverter.swap(origLen);  }  return new PacketHeader(tsSec,tsUsec,inclLen,origLen);}  }
class C{  public static JSONObject HttpGet(String url,String bssid,HeaderPair... headers){  int port=EspProxyServerImpl.getInstance().getEspProxyServerPort();  return executeHttpRequest(url,port,METHOD_GET,bssid,null,false,headers);}  }
class C{  public int read(String name){  status=STATUS_OK;  try {    name=name.trim().toLowerCase();    if ((name.indexOf("file:") >= 0) || (name.indexOf(":/") > 0)) {      URL url=new URL(name);      in=new BufferedInputStream(url.openStream());    } else {      in=new BufferedInputStream(new FileInputStream(name));    }    status=read(in);  } catch (  IOException e) {    status=STATUS_OPEN_ERROR;  }  return status;}  }
class C{  public boolean hasDragOccured(){  return dragOccured;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static strictfp double minusPI_strict(final double angRad){  if (angRad < Math.PI / 2) {    return angRad - PI_LO - PI_HI;  } else {    return angRad - PI_HI - PI_LO;  }}  }
class C{  public static void addText(String v){  if (_state.length() == 0)   addState(v); else   addState("\n" + v);}  }
class C{  public void go(Writer writer) throws IOException {  go(new JCardWriter(writer,wrapInArray()));}  }
class C{  private void makeRequests(SSLSocketFactory socketFactory) throws IOException {  for (int i=0; i < 2; i++) {    fetch(socketFactory,"www.fortify.net",443,true,"/sslcheck.html",1,1,0,60);    fetch(socketFactory,"www.paypal.com",443,true,"/",1,1,0,60);    fetch(socketFactory,"www.yellownet.ch",443,true,"/",1,1,0,60);  }}  }
class C{  public int[] createFullArray(int length){  int[] fullSelection=new int[length];  for (int i=0; i < length; i++) {    fullSelection[i]=i;  }  return fullSelection;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.220 -0500",hash_original_method="6CB1D543D51D5DCA24055F8F53C41BAF",hash_generated_method="706330AC18A644D47A4038408E2797D5") @DSSink(DSSinkKind.DATABASE) public boolean putString(String value,int row,int column){  this.addTaint(value.getTaint());  return true;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer seriesRenderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  int start=0;  if (startIndex > 0) {    start=2;  }  for (int i=start; i < length; i+=4) {    if (points.size() > i + 3) {      float xMin=points.get(i);      float yMin=points.get(i + 1);      float xMax=points.get(i + 2);      float yMax=points.get(i + 3);      drawBar(canvas,xMin,yMin,xMax,yMax,halfDiffX,seriesNr,seriesIndex,paint);    }  }  paint.setColor(seriesRenderer.getColor());}  }
class C{  public ScrambledZipfianGenerator(long min,long max,double _zipfianconstant){  _min=min;  _max=max;  _itemcount=_max - _min + 1;  if (_zipfianconstant == USED_ZIPFIAN_CONSTANT) {    gen=new ZipfianGenerator(0,ITEM_COUNT,_zipfianconstant,ZETAN);  } else {    gen=new ZipfianGenerator(0,ITEM_COUNT,_zipfianconstant);  }}  }
class C{  public SimpleBooleanProperty repeatProperty(){  return this.repeat;}  }
class C{  public static File normalize(String name,File input){  File outputFile;  if (Options.getDir() == null)   if (input == null || input.getParent() == null)   outputFile=new File(name); else   outputFile=new File(input.getParent(),name); else   outputFile=new File(Options.getDir(),name);  if (outputFile.exists() && !Options.no_backup) {    File backup=new File(outputFile.toString() + "~");    if (backup.exists())     backup.delete();    if (outputFile.renameTo(backup))     Out.println("Old file \"" + outputFile + "\" saved as \""+ backup+ "\""); else     Out.println("Couldn't save old file \"" + outputFile + "\", overwriting!");  }  return outputFile;}  }
class C{  public boolean isChecked(){  return isChecked;}  }
class C{  public int add(int[] slab,int slabPos,int slabMask,int slabLength,byte[] blob,int blobPos,int blobMask,int blobLength){  int i=bloomSeeds.length;  int seen=1;  while (--i >= 0) {    int seed=bloomSeeds[i];    int slabHash=MurmurHash.hash32(slab,slabPos,slabLength,slabMask,seed);    int blobHash=MurmurHash.hash32(blob,blobPos,blobLength,blobMask,seed);    seen=updateBloom(bloom,bloomMask,seen,MurmurHash.hash32(slabHash,blobHash,seed));  }  return seen;}  }
class C{  private void fields(Class type){  Field[] list=type.getDeclaredFields();  for (  Field field : list) {    FieldDetail detail=new FieldDetail(field);    fields.add(detail);  }}  }
class C{  void groupDatasetSubtypes(){  List<String> occurrenceKeys=new LinkedList<String>();  for (  DatasetSubtype type : DatasetSubtype.OCCURRENCE_DATASET_SUBTYPES) {    occurrenceKeys.add(type.name().replaceAll("_","").toLowerCase());  }  occurrenceSubtypeKeys=Collections.unmodifiableList(occurrenceKeys);  List<String> checklistKeys=new LinkedList<String>();  for (  DatasetSubtype type : DatasetSubtype.CHECKLIST_DATASET_SUBTYPES) {    checklistKeys.add(type.name().replaceAll("_","").toLowerCase());  }  checklistSubtypeKeys=Collections.unmodifiableList(checklistKeys);}  }
class C{  public ProfilerEvent(byte eventType,String hostName,String catalog,long connectionId,int statementId,int resultSetId,long eventCreationTime,long eventDuration,String durationUnits,String eventCreationPointDesc,String eventCreationPoint,String message){  this.eventType=eventType;  this.connectionId=connectionId;  this.statementId=statementId;  this.resultSetId=resultSetId;  this.eventCreationTime=eventCreationTime;  this.eventDuration=eventDuration;  this.durationUnits=durationUnits;  this.eventCreationPointDesc=eventCreationPointDesc;  this.message=message;}  }
class C{  private void writeFieldEntry(FieldInfo field,DocValuesType type) throws IOException {  SimpleTextUtil.write(data,FIELD);  SimpleTextUtil.write(data,field.name,scratch);  SimpleTextUtil.writeNewline(data);  SimpleTextUtil.write(data,TYPE);  SimpleTextUtil.write(data,type.toString(),scratch);  SimpleTextUtil.writeNewline(data);}  }
class C{  public int hashCode(){  return uri.hashCode();}  }
class C{  public static Instance convertInstance(Instance x,int L,Instances template){  Instance x_=(Instance)x.copy();  x_.setDataset(null);  for (int i=0; i < L; i++)   x_.deleteAttributeAt(0);  x_.insertAttributeAt(0);  x_.setDataset(template);  return x_;}  }
class C{  private void calculatePath(){  mAboveWavePath.reset();  mBlowWavePath.reset();  getWaveOffset();  float y;  mAboveWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mAboveOffset) + mWaveHeight);    mAboveWavePath.lineTo(x,y);  }  mAboveWavePath.lineTo(right,bottom);  mBlowWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mBlowOffset) + mWaveHeight);    mBlowWavePath.lineTo(x,y);  }  mBlowWavePath.lineTo(right,bottom);}  }
class C{  @Override void decode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;  }  for (int i=0; i < inAvail; i++) {    final byte[] buffer=ensureBufferSize(decodeSize,context);    final byte b=in[inPos++];    if (b == PAD) {      context.eof=true;      break;    } else {      if (b >= 0 && b < DECODE_TABLE.length) {        final int result=DECODE_TABLE[b];        if (result >= 0) {          context.modulus=(context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;          context.ibitWorkArea=(context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;          if (context.modulus == 0) {            buffer[context.pos++]=(byte)((context.ibitWorkArea >> 16) & MASK_8BITS);            buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);            buffer[context.pos++]=(byte)(context.ibitWorkArea & MASK_8BITS);          }        }      }    }  }  if (context.eof && context.modulus != 0) {    final byte[] buffer=ensureBufferSize(decodeSize,context);switch (context.modulus) {case 1:      break;case 2:    context.ibitWorkArea=context.ibitWorkArea >> 4;  buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;case 3:context.ibitWorkArea=context.ibitWorkArea >> 2;buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}}}  }
class C{  public static void delete(File file,StringBuilder failures){  if (!file.exists())   return;  if (file.isDirectory()) {    for (    File child : listFiles(file)) {      delete(child,failures);    }  }  try {    Files.delete(file.toPath());  } catch (  IOException e) {    if (failures != null) {      failures.append("Could not delete ").append(file).append(" due to ").append(e.getMessage()).append('\n');    }  }}  }
class C{  public TreeSet(SortedSet<E> s){  this(s.comparator());  addAll(s);}  }
class C{  public void invalidateVisualState(){  for (  BinderAnchor arg : this.args) {    arg.invalidateVisualState();  }  this.res.invalidateVisualState();}  }
class C{  private void tryToGrantUriPermissionToStackServices(Uri file){  if (!ContentResolver.SCHEME_CONTENT.equals(file.getScheme())) {    return;  }  Intent fileTransferServiceIntent=new Intent(IImageSharingService.class.getName());  List<ResolveInfo> stackServices=mCtx.getPackageManager().queryIntentServices(fileTransferServiceIntent,0);  for (  ResolveInfo stackService : stackServices) {    mCtx.grantUriPermission(stackService.serviceInfo.packageName,file,Intent.FLAG_GRANT_READ_URI_PERMISSION);  }}  }
class C{  public StackedXYBarRenderer(double margin){  super(margin);  this.renderAsPercentages=false;  ItemLabelPosition p=new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER);  setBasePositiveItemLabelPosition(p);  setBaseNegativeItemLabelPosition(p);  setPositiveItemLabelPositionFallback(null);  setNegativeItemLabelPositionFallback(null);}  }
class C{  private void writeEntryAndProcessor(MutableEntry entry,BinaryRawWriterEx writer){  writer.writeObject(entry.getKey());  writer.writeObject(entry.getValue());  if (ptr != 0) {    writer.writeBoolean(true);    writer.writeLong(ptr);  } else {    writer.writeBoolean(false);    writer.writeObject(proc);  }}  }
class C{  public static double lag1(DoubleArrayList data,double mean){  int size=data.size();  double[] elements=data.elements();  double r1;  double q=0;  double v=(elements[0] - mean) * (elements[0] - mean);  for (int i=1; i < size; i++) {    double delta0=(elements[i - 1] - mean);    double delta1=(elements[i] - mean);    q+=(delta0 * delta1 - q) / (i + 1);    v+=(delta1 * delta1 - v) / (i + 1);  }  r1=q / v;  return r1;}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.322 -0500",hash_original_method="BBEF4BC19B4322B516FB3983E945CAF6",hash_generated_method="F197DE3582D7DA20C6044E50A654B0C1") public boolean isEnabled(){  return getBooleanProperty(PROPERTY_ENABLED);}  }
class C{  public INode remove(){  throw new IllegalStateException("No semantic meaning associated with default remove operation on ClosedStates.");}  }
class C{  public DataPanel(String title){  setLayout(new BorderLayout());  positionSer=new XYSeries("True Position");  XYSeriesCollection dataset1=new XYSeriesCollection(positionSer);  JFreeChart chart=ChartFactory.createTimeSeriesChart("Position","Time (seconds)","Angle (degrees)",dataset1,true,true,false);  plot=(XYPlot)chart.getPlot();  plot.setRenderer(1,new DefaultXYItemRenderer());  plot.mapDatasetToRangeAxis(1,1);  ValueAxis axis=plot.getDomainAxis();  axis.setAutoRange(true);  axis.setFixedAutoRange(20000.0);  ChartUtilities.applyCurrentTheme(chart);  ChartPanel chartPanel=new ChartPanel(chart);  chartPanel.setPreferredSize(new java.awt.Dimension(500,270));  exportXlsBtn.setActionCommand("EXPORT_XLS");  exportCsvBtn.setActionCommand("EXPORT_CSV");  exportXlsBtn.addActionListener(this);  exportCsvBtn.addActionListener(this);  JPanel exportPanel=new JPanel();  exportPanel.add(exportXlsBtn);  exportPanel.add(exportCsvBtn);  JPanel mainPanel=new JPanel(new BorderLayout());  mainPanel.add(chartPanel);  mainPanel.add(exportPanel,BorderLayout.SOUTH);  add(mainPanel);}  }
class C{  void push(Operand r,TypeReference type){  if (VM.VerifyAssertions)   opt_assert(r.instruction == null);  if (type.isVoidType()) {    return;  }  if (type.isLongType() || type.isDoubleType()) {    pushDual(r);  } else {    push(r);  }}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  timeSeries.sort();  functionValueMap.add(this,timeSeries.getValue(timeSeries.size() - 1));}  }
class C{  public static void isEmpty(Map<?,?> str,String message,Object... params) throws AssertException {  if (CommonUtil.isNotEmpty(str)) {    throw new AssertException(ErrorCodeDef.NOT_NULL_20005,message,params);  }}  }
class C{  public int findSpan(float u){  if (u >= knots[n + 1]) {    return n;  }  int low=degree;  int high=n + 1;  int mid=(low + high) / 2;  while ((u < knots[mid] || u >= knots[mid + 1]) && low < high) {    if (u < knots[mid]) {      high=mid;    } else {      low=mid;    }    mid=(low + high) / 2;  }  return mid;}  }
class C{  public synchronized void removeDatabaseObject(Session session,DbObject obj){  String objName=obj.getName();  int type=obj.getType();  HashMap<String,DbObject> map=getMap(type);  if (SysProperties.CHECK && !map.containsKey(objName)) {    DbException.throwInternalError("not found: " + objName);  }  map.remove(objName);}  }
class C{  private Dominators(SsaMethod meth,DomFront.DomInfo[] domInfos,boolean postdom){  this.meth=meth;  this.domInfos=domInfos;  this.postdom=postdom;  this.blocks=meth.getBlocks();  this.info=new DFSInfo[blocks.size() + 2];  this.vertex=new ArrayList<SsaBasicBlock>();}  }
class C{  public static int parseInt(FXGNode node,String value,String name){  try {    return Integer.parseInt(value);  } catch (  NumberFormatException e) {    throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidIntegerValue",name,value);  }}  }
class C{  private void shortcutDocIdsToLoad(SearchContext context){  if (context.request().scroll() != null) {    TopDocs topDocs=context.queryResult().topDocs();    int[] docIdsToLoad=new int[topDocs.scoreDocs.length];    for (int i=0; i < topDocs.scoreDocs.length; i++) {      docIdsToLoad[i]=topDocs.scoreDocs[i].doc;    }    context.docIdsToLoad(docIdsToLoad,0,docIdsToLoad.length);  } else {    TopDocs topDocs=context.queryResult().topDocs();    if (topDocs.scoreDocs.length < context.from()) {      context.docIdsToLoad(EMPTY_DOC_IDS,0,0);      return;    }    int totalSize=context.from() + context.size();    int[] docIdsToLoad=new int[Math.min(topDocs.scoreDocs.length - context.from(),context.size())];    int counter=0;    for (int i=context.from(); i < totalSize; i++) {      if (i < topDocs.scoreDocs.length) {        docIdsToLoad[counter]=topDocs.scoreDocs[i].doc;      } else {        break;      }      counter++;    }    context.docIdsToLoad(docIdsToLoad,0,counter);  }}  }
class C{  public boolean doApplyRecoverPointTag(final StorageSystem storageSystem,Volume volume,boolean flag) throws Exception {  boolean tagSet=false;  if (volume != null && storageSystem != null && volume.checkForRp() && storageSystem.getSystemType() != null && storageSystem.getSystemType().equalsIgnoreCase(DiscoveredDataObject.Type.vmax.toString()) && !storageSystem.checkIfVmax3()) {    List<CIMObjectPath> volumePathList=new ArrayList<CIMObjectPath>();    volumePathList.add(_cimPath.getBlockObjectPath(storageSystem,volume));    _log.info(String.format("Volume [%s](%s) will be %s for RP",volume.getLabel(),volume.getId(),(flag ? "tagged" : "untagged")));    tagSet=setRecoverPointTag(storageSystem,volumePathList,flag);  } else {    _log.info(String.format("Volume [%s](%s) is not valid for RP tagging operation",volume.getLabel(),volume.getId()));    tagSet=true;  }  return tagSet;}  }
class C{  public static long encodeZigZag64(final long n){  return (n << 1) ^ (n >> 63);}  }
class C{  public void parsePositions(String prefix,Properties props){  prefix=PropUtils.getScopedPropertyPrefix(prefix);  for (int index=1; index > 0 && index < 126; index++) {    String entry=props.getProperty(prefix + Integer.toString(index));    if (entry != null) {      addPositionChoice(index,entry,prefix,props);    } else {      index=-1;    }  }}  }
class C{  public void testMoveRenameDirectoryDestinationRootSourceMissing() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR.name());  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR),null);  create(igfs,null,null);  igfs.rename(SUBSUBDIR,dir);  checkExist(igfs,DIR,SUBDIR);  checkExist(igfs,igfsSecondary,dir);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public NotImplementedException(final String message,final String code){  super(message);  this.code=code;}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public ColumnArrangement(){}  }
class C{  public int compare(BigdataValue term1,BigdataValue term2){  final IV iv1=term1.getIV();  final IV iv2=term2.getIV();  return iv1.compareTo(iv2);}  }
class C{  public DelphiAST(){}  }
class C{  public ImagePortrayal3D(Class c,String resourceName,boolean oriented,boolean opaque){  this(new ImageIcon(c.getResource(resourceName)),oriented,opaque);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  private void updateOnlineConfig(){  if (deviceHelper.isNetworkAvailable()) {    PostResult post=NetworkHelper.updateConfig(getOnlineConfigUrl(),getAppKey());    if (post != null && post.isSuccess()) {      parseResponseData(post.getResponseMsg());    } else {      Ln.e("error","==" + post.getResponseMsg());    }  } else {    Ln.e("updateOnlineConfigs error ==>>","network error or appkey is null");  }}  }
class C{  protected void doRelease(){  size=0;}  }
class C{  protected boolean includeAuthorityInRequestLine(){  return connection == null ? policy.usingProxy() : connection.getRoute().getProxy().type() == Proxy.Type.HTTP;}  }
class C{  private Object readValue(ByteBuffer buff){  int type=buff.get() & 255;switch (type) {case Value.NULL:    return ValueNull.INSTANCE;case BOOLEAN_TRUE:  return ValueBoolean.get(true);case BOOLEAN_FALSE:return ValueBoolean.get(false);case INT_NEG:return ValueInt.get(-readVarInt(buff));case Value.INT:return ValueInt.get(readVarInt(buff));case LONG_NEG:return ValueLong.get(-readVarLong(buff));case Value.LONG:return ValueLong.get(readVarLong(buff));case Value.BYTE:return ValueByte.get(buff.get());case Value.SHORT:return ValueShort.get(buff.getShort());case DECIMAL_0_1:return ValueDecimal.ZERO;case DECIMAL_0_1 + 1:return ValueDecimal.ONE;case DECIMAL_SMALL_0:return ValueDecimal.get(BigDecimal.valueOf(readVarLong(buff)));case DECIMAL_SMALL:{int scale=readVarInt(buff);return ValueDecimal.get(BigDecimal.valueOf(readVarLong(buff),scale));}case Value.DECIMAL:{int scale=readVarInt(buff);int len=readVarInt(buff);byte[] buff2=DataUtils.newBytes(len);buff.get(buff2,0,len);BigInteger b=new BigInteger(buff2);return ValueDecimal.get(new BigDecimal(b,scale));}case Value.DATE:{return ValueDate.fromDateValue(readVarLong(buff));}case Value.TIME:{long nanos=readVarLong(buff) * 1000000 + readVarLong(buff);return ValueTime.fromNanos(nanos);}case Value.TIMESTAMP:{long dateValue=readVarLong(buff);long nanos=readVarLong(buff) * 1000000 + readVarLong(buff);return ValueTimestamp.fromDateValueAndNanos(dateValue,nanos);}case Value.TIMESTAMP_TZ:{long dateValue=readVarLong(buff);long nanos=readVarLong(buff) * 1000000 + readVarLong(buff);short tz=(short)readVarInt(buff);return ValueTimestampTimeZone.fromDateValueAndNanos(dateValue,nanos,tz);}case Value.BYTES:{int len=readVarInt(buff);byte[] b=DataUtils.newBytes(len);buff.get(b,0,len);return ValueBytes.getNoCopy(b);}case Value.JAVA_OBJECT:{int len=readVarInt(buff);byte[] b=DataUtils.newBytes(len);buff.get(b,0,len);return ValueJavaObject.getNoCopy(null,b,handler);}case Value.UUID:return ValueUuid.get(buff.getLong(),buff.getLong());case Value.STRING:return ValueString.get(readString(buff));case Value.STRING_IGNORECASE:return ValueStringIgnoreCase.get(readString(buff));case Value.STRING_FIXED:return ValueStringFixed.get(readString(buff));case FLOAT_0_1:return ValueFloat.get(0);case FLOAT_0_1 + 1:return ValueFloat.get(1);case DOUBLE_0_1:return ValueDouble.get(0);case DOUBLE_0_1 + 1:return ValueDouble.get(1);case Value.DOUBLE:return ValueDouble.get(Double.longBitsToDouble(Long.reverse(readVarLong(buff))));case Value.FLOAT:return ValueFloat.get(Float.intBitsToFloat(Integer.reverse(readVarInt(buff))));case Value.BLOB:case Value.CLOB:{int smallLen=readVarInt(buff);if (smallLen >= 0) {byte[] small=DataUtils.newBytes(smallLen);buff.get(small,0,smallLen);return ValueLobDb.createSmallLob(type,small);} else if (smallLen == -3) {int tableId=readVarInt(buff);long lobId=readVarLong(buff);long precision=readVarLong(buff);ValueLobDb lob=ValueLobDb.create(type,handler,tableId,lobId,null,precision);return lob;} else {throw DbException.get(ErrorCode.FILE_CORRUPTED_1,"lob type: " + smallLen);}}case Value.ARRAY:{int len=readVarInt(buff);Value[] list=new Value[len];for (int i=0; i < len; i++) {list[i]=(Value)readValue(buff);}return ValueArray.get(list);}case Value.RESULT_SET:{SimpleResultSet rs=new SimpleResultSet();rs.setAutoClose(false);int columns=readVarInt(buff);for (int i=0; i < columns; i++) {rs.addColumn(readString(buff),readVarInt(buff),readVarInt(buff),readVarInt(buff));}while (true) {if (buff.get() == 0) {break;}Object[] o=new Object[columns];for (int i=0; i < columns; i++) {o[i]=((Value)readValue(buff)).getObject();}rs.addRow(o);}return ValueResultSet.get(rs);}case Value.GEOMETRY:{int len=readVarInt(buff);byte[] b=DataUtils.newBytes(len);buff.get(b,0,len);return ValueGeometry.get(b);}case SPATIAL_KEY_2D:return getSpatialDataType().read(buff);default :if (type >= INT_0_15 && type < INT_0_15 + 16) {return ValueInt.get(type - INT_0_15);} else if (type >= LONG_0_7 && type < LONG_0_7 + 8) {return ValueLong.get(type - LONG_0_7);} else if (type >= BYTES_0_31 && type < BYTES_0_31 + 32) {int len=type - BYTES_0_31;byte[] b=DataUtils.newBytes(len);buff.get(b,0,len);return ValueBytes.getNoCopy(b);} else if (type >= STRING_0_31 && type < STRING_0_31 + 32) {return ValueString.get(readString(buff,type - STRING_0_31));}throw DbException.get(ErrorCode.FILE_CORRUPTED_1,"type: " + type);}}  }
class C{  public static ValueLobDb create(int type,DataHandler handler,int tableId,long id,byte[] hmac,long precision){  return new ValueLobDb(type,handler,tableId,id,hmac,precision);}  }
class C{  public static boolean isValidValue(JsonReader in) throws IOException {  if (in.peek() == JsonToken.NULL) {    in.skipValue();    return false;  }  return true;}  }
class C{  private boolean launchDefaultSearch(){  final Callback cb=getCallback();  if (cb == null || isDestroyed()) {    return false;  } else {    sendCloseSystemWindows("search");    return cb.onSearchRequested();  }}  }
class C{  private static int flushBuffer(Writer out,char[] buffer,int bufferIndex) throws IOException {  if (bufferIndex > 0) {    out.write(buffer,0,bufferIndex);  }  return 0;}  }
class C{  public void testLongConversionAndOrdering() throws Exception {  BytesRef previous=null;  BytesRef current=new BytesRef(new byte[Long.BYTES]);  for (long value=-100000L; value < 100000L; value++) {    NumericUtils.longToSortableBytes(value,current.bytes,current.offset);    if (previous == null) {      previous=new BytesRef(new byte[Long.BYTES]);    } else {      assertTrue("current bigger than previous: ",previous.compareTo(current) < 0);    }    assertEquals("forward and back conversion should generate same long",value,NumericUtils.sortableBytesToLong(current.bytes,current.offset));    System.arraycopy(current.bytes,current.offset,previous.bytes,previous.offset,current.length);  }}  }
class C{  public void addHeader(String name,String originalValue){  String value;  if (name.equalsIgnoreCase("set-cookie")) {    value=rewriteSetCookie(originalValue);  } else {    value=originalValue;  }  super.addHeader(name,value);}  }
class C{  public boolean isNfsSupported(){  return nfsSupported;}  }
class C{  private boolean isStatus(final Integer... states){  return (this.status != null && Arrays.asList(defaultToUnknownStateIfNull(states)).contains(this.status.state));}  }
class C{  private static BitMatrix encodeLowLevel(DefaultPlacement placement,SymbolInfo symbolInfo){  int symbolWidth=symbolInfo.getSymbolDataWidth();  int symbolHeight=symbolInfo.getSymbolDataHeight();  ByteMatrix matrix=new ByteMatrix(symbolInfo.getSymbolWidth(),symbolInfo.getSymbolHeight());  int matrixY=0;  for (int y=0; y < symbolHeight; y++) {    int matrixX;    if ((y % symbolInfo.matrixHeight) == 0) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,(x % 2) == 0);        matrixX++;      }      matrixY++;    }    matrixX=0;    for (int x=0; x < symbolWidth; x++) {      if ((x % symbolInfo.matrixWidth) == 0) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrix.set(matrixX,matrixY,placement.getBit(x,y));      matrixX++;      if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {        matrix.set(matrixX,matrixY,(y % 2) == 0);        matrixX++;      }    }    matrixY++;    if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrixY++;    }  }  return convertByteMatrixToBitMatrix(matrix);}  }
class C{  void complete(){  if (syntheticParams != null) {    return;  }  boolean inInterface=translatedSym.owner.isInterface();  boolean thisReferenced=!getSymbolMap(CAPTURED_THIS).isEmpty();  translatedSym.flags_field=SYNTHETIC | LAMBDA_METHOD | PRIVATE| (thisReferenced ? (inInterface ? DEFAULT : 0) : STATIC);  ListBuffer<JCVariableDecl> params=new ListBuffer<>();  for (  Symbol thisSym : getSymbolMap(CAPTURED_VAR).values()) {    params.append(make.VarDef((VarSymbol)thisSym,null));  }  for (  Symbol thisSym : getSymbolMap(PARAM).values()) {    params.append(make.VarDef((VarSymbol)thisSym,null));  }  syntheticParams=params.toList();  translatedSym.name=isSerializable() ? serializedLambdaName() : lambdaName();  translatedSym.type=types.createMethodTypeWithParameters(generatedLambdaSig(),TreeInfo.types(syntheticParams));}  }
class C{  public static BartenderSystem createAndAddSystem(BartenderBuilder builder){  BartenderSystemFull systemBartender=new BartenderSystemFull(builder);  SystemManager system=preCreate(BartenderSystem.class);  system.addSystem(BartenderSystem.class,systemBartender);  return systemBartender;}  }
class C{  public double distance(MyPoint myPoint){  return Math.sqrt(Math.pow(myPoint.getX() - x,2) + Math.pow(myPoint.getY() - y,2));}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  startElement(elementNamespaceURI,elementLocalName,elementName,null);}  }
class C{  default URI historyAdded(){  return RDRHistory.Vocab.ADDED;}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  CheckContext newctx=new CheckContext(ctx,this);  vset=reach(env,vset);  vset=expr.checkValue(env,newctx,vset,exp);  if (expr.type.equals(Type.tNull)) {    env.error(expr.where,"synchronized.null");  }  expr=convert(env,newctx,Type.tClass(idJavaLangObject),expr);  vset=body.check(env,newctx,vset,exp);  return ctx.removeAdditionalVars(vset.join(newctx.vsBreak));}  }
class C{  public static boolean isArrowpointAllowed(Object from,Object to,IKnowledge knowledge){  if (knowledge == null) {    return true;  }  return !knowledge.isRequired(to.toString(),from.toString()) && !knowledge.isForbidden(from.toString(),to.toString());}  }
class C{  public void addBeanContextServicesListener(BeanContextServicesListener bcsl){  if (bcsl == null)   throw new NullPointerException("bcsl");synchronized (bcsListeners) {    if (bcsListeners.contains(bcsl))     return; else     bcsListeners.add(bcsl);  }}  }
class C{  private CoordinateSequence extractCoords(OraGeom oraGeom,int elemIndex){  int start=oraGeom.startingOffset(elemIndex);  int end=oraGeom.startingOffset(elemIndex + 1);  return extractCoords(oraGeom,oraGeom.ordinates,start,end);}  }
class C{  public Element first(){switch (model.type) {case '*':case '?':case '|':case '&':    return null;case '+':  return model.first();case ',':{  ContentModel m=(ContentModel)model.content;  for (int i=0; i < value; i++, m=m.next)   ;  return m.first();}default :return model.first();}}  }
class C{  public static void openInBrowser(URL url){  try {    URI uri=url.toURI();    openInBrowser(uri);  } catch (  URISyntaxException e) {    throw new IllegalArgumentException("Invalid URL: " + url.toString(),e);  }}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    DProperties dProperties=new DProperties(frame,history);    dProperties.setLocationRelativeTo(frame);    dProperties.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public param addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  void updateValue(){  updateValue(null);}  }
class C{  public CPluginCriteriumCreator(final View2D view2D,final ICriteriaSelectionPlugin plugin){  m_view2D=view2D;  m_plugin=plugin;}  }
class C{  @Override protected void doPrintClassification(double[] dist,Instance inst,int index) throws Exception {  int prec=m_NumDecimals;  Instance withMissing=(Instance)inst.copy();  withMissing.setDataset(inst.dataset());  double predValue=0;  if (Utils.sum(dist) == 0) {    predValue=Utils.missingValue();  } else {    if (inst.classAttribute().isNominal()) {      predValue=Utils.maxIndex(dist);    } else {      predValue=dist[0];    }  }  append("" + (index + 1));  if (inst.dataset().classAttribute().isNumeric()) {    if (inst.classIsMissing()) {      append(m_Delimiter + "?");    } else {      append(m_Delimiter + Utils.doubleToString(inst.classValue(),prec));    }    if (Utils.isMissingValue(predValue)) {      append(m_Delimiter + "?");    } else {      append(m_Delimiter + Utils.doubleToString(predValue,prec));    }    if (Utils.isMissingValue(predValue) || inst.classIsMissing()) {      append(m_Delimiter + "?");    } else {      append(m_Delimiter + Utils.doubleToString(predValue - inst.classValue(),prec));    }  } else {    append(m_Delimiter + ((int)inst.classValue() + 1) + ":"+ inst.toString(inst.classIndex()));    if (Utils.isMissingValue(predValue)) {      append(m_Delimiter + "?");    } else {      append(m_Delimiter + ((int)predValue + 1) + ":"+ inst.dataset().classAttribute().value((int)predValue));    }    if (!Utils.isMissingValue(predValue) && !inst.classIsMissing() && ((int)predValue + 1 != (int)inst.classValue() + 1)) {      append(m_Delimiter + "+");    } else {      append(m_Delimiter + "");    }    if (m_OutputDistribution) {      if (Utils.isMissingValue(predValue)) {        append(m_Delimiter + "?");      } else {        append(m_Delimiter);        for (int n=0; n < dist.length; n++) {          if (n > 0) {            append(m_Delimiter);          }          if (n == (int)predValue) {            append("*");          }          append(Utils.doubleToString(dist[n],prec));        }      }    } else {      if (Utils.isMissingValue(predValue)) {        append(m_Delimiter + "?");      } else {        append(m_Delimiter + Utils.doubleToString(dist[(int)predValue],prec));      }    }  }  if (m_Attributes != null) {    append(m_Delimiter + attributeValuesString(withMissing));  }  append("\n");}  }
class C{  public <T>T createObject(Bundle bundle,Context context,String type){  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  String inputDataFile=null;  String whiteboxHeaderFile=null;  String whiteboxDataFile=null;  WhiteboxRaster output=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  String dataType="float";  String dataScale="rgb";  DataInputStream in=null;  BufferedReader br=null;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      File file=new File(fileName);      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String[] formatNames=ImageIO.getReaderFormatNames();      boolean checkForSupportedFormat=false;      for (      String str : formatNames) {        if (str.toLowerCase().equals(fileExtension)) {          checkForSupportedFormat=true;          break;        }      }      if (!checkForSupportedFormat) {        showFeedback("This image file format is not currently supported by this tool.");        return;      }      BufferedImage image=ImageIO.read(new File(fileName));      rows=image.getHeight();      cols=image.getWidth();      if (image.getColorModel().getPixelSize() == 24) {        dataType="float";        dataScale="rgb";      }      int dot=imageFiles[i].lastIndexOf(".");      String imageExtension=imageFiles[i].substring(dot + 1);      whiteboxHeaderFile=imageFiles[i].replace(imageExtension,"dep");      whiteboxDataFile=imageFiles[i].replace(imageExtension,"tas");      char[] extChars=imageExtension.toCharArray();      boolean worldFileFound=false;      String wfExtension=Character.toString(extChars[0]) + Character.toString(extChars[2]) + "w";      String worldFile=imageFiles[i].replace(imageExtension,wfExtension);      if ((new File(worldFile)).exists()) {        worldFileFound=true;      } else {        wfExtension=imageExtension + "w";        worldFile=imageFiles[i].replace(imageExtension,wfExtension);        if ((new File(worldFile)).exists()) {          worldFileFound=true;        } else {          wfExtension=".wld";          worldFile=imageFiles[i].replace(imageExtension,wfExtension);          if ((new File(worldFile)).exists()) {            worldFileFound=true;          }        }      }      if (worldFileFound) {        double A=0, B=0, C=0, D=0, E=0, F=0;        FileInputStream fstream=new FileInputStream(worldFile);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        int n=0;        while ((line=br.readLine()) != null) {switch (n) {case 0:            A=Double.parseDouble(line);          break;case 1:        D=Double.parseDouble(line);      break;case 2:    B=Double.parseDouble(line);  break;case 3:E=Double.parseDouble(line);break;case 4:C=Double.parseDouble(line);break;case 5:F=Double.parseDouble(line);break;}n++;}if (B == 0 && D == 0) {double west=A * 0 + B * 0 + C;double north=D * 0 + E * 0 + F;double east=A * (cols - 1) + B * (rows - 1) + C;double south=D * (cols - 1) + E * (rows - 1) + F;(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String byteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "greyscale.pal";out.println(str1);str1="NoData:\t-32768";out.println(str1);if (byteOrder.toLowerCase().contains("lsb") || byteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int z, r, g, b;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getRGB(col,row);r=(int)z & 0xFF;g=((int)z >> 8) & 0xFF;b=((int)z >> 16) & 0xFF;output.setValue(row,col,(double)((255 << 24) | (b << 16) | (g << 8)| r));}}output.findMinAndMaxVals();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();} else {showFeedback("We're sorry but Whitebox cannot currently handle the import of rotated images.");break;}} else {double west=0;double north=rows - 1;double east=cols - 1;double south=0;(new File(whiteboxHeaderFile)).delete();(new File(whiteboxDataFile)).delete();fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);String byteOrder=java.nio.ByteOrder.nativeOrder().toString();str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + dataType;out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\t" + dataScale;out.println(str1);str1="Preferred Palette:\t" + "greyscale.pal";out.println(str1);str1="NoData:\t-32768";out.println(str1);if (byteOrder.toLowerCase().contains("lsb") || byteOrder.toLowerCase().contains("little")) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);output=new WhiteboxRaster(whiteboxHeaderFile,"rw");int z, r, g, b;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=image.getRGB(col,row);r=(int)z & 0xFF;g=((int)z >> 8) & 0xFF;b=((int)z >> 16) & 0xFF;output.setValue(row,col,(double)((255 << 24) | (b << 16) | (g << 8)| r));}}output.findMinAndMaxVals();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.writeHeaderFile();output.close();returnData(whiteboxHeaderFile);}}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public BigIntPolynomial(IntegerPolynomial p){  coeffs=new BigInteger[p.coeffs.length];  for (int i=0; i < coeffs.length; i++) {    coeffs[i]=BigInteger.valueOf(p.coeffs[i]);  }}  }
class C{  public Clustering<Model> run(Relation<V> relation){  final DBIDs ids=relation.getDBIDs();  final int size=ids.size();  this.domain=RelationUtil.computeMinMax(relation);  this.dim=domain[0].length;  this.offset=new double[dim];  this.cells=new int[dim];  long numcells=computeGridBaseOffsets();  if (numcells > size) {    LOG.warning("The generated grid has more cells than data points. This may need excessive amounts of memory.");  } else   if (numcells == 1) {    LOG.warning("All data is in a single cell. This has degenerated to a non-indexed DBSCAN!");  } else   if (numcells <= dim * dim) {    LOG.warning("There are only " + numcells + " cells. This will likely be slower than regular DBSCAN!");  }  buildGrid(relation,(int)numcells,offset);  if (grid.size() <= dim) {    LOG.warning("There are only " + grid.size() + " occupied cells. This will likely be slower than regular DBSCAN!");  }  int mincells=checkGridCellSizes(size,numcells);  clusterids=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_TEMP,Assignment.class);  temporary=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_TEMP,UNPROCESSED);  final ArrayModifiableDBIDs activeSet=DBIDUtil.newArray();  int clusterid=NOISE + 1;  this.cores=new Core[2];  this.borders=new Border[2];  ModifiableDoubleDBIDList neighbors=DBIDUtil.newDistanceDBIDList(minpts << 1);  FiniteProgress cprog=LOG.isVerbose() ? new FiniteProgress("Processing grid cells",mincells,LOG) : null;  for (TLongObjectIterator<ModifiableDBIDs> it=grid.iterator(); it.hasNext(); ) {    it.advance();    ModifiableDBIDs cellids=it.value();    if (cellids.size() < minpts) {      continue;    }    temporary.clear();    ProxyView<V> rel=new ProxyView<>(cellids,relation);    RangeQuery<V> rq=rel.getRangeQuery(distanceFunction,epsilon);    FiniteProgress pprog=LOG.isVerbose() ? new FiniteProgress("Running DBSCAN",cellids.size(),LOG) : null;    for (DBIDIter id=cellids.iter(); id.valid(); id.advance()) {      if (temporary.intValue(id) != UNPROCESSED) {        continue;      }      neighbors.clear();      rq.getRangeForDBID(id,epsilon,neighbors);      if (neighbors.size() >= minpts) {        expandCluster(id,clusterid,temporary,neighbors,activeSet,rq,pprog);        ++clusterid;      } else {        temporary.putInt(id,NOISE);        LOG.incrementProcessed(pprog);      }    }    LOG.ensureCompleted(pprog);    updateCoreBorderObjects(clusterid);    mergeClusterInformation(cellids,temporary,clusterids);    LOG.incrementProcessed(cprog);  }  LOG.ensureCompleted(cprog);  temporary.destroy();  FiniteProgress pprog=LOG.isVerbose() ? new FiniteProgress("Building final result",size,LOG) : null;  ModifiableDBIDs[] clusters=new ModifiableDBIDs[clusterid];  ModifiableDBIDs noise=DBIDUtil.newArray();  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    Assignment cids=clusterids.get(it);    if (cids == null) {      noise.add(it);    } else {      if (cids instanceof MultiBorder) {        cids=((MultiBorder)cids).getCore();      } else       if (cids instanceof Border) {        cids=((Border)cids).core;      }      assert (cids instanceof Core);      Core co=(Core)cids;      while (cores[co.num].num != co.num) {        co=cores[co.num=cores[co.num].num];      }      ModifiableDBIDs clu=clusters[co.num];      if (clu == null) {        clu=clusters[co.num]=DBIDUtil.newArray();      }      clu.add(it);    }    LOG.incrementProcessed(pprog);  }  LOG.ensureCompleted(pprog);  clusterids.destroy();  Clustering<Model> result=new Clustering<>("DBSCAN Clustering","dbscan-clustering");  for (int i=NOISE + 1; i < clusters.length; i++) {    if (clusters[i] != null) {      result.addToplevelCluster(new Cluster<Model>(clusters[i],ClusterModel.CLUSTER));    }  }  if (noise.size() > 0) {    result.addToplevelCluster(new Cluster<Model>(noise,true,ClusterModel.CLUSTER));  }  return result;}  }
class C{  public static boolean isTargetInstanceProxy(Object obj){  return TARGET_INSTANCE.isAssignableFrom(obj.getClass());}  }
class C{  public int nextIndex(){  try {    return currentIndex() + 1;  } catch (  GenericEntityException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException(e.getNonNestedMessage(),e.getNested());  }}  }
class C{  @Override protected void onHandleIntent(Intent intent){  startNotification();  mVideoMediator=new VideoDataMediator();  finishNotification(mVideoMediator.uploadVideo(getApplicationContext(),intent.getData()));  sendBroadcast();}  }
class C{  private void addBackground(VisualizerContext context){  CSSClass cls=new CSSClass(this,"background");  cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,context.getStyleLibrary().getBackgroundColor(StyleLibrary.PAGE));  Element bg=this.svgElement(SVGConstants.SVG_RECT_TAG);  SVGUtil.setAtt(bg,SVGConstants.SVG_X_ATTRIBUTE,"0");  SVGUtil.setAtt(bg,SVGConstants.SVG_Y_ATTRIBUTE,"0");  SVGUtil.setAtt(bg,SVGConstants.SVG_WIDTH_ATTRIBUTE,"100%");  SVGUtil.setAtt(bg,SVGConstants.SVG_HEIGHT_ATTRIBUTE,"100%");  SVGUtil.setAtt(bg,NO_EXPORT_ATTRIBUTE,NO_EXPORT_ATTRIBUTE);  addCSSClassOrLogError(cls);  SVGUtil.setCSSClass(bg,cls.getName());  getRoot().appendChild(bg);}  }
class C{  public static IMT allocate(){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return new IMT();}  }
class C{  public static final String createXPATHWarning(String msgKey,Object args[]){  return createXPATHMsg(XPATHBundle,msgKey,args);}  }
class C{  protected void writeExternalIndicesCreateStmt(Table table,StringBuilder ddl){  for (int idx=0; idx < table.getIndexCount(); idx++) {    IIndex index=table.getIndex(idx);    if (!index.isUnique() && !databaseInfo.isIndicesSupported()) {      return;    }    writeExternalIndexCreateStmt(table,index,ddl);  }}  }
class C{  public void reloadBasicExtras(){  mSlicingHandler.clearExtras();  mSlicingHandler.setExtras("profile.fill_density",mCurrentInfill);  mSlicingHandler.setExtras("profile.support",s_support.getSelectedItem());  mSlicingHandler.setExtras("profile",s_profile.getSelectedItem().toString());}  }
class C{  public static final Cursor query(ContentResolver cr,long eventId,String[] projection){  String[] remArgs={Long.toString(eventId)};  return cr.query(CONTENT_URI,projection,REMINDERS_WHERE,remArgs,null);}  }
class C{  @Deprecated public static boolean isFocusManagerEnabled(){  return enabled;}  }
class C{  public void removeSelectionListener(SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  removeListener(SWT.Selection,listener);  removeListener(SWT.DefaultSelection,listener);}  }
class C{  public String[][] convertToStringFrame(String input,int rows,int cols) throws IOException {  InputStream is=IOUtilFunctions.toInputStream(input);  return convertToStringFrame(is,rows,cols);}  }
class C{  protected boolean canSetValue(){  return !canBeNull || isNotNull();}  }
class C{  public CompositeGraphicsNode buildCompositeGraphicsNode(BridgeContext ctx,Element e,CompositeGraphicsNode gn){  SVGOMUseElement ue=(SVGOMUseElement)e;  String uri=ue.getHref().getAnimVal();  if (uri.length() == 0) {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_MISSING,new Object[]{"xlink:href"});  }  Element refElement=ctx.getReferencedElement(e,uri);  SVGOMDocument document, refDocument;  document=(SVGOMDocument)e.getOwnerDocument();  refDocument=(SVGOMDocument)refElement.getOwnerDocument();  boolean isLocal=(refDocument == document);  BridgeContext theCtx=ctx;  subCtx=null;  if (!isLocal) {    subCtx=(BridgeContext)refDocument.getCSSEngine().getCSSContext();    theCtx=subCtx;  }  Element localRefElement;  localRefElement=(Element)document.importNode(refElement,true,true);  if (SVG_SYMBOL_TAG.equals(localRefElement.getLocalName())) {    Element svgElement=document.createElementNS(SVG_NAMESPACE_URI,SVG_SVG_TAG);    NamedNodeMap attrs=localRefElement.getAttributes();    int len=attrs.getLength();    for (int i=0; i < len; i++) {      Attr attr=(Attr)attrs.item(i);      svgElement.setAttributeNS(attr.getNamespaceURI(),attr.getName(),attr.getValue());    }    for (Node n=localRefElement.getFirstChild(); n != null; n=localRefElement.getFirstChild()) {      svgElement.appendChild(n);    }    localRefElement=svgElement;  }  if (SVG_SVG_TAG.equals(localRefElement.getLocalName())) {    try {      SVGOMAnimatedLength al=(SVGOMAnimatedLength)ue.getWidth();      if (al.isSpecified()) {        localRefElement.setAttributeNS(null,SVG_WIDTH_ATTRIBUTE,al.getAnimVal().getValueAsString());      }      al=(SVGOMAnimatedLength)ue.getHeight();      if (al.isSpecified()) {        localRefElement.setAttributeNS(null,SVG_HEIGHT_ATTRIBUTE,al.getAnimVal().getValueAsString());      }    } catch (    LiveAttributeException ex) {      throw new BridgeException(ctx,ex);    }  }  SVGOMUseShadowRoot root;  root=new SVGOMUseShadowRoot(document,e,isLocal);  root.appendChild(localRefElement);  if (gn == null) {    gn=new CompositeGraphicsNode();    associateSVGContext(ctx,e,node);  } else {    int s=gn.size();    for (int i=0; i < s; i++)     gn.remove(0);  }  Node oldRoot=ue.getCSSFirstChild();  if (oldRoot != null) {    disposeTree(oldRoot);  }  ue.setUseShadowTree(root);  Element g=localRefElement;  CSSUtilities.computeStyleAndURIs(refElement,localRefElement,uri);  GVTBuilder builder=ctx.getGVTBuilder();  GraphicsNode refNode=builder.build(ctx,g);  gn.getChildren().add(refNode);  gn.setTransform(computeTransform((SVGTransformable)e,ctx));  gn.setVisible(CSSUtilities.convertVisibility(e));  RenderingHints hints=null;  hints=CSSUtilities.convertColorRendering(e,hints);  if (hints != null)   gn.setRenderingHints(hints);  Rectangle2D r=CSSUtilities.convertEnableBackground(e);  if (r != null)   gn.setBackgroundEnable(r);  if (l != null) {    NodeEventTarget target=l.target;    target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",l,true);    target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",l,true);    target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",l,true);    target.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",l,true);    l=null;  }  if (isLocal && ctx.isDynamic()) {    l=new ReferencedElementMutationListener();    NodeEventTarget target=(NodeEventTarget)refElement;    l.target=target;    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",l,true,null);    theCtx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",l,true);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",l,true,null);    theCtx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",l,true);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",l,true,null);    theCtx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",l,true);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",l,true,null);    theCtx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",l,true);  }  return gn;}  }
class C{  public void onStart(){}  }
class C{  public static void run(boolean conformance){  v=new RCFGToSSL(conformance);  v.createSSL(RCFG.v());  logger.info("Writing spec to file");  String fname=Project.v().getOutputDir() + File.separator + SSL_FILE_NAME;  writeSpecToFile(v.getSpec().toString(),fname);  String html_fname=Project.v().getOutputDir() + "/spec.html";  writeSpecToFile(v.getSpec().toHtmlString(),html_fname);}  }
class C{  private void initActionBarAutoHide(){  mActionBarAutoHideEnabled=true;  mActionBarAutoHideMinY=getResources().getDimensionPixelSize(R.dimen.action_bar_auto_hide_min_y);  mActionBarAutoHideSensivity=getResources().getDimensionPixelSize(R.dimen.action_bar_auto_hide_sensivity);}  }
class C{  public void initialize() throws Exception {  factory=DocumentBuilderFactory.newInstance();  parser=factory.newDocumentBuilder();  outputObject=parser.newDocument();  oldNewNamesMap=new HashMap<String,String>();  oldNewNamesMap.put("em","i");  oldNewNamesMap.put("strong","b");  oldNewNamesMap.put("bold","b");  root=outputObject.createElement("asdoc");  NodeList options=asDocConfig.getElementsByTagName("options");  String buildnum=((Element)options.item(0)).getAttribute("buildNum");  if (buildnum != null) {    root.setAttribute("build",buildnum);  } else {    root.setAttribute("build","0");  }  if (((Element)options.item(0)).getAttribute("verbose").equals("true")) {    verbose=true;  }  asDocUtil=new AsDocUtil(verbose);  String includePrivateStr=((Element)options.item(0)).getAttribute("includePrivate");  if ("true".equals(includePrivateStr)) {    includePrivate=true;  }  Element link=outputObject.createElement("link");  link.setAttribute("rel","stylesheet");  link.setAttribute("href","style.css");  link.setAttribute("type","text/css");  root.appendChild(link);  outputObject.appendChild(root);  NodeList namespaceNodeList=asDocConfig.getElementsByTagName("namespace");  if (namespaceNodeList != null) {    for (int ix=0; ix < namespaceNodeList.getLength(); ix++) {      Element nameSpaceElement=(Element)namespaceNodeList.item(ix);      String hide=nameSpaceElement.getAttribute("hide");      if (hide != null) {        namespaces+=(nameSpaceElement.getTextContent() + ":" + hide+ ":");      }    }  }  NodeList asPackageNodeList=asDocConfig.getElementsByTagName("asPackage");  if (asPackageNodeList != null) {    for (int ix=0; ix < asPackageNodeList.getLength(); ix++) {      Element asPackageElement=(Element)asPackageNodeList.item(ix);      String hide=asPackageElement.getAttribute("hide");      if (hide != null) {        hiddenPackages+=(asPackageElement.getTextContent() + ":" + hide+ ":");      }    }  }  AsClass tempAsClass=new AsClass();  tempAsClass.setName(GLOBAL);  tempAsClass.setFullName(GLOBAL);  tempAsClass.setBaseName("Object");  tempAsClass.setDecompName(asDocUtil.decomposeFullClassName("Object"));  Element aClass=outputObject.createElement("aClass");  tempAsClass.setNode(aClass);  classTable.put(GLOBAL,tempAsClass);  HashMap<String,AsClass> packageContents=new HashMap<String,AsClass>();  packageContents.put(GLOBAL,tempAsClass);  packageContentsTable.put(GLOBAL,packageContents);}  }
class C{  private static long mixGamma(long z){  z=(z ^ (z >>> 33)) * 0xff51afd7ed558ccdL;  z=(z ^ (z >>> 33)) * 0xc4ceb9fe1a85ec53L;  z=(z ^ (z >>> 33)) | 1L;  int n=Long.bitCount(z ^ (z >>> 1));  return (n < 24) ? z ^ 0xaaaaaaaaaaaaaaaaL : z;}  }
class C{  public boolean hasCache(){  return m_hasCache;}  }
class C{  public List<Boolean> exists(List<Value> keyValues) throws AerospikeException {  List<Boolean> target=new ArrayList<Boolean>();  for (  Object value : keyValues) {    target.add(exists(Value.get(value)));  }  return target;}  }
class C{  public BlockOrder(OBlock block,String path,String entry,String exit){  this(block);  _pathName=path;  _entryName=entry;  _exitName=exit;}  }
class C{  public static boolean rightLengthForDateTime(String dateAndTime){  int length=dateAndTime.length();  int maxLength=DATE_TIME_FORMAT.length() - 4;  int minLength=maxLength - 2;  if ((length <= maxLength) && (length >= minLength)) {    return true;  }  return false;}  }
class C{  public boolean isRedirectFramesToPanels(){  return redirectFramesToPanels;}  }
class C{  public CUserViewsComponent(final JTree projectTree,final IViewContainer container){  super(new CUserViewsTable(projectTree,container,container),new CViewFilterCreator(container),new CViewFilterHelp());  Preconditions.checkNotNull(projectTree,"IE02013: Project tree argument can not be null");  Preconditions.checkNotNull(container,"IE02014: Original container argument can not be null");  this.container=container;  container.addListener(m_containerListener);  if (container.isLoaded()) {    for (    final INaviView view : container.getViews()) {      view.addListener(m_viewListener);    }  }  updateBorderText(getBorderText());}  }
class C{  void save(){  processedSave=processed;  sizeOfAADSave=sizeOfAAD;  aadBufferSave=((aadBuffer == null || aadBuffer.size() == 0) ? null : aadBuffer.toByteArray());  if (gctrPAndC != null)   gctrPAndC.save();  if (ghashAllToS != null)   ghashAllToS.save();  if (ibuffer != null) {    ibufferSave=ibuffer.toByteArray();  }}  }
class C{  public static <K,V,M extends Map<K,V>>M addAll(M m,IgniteBiTuple<K,V>... entries){  for (  IgniteBiTuple<K,V> t : entries)   m.put(t.get1(),t.get2());  return m;}  }
class C{  public static boolean isLowSurrogate(char ch){  return (MIN_LOW_SURROGATE <= ch && MAX_LOW_SURROGATE >= ch);}  }
class C{  public void loadTableInfo(BankInfo bi,Timestamp payDate,ValueNamePair paymentRule,boolean onlyDue,int C_BPartner_ID,KeyNamePair docType,IMiniTable miniTable){  log.config("");  if (m_sql == null)   return;  String sql=m_sql;  String isSOTrx="N";  if (paymentRule != null && X_C_Order.PAYMENTRULE_DirectDebit.equals(paymentRule.getValue())) {    isSOTrx="Y";    sql+=" AND i.PaymentRule='" + X_C_Order.PAYMENTRULE_DirectDebit + "'";  }  if (onlyDue)   sql+=" AND COALESCE(ips.duedate,paymentTermDueDate(i.C_PaymentTerm_ID, i.DateInvoiced)) <= ?";  if (C_BPartner_ID != 0)   sql+=" AND i.C_BPartner_ID=?";  KeyNamePair dt=docType;  int c_doctype_id=dt.getKey();  if (c_doctype_id != 0)   sql+=" AND i.c_doctype_id =?";  sql+=" ORDER BY DateDue, bp.Name, i.DocumentNo";  log.fine(sql + " - C_Currency_ID=" + bi.C_Currency_ID+ ", C_BPartner_ID="+ C_BPartner_ID+ ", C_doctype_id="+ c_doctype_id);  try {    int index=1;    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setTimestamp(index++,payDate);    pstmt.setInt(index++,bi.C_Currency_ID);    pstmt.setTimestamp(index++,payDate);    pstmt.setTimestamp(index++,payDate);    pstmt.setInt(index++,bi.C_Currency_ID);    pstmt.setTimestamp(index++,payDate);    pstmt.setString(index++,isSOTrx);    pstmt.setTimestamp(index++,payDate);    pstmt.setInt(index++,m_AD_Client_ID);    if (onlyDue)     pstmt.setTimestamp(index++,payDate);    if (C_BPartner_ID != 0)     pstmt.setInt(index++,C_BPartner_ID);    if (c_doctype_id != 0)     pstmt.setInt(index++,c_doctype_id);    ResultSet rs=pstmt.executeQuery();    miniTable.loadTable(rs);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public SpecificMessage(byte[] a,int l){  super(a,l);}  }
class C{  public static EsperEPL2GrammarParser.StartEventPropertyRuleContext parse(String propertyName){  CharStream input;  try {    input=new NoCaseSensitiveStream(new StringReader(propertyName));  } catch (  IOException ex) {    throw new PropertyAccessException("IOException parsing property name '" + propertyName + '\'',ex);  }  EsperEPL2GrammarLexer lex=ParseHelper.newLexer(input);  CommonTokenStream tokens=new CommonTokenStream(lex);  try {    tokens.fill();  } catch (  RuntimeException e) {    if (ParseHelper.hasControlCharacters(propertyName)) {      throw new PropertyAccessException("Unrecognized control characters found in text");    }    throw new PropertyAccessException("Failed to parse text: " + e.getMessage());  }  EsperEPL2GrammarParser g=ParseHelper.newParser(tokens);  EsperEPL2GrammarParser.StartEventPropertyRuleContext r;  try {    r=g.startEventPropertyRule();  } catch (  RecognitionException e) {    return handleRecognitionEx(e,tokens,propertyName,g);  }catch (  RuntimeException e) {    if (log.isDebugEnabled()) {      log.debug("Error parsing property expression [" + propertyName + "]",e);    }    if (e.getCause() instanceof RecognitionException) {      return handleRecognitionEx((RecognitionException)e.getCause(),tokens,propertyName,g);    } else {      throw e;    }  }  return r;}  }
class C{  private List<Object> createListFromJSONArray(JSONArray jsonArray,Field field){  Type genericFieldType=field.getGenericType();  List<Object> objectArrayList=new ArrayList<>();  if (genericFieldType instanceof ParameterizedType) {    ParameterizedType aType=(ParameterizedType)genericFieldType;    Type[] fieldArgTypes=aType.getActualTypeArguments();    for (    Type fieldArgType : fieldArgTypes) {      final Class fieldArgClass=(Class)fieldArgType;      System.out.println("fieldArgClass = " + fieldArgClass);      for (int i=0; jsonArray.length() > i; i++) {        Object obj=null;        try {          obj=new Gson().fromJson(jsonArray.get(i).toString(),fieldArgClass);        } catch (        JSONException e) {          Logger.debug("JSONArray does not contain index " + i + ".");        }        objectArrayList.add(obj);      }    }  }  return objectArrayList;}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.296 -0500",hash_original_method="D0077BF0C677FC7F0C28C59D93206805",hash_generated_method="89F5B9FD76C4F65D2B0BBA73BDB7C9DA") public Class findClass(String name){  for (  Element element : dexElements) {    DexFile dex=element.dexFile;    if (dex != null) {      Class clazz=dex.loadClassBinaryName(name,definingContext);      if (clazz != null) {        return clazz;      }    }  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String createVideoLink(String id,String quality){  return "http://v.mover.uz/{id}_{qq}.mp4".replace("{id}",id).replace("{qq}",quality);}  }
class C{  public PersonIso(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public boolean hasType(int aType){  return (this.typeCount(aType) > 0);}  }
class C{  protected NamedList<Object> encodeSnippets(String[] keys,String[] fieldNames,Map<String,String[]> snippets){  NamedList<Object> list=new SimpleOrderedMap<>();  for (int i=0; i < keys.length; i++) {    NamedList<Object> summary=new SimpleOrderedMap<>();    for (    String field : fieldNames) {      String snippet=snippets.get(field)[i];      if (snippet == null) {        summary.add(field,new String[0]);      } else {        summary.add(field,new String[]{snippet});      }    }    list.add(keys[i],summary);  }  return list;}  }
class C{  public boolean equals(Object obj){  if (obj == null || !(obj instanceof BitMatrix))   return false;  if (this == obj)   return true;  BitMatrix other=(BitMatrix)obj;  if (columns != other.columns() || rows != other.rows())   return false;  return toBitVector().equals(other.toBitVector());}  }
class C{  public static Job pollJob(final Bigquery.Jobs.Get request,final long interval) throws IOException, InterruptedException {  Job job=request.execute();  while (!job.getStatus().getState().equals("DONE")) {    System.out.println("Job is " + job.getStatus().getState() + " waiting "+ interval+ " milliseconds...");    Thread.sleep(interval);    job=request.execute();  }  return job;}  }
class C{  private void removeSubscriptionOwner(PlatformUser user){  if (!isUnitAdmin(user) && !user.hasRole(UserRoleType.SUBSCRIPTION_MANAGER) && !user.hasRole(UserRoleType.ORGANIZATION_ADMIN)) {    List<Subscription> subscriptions=slsl.getSubscriptionsForOwner(user);    for (    Subscription subscription : subscriptions) {      subscription.setOwner(null);      dm.merge(subscription);    }    RoleAssignment adminAssignment=user.getAssignedRole(UserRoleType.UNIT_ADMINISTRATOR);    dm.remove(adminAssignment);    dm.flush();  }}  }
class C{  public void deleteAttribute(){  DataSortedTableModel model;  if (m_CurrentCol == -1) {    return;  }  model=(DataSortedTableModel)m_TableData.getModel();  if (model.getAttributeAt(m_CurrentCol) == null) {    return;  }  if (ComponentHelper.showMessageBox(getParent(),"Confirm...","Do you really want to delete the attribute '" + model.getAttributeAt(m_CurrentCol).name() + "'?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION) {    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  model.deleteAttributeAt(m_CurrentCol);  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public static boolean isV6(String netspec){  return netspec.contains(":");}  }
class C{  protected int delete(Object object){  int rows=-1;  SQLiteDatabase db=openDatabase();  db.beginTransaction();  if (object instanceof FileItem) {    String[] args={String.valueOf(((FileItem)object).getId())};    rows=db.delete(SyncFile.TABLE_NAME,SyncFile.Columns.ID + "=?",args);  } else   if (object instanceof ActionItem) {    String[] args={String.valueOf(((ActionItem)object).getId())};    rows=db.delete(SyncAction.TABLE_NAME,SyncAction.Columns.ID + "=?",args);  } else {    throw new IllegalArgumentException("unsupported parameter.");  }  db.setTransactionSuccessful();  db.endTransaction();  closeDatabase();  return rows;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  deptUniqueId="";}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public static void swap8Bytes(byte[] bytes,int offset){  swapBytesAt(bytes,offset + 0,offset + 7);  swapBytesAt(bytes,offset + 1,offset + 6);  swapBytesAt(bytes,offset + 2,offset + 5);  swapBytesAt(bytes,offset + 3,offset + 4);}  }
class C{  private void paintCanvas(final PaintEvent e){  e.gc.drawImage(createBlurredImage(),0,0);}  }
class C{  private GridData gridDataForText(int width){  GridData gridData=new GridData();  gridData.horizontalAlignment=SWT.END;  gridData.horizontalAlignment=SWT.FILL;  gridData.widthHint=width;  gridData.verticalIndent=10;  gridData.grabExcessHorizontalSpace=true;  return gridData;}  }
class C{  public RectangleConstraint(Range w,Range h){  this(0.0,w,LengthConstraintType.RANGE,0.0,h,LengthConstraintType.RANGE);}  }
class C{  protected Node export(Node n,AbstractDocument d){  AbstractProcessingInstruction p;  p=(AbstractProcessingInstruction)super.export(n,d);  p.data=data;  return p;}  }
class C{  @Override public StringBuilder appendToBuffer(StringBuilder buf){  String processedString=Integer.toString(getProcessed());  int percentage=(int)(getProcessed() * 100.0 / total);  buf.append(getTask());  buf.append(": ");  for (int i=0; i < totalLength - processedString.length(); i++) {    buf.append(' ');  }  buf.append(getProcessed());  buf.append(" [");  if (percentage < 100) {    buf.append(' ');  }  if (percentage < 10) {    buf.append(' ');  }  buf.append(percentage);  buf.append("%]");  if (ratems > 0. && getProcessed() < total) {    buf.append(' ');    int secs=(int)Math.round((total - getProcessed()) / ratems / 1000. + .2);    if (secs > 300) {      buf.append(secs / 60);      buf.append(" min remaining");    } else {      buf.append(secs);      buf.append(" sec remaining");    }  }  return buf;}  }
class C{  public String reason(){  return reason;}  }
class C{  protected static ColorModel fixColorModel(CachableRed src){  ColorModel cm=src.getColorModel();  if (cm != null) {    if (cm.hasAlpha())     return GraphicsUtil.sRGB_Unpre;    return GraphicsUtil.sRGB;  } else {    SampleModel sm=src.getSampleModel();switch (sm.getNumBands()) {case 1:      return GraphicsUtil.sRGB;case 2:    return GraphicsUtil.sRGB_Unpre;case 3:  return GraphicsUtil.sRGB;}return GraphicsUtil.sRGB_Unpre;}}  }
class C{  public UnsupportedEncodingException(){}  }
class C{  private long computeAge(long nowMillis){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,TimeUnit.SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  void licenseUpdated(Integer newlicenseLimit){  if (newlicenseLimit == null || newlicenseLimit > limit) {    containerPanel.removeAll();    GridBagConstraints gbc=new GridBagConstraints();    gbc.gridx=0;    gbc.weightx=1.0;    gbc.insets=new Insets(0,5,0,0);    gbc.fill=GridBagConstraints.HORIZONTAL;    gbc.anchor=GridBagConstraints.WEST;    ResourceLabel reopenLabel=new ResourceLabel("too_much_data.reopen_dataset");    reopenLabel.setFont(BOLD_LABEL_FONT);    containerPanel.add(reopenLabel,gbc);    containerPanel.revalidate();    containerPanel.repaint();  }}  }
class C{  public Matrix(double[][] A,int m,int n){  this.A=A;  this.m=m;  this.n=n;}  }
class C{  private void removeMetadataNodes(DefaultMutableTreeNode node){  Set<DefaultMutableTreeNode> metadataNodes=new HashSet<DefaultMutableTreeNode>();  DefaultTreeModel model=(DefaultTreeModel)getModel();  for (Enumeration<?> e=node.children(); e.hasMoreElements(); ) {    DefaultMutableTreeNode n=(DefaultMutableTreeNode)e.nextElement();    Object uo=n.getUserObject();    if (uo instanceof XNodeInfo) {switch (((XNodeInfo)uo).getType()) {case ATTRIBUTES:case NOTIFICATIONS:case OPERATIONS:        metadataNodes.add(n);      break;default :    break;}}}for (DefaultMutableTreeNode n : metadataNodes) {model.removeNodeFromParent(n);}}  }
class C{  private void validateComplete(ResultFileReader reader) throws IOException {  Assert.assertTrue(reader.hasNext());  TestUtils.assertEquals(population,reader.next().getPopulation());  Assert.assertTrue(reader.hasNext());  TestUtils.assertEquals(population,reader.next().getPopulation());  Assert.assertFalse(reader.hasNext());  Assert.assertFalse(reader.hasNext());}  }
class C{  protected void sequence_AdditiveExpression(ISerializationContext context,AdditiveExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ADDITIVE_EXPRESSION__LHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ADDITIVE_EXPRESSION__LHS));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ADDITIVE_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ADDITIVE_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ADDITIVE_EXPRESSION__RHS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ADDITIVE_EXPRESSION__RHS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),semanticObject.getLhs());  feeder.accept(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0(),semanticObject.getRhs());  feeder.finish();}  }
class C{  public SnapshotInfo(String path,String prefix,String jvmInfo,int identifierSize,Date creationDate,int numberOfObjects,int numberOfGCRoots,int numberOfClasses,int numberOfClassLoaders,long usedHeapSize){  this.path=path;  this.prefix=prefix;  this.jvmInfo=jvmInfo;  this.identifierSize=identifierSize;  this.creationDate=creationDate != null ? new Date(creationDate.getTime()) : null;  this.numberOfObjects=numberOfObjects;  this.numberOfGCRoots=numberOfGCRoots;  this.numberOfClasses=numberOfClasses;  this.numberOfClassLoaders=numberOfClassLoaders;  this.usedHeapSize=usedHeapSize;  this.properties=new HashMap<String,Serializable>();}  }
class C{  void assignDepthFirstNumbers(ControlFlowGraph cfg){  int instructionCount=ir.countInstructions();  regAllocState.initializeDepthFirstNumbering(instructionCount);  int curDfn=instructionCount - 1;  listOfBlocks=null;  for (BasicBlock bb=reverseTopFirst; bb != null; bb=(BasicBlock)bb.sortedPrev) {    bb.nextSorted=listOfBlocks;    listOfBlocks=bb;    Enumeration<Instruction> e=bb.reverseInstrEnumerator();    while (e.hasMoreElements()) {      Instruction inst=e.nextElement();      regAllocState.setDFN(inst,curDfn);      curDfn--;    }  }  if (LinearScan.DEBUG) {    regAllocState.printDfns(ir);  }}  }
class C{  private boolean associateToParentWorkflow(Workflow workflow){  try {    String parentPath=getZKStep2WorkflowPath(workflow.getOrchTaskId());    if (_dataManager.checkExists(parentPath) != null) {      parentPath=(String)_dataManager.getData(parentPath,false);      if (parentPath != null) {        InterProcessLock parentLock=null;        Workflow parentWorkflow=(Workflow)_dataManager.getData(parentPath,false);        try {          parentLock=lockWorkflow(parentWorkflow);          parentWorkflow=(Workflow)_dataManager.getData(parentPath,false);          parentWorkflow._childWorkflows.add(workflow.getWorkflowURI());          persistWorkflow(parentWorkflow);        }  finally {          unlockWorkflow(parentWorkflow,parentLock);        }      }      return true;    }  } catch (  Exception ex) {    _log.error(ex.getMessage(),ex);  }  return false;}  }
class C{  void ensureString(Environment env,Context ctx,Assembler asm) throws ClassNotFound, AmbiguousMember {  if (type == Type.tString && isNonNull()) {    return;  }  ClassDefinition sourceClass=ctx.field.getClassDefinition();  ClassDeclaration stClass=env.getClassDeclaration(Type.tString);  ClassDefinition stClsDef=stClass.getClassDefinition(env);  if (type.inMask(TM_REFERENCE)) {    if (type != Type.tString) {      Type argType1[]={Type.tObject};      MemberDefinition f1=stClsDef.matchMethod(env,sourceClass,idValueOf,argType1);      asm.add(where,opc_invokestatic,f1);    }    if (!type.inMask(TM_ARRAY | TM_NULL)) {      Type argType2[]={Type.tString};      MemberDefinition f2=stClsDef.matchMethod(env,sourceClass,idValueOf,argType2);      asm.add(where,opc_invokestatic,f2);    }  } else {    Type argType[]={type};    MemberDefinition f=stClsDef.matchMethod(env,sourceClass,idValueOf,argType);    asm.add(where,opc_invokestatic,f);  }}  }
class C{  void copyParentSets(BayesNet dest,BayesNet source){  int nNodes=source.getNrOfNodes();  for (int iNode=0; iNode < nNodes; iNode++) {    dest.getParentSet(iNode).copy(source.getParentSet(iNode));  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isShortcutButton(){  return true;}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public boolean removeCoinsSentEventListener(WalletCoinsSentEventListener listener){  return ListenerRegistration.removeFromList(listener,coinsSentListeners);}  }
class C{  public AppInformationCritter(String flavorName,String buildType){  this.flavorName=flavorName;  this.buildType=buildType;}  }
class C{  public static String createChat(String loggedUserEmail,String userEmail){  String chatKey=FirebaseDatabase.getInstance().getReference(ConstantsFirebase.FIREBASE_LOCATION_CHAT).push().getKey();  Utils.makeFriends(loggedUserEmail,userEmail,chatKey);  Utils.makeFriends(userEmail,loggedUserEmail,chatKey);  return chatKey;}  }
class C{  private InputStream writeTurtle(Model statements) throws RDFHandlerException {  StringWriter writer=new StringWriter();  RDFWriter turtleWriter=new TurtleWriter(writer);  turtleWriter.startRDF();  for (  Statement nextStatement : statements) {    turtleWriter.handleStatement(nextStatement);  }  turtleWriter.endRDF();  return new ByteArrayInputStream(writer.toString().getBytes(Charset.forName("UTF-8")));}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public MosaicDefinitionCreationTransaction(final DeserializationOptions options,final Deserializer deserializer){  super(TransactionTypes.MOSAIC_DEFINITION_CREATION,options,deserializer);  this.mosaicDefinition=deserializer.readObject("mosaicDefinition",null);  this.creationFeeSink=Account.readFrom(deserializer,"creationFeeSink");  this.creationFee=Amount.readFrom(deserializer,"creationFee");  this.validate();}  }
class C{  public static Node invokeFunction2(Resource function,RDFNode argument1,RDFNode argument2,Dataset dataset){  final String expression="<" + function + ">(?arg1, ?arg2)";  QuerySolutionMap initialBinding=new QuerySolutionMap();  if (argument1 != null) {    initialBinding.add("arg1",argument1);  }  if (argument2 != null) {    initialBinding.add("arg2",argument2);  }  return invokeExpression(expression,initialBinding,dataset);}  }
class C{  public void writeContentType(OutputStream os,MimeBodyPart msg) throws IOException {  if (msg instanceof MimeMultipart) {    String ct=msg.getContentType().getValue();    String newCt=WspUtil.convertMultipartContentType(ct);    msg.getContentType().setValue(newCt);  }  WspUtil.writeContentType(wspEncodingVersion_,os,msg.getContentType());}  }
class C{  public void addActionListener(ActionListener al){  ((AppsAction)bOK.getAction()).setDelegate(al);  ((AppsAction)bCancel.getAction()).setDelegate(al);  if (bRefresh != null)   ((AppsAction)bRefresh.getAction()).setDelegate(al);  if (bReset != null)   ((AppsAction)bReset.getAction()).setDelegate(al);  if (bCustomize != null)   ((AppsAction)bCustomize.getAction()).setDelegate(al);  if (bHistory != null)   ((AppsAction)bHistory.getAction()).setDelegate(al);  if (bZoom != null)   ((AppsAction)bZoom.getAction()).setDelegate(al);  JRootPane rootpane=null;  if (al instanceof JDialog)   rootpane=((JDialog)al).getRootPane(); else   if (al instanceof JFrame)   rootpane=((JFrame)al).getRootPane();  if (rootpane != null)   rootpane.setDefaultButton(bOK);}  }
class C{  protected void addViolation(RuleContext ctx,DelphiPMDNode node,String msg){  ctx.getReport().addRuleViolation(new DelphiRuleViolation(this,ctx,node,msg));}  }
class C{  public boolean addLoadName(String load){  if (_loadList.contains(load)) {    return false;  }  _loadList.add(load);  log.debug("track ({}) add car load ({})",getName(),load);  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() - 1,_loadList.size());  return true;}  }
class C{  protected String processCommand(final String command,final Map<String,String> environment){  return processCommand(command,environment,null);}  }
class C{  public int size(){  return map.size();}  }
class C{  public RequestCreator error(int errorResId){  if (errorResId == 0) {    throw new IllegalArgumentException("Error image resource invalid.");  }  if (errorDrawable != null) {    throw new IllegalStateException("Error image already set.");  }  this.errorResId=errorResId;  return this;}  }
class C{  private JsonToken readLiteral() throws IOException {  value=nextLiteral(true);  if (valueLength == 0) {    throw syntaxError("Expected literal value");  }  token=decodeLiteral();  if (token == JsonToken.STRING) {    checkLenient();  }  return token;}  }
class C{  public XMLStreamNormalizingReader(InputStream is,String encod) throws IOException {  PushbackInputStream pbis=new PushbackInputStream(is,128);  byte[] buf=new byte[4];  int len=pbis.read(buf);  if (len > 0) {    pbis.unread(buf,0,len);  }  if (len == 4) {switch (buf[0] & 0x00FF) {case 0:      if (buf[1] == 0x003c && buf[2] == 0x0000 && buf[3] == 0x003f) {        charDecoder=new UTF16Decoder(pbis,true);        return;      }    break;case '<':switch (buf[1] & 0x00FF) {case 0:    if (buf[2] == 0x003f && buf[3] == 0x0000) {      charDecoder=new UTF16Decoder(pbis,false);      return;    }  break;case '?':if (buf[2] == 'x' && buf[3] == 'm') {  Reader r=XMLUtilities.createXMLDeclarationReader(pbis,"UTF8");  String enc=XMLUtilities.getXMLDeclarationEncoding(r,"UTF-8");  charDecoder=createCharDecoder(pbis,enc);  return;}}break;case 0x004C:if (buf[1] == 0x006f && (buf[2] & 0x00FF) == 0x00a7 && (buf[3] & 0x00FF) == 0x0094) {Reader r=XMLUtilities.createXMLDeclarationReader(pbis,"CP037");String enc=XMLUtilities.getXMLDeclarationEncoding(r,"EBCDIC-CP-US");charDecoder=createCharDecoder(pbis,enc);return;}break;case 0x00FE:if ((buf[1] & 0x00FF) == 0x00FF) {charDecoder=createCharDecoder(pbis,"UTF-16");return;}break;case 0x00FF:if ((buf[1] & 0x00FF) == 0x00FE) {charDecoder=createCharDecoder(pbis,"UTF-16");return;}}}encod=(encod == null) ? "UTF-8" : encod;charDecoder=createCharDecoder(pbis,encod);}  }
class C{  private Base64(){}  }
class C{  public void destroy(){  diagram.removeDiagramChangeListener(this);}  }
class C{  private void initDumpXmlFile(String cfName){  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=null;  try {    builder=dbf.newDocumentBuilder();  } catch (  Exception e) {    System.err.println("Caught Exception: " + e);    log.error("Caught Exception: ",e);  }  doc=builder.newDocument();  Element root=doc.createElement("dbschemas");  doc.appendChild(root);  schemaNode=doc.createElement("data_object_schema");  schemaNode.setAttribute("name",cfName);  root.appendChild(schemaNode);}  }
class C{  public CharBuffer(String string){  int length=string.length();  int capacity=length + MIN_CAPACITY;  init(new char[capacity],0,length);  string.getChars(0,length,buffer(),0);}  }
class C{  public void unsetListener(){  onDiscoveredTagListener=null;}  }
class C{  public void flushToDisk() throws IOException {  StreamImpl source=_source;  if (_isDisableFlush || source == null) {    return;  }  flush();  source.flushToDisk();}  }
class C{  public static BigDecimal toBTC(String currency,BigDecimal value,String apiCode) throws APIException, IOException {  Map<String,String> params=new HashMap<String,String>();  params.put("currency",currency);  params.put("value",String.valueOf(value));  if (apiCode != null) {    params.put("api_code",apiCode);  }  String response=HttpClient.getInstance().get("tobtc",params);  return new BigDecimal(response);}  }
class C{  void newbuf(){  if (toCopy != null) {    throw new RuntimeException("BUG: Invalid newbuf() before copy()");  }  LengthRecordNode temp=new LengthRecordNode();  temp.currentMessage=mMessage;  temp.currentPosition=mPosition;  temp.next=stack;  stack=temp;  stackSize=stackSize + 1;  mMessage=new ByteArrayOutputStream();  mPosition=0;}  }
class C{  @Override public boolean contains(Value filledValue){  if (filledValue instanceof DoubleVal) {    for (    double a : array) {      if (Math.abs(a - ((DoubleVal)filledValue).d) < 0.0001) {        return true;      }    }  }  return false;}  }
class C{  public CeylonRepoManagerBuilder noDefaultRepos(boolean noDefRepos){  this.noDefRepos=noDefRepos;  return this;}  }
class C{  public static String makeMimeTypeForSuffix(String suffix){  if (suffix == null) {    String message=Logging.getMessage("nullValue.FormatSuffixIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (suffix.startsWith("."))   suffix=suffix.substring(1,suffix.length());  return suffixToMimeTypeMap.get(suffix.toLowerCase());}  }
class C{  public CUDA_RESOURCE_DESC(){}  }
class C{  public int count(){  return dict.size();}  }
class C{  public double[] computeLocalInfoDistanceUsingPreviousObservations(double[][] states1,double[][] states2){  return computeLocalInfoDistanceUsingPreviousObservations(states1,states2,false);}  }
class C{  private void clearDFACache(SwiftParser parser){  numFiles.incrementAndGet();  if (numFiles.compareAndSet(numberOfFilesBeforePurge,0)) {    parser.getInterpreter().clearDFA();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.443 -0400",hash_original_method="438CF302A21CA34274E9B0DDF0F4C413",hash_generated_method="BFD86699D1955E07B67B93B74D5CA719") @Override public long skip(long numberOfChars) throws IOException {  if (eof) {    throw new IOException("Skip after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=numberOfChars;  long returnLength=numberOfChars;  if (position > size) {    returnLength=numberOfChars - (position - size);    position=size;  }  return returnLength;}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  protected void syncSummaryView(PreferenceViewHolder holder){  View view=holder.findViewById(android.R.id.summary);  syncSummaryView(view);}  }
class C{  public Graph search(){  topGraphs.clear();  lookupArrows=new ConcurrentHashMap<>();  final List<Node> nodes=new ArrayList<>(variables);  graph=new EdgeListGraphSingleConnections(nodes);  if (adjacencies != null) {    adjacencies=GraphUtils.replaceNodes(adjacencies,nodes);  }  if (initialGraph != null) {    graph=new EdgeListGraphSingleConnections(initialGraph);    graph=GraphUtils.replaceNodes(graph,nodes);  }  addRequiredEdges(graph);  if (faithfulnessAssumed) {    initializeForwardEdgesFromEmptyGraph(getVariables());    this.mode=Mode.heuristicSpeedup;    fes();    bes();    this.mode=Mode.coverNoncolliders;    initializeTwoStepEdges(getVariables());    fes();    bes();  } else {    initializeForwardEdgesFromEmptyGraph(getVariables());    this.mode=Mode.heuristicSpeedup;    fes();    bes();    this.mode=Mode.allowUnfaithfulness;    initializeForwardEdgesFromExistingGraph(getVariables());    fes();    bes();  }  long start=System.currentTimeMillis();  totalScore=0.0;  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - start;  this.logger.log("graph","\nReturning this graph: " + graph);  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.flush();  this.modelScore=totalScore;  return graph;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static String removeBrackets(String subQuery){  if (subQuery.indexOf('(') == 0 && subQuery.lastIndexOf(')') == subQuery.length() - 1) {    return subQuery.substring(1,subQuery.length() - 1);  }  return subQuery;}  }
class C{  protected SelectedTag defaultClusterSubType(){  return new SelectedTag(SubspaceCluster.CONTINUOUS,SubspaceCluster.TAGS_CLUSTERSUBTYPE);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final Vec3D minSelf(ReadonlyVec3D b){  x=MathUtils.min(x,b.x());  y=MathUtils.min(y,b.y());  z=MathUtils.min(z,b.z());  return this;}  }
class C{  public static double FProbability(double F,int df1,int df2){  return incompleteBeta(df2 / 2.0,df1 / 2.0,df2 / (df2 + df1 * F));}  }
class C{  public static String utf8BytesWithUtf16LengthToString(@Nonnull byte[] bytes,int start,int utf16Length,@Nullable int[] readLength){  char[] chars=localBuffer.get();  if (chars == null || chars.length < utf16Length) {    chars=new char[utf16Length];    localBuffer.set(chars);  }  int outAt=0;  int at;  for (at=start; utf16Length > 0; utf16Length--) {    int v0=bytes[at] & 0xFF;    char out;switch (v0 >> 4) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:{        if (v0 == 0) {          return throwBadUtf8(v0,at);        }        out=(char)v0;        at++;        break;      }case 0x0c:case 0x0d:{      int v1=bytes[at + 1] & 0xFF;      if ((v1 & 0xc0) != 0x80) {        return throwBadUtf8(v1,at + 1);      }      int value=((v0 & 0x1f) << 6) | (v1 & 0x3f);      if ((value != 0) && (value < 0x80)) {        return throwBadUtf8(v1,at + 1);      }      out=(char)value;      at+=2;      break;    }case 0x0e:{    int v1=bytes[at + 1] & 0xFF;    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v1,at + 1);    }    int v2=bytes[at + 2] & 0xFF;    if ((v2 & 0xc0) != 0x80) {      return throwBadUtf8(v2,at + 2);    }    int value=((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) | (v2 & 0x3f);    if (value < 0x800) {      return throwBadUtf8(v2,at + 2);    }    out=(char)value;    at+=3;    break;  }default :{  return throwBadUtf8(v0,at);}}chars[outAt]=out;outAt++;}if (readLength != null && readLength.length > 0) {readLength[0]=at - start;readLength[0]=at - start;}return new String(chars,0,outAt);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!SageConstants.PVR || !Sage.EMBEDDED || !Sage.LINUX_OS)   return new Integer(-1);  String requestedPath=getString(stack);  if (Sage.DBG)   System.out.println("Requested REFORMAT of drive mounted at path: " + requestedPath);  if (requestedPath == null)   return new Integer(-1);  String allMountInfo=IOUtils.exec(new String[]{"mount"},true,true);  java.util.StringTokenizer toker=new java.util.StringTokenizer(allMountInfo,"\r\n");  String realDevice=null;  String mountPath=null;  while (toker.hasMoreTokens()) {    String singleMount=toker.nextToken();    if (singleMount.startsWith("/dev/sd")) {      int idx1=singleMount.indexOf(" on ");      realDevice=singleMount.substring(0,idx1);      idx1+=4;      int idx2=singleMount.lastIndexOf('(');      idx2=singleMount.lastIndexOf(" type ",idx2);      mountPath=singleMount.substring(idx1,idx2);      if (requestedPath.startsWith(mountPath)) {        if (Sage.DBG)         System.out.println("Found matching mount point at path " + mountPath + " for device "+ realDevice);        break;      } else {        realDevice=mountPath=null;      }    }  }  if (mountPath == null || realDevice == null)   return new Integer(-1);  if (IOUtils.exec2(new String[]{"umount",mountPath}) != 0) {    if (Sage.DBG)     System.out.println("ERROR could not unmount the path at: " + mountPath);    return new Integer(-2);  }  if (realDevice.length() > 8) {    String devicePrefix=realDevice.substring(0,8);    toker=new java.util.StringTokenizer(allMountInfo,"\r\n");    while (toker.hasMoreTokens()) {      String singleMount=toker.nextToken();      if (singleMount.startsWith(devicePrefix)) {        int idx1=singleMount.indexOf(" on ");        String altDevice=singleMount.substring(0,idx1);        if (!altDevice.equals(realDevice)) {          idx1+=4;          int idx2=singleMount.lastIndexOf('(');          idx2=singleMount.lastIndexOf(" type ",idx2);          String altMountPath=singleMount.substring(idx1,idx2);          if (Sage.DBG)           System.out.println("Found alternate partition on device for formatting, unmount it path=" + altMountPath + " dev="+ altDevice);          if (IOUtils.exec2(new String[]{"umount",altMountPath}) != 0) {            if (Sage.DBG)             System.out.println("ERROR could not unmount the path at: " + altMountPath);            return new Integer(-2);          }        }      }    }    realDevice=devicePrefix;  }  if (Sage.DBG)   System.out.println("Zeroing out the first 512 bytes of the disk at " + realDevice + " ...");  IOUtils.exec2(new String[]{"sh","-c","dd if=/dev/zero of=" + realDevice + " count=1 bs=512"},true);  if (Sage.DBG)   System.out.println("Creating the partition table on the disk " + realDevice + " to be a single ext3 partition...");  if (IOUtils.exec2(new String[]{"sh","-c","echo ',,83' | sfdisk " + realDevice},true) != 0) {    if (Sage.DBG)     System.out.println("ERROR running sfdisk!");    return new Integer(-3);  }  if (Sage.DBG)   System.out.println("Zeroing out the first 512 bytes of the new partition at " + realDevice + "1 ...");  IOUtils.exec2(new String[]{"sh","-c","dd if=/dev/zero of=" + realDevice + "1 count=1 bs=512"},true);  if (Sage.DBG)   System.out.println("Formatting the new partition at " + realDevice + "1 to be EXT3....this could take awhile...");  if (IOUtils.exec2(new String[]{"mke2fs","-j",realDevice + "1"},true) != 0) {    if (Sage.DBG)     System.out.println("ERROR running mke2fs!");    return new Integer(-3);  }  if (Sage.DBG)   System.out.println("Mounting the newly formatted drive back to " + mountPath);  if (IOUtils.mountExternalDrive(realDevice.substring(5) + "1",mountPath)) {    if (Sage.DBG)     System.out.println("DONE with disk partition, format and mounting!");    new java.io.File(requestedPath).mkdirs();    return new Integer(0);  } else {    if (Sage.DBG)     System.out.println("FAILED mounting!");    return new Integer(-4);  }}  }
class C{  public void departQueue() throws XMPPException {  if (!inQueue) {    return;  }  DepartQueuePacket departPacket=new DepartQueuePacket(this.workgroupJID);  PacketCollector collector=this.connection.createPacketCollector(new PacketIDFilter(departPacket.getPacketID()));  connection.sendPacket(departPacket);  IQ response=(IQ)collector.nextResult(5000);  collector.cancel();  if (response == null) {    throw new XMPPException("No response from the server.");  }  if (response.getError() != null) {    throw new XMPPException(response.getError());  }  fireQueueDepartedEvent();}  }
class C{  protected BlendMode parseBlendMode(FXGNode node,String value,BlendMode defMode){  if (FXG_BLENDMODE_ADD_VALUE.equals(value)) {    return BlendMode.ADD;  } else   if (FXG_BLENDMODE_ALPHA_VALUE.equals(value)) {    return BlendMode.ALPHA;  } else   if (FXG_BLENDMODE_DARKEN_VALUE.equals(value)) {    return BlendMode.DARKEN;  } else   if (FXG_BLENDMODE_DIFFERENCE_VALUE.equals(value)) {    return BlendMode.DIFFERENCE;  } else   if (FXG_BLENDMODE_ERASE_VALUE.equals(value)) {    return BlendMode.ERASE;  } else   if (FXG_BLENDMODE_HARDLIGHT_VALUE.equals(value)) {    return BlendMode.HARDLIGHT;  } else   if (FXG_BLENDMODE_INVERT_VALUE.equals(value)) {    return BlendMode.INVERT;  } else   if (FXG_BLENDMODE_LAYER_VALUE.equals(value)) {    return BlendMode.LAYER;  } else   if (FXG_BLENDMODE_LIGHTEN_VALUE.equals(value)) {    return BlendMode.LIGHTEN;  } else   if (FXG_BLENDMODE_MULTIPLY_VALUE.equals(value)) {    return BlendMode.MULTIPLY;  } else   if (FXG_BLENDMODE_NORMAL_VALUE.equals(value)) {    return BlendMode.NORMAL;  } else   if (FXG_BLENDMODE_OVERLAY_VALUE.equals(value)) {    return BlendMode.OVERLAY;  } else   if (FXG_BLENDMODE_SCREEN_VALUE.equals(value)) {    return BlendMode.SCREEN;  } else   if (FXG_BLENDMODE_SUBTRACT_VALUE.equals(value)) {    return BlendMode.SUBTRACT;  } else   if (getFileVersion().equalTo(FXGVersion.v1_0)) {    throw new FXGException(getStartLine(),getStartColumn(),"UnknownBlendMode",value);  } else   if (isForMobile() && getCompilerVersion().equalTo(FXGVersion.v2_0) && (FXG_BLENDMODE_COLORDOGE_VALUE.equals(value) || FXG_BLENDMODE_COLORBURN_VALUE.equals(value) || FXG_BLENDMODE_EXCLUSION_VALUE.equals(value)|| FXG_BLENDMODE_SOFTLIGHT_VALUE.equals(value)|| FXG_BLENDMODE_HUE_VALUE.equals(value)|| FXG_BLENDMODE_SATURATION_VALUE.equals(value)|| FXG_BLENDMODE_COLOR_VALUE.equals(value)|| FXG_BLENDMODE_LUMINOSITY_VALUE.equals(value))) {    FXGLog.getLogger().log(FXGLogger.WARN,"MobileUnsupportedPBBlendMode",null,((AbstractFXGNode)node).getDocumentName(),node.getStartLine(),node.getStartColumn(),value);    return BlendMode.NORMAL;  } else   if (FXG_BLENDMODE_COLORDOGE_VALUE.equals(value)) {    return BlendMode.COLORDODGE;  } else   if (FXG_BLENDMODE_COLORBURN_VALUE.equals(value)) {    return BlendMode.COLORBURN;  } else   if (FXG_BLENDMODE_EXCLUSION_VALUE.equals(value)) {    return BlendMode.EXCLUSION;  } else   if (FXG_BLENDMODE_SOFTLIGHT_VALUE.equals(value)) {    return BlendMode.SOFTLIGHT;  } else   if (FXG_BLENDMODE_HUE_VALUE.equals(value)) {    return BlendMode.HUE;  } else   if (FXG_BLENDMODE_SATURATION_VALUE.equals(value)) {    return BlendMode.SATURATION;  } else   if (FXG_BLENDMODE_COLOR_VALUE.equals(value)) {    return BlendMode.COLOR;  } else   if (FXG_BLENDMODE_LUMINOSITY_VALUE.equals(value)) {    return BlendMode.LUMINOSITY;  } else   if (FXG_BLENDMODE_AUTO_VALUE.equals(value)) {    return BlendMode.AUTO;  } else {    if (isVersionGreaterThanCompiler()) {      FXGLog.getLogger().log(FXGLogger.WARN,"UnknownBlendMode",null,getDocumentName(),startLine,startColumn,value);    } else {      throw new FXGException(getStartLine(),getStartColumn(),"UnknownBlendMode",value);    }  }  return defMode;}  }
class C{  public static boolean isDefaultIgnoreFocusComponentWhenUnfocused(){  return defaultIgnoreFocusComponentWhenUnfocused;}  }
class C{  public void persistCartIfNecessary(){  final ShoppingCart cart=ApplicationDirector.getShoppingCart();  if (cart.isModified()) {    getShoppingCartPersister().persistShoppingCart((HttpServletRequest)getRequest().getContainerRequest(),(HttpServletResponse)getResponse().getContainerResponse(),cart);  }}  }
class C{  private Set<String> runningApplications(){  String running=executeAppleScript(new String[]{"tell application \"System Events\"","	name of processes","end tell"},null);  String[] apps=running.split(", ");  Set<String> retval=new HashSet<String>();  for (int i=0; i < apps.length; ++i)   retval.add(apps[i]);  return retval;}  }
class C{  public TurtleWriter(OutputStream out){  this(new OutputStreamWriter(out,Charset.forName("UTF-8")));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns02.class,args);}  }
class C{  private static String descriptorToInternalName(String descriptor){switch (descriptor.charAt(0)) {case 'B':case 'C':case 'D':case 'F':case 'I':case 'J':case 'S':case 'Z':case 'V':case '[':    return descriptor;case 'L':  return classDescriptorToInternalName(descriptor);default :throw new IllegalArgumentException("bad descriptor:" + descriptor);}}  }
class C{  public static <K,V>boolean putMapNotNullKeyAndValue(Map<K,V> map,K key,V value){  if (map == null || key == null || value == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.SEQUENCE__ELEMENTS:    getElements().clear();  return;}super.eUnset(featureID);}  }
class C{  public void destroy(){}  }
class C{  public boolean analyse(final String timedate){  boolean okay=true;  DBTransaction transaction=TransactionPool.get().beginWork();  try {    final Iterator<GameEventEntry> itr=queryDatabase(transaction,timedate);    while (itr.hasNext()) {      final GameEventEntry entry=itr.next();      if (entry.getEvent().equals("login")) {        online.add(entry.getSource());      } else       if (entry.getEvent().equals("logout")) {        if (!online.contains(entry.getSource())) {          okay=false;          System.out.println(entry);        }        online.remove(entry.getSource());      }    }    TransactionPool.get().commit(transaction);  } catch (  Exception e) {    TransactionPool.get().rollback(transaction);    logger.error(e,e);  }  return okay;}  }
class C{  private void addUserHtml(User user,StringBuilder result,int resultNumber,String rootId) throws IOException {  if (resultNumber != -1) {    startItemListItem(result,rootId,user.getId());    result.append("<table class=\"magic nopadding\"><tr><td class=\"resultNumber\">");    result.append(getItemMetaDataJsonHtml("user",user.getId())).toString();    result.append(resultNumber + ".</td><td class=\"listItem\">");  }  result.append("Username: " + user.getUserName());  if (user.getEmail() != null) {    result.append(", email: " + user.getEmail());  }  if (user.getIsAdmin()) {    result.append(", is an admin");  }  if (user.getMayContact()) {    result.append(", may be contacted");  }  result.append("<br>");  if (resultNumber != -1) {    result.append("<div class=\"listItemFooter\">");    result.append("<div title=\"" + servletText.modTimeInListTooltip("account") + "\">"+ servletText.fragmentLastModified()+ " <span>");    result.append(formatDateAndTime(user.getModTime()) + "<span class=\"rawDateTime\">" + user.getModTime()+ "</span></span>");    result.append("</div></div>");    result.append("</td></tr></table>");    finishItemListItem(result);  } else {    result.append(servletText.fragmentLastModified() + " <span>");    result.append(formatDateAndTime(user.getModTime()) + "<span class=\"rawDateTime\">" + user.getModTime()+ "</span></span>");    result.append(". " + servletText.fragmentCreated() + " <span>");    result.append(formatDateAndTime(user.getCreateTime()) + "<span class=\"rawDateTime\">" + user.getModTime()+ "</span></span>");  }}  }
class C{  @Override public E replace(Integer key,E value){  return replace(key.intValue(),value);}  }
class C{  private void initializeRadii(DBIDs ids,KNNQuery<O> knnq,DistanceQuery<O> distFunc,WritableDoubleDataStore radii){  FiniteProgress avgDistProgress=LOG.isVerbose() ? new FiniteProgress("Calculating average kNN distances-",ids.size(),LOG) : null;  double absoluteMinDist=Double.POSITIVE_INFINITY;  double minAvgDist=Double.POSITIVE_INFINITY;  Mean mean=new Mean();  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    KNNList iterNeighbors=knnq.getKNNForDBID(iter,k);    mean.reset();    for (DBIDIter neighbor1=iterNeighbors.iter(); neighbor1.valid(); neighbor1.advance()) {      if (DBIDUtil.equal(neighbor1,iter)) {        continue;      }      for (DBIDIter neighbor2=iterNeighbors.iter(); neighbor2.valid(); neighbor2.advance()) {        if (DBIDUtil.equal(neighbor1,neighbor2) || DBIDUtil.equal(neighbor2,iter)) {          continue;        }        double distance=distFunc.distance(neighbor1,neighbor2);        mean.put(distance);        if (distance > 0. && distance < absoluteMinDist) {          absoluteMinDist=distance;        }      }    }    double currentMean=mean.getMean();    radii.putDouble(iter,currentMean);    if (currentMean < minAvgDist) {      minAvgDist=currentMean;    }    LOG.incrementProcessed(avgDistProgress);  }  LOG.ensureCompleted(avgDistProgress);  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    radii.putDouble(iter,(minAvgDist > 0) ? (absoluteMinDist * radii.doubleValue(iter) / minAvgDist) : Double.POSITIVE_INFINITY);  }}  }
class C{  private CacheEntry cacheLocked(ComponentName componentName,LauncherActivityInfoCompat info,HashMap<Object,CharSequence> labelCache,UserHandleCompat user,boolean usePackageIcon){  CacheKey cacheKey=new CacheKey(componentName,user);  CacheEntry entry=mCache.get(cacheKey);  if (entry == null) {    entry=new CacheEntry();    mCache.put(cacheKey,entry);    if (info != null) {      ComponentName labelKey=info.getComponentName();      if (labelCache != null && labelCache.containsKey(labelKey)) {        entry.title=labelCache.get(labelKey).toString();      } else {        entry.title=info.getLabel().toString();        if (labelCache != null) {          labelCache.put(labelKey,entry.title);        }      }      entry.contentDescription=mUserManager.getBadgedLabelForUser(entry.title,user);      entry.icon=Utilities.createIconBitmap(info.getBadgedIcon(mIconDpi),mContext);    } else {      entry.title="";      Bitmap preloaded=getPreloadedIcon(componentName,user);      if (preloaded != null) {        if (DEBUG)         Log.d(TAG,"using preloaded icon for " + componentName.toShortString());        entry.icon=preloaded;      } else {        if (usePackageIcon) {          CacheEntry packageEntry=getEntryForPackage(componentName.getPackageName(),user);          if (packageEntry != null) {            if (DEBUG)             Log.d(TAG,"using package default icon for " + componentName.toShortString());            entry.icon=packageEntry.icon;            entry.title=packageEntry.title;          }        }        if (entry.icon == null) {          if (DEBUG)           Log.d(TAG,"using default icon for " + componentName.toShortString());          entry.icon=getDefaultIcon(user);        }      }    }  }  return entry;}  }
class C{  private void resume(){  noxItemCatalog.addObserver(catalogObserver);  noxItemCatalog.resume();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.384 -0500",hash_original_method="EEAAA8BB7464238C2783CDD797C70C53",hash_generated_method="807AB8C3747A17BA1846DB853B649E51") static public void assertEquals(String message,double expected,double actual,double delta){  if (Double.isInfinite(expected)) {    if (!(expected == actual))     failNotEquals(message,new Double(expected),new Double(actual));  } else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Double(expected),new Double(actual));}  }
class C{  public String upperSizeTipText(){  return "Set the maximum number of instances in a dataset. Setting -1 " + "sets no upper limit (other than the total number of instances " + "in the full dataset)";}  }
class C{  public SimpleFragmentIntent<F> putParcelableArrayListExtra(String name,ArrayList<? extends Parcelable> value){  if (extras == null) {    extras=new Bundle();  }  extras.putParcelableArrayList(name,value);  return this;}  }
class C{  public User updateUser(String id,String name,String email){  failIfInvalid(name,email);  Key key=keyFactory.newKey(id);  Entity entity=datastore.get(key);  if (entity == null) {    throw new IllegalArgumentException("No user with id '" + id + "' found");  } else {    entity=Entity.builder(entity).set("id",id).set("name",name).set("email",email).build();    datastore.update(entity);  }  return new User(id,name,email);}  }
class C{  public void onEventMainThread(CreateToastMessage m){  Toast.makeText(getContext(),m.get_message(),Toast.LENGTH_SHORT).show();}  }
class C{  public ValueConverter mappingConverterFor(TableId tableId,Column column){  ColumnMapper mapper=mapperFor(tableId,column);  return mapper != null ? mapper.create(column) : null;}  }
class C{  @Override public SelectResults auxFilterEvaluate(ExecutionContext context,SelectResults intermediateResults) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  List sortedConditionsList=this.getCondtionsSortedOnIncreasingEstimatedIndexResultSize(context);  Iterator sortedConditionsItr=sortedConditionsList.iterator();  while (sortedConditionsItr.hasNext()) {    SelectResults filterResults=((Filter)sortedConditionsItr.next()).filterEvaluate(context,null);    if (_operator == LITERAL_and) {      if (filterResults != null && filterResults.isEmpty()) {        return filterResults;      } else       if (filterResults != null) {        intermediateResults=(intermediateResults == null) ? filterResults : QueryUtils.intersection(intermediateResults,filterResults,context);        sortedConditionsItr.remove();        if (intermediateResults.size() <= indexThresholdSize) {          break;        }      }    } else {      Assert.assertTrue(filterResults != null);      intermediateResults=intermediateResults == null ? filterResults : QueryUtils.union(intermediateResults,filterResults,context);    }  }  if (_operator == LITERAL_and && !sortedConditionsList.isEmpty()) {    this.unevaluatedFilterOperands=sortedConditionsList;  }  return intermediateResults;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___GET_TYPE_VARS:      return TypesPackage.BUILT_IN_TYPE___GET_TYPE_VARS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Override public boolean pathMatch(final String path,final String topmostPath){  boolean match=path.startsWith(topmostPath);  if (match && path.length() != topmostPath.length()) {    if (!topmostPath.endsWith(PATH_DELIM)) {      match=(path.charAt(topmostPath.length()) == PATH_DELIM_CHAR);    }  }  return match;}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public static void trace(byte level,String s){  trace(level,s,null);}  }
class C{  public void changeMagnification(double val){  camera.magnify(val);  updateGeometricState(0);  changed.set(true);  updateStatus();}  }
class C{  @Override protected void processSuccess(Response response,Request request,TransactionID transactionID){  super.processSuccess(response,request,transactionID);  LifetimeAttribute lifetimeAttribute;  int lifetime=-1;switch (response.getMessageType()) {case Message.ALLOCATE_RESPONSE:    lifetimeAttribute=(LifetimeAttribute)response.getAttribute(Attribute.LIFETIME);  lifetime=(lifetimeAttribute == null) ? (10 * 60) : lifetimeAttribute.getLifetime();logger.info("Successful Google TURN allocate");break;default :break;}if (lifetime >= 0) {setSendKeepAliveMessageInterval(1000L * lifetime);}Object applicationData=transactionID.getApplicationData();if (applicationData instanceof GoogleRelayedCandidateDatagramSocket) {((GoogleRelayedCandidateDatagramSocket)applicationData).processSuccess(response,request);} else if (applicationData instanceof GoogleRelayedCandidateSocket) {((GoogleRelayedCandidateSocket)applicationData).processSuccess(response,request);}}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public AbstractLocalTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger,SecurityRule securityRule){  super(source,target,actions,event,TransitionKind.LOCAL,guard,trigger,securityRule);}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  private static synchronized void initTrueRandom(long adjustedTimestamp){  _rand_m=971;  _rand_ia=11113;  _rand_ib=104322;  _rand_irand=4181;  int seed=(int)(adjustedTimestamp >>> 48) ^ (int)(adjustedTimestamp >>> 32) ^ (int)(adjustedTimestamp >>> 16)^ (int)(adjustedTimestamp & 0x000000000000FFFF);  _rand_irand=_rand_irand + seed + _osProcessId;}  }
class C{  protected synchronized void findAllModules(Collection<String> mList) throws FloodlightModuleException {  if (serviceMap != null)   return;  serviceMap=new HashMap<>();  moduleServiceMap=new HashMap<>();  moduleNameMap=new HashMap<>();  ClassLoader cl=Thread.currentThread().getContextClassLoader();  ServiceLoader<IFloodlightModule> moduleLoader=ServiceLoader.load(IFloodlightModule.class,cl);  Iterator<IFloodlightModule> moduleIter=moduleLoader.iterator();  while (moduleIter.hasNext()) {    IFloodlightModule m=null;    try {      m=moduleIter.next();    } catch (    ServiceConfigurationError sce) {      logger.error("Could not find module: {}",sce.getMessage());      continue;    }    if (logger.isDebugEnabled()) {      logger.debug("Found module " + m.getClass().getName());    }    moduleNameMap.put(m.getClass().getCanonicalName(),m);    Collection<Class<? extends IFloodlightService>> servs=m.getModuleServices();    if (servs != null) {      moduleServiceMap.put(m,servs);      for (      Class<? extends IFloodlightService> s : servs) {        Collection<IFloodlightModule> mods=serviceMap.get(s);        if (mods == null) {          mods=new ArrayList<IFloodlightModule>();          serviceMap.put(s,mods);        }        mods.add(m);        int dupInConf=0;        for (        IFloodlightModule cMod : mods) {          if (mList.contains(cMod.getClass().getCanonicalName()))           dupInConf+=1;        }        if (dupInConf > 1) {          StringBuilder sb=new StringBuilder();          for (          IFloodlightModule mod : mods) {            sb.append(mod.getClass().getCanonicalName());            sb.append(", ");          }          String duplicateMods=sb.toString();          String mess="ERROR! The configuration file " + "specifies more than one module that " + "provides the service " + s.getCanonicalName() + ". Please specify only ONE of the "+ "following modules in the config file: "+ duplicateMods;          throw new FloodlightModuleException(mess);        }      }    }  }}  }
class C{  public void registerARQPFunction(Function function){  if (function.hasProperty(SPIN.body)) {    PropertyFunctionFactory old=PropertyFunctionRegistry.get().get(function.getURI());    if (old == null || old instanceof SPINARQPFunction) {      SPINARQPFunction arqFunction=SPINARQPFunctionFactory.get().create(function);      PropertyFunctionRegistry.get().put(function.getURI(),arqFunction);    }  }}  }
class C{  public static void println(int x){  out.println(x);}  }
class C{  public void flush(){  if (inline.length() > 0) {    outStream.println(inline);  }  inline.setLength(0);  if (comment.length() > 0) {    quotePrintln(outStream,comment.toString());  }  comment.setLength(0);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void log(final LogLevel logLevel,final String msg,final Throwable t){  logger.log(logLevel.level,msg,t);}  }
class C{  public void add(double time,double cpuTime){  data[count]=time;  cpuData[count]=cpuTime;  count++;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] readBinaryFile(File sourceFile){  byte[] result=null;  try {    BufferedInputStream input;    input=new BufferedInputStream(new FileInputStream(sourceFile));    int num=input.available();    result=new byte[num];    input.read(result,0,num);    input.close();  } catch (  Exception e) {    e.printStackTrace();    result=null;  }  return result;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  GroupFileDao.createTable(db,ifNotExists);}  }
class C{  public Object addDesignations(Object entity,URI... types) throws RepositoryException {  if (entity instanceof RDFObjectBehaviour) {    RDFObjectBehaviour support=(RDFObjectBehaviour)entity;    Object delegate=support.getBehaviourDelegate();    if (delegate != entity) {      return addDesignations(delegate,types);    }  }  assert types != null && types.length > 0;  Resource resource=findResource(entity);  Set<URI> list=new HashSet<URI>(4);  getTypes(entity.getClass(),list);  boolean autoCommit=isAutoCommit();  if (autoCommit) {    setAutoCommit(false);  }  try {    for (    URI type : types) {      this.types.addTypeStatement(resource,type);      list.add(type);    }    if (autoCommit) {      setAutoCommit(true);    }  }  finally {    if (autoCommit && !isAutoCommit()) {      rollback();      setAutoCommit(true);    }  }  return cache(of.createObject(resource,list));}  }
class C{  public boolean handleMessage(Message message,Object object){  if (!super.handleMessage(message,object)) {    if (message.getType().equals(DATAMESSAGE)) {      System.out.println("Data message arrived: ");      if (!(object instanceof Hashtable)) {        System.err.println("Data must be sent in " + "Hashtable format");        return false;      }      Hashtable<String,String> data=(Hashtable<String,String>)object;      Iterator<String> keys=data.keySet().iterator();      while (keys.hasNext()) {        String key=keys.next();        System.out.println(key + " - " + data.get(key));      }    } else     return false;  }  return true;}  }
class C{  @Override public float estimateFutureCost(Rule rule,DPState currentState,Sentence sentence){  return 0.0f;}  }
class C{  public static _JobTypeEnum fromString(final String value) throws SOAPSerializationException {  return (_JobTypeEnum)Enumeration.fromString(value,_JobTypeEnum.VALUES_TO_INSTANCES);}  }
class C{  public static ThreadFactory privilegedThreadFactory(){  return new PrivilegedThreadFactory();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void swap(List<?> list,int i,int j){  final List l=list;  l.set(i,l.set(j,l.get(i)));}  }
class C{  private String logLevelToDescription(Level logLevel){  String result=s_logger.localizeMessage("guiLogLevelOff");  if (logLevel.equals(Level.ALL)) {    result=s_logger.localizeMessage("guiLogLevelAll");  } else   if (logLevel.equals(Level.FINEST)) {    result=s_logger.localizeMessage("guiLogLevelFinest");  } else   if (logLevel.equals(Level.FINER)) {    result=s_logger.localizeMessage("guiLogLevelFiner");  } else   if (logLevel.equals(Level.FINE)) {    result=s_logger.localizeMessage("guiLogLevelFine");  } else   if (logLevel.equals(Level.CONFIG)) {    result=s_logger.localizeMessage("guiLogLevelConfig");  } else   if (logLevel.equals(Level.INFO)) {    result=s_logger.localizeMessage("guiLogLevelInfo");  } else   if (logLevel.equals(Level.WARNING)) {    result=s_logger.localizeMessage("guiLogLevelWarning");  } else   if (logLevel.equals(Level.SEVERE)) {    result=s_logger.localizeMessage("guiLogLevelSevere");  } else   if (logLevel.equals(Level.OFF)) {    result=s_logger.localizeMessage("guiLogLevelOff");  }  return result;}  }
class C{  public RefactoringResult doRename(String newName) throws CoreException, InvocationTargetException, InterruptedException {  if (fOriginalName.equals(newName)) {    return DtoConverter.toRefactoringResultDto(new RefactoringStatus());  }  RenameSupport renameSupport=undoAndCreateRenameSupport(newName);  if (renameSupport == null)   return DtoConverter.toRefactoringResultDto(RefactoringStatus.createFatalErrorStatus("Can't create rename refactoring"));  RefactoringResult refactoringResult=DtoConverter.toRefactoringResultDto(renameSupport.perform());  PerformChangeOperation operation=renameSupport.getfPerformChangeOperation();  if (operation == null) {    return refactoringResult;  }  CompositeChange operationChange=(CompositeChange)operation.getUndoChange();  Change[] changes=operationChange.getChildren();  List<ChangeInfo> changesInfo=new ArrayList<>();  prepareChangesInfo(changes,changesInfo);  refactoringResult.setChanges(changesInfo);  return refactoringResult;}  }
class C{  public boolean isJavaLibraryClass(){  if (name.startsWith("java.") || name.startsWith("sun.") || name.startsWith("javax.")|| name.startsWith("com.sun.")|| name.startsWith("org.omg.")|| name.startsWith("org.xml."))   return true;  return false;}  }
class C{  public ReportSlaveIDRequest(){  super();  setFunctionCode(Modbus.REPORT_SLAVE_ID);  setDataLength(0);}  }
class C{  public int num_states(){  return _num_states;}  }
class C{  static private <E>List<E> toJavaList(List<E> values,int rows,int columns){  List<E> result=new ArrayList<>(values.size());  for (int i=0; i < values.size(); i++) {    int row=i / columns;    int column=i % columns;    E value=values.get((column * rows) + row);    result.add(value);  }  return result;}  }
class C{  public int addPadding(byte[] in,int inOff){  int count=in.length - inOff;  byte code;  if (inOff > 0) {    code=(byte)((in[inOff - 1] & 0x01) == 0 ? 0xff : 0x00);  } else {    code=(byte)((in[in.length - 1] & 0x01) == 0 ? 0xff : 0x00);  }  while (inOff < in.length) {    in[inOff]=code;    inOff++;  }  return count;}  }
class C{  public int enumerate(Thread[] threads){  return enumerate(threads,true);}  }
class C{  public Class<?> loadClass(String name) throws ClassNotFoundException {  return initClassLoader.loadClass(name);}  }
class C{  public boolean isSearchRequested(){  return getRequest().getAttribute(Constants.REQ_ATTR_SEARCH_REQUEST) != null;}  }
class C{  private Point validatePointForBubbleInViewport(Point position){  int xOffset=0;  int yOffset=0;  int x=position.x;  int y=position.y;  if (getRealAlignment() != null) {switch (getRealAlignment()) {case LEFTBOTTOM:case LEFTTOP:      xOffset=this.getObjectWidth();case RIGHTBOTTOM:case RIGHTTOP:    yOffset=(int)(this.getObjectHeight() * 0.5);  break;case TOPLEFT:case TOPRIGHT:yOffset=this.getObjectHeight();case BOTTOMLEFT:case BOTTOMRIGHT:xOffset=(int)(this.getObjectWidth() * 0.5);break;default :}}if (!(position.x + xOffset >= viewport.getLocationOnScreen().x)) {x=viewport.getLocationOnScreen().x - xOffset;}if (!(position.x + xOffset <= viewport.getLocationOnScreen().x + viewport.getSize().width)) {x=viewport.getLocationOnScreen().x + viewport.getSize().width - xOffset;}if (!(position.y + yOffset >= viewport.getLocationOnScreen().y)) {y=viewport.getLocationOnScreen().y - yOffset;}if (!(position.y + yOffset <= viewport.getLocationOnScreen().y + viewport.getSize().height)) {y=viewport.getLocationOnScreen().y + viewport.getSize().height - yOffset;}return new Point(x,y);}  }
class C{  public void onReceive(Object message){  if (message instanceof MemberUp) {    MemberUp mUp=(MemberUp)message;    logger.info("Cluster Member is Up: " + mUp.member());    memberAddresses.add(mUp.member().address());  } else   if (message instanceof UnreachableMember) {    UnreachableMember mUnreachable=(UnreachableMember)message;    logger.info("Cluster Member detected as unreachable " + mUnreachable.member());  } else   if (message instanceof MemberRemoved) {    MemberRemoved mRemoved=(MemberRemoved)message;    logger.info("Cluster Member is Removed: " + mRemoved.member());    memberAddresses.remove(mRemoved.member().address());  } else   if (message instanceof MemberEvent) {  } else {    unhandled(message);  }}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  drawDimmedLayer(canvas);  drawCropGrid(canvas);}  }
class C{  private String constructMetricQueryKey(Long startTimeStampBoundary,Metric metric,MetricQuery query){  StringBuilder sb=new StringBuilder();  sb.append(startTimeStampBoundary).append(":");  sb.append(query.getNamespace()).append(":");  sb.append(query.getScope()).append(":");  sb.append(query.getMetric()).append(":");  Map<String,String> treeMap=new TreeMap<>();  treeMap.putAll(metric.getTags());  sb.append(treeMap).append(":");  sb.append(query.getAggregator()).append(":");  sb.append(query.getDownsampler()).append(":");  sb.append(query.getDownsamplingPeriod());  return sb.toString();}  }
class C{  public boolean isOpaquePart(){  return _is_opaque_part;}  }
class C{  @Override public final boolean isOutputShutdown(){  if (self == this) {    return super.isOutputShutdown();  } else {    return self.isOutputShutdown();  }}  }
class C{  public final boolean isSystem(final String strName){  return m_globalDB.isSystem(strName);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public T caseMetadata(Metadata object){  return null;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_predicateIndex=-1;  AxesWalker walker=m_firstWalker;  while (null != walker) {    walker.fixupVariables(vars,globalsSize);    walker=walker.getNextWalker();  }}  }
class C{  public static double angularRatio(Angle x,Angle y){  if (x == null || y == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double unclampedRatio=x.divide(y);  return clampDouble(unclampedRatio,0,1);}  }
class C{  public SortedEvictionPolicy(int max,int batchSize,@Nullable Comparator<EvictableEntry<K,V>> comp){  A.ensure(max >= 0,"max >= 0");  A.ensure(batchSize > 0,"batchSize > 0");  this.max=max;  this.batchSize=batchSize;  this.comp=comp == null ? new DefaultHolderComparator<K,V>() : new HolderComparator<>(comp);  this.set=new GridConcurrentSkipListSetEx<>(this.comp);}  }
class C{  public static boolean isCodecSupported(String codec){  Format format=sSupportedCodexs.get(codec.toLowerCase());  return (format != null);}  }
class C{  private TBSCertList(int version,AlgorithmIdentifier signature,Name issuer,Date thisUpdate,Date nextUpdate,List<RevokedCertificate> revokedCertificates,Extensions crlExtensions,byte[] encoding){  this.version=version;  this.signature=signature;  this.issuer=issuer;  this.thisUpdate=thisUpdate;  this.nextUpdate=nextUpdate;  this.revokedCertificates=revokedCertificates;  this.crlExtensions=crlExtensions;  this.encoding=encoding;}  }
class C{  public int startPc(int nth){  ExceptionTableEntry e=(ExceptionTableEntry)entries.get(nth);  return e.startPc;}  }
class C{  public Element svgRect(double x,double y,double w,double h){  return SVGUtil.svgRect(document,x,y,w,h);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS06.class,args);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  draw(g2,area,null);}  }
class C{  public static void enableStatsD(ManagedServiceBuilder managedServiceBuilder,URI uri){  if (!uri.getScheme().equals("udp"))   throw new IllegalStateException("Scheme must be udp");  enableStatsD(managedServiceBuilder,uri.getHost(),uri.getPort());}  }
class C{  Version acquireReadLockForCurrentVersion(){  Version currentVersion;  do {    currentVersion=this.currentVersion;  } while (!currentVersion.lock.readLock().tryLock());  return currentVersion;}  }
class C{  public void testUpdate1() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 4 WHERE id = 3");}  }
class C{  @SuppressWarnings("unchecked") private Class<?> findMatchingClass(){  String[] classNameParts=mShortClassName.split("\\.");  String currentName=mPackageName + "." + classNameParts[0];  try {    Class<?> clz=Class.forName(currentName,false,this.getClass().getClassLoader());    if (clz.getCanonicalName().equals(mAbsoluteClassName)) {      return clz;    }    for (int x=1; x < classNameParts.length; x++) {      clz=findInnerClassByName(clz,classNameParts[x]);      if (clz == null) {        return null;      }      if (clz.getCanonicalName().equals(mAbsoluteClassName)) {        return clz;      }    }  } catch (  ClassNotFoundException e) {    return null;  }  return null;}  }
class C{  private void chooseDestinationFile(){  FileFilter fileFilter=null;  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {    fileFilter=m_csvFileFilter;  } else {    fileFilter=m_arffFileFilter;  }  m_DestFileChooser.setFileFilter(fileFilter);  int returnVal=m_DestFileChooser.showSaveDialog(this);  if (returnVal != JFileChooser.APPROVE_OPTION) {    return;  }  m_ResultsDestinationPathTField.setText(m_DestFileChooser.getSelectedFile().toString());}  }
class C{  public C1_DTLZ3(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public void readSecurityToken(BaseGenericIdEntity<?> resultEntity){  if (BaseEntityInternalAccess.getSecurityToken(resultEntity) == null) {    return;  }  BaseEntityInternalAccess.setFilteredData(resultEntity,null);  Cipher cipher=getCipher(Cipher.DECRYPT_MODE);  try {    byte[] decrypted=cipher.doFinal(BaseEntityInternalAccess.getSecurityToken(resultEntity));    String json=new String(decrypted,StandardCharsets.UTF_8);    JSONObject jsonObject=new JSONObject(json);    for (    Object key : jsonObject.keySet()) {      String elementName=String.valueOf(key);      JSONArray jsonArray=jsonObject.getJSONArray(elementName);      for (int i=0; i < jsonArray.length(); i++) {        String id=jsonArray.getString(i);        addFiltered(resultEntity,elementName,UUID.fromString(id));      }    }  } catch (  Exception e) {    throw new RuntimeException("An error occurred while reading security token",e);  }}  }
class C{  @Override public void addRangeCrosshair(Crosshair crosshair){  addRangeCrosshair(0,crosshair);}  }
class C{  public boolean isAutoErrorReport(){  Object oo=get_Value(COLUMNNAME_IsAutoErrorReport);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean parseArithmeticExpression(BashPsiBuilder builder,IElementType endToken){  if (builder.getTokenType() == endToken) {    builder.advanceLexer();    return true;  }  while ((builder.getTokenType() != endToken) && !builder.eof()) {    if (!ArithmeticFactory.entryPoint().parse(builder)) {      return false;    }  }  final IElementType foundEndToken=ParserUtil.getTokenAndAdvance(builder);  return (!builder.eof() && foundEndToken == endToken);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand() == Inspector.doneCommand) {    if (layer != null && layerHandler != null) {      if (layer instanceof Layer) {        layerHandler.addLayer((Layer)layer,0);      }      prefixTextField.setText(DefaultLayerName);    } else     if (layerHandler != null) {      String message=i18n.get(LayerAddPanel.class,"noLayerHandlerMessage","Layer Handler not found.\nCan't find anything to add the layer to.");      JOptionPane.showMessageDialog(this,message);    } else {      String message=i18n.get(LayerAddPanel.class,"noLayerCreatedMessage","No Layer instantiated.");      JOptionPane.showMessageDialog(this,message);    }  } else   if (e.getActionCommand() == Inspector.cancelCommand) {    if (layer != null && propertyHandler != null) {      propertyHandler.removeUsedPrefix(((PropertyConsumer)layer).getPropertyPrefix());    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.226 -0500",hash_original_method="E046B5DACDD94AD026F81045FF391CD1",hash_generated_method="F17286D5428B6A5E43260B1B6BC9CB17") public ProxyAuthorizationHeader createProxyAuthorizationHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("bad scheme arg");  ProxyAuthorization p=new ProxyAuthorization();  p.setScheme(scheme);  return p;}  }
class C{  public void showAllocators(final StringBuilder str){  m_storageStats.showStats(str);  str.append("\nChecking regions.....");  final Lock lock=m_allocationLock.readLock();  lock.lock();  try {    final HashMap<Integer,FixedAllocator> map=new HashMap<Integer,FixedAllocator>();    for (    FixedAllocator fa : m_allocs) {      fa.addToRegionMap(map);    }    str.append("okay\n");  } catch (  IllegalStateException is) {    str.append(is.getMessage() + "\n");  } finally {    lock.unlock();  }}  }
class C{  static public double[] regres(Vec xData,Vec yData){  double[] toReturn=new double[2];  toReturn[1]=DescriptiveStatistics.sampleCorCoeff(xData,yData) * yData.standardDeviation() / xData.standardDeviation();  toReturn[0]=yData.mean() - toReturn[1] * xData.mean();  return toReturn;}  }
class C{  public String convertBooleanPropertyAttributeTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void registerSMSObserver(){  context.getContentResolver().registerContentObserver(Uri.parse("content://sms/"),true,this);}  }
class C{  @LargeTest public void testMediaVideoItemEffect() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  assertTrue("Effect List Size",(mediaVideoItem1.getAllEffects().size() == 0) ? true : false);  assertNull("Effect Item by ID",mediaVideoItem1.getEffect("xyx"));  final EffectColor effectColor=mVideoEditorHelper.createEffectItem(mediaVideoItem1,"Effecton MVi1",0,4000,EffectColor.TYPE_GRADIENT,EffectColor.GRAY);  mediaVideoItem1.addEffect(effectColor);  assertTrue("Effect List Size",(mediaVideoItem1.getAllEffects().size() == 1) ? true : false);  assertEquals("Effect Item by Valid ID",effectColor,mediaVideoItem1.getEffect(effectColor.getId()));  assertNull("Effect Item by Invalid ID",mediaVideoItem1.getEffect("xyz"));  assertNull("Effect Item by Invalid ID",mediaVideoItem1.removeEffect("effectId"));  assertTrue("Effect List Size",(mediaVideoItem1.getAllEffects().size() == 1) ? true : false);  assertEquals("Effect Removed",effectColor,mediaVideoItem1.removeEffect(effectColor.getId()));  assertTrue("Effect List Size",(mediaVideoItem1.getAllEffects().size() == 0) ? true : false);  assertNull("Effect Item by ID",mediaVideoItem1.getEffect("effectId"));}  }
class C{  private static List<LoadMetadataDetails> identifySegmentsToBeMergedBasedOnSize(long compactionSize,List<LoadMetadataDetails> listOfSegmentsAfterPreserve,CarbonLoadModel carbonLoadModel,int partitionCount,String storeLocation){  List<LoadMetadataDetails> segmentsToBeMerged=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  CarbonTableIdentifier tableIdentifier=carbonLoadModel.getCarbonDataLoadSchema().getCarbonTable().getCarbonTableIdentifier();  long totalLength=0;  for (  LoadMetadataDetails segment : listOfSegmentsAfterPreserve) {    String segId=segment.getLoadName();    long sizeOfOneSegmentAcrossPartition=getSizeOfOneSegmentAcrossPartition(partitionCount,storeLocation,tableIdentifier,segId);    if (sizeOfOneSegmentAcrossPartition > (compactionSize * 1024 * 1024)) {      if (segmentsToBeMerged.size() > 1) {        break;      } else {        segmentsToBeMerged=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);        totalLength=0;        continue;      }    }    totalLength+=sizeOfOneSegmentAcrossPartition;    if (totalLength < (compactionSize * 1024 * 1024)) {      segmentsToBeMerged.add(segment);    } else {      if (segmentsToBeMerged.size() > 1) {        break;      } else {        segmentsToBeMerged=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);        segmentsToBeMerged.add(segment);        totalLength=sizeOfOneSegmentAcrossPartition;      }    }  }  return segmentsToBeMerged;}  }
class C{  public Block parse() throws ParseException {  Block program=parseProgram();  tq.expectEmpty();  return program;}  }
class C{  public TrailedPortrayal2D(GUIState state,SimplePortrayal2D child,FieldPortrayal2D fieldPortrayal,double length,Color minColor,Color maxColor){  this.state=state;  this.child=child;  this.trail=new DefaultTrail();  this.length=length;  this.fieldPortrayal=fieldPortrayal;  defaultMap=new SimpleColorMap(0,1.0,minColor,maxColor);}  }
class C{  public CUgraphicsResource(){}  }
class C{  public void testSetProfileSql() throws Exception {  ((com.mysql.jdbc.Connection)this.conn).setProfileSql(false);  this.stmt.execute("SELECT 1");  ((com.mysql.jdbc.Connection)this.conn).setProfileSql(true);  this.stmt.execute("SELECT 1");}  }
class C{  public ObjectFactory(){}  }
class C{  public TileSensor(OdorWorldEntity parent,int x,int y,int width,int height){  super(parent,"Tile (" + x + ","+ y+ "):"+ width+ "x"+ height);  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  @Override public void notifyDeviceInfoChanged(DeviceServer device){  if ((device.getUDID() != null) && (deviceList.size() > 0)) {    for (int i=0; i < deviceList.size(); i++) {      DeviceServer listDevice=deviceList.get(i);      if ((device != listDevice) && (listDevice.getUDID() != null) && (listDevice.getUDID().equals(device.getUDID()))) {        log.debug("Has duplicate of device, clearing old one.");        listDevice.closeThrottles();        break;      }    }  }  withrottlesListModel.updateDeviceList(deviceList);}  }
class C{  public void loadThis(){  if ((access & Opcodes.ACC_STATIC) != 0) {    throw new IllegalStateException("no 'this' pointer within static method");  }  mv.visitVarInsn(Opcodes.ALOAD,0);}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  @Override public void loadingComplete(FormLoaderTask task){  dismissDialog(PROGRESS_DIALOG);  FormController formController=task.getFormController();  boolean pendingActivityResult=task.hasPendingActivityResult();  boolean hasUsedSavepoint=task.hasUsedSavepoint();  int requestCode=task.getRequestCode();  int resultCode=task.getResultCode();  Intent intent=task.getIntent();  mFormLoaderTask.setFormLoaderListener(null);  FormLoaderTask t=mFormLoaderTask;  mFormLoaderTask=null;  t.cancel(true);  t.destroy();  Collect.getInstance().setFormController(formController);  CompatibilityUtils.invalidateOptionsMenu(this);  Collect.getInstance().setExternalDataManager(task.getExternalDataManager());  String[] languageTest=formController.getLanguages();  if (languageTest != null) {    String defaultLanguage=formController.getLanguage();    String newLanguage="";    String selection=FormsColumns.FORM_FILE_PATH + "=?";    String selectArgs[]={mFormPath};    Cursor c=null;    try {      c=getContentResolver().query(FormsColumns.CONTENT_URI,null,selection,selectArgs,null);      if (c.getCount() == 1) {        c.moveToFirst();        newLanguage=c.getString(c.getColumnIndex(FormsColumns.LANGUAGE));      }    }  finally {      if (c != null) {        c.close();      }    }    try {      formController.setLanguage(newLanguage);    } catch (    Exception e) {      formController.setLanguage(defaultLanguage);    }  }  if (pendingActivityResult) {    populateViews((Preset)getIntent().getParcelableExtra("fields"));    onActivityResult(requestCode,resultCode,intent);    return;  }  if (formController.getInstancePath() == null) {    String time=new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss",Locale.ENGLISH).format(Calendar.getInstance().getTime());    String file=mFormPath.substring(mFormPath.lastIndexOf('/') + 1,mFormPath.lastIndexOf('.'));    String path=Collect.getInstance().getInstancesPath() + File.separator + file+ "_"+ time;    if (FileUtils.createFolder(path)) {      formController.setInstancePath(new File(path + File.separator + file+ "_"+ time+ ".xml"));    }  }  Patient patient=getIntent().getParcelableExtra("patient");  if (patient != null) {    setTitle(patient.id + ": " + patient.givenName+ " "+ patient.familyName);  } else {    setTitle(formController.getFormTitle());  }  populateViews((Preset)getIntent().getParcelableExtra("fields"));}  }
class C{  void rightShift(int n){  if (intLen == 0)   return;  int nInts=n >>> 5;  int nBits=n & 0x1F;  this.intLen-=nInts;  if (nBits == 0)   return;  int bitsInHighWord=BigInteger.bitLengthForInt(value[offset]);  if (nBits >= bitsInHighWord) {    this.primitiveLeftShift(32 - nBits);    this.intLen--;  } else {    primitiveRightShift(nBits);  }}  }
class C{  private void checkRemarks() throws Exception {  int index;  if (_remarks != null) {    index=_remarks.indexOf("\"");    if (index > -1)     ISicresAdminBasicException.throwException(ISicresAdminRepositoryKeys.EC_REP_REMARKS_EXIST_QUOTES);  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_arg2)   m_arg2.fixupVariables(vars,globalsSize);}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(getAccessFlags());}  }
class C{  public synchronized int writeToStream(OutputStream out) throws InterruptedException, IOException {  while (mSize == 0 && !mClosed) {    wait(TIMEOUT);  }  if (mSize == 0 && mClosed) {    return -1;  } else {    final boolean wasFull=mSize == mBuf.length;    final int copied=Math.min(mSize,mBuf.length - mStart);    out.write(mBuf,mStart,copied);    mStart+=copied;    mSize-=copied;    if (mStart == mBuf.length) {      mStart=0;    }    if (wasFull) {      notifyAll();    }    assert globalIntegrity();    if (copied / 1000 < mReadHist.length - 1) {      mReadHist[copied / 1000]++;    } else {      mReadHist[mReadHist.length - 1]++;    }    return copied;  }}  }
class C{  private JSONGroupParser parseJSON() throws AdeInternalException, AdeUsageException {  JSONGroupParser jsonParser=new JSONGroupParser();  jsonParser.parseJSON(inputJSONFile);  return jsonParser;}  }
class C{  private static boolean isOlderThanLeopard(){  String version=System.getProperty("os.version");  StringTokenizer tk=new StringTokenizer(version,".");  int major=Integer.parseInt(tk.nextToken());  int minor=Integer.parseInt(tk.nextToken());  return major == 10 && minor < 6;}  }
class C{  @SuppressWarnings("resource") public VLPaCoTrieDistributor(final Iterable<? extends T> elements,final long size,final int bucketSize,final TransformationStrategy<? super T> transformationStrategy) throws IOException {  this.transformationStrategy=transformationStrategy;  ProgressLogger pl=new ProgressLogger(LOGGER);  pl.displayLocalSpeed=true;  pl.displayFreeMemory=true;  pl.itemsName="keys";  PartialTrie<T> immutableBinaryTrie=new PartialTrie<T>(elements,size,bucketSize,transformationStrategy,pl);  FastByteArrayOutputStream fbStream=new FastByteArrayOutputStream();  OutputBitStream trie=new OutputBitStream(fbStream,0);  pl.expectedUpdates=immutableBinaryTrie.size;  pl.start("Converting to bitstream...");  numberOfLeaves=immutableBinaryTrie.toStream(trie,pl);  pl.done();  offset=immutableBinaryTrie.offset;  LOGGER.debug("Trie bit size: " + trie.writtenBits());  trie.flush();  fbStream.trim();  this.trie=fbStream.array;  if (DDEBUG) {    MutableString s=new MutableString();    recToString(new InputBitStream(this.trie),new MutableString(),s,new MutableString(),0);    System.err.println(s);  }}  }
class C{  public String generateXml(Screen screen){  Resource resource=new Resource();  List<Dimen> dimens=resource.getDimens();  float cellWidth=screen.getWidth() * 1.0f / baseWidth;  float cellHeight=screen.getHeight() * 1.0f / beseHeight;  String result=null;  Dimen dimen=null;  for (int i=1; i <= baseWidth; i++) {    result=DECIMAL_FORMAT.format(i * cellWidth);    dimen=new Dimen();    dimen.setName(String.format("x%d",i));    dimen.setValue(String.format("%spx",result));    dimens.add(dimen);  }  for (int i=1; i <= beseHeight; i++) {    result=DECIMAL_FORMAT.format(i * cellHeight);    dimen=new Dimen();    dimen.setName(String.format("y%d",i));    dimen.setValue(String.format("%spx",result));    dimens.add(dimen);  }  String xml=XSTREAM.toXML(resource);  return xml;}  }
class C{  @BeforeMethod public void init() throws Exception {  MockitoAnnotations.initMocks(this);  storageManager=new CmrStorageManager();  storageManager.setStorageDefaultFolder("storageTest");  storageManager.storageDataDao=storageDataDao;  storageManager.storageWriterProvider=storageWriterProvider;  storageManager.storageRecorder=storageRecorder;  storageManager.buffer=buffer;  storageManager.setSerializationManagerProvider(serializationManagerProvider);  storageManager.serverStatusService=serverStatusService;  storageManager.log=LoggerFactory.getLogger(CmrStorageManager.class);  storageManager.versionService=versionService;  when(storageWriterProvider.getCmrStorageWriter()).thenReturn(storageWriter);  when(serializationManagerProvider.createSerializer()).thenReturn(serializer);  when(versionService.getVersionAsString()).thenReturn(CMR_VERSION);  Field field=StorageManager.class.getDeclaredField("log");  field.setAccessible(true);  field.set(storageManager,LoggerFactory.getLogger(CmrStorageManager.class));  field=StorageManager.class.getDeclaredField("storageUploadsFolder");  field.setAccessible(true);  field.set(storageManager,"uploadTest");  storageManager.postConstruct();}  }
class C{  private static int numOrdinals(int level,long offset){  return (1 << level) + (int)(offset & slotsMask(level));}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public float dot(PVector v){  return x * v.x + y * v.y + z * v.z;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:12.732 -0500",hash_original_method="58A8309A1516CB825A1DBAF515FA0A22",hash_generated_method="CB2D009993CB3DB2DF034FA86EC5C8C4") public BERSet(DEREncodable obj){  super(obj);}  }
class C{  private static void drawTouchIconToCanvas(Context context,Bitmap touchIcon,Canvas canvas){  Rect iconBounds=new Rect(0,0,canvas.getWidth(),canvas.getHeight());  Rect src=new Rect(0,0,touchIcon.getWidth(),touchIcon.getHeight());  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);  paint.setFilterBitmap(true);  canvas.drawBitmap(touchIcon,src,iconBounds,paint);  int borderRadii=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,TOUCHICON_BORDER_RADII_DP,context.getResources().getDisplayMetrics());  Path path=new Path();  path.setFillType(Path.FillType.INVERSE_WINDING);  RectF rect=new RectF(iconBounds);  rect.inset(INSET_DIMENSION_FOR_TOUCHICON,INSET_DIMENSION_FOR_TOUCHICON);  path.addRoundRect(rect,borderRadii,borderRadii,Path.Direction.CW);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  canvas.drawPath(path,paint);}  }
class C{  protected void applyValues(){  this.setValues();}  }
class C{  private TaskHandle addToQueue(TargetType targetType,String targetName,String tld){  return queue.add(TaskOptions.Builder.withDefaults().method(Method.PULL).param(DNS_TARGET_TYPE_PARAM,targetType.toString()).param(DNS_TARGET_NAME_PARAM,targetName).param(PARAM_TLD,tld));}  }
class C{  public String runComplete(EvolutionState state){  if (message != null) {    return message;  }  try {    String ww=fromServer.readUTF();    if (alreadyReadGoodBye) {      if (state.quitOnRunComplete) {        message="Exit: Another island found the perfect individual.";        toServer.writeUTF(OKAY);        toServer.flush();      } else {        state.output.message("Another island found the perfect individual.");      }    } else {      message="Exit: Could not communicate with the server.";    }  } catch (  InterruptedIOException e) {  }catch (  IOException e) {    state.output.warning("Some weird IO exception reported by the system in the IslandExchange::runComplete function.  Is it possible that the server has crashed?");  }  return null;}  }
class C{  public boolean allowMultipleAdditions(String systemName){  int i=matchTentative(systemName);  if (i >= 0) {    return ((LightManager)getMgr(i)).allowMultipleAdditions(systemName);  }  return false;}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public boolean isFrozen(){  return true;}  }
class C{  public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Throwable thrown){  throw new RuntimeException();}  }
class C{  public static long firstFlag(long flags){  long flag=1;  while ((flag & flags & ExtendedStandardFlags) == 0)   flag=flag << 1;  return flag;}  }
class C{  public static float toPixelFromSP(double value){  return toPixelFromSP((float)value);}  }
class C{  public static boolean isModVersionAccepted(String modId,Pattern regex,int... comparators){  String version=getModVersion(modId);  if (!version.isEmpty()) {    Matcher match=regex.matcher(version);    if (match.find()) {      for (int i=0; i < comparators.length && i < match.groupCount(); i++) {        if (compareStringInt(match.group(i),comparators[i]))         return false;      }      return true;    }  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRANSITION___GUARD_1:    return guard_1 != null && !guard_1.isEmpty();case UmplePackage.TRANSITION___EVENT_DEFINITION_1:  return eventDefinition_1 != null && !eventDefinition_1.isEmpty();case UmplePackage.TRANSITION___ACTION_1:return action_1 != null && !action_1.isEmpty();case UmplePackage.TRANSITION___STATE_NAME_1:return STATE_NAME_1_EDEFAULT == null ? stateName_1 != null : !STATE_NAME_1_EDEFAULT.equals(stateName_1);}return super.eIsSet(featureID);}  }
class C{  public void requestCapabilities(ContactId contact) throws PayloadException, NetworkException, ContactManagerException {  if (logger.isActivated()) {    logger.debug("Request capabilities in background for " + contact);  }  AnonymousFetchRequestTask task=new AnonymousFetchRequestTask(mImsModule,contact,mRcsSettings,mContactManager);  task.start();}  }
class C{  private String error(){  Map<String,List<ConversionMethod>> conversions=xml.conversionsLoad();  String methodName="illegalCode";  String paramater="";  String resource=xml.getXmlPath();  if (!isNull(resource)) {    boolean isPath=isPath(resource);    methodName=!isPath ? "illegalCodeContent" : "illegalCode";    if (!conversions.isEmpty() && !isNull(conversions.get(configClass.getName()))) {      if (!isPath)       resource=doubleQuotesHandling(resource);      paramater=write(",\"",resource,"\"");    }  }  return write("com.googlecode.jmapper.config.Error#",methodName,"(e,\"",methodToGenerate.getOriginalName(),"\",\"",configClass.getSimpleName(),"\"",paramater,");");}  }
class C{  public void validateSabrParameters(final double alpha,final double beta,final double nu,final double rho){  QL.require(alpha > 0.0,"alpha must be positive");  QL.require(beta >= 0.0 && beta <= 1.0,"beta must be in (0.0, 1.0)");  QL.require(nu >= 0.0,"nu must be non negative");  QL.require(rho * rho < 1.0,"rho square must be less than one");}  }
class C{  static boolean arrayGettersSafe(Class<?> subclass,Class<?> immutableClass){  if (subclass == immutableClass)   return true;synchronized (arrayGettersSafeMap) {    Boolean safe=arrayGettersSafeMap.get(subclass);    if (safe == null) {      try {        ArrayGettersSafeAction action=new ArrayGettersSafeAction(subclass,immutableClass);        safe=AccessController.doPrivileged(action);      } catch (      Exception e) {        safe=false;      }      arrayGettersSafeMap.put(subclass,safe);    }    return safe;  }}  }
class C{  public static boolean equalsIgnoreCase(String str1,String str2){  return (str1 == null ? str2 == null : str1.equalsIgnoreCase(str2));}  }
class C{  private void recalculateAttributeStatistics(List<Attribute> attributeList){  if (attributeList.size() == 0) {    return;  } else {    for (    Attribute attribute : attributeList) {      Iterator<Statistics> stats=attribute.getAllStatistics();      while (stats.hasNext()) {        Statistics statistics=stats.next();        statistics.startCounting(attribute);      }    }    Attribute weightAttribute=getAttributes().getWeight();    if ((weightAttribute != null) && (!weightAttribute.isNumerical())) {      weightAttribute=null;    }    for (    Example example : this) {      for (      Attribute attribute : attributeList) {        double value=example.getValue(attribute);        double weight=1.0d;        if (weightAttribute != null) {          weight=example.getValue(weightAttribute);        }        Iterator<Statistics> stats=attribute.getAllStatistics();        while (stats.hasNext()) {          Statistics statistics=stats.next();          statistics.count(value,weight);        }      }    }    for (    Attribute attribute : attributeList) {      List<Statistics> statisticsList=statisticsMap.get(attribute.getName());      if (statisticsList == null) {        statisticsList=new LinkedList<Statistics>();        statisticsMap.put(attribute.getName(),statisticsList);      }      statisticsList.clear();      Iterator<Statistics> stats=attribute.getAllStatistics();      while (stats.hasNext()) {        Statistics statistics=(Statistics)stats.next().clone();        statisticsList.add(statistics);      }    }  }}  }
class C{  public T caseScheduleTimeEvent(ScheduleTimeEvent object){  return null;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.452 -0500",hash_original_method="27990C90801E0788D0DEC119EA5D904E",hash_generated_method="D44D088758A5484E469199565F51B0BB") public void bindNull(int index){  mPreparedStatement.bindNull(index);}  }
class C{  public void testGetPropertyNames(){  UnboundBean instance=new UnboundBeanImpl();  Set<String> expResult=new HashSet<>(6);  expResult.add(CLASS);  expResult.add(PROPERTY_NAMES);  expResult.add(STRING_PROPERTY);  expResult.add(INDEXED_PROPERTY);  Set<String> result=instance.getPropertyNames();  assertEquals(expResult,result);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void qualityValue(boolean quality){}  }
class C{  public void resetBehaviorMask(){  behaviorMask=DEFAULT_BEHAVIOR_MASK;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean adjustEntryIncremental(E entry,SpatialComparable responsibleMBR){  return ((SpatialDirectoryEntry)entry).extendMBR(responsibleMBR);}  }
class C{  protected void validateSpUniqueId(java.lang.String[] param){}  }
class C{  protected void sequence_AnnotatedN4MemberDeclaration_BogusTypeRefFragment_ColonSepTypeRef_FieldDeclarationImpl_N4FieldDeclaration(ISerializationContext context,N4FieldDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isAddColumnSupported(){  return true;}  }
class C{  public RxJava1ClientWebRequestBuilder body(Object content){  this.delegate.body(Mono.just(content),ResolvableType.forInstance(content));  return this;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  double[] imageSDs;  String[] shortNames=null;  String[] units=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one image must be specified for an image correlation.");    return;  }  try {    imageSDs=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    double[] data;    for (a=0; a < numImages; a++) {      updateProgress("Image " + (a + 1) + ", Calculating image averages:",-1);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      double imageTotal=0;      double imageN=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotal+=data[col];            imageN++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      double imageAverage=imageTotal / imageN;      double totalDeviation=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            totalDeviation+=(data[col] - imageAverage) * (data[col] - imageAverage);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      imageSDs[a]=Math.sqrt(totalDeviation / (imageN - 1));      image.close();      progress=(int)(100f * (a + 1) / numImages);      updateProgress("Image " + (a + 1) + ", Calculating image average:",(int)progress);    }    String retstr=null;    retstr="IMAGE STANDARD DEVIATION\n";    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageSDs[a]);    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View view=inflater.inflate(R.layout.fragment_challenge_text,container,false);  mAnswerInput=(EditText)view.findViewById(R.id.answerText);  mAnswerInputLayout=(TextInputLayout)view.findViewById(R.id.input_answer_layout);  mAnswerInput.setOnEditorActionListener(this);  return view;}  }
class C{  public boolean isMatch(){  return match;}  }
class C{  public static void error(Throwable problem,String detail){  _errorCallback.error(problem,detail);}  }
class C{  public static boolean isJavaMIMEType(String str){  return (str != null && str.startsWith(JavaMIME,0));}  }
class C{  public static <S extends Serializable>S deserialize(byte[] bytes) throws IOException {  if (bytes == null) {    return null;  }  return deserialize(new ByteArrayInputStream(bytes));}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public Insets insets(){  return getInsets();}  }
class C{  @SuppressWarnings("deprecation") public XSession currentSession() throws HibernateException {  Object value=TransactionSynchronizationManager.getResource(this.sessionFactory);  if (value instanceof XSession) {    return (XSession)value;  } else   if (value instanceof SessionHolder) {    SessionHolder sessionHolder=(SessionHolder)value;    XSession session=(XSession)sessionHolder.getSession();    if (TransactionSynchronizationManager.isSynchronizationActive() && !sessionHolder.isSynchronizedWithTransaction()) {      TransactionSynchronizationManager.registerSynchronization(new SpringSessionSynchronization(sessionHolder,this.sessionFactory));      sessionHolder.setSynchronizedWithTransaction(true);      FlushMode flushMode=session.getFlushMode();      if (FlushMode.isManualFlushMode(flushMode) && !TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {        session.setFlushMode(FlushMode.AUTO);        sessionHolder.setPreviousFlushMode(flushMode);      }    }    return session;  } else   if (this.jtaSessionContext != null) {    XSession session=this.jtaSessionContext.currentSession();    if (TransactionSynchronizationManager.isSynchronizationActive()) {      TransactionSynchronizationManager.registerSynchronization(new SpringFlushSynchronization(session));    }    return session;  } else {    throw new HibernateException("No Session found for current thread");  }}  }
class C{  public void registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener){  preferences.registerOnSharedPreferenceChangeListener(listener);}  }
class C{  public static IntervalOptions parse(String options){  IntervalOptions intOps=new IntervalOptions();  if (options != null) {    StringOwnTokenizer tok=new StringOwnTokenizer(options,",");    String opt;    while (tok.hasMoreTokens()) {      opt=tok.nextToken().trim();      if ("*".equals(opt))       intOps.setAllItems(true); else       if (opt.indexOf("-") > -1) {        intOps.addOption(parseRange(opt));      } else       intOps.addOption(new IntervalSimpleOption(opt));    }  }  return intOps;}  }
class C{  public void reset(){  reset(mValues);}  }
class C{  @JsonCreator public VectorClock(@JsonProperty("entries") List<ClockEntry> versions,@JsonProperty("timestamp") long timestamp){  this.versions=versions;  this.timestamp=timestamp;}  }
class C{  public static FilePath[] sortPathsFromInnermost(FilePath[] files){  return sortPaths(files,-1);}  }
class C{  @HLEFunction(nid=0xDAA3F564,version=150) public int sceKernelReferAlarmStatus(@CheckArgument("checkAlarmID") int alarmUid,TPointer infoAddr){  SceKernelAlarmInfo sceKernelAlarmInfo=alarms.get(alarmUid);  sceKernelAlarmInfo.write(infoAddr);  return 0;}  }
class C{  public FastBufferedOutputStream(final OutputStream os,final int bufferSize){  this(os,new byte[ensureBufferSize(bufferSize)]);}  }
class C{  public void put(Object obj){  ConstantPoolData data=hash.get(obj);  if (data == null) {    if (obj instanceof String) {      data=new StringConstantData(this,(String)obj);    } else     if (obj instanceof StringExpression) {      data=new StringExpressionConstantData(this,(StringExpression)obj);    } else     if (obj instanceof ClassDeclaration) {      data=new ClassConstantData(this,(ClassDeclaration)obj);    } else     if (obj instanceof Type) {      data=new ClassConstantData(this,(Type)obj);    } else     if (obj instanceof MemberDefinition) {      data=new FieldConstantData(this,(MemberDefinition)obj);    } else     if (obj instanceof NameAndTypeData) {      data=new NameAndTypeConstantData(this,(NameAndTypeData)obj);    } else     if (obj instanceof Number) {      data=new NumberConstantData(this,(Number)obj);    }    hash.put(obj,data);  }}  }
class C{  public RequestCreator noFade(){  noFade=true;  return this;}  }
class C{  BlazeEdge(final BlazeGraph graph,final BigdataStatement stmt,final BigdataURI label,final BlazeVertex from,final BlazeVertex to){  super(graph,stmt.getPredicate(),label);  final BigdataValueFactory rdfvf=graph.rdfValueFactory();  this.sid=rdfvf.createBNode(stmt);  this.vertices=new Vertices(from,to);}  }
class C{  public static <T>List<List<T>> split(int partitionSize,List<T> collection){  List<List<T>> lists=new LinkedList<List<T>>();  for (int i=0; i < collection.size(); i+=partitionSize) {    int jLimit=Math.min(collection.size(),i + partitionSize);    List<T> newList=new LinkedList<T>();    for (int j=i; j < jLimit; j++) {      newList.add(collection.get(j));    }    lists.add(newList);  }  return lists;}  }
class C{  public NodeList selectNodeList(Node contextNode,Node xpathnode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,xpathnode,str,namespaceNode);  return list.nodelist();}  }
class C{  public String createManufacturingOrders(String facilityId,Date date,String workEffortName,String description,String routingId,String orderId,String orderItemSeqId,String shipGroupSeqId,String shipmentId,GenericValue userLogin) throws GenericEntityException {  String workEffortId=null;  if (root != null) {    if (UtilValidate.isEmpty(facilityId)) {      if (orderId != null) {        GenericValue order=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();        String productStoreId=order.getString("productStoreId");        if (productStoreId != null) {          GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);          if (productStore != null) {            facilityId=productStore.getString("inventoryFacilityId");          }        }      }      if (facilityId == null && shipmentId != null) {        GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();        facilityId=shipment.getString("originFacilityId");      }    }    Map<String,Object> tmpMap=root.createManufacturingOrder(facilityId,date,workEffortName,description,routingId,orderId,orderItemSeqId,shipGroupSeqId,shipmentId,true,true);    workEffortId=(String)tmpMap.get("productionRunId");  }  return workEffortId;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  String inputHeader2=args[1];  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0 && z2 == 0) {            outputFile.setValue(row,col,1);          } else {            outputFile.setValue(row,col,0);          }        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public PublicKey generatePublicKeyPair(KeyPair keyPair){  try {    publicKey=keyPair.getPublic();  } catch (  Exception e) {    LOG.error("Error Public Key",e);  }  return publicKey;}  }
class C{  public void decExecutors(){  this.executorRunning.decrementAndGet();}  }
class C{  private Notification buildNotification(PendingIntent pendingIntent,String title,String message){  NotificationCompat.Builder notif=new NotificationCompat.Builder(this);  notif.setContentIntent(pendingIntent);  notif.setSmallIcon(R.drawable.ri_notif_file_transfer_icon);  notif.setWhen(System.currentTimeMillis());  notif.setAutoCancel(true);  notif.setOnlyAlertOnce(true);  notif.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));  notif.setDefaults(Notification.DEFAULT_VIBRATE);  notif.setContentTitle(title);  notif.setContentText(message);  return notif.build();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static long square(long num){  return num * num;}  }
class C{  public void resetMapgraphRuntime(final ComputeMode computeMode) throws Exception {  assertMapgraphRuntimeAvailable();  if (computeMode == null) {    throw new IllegalArgumentException("Compute mode must not be null");  }  final String repositoryUrl=getSparqlEndpointUrlForNamespaceOrDefault(null);  final ConnectOptions opts=newConnectOptions(repositoryUrl,UUID.randomUUID(),null);  JettyResponseListener response=null;{    opts.addRequestParam(MAPGRAPH,MAPGRAPH_RESET);    opts.addRequestParam(COMPUTE_MODE,computeMode.toString());    opts.method="POST";  }  try {    checkResponseCode(response=doConnect(opts));  }  finally {    if (response != null)     response.abort();  }}  }
class C{  private void initDefaultColors(){  this.categoryBackground=UIManager.getColor(PANEL_BACKGROUND_COLOR_KEY);  this.categoryForeground=UIManager.getColor(TABLE_FOREGROUND_COLOR_KEY).darker().darker().darker();  this.selectedCategoryBackground=categoryBackground.darker();  this.selectedCategoryForeground=categoryForeground;  this.propertyBackground=UIManager.getColor(TABLE_BACKGROUND_COLOR_KEY);  this.propertyForeground=UIManager.getColor(TABLE_FOREGROUND_COLOR_KEY);  this.selectedPropertyBackground=UIManager.getColor(TABLE_SELECTED_BACKGROUND_COLOR_KEY);  this.selectedPropertyForeground=UIManager.getColor(TABLE_SELECTED_FOREGROUND_COLOR_KEY);  setGridColor(categoryBackground);}  }
class C{  public List<DecoderFile> matchingDecoderList(String mfg,String family,String decoderMfgID,String decoderVersionID,String decoderProductID,String model,String developerID){  List<DecoderFile> l=new ArrayList<DecoderFile>();  for (int i=0; i < numDecoders(); i++) {    if (checkEntry(i,mfg,family,decoderMfgID,decoderVersionID,decoderProductID,model,developerID)) {      l.add(decoderList.get(i));    }  }  return l;}  }
class C{  public void error(Object message,Throwable t){}  }
class C{  public static void centerOnScreen(Component componentToMove){  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  componentToMove.setLocation((screenSize.width - componentToMove.getWidth()) / 2,(screenSize.height - componentToMove.getHeight()) / 2);}  }
class C{  public static int[] changeVectors(int[] v,int facing){  if ((v == null) || (v.length != 6)) {    return v;  }  int oppv=facing + 3;  if (oppv > 5) {    oppv-=6;  }  if (v[oppv] > 0) {    v[oppv]--;    return v;  }  int oblv1=facing + 2;  if (oblv1 > 5) {    oblv1-=6;  }  int oblv2=facing - 2;  if (oblv2 < 0) {    oblv2+=6;  }  if ((v[oblv1] > 0) || (v[oblv2] > 0)) {    int newface=facing + 1;    if (newface > 5) {      newface=0;    }    if (v[oblv1] > 0) {      v[oblv1]--;      v[newface]++;    }    newface=facing - 1;    if (newface < 0) {      newface=5;    }    if (v[oblv2] > 0) {      v[oblv2]--;      v[newface]++;    }    return v;  }  v[facing]++;  return v;}  }
class C{  private static void center(Box box,float axis){  float h=box.getHeight(), total=h + box.getDepth();  box.setShift(-(total / 2 - h) - axis);}  }
class C{  public void keyPressed(KeyEvent e){synchronized (keyLock) {    keysDown.add(e.getKeyCode());  }}  }
class C{  public static boolean deepEquals(ExprNode[] one,ExprNode[] two){  if (one.length != two.length) {    return false;  }  for (int i=0; i < one.length; i++) {    if (!ExprNodeUtility.deepEquals(one[i],two[i])) {      return false;    }  }  return true;}  }
class C{  public OptionDef(Token t,String option,List<String> values){  super(t);  this.option=option;  this.values=values;}  }
class C{  private static long gcd(long n,long d){  long n1=Math.abs(n);  long n2=Math.abs(d);  int gcd=1;  for (int k=1; k <= n1 && k <= n2; k++) {    if (n1 % k == 0 && n2 % k == 0)     gcd=k;  }  return gcd;}  }
class C{  void canUseDiamond(boolean canUseDiamond){  fCanUseDiamond=canUseDiamond;}  }
class C{  public NameNotFoundException(){  super();}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  public void print(NumberFormat format,int width){  print(new PrintWriter(System.out,true),format,width);}  }
class C{  public XYLocation right(){  return east();}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  protected Tree<String> findMarkedHead(Tree<String> t){  return null;}  }
class C{  @SuppressWarnings("unchecked") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> enumClass,final E defaultValue){  if (styleName == null || enumClass == null) {    return defaultValue;  }  for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) {    final Style.HasCssName anEnum=(Style.HasCssName)constant;    final String cssClass=anEnum.getCssName();    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {      return (E)anEnum;    }  }  return defaultValue;}  }
class C{  public void addField(String fieldName,Class type,int fieldSize,int fieldSubSize){  this.addField(new FieldDefinition(fieldName,type,fieldSize,fieldSubSize));}  }
class C{  public void splitupNoSort(ArrayModifiableDBIDs ind,int begin,int end,int dim,Random rand){  final int nele=end - begin;  dim=dim % projectedPoints.length;  DoubleDataStore tpro=projectedPoints[dim];  if (nele > minSplitSize * (1 - sizeTolerance) && nele < minSplitSize * (1 + sizeTolerance)) {    ind.sort(begin,end,new DataStoreUtil.AscendingByDoubleDataStore(tpro));    splitsets.add(DBIDUtil.newArray(ind.slice(begin,end)));  }  if (nele > minSplitSize) {    int minInd=splitRandomly(ind,begin,end,tpro,rand);    int splitpos=minInd + 1;    splitupNoSort(ind,begin,splitpos,dim + 1,rand);    splitupNoSort(ind,splitpos,end,dim + 1,rand);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x3C37A7A6,version=150,checkInsideInterrupt=true) public int sceMpegNextAvcRpAu(@CheckArgument("checkMpegHandle") int mpeg,int streamUid){  if (!streamMap.containsKey(streamUid)) {    log.warn(String.format("sceMpegNextAvcRpAu bad stream 0x%X",streamUid));    return -1;  }  int result=hleMpegGetAvcAu(null);  if (result != 0) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceMpegNextAvcRpAu returning 0x%08X",result));    }    return result;  }  videoFrameCount++;  startedMpeg=true;  return 0;}  }
class C{  public InstanceofExpression newInstanceofExpression(){  InstanceofExpression result=new InstanceofExpression(this);  return result;}  }
class C{  public void test_GET_SELECT_ERROR() throws Exception {  final String queryStr="select * where {?s ?p ?o} X {}";  final TupleQuery query=cxn.prepareTupleQuery(QueryLanguage.SPARQL,queryStr);  try {    assertEquals(0,countResults(query.evaluate()));    fail("should be an error");  } catch (  QueryEvaluationException ex) {  }}  }
class C{  public void remove(String name){  parameters.remove(name.trim().toLowerCase());}  }
class C{  public MouseDelegator(MapBean map){  setMap(map);}  }
class C{  public JsonObjectRequest(int method,String url,String requestBody,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,requestBody,listener,errorListener);}  }
class C{  public ScriptInGroovy(final String filename){  super(filename);  groovyScript=filename;  groovyBinding=new Binding();  groovyBinding.setVariable("game",this);  groovyBinding.setVariable("logger",logger);  groovyBinding.setVariable("storage",new HashMap<Object,Object>());  groovyBinding.setVariable("rules",SingletonRepository.getRuleProcessor());  groovyBinding.setVariable("world",SingletonRepository.getRPWorld());}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (SerialAddress.validSystemNameFormat(systemName,'L'));}  }
class C{  public Iterator<String> iterator(){  List<String> list=new ArrayList<String>();  for (  String name : order) {    list.add(name);  }  return list.iterator();}  }
class C{  private void decodeGitRefToolSpecifiedId(final String toolSpecifiedId){  if (StringUtils.isEmpty(toolSpecifiedId)) {    throw new MalformedArtifactIDException(this);  }  final String[] components=toolSpecifiedId.split(URI_SEPARATOR);  if (components.length < 3) {    throw new MalformedURIException(String.format("The toolSpecifiedId was not able to be decoded: %s",toolSpecifiedId));  }  projectId=components[0];  repoId=components[1];  refName=components[2];  if (components.length > 3) {    for (int index=3; index < components.length; index++) {      refName=refName + URI_SEPARATOR + components[index];    }  }  refName=decodeRefName(refName);}  }
class C{  private boolean matchesWifi(NetworkIdentity ident){switch (ident.mType) {case TYPE_WIFI:    return Objects.equal(removeDoubleQuotes(mNetworkId),removeDoubleQuotes(ident.mNetworkId));default :  return false;}}  }
class C{  public boolean isPOTaxExempt(){  Object oo=get_Value(COLUMNNAME_IsPOTaxExempt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public boolean supportsBLOB(){  return true;}  }
class C{  public CLimitedInputPane(final String text){  super(new JTextFieldLimit(30000));  setText(text);}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (val instanceof Double) {          V k=unwrapKey(key);          double v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(getURI(url));  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  default PVectorX<T> toPVectorX(){  return PVectorX.fromCollection(toList());}  }
class C{  protected XYMultipleSeriesRenderer buildBarRenderer(int[] colors){  XYMultipleSeriesRenderer renderer=new XYMultipleSeriesRenderer();  renderer.setAxisTitleTextSize(16);  renderer.setChartTitleTextSize(20);  renderer.setLabelsTextSize(15);  renderer.setLegendTextSize(15);  int length=colors.length;  for (int i=0; i < length; i++) {    XYSeriesRenderer r=new XYSeriesRenderer();    r.setColor(colors[i]);    renderer.addSeriesRenderer(r);  }  return renderer;}  }
class C{  protected void blockCarsByTrack(PrintWriter file,Train train,List<Car> carList,List<RouteLocation> routeList,RouteLocation rl,boolean printHeader,boolean isManifest){  if (printHeader) {    printPickupHeader=true;    printSetoutHeader=true;    printLocalMoveHeader=true;  }  List<Track> tracks=rl.getLocation().getTrackByNameList(null);  List<String> trackNames=new ArrayList<String>();  clearUtilityCarTypes();  boolean isOnlyPassenger=train.isOnlyPassengerCars();  for (  Track track : tracks) {    if (trackNames.contains(splitString(track.getName()))) {      continue;    }    trackNames.add(splitString(track.getName()));    boolean found=false;    for (    RouteLocation rld : routeList) {      if (rld != rl && !found) {        continue;      }      found=true;      for (      Car car : carList) {        if (Setup.isSortByTrackEnabled() && !splitString(track.getName()).equals(splitString(car.getTrackName()))) {          continue;        }        if (car.getRouteLocation() == rl && car.getTrack() != null && ((car.getRouteDestination() == rld && !car.isCaboose() && !car.hasFred()) || (rld == routeList.get(routeList.size() - 1) && (car.isCaboose() || car.hasFred())) || (car.isPassenger() && isOnlyPassenger))) {          if (printPickupHeader && !isLocalMove(car)) {            printPickupCarHeader(file,isManifest,!IS_TWO_COLUMN_TRACK);            printPickupHeader=false;            if (getPickupCarHeader(isManifest,!IS_TWO_COLUMN_TRACK).equals(getDropCarHeader(isManifest,!IS_TWO_COLUMN_TRACK))) {              printSetoutHeader=false;            }            if (getPickupCarHeader(isManifest,!IS_TWO_COLUMN_TRACK).equals(getLocalMoveHeader(isManifest))) {              printLocalMoveHeader=false;            }          }          if (car.isUtility()) {            pickupUtilityCars(file,carList,car,isManifest);          } else           if (isManifest && Setup.isTruncateManifestEnabled() && rl.getLocation().isSwitchListEnabled()) {            pickUpCarTruncated(file,car,isManifest);          } else {            pickUpCar(file,car,isManifest);          }          pickupCars=true;          cars++;          if (car.getLoadType().equals(CarLoad.LOAD_TYPE_EMPTY)) {            emptyCars++;          }        }      }      if (isOnlyPassenger) {        break;      }    }    for (    Car car : carList) {      if (Setup.isSortByTrackEnabled() && car.getRouteLocation() != null && car.getRouteDestination() == rl) {        if (!splitString(track.getName()).equals(splitString(car.getDestinationTrackName()))) {          continue;        }      }      if (car.getRouteDestination() == rl && car.getDestinationTrack() != null) {        if (printSetoutHeader && !isLocalMove(car)) {          printDropCarHeader(file,isManifest,!IS_TWO_COLUMN_TRACK);          printSetoutHeader=false;          if (getPickupCarHeader(isManifest,!IS_TWO_COLUMN_TRACK).equals(getDropCarHeader(isManifest,!IS_TWO_COLUMN_TRACK))) {            printPickupHeader=false;          }          if (getDropCarHeader(isManifest,!IS_TWO_COLUMN_TRACK).equals(getLocalMoveHeader(isManifest))) {            printLocalMoveHeader=false;          }        }        if (printLocalMoveHeader && isLocalMove(car)) {          printLocalCarMoveHeader(file,isManifest);          printLocalMoveHeader=false;          if (getPickupCarHeader(isManifest,!IS_TWO_COLUMN_TRACK).equals(getLocalMoveHeader(isManifest))) {            printPickupHeader=false;          }          if (getDropCarHeader(isManifest,!IS_TWO_COLUMN_TRACK).equals(getLocalMoveHeader(isManifest))) {            printSetoutHeader=false;          }        }        if (car.isUtility()) {          setoutUtilityCars(file,carList,car,isManifest);        } else         if (isManifest && Setup.isTruncateManifestEnabled() && rl.getLocation().isSwitchListEnabled()&& !train.isLocalSwitcher()) {          truncatedDropCar(file,car,isManifest);        } else {          dropCar(file,car,isManifest);        }        dropCars=true;        cars--;        if (CarLoads.instance().getLoadType(car.getTypeName(),car.getLoadName()).equals(CarLoad.LOAD_TYPE_EMPTY)) {          emptyCars--;        }      }    }    if (!Setup.isSortByTrackEnabled()) {      break;    }  }}  }
class C{  private boolean isDockingFrameworkTab(){  if (tabPane instanceof DockTabbedPane) {    return true;  }  if (tabPane instanceof TabHeader) {    TabHeader h=(TabHeader)tabPane;    if (h.getDockable() != null) {      return h.getDockable().getDockKey().isCloseEnabled();    }  }  return false;}  }
class C{  private void loadShortTextValues(){  addValues(descripcionBI.getValues(tipoFicha,ValorCampoGenericoVO.TIPO_TEXTO_CORTO,id));}  }
class C{  public static void registerWorld(int dimId){  if (Configuration.enableOxygen && (Configuration.overrideGCAir || dimId != Configuration.MoonId || DimensionManager.getInstance().getDimensionProperties(dimId).isNativeDimension)) {    dimensionOxygen.put(dimId,new AtmosphereHandler(dimId));    MinecraftForge.EVENT_BUS.register(dimensionOxygen.get(dimId));    FMLCommonHandler.instance().bus().register(dimensionOxygen.get(dimId));  }}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case STORE_NAME:    return isSetStoreName();case SCOPE:  return isSetScope();case PERSIST:return isSetPersist();}throw new IllegalStateException();}  }
class C{  public static String fieldString(int flags){  return humanHelper(flags,FIELD_FLAGS,CONV_FIELD);}  }
class C{  public SnackbarBuilder actionDismissCallback(SnackbarActionDismissCallback callback){  callbackBuilder.actionDismissCallback(callback);  return this;}  }
class C{  public ObjectFactory(){}  }
class C{  public void testBFS_directed_reverse() throws Exception {  final SmallGraphProblem p=setupSmallGraphProblem();  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final SailConnection cxn=getGraphFixture().getSail().getConnection();    try {      final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(cxn);      final IGASContext<BFS.VS,BFS.ES,Void> gasContext=gasEngine.newGASContext(graphAccessor,new BFS());      final IGASState<BFS.VS,BFS.ES,Void> gasState=gasContext.getGASState();      gasState.setFrontier(gasContext,p.getFoafPerson());      gasContext.setTraversalDirection(TraversalDirectionEnum.Reverse);      gasContext.call();      assertEquals(0,gasState.getState(p.getFoafPerson()).depth());      assertEquals(null,gasState.getState(p.getFoafPerson()).predecessor());      assertEquals(1,gasState.getState(p.getMike()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getMike()).predecessor());      assertEquals(1,gasState.getState(p.getBryan()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getBryan()).predecessor());      assertEquals(1,gasState.getState(p.getMartyn()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getMartyn()).predecessor());    }  finally {      try {        cxn.rollback();      }  finally {        cxn.close();      }    }  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  public static void startDeleteAll(ConversationQueryHandler handler,int token,boolean deleteAll){synchronized (sDeletingThreadsLock) {    if (DELETEDEBUG) {      Log.v(TAG,"Conversation startDeleteAll sDeletingThreads: " + sDeletingThreads);    }    if (sDeletingThreads) {      Log.e(TAG,"startDeleteAll already in the middle of a delete",new Exception());    }    sDeletingThreads=true;    String selection=deleteAll ? null : "locked=0";    QKSMSAppBase app=QKSMSApp.getApplication();    handler.setDeleteToken(token);    handler.startDelete(token,new Long(-1),Threads.CONTENT_URI,selection,null);  }}  }
class C{  public Frame(final int nLocals,final int nStack){  this.values=(V[])new Value[nLocals + nStack];  this.locals=nLocals;}  }
class C{  public boolean isTerminated(){synchronized (privateInstanceLock) {    return isTerminated;  }}  }
class C{  public static void shutdown(){  getBot().shutdown();}  }
class C{  public _BuildStatus(final String[] flagStrings){  super(flagStrings);}  }
class C{  protected void addIfdData(IfdData data){  mIfdDatas[data.getId()]=data;}  }
class C{  public int retrieveRowCount(String tableName) throws SQLException {  ResultSet rs=null;  int rowCount=-1;  try {    rs=statement.executeQuery("SELECT COUNT(*) FROM " + tableName);    rs.next();    rowCount=rs.getInt(1);  }  finally {    if (rs != null) {      rs.close();    }  }  return rowCount;}  }
class C{  public void createMonthScenarioParAndRoleChange() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-04 12:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_MONTH_ROLES",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"USER");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_MONTH_ROLES",serviceDetails,basicSetup.getCustomerUser1(),role);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 12:00:00"),"MAX_FOLDER_NUMBER","4");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-15 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"GUEST"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-22 00:00:00"),"MAX_FOLDER_NUMBER","88");  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-25 12:00:00");  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_MONTH_ROLES",subDetails);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public static int hashCode(double x){  long f=Double.doubleToLongBits(x);  return (int)(f ^ (f >>> 32));}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public static void bitangent(Vector3fc v1,Vector2fc uv1,Vector3fc v2,Vector2fc uv2,Vector3fc v3,Vector2fc uv3,Vector3f dest){  float DeltaU1=uv2.x() - uv1.x();  float DeltaU2=uv3.x() - uv1.x();  float f=1.0f / (DeltaU1 * (uv3.y() - uv1.y()) - DeltaU2 * (uv2.y() - uv1.y()));  dest.x=f * (-DeltaU2 * (v2.x() - v1.x()) - DeltaU1 * (v3.x() - v1.x()));  dest.y=f * (-DeltaU2 * (v2.y() - v1.y()) - DeltaU1 * (v3.y() - v1.y()));  dest.z=f * (-DeltaU2 * (v2.z() - v1.z()) - DeltaU1 * (v3.z() - v1.z()));  dest.normalize();}  }
class C{  public long discardUpstreamSamples(int discardFromIndex){  int discardCount=getWriteIndex() - discardFromIndex;  Assertions.checkArgument(0 <= discardCount && discardCount <= queueSize);  if (discardCount == 0) {    if (absoluteReadIndex == 0) {      return 0;    }    int lastWriteIndex=(relativeWriteIndex == 0 ? capacity : relativeWriteIndex) - 1;    return offsets[lastWriteIndex] + sizes[lastWriteIndex];  }  queueSize-=discardCount;  relativeWriteIndex=(relativeWriteIndex + capacity - discardCount) % capacity;  return offsets[relativeWriteIndex];}  }
class C{  public int limit(){  return limit;}  }
class C{  public BytesRestResponse(RestStatus status,String contentType,String content){  this(status,contentType,new BytesArray(content));}  }
class C{  protected void configureViewResolvers(ViewResolverRegistry registry){}  }
class C{  public TDoubleHash(int initialCapacity,float loadFactor,TDoubleHashingStrategy strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  @Override public void clear(){  if (elementCount > 0) {    elementCount=0;    Arrays.fill(elementData,null);    modCount++;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.617 -0500",hash_original_method="3E32D858B03BB295FC48CF43F0845DFE",hash_generated_method="C25431E8B75315810AEF2908E807AD89") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SIPIfMatch.parse");  SIPIfMatch sipIfMatch=new SIPIfMatch();  try {    headerName(TokenTypes.SIP_IF_MATCH);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    sipIfMatch.setETag(token.getTokenValue());    this.lexer.SPorHT();    this.lexer.match('\n');    return sipIfMatch;  }  finally {    if (debug)     dbg_leave("SIPIfMatch.parse");  }}  }
class C{  public Observable<Reply> call(final String procedure,final ArrayNode arguments,final ObjectNode argumentsKw){  return call(procedure,null,arguments,argumentsKw);}  }
class C{  public static boolean isInvoke(Value val){  val=getEquivalentValueRoot(val);  if (val instanceof InvokeExpr)   return true;  return false;}  }
class C{  protected String createContextXml(WAR war){  StringBuilder buffer=new StringBuilder();  buffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");  buffer.append("<!DOCTYPE Configure PUBLIC \"-//Mort Bay Consulting//DTD Configure//EN\" " + "\"http://jetty.mortbay.org/configure.dtd\">\n");  buffer.append("<Configure class=\"org.mortbay.jetty.webapp.WebAppContext\">\n");  buffer.append("  <Array id=\"plusConfig\" type=\"java.lang.String\">\n");  buffer.append("    <Item>org.mortbay.jetty.webapp.WebInfConfiguration</Item>\n");  buffer.append("    <Item>org.mortbay.jetty.plus.webapp.EnvConfiguration</Item>\n");  buffer.append("    <Item>org.mortbay.jetty.plus.webapp.Configuration</Item>\n");  buffer.append("    <Item>org.mortbay.jetty.webapp.JettyWebXmlConfiguration</Item>\n");  buffer.append("    <Item>org.mortbay.jetty.webapp.TagLibConfiguration</Item>\n");  buffer.append("  </Array>\n");  buffer.append("  <Set name=\"contextPath\">/" + war.getContext() + "</Set>\n");  buffer.append("  <Set name=\"war\">" + war.getFile() + "</Set>\n");  buffer.append("  <Set name=\"extractWAR\">true</Set>\n");  buffer.append("  <Set name=\"defaultsDescriptor\"><SystemProperty name=\"config.home\" " + "default=\".\"/>/etc/webdefault.xml</Set>\n");  buffer.append("  <Set name=\"ConfigurationClasses\"><Ref id=\"plusConfig\"/></Set>\n");  buffer.append(getExtraClasspathXmlFragment(war));  buffer.append(getSharedClasspathXmlFragment());  buffer.append("</Configure>\n");  return buffer.toString();}  }
class C{  public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){  super(valueType,name);  char firstLetter=Character.toUpperCase(name.charAt(0));  String theRest=name.substring(1);  String capitalizedName=firstLetter + theRest;  String getterName=PREFIX_GET + capitalizedName;  try {    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);  } catch (  NoSuchMethodException e) {    try {      mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);      mGetter.setAccessible(true);    } catch (    NoSuchMethodException e2) {      getterName=PREFIX_IS + capitalizedName;      try {        mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);      } catch (      NoSuchMethodException e3) {        try {          mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);          mGetter.setAccessible(true);        } catch (        NoSuchMethodException e4) {          try {            mField=propertyHolder.getField(name);            Class fieldType=mField.getType();            if (!typesMatch(valueType,fieldType)) {              throw new NoSuchPropertyException("Underlying type (" + fieldType + ") "+ "does not match Property type ("+ valueType+ ")");            }            return;          } catch (          NoSuchFieldException e5) {            throw new NoSuchPropertyException("No accessor method or field found for" + " property with name " + name);          }        }      }    }  }  Class getterType=mGetter.getReturnType();  if (!typesMatch(valueType,getterType)) {    throw new NoSuchPropertyException("Underlying type (" + getterType + ") "+ "does not match Property type ("+ valueType+ ")");  }  String setterName=PREFIX_SET + capitalizedName;  try {    mSetter=propertyHolder.getDeclaredMethod(setterName,getterType);    mSetter.setAccessible(true);  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  public CategorizedProblem createProblem(char[] originatingFileName,int problemId,String[] problemArguments,String[] messageArguments,int severity,int startPosition,int endPosition,int lineNumber,int columnNumber){  return new DefaultProblem(originatingFileName,this.getLocalizedMessage(problemId,messageArguments),problemId,problemArguments,severity,startPosition,endPosition,lineNumber,columnNumber);}  }
class C{  public Table findTable(String catalogName,String schemaName,String tableName,boolean caseSensitive){  String cacheKey=catalogName + "." + schemaName+ "."+ tableName+ "."+ caseSensitive;  Integer tableIndex=tableIndexCache.get(cacheKey);  if (tableIndex != null) {    if (tableIndex < getTableCount()) {      Table table=getTable(tableIndex);      if (doesMatch(table,catalogName,schemaName,tableName,caseSensitive)) {        return table;      }    }  }  Table[] tables=getTables();  for (int i=0; i < tables.length; i++) {    Table table=tables[i];    if (doesMatch(table,catalogName,schemaName,tableName,caseSensitive)) {      tableIndexCache.put(cacheKey,i);      return table;    }  }  return null;}  }
class C{  public static int fieldOffsetLength(short flags){  if ((flags & FLAG_OFFSET_ONE_BYTE) == FLAG_OFFSET_ONE_BYTE)   return OFFSET_1; else   if ((flags & FLAG_OFFSET_TWO_BYTES) == FLAG_OFFSET_TWO_BYTES)   return OFFSET_2; else   return OFFSET_4;}  }
class C{  @Nullable public static Pair<GitRemote,String> findGcpRemote(@NotNull GitRepository repository){  for (  GitRemote gitRemote : repository.getRemotes()) {    for (    String remoteUrl : gitRemote.getUrls()) {      if (isUrlGcp(remoteUrl)) {        return Pair.create(gitRemote,remoteUrl);      }    }  }  return null;}  }
class C{  public static Collection<Parameterization> namedCases(Collection<Object[]> margs){  Collection<Parameterization> result=new ArrayList<>(margs.size());  for (  Object[] args : margs) {    String caseName=(String)args[0];    result.add(Parameterization.create(caseName,args));  }  return result;}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender replySender,boolean containsKeyValue){  Assert.assertTrue(recipient != null,"ContainsKeyValueReplyMessage NULL reply message");  ContainsKeyValueReplyMessage m=new ContainsKeyValueReplyMessage(processorId,containsKeyValue);  m.setRecipient(recipient);  replySender.putOutgoing(m);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void initialize(ModelValidationEngine engine,MClient client){  if (client != null) {    m_AD_Client_ID=client.getAD_Client_ID();    log.info(client.toString());  } else {    log.info("Initializing global validator: " + this.toString());  }  engine.addModelChange(MOrder.Table_Name,this);  engine.addModelChange(MOrderLine.Table_Name,this);}  }
class C{  public void start() throws StartupException {}  }
class C{  protected void sendRawLineToServer(String line) throws IOException {  if (line.length() > configuration.getMaxLineLength() - 2)   line=line.substring(0,configuration.getMaxLineLength() - 2);  outputWriter.write(line + "\r\n");  outputWriter.flush();  List<String> lineParts=Utils.tokenizeLine(line);  getConfiguration().getListenerManager().onEvent(new OutputEvent(this,line,lineParts));}  }
class C{  public QueryService addCriteria(Criteria criteria){  queryServiceDTO.getCriteria().add(criteria);  return this;}  }
