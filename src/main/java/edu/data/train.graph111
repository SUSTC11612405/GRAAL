class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(){  if (LOLLIPOP) {    mNativeAnimator.start();  } else {    mSupportAnimator.start();  }}  }
class C{  @Override protected void register(DeployerFactory deployerFactory){  deployerFactory.registerDeployer("liberty",DeployerType.INSTALLED,LibertyInstalledLocalDeployer.class);}  }
class C{  @Override public String toString(){  return toString(null);}  }
class C{  public void clear(View view){  WebView log=(WebView)findViewById(R.id.logText);  log.loadDataWithBaseURL(null,"","text/html","utf-8",null);}  }
class C{  private void updateAnimator(){  if (canvasHeight == 0 && canvasWidth == 0)   return;  float scale=calculateTypeAndScale();  if (scale == 0)   return;  float w=(imageWidth * scale) - canvasWidth;  float h=(imageHeight * scale) - canvasHeight;  mAnimator.updateValues(movementType,w,h);  mAnimator.setStartDelay(startDelay);  mAnimator.setSpeed(mSpeed);  mAnimator.setRepetition(mRepetitions);  if (loadOnCreate)   mAnimator.start();}  }
class C{  private Base64(){}  }
class C{  public boolean isUNC(){  return device == null && (separators & IS_UNC) != 0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  MediaNode node=getMediaNode(stack);  return node == null ? "" : node.getProperty(name);}  }
class C{  protected String tradAlphaCount(long val,XResourceBundle thisBundle){  if (val > Long.MAX_VALUE) {    this.error(XSLTErrorResources.ER_NUMBER_TOO_BIG);    return XSLTErrorResources.ERROR_STRING;  }  char[] table=null;  int lookupIndex=1;  char buf[]=new char[100];  int charPos;  charPos=0;  IntArrayWrapper groups=(IntArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_NUMBERGROUPS);  StringArrayWrapper tables=(StringArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_NUM_TABLES));  String numbering=thisBundle.getString(org.apache.xml.utils.res.XResourceBundle.LANG_NUMBERING);  if (numbering.equals(org.apache.xml.utils.res.XResourceBundle.LANG_MULT_ADD)) {    String mult_order=thisBundle.getString(org.apache.xml.utils.res.XResourceBundle.MULT_ORDER);    LongArrayWrapper multiplier=(LongArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_MULTIPLIER));    CharArrayWrapper zeroChar=(CharArrayWrapper)thisBundle.getObject("zero");    int i=0;    while (i < multiplier.getLength() && val < multiplier.getLong(i)) {      i++;    }    do {      if (i >= multiplier.getLength())       break;      if (val < multiplier.getLong(i)) {        if (zeroChar.getLength() == 0) {          i++;        } else {          if (buf[charPos - 1] != zeroChar.getChar(0))           buf[charPos++]=zeroChar.getChar(0);          i++;        }      } else       if (val >= multiplier.getLong(i)) {        long mult=val / multiplier.getLong(i);        val=val % multiplier.getLong(i);        int k=0;        while (k < groups.getLength()) {          lookupIndex=1;          if (mult / groups.getInt(k) <= 0)           k++; else {            CharArrayWrapper THEletters=(CharArrayWrapper)thisBundle.getObject(tables.getString(k));            table=new char[THEletters.getLength() + 1];            int j;            for (j=0; j < THEletters.getLength(); j++) {              table[j + 1]=THEletters.getChar(j);            }            table[0]=THEletters.getChar(j - 1);            lookupIndex=(int)mult / groups.getInt(k);            if (lookupIndex == 0 && mult == 0)             break;            char multiplierChar=((CharArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_MULTIPLIER_CHAR))).getChar(i);            if (lookupIndex < table.length) {              if (mult_order.equals(org.apache.xml.utils.res.XResourceBundle.MULT_PRECEDES)) {                buf[charPos++]=multiplierChar;                buf[charPos++]=table[lookupIndex];              } else {                if (lookupIndex == 1 && i == multiplier.getLength() - 1) {                } else                 buf[charPos++]=table[lookupIndex];                buf[charPos++]=multiplierChar;              }              break;            } else             return XSLTErrorResources.ERROR_STRING;          }        }        i++;      }    } while (i < multiplier.getLength());  }  int count=0;  String tableName;  while (count < groups.getLength()) {    if (val / groups.getInt(count) <= 0)     count++; else {      CharArrayWrapper theletters=(CharArrayWrapper)thisBundle.getObject(tables.getString(count));      table=new char[theletters.getLength() + 1];      int j;      for (j=0; j < theletters.getLength(); j++) {        table[j + 1]=theletters.getChar(j);      }      table[0]=theletters.getChar(j - 1);      lookupIndex=(int)val / groups.getInt(count);      val=val % groups.getInt(count);      if (lookupIndex == 0 && val == 0)       break;      if (lookupIndex < table.length) {        buf[charPos++]=table[lookupIndex];      } else       return XSLTErrorResources.ERROR_STRING;      count++;    }  }  return new String(buf,0,charPos);}  }
class C{  public boolean sameRank(Card c){  if (c == null)   return false;  return (rank == c.getRank());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.954 -0500",hash_original_method="6D8A267573E3557F73C2709EF9053C58",hash_generated_method="FC4362337D902FF475D471C1057CA6D5") public int decode(String data,OutputStream out) throws IOException {  byte b1, b2;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  while (i < end) {    while (i < end && ignore(data.charAt(i))) {      i++;    }    b1=decodingTable[data.charAt(i++)];    while (i < end && ignore(data.charAt(i))) {      i++;    }    b2=decodingTable[data.charAt(i++)];    out.write((b1 << 4) | b2);    length++;  }  return length;}  }
class C{  public final boolean isWarnEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);}  }
class C{  private static void assertReadingCompressedFileMatchesExpected(File file,CompressionType compressionType,String[] expected){  Pipeline p=TestPipeline.create();  TextIO.Read.Bound<String> read=TextIO.Read.from(file.getPath()).withCompressionType(compressionType);  PCollection<String> output=p.apply(read);  PAssert.that(output).containsInAnyOrder(expected);  p.run();}  }
class C{  public void addOutputParam(FBProcedureParam param){  if (outputParams.size() < param.getPosition() + 1) {    outputParams.setSize(param.getPosition() + 1);  }  outputParams.set(param.getPosition(),param);}  }
class C{  static public Timestamp addMonths(Timestamp day,int offset){  if (day == null)   day=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(day);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  if (offset == 0)   return new Timestamp(cal.getTimeInMillis());  cal.add(Calendar.MONTH,offset);  return new Timestamp(cal.getTimeInMillis());}  }
class C{  public void invalidateContainerSize(){  colFlowSpecs=null;}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  private boolean isNextCharacterEscapedQuote(String nextLine,boolean inQuotes,int i){  return inQuotes && nextLine.length() > (i + 1) && isCharacterQuoteCharacter(nextLine.charAt(i + 1));}  }
class C{  public static Color shiftColorSpaceToFX(final int raw){  final int r=((raw >> 16) & 255);  final int g=((raw >> 8) & 255);  final int b=((raw) & 255);  return Color.rgb(r,g,b);}  }
class C{  public GangliaListener(final IGangliaMessageHandler handler) throws UnknownHostException {  this(InetAddress.getByName(DEFAULT_GROUP),DEFAULT_PORT,new GangliaMessageDecoder31(),handler);}  }
class C{  public void runTestOnMethod(MediaRecorderMethodUnderTest testMethod){  mMethodUnderTest=testMethod;  if (mMethodUnderTest != null) {    checkMethodUnderTestInAllPossibleStates();    mMethodUnderTest.checkStateErrors(mStateErrors);    cleanUp();  }}  }
class C{  public void dragEnter(DropTargetDragEvent dtde){  Debug.message("dndlistener","dragEnter (target)");  int action=dtde.getDropAction();  Debug.message("dndlistener","action=" + action);  dtde.acceptDrag(action);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public T caseModel(Model object){  return null;}  }
class C{  protected ParenthesizedExpressionImpl(){  super();}  }
class C{  public String nominalAttributesTipText(){  return "The range of attributes to force to be of type NOMINAL, example " + "ranges: 'first-last', '1,4,7-14,50-last'.";}  }
class C{  public static int maxProfit(int[] prices){  if (prices == null || prices.length < 2) {    return 0;  }  int max=0;  int min=prices[0];  for (int i=1; i < prices.length; i++) {    min=Math.min(min,prices[i]);    if (prices[i] > prices[i - 1]) {      max=Math.max(max,prices[i] - min);    }  }  return max;}  }
class C{  void reportWarning(String msg,Element e){  messager.printMessage(Diagnostic.Kind.WARNING,msg,e);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:49.113 -0500",hash_original_method="6BF731200C51E86131E751F42FA1CCF7",hash_generated_method="8DD507783991967039D39B7AC5CFF07E") public int hashCode(){  return type.hashCode();}  }
class C{  private PollingUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public void rename(String newName){  this.name=newName;}  }
class C{  public DoublyIndexedTable(DoublyIndexedTable other){  initialCapacity=other.initialCapacity;  table=new Entry[other.table.length];  for (int i=0; i < other.table.length; i++) {    Entry newE=null;    Entry e=other.table[i];    while (e != null) {      newE=new Entry(e.hash,e.key1,e.key2,e.value,newE);      e=e.next;    }    table[i]=newE;  }  count=other.count;}  }
class C{  protected void dispatchScrollOffset(Object source,float yOffset){  if (scrollViewList != null) {    for (    Object scroll : scrollViewList) {      if (scroll != null && scroll != source) {        setScrollOffset(scroll,yOffset);      }    }  }}  }
class C{  public void addComponent(BlockPos pos,IBlockState state){  addComponent(new MultiblockComponent(pos,state));}  }
class C{  public ThreadFactory build(){  return build(this);}  }
class C{  public final boolean contains(String s){  if (null == s)   return false;  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(s))     return true;  }  return false;}  }
class C{  public void updateEventSeqNum(long l){  Atomics.setIfGreater(this.eventSeqNum,l);  if (logger.isDebugEnabled()) {    logger.debug("WAN: On bucket {}, setting the seq number as {} before GII",getId(),l);  }}  }
class C{  private ExpirationAttributes parseExpirationAttributes(RegionFunctionArgs.ExpirationAttrs newExpirationAttrs,ExpirationAttributes oldExpirationAttributes){  ExpirationAction action=oldExpirationAttributes.getAction();  int timeout=oldExpirationAttributes.getTimeout();  if (newExpirationAttrs.getTime() != null) {    timeout=newExpirationAttrs.getTime();  }  if (newExpirationAttrs.getAction() != null) {    action=newExpirationAttrs.getAction();  }  return new ExpirationAttributes(timeout,action);}  }
class C{  private CSVRecord(List<String> record){  this.record=Objects.requireNonNull(record);}  }
class C{  public TriggerDefinitionDataException(){}  }
class C{  protected boolean visitNode(ASTNode node){  return true;}  }
class C{  public static void removeAll(final JFrame parent,final BackEndDebuggerProvider debuggerProvider){  Preconditions.checkNotNull(parent,"IE01360: Parent argument can't be null");  Preconditions.checkNotNull(debuggerProvider,"IE01921: Debugger provider argument can not be null");  if (JOptionPane.YES_OPTION == CMessageBox.showYesNoCancelQuestion(parent,"Do you really want to remove all breakpoints?")) {    for (    final IDebugger debugger : debuggerProvider) {      removeAll(debugger.getBreakpointManager());    }  }}  }
class C{  @Override public String toString(){  Iterator iter=keyMap.entrySet().iterator();  StringBuffer buff=new StringBuffer("JAMon Key");  while (iter.hasNext()) {    Map.Entry entry=(Map.Entry)iter.next();    buff.append(", ").append(entry.getKey()).append("=").append(entry.getValue());  }  return buff.toString();}  }
class C{  public int next(){  final int node=_currentNode;  _currentNode=NULL;  return returnNode(node);}  }
class C{  public void ifCmp(final Type type,final int mode,final Label label){switch (type.getSort()) {case Type.LONG:    mv.visitInsn(Opcodes.LCMP);  break;case Type.DOUBLE:mv.visitInsn(mode == GE || mode == GT ? Opcodes.DCMPL : Opcodes.DCMPG);break;case Type.FLOAT:mv.visitInsn(mode == GE || mode == GT ? Opcodes.FCMPL : Opcodes.FCMPG);break;case Type.ARRAY:case Type.OBJECT:switch (mode) {case EQ:mv.visitJumpInsn(Opcodes.IF_ACMPEQ,label);return;case NE:mv.visitJumpInsn(Opcodes.IF_ACMPNE,label);return;}throw new IllegalArgumentException("Bad comparison for type " + type);default :int intOp=-1;switch (mode) {case EQ:intOp=Opcodes.IF_ICMPEQ;break;case NE:intOp=Opcodes.IF_ICMPNE;break;case GE:intOp=Opcodes.IF_ICMPGE;break;case LT:intOp=Opcodes.IF_ICMPLT;break;case LE:intOp=Opcodes.IF_ICMPLE;break;case GT:intOp=Opcodes.IF_ICMPGT;break;}mv.visitJumpInsn(intOp,label);return;}mv.visitJumpInsn(mode,label);}  }
class C{  protected boolean matchesCriteria(final Creature creature,final boolean defaultAnswer){  String clazz;  String subclazz;  if (creature.has("class")) {    clazz=creature.get("class");  } else {    clazz="";  }  if (creature.has("subclass")) {    subclazz=creature.get("subclass");  } else {    subclazz="";  }  for (  final Entry entry : entries) {    if (entry.matches(clazz,subclazz)) {      return entry.isBlocked();    }  }  return defaultAnswer;}  }
class C{  private boolean checkTrainLength(Car car,RouteLocation rl,RouteLocation rld){  int length=car.getTotalLength();  if (car.getKernel() != null) {    length=car.getKernel().getTotalLength();  }  boolean carInTrain=false;  for (  RouteLocation rlt : _routeList) {    if (rl == rlt) {      carInTrain=true;    }    if (rld == rlt) {      break;    }    if (carInTrain && rlt.getTrainLength() + length > rlt.getMaxTrainLength()) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCanNotPickupCarLength"),new Object[]{car.toString(),length,Setup.getLengthUnit().toLowerCase()}));      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCanNotPickupCarLength2"),new Object[]{rlt.getMaxTrainLength(),Setup.getLengthUnit().toLowerCase(),rlt.getTrainLength() + length - rlt.getMaxTrainLength(),rlt.getName(),rlt.getId()}));      return false;    }  }  return true;}  }
class C{  String escapeString(String in){  StringBuilder out=new StringBuilder();  for (int i=0, j=in.length(); i < j; i++) {    char c=in.charAt(i);    if (c == '\'') {      out.append(c);    }    out.append(c);  }  return out.toString();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SparseSet(Order<? super E> order){  sparse=new SparseMap<E,Object>(order);}  }
class C{  protected void sendFunctionGroup4(){  byte[] result=jmri.NmraPacket.function13Through20Packet(address.getNumber(),address.isLongAddress(),getF13(),getF14(),getF15(),getF16(),getF17(),getF18(),getF19(),getF20());  station.sendPacket(result,1);}  }
class C{  private void logMessage(String msg,Object[] obj){  if (_monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("[Monitoring] -> " + msg,obj);  }}  }
class C{  public static SipRequest createCancel(SipDialogPath dialog) throws PayloadException {  try {    ClientTransaction transaction=(ClientTransaction)dialog.getInvite().getStackTransaction();    Request cancel=transaction.createCancel();    int reasonCode=dialog.getSessionTerminationReasonCode();    if (reasonCode != -1) {      ReasonHeader reasonHeader=SipUtils.HEADER_FACTORY.createReasonHeader("SIP",reasonCode,dialog.getSessionTerminationReasonPhrase());      cancel.addHeader(reasonHeader);    }    ViaHeader viaHeader=(ViaHeader)cancel.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(cancel);  } catch (  ParseException|SipException e) {    throw new PayloadException("Can't create SIP message!",e);  }}  }
class C{  public static boolean classExists(String clazz){  try {    Class.forName(clazz);    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public boolean supportsFeature(@NonNull HardwareFeature feature){  if (mHardwareCharacteristics == null) {    try {      String characteristics=getSystemProperty(PROP_BUILD_CHARACTERISTICS).get();      mHardwareCharacteristics=new HashSet<>();      Collections.addAll(mHardwareCharacteristics,characteristics.split(","));    } catch (    Exception e) {      mHardwareCharacteristics=Collections.emptySet();    }  }  return mHardwareCharacteristics.contains(feature.getCharacteristic());}  }
class C{  public static final String nameForDaemon(final CassandraDaemonTask daemon){  return nameForDaemon(daemon.getName());}  }
class C{  protected final String copyElement(int nodeID,int exptype,SerializationHandler handler) throws SAXException {  final ExtendedType extType=m_extendedTypes[exptype];  String uri=extType.getNamespace();  String name=extType.getLocalName();  if (uri.length() == 0) {    handler.startElement(name);    return name;  } else {    int qnameIndex=m_dataOrQName.elementAt(nodeID);    if (qnameIndex == 0) {      handler.startElement(name);      handler.namespaceAfterStartElement(EMPTY_STR,uri);      return name;    }    if (qnameIndex < 0) {      qnameIndex=-qnameIndex;      qnameIndex=m_data.elementAt(qnameIndex);    }    String qName=m_valuesOrPrefixes.indexToString(qnameIndex);    handler.startElement(qName);    int prefixIndex=qName.indexOf(':');    String prefix;    if (prefixIndex > 0) {      prefix=qName.substring(0,prefixIndex);    } else {      prefix=null;    }    handler.namespaceAfterStartElement(prefix,uri);    return qName;  }}  }
class C{  @Override void onException(final Exception e){}  }
class C{  public static LatLon greatCircleEndPosition(LatLon p,Angle greatCircleAzimuth,Angle pathLength){  if (p == null) {    throw new IllegalArgumentException("Lat Lon Is Null");  }  if (greatCircleAzimuth == null || pathLength == null) {    throw new IllegalArgumentException("Angle Is Null");  }  double lat=p.getLatitude().radians;  double lon=p.getLongitude().radians;  double azimuth=greatCircleAzimuth.radians;  double distance=pathLength.radians;  if (distance == 0)   return p;  double endLatRadians=Math.asin(Math.sin(lat) * Math.cos(distance) + Math.cos(lat) * Math.sin(distance) * Math.cos(azimuth));  double endLonRadians=lon + Math.atan2(Math.sin(distance) * Math.sin(azimuth),Math.cos(lat) * Math.cos(distance) - Math.sin(lat) * Math.sin(distance) * Math.cos(azimuth));  if (Double.isNaN(endLatRadians) || Double.isNaN(endLonRadians))   return p;  return new LatLon(Angle.fromRadians(endLatRadians).normalizedLatitude(),Angle.fromRadians(endLonRadians).normalizedLongitude());}  }
class C{  public static String transformSignature(String signature){  StringBuilder buf=new StringBuilder();  int lastBracket=signature.lastIndexOf('[');  if (lastBracket > 0) {    buf.append(signature.substring(0,lastBracket + 1));    signature=signature.substring(lastBracket + 1);  }  if (signature.startsWith("L")) {    signature=signature.substring(1,signature.length() - 1).replace('/','.');    signature=transformClassName(signature);    signature="L" + signature.replace('.','/') + ";";  }  buf.append(signature);  return buf.toString();}  }
class C{  public UtilTabCloseIcon(Icon icon){  mIcon=icon;}  }
class C{  @Override public Object saveView(FacesContext context){  Object result=null;  if (context != null && !context.getViewRoot().isTransient()) {    UIViewRoot viewRoot=context.getViewRoot();    StateManagementStrategy strategy=null;    String viewId=viewRoot.getViewId();    ViewDeclarationLanguage vdl=context.getApplication().getViewHandler().getViewDeclarationLanguage(context,viewId);    if (vdl != null) {      strategy=vdl.getStateManagementStrategy(context,viewId);    }    Map<Object,Object> contextAttributes=context.getAttributes();    try {      contextAttributes.put(StateManager.IS_SAVING_STATE,Boolean.TRUE);      if (strategy != null) {        result=strategy.saveView(context);      } else {        strategy=new JspStateManagementStrategy(context);        result=strategy.saveView(context);      }    }  finally {      contextAttributes.remove(StateManager.IS_SAVING_STATE);    }  }  return result;}  }
class C{  public ClassDependency(String className,long digest){  _className=className;  try {    ClassLoader loader=Thread.currentThread().getContextClassLoader();    _cl=Class.forName(className,false,loader);  } catch (  ClassNotFoundException e) {    log.log(Level.FINE,e.toString(),e);  }  long newDigest=getDigest();  if (newDigest != digest) {    if (log.isLoggable(Level.FINE))     log.fine(className + " class digest is modified (old=" + digest+ ",new="+ newDigest+ ")");    _isDigestModified=true;  }}  }
class C{  public ComputeVirtualPoolRestRep assignComputeElements(URI id,ComputeVirtualPoolElementUpdateParam input){  return client.put(ComputeVirtualPoolRestRep.class,input,getIdUrl() + "/assign-matched-elements",id);}  }
class C{  public String globalInfo(){  return "The class that splits a KDTree node based on the midpoint value of " + "a dimension in which the node's points have the widest spread.\n\n" + "For more information see also:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public static void info(Object message){  RuntimeSingleton.info(message);}  }
class C{  public void fireParentAdded(SessionNode parent,SessionNode child){  SessionEvent event=new SessionEvent(this.source,parent,child,SessionEvent.PARENT_ADDED);  fireSessionEvent(event);}  }
class C{  public ObjectIdentifier(int[] oid){  validateOid(oid);  this.oid=oid;}  }
class C{  public final int size(){  return _size;}  }
class C{  public synchronized HttpRequestBody readRequestBody(HttpHeader httpHeader){  int contentLength=httpHeader.getContentLength();  HttpRequestBody body=(contentLength > 0) ? new HttpRequestBody(contentLength) : new HttpRequestBody();  readBody(contentLength,body);  return body;}  }
class C{  public void handleModifyEvent(@Observes ScriptFilter filter){  filters=null;}  }
class C{  @Override public void printMatrix(){  modelview.print();}  }
class C{  public Vertex evaluateREMOVE(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,3,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex source=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex relationship=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  Vertex target=evaluateExpression(arguments.get(2).getTarget(),variables,network,startTime,maxTime,stack);  source.removeRelationship(relationship,target);  return source;}  }
class C{  public void resetSortViews(){  for (  final int column : sortStates.keySet()) {    SortState columnSortState=sortStates.get(column);    if (columnSortState != SortState.NOT_SORTABLE) {      columnSortState=SortState.SORTABLE;    }    sortStates.put(column,columnSortState);  }  for (  final int column : sortStates.keySet()) {    final ImageView sortView=sortViews.get(column);    final SortState sortState=sortStates.get(column);    final int imageRes=sortStateViewProvider.getSortStateViewResource(sortState);    sortView.setImageResource(imageRes);    if (imageRes == 0) {      sortView.setVisibility(GONE);    } else {      sortView.setVisibility(VISIBLE);    }  }}  }
class C{  public String retrieveFolderDocumentAnnData(AcsAccessObject acs,ArchiveObject arch,FolderObject fdr,int docId,String entidad) throws Exception {  String data=null;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (acs == null)     data=FolderMdoFdr.retrieveFolderDocumentAnnData(dbConn,null,arch.getArchiveToken(),fdr.getFolderToken(),docId); else     data=FolderMdoFdr.retrieveFolderDocumentAnnData(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdr.getFolderToken(),docId);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return data;}  }
class C{  @SuppressWarnings("unchecked") public T indices(String[] indices){  this.indices=indices;  return (T)this;}  }
class C{  protected FunctionNode quadary(final SimpleNode node,final URI functionURI) throws VisitorException {  return new FunctionNode(functionURI,null,new ValueExpressionNode[]{left(node),right(node),(ValueExpressionNode)node.jjtGetChild(2).jjtAccept(this,null),(ValueExpressionNode)node.jjtGetChild(3).jjtAccept(this,null)});}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  m_inCData=false;}  }
class C{  public boolean init(String[] args) throws ParseException, IOException {  CommandLine cliParser=AMOptions.parse(new GnuParser(),args);  if (fileExist(log4jPath)) {    try {      Log4jPropertyHelper.updateLog4jConfiguration(ApplicationMaster.class,log4jPath);    } catch (    Exception e) {      LOG.warn("Can not set up custom log4j properties. " + e);    }  }  if (AMOptions.HELP.has(cliParser)) {    AMOptions.printHelp();    return false;  }  zkQuorum=AMOptions.ZK_QUORUM.get(cliParser);  zkRoot=AMOptions.ZK_ROOT.get(cliParser);  appJarPath=new Path(AMOptions.APP_JAR_PATH.get(cliParser));  Map<String,String> envs=System.getenv();  if (!envs.containsKey(Environment.CONTAINER_ID.name())) {    if (AMOptions.APP_ATTEMPT_ID.has(cliParser)) {      String appIdStr=AMOptions.APP_ATTEMPT_ID.get(cliParser,"");      appAttemptID=ConverterUtils.toApplicationAttemptId(appIdStr);    } else {      throw new IllegalArgumentException("Application Attempt Id not set in the environment");    }  } else {    ContainerId containerId=ConverterUtils.toContainerId(envs.get(Environment.CONTAINER_ID.name()));    appAttemptID=containerId.getApplicationAttemptId();  }  if (!envs.containsKey(ApplicationConstants.APP_SUBMIT_TIME_ENV)) {    throw new RuntimeException(ApplicationConstants.APP_SUBMIT_TIME_ENV + " not set in the environment");  }  if (!envs.containsKey(Environment.NM_HOST.name())) {    throw new RuntimeException(Environment.NM_HOST.name() + " not set in the environment");  }  if (!envs.containsKey(Environment.NM_HTTP_PORT.name())) {    throw new RuntimeException(Environment.NM_HTTP_PORT + " not set in the environment");  }  if (!envs.containsKey(Environment.NM_PORT.name())) {    throw new RuntimeException(Environment.NM_PORT.name() + " not set in the environment");  }  LOG.info("Application master for app" + ", appId=" + appAttemptID.getApplicationId().getId() + ", clustertimestamp="+ appAttemptID.getApplicationId().getClusterTimestamp()+ ", attemptId="+ appAttemptID.getAttemptId());  if (cliParser.hasOption("shell_env")) {    String shellEnvs[]=cliParser.getOptionValues("shell_env");    for (    String env : shellEnvs) {      env=env.trim();      int index=env.indexOf('=');      if (index == -1) {        shellEnv.put(env,"");        continue;      }      String key=env.substring(0,index);      String val="";      if (index < (env.length() - 1)) {        val=env.substring(index + 1);      }      shellEnv.put(key,val);    }  }  if (envs.containsKey(Constants.TIMELINEDOMAIN)) {    domainId=envs.get(Constants.TIMELINEDOMAIN);  }  return true;}  }
class C{  public static double convertSecondsToMillis(double seconds){  return (seconds * SECOND_TO_MILLIS);}  }
class C{  public void addPrivateKeyEntry(String alias,X509Certificate[] certChain,PrivateKey key,char[] keyPassword,boolean autoRefresh) throws CertificateEncodingException, UnsupportedEncodingException {  if (certChain == null || certChain.length < 1) {    throw new IllegalArgumentException(String.format("'certChain' cannot be null or be empty. " + "[Store: %s, Server: %s, User: %s]",_storeName,_serverName,_userName));  }  if (key == null) {    throw new IllegalArgumentException(String.format("'key' cannot be null. " + "[Store: %s, Server: %s, User: %s]",_storeName,_serverName,_userName));  }  String pemCertChain=VecsUtils.encodeX509CertificatesToString(certChain);  String pemKey=VecsUtils.encodePrivateKeyToString(key);  String passwordString=VecsUtils.encodeCharArrToString(keyPassword);  int error=VecsAdapter.VecsAddEntryW(_storeHandle,VecsEntryType.CERT_ENTRY_TYPE_PRIVATE_KEY.getValue(),alias,pemCertChain,pemKey,passwordString,false);  BAIL_ON_ERROR(error,"Adding VecsEntryType.CERT_ENTRY_TYPE_PRIVATE_KEY entry " + "into store '%s' failed. [Server: %s, User: %s]",_storeName,_serverName,_userName);}  }
class C{  public void preferenceChanged(boolean width,boolean height){  if (axis == X_AXIS) {    if (width) {      majorValid=false;    }    if (height) {      minorValid=false;    }  } else {    if (width) {      minorValid=false;    }    if (height) {      majorValid=false;    }  }  childSizeValid=false;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static void close(){  close(false);}  }
class C{  private Set<Entity> analyseRequiredUpdates(AuditInformation audit,OperationGroup updateGroup){  Set<Entity> updateRequired=new HashSet<>();  Set<Entity> updateNotRequired=new HashSet<>();  for (  Entity entity : updateGroup.getEntities()) {    analyseEntityRequiresUpdate(audit,entity,updateRequired,updateNotRequired);  }  return updateRequired;}  }
class C{  public static String joinWithSpace(List<String> elements){  return Joiner.on(SPACE).join(elements);}  }
class C{  public static Object destroyRegion(){  try {    Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(region);    region.destroyRegion();    region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNull(region);    return eventId;  } catch (  Exception e) {    fail("Destroy failed due to ",e);  }  return null;}  }
class C{  public DateHistogramBuilder extendedBounds(String min,String max){  extendedBoundsMin=min;  extendedBoundsMax=max;  return this;}  }
class C{  public static void deleteSharedPreference(Context context,String key){  try {    getSharedPreferenceManager(context).edit().remove(key).apply();  } catch (  Exception e) {  }}  }
class C{  public Owner owner(){  return owner;}  }
class C{  protected void clearMod2Tbemp(){  mod2=mod2 & ~MOD2_TBEMP_MASK;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public boolean match(MethodRef node,Object other){  if (!(other instanceof MethodRef)) {    return false;  }  MethodRef o=(MethodRef)other;  return (safeSubtreeMatch(node.getQualifier(),o.getQualifier()) && safeSubtreeMatch(node.getName(),o.getName()) && safeSubtreeListMatch(node.parameters(),o.parameters()));}  }
class C{  public CorrelationMatrixRow2DataTableRowIterator(NumericalMatrix matrix){  this.matrix=matrix;  this.currentRow=0;}  }
class C{  @Override public String toString(){  StringBuilder output=new StringBuilder();  if (mTestClass != null) {    output.append(mTestClass);    output.append('#');  }  if (mTestName != null) {    output.append(mTestName);  }  if (output.length() > 0) {    return output.toString();  }  return "unknown result";}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  if (mWebView != null) {    mWebView.destroy();  }  mWebView=new WebView(getActivity());  mIsWebViewAvailable=true;  return mWebView;}  }
class C{  public RawProperty(String propertyName,String value){  this(propertyName,value,null);}  }
class C{  public Solution(int numberOfVariables,int numberOfObjectives){  this(numberOfVariables,numberOfObjectives,0);}  }
class C{  public void addBuilderSet(Builder builer){  relations.addAll(builer.relations);}  }
class C{  public void toInteger() throws IOException {  print("toInteger",null);}  }
class C{  public boolean doAuthenticate(HashMap userProps) throws Exception {  if (ApplicationProperties.getProperty("tmtbl.authenticate.ldap.provider") == null)   throw new Exception("Ldap provider is not set.");  String principal=ApplicationProperties.getProperty("tmtbl.authenticate.ldap.principal");  if (principal == null)   throw new Exception("Ldap principal is not set.");  String query=ApplicationProperties.getProperty("tmtbl.authenticate.ldap.query");  if (query == null)   throw new Exception("Ldap query is not set.");  String n=(String)userProps.get("username");  String p=(String)userProps.get("password");  Hashtable<String,String> env=getEnv();  env.put(Context.SECURITY_PRINCIPAL,principal.replaceAll("%",n));  env.put(Context.SECURITY_CREDENTIALS,p);  InitialDirContext cx=new InitialDirContext(env);  String idAttributeName=ApplicationProperties.getProperty("tmtbl.authenticate.ldap.externalId","uid");  Attributes attributes=cx.getAttributes(query.replaceAll("%",n),new String[]{idAttributeName});  Attribute idAttribute=attributes.get(idAttributeName);  if (idAttribute != null) {    sLog.debug("Ldap authentication passed ... ");    setAuthSucceeded(true);    iExternalUid=(String)idAttribute.get();    try {      if (iExternalUid != null && ApplicationProperties.getProperty("tmtbl.authenticate.ldap.externalId.format") != null)       iExternalUid=new DecimalFormat(ApplicationProperties.getProperty("tmtbl.authenticate.ldap.externalId.format")).format(Long.parseLong(iExternalUid));    } catch (    NumberFormatException e) {    }    setUser(n);    return true;  }  return false;}  }
class C{  protected String s(Object obj){  return obj.toString();}  }
class C{  public void shutdown(){  shutdown=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.306 -0500",hash_original_method="FDCDF9463F1CDDAF0BCBB63B8B4D05F5",hash_generated_method="6F9F4BC4A555F6FA29F7EE824BCD7CBA") public java.util.List createHeaders(String headers) throws java.text.ParseException {  if (headers == null)   throw new NullPointerException("null arg!");  StringMsgParser smp=new StringMsgParser();  SIPHeader shdr=smp.parseSIPHeader(headers);  if (shdr instanceof SIPHeaderList)   return (SIPHeaderList)shdr; else   throw new ParseException("List of headers of this type is not allowed in a message",0);}  }
class C{  public KeyedPortal(final String key){  this(key,1);}  }
class C{  public static SimpleDataSet read(Path path,char delimiter,int lines_to_skip,char comment,Set<Integer> cat_cols) throws IOException {  BufferedReader br=Files.newBufferedReader(path,Charset.defaultCharset());  SimpleDataSet ret=read(br,delimiter,lines_to_skip,comment,cat_cols);  br.close();  return ret;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void checkPermissions(IDiscordClient client,IChannel channel,List<IRole> roles,EnumSet<Permissions> required) throws MissingPermissionsException {  checkPermissions(client.getOurUser(),channel,roles,required);}  }
class C{  public SolrStreamingService(TimeSeriesConverter<T> converter,SolrQuery query,SolrClient connection,int nrOfTimeSeriesPerBatch){  this.converter=converter;  this.solrStreamingHandler=new SolrStreamingHandler();  this.query=query;  this.connection=connection;  this.nrOfTimeSeriesPerBatch=nrOfTimeSeriesPerBatch;}  }
class C{  protected void processVmDestroy(SimEvent ev,boolean ack){  Vm vm=(Vm)ev.getData();  getVmAllocationPolicy().deallocateHostForVm(vm);  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=vm.getId();    data[2]=CloudSimTags.TRUE;    sendNow(vm.getUserId(),CloudSimTags.VM_DESTROY_ACK,data);  }  getVmList().remove(vm);}  }
class C{  private static String buildMessage(final Locale locale,final String pattern,final Object... arguments){  return (pattern == null) ? "" : new MessageFormat(translate(pattern,locale),locale).format(arguments);}  }
class C{  public void incomingStarted(){  inputStream.incomingStarted();}  }
class C{  public boolean matchChomp(String seq){  if (matches(seq)) {    pos+=seq.length();    return true;  } else {    return false;  }}  }
class C{  private void writeToFile(StringBuffer sb,String fileName){  try {    File out=new File(fileName);    FileWriter fw=new FileWriter(out);    for (int i=0; i < sb.length(); i++) {      char c=sb.charAt(i);      if (c == ';' || c == '}') {        fw.write(c);        if (sb.substring(i + 1).startsWith("//"))         fw.write('\t'); else         fw.write(Env.NL);      } else       if (c == '{') {        fw.write(Env.NL);        fw.write(c);        fw.write(Env.NL);      } else       fw.write(c);    }    fw.flush();    fw.close();    float size=out.length();    size/=1024;    log.info(out.getAbsolutePath() + " - " + size+ " kB");  } catch (  Exception ex) {    log.log(Level.SEVERE,fileName,ex);  }}  }
class C{  @Override public int internalGetIndex(){  return this.id;}  }
class C{  public void newObject() throws IOException {  print("newObject",null);}  }
class C{  private boolean itemIsObscuredByHeader(RecyclerView parent,View item,View header,int orientation){  RecyclerView.LayoutParams layoutParams=(RecyclerView.LayoutParams)item.getLayoutParams();  Rect headerMargins=mDimensionCalculator.getMargins(header);  int adapterPosition=parent.getChildAdapterPosition(item);  if (adapterPosition == RecyclerView.NO_POSITION || mHeaderProvider.getHeader(parent,adapterPosition) != header) {    return false;  }  if (orientation == LinearLayoutManager.VERTICAL) {    int itemTop=item.getTop() - layoutParams.topMargin;    int headerBottom=header.getBottom() + headerMargins.bottom + headerMargins.top;    if (itemTop > headerBottom) {      return false;    }  } else {    int itemLeft=item.getLeft() - layoutParams.leftMargin;    int headerRight=header.getRight() + headerMargins.right + headerMargins.left;    if (itemLeft > headerRight) {      return false;    }  }  return true;}  }
class C{  public JSONObject put(String key,boolean value){  super.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public StateMachineHandler(Class<?> beanClass,T metaAnnotation,Annotation annotation,MethodInvokingStateMachineRuntimeProcessor<T,S,E> processor){  this.beanClass=beanClass;  this.processor=processor;  this.metaAnnotation=metaAnnotation;  this.annotation=annotation;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.675 -0500",hash_original_method="CC232B8CAE36CFF9A4793AA7869B9E47",hash_generated_method="FEE36900B728A02BB946FAF254D44323") public static String toString(double d){  String s=new String();  s.addTaint(d);  return s;}  }
class C{  public void handleTouchEvent(MotionEvent ev,int downX,int downY,int lastY,OnFastScrollStateChangeListener stateChangeListener){  ViewConfiguration config=ViewConfiguration.get(mRecyclerView.getContext());  int action=ev.getAction();  int y=(int)ev.getY();switch (action) {case MotionEvent.ACTION_DOWN:    if (isNearPoint(downX,downY)) {      mTouchOffset=downY - mThumbPosition.y;    }  break;case MotionEvent.ACTION_MOVE:if (!mIsDragging && isNearPoint(downX,downY) && Math.abs(y - downY) > config.getScaledTouchSlop()) {  mRecyclerView.getParent().requestDisallowInterceptTouchEvent(true);  mIsDragging=true;  mTouchOffset+=(lastY - downY);  mPopup.animateVisibility(true);  if (stateChangeListener != null) {    stateChangeListener.onFastScrollStart();  }}if (mIsDragging) {int top=0;int bottom=mRecyclerView.getHeight() - mThumbHeight;float boundedY=(float)Math.max(top,Math.min(bottom,y - mTouchOffset));String sectionName=mRecyclerView.scrollToPositionAtProgress((boundedY - top) / (bottom - top));mPopup.setSectionName(sectionName);mPopup.animateVisibility(!sectionName.isEmpty());mRecyclerView.invalidate(mPopup.updateFastScrollerBounds(mRecyclerView,mThumbPosition.y));}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:mTouchOffset=0;if (mIsDragging) {mIsDragging=false;mPopup.animateVisibility(false);if (stateChangeListener != null) {stateChangeListener.onFastScrollStop();}}break;}}  }
class C{  public OutputStream openOutputStream() throws IOException {  ensureOpen();  if (mPrivateOutputOpen) {    throw new IOException("no more input streams available, stream already opened");  }  if (!mRequestFinished) {    throw new IOException("no  output streams available ,request not finished");  }  if (mPrivateOutput == null) {    mPrivateOutput=new PrivateOutputStream(this,getMaxPacketSize());  }  mPrivateOutputOpen=true;  return mPrivateOutput;}  }
class C{  public void checkForRecursion() throws CFGBuilderException {  Context callerContext=caller;  while (callerContext != null) {    if (callerContext.subroutine == this.subroutine) {      throw new CFGBuilderException("JSR recursion detected!");    }    callerContext=callerContext.caller;  }}  }
class C{  public void beginRaw(PGraphics rawGraphics){  this.raw=rawGraphics;  rawGraphics.beginDraw();}  }
class C{  private void init(CompiereColor color){  try {    jbInit();  } catch (  Exception e) {    e.printStackTrace();  }  bOK.addActionListener(this);  bCancel.addActionListener(this);  typeField.addActionListener(this);  flatField.addActionListener(this);  gradientUpper.addActionListener(this);  gradientLower.addActionListener(this);  urlField.addActionListener(this);  alphaField.addActionListener(this);  taintColor.addActionListener(this);  lineColor.addActionListener(this);  backColor.addActionListener(this);  widthField.addActionListener(this);  distanceField.addActionListener(this);  gradientStartField.addActionListener(this);  gradientDistanceField.addActionListener(this);  if (color == null)   setColor(m_cc); else   setColor(new CompiereColor(color));  AdempierePLAF.showCenterScreen(this);}  }
class C{  @Override public void inverseTranslate(final Geometry geom){  if (referenceProjection != null) {    referenceProjection.inverseTranslate(geom);  }}  }
class C{  public boolean visitLocationPath(ExpressionOwner owner,LocPathIterator path){  return true;}  }
class C{  protected void reuseConfiguration(Configuration config){  this.config=config;  initialize(false);}  }
class C{  public static final boolean isSmscDelNotRequested(byte registeredDelivery){  return isSmscDeliveryReceipt(registeredDelivery,SMPPConstant.REGDEL_SMSC_NO);}  }
class C{  public Object evaluate(String scriptText,String fileName) throws CompilationFailedException {  return evaluate(scriptText,fileName,DEFAULT_CODE_BASE);}  }
class C{  public static double startSimulation() throws NullPointerException {  Log.printConcatLine("Starting CloudSim version ",CLOUDSIM_VERSION_STRING);  try {    double clock=run();    cisId=-1;    shutdownId=-1;    cis=null;    calendar=null;    traceFlag=false;    return clock;  } catch (  IllegalArgumentException e) {    e.printStackTrace();    throw new NullPointerException("CloudSim.startCloudSimulation() :" + " Error - you haven't initialized CloudSim.");  }}  }
class C{  public static boolean isSymlink(File file) throws IOException {  if (file == null) {    throw new NullPointerException("File must not be null");  }  if (File.separatorChar == '\\') {    return false;  }  File fileInCanonicalDir=null;  if (file.getParent() == null) {    fileInCanonicalDir=file;  } else {    File canonicalDir=file.getParentFile().getCanonicalFile();    fileInCanonicalDir=new File(canonicalDir,file.getName());  }  if (fileInCanonicalDir.getCanonicalFile().equals(fileInCanonicalDir.getAbsoluteFile())) {    return false;  } else {    return true;  }}  }
class C{  public ParallelLeafReader(boolean closeSubReaders,LeafReader... readers) throws IOException {  this(closeSubReaders,readers,readers);}  }
class C{  private void prepareTrainedIndex() throws Exception {  addDoc(adoc(ID,"1",TITLE,"word1 word1 word1",CONTENT,"word2 word2 word2",AUTHOR,"Name Surname",CLASS,"class1"));  addDoc(adoc(ID,"2",TITLE,"word1 word1",CONTENT,"word2 word2",AUTHOR,"Name Surname",CLASS,"class1"));  addDoc(adoc(ID,"3",TITLE,"word1 word1 word1",CONTENT,"word2",AUTHOR,"Name Surname",CLASS,"class1"));  addDoc(adoc(ID,"4",TITLE,"word1 word1 word1",CONTENT,"word2 word2 word2",AUTHOR,"Name Surname",CLASS,"class1"));  addDoc(adoc(ID,"5",TITLE,"word4 word4 word4",CONTENT,"word5 word5",AUTHOR,"Name1 Surname1",CLASS,"class2"));  addDoc(adoc(ID,"6",TITLE,"word4 word4",CONTENT,"word5",AUTHOR,"Name1 Surname1",CLASS,"class2"));  addDoc(adoc(ID,"7",TITLE,"word4 word4 word4",CONTENT,"word5 word5 word5",AUTHOR,"Name1 Surname1",CLASS,"class2"));  addDoc(adoc(ID,"8",TITLE,"word4",CONTENT,"word5 word5 word5 word5",AUTHOR,"Name1 Surname1",CLASS,"class2"));  addDoc(commit());}  }
class C{  public PLCylindricalPanorama(){  super();}  }
class C{  protected void handleBouncing(Mail mail) throws MessagingException {  mail.setState(Mail.ERROR);  setMessageDeleted();  mail.setErrorMessage("This mail from FetchMail task " + getFetchTaskName() + " seems to be bouncing!");  logStatusError("Message is bouncing! Deleted from message store and moved to the Error repository.");}  }
class C{  public int compareTo(DebugBreakpoint other){  return new Integer(offset).compareTo(other.offset);}  }
class C{  @SuppressWarnings({"unused"}) public RequestData addFile(String fieldName,String uploadFile,String fileName){  addFile(fieldName,new File(uploadFile),fileName);  return this;}  }
class C{  BigDecimal multiply(final BigDecimal price,final BigDecimal qty){  return price.multiply(qty).setScale(Constants.DEFAULT_SCALE,BigDecimal.ROUND_HALF_UP);}  }
class C{  private void executeStatements(ExecutionResult result,PrintStream out,AtomicInteger num) throws TimeoutException, InvocationTargetException, IllegalAccessException, InstantiationException, VMError, EvosuiteError {  for (  Statement s : test) {    if (Thread.currentThread().isInterrupted() || Thread.interrupted()) {      logger.info("Thread interrupted at statement " + num + ": "+ s.getCode());      throw new TimeoutException();    }    if (logger.isDebugEnabled()) {      logger.debug("Executing statement " + s.getCode());    }    ExecutionTracer.statementExecuted();    informObservers_before(s);    Throwable exceptionThrown=s.execute(scope,out);    if (exceptionThrown != null) {      if (exceptionThrown instanceof VMError) {        throw (VMError)exceptionThrown;      }      if (exceptionThrown instanceof EvosuiteError) {        throw (EvosuiteError)exceptionThrown;      }      if (exceptionThrown instanceof TestCaseExecutor.TimeoutExceeded) {        logger.debug("Test timed out!");        exceptionsThrown.put(test.size(),exceptionThrown);        result.setThrownExceptions(exceptionsThrown);        result.reportNewThrownException(test.size(),exceptionThrown);        result.setTrace(ExecutionTracer.getExecutionTracer().getTrace());        break;      }      exceptionsThrown.put(num.get(),exceptionThrown);      if (ExecutionTracer.getExecutionTracer().getLastException() == exceptionThrown) {        result.explicitExceptions.put(num.get(),true);      } else {        result.explicitExceptions.put(num.get(),false);      }      printDebugInfo(s,exceptionThrown);      if (Properties.BREAK_ON_EXCEPTION || exceptionThrown instanceof SystemExitException) {        informObservers_after(s,exceptionThrown);        break;      }    }    if (logger.isDebugEnabled()) {      logger.debug("Done statement " + s.getCode());    }    informObservers_after(s,exceptionThrown);    num.incrementAndGet();  }  informObservers_finished(result);}  }
class C{  public void testMajorCompaction() throws Throwable {  writeEntries(31);  assertEquals(log.length(),31L);  for (long index=21; index < 28; index++) {    log.release(index);  }  log.commit(31).compactor().minorIndex(31).majorIndex(31);  CountDownLatch latch=new CountDownLatch(1);  log.compactor().compact(Compaction.MAJOR).thenRun(null);  latch.await();  assertEquals(log.length(),31L);  for (long index=21; index < 28; index++) {    assertTrue(log.lastIndex() >= index);    assertFalse(log.contains(index));    try (TestEntry entry=log.get(index)){      assertNull(entry);    }   }}  }
class C{  protected ClassLoader(){  this(getSystemClassLoader(),false);}  }
class C{  private boolean hasEarpiece(){  return apprtcContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_TELEPHONY);}  }
class C{  public CreateSnapshotRequestBuilder(ElasticsearchClient client,CreateSnapshotAction action){  super(client,action,new CreateSnapshotRequest());}  }
class C{  public static void putObject(final ByteBuffer buffer,Serializable o){  try (ByteArrayOutputStream bos=new ByteArrayOutputStream()){    try (ObjectOutput oout=new ObjectOutputStream(bos)){      oout.writeObject(o);      byte[] laneBytes=bos.toByteArray();      buffer.putInt(laneBytes.length);      for (int i=0; i < laneBytes.length; i++) {        buffer.put(laneBytes[i]);      }    }   } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public String toString(){  return String.format("sumOfLogCounts=%f intervalCount=%d lambda=%f intervalAllCount=%d allCount=%d, maxAppear=%d, badFit=%b",m_totalLogCounts,m_intervalCount,m_lambda,m_intervalAllCount,m_allCount,m_maxNumAppearance,m_badFit);}  }
class C{  @Override public void updateShort(String columnLabel,short x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateShort(" + quote(columnLabel) + ", (short) "+ x+ ");");    }    update(columnLabel,ValueShort.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public static Intent parseIntent(Resources resources,XmlPullParser parser,AttributeSet attrs) throws XmlPullParserException, IOException {  Intent intent=new Intent();  TypedArray sa=resources.obtainAttributes(attrs,com.android.internal.R.styleable.Intent);  intent.setAction(sa.getString(com.android.internal.R.styleable.Intent_action));  String data=sa.getString(com.android.internal.R.styleable.Intent_data);  String mimeType=sa.getString(com.android.internal.R.styleable.Intent_mimeType);  intent.setDataAndType(data != null ? Uri.parse(data) : null,mimeType);  String packageName=sa.getString(com.android.internal.R.styleable.Intent_targetPackage);  String className=sa.getString(com.android.internal.R.styleable.Intent_targetClass);  if (packageName != null && className != null) {    intent.setComponent(new ComponentName(packageName,className));  }  sa.recycle();  int outerDepth=parser.getDepth();  int type;  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {      continue;    }    String nodeName=parser.getName();    if (nodeName.equals("category")) {      sa=resources.obtainAttributes(attrs,com.android.internal.R.styleable.IntentCategory);      String cat=sa.getString(com.android.internal.R.styleable.IntentCategory_name);      sa.recycle();      if (cat != null) {        intent.addCategory(cat);      }      XmlUtils.skipCurrentTag(parser);    } else     if (nodeName.equals("extra")) {      if (intent.mExtras == null) {        intent.mExtras=new Bundle();      }      resources.parseBundleExtra("extra",attrs,intent.mExtras);      XmlUtils.skipCurrentTag(parser);    } else {      XmlUtils.skipCurrentTag(parser);    }  }  return intent;}  }
class C{  public static HTTPResponse delete(URL url,String username,String password,long timeout,boolean redirect,String charset,String useragent,ProxyData proxy,lucee.commons.net.http.Header[] headers) throws IOException {  HttpDelete delete=new HttpDelete(url.toExternalForm());  return _invoke(url,delete,username,password,timeout,redirect,charset,useragent,proxy,headers,null);}  }
class C{  @SuppressWarnings("UnusedDeclaration") public static final int convertNameToID(final String name){  int id=-1;  if ((name.contains("Indexed"))) {    id=Indexed;  } else   if ((name.contains("Separation"))) {    id=Separation;  } else   if (name.contains("DeviceN")) {    id=DeviceN;  } else   if (name.contains("DeviceCMYK") || name.contains("CMYK")) {    id=DeviceCMYK;  } else   if (name.contains("CalGray")) {    id=CalGray;  } else   if (name.contains("CalRGB")) {    id=CalRGB;  } else   if (name.contains("Lab")) {    id=Lab;  } else   if (name.contains("ICCBased")) {    id=ICC;  } else   if (name.contains("Pattern")) {    id=Pattern;  } else   if (name.contains("DeviceRGB") || name.contains("RGB")) {    id=DeviceRGB;  } else   if (name.contains("DeviceGray") || name.indexOf('G') != -1) {    id=DeviceGray;  }  return id;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.STRING_LITERAL__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean hasOffsets(){  return hasOffsets;}  }
class C{  static public <E>void assertSameIteratorAnyOrder(final String msg,final ITuple<E>[] expected,final ITupleIterator<E> actual){  int nfound=0;  while (nfound < expected.length) {    if (!actual.hasNext()) {      fail(msg + ": Index exhausted while expecting more object(s)" + ": nfound="+ nfound+ ", nexpected="+ expected.length);    }    final ITuple<E> actualTuple=actual.next();    if (log.isInfoEnabled())     log.info("nvisited=" + (nfound + 1) + ", actualTuple="+ actualTuple);    boolean found=false;    for (int k=0; k < expected.length && !found; k++) {      final ITuple<E> expectedTuple=expected[k];      if (expectedTuple == null)       continue;      if (sameTuple(expectedTuple,actualTuple)) {        expected[k]=null;        found=true;        nfound++;        break;      }    }    if (!found)     fail("Tuple not expected" + ": nvisited=" + (nfound + 1) + ", tuple="+ actualTuple);  }  if (actual.hasNext()) {    fail("Iterator will deliver too many tuples: next=" + actual.next());  }}  }
class C{  public final static String formatElements(final HeaderElement[] elems,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatElements(null,elems,quote).toString();}  }
class C{  static void print(String key,String argument){  System.out.print(format(key,argument));}  }
class C{  private LoggingEvent convertToEvent(Map fieldMap,String[] exception,DateFormat dateFormat){  if (fieldMap == null) {    return null;  }  if (!fieldMap.containsKey(LOGGER)) {    fieldMap.put(LOGGER,"Unknown");  }  if (exception == null) {    exception=emptyException;  }  Logger logger=null;  long timeStamp=0L;  String level=null;  String threadName=null;  Object message=null;  String ndc=null;  String className=null;  String methodName=null;  String eventFileName=null;  String lineNumber=null;  Hashtable properties=new Hashtable();  logger=Logger.getLogger((String)fieldMap.remove(LOGGER));  if ((dateFormat != null) && fieldMap.containsKey(TIMESTAMP)) {    String dateString=(String)fieldMap.remove(TIMESTAMP);    try {      timeStamp=dateFormat.parse(dateString).getTime();    } catch (    Exception e) {      LOG.log(java.util.logging.Level.WARNING,"Error parsing date with format \"" + dateFormat + "\" with String \""+ dateString+ "\"",e);    }  }  if (timeStamp == 0L) {    timeStamp=System.currentTimeMillis();  }  message=fieldMap.remove(MESSAGE);  if (message == null) {    message="";  }  level=(String)fieldMap.remove(LEVEL);  Level levelImpl;  if (level == null) {    levelImpl=Level.DEBUG;  } else {    level=level.trim();    final Optional<Level> levelOptional=customLevelsParser.parse(level);    if (levelOptional.isPresent()) {      levelImpl=levelOptional.get();    } else {      levelImpl=Level.toLevel(level.trim());      if (!level.equals(levelImpl.toString())) {        levelImpl=Level.DEBUG;        LOG.fine("found unexpected level: " + level + ", logger: "+ logger.getName()+ ", msg: "+ message);        message=level + " " + message;      }    }  }  threadName=(String)fieldMap.remove(THREAD);  if (threadName == null) {    threadName="";  }  ndc=(String)fieldMap.remove(NDC);  className=(String)fieldMap.remove(CLASS);  methodName=(String)fieldMap.remove(METHOD);  eventFileName=(String)fieldMap.remove(FILE);  lineNumber=(String)fieldMap.remove(LINE);  properties.putAll(fieldMap);  LocationInfo info=null;  if ((eventFileName != null) || (className != null) || (methodName != null)|| (lineNumber != null)) {    info=new LocationInfo(eventFileName,className,methodName,lineNumber);  } else {    info=LocationInfo.NA_LOCATION_INFO;  }  LoggingEvent event=new LoggingEvent(null,logger,timeStamp,levelImpl,message,threadName,new ThrowableInformation(exception),ndc,info,properties);  return event;}  }
class C{  public static void decorate(JTextComponent textComponent,List items,boolean strictMatching){  decorate(textComponent,items,strictMatching,ObjectToStringConverter.DEFAULT_IMPLEMENTATION);}  }
class C{  public void cancelAll(){  for (  final ManagedAsyncTask<?,?,?> task : getTaskSpecList()) {    task.cancel(true);  }  mTasks.clear();}  }
class C{  private String addModifyCGStep(Workflow workflow,List<VolumeDescriptor> volumeDescriptors,CGRequestParams cgParams,ProtectionSystem rpSystem,String taskId) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method cgCreationExecuteMethod=new Workflow.Method(METHOD_CG_MODIFY_STEP,rpSystem.getId(),volumeDescriptors,cgParams);  Workflow.Method cgCreationExecutionRollbackMethod=new Workflow.Method(METHOD_CG_MODIFY_ROLLBACK_STEP,rpSystem.getId());  workflow.createStep(STEP_CG_MODIFY,"Modify consistency group subtask for RP CG: " + cgParams.getCgName(),STEP_EXPORT_ORCHESTRATION,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),cgCreationExecuteMethod,cgCreationExecutionRollbackMethod,stepId);  return STEP_CG_MODIFY;}  }
class C{  @Override public void process(HashMap<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    if (e.getValue() == null) {      continue;    }    insert(e.getValue(),cloneKey(e.getKey()));  }}  }
class C{  public boolean onBackPressed(){  if (mIsMultiSelectionMode) {    toggleMultiSelectionMode();    return true;  }  return false;}  }
class C{  protected void startDownload(int blocks){  if (blocks > 0)   log.info("Downloading block chain of size " + blocks + ". "+ (blocks > 1000 ? "This may take a while." : ""));}  }
class C{  public boolean isCached(String uri,int maxWidth,int maxHeight,ImageView.ScaleType scaleType){  return mImageLoader.isCached(uri,maxWidth,maxHeight,scaleType);}  }
class C{  public final void fatal(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {    log(SimpleLog.LOG_LEVEL_FATAL,message,null);  }}  }
class C{  public static Tuple max(TupleSet tuples,String field){  return max(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public static void initOmniboxPosition(){  Logging.logd("    Omnibox position");  RelativeLayout.LayoutParams omniparams=XquidRelativeLayout.LayoutParams.getPredefinedLPFromViewMetrics(omnibox);  RelativeLayout.LayoutParams webrparams=XquidRelativeLayout.LayoutParams.getPredefinedLPFromViewMetrics(publicWebRenderLayout);  RelativeLayout.LayoutParams otilparams=XquidRelativeLayout.LayoutParams.getPredefinedLPFromViewMetrics(omniboxTinyItemsLayout);  XquidRelativeLayout.addRuleLP(aLeft,omniparams,webrparams,otilparams);  XquidRelativeLayout.addRuleLP(aRight,omniparams,webrparams,otilparams);  if (browserStorage.getOmniboxPosition()) {    omniparams.addRule(aBottom);    webrparams.addRule(aTop);    otilparams.addRule(aTop);  } else {    omniparams.addRule(aTop);    webrparams.addRule(aBottom);    otilparams.addRule(aBottom);  }  omnibox.setLayoutParams(omniparams);  publicWebRenderLayout.setLayoutParams(webrparams);  omniboxTinyItemsLayout.setLayoutParams(otilparams);  ((RelativeLayout.LayoutParams)browserInputBar.getLayoutParams()).setMargins(0,0,DpUtil.dp2px(getContext(),3 * 40 + 4),0);  omniPtrLayout.setRotation(OmniboxControl.isBottom() ? 180f : 0f);  getActivity().findViewById(R.id.omnibox_layout_inner).setRotation(OmniboxControl.isBottom() ? 180f : 0);  SimpleSeparator omnisep=(SimpleSeparator)getActivity().findViewById(R.id.omnibox_separator);  RelativeLayout.LayoutParams seplp=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,DpUtil.dp2px(getContext(),1));  seplp.addRule(OmniboxAnimations.isTop() ? RelativeLayout.ALIGN_PARENT_BOTTOM : RelativeLayout.ALIGN_PARENT_TOP);  omnisep.setLayoutParams(seplp);  RelativeLayout.LayoutParams prlp=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,DpUtil.dp2px(getContext(),4));  prlp.addRule(OmniboxAnimations.isTop() ? RelativeLayout.ALIGN_PARENT_BOTTOM : RelativeLayout.ALIGN_PARENT_TOP);  getWebProgressBar().setLayoutParams(prlp);  omnibox.bringToFront();  omniboxTinyItemsLayout.bringToFront();  omniboxControls.bringToFront();  getActivity().findViewById(R.id.omnibox_separator).bringToFront();  resetOmniPositionState();}  }
class C{  public Class<?> createClass(ClassTemplate template) throws ObjectCompositionException {  CtClass cc=template.getCtClass();  String name=cc.getName();  try {    byte[] bytecode=cc.toBytecode();    cc.detach();    return defineClass(name,bytecode);  } catch (  IOException e) {    throw new ObjectCompositionException(e);  }catch (  CannotCompileException e) {    throw new ObjectCompositionException(e);  }}  }
class C{  private static void createOperandExpression(final SQLProvider provider,final INaviOperandTreeNode rootNode,final int parent,final Set<INaviOperandTreeNode> nodes) throws SQLException {  createOperandExpression(provider,rootNode,parent);  nodes.add(rootNode);  for (  final INaviOperandTreeNode child : rootNode.getChildren()) {    createOperandExpression(provider,child,rootNode.getId(),nodes);  }}  }
class C{  public SemBicScore2(ICovarianceMatrix covariances){  if (covariances == null) {    throw new NullPointerException();  }  this.setCovariances(covariances);  this.variables=covariances.getVariables();  this.sampleSize=covariances.getSampleSize();  this.penaltyDiscount=2;  logn=Math.log(sampleSize);}  }
class C{  @Override public void update(DefaultApplicationState transState){  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());  setLastCheckpointCID(transState.getLastCheckpointCID());}  }
class C{  public final void testAddAllValidatorsFromCollection(){  Validator<CharSequence> validator1=Validators.notEmpty("foo");  Validator<CharSequence> validator2=Validators.noWhitespace("bar");  Collection<Validator<CharSequence>> validators1=new LinkedList<>();  validators1.add(validator1);  validators1.add(validator2);  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addAllValidators(validators1);  abstractValidateableView.addAllValidators(validators1);  Collection<Validator<CharSequence>> validators2=abstractValidateableView.getValidators();  assertEquals(validators1.size(),validators2.size());  Iterator<Validator<CharSequence>> iterator=validators2.iterator();  assertEquals(validator1,iterator.next());  assertEquals(validator2,iterator.next());}  }
class C{  public SQLTimeoutException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private CLoadProgressPainter(){}  }
class C{  private Object js_parseInt(Object[] args){  String s=ScriptRuntime.toString(args,0);  int radix=ScriptRuntime.toInt32(args,1);  int len=s.length();  if (len == 0)   return ScriptRuntime.NaNobj;  boolean negative=false;  int start=0;  char c;  do {    c=s.charAt(start);    if (!ScriptRuntime.isStrWhiteSpaceChar(c))     break;    start++;  } while (start < len);  if (c == '+' || (negative=(c == '-')))   start++;  final int NO_RADIX=-1;  if (radix == 0) {    radix=NO_RADIX;  } else   if (radix < 2 || radix > 36) {    return ScriptRuntime.NaNobj;  } else   if (radix == 16 && len - start > 1 && s.charAt(start) == '0') {    c=s.charAt(start + 1);    if (c == 'x' || c == 'X')     start+=2;  }  if (radix == NO_RADIX) {    radix=10;    if (len - start > 1 && s.charAt(start) == '0') {      c=s.charAt(start + 1);      if (c == 'x' || c == 'X') {        radix=16;        start+=2;      } else       if ('0' <= c && c <= '9') {        radix=8;        start++;      }    }  }  double d=ScriptRuntime.stringToNumber(s,start,radix);  return ScriptRuntime.wrapNumber(negative ? -d : d);}  }
class C{  public void saveAsOBJ(String path){  saveAsOBJ(path,true);}  }
class C{  public h5 addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public double raw(){  return nextDouble();}  }
class C{  public MissingFieldException(final String className,final String fieldName){  super("Field not found in class.");  this.className=className;  this.fieldName=fieldName;  add("field",className + "." + fieldName);}  }
class C{  public void onSendMessageError(Message message,ImErrorInfo error){  if (mListener != null)   mListener.onSendMessageError(this,message,error);}  }
class C{  public static String parsePlaceHolder(String path){  return CFMLEngineFactory.parsePlaceHolder(path);}  }
class C{  public String escapeString(String str){  try {    return URLEncoder.encode(str,"utf8").replaceAll("\\+","%20");  } catch (  UnsupportedEncodingException e) {    return str;  }}  }
class C{  public static float toDIPFromPixel(float value){  return value / DisplayMetricsHolder.getWindowDisplayMetrics().density;}  }
class C{  public void testRandomData() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  private void obtainItemColor(@StyleRes final int themeResourceId){  TypedArray typedArray=getContext().getTheme().obtainStyledAttributes(themeResourceId,new int[]{R.attr.bottomSheetItemColor});  int color=typedArray.getColor(0,-1);  if (color != -1) {    setItemColor(color);  }}  }
class C{  @SuppressWarnings("deprecation") public Element writeMatrixOld(Element parent,Object o,String name) throws Exception {  weka.core.Matrix matrix;  Element node;  double[][] array;  int i;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  matrix=(weka.core.Matrix)o;  node=addElement(parent,name,o.getClass().getName(),false);  array=new double[matrix.numRows()][];  for (i=0; i < array.length; i++) {    array[i]=matrix.getRow(i);  }  invokeWriteToXML(node,array,VAL_CELLS);  return node;}  }
class C{  public boolean isSetData(){  return this.data != null;}  }
class C{  protected Boolean visitTypeArgs(final AnnotatedDeclaredType type1,final AnnotatedDeclaredType type2,final VisitHistory visited){  final List<? extends AnnotatedTypeMirror> type1Args=type1.getTypeArguments();  final List<? extends AnnotatedTypeMirror> type2Args=type2.getTypeArguments();  if (type1Args.isEmpty() || type2Args.isEmpty()) {    return true;  }  if (type1Args.size() > 0) {    if (!areAllEqual(type1Args,type2Args,visited)) {      return false;    }  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.COORDINATE___X1:    setX_1(X1_EDEFAULT);  return;case UmplePackage.COORDINATE___Y1:setY_1(Y1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  void compile(){  compiledMethod=context.specialCompile(method);}  }
class C{  @Override public boolean contains(Object object){  return indexOf(object,0) != -1;}  }
class C{  public void addDefaultGraph(IRI graphURI){  defaultGraphs.add(graphURI);}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  public void foundActiveSecondary(Protocol newSecondaryProtocol) throws QueryException {  if (isSecondaryHostFail()) {    if (isExplicitClosed()) {      newSecondaryProtocol.close();      return;    }    if (proxy.lock.tryLock()) {      try {        lockAndSwitchSecondary(newSecondaryProtocol);      }  finally {        proxy.lock.unlock();      }    } else {      if (!waitNewSecondaryProtocol.compareAndSet(null,newSecondaryProtocol)) {        newSecondaryProtocol.close();      }    }  } else {    newSecondaryProtocol.close();  }}  }
class C{  private void appendEvents(ArrayList<Event> events,List<Event> eventsToAppend){  ArrayList<Event> filteredEvents=new ArrayList<>(eventsToAppend.size());  for (  Event event : eventsToAppend) {    if (Event.EVENT_TYPE_MESSAGE.equals(event.type)) {      Message message=JsonUtils.toMessage(event.content);      if (Message.MSGTYPE_FILE.equals(message.msgtype) || Message.MSGTYPE_IMAGE.equals(message.msgtype) || Message.MSGTYPE_VIDEO.equals(message.msgtype)) {        filteredEvents.add(event);      }    }  }  events.addAll(filteredEvents);}  }
class C{  public boolean isShipTo(){  Object oo=get_Value(COLUMNNAME_IsShipTo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("deprecation") public ItemStack toItemStack(int amount) throws Exception {  ItemStack item=new ItemStack(Material.MONSTER_EGG,amount);  Class<?> craftItemStackClass=ReflUtil.getOBCClass("inventory.CraftItemStack");  Method asNMSCopyMethod=ReflUtil.getMethodCached(craftItemStackClass,"asNMSCopy",ItemStack.class);  Class<?> NMSItemStackClass=ReflUtil.getNMSClass("ItemStack");  Object stack=asNMSCopyMethod.invoke(null,item);  Object tagCompound=ReflUtil.getMethodCached(NMSItemStackClass,"getTag").invoke(stack);  Class<?> NBTTagCompoundClass=ReflUtil.getNMSClass("NBTTagCompound");  Constructor<?> NBTTagCompoundConstructor=ReflUtil.getConstructorCached(NBTTagCompoundClass);  if (tagCompound == null) {    tagCompound=NBTTagCompoundConstructor.newInstance();  }  Object id=NBTTagCompoundConstructor.newInstance();  Method tagSetString=ReflUtil.getMethodCached(NBTTagCompoundClass,"setString",String.class,String.class);  tagSetString.invoke(id,"id",type.getName());  Method tagSetTag=ReflUtil.getMethodCached(NBTTagCompoundClass,"set",String.class,NBTTagCompoundClass.getSuperclass());  tagSetTag.invoke(tagCompound,"EntityTag",id);  Method stackSetTag=ReflUtil.getMethodCached(NMSItemStackClass,"setTag",NBTTagCompoundClass);  stackSetTag.invoke(stack,tagCompound);  Method asBukkitCopyMethod=ReflUtil.getMethodCached(craftItemStackClass,"asBukkitCopy",NMSItemStackClass);  return (ItemStack)asBukkitCopyMethod.invoke(null,stack);}  }
class C{  public static long[] hashToLongs(byte[] data,long seed){  if ((data == null) || (data.length == 0)) {    return null;  }  return hash(data,seed);}  }
class C{  private TreeStateNode createNodeAt(TreeStateNode parent,int childIndex){  boolean isParentRoot;  Object newValue;  TreeStateNode newChildNode;  newValue=treeModel.getChild(parent.getValue(),childIndex);  newChildNode=createNodeForValue(newValue);  parent.insert(newChildNode,childIndex);  newChildNode.updatePreferredSize(-1);  isParentRoot=(parent == root);  if (newChildNode != null && parent.isExpanded() && (parent.getRow() != -1 || isParentRoot)) {    int newRow;    if (childIndex == 0) {      if (isParentRoot && !isRootVisible())       newRow=0; else       newRow=parent.getRow() + 1;    } else     if (childIndex == parent.getChildCount())     newRow=parent.getLastVisibleNode().getRow() + 1; else {      TreeStateNode previousNode;      previousNode=(TreeStateNode)parent.getChildAt(childIndex - 1);      newRow=previousNode.getLastVisibleNode().getRow() + 1;    }    visibleNodes.insertElementAt(newChildNode,newRow);  }  return newChildNode;}  }
class C{  public void invalidateCache(URI vplexURI,URI vplexVolumeURI,String stepId){  _log.info("Executing invalidate cache for volume {} on VPLEX {}",vplexVolumeURI,vplexURI);  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);    _log.info("Got VPLEX API client");    Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);    String vplexVolumeName=vplexVolume.getDeviceLabel();    _log.info("Got VPLEX volumes");    boolean stillInProgress=client.invalidateVirtualVolumeCache(vplexVolumeName);    _log.info("Invalidated the VPLEX volume cache");    if (stillInProgress) {      CacheStatusTaskCompleter invalidateCompleter=new CacheStatusTaskCompleter(vplexVolumeURI,stepId);      VPlexCacheStatusJob cacheStatusJob=new VPlexCacheStatusJob(invalidateCompleter);      ControllerServiceImpl.enqueueJob(new QueueJob(cacheStatusJob));      _log.info("Queued job to monitor migration progress.");    } else {      WorkflowStepCompleter.stepSucceded(stepId);      _log.info("Updated workflow step state to success");    }  } catch (  VPlexApiException vae) {    _log.error("Exception invalidating VPLEX volume cache " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception e) {    _log.error("Exception invalidating VPLEX volume cache " + e.getMessage(),e);    WorkflowStepCompleter.stepFailed(stepId,VPlexApiException.exceptions.failedInvalidatingVolumeCache(vplexVolumeURI.toString(),e));  }}  }
class C{  @Nullable private Object extractPojoParameter(@Nullable String cacheName,String typeName,String fldName,Object obj) throws CacheException {  try {    Map<String,PojoPropertiesCache> cacheProps=pojosProps.get(cacheName);    if (cacheProps == null)     throw new CacheException("Failed to find POJO type metadata for cache: " + U.maskName(cacheName));    PojoPropertiesCache ppc=cacheProps.get(typeName);    if (ppc == null)     throw new CacheException("Failed to find POJO type metadata for type: " + typeName);    ClassProperty prop=ppc.props.get(fldName);    if (prop == null)     throw new CacheLoaderException("Failed to find property in POJO class [class=" + typeName + ", prop="+ fldName+ "]");    return prop.get(obj);  } catch (  Exception e) {    throw new CacheException("Failed to read object property [cache=" + U.maskName(cacheName) + ", type="+ typeName+ ", prop="+ fldName+ "]",e);  }}  }
class C{  public Swagger2MarkupConfigBuilder withGeneratedExamples(){  config.generatedExamplesEnabled=true;  return this;}  }
class C{  @Override public boolean match(SimEvent ev){  return true;}  }
class C{  public LinkArgument createLink(){  LinkArgument result=new LinkArgument();  links.add(result);  return result;}  }
class C{  @RequestMapping("/") public ModelAndView index(HttpServletRequest request,@RequestParam Map<String,String> params){  ModelAndView mav=createView("index");  boolean authenticationFailure=params.containsKey("error");  setupView(mav,authenticationFailure);  if (userEntityService.isAuthenticated()) {    return new ModelAndView(new RedirectView("/home"));  }  return mav;}  }
class C{  void recomposeAttributeSets(ElemAttributeSet attrSet){  ArrayList attrSetList=(ArrayList)m_attrSets.get(attrSet.getName());  if (null == attrSetList) {    attrSetList=new ArrayList();    m_attrSets.put(attrSet.getName(),attrSetList);  }  attrSetList.add(attrSet);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.326 -0500",hash_original_method="A0A0F085E1B8E4ED63796A6BDE3F17D2",hash_generated_method="CB68B9F827838589982D9AC342CE8AAC") public boolean allowsAllContentSubTypes(){  if (mediaRange == null) {    return false;  } else   return 1 == (mediaRange.getSubtype().compareTo(STAR));}  }
class C{  public TokenizerSymbol(String name,String startText,String tailText,boolean hidden,boolean decodePaired,boolean enabled,boolean canBeNested){  this.name=name;  this.startText=startText;  this.tailText=tailText;  this.hidden=hidden;  this.decodePaired=decodePaired;  this.enabled=enabled;  this.canBeNested=canBeNested;}  }
class C{  public static void showKeyboard(Context context,EditText target){  if (context == null || target == null) {    return;  }  InputMethodManager imm=getInputMethodManager(context);  imm.showSoftInput(target,InputMethodManager.SHOW_IMPLICIT);}  }
class C{  public void push(final int value){  if (value >= -1 && value <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + value);  } else   if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,value);  } else   if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,value);  } else {    mv.visitLdcInsn(new Integer(value));  }}  }
class C{  public BasicGroup(final boolean theOptional){  mIsOptional=theOptional;}  }
class C{  public ImageInfo inspectImage(String image) throws IOException {  return inspectImage(InspectImageParams.create(image));}  }
class C{  private JRadioButton addRadioButton(String text,Container container,int leftIndent){  JRadioButton radioButton=new JRadioButton(text);  radioButton.setAlignmentX(Component.LEFT_ALIGNMENT);  radioButton.setBorder(BorderFactory.createEmptyBorder(0,leftIndent,7,5));  container.add(radioButton);  return radioButton;}  }
class C{  public NotificationExample(NotificationObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getUserId() != null) {    criteria.andUserIdEqualTo(sample.getUserId());  }  if (sample.getIsRead() != null) {    criteria.andIsReadEqualTo(sample.getIsRead());  }  if (sample.getActivityId() != null) {    criteria.andActivityIdEqualTo(sample.getActivityId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }}  }
class C{  public boolean acceptsRedstone(){  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("{userId}/preferences") @Description("Update user preferences.") public PrincipalUserDto updateUserPreferences(@Context HttpServletRequest req,@PathParam("userId") final BigInteger userId,final Map<Preference,String> prefs){  if (userId == null || userId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("User Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (prefs == null) {    throw new WebApplicationException("Cannot update with null prefs.",Status.BAD_REQUEST);  }  PrincipalUser remoteUser=getRemoteUser(req);  PrincipalUser user=_uService.findUserByPrimaryKey(userId);  validateResourceAuthorization(req,user,remoteUser);  if (user == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  user.getPreferences().putAll(prefs);  user=_uService.updateUser(user);  return PrincipalUserDto.transformToDto(user);}  }
class C{  public void testExtensionb(){  final LongChunks lc=new LongChunks(200,7);  lc.integrity();  assertEquals(2,lc.arrayLength());  assertEquals(200,lc.length());  lc.set(0,42);  assertEquals(42,lc.get(0));  lc.set(199,43);  assertEquals(43,lc.get(199));  set(0,lc);  check(lc);  assertEquals(200,lc.extendBy(10));  assertEquals(210,lc.length());  assertEquals(2,lc.arrayLength());  assertEquals(210,lc.extendBy(10));  assertEquals(220,lc.length());  assertEquals(2,lc.arrayLength());  assertEquals(220,lc.extendBy(0));  assertEquals(220,lc.length());  assertEquals(2,lc.arrayLength());  assertEquals(220,lc.extendBy(100));  assertEquals(320,lc.length());  assertEquals(6,lc.arrayLength());  set(200,lc);  check(lc);  assertEquals(320,lc.extendBy(1000));  assertEquals(1320,lc.length());  assertEquals(14,lc.arrayLength());  set(320,lc);  check(lc);  try {    lc.extendBy(-1);    fail();  } catch (  final IllegalArgumentException e) {    assertEquals("-1",e.getMessage());  }}  }
class C{  public static SiteSettingsCategory fromString(String category){  assert !category.isEmpty();  if (CATEGORY_ALL_SITES.equals(category)) {    return new SiteSettingsCategory(CATEGORY_ALL_SITES,"",-1);  }  if (CATEGORY_CAMERA.equals(category)) {    return new SiteSettingsCategory(SiteSettingsCategory.CATEGORY_CAMERA,android.Manifest.permission.CAMERA,ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_CAMERA);  }  if (CATEGORY_COOKIES.equals(category)) {    return new SiteSettingsCategory(CATEGORY_COOKIES,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_COOKIES);  }  if (CATEGORY_JAVASCRIPT.equals(category)) {    return new SiteSettingsCategory(CATEGORY_JAVASCRIPT,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_JAVASCRIPT);  }  if (CATEGORY_DEVICE_LOCATION.equals(category)) {    return new LocationCategory();  }  if (CATEGORY_FULLSCREEN.equals(category)) {    return new SiteSettingsCategory(CATEGORY_FULLSCREEN,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_FULLSCREEN);  }  if (CATEGORY_MICROPHONE.equals(category)) {    return new SiteSettingsCategory(SiteSettingsCategory.CATEGORY_MICROPHONE,android.Manifest.permission.RECORD_AUDIO,ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_MIC);  }  if (CATEGORY_POPUPS.equals(category)) {    return new SiteSettingsCategory(CATEGORY_POPUPS,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_POPUPS);  }  if (CATEGORY_PROTECTED_MEDIA.equals(category)) {    return new SiteSettingsCategory(CATEGORY_PROTECTED_MEDIA,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_PROTECTED_MEDIA_IDENTIFIER);  }  if (CATEGORY_NOTIFICATIONS.equals(category)) {    return new SiteSettingsCategory(CATEGORY_NOTIFICATIONS,"",ContentSettingsType.CONTENT_SETTINGS_TYPE_NOTIFICATIONS);  }  if (CATEGORY_USE_STORAGE.equals(category)) {    return new SiteSettingsCategory(CATEGORY_USE_STORAGE,"",-1);  }  return null;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public boolean showNotificationsSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_NOTIFICATIONS;}  }
class C{  public static void createAndAddSignalGroups4Signals(SignalGroupsData groups,SignalSystemData system){  for (  SignalData signal : system.getSignalData().values()) {    SignalGroupData group4signal=groups.getFactory().createSignalGroupData(system.getId(),Id.create(signal.getId(),SignalGroup.class));    group4signal.addSignalId(signal.getId());    groups.addSignalGroupData(group4signal);  }}  }
class C{  public String toHTML(){  return getClass().getSimpleName().toLowerCase() + " <a style=\"font-style:normal;color:#8C8984;text-decoration:none;\" href=# \">" + getLabel()+ ",: "+ getBy().toString()+ "</a>";}  }
class C{  @Override public boolean remove(Object o){  if (o == null || size == 0) {    return false;  }  for (int i=0; i < size; i++) {    if (o.equals(elements[i])) {      removeAt(i);      return true;    }  }  return false;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public int length(){  return chars.length;}  }
class C{  public Void call() throws Exception {  final long txid=jnl.newTx(ITx.UNISOLATED);  try {    final IIndex ndx=jnl.getIndex(indexName,txid);    for (int i=0; i < nops; i++) {switch (r.nextInt(4)) {case 0:        ndx.insert("key#" + r.nextInt(range),r.nextLong());      break;case 1:    ndx.remove("key#" + r.nextInt(range));  break;case 2:ndx.lookup("key#" + r.nextInt(range));break;case 3:ndx.rangeCount();break;case 4:{final Iterator<ITuple<?>> itr=ndx.rangeIterator();while (itr.hasNext()) {itr.next();}break;}default :throw new AssertionError("case not handled");}}} catch (Throwable t) {jnl.abort(txid);throw new RuntimeException(t);}jnl.commit(txid);return null;}  }
class C{  public boolean isChapAuthEnabled(){  return chapAuthEnabled;}  }
class C{  public void insert(int i,int j,List<Node<Value>> newNodes){  nodes.get(i).setOutgoingArcs(newNodes.get(0).getOutgoingArcs());  newNodes.remove(0);  nodes.remove(j);  Collections.reverse(newNodes);  for (  Node<Value> node : newNodes)   nodes.add(j,node);  this.latticeHasAmbiguity=false;  for (int x=0; x < nodes.size(); x++) {    nodes.get(x).setID(x);    this.latticeHasAmbiguity|=(nodes.get(x).getOutgoingArcs().size() > 1);  }  this.distances=null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", reference: ");  result.append(reference);  result.append(", operations: ");  result.append(operations);  result.append(')');  return result.toString();}  }
class C{  protected boolean isLinkAllowed(long src,short srcPort,long dst,short dstPort){  return true;}  }
class C{  public boolean hasLabel(){  return super.hasAttribute(LABEL);}  }
class C{  public float[] mult(float vec[],float out[]){  if (out == null || out.length != 2) {    out=new float[2];  }  if (vec == out) {    float tx=m00 * vec[0] + m01 * vec[1] + m02;    float ty=m10 * vec[0] + m11 * vec[1] + m12;    out[0]=tx;    out[1]=ty;  } else {    out[0]=m00 * vec[0] + m01 * vec[1] + m02;    out[1]=m10 * vec[0] + m11 * vec[1] + m12;  }  return out;}  }
class C{  private void updateParentInCache(CnATreeElement element){  CacheObject cachObjectParent=cache.getCachedObject(element.getParent());  if (cachObjectParent != null) {    CnATreeElement parentFromCache=cachObjectParent.getElement();    boolean exists=parentFromCache.getChildren().remove(element);    if (exists && LOG.isDebugEnabled()) {      LOG.debug("Old element removed from parent child set in cache...");    }    boolean added=parentFromCache.getChildren().add(element);    if (added) {      LOG.debug("Element added to parent child set in cache.");    } else {      LOG.warn("Can not add element to parent's child set in cache.");    }    CacheObject newCacheObjectParent=new CacheObject(parentFromCache,cachObjectParent.isChildrenPropertiesLoaded());    cache.addObject(newCacheObjectParent);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_GETTER_DECLARATION__DECLARED_MODIFIERS:    getDeclaredModifiers().clear();  return;case N4JSPackage.N4_GETTER_DECLARATION__OWNER:setOwner((N4ClassifierDefinition)null);return;case N4JSPackage.N4_GETTER_DECLARATION__ANNOTATION_LIST:setAnnotationList((N4MemberAnnotationList)null);return;}super.eUnset(featureID);}  }
class C{  @NotNull private static String suggestBlockName(Iterable<String> classNames){  return find(classNames,BLOCK_NAME_PREDICATE,find(classNames,STARTS_WITH_LETTER,""));}  }
class C{  protected void onCreate(Bundle icicle){  super.onCreate(icicle);  mAccountAuthenticatorResponse=getIntent().getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);  if (mAccountAuthenticatorResponse != null) {    mAccountAuthenticatorResponse.onRequestContinued();  }}  }
class C{  public boolean multipleConsumers(){  Set<Property> props=getProperties(Producer.PROPERTY_PUBLISH);  return !props.isEmpty() && props.iterator().next().getValue().equalsIgnoreCase(Boolean.TRUE.toString());}  }
class C{  private boolean parseOptionalHeredoc(BashPsiBuilder builder){  if (builder.getTokenType() == LINE_FEED && builder.getParsingState().expectsHeredocMarker()) {    int startOffset=builder.getCurrentOffset();    builder.advanceLexer();    do {      while (true) {        if (builder.getTokenType() == LINE_FEED) {          builder.advanceLexer();        } else         if (builder.getTokenType() == HEREDOC_CONTENT) {          ParserUtil.markTokenAndAdvance(builder,HEREDOC_CONTENT_ELEMENT);        } else         if (Parsing.var.isValid(builder)) {          if (!Parsing.var.parse(builder)) {            break;          }        } else         if (Parsing.shellCommand.subshellParser.isValid(builder)) {          if (!Parsing.shellCommand.subshellParser.parse(builder)) {            break;          }        } else {          break;        }      }      if (builder.getTokenType() == HEREDOC_MARKER_END) {        ParserUtil.markTokenAndAdvance(builder,HEREDOC_END_ELEMENT);        builder.getParsingState().popHeredocMarker();      } else       if (builder.getTokenType() == HEREDOC_MARKER_IGNORING_TABS_END) {        ParserUtil.markTokenAndAdvance(builder,HEREDOC_END_IGNORING_TABS_ELEMENT);        builder.getParsingState().popHeredocMarker();      } else {        if (builder.getParsingState().expectsHeredocMarker()) {          builder.error("Unexpected token");        }        break;      }    } while (builder.getParsingState().expectsHeredocMarker());    return builder.getCurrentOffset() - startOffset > 0;  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.keys("transcoder/formats");}  }
class C{  public void animateVisibility(boolean visible){  if (mVisible != visible) {    mVisible=visible;    if (mAlphaAnimator != null) {      mAlphaAnimator.cancel();    }    mAlphaAnimator=ObjectAnimator.ofFloat(this,"alpha",visible ? 1f : 0f);    mAlphaAnimator.setDuration(visible ? 200 : 150);    mAlphaAnimator.start();  }}  }
class C{  static <O extends Entity>Query<EntityHandle<O>> all(Class<O> objectType){  return new All<>(objectType);}  }
class C{  public SchemeRegistry(){  super();  registeredSchemes=new LinkedHashMap<String,Scheme>();}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuffer sb=new StringBuffer();  sb.append(escape(jo.getString("name")));  sb.append("=");  sb.append(escape(jo.getString("value")));  if (jo.has("expires")) {    sb.append(";expires=");    sb.append(jo.getString("expires"));  }  if (jo.has("domain")) {    sb.append(";domain=");    sb.append(escape(jo.getString("domain")));  }  if (jo.has("path")) {    sb.append(";path=");    sb.append(escape(jo.getString("path")));  }  if (jo.optBoolean("secure")) {    sb.append(";secure");  }  return sb.toString();}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  @Override public void onAuthenticated(AuthData authData){  mAuthProgressDialog.dismiss();  Log.i(LOG_TAG,provider + " " + getString(R.string.log_message_auth_successful));  if (authData != null) {    if (authData.getProvider().equals(Constants.PASSWORD_PROVIDER)) {      setAuthenticatedUserPasswordProvider(authData);    } else     if (authData.getProvider().equals(Constants.GOOGLE_PROVIDER)) {      setAuthenticatedUserGoogle(authData);    } else {      Log.e(LOG_TAG,getString(R.string.log_error_invalid_provider) + authData.getProvider());    }    mSharedPrefEditor.putString(Constants.KEY_PROVIDER,authData.getProvider()).apply();    mSharedPrefEditor.putString(Constants.KEY_ENCODED_EMAIL,mEncodedEmail).apply();    Intent intent=new Intent(LoginActivity.this,MainActivity.class);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);    startActivity(intent);    finish();  }}  }
class C{  public void transform(double[] srcPts,int srcOff,double[] dstPts,int dstOff,int numPts){  double M00, M01, M02, M10, M11, M12;  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {    System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);    srcOff=dstOff;  }switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=M00 * x + M01 * y + M02;dstPts[dstOff++]=M10 * x + M11 * y + M12;}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=M00 * x + M01 * y;dstPts[dstOff++]=M10 * x + M11 * y;}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=M01 * srcPts[srcOff++] + M02;dstPts[dstOff++]=M10 * x + M12;}return;case (APPLY_SHEAR):M01=m01;M10=m10;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=M01 * srcPts[srcOff++];dstPts[dstOff++]=M10 * x;}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=M00 * srcPts[srcOff++] + M02;dstPts[dstOff++]=M11 * srcPts[srcOff++] + M12;}return;case (APPLY_SCALE):M00=m00;M11=m11;while (--numPts >= 0) {dstPts[dstOff++]=M00 * srcPts[srcOff++];dstPts[dstOff++]=M11 * srcPts[srcOff++];}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++] + M02;dstPts[dstOff++]=srcPts[srcOff++] + M12;}return;case (APPLY_IDENTITY):if (srcPts != dstPts || srcOff != dstOff) {System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);}return;}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.186 -0400",hash_original_method="2C67C3BCE4EC0DE1CC84D2039D0893CF",hash_generated_method="6B8D61C2DEB4C1798A3E84FEF3115BEE") public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  protected void initLoop(){  repeatingTimer.scheduleRepeating(1000);  scheduledLoop=true;}  }
class C{  protected int hashIndex(final int hashCode,final int dataSize){  return hashCode & dataSize - 1;}  }
class C{  public boolean isClientTrusted(X509Certificate[] chain){  return (true);}  }
class C{  protected void subscribe(){  if (sampleClientSub == null) {    try {      sampleClientSub=new SampleAsyncCallback(url,clientIdSub,cleanSession,quietMode,userName,password);    } catch (    MqttException e) {      e.printStackTrace();    }  }  if (sampleClientSub != null) {    String topic="Sample/#";    int qos=2;    try {      sampleClientSub.subscribe(topic,qos);    } catch (    Throwable e) {      e.printStackTrace();    }  }}  }
class C{  public static boolean show(String title,String text,String okText,String cancelText){  return show(title,text,defaultDialogType,null,okText,cancelText);}  }
class C{  public String toString(){  String result="DK Conditional Estimator. " + m_Estimators.length + " sub-estimators:\n";  for (int i=0; i < m_Estimators.length; i++) {    result+="Sub-estimator " + i + ": "+ m_Estimators[i];  }  result+="Weights of each estimator given by " + m_Weights;  return result;}  }
class C{  private String base64(String value){  StringBuffer cb=new StringBuffer();  int i=0;  for (i=0; i + 2 < value.length(); i+=3) {    long chunk=(int)value.charAt(i);    chunk=(chunk << 8) + (int)value.charAt(i + 1);    chunk=(chunk << 8) + (int)value.charAt(i + 2);    cb.append(encode(chunk >> 18));    cb.append(encode(chunk >> 12));    cb.append(encode(chunk >> 6));    cb.append(encode(chunk));  }  if (i + 1 < value.length()) {    long chunk=(int)value.charAt(i);    chunk=(chunk << 8) + (int)value.charAt(i + 1);    chunk<<=8;    cb.append(encode(chunk >> 18));    cb.append(encode(chunk >> 12));    cb.append(encode(chunk >> 6));    cb.append('=');  } else   if (i < value.length()) {    long chunk=(int)value.charAt(i);    chunk<<=16;    cb.append(encode(chunk >> 18));    cb.append(encode(chunk >> 12));    cb.append('=');    cb.append('=');  }  return cb.toString();}  }
class C{  public void testDoConfigureSetsAddress() throws Exception {  configuration.setProperty(GeneralPropertySet.HOSTNAME,"loc");  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("loc","//weblogic:listen-address",config);}  }
class C{  public float[] relativeColorimetricToRGB(float[] values){  float[] ciexyz=toCIEXYZ(values);  return sRGB.fromCIEXYZ(ciexyz);}  }
class C{  @Override public String toString(){  return name;}  }
class C{  private void releaseAllSegments(CubeInstance cube) throws IOException, JobException {  releaseAllJobs(cube);  CubeUpdate update=new CubeUpdate(cube);  update.setToRemoveSegs(cube.getSegments().toArray(new CubeSegment[cube.getSegments().size()]));  CubeManager.getInstance(getConfig()).updateCube(update);}  }
class C{  public void writeConstant(Constant cst){  int type=constantToValueType(cst);  int arg;switch (type) {case VALUE_BYTE:case VALUE_SHORT:case VALUE_INT:case VALUE_LONG:{      long value=((CstLiteralBits)cst).getLongBits();      writeSignedIntegralValue(type,value);      break;    }case VALUE_CHAR:{    long value=((CstLiteralBits)cst).getLongBits();    writeUnsignedIntegralValue(type,value);    break;  }case VALUE_FLOAT:{  long value=((CstFloat)cst).getLongBits() << 32;  writeRightZeroExtendedValue(type,value);  break;}case VALUE_DOUBLE:{long value=((CstDouble)cst).getLongBits();writeRightZeroExtendedValue(type,value);break;}case VALUE_STRING:{int index=file.getStringIds().indexOf((CstString)cst);writeUnsignedIntegralValue(type,(long)index);break;}case VALUE_TYPE:{int index=file.getTypeIds().indexOf((CstType)cst);writeUnsignedIntegralValue(type,(long)index);break;}case VALUE_FIELD:{int index=file.getFieldIds().indexOf((CstFieldRef)cst);writeUnsignedIntegralValue(type,(long)index);break;}case VALUE_METHOD:{int index=file.getMethodIds().indexOf((CstMethodRef)cst);writeUnsignedIntegralValue(type,(long)index);break;}case VALUE_ENUM:{CstFieldRef fieldRef=((CstEnumRef)cst).getFieldRef();int index=file.getFieldIds().indexOf(fieldRef);writeUnsignedIntegralValue(type,(long)index);break;}case VALUE_ARRAY:{out.writeByte(type);writeArray((CstArray)cst,false);break;}case VALUE_ANNOTATION:{out.writeByte(type);writeAnnotation(((CstAnnotation)cst).getAnnotation(),false);break;}case VALUE_NULL:{out.writeByte(type);break;}case VALUE_BOOLEAN:{int value=((CstBoolean)cst).getIntBits();out.writeByte(type | (value << 5));break;}default :{throw new RuntimeException("Shouldn't happen");}}}  }
class C{  public HttpMethod process(HttpServletRequest request,String url) throws IOException {  HttpMethodBase method=null;  if (request.getMethod().equalsIgnoreCase("OPTIONS")) {    method=new OptionsMethod(url);  } else   if (request.getMethod().equalsIgnoreCase("TRACE")) {    method=new TraceMethod(url);  } else {    return null;  }  try {    int max=request.getIntHeader("Max-Forwards");    if (max == 0 || request.getRequestURI().equals("*")) {      setAllHeaders(method,request);      method.abort();    } else     if (max != -1) {      setHeaders(method,request);      method.setRequestHeader("Max-Forwards","" + max--);    } else {      setHeaders(method,request);    }  } catch (  NumberFormatException e) {  }  return method;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.411 -0500",hash_original_method="4549801F41C68E0A6A490696C062C72D",hash_generated_method="8B62B5695F36760CAD8EDCDC235C2C64") void declarePrefix(String prefix,String uri){  if (!declsOK) {    throw new IllegalStateException("can't declare any more prefixes in this context");  }  if (!declSeen) {    copyTables();  }  if (declarations == null) {    declarations=new ArrayList<String>();  }  prefix=prefix.intern();  uri=uri.intern();  if ("".equals(prefix)) {    if ("".equals(uri)) {      defaultNS=null;    } else {      defaultNS=uri;    }  } else {    prefixTable.put(prefix,uri);    uriTable.put(uri,prefix);  }  declarations.add(prefix);}  }
class C{  public void showConfirm(){  graphic(new ImageView(Notifications.class.getResource("/org/controlsfx/dialog/dialog-confirm.png").toExternalForm()));  show();}  }
class C{  public void tagEnd() throws IOException {  tags.tag(TAG_END,false,null);}  }
class C{  public Interval toInterval(){  return toInterval(null);}  }
class C{  protected void logError(OFErrorMsg error){  log.error("{} from switch {} in state {}",new Object[]{error.toString(),getConnectionInfoString(),this.toString()});}  }
class C{  public CMemoryMenu(final JFrame parent,final CDebugPerspectiveModel debugger,final CMemoryViewer memoryView){  m_parent=Preconditions.checkNotNull(parent,"IE01396: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01397: Debugger argument can not be null");  m_memoryView=Preconditions.checkNotNull(memoryView,"IE01398: Memory view argument can not be null");}  }
class C{  private void copyToBuffer(Buffer bDest){  if (reassembledDataFullSize <= MAX_H264_FRAME_SIZE) {    byte[] finalData=new byte[reassembledDataFullSize + 1];    int finalDataPos=0;    finalData[finalDataPos]=reassembledDataNALHeader;    finalDataPos+=1;    int posCurrent=reassembledDataPosSeqStart;    int posSeq=0;    while ((posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK) != reassembledDataPosSeqEnd) {      posSeq=posCurrent & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK;      System.arraycopy(reassembledData[posSeq],0,finalData,finalDataPos,reassembledDataSize[posSeq]);      finalDataPos+=reassembledDataSize[posSeq];      posCurrent++;    }    System.arraycopy(reassembledData[reassembledDataPosSeqEnd],0,finalData,finalDataPos,reassembledDataSize[reassembledDataPosSeqEnd]);    bDest.setData(finalData);    bDest.setLength(reassembledDataSize[reassembledDataPosSeqEnd]);    bDest.setOffset(0);    bDest.setTimestamp(timestamp);    bDest.setFormat(format);    bDest.setFlags(Buffer.FLAG_RTP_MARKER | Buffer.FLAG_RTP_TIME);    bDest.setVideoOrientation(videoOrientation);    bDest.setSequenceNumber(seqNumber);  }  reassembledData=null;}  }
class C{  @Override public synchronized int update(T dto) throws Exception {  return db.update(transformer.getTableName(),transformer.transform(dto),transformer.getWhereClause(dto),null);}  }
class C{  public void addRet(int var){  if (var < 0x100) {    addOpcode(RET);    add(var);  } else {    addOpcode(WIDE);    addOpcode(RET);    addIndex(var);  }}  }
class C{  public int load32(int addr){  return (loadSigned8(addr) << 24) | (loadUnsigned8(addr + 1) << 16) | (loadUnsigned8(addr + 2) << 8)| loadUnsigned8(addr + 3);}  }
class C{  public static GeoQuery query(String name,double lat,double lon,int... precisions){  return query(name,XGeoHashUtils.stringEncode(lon,lat),precisions);}  }
class C{  public static int convertTypeToSQLType(int type){  return getDataType(type).sqlType;}  }
class C{  protected void flushCacheWithAppend(final byte bufferToAppend[],final int off,final int len) throws IOException {  final byte chunkHeader[]=EncodingUtil.getAsciiBytes(Integer.toHexString(cachePosition + len) + "\r\n");  stream.write(chunkHeader,0,chunkHeader.length);  stream.write(cache,0,cachePosition);  stream.write(bufferToAppend,off,len);  stream.write(ENDCHUNK,0,ENDCHUNK.length);  cachePosition=0;}  }
class C{  public void refreshData(PlatformIdent platformIdent){  platformMap.remove(platformIdent.getId());  platformMap.put(platformIdent.getId(),platformIdent);  for (  MethodIdent methodIdent : platformIdent.getMethodIdents()) {    methodMap.remove(methodIdent.getId());    methodMap.put(methodIdent.getId(),methodIdent);  }  for (  SensorTypeIdent sensorTypeIdent : platformIdent.getSensorTypeIdents()) {    sensorTypeMap.remove(sensorTypeIdent.getId());    sensorTypeMap.put(sensorTypeIdent.getId(),sensorTypeIdent);  }  for (  JmxDefinitionDataIdent jmxDefinitionDataIdent : platformIdent.getJmxDefinitionDataIdents()) {    jmxDefinitionDataMap.remove(jmxDefinitionDataIdent.getId());    jmxDefinitionDataMap.put(jmxDefinitionDataIdent.getId(),jmxDefinitionDataIdent);  }}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (mData != null) {    onReleaseResources(mData);    mData=null;  }}  }
class C{  public void treeStructureChanged(TreeModelEvent e){  if (e != null) {    TreePath changedPath=SwingUtilities2.getTreePath(e,getModel());    FHTreeStateNode changedNode=getNodeForPath(changedPath,false,false);    if (changedNode == root || (changedNode == null && ((changedPath == null && treeModel != null && treeModel.getRoot() == null) || (changedPath != null && changedPath.getPathCount() <= 1)))) {      rebuild(true);    } else     if (changedNode != null) {      boolean wasExpanded, wasVisible;      FHTreeStateNode parent=(FHTreeStateNode)changedNode.getParent();      wasExpanded=changedNode.isExpanded();      wasVisible=changedNode.isVisible();      int index=parent.getIndex(changedNode);      changedNode.collapse(false);      parent.remove(index);      if (wasVisible && wasExpanded) {        int row=changedNode.getRow();        parent.resetChildrenRowsFrom(row,index,changedNode.getChildIndex());        changedNode=getNodeForPath(changedPath,false,true);        changedNode.expand();      }      if (treeSelectionModel != null && wasVisible && wasExpanded)       treeSelectionModel.resetRowSelection();      if (wasVisible)       this.visibleNodesChanged();    }  }}  }
class C{  private List<Sentence> createBaseSentences(JCas jCas) throws AnalysisEngineProcessException {  List<Sentence> sentences=new ArrayList<>();  try {    String text=jCas.getDocumentText();    Span[] sentenceSpans=sentenceDetector.sentPosDetect(text);    for (int a=0; a < sentenceSpans.length; a++) {      Span sentSpan=sentenceSpans[a];      Sentence sent=new Sentence(jCas);      sent.setBegin(sentSpan.getStart());      sent.setEnd(sentSpan.getEnd());      addToJCasIndex(sent);      sentences.add(sent);    }  } catch (  Exception e) {    throw new AnalysisEngineProcessException(e);  }  return sentences;}  }
class C{  public void onMenuDismissed(){  mReloadMenuItem=null;}  }
class C{  public static Enumeration all(){  return _all.elements();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, maxZ, noData, outputNoData;  int i, whichCell;  int[] dX=new int[]{-1,0,-1,0};  int[] dY=new int[]{-1,-1,0,0};  int numScanCells=dX.length;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,1);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          maxZ=z;          whichCell=3;          for (i=0; i < (numScanCells - 1); i++) {            z=DEM.getValue(row + dY[i],col + dX[i]);            if (z != noData) {              if (z > maxZ) {                maxZ=z;                whichCell=i;              }            }          }          output.setValue(row + dY[whichCell],col + dX[whichCell],0);        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SemEvidence(SemIm semIm){  if (semIm == null) {    throw new NullPointerException();  }  this.semIm=semIm;  this.proposition=SemProposition.tautology(semIm);  this.manipulation=new SemManipulation(semIm);}  }
class C{  private void launch(){  runner.schedule();}  }
class C{  public void printHead(final OutputStream output) throws IOException {  final String eol="\r\n";  final Writer writer=new Utf8OutputStreamWriter(output);  for (  final String line : this.head()) {    writer.append(line);    writer.append(eol);  }  writer.append(eol);  writer.flush();}  }
class C{  private void insertExpectedPoolSettingsPerTier(CIMObjectPath capabilitiesPath,Map<String,Object> keyMap){  List<String> expectedPoolSettingsTier=(List<String>)keyMap.get(Constants.VNXPOOLCAPABILITIES_TIER);  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.NO_DATA_MOVEMENT);  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.AUTO_TIER);  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.HIGH_AVAILABLE_TIER);  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.LOW_AVAILABLE_TIER);  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.START_HIGH_THEN_AUTO_TIER);}  }
class C{  public static GF2Vector OS2VP(int length,byte[] encVec){  if (length < 0) {    throw new ArithmeticException("negative length");  }  int byteLen=(length + 7) >> 3;  if (encVec.length > byteLen) {    throw new ArithmeticException("length mismatch");  }  return new GF2Vector(length,LittleEndianConversions.toIntArray(encVec));}  }
class C{  public static int numberOfLeadingZeros(long longValue){  if (longValue == 0)   return 64;  int n=1;  int x=(int)(longValue >>> 32);  if (x == 0) {    n+=32;    x=(int)longValue;  }  if (x >>> 16 == 0) {    n+=16;    x<<=16;  }  if (x >>> 24 == 0) {    n+=8;    x<<=8;  }  if (x >>> 28 == 0) {    n+=4;    x<<=4;  }  if (x >>> 30 == 0) {    n+=2;    x<<=2;  }  n-=x >>> 31;  return n;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override @Transactional public File exportAnnotationDocument(SourceDocument aDocument,String aUser,Class aWriter,String aFileName,Mode aMode,boolean aStripExtension) throws UIMAException, IOException, ClassNotFoundException {  File annotationFolder=getAnnotationFolder(aDocument);  String serializedCasFileName;  if (aMode.equals(Mode.ANNOTATION) || aMode.equals(Mode.AUTOMATION) || aMode.equals(Mode.CORRECTION)) {    serializedCasFileName=aUser + ".ser";  } else {    serializedCasFileName=WebAnnoConst.CURATION_USER + ".ser";  }  File serializedCasFile=new File(annotationFolder,serializedCasFileName);  if (!serializedCasFile.exists()) {    throw new FileNotFoundException("CAS file [" + serializedCasFileName + "] not found in ["+ annotationFolder+ "]");  }  CAS cas=CasCreationUtils.createCas((TypeSystemDescription)null,null,null);  readSerializedCas(cas.getJCas(),serializedCasFile);  upgradeCas(cas,aDocument,aUser);  Project project=aDocument.getProject();  File currentDocumentUri=new File(dir.getAbsolutePath() + PROJECT + project.getId()+ DOCUMENT+ aDocument.getId()+ SOURCE);  DocumentMetaData documentMetadata=DocumentMetaData.get(cas.getJCas());  documentMetadata.setDocumentUri(new File(currentDocumentUri,aFileName).toURI().toURL().toExternalForm());  documentMetadata.setDocumentBaseUri(currentDocumentUri.toURI().toURL().toExternalForm());  documentMetadata.setCollectionId(currentDocumentUri.toURI().toURL().toExternalForm());  documentMetadata.setDocumentUri(new File(dir.getAbsolutePath() + PROJECT + project.getId()+ DOCUMENT+ aDocument.getId()+ SOURCE+ "/"+ aFileName).toURI().toURL().toExternalForm());  List<AnnotationFeature> features=annotationService.listAnnotationFeature(project);  for (  AnnotationFeature feature : features) {    TagSet tagSet=feature.getTagset();    if (tagSet == null) {      continue;    } else     if (!feature.getLayer().getType().equals(WebAnnoConst.CHAIN_TYPE)) {      updateCasWithTagSet(cas,feature.getLayer().getName(),tagSet.getName());    }  }  File exportTempDir=File.createTempFile("webanno","export");  exportTempDir.delete();  exportTempDir.mkdirs();  AnalysisEngineDescription writer;  if (aWriter.getName().equals("de.tudarmstadt.ukp.clarin.webanno.tsv.WebannoTsv3Writer")) {    List<AnnotationLayer> layers=annotationService.listAnnotationLayer(aDocument.getProject());    List<String> slotFeatures=new ArrayList<String>();    List<String> slotTargets=new ArrayList<String>();    List<String> linkTypes=new ArrayList<String>();    Set<String> spanLayers=new HashSet<String>();    Set<String> slotLayers=new HashSet<String>();    for (    AnnotationLayer layer : layers) {      if (layer.getType().contentEquals(WebAnnoConst.SPAN_TYPE)) {        if (!annotationExists(cas,layer.getName())) {          continue;        }        boolean isslotLayer=false;        for (        AnnotationFeature f : annotationService.listAnnotationFeature(layer)) {          if (MultiValueMode.ARRAY.equals(f.getMultiValueMode()) && LinkMode.WITH_ROLE.equals(f.getLinkMode())) {            isslotLayer=true;            slotFeatures.add(layer.getName() + ":" + f.getName());            slotTargets.add(f.getType());            linkTypes.add(f.getLinkTypeName());          }        }        if (isslotLayer) {          slotLayers.add(layer.getName());        } else {          spanLayers.add(layer.getName());        }      }    }    spanLayers.addAll(slotLayers);    List<String> chainLayers=new ArrayList<String>();    for (    AnnotationLayer layer : layers) {      if (layer.getType().contentEquals(WebAnnoConst.CHAIN_TYPE)) {        if (!chainAnnotationExists(cas,layer.getName() + "Chain")) {          continue;        }        chainLayers.add(layer.getName());      }    }    List<String> relationLayers=new ArrayList<String>();    for (    AnnotationLayer layer : layers) {      if (layer.getType().contentEquals(WebAnnoConst.RELATION_TYPE)) {        if (!annotationExists(cas,layer.getName())) {          continue;        }        relationLayers.add(layer.getName());      }    }    writer=createEngineDescription(aWriter,JCasFileWriter_ImplBase.PARAM_TARGET_LOCATION,exportTempDir,JCasFileWriter_ImplBase.PARAM_STRIP_EXTENSION,aStripExtension,"spanLayers",spanLayers,"slotFeatures",slotFeatures,"slotTargets",slotTargets,"linkTypes",linkTypes,"chainLayers",chainLayers,"relationLayers",relationLayers);  } else {    writer=createEngineDescription(aWriter,JCasFileWriter_ImplBase.PARAM_TARGET_LOCATION,exportTempDir,JCasFileWriter_ImplBase.PARAM_STRIP_EXTENSION,aStripExtension);  }  runPipeline(cas,writer);  createLog(project).info(" Exported annotation file [" + aDocument.getName() + "] with ID ["+ aDocument.getId()+ "] for user ["+ aUser+ "] from project ["+ project.getId()+ "]");  createLog(project).removeAllAppenders();  File exportFile;  if (exportTempDir.listFiles().length > 1) {    exportFile=new File(exportTempDir.getAbsolutePath() + ".zip");    try {      ZipUtils.zipFolder(exportTempDir,exportFile);    } catch (    Exception e) {      createLog(project).info("Unable to create zip File");    }  } else {    exportFile=new File(exportTempDir.getParent(),exportTempDir.listFiles()[0].getName());    FileUtils.copyFile(exportTempDir.listFiles()[0],exportFile);  }  FileUtils.forceDelete(exportTempDir);  return exportFile;}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public static int[][] MCSCE3contingencyTable(boolean useTrainingData,GEPIndividual ind,double bestValueThreshold,double secondBestValueThreshold){  int classWithTheMaximumPredictedValue;  int classWithTheSecondBestPredictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  int numberOfObjects=dv.getDependentVariableValues().length;  int numberOfClasses=((GEPSpecies)ind.species).numberOfChromosomes;  int mi_ContingencyTable[][]=new int[numberOfClasses][numberOfClasses + 1];  double maximumPredictedValue, secondBestPredictedvalue, value;  double generalMinimumPredictedValue, generalMaximumPredictedValue, range;  double dependentVar[];  double md_ExpectedValues[][]=new double[numberOfObjects][numberOfClasses];  double md_PredictedValues[][]=new double[numberOfObjects][numberOfClasses];  if (secondBestValueThreshold > 1.0 || secondBestValueThreshold < 0.0 || bestValueThreshold > 1.0 || bestValueThreshold < 0.0 || bestValueThreshold < secondBestValueThreshold)   System.err.println("Error: MCSCE3 -- threshold values must be between 0.0 and 1.0 and first must be less than the second.");  generalMinimumPredictedValue=generalMaximumPredictedValue=ind.eval(0,useTrainingData,0);  for (int i=0; i < numberOfObjects; i++)   for (int j=0; j < numberOfClasses; j++) {    value=ind.eval(j,useTrainingData,i);    md_PredictedValues[i][j]=value;    if (Double.isNaN(value)) {      for (int ii=0; ii < numberOfClasses; ii++)       mi_ContingencyTable[ii][ii]=0;      return mi_ContingencyTable;    }    if (value < generalMinimumPredictedValue)     generalMinimumPredictedValue=value;    if (value > generalMaximumPredictedValue)     generalMaximumPredictedValue=value;  }  range=generalMaximumPredictedValue - generalMinimumPredictedValue;  for (int j=0; j < numberOfClasses; j++) {    dependentVar=dv.getDependentVariableValues(j);    for (int i=0; i < numberOfObjects; i++)     md_ExpectedValues[i][j]=dependentVar[i];  }  for (int i=0; i < numberOfObjects; i++) {    int expectedClass=0;    classWithTheMaximumPredictedValue=0;    maximumPredictedValue=md_PredictedValues[i][classWithTheMaximumPredictedValue];    secondBestPredictedvalue=maximumPredictedValue;    double maximumExpectedValue=md_ExpectedValues[i][expectedClass];    if (Double.isNaN(maximumPredictedValue)) {      for (int ii=0; ii < numberOfClasses; ii++)       mi_ContingencyTable[ii][ii]=0;      return mi_ContingencyTable;    }    for (int j=1; j < numberOfClasses; j++) {      value=md_ExpectedValues[i][j];      if (value > maximumExpectedValue) {        maximumExpectedValue=value;        expectedClass=j;      }      value=md_PredictedValues[i][j];      if (value > maximumPredictedValue) {        secondBestPredictedvalue=maximumPredictedValue;        classWithTheSecondBestPredictedValue=classWithTheMaximumPredictedValue;        maximumPredictedValue=value;        classWithTheMaximumPredictedValue=j;      }    }    maximumPredictedValue=(maximumPredictedValue - generalMinimumPredictedValue) / range;    secondBestPredictedvalue=(secondBestPredictedvalue - generalMinimumPredictedValue) / range;    if ((maximumPredictedValue >= bestValueThreshold) && (secondBestPredictedvalue <= secondBestValueThreshold) && (maximumPredictedValue != secondBestPredictedvalue))     ++(mi_ContingencyTable[expectedClass][classWithTheMaximumPredictedValue]); else     ++(mi_ContingencyTable[expectedClass][numberOfClasses]);  }  return mi_ContingencyTable;}  }
class C{  public Vector(int dimension) throws NegativeArraySizeException {  if (dimension <= 0)   throw new NegativeArraySizeException("Requested vector size: " + dimension);  components=new double[dimension];  clear();}  }
class C{  public static boolean isAffectedByECM(Entity ae,Coords a,Coords b){  return ComputeECM.isAffectedByECM(ae,a,b,null);}  }
class C{  @RequestMapping("/") public void displayHomePage(HttpServletResponse response) throws IOException {  final PrintWriter writer=response.getWriter();  writer.write("<!DOCTYPE html>\n<html>\n<head>\n<title>InterProScan 5 Pre-calculated Match Lookup Service</title>\n</head>\n");  writer.write("<body>\n<h3>InterProScan 5 Pre-calculated Match Lookup Service</h3>");  writer.write("<p>This is the landing page of the InterProScan 5 Pre-calculated Match Lookup Service.</p>");  writer.write("<p>Please note that this is a REST web service that has been designed specifically for use");  writer.write(" by InterProScan 5 installations.</p>\n");  writer.write("</body>\n</html>\n");  writer.close();}  }
class C{  public void skip(int bits) throws AccessException {  if ((mPos + bits) > mEnd) {    throw new AccessException("illegal skip " + "(pos " + mPos + ", end "+ mEnd+ ", bits "+ bits+ ")");  }  mPos+=bits;}  }
class C{  @Override public short shortValue(){  return value;}  }
class C{  protected void parse(String s){  if (s.equals(SVGConstants.SVG_AUTO_VALUE)) {    unitType=SVGAngle.SVG_ANGLETYPE_UNSPECIFIED;    value=0;    baseEnumerationVal=SVGMarkerElement.SVG_MARKER_ORIENT_AUTO;  } else {    super.parse(s);    if (unitType == SVGAngle.SVG_ANGLETYPE_UNKNOWN) {      baseEnumerationVal=SVGMarkerElement.SVG_MARKER_ORIENT_UNKNOWN;    } else {      baseEnumerationVal=SVGMarkerElement.SVG_MARKER_ORIENT_ANGLE;    }  }}  }
class C{  public LocalTime withHourOfDay(int hour){  return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(),hour));}  }
class C{  private boolean checkDirective(){  return reader.getColumn() == 0;}  }
class C{  public static List<String> readLines(InputStream stream,String charset) throws IOException {  return readLines(newReader(stream,charset));}  }
class C{  protected void paintNode(Node node,Graphics2D g2){  if (node == activeNode)   g2.setColor(Color.RED); else   g2.setColor(Color.BLUE);  MutableCoord transformed=transform(node.getCoord());  g2.fillRect((int)transformed.getX() - 2,(int)transformed.getY() - 2,4,4);}  }
class C{  @Deprecated public ExpectedException handleAssertionErrors(){  return this;}  }
class C{  public static void addLivestreamerOptions(ContextMenu m){  if (enableLivestreamer) {    String livestreamerMenu="Livestreamer";    m.setSubMenuIcon(livestreamerMenu,ICON_COMMANDLINE);    Matcher matcher=LIVESTREAMER_PATTERN.matcher(livestreamerQualities);    boolean sep=false;    while (matcher.find()) {      String match=matcher.group();      if (match.equals("|")) {        sep=true;      } else {        if (sep) {          m.addSeparator(livestreamerMenu);        }        m.addSubItem("livestreamerQ" + match,match,livestreamerMenu);        sep=false;      }    }  }}  }
class C{  private static void upHeapCost(DisiWrapper[] heap,int i){  final DisiWrapper node=heap[i];  final long nodeCost=node.cost;  int j=parentNode(i);  while (j >= 0 && nodeCost < heap[j].cost) {    heap[i]=heap[j];    i=j;    j=parentNode(j);  }  heap[i]=node;}  }
class C{  public QueueNode next(){  return m_Next;}  }
class C{  private ApiResponse buildResponseFromContext(Context c){  Map<String,String> fields=new HashMap<>();  fields.put("name",c.getName());  fields.put("id",Integer.toString(c.getIndex()));  fields.put("description",c.getDescription());  fields.put("inScope",Boolean.toString(c.isInScope()));  fields.put("excludeRegexs",c.getExcludeFromContextRegexs().toString());  fields.put("includeRegexs",c.getIncludeInContextRegexs().toString());  AuthenticationMethod authenticationMethod=c.getAuthenticationMethod();  if (authenticationMethod != null) {    Pattern pattern=authenticationMethod.getLoggedInIndicatorPattern();    fields.put("loggedInPattern",pattern == null ? "" : pattern.toString());    pattern=authenticationMethod.getLoggedOutIndicatorPattern();    fields.put("loggedOutPattern",pattern == null ? "" : pattern.toString());    AuthenticationMethodType type=authenticationMethod.getType();    fields.put("authType",type == null ? "" : type.getName());  }  AuthorizationDetectionMethod authorizationDetectionMethod=c.getAuthorizationDetectionMethod();  if (authorizationDetectionMethod != null) {    fields.put("authenticationDetectionMethodId",String.valueOf(authorizationDetectionMethod.getMethodUniqueIdentifier()));  }  fields.put("urlParameterParserClass",c.getUrlParamParser().getClass().getCanonicalName());  fields.put("urlParameterParserConfig",c.getUrlParamParser().getConfig());  fields.put("postParameterParserClass",c.getPostParamParser().getClass().getCanonicalName());  fields.put("postParameterParserConfig",c.getPostParamParser().getConfig());  return new ApiResponseSet("context",fields);}  }
class C{  protected SVGURIReferenceGraphicsElement(){}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildFisherman(zone);}  }
class C{  private MoveEvaluation minimax(int ply,IComparator comp,IPlayer player,IPlayer opponent){  MoveEvaluation best=new MoveEvaluation(comp.initialValue());  Iterator<IGameMove> it=player.validMoves(state).iterator();  while (it.hasNext()) {    IGameMove move=it.next();    move.execute(state);    numComputationalStates++;    if (numComputationalStates % 100 == 0) {      System.out.println(numComputationalStates);    }    MoveEvaluation pathMove=alreadyDetermined(state);    if (pathMove == null) {      int trial;      if (ply <= 0) {        trial=original.eval(state);      } else {        MoveEvaluation me=minimax(ply - 1,comp.opposite(),opponent,player);        if (me.move == null) {          trial=original.eval(state);        } else {          trial=me.score;        }        pathMove=new MoveEvaluation(move,trial);      }    }    move.undo(state);    if (comp.compare(best.score,pathMove.score) < 0) {      best=new MoveEvaluation(move,pathMove.score);    }  }  addToList(state,best);  return best;}  }
class C{  public SRVRecord(String fqdn,int port,int priority,int weight){  super(fqdn,port);  if (weight < 0 || weight > 65535)   throw new IllegalArgumentException("DNS SRV records weight must be a 16-bit unsiged integer (i.e. between 0-65535. Weight was: " + weight);  if (priority < 0 || priority > 65535)   throw new IllegalArgumentException("DNS SRV records priority must be a 16-bit unsiged integer (i.e. between 0-65535. Priority was: " + priority);  this.priority=priority;  this.weight=weight;}  }
class C{  public int indexOfFromTo(float element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  float[] theElements=elements;  for (int i=from; i <= to; i++) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public static double[] minmax(List<Double> values){  if (values.size() == 0) {    return new double[2];  }  double min=values.get(0);  double max=min;  int length=values.size();  for (int i=1; i < length; i++) {    double value=values.get(i);    min=Math.min(min,value);    max=Math.max(max,value);  }  return new double[]{min,max};}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.005 -0500",hash_original_method="84522AAB157FB837ECA38AFA8517069A",hash_generated_method="BFC3383B5D1FDCC90DF21FE83B73B161") protected int estimateProtocolVersionLen(final ProtocolVersion version){  return version.getProtocol().length() + 4;}  }
class C{  private static int arrayIndex(int i){  return (i >> SHIFT_PER_WORD);}  }
class C{  @Override public void mergeAndOutputTransformationMetadata(Iterator<DistinctValue> values,String outputDir,int colID,FileSystem fs,TfUtils agents) throws IOException {  HashMap<String,Long> map=new HashMap<String,Long>();  DistinctValue d=new DistinctValue();  String word=null;  Long count=null, val=null;  while (values.hasNext()) {    d.reset();    d=values.next();    word=d.getWord();    count=d.getCount();    val=map.get(word);    if (val == null)     map.put(word,count); else     map.put(word,val + count);  }  writeMetadata(map,outputDir,colID,fs,agents,false);}  }
class C{  public void testDaysExcludedOverTime(){  AnnualCalendar annualCalendar=new AnnualCalendar();  Calendar day=Calendar.getInstance();  day.set(Calendar.MONTH,Calendar.JUNE);  day.set(Calendar.YEAR,2005);  day.set(Calendar.DAY_OF_MONTH,23);  annualCalendar.setDayExcluded((Calendar)day.clone(),true);  day.set(Calendar.YEAR,2008);  day.set(Calendar.MONTH,Calendar.FEBRUARY);  day.set(Calendar.DAY_OF_MONTH,1);  annualCalendar.setDayExcluded((Calendar)day.clone(),true);  assertTrue("The day 1 February is expected to be excluded but it is not",annualCalendar.isDayExcluded(day));}  }
class C{  public Logger(String name,int attributes){  this.attr=attributes;  this.name=name;}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  public void addListener(final IGraphBuilderListener listener){  m_listeners.addListener(listener);}  }
class C{  public World(Reader reader,int maxMoves) throws IOException {  super();  this.maxMoves=maxMoves;  load(reader);  reset();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public boolean checkUniqueServerName(ServerInfo server){  boolean alreadyContains=false;  for (  ServerInfo s : mServerList) {    if (s.getServerName().equals(server.getServerName()))     alreadyContains=true;  }  return !alreadyContains;}  }
class C{  public static <T>T deserialize(String data,Class<T> clazz) throws BeanProcessorException {  Preconditions.checkNotNull(data);  T bean=JSONHelper.readObject(data,clazz);  BeanProcessor<T> processor=BeanProcessorFactory.create(clazz);  if (processor != null) {    return processor.process(bean);  }  return bean;}  }
class C{  static <T>GeneralRange<T> upTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,false,null,OPEN,true,endpoint,boundType);}  }
class C{  String validateConditionalReference(String name){  Conditional c=null;  if (name != null) {    if (name.length() > 0) {      c=_conditionalManager.getByUserName(name);      if (c != null) {        return name;      }    }    c=_conditionalManager.getBySystemName(name);  }  if (c == null) {    messageInvalidActionItemName(name,"Conditional");    return null;  }  return name;}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder("TxIn");  try {    if (isCoinBase()) {      s.append(": COINBASE");    } else {      s.append(" for [").append(outpoint).append("]: ").append(getScriptSig());      String flags=Joiner.on(", ").skipNulls().join(hasSequence() ? "sequence: " + Long.toHexString(sequence) : null,isOptInFullRBF() ? "opts into full RBF" : null);      if (!flags.isEmpty())       s.append(" (").append(flags).append(')');    }    return s.toString();  } catch (  ScriptException e) {    throw new RuntimeException(e);  }}  }
class C{  byte[] wrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  byte[] result=null;  try {    byte[] encodedKey=key.getEncoded();    if ((encodedKey == null) || (encodedKey.length == 0)) {      throw new InvalidKeyException("Cannot get an encoding of " + "the key to be wrapped");    }    result=doFinal(encodedKey,0,encodedKey.length);  } catch (  BadPaddingException e) {  }  return result;}  }
class C{  public void onOrientationChanged(OrientationManager orientationManager,OrientationManager.DeviceOrientation deviceOrientation){}  }
class C{  public boolean isLocalRefType(RVMMethod method,Offset mcoff,int lidx){  int bytenum, bitnum;  byte[] maps;  if (bytesPerMap() == 0)   return false;  int mapid=locateGCPoint(mcoff,method);  if (mapid >= 0) {    bytenum=mapid * bytesPerMap();    bitnum=lidx + 1 + 1;    maps=referenceMaps;  } else {    bytenum=jsrInfo.mergedReferenceMap;    bitnum=lidx + 1;    maps=jsrInfo.unusualReferenceMaps;  }  while (bitnum > BITS_PER_MAP_ELEMENT) {    bytenum++;    bitnum-=BITS_PER_MAP_ELEMENT;  }  int mask=(1 << (BITS_PER_MAP_ELEMENT - bitnum));  return ((mask & maps[bytenum]) != 0);}  }
class C{  public LifoSet(){}  }
class C{  public final void println() throws IOException {  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  private void initDxSettings(){  try {    Boolean d3d=!settings.getBoolean("nod3d");    System.setProperty("sun.java2d.d3d",d3d.toString());    Boolean ddraw=settings.getBoolean("noddraw");    System.setProperty("sun.java2d.noddraw",ddraw.toString());    LOGGER.info("Drawing settings: d3d: " + d3d + " / noddraw: "+ ddraw);  } catch (  SecurityException ex) {    LOGGER.warning("Error setting drawing settings: " + ex.getLocalizedMessage());  }}  }
class C{  public static BedRecord fromString(String line) throws NumberFormatException, ArrayIndexOutOfBoundsException {  final String[] parts=StringUtils.split(line,'\t');  return new BedRecord(parts[0],Integer.parseInt(parts[1]),Integer.parseInt(parts[2]),Arrays.copyOfRange(parts,3,parts.length));}  }
class C{  public CSSStyleDeclaration createCSSStyleDeclaration(){  throw new UnsupportedOperationException("CSSStyleDeclarationFactory.createCSSStyleDeclaration is not implemented");}  }
class C{  public static CRC checkCRC9(BinaryMessage message,int messageStart){  int calculated=0x0;  for (int i=message.nextSetBit(messageStart); i >= messageStart && i < messageStart + 144; i=message.nextSetBit(i + 1)) {    if (i < (messageStart + 7)) {      calculated^=CRC9_CHECKSUMS[i - messageStart];    } else     if (i > (messageStart + 15)) {      calculated^=CRC9_CHECKSUMS[i - messageStart - 9];    }  }  int checksum=message.getInt(messageStart + 7,messageStart + 15);  int residual=calculated ^ checksum;  if (residual == 0 || residual == 0x1FF) {    return CRC.PASSED;  }  return CRC.FAILED_CRC;}  }
class C{  public ProxyObjectInputStream(InputStream in) throws IOException {  super(in);  loader=Thread.currentThread().getContextClassLoader();  if (loader == null) {    loader=ClassLoader.getSystemClassLoader();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public Object clone(){  HashMap<K,V> result;  try {    result=(HashMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }  result.reinitialize();  result.putMapEntries(this,false);  return result;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E lastElement(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new NoSuchElementException();  }}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && Connectivity.isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  public EntityQuery filterByDate(Date moment){  this.filterByDate(new java.sql.Timestamp(moment.getTime()));  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:53.373 -0500",hash_original_method="5E5A2EDE31F4C9B537E19F3E9904B493",hash_generated_method="A4584BE7CD354A580AF55D02BDF10F67") public boolean isVisible(){  return mVisible;}  }
class C{  private boolean checkNodeName(Node node,String name){  if (node.getNodeName().equals(name)) {    return true;  }  final String localName=node.getLocalName();  return localName != null && localName.equals(name);}  }
class C{  public static DeclaredClassBuilder newClass(String className){  return new DeclaredClassBuilder().className(TypeDescriptors.fromClassName(className)).parents(ImmutableSet.of()).loadedClasses(ImmutableSet.of()).methods(ImmutableMap.of()).fields(ImmutableSet.<DeclaredField>of());}  }
class C{  private boolean collectRemoteMethods(ClassDoc intf,Map<String,Method> table){  if (!intf.isInterface()) {    throw new AssertionError(intf.qualifiedName() + " not an interface");  }  boolean errors=false;  nextMethod:   for (  MethodDoc method : intf.methods()) {    boolean hasRemoteException=false;    for (    ClassDoc ex : method.thrownExceptions()) {      if (env.docRemoteException().subclassOf(ex)) {        hasRemoteException=true;        break;      }    }    if (!hasRemoteException) {      env.error("rmic.must.throw.remoteexception",intf.qualifiedName(),method.name() + method.signature());      errors=true;      continue nextMethod;    }    MethodDoc implMethod=findImplMethod(method);    if (implMethod != null) {      for (      ClassDoc ex : implMethod.thrownExceptions()) {        if (!ex.subclassOf(env.docException())) {          env.error("rmic.must.only.throw.exception",implMethod.name() + implMethod.signature(),ex.qualifiedName());          errors=true;          continue nextMethod;        }      }    }    Method newMethod=new Method(method);    String key=newMethod.nameAndDescriptor();    Method oldMethod=table.get(key);    if (oldMethod != null) {      newMethod=newMethod.mergeWith(oldMethod);    }    table.put(key,newMethod);  }  for (  ClassDoc superintf : intf.interfaces()) {    if (!collectRemoteMethods(superintf,table)) {      errors=true;    }  }  return !errors;}  }
class C{  private void restoreFavorite(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking favorite " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  ContentResolver cr=mContext.getContentResolver();  ContentValues values=unpackFavorite(buffer,dataSize);  cr.insert(Favorites.CONTENT_URI_NO_NOTIFICATION,values);}  }
class C{  public boolean isDiscoveryInProgress(){  return _discoveryInProgress;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.959 -0500",hash_original_method="A40BEAAD1582CC67F32BB145B8ABDE84",hash_generated_method="AF28097F7F5696941EAC21D0DECD9B8D") private boolean processEventNotify(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process EventNotify");  TextMessage textMsg=new TextMessage();  IconId iconId=null;  ComprehensionTlv ctlv=searchForTag(ComprehensionTlvTag.ALPHA_ID,ctlvs);  textMsg.text=ValueParser.retrieveAlphaId(ctlv);  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    iconId=ValueParser.retrieveIconId(ctlv);    textMsg.iconSelfExplanatory=iconId.selfExplanatory;  }  textMsg.responseNeeded=false;  mCmdParams=new DisplayTextParams(cmdDet,textMsg);  if (iconId != null) {    mIconLoadState=LOAD_SINGLE_ICON;    mIconLoader.loadIcon(iconId.recordNumber,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));    return true;  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP2") public VariableTableModel(JLabel status,String h[],CvTableModel cvModel,IndexedCvTableModel iCvModel){  super();  _status=status;  _cvModel=cvModel;  _indxCvModel=iCvModel;  headers=h;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public void notifyObservers(){  resource.handleRequest(exchange);}  }
class C{  public void removeTile(int id){  removeTile(null,id);}  }
class C{  public RequestHandle put(String url,ResponseHandlerInterface responseHandler){  return put(null,url,null,responseHandler);}  }
class C{  static long decodeMax(byte[] b,int dimension){  int offset=b.length / 2 + dimension * BYTES;  return NumericUtils.sortableBytesToLong(b,offset);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String randomUUID(){  return randomUUID(10);}  }
class C{  public static String downsamplerReducer(List<String> values,String reducerType){  List<Double> operands=new ArrayList<Double>();  for (  String str : values) {    if (str == null || str.equals("")) {      operands.add(0.0);    } else {      operands.add(Double.parseDouble(str));    }  }  InternalReducerType type=InternalReducerType.fromString(reducerType);switch (type) {case AVG:    return String.valueOf((new Mean()).evaluate(Doubles.toArray(operands)));case MIN:  return String.valueOf(Collections.min(operands));case MAX:return String.valueOf(Collections.max(operands));case SUM:return String.valueOf((new Sum()).evaluate(Doubles.toArray(operands),0,operands.size()));case DEVIATION:return String.valueOf((new StandardDeviation()).evaluate(Doubles.toArray(operands)));case COUNT:values.removeAll(Collections.singleton(null));return String.valueOf((float)values.size());default :throw new UnsupportedOperationException(reducerType);}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.624 -0500",hash_original_method="540058EB824CF1779470649F70CA731D",hash_generated_method="BFAAB3C0B70D2D919A809A18C1212413") public final boolean isUnderlineText(){  return 1 == ((getFlags() & UNDERLINE_TEXT_FLAG) + 0);}  }
class C{  public WayElementProcessor(ElementProcessor parentProcessor,MapBuilder mdConsumer){  super(parentProcessor,mdConsumer);  tagElementProcessor=new TagElementProcessor(this,this);  wayNodeElementProcessor=new WayNodeElementProcessor(this,this);  wayAttributes=new ArrayList<EntityAttribute>();  wayNodeIds=new ArrayList<Long>();}  }
class C{  public void addItem(final JLabel label,final JComponent item,int col){  GridBagConstraints labelConstraints=new GridBagConstraints();  labelConstraints.gridx=col;  labelConstraints.gridy=myNextItemRow;  labelConstraints.insets=new Insets(10,10,0,0);  labelConstraints.anchor=GridBagConstraints.NORTHEAST;  labelConstraints.fill=GridBagConstraints.NONE;  add(label,labelConstraints);  GridBagConstraints itemConstraints=new GridBagConstraints();  itemConstraints.gridx=col + 1;  itemConstraints.gridy=myNextItemRow;  itemConstraints.insets=new Insets(10,10,0,10);  itemConstraints.weightx=1.0;  itemConstraints.anchor=GridBagConstraints.WEST;  itemConstraints.fill=GridBagConstraints.HORIZONTAL;  add(item,itemConstraints);}  }
class C{  public boolean isCheckFullyPopulated(){  return this.checkFullyPopulated;}  }
class C{  private static void queryMetadata(String queryString) throws IOException, ServiceException {  URL url=urlFactory.getAttributesFeedURL();  GoogleBaseQuery query=new GoogleBaseQuery(url);  query.setGoogleBaseQuery(queryString);  System.out.println("Sending request to: " + query.getUrl());  try {    GoogleBaseFeed feed=service.query(query);    printMetadataFeed(feed);  } catch (  ServiceException e) {    printServiceException(e);  }}  }
class C{  public void reset(LineReader r){  reset();  this.reader=r;}  }
class C{  private void limitRectCoords(GrowableRectArray rects,int index){  if ((rects.getX(index) + rects.getWidth(index)) > MASK_SIZE) {    rects.setWidth(index,MASK_SIZE - rects.getX(index));  }  if ((rects.getY(index) + rects.getHeight(index)) > MASK_SIZE) {    rects.setHeight(index,MASK_SIZE - rects.getY(index));  }  if (rects.getX(index) < 0) {    rects.setWidth(index,rects.getWidth(index) + rects.getX(index));    rects.setX(index,0);  }  if (rects.getY(index) < 0) {    rects.setHeight(index,rects.getHeight(index) + rects.getY(index));    rects.setY(index,0);  }}  }
class C{  public String toString(){  return hexString;}  }
class C{  public GlobalTransaction() throws SystemException {  try {    GTid=generateGTid();    xid=XidImpl.createXid(GTid);  } catch (  Exception e) {    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.severeEnabled())     writer.severe(LocalizedStrings.GlobalTransaction_GLOBALTRANSACTION_CONSTRUCTOR_ERROR_WHILE_TRYING_TO_CREATE_XID_DUE_TO_0,e,e);    String exception=LocalizedStrings.GlobalTransaction_GLOBALTRANSACTION_CONSTRUCTOR_ERROR_WHILE_TRYING_TO_CREATE_XID_DUE_TO_0.toLocalizedString(new Object[]{e});    throw new SystemException(exception);  }}  }
class C{  public boolean hasStaticFieldRead(String owner,String methodName,String targetClass,String targetField){  StaticFieldReadEntry read=new StaticFieldReadEntry(owner,methodName,targetClass,targetField);  return staticFieldReads.contains(read);}  }
class C{  public static PointDouble draw(DrawHandler drawHandler,String[] textLines,double width,PointDouble topLeft){  return draw(drawHandler,textLines,width,topLeft,Collections.<Line1D>emptyList());}  }
class C{  public AckClusterStatePublishResponseHandler(Set<DiscoveryNode> publishingToNodes,Discovery.AckListener ackListener){  super(publishingToNodes);  this.ackListener=ackListener;}  }
class C{  public void testReceive_NonBlockNoServerBufEmpty() throws Exception {  this.channel1.configureBlocking(false);  receiveNonBlockNoServer(CAPACITY_NORMAL);}  }
class C{  public String toString(){  return String.valueOf(value);}  }
class C{  public boolean reverseCorrectIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return false;}  }
class C{  private boolean mustDeserializeBinary(Class cls){  if (cls != null && ctx.config().getMarshaller() instanceof BinaryMarshaller) {    CacheObjectBinaryProcessorImpl proc0=(CacheObjectBinaryProcessorImpl)ctx.cacheObjects();    return proc0.binaryContext().mustDeserialize(cls);  } else   return false;}  }
class C{  @Override public Characters asCharacters(){  return (WbXmlCharactersEvent)this;}  }
class C{  public boolean intersects(double x,double y,double w,double h){  return path.intersects(x,y,w,h);}  }
class C{  public static boolean filesystemHasActiveReplication(FileShare fs,StringBuffer notSuppReasonBuff,String deleteType,boolean forceDelete){  if (fs.getPersonality() != null && fs.getPersonality().equalsIgnoreCase(PersonalityTypes.TARGET.name())) {    notSuppReasonBuff.append(String.format("File system - %s given in request is an active Target file system.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return true;  }  if (!forceDelete || FileControllerConstants.DeleteTypeEnum.VIPR_ONLY.toString().equalsIgnoreCase(deleteType)) {    if (fs.getMirrorfsTargets() != null && !fs.getMirrorfsTargets().isEmpty()) {      notSuppReasonBuff.append(String.format("File system %s given in request has active target file systems.",fs.getLabel()));      _log.info(notSuppReasonBuff.toString());      return true;    }  }  return false;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Order_ID"))     p_C_Order_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void testIsDeflated(){  System.out.println("isDeflated");  String data="fZFba8MwDIX%2FStB7c11a19QpYaNQ2GCsl4e9DDdR2rDEziy79OfP9MI6BnsUOp%2BOdDSbn%2FouOKKhVisBSRhDgKrSdav2AjbrxYjBvJiR7Lt04KWzB%2FWGXw7JBh5UxC8dAc4oriW1xJXskbit%2BKp8eeZpGPPBaKsr3UFQEqGx3upRK3I9mhWaY1vhUtV4EuDNS2tNu3MWLwq%2Fxh%2FJQpsKz6sIaGRHCMHyScAHm%2BwaTOo8G0uZxslDlu8mdTOOMzaVjE0bL6NXSdQe8Qckcn40WamsAE%2Flo5iNknSdpDxPeRaHLJu%2BQ7C9JeTvgWse%2FAyb%2ByD%2Bz0HerofiYO3Ao8ijW206JKf2IQ1hpftIadPLbq0%2FUc2ie6PiWv7%2BQ%2FEN";  try {    data=URLDecoder.decode(data,"ASCII");  } catch (  UnsupportedEncodingException ex) {    fail(ex.toString());  }  Decoder d=Base64.getDecoder();  byte[] bin_data=d.decode(data);  boolean result=false;  try {    result=Encoding.isDeflated(bin_data);  } catch (  IOException ex) {    fail(ex.toString());  }  assertTrue(result);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static int nextInt(){synchronized (random) {    return random.nextInt();  }}  }
class C{  public MotifTreeUI(){  super();}  }
class C{  public OnMergeClause addAction(OnMergeMatchItem action){  matchItems.add(action);  return this;}  }
class C{  public String hex(){  char[] result=new char[data.length * 2];  int c=0;  for (  byte b : data) {    result[c++]=HEX_DIGITS[(b >> 4) & 0xf];    result[c++]=HEX_DIGITS[b & 0xf];  }  return new String(result);}  }
class C{  @GwtIncompatible public static <T>T[] concat(T[] first,T[] second,Class<T> type){  T[] result=newArray(type,first.length + second.length);  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  public void update(Observable o,Object arg){  MazeExplorer me=(MazeExplorer)o;  StdDraw.clear();  draw();  for (int i=0; i < N * N; i+=1) {    if (me.marked[i]) {      drawEdges(i,me);    }  }  for (int i=0; i < N * N; i+=1) {    if (me.marked[i]) {      draw(i,me);    }  }  StdDraw.show(DRAW_DELAY_MS);}  }
class C{  public static RAMDirectory ramCopyOf(Directory dir) throws IOException {  RAMDirectory ram=new RAMDirectory();  for (  String file : dir.listAll()) {    if (file.startsWith(IndexFileNames.SEGMENTS) || IndexFileNames.CODEC_FILE_PATTERN.matcher(file).matches()) {      ram.copyFrom(dir,file,file,IOContext.DEFAULT);    }  }  return ram;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.437 -0400",hash_original_method="1E598B71C72945526CFEDACCA9070A7B",hash_generated_method="322F56CD5683A844E3322F033D9B5163") public String encode(String pString){  return soundex(pString);}  }
class C{  protected Messages(){}  }
class C{  @Override public void paintText(SynthContext ss,Graphics g,String text,int x,int y,int mnemonicIndex){  Graphics2D g2=(Graphics2D)g;  if (desktopHints == null) {    Toolkit toolkit=Toolkit.getDefaultToolkit();    desktopHints=(Map<?,?>)(toolkit.getDesktopProperty("awt.font.desktophints"));  }  Object oldAA=null;  RenderingHints oldHints=null;  if (desktopHints != null) {    oldHints=getRenderingHints(g2,desktopHints,null);    g2.addRenderingHints(desktopHints);  } else {    oldAA=g2.getRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING);    g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  }  super.paintText(ss,g,text,x,y,mnemonicIndex);  if (oldHints != null)   g2.addRenderingHints(oldHints); else   if (oldAA != null)   g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,oldAA);}  }
class C{  protected AlgorithmParameterGenerator(AlgorithmParameterGeneratorSpi paramGenSpi,Provider provider,String algorithm){  this.paramGenSpi=paramGenSpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  public boolean isComplete(){  return complete;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.wedding.com/";  String qualifiedName;  Document doc;  Attr newAttr;  java.util.List illegalQNames=new java.util.ArrayList();  illegalQNames.add("person:{");  illegalQNames.add("person:}");  illegalQNames.add("person:~");  illegalQNames.add("person:'");  illegalQNames.add("person:!");  illegalQNames.add("person:@");  illegalQNames.add("person:#");  illegalQNames.add("person:$");  illegalQNames.add("person:%");  illegalQNames.add("person:^");  illegalQNames.add("person:&");  illegalQNames.add("person:*");  illegalQNames.add("person:(");  illegalQNames.add("person:)");  illegalQNames.add("person:+");  illegalQNames.add("person:=");  illegalQNames.add("person:[");  illegalQNames.add("person:]");  illegalQNames.add("person:\\");  illegalQNames.add("person:/");  illegalQNames.add("person:;");  illegalQNames.add("person:`");  illegalQNames.add("person:<");  illegalQNames.add("person:>");  illegalQNames.add("person:,");  illegalQNames.add("person:a ");  illegalQNames.add("person:\"");  doc=(Document)load("staffNS",false);  for (int indexN10090=0; indexN10090 < illegalQNames.size(); indexN10090++) {    qualifiedName=(String)illegalQNames.get(indexN10090);{      boolean success=false;      try {        newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public DisMaxQueryBuilder tieBreaker(float tieBreaker){  this.tieBreaker=tieBreaker;  return this;}  }
class C{  public void init(KeyGenerationParameters param){  this.random=param.getRandom();  this.strength=(param.getStrength() + 7) / 8;}  }
class C{  private static void swap(byte x[],int a,int b){  byte t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public boolean isNumberB(String s){  if (s == null || s.length() == 0) {    return false;  }  char[] c=s.trim().toCharArray();  if (c.length == 0) {    return false;  }  int i=0;  int num=0;  if (c[0] == '+' || c[0] == '-') {    i++;  }  for (; i < c.length && (c[i] >= '0' && c[i] <= '9'); i++) {    num++;  }  if (i < c.length && c[i] == '.') {    i++;  }  for (; i < c.length && (c[i] >= '0' && c[i] <= '9'); i++) {    num++;  }  if (num == 0) {    return false;  }  if (i == c.length) {    return true;  } else   if (i < c.length && c[i] != 'e') {    return false;  } else {    i++;  }  num=0;  if (i < c.length && (c[i] == '+' || c[i] == '-')) {    i++;  }  for (; i < c.length && (c[i] >= '0' && c[i] <= '9'); i++) {    num++;  }  if (num == 0) {    return false;  }  if (i == c.length) {    return true;  } else {    return false;  }}  }
class C{  private void outputChunk(final IBindingSet[] e){  final int chunkSize=e.length;  stats.unitsOut.add(chunkSize);  stats.chunksOut.increment();  final int messagesOut=q.getChunkHandler().handleChunk(q,bopId,sinkId,e);  sinkMessagesOut.addAndGet(messagesOut);}  }
class C{  @Override protected void onPause(){  running=false;  Preset[] presets=Application.getCurrentPresets(this);  if (presets != null) {    for (    Preset p : presets) {      if (p != null) {        p.saveMRU();      }    }  }  Address.saveLastAddresses(this);  super.onPause();}  }
class C{  public static boolean cs_dupl(Dcs A){  int i, j, p, q, nz=0, n, m, Ap[], Ai[], w[];  double Ax[];  if (!Dcs_util.CS_CSC(A))   return (false);  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  w=new int[m];  for (i=0; i < m; i++)   w[i]=-1;  for (j=0; j < n; j++) {    q=nz;    for (p=Ap[j]; p < Ap[j + 1]; p++) {      i=Ai[p];      if (w[i] >= q) {        Ax[w[i]]+=Ax[p];      } else {        w[i]=nz;        Ai[nz]=i;        Ax[nz++]=Ax[p];      }    }    Ap[j]=q;  }  Ap[n]=nz;  return Dcs_util.cs_sprealloc(A,0);}  }
class C{  public boolean isRightToLeft(){  return (getDirection() == Bidi.DIRECTION_RIGHT_TO_LEFT && (paraLevel & 1) == 1);}  }
class C{  private void loadNextScreen(){  if (mChallengeNo == mAllDueChallenges.size() - 1) {    loadFinishScreen();    return;  }  mChallengeNo+=1;  mCurrentChallenge=mChallengeDataSource.getById(mAllDueChallenges.get(mChallengeNo));  ObjectAnimator animation=ObjectAnimator.ofInt(mProgress,"progress",mChallengeNo * 100);  animation.setDuration(300);  animation.setInterpolator(new DecelerateInterpolator());  animation.start();  loadChallenge();  mFloatingActionButton.setVisibility(View.VISIBLE);  mFloatingActionButton.setImageResource(R.drawable.ic_check_white_24dp);}  }
class C{  public static int px2sp(Context context,float pxValue){  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return (int)(pxValue / fontScale + 0.5f);}  }
class C{  public void initFilter(Instances instances) throws Exception {  HashMap<String,Double> symbols;  symbols=new HashMap<String,Double>();  symbols.put("A",new Double(instances.numAttributes()));  symbols.put("N",new Double(instances.numInstances()));  m_KernelFactor=MathematicalExpression.evaluate(getKernelFactorExpression(),symbols);  if (!m_checksTurnedOff) {    m_Missing=new ReplaceMissingValues();    m_Missing.setInputFormat(instances);    instances=Filter.useFilter(instances,m_Missing);  } else {    m_Missing=null;  }  if (getKernel().getCapabilities().handles(Capability.NUMERIC_ATTRIBUTES)) {    boolean onlyNumeric=true;    if (!m_checksTurnedOff) {      for (int i=0; i < instances.numAttributes(); i++) {        if (i != instances.classIndex()) {          if (!instances.attribute(i).isNumeric()) {            onlyNumeric=false;            break;          }        }      }    }    if (!onlyNumeric) {      m_NominalToBinary=new NominalToBinary();      m_NominalToBinary.setInputFormat(instances);      instances=Filter.useFilter(instances,m_NominalToBinary);    } else {      m_NominalToBinary=null;    }  } else {    m_NominalToBinary=null;  }  if ((m_Filter != null) && (m_Filter.getClass() != AllFilter.class)) {    m_ActualFilter=Filter.makeCopy(m_Filter);    m_ActualFilter.setInputFormat(instances);    instances=Filter.useFilter(instances,m_ActualFilter);  } else {    m_ActualFilter=null;  }  m_NumTrainInstances=instances.numInstances();  m_ActualKernel=Kernel.makeCopy(m_Kernel);  if (m_ActualKernel instanceof RBFKernel) {    ((RBFKernel)m_ActualKernel).setGamma(m_KernelFactor * ((RBFKernel)m_ActualKernel).getGamma());  }  m_ActualKernel.buildKernel(instances);  m_Initialized=true;}  }
class C{  public static CRC check(BitSet msg){  CRC crc=CRC.UNKNOWN;  byte calculated=0x0;  for (int i=msg.nextSetBit(9); i >= 9 && i <= 59; i=msg.nextSetBit(i + 1)) {    calculated^=sCHECKSUMS[i - 9];  }  calculated^=getChecksum(msg);switch ((byte)calculated) {case sFILL_00:    crc=CRC.PASSED;  break;default :crc=CRC.FAILED_CRC;}return crc;}  }
class C{  public static void i(String msg,Throwable throwable){  if (!allowI)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public RawData(byte[] data,InetSocketAddress address,Principal clientIdentity){  this(data,address,clientIdentity,false);}  }
class C{  public int length(){  List<A> l=this;  int len=0;  while (l.tail != null) {    l=l.tail;    len++;  }  return len;}  }
class C{  public void readInformationObject(final PdfObject infoObj,final ObjectDecoder objectDecoder){  try {    objectDecoder.checkResolved(infoObj);  } catch (  final Exception e) {    LogWriter.writeLog("Exception: " + e.getMessage());  }  String newValue;  int id;  byte[] data;  final int count=PdfFileInformation.information_field_IDs.length;  for (int i=0; i < count; i++) {    id=PdfFileInformation.information_field_IDs[i];    if (id == PdfDictionary.Trapped) {      newValue=infoObj.getName(id);      if (newValue == null) {        newValue="";      }    } else {      data=infoObj.getTextStreamValueAsByte(id);      if (data == null) {        newValue="";      } else {        newValue=StringUtils.getTextString(data,false);      }    }    setFieldValue(i,newValue);  }}  }
class C{  public DccTurnout(int number){  super("BT" + number);  _number=number;}  }
class C{  public GlobalDocumentBuilder(boolean hashing,HashingMode hashingMode,boolean useDocValues){  this.hashingEnabled=hashing;  this.hashingMode=hashingMode;  this.useDocValues=useDocValues;  if (hashingEnabled)   testHashes();}  }
class C{  public static TransformMatrix2D rotate(double alpha){  final double sin=Math.sin(alpha);  final double cos=Math.cos(alpha);  return new TransformMatrix2D(cos,sin,-sin,cos,0.0d,0.0d);}  }
class C{  public void addUpdateAction(NetworkUpdateAction action){  updateManager.addAction(action);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.247 -0500",hash_original_method="F1394B84DFE9E4D59F4D1D68B51FC2CF",hash_generated_method="F906F7D9FEB9182ED6C9030C043C536D") public DefaultHttpClient(final ClientConnectionManager conman,final HttpParams params){  super(conman,params);}  }
class C{  public AlbumFeed(BaseFeed<?,?> sourceFeed){  super(sourceFeed);  getCategories().add(AlbumData.ALBUM_CATEGORY);  this.delegate=new AlbumDataImpl(this);}  }
class C{  public double compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  protected void deactivateTestPgParameter(final String param){  TestPaymentGatewayImpl.getGatewayConfig().remove(param);}  }
class C{  protected Map<Branch.NameKey,RevTree> fetchFromBundles(BinaryResult bundles) throws Exception {  assertThat(bundles.getContentType()).isEqualTo("application/x-zip");  File tempfile=File.createTempFile("test",null);  bundles.writeTo(new FileOutputStream(tempfile));  Map<Branch.NameKey,RevTree> ret=new HashMap<>();  try (ZipFile readback=new ZipFile(tempfile)){    for (    ZipEntry entry : ImmutableList.copyOf(Iterators.forEnumeration(readback.entries()))) {      String bundleName=entry.getName();      InputStream bundleStream=readback.getInputStream(entry);      int len=bundleName.length();      assertThat(bundleName).endsWith(".git");      String repoName=bundleName.substring(0,len - 4);      Project.NameKey proj=new Project.NameKey(repoName);      TestRepository<?> localRepo=cloneProject(proj);      try (TransportBundleStream tbs=new TransportBundleStream(localRepo.getRepository(),new URIish(bundleName),bundleStream)){        FetchResult fr=tbs.fetch(NullProgressMonitor.INSTANCE,Arrays.asList(new RefSpec("refs/*:refs/preview/*")));        for (        Ref r : fr.getAdvertisedRefs()) {          String branchName=r.getName();          Branch.NameKey n=new Branch.NameKey(proj,branchName);          RevCommit c=localRepo.getRevWalk().parseCommit(r.getObjectId());          ret.put(n,c.getTree());        }      }     }  }   return ret;}  }
class C{  @Override public void beginOverlay(final OverlayLayer layer){}  }
class C{  public SalsaRequestBuilder withMaxRandomWalkLength(int inputMaxRandomWalkLength){  Preconditions.checkArgument(inputMaxRandomWalkLength % 2 == 1,"Maximum random walk length must be odd.");  this.maxRandomWalkLength=inputMaxRandomWalkLength;  return this;}  }
class C{  public long persistenceId(){  return persistenceId;}  }
class C{  public Address(){}  }
class C{  public static RefactoringStatus createErrorStatus(String msg){  return createStatus(ERROR,msg,null,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  @Deprecated public static void deleteFilesInDir(final File directory,final FilenameFilter filter,final Logger logger,final boolean recurse){  FileUtils.deleteFilesInDir(directory,filter,logger,recurse,false);}  }
class C{  public PolynomialTransform(int degree){  if (degree < 2)   throw new ArithmeticException("The degree of the polynomial was a nonsense value: " + degree);  this.degree=degree;}  }
class C{  @Override public Long srem(final byte[] key,final byte[]... member){  checkIsInMultiOrPipeline();  client.srem(key,member);  return client.getIntegerReply();}  }
class C{  protected void sequence_AnnotatedFunctionDeclaration_AsyncNoTrailingLineBreak_FunctionBody_FunctionDeclaration_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public DrawerBuilder drawerListener(DrawerLayout.DrawerListener drawerListener){  this.drawerListener=drawerListener;  return this;}  }
class C{  public static boolean inViMiddleNameList(String word){  return hsViMiddleNames.contains(word);}  }
class C{  @AssistedInject public RunnerImpl(@NotNull RunnerLocalizationConstant locale,@NotNull RunnerCounter runnerCounter,@NotNull GetEnvironmentsUtil util,@NotNull @Assisted RunOptions runOptions,@NotNull @Assisted Scope environmentScope,@Nullable @Assisted String environmentName){  this.runOptions=runOptions;  this.ram=runOptions.getMemorySize();  this.title=RUNNER_NAME + runnerCounter.getRunnerNumber() + (environmentName == null ? "" : " - " + getCorrectName(environmentName));  this.activeTab=locale.runnerTabConsole();  this.status=IN_QUEUE;  this.scope=environmentScope;  creationTime=System.currentTimeMillis();  String environmentId=runOptions.getEnvironmentId();  if (environmentId == null || environmentId.startsWith("project:/")) {    this.type=util.getType();  } else {    this.type=util.getCorrectCategoryName(runOptions.getEnvironmentId());  }  if (environmentId != null) {    runOptions.setEnvironmentId(environmentId);  }}  }
class C{  public void resetCache(){  cache.reset();}  }
class C{  JComboBox createPresetComboBox(){  JComboBox cb=new JComboBox();  cb.addItem(getString("ComboBoxDemo.preset1"));  cb.addItem(getString("ComboBoxDemo.preset2"));  cb.addItem(getString("ComboBoxDemo.preset3"));  cb.addItem(getString("ComboBoxDemo.preset4"));  cb.addItem(getString("ComboBoxDemo.preset5"));  cb.addItem(getString("ComboBoxDemo.preset6"));  cb.addItem(getString("ComboBoxDemo.preset7"));  cb.addItem(getString("ComboBoxDemo.preset8"));  cb.addItem(getString("ComboBoxDemo.preset9"));  cb.addItem(getString("ComboBoxDemo.preset10"));  cb.addActionListener(this);  return cb;}  }
class C{  public static List<File> recursivelyGetFiles(final String extension,File currentDir){  List<File> result=new LinkedList<File>();  recursivelyGetFiles(extension,currentDir,result);  return result;}  }
class C{  public StringIndexOutOfBoundsException(){}  }
class C{  public void remove(int index){  getContentPane().remove(index);}  }
class C{  @Override public void closeSimulationViews(final boolean andOpenModelingPerspective,final boolean immediately){}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if ((null == obj) || (getClass() != obj.getClass())) {    return false;  }  final INarcPod other=(INarcPod)obj;  return (type == other.type) && (team == other.team);}  }
class C{  public boolean sendMail(final String recipient,final String subject,final String body){  boolean result=false;  java.util.Properties props=System.getProperties();  props.put("mail.transport.protocol","smtp");  props.put("mail.smtp.port",getPort());  props.put("mail.smtp.auth","true");  props.put("mail.smtp.starttls.enable","true");  props.put("mail.smtp.starttls.required","true");  Session session=Session.getDefaultInstance(props);  MimeMessage msg=new MimeMessage(session);  Transport transport=null;  try {    msg.setFrom(new InternetAddress(getSender()));    msg.setRecipient(Message.RecipientType.TO,new InternetAddress(recipient));    msg.setSubject(subject);    msg.setContent(body,"text/plain");    transport=session.getTransport();    transport.connect(getHost(),getSmtpUsername(),getUnobfuscatedSmtpPassword());    transport.sendMessage(msg,msg.getAllRecipients());    result=true;  } catch (  Exception ex) {    LOGGER.error("The email was not sent.",ex);  } finally {    try {      transport.close();    } catch (    MessagingException e) {      LOGGER.error("Could not close transport",e);    }  }  return result;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame("Markdown test");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(new MarkdownTextAreaWithPreview(),BorderLayout.CENTER);  frame.setSize(600,400);  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  private static boolean isBase64(byte octect){  if (octect == PAD) {    return true;  } else   return base64Alphabet[octect] != -1;}  }
class C{  private void updateRecord(String pID){  prodInfo=new ProductInfoExt();  try {    prodInfo=m_dlSales.getProductInfo(pID);    dOriginalRate=taxeslogic.getTaxRate(prodInfo.getTaxCategoryID());    dCategory=((String)cat_list.get(prodInfo.getCategoryID()) == null) ? prodInfo.getCategoryID() : (String)cat_list.get(prodInfo.getCategoryID());    oldBuyPrice=prodInfo.getPriceBuy();    oldSellPrice=prodInfo.getPriceSell();    if ((oldBuyPrice != productBuyPrice) || (oldSellPrice != productSellPrice)) {      createCSVEntry("Updated Price Details",oldBuyPrice,(jCheckSellIncTax.isSelected()) ? oldSellPrice * (1 + dOriginalRate) : oldSellPrice);      createProduct("update");      priceUpdates++;    } else {      noChanges++;    }  } catch (  BasicException ex) {    Logger.getLogger(JPanelCSVImport.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  void updateWaitingCommands(){  int index=commitIndex;  if (isLeader()) {    CoreCmd ccmd=waitQueue.peek();    while (ccmd != null && ccmd.index <= index) {      latency.tail(ccmd.index);      ccmd.update(Command.STATUS_OK,leaderId);      waitQueue.poll();      ccmd=waitQueue.peek();    }  }  saveQueue.getLatest(savedRid);  index=Math.min(commitIndex,savedRid.index);  commitQueue.updateCommitIndex(index);}  }
class C{  private String createLambdaFriendlyVersionName(String version){  return version.replace(".","-");}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  int bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    int variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public DTMAxisIterator reset(){  m_ancestorsPos=m_ancestors.size() - 1;  _currentNode=(m_ancestorsPos >= 0) ? m_ancestors.elementAt(m_ancestorsPos) : DTM.NULL;  return resetPosition();}  }
class C{  protected void addMapKeyConvert(ConvertMetadata convert){  throw ValidationException.invalidMappingForMapKeyConvert(getJavaClassName(),getAttributeName());}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  public static String url2packageName(String url){  String packageName=url.replaceAll("/",".");  if (packageName.startsWith(".")) {    packageName=packageName.substring(1);  }  if (packageName.substring(packageName.length() - 1).equals(".")) {    packageName=packageName.substring(0,packageName.length() - 1);  }  return packageName;}  }
class C{  public GamaShape(final IShape source,final Geometry geom,final Double rotation,final ILocation newLocation,final Double scaling){  this(source,geom,rotation,newLocation);  if (scaling != null && !isPoint()) {    if (getAttribute(IShape.TYPE_ATTRIBUTE) != SPHERE) {      final GamaPoint previous=getLocation();      geometry.apply(AffineTransform3D.createScaling(scaling,scaling,scaling));      setEnvelope(null);      setLocation(previous);    } else {      setAttribute(IShape.DEPTH_ATTRIBUTE,(Double)getAttribute(IShape.DEPTH_ATTRIBUTE) * scaling);    }  }}  }
class C{  protected final void assertAttached(){  if (poolEntry == null) {    throw new IllegalStateException("Adapter is detached.");  }}  }
class C{  private static boolean isURIString(String p_uric){  if (p_uric == null) {    return false;  }  int end=p_uric.length();  char testChar='\0';  for (int i=0; i < end; i++) {    testChar=p_uric.charAt(i);    if (testChar == '%') {      if (i + 2 >= end || !isHex(p_uric.charAt(i + 1)) || !isHex(p_uric.charAt(i + 2))) {        return false;      } else {        i+=2;        continue;      }    }    if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar)) {      continue;    } else {      return false;    }  }  return true;}  }
class C{  public void increaseKey(int i,Key key){  if (i < 0 || i >= nmax)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  if (comp.compare(keys[i + d],key) >= 0)   throw new IllegalArgumentException("Calling with this argument would not increase the Key");  keys[i + d]=key;  sink(qp[i + d]);}  }
class C{  public Boolean isIpv6DefaultGatewaySettable(){  return ipv6DefaultGatewaySettable;}  }
class C{  public static boolean isUrnImportAttribute(IDOMAttr node){  return isUiBinderElement(node.getOwnerElement()) && UiBinderConstants.XMLNS_NAMESPACE.equals(node.getNamespaceURI()) && node.getNodeValue() != null && node.getNodeValue().startsWith(UiBinderConstants.URN_IMPORT_NAMESPACE_BEGINNING);}  }
class C{  private String signerInfo(CodeSigner signer,String tab){  if (cacheForSignerInfo.containsKey(signer)) {    return cacheForSignerInfo.get(signer);  }  StringBuffer s=new StringBuffer();  List<? extends Certificate> certs=signer.getSignerCertPath().getCertificates();  Date timestamp;  Timestamp ts=signer.getTimestamp();  if (ts != null) {    s.append(printTimestamp(tab,ts));    s.append('\n');    timestamp=ts.getTimestamp();  } else {    timestamp=null;    noTimestamp=true;  }  boolean first=true;  for (  Certificate c : certs) {    s.append(printCert(tab,c,true,timestamp,first));    s.append('\n');    first=false;  }  try {    validateCertChain(certs);  } catch (  Exception e) {    if (debug) {      e.printStackTrace();    }    if (e.getCause() != null && (e.getCause() instanceof CertificateExpiredException || e.getCause() instanceof CertificateNotYetValidException)) {    } else {      chainNotValidated=true;      s.append(tab + rb.getString(".CertPath.not.validated.") + e.getLocalizedMessage()+ "]\n");    }  }  String result=s.toString();  cacheForSignerInfo.put(signer,result);  return result;}  }
class C{  public IcyInputStream(InputStream in,int period){  this(in,period,null);}  }
class C{  protected void calculateProfiles(){  if (mProfiles == null) {    mProfiles=new ArrayList<>();  }  if (mCurrentProfile == null) {    int setCount=0;    for (int i=0; i < mProfiles.size(); i++) {      if (mProfiles.size() > i && mProfiles.get(i).isSelectable()) {        if (setCount == 0 && (mCurrentProfile == null)) {          mCurrentProfile=mProfiles.get(i);        } else         if (setCount == 1 && (mProfileFirst == null)) {          mProfileFirst=mProfiles.get(i);        } else         if (setCount == 2 && (mProfileSecond == null)) {          mProfileSecond=mProfiles.get(i);        } else         if (setCount == 3 && (mProfileThird == null)) {          mProfileThird=mProfiles.get(i);        }        setCount++;      }    }    return;  }  IProfile[] previousActiveProfiles=new IProfile[]{mCurrentProfile,mProfileFirst,mProfileSecond,mProfileThird};  IProfile[] newActiveProfiles=new IProfile[4];  Stack<IProfile> unusedProfiles=new Stack<>();  for (int i=0; i < mProfiles.size(); i++) {    IProfile p=mProfiles.get(i);    if (p.isSelectable()) {      boolean used=false;      for (int j=0; j < 4; j++) {        if (previousActiveProfiles[j] == p) {          newActiveProfiles[j]=p;          used=true;          break;        }      }      if (!used) {        unusedProfiles.push(p);      }    }  }  Stack<IProfile> activeProfiles=new Stack<>();  for (int i=0; i < 4; i++) {    if (newActiveProfiles[i] != null) {      activeProfiles.push(newActiveProfiles[i]);    } else     if (!unusedProfiles.isEmpty()) {      activeProfiles.push(unusedProfiles.pop());    }  }  Stack<IProfile> reversedActiveProfiles=new Stack<>();  while (!activeProfiles.empty()) {    reversedActiveProfiles.push(activeProfiles.pop());  }  if (reversedActiveProfiles.isEmpty()) {    mCurrentProfile=null;  } else {    mCurrentProfile=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileFirst=null;  } else {    mProfileFirst=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileSecond=null;  } else {    mProfileSecond=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileThird=null;  } else {    mProfileThird=reversedActiveProfiles.pop();  }}  }
class C{  public void removeLineHighlight(Object tag){  if (lineHighlightManager != null) {    lineHighlightManager.removeLineHighlight(tag);  }}  }
class C{  @Override public int hashCode(){  return groundings.hashCode();}  }
class C{  public X509v3CertificateBuilder(X500Name issuer,BigInteger serial,Date notBefore,Date notAfter,X500Name subject,SubjectPublicKeyInfo publicKeyInfo){  tbsGen=new V3TBSCertificateGenerator();  tbsGen.setSerialNumber(new ASN1Integer(serial));  tbsGen.setIssuer(issuer);  tbsGen.setStartDate(new Time(notBefore));  tbsGen.setEndDate(new Time(notAfter));  tbsGen.setSubject(subject);  tbsGen.setSubjectPublicKeyInfo(publicKeyInfo);  extGenerator=new ExtensionsGenerator();}  }
class C{  public void loadDepots(BufferedReader reader) throws IOException {  String line=null;  outer:   while ((line=reader.readLine()) != null) {    String[] tokens=line.trim().split("\\s+");    for (int i=0; i < tokens.length; i++) {      int id=Integer.parseInt(tokens[i]);      if (id == -1) {        break outer;      } else {        depots.add(id);      }    }  }}  }
class C{  public void addLayoutWrapper(@NonNull SnapLayoutWrapper wrapper){  this.layoutWrappers.add(wrapper);}  }
class C{  public static double[] toDoubleArray(Datum[] data,final double defaultValue){  if (data == null)   return null;  double array[]=new double[data.length];  for (int i=0; i < data.length; i++) {    array[i]=toDouble(data[i],defaultValue);  }  return array;}  }
class C{  public static CompetitivePropertiesPanel createCompetitivePropertiesPanel(final NetworkPanel np,final CompetitivePropsPanelType panelType) throws IllegalArgumentException {  CompetitivePropertiesPanel cpp=new CompetitivePropertiesPanel(np,panelType);  cpp.addListeners();  return cpp;}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  private void tuneLeftSplitter(Element el){  el.getParentElement().getStyle().setProperty("zIndex","1000");  el.getParentElement().getStyle().setProperty("overflow","visible");  el.getStyle().setProperty("boxSizing","border-box");  el.getStyle().setProperty("width","5px");  el.getStyle().setProperty("overflow","hidden");  el.getStyle().setProperty("marginLeft","-3px");  el.getStyle().setProperty("backgroundColor","transparent");  DivElement smallBorder=Document.get().createDivElement();  smallBorder.getStyle().setProperty("position","absolute");  smallBorder.getStyle().setProperty("width","1px");  smallBorder.getStyle().setProperty("height","100%");  smallBorder.getStyle().setProperty("left","3px");  smallBorder.getStyle().setProperty("top","0px");  smallBorder.getStyle().setProperty("backgroundColor",Style.getSplitterSmallBorderColor());  el.appendChild(smallBorder);  DivElement largeBorder=Document.get().createDivElement();  largeBorder.getStyle().setProperty("position","absolute");  largeBorder.getStyle().setProperty("width","2px");  largeBorder.getStyle().setProperty("height","100%");  largeBorder.getStyle().setProperty("left","1px");  largeBorder.getStyle().setProperty("top","0px");  largeBorder.getStyle().setProperty("opacity","0.4");  largeBorder.getStyle().setProperty("backgroundColor",Style.getSplitterLargeBorderColor());  el.appendChild(largeBorder);}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  private void handleError(@NotNull Throwable throwable,@NotNull String remoteUrl,StatusNotification notification,GitOutputConsole console){  String errorMessage=throwable.getMessage();  notification.setStatus(FAIL);  if (errorMessage == null) {    console.printError(constant.fetchFail(remoteUrl));    notification.setTitle(constant.fetchFail(remoteUrl));    return;  }  try {    errorMessage=dtoFactory.createDtoFromJson(errorMessage,ServiceError.class).getMessage();    if (errorMessage.equals("Unable get private ssh key")) {      console.printError(constant.messagesUnableGetSshKey());      notification.setTitle(constant.messagesUnableGetSshKey());      return;    }    console.printError(errorMessage);    notification.setTitle(errorMessage);  } catch (  Exception e) {    console.printError(errorMessage);    notification.setTitle(errorMessage);  }}  }
class C{  public Boolean isThreeInARow(){  return false;}  }
class C{  public static Account readFrom(final Deserializer deserializer,final String label,final AddressEncoding encoding){  final Address address=Address.readFrom(deserializer,label,encoding);  final Account accountFromContext=deserializer.getContext().findAccountByAddress(address);  return null != address.getPublicKey() && !accountFromContext.hasPublicKey() ? new Account(address) : accountFromContext;}  }
class C{  public boolean isReadable(Type type,int index){  int currentIndex=0;  for (  Pair<Type,Object> packetValue : readableObjects) {    if (packetValue.getKey().getBaseClass() == type.getBaseClass()) {      if (currentIndex == index) {        return true;      }      currentIndex++;    }  }  return false;}  }
class C{  @Override protected void uninstallViewListeners(View p){  super.uninstallViewListeners(p);  p.removePropertyChangeListener(viewListener);}  }
class C{  private void rollBackVpoolOnVplexBackendVolume(Volume volume,List<Volume> volumesToUpdate,DbClient dbClient,URI oldVpoolURI){  Volume backendSrc=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient,false);  if (backendSrc != null) {    _log.info("Rolling back virtual pool on VPLEX backend Source volume {}({})",backendSrc.getId(),backendSrc.getLabel());    backendSrc.setVirtualPool(oldVpoolURI);    _log.info("Set volume's virtual pool back to {}",oldVpoolURI);    volumesToUpdate.add(backendSrc);    Volume backendHa=VPlexUtil.getVPLEXBackendVolume(volume,false,dbClient,false);    if (backendHa != null) {      _log.info("Rolling back virtual pool on VPLEX backend Distributed volume {}({})",backendHa.getId(),backendHa.getLabel());      VirtualPool oldVpoolObj=dbClient.queryObject(VirtualPool.class,oldVpoolURI);      VirtualPool oldHAVpool=VirtualPool.getHAVPool(oldVpoolObj,dbClient);      if (oldHAVpool == null) {        oldHAVpool=oldVpoolObj;      }      backendHa.setVirtualPool(oldHAVpool.getId());      _log.info("Set volume's virtual pool back to {}",oldHAVpool.getId());      volumesToUpdate.add(backendHa);    }  }}  }
class C{  public NoAvailableServersException(Throwable cause){  super(cause);}  }
class C{  public void onError(String message){  if (db.errorHandler != null) {    db.errorHandler.onError(message);  }}  }
class C{  public void encodeMappingInfo(ReferenceMaps referenceMaps,int[] bcMap){  int count=0;  int lastBC=0, lastIns=0;  for (int i=0; i < bcMap.length; i++) {    if (bcMap[i] != 0) {      int deltaBC=i - lastBC;      int deltaIns=bcMap[i] - lastIns;      if (VM.VerifyAssertions) {        VM._assert(deltaBC >= 0 && deltaIns >= 0);      }      if (deltaBC <= 6 && deltaIns <= 31) {        count++;      } else {        if (deltaBC > 65535 || deltaIns > 65535) {          VM.sysFail("BaselineCompiledMethod: a fancier encoding is needed");        }        count+=5;      }      lastBC=i;      lastIns=bcMap[i];    }  }  bytecodeMap=new byte[count];  count=lastBC=lastIns=0;  for (int i=0; i < bcMap.length; i++) {    if (bcMap[i] != 0) {      int deltaBC=i - lastBC;      int deltaIns=bcMap[i] - lastIns;      if (VM.VerifyAssertions) {        VM._assert(deltaBC >= 0 && deltaIns >= 0);      }      if (deltaBC <= 6 && deltaIns <= 31) {        bytecodeMap[count++]=(byte)((deltaBC << 5) | deltaIns);      } else {        bytecodeMap[count++]=(byte)255;        bytecodeMap[count++]=(byte)(deltaBC >> 8);        bytecodeMap[count++]=(byte)(deltaBC & 255);        bytecodeMap[count++]=(byte)(deltaIns >> 8);        bytecodeMap[count++]=(byte)(deltaIns & 255);      }      lastBC=i;      lastIns=bcMap[i];    }  }  referenceMaps.translateByte2Machine(bcMap);  this.referenceMaps=referenceMaps;  ExceptionHandlerMap emap=((NormalMethod)method).getExceptionHandlerMap();  if (emap != null) {    eTable=BaselineExceptionTable.encode(emap,bcMap);  }}  }
class C{  public Integer remove(Long key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Person p=getPerson(stack);  return (p != null) ? p.getDateOfDeath() : "";}  }
class C{  void startUpdate(final int taskId,final Object tag,final Object cookie,final String table,final ContentValues values,final String selection,final String[] selectionArgs,final boolean autoNotify,final AsyncDbQueryCallback callback){  final QueryTask task=new QueryTask(Type.UPDATE,taskId,tag,cookie,callback);  task.mTableName=table;  task.mValues=values;  task.mSelection=selection;  task.mSelectionArgs=selectionArgs;  task.mAutoNotify=autoNotify;  mTaskQueue.add(task);  new QueryAsyncTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,task);}  }
class C{  public static String toDecimal(Object value) throws PageException {  return toDecimal(Caster.toDoubleValue(value));}  }
class C{  public void resetPSRs(){  pilotRolls.removeAllElements();}  }
class C{  protected void addSystemMenuItems(JMenu systemMenu){}  }
class C{  public final DoubleGrid2D rint(){  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     fieldx[y]=Math.rint(fieldx[y]);  }  return this;}  }
class C{  @Override @SuppressWarnings("unchecked") HashMap.Entry<K,V>[] newElementArray(int s){  return new LinkedHashMapEntry[s];}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrinsertdataoffsetgreater.class,args);}  }
class C{  public GVTFont deriveFont(float size,Map attrs){  if (font != null)   return new AWTGVTFont(font,size);  Map fontAttributes=new HashMap(attrs);  fontAttributes.put(TextAttribute.SIZE,new Float(size));  fontAttributes.put(TextAttribute.FAMILY,fontFace.getFamilyName());  fontAttributes.remove(TEXT_COMPOUND_DELIMITER);  return new AWTGVTFont(fontAttributes);}  }
class C{  public GZIPInputStream(InputStream in) throws IOException {  this(in,512);}  }
class C{  public static boolean executeScript(Configuration conf,String[] args) throws DMLException {  if (args.length == 0 || (args.length == 1 && (args[0].equalsIgnoreCase("-help") || args[0].equalsIgnoreCase("-?")))) {    System.err.println(USAGE);    return true;  } else   if (args.length == 1 && args[0].equalsIgnoreCase("-clean")) {    cleanSystemMLWorkspace();    return true;  }  if (args.length < 2) {    System.err.println("ERROR: Unrecognized invocation arguments.");    System.err.println(USAGE);    return false;  }  if (!(args[0].equals("-f") || args[0].equals("-s"))) {    System.err.println("ERROR: First argument must be either -f or -s");    System.err.println(USAGE);    return false;  }  RUNTIME_PLATFORM oldrtplatform=rtplatform;  ExplainType oldexplain=EXPLAIN;  ENABLE_DEBUG_MODE=false;  boolean parsePyDML=false;  try {    String fnameOptConfig=null;    String[] scriptArgs=null;    boolean namedScriptArgs=false;    for (int i=2; i < args.length; i++) {      if (args[i].equalsIgnoreCase("-explain")) {        EXPLAIN=ExplainType.RUNTIME;        if (args.length > (i + 1) && !args[i + 1].startsWith("-"))         EXPLAIN=Explain.parseExplainType(args[++i]);      } else       if (args[i].equalsIgnoreCase("-stats"))       STATISTICS=true; else       if (args[i].equalsIgnoreCase("-exec")) {        rtplatform=parseRuntimePlatform(args[++i]);        if (rtplatform == null)         return false;      } else       if (args[i].startsWith("-config="))       fnameOptConfig=args[i].substring(8).replaceAll("\"",""); else       if (args[i].equalsIgnoreCase("-config"))       fnameOptConfig=args[++i]; else       if (args[i].equalsIgnoreCase("-debug")) {        ENABLE_DEBUG_MODE=true;      } else       if (args[i].equalsIgnoreCase("-gpu")) {        USE_ACCELERATOR=true;        if (args.length > (i + 1) && !args[i + 1].startsWith("-")) {          String flag=args[++i];          if (flag.startsWith("force=")) {            String[] flagOptions=flag.split("=");            if (flagOptions.length == 2)             FORCE_ACCELERATOR=Boolean.parseBoolean(flagOptions[1]); else             throw new DMLRuntimeException("Unsupported \"force\" option for -gpu:" + flag);          } else {            throw new DMLRuntimeException("Unsupported flag for -gpu:" + flag);          }        }        GPUContext.createGPUContext();      } else       if (args[i].equalsIgnoreCase("-python")) {        parsePyDML=true;      } else       if (args[i].startsWith("-args") || args[i].startsWith("-nvargs")) {        namedScriptArgs=args[i].startsWith("-nvargs");        i++;        scriptArgs=new String[args.length - i];        System.arraycopy(args,i,scriptArgs,0,scriptArgs.length);        break;      } else {        System.err.println("ERROR: Unknown argument: " + args[i]);        return false;      }    }    if (!ENABLE_DEBUG_MODE)     setLoggingProperties(conf);    if (StringUtils.endsWithIgnoreCase(args[1],".pydml")) {      parsePyDML=true;    }    String dmlScriptStr=readDMLScript(args[0],args[1]);    Map<String,String> argVals=createArgumentsMap(namedScriptArgs,scriptArgs);    DML_FILE_PATH_ANTLR_PARSER=args[1];    printInvocationInfo(args[1],fnameOptConfig,argVals);    if (ENABLE_DEBUG_MODE) {      launchDebugger(dmlScriptStr,fnameOptConfig,argVals,parsePyDML);    } else {      execute(dmlScriptStr,fnameOptConfig,argVals,args,parsePyDML);    }  } catch (  ParseException pe) {    throw pe;  }catch (  DMLScriptException e) {    throw e;  }catch (  Exception ex) {    LOG.error("Failed to execute DML script.",ex);    throw new DMLException(ex);  } finally {    rtplatform=oldrtplatform;    EXPLAIN=oldexplain;  }  return true;}  }
class C{  private boolean isItalicCounterpart(HTMLFont font){  if (!italic) {    return false;  }  return ((size == font.getSize()) && (isSameFamily(font)) && (bold == font.isBold()));}  }
class C{  public boolean isNegative(){  assertDefined();  boolean negative=false;  if (m_value.compareTo(new Integer(0)) < 0) {    negative=true;  }  return negative;}  }
class C{  private synchronized void saveProperties(){  boolean error=false;  File tempFile=null;  Writer writer=null;  try {    tempFile=new File(file.getParentFile(),file.getName() + ".tmp");    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),"UTF-8"));    OutputFormat prettyPrinter=OutputFormat.createPrettyPrint();    XMLWriter xmlWriter=new XMLWriter(writer,prettyPrinter);    xmlWriter.write(document);  } catch (  Exception e) {    Log.error(e.getMessage(),e);    error=true;  } finally {    if (writer != null) {      try {        writer.close();      } catch (      IOException e1) {        Log.error(e1.getMessage(),e1);        error=true;      }    }  }  if (!error) {    if (!file.delete()) {      Log.error("Error deleting property file: " + file.getAbsolutePath());      return;    }    try {      copy(tempFile,file);    } catch (    Exception e) {      Log.error(e.getMessage(),e);      error=true;    }    if (!error) {      tempFile.delete();    }  }}  }
class C{  private static void printProfileInfo(McfData mcfData){  ProfileInfo profileInfo=mcfData.getProfileInfo();  System.out.println("Profile Info:");  System.out.println("Account ID: " + profileInfo.getAccountId());  System.out.println("Web Property ID: " + profileInfo.getWebPropertyId());  System.out.println("Internal Web Property ID: " + profileInfo.getInternalWebPropertyId());  System.out.println("Profile ID: " + profileInfo.getProfileId());  System.out.println("Profile Name: " + profileInfo.getProfileName());  System.out.println("Table ID: " + profileInfo.getTableId());  System.out.println();}  }
class C{  public final <T extends Attribute>T addAttribute(Class<T> attClass){  AttributeImpl attImpl=attributes.get(attClass);  if (attImpl == null) {    if (!(attClass.isInterface() && Attribute.class.isAssignableFrom(attClass))) {      throw new IllegalArgumentException("addAttribute() only accepts an interface that extends Attribute, but " + attClass.getName() + " does not fulfil this contract.");    }    addAttributeImpl(attImpl=this.factory.createAttributeInstance(attClass));  }  return attClass.cast(attImpl);}  }
class C{  public static StorageImage create(String fileName,InputStream data,int width,int height) throws IOException {  EncodedImage e=EncodedImage.create(data);  return create(fileName,e.getImageData(),width,height);}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  if (sink == null) {    throw new IOException("Pipe not connected");  } else   if (b == null) {    throw new NullPointerException();  } else   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  sink.receive(b,off,len);}  }
class C{  public void removeChangeListener(final PTPropertyChangeListener listener){  changeListeners.remove(listener);}  }
class C{  static String concatCommaSeparatedLists(String str1,String str2){  if (str1 == null || (str1.trim().equals(""))) {    return str2;  }  String result=str1.trim();  if (str2 == null || (str2.trim().equals(""))) {    return result;  }  return result + ", " + str2.trim();}  }
class C{  @Override public Promise<FactoryDto> resolveFactory(@NotNull final Map<String,String> factoryParameters,boolean validate){  StringBuilder url=new StringBuilder(API_FACTORY_BASE_URL + "resolver");  if (validate) {    url.append("?validate=true");  }  return asyncRequestFactory.createPostRequest(url.toString(),toJson(factoryParameters)).header(ACCEPT,APPLICATION_JSON).send(unmarshallerFactory.newUnmarshaller(FactoryDto.class));}  }
class C{  private void updateDemandDetailsWithRebate(VacancyRemission vacancyRemission,Installment demandInstallment,Installment effectiveInstallment){  Set<Ptdemand> activePropPtDemandSet=vacancyRemission.getBasicProperty().getActiveProperty().getPtDemandSet();  Ptdemand currPtDemand=null;  for (  Ptdemand ptDemand : activePropPtDemandSet) {    if (ptDemand.getIsHistory().equalsIgnoreCase("N"))     if (ptDemand.getEgInstallmentMaster().equals(demandInstallment)) {      currPtDemand=ptDemand;      break;    }  }  for (  EgDemandDetails dmdDet : currPtDemand.getEgDemandDetails()) {    if (dmdDet.getInstallmentStartDate().equals(effectiveInstallment.getFromDate())) {      dmdDet.setAmount((dmdDet.getAmount().divide(new BigDecimal("2"))).setScale(0,BigDecimal.ROUND_HALF_UP));    }  }  ptDemandDAO.update(currPtDemand);}  }
class C{  void compress(int page){  ByteBuffer d=data[page];synchronized (LZF) {    int len=LZF.compress(d,0,BUFFER,0);    d=ByteBuffer.allocateDirect(len);    d.put(BUFFER,0,len);    data[page]=d;  }}  }
class C{  public AbstractAQuery(Activity act){  this.act=act;}  }
class C{  private void insertBefore(Instruction[] list,Instruction s){  for (  Instruction x : list) {    s.insertBefore(x);  }}  }
class C{  public boolean isName(String name){  return getName().equalsIgnoreCase(name);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  protected void goTo(ImageTile[] selectedTiles2){  if (mapBean == null) {    MapHandler bc=(MapHandler)getBeanContext();    if (bc != null) {      mapBean=(MapBean)bc.get(com.bbn.openmap.MapBean.class);    }  }  if (mapBean != null) {    if (selectedTiles != null && selectedTiles.length > 0) {      Rectangle2D rec=null;      for (int i=selectedTiles2.length - 1; i >= 0; i--) {        ImageTile tile=selectedTiles2[i];        if (rec == null) {          rec=new Rectangle2D.Double(tile.getLRLon(),tile.getLRLat(),0f,0f);          rec.add(tile.getULLon(),tile.getULLat());        } else {          rec.add(tile.getULLon(),tile.getULLat());          rec.add(tile.getLRLon(),tile.getLRLat());        }      }      if (rec != null) {        Point2D center=new Point2D.Double(rec.getCenterX(),rec.getCenterY());        Point2D anchor1=new Point2D.Double(rec.getMinX(),rec.getMaxY());        Point2D anchor2=new Point2D.Double(rec.getMaxX(),rec.getMinY());        Proj proj=(Proj)mapBean.getProjection();        float scale=proj.getScale(anchor1,anchor2,proj.forward(anchor1),proj.forward(anchor2));        if (logger.isLoggable(Level.FINE)) {          logger.fine("Images cover " + anchor1 + " to "+ anchor2+ ", scale adjusted to "+ scale);        }        proj.setCenter(center);        proj.setScale(scale);        mapBean.setProjection(proj);      }    }  }}  }
class C{  static public void assertEquals(String msg,double[] expected,double[] actual){  if (msg == null) {    msg="";  } else {    msg=msg + " : ";  }  if (expected == null && actual == null) {    return;  }  if (expected == null && actual != null) {    fail(msg + "Expected a null array.");  }  if (expected != null && actual == null) {    fail(msg + "Not expecting a null array.");  }  if (expected.length != actual.length) {    assertEquals(msg + "length differs.",expected.length,actual.length);  }  for (int i=0; i < expected.length; i++) {    double delta=0.0d;    try {      assertEquals(expected[i],actual[i],delta);    } catch (    AssertionFailedError ex) {      fail(msg + "values differ: index=" + i,ex);    }  }}  }
class C{  public void transformButton(int index,final String label,final String tip){  final JButton button=getButtonAtIndex(index);  if (button != null) {    button.setText(label);    button.setToolTipText(tip);  }}  }
class C{  public RootPaneWindowFocusedState(){  super("WindowFocused");}  }
class C{  public void drawLine(int x1,int y1,int x2,int y2){  mGraphics.drawLine(x1,y1,x2,y2);}  }
class C{  Iterator<Integer> iterator(){  return new LocaIterator();}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public static ByteBufferMessageSet fetchMessages(KafkaConfig config,SimpleConsumer consumer,Partition partition,long offset) throws TopicOffsetOutOfRangeException, FailedFetchException, RuntimeException {  ByteBufferMessageSet msgs=null;  String topic=partition.topic;  int partitionId=partition.partition;  FetchRequestBuilder builder=new FetchRequestBuilder();  FetchRequest fetchRequest=builder.addFetch(topic,partitionId,offset,config.fetchSizeBytes).clientId(config.clientId).maxWait(config.fetchMaxWait).minBytes(config.minFetchByte).build();  FetchResponse fetchResponse;  try {    fetchResponse=consumer.fetch(fetchRequest);  } catch (  Exception e) {    if (e instanceof ConnectException || e instanceof SocketTimeoutException || e instanceof IOException|| e instanceof UnresolvedAddressException) {      LOG.warn("Network error when fetching messages:",e);      throw new FailedFetchException(e);    } else {      throw new RuntimeException(e);    }  }  if (fetchResponse.hasError()) {    KafkaError error=KafkaError.getError(fetchResponse.errorCode(topic,partitionId));    if (error.equals(KafkaError.OFFSET_OUT_OF_RANGE) && config.useStartOffsetTimeIfOffsetOutOfRange) {      String msg=partition + " Got fetch request with offset out of range: [" + offset+ "]";      LOG.warn(msg);      throw new TopicOffsetOutOfRangeException(msg);    } else {      String message="Error fetching data from [" + partition + "] for topic ["+ topic+ "]: ["+ error+ "]";      LOG.error(message);      throw new FailedFetchException(message);    }  } else {    msgs=fetchResponse.messageSet(topic,partitionId);  }  return msgs;}  }
class C{  private Region findReplace(final FindReplaceOperationCode operationCode,int startOffset,String findString,String replaceText,boolean forwardSearch,boolean caseSensitive,boolean wholeWord) throws BadLocationException {  if ((operationCode == REPLACE || operationCode == REPLACE_FIND_NEXT) && (fFindReplaceState != FIND_FIRST && fFindReplaceState != FIND_NEXT))   throw new IllegalStateException("illegal findReplace state: cannot replace without preceding find");  if (operationCode == FIND_FIRST) {    if (findString == null || findString.length() == 0)     return null;    if (startOffset < 0 || startOffset >= length())     throw new BadLocationException();    String patternFlags="g";    if (caseSensitive)     patternFlags+="i";    if (wholeWord)     findString="\\b" + findString + "\\b";    if (!wholeWord)     findString=asRegPattern(findString);    fFindReplaceMatchOffset=startOffset;    regExp=RegExp.compile(findString,patternFlags);    regExp.setLastIndex(fFindReplaceMatchOffset);  }  fFindReplaceState=operationCode;  if (operationCode != REPLACE) {    if (forwardSearch) {      MatchResult matchResult=regExp.exec(String.valueOf(this));      if (matchResult != null && matchResult.getGroupCount() > 0 && !matchResult.getGroup(0).isEmpty())       return new RegionImpl(matchResult.getIndex(),matchResult.getGroup(0).length());      return null;    }    regExp.setLastIndex(0);    MatchResult matchResult=regExp.exec(String.valueOf(this));    boolean found=matchResult != null;    int index=-1;    int length=-1;    while (found && matchResult.getIndex() + matchResult.getGroup(0).length() <= fFindReplaceMatchOffset + 1) {      index=matchResult.getIndex();      length=matchResult.getGroup(0).length();      regExp.setLastIndex(index + 1);      matchResult=regExp.exec(String.valueOf(this));      found=matchResult != null;    }    fFindReplaceMatchOffset=index;    if (index > -1) {      regExp.setLastIndex(index);      matchResult=regExp.exec(String.valueOf(this));      return new RegionImpl(index,length);    }    return null;  }  return null;}  }
class C{  @Override public Calendar parse(final String timeString,final int timezoneOffset) throws ParseException {synchronized (this.dateFormat) {    Calendar cal=Calendar.getInstance(UTCtimeZone);    cal.setTime(this.dateFormat.parse(timeString));    cal.add(Calendar.MINUTE,timezoneOffset);    return cal;  }}  }
class C{  public SwingTerminal(TerminalSize initialTerminalSize,TerminalEmulatorDeviceConfiguration deviceConfiguration,SwingTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration){  this(initialTerminalSize,deviceConfiguration,fontConfiguration,colorConfiguration,new TerminalScrollController.Null());}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public void localizedError(int pos,String msg){  localizedError(pos,msg,-1);}  }
class C{  private void showImpl(boolean reverse){  if (modal && Display.isInitialized() && Display.getInstance().isMinimized()) {    Log.p("Modal dialogs cannot be displayed on a minimized app");    return;  }  setDisposed(false);  if (top > -1) {    show(top,bottom,left,right,includeTitle,modal);  } else {    if (modal) {      if (getDialogPosition() == null) {        super.showModal(reverse);      } else {        showPacked(getDialogPosition(),true);      }    } else {      showModeless();    }  }}  }
class C{  public NotificationChain basicSetCheck(Check newCheck,NotificationChain msgs){  Check oldCheck=check;  check=newCheck;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.CHECK_REF__CHECK,oldCheck,newCheck);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public StrTokenizer(final char[] input,final StrMatcher delim,final StrMatcher quote){  this(input,delim);  setQuoteMatcher(quote);}  }
class C{  @Override public Array driftDiscretization(final StochasticProcess sp,final double t0,final Array x0,final double dt){  return sp.drift(t0,x0).mulAssign(dt);}  }
class C{  public void addGetfield(CtClass c,String name,String type){  add(GETFIELD);  int ci=constPool.addClassInfo(c);  addIndex(constPool.addFieldrefInfo(ci,name,type));  growStack(Descriptor.dataSize(type) - 1);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String prop=e.getPropertyName();  if (isVisible() && (e.getSource() == optionPane) && (JOptionPane.VALUE_PROPERTY.equals(prop) || JOptionPane.INPUT_VALUE_PROPERTY.equals(prop))) {    Object value=optionPane.getValue();    if (value == JOptionPane.UNINITIALIZED_VALUE) {      return;    }    optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);    if (btnString1.equals(value)) {      typedText=textField.getText();      String ucText=typedText.toUpperCase();      if (magicWord.equals(ucText)) {        clearAndHide();      } else {        textField.selectAll();        JOptionPane.showMessageDialog(CustomDialog.this,"Sorry, \"" + typedText + "\" "+ "isn't a valid response.\n"+ "Please enter "+ magicWord+ ".","Try again",JOptionPane.ERROR_MESSAGE);        typedText=null;        textField.requestFocusInWindow();      }    } else {      dd.setLabel("It's OK.  " + "We won't force you to type " + magicWord + ".");      typedText=null;      clearAndHide();    }  }}  }
class C{  public static BufferedImage convertFromImageData(ImageData imageData){  int width=imageData.width;  int height=imageData.height;  ImageData maskData=null;  int alpha[]=new int[1];  if (imageData.alphaData == null)   maskData=imageData.getTransparencyMask();  BufferedImage image=new BufferedImage(imageData.width,imageData.height,BufferedImage.TYPE_INT_ARGB);  WritableRaster alphaRaster=image.getAlphaRaster();  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      RGB color=imageData.palette.getRGB(imageData.getPixel(x,y));      image.setRGB(x,y,new java.awt.Color(color.red,color.green,color.blue).getRGB());      if (alphaRaster != null) {        if (imageData.alphaData != null) {          int al=imageData.getAlpha(x,y);          if (al == 0) {            image.setRGB(x,y,new java.awt.Color(255,255,255).getRGB());          } else {            image.setRGB(x,y,new java.awt.Color(color.red,color.green,color.blue).getRGB());          }          alpha[0]=imageData.getAlpha(x,y);          alphaRaster.setPixel(x,y,alpha);        } else {          if (maskData != null) {            alpha[0]=maskData.getPixel(x,y) == 0 ? 0 : 255;            alphaRaster.setPixel(x,y,alpha);          }        }      }    }  }  return image;}  }
class C{  @Override public void notifyWatch(byte[] key){  int hash=_table.getPodHash(key);  TablePodNode node=getNode(hash);  if (node.isSelfOwner()) {    _table.notifyWatch(key);  } else {    ServerBartender owner=node.getOwner();    ClusterServiceKraken proxy=_podKraken.getProxy(owner.getId());    if (proxy != null) {      proxy.notifyWatch(_table.getKey(),key);    }  }}  }
class C{  public boolean isDirectory(){  return directory;}  }
class C{  public String debugDump(int indent){  return super.debugDump(indent);}  }
class C{  public ImageRequestBuilder disableDiskCache(){  mDiskCacheEnabled=false;  return this;}  }
class C{  static void warn(String s,Throwable t){  System.out.println("Warning: " + s);  if (t != null) {    t.printStackTrace();  }}  }
class C{  private Object readResolve(){  return getInstance(iType,iDurationField);}  }
class C{  private void addNotificationCategorySeparator(JPanel panel){  JSeparator jsep=new JSeparator(SwingConstants.HORIZONTAL);  jsep.setMaximumSize(new Dimension(Short.MAX_VALUE,7));  panel.add(jsep);}  }
class C{  public void onServerStart(){  _tableService.onServerStart();}  }
class C{  public static Related find(String value){  return enums.find(value);}  }
class C{  public static void registerCover(Collection<ItemStack> aStackList,ITexture aCover,GT_CoverBehavior aBehavior){  if (aCover.isValidTexture())   for (  ItemStack tStack : aStackList)   registerCover(tStack,aCover,aBehavior);}  }
class C{  static void closeAfterWrite(OutputStream out,FileDescriptor outFd){  try {    if (out != null) {      out.flush();    }    if (outFd != null) {      outFd.sync();    }  } catch (  IOException e) {    LLog.e("Fail sync");  } finally {    closeQuietly(out);  }}  }
class C{  @Override protected BlockingBuffer<KVO<O>[]> newSubtaskBuffer(){  return new BlockingBuffer<KVO<O>[]>(new ArrayBlockingQueue<KVO<O>[]>(subtaskQueueCapacity),BlockingBuffer.DEFAULT_MINIMUM_CHUNK_SIZE,Long.MAX_VALUE,TimeUnit.SECONDS,true);}  }
class C{  public RegionDistributionException(String s,String regionFullPath,Set failedRoles,Throwable ex){  super(s,regionFullPath,ex);  this.failedRoles=failedRoles;  if (this.failedRoles == null) {    this.failedRoles=Collections.EMPTY_SET;  }}  }
class C{  public long writeLongGolomb(final long x,final long b) throws IOException {  return writeLongGolomb(x,b,Fast.mostSignificantBit(b));}  }
class C{  public float floatValue(){  return 0.0f;}  }
class C{  public Binh(){  super(2,2);}  }
class C{  private static int indexOf(final Throwable throwable,final Class<?> type,int fromIndex,final boolean subclass){  if (throwable == null || type == null) {    return -1;  }  if (fromIndex < 0) {    fromIndex=0;  }  final Throwable[] throwables=ExceptionUtils.getThrowables(throwable);  if (fromIndex >= throwables.length) {    return -1;  }  if (subclass) {    for (int i=fromIndex; i < throwables.length; i++) {      if (type.isAssignableFrom(throwables[i].getClass())) {        return i;      }    }  } else {    for (int i=fromIndex; i < throwables.length; i++) {      if (type.equals(throwables[i].getClass())) {        return i;      }    }  }  return -1;}  }
class C{  static void serialize(DataOutput out,Serializers serializers) throws IOException {  StringBuilder msg=new StringBuilder(String.format("Serialize %d serializer classes:",serializers.serializers.values().size()));  int size=serializers.serializers.values().size();  out.writeInt(size);  if (size > 0) {    for (    SerializerWrapper sw : serializers.serializers.values()) {      int index=sw.index;      String name=sw.serializer.getClass().getName();      out.writeInt(index);      out.writeUTF(name);      msg.append(String.format("%n  (%d) %s",index,name));    }    LOGGER.info(msg.toString());  }}  }
class C{  public void handlePopupMenu(MouseEvent e){  _list.setSelectedIndex(_list.locationToIndex(e.getPoint()));  _popup.show(_list,e.getX(),e.getY());}  }
class C{  public void saveLoanToAssetAccountMapping(final JsonElement element,final String paramName,final Long productId,final int placeHolderTypeId){  saveProductToAccountMapping(element,paramName,productId,placeHolderTypeId,GLAccountType.ASSET,PortfolioProductType.LOAN);}  }
class C{  public static boolean isUnmanagedVolume(CIMObjectPath volumePath,DbClient dbClient){  String systemName=volumePath.getKey(SmisConstants.CP_SYSTEM_NAME).getValue().toString();  systemName=systemName.replaceAll(Constants.SMIS80_DELIMITER_REGEX,Constants.PLUS);  String id=volumePath.getKey(SmisConstants.CP_DEVICE_ID).getValue().toString();  String nativeGuid=NativeGUIDGenerator.generateNativeGuidForVolumeOrBlockSnapShot(systemName.toUpperCase(),id);  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeNativeGuidConstraint(nativeGuid),result);  if (result.iterator().hasNext()) {    return false;  }  return true;}  }
class C{  public void sendComposingNotification(String to,String packetID){  Message msg=new Message(to);  MessageEvent messageEvent=new MessageEvent();  messageEvent.setComposing(true);  messageEvent.setPacketID(packetID);  msg.addExtension(messageEvent);  con.sendPacket(msg);}  }
class C{  public void addBox(float x,float y,float z,float w,float h,float d){  int rw=MathHelper.ceiling_float_int(w);  int rh=MathHelper.ceiling_float_int(h);  int rd=MathHelper.ceiling_float_int(d);  w-=rw;  h-=rh;  d-=rd;  addShapeBox(x,y,z,rw,rh,rd,0F,0F,0F,0F,w,0F,0F,w,0F,d,0F,0F,d,0F,h,0F,w,h,0F,w,h,d,0F,h,d);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public int mega(){  return mega;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void drawDividerDrawable(Canvas c,RecyclerView parent){  int headersCount=0;  int footerCount=0;  int itemViewCount;  FamiliarRecyclerView curFamiliarRecyclerView=null;  if (parent instanceof FamiliarRecyclerView) {    curFamiliarRecyclerView=(FamiliarRecyclerView)parent;    headersCount=curFamiliarRecyclerView.getHeaderViewsCount();    footerCount=curFamiliarRecyclerView.getFooterViewsCount();    itemViewCount=curFamiliarRecyclerView.getAdapter().getItemCount() - headersCount - footerCount;  } else {    itemViewCount=parent.getAdapter().getItemCount();  }  final int parentLeft=parent.getPaddingLeft();  final int parentRight=parent.getWidth() - parent.getPaddingRight();  final int parentTop=parent.getPaddingTop();  final int parentBottom=parent.getHeight() - parent.getPaddingBottom();  boolean isGridItemLayoutLastRow, isGridItemLayoutFirstRow, isGridItemLayoutLastColumn;  boolean isGridLayoutLastNum=false;  for (int i=0; i < parent.getChildCount(); i++) {    View childView=parent.getChildAt(i);    RecyclerView.LayoutParams childViewParams=(RecyclerView.LayoutParams)childView.getLayoutParams();    int position=childViewParams.getViewAdapterPosition();    if (isInterceptFilter(position,headersCount,footerCount,itemViewCount))     continue;    if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_LINEAR && (!isHeaderDividersEnabled || headersCount == 0) && position - headersCount == 0) {      continue;    }    int traX=(int)(ViewCompat.getTranslationX(childView));    int traY=(int)(ViewCompat.getTranslationY(childView));    boolean isEmptyView=isEmptyView(curFamiliarRecyclerView,position,headersCount);    if (isHeadViewPos(headersCount,position) || isFooterViewPos(headersCount,footerCount,itemViewCount,position) || isEmptyView) {      if (isEmptyView && (!isHeaderDividersEnabled || headersCount == 0)) {        continue;      }      if (mOrientation == OrientationHelper.HORIZONTAL) {        final int left=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight;        final int right=left + mVerticalDividerDrawableHeight;        mVerticalDividerDrawable.setBounds(left + traX,parentTop + traY,right + traX,parentBottom + traY);        mVerticalDividerDrawable.draw(c);      } else {        final int top=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight;        final int bottom=top + mHorizontalDividerDrawableHeight;        mHorizontalDividerDrawable.setBounds(parentLeft + traX,top + traY,parentRight + traX,bottom + traY);        mHorizontalDividerDrawable.draw(c);      }      continue;    }switch (mLayoutManagerType) {case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_LINEAR:      if (mOrientation == OrientationHelper.VERTICAL) {        int left=parentLeft;        int right=parentRight;        if (mItemViewBothSidesMargin > 0 && position - headersCount > 0) {          left+=mItemViewBothSidesMargin;          right-=mItemViewBothSidesMargin;        }        final int top=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight;        final int bottom=top + mHorizontalDividerDrawableHeight;        mHorizontalDividerDrawable.setBounds(left + traX,top + traY,right + traX,bottom + traY);        mHorizontalDividerDrawable.draw(c);      } else {        int top=parentTop;        int bottom=parentBottom;        if (mItemViewBothSidesMargin > 0 && position - headersCount > 0) {          top+=mItemViewBothSidesMargin;          bottom-=mItemViewBothSidesMargin;        }        final int left=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight;        final int right=left + mVerticalDividerDrawableHeight;        mVerticalDividerDrawable.setBounds(left + traX,top + traY,right + traX,bottom + traY);        mVerticalDividerDrawable.draw(c);      }    break;case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID:case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID:  isGridItemLayoutLastRow=isGridItemLayoutLastRow(position,itemViewCount,headersCount);isGridItemLayoutLastColumn=isGridItemLayoutLastColumn(position,headersCount,childView);isGridItemLayoutFirstRow=isGridItemLayoutFirstRow(position,headersCount);if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && position == (itemViewCount + headersCount - 1)) {isGridLayoutLastNum=true;}if (mOrientation == OrientationHelper.HORIZONTAL) {if (!isNotShowGridEndDivider || (!isGridLayoutLastNum && !isGridItemLayoutLastColumn)) {int horizontalLeft=childView.getLeft() - childViewParams.leftMargin;int horizontalTop=childView.getBottom() + childViewParams.bottomMargin;int horizontalRight=childView.getRight() + childViewParams.rightMargin;int horizontalBottom=horizontalTop + mHorizontalDividerDrawableHeight;if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID && !isGridItemLayoutLastRow) {horizontalRight+=mVerticalDividerDrawableHeight;}mHorizontalDividerDrawable.setBounds(horizontalLeft + traX,horizontalTop + traY,horizontalRight + traX,horizontalBottom + traY);mHorizontalDividerDrawable.draw(c);}if ((!isHeaderDividersEnabled || headersCount == 0) && isGridItemLayoutFirstRow) {continue;}int verticalTop;int verticalBottom;if (isGridItemLayoutFirstRow) {if (position - headersCount == 0) {verticalTop=parent.getTop();verticalBottom=parent.getBottom();} else {continue;}} else if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && isGridItemLayoutLastRow) {if (isGridItemLayoutFirstColumn(position,headersCount,childView)) {verticalTop=parent.getTop() + mItemViewBothSidesMargin;verticalBottom=parent.getBottom() - mItemViewBothSidesMargin;} else {continue;}} else {verticalTop=childView.getTop() - childViewParams.topMargin;verticalBottom=childView.getBottom() + childViewParams.bottomMargin;if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridItemLayoutLastColumn) {verticalBottom+=mHorizontalDividerDrawableHeight;}}int verticalLeft=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight;int verticalRight=verticalLeft + mVerticalDividerDrawableHeight;mVerticalDividerDrawable.setBounds(verticalLeft + traX,verticalTop + traY,verticalRight + traX,verticalBottom + traY);mVerticalDividerDrawable.draw(c);} else {if (!isNotShowGridEndDivider || (!isGridItemLayoutLastColumn && ((mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridLayoutLastNum) || mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID))) {int verticalLeft=childView.getRight() + childViewParams.rightMargin;int verticalTop=childView.getTop() - childViewParams.topMargin;int verticalRight=verticalLeft + mVerticalDividerDrawableHeight;int verticalBottom=childView.getBottom() + childViewParams.bottomMargin;if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID && !isGridItemLayoutLastRow) {verticalBottom+=mHorizontalDividerDrawableHeight;}mVerticalDividerDrawable.setBounds(verticalLeft + traX,verticalTop + traY,verticalRight + traX,verticalBottom + traY);mVerticalDividerDrawable.draw(c);}if ((!isHeaderDividersEnabled || headersCount == 0) && isGridItemLayoutFirstRow) {continue;}int horizontalLeft;int horizontalRight;if (isGridItemLayoutFirstRow) {if (position - headersCount == 0) {horizontalLeft=parent.getLeft();horizontalRight=parent.getRight();} else {continue;}} else if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && isGridItemLayoutLastRow) {if (isGridItemLayoutFirstColumn(position,headersCount,childView)) {horizontalLeft=parent.getLeft() + mItemViewBothSidesMargin;horizontalRight=parent.getRight() - mItemViewBothSidesMargin;} else {continue;}} else {horizontalLeft=childView.getLeft() - childViewParams.leftMargin;horizontalRight=childView.getRight() + childViewParams.rightMargin;if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridItemLayoutLastColumn) {horizontalRight+=mVerticalDividerDrawableHeight;}}int horizontalTop=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight;int horizontalBottom=horizontalTop + mHorizontalDividerDrawableHeight;mHorizontalDividerDrawable.setBounds(horizontalLeft + traX,horizontalTop + traY,horizontalRight + traX,horizontalBottom + traY);mHorizontalDividerDrawable.draw(c);}break;}}}  }
class C{  public double yIntercept(){  return b;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MDocType[");  sb.append(get_ID()).append("-").append(getName()).append(",DocNoSequence_ID=").append(getDocNoSequence_ID()).append("]");  return sb.toString();}  }
class C{  public UserAgent(String agentName,String emailAddress,String webAddress,String browserVersion,String crawlerVersion){  this.agentName=agentName;  this.emailAddress=emailAddress;  this.webAddress=webAddress;  this.browserVersion=browserVersion;  this.crawlerConfiguration=crawlerVersion == null ? "" : "/" + crawlerVersion;}  }
class C{  private void add(int col,GraphicalNode graphicalNode){  myGraphicalNodes.remove(graphicalNode);  if (nbCols - 1 < col) {    nbCols=col + 1;  }  int row=0;  while (isOccupied(row,col)) {    row++;  }  graphicalNode.row=row;  graphicalNode.col=col;  myGraphicalNodes.add(graphicalNode);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum < 2)   reportWrongNumberArgs();}  }
class C{  public static long[] toLongArray(Integer[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].longValue();  }  return result;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:37.740 -0500",hash_original_method="520E9D572328080C8A52E1417D8346F4",hash_generated_method="139E9284A654A258F94B9F29AED42E95") public MatrixCursor(String[] columnNames){  this(columnNames,16);}  }
class C{  protected List<Path> createAirfieldPaths(DrawContext dc){  List<Path> paths=new ArrayList<Path>();  List<Sector> sectors=this.polygon.getSectors(dc);  if (sectors == null) {    return Collections.emptyList();  }  Sector sector=sectors.get(0);  LatLon centroid=sector.getCentroid();  Angle distance=sector.getDeltaLon().divide(6);  LatLon p1=LatLon.greatCircleEndPosition(centroid,Angle.POS90,distance);  LatLon p2=LatLon.greatCircleEndPosition(centroid,Angle.NEG90,distance);  Path newPath=new Path(new Position(p1,0),new Position(p2,0));  this.configurePath(newPath);  paths.add(newPath);  p1=LatLon.greatCircleEndPosition(centroid,Angle.fromDegrees(50),distance);  p2=LatLon.greatCircleEndPosition(centroid,Angle.fromDegrees(-130),distance);  newPath=new Path(new Position(p1,0),new Position(p2,0));  this.configurePath(newPath);  paths.add(newPath);  return paths;}  }
class C{  public void reSize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.698 -0400",hash_original_method="6716C894A456D859682D2AB42908EF6B",hash_generated_method="98BB3A25E2A1A577EC358E8063919095") protected void finalize(){  if (mGrammar != 0) {    destroy();    throw new IllegalStateException("someone forgot to destroy Grammar");  }}  }
class C{  protected int calculateVisibleTickCount(){  double unit=getTickUnit().getSize();  Range range=getRange();  return (int)(Math.floor(range.getUpperBound() / unit) - Math.ceil(range.getLowerBound() / unit) + 1);}  }
class C{  protected IStatus checkSyntax(){  if (fConfigurationElement.getAttribute(ID) == null) {    String format=SearchMessages.SearchParticipant_error_noID;    String message=Messages.format(format,new String[]{fConfigurationElement.getDeclaringExtension().getUniqueIdentifier()});    return new Status(IStatus.ERROR,JavaPlugin.getPluginId(),0,message,null);  }  if (fConfigurationElement.getAttribute(NATURE) == null) {    String format=SearchMessages.SearchParticipant_error_noNature;    String message=Messages.format(format,new String[]{fConfigurationElement.getAttribute(ID)});    return new Status(IStatus.ERROR,JavaPlugin.getPluginId(),0,message,null);  }  if (fConfigurationElement.getAttribute(CLASS) == null) {    String format=SearchMessages.SearchParticipant_error_noClass;    String message=Messages.format(format,new String[]{fConfigurationElement.getAttribute(ID)});    return new Status(IStatus.ERROR,JavaPlugin.getPluginId(),0,message,null);  }  return Status.OK_STATUS;}  }
class C{  public boolean hasFetchTime(){  return fieldSetFlags()[2];}  }
class C{  private void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,int scale,int seriesIndex,Paint paint){  SimpleSeriesRenderer renderer=mRenderer.getSeriesRendererAt(seriesIndex);  if (renderer.isGradientEnabled()) {    float minY=(float)toScreenPoint(new double[]{0,renderer.getGradientStopValue()},scale)[1];    float maxY=(float)toScreenPoint(new double[]{0,renderer.getGradientStartValue()},scale)[1];    float gradientMinY=Math.max(minY,Math.min(yMin,yMax));    float gradientMaxY=Math.min(maxY,Math.max(yMin,yMax));    int gradientMinColor=renderer.getGradientStopColor();    int gradientMaxColor=renderer.getGradientStartColor();    int gradientStartColor=gradientMaxColor;    int gradientStopColor=gradientMinColor;    if (yMin < minY) {      paint.setColor(gradientMinColor);      canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(gradientMinY),paint);    } else {      gradientStopColor=getGradientPartialColor(gradientMinColor,gradientMaxColor,(maxY - gradientMinY) / (maxY - minY));    }    if (yMax > maxY) {      paint.setColor(gradientMaxColor);      canvas.drawRect(Math.round(xMin),Math.round(gradientMaxY),Math.round(xMax),Math.round(yMax),paint);    } else {      gradientStartColor=getGradientPartialColor(gradientMaxColor,gradientMinColor,(gradientMaxY - minY) / (maxY - minY));    }    GradientDrawable gradient=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{gradientStartColor,gradientStopColor});    gradient.setBounds(Math.round(xMin),Math.round(gradientMinY),Math.round(xMax),Math.round(gradientMaxY));    gradient.draw(canvas);  } else {    if (Math.abs(yMin - yMax) < 1) {      if (yMin < yMax) {        yMax=yMin + 1;      } else {        yMax=yMin - 1;      }    }    canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(yMax),paint);  }}  }
class C{  public boolean isDirty(){  return isDirty;}  }
class C{  private Object populate(InputNode node,Object result) throws Exception {  Map map=(Map)result;  while (true) {    InputNode next=node.getNext();    if (next == null) {      return map;    }    Object index=key.read(next);    Object item=value.read(next);    map.put(index,item);  }}  }
class C{  public void stop(){  mRunning=false;  mStop=true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  HistoryItem(Context context){  this(context,true);}  }
class C{  private final void _writeNonSharedString(final String text,final int len) throws IOException, JsonGenerationException {  if (len > _charBufferLength) {    _writeByte(TOKEN_BYTE_LONG_STRING_UNICODE);    _slowUTF8Encode(text);    _writeByte(BYTE_MARKER_END_OF_STRING);    return;  }  text.getChars(0,len,_charBuffer,0);  int maxLen=len + len + len+ 2;  if (maxLen > _outputBuffer.length) {    _writeByte(TOKEN_BYTE_LONG_STRING_UNICODE);    _mediumUTF8Encode(_charBuffer,0,len);    _writeByte(BYTE_MARKER_END_OF_STRING);    return;  }  if ((_outputTail + maxLen) >= _outputEnd) {    _flushBuffer();  }  int origOffset=_outputTail;  _writeByte(TOKEN_BYTE_LONG_STRING_ASCII);  int byteLen=_shortUTF8Encode(_charBuffer,0,len);  if (byteLen > len) {    _outputBuffer[origOffset]=TOKEN_BYTE_LONG_STRING_UNICODE;  }  _outputBuffer[_outputTail++]=BYTE_MARKER_END_OF_STRING;}  }
class C{  private void printValidateSchedule(){  TransitScheduleValidator.ValidationResult validationResult=TransitScheduleValidator.validateAll(schedule,network);  if (validationResult.isValid()) {    log.info("Schedule appears valid!");  } else {    log.warn("Schedule is NOT valid!");  }  if (validationResult.getErrors().size() > 0) {    log.info("Validation errors:");    for (    String e : validationResult.getErrors()) {      log.info(e);    }  }  if (validationResult.getWarnings().size() > 0) {    log.info("Validation warnings:");    for (    String w : validationResult.getWarnings()) {      log.info(w);    }  }}  }
class C{  public void jump(String jumpLabel) throws IOException {  print("jump",new String[]{"\"" + jumpLabel + "\""});}  }
class C{  private List<FileRecommendation> selectStorageHADomainMatchingVpool(VirtualPool vpool,URI vArray,List<Recommendation> poolRecommends,List<VirtualNAS> invalidNasServers){  List<URI> invalidPorts=getvNasStoragePortUris(invalidNasServers);  _log.debug("select matching StorageHADomain");  List<FileRecommendation> result=new ArrayList<FileRecommendation>();  for (  Recommendation recommendation : poolRecommends) {    FileRecommendation rec=new FileRecommendation(recommendation);    URI storageUri=recommendation.getSourceStorageSystem();    StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageUri);    if (storage.getSystemType().equals(Type.unity.toString())) {      continue;    }    if (!storage.getSystemType().equals(Type.netapp.toString()) && !storage.getSystemType().equals(Type.netappc.toString()) && !storage.getSystemType().equals(Type.vnxe.toString())&& !storage.getSystemType().equals(Type.vnxfile.toString())&& !storage.getSystemType().equals(Type.datadomain.toString())) {      result.add(rec);      continue;    }    List<StoragePort> portList=getStorageSystemPortsInVarray(storageUri,vArray);    if (portList == null || portList.isEmpty()) {      _log.info("No valid storage port found from the virtual array: " + vArray);      continue;    }    List<URI> storagePorts=new ArrayList<URI>();    boolean foundValidPort=false;    for (    StoragePort port : portList) {      if (invalidPorts.contains(port.getId())) {        _log.debug("Storage port {} belongs to invalid vNas server ",port.getIpAddress());        continue;      }      foundValidPort=true;      _log.debug("Looking for port {}",port.getLabel());      URI haDomainUri=port.getStorageHADomain();      if ((haDomainUri == null) && (!storage.getSystemType().equals(Type.datadomain.toString()))) {        _log.info("No StorageHADomain URI for port {}",port.getLabel());        continue;      }      StorageHADomain haDomain=null;      if (haDomainUri != null) {        haDomain=_dbClient.queryObject(StorageHADomain.class,haDomainUri);      }      if (haDomain != null) {        StringSet protocols=haDomain.getFileSharingProtocols();        StringSet vpoolProtocols=vpool.getProtocols();        if (protocols != null && protocols.containsAll(vpoolProtocols)) {          _log.info("Found the StorageHADomain {} for recommended storagepool: {}",haDomain.getName(),recommendation.getSourceStoragePool());          storagePorts.add(port.getId());        }      } else       if (storage.getSystemType().equals(Type.datadomain.toString())) {        storagePorts.add(port.getId());      } else {        _log.error("No StorageHADomain for port {}",port.getIpAddress());      }    }    if (foundValidPort) {      Collections.shuffle(storagePorts);      rec.setStoragePorts(storagePorts);      result.add(rec);    } else {      _log.info("No valid storage port found from the storage system : " + storageUri + ", All ports belongs to invalid vNas ");    }  }  return result;}  }
class C{  public RegisterOperand makeTemp(RegisterOperand template){  RegisterOperand temp=new RegisterOperand(getReg(template),template.getType());  temp.addFlags(template.getFlags());  return temp;}  }
class C{  public void run(){  while (true) {    try {      handleIncomingData();    } catch (    java.io.IOException e) {      log.warn("run: Exception: " + e.toString());    }  }}  }
class C{  public boolean isComplete(){  for (int i=0; i < getPageCount(); i++) {    if (pages.get(i) instanceof BasicFormPage) {      BasicFormPage page=(BasicFormPage)pages.get(i);      if (!page.isComplete()) {        setActivePage(page.getId());        return false;      }    }  }  return true;}  }
class C{  private DalvCode translateAndGetResult(){  pickOrder();  outputInstructions();  StdCatchBuilder catches=new StdCatchBuilder(method,order,addresses);  return new DalvCode(positionInfo,output.getFinisher(),catches);}  }
class C{  public NamespaceEntity createNamespaceEntity(){  return createNamespaceEntity("NamespaceTest" + AbstractDaoTest.getRandomSuffix());}  }
class C{  @Override public void transmit(int event){  if (!server.isConnected(event))   return;  if (DEBUG) {    Log.write("CONNECTED\n");    Log.write(myClass);    Log.write(".send: numTiles=",allTileNum);    Log.writeln(", control.length=",control.length);    Log.flush();  }  setupSummaries();  setupControlInfo();  Offset size=subspace.getEnd().diff(subspace.getStart());  setSpaceInfo(size);  send(event,allTileNum);  if (VM.VERIFY_ASSERTIONS) {    lastAddress=Address.zero();    lastSize=0;  }}  }
class C{  public Job createBuildJob(final Iterable<IProject> toBuild,final Iterable<IProject> toClean){  return new ExternalLibraryBuildJob(builderHelper,toBuild,toClean);}  }
class C{  public static String nullToEmpty(@Nullable CharSequence string){  return string == null ? EMPTY : string.toString();}  }
class C{  public final void moveAndCleanup() throws Exception {  String path=conf.getConfigurationTargetPath();  Path targetPath=Paths.get(path,timestamp);  Path targetConf=Paths.get(path,SIGNED_DIRECTORY_NAME);  Files.createDirectories(targetPath.getParent());  log.info("Moving '{}' to '{}'",tempDirPath,targetPath);  Files.move(tempDirPath,targetPath);  log.info("Moving '{}' to '{}'",tempConfPath,targetConf);  Files.move(tempConfPath,targetConf,StandardCopyOption.ATOMIC_MOVE);  FileUtils.deleteDirectory(tempDirPath.toFile());}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public DoubleMatrix1D like(int size){  return new DenseDoubleMatrix1D(size);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.130 -0500",hash_original_method="AFAE197FB851905387419AFB7B96BE3D",hash_generated_method="021B766E7D2435C8BD1B563E57AFC62F") private static synchronized void readTagsFile(){  if (sTagCodes != null && sTagNames != null)   return;  sTagCodes=new HashMap<String,Integer>();  sTagNames=new HashMap<Integer,String>();  Pattern comment=Pattern.compile(COMMENT_PATTERN);  Pattern tag=Pattern.compile(TAG_PATTERN);  BufferedReader reader=null;  String line;  try {    reader=new BufferedReader(new FileReader(TAGS_FILE),256);    while ((line=reader.readLine()) != null) {      if (comment.matcher(line).matches())       continue;      Matcher m=tag.matcher(line);      if (!m.matches()) {        Log.wtf(TAG,"Bad entry in " + TAGS_FILE + ": "+ line);        continue;      }      try {        int num=Integer.parseInt(m.group(1));        String name=m.group(2);        sTagCodes.put(name,num);        sTagNames.put(num,name);      } catch (      NumberFormatException e) {        Log.wtf(TAG,"Error in " + TAGS_FILE + ": "+ line,e);      }    }  } catch (  IOException e) {    Log.wtf(TAG,"Error reading " + TAGS_FILE,e);  } finally {    try {      if (reader != null)       reader.close();    } catch (    IOException e) {    }  }}  }
class C{  private static boolean isNalStartCode(byte[] data,int index){  if (data.length - index <= NAL_START_CODE.length) {    return false;  }  for (int j=0; j < NAL_START_CODE.length; j++) {    if (data[index + j] != NAL_START_CODE[j]) {      return false;    }  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String propV=getString(stack);  String propN=getString(stack);  Playlist p=getPlaylist(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr())) {    p.setProperty(propN,propV);    sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  }  return null;}  }
class C{  public static ObjectNotFoundException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ObjectNotFoundException object=new ObjectNotFoundException();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement())       reader.next();      return object;    }    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ObjectNotFoundException").equals(reader.getName())) {          nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");          if ("true".equals(nillableValue) || "1".equals(nillableValue)) {            object.setObjectNotFoundException(null);            reader.next();          } else {            object.setObjectNotFoundException(DomainObjectExceptionBean.Factory.parse(reader));          }        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  double[] result;  initModel();  result=m_Model.distributionForInstance(instance);  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.395 -0500",hash_original_method="5835A4879F5A1904E0EE047AD8542D67",hash_generated_method="955E0A89025059E0BD16C48CDA98CC23") private void parseParameter(String parameter){  if (parameter != null) {    int i=parameter.indexOf('=');    if (i >= 0) {      String token=parameter.substring(0,i).trim();      String value=trimDoubleQuotesIfAny(parameter.substring(i + 1).trim());      if (HttpLog.LOGV) {        HttpLog.v("HttpAuthHeader.parseParameter():" + " token: " + token + " value: "+ value);      }      if (token.equalsIgnoreCase(REALM_TOKEN)) {        mRealm=value;      } else {        if (mScheme == DIGEST) {          parseParameter(token,value);        }      }    }  }}  }
class C{  public void enqueue(){  long current_time=System.nanoTime();  long previous=Math.max(next,current_time - historySize);  next=previous + delay;  avail=Math.max(next,current_time);  throttlers.add(this);}  }
class C{  public String toString(){  String result;  try {    result="production [" + index() + "]: ";    result+=((lhs() != null) ? lhs().toString() : "$$NULL-LHS$$");    result+=" :: = ";    for (int i=0; i < rhs_length(); i++)     result+=rhs(i) + " ";    result+=";";    if (action() != null && action().code_string() != null)     result+=" {" + action().code_string() + "}";    if (nullable_known())     if (nullable())     result+="[NULLABLE]"; else     result+="[NOT NULLABLE]";  } catch (  internal_error e) {    e.crash();    result=null;  }  return result;}  }
class C{  private void configureBounds(boolean changed){  if (mDrawable == null || !mHaveLayout) {    return;  }  final int dwidth=mDrawable.getIntrinsicWidth();  final int dheight=mDrawable.getIntrinsicHeight();  final int vwidth=getWidth();  final int vheight=getHeight();  final boolean fits=(dwidth < 0 || vwidth == dwidth) && (dheight < 0 || vheight == dheight);  mDrawable.setBounds(0,0,dwidth,dheight);  if (changed || (mMinScale == 0 && mDrawable != null && mHaveLayout)) {    generateMatrix();    generateScale();  }  if (fits || mMatrix.isIdentity()) {    mDrawMatrix=null;  } else {    mDrawMatrix=mMatrix;  }}  }
class C{  public boolean deleteJob(JobKey jobKey) throws SchedulerException {  return sched.deleteJob(jobKey);}  }
class C{  public static boolean isTime(String time){  if (isEmpty(time))   return defaultEmptyOK;  String hour;  String minute;  String second;  int timeColon1=time.indexOf(":");  int timeColon2=time.lastIndexOf(":");  if (timeColon1 <= 0)   return false;  hour=time.substring(0,timeColon1);  if (timeColon1 == timeColon2) {    minute=time.substring(timeColon1 + 1);    second="0";  } else {    minute=time.substring(timeColon1 + 1,timeColon2);    second=time.substring(timeColon2 + 1);  }  return isTime(hour,minute,second);}  }
class C{  public void readTrnData(String dataFile){  if (cpStr2Int != null) {    cpStr2Int.clear();  } else {    cpStr2Int=new HashMap();  }  if (cpInt2Str != null) {    cpInt2Str.clear();  } else {    cpInt2Str=new HashMap();  }  if (lbStr2Int != null) {    lbStr2Int.clear();  } else {    lbStr2Int=new HashMap();  }  if (lbInt2Str != null) {    lbInt2Str.clear();  } else {    lbInt2Str=new HashMap();  }  if (trnData != null) {    trnData.clear();  } else {    trnData=new ArrayList();  }  BufferedReader fin=null;  try {    fin=new BufferedReader(new InputStreamReader(new FileInputStream(dataFile),"UTF-8"));    System.out.println("Reading training data ...");    String line;    while ((line=fin.readLine()) != null) {      StringTokenizer strTok=new StringTokenizer(line," \t\r\n");      int len=strTok.countTokens();      if (len <= 1) {        continue;      }      List strCps=new ArrayList();      for (int i=0; i < len - 1; i++) {        strCps.add(strTok.nextToken());      }      String labelStr=strTok.nextToken();      List intCps=new ArrayList();      for (int i=0; i < strCps.size(); i++) {        String cpStr=(String)strCps.get(i);        Integer cpInt=(Integer)cpStr2Int.get(cpStr);        if (cpInt != null) {          intCps.add(cpInt);        } else {          intCps.add(new Integer(cpStr2Int.size()));          cpStr2Int.put(cpStr,new Integer(cpStr2Int.size()));          cpInt2Str.put(new Integer(cpInt2Str.size()),cpStr);        }      }      Integer labelInt=(Integer)lbStr2Int.get(labelStr);      if (labelInt == null) {        labelInt=new Integer(lbStr2Int.size());        lbStr2Int.put(labelStr,labelInt);        lbInt2Str.put(labelInt,labelStr);      }      int[] cps=new int[intCps.size()];      for (int i=0; i < cps.length; i++) {        cps[i]=((Integer)intCps.get(i)).intValue();      }      Observation obsr=new Observation(labelInt.intValue(),cps);      trnData.add(obsr);    }    System.out.println("Reading " + Integer.toString(trnData.size()) + " training data examples completed!");  } catch (  IOException e) {    System.out.println(e.toString());    return;  }  option.numCps=cpStr2Int.size();  option.numLabels=lbStr2Int.size();  option.numTrainExps=trnData.size();}  }
class C{  @Deprecated public void unsetResourceApplicationDataEntry(String guid,String key,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"unsetResourceApplicationDataEntry",mAuthenticationToken,guid,key);}  }
class C{  @Override final public long rangeCountExact(final byte[] fromKey,final byte[] toKey){  final LongAggregator handler=new LongAggregator();  final RangeCountProcedure proc=new RangeCountProcedure(true,false,fromKey,toKey);  submit(fromKey,toKey,proc,handler);  return handler.getResult();}  }
class C{  public static String toJvmName(String classname){  return classname.replace('.','/');}  }
class C{  public RestoreSnapshotRequest ignoreIndexSettings(List<String> ignoreIndexSettings){  this.ignoreIndexSettings=ignoreIndexSettings.toArray(new String[ignoreIndexSettings.size()]);  return this;}  }
class C{  void scheduleConsolidateStoreNow(){  this.storeConsolidateTask.reschedule(0,TimeUnit.MILLISECONDS);}  }
class C{  protected boolean FunctionCall() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (lookahead(':',1)) {    appendOp(4,OpCodes.OP_EXTFUNCTION);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_queueMark - 1);    nextToken();    consumeExpected(':');    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 2,m_queueMark - 1);    nextToken();  } else {    int funcTok=getFunctionToken(m_token);    if (-1 == funcTok) {      error(XPATHErrorResources.ER_COULDNOT_FIND_FUNCTION,new Object[]{m_token});    }switch (funcTok) {case OpCodes.NODETYPE_PI:case OpCodes.NODETYPE_COMMENT:case OpCodes.NODETYPE_TEXT:case OpCodes.NODETYPE_NODE:      return false;default :    appendOp(3,OpCodes.OP_FUNCTION);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,funcTok);}nextToken();}consumeExpected('(');while (!tokenIs(')') && m_token != null) {if (tokenIs(',')) {error(XPATHErrorResources.ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG,null);}Argument();if (!tokenIs(')')) {consumeExpected(',');if (tokenIs(')')) {  error(XPATHErrorResources.ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG,null);}}}consumeExpected(')');m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);return true;}  }
class C{  public java.lang.StringBuilder insert(int offset,int i){  return null;}  }
class C{  protected Problem createProblem(MapNode[] pNodes,OsmMap map,MapWayFilter wayFilter,boolean ignoreOneways,int waySelection){  return new RouteFindingProblem(pNodes[0],pNodes[1],wayFilter,ignoreOneways);}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  public static void clearCache(Context context){  cleanExternalCache(context);  cleanInternalCache(context);}  }
class C{  public void filter(CoordinateSequence seq,int i){  transform(seq,i);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  String baseFileHeader=null;  int row, col;  double x, y, z;  double east, west, north, south;  int i, j;  int progress=0;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  double noData=-32768;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  baseFileHeader=args[3];  if (args[4].toLowerCase().contains("double")) {    dataType=WhiteboxRaster.DataType.DOUBLE;  } else   if (args[4].toLowerCase().contains("float")) {    dataType=WhiteboxRaster.DataType.FLOAT;  } else   if (args[4].toLowerCase().contains("int")) {    dataType=WhiteboxRaster.DataType.INTEGER;  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    WhiteboxRaster baseImage=new WhiteboxRaster(baseFileHeader,"r");    double resolutionX=baseImage.getCellSizeX();    double resolutionY=baseImage.getCellSizeY();    noData=baseImage.getNoDataValue();    east=baseImage.getEast();    west=baseImage.getWest();    north=baseImage.getNorth();    south=baseImage.getSouth();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,noData);    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        j=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((j > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            row=(int)(Math.floor((y - south) / resolutionY));            col=(int)(Math.floor((x - west) / resolutionX));            output.setValue(row,col,z);          }          j++;        }        in.close();        br.close();      } catch (      java.io.IOException e) {        myHost.showFeedback("An error has occurred during operation. See log file for details.");        myHost.logException("Error in " + getDescriptiveName(),e);      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean removeLocalEventListener(GridLocalEventListener lsnr,@Nullable int... types){  assert lsnr != null;  boolean found=false;  if (F.isEmpty(types)) {    for (    Set<GridLocalEventListener> set : lsnrs.values())     if (set.remove(lsnr))     found=true;  } else {    assert types != null;    for (    int type : types) {      Set<GridLocalEventListener> set=lsnrs.get(type);      if (set != null && set.remove(lsnr))       found=true;    }  }  if (lsnr instanceof UserListenerWrapper) {    IgnitePredicate p=((UserListenerWrapper)lsnr).listener();    if (p instanceof PlatformEventFilterListener)     ((PlatformEventFilterListener)p).onClose();  }  return found;}  }
class C{  public void updateBinaryStream(int columnIndex,java.io.InputStream x,long length) throws SQLException {}  }
class C{  private boolean scan(){  if (btAdapter.startLeScan(mCallback)) {    mScanning=true;    Log.i(TAG,"BLE scan started successfully");    if (mHandler.postDelayed(scanTimeoutCallback,scanTimeout * 1000)) {      Log.i(TAG,String.format("Cancelling discovery in %d seconds",scanTimeout));    } else {      Log.e(TAG,"Failed to schedule discovery complete callback!");    }    return true;  } else {    Log.i(TAG,"BLE scan failed!");    return false;  }}  }
class C{  public Measurement convert(Reading r,Measurement last){  if (last != null) {    this.Xt=last.getX();    this.Yt=last.getY();    this.Zt=last.getZ();  }  if (this.Xt > 9.E99) {    this.Xt=0;  }  if (this.Yt > 9.E99) {    this.Yt=0;  }  if (this.Zt > 9.E99) {    this.Zt=0;  }  return convert(r);}  }
class C{  public DoubleMatrix2D pow(DoubleMatrix2D A,int p){  Blas blas=SmpBlas.smpBlas;  Property.DEFAULT.checkSquare(A);  if (p < 0) {    A=inverse(A);    p=-p;  }  if (p == 0)   return DoubleFactory2D.dense.identity(A.rows());  DoubleMatrix2D T=A.like();  if (p == 1)   return T.assign(A);  if (p == 2) {    blas.dgemm(false,false,1,A,A,0,T);    return T;  }  int k=cern.colt.bitvector.QuickBitVector.mostSignificantBit(p);  int i=0;  while (i <= k && (p & (1 << i)) == 0) {    blas.dgemm(false,false,1,A,A,0,T);    DoubleMatrix2D swap=A;    A=T;    T=swap;    i++;  }  DoubleMatrix2D B=A.copy();  i++;  for (; i <= k; i++) {    blas.dgemm(false,false,1,A,A,0,T);    DoubleMatrix2D swap=A;    A=T;    T=swap;    if ((p & (1 << i)) != 0) {      blas.dgemm(false,false,1,B,A,0,T);      swap=B;      B=T;      T=swap;    }  }  return B;}  }
class C{  private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,-1);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillDown(mFirstPosition,nextTop);}  }
class C{  public byte[] hget(final byte[] key,final byte[] field){  checkIsInMulti();  client.hget(key,field);  return client.getBinaryBulkReply();}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),tokenized,1000 * RANDOM_MULTIPLIER);}  }
class C{  public CronCalendar(Calendar baseCalendar,String expression,TimeZone timeZone) throws ParseException {  super(baseCalendar);  this.cronExpression=new CronExpression(expression);  this.cronExpression.setTimeZone(timeZone);}  }
class C{  public void maybeComputeGenClasses(String pkgName){  if (Config.v().apk != null) {    if (pkgName != null) {      String[] clzNames={"BuildConfig","R"};      for (      String clzName : clzNames) {        clzName=pkgName + "." + clzName;        srcClasses.remove(clzName);        genClasses.add(clzName);      }    }  }}  }
class C{  public static void addPortMappings(){  if (SB == null) {    return;  }  UPnPMapping mapping;  for (  final Entry<UPnPMappingType,UPnPMapping> entry : MAPPINGS.entrySet()) {    mapping=entry.getValue();    addPortMapping(entry.getKey(),mapping,SB.getConfigInt(mapping.getConfigPortKey(),0));  }  SB.setConnectedViaUpnp(true);}  }
class C{  protected void onOffsetChild(final View child,final int position,final boolean flowDown,final int childrenLeft,final int childTop){  child.offsetLeftAndRight(childrenLeft - child.getLeft());  child.offsetTopAndBottom(childTop - child.getTop());}  }
class C{  public String toString(){  StringBuffer buff=new StringBuffer("Component id=").append(getComponentID());  buff.append(" parent stream=").append(getParentStream().getName());  int localCandidatesCount=getLocalCandidateCount();  if (localCandidatesCount > 0) {    buff.append("\n").append(localCandidatesCount).append(" Local candidates:");    buff.append("\ndefault candidate: ").append(getDefaultCandidate());synchronized (localCandidates) {      for (      Candidate<?> cand : localCandidates) {        buff.append('\n').append(cand.toString());      }    }  } else {    buff.append("\nno local candidates.");  }  int remoteCandidatesCount=getRemoteCandidateCount();  if (remoteCandidatesCount > 0) {    buff.append("\n").append(remoteCandidatesCount).append(" Remote candidates:");    buff.append("\ndefault remote candidate: ").append(getDefaultRemoteCandidate());synchronized (remoteCandidates) {      for (      RemoteCandidate cand : remoteCandidates) {        buff.append("\n").append(cand);      }    }  } else {    buff.append("\nno remote candidates.");  }  return buff.toString();}  }
class C{  private void printToHost(String host,int port,byte[] cmds) throws IOException {  log.debug("Printing to host {}:{}",host,port);  try (Socket socket=new Socket(host,port);DataOutputStream out=new DataOutputStream(socket.getOutputStream())){    out.write(cmds);  } }  }
class C{  public static String copyDirective(HashMap<String,String> src,HashMap<String,String> dst,String directive){  String directiveValue=src.get(directive);  if (directiveValue != null) {    dst.put(directive,directiveValue);  }  return directiveValue;}  }
class C{  @Override protected void generateAndDisplayReport(String name,String content){  XpectBugReportUtil.displayGeneratedGitHubIssueConsole(name,content);}  }
class C{  @Deprecated public void findNotesMetadata(NoteFilter filter,int offset,int maxNotes,NotesMetadataResultSpec resultSpec,OnClientCallback<NotesMetadataList> callback){  AsyncReflector.execute(mClient,callback,"findNotesMetadata",mAuthenticationToken,filter,offset,maxNotes,resultSpec);}  }
class C{  @Override public void handleMessage(final Message message){  try {    if (InterceptorState.SERVER_OUT.isActive(message)) {      HttpServletRequest req=(HttpServletRequest)message.getExchange().getInMessage().get(AbstractHTTPDestination.HTTP_REQUEST);      if (req.getLocalPort() == Common.DEFAULT_PUBLIC_SECURE_PORT) {        HttpHeaders headers=new HttpHeadersImpl(message.getExchange().getInMessage());        String subutaiHeader=headers.getHeaderString(Common.SUBUTAI_HTTP_HEADER);        String path=req.getRequestURI();        if (path.startsWith("/rest/v1/peer")) {          handlePeerMessage(subutaiHeader,message);        } else {          final String prefix="/rest/v1/env";          if (path.startsWith(prefix)) {            String s=path.substring(prefix.length() + 1);            String environmentId=s.substring(0,s.indexOf("/"));            handleEnvironmentMessage(subutaiHeader,environmentId,message);          }        }      }    }  } catch (  Exception e) {    throw new Fault(e);  }}  }
class C{  @EventHandler(ignoreCancelled=true) public void onPlayerPickupExperience(PlayerPickupExperienceEvent event){  if (!canInteract(event.getPlayer())) {    event.setCancelled(true);  }}  }
class C{  public static float scale(float v,float vMin,float vMax,float pMin,float pMax){  return (pMax - pMin) * (v - vMin) / (vMax - vMin) + pMin;}  }
class C{  public void addAttribute(String alias,String typeUri,boolean required,int count) throws MessageException {  if (alias.indexOf(',') > -1 || alias.indexOf('.') > -1 || alias.indexOf(':') > -1 || alias.indexOf('\n') > -1)   throw new MessageException("Characters [.,:\\n] are not allowed in attribute aliases: " + alias);  _parameters.set(new Parameter("type." + alias,typeUri));  String level=required ? "required" : "if_available";  Parameter levelParam=_parameters.getParameter(level);  Parameter newParam;  if (levelParam == null) {    newParam=new Parameter(level,alias);  } else {    newParam=new Parameter(level,levelParam.getValue() + "," + alias);    _parameters.removeParameters(level);  }  _parameters.set(newParam);  setCount(alias,count);  if (DEBUG)   _log.debug("Added new attribute to fetch request; type: " + typeUri + " alias: "+ alias+ " count: "+ count+ " required: "+ required);}  }
class C{  private int neighbors(TicTacToeBoard board){  int count=0;  for (int cd=-1; cd <= 1; cd++) {    for (int rd=-1; rd <= 1; rd++) {      if ((cd == 0) && (rd == 0)) {        continue;      }      int tcol=col + cd;      int trow=row + rd;      if ((0 <= tcol) && (tcol < board.numColumns()) && (0 <= trow)&& (trow < board.numRows())) {        if (board.get(tcol,trow) == player.getMark()) {          count++;        }      }    }  }  return count;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public ElementType pop(){  return isEmpty() ? null : stack.remove(stack.size() - 1);}  }
class C{  private void recomputeNumBuckets(){  Calendar calendar=Calendar.getInstance();  long now=calendar.getTimeInMillis();  startOfBucketsInMillis=now - spanTimeInMillis;  expiryTimeInMillis=startOfBucketsInMillis;  endOBucketsInMillis=now;  noOfBuckets=(int)Math.ceil((now - startOfBucketsInMillis) / (bucketSpanInMillis * 1.0));  buckets=(Bucket<T>[])Array.newInstance(Bucket.class,noOfBuckets);}  }
class C{  public long insert(String table,ContentValues values){  try {    openDB();    return mSQLiteDatabase.insertOrThrow(table,null,values);  } catch (  Exception ex) {    ex.printStackTrace();    return -1;  }}  }
class C{  private void putFieldHelper(Instruction s,BasicBlock b){  LocationOperand locOp=PutField.getLocation(s);  FieldReference field=locOp.getFieldRef();  registerUse(s,field);  registerDef(s,b,field);}  }
class C{  public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public StringBuffer append(float f){  RealToString.getInstance().appendFloat(this,f);  return this;}  }
class C{  public BigInteger calculateMessage(){  DHKeyPairGenerator dhGen=new DHKeyPairGenerator();  dhGen.init(new DHKeyGenerationParameters(random,dhParams));  AsymmetricCipherKeyPair dhPair=dhGen.generateKeyPair();  this.privateValue=((DHPrivateKeyParameters)dhPair.getPrivate()).getX();  return ((DHPublicKeyParameters)dhPair.getPublic()).getY();}  }
class C{  private int find(E[] array,E element){  int min=0;  int max=array.length - 1;  while (max >= min) {    int mid=midpoint(min,max);    int compare=comparator.compare(array[mid],element);    if (0 == compare) {      return mid;    }    min=(compare < 0) ? mid + 1 : min;    max=(compare > 0) ? mid - 1 : max;  }  return -1;}  }
class C{  public void selectOperators(List<Operator> ops){  ops.add(getOperator(TraitData.TRAIT_SPECIES + "." + POP_MEAN));  if (options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_BIRTH_DEATH) {    ops.add(getOperator(TraitData.TRAIT_SPECIES + "." + BirthDeathModelParser.MEAN_GROWTH_RATE_PARAM_NAME));    ops.add(getOperator(TraitData.TRAIT_SPECIES + "." + BirthDeathModelParser.RELATIVE_DEATH_RATE_PARAM_NAME));  } else   if (options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_YULE || options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_YULE_CALIBRATION) {    ops.add(getOperator(TraitData.TRAIT_SPECIES + "." + YuleModelParser.YULE+ "."+ YuleModelParser.BIRTH_RATE));  }  ops.add(getOperator(SpeciesTreeModelParser.SPECIES_TREE + "." + Generator.SPLIT_POPS));  ops.add(getOperator(TraitData.TRAIT_SPECIES + "." + TreeNodeSlideParser.TREE_NODE_REHEIGHT));}  }
class C{  public String run(){  String result;  Instances dataset;  List<EvaluationStatistics> stats;  boolean incremental;  debug("pre: run");  result=null;  m_Running=true;  incremental=(m_StatisticsHandler instanceof IncrementalEvaluationStatisticsHandler) && (((IncrementalEvaluationStatisticsHandler)m_StatisticsHandler).supportsIncrementalUpdate());  debug("Incremental statistics? " + incremental);  notifyExecutionStageListeners(ExecutionStageEvent.Stage.RUNNING);  while (m_DatasetProvider.hasNext()) {    debug("pre: next-dataset");    dataset=m_DatasetProvider.next();    debug("post: next-dataset");    if (dataset == null) {      result="Failed to obtain next dataset!";      log(result);      m_Running=false;      break;    }    log("Using dataset: " + dataset.relationName());    for (    MultiLabelClassifier classifier : m_Classifiers) {      if (incremental) {        if (!((IncrementalEvaluationStatisticsHandler)m_StatisticsHandler).requires(classifier,dataset)) {          log("Already present, skipping: " + Utils.toCommandLine(classifier) + " --> "+ dataset.relationName());          List<EvaluationStatistics> priorStats=((IncrementalEvaluationStatisticsHandler)m_StatisticsHandler).retrieve(classifier,dataset);          m_Statistics.addAll(priorStats);          notifyStatisticsNotificationListeners(priorStats);          continue;        }      }      try {        classifier=(MultiLabelClassifier)AbstractClassifier.makeCopy(classifier);      } catch (      Exception e) {        result=handleException("Failed to create copy of classifier: " + classifier.getClass().getName(),e);        log(result);        m_Running=false;        break;      }      if (m_Running && !m_Stopping) {        notifyIterationNotificationListeners(classifier,dataset);        log("Using classifier: " + OptionUtils.toCommandLine(classifier));        debug("pre: evaluator init");        result=m_Evaluator.initialize();        debug("post: evaluator init");        if (result != null) {          m_Running=false;          break;        }        try {          debug("pre: evaluator evaluate");          stats=m_Evaluator.evaluate(classifier,dataset);          debug("post: evaluator evaluate");        } catch (        Exception e) {          result=handleException("Failed to evaluate dataset '" + dataset.relationName() + "' with classifier: "+ Utils.toCommandLine(classifier),e);          log(result);          m_Running=false;          break;        }        if (stats != null) {          m_Statistics.addAll(stats);          if (incremental)           ((IncrementalEvaluationStatisticsHandler)m_StatisticsHandler).append(stats);          notifyStatisticsNotificationListeners(stats);        }      }      if (!m_Running || m_Stopping)       break;    }    if (!m_Running || m_Stopping)     break;  }  if (m_Running && !m_Stopping) {    if (!incremental)     m_StatisticsHandler.write(m_Statistics);  }  if (!m_Running) {    if (result == null)     result="Experiment interrupted!"; else     result="Experiment interrupted: " + result;  }  if (result != null)   log(result);  m_Running=false;  m_Stopping=false;  debug("post: run");  return result;}  }
class C{  public static void resolveFunction(final AbstractSQLProvider provider,final INaviFunction source,final INaviFunction target) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00444: Provider argument can not be null");  Preconditions.checkNotNull(source,"IE00445: Source argument can not be null");  Preconditions.checkArgument(source.inSameDatabase(provider),"IE00446: Source is not part of this database");  if ((target != null) && !target.inSameDatabase(provider)) {    throw new IllegalArgumentException("IE00447: Target is not part of this database");  }  final Integer parentModuleId=target == null ? null : target.getModule().getConfiguration().getId();  final BigInteger parentModuleAddress=target == null ? null : target.getAddress().toBigInteger();  final String query="UPDATE " + CTableNames.FUNCTIONS_TABLE + " SET parent_module_id = ?, "+ " parent_module_function = ? WHERE module_id = ? AND address = ?";  try (PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query)){    if (parentModuleId != null) {      statement.setInt(1,parentModuleId);    } else {      statement.setNull(1,Types.INTEGER);    }    if (parentModuleAddress != null) {      statement.setObject(2,parentModuleAddress,Types.BIGINT);    } else {      statement.setNull(2,Types.BIGINT);    }    statement.setInt(3,source.getModule().getConfiguration().getId());    statement.setObject(4,source.getAddress().toBigInteger().toString(),Types.BIGINT);    statement.execute();  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public LMSIterative(Trainable network){  super(network);}  }
class C{  private IgfsByteDelimiterRecordResolver resolver(byte[]... delims){  return new IgfsByteDelimiterRecordResolver(delims);}  }
class C{  public JSONArray(String string) throws JSONException {  this(new JSONTokener(string));}  }
class C{  public static boolean vPoolSpecifiesSRDF(final VirtualPool virtualPool){  if (virtualPool.getProtectionRemoteCopySettings() == null || virtualPool.getProtectionRemoteCopySettings().size() == 0) {    return false;  }  return true;}  }
class C{  public XYCrosshairState(){}  }
class C{  public MultinomialNaiveBayes(double smoothing){  setSmoothing(smoothing);  setEpochs(1);}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  private void buttonNextYearActionPerformed(ActionEvent e){  try {    drawCalendar(displayedYearMonth.plusYears(1));  } catch (  Exception ex) {  }}  }
class C{  public Result run(Request request){  return run(request,new JUnitCore());}  }
class C{  public int reverseBitsOpt(int n){  byte[] bytes=new byte[4];  for (int i=0; i < 4; i++)   bytes[i]=(byte)((n >>> 8 * i) & 0xFF);  int res=0;  for (int i=0; i < 4; i++)   res=(res << 8) ^ reverseBytes(bytes[i]);  return res;}  }
class C{  public static SortedNumericDocValues singleton(NumericDocValues dv){  return new SingletonSortedNumericDocValues(dv);}  }
class C{  protected boolean handleSignature(boolean consumeFirstByte,boolean throwException) throws IOException, JsonParseException {  if (consumeFirstByte) {    ++_inputPtr;  }  if (_inputPtr >= _inputEnd) {    loadMoreGuaranteed();  }  if (_inputBuffer[_inputPtr] != SmileConstants.HEADER_BYTE_2) {    if (throwException) {      _reportError("Malformed content: signature not valid, starts with 0x3a but followed by 0x" + Integer.toHexString(_inputBuffer[_inputPtr]) + ", not 0x29");    }    return false;  }  if (++_inputPtr >= _inputEnd) {    loadMoreGuaranteed();  }  if (_inputBuffer[_inputPtr] != SmileConstants.HEADER_BYTE_3) {    if (throwException) {      _reportError("Malformed content: signature not valid, starts with 0x3a, 0x29, but followed by 0x" + Integer.toHexString(_inputBuffer[_inputPtr]) + ", not 0xA");    }    return false;  }  if (++_inputPtr >= _inputEnd) {    loadMoreGuaranteed();  }  int ch=_inputBuffer[_inputPtr++];  int versionBits=(ch >> 4) & 0x0F;  if (versionBits != SmileConstants.HEADER_VERSION_0) {    _reportError("Header version number bits (0x" + Integer.toHexString(versionBits) + ") indicate unrecognized version; only 0x0 handled by parser");  }  if ((ch & SmileConstants.HEADER_BIT_HAS_SHARED_NAMES) == 0) {    _seenNames=null;    _seenNameCount=-1;  }  if ((ch & SmileConstants.HEADER_BIT_HAS_SHARED_STRING_VALUES) != 0) {    _seenStringValues=NO_STRINGS;    _seenStringValueCount=0;  }  _mayContainRawBinary=((ch & SmileConstants.HEADER_BIT_HAS_RAW_BINARY) != 0);  return true;}  }
class C{  protected void computeInitialFeasibleSolution(){  for (int j=0; j < dim; j++) {    labelByJob[j]=Double.POSITIVE_INFINITY;  }  for (int w=0; w < dim; w++) {    for (int j=0; j < dim; j++) {      if (costMatrix[w][j] < labelByJob[j]) {        labelByJob[j]=costMatrix[w][j];      }    }  }}  }
class C{  float[] calculateSizeAndXyAmount(float mouseDeltaX,float mouseDeltaY,float rotation){  float mouseDragAngle=MathUtils.atan2(mouseDeltaY,mouseDeltaX) * MathUtils.radDeg;  float deltaA=rotation - mouseDragAngle;  float c=(float)Math.sqrt(mouseDeltaX * mouseDeltaX + mouseDeltaY * mouseDeltaY);  float a=c * MathUtils.cosDeg(deltaA);  float xComponent=a * MathUtils.cosDeg(rotation);  float yComponent=a * MathUtils.sinDeg(rotation);  return new float[]{a,xComponent,yComponent};}  }
class C{  public void insert(Key x){  if (n == pq.length - 1)   resize(2 * pq.length);  pq[++n]=x;  swim(n);  assert isMinHeap();}  }
class C{  public static int[] indexOfIgnoreCase(String s,String arr[]){  return indexOfIgnoreCase(s,arr,0);}  }
class C{  private CombinedDomainCategoryPlot createPlot(){  CategoryDataset dataset1=createDataset1();  NumberAxis rangeAxis1=new NumberAxis("Value");  rangeAxis1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  LineAndShapeRenderer renderer1=new LineAndShapeRenderer();  renderer1.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());  CategoryPlot subplot1=new CategoryPlot(dataset1,null,rangeAxis1,renderer1);  subplot1.setDomainGridlinesVisible(true);  CategoryDataset dataset2=createDataset2();  NumberAxis rangeAxis2=new NumberAxis("Value");  rangeAxis2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  BarRenderer renderer2=new BarRenderer();  renderer2.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());  CategoryPlot subplot2=new CategoryPlot(dataset2,null,rangeAxis2,renderer2);  subplot2.setDomainGridlinesVisible(true);  CategoryAxis domainAxis=new CategoryAxis("Category");  CombinedDomainCategoryPlot plot=new CombinedDomainCategoryPlot(domainAxis);  plot.add(subplot1,2);  plot.add(subplot2,1);  return plot;}  }
class C{  public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {  m_elemStack.pop();  m_currentNode=m_elemStack.isEmpty() ? null : m_elemStack.peek();}  }
class C{  public static InformationFlowAnalysis v(){  return InformationFlowAnalysis.v;}  }
class C{  void postRemove(HashMapEntry<K,V> e){}  }
class C{  public void testConstructorStringRadix16(){  String value="fe2340a8b5ce790";  int radix=16;  byte rBytes[]={15,-30,52,10,-117,92,-25,-112};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public static long roundAndConvertToPaise(BigDecimal rupees){  rupees=roundOffTwo(rupees);  final long amountInPaise=rupees.multiply(HUNDRED).longValueExact();  return amountInPaise;}  }
class C{  @Override public Iterator<Example> iterator(){  return new IndexBasedExampleSetReader(this);}  }
class C{  private int parseTimeExpression(String timeExpression,TimedTextObject tto,Document doc){  int mSeconds=0;  if (timeExpression.contains(":")) {    String[] parts=timeExpression.split(":");    if (parts.length == 3) {      int h, m;      float s;      h=Integer.parseInt(parts[0]);      m=Integer.parseInt(parts[1]);      s=Float.parseFloat(parts[2]);      mSeconds=h * 3600000 + m * 60000 + (int)(s * 1000);    } else     if (parts.length == 4) {      int h, m, s;      float f;      int frameRate=25;      Node n=doc.getElementsByTagName("ttp:frameRate").item(0);      if (n != null) {        String aux=n.getNodeValue();        try {          frameRate=Integer.parseInt(aux);        } catch (        NumberFormatException e) {        }      }      h=Integer.parseInt(parts[0]);      m=Integer.parseInt(parts[1]);      s=Integer.parseInt(parts[2]);      f=Float.parseFloat(parts[3]);      mSeconds=h * 3600000 + m * 60000 + s * 1000 + (int)(f * 1000 / frameRate);    } else {    }  } else {    String metric=timeExpression.substring(timeExpression.length() - 1);    timeExpression=timeExpression.substring(0,timeExpression.length() - 1).replace(',','.').trim();    double time;    try {      time=Double.parseDouble(timeExpression);      if (metric.equalsIgnoreCase("h"))       mSeconds=(int)(time * 3600000); else       if (metric.equalsIgnoreCase("m"))       mSeconds=(int)(time * 60000); else       if (metric.equalsIgnoreCase("s"))       mSeconds=(int)(time * 1000); else       if (metric.equalsIgnoreCase("ms"))       mSeconds=(int)time; else       if (metric.equalsIgnoreCase("f")) {        int frameRate;        Node n=doc.getElementsByTagName("ttp:frameRate").item(0);        if (n != null) {          String s=n.getNodeValue();          frameRate=Integer.parseInt(s);          mSeconds=(int)(time * 1000 / frameRate);        }      } else       if (metric.equalsIgnoreCase("t")) {        int tickRate;        Node n=doc.getElementsByTagName("ttp:tickRate").item(0);        if (n != null) {          String s=n.getNodeValue();          tickRate=Integer.parseInt(s);          mSeconds=(int)(time * 1000 / tickRate);        }      } else {      }    } catch (    NumberFormatException e) {    }  }  return mSeconds;}  }
class C{  protected void onAdjustChildViews(boolean down){  if (down)   correctTooHigh(getChildCount()); else   correctTooLow(getChildCount());}  }
class C{  public void dispose(){  rightTopWI.dispose();  super.dispose();}  }
class C{  public void createProteinLoadJob(){  createStepInstancesForJob("jobLoadFromUniParc",null);}  }
class C{  public static String dumpAsString(ASN1Primitive obj){  StringBuffer buf=new StringBuffer();  _dumpAsString("",false,obj,buf);  return buf.toString();}  }
class C{  public NotificationChain basicSetComposite(CompositeElement newComposite,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newComposite,SGraphPackage.REGION__COMPOSITE,msgs);  return msgs;}  }
class C{  public Complex add(Complex secondComplex){  return new Complex(a + secondComplex.a,b + secondComplex.b);}  }
class C{  private void paint(int brushObject,int penObject,Shape shape,Graphics2D g2d){  if (brushObject >= 0) {    Paint paint=getStoredPaint(currentStore,brushObject);    if (!((firstEffectivePaint) && (paint.equals(Color.white)))) {      setBrushPaint(currentStore,g2d,brushObject);      g2d.fill(shape);      firstEffectivePaint=false;    }  }  if (penObject >= 0) {    Paint paint=getStoredPaint(currentStore,penObject);    if (!((firstEffectivePaint) && (paint.equals(Color.white)))) {      setPenColor(currentStore,g2d,penObject);      g2d.draw(shape);      firstEffectivePaint=false;    }  }}  }
class C{  private boolean scanHeaders() throws IOException {  int ch=read();  long length=0;  _headers.clear();  while (ch > 0 && ch != '\n' && ch != '\r') {    _line.clear();    _line.append((char)ch);    for (ch=read(); ch >= 0 && ch != '\n' && ch != '\r'; ch=read()) {      _line.append((char)ch);      if (_maxLength < length++)       throw new IOException(L.l("header length {0} exceeded.",_maxLength));    }    if (ch == '\r') {      if ((ch=read()) == '\n')       ch=read();    } else     if (ch == '\n')     ch=read();    int i=0;    for (; i < _line.length() && _line.charAt(i) != ':'; i++) {    }    String key=null;    String value=null;    if (i < _line.length()) {      key=_line.substring(0,i).trim().toLowerCase(Locale.ENGLISH);      value=_line.substring(i + 1).trim();      List<String> values=_headers.get(key);      if (values == null) {        values=new ArrayList<>();      }      values.add(value);      _headers.put(key,values);    }  }  if (ch == '\r') {    if ((ch=read()) != '\n') {      _peek[0]=(byte)ch;      _peekOffset=0;      _peekLength=1;    }  }  return true;}  }
class C{  public Composer transform(float x,float y,int alpha,float scaleX,float scaleY,float rotation){  if (mTweenParameterList.size() > 0) {    to(0,x,y,alpha,scaleX,scaleY,rotation,Ease.NONE);  } else {    mInitialParam=new AnimParameter(x,y,alpha,scaleX,scaleY,rotation);  }  return this;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected boolean isRightMethodForUnmarshall(ODataRequest request){  ODataRequest.Method method=request.getMethod();  return isPostMethod(method) || isPatchMethod(method) || isPutMethod(method);}  }
class C{  public static ReilInstruction createUndef(final Address address){  return new ReilInstruction(address,ReilMnemonics.UNDEF,ReilOperand.EMPTY_OPERAND,ReilOperand.EMPTY_OPERAND,ReilOperand.EMPTY_OPERAND);}  }
class C{  private void computeLabelsFromDepths(){  for (Iterator it=edgeList.iterator(); it.hasNext(); ) {    Edge e=(Edge)it.next();    Label lbl=e.getLabel();    Depth depth=e.getDepth();    if (!depth.isNull()) {      depth.normalize();      for (int i=0; i < 2; i++) {        if (!lbl.isNull(i) && lbl.isArea() && !depth.isNull(i)) {          if (depth.getDelta(i) == 0) {            lbl.toLine(i);          } else {            Assert.isTrue(!depth.isNull(i,Position.LEFT),"depth of LEFT side has not been initialized");            lbl.setLocation(i,Position.LEFT,depth.getLocation(i,Position.LEFT));            Assert.isTrue(!depth.isNull(i,Position.RIGHT),"depth of RIGHT side has not been initialized");            lbl.setLocation(i,Position.RIGHT,depth.getLocation(i,Position.RIGHT));          }        }      }    }  }}  }
class C{  public SimpleQueryParser(Analyzer analyzer,Map<String,Float> weights,int flags){  super(analyzer);  this.weights=weights;  this.flags=flags;}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public FixedSecureRandom(boolean intPad,byte[] value){  this(intPad,new byte[][]{value});}  }
class C{  public font removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public Builder[] loadFontsForBuilding(InputStream is) throws IOException {  PushbackInputStream pbis=new PushbackInputStream(new BufferedInputStream(is),FontFactory.LOOKAHEAD_SIZE);  if (isCollection(pbis)) {    return loadCollectionForBuilding(pbis);  }  return new Builder[]{loadSingleOTFForBuilding(pbis)};}  }
class C{  static String mapDnToDomainName(String dn) throws InvalidNameException {  if (dn == null) {    return null;  }  StringBuffer domain=new StringBuffer();  LdapName ldapName=new LdapName(dn);  List<Rdn> rdnList=ldapName.getRdns();  for (int i=rdnList.size() - 1; i >= 0; i--) {    Rdn rdn=rdnList.get(i);    if ((rdn.size() == 1) && ("dc".equalsIgnoreCase(rdn.getType()))) {      Object attrval=rdn.getValue();      if (attrval instanceof String) {        if (attrval.equals(".") || (domain.length() == 1 && domain.charAt(0) == '.')) {          domain.setLength(0);        }        if (domain.length() > 0) {          domain.append('.');        }        domain.append(attrval);      } else {        domain.setLength(0);      }    } else {      domain.setLength(0);    }  }  return (domain.length() != 0) ? domain.toString() : null;}  }
class C{  public static Impp irc(String handle){  return new Impp(IRC,handle);}  }
class C{  public void createClusterAsync(final String projectId,final ClusterCreateSpec clusterCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/clusters",getBasePath(),projectId);  createObjectAsync(path,serializeObjectAsJson(clusterCreateSpec),responseCallback);}  }
class C{  public static Region ApplyMapping(TLAtoPCalMapping mapping,Region tpregion){  MappingObject[][] tpMap=mapping.mapping;  Region tokPairRegion=RegionToTokPair(tpMap,tpregion);  if (tokPairRegion == null) {    return null;  }  PCalLocation ltok=tokPairRegion.getBegin();  PCalLocation rtok=tokPairRegion.getEnd();  int rtokDepth=0;  int minDepth=0;  boolean allExpr=false;  MappingObject ltokObj=ObjectAt(ltok,tpMap);  MappingObject rtokObj=ObjectAt(rtok,tpMap);  if (ltokObj.getType() == MappingObject.SOURCE_TOKEN) {    allExpr=true;    minDepth=-1;    rtokDepth=-1;  }  PCalLocation i=NextLocOf(ltok,tpMap);  while (LTEq(i,rtok)) {    int newDepth=ModifiedDepth(rtokDepth,i,true,tpMap);    if (newDepth < minDepth) {      minDepth=newDepth;      allExpr=true;    } else     if ((newDepth == rtokDepth) && (newDepth == minDepth)) {      allExpr=allExpr && (ObjectAt(i,tpMap).getType() == MappingObject.SOURCE_TOKEN);    }    rtokDepth=newDepth;    i=NextLocOf(i,tpMap);  }  if (rtokObj.getType() == MappingObject.SOURCE_TOKEN) {    rtokDepth++;    if (rtokDepth < minDepth) {      minDepth=rtokDepth;    }  }  if (allExpr) {    minDepth++;  }  int curDepth=0;  i=ltok;  boolean sourceTok=(ltokObj.getType() == MappingObject.SOURCE_TOKEN);  if ((minDepth != 0) || (!sourceTok)) {    if (sourceTok) {      curDepth=-1;    }    i=PrevLocOf(ltok,tpMap);    while (!((ObjectAt(i,tpMap).getType() == MappingObject.LEFT_PAREN) && (curDepth == minDepth))) {      curDepth=ModifiedDepth(curDepth,i,false,tpMap);      i=PrevLocOf(i,tpMap);    }  }  MappingObject bParen=ObjectAt(i,tpMap);  curDepth=rtokDepth;  i=rtok;  sourceTok=(rtokObj.getType() == MappingObject.SOURCE_TOKEN);  if ((minDepth != rtokDepth) || (!sourceTok)) {    if (sourceTok) {      curDepth--;    }    i=NextLocOf(rtok,tpMap);    while (!((ObjectAt(i,tpMap).getType() == MappingObject.RIGHT_PAREN) && (curDepth == minDepth))) {      curDepth=ModifiedDepth(curDepth,i,true,tpMap);      i=NextLocOf(i,tpMap);    }  }  MappingObject eParen=ObjectAt(i,tpMap);  PCalLocation lpos;  if (bParen.getType() == MappingObject.SOURCE_TOKEN) {    lpos=((MappingObject.SourceToken)bParen).getOrigin().getBegin();  } else {    lpos=((MappingObject.LeftParen)bParen).getLocation();  }  PCalLocation rpos;  if (eParen.getType() == MappingObject.SOURCE_TOKEN) {    rpos=((MappingObject.SourceToken)eParen).getOrigin().getEnd();  } else {    rpos=((MappingObject.RightParen)eParen).getLocation();  }  if (lpos.getLine() == 0 && lpos.getColumn() == 0) {    return null;  }  return new Region(lpos,rpos);}  }
class C{  public GDSException(int type,String strParam){  this.type=type;  this.strParam=strParam;  this.intParam=0;}  }
class C{  public UrlResource(URL url){  Assert.notNull(url,"URL must not be null");  this.url=url;  this.cleanedUrl=getCleanedUrl(this.url,url.toString());  this.uri=null;}  }
class C{  synchronized public void remove(String gcTraceName){  ArgumentChecking.notNull(gcTraceName,"gcTraceName");  GCTrace gcTrace=findGCTrace(gcTraceName);  ErrorReporting.fatalError(gcTrace != null,gcTraceName + " does not exist in the GC trace set");  gcTrace.beforeRemovingFromGCTraceSet();  boolean ret=super.remove(gcTrace);  assert ret;  recreateAllGCActivityNames();  listeners.callGCTraceRemoved(gcTrace);}  }
class C{  @Override public UserClient user(){  return null;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public static GeofenceHardwareRequest createCircularGeofence(double latitude,double longitude,double radius){  GeofenceHardwareRequest geofenceRequest=new GeofenceHardwareRequest();  geofenceRequest.setCircularGeofence(latitude,longitude,radius);  return geofenceRequest;}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  public void test_ConstructorIIIII(){  Date d1=new Date(70,0,1,1,1);  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000 + 60 * 60 * 1000 + 60 * 1000);  assertTrue("Created incorrect date",d1.equals(d2));}  }
class C{  public boolean isPreventLooping(){  return preventLooping;}  }
class C{  public final Iterator<PluginPatternMatcher> schemeSpecificPartsIterator(){  return mDataSchemeSpecificParts != null ? mDataSchemeSpecificParts.iterator() : null;}  }
class C{  private QueryAdvice(PTQuery query){  this.queryId=queryIdSeed++;  addQuery(query,false);}  }
class C{  public static <E extends BaseVO>E findByKey(List<E> list,long key){  if (list == null) {    return null;  }  Iterator<E> it=list.iterator();  while (it.hasNext()) {    E e=it.next();    if (e.getKey() == key) {      return e;    }  }  return null;}  }
class C{  public boolean isUnion(){  return true;}  }
class C{  private final boolean lookahead(String s,int n){  boolean isToken;  if ((m_queueMark + n) <= m_ops.getTokenQueueSize()) {    String lookahead=(String)m_ops.m_tokenQueue.elementAt(m_queueMark + (n - 1));    isToken=(lookahead != null) ? lookahead.equals(s) : (s == null);  } else {    isToken=(null == s);  }  return isToken;}  }
class C{  public AuthenticatedUser authenticateUser(Credentials credentials) throws GuacamoleException {  LDAPConnection ldapConnection;  try {    ldapConnection=bindAs(credentials);  } catch (  GuacamoleException e) {    logger.error("Cannot bind with LDAP server: {}",e.getMessage());    logger.debug("Error binding with LDAP server.",e);    ldapConnection=null;  }  if (ldapConnection == null)   throw new GuacamoleInvalidCredentialsException("Permission denied.",CredentialsInfo.USERNAME_PASSWORD);  try {    AuthenticatedUser authenticatedUser=authenticatedUserProvider.get();    authenticatedUser.init(credentials);    return authenticatedUser;  }  finally {    ldapService.disconnect(ldapConnection);  }}  }
class C{  protected static FontUIResource _getWindowTitleFont(){  if (windowFont == null) {    try {      windowFont=new FontUIResource(Font.getFont("swing.plaf.metal.windowFont",new Font(FONT_DEFAULT,Font.BOLD,FONT_SIZE + 2)));    } catch (    Exception e) {      windowFont=new FontUIResource(FONT_DEFAULT,Font.BOLD,FONT_SIZE + 2);    }  }  return windowFont;}  }
class C{  public Object receiveInstruction(){  try {    String message=(String)in.readObject();    if (message.equals(Messages.NEW_SEARCH))     return null; else     if (message.equals(Messages.CONTINUE_SEARCH)) {      Object population_data=in.readObject();      return population_data;    }  } catch (  Exception e) {    logger.error("error in receiving message",e);  }  throw new RuntimeException("no valid message received");}  }
class C{  public void putHTML(final String key,final String value){  put(key,value == null ? "" : CharacterCoding.unicode2html(UTF8.decodeURL(value),true));}  }
class C{  protected void objectsInserted(DBIDs ids){  final Logging log=getLogger();  StepProgress stepprog=log.isVerbose() ? new StepProgress(3) : null;  ArrayDBIDs aids=DBIDUtil.ensureArray(ids);  log.beginStep(stepprog,1,"New insertions ocurred, materialize their new kNNs.");  List<? extends KNNList> kNNList=knnQuery.getKNNForBulkDBIDs(aids,k);  DBIDIter iter=aids.iter();  for (int i=0; i < aids.size(); i++, iter.advance()) {    storage.put(iter,kNNList.get(i));  }  log.beginStep(stepprog,2,"New insertions ocurred, update the affected kNNs.");  ArrayDBIDs rkNN_ids=updateKNNsAfterInsertion(ids);  log.beginStep(stepprog,3,"New insertions ocurred, inform listeners.");  fireKNNsInserted(ids,rkNN_ids);  log.setCompleted(stepprog);}  }
class C{  private void transform(RegisterOperand rop){  final boolean DEBUG=false;  Instruction inst=rop.instruction;switch (inst.getOpcode()) {case SYSCALL_opcode:case CALL_opcode:    RegisterOperand invokee=Call.getParam(inst,0).asRegister();  if (invokee == rop) {    MethodOperand mop=Call.getMethod(inst);    if (mop.getTarget().isSynchronized()) {      mop.spMethod=context.findOrCreateSpecializedVersion((NormalMethod)mop.getTarget());      if (DEBUG) {        VM.sysWrite("Identified call " + inst + " for unsynchronization\n");      }    }  }break;case MONITORENTER_opcode:if (DEBUG) {VM.sysWrite("Removing " + inst);}inst.insertBefore(Empty.create(READ_CEILING));DefUse.removeInstructionAndUpdateDU(inst);break;case MONITOREXIT_opcode:if (DEBUG) {VM.sysWrite("Removing " + inst);}inst.insertAfter(Empty.create(WRITE_FLOOR));DefUse.removeInstructionAndUpdateDU(inst);break;default :break;}}  }
class C{  @Override public String run(String[] args){  if (args.length == 1) {    String help="#nova print : will print all of your current nova networks and unlinked units.\n";    help+="#nova print 5 : will print the network status for the Unit with ID 5.\n";    help+="#nova link 5 6 : will link the units with ID 5 and 6.\n+++Will Disconnect them from all prior nets.\n";    help+="#nova link 5 6 7 : will link the three units with ID 5 6 and 7.\n+++Will Disconnect them from all prior nets.\n";    help+="#nova unlink : will unlink all your novaCEWS units.\n";    help+="#nova unlink 5 : will unlink unit with ID 5 from all nova networks.\n";    return help;  }  try {    if (args.length > 1) {      String cmd=args[1];      if (cmd == "print") {        if (args.length > 2) {          int id=Integer.parseInt(args[2]);          return strListNetwork(id,true);        } else {          return strListNetworks(true);        }      } else       if (cmd == "link") {        if (args.length > 4) {          int id1=Integer.parseInt(args[2]);          int id2=Integer.parseInt(args[3]);          int id3=Integer.parseInt(args[4]);          return strLink3(id1,id2,id3);        } else         if (args.length > 3) {          int id1=Integer.parseInt(args[2]);          int id2=Integer.parseInt(args[3]);          return strLink2(id1,id2);        }      } else       if (cmd == "unlink") {        if (args.length > 2) {          int id=Integer.parseInt(args[2]);          return strUnlinkID(id);        } else {          return strUnlinkAll();        }      }      return "Unknown command. #nova for help.\n";    }  } catch (  NumberFormatException nfe) {  }catch (  NullPointerException npe) {  }catch (  IndexOutOfBoundsException ioobe) {  }  return "Error parsing the command.";}  }
class C{  public TinyDancerBuilder startingGravity(int gravity){  fpsConfig.startingGravity=gravity;  return this;}  }
class C{  public void write(byte[] b,int offset,int len,int pad) throws IOException {  out.write(b,offset,len);  writePadding(pad,SPACE_BYTE);}  }
class C{  public PapeMessage(){  _parameters=new ParameterList();  if (DEBUG)   _log.debug("Created empty PapeMessage.");}  }
class C{  public static boolean hasKitkat(){  return Build.VERSION.SDK_INT >= VERSION_CODES.KITKAT;}  }
class C{  private String replaceInvalidChars(String identity){  StringBuilder b=new StringBuilder(identity.length() + 30);  for (int i=0; i < identity.length(); i++) {    char ch=identity.charAt(i);    if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')|| ch == '_' || ch == '.' || ch == '-') {      b.append(ch);    } else {      int value=(int)ch;      b.append('~');      b.append(toHex(value));    }  }  return b.toString();}  }
class C{  public Socket connectForServer(InetAddress inetadd,int port) throws IOException {  return connect(inetadd,port,0,null,false,-1);}  }
class C{  protected void zeroPathCallbacks(){  vm.nrCallbacksPath=0;}  }
class C{  public static String refsEditPrefix(Account.Id accountId,Change.Id changeId){  return refsEditPrefix(accountId) + changeId.get() + '/';}  }
class C{  private void logThreadStatistics(){  int threadCount=threadMXBean.getThreadCount();  long totalStartedThreads=threadMXBean.getTotalStartedThreadCount();  StringBuilder sb=new StringBuilder();  sb.append("Threads: ");  sb.append(threadCount);  sb.append(" total started: ");  sb.append(totalStartedThreads);  log.info(sb.toString());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.787 -0500",hash_original_method="DF63005BC1AE5B0B1E3F7DD90D14732F",hash_generated_method="8F79EB57671A32037C83D3369B7368ED") public void reset(int valueCount){  reset(valueCount,2);}  }
class C{  @SuppressWarnings("unchecked") public void writeAsciiStream(java.io.InputStream x) throws SQLException {  BufferedReader bufReader=new BufferedReader(new InputStreamReader(x));  try {    int i;    while ((i=bufReader.read()) != -1) {      char ch=(char)i;      StringBuffer strBuf=new StringBuffer();      strBuf.append(ch);      String str=new String(strBuf);      String strLine=bufReader.readLine();      writeString(str.concat(strLine));    }  } catch (  IOException ioe) {    throw new SQLException(ioe.getMessage());  }}  }
class C{  private void initStaticResourcesProductionFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering static resources production Filter");  FilterRegistration.Dynamic staticResourcesProductionFilter=servletContext.addFilter("staticResourcesProductionFilter",new StaticResourcesProductionFilter());  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/index.html");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/assets/*");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/scripts/*");  staticResourcesProductionFilter.setAsyncSupported(true);}  }
class C{  public static void enable(Item item){  enabled.add(item);}  }
class C{  public void gatherMediaInformation(){  gatherMediaInformation(false);}  }
class C{  protected AWTKeyStroke(char keyChar,int keyCode,int modifiers,boolean onKeyRelease){  this.keyChar=keyChar;  this.keyCode=keyCode;  this.modifiers=modifiers;  this.onKeyRelease=onKeyRelease;}  }
class C{  protected void forwardCommandChangeToLayout(int s){  if ((s & Turnout.CLOSED) != 0) {    if ((s & Turnout.THROWN) != 0) {      log.error("Cannot command both CLOSED and THROWN " + s);      return;    } else {      sendMessage(true ^ getInverted());    }  } else {    sendMessage(false ^ getInverted());  }}  }
class C{  public EntityQuery filterByDate(Timestamp moment,String... filterByFieldName){  this.filterByDate=true;  this.filterByDateMoment=moment;  if (filterByFieldName.length % 2 != 0) {    throw new IllegalArgumentException("You must pass an even sized array to this method, each pair should represent a from date field name and a thru date field name");  }  this.filterByFieldNames=Arrays.asList(filterByFieldName);  return this;}  }
class C{  public void testGetName(){  String expectedReturn="REALM";  String actualReturn=realmAttribute.getName();  assertEquals("getting name failed",expectedReturn,actualReturn);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.209 -0500",hash_original_method="49A97AD028E7397E6545CF950CBFEBF3",hash_generated_method="13A108A9888D950A3EBEC0B4D19CF619") public void onFirstLayout(WebViewCore.DrawData drawData){  assert drawData != null;  assert drawData.mViewState != null;  assert mWebView.getSettings() != null;  WebViewCore.ViewState viewState=drawData.mViewState;  final Point viewSize=drawData.mViewSize;  updateZoomRange(viewState,viewSize.x,drawData.mMinPrefWidth);  setupZoomOverviewWidth(drawData,mWebView.getViewWidth());  final float overviewScale=getZoomOverviewScale();  WebSettings settings=mWebView.getSettings();  if (!mMinZoomScaleFixed || settings.getUseWideViewPort()) {    mMinZoomScale=(mInitialScale > 0) ? Math.min(mInitialScale,overviewScale) : overviewScale;    mMaxZoomScale=Math.max(mMaxZoomScale,mMinZoomScale);  }  if (!mWebView.drawHistory()) {    float scale;    if (mInitialScale > 0) {      scale=mInitialScale;    } else     if (viewState.mIsRestored || viewState.mViewScale > 0) {      scale=(viewState.mViewScale > 0) ? viewState.mViewScale : overviewScale;      mTextWrapScale=(viewState.mTextWrapScale > 0) ? viewState.mTextWrapScale : getReadingLevelScale();    } else {      scale=overviewScale;      if (!settings.getUseWideViewPort() || !settings.getLoadWithOverviewMode()) {        scale=Math.max(mDefaultScale,scale);      }      if (settings.isNarrowColumnLayout() && settings.getUseFixedViewport()) {        mTextWrapScale=getReadingLevelScale();      }    }    boolean reflowText=false;    if (!viewState.mIsRestored) {      if (settings.getUseFixedViewport()) {        scale=Math.max(scale,overviewScale);        mTextWrapScale=Math.max(mTextWrapScale,overviewScale);      }      reflowText=exceedsMinScaleIncrement(mTextWrapScale,scale);    }    mInitialZoomOverview=settings.getLoadWithOverviewMode() && !exceedsMinScaleIncrement(scale,overviewScale);    setZoomScale(scale,reflowText);    updateZoomPicker();  }}  }
class C{  public synchronized void addBatchAssociationRulesListener(BatchAssociationRulesListener al){  m_rulesListeners.add(al);}  }
class C{  public void insert(int i,Key key){  if (contains(i))   throw new IllegalArgumentException("index is already in the priority queue");  n++;  qp[i]=n;  pq[n]=i;  keys[i]=key;  swim(n);}  }
class C{  public ModifySubscriptionResponse ModifySubscription(ModifySubscriptionRequest req) throws ServiceFaultException, ServiceResultException {  return (ModifySubscriptionResponse)channel.serviceRequest(req);}  }
class C{  public void testConnection(){  System.out.println(String.format("Creating service, host=%s, port=%d, serviceName=%s",host,port,serviceName));  JmxManager jmx=new JmxManager(host,port,serviceName);  jmx.start();  Trial mbean=new Trial();  JmxManager.registerMBean(mbean,Trial.class);  System.out.println(String.format("Connecting to service, host=%s, port=%d, serviceName=%s",host,port,serviceName));  JmxManager jmxManager=new JmxManager(host,port,serviceName);  JMXConnector connector=jmxManager.getLocalRMIConnector();  assertNotNull("Checking that connector is not null",connector);  System.out.println(String.format("Getting the mbean for class=%s",Trial.class.getName()));  TrialMBean mbeanProxy=(TrialMBean)JmxManager.getMBeanProxy(connector,Trial.class,true);  assertNotNull("Checking that proxy is not null",mbeanProxy);  mbeanProxy.setBeanCounter(14);  assertEquals("Bean count set to 14 via proxy",14,mbean.beanCounter);  mbeanProxy.setBeanCounter(22);  assertEquals("Bean count set to 22 via proxy",22,mbean.beanCounter);  jmx.stop();}  }
class C{  public void emitop1(int op,int od){  emitop(op);  if (!alive)   return;  emit1(od);switch (op) {case bipush:    state.push(syms.intType);  break;case ldc1:state.push(typeForPool(pool.pool[od]));break;default :throw new AssertionError(mnem(op));}postop();}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  if (null != m_errorHandler) {    try {      m_errorHandler.fatalError(e);    } catch (    SAXParseException se) {    }  }  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).fatalError(e);    if (null != m_errorHandler)     m_errorHandler.fatalError(e);  } else {    try {      errorListener.fatalError(new javax.xml.transform.TransformerException(e));      if (null != m_errorHandler)       m_errorHandler.fatalError(e);    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  public static boolean isNull(String s){  if (s == null || s.trim().equals(""))   return true; else   return false;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof ChannelBinding))   return false;  ChannelBinding cb=(ChannelBinding)obj;  if ((initiator != null && cb.initiator == null) || (initiator == null && cb.initiator != null))   return false;  if (initiator != null && !initiator.equals(cb.initiator))   return false;  if ((acceptor != null && cb.acceptor == null) || (acceptor == null && cb.acceptor != null))   return false;  if (acceptor != null && !acceptor.equals(cb.acceptor))   return false;  return Arrays.equals(appData,cb.appData);}  }
class C{  public void testConditionalAgainstOrdinaryTE(TransferEntropyCalculator teCalc,ConditionalTransferEntropyCalculator condTeCalc,int timeSteps,int k) throws Exception {  if (k < 2) {    throw new Exception("Need k >= 2 for testConditionalAgainstOrdinaryTE");  }  RandomGenerator rg=new RandomGenerator();  double[] sourceData=rg.generateNormalData(timeSteps,0,1);  double[] destData=rg.generateNormalData(timeSteps,0,1);  teCalc.initialise(k);  teCalc.setObservations(sourceData,destData);  double te=teCalc.computeAverageLocalOfObservations();  System.out.printf("TE(k=%d): Average was %.5f\n",k,te);  int[] condDims={k - 1};  int[] condTaus={1};  int[] condDelays={2};  condTeCalc.initialise(1,1,1,1,1,condDims,condTaus,condDelays);  condTeCalc.setObservations(sourceData,destData,destData);  double condTe=condTeCalc.computeAverageLocalOfObservations();  System.out.printf("CondTE(k=%d): Average was %.5f\n",k,condTe);  assertEquals(teCalc.getNumObservations(),condTeCalc.getNumObservations());  assertEquals(te,condTe,0.000000001);}  }
class C{  @Override public final GraphNode to(){  return _toNode;}  }
class C{  public void configureRangeAxes(){  for (  ValueAxis axis : this.rangeAxes.values()) {    if (axis != null) {      axis.configure();    }  }}  }
class C{  public boolean onReceivedClientCertRequest(CordovaWebView view,ICordovaClientCertRequest request){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null && plugin.onReceivedClientCertRequest(view,request)) {      return true;    }  }  return false;}  }
class C{  public final static OutputAnalyzer jcmd(String... jcmdArgs) throws Exception {  return jcmd(true,null,jcmdArgs);}  }
class C{  private void overwriteDictionaryMetaFile(ColumnDictionaryChunkMeta firstDictionaryChunkMeta,String dictionaryFile) throws IOException {  ThriftWriter thriftMetaChunkWriter=new ThriftWriter(dictionaryFile,false);  try {    thriftMetaChunkWriter.open();    thriftMetaChunkWriter.write(firstDictionaryChunkMeta);  } catch (  IOException e) {  } finally {    thriftMetaChunkWriter.close();  }}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  try {    if (_length < length)     length=(int)_length;    if (length <= 0)     return -1;    int len=_next.read(buffer,offset,length);    if (len > 0) {      _length-=len;    } else {      _length=-1;    }    return len;  } catch (  SocketTimeoutException e) {    throw new ClientDisconnectException(e);  }}  }
class C{  protected AbstractCategoryItemLabelGenerator(String labelFormat,NumberFormat formatter,NumberFormat percentFormatter){  ParamChecks.nullNotPermitted(labelFormat,"labelFormat");  ParamChecks.nullNotPermitted(formatter,"formatter");  ParamChecks.nullNotPermitted(percentFormatter,"percentFormatter");  this.labelFormat=labelFormat;  this.numberFormat=formatter;  this.percentFormat=percentFormatter;  this.dateFormat=null;  this.nullValueString="-";}  }
class C{  public Text replaceWholeText(String content) throws DOMException {  return null;}  }
class C{  public final IntGrid3D add(int withThisMuch){  if (withThisMuch == 0.0)   return this;  int[][] fieldx=null;  int[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]+=withThisMuch;    }  }  return this;}  }
class C{  public NoClassDefFoundError(java.lang.String s){  super(s);}  }
class C{  public void deleteRow(int selectedRow){  String acctNumber=(String)this.getValueAt(selectedRow,1);  for (  final PortfolioAccount element : getData().getPortfolioAccounts()) {    if (CoreUtils.nullSafeComparator(element.getAccount().getAccountNumber(),acctNumber) == 0) {      getData().getPortfolioAccounts().remove(element);      getData().setDirty(true);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  private Events(){}  }
class C{  public void disconnect() throws IOException {  __initDefaults();  super.disconnect();}  }
class C{  private static int blend_screen(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=255 - (((255 - ar) * (255 - br)) >> 8);  int cg=255 - (((255 - ag) * (255 - bg)) >> 8);  int cb=255 - (((255 - ab) * (255 - bb)) >> 8);  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  public static BigInteger norm(final byte mu,ZTauElement lambda){  BigInteger norm;  BigInteger s1=lambda.u.multiply(lambda.u);  BigInteger s2=lambda.u.multiply(lambda.v);  BigInteger s3=lambda.v.multiply(lambda.v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  public static boolean intersectSphereSphere(float aX,float aY,float aZ,float radiusSquaredA,float bX,float bY,float bZ,float radiusSquaredB,Vector4f centerAndRadiusOfIntersectionCircle){  float dX=bX - aX, dY=bY - aY, dZ=bZ - aZ;  float distSquared=dX * dX + dY * dY + dZ * dZ;  float h=0.5f + (radiusSquaredA - radiusSquaredB) / distSquared;  float r_i=radiusSquaredA - h * h * distSquared;  if (r_i >= 0.0f) {    centerAndRadiusOfIntersectionCircle.x=aX + h * dX;    centerAndRadiusOfIntersectionCircle.y=aY + h * dY;    centerAndRadiusOfIntersectionCircle.z=aZ + h * dZ;    centerAndRadiusOfIntersectionCircle.w=(float)Math.sqrt(r_i);    return true;  }  return false;}  }
class C{  public static void stop(Context context){  context.stopService(new Intent(context,HostMonitor.class));}  }
class C{  public DefaultDependencyManager(){  ignorePatterns=emptySet();}  }
class C{  public static byte[] trimToCapacity(byte[] array,int maxCapacity){  if (array.length > maxCapacity) {    byte oldArray[]=array;    array=new byte[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.785 -0500",hash_original_method="9AD39421D9E40B39389DA2F4797EEA52",hash_generated_method="C59DF26F3281D6CFC9A274DDA88BFD72") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ReasonParser.parse");  try {    headerName(TokenTypes.REFERENCES);    References references=new References();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    references.setCallId(callId);    super.parse(references);    return references;  }  finally {    if (debug)     dbg_leave("ReferencesParser.parse");  }}  }
class C{  public LatLonPoint toLatLonPoint(Ellipsoid ellip,LatLonPoint llpoint){  return MGRStoLL(this,ellip,llpoint);}  }
class C{  @Override public boolean isMultiversion(){  return sequence > 0;}  }
class C{  protected ExpressionNode toOrderGroupBy(ValueNode valueNode,List<ExpressionNode> projects,String which) throws StandardException {  ExpressionNode expression=toExpression(valueNode,projects);  if (expression.isConstant()) {    Object value=((ConstantExpression)expression).getValue();    if ((value instanceof Long) || (value instanceof Integer) || (value instanceof Short)|| (value instanceof Byte)) {      int i=((Number)value).intValue();      if ((i <= 0) || (i > projects.size()))       throw new OrderGroupByIntegerOutOfRange(which,i,projects.size());      expression=(ExpressionNode)projects.get(i - 1);    } else     throw new OrderGroupByNonIntegerConstant(which,expression.getSQLsource());  }  return expression;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void ensureIndex(final int index){  if (index < 0)   throw new IndexOutOfBoundsException("Index (" + index + ") is negative");  if (index > size())   throw new IndexOutOfBoundsException("Index (" + index + ") is greater than list size ("+ (size())+ ")");}  }
class C{  public void extractCaptchaElements(ElementHandler<Element> selectionHandler){  if (selectionHandler.isEmpty()) {    return;  }  Set<Element> captchaElements=new HashSet<>();  for (  Element el : selectionHandler.get()) {    if (parseAttributeToExtractCaptcha(el)) {      captchaElements.add(el);    } else {      for (      Element sel : getSiblingsAndParents(el)) {        if (!el.nodeName().equalsIgnoreCase(sel.nodeName()) && parseAttributeToExtractCaptcha(sel)) {          captchaElements.add(el);          break;        }      }    }  }  selectionHandler.clean();  for (  Element el : captchaElements) {    selectionHandler.add(el);  }}  }
class C{  protected MultistepExprHolder matchAndEliminatePartialPaths(MultistepExprHolder testee,MultistepExprHolder head,boolean isGlobal,int lengthToTest,ElemTemplateElement varScope){  if (null == testee.m_exprOwner)   return head;  WalkingIterator iter1=(WalkingIterator)testee.m_exprOwner.getExpression();  if (partialIsVariable(testee,lengthToTest))   return head;  MultistepExprHolder matchedPaths=null;  MultistepExprHolder matchedPathsTail=null;  MultistepExprHolder meh=head;  while (null != meh) {    if ((meh != testee) && (null != meh.m_exprOwner)) {      WalkingIterator iter2=(WalkingIterator)meh.m_exprOwner.getExpression();      if (stepsEqual(iter1,iter2,lengthToTest)) {        if (null == matchedPaths) {          try {            matchedPaths=(MultistepExprHolder)testee.clone();            testee.m_exprOwner=null;          } catch (          CloneNotSupportedException cnse) {          }          matchedPathsTail=matchedPaths;          matchedPathsTail.m_next=null;        }        try {          matchedPathsTail.m_next=(MultistepExprHolder)meh.clone();          meh.m_exprOwner=null;        } catch (        CloneNotSupportedException cnse) {        }        matchedPathsTail=matchedPathsTail.m_next;        matchedPathsTail.m_next=null;      }    }    meh=meh.m_next;  }  int matchCount=0;  if (null != matchedPaths) {    ElemTemplateElement root=isGlobal ? varScope : findCommonAncestor(matchedPaths);    WalkingIterator sharedIter=(WalkingIterator)matchedPaths.m_exprOwner.getExpression();    WalkingIterator newIter=createIteratorFromSteps(sharedIter,lengthToTest);    ElemVariable var=createPseudoVarDecl(root,newIter,isGlobal);    if (DIAGNOSE_MULTISTEPLIST)     System.err.println("Created var: " + var.getName() + (isGlobal ? "(Global)" : ""));    while (null != matchedPaths) {      ExpressionOwner owner=matchedPaths.m_exprOwner;      WalkingIterator iter=(WalkingIterator)owner.getExpression();      if (DIAGNOSE_MULTISTEPLIST)       diagnoseLineNumber(iter);      LocPathIterator newIter2=changePartToRef(var.getName(),iter,lengthToTest,isGlobal);      owner.setExpression(newIter2);      matchedPaths=matchedPaths.m_next;    }  }  if (DIAGNOSE_MULTISTEPLIST)   diagnoseMultistepList(matchCount,lengthToTest,isGlobal);  return head;}  }
class C{  public Builder addGeneratorLoader(GeneratorLoader gLoader){  if (loaders == null) {    loaders=new ArrayList<GeneratorLoader>();  }  if (gLoader != null) {    loaders.add(gLoader);  }  return this;}  }
class C{  public JCExpression Ident(JCVariableDecl param){  return Ident(param.sym);}  }
class C{  public IndexMap(Object[] array){  this.array=array;}  }
class C{  public static XContentType xContentType(InputStream si) throws IOException {  if (si.markSupported() == false) {    throw new IllegalArgumentException("Cannot guess the xcontent type without mark/reset support on " + si.getClass());  }  si.mark(GUESS_HEADER_LENGTH);  try {    final int firstInt=si.read();    if (firstInt == -1) {      return null;    }    final int secondInt=si.read();    if (secondInt == -1) {      return null;    }    final byte first=(byte)(0xff & firstInt);    final byte second=(byte)(0xff & secondInt);    if (first == SmileConstants.HEADER_BYTE_1 && second == SmileConstants.HEADER_BYTE_2) {      int third=si.read();      if (third == SmileConstants.HEADER_BYTE_3) {        return XContentType.SMILE;      }    }    if (first == '{' || second == '{') {      return XContentType.JSON;    }    if (first == '-' && second == '-') {      int third=si.read();      if (third == '-') {        return XContentType.YAML;      }    }    if (first == CBORConstants.BYTE_OBJECT_INDEFINITE) {      return XContentType.CBOR;    }    if (CBORConstants.hasMajorType(CBORConstants.MAJOR_TYPE_TAG,first)) {      int third=si.read();      if (third == -1) {        return null;      }      if (first == (byte)0xD9 && second == (byte)0xD9 && third == (byte)0xF7) {        return XContentType.CBOR;      }    }    if (CBORConstants.hasMajorType(CBORConstants.MAJOR_TYPE_OBJECT,first)) {      return XContentType.CBOR;    }    for (int i=2; i < GUESS_HEADER_LENGTH; i++) {      int val=si.read();      if (val == -1) {        return null;      }      if (val == '{') {        return XContentType.JSON;      }      if (Character.isWhitespace(val) == false) {        break;      }    }    return null;  }  finally {    si.reset();  }}  }
class C{  @Override public HaltStepInfo execute(String[] params){  try {    HaltStepInfo haltStepInfo=new HaltStepInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String subPids=commandLine.getOptionValue("sub-process-id");    LOGGER.debug("subPid is " + subPids);    String[] subPidList=subPids.split(",");    for (    String subPid : subPidList) {      haltStepInfo.setSubProcessId(Integer.parseInt(subPid));      stepDAO.haltStep(haltStepInfo.getSubProcessId());    }    return haltStepInfo;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public QueryStringDecoder(URI uri){  this(uri,DEFAULT_CHARSET);}  }
class C{  public void withPropertiesFrom(JSGraphQLEndpoint other){  name=other.name;  url=other.url;  options=other.options != null ? Maps.newLinkedHashMap(other.options) : Maps.newLinkedHashMap();}  }
class C{  public Builder textSizeRelative(float textSizeRelative){  this.textSizeRelative=textSizeRelative;  return this;}  }
class C{  public void refreshPushRules(){  ArrayList<MXSession> sessions;synchronized (this) {    sessions=getSessions();  }  for (  MXSession session : sessions) {    if (null != session.getDataHandler()) {      session.getDataHandler().refreshPushRules();    }  }}  }
class C{  synchronized public boolean release(DTM dtm,boolean shouldHardDelete){  if (DEBUG) {    System.out.println("Releasing " + (shouldHardDelete ? "HARD" : "soft") + " dtm="+ dtm.getDocumentBaseURI());  }  if (dtm instanceof SAX2DTM) {    ((SAX2DTM)dtm).clearCoRoutine();  }  if (dtm instanceof DTMDefaultBase) {    org.apache.xml.utils.SuballocatedIntVector ids=((DTMDefaultBase)dtm).getDTMIDs();    for (int i=ids.size() - 1; i >= 0; --i)     m_dtms[ids.elementAt(i) >>> DTMManager.IDENT_DTM_NODE_BITS]=null;  } else {    int i=getDTMIdentity(dtm);    if (i >= 0) {      m_dtms[i >>> DTMManager.IDENT_DTM_NODE_BITS]=null;    }  }  dtm.documentRelease();  return true;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void bubbleUp(int index){}  }
class C{  private void handleMagic(String rawExpression){  String expression=rawExpression.trim();  if (MAGIC_FUNCTIONS.equals(expression)) {    String functions=StreamSupport.stream(executor.getFunctionResolver().getFunctionInfo().spliterator(),false).map(null).sorted().collect(Collectors.joining(", "));    writeLine(functions);  } else   if (MAGIC_VARS.equals(expression)) {    executor.getVariables().forEach(null);  } else {    writeLine(ERROR_PROMPT + "undefined magic command: " + expression);  }}  }
class C{  private void applyRotation(int position,float start,float end){  final float centerX=mContainer.getWidth() / 2.0f;  final float centerY=mContainer.getHeight() / 2.0f;  final Rotate3dAnimation rotation=new Rotate3dAnimation(start,end,centerX,centerY,310.0f,true);  rotation.setDuration(500);  rotation.setFillAfter(true);  rotation.setInterpolator(new AccelerateInterpolator());  rotation.setAnimationListener(new DisplayNextView(position));  mContainer.startAnimation(rotation);}  }
class C{  public void reset(){  tagCase=Case.DEFAULT;  attributeCase=Case.DEFAULT;}  }
class C{  public static Collection<ArtifactResult> processImport(final Path tmpDir,final ImportConfiguration cfg) throws ArtifactResolutionException {  Objects.requireNonNull(tmpDir);  Objects.requireNonNull(cfg);  final RepositoryContext ctx=new RepositoryContext(tmpDir,cfg.getRepositoryUrl());  final Collection<ArtifactRequest> requests=new LinkedList<>();  for (  final MavenCoordinates coords : cfg.getCoordinates()) {    final DefaultArtifact main=new DefaultArtifact(coords.toString());    requests.add(makeRequest(ctx.getRepositories(),main));  }  return ctx.getSystem().resolveArtifacts(ctx.getSession(),requests);}  }
class C{  private void screenRefresh(){  try {    final IBinder flinger=ServiceManager.getService("SurfaceFlinger");    if (flinger != null) {      final Parcel data=Parcel.obtain();      data.writeInterfaceToken("android.ui.ISurfaceComposer");      flinger.transact(1004,data,null,0);      data.recycle();    }  } catch (  RemoteException ex) {    Slog.e(TAG,"Failed to refresh screen",ex);  }}  }
class C{  protected boolean isSendBufferSizeChanged(){  return true;}  }
class C{  public void endDocument() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endDocument");  m_insideParse=false;  if (m_contentHandler != null) {    m_contentHandler.endDocument();  }  if (m_incremental) {    m_transformer.waitTransformThread();  } else {    m_transformer.setSourceTreeDocForThread(m_dtm.getDocument());    m_transformer.run();  }}  }
class C{  private static WifiConfiguration parse(NdefMessage message){  NdefRecord[] records=message.getRecords();  for (  NdefRecord record : records) {    if (new String(record.getType()).equals(NFC_TOKEN_MIME_TYPE)) {      ByteBuffer payload=ByteBuffer.wrap(record.getPayload());      while (payload.hasRemaining()) {        short fieldId=payload.getShort();        short fieldSize=payload.getShort();        if (fieldId == CREDENTIAL_FIELD_ID) {          return parseCredential(payload,fieldSize);        } else {          payload.position(payload.position() + fieldSize);        }      }    }  }  return null;}  }
class C{  protected void sendMessage(HttpServletResponse response,String message) throws IOException {  PrintWriter writer=response.getWriter();  writer.println("OK - " + message);}  }
class C{  public JSONArray put(long value){  put(new Long(value));  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int statID=getInt(stack);  String net=getString(stack);  String name=getString(stack);  boolean[] didAdd=new boolean[1];  didAdd[0]=false;  Channel rv=Wizard.getInstance().addChannel(getString(stack),name,net,statID,0,didAdd);  if (didAdd[0])   Wizard.getInstance().resetAirings(statID);  return rv;}  }
class C{  private void validateSimple(int key,EnumType val,boolean registered) throws Exception {  if (registered) {    assertEquals(val,cache1.get(key));    assertEquals(val,cache2.get(key));  }  validate((BinaryObject)cacheBinary1.get(key),val);  validate((BinaryObject)cacheBinary2.get(key),val);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 184) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof UID) {    UID uid=(UID)obj;    return (unique == uid.unique && count == uid.count && time == uid.time);  } else {    return false;  }}  }
class C{  private static void writeHeaderString(BufferedWriter output) throws IOException {  output.write("Name");  output.write(delimiter);  output.write("Total_Count");  output.write(delimiter);  for (int i=0; i < 24; i++) {    output.write("H");    output.write(String.valueOf(i));    output.write(delimiter);  }  for (int i=0; i < 23; i++) {    output.write("D");    output.write(String.valueOf(i));    output.write(delimiter);  }  output.write("D23");  output.newLine();}  }
class C{  final public MutableString append(final CharSequence[] a,final int offset,final int length,final CharSequence separator){  ObjectArrays.ensureOffsetLength(a,offset,length);  if (length == 0)   return this;  int m=0;  for (int i=0; i < length; i++)   m+=a[offset + i].length();  final int separatorLength=separator.length();  m+=(length - 1) * separatorLength;  final int l=length();  ensureCapacity(l + m);  m=0;  for (int i=0; i < length; i++) {    if (i != 0) {      getChars(separator,0,separatorLength,array,l + m);      m+=separatorLength;    }    getChars(a[i],0,a[i + offset].length(),array,l + m);    m+=a[i].length();  }  if (hashLength < 0)   hashLength=-1; else   hashLength=l + m;  return this;}  }
class C{  public ArrayIndexOutOfBoundsException(){  super();}  }
class C{  private View findFocusableViewInBounds(boolean topFocus,int top,int bottom,boolean leftFocus,int left,int right){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewTop=view.getTop();    int viewBottom=view.getBottom();    int viewLeft=view.getLeft();    int viewRight=view.getRight();    if (top < viewBottom && viewTop < bottom && left < viewRight && viewLeft < right) {      final boolean viewIsFullyContained=(top < viewTop) && (viewBottom < bottom) && (left < viewLeft)&& (viewRight < right);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToVerticalBoundary=(topFocus && viewTop < focusCandidate.getTop()) || (!topFocus && viewBottom > focusCandidate.getBottom());        final boolean viewIsCloserToHorizontalBoundary=(leftFocus && viewLeft < focusCandidate.getLeft()) || (!leftFocus && viewRight > focusCandidate.getRight());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToVerticalBoundary && viewIsCloserToHorizontalBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToVerticalBoundary && viewIsCloserToHorizontalBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private void dump(String who,Event e){  StringBuffer sb=new StringBuffer("--- [ContentProposalAdapter]\n");  sb.append(who);  sb.append(" - e: keyCode=" + e.keyCode + hex(e.keyCode));  sb.append("; character=" + e.character + hex(e.character));  sb.append("; stateMask=" + e.stateMask + hex(e.stateMask));  sb.append("; doit=" + e.doit);  sb.append("; detail=" + e.detail + hex(e.detail));  sb.append("; widget=" + e.widget);  System.out.println(sb);}  }
class C{  public Builder url(String url){  if (url == null)   throw new IllegalArgumentException("url == null");  if (url.regionMatches(true,0,"ws:",0,3)) {    url="http:" + url.substring(3);  } else   if (url.regionMatches(true,0,"wss:",0,4)) {    url="https:" + url.substring(4);  }  HttpUrl parsed=HttpUrl.parse(url);  if (parsed == null)   throw new IllegalArgumentException("unexpected url: " + url);  return url(parsed);}  }
class C{  private void readDistanceMatrix(String filename){  LOG.info("Reading distance matrix from " + filename);  Map<String,Integer> siteMap;  Map<Integer,String> siteIndexMap;  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=br.readLine();    String[] sa;    if (line != null) {      sa=line.split(",");    } else {      throw new NullPointerException("Null line read. Not expected.");    }    int numberOfSites=sa.length - 1;    siteMap=new HashMap<>(numberOfSites);    siteIndexMap=new HashMap<>();    for (int i=1; i < sa.length; i++) {      String siteId=sa[i];      this.sites.add(siteId);      siteMap.put(siteId,new Integer(i));      siteIndexMap.put(new Integer(i),siteId);    }    LOG.info("... read " + numberOfSites + " sites.");    while ((line=br.readLine()) != null) {      sa=line.split(",");      if (sa.length != numberOfSites + 1) {        LOG.error("Wrong line length read!!");      }      String demandPointId=sa[0];      this.demandPoints.add(demandPointId);      for (int i=1; i < sa.length; i++) {        double distance=Double.POSITIVE_INFINITY;        try {          distance=Double.parseDouble(sa[i]);        } catch (        Exception e) {          LOG.error("Cannot convert " + sa[i] + " to distance of type double.");          e.printStackTrace();        }        distanceMatrix.createEntry(demandPointId,siteIndexMap.get(i),distance);      }    }    LOG.info("... read " + this.demandPoints.size() + " demand points (rows).");    LOG.info("... read " + (sa.length - 1) + " sites (columns).");  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Could not read from " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + filename);    }  }}  }
class C{  public void cleanUp(){  segments=new Vector<Point2D>();  totalDistance=0.0;  distance=0.0;  if (theMap != null) {    theMap.removePaintListener(this);    theMap.repaint();    theMap=null;  }}  }
class C{  private Type erasure(Type t){  return types.erasure(t);}  }
class C{  public void updated(){  if (treenode != null) {    treenode.setUserObject(this);  }  if (editor != null) {    editor.updateSummary();  }}  }
class C{  public Boolean isObservationDomainIdSupported(){  return observationDomainIdSupported;}  }
class C{  public Component(String name,boolean enableCache){  if (enableCache) {    scopeCache=new ScopeCache();  } else {    scopeCache=null;  }  this.name=name;}  }
class C{  public TableColumn(int modelIndex,int width){  this(modelIndex,width,null,null);}  }
class C{  public BeanBoxDnDCatcher(DragSource ds){  this(ds,null);}  }
class C{  public void removeList(){  DialogFragment dialog=RemoveListDialogFragment.newInstance(mShoppingList,mListId,mSharedWithUsers);  dialog.show(getFragmentManager(),"RemoveListDialogFragment");}  }
class C{  private double[][] loadParameters(File file) throws IOException {  SampleReader reader=null;  List<double[]> parameterList=new ArrayList<double[]>();  try {    reader=new SampleReader(file,parameterFile);    while (reader.hasNext()) {      parameterList.add(toArray(reader.next()));    }  }  finally {    if (reader != null) {      reader.close();    }  }  return parameterList.toArray(new double[0][]);}  }
class C{  public void addElement(SequenceElement element){  includedElements.add(element);}  }
class C{  public boolean adjustValue(long key,int amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  private int roundUpPower2(int x){  x=x - 1;  x=x | (x >> 1);  x=x | (x >> 2);  x=x | (x >> 4);  x=x | (x >> 8);  x=x | (x >> 16);  return x + 1;}  }
class C{  public byte[] generateSignature() throws OpenStegoException {  return null;}  }
class C{  public static void registerSatellite(String name,Class<? extends SatelliteBase> clazz){  registry.put(name,clazz);}  }
class C{  public int hashCode(){  return getLastRawOffset() ^ checksum;}  }
class C{  public void handleDOMNodeRemovedEvent(MutationEvent evt){}  }
class C{  public boolean remove(Object o){  return remove((Rectangle)o);}  }
class C{  public FastCharBuffer append(char element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  protected void emit_ProjectDescription___RightCurlyBracketKeyword_17_3_SourcesKeyword_17_0_LeftCurlyBracketKeyword_17_1__q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public final void mesh(Mesh3D mesh,boolean smooth){  mesh(mesh,smooth,0);}  }
class C{  public static LazyListX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  public static String unmergedFiles(GitRepository repository){  conflict(repository,BRANCH_FOR_UNMERGED_CONFLICTS,"unmerged.txt");  GitExecutor.git("merge " + BRANCH_FOR_UNMERGED_CONFLICTS,true);  return GitExecutor.git("branch -D " + BRANCH_FOR_UNMERGED_CONFLICTS);}  }
class C{  protected static float calcHitRatio(long lookups,long hits){  return (lookups == 0) ? 0.0f : BigDecimal.valueOf((double)hits / (double)lookups).setScale(2,RoundingMode.HALF_EVEN).floatValue();}  }
class C{  public BigInteger countStatements(final FluoClient fluo){  checkNotNull(fluo);  try (Snapshot sx=fluo.newSnapshot()){    final Iterator<ColumnScanner> rows=sx.scanner().fetch(FluoQueryColumns.TRIPLES).byRow().build().iterator();    BigInteger count=BigInteger.valueOf(0L);    while (rows.hasNext()) {      rows.next();      count=count.add(BigInteger.ONE);    }    return count;  } }  }
class C{  public static double tRand(double df){  return (normalRand() / Math.sqrt(chisqRand(df) / df));}  }
class C{  private boolean createOrUpdateTypeSubstitution(final DragAndDropSupportWrapper wrapper) throws UnsupportedFlavorException, IOException, CouldntSaveDataException {  final INaviOperandTreeNode node=wrapper.determineDropNode();  if (!isLegalDropNode(node)) {    return false;  }  final BaseType baseType=wrapper.getDroppedBaseType();  if (node.getTypeSubstitution() != null) {    typeManager.updateTypeSubstitution(node,node.getTypeSubstitution(),baseType,new ArrayList<TypeMember>(),0);  } else {    typeManager.createTypeSubstitution(node,baseType,node.getOperandPosition(),0,node.getInstructionAddress());  }  return true;}  }
class C{  public static String documentNo(int p_PP_MRP_ID) throws SQLException {  if (p_PP_MRP_ID == 0)   return "";  String documentNo="";  String sql="SELECT CASE WHEN mrp.OrderType = 'FTC' THEN (SELECT f.Name FROM M_Forecast f WHERE f.M_Forecast_ID=mrp.M_Forecast_ID) " + "WHEN mrp.OrderType = 'POO' THEN (SELECT o.DocumentNo FROM C_Order o WHERE o.C_Order_ID=mrp.C_Order_ID) " + "WHEN mrp.OrderType = 'DOO' THEN (SELECT o.DocumentNo FROM DD_Order o WHERE o.DD_Order_ID=mrp.DD_Order_ID) "+ "WHEN mrp.OrderType = 'SOO' THEN (SELECT o.DocumentNo FROM C_Order o WHERE o.C_Order_ID=mrp.C_Order_ID) "+ "WHEN mrp.OrderType = 'MOP' THEN (SELECT o.DocumentNo FROM PP_Order o WHERE o.PP_Order_ID=mrp.PP_Order_ID) "+ "WHEN mrp.OrderType = 'POR' THEN (SELECT r.DocumentNo FROM M_Requisition r WHERE r.M_Requisition_ID=mrp.M_Requisition_ID) "+ "END AS DocumentNo "+ "FROM PP_MRP mrp WHERE mrp.PP_MRP_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_PP_MRP_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    documentNo=rs.getString(1);  }  rs.close();  pstmt.close();  return documentNo;}  }
class C{  public final int numElements(){  return m_Elements.length;}  }
class C{  public long totalSize(){  DoubleBuffer[] fullBuffers=_getFullOrPartialBuffers();  long totalSize=0;  for (int i=fullBuffers.length; --i >= 0; ) {    totalSize+=fullBuffers[i].size() * fullBuffers[i].weight();  }  return totalSize;}  }
class C{  public void clear(){  _elementOrder.clear();  _elements.clear();}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();  if (Constants.ELEMNAME_WITHPARAM == type) {    setParamElem((ElemWithParam)newChild);  }  return super.appendChild(newChild);}  }
class C{  @Override public BigdataValueFactory newBNodeContext(){  throw new UnsupportedOperationException();}  }
class C{  public static PrivateKey privateKeyFromPkcs8(String privateKeyPem) throws IOException {  StringReader reader=new StringReader(privateKeyPem);  Section section=PemReader.readFirstSectionAndClose(reader,PRIVATE_KEY);  if (section == null) {    throw new IOException("Invalid PKCS8 data.");  }  try {    byte[] decodedKey=section.getBase64DecodedBytes();    PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(decodedKey);    KeyFactory keyFactory=SecurityUtils.getRsaKeyFactory();    return keyFactory.generatePrivate(keySpec);  } catch (  Exception e) {    throw new IOException("Unexpected exception reading PKCS data",e);  }}  }
class C{  public Observable<Integer> unreadMessagesCount(){  return unreadMessagesCount.asObservable();}  }
class C{  public static Type fromExceptionSet(ExceptionSet exceptionSet) throws ClassNotFoundException {  Type commonSupertype=exceptionSet.getCommonSupertype();  if (commonSupertype.getType() != T_OBJECT) {    return commonSupertype;  }  ObjectType exceptionSupertype=(ObjectType)commonSupertype;  String className=exceptionSupertype.getClassName();  if ("java.lang.Throwable".equals(className)) {    return exceptionSupertype;  }  return new ExceptionObjectType(className,exceptionSet);}  }
class C{  public void updateSharedContext(EGLContext sharedContext){  mHandler.sendMessage(mHandler.obtainMessage(MSG_UPDATE_SHARED_CONTEXT,sharedContext));}  }
class C{  public static int toInt(byte a,byte b,byte c,byte d){  return (a << (BYTE_SIZE * 3)) | ((b & BYTE_MASK) << (BYTE_SIZE * 2)) | ((c & BYTE_MASK) << BYTE_SIZE)| (d & BYTE_MASK);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        addToken(Token.WHITESPACE,false);      }case 5:    break;case 2:{    addNullToken();    return firstToken;  }case 6:break;case 4:{addToken(Token.IDENTIFIER,true);}case 7:break;case 1:{addToken(Token.IDENTIFIER,false);}case 8:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 22:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public YadisUrl(String urlString) throws YadisException {  this(urlFromString(urlString));  if (!isValid(this._yadisUrl))   throw new YadisException("The scheme name of a Yadis URL must be 'http' or 'https'",OpenIDException.YADIS_INVALID_SCHEME);}  }
class C{  @Override public boolean handleReferenceFromImmortalSpace(Address addr){  if (subspace.addressInRange(addr)) {    int index=subspace.getIndex(addr);    refFromImmortalStream.increment(index,(short)1);    this.totalRefFromImmortal++;    return true;  } else {    return false;  }}  }
class C{  public void checkStateErrors(MediaRecorderStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInRecordingState);  assertTrue(!stateErrors.errorInInitialState);  assertTrue(!stateErrors.errorInInitialStateAfterReset);  assertTrue(!stateErrors.errorInInitialStateAfterStop);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInErrorState);  assertTrue(!stateErrors.errorInDataSourceConfiguredState);}  }
class C{  void nextPage(PageBtreeCursor cursor){  if (parentPageId == PageBtree.ROOT) {    cursor.setCurrent(null,0);    return;  }  PageBtreeNode next=(PageBtreeNode)index.getPage(parentPageId);  next.nextPage(cursor,getPos());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrinsertdataoffsetnegative.class,args);}  }
class C{  void addPendingTransaction(String txCoordinatorLink){synchronized (this.context) {    if (this.context.txCoordinatorLinks == null) {      this.context.txCoordinatorLinks=new HashSet<>();    }    this.context.txCoordinatorLinks.add(txCoordinatorLink);  }  toggleOption(ServiceOption.TRANSACTION_PENDING,true);}  }
class C{  protected void sequence_ParameterizedTypeRefNominal_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static boolean canBeDischarged(ItemStack itemstack){  return (MekanismUtils.useIC2() && itemstack.getItem() instanceof IElectricItem && ((IElectricItem)itemstack.getItem()).canProvideEnergy(itemstack)) || (itemstack.getItem() instanceof IEnergizedItem && ((IEnergizedItem)itemstack.getItem()).canSend(itemstack)) || (MekanismUtils.useRF() && itemstack.getItem() instanceof IEnergyContainerItem && ((IEnergyContainerItem)itemstack.getItem()).extractEnergy(itemstack,1,true) != 0)|| itemstack.getItem() == Items.redstone;}  }
class C{  private void assignLoopExitState(LoopExitNode loopExit,AbstractMergeNode loopExplosionMerge,AbstractEndNode loopExplosionEnd){  FrameState oldState=loopExplosionMerge.stateAfter();  NodeBitMap loopBeginValues=new NodeBitMap(methodScope.graph);  for (FrameState state=loopExit.loopBegin().stateAfter(); state != null; state=state.outerFrameState()) {    for (    ValueNode value : state.values()) {      if (value != null && !value.isConstant() && !loopExit.loopBegin().isPhiAtMerge(value)) {        loopBeginValues.mark(ProxyPlaceholder.unwrap(value));      }    }  }  List<ValueNode> newValues=new ArrayList<>(oldState.values().size());  for (  ValueNode v : oldState.values()) {    ValueNode value=v;    ValueNode realValue=ProxyPlaceholder.unwrap(value);    if (realValue instanceof PhiNode && loopExplosionMerge.isPhiAtMerge(realValue)) {      value=((PhiNode)realValue).valueAt(loopExplosionEnd);      realValue=ProxyPlaceholder.unwrap(value);    }    if (realValue == null || realValue.isConstant() || loopBeginValues.contains(realValue) || !methodScope.graph.isNew(methodScope.methodStartMark,realValue)) {      newValues.add(realValue);    } else {      GraalError.guarantee(value instanceof ProxyPlaceholder && ((ProxyPlaceholder)value).proxyPoint == loopExplosionMerge,"Value flowing out of loop, but we are not prepared to insert a ProxyNode");      ProxyPlaceholder proxyPlaceholder=(ProxyPlaceholder)value;      ValueProxyNode proxy=ProxyNode.forValue(proxyPlaceholder.value,loopExit,methodScope.graph);      proxyPlaceholder.setValue(proxy);      newValues.add(proxy);    }  }  FrameState newState=new FrameState(oldState.outerFrameState(),oldState.getCode(),oldState.bci,newValues,oldState.localsSize(),oldState.stackSize(),oldState.rethrowException(),oldState.duringCall(),oldState.monitorIds(),oldState.virtualObjectMappings());  assert loopExit.stateAfter() == null;  loopExit.setStateAfter(methodScope.graph.add(newState));}  }
class C{  public static void registerListeners(){  for (  Protocol protocol : registerList) {    protocol.registerListeners();  }  registerList.clear();}  }
class C{  public void sendPlayerPickedPassThrough(Integer targetId,Integer attackerId,Coords pos){  Object[] data=new Object[3];  data[0]=targetId;  data[1]=attackerId;  data[2]=pos;  send(new Packet(Packet.COMMAND_ENTITY_GTA_HEX_SELECT,data));}  }
class C{  public static Object[] toObjectArray(final Object obj){  if (obj == null) {    return new Object[]{null};  }  if (obj.getClass().isPrimitive() || obj.getClass().getName().startsWith("java.lang") || obj.getClass().isArray()) {    return escapeXml(obj);  }  final Field[] fields=obj.getClass().getDeclaredFields();  final Object[] rez=new Object[fields.length];  for (int i=0; i < fields.length; i++) {    if (Modifier.isStatic(fields[i].getModifiers())) {      rez[i]="Static: " + fields[i].getName();      continue;    }    if (!fields[i].isAccessible()) {      fields[i].setAccessible(true);    }    try {      final Object value=fields[i].get(obj);      if (value instanceof HibernateProxy) {        rez[i]=((HibernateProxy)value).getHibernateLazyInitializer().getIdentifier() + ": " + fields[i].getName()+ " (H)";      } else       if (value instanceof Auditable) {        rez[i]=((Auditable)value).getId() + ": " + fields[i].getName();      } else       if (value instanceof PersistentCollection) {        rez[i]="Collection: " + fields[i].getName() + " (H)";      } else       if (value instanceof Collection) {        rez[i]="Collection: " + fields[i].getName();      } else       if (value instanceof Map) {        rez[i]="Map: " + fields[i].getName();      } else       if (value != null) {        rez[i]=StringEscapeUtils.escapeXml(String.valueOf(value));      }    } catch (    Exception ex) {      rez[i]="Error: " + fields[i].getName() + ", cause: "+ ex.getMessage();    }  }  return rez;}  }
class C{  public boolean isCompositeService(){  boolean isComposite=false;  if (this.listDataServiceDefinition != null && this.listDataServiceDefinition.size() > 1)   isComposite=true; else   isComposite=false;  return isComposite;}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case LEAVE_PET:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  public boolean isLocalIP(){  return IPRange.AClassLocalIPRange().contains(this) || IPRange.BClassLocalIPRange().contains(this) || IPRange.CClassLocalIPRange().contains(this);}  }
class C{  public boolean isCacheableTrue(){  if (m_cacheable != null) {    return m_cacheable.booleanValue();  } else   if (isInheritanceSubclass()) {    return getInheritanceParentDescriptor().isCacheableTrue();  }  return false;}  }
class C{  public StopStopTimePreCalcSerializable(String inputFile,Scenario scenario,boolean logarithmic){  this.logarithmic=logarithmic;  this.scenario=scenario;  BufferedReader reader=IOUtils.getBufferedReader(inputFile);  String txt="";  while (true) {    try {      txt=reader.readLine();      if (txt == null)       break;      String[] split=txt.split("\t");      Map<String,Map<Integer,Tuple<Double,Double>>> toMap=stopStopTimes.get(split[0]);      if (toMap == null) {        toMap=new HashMap<>();        stopStopTimes.put(split[0],toMap);      }      Map<Integer,Tuple<Double,Double>> timeData=toMap.get(split[1]);      if (timeData == null) {        timeData=new TreeMap<>();        toMap.put(split[1],timeData);      }      timeData.put(Integer.parseInt(split[2]),new Tuple<>(Double.parseDouble(split[3]),Double.parseDouble(split[4])));    } catch (    IOException e) {      e.printStackTrace();    }catch (    ArrayIndexOutOfBoundsException e) {      if (aiobCounter < 10) {        System.err.println("Seems one of the lines in the StopStopTime input file is missing a value. Skipping it.");      } else {        System.err.println("Seems one of the lines in the StopStopTime input file is missing a value. Skipping further warnings...");      }      aiobCounter++;    }catch (    NumberFormatException e) {      if (nfeCounter < 10) {        System.err.println("Some values in the StopStopTime input file are of the wrong type. Skipping it.");      } else {        System.err.println("Some values in the StopStopTime input file are of the wrong type. Skipping further warnings...");      }      nfeCounter++;    }  }  System.out.println("\n\n*************************************************************************\n\n");  System.out.println("STOPSTOPTIMES LOADED, filling in the blanks from the schedule and network");  System.out.println("\n\n*************************************************************************\n\n");  for (  TransitLine transitLine : scenario.getTransitSchedule().getTransitLines().values()) {    for (    TransitRoute route : transitLine.getRoutes().values()) {      TRANSITSTOPS:       for (int s=0; s < route.getStops().size() - 1; s++) {        String origin=route.getStops().get(s).getStopFacility().getId().toString();        String destination=route.getStops().get(s + 1).getStopFacility().getId().toString();        Map<String,Map<Integer,Tuple<Double,Double>>> toMap=stopStopTimes.get(origin);        if (toMap == null) {          toMap=new HashMap<>();          stopStopTimes.put(origin,toMap);        }        Map<Integer,Tuple<Double,Double>> timeData=toMap.get(destination);        if (timeData == null) {          timeData=new TreeMap<>();          toMap.put(destination,timeData);          try {            List<TransitRouteStop> stops;            stops=scenario.getTransitSchedule().getTransitLines().get(transitLine.getId()).getRoutes().get(route.getId()).getStops();            if (stops == null)             throw new NullPointerException();            Link fromLink=null;            Link toLink=null;            for (            TransitRouteStop tss : stops) {              if (tss.getStopFacility().getId().toString().equals(origin)) {                fromLink=scenario.getNetwork().getLinks().get(tss.getStopFacility().getLinkId());              }              if (tss.getStopFacility().getId().toString().equals(destination)) {                toLink=scenario.getNetwork().getLinks().get(tss.getStopFacility().getLinkId());              }            }            if (fromLink == null || toLink == null)             throw new NullPointerException();            NetworkRoute networkRoute=scenario.getTransitSchedule().getTransitLines().get(transitLine.getId()).getRoutes().get(route.getId()).getRoute();            NetworkRoute subRoute=networkRoute.getSubRoute(fromLink.getId(),toLink.getId());            List<Id<Link>> linkIds=new ArrayList<>();            linkIds.addAll(subRoute.getLinkIds());            linkIds.add(toLink.getId());            double freeSpeedTravelTime=0;            for (            Id<Link> id : linkIds) {              Link link=scenario.getNetwork().getLinks().get(id);              freeSpeedTravelTime+=link.getLength() / link.getFreespeed();            }            if (logarithmic)             timeData.put(0,new Tuple<Double,Double>(Math.log(freeSpeedTravelTime),0.005)); else             timeData.put(0,new Tuple<Double,Double>(freeSpeedTravelTime,0.0));          } catch (          NullPointerException ne) {            System.err.printf("Couldnt create STOP-STOP entry for for from: %s, to: %s, route: %s, line: %s\n",origin,destination,route.getId().toString(),transitLine.getId().toString());            continue TRANSITSTOPS;          }        } else {          continue TRANSITSTOPS;        }      }    }  }}  }
class C{  public static <T>Set<T> plus(Set<T> left,Collection<T> right){  return (Set<T>)plus((Collection<T>)left,right);}  }
class C{  private Item prepareItem(String name,int price){  Item prototype=SingletonRepository.getEntityManager().getItem(name);  Item item=new ItemInformation(prototype);  if (seller) {    item.put("price",-price);  } else {    item.put("price",price);  }  item.put("description_info",item.describe());  item.put("description",item.describe());  return item;}  }
class C{  private long computeGridBaseOffsets(){  StringBuffer buf=LOG.isDebuggingFinest() ? new StringBuffer() : null;  double[] min=domain[0], max=domain[1];  long total=1;  for (int d=0; d < dim; d++) {    final double mi=min[d], ma=max[d], wi=ma - mi;    if (mi == Double.NEGATIVE_INFINITY || ma == Double.POSITIVE_INFINITY || mi != mi || ma != ma) {      throw new IncompatibleDataException("Dimension " + d + " contains non-finite values.");    }    int c=cells[d]=Math.max(1,(int)Math.ceil(wi / gridwidth));    offset[d]=mi - (c * gridwidth - wi) * .5;    assert (offset[d] <= mi) : "Grid inconsistent.";    assert (offset[d] + c * gridwidth >= ma) : "Grid inconsistent.";    total*=c;    if (total < 0) {      LOG.warning("Excessive amount of grid cells (long overflow)! Use larger grid cells.");      if (total < 0) {        overflown=true;        total&=0x7FFF_FFFF_FFFF_FFFFL;      }    }    if (buf != null) {      buf.append(d).append(": min=").append(mi).append(" max=").append(ma);      double s=offset[d];      for (int i=0; i <= c; i++) {        buf.append(' ').append(s);        s+=gridwidth;      }      buf.append('\n');    }  }  if (buf != null) {    LOG.debugFinest(buf);  }  return total;}  }
class C{  @Override public void paintComponent(Graphics g){  paintME(g);  if (m_osi != null && m_fastScroll.isSelected()) {    g.drawImage(m_osi,0,0,this);  }}  }
class C{  public void updateProjectionStackStatus(boolean containsBackProjections,boolean containsForwardProjections){  dimBackButton=!containsBackProjections;  dimForwardButton=!containsForwardProjections;  resetButtons(containsBackProjections,containsForwardProjections);}  }
class C{  public final void addToolButton(@NotNull IsWidget button){  if (button != null) {    toolbarHeader.addEast(button,22);  }}  }
class C{  protected boolean isEnterKey(int keyCode){  return keyCode == ENTER_KEY;}  }
class C{  public void testGenerateMergedFileNoOrig() throws Exception {  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(false);  origFile=new File("/dev/null");  File destFile=new File("dest/foo");  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(true);  File modFile=new File("mod/foo");  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(true);  File mergedFile=new File("merged_codebase_7/foo");  fileSystem.makeDirsForFile(mergedFile);  fileSystem.copyFile(destFile,mergedFile);  List<String> mergeArgs=ImmutableList.of(mergedFile.getAbsolutePath(),origFile.getAbsolutePath(),modFile.getAbsolutePath());  expect(cmd.runCommand("merge",mergeArgs,mergedCodebaseLocation.getAbsolutePath())).andReturn("");  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,null,orig,mod,dest);  merger.generateMergedFile("foo");  control.verify();  assertThat(merger.getFailedToMergeFiles()).isEmpty();  assertTrue(merger.getMergedFiles().contains(mergedFile.getAbsolutePath()));}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","whit");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static final double euclideanLength(final double[] v1){  double acc=0.0;  for (int row=0; row < v1.length; row++) {    final double v=v1[row];    acc+=v * v;  }  return Math.sqrt(acc);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  String url="https://stendhalgame.org/character/";  String name=null;  if ((params.length > 0) && (params[0] != null)) {    name=params[0];  } else {    name=User.getCharacterName();    if (name == null) {      return true;    }  }  url=url + name + ".html";  ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine("Trying to open #" + url + " in your browser.",NotificationType.CLIENT));  BareBonesBrowserLaunch.openURL(url);  return true;}  }
class C{  public static Object resolveIdentAsEnumConst(String constant,EngineImportService engineImportService,boolean isAnnotation) throws ExprValidationException {  int lastDotIndex=constant.lastIndexOf('.');  if (lastDotIndex == -1) {    return null;  }  String className=constant.substring(0,lastDotIndex);  String constName=constant.substring(lastDotIndex + 1);  className=unescape(className);  constName=unescape(constName);  Class clazz;  try {    clazz=engineImportService.resolveClass(className,isAnnotation);  } catch (  EngineImportException e) {    return null;  }  Field field;  try {    field=clazz.getField(constName);  } catch (  NoSuchFieldException e) {    return null;  }  int modifiers=field.getModifiers();  if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers)) {    try {      return field.get(null);    } catch (    IllegalAccessException e) {      throw new ExprValidationException("Exception accessing field '" + field.getName() + "': "+ e.getMessage(),e);    }  }  return null;}  }
class C{  public MapEvent put(String trackingId,byte[] data,long timeout) throws KeeperException, InterruptedException {  String path=createData(dir + "/" + prefix+ trackingId,data,CreateMode.PERSISTENT);  String watchID=createData(dir + "/" + response_prefix+ path.substring(path.lastIndexOf("-") + 1),null,CreateMode.EPHEMERAL);  Object lock=new Object();  LatchChildWatcher watcher=new LatchChildWatcher(lock);synchronized (lock) {    if (zookeeper.exists(watchID,watcher,true) != null) {      watcher.await(timeout);    }  }  byte[] bytes=zookeeper.getData(watchID,null,null,true);  zookeeper.delete(watchID,-1,true);  return new MapEvent(watchID,bytes,watcher.getWatchedEvent());}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  public Coordinate midPoint(){  return midPoint(p0,p1);}  }
class C{  public void hideColumn(int column){  hiddenColumns.add(column);  this.fireTableStructureChanged();}  }
class C{  public BaseSearchRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String q){  super(requestUrl,client,options);  mQ=q;}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final CModule module,final List<INaviFunction> functions){  Preconditions.checkNotNull(provider,"IE00404: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE00405: Module argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(module),"IE00406: Module is not part of this database");  Preconditions.checkNotNull(functions,"IE00407: Functions argument can not be null");  for (  final INaviFunction function : functions) {    Preconditions.checkNotNull(function,"IE00408: Function list contains a null-element");    Preconditions.checkArgument(function.inSameDatabase(module),"IE00409: Function list contains an element that is not part of this database");  }}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public CdmaCellLocation(Bundle bundle){  this.mBaseStationId=bundle.getInt("baseStationId",mBaseStationId);  this.mBaseStationLatitude=bundle.getInt("baseStationLatitude",mBaseStationLatitude);  this.mBaseStationLongitude=bundle.getInt("baseStationLongitude",mBaseStationLongitude);  this.mSystemId=bundle.getInt("systemId",mSystemId);  this.mNetworkId=bundle.getInt("networkId",mNetworkId);}  }
class C{  public void decelerateTimeTravel(){  timeTravelClock.decelerateTimeTravel();}  }
class C{  public StoppableReentrantLock(CancelCriterion stopper){  Assert.assertTrue(stopper != null);  this.lock=new ReentrantLock();  this.stopper=stopper;}  }
class C{  public static CreateServiceSessionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateServiceSessionE object=new CreateServiceSessionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","createServiceSession").equals(reader.getName())) {          object.setCreateServiceSession(CreateServiceSession.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public Sample(final double xdata,final double ydata){  this(xdata,ydata,0,0,0,0,"");}  }
class C{  private void testAlterTableAlterColumnWithConstraint() throws SQLException {  if (config.memory) {    return;  }  stat.execute("create table test(id int check(id in (1,2)) )");  stat.execute("alter table test alter id rename to id2");  conn.close();  conn=getConnection(getTestName());  stat=conn.createStatement();  stat.execute("insert into test values(1)");  assertThrows(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,stat).execute("insert into test values(3)");  stat.execute("drop table test");}  }
class C{  public boolean isBefore(LocalTime other){  return compareTo(other) < 0;}  }
class C{  public static void parse(URL url,String enc) throws IOException {  encoding=enc;  parse(url,System.out,new StdAppletViewerFactory());}  }
class C{  public String trace(){  StringWriter stringWriter=new StringWriter();  PrintWriter writer=new PrintWriter(stringWriter);  thrownException().printStackTrace(writer);  return stringWriter.toString();}  }
class C{  private static void checkBinarySearch(List<Integer> l,int i,Comparator<Integer> comparator){  try {    equal(i,Collections.binarySearch(l,l.get(i),comparator));  } catch (  Throwable t) {    unexpected(t);  }}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + "[" + _pathLog+ "]";}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  private void init(Context context,AttributeSet attrs){  setWillNotDraw(false);  mPlayPauseDrawable=new PlayPauseDrawable(context);  mPlayPauseDrawable.setCallback(callback);  mPlayPauseDrawable.setToggleListener(this);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.playerview);  Drawable mDrawableCover=a.getDrawable(R.styleable.playerview_cover);  if (mDrawableCover != null)   mBitmapCover=drawableToBitmap(mDrawableCover);  mButtonColor=a.getColor(R.styleable.playerview_buttonColor,mButtonColor);  mProgressEmptyColor=a.getColor(R.styleable.playerview_progressEmptyColor,mProgressEmptyColor);  mProgressLoadedColor=a.getColor(R.styleable.playerview_progressLoadedColor,mProgressLoadedColor);  mTextColor=a.getColor(R.styleable.playerview_textColor,mTextColor);  mTextSize=a.getDimensionPixelSize(R.styleable.playerview_textSize,mTextSize);  a.recycle();  mRotateDegrees=0;  mHandlerRotate=new Handler();  mHandlerProgress=new Handler();  mPaintButton=new Paint();  mPaintButton.setAntiAlias(true);  mPaintButton.setStyle(Paint.Style.FILL);  mPaintButton.setColor(mButtonColor);  mPaintProgressEmpty=new Paint();  mPaintProgressEmpty.setAntiAlias(true);  mPaintProgressEmpty.setColor(mProgressEmptyColor);  mPaintProgressEmpty.setStyle(Paint.Style.STROKE);  mPaintProgressEmpty.setStrokeWidth(12.0f);  mPaintProgressLoaded=new Paint();  mPaintProgressEmpty.setAntiAlias(true);  mPaintProgressLoaded.setColor(mProgressLoadedColor);  mPaintProgressLoaded.setStyle(Paint.Style.STROKE);  mPaintProgressLoaded.setStrokeWidth(12.0f);  mPaintTime=new Paint();  mPaintTime.setColor(mTextColor);  mPaintTime.setAntiAlias(true);  mPaintTime.setTextSize(mTextSize);  rectF=new RectF();  mRectText=new Rect();}  }
class C{  public final LC minHeight(String height){  setHeight(LayoutUtil.derive(getHeight(),ConstraintParser.parseUnitValue(height,false),null,null));  return this;}  }
class C{  public boolean undo(INode n){  FreeCellNode state=(FreeCellNode)n;  state.removeFree(card);  Column col=state.cols[nth];  col.add(card);  return true;}  }
class C{  @GwtIncompatible("Array.newInstance(Class, int)") @SuppressWarnings({"unchecked"}) static <T>T[] newArray(Class<T> type,int length){  return (T[])Array.newInstance(type,length);}  }
class C{  public JsonBuilder(Object content){  this.content=content;  this.generator=JsonOutput.DEFAULT_GENERATOR;}  }
class C{  public MessageBuilder appendMention(TextChannel channel){  builder.append("<#").append(channel.getId()).append('>');  mentionedTextChannels.add(channel);  return this;}  }
class C{  public String[] types(){  return this.types;}  }
class C{  static String[] values(final Class<?> type){  if (type == null) {    return null;  }  if (!isValidEnum(type)) {    return null;  }  try {    final String valuesMethod="values";    final Method m=type.getMethod(valuesMethod);    final Class<?> returnType=m.getReturnType();    if (returnType.isArray()) {      final Object[] ret=(Object[])m.invoke(null);      final String[] res=new String[ret.length];      for (int i=0; i < ret.length; i++) {        res[i]=ret[i].toString().toLowerCase(Locale.getDefault());      }      return res;    }    return null;  } catch (  final NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  public void clear(){  table=new Entry[INITIAL_CAPACITY];  count=0;  referenceQueue=new ReferenceQueue();}  }
class C{  public void step(SimState state){}  }
class C{  public CycleHandler(Wikipedia wiki,CategoryGraph categoryGraph){  this.wiki=wiki;  this.categoryGraph=categoryGraph;}  }
class C{  @SuppressWarnings("unchecked") public Result prepare(UpdateRequest request,IndexShard indexShard){  final GetResult getResult=indexShard.getService().get(request.type(),request.id(),new String[]{RoutingFieldMapper.NAME,ParentFieldMapper.NAME,TTLFieldMapper.NAME,TimestampFieldMapper.NAME},true,request.version(),request.versionType(),FetchSourceContext.FETCH_SOURCE,false);  return prepare(request,getResult);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrchildnodes2.class,args);}  }
class C{  public static void computePositions(Node node,int depth,double aoff,double awid,int maxdepth){  double r=depth / (maxdepth - 1.);  node.x=Math.sin(aoff + awid * .5) * r;  node.y=Math.cos(aoff + awid * .5) * r;  double cpos=aoff;  double cwid=awid / node.weight;  for (  Node c : node.children) {    computePositions(c,depth + 1,cpos,cwid * c.weight,maxdepth);    cpos+=cwid * c.weight;  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public int lengthOfMonth(){  return chrono.getMonthLength(prolepticYear,monthOfYear);}  }
class C{  RemoteRepository(final RemoteRepositoryManager mgr,final String sparqlEndpointURL,final IRemoteTx tx){  if (mgr == null)   throw new IllegalArgumentException();  if (sparqlEndpointURL == null)   throw new IllegalArgumentException();  this.mgr=mgr;  this.sparqlEndpointURL=sparqlEndpointURL;  this.tx=tx;}  }
class C{  protected String composeTacticalGraphicsSymCode(){  StringBuilder sb=new StringBuilder();  appendFieldValue(sb,this.getScheme(),1);  appendFieldValue(sb,this.getStandardIdentity(),1);  appendFieldValue(sb,this.getCategory(),1);  appendFieldValue(sb,this.getStatus(),1);  appendFieldValue(sb,this.getFunctionId(),6);  sb.append(UNUSED_POSITION_CODE);  appendFieldValue(sb,this.getEchelon(),1);  appendFieldValue(sb,this.getCountryCode(),2);  appendFieldValue(sb,this.getOrderOfBattle(),1);  return sb.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetnextsibling.class,args);}  }
class C{  public Matrix4f m33(float m33){  this.m33=m33;  this._properties(0);  return this;}  }
class C{  @Override public void configure(){}  }
class C{  public int intValue(){  return 0;}  }
class C{  static public String formatInt(int number){  return intFormatter().format(number);}  }
class C{  @Override public void destroy() throws Exception {  if (this.cacheManager != null) {    this.cacheManager.stop();  }}  }
class C{  public void showLoading(){  switchState(LOADING,null,null,null,null,null,Collections.<Integer>emptyList());}  }
class C{  @DSComment("no suspicious activity, only creates object") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:41.604 -0500",hash_original_method="EFAD97F429DE8DB8F9E4AB7241876CEE",hash_generated_method="F267F4777920ABE45213A1BBDCEC5A8C") protected TokenIterator createTokenIterator(HeaderIterator hit){  return new BasicTokenIterator(hit);}  }
class C{  @Override public void clearIdleStartTime(){  _idleStartTime=0;  _is.clearReadTime();}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  static LuaValue upper(LuaValue arg){  return valueOf(arg.checkjstring().toUpperCase());}  }
class C{  public static String removePattern(final String source,final String regex){  return replacePattern(source,regex,StringUtils.EMPTY);}  }
class C{  public void add(double time){  createContainerIfNecessary();  container.add(time);}  }
class C{  public void testHashCode(){  CodeSigner cs1=new CodeSigner(cpath,ts);  CodeSigner cs2=new CodeSigner(cpath,ts);  CodeSigner cs3=new CodeSigner(cpath,null);  assertTrue(cs1.hashCode() == cs2.hashCode());  assertTrue(cs2.hashCode() != cs3.hashCode());}  }
class C{  public void testReadStringRequireUtf8InvalidUtf8() throws Exception {  ByteString.Output rawOutput=ByteString.newOutput();  CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);  int tag=WireFormat.makeTag(1,WireFormat.WIRETYPE_LENGTH_DELIMITED);  output.writeRawVarint32(tag);  output.writeRawVarint32(1);  output.writeRawBytes(new byte[]{(byte)0x80});  output.flush();  CodedInputStream input=rawOutput.toByteString().newCodedInput();  assertEquals(tag,input.readTag());  try {    input.readStringRequireUtf8();    fail("Expected invalid UTF-8 exception.");  } catch (  InvalidProtocolBufferException exception) {    assertEquals("Protocol message had invalid UTF-8.",exception.getMessage());  }}  }
class C{  public Set performRemoveAllAdjunctMessaging(DistributedRemoveAllOperation op,Set cacheOpRecipients,Set adjunctRecipients,FilterRoutingInfo filterRoutingInfo,DirectReplyProcessor processor){  RemoveAllPRMessage prMsg=op.createPRMessagesNotifyOnly(getId());  prMsg.initMessage(this.partitionedRegion,adjunctRecipients,true,processor);  prMsg.setSender(this.partitionedRegion.getDistributionManager().getDistributionManagerId());  Set recipients=null;  Set membersWithRouting=filterRoutingInfo.getMembers();  for (Iterator it=membersWithRouting.iterator(); it.hasNext(); ) {    Object mbr=it.next();    if (!cacheOpRecipients.contains(mbr)) {      if (!adjunctRecipients.contains(mbr)) {        if (recipients == null) {          recipients=new HashSet();          recipients.add(mbr);        }      }    }  }  if (recipients == null) {    recipients=adjunctRecipients;  } else {    recipients.addAll(adjunctRecipients);  }  Set failures=this.partitionedRegion.getDistributionManager().putOutgoing(prMsg);  return failures;}  }
class C{  public void draw(Object object,Graphics2D graphics,DrawInfo2D info){  final double width=info.draw.width * radius * 2;  final double height=info.draw.height * radius * 2;  graphics.setPaint(paint);  final int x=(int)(info.draw.x - width / 2.0);  final int y=(int)(info.draw.y - height / 2.0);  final int w=(int)(width);  final int h=(int)(height);  graphics.fillOval(x,y,w,h);}  }
class C{  public static void writeHeaderContentID(WspEncodingVersion wspEncodingVersion,OutputStream os,String contentId) throws IOException {  int headerId=WspUtil.getWellKnownHeaderId(wspEncodingVersion,WapConstants.HEADER_CONTENT_ID);  if (headerId != -1) {    WspUtil.writeShortInteger(os,headerId);    WspUtil.writeQuotedString(os,contentId);  } else {    WspHeaderEncoder.writeCustomHeader(os,"Content-ID",contentId);  }}  }
class C{  public int tileXToX(int tx){  return tx * tileWidth + tileGridXOffset;}  }
class C{  public Throwable(){}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  public boolean isSigningCertificateIdentified(final String signatureId){  SignatureWrapper signature=getSignatureByIdNullSafe(signatureId);  return signature.isSigningCertificateIdentified();}  }
class C{  public Builder deleteEmails(){  deleteFields.add("emails");  return this;}  }
class C{  public void testNextFloat(){  Random r=new Random();  float f=r.nextFloat();  int i=0;  while (i < NCALLS && r.nextFloat() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  protected SiteSettingsCategory(String category,String androidPermission,int contentSettingsType){  mCategory=category;  mAndroidPermission=androidPermission;  mContentSettingsType=contentSettingsType;}  }
class C{  public void reply(List<Header> responseHeaders,boolean out) throws IOException {  assert (!Thread.holdsLock(FramedStream.this));  boolean outFinished=false;synchronized (this) {    if (responseHeaders == null) {      throw new NullPointerException("responseHeaders == null");    }    if (this.responseHeaders != null) {      throw new IllegalStateException("reply already sent");    }    this.responseHeaders=responseHeaders;    if (!out) {      this.sink.finished=true;      outFinished=true;    }  }  connection.writeSynReply(id,outFinished,responseHeaders);  if (outFinished) {    connection.flush();  }}  }
class C{  public void applyTo(GitVcsSettings settings){  settings.setUpdateType(getUpdateType());  settings.setUpdateChangesPolicy(updateSaveFilesPolicy());}  }
class C{  public static byte[] genPasswordKey(String password){  return genKey(hash(getUTF8Bytes(password)));}  }
class C{  public static Theater theater(String idCinema,String profile,String filter) throws NetworkException {  String params=ServiceSecurity.construireParams(false,AllocineService.CODE,idCinema,AllocineService.PROFILE,profile,AllocineService.FILTER,filter);  String sed=ServiceSecurity.getSED();  String sig=ServiceSecurity.getSIG(params,sed);  try {    AllocineResponse response=getService().theater(idCinema,profile,filter,sed,sig);    return response.getTheater();  } catch (  Exception e) {    throw new NetworkException();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static SubqueryInExpression subqueryNotIn(String property,EPStatementObjectModel model){  return new SubqueryInExpression(getPropExpr(property),model,true);}  }
class C{  public void visitTopLevel(JCCompilationUnit tree){  try {    printUnit(tree,null);    consumeComments(Integer.MAX_VALUE);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.STRICTNESS___ANONYMOUS_STRICTNESS_11:    getAnonymous_strictness_1_1().clear();  return;}super.eUnset(featureID);}  }
class C{  private void addMinimizedSectionNotAvailable(Composite parent,FormToolkit toolkit,String sectionTitle,int numColums){  Section section=toolkit.createSection(parent,ExpandableComposite.TITLE_BAR | ExpandableComposite.TWISTIE);  section.setText(sectionTitle);  section.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  Composite sectionComposite=toolkit.createComposite(section);  GridLayout gridLayout=new GridLayout(numColums,false);  gridLayout.marginLeft=5;  gridLayout.marginTop=5;  sectionComposite.setLayout(gridLayout);  section.setClient(sectionComposite);  if (!minimizedSections.containsKey(sectionTitle)) {    minimizedSections.put(sectionTitle,sectionComposite);  }}  }
class C{  public Statement join(Object table){  statement.append(" JOIN ").append(table);  return this;}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {  multiplexingXXXSocketSupport.receive(received,p,soTimeout);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws SAXException {  String msg="";  super.startElement(handler,uri,localName,rawName,attributes);  ElemTemplateElement ancestor=handler.getElemTemplateElement().getParentElem();  while (ancestor != null && !(ancestor instanceof ElemExsltFunction)) {    if (ancestor instanceof ElemVariable || ancestor instanceof ElemParam || ancestor instanceof ElemExsltFuncResult) {      msg="func:result cannot appear within a variable, parameter, or another func:result.";      handler.error(msg,new SAXException(msg));    }    ancestor=ancestor.getParentElem();  }  if (ancestor == null) {    msg="func:result must appear in a func:function element";    handler.error(msg,new SAXException(msg));  }}  }
class C{  public void endVisit(StringLiteral node){}  }
class C{  public Set<String> checkContains(Collection<String> names){  if (names == null || names.isEmpty())   return Collections.EMPTY_SET;  HashSet<String> result=new HashSet<>();  for (  String s : names)   if (!this.registry.containsKey(s))   result.add(s);  return result;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int whereNode=getArg0AsNode(xctxt);  String fileLocation=null;  if (DTM.NULL != whereNode) {    DTM dtm=xctxt.getDTM(whereNode);    if (DTM.DOCUMENT_FRAGMENT_NODE == dtm.getNodeType(whereNode)) {      whereNode=dtm.getFirstChild(whereNode);    }    if (DTM.NULL != whereNode) {      fileLocation=dtm.getDocumentBaseURI();    }  }  return new XString((null != fileLocation) ? fileLocation : "");}  }
class C{  @Override public boolean canInstantiate(final Class<?> type){  try {    return newInstance(type) != null;  } catch (  final ObjectAccessException e) {    return false;  }}  }
class C{  public TypeRef createSimplifiedIntersection(List<TypeRef> typeRefs,Resource resource){  if (typeRefs.size() > 1 && resource != null) {    return tsh.createIntersectionType(RuleEnvironmentExtensions.newRuleEnvironment(resource),typeRefs.toArray(new TypeRef[typeRefs.size()]));  } else   if (typeRefs.size() == 1) {    return TypeUtils.copyIfContained(typeRefs.get(0));  } else {    return null;  }}  }
class C{  public static void modifyFilePaths(final Config config,final String pathPrefix){  String prefix=pathPrefix;  if (!prefix.endsWith("/") && !prefix.endsWith(File.separator)) {    prefix=prefix + File.separator;  }  config.controler().setOutputDirectory(getAbsolutePath(prefix,config.controler().getOutputDirectory()));  config.network().setInputFile(getAbsolutePath(prefix,config.network().getInputFile()));  config.plans().setInputFile(getAbsolutePath(prefix,config.plans().getInputFile()));  config.facilities().setInputFile(getAbsolutePath(prefix,config.facilities().getInputFile()));  config.counts().setInputFile(getAbsolutePath(prefix,config.counts().getCountsFileName()));  config.households().setInputFile(getAbsolutePath(prefix,config.households().getInputFile()));}  }
class C{  private CCodeNode createCurrentNode(final ICodeNodeProvider resultSet) throws ParserException, CPartialLoadException {  final int nodeId=resultSet.getNodeId();  final int moduleId=resultSet.getModule();  final IAddress parentFunction=resultSet.getParentFunction();  final INaviModule module=modules.get(moduleId);  if (module == null) {    throw new ParserException(String.format("Node with ID %d has unknown parent module with ID %d",nodeId,moduleId));  }  if (!module.isLoaded()) {    try {      module.load();    } catch (    final CouldntLoadDataException e) {      throw new CPartialLoadException("E00066: The view could not be loaded because not all modules that form the view could be loaded",module);    }catch (    final LoadCancelledException e) {      throw new CPartialLoadException("E00067: The view could not be loaded because it was cancelled",module);    }  }  final INaviFunction function=parentFunction == null ? null : module.getContent().getFunctionContainer().getFunction(parentFunction);  if ((parentFunction != null) && (function == null)) {    throw new ParserException(String.format("Node with ID %d has unknown parent function with address %s",nodeId,parentFunction.toHexString()));  }  final double x=resultSet.getX();  final double y=resultSet.getY();  final double width=resultSet.getWidth();  final double height=resultSet.getHeight();  final Color color=new Color(resultSet.getColor());  final Color bordercolor=new Color(resultSet.getBorderColor());  final boolean selected=resultSet.isSelected();  final boolean visible=resultSet.isVisible();  final Integer localCodeNodeCommentId=resultSet.getLocalNodeCommentId();  final Integer globalCodeNodeCommentId=resultSet.getGlobalNodeCommentId();  final CCodeNode codeNode=new CCodeNode(nodeId,x,y,width,height,color,bordercolor,selected,visible,null,function,new HashSet<CTag>(),sqlProvider);  if (localCodeNodeCommentId != null) {    localCommentIdToCodeNode.put(localCodeNodeCommentId,codeNode);  }  if (globalCodeNodeCommentId != null) {    globalCommentIdToCodeNode.put(globalCodeNodeCommentId,codeNode);  }  return codeNode;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenodens03.class,args);}  }
class C{  private static boolean matchAllWildcards(String name,String template){  name=name.toLowerCase(Locale.ENGLISH);  template=template.toLowerCase(Locale.ENGLISH);  StringTokenizer nameSt=new StringTokenizer(name,".");  StringTokenizer templateSt=new StringTokenizer(template,".");  if (nameSt.countTokens() != templateSt.countTokens()) {    return false;  }  while (nameSt.hasMoreTokens()) {    if (!matchWildCards(nameSt.nextToken(),templateSt.nextToken())) {      return false;    }  }  return true;}  }
class C{  @Override public String toString(){  return this.getClassName() + "$" + this.instanceId;}  }
class C{  private void addEdges(Node node,Stack nodeStack,Subgraph subgraph){  node.setVisited(true);  for (Iterator i=((DirectedEdgeStar)node.getOutEdges()).iterator(); i.hasNext(); ) {    DirectedEdge de=(DirectedEdge)i.next();    subgraph.add(de.getEdge());    Node toNode=de.getToNode();    if (!toNode.isVisited())     nodeStack.push(toNode);  }}  }
class C{  public void autoArrange(final ExecutionUnit process){  List<ExecutionUnit> list=new ArrayList<>(1);  list.add(0,process);  autoArrange(list);}  }
class C{  private void createTimeSlot(ArrayList<MAssignmentSlot> list,Timestamp startTime,Timestamp endTime){  GregorianCalendar cal=new GregorianCalendar(Language.getLoginLanguage().getLocale());  cal.setTimeInMillis(m_startDate.getTime());  GregorianCalendar calEnd=new GregorianCalendar(Language.getLoginLanguage().getLocale());  calEnd.setTimeInMillis(m_endDate.getTime());  while (cal.before(calEnd)) {    cal.set(Calendar.HOUR_OF_DAY,0);    cal.set(Calendar.MINUTE,0);    cal.set(Calendar.SECOND,0);    cal.set(Calendar.MILLISECOND,0);    Timestamp start=new Timestamp(cal.getTimeInMillis());    GregorianCalendar cal_1=new GregorianCalendar(Language.getLoginLanguage().getLocale());    cal_1.setTimeInMillis(startTime.getTime());    cal.set(Calendar.HOUR_OF_DAY,cal_1.get(Calendar.HOUR_OF_DAY));    cal.set(Calendar.MINUTE,cal_1.get(Calendar.MINUTE));    cal.set(Calendar.SECOND,cal_1.get(Calendar.SECOND));    Timestamp end=new Timestamp(cal.getTimeInMillis());    MAssignmentSlot ma=new MAssignmentSlot(start,end,Msg.getMsg(m_ctx,"ResourceNotInSlotTime"),"",MAssignmentSlot.STATUS_NotInSlotTime);    list.add(ma);    cal_1.setTimeInMillis(endTime.getTime());    cal.set(Calendar.HOUR_OF_DAY,cal_1.get(Calendar.HOUR_OF_DAY));    cal.set(Calendar.MINUTE,cal_1.get(Calendar.MINUTE));    cal.set(Calendar.SECOND,cal_1.get(Calendar.SECOND));    start=new Timestamp(cal.getTimeInMillis());    cal.set(Calendar.HOUR_OF_DAY,0);    cal.set(Calendar.MINUTE,0);    cal.set(Calendar.SECOND,0);    cal.add(Calendar.DAY_OF_YEAR,1);    end=new Timestamp(cal.getTimeInMillis());    ma=new MAssignmentSlot(start,end,Msg.getMsg(m_ctx,"ResourceNotInSlotTime"),"",MAssignmentSlot.STATUS_NotInSlotTime);    list.add(ma);  }}  }
class C{  public static boolean checkExisting(String ip){  for (  ModelPrinter p : mList) {    if (p.getAddress().equals(ip)) {      if (p.getStatus() != StateUtils.STATE_ADHOC) {        Log.i("OUT","Printer " + ip + " already added.");        return true;      }    }  }  return false;}  }
class C{  public static boolean isMarketHours(ZonedDateTime openDate,ZonedDateTime closeDate,ZonedDateTime date){  if (isTradingDay(date)) {    int diffDays=(int)(TradingCalendar.getDurationInDays(openDate,closeDate));    if (TradingCalendar.between(date,TradingCalendar.getDateAtTime(date,openDate),TradingCalendar.addTradingDays(TradingCalendar.getDateAtTime(date,closeDate),diffDays))) {      return true;    }  }  return false;}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[0];  for (int i=1; i < ROUNDS; i+=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i + 1];  }  xr^=P[ROUNDS + 1];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  private void onMainContentScrolled(int currentY,int deltaY){  if (deltaY > actionBarAutoHideSensitivity) {    deltaY=actionBarAutoHideSensitivity;  } else   if (deltaY < -actionBarAutoHideSensitivity) {    deltaY=-actionBarAutoHideSensitivity;  }  if (Math.signum(deltaY) * Math.signum(actionBarAutoHideSignal) < 0) {    actionBarAutoHideSignal=deltaY;  } else {    actionBarAutoHideSignal+=deltaY;  }  boolean shouldShow=currentY < actionBarAutoHideMinY || (actionBarAutoHideSignal <= -actionBarAutoHideSensitivity);  autoShowOrHideActionBar(shouldShow);}  }
class C{  public PDUByteBuffer(int commandId,int commandStatus,int sequenceNumber){  this(commandId,commandStatus,sequenceNumber,DEFAULT_CAPACITY_POLICY);}  }
class C{  public static boolean areGridLinesOn(SettingsManager settingsManager){  return settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,KEY_CAMERA_GRID_LINES);}  }
class C{  public WFG1(int k,int l,int M){  super(k,l,M);}  }
class C{  public void reset(){  if (stopper != null)   stopper.stop();  try {    stopper=simulation.scheduleRepeatingImmediatelyAfter(this);  } catch (  IllegalArgumentException e) {  }  clearSelections();}  }
class C{  public Cuboid shift(CuboidDirection dir,int amount){  return expand(dir,amount).expand(dir.opposite(),-amount);}  }
class C{  private void processVars(final RoundEnvironment env){  final List<? extends Element> elements=sortElements(env,vars.class);  for (  final Element e : elements) {    boolean isField;    final TypeMirror clazz=e.asType();    isField=!processingEnv.getTypeUtils().isAssignable(clazz,getISkill()) && !processingEnv.getTypeUtils().isAssignable(clazz,getIAgent());    final vars vars=e.getAnnotation(vars.class);    for (    final var s : vars.value()) {      final doc[] docs=s.doc();      if (docs.length == 0) {        emitWarning("GAML: var '" + s.name() + "' is not documented",e);      }      final StringBuilder sb=new StringBuilder();      final int type=s.type();      final int contentType=s.of();      sb.append(VAR_PREFIX).append(type).append(SEP);      sb.append(contentType).append(SEP);      sb.append(s.index()).append(SEP);      final String varName=s.name();      sb.append(varName).append(SEP);      sb.append(rawNameOf(e)).append(SEP);      sb.append("type").append(',').append(type).append(',');      sb.append("name").append(',').append(varName).append(',');      sb.append("const").append(',').append(s.constant() ? "true" : "false");      final String[] dependencies=s.depends_on();      if (dependencies.length > 0) {        String depends="[";        for (int i=0; i < dependencies.length; i++) {          final String string=dependencies[i];          depends+=string;          if (i < dependencies.length - 1) {            depends+="COMMA";          }        }        depends+="]";        sb.append(',').append("depends_on").append(',').append(depends);      }      if (contentType != 0) {        sb.append(',').append("of").append(',').append(contentType);      }      final String init=s.init();      if (!"".equals(init)) {        sb.append(',').append("init").append(',').append(replaceCommas(init));      }      boolean found=false;      sb.append(SEP);      for (      final Element m : e.getEnclosedElements()) {        final getter getter=m.getAnnotation(getter.class);        if (getter != null && getter.value().equals(varName)) {          final ExecutableElement ex=(ExecutableElement)m;          final List<? extends VariableElement> argParams=ex.getParameters();          final String[] args=new String[argParams.size()];          for (int i=0; i < args.length; i++) {            args[i]=rawNameOf(argParams.get(i));          }          final int n=args.length;          final boolean scope=n > 0 && args[0].contains("IScope");          sb.append(ex.getSimpleName()).append(SEP);          sb.append(rawNameOf(ex.getReturnType())).append(SEP);          sb.append(!scope && n > 0 || scope && n > 1).append(SEP);          sb.append(isField).append(SEP);          sb.append(scope);          sb.append(SEP).append(getter.initializer());          found=true;          break;        }      }      if (!found) {        sb.append("null");      }      found=false;      sb.append(SEP);      for (      final Element m : e.getEnclosedElements()) {        final setter setter=m.getAnnotation(setter.class);        if (setter != null && setter.value().equals(varName)) {          final ExecutableElement ex=(ExecutableElement)m;          final List<? extends VariableElement> argParams=ex.getParameters();          final String[] args=new String[argParams.size()];          for (int i=0; i < args.length; i++) {            args[i]=rawNameOf(argParams.get(i));          }          final int n=args.length;          final boolean scope=n > 0 && args[0].contains("IScope");          sb.append(ex.getSimpleName()).append(SEP);          final boolean isDynamic=!scope && n == 2 || scope && n == 3;          sb.append(isDynamic ? args[!scope ? 1 : 2] : args[!scope ? 0 : 1]).append(SEP);          sb.append(isDynamic).append(SEP);          sb.append(scope);          found=true;          break;        }      }      if (!found) {        sb.append("null");      }      sb.append(SEP);      gp.put(sb.toString(),"");    }  }}  }
class C{  @Override public MarkupDocument build(){  Map<String,Path> paths=globalContext.getSwagger().getPaths();  if (MapUtils.isNotEmpty(paths)) {    applyPathsDocumentExtension(new Context(Position.DOCUMENT_BEFORE,this.markupDocBuilder));    buildPathsTitle();    applyPathsDocumentExtension(new Context(Position.DOCUMENT_BEGIN,this.markupDocBuilder));    buildsPathsSection(paths);    applyPathsDocumentExtension(new Context(Position.DOCUMENT_END,this.markupDocBuilder));    applyPathsDocumentExtension(new Context(Position.DOCUMENT_AFTER,this.markupDocBuilder));  }  return new MarkupDocument(markupDocBuilder);}  }
class C{  protected void doFloodBDDP(DatapathId pinSwitch,OFPacketIn pi,FloodlightContext cntx){  TopologyInstance ti=getCurrentInstance(false);  Set<DatapathId> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);  if (switches == null) {    switches=new HashSet<DatapathId>();    switches.add(pinSwitch);  }  for (  DatapathId sid : switches) {    IOFSwitch sw=switchService.getSwitch(sid);    if (sw == null)     continue;    Collection<OFPort> enabledPorts=sw.getEnabledPortNumbers();    if (enabledPorts == null)     continue;    Set<OFPort> ports=new HashSet<OFPort>();    ports.addAll(enabledPorts);    Set<OFPort> portsKnownToTopo=ti.getPortsWithLinks(sid);    if (portsKnownToTopo != null) {      for (      OFPort p : portsKnownToTopo) {        NodePortTuple npt=new NodePortTuple(sid,p);        if (ti.isBroadcastDomainPort(npt) == false) {          ports.remove(p);        }      }    }    Set<OFPort> portsToEliminate=getPortsToEliminateForBDDP(sid);    if (portsToEliminate != null) {      ports.removeAll(portsToEliminate);    }    if (pinSwitch == sid) {      ports.remove((pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)));    }    doMultiActionPacketOut(pi.getData(),sw,ports,cntx);  }}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public void tagSoundStreamBlock(byte[] soundData) throws IOException {  if (tags != null) {    tags.tagSoundStreamBlock(soundData);  }}  }
class C{  protected CompilationUnitContext(TemplateContextType type,Document document,Position completionPosition,CompilationUnit compilationUnit){  super(type,document,completionPosition);  fCompilationUnit=compilationUnit;  fIsManaged=true;}  }
class C{  private boolean isLeft(View view,int totalSpanCount){  return getSpanIndex(view) == 0 && getSpanSize(view) < totalSpanCount;}  }
class C{  public boolean isValid(Validator validator,ExceptionMessageListener receiver){  return validator.isValid(m_date,m_invalidDate,m_format,receiver);}  }
class C{  @Override public void incrementGeneratedTokens(String tenantName,IIdmServiceContext serviceContext) throws RemoteException, IDMException {  try (IDiagnosticsContextScope ctxt=getDiagnosticsContext(tenantName,serviceContext,"incrementGeneratedTokens")){    try {      this.incrementGeneratedTokens(tenantName);    } catch (    Exception ex) {      throw ServerUtils.getRemoteException(ex);    }  } }  }
class C{  public boolean isAllowed(){  return setting == null || setting.getValue();}  }
class C{  public ECFieldElement sqrt(){  int[] x1=this.x;  if (Nat256.isZero(x1) || Nat256.isOne(x1)) {    return this;  }  int[] x2=Nat256.create();  Curve25519Field.square(x1,x2);  Curve25519Field.multiply(x2,x1,x2);  int[] x3=x2;  Curve25519Field.square(x2,x3);  Curve25519Field.multiply(x3,x1,x3);  int[] x4=Nat256.create();  Curve25519Field.square(x3,x4);  Curve25519Field.multiply(x4,x1,x4);  int[] x7=Nat256.create();  Curve25519Field.squareN(x4,3,x7);  Curve25519Field.multiply(x7,x3,x7);  int[] x11=x3;  Curve25519Field.squareN(x7,4,x11);  Curve25519Field.multiply(x11,x4,x11);  int[] x15=x7;  Curve25519Field.squareN(x11,4,x15);  Curve25519Field.multiply(x15,x4,x15);  int[] x30=x4;  Curve25519Field.squareN(x15,15,x30);  Curve25519Field.multiply(x30,x15,x30);  int[] x60=x15;  Curve25519Field.squareN(x30,30,x60);  Curve25519Field.multiply(x60,x30,x60);  int[] x120=x30;  Curve25519Field.squareN(x60,60,x120);  Curve25519Field.multiply(x120,x60,x120);  int[] x131=x60;  Curve25519Field.squareN(x120,11,x131);  Curve25519Field.multiply(x131,x11,x131);  int[] x251=x11;  Curve25519Field.squareN(x131,120,x251);  Curve25519Field.multiply(x251,x120,x251);  int[] t1=x251;  Curve25519Field.square(t1,t1);  int[] t2=x120;  Curve25519Field.square(t1,t2);  if (Nat256.eq(x1,t2)) {    return new Curve25519FieldElement(t1);  }  Curve25519Field.multiply(t1,PRECOMP_POW2,t1);  Curve25519Field.square(t1,t2);  if (Nat256.eq(x1,t2)) {    return new Curve25519FieldElement(t1);  }  return null;}  }
class C{  public boolean isData(){  return data;}  }
class C{  @Override protected int addStandardDetails(boolean incAdvanced,int i){  int out=super.addStandardDetails(incAdvanced,i);  _details.remove(baudBoxLabel);  _details.remove(baudBox);  portBoxLabel.setText("Bluetooth adapter: ");  return out;}  }
class C{  public static Date toDate(String datestring){  return parse(datestring);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected boolean isAncestor(TableGroupJoinNode leafTable,TableGroupJoinNode rootTable){  do {    if (leafTable == rootTable)     return true;    leafTable=leafTable.getParent();  } while (leafTable != null);  return false;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void write(BedRecord record) throws IOException {  writeLine(record.toString());}  }
class C{  private void recurse(final Block root,boolean listMode){  Block block, list;  Line line=root.lines;  if (listMode) {    root.removeListIndent();  }  while (line != null && line.isEmpty) {    line=line.next;  }  if (line == null) {    return;  }  while (line != null) {    final LineType type=line.getLineType();switch (type) {case OTHER:{        final boolean wasEmpty=line.prevEmpty;        while (line != null && !line.isEmpty) {          final LineType t=line.getLineType();          if ((listMode) && (t == LineType.OLIST || t == LineType.ULIST)) {            break;          }          if (t == LineType.FENCED_CODE || t == LineType.BQUOTE) {            break;          }          line=line.next;        }        final BlockType bt;        if (line != null && !line.isEmpty) {          bt=(!wasEmpty) ? BlockType.NONE : BlockType.PARAGRAPH;          root.split(line.previous).type=bt;          root.removeLeadingEmptyLines();        } else {          bt=(listMode && (line == null || !line.isEmpty) && !wasEmpty) ? BlockType.NONE : BlockType.PARAGRAPH;          root.split(line == null ? root.lineTail : line).type=bt;          root.removeLeadingEmptyLines();        }        line=root.lines;        break;      }case BQUOTE:    while (line != null) {      if (!line.isEmpty && (line.prevEmpty && line.leading == 0 && line.getLineType() != LineType.BQUOTE)) {        break;      }      line=line.next;    }  block=root.split(line != null ? line.previous : root.lineTail);block.type=BlockType.BLOCKQUOTE;block.removeSurroundingEmptyLines();block.removeBlockQuotePrefix();this.recurse(block,false);line=root.lines;break;case FENCED_CODE:line=line.next;while (line != null) {if (line.getLineType() == LineType.FENCED_CODE) {break;}line=line.next;}if (line != null) {line=line.next;}block=root.split(line != null ? line.previous : root.lineTail);block.type=BlockType.FENCED_CODE;block.meta=Utils.getMetaFromFence(block.lines.value);block.lines.setEmpty();if (block.lineTail.getLineType() == LineType.FENCED_CODE) {block.lineTail.setEmpty();}block.removeSurroundingEmptyLines();break;case OLIST:case ULIST:while (line != null) {final LineType t=line.getLineType();if (!line.isEmpty && (line.prevEmpty && line.leading == 0 && !(t == LineType.OLIST || t == LineType.ULIST))) {break;}line=line.next;}list=root.split(line != null ? line.previous : root.lineTail);list.type=type == LineType.OLIST ? BlockType.ORDERED_LIST : BlockType.UNORDERED_LIST;list.lines.prevEmpty=false;list.lineTail.nextEmpty=false;list.removeSurroundingEmptyLines();list.lines.prevEmpty=list.lineTail.nextEmpty=false;initListBlock(list);block=list.blocks;while (block != null) {this.recurse(block,true);block=block.next;}list.expandListParagraphs();break;default :line=line.next;break;}}}  }
class C{  boolean isDelta(){  return del != 0;}  }
class C{  public Shape createCancelIcon(int x,int y,int w,int h){  final double xMid=x + w / 2.0;  final double yMid=y + h / 2.0;  path.reset();  path.moveTo(xMid,y);  path.quadTo(x,y,x,yMid);  path.quadTo(x,y + h,xMid,y + h);  path.quadTo(x + w,y + h,x + w,yMid);  path.quadTo(x + w,y,xMid,y);  path.closePath();  final double xOffsetL=w / 2.0 - 3;  final double xOffsetS=w / 2.0 - 4;  final double yOffsetL=h / 2.0 - 3;  final double yOffsetS=h / 2.0 - 4;  final double offsetC=1.5;  path.moveTo(xMid,yMid - offsetC);  path.lineTo(xMid + xOffsetS,yMid - yOffsetL);  path.lineTo(yMid + xOffsetL,yMid - yOffsetS);  path.lineTo(xMid + offsetC,yMid);  path.lineTo(xMid + xOffsetL,yMid + yOffsetS);  path.lineTo(xMid + xOffsetS,yMid + yOffsetL);  path.lineTo(xMid,yMid + offsetC);  path.lineTo(xMid - xOffsetS,yMid + yOffsetL);  path.lineTo(xMid - xOffsetL,yMid + yOffsetS);  path.lineTo(xMid - offsetC,yMid);  path.lineTo(xMid - xOffsetL,yMid - yOffsetS);  path.lineTo(xMid - xOffsetS,yMid - yOffsetL);  path.closePath();  return path;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void checkOptionalCardinality(List<Warning> warnings,Class<? extends ICalProperty>... classes){  for (  Class<? extends ICalProperty> clazz : classes) {    List<? extends ICalProperty> props=getProperties(clazz);    if (props.size() > 1) {      warnings.add(Warning.validate(3,clazz.getSimpleName()));      continue;    }  }}  }
class C{  public QualityStats[] execute(Judge judge,SubmissionReport submitRep,PrintWriter qualityLog) throws Exception {  int nQueries=Math.min(maxQueries,qualityQueries.length);  QualityStats stats[]=new QualityStats[nQueries];  for (int i=0; i < nQueries; i++) {    QualityQuery qq=qualityQueries[i];    Query q=qqParser.parse(qq);    long t1=System.currentTimeMillis();    TopDocs td=searcher.search(q,maxResults);    long searchTime=System.currentTimeMillis() - t1;    if (judge != null) {      stats[i]=analyzeQueryResults(qq,q,td,judge,qualityLog,searchTime);    }    if (submitRep != null) {      submitRep.report(qq,td,docNameField,searcher);    }  }  if (submitRep != null) {    submitRep.flush();  }  return stats;}  }
class C{  public Drawable decideIcon(Context ctx,int iconColor,boolean tint){  Drawable icon=mIcon;  if (mIconRes != -1) {    icon=ContextCompat.getDrawable(ctx,mIconRes);  } else   if (mUri != null) {    try {      InputStream inputStream=ctx.getContentResolver().openInputStream(mUri);      icon=Drawable.createFromStream(inputStream,mUri.toString());    } catch (    FileNotFoundException e) {    }  }  if (icon != null && tint) {    icon=icon.mutate();    icon.setColorFilter(iconColor,PorterDuff.Mode.SRC_IN);  }  return icon;}  }
class C{  public SimpleFileFilter(String ext,String desc){  addExtension(ext);  this.desc=desc;}  }
class C{  public boolean shouldMechanicalJumpCauseFallDamage(){  if (isJumping() && (getEntity().getJumpType() == Mech.JUMP_BOOSTER) && (getJumpMaxElevationChange() > getEntity().getJumpMP())) {    return true;  }  return false;}  }
class C{  public CacheCheckpointSpiSecondCacheSelfTest(){  super(true);}  }
class C{  public static Test suite(){  return (new TestSuite(ValueChangeListenerSetPropertyActionListener01ITCase.class));}  }
class C{  public static void showInputSheet(Component parentComponent,Object message,Object initialSelectionValue,SheetListener listener){  showInputSheet(parentComponent,message,JOptionPane.QUESTION_MESSAGE,null,null,initialSelectionValue,listener);}  }
class C{  public void testOnReceive_noStartService(){  Intent stopIntent=new Intent(getContext(),TrackRecordingService.class);  getContext().stopService(stopIntent);  assertFalse(isServiceExisted(getContext(),SERVICE_NAME));  BootReceiver bootReceiver=new BootReceiver();  Intent intent=new Intent();  intent.setAction(Intent.ACTION_BUG_REPORT);  bootReceiver.onReceive(getContext(),intent);  assertFalse(isServiceExisted(getContext(),SERVICE_NAME));}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,Node[] trees,int nbatches) throws Exception {  int ncycles=trees.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(trees[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  private int outputConfigure(int[][] layoutMap,int tags,int ocType,boolean getNewFrame){  if (ac.oc[1].layoutMap != layoutMap) {    for (int i=0; i < tags; i++) {      System.arraycopy(layoutMap[i],0,ac.oc[1].layoutMap[i],0,3);    }    ac.oc[1].layoutMapTags=tags;  }  int layout=sniffChannelOrder(layoutMap,tags);  int channels[]=new int[1];  for (int i=0; i < tags; i++) {    int type=layoutMap[i][0];    int id=layoutMap[i][1];    int position=layoutMap[i][2];    int ret=cheConfigure(position,type,id,channels);    if (ret < 0) {      return ret;    }  }  if (ac.oc[1].m4ac.ps == 1 && channels[0] == 2) {    if (layout == CH_FRONT_CENTER) {      layout=CH_FRONT_LEFT | CH_FRONT_RIGHT;    } else {      layout=0;    }  }  for (int i=0; i < 4; i++) {    for (int j=0; j < MAX_ELEM_ID; j++) {      ac.tagCheMap[i][j]=ac.che[i][j];    }  }  ac.oc[1].channelLayout=layout;  ac.channels=channels[0];  ac.oc[1].channels=channels[0];  ac.oc[1].status=ocType;  if (getNewFrame) {    int ret=frameConfigureElements();    if (ret < 0) {      return ret;    }  }  return 0;}  }
class C{  @Override protected Query[] prepareQueries() throws Exception {  Analyzer anlzr=NewAnalyzerTask.createAnalyzer(config.get("analyzer","org.apache.lucene.analysis.standard.StandardAnalyzer"));  QueryParser qp=new QueryParser(DocMaker.BODY_FIELD,anlzr);  ArrayList<Query> qq=new ArrayList<>();  Query q1=new TermQuery(new Term(DocMaker.ID_FIELD,"doc2"));  qq.add(q1);  Query q2=new TermQuery(new Term(DocMaker.BODY_FIELD,"simple"));  qq.add(q2);  BooleanQuery.Builder bq=new BooleanQuery.Builder();  bq.add(q1,Occur.MUST);  bq.add(q2,Occur.MUST);  qq.add(bq.build());  qq.add(qp.parse("synthetic body"));  qq.add(qp.parse("\"synthetic body\""));  qq.add(qp.parse("synthetic text"));  qq.add(qp.parse("\"synthetic text\""));  qq.add(qp.parse("\"synthetic text\"~3"));  qq.add(qp.parse("zoom*"));  qq.add(qp.parse("synth*"));  return qq.toArray(new Query[0]);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
