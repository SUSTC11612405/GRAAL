class C{  private static Map<Integer,Collection<JsonArrayEntry>> groupJsonEntryByInstanceId(Collection<JsonArrayEntry> jsonEntries,LwM2mPath baseName) throws InvalidValueException {  Map<Integer,Collection<JsonArrayEntry>> result=new HashMap<>();  for (  JsonArrayEntry e : jsonEntries) {    LwM2mPath nodePath=baseName.append(e.getName());    if (!nodePath.isResourceInstance() && !nodePath.isResource()) {      throw new InvalidValueException("Invalid path for resource, it should be a resource or a resource instance path",nodePath);    }    Collection<JsonArrayEntry> jsonArray=result.get(nodePath.getObjectInstanceId());    if (jsonArray == null) {      jsonArray=new ArrayList<>();      result.put(nodePath.getObjectInstanceId(),jsonArray);    }    jsonArray.add(e);  }  return result;}  }
class C{  public void releasePreparedStatement(PreparedStatement stmt){  if (stmt == null)   return;  String sqlCommand=stmt.toString();  try {    stmt.clearParameters();  } catch (  SQLException e) {    s_dbEngine.setDBError(true);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"releasePreparedStatementNoReset",new Object[]{sqlCommand,e.getMessage()});  }  try {    stmt.close();  } catch (  SQLException e) {    s_dbEngine.setDBError(true);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"releasePreparedStatementError",new Object[]{sqlCommand,e.getMessage()});  } finally {    stmt=null;  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (!(table.getModel() instanceof GridTable)) {    if (CLogMgt.isLevelFine())     log.fine("Not supported - " + table.getModel());    return;  }  boolean isCopy=CMD_Copy.equals(e.getActionCommand());  boolean isCopyWithHeaders=CMD_CopyWithHeaders.equals(e.getActionCommand());  if (isCopy || isCopyWithHeaders) {    try {      int[] selectedRows=table.getSelectedRows();      if (selectedRows == null || selectedRows.length == 0) {        return;      }      int colscount=table.getColumnCount();      StringBuffer sb=new StringBuffer();      GridTable model=(GridTable)table.getModel();      GridField[] fields=model.getFields();      if (isCopyWithHeaders) {        for (int col=0; col < colscount; col++) {          String value="";          try {            GridField field=fields[col];            if (!field.isDisplayed(false)) {              continue;            }            value=field.getHeader();          } catch (          Exception ex) {            log.log(Level.WARNING,"Copy-headers",ex);          }          value=fixString(value);          sb.append(value).append("\t");        }        sb.append(Env.NL);      }      for (      int row : selectedRows) {        for (int col=0; col < colscount; col++) {          Lookup lookup=null;          String value=null;          Object key=null;          GridField field=null;          try {            key=table.getValueAt(row,col);            field=fields[col];            if (!field.isDisplayed(false))             continue;            if (field.isEncryptedColumn() || field.isEncryptedField()) {              value="*";            } else             if (key instanceof Boolean) {              value=Msg.getMsg(Env.getCtx(),((Boolean)key).booleanValue() ? "Yes" : "No");            } else             if (key instanceof BigDecimal) {              try {                value=sysNumberFormat.format(key != null ? key : Env.ZERO);              } catch (              Exception ex) {              }            } else             if (key instanceof Date) {              try {                value=sysDateFormat.format(key);              } catch (              Exception ex) {              }            } else {              lookup=(field != null ? field.getLookup() : null);              value=(lookup != null && key != null ? lookup.getDisplay(key) : null);              if (value == null && key != null)               value=key.toString();            }          } catch (          Exception ex) {            log.log(Level.WARNING,"Copy-rows",ex);          }          value=fixString(value);          sb.append(value).append("\t");          if (CLogMgt.isLevelFinest())           log.finest("col=" + col + ", row="+ row+ ": key="+ key+ " => value="+ value+ ", "+ field+ ", "+ lookup);        }        sb.append(Env.NL);      }      StringSelection stsel=new StringSelection(sb.toString());      system=Toolkit.getDefaultToolkit().getSystemClipboard();      system.setContents(stsel,stsel);    } catch (    Exception ex) {      log.log(Level.WARNING,"Copy",ex);    }  }}  }
class C{  public Links mapLinks(JSONObject linksJsonObject){  Links links=new Links();  try {    links.setSelfLink(linksJsonObject.getString("self"));  } catch (  JSONException e) {    Logger.debug("JSON link does not contain self");  }  try {    links.setRelated(linksJsonObject.getString("related"));  } catch (  JSONException e) {    Logger.debug("JSON link does not contain related");  }  try {    links.setFirst(linksJsonObject.getString("first"));  } catch (  JSONException e) {    Logger.debug("JSON link does not contain first");  }  try {    links.setLast(linksJsonObject.getString("last"));  } catch (  JSONException e) {    Logger.debug("JSON link does not contain last");  }  try {    links.setPrev(linksJsonObject.getString("prev"));  } catch (  JSONException e) {    Logger.debug("JSON link does not contain prev");  }  try {    links.setNext(linksJsonObject.getString("next"));  } catch (  JSONException e) {    Logger.debug("JSON link does not contain next");  }  return links;}  }
class C{  public BigDecimal sum(String sqlExpression){  return aggregate(sqlExpression,AGGREGATE_SUM);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.222 -0400",hash_original_method="EF52791FB2EBE48A20094079DA1FF6E8",hash_generated_method="E2B56403E9FE6193D82142D0B0640FED") public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public SegmentedButtonPainter(Which state,PaintContext ctx){  super(state,ctx);  type=getButtonType(state);}  }
class C{  public DefaultEntityViewInfo createDefaultInfo(){  DefaultEntityViewInfo result=null;  try {    result=(DefaultEntityViewInfo)DEFAULT_INFO.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();  }  return result;}  }
class C{  public static void requiredAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (attributeValue.length() == 0) {      handleError("Required attribute \"" + name + "\" is missing.",method,element);    }  }}  }
class C{  @Override protected void onPreExecute(){  super.onPreExecute();  pDialog=new ProgressDialog(fa);  pDialog.setTitle("Downloading");  pDialog.setMessage("Please wait...");  pDialog.setIndeterminate(false);  pDialog.setMax(100);  pDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);  pDialog.setCancelable(true);  pDialog.show();}  }
class C{  private static Collection<Employee> employees(){  Collection<Employee> employees=new ArrayList<>();  employees.add(new Employee("James Wilson",12500,new Address("1096 Eddy Street, San Francisco, CA",94109),Arrays.asList("Human Resources","Customer Service")));  employees.add(new Employee("Daniel Adams",11000,new Address("184 Fidler Drive, San Antonio, TX",78205),Arrays.asList("Development","QA")));  employees.add(new Employee("Cristian Moss",12500,new Address("667 Jerry Dove Drive, Florence, SC",29501),Arrays.asList("Logistics")));  employees.add(new Employee("Allison Mathis",25300,new Address("2702 Freedom Lane, Hornitos, CA",95325),Arrays.asList("Development")));  employees.add(new Employee("Breana Robbin",6500,new Address("3960 Sundown Lane, Austin, TX",78758),Arrays.asList("Sales")));  employees.add(new Employee("Philip Horsley",19800,new Address("2803 Elsie Drive, Sioux Falls, SD",57104),Arrays.asList("Sales")));  employees.add(new Employee("Brian Peters",10600,new Address("1407 Pearlman Avenue, Boston, MA",12110),Arrays.asList("Development","QA")));  employees.add(new Employee("Jack Yang",12900,new Address("4425 Parrish Avenue Smithsons Valley, TX",78130),Arrays.asList("Sales")));  return employees;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  Collection list=(Collection)source;  OutputNode parent=node.getParent();  if (!node.isCommitted()) {    node.remove();  }  write(parent,list);}  }
class C{  @Nullable @CheckReturnValue private List<Ticket> tryAcquireAtomically(int tickets) throws NoCapacityAvailableException {  List<Ticket> acquiredParentTickets=new ArrayList<>();  mLock.lock();  try {    if (tickets > mCapacity) {      throw new NoCapacityAvailableException();    }    if (mParentTickets.size() >= tickets) {      for (int i=0; i < tickets; i++) {        acquiredParentTickets.add(mParentTickets.remove());      }      updateCurrentTicketCount();      return acquiredParentTickets;    }  }  finally {    mLock.unlock();  }  return null;}  }
class C{  public static boolean isSignedBy(PGPPublicKey pubKey,PGPPublicKey signerPubKey){  PGPSignature sig=getSignatures(pubKey).get(signerPubKey.getKeyID());  return sig != null && (sig.getSignatureType() == PGPSignature.DEFAULT_CERTIFICATION || sig.getSignatureType() == PGPSignature.DIRECT_KEY);}  }
class C{  public static void print(String s1,String s2){  print(s1);  print(s2);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter an integer: ");  int number=input.nextInt();  System.out.println(number + (isPalindrome(number) ? " is " : " is not ") + "a palindrome.");}  }
class C{  @Override protected void reset(){}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  public static final SandboxRay show(Window owner){  AddRayDialog ard=new AddRayDialog(owner);  ard.setLocationRelativeTo(owner);  ard.setVisible(true);  if (!ard.canceled) {synchronized (AddRayDialog.class) {      N++;    }    return ard.rayPanel.getRay();  }  return null;}  }
class C{  public static Map cloneMapValues(Map source){  ParamChecks.nullNotPermitted(source,"source");  Map result=new HashMap();  for (  Object key : source.keySet()) {    Object value=source.get(key);    if (value != null) {      try {        result.put(key,ObjectUtilities.clone(value));      } catch (      CloneNotSupportedException ex) {        throw new RuntimeException(ex);      }    } else {      result.put(key,null);    }  }  return result;}  }
class C{  public GroupFileTransferDeleteTask(FileTransferServiceImpl fileTransferService,InstantMessagingService imService,LocalContentResolver contentResolver,String chatId,String transferId){  super(contentResolver,FileTransferData.CONTENT_URI,FileTransferData.KEY_FT_ID,FileTransferData.KEY_CHAT_ID,null,transferId);  mFileTransferService=fileTransferService;  mImService=imService;}  }
class C{  private static Field findAccessibleField(Class clas,String fieldName) throws UtilEvalError, NoSuchFieldException {  Field field;  try {    field=clas.getField(fieldName);    ReflectManager.RMSetAccessible(field);    return field;  } catch (  NoSuchFieldException e) {  }  while (clas != null) {    try {      field=clas.getDeclaredField(fieldName);      ReflectManager.RMSetAccessible(field);      return field;    } catch (    NoSuchFieldException e) {    }    clas=clas.getSuperclass();  }  throw new NoSuchFieldException(fieldName);}  }
class C{  public void drawDomainMarker(Graphics2D g2,ContourPlot plot,ValueAxis domainAxis,Marker marker,Rectangle2D dataArea){  if (marker instanceof ValueMarker) {    ValueMarker vm=(ValueMarker)marker;    double value=vm.getValue();    Range range=domainAxis.getRange();    if (!range.contains(value)) {      return;    }    double x=domainAxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);    Line2D line=new Line2D.Double(x,dataArea.getMinY(),x,dataArea.getMaxY());    Paint paint=marker.getOutlinePaint();    Stroke stroke=marker.getOutlineStroke();    g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);    g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);    g2.draw(line);  }}  }
class C{  private static TextArea findTextAreaText(Container root,String text){  int count=root.getComponentCount();  for (int iter=0; iter < count; iter++) {    Component c=root.getComponentAt(iter);    if (c instanceof TextArea) {      String n=((TextArea)c).getText();      if (n != null && n.equals(text)) {        return (TextArea)c;      }      continue;    }    if (c instanceof Container) {      TextArea l=findTextAreaText((Container)c,text);      if (l != null) {        return l;      }    }  }  return null;}  }
class C{  public boolean containsPoint(float x,float y){  return isPointInTriangle(x,y,p1,p2,p3) || isPointInTriangle(x,y,p1,p3,p4);}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKeyParameters key){  super(key);  this.publicExponent=key.getPublicExponent();  this.primeP=key.getP();  this.primeQ=key.getQ();  this.primeExponentP=key.getDP();  this.primeExponentQ=key.getDQ();  this.crtCoefficient=key.getQInv();}  }
class C{  public boolean isInstanceOf(Object obj,Class<?> clz){  if (obj == null || clz == null) {    if (log.isLoggable(Level.FINEST)) {      log.finest("isInstanceOf error: obj=" + obj + " clz="+ clz);    }    return false;  }  return clz.isAssignableFrom(obj.getClass());}  }
class C{  private void updateHelp(){  if (combinedNeuronInfoPanel.getUpdateRulePanel().getCbNeuronType().getSelectedItem() == SimbrainConstants.NULL_STRING) {    helpAction=new ShowHelpAction("Pages/Network/neuron.html");  } else {    String name=(String)combinedNeuronInfoPanel.getUpdateRulePanel().getCbNeuronType().getSelectedItem();    helpAction=new ShowHelpAction("Pages/Network/neuron/" + name + ".html");  }  helpButton.setAction(helpAction);}  }
class C{  private StatisticDescriptorImpl(String name,byte typeCode,String description,String unit,boolean isCounter,boolean isLargerBetter){  this.name=name;  this.typeCode=typeCode;  if (description == null) {    this.description="";  } else {    this.description=description;  }  if (unit == null) {    this.unit="";  } else {    this.unit=unit;  }  this.isCounter=isCounter;  this.isLargerBetter=isLargerBetter;}  }
class C{  public void calculateAngles(){  float totalAngle=360.0f;  float delta=totalAngle / values.size();  float angle=0.0f;  angles=new double[values.size()];  for (int i=0; i < angles.length; i++) {    angles[i]=angle;    angle+=delta;  }}  }
class C{  private void validateVMaxThinVolumePreAllocateParam(String provisionType,String systemType,Integer thinVolumePreAllocationPercentage){  if (!VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(provisionType) && thinVolumePreAllocationPercentage > 0) {    throw APIException.badRequests.thinVolumePreallocationPercentageOnlyApplicableToThin();  }  if (VirtualPool.SystemType.vnxblock.toString().equalsIgnoreCase(systemType) && thinVolumePreAllocationPercentage > 0) {    throw APIException.badRequests.thinVolumePreallocationPercentageOnlyApplicableToVMAX();  }  if (null != thinVolumePreAllocationPercentage && thinVolumePreAllocationPercentage < 0 || thinVolumePreAllocationPercentage > 100) {    throw APIException.badRequests.invalidParameterPercentageExpected("thin_volume_preallocation_percentage",thinVolumePreAllocationPercentage);  }}  }
class C{  public OperationNotSupportException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  public static void checkNeedForCastCast(BlockScope scope,CastExpression enclosingCast){  if (scope.compilerOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) {    return;  }  CastExpression nestedCast=(CastExpression)enclosingCast.expression;  if ((nestedCast.bits & ASTNode.UnnecessaryCast) == 0) {    return;  }  CastExpression alternateCast=new CastExpression(null,enclosingCast.type);  alternateCast.resolvedType=enclosingCast.resolvedType;  if (!alternateCast.checkCastTypesCompatibility(scope,enclosingCast.resolvedType,nestedCast.expression.resolvedType,null)) {    return;  }  scope.problemReporter().unnecessaryCast(nestedCast);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  key=key.clone();}  }
class C{  public boolean hasOutputEventEdge(Edge e){  return outputEvents.containsKey(e);}  }
class C{  private void userAction(int action,User user) throws SQLException, IOException {  try (FbService service=attachServiceManager()){    ServiceRequestBuffer srb=getUserSRB(service,action,user);    setSecurityDatabaseArgument(srb);    executeServicesOperation(service,srb);  } }  }
class C{  public IllegalConfigurationValueException(String message){  super(message);}  }
class C{  private void disposePreviousContent(){  for (  final Control c : this.getChildren()) {    c.dispose();  }}  }
class C{  public CRFPClient(){}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return decode((byte[])pObject);  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be URL decoded");  }}  }
class C{  BillingRun executeBilling(DataProvider dataProvider){  BillingRun result=new BillingRun(dataProvider.getPeriodStart(),dataProvider.getPeriodEnd());  for (  BillingInput billingInput : dataProvider.getBillingInput()) {    try {      BillingResult bill=revenueCalculator.performBillingRunForSubscription(billingInput);      if (!Strings.isEmpty(bill.getResultXML())) {        result.addBillingResult(bill);      }    } catch (    Exception e) {      logBillingRunFailed(e,billingInput);      result.clearBillingResults();      result.setSuccessful(false);      return result;    }  }  return result;}  }
class C{  DummyAction recordActions(ActionList list){  DummyAction da=null;  if (list != null && list.size() > 0) {    int offset=list.getOffset(0);    da=new DummyAction(list);    m_master.setActionOffset(offset,da);  }  return da;}  }
class C{  protected ObjectFactory2D(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node newChild;  Node child;  String childName;  Node replacedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);  newChild=doc.createElement("newChild");  replacedNode=employeeNode.replaceChild(newChild,oldChild);  child=childList.item(0);  childName=child.getNodeName();  assertEquals("nodeReplaceChildAssert1","newChild",childName);}  }
class C{  public final void debug(final String message){  if (isDebugEnabled()) {    output(Priority.DEBUG,message,null);  }}  }
class C{  public NPrism(int sides,double radiusTop,double radiusBase,double height){  this(sides,radiusTop,radiusBase,0.0,height,true);}  }
class C{  private synchronized void writeXMLFile(){  try {    Source source=new DOMSource(doc);    Result result=new StreamResult(requestFile);    Transformer xformer=TransformerFactory.newInstance().newTransformer();    xformer.transform(source,result);  } catch (  TransformerConfigurationException e) {    e.printStackTrace();  }catch (  TransformerException e) {    e.printStackTrace();  }}  }
class C{  public static void main(String[] args){  JFrame frame=new ConnectFourApp().constructApplicationFrame();  frame.setSize(450,450);  frame.setVisible(true);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TYPE__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void layoutNetwork(){  NetworkLayoutManager.offsetNeuronGroup(inputLayer,som,Direction.NORTH,250);}  }
class C{  final public VarNode sid(){  return (VarNode)getProperty(Annotations.SID);}  }
class C{  public Word loadWord(Offset offset){  return null;}  }
class C{  public void testSyncFailedDialog_SettingsButtonLoadsSettings(){  expectVisible(viewWithText(R.string.sync_failed_settings));  App.getInstance().getUserManager().setAutoCancelEnabled(false);  click(viewWithText(R.string.sync_failed_settings));  expectVisible(viewWithText(R.string.pref_title_server));}  }
class C{  public int entryPoint(State state){  int pc=curCP();  alive=true;  State newState=state.dup();  setDefined(newState.defined);  this.state=newState;  Assert.check(state.stacksize <= max_stack);  if (debugCode)   System.err.println("entry point " + state);  pendingStackMap=needStackMap;  return pc;}  }
class C{  protected TLCError createError(TLCRegion tlcRegion,String message){  TLCError topError=new TLCError();  if (tlcRegion instanceof TLCRegionContainer) {    TLCRegionContainer container=(TLCRegionContainer)tlcRegion;    ITypedRegion[] regions=container.getSubRegions();    Assert.isTrue(regions.length < 3,"Unexpected error region structure, this is a bug.");    for (int i=0; i < regions.length; i++) {      if (regions[i] instanceof TLCRegion) {        TLCError cause=createError((TLCRegion)regions[i],message);        topError.setCause(cause);      } else {        String errorMessage;        IFile mcFile=getModel().getTLAFile();        FileEditorInput mcFileEditorInput=new FileEditorInput((IFile)mcFile);        FileDocumentProvider mcFileDocumentProvider=new FileDocumentProvider();        try {          errorMessage=message;          Document errorDocument=new Document();          errorDocument.set(errorMessage);          boolean markerInstalled=false;          mcFileDocumentProvider.connect(mcFileEditorInput);          IDocument mcDocument=mcFileDocumentProvider.getDocument(mcFileEditorInput);          FindReplaceDocumentAdapter mcSearcher=new FindReplaceDocumentAdapter(mcDocument);          IRegion[] ids=ModelHelper.findIds(errorMessage);          @SuppressWarnings("unchecked") Hashtable<String,Object>[] props=new Hashtable[ids.length];          for (int j=0; j < ids.length; j++) {            String id=errorDocument.get(ids[j].getOffset(),ids[j].getLength());            int[] coordinates=ModelHelper.calculateCoordinates(mcDocument,mcSearcher,id);            if (ModelHelper.EMPTY_LOCATION.equals(coordinates)) {              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,"Provided id " + id + " not found in the model file."));            }            props[j]=ModelHelper.createMarkerDescription(mcDocument,mcSearcher,errorMessage,IMarker.SEVERITY_ERROR,coordinates);            String attributeName=(String)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_NAME);            Integer attributeIndex=(Integer)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_IDX);            if (attributeName != null) {              String idReplacement=null;              if (ModelHelper.isListAttribute(attributeName)) {                final List<String> attributeValue=(List<String>)model.getAttribute(attributeName,new ArrayList<String>(0));                int attributeNumber=(attributeIndex != null) ? attributeIndex.intValue() : 0;                if (IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName) || IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName)) {                  idReplacement="'LL claims this should not happen. See Bug in TLCModelLaunchDataProvider.'";                } else {                  List<Formula> valueList=ModelHelper.deserializeFormulaList(attributeValue);                  if (valueList.size() >= (attributeNumber + 1)) {                    Formula value=valueList.get(attributeNumber);                    idReplacement=value.getFormula();                  } else {                    idReplacement="'No value in valueList " + attributeValue + " for "+ attributeNumber+ ". Bug in TLCModelLaunchDataProvider.'";                  }                }              } else {                idReplacement=model.getAttribute(attributeName,ModelHelper.EMPTY_STRING);              }              errorMessage=errorMessage.substring(0,errorMessage.indexOf(id)) + idReplacement + errorMessage.substring(errorMessage.indexOf(id) + id.length());            } else {              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,"Provided id " + id + " maps to an attribute that was not found in the model. This is a bug."));            }          }          IRegion[] locations=ModelHelper.findLocations(errorMessage);          String[] regionContent=new String[locations.length];          for (int j=0; j < locations.length; j++) {            String locationString=errorDocument.get(locations[j].getOffset(),locations[j].getLength());            Location location=Location.parseLocation(locationString);            if (location.source().equals(mcFile.getName().substring(0,mcFile.getName().length() - ".tla".length()))) {              IRegion region=AdapterFactory.locationToRegion(mcDocument,location);              regionContent[j]=mcDocument.get(region.getOffset(),region.getLength());              if (locationString != null && regionContent[j] != null) {                errorMessage=errorMessage.replace(locationString,regionContent[j]);              }            }          }          int msgLen=errorMessage.length();          if (msgLen > 50000) {            errorMessage=errorMessage.substring(0,30000) + "  ...stuff deleted here...  " + errorMessage.substring(msgLen - 20000,msgLen);          }          for (int j=0; j < props.length; j++) {            props[j].put(IMarker.MESSAGE,errorMessage);            model.setMarker(props[j],ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);            markerInstalled=true;          }          if (!markerInstalled) {            Hashtable<String,Object> prop=ModelHelper.createMarkerDescription(errorMessage,IMarker.SEVERITY_ERROR);            model.setMarker(prop,ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);          }          topError.setMessage(errorMessage);          topError.setErrorCode(tlcRegion.getMessageCode());        } catch (        BadLocationException e) {          TLCUIActivator.getDefault().logError("Error parsing the error message",e);        }catch (        CoreException e) {          TLCUIActivator.getDefault().logError("Error parsing the error message",e);        } finally {          mcFileDocumentProvider.disconnect(mcFileEditorInput);        }      }    }  }  return topError;}  }
class C{  private String determineLastKnownUrl(){  int tabId=determineTabId();  String url=mTabModel.getCurrentUrlForDocument(tabId);  if (TextUtils.isEmpty(url))   url=determineInitialUrl(tabId);  return url;}  }
class C{  public String forceGetValueAsString(){  if (mValue == null) {    return "";  } else   if (mValue instanceof byte[]) {    if (mDataType == TYPE_ASCII) {      return new String((byte[])mValue,US_ASCII);    } else {      return Arrays.toString((byte[])mValue);    }  } else   if (mValue instanceof long[]) {    if (((long[])mValue).length == 1) {      return String.valueOf(((long[])mValue)[0]);    } else {      return Arrays.toString((long[])mValue);    }  } else   if (mValue instanceof Object[]) {    if (((Object[])mValue).length == 1) {      Object val=((Object[])mValue)[0];      if (val == null) {        return "";      } else {        return val.toString();      }    } else {      return Arrays.toString((Object[])mValue);    }  } else {    return mValue.toString();  }}  }
class C{  public boolean isUpdateReferences(){  return fUpdateReferences;}  }
class C{  static void loadLibraryWithPath(String libName,ClassLoader loader,String libraryPath){  throw new Error("TODO - no reference DRLVM code");}  }
class C{  public static void logFixedPointGeometry(String label,Geometry fixedPointGeometry){  if (fixedPointGeometry == null) {    LOG.info("{} is null.",label);  } else   if (fixedPointGeometry.isEmpty()) {    LOG.info("{} is empty.",label);  } else {    String geoJson=new GeometryJSON().toString(fixedDegreeGeometryToFloating(fixedPointGeometry));    if (geoJson == null) {      LOG.info("Could not convert non-null geometry to GeoJSON");    } else {      LOG.info("{} {}",label,geoJson);    }  }}  }
class C{  @PostLoad public void postLoad(){  loadLazy();}  }
class C{  public RuleDefinitionsJson savePipelineRules(String pipelineName,RuleDefinitionsJson pipeline,String rev) throws ApiException {  Object postBody=pipeline;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling savePipelineRules");  }  if (pipeline == null) {    throw new ApiException(400,"Missing the required parameter 'pipeline' when calling savePipelineRules");  }  String path="/v1/pipeline/{pipelineName}/rules".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<RuleDefinitionsJson>(){  };  return apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public static double min(double[] a,int lo,int hi){  if (lo < 0 || hi >= a.length || lo > hi)   throw new IndexOutOfBoundsException("Subarray indices out of bounds");  double min=Double.POSITIVE_INFINITY;  for (int i=lo; i <= hi; i++) {    if (Double.isNaN(a[i]))     return Double.NaN;    if (a[i] < min)     min=a[i];  }  return min;}  }
class C{  public BaseMessage(final long id,final String topic){  this(MessageIdGenerator.getNewId(),topic,null,new Date());}  }
class C{  public static int printDocumentMonospacedWordWrap(Graphics g,Document doc,int fontSize,int pageIndex,PageFormat pageFormat,int tabSize){  g.setColor(Color.BLACK);  g.setFont(new Font("Monospaced",Font.PLAIN,fontSize));  tabSizeInSpaces=tabSize;  fm=g.getFontMetrics();  int fontWidth=fm.charWidth('w');  int fontHeight=fm.getHeight();  int MAX_CHARS_PER_LINE=(int)pageFormat.getImageableWidth() / fontWidth;  int MAX_LINES_PER_PAGE=(int)pageFormat.getImageableHeight() / fontHeight;  final int STARTING_LINE_NUMBER=MAX_LINES_PER_PAGE * pageIndex;  xOffset=(int)pageFormat.getImageableX();  int y=(int)pageFormat.getImageableY() + fm.getAscent() + 1;  int numPrintedLines=0;  currentDocLineNumber=0;  rootElement=doc.getDefaultRootElement();  numDocLines=rootElement.getElementCount();  while (currentDocLineNumber < numDocLines) {    String curLineString;    Element currentLine=rootElement.getElement(currentDocLineNumber);    int startOffs=currentLine.getStartOffset();    try {      curLineString=doc.getText(startOffs,currentLine.getEndOffset() - startOffs);    } catch (    BadLocationException ble) {      ble.printStackTrace();      return Printable.NO_SUCH_PAGE;    }    curLineString=curLineString.replaceAll("\n","");    if (tabSizeInSpaces == 0) {      curLineString=curLineString.replaceAll("\t","");    } else {      int tabIndex=curLineString.indexOf('\t');      while (tabIndex > -1) {        int spacesNeeded=tabSizeInSpaces - (tabIndex % tabSizeInSpaces);        String replacementString="";        for (int i=0; i < spacesNeeded; i++)         replacementString+=' ';        curLineString=curLineString.replaceFirst("\t",replacementString);        tabIndex=curLineString.indexOf('\t');      }    }    while (curLineString.length() > MAX_CHARS_PER_LINE) {      int breakPoint=getLineBreakPoint(curLineString,MAX_CHARS_PER_LINE) + 1;      numPrintedLines++;      if (numPrintedLines > STARTING_LINE_NUMBER) {        g.drawString(curLineString.substring(0,breakPoint),xOffset,y);        y+=fontHeight;        if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)         return Printable.PAGE_EXISTS;      }      curLineString=curLineString.substring(breakPoint,curLineString.length());    }    currentDocLineNumber+=1;    numPrintedLines++;    if (numPrintedLines > STARTING_LINE_NUMBER) {      g.drawString(curLineString,xOffset,y);      y+=fontHeight;      if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)       return Printable.PAGE_EXISTS;    }  }  if (numPrintedLines > STARTING_LINE_NUMBER)   return Printable.PAGE_EXISTS;  return Printable.NO_SUCH_PAGE;}  }
class C{  public void deleteAt(int index){  if (index < 0 || index > this.size) {    return;  }  if (index < this.head.getArr().length) {    int[] arr=this.head.getArr();    int[] newArr=new int[arr.length - 1];    int j=0;    for (int i=0; i < arr.length; i++) {      if (i == index)       continue;      newArr[j++]=arr[i];    }    this.head.setArr(newArr);  } else {    ULLNode tmp=this.head;    index-=tmp.getArr().length;    while (index >= tmp.getNext().getArr().length) {      index-=tmp.getNext().getArr().length;      tmp=tmp.getNext();    }    if (tmp.getNext().getArr().length == 1) {      tmp.setNext(tmp.getNext().getNext());    } else {      int[] arr=tmp.getNext().getArr();      int[] newArr=new int[arr.length - 1];      int j=0;      for (int i=0; i < arr.length; i++) {        if (i == index)         continue;        newArr[j++]=arr[i];      }      tmp.getNext().setArr(newArr);    }  }  this.size--;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public CAddressSpaceNodeComponent(final JTree projectTree,final IDatabase database,final INaviProject project,final INaviAddressSpace addressSpace){  super(new BorderLayout());  Preconditions.checkNotNull(database,"IE01948: Database argument can not be null");  Preconditions.checkNotNull(project,"IE01949: Project argument can't be null");  Preconditions.checkNotNull(addressSpace,"IE01950: Address space argument can't be null");  Preconditions.checkArgument(database.inSameDatabase(project),"IE01951: The project is not in the given database");  Preconditions.checkArgument(database.inSameDatabase(addressSpace),"IE01952: The address space is not in the given database");  Preconditions.checkArgument(project.getContent().getAddressSpaces().contains(addressSpace),"IE01953: Address space does not belong to the given project");  m_addressSpace=addressSpace;  m_table=new CProjectModulesTable(projectTree,database,addressSpace);  final CDefaultFieldDescription<String> nameInfo=new CDefaultFieldDescription<String>(addressSpace.getConfiguration().getName(),new CNameHelp());  final CDefaultFieldDescription<String> descriptionInfo=new CDefaultFieldDescription<String>(addressSpace.getConfiguration().getDescription(),new CDescriptionHelp());  final CDefaultFieldDescription<Date> creationInfo=new CDefaultFieldDescription<Date>(addressSpace.getConfiguration().getCreationDate(),new CCreationDateHelp());  final CDefaultFieldDescription<Date> modificationInfo=new CDefaultFieldDescription<Date>(addressSpace.getConfiguration().getModificationDate(),new CModificationDateHelp());  m_stdEditPanel=new CStandardEditPanel("Address Space",nameInfo,descriptionInfo,creationInfo,modificationInfo);  m_debuggerContainer=new CProjectDebuggerContainer(project);  m_titledBorder=new TitledBorder("");  createGui();  m_synchronizer=new CComponentSynchronizer(this,addressSpace,m_stdEditPanel,m_debuggerCombo,m_titledBorder);  updateSaveButton();  m_stdEditPanel.addInputListener(m_updateListener);  m_debuggerCombo.addActionListener(m_updateListener);}  }
class C{  public void clear(){  for (  OutputStream stream : streams.keySet()) {    remove(stream);  }}  }
class C{  public void enableCurlLogging(String name,int level){  if (name == null) {    throw new NullPointerException("name");  }  if (level < Log.VERBOSE || level > Log.ASSERT) {    throw new IllegalArgumentException("Level is out of range [" + Log.VERBOSE + ".."+ Log.ASSERT+ "]");  }  curlConfiguration=new LoggingConfiguration(name,level);}  }
class C{  public void resetNewMessageCount(){  int oldValue=newMessages;  newMessages=0;  firePropertyChange("messages",oldValue,newMessages);}  }
class C{  public static boolean isEmpty(String s){  if (s == null) {    return true;  }  return s.equals("");}  }
class C{  public static void init(){  Logger rootLogger=Logger.getRootLogger();  EclipseLogAppender eclipseAppender=new EclipseLogAppender();  eclipseAppender.setName("eclipse");  rootLogger.addAppender(eclipseAppender);  eclipseAppender.setLayout(new PatternLayout("%c %x - %m%n"));  Logger eclipseAppenderLogger=Logger.getLogger(EclipseLogAppender.class);  eclipseAppenderLogger.setAdditivity(false);  eclipseAppenderLogger.setLevel(Level.WARN);  Appender defaultAppender=eclipseAppenderLogger.getAppender("default");  if (eclipseAppenderLogger.getAllAppenders().hasMoreElements()) {    eclipseAppenderLogger.removeAllAppenders();  }  if (defaultAppender != null) {    eclipseAppenderLogger.addAppender(defaultAppender);  }}  }
class C{  public T caseDisplayColor_(DisplayColor_ object){  return null;}  }
class C{  private Node createForIn(int declType,Node loop,Node lhs,Node obj,Node body,boolean isForEach){  int destructuring=-1;  int destructuringLen=0;  Node lvalue;  int type=lhs.getType();  if (type == Token.VAR || type == Token.LET) {    Node kid=lhs.getLastChild();    int kidType=kid.getType();    if (kidType == Token.ARRAYLIT || kidType == Token.OBJECTLIT) {      type=destructuring=kidType;      lvalue=kid;      destructuringLen=0;      if (kid instanceof ArrayLiteral)       destructuringLen=((ArrayLiteral)kid).getDestructuringLength();    } else     if (kidType == Token.NAME) {      lvalue=Node.newString(Token.NAME,kid.getString());    } else {      reportError("msg.bad.for.in.lhs");      return null;    }  } else   if (type == Token.ARRAYLIT || type == Token.OBJECTLIT) {    destructuring=type;    lvalue=lhs;    destructuringLen=0;    if (lhs instanceof ArrayLiteral)     destructuringLen=((ArrayLiteral)lhs).getDestructuringLength();  } else {    lvalue=makeReference(lhs);    if (lvalue == null) {      reportError("msg.bad.for.in.lhs");      return null;    }  }  Node localBlock=new Node(Token.LOCAL_BLOCK);  int initType=isForEach ? Token.ENUM_INIT_VALUES : (destructuring != -1 ? Token.ENUM_INIT_ARRAY : Token.ENUM_INIT_KEYS);  Node init=new Node(initType,obj);  init.putProp(Node.LOCAL_BLOCK_PROP,localBlock);  Node cond=new Node(Token.ENUM_NEXT);  cond.putProp(Node.LOCAL_BLOCK_PROP,localBlock);  Node id=new Node(Token.ENUM_ID);  id.putProp(Node.LOCAL_BLOCK_PROP,localBlock);  Node newBody=new Node(Token.BLOCK);  Node assign;  if (destructuring != -1) {    assign=createDestructuringAssignment(declType,lvalue,id);    if (!isForEach && (destructuring == Token.OBJECTLIT || destructuringLen != 2)) {      reportError("msg.bad.for.in.destruct");    }  } else {    assign=simpleAssignment(lvalue,id);  }  newBody.addChildToBack(new Node(Token.EXPR_VOID,assign));  newBody.addChildToBack(body);  loop=createLoop((Jump)loop,LOOP_WHILE,newBody,cond,null,null);  loop.addChildToFront(init);  if (type == Token.VAR || type == Token.LET)   loop.addChildToFront(lhs);  localBlock.addChildToBack(loop);  return localBlock;}  }
class C{  public static void postInit(Properties properties){}  }
class C{  public void invert(){  this.inverted=!this.inverted;}  }
class C{  public void writeOdMatrixToCsv(String filename,DenseDoubleMatrix2D odMatrix){  log.info("Writing OD matrix travel time to " + filename);  int nullcounter=0;  try {    BufferedWriter output=IOUtils.getBufferedWriter(filename);    try {      output.write("fromZone,toZone,carTime");      output.newLine();      int totalSize=(int)Math.pow(odMatrix.rows(),2);      int counter=0;      int multiplier=1;      for (int row=0; row < odMatrix.rows(); row++) {        for (int col=0; col < odMatrix.columns(); col++) {          if (odMatrix.get(row,col) != Double.POSITIVE_INFINITY) {            output.write(mapListEntryToZoneId.get(row).toString());            output.write(",");            output.write(mapListEntryToZoneId.get(col).toString());            output.write(",");            output.write(String.valueOf(odMatrix.get(row,col)));            output.newLine();          } else {            nullcounter++;          }          if (++counter == multiplier) {            double percentage=(((double)counter) / ((double)totalSize)) * 100;            log.info("   Entries written: " + counter + " ("+ String.format("%3.2f%%)",percentage));            multiplier*=2;          }        }      }      log.info("   Entries written: " + counter + " (Done)");    }  finally {      output.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  double density=Math.round((1 - nullcounter / (Math.pow(odMatrix.rows(),2))) * 100);  log.info("OD matrix written. Density: " + density + "% ("+ nullcounter+ " entries null)");}  }
class C{  public boolean preservePositionIncrements(){  return preservePositionIncrements;}  }
class C{  int[] findNearestArea(int pixelX,int pixelY,int spanX,int spanY,int[] result){  return findNearestArea(pixelX,pixelY,spanX,spanY,null,false,result);}  }
class C{  public ScaledVector(double scale,Vec base){  this.scale=scale;  this.base=base;}  }
class C{  public boolean addList(final String name){  boolean ret=false;  if (!names.containsKey(name)) {    names.put(name,listCount);    entries.add(new LinkedList<String>());    properties.add(new HashMap<String,String>());    currentEntries=entries.get(listCount);    currentProperties=properties.get(listCount);    listCount++;    ret=true;  }  return ret;}  }
class C{  public static List<String> readFileToList(String filePath){  File file=new File(filePath);  List<String> fileContent=new ArrayList<String>();  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    String line=null;    while ((line=reader.readLine()) != null) {      fileContent.add(line);    }    reader.close();    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Element firstChildElement(Element element,String... childElementNames){  return firstChildElement(element,UtilMisc.toSetArray(childElementNames));}  }
class C{  protected SquareTerrain(int divisions,double[][] terrain,Vector3[][] normals,double[][] temperature,double xScale,double zScale){  mDivisions=divisions;  mTerrain=terrain;  mTemperature=temperature;  mNormals=normals;  mXScale=xScale;  mZScale=zScale;  mOneOverXScale=1 / xScale;  mOneOverZScale=1 / zScale;  for (int i=0; i <= divisions; ++i)   for (int j=0; j <= divisions; ++j) {    if (terrain[i][j] < mMinH)     mMinH=terrain[i][j]; else     if (terrain[i][j] > mMaxH)     mMaxH=terrain[i][j];    if (temperature[i][j] < mMinT)     mMinT=temperature[i][j]; else     if (temperature[i][j] > mMaxT)     mMaxT=temperature[i][j];  }  if (debug) {    Material mat=new Material();    mV0=new Sphere(0.2f,8,8);    mV1=new Sphere(0.2f,8,8);    mV2=new Sphere(0.2f,8,8);    mNor=new Sphere(0.2f,8,8);    mNorBase=new Sphere(0.2f,8,8);    mV0.setMaterial(mat);    mV1.setMaterial(mat);    mV2.setMaterial(mat);    mNor.setMaterial(mat);    mNorBase.setMaterial(mat);    mNor.setColor(Color.MAGENTA);    mNorBase.setColor(Color.BLACK);    mV0.setColor(Color.RED);    mV1.setColor(Color.GREEN);    mV2.setColor(Color.BLUE);    this.addChild(mV0);    this.addChild(mV1);    this.addChild(mV2);    this.addChild(mNor);    this.addChild(mNorBase);  }}  }
class C{  public void findAndUndo(Object someObj){  navPanel.findAndUndo(someObj);  zoomPanel.findAndUndo(someObj);  scaleField.findAndUndo(someObj);}  }
class C{  public void requestPasswordForShareViaLink(OCFile file,boolean createShare){  SharePasswordDialogFragment dialog=SharePasswordDialogFragment.newInstance(file,createShare);  dialog.show(mFileActivity.getSupportFragmentManager(),SharePasswordDialogFragment.PASSWORD_FRAGMENT);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.595 -0500",hash_original_method="9D058B55598451C1F46B788161F3861A",hash_generated_method="06F67D4C24568F09661364790AC2A7A2") public void entity(String name,int value){  theEntities.put(name,new Integer(value));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SubscriptionHistory(Subscription c){  super(c);  if (c.getOrganization() != null) {    setOrganizationObjKey(c.getOrganization().getKey());  }  if (c.getProduct() != null) {    setProductObjKey(c.getProduct().getKey());  }  if (c.getAsyncTempProduct() != null) {    setAsyncTempProductObjKey(Long.valueOf(c.getAsyncTempProduct().getKey()));  }  if (c.getMarketplace() != null) {    setMarketplaceObjKey(Long.valueOf(c.getMarketplace().getKey()));  }  if (c.getPaymentInfo() != null) {    setPaymentInfoObjKey(Long.valueOf(c.getPaymentInfo().getKey()));  }  if (c.getBillingContact() != null) {    setBillingContactObjKey(Long.valueOf(c.getBillingContact().getKey()));  }  if (c.getOwner() != null) {    setOwnerObjKey(Long.valueOf(c.getOwner().getKey()));  }  if (c.getUserGroup() != null) {    setUserGroupObjKey(Long.valueOf(c.getUserGroup().getKey()));  }}  }
class C{  public double asDoubleConst(Value value){  assert isJavaConstant(value) && asJavaConstant(value).getJavaKind() == JavaKind.Double;  JavaConstant constant=asJavaConstant(value);  return constant.asDouble();}  }
class C{  public int compare(Object o1,Object o2){  return comparator.compare(o1,o2);}  }
class C{  public EaseInOut(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.523 -0500",hash_original_method="13ACD75B58E729F7C9E7DE6208579581",hash_generated_method="ECAD6D583B3C0FBC2F97779678F13777") public void stop(){  if (isRunning()) {    unscheduleSelf(this);  }}  }
class C{  final boolean putKey(V key,boolean onlyIfAbsent){  if (key == null)   throw new NullPointerException();  int hash=spread(key.hashCode());  int binCount=0;  for (Node<V>[] tab=table; ; ) {    Node<V> f;    int n, i, fh;    if (tab == null || (n=tab.length) == 0)     tab=initTable(); else     if ((f=tabAt(tab,i=(n - 1) & hash)) == null) {      if (casTabAt(tab,i,null,new Node<V>(hash,key,null)))       break;    } else     if ((fh=f.hash) == MOVED)     tab=helpTransfer(tab,f); else {      boolean wasPresent=false;synchronized (f) {        if (tabAt(tab,i) == f) {          if (fh >= 0) {            binCount=1;            for (Node<V> e=f; ; ++binCount) {              V ek;              if (e.hash == hash && ((ek=e.key) == key || (ek != null && key.equals(ek)))) {                wasPresent=true;                break;              }              Node<V> pred=e;              if ((e=e.next) == null) {                pred.next=new Node<V>(hash,key,null);                break;              }            }          } else           if (f instanceof TreeBin) {            Node<V> p;            binCount=2;            if ((p=((TreeBin<V>)f).putTreeVal(hash,key)) != null) {              wasPresent=true;            }          }        }      }      if (binCount != 0) {        if (binCount >= TREEIFY_THRESHOLD)         treeifyBin(tab,i);        if (wasPresent)         return true;        break;      }    }  }  addCount(1L,binCount);  return false;}  }
class C{  public TypesEditPlugin(){  super(new ResourceLocator[]{BaseEditPlugin.INSTANCE});}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tUse kernel density estimator rather than normal\n" + "\tdistribution for numeric attributes","K",0,"-K"));  newVector.addElement(new Option("\tUse supervised discretization to process numeric attributes\n","D",0,"-D"));  newVector.addElement(new Option("\tDisplay model in old format (good when there are " + "many classes)\n","O",0,"-O"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @Category(FlakyTest.class) @Test public void testMissingMemberRedundancy1(){  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  createPR(vm0,1);  createPR(vm1,1);  createData(vm0,0,NUM_BUCKETS,"a");  Set<Integer> vm0Buckets=getBucketList(vm0);  Set<Integer> vm1Buckets=getBucketList(vm1);  closeCache(vm1);  checkData(vm0,0,NUM_BUCKETS,"a");  removeData(vm0,0,NUM_BUCKETS / 2);  createData(vm0,NUM_BUCKETS / 2,NUM_BUCKETS,"b");  createPR(vm2,1);  Set<Integer> vm2Buckets=getBucketList(vm2);  assertEquals(Collections.emptySet(),vm2Buckets);  createPR(vm1,1);  checkData(vm1,0,NUM_BUCKETS / 2,null);  checkData(vm1,NUM_BUCKETS / 2,NUM_BUCKETS,"b");  assertEquals(vm0Buckets,getBucketList(vm0));  assertEquals(vm1Buckets,getBucketList(vm1));  assertEquals(Collections.emptySet(),getBucketList(vm2));}  }
class C{  @Override public Object clone(){  return new NominalStatistics(this);}  }
class C{  public OpenVisionWorldAction(final VisionWorldDesktopComponent desktopComponent){  super("Open...");  if (desktopComponent == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.desktopComponent=desktopComponent;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Open.png"));  putValue(SHORT_DESCRIPTION,"Open Vision World");}  }
class C{  public static byte[] longToRegisters(long v){  byte[] registers=new byte[8];  registers[0]=(byte)(0xff & (v >> 56));  registers[1]=(byte)(0xff & (v >> 48));  registers[2]=(byte)(0xff & (v >> 40));  registers[3]=(byte)(0xff & (v >> 32));  registers[4]=(byte)(0xff & (v >> 24));  registers[5]=(byte)(0xff & (v >> 16));  registers[6]=(byte)(0xff & (v >> 8));  registers[7]=(byte)(0xff & v);  return registers;}  }
class C{  public void message(SerialMessage r){  log.warn("unexpected message");}  }
class C{  public CChangeFunctionNameAction(final JFrame window,final INaviView view){  super(String.format("Change function name '%s'",view.getName()));  m_window=window;  m_view=view;}  }
class C{  private ReaderTestUtils(){}  }
class C{  @Override public int executeUpdate(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public StringList reset(){  curr=root;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.338 -0400",hash_original_method="AE312126AF817511B6AC9FA9A8EAB6F5",hash_generated_method="5C0FD56F27A38F18958A78AD40CC95DD") @Override public void mark(int readAheadLimit){  mark=idx;}  }
class C{  private void overshadowRect(final Rectangle2D rect,final Graphics2D g){  Graphics2D g2=(Graphics2D)g.create();  g2.setColor(GRAY_OUT);  g2.fill(rect);  g2.dispose();}  }
class C{  public TFloatDoubleHashMap(int initialCapacity,float loadFactor,TFloatHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  @RequestProcessing(value="/admin/user/{userId}/email",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void updateUserEmail(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userId) throws Exception {  final JSONObject user=userQueryService.getUser(userId);  final String oldEmail=user.optString(User.USER_EMAIL);  final String newEmail=request.getParameter(User.USER_EMAIL);  if (oldEmail.equals(newEmail)) {    response.sendRedirect(Latkes.getServePath() + "/admin/user/" + userId);    return;  }  user.put(User.USER_EMAIL,newEmail);  try {    userMgmtService.updateUserEmail(userId,user);  } catch (  final ServiceException e) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,e.getMessage());    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  response.sendRedirect(Latkes.getServePath() + "/admin/user/" + userId);}  }
class C{  public void dispose(){  m_model.dispose();}  }
class C{  @Override public void updateDate(String columnLabel,Date x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDate(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueDate.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void stop(){  if (started) {    positionUs=elapsedRealtimeMinus(deltaUs);    started=false;  }}  }
class C{  protected void visitBounds(AnnotatedTypeMirror boundedType,AnnotatedTypeMirror upperBound,AnnotatedTypeMirror lowerBound,AnnotationMirror qual){  final boolean prevIsUpperBound=isUpperBound;  final boolean prevIsLowerBound=isLowerBound;  final BoundType prevBoundType=boundType;  boundType=getBoundType(boundedType,atypeFactory);  try {    isLowerBound=true;    isUpperBound=false;    scanAndReduce(lowerBound,qual,null);    visitedNodes.put(type,null);    isLowerBound=false;    isUpperBound=true;    scanAndReduce(upperBound,qual,null);    visitedNodes.put(type,null);  }  finally {    isUpperBound=prevIsUpperBound;    isLowerBound=prevIsLowerBound;    boundType=prevBoundType;  }}  }
class C{  @Override public boolean supportsLikeEscapeClause(){  debugCodeCall("supportsLikeEscapeClause");  return true;}  }
class C{  public void unRegister(Object obj){  if (obj instanceof ForceConstraint)   objCE.unRegisterForceConstraint((ForceConstraint)obj);  if (obj instanceof ImpulseConstraint)   objCE.unRegisterImpulseConstraint((ImpulseConstraint)obj);}  }
class C{  public long guest_time(){  return Long.parseLong(fields[42]);}  }
class C{  public SummaryPanel(final NeuronGroup ng,boolean editable){  setGroup(ng);  this.editable=editable;  incomingGroupLabel.setText("Incoming: ");  outgoingGroupLabel.setText("Outgoing: ");  fillFieldValues();  initializeLayout();}  }
class C{  public boolean isTarget(){  return getMeasureTarget().signum() != 0;}  }
class C{  public boolean addSnappedNode(NodedSegmentString segStr,int segIndex){  Coordinate p0=segStr.getCoordinate(segIndex);  Coordinate p1=segStr.getCoordinate(segIndex + 1);  if (intersects(p0,p1)) {    segStr.addIntersection(getCoordinate(),segIndex);    return true;  }  return false;}  }
class C{  public static SipRequest createMultipartInvite(SipDialogPath dialog,String[] featureTags,String[] acceptTags,String multipart,String boundary) throws PayloadException {  try {    ContentTypeHeader contentType=SipUtils.HEADER_FACTORY.createContentTypeHeader("multipart","mixed");    contentType.setParameter("boundary",boundary);    return createInvite(dialog,featureTags,acceptTags,multipart,contentType);  } catch (  ParseException e) {    throw new PayloadException("Can't create SIP message with multipart : " + multipart,e);  }}  }
class C{  @Override public boolean cannotStandUpFromHullDown(){  int i=0;  if (isLocationBad(LOC_LARM)) {    i++;  }  if (isLocationBad(LOC_RARM)) {    i++;  }  if (isLocationBad(LOC_LLEG)) {    i++;  }  if (isLocationBad(LOC_RLEG)) {    i++;  }  return i >= 3;}  }
class C{  private void loadColumnAccess(boolean reload){  if (m_columnAccess != null && !reload)   return;  ArrayList<MColumnAccess> list=new ArrayList<MColumnAccess>();  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="SELECT * FROM AD_Column_Access " + "WHERE AD_Role_ID=? AND IsActive='Y'";  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getAD_Role_ID());    rs=pstmt.executeQuery();    while (rs.next())     list.add(new MColumnAccess(getCtx(),rs,get_TrxName()));  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);  }  m_columnAccess=new MColumnAccess[list.size()];  list.toArray(m_columnAccess);  log.fine("#" + m_columnAccess.length);}  }
class C{  @Field(39) public Pointer<Byte> pcVal(){  return this.io.getPointerField(this,39);}  }
class C{  public final void testRead05(){  InputStream is=new ByteArrayInputStream(myMessage);  DigestInputStream dis=new DigestInputStream(is,null);  try {    for (int i=0; i < MY_MESSAGE_LEN; i++) {      dis.read();    }    fail("read() must not work when digest functionality is on");  } catch (  Exception e) {  }}  }
class C{  public SexecSwitch(){  if (modelPackage == null) {    modelPackage=SexecPackage.eINSTANCE;  }}  }
class C{  public CipherInputStream(InputStream is,AEADBlockCipher cipher,int bufSize){  super(is);  this.aeadBlockCipher=cipher;  this.inBuf=new byte[bufSize];  this.skippingCipher=(cipher instanceof SkippingCipher) ? (SkippingCipher)cipher : null;}  }
class C{  public void appendNode(final CCriteriumTreeNode parent,final CCriteriumTreeNode child){  CCriteriumTreeNode.append(parent,child);  for (  final ICriteriumTreeListener listener : m_listeners) {    try {      listener.appendedNode(this,parent,child);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public boolean codeMatches(String queryCode){  int length=id.length();  if (Debug.debugging("symbology.detail")) {    Debug.output("Checking " + queryCode + " against |"+ id+ "| starting at "+ startIndex+ " for "+ length);  }  return queryCode.regionMatches(true,startIndex,id,0,length);}  }
class C{  @Override public String toString(){  return "[Min(" + FormatUtil.format(min,",") + "), Max("+ FormatUtil.format(max,",")+ ")]";}  }
class C{  protected void acceptState(){}  }
class C{  public void error(String message){  errorCallback.invoke(message);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private void add(EditItem item){  while (mmHistory.size() > mmPosition) {    mmHistory.removeLast();  }  mmHistory.add(item);  mmPosition++;  if (mmMaxHistorySize >= 0) {    trimHistory();  }}  }
class C{  public void decCqCount(){  this._stats.incInt(_cqCountId,-1);}  }
class C{  public Builder insert(final String inserted){  this.newText=inserted;  return this;}  }
class C{  public void componentAdded(ContainerEvent e){  ((ContainerListener)a).componentAdded(e);  ((ContainerListener)b).componentAdded(e);}  }
class C{  public void makePerceptSentence(AgentPercept p,int time){  if (p.isStench()) {    tell(newSymbol(PERCEPT_STENCH,time));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(PERCEPT_STENCH,time)));  }  if (p.isBreeze()) {    tell(newSymbol(PERCEPT_BREEZE,time));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(PERCEPT_BREEZE,time)));  }  if (p.isGlitter()) {    tell(newSymbol(PERCEPT_GLITTER,time));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(PERCEPT_GLITTER,time)));  }  if (p.isBump()) {    tell(newSymbol(PERCEPT_BUMP,time));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(PERCEPT_BUMP,time)));  }  if (p.isScream()) {    tell(newSymbol(PERCEPT_SCREAM,time));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(PERCEPT_SCREAM,time)));  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public VersionFilter(AbstractMethod method,UriInfo uriInfo){  this.method=method;  this.uriInfo=uriInfo;}  }
class C{  private Object[] unmarshalParametersChecked(DeserializationChecker checker,Method method,MarshalInputStream in) throws IOException, ClassNotFoundException {  int callID=methodCallIDCount.getAndIncrement();  MyChecker myChecker=new MyChecker(checker,method,callID);  in.setStreamChecker(myChecker);  try {    Class<?>[] types=method.getParameterTypes();    Object[] values=new Object[types.length];    for (int i=0; i < types.length; i++) {      myChecker.setIndex(i);      values[i]=unmarshalValue(types[i],in);    }    myChecker.end(callID);    return values;  }  finally {    in.setStreamChecker(null);  }}  }
class C{  @Inject public ToolbarPresenter(ToolbarView view){  this.view=view;  this.view.setDelegate(this);  this.view.setAddSeparatorFirst(true);  this.view.setPlace(ActionPlaces.MAIN_TOOLBAR);}  }
class C{  public void buildViews(HashMap<String,Set<RString>> stringListMap){  idFreqMap.put(NONAME,Integer.valueOf(0));  buildViews(view,stringListMap);}  }
class C{  public OffsetMask(Mask mask,Vector offset){  checkNotNull(mask);  checkNotNull(offset);  this.mask=mask;  this.offset=offset;}  }
class C{  public void testConfigureDefaultWebappsDirectory() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/conf/server.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("webapps","//Host/@appBase",config);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.966 -0500",hash_original_method="8ACC6861A4ACA970AEBA8CCFE6984687",hash_generated_method="7B1E5B53927553375DCF3987967EF71D") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentEncodingParser.parse");  ContentEncodingList list=new ContentEncodingList();  try {    headerName(TokenTypes.CONTENT_ENCODING);    while (lexer.lookAhead(0) != '\n') {      ContentEncoding cl=new ContentEncoding();      cl.setHeaderName(SIPHeaderNames.CONTENT_ENCODING);      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      cl.setEncoding(token.getTokenValue());      this.lexer.SPorHT();      list.add(cl);      while (lexer.lookAhead(0) == ',') {        cl=new ContentEncoding();        this.lexer.match(',');        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        this.lexer.SPorHT();        token=lexer.getNextToken();        cl.setEncoding(token.getTokenValue());        this.lexer.SPorHT();        list.add(cl);      }    }    return list;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentEncodingParser.parse");  }}  }
class C{  public void reverse(){  float tmp;  int limit=size / 2;  int j=size - 1;  float[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  public static Object negativeToMeaningful(Numeric numeric){  Object valToInsert=null;  if (numeric.isNegative()) {switch (numeric.getColumnSpec().getLength()) {case 1:      valToInsert=TINYINT_MAX_VALUE + 1 + numeric.getExtractedValue();    break;case 2:  valToInsert=SMALLINT_MAX_VALUE + 1 + numeric.getExtractedValue();break;case 3:valToInsert=MEDIUMINT_MAX_VALUE + 1 + numeric.getExtractedValue();break;case 4:valToInsert=INTEGER_MAX_VALUE + 1 + numeric.getExtractedValue();break;case 8:valToInsert=BIGINT_MAX_VALUE.add(BigInteger.valueOf(1 + numeric.getExtractedValue()));break;default :logger.warn("Column length unsupported: " + numeric.getColumnSpec().getLength());break;}if (logger.isDebugEnabled()) logger.debug(numeric.getExtractedValue() + " -> " + valToInsert);} else {valToInsert=numeric.getExtractedValue();}return valToInsert;}  }
class C{  synchronized void cleanup(long timeout){  long t=System.currentTimeMillis();synchronized (loaders) {    Iterator i=loaders.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      ClassLoaderBox clb=(ClassLoaderBox)e.getValue();      final File f=clb.cl.file;      String name=(String)e.getKey();      if (clb.users <= 0 && t - clb.unusedFrom > timeout) {        Logger.debug(getClass().getName(),"scheduling removal of " + name + (f.isFile() ? " and " + f : ""));        if (f.isFile())         shutDown.toDelete.add(f);        i.remove();      }    }  }  shutDown.tryRemoval();}  }
class C{  private void drawVStretch(float stretch){  final float ar=scurve(stretch,7.5f);  final float ag=scurve(stretch,8.0f);  final float ab=scurve(stretch,8.5f);  if (DEBUG) {    Slog.d(TAG,"drawVStretch: stretch=" + stretch + ", ar="+ ar+ ", ag="+ ag+ ", ab="+ ab);  }  GLES10.glBlendFunc(GLES10.GL_ONE,GLES10.GL_ONE);  GLES10.glEnable(GLES10.GL_BLEND);  GLES10.glVertexPointer(2,GLES10.GL_FLOAT,0,mVertexBuffer);  GLES10.glEnableClientState(GLES10.GL_VERTEX_ARRAY);  GLES10.glDisable(GLES10.GL_TEXTURE_2D);  GLES10.glEnable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);  GLES10.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,mTexNames[0]);  GLES10.glTexEnvx(GLES10.GL_TEXTURE_ENV,GLES10.GL_TEXTURE_ENV_MODE,mMode == MODE_WARM_UP ? GLES10.GL_MODULATE : GLES10.GL_REPLACE);  GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES10.GL_TEXTURE_MAG_FILTER,GLES10.GL_LINEAR);  GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES10.GL_TEXTURE_MIN_FILTER,GLES10.GL_LINEAR);  GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES10.GL_TEXTURE_WRAP_S,GLES10.GL_CLAMP_TO_EDGE);  GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES10.GL_TEXTURE_WRAP_T,GLES10.GL_CLAMP_TO_EDGE);  GLES10.glEnable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);  GLES10.glTexCoordPointer(2,GLES10.GL_FLOAT,0,mTexCoordBuffer);  GLES10.glEnableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);  setVStretchQuad(mVertexBuffer,mDisplayWidth,mDisplayHeight,ar,mSwapNeeded);  GLES10.glColorMask(true,false,false,true);  GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);  setVStretchQuad(mVertexBuffer,mDisplayWidth,mDisplayHeight,ag,mSwapNeeded);  GLES10.glColorMask(false,true,false,true);  GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);  setVStretchQuad(mVertexBuffer,mDisplayWidth,mDisplayHeight,ab,mSwapNeeded);  GLES10.glColorMask(false,false,true,true);  GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);  GLES10.glDisable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);  GLES10.glDisableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);  GLES10.glColorMask(true,true,true,true);  if (mMode == MODE_COOL_DOWN) {    GLES10.glColor4f(ag,ag,ag,1.0f);    GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN,0,4);  }  GLES10.glDisableClientState(GLES10.GL_VERTEX_ARRAY);  GLES10.glDisable(GLES10.GL_BLEND);}  }
class C{  public static int intersectRayAar(Vector2fc origin,Vector2fc dir,Vector2fc min,Vector2fc max,Vector2f result){  return intersectRayAar(origin.x(),origin.y(),dir.x(),dir.y(),min.x(),min.y(),max.x(),max.y(),result);}  }
class C{  public static int fuzzyScore(CharSequence term,CharSequence query){  return fuzzyScore(term,query,Locale.getDefault());}  }
class C{  public SSLPermission(String name){  super(name);}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private String computeCss(String mediaUrl,int thumbnailWidth,int thumbnailHeight,int rotationAngle){  String css="body { background-color: #000; height: 100%; width: 100%; margin: 0px; padding: 0px; }" + ".wrap { position: absolute; left: 0px; right: 0px; width: 100%; height: 100%; " + "display: -webkit-box; -webkit-box-pack: center; -webkit-box-align: center; "+ "display: box; box-pack: center; box-align: center; } ";  Uri mediaUri=null;  try {    mediaUri=Uri.parse(mediaUrl);  } catch (  Exception e) {    Log.e(LOG_TAG,"## computeCss() : Uri.parse failed " + e.getMessage());  }  if (null == mediaUri) {    return css;  }  if (rotationAngle == Integer.MAX_VALUE) {    if (null != mediaUrl) {      rotationAngle=ImageUtils.getRotationAngleForBitmap(mContext,mediaUri);    }  }  if (rotationAngle != 0) {    int imageWidth=thumbnailWidth;    int imageHeight=thumbnailHeight;    try {      FileInputStream imageStream=new FileInputStream(new File(mediaUri.getPath()));      BitmapFactory.Options options=new BitmapFactory.Options();      options.inJustDecodeBounds=true;      options.inPreferredConfig=Bitmap.Config.ARGB_8888;      options.outWidth=-1;      options.outHeight=-1;      Bitmap fullSizeBitmap=null;      try {        fullSizeBitmap=BitmapFactory.decodeStream(imageStream,null,options);      } catch (      OutOfMemoryError e) {        Log.e(LOG_TAG,"## computeCss() : BitmapFactory.decodeStream failed " + e.getMessage());      }      imageWidth=options.outWidth;      imageHeight=options.outHeight;      imageStream.close();      fullSizeBitmap.recycle();    } catch (    Exception e) {      Log.e(LOG_TAG,"## computeCss() : failed " + e.getMessage());    }    String cssRotation=calcCssRotation(rotationAngle,imageWidth,imageHeight);    css+="#image { " + cssRotation + " } ";    css+="#thumbnail { " + cssRotation + " } ";  }  return css;}  }
class C{  public Population breedPopulation(EvolutionState state){  Population oldPop=(Population)state.population;  Population newPop=super.breedPopulation(state);  Individual[] combinedInds;  Subpopulation[] subpops=oldPop.subpops;  Subpopulation oldSubpop;  Subpopulation newSubpop;  int subpopsLength=subpops.length;  for (int i=0; i < subpopsLength; i++) {    oldSubpop=oldPop.subpops[i];    newSubpop=newPop.subpops[i];    combinedInds=new Individual[oldSubpop.individuals.length + newSubpop.individuals.length];    System.arraycopy(newSubpop.individuals,0,combinedInds,0,newSubpop.individuals.length);    System.arraycopy(oldSubpop.individuals,0,combinedInds,newSubpop.individuals.length,oldSubpop.individuals.length);    newSubpop.individuals=combinedInds;  }  return newPop;}  }
class C{  public void add(File file,String password) throws IOException, UnsupportedEncodingException {  FileInputStream fis=new FileInputStream(file);  try {    add(file.getPath(),fis,password);  }  finally {    fis.close();  }}  }
class C{  public static boolean isInArc(IGame game,int attackerId,int weaponId,Targetable t){  Entity ae=game.getEntity(attackerId);  if ((ae instanceof Mech) && (((Mech)ae).getGrappled() == t.getTargetId())) {    return true;  }  int facing=ae.isSecondaryArcWeapon(weaponId) ? ae.getSecondaryFacing() : ae.getFacing();  if ((ae instanceof Tank) && (ae.getEquipment(weaponId).getLocation() == ((Tank)ae).getLocTurret2())) {    facing=((Tank)ae).getDualTurretFacing();  }  if (ae.getEquipment(weaponId).isMechTurretMounted()) {    facing=ae.getSecondaryFacing() + (ae.getEquipment(weaponId).getFacing() % 6);  }  Coords aPos=ae.getPosition();  Vector<Coords> tPosV=new Vector<Coords>();  Coords tPos=t.getPosition();  if (game.getBoard().inSpace() && ae.getPosition().equals(t.getPosition()) && (ae instanceof Aero)&& (t instanceof Aero)) {    if (((Aero)ae).shouldMoveBackHex((Aero)t)) {      aPos=ae.getPriorPosition();    }    if (((Aero)t).shouldMoveBackHex((Aero)ae)) {      tPos=((Entity)t).getPriorPosition();    }  }  if (isGroundToAir(ae,t) && (t instanceof Entity)) {    tPos=getClosestFlightPath(ae.getId(),ae.getPosition(),(Entity)t);  }  tPosV.add(tPos);  if ((t instanceof Entity) && (null != ((Entity)t).getSecondaryPositions())) {    for (    int key : ((Entity)t).getSecondaryPositions().keySet()) {      tPosV.add(((Entity)t).getSecondaryPositions().get(key));    }  }  return Compute.isInArc(aPos,facing,tPosV,ae.getWeaponArc(weaponId));}  }
class C{  public static ActionErrors validarDatosConfiguracionLdap(ConfiguracionLdapForm configuracionLdapForm){  ActionErrors errores=new ActionErrors();  boolean datosValidos=true;  if (configuracionLdapForm != null) {    if (isNuloOVacio(configuracionLdapForm.getDireccion())) {      datosValidos=false;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.configuracionLdap.direccion.required");      errores.add("Error interno",error);    }    if (!isNuloOVacio(configuracionLdapForm.getPuerto())) {      if (!GenericValidator.isInt(configuracionLdapForm.getPuerto())) {        datosValidos=false;        ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.configuracionLdap.puerto.formatoIncorrecto");        errores.add("Error interno",error);      }    }    if (isNuloOVacio(configuracionLdapForm.getNodoRaiz())) {      datosValidos=false;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.configuracionLdap.nodoRaiz.required");      errores.add("Error interno",error);    }    int tipoServidor=Integer.valueOf(configuracionLdapForm.getTipoServidor());    if (tipoServidor != CfgDefs.LDAP_ENGINE_ACTIVE_DIRECTORY && configuracionLdapForm.getUsarSOAuth()) {      datosValidos=false;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.configuracionLdap.tipoServidor.usarSOAuthIncorrecto");      errores.add("Error interno",error);    }  }  if (datosValidos) {    errores=null;  }  return errores;}  }
class C{  @SuppressWarnings("unchecked") public DummyData(int cols,int rows,Comparable<?> value){  value.getClass();  this.cols=cols;  this.rows=rows;  this.value=value;  Class<? extends Comparable<?>>[] types=new Class[cols];  Arrays.fill(types,value.getClass());  setColumnTypes(types);}  }
class C{  @Override protected void onNfcFeatureNotFound(){  toast(getString(R.string.noNfcMessage));}  }
class C{  private void draw(final ExecutionUnit process,final Graphics2D g2,final ProcessRendererModel rendererModel,final boolean printing){  ProcessBackgroundImage image=rendererModel.getBackgroundImage(process);  if (image != null) {    Graphics2D g2D=(Graphics2D)g2.create();    int x=image.getX();    int y=image.getY();    int w=image.getWidth();    int h=image.getHeight();    if (x == -1) {      double processWidth=rendererModel.getProcessWidth(process);      x=(int)((processWidth - w) / 2);    }    if (y == -1) {      double processHeight=rendererModel.getProcessHeight(process);      y=(int)((processHeight - h) / 2);    }    if (rendererModel.getZoomFactor() > 1.0) {      float alpha=Math.max(MIN_OPACITY,2.0f - (float)rendererModel.getZoomFactor());      AlphaComposite ac=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,alpha);      g2D.setComposite(ac);    }    g2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);    g2D.drawImage(image.getImage(loadListener),x,y,w,h,null);    g2D.dispose();  }}  }
class C{  public void showView(View next,AnimationType from){  if (mInAnimation != null) {    mInAnimation.setAnimationListener(null);  }  if (mOutAnimation != null) {    mOutAnimation.setAnimationListener(null);  }switch (from) {case RIGHT:    mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_in);  mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_out);mAutoSaved=false;break;case LEFT:mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_in);mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_out);mAutoSaved=false;break;case FADE:mInAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_in);mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_out);break;}mInAnimation.setAnimationListener(this);mOutAnimation.setAnimationListener(this);if (mCurrentView != null) {InputMethodManager inputManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);inputManager.hideSoftInputFromWindow(mCurrentView.getWindowToken(),0);}RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);mStaleView=mCurrentView;mCurrentView=next;mQuestionHolder.addView(mCurrentView,lp);mAnimationCompletionSet=0;if (mStaleView != null) {mStaleView.startAnimation(mOutAnimation);mQuestionHolder.removeView(mStaleView);} else {mAnimationCompletionSet=2;}mCurrentView.startAnimation(mInAnimation);String logString="";switch (from) {case RIGHT:logString="next";break;case LEFT:logString="previous";break;case FADE:logString="refresh";break;}Collect.getInstance().getActivityLogger().logInstanceAction(this,"showView",logString);FormController formController=Collect.getInstance().getFormController();if (formController.getEvent() == FormEntryController.EVENT_QUESTION || formController.getEvent() == FormEntryController.EVENT_GROUP || formController.getEvent() == FormEntryController.EVENT_REPEAT) {FormEntryPrompt[] prompts=Collect.getInstance().getFormController().getQuestionPrompts();for (FormEntryPrompt p : prompts) {List<TreeElement> attrs=p.getBindAttributes();for (int i=0; i < attrs.size(); i++) {if (!mAutoSaved && "saveIncomplete".equals(attrs.get(i).getName())) {saveDataToDisk(false,false,null,false);mAutoSaved=true;}}}}}  }
class C{  private static Point2D.Double v2Normalize(Point2D.Double v){  double len=v2Length(v);  if (len != 0.0) {    v.x/=len;    v.y/=len;  }  return v;}  }
class C{  public static Bound<String> withSuffix(String nameExtension){  return new Bound<>(DEFAULT_TEXT_CODER).withSuffix(nameExtension);}  }
class C{  public Matrix4x3d swap(Matrix4x3d other){  double tmp;  tmp=m00;  m00=other.m00;  other.m00=tmp;  tmp=m01;  m01=other.m01;  other.m01=tmp;  tmp=m02;  m02=other.m02;  other.m02=tmp;  tmp=m10;  m10=other.m10;  other.m10=tmp;  tmp=m11;  m11=other.m11;  other.m11=tmp;  tmp=m12;  m12=other.m12;  other.m12=tmp;  tmp=m20;  m20=other.m20;  other.m20=tmp;  tmp=m21;  m21=other.m21;  other.m21=tmp;  tmp=m22;  m22=other.m22;  other.m22=tmp;  tmp=m30;  m30=other.m30;  other.m30=tmp;  tmp=m31;  m31=other.m31;  other.m31=tmp;  tmp=m32;  m32=other.m32;  other.m32=tmp;  byte props=properties;  this.properties=other.properties;  other.properties=props;  return this;}  }
class C{  @Subscriber(tag="another") void methodWithAnotherTag(User person){}  }
class C{  final public MutableString insert(final int index,final String s){  final int length=length();  if (index > length)   throw new StringIndexOutOfBoundsException();  final int l=s.length();  if (l == 0)   return this;  final int newLength=length + l;  expand(newLength);  System.arraycopy(array,index,array,index + l,length - index);  s.getChars(0,l,array,index);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public static DateTimeFormatter year(){  return yearElement();}  }
class C{  public Holder(GeneralNames entityName,int version){  this.entityName=entityName;  this.version=version;}  }
class C{  public Class<? extends AbstractAntlrTokenToAttributeIdMapper> bindAbstractAntlrTokenToAttributeIdMapper(){  return TokenToAttributeIdMapper.class;}  }
class C{  private RrdEntry waitEmpty(String path) throws IOException, InterruptedException {  RrdEntry ref=getEntry(path,true);  try {    while (ref.count != 0) {      passNext(ACTION.SWAP,ref);      ref.waitempty.await();      ref=getEntry(path,true);    }    return ref;  } catch (  InterruptedException e) {    passNext(ACTION.DROP,ref);    throw e;  }}  }
class C{  public boolean isLESS_EQUAL(){  return value == LESS_EQUAL;}  }
class C{  public TouchHandler(GraphicalView view,AbstractChart chart){  graphicalView=view;  zoomR=graphicalView.getZoomRectangle();  if (chart instanceof XYChart) {    mRenderer=((XYChart)chart).getRenderer();  } else {    mRenderer=((RoundChart)chart).getRenderer();  }  if (mRenderer.isPanEnabled()) {    mPan=new Pan(chart);  }  if (mRenderer.isZoomEnabled()) {    mPinchZoom=new Zoom(chart,true,1);  }}  }
class C{  public static void writeX509Certificate(X509Certificate cert,Writer w) throws IOException {  try (JcaPEMWriter jw=new JcaPEMWriter(w)){    jw.writeObject(cert);  } }  }
class C{  protected AbstractRecord buildTemplateInsertRow(AbstractSession session){  AbstractRecord result=getReferenceDescriptor().getObjectBuilder().buildTemplateInsertRow(session);  List processedMappings=(List)getReferenceDescriptor().getMappings().clone();  if (getReferenceDescriptor().hasInheritance()) {    for (    ClassDescriptor child : getReferenceDescriptor().getInheritancePolicy().getChildDescriptors()) {      for (      DatabaseMapping mapping : child.getMappings()) {        if (!processedMappings.contains(mapping)) {          mapping.writeInsertFieldsIntoRow(result,session);          processedMappings.add(mapping);        }      }    }  }  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.397 -0500",hash_original_method="5C1E65D88B1AA36ECF03FA5CEB305F59",hash_generated_method="7E7C53D67F6B3E597D57AF7EF225E810") private void parseParameter(String token,String value){  if (token != null && value != null) {    if (token.equalsIgnoreCase(NONCE_TOKEN)) {      mNonce=value;      return;    }    if (token.equalsIgnoreCase(STALE_TOKEN)) {      parseStale(value);      return;    }    if (token.equalsIgnoreCase(OPAQUE_TOKEN)) {      mOpaque=value;      return;    }    if (token.equalsIgnoreCase(QOP_TOKEN)) {      mQop=value.toLowerCase();      return;    }    if (token.equalsIgnoreCase(ALGORITHM_TOKEN)) {      mAlgorithm=value.toLowerCase();      return;    }  }}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.474 -0400",hash_original_method="2C3D85339C2DDA831F01519845123B39",hash_generated_method="AA79F4B08C140AB947EEDF78E949FA4F") @Override public int read(byte[] bts,int off,int len) throws IOException {  try {    beforeRead(len);    int n=in.read(bts,off,len);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public IBlockState onBlockPlaced(World worldIn,BlockPos pos,EnumFacing facing,float hitX,float hitY,float hitZ,int meta,EntityLivingBase placer){  return this.getDefaultState().withProperty(FACING,placer.getHorizontalFacing()).withProperty(OPEN,Boolean.valueOf(false)).withProperty(POWERED,Boolean.valueOf(false)).withProperty(IN_WALL,Boolean.valueOf(false));}  }
class C{  public static void main(String[] args){  int x0=Integer.parseInt(args[0]);  int y0=Integer.parseInt(args[1]);  int n=Integer.parseInt(args[2]);  StdDraw.setCanvasSize(800,800);  StdDraw.setXscale(0,100);  StdDraw.setYscale(0,100);  StdDraw.setPenRadius(0.005);  StdDraw.enableDoubleBuffering();  Point2D[] points=new Point2D[n];  for (int i=0; i < n; i++) {    int x=StdRandom.uniform(100);    int y=StdRandom.uniform(100);    points[i]=new Point2D(x,y);    points[i].draw();  }  Point2D p=new Point2D(x0,y0);  StdDraw.setPenColor(StdDraw.RED);  StdDraw.setPenRadius(0.02);  p.draw();  StdDraw.setPenRadius();  StdDraw.setPenColor(StdDraw.BLUE);  Arrays.sort(points,p.polarOrder());  for (int i=0; i < n; i++) {    p.drawTo(points[i]);    StdDraw.show();    StdDraw.pause(100);  }}  }
class C{  int parseYear(String source,String token,int ofs) throws ParseException {  int year=parseNumber(source,ofs,"year",-1,-1);  int len=source.length();  int tokenLen=token.length();  int thisYear=Calendar.getInstance().get(Calendar.YEAR);  if ((len == 2) && (tokenLen < 3)) {    int c=(thisYear / 100) * 100;    year+=c;    if (year > (thisYear + 20)) {      year-=100;    }  }  validateNumber(year,ofs,"year",1000,thisYear + 1000);  return year;}  }
class C{  public AddForeignKeyChange(Table table,ForeignKey newForeignKey){  super(table);  _newForeignKey=newForeignKey;}  }
class C{  private static void def(int opcode,String name,String format,int stackEffect){  def(opcode,name,format,stackEffect,0);}  }
class C{  public static void fillOppositeField(Class<?> configuredClass,MappedField configuredField,MappedField targetField){  JMapAccessor accessor=getClassAccessors(configuredClass,targetField.getValue().getName(),true);  if (isNull(accessor))   accessor=getFieldAccessors(configuredClass,configuredField.getValue(),true,targetField.getValue().getName());  if (isNull(accessor))   return;  if (targetField.getMethod().equals(Constants.DEFAULT_ACCESSOR_VALUE) && !accessor.get().equals(Constants.DEFAULT_ACCESSOR_VALUE))   targetField.getMethod(accessor.get());  if (targetField.setMethod().equals(Constants.DEFAULT_ACCESSOR_VALUE) && !accessor.set().equals(Constants.DEFAULT_ACCESSOR_VALUE))   targetField.setMethod(accessor.set());}  }
class C{  public ArrayBasedSet(E[] A,int capacity,Comparator<E> comparator){  type=(Class<E>)A.getClass().getComponentType();  array=(E[])java.lang.reflect.Array.newInstance(type,capacity);  size=0;  this.comparator=comparator;}  }
class C{  @Override public IntInterval toReversed(){  return IntInterval.fromToBy(this.to,this.from,-this.step);}  }
class C{  public synchronized int assignNewLocalId(){  localId=localEventId.incrementAndGet();  return localId;}  }
class C{  private static ASN1Primitive convertValueToObject(Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getExtnValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.425 -0500",hash_original_method="D53E4189B6E7F0EC0F9883E9844F2140",hash_generated_method="105C77F54F2D3DE304E191D655D9615E") public void onOptionsMenuClosed(Menu menu){}  }
class C{  public MemoryIndex(){  this(false);}  }
class C{  protected void validate(){  if (!url.toLowerCase().startsWith("http")) {    throw new IllegalStateException("Only HTTP urls are supported!");  }}  }
class C{  private RawData(byte[] data,InetSocketAddress address,Principal clientIdentity,CorrelationContext correlationContext,boolean multicast){  if (data == null) {    throw new NullPointerException("Data must not be null");  } else   if (address == null) {    throw new NullPointerException("Address must not be null");  } else {    this.bytes=data;    this.address=address;    this.senderIdentity=clientIdentity;    this.correlationContext=correlationContext;    this.multicast=multicast;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Value evaluate(Context context,ClassDefinitionNode node){  super.evaluate(context,node);  TypeAnalyzer typeAnalyzer=symbolTable.getTypeAnalyzer();  String className=NodeMagic.getClassName(node);  if (className == null)   return null;  currentContext=context;  typeAnalyzer.evaluate(context,node);  ClassInfo classInfo=typeAnalyzer.getClassInfo(className);  Map<String,Boolean> parts=classInfo.getSkinParts(true);  if (parts != null && parts.size() > 0) {    NodeFactory nodeFactory=context.getNodeFactory();    node.statements=genSkinPartsAST(parts,nodeFactory,node.statements);  }  return null;}  }
class C{  @GET @Controller @Produces("text/html;charset=utf-8") @Path("view1/{id}") public String view1(@PathParam("id") String id){  book.setId(id);  book.setTitle("Some title");  book.setAuthor("Some author");  book.setIsbn("Some ISBN");  return "book.jsp";}  }
class C{  public Statement limit(int rowAmount,int offset){  limit(rowAmount);  offset(offset);  return this;}  }
class C{  public boolean isRegisteredType(Class<?> type){  return configuration.isRegisteredType(type);}  }
class C{  public RandomSeedGenerator(int row,int column){  this.row=row;  this.column=column;}  }
class C{  public Comparator<Point2D> polarOrder(){  return new PolarOrder();}  }
class C{  public static boolean validateIpList(String iplist){  String[] ips=iplist.split(",");  try {    for (    String ip : ips) {      ip=ip.trim();      if (ip.contains("/")) {        String[] ipcomps=ip.split("/");        if (ipcomps.length != 2 || !InetAddresses.isInetAddress(ipcomps[0].trim())) {          return false;        } else {          try {            int maskBits=Integer.parseInt(ipcomps[1].trim());            if (maskBits > 32 || maskBits < 0) {              return false;            }          } catch (          NumberFormatException e) {            return false;          }        }      } else       if (!InetAddresses.isInetAddress(ip)) {        return false;      }    }  } catch (  NumberFormatException exc) {    return false;  }  return true;}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  public static Integer createServerCache() throws Exception {  Properties props=new Properties();  props.setProperty(DELTA_PROPAGATION,"false");  ClientConflationDUnitTest test=new ClientConflationDUnitTest();  cacheServer=test.createCache(props);  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setEnableConflation(true);  RegionAttributes attrs1=factory.create();  factory.setEnableConflation(false);  RegionAttributes attrs2=factory.create();  cacheServer.createRegion(REGION_NAME1,attrs1);  cacheServer.createRegion(REGION_NAME2,attrs2);  CacheServer server=cacheServer.addCacheServer();  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.setSocketBufferSize(32768);  server.start();  return new Integer(server.getPort());}  }
class C{  public boolean isFillBelowLine(){  return mFillBelowLine;}  }
class C{  protected ReactionEffectImpl(){  super();}  }
class C{  public void defineImagesQuality(boolean highResolution){  DisplayMetrics dm=context.getResources().getDisplayMetrics();  int densityDpi=dm.densityDpi;  if (((context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE) && MyApplication.getInstance().isWiFiConnection()) {    loadHighRes=true;  } else   if (highResolution) {    loadHighRes=((context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_NORMAL) && densityDpi >= DisplayMetrics.DENSITY_XHIGH;  } else {    loadHighRes=false;  }  Timber.d("Image high quality selected: %s",loadHighRes);  notifyDataSetChanged();}  }
class C{  public DTMDOMException(short code,String message){  super(code,message);}  }
class C{  private void registerToolbarActions(IActionBars actionBars){  IToolBarManager toolBarManager=actionBars.getToolBarManager();  toolBarManager.add(new CollapseAllAction(this.fOutlineViewer));  IMenuManager viewMenuManager=actionBars.getMenuManager();  viewMenuManager.add(new Separator("EndFilterGroup"));  viewMenuManager.add(new ToggleLinkingAction());}  }
class C{  public void copyZip(final String srcFile,final String destFile) throws Exception {  loadDefaultExcludePattern(getRootFolderInZip(srcFile));  final ZipFile zipSrc=new ZipFile(srcFile);  final ZipOutputStream out=new ZipOutputStream(new FileOutputStream(destFile));  try {    final Enumeration<? extends ZipEntry> entries=zipSrc.entries();    while (entries.hasMoreElements()) {      final ZipEntry entry=entries.nextElement();      if (!isExcluded(LocalPath.combine(srcFile,entry.getName()),false,srcFile)) {        final ZipEntry newEntry=new ZipEntry(entry.getName());        out.putNextEntry(newEntry);        final BufferedInputStream in=new BufferedInputStream(zipSrc.getInputStream(entry));        int len;        final byte[] buf=new byte[65536];        while ((len=in.read(buf)) > 0) {          out.write(buf,0,len);        }        out.closeEntry();        in.close();      }    }    out.finish();  } catch (  final IOException e) {    errorMsg=Messages.getString("CreateUploadZipCommand.CopyArchiveErrorMessageFormat");    log.error("Exceptions when copying exising archive ",e);    throw e;  } finally {    out.close();    zipSrc.close();  }}  }
class C{  private static boolean checkTargetConstraint(BeanInstance candidate,Vector<Object> listToCheck,Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  for (int i=0; i < connections.size(); i++) {    BeanConnection bc=connections.elementAt(i);    if (bc.getTarget() == candidate) {      for (int j=0; j < listToCheck.size(); j++) {        BeanInstance tempSource=(BeanInstance)listToCheck.elementAt(j);        if (bc.getSource() == tempSource) {          return false;        }      }    }  }  return true;}  }
class C{  BigInteger copy(){  prepareJavaRepresentation();  int[] copyDigits=new int[numberLength];  System.arraycopy(digits,0,copyDigits,0,numberLength);  return new BigInteger(sign,numberLength,copyDigits);}  }
class C{  private Dimension insetSize(Container parent){  Insets insets=parent.getInsets();  int w=insets.left + insets.right;  int h=insets.top + insets.bottom;  return new Dimension(w,h);}  }
class C{  public void op(GridCacheOperation op){  this.op=op;}  }
class C{  public final boolean readLine(CharBuffer cb,boolean isChop) throws IOException {  if (_readEncoding != null)   return readlnEncoded(cb,isChop);  int capacity=cb.capacity();  int offset=cb.length();  char[] buf=cb.buffer();  byte[] readBuffer=_readBuffer;  while (true) {    int readOffset=_readOffset;    int readLength=_readLength;    int sublen=Math.min(capacity - offset,readLength - readOffset);    for (; sublen > 0; sublen--) {      int ch=readBuffer[readOffset++] & 0xff;      if (ch != '\n') {        buf[offset++]=(char)ch;      } else       if (isChop) {        if (offset > 0 && buf[offset - 1] == '\r') {          cb.length(offset - 1);        } else {          cb.length(offset);        }        _readOffset=readOffset;        return true;      } else {        buf[offset++]=(char)'\n';        cb.length(offset);        _readOffset=readOffset;        return true;      }    }    _readOffset=readOffset;    if (readLength <= readOffset) {      if (!readBuffer()) {        cb.length(offset);        return offset > 0;      }    }    if (capacity <= offset) {      cb.length(offset + 1);      capacity=cb.capacity();      buf=cb.buffer();    }  }}  }
class C{  protected int diff_commonOverlap(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  if (text1_length == 0 || text2_length == 0) {    return 0;  }  if (text1_length > text2_length) {    text1=text1.substring(text1_length - text2_length);  } else   if (text1_length < text2_length) {    text2=text2.substring(0,text1_length);  }  int text_length=Math.min(text1_length,text2_length);  if (text1.equals(text2)) {    return text_length;  }  int best=0;  int length=1;  while (true) {    String pattern=text1.substring(text_length - length);    int found=text2.indexOf(pattern);    if (found == -1) {      return best;    }    length+=found;    if (found == 0 || text1.substring(text_length - length).equals(text2.substring(0,length))) {      best=length;      length++;    }  }}  }
class C{  public boolean bool(){  return (Double.isNaN(m_val) || (m_val == 0.0)) ? false : true;}  }
class C{  @Uninterruptible public static Address unwindNativeStackFrame(Address currfp){  if (VM.BuildForIA32) {    return currfp;  }  Address callee_fp;  Address fp=Magic.getCallerFramePointer(currfp);  Address ip;  do {    callee_fp=fp;    ip=Magic.getReturnAddressUnchecked(fp);    fp=Magic.getCallerFramePointer(fp);  } while (!MemoryManager.addressInVM(ip) && fp.NE(StackFrameLayout.getStackFrameSentinelFP()));  if (VM.BuildForPowerPC) {    return fp;  } else {    return callee_fp;  }}  }
class C{  public static double length(Point2D.Double p1,Point2D.Double p2){  return sqrt(length2(p1.x,p1.y,p2.x,p2.y));}  }
class C{  public void clearYTextLabels(){  clearYTextLabels(0);}  }
class C{  public static long murmur3(final BitVector bv,final long prefixLength,final long[] hh1,final long[] hh2,final long[] cc1,final long cc2[],final long lcp){  final int startStateWord=(int)(Math.min(lcp,prefixLength) / (2 * Long.SIZE));  long from=startStateWord * 2L * Long.SIZE;  long h1=hh1[startStateWord];  long h2=hh2[startStateWord];  long c1=cc1[startStateWord];  long c2=cc2[startStateWord];  long k1, k2;  while (prefixLength - from >= Long.SIZE * 2) {    k1=bv.getLong(from,from + Long.SIZE);    k2=bv.getLong(from + Long.SIZE,from+=2 * Long.SIZE);    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  if (prefixLength - from != 0) {    if (prefixLength - from > Long.SIZE) {      k1=bv.getLong(from,from + Long.SIZE);      k2=bv.getLong(from + Long.SIZE,prefixLength);    } else {      k1=bv.getLong(from,prefixLength);      k2=0;    }    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  h2^=prefixLength;  h1+=h2;  h2+=h1;  h1=finalizeMurmur3(h1);  h2=finalizeMurmur3(h2);  return h1 + h2;}  }
class C{  public void commit(){  if (!mWriting) {    throw new IllegalStateException("no file to commit");  }  mWriting=false;  mTemp.renameTo(mReal);}  }
class C{  public PrereadNames(final File preread,LongRange region,boolean suffixes) throws IOException {  mSuffixes=suffixes;  final IndexFile id=new IndexFile(preread);  if (!id.hasNames()) {    throw new FileNotFoundException("Error: SDF contains no name data");  }  final long start=Math.max(region.getStart(),0);  final long end=region.getEnd() == LongRange.MISSING ? id.getNumberSequences() : region.getEnd();  assert end >= start;  if (end > id.getNumberSequences()) {    throw new IllegalArgumentException("End sequence is greater than number of sequences in SDF");  }  if (end - start > 0) {    final DataFileIndex nameIndex;    if (mSuffixes) {      nameIndex=DataFileIndex.loadLabelSuffixDataFileIndex(id.dataIndexVersion(),preread);    } else {      nameIndex=DataFileIndex.loadLabelDataFileIndex(id.dataIndexVersion(),preread);    }    final int firstNameOffset=loadPointers(mPointers,preread,start,end,nameIndex,mSuffixes);    loadNames(mNames,mPointers,preread,start,nameIndex,firstNameOffset,mSuffixes);  }}  }
class C{  public void testSetF18Momentary(){  boolean f18Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF18Momentary(f18Momentary);}  }
class C{  @Override public void onPrepared(MediaPlayer player){  LogUtils.d(TAG,"onPrepared from MediaPlayer");  configMediaPlayerState();}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_String_info cu=(CONSTANT_String_info)cp;  return ((CONSTANT_Utf8_info)(constant_pool[string_index])).compareTo(cp_constant_pool[cu.string_index]);}  }
class C{  public static UTMCoord fromUTM(int zone,String hemisphere,double easting,double northing,Globe globe){  final UTMCoordConverter converter=new UTMCoordConverter(globe);  long err=converter.convertUTMToGeodetic(zone,hemisphere,easting,northing);  if (err != UTMCoordConverter.UTM_NO_ERROR) {    String message=Logging.getMessage("Coord.UTMConversionError");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new UTMCoord(Angle.fromRadians(converter.getLatitude()),Angle.fromRadians(converter.getLongitude()),zone,hemisphere,easting,northing,Angle.fromRadians(converter.getCentralMeridian()));}  }
class C{  @Override public String basePath(){  return "/wm/topology";}  }
class C{  public static String gensalt(){  return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);}  }
class C{  public void execute(){  DataModel source=getDataModel();  if (!(source instanceof DataSet)) {    throw new IllegalArgumentException("Expecting a rectangular data set.");  }  DataSet data=(DataSet)source;  if (!data.isContinuous()) {    throw new IllegalArgumentException("Expecting a continuous data set.");  }  Ling ling=new Ling(data);  Parameters searchParams=getParams();  ling.setThreshold(searchParams.getDouble("threshold",0.5));  Ling.StoredGraphs graphs=ling.search();  Graph graph=null;  for (int i=0; i < graphs.getNumGraphs(); i++) {    System.out.println(graphs.getGraph(i));    System.out.println(graphs.isStable(i));  }  for (int i=0; i < graphs.getNumGraphs(); i++) {    if (graphs.isStable(i)) {      graph=graphs.getGraph(i);      break;    }  }  if (graph == null) {    graph=new EdgeListGraph();  }  setResultGraph(graph);  setStoredGraphs(graphs);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else {    GraphUtils.circleLayout(graph,200,200,150);  }}  }
class C{  public void readFrom(ChannelBuffer data){  if (this.hardwareAddress == null)   this.hardwareAddress=new byte[OFP_ETH_ALEN];  data.readBytes(this.hardwareAddress);  data.readBytes(new byte[2]);  byte[] name=new byte[16];  data.readBytes(name);  int index=0;  for (  byte b : name) {    if (0 == b)     break;    ++index;  }  this.name=new String(Arrays.copyOf(name,index),Charset.forName("ascii"));  ipv4Addr=data.readInt();  ipv4AddrMask=data.readInt();}  }
class C{  public void repaint(){  repaint(getFirstVisibleItem(),getLastVisibleItem(),PAINT_ALL);}  }
class C{  public ObjectReference retainForFinalize(ObjectReference object){  return traceObject(object);}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,int macSizeInBits){  this(cipher,macSizeInBits,null);}  }
class C{  private void readDict(Range r){  pos=r.getStart();  while (pos < r.getEnd()) {    int cmd=readCommand(false);    if (cmd == 1006) {      charstringtype=(int)stack[0];    } else     if (cmd == 1007) {      if (stackptr == 4) {        at=Utils.createMatrix((float)stack[0],(float)stack[1],(float)stack[2],(float)stack[3],0,0);      } else {        at=Utils.createMatrix((float)stack[0],(float)stack[1],(float)stack[2],(float)stack[3],(float)stack[4],(float)stack[5]);      }    } else     if (cmd == 15) {      charsetbase=(int)stack[0];    } else     if (cmd == 16) {      encodingbase=(int)stack[0];    } else     if (cmd == 17) {      charstringbase=(int)stack[0];    } else     if (cmd == 18) {      privatesize=(int)stack[0];      privatebase=(int)stack[1];    } else     if (cmd == 19) {      lsubrbase=privatebase + (int)stack[0];      lsubrsoffset=calcoffset(lsubrbase);    }    stackptr=0;  }}  }
class C{  public ActivityChooserView(Context context){  this(context,null);}  }
class C{  public Report findOneThrowExceptionIfNotFound(final Long id){  final Report report=this.reportRepository.findOne(id);  if (report == null) {    throw new ReportNotFoundException(id);  }  return report;}  }
class C{  public static int clearListInfo(Delegator delegator,String shoppingListId) throws GenericEntityException {  delegator.removeByAnd("ShoppingListItemSurvey",UtilMisc.toMap("shoppingListId",shoppingListId));  return delegator.removeByAnd("ShoppingListItem",UtilMisc.toMap("shoppingListId",shoppingListId));}  }
class C{  public void clearPool(){  try {    publisherObjectPool.clear();  } catch (  Exception e) {    logger.error("While clear pool.",e);  }}  }
class C{  @SuppressWarnings("nullness") @Override public int remove(@Nullable Object element,int occurrences){  if (occurrences == 0) {    return count(element);  }  checkArgument(occurrences > 0,"Invalid occurrences: %s",occurrences);  while (true) {    int current=count(element);    if (current == 0) {      return 0;    }    if (occurrences >= current) {      if (countMap.remove(element,current)) {        return current;      }    } else {      @SuppressWarnings({"unchecked","nullness"}) E casted=(E)element;      if (countMap.replace(casted,current,current - occurrences)) {        return current;      }    }  }}  }
class C{  public MemberByNameAndAccessMap(List<? extends TMember> members){  this.members=members;}  }
class C{  public Alias indexRouting(String indexRouting){  this.indexRouting=indexRouting;  return this;}  }
class C{  public static void write(int descriptor,MouseEvent me,float latPoint,float lonPoint,LinkProperties props,Link link) throws IOException {  if (props.getProperty(LPC_GRAPHICID) != null) {    descriptor=LinkUtil.setMask(descriptor,GRAPHIC_ID_MASK);  }  link.start(Link.ACTION_REQUEST_HEADER);  link.dos.writeFloat(version);  link.dos.writeInt(descriptor);  link.dos.writeInt(me.getX());  link.dos.writeInt(me.getY());  link.dos.writeInt(me.getClickCount());  link.dos.writeInt(me.getModifiers());  link.dos.writeFloat(latPoint);  link.dos.writeFloat(lonPoint);  props.write(link);  link.end(Link.END_TOTAL);}  }
class C{  public Iterable<Result<Upload>> listIncompleteUploads(String bucketName,String prefix) throws XmlPullParserException {  return listIncompleteUploads(bucketName,prefix,true,true);}  }
class C{  private void collectingToASet(List<Trade> trades){  Set<Trade> bigTrades=trades.stream().filter(null).collect(toSet());  bigTrades.forEach(null);}  }
class C{  public boolean isUpdate(){  return oneRowChange.getAction() == RowChangeData.ActionType.UPDATE;}  }
class C{  public static void cancelMessage(Runnable runnable){  handler.removeCallbacks(runnable);}  }
class C{  private boolean itemIsObscuredByHeader(RecyclerView parent,View item,View header,int orientation){  RecyclerView.LayoutParams layoutParams=(RecyclerView.LayoutParams)item.getLayoutParams();  Rect headerMargins=mDimensionCalculator.getMargins(header);  int adapterPosition=parent.getChildAdapterPosition(item);  if (adapterPosition == RecyclerView.NO_POSITION || mHeaderProvider.getHeader(parent,adapterPosition) != header) {    return false;  }  if (orientation == LinearLayoutManager.VERTICAL) {    int itemTop=item.getTop() - layoutParams.topMargin;    int headerBottom=header.getBottom() + headerMargins.bottom + headerMargins.top;    if (itemTop > headerBottom) {      return false;    }  } else {    int itemLeft=item.getLeft() - layoutParams.leftMargin;    int headerRight=header.getRight() + headerMargins.right + headerMargins.left;    if (itemLeft > headerRight) {      return false;    }  }  return true;}  }
class C{  public Shape triangle_up(float x,float y,float height){  m_path.reset();  m_path.moveTo(x,y + height);  m_path.lineTo(x + height / 2,y);  m_path.lineTo(x + height,(y + height));  m_path.closePath();  return m_path;}  }
class C{  public static void addHandler(Handler handler){  LogManager.getLogManager().getLogger("").addHandler(handler);}  }
class C{  public boolean isShowMatch(){  return showMatch;}  }
class C{  protected void printComponent(Graphics g){  paintComponent(g);}  }
class C{  @Deprecated public Detector[] instantiateDetectorsInPass(BugReporter bugReporter){  int count;  count=0;  for (  DetectorFactory factory : orderedFactoryList) {    if (factory.isDetectorClassSubtypeOf(Detector.class)) {      count++;    }  }  Detector[] detectorList=new Detector[count];  count=0;  for (  DetectorFactory factory : orderedFactoryList) {    if (factory.isDetectorClassSubtypeOf(Detector.class)) {      detectorList[count++]=factory.create(bugReporter);    }  }  return detectorList;}  }
class C{  public MemberTable(final MemberTableModel model,final List<BaseType> baseTypes){  super(model);  setSurrendersFocusOnKeystroke(true);  addMouseListener(new MemberTableMouseListener(this));  getColumnModel().getColumn(MemberTableModel.TYPE_COLUMN).setCellEditor(new DefaultCellEditor(new TypeComboBox(new TypeListModel(baseTypes,new TypeListModel.PrototypesFilter()))));  getColumnModel().getColumn(MemberTableModel.TYPE_COLUMN).setCellRenderer(new BaseTypeCellRenderer());  setFillsViewportHeight(true);  getColumnModel().getColumn(MemberTableModel.NAME_COLUMN).setCellRenderer(new InvalidRowTableCellRenderer());  getColumnModel().getColumn(MemberTableModel.INDEX_COLUMN).setCellRenderer(new InvalidRowTableCellRenderer());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:39.865 -0500",hash_original_method="4CBE318B56F1B985563A577FAF49DFF2",hash_generated_method="5BFD624F16B9244833249DF0E5BD5398") public void removeGesture(String entryName,Gesture gesture){  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);  if (gestures == null) {    return;  }  gestures.remove(gesture);  if (gestures.isEmpty()) {    mNamedGestures.remove(entryName);  }  mClassifier.removeInstance(gesture.getID());  mChanged=true;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append("[");  int s1=sizes.size();  for (int i=0; i < s1; ++i) {    int s2=sizes.get(i);    result.append("[");    for (int j=0; j < s2; ++j) {      result.append(vector[i][j]);      if (j + 1 < s2)       result.append(", ");    }    result.append("]");    if (i + 1 < s1)     result.append(",\n ");  }  result.append("]");  return result.toString();}  }
class C{  public static String toASCII(String name){  Info info=new Info();  StringBuilder result=new StringBuilder();  UTS46_INSTANCE.nameToASCII(name,result,info);  if (info.hasErrors()) {    throw new IllegalArgumentException("Errors: " + Joiner.on(',').join(info.getErrors()));  }  return result.toString();}  }
class C{  public boolean firstTimeIn(){  try {    mRetainedFragment=(RetainedFragment)mFragmentManager.get().findFragmentByTag(mRetainedFragmentTag);    if (mRetainedFragment == null) {      Log.d(TAG,"Creating new RetainedFragment " + mRetainedFragmentTag);      mRetainedFragment=new RetainedFragment();      mFragmentManager.get().beginTransaction().add(mRetainedFragment,mRetainedFragmentTag).commit();      return true;    } else {      Log.d(TAG,"Returning existing RetainedFragment " + mRetainedFragmentTag);      return false;    }  } catch (  NullPointerException e) {    Log.d(TAG,"NPE in firstTimeIn()");    return false;  }}  }
class C{  protected void shutdown(){  this.initiationListenerExecutor.shutdownNow();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  GroupVideoDao.dropTable(db,ifExists);}  }
class C{  private MotionEvent swapXY(MotionEvent ev){  float width=getWidth();  float height=getHeight();  float newX=(ev.getY() / height) * width;  float newY=(ev.getX() / width) * height;  ev.setLocation(newX,newY);  return ev;}  }
class C{  public boolean isStatic(){  return isStatic;}  }
class C{  public caption addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public SettingsPanel(){  setLayout(new BorderLayout());  buttonBar=new JPanel();  buttonBar.setUI(new ButtonBarUI());  EqualsLayout layout=new EqualsLayout(EqualsLayout.LEFT,0);  buttonBar.setLayout(layout);  add("North",buttonBar);  buttonGroup=new ButtonGroup();  panelTmmSettings=new TmmSettingsContainerPanel();  addButton(BUNDLE.getString("Settings.general"),new ImageIcon(SettingsPanel.class.getResource("/org/tinymediamanager/ui/images/Action-configure-icon.png")),panelTmmSettings);  panelMovieSettings=MovieUIModule.getInstance().getSettingsPanel();  addButton(BUNDLE.getString("Settings.movies"),new ImageIcon(SettingsPanel.class.getResource("/org/tinymediamanager/ui/images/show_reel.png")),panelMovieSettings);  panelTvShowSettings=TvShowUIModule.getInstance().getSettingsPanel();  addButton(BUNDLE.getString("Settings.tvshow"),new ImageIcon(SettingsPanel.class.getResource("/org/tinymediamanager/ui/images/tv_show.png")),panelTvShowSettings);}  }
class C{  public KerberosTicket(byte[] asn1Encoding,KerberosPrincipal client,KerberosPrincipal server,byte[] sessionKey,int keyType,boolean[] flags,Date authTime,Date startTime,Date endTime,Date renewTill,InetAddress[] clientAddresses){  init(asn1Encoding,client,server,sessionKey,keyType,flags,authTime,startTime,endTime,renewTill,clientAddresses);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIEND'";  db.execSQL(sql);}  }
class C{  public static void NV21toI420SemiPlanar(byte[] nv21bytes,byte[] i420bytes,int width,int height){  System.arraycopy(nv21bytes,0,i420bytes,0,width * height);  for (int i=width * height; i < nv21bytes.length; i+=2) {    i420bytes[i]=nv21bytes[i + 1];    i420bytes[i + 1]=nv21bytes[i];  }}  }
class C{  public TObjectIntHashMap(){  super();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPaymentProcessor[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public SpecificInsteonLight(String systemName,SerialTrafficController tc){  super(systemName,tc);  this.tc=tc;}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,int sortOrder,InputStream inputStreamDocumentFile,Reader readerAnnFile) throws Exception {  checkExistsParent(parentDivId);  checkValidDocumentName(parentDivId,name);  m_documents.addNewDocument(name,parentDivId,fileExt,sortOrder,inputStreamDocumentFile,readerAnnFile);}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),threadFactory,handler);}  }
class C{  public DockerContainersUtil kill(){  return kill(false);}  }
class C{  @Override public void deleteBlob(String blobName) throws IOException {  throw new UnsupportedOperationException("URL repository is read only");}  }
class C{  public void connect(Context context,BluetoothDevice device){  setState(State.STATE_CONNECTING);  mBluetoothGatt=device.connectGatt(context,false,mBTGattCallback);}  }
class C{  public void testGetLinkTravelTime_NoFilterModes(){  Network network=NetworkUtils.createNetwork();  TravelTimeCalculatorConfigGroup config=new TravelTimeCalculatorConfigGroup();  config.setTraveltimeBinSize(900);  config.setAnalyzedModes("");  config.setFilterModes(false);  TravelTimeCalculator ttc=new TravelTimeCalculator(network,config);  Node n1=network.getFactory().createNode(Id.create(1,Node.class),new Coord(0,0));  Node n2=network.getFactory().createNode(Id.create(2,Node.class),new Coord(1000,0));  Node n3=network.getFactory().createNode(Id.create(3,Node.class),new Coord(2000,0));  network.addNode(n1);  network.addNode(n2);  network.addNode(n3);  Link link1=network.getFactory().createLink(Id.create(1,Link.class),n1,n2);  Link link2=network.getFactory().createLink(Id.create(2,Link.class),n2,n3);  network.addLink(link1);  network.addLink(link2);  Id<Person> agId1=Id.create(1510,Person.class);  Id<Person> agId2=Id.create(1511,Person.class);  Id<Vehicle> vehId1=Id.create(1980,Vehicle.class);  Id<Vehicle> vehId2=Id.create(1981,Vehicle.class);  ttc.handleEvent(new VehicleEntersTrafficEvent(90,agId1,link1.getId(),vehId1,TransportMode.car,1.0));  ttc.handleEvent(new VehicleEntersTrafficEvent(100,agId2,link1.getId(),vehId2,TransportMode.walk,1.0));  ttc.handleEvent(new LinkLeaveEvent(100,vehId1,link1.getId()));  ttc.handleEvent(new LinkEnterEvent(100,vehId1,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(110,vehId2,link1.getId()));  ttc.handleEvent(new LinkEnterEvent(110,vehId2,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(200,vehId1,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(410,vehId2,link2.getId()));  Assert.assertEquals("Filtering analyzed transport modes is disabled, therefore count all modes",200.0,ttc.getLinkTravelTimes().getLinkTravelTime(link2,200,null,null),1e-8);}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active") && !System.getenv().containsKey("SPRING_PROFILES_ACTIVE")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  public static boolean check(LocPathIterator path){  HasPositionalPredChecker hppc=new HasPositionalPredChecker();  path.callVisitors(null,hppc);  return hppc.m_hasPositionalPred;}  }
class C{  public boolean login() throws LoginException {switch (status) {case UNINITIALIZED:default :    throw new LoginException("The login module is not initialized");case INITIALIZED:case AUTHENTICATED:  if (token && !nullStream) {    throw new LoginException("if keyStoreType is " + P11KEYSTORE + " then keyStoreURL must be "+ NONE);  }if (token && privateKeyPasswordURL != null) {  throw new LoginException("if keyStoreType is " + P11KEYSTORE + " then privateKeyPasswordURL must not be specified");}if (protectedPath && (keyStorePasswordURL != null || privateKeyPasswordURL != null)) {throw new LoginException("if protected is true then keyStorePasswordURL and " + "privateKeyPasswordURL must not be specified");}if (protectedPath) {getAliasAndPasswords(PROTECTED_PATH);} else if (token) {getAliasAndPasswords(TOKEN);} else {getAliasAndPasswords(NORMAL);}try {getKeyStoreInfo();}  finally {if (privateKeyPassword != null && privateKeyPassword != keyStorePassword) {Arrays.fill(privateKeyPassword,'\0');privateKeyPassword=null;}if (keyStorePassword != null) {Arrays.fill(keyStorePassword,'\0');keyStorePassword=null;}}status=AUTHENTICATED;return true;case LOGGED_IN:return true;}}  }
class C{  public String globalInfo(){  return "Class for building an ensemble of randomizable base classifiers. Each " + "base classifiers is built using a different random number seed (but based " + "one the same data). The final prediction is a straight average of the "+ "predictions generated by the individual base classifiers.";}  }
class C{  public OnePlayerRoomDoor(final String clazz){  super(clazz);  SingletonRepository.getTurnNotifier().notifyInTurns(60,new PeriodicOpener());}  }
class C{  public NotificationChain basicSetVersionConstraint(VersionConstraint newVersionConstraint,NotificationChain msgs){  VersionConstraint oldVersionConstraint=versionConstraint;  versionConstraint=newVersionConstraint;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.TESTED_PROJECT__VERSION_CONSTRAINT,oldVersionConstraint,newVersionConstraint);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected AssociationDefinition_Impl(){  super();}  }
class C{  private void initBPartner(){  m_greeting=fillGreeting();  m_gbc.anchor=GridBagConstraints.NORTHWEST;  m_gbc.gridx=0;  m_gbc.gridy=0;  m_gbc.gridwidth=1;  m_gbc.weightx=0;  m_gbc.weighty=0;  m_gbc.fill=GridBagConstraints.HORIZONTAL;  m_gbc.ipadx=0;  m_gbc.ipady=0;  m_line=0;  fValue=new VString("Value",true,false,true,30,60,"",null);  fValue.addActionListener(this);  createLine(fValue,"Value",true);  fGreetingBP=new JComboBox(m_greeting);  createLine(fGreetingBP,"Greeting",false);  fName=new VString("Name",true,false,true,30,60,"",null);  fName.addActionListener(this);  createLine(fName,"Name",false).setFontBold(true);  fName2=new VString("Name2",false,false,true,30,60,"",null);  createLine(fName2,"Name2",false);  fContact=new VString("Contact",false,false,true,30,60,"",null);  createLine(fContact,"Contact",true).setFontBold(true);  fGreetingC=new JComboBox(m_greeting);  createLine(fGreetingC,"Greeting",false);  fTitle=new VString("Title",false,false,true,30,60,"",null);  createLine(fTitle,"Title",false);  fEMail=new VString("EMail",false,false,true,30,40,"",null);  createLine(fEMail,"EMail",false);  boolean ro=m_readOnly;  if (!ro)   ro=!MRole.getDefault().canUpdate(Env.getAD_Client_ID(Env.getCtx()),Env.getAD_Org_ID(Env.getCtx()),MBPartnerLocation.Table_ID,0,false);  if (!ro)   ro=!MRole.getDefault().canUpdate(Env.getAD_Client_ID(Env.getCtx()),Env.getAD_Org_ID(Env.getCtx()),MLocation.Table_ID,0,false);  fAddress=new VLocation("C_Location_ID",false,ro,true,new MLocationLookup(Env.getCtx(),m_WindowNo));  fAddress.setValue(null);  createLine(fAddress,"C_Location_ID",true).setFontBold(true);  fPhone=new VString("Phone",false,false,true,30,40,"",null);  createLine(fPhone,"Phone",true);  fPhone2=new VString("Phone2",false,false,true,30,40,"",null);  createLine(fPhone2,"Phone2",false);  fFax=new VString("Fax",false,false,true,30,40,"",null);  createLine(fFax,"Fax",false);  fName.setBackground(AdempierePLAF.getFieldBackground_Mandatory());  fAddress.setBackground(AdempierePLAF.getFieldBackground_Mandatory());}  }
class C{  public TreeLoader createTreeLoader(){  return new TreeLoader(_classLoader);}  }
class C{  private void applyWithImport(QualifiedName qualifiedName,String alias,IDocument document,ConfigurableCompletionProposal proposal) throws BadLocationException {  int topPixel=-1;  StyledText widget=viewer.getTextWidget();  if (widget != null)   topPixel=widget.getTopPixel();  ITextViewerExtension viewerExtension=null;  if (viewer instanceof ITextViewerExtension) {    viewerExtension=(ITextViewerExtension)viewer;    viewerExtension.setRedraw(false);  }  DocumentRewriteSession rewriteSession=null;  try {    if (document instanceof IDocumentExtension4) {      rewriteSession=((IDocumentExtension4)document).startRewriteSession(DocumentRewriteSessionType.UNRESTRICTED_SMALL);    }    int initialCursorLine=document.getLineOfOffset(proposal.getReplacementOffset());    int newCursorPositionInDocument=doApply(qualifiedName,alias,document,proposal);    int newCursorLine=document.getLineOfOffset(newCursorPositionInDocument);    if (widget != null) {      int additionalTopPixel=(newCursorLine - initialCursorLine) * widget.getLineHeight();      widget.setTopPixel(topPixel + additionalTopPixel);    }  }  finally {    if (rewriteSession != null) {      ((IDocumentExtension4)document).stopRewriteSession(rewriteSession);    }    if (viewerExtension != null)     viewerExtension.setRedraw(true);  }}  }
class C{  private void growSpine(){  int size=(spine.length << 1) + 1;  spine=new int[size];  spineEmpty=new int[size];  threshold=(int)(spine.length * loadFactor);  Arrays.fill(spineEmpty,-1);  GridUnsafe.copyMemory(spineEmpty,INT_ARR_OFF,spine,INT_ARR_OFF,spineEmpty.length << 2);  for (int i=0; i < this.size; i++) {    Object obj=objs[i];    int idx=hash(obj) % spine.length;    insert(objs[i],i,idx);  }}  }
class C{  public boolean match(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  GenericObjectList that=(GenericObjectList)other;  ListIterator hisIterator=that.listIterator();  outer:   while (hisIterator.hasNext()) {    Object hisobj=hisIterator.next();    Object myobj=null;    ListIterator myIterator=this.listIterator();    while (myIterator.hasNext()) {      myobj=myIterator.next();      if (myobj instanceof GenericObject)       System.out.println("Trying to match  = " + ((GenericObject)myobj).encode());      if (GenericObject.isMySubclass(myobj.getClass()) && ((GenericObject)myobj).match(hisobj))       break outer; else       if (GenericObjectList.isMySubclass(myobj.getClass()) && ((GenericObjectList)myobj).match(hisobj))       break outer;    }    System.out.println(((GenericObject)hisobj).encode());    return false;  }  return true;}  }
class C{  private String replaceInlist(String str){  try {    Pattern pt=Pattern.compile("(?i)\\s*IN\\s*\\('?\\d+'?,");    Matcher m=pt.matcher(str);    if (m.find()) {      int start=m.start();      int idx=str.indexOf(')',start);      if (idx < 0 || idx == str.length() - 1)       return str.substring(0,start) + " IN (......)"; else       return str.substring(0,start) + " IN (...) " + str.substring(idx + 1);    }  } catch (  Exception ex) {  }  return str;}  }
class C{  public void paintChildren(Graphics g){  paintChildren(g,null);  paintPainters(g);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void moveNextPosition(boolean smooth){  if (getRealAdapter() == null)   throw new IllegalStateException("You did not set a slider adapter");  if (baseSliderAdapter.getCount() <= 2 || (!isCycling && simpleViewPager.getCurrentItem() == baseSliderAdapter.getCount() - 1))   simpleViewPager.setCurrentItem(0,false); else {    simpleViewPager.setCurrentItem(simpleViewPager.getCurrentItem() + 1,smooth);  }}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  public void release(ServerCommit commit){  pool.add(commit);}  }
class C{  public void overrideDifferenceListener(final DifferenceListener listener){  if (listener != null) {    _listeners.clear();    _listeners.add(listener);  }}  }
class C{  public void onChatMessageDisplayReportSent(String chatId,ContactId remote,String msgId){  mChatService.onDisplayReportSent(chatId,remote,msgId);}  }
class C{  public void renderPathTile(Object ctx,byte[] atile,int offset,int tilesize,int x,int y,int w,int h){  TileContext context=(TileContext)ctx;  PaintContext paintCtxt=context.paintCtxt;  CompositeContext compCtxt=context.compCtxt;  SunGraphics2D sg=context.sunG2D;  Raster srcRaster=paintCtxt.getRaster(x,y,w,h);  ColorModel paintModel=paintCtxt.getColorModel();  Raster dstRaster;  Raster dstIn;  WritableRaster dstOut;  SurfaceData sd=sg.getSurfaceData();  dstRaster=sd.getRaster(x,y,w,h);  if (dstRaster instanceof WritableRaster && atile == null) {    dstOut=(WritableRaster)dstRaster;    dstOut=dstOut.createWritableChild(x,y,w,h,0,0,null);    dstIn=dstOut;  } else {    dstIn=dstRaster.createChild(x,y,w,h,0,0,null);    dstOut=dstIn.createCompatibleWritableRaster();  }  compCtxt.compose(srcRaster,dstIn,dstOut);  if (dstRaster != dstOut && dstOut.getParent() != dstRaster) {    if (dstRaster instanceof WritableRaster && atile == null) {      ((WritableRaster)dstRaster).setDataElements(x,y,dstOut);    } else {      ColorModel cm=sg.getDeviceColorModel();      BufferedImage resImg=new BufferedImage(cm,dstOut,cm.isAlphaPremultiplied(),null);      SurfaceData resData=BufImgSurfaceData.createData(resImg);      if (atile == null) {        Blit blit=Blit.getFromCache(resData.getSurfaceType(),CompositeType.SrcNoEa,sd.getSurfaceType());        blit.Blit(resData,sd,AlphaComposite.Src,null,0,0,x,y,w,h);      } else {        MaskBlit blit=MaskBlit.getFromCache(resData.getSurfaceType(),CompositeType.SrcNoEa,sd.getSurfaceType());        blit.MaskBlit(resData,sd,AlphaComposite.Src,null,0,0,x,y,w,h,atile,offset,tilesize);      }    }  }}  }
class C{  public int hashCode(){  return reduce_with().hashCode();}  }
class C{  private boolean compileAndInstall(String className,String... methodNames){  boolean atLeastOneCompiled=false;  for (  String methodName : methodNames) {    Method method=lookup(className,methodName);    if (method != null) {      ResolvedJavaMethod installedCodeOwner=getMetaAccess().lookupJavaMethod(method);      StructuredGraph subst=getReplacements().getSubstitution(installedCodeOwner,0);      ResolvedJavaMethod substMethod=subst == null ? null : subst.method();      if (substMethod != null) {        StructuredGraph graph=new StructuredGraph(substMethod,AllowAssumptions.YES,NO_PROFILING_INFO);        Plugins plugins=new Plugins(((HotSpotProviders)getProviders()).getGraphBuilderPlugins());        GraphBuilderConfiguration config=GraphBuilderConfiguration.getSnippetDefault(plugins);        IntrinsicContext initialReplacementContext=new IntrinsicContext(installedCodeOwner,substMethod,getReplacements().getReplacementBytecodeProvider(),ROOT_COMPILATION);        new GraphBuilderPhase.Instance(getMetaAccess(),getProviders().getStampProvider(),getConstantReflection(),getProviders().getConstantFieldProvider(),config,OptimisticOptimizations.NONE,initialReplacementContext).apply(graph);        Assert.assertNotNull(getCode(installedCodeOwner,graph,true));        atLeastOneCompiled=true;      } else {        Assert.assertFalse(runtime().getVMConfig().useAESIntrinsics);      }    }  }  return atLeastOneCompiled;}  }
class C{  public Object nextValue() throws JSONException {  char c=nextClean();  String s;  if (c == '\7')   c=nextClean();switch (c) {case '"':case '\'':    return nextString(c);case '{':  back();return new JSONObject(this);case '[':case '(':back();return new JSONArray(this);}StringBuffer sb=new StringBuffer();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=next();}back();s=sb.toString().trim();if (s.isEmpty()) throw new JSONException.JSON_EOF();return JSONObject.stringToValue(s);}  }
class C{  public static void assertEquals(Object expected,Object actual){  assertEquals(null,expected,actual);}  }
class C{  public boolean canBeInstantiatedTo(GenericClass otherType){  if (isPrimitive() && otherType.isWrapperType())   return false;  if (isAssignableTo(otherType))   return true;  if (!isTypeVariable() && !otherType.isTypeVariable() && otherType.isGenericSuperTypeOf(this))   return true;  Class<?> otherRawClass=otherType.getRawClass();  if (otherRawClass.isAssignableFrom(rawClass)) {    Map<TypeVariable<?>,Type> typeMap=otherType.getTypeVariableMap();    if (otherType.isParameterizedType()) {      typeMap.putAll(TypeUtils.determineTypeArguments(rawClass,(ParameterizedType)otherType.getType()));    }    try {      GenericClass instantiation=getGenericInstantiation(typeMap);      if (equals(instantiation)) {        if (hasWildcardOrTypeVariables())         return false; else         return true;      }      return instantiation.canBeInstantiatedTo(otherType);    } catch (    ConstructionFailedException e) {      logger.debug("Failed to instantiate " + toString());      return false;    }  }  logger.debug("Not assignable? Want: {}, have {}",otherType,toString());  return false;}  }
class C{  static boolean handleHotseatButtonKeyEvent(View v,int keyCode,KeyEvent e){  boolean consume=FocusLogic.shouldConsume(keyCode);  if (e.getAction() == KeyEvent.ACTION_UP || !consume) {    return consume;  }  final Launcher launcher=(Launcher)v.getContext();  final DeviceProfile profile=launcher.getDeviceProfile();  if (DEBUG) {    Log.v(TAG,String.format("Handle HOTSEAT BUTTONS keyevent=[%s] on hotseat buttons, isVertical=%s",KeyEvent.keyCodeToString(keyCode),profile.isVerticalBarLayout()));  }  final Workspace workspace=(Workspace)v.getRootView().findViewById(R.id.workspace);  final ShortcutAndWidgetContainer hotseatParent=(ShortcutAndWidgetContainer)v.getParent();  final CellLayout hotseatLayout=(CellLayout)hotseatParent.getParent();  final ItemInfo itemInfo=(ItemInfo)v.getTag();  int pageIndex=workspace.getNextPage();  int pageCount=workspace.getChildCount();  int iconIndex=hotseatParent.indexOfChild(v);  int iconRank=((CellLayout.LayoutParams)hotseatLayout.getShortcutsAndWidgets().getChildAt(iconIndex).getLayoutParams()).cellX;  final CellLayout iconLayout=(CellLayout)workspace.getChildAt(pageIndex);  if (iconLayout == null) {    return consume;  }  final ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  ViewGroup parent=null;  int[][] matrix=null;  if (keyCode == KeyEvent.KEYCODE_DPAD_UP && !profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrixWithHotseat(iconLayout,hotseatLayout,true,profile.inv.hotseatAllAppsRank);    iconIndex+=iconParent.getChildCount();    parent=iconParent;  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT && profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrixWithHotseat(iconLayout,hotseatLayout,false,profile.inv.hotseatAllAppsRank);    iconIndex+=iconParent.getChildCount();    parent=iconParent;  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT && profile.isVerticalBarLayout()) {    keyCode=KeyEvent.KEYCODE_PAGE_DOWN;  } else   if (isUninstallKeyChord(e)) {    matrix=FocusLogic.createSparseMatrix(iconLayout);    if (UninstallDropTarget.supportsDrop(launcher,itemInfo)) {      UninstallDropTarget.startUninstallActivity(launcher,itemInfo);    }  } else   if (isDeleteKeyChord(e)) {    matrix=FocusLogic.createSparseMatrix(iconLayout);    launcher.removeItem(v,itemInfo,true);  } else {    matrix=FocusLogic.createSparseMatrix(hotseatLayout);    parent=hotseatParent;  }  int newIconIndex=FocusLogic.handleKeyEvent(keyCode,matrix,iconIndex,pageIndex,pageCount,Utilities.isRtl(v.getResources()));  View newIcon=null;switch (newIconIndex) {case FocusLogic.NEXT_PAGE_FIRST_ITEM:    parent=getCellLayoutChildrenForIndex(workspace,pageIndex + 1);  newIcon=parent.getChildAt(0);workspace.snapToPage(pageIndex + 1);break;case FocusLogic.PREVIOUS_PAGE_FIRST_ITEM:parent=getCellLayoutChildrenForIndex(workspace,pageIndex - 1);newIcon=parent.getChildAt(0);workspace.snapToPage(pageIndex - 1);break;case FocusLogic.PREVIOUS_PAGE_LAST_ITEM:parent=getCellLayoutChildrenForIndex(workspace,pageIndex - 1);newIcon=parent.getChildAt(parent.getChildCount() - 1);workspace.snapToPage(pageIndex - 1);break;case FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN:case FocusLogic.PREVIOUS_PAGE_RIGHT_COLUMN:workspace.snapToPage(pageIndex - 1);CellLayout prevPage=(CellLayout)workspace.getPageAt(pageIndex - 1);boolean isPrevPageFullscreen=((CellLayout.LayoutParams)prevPage.getShortcutsAndWidgets().getChildAt(0).getLayoutParams()).isFullscreen;if (isPrevPageFullscreen) {workspace.getPageAt(pageIndex - 1).requestFocus();}break;case FocusLogic.NEXT_PAGE_LEFT_COLUMN:case FocusLogic.NEXT_PAGE_RIGHT_COLUMN:workspace.snapToPage(pageIndex + 1);CellLayout nextPage=(CellLayout)workspace.getPageAt(pageIndex + 1);boolean isNextPageFullscreen=((CellLayout.LayoutParams)nextPage.getShortcutsAndWidgets().getChildAt(0).getLayoutParams()).isFullscreen;if (isNextPageFullscreen) {workspace.getPageAt(pageIndex + 1).requestFocus();}break;}if (parent == iconParent && newIconIndex >= iconParent.getChildCount()) {newIconIndex-=iconParent.getChildCount();}if (parent != null) {if (newIcon == null && newIconIndex >= 0) {newIcon=parent.getChildAt(newIconIndex);}if (newIcon != null) {newIcon.requestFocus();playSoundEffect(keyCode,v);}}return consume;}  }
class C{  protected final boolean hasResult(){  return hasResult;}  }
class C{  @Override public List<EvaluationStatistics> read(){  return m_Statistics;}  }
class C{  private boolean isThousandSeparator(char c){}  }
class C{  public ShearingGraphMousePlugin(int modifiers){  super(modifiers);  Dimension cd=Toolkit.getDefaultToolkit().getBestCursorSize(16,16);  BufferedImage cursorImage=new BufferedImage(cd.width,cd.height,BufferedImage.TYPE_INT_ARGB);  Graphics g=cursorImage.createGraphics();  Graphics2D g2=(Graphics2D)g;  g2.addRenderingHints(Collections.singletonMap(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON));  g.setColor(new Color(0,0,0,0));  g.fillRect(0,0,16,16);  int left=0;  int top=0;  int right=15;  int bottom=15;  g.setColor(Color.white);  g2.setStroke(new BasicStroke(3));  g.drawLine(left + 2,top + 5,right - 2,top + 5);  g.drawLine(left + 2,bottom - 5,right - 2,bottom - 5);  g.drawLine(left + 2,top + 5,left + 4,top + 3);  g.drawLine(left + 2,top + 5,left + 4,top + 7);  g.drawLine(right - 2,bottom - 5,right - 4,bottom - 3);  g.drawLine(right - 2,bottom - 5,right - 4,bottom - 7);  g.setColor(Color.black);  g2.setStroke(new BasicStroke(1));  g.drawLine(left + 2,top + 5,right - 2,top + 5);  g.drawLine(left + 2,bottom - 5,right - 2,bottom - 5);  g.drawLine(left + 2,top + 5,left + 4,top + 3);  g.drawLine(left + 2,top + 5,left + 4,top + 7);  g.drawLine(right - 2,bottom - 5,right - 4,bottom - 3);  g.drawLine(right - 2,bottom - 5,right - 4,bottom - 7);  g.dispose();  cursor=Toolkit.getDefaultToolkit().createCustomCursor(cursorImage,new Point(),"RotateCursor");}  }
class C{  private void init(){  setTitle("World Dialog");  fillFieldValues();  worldWidth.setColumns(initialWorldWidth);  mainPanel.addItem("World Width",worldWidth);  mainPanel.addItem("World Height",worldHeight);  mainPanel.addItem("Moving objects initiates creature movement",initiateMovement);  mainPanel.addItem("Objects block movement",inhibitMovement);  mainPanel.addItem("Enable boundaries (if not, agents wrap around)",useLocalBounds);  mainPanel.addItem("Update network while dragging objects",updateDrag);  mainPanel.addItem("Set Background Color",colorChoice);  setContentPane(mainPanel);  colorChoice.addActionListener(this);  updateDrag.addActionListener(this);}  }
class C{  public void init(){  _zkConnection.curator().getConnectionStateListenable().addListener(_connectionListener);  _zkConnection.connect();  if (siteSpecific) {    _serviceParentPath=String.format("%1$s/%2$s%3$s/%4$s/%5$s",ZkPath.SITES,_zkConnection.getSiteId(),ZkPath.SERVICE,_service.getName(),_service.getVersion());  } else {    _serviceParentPath=String.format("%1$s/%2$s/%3$s",ZkPath.SERVICE,_service.getName(),_service.getVersion());  }  _servicePath=String.format("%1$s/%2$s",_serviceParentPath,_service.getId());  try {    checkStaleRegistration();  } catch (  Exception ex) {    _log.warn("Unable to remove stale service registration",ex);  }  _bInitialized=true;}  }
class C{  public Container(boolean debugBootstrap) throws Exception {  System.setProperty(SwarmProperties.VERSION,VERSION);  createServer(debugBootstrap,null);  createShrinkWrapDomain();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void updateSQLXML(String columnLabel,SQLXML xmlObject) throws SQLException {  throw unsupported("SQLXML");}  }
class C{  @Override public void visit(Tree.InvocationExpression that){  visitInvocationPositionalArgs(that);  Tree.Primary p=that.getPrimary();  p.visit(this);  Tree.PositionalArgumentList pal=that.getPositionalArgumentList();  if (pal != null) {    inferParameterTypes(p,pal);    pal.visit(this);  }  Tree.NamedArgumentList nal=that.getNamedArgumentList();  if (nal != null) {    inferParameterTypes(p,nal);    nal.visit(this);  }  visitInvocationPositionalArgs(that);  visitInvocationPrimary(that);  if (isIndirectInvocation(that)) {    visitIndirectInvocation(that);  } else {    visitDirectInvocation(that);  }}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (m.size() == 0 && c.size() > 0 && c instanceof SortedSet && m instanceof TreeMap) {    SortedSet<? extends E> set=(SortedSet<? extends E>)c;    TreeMap<E,Object> map=(TreeMap<E,Object>)m;    Comparator<?> cc=set.comparator();    Comparator<? super E> mc=map.comparator();    if (cc == mc || (cc != null && cc.equals(mc))) {      map.addAllForTreeSet(set,PRESENT);      return true;    }  }  return super.addAll(c);}  }
class C{  protected void fireRetransmissionTimer(){  try {    if (this.getState() == null || !this.isMapped)     return;    boolean inv=isInviteTransaction();    TransactionState s=this.getState();    if ((inv && TransactionState.CALLING == s) || (!inv && (TransactionState.TRYING == s || TransactionState.PROCEEDING == s))) {      if (lastRequest != null) {        if (sipStack.generateTimeStampHeader && lastRequest.getHeader(TimeStampHeader.NAME) != null) {          long milisec=System.currentTimeMillis();          TimeStamp timeStamp=new TimeStamp();          try {            timeStamp.setTimeStamp(milisec);          } catch (          InvalidArgumentException ex) {            InternalErrorHandler.handleException(ex);          }          lastRequest.setHeader(timeStamp);        }        super.sendMessage(lastRequest);        if (this.notifyOnRetransmit) {          TimeoutEvent txTimeout=new TimeoutEvent(this.getSipProvider(),this,Timeout.RETRANSMIT);          this.getSipProvider().handleEvent(txTimeout,this);        }        if (this.timeoutIfStillInCallingState && this.getState() == TransactionState.CALLING) {          this.callingStateTimeoutCount--;          if (callingStateTimeoutCount == 0) {            TimeoutEvent timeoutEvent=new TimeoutEvent(this.getSipProvider(),this,Timeout.RETRANSMIT);            this.getSipProvider().handleEvent(timeoutEvent,this);            this.timeoutIfStillInCallingState=false;          }        }      }    }  } catch (  IOException e) {    this.raiseIOExceptionEvent();    raiseErrorEvent(SIPTransactionErrorEvent.TRANSPORT_ERROR);  }}  }
class C{  public Value[] readRow(Value[] row) throws SQLException {  StatementBuilder buff=new StatementBuilder("SELECT ");  appendColumnList(buff,false);  buff.append(" FROM ");  appendTableName(buff);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  setKey(prep,1,row);  ResultSet rs=prep.executeQuery();  if (!rs.next()) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }  Value[] newRow=new Value[columnCount];  for (int i=0; i < columnCount; i++) {    int type=result.getColumnType(i);    newRow[i]=DataType.readValue(rs,i + 1,type);  }  return newRow;}  }
class C{  public static boolean isSupported(byte[] version){  if (version[0] != 3 || (version[1] != 0 && version[1] != 1)) {    return false;  }  return true;}  }
class C{  public void layout(FlowView fv){  super.layout(fv);}  }
class C{  public static boolean isLegal(boolean expression){  return isLegal(expression,"");}  }
class C{  private void ensureWebContentKeyBindings(){  if (sBindings.size() > 0) {    return;  }  String webContentKeyBindingsString=Settings.Secure.getString(mWebView.getContext().getContentResolver(),Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS);  SimpleStringSplitter semiColonSplitter=new SimpleStringSplitter(';');  semiColonSplitter.setString(webContentKeyBindingsString);  while (semiColonSplitter.hasNext()) {    String bindingString=semiColonSplitter.next();    if (TextUtils.isEmpty(bindingString)) {      Log.e(LOG_TAG,"Disregarding malformed Web content key binding: " + webContentKeyBindingsString);      continue;    }    String[] keyValueArray=bindingString.split("=");    if (keyValueArray.length != 2) {      Log.e(LOG_TAG,"Disregarding malformed Web content key binding: " + bindingString);      continue;    }    try {      long keyCodeAndModifiers=Long.decode(keyValueArray[0].trim());      String[] actionStrings=keyValueArray[1].split(":");      int[] actions=new int[actionStrings.length];      for (int i=0, count=actions.length; i < count; i++) {        actions[i]=Integer.decode(actionStrings[i].trim());      }      sBindings.add(new AccessibilityWebContentKeyBinding(keyCodeAndModifiers,actions));    } catch (    NumberFormatException nfe) {      Log.e(LOG_TAG,"Disregarding malformed key binding: " + bindingString);    }  }}  }
class C{  public static String sqlEscapeString(String value){  StringBuilder escaper=new StringBuilder();  DatabaseUtils.appendEscapedSQLString(escaper,value);  return escaper.toString();}  }
class C{  public static boolean isXML11NCName(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  private void drawSecondAnimation(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(backgroundColor);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - Utils.dpToPx(4,getResources()),transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  public static float mapEnterCurveToExitCurveAtT(UnitCurve enterCurve,UnitCurve exitCurve,float t){  return exitCurve.tAt(1 - enterCurve.valueAt(t));}  }
class C{  public String findOSVersion(){  return _productIdent;}  }
class C{  public static String createFilterFromJMSSelector(final String selectorStr) throws ActiveMQException {  return selectorStr == null || selectorStr.trim().length() == 0 ? null : SelectorTranslator.convertToActiveMQFilterString(selectorStr);}  }
class C{  public static DefaultIntervalXYDataset createDefaultIntervalXYDataset(ValueSource valueSource,PlotInstance plotInstance,boolean createRangeIntervals) throws ChartPlottimeException {  ValueSourceData valueSourceData=plotInstance.getPlotData().getValueSourceData(valueSource);  assertMaxValueCountNotExceededOrThrowException(valueSourceData);  GroupCellSeriesData dataForAllGroupCells=valueSourceData.getSeriesDataForAllGroupCells();  DefaultIntervalXYDataset intervalDataset=new DefaultIntervalXYDataset();  DefaultDimensionConfig domainConfig=valueSource.getDomainConfig();  DimensionConfigData domainConfigData=plotInstance.getPlotData().getDimensionConfigData(domainConfig);  for (  GroupCellKeyAndData groupCellKeyAndData : dataForAllGroupCells) {    GroupCellKey groupCellKey=groupCellKeyAndData.getKey();    GroupCellData groupCellData=groupCellKeyAndData.getData();    GroupCellKey groupCellKeyClone=(GroupCellKey)groupCellKey.clone();    groupCellKeyClone.removeRangeForDimension(PlotDimension.DOMAIN);    String seriesName=generateSeriesName(valueSource,groupCellKeyClone,plotInstance.getCurrentPlotConfigurationClone());    List<ValueRange> domainValueGroups=domainConfigData.getGroupingModel();    final int domainValueIdx=0;    final int domainLowerIdx=1;    final int domainUpperIdx=2;    final int rangeValueIdx=3;    final int rangeLowerIdx=4;    final int rangeUpperIdx=5;    Map<PlotDimension,double[]> dataForMainSeries=groupCellData.getDataForUsageType(SeriesUsageType.MAIN_SERIES);    int rowCount=dataForMainSeries.get(PlotDimension.DOMAIN).length;    double[] domainValues=dataForMainSeries.get(PlotDimension.DOMAIN);    double[] rangeValues=dataForMainSeries.get(PlotDimension.VALUE);    double[] upperErrorValues=null;    double[] lowerErrorValues=null;    upperErrorValues=valueSourceData.getAbsoluteUtilityValues(groupCellKeyAndData,true);    lowerErrorValues=valueSourceData.getAbsoluteUtilityValues(groupCellKeyAndData,false);    if (createRangeIntervals && upperErrorValues == null) {      throw new ChartPlottimeException("undefined_series",valueSource.toString(),SeriesUsageType.INDICATOR_1);    }    double[][] series=new double[6][rowCount];    Iterator<ValueRange> domainGroupIterator=null;    if (domainValueGroups != null) {      domainGroupIterator=domainValueGroups.iterator();    }    double domainLower;    double domainUpper;    double domainValue;    double rangeValue;    double rangeUpper;    double rangeLower;    for (int row=0; row < rowCount; ++row) {      domainValue=domainValues[row];      domainLower=domainValue;      domainUpper=domainValue;      if (domainGroupIterator != null) {        ValueRange currentDomainGroup=domainGroupIterator.next();        if (currentDomainGroup.definesUpperLowerBound()) {          domainLower=currentDomainGroup.getLowerBound();          domainUpper=currentDomainGroup.getUpperBound();        }      }      rangeValue=rangeValues[row];      rangeUpper=upperErrorValues != null ? upperErrorValues[row] : Double.NaN;      rangeLower=lowerErrorValues != null ? lowerErrorValues[row] : Double.NaN;      series[domainValueIdx][row]=domainValue;      series[domainLowerIdx][row]=domainLower;      series[domainUpperIdx][row]=domainUpper;      series[rangeValueIdx][row]=rangeValue;      series[rangeLowerIdx][row]=rangeLower;      series[rangeUpperIdx][row]=rangeUpper;    }    intervalDataset.addSeries(seriesName,series);  }  return intervalDataset;}  }
class C{  protected void updateOnEventQueue(){  double[] x=problem.getX();  double[] actualY=problem.getActualY();  double[] approximatedY=problem.getApproximatedY(solution);  XYSeries actualSeries=new XYSeries("Target Function",false,false);  XYSeries approximatedSeries=new XYSeries("Estimated Function",false,false);  for (int i=0; i < x.length; i++) {    actualSeries.add(x[i],actualY[i]);    approximatedSeries.add(x[i],approximatedY[i]);  }  DefaultTableXYDataset dataset=new DefaultTableXYDataset();  dataset.addSeries(actualSeries);  dataset.addSeries(approximatedSeries);  JFreeChart chart=ChartFactory.createXYLineChart("Symbolic Regression Demo","x","f(x)",dataset,PlotOrientation.VERTICAL,true,true,false);  XYPlot plot=chart.getXYPlot();  plot.setRenderer(new XYLineAndShapeRenderer());  details.setText("Generation " + generation + " / "+ maxGenerations+ "\nObjective value: "+ solution.getObjective(0)+ "\n\n"+ solution.getVariable(0));  container.removeAll();  container.add(new ChartPanel(chart),BorderLayout.CENTER);  container.revalidate();  container.repaint();  if (!isCanceled) {    setVisible(true);  }}  }
class C{  private static short CallNonvirtualShortMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualShortMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Short,true);    return Reflection.unwrapShort(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private MInvoice completeInvoice(MInvoice invoice){  if (invoice != null) {    if (!invoice.processIt(p_docAction)) {      log.warning("completeInvoice - failed: " + invoice);      addLog("completeInvoice - failed: " + invoice);    }    invoice.save();    addLog(invoice.getC_Invoice_ID(),invoice.getDateInvoiced(),null,invoice.getDocumentNo());    m_created++;  }  invoice=null;  m_ship=null;  m_line=0;  return invoice;}  }
class C{  public CharSet(){  chars=new int[0];}  }
class C{  private long startNewTrack(){  if (isRecording()) {    Log.d(TAG,"Ignore startNewTrack. Already recording.");    return -1L;  }  long now=System.currentTimeMillis();  trackTripStatisticsUpdater=new TripStatisticsUpdater(now);  markerTripStatisticsUpdater=new TripStatisticsUpdater(now);  Track track=new Track();  Uri uri=myTracksProviderUtils.insertTrack(track);  long trackId=Long.parseLong(uri.getLastPathSegment());  updateRecordingState(trackId,false);  PreferencesUtils.setInt(this,R.string.auto_resume_track_current_retry_key,0);  PreferencesUtils.setInt(this,R.string.activity_recognition_type_key,PreferencesUtils.ACTIVITY_RECOGNITION_TYPE_DEFAULT);  track.setId(trackId);  track.setName(TrackNameUtils.getTrackName(this,trackId,now,null));  String category=PreferencesUtils.getString(this,R.string.default_activity_key,PreferencesUtils.DEFAULT_ACTIVITY_DEFAULT);  track.setCategory(category);  track.setIcon(TrackIconUtils.getIconValue(this,category));  track.setTripStatistics(trackTripStatisticsUpdater.getTripStatistics());  myTracksProviderUtils.updateTrack(track);  insertWaypoint(WaypointCreationRequest.DEFAULT_START_TRACK);  startRecording(true);  return trackId;}  }
class C{  @Override public void addAttribute(String name,boolean value){  current.setAttribute(name,Boolean.valueOf(value).toString());}  }
class C{  public static void main(String[] argv){  try {    double delta=0.5;    double xmean=0;    double lower=0;    double upper=10;    Matrix covariance=new Matrix(2,2);    covariance.set(0,0,2);    covariance.set(0,1,-3);    covariance.set(1,0,-4);    covariance.set(1,1,5);    if (argv.length > 0) {      covariance.set(0,0,Double.valueOf(argv[0]).doubleValue());    }    if (argv.length > 1) {      covariance.set(0,1,Double.valueOf(argv[1]).doubleValue());    }    if (argv.length > 2) {      covariance.set(1,0,Double.valueOf(argv[2]).doubleValue());    }    if (argv.length > 3) {      covariance.set(1,1,Double.valueOf(argv[3]).doubleValue());    }    if (argv.length > 4) {      delta=Double.valueOf(argv[4]).doubleValue();    }    if (argv.length > 5) {      xmean=Double.valueOf(argv[5]).doubleValue();    }    MahalanobisEstimator newEst=new MahalanobisEstimator(covariance,delta,xmean);    if (argv.length > 6) {      lower=Double.valueOf(argv[6]).doubleValue();      if (argv.length > 7) {        upper=Double.valueOf(argv[7]).doubleValue();      }      double increment=(upper - lower) / 50;      for (double current=lower; current <= upper; current+=increment)       System.out.println(current + "  " + newEst.getProbability(current));    } else {      System.out.println("Covariance Matrix\n" + covariance);      System.out.println(newEst);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void merge(MatrixBlock out,MatrixBlock in,boolean appendOnly) throws DMLRuntimeException {  if (_compare == null)   mergeWithoutComp(out,in,appendOnly); else   mergeWithComp(out,in,_compare);}  }
class C{  public void stop(boolean forceIfNecessary) throws IOException {  if (this.serverProcess != null) {    String basedir=getServerProps().getProperty(BASEDIR_KEY);    StringBuilder pathBuf=new StringBuilder(basedir);    if (!basedir.endsWith(File.separator)) {      pathBuf.append(File.separator);    }    pathBuf.append("bin");    pathBuf.append(File.separator);    pathBuf.append("mysqladmin shutdown");    System.out.println(pathBuf.toString());    Process mysqladmin=Runtime.getRuntime().exec(pathBuf.toString());    int exitStatus=-1;    try {      exitStatus=mysqladmin.waitFor();    } catch (    InterruptedException ie) {    }    if (exitStatus != 0 && forceIfNecessary) {      forceStop();    }  }}  }
class C{  public HttpErrorResponseException(Throwable cause,int statusCode,String statusDescription,String responseMessage){  super(cause);  this.statusCode=statusCode;  this.statusDescription=statusDescription;  this.responseMessage=responseMessage;}  }
class C{  private void adjustAllocation(int index) throws Exception {  MDistributionRunLine runLine=m_runLines[index];  BigDecimal difference=runLine.getActualAllocationDiff();  if (difference.compareTo(Env.ZERO) == 0)   return;  boolean adjustBiggest=difference.abs().compareTo(Env.ONE) <= 0 || difference.abs().compareTo(runLine.getLastDifference().abs()) == 0;  log.fine("Line=" + runLine.getLine() + ", Diff="+ difference+ ", Adjust="+ adjustBiggest);  if (adjustBiggest) {    for (int i=0; i < m_details.length; i++) {      MDistributionRunDetail detail=m_details[i];      if (runLine.getM_DistributionRunLine_ID() == detail.getM_DistributionRunLine_ID()) {        log.fine("Biggest - DetailAllocation=" + detail.getActualAllocation() + ", MaxAllocation="+ runLine.getMaxAllocation()+ ", Qty Difference="+ difference);        if (detail.getActualAllocation().compareTo(runLine.getMaxAllocation()) == 0 && detail.isCanAdjust()) {          detail.adjustQty(difference);          detail.saveEx();          return;        }      }    }    throw new Exception("Cannot adjust Difference = " + difference + " - You need to change Total Qty or Min Qty");  } else {    BigDecimal ratioTotal=Env.ZERO;    for (int i=0; i < m_details.length; i++) {      MDistributionRunDetail detail=m_details[i];      if (runLine.getM_DistributionRunLine_ID() == detail.getM_DistributionRunLine_ID()) {        if (detail.isCanAdjust())         ratioTotal=ratioTotal.add(detail.getRatio());      }    }    if (ratioTotal.compareTo(Env.ZERO) == 0)     throw new Exception("Cannot distribute Difference = " + difference + " - You need to change Total Qty or Min Qty");    for (int i=0; i < m_details.length; i++) {      MDistributionRunDetail detail=m_details[i];      if (runLine.getM_DistributionRunLine_ID() == detail.getM_DistributionRunLine_ID()) {        if (detail.isCanAdjust()) {          BigDecimal diffRatio=detail.getRatio().multiply(difference).divide(ratioTotal,BigDecimal.ROUND_HALF_UP);          log.fine("Detail=" + detail.toString() + ", Allocation="+ detail.getActualAllocation()+ ", DiffRatio="+ diffRatio);          detail.adjustQty(diffRatio);          detail.saveEx();        }      }    }  }  runLine.setLastDifference(difference);}  }
class C{  public final void openFile(final String defaultList,final String extraUserList){  if (ALWAYS_RECREATE_SSID_BLACKLIST) {    SsidBlackListBootstraper.run(defaultList);  }  if (defaultList != null) {    try {      final File file=new File(defaultList);      final FileInputStream defaultStream=new FileInputStream(file);      add(defaultStream);    } catch (    final FileNotFoundException e) {      Log.i(TAG,"Default blacklist " + defaultList + " not found. Setting up..");      SsidBlackListBootstraper.run(defaultList);    }  }  if (extraUserList != null) {    try {      final File file=new File(extraUserList);      final FileInputStream userStream=new FileInputStream(file);      add(userStream);    } catch (    final FileNotFoundException e) {      Log.w(TAG,"User-defined blacklist " + extraUserList + " not found. Skipping");    }  } else {    Log.i(TAG,"No user-defined blacklist provided");  }}  }
class C{  private void checkMappingsCompatibility(IndexMetaData indexMetaData){  Index index=new Index(indexMetaData.getIndex());  Settings settings=indexMetaData.getSettings();  try {    SimilarityLookupService similarityLookupService=new SimilarityLookupService(index,settings);    try (AnalysisService analysisService=new FakeAnalysisService(index,settings)){      try (MapperService mapperService=new MapperService(index,settings,analysisService,similarityLookupService,scriptService,mapperRegistry)){        for (        ObjectCursor<MappingMetaData> cursor : indexMetaData.getMappings().values()) {          MappingMetaData mappingMetaData=cursor.value;          mapperService.merge(mappingMetaData.type(),mappingMetaData.source(),false,false);        }      }     }   } catch (  Exception ex) {    throw new IllegalStateException("unable to upgrade the mappings for the index [" + indexMetaData.getIndex() + "], reason: ["+ ex.getMessage()+ "]",ex);  }}  }
class C{  public KeyBuilder shift(){  modifiers|=ModifierKeys.SHIFT;  return this;}  }
class C{  public void onCTA(Function callback){  peer.onCTA(callback);}  }
class C{  public void stop(){  if ((m_Experiment == null) || !m_Experiment.isRunning())   return;  m_Experiment.stop();}  }
class C{  public synchronized void reopen(int seekRow) throws FormatException {  try {    if (inputFile == null) {      inputFile=new BinaryBufferedFile(filename);      inputFile.byteOrder(byteorder);    }    if (seekRow > 0) {      seekToRow(seekRow);    }  } catch (  IOException i) {    throw new FormatException(i.getClass() + ": " + i.getMessage());  }}  }
class C{  public void clean(){  ChronoFullRevision cfr=firstCFR;  totalSize=size;  while (cfr != null) {    totalSize+=cfr.size();    cfr=cfr.getNext();  }  if (totalSize < MAX_STORAGE_SIZE) {    return;  }  cfr=firstCFR;  while (cfr != null) {    totalSize+=cfr.clean(revisionIndex,0);    cfr=cfr.getNext();  }  ChronoStorageBlock block;  while (last != null && totalSize >= MAX_STORAGE_SIZE) {    block=last.getIndexPrev();    if (storage.remove(last.getRevisionIndex()) == null) {      throw new RuntimeException("VALUE WAS NOT REMOVED FROM STORAGE");    }    totalSize-=last.length();    size+=last.length();    if (block != null) {      block.setIndexNext(null);    }    last.setIndexPrev(null);    cfr=last.getChronoFullRevision();    totalSize+=cfr.size() - cfr.clean(revisionIndex,last.getRevisionIndex());    if (last == first) {      first=null;    }    last=block;  }  System.gc();}  }
class C{  public void addComponentListener(final ComponentUpdateListener listener){  componentListeners.add(listener);}  }
class C{  public int executeUpdate(String sql) throws GenericDataSourceException {  Statement stmt=null;  try {    stmt=_connection.createStatement();    return stmt.executeUpdate(sql);  } catch (  SQLException sqle) {    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);  } finally {    if (stmt != null) {      try {        stmt.close();      } catch (      SQLException sqle) {        Debug.logWarning("Unable to close 'statement': " + sqle.getMessage(),module);      }    }  }}  }
class C{  public DomAdapterFactory(){  if (modelPackage == null) {    modelPackage=DomPackage.eINSTANCE;  }}  }
class C{  public final boolean containsDividers(){  return dividerCount > 0;}  }
class C{  public AsyncResult CreateSessionAsync(RequestHeader RequestHeader,ApplicationDescription ClientDescription,String ServerUri,String EndpointUrl,String SessionName,byte[] ClientNonce,byte[] ClientCertificate,Double RequestedSessionTimeout,UnsignedInteger MaxResponseMessageSize){  CreateSessionRequest req=new CreateSessionRequest(RequestHeader,ClientDescription,ServerUri,EndpointUrl,SessionName,ClientNonce,ClientCertificate,RequestedSessionTimeout,MaxResponseMessageSize);  return channel.serviceRequestAsync(req);}  }
class C{  public WeightedNIPaths(DirectedGraph<V,E> graph,Supplier<V> vertexFactory,Supplier<E> edgeFactory,double alpha,int maxDepth,Set<V> priors){  super.initialize(graph,true,false);  this.vertexFactory=vertexFactory;  this.edgeFactory=edgeFactory;  mAlpha=alpha;  mMaxDepth=maxDepth;  mPriors=priors;  for (  V v : graph.getVertices()) {    super.setVertexRankScore(v,0.0);  }}  }
class C{  public void registerParameterDataType(String parameterName,VCardDataType dataType){  parameterName=parameterName.toLowerCase();  if (dataType == null) {    parameterDataTypes.remove(parameterName);  } else {    parameterDataTypes.put(parameterName,dataType);  }}  }
class C{  public void dispose(){  removeAll();}  }
class C{  private void revalidate(){  setTitle(Msg.getMsg(Env.getCtx(),"Report") + ": " + m_reportEngine.getName()+ "  "+ Env.getHeader(Env.getCtx(),0));  StringBuffer sb=new StringBuffer();  sb.append(Msg.getMsg(Env.getCtx(),"DataCols")).append("=").append(m_reportEngine.getColumnCount()).append(", ").append(Msg.getMsg(Env.getCtx(),"DataRows")).append("=").append(m_reportEngine.getRowCount());  statusBar.setStatusLine(sb.toString());}  }
class C{  private TimSort(T[] a,Comparator<? super T> c){  this.a=a;  this.c=c;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  @Timed @ExceptionMetered @GET public Response findClient(@Auth AutomationClient automationClient,@QueryParam("name") Optional<String> name){  logger.info("Automation ({}) - Looking up a name {}",automationClient.getName(),name);  if (name.isPresent()) {    Client client=clientDAO.getClient(name.get()).orElseThrow(null);    ImmutableList<Group> groups=ImmutableList.copyOf(aclDAO.getGroupsFor(client));    return Response.ok().entity(ClientDetailResponse.fromClient(client,groups,ImmutableList.of())).build();  }  List<ClientDetailResponse> clients=clientDAO.getClients().stream().map(null).collect(toList());  return Response.ok().entity(clients).build();}  }
class C{  public NotificationChain basicSet_lok(LocalArgumentsVariable new_lok,NotificationChain msgs){  LocalArgumentsVariable old_lok=_lok;  _lok=new_lok;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK,old_lok,new_lok);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static PublicKey createPublicKeyFromBytes(byte[] keyBytes){  PublicKey pk=null;  try {    KeyFactory keyFactory=KeyFactory.getInstance(KeyConstants.KEY_FACTORY,new BouncyCastleProvider());    pk=keyFactory.generatePublic(new X509EncodedKeySpec(keyBytes));  } catch (  NoSuchAlgorithmException|InvalidKeySpecException e) {    logger.warn("Exception caught in CryptCore." + "createPublicKeyFromBytes, returning null",e);  }  return pk;}  }
class C{  @Override public void replace(int index,Solution newSolution){  Iterator<Solution> iterator=iterator();  while (iterator.hasNext()) {    Solution oldSolution=iterator.next();    int flag=comparator.compare(newSolution,oldSolution);    if (flag < 0) {      iterator.remove();    } else     if (flag > 0) {      return;    } else     if (isDuplicate(newSolution,oldSolution)) {      return;    }  }  super.replace(index,newSolution);}  }
class C{  public void readGraphics() throws java.io.IOException {  if (Debug.debugging("cachelayer")) {    Debug.output("Reading cached graphics");  }  if (omgraphics == null) {    omgraphics=new OMGraphicList();  }  if (cacheURL != null) {    omgraphics.readGraphics(cacheURL);  }}  }
class C{  private void drawSplat(Canvas canvas,float x,float y,float orientation,float distance,float tilt,Paint paint){  float z=distance * 2 + 10;  float nx=(float)(Math.sin(orientation) * Math.sin(tilt));  float ny=(float)(-Math.cos(orientation) * Math.sin(tilt));  float nz=(float)Math.cos(tilt);  if (nz < 0.05) {    return;  }  float cd=z / nz;  float cx=nx * cd;  float cy=ny * cd;  for (int i=0; i < SPLAT_VECTORS; i++) {    double direction=mRandom.nextDouble() * Math.PI * 2;    double dispersion=mRandom.nextGaussian() * 0.2;    double vx=Math.cos(direction) * dispersion;    double vy=Math.sin(direction) * dispersion;    double vz=1;    double temp=vy;    vy=temp * Math.cos(tilt) - vz * Math.sin(tilt);    vz=temp * Math.sin(tilt) + vz * Math.cos(tilt);    temp=vx;    vx=temp * Math.cos(orientation) - vy * Math.sin(orientation);    vy=temp * Math.sin(orientation) + vy * Math.cos(orientation);    if (vz < 0.05) {      continue;    }    float pd=(float)(z / vz);    float px=(float)(vx * pd);    float py=(float)(vy * pd);    mCanvas.drawCircle(x + px - cx,y + py - cy,1.0f,paint);  }}  }
class C{  public void deleteSnapshot(String id) throws IsilonException {  delete(_baseUrl.resolve(URI_SNAPSHOTS),id,"snapshot");}  }
class C{  public MutableInt(final Number value){  super();  this.value=value.intValue();}  }
class C{  public void start(){  try {    mRunning=true;    if (mSsl) {      final KeyStore keystore=KeyStore.getInstance(mKeystoreDefaultType);      keystore.load(new FileInputStream(mKeystoreFile),mKeystorePassword.toCharArray());      final KeyStore tks=KeyStore.getInstance(mTrustoreDefaultType);      tks.load(new FileInputStream(mTrustoreFile),mTrustorePassword.toCharArray());      final KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());      final TrustManagerFactory tmf;      tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());      kmf.init(keystore,mKeystorePassword.toCharArray());      tmf.init(tks);      final SSLContext ctx=SSLContext.getInstance(mSslProtocol);      ctx.init(kmf.getKeyManagers(),tmf.getTrustManagers(),null);      final SSLServerSocketFactory sslserversocketfactory=ctx.getServerSocketFactory();      mServerSocket=sslserversocketfactory.createServerSocket(mPort);    } else {      mServerSocket=new ServerSocket(mPort);    }    for (int i=0; i < mServerEventListenerList.size(); i++) {      mServerEventListenerList.get(i).onServerStarted();    }    while (mRunning) {      final Socket newSocketConnection=mServerSocket.accept();      newSocketConnection.setKeepAlive(true);      final ServerSocketChannel server=new ServerSocketChannel(newSocketConnection,this);      final Thread newSocket=new Thread(server);      newSocket.start();    }    mServerSocket.close();  } catch (  SocketException e) {    stop();  }catch (  IOException e) {  }catch (  KeyStoreException e) {    e.printStackTrace();  }catch (  UnrecoverableKeyException e) {    e.printStackTrace();  }catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }catch (  CertificateException e) {    e.printStackTrace();  }catch (  KeyManagementException e) {    e.printStackTrace();  }}  }
class C{  private E firstDataItem(){  for (Node p=head; p != null; p=succ(p)) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return LinkedTransferQueue.<E>cast(item);    } else     if (item == null)     return null;  }  return null;}  }
class C{  @Override protected void applyEditorTo(DLangRunDubConfiguration config) throws ConfigurationException {  config.setModule(comboModule.getSelectedModule());  config.setRunAfterBuild(cbRunAfterBuild.isSelected());  config.setVerbose(cbVerbose.isSelected());  config.setQuiet(cbQuiet.isSelected());  config.setWorkingDir(pathWorkingDir.getText());  config.setAdditionalParams(textParameters.getText());  config.setEnvVars(envVariables.getEnvs());}  }
class C{  public NodeElementProcessor(ElementProcessor parentProcessor,MapBuilder mdConsumer){  super(parentProcessor,mdConsumer);  tagElementProcessor=new TagElementProcessor(this,this);  nodeAttributes=new ArrayList<EntityAttribute>();}  }
class C{  public static XMLTree from(InputStream is) throws IOException {  return new XMLTree(toByteArray(is));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.813 -0500",hash_original_method="3BCED7FFBE0FE784BA49584BB088736F",hash_generated_method="A6D1542B468031E8023E6CF76568C729") static String retrieveTextString(ComprehensionTlv ctlv) throws ResultException {  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  byte codingScheme=0x00;  String text=null;  int textLen=ctlv.getLength();  if (textLen == 0) {    return text;  } else {    textLen-=1;  }  try {    codingScheme=(byte)(rawValue[valueIndex] & 0x0c);    if (codingScheme == 0x00) {      text=GsmAlphabet.gsm7BitPackedToString(rawValue,valueIndex + 1,(textLen * 8) / 7);    } else     if (codingScheme == 0x04) {      text=GsmAlphabet.gsm8BitUnpackedToString(rawValue,valueIndex + 1,textLen);    } else     if (codingScheme == 0x08) {      text=new String(rawValue,valueIndex + 1,textLen,"UTF-16");    } else {      throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);    }    return text;  } catch (  IndexOutOfBoundsException e) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }catch (  UnsupportedEncodingException e) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }}  }
class C{  public static Field findField(Class clazz,String name){  Field[] fields=clazz.getDeclaredFields();  for (  Field field : fields) {    if (name.equals(field.getName())) {      return field;    }  }  Class superClass=clazz.getSuperclass();  if (superClass != null) {    return findField(superClass,name);  }  return null;}  }
class C{  static int inverseMod32(int val){  int t=val;  t*=2 - val * t;  t*=2 - val * t;  t*=2 - val * t;  t*=2 - val * t;  return t;}  }
class C{  public ObjectStoreGlobFilter(String filePattern,PathFilter filter) throws IOException {  init(filePattern,filter);}  }
class C{  protected void UnionExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean continueOrLoop=true;  boolean foundUnion=false;  do {    PathExpr();    if (tokenIs('|')) {      if (false == foundUnion) {        foundUnion=true;        insertOp(opPos,2,OpCodes.OP_UNION);      }      nextToken();    } else {      break;    }  } while (continueOrLoop);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.530 -0500",hash_original_method="BD4B3A181E1CE5BF498106AFACED886D",hash_generated_method="30CA07B05F86A174B85EE2CBAC1889BC") public void replyToMessage(Message srcMsg,int what){  Message msg=Message.obtain();  msg.what=what;  replyToMessage(srcMsg,msg);}  }
class C{  public boolean writeToNode(Short nodeId,SyncMessage bsm) throws InterruptedException {  if (nodeId == null)   return false;  NodeConnection nc=connections.get(nodeId);  if (nc != null && nc.state == NodeConnectionState.CONNECTED) {    waitForMessageWindow(bsm.getType(),nodeId,0);    nc.nodeChannel.write(bsm);    return true;  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addInfo(String msg,RefactoringStatusContext context){  fEntries.add(new RefactoringStatusEntry(RefactoringStatus.INFO,msg,context));  fSeverity=Math.max(fSeverity,INFO);}  }
class C{  private void testIsoWeekJanuary1thFriday() throws Exception {  assertEquals(53,getIsoWeek(parse("2009-12-31")));  assertEquals(53,getIsoWeek(parse("2010-01-01")));  assertEquals(53,getIsoWeek(parse("2010-01-03")));  assertEquals(1,getIsoWeek(parse("2010-01-04")));}  }
class C{  protected int estimateParametersLen(final NameValuePair[] nvps){  if ((nvps == null) || (nvps.length < 1))   return 0;  int result=(nvps.length - 1) * 2;  for (int i=0; i < nvps.length; i++) {    result+=estimateNameValuePairLen(nvps[i]);  }  return result;}  }
class C{  public void unsynchronizeWith(UpdateSynchronizer sync){  runner.unsynchronizeWith(sync);}  }
class C{  public final double numCorrect(){  return m_perClass[maxClass()];}  }
class C{  void focusTriangle(){  setFocusType(2);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void clear(){  throw new UnsupportedOperationException("ProtectedProperties cannot be modified!");}  }
class C{  private State buildPatch(TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  public void testCanConvert(){  final Class type=URI.class;  final URIConverter instance=new URIConverter();  final boolean expResult=true;  final boolean result=instance.canConvert(type);  assertEquals(expResult,result);}  }
class C{  public boolean isImageDisabled(){  return imageDisabled;}  }
class C{  public static List<ErrorLogger.ErrorObject> areAllVirtualTracksInCPLConformed(PayloadRecord cplPayloadRecord,List<PayloadRecord> essencesHeaderPartitionPayloads) throws IOException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  ApplicationComposition applicationComposition=ApplicationCompositionFactory.getApplicationComposition(new ByteArrayByteRangeProvider(cplPayloadRecord.getPayload()),imfErrorLogger);  List<VirtualTrack> virtualTracks=new ArrayList<>(applicationComposition.getVirtualTracks());  imfErrorLogger.addAllErrors(checkVirtualTrackAndEssencesHeaderPartitionPayloadRecords(virtualTracks,essencesHeaderPartitionPayloads));  if (imfErrorLogger.hasFatalErrors()) {    return imfErrorLogger.getErrors();  }  imfErrorLogger.addAllErrors(conformVirtualTracksInCPL(cplPayloadRecord,essencesHeaderPartitionPayloads,true));  return imfErrorLogger.getErrors();}  }
class C{  public boolean equals(shift_action other){  return other != null && other.shift_to() == shift_to();}  }
class C{  public void addInternetScsiSendTargets(HostInternetScsiHba hba,String... addresses){  addInternetScsiSendTargets(getStorageSystem(),hba,addresses);}  }
class C{  public IllegalThreadStateException(java.lang.String s){}  }
class C{  public static short toShort(byte[] bytes,int offset){  if (littleEndian) {    return Short.reverseBytes(theUnsafe.getShort(bytes,offset + BYTE_ARRAY_BASE_OFFSET));  } else {    return theUnsafe.getShort(bytes,offset + BYTE_ARRAY_BASE_OFFSET);  }}  }
class C{  public String valueString(){  byte[] barr=new byte[rawData.length * 4];  ByteBuffer b=ByteBuffer.wrap(barr,0,barr.length);  b.order(java.nio.ByteOrder.LITTLE_ENDIAN);  IntBuffer i=b.asIntBuffer();  i.put(rawData);  try {    String str=new String(barr,"US-ASCII");    str=str.substring(0,str.indexOf("\0"));    return str;  } catch (  java.io.UnsupportedEncodingException e) {  }  return null;}  }
class C{  public ModuleUnloadedReply(final int packetId,final int errorCode,final MemoryModule module){  super(packetId,errorCode);  this.module=module;}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(HelloAnalyticsApiSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=analytics " + "into analytics-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT,JSON_FACTORY,clientSecrets,Collections.singleton(AnalyticsScopes.ANALYTICS_READONLY)).setDataStoreFactory(DATA_STORE_FACTORY).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public MapTileMaker(Properties props){  super(props);}  }
class C{  public void testBug8792() throws Exception {  DatabaseMetaData dbmd=this.conn.getMetaData();  assertTrue(dbmd.supportsResultSetConcurrency(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY));  assertTrue(dbmd.supportsResultSetConcurrency(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE));  assertTrue(dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY));  assertTrue(dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE));  assertTrue(!dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY));  assertTrue(!dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE));  try {    dbmd.supportsResultSetConcurrency(ResultSet.TYPE_FORWARD_ONLY,Integer.MIN_VALUE);    fail("Exception should've been raised for bogus concurrency value");  } catch (  SQLException sqlEx) {    assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));  }  try {    assertTrue(dbmd.supportsResultSetConcurrency(ResultSet.TYPE_SCROLL_INSENSITIVE,Integer.MIN_VALUE));    fail("Exception should've been raised for bogus concurrency value");  } catch (  SQLException sqlEx) {    assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));  }  try {    assertTrue(dbmd.supportsResultSetConcurrency(Integer.MIN_VALUE,Integer.MIN_VALUE));    fail("Exception should've been raised for bogus concurrency value");  } catch (  SQLException sqlEx) {    assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));  }}  }
class C{  static void errorInvalidAttributeValue(String systemID,int lineNr,String elementName,String attributeName,String attributeValue) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.ATTRIBUTE_WITH_INVALID_VALUE,systemID,lineNr,elementName,attributeName,attributeValue,"Invalid value for attribute " + attributeName);}  }
class C{  static private String readFromFile(final File file) throws IOException {  if (file.isDirectory())   throw new IllegalArgumentException();  final LineNumberReader r=new LineNumberReader(new FileReader(file));  try {    final StringBuilder sb=new StringBuilder();    String s;    while ((s=r.readLine()) != null) {      if (r.getLineNumber() > 1)       sb.append("\n");      sb.append(s);    }    return sb.toString();  }  finally {    r.close();  }}  }
class C{  public static String print(Node node,boolean canonical,boolean normalize){  StringBuffer sb=new StringBuffer();  if (node == null) {    return null;  }  int type=node.getNodeType();switch (type) {case Node.DOCUMENT_NODE:{      if (!canonical) {        String Encoding="UTF-8";        sb.append("<?xml version=\"1.0\" encoding=\"" + Encoding + "\"?>");        sb.append(StringUtil.getNewlineStr());      }      print(((Document)node).getDocumentElement(),canonical,normalize);      NodeList children=node.getChildNodes();      for (int iChild=0; iChild < children.getLength(); iChild++) {        sb.append(print(children.item(iChild),canonical,normalize));      }      break;    }case Node.ELEMENT_NODE:{    sb.append('<');    sb.append(node.getNodeName());    Attr attrs[]=sortAttributes(node.getAttributes());    for (int i=0; i < attrs.length; i++) {      Attr attr=attrs[i];      sb.append(' ');      sb.append(attr.getNodeName());      sb.append("=\"");      if (normalize)       sb.append(normalize(attr.getNodeValue(),canonical)); else       sb.append(attr.getNodeValue());      sb.append('"');    }    sb.append('>');    NodeList children=node.getChildNodes();    if (children != null) {      int len=children.getLength();      for (int i=0; i < len; i++) {        sb.append(print(children.item(i),canonical,normalize));      }    }    break;  }case Node.ENTITY_REFERENCE_NODE:{  if (canonical) {    NodeList children=node.getChildNodes();    if (children != null) {      int len=children.getLength();      for (int i=0; i < len; i++) {        sb.append(print(children.item(i),canonical,normalize));      }    }  } else {    sb.append('&');    System.out.println("Entity node name " + node.getNodeName());    sb.append(node.getNodeName());    sb.append(';');  }  break;}case Node.CDATA_SECTION_NODE:{if (canonical) {  if (normalize)   sb.append(normalize(node.getNodeValue(),canonical)); else   sb.append(node.getNodeValue());} else {  sb.append("<![CDATA[");  sb.append(node.getNodeValue());  sb.append("]]>");}break;}case Node.TEXT_NODE:{sb.append(normalize(node.getNodeValue(),canonical));break;}case Node.PROCESSING_INSTRUCTION_NODE:{sb.append("<?");sb.append(node.getNodeName());String data=node.getNodeValue();if (data != null && data.length() > 0) {sb.append(' ');sb.append(data);}sb.append("?>");break;}case Node.DOCUMENT_TYPE_NODE:{sb.append("<!DOCTYPE ");sb.append(node.getNodeName());sb.append(" PUBLIC ");sb.append("\"" + ((DocumentType)node).getPublicId() + "\" ");sb.append(" \"" + ((DocumentType)node).getSystemId() + "\"");sb.append(">");sb.append(StringUtil.getNewlineStr());break;}}if (type == Node.ELEMENT_NODE) {sb.append("</");sb.append(node.getNodeName());sb.append('>');}return sb.toString();}  }
class C{  public boolean unlockIt(){  log.info(toString());  setProcessing(false);  return true;}  }
class C{  private static String javaCharset(String charset){  if (charset == null) {    return null;  }  String mappedCharset=MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));  if (mappedCharset == null) {    return charset;  }  return mappedCharset;}  }
class C{  NodeTextRep substituteInNodeText(FormalParamNode[] formalParams,String[] arguments,boolean[] isBoundedIdRenaming,SemanticNode[] argNodes,ExprNode sn,NodeTextRep nodeTextRep,Decomposition decomp){  NodeTextRep result=nodeTextRep.clone();  int numOfLines=result.nodeText.length;  Vector<Insertion>[] inserts=new Vector[numOfLines];  for (int i=0; i < numOfLines; i++) {    inserts[i]=new Vector();  }  int beginLine=sn.stn.getLocation().beginLine();  for (int i=0; i < arguments.length; i++) {    SemanticNode[] uses=ResourceHelper.getUsesOfSymbol(formalParams[i],sn);    String replacementText=arguments[i];    int sourceTextLength=getCurrentName(formalParams[i],decomp.renaming).length();    boolean mayNeedParens=false;    if (primingNeedsParens(argNodes[i]) && ((replacementText.charAt(replacementText.length() - 1) != '\'') || replacementText.startsWith("\\/") || replacementText.startsWith("/\\"))) {      mayNeedParens=true;    }    for (int j=0; j < uses.length; j++) {      if (!(uses[j] instanceof OpApplNode)) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 2842 of DecomposeProofHandler.");        return result;      }      Location useLocation=uses[j].stn.getLocation();      int useIdx=useLocation.beginLine() - beginLine;      int offset=colToLoc(useLocation.beginColumn(),result.mapping[useIdx]);      String thisReplaceText=replacementText;      if (mayNeedParens) {        String[] precedingSafe=new String[]{"(","[","{",",","<<","->",":"};        String[] followingSafe=new String[]{")","]","}",",",">>","->","~>"};        String testString=result.nodeText[useIdx].substring(0,offset).trim();        int line=useIdx;        while (testString.equals("") && line > 0) {          line--;          testString=result.nodeText[line];        }        boolean terminated=testString.equals("");        int k=0;        while (!terminated && k < precedingSafe.length) {          terminated=testString.endsWith(precedingSafe[k]);          k++;        }        if (terminated) {          testString=result.nodeText[useIdx].substring(offset + sourceTextLength).trim();          line=useIdx;          while (testString.equals("") && line < result.nodeText.length - 1) {            line++;            testString=result.nodeText[line];          }          terminated=testString.equals("");          k=0;          while (!terminated && k < precedingSafe.length) {            terminated=testString.startsWith(followingSafe[k]);            k++;          }        }        if (!terminated) {          thisReplaceText="(" + replacementText + ")";        }      }      result.nodeText[useIdx]=result.nodeText[useIdx].substring(0,offset) + thisReplaceText + result.nodeText[useIdx].substring(offset + sourceTextLength);      adjustMappingPairVector(useLocation.beginColumn() + sourceTextLength,thisReplaceText.length() - sourceTextLength,result.mapping[useIdx]);      inserts[useIdx].add(new Insertion(offset,sourceTextLength,thisReplaceText.length()));    }    if (isBoundedIdRenaming[i]) {      Location useLocation=formalParams[i].stn.getLocation();      if (EditorUtil.locationContainment(useLocation,sn.stn.getLocation())) {        int useIdx=useLocation.beginLine() - beginLine;        int offset=colToLoc(useLocation.beginColumn(),result.mapping[useIdx]);        result.nodeText[useIdx]=result.nodeText[useIdx].substring(0,offset) + replacementText + result.nodeText[useIdx].substring(offset + sourceTextLength);        adjustMappingPairVector(useLocation.beginColumn() + sourceTextLength,replacementText.length() - sourceTextLength,result.mapping[useIdx]);        inserts[useIdx].add(new Insertion(offset,sourceTextLength,replacementText.length()));      }    }  }  adjustIndentation(nodeTextRep,result,inserts);  return result;}  }
class C{  public CompoundExpr_ createCompoundExpr_(){  CompoundExpr_Impl compoundExpr_=new CompoundExpr_Impl();  return compoundExpr_;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @AssistedInject public TunnelResource(@Assisted UserTunnel tunnel){  this.tunnel=tunnel;}  }
class C{  public void visitConstantExpression(ConstantExpression expression){  final String constantName=expression.getConstantName();  if (controller.isStaticConstructor() || constantName == null) {    controller.getOperandStack().pushConstant(expression);  } else {    controller.getMethodVisitor().visitFieldInsn(GETSTATIC,controller.getInternalClassName(),constantName,BytecodeHelper.getTypeDescription(expression.getType()));    controller.getOperandStack().push(expression.getType());  }}  }
class C{  public boolean excludeMatches(String formattedStackTrace){  return matches(excludePattern,formattedStackTrace);}  }
class C{  public static void delete(@As(",") String[] ids){  delete(uris(ids));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  boolean isActive(){  return timeStamp != 0;}  }
class C{  public void destroy(){  if (!this.closed) {    lockCompactor();    try {      this.basicClose();    }  finally {      unlockCompactor();    }  }}  }
class C{  private void buildOptions(Options options){  OptionBuilder.withArgName(OPTION_HELP);  OptionBuilder.withLongOpt(OPTION_HELP);  OptionBuilder.isRequired(false);  OptionBuilder.withDescription("Print help message and exit.");  options.addOption(OptionBuilder.create('h'));  OptionBuilder.withArgName(OPTION_INPUT_JSON);  OptionBuilder.withLongOpt(OPTION_INPUT_JSON);  OptionBuilder.isRequired(false);  OptionBuilder.hasArg();  OptionBuilder.withDescription("Specify the JSON input file.");  options.addOption(OptionBuilder.create("j"));}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.517 -0400",hash_original_method="119B60645D483F809E3A96FC8309D1F9",hash_generated_method="E6C38C6C759418E657BA31E557B3EE66") public boolean isFailed(){  PrintService.throwIfNotCalledOnMainThread();  return getInfo().getState() == PrintJobInfo.STATE_FAILED;}  }
class C{  public boolean isWinNT(){  return System.getProperty("os.name").toLowerCase().indexOf("nt") >= 0;}  }
class C{  public static ArrayList<Category> ParseCategories(JSONObject jsonTotalObject){  ArrayList<Category> categoryArrayList=new ArrayList<>();  try {    JSONArray categories=jsonTotalObject.getJSONArray("categories");    Category recent=new Category();    recent.setName("Recent");    recent.setId(0);    categoryArrayList.add(recent);    for (int i=0; i < categories.length(); i++) {      JSONObject jsonObject=categories.getJSONObject(i);      Category category=new Category();      category.setName(jsonObject.getString("title"));      category.setId(jsonObject.getInt("id"));      category.setSlugName(jsonObject.getString("slug"));      categoryArrayList.add(category);    }    return categoryArrayList;  } catch (  JSONException e) {    Log.e(TAG,"JSONException when loading categories",e);    e.printStackTrace();    return null;  }}  }
class C{  public List<Bucket> bucketList(){  return bucketList;}  }
class C{  public void receiveSipMsrpSessionInvitation(GenericSipMsrpSession session){  ContactId remote=session.getRemoteContact();  MultimediaMessagingSessionImpl multimediaMessaging=new MultimediaMessagingSessionImpl(session.getSessionID(),mMultimediaMessagingSessionEventBroadcaster,mSipService,this,Direction.INCOMING,remote,session.getServiceId(),State.INVITED);  session.addListener(multimediaMessaging);  addMultimediaMessaging(multimediaMessaging);}  }
class C{  public Bits xorSet(Bits xs){  Assert.check(currentState != BitsState.UNKNOWN);  sizeTo(xs.bits.length);  for (int i=0; i < xs.bits.length; i++) {    bits[i]=bits[i] ^ xs.bits[i];  }  currentState=BitsState.NORMAL;  return this;}  }
class C{  public void fireMessageEvent(StunMessageEvent evt){  TransportAddress localAddr=evt.getLocalAddress();  MessageTypeEventHandler<?>[] messageListenersCopy;synchronized (messageListeners) {    messageListenersCopy=messageListeners.toArray(new MessageTypeEventHandler<?>[messageListeners.size()]);  }  char messageType=(char)(evt.getMessage().getMessageType() & 0x0110);  for (  MessageTypeEventHandler<?> messageListener : messageListenersCopy) {    if (messageType == messageListener.messageType)     messageListener.handleMessageEvent(evt);  }synchronized (children) {    EventDispatcher child=children.get(localAddr);    if (child != null)     child.fireMessageEvent(evt);  }}  }
class C{  public List<KrigingPoint> interpolatePoints(Variogram variogram,List<KrigingPoint> pnts,int numberOfNearestPoints){  double[][] D=new double[numberOfNearestPoints + 1][1];  List<KrigingPoint> nnPoints=new ArrayList();  List<KrigingPoint> outPnts=new ArrayList();  int progress;  int oldProgress=-1;  int numPoints=pnts.size();  for (int n=0; n < numPoints; n++) {    nnPoints=getNNpoints(this.pointsTree,pnts.get(n),numberOfNearestPoints);    double[][] C=CalcConstantCoef(variogram,nnPoints);    double[] tm=CalcVariableCoef(variogram,pnts.get(n),nnPoints);    for (int i=0; i < tm.length; i++) {      D[i][0]=tm[i];    }    Matrix tmp=Matrix.constructWithCopy(C);    Matrix VariableCoef=Matrix.constructWithCopy(D);    Matrix w=null;    try {      double vs=0;      w=tmp.solve(VariableCoef);      double[][] Wi=w.getArray();      double s=0;      for (int i=0; i < Wi.length - 1; i++) {        s=s + Wi[i][0] * nnPoints.get(i).z;        vs=vs + Wi[i][0] * D[i][0];      }      KrigingPoint pnt=new KrigingPoint(pnts.get(n).x,pnts.get(n).y,s);      pnt.v=vs + Wi[Wi.length - 1][0];      outPnts.add(pnt);      s=0;    } catch (    Exception ex) {      SingularValueDecomposition svd=tmp.svd();      Matrix u=svd.getU();      Matrix s=svd.getS();      Matrix v=svd.getV();      int rrr=svd.rank();      double[][] stemp=s.getArray();      for (int nn=0; nn < stemp.length; nn++) {        if (stemp[nn][nn] > 0.003) {          stemp[nn][nn]=1 / stemp[nn][nn];        } else {          stemp[nn][nn]=0;        }      }      Matrix sp=new Matrix(stemp);      w=v.times(sp).times(u.transpose()).times(VariableCoef);      double[][] Wi=w.getArray();      double ss=0;      double vs=0;      for (int i=0; i < Wi.length - 1; i++) {        ss=ss + Wi[i][0] * nnPoints.get(i).z;        vs=vs + Wi[i][0] * D[i][0];      }      KrigingPoint pnt=new KrigingPoint(pnts.get(n).x,pnts.get(n).y,ss);      pnt.v=vs + Wi[Wi.length - 1][0];      if (pnt.v <= 0) {        pnt.v=pnt.v;        for (int i=0; i < nnPoints.size(); i++) {          System.out.println(nnPoints.get(i).x + " " + nnPoints.get(i).y+ " "+ nnPoints.get(i).z);        }      }      outPnts.add(pnt);      ss=0;    }    progress=(int)(100f * n / (numPoints - 1.0));    if (progress > oldProgress) {      changes.firePropertyChange("progress",oldProgress,progress);      if (host != null) {        host.updateProgress("Interpolating Data:",progress);      }      oldProgress=progress;    }  }  return outPnts;}  }
class C{  DropLocation dropLocationForPoint(Point p){  DropLocation location=null;  Rectangle rect=null;  int index=locationToIndex(p);  if (index != -1) {    rect=getCellBounds(index,index);  }switch (dropMode) {case USE_SELECTION:case ON:    location=new DropLocation(p,(rect != null && rect.contains(p)) ? index : -1,false);  break;case INSERT:if (index == -1) {  location=new DropLocation(p,getModel().getSize(),true);  break;}if (layoutOrientation == HORIZONTAL_WRAP) {boolean ltr=getComponentOrientation().isLeftToRight();if (SwingUtilities2.liesInHorizontal(rect,p,ltr,false) == TRAILING) {  index++;} else if (index == getModel().getSize() - 1 && p.y >= rect.y + rect.height) {  index++;}} else {if (SwingUtilities2.liesInVertical(rect,p,false) == TRAILING) {  index++;}}location=new DropLocation(p,index,true);break;case ON_OR_INSERT:if (index == -1) {location=new DropLocation(p,getModel().getSize(),true);break;}boolean between=false;if (layoutOrientation == HORIZONTAL_WRAP) {boolean ltr=getComponentOrientation().isLeftToRight();Section section=SwingUtilities2.liesInHorizontal(rect,p,ltr,true);if (section == TRAILING) {index++;between=true;} else if (index == getModel().getSize() - 1 && p.y >= rect.y + rect.height) {index++;between=true;} else if (section == LEADING) {between=true;}} else {Section section=SwingUtilities2.liesInVertical(rect,p,true);if (section == LEADING) {between=true;} else if (section == TRAILING) {index++;between=true;}}location=new DropLocation(p,index,between);break;default :assert false : "Unexpected drop mode";}return location;}  }
class C{  public final int accumulateAndGet(int x,IntBinaryOperator accumulatorFunction){  int prev, next;  do {    prev=get();    next=accumulatorFunction.applyAsInt(prev,x);  } while (!compareAndSet(prev,next));  return next;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,z1 * z2);          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,z1 * constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,constant1 * z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  VPlexConsistencyGroupInfo findConsistencyGroup(String cgName,List<VPlexClusterInfo> clusterInfoList,boolean fetchAtts,boolean retry) throws VPlexApiException {  int retryCount=0;  VPlexConsistencyGroupInfo cgInfo=null;  while (++retryCount <= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {    try {      cgInfo=null;      for (      VPlexClusterInfo clusterInfo : clusterInfoList) {        String clusterId=clusterInfo.getName();        List<VPlexConsistencyGroupInfo> allCGInfos=getConsistencyGroupsOnCluster(clusterId);        for (        VPlexConsistencyGroupInfo info : allCGInfos) {          s_logger.info("Consistency Group Info: {}",info.toString());          if (info.getName().equals(cgName)) {            cgInfo=info;            cgInfo.setClusterName(clusterInfo.getName());            break;          }        }        if (cgInfo != null) {          break;        }      }      if ((cgInfo != null) || (!retry) || (retryCount >= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        if (cgInfo == null) {          throw VPlexApiException.exceptions.didNotFindCGWithName(cgName);        } else         if (fetchAtts) {          updateConsistencyGroupInfo(cgInfo);        }        break;      } else {        s_logger.warn("Consistency group not found on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      }    } catch (    VPlexApiException vae) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding consistency group on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),vae);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw vae;      }    }catch (    Exception e) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding consistency group on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),e);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw VPlexApiException.exceptions.failureFindingCGWithName(cgName,e);      }    }  }  return cgInfo;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(keyAttrId);  v.add(keyAttr);  return new DERSequence(v);}  }
class C{  @Override public void addOOVRules(int sourceWord,List<FeatureFunction> featureFunctions){  final int targetWord=this.joshuaConfiguration.mark_oovs ? Vocabulary.id(Vocabulary.word(sourceWord) + "_OOV") : sourceWord;  int[] sourceWords={sourceWord};  int[] targetWords={targetWord};  final String oovAlignment="0-0";  if (this.joshuaConfiguration.oovList != null && this.joshuaConfiguration.oovList.size() != 0) {    for (    OOVItem item : this.joshuaConfiguration.oovList) {      Rule oovRule=new Rule(Vocabulary.id(item.label),sourceWords,targetWords,"",0,oovAlignment);      addRule(oovRule);      oovRule.estimateRuleCost(featureFunctions);    }  } else {    int nt_i=Vocabulary.id(this.joshuaConfiguration.default_non_terminal);    Rule oovRule=new Rule(nt_i,sourceWords,targetWords,"",0,oovAlignment);    addRule(oovRule);    oovRule.estimateRuleCost(featureFunctions);  }}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    dynInit();    jbInit();    frame.getContentPane().add(centerPanel,BorderLayout.CENTER);    frame.getContentPane().add(southPanel,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public boolean unProject(double x,double y,Viewport viewport,Vec3 nearResult,Vec3 farResult){  if (viewport == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","unProject","missingViewport"));  }  if (nearResult == null || farResult == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","unProject","missingResult"));  }  double sx=(x - viewport.x) / viewport.width;  double sy=(y - viewport.y) / viewport.height;  sx=sx * 2 - 1;  sy=sy * 2 - 1;  double[] m=this.m;  double mx=(m[0] * sx) + (m[1] * sy) + m[3];  double my=(m[4] * sx) + (m[5] * sy) + m[7];  double mz=(m[8] * sx) + (m[9] * sy) + m[11];  double mw=(m[12] * sx) + (m[13] * sy) + m[15];  double nx=mx - m[2];  double ny=my - m[6];  double nz=mz - m[10];  double nw=mw - m[14];  double fx=mx + m[2];  double fy=my + m[6];  double fz=mz + m[10];  double fw=mw + m[14];  if (nw == 0 || fw == 0) {    return false;  }  nearResult.x=nx / nw;  nearResult.y=ny / nw;  nearResult.z=nz / nw;  farResult.x=fx / fw;  farResult.y=fy / fw;  farResult.z=fz / fw;  return true;}  }
class C{  public synchronized boolean isRequestConsumable(SIPRequest dialogRequest){  if (dialogRequest.getMethod().equals(Request.ACK))   throw new RuntimeException("Illegal method");  if (!this.isSequnceNumberValidation()) {    return true;  }  return remoteSequenceNumber < dialogRequest.getCSeq().getSeqNumber();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.016 -0500",hash_original_method="AF3A14095123D56D09822378D0F36CC8",hash_generated_method="AAC6E813101FE7A1B2D6DEBB4EB4C029") public final static String formatStatusLine(final StatusLine statline,LineFormatter formatter){  if (formatter == null)   formatter=BasicLineFormatter.DEFAULT;  return formatter.formatStatusLine(null,statline).toString();}  }
class C{  public boolean isLocal(){  return true;}  }
class C{  protected OMGraphicList constructGraticuleLines(float up,float down,float left,float right,int showWhichLines){  OMGraphicList lines=new OMGraphicList();  int north=(int)Math.ceil(up);  if (north > 80)   north=80;  int south=(int)Math.floor(down);  south-=(south % 10);  if ((south < 0 && south > -80) || south == 0)   south-=10;  int west=(int)Math.floor(left);  west-=(west % 10);  if ((west < 0 && west > -180) || west == 0)   west-=10;  int east=(int)Math.ceil(right);  if (east > 180)   east=180;  int stepSize;  int stepSum;  double point_x, point_y;  stepSize=((showWhichLines == SHOW_ONES) ? 1 : 5);  double[] llp;  OMPoly currentLine;  OMText currentText;  Point point=new Point();  LatLonPoint llpoint;  Projection projection=getProjection();  for (int i=south; i < north; i+=stepSize) {    float lat=(float)i;    if (west < 0 && east > 0) {      llp=new double[6];      llp[2]=lat;      llp[3]=0f;      llp[4]=lat;      llp[5]=east;    } else {      llp=new double[4];      llp[2]=lat;      llp[3]=east;    }    llp[0]=lat;    llp[1]=west;    if ((lat % 10) != 0) {      currentLine=new OMPoly(llp,OMGraphic.DECIMAL_DEGREES,boxy ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_RHUMB);      if ((lat % 5) == 0) {        currentLine.setLinePaint(fiveDegreeColor);      } else {        currentLine.setLinePaint(oneDegreeColor);      }      lines.add(currentLine);    }    if (showRuler && (lat % 2) == 0) {      if (boxy) {        projection.forward(lat,west,point);        point.x=0;        llpoint=projection.inverse(point.x,point.y,new LatLonPoint.Double());      } else {        llpoint=new LatLonPoint.Double(lat,west);        stepSum=0;        while (stepSum < 360) {          point_x=projection.forward(llpoint).getX();          if (point_x > 0 && point_x < projection.getWidth())           break;          stepSum+=stepSize;          llpoint.setLongitude(llpoint.getX() + stepSize);        }      }      currentText=new OMText(llpoint.getY(),llpoint.getX(),(int)2,(int)-2,Integer.toString((int)lat),font,OMText.JUSTIFY_LEFT);      currentText.setLinePaint(textColor);      lines.add(currentText);    }  }  for (int i=west; i < east; i+=stepSize) {    float lon=(float)i;    if (north < 0 && south > 0) {      llp=new double[6];      llp[2]=0f;      llp[3]=lon;      llp[4]=south;      llp[5]=lon;    } else {      llp=new double[4];      llp[2]=south;      llp[3]=lon;    }    llp[0]=north;    llp[1]=lon;    if ((lon % 10) != 0) {      currentLine=new OMPoly(llp,OMGraphic.DECIMAL_DEGREES,boxy ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_GREATCIRCLE);      if ((lon % 5) == 0) {        currentLine.setLinePaint(fiveDegreeColor);      } else {        currentLine.setLinePaint(oneDegreeColor);      }      lines.add(currentLine);    }    if (showRuler && (lon % 2) == 0) {      if (boxy) {        projection.forward(south,lon,point);        point.y=projection.getHeight();        llpoint=projection.inverse(point.x,point.y,new LatLonPoint.Double());      } else {        llpoint=new LatLonPoint.Double(south,lon);        stepSum=0;        while (stepSum < 360) {          point_y=projection.forward(llpoint).getY();          if (point_y > 0 && point_y < projection.getHeight())           break;          stepSum+=stepSize;          llpoint.setLatitude(llpoint.getY() + stepSize);        }      }      currentText=new OMText(llpoint.getY(),llpoint.getX(),(int)2,(int)-5,Integer.toString((int)lon),font,OMText.JUSTIFY_CENTER);      currentText.setLinePaint(textColor);      lines.add(currentText);    }  }  if (Debug.debugging("graticule")) {    Debug.output("GraticuleLayer.constructTenDegreeLines(): " + "constructed " + lines.size() + " graticule lines");  }  lines.generate(projection);  return lines;}  }
class C{  private void rehash(){  int oldCapacity=table.length;  Entry oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  Entry newMap[]=new Entry[newCapacity];  modCount++;  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  public String globalInfo(){  return m_globalInfo;}  }
class C{  public boolean isFloating(ICalProperty property){  if (containsIdentity(floatingProperties,property)) {    return true;  }  if (propertyTimezones.containsKey(property)) {    return false;  }  return globalFloatingTime;}  }
class C{  public void stopTimer(){  if (timer != null) {    timer.cancel();    timer.purge();    timer=null;  }  if (timerButton != null) {    timerButton.setSelected(false);  }}  }
class C{  public static CCBezierBy action(float t,CCBezierConfig c){  return new CCBezierBy(t,c);}  }
class C{  public void dumpToStdout(){  int oldRegCount=interference.size();  for (int i=0; i < oldRegCount; i++) {    StringBuilder sb=new StringBuilder();    sb.append("Reg " + i + ":"+ interference.get(i).toString());    System.out.println(sb.toString());  }}  }
class C{  private void applyOnewayHierarchically(Node node,OneWay oneWay,EnumMap<Node,OneWay> tree){  tree.put(node,oneWay);  Node[] children=node.getChildren();  if (children != null) {    for (    Node child : children) {      applyOnewayHierarchically(child,oneWay,tree);    }  }}  }
class C{  @Override public int calculateBattleValue(boolean ignoreC3,boolean ignorePilot){  double dbv;  dbv=men * 1.5 * getDamageDivisor();  int tmmRan=Compute.getTargetMovementModifier(getRunMP(false,true,true),false,false,game).getValue();  final int jumpMP=getJumpMP(false);  final int tmmJumped=(jumpMP > 0) ? Compute.getTargetMovementModifier(jumpMP,true,false,game).getValue() : 0;  final int umuMP=getActiveUMUCount();  final int tmmUMU=(umuMP > 0) ? Compute.getTargetMovementModifier(umuMP,false,false,game).getValue() : 0;  double targetMovementModifier=Math.max(tmmRan,Math.max(tmmJumped,tmmUMU));  double tmmFactor=1 + (targetMovementModifier / 10);  if (hasDEST()) {    tmmFactor+=0.1;  }  if (hasSneakCamo()) {    tmmFactor+=0.2;  }  if (hasSneakIR()) {    tmmFactor+=0.2;  }  if (hasSneakECM()) {    tmmFactor+=0.1;  }  dbv*=tmmFactor;  double obv;  double speedFactor;  double speedFactorTableLookup=getRunMP(false,true,true) + Math.round(Math.max(jumpMP,umuMP) / 2.0);  if (speedFactorTableLookup > 25) {    speedFactor=Math.pow(1 + ((((double)walkMP + (Math.round(Math.max(jumpMP,umuMP) / 2.0))) - 5) / 10),1.2);  } else {    speedFactor=Math.pow(1 + ((speedFactorTableLookup - 5) / 10),1.2);  }  speedFactor=Math.round(speedFactor * 100) / 100.0;  double wbv=0;  if (null != primaryW) {    wbv+=primaryW.getBV(this) * (squadsize - secondn);  }  if (null != secondW) {    wbv+=secondW.getBV(this) * (secondn);  }  wbv=wbv * (men / squadsize);  if (isAntiMekTrained()) {    wbv*=2;  }  for (  Mounted mounted : getEquipment()) {    if (mounted.getLocation() == LOC_FIELD_GUNS) {      wbv+=mounted.getType().getBV(this);    }  }  obv=wbv * speedFactor;  int bv;  if (useGeometricMeanBV()) {    bv=(int)Math.round(2 * Math.sqrt(obv * dbv));    if (bv == 0) {      bv=(int)Math.round(dbv + obv);    }  } else {    bv=(int)Math.round(obv + dbv);  }  double pilotFactor=1;  if (!ignorePilot) {    pilotFactor=getCrew().getBVSkillMultiplier(isAntiMekTrained(),game);  }  return (int)Math.round((bv) * pilotFactor);}  }
class C{  protected int unwrapKey(Object key){  return ((Integer)key).intValue();}  }
class C{  public KeyStroke(KeyCode... keyCodes){  this();  addKeys(keyCodes);}  }
class C{  private static PCalLocation GetLastLocationEnd(){  return new PCalLocation(lastTokLine - 1,lastTokCol - 1 + lastTokString.length());}  }
class C{  public static String nextCode(final Date d,final boolean mainCycle){  final Date date=nextDate(d,mainCycle);  return code(date);}  }
class C{  public void run(){  String currLine=null;  try {    rdr=new BufferedReader(new InputStreamReader(url.openStream()));    while ((currLine=rdr.readLine()) != null) {      notifyTelegram(currLine.toCharArray());    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public Namespace(final NamespaceConfig nsConf,final Map<String,?> input,final Map<String,?> overrides){  checkArgument(nsConf != null,"nsConf is required");  checkArgument(MapUtils.isNotEmpty(input),"input map cannot be null or empty");  this.nsConf=nsConf;  makeAssignments(input,overrides);}  }
class C{  public static String unknownSymbolName(int id){  assert id > 0;  return "$" + id;}  }
class C{  static Source newSource(VirtualFile f,long fileTime,VirtualFile pathRoot,String relativePath,String shortName,Object owner,boolean isInternal,boolean isRoot,boolean isDebuggable,Set<VirtualFile> includes,Map<VirtualFile,Long> includeTimes,LocalLogger logger){  Source s=new Source(f,pathRoot,relativePath,shortName,owner,isInternal,isRoot,isDebuggable);  s.fileTime=fileTime;  s.fileIncludeTimes.putAll(includeTimes);  s.logger=logger;  return s;}  }
class C{  public static void storeSpecializedMethod(CompiledMethod cm,int smid){  specializedMethods[smid]=cm.getEntryCodeArray();}  }
class C{  @SuppressWarnings("unchecked") public <T extends WebMediumConfig>T update(T config){  config.addCredentials(this);  String xml=POST(this.url + "/update-" + config.getType(),config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=(T)config.getClass().newInstance();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  private static CompiledMethod optCompileWithFallBackInternal(NormalMethod method,CompilationPlan plan){  if (VM.BuildForOptCompiler) {    if (method.hasNoOptCompileAnnotation())     return fallback(method);    try {      return optCompile(method,plan);    } catch (    OptimizingCompilerException e) {      String msg="RuntimeCompiler: can't optimize \"" + method + "\" (error was: "+ e+ "): reverting to baseline compiler\n";      if (e.isFatal && VM.ErrorsFatal) {        e.printStackTrace();        VM.sysFail(msg);      } else {        boolean printMsg=true;        if (e instanceof MagicNotImplementedException) {          printMsg=!((MagicNotImplementedException)e).isExpected;        }        if (printMsg)         VM.sysWrite(msg);      }      return fallback(method);    }  } else {    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);    return null;  }}  }
class C{  public static String eachMatch(String self,String regex,@ClosureParams(value=FromString.class,options={"List<String>","String[]"}) Closure closure){  return eachMatch(self,Pattern.compile(regex),closure);}  }
class C{  public static String toJobReferenceString(JobReference jobRef){  return jobRef.getProjectId() + ":" + jobRef.getJobId();}  }
class C{  private boolean systemJarInWebinf(String path){  if (path.indexOf("/WEB-INF/") < 0) {    return false;  }  Boolean useMyFaces=(Boolean)ctxt.getServletContext().getAttribute("com.sun.faces.useMyFaces");  if (useMyFaces == null || !useMyFaces) {    for (    String jar : systemJsfJars) {      if (path.indexOf(jar) > 0) {        return true;      }    }  }  for (  String jar : systemJars) {    if (path.indexOf(jar) > 0) {      return true;    }  }  return false;}  }
class C{  public boolean isEmployee(){  Object oo=get_Value(COLUMNNAME_IsEmployee);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Bitmap createThumbnailBitmap(Bitmap bitmap,Context context){  int sIconWidth=-1;  int sIconHeight=-1;  final Resources resources=context.getResources();  sIconWidth=sIconHeight=(int)resources.getDimension(android.R.dimen.app_icon_size);  final Paint sPaint=new Paint();  final Rect sBounds=new Rect();  final Rect sOldBounds=new Rect();  Canvas sCanvas=new Canvas();  int width=sIconWidth;  int height=sIconHeight;  sCanvas.setDrawFilter(new PaintFlagsDrawFilter(Paint.DITHER_FLAG,Paint.FILTER_BITMAP_FLAG));  final int bitmapWidth=bitmap.getWidth();  final int bitmapHeight=bitmap.getHeight();  if (width > 0 && height > 0) {    if (width < bitmapWidth || height < bitmapHeight) {      final float ratio=(float)bitmapWidth / bitmapHeight;      if (bitmapWidth > bitmapHeight) {        height=(int)(width / ratio);      } else       if (bitmapHeight > bitmapWidth) {        width=(int)(height * ratio);      }      final Bitmap.Config c=(width == sIconWidth && height == sIconHeight) ? bitmap.getConfig() : Bitmap.Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      sBounds.set((sIconWidth - width) / 2,(sIconHeight - height) / 2,width,height);      sOldBounds.set(0,0,bitmapWidth,bitmapHeight);      canvas.drawBitmap(bitmap,sOldBounds,sBounds,paint);      return thumb;    } else     if (bitmapWidth < width || bitmapHeight < height) {      final Bitmap.Config c=Bitmap.Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      canvas.drawBitmap(bitmap,(sIconWidth - bitmapWidth) / 2,(sIconHeight - bitmapHeight) / 2,paint);      return thumb;    }  }  return bitmap;}  }
class C{  public Add(){  super("+",2);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenodens01.class,args);}  }
class C{  public String extremeValuesFactorTipText(){  return "The factor for determining the thresholds for extreme values.";}  }
class C{  public static <T>Response<T> error(HttpException error){  return new Response<T>(error);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.595 -0500",hash_original_method="7291D1B6F4C3ED0E6F576F289818668E",hash_generated_method="DD6AFDA8080022B03F0CD64EB972EE57") private boolean decodeNoValue(int startIndex){  if (wspData[startIndex] == 0) {    dataLength=1;    return true;  } else {    return false;  }}  }
class C{  public static <T>int binarySearch(T[] array,T object,Comparator<? super T> comparator){  return binarySearch(array,0,array.length,object,comparator);}  }
class C{  public MySqlValueConverters(boolean adaptiveTimePrecision){  this(adaptiveTimePrecision,ZoneOffset.UTC);}  }
class C{  public static String quote(String s){  StringBuilder buf=new StringBuilder();  for (int i=0; i < s.length(); i++) {    buf.append(quote(s.charAt(i)));  }  return buf.toString();}  }
class C{  public boolean implementsInterface(String name){  checkLevel(HIERARCHY);  Iterator<SootClass> interfaceIt=getInterfaces().iterator();  while (interfaceIt.hasNext()) {    SootClass SootClass=interfaceIt.next();    if (SootClass.getName().equals(name))     return true;  }  return false;}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public static String toString(double[][] m){  NumberFormat nf=new DecimalFormat(" 0.0000;-0.0000");  return toString(m,nf);}  }
class C{  public PowerPCTrapOperand flipCode(){switch (value) {case EQUAL:    value=NOT_EQUAL;  break;case NOT_EQUAL:value=EQUAL;break;case LESS:value=GREATER_EQUAL;break;case LESS_EQUAL:value=GREATER;break;case GREATER:value=LESS_EQUAL;break;case GREATER_EQUAL:value=LESS;break;case HIGHER:value=LOWER_EQUAL;break;case LOWER:value=HIGHER_EQUAL;break;case HIGHER_EQUAL:value=LOWER;break;case LOWER_EQUAL:value=HIGHER;break;case NOT_SAME:value=SAME;break;}return this;}  }
class C{  public static void extractRecords(File input,File tabix,ReferenceRanges<String> regions,OutputStream out) throws IOException {  try (TabixLineReader reader=new TabixLineReader(input,tabix,regions)){    String line;    while ((line=reader.readLine()) != null) {      out.write(line.getBytes());      out.write(StringUtils.LS.getBytes());    }  } }  }
class C{  public void put(byte[] key,byte[] value){synchronized (myDatabase) {    myDatabase.put(new ByteArrayWrapper(key),value);  }}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public BERSet(){}  }
class C{  public Label(String label){  super(label);}  }
class C{  public String print(String tab){  return tab + toString();}  }
class C{  public boolean isDefaultAsAttribute(){  return defaultAsAttribute;}  }
class C{  public void learnSymbol(int symbol){  mStartInsertionNode=insertSymbol(mStartInsertionNode,symbol);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testUnsupportedCallbackException02(){  myCallback c=new myCallback();  assertNotNull("Callback object is null",c);  UnsupportedCallbackException ucE=new UnsupportedCallbackException(c);  assertNull("getMessage() must return null.",ucE.getMessage());  assertEquals("Incorrect callback object was returned",c,ucE.getCallback());}  }
class C{  private void calculateRootNode(CleanTimeValues cleanTimeValues,Set<String> namespacePrefixes){  cleanTimeValues.rootNode=cleanTimeValues.htmlNode;  if (properties.isOmitHtmlEnvelope()) {    List bodyChildren=cleanTimeValues.bodyNode.getAllChildren();    cleanTimeValues.rootNode=new TagNode(null);    if (bodyChildren != null) {      for (Iterator iterator=bodyChildren.iterator(); iterator.hasNext(); ) {        Object currChild=iterator.next();        cleanTimeValues.rootNode.addChild(currChild);      }    }  }  Map<String,String> atts=cleanTimeValues.rootNode.getAttributes();  if (cleanTimeValues.rootNode.hasAttribute("xmlns")) {    cleanTimeValues.rootNode.addNamespaceDeclaration("",cleanTimeValues.rootNode.getAttributeByName("xmlns"));  }  if (properties.isNamespacesAware() && namespacePrefixes != null) {    Iterator<String> iterator=namespacePrefixes.iterator();    while (iterator.hasNext()) {      if (Thread.currentThread().isInterrupted()) {        handleInterruption();        return;      }      String prefix=iterator.next();      String xmlnsAtt="xmlns:" + prefix;      if (!atts.containsKey(xmlnsAtt) && !prefix.equals("xml")) {        cleanTimeValues.rootNode.addAttribute(xmlnsAtt,prefix);      }    }  }}  }
class C{  private boolean has(int flag){  return (flags & flag) != 0;}  }
class C{  public void replayAnimation(){  if (null != text) {    post(this);  }}  }
class C{  public boolean hasNext(){  return this.hasNext;}  }
class C{  protected SecretKey engineTranslateKey(SecretKey key) throws InvalidKeyException {  try {    if ((key != null) && (validTypes.contains(key.getAlgorithm().toUpperCase(Locale.ENGLISH))) && (key.getFormat().equalsIgnoreCase("RAW"))) {      if (key instanceof com.sun.crypto.provider.PBEKey) {        return key;      }      PBEKeySpec pbeKeySpec=(PBEKeySpec)engineGetKeySpec(key,PBEKeySpec.class);      return engineGenerateSecret(pbeKeySpec);    } else {      throw new InvalidKeyException("Invalid key format/algorithm");    }  } catch (  InvalidKeySpecException ikse) {    throw new InvalidKeyException("Cannot translate key: " + ikse.getMessage());  }}  }
class C{  @Override protected void initData(){}  }
class C{  public AclEntryImpl(){  princ=null;  permList=new Vector<Permission>();  commList=new Vector<String>();}  }
class C{  public TlsRsaPremasterSecretParameterSpec(int clientVersion,int serverVersion,byte[] encodedSecret){  this.clientVersion=checkVersion(clientVersion);  this.serverVersion=checkVersion(serverVersion);  if (encodedSecret == null || encodedSecret.length != 48) {    throw new IllegalArgumentException("Encoded secret is not exactly 48 bytes");  }  this.encodedSecret=encodedSecret.clone();}  }
class C{  public void onViewReady(Reason reason){}  }
class C{  private void handleAsynchronousError(RuntimeException ex,AsyncContext ctx){  String message;  if (ex instanceof EJBException && ex.getCause() instanceof EntityNotFoundException) {    message=ErrorMessages.NOT_FOUND_MSG;  } else   if (ex instanceof EJBException && ex.getCause() instanceof OptimisticLockException) {    message=ErrorMessages.CONFLICT_MSG;  } else {    message="Something went wrong.";  }  HttpServletRequest req=(HttpServletRequest)ctx.getRequest();  req.setAttribute("message",message);  req.setAttribute("exception",ex);  req.setAttribute("url",req.getRequestURI());  ctx.dispatch("/WEB-INF/jsp/error.jsp");}  }
class C{  protected void recordSelected(int key){  m_C_BPartner_ID=getSelectedRowKey();  refresh();  p_detailTaskPane.setCollapsed(false);  return;}  }
class C{  private void updateMargin(int delta){  leftIndent+=delta;  x+=delta;  curLine.getStyle().setMargin(Component.LEFT,leftIndent);}  }
class C{  private static void doCopyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    IOUtils.closeQuietly(output);    IOUtils.closeQuietly(fos);    IOUtils.closeQuietly(input);    IOUtils.closeQuietly(fis);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  public static double cbrt(double x){  long inbits=Double.doubleToRawLongBits(x);  int exponent=(int)((inbits >> 52) & 0x7ff) - 1023;  boolean subnormal=false;  if (exponent == -1023) {    if (x == 0) {      return x;    }    subnormal=true;    x*=1.8014398509481984E16;    inbits=Double.doubleToRawLongBits(x);    exponent=(int)((inbits >> 52) & 0x7ff) - 1023;  }  if (exponent == 1024) {    return x;  }  int exp3=exponent / 3;  double p2=Double.longBitsToDouble((inbits & 0x8000000000000000L) | (long)(((exp3 + 1023) & 0x7ff)) << 52);  final double mant=Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);  double est=-0.010714690733195933;  est=est * mant + 0.0875862700108075;  est=est * mant + -0.3058015757857271;  est=est * mant + 0.7249995199969751;  est=est * mant + 0.5039018405998233;  est*=CBRTTWO[exponent % 3 + 2];  final double xs=x / (p2 * p2 * p2);  est+=(xs - est * est * est) / (3 * est * est);  est+=(xs - est * est * est) / (3 * est * est);  double temp=est * HEX_40000000;  double ya=est + temp - temp;  double yb=est - ya;  double za=ya * ya;  double zb=ya * yb * 2.0 + yb * yb;  temp=za * HEX_40000000;  double temp2=za + temp - temp;  zb+=za - temp2;  za=temp2;  zb=za * yb + ya * zb + zb * yb;  za*=ya;  double na=xs - za;  double nb=-(na - xs + za);  nb-=zb;  est+=(na + nb) / (3 * est * est);  est*=p2;  if (subnormal) {    est*=3.814697265625E-6;  }  return est;}  }
class C{  final Entry removeEntryForKey(Object key){  int hash=(key == null) ? 0 : hash(hashingStrategy.hashCode(key));  int i=indexFor(hash,table.length);  Entry prev=table[i];  Entry e=prev;  while (e != null) {    Entry next=e.next;    Object k;    if (e.hash == hash && ((k=e.key) == key || (key != null && hashingStrategy.equals(k,key)))) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  private void initPseudoCounts(){  Arrays.fill(pseudoM,1.0);  Arrays.fill(pseudoN,1.0);  pseudoRho=1.0;}  }
class C{  protected String createLabelText(){  StringBuilder sb=new StringBuilder();  sb.append(this.getGraphicLabel());  String text=this.getText();  if (!WWUtil.isEmpty(text)) {    sb.append("\n");    sb.append(this.getText());  }  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.647 -0500",hash_original_method="E278B7FDC712595C2D25226C12B41BCD",hash_generated_method="0538ACDB60E00F86ADA8439C53BD785B") public void clearAndReadState(){synchronized (mAuthorities) {    mAuthorities.clear();    mAccounts.clear();    mPendingOperations.clear();    mSyncStatus.clear();    mSyncHistory.clear();    readAccountInfoLocked();    readStatusLocked();    readPendingOperationsLocked();    readStatisticsLocked();    readAndDeleteLegacyAccountInfoLocked();    writeAccountInfoLocked();    writeStatusLocked();    writePendingOperationsLocked();    writeStatisticsLocked();  }}  }
class C{  public TcpWorker(final int actorMaxOperationTimeoutSec,final TcpMeta tcpMeta,final String targetHost){  super();  this.actorMaxOperationTimeoutSec=actorMaxOperationTimeoutSec;  this.tcpMeta=tcpMeta;  this.targetHost=targetHost;}  }
class C{  public synchronized void addNextState(TLCState s1,long fp1,TLCState s2,long fp2){  for (int soln=0; soln < solutions.length; soln++) {    OrderOfSolution os=solutions[soln];    BEGraph bgraph=bgraphs[soln];    int slen=os.getCheckState().length;    int alen=os.getCheckAction().length;    if (!os.hasTableau()) {      BEGraphNode node1=bgraph.allNodes.getBENode(fp1);      BEGraphNode node2=bgraph.allNodes.getBENode(fp2);      if (node2 == null) {        node2=new BEGraphNode(fp2);        node2.setCheckState(os.checkState(s2));        node1.addTransition(node2,slen,alen,os.checkAction(s1,s2));        node2.addTransition(node2,slen,alen,os.checkAction(s2,s2));        bgraph.allNodes.putBENode(node2);      } else       if (!node1.transExists(node2)) {        boolean[] checkActionRes=os.checkAction(s1,s2);        node1.addTransition(node2,slen,alen,checkActionRes);      }    } else {      BTGraphNode[] srcNodes=bgraph.allNodes.getBTNode(fp1);      if (srcNodes == null) {        continue;      }      boolean[] checkStateRes=null;      boolean[] checkActionRes=os.checkAction(s1,s2);      boolean[] checkActionRes1=null;      for (int i=0; i < srcNodes.length; i++) {        BTGraphNode srcNode=srcNodes[i];        TBGraphNode tnode=os.getTableau().getNode(srcNode.getIndex());        for (int j=0; j < tnode.nextSize(); j++) {          TBGraphNode tnode1=tnode.nextAt(j);          BTGraphNode destNode=bgraph.allNodes.getBTNode(fp2,tnode1.getIndex());          if (destNode == null) {            if (tnode1.isConsistent(s2,myTool)) {              destNode=new BTGraphNode(fp2,tnode1.getIndex());              if (checkStateRes == null) {                checkStateRes=os.checkState(s2);              }              destNode.setCheckState(checkStateRes);              srcNode.addTransition(destNode,slen,alen,checkActionRes);              int idx=bgraph.allNodes.putBTNode(destNode);              if (checkActionRes1 == null) {                checkActionRes1=os.checkAction(s2,s2);              }              addNodesForStut(s2,fp2,destNode,checkStateRes,checkActionRes1,os,bgraph);              if (bgraph.allNodes.isDone(idx)) {                addNextState(s2,fp2,destNode,os,bgraph);              }            }          } else           if (!srcNode.transExists(destNode)) {            srcNode.addTransition(destNode,slen,alen,checkActionRes);          }        }      }    }  }}  }
class C{  public boolean isSet(){  return set;}  }
class C{  public synchronized void handleLostConnection(final HostConfiguration config){  final HostConnectionPool hostPool=getHostPool(config,true);  hostPool.numConnections--;  if ((hostPool.numConnections == 0) && hostPool.waitingThreads.isEmpty()) {    mapHosts.remove(config);  }  numConnections--;  notifyWaitingThread(config);}  }
class C{  public DefaultTlsSRPGroupVerifier(Vector groups){  this.groups=groups;}  }
class C{  public Reference<String> newLiteralReference(String s){  return new WeakReference<String>(s);}  }
class C{  public static ScheduledTour newInstance(Tour tour,CarrierVehicle vehicle,double departureTime){  return new ScheduledTour(tour,vehicle,departureTime);}  }
class C{  private void createFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  private long startTime(){  long start=log.getDate().getTime();  for (  Task<?> task : tasks.getTasks()) {    if (task.getStartTime() != null) {      start=Math.min(start,task.getStartTime().getTimeInMillis());    }  }  return start;}  }
class C{  public APIUserWrapper(APIUser apiUser){  this.apiUser=apiUser;}  }
class C{  public SortedDocValuesTermsEnum(SortedDocValues values){  this.values=values;  scratch=new BytesRefBuilder();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private SynapsePropertiesSimple(final Collection<Synapse> synapseList,final Window parent,final boolean displayIDInfo){  this.synapseList=synapseList;  this.parent=parent;  this.displayIDInfo=displayIDInfo;  detailTriangle=new DropDownTriangle(UpDirection.LEFT,false,"More","Less",parent);  extraDataPanel=new SynapsePropertiesExtended(synapseList);  initializeLayout();}  }
class C{  public int numWritten(){  return size;}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public boolean isPickFrustumClippingEnabled(){  return this.iconRenderer.isPickFrustumClippingEnabled();}  }
class C{  public static boolean hasLollipop(){  return Build.VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public Eights(){  Deck deck=new Deck("Deck");  deck.shuffle();  int handSize=5;  one=new Player("Allen");  deck.deal(one.getHand(),handSize);  two=new Player("Chris");  deck.deal(two.getHand(),handSize);  discardPile=new Hand("Discards");  deck.deal(discardPile,1);  drawPile=new Hand("Draw pile");  deck.dealAll(drawPile);  in=new Scanner(System.in);}  }
class C{  boolean canIncrement(Object field,int cursorPosition){  return (field != null);}  }
class C{  public char nextChar(){  return (char)(next(16));}  }
class C{  @DSVerified @DSBan(DSCat.DROIDSAFE_INTERNAL) public void droidsafeSubActivityCallbackHook(){  droidsafeOnOthersHook();}  }
class C{  public static void close(ZipFile zipFile){  try {    if (zipFile != null) {      zipFile.close();    }  } catch (  IOException ex) {    LOGGER.warn(String.format(LOG_FORMAT,"zipFile"));  }}  }
class C{  public boolean testMergeable(CSSClassManager other){  for (  CSSClass clss : other.getClasses()) {    CSSClass existing=store.get(clss.getName());    if (existing != null && existing.getOwner() != null && clss.getOwner() != null && existing.getOwner() != clss.getOwner()) {      return false;    }  }  return true;}  }
class C{  public String maxInstInLeafTipText(){  return "The max number of instances in a leaf.";}  }
class C{  public IterationExample(IterationObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getStatus() != null) {    criteria.andStatusEqualTo(sample.getStatus());  }  if (sample.getStartTime() != null) {    criteria.andStartTimeEqualTo(sample.getStartTime());  }  if (sample.getEndTime() != null) {    criteria.andEndTimeEqualTo(sample.getEndTime());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }}  }
class C{  public IPv4AddrIV(final String hostAddress) throws UnknownHostException {  super(DTE.Extension);  this.hostAddress=hostAddress;  final Matcher matcher=pattern.matcher(hostAddress);  final boolean matches=matcher.matches();  if (matches) {    final String ip=matcher.group(1);    if (log.isDebugEnabled())     log.debug(ip);    final String suffix=matcher.group(6);    if (log.isDebugEnabled())     log.debug(suffix);    final String[] s;    if (suffix != null) {      s=new String[5];      System.arraycopy(ip.split("\\.",-1),0,s,0,4);      s[4]=suffix;    } else {      s=ip.split("\\.",-1);    }    this.value=IPv4Address.IPv4Factory(s);    if (value == null) {      if (log.isDebugEnabled()) {        log.debug("not a valid IP: " + hostAddress);      }      throw new UnknownHostException("not a valid IP: " + hostAddress);    }    if (log.isDebugEnabled()) {      log.debug(value);      log.debug(byteLength());      log.debug(BytesUtil.toString(value.getBytes()));    }  } else {    if (log.isDebugEnabled()) {      log.debug("not a valid IP: " + hostAddress);    }    throw new UnknownHostException("Did not match REGEX - not a valid IP: " + hostAddress);  }}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  public static int reflectionHashCode(int initialNonZeroOddNumber,int multiplierNonZeroOddNumber,Object object,boolean testTransients,Class reflectUpToClass,String[] excludeFields){  if (object == null) {    throw new IllegalArgumentException("The object to build a hash code for must not be null");  }  HashCodeBuilder builder=new HashCodeBuilder(initialNonZeroOddNumber,multiplierNonZeroOddNumber);  Class clazz=object.getClass();  reflectionAppend(object,clazz,builder,testTransients,excludeFields);  while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {    clazz=clazz.getSuperclass();    reflectionAppend(object,clazz,builder,testTransients,excludeFields);  }  return builder.toHashCode();}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public boolean onHitTarget(EntityLivingBase entity){  entity.setArrowCountInEntity(((EntityLivingBase)entity).getArrowCountInEntity() + 1);  worldObj.playSoundAtEntity(this,"random.bowhit",1.0F,1.2F / (rand.nextFloat() * 0.2F + 0.9F));  return true;}  }
class C{  public void showAlertDialogDeleteAllNotes(MenuItem menuItem){  alertDialogDeleteAll.show();}  }
class C{  public static String of(String[] headers,String[][] data){  if (headers == null)   throw new NullPointerException("headers == null");  if (headers.length == 0)   throw new IllegalArgumentException("Headers must not be empty.");  if (data == null)   throw new NullPointerException("data == null");  return new FlipTable(headers,data).toString();}  }
class C{  final int internalNextInt(int origin,int bound){  int r=mix32(nextSeed());  if (origin < bound) {    int n=bound - origin, m=n - 1;    if ((n & m) == 0)     r=(r & m) + origin; else     if (n > 0) {      for (int u=r >>> 1; u + m - (r=u % n) < 0; u=mix32(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix32(nextSeed());    }  }  return r;}  }
class C{  @Override public void onExitScope(){  Logger.d("Navigation scope exit");  dispatcher.kill();  scope=null;}  }
class C{  public static void createDocumentTypes(Properties ctx,int AD_Client_ID,SvrProcess sp,String trxName){  s_log.info("AD_Client_ID=" + AD_Client_ID);  String sql="SELECT rl.Value, rl.Name " + "FROM AD_Ref_List rl " + "WHERE rl.AD_Reference_ID=183"+ " AND rl.IsActive='Y' AND NOT EXISTS "+ " (SELECT * FROM C_DocType dt WHERE dt.AD_Client_ID=? AND rl.Value=dt.DocBaseType)";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      String name=rs.getString(2);      String value=rs.getString(1);      s_log.config(name + "=" + value);      MDocType dt=new MDocType(ctx,value,name,trxName);      if (dt.save()) {        if (sp != null)         sp.addLog(0,null,null,name); else         s_log.fine(name);      } else {        if (sp != null)         sp.addLog(0,null,null,"Not created: " + name); else         s_log.warning("Not created: " + name);      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }}  }
class C{  ConfProxyUtilDelSigningKey(){  super("confproxy-del-signing-key");  getOptions().addOption(PROXY_INSTANCE).addOption("k","key-id",true,"Id of the signing key to delete");}  }
class C{  public TextFormatter(){}  }
class C{  public static String stringFor(int n){switch (n) {case CU_JIT_MAX_REGISTERS:    return "CU_JIT_MAX_REGISTERS";case CU_JIT_THREADS_PER_BLOCK:  return "CU_JIT_THREADS_PER_BLOCK";case CU_JIT_WALL_TIME:return "CU_JIT_WALL_TIME";case CU_JIT_INFO_LOG_BUFFER:return "CU_JIT_INFO_LOG_BUFFER";case CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES:return "CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES";case CU_JIT_ERROR_LOG_BUFFER:return "CU_JIT_ERROR_LOG_BUFFER";case CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES:return "CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES";case CU_JIT_OPTIMIZATION_LEVEL:return "CU_JIT_OPTIMIZATION_LEVEL";case CU_JIT_TARGET_FROM_CUCONTEXT:return "CU_JIT_TARGET_FROM_CUCONTEXT";case CU_JIT_TARGET:return "CU_JIT_TARGET";case CU_JIT_FALLBACK_STRATEGY:return "CU_JIT_FALLBACK_STRATEGY";case CU_JIT_GENERATE_DEBUG_INFO:return "CU_JIT_GENERATE_DEBUG_INFO";case CU_JIT_LOG_VERBOSE:return "CU_JIT_LOG_VERBOSE";case CU_JIT_GENERATE_LINE_INFO:return "CU_JIT_GENERATE_LINE_INFO";case CU_JIT_CACHE_MODE:return "CU_JIT_CACHE_MODE";}return "INVALID CUjit_option: " + n;}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  public static Border createEtchedBorder(){  return sharedEtchedBorder;}  }
class C{  @Override public int compareTo(final Game g){  return date.compareTo(g.date);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:14.292 -0500",hash_original_method="5020D7570AC9675C7FDC286174BD125E",hash_generated_method="3307EC3ACAFF9D192A5DFA1BA6459FE9") public CallbackProxy(Context context,WebView w){  mContext=context;  mWebView=w;  mBackForwardList=new WebBackForwardList(this);}  }
class C{  private void addSolutionUsersToGroup(String groupName,Collection<PrincipalId> users) throws Exception {  throw new NotImplementedError("Adding solution users to a group is not yet implemented");}  }
class C{  protected void addFromEndpointPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Channel_fromEndpoint_feature"),getString("_UI_PropertyDescriptor_description","_UI_Channel_fromEndpoint_feature","_UI_Channel_type"),EipPackage.Literals.CHANNEL__FROM_ENDPOINT,true,false,true,null,null,null));}  }
class C{  private void notifyListener(){  Iterator<ChangeListener> iter;  iter=m_ChangeListeners.iterator();  while (iter.hasNext()) {    iter.next().stateChanged(new ChangeEvent(this));  }}  }
class C{  public Graph search(){  topGraphs.clear();  lookupArrows=new ConcurrentHashMap<>();  final List<Node> nodes=new ArrayList<>(variables);  if (adjacencies != null) {    adjacencies=GraphUtils.replaceNodes(adjacencies,nodes);  }  addRequiredEdges(graph);  if (initialGraph != null) {    graph.clear();    graph.transferNodesAndEdges(initialGraph);    graph=new EdgeListGraphSingleConnections(initialGraph);    initializeForwardEdgesFromExistingGraph(getVariables());    fes();  } else {    addRequiredEdges(graph);    if (!graph.getEdges().isEmpty()) {      initializeForwardEdgesFromExistingGraph(getVariables());      fes();    } else {      if (isHeuristicSpeedup()) {        graph=new EdgeListGraphSingleConnections(getVariables());        initializeForwardEdgesFromEmptyGraph(getVariables());        fes();      } else {        graph=new EdgeListGraphSingleConnections(getVariables());        setHeuristicSpeedup(true);        initializeForwardEdgesFromEmptyGraph(getVariables());        fes();        setHeuristicSpeedup(false);        initializeForwardEdgesFromExistingGraph(getVariables());        fes();      }    }  }  long start=System.currentTimeMillis();  score=0.0;  bes();  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - start;  this.logger.log("graph","\nReturning this graph: " + graph);  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.flush();  this.modelScore=score;  return graph;}  }
class C{  protected Object entryInitialFlow(){  LocalTypeSet ret=(LocalTypeSet)emptySet.clone();  return ret;}  }
class C{  public static void arrayCopy(int[][] src,int srcStartRow,int srcStartCol,int[][] dest,int destStartRow,int destStartCol,int rows,int cols){  for (int r=0; r < rows; r++) {    System.arraycopy(src[srcStartRow + r],srcStartCol,dest[destStartRow + r],destStartCol,cols);  }}  }
class C{  public static ArrayList svgHorizontalCoordinateArrayToUserSpace(Element element,String attrName,String valueStr,BridgeContext ctx){  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,element);  ArrayList values=new ArrayList();  StringTokenizer st=new StringTokenizer(valueStr,", ",false);  while (st.hasMoreTokens()) {    values.add(new Float(UnitProcessor.svgHorizontalCoordinateToUserSpace(st.nextToken(),attrName,uctx)));  }  return values;}  }
class C{  protected boolean checkLowTierGraph(StructuredGraph graph){  return true;}  }
class C{  public CorrectPredictionCondition(){}  }
class C{  public EqualsLayout(int gap){  this(RIGHT,gap);}  }
class C{  @Deprecated public void readObject(ObjectInputStream s) throws IOException {}  }
class C{  public boolean hasAvailableData() throws IOException {  if (this.bitsInBuffer > 0) {    return true;  }  return loadNextByteInBuffer() >= 0;}  }
class C{  public String commandTopic(String command){  if (command == null) {    command="+";  }  return cmdTopic.replace("{COMMAND}",command);}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  @Override public boolean hasNext(){  return current < len;}  }
class C{  public EducationalBackground degree(String degree){  this.degree=degree;  return this;}  }
class C{  protected void cleanupAfterExecution(){  restoreInputsInSymbolTable();}  }
class C{  public static Optional<String> createInputDialog(final Window owner,final String title,final String label){  final TextInputDialog dialog=new TextInputDialog();  dialog.setTitle(title);  dialog.setHeaderText(null);  dialog.setContentText(label);  dialog.initOwner(owner);  return dialog.showAndWait();}  }
class C{  public InternalStatisticsDisabledException(Throwable cause){  super(cause);}  }
class C{  public Observable(){  obs=new Vector();}  }
class C{  public boolean cancel(boolean mayInterruptIfRunning){  for (  Future<T> f : components)   if (!f.cancel(mayInterruptIfRunning))   return false;  return true;}  }
class C{  public void testImplicitCommit() throws Exception {  File logDir=prepareLogDir("testCommitVisibility");  DiskLog log=new DiskLog();  log.setLogDir(logDir.getAbsolutePath());  log.setReadOnly(false);  log.setFlushIntervalMillis(500);  log.prepare();  LogConnection conn=log.connect(false);  SimpleLogReader reader=new SimpleLogReader(log,LogConnection.FIRST,5);  new Thread(reader).start();  for (int i=0; i < 5; i++) {    THLEvent e=this.createTHLEvent(i);    conn.store(e,false);    boolean visible=reader.lastSeqno.waitSeqnoGreaterEqual(i,2000);    assertTrue("Event is visible: seqno=" + i,visible);  }  assertTrue("Reader is done",reader.waitFinish(1000));  if (reader.error != null) {    throw new Exception("Reader thread failed with exception after " + reader.eventsRead + " events",reader.error);  }  log.release();}  }
class C{  public synchronized void write(byte[] buf,int off,int len) throws IOException {  super.write(buf,off,len);  crc.update(buf,off,len);}  }
class C{  public NotificationChain basicSetInitSequence(Sequence newInitSequence,NotificationChain msgs){  Sequence oldInitSequence=initSequence;  initSequence=newInitSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_STATE__INIT_SEQUENCE,oldInitSequence,newInitSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void replaceTransaction(HGLiveHandle lHandle,final HGPersistentHandle pHandle,final Object atom,final HGHandle typeHandle){  Object newValue=atom;  if (atom instanceof HGValueLink)   newValue=((HGValueLink)atom).getValue();  HGPersistentHandle[] layout=store.getLink(pHandle);  HGPersistentHandle oldValueHandle=layout[1];  HGPersistentHandle oldTypeHandle=layout[0];  HGAtomType oldType=(HGAtomType)get(oldTypeHandle);  HGAtomType type=(HGAtomType)get(typeHandle);  Object oldValue=null;  if (lHandle != null)   oldValue=lHandle.getRef();  if (oldValue == null || oldValue == atom)   oldValue=rawMake(layout,oldType,pHandle);  idx_manager.maybeUnindex(oldTypeHandle.getPersistent(),oldType,pHandle,oldValue);  if (oldValue instanceof HGValueLink)   oldValue=((HGValueLink)oldValue).getValue();  if (oldValue instanceof HGAtomType) {    HGSearchResult<HGPersistentHandle> rs=null;    try {      rs=indexByType.find(pHandle);      if (rs.hasNext() && !(newValue instanceof HGAtomType))       throw new HGException("Attempt to replace a type atom " + pHandle + " with a non-empty instance set by an atom that is not a HyperGraph type.");      HGAtomType oldTypeValue=(HGAtomType)oldValue;      HGAtomType newTypeValue=(HGAtomType)newValue;      while (rs.hasNext())       morph((HGPersistentHandle)rs.next(),oldTypeValue,newTypeValue);    }  finally {      rs.close();    }  }  if (!oldTypeHandle.equals(typeHandle)) {    indexByType.removeEntry(getPersistentHandle(oldTypeHandle),pHandle);    indexByType.addEntry(getPersistentHandle(typeHandle),pHandle);  }  TypeUtils.releaseValue(HyperGraph.this,oldType,layout[1]);  if (newValue instanceof HGAtomType)   layout[1]=TypeUtils.storeValue(this,typeSystem.getSchema().fromRuntimeType(pHandle,(HGAtomType)newValue),type); else   layout[1]=TypeUtils.storeValue(this,newValue,type);  layout[0]=getPersistentHandle(typeHandle);  indexByValue.removeEntry(oldValueHandle,pHandle);  indexByValue.addEntry(layout[1],pHandle);  HGPersistentHandle[] newLayout;  if (atom instanceof HGLink) {    HGLink newLink=(HGLink)atom;    newLayout=new HGPersistentHandle[newLink.getArity() + 2];    HashSet<HGPersistentHandle> newTargets=new HashSet<HGPersistentHandle>();    for (int i=0; i < newLink.getArity(); i++) {      HGPersistentHandle target=getPersistentHandle(newLink.getTargetAt(i));      newLayout[2 + i]=target;      newTargets.add(target);    }    for (int i=2; i < layout.length; i++)     if (!newTargets.remove(layout[i]))     removeFromIncidenceSet(layout[i],pHandle);    for (    HGPersistentHandle newTarget : newTargets)     updateTargetIncidenceSet(newTarget,pHandle);  } else {    newLayout=new HGPersistentHandle[2];    for (int i=2; i < layout.length; i++)     removeFromIncidenceSet(layout[i],pHandle);  }  newLayout[0]=layout[0];  newLayout[1]=layout[1];  store.store(pHandle,newLayout);  idx_manager.maybeIndex(getPersistentHandle(typeHandle),type,pHandle,atom);  if (atom instanceof HGGraphHolder)   ((HGGraphHolder)atom).setHyperGraph(this);  if (lHandle != null)   lHandle=cache.atomRefresh(lHandle,atom,true);  if (atom instanceof HGHandleHolder)   ((HGHandleHolder)atom).setAtomHandle(lHandle != null ? lHandle : pHandle);}  }
class C{  protected void load(){  if (!loaded) {    try {      update();    } catch (    AcmeRetryAfterException ex) {    }catch (    AcmeException ex) {      throw new AcmeProtocolException("Could not load lazily",ex);    }  }}  }
class C{  private boolean updatedFromBefore(String version){  return Version.compareVersions(settings.getString("currentVersion"),version) == 1;}  }
class C{  public List<Long> selectResendMessage() throws ServiceException {  try {    return messageBoxDao.selectMessageBox(new Date());  } catch (  DaoException e) {    throw new ServiceException(e);  }}  }
class C{  public GuildBanAddHandler(ImplDiscordAPI api){  super(api,true,"GUILD_BAN_ADD");}  }
class C{  public static String useLnfForPlatform(){  String lnfClassName=null;  if (OperatingSystem.isMacOs()) {    lnfClassName=UIManager.getSystemLookAndFeelClassName();  } else   if (OperatingSystem.isWindows()) {    lnfClassName=WindowsLookAndFeel.class.getName();  } else {    String xdgCurrentDesktop=System.getenv("XDG_CURRENT_DESKTOP");    if ("Unity".equalsIgnoreCase(xdgCurrentDesktop) || "XFCE".equalsIgnoreCase(xdgCurrentDesktop) || "GNOME".equalsIgnoreCase(xdgCurrentDesktop)|| "X-Cinnamon".equalsIgnoreCase(xdgCurrentDesktop)|| "LXDE".equalsIgnoreCase(xdgCurrentDesktop)) {      lnfClassName=UIManager.getSystemLookAndFeelClassName();    } else {      lnfClassName=Plastic3DLookAndFeel.class.getName();    }  }  useLnf(lnfClassName);  return lnfClassName;}  }
class C{  public void store(long value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void testBug80615() throws Exception {  final int prepStmtCacheSize=5;  final int maxPrepStmtCount=25;  final int testRepetitions=maxPrepStmtCount + 5;  int maxPrepStmtCountOri=-1;  try {    Connection checkConn=getConnectionWithProps("useServerPrepStmts=true");    PreparedStatement checkPstmt=checkConn.prepareStatement("SELECT 1");    assertTrue("Failed to create a server prepared statement possibly because there are too many active prepared statements on server already.",checkPstmt instanceof ServerPreparedStatement);    checkPstmt.close();    this.rs=this.stmt.executeQuery("SELECT @@GLOBAL.max_prepared_stmt_count");    this.rs.next();    maxPrepStmtCountOri=this.rs.getInt(1);    this.stmt.execute("SET GLOBAL max_prepared_stmt_count = " + maxPrepStmtCount);    this.stmt.execute("FLUSH STATUS");    for (int i=1; i <= prepStmtCacheSize + 2; i++) {      checkPstmt=checkConn.prepareStatement("SELECT " + i);      assertTrue("Test ABORTED because the server doesn't allow preparing at least " + (prepStmtCacheSize + 2) + " more statements.",checkPstmt instanceof ServerPreparedStatement);    }    checkConn.close();    boolean closeStmt=false;    boolean useCache=false;    boolean poolable=false;    do {      final String testCase=String.format("Case: [Close STMTs: %s, Use cache: %s, Poolable: %s ]",closeStmt ? "Y" : "N",useCache ? "Y" : "N",poolable ? "Y" : "N");      System.out.println();      System.out.println(testCase);      System.out.println("********************************************************************************");      createTable("testBug80615","(id INT)");      final Properties props=new Properties();      props.setProperty("rewriteBatchedStatements","true");      props.setProperty("useServerPrepStmts","true");      props.setProperty("cachePrepStmts",Boolean.toString(useCache));      if (useCache) {        props.setProperty("prepStmtCacheSize",String.valueOf(prepStmtCacheSize));      }      final Connection testConn=getConnectionWithProps(props);      final Statement checkStmt=testConn.createStatement();      PreparedStatement testPstmt1=testConn.prepareStatement("INSERT INTO testBug80615 VALUES (?)");      assertTrue(testCase,testPstmt1 instanceof ServerPreparedStatement);      ((StatementImpl)testPstmt1).setPoolable(poolable);      testPstmt1.setInt(1,100);      testPstmt1.addBatch();      testPstmt1.setInt(1,200);      testPstmt1.addBatch();      int prepCount=1;      int expectedPrepCount=prepCount;      int expectedExecCount=0;      int expectedCloseCount=0;      testBug80615CheckComStmtStatus(prepCount,true,testCase,checkStmt,expectedPrepCount,expectedExecCount,expectedCloseCount);      boolean isSPS=true;      do {        PreparedStatement testPstmt2=testConn.prepareStatement("INSERT INTO testBug80615 VALUES (" + prepCount + " + ?)");        prepCount++;        isSPS=testPstmt2 instanceof ServerPreparedStatement;        if (closeStmt) {          assertTrue(testCase,isSPS);        } else         if (prepCount > maxPrepStmtCount) {          assertFalse(testCase,isSPS);        } else         if (prepCount <= prepStmtCacheSize + 2) {          assertTrue(testCase,isSPS);        }        ((StatementImpl)testPstmt2).setPoolable(poolable);        testPstmt2.setInt(1,0);        testPstmt2.execute();        if (isSPS) {          expectedPrepCount++;          expectedExecCount++;        }        if (closeStmt) {          testPstmt2.close();          if (isSPS) {            if (useCache && poolable && (prepCount - 1) > prepStmtCacheSize) {              expectedCloseCount++;            } else             if (!useCache || !poolable) {              expectedCloseCount++;            }          }        }        testBug80615CheckComStmtStatus(prepCount,isSPS,testCase,checkStmt,expectedPrepCount,expectedExecCount,expectedCloseCount);      } while (prepCount < testRepetitions && isSPS);      if (closeStmt) {        assertEquals(testCase,testRepetitions,prepCount);      } else {        assertTrue(testCase,prepCount > prepStmtCacheSize + 2);        assertTrue(testCase,prepCount <= maxPrepStmtCount + 1);      }      testPstmt1.executeBatch();      testPstmt1.close();      testConn.close();    } while ((closeStmt=!closeStmt) || (useCache=!useCache) || (poolable=!poolable));  }  finally {    if (maxPrepStmtCountOri >= 0) {      this.stmt.execute("SET GLOBAL max_prepared_stmt_count = " + maxPrepStmtCountOri);      this.stmt.execute("FLUSH STATUS");    }  }}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  private String addEnableImageAccessStep(Workflow workflow,ProtectionSystem rpSystem,Map<URI,Integer> snapshots,String waitFor) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method enableImageAccessExecuteMethod=new Workflow.Method(METHOD_ENABLE_IMAGE_ACCESS_STEP,rpSystem.getId(),snapshots);  Workflow.Method enableImageAccessExecutionRollbackMethod=new Workflow.Method(METHOD_ENABLE_IMAGE_ACCESS_ROLLBACK_STEP,rpSystem.getId(),snapshots,false);  workflow.createStep(STEP_ENABLE_IMAGE_ACCESS,"Enable image access subtask for export group: " + snapshots.keySet(),waitFor,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),enableImageAccessExecuteMethod,enableImageAccessExecutionRollbackMethod,stepId);  _log.info(String.format("Added enable image access step [%s] in workflow",stepId));  return STEP_ENABLE_IMAGE_ACCESS;}  }
class C{  public final void addAllHelperTexts(@NonNull final Collection<CharSequence> helperTexts){  ensureNotNull(helperTexts,"The collection may not be null");  for (  CharSequence helperText : helperTexts) {    addHelperText(helperText);  }}  }
class C{  public void sendForward(final WorkflowAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }  model.getProcessAnnotations(anno.getProcess()).sendForward(anno);  fireProcessUpdate(anno);  model.fireAnnotationMiscChanged(anno);}  }
class C{  public static boolean isClassAvailableForProject(@NotNull Project project,@NotNull String className){  PsiClass classInModule=JavaPsiFacade.getInstance(project).findClass(className,new EverythingGlobalScope(project));  return classInModule != null;}  }
class C{  public Date(){  super(DTG_REGEX,false,1.0);}  }
class C{  GeneralRange<T> reverse(){  GeneralRange<T> result=reverse;  if (result == null) {    result=new GeneralRange<T>(Ordering.from(comparator).reverse(),hasUpperBound,getUpperEndpoint(),getUpperBoundType(),hasLowerBound,getLowerEndpoint(),getLowerBoundType());    result.reverse=this;    return this.reverse=result;  }  return result;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYBoxAndWhiskerRenderer)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  XYBoxAndWhiskerRenderer that=(XYBoxAndWhiskerRenderer)obj;  if (this.boxWidth != that.getBoxWidth()) {    return false;  }  if (!PaintUtilities.equal(this.boxPaint,that.boxPaint)) {    return false;  }  if (!PaintUtilities.equal(this.artifactPaint,that.artifactPaint)) {    return false;  }  if (this.fillBox != that.fillBox) {    return false;  }  return true;}  }
class C{  public static List<String> parseModsList(String text){  int start=text.indexOf(":") + 1;  List<String> modsList=new ArrayList<>();  if (start > 1 && text.length() > start) {    String mods=text.substring(start);    if (!mods.trim().isEmpty()) {      String[] modsArray=mods.split(",");      for (      String mod : modsArray) {        modsList.add(mod.trim());      }    }  }  return modsList;}  }
class C{  protected void pasteSelectedBean(){  if (Debug.debugging("beanbox"))   Debug.output("Enter> pasteSelectedBean");  if (serBean == null) {    clearSelection();    if (Debug.debugging("beanbox"))     Debug.output("Exit> pasteSelectedBean");    return;  }  BeanInfo beanInfo=(BeanInfo)beanInfoMap.get(selectedBean.getClass().getName());  if (beanInfo == null) {    System.out.println("ERROR> BBDnDC::pasteSelectedBean: " + "no cached BeanInfo found for bean " + selectedBean);    clearSelection();    return;  }  if (cutBean != null) {    selectedBeanBox.removeBean(selectedBean);  }  Object deserBean=null;  try {    ByteArrayInputStream bais=new ByteArrayInputStream(serBean.toByteArray());    ObjectInputStream ois=new ObjectInputStream(bais);    deserBean=ois.readObject();  } catch (  Exception e) {    e.printStackTrace();    clearSelection();    if (Debug.debugging("beanbox"))     Debug.output("Exit> pasteSelectedBean");    return;  }  transferData=new Vector();  transferData.add(deserBean);  transferData.add(beanInfo);  transferData.add(new Boolean(false));  dropLocation=selectedBeanLocation;  showPopUp(selectedBeanLayer);  cutBean=null;  if (Debug.debugging("beanbox"))   Debug.output("Exit> pasteSelectedBean");}  }
class C{  private StringUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public synchronized void statusMessage(String message){  m_StatusLab.setText(message);}  }
class C{  public synchronized void clear(){  Object[] theSockets=sockets.toArray();  sockets.clear();  for (int i=0; i < theSockets.length; i++) {    Socket socket=((Socket)theSockets[i]);    if (socket != null) {      try {        socket.close();      } catch (      IOException e) {      }    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CONSTRAINT___ANONYMOUS_CONSTRAINT_11:    return anonymous_constraint_1_1 != null && !anonymous_constraint_1_1.isEmpty();case UmplePackage.CONSTRAINT___CONSTRAINT_BODY_1:  return constraintBody_1 != null && !constraintBody_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public String hoeffdingTieThresholdTipText(){  return "Theshold below which a split will be forced to break ties.";}  }
class C{  public void generateFileList(File node){  if (node.isFile()) {    fileList.add(generateZipEntry(node.getAbsoluteFile().toString()));  }  if (node.isDirectory()) {    String[] subNote=node.list();    for (    String filename : subNote) {      generateFileList(new File(node,filename));    }  }}  }
class C{  private void loadTrl(){  if (Env.isBaseLanguage(getCtx(),"AD_Workflow") || get_ID() == 0)   return;  final String sql="SELECT Name, Description, Help FROM AD_WF_Node_Trl" + " WHERE AD_WF_Node_ID=? AND AD_Language=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,get_ID());    pstmt.setString(2,Env.getAD_Language(getCtx()));    rs=pstmt.executeQuery();    if (rs.next()) {      m_name_trl=rs.getString(1);      m_description_trl=rs.getString(2);      m_help_trl=rs.getString(3);      m_translated=true;    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("Trl=" + m_translated);}  }
class C{  public Metadata.Property.Builder clear(){  Metadata_Property_Builder _defaults=new Metadata.Property.Builder();  type=_defaults.type;  boxedType=_defaults.boxedType;  name=_defaults.name;  capitalizedName=_defaults.capitalizedName;  allCapsName=_defaults.allCapsName;  getterName=_defaults.getterName;  codeGenerator=_defaults.codeGenerator;  fullyCheckedCast=_defaults.fullyCheckedCast;  accessorAnnotations.clear();  _unsetProperties.clear();  _unsetProperties.addAll(_defaults._unsetProperties);  return (Metadata.Property.Builder)this;}  }
class C{  public JSONException(final Throwable cause){  super(cause.getMessage(),cause);}  }
class C{  public Builder failListener(@NonNull OnExternalResourcesLoadFailedListener listener){  if (null == listener) {    throw new IllegalArgumentException("Listener must not be null.");  }  if (null != this.listener) {    throw new IllegalStateException("Listener already set.");  }  this.listener=listener;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void visitAttribute(final Attribute attr){  buf.setLength(0);  buf.append(tab).append("ATTRIBUTE ");  appendDescriptor(-1,attr.type);  if (attr instanceof Textifiable) {    ((Textifiable)attr).textify(buf,null);  } else {    buf.append(" : unknown\n");  }  text.add(buf.toString());}  }
class C{  public void reinitializeContacts(final EvolutionState state){  return;}  }
class C{  public boolean isCumulative(){  return cumulative;}  }
class C{  private IsEquivalent(final Collection<T> lhs){  this.lhs=lhs;}  }
class C{  public boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    int position=lookForSelectablePosition(0,true);    if (position >= 0) {      mLayoutMode=LAYOUT_FORCE_TOP;      invokeOnItemScrollListener();      moved=true;    }  } else   if (direction == FOCUS_DOWN) {    int position=lookForSelectablePosition(mItemCount - 1,true);    if (position >= 0) {      mLayoutMode=LAYOUT_FORCE_BOTTOM;      invokeOnItemScrollListener();    }    moved=true;  }  if (moved && !awakenScrollBars()) {    awakenScrollBars();    invalidate();  }  return moved;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("hashAlg: ");  buffer.append(hashAlg);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("mgf: ");  buffer.append(mgf);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("source: ");  buffer.append(source);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pSourceData: ");  buffer.append(pSourceData.toString());  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pSourceDataLen: ");  buffer.append(Functions.toHexString(pSourceData));  return buffer.toString();}  }
class C{  protected void assertEqualDocuments(final String actual,final String expected){  try {    JsonApiDocument expectedDoc=jsonApiMapper.readJsonApiDocument(expected);    JsonApiDocument actualDoc=jsonApiMapper.readJsonApiDocument(actual);    assertEquals(actualDoc,expectedDoc,"\n" + actual + "\n"+ expected+ "\n");  } catch (  IOException e) {    fail("\n" + actual + "\n"+ expected+ "\n",e);  }}  }
class C{  protected GphotoEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  this.delegate=new GphotoDataImpl(this);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void postEvent(processing.event.Event pe){  eventQueue.add(pe);  if (!looping) {    dequeueEvents();  }}  }
class C{  public boolean visit(Block node){  return true;}  }
class C{  public SnackbarBuilder manualDismissCallback(SnackbarManualDismissCallback callback){  callbackBuilder.manualDismissCallback(callback);  return this;}  }
class C{  public void addItem(WorkListItem item){  workList.add(item);}  }
class C{  boolean repliedOK(){  return this.replyCode == DLockQueryReplyMessage.OK;}  }
class C{  public final int maxBag(){  double max;  int maxIndex;  int i;  max=0;  maxIndex=-1;  for (i=0; i < m_perBag.length; i++) {    if (Utils.grOrEq(m_perBag[i],max)) {      max=m_perBag[i];      maxIndex=i;    }  }  return maxIndex;}  }
class C{  public boolean containsValue(Object value,boolean identity){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return true;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return true;  } else   if (identity) {    if (value == zeroValue)     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return true;  } else {    if (hasZeroValue && value.equals(zeroValue))     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return true;  }  return false;}  }
class C{  private int height(TreeNode node,List<List<Integer>> res){  if (null == node)   return -1;  int level=1 + Math.max(height(node.left,res),height(node.right,res));  if (res.size() == level) {    res.add(new ArrayList<>());  }  res.get(level).add(node.val);  return level;}  }
class C{  public DisconnectContainerFromNetworkParams withDisconnectContainer(@NotNull DisconnectContainer disconnectContainer){  requireNonNull(disconnectContainer);  this.disconnectContainer=disconnectContainer;  return this;}  }
class C{  public boolean releaseUpgradeLock(){  log.info("Strat releasing upgrade Lock ...");  boolean flag=false;  String leader=coordinatorClientExt.getUpgradeLockOwner(upgradeLockId);  if (leader != null) {    log.info("Now upgrade lock belongs to: {}",leader);  }  try {    flag=coordinatorClientExt.releasePersistentLock(upgradeLockId);  } catch (  Exception e) {    log.error("Fail to release upgrade lock! {}",e);  }  log.info("Release upgrade lock: {}",flag);  return flag;}  }
class C{  protected void fireOptionSelected(JFileChooser pane,int option){  SheetEvent sheetEvent=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == SheetListener.class) {      if (sheetEvent == null) {        sheetEvent=new SheetEvent(this,pane,option,null);      }      ((SheetListener)listeners[i + 1]).optionSelected(sheetEvent);    }  }}  }
class C{  public void myMethod(){  return "";}  }
class C{  public String message(){  return message;}  }
class C{  public boolean shouldReverse(String token){  int posQ=token.indexOf('?');  int posA=token.indexOf('*');  if (posQ == -1 && posA == -1) {    return false;  }  int pos;  int lastPos;  int len=token.length();  lastPos=token.lastIndexOf('?');  pos=token.lastIndexOf('*');  if (pos > lastPos)   lastPos=pos;  if (posQ != -1) {    pos=posQ;    if (posA != -1) {      pos=Math.min(posQ,posA);    }  } else {    pos=posA;  }  if (len - lastPos < minTrailing) {    return false;  }  if (posQ != -1 && posQ < maxPosQuestion) {    return true;  }  if (posA != -1 && posA < maxPosAsterisk) {    return true;  }  if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {    return true;  }  return false;}  }
class C{  private void forceExpectedTokensReplication(){  Map<String,String> expected=getExpectedTokens();  Map<String,String> clone=new HashMap<String,String>();  clone.putAll(expected);  session.setAttribute(EXPECTED_TOKENS_ATT,clone);}  }
class C{  protected void populateVcenterData(Vcenter vcenter,VcenterParam param){  vcenter.setLabel(param.getName());  vcenter.setOsVersion(param.getOsVersion());  vcenter.setUsername(param.getUserName());  vcenter.setPassword(param.getPassword());  vcenter.setIpAddress(param.findIpAddress());  vcenter.setPortNumber(param.getPortNumber());  vcenter.setUseSSL(param.getUseSsl());  vcenter.setCascadeTenancy(param.getCascadeTenancy());}  }
class C{  public Staff(String name,String address,String phone,String email,int office,double salary,String title){  super(name,address,phone,email,office,salary);  this.title=title;}  }
class C{  public static <A,B>Pair<A,B> pairify(A first,B second){  return new Pair<A,B>(first,second);}  }
class C{  public static CTagManager loadTagManager(final AbstractSQLProvider provider,final TagType type) throws CouldntLoadDataException {  Preconditions.checkNotNull(type,"IE00567: Tag type argument can't be null");  final CConnection connection=provider.getConnection();  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.TAGS_TABLE)) {    final CTag rootTag=new CTag(0,"Root Node","",type,provider);    return new CTagManager(new Tree<CTag>(new TreeNode<CTag>(rootTag)),type,provider);  }  final String query=String.format("select id, parent_id, name, description from %s where type = '%s'",CTableNames.TAGS_TABLE,PostgreSQLTagFunctions.tagToString(type));  try {    final ResultSet resultSet=connection.executeQuery(query,true);    try {      final HashMap<Integer,Pair<TreeNode<CTag>,Integer>> treeNodes=new HashMap<Integer,Pair<TreeNode<CTag>,Integer>>();      final CTag rootTag=new CTag(0,"Root Node","",type,provider);      final TreeNode<CTag> rootTreeNode=new TreeNode<CTag>(rootTag);      treeNodes.put(0,new Pair<TreeNode<CTag>,Integer>(rootTreeNode,-1));      while (resultSet.next()) {        final int tagId=resultSet.getInt("id");        final int parentId=resultSet.getInt("parent_id");        final TreeNode<CTag> treeNode=new TreeNode<CTag>(new CTag(tagId,PostgreSQLHelpers.readString(resultSet,"name"),PostgreSQLHelpers.readString(resultSet,"description"),type,provider));        final Pair<TreeNode<CTag>,Integer> pair=new Pair<TreeNode<CTag>,Integer>(treeNode,parentId);        treeNodes.put(tagId,pair);      }      for (      final Entry<Integer,Pair<TreeNode<CTag>,Integer>> e : treeNodes.entrySet()) {        if (e.getKey() == 0) {          continue;        }        final TreeNode<CTag> child=e.getValue().first();        final TreeNode<CTag> parent=treeNodes.get(e.getValue().second()).first();        child.setParent(parent);        parent.addChild(child);      }      return new CTagManager(new Tree<CTag>(rootTreeNode),type,provider);    }  finally {      resultSet.close();    }  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  private AppUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public synchronized void onSocketTimeout(){  sockTimeoutsCnt++;}  }
class C{  public Connection borrowConnection(ServerLocation server,long acquireTimeout,boolean onlyUseExistingCnx) throws AllConnectionsInUseException, NoAvailableServersException {  lock.lock();  try {    if (shuttingDown) {      throw new PoolCancelledException();    }    for (Iterator itr=availableConnections.iterator(); itr.hasNext(); ) {      PooledConnection nextConnection=(PooledConnection)itr.next();      try {        nextConnection.activate();        if (nextConnection.getServer().equals(server)) {          itr.remove();          return nextConnection;        }        nextConnection.passivate(false);      } catch (      ConnectionDestroyedException ex) {      }      if (nextConnection.shouldDestroy()) {        itr.remove();      }    }    if (onlyUseExistingCnx) {      throw new AllConnectionsInUseException();    }    connectionCount++;  }  finally {    lock.unlock();  }  PooledConnection connection=null;  try {    Connection plainConnection=connectionFactory.createClientToServerConnection(server,false);    connection=addConnection(plainConnection);  } catch (  GemFireSecurityException e) {    throw new ServerOperationException(e);  } finally {    if (connection == null) {      lock.lock();      try {        --connectionCount;        if (connectionCount < minConnections) {          startBackgroundPrefill();        }      }  finally {        lock.unlock();      }    }  }  if (connection == null) {    throw new ServerConnectivityException("Could not create a new connection to server " + server);  }  return connection;}  }
class C{  public void lineColor(int rgb){  _lineColor=rgb;}  }
class C{  public static boolean areTypesEqual(TypeElement typeElement1,TypeElement typeElement2){  return typeElement1.getQualifiedName().equals(typeElement2.getQualifiedName());}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK) {    show_existDialog();    return false;  } else {    return true;  }}  }
class C{  public int stepToOuterScreenEvent(){  FormIndex index=stepIndexOut(getFormIndex());  int currentEvent=getEvent();  while (index != null && getEvent(index) == FormEntryController.EVENT_GROUP) {    index=stepIndexOut(index);  }  if (index == null) {    jumpToIndex(FormIndex.createBeginningOfFormIndex());  } else {    if (currentEvent == FormEntryController.EVENT_REPEAT) {      jumpToIndex(index);    } else {      index=stepIndexOut(index);      if (index == null) {        jumpToIndex(FormIndex.createBeginningOfFormIndex());      } else {        jumpToIndex(index);      }    }  }  return getEvent();}  }
class C{  public boolean removeLocalEventListener(IgnitePredicate<? extends Event> lsnr,@Nullable int... types){  return removeLocalEventListener(new UserListenerWrapper(lsnr),types);}  }
class C{  public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void initialize(String pname,Scheduler scheduler,ClassLoadHelper classLoadHelper) throws SchedulerException {  this.name=pname;  scheduler.getListenerManager().addJobListener(this,EverythingMatcher.allJobs());}  }
class C{  public void init(Connection conn,String schemaName,String triggerName,String tableName,boolean before,int type) throws SQLException {  this.init(conn,triggerName,schemaName,tableName);}  }
class C{  @Override public void clear(){  removeAllElements();}  }
class C{  public void pauseSystemAsync(final String deploymentId,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/pause_system",getBasePath(),deploymentId);  createObjectAsync(path,null,responseCallback);}  }
class C{  private boolean hasTripleDbVersionsInFederation(String targetVersion){  Set<String> allSchemaVersions=new HashSet<>();  allSchemaVersions.add(VdcUtil.getDbSchemaVersion(targetVersion));  List<URI> vdcIds=dbClient.queryByType(VirtualDataCenter.class,true);  List<URI> vdcVersionIds=dbClient.queryByType(VdcVersion.class,true);  List<VdcVersion> vdcVersions=dbClient.queryObject(VdcVersion.class,vdcVersionIds);  Map<URI,VdcVersion> vdcIdVdcVersionMap=new HashMap<>();  for (  VdcVersion geoVersion : vdcVersions) {    vdcIdVdcVersionMap.put(geoVersion.getVdcId(),geoVersion);  }  for (  URI vdcId : vdcIds) {    if (vdcIdVdcVersionMap.containsKey(vdcId)) {      String schemaVersion=vdcIdVdcVersionMap.get(vdcId).getVersion();      log.info("Get db schema version {} on {}",schemaVersion,vdcId);      allSchemaVersions.add(schemaVersion);    } else {      log.info("Can not get db schema version on {}, will use default version instead",vdcId);      allSchemaVersions.add(DbConfigConstants.DEFAULT_VDC_DB_VERSION);    }  }  log.info("Current geodb schema versions in federation {}",allSchemaVersions);  return allSchemaVersions.size() > 2;}  }
class C{  static protected TestSuite filterOutTests(final TestSuite suite1,final String name){  final TestSuite suite2=new TestSuite(suite1.getName());  final Enumeration<Test> e=suite1.tests();  while (e.hasMoreElements()) {    final Test aTest=e.nextElement();    if (aTest instanceof TestSuite) {      final TestSuite aTestSuite=(TestSuite)aTest;      if (!aTestSuite.getName().equals(name)) {        suite2.addTest(filterOutTests(aTestSuite,name));      }    } else {      suite2.addTest(aTest);    }  }  return suite2;}  }
class C{  protected void addContent(Group bg,OMGraphicHandlerLayer layer,double baselineHeight){  Debug.message("3d","LayerMapContent: putting layer " + layer.getName() + " graphics on the map.");  addTo(bg,OMGraphicUtil.createShape3D(layer.getList(),baselineHeight));}  }
class C{  public String toString(){  return value.toString();}  }
class C{  private static <T>BinaryOperator<T> throwingMerger(){  return null;}  }
class C{  static boolean removeAllImpl(Set<?> set,Iterator<?> iterator){  boolean changed=false;  while (iterator.hasNext()) {    changed|=set.remove(iterator.next());  }  return changed;}  }
class C{  public SimpleHttpOperationInvoker(final Gfsh gfsh,final String baseUrl,Map<String,String> securityProperties){  super(gfsh,baseUrl,securityProperties);}  }
class C{  protected void extendSignatureTag() throws DSSException {  assertExtendSignaturePossible();  ensureUnsignedProperties();  ensureUnsignedSignatureProperties();  ensureSignedDataObjectProperties();  if (!xadesSignature.hasTProfile() || XAdES_BASELINE_T.equals(params.getSignatureLevel())) {    final TimestampParameters signatureTimestampParameters=params.getSignatureTimestampParameters();    final String canonicalizationMethod=signatureTimestampParameters.getCanonicalizationMethod();    final byte[] canonicalisedValue=xadesSignature.getSignatureTimestampData(null,canonicalizationMethod);    final DigestAlgorithm timestampDigestAlgorithm=signatureTimestampParameters.getDigestAlgorithm();    final byte[] digestValue=DSSUtils.digest(timestampDigestAlgorithm,canonicalisedValue);    createXAdESTimeStampType(SIGNATURE_TIMESTAMP,canonicalizationMethod,digestValue);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Contribution(NondominatedPopulation referenceSet){  this(referenceSet,(EpsilonBoxDominanceComparator)null);}  }
class C{  private Type(final int sort){  this(sort,null,0,1);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  @Override public boolean isAllowedToInviteParticipants() throws RemoteException {  try {    if (!isGroupChatCapableOfReceivingParticipantInvitations()) {      return false;    }    if (!isAllowedToInviteAdditionalParticipants(1)) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot invite participants to group chat with group chat Id '" + mChatId + "' as max number of participants has been reached already.");      }      return false;    }    return true;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void throwUsernamePasswordStyleException(final Throwable cause) throws InvalidOptionValueException {  final char preferredPrefix=OptionsMap.getPreferredOptionPrefix();  final String causeMessage=(cause != null) ? cause.getLocalizedMessage() : "";  final String messageFormat=Messages.getString("UsernamePasswordValueOption.LoginHelpFormat");  final String message=MessageFormat.format(messageFormat,causeMessage,getMatchedAlias(),preferredPrefix);  throw new InvalidOptionValueException(message);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public RenameRefactoring(RenameProcessor processor){  super(processor);  Assert.isNotNull(processor);  fProcessor=processor;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_arg0)   m_arg0.fixupVariables(vars,globalsSize);}  }
class C{  public void reindexScriptSteps(){  int index=1;  for (  ScriptStep step : steps) {    step.setStepIndex(index);    index++;  }}  }
class C{  public Set<String> addContent(String variable,boolean value){  if (!paused) {    curState.addToState(new Assignment(variable,value));    return update();  } else {    log.info("system is paused, ignoring " + variable + "="+ value);    return Collections.emptySet();  }}  }
class C{  public AlgorithmInitializationException(Algorithm algorithm,Throwable cause){  super(algorithm,cause);}  }
class C{  public void removePEPListener(PEPListener pepListener){synchronized (pepListeners) {    pepListeners.remove(pepListener);  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  public void instantiate(){  String nameT=namePrefix + "T" + nameDivider+ output;  String nameC=namePrefix + "C" + nameDivider+ output;  RouteManager rm=InstanceManager.getDefault(jmri.RouteManager.class);  Route rt=rm.getBySystemName(nameT);  if (rt != null) {    rt.deActivateRoute();    rm.deleteRoute(rt);  }  Route rc=rm.getBySystemName(nameC);  if (rc != null) {    rc.deActivateRoute();    rm.deleteRoute(rc);  }  rt=new DefaultRoute(nameT);  rc=new DefaultRoute(nameC);  rt.addSensorToRoute(sensor,invert ? Route.ONINACTIVE : Route.ONACTIVE);  rc.addSensorToRoute(sensor,!invert ? Route.ONINACTIVE : Route.ONACTIVE);  if (!veto.equals("")) {    rt.addSensorToRoute(veto,Route.VETOACTIVE);    rc.addSensorToRoute(veto,Route.VETOACTIVE);  }  rt.addOutputTurnout(output,Turnout.THROWN);  rc.addOutputTurnout(output,Turnout.CLOSED);  rt.activateRoute();  rc.activateRoute();  rm.register(rt);  rm.register(rc);}  }
class C{  public static int deleteInventoryLineMA(int M_InventoryLine_ID,String trxName){  String sql="DELETE FROM M_InventoryLineMA ma WHERE EXISTS " + "(SELECT * FROM M_InventoryLine l WHERE l.M_InventoryLine_ID=ma.M_InventoryLine_ID" + " AND M_InventoryLine_ID=" + M_InventoryLine_ID + ")";  return DB.executeUpdate(sql,trxName);}  }
class C{  protected void printAttributeSummary(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  String str="";  if (numericPredictor) {    str+=" numeric";  }  if (nominalPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" nominal";  }  if (stringPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" string";  }  if (datePredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" date";  }  if (relationalPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" relational";  }  str+=" predictors)";switch (classType) {case Attribute.NUMERIC:    str=" (numeric class," + str;  break;case Attribute.NOMINAL:str=" (nominal class," + str;break;case Attribute.STRING:str=" (string class," + str;break;case Attribute.DATE:str=" (date class," + str;break;case Attribute.RELATIONAL:str=" (relational class," + str;break;}print(str);}  }
class C{  public static Object evaluate(Object context,Object self,String expr,List<String> engineConfigs) throws CWLExpressionException {  String trimmedExpr=StringUtils.trim(expr);  if (trimmedExpr.startsWith("$")) {    trimmedExpr=trimmedExpr.substring(1);  }  String function=trimmedExpr;  if (trimmedExpr.startsWith("{")) {    function="(function()%expr)()";    function=function.replace("%expr",trimmedExpr);  }  Context cx=Context.enter();  cx.setOptimizationLevel(OPTIMIZATION_LEVEL);  cx.setMaximumInterpreterStackDepth(MAX_STACK_DEPTH);  cx.setClassShutter(new CWLExpressionDenyAllClassShutter());  try {    Scriptable globalScope=cx.initStandardObjects();    if (engineConfigs != null) {      for (int i=0; i < engineConfigs.size(); i++) {        Reader engineConfigReader=new StringReader(engineConfigs.get(i));        cx.evaluateReader(globalScope,engineConfigReader,"engineConfig_" + i + ".js",1,null);      }    }    putToScope(EXPR_CONTEXT_NAME,context,cx,globalScope);    putToScope(EXPR_SELF_NAME,self,cx,globalScope);    Scriptable resultScope=cx.newObject(globalScope);    resultScope.setPrototype(globalScope);    resultScope.setParentScope(globalScope);    Object result=cx.evaluateString(resultScope,function,"script",1,null);    if (result == null || result instanceof Undefined) {      return null;    }    Object wrappedResult=Context.javaToJS(result,globalScope);    putToScope("$result",wrappedResult,cx,globalScope);    ScriptableObject.putProperty(globalScope,"$result",wrappedResult);    String finalFunction="(function() { " + "           var result = $result;" + "           var type = result instanceof Array? \"array\" : typeof result;"+ "           return JSON.stringify({ \"result\" : result, \"type\" : type }); "+ "     })()";    Scriptable wrapScope=cx.newObject(globalScope);    wrapScope.setPrototype(globalScope);    wrapScope.setParentScope(globalScope);    result=cx.evaluateString(wrapScope,finalFunction,"script",1,null);    return castResult(result);  } catch (  Exception e) {    String msg=String.format("Failed evaluating expression %s.",expr);    throw new CWLExpressionException(msg,e);  } finally {    Context.exit();  }}  }
class C{  public static int largestColumn(int[][] m){  int maxColumnIndex=0;  int max=0;  for (int col=0; col < m[0].length; col++) {    int count=0;    for (int row=0; row < m.length; row++) {      if (m[row][col] == 1)       count++;    }    if (count > max) {      max=count;      maxColumnIndex=col;    }  }  return maxColumnIndex;}  }
class C{  public boolean isModified(){  for (int i=_dependencyList.size() - 1; i >= 0; i--) {    Dependency dependency=_dependencyList.get(i);    if (dependency.isModified()) {      return true;    }  }  return false;}  }
class C{  public void convertToGL(CGPoint uiPoint,CGPoint ret){  convertToGL(uiPoint.x,uiPoint.y,ret);}  }
class C{  @Override public Address allocateContiguousChunks(int descriptor,Space space,int chunks,Address head){  lock.acquire();  int chunk=regionMap.alloc(chunks);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(chunk != 0);  if (chunk == -1) {    if (Options.verbose.getValue() > 3) {      Log.write("Unable to allocate virtual address space for space \"");      Log.write(space.getName());      Log.write("\" for ");      Log.write(chunks);      Log.write(" chunks (");      Log.write(chunks << VMLayoutConstants.LOG_BYTES_IN_CHUNK);      Log.writeln(" bytes), requesting GC.");      if (Options.verbose.getValue() > 7) {        Space.printVMMap();      }    }    lock.release();    return Address.zero();  }  totalAvailableDiscontiguousChunks-=chunks;  Address rtn=addressForChunkIndex(chunk);  insert(rtn,Extent.fromIntZeroExtend(chunks << LOG_BYTES_IN_CHUNK),descriptor,space);  if (head.isZero()) {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(nextLink[chunk] == 0);  } else {    nextLink[chunk]=getChunkIndex(head);    prevLink[getChunkIndex(head)]=chunk;  }  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(prevLink[chunk] == 0);  lock.release();  return rtn;}  }
class C{  private UnitInterface findUnit(String unitName){  for (  UnitInterface unit : allUnits) {    if (unit.getName().equalsIgnoreCase(unitName)) {      return unit;    }  }  return null;}  }
class C{  public void testRegisterListeners(){  FacesContext context=getFacesContext();  UIViewRoot root=Util.getViewHandler(context).createView(context,null);  root.setLocale(Locale.US);  root.setViewId(TEST_URI);  context.setViewRoot(root);  UIForm basicForm=new UIForm();  basicForm.setId("basicForm");  root.getChildren().add(basicForm);  UIPanel panel=new UIPanel();  basicForm.getChildren().add(panel);  UIPanel commandPanel=new UIPanel();  commandPanel.setId("commandPanel");  UICommand command1=new UICommand();  UICommand command2=new UICommand();  commandPanel.getChildren().add(command1);  commandPanel.getChildren().add(command2);  panel.getFacets().put("commandPanel",commandPanel);  Util.getStateManager(context).saveView(context);  Phase restoreView=new RestoreViewPhase();  try {    restoreView.execute(context);  } catch (  Throwable e) {    e.printStackTrace();    assertTrue(false);  }  assertTrue(!(context.getRenderResponse()) && !(context.getResponseComplete()));  assertTrue(context.getViewRoot() != null);  root=Util.getViewHandler(context).createView(context,null);  root.setViewId(TEST_URI);  root.setLocale(Locale.US);  context.setViewRoot(root);  basicForm=new UIForm();  basicForm.setId("basicForm");  root.getChildren().add(basicForm);  command1=new UICommand();  command2=new UICommand();  basicForm.getChildren().add(command1);  basicForm.getChildren().add(command2);  context.getExternalContext().getSessionMap().remove(ServerSideStateHelper.STATEMANAGED_SERIAL_ID_KEY);  Util.getStateManager(context).saveView(context);  restoreView=new RestoreViewPhase();  try {    restoreView.execute(context);  } catch (  Throwable e) {    assertTrue(false);  }  assertTrue(!(context.getRenderResponse()) && !(context.getResponseComplete()));}  }
class C{  public boolean removeParameter(String name){  return authParams.delete(name);}  }
class C{  @Override public boolean supportsSelectForUpdate(){  debugCodeCall("supportsSelectForUpdate");  return true;}  }
class C{  public TermsBuilder size(int size){  bucketCountThresholds.setRequiredSize(size);  return this;}  }
class C{  public AddNodesItem clone(){  AddNodesItem result=new AddNodesItem();  result.ParentNodeId=ParentNodeId;  result.ReferenceTypeId=ReferenceTypeId;  result.RequestedNewNodeId=RequestedNewNodeId;  result.BrowseName=BrowseName;  result.NodeClass=NodeClass;  result.NodeAttributes=NodeAttributes;  result.TypeDefinition=TypeDefinition;  return result;}  }
class C{  public JMapper(final Class<D> destination,final Class<S> source,final JMapperAPI api){  this(destination,source,api.toXStream().toString());}  }
class C{  public static int byteArrayToInt(byte[] b,int offset){  int value=0;  for (int i=0; i < 4; i++) {    int shift=(4 - 1 - i) * 8;    value+=(b[i + offset] & 0x000000FF) << shift;  }  return value;}  }
class C{  public void compress(final ByteBuffer buf,final OutputStream os){  if (true && buf.hasArray()) {    final int off=buf.arrayOffset() + buf.position();    final int len=buf.remaining();    compress(buf.array(),off,len,os);    buf.position(buf.limit());    return;  }  throw new UnsupportedOperationException();}  }
class C{  public void splitLinesIntoHashMap(Vector<String> content) throws Exception {  for (int i=0; i < content.size(); i++) {    String line=content.get(i);    if (line == null || line.length() < 1)     continue;    if (!line.contains(_divider))     throw new Exception("ConfigReader: ConfigFile " + _filePath + " contains invalid line("+ i+ 1+ ") : "+ line+ ". No Divider "+ _divider+ " found");    String[] splitted=line.split(_divider);    String key=splitted[0];    String val=splitted[1];    _configMap.put(key,val);  }}  }
class C{  private void initialize(boolean isRtlContext){  mIsRtlContext=isRtlContext;  mTextDirectionHeuristicCompat=DEFAULT_TEXT_DIRECTION_HEURISTIC;  mFlags=DEFAULT_FLAGS;}  }
class C{  public void testBlendedSort() throws IOException {  BytesRef payload=new BytesRef("star");  Input keys[]=new Input[]{new Input("star wars: episode v - the empire strikes back",8,payload)};  Path tempDir=createTempDir("BlendedInfixSuggesterTest");  Analyzer a=new StandardAnalyzer(CharArraySet.EMPTY_SET);  BlendedInfixSuggester suggester=new BlendedInfixSuggester(newFSDirectory(tempDir),a,a,AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS,BlendedInfixSuggester.BlenderType.POSITION_LINEAR,BlendedInfixSuggester.DEFAULT_NUM_FACTOR,false);  suggester.build(new InputArrayIterator(keys));  long w0=getInResults(suggester,"star ",payload,1);  long w1=getInResults(suggester,"war",payload,1);  long w2=getInResults(suggester,"empire ba",payload,1);  long w3=getInResults(suggester,"back",payload,1);  long w4=getInResults(suggester,"bacc",payload,1);  assertTrue(w0 > w1);  assertTrue(w1 > w2);  assertTrue(w2 > w3);  assertTrue(w4 < 0);  suggester.close();}  }
class C{  public XMLApiResult executeSshRetry(String command,String request){  XMLApiResult reTryResult=new XMLApiResult();  try {    int maxRetry=3;    while (maxRetry > 0) {      reTryResult=this.executeSsh(command,request);      String message=reTryResult.getMessage();      if (reTryResult.isCommandSuccess()) {        break;      } else       if (message != null && !message.isEmpty() && (message.contains("unable to acquire lock(s)") || message.contains("NAS_DB locked object is stale") || message.contains("Temporarily no Data Mover is available"))) {        try {          TimeUnit.SECONDS.sleep(10);        } catch (        InterruptedException e) {          _log.error("Exception occurred while delaying file system creation command due to {}",e);        }        maxRetry--;      } else {        break;      }    }  } catch (  Exception ex) {    StringBuilder message=new StringBuilder();    message.append("VNX File executeSshReTry failed for create file system");    message.append(", due to {}");    _log.error(message.toString(),ex);  }  return reTryResult;}  }
class C{  public void stopScanning(){  if (mServiceConnected) {    mBeaconsListFragment.stopScanning(mServiceConnection);  }}  }
class C{  public void testCase2(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={-10,-19,-28,-37,-46,-55,-64,-10,-19,-27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  protected Link determineAtbLink(final LinksSupport links,final String linkId,final ProductSearchResultDTO product,final CustomerWishList itemData,final String qty){  final PageParameters params=new PageParameters();  params.add(WebParametersKeys.SKU_ID,itemData.getSkus().getSkuId());  return links.newAddToCartLink(linkId,product.getDefaultSkuCode(),qty,String.valueOf(itemData.getCustomerwishlistId()),(Class)getPage().getClass(),params);}  }
class C{  private void checkKey(String newKey){  boolean isRefreshIdents=false;  if (null == registrationIdKey) {    registrationIdKey=newKey;  } else {    isRefreshIdents=!Objects.equals(registrationIdKey,newKey);    registrationIdKey=newKey;  }  if (isRefreshIdents) {    cachedDataService.triggerRefreshIdents();  }}  }
class C{  private static HashSet<String> parseAllowGeolocationOrigins(String setting){  HashSet<String> origins=new HashSet<String>();  if (!TextUtils.isEmpty(setting)) {    for (    String origin : setting.split("\\s+")) {      if (!TextUtils.isEmpty(origin)) {        origins.add(origin);      }    }  }  return origins;}  }
class C{  public boolean atEnd(){  return currentToken.length() == 0;}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i;      for (i=0; i < 4; i++) {        int b;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public static void copyFile(File origPath,File destPath) throws IOException {  try (FileInputStream ins=new FileInputStream(origPath);FileOutputStream outs=new FileOutputStream(destPath)){    FileChannel in=ins.getChannel();    FileChannel out=outs.getChannel();    in.transferTo(0,in.size(),out);  } }  }
class C{  protected T childValue(T parentValue){  return parentValue;}  }
class C{  public static void quickSort(int[] a){  quickSort(a,0,a.length - 1);}  }
class C{  protected void adjustVisibility(Rectangle r){  SwingUtilities.invokeLater(new SafeScroller(r));}  }
class C{  private void loadOffsets(){  List<Map<String,String>> partitions=new ArrayList<>();  for (  String db : databases) {    Map<String,String> partition=Collections.singletonMap("mongodb",db);    partitions.add(partition);  }  offsets.putAll(context.offsetStorageReader().offsets(partitions));}  }
class C{  @Override public float tf(float freq){  return baselineTf(freq);}  }
class C{  @Before public void before(){  LOGGER.info("*********  " + name.getMethodName() + "  *********");  latch=new CountDownLatch(1);  completedSessionIds.clear();  failedSessionIds.clear();  bus.register(this);}  }
class C{  private void checkOneNode(int id) throws Exception {  String id8;  File logFile;  try (Ignite ignite=G.start(getConfiguration("grid" + id,LOG_PATH_MAIN))){    id8=U.id8(ignite.cluster().localNode().id());    String logPath="work/log/ignite-" + id8 + ".log";    logFile=U.resolveIgnitePath(logPath);    assertNotNull("Failed to resolve path: " + logPath,logFile);    assertTrue("Log file does not exist: " + logFile,logFile.exists());    assertEquals(logFile.getAbsolutePath(),ignite.log().fileName());  }   String logContent=U.readFileToString(logFile.getAbsolutePath(),"UTF-8");  assertTrue("Log file does not contain it's node ID: " + logFile,logContent.contains(">>> Local node [ID=" + id8.toUpperCase()));}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public SBitmap(){  super(GraphicType.GT_Bitmap,RenderType.RT_Unknown,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint((short)0,(short)0);  ll1_=new LLPoint(0f,0f);  width_=0;  height_=0;  x_hot_=0;  y_hot_=0;  bits_=new byte[0];  bmref_=null;}  }
class C{  protected void prepare(){}  }
class C{  public int count(Predicate<? super A> predicate){  int result=0;  for (  A a : this) {    if (predicate.test(a)) {      result++;    }  }  return result;}  }
class C{  public static String niceStoreTypeName(String storetype){  if (storetype.equalsIgnoreCase("Windows-MY")) {    return "Windows-MY";  } else   if (storetype.equalsIgnoreCase("Windows-ROOT")) {    return "Windows-ROOT";  } else {    return storetype.toUpperCase(Locale.ENGLISH);  }}  }
class C{  public String toString(int depth){  if (depth <= 0)   return "";  return ("  uid: " + myUID + "  kind: "+ (kind == -1 ? "<none>" : kinds[kind])+ getPreCommentsAsString());}  }
class C{  public boolean containsBody(Body body){  return this.bodies.contains(body);}  }
class C{  protected void childJustAddedHook(Object child,BCSChild bcsc){}  }
class C{  public static void checkPathPortals(OBlock b){  if (log.isDebugEnabled())   log.debug("checkPathPortals for " + b.getDisplayName());  if (_textArea == null) {    _textArea=new javax.swing.JTextArea(10,50);    _textArea.setEditable(false);    _textArea.setTabSize(4);    _textArea.append(Bundle.getMessage("ErrWarnAreaMsg"));    _textArea.append("\n\n");  }  List<Path> pathList=b.getPaths();  if (pathList.size() == 0) {    _textArea.append(Bundle.getMessage("NoPaths",b.getDisplayName()));    _textArea.append("\n");    _hasErrors=true;    return;  }  List<Portal> portalList=b.getPortals();  ArrayList<String> portalNameList=new ArrayList<String>();  for (int i=0; i < portalList.size(); i++) {    Portal portal=portalList.get(i);    if (portal.getFromPaths().size() == 0) {      _textArea.append(Bundle.getMessage("BlockPortalNoPath",portal.getName(),portal.getFromBlockName()));      _textArea.append("\n");      _hasErrors=true;      return;    }    if (portal.getToPaths().size() == 0) {      _textArea.append(Bundle.getMessage("BlockPortalNoPath",portal.getName(),portal.getToBlockName()));      _textArea.append("\n");      _hasErrors=true;      return;    }    portalNameList.add(portal.getName());  }  Iterator<Path> iter=pathList.iterator();  while (iter.hasNext()) {    OPath path=(OPath)iter.next();    OBlock block=(OBlock)path.getBlock();    if (block == null || !block.equals(b)) {      _textArea.append(Bundle.getMessage("PathWithBadBlock",path.getName(),b.getDisplayName()));      _textArea.append("\n");      _hasErrors=true;      return;    }    String msg=null;    boolean hasPortal=false;    Portal fromPortal=path.getFromPortal();    if (fromPortal != null) {      if (!fromPortal.isValid()) {        msg=fromPortal.getName();      }      hasPortal=true;      portalNameList.remove(fromPortal.getName());    }    Portal toPortal=path.getToPortal();    if (toPortal != null) {      if (!toPortal.isValid()) {        msg=toPortal.getName();      }      hasPortal=true;      portalNameList.remove(toPortal.getName());      if (fromPortal != null && fromPortal.equals(toPortal)) {        _textArea.append(Bundle.getMessage("PathWithDuplicatePortal",path.getName(),b.getDisplayName()));        _textArea.append("\n");      }    }    if (msg != null) {      _textArea.append(Bundle.getMessage("PortalNeedsBlock",msg));      _textArea.append("\n");      _hasErrors=true;    } else     if (!hasPortal) {      _textArea.append(Bundle.getMessage("PathNeedsPortal",path.getName(),b.getDisplayName()));      _textArea.append("\n");      _hasErrors=true;    }    boolean validPath;    if (toPortal != null) {      if (fromPortal != null) {        validPath=toPortal.isValidPath(path) && fromPortal.isValidPath(path);      } else {        validPath=toPortal.isValidPath(path);      }    } else {      if (fromPortal != null) {        validPath=fromPortal.isValidPath(path);      } else {        validPath=false;      }    }    if (!validPath) {      _textArea.append(Bundle.getMessage("PathNotConnectedToPortal",path.getName(),b.getDisplayName()));      _textArea.append("\n");      _hasErrors=true;    }  }  for (int i=0; i < portalNameList.size(); i++) {    _textArea.append(Bundle.getMessage("BlockPortalNoPath",portalNameList.get(i),b.getDisplayName()));    _textArea.append("\n");    _hasErrors=true;  }  checkSharedTurnouts(b);}  }
class C{  public boolean back(){  if (browser == null || browser.isDisposed())   return false;  return browser.back();}  }
class C{  public CreateRegionProcessor(CacheDistributionAdvisee newRegion){  this.newRegion=newRegion;}  }
class C{  public void resume() throws DebuggerException {  try {    vm.resume();    LOG.debug("Resume VM");  } catch (  VMCannotBeModifiedException e) {    throw new DebuggerException(e.getMessage(),e);  } finally {    resetCurrentThread();  }}  }
class C{  private String readRawTextFile(int resId){  InputStream inputStream=resources.openRawResource(resId);  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));    StringBuilder sb=new StringBuilder();    String line;    while ((line=reader.readLine()) != null) {      sb.append(line).append("\n");    }    reader.close();    return sb.toString();  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  private boolean equals(LabelKey key){  if (key == this) {    return true;  }  if (key.label != label) {    return false;  }  if (key.owner != owner) {    return false;  }  if (key.type != type) {    return false;  }  return key.name.equals(name);}  }
class C{  public static double logSumExp(Vec vals,double maxValue){  double expSum=0.0;  for (int i=0; i < vals.length(); i++)   expSum+=exp(vals.get(i) - maxValue);  return maxValue + log(expSum);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  private void writeWorldData(boolean async){  maybeAsync(async,null);}  }
class C{  protected void writeEmbeddedTags(AttributeSet attr) throws IOException {  attr=convertToHTML(attr,oConvAttr);  Enumeration names=attr.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    if (name instanceof HTML.Tag) {      HTML.Tag tag=(HTML.Tag)name;      if (tag == HTML.Tag.FORM || tags.contains(tag)) {        continue;      }      write('<');      write(tag.toString());      Object o=attr.getAttribute(tag);      if (o != null && o instanceof AttributeSet) {        writeAttributes((AttributeSet)o);      }      write('>');      tags.addElement(tag);      tagValues.addElement(o);    }  }}  }
class C{  public static <A,B>ImmutableList<B> transform(Collection<A> items,final Function<A,B> funk){  return transform(items,max(1,min(items.size(),MAX_THREADS)),funk);}  }
class C{  void test() throws Exception {  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:test","sa","");  Statement stat=conn.createStatement();  stat.execute("DROP TABLE IF EXISTS TEST");  stat.execute("CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR)");  PreparedStatement prep=conn.prepareStatement("INSERT INTO TEST VALUES(?, 'Test' || SPACE(100))");  long time;  time=System.currentTimeMillis();  int len=1000;  for (int i=0; i < len; i++) {    long now=System.currentTimeMillis();    if (now > time + 1000) {      time=now;      System.out.println("Inserting " + (100L * i / len) + "%");    }    prep.setInt(1,i);    prep.execute();  }  boolean abnormalTermination=true;  if (abnormalTermination) {    ((JdbcConnection)conn).setPowerOffCount(1);    try {      stat.execute("INSERT INTO TEST VALUES(-1, 'Test' || SPACE(100))");    } catch (    SQLException e) {    }  } else {    conn.close();  }  System.out.println("Open connection...");  time=System.currentTimeMillis();  conn=DriverManager.getConnection("jdbc:h2:test;DATABASE_EVENT_LISTENER='" + getClass().getName() + "'","sa","");  time=System.currentTimeMillis() - time;  System.out.println("Done after " + time + " ms");  prep.close();  stat.close();  conn.close();}  }
class C{  public void onServiceConnected(){  displayServiceBinding(true);}  }
class C{  public <T>T post(URI postUri,Class<T> returnType,Object requestBody) throws SysClientException {  final WebResource webResource=createRequest(postUri);  ClientResponse response;  final WebResource.Builder resourceBuilder=addSignature(webResource);  _log.info("webResource=" + webResource);  try {    if (requestBody == null) {      _log.info("RequestBody is null");      response=resourceBuilder.post(ClientResponse.class);    } else {      _log.info("requestBody=" + requestBody);      response=resourceBuilder.post(ClientResponse.class,requestBody);    }    _log.info("response=" + response);  } catch (  ClientHandlerException e) {    _log.info("ClientHandlerException: " + e);    checkNodeStatus(postUri,"POST");    throw e;  }  final int status=response.getStatus();  if (!isSuccess(status)) {    _log.info("response={}",response);    throw SyssvcException.syssvcExceptions.sysClientError(MessageFormatter.arrayFormat("POST request on URI {} to node {} failed with status {}",new Object[]{postUri,_endpoint.toString(),status}).getMessage());  }  return returnType != null ? response.getEntity(returnType) : null;}  }
class C{  public <T extends Point2D>T inverse(double x,double y,T ret){  RotationHelper rotationHelper=getRotHelper();  return (rotationHelper == null) ? getProjection().inverse(x,y,ret) : rotationHelper.inverse(x,y,ret);}  }
class C{  public void testPorterStemFilter() throws Exception {  assertVocabulary(a,getDataPath("porterTestData.zip"),"voc.txt","output.txt");}  }
class C{  public void deleteRow() throws SQLException {  crsInternal.deleteRow();}  }
class C{  public static String ltrim(String s){  if (s == null) {    return null;  }  int index=0;  int len=s.length();  while (index < len && Character.isWhitespace(s.charAt(index))) {    index++;  }  return (index >= len) ? "" : s.substring(index);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document ownerDocument;  doc=(Document)load("staff",false);  ownerDocument=doc.getOwnerDocument();  assertNull("documentOwnerDocumentNull",ownerDocument);}  }
class C{  public static Long create(User user){  user.createdDate=JodaDateUtil.now();  user.save();  return user.id;}  }
class C{  @SuppressWarnings("static-access") public String sqlAD_getSystemClients(String vendorName,String catalogName,String schemaName){  String tableName="AD_Client";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("AD_Client_ID");  columnNames.add("Name");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("AD_CLIENT_ID");  aliasNames.add("NAME");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add(new StringBuffer("AD_Client_ID < ").append(s_parameters.MINUSERLEVELID).toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodenomodificationallowederrEE.class,args);}  }
class C{  protected void ensureRow(int row){  if (row >= rowCount) {    setRowCount(row + 1);  }}  }
class C{  public static void printActivityStatistics(String populationFilename){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  PopulationReader pr=new PopulationReader(sc);  pr.readFile(populationFilename);  LOG.info("Population parsed. Analysing activity types...");  Counter counter=new Counter(" person # ");  Map<String,Integer> map=new TreeMap<String,Integer>();  for (  Id<Person> id : sc.getPopulation().getPersons().keySet()) {    Plan plan=sc.getPopulation().getPersons().get(id).getSelectedPlan();    if (plan != null) {      for (      PlanElement pe : plan.getPlanElements()) {        if (pe instanceof Activity) {          Activity act=(Activity)pe;          if (!map.containsKey(act.getType())) {            map.put(act.getType(),new Integer(1));          } else {            map.put(act.getType(),map.get(act.getType()) + 1);          }        }      }    }    counter.incCounter();  }  counter.printCounter();  LOG.info("--------------------------------------------");  LOG.info("Activity statistics:");  LOG.info("--------------------------------------------");  for (  String s : map.keySet()) {    String gap="";    for (int i=0; i < 6 - s.length(); i++) {      gap+=" ";    }    LOG.info(String.format("%s%s: %d",gap,s,map.get(s)));  }  LOG.info("--------------------------------------------");}  }
class C{  protected void removeThumbnailData(){  clearThumbnailAndStrips();  mIfdDatas[IfdId.TYPE_IFD_1]=null;}  }
class C{  public void enableAll(){  if (doNotCheckCapabilities()) {    return;  }  enableAllAttributes();  enableAllAttributeDependencies();  enableAllClasses();  enableAllClassDependencies();  enable(Capability.MISSING_VALUES);  enable(Capability.MISSING_CLASS_VALUES);}  }
class C{  public String revertIgnoredSections(String sortedXml){  if (containsIgnoredSections) {    return ignoredSectionsStore.revertIgnoredSections(sortedXml);  }  return sortedXml;}  }
class C{  public int pickParent(){  return MathUtils.randomChoice(cumulativeFitness);}  }
class C{  public boolean genStringAsCharArray(){  return genStringAsCharArray;}  }
class C{  public boolean isUnknown(){  return (type == UNKNOWN);}  }
class C{  protected void SWAP(int a,int b,Stack<d_node> cover_set){  d_node tmp=cover_set.element(a);  cover_set.set(a,cover_set.element(b));  cover_set.set(b,tmp);}  }
class C{  public TransformHashWrapper(){  m_cHashModel.put("htmlEscape",new HtmlEscape());  m_cHashModel.put("compress",new StandardCompress());  m_cHashModel.put("escape",new TransformMethodWrapper1());  m_cHashModel.put("special",new TransformMethodWrapper2());}  }
class C{  public final int compareTo(E o){  return ordinal - ((Enum)o).ordinal;}  }
class C{  private void db(String val){  VM.sysWrite("IRGEN " + bcodes.getDeclaringClass() + "."+ gc.getMethod().getName()+ ":"+ val+ "\n");}  }
class C{  public static <I,A>Parser<I,A> retn(A x){  return null;}  }
class C{  protected File writeJsonManifest(File directory,String manifestFileName,DownloaderOutputManifestDto manifest) throws IOException {  Path resultFilePath=Paths.get(directory.getPath(),manifestFileName);  File resultFile=new File(resultFilePath.toString());  ObjectMapper mapper=new ObjectMapper();  mapper.writeValue(resultFile,manifest);  return resultFile;}  }
class C{  public boolean growFreeList(int units){  int requiredUnits=units + currentUnits;  if (requiredUnits > maxUnits) {    return false;  }  int blocks=0;  if (requiredUnits > currentCapacity()) {    int unitsReqd=requiredUnits - currentCapacity();    blocks=(unitsReqd + unitsPerBlock() - 1) / unitsPerBlock();  }  growListByBlocks(blocks,requiredUnits);  return true;}  }
class C{  public static int binarySearch(long[] array,long value){  return binarySearch(array,0,array.length,value);}  }
class C{  public static int EWOULDBLOCK(){  return Errno.EWOULDBLOCK.intValue();}  }
class C{  public static final boolean isReallyInParentPath(File testParent,File testChild) throws IOException {  String testParentName=getCanonicalPath(testParent);  File testChildParentFile=testChild.getAbsoluteFile().getParentFile();  if (testChildParentFile == null)   testChildParentFile=testChild.getAbsoluteFile();  String testChildParentName=getCanonicalPath(testChildParentFile);  return testChildParentName.startsWith(testParentName);}  }
class C{  protected void assertBasicDataIsInProperPlaces() throws Exception {  String sql;  sql="select * from employees where emp_no = 1";  checkRowExistsInServerGroup(sql,"fabric_test1_shard2");  checkRowDoesntExistInServerGroup(sql,"fabric_test1_shard1");  this.conn.clearServerSelectionCriteria();  this.conn.setShardTable("employees");  checkRowExistsInKeyGroup(sql,"1");  checkRowDoesntExistInKeyGroup(sql,"9");  sql="select * from employees where emp_no = 6";  checkRowExistsInServerGroup(sql,"fabric_test1_shard2");  checkRowDoesntExistInServerGroup(sql,"fabric_test1_shard1");  this.conn.clearServerSelectionCriteria();  this.conn.setShardTable("employees");  checkRowExistsInKeyGroup(sql,"6");  checkRowDoesntExistInKeyGroup(sql,"19");  sql="select * from employees where emp_no = 9";  checkRowExistsInServerGroup(sql,"fabric_test1_shard1");  checkRowDoesntExistInServerGroup(sql,"fabric_test1_shard2");  this.conn.clearServerSelectionCriteria();  this.conn.setShardTable("employees");  checkRowExistsInKeyGroup(sql,"9");  checkRowDoesntExistInKeyGroup(sql,"6");  sql="select * from employees where emp_no = 19";  checkRowExistsInServerGroup(sql,"fabric_test1_shard1");  checkRowDoesntExistInServerGroup(sql,"fabric_test1_shard2");  this.conn.clearServerSelectionCriteria();  this.conn.setShardTable("employees");  checkRowExistsInKeyGroup(sql,"19");  checkRowDoesntExistInKeyGroup(sql,"1");}  }
class C{  public Graph(int numvert){  nodes=new Vertex[numvert];  Vertex v=null;  for (int i=numvert - 1; i >= 0; i--) {    Vertex tmp=nodes[i]=new Vertex(v,numvert);    v=tmp;  }  addEdges(numvert);}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void enableSpeech(boolean toEnable){  isSpeechEnabled=toEnable;  if (chatTab != null) {    chatTab.enableSpeech(toEnable);  }  if (menu != null) {    menu.enableSpeech(toEnable);  }}  }
class C{  public T caseExistentialTypeRef(ExistentialTypeRef object){  return null;}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(DateTickUnitType.YEAR)) {    return DateTickUnitType.YEAR;  } else   if (this.equals(DateTickUnitType.MONTH)) {    return DateTickUnitType.MONTH;  } else   if (this.equals(DateTickUnitType.DAY)) {    return DateTickUnitType.DAY;  } else   if (this.equals(DateTickUnitType.HOUR)) {    return DateTickUnitType.HOUR;  } else   if (this.equals(DateTickUnitType.MINUTE)) {    return DateTickUnitType.MINUTE;  } else   if (this.equals(DateTickUnitType.SECOND)) {    return DateTickUnitType.SECOND;  } else   if (this.equals(DateTickUnitType.MILLISECOND)) {    return DateTickUnitType.MILLISECOND;  }  return null;}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public TokenStreamToDot(String inputText,TokenStream in,PrintWriter out){  this.in=in;  this.out=out;  this.inputText=inputText;  termAtt=in.addAttribute(CharTermAttribute.class);  posIncAtt=in.addAttribute(PositionIncrementAttribute.class);  posLengthAtt=in.addAttribute(PositionLengthAttribute.class);  if (in.hasAttribute(OffsetAttribute.class)) {    offsetAtt=in.addAttribute(OffsetAttribute.class);  } else {    offsetAtt=null;  }}  }
class C{  @RequestMapping(value="/api/machine",method=RequestMethod.GET) public void infoMachine(HttpServletRequest request,HttpServletResponse response) throws ServiceException, CheckException {  String responseFromCAdvisor=monitoringService.getJsonMachineFromCAdvisor();  try {    response.getWriter().write(responseFromCAdvisor);    response.flushBuffer();  } catch (  Exception e) {    logger.error("error during write and flush response",responseFromCAdvisor);  }}  }
class C{  @Override public void applyConfig(final ConfigSettings config){  Object o=config.getConfigParameter(ConfigurationKeys.PATH_OUTPUT_SQL_FILES);  if (o != null) {    this.outputPathField.setText((String)o);  } else {    this.outputPathField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.MODE_ZIP_COMPRESSION_ENABLED);  if (o != null) {    controller.setEnableZipCompression((Boolean)o);  } else {    controller.setEnableZipCompression(false);  }  o=config.getConfigParameter(ConfigurationKeys.MODE_DATAFILE_OUTPUT);  if (o != null) {    controller.setEnableDataFileOutput((Boolean)o);  } else {    controller.setEnableDataFileOutput(false);  }  o=config.getConfigParameter(ConfigurationKeys.MODE_OUTPUT);  if (o != null) {switch ((OutputType)o) {case UNCOMPRESSED:      controller.setEnableSQLDatabaseOutput(false);    controller.setOutputCompression(OutputCompressionEnum.None);  o=config.getConfigParameter(ConfigurationKeys.LIMIT_SQL_FILE_SIZE);break;case SEVENZIP:controller.setEnableSQLDatabaseOutput(false);controller.setOutputCompression(OutputCompressionEnum.SevenZip);o=config.getConfigParameter(ConfigurationKeys.LIMIT_SQL_ARCHIVE_SIZE);break;case BZIP2:controller.setEnableSQLDatabaseOutput(false);controller.setOutputCompression(OutputCompressionEnum.BZip2);o=config.getConfigParameter(ConfigurationKeys.LIMIT_SQL_ARCHIVE_SIZE);break;case DATABASE:controller.setEnableSQLDatabaseOutput(true);controller.setOutputCompression(OutputCompressionEnum.None);o=null;break;}}if (o != null) {controller.setMultipleOutputFiles(true);this.outputSizeLimitField.setText(Long.toString((Long)o));} else {controller.setMultipleOutputFiles(false);this.outputSizeLimitField.setText("");}}  }
class C{  public void compileAllProjects(List<File> pProjectRoots,IssueAcceptor issueAcceptor) throws N4JSCompileException {  List<File> absProjectRoots=HeadlessHelper.toAbsoluteFileList(pProjectRoots);  ArrayList<File> pDir=HeadlessHelper.collectAllProjectPaths(absProjectRoots);  compileProjects(pProjectRoots,pDir,Collections.emptyList(),issueAcceptor);}  }
class C{  private static ValueAnimator loadAnimator(Context c,Resources res,Resources.Theme theme,AttributeSet attrs,ValueAnimator anim,float pathErrorScale) throws Resources.NotFoundException {  TypedArray arrayAnimator=null;  TypedArray arrayObjectAnimator=null;  if (theme != null) {    arrayAnimator=theme.obtainStyledAttributes(attrs,R.styleable.Animator,0,0);  } else {    arrayAnimator=res.obtainAttributes(attrs,R.styleable.Animator);  }  if (anim != null) {    if (theme != null) {      arrayObjectAnimator=theme.obtainStyledAttributes(attrs,R.styleable.PropertyAnimator,0,0);    } else {      arrayObjectAnimator=res.obtainAttributes(attrs,R.styleable.PropertyAnimator);    }  }  if (anim == null) {    anim=new ValueAnimator();  }  parseAnimatorFromTypeArray(anim,arrayAnimator,arrayObjectAnimator);  final int resId=arrayAnimator.getResourceId(R.styleable.Animator_android_interpolator,0);  if (resId > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(c,resId));  }  arrayAnimator.recycle();  if (arrayObjectAnimator != null) {    arrayObjectAnimator.recycle();  }  return anim;}  }
class C{  private static Set<Triple> parseTriples(List<Node> variables,Element triplesElement,String s){  Elements elements=triplesElement.getChildElements(s);  Set<Triple> triples=new HashSet<>();  for (int q=0; q < elements.size(); q++) {    Element tripleElement=elements.get(q);    String value=tripleElement.getValue();    String[] tokens=value.split(",");    if (tokens.length != 3) {      throw new IllegalArgumentException("Expecting a triple: " + value);    }    String x=tokens[0].trim();    String y=tokens[1].trim();    String z=tokens[2].trim();    Node _x=getNode(variables,x);    Node _y=getNode(variables,y);    Node _z=getNode(variables,z);    Triple triple=new Triple(_x,_y,_z);    triples.add(triple);  }  return triples;}  }
class C{  public static boolean gr(double a,double b){  return (a - b > SMALL);}  }
class C{  public void handleRuntimeAccesses(TestCase test){  test.getAccessedEnvironment().clear();  if (Properties.REPLACE_CALLS) {    handleReplaceCalls();  }  if (Properties.VIRTUAL_FS) {    handleVirtualFS(test);  }  if (Properties.REPLACE_SYSTEM_IN) {    handleSystemIn();  }  if (Properties.REPLACE_GUI) {    handleGUI();  }  if (Properties.VIRTUAL_NET) {    handleNetwork(test);  }  if (Properties.JEE) {    handleJEE(test);  }}  }
class C{  public boolean contains(Playlist p){  return mPlaylists.contains(p);}  }
class C{  public void testDecodeAttributeBody() throws StunException {  byte[] attributeValue=binMessagesFixture.chngReqTestValue1;  char offset=Attribute.HEADER_LENGTH;  char length=(char)(attributeValue.length - offset);  changeRequestAttribute.decodeAttributeBody(attributeValue,offset,length);  assertEquals("decodeAttributeBody() did not properly decode the changeIpFlag",MsgFixture.CHANGE_IP_FLAG_1,changeRequestAttribute.getChangeIpFlag());  assertEquals("decodeAttributeBody() did not properly decode the changePortFlag",MsgFixture.CHANGE_PORT_FLAG_1,changeRequestAttribute.getChangePortFlag());  attributeValue=binMessagesFixture.chngReqTestValue2;  changeRequestAttribute.decodeAttributeBody(attributeValue,offset,length);  assertEquals("decodeAttributeBody() did not properly decode the changeIpFlag",MsgFixture.CHANGE_IP_FLAG_2,changeRequestAttribute.getChangeIpFlag());  assertEquals("decodeAttributeBody() did not properly decode the changePortFlag",MsgFixture.CHANGE_PORT_FLAG_2,changeRequestAttribute.getChangePortFlag());  changeRequestAttribute.getChangePortFlag();}  }
class C{  public byte[] genBytecode() throws Exception {  ClassWriter cw=new ClassWriter(0);  MethodVisitor mv;  FieldVisitor fv;  final boolean itf=false;  cw.visit(V1_8,ACC_FINAL + ACC_SUPER,arrayImplClassName,arrayInterfaceClassSig,"java/lang/Object",new String[]{arrayInterfaceClassName});{    fv=cw.visitField(ACC_PROTECTED + ACC_FINAL,"length","J",null,null);    fv.visitEnd();  }{    fv=cw.visitField(ACC_PROTECTED + ACC_FINAL,"elementSize","J",null,null);    fv.visitEnd();  }{    fv=cw.visitField(ACC_PRIVATE,"arraySize","J",null,null);    fv.visitEnd();  }{    mv=cw.visitMethod(ACC_PROTECTED,"<init>","(JJ)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/Object","<init>","()V",false);    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,3);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"elementSize","J");    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"length","J");    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,3);    mv.visitVarInsn(LLOAD,1);    mv.visitInsn(LMUL);    mv.visitFieldInsn(PUTFIELD,arrayImplClassName,"arraySize","J");    mv.visitInsn(RETURN);    mv.visitMaxs(5,5);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"sizeof","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"arraySize","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_STATIC,"getComponentType","()Ljava/lang/Class;","()Ljava/lang/Class<*>;",null);    mv.visitCode();    mv.visitLdcInsn(Type.getType("L" + elementInterfaceClassName + ";"));    mv.visitInsn(ARETURN);    mv.visitMaxs(1,0);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_FINAL,"getVLALength","()J",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"length","J");    mv.visitInsn(LRETURN);    mv.visitMaxs(2,1);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"at","(J)L" + elementInterfaceClassName + ";",null,null);    mv.visitCode();    mv.visitTypeInsn(NEW,elementImplClassName);    mv.visitInsn(DUP);    mv.visitMethodInsn(INVOKESPECIAL,elementImplClassName,"<init>","()V",false);    mv.visitVarInsn(ASTORE,3);    mv.visitVarInsn(ALOAD,3);    mv.visitTypeInsn(NEW,"com/ibm/layout/Location");    mv.visitInsn(DUP);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"location","Lcom/ibm/layout/Location;");    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"elementSize","J");    mv.visitInsn(LMUL);    mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",false);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",false);    mv.visitVarInsn(ALOAD,3);    mv.visitInsn(ARETURN);    mv.visitMaxs(8,4);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"range","(JJ)Lcom/ibm/layout/Array1D;","(JJ)Lcom/ibm/layout/Array1D<" + elementInterfaceClassName + ";>;",null);    mv.visitCode();    mv.visitTypeInsn(NEW,arrayImplClassName);    mv.visitInsn(DUP);    mv.visitVarInsn(LLOAD,3);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,this.arrayImplClassName,"elementSize","J");    mv.visitMethodInsn(INVOKESPECIAL,this.arrayImplClassName,"<init>","(JJ)V",itf);    mv.visitVarInsn(ASTORE,5);    mv.visitTypeInsn(NEW,"com/ibm/layout/Location");    mv.visitInsn(DUP);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"location","Lcom/ibm/layout/Location;");    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"elementSize","J");    mv.visitInsn(LMUL);    mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",itf);    mv.visitVarInsn(ASTORE,6);    mv.visitVarInsn(ALOAD,5);    mv.visitVarInsn(ALOAD,6);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",itf);    mv.visitVarInsn(ALOAD,5);    mv.visitInsn(ARETURN);    mv.visitMaxs(7,7);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"put","(JLcom/ibm/layout/Layout;)V",null,null);    mv.visitCode();    mv.visitTypeInsn(NEW,elementImplClassName);    mv.visitInsn(DUP);    mv.visitMethodInsn(INVOKESPECIAL,elementImplClassName,"<init>","()V",false);    mv.visitVarInsn(ASTORE,4);    mv.visitVarInsn(ALOAD,4);    mv.visitTypeInsn(NEW,"com/ibm/layout/Location");    mv.visitInsn(DUP);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"location","Lcom/ibm/layout/Location;");    mv.visitVarInsn(LLOAD,1);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"elementSize","J");    mv.visitInsn(LMUL);    mv.visitMethodInsn(INVOKESPECIAL,"com/ibm/layout/Location","<init>","(Lcom/ibm/layout/Location;J)V",false);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"bindLocation","(Lcom/ibm/layout/Location;)V",false);    mv.visitVarInsn(ALOAD,4);    mv.visitVarInsn(ALOAD,3);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"copyFrom","(Lcom/ibm/layout/Layout;)V",false);    mv.visitInsn(RETURN);    mv.visitMaxs(8,5);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"put","(JL" + elementInterfaceClassName + ";)V",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(J)L" + elementInterfaceClassName + ";",itf);    mv.visitTypeInsn(CHECKCAST,elementImplClassName);    mv.visitVarInsn(ALOAD,3);    mv.visitTypeInsn(CHECKCAST,elementImplClassName);    mv.visitMethodInsn(INVOKEVIRTUAL,elementImplClassName,"copyFrom","(L" + elementImplClassName + ";)V",itf);    mv.visitInsn(RETURN);    mv.visitMaxs(3,4);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC,"at","(J)Lcom/ibm/layout/Layout;",null,null);    mv.visitCode();    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,1);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(J)L" + elementInterfaceClassName + ";",itf);    mv.visitInsn(ARETURN);    mv.visitMaxs(3,3);    mv.visitEnd();  }{    mv=cw.visitMethod(ACC_PUBLIC,"toString","()Ljava/lang/String;",null,null);    mv.visitCode();    mv.visitTypeInsn(NEW,"java/lang/StringBuffer");    mv.visitInsn(DUP);    mv.visitLdcInsn("[");    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/StringBuffer","<init>","(Ljava/lang/String;)V",false);    mv.visitVarInsn(ASTORE,1);    mv.visitInsn(LCONST_0);    mv.visitVarInsn(LSTORE,2);    Label l0=new Label();    mv.visitJumpInsn(GOTO,l0);    Label l1=new Label();    mv.visitLabel(l1);    mv.visitFrame(Opcodes.F_APPEND,2,new Object[]{"java/lang/StringBuffer",Opcodes.LONG},0,null);    mv.visitVarInsn(ALOAD,1);    mv.visitTypeInsn(NEW,"java/lang/StringBuilder");    mv.visitInsn(DUP);    mv.visitLdcInsn(" ");    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/StringBuilder","<init>","(Ljava/lang/String;)V",false);    mv.visitVarInsn(ALOAD,0);    mv.visitVarInsn(LLOAD,2);    mv.visitMethodInsn(INVOKEVIRTUAL,arrayImplClassName,"at","(J)L" + elementInterfaceClassName + ";",false);    mv.visitMethodInsn(INVOKEINTERFACE,elementInterfaceClassName,"toString","()Ljava/lang/String;",true);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","append","(Ljava/lang/String;)Ljava/lang/StringBuilder;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuilder","toString","()Ljava/lang/String;",false);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","append","(Ljava/lang/String;)Ljava/lang/StringBuffer;",false);    mv.visitInsn(POP);    mv.visitVarInsn(LLOAD,2);    mv.visitInsn(LCONST_1);    mv.visitInsn(LADD);    mv.visitVarInsn(LSTORE,2);    mv.visitLabel(l0);    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);    mv.visitVarInsn(LLOAD,2);    mv.visitVarInsn(ALOAD,0);    mv.visitFieldInsn(GETFIELD,arrayImplClassName,"length","J");    mv.visitInsn(LCMP);    mv.visitJumpInsn(IFLT,l1);    mv.visitVarInsn(ALOAD,1);    mv.visitLdcInsn(" ]");    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","append","(Ljava/lang/String;)Ljava/lang/StringBuffer;",false);    mv.visitInsn(POP);    mv.visitVarInsn(ALOAD,1);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/StringBuffer","toString","()Ljava/lang/String;",false);    mv.visitInsn(ARETURN);    mv.visitMaxs(5,4);    mv.visitEnd();  }  ImplHelper.genLayoutTypeImpl(cw,mv,fv,arrayImplClassName,false);  cw.visitEnd();  return cw.toByteArray();}  }
class C{  public static void isFalse(boolean val){  if (val)   throw new IllegalArgumentException("Must be false");}  }
class C{  public void insertBack(int x){}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public void removeLinkListener(LinkListener listener){  treeDisplay.removeLinkListener(listener);  stackedDisplay.removeLinkListener(listener);}  }
class C{  public static QueryExp initialSubString(AttributeValueExp a,StringValueExp s){  return new MatchQueryExp(a,new StringValueExp(escapeString(s.getValue()) + "*"));}  }
class C{  public void loadData(){  Config config=ConfigUtils.createConfig();  config.network().setInputFile(this.networkFilename);  Scenario scenario=ScenarioUtils.loadScenario(config);  this.network=scenario.getNetwork();  MatsimCountsReader counts_parser=new MatsimCountsReader(counts);  counts_parser.readFile(this.countsFilename);  this.linkStats=new CalcLinkStats(this.network);  this.linkStats.readFile(this.linkStatsFilename);  countsComparisonList=createCountsComparisonList(this.linkStats);  log.info("  done.");}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public Map<String,ClassificationResult> test(String nameOfTrain) throws Exception {  System.out.println("Starting KLUE Test");  System.out.println("Tweets: " + this.tweetList.size());  String trainname="";  if (!nameOfTrain.equals("")) {    trainname=nameOfTrain;  } else {    trainname="Trained-Features-KLUE";  }  BufferedReader reader=new BufferedReader(new FileReader("resources/arff/" + trainname + ".arff"));  Instances train=new Instances(reader);  train.setClassIndex(train.numAttributes() - 1);  reader.close();  LibLINEAR classifier=new LibLINEAR();  classifier.setProbabilityEstimates(true);  classifier.setSVMType(new SelectedTag(0,LibLINEAR.TAGS_SVMTYPE));  classifier.setCost(0.05);  classifier.buildClassifier(train);  train.delete();  Tagger tagger=new Tagger();  tagger.loadModel("resources/tagger/model.20120919.txt");  Map<String,Double> afinnLexi=this.loadAFINN();  Map<String,Integer> featureMap=new HashMap<String,Integer>();  for (int i=0; i < train.numAttributes(); i++) {    featureMap.put(train.attribute(i).name(),train.attribute(i).index());  }  Map<String,ClassificationResult> resultMap=new HashMap<String,ClassificationResult>();  for (  Tweet tweet : tweetList) {    this.preProcessTweet(tweet);    this.tokenizeAndTag(tagger,tweet);    this.negate(tweet);    SparseInstance instance=new SparseInstance(0);    Set<String> nGramSet=this.getNGrams(tweet,2);    for (    String nGram : nGramSet) {      Integer index=featureMap.get("NGRAM_" + nGram);      if (index != null) {        instance.setValue(index,1);      }    }    List<Double> afinnScore=this.getAFINNScore(afinnLexi,tweet.getStemList());    instance.setValue(featureMap.get("sentiAFINNPos"),afinnScore.get(0));    instance.setValue(featureMap.get("sentiAFINNNeg"),afinnScore.get(1));    instance.setValue(featureMap.get("sentiAFINNTotal"),afinnScore.get(2));    instance.setValue(featureMap.get("sentiAFINNScore"),afinnScore.get(3));    List<Double> emoScore=this.getEmoScore(tweet);    instance.setValue(featureMap.get("sentiEmoPos"),emoScore.get(0));    instance.setValue(featureMap.get("sentiEmoNeg"),emoScore.get(1));    instance.setValue(featureMap.get("sentiEmoTotal"),emoScore.get(2));    instance.setValue(featureMap.get("sentiEmoScore"),emoScore.get(3));    instance.setValue(featureMap.get("tokenCount"),tweet.getWordList().size());    train.add(instance);    double result=classifier.classifyInstance(train.lastInstance());    double[] resultDistribution=classifier.distributionForInstance(train.lastInstance());    resultMap.put(tweet.getTweetID(),new ClassificationResult(tweet,resultDistribution,result));  }  return resultMap;}  }
class C{  private static StorageOSLdapPersonAttributeDao createLDAPAttributeRepository(DbClient dbclient,CoordinatorClient coordinator,final AuthnProvider authenticationConfiguration,LdapServerList servers,String[] returningAttributes){  GroupWhiteList groupWhiteList=createGroupWhiteList(authenticationConfiguration);  StorageOSLdapPersonAttributeDao attributeRepository=new StorageOSLdapPersonAttributeDao();  attributeRepository.setLdapServers(servers);  attributeRepository.setDbClient(dbclient);  attributeRepository.setGroupWhiteList(groupWhiteList);  if (null != authenticationConfiguration.getMaxPageSize()) {    attributeRepository.setMaxPageSize(authenticationConfiguration.getMaxPageSize());  }  SearchControls searchControls=new SearchControls();  searchControls.setCountLimit(SEARCH_CTL_COUNT_LIMIT);  searchControls.setTimeLimit(SystemPropertyUtil.getLdapConnectionTimeout(coordinator) * 1000);  searchControls.setSearchScope(convertSearchScope(authenticationConfiguration.getSearchScope()));  searchControls.setReturningAttributes(returningAttributes);  attributeRepository.setSearchControls(searchControls);  if (null == authenticationConfiguration.getSearchFilter()) {    throw APIException.badRequests.failedToCreateAuthenticationHandlerSearchFilterCannotBeNull(authenticationConfiguration.getId());  } else {    attributeRepository.setFilter(authenticationConfiguration.getSearchFilter());  }  if (null == authenticationConfiguration.getSearchBase()) {    throw APIException.badRequests.failedToCreateAuthenticationHandlerSearchBaseCannotBeNull(authenticationConfiguration.getId());  } else {    attributeRepository.setBaseDN(authenticationConfiguration.getSearchBase());  }  return attributeRepository;}  }
class C{  private byte[] bytes(int... bytesAsInts){  byte[] bytes=new byte[bytesAsInts.length];  for (int i=0; i < bytesAsInts.length; i++) {    bytes[i]=(byte)bytesAsInts[i];  }  return bytes;}  }
class C{  private static Triple<DirectedAcyclicGraph<Action,DefaultEdge>,Action,Action> processSubcomponents(DirectedAcyclicGraph<Action,DefaultEdge> parentGraph) throws WorkflowGraphException, DirectedAcyclicGraph.CycleFoundException {  ConnectivityInspector<Action,DefaultEdge> inspector=new ConnectivityInspector<>(parentGraph);  List<Set<Action>> connectedComponents=inspector.connectedSets();  List<DirectedAcyclicGraph<Action,DefaultEdge>> componentGraphs=new ArrayList<>(connectedComponents.size());  for (  Set<Action> subComponent : connectedComponents) {    componentGraphs.add(buildComponentGraph(subComponent,parentGraph));  }  DirectedAcyclicGraph<Action,DefaultEdge> result=new DirectedAcyclicGraph<>(DefaultEdge.class);  for (  DirectedAcyclicGraph<Action,DefaultEdge> subSubgraph : componentGraphs) {    Graphs.addGraph(result,subSubgraph);  }  if (componentGraphs.size() > 1) {    Pair<Action,Action> forkJoin=addForkJoin(result);    Action fork=forkJoin.getLeft();    Action join=forkJoin.getRight();    for (    DirectedAcyclicGraph<Action,DefaultEdge> subSubgraph : componentGraphs) {      for (      Action vertex : subSubgraph.vertexSet()) {        if (subSubgraph.inDegreeOf(vertex) == 0) {          result.addDagEdge(fork,vertex);        }        if (subSubgraph.outDegreeOf(vertex) == 0) {          result.addDagEdge(vertex,join);        }      }    }  }  Action noOutgoing=null;  Action noIncoming=null;  for (  Action vertex : result.vertexSet()) {    if (noIncoming == null && result.inDegreeOf(vertex) == 0) {      noIncoming=vertex;    }  }  for (  Action vertex : result.vertexSet()) {    if (noOutgoing == null && result.outDegreeOf(vertex) == 0) {      noOutgoing=vertex;    }  }  return Triple.of(result,noIncoming,noOutgoing);}  }
class C{  public void think(){  if (isStopped() || !isEnabled()) {    return;  }  Network network=getShortTermMemory();  List<Vertex> activeMemory=getBot().memory().getActiveMemory();  for (int i=0; i < activeMemory.size(); i++) {    Vertex vertex=network.createVertex(activeMemory.get(i));    log("Processing",Level.FINER,vertex);    try {      if (vertex.instanceOf(Primitive.INPUT)) {        Vertex input=vertex;        List<Vertex> sentences=new ArrayList<Vertex>();        List<Vertex> responses=new ArrayList<Vertex>();        Vertex inputValue=input.getRelationship(Primitive.INPUT);        if (inputValue != null) {          for (          Vertex sentence : input.orderedRelations(Primitive.INPUT)) {            if (sentence.instanceOf(Primitive.SENTENCE)) {              Vertex paragraph=network.createParagraph(sentence);              if (paragraph.instanceOf(Primitive.PARAGRAPH)) {                sentences.addAll(paragraph.orderedRelations(Primitive.SENTENCE));              } else {                sentences.add(paragraph);              }            } else             if (sentence.instanceOf(Primitive.PARAGRAPH)) {              sentences.addAll(sentence.orderedRelations(Primitive.SENTENCE));            }          }        }        List<Relationship> targets=vertex.orderedRelationships(Primitive.TARGET);        Vertex target=null;        if (targets != null && (targets.size() == 1)) {          target=targets.get(0).getTarget();        }        Vertex speaker=input.mostConscious(Primitive.SPEAKER);        Vertex self=network.createVertex(Primitive.SELF);        Vertex inputSense=input.mostConscious(Primitive.SENSE);        Vertex conversation=input.mostConscious(Primitive.CONVERSATION);        boolean correction=input.hasRelationship(Primitive.ASSOCIATED,Primitive.CORRECTION);        boolean offended=input.hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENDED);        boolean newConversation=(inputValue != null) && (inputValue.is(Primitive.NULL));        LanguageState state=LanguageState.Answering;        Sense sense=null;        if (inputSense != null) {          sense=getBot().awareness().getSense(((Primitive)inputSense.getData()).getIdentity());          if (sense != null) {            state=sense.getLanguageState();          }        }        Vertex output=network.createInstance(Primitive.INPUT);        try {          Vertex response=null;          int index=0;          Map<Vertex,Vertex> variables=new HashMap<Vertex,Vertex>();          SelfCompiler.addGlobalVariables(input,null,network,variables);          if (newConversation) {            response=processGreeting(input,conversation,network,state,variables);            if (response != null) {              this.bot.mood().evaluateResponse(response,null);              this.bot.avatar().evaluateResponse(output,response,null);              responses.add(response);            }          } else {            for (            Vertex sentence : sentences) {              checkQuestion(sentence,network);              if (PROCESS_HTTP) {              }              log("Processing sentence",Level.FINE,sentence,speaker,targets);              if (offended) {                processOffensive(input,speaker,target,conversation,network);              }              if (correction) {                response=processCorrection(input,sentence,speaker,target,conversation,network);              } else               if (state == LanguageState.Associate) {                response=processAssociation(sentence,network);              } else               if ((state == LanguageState.Listening) || (state == LanguageState.ListeningOnly)) {                processListening(input,sentence,speaker,conversation,targets,network,state);                if ((state == LanguageState.Listening) && (target == self)) {                  response=processConversational(input,sentence,conversation,variables,network,state);                } else {                  processUnderstanding(input,sentence,this.conversationMatchPercentage,variables,network);                  return;                }              } else               if (state == LanguageState.Discussion) {                processListening(input,sentence,speaker,conversation,targets,network,state);                if (target == self) {                  response=processConversational(input,sentence,conversation,variables,network,state);                } else                 if ((targets == null) || targets.isEmpty() || (targets.size() > 1)) {                  response=processDiscussion(input,sentence,conversation,variables,network);                } else {                  processUnderstanding(input,sentence,this.conversationMatchPercentage,variables,network);                  log("Discussion response to other",Level.FINE,targets);                }              } else               if (state == LanguageState.Conversational) {                processListening(input,sentence,speaker,conversation,targets,network,state);                response=processConversational(input,sentence,conversation,variables,network,state);              } else               if (state == LanguageState.Answering) {                processListening(input,sentence,speaker,conversation,targets,network,state);                response=processConversational(input,sentence,conversation,variables,network,state);              }              if ((response != null) && response.instanceOf(Primitive.LABEL)) {                response=response.mostConscious(Primitive.RESPONSE);              }              if ((response != null) && response.instanceOf(Primitive.FORMULA)) {                log("Response is template formula",Level.FINE,response);                Vertex result=evaluateFormula(response,variables,network);                if (result == null) {                  log("Template formula cannot be evaluated",Level.FINE,response);                  response=null;                } else {                  response=getWord(result,network);                }              }              if ((response != null) && !(response.getData() instanceof String)) {                response=getWord(response,network);              }              if (response == null || (!(response.getData() instanceof String) && !response.instanceOf(Primitive.PARAGRAPH))) {                if (state == LanguageState.Answering) {                  response=sentence;                } else {                  continue;                }              }              log("Response",Level.INFO,response,speaker,conversation);              index++;              if ((sentences.size() == 1) || sentence.instanceOf(Primitive.QUESTION) || (index == sentences.size())) {                if (!response.hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE)) {                  Vertex meta=null;                  if (this.lastResponseMetaId != null) {                    meta=network.findById(this.lastResponseMetaId);                    this.lastResponseMetaId=null;                  }                  this.bot.mood().evaluateResponse(response,meta);                  this.bot.avatar().evaluateResponse(output,response,meta);                  responses.add(response);                } else {                  response=checkDuplicateOrOffensiveResponse(response,sentence,conversation,input,variables,network,true,false);                  if (!response.hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE)) {                    Vertex meta=null;                    if (this.lastResponseMetaId != null) {                      meta=network.findById(this.lastResponseMetaId);                      this.lastResponseMetaId=null;                    }                    this.bot.mood().evaluateResponse(response,meta);                    this.bot.avatar().evaluateResponse(output,response,meta);                    responses.add(response);                  }                }              }            }          }          if (responses.isEmpty()) {            if (sense != null) {              sense.notifyExceptionListeners(new BotException("No response"));            }            return;          }          if (inputSense != null) {            output.addRelationship(Primitive.SENSE,inputSense);          }          if (speaker != null) {            output.addRelationship(Primitive.TARGET,speaker);          }          Vertex topic=input.mostConscious(Primitive.TOPIC);          if (topic != null) {            output.addRelationship(Primitive.TOPIC,topic);          }          if (input.hasRelationship(Primitive.ASSOCIATED,Primitive.WHISPER)) {            output.addRelationship(Primitive.ASSOCIATED,Primitive.WHISPER);          }          if (!newConversation) {            output.addRelationship(Primitive.QUESTION,input);            input.addRelationship(Primitive.RESPONSE,output);          }          output.addRelationship(Primitive.SPEAKER,self);          if (responses.get(0).getData() != null) {            output.setName(responses.get(0).getData().toString());          }          if (responses.size() == 1) {            if (this.wasMimic) {              output.addRelationship(Primitive.MIMIC,input);            }            response=responses.get(0);            output.addRelationship(Primitive.INPUT,response);            Collection<Relationship> actions=response.getRelationships(Primitive.ACTION);            if (actions != null) {              for (              Relationship relationship : actions) {                output.addWeakRelationship(Primitive.ACTION,relationship.getTarget(),relationship.getCorrectness());              }            }            Collection<Relationship> poses=response.getRelationships(Primitive.POSE);            if (poses != null) {              for (              Relationship relationship : poses) {                output.addWeakRelationship(Primitive.POSE,relationship.getTarget(),relationship.getCorrectness());              }            }          } else {            Vertex paragraph=network.createInstance(Primitive.PARAGRAPH);            index=0;            for (            Vertex each : responses) {              paragraph.addRelationship(Primitive.SENTENCE,each,index);              index++;              Collection<Relationship> actions=each.getRelationships(Primitive.ACTION);              if (actions != null) {                for (                Relationship relationship : actions) {                  output.addWeakRelationship(Primitive.ACTION,relationship.getTarget(),relationship.getCorrectness());                }              }              Collection<Relationship> poses=response.getRelationships(Primitive.POSE);              if (poses != null) {                for (                Relationship relationship : poses) {                  output.addWeakRelationship(Primitive.POSE,relationship.getTarget(),relationship.getCorrectness());                }              }            }            output.addRelationship(Primitive.INPUT,paragraph);          }          if (conversation != null) {            Language.addToConversation(output,conversation);          }          this.wasMimic=false;          output.setCreationDate(new Date());          getBot().memory().save();          getBot().awareness().output(output);        } catch (        RuntimeException exception) {          if (sense != null) {            sense.notifyExceptionListeners(exception);          }          throw exception;        }      }    }  finally {      this.recursiveInputDepth=0;      this.recursiveFormulaDepth=0;      this.startTime=0;      this.abort=false;    }  }}  }
class C{  @Override public XMLEvent peek() throws XMLStreamException {  log.log(Level.FINE,"peek()");  if (!hasNext()) {    throw new XMLStreamException("The reader is depleted!");  }  log.log(Level.FINE,"peek(): {0}",nextEvent);  return nextEvent;}  }
class C{  private void addNewLineAtBottom(RecyclerView.Recycler recycler){  int x=layoutStartPoint().x, y=getDecoratedBottom(getChildAt(getMaxHeightLayoutPositionInLine(getChildCount() - 1)));  int childAdapterPosition=getChildAdapterPosition(getChildCount() - 1) + 1;  if (childAdapterPosition == getItemCount()) {    return;  }  Rect rect=new Rect();  boolean newline;  boolean firstItem=true;  LayoutContext layoutContext=LayoutContext.fromLayoutOptions(flowLayoutOptions);  while (childAdapterPosition < getItemCount()) {    View newChild=recycler.getViewForPosition(childAdapterPosition);    newline=calcChildLayoutRect(newChild,x,y,0,layoutContext,rect);    cacheHelper.setItem(childAdapterPosition,new Point(rect.width(),rect.height()));    if (newline && !firstItem) {      recycler.recycleView(newChild);      layoutContext.currentLineItemCount=1;      return;    } else {      addView(newChild);      layoutDecorated(newChild,rect.left,rect.top,rect.right,rect.bottom);      x=advanceInSameLine(x,rect,layoutContext);      childAdapterPosition++;      firstItem=false;      layoutContext.currentLineItemCount++;    }  }}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ECFieldFp) {    return (this.p.equals(((ECFieldFp)obj).p));  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=false;  if (curNumberOfParameters == 2) {    thumb=evalBool(stack.pop());  }  SeriesInfo si=getSeriesInfo(stack);  if (si == null)   return null;  String imageURL=si.getImageURL(thumb);  if (imageURL == null || imageURL.length() == 0)   return null; else   return imageURL;}  }
class C{  public void toEPL(StringWriter writer){  writer.write("create ");  if (unique) {    writer.write("unique ");  }  writer.write("index ");  writer.write(indexName);  writer.write(" on ");  writer.write(windowName);  writer.write('(');  String delimiter="";  for (  CreateIndexColumn prop : columns) {    writer.write(delimiter);    prop.toEPL(writer);    delimiter=", ";  }  writer.write(')');}  }
class C{  public boolean isAuthenticationByCertificateNeeded(){  return authenticationByCertificateNeeded;}  }
class C{  public boolean wasCancelled(){  return cancelled;}  }
class C{  public Object removeNondestructively(int index){  if (index >= numObjs)   throw new ArrayIndexOutOfBoundsException(index);  Object ret=objs[index];  if (index < numObjs - 1)   System.arraycopy(objs,index + 1,objs,index,numObjs - index - 1);  objs[numObjs - 1]=null;  numObjs--;  return ret;}  }
class C{  @PatchMethod(override=true) public static <T>List<T> create(){  return mock(List.class);}  }
class C{  protected void handleRemoved(final RPEntity entity){}  }
class C{  public void remove(Object element){  remove(new Object[]{element});}  }
class C{  public int status(){  return status;}  }
class C{  public void testResultSetMetadate() throws Exception {  final int rows=1;  final int tables=10;  final int columns=100;  Statement st=con.createStatement();  StringBuilder sb=new StringBuilder();  try {    for (int t=0; t < tables; t++) {      sb.setLength(0);      sb.append("create table #TABLE");      sb.append(t);      sb.append("(ID int primary key");      for (int c=0; c < columns; c++) {        sb.append(",COLUMN");        sb.append(c);        sb.append(" int");      }      sb.append(")");      st.execute(sb.toString());    }    for (int t=0; t < tables; t++) {      sb.setLength(0);      sb.append("insert into #TABLE");      sb.append(t);      sb.append(" values(?");      for (int c=0; c < columns; c++) {        sb.append(",?");      }      sb.append(")");      PreparedStatement pst=con.prepareStatement(sb.toString());      for (int r=0; r < rows; r++) {        for (int c=0; c <= columns; c++) {          pst.setInt(c + 1,r);        }        pst.addBatch();      }      Assert.assertEquals(rows,pst.executeBatch().length);    }    sb.setLength(0);    sb.append("select * from ");    for (int t=0; t < tables; t++) {      sb.append(t > 0 ? "," : "");      sb.append("#TABLE");      sb.append(t);    }    if (tables > 1) {      sb.append(" where ");      for (int t=1; t < tables; t++) {        sb.append(t > 1 ? " and " : "");        sb.append("#TABLE");        sb.append(t);        sb.append(".id=");        sb.append("#TABLE");        sb.append(t - 1);        sb.append(".id");      }    }    ResultSet rs=st.executeQuery(sb.toString());    ResultSetMetaData rsmd=rs.getMetaData();    int toalColumns=rsmd.getColumnCount();    Assert.assertEquals(tables * (columns + 1),toalColumns);    for (int r=0; r < rows; r++) {      assertTrue(rs.next());    }    int index=0;    for (int t=0; t < tables; t++) {      for (int c=1; c <= columns + 1; c++) {        index++;        Assert.assertEquals(c > 1 ? ("COLUMN" + (c - 2)) : "ID",rsmd.getColumnName(index));        Assert.assertEquals(Types.INTEGER,rsmd.getColumnType(index));        Assert.assertEquals("#TABLE" + t,rsmd.getTableName(index));      }    }  }  finally {    for (int t=0; t < tables; t++) {      dropTable("#TABLE" + t);    }  }}  }
class C{  public boolean isHeading(){  Object oo=get_Value(COLUMNNAME_IsHeading);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected void update(){  super.update();  chart.fireChartChanged();  updateToolBar();  dimsLabel.setText("     Dimensions: " + getWorkspaceComponent().getProjector().getUpstairs().getDimensions());  pointsLabel.setText("  Datapoints: " + getWorkspaceComponent().getProjector().getDownstairs().getNumPoints());  if (getWorkspaceComponent().getProjector().getProjectionMethod().isIterable()) {    errorLabel.setText(" Error:" + ((IterableProjectionMethod)getWorkspaceComponent().getProjector().getProjectionMethod()).getError());  }  repaint();}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void removeProxy(DistributedMember member,ObjectName objectName,Object oldVal){  try {    if (logger.isDebugEnabled()) {      logger.debug("Removing proxy for ObjectName: {}",objectName);    }    if (!remoteFilterChain.isRemoteMBeanFiltered(objectName)) {      ProxyInfo proxyInfo=proxyRepo.findProxyInfo(objectName);      proxyRepo.removeProxy(member,objectName);      if (proxyInfo != null) {        service.afterRemoveProxy(objectName,proxyInfo.getProxyInterface(),proxyInfo.getProxyInstance(),(FederationComponent)oldVal);      }      jmxAdapter.unregisterMBean(objectName);      if (logger.isDebugEnabled()) {        logger.debug("Removed proxy for ObjectName: {}",objectName);      }    }  } catch (  Exception e) {    if (!(e.getCause() instanceof InstanceNotFoundException)) {      logger.warn("Could not remove proxy for Member {} due to {}",member,e.getMessage(),e);    }  }}  }
class C{  public Label(long labelId,String packageName,String packageSignature,String viewName,String text,String locale,int packageVersion,String screenshotPath,long timestampMillis){  mId=labelId;  mPackageName=packageName;  mPackageSignature=packageSignature;  mViewName=viewName;  mText=text;  mLocale=locale;  mPackageVersion=packageVersion;  mScreenshotPath=screenshotPath;  mTimestampMillis=timestampMillis;}  }
class C{  public boolean MV(){  if (this.cmd.length != 3) {    log.warn("Syntax: MV <from> <to>");    return true;  }  if (notConnected()) {    return LMV();  }  try {    send("RNFR " + this.cmd[1]);    String reply=receive();    if (isNotPositiveCompletion(reply)) {      throw new IOException(reply);    }    send("RNTO " + this.cmd[2]);    reply=receive();    if (isNotPositiveCompletion(reply)) {      throw new IOException(reply);    }  } catch (  final IOException e) {    log.warn("Error: rename of " + this.cmd[1] + " to "+ this.cmd[2]+ " failed.");  }  return true;}  }
class C{  public void markLoggerStarting(long nextMessageInputTime) throws AdeException {  if (m_messageInputDateTime == null) {    return;  }  long prevMessageInputTime=m_messageInputDateTime.getMillis();  if (prevMessageInputTime % TEN_MINUTES > 0) {    prevMessageInputTime=TEN_MINUTES * (prevMessageInputTime / TEN_MINUTES) + TEN_MINUTES;  }  final DateTime prevMessageDateTime=new DateTime(prevMessageInputTime).withZone(s_outTimeZone);  nextMessageInputTime=TEN_MINUTES * (nextMessageInputTime / TEN_MINUTES);  final DateTime nextMessageDateTime=new DateTime(nextMessageInputTime).withZone(s_outTimeZone);  final long skippedInterval=(nextMessageInputTime - prevMessageInputTime) / TEN_MINUTES;  if (skippedInterval > 0) {    final DateTime dateTime=m_messageInputDateTime;    final String dateStr=s_dateTimeFormatter.print(dateTime);    final String reportString=m_source + ", " + dateStr+ ", Logger Unavailable For (10 min intervals)="+ skippedInterval+ ", emptyIntervalStart="+ s_dateTimeFormatter.print(prevMessageDateTime)+ ", emptyIntervalEnd="+ s_dateTimeFormatter.print(nextMessageDateTime);    statsLogger.info(reportString);  }}  }
class C{  public boolean userCanDeleteGroupUser(int connectedUserId,int groupId,String entidad) throws Exception {  boolean can=false;  try {    can=userCanEditGroup(connectedUserId,groupId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public Vector2i sub(int x,int y,Vector2i dest){  dest.x=this.x - x;  dest.y=this.y - y;  return dest;}  }
class C{  public void loadConf(DistributedLogConfiguration baseConf){  addConfiguration(baseConf);}  }
class C{  public CertificateException(){  super();}  }
class C{  private void reMeasureHeights(){  old_FirstVisiblePosition=old_LastVisiblePosition=0;  getInnerScrollY();}  }
class C{  private ASTRewrite generateForRewrite(AST ast){  ASTRewrite rewrite=ASTRewrite.create(ast);  ForStatement loopStatement=ast.newForStatement();  SimpleName loopVariableName=resolveLinkedVariableNameWithProposals(rewrite,"int",null,true);  loopStatement.initializers().add(getForInitializer(ast,loopVariableName));  FieldAccess getArrayLengthExpression=ast.newFieldAccess();  getArrayLengthExpression.setExpression((Expression)rewrite.createCopyTarget(fCurrentExpression));  getArrayLengthExpression.setName(ast.newSimpleName("length"));  loopStatement.setExpression(getLinkedInfixExpression(rewrite,loopVariableName.getIdentifier(),getArrayLengthExpression,InfixExpression.Operator.LESS));  loopStatement.updaters().add(getLinkedIncrementExpression(rewrite,loopVariableName.getIdentifier()));  Block forLoopBody=ast.newBlock();  forLoopBody.statements().add(ast.newExpressionStatement(getForBodyAssignment(rewrite,loopVariableName)));  forLoopBody.statements().add(createBlankLineStatementWithCursorPosition(rewrite));  loopStatement.setBody(forLoopBody);  rewrite.replace(fCurrentNode,loopStatement,null);  return rewrite;}  }
class C{  public int hashCode(){  int iCode=0;  for (  int anIV : iV) {    iCode=(iCode * 75) + anIV;  }  return iCode;}  }
class C{  private void endWorkFlow(final BasicPropertyImpl basicProperty){  LOGGER.debug("endWorkFlow: Workflow will end for Property: " + property);  property.transition().end();  basicProperty.setUnderWorkflow(false);  LOGGER.debug("Exit method endWorkFlow, Workflow ended");}  }
class C{  public FileTransferRequest(FileTransferManager manager,StreamInitiation si){  this.streamInitiation=si;  this.manager=manager;}  }
class C{  public Frustum(){  this(new Plane(1,0,0,1),new Plane(-1,0,0,1),new Plane(0,1,0,1),new Plane(0,-1,0,1),new Plane(0,0,-1,1),new Plane(0,0,1,1));}  }
class C{  public void mkdir(String path,boolean ignoreErrors) throws ReplicatorException {  FilePath remote=new FilePath(path);  try {    if (ignoreErrors)     hdfsFileIO.mkdirs(remote); else     hdfsFileIO.mkdir(remote);  } catch (  FileIOException e) {    throw new ReplicatorException("Unable to create directory: hdfs path=" + path + " message="+ e.getMessage(),e);  }}  }
class C{  public static List<LoadMetadataDetails> identifySegmentsToBeMerged(String storeLocation,CarbonLoadModel carbonLoadModel,int partitionCount,long compactionSize,List<LoadMetadataDetails> segments,CompactionType compactionType){  List sortedSegments=new ArrayList(segments);  sortSegments(sortedSegments);  List<LoadMetadataDetails> listOfSegmentsAfterPreserve=checkPreserveSegmentsPropertyReturnRemaining(sortedSegments);  List<LoadMetadataDetails> listOfSegmentsLoadedInSameDateInterval=identifySegmentsToBeMergedBasedOnLoadedDate(listOfSegmentsAfterPreserve);  List<LoadMetadataDetails> listOfSegmentsToBeMerged;  if (compactionType.equals(CompactionType.MAJOR_COMPACTION)) {    listOfSegmentsToBeMerged=identifySegmentsToBeMergedBasedOnSize(compactionSize,listOfSegmentsLoadedInSameDateInterval,carbonLoadModel,partitionCount,storeLocation);  } else {    listOfSegmentsToBeMerged=identifySegmentsToBeMergedBasedOnSegCount(listOfSegmentsLoadedInSameDateInterval);  }  return listOfSegmentsToBeMerged;}  }
class C{  public StrBuilder insert(int index,boolean value){  validateIndex(index);  if (value) {    ensureCapacity(size + 4);    System.arraycopy(buffer,index,buffer,index + 4,size - index);    buffer[index++]='t';    buffer[index++]='r';    buffer[index++]='u';    buffer[index]='e';    size+=4;  } else {    ensureCapacity(size + 5);    System.arraycopy(buffer,index,buffer,index + 5,size - index);    buffer[index++]='f';    buffer[index++]='a';    buffer[index++]='l';    buffer[index++]='s';    buffer[index]='e';    size+=5;  }  return this;}  }
class C{  public void resetMetrics(){  assert prj instanceof IgniteCluster;  ((IgniteCluster)prj).resetMetrics();}  }
class C{  public static void incrementalUpdate(DoubleArrayList data,int from,int to,double[] inOut){  checkRangeFromTo(from,to,data.size());  double min=inOut[0];  double max=inOut[1];  double sum=inOut[2];  double sumSquares=inOut[3];  double[] elements=data.elements();  for (; from <= to; from++) {    double element=elements[from];    sum+=element;    sumSquares+=element * element;    if (element < min)     min=element;    if (element > max)     max=element;  }  inOut[0]=min;  inOut[1]=max;  inOut[2]=sum;  inOut[3]=sumSquares;}  }
class C{  private void addTextToString(String text,StringBuilder stringBuilder){  if (stringBuilder.length() > 0) {    stringBuilder.append(", ");  }  stringBuilder.append(text);}  }
class C{  public Xform(RotateOrder rotateOrder){  super();switch (rotateOrder) {case XYZ:    getTransforms().addAll(t,p,rz,ry,rx,s,ip);  break;case XZY:getTransforms().addAll(t,p,ry,rz,rx,s,ip);break;case YXZ:getTransforms().addAll(t,p,rz,rx,ry,s,ip);break;case YZX:getTransforms().addAll(t,p,rx,rz,ry,s,ip);break;case ZXY:getTransforms().addAll(t,p,ry,rx,rz,s,ip);break;case ZYX:getTransforms().addAll(t,p,rx,ry,rz,s,ip);break;}}  }
class C{  protected void publish() throws MqttException, IOException {  sampleClientPub=new SampleAsyncWait(url,clientIdPub,cleanSession,quietMode,userName,password);  if (sampleClientPub != null) {    String topic="Sample/Java/v3";    int qos=2;    String message="Message from async calback MQTTv3 Java client sample";    try {      sampleClientPub.publish(topic,qos,message.getBytes());    } catch (    Throwable e) {      e.printStackTrace();    }  }}  }
class C{  @Override protected void addTestJob(final IResource target){  IJavaElement element=JavaCore.create(target);  IJavaElement packageElement=element.getParent();  String packageName=packageElement.getElementName();  final String suiteClass=(!packageName.equals("") ? packageName + "." : "") + target.getName().replace(".java","").replace(File.separator,".");  System.out.println("Building new job for " + suiteClass);  DetermineSUT det=new DetermineSUT();  IJavaProject jProject=JavaCore.create(target.getProject());  try {    String classPath=target.getWorkspace().getRoot().findMember(jProject.getOutputLocation()).getLocation().toOSString();    String SUT=det.getSUTName(suiteClass,classPath);    SelectionDialog typeDialog=JavaUI.createTypeDialog(shell,new ProgressMonitorDialog(shell),target.getProject(),IJavaElementSearchConstants.CONSIDER_CLASSES,false);    Object[] sutDefault=new Object[1];    sutDefault[0]=SUT;    typeDialog.setInitialSelections(sutDefault);    typeDialog.setTitle("Please select the class under test");    typeDialog.open();    Object[] result=typeDialog.getResult();    if (result.length > 0) {      SourceType sourceType=(SourceType)result[0];      SUT=sourceType.getFullyQualifiedName();    } else {      return;    }    Job job=new TestExtensionJob(shell,target,SUT,suiteClass);    job.setPriority(Job.SHORT);    IResourceRuleFactory ruleFactory=ResourcesPlugin.getWorkspace().getRuleFactory();    ISchedulingRule rule=ruleFactory.createRule(target.getProject());    job.setRule(rule);    job.setUser(true);    job.schedule();  } catch (  JavaModelException e) {    e.printStackTrace();  }catch (  NoJUnitClassException e) {    MessageDialog.openError(shell,"Evosuite","Cannot find JUnit tests in " + suiteClass);  }}  }
class C{  private void calculateCurrentOffsets(){  final float fraction=mExpandedFraction;  mCurrentDrawX=interpolate(mExpandedDrawX,mCollapsedDrawX,fraction);  mCurrentDrawY=interpolate(mExpandedDrawY,mCollapsedDrawY,fraction);  setInterpolatedValues(interpolate(mfExpandedTextSize,mfCollapsedTextSize,fraction));  if (mCollapsedTextColor != mExpandedTextColor) {    mTextPaint.setColor(blendColors(mExpandedTextColor,mCollapsedTextColor,fraction));  } else {    mTextPaint.setColor(mCollapsedTextColor);  }  ViewCompat.postInvalidateOnAnimation(this);}  }
class C{  public Bidi(AttributedCharacterIterator paragraph){  if (paragraph == null) {    throw new IllegalArgumentException("paragraph is null");  }  bidiBase=new BidiBase(0,0);  bidiBase.setPara(paragraph);}  }
class C{  final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  while ((next=next.next) != null) {    Object x=next.value;    if (x != null && x != next) {      @SuppressWarnings("unchecked") V vv=(V)x;      nextValue=vv;      break;    }  }}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  if (m_inCData) {    cdata(ch,start,length);    return;  }  String s=new String(ch,start,length);  Node childNode;  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {    ((Text)childNode).appendData(s);  } else {    Text text=m_doc.createTextNode(s);    append(text);  }}  }
class C{  public TextEditGroup(String name){  super();  fDescription=name;  fEdits=new ArrayList(3);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Transfer writeBytes(byte[] data) throws IOException {  if (data == null) {    writeInt(-1);  } else {    writeInt(data.length);    out.write(data);  }  return this;}  }
class C{  public UnrecognizedOptionException(String message){  super(message);}  }
class C{  public double noise(double x,double y,double z,double frequency,double amplitude){  return this.noise(x,y,z,frequency,amplitude,false);}  }
class C{  public Y lt(String value){  if (value == null || value.trim().length() == 0) {    return super.lt((Long)null);  } else {    return super.lt(Long.parseLong(value.trim()));  }}  }
class C{  public void paint(Graphics g){}  }
class C{  public String generateSentence(){  String nextWord="";  Vector<String> startWords=chain.get("_start");  int startWordsLen=startWords.size();  if (startWordsLen == 0) {    String error="The most likely cause is that the phrases you tried to use never occurred in Star Trek";    System.out.println(error);    ChainBuilder.THIS.setLabel(error);  }  while (nextWord.isEmpty()) {    nextWord=startWords.get(rand.nextInt(startWordsLen));  }  return generateSentenceWithSeed(nextWord);}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Deprecated protected final Class<?> defineClass(byte[] classRep,int offset,int length) throws ClassFormatError {  return defineClass(null,classRep,offset,length);}  }
class C{  private void writeSkeletonDispatchCase(IndentingWriter p,int opnum) throws IOException {  RemoteClass.Method method=remoteMethods[opnum];  Identifier methodName=method.getName();  Type methodType=method.getType();  Type paramTypes[]=methodType.getArgumentTypes();  String paramNames[]=nameParameters(paramTypes);  Type returnType=methodType.getReturnType();  p.pOlnI("case " + opnum + ": // "+ methodType.typeString(methodName.toString(),true,false));  p.pOlnI("{");  if (paramTypes.length > 0) {    for (int i=0; i < paramTypes.length; i++) {      p.pln(paramTypes[i] + " " + paramNames[i]+ ";");    }    p.plnI("try {");    p.pln("java.io.ObjectInput in = call.getInputStream();");    boolean objectsRead=writeUnmarshalArguments(p,"in",paramTypes,paramNames);    p.pOlnI("} catch (java.io.IOException e) {");    p.pln("throw new " + idUnmarshalException + "(\"error unmarshalling arguments\", e);");    if (objectsRead) {      p.pOlnI("} catch (java.lang.ClassNotFoundException e) {");      p.pln("throw new " + idUnmarshalException + "(\"error unmarshalling arguments\", e);");    }    p.pOlnI("} finally {");    p.pln("call.releaseInputStream();");    p.pOln("}");  } else {    p.pln("call.releaseInputStream();");  }  if (!returnType.isType(TC_VOID)) {    p.p(returnType + " $result = ");  }  p.p("server." + methodName + "(");  for (int i=0; i < paramNames.length; i++) {    if (i > 0)     p.p(", ");    p.p(paramNames[i]);  }  p.pln(");");  p.plnI("try {");  if (!returnType.isType(TC_VOID)) {    p.p("java.io.ObjectOutput out = ");  }  p.pln("call.getResultStream(true);");  if (!returnType.isType(TC_VOID)) {    writeMarshalArgument(p,"out",returnType,"$result");    p.pln(";");  }  p.pOlnI("} catch (java.io.IOException e) {");  p.pln("throw new " + idMarshalException + "(\"error marshalling return\", e);");  p.pOln("}");  p.pln("break;");  p.pOlnI("}");  p.pln();}  }
class C{  public static StorageFaultE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageFaultE object=new StorageFaultE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageFault".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageFaultE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","StorageFault").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setStorageFault(null);        reader.next();        reader.next();      } else {        object.setStorageFault(StorageFault.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override protected boolean isVisibleGhost(){  return true;}  }
class C{  public void registerDiffAction(@NotNull AnAction diffAction){  diffAction.registerCustomShortcutSet(diffAction.getShortcutSet(),myTable);}  }
class C{  public void write(OutputNode node,Object object) throws Exception {  Collection list=(Collection)object;  OutputNode parent=node.getParent();  for (  Object item : list) {    primitive.write(parent,item);  }}  }
class C{  public Builder subscript(){  this.subscript=true;  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static com.linkedin.camus.example.records.DummyLog2.Builder newBuilder(com.linkedin.camus.example.records.DummyLog2 other){  return new com.linkedin.camus.example.records.DummyLog2.Builder(other);}  }
class C{  protected void performHighlight(Highlight h,MotionEvent e){  if (h == null || h.equalTo(mLastHighlighted)) {    mChart.highlightTouch(null);    mLastHighlighted=null;  } else {    mLastHighlighted=h;    mChart.highlightTouch(h);  }}  }
class C{  @Override protected void doGet(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  @SuppressWarnings("unchecked") final Set<URI> externalURIs=(Set<URI>)req.getAttribute(ATTR_DESCRIBE_URIS);  if (externalURIs == null) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Request attribute not found: " + ATTR_DESCRIBE_URIS);    return;  }  final int nvalues=externalURIs.size();  if (nvalues == 0) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"No URIs");    return;  }  final BigdataRDFContext context=getBigdataRDFContext();  final QueryEngine queryEngine=QueryEngineFactory.getInstance().getQueryController(context.getIndexManager());  final ICacheConnection cacheConn=CacheConnectionFactory.getExistingCacheConnection(queryEngine);  final String namespace=getNamespace(req);  final long timestamp=getTimestamp(req);  final IDescribeCache describeCache=cacheConn == null ? null : cacheConn.getDescribeCache(namespace,timestamp);  if (describeCache == null) {    resp.setStatus(HTTP_NOTFOUND);    return;  }  final AbstractTripleStore tripleStore=context.getTripleStore(namespace,timestamp);  if (tripleStore == null) {    buildAndCommitNamespaceNotFoundResponse(req,resp);    return;  }  final Set<BigdataURI> internalURIs=new LinkedHashSet<BigdataURI>();{    final BigdataValueFactory valueFactory=tripleStore.getValueFactory();    for (    URI uri : externalURIs) {      internalURIs.add(valueFactory.asValue(uri));    }  }{    final BigdataValue[] values=internalURIs.toArray(new BigdataValue[nvalues]);    final long numNotFound=tripleStore.getLexiconRelation().addTerms(values,nvalues,true);    if (log.isInfoEnabled())     log.info("Not found: " + numNotFound + " out of "+ values.length);  }  Graph g=null;{    for (    BigdataURI uri : internalURIs) {      final IV<?,?> iv=uri.getIV();      final Graph x=describeCache.lookup(iv);      if (x != null && g == null) {        if (nvalues == 1) {          g=x;        } else {          g=new GraphImpl();          g.addAll(x);        }      }    }    if (g == null) {      resp.setStatus(HTTP_NOTFOUND);      return;    }  }  final RDFFormat format;{    final String acceptStr=req.getHeader("Accept");    final ConnegUtil util=new ConnegUtil(acceptStr);    format=util.getRDFFormat(RDFFormat.RDFXML);  }  try {    final String mimeType=format.getDefaultMIMEType();    resp.setContentType(mimeType);    if (isAttachment(mimeType)) {      resp.setHeader("Content-disposition","attachment; filename=query" + UUID.randomUUID() + "."+ format.getDefaultFileExtension());    }    if (format.hasCharset()) {      resp.setCharacterEncoding(format.getCharset().name());    }    final OutputStream os=resp.getOutputStream();    final RDFWriter w=RDFWriterRegistry.getInstance().get(format).getWriter(os);    w.startRDF();    for (    Statement s : g)     w.handleStatement(s);    w.endRDF();    os.flush();  } catch (  Throwable e) {    BigdataRDFServlet.launderThrowable(e,resp,"DESCRIBE: uris=" + internalURIs);  }}  }
class C{  public String rewriteLink(final String link,final String requestHost){  String newLink=link;  try {    URI uri=new URI(link);    String linkHost=uri.getHost();    if (linkHost == null || linkHost.equals(requestHost)) {      String path=uri.getPath();      path=StringUtils.removeStart(path,"/content");      if (systemSettingsService != null && systemSettingsService.getExtensionlessUrls() && StringUtils.isNotBlank(link)) {        path=StringUtils.removeEnd(path,".html");        path=StringUtils.removeEnd(path,"index");        if (!"/".equals(path)) {          path=StringUtils.removeEnd(path,"/");        }      } else       if (StringUtils.isNotBlank(path) && !path.endsWith("/") && !path.endsWith(".html")) {        path=path.concat(".html");      }      newLink=new URI(uri.getScheme(),uri.getUserInfo(),uri.getHost(),uri.getPort(),path,uri.getQuery(),uri.getFragment()).toString();    }  } catch (  URISyntaxException e) {    LOGGER.error("Could not rewrite link do to link syntax.",e);  }  return newLink;}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public boolean isNew(){  return m_isNew;}  }
class C{  public static String formatInterval(int s){  boolean neg=s < 0;  s=Math.abs(s);  int d=s / 86400;  int h=s % 86400 / 3600;  int m=s % 3600 / 60;  s=s % 60;  StringBuilder buffer=new StringBuilder();  if (neg) {    buffer.append('-');  }  if (d > 0) {    buffer.append(d).append(d == 1 ? " day " : " days ");  }  buffer.append(String.format("%02d:%02d:%02d",h,m,s));  return buffer.toString();}  }
class C{  public static Vector<Object> errorAsVector(String msgId){  Vector<Object> err=new Vector<Object>();  err.add(errorAsString(msgId));  return err;}  }
class C{  public JBBPFieldStruct parse(final InputStream in) throws IOException {  return this.parse(in,null,null);}  }
class C{  public static void closeQuietly(PooledConnection con){  if (con == null) {    return;  }  try {    con.close();  } catch (  SQLException ex) {  }}  }
class C{  public static boolean areNBTCompoundsEquals(NBTTagCompound a,NBTTagCompound b,List<String> exclusions){  Stack<String> tagOwners=new Stack<String>();  Stack<NBTTagCompound> aTagCompounds=new Stack<NBTTagCompound>();  Stack<NBTTagCompound> bTagCompounds=new Stack<NBTTagCompound>();  tagOwners.push("");  aTagCompounds.push(a);  bTagCompounds.push(b);  while (!aTagCompounds.isEmpty()) {    String tagOwner=tagOwners.pop();    NBTTagCompound aCurrentTagCompound=aTagCompounds.pop();    NBTTagCompound bCurrentTagCompound=bTagCompounds.pop();    Set<String> aKeys=aCurrentTagCompound.getKeySet();    Set<String> bKeys=bCurrentTagCompound.getKeySet();    for (    String key : bKeys) {      if (exclusions.contains(key)) {        continue;      }      if (!aKeys.contains(key)) {        return false;      }    }    for (    String key : aKeys) {      String totalKey=tagOwner == "" ? key : tagOwner + '.' + key;      if (exclusions.contains(totalKey)) {        continue;      }      NBTBase aTag=aCurrentTagCompound.getTag(key);      NBTBase bTag=bCurrentTagCompound.getTag(key);      if (aTag instanceof NBTTagCompound && bTag instanceof NBTTagCompound) {        tagOwners.push(totalKey);        aTagCompounds.push((NBTTagCompound)aTag);        bTagCompounds.push((NBTTagCompound)bTag);      } else {        if (!aTag.equals(bTag)) {          return false;        }      }    }  }  return true;}  }
class C{  private String parseNumber(String info){  boolean hasPoint=info.indexOf('.') != -1;  boolean hasComma=info.indexOf(',') != -1;  if (hasComma && m_decimalPoint.equals("."))   info=info.replace(',',' ');  if (hasPoint && m_decimalPoint.equals(","))   info=info.replace('.',' ');  hasComma=info.indexOf(',') != -1;  if (hasComma && m_decimalPoint.equals(","))   info=info.replace(',','.');  char[] charArray=info.toCharArray();  StringBuffer sb=new StringBuffer();  for (int i=0; i < charArray.length; i++)   if (Character.isDigit(charArray[i]) || charArray[i] == '.' || charArray[i] == '-')   sb.append(charArray[i]);  if (sb.length() == 0)   return "0";  BigDecimal bd=new BigDecimal(sb.toString());  if (m_divideBy100)   bd=bd.divide(new BigDecimal(100.0),2,BigDecimal.ROUND_HALF_UP);  return bd.toString();}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  void sendReadCommand(int locoIOAddress,int locoIOSubAddress,int cv){  reading=true;  tc.sendLocoNetMessage(LocoIO.readCV(locoIOAddress,locoIOSubAddress,cv));  startTimer();}  }
class C{  private CReferenceFinder(){}  }
class C{  public boolean maxValue(double val,double maxVal){  return GenericValidator.maxValue(val,maxVal);}  }
class C{  private PostgreSQLFunctionNodeLoader(){}  }
class C{  public void paint(Graphics g){  graphics.render(g);}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  public void deleteTag(int tagId,int ifdId){  mData.removeTag(getTrueTagKey(tagId),ifdId);}  }
class C{  public static synchronized SortedProperties loadProperties(String fileName) throws IOException {  SortedProperties prop=new SortedProperties();  if (FileUtils.exists(fileName)) {    InputStream in=null;    try {      in=FileUtils.newInputStream(fileName);      prop.load(in);    }  finally {      if (in != null) {        in.close();      }    }  }  return prop;}  }
class C{  public List<ResultSet> query(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy){  Cursor cursor=null;  try {    openDB();    cursor=mSQLiteDatabase.query(table,columns,selection,selectionArgs,groupBy,having,orderBy);    if (cursor.getCount() < 1) {      return null;    } else {      List<ResultSet> resultList=new ArrayList<ResultSet>();      parseCursorToResult(cursor,resultList);      return resultList;    }  } catch (  SQLException ex) {    ex.printStackTrace();    throw ex;  } finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public ModelAdapterFactory(){  if (modelPackage == null) {    modelPackage=ModelPackage.eINSTANCE;  }}  }
class C{  protected ByteType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public Shape straightLineShape(){  GeneralPath path=null;  if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) {    double y1=llpts[0];    double x1=llpts[1];    path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2);    if (returnDegrees) {      path.moveTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));    } else {      path.moveTo(x1,y1);    }    for (int i=2; i < llpts.length - 1; i+=2) {      x1=llpts[i + 1];      y1=llpts[i];      if (returnDegrees) {        path.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));      } else {        path.lineTo(x1,y1);      }    }  }  return path;}  }
class C{  boolean isTimedOut(long sesTimeout){  long time0=lastTouchTime.get();  if (time0 == TIMEDOUT_FLAG)   return true;  return U.currentTimeMillis() - time0 > sesTimeout && lastTouchTime.compareAndSet(time0,TIMEDOUT_FLAG);}  }
class C{  public void reset(){  try {    signalControlOpStart();    getDependencyManagers().forEach(null);  }  finally {    signalControlOpEnd();    this.initializer.accept(this);  }}  }
class C{  public SVGPath relativeLineTo(double[] xy){  return relativeLineTo(xy[0],xy[1]);}  }
class C{  public SiteQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public void reset(){  mLabelCache.clear();}  }
class C{  protected GenericDocument(){}  }
class C{  protected static float distance(float eventX,float startX,float eventY,float startY){  float dx=eventX - startX;  float dy=eventY - startY;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  private void selectBranch(){  presenter.showBranches();  presenter.onBranchSelected(selectedBranch);}  }
class C{  public double det(){  return new LUDecomposition(this).det();}  }
class C{  public String subject(){  return this.key;}  }
class C{  private AttrStub parseAttrib(OpenElementStack out) throws ParseException {  Token<HtmlTokenType> name=tokens.pop();  Token<HtmlTokenType> value=tokens.peek();  if (value.type == HtmlTokenType.ATTRVALUE) {    tokens.advance();    if (isAmbiguousAttributeValue(value.text)) {      mq.addMessage(MessageType.AMBIGUOUS_ATTRIBUTE_VALUE,FilePosition.span(name.pos,value.pos),MessagePart.Factory.valueOf(name.text),MessagePart.Factory.valueOf(value.text));    }  } else   if (asXml) {    if ("/".equals(name.text)) {      mq.addMessage(MessageType.UNEXPECTED_IN_XML_TAG,FilePosition.span(name.pos,value.pos),MessagePart.Factory.valueOf(name.text));      return null;    }    throw new ParseException(new Message(MessageType.MISSING_ATTRIBUTE_VALUE,value.pos,MessagePart.Factory.valueOf(value.text)));  } else {    value=Token.instance("",HtmlTokenType.ATTRVALUE,name.pos);  }  String rawValue=value.text;  if (!asXml) {    rawValue=out.fixBrokenEntities(rawValue,value.pos);  }  String decodedValue;  int vlen=rawValue.length();  if (vlen >= 2) {    char ch0=rawValue.charAt(0);    char chn=rawValue.charAt(vlen - 1);    int start=0, end=vlen;    if (chn == '"' || chn == '\'') {      --end;      if (ch0 == chn) {        start=1;      }    }    decodedValue=Nodes.decode(rawValue.substring(start,end));  } else {    decodedValue=Nodes.decode(rawValue);  }  return new AttrStub(name,value,decodedValue);}  }
class C{  private void checkComponents(Container target){  int size=target.getComponentCount();  for (int i=0; i < size; i++) {    Component comp=target.getComponent(i);    if (!m_data.containsValue(comp))     m_data.put(null,comp);  }}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  public static ObjectAnimator translateX(View view,float from,float to,int duration,AnimatorListenerAdapter listener){  ObjectAnimator translationX=ObjectAnimator.ofFloat(view,"translationX",from,to);  translationX.setDuration(duration);  if (listener != null) {    translationX.addListener(listener);  }  translationX.start();  return translationX;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void zoomInOut(final boolean horizontally,final boolean vertically,final double factor){  if (horizontally)   for (  Axis axis : xyGraph.getXAxisList()) {    final double center=axis.getPositionValue(start.x,false);    axis.zoomInOut(center,factor);  }  if (vertically)   for (  Axis axis : xyGraph.getYAxisList()) {    final double center=axis.getPositionValue(start.y,false);    axis.zoomInOut(center,factor);  }}  }
class C{  protected static final float computeUpdatedBaseLine(final float baseline,final float predictedRating,final float observedRating,final float gamma,final float lambda){  return baseline + gamma * ((predictedRating - observedRating) - lambda * baseline);}  }
class C{  AvroMessageFormatter(SchemaRegistryClient schemaRegistryClient,boolean printKey){  this.schemaRegistry=schemaRegistryClient;  this.printKey=printKey;}  }
class C{  public void accumulate(TaggedLogAPIEntity entity) throws Exception {  AggregateAPIEntity current=root;  for (  String groupby : groupbys) {    String tagv=locateGroupbyField(groupby,entity);    if (tagv == null || tagv.isEmpty()) {      tagv=UNASSIGNED_GROUPBY_ROOT_FIELD_NAME;    }    Map<String,AggregateAPIEntity> children=current.getEntityList();    if (children.get(tagv) == null) {      children.put(tagv,factory.create());      current.setNumDirectDescendants(current.getNumDirectDescendants() + 1);    }    AggregateAPIEntity child=children.get(tagv);    if (counting)     count(child);    for (    String sumFunctionField : sumFunctionFields) {      sum(child,entity,sumFunctionField);    }    current=child;  }}  }
class C{  public DnsSdTxtRecord(byte[] data){  mData=(byte[])data.clone();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  int itemsInWindow(boolean scrollbarVisible){  int h;  if (scrollbarVisible) {    h=height - ((2 * MARGIN) + SCROLLBAR_AREA);  } else {    h=height - 2 * MARGIN;  }  return (h / getItemHeight());}  }
class C{  @Override public V put(K key,V value){  return putImpl(key,value);}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.clear();  }  finally {    lock.unlock();  }}  }
class C{  private void dynInit(){  String sql=MRole.getDefault().addAccessSQL("SELECT AD_Role_ID, Name FROM AD_Role ORDER BY 2","AD_Role",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  roleField=new CComboBox(DB.getKeyNamePairs(sql,false));  sql="SELECT * FROM AD_Record_Access " + "WHERE AD_Table_ID=? AND Record_ID=? AND AD_Client_ID=?";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_AD_Table_ID);    pstmt.setInt(2,m_Record_ID);    pstmt.setInt(3,Env.getAD_Client_ID(Env.getCtx()));    ResultSet rs=pstmt.executeQuery();    while (rs.next())     m_recordAccesss.add(new MRecordAccess(Env.getCtx(),rs,null));    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  log.fine("#" + m_recordAccesss.size());  setLine(0,false);}  }
class C{  public CHM(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGS)   concurrencyLevel=MAX_SEGS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  segShift=32 - sshift;  segMask=ssize - 1;  segs=Seg.newArray(ssize);  if (initialCapacity > MAX_CAP)   initialCapacity=MAX_CAP;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=1;  while (cap < c)   cap<<=1;  for (int i=0; i < segs.length; ++i)   segs[i]=new Seg<K,V>(cap,loadFactor);}  }
class C{  private void logCallException(Throwable e){  if (callLog.isLoggable(Log.BRIEF)) {    String clientHost="";    try {      clientHost="[" + getClientHost() + "] ";    } catch (    ServerNotActiveException snae) {    }    callLog.log(Log.BRIEF,clientHost + "exception: ",e);  }  if (wantExceptionLog) {    java.io.PrintStream log=System.err;synchronized (log) {      log.println();      log.println("Exception dispatching call to " + ref.getObjID() + " in thread \""+ Thread.currentThread().getName()+ "\" at "+ (new Date())+ ":");      e.printStackTrace(log);    }  }}  }
class C{  protected int oldFindAndEliminateRedundant(int start,int firstOccuranceIndex,ExpressionOwner firstOccuranceOwner,ElemTemplateElement psuedoVarRecipient,Vector paths) throws org.w3c.dom.DOMException {  QName uniquePseudoVarName=null;  boolean foundFirst=false;  int numPathsFound=0;  int n=paths.size();  Expression expr1=firstOccuranceOwner.getExpression();  if (DEBUG)   assertIsLocPathIterator(expr1,firstOccuranceOwner);  boolean isGlobal=(paths == m_absPaths);  LocPathIterator lpi=(LocPathIterator)expr1;  for (int j=start; j < n; j++) {    ExpressionOwner owner2=(ExpressionOwner)paths.elementAt(j);    if (null != owner2) {      Expression expr2=owner2.getExpression();      boolean isEqual=expr2.deepEquals(lpi);      if (isEqual) {        LocPathIterator lpi2=(LocPathIterator)expr2;        if (!foundFirst) {          foundFirst=true;          ElemVariable var=createPseudoVarDecl(psuedoVarRecipient,lpi,isGlobal);          if (null == var)           return 0;          uniquePseudoVarName=var.getName();          changeToVarRef(uniquePseudoVarName,firstOccuranceOwner,paths,psuedoVarRecipient);          paths.setElementAt(var.getSelect(),firstOccuranceIndex);          numPathsFound++;        }        changeToVarRef(uniquePseudoVarName,owner2,paths,psuedoVarRecipient);        paths.setElementAt(null,j);        numPathsFound++;      }    }  }  if ((0 == numPathsFound) && (paths == m_absPaths)) {    ElemVariable var=createPseudoVarDecl(psuedoVarRecipient,lpi,true);    if (null == var)     return 0;    uniquePseudoVarName=var.getName();    changeToVarRef(uniquePseudoVarName,firstOccuranceOwner,paths,psuedoVarRecipient);    paths.setElementAt(var.getSelect(),firstOccuranceIndex);    numPathsFound++;  }  return numPathsFound;}  }
class C{  public void test_2KBCreateAndDiscovery() throws Exception {  final String namespace=getName();  final String namespace2=getName() + "2";  final Properties properties=getProperties();  Journal jnl=null;  try {    jnl=new Journal(properties);    assertKBNotFound(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace,properties)).get();    assertKBExists(jnl,namespace);    AbstractApiTask.submitApiTask(jnl,new CreateKBTask(namespace2,properties)).get();    assertKBExists(jnl,namespace2);  }  finally {    if (jnl != null)     jnl.destroy();  }}  }
class C{  public void shutdown(){}  }
class C{  public void add(double value){  if (count == 0) {    count=1;    mean=value;    min=value;    max=value;    if (!isFinite(value)) {      sumOfSquaresOfDeltas=NaN;    }  } else {    count++;    if (isFinite(value) && isFinite(mean)) {      double delta=value - mean;      mean+=delta / count;      sumOfSquaresOfDeltas+=delta * (value - mean);    } else {      mean=calculateNewMeanNonFinite(mean,value);      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,value);    max=Math.max(max,value);  }}  }
class C{  public double computeAverageLocalOfObservationsWithCorrection() throws Exception {  double te=0.0;  for (int b=0; b < totalObservations; b++) {    int timeSeries=timeSeriesIndex[b];    double[] source=vectorOfSourceObservations.elementAt(timeSeries);    double[] dest=vectorOfDestinationObservations.elementAt(timeSeries);    int[] counts=getCounts(source,dest,timeStepIndex[b],timeSeries);    double cont=0.0;    if (counts[NEXT_PAST_SOURCE] > 0) {      cont=MathsUtils.digamma(counts[NEXT_PAST_SOURCE]) - MathsUtils.digamma(counts[PAST_SOURCE]) - MathsUtils.digamma(counts[NEXT_PAST]) + MathsUtils.digamma(counts[PAST]);    }    te+=cont;  }  lastAverage=te / (double)totalObservations / Math.log(2.0);  return lastAverage;}  }
class C{  public boolean isDefaultCounterDoc(){  Object oo=get_Value(COLUMNNAME_IsDefaultCounterDoc);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void expandBy(double distance){  expandBy(distance,distance);}  }
class C{  @Override protected void onPause(){  super.onPause();  SharedPreferences.Editor editor=getPreferences(0).edit();  editor.putString("text",mSaved.getText().toString());  editor.putInt("selection-start",mSaved.getSelectionStart());  editor.putInt("selection-end",mSaved.getSelectionEnd());  editor.commit();}  }
class C{  public static boolean isGeolocType(String mime){  return mime != null && mime.toLowerCase().startsWith(GeolocInfoDocument.MIME_TYPE);}  }
class C{  @Override protected UUID doTask() throws Exception {  final String name=getOnlyResource();  IIndex ndx=getJournal().getIndex(name);  if (ndx != null) {    final UUID indexUUID=ndx.getIndexMetadata().getIndexUUID();    if (log.isInfoEnabled())     log.info("Index exists: name=" + name + ", indexUUID="+ indexUUID);    return indexUUID;  }  ndx=getJournal().registerIndex(name,metadata);  final UUID indexUUID=ndx.getIndexMetadata().getIndexUUID();  if (log.isInfoEnabled())   log.info("Registered index: name=" + name + ", class="+ ndx.getClass()+ ", indexUUID="+ indexUUID);  return indexUUID;}  }
class C{  protected void clearOutEvents(){  sCISafe.clearOutEvents();}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String|| object instanceof BigInteger|| object instanceof BigDecimal) {      return object;    }    if (object instanceof Collection) {      Collection<?> coll=(Collection<?>)object;      return new JSONArray(coll);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      Map<?,?> map=(Map<?,?>)object;      return new JSONObject(map);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  public TextureAtlas packTexturesFromAssets(int atlasWidth,int altasHeight,int padding,boolean useCompresison,String subDir){  assetsToStreams(subDir);  return createAtlas(atlasWidth,altasHeight,padding,useCompresison);}  }
class C{  public static void main(String[] args){  Locale saveLocale=Locale.getDefault();  try {    TestSupplementary tester=new TestSupplementary();    run(tester,ARGS,TEST,NEGATED_TEST);    tester.printSummary();  }  finally {    Locale.setDefault(saveLocale);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (factor == null) {    throw new NullPointerException();  }  if (laggedFactor == null) {    throw new NullPointerException();  }}  }
class C{  public ObjectMatrix2D viewColumn(int column){  checkColumn(column);  int viewRows=this.slices;  int viewColumns=this.rows;  int viewRowZero=sliceZero;  int viewColumnZero=rowZero;  int viewOffset=this.offset + _columnOffset(_columnRank(column));  int viewRowStride=this.sliceStride;  int viewColumnStride=this.rowStride;  int[] viewRowOffsets=this.sliceOffsets;  int[] viewColumnOffsets=this.rowOffsets;  return new SelectedSparseObjectMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  private boolean validateRequiredVolumeConfiguration(StoragePool sourcePool,StoragePool targetPool,Volume vpoolChangeVolume,Map<StoragePool,StorageSystem> destPoolStorageMap,MetaVolumeRecommendation sourceVolumeRecommendation,long size,boolean isThinlyProvisioned,boolean fastExpansion,long sourceMaxVolumeSizeLimitKb){  long targetMaxVolumeSizeLimitKb=isThinlyProvisioned ? targetPool.getMaximumThinVolumeSize() : targetPool.getMaximumThickVolumeSize();  if (sourceMaxVolumeSizeLimitKb == targetMaxVolumeSizeLimitKb) {    return true;  }  _log.info(String.format("Target storage pool %s max volume size limit %s Kb. Source storage pool max volume size limit %s Kb.",targetPool.getNativeId(),targetMaxVolumeSizeLimitKb,sourceMaxVolumeSizeLimitKb));  StorageSystem targetStorageSystem=destPoolStorageMap.get(targetPool);  MetaVolumeRecommendation targetVolumeRecommendation=MetaVolumeUtils.getCreateRecommendation(targetStorageSystem,targetPool,size,isThinlyProvisioned,fastExpansion,null);  if (vpoolChangeVolume != null) {    if (vpoolChangeVolume.getIsComposite()) {      long capacity=vpoolChangeVolume.getMetaMemberSize();      long capacityKb=(capacity % BYTESCONVERTER == 0) ? capacity / BYTESCONVERTER : capacity / BYTESCONVERTER + 1;      if (targetStorageSystem.checkIfVmax3()) {        capacityKb=capacityKb * vpoolChangeVolume.getMetaMemberCount();      }      if (capacityKb > targetMaxVolumeSizeLimitKb) {        _log.debug(String.format("Target storage pool %s does not match. Limit for volume size is less than required by source volume configuration \n" + "Required capacity: %s Kb, actual limit: %s Kb",targetPool.getNativeId(),capacityKb,targetMaxVolumeSizeLimitKb));        return false;      }    } else {      long capacity=vpoolChangeVolume.getCapacity();      if (targetVolumeRecommendation.isCreateMetaVolumes() && (sourcePool.getPoolClassName().equalsIgnoreCase(StoragePool.PoolClassNames.Symm_SRPStoragePool.toString()))) {        capacity=targetVolumeRecommendation.getMetaMemberSize();      }      long capacityKb=(capacity % BYTESCONVERTER == 0) ? capacity / BYTESCONVERTER : capacity / BYTESCONVERTER + 1;      if (capacityKb > targetMaxVolumeSizeLimitKb) {        _log.debug(String.format("Target storage pool %s does not match. Limit for volume size is less than required by source volume configuration \n" + "Required capacity: %s Kb, actual limit: %s Kb",targetPool.getNativeId(),capacityKb,targetMaxVolumeSizeLimitKb));        return false;      }    }  } else {    return validateMetaRecommednationsForSRDF(sourcePool,targetPool,sourceVolumeRecommendation,targetVolumeRecommendation);  }  return true;}  }
class C{  protected final void discardBackup(){  backup=false;  backupTokens.clear();}  }
class C{  public static boolean isTheSamePomodoroDay(@Nullable DateTime first,@Nullable DateTime second){  if (first != null && second != null) {    boolean sameDay=first.getYear() == second.getYear() && first.getDayOfYear() == second.getDayOfYear();    boolean isBothAfter6am=first.getHourOfDay() > 6 && second.getHourOfDay() > 6;    return sameDay && isBothAfter6am;  } else {    return false;  }}  }
class C{  public static void run(AdSense adsense,String adClientId,int maxReportPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Running report for ad client %s\n",adClientId);  System.out.println("=================================================================");  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Date oneWeekAgo=calendar.getTime();  String startDate=DATE_FORMATTER.format(oneWeekAgo);  String endDate=DATE_FORMATTER.format(today);  Generate request=adsense.reports().generate(startDate,endDate);  request.setFilter(Arrays.asList("AD_CLIENT_ID==" + escapeFilterParameter(adClientId)));  request.setMetric(Arrays.asList("PAGE_VIEWS","AD_REQUESTS","AD_REQUESTS_COVERAGE","CLICKS","AD_REQUESTS_CTR","COST_PER_CLICK","AD_REQUESTS_RPM","EARNINGS"));  request.setDimension(Arrays.asList("DATE"));  request.setSort(Arrays.asList("+DATE"));  request.setMaxResults(maxReportPageSize);  AdsenseReportsGenerateResponse response=request.execute();  if (response.getRows() == null || response.getRows().isEmpty()) {    System.out.println("No rows returned.");    return;  }  displayHeaders(response.getHeaders());  displayRows(response.getRows());  int totalRows=Math.min(response.getTotalMatchedRows().intValue(),ROW_LIMIT);  for (int startIndex=response.getRows().size(); startIndex < totalRows; startIndex+=response.getRows().size()) {    int pageSize=Math.min(maxReportPageSize,totalRows - startIndex);    request.setStartIndex(startIndex);    request.setMaxResults(pageSize);    response=request.execute();    if (response.getRows() == null || response.getRows().isEmpty()) {      break;    }    displayRows(response.getRows());  }  System.out.println();}  }
class C{  private void calculateComponentPosition(int index,int defaultWidth,Rectangle rect,Dimension rendererSize,Dimension selectedSize,boolean beforeSelected){  Style style=getStyle();  int initialY=style.getPadding(false,TOP);  int initialX=style.getPadding(false,LEFT);  boolean rtl=isRTL();  if (rtl) {    initialX+=getSideGap();  }  int selection=getCurrentSelected();  Dimension d=rect.getSize();  int selectedDiff;  if (orientation != HORIZONTAL) {    int height=rendererSize.getHeight();    selectedDiff=selectedSize.getHeight() - height;    rect.setX(initialX);    d.setHeight(height);    d.setWidth(defaultWidth);    int y=0;    int listHeight=getHeight() - style.getPadding(false,TOP) - style.getPadding(false,BOTTOM);    int totalHeight=(height + itemGap) * getModel().getSize() + selectedDiff;switch (fixedSelection) {case FIXED_CENTER:      y=listHeight / 2 - (height + itemGap + selectedDiff) / 2 + (index - selection) * (height + itemGap);    if (!beforeSelected) {      y+=selectedDiff;    }  y=recalcOffset(y,totalHeight,listHeight,height + itemGap);break;case FIXED_TRAIL:y=listHeight - (height + itemGap + selectedDiff);case FIXED_LEAD:y+=(index - selection) * (height + itemGap);if (index - selection > 0) {y+=selectedDiff;}y=recalcOffset(y,totalHeight,listHeight,height + itemGap);break;default :y=index * (height + itemGap);if (!beforeSelected) {y+=selectedDiff;}break;}rect.setY(y + initialY);if (index == selection) {d.setHeight(d.getHeight() + selectedDiff);}} else {int width=rendererSize.getWidth();selectedDiff=selectedSize.getWidth() - width;rect.setY(initialY);d.setHeight(getHeight() - style.getPadding(false,TOP) - style.getPadding(false,BOTTOM));d.setWidth(width);int x=0;int listWidth=getWidth() - style.getPadding(isRTL(),RIGHT) - style.getPadding(isRTL(),LEFT);int totalWidth=(width + itemGap) * getModel().getSize() + selectedDiff;switch (fixedSelection) {case FIXED_CENTER:x=listWidth / 2 - (width + itemGap + selectedDiff) / 2 + (index - selection) * (width + itemGap);if (!beforeSelected) {x+=selectedDiff;}if (rtl) {x=listWidth - x - width;}x=recalcOffset(x,totalWidth,listWidth,width + itemGap);break;case FIXED_TRAIL:x=listWidth - (width + itemGap + selectedDiff);case FIXED_LEAD:x+=(index - selection) * (width + itemGap);if (index - selection > 0) {x+=selectedDiff;}if (rtl) {x=listWidth - x - width;}x=recalcOffset(x,totalWidth,listWidth,width + itemGap);break;default :x=index * (width + itemGap);if (!beforeSelected) {x+=selectedDiff;}break;}int rectX=initialX + x;if ((rtl) && (fixedSelection < FIXED_NONE_BOUNDRY)) {rectX=initialX + totalWidth - (x - initialX) - (width + itemGap);if (index == getCurrentSelected()) {rectX-=selectedDiff;}if (totalWidth < listWidth) {rectX+=(listWidth - totalWidth);}}rect.setX(rectX);if (index == selection) {d.setWidth(d.getWidth() + selectedDiff);}}}  }
class C{  private Ptdemand adjustCollection(final List<Installment> installments,final Map<Installment,Set<EgDemandDetails>> newDemandDetailsByInstallment,final Set<String> demandReasons,Ptdemand ptDemand){  LOGGER.info("Entered into adjustCollection");  EgDemandDetails advanceDemandDetails=null;  BigDecimal balanceDemand=BigDecimal.ZERO;  BigDecimal excessCollection=BigDecimal.ZERO;  for (  Map<String,BigDecimal> map : excessCollAmtMap.values()) {    for (    BigDecimal amount : map.values()) {      excessCollection=excessCollection.add(amount);    }  }  Installment currSecondHalf=propertyTaxUtil.getInstallmentsForCurrYear(new Date()).get(PropertyTaxConstants.CURRENTYEAR_SECOND_HALF);  if (excessCollection.compareTo(BigDecimal.ZERO) > 0) {    BigDecimal collection=BigDecimal.ZERO;    for (    EgDemandDetails demandDetials : ptDemand.getEgDemandDetails()) {      if (advanceDemandDetails == null && DEMANDRSN_CODE_ADVANCE.equals(demandDetials.getEgDemandReason().getEgDemandReasonMaster().getCode()) && currSecondHalf.equals(demandDetials.getEgDemandReason().getEgInstallmentMaster())) {        advanceDemandDetails=demandDetials;      }      if (!demandDetials.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(DEMANDRSN_CODE_PENALTY_FINES)) {        collection=collection.add(demandDetials.getAmtCollected());        demandDetials.setAmtCollected(BigDecimal.ZERO);      }    }    collection=collection.add(excessCollection);    for (    final Installment installment : installments) {      for (      String demandReason : demandReasons) {        final EgDemandDetails newDemandDetail=getEgDemandDetailsForReason(newDemandDetailsByInstallment.get(installment),demandReason);        if (newDemandDetail != null) {          balanceDemand=newDemandDetail.getAmount().subtract(newDemandDetail.getAmtCollected());          if (balanceDemand.compareTo(BigDecimal.ZERO) > 0) {            if (collection.compareTo(BigDecimal.ZERO) > 0) {              if (collection.compareTo(balanceDemand) <= 0) {                newDemandDetail.setAmtCollected(newDemandDetail.getAmtCollected().add(collection));                newDemandDetail.setModifiedDate(new Date());                collection=BigDecimal.ZERO;              } else {                newDemandDetail.setAmtCollected(newDemandDetail.getAmtCollected().add(balanceDemand));                newDemandDetail.setModifiedDate(new Date());                collection=collection.subtract(balanceDemand);              }            }          }        }        if (collection.compareTo(BigDecimal.ZERO) == 0) {          break;        }      }      if (collection.compareTo(BigDecimal.ZERO) == 0) {        break;      }    }    if (collection.compareTo(BigDecimal.ZERO) > 0) {      if (advanceDemandDetails == null) {        EgDemandDetails demandDetails=ptBillServiceImpl.insertDemandDetails(DEMANDRSN_CODE_ADVANCE,collection,currSecondHalf);        ptDemand.getEgDemandDetails().add(demandDetails);      } else {        advanceDemandDetails.getAmtCollected().add(collection);      }    }    LOGGER.info("Exiting from adjustCollection");  }  return ptDemand;}  }
class C{  public Cache(int maxSize,long maxLifetime){  if (maxSize == 0) {    throw new IllegalArgumentException("Max cache size cannot be 0.");  }  this.maxCacheSize=maxSize;  this.maxLifetime=maxLifetime;  map=new HashMap<K,CacheObject<V>>(103);  lastAccessedList=new LinkedList();  ageList=new LinkedList();}  }
class C{  public void done(final Step step,final Context context){  if (!(step instanceof SyntheticStep)) {    eventBus.fireEvent(new StepEvent(context,step,true));  }  executeNextStep(context);}  }
class C{  private void makeTree(int nstep){  for (Enumeration<Body> e=bodiesRev(); e.hasMoreElements(); ) {    Body q=e.nextElement();    if (q.mass != 0.0) {      q.expandBox(this,nstep);      MathVector xqic=intcoord(q.pos);      if (root == null) {        root=q;      } else {        root=root.loadTree(q,xqic,Node.IMAX >> 1,this);      }    }  }  root.hackcofm();}  }
class C{  private static int[] readProgramTable(final FontFile2 currentFontFile,final int table){  int[] program={};  final int startPointer=currentFontFile.selectTable(table);  if (startPointer == 0) {    LogWriter.writeLog("No program table found: " + table);  } else {    final int len=currentFontFile.getOffset(table);    program=new int[len];    for (int i=0; i < len; i++) {      program[i]=currentFontFile.getNextUint8();    }  }  return program;}  }
class C{  protected SimpleQuery genSimpleQuery(DashboardAnalysis analysis) throws ScopeException, SQLScopeException, ComputingException, InterruptedException {  if (analysis.getMainDomain() == null) {    throw new ComputingException("if no kpi is defined, must have one single domain");  }  Space root=analysis.getMainDomain();  SimpleQuery query=new SimpleQuery(root);  for (  GroupByAxis item : analysis.getGrouping()) {    Space hook=computeSinglePath(analysis,root.getDomain(),item.getAxis().getParent().getTop(),mandatory_link);    Axis axis=hook.A(item.getAxis());    query.select(axis);  }  query.getSelect().getGrouping().setForceGroupBy(true);  for (  DomainSelection selection : analysis.getSelection().get()) {    if (selection.hasConditions()) {      for (      ExpressionInput condition : selection.getConditions()) {        query.where(condition.getExpression());      }    }    for (    Axis filter : selection.getFilters()) {      query.where(filter,selection.getMembers(filter));    }  }  if (analysis.hasLimit()) {    query.limit(analysis.getLimit());  }  if (analysis.hasOffset()) {    query.offset(analysis.getOffset());  }  if (analysis.hasOrderBy()) {    query.orderBy(analysis.getOrders());  }  return query;}  }
class C{  private static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegSign=false;  for (; currentIndex < s.length(); currentIndex++) {    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start) {    foundSeparator=true;    result.mEndWithNegSign=true;  }break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  public void writeGrain(long lba,byte[] data,int offset) throws IOException {  assert data.length - offset >= NfcClient.SECTOR_SIZE;  if (lba < nextLba) {    throw new RuntimeException("Sectors are out of order");  }  zeroSectors+=lba - nextLba;  nextLba=lba + 1;  if (isZero(data,offset,NfcClient.SECTOR_SIZE)) {    zeroSectors++;  } else {    outputDataSector(data,offset);  }}  }
class C{  public GPUImageRGBDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  public ExecutionSynchronizationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public boolean isConnected(){  return (delegate == null) ? super.isConnected() : delegate.isConnected();}  }
class C{  public synchronized void connect(BluetoothDevice device,boolean secure){  if (_debug)   Log.d(TAG,"connect to: " + device.getName());  if (_state == STATE_CONNECTING) {    cancelConnectThread();  }  cancelCommunicationThread(_communicationThread);  _connectThread=new ConnectThread(device,secure);  _connectThread.start();  setState(STATE_CONNECTING);}  }
class C{  @Override public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {  oauthServer.tokenKeyAccess("isAnonymous() || hasRole('ROLE_TRUSTED_CLIENT')").checkTokenAccess("hasRole('TRUSTED_CLIENT')");}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:33.583 -0500",hash_original_method="8D45E71D432CDD40BD281029502FF1F3",hash_generated_method="A282D89E7B4612096D1395CC8DDD2706") public static boolean startActivities(Context context,Intent[] intents){  return startActivities(context,intents,null);}  }
class C{  public static void fill(byte[] array,int start,int end,byte value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private int unFilledSpacesInHeaderGroup(int header){  int remainder=mDelegate.getCountForHeader(header) % mNumColumns;  return remainder == 0 ? 0 : mNumColumns - remainder;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public static Iterable<MatchResult> findMatches(Pattern pattern,CharSequence s){  List<MatchResult> results=new ArrayList<MatchResult>();  for (Matcher m=pattern.matcher(s); m.find(); )   results.add(m.toMatchResult());  return results;}  }
class C{  protected Long wrapValue(long k){  return new Long(k);}  }
class C{  public comment removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public boolean isData(String name){  return isDefinedAs(name,LocalType.DATA);}  }
class C{  public SequenceType type(){  if (mIsPaired) {    return mLeft.type();  } else {    return mSingle.type();  }}  }
class C{  @Override public void readFrom(StreamInput in) throws IOException {  duration=in.readLong();  timeUnit=TimeUnit.NANOSECONDS;}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.LOGICAL_AND_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void updateNodeSize(int nodeViewTag,int newWidth,int newHeight){  ReactShadowNode cssNode=mShadowNodeRegistry.getNode(nodeViewTag);  cssNode.setStyleWidth(newWidth);  cssNode.setStyleHeight(newHeight);  if (mOperationsQueue.isEmpty()) {    dispatchViewUpdates(-1);  }}  }
class C{  public boolean isCausedByNetworkIssue(){  return getCause() instanceof java.io.IOException;}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  private void maybeAddNewWizardActionsToWorkbench(){  IWorkbench workbench=Workbench.getInstance();  if (workbench != null) {    workbench.addWindowListener(windowListener);    maybeAddNewWizardActionsToWindow(workbench.getActiveWorkbenchWindow());  } else {  }}  }
class C{  private void copyDefault(MAcctSchema targetAS) throws Exception {  MAcctSchemaDefault source=MAcctSchemaDefault.get(getCtx(),p_SourceAcctSchema_ID);  MAcctSchemaDefault target=new MAcctSchemaDefault(getCtx(),0,get_TrxName());  target.setC_AcctSchema_ID(p_TargetAcctSchema_ID);  target.setC_AcctSchema_ID(p_TargetAcctSchema_ID);  ArrayList<KeyNamePair> list=source.getAcctInfo();  for (int i=0; i < list.size(); i++) {    KeyNamePair pp=list.get(i);    int sourceC_ValidCombination_ID=pp.getKey();    String columnName=pp.getName();    MAccount sourceAccount=MAccount.get(getCtx(),sourceC_ValidCombination_ID);    MAccount targetAccount=createAccount(targetAS,sourceAccount);    target.setValue(columnName,new Integer(targetAccount.getC_ValidCombination_ID()));  }  if (!target.save())   throw new AdempiereSystemError("Could not Save Default");}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public void close() throws IOException {  if (closed) {    return;  }  rtcpSession.isByeRequested=true;  closed=true;  if (datagramConnection != null) {    datagramConnection.close();  }  if (this.getState() == State.NEW) {    this.start();  }}  }
class C{  public GenericObjectEditorDialog(Dialog owner,Dialog.ModalityType modality){  super(owner,modality);}  }
class C{  public Family(String father,String mother,String... children){  mPedigree=new GenomeRelationships();  mIsDiseased=new boolean[children.length + FIRST_CHILD_INDEX];  mMembers=new String[children.length + FIRST_CHILD_INDEX];  for (int i=0; i < children.length; i++) {    mPedigree.addParentChild(father,children[i]);    mPedigree.addParentChild(mother,children[i]);    mChildren.add(children[i]);    mMembers[FIRST_CHILD_INDEX + i]=children[i];  }  mSampleIds=new int[children.length + 2];  for (int i=0; i < mSampleIds.length; i++) {    mSampleIds[i]=i;  }  mFather=father;  mMother=mother;  mMembers[FATHER_INDEX]=father;  mMembers[MOTHER_INDEX]=mother;}  }
class C{  protected double calculateCategoryGapSize(int categoryCount,Rectangle2D area,RectangleEdge edge){  double result=0.0;  double available=0.0;  if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) {    available=area.getWidth();  } else   if ((edge == RectangleEdge.LEFT) || (edge == RectangleEdge.RIGHT)) {    available=area.getHeight();  }  if (categoryCount > 1) {    result=available * getCategoryMargin() / (categoryCount - 1);  }  return result;}  }
class C{  public static int minIndex(double[] doubles){  double minimum=0;  int minIndex=0;  for (int i=0; i < doubles.length; i++) {    if ((i == 0) || (doubles[i] < minimum)) {      minIndex=i;      minimum=doubles[i];    }  }  return minIndex;}  }
class C{  public boolean isVisible(){  return isVisible;}  }
class C{  public TermSuggestionBuilder sort(String sort){  this.sort=sort;  return this;}  }
class C{  public static void checkOpen(FileSystem fs){  checkArgument(fs.isOpen(),"file system must be open");}  }
class C{  public DestinationWrapper<Topic> lookupTopic(String uri,JMSContext context) throws JMSException, NamingException {  if (usingJNDI || context == null) {    return lookupTopicFromJNDI(uri);  } else {    return new DestinationWrapper<Topic>(uri,context.createTopic(uri));  }}  }
class C{  private TechnicalProduct createTechnicalProduct(Organization organization) throws Exception {  TechnicalProduct technicalProduct=new TechnicalProduct();  technicalProduct.setProvisioningURL("http://");  technicalProduct.setProvisioningVersion("1.0");  technicalProduct.setTechnicalProductId("technicalProductId");  technicalProduct.setOrganizationKey(100);  technicalProduct.setOrganization(organization);  technicalProduct.setBillingIdentifier(BillingAdapterIdentifier.NATIVE_BILLING.toString());  mgr.persist(technicalProduct);  mgr.flush();  return technicalProduct;}  }
class C{  public static long convertAmount(ExchangeRateProvider exchangeRates,String sourceCurrencyCode,long sourceAmount,String targetCurrencyCode){  double exchangeRate=exchangeRates.getExchangeRate(sourceCurrencyCode,targetCurrencyCode);  return convertAmount(exchangeRate,sourceCurrencyCode,sourceAmount,targetCurrencyCode);}  }
class C{  public AddUpdateRowDialog(DefaultTableModel mainTableModel,RowController rowController,Object[] columns,Object[] row,int rowIndex){  super(new Frame(),true);  initComponents();  setLocationRelativeTo(null);  defaultTableModel=(DefaultTableModel)addUpdateRowTable.getModel();  this.mainTableModel=mainTableModel;  this.rowController=rowController;  this.columns=columns;  this.row=row;  this.rowIndex=rowIndex;  if (row == null) {    setTitle("Add new row");    for (    Object column : columns) {      defaultTableModel.addRow(new Object[]{column,""});    }  } else {    setTitle("Update row");    for (int i=0; i < columns.length; i++) {      defaultTableModel.addRow(new Object[]{columns[i],row[i]});    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.AUTOUNIQUE_ATTRIBUTE___AUTOUNIQUE_1:    return autounique_1 != AUTOUNIQUE_1_EDEFAULT;case UmplePackage.AUTOUNIQUE_ATTRIBUTE___NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);}return super.eIsSet(featureID);}  }
class C{  public void add(int startIndex,Point... sizes){  if (!valid()) {    return;  }  invalidateLineMapAfter(startIndex);  makeSpace(startIndex,sizes.length);  int index=startIndex;  for (  Point size : sizes) {    sizeMap.put(index++,size);  }  refreshLineMap();}  }
class C{  public int size(int i){  return sizes.get(i);}  }
class C{  public void mkdir(String dirName,int posixPermissions) throws IOException {  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(dirName,charsetName);  tw.writeUINT32(AttribFlags.SSH_FILEXFER_ATTR_PERMISSIONS);  tw.writeUINT32(posixPermissions);  sendMessage(Packet.SSH_FXP_MKDIR,req_id,tw.getBytes());  expectStatusOKMessage(req_id);}  }
class C{  @SuppressWarnings("UnusedDeclaration") public void notifyDataSetChanged(final boolean force){  if (force) {    mDecoratedBaseAdapter.notifyDataSetChanged();  }}  }
class C{  public void clearUser(){  Bitmap bitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.avatar_36dp);  setAvatarBitmap(bitmap);  userFullName.setText("");  userName.setText("");  levelText.setText("");  levelProgress.setText("");  user=null;}  }
class C{  private AuthorizationRequest createAuthorizationRequest(final HttpServletRequest request){  log.debug("Constructing authorization request");  final Map<String,String> requestParameters=createRequestMap(request.getParameterMap());  return authRequestFactory.createAuthorizationRequest(requestParameters);}  }
class C{  private static List<Territory> findUnitTerr(final GameData data,final PlayerID player,final Match<Unit> unitCondition){  final CompositeMatch<Unit> limitShips=new CompositeMatchAnd<>(unitCondition);  final List<Territory> shipTerr=new ArrayList<>();  final Collection<Territory> tNeighbors=data.getMap().getTerritories();  for (  final Territory t2 : tNeighbors) {    if (t2.getUnits().someMatch(limitShips)) {      shipTerr.add(t2);    }  }  return shipTerr;}  }
class C{  BinaryMN(int kind,int name_index,int name_space,boolean ns_is_set,Set<Integer> versions){  this.kind=kind;  this.nameID=name_index;  this.nsID=name_space;  this.nsIsSet=ns_is_set;  this.versions=versions;}  }
class C{  @Override public UntypedResultSet fetchRow(final String ksName,final String index,final String cfName,final String id,final String[] columns,final ConsistencyLevel cl) throws InvalidRequestException, RequestExecutionException, RequestValidationException, IOException {  DocPrimaryKey docPk=parseElasticId(index,cfName,id);  return fetchRow(ksName,index,cfName,docPk,columns,cl);}  }
class C{  private void simpleAction(IMqttToken token,Bundle data){  if (token != null) {    Status status=(Status)data.getSerializable(MqttServiceConstants.CALLBACK_STATUS);    if (status == Status.OK) {      ((MqttTokenAndroid)token).notifyComplete();    } else {      Exception exceptionThrown=(Exception)data.getSerializable(MqttServiceConstants.CALLBACK_EXCEPTION);      ((MqttTokenAndroid)token).notifyFailure(exceptionThrown);    }  } else {    mqttService.traceError(MqttService.TAG,"simpleAction : token is null");  }}  }
class C{  public void removeLink(HGPersistentHandle handle){  impl.removeLink(handle);}  }
class C{  public StochasticOscillatorDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  private void createModeShareHistoryChart(String title,String filePath,BenchmarkDataReader data,String xLabel,String yLabel,BenchmarkDataReader surveyData){  String[] newCategories=new String[data.getCategories().length + 2];  for (int p=0; p < data.getCategories().length; p++)   newCategories[p]=data.getCategories()[p];  newCategories[newCategories.length - 2]="";  newCategories[newCategories.length - 1]="Survey";  StackedBarChart stackedBarChart=new StackedBarChart(title,xLabel,yLabel,newCategories);  double[] modeShareArray=new double[newCategories.length];  int modeCount=0;  for (  String mode : data.getModes()) {    int i=0;    for (    Integer key : data.getDataMap().keySet()) {      Integer[] shares=data.getDataMap().get(key);      modeShareArray[i]=shares[modeCount] / data.getTotalTripsMap().get(key) * 100;      i++;    }    System.out.println(mode + "," + surveyData.getTripsPerModeMap().get(mode)+ ","+ surveyData.getTotalTrips());    modeShareArray[modeShareArray.length - 2]=0.0;    modeShareArray[modeShareArray.length - 1]=surveyData.getTripsPerModeMap().get(mode) / (double)surveyData.getTotalTrips() * 100;    stackedBarChart.addSeries(mode,modeShareArray);    modeCount++;  }  GraphEditor stackedBarChartEdit=new GraphEditor(stackedBarChart,10,0.0,100.0,commonColorScheme);  stackedBarChartEdit.stackedBarRenderer();  stackedBarChart.saveAsPng(filePath,1024,768);}  }
class C{  private Workflow.Method moidfyVolumesMethod(URI systemURI,URI poolURI,List<URI> volumeURIs){  return new Workflow.Method("modifyVolumes",systemURI,poolURI,volumeURIs);}  }
class C{  public static double[] updateTrackCalorie(Context context,Track track){  MyTracksProviderUtils myTracksProviderUtils=MyTracksProviderUtils.Factory.get(context);  ActivityType activityType=getActivityType(context,track.getCategory());  if (activityType == ActivityType.INVALID) {    clearCalorie(myTracksProviderUtils,track);    return new double[]{0.0,0.0};  }  TripStatisticsUpdater trackTripStatisticsUpdater=new TripStatisticsUpdater(track.getTripStatistics().getStartTime());  TripStatisticsUpdater markerTripStatisticsUpdater=new TripStatisticsUpdater(track.getTripStatistics().getStartTime());  int recordingDistanceInterval=PreferencesUtils.getInt(context,R.string.recording_distance_interval_key,PreferencesUtils.RECORDING_DISTANCE_INTERVAL_DEFAULT);  double weight=PreferencesUtils.getFloat(context,R.string.weight_key,PreferencesUtils.getDefaultWeight(context));  LocationIterator locationIterator=null;  Cursor cursor=null;  try {    Waypoint waypoint=null;    locationIterator=myTracksProviderUtils.getTrackPointLocationIterator(track.getId(),-1L,false,MyTracksProviderUtils.DEFAULT_LOCATION_FACTORY);    cursor=myTracksProviderUtils.getWaypointCursor(track.getId(),-1L,-1);    if (cursor != null && cursor.moveToFirst()) {      waypoint=getNextStatisticsWaypoint(myTracksProviderUtils,cursor);    }    while (locationIterator.hasNext()) {      Location location=locationIterator.next();      trackTripStatisticsUpdater.addLocation(location,recordingDistanceInterval,true,activityType,weight);      markerTripStatisticsUpdater.addLocation(location,recordingDistanceInterval,true,activityType,weight);      if (waypoint != null && waypoint.getLocation().getTime() == location.getTime() && waypoint.getLocation().getLatitude() == location.getLatitude() && waypoint.getLocation().getLongitude() == location.getLongitude()) {        waypoint.getTripStatistics().setCalorie(markerTripStatisticsUpdater.getTripStatistics().getCalorie());        myTracksProviderUtils.updateWaypoint(waypoint);        markerTripStatisticsUpdater=new TripStatisticsUpdater(location.getTime());        waypoint=getNextStatisticsWaypoint(myTracksProviderUtils,cursor);      }    }  }  finally {    if (locationIterator != null) {      locationIterator.close();    }    if (cursor != null) {      cursor.close();    }  }  double trackCalorie=trackTripStatisticsUpdater.getTripStatistics().getCalorie();  track.getTripStatistics().setCalorie(trackCalorie);  myTracksProviderUtils.updateTrack(track);  return new double[]{trackCalorie,markerTripStatisticsUpdater.getTripStatistics().getCalorie()};}  }
class C{  public void testInvokeAll3(){  testInvokeAll3(mainPool());}  }
class C{  public final void testToString() throws Exception {  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,null);  ByteArrayInputStream certArray=new ByteArrayInputStream(certificate.getBytes());  ByteArrayInputStream certArray2=new ByteArrayInputStream(certificate2.getBytes());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  keyTest.setCertificateEntry("alias1",cert[0]);  keyTest.setCertificateEntry("alias2",cert[0]);  keyTest.setCertificateEntry("alias3",cert[1]);  PKIXBuilderParameters p=new PKIXBuilderParameters(keyTest,new X509CertSelector());  assertNotNull(p.toString());}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public void addProcedure(Procedure procedure){  if (procedures == null) {    procedures=database.newStringMap();  }  procedures.put(procedure.getName(),procedure);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  Agent bond=(Agent)stack.pop();  return (a != null && bond != null && bond.followsTrend(a,false,null)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void validate(JetFormat format){  DatabaseImpl.validateIdentifierName(getName(),format.MAX_COLUMN_NAME_LENGTH,"column");  if (getType() == null) {    throw new IllegalArgumentException(withErrorContext("must have type"));  }  if (getType().isUnsupported()) {    throw new IllegalArgumentException(withErrorContext("Cannot create column with unsupported type " + getType()));  }  if (!format.isSupportedDataType(getType())) {    throw new IllegalArgumentException(withErrorContext("Database format " + format + " does not support type "+ getType()));  }  if (!getType().isVariableLength()) {    if (getLength() < getType().getFixedSize()) {      throw new IllegalArgumentException(withErrorContext("Invalid fixed length size " + getLength()));    }  } else   if (!getType().isLongValue()) {    if (!getType().isValidSize(getLength())) {      throw new IllegalArgumentException(withErrorContext("Var length must be from " + getType().getMinSize() + " to "+ getType().getMaxSize()+ " inclusive, found "+ getLength()));    }  }  if (getType().getHasScalePrecision()) {    if (!getType().isValidScale(getScale())) {      throw new IllegalArgumentException(withErrorContext("Scale must be from " + getType().getMinScale() + " to "+ getType().getMaxScale()+ " inclusive, found "+ getScale()));    }    if (!getType().isValidPrecision(getPrecision())) {      throw new IllegalArgumentException(withErrorContext("Precision must be from " + getType().getMinPrecision() + " to "+ getType().getMaxPrecision()+ " inclusive, found "+ getPrecision()));    }  }  if (isAutoNumber()) {    if (!getType().mayBeAutoNumber()) {      throw new IllegalArgumentException(withErrorContext("Auto number column must be long integer or guid"));    }  }  if (isCompressedUnicode()) {    if (!getType().isTextual()) {      throw new IllegalArgumentException(withErrorContext("Only textual columns allow unicode compression (text/memo)"));    }  }  if (isHyperlink()) {    if (getType() != DataType.MEMO) {      throw new IllegalArgumentException(withErrorContext("Only memo columns can be hyperlinks"));    }  }  if (isCalculated()) {    if (!format.isSupportedCalculatedDataType(getType())) {      throw new IllegalArgumentException(withErrorContext("Database format " + format + " does not support calculated type "+ getType()));    }    if (getProperty(PropertyMap.EXPRESSION_PROP) == null) {      throw new IllegalArgumentException(withErrorContext("No expression provided for calculated type " + getType()));    }    if (getProperty(PropertyMap.RESULT_TYPE_PROP) == null) {      putProperty(PropertyMap.RESULT_TYPE_PROP,getType().getValue());    }  }}  }
class C{  public DateMidnight toDateMidnight(){  return new DateMidnight(getMillis(),getChronology());}  }
class C{  public boolean isMinuteTickMarksVisible(){  return null == minuteTickMarksVisible ? _minuteTickMarksVisible : minuteTickMarksVisible.get();}  }
class C{  @Override protected void after(){  try {    if (enabled) {      boolean failed=true;      boolean failedOnce=false;      long timeout=System.currentTimeMillis() + 60000;      while (failed && timeout > System.currentTimeMillis()) {        failed=checkThread();        if (failed) {          failedOnce=true;          forceGC();          try {            Thread.sleep(500);          } catch (          Throwable e) {          }        }      }      if (failed) {        Assert.fail("Thread leaked");      } else       if (failedOnce) {        System.out.println("******************** Threads cleared after retries ********************");        System.out.println();      }    } else {      enabled=true;    }  }  finally {    previousThreads=null;  }}  }
class C{  void checkpoint(){  Data buffer=getBuffer();  buffer.writeByte((byte)CHECKPOINT);  write(buffer);  undo=new BitField();  logSectionId++;  logPos=0;  pageOut.flush();  pageOut.fillPage();  int currentDataPage=pageOut.getCurrentDataPageId();  logSectionPageMap.put(logSectionId,currentDataPage);}  }
class C{  public final boolean isOptimizeAE(){  return optimizeAE;}  }
class C{  public static UiBinderXmlParser newInstance(IDOMModel xmlModel,ReferenceManager referenceManager,IValidationResultPlacementStrategy<?> validationResultPlacementStrategy) throws FileNotFoundException, UiBinderException {  IFile xmlFile=SseUtilities.resolveFile(xmlModel);  if (xmlFile == null) {    throw new FileNotFoundException("Could not find the file backing the XML model.");  }  IJavaProject javaProject=JavaCore.create(xmlFile.getProject());  if (!javaProject.exists()) {    throw new UiBinderException("The UiBinder XML file is not part of a Java project.");  }  IPath xmlClasspathRelativePath;  try {    xmlClasspathRelativePath=ClasspathResourceUtilities.getClasspathRelativePathOfResource(xmlFile,javaProject);    if (xmlClasspathRelativePath == null) {      throw new UiBinderException("Could not resolve classpath-relative path to UiBinder XML template file.");    }  } catch (  JavaModelException e) {    throw new UiBinderException(e);  }  return new UiBinderXmlParser(xmlModel,xmlFile,xmlClasspathRelativePath,referenceManager,validationResultPlacementStrategy,javaProject);}  }
class C{  private static String processXYPoints(final String points,final String pattern,final String coordSeparator,final String pointSeparator){  final int X_RELATIVE_INDEX=0;  final int Y_RELATIVE_INDEX=1;  final int COORDS_NUMBER=2;  final String[] pointsArray=points.split(" ");  String coords="";  logger.debug("(processXYPoints)(points:" + points + ",pattern:"+ pattern+ ",coordSeparator:"+ coordSeparator+ ",pointSeparator:"+ pointSeparator+ ")|start");  try {    for (int i=0; i < pointsArray.length; i=i + COORDS_NUMBER) {      coords+=String.format(pattern,pointsArray[i + X_RELATIVE_INDEX],pointsArray[i + Y_RELATIVE_INDEX],coordSeparator,((i != (pointsArray.length - COORDS_NUMBER)) ? pointSeparator : ""));    }  } catch (  final Exception ex) {    logger.warn("Sentinel-2 ingestion: Failed footprint processing. error: " + ex.getMessage());  }  logger.debug("(processXYPoints) return:" + coords + "|end");  return coords;}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension rd, mbd;  Insets i=rootPane.getInsets();  Container contentPane=rootPane.getContentPane();  JMenuBar menuBar=rootPane.getJMenuBar();  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getMaximumSize();  } else {    mbd=new Dimension(0,0);  }  if (contentPane != null && contentPane.isVisible()) {    rd=contentPane.getMaximumSize();  } else {    rd=new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE - i.top - i.bottom- mbd.height- 1);  }  return new Dimension(Math.min(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  private void fetchMaps(){  maps=GenericUtil.getTankFrame(getFakeWorld(),bottomDiagFrame,topDiagFrame);}  }
class C{  public PrefixQuery(Term prefix){  super(prefix,toAutomaton(prefix.bytes()),Integer.MAX_VALUE,true);  if (prefix == null) {    throw new NullPointerException("prefix must not be null");  }}  }
class C{  public Quaternion add(Quaternion q){  this.x+=q.x;  this.y+=q.y;  this.z+=q.z;  this.w+=q.w;  return this;}  }
class C{  public static String createCompleteBugDescription(String userDescription,Throwable exception,boolean attachProcess,boolean attachSystemProps,boolean attachLog){  StringBuffer buffer=new StringBuffer();  buffer.append(userDescription);  buffer.append(Tools.getLineSeparator());  buffer.append(Tools.getLineSeparator());  buffer.append("RapidMiner: ");  buffer.append(RapidMiner.getVersion());  buffer.append(Tools.getLineSeparator());  for (  Plugin plugin : Plugin.getAllPlugins()) {    buffer.append(plugin.getName());    buffer.append(": ");    buffer.append(plugin.getVersion());    buffer.append(Tools.getLineSeparator());  }  buffer.append(Tools.getLineSeparator());  buffer.append(Tools.getLineSeparator());  buffer.append(Tools.getLineSeparator());  buffer.append(getStackTrace(exception));  if (attachProcess) {    buffer.append(Tools.getLineSeparator());    buffer.append(Tools.getLineSeparator());    buffer.append("Process:");    buffer.append(Tools.getLineSeparator());    buffer.append("------------");    buffer.append(Tools.getLineSeparator());    buffer.append(Tools.getLineSeparator());    String xmlProcess;    if (RapidMinerGUI.getMainFrame().getProcess() != null) {      try {        xmlProcess=RapidMinerGUI.getMainFrame().getProcess().getRootOperator().getXML(false);      } catch (      Throwable t) {        xmlProcess="could not read: " + t;      }    } else {      xmlProcess="no process available";    }    buffer.append(xmlProcess);  }  if (attachSystemProps) {    buffer.append(Tools.getLineSeparator());    buffer.append(Tools.getLineSeparator());    buffer.append(Tools.getLineSeparator());    buffer.append(getProperties());  }  if (attachLog) {    buffer.append(Tools.getLineSeparator());    buffer.append(Tools.getLineSeparator());    buffer.append(Tools.getLineSeparator());    buffer.append(getRelevantLogContent());  }  return buffer.toString();}  }
class C{  public boolean hasContainsSampledData(){  return hasExtension(ContainsSampledData.class);}  }
class C{  public void testFindUserGroupsActiveDirectoryWithEmptyBase() throws Exception {  LdapManager mgr=getLdapAD();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new EqualsFilter(mgr.getGroupsReturningAttribute(LdapGroupAttributeConstants.LDAP_GROUP_ATTRIBUTE_MEMBER),"CN=nacho,CN=Users,DC=SERVIDOR-GDOC3,DC=iecisa,DC=corp"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddGroupClasses(true);    searchMgrVO.setBase("");    ret=mgr.findUserGroups(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(4,ret.size());}  }
class C{  public synchronized void addDragSourceListener(DragSourceListener dsl) throws TooManyListenersException {  if (dsl == null)   return;  if (equals(dsl))   throw new IllegalArgumentException("DragSourceContext may not be its own listener");  if (listener != null)   throw new TooManyListenersException(); else   listener=dsl;}  }
class C{  public static boolean is_system(SootMethod m){  Project p=Project.v();  SootClass c=m.getDeclaringClass();  return !p.isSrcClass(c) && !p.isLibClass(c);}  }
class C{  public static void registerBackupManager(IBackupElectricItemManager manager){  backupManagers.add(manager);}  }
class C{  private static boolean eq(double v1,double v2){  return v1 == v2;}  }
class C{  public CGraphSynchronizer(final ZyGraph graph,final CDebugPerspectiveModel debugPerspective){  m_graph=Preconditions.checkNotNull(graph,"IE02330: graph argument can not be null");  m_debugPerspective=Preconditions.checkNotNull(debugPerspective,"IE02331: debugPerspective argument can not be null");  debugPerspective.addListener(m_debugListener);  synchronizeDebugger(null,debugPerspective.getCurrentSelectedDebugger());}  }
class C{  public RestAssessmentDetails fetchAssessmentDetails(final String assessmentNo){  PropertyImpl property;  RestAssessmentDetails assessmentDetails=new RestAssessmentDetails();  BasicProperty basicProperty=basicPropertyDAO.getAllBasicPropertyByPropertyID(assessmentNo);  if (basicProperty != null) {    assessmentDetails.setAssessmentNo(basicProperty.getUpicNo());    assessmentDetails.setPropertyAddress(basicProperty.getAddress().toString());    property=(PropertyImpl)basicProperty.getProperty();    assessmentDetails.setLocalityName(basicProperty.getPropertyID().getLocality().getName());    if (property != null) {      assessmentDetails.setOwnerDetails(prepareOwnerInfo(property));      if (property.getPropertyDetail().getTotalBuiltupArea() != null && property.getPropertyDetail().getTotalBuiltupArea().getArea() != null)       assessmentDetails.setPlinthArea(property.getPropertyDetail().getTotalBuiltupArea().getArea());      Ptdemand currentPtdemand=ptDemandDAO.getNonHistoryCurrDmdForProperty(property);      BigDecimal totalTaxDue=BigDecimal.ZERO;      if (currentPtdemand != null) {        for (        EgDemandDetails demandDetails : currentPtdemand.getEgDemandDetails()) {          if (demandDetails.getAmount().compareTo(demandDetails.getAmtCollected()) > 0) {            totalTaxDue=totalTaxDue.add(demandDetails.getAmount().subtract(demandDetails.getAmtCollected()));          }        }      }      assessmentDetails.setTotalTaxDue(totalTaxDue);    }  }  PropertyMutation propertyMutation=getLatestPropertyMutationByAssesmentNo(assessmentNo);  if (propertyMutation != null) {    assessmentDetails.setMutationFee(propertyMutation.getMutationFee());    if (StringUtils.isNotBlank(propertyMutation.getReceiptNum())) {      assessmentDetails.setIsMutationFeePaid("Y");      assessmentDetails.setFeeReceipt(propertyMutation.getReceiptNum());      Date receiptDate=null;      final Query qry=entityManager.createQuery("select receiptdate from ReceiptHeader where receiptnumber = :receiptNum");      qry.setParameter("receiptNum",propertyMutation.getReceiptNum());      receiptDate=(Date)qry.getSingleResult();      assessmentDetails.setFeeReceiptDate(new SimpleDateFormat("dd/MM/yyyy").format(receiptDate));    } else     assessmentDetails.setIsMutationFeePaid("N");    assessmentDetails.setApplicationNo(propertyMutation.getApplicationNo());  } else {    assessmentDetails.setIsMutationFeePaid("N");    assessmentDetails.setFeeReceipt("");    assessmentDetails.setFeeReceiptDate("");    assessmentDetails.setApplicationNo("");  }  return assessmentDetails;}  }
class C{  private static void listMethods(Output output,String protoDiscoveryRoot,ServiceDescriptor descriptor,Optional<String> methodFilter,Optional<Boolean> withMessage){  boolean printedService=false;  File protoDiscoveryDir=new File(protoDiscoveryRoot).getParentFile();  for (  MethodDescriptor method : descriptor.getMethods()) {    if (!methodFilter.isPresent() || method.getName().contains(methodFilter.get())) {      if (!printedService) {        File pFile=new File(protoDiscoveryDir,descriptor.getFile().getName());        output.writeLine(descriptor.getFullName() + " -> " + pFile.getAbsolutePath());        printedService=true;      }      output.writeLine("  " + descriptor.getFullName() + "/"+ method.getName());      if (withMessage.isPresent() && withMessage.get()) {        output.writeLine(renderDescriptor(method.getInputType(),"  "));        output.newLine();      }    }  }  if (printedService) {    output.newLine();  }}  }
class C{  public boolean tryUnlockRead(){  long s, m;  WNode h;  while ((m=(s=state) & ABITS) != 0L && m < WBIT) {    if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return true;      }    } else     if (tryDecReaderOverflow(s) != 0L)     return true;  }  return false;}  }
