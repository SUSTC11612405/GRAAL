class C{  protected void closeTransportLayer() throws IOException {  super.close();  if (input != null) {    input.close();    output.close();  }}  }
class C{  public static void main(String[] args){  Enumeration<?> names;  String name;  Vector<String> sorted;  System.out.println("\nExperimenter defaults:");  names=PROPERTIES.propertyNames();  sorted=new Vector<String>();  while (names.hasMoreElements()) {    sorted.add(names.nextElement().toString());  }  Collections.sort(sorted);  names=sorted.elements();  while (names.hasMoreElements()) {    name=names.nextElement().toString();    System.out.println("- " + name + ": "+ PROPERTIES.getProperty(name,""));  }  System.out.println();}  }
class C{  private void initialiseHeader(){  ListHead head=null;  head=super.getListHead();  if (head != null) {    return;  }  head=new ListHead();  if (this.getItemRenderer() instanceof WBrowseListItemRenderer) {    ((WBrowseListItemRenderer)this.getItemRenderer()).renderListHead(head);  } else {    throw new ApplicationException("Rendering of the ListHead is unsupported for " + this.getItemRenderer().getClass().getSimpleName());  }  head.setParent(this);  return;}  }
class C{  @Override public void cancelCellEditing(){  for (int i=0; i < editors.length; ++i) {    editors[i].cancelCellEditing();  }  super.cancelCellEditing();}  }
class C{  public static byte[] drawableToByte(Drawable d){  return bitmapToByte(drawableToBitmap(d));}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public long toHours(){  return TimeUnit.HOURS.convert(length,timeUnit);}  }
class C{  public int largestRectangleArea(int[] height){  if (height == null || height.length == 0)   return 0;  height=Arrays.copyOf(height,height.length + 1);  int max=0;  Stack<Integer> s=new Stack<Integer>();  for (int i=0; i < height.length; i++) {    while (!s.isEmpty() && height[i] < height[s.peek()]) {      int h=height[s.pop()];      int w=(s.isEmpty() ? i : i - s.peek() - 1);      max=Math.max(max,h * w);    }    s.push(i);  }  return max;}  }
class C{  public static void openCamera(Context context){  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  context.startActivity(intent);}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public DeletionConstraintException(String message,DeletionConstraintExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public final void clear(){  int len=super.getLength();  super.clear();  if (MAX <= len) {    m_indexFromQName.clear();  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="OBL_UNSATISFIED_OBLIGATION") public static boolean bcmp(String fn1,String fn2){  FileInputStream f1=null;  FileInputStream f2=null;  try {    boolean result=true;    f1=new FileInputStream(fn1);    f2=new FileInputStream(fn2);    int b1, b2, offset=0;    while (true) {      b1=f1.read();      b2=f2.read();      offset++;      if (b1 != b2) {        result=false;      }      if (b1 < 0 && b2 < 0) {        break;      } else       if (b1 < 0 || b2 < 0) {        result=false;        break;      }    }    return result;  } catch (  Throwable e) {  } finally {    try {      if (f1 != null)       f1.close();      if (f2 != null)       f2.close();    } catch (    IOException ioe) {    }  }  return false;}  }
class C{  public void onPackageRemoved(String packageName,int uid){}  }
class C{  public void clearActivations(){  for (  Neuron neuron : this.getFlatNeuronList()) {    neuron.clear();  }}  }
class C{  public JCheckBoxMenuItem(){  this(null,null,false);}  }
class C{  public void waitForNodesToImplement(final String endPointName,long timeoutMS){  if (timeoutMS <= 0) {    timeoutMS=Integer.MAX_VALUE;  }  final long endTime=timeoutMS + System.currentTimeMillis();  while (System.currentTimeMillis() < endTime && !hasImplementors(endPointName)) {    ThreadUtil.sleep(50);  }}  }
class C{  @SuppressWarnings("unused") public static void blackhole(char value){}  }
class C{  protected AnyBreakpointSetReply(final int packetId,final int errorCode,final List<Pair<RelocatedAddress,Integer>> addresses){  super(packetId,errorCode);  this.addresses=Preconditions.checkNotNull(addresses,"IE01058: Addresses argument can not be null");}  }
class C{  public void unscheduleTimer(CCTimer timer){  assert false : "Not implemented. Use unscheduleSelector:forTarget:";}  }
class C{  private void verifyUseFollowsDef(String where,HashSet<Object> definedVariables,BasicBlock curBB,BitVector visitedBBs,ArrayList<BasicBlock> path,int maxPathLength,boolean traceExceptionEdges){  if (path.size() > maxPathLength) {    return;  }  path.add(curBB);  IREnumeration.AllInstructionsEnum instructions=new IREnumeration.AllInstructionsEnum(this,curBB);  while (instructions.hasMoreElements()) {    Instruction instruction=instructions.nextElement();    if (Phi.conforms(instruction)) {      if ((!inSSAForm()) && (!inSSAFormAwaitingReEntry())) {        verror(where,"Phi node encountered but SSA not computed");      }      for (int i=0; i < Phi.getNumberOfPreds(instruction); i++) {        BasicBlock phi_pred=Phi.getPred(instruction,i).block;        if (phi_pred.getNumber() > basicBlockMap.length) {          verror(where,"Phi predecessor not a valid basic block " + phi_pred);        }        if ((curBB != phi_pred) && path.contains(phi_pred)) {          Object variable=getVariableUse(where,Phi.getValue(instruction,i));          if ((variable != null) && (!definedVariables.contains(variable))) {            StringBuilder pathString=new StringBuilder();            for (int j=0; j < path.size(); j++) {              pathString.append(path.get(j).getNumber());              if (j < (path.size() - 1)) {                pathString.append("->");              }            }            verror(where,"Use of " + variable + " before definition: "+ instruction+ "\npath: "+ pathString);          }        }      }    } else {      IREnumeration.AllUsesEnum useOperands=new IREnumeration.AllUsesEnum(this,instruction);      while (useOperands.hasMoreElements()) {        Object variable=getVariableUse(where,useOperands.nextElement());        if ((variable != null) && (!definedVariables.contains(variable))) {          if (instruction.operator().toString().indexOf("xor") != -1)           continue;          StringBuilder pathString=new StringBuilder();          for (int i=0; i < path.size(); i++) {            pathString.append(path.get(i).getNumber());            if (i < (path.size() - 1)) {              pathString.append("->");            }          }          verror(where,"Use of " + variable + " before definition: "+ instruction+ "\npath: "+ pathString);        }      }    }    IREnumeration.AllDefsEnum defOperands=new IREnumeration.AllDefsEnum(this,instruction);    while (defOperands.hasMoreElements()) {      Object variable=getVariableDef(where,defOperands.nextElement());      if (variable != null) {        if ((inSSAForm()) && (!inSSAFormAwaitingReEntry())) {          if (definedVariables.contains(variable)) {            verror(where,"Single assignment broken - multiple definitions of " + variable);          }        }        definedVariables.add(variable);      }    }  }  visitedBBs.set(curBB.getNumber());  Enumeration<BasicBlock> outBlocks;  if (traceExceptionEdges) {    outBlocks=curBB.getOut();  } else {    outBlocks=curBB.getNormalOut();  }  while (outBlocks.hasMoreElements()) {    BasicBlock out=outBlocks.nextElement();    if (!visitedBBs.get(out.getNumber())) {      verifyUseFollowsDef(where,new HashSet<Object>(definedVariables),out,new BitVector(visitedBBs),new ArrayList<BasicBlock>(path),maxPathLength,traceExceptionEdges);      visitedBBs.set(out.getNumber());    }  }}  }
class C{  public static boolean isFulBlock(World world,BlockPosition pos){  return isFulBlock(world.getBlock(pos.x,pos.y,pos.z));}  }
class C{  public synchronized void clear(){  super.clear();  mValue.clear();  initRange();}  }
class C{  @Override public void updateSelectedExtend(Collection<GraphNode> extension){  if (extension.size() == 0) {    emptySelection();    return;  }  setNode(extension.iterator().next());}  }
class C{  public void testBasics() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  InetAddress address=InetAddress.getByName("1.2.3.4");  document.add(new InetAddressPoint("field",address));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(1,searcher.count(InetAddressPoint.newExactQuery("field",address)));  assertEquals(1,searcher.count(InetAddressPoint.newPrefixQuery("field",address,24)));  assertEquals(1,searcher.count(InetAddressPoint.newRangeQuery("field",InetAddress.getByName("1.2.3.3"),InetAddress.getByName("1.2.3.5"))));  assertEquals(1,searcher.count(InetAddressPoint.newSetQuery("field",InetAddress.getByName("1.2.3.4"))));  assertEquals(1,searcher.count(InetAddressPoint.newSetQuery("field",InetAddress.getByName("1.2.3.4"),InetAddress.getByName("1.2.3.5"))));  assertEquals(0,searcher.count(InetAddressPoint.newSetQuery("field",InetAddress.getByName("1.2.3.3"))));  assertEquals(0,searcher.count(InetAddressPoint.newSetQuery("field")));  reader.close();  writer.close();  dir.close();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static AsyncModifySubscriptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncModifySubscriptionE object=new AsyncModifySubscriptionE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","asyncModifySubscription").equals(reader.getName())) {          object.setAsyncModifySubscription(org.oscm.xsd.AsyncModifySubscription.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void httpRequest(HttpRequestEvent e) throws IOException {  e.getWriter().write("<HR>");}  }
class C{  public static void testPrint(int[] dims){  CombinationGenerator cg=new CombinationGenerator(dims);  int[] choice;  System.out.println();  System.out.print("Printing combinations for (");  for (int i=0; i < dims.length; i++) {    System.out.print(dims[i]);    if (i < dims.length - 1) {      System.out.print(", ");    }  }  System.out.println(")\n");  while ((choice=cg.next()) != null) {    if (choice.length == 0) {      System.out.println("zero-length array");    } else {      for (      int aChoice : choice) {        System.out.print(aChoice + "\t");      }      System.out.println();    }  }  System.out.println();}  }
class C{  public void pO(String s) throws IOException {  pO();  p(s);}  }
class C{  public static void main(String[] args) throws Exception {  try {    DMLAppMaster am=new DMLAppMaster();    am.runApplicationMaster(args);  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  protected String translateToHTML(final String text){  final StringBuilder sbuf=new StringBuilder();  final StringCharacterIterator ci=new StringCharacterIterator(text);  char ch=ci.current();  while (ch != CharacterIterator.DONE) {    if (ch == '#') {      ch=ci.next();      if (ch == '#') {        appendHTML(sbuf,ch);        ch=ci.next();      } else {        final String link=extractLink(ci);        if (link != null) {          buildLink(sbuf,link);        }        ch=ci.current();      }    } else {      appendHTML(sbuf,ch);      ch=ci.next();    }  }  return sbuf.toString();}  }
class C{  @Override public void clear(){  decrementAccessCount();}  }
class C{  private boolean prepare(JComponent c,Container root,boolean isPaint,int x,int y,int w,int h){  if (bsg != null) {    bsg.dispose();    bsg=null;  }  bufferStrategy=null;  if (root != null) {    boolean contentsLost=false;    BufferInfo bufferInfo=getBufferInfo(root);    if (bufferInfo == null) {      contentsLost=true;      bufferInfo=new BufferInfo(root);      bufferInfos.add(bufferInfo);      if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {        LOGGER.finer("prepare: new BufferInfo: " + root);      }    }    this.bufferInfo=bufferInfo;    if (!bufferInfo.hasBufferStrategyChanged()) {      bufferStrategy=bufferInfo.getBufferStrategy(true);      if (bufferStrategy != null) {        bsg=bufferStrategy.getDrawGraphics();        if (bufferStrategy.contentsRestored()) {          contentsLost=true;          if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {            LOGGER.finer("prepare: contents restored in prepare");          }        }      } else {        return false;      }      if (bufferInfo.getContentsLostDuringExpose()) {        contentsLost=true;        bufferInfo.setContentsLostDuringExpose(false);        if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {          LOGGER.finer("prepare: contents lost on expose");        }      }      if (isPaint && c == rootJ && x == 0 && y == 0 && c.getWidth() == w && c.getHeight() == h) {        bufferInfo.setInSync(true);      } else       if (contentsLost) {        bufferInfo.setInSync(false);        if (!isRepaintingRoot()) {          repaintRoot(rootJ);        } else {          resetDoubleBufferPerWindow();        }      }      return (bufferInfos != null);    }  }  return false;}  }
class C{  public void resumeService(String path,Service resumedService){  this.serviceResourceTracker.resumeService(path,resumedService);}  }
class C{  public static int checkArgumentNonnegative(final int value,final String errorMessage){  if (value < 0) {    throw new IllegalArgumentException(errorMessage);  }  return value;}  }
class C{  public PicasawebClient(PicasawebService service,String uname,String passwd){  this.service=service;  if (uname != null && passwd != null) {    try {      service.setUserCredentials(uname,passwd);    } catch (    AuthenticationException e) {      throw new IllegalArgumentException("Illegal username/password combination.");    }  }}  }
class C{  public void randomizeWeights(){  for (  Synapse s : synapseList) {    s.randomize();  }}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public void onMouseExited(MapMouseEvent ev){}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public BaseCopyRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String name,final ItemReference parentReference){  super(requestUrl,client,options,AsyncMonitorLocation.class);  mBody=new CopyBody();  mBody.name=name;  mBody.parentReference=parentReference;  addHeader("Prefer","respond-async");}  }
class C{  protected void addLeafPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionState_leaf_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionState_leaf_feature","_UI_ExecutionState_type"),SexecPackage.Literals.EXECUTION_STATE__LEAF,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public boolean isEmpty(){  purgeBeforeRead();  return super.isEmpty();}  }
class C{  public static double parseDouble(String s){  if (POSITIVE_INFINITY.equals(s)) {    return Double.POSITIVE_INFINITY;  } else   if (NEGATIVE_INFINITY.equals(s)) {    return Double.NEGATIVE_INFINITY;  } else   if (NaN.equals(s)) {    return Double.NaN;  } else {    s=trimPlusSign(s);    return Double.parseDouble(s);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public RandomScoreFunctionBuilder seed(String seed){  this.seed=seed;  return this;}  }
class C{  public void loadArgArray(){  push(argumentTypes.length);  newArray(OBJECT_TYPE);  for (int i=0; i < argumentTypes.length; i++) {    dup();    push(i);    loadArg(i);    box(argumentTypes[i]);    arrayStore(OBJECT_TYPE);  }}  }
class C{  public void writeFile(final String name,final String mimeType,final String fileName,final InputStream is) throws java.io.IOException {  if (is == null) {    throw new IllegalArgumentException("Input stream cannot be null.");  }  if (fileName == null) {    throw new IllegalArgumentException("File name cannot be null.");  }  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(NEWLINE);  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"; filename=\""+ fileName+ "\"");  out.writeBytes(NEWLINE);  if (mimeType != null) {    out.writeBytes("Content-Type: " + mimeType);    out.writeBytes(NEWLINE);  }  out.writeBytes(NEWLINE);  final byte[] data=new byte[1024];  int r=0;  while ((r=is.read(data,0,data.length)) != -1) {    out.write(data,0,r);  }  try {    is.close();  } catch (  final Exception e) {  }  out.writeBytes(NEWLINE);  out.flush();}  }
class C{  public AccountHeaderBuilder withHeaderBackgroundScaleType(ImageView.ScaleType headerBackgroundScaleType){  this.mHeaderBackgroundScaleType=headerBackgroundScaleType;  return this;}  }
class C{  public final int nPieces(int pType){  int ret=0;  for (int sq=0; sq < 64; sq++)   if (squares[sq] == pType)   ret++;  return ret;}  }
class C{  public static void assertBillingEvents(BillingEvent... expected) throws Exception {  assertThat(FluentIterable.from(getBillingEvents()).transform(BILLING_EVENT_ID_STRIPPER)).containsExactlyElementsIn(FluentIterable.from(asList(expected)).transform(BILLING_EVENT_ID_STRIPPER));}  }
class C{  public static void removeListener(final DiagnosticListener listener){  if (listener != null) {    listener.close();  }  LISTENERS.remove(listener);}  }
class C{  public int refresh(CloudObject[] objects){  return refreshImpl(objects,null);}  }
class C{  @Override public void zoom(double percent){}  }
class C{  public void testIsolatedMode() throws Exception {  depMode=DeploymentMode.ISOLATED;  processTest(false,false);}  }
class C{  protected boolean scrollPageUp(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int top=widget.getScrollY() - getInnerHeight(widget);  int topLine=layout.getLineForVertical(top);  if (topLine >= 0) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(topLine));    return true;  }  return false;}  }
class C{  public int length(){  return value.length();}  }
class C{  public List<GitlabUser> findUsers(String emailOrUsername) throws IOException {  List<GitlabUser> users=new ArrayList<GitlabUser>();  if (emailOrUsername != null && !emailOrUsername.equals("")) {    String tailUrl=GitlabUser.URL + "?search=" + emailOrUsername;    GitlabUser[] response=retrieve().to(tailUrl,GitlabUser[].class);    users=Arrays.asList(response);  }  return users;}  }
class C{  private synchronized boolean containsMapping(Object key,Object value){  int hash=Collections.secondaryHash(key);  HashtableEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashtableEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && e.key.equals(key)) {      return e.value.equals(value);    }  }  return false;}  }
class C{  public MatrixOfVecs(Vec... rows){  this(Arrays.asList(rows));}  }
class C{  public static void checkHitCollector(Random random,Query query,String defaultFieldName,IndexSearcher searcher,int[] results) throws IOException {  QueryUtils.check(random,query,searcher);  Set<Integer> correct=new TreeSet<>();  for (int i=0; i < results.length; i++) {    correct.add(Integer.valueOf(results[i]));  }  final Set<Integer> actual=new TreeSet<>();  final Collector c=new SetCollector(actual);  searcher.search(query,c);  Assert.assertEquals("Simple: " + query.toString(defaultFieldName),correct,actual);  for (int i=-1; i < 2; i++) {    actual.clear();    IndexSearcher s=QueryUtils.wrapUnderlyingReader(random,searcher,i);    s.search(query,c);    Assert.assertEquals("Wrap Reader " + i + ": "+ query.toString(defaultFieldName),correct,actual);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean isSetVertwo2000(){  return this.vertwo2000 != null;}  }
class C{  public static float max(float a,float b){  return 0.0f;}  }
class C{  private void validatePatch(State current,State patch,URI referer){  checkNotNull(current.taskState.stage);  checkNotNull(patch.taskState.stage);  if (current.taskState.stage != TaskState.TaskStage.CREATED && referer.getPath().contains(TaskSchedulerServiceFactory.SELF_LINK)) {    throw new IllegalStateException("Service is not in CREATED stage, ignores patch from TaskSchedulerService");  }  ValidationUtils.validatePatch(current,patch);  checkState(current.taskState.stage.ordinal() < TaskState.TaskStage.FINISHED.ordinal());  checkState(patch.taskState.stage.ordinal() >= current.taskState.stage.ordinal());}  }
class C{  public void serialize(XmlSerializer serializer,boolean rootBlock) throws IOException {  serializer.startTag(null,mIsShadow ? "shadow" : "block").attribute(null,"type",mType).attribute(null,"id",mUuid);  if (rootBlock) {    serializer.attribute(null,"x",Integer.toString(mPosition.x)).attribute(null,"y",Integer.toString(mPosition.y));  }  if (isCollapsed()) {    serializer.attribute(null,"collapsed","true");  }  if (!isDeletable() && !isShadow()) {    serializer.attribute(null,"deletable","false");  }  if (isDisabled()) {    serializer.attribute(null,"disabled","true");  }  if (!isEditable()) {    serializer.attribute(null,"editable","false");  }  if (!isMovable() && !isShadow()) {    serializer.attribute(null,"movable","false");  }  if (mInputsInlineModified) {    serializer.attribute(null,"inline",Boolean.toString(mInputsInline));  }  for (int i=0; i < mInputList.size(); i++) {    if (mInputList.get(i) != null) {      mInputList.get(i).serialize(serializer);    }  }  if (getNextBlock() != null) {    serializer.startTag(null,"next");    getNextBlock().serialize(serializer,false);    serializer.endTag(null,"next");  }  serializer.endTag(null,mIsShadow ? "shadow" : "block");}  }
class C{  @Override public void onUpdateScrollbar(int dy){  if (mWidgets == null) {    return;  }  int rowCount=mWidgets.getPackageSize();  if (rowCount == 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  getCurScrollState(mScrollPosState,-1);  if (mScrollPosState.rowIndex < 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  synchronizeScrollBarThumbOffsetToViewScroll(mScrollPosState,rowCount);}  }
class C{  private boolean await0(long timeoutMillis,boolean interruptable) throws InterruptedException {  long endTime=System.currentTimeMillis() + timeoutMillis;  if (endTime < 0) {    endTime=Long.MAX_VALUE;  }synchronized (lock) {    if (ready) {      return ready;    } else     if (timeoutMillis <= 0) {      return ready;    }    waiters++;    try {      for (; ; ) {        try {          long timeOut=Math.min(timeoutMillis,DEAD_LOCK_CHECK_INTERVAL);          lock.wait(timeOut);        } catch (        InterruptedException e) {          if (interruptable) {            throw e;          }        }        if (ready) {          return true;        }        if (endTime < System.currentTimeMillis()) {          return ready;        }      }    }  finally {      waiters--;      if (!ready) {        checkDeadLock();      }    }  }}  }
class C{  public void putHostInMaintenanceMode(URI hostId,String stepId){  log.info("putHostInMaintenanceMode {}",hostId);  Host host=null;  try {    WorkflowStepCompleter.stepExecuting(stepId);    host=_dbClient.queryObject(Host.class,hostId);    if (NullColumnValueGetter.isNullURI(host.getVcenterDataCenter())) {      log.info("datacenter is null, nothing to do");      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    if (NullColumnValueGetter.isNullURI(host.getCluster())) {      log.warn("cluster is null, nothing to do");      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    vcenterController.enterMaintenanceMode(host.getVcenterDataCenter(),host.getCluster(),host.getId());    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VcenterControllerException e) {    log.warn("VcenterControllerException when trying to putHostInMaintenanceMode: " + e.getMessage(),e);    if (e.getCause() instanceof VcenterObjectNotFoundException) {      log.info("did not find the host, considering success");      WorkflowStepCompleter.stepSucceded(stepId);    } else     if (e.getCause() instanceof VcenterObjectConnectionException) {      log.info("host is not connected, considering success");      WorkflowStepCompleter.stepSucceded(stepId);    } else {      log.error("failure " + e);      WorkflowStepCompleter.stepFailed(stepId,e);    }  }catch (  InternalException e) {    log.error("InternalException when trying to putHostInMaintenanceMode: " + e.getMessage(),e);    WorkflowStepCompleter.stepFailed(stepId,e);  }catch (  Exception e) {    log.error("unexpected exception" + e.getMessage(),e);    ServiceCoded serviceCoded=ComputeSystemControllerException.exceptions.unableToPutHostInMaintenanceMode(host != null ? host.getHostName() : hostId.toString(),e);    WorkflowStepCompleter.stepFailed(stepId,serviceCoded);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void abortIfRunning(){  if (mRunning) {    if (!mScroller.isFinished()) {      mAbort=true;      mScroller.forceFinished(true);    }    finish();    mAbort=false;  }}  }
class C{  protected void sequence_BogusTypeRefFragment_ColonSepTypeRef_FieldDeclarationImpl_N4FieldDeclaration(ISerializationContext context,N4FieldDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static int charToGsm(char c){  try {    return charToGsm(c,false);  } catch (  EncodeException ex) {    return sCharsToGsmTables[0].get(' ',' ');  }}  }
class C{  public final void increaseReadBytes(long nbBytesRead,long currentTime){  throughputCalculationLock.lock();  try {    readBytes+=nbBytesRead;    lastReadTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public void saveSelectedFeatures(String fileName){  try {    shapeType=shapefile.getShapeType();    int numRecs=shapefile.getNumberOfRecords();    AttributeTable table=shapefile.getAttributeTable();    ShapeFile output=new ShapeFile(fileName,shapeType,table.getAllFields());    for (int i=1; i <= numRecs; i++) {      if (selectedFeatures[i]) {        ShapeFileRecord record=shapefile.getRecord(i - 1);        Object[] fields=table.getRecord(i - 1);        output.addRecord(record.getGeometry(),fields);      }    }    output.write();  } catch (  Exception e) {  }}  }
class C{  public void pause(){  if (mHandlerRunnable == null)   return;  mHandler.removeCallbacks(mHandlerRunnable);  mHandlerRunnable=null;}  }
class C{  public IncrementalSAXSource_Filter(CoroutineManager co,int controllerCoroutineID){  this.init(co,controllerCoroutineID,-1);}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public Enumeration<lucee.runtime.type.Collection.Key> keys(){  return new KeyIterator();}  }
class C{  private void afterCreateToStringMethod(PsiMethod method,Map<String,String> params,TemplateResource template){  PsiFile containingFile=clazz.getContainingFile();  if (containingFile instanceof PsiJavaFile) {    final PsiJavaFile javaFile=(PsiJavaFile)containingFile;    if (params.get("autoImportPackages") != null) {      autoImportPackages(javaFile,params.get("autoImportPackages"));    }  }  method=(PsiMethod)JavaCodeStyleManager.getInstance(clazz.getProject()).shortenClassReferences(method);  if (!config.isJumpToMethod() || editor == null) {    return;  }  int offset=method.getTextOffset();  if (offset <= 2) {    return;  }  VisualPosition vp=editor.offsetToVisualPosition(offset);  if (logger.isDebugEnabled())   logger.debug("Moving/Scrolling caret to " + vp + " (offset="+ offset+ ")");  editor.getCaretModel().moveToVisualPosition(vp);  editor.getScrollingModel().scrollToCaret(ScrollType.CENTER_DOWN);}  }
class C{  public static void d(String tag,String s){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s);}  }
class C{  public double calculateVBF(long rto){  if (rto > UPPERVBFLIMIT) {    return VBFHIGH;  }  if (rto < LOWERVBFLIMIT) {    return VBFLOW;  }  return config.getFloat(NetworkConfig.Keys.ACK_TIMEOUT_SCALE);}  }
class C{  public static AttributeSelection singleLabelAttributeSelection(Instances trainData,List<String> featureSearcher,List<String> attributeEvaluator) throws Exception {  AttributeSelection selector=new AttributeSelection();  ASSearch search=ASSearch.forName(featureSearcher.get(0),featureSearcher.subList(1,featureSearcher.size()).toArray(new String[0]));  ASEvaluation evaluation=ASEvaluation.forName(attributeEvaluator.get(0),attributeEvaluator.subList(1,attributeEvaluator.size()).toArray(new String[0]));  selector.setSearch(search);  selector.setEvaluator(evaluation);  selector.SelectAttributes(trainData);  return selector;}  }
class C{  public boolean testBit(int i){  if (i < 0) {    throw new RuntimeException();  }  if (i > (len - 1)) {    return false;  }  return (value[i >>> 5] & bitMask[i & 0x1f]) != 0;}  }
class C{  public WbXmlExtensionDef locateExtension(String value){  WbXmlExtensionDef ext=new WbXmlExtensionDef(value,(byte)0x0);  WbXmlExtensionDef res=this.extsByValue.ceiling(ext);  if (res != null && res.getValue().equals(value)) {    return res;  } else {    return null;  }}  }
class C{  public void run(){  state.lock.lock();  try {    state.setRunState(RunState.Prepared);    prepared.signal();    try {      locksHeld.await();    } catch (    InterruptedException ex) {      log.warn("Interrupted",ex);      throw new RuntimeException(ex);    }    final long commitTime=nextTimestamp();    DistributedTxCommitTask.this.commitTime=commitTime;    state.setCommitTime(commitTime);  }  finally {    state.lock.unlock();  }}  }
class C{  @Deprecated public static void registerEntity(String serviceName,Class<? extends TaggedLogAPIEntity> clazz) throws IllegalArgumentException {  registerEntity(serviceName,createEntityDefinition(clazz));}  }
class C{  private CompletableFuture<Connection> createConnection(Address address){  return client.connect(address).thenApply(null);}  }
class C{  private String convertLessThanOneThousand(int number){  int unit=0;  int tens=0;  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100];    number/=100;  } else {    unit=number % 10;    soFar=numNames[unit];    number/=10;    tens=number % 10;    if (unit == 1 || unit == 8)     soFar=tensNames[tens].substring(0,tensNames[tens].length() - 1) + soFar; else     soFar=tensNames[tens] + soFar;    number/=10;  }  if (number == 0)   return soFar;  if (number > 1)   return numNames[number] + "CENTO" + soFar; else   return "CENTO" + soFar;}  }
class C{  public static void main(String[] args) throws Exception {  new Negater().start(args);}  }
class C{  public <T>DrawingAttributeAction(DrawingEditor editor,AttributeKey<T> key,@Nullable T value,@Nullable String name){  this(editor,key,value,name,null);}  }
class C{  public Socket createBoundSocket(InetSocketAddress sockAddr) throws IOException {  return new PseudoTcpSocket(new PseudoTcpSocketImpl(DEFAULT_CONVERSATION_ID,new DatagramSocket(sockAddr)));}  }
class C{  public void sort(){  this.valueCollection.sort();}  }
class C{  int run(Options options) throws Exception {  if (getConf().getBoolean("isMR1",false) && "local".equals(getConf().get("mapred.job.tracker"))) {    throw new IllegalStateException("Running with LocalJobRunner (i.e. all of Hadoop inside a single JVM) is not supported " + "because LocalJobRunner does not (yet) implement the Hadoop Distributed Cache feature, " + "which is required for passing files via --files and --libjars");  }  long programStartTime=System.nanoTime();  if (options.fairSchedulerPool != null) {    getConf().set("mapred.fairscheduler.pool",options.fairSchedulerPool);  }  getConf().setInt(SolrOutputFormat.SOLR_RECORD_WRITER_MAX_SEGMENTS,options.maxSegments);  getConf().setBoolean("mapred.used.genericoptionsparser",true);  if (options.log4jConfigFile != null) {    Utils.setLogConfigFile(options.log4jConfigFile,getConf());    addDistributedCacheFile(options.log4jConfigFile,getConf());  }  job=Job.getInstance(getConf());  job.setJarByClass(getClass());  if (options.morphlineFile == null) {    throw new ArgumentParserException("Argument --morphline-file is required",null);  }  verifyGoLiveArgs(options,null);  verifyZKStructure(options,null);  int mappers=new JobClient(job.getConfiguration()).getClusterStatus().getMaxMapTasks();  LOG.info("Cluster reports {} mapper slots",mappers);  if (options.mappers == -1) {    mappers=8 * mappers;  } else {    mappers=options.mappers;  }  if (mappers <= 0) {    throw new IllegalStateException("Illegal number of mappers: " + mappers);  }  options.mappers=mappers;  FileSystem fs=options.outputDir.getFileSystem(job.getConfiguration());  if (fs.exists(options.outputDir) && !delete(options.outputDir,true,fs)) {    return -1;  }  Path outputResultsDir=new Path(options.outputDir,RESULTS_DIR);  Path outputReduceDir=new Path(options.outputDir,"reducers");  Path outputStep1Dir=new Path(options.outputDir,"tmp1");  Path outputStep2Dir=new Path(options.outputDir,"tmp2");  Path outputTreeMergeStep=new Path(options.outputDir,"mtree-merge-output");  Path fullInputList=new Path(outputStep1Dir,FULL_INPUT_LIST);  LOG.debug("Creating list of input files for mappers: {}",fullInputList);  long numFiles=addInputFiles(options.inputFiles,options.inputLists,fullInputList,job.getConfiguration());  if (numFiles == 0) {    LOG.info("No input files found - nothing to process");    return 0;  }  int numLinesPerSplit=(int)ceilDivide(numFiles,mappers);  if (numLinesPerSplit < 0) {    numLinesPerSplit=Integer.MAX_VALUE;  }  numLinesPerSplit=Math.max(1,numLinesPerSplit);  int realMappers=Math.min(mappers,(int)ceilDivide(numFiles,numLinesPerSplit));  calculateNumReducers(options,realMappers);  int reducers=options.reducers;  LOG.info("Using these parameters: " + "numFiles: {}, mappers: {}, realMappers: {}, reducers: {}, shards: {}, fanout: {}, maxSegments: {}",new Object[]{numFiles,mappers,realMappers,reducers,options.shards,options.fanout,options.maxSegments});  LOG.info("Randomizing list of {} input files to spread indexing load more evenly among mappers",numFiles);  long startTime=System.nanoTime();  if (numFiles < job.getConfiguration().getInt(MAIN_MEMORY_RANDOMIZATION_THRESHOLD,100001)) {    randomizeFewInputFiles(fs,outputStep2Dir,fullInputList);  } else {    int numLinesPerRandomizerSplit=Math.max(10 * 1000 * 1000,numLinesPerSplit);    Job randomizerJob=randomizeManyInputFiles(getConf(),fullInputList,outputStep2Dir,numLinesPerRandomizerSplit);    if (!waitForCompletion(randomizerJob,options.isVerbose)) {      return -1;    }  }  float secs=(System.nanoTime() - startTime) / (float)(10 ^ 9);  LOG.info("Done. Randomizing list of {} input files took {} secs",numFiles,secs);  job.setInputFormatClass(NLineInputFormat.class);  NLineInputFormat.addInputPath(job,outputStep2Dir);  NLineInputFormat.setNumLinesPerSplit(job,numLinesPerSplit);  FileOutputFormat.setOutputPath(job,outputReduceDir);  String mapperClass=job.getConfiguration().get(JobContext.MAP_CLASS_ATTR);  if (mapperClass == null) {    Class clazz=MorphlineMapper.class;    mapperClass=clazz.getName();    job.setMapperClass(clazz);  }  job.setJobName(getClass().getName() + "/" + Utils.getShortClassName(mapperClass));  if (job.getConfiguration().get(JobContext.REDUCE_CLASS_ATTR) == null) {    job.setReducerClass(SolrReducer.class);  }  if (options.updateConflictResolver == null) {    throw new IllegalArgumentException("updateConflictResolver must not be null");  }  job.getConfiguration().set(SolrReducer.UPDATE_CONFLICT_RESOLVER,options.updateConflictResolver);  if (options.zkHost != null) {    assert options.collection != null;    if (job.getConfiguration().get(JobContext.PARTITIONER_CLASS_ATTR) == null) {      job.setPartitionerClass(SolrCloudPartitioner.class);    }    job.getConfiguration().set(SolrCloudPartitioner.ZKHOST,options.zkHost);    job.getConfiguration().set(SolrCloudPartitioner.COLLECTION,options.collection);  }  job.getConfiguration().setInt(SolrCloudPartitioner.SHARDS,options.shards);  job.setOutputFormatClass(SolrOutputFormat.class);  if (options.solrHomeDir != null) {    SolrOutputFormat.setupSolrHomeCache(options.solrHomeDir,job);  } else {    assert options.zkHost != null;    ZooKeeperInspector zki=new ZooKeeperInspector();    SolrZkClient zkClient=zki.getZkClient(options.zkHost);    try {      String configName=zki.readConfigName(zkClient,options.collection);      File tmpSolrHomeDir=zki.downloadConfigDir(zkClient,configName);      SolrOutputFormat.setupSolrHomeCache(tmpSolrHomeDir,job);      options.solrHomeDir=tmpSolrHomeDir;    }  finally {      zkClient.close();    }  }  MorphlineMapRunner runner=setupMorphline(options);  if (options.isDryRun && runner != null) {    LOG.info("Indexing {} files in dryrun mode",numFiles);    startTime=System.nanoTime();    dryRun(runner,fs,fullInputList);    secs=(System.nanoTime() - startTime) / (float)(10 ^ 9);    LOG.info("Done. Indexing {} files in dryrun mode took {} secs",numFiles,secs);    goodbye(null,programStartTime);    return 0;  }  job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM,options.morphlineFile.getName());  job.setNumReduceTasks(reducers);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(SolrInputDocumentWritable.class);  LOG.info("Indexing {} files using {} real mappers into {} reducers",new Object[]{numFiles,realMappers,reducers});  startTime=System.nanoTime();  if (!waitForCompletion(job,options.isVerbose)) {    return -1;  }  secs=(System.nanoTime() - startTime) / (float)(10 ^ 9);  LOG.info("Done. Indexing {} files using {} real mappers into {} reducers took {} secs",new Object[]{numFiles,realMappers,reducers,secs});  int mtreeMergeIterations=0;  if (reducers > options.shards) {    mtreeMergeIterations=(int)Math.round(log(options.fanout,reducers / options.shards));  }  LOG.debug("MTree merge iterations to do: {}",mtreeMergeIterations);  int mtreeMergeIteration=1;  while (reducers > options.shards) {    job=Job.getInstance(getConf());    job.setJarByClass(getClass());    job.setJobName(getClass().getName() + "/" + Utils.getShortClassName(TreeMergeMapper.class));    job.setMapperClass(TreeMergeMapper.class);    job.setOutputFormatClass(TreeMergeOutputFormat.class);    job.setNumReduceTasks(0);    job.setOutputKeyClass(Text.class);    job.setOutputValueClass(NullWritable.class);    job.setInputFormatClass(NLineInputFormat.class);    Path inputStepDir=new Path(options.outputDir,"mtree-merge-input-iteration" + mtreeMergeIteration);    fullInputList=new Path(inputStepDir,FULL_INPUT_LIST);    LOG.debug("MTree merge iteration {}/{}: Creating input list file for mappers {}",new Object[]{mtreeMergeIteration,mtreeMergeIterations,fullInputList});    numFiles=createTreeMergeInputDirList(outputReduceDir,fs,fullInputList);    if (numFiles != reducers) {      throw new IllegalStateException("Not same reducers: " + reducers + ", numFiles: "+ numFiles);    }    NLineInputFormat.addInputPath(job,fullInputList);    NLineInputFormat.setNumLinesPerSplit(job,options.fanout);    FileOutputFormat.setOutputPath(job,outputTreeMergeStep);    LOG.info("MTree merge iteration {}/{}: Merging {} shards into {} shards using fanout {}",new Object[]{mtreeMergeIteration,mtreeMergeIterations,reducers,(reducers / options.fanout),options.fanout});    startTime=System.nanoTime();    if (!waitForCompletion(job,options.isVerbose)) {      return -1;    }    if (!renameTreeMergeShardDirs(outputTreeMergeStep,job,fs)) {      return -1;    }    secs=(System.nanoTime() - startTime) / (float)(10 ^ 9);    LOG.info("MTree merge iteration {}/{}: Done. Merging {} shards into {} shards using fanout {} took {} secs",new Object[]{mtreeMergeIteration,mtreeMergeIterations,reducers,(reducers / options.fanout),options.fanout,secs});    if (!delete(outputReduceDir,true,fs)) {      return -1;    }    if (!rename(outputTreeMergeStep,outputReduceDir,fs)) {      return -1;    }    assert reducers % options.fanout == 0;    reducers=reducers / options.fanout;    mtreeMergeIteration++;  }  assert reducers == options.shards;  for (  FileStatus stats : fs.listStatus(outputReduceDir)) {    String dirPrefix=SolrOutputFormat.getOutputName(job);    Path srcPath=stats.getPath();    if (stats.isDirectory() && srcPath.getName().startsWith(dirPrefix)) {      String dstName=dirPrefix + srcPath.getName().substring(dirPrefix.length() + "-m".length());      Path dstPath=new Path(srcPath.getParent(),dstName);      if (!rename(srcPath,dstPath,fs)) {        return -1;      }    }  }  ;  if (!rename(outputReduceDir,outputResultsDir,fs)) {    return -1;  }  if (options.goLive && !new GoLive().goLive(options,listSortedOutputShardDirs(outputResultsDir,fs))) {    return -1;  }  goodbye(job,programStartTime);  return 0;}  }
class C{  public boolean isIoLoadBalanceEnabled(){  return ioLoadBalanceEnabled;}  }
class C{  private static SymmetricalWordAlignment identityAlignment(Sequence<IString> sequence){  SymmetricalWordAlignment alignment=new SymmetricalWordAlignment(sequence,sequence);  int sequenceLength=sequence.size();  for (int i=0; i < sequenceLength; ++i) {    alignment.addAlign(i,i);  }  return alignment;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.362 -0500",hash_original_method="8BF7664EE3AA81913FF5A6B556936B07",hash_generated_method="318A49A0E5FDA97B4DA702E8D551630F") public void put(long key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=idealLongArraySize(mSize + 1);      long[] nkeys=new long[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public int indexOfColumnName(String columnName){  return columnNameList.indexOf(columnName.toLowerCase());}  }
class C{  protected void restoreState(){  if (storePartials) {    likelihoodCore.restoreState();  } else {    updateAllNodes();  }  super.restoreState();}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public Earning(final Integer value,final String sellerName,final boolean shouldReward){  super();  setRPClass(EARNING_RPCLASS_NAME);  hide();  put(VALUE_ATTRIBUTE,value);  this.value=value;  this.sellerName=sellerName;  put(NAME_ATTRIBUTE,sellerName);  put(REWARD_ATTRIBUTE,shouldReward ? 1 : 0);  put(TIMESTAMP_ATTRIBUTE,Long.toString(System.currentTimeMillis()));}  }
class C{  public boolean isOrientationChanged(){  return (mRotation / 90) % 2 != 0;}  }
class C{  public static void toWriter(Node node,Writer writer,Map<String,String> outputProperties) throws TransformerException {  Transformer transformer;  try {    transformer=TransformerFactory.newInstance().newTransformer();  } catch (  TransformerConfigurationException e) {    throw new RuntimeException(e);  }catch (  TransformerFactoryConfigurationError e) {    throw new RuntimeException(e);  }  assignOutputProperties(transformer,outputProperties);  DOMSource source=new DOMSource(node);  StreamResult result=new StreamResult(writer);  transformer.transform(source,result);}  }
class C{  public static boolean isClusterInExport(DbClient dbClient,URI cluster){  List<ExportGroup> exportGroups=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,ExportGroup.class,AlternateIdConstraint.Factory.getConstraint(ExportGroup.class,"clusters",cluster.toString()));  return !exportGroups.isEmpty();}  }
class C{  private void initMasterData(String custAbr) throws Exception {  Organization tpAndSupplier=Organizations.createOrganization(mgr,OrganizationRoleType.SUPPLIER,OrganizationRoleType.TECHNOLOGY_PROVIDER);  OrganizationReference ref=new OrganizationReference(platformOperator,tpAndSupplier,OrganizationReferenceType.PLATFORM_OPERATOR_TO_SUPPLIER);  mgr.persist(ref);  mgr.persist(tpAndSupplier);  OrganizationReference orgRef=new OrganizationReference(tpAndSupplier,tpAndSupplier,OrganizationReferenceType.TECHNOLOGY_PROVIDER_TO_SUPPLIER);  mgr.persist(orgRef);  tpAndSupplier.getTargets().add(orgRef);  tpAndSupplier.getSources().add(orgRef);  TechnicalProduct tProd=TechnicalProducts.createTechnicalProduct(mgr,tpAndSupplier,"TP_ID_" + custAbr,false,ServiceAccessType.LOGIN);  prepareTechnicalProduct(tProd);  MarketingPermission mp=new MarketingPermission();  mp.setTechnicalProduct(tProd);  mp.setOrganizationReference(orgRef);  mgr.persist(mp);  long tpKey=tProd.getKey();  TechnicalProduct technicalProduct=mgr.getReference(TechnicalProduct.class,tpKey);  Event event=new Event();  event.setTechnicalProduct(technicalProduct);  event.setEventIdentifier(PlatformEventIdentifier.USER_LOGIN_TO_SERVICE);  event.setEventType(EventType.SERVICE_EVENT);  mgr.persist(event);  LocalizedResource lr=new LocalizedResource();  lr.setLocale("en");  lr.setObjectKey(event.getKey());  lr.setObjectType(LocalizedObjectTypes.EVENT_DESC);  lr.setValue("en login event");  mgr.persist(lr);  LocalizedResource lr1=new LocalizedResource();  lr1.setLocale("de");  lr1.setObjectKey(event.getKey());  lr1.setObjectType(LocalizedObjectTypes.EVENT_DESC);  lr1.setValue("de login event");  mgr.persist(lr1);  addProducts(custAbr,tpAndSupplier,tProd,MAX_PRODUCT_COUNT + 1,testProducts.get(custAbr));  ProductReference pref;  pref=new ProductReference(testProducts.get(custAbr).get(0),testProducts.get(custAbr).get(MAX_PRODUCT_COUNT - 3));  mgr.persist(pref);  pref=new ProductReference(testProducts.get(custAbr).get(0),testProducts.get(custAbr).get(MAX_PRODUCT_COUNT - 2));  mgr.persist(pref);  PlatformUser supplierUser=Organizations.createUserForOrg(mgr,tpAndSupplier,true,"admin");  if (custAbr.equalsIgnoreCase("A")) {    tpAndSupplierA=tpAndSupplier;    supplierUserA=supplierUser;    customerAdminsA=new PlatformUser[MAX_CUSTOMERS_COUNT];  } else {    tpAndSupplierB=tpAndSupplier;    supplierUserB=supplierUser;    customerAdminsB=new PlatformUser[MAX_CUSTOMERS_COUNT];  }  Organization cust=null;  for (int i=1; i <= MAX_CUSTOMERS_COUNT; i++) {    cust=Organizations.createOrganization(mgr,OrganizationRoleType.CUSTOMER);    ref=new OrganizationReference(tpAndSupplier,cust,OrganizationReferenceType.SUPPLIER_TO_CUSTOMER);    mgr.persist(ref);    mgr.persist(cust);    mgr.flush();    testOrganizations.get(custAbr).add(cust);    ArrayList<PlatformUser> userlist=new ArrayList<>();    testUsers.put(cust,userlist);    PlatformUser admin=Organizations.createUserForOrg(mgr,cust,true,"admin");    if (custAbr.equalsIgnoreCase("A")) {      customerAdminsA[i - 1]=admin;    } else {      customerAdminsB[i - 1]=admin;    }    userlist.add((PlatformUser)ReflectiveClone.clone(admin));    for (int j=1; j <= 5; j++) {      PlatformUser user=Organizations.createUserForOrg(mgr,cust,false,"user" + j);      userlist.add((PlatformUser)ReflectiveClone.clone(user));    }  }  mgr.flush();}  }
class C{  public DtoProductTypeServiceImpl(final GenericService<ProductType> productTypeGenericService,final DtoFactory dtoFactory,final AdaptersRepository adaptersRepository){  super(dtoFactory,productTypeGenericService,adaptersRepository);}  }
class C{  public static byte[] parseSchemeSpecificData(byte[] atom,UUID uuid){  ParsableByteArray atomData=new ParsableByteArray(atom);  if (!isPsshAtom(atomData,uuid)) {    return null;  }  atomData.setPosition(Atom.FULL_HEADER_SIZE + 16);  int dataSize=atomData.readInt();  byte[] data=new byte[dataSize];  atomData.readBytes(data,0,dataSize);  return data;}  }
class C{  protected void shutdown(){  session=null;  version=null;  in=null;  handshakeProtocol=null;  alertProtocol=null;  appData=null;  if (pendingConnectionState != null) {    pendingConnectionState.shutdown();  }  pendingConnectionState=null;  if (activeReadState != null) {    activeReadState.shutdown();  }  activeReadState=null;  if (activeReadState != null) {    activeReadState.shutdown();  }  activeWriteState=null;}  }
class C{  protected String decode(String textToDecode){  return textToDecode;}  }
class C{  public int strStr(String haystack,String needle){  if (needle.isEmpty()) {    return 0;  }  int m=haystack.length();  int n=needle.length();  for (int i=0; i <= m - n; i++) {    for (int j=0; j < n; j++) {      if (haystack.charAt(i + j) != needle.charAt(j)) {        break;      }      if (j == n - 1) {        return i;      }    }  }  return -1;}  }
class C{  @Override public Object visit(NormalMethod method){  fmt.out("%s %s(",method.getReturnType(),method.getName());  boolean first=true;  for (  Declaration decl : method.getParams()) {    if (first) {      first=false;    } else {      fmt.out(",");    }    decl.accept(this);  }  fmt.out(") {");  fmt.newline();  fmt.increaseIndent();  method.getBody().accept(this);  fmt.decreaseIndent();  fmt.out("%s}",fmt.margin());  fmt.newline();  return null;}  }
class C{  protected ByteArrayOutputStream parseBytes(ByteArrayOutputStream bos) throws IOException {  int ch;  for (ch=read(); ch >= 0 && ch != '<'; ch=read()) {    int b1=ch;    int b2=read();    int b3=read();    int b4=read();    if (b4 != '=') {      int chunk=((base64Decode[b1] << 18) + (base64Decode[b2] << 12) + (base64Decode[b3] << 6)+ (base64Decode[b4]));      bos.write(chunk >> 16);      bos.write(chunk >> 8);      bos.write(chunk);    } else     if (b3 != '=') {      int chunk=((base64Decode[b1] << 12) + (base64Decode[b2] << 6) + (base64Decode[b3]));      bos.write(chunk >> 8);      bos.write(chunk);    } else {      int chunk=((base64Decode[b1] << 6) + (base64Decode[b2]));      bos.write(chunk);    }  }  if (ch == '<')   peek=ch;  return bos;}  }
class C{  public void add(String k){  put(k,new Integer(0));}  }
class C{  private static void drawHandle(final Graphics g,int x,final int y){  g.setColor(ourColor1);  g.drawRect(x,y,HANDLE_ATOM_HEIGHT - 1,HANDLE_ATOM_WIDTH - 1);  UIUtil.drawLine(g,x + HANDLE_ATOM_HEIGHT,y + HANDLE_ATOM_WIDTH / 2,x + HANDLE_ATOM_HEIGHT + HANDLE_ATOM_SPACE - 1,y + HANDLE_ATOM_WIDTH / 2);  x+=HANDLE_ATOM_HEIGHT + HANDLE_ATOM_SPACE;  g.drawRect(x,y,HANDLE_ATOM_HEIGHT - 1,HANDLE_ATOM_WIDTH - 1);  UIUtil.drawLine(g,x + HANDLE_ATOM_HEIGHT,y + HANDLE_ATOM_WIDTH / 2,x + HANDLE_ATOM_HEIGHT + HANDLE_ATOM_SPACE - 1,y + HANDLE_ATOM_WIDTH / 2);  x+=HANDLE_ATOM_HEIGHT + HANDLE_ATOM_SPACE;  g.drawRect(x,y,HANDLE_ATOM_HEIGHT - 1,HANDLE_ATOM_WIDTH - 1);}  }
class C{  public String domain(){  return domain;}  }
class C{  @Override public void clearLog(SolrCore core,PluginInfo ulogPluginInfo){  if (ulogPluginInfo == null)   return;  Path tlogDir=new Path(getTlogDir(core,ulogPluginInfo));  try {    if (fs != null && fs.exists(tlogDir)) {      String[] files=getLogList(tlogDir);      for (      String file : files) {        Path f=new Path(tlogDir,file);        boolean s=fs.delete(f,false);        if (!s) {          log.error("Could not remove tlog file:" + f);        }      }    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected ChangeListener createChangeListener(){  return getHandler();}  }
class C{  public Object readFromReturnRowIntoObject(AbstractRecord row,Object targetObject,ReadObjectQuery query,Collection handledMappings,ObjectChangeSet changeSet) throws DatabaseException {  Object aggregate=getAttributeValueFromObject(targetObject);  ObjectChangeSet aggregateChangeSet=null;  if (aggregate == null) {    aggregate=readFromRowIntoObject(row,null,targetObject,null,query,query.getSession(),true);  } else {    if (changeSet != null && (!changeSet.isNew() || (query.getDescriptor() != null && query.getDescriptor().shouldUseFullChangeSetsForNewObjects()))) {      aggregateChangeSet=getReferenceDescriptor(aggregate,query.getSession()).getObjectBuilder().createObjectChangeSet(aggregate,(UnitOfWorkChangeSet)((UnitOfWorkImpl)query.getSession()).getUnitOfWorkChangeSet(),true,query.getSession());    }    AbstractRecord aggregateRow=new DatabaseRecord();    int size=row.size();    List fields=row.getFields();    List values=row.getValues();    List aggregateFields=getReferenceFields();    for (int i=0; i < size; i++) {      DatabaseField field=(DatabaseField)fields.get(i);      if (aggregateFields.contains(field)) {        aggregateRow.add(field,values.get(i));      }    }    getObjectBuilder(aggregate,query.getSession()).assignReturnRow(aggregate,query.getSession(),aggregateRow,aggregateChangeSet);  }  if (aggregate != null && isNullAllowed()) {    boolean allAttributesNull=true;    int nAggregateFields=this.fields.size();    for (int i=0; (i < nAggregateFields) && allAttributesNull; i++) {      DatabaseField field=this.fields.elementAt(i);      if (row.containsKey(field)) {        allAttributesNull=row.get(field) == null;      } else {        Object fieldValue=valueFromObject(targetObject,field,query.getSession());        if (fieldValue == null) {          Object baseValue=getDescriptor().getObjectBuilder().getBaseValueForField(field,targetObject);          if (baseValue != null) {            DatabaseMapping baseMapping=getDescriptor().getObjectBuilder().getBaseMappingForField(field);            if (baseMapping.isForeignReferenceMapping()) {              ForeignReferenceMapping refMapping=(ForeignReferenceMapping)baseMapping;              if (refMapping.usesIndirection()) {                allAttributesNull=refMapping.getIndirectionPolicy().objectIsInstantiated(baseValue);              }            } else             if (baseMapping.isTransformationMapping()) {              AbstractTransformationMapping transMapping=(AbstractTransformationMapping)baseMapping;              if (transMapping.usesIndirection()) {                allAttributesNull=transMapping.getIndirectionPolicy().objectIsInstantiated(baseValue);              }            }          }        } else {          allAttributesNull=false;        }      }    }    if (allAttributesNull) {      aggregate=null;      setAttributeValueInObject(targetObject,aggregate);    }  }  if (changeSet != null && (!changeSet.isNew() || (query.getDescriptor() != null && query.getDescriptor().shouldUseFullChangeSetsForNewObjects()))) {    AggregateChangeRecord record=(AggregateChangeRecord)changeSet.getChangesForAttributeNamed(getAttributeName());    if (aggregate == null) {      if (record != null) {        record.setChangedObject(null);      }    } else {      if (record == null) {        record=new AggregateChangeRecord(changeSet);        record.setAttribute(getAttributeName());        record.setMapping(this);        changeSet.addChange(record);      }      if (aggregateChangeSet == null) {        aggregateChangeSet=getReferenceDescriptor(aggregate,query.getSession()).getObjectBuilder().createObjectChangeSet(aggregate,(UnitOfWorkChangeSet)((UnitOfWorkImpl)query.getSession()).getUnitOfWorkChangeSet(),true,query.getSession());      }      record.setChangedObject(aggregateChangeSet);    }  }  if (handledMappings != null) {    handledMappings.add(this);  }  return aggregate;}  }
class C{  protected void updateLabeling(double slack){  for (int w=0; w < dim; w++) {    if (committedWorkers[w]) {      labelByWorker[w]+=slack;    }  }  for (int j=0; j < dim; j++) {    if (parentWorkerByCommittedJob[j] != -1) {      labelByJob[j]-=slack;    } else {      minSlackValueByJob[j]-=slack;    }  }}  }
class C{  <T>Set<T> diff(Set<T> a,Set<T> b){  if (b.isEmpty())   return a;  Set<T> result=new LinkedHashSet<T>(a);  result.removeAll(b);  return result;}  }
class C{  PIReader(IXMLReader reader){  this.reader=reader;  this.atEndOfData=false;}  }
class C{  public String patch_addPadding(LinkedList<Patch> patches){  short paddingLength=this.Patch_Margin;  String nullPadding="";  for (short x=1; x <= paddingLength; x++) {    nullPadding+=String.valueOf((char)x);  }  for (  Patch aPatch : patches) {    aPatch.start1+=paddingLength;    aPatch.start2+=paddingLength;  }  Patch patch=patches.getFirst();  LinkedList<Diff> diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getFirst().operation != Operation.EQUAL) {    diffs.addFirst(new Diff(Operation.EQUAL,nullPadding));    patch.start1-=paddingLength;    patch.start2-=paddingLength;    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getFirst().text.length()) {    Diff firstDiff=diffs.getFirst();    int extraLength=paddingLength - firstDiff.text.length();    firstDiff.text=nullPadding.substring(firstDiff.text.length()) + firstDiff.text;    patch.start1-=extraLength;    patch.start2-=extraLength;    patch.length1+=extraLength;    patch.length2+=extraLength;  }  patch=patches.getLast();  diffs=patch.diffs;  if (diffs.isEmpty() || diffs.getLast().operation != Operation.EQUAL) {    diffs.addLast(new Diff(Operation.EQUAL,nullPadding));    patch.length1+=paddingLength;    patch.length2+=paddingLength;  } else   if (paddingLength > diffs.getLast().text.length()) {    Diff lastDiff=diffs.getLast();    int extraLength=paddingLength - lastDiff.text.length();    lastDiff.text+=nullPadding.substring(0,extraLength);    patch.length1+=extraLength;    patch.length2+=extraLength;  }  return nullPadding;}  }
class C{  public AngularObject removeAndNotifyRemoteProcess(String name,String noteId,String paragraphId){  RemoteInterpreterProcess remoteInterpreterProcess=getRemoteInterpreterProcess();  if (remoteInterpreterProcess == null || !remoteInterpreterProcess.isRunning()) {    return super.remove(name,noteId,paragraphId);  }  Client client=null;  boolean broken=false;  try {    client=remoteInterpreterProcess.getClient();    client.angularObjectRemove(name,noteId,paragraphId);    return super.remove(name,noteId,paragraphId);  } catch (  TException e) {    broken=true;    logger.error("Error",e);  }catch (  Exception e) {    logger.error("Error",e);  } finally {    if (client != null) {      remoteInterpreterProcess.releaseClient(client,broken);    }  }  return null;}  }
class C{  public void test_getClientSessionContext() throws NoSuchAlgorithmException, KeyManagementException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext[] sslC=createSSLCon();  assertNotNull("SSLContext objects were not created",sslC);  for (int i=0; i < sslC.length; i++) {    sslC[i].init(null,null,null);    assertNotNull("Client session is incorrectly instantiated: " + i,sslC[i].getClientSessionContext());    assertNotNull("Server session is incorrectly instantiated: " + i,sslC[i].getServerSessionContext());  }}  }
class C{  private void basicRemove(DiskRegion dr,DiskEntry entry) throws IOException, InterruptedException {  DiskId id=entry.getDiskId();  if (EntryBits.isNeedsValue(id.getUserBits())) {    long oldOffset=id.getOffsetInOplog();    if (oldOffset != -1) {      id.setOffsetInOplog(-1);      if (rmLive(entry)) {        if (!isCompacting() || calledByCompactorThread()) {          handleNoLiveValues();        }      }    }  }}  }
class C{  public String nextCalledName(){  if (addr instanceof NbtAddress) {    return ((NbtAddress)addr).nextCalledName();  } else   if (calledName != NbtAddress.SMBSERVER_NAME) {    calledName=NbtAddress.SMBSERVER_NAME;    return calledName;  }  return null;}  }
class C{  public BDS(int featureCount,ClassificationDataSet dataSet,Classifier evaluator,int folds){  search(dataSet,featureCount,folds,evaluator);}  }
class C{  public boolean isPrinter(){  return (iPrinter != null);}  }
class C{  public BasicConstraints(int pathLenConstraint){  this.cA=ASN1Boolean.getInstance(true);  this.pathLenConstraint=new ASN1Integer(pathLenConstraint);}  }
class C{  KeyStoreState(){}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < getLocals(); ++i) {    sb.append(getLocal(i));  }  sb.append(' ');  for (int i=0; i < getStackSize(); ++i) {    sb.append(getStack(i).toString());  }  return sb.toString();}  }
class C{  private void sendQuery(QueryTask.QuerySpecification spec,Operation.CompletionHandler handler){  QueryTask task=QueryTask.create(spec).setDirect(true);  Operation queryPost=Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_QUERY_TASKS)).setBody(task).setCompletion(handler);  sendRequest(queryPost);}  }
class C{  public List<String> suggestionsForTagValue(String key,Long poiTypeId){  return poiTagDao.existingValuesForTag(key,poiTypeId);}  }
class C{  public void addGroupListener(final GroupListener listener){  groupListeners.add(listener);}  }
class C{  protected void populateDB(){  int multiples[]={53,97,193,389,769};  for (int x=0; x < HASHED_ROWS[0] / 2; x++) {    writeRow(h1,x,x * multiples[0]);    writeRow(h1,x,x * multiples[0]);  }  for (int x=0; x < HASHED_ROWS[0]; x+=2) {    writeRow(d1,x,x * multiples[0]);  }  for (int x=0; x < HASHED_ROWS[1] / 2; x++) {    writeRow(h2,x,x * multiples[0],x * multiples[1]);    writeRow(h2,x,x * multiples[0],x * multiples[1]);  }  for (int x=0; x < HASHED_ROWS[1]; x+=2) {    writeRow(d2,x,x * multiples[0],x * multiples[1]);  }  for (int x=0; x < HASHED_ROWS[2] / 2; x++) {    writeRow(h3,x,x * multiples[0],x * multiples[1],x * multiples[2]);    writeRow(h3,x,x * multiples[0],x * multiples[1],x * multiples[2]);  }  for (int x=0; x < HASHED_ROWS[2]; x+=2) {    writeRow(d3,x,x * multiples[0],x * multiples[1],x * multiples[2]);  }  for (int x=0; x < HASHED_ROWS[3] / 2; x++) {    writeRow(h4,x,x * multiples[0],x * multiples[1],x * multiples[2],x * multiples[3]);    writeRow(h4,x,x * multiples[0],x * multiples[1],x * multiples[2],x * multiples[3]);  }  for (int x=0; x < HASHED_ROWS[3]; x+=2) {    writeRow(d4,x,x * multiples[0],x * multiples[1],x * multiples[2],x * multiples[3]);  }  for (int x=0; x < HASHED_ROWS[4] / 2; x++) {    writeRow(h5,x,x * multiples[0],x * multiples[1],x * multiples[2],x * multiples[3],x * multiples[4]);    writeRow(h5,x,x * multiples[0],x * multiples[1],x * multiples[2],x * multiples[3],x * multiples[4]);  }  for (int x=0; x < HASHED_ROWS[4] * 2; x+=2) {    writeRow(d5,x,x * multiples[0],x * multiples[1],x * multiples[2],x * multiples[3],x * multiples[4]);  }}  }
class C{  public static double nextLambda(double l3,double l4,RandomEngine randomGenerator){  double l_sign;  if ((l3 < 0) || (l4 < 0))   l_sign=-1.0; else   l_sign=1.0;  double u=randomGenerator.raw();  double x=l_sign * (Math.exp(Math.log(u) * l3) - Math.exp(Math.log(1.0 - u) * l4));  return x;}  }
class C{  public static Geometry createGeometry(JsonObject jObj){  String typeStr=jObj.getString("type");  GeojsonType type=GeojsonType.valueOf(typeStr);  Geometry geometry=null;switch (type) {case Point:    geometry=new Point(jObj);  break;case MultiPoint:geometry=new MultiPoint(jObj);break;case LineString:geometry=new LineString(jObj);break;case MultiLineString:geometry=new MultiLineString(jObj);break;case Polygon:geometry=new Polygon(jObj);break;case MultiPolygon:geometry=new MultiPolygon(jObj);break;case GeometryCollection:geometry=new GeometryCollection(jObj);break;}return (geometry);}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  static public void assertSame(Object expected,Object actual){  assertSame(null,expected,actual);}  }
class C{  public static double[] computeMinEuclideanDistancesFast(double[][] observations){  int dimensions=observations[0].length;  int timeSteps=observations.length;  double[][] sqrDistance=new double[timeSteps][timeSteps];  int[][] addedInUpToVariable=new int[timeSteps][timeSteps];  double[] minDistance=new double[timeSteps];  for (int t1=0; t1 < timeSteps; t1++) {    double minSqrDistance=Double.POSITIVE_INFINITY;    for (int t2=0; t2 < t1; t2++) {      if (addedInUpToVariable[t2][t1] == dimensions) {        sqrDistance[t1][t2]=sqrDistance[t2][t1];        addedInUpToVariable[t1][t2]=dimensions;        if (sqrDistance[t1][t2] < minSqrDistance) {          minSqrDistance=sqrDistance[t1][t2];        }      }    }    for (int t2=0; t2 < t1; t2++) {      if (addedInUpToVariable[t2][t1] != dimensions) {        addedInUpToVariable[t1][t2]=addedInUpToVariable[t2][t1];        sqrDistance[t1][t2]=sqrDistance[t2][t1];        for (; (sqrDistance[t1][t2] < minSqrDistance) && (addedInUpToVariable[t1][t2] < dimensions); addedInUpToVariable[t1][t2]++) {          double distOnThisVar=observations[t1][addedInUpToVariable[t1][t2]] - observations[t2][addedInUpToVariable[t1][t2]];          sqrDistance[t1][t2]+=distOnThisVar * distOnThisVar;        }        if (sqrDistance[t1][t2] < minSqrDistance) {          minSqrDistance=sqrDistance[t1][t2];        }      }    }    for (int t2=t1 + 1; t2 < timeSteps; t2++) {      for (; (sqrDistance[t1][t2] < minSqrDistance) && (addedInUpToVariable[t1][t2] < dimensions); addedInUpToVariable[t1][t2]++) {        double distOnThisVar=observations[t1][addedInUpToVariable[t1][t2]] - observations[t2][addedInUpToVariable[t1][t2]];        sqrDistance[t1][t2]+=distOnThisVar * distOnThisVar;      }      if (sqrDistance[t1][t2] < minSqrDistance) {        minSqrDistance=sqrDistance[t1][t2];      }    }    minDistance[t1]=Math.sqrt(minSqrDistance);  }  return minDistance;}  }
class C{  public Spring addSpring(ForceItem item1,ForceItem item2,float coeff,float length){  if (item1 == null || item2 == null)   throw new IllegalArgumentException("ForceItems must be non-null");  Spring s=Spring.getFactory().getSpring(item1,item2,coeff,length);  springs.add(s);  return s;}  }
class C{  public static Control delete(List<String> urls,boolean deleteDownloadedFile,OnDeleteDownloadFilesListener onDeleteDownloadFilesListener){  return getFileDownloadManager().delete(urls,deleteDownloadedFile,onDeleteDownloadFilesListener);}  }
class C{  private void displayTVShowDetails(Cursor cursor){  LogUtils.LOGD(TAG,"displayTVShowDetails");  cursor.moveToFirst();  tvshowTitle=cursor.getString(TVShowDetailsQuery.TITLE);  mediaTitle.setText(tvshowTitle);  int numEpisodes=cursor.getInt(TVShowDetailsQuery.EPISODE), watchedEpisodes=cursor.getInt(TVShowDetailsQuery.WATCHEDEPISODES);  setMediaUndertitle(numEpisodes,watchedEpisodes);  setMediaPremiered(cursor.getString(TVShowDetailsQuery.PREMIERED),cursor.getString(TVShowDetailsQuery.STUDIO));  mediaGenres.setText(cursor.getString(TVShowDetailsQuery.GENRES));  setMediaRating(cursor.getDouble(TVShowDetailsQuery.RATING));  mediaDescription.setText(cursor.getString(TVShowDetailsQuery.PLOT));  Resources resources=getActivity().getResources();  DisplayMetrics displayMetrics=new DisplayMetrics();  getActivity().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);  int posterWidth=resources.getDimensionPixelOffset(R.dimen.now_playing_poster_width);  int posterHeight=resources.getDimensionPixelOffset(R.dimen.now_playing_poster_height);  UIUtils.loadImageWithCharacterAvatar(getActivity(),getHostManager(),cursor.getString(TVShowDetailsQuery.THUMBNAIL),tvshowTitle,mediaPoster,posterWidth,posterHeight);  int artHeight=resources.getDimensionPixelOffset(R.dimen.now_playing_art_height);  UIUtils.loadImageIntoImageview(getHostManager(),cursor.getString(TVShowDetailsQuery.FANART),mediaArt,displayMetrics.widthPixels,artHeight);}  }
class C{  private static Address GetByteArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetByteArrayElements \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    byte[] sourceArray=(byte[])env.getJNIRef(arrayJREF);    int size=sourceArray.length;    if (MemoryManager.willNeverMove(sourceArray)) {      JNIGenericHelpers.setBoolStar(isCopyAddress,false);      return Magic.objectAsAddress(sourceArray);    } else {      Address copyBuffer=sysCall.sysMalloc(size);      if (copyBuffer.isZero()) {        env.recordException(new OutOfMemoryError());        return Address.zero();      }      Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size);      JNIGenericHelpers.setBoolStar(isCopyAddress,true);      return copyBuffer;    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  protected DoubleFactory3D(){}  }
class C{  @Override public void changeUserInfo(long id,String email,String key,String name){  log.info(Thread.currentThread().toString() + "##changeUserInfo(id=[" + id+ "],email=["+ email+ "],key=["+ key+ "]");  Query<UserDB> query=userDao.queryBuilder().where(Properties.IsLastLogin.eq(true)).build();  UserDB result=query.unique();  if (result != null) {    result.setIsLastLogin(false);    userDao.update(result);  }  result=new UserDB(id,email,key,name,true);  userDao.insertOrReplace(result);}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public Clustering<PrototypeModel<O>> run(Relation<O> relation){  RangeQuery<O> rq=relation.getRangeQuery(getDistanceFunction(),threshold);  ModifiableDBIDs seen=DBIDUtil.newHashSet(relation.size());  Clustering<PrototypeModel<O>> clustering=new Clustering<>("Prototype clustering","prototype-clustering");  int queries=0;  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Leader clustering",relation.size(),LOG) : null;  for (DBIDIter it=relation.iterDBIDs(); it.valid() && seen.size() < relation.size(); it.advance()) {    if (seen.contains(it)) {      continue;    }    DoubleDBIDList res=rq.getRangeForDBID(it,threshold);    ++queries;    ModifiableDBIDs ids=DBIDUtil.newArray(res.size());    for (DBIDIter cand=res.iter(); cand.valid(); cand.advance()) {      if (seen.add(cand)) {        LOG.incrementProcessed(prog);        ids.add(cand);      }    }    assert (ids.size() > 0 && ids.contains(it));    PrototypeModel<O> mod=new PrototypeModel<>(relation.get(it));    clustering.addToplevelCluster(new Cluster<>(ids,mod));  }  LOG.statistics(new LongStatistic(this.getClass().getName() + ".queries",queries));  LOG.ensureCompleted(prog);  return clustering;}  }
class C{  public AtomicLong(){}  }
class C{  public void inputSentence(String text,String userName,String targetUserName,String messageId,long time,Network network){  Vertex input=createInput(text.trim(),network);  Vertex sentence=input.getRelationship(Primitive.INPUT);  Vertex id=network.createVertex(messageId);  if (sentence.hasRelationship(Primitive.POST,id)) {    log("Post already processed",Bot.FINE,id,time);    return;  }  sentence.addRelationship(Primitive.POST,id);  input.addRelationship(Primitive.INSTANTIATION,Primitive.POST);  input.addRelationship(Primitive.CREATEDAT,network.createVertex(time));  input.addRelationship(Primitive.ID,id);  Vertex conversation=network.createInstance(Primitive.CONVERSATION);  conversation.addRelationship(Primitive.TYPE,Primitive.POST);  Language.addToConversation(input,conversation);  Vertex user=network.createSpeaker(userName);  conversation.addRelationship(Primitive.SPEAKER,user);  input.addRelationship(Primitive.SPEAKER,user);  if (targetUserName != null) {    Vertex targetUser=null;    if (targetUserName.equals(getUserName())) {      targetUser=network.createVertex(Primitive.SELF);    } else {      targetUser=network.createSpeaker(targetUserName);    }    input.addRelationship(Primitive.TARGET,targetUser);    conversation.addRelationship(Primitive.SPEAKER,targetUser);  }  user.addRelationship(Primitive.POST,input);  network.save();  getBot().memory().addActiveMemory(input);}  }
class C{  public SIMD256(){  super();}  }
class C{  public String apply(String s){  if (s == null || s.isEmpty()) {    return s;  }switch (this) {case UPPERCASE:    return s.toUpperCase();case LOWERCASE:  return s.toLowerCase();case CAPITALIZE:return Character.toUpperCase(s.charAt(0)) + (s.length() > 1 ? s.toLowerCase().substring(1) : "");default :throw new IllegalArgumentException("Unknown capitalization strategy: " + this);}}  }
class C{  public SPVBlockStore(NetworkParameters params,File file) throws BlockStoreException {  checkNotNull(file);  this.params=checkNotNull(params);  try {    this.numHeaders=DEFAULT_NUM_HEADERS;    boolean exists=file.exists();    randomAccessFile=new RandomAccessFile(file,"rw");    long fileSize=getFileSize();    if (!exists) {      log.info("Creating new SPV block chain file " + file);      randomAccessFile.setLength(fileSize);    } else     if (randomAccessFile.length() != fileSize) {      throw new BlockStoreException("File size on disk does not match expected size: " + randomAccessFile.length() + " vs "+ fileSize);    }    FileChannel channel=randomAccessFile.getChannel();    fileLock=channel.tryLock();    if (fileLock == null)     throw new ChainFileLockedException("Store file is already locked by another process");    buffer=channel.map(FileChannel.MapMode.READ_WRITE,0,fileSize);    byte[] header;    if (exists) {      header=new byte[4];      buffer.get(header);      if (!new String(header,"US-ASCII").equals(HEADER_MAGIC))       throw new BlockStoreException("Header bytes do not equal " + HEADER_MAGIC);    } else {      initNewStore(params);    }  } catch (  Exception e) {    try {      if (randomAccessFile != null)       randomAccessFile.close();    } catch (    IOException e2) {      throw new BlockStoreException(e2);    }    throw new BlockStoreException(e);  }}  }
class C{  public boolean hasMin(){  return super.hasAttribute(MIN);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void beforeHide(){}  }
class C{  public SerialRef(Ref ref) throws SerialException, SQLException {  if (ref == null) {    throw new SQLException("Cannot instantiate a SerialRef object " + "with a null Ref object");  }  reference=ref;  object=ref;  if (ref.getBaseTypeName() == null) {    throw new SQLException("Cannot instantiate a SerialRef object " + "that returns a null base type name");  } else {    baseTypeName=ref.getBaseTypeName();  }}  }
class C{  public NameTree(PDFObject root){  this.root=root;}  }
class C{  public void removeModule(final Module module) throws CouldntDeleteException, CouldntSaveDataException {  Preconditions.checkNotNull(module,"Error: Module argument can not be null");  try {    m_addressSpace.getContent().removeModule(module.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException exception) {    throw new CouldntDeleteException(exception);  }catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public static String computeCodebase(String name,String jarFile,int port) throws IOException {  return computeCodebase(name,jarFile,port,null,null);}  }
class C{  public Counter findCounter(String grpName,String cntrName,boolean create){  T2<String,String> key=new T2<>(grpName,cntrName);  HadoopLongCounter internalCntr=cntrs.get(key);  if (internalCntr == null & create) {    internalCntr=new HadoopLongCounter(grpName,cntrName);    cntrs.put(key,new HadoopLongCounter(grpName,cntrName));  }  return internalCntr == null ? null : new HadoopV2Counter(internalCntr);}  }
class C{  protected String makeBigString(int size){  final StringBuffer sb=new StringBuffer(size);  char c=65;  int index=size;  while (index-- != 0) {    sb.append(c++);    if (c > 122)     c=65;  }  return sb.toString();}  }
class C{  private AppsAction addAction(String actionName,JMenu menu,KeyStroke accelerator,boolean toggle){  AppsAction action=new AppsAction(actionName,accelerator,toggle);  if (menu != null)   menu.add(action.getMenuItem());  action.setDelegate(this);  if (accelerator != null) {    getInputMap(WHEN_IN_FOCUSED_WINDOW).put(accelerator,actionName);    getActionMap().put(actionName,action);  }  return action;}  }
class C{  public LongConstant addLong(long value){  LongConstant entry=getLongByValue(value);  if (entry != null)   return entry;  entry=new LongConstant(this,_entries.size(),value);  addConstant(entry);  addConstant(null);  return entry;}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  public static short decodeLowBits(int i){  return (short)i;}  }
class C{  public Boolean isReadLocked(K token){  RWLock<K> lock=locks.get(token);  if (lock == null)   return null;  return lock.isReadLocked();}  }
class C{  public static boolean isRepositoryInUse(ClusterState clusterState,String repository){  RestoreInProgress snapshots=clusterState.custom(RestoreInProgress.TYPE);  if (snapshots != null) {    for (    RestoreInProgress.Entry snapshot : snapshots.entries()) {      if (repository.equals(snapshot.snapshotId().getRepository())) {        return true;      }    }  }  return false;}  }
class C{  public Long remove(Float key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static void init(){  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(ClassLoader.getSystemClassLoader().getResourceAsStream("assets/toast/toast.version")));    version=reader.readLine();    reader.close();    ToastBootstrap.toastLogger.info("Toast Version: " + version);    known=true;    vers=new Version(version);    reader=new BufferedReader(new InputStreamReader(ClassLoader.getSystemClassLoader().getResourceAsStream("assets/toast/toast.git_info")));    full_commit_hash=reader.readLine();    short_commit_hash=reader.readLine();    reader.close();    ToastBootstrap.toastLogger.info("Toast Commit Hash: " + short_commit_hash);  } catch (  Exception e) {    ToastBootstrap.toastLogger.error("Could not retrieve Toast Version or Git Hash.");  }}  }
class C{  public static boolean isMimeTypeVideo(String mimeType){  if (mimeType.equals(Const.ContentTypes.VIDEO_MP4)) {    return true;  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.996 -0500",hash_original_method="79C62ACAD5DF9EB85CE9ACD9496D0810",hash_generated_method="BD37A5C053055A9986EAFB09C4A8220A") private static ArrayList<SmsMessage> createMessageListFromRawRecords(List<SmsRawData> records){  ArrayList<SmsMessage> messages=new ArrayList<SmsMessage>();  if (records != null) {    int count=records.size();    for (int i=0; i < count; i++) {      SmsRawData data=records.get(i);      if (data != null) {        SmsMessage sms=SmsMessage.createFromEfRecord(i + 1,data.getBytes());        if (sms != null) {          messages.add(sms);        }      }    }  }  return messages;}  }
class C{  public DbManagerOps(String svcName){  try {    this.conn=initJMXConnector(svcName);    initMbean(this.conn.getMBeanServerConnection());  } catch (  Exception e) {    throw new IllegalStateException(e);  }}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  private boolean isOk(Peak[] series,int current,int index){  if (series[current].getMagnitude() <= series[index].getMagnitude()) {    return false;  } else {    return true;  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  public static void execute(ExecutablePool pool,String cqName){  AbstractOp op=new StopCQOpImpl(cqName);  pool.executeOnQueuesAndReturnPrimaryResult(op);}  }
class C{  public Namespace(String prefix,String uri){  this.prefix=(prefix != null) ? prefix : "";  this.uri=(uri != null) ? uri : "";}  }
class C{  @SuppressWarnings("nullness") public static int frequency(Iterable<?> iterable,@Nullable Object element){  if ((iterable instanceof Multiset)) {    return ((Multiset<?>)iterable).count(element);  }  if ((iterable instanceof Set)) {    return ((Set<?>)iterable).contains(element) ? 1 : 0;  }  return Iterators.frequency(iterable.iterator(),element);}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){  if (data.length >= numberOfColumns) {    return;  }  byte[] newData=new byte[numberOfColumns];  System.arraycopy(data,0,newData,0,data.length);  data=newData;}  }
class C{  public boolean isEMUMember(){  Object oo=get_Value(COLUMNNAME_IsEMUMember);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void logThreadEnding(){  if (logger.isTraceEnabled()) {    logger.trace(String.format(ThreadingUtils.ENDING_THREAD,Thread.currentThread().getId(),Thread.currentThread().getName()));  }}  }
class C{  public boolean truncateToZxid(){  return truncateToZxid(Long.toHexString(getLastValidZxid()));}  }
class C{  public boolean canFinish(){  String inputText=assignmentPage.getInputText();  return (assignmentPage.isCurrentPage() && !assignmentPage.isTypeInputPossible() && ((inputText != null && inputText.trim().length() != 0) || assignmentPage.modelValueSelected())) || !assignmentPage.isCurrentPage();}  }
class C{  private void createTable(String table,KeyValuePersistenceSettings settings){  int attempt=0;  Throwable error=null;  String tableFullName=settings.getKeyspace() + "." + table;  String errorMsg="Failed to create Cassandra table '" + tableFullName + "'";  while (attempt < CQL_EXECUTION_ATTEMPTS_COUNT) {    try {      log.info("-----------------------------------------------------------------------");      log.info("Creating Cassandra table '" + tableFullName + "'");      log.info("-----------------------------------------------------------------------\n\n" + settings.getTableDDLStatement(table) + "\n");      log.info("-----------------------------------------------------------------------");      session().execute(settings.getTableDDLStatement(table));      log.info("Cassandra table '" + tableFullName + "' was successfully created");      return;    } catch (    AlreadyExistsException ignored) {      log.info("Cassandra table '" + tableFullName + "' already exist");      return;    }catch (    Throwable e) {      if (!CassandraHelper.isHostsAvailabilityError(e) && !CassandraHelper.isKeyspaceAbsenceError(e))       throw new IgniteException(errorMsg,e);      if (CassandraHelper.isKeyspaceAbsenceError(e)) {        log.warning("Failed to create Cassandra table '" + tableFullName + "' cause appropriate keyspace doesn't exist",e);        createKeyspace(settings);      } else       if (CassandraHelper.isHostsAvailabilityError(e))       handleHostsAvailabilityError(e,attempt,errorMsg);      error=e;    }    attempt++;  }  throw new IgniteException(errorMsg,error);}  }
class C{  public LevelSet(Sector sector,double firstLevelDelta,int numLevels,int tileWidth,int tileHeight){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","missingSector"));  }  if (firstLevelDelta <= 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","invalidTileDelta"));  }  if (numLevels < 1) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","invalidNumLevels"));  }  if (tileWidth < 1 || tileHeight < 1) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LevelSet","constructor","invalidWidthOrHeight"));  }  this.sector.set(sector);  this.firstLevelDelta=firstLevelDelta;  this.tileWidth=tileWidth;  this.tileHeight=tileHeight;  this.levels=new Level[numLevels];  this.assembleLevels();}  }
class C{  public static void drawDashedRect(Graphics g,int x,int y,int width,int height,int step,boolean top,boolean left,boolean bottom,boolean right){  int vx, vy;  int drawStep=step == 0 ? 1 : 2 * step;  int drawLingStep=step == 0 ? 1 : step;  for (vx=x; vx < (x + width); vx+=drawStep) {    if (top)     g.fillRect(vx,y,drawLingStep,1);    if (bottom)     g.fillRect(vx,y + height - 1,drawLingStep,1);  }  for (vy=y; vy < (y + height); vy+=drawStep) {    if (left)     g.fillRect(x,vy,1,drawLingStep);    if (right)     g.fillRect(x + width - 1,vy,1,drawLingStep);  }}  }
class C{  void addNodes(List<Node> newNodes,boolean atBeginning){  if (atBeginning) {    if ((nodes.size() > 0) && nodes.get(0) == newNodes.get(newNodes.size() - 1)) {      Log.i(DEBUG_TAG,"addNodes attempt to add same node");      if (newNodes.size() > 1) {        Log.i(DEBUG_TAG,"retrying addNodes");        newNodes.remove(newNodes.size() - 1);        addNodes(newNodes,atBeginning);      }      return;    }    nodes.addAll(0,newNodes);  } else {    if ((nodes.size() > 0) && newNodes.get(0) == nodes.get(nodes.size() - 1)) {      Log.i(DEBUG_TAG,"addNodes attempt to add same node");      if (newNodes.size() > 1) {        Log.i(DEBUG_TAG,"retrying addNodes");        newNodes.remove(0);        addNodes(newNodes,atBeginning);      }      return;    }    nodes.addAll(newNodes);  }}  }
class C{  public String recalculateOpeningBalance(){  getPreviousDayClosingBalance();  return EDIT;}  }
class C{  private String assertSetterExistence(Field currentField,Method[] methods){  List<String> methodNames=new ArrayList<String>();  for (  Method method : methods) {    methodNames.add(method.getName());  }  char firstChar=currentField.getName().charAt(0);  char upperCaseFirstChar=Character.toUpperCase(firstChar);  String methodName="set" + upperCaseFirstChar + currentField.getName().substring(1);  if (!methodNames.contains(methodName)) {    return "Missing method '" + methodName + "'\n";  }  return "";}  }
class C{  public NotificationChain basicSetBlock(Block newBlock,NotificationChain msgs){  Block oldBlock=block;  block=newBlock;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.MODEL__BLOCK,oldBlock,newBlock);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Vector2d perpendicular(){  return set(y,x * -1);}  }
class C{  public final AlertDialog shareText(CharSequence text){  return shareText(text,"TEXT_TYPE");}  }
class C{  protected void updateDamage(DocumentEvent changes,Shape a,ViewFactory f){  Component host=getContainer();  updateMetrics();  Element elem=getElement();  DocumentEvent.ElementChange ec=changes.getChange(elem);  Element[] added=(ec != null) ? ec.getChildrenAdded() : null;  Element[] removed=(ec != null) ? ec.getChildrenRemoved() : null;  if (((added != null) && (added.length > 0)) || ((removed != null) && (removed.length > 0))) {    if (added != null) {      int addedAt=ec.getIndex();      for (int i=0; i < added.length; i++)       possiblyUpdateLongLine(added[i],addedAt + i);    }    if (removed != null) {      for (int i=0; i < removed.length; i++) {        if (removed[i] == longLine) {          longLineWidth=-1;          calculateLongestLine();          break;        }      }    }    preferenceChanged(null,true,true);    host.repaint();  } else   if (changes.getType() == DocumentEvent.EventType.CHANGE) {    int startLine=changes.getOffset();    int endLine=changes.getLength();    damageLineRange(startLine,endLine,a,host);  } else {    Element map=getElement();    int line=map.getElementIndex(changes.getOffset());    damageLineRange(line,line,a,host);    if (changes.getType() == DocumentEvent.EventType.INSERT) {      Element e=map.getElement(line);      if (e == longLine) {        longLineWidth=getLineWidth(line);        preferenceChanged(null,true,false);      } else {        if (possiblyUpdateLongLine(e,line))         preferenceChanged(null,true,false);      }    } else     if (changes.getType() == DocumentEvent.EventType.REMOVE) {      if (map.getElement(line) == longLine) {        longLineWidth=-1;        calculateLongestLine();        preferenceChanged(null,true,false);      }    }  }}  }
class C{  public ExampleSetMetaData modifyExampleSet(ExampleSetMetaData metaData) throws UndefinedParameterError {  return metaData;}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  public int next(){  int node=_currentNode;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (true) {      node=node + 1;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else       if (_exptype(node) == nodeType) {        break;      }    }  } else {    int expType;    while (true) {      node=node + 1;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else {        expType=_exptype(node);        if (expType < DTM.NTYPES) {          if (expType == nodeType) {            break;          }        } else {          if (m_expandedNameTable.getType(expType) == nodeType) {            break;          }        }      }    }  }  _currentNode=node;  return (node == NULL) ? NULL : returnNode(makeNodeHandle(node));}  }
class C{  private void notifyOnMaximize(){  if (maximizeListener != null) {    maximizeListener.onMaximize(this);  }}  }
class C{  public SnmpStringFixed(Byte[] v){  super(v);}  }
class C{  public static boolean isInList(Coordinate pt,Coordinate[] pts){  for (int i=0; i < pts.length; i++) {    if (pt.equals(pts[i]))     return true;  }  return false;}  }
class C{  @Override synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    if (getCanRead()) {      notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);    } else {      notifyProgListenerEnd(_val,jmri.ProgListener.OK);    }  }}  }
class C{  public String Get(StreamKind StreamKind,int StreamNumber,String parameter){  return Get(StreamKind,StreamNumber,parameter,InfoKind.Text,InfoKind.Name);}  }
class C{  public AsyncResult ReadAsync(RequestHeader RequestHeader,Double MaxAge,TimestampsToReturn TimestampsToReturn,ReadValueId... NodesToRead){  ReadRequest req=new ReadRequest(RequestHeader,MaxAge,TimestampsToReturn,NodesToRead);  return channel.serviceRequestAsync(req);}  }
class C{  protected void keyPressed(KeyEvent e){  if (e.getSource() instanceof myJTree || (e.getSource() == treeSearch && e.getModifiers() != 0)) {    TreePath tp=m_tree.getSelectionPath();    if (tp == null)     ADialog.beep(); else {      DefaultMutableTreeNode tn=(DefaultMutableTreeNode)m_tree.getLastSelectedPathComponent();      setSelectedNode(tn);    }  } else   if (e.getSource() == treeSearch) {    String search=treeSearch.getText();    boolean found=false;    if (m_nodeEn != null && !m_nodeEn.hasMoreElements())     m_search="";    if (!search.equals(m_search)) {      m_nodeEn=m_root.preorderEnumeration();      m_search=search;    }    while (!found && m_nodeEn != null && m_nodeEn.hasMoreElements()) {      DefaultMutableTreeNode nd=(DefaultMutableTreeNode)m_nodeEn.nextElement();      Vector<?> nodeInfo=(Vector<?>)(nd.getUserObject());      String uoName=((KeyNamePair)nodeInfo.elementAt(3)).getName();      if (uoName.toUpperCase().indexOf(search.toUpperCase()) != -1) {        found=true;        TreePath treePath=new TreePath(nd.getPath());        m_tree.setSelectionPath(treePath);        m_tree.makeVisible(treePath);        m_tree.scrollPathToVisible(treePath);      }    }    if (!found)     ADialog.beep();  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=IqrMu.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="iqr";  String vmSelectionPolicy="mu";  String parameter="1.5";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public synchronized void allowThreadDecoding(ThreadSet threads){  for (  Thread t : threads) {    allowThreadDecoding(t);  }}  }
class C{  private boolean equals(Object proxy,Object[] list) throws Throwable {  Annotation left=(Annotation)proxy;  Annotation right=(Annotation)list[0];  if (left.annotationType() != right.annotationType()) {    throw new PersistenceException("Annotation %s is not the same as %s",left,right);  }  return comparer.equals(left,right);}  }
class C{  public static void copyMemory(final Object src,long srcOffset,final Object dest,final long destOffset,final long len){  Preconditions.checkNotNull(src);  Preconditions.checkArgument(len % COPY_STRIDE != 0,"Length (%d) is not a multiple of stride",len);  Preconditions.checkArgument(destOffset % COPY_STRIDE != 0,"Dest offset (%d) is not stride aligned",destOffset);  long end=destOffset + len;  for (long offset=destOffset; offset < end; ) {    unsafe.putLong(dest,offset,unsafe.getLong(srcOffset));    offset+=COPY_STRIDE;    srcOffset+=COPY_STRIDE;  }}  }
class C{  public void clearTable(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    clearRow(nodeIndex,rowIndex);  }}  }
class C{  public Container add(Image img){  return add(new Label(img));}  }
class C{  public long longValue(){  if (val instanceof Long || val instanceof Integer) {    return val.longValue();  }  return (long)(val.doubleValue());}  }
class C{  public double distance(Pos3D pos){  double subX=xPos - pos.xPos;  double subY=yPos - pos.yPos;  double subZ=zPos - pos.zPos;  return MathHelper.sqrt_double(subX * subX + subY * subY + subZ * subZ);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String removeAccesTrackingCodeCookie(HttpServletRequest request,HttpServletResponse response){  Cookie[] cookies=request.getCookies();  if (cookies != null) {    for (    Cookie cookie : cookies) {      if (cookie.getName().endsWith("_ACCESS")) {        cookie.setMaxAge(0);        response.addCookie(cookie);      }    }  }  return "success";}  }
class C{  public String trainPercentageTipText(){  return "The percentage of the dataset to use for training.";}  }
class C{  public X509Name(String dirName,X509NameEntryConverter converter){  this(DefaultReverse,DefaultLookUp,dirName,converter);}  }
class C{  public static boolean isValidMultipathPolicy(String multipathPolicy){  for (  String validPolicy : HostStorageAPI.MULTIPATH_POLICY_TYPES) {    if (StringUtils.equalsIgnoreCase(validPolicy,multipathPolicy)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isFirstBatchDone()) {    createSubsample();  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  @Override public boolean allowAccessToFullInputFormat(){  return true;}  }
class C{  public void message(SerialMessage r){  log.warn("unexpected message");}  }
class C{  public BooleanArrayList copy(){  return (BooleanArrayList)clone();}  }
class C{  ArrayList<Location> reconstructPath(AStarNodeWrapper n){  ArrayList<Location> result=new ArrayList<Location>();  AStarNodeWrapper x=n;  while (x.cameFrom != null) {    result.add(0,x.node.loc);    x=x.cameFrom;  }  return result;}  }
class C{  public static int compare(Object left,Object right) throws PageException {  if (left instanceof String)   return compare((String)left,right); else   if (left instanceof Number)   return compare(((Number)left).doubleValue(),right); else   if (left instanceof Boolean)   return compare(((Boolean)left).booleanValue(),right); else   if (left instanceof Date)   return compare((Date)left,right); else   if (left instanceof Castable)   return compare(((Castable)left),right); else   if (left instanceof Locale)   return compare(((Locale)left),right); else   if (left == null)   return compare("",right); else   if (left instanceof Character)   return compare(((Character)left).toString(),right); else   if (left instanceof Calendar)   return compare(((Calendar)left).getTime(),right); else   if (left instanceof TimeZone)   return compare(((TimeZone)left),right); else {    return error(false,true);  }}  }
class C{  @Override public void completeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto){  completeStoragePolicyTransitionImpl(storagePolicyTransitionParamsDto);}  }
class C{  String dominanceFrontierString(){  return dominanceFrontier.toString();}  }
class C{  public List compileFromClause(String fromClause){  try {    OQLLexer lexer=new OQLLexer(new StringReader(fromClause));    OQLParser parser=new OQLParser(lexer);    parser.setASTNodeClass("org.apache.geode.cache.query.internal.parse.ASTUnsupported");    parser.loneFromClause();    GemFireAST n=(GemFireAST)parser.getAST();    n.compile(this);  } catch (  Exception ex) {    throw new QueryInvalidException(LocalizedStrings.QCompiler_SYNTAX_ERROR_IN_QUERY_0.toLocalizedString(ex.getMessage()),ex);  }  Assert.assertTrue(stackSize() == 1,"stack size = " + stackSize());  return (List)pop();}  }
class C{  public <T>T fromXML(final Reader xml,final T root){  return unmarshal(hierarchicalStreamDriver.createReader(xml),root);}  }
class C{  private PoiNodeRef revertPoiNodeRef(Long poiNodeRefId){  PoiNodeRef poiNodeRef=poiNodeRefDao.queryForId(poiNodeRefId);  PoiNodeRef backup;  Long oldId=poiNodeRef.getOldPoiId();  if (oldId != null) {    backup=poiNodeRefDao.queryForId(oldId);    poiNodeRef.setLatitude(backup.getLatitude());    poiNodeRef.setLongitude(backup.getLongitude());    poiNodeRefDao.deleteById(oldId);  }  poiNodeRef.setUpdated(false);  poiNodeRef.setOld(false);  poiNodeRef.setOldPoiId(null);  poiNodeRefDao.createOrUpdate(poiNodeRef);  return poiNodeRef;}  }
class C{  private Disposition(){  super();}  }
class C{  void remove(){  pt=null;}  }
class C{  public void print(List<BOMNode> arr,int initialDepth){  print(arr,initialDepth,true);}  }
class C{  public static EdgePool optimizePowerLawDegreeEdgePool(PowerLawDegreeEdgePool edgePool){  long start=System.currentTimeMillis();  LOG.info("PowerLawDegreeEdgePool optimization starts.");  PowerLawDegreeEdgePool.ReaderAccessibleInfo readerAccessibleInfo=edgePool.getReaderAccessibleInfo();  OptimizedEdgePool optimizedEdgePool=new OptimizedEdgePool(readerAccessibleInfo.getNodeDegrees(),edgePool.getCurrentNumEdgesStored(),edgePool.getStatsReceiver());  int[] nodeDegrees=readerAccessibleInfo.getNodeDegrees();  RegularDegreeEdgePool[] regularDegreeEdgePools=readerAccessibleInfo.getEdgePools();  int nodeDegreeMapSize=nodeDegrees.length;  for (int i=0; i < nodeDegreeMapSize; i++) {    int nodeDegree=nodeDegrees[i];    if (nodeDegree == 0) {      continue;    }    int edgePoolNumber=PowerLawDegreeEdgePool.getPoolForEdgeNumber(nodeDegree - 1);    for (int j=0; j <= edgePoolNumber; j++) {      int[] shard=regularDegreeEdgePools[j].getShard(i);      int shardOffset=regularDegreeEdgePools[j].getShardOffset(i);      int nodeDegreeInPool=regularDegreeEdgePools[j].getNodeDegree(i);      optimizedEdgePool.addEdges(i,j,shard,shardOffset,nodeDegreeInPool);    }  }  long end=System.currentTimeMillis();  LOG.info("PowerLawDegreeEdgePool optimization finishes in " + (double)(end - start) / 1000.0 + " seconds.");  return optimizedEdgePool;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void increment() throws IOException {  print("increment",null);}  }
class C{  public static int asInt(double datum,int n){  double d=(datum == 0.0) ? 0.0 : datum;  long[] data={Double.doubleToLongBits(d)};  return asInteger(data,n);}  }
class C{  public Env<AttrContext> attribute(Env<AttrContext> env){  if (compileStates.isDone(env,CompileState.ATTR))   return env;  if (verboseCompilePolicy)   printNote("[attribute " + env.enclClass.sym + "]");  if (verbose)   log.printVerbose("checking.attribution",env.enclClass.sym);  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ANALYZE,env.toplevel,env.enclClass.sym);    taskListener.started(e);  }  JavaFileObject prev=log.useSource(env.enclClass.sym.sourcefile != null ? env.enclClass.sym.sourcefile : env.toplevel.sourcefile);  try {    attr.attrib(env);    if (errorCount() > 0 && !shouldStop(CompileState.ATTR)) {      attr.postAttr(env.tree);    }    compileStates.put(env,CompileState.ATTR);    if (rootClasses != null && rootClasses.contains(env.enclClass)) {      reportPublicApi(env.enclClass.sym);    }  }  finally {    log.useSource(prev);  }  return env;}  }
class C{  public MWMSectionDetail(Properties ctx,int WM_Section_Detail_ID){  this(ctx,WM_Section_Detail_ID,null);}  }
class C{  @Override public double reset(double sample){  double v=sample / (b0 + b1 + b2);  elements[0]=v;  elements[1]=v;  return apply(sample);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("RegistrationServlet.init");}  }
class C{  public Object call(Object object,String name,Object[] args) throws BSFException {  if (object == null)   try {    object=interpreter.get("global");  } catch (  EvalError e) {    throw new BSFException("bsh internal error: " + e.toString());  }  if (object instanceof bsh.This)   try {    Object value=((bsh.This)object).invokeMethod(name,args);    return Primitive.unwrap(value);  } catch (  InterpreterError e) {    throw new BSFException("BeanShell interpreter internal error: " + e);  }catch (  TargetError e2) {    throw new BSFException("The application script threw an exception: " + e2.getTarget());  }catch (  EvalError e3) {    throw new BSFException("BeanShell script error: " + e3);  } else   throw new BSFException("Cannot invoke method: " + name + ". Object: "+ object+ " is not a BeanShell scripted object.");}  }
class C{  public static List toList(Object o,boolean duplicate,List defaultValue){  try {    return toList(o,duplicate);  } catch (  PageException e) {    return defaultValue;  }}  }
class C{  private void validateLayout(){  List<String> missingIds=new ArrayList<String>();  for (  String id : layout.stringKeySet()) {    if (layout.getCell(id) == null) {      missingIds.add(id);    }  }  if (missingIds.size() > 0) {    throw new IllegalStateException("No layout spec found for ids: " + missingIds);  }  for (  String cell : layout.getCells()) {    String id=layout.parse(cell,LayoutConstants.ID);    if (layout.get(id) == null) {      missingIds.add(id);    }  }  if (missingIds.size() > 0) {    throw new IllegalStateException("No <T> or ID found for ids: " + missingIds);  }}  }
class C{  public boolean checkArticle(String title){  if (namespaceMap == null || namespaceMap.size() == 0 || allowedNamespaces == null || allowedNamespaces.size() == 0) {    return true;  } else {    for (    String str : prefixesToReject) {      if (title.startsWith(str)) {        return false;      }    }    for (    String str : prefixesToAllow) {      if (title.startsWith(str)) {        return true;      }      if (excludeMainNamespace) {        return false;      }    }    return true;  }}  }
class C{  public IssueMatcher startsWith(URI expectedPrefix){  return addPropertyMatcher(URIPropertyMatcher.Mode.StartsWith,expectedPrefix);}  }
class C{  private static int[] toJavaVersionIntArray(String version,int limit){  if (version == null) {    return ArrayUtils.EMPTY_INT_ARRAY;  }  String[] strings=StringUtils.split(version,"._- ");  int[] ints=new int[Math.min(limit,strings.length)];  int j=0;  for (int i=0; i < strings.length && j < limit; i++) {    String s=strings[i];    if (s.length() > 0) {      try {        ints[j]=Integer.parseInt(s);        j++;      } catch (      Exception e) {      }    }  }  if (ints.length > j) {    int[] newInts=new int[j];    System.arraycopy(ints,0,newInts,0,j);    ints=newInts;  }  return ints;}  }
class C{  public CActionRedoSelection(final CSelectionHistory history){  super("Redo Last Selection");  m_history=Preconditions.checkNotNull(history,"IE02828: history argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.GRAPH_REDO_SELECTION_HK.getKeyStroke());}  }
class C{  public static boolean[] toBooleanArray(char[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  public static void main(String[] args){  Header.printHeader(MonthlyFilePathDependentNetworkBuilder.class.toString(),args);  String processedFolder=args[0];  List<File> inputFiles=GrainUtils.getMonthlyOutputFolders(processedFolder);  for (  File month : inputFiles) {    LOG.info("====> Processing month " + month.getAbsolutePath());    String thisMonthCleanXmlFolder=month.getAbsolutePath() + (month.getAbsolutePath().endsWith("/") ? "" : "/") + "20_20/xml2/clean/";    String thisMonthNetworkFile=month.getAbsolutePath() + (month.getAbsolutePath().endsWith("/") ? "" : "/") + "20_20/20_20_pathDependentNetwork.xml.gz";    String[] sa={thisMonthCleanXmlFolder,thisMonthNetworkFile,"Longitudinal data for GrainBiz using 20_20"};    PathDependentNetworkBuilder.main(sa);    LOG.info("====> Done processing month.");  }  Header.printFooter();}  }
class C{  public Matrix4f m12(float m12){  this.m12=m12;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public boolean isSetSyncValue(){  return this.syncValue != null;}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  JobStatus jobStatus=getJobStatus();  try {    if (jobStatus == JobStatus.IN_PROGRESS) {      return;    }    CIMConnectionFactory cimConnectionFactory=jobContext.getCimConnectionFactory();    WBEMClient client=getWBEMClient(dbClient,cimConnectionFactory);    List<Volume> volumes=new ArrayList<Volume>();    Set<URI> poolURIs=new HashSet<URI>();    for (    URI id : getTaskCompleter().getIds()) {      Volume volume=dbClient.queryObject(Volume.class,id);      volumes.add(volume);      poolURIs.add(volume.getPool());    }    if (jobStatus == JobStatus.SUCCESS || jobStatus == JobStatus.FAILED || jobStatus == JobStatus.FATAL_ERROR) {      for (      URI poolURI : poolURIs) {        SmisUtils.updateStoragePoolCapacity(dbClient,client,poolURI);      }    }    StringBuilder logMsgBuilder=new StringBuilder();    if (jobStatus == JobStatus.SUCCESS) {      for (      Volume volume : volumes) {        volume.setInactive(true);        volume.setConsistencyGroup(NullColumnValueGetter.getNullURI());        dbClient.updateAndReindexObject(volume);        dbClient.updateTaskOpStatus(Volume.class,volume.getId(),getTaskCompleter().getOpId(),new Operation(Operation.Status.ready.name(),String.format("Deleted volume %s",volume.getNativeId())));        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Successfully deleted volume %s",volume.getId()));      }    } else     if (jobStatus == JobStatus.FAILED || jobStatus == JobStatus.FATAL_ERROR) {      for (      URI id : getTaskCompleter().getIds()) {        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Failed to delete volume: %s",id));      }      for (      Volume volume : volumes) {        if (volume.checkForSRDF()) {          volume.setPersonality(NullColumnValueGetter.getNullStr());          volume.setAccessState(Volume.VolumeAccessState.READWRITE.name());          volume.setLinkStatus(NullColumnValueGetter.getNullStr());          if (!NullColumnValueGetter.isNullNamedURI(volume.getSrdfParent())) {            volume.setSrdfParent(new NamedURI(NullColumnValueGetter.getNullURI(),NullColumnValueGetter.getNullStr()));            volume.setSrdfCopyMode(NullColumnValueGetter.getNullStr());            volume.setSrdfGroup(NullColumnValueGetter.getNullURI());          } else           if (null != volume.getSrdfTargets()) {            volume.getSrdfTargets().clear();          }        }        dbClient.updateAndReindexObject(volume);      }    }    if (logMsgBuilder.length() > 0) {      _log.info(logMsgBuilder.toString());    }  } catch (  Exception e) {    setPostProcessingErrorStatus("Encountered an internal error during delete volume job status processing: " + e.getMessage());    _log.error("Caught exception while handling updateStatus for delete volume job.",e);  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public void oneMethod(){  anotherMethod();}  }
class C{  public Organizer(String name,String email){  this.name=name;  this.email=email;}  }
class C{  @Override public Instances generateExamples() throws Exception {  Instances result;  int i;  result=new Instances(m_DatasetFormat,0);  m_Random=new Random(getSeed());  for (i=0; i < getNumExamplesAct(); i++) {    result.add(generateExample());  }  return result;}  }
class C{  public List<CnATreeElement> findPersonsInParent(MassnahmenUmsetzung umsetzung){  if (log.isDebugEnabled()) {    log.debug("getLinkedPersonsByRoles - massnahme: " + umsetzung.getDbId() + ", propertyTypeId: "+ propertyId);  }  Set<Person> result=new HashSet<Person>();  Set<Property> rolesToSearch=getRoles(umsetzung);  if (rolesToSearch != null && !rolesToSearch.isEmpty()) {    findPersonsInParent(result,umsetzung.getParent().getParent(),rolesToSearch);  }  return new ArrayList<CnATreeElement>(result);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void onScroll(AccessibilityNodeInfoCompat scrolledNode,int action){  if (scrolledNode == null) {    clearScrollAction();  }switch (action) {case AccessibilityNodeInfo.ACTION_SCROLL_FORWARD:case AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD:    mLastScrollAction=action;  if (mActionScrolledNode != null) {    mActionScrolledNode.recycle();  }if (scrolledNode != null) {  mActionScrolledNode=AccessibilityNodeInfoCompat.obtain(scrolledNode);}break;}}  }
class C{  public final boolean contains(Word key){  return !getEntry(key,false).isZero();}  }
class C{  public boolean isNoSelectedRole(){  if (selectedRole == null) {    return true;  }  return false;}  }
class C{  protected void evict(){  counterEvictionsRounds++;  evictionClass.beforeEviction();  evictWithFreezer();  evictionClass.afterEviction();}  }
class C{  public DoubleArrayList(double[] elements){  elements(elements);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:35.062 -0500",hash_original_method="FB47DF2BD8B60DCEADAB62594508D31A",hash_generated_method="EC1E7FBAF6E2ADD28D11FCB3F1467F43") static DriverCall fromCLCCLine(String line){  DriverCall ret=new DriverCall();  ATResponseParser p=new ATResponseParser(line);  try {    ret.index=p.nextInt();    ret.isMT=p.nextBoolean();    ret.state=stateFromCLCC(p.nextInt());    ret.isVoice=(0 == p.nextInt());    ret.isMpty=p.nextBoolean();    ret.numberPresentation=Connection.PRESENTATION_ALLOWED;    if (p.hasMore()) {      ret.number=PhoneNumberUtils.extractNetworkPortionAlt(p.nextString());      if (ret.number.length() == 0) {        ret.number=null;      }      ret.TOA=p.nextInt();      ret.number=PhoneNumberUtils.stringFromStringAndTOA(ret.number,ret.TOA);    }  } catch (  ATParseEx ex) {    Log.e(LOG_TAG,"Invalid CLCC line: '" + line + "'");    return null;  }  return ret;}  }
class C{  @Override public final int update(@NonNull Uri uri,ContentValues values,String selection,String[] selectionArgs){  SQLiteDatabase dbConnection=database.getWritableDatabase();  int updateCount=0;  try {    dbConnection.beginTransaction();switch (URI_MATCHER.match(uri)) {case PRODUCT_DIR:      updateCount=dbConnection.update(ProductTable.TABLE_NAME,values,selection,selectionArgs);    dbConnection.setTransactionSuccessful();  break;case PRODUCT_ID:Long productId=ContentUris.parseId(uri);updateCount=dbConnection.update(ProductTable.TABLE_NAME,values,ProductTable.ID + "=" + productId+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);dbConnection.setTransactionSuccessful();break;default :throw new IllegalArgumentException("Unsupported URI: " + uri);}}  finally {dbConnection.endTransaction();}if (updateCount > 0) {getContext().getContentResolver().notifyChange(uri,null);}return updateCount;}  }
class C{  public static Ignite start(InputStream springCfgStream,@Nullable String gridName,@Nullable GridSpringResourceContext springCtx,@Nullable ClassLoader ldr) throws IgniteCheckedException {  A.notNull(springCfgStream,"springCfgUrl");  boolean isLog4jUsed=U.gridClassLoader().getResource("org/apache/log4j/Appender.class") != null;  IgniteBiTuple<Object,Object> t=null;  if (isLog4jUsed) {    try {      t=U.addLog4jNoOpLogger();    } catch (    IgniteCheckedException ignore) {      isLog4jUsed=false;    }  }  Collection<Handler> savedHnds=null;  if (!isLog4jUsed)   savedHnds=U.addJavaNoOpLogger();  IgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> cfgMap;  try {    cfgMap=loadConfigurations(springCfgStream);  }  finally {    if (isLog4jUsed && t != null)     U.removeLog4jNoOpLogger(t);    if (!isLog4jUsed)     U.removeJavaNoOpLogger(savedHnds);  }  return startConfigurations(cfgMap,null,gridName,springCtx,ldr);}  }
class C{  public String globalInfo(){  return "Reads a source that contains serialized Instances.";}  }
class C{  protected Writer buildDatabaseSchemaCreationWriter(AbstractSession session,Writer writer,Set<String> createdDatabaseSchemas){  try {    writer.write(session.getPlatform().getCreateDatabaseSchemaString(getDatabaseSchema()));  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  createdDatabaseSchemas.add(getDatabaseSchema());  return writer;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("UidCriterion ( ").append("operator = ").append(this.operator).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public String toString(){  return "Subscription ( " + "user = " + this.getUser() + TOSTRING_SEPARATOR+ "mailbox = "+ this.getMailbox()+ TOSTRING_SEPARATOR+ " )";}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public DatagramIOConfigurationImpl(){}  }
class C{  public static Object convertStringToWrapper(String str,Class<?> wrapper){  log.trace("String: {} to wrapper: {}",str,wrapper);  if (wrapper.equals(String.class)) {    return str;  } else   if (wrapper.equals(Boolean.class)) {    return Boolean.valueOf(str);  } else   if (wrapper.equals(Double.class)) {    return Double.valueOf(str);  } else   if (wrapper.equals(Long.class)) {    return Long.valueOf(str);  } else   if (wrapper.equals(Float.class)) {    return Float.valueOf(str);  } else   if (wrapper.equals(Integer.class)) {    return Integer.valueOf(str);  } else   if (wrapper.equals(Short.class)) {    return Short.valueOf(str);  } else   if (wrapper.equals(Byte.class)) {    return Byte.valueOf(str);  }  return null;}  }
class C{  public MiniDrawer withInnerShadow(boolean innerShadow){  this.mInnerShadow=innerShadow;  return this;}  }
class C{  public int peek(){  return _list.get(_list.size() - 1);}  }
class C{  public TwitterStreamFactory(final StreamConfiguration conf){  this.conf=conf;}  }
class C{  @Override public double accuracyLat(){  return Math.abs(int2coord(1) - int2coord(2));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.858 -0400",hash_original_method="CB0233CD34D87630D222478FE14929AD",hash_generated_method="6EACB49EAA8492043C350AAB1B1F2EDE") private void flushOutput() throws IOException {  if (decoderOut.position() > 0) {    writer.write(decoderOut.array(),0,decoderOut.position());    decoderOut.rewind();  }}  }
class C{  public BytesRef(byte[] bytes){  this(bytes,0,bytes.length);}  }
class C{  public void addRows(final int rowsToAdd){  addRows(rowsToAdd,getDefaultValue());}  }
class C{  public void addBuildFailureMessage(){  comment.append(String.format("\n\nLink to build: %s",buildURL));  comment.append(String.format("\nSee console output for more information: %sconsole",buildURL));}  }
class C{  public FunctionInputPanel(FunctionInput input){  this(input,null);}  }
class C{  public static void writeLine(Object o){  buffer.append(o).append(END_LINE);  scheduleBufferPrint();}  }
class C{  public void rejoinGroupChat(String chatId) throws PayloadException, NetworkException {  mChatService.rejoinGroupChat(chatId);}  }
class C{  public Exception(String string){  super(string);}  }
class C{  public Formatter(){  this(JavaFormatterOptions.defaultOptions());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MCombinedAging[");  sb.append("AD_PInstance_ID=").append(getAD_PInstance_ID()).append(",C_BPartner_ID=").append(getC_BPartner_ID()).append(",C_Currency_ID=").append(getC_Currency_ID()).append(",C_Invoice_ID=").append(getC_Invoice_ID());  sb.append("]");  return sb.toString();}  }
class C{  public void run(){  try {    while (datagramConnection != null) {      byte[] data=datagramConnection.receive();      if (data.length >= 12) {        int payloadType=(byte)((data[1] & 0xff) & 0x7f);        if (payloadType != 20) {          int seqnum=(char)((data[2] << 8) | (data[3] & 0xff));          if (seqnum > lastSeqnum - 10) {            if (fifo.size() >= FIFO_MAX_NUMBER) {              fifo.clean(FIFO_CLEAN_NUMBER);            }            fifo.addObject(data);            lastSeqnum=seqnum;          } else {            stats.numBadRtpPkts++;          }        }      }    }  } catch (  SocketTimeoutException ex) {  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void determineGlobalExtremum(){  alphaExtremum=new double[vec.getDimensionality() - 1];  for (int n=alphaExtremum.length - 1; n >= 0; n--) {    alphaExtremum[n]=extremum_alpha_n(n,alphaExtremum);    if (Double.isNaN(alphaExtremum[n])) {      throw new IllegalStateException("Houston, we have a problem!" + "\n" + this + "\n"+ vec.toArray()+ "\n"+ FormatUtil.format(alphaExtremum));    }  }  determineGlobalExtremumType();}  }
class C{  public void writeRawPart(InputStream content) throws IOException {  writeCurrentBoundary();  write(content);}  }
class C{  public Wave addTask(Task task){  mTaskList.add(task);  return this;}  }
class C{  public int size(){  return this.dict.size();}  }
class C{  public void damagePercentageCurrent(double value){  damage(value / 100 * getValue());}  }
class C{  public ImportanceTransferNotification(final Account lessor,final Account lessee,final ImportanceTransferMode mode){  super(NotificationType.ImportanceTransfer);  this.lessor=lessor;  this.lessee=lessee;  this.mode=mode;}  }
class C{  public boolean find(int start){  return matcher.find(start);}  }
class C{  public static void populateDatabase() throws SQLException {  JdbcConnectionPool dataSrc=JdbcConnectionPool.create("jdbc:h2:tcp://localhost/mem:ExampleDb","sa","");  RunScript.execute(dataSrc.getConnection(),new StringReader(CREATE_PERSON_TABLE));  RunScript.execute(dataSrc.getConnection(),new StringReader(POPULATE_PERSON_TABLE));}  }
class C{  public static void init(){  try {    Field field=RenderingHints.Key.class.getDeclaredField("identitymap");    field.setAccessible(true);    renderingHintsKeyIdentityMap=(Map)field.get(null);    renderingHintsKeyIdentityMapCopy=new LinkedHashMap<>(renderingHintsKeyIdentityMap.size());    renderingHintsKeyIdentityMapCopy.putAll(renderingHintsKeyIdentityMap);  } catch (  Exception e) {    logger.error("Failed to handle 'identitymap': " + e.toString());  }}  }
class C{  public static Process execute(final String[] commandArray) throws IOException {  return Runtime.getRuntime().exec(commandArray);}  }
class C{  public Iterator iterator(){  return new RLMIterator();}  }
class C{  private CReilViewCreator(){}  }
class C{  public void removeListener(Listener<ComplexBuffer> listener){synchronized (mComplexBufferBroadcaster) {    mComplexBufferBroadcaster.removeListener(listener);    if (!mComplexBufferBroadcaster.hasListeners()) {      mBufferProcessor.stop();    }  }}  }
class C{  public boolean isPointInPolygon(){  return getLocation() != Location.EXTERIOR;}  }
class C{  public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  public EqualsBuilder append(final char lhs,final char rhs){  if (isEquals == false) {    return this;  }  isEquals=(lhs == rhs);  return this;}  }
class C{  @Override public void relocate(){}  }
class C{  public String toString(){  return (eventbaseID == null ? "" : eventbaseID + ".") + eventName + (offset != 0 ? super.toString() : "");}  }
class C{  private Properties extractPSPParameters(HttpServletRequest request) throws IOException {  Properties props=new Properties();  ServletInputStream inputStream=request.getInputStream();  if (inputStream == null) {    return props;  }  BufferedReader br=new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));  String line=br.readLine();  StringBuffer sb=new StringBuffer();  while (line != null) {    sb.append(line);    line=br.readLine();  }  String params=sb.toString();  StringTokenizer st=new StringTokenizer(params,"&");  while (st.hasMoreTokens()) {    String nextToken=st.nextToken();    String[] splitResult=nextToken.split("=");    String key=splitResult[0];    String value="";    if (splitResult.length > 1) {      value=URLDecoder.decode(splitResult[1],"UTF-8");    }    props.setProperty(key,value);  }  return props;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public <Type>void load(final String assetPath,final Class<Type> assetClass,final AssetLoaderParameters<Type> loadingParameters){  if (isAssetNotScheduled(assetPath)) {    assetManager.load(assetPath,assetClass,loadingParameters);  }}  }
class C{  public static Script createMultiSigInputScript(List<TransactionSignature> signatures){  List<byte[]> sigs=new ArrayList<byte[]>(signatures.size());  for (  TransactionSignature signature : signatures) {    sigs.add(signature.encodeToBitcoin());  }  return createMultiSigInputScriptBytes(sigs,null);}  }
class C{  public static org.oscm.internal.vo.VOSubscriptionIdAndOrganizations convertToUp(org.oscm.vo.VOSubscriptionIdAndOrganizations oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOSubscriptionIdAndOrganizations newVO=new org.oscm.internal.vo.VOSubscriptionIdAndOrganizations();  newVO.setSubscriptionId(oldVO.getSubscriptionId());  newVO.setOrganizations(convertToUpVOOrganization(oldVO.getOrganizations()));  return newVO;}  }
class C{  @PUT @Path("/{id}") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public UserGroupRestRep updateUserGroup(@PathParam("id") URI id,UserGroupUpdateParam param){  checkCompatibleVersion();  UserGroup userGroup=getUserGroupById(id,false);  ArgValidator.checkEntityNotNull(userGroup,id,isIdEmbeddedInURL(id));  validateUserGroupUpdateParam(param);  overlayUserGroup(userGroup,param);  checkForOverlappingUserGroup(userGroup);  _dbClient.persistObject(userGroup);  auditOp(OperationTypeEnum.UPDATE_USERGROUP,true,null,userGroup.toString(),userGroup.getId().toString());  return map(getUserGroupById(id,false));}  }
class C{  public static boolean isQRCodeRepTrainingReceipt(String qrMachineCodeRepresentation){  String encryptedTurnOverCounter=CashBoxUtils.getValueFromMachineCode(qrMachineCodeRepresentation,MachineCodeValue.ENCRYPTED_TURN_OVER_VALUE);  String decodedTurnOverCounter=new String(CashBoxUtils.base64Decode(encryptedTurnOverCounter,false));  return "TRA".equals(decodedTurnOverCounter);}  }
class C{  public ISPO decodeValue(final ISPO spo,final byte[] val){  final byte code=val[0];  final StatementEnum type=StatementEnum.decode(code);  spo.setStatementType(type);  spo.setOverride(StatementEnum.isOverride(code));  spo.setUserFlag(StatementEnum.isUserFlag(code));  return spo;}  }
class C{  public String parent(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  final int M_Product_ID=(Integer)value;  if (M_Product_ID <= 0)   return "";  I_PP_Product_BOMLine bomLine=GridTabWrapper.create(mTab,I_PP_Product_BOMLine.class);  I_PP_Product_BOM bom=bomLine.getPP_Product_BOM();  if (bom == null) {    throw new AdempiereException("Please save header record first.");  }  if (bom.getM_Product_ID() == bomLine.getM_Product_ID()) {    throw new AdempiereException("@ValidComponent@ - Error Parent not be Component");  }  MProduct product=MProduct.get(ctx,M_Product_ID);  bomLine.setDescription(product.getDescription());  bomLine.setHelp(product.getHelp());  bomLine.setC_UOM_ID(product.getC_UOM_ID());  bomLine.setM_AttributeSetInstance_ID(product.getEnvAttributeSetInstance(ctx,WindowNo) == null ? 0 : product.getEnvAttributeSetInstance(ctx,WindowNo));  return "";}  }
class C{  public static MOAObject copy(MOAObject obj){  try {    return (MOAObject)SerializeUtils.copyObject(obj);  } catch (  Exception e) {    throw new RuntimeException("Object copy failed.",e);  }}  }
class C{  public static ValueTimestamp convertTimestamp(Timestamp x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long dateValue=dateValueFromCalendar(cal);  long nanos=nanosFromCalendar(cal);  nanos+=x.getNanos() % 1000000;  return ValueTimestamp.fromDateValueAndNanos(dateValue,nanos);}  }
class C{  public Tanaka(){  super(2,2,2);}  }
class C{  protected TileInfoKey createTileInfoKey(DrawContext dc){  Dimension tileDimension=this.computeTextureTileDimension(dc);  return new TileInfoKey(dc,tileDimension.width,tileDimension.height);}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (m_inExternalDTD)   return;  try {    final java.io.Writer writer=m_writer;    DTDprolog();    writer.write("<!ATTLIST ");    writer.write(eName);    writer.write(' ');    writer.write(aName);    writer.write(' ');    writer.write(type);    if (valueDefault != null) {      writer.write(' ');      writer.write(valueDefault);    }    writer.write('>');    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public static final long BuildLong(byte bytevec[],int offset,boolean MSBFirst){  if (MSBFirst)   return BuildLongBE(bytevec,offset); else   return BuildLongLE(bytevec,offset);}  }
class C{  void resetViewProperties(){  OverviewCardTransform.reset(this);}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public ProdTypeAttributeViewGroupServiceImpl(final GenericDAO<ProdTypeAttributeViewGroup,Long> genericDao){  super(genericDao);}  }
class C{  final void fireHidden(){  myDispatcher.getMulticaster().hidden(this);}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  map.put(k5,v5);  return map;}  }
class C{  private void deduplicateAndAdd(List<? extends PlaidItem> newItems){  final int count=getDataItemCount();  for (  PlaidItem newItem : newItems) {    boolean add=true;    for (int i=0; i < count; i++) {      PlaidItem existingItem=getItem(i);      if (existingItem.equals(newItem)) {        add=false;        break;      }    }    if (add) {      add(newItem);    }  }}  }
class C{  private final PublicKey constructPublicKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {  PublicKey key=null;  try {    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm,SunJCE.getInstance());    X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);    key=keyFactory.generatePublic(keySpec);  } catch (  NoSuchAlgorithmException nsae) {    try {      KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);      X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);      key=keyFactory.generatePublic(keySpec);    } catch (    NoSuchAlgorithmException nsae2) {      throw new NoSuchAlgorithmException("No installed providers " + "can create keys for the " + encodedKeyAlgorithm + "algorithm");    }catch (    InvalidKeySpecException ikse2) {    }  }catch (  InvalidKeySpecException ikse) {  }  return key;}  }
class C{  private void fillBuffer(final BindingSet solution){  assert buffer.isEmpty();  if (!haveFirstSolution) {    haveFirstSolution=true;    for (    BigdataStatement stmt : groundTriples) {      addStatementToBuffer(stmt);    }  }  final Map<String,BigdataBNode> bnodes=getBNodeMap();  int ngenerated=0;  for (  StatementPatternNode pat : templates) {    final BigdataStatement stmt=makeStatement(pat,solution,bnodes);    if (stmt != null) {      addStatementToBuffer(stmt);      ngenerated++;    }  }  if (ngenerated == 0 && DEBUG) {    log.debug("No statements generated for this solution: " + solution);  }}  }
class C{  public synchronized void deleteUser(final IUser user) throws CouldntDeleteException {  Preconditions.checkNotNull(user,"IE02721: user argument can not be null");  if (!users.contains(user)) {    throw new IllegalStateException("IE02722: User is not known to the user management.");  }  provider.deleteUser(user);  for (  final IUserManagerListener listener : listeners) {    try {      listener.deletedUser(user);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  protected void removeClassCacheEntry(String name){synchronized (classCache) {    classCache.remove(name);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getGenExpr_();}  }
class C{  @Deprecated public static void enableHostEditorKeyBindings(IWorkbenchPartSite partSite,boolean enable){  IWorkbenchPart part=partSite.getPart();  if (part instanceof AbstractTextEditor) {    AbstractTextEditor hostEditor=(AbstractTextEditor)part;    if (hostEditor instanceof BaseTextEditor) {      StyledText textWidget=((BaseTextEditor)hostEditor).getTextViewer().getTextWidget();      if (textWidget == null || textWidget.isDisposed()) {        return;      }    }    try {      Method activatorMethod=AbstractTextEditor.class.getDeclaredMethod("setActionActivation",Boolean.TYPE);      activatorMethod.setAccessible(true);      activatorMethod.invoke(hostEditor,enable);    } catch (    Throwable e) {      if (e instanceof InvocationTargetException) {        e=((InvocationTargetException)e).getTargetException();      }      log.warn("Can't disable text editor action activations",e);    }  }}  }
class C{  public void validate(String pattern) throws TemplateException {  TemplateTranslator translator=new TemplateTranslator();  TemplateBuffer buffer=translator.translate(pattern);  validateVariables(buffer.getVariables());}  }
class C{  public void increaseThis(){  xorBit(0);}  }
class C{  public AffineTransform handleImage(RenderedImage image,Element imageElement,int x,int y,int width,int height,SVGGeneratorContext generatorContext){  int imageWidth=image.getWidth();  int imageHeight=image.getHeight();  if (imageWidth == 0 || imageHeight == 0 || width == 0 || height == 0) {    handleEmptyImage(imageElement);  } else {    imageHandler.handleImage(image,imageElement,generatorContext);    setImageAttributes(imageElement,x,y,width,height,generatorContext);  }  return null;}  }
class C{  public boolean hasNameExt(){  return hasExtension(GphotoName.class);}  }
class C{  @EventHandler(ignoreCancelled=true) public void onPlayerTeleport(PlayerTeleportEvent event){  handlePlayerMove(event);}  }
class C{  @Override public Dimension preferredLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getPreferredSize();      if (w < d.width) {        w=d.width;      }      if (h < d.height) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + ncols * w + (ncols - 1) * hgap,insets.top + insets.bottom + nrows * h + (nrows - 1) * vgap);  }}  }
class C{  protected Node newNode(){  return new SVGOMFilterElement();}  }
class C{  public EqualsBuilder appendSuper(boolean superEquals){  if (isEquals == false) {    return this;  }  isEquals=superEquals;  return this;}  }
class C{  public static String printRangeValue(String leftValue,String rightValue,String separator){  StringBuilder sb=new StringBuilder();  sb.append(leftValue + " ");  sb.append(separator);  sb.append(" " + rightValue);  return sb.toString();}  }
class C{  public MLResults execute(Script script){  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);  scriptExecutor.setExplain(explain);  scriptExecutor.setExplainLevel(explainLevel);  scriptExecutor.setStatistics(statistics);  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());  return execute(script,scriptExecutor);}  }
class C{  public static List<String> readLines(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  private static void addLocationChoice(final Controler controler){  DestinationChoiceConfigGroup dccg=new DestinationChoiceConfigGroup();  StringBuffer sb=new StringBuffer();  StringBuffer epsilons=new StringBuffer();  for (  ActivityParams params : controler.getConfig().planCalcScore().getActivityParams()) {    if (params.getActivityType().contains("shop") || params.getActivityType().contains("othe") || params.getActivityType().contains("leis")) {      if (sb.length() < 1) {        sb.append(params.getActivityType());        epsilons.append("1.0");      } else {        sb.append(", " + params.getActivityType());        epsilons.append(", 1.0");      }    }  }  dccg.setFlexibleTypes(sb.toString());  dccg.setEpsilonScaleFactors(epsilons.toString());  dccg.setpkValuesFile("/home/danielhosse/run9a/personsKValues.xml");  dccg.setfkValuesFile("/home/danielhosse/run9a/facilitiesKValues.xml");  dccg.setScaleFactor(1);  controler.getConfig().addModule(dccg);  DestinationChoiceBestResponseContext dcbr=new DestinationChoiceBestResponseContext(controler.getScenario());  dcbr.init();  DCScoringFunctionFactory scFactory=new DCScoringFunctionFactory(controler.getScenario(),dcbr);  scFactory.setUsingConfigParamsForScoring(true);  controler.addControlerListener(new DestinationChoiceInitializer(dcbr));  if (Double.parseDouble(controler.getConfig().findParam("locationchoice","restraintFcnExp")) > 0.0 && Double.parseDouble(controler.getConfig().findParam("locationchoice","restraintFcnFactor")) > 0.0) {    controler.addControlerListener(new FacilitiesLoadCalculator(dcbr.getFacilityPenalties()));  }  controler.setScoringFunctionFactory(scFactory);  StrategySettings dc=new StrategySettings();  dc.setStrategyName("org.matsim.contrib.locationchoice.BestReplyLocationChoicePlanStrategy");  dc.setSubpopulation(null);  dc.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(dc);}  }
class C{  @Deprecated public List<Reference> listPending(){  List<Reference> apiList=getApiList(client,new GenericType<List<Reference>>(){  },APPROVALS_PENDING_URL);  return apiList;}  }
class C{  public XObject elementAt(final int i){  return _stackFrames[i];}  }
class C{  public SearchParameters(String search){  this(search,false);}  }
class C{  public MinHash(final double error,final int dict_size){  init(size(error),dict_size,new Random());}  }
class C{  @Override public Dimension minimumLayoutSize(Container parent){  return preferredLayoutSize(parent);}  }
class C{  public static void error(){  throw new AssertionError();}  }
class C{  public TriplyIndexedTable(){  table=new Entry[INITIAL_CAPACITY];}  }
class C{  public static String strPad(String input,int length,String padString){  return strPad(input,length,padString,STR_PAD_LEFT);}  }
class C{  private void closeInboundInternal(){  if ((debug != null) && Debug.isOn("ssl")) {    System.out.println(Thread.currentThread().getName() + ", closeInboundInternal()");  }  if (inboundDone) {    return;  }  closeOutboundInternal();  inboundDone=true;  readCipher.dispose();  connectionState=cs_CLOSED;}  }
class C{  private static int createMachineIdentifier(){  int machinePiece;  try {    StringBuilder sb=new StringBuilder();    Enumeration<NetworkInterface> e=NetworkInterface.getNetworkInterfaces();    if (e != null) {      while (e.hasMoreElements()) {        NetworkInterface ni=e.nextElement();        sb.append(ni.toString());        byte[] mac=ni.getHardwareAddress();        if (mac != null) {          ByteBuffer bb=ByteBuffer.wrap(mac);          try {            sb.append(bb.getChar());            sb.append(bb.getChar());            sb.append(bb.getChar());          } catch (          BufferUnderflowException shortHardwareAddressException) {          }        }      }    }    machinePiece=sb.toString().hashCode();  } catch (  Throwable ex) {    machinePiece=(new SecureRandom().nextInt());    logger.warn("Failed to get machine identifier from network interface, using random number instead",ex);  }  return machinePiece;}  }
class C{  public static List<TaskHandle> loadAllTasks(Queue queue,String tld){  ImmutableList.Builder<TaskHandle> allTasks=new ImmutableList.Builder<>();  int numErrors=0;  long backOff=backOffMillis;  while (true) {    try {      List<TaskHandle> tasks=queue.leaseTasks(LeaseOptions.Builder.withTag(tld).leasePeriod(LEASE_PERIOD.getMillis(),TimeUnit.MILLISECONDS).countLimit(BATCH_SIZE));      allTasks.addAll(tasks);      if (tasks.isEmpty()) {        return allTasks.build();      }    } catch (    TransientFailureException|DeadlineExceededException e) {      if (++numErrors >= 3) {        throw new RuntimeException("Error leasing tasks",e);      }      Uninterruptibles.sleepUninterruptibly(backOff,TimeUnit.MILLISECONDS);      backOff*=2;    }  }}  }
class C{  @SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter") @Nullable public static <T>T invoke(Object obj,String mtd,Object... params) throws Exception {  for (  Method m : obj.getClass().getDeclaredMethods()) {    if (!m.getName().equals(mtd))     continue;    if (!areCompatible(params,m.getParameterTypes()))     continue;    try {synchronized (m) {        boolean accessible=m.isAccessible();        try {          if (!accessible)           m.setAccessible(true);          return (T)m.invoke(obj,params);        }  finally {          if (!accessible)           m.setAccessible(false);        }      }    } catch (    IllegalAccessException e) {      throw new RuntimeException("Failed to access method" + " [obj=" + obj + ", mtd="+ mtd+ ", params="+ Arrays.toString(params)+ ']',e);    }catch (    InvocationTargetException e) {      Throwable cause=e.getCause();      if (cause instanceof Error)       throw (Error)cause;      if (cause instanceof Exception)       throw (Exception)cause;      throw new RuntimeException("Failed to invoke method)" + " [obj=" + obj + ", mtd="+ mtd+ ", params="+ Arrays.toString(params)+ ']',e);    }  }  throw new RuntimeException("Failed to find method" + " [obj=" + obj + ", mtd="+ mtd+ ", params="+ Arrays.toString(params)+ ']');}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.facetName=in.readUTF();}  }
class C{  private int atFieldRead(CtField f,boolean isStatic) throws CompileError {  FieldInfo finfo=f.getFieldInfo2();  boolean is2byte=setFieldType(finfo);  AccessorMaker maker=isAccessibleField(f,finfo);  if (maker != null) {    MethodInfo minfo=maker.getFieldGetter(finfo,isStatic);    bytecode.addInvokestatic(f.getDeclaringClass(),minfo.getName(),minfo.getDescriptor());    return 0;  } else {    int fi=addFieldrefInfo(f,finfo);    if (isStatic) {      bytecode.add(GETSTATIC);      bytecode.growStack(is2byte ? 2 : 1);    } else {      bytecode.add(GETFIELD);      bytecode.growStack(is2byte ? 1 : 0);    }    bytecode.addIndex(fi);    return fi;  }}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("view.options.title"));  this.add(getPanelMisc(),getPanelMisc().getName());}  }
class C{  public static Map<String,Object> updatePerson(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String partyId=getPartyId(context);  if (UtilValidate.isEmpty(partyId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.party_id_missing",locale));  }  GenericValue person=null;  GenericValue party=null;  try {    person=EntityQuery.use(delegator).from("Person").where("partyId",partyId).queryOne();    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.read_failure",new Object[]{e.getMessage()},locale));  }  if (person == null || party == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.not_found",locale));  }  String oldStatusId=party.getString("statusId");  if (party.get("statusId") == null) {    party.set("statusId","PARTY_ENABLED");  }  person.setNonPKFields(context);  party.setNonPKFields(context);  party.set("statusId",oldStatusId);  try {    person.store();    party.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.write_failure",new Object[]{e.getMessage()},locale));  }  if (UtilValidate.isNotEmpty(context.get("statusId")) && !context.get("statusId").equals(oldStatusId)) {    try {      dispatcher.runSync("setPartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",context.get("statusId"),"userLogin",context.get("userLogin")));    } catch (    GenericServiceException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.write_failure",new Object[]{e.getMessage()},locale));    }  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"person.update.success",locale));  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_BODY_1__LINKING_OP_1:    getLinkingOp_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public void add(double[] vals){  add(vals,0,vals.length);}  }
class C{  public boolean isClientTrusted(X509Certificate[] chain){  return (true);}  }
class C{  public static byte j2dAlphaCompToXR(int j2dRule){switch (j2dRule) {case CLEAR:    return PictOpClear;case SRC:  return PictOpSrc;case DST:return PictOpDst;case SRC_OVER:return PictOpOver;case DST_OVER:return PictOpOverReverse;case SRC_IN:return PictOpIn;case DST_IN:return PictOpInReverse;case SRC_OUT:return PictOpOut;case DST_OUT:return PictOpOutReverse;case SRC_ATOP:return PictOpAtop;case DST_ATOP:return PictOpAtopReverse;case XOR:return PictOpXor;}throw new InternalError("No XRender equivalent available for requested java2d composition rule: " + j2dRule);}  }
class C{  private static Credential authorize() throws Exception {  clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(Main.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/ " + "into google-sites-liberation/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,SCOPES).setDataStoreFactory(dataStoreFactory).setAccessType("offline").build();  LocalServerReceiver localServerReceiver=new LocalServerReceiver.Builder().setPort(8080).build();  return new AuthorizationCodeInstalledApp(flow,localServerReceiver).authorize("user");}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.014 -0500",hash_original_method="D7F209B054EFDAA234F2E91AF71983AB",hash_generated_method="9206E431943C5FFBE965BF509EE434E2") public ThreadDeath(){}  }
class C{  public MGRSCoordPanel(){  super();}  }
class C{  private String applyDrunkEffect(String text,int amount){  amount=Math.max(amount / 2 + 1,amount * (20 + text.length()) / 40);  StringBuilder b=new StringBuilder(text);  while (amount > 1) {switch (Rand.rand(3)) {case 0:      swapLetters(b);    break;case 1:  removeLetter(b);break;case 2:duplicateLetter(b);}amount--;}b.append(" *hicks*");return b.toString();}  }
class C{  public Vertex evaluateRANDOM(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (arguments.isEmpty()) {    return network.createVertex(Primitive.NULL);  }  return evaluateExpression(Utils.random(arguments).getTarget(),variables,network,startTime,maxTime,stack);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void extendElement(Element e){  AcelaNode node=(AcelaNode)AcelaTrafficController.instance().getNode(0);  int index=1;  while (node != null) {    Element n=new Element("node");    n.setAttribute("name","" + node.getNodeAddress());    e.addContent(n);    n.addContent(makeParameter("nodetype","" + node.getNodeTypeString()));    if (node.getNodeType() == AcelaNode.TB) {      for (int s=0; s < 4; s++) {        n.addContent(makeParameter("sensortype" + s,"" + node.getSensorTypeString(s)));        n.addContent(makeParameter("sensorpolarity" + s,"" + node.getSensorPolarityString(s)));        n.addContent(makeParameter("sensorthreshold" + s,"" + node.getSensorThreshold(s)));      }      for (int o=0; o < 4; o++) {        n.addContent(makeParameter("outputwired" + o,"" + node.getOutputWiredString(o)));        n.addContent(makeParameter("outputinit" + o,"" + node.getOutputInitString(o)));        n.addContent(makeParameter("outputtype" + o,"" + node.getOutputTypeString(o)));        n.addContent(makeParameter("outputlength" + o,"" + node.getOutputLength(o)));      }    } else     if (node.getNodeType() == AcelaNode.D8) {      for (int o=0; o < 8; o++) {        n.addContent(makeParameter("outputwired" + o,"" + node.getOutputWiredString(o)));        n.addContent(makeParameter("outputinit" + o,"" + node.getOutputInitString(o)));        n.addContent(makeParameter("outputtype" + o,"" + node.getOutputTypeString(o)));        n.addContent(makeParameter("outputlength" + o,"" + node.getOutputLength(o)));      }    } else     if (node.getNodeType() == AcelaNode.WM) {      for (int s=0; s < 8; s++) {        n.addContent(makeParameter("sensortype" + s,"" + node.getSensorTypeString(s)));        n.addContent(makeParameter("sensorpolarity" + s,"" + node.getSensorPolarityString(s)));        n.addContent(makeParameter("sensorthreshold" + s,"" + node.getSensorThreshold(s)));      }    } else     if (node.getNodeType() == AcelaNode.SM) {      for (int o=0; o < 16; o++) {        n.addContent(makeParameter("outputwired" + o,"" + node.getOutputWiredString(o)));        n.addContent(makeParameter("outputinit" + o,"" + node.getOutputInitString(o)));        n.addContent(makeParameter("outputtype" + o,"" + node.getOutputTypeString(o)));        n.addContent(makeParameter("outputlength" + o,"" + node.getOutputLength(o)));      }    } else     if (node.getNodeType() == AcelaNode.SW) {      for (int o=0; o < 16; o++) {        n.addContent(makeParameter("outputwired" + o,"" + node.getOutputWiredString(o)));        n.addContent(makeParameter("outputinit" + o,"" + node.getOutputInitString(o)));        n.addContent(makeParameter("outputtype" + o,"" + node.getOutputTypeString(o)));        n.addContent(makeParameter("outputlength" + o,"" + node.getOutputLength(o)));      }    } else     if (node.getNodeType() == AcelaNode.YM) {      for (int o=0; o < 16; o++) {        n.addContent(makeParameter("outputwired" + o,"" + node.getOutputWiredString(o)));        n.addContent(makeParameter("outputinit" + o,"" + node.getOutputInitString(o)));        n.addContent(makeParameter("outputtype" + o,"" + node.getOutputTypeString(o)));        n.addContent(makeParameter("outputlength" + o,"" + node.getOutputLength(o)));      }    } else     if (node.getNodeType() == AcelaNode.SY) {      for (int s=0; s < 16; s++) {        n.addContent(makeParameter("sensortype" + s,"" + node.getSensorTypeString(s)));        n.addContent(makeParameter("sensorpolarity" + s,"" + node.getSensorPolarityString(s)));        n.addContent(makeParameter("sensorthreshold" + s,"" + node.getSensorThreshold(s)));      }    }    node=(AcelaNode)((jmri.jmrix.acela.serialdriver.SerialDriverAdapter)adapter).getSystemConnectionMemo().getTrafficController().getNode(index);    index++;  }}  }
class C{  public static IJavaElement handleToElement(final String project,final String handle){  return handleToElement(project,handle,true);}  }
class C{  @SuppressWarnings("unchecked") @Override public void publish(final Object event){  final Collection<Consumer<?>> matchedConsumers=getConsumersForType(event);  for (  final Consumer<?> consumer : matchedConsumers) {    final Object filter=consumerFilters.get(consumer);    try {      if (filter == null) {        notifyConsumer((Consumer<Object>)consumer,event);      } else       if (event instanceof IFilterableEvent && filter.equals(((IFilterableEvent)event).getFilter())) {        notifyConsumer((Consumer<Object>)consumer,event);      }    } catch (    final ClassCastException e) {      logger.warn("Consumer {} can't accept events of type = {}",consumer,event.getClass(),e);    }  }}  }
class C{  public RStarTreeNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,SpatialEntry.class);}  }
class C{  private static String buildHeader(){  if (header == null) {    StringBuilder strb=new StringBuilder();    strb.append(LEFT_BRACE);    strb.append(SELENIUM_VERSION_KEY);    strb.append(COLON);    strb.append(SELENIUM_VERSION_VALUE);    strb.append(COMMA);    strb.append(FORMAT_VERSION_KEY);    strb.append(COLON);    strb.append(FORMAT_VERSION_VALUE);    strb.append(COMMA);    strb.append(STEPS_KEY);    strb.append(COLON);    strb.append(LEFT_SQUARE_BRACKET);    header=strb.toString();  }  return header;}  }
class C{  public ParsedGraphQuery(TupleExpr tupleExpr,Map<String,String> namespaces){  this(tupleExpr);  queryNamespaces=namespaces;}  }
class C{  public boolean nextBoolean(float probability){  if (probability < 0.0f || probability > 1.0f)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0f)   return false; else   if (probability == 1.0f)   return true;  return nextFloat() < probability;}  }
class C{  public boolean isSnapshotableIndex(){  return snapshotableIdx;}  }
class C{  private String buildCompactRespresentation(String... components){  StringBuilder builder=new StringBuilder();  for (int componentCount=0; componentCount < components.length; componentCount++) {    builder.append(components[componentCount]);    if (componentCount != components.length - 1) {      builder.append(".");    }  }  return builder.toString();}  }
class C{  public AddressSpace createAddressSpace(final String name) throws CouldntSaveDataException, CouldntLoadDataException {  if (!isLoaded()) {    throw new IllegalStateException("Error: The address space has not yet been loaded");  }  try {    final CAddressSpace addressSpace=m_project.getContent().createAddressSpace(name);    return ObjectFinders.getObject(addressSpace,m_addressSpaces);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public boolean hasFixedCascadedValues(){  return fixedCascadedValues;}  }
class C{  public void configure(){  log.info("Generic Serial ports have to be configured by the\n" + "operating system (via startup script)");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.556 -0500",hash_original_method="58582EEB8BE4D233D0E7915A49A3AF70",hash_generated_method="070C2477A678FF92D3E830DC377C79A5") protected final void removeMessages(int what){  mSmHandler.removeMessages(what);}  }
class C{  public StateHolder(State<S,E> state){  this.state=state;}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  processBytes(in,inOff,blockSize,out,outOff);  return blockSize;}  }
class C{  @Override public BigDataPMemAllocator disableActiveGC(){  m_activegc=false;  return this;}  }
class C{  public static void hideSoftInPut(View view,Context context){  InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(view.getWindowToken(),0);}  }
class C{  public void timesEquals(Rational R){  N.timesEquals(R.N);  D.timesEquals(R.D);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","jlbtc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Override public WorldWindow createWorldWindow(){  WorldWindow wwd=super.createWorldWindow();  ShowTessellationLayer layer=new ShowTessellationLayer();  wwd.getLayers().addLayer(layer);  return wwd;}  }
class C{  public boolean isOverclockerUpgradable(){  return false;}  }
class C{  public static byte[] readFileContent(String filename){  File file=new File(filename);  if (!file.exists()) {    return null;  }  int offset=0;  int numRead=0;  int size=(int)file.length();  byte[] res=new byte[size];  try {    InputStream is=new FileInputStream(file);    try {      while ((offset < size) && numRead > -1) {        numRead=is.read(res,offset,size - offset);        offset+=numRead;      }    }  finally {      is.close();    }  } catch (  IOException e) {    logger.warn(e,e);    return null;  }  return res;}  }
class C{  public static void printLabels(PrintStream out,Path imagePath,List<EntityAnnotation> labels){  out.printf("Labels for image %s:\n",imagePath);  for (  EntityAnnotation label : labels) {    out.printf("\t%s (score: %.3f)\n",label.getDescription(),label.getScore());  }  if (labels.isEmpty()) {    out.println("\tNo labels found.");  }}  }
class C{  @Override public Object readObject() throws IOException {  return readObject(0);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SASSIGNMENT__VALUE:    setValue((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private static Address GetStringChars(JNIEnvironment env,int strJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetStringChars  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  String str=(String)env.getJNIRef(strJREF);  char[] strChars=java.lang.JikesRVMSupport.getBackingCharArray(str);  int strOffset=java.lang.JikesRVMSupport.getStringOffset(str);  int len=java.lang.JikesRVMSupport.getStringLength(str);  Address copyBuffer=sysCall.sysMalloc(len * 2);  if (copyBuffer.isZero()) {    env.recordException(new OutOfMemoryError());    return Address.zero();  }  try {    Address strBase=Magic.objectAsAddress(strChars);    Address srcBase=strBase.plus(strOffset * 2);    Memory.memcopy(copyBuffer,srcBase,len * 2);    JNIGenericHelpers.setBoolStar(isCopyAddress,true);    return copyBuffer;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    sysCall.sysFree(copyBuffer);    return Address.zero();  }}  }
class C{  public static WeChatFragment newInstance(int sectionNumber){  WeChatFragment fragment=new WeChatFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  protected boolean isAllTestComponentsInTarget(Geometry testGeom){  List coords=ComponentCoordinateExtracter.getCoordinates(testGeom);  for (Iterator i=coords.iterator(); i.hasNext(); ) {    Coordinate p=(Coordinate)i.next();    int loc=targetPointLocator.locate(p);    if (loc == Location.EXTERIOR)     return false;  }  return true;}  }
class C{  public SectorRangeFan(String sidc){  super(sidc);}  }
class C{  public void processTuple(String line) throws ParseException {  String url;  String httpStatusCode;  long numOfBytes;  String referer;  String agent;  String ipAddr;  String serverName;  Pattern accessLogPattern=Pattern.compile(getAccessLogRegex(),Pattern.CASE_INSENSITIVE | Pattern.DOTALL);  Matcher accessLogEntryMatcher;  accessLogEntryMatcher=accessLogPattern.matcher(line);  if (accessLogEntryMatcher.matches()) {    serverName=accessLogEntryMatcher.group(1);    ipAddr=accessLogEntryMatcher.group(2);    url=accessLogEntryMatcher.group(6);    httpStatusCode=accessLogEntryMatcher.group(7);    numOfBytes=Long.parseLong(accessLogEntryMatcher.group(8));    referer=accessLogEntryMatcher.group(9);    agent=accessLogEntryMatcher.group(10);    outputIPAddress.emit(ipAddr);    outputUrl.emit(url);    outputStatusCode.emit(httpStatusCode);    Map<String,Integer> ipdata=new HashMap<String,Integer>();    ipdata.put(ipAddr,(int)numOfBytes);    outputBytes.emit(ipdata);    outputReferer.emit(referer);    outputAgent.emit(agent);    outputServerName.emit(serverName);    outputServerName1.emit(serverName);    HashMap<String,String> urlStatus=new HashMap<String,String>();    urlStatus.put(url,httpStatusCode);    outUrlStatus.emit(urlStatus);    HashMap<String,String> serverStatus=new HashMap<String,String>();    serverStatus.put(serverName,httpStatusCode);    outServerStatus.emit(serverStatus);    clientDataUsage.emit((int)numOfBytes);    viewCount.emit(new Integer(1));  }}  }
class C{  public void testOAEPProvider() throws Exception {  AlgorithmParameters params=AlgorithmParameters.getInstance("OAEP");  assertEquals("Algorithm","OAEP",params.getAlgorithm());}  }
class C{  public boolean contains(String user){  return getEntry(user) != null;}  }
class C{  protected void updatePattern(int i){  if (updatePattern != null) {    updatePattern[i]=true;  }  likelihoodKnown=false;}  }
class C{  public int size(final String stack){  Stack s=getStack(stack);  if (s == null)   return -1;  return s.size();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.800 -0500",hash_original_method="058E2AA05CCDB81429F1E94E1527F7B6",hash_generated_method="69A5F55463B1296017A10AC41D0F057D") public AttributeCertificateHolder(int digestedObjectType,String digestAlgorithm,String otherObjectTypeID,byte[] objectDigest){  holder=new Holder(new ObjectDigestInfo(digestedObjectType,otherObjectTypeID,new AlgorithmIdentifier(digestAlgorithm),Arrays.clone(objectDigest)));}  }
class C{  int method(String s){}  }
class C{  public String toString(){  SimpleSelector s=getSimpleSelector();  if (s.getSelectorType() == SAC_PSEUDO_ELEMENT_SELECTOR) {    return String.valueOf(getAncestorSelector()) + s;  }  return getAncestorSelector() + " > " + s;}  }
class C{  public void addDecorators(Collection<? extends DayViewDecorator> decorators){  if (decorators == null) {    return;  }  dayViewDecorators.addAll(decorators);  adapter.setDecorators(dayViewDecorators);}  }
class C{  public Long zadd(final byte[] key,final double score,final byte[] member){  checkIsInMulti();  client.zadd(key,score,member);  return client.getIntegerReply();}  }
class C{  private boolean isFoldingPossible(int startOffset,int endOffset){  Document document=myEditor.getDocument();  if (startOffset >= document.getTextLength()) {    return false;  }  int endOffsetToUse=Math.min(endOffset,document.getTextLength());  if (endOffsetToUse <= startOffset) {    return false;  }  if (document.getLineNumber(startOffset) != document.getLineNumber(endOffsetToUse)) {    return true;  }  return myEditor.getSettings().isAllowSingleLogicalLineFolding() && !myEditor.getSoftWrapModel().getSoftWrapsForRange(startOffset,endOffsetToUse).isEmpty();}  }
class C{  public static ObjectMetadata parseObjectMetadata(Map<String,String> headers) throws IOException {  try {    ObjectMetadata objectMetadata=new ObjectMetadata();    for (Iterator<String> it=headers.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      if (key.indexOf(OSSHeaders.OSS_USER_METADATA_PREFIX) >= 0) {        objectMetadata.addUserMetadata(key,headers.get(key));      } else       if (key.equals(OSSHeaders.LAST_MODIFIED) || key.equals(OSSHeaders.DATE)) {        try {          objectMetadata.setHeader(key,DateUtil.parseRfc822Date(headers.get(key)));        } catch (        ParseException pe) {          throw new IOException(pe.getMessage(),pe);        }      } else       if (key.equals(OSSHeaders.CONTENT_LENGTH)) {        Long value=Long.valueOf(headers.get(key));        objectMetadata.setHeader(key,value);      } else       if (key.equals(OSSHeaders.ETAG)) {        objectMetadata.setHeader(key,trimQuotes(headers.get(key)));      } else {        objectMetadata.setHeader(key,headers.get(key));      }    }    return objectMetadata;  } catch (  Exception e) {    throw new IOException(e.getMessage(),e);  }}  }
class C{  public static boolean checkSu(){  if (!new File("/system/bin/su").exists() && !new File("/system/xbin/su").exists()) {    Log.e(TAG,"su does not exist!!!");    return false;  }  try {    new CMDProcessor();    CommandResult commandResult=CMDProcessor.runSuCommand("ls /data/app-private");    if (commandResult.success()) {      Log.i(TAG," SU exists and we have permission");      return true;    } else {      Log.i(TAG," SU exists but we dont have permission");      return false;    }  } catch (  final NullPointerException e) {    Log.e(TAG,e.getLocalizedMessage().toString());    return false;  }}  }
class C{  @Override public void activateGroupClones(StorageSystem storage,List<URI> clones,TaskCompleter taskCompleter){  try {    _log.info("activateGroupClones operation START");    Volume cloneObj=_dbClient.queryObject(Volume.class,clones.get(0));    if (cloneObj.getSyncActive()) {      _log.warn("Trying to activate CG clone, which is already active",cloneObj.getId().toString());      return;    }    Volume sourceVolume=_dbClient.queryObject(Volume.class,cloneObj.getAssociatedSourceVolume());    boolean isSuccess=VmaxGroupOperationsUtils.activateGroupReplicas(storage,sourceVolume,cloneObj,SYNC_TYPE.CLONE,taskCompleter,_dbClient,_helper,_cimPath);    if (isSuccess) {      List<Volume> cloneList=new ArrayList<Volume>();      for (      URI clone : clones) {        Volume theClone=_dbClient.queryObject(Volume.class,clone);        theClone.setSyncActive(true);        theClone.setRefreshRequired(true);        theClone.setReplicaState(ReplicationState.SYNCHRONIZED.name());        cloneList.add(theClone);      }      _dbClient.persistObject(cloneList);      taskCompleter.ready(_dbClient);    }  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  } finally {    _log.info("activateGroupClones operation END");  }}  }
class C{  public XObject operate(XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(-right.num());}  }
class C{  public ChannelSelectionManager(IChannelEventBroadcaster broadcaster){  mChannelEventBroadcaster=broadcaster;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.801 -0500",hash_original_method="31E51BFBE155FA06FC60503CF7989650",hash_generated_method="2D5C1ACFC7853CCB44D8E6BD90E832BB") static IconId retrieveIconId(ComprehensionTlv ctlv) throws ResultException {  IconId id=new IconId();  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  try {    id.selfExplanatory=(rawValue[valueIndex++] & 0xff) == 0x00;    id.recordNumber=rawValue[valueIndex] & 0xff;  } catch (  IndexOutOfBoundsException e) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }  return id;}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  public static Throwable shouldFailWithCause(Class clazz,Closure code){  Throwable th=null;  Throwable orig=null;  int level=0;  try {    code.call();  } catch (  GroovyRuntimeException gre) {    orig=ScriptBytecodeAdapter.unwrap(gre);    th=orig.getCause();  }catch (  Throwable e) {    orig=e;    th=orig.getCause();  }  while (th != null && !clazz.isInstance(th) && th != th.getCause() && level < MAX_NESTED_EXCEPTIONS) {    th=th.getCause();    level++;  }  if (orig == null) {    fail("Closure " + code + " should have failed with an exception caused by type "+ clazz.getName());  } else   if (th == null || !clazz.isInstance(th)) {    fail("Closure " + code + " should have failed with an exception caused by type "+ clazz.getName()+ ", instead found these Exceptions:\n"+ buildExceptionList(orig));  }  return th;}  }
class C{  public void reset(){  mCodes.clear();  mIsFirstCharCapitalized=false;  mPreferredWord=null;  mTypedWord.setLength(0);  mCapsCount=0;}  }
class C{  public boolean isDebugEnabled(){  return isEnabled(TraceSystem.DEBUG);}  }
class C{  public BERoundBorder(int thickness){  this(defaultLineColor,thickness);}  }
class C{  public static Frame from(final ByteBuffer byteBuffer){  return POOL.acquireFrame(byteBuffer);}  }
class C{  public void putByte(String key,byte value){  unparcel();  mMap.put(key,value);}  }
class C{  public static String constructHashRedisKeyPrefix(String queueName,String shardName){  return String.format("%s_%s_%s.",PINLATER_JOB_HASH_KEY_PREFIX,shardName,queueName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.977 -0500",hash_original_method="499AAA3E1602997D93E7C4E818F2EBAC",hash_generated_method="56B3257CD43C9AE77956052668F54BA9") public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  throw new RejectedExecutionException("Task " + r.toString() + " rejected from "+ e.toString());}  }
class C{  public void reverse(){  Collections.reverse(index);}  }
class C{  protected void closeDialog(){  if (m_FileChooser instanceof Container) {    Dialog dlg=PropertyDialog.getParentDialog((Container)m_FileChooser);    if (dlg != null)     dlg.setVisible(false);  }}  }
class C{  public boolean compatible(int begin,int end){  if (begin >= firstZero) {    BitSet pattern=new BitSet();    pattern.set(begin - firstZero,end - firstZero);    return !bits.intersects(pattern);  }  return false;}  }
class C{  public PubsubFuture<List<String>> publish(final String project,final String topic,final Message... messages){  return publish(project,topic,asList(messages));}  }
class C{  public synchronized void createRegion(){  RegionCreateFunction atcf=new RegionCreateFunction();  java.util.List<Object> inputList=new java.util.ArrayList<Object>();  inputList.add(geodeRegionName);  inputList.add(true);  Execution members=FunctionService.onServers(clientCache.getDefaultPool()).withArgs(inputList);  members.execute(atcf.getId()).getResult();}  }
class C{  public TestHttpsServer(HttpCallback cb,int threads,int cperthread,int port) throws IOException {  schan=ServerSocketChannel.open();  InetSocketAddress addr=new InetSocketAddress(port);  schan.socket().bind(addr);  this.threads=threads;  this.cb=cb;  this.cperthread=cperthread;  try {    KeyStore ks=KeyStore.getInstance("JKS");    KeyStore ts=KeyStore.getInstance("JKS");    char[] passphrase="passphrase".toCharArray();    ks.load(new FileInputStream(System.getProperty("javax.net.ssl.keyStore")),passphrase);    ts.load(new FileInputStream(System.getProperty("javax.net.ssl.trustStore")),passphrase);    KeyManagerFactory kmf=KeyManagerFactory.getInstance("SunX509");    kmf.init(ks,passphrase);    TrustManagerFactory tmf=TrustManagerFactory.getInstance("SunX509");    tmf.init(ts);    sslCtx=SSLContext.getInstance("TLS");    sslCtx.init(kmf.getKeyManagers(),tmf.getTrustManagers(),null);    servers=new Server[threads];    for (int i=0; i < threads; i++) {      servers[i]=new Server(cb,schan,cperthread);      servers[i].start();    }  } catch (  Exception ex) {    throw new RuntimeException("test failed. cause: " + ex.getMessage());  }}  }
class C{  public AxisLayout(String group,String field,int axis,Predicate filter){  this(group,field,axis);  setFilter(filter);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void removeCellEditorListener(CellEditorListener l){  realEditor.removeCellEditorListener(l);}  }
class C{  @Deprecated public InputDialog(String key,String text,Object... arguments){  this(ApplicationFrame.getApplicationFrame(),key,text,arguments);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().setFullScreen(evalBool(stack.pop()));  return null;}  }
class C{  private void createTitle(final boolean hasIcon){  final Label label=new Label(this.composite,SWT.NONE);  label.setText(this.title);  label.setFont(getBiggerFont());  label.setForeground(getTitleColor());  label.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));  final GridData gd=new GridData(GridData.BEGINNING,GridData.BEGINNING,false,false,1,1);  if (hasIcon) {    gd.horizontalIndent=INDENT_NO_ICON;  } else {    gd.horizontalIndent=DEFAULT_MARGIN;    gd.verticalIndent=DEFAULT_MARGIN;  }  label.setLayoutData(gd);}  }
class C{  public DTSweepConstraint(TriangulationPoint p1,TriangulationPoint p2){  p=p1;  q=p2;  if (p1.getY() > p2.getY()) {    q=p1;    p=p2;  } else   if (p1.getY() == p2.getY()) {    if (p1.getX() > p2.getX()) {      q=p1;      p=p2;    } else     if (p1.getX() == p2.getX()) {      logger.info("Failed to create constraint {}={}",p1,p2);    }  }  q.addEdge(this);}  }
class C{  public void test_addressingContiguous(){  final Journal store=(Journal)getStore();  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final int cSlotSize=128;    final int cAllocSize=99;    long pap=rw.physicalAddress(rw.alloc(cAllocSize,null));    for (int i=0; i < 500000; i++) {      final int a=rw.alloc(cAllocSize,null);      final long pa=rw.physicalAddress(a);      if (pa != (pap + cSlotSize)) {        rw.physicalAddress(a);        fail("Non-Contiguous slots: " + i + ", "+ pa+ "!="+ (pap + cSlotSize));      }      pap=pa;    }    store.commit();    final StringBuilder sb=new StringBuilder();    rw.showAllocators(sb);    log.warn(sb.toString());  }  finally {    store.destroy();  }}  }
class C{  public String doNotPrintModelsTipText(){  return "Do not print the individual trees in the output";}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isRMIoverHTTP(){  Object oo=get_Value(COLUMNNAME_IsRMIoverHTTP);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Mercator(){  super(new BoundingBox(new Coord(-SIZE,-SIZE,true),new Coord(SIZE,SIZE,true)));}  }
class C{  protected AbstractXYItemLabelGenerator(String formatString,NumberFormat xFormat,DateFormat yFormat){  this(formatString,xFormat,NumberFormat.getInstance());  this.yDateFormat=yFormat;}  }
class C{  @Override final public boolean isRemoteService(){  return false;}  }
class C{  protected void doNewState(int oldState,int newState){  SerialNode mNode=(SerialNode)SerialAddress.getNodeFromSystemName(getSystemName(),_memo.getTrafficController());  if (mNode != null) {    if (newState == ON) {      mNode.setOutputBit(mBit,false);    } else     if (newState == OFF) {      mNode.setOutputBit(mBit,true);    } else {      log.warn("illegal state requested for Light: " + getSystemName());    }  }}  }
class C{  public DemoModule(SwingSet2 swingset){  this(swingset,null,null);}  }
class C{  private void checkWebScriptsSupport(){  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_developer_key);  final Preference prefWebScripts=findPreferenceByResId(R.string.pref_web_scripts_key);  if (prefWebScripts != null) {    category.removePreference(prefWebScripts);  }}  }
class C{  @Override public int hashCode(){  return methodType.hashCode();}  }
class C{  public static long parseLong(String text){  try {    return Long.parseLong(text);  } catch (  NumberFormatException e) {    return 0;  }}  }
class C{  public int onSameSide(Vec4[] pts){  if (pts == null) {    String message=Logging.getMessage("nullValue.PointsArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double d=this.distanceTo(pts[0]);  int side=d < 0 ? -1 : d > 0 ? 1 : 0;  if (side == 0)   return 0;  for (int i=1; i < pts.length; i++) {    if (pts[i] == null) {      String message=Logging.getMessage("nullValue.PointIsNull");      Logging.logger().severe(message);      throw new IllegalArgumentException(message);    }    d=this.distanceTo(pts[i]);    if ((side == -1 && d < 0) || (side == 1 && d > 0))     continue;    return 0;  }  return side;}  }
class C{  public void handleInput(char c){switch (c) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':    m_display+=c;  break;case '.':case ',':m_display+=m_decimal;break;case '/':case '*':case '-':case '+':case '%':if (m_display.length() > 0) {char last=m_display.charAt(m_display.length() - 1);if (OPERANDS.indexOf(last) == -1) m_display+=c; else m_display=m_display.substring(0,m_display.length() - 1) + c;}m_display=m_format.format(evaluate());if (c != '%') m_display+=c;break;case 'C':if (m_display.length() > 0) m_display=m_display.substring(0,m_display.length() - 1);break;case 'A':m_display="";break;case '$':m_display=m_format.format(evaluate());toggleCurrency();break;case '=':m_display=m_format.format(evaluate());m_abort=false;if (isDisposeOnEqual()) dispose();break;default :ADialog.beep();break;}if (m_display.equals("")) m_display="0";if (m_display.length() > 1 && m_display.startsWith("0")) if (m_display.charAt(1) != ',' && m_display.charAt(1) != '.') m_display=m_display.substring(1);display.setText(m_display);}  }
class C{  private void triggerSettingsListener(String key,String value){  List<ISettingsListener> listenersForKey=listenersByKey.get(key);  if (listenersForKey != null) {    for (    ISettingsListener listener : listenersForKey) {      listener.settingsValueChanged(key,value);    }  }}  }
class C{  public static Number plus(Number left,Number right){  return NumberMath.add(left,right);}  }
class C{  @Override public String toString(){  if (stackTrace == null) {    return super.toString();  }  return stackTrace;}  }
class C{  public boolean subsumes(Object general,Object specific){  RecordType G=(RecordType)general;  RecordType S=(RecordType)specific;  for (Iterator<String> i=G.getDimensionNames(); i.hasNext(); ) {    HGProjection p=G.getProjection(i.next());    HGProjection p2=S.getProjection(p.getName());    if (p2 == null || !p.getType().equals(p2.getType()))     return false;  }  return true;}  }
class C{  protected static PreparedStatement bindParameters(PreparedStatement statement,Object... params) throws SQLException {  int paramSize=params.length;  for (int i=1; i <= paramSize; i++) {    Object param=params[i - 1];    if (param instanceof java.lang.Integer) {      statement.setInt(i,(Integer)param);    } else     if (param instanceof java.lang.String) {      statement.setString(i,(String)param);    } else     if (param instanceof java.lang.Float) {      statement.setFloat(i,(Float)param);    } else     if (param instanceof java.lang.Long) {      statement.setLong(i,(Long)param);    } else     if (param instanceof java.lang.Double) {      statement.setDouble(i,(Double)param);    } else     if (param instanceof java.sql.Date) {      statement.setDate(i,(Date)param);    } else {      statement.setObject(i,param);    }  }  return statement;}  }
class C{  public MyImageIcon(String filename){  super(filename);}  }
class C{  public synchronized void remove(int index){  XYEntry<Double,Double> removedEntry=mXY.removeByIndex(index);  double removedX=removedEntry.getKey();  double removedY=removedEntry.getValue();  if (removedX == mMinX || removedX == mMaxX || removedY == mMinY || removedY == mMaxY) {    initRange();  }}  }
class C{  @Override public int hashCode(){  return (new Double(maximum)).hashCode() - (new Double(minimum)).hashCode();}  }
class C{  public EnhancedTextField(String textWhenNotFocused){  this(textWhenNotFocused,null);}  }
class C{  public DrawingColorChooserAction(DrawingEditor editor,AttributeKey<Color> key,@Nullable String name){  this(editor,key,name,null);}  }
class C{  DigestIntegrity(boolean clientMode) throws SaslException {  try {    generateIntegrityKeyPair(clientMode);  } catch (  UnsupportedEncodingException e) {    throw new SaslException("DIGEST-MD5: Error encoding strings into UTF-8",e);  }catch (  IOException e) {    throw new SaslException("DIGEST-MD5: Error accessing buffers " + "required to create integrity key pairs",e);  }catch (  NoSuchAlgorithmException e) {    throw new SaslException("DIGEST-MD5: Unsupported digest " + "algorithm used to create integrity key pairs",e);  }  intToNetworkByteOrder(1,messageType,0,2);}  }
class C{  public Matrix[] forwardPass(double X_[][]){  int numW=W.length;  Matrix Z[]=new Matrix[numW + 1];  Z[0]=new Matrix(MatrixUtils.addBias(X_));  int i=1;  for (i=1; i < numW; i++) {    if (getDebug())     System.out.print("DO: [" + i + "] "+ MatrixUtils.getDim(Z[i - 1].getArray())+ " * "+ MatrixUtils.getDim(W[i - 1].getArray())+ " => ");    Matrix A_z=Z[i - 1].times(W[i - 1]);    Z[i]=MatrixUtils.sigma(A_z);    Z[i]=MatrixUtils.addBias(Z[i]);    if (getDebug())     System.out.println("==: " + MatrixUtils.getDim(A_z.getArray()));  }  if (getDebug())   System.out.print("DX: [" + i + "] "+ MatrixUtils.getDim(Z[i - 1].getArray())+ " * "+ MatrixUtils.getDim(W[i - 1].getArray())+ " => ");  Matrix A_y=Z[i - 1].times(W[i - 1]);  if (getDebug())   System.out.println("==: " + MatrixUtils.getDim(A_y.getArray()));  Z[numW]=MatrixUtils.sigma(A_y);  return Z;}  }
class C{  public final void clear(){  final int bgR=(int)(this.backgroundCol >> 16);  final int bgG=(int)((this.backgroundCol >> 8) & 0xff);  final int bgB=(int)(this.backgroundCol & 0xff);  if (this.frame == null) {    final Graphics2D gr=this.image.createGraphics();    Color c=new Color(bgR,bgG,bgB);    gr.setBackground(c);    gr.clearRect(0,0,this.width,this.height);    gr.setColor(c);    gr.fillRect(0,0,this.width,this.height);  } else {    int p=0;    for (int i=0; i < width; i++) {      this.frame[p++]=(byte)bgR;      this.frame[p++]=(byte)bgG;      this.frame[p++]=(byte)bgB;    }    final int rw=width * 3;    for (int i=1; i < height; i++) {      System.arraycopy(this.frame,0,this.frame,i * rw,rw);    }  }}  }
class C{  public Matrix4x3d sub(Matrix4x3dc subtrahend){  return sub(subtrahend,this);}  }
class C{  public static void showInformation(final Component parent,final String msg){  CMessageBox.showInformation(parent,msg);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.716 -0400",hash_original_method="B1FC8025A53E034082D8F586CBC4D3DF",hash_generated_method="DB7EBCB4A1B3D823FC7B0FF66BB9C85C") public XmlStreamReaderException(String msg,String bomEnc,String xmlGuessEnc,String xmlEnc){  this(msg,null,null,bomEnc,xmlGuessEnc,xmlEnc);}  }
class C{  public void searchStarted(String searchString){  Enumeration e=bg.getElements();  String value=null;  while (e.hasMoreElements()) {    AbstractButton button=(AbstractButton)e.nextElement();    if (button.isSelected()) {      value=button.getText();    }  }  for (  TreeViewer.TextSearchType searchType : TreeViewer.TextSearchType.values()) {    if (searchType.toString().equals(value)) {      treeViewer.selectTaxa(searchType,searchString,false);    }  }}  }
class C{  public static MPackage create(MInOut shipment,MShipper shipper,Timestamp shipDate){  MPackage retValue=new MPackage(shipment,shipper);  if (shipDate != null)   retValue.setShipDate(shipDate);  retValue.saveEx();  MInOutLine[] lines=shipment.getLines(false);  for (int i=0; i < lines.length; i++) {    MInOutLine sLine=lines[i];    MPackageLine pLine=new MPackageLine(retValue);    pLine.setInOutLine(sLine);    pLine.saveEx();  }  return retValue;}  }
class C{  @Override public ServiceHost start() throws Throwable {  super.start();  LuceneDocumentIndexService.setSearcherCountThreshold(INDEX_SEARCHER_COUNT_THRESHOLD);  this.getClient().setConnectionLimitPerHost(DEFAULT_CONNECTION_LIMIT_PER_HOST);  startDefaultCoreServicesSynchronously();  ServiceHostUtils.startServices(this,getFactoryServices());  for (  XenonServiceGroup xenonServiceGroup : xenonServiceGroups) {    xenonServiceGroup.start();  }  ServiceHostUtils.startService(this,StatusService.class);  return this;}  }
class C{  private void updateFont(String family,int style,int size){  console.setFont(new Font(family,style,size));}  }
class C{  static public boolean doesFileExist(Context c,String fileName,long fileSize,boolean deleteFileOnMismatch){  File fileForNewFile=new File(Helpers.generateSaveFileName(c,fileName));  if (fileForNewFile.exists()) {    if (fileForNewFile.length() == fileSize) {      return true;    }    if (deleteFileOnMismatch) {      fileForNewFile.delete();    }  }  return false;}  }
class C{  public boolean contains(int val){  return index(val) >= 0;}  }
class C{  public void testToArray1_BadArg(){  LinkedBlockingDeque q=populatedDeque(SIZE);  try {    q.toArray(new String[10]);    shouldThrow();  } catch (  ArrayStoreException success) {  }}  }
class C{  public String url(){  return getView() != null ? getView().getUrl() : "";}  }
class C{  @Override public Void call(){  List<ConsumedCapacity> batchResult=runWithBackoff(batch);  Iterator<ConsumedCapacity> it=batchResult.iterator();  int consumedCapacity=0;  while (it.hasNext()) {    consumedCapacity+=it.next().getCapacityUnits().intValue();  }  rateLimiter.acquire(consumedCapacity);  return null;}  }
class C{  public final Observable<Spanned> text(){  return mTextSubject.asObservable();}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  public Object parse(File file,String charset){  return parseFile(file,charset);}  }
class C{  @Override public void onResume(){  super.onResume();  loadDueCounts();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.258 -0500",hash_original_method="E1CECF835D0BD6DA840C10527C435227",hash_generated_method="8BC6D71D6B7864BBA3033121A0297448") public ConcurrentHashMap(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  segmentShift=32 - sshift;  segmentMask=ssize - 1;  this.segments=Segment.newArray(ssize);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=1;  while (cap < c)   cap<<=1;  for (int i=0; i < this.segments.length; ++i)   this.segments[i]=new Segment<K,V>(cap,loadFactor);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String outletHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outletHeader=args[1];  outputHeader=args[2];  if (inputHeader.isEmpty() || outputHeader.isEmpty() || outletHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster outlet;    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    if (outletHeader.toLowerCase().endsWith(".shp")) {      ArrayList<Double> outletXs=new ArrayList<>();      ArrayList<Double> outletYs=new ArrayList<>();      ShapeFile input=new ShapeFile(outletHeader);      if (input.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The input pour point vector should be \n" + "of a Point or MultiPoint ShapeType.");        return;      }      for (      ShapeFileRecord record : input.records) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      outletXs.add(vertices[0][0]);    outletYs.add(vertices[0][1]);  break;case POINTZ:PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();outletXs.add(vertices[0][0]);outletYs.add(vertices[0][1]);break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();outletXs.add(vertices[0][0]);outletYs.add(vertices[0][1]);break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int j=0; j < vertices.length; j++) {outletXs.add(vertices[j][0]);outletYs.add(vertices[j][1]);}break;}}outlet=new WhiteboxRaster(outletHeader.replace(".shp",".dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);outlet.isTemporaryFile=true;int numOutlets=outletXs.size();double outletX, outletY;int outletCol, outletRow;int outletNum=1;for (int a=0; a < numOutlets; a++) {outletX=outletXs.get(a);outletY=outletYs.get(a);outletRow=outlet.getRowFromYCoordinate(outletY);outletCol=outlet.getColumnFromXCoordinate(outletX);outlet.setValue(outletRow,outletCol,outletNum);outletNum++;}} else if (outletHeader.toLowerCase().endsWith(".dep")) {outlet=new WhiteboxRaster(outletHeader,"r");if (outlet.getNumberRows() != rows || outlet.getNumberColumns() != cols) {showFeedback("The input images must be of the same dimensions.");return;}} else {showFeedback("Unrecognized input outlets file type.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);output.setDataScale(WhiteboxRasterBase.DataScale.CATEGORICAL);output.setPreferredPalette("categorical1.pal");for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=outlet.getValue(row,col);if (z != 0 && z != noData) {output.setValue(row,col,z);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress("Loop 1 of 2:",(int)progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (output.getValue(row,col) == -999 && pntr.getValue(row,col) != noData) {flag=false;x=col;y=row;do {flowDir=pntr.getValue(y,x);if (flowDir > 0) {c=(int)(Math.log(flowDir) / LnOf2);x+=dX[c];y+=dY[c];z=output.getValue(y,x);if (z != -999) {outletID=z;flag=true;}} else {outletID=noData;flag=true;}} while (!flag);flag=false;x=col;y=row;output.setValue(y,x,outletID);do {flowDir=pntr.getValue(y,x);if (flowDir > 0) {c=(int)(Math.log(flowDir) / LnOf2);x+=dX[c];y+=dY[c];z=output.getValue(y,x);if (z != -999) {flag=true;}} else {flag=true;}output.setValue(y,x,outletID);} while (!flag);} else if (pntr.getValue(row,col) == noData) {output.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());pntr.close();outlet.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public List<Method> methods(Class<?> cls){  assert cls != null;  List<Method> mtdsList=mtds.get(cls);  if (mtdsList == null) {    mtdsList=new ArrayList<>();    for (Class<?> c=cls; c != null && !c.equals(Object.class); c=c.getSuperclass()) {      List<Method> l=new ArrayList<>();      for (      Method m : c.getDeclaredMethods()) {        if (mp == null || mp.apply(m)) {          m.setAccessible(true);          l.add(m);        }      }      if (!l.isEmpty()) {        Collections.sort(l,METHOD_NAME_COMPARATOR);        mtdsList.addAll(l);      }    }    mtds.putIfAbsent(cls,mtdsList);  }  return mtdsList;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.509 -0500",hash_original_method="2BE5C63CD6BB6072D8C1046433555060",hash_generated_method="5AD83F81760763EF512D2ACACD902724") private View fillSpecific(int position,int top){  final int numColumns=mNumColumns;  int motionRowStart;  int motionRowEnd=-1;  if (!mStackFromBottom) {    motionRowStart=position - (position % numColumns);  } else {    final int invertedSelection=mItemCount - 1 - position;    motionRowEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numColumns));    motionRowStart=Math.max(0,motionRowEnd - numColumns + 1);  }  final View temp=makeRow(mStackFromBottom ? motionRowEnd : motionRowStart,top,true);  mFirstPosition=motionRowStart;  final View referenceView=mReferenceView;  if (referenceView == null) {    return null;  }  final int verticalSpacing=mVerticalSpacing;  View above;  View below;  if (!mStackFromBottom) {    above=fillUp(motionRowStart - numColumns,referenceView.getTop() - verticalSpacing);    adjustViewsUpOrDown();    below=fillDown(motionRowStart + numColumns,referenceView.getBottom() + verticalSpacing);    final int childCount=getChildCount();    if (childCount > 0) {      correctTooHigh(numColumns,verticalSpacing,childCount);    }  } else {    below=fillDown(motionRowEnd + numColumns,referenceView.getBottom() + verticalSpacing);    adjustViewsUpOrDown();    above=fillUp(motionRowStart - 1,referenceView.getTop() - verticalSpacing);    final int childCount=getChildCount();    if (childCount > 0) {      correctTooLow(numColumns,verticalSpacing,childCount);    }  }  if (temp != null) {    return temp;  } else   if (above != null) {    return above;  } else {    return below;  }}  }
class C{  public void testSnowballListLoading() throws IOException {  String s="|comment\n" + " |comment\n" + "\n"+ "  \t\n"+ " |comment | comment\n"+ "ONE\n"+ "   two   \n"+ " three   four five \n"+ "six seven | comment\n";  CharArraySet wordset=WordlistLoader.getSnowballWordSet(new StringReader(s));  assertEquals(7,wordset.size());  assertTrue(wordset.contains("ONE"));  assertTrue(wordset.contains("two"));  assertTrue(wordset.contains("three"));  assertTrue(wordset.contains("four"));  assertTrue(wordset.contains("five"));  assertTrue(wordset.contains("six"));  assertTrue(wordset.contains("seven"));}  }
class C{  @Override public boolean handleMessage(SOAPMessageContext context){  Boolean request_p=(Boolean)context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);  if (request_p.booleanValue()) {    try {      SOAPMessage msg=context.getMessage();      SOAPEnvelope env=msg.getSOAPPart().getEnvelope();      SOAPHeader hdr=env.getHeader();      if (hdr == null) {        hdr=env.addHeader();      }      QName qname_user=new QName("http://com/auth/","auth");      SOAPHeaderElement helem_user=hdr.addHeaderElement(qname_user);      helem_user.setActor(VERSION);      if (version != null && version.trim().length() != 0) {        helem_user.addTextNode(version);      }      msg.saveChanges();      message=soapMessage2String(msg);    } catch (    Exception e) {      e.printStackTrace();    }  }  return true;}  }
class C{  private void updateModel(FloatMatrix u,Iterable<FloatMatrixMessage> messages,Vertex<CfLongId,FloatMatrixWritable,FloatWritable> vertex){  double tempdiff;  FloatMatrix uDelta=FloatMatrix.zeros(u.columns);  FloatMatrix partialOneDelta;  FloatMatrix partialTwoDelta=FloatMatrix.zeros(u.columns);  for (  FloatMatrixMessage msg : messages) {    FloatMatrix V_j=msg.getFactors();    float fij=u.dot(V_j);    partialOneDelta=V_j.mul(logf(-1.0f * fij));    for (    FloatMatrixMessage msginner : messages) {      FloatMatrix V_k=msginner.getFactors();      tempdiff=fij - u.dot(V_k);      partialTwoDelta=V_j.sub(V_k).mul(logfd(tempdiff) / (1 - logf(tempdiff)));    }    uDelta.addi(partialOneDelta);    uDelta.addi(partialTwoDelta);  }  uDelta.sub(u.mul(reg));  uDelta.mul(learnRate);  for (  FloatMatrixMessage msg : messages) {    FloatMatrix vDelta=FloatMatrix.zeros(u.columns);    FloatMatrix V_j=msg.getFactors();    CfLongId Itemid=msg.getSenderId();    float fij=u.dot(V_j);    float partialSumOne=logf(-1.0 * fij);    float partialSumTwo=0;    for (    FloatMatrixMessage msginner : messages) {      FloatMatrix V_k=msginner.getFactors();      tempdiff=fij - u.dot(V_k);      partialSumTwo+=logfd(tempdiff) * (1.0 / (1.0 - logf(-1.0 * tempdiff)) - 1.0 / (1.0 - logf(tempdiff)));    }    vDelta.add(u.mul(partialSumTwo + partialSumOne));    vDelta.add(V_j.mul(reg));    vDelta.mul(learnRate);    sendItemFactorsUpdate(Itemid,vertex.getId(),vDelta);  }  applyUpdate(uDelta,vertex);}  }
class C{  public void commitChanges(){  s_logger.log(Level.FINE,"commitChanges",getDirection());  try {    if (m_connection != null && !m_connection.getAutoCommit())     m_connection.commit();  } catch (  SQLException e) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"commitChangesError",new Object[]{getDirection(),e.getMessage()});  }  s_logger.log(Level.FINE,"changesComitted");  s_logger.flush();}  }
class C{  public static boolean hasVaryAll(Headers responseHeaders){  return varyFields(responseHeaders).contains("*");}  }
class C{  public void print(){  System.out.println(toString());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected Vertex createInput(String text,Network network){  Vertex sentence=network.createSentence(text);  Vertex input=network.createInstance(Primitive.INPUT);  input.setName(text);  input.addRelationship(Primitive.SENSE,getPrimitive());  input.addRelationship(Primitive.INPUT,sentence);  sentence.addRelationship(Primitive.INSTANTIATION,Primitive.POST);  return input;}  }
class C{  public UserIdNotFoundException(String message){  super(message);}  }
class C{  @Override public void run(){  this.run=true;}  }
class C{  public void loadEntry(){  loadCategories();  entry=retrieveSelectedEntry();}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void resumeTrigger(TriggerKey triggerKey) throws SchedulerException {  sched.resumeTrigger(triggerKey);}  }
class C{  public InstanceStatus dispatch() throws APPlatformException {  logger.debug("dispatch('{}', VMwarePropertyHandler) entered",instanceId);  InstanceStatus result=new InstanceStatus();  FlowState currentState=properties.getState();  logger.debug("  currentState=" + currentState.toString());  FlowState newState=null;  Stack stack;  String status;  String statusReason;  List<Server> servers=new ArrayList<Server>();  HashMap<String,Boolean> operationStatuses;  List<Server> successServers=new ArrayList<Server>();  List<Server> errorServers;  List<LocalizedText> messages=null;  String mail=properties.getMailForCompletion();  try {switch (currentState) {case CREATION_REQUESTED:      new HeatProcessor().createStack(properties);    newState=FlowState.CREATING_STACK;  break;case MODIFICATION_REQUESTED:new HeatProcessor().updateStack(properties);newState=FlowState.UPDATING;break;case DELETION_REQUESTED:new HeatProcessor().deleteStack(properties);newState=FlowState.DELETING_STACK;break;case START_REQUESTED:operationStatuses=new NovaProcessor().startInstances(properties);if (operationStatuses.containsValue(Boolean.TRUE)) {newState=FlowState.STARTING;messages=Messages.getAll("status_" + currentState);} else {properties.setStartTime("Timeout");stack=new HeatProcessor().getStackDetails(properties);result.setAccessInfo(getAccessInfo(stack));throw new APPlatformException(Messages.getAll("error_starting_failed"));}break;case STARTING:servers=new NovaProcessor().getServersDetails(properties);errorServers=new ArrayList<Server>();for (Server server : servers) {if (server.getStatus().equals(ServerStatus.ACTIVE.toString())) {successServers.add(server);}if (server.getStatus().equals(ServerStatus.ERROR.toString())) {errorServers.add(server);}}logger.debug(Integer.toString(successServers.size()) + " of " + Integer.toString(servers.size())+ " VMs started");logger.debug(Integer.toString(errorServers.size()) + " VMs are ERROR status");if (errorServers.size() == 0) {if (successServers.size() == servers.size()) {stack=new HeatProcessor().getStackDetails(properties);result.setAccessInfo(getAccessInfo(stack));newState=FlowState.FINISHED;} else {logger.info(FlowState.STARTING + " servers are not yet ready. " + Integer.toString(servers.size() - successServers.size())+ " VMs are not started. Nothing will be done.");messages=Messages.getAll("status_" + properties.getState(),Integer.toString(successServers.size()),Integer.toString(servers.size()));}} else {properties.setStartTime("Timeout");throw new APPlatformException(Messages.getAll("error_starting_failed"));}break;case STOP_REQUESTED:operationStatuses=new NovaProcessor().stopInstances(properties);if (operationStatuses.containsValue(Boolean.TRUE)) {newState=FlowState.STOPPING;messages=Messages.getAll("status_" + currentState);} else {stack=new HeatProcessor().getStackDetails(properties);result.setAccessInfo(getAccessInfo(stack));throw new APPlatformException(Messages.getAll("error_stopping_failed"));}break;case STOPPING:servers=new NovaProcessor().getServersDetails(properties);errorServers=new ArrayList<Server>();for (Server server : servers) {if (server.getStatus().equals(ServerStatus.SHUTOFF.toString())) {successServers.add(server);}if (server.getStatus().equals(ServerStatus.ERROR.toString())) {errorServers.add(server);}}logger.debug(Integer.toString(successServers.size()) + " of " + Integer.toString(servers.size())+ " VMs stopped");logger.debug(Integer.toString(errorServers.size()) + " VMs are ERROR status");if (successServers.size() == servers.size()) {stack=new HeatProcessor().getStackDetails(properties);result.setAccessInfo(getAccessInfo(stack));newState=FlowState.FINISHED;} else {logger.info(FlowState.STOPPING + " Servers is not yet ready" + Integer.toString(servers.size() - successServers.size())+ "VMs are not stopped. Nothing will be done.");messages=Messages.getAll("status_" + properties.getState(),Integer.toString(successServers.size()),Integer.toString(servers.size()));}break;case ACTIVATION_REQUESTED:boolean resuming=new HeatProcessor().resumeStack(properties);newState=resuming ? FlowState.ACTIVATING : FlowState.FINISHED;if (resuming) {result.setAccessInfo(Messages.get(properties.getCustomerLocale(),"accessInfo_NOT_AVAILABLE"));} else {stack=new HeatProcessor().getStackDetails(properties);result.setAccessInfo(getAccessInfo(stack));}break;case ACTIVATING:stack=new HeatProcessor().getStackDetails(properties);status=stack.getStatus();statusReason=stack.getStatusReason();logger.debug("Status of stack is: " + status);if (StackStatus.RESUME_COMPLETE.name().equals(status)) {result.setAccessInfo(getAccessInfo(stack));newState=FlowState.FINISHED;} else if (StackStatus.RESUME_FAILED.name().equals(status) && statusReason.contains("Failed to find instance")) {throw new InstanceNotAliveException(Messages.getAll("error_activating_failed_instance_not_found"));} else if (StackStatus.RESUME_FAILED.name().equals(status)) {throw new SuspendException(Messages.getAll("error_activating_failed",stack.getStatusReason()));} else {logger.info(FlowState.ACTIVATING + " Instance is not yet ready, status: " + status+ ". Nothing will be done.");}break;case DEACTIVATION_REQUESTED:boolean suspending=new HeatProcessor().suspendStack(properties);newState=suspending ? FlowState.DEACTIVATING : FlowState.FINISHED;result.setAccessInfo(Messages.get(properties.getCustomerLocale(),"accessInfo_NOT_AVAILABLE"));break;case DEACTIVATING:stack=new HeatProcessor().getStackDetails(properties);status=stack.getStatus();statusReason=stack.getStatusReason();logger.debug("Status of stack is: " + status);if (StackStatus.SUSPEND_COMPLETE.name().equals(status)) {result.setAccessInfo(Messages.get(properties.getCustomerLocale(),"accessInfo_NOT_AVAILABLE"));newState=FlowState.FINISHED;} else if (StackStatus.SUSPEND_FAILED.name().equals(status) && statusReason.contains("Failed to find instance")) {throw new InstanceNotAliveException(Messages.getAll("error_deactivating_failed_instance_not_found"));} else if (StackStatus.SUSPEND_FAILED.name().equals(status)) {throw new SuspendException(Messages.getAll("error_deactivating_failed",stack.getStatusReason()));} else {logger.info(FlowState.DEACTIVATING + " Instance is not yet ready, status: " + status+ ". Nothing will be done.");}break;case CREATING_STACK:stack=new HeatProcessor().getStackDetails(properties);status=stack.getStatus();if (StackStatus.CREATE_COMPLETE.name().equals(status)) {result.setAccessInfo(getAccessInfo(stack));if (mail != null) {newState=dispatchManualOperation(instanceId,properties,mail,StackStatus.CREATE_COMPLETE);} else {newState=FlowState.FINISHED;}} else if (StackStatus.CREATE_FAILED.name().equals(status)) {throw new AbortException(Messages.getAll("error_create_failed_customer"),Messages.getAll("error_create_failed_provider",stack.getStatusReason()));} else {logger.info(FlowState.CREATING_STACK + " Instance is not yet ready, status: " + status+ ". Nothing will be done.");}break;case UPDATING:stack=new HeatProcessor().getStackDetails(properties);status=stack.getStatus();if (StackStatus.UPDATE_COMPLETE.name().equals(status)) {result.setAccessInfo(getAccessInfo(stack));if (mail != null) {newState=dispatchManualOperation(instanceId,properties,mail,StackStatus.UPDATE_COMPLETE);} else {newState=FlowState.FINISHED;}} else if (StackStatus.UPDATE_FAILED.name().equals(status)) {throw new AbortException(Messages.getAll("error_update_failed_customer"),Messages.getAll("error_update_failed_provider",stack.getStatusReason()));} else {logger.info(FlowState.UPDATING + " Instance is not yet ready, status: " + status+ ". Nothing will be done.");}break;case DELETING_STACK:try {stack=new HeatProcessor().getStackDetails(properties);status=stack.getStatus();statusReason=stack.getStatusReason();if (StackStatus.DELETE_COMPLETE.name().equals(status) || (StackStatus.DELETE_FAILED.name().equals(status) && statusReason.contains("Failed to find instance"))) {if (mail != null) {newState=dispatchManualOperation(instanceId,properties,mail,StackStatus.DELETE_COMPLETE);} else {newState=FlowState.DESTROYED;}} else if (StackStatus.DELETE_FAILED.name().equals(status)) {throw new SuspendException(Messages.getAll("error_deleting_stack_failed",stack.getStatusReason()));} else {logger.info(FlowState.DELETING_STACK + " Instance is not yet ready, status: " + status+ ". Nothing will be done.");}} catch (HeatException e) {if (e.getResponseCode() != 404) {throw e;} else {if (mail != null) {newState=dispatchManualOperation(instanceId,properties,mail,StackStatus.DELETE_COMPLETE);} else {newState=FlowState.DESTROYED;}}}break;case FINISHED:stack=new HeatProcessor().getStackDetails(properties);status=stack.getStatus();if (StackStatus.CREATE_COMPLETE.name().equals(status)) {result.setAccessInfo(getAccessInfo(stack));}break;default :}} catch (APPlatformException e) {logger.warn("OpenStack platform reported error",e);throw e;}catch (HeatException e) {if (e.getResponseCode() < 0 || e.getResponseCode() == 401 || e.getResponseCode() == 504) {throw new SuspendException(e.getMessage(),e.getResponseCode());}if (e.getResponseCode() == 404) {if (FlowState.DEACTIVATION_REQUESTED == currentState || FlowState.DEACTIVATING == currentState) {throw new InstanceNotAliveException(Messages.getAll("error_deactivating_failed_instance_not_found"));} else if (FlowState.ACTIVATION_REQUESTED == currentState || FlowState.ACTIVATING == currentState) {throw new InstanceNotAliveException(Messages.getAll("error_activating_failed_instance_not_found"));}throw new AbortException(Messages.getAll("error_heat_resource_not_found",e.getMessage()),Messages.getAll("error_heat_resource_not_found",e.getMessage()));}throw new APPlatformException(e.getMessage());}catch (Exception e) {logger.error("Internal error while dispatching to OpenStack",e);throw new APPlatformException(e.getMessage());}if (newState != null) {logger.debug("  newState=" + newState.toString());properties.setState(newState);}result.setIsReady(properties.getState() == FlowState.FINISHED || properties.getState() == FlowState.DESTROYED);result.setRunWithTimer(properties.getState() != FlowState.MANUAL);if (messages == null) {messages=Messages.getAll("status_" + properties.getState());}result.setDescription(messages);result.setChangedParameters(properties.getSettings().getParameters());return result;}  }
class C{  public static IMouseStateChange enterNode(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo){  final Node n=hitInfo.getHitNode();  return new CStateChange(m_factory.createNodeEnterState(n,event),true);}  }
class C{  public TCharHash(int initialCapacity,float loadFactor,char no_entry_value){  super(initialCapacity,loadFactor);  this.no_entry_value=no_entry_value;  if (no_entry_value != (char)0) {    Arrays.fill(_set,no_entry_value);  }}  }
class C{  private void validateBusinessObjectDefinitionColumnUpdateRequest(BusinessObjectDefinitionColumnUpdateRequest request){  Assert.notNull(request,"A business object definition column update request must be specified.");}  }
class C{  public BasicStroke(Cap cap,Join join,float miter,float[] intervals,float phase){  mCap=cap;  mJoin=join;  mMiter=miter;  mIntervals=intervals;}  }
class C{  protected void sendMomentaryFunctionGroup3(){  if (log.isDebugEnabled()) {    log.debug("Momentary function request not supported by Elite.");  }  return;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public GSSHeader(InputStream is) throws IOException, GSSException {  int tag=is.read();  if (tag != TOKEN_ID)   throw new GSSException(GSSException.DEFECTIVE_TOKEN,-1,"GSSHeader did not find the right tag");  int length=getLength(is);  DerValue temp=new DerValue(is);  mechOidBytes=temp.toByteArray();  mechOid=temp.getOID();  mechTokenLength=length - mechOidBytes.length;}  }
class C{  static public void writeScript(final String script){  String output=">>> " + script;  while (output.endsWith("\n")) {    output=output.substring(0,output.length() - 1);  }  output=output.replaceAll("\n","\n... ");  output+="\n";  ScriptOutput.getDefault().getOutputArea().append(output);}  }
class C{  private static void generateMatrices(){  delayMatrix=new DelayMatrix_Float(graph,false);  bwMatrix=createBwMatrix(graph,false);  networkEnabled=true;}  }
class C{  public ECEFPoint(float x,float y,float z){  this((double)x,(double)y,(double)z);}  }
class C{  public Address plus(Extent extent){  return new Address(value.plus(extent.toLong()));}  }
class C{  public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_remove");  try {    byte[] result=removeFirst();    if (result == null) {      throw new NoSuchElementException();    }    return result;  }  finally {    time.stop();  }}  }
class C{  protected int next(int bits){  seed=(seed * multiplier + 0xbL) & ((1L << 48) - 1);  return (int)(seed >>> (48 - bits));}  }
class C{  public static <C>Class<? extends C> findImplementation(Class<? super C> restrictionClass,String value){  if (!contains(restrictionClass)) {    ELKIServiceLoader.load(restrictionClass);    ELKIServiceScanner.load(restrictionClass);  }  Entry e=data.get(restrictionClass);  int pos=-1;  Class<?> clazz=null;  if (e != null) {    for (pos=0; pos < e.len; pos++) {      if (e.names[pos].equals(value)) {        break;      }    }    if (pos < e.len) {      clazz=e.clazzes[pos];    } else {      pos=-1;    }  } else {    if (LOG.isDebuggingFinest()) {      LOG.debugFinest("Finding implementations for unregistered type: " + restrictionClass.getName() + " "+ value);    }  }  if (clazz == null) {    clazz=tryLoadClass(value + FACTORY_POSTFIX);    if (clazz == null) {      clazz=tryLoadClass(value);    }    if (clazz == null) {      clazz=tryLoadClass(restrictionClass.getPackage().getName() + "." + value+ FACTORY_POSTFIX);      if (clazz == null) {        clazz=tryLoadClass(restrictionClass.getPackage().getName() + "." + value);      }    }  }  if (clazz == null && e != null && e.aliaslen > 0) {    String value2=restrictionClass.getPackage().getName() + "." + value;    for (int i=0; i < e.aliaslen; i+=2) {      if (e.aliases[i].equalsIgnoreCase(value) || e.aliases[i].equalsIgnoreCase(value2)) {        clazz=findImplementation(restrictionClass,e.aliases[++i]);        break;      }    }  }  if (clazz == null) {    return null;  }  if (!restrictionClass.isAssignableFrom(clazz)) {    LOG.warning("Invalid entry in service file for class " + restrictionClass.getName() + ": "+ value);    clazz=FAILED_LOAD;  }  if (e != null) {    if (pos < 0) {      e.addHit(value,clazz);    } else {      assert (e.names[pos].equalsIgnoreCase(value));      e.clazzes[pos]=clazz;    }  }  if (clazz == FAILED_LOAD) {    return null;  }  @SuppressWarnings("unchecked") Class<? extends C> ret=(Class<? extends C>)clazz.asSubclass(restrictionClass);  return ret;}  }
class C{  public String toXML(){  StringBuilder buf=new StringBuilder();  buf.append("<error code=\"").append(code).append("\"");  if (type != null) {    buf.append(" type=\"");    buf.append(type.name());    buf.append("\"");  }  buf.append(">");  if (condition != null) {    buf.append("<").append(condition);    buf.append(" xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"/>");  }  if (message != null) {    buf.append("<text xml:lang=\"en\" xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\">");    buf.append(message);    buf.append("</text>");  }  for (  PacketExtension element : this.getExtensions()) {    buf.append(element.toXML());  }  buf.append("</error>");  return buf.toString();}  }
class C{  public TimeSeriesHandler(int nrOfTimeDocumentsPerBatch){  this.queue=new ArrayBlockingQueue<>(nrOfTimeDocumentsPerBatch);}  }
class C{  public int increaseWeight(){  return weight++;}  }
class C{  private static void println(String msg){}  }
class C{  private void stopClient(){  if (null != client) {    client.stop();  }}  }
class C{  public static boolean isBeingProvedObligation(ObligationStatus status){  int obState=status.getObligationState();  String[] proverStatuses=ColorPredicate.proverStatuses(obState);  for (int i=0; i < proverStatuses.length; i++) {    if (proverStatuses[i].equals(ColorPredicate.PROVING_STATUS)) {      return true;    }  }  return false;}  }
class C{  private static int isTodayOrTomorrow(Resources r,long dayMillis,long currentMillis,long localGmtOffset){  int startDay=Time.getJulianDay(dayMillis,localGmtOffset);  int currentDay=Time.getJulianDay(currentMillis,localGmtOffset);  int days=startDay - currentDay;  if (days == 1) {    return TOMORROW;  } else   if (days == 0) {    return TODAY;  } else {    return NONE;  }}  }
class C{  private void whitelistElements(){  for (  Map.Entry<RootKey,ElementMetadataRegistryBuilder> rootEntry : elements.entrySet()) {    ElementMetadataRegistryBuilder builder=rootEntry.getValue();    Map<TransformKey,Set<ElementKey<?,?>>> whitelistMap=Maps.newLinkedHashMap();    Map<TransformKey,ElementCreatorImpl> creators=builder.getCreators();    for (    Map.Entry<TransformKey,ElementCreatorImpl> entry : creators.entrySet()) {      TransformKey key=entry.getKey();      ElementCreatorImpl element=entry.getValue();      if (element.getElementWhitelist() != null) {        whitelistMap.put(key,element.getElementWhitelist());      }    }    for (    Map.Entry<TransformKey,Set<ElementKey<?,?>>> whitelistEntry : whitelistMap.entrySet()) {      TransformKey key=whitelistEntry.getKey();      Set<ElementKey<?,?>> whitelist=whitelistEntry.getValue();      Set<QName> whitelistNames=Sets.newHashSet();      for (      ElementKey<?,?> whitelistKey : whitelist) {        whitelistNames.add(whitelistKey.getId());      }      Set<ElementKey<?,?>> allChildren=Sets.newHashSet();      for (      Map.Entry<TransformKey,ElementCreatorImpl> entry : creators.entrySet()) {        if (entry.getKey().matches(key)) {          allChildren.addAll(entry.getValue().getElementSet());        }      }      if (!allChildren.containsAll(whitelist)) {        Set<ElementKey<?,?>> missing=Sets.newHashSet(whitelist);        missing.removeAll(allChildren);        throw new IllegalStateException("Missing children!  Whitelist specified " + missing + " but did not find those child elements.");      }      for (      ElementKey<?,?> child : allChildren) {        if (!whitelistNames.contains(child.getId())) {          ElementKey<?,?> parent=(ElementKey<?,?>)key.getKey();          build(parent,child,key.getContext()).setVisible(false);        }      }    }  }}  }
class C{  public void writeEntry(Location loc,float distFromNetLoc){  writeEntry(TrackerEntry.createEntry(loc,distFromNetLoc));}  }
class C{  @Override public boolean isSecure(){  return _socket.isSecure() || _port.isSecure();}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  DBIDs ids=relation.getDBIDs();  WritableDoubleDataStore store=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_DB);  DistanceQuery<O> distq=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnq=database.getKNNQuery(distq,k + 1);  KNNProcessor<O> knnm=new KNNProcessor<>(k + 1,knnq);  SharedObject<KNNList> knnv=new SharedObject<>();  knnm.connectKNNOutput(knnv);  KNNWeightProcessor kdistm=new KNNWeightProcessor(k + 1);  SharedDouble kdistv=new SharedDouble();  kdistm.connectKNNInput(knnv);  kdistm.connectOutput(kdistv);  WriteDoubleDataStoreProcessor storem=new WriteDoubleDataStoreProcessor(store);  storem.connectInput(kdistv);  DoubleMinMaxProcessor mmm=new DoubleMinMaxProcessor();  mmm.connectInput(kdistv);  ParallelExecutor.run(ids,knnm,kdistm,storem,mmm);  DoubleMinMax minmax=mmm.getMinMax();  DoubleRelation scoreres=new MaterializedDoubleRelation("kNN weight Outlier Score","knnw-outlier",store,ids);  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.,Double.POSITIVE_INFINITY,0.);  return new OutlierResult(meta,scoreres);}  }
class C{  public static Keyword createKeyword(String text,KeywordMatchType matchType){  Keyword keyword=new Keyword();  keyword.setMatchType(matchType);  keyword.setText(text);  return keyword;}  }
class C{  public static String longArrToHexBytes(long[] arr,String comment){  Memory mem=new NativeMemory(arr);  return memToHexBytes(mem,comment);}  }
class C{  public static boolean isUnspecified(final Command command){  return (command == null || command.isUnspecified());}  }
class C{  private static boolean actuallyExistsInReality(String highway,Way way){  return !("construction".equals(highway) || "abandoned".equals(highway) || "removed".equals(highway)|| "proposed".equals(highway)|| "propossed".equals(highway)|| "unbuilt".equals(highway)|| way.hasTag("construction")|| way.hasTag("proposed"));}  }
class C{  protected TableTuple newTuple(int row){  try {    TableTuple t=(TableTuple)m_tupleType.newInstance();    t.init(m_table,m_graph,row);    return t;  } catch (  Exception e) {    Logger.getLogger(getClass().getName()).warning(e.getMessage() + "\n" + StringLib.getStackTrace(e));    return null;  }}  }
class C{  void reset(){  state0=0;  state1=0;}  }
class C{  public void mouseReleased(MouseEvent e){  getHandler().mouseReleased(e);}  }
class C{  public static int appendLocalCodeNodeComment(final SQLProvider provider,final INaviCodeNode codeNode,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02453: provider argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02454: codeNode argument can not be null");  Preconditions.checkNotNull(commentText,"IE02455: commentText argument can not be null");  Preconditions.checkNotNull(userId,"IE02456: userId argument can not be null");  final Connection connection=provider.getConnection().getConnection();  final String function="{ ? = call append_local_code_node_comment( ?, ?, ?, ?) }";  Integer moduleId=null;  final int nodeId=codeNode.getId();  try {    moduleId=codeNode.getParentFunction().getModule().getConfiguration().getId();  } catch (  final MaybeNullException exception) {    throw new CouldntSaveDataException(exception);  }  try {    final CallableStatement appendCommentFunction=connection.prepareCall(function);    try {      appendCommentFunction.registerOutParameter(1,Types.INTEGER);      appendCommentFunction.setInt(2,moduleId);      appendCommentFunction.setInt(3,nodeId);      appendCommentFunction.setInt(4,userId);      appendCommentFunction.setString(5,commentText);      appendCommentFunction.execute();      final int commentId=appendCommentFunction.getInt(1);      if (appendCommentFunction.wasNull()) {        throw new CouldntSaveDataException("E00037: ");      }      return commentId;    }  finally {      appendCommentFunction.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  private void readGeoKeys() throws java.io.IOException {  XTIFFField geoKeyTag=getField(XTIFF.TIFFTAG_GEO_KEY_DIRECTORY);  if (geoKeyTag != null) {    char[] keys=geoKeyTag.getAsChars();    keyDirectoryVersion=keys[0];    majorRevision=keys[1];    minorRevision=keys[2];    numberOfKeys=keys[3];    for (int i=4; i < keys.length; i+=4) {      int keyID=keys[i];      int tiffTag=keys[i + 1];      int valueCount=keys[i + 2];      int valueOrOffset=keys[i + 3];      storeGeoKey(keyID,tiffTag,valueCount,valueOrOffset);    }  }  XTIFFField matrixTag=getField(XTIFF.TIFFTAG_GEO_TRANS_MATRIX);  XTIFFField tiepointTag=getField(XTIFF.TIFFTAG_GEO_TIEPOINTS);  XTIFFField scaleTag=getField(XTIFF.TIFFTAG_GEO_PIXEL_SCALE);  if (tiepointTag != null) {    tiepoints=tiepointTag.getAsDoubles();  }  if (scaleTag != null) {    scales=scaleTag.getAsDoubles();  }  if (matrixTag != null) {    matrix=matrixTag.getAsDoubles();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TRANSACTION_ID:    return isSetTransactionId();}throw new IllegalStateException();}  }
class C{  public void queryAABB(QueryCallback callback,AABB aabb){  wqwrapper.broadPhase=m_contactManager.m_broadPhase;  wqwrapper.callback=callback;  m_contactManager.m_broadPhase.query(wqwrapper,aabb);}  }
class C{  public MapContent(String content) throws IOException {  this(new InputStreamReader(new ByteArrayInputStream(content.getBytes("UTF-8")),"UTF-8"));}  }
class C{  public long index(){  return index;}  }
class C{  public ForwardFlowAnalysis(DirectedGraph<N> graph){  super(graph);}  }
class C{  private static void dualPivotQuicksort(int[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  int ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    int t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    int t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    int t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    int t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    int t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  int pivot1=ae2;  a[e2]=a[left];  int pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public void animate(){  if (mView == null)   return;  if (mDuration == 0)   return;  this.setAnimationListener(translateListener);  this.setDuration(mDuration);  this.setInterpolator(mInterpolator);  mView.startAnimation(this);}  }
class C{  public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz,Path path) throws ReflectiveOperationException {  return newFSDirectory(clazz,path,FSLockFactory.getDefault());}  }
class C{  @POST @Path(DELETE_ENTITIES_PATH) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public GenericServiceAPIResponseEntity deleteEntities(InputStream inputStream,@QueryParam("serviceName") String serviceName,@QueryParam("byId") Boolean deleteById){  GenericServiceAPIResponseEntity<String> response=new GenericServiceAPIResponseEntity<String>();  DataStorage dataStorage=null;  Map<String,Object> meta=new HashMap<String,Object>();  if (deleteById == null)   deleteById=false;  StopWatch stopWatch=new StopWatch();  try {    stopWatch.start();    dataStorage=DataStorageManager.getDataStorageByEagleConfig();    DeleteStatement statement=new DeleteStatement(serviceName);    if (deleteById) {      LOG.info("Deleting " + serviceName + " by ids");      List<String> deleteIds=unmarshalAsStringlist(inputStream);      statement.setIds(deleteIds);    } else {      LOG.info("Deleting " + serviceName + " by entities");      EntityDefinition entityDefinition=EntityDefinitionManager.getEntityByServiceName(serviceName);      if (entityDefinition == null) {        throw new IllegalArgumentException("Entity definition of service " + serviceName + " not found");      }      List<? extends TaggedLogAPIEntity> entities=unmarshalEntitiesByServie(inputStream,entityDefinition);      statement.setEntities(entities);    }    ModifyResult<String> result=statement.execute(dataStorage);    if (result.isSuccess()) {      List<String> keys=result.getIdentifiers();      if (keys != null) {        response.setObj(keys,String.class);        meta.put(TOTAL_RESULTS,keys.size());      } else {        meta.put(TOTAL_RESULTS,0);      }      meta.put(ELAPSEDMS,stopWatch.getTime());      response.setMeta(meta);      response.setSuccess(true);    }  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    response.setException(e);  } finally {    stopWatch.stop();  }  return response;}  }
class C{  public NetworkSystemRestRep register(URI id){  return client.post(NetworkSystemRestRep.class,getIdUrl() + "/register",id);}  }
class C{  public void testGetFileBytes(ArchiveSource src) throws IOException {  src.clear();  addAllTestData(src);  checkFilesAdded(src);}  }
class C{  private BinaryResource endInsert(final DiskStorage.Inserter inserter,final CacheKey key,String resourceId) throws IOException {synchronized (mLock) {    BinaryResource resource=inserter.commit(key);    mResourceIndex.add(resourceId);    mCacheStats.increment(resource.size(),1);    return resource;  }}  }
class C{  public static <A>StreamTSeq<A> of(final AnyMSeq<? extends Stream<A>> monads){  return new StreamTSeq<>(monads);}  }
class C{  public boolean isPrimitive(){  return detail.isPrimitive();}  }
class C{  public JSONObject toRest(ParseEncoder objectEncoder) throws JSONException {  JSONObject operationSetJSON=new JSONObject();  for (  String key : keySet()) {    ParseFieldOperation op=get(key);    operationSetJSON.put(key,op.encode(objectEncoder));  }  operationSetJSON.put(REST_KEY_UUID,uuid);  if (isSaveEventually) {    operationSetJSON.put(REST_KEY_IS_SAVE_EVENTUALLY,true);  }  return operationSetJSON;}  }
class C{  private void resetCache(){synchronized (LOCK) {    resourcesCache=null;  }  support.firePropertyChange(PROP_RESOURCES,null,null);}  }
class C{  public void cfgToolsLocale(ConfigurationValue cv,String toolsLocale) throws ConfigurationException {  Locale[] locales=Locale.getAvailableLocales();  for (int i=0; i < locales.length; i++) {    if (locales[i].toString().equals(toolsLocale)) {      LocalizationManager localizationManager=ThreadLocalToolkit.getLocalizationManager();      if (localizationManager != null) {        localizationManager.setLocale(locales[i]);      } else {        assert false : "LocalizationManager not setup yet.";      }      return;    }  }  throw new ConfigurationException.ToolsLocaleNotAvailable(cv.getVar(),cv.getSource(),cv.getLine());}  }
class C{  public boolean isNumericalRun(String pin){  final int len=pin.length();  int prevDigit=Character.digit(pin.charAt(0),10);  int prevDiff=Integer.MAX_VALUE;  boolean isRun=true;  for (int i=1; isRun && i < len; i++) {    final int digit=Character.digit(pin.charAt(i),10);    final int diff=digit - prevDigit;    if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) {      isRun=false;    }    prevDiff=diff;    prevDigit=digit;  }  return isRun;}  }
class C{  long clock_check(long now){  if (m_shutdown == EnShutdown.SD_FORCEFUL) {    return -1;  }  long nTimeout;  long snd_buffered;  snd_buffered=m_sbuf.getBuffered();  if ((m_shutdown == EnShutdown.SD_GRACEFUL) && ((m_state != PseudoTcpState.TCP_ESTABLISHED) || ((snd_buffered == 0) && (m_t_ack == 0)))) {    return -1;  }  if (m_state == PseudoTcpState.TCP_CLOSED) {    return CLOSED_TIMEOUT;  }  nTimeout=DEFAULT_TIMEOUT;  if (m_t_ack > 0) {    nTimeout=Math.min(nTimeout,timeDiff(m_t_ack + m_ack_delay,now));  }  if (m_rto_base > 0) {    nTimeout=Math.min(nTimeout,timeDiff(m_rto_base + m_rx_rto,now));  }  if (getM_snd_wnd() == 0) {    nTimeout=Math.min(nTimeout,timeDiff(m_lastsend + m_rx_rto,now));  }  if (PSEUDO_KEEPALIVE) {    if (m_state == PseudoTcpState.TCP_ESTABLISHED) {      nTimeout=Math.min(nTimeout,timeDiff(m_lasttraffic + (m_bOutgoing ? IDLE_PING * 3 / 2 : IDLE_PING),now));    }  }  return nTimeout <= 0 ? 1 : nTimeout;}  }
class C{  public CommandResult execute(RequestBuilder requestBuilder,Host host) throws CommandException {  Preconditions.checkNotNull(requestBuilder);  Preconditions.checkNotNull(host);  CommandResult result=host.execute(requestBuilder);  if (!result.hasSucceeded()) {    throw new CommandException(String.format("Error executing command on host %s: %s",host.getHostname(),result.hasCompleted() ? result.getStdErr() : "Command timed out"));  }  return result;}  }
class C{  public void testSendVerySmallReceiveBuffer(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setRemoteOptRcvBuf(100);  test.setLocalOptRcvBuf(100);  test.doTestTransfer(100000);}  }
class C{  protected boolean isRowBinlogEnabled(){  AtomicReference<String> mode=new AtomicReference<String>("");  try {    taskContext.jdbc().query("SHOW GLOBAL VARIABLES LIKE 'binlog_format'",null);  } catch (  SQLException e) {    throw new ConnectException("Unexpected error while connecting to MySQL and looking at BINLOG mode: ",e);  }  logger.debug("binlog_format={}",mode.get());  return "ROW".equalsIgnoreCase(mode.get());}  }
class C{  public void raycast(RayCastCallback callback,ParticleRaycastCallback particleCallback,Vec2 point1,Vec2 point2){  wrcwrapper.broadPhase=m_contactManager.m_broadPhase;  wrcwrapper.callback=callback;  input.maxFraction=1.0f;  input.p1.set(point1);  input.p2.set(point2);  m_contactManager.m_broadPhase.raycast(wrcwrapper,input);  m_particleSystem.raycast(particleCallback,point1,point2);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.723 -0500",hash_original_method="0F0A39CE7574A7CD22D1B4668E39A889",hash_generated_method="4546FFCB3C8AE2EF28CE2409D3B3D54C") protected final Class<?> defineClass(String className,byte[] classRep,int offset,int length) throws ClassFormatError {  return defineClass(className,classRep,offset,length,null);}  }
class C{  public static void ILOAD(int i){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ILOAD(i);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public int thaw(final Vector position,final double radius) throws MaxChangedBlocksException {  final double radiusSq=radius * radius;  final int ox=position.getBlockX();  final int oy=position.getBlockY();  final int oz=position.getBlockZ();  final BaseBlock air=new BaseBlock(0);  final BaseBlock water=new BaseBlock(BlockID.STATIONARY_WATER);  final int ceilRadius=(int)Math.ceil(radius);  for (int x=ox - ceilRadius; x <= (ox + ceilRadius); ++x) {    int dx=x - ox;    int dx2=dx * dx;    for (int z=oz - ceilRadius; z <= (oz + ceilRadius); ++z) {      int dz=z - oz;      int dz2=dz * dz;      if (dx2 + dz2 > radiusSq) {        continue;      }      for (int y=maxY; y >= 1; --y) {        final int id=FaweCache.getId(queue.getCombinedId4Data(x,y,z));switch (id) {case BlockID.ICE:          this.setBlock(x,y,z,water);        break;case BlockID.SNOW:      this.setBlock(x,y,z,air);    break;case BlockID.AIR:  continue;default :break;}break;}}}return changes;}  }
class C{  public void addNotify(){  super.addNotify();  textArea.addCaretListener(listener);  textArea.addPropertyChangeListener(RSyntaxTextArea.PARSER_NOTICES_PROPERTY,listener);  textArea.addPropertyChangeListener(RSyntaxTextArea.MARK_OCCURRENCES_PROPERTY,listener);  textArea.addPropertyChangeListener(RSyntaxTextArea.MARKED_OCCURRENCES_CHANGED_PROPERTY,listener);  refreshMarkers();}  }
class C{  private void declareExtensions(){  new CellFeed().declareExtensions(extProfile);  new ListFeed().declareExtensions(extProfile);  new RecordFeed().declareExtensions(extProfile);  new SpreadsheetFeed().declareExtensions(extProfile);  new TableFeed().declareExtensions(extProfile);  new WorksheetFeed().declareExtensions(extProfile);}  }
class C{  public void beginDrawing(GL10 gl){  mTexture.bind(gl);  gl.glShadeModel(GL10.GL_FLAT);  gl.glEnable(GL10.GL_ALPHA_TEST);  gl.glAlphaFunc(GL10.GL_GREATER,0.5f);  gl.glEnable(GL10.GL_TEXTURE_2D);  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glPushMatrix();  gl.glLoadIdentity();  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glPushMatrix();  gl.glLoadIdentity();  gl.glOrthof(0,getRenderState().getScreenWidth(),0,getRenderState().getScreenHeight(),-1,1);  GLBuffer.unbind((GL11)gl);  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL10.GL_COLOR_ARRAY);  RenderStateInterface rs=super.getRenderState();  float viewWidth=rs.getScreenWidth();  float viewHeight=rs.getScreenHeight();  Matrix4x4 rotation=Matrix4x4.createRotation(rs.getUpAngle(),rs.getLookDir());  mLabelOffset=Matrix4x4.multiplyMV(rotation,rs.getUpDir());  final float DEGREES_TO_RADIANS=MathUtil.PI / 180.0f;  mDotProductThreshold=MathUtil.cos(rs.getRadiusOfView() * DEGREES_TO_RADIANS * (1 + viewWidth / viewHeight)* 0.5f);}  }
class C{  public SchemaViolationException(){  super();}  }
class C{  public void testConnect(Properties info,boolean sslExpected,String user,String pwd) throws SQLException {  Connection conn=null;  Statement stmt=null;  conn=createConnection(info,user,pwd);  stmt=conn.createStatement();  ResultSet rs=stmt.executeQuery("SELECT 1");  rs.next();  Assert.assertTrue(rs.getInt(1) == 1);  rs.close();  rs=stmt.executeQuery("SHOW STATUS LIKE 'Ssl_cipher'");  rs.next();  String sslCipher=rs.getString(2);  boolean sslActual=sslCipher != null && sslCipher.length() > 0;  Assert.assertEquals("sslExpected does not match",sslExpected,sslActual);}  }
class C{  public Color impassableColor(){  return getPlayerColor(Constants.PLAYER_NAME_IMPASSABLE);}  }
class C{  private static void checkArgs(final int[] min,final int[] max){  if (min == null || max == null || min.length == 0 || max.length == 0) {    throw new IllegalArgumentException("min/max range values cannot be null or empty");  }  if (min.length != max.length) {    throw new IllegalArgumentException("min/max ranges must agree");  }  if (min.length > 4) {    throw new IllegalArgumentException("IntRangeField does not support greater than 4 dimensions");  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (delegationSuperClassSteps: ");  result.append(delegationSuperClassSteps);  result.append(", delegationTargetIsAbstract: ");  result.append(delegationTargetIsAbstract);  result.append(')');  return result.toString();}  }
class C{  public void testRecoveryAfterAnError0_IOException() throws Exception {  doTestRecoveryAfterAnError(0,HadoopErrorSimulator.Kind.IOException);}  }
class C{  protected void onPostExecute(Result result){  mOps.onPostExecute(result,mParam);}  }
class C{  private void initialize(){  this.setName(Constant.messages.getString("options.acsrf.title"));  this.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.LINE_START;  gbc.fill=GridBagConstraints.BOTH;  this.add(new JLabel(Constant.messages.getString("options.acsrf.label.tokens")),gbc);  tokensOptionsPanel=new AntiCsrfMultipleOptionsPanel(getAntiCsrfModel());  gbc.weighty=1.0;  this.add(tokensOptionsPanel,gbc);}  }
class C{  public void trace(Object message){}  }
class C{  public TriggeredObserver(Uri uri,boolean notifyForDescendents){  super(null);  mUri=uri;  mNotifyForDescendents=notifyForDescendents;  registerContentObserver(uri,notifyForDescendents,this);}  }
class C{  public CronEditorDialog(Window owner){  super(owner,"croneditordialog",ModalityType.APPLICATION_MODAL,new Object[]{});  setupGUI();  setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);}  }
class C{  private void writeDataBlock(){  try {    if (!saveChanges) {      return;    }    double min=Double.MAX_VALUE;    double max=Double.MIN_VALUE;    for (int i=0; i < grid.length; i++) {      if (grid[i] < min && grid[i] != noDataValue) {        min=grid[i];      }      if (grid[i] > max && grid[i] != noDataValue) {        max=grid[i];      }    }    if (max > maximumValue) {      maximumValue=max;    }    if (min < minimumValue) {      minimumValue=min;    }    RandomAccessFile rOut=null;    ByteBuffer buf=null;    FileChannel outChannel=null;    try {      File file=new File(dataFile);      if (!file.exists()) {        createNewDataFile();      }      rOut=new RandomAccessFile(dataFile,"rw");      outChannel=rOut.getChannel();      outChannel.position(blockStartingCell * cellSizeInBytes);      int writeLengthInCells=(int)(blockEndingCell - blockStartingCell + 1);      if (dataType == DataType.DOUBLE) {        buf=ByteBuffer.allocate(cellSizeInBytes * writeLengthInCells);        buf.order(byteOrder);        DoubleBuffer db=buf.asDoubleBuffer();        db.put(grid);        db=null;        outChannel.write(buf);      } else       if (dataType == DataType.FLOAT) {        float[] fa=new float[writeLengthInCells];        for (int j=0; j < writeLengthInCells; j++) {          fa[j]=(float)grid[j];        }        buf=ByteBuffer.allocateDirect(cellSizeInBytes * writeLengthInCells);        buf.order(byteOrder);        FloatBuffer fb=buf.asFloatBuffer();        fb.put(fa);        fb=null;        fa=null;        outChannel.write(buf);      } else       if (dataType == DataType.INTEGER) {        short[] ia=new short[writeLengthInCells];        for (int j=0; j < writeLengthInCells; j++) {          ia[j]=(short)grid[j];        }        buf=ByteBuffer.allocate(cellSizeInBytes * writeLengthInCells);        buf.order(byteOrder);        ShortBuffer ib=buf.asShortBuffer();        ib.put(ia);        ib=null;        ia=null;        outChannel.write(buf);      } else       if (dataType == DataType.BYTE) {        byte[] ba=new byte[writeLengthInCells];        for (int j=0; j < writeLengthInCells; j++) {          ba[j]=(byte)grid[j];        }        buf=ByteBuffer.wrap(ba);        ba=null;        outChannel.write(buf);      }    } catch (    Exception e) {      System.err.println("Caught exception: " + e.toString());      System.err.println(e.getStackTrace());    } finally {      buf=null;      if (rOut != null) {        try {          rOut.close();        } catch (        Exception e) {        }      }      if (outChannel != null) {        try {          outChannel.force(false);          outChannel.close();        } catch (        Exception e) {        }      }      isDirty=false;      numberOfDataFileWrites++;    }  } catch (  Exception e) {    if (communicator != null) {      communicator.logException("WhiteboxRaster error",e);    }  }}  }
class C{  private void removeMediaButtonReceiver_syncAfRcs(PendingIntent pi){  try {    for (int index=mRCStack.size() - 1; index >= 0; index--) {      final RemoteControlStackEntry rcse=mRCStack.elementAt(index);      if (rcse.mMediaIntent.equals(pi)) {        rcse.destroy();        mRCStack.removeElementAt(index);        break;      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    Log.e(TAG,"Wrong index accessing media button stack, lock error? ",e);  }}  }
class C{  public static TimeSpan toTimeSpan(Object o) throws PageException {  return toTimespan(o);}  }
class C{  public void removeFeature(Feature f){  imageLocations.remove(f);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:30.490 -0500",hash_original_method="198D3897BE246B2AE096FCE067E81108",hash_generated_method="15714F25F35000B504727D14E9A2D164") public AsyncResult(Object uo,Object r,Throwable ex){  userObj=uo;  result=r;  exception=ex;}  }
class C{  public void moveCacheValues(final PdfObject pdfObject){  startStreamOnDisk=pdfObject.startStreamOnDisk;  pdfObject.startStreamOnDisk=-1;  this.cacheName=pdfObject.cacheName;  pdfObject.cacheName=null;}  }
class C{  public void clear(){}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public byte[] toByteArray(){  return toProto().toByteArray();}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("websphere85x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WebSphere85xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("websphere85x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WebSphere85xExistingLocalConfiguration.class);}  }
class C{  public void updateEvaluation(){  currentBest=searchBest();  currentBestPerformance=(currentBest == null) ? null : currentBest.getPerformance();  if ((bestEver == null) || ((currentBest != null) && (currentBestPerformance.compareTo(bestPerformanceEver) > 0))) {    bestEver=new Individual(currentBest.getWeights());    bestEver.setPerformance(currentBest.getPerformance());    bestPerformanceEver=bestEver.getPerformance();    generationOfLastImproval=generation;  }}  }
class C{  public boolean isManufacturingResource(){  Object oo=get_Value(COLUMNNAME_IsManufacturingResource);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public List<String> computeDependencies(){  List<String> deps=new ArrayList<>();  deps.add(getUniverse().getProject().getId().toUUID());  return deps;}  }
class C{  public RecordedRequest takeRequest() throws InterruptedException {  return requestQueue.take();}  }
class C{  public MessageCatalog[] queryCatalog() throws InvalidSession, StorageFault {  final String methodName="queryCatalog(): ";  log.info(methodName + "Entry");  sslUtil.checkHttpRequest(true,true);  MessageCatalog[] msgCalalog=contextManager.queryCatalog();  log.info(methodName + "Exit returning catalogs of size[" + msgCalalog.length+ "]");  return msgCalalog;}  }
class C{  public Rectangle clip(Rectangle rectangle){  return new Rectangle(Math.max(rectangle.top(),this.top()),Math.max(rectangle.left(),this.left()),Math.min(rectangle.bottom(),this.bottom()),Math.min(rectangle.right(),this.right()));}  }
class C{  private void updateBfsPath(){  _bfsPath.list(Result.of(null));}  }
class C{  public void addLogPos(int logId,int pos){  if (firstUncommittedLog == Session.LOG_WRITTEN) {    firstUncommittedLog=logId;    firstUncommittedPos=pos;  }}  }
class C{  public void sendBucketRequest(Exchange exchange,Request request){  super.sendRequest(exchange,request);}  }
class C{  protected void add(double value,int group){  if ((group < 0) || (group >= numberOfGroups)) {    throw new IllegalArgumentException("invalid group");  }  data.add(new Observation(value,group));}  }
class C{  public static AllocationMethod newInstance(String value){  final AllocationMethod returnInstance=new AllocationMethod();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public boolean isSuppressed(){  return suppress;}  }
class C{  public boolean isClient(){  return event.isClient();}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  private ComputeState createComputeHost() throws Throwable {  ComputeState computeState=new ComputeState();  computeState.id=UUID.randomUUID().toString();  computeState.name=this.computeHostDescription.name;  computeState.documentSelfLink=computeState.id;  computeState.descriptionLink=this.computeHostDescription.documentSelfLink;  computeState.resourcePoolLink=this.resourcePool.documentSelfLink;  computeState.adapterManagementReference=getAdapterManagementReference();  ComputeState returnState=TestUtils.doPost(this.host,computeState,ComputeState.class,UriUtils.buildUri(this.host,ComputeService.FACTORY_LINK));  return returnState;}  }
class C{  @Override public void stop() throws ContainerException {  this.pollTimer.shutdown();  Debug.logWarning("stop JavaMail poller",module);}  }
class C{  private FieldTypeSignature parseThrowsSignature(){  assert (current() == '^');  if (current() != '^') {    throw error("expected throws signature");  }  advance();  return parseFieldTypeSignature(false);}  }
class C{  public static StyleAssociation createStyleAssociation(String text,SynthStyle style,int id) throws PatternSyntaxException {  return new StyleAssociation(text,style,id);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void validateEventDefinition(VOEventDefinition evt){  assertEquals(1,evt.getKey());  assertEquals(0,evt.getVersion());  assertEquals("",evt.getEventDescription());  assertEquals("eventIdentifier",evt.getEventId());  assertEquals(EventType.PLATFORM_EVENT,evt.getEventType());}  }
class C{  public String globalInfo(){  return "Evaluate the performance of batch trained classifiers.";}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("weblogic8x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("weblogic9x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("weblogic10x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("weblogic103x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("weblogic12x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("weblogic121x",J2EEContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("weblogic122x",J2EEContainerCapability.class);}  }
class C{  public final void markResourceAbsent(Tile tile){  if (tile == null) {    String msg=Logging.getMessage("nullValue.TileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  tile.getLevel().markResourceAbsent(this.getTileNumber(tile));}  }
class C{  private String convertLessThanOneThousand(int number){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100];    number/=100;  } else {    soFar=numNames[number % 10];    number/=10;    String s=Integer.toString(number);    if (s.endsWith("2") && !soFar.equals(""))     soFar=" VEINTI" + soFar.trim(); else     if (soFar.equals(""))     soFar=tensNames[number % 10] + soFar; else     soFar=tensNames[number % 10] + " Y" + soFar;    number/=10;  }  if (number == 0)   return tensNames[number % 10] + soFar;  if (number > 1)   soFar="S" + soFar;  if (number == 1 && !soFar.equals(""))   number=0;  return numNames[number] + " CIENTO" + soFar;}  }
class C{  protected void deleteLinksOnPort(NodePortTuple npt,String reason){  List<Link> eraseList=new ArrayList<Link>();  if (this.portLinks.containsKey(npt)) {    if (log.isTraceEnabled()) {      log.trace("handlePortStatus: Switch {} port #{} " + "removing links {}",new Object[]{HexString.toHexString(npt.getNodeId()),npt.getPortId(),this.portLinks.get(npt)});    }    eraseList.addAll(this.portLinks.get(npt));    deleteLinks(eraseList,reason);  }}  }
class C{  public final int indexOf(V value){  if (GWT.isScript()) {    return jsArray.indexOf(value);  } else {    return javaArray.indexOf(value);  }}  }
class C{  public synchronized void clear(){  Properties props=getProperties(true);  for (  String name : props.stringPropertyNames()) {    m_props.remove(name);  }}  }
class C{  public void execute(MethodInfo method,int pos,CodeIterator iter,Frame frame,Subroutine subroutine) throws BadBytecode {  this.lastPos=pos;  int opcode=iter.byteAt(pos);switch (opcode) {case NOP:    break;case ACONST_NULL:  frame.push(Type.UNINIT);break;case ICONST_M1:case ICONST_0:case ICONST_1:case ICONST_2:case ICONST_3:case ICONST_4:case ICONST_5:frame.push(Type.INTEGER);break;case LCONST_0:case LCONST_1:frame.push(Type.LONG);frame.push(Type.TOP);break;case FCONST_0:case FCONST_1:case FCONST_2:frame.push(Type.FLOAT);break;case DCONST_0:case DCONST_1:frame.push(Type.DOUBLE);frame.push(Type.TOP);break;case BIPUSH:case SIPUSH:frame.push(Type.INTEGER);break;case LDC:evalLDC(iter.byteAt(pos + 1),frame);break;case LDC_W:case LDC2_W:evalLDC(iter.u16bitAt(pos + 1),frame);break;case ILOAD:evalLoad(Type.INTEGER,iter.byteAt(pos + 1),frame,subroutine);break;case LLOAD:evalLoad(Type.LONG,iter.byteAt(pos + 1),frame,subroutine);break;case FLOAD:evalLoad(Type.FLOAT,iter.byteAt(pos + 1),frame,subroutine);break;case DLOAD:evalLoad(Type.DOUBLE,iter.byteAt(pos + 1),frame,subroutine);break;case ALOAD:evalLoad(Type.OBJECT,iter.byteAt(pos + 1),frame,subroutine);break;case ILOAD_0:case ILOAD_1:case ILOAD_2:case ILOAD_3:evalLoad(Type.INTEGER,opcode - ILOAD_0,frame,subroutine);break;case LLOAD_0:case LLOAD_1:case LLOAD_2:case LLOAD_3:evalLoad(Type.LONG,opcode - LLOAD_0,frame,subroutine);break;case FLOAD_0:case FLOAD_1:case FLOAD_2:case FLOAD_3:evalLoad(Type.FLOAT,opcode - FLOAD_0,frame,subroutine);break;case DLOAD_0:case DLOAD_1:case DLOAD_2:case DLOAD_3:evalLoad(Type.DOUBLE,opcode - DLOAD_0,frame,subroutine);break;case ALOAD_0:case ALOAD_1:case ALOAD_2:case ALOAD_3:evalLoad(Type.OBJECT,opcode - ALOAD_0,frame,subroutine);break;case IALOAD:evalArrayLoad(Type.INTEGER,frame);break;case LALOAD:evalArrayLoad(Type.LONG,frame);break;case FALOAD:evalArrayLoad(Type.FLOAT,frame);break;case DALOAD:evalArrayLoad(Type.DOUBLE,frame);break;case AALOAD:evalArrayLoad(Type.OBJECT,frame);break;case BALOAD:case CALOAD:case SALOAD:evalArrayLoad(Type.INTEGER,frame);break;case ISTORE:evalStore(Type.INTEGER,iter.byteAt(pos + 1),frame,subroutine);break;case LSTORE:evalStore(Type.LONG,iter.byteAt(pos + 1),frame,subroutine);break;case FSTORE:evalStore(Type.FLOAT,iter.byteAt(pos + 1),frame,subroutine);break;case DSTORE:evalStore(Type.DOUBLE,iter.byteAt(pos + 1),frame,subroutine);break;case ASTORE:evalStore(Type.OBJECT,iter.byteAt(pos + 1),frame,subroutine);break;case ISTORE_0:case ISTORE_1:case ISTORE_2:case ISTORE_3:evalStore(Type.INTEGER,opcode - ISTORE_0,frame,subroutine);break;case LSTORE_0:case LSTORE_1:case LSTORE_2:case LSTORE_3:evalStore(Type.LONG,opcode - LSTORE_0,frame,subroutine);break;case FSTORE_0:case FSTORE_1:case FSTORE_2:case FSTORE_3:evalStore(Type.FLOAT,opcode - FSTORE_0,frame,subroutine);break;case DSTORE_0:case DSTORE_1:case DSTORE_2:case DSTORE_3:evalStore(Type.DOUBLE,opcode - DSTORE_0,frame,subroutine);break;case ASTORE_0:case ASTORE_1:case ASTORE_2:case ASTORE_3:evalStore(Type.OBJECT,opcode - ASTORE_0,frame,subroutine);break;case IASTORE:evalArrayStore(Type.INTEGER,frame);break;case LASTORE:evalArrayStore(Type.LONG,frame);break;case FASTORE:evalArrayStore(Type.FLOAT,frame);break;case DASTORE:evalArrayStore(Type.DOUBLE,frame);break;case AASTORE:evalArrayStore(Type.OBJECT,frame);break;case BASTORE:case CASTORE:case SASTORE:evalArrayStore(Type.INTEGER,frame);break;case POP:if (frame.pop() == Type.TOP) throw new BadBytecode("POP can not be used with a category 2 value, pos = " + pos);break;case POP2:frame.pop();frame.pop();break;case DUP:{Type type=frame.peek();if (type == Type.TOP) throw new BadBytecode("DUP can not be used with a category 2 value, pos = " + pos);frame.push(frame.peek());break;}case DUP_X1:case DUP_X2:{Type type=frame.peek();if (type == Type.TOP) throw new BadBytecode("DUP can not be used with a category 2 value, pos = " + pos);int end=frame.getTopIndex();int insert=end - (opcode - DUP_X1) - 1;frame.push(type);while (end > insert) {frame.setStack(end,frame.getStack(end - 1));end--;}frame.setStack(insert,type);break;}case DUP2:frame.push(frame.getStack(frame.getTopIndex() - 1));frame.push(frame.getStack(frame.getTopIndex() - 1));break;case DUP2_X1:case DUP2_X2:{int end=frame.getTopIndex();int insert=end - (opcode - DUP2_X1) - 1;Type type1=frame.getStack(frame.getTopIndex() - 1);Type type2=frame.peek();frame.push(type1);frame.push(type2);while (end > insert) {frame.setStack(end,frame.getStack(end - 2));end--;}frame.setStack(insert,type2);frame.setStack(insert - 1,type1);break;}case SWAP:{Type type1=frame.pop();Type type2=frame.pop();if (type1.getSize() == 2 || type2.getSize() == 2) throw new BadBytecode("Swap can not be used with category 2 values, pos = " + pos);frame.push(type1);frame.push(type2);break;}case IADD:evalBinaryMath(Type.INTEGER,frame);break;case LADD:evalBinaryMath(Type.LONG,frame);break;case FADD:evalBinaryMath(Type.FLOAT,frame);break;case DADD:evalBinaryMath(Type.DOUBLE,frame);break;case ISUB:evalBinaryMath(Type.INTEGER,frame);break;case LSUB:evalBinaryMath(Type.LONG,frame);break;case FSUB:evalBinaryMath(Type.FLOAT,frame);break;case DSUB:evalBinaryMath(Type.DOUBLE,frame);break;case IMUL:evalBinaryMath(Type.INTEGER,frame);break;case LMUL:evalBinaryMath(Type.LONG,frame);break;case FMUL:evalBinaryMath(Type.FLOAT,frame);break;case DMUL:evalBinaryMath(Type.DOUBLE,frame);break;case IDIV:evalBinaryMath(Type.INTEGER,frame);break;case LDIV:evalBinaryMath(Type.LONG,frame);break;case FDIV:evalBinaryMath(Type.FLOAT,frame);break;case DDIV:evalBinaryMath(Type.DOUBLE,frame);break;case IREM:evalBinaryMath(Type.INTEGER,frame);break;case LREM:evalBinaryMath(Type.LONG,frame);break;case FREM:evalBinaryMath(Type.FLOAT,frame);break;case DREM:evalBinaryMath(Type.DOUBLE,frame);break;case INEG:verifyAssignable(Type.INTEGER,simplePeek(frame));break;case LNEG:verifyAssignable(Type.LONG,simplePeek(frame));break;case FNEG:verifyAssignable(Type.FLOAT,simplePeek(frame));break;case DNEG:verifyAssignable(Type.DOUBLE,simplePeek(frame));break;case ISHL:evalShift(Type.INTEGER,frame);break;case LSHL:evalShift(Type.LONG,frame);break;case ISHR:evalShift(Type.INTEGER,frame);break;case LSHR:evalShift(Type.LONG,frame);break;case IUSHR:evalShift(Type.INTEGER,frame);break;case LUSHR:evalShift(Type.LONG,frame);break;case IAND:evalBinaryMath(Type.INTEGER,frame);break;case LAND:evalBinaryMath(Type.LONG,frame);break;case IOR:evalBinaryMath(Type.INTEGER,frame);break;case LOR:evalBinaryMath(Type.LONG,frame);break;case IXOR:evalBinaryMath(Type.INTEGER,frame);break;case LXOR:evalBinaryMath(Type.LONG,frame);break;case IINC:{int index=iter.byteAt(pos + 1);verifyAssignable(Type.INTEGER,frame.getLocal(index));access(index,Type.INTEGER,subroutine);break;}case I2L:verifyAssignable(Type.INTEGER,simplePop(frame));simplePush(Type.LONG,frame);break;case I2F:verifyAssignable(Type.INTEGER,simplePop(frame));simplePush(Type.FLOAT,frame);break;case I2D:verifyAssignable(Type.INTEGER,simplePop(frame));simplePush(Type.DOUBLE,frame);break;case L2I:verifyAssignable(Type.LONG,simplePop(frame));simplePush(Type.INTEGER,frame);break;case L2F:verifyAssignable(Type.LONG,simplePop(frame));simplePush(Type.FLOAT,frame);break;case L2D:verifyAssignable(Type.LONG,simplePop(frame));simplePush(Type.DOUBLE,frame);break;case F2I:verifyAssignable(Type.FLOAT,simplePop(frame));simplePush(Type.INTEGER,frame);break;case F2L:verifyAssignable(Type.FLOAT,simplePop(frame));simplePush(Type.LONG,frame);break;case F2D:verifyAssignable(Type.FLOAT,simplePop(frame));simplePush(Type.DOUBLE,frame);break;case D2I:verifyAssignable(Type.DOUBLE,simplePop(frame));simplePush(Type.INTEGER,frame);break;case D2L:verifyAssignable(Type.DOUBLE,simplePop(frame));simplePush(Type.LONG,frame);break;case D2F:verifyAssignable(Type.DOUBLE,simplePop(frame));simplePush(Type.FLOAT,frame);break;case I2B:case I2C:case I2S:verifyAssignable(Type.INTEGER,frame.peek());break;case LCMP:verifyAssignable(Type.LONG,simplePop(frame));verifyAssignable(Type.LONG,simplePop(frame));frame.push(Type.INTEGER);break;case FCMPL:case FCMPG:verifyAssignable(Type.FLOAT,simplePop(frame));verifyAssignable(Type.FLOAT,simplePop(frame));frame.push(Type.INTEGER);break;case DCMPL:case DCMPG:verifyAssignable(Type.DOUBLE,simplePop(frame));verifyAssignable(Type.DOUBLE,simplePop(frame));frame.push(Type.INTEGER);break;case IFEQ:case IFNE:case IFLT:case IFGE:case IFGT:case IFLE:verifyAssignable(Type.INTEGER,simplePop(frame));break;case IF_ICMPEQ:case IF_ICMPNE:case IF_ICMPLT:case IF_ICMPGE:case IF_ICMPGT:case IF_ICMPLE:verifyAssignable(Type.INTEGER,simplePop(frame));verifyAssignable(Type.INTEGER,simplePop(frame));break;case IF_ACMPEQ:case IF_ACMPNE:verifyAssignable(Type.OBJECT,simplePop(frame));verifyAssignable(Type.OBJECT,simplePop(frame));break;case GOTO:break;case JSR:frame.push(Type.RETURN_ADDRESS);break;case RET:verifyAssignable(Type.RETURN_ADDRESS,frame.getLocal(iter.byteAt(pos + 1)));break;case TABLESWITCH:case LOOKUPSWITCH:case IRETURN:verifyAssignable(Type.INTEGER,simplePop(frame));break;case LRETURN:verifyAssignable(Type.LONG,simplePop(frame));break;case FRETURN:verifyAssignable(Type.FLOAT,simplePop(frame));break;case DRETURN:verifyAssignable(Type.DOUBLE,simplePop(frame));break;case ARETURN:try {CtClass returnType=Descriptor.getReturnType(method.getDescriptor(),classPool);verifyAssignable(Type.get(returnType),simplePop(frame));} catch (NotFoundException e) {throw new RuntimeException(e);}break;case RETURN:break;case GETSTATIC:evalGetField(opcode,iter.u16bitAt(pos + 1),frame);break;case PUTSTATIC:evalPutField(opcode,iter.u16bitAt(pos + 1),frame);break;case GETFIELD:evalGetField(opcode,iter.u16bitAt(pos + 1),frame);break;case PUTFIELD:evalPutField(opcode,iter.u16bitAt(pos + 1),frame);break;case INVOKEVIRTUAL:case INVOKESPECIAL:case INVOKESTATIC:evalInvokeMethod(opcode,iter.u16bitAt(pos + 1),frame);break;case INVOKEINTERFACE:evalInvokeIntfMethod(opcode,iter.u16bitAt(pos + 1),frame);break;case INVOKEDYNAMIC:evalInvokeDynamic(opcode,iter.u16bitAt(pos + 1),frame);break;case NEW:frame.push(resolveClassInfo(constPool.getClassInfo(iter.u16bitAt(pos + 1))));break;case NEWARRAY:evalNewArray(pos,iter,frame);break;case ANEWARRAY:evalNewObjectArray(pos,iter,frame);break;case ARRAYLENGTH:{Type array=simplePop(frame);if (!array.isArray() && array != Type.UNINIT) throw new BadBytecode("Array length passed a non-array [pos = " + pos + "]: "+ array);frame.push(Type.INTEGER);break;}case ATHROW:verifyAssignable(THROWABLE_TYPE,simplePop(frame));break;case CHECKCAST:verifyAssignable(Type.OBJECT,simplePop(frame));frame.push(typeFromDesc(constPool.getClassInfoByDescriptor(iter.u16bitAt(pos + 1))));break;case INSTANCEOF:verifyAssignable(Type.OBJECT,simplePop(frame));frame.push(Type.INTEGER);break;case MONITORENTER:case MONITOREXIT:verifyAssignable(Type.OBJECT,simplePop(frame));break;case WIDE:evalWide(pos,iter,frame,subroutine);break;case MULTIANEWARRAY:evalNewObjectArray(pos,iter,frame);break;case IFNULL:case IFNONNULL:verifyAssignable(Type.OBJECT,simplePop(frame));break;case GOTO_W:break;case JSR_W:frame.push(Type.RETURN_ADDRESS);break;}}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  private static List<String> addImport(List<String> lines,Class<?> aClass,Class<?> classToImport){  if (existImport(lines,classToImport))   return lines;  List<String> result=new ArrayList<String>();  for (  String line : lines) {    result.add(line);    if (!packageFound(line,aClass))     continue;    result.add("import " + classToImport.getName() + ";");  }  return result;}  }
class C{  public void stop() throws IOException {  if (socket != null) {    socket.close();  }}  }
class C{  private static LatLng toRadiusLatLng(LatLng center,double radius){  double radiusAngle=Math.toDegrees(radius / RADIUS_OF_EARTH_METERS) / Math.cos(Math.toRadians(center.latitude));  return new LatLng(center.latitude,center.longitude + radiusAngle);}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> updateCopyAccessMode(URI consistencyGroupId,CopiesParam input){  final String url=getIdUrl() + "/protection/continuous-copies/accessmode";  return postTasks(input,url,consistencyGroupId);}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public Seconds minus(int seconds){  return plus(FieldUtils.safeNegate(seconds));}  }
class C{  public void update() throws AcmeException {  LOG.debug("update");  try (Connection conn=getSession().provider().connect()){    ClaimBuilder claims=new ClaimBuilder();    claims.putResource("reg");    int rc=conn.sendSignedRequest(getLocation(),claims,getSession());    if (rc != HttpURLConnection.HTTP_CREATED && rc != HttpURLConnection.HTTP_ACCEPTED) {      conn.throwAcmeException();    }    Map<String,Object> json=conn.readJsonResponse();    unmarshal(json,conn);  } catch (  IOException ex) {    throw new AcmeNetworkException(ex);  }}  }
class C{  public static boolean deleteFilesInADirectory(String directoryPath){  if ((directoryPath == null) || directoryPath.isEmpty()) {    return false;  }  boolean isSuccessfulDelete=true;  List<File> files=getListOfFilesInADirectory(directoryPath);  if (files == null) {    return false;  }  try {    for (    File file : files) {      boolean fileDeleteSuccess=deleteFile(directoryPath,file.getName());      if (!fileDeleteSuccess) {        isSuccessfulDelete=false;      }    }  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    isSuccessfulDelete=false;  }  return isSuccessfulDelete;}  }
class C{  DictionaryBasedBreakIterator(String dataFile,String dictionaryFile) throws IOException {  super(dataFile);  byte[] tmp=super.getAdditionalData();  if (tmp != null) {    prepareCategoryFlags(tmp);    super.setAdditionalData(null);  }  dictionary=new BreakDictionary(dictionaryFile);}  }
class C{  public static double insertRandom(TreeMap<String,Integer> treeMap,int N,int L){  Stopwatch sw=new Stopwatch();  String s="cat";  for (int i=0; i < N; i++) {    s=StringUtils.randomString(L);    treeMap.put(s,new Integer(i));  }  return sw.elapsedTime();}  }
class C{  private void actionBPartner(boolean newRecord){  VBPartner vbp=new VBPartner(Env.getFrame(this),m_lookup.getWindowNo());  int BPartner_ID=0;  if (!newRecord) {    if (m_value instanceof Integer)     BPartner_ID=((Integer)m_value).intValue(); else     if (m_value != null)     BPartner_ID=Integer.parseInt(m_value.toString());  }  vbp.loadBPartner(BPartner_ID);  vbp.setVisible(true);  int result=vbp.getC_BPartner_ID();  if (result == 0 && result == BPartner_ID)   return;  m_lookup.getDirect(new Integer(result),false,true);  actionCombo(new Integer(result));}  }
class C{  public static Test suite(){  return (new TestSuite(ValidatorITCase.class));}  }
class C{  public boolean relaxPriority(E key,double priority){  Entry<E> entry=getEntry(key);  if (entry == null) {    entry=makeEntry(key);  }  if (compare(priority,entry.priority) <= 0) {    return false;  }  entry.priority=priority;  heapifyUp(entry);  return true;}  }
class C{  public void testPerformanceOnPrefixes2_4() throws Exception {  final int minPrefixLen=2;  final int maxPrefixLen=4;  runPerformanceTest(minPrefixLen,maxPrefixLen,num,onlyMorePopular);}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar=-1;  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  String internalsprintf(String s) throws IllegalArgumentException {  String s2="";  if (conversionCharacter == 's' || conversionCharacter == 'S')   s2=printSFormat(s); else   throw new IllegalArgumentException("Cannot " + "format a String with a format using a " + conversionCharacter + " conversion character.");  return s2;}  }
class C{  private void handleSetPathRequest() throws IOException {  int length;  int flags;  @SuppressWarnings("unused") int constants;  int totalLength=3;  byte[] head=null;  int code=-1;  int bytesReceived;  HeaderSet request=new HeaderSet();  HeaderSet reply=new HeaderSet();  length=mInput.read();  length=(length << 8) + mInput.read();  flags=mInput.read();  constants=mInput.read();  if (length > ObexHelper.MAX_PACKET_SIZE_INT) {    code=ResponseCodes.OBEX_HTTP_REQ_TOO_LARGE;    totalLength=3;  } else {    if (length > 5) {      byte[] headers=new byte[length - 5];      bytesReceived=mInput.read(headers);      while (bytesReceived != headers.length) {        bytesReceived+=mInput.read(headers,bytesReceived,headers.length - bytesReceived);      }      ObexHelper.updateHeaderSet(request,headers);      if (mListener.getConnectionId() != -1 && request.mConnectionID != null) {        mListener.setConnectionId(ObexHelper.convertToLong(request.mConnectionID));      } else {        mListener.setConnectionId(1);      }      if (request.mAuthResp != null) {        if (!handleAuthResp(request.mAuthResp)) {          code=ResponseCodes.OBEX_HTTP_UNAUTHORIZED;          mListener.onAuthenticationFailure(ObexHelper.getTagValue((byte)0x01,request.mAuthResp));        }        request.mAuthResp=null;      }    }    if (code != ResponseCodes.OBEX_HTTP_UNAUTHORIZED) {      if (request.mAuthChall != null) {        handleAuthChall(request);        reply.mAuthResp=new byte[request.mAuthResp.length];        System.arraycopy(request.mAuthResp,0,reply.mAuthResp,0,reply.mAuthResp.length);        request.mAuthChall=null;        request.mAuthResp=null;      }      boolean backup=false;      boolean create=true;      if (!((flags & 1) == 0)) {        backup=true;      }      if (!((flags & 2) == 0)) {        create=false;      }      try {        code=mListener.onSetPath(request,reply,backup,create);      } catch (      Exception e) {        sendResponse(ResponseCodes.OBEX_HTTP_INTERNAL_ERROR,null);        return;      }      code=validateResponseCode(code);      if (reply.nonce != null) {        mChallengeDigest=new byte[16];        System.arraycopy(reply.nonce,0,mChallengeDigest,0,16);      } else {        mChallengeDigest=null;      }      long id=mListener.getConnectionId();      if (id == -1) {        reply.mConnectionID=null;      } else {        reply.mConnectionID=ObexHelper.convertToByteArray(id);      }      head=ObexHelper.createHeader(reply,false);      totalLength+=head.length;      if (totalLength > mMaxPacketLength) {        totalLength=3;        head=null;        code=ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;      }    }  }  byte[] replyData=new byte[totalLength];  replyData[0]=(byte)code;  replyData[1]=(byte)(totalLength >> 8);  replyData[2]=(byte)totalLength;  if (head != null) {    System.arraycopy(head,0,replyData,3,head.length);  }  mOutput.write(replyData);  mOutput.flush();}  }
class C{  static int[] toJavaVersionIntArray(String version){  return toJavaVersionIntArray(version,Integer.MAX_VALUE);}  }
class C{  public static Pointer allocate(long size) throws DMLRuntimeException {  Pointer A=new Pointer();  ensureFreeSpace(size);  long t0=System.nanoTime();  cudaMalloc(A,size);  Statistics.cudaAllocTime.getAndAdd(System.nanoTime() - t0);  Statistics.cudaAllocCount.getAndAdd(1);  return A;}  }
class C{  public void testConfigGuess1() throws Exception {  CSVConfig expected=new CSVConfig();  expected.setDelimiter(';');  expected.setValueDelimiter(' ');  expected.setFill(CSVConfig.FILLRIGHT);  expected.setIgnoreValueDelimiter(false);  expected.setFixedWidth(true);  CSVField field=new CSVField();  field.setSize(4);  expected.addField(field);  expected.addField(field);  StringBuilder sb=new StringBuilder();  sb.append("1234;abcd;1234\n");  sb.append("abcd;1234;abcd");  ByteArrayInputStream in=new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8));  CSVConfigGuesser guesser=new CSVConfigGuesser(in);  CSVConfig guessed=guesser.guess();  assertEquals(expected.isFixedWidth(),guessed.isFixedWidth());  assertEquals(expected.getFields().length,guessed.getFields().length);  assertEquals(expected.getFields()[0].getSize(),guessed.getFields()[0].getSize());}  }
class C{  public TransactionSignature(BigInteger r,BigInteger s){  this(r,s,Transaction.SigHash.ALL.value);}  }
class C{  public CAddTagToSelectedNodesAction(final JFrame parent,final ZyGraph graph,final ITreeNode<CTag> tag){  super("Add Tag to selected Nodes");  m_tag=Preconditions.checkNotNull(tag,"IE01781: Tag can't be null.");  m_parent=Preconditions.checkNotNull(parent,"IE02311: Parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE02312: graph argument can not be null");}  }
class C{  public CallOut(Widget target,Placement placement){  peer=StepPeer.newInstance();  id=getOrCreateId(target.getElement());  JsoHelper.setAttribute(peer,"id",id + "-callout");  peer.setPlacement(placement.getValue());  peer.setTarget(id);}  }
class C{  public void performHandler(){  if (handler == null) {    return;  }  handler.onTabSelected();}  }
class C{  public <T>DataChangeEvent(DataSource source,int col,int row,Comparable<T> valOld,Comparable<T> valNew){  super(source);  this.col=col;  this.row=row;  this.valOld=valOld;  this.valNew=valNew;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void propagate(Hypercube region){  this.region=region;  if (below != null) {    Hypercube child=new Hypercube(region);    child.setRight(dimension,coord);    below.propagate(child);  }  if (above != null) {    Hypercube child=new Hypercube(region);    child.setLeft(dimension,coord);    above.propagate(child);  }}  }
class C{  public Component findByName(String name,Component rootComponent){  Component c=(Component)rootComponent.getClientProperty("%" + name + "%");  if (c == null) {    Container newRoot=getRootAncestor(rootComponent);    if (newRoot != null && rootComponent != newRoot) {      return findByName(name,newRoot);    }  }  return c;}  }
class C{  public void achieved(String achievement){  try {    achievements.achieved(achievement);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy == null)   return Boolean.FALSE;  if (sage.plugin.CorePluginManager.STANDARD_TYPE_PLUGIN.equalsIgnoreCase(pluggy.getType()))   return pluggy.getImplClass().length() > 0 ? Boolean.TRUE : Boolean.FALSE; else   if (sage.plugin.CorePluginManager.STVI_TYPE_PLUGIN.equalsIgnoreCase(pluggy.getType()) && stack.getUIMgr() != null)   return Boolean.TRUE; else   return Boolean.FALSE;}  }
class C{  public static String toClock(long time){  long ttime=time;  short miliseconds=(short)(ttime % 1000);  ttime=ttime / 1000;  short seconds=(short)(ttime % 60);  ttime=ttime / 60;  short minutes=(short)(ttime % 60);  ttime=ttime / 60;  short hours=(short)(ttime % 24);  ttime=ttime / 24;  short days=(short)(ttime % 7);  short weeks=(short)(ttime / 7);  StringBuilder s=new StringBuilder();  s.append(((weeks * 7 + days) * 24 + hours) + ":");  if (minutes < 10) {    s.append('0');  }  s.append(minutes + ":");  if (seconds < 10) {    s.append('0');  }  s.append(seconds + ".");  if (miliseconds < 100) {    s.append('0');  }  if (miliseconds < 10) {    s.append('0');  }  s.append(miliseconds);  return s.toString();}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  public long readFieldLength(){  int sw=this.byteBuffer[this.position++] & 0xff;switch (sw) {case 251:    return NULL_LENGTH;case 252:  return getUnsignedShort();case 253:return getUnsignedInt24();case 254:return getLong();default :return sw;}}  }
class C{  public void emitop1(int op,int od){  emitop(op);  if (!alive)   return;  emit1(od);switch (op) {case bipush:    state.push(syms.intType);  break;case ldc1:state.push(typeForPool(pool.pool[od]));break;default :throw new AssertionError(mnem(op));}postop();}  }
class C{  private boolean isBigEndian(){  return getFormat().isBigEndian();}  }
class C{  PlainSocketImpl(FileDescriptor fd){  if (useDualStackImpl) {    impl=new DualStackPlainSocketImpl(fd,exclusiveBind);  } else {    impl=new TwoStacksPlainSocketImpl(fd,exclusiveBind);  }}  }
class C{  public LocalTime withMinuteOfHour(int minute){  return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(),minute));}  }
class C{  public static Range findStackedRangeBounds(CategoryDataset dataset,KeyToGroupMap map){  ParamChecks.nullNotPermitted(dataset,"dataset");  boolean hasValidData=false;  Range result=null;  int[] groupIndex=new int[dataset.getRowCount()];  for (int i=0; i < dataset.getRowCount(); i++) {    groupIndex[i]=map.getGroupIndex(map.getGroup(dataset.getRowKey(i)));  }  int groupCount=map.getGroupCount();  double[] minimum=new double[groupCount];  double[] maximum=new double[groupCount];  int categoryCount=dataset.getColumnCount();  for (int item=0; item < categoryCount; item++) {    double[] positive=new double[groupCount];    double[] negative=new double[groupCount];    int seriesCount=dataset.getRowCount();    for (int series=0; series < seriesCount; series++) {      Number number=dataset.getValue(series,item);      if (number != null) {        hasValidData=true;        double value=number.doubleValue();        if (value > 0.0) {          positive[groupIndex[series]]=positive[groupIndex[series]] + value;        }        if (value < 0.0) {          negative[groupIndex[series]]=negative[groupIndex[series]] + value;        }      }    }    for (int g=0; g < groupCount; g++) {      minimum[g]=Math.min(minimum[g],negative[g]);      maximum[g]=Math.max(maximum[g],positive[g]);    }  }  if (hasValidData) {    for (int j=0; j < groupCount; j++) {      result=Range.combine(result,new Range(minimum[j],maximum[j]));    }  }  return result;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public boolean isOrganization(){  return RESPONSIBLETYPE_Organization.equals(getResponsibleType()) && getAD_Org_ID() != 0;}  }
class C{  public void halfOp(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't set halfop on null user");  setMode("+h " + user.getNick());}  }
class C{  @Override public void saveAndIncrement(T data){  Xor<Void,T> oldData=this.data;  VersionedKey newVersionedKey=increment();  logger.info("Saving data with key {}, new version is {}",key,newVersionedKey.toJson());  connection.put(newVersionedKey.toJson(),new Data(data,new Date(),newVersionedKey.toJson()));  connection.put(key,newVersionedKey.toJson());  try {    this.data=Xor.primary(data);    delete(versionedKey);  } catch (  Throwable t) {    this.data=oldData;  } finally {    versionedKey=newVersionedKey.toJson();  }}  }
class C{  public QueryTask waitForQuery(QueryTask query,Predicate<QueryTask> predicate) throws Throwable {  return ServiceHostUtils.waitForQuery(this,REFERRER,query,predicate,this.waitIterationCount,this.waitIterationSleep);}  }
class C{  public static void LDC(Class<?> x){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LDC(x);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public void onThreadWaitTimeout(SceKernelThreadInfo thread){  if (removeWaitingThread(thread)) {    thread.cpuContext._v0=ERROR_KERNEL_WAIT_TIMEOUT;  } else {    log.warn("EventFlag deleted while we were waiting for it! (timeout expired)");    thread.cpuContext._v0=ERROR_KERNEL_WAIT_DELETE;  }}  }
class C{  @Override public InputStream openResource(String resource) throws IOException {  InputStream is=null;  String file=collectionZkPath + "/" + resource;  try {    if (zkController.pathExists(file)) {      byte[] bytes=zkController.getZkClient().getData(file,null,null,true);      return new ByteArrayInputStream(bytes);    }  } catch (  Exception e) {    throw new IOException("Error opening " + file,e);  }  try {    is=classLoader.getResourceAsStream(resource.replace(File.separatorChar,'/'));  } catch (  Exception e) {    throw new IOException("Error opening " + resource,e);  }  if (is == null) {    throw new IOException("Can't find resource '" + resource + "' in classpath or '"+ collectionZkPath+ "', cwd="+ System.getProperty("user.dir"));  }  return is;}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  private Context(int bufferLength){  decoder=charset.newDecoder();  buf=IoBuffer.allocate(bufferLength).setAutoExpand(true);}  }
class C{  private void addRect(float left,float top,float right,float bottom,int dir){  moveTo(left,top);  Direction direction=getDirection(dir);switch (direction) {case CW:    lineTo(right,top);  lineTo(right,bottom);lineTo(left,bottom);break;case CCW:lineTo(left,bottom);lineTo(right,bottom);lineTo(right,top);break;}close();resetLastPointFromPath();}  }
class C{  public CancelTargetSelectionParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_CANCEL_TARGET_SELECTION_SUCCESS);}  }
class C{  protected void notify(final IChangeRecord record){  if (listeners.isEmpty())   return;  toGraphEdit(record).ifPresent(null);}  }
class C{  public GraphProjection(G delegate){  this.delegate=delegate;}  }
class C{  private double sampleFromGamma(double k,double theta){  boolean accept=false;  if (k < 1) {    double c=(1 / k);    double d=((1 - k) * Math.pow(k,(k / (1 - k))));    double u, v, z, e, x;    do {      u=rng.nextDouble();      v=rng.nextDouble();      z=-Math.log(u);      e=-Math.log(v);      x=Math.pow(z,c);      if ((z + e) >= (d + x)) {        accept=true;      }    } while (!accept);    return (x * theta);  } else {    double b=(k - Math.log(4));    double c=(k + Math.sqrt(2 * k - 1));    double lam=Math.sqrt(2 * k - 1);    double cheng=(1 + Math.log(4.5));    double u, v, x, y, z, r;    do {      u=rng.nextDouble();      v=rng.nextDouble();      y=((1 / lam) * Math.log(v / (1 - v)));      x=(k * Math.exp(y));      z=(u * v * v);      r=(b + (c * y) - x);      if ((r >= ((4.5 * z) - cheng)) || (r >= Math.log(z))) {        accept=true;      }    } while (!accept);    return (x * theta);  }}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  private void updateDocumentsAndTriggerCopy(final State current){  Operation imageQuery=buildImageQuery(current);  imageQuery.setCompletion(null);  sendRequest(imageQuery);}  }
class C{  private static Message sendMessageSynchronously(Messenger dstMessenger,Message msg){  SyncMessenger sm=SyncMessenger.obtain();  try {    if (dstMessenger != null && msg != null) {      msg.replyTo=sm.mMessenger;synchronized (sm.mHandler.mLockObject) {        dstMessenger.send(msg);        sm.mHandler.mLockObject.wait();      }    } else {      sm.mHandler.mResultMsg=null;    }  } catch (  InterruptedException e) {    sm.mHandler.mResultMsg=null;  }catch (  RemoteException e) {    sm.mHandler.mResultMsg=null;  }  Message resultMsg=sm.mHandler.mResultMsg;  sm.recycle();  return resultMsg;}  }
class C{  @Override public HitData rollHitLocation(int table,int side,int aimedLocation,int aimingMode,int cover){  int nArmorLoc=LOC_FRONT;  boolean bSide=false;  boolean bRear=false;  boolean ignoreTurret=m_bHasNoTurret || (table == ToHitData.HIT_UNDERWATER);  int motiveMod=getMotiveSideMod(side);  setPotCrit(HitData.EFFECT_NONE);  if (isHullDown()) {    int moveInDirection;    if (!m_bBackedIntoHullDown) {      moveInDirection=ToHitData.SIDE_FRONT;    } else {      moveInDirection=ToHitData.SIDE_REAR;    }    if ((side == moveInDirection) || (side == ToHitData.SIDE_LEFT) || (side == ToHitData.SIDE_RIGHT)) {      if (!ignoreTurret) {        if (!hasNoDualTurret()) {          int roll=Compute.d6() - 2;          if (roll <= 3) {            nArmorLoc=getLocTurret2();          } else {            nArmorLoc=getLocTurret();          }        } else {          nArmorLoc=getLocTurret();        }      } else {        nArmorLoc=side;      }      return new HitData(nArmorLoc);    }  }  if (side == ToHitData.SIDE_LEFT) {    nArmorLoc=LOC_LEFT;    bSide=true;  } else   if (side == ToHitData.SIDE_RIGHT) {    nArmorLoc=LOC_RIGHT;    bSide=true;  } else   if (side == ToHitData.SIDE_REAR) {    nArmorLoc=LOC_REAR;    bRear=true;  }  HitData rv=new HitData(nArmorLoc);  boolean bHitAimed=false;  if ((aimedLocation != LOC_NONE) && (aimingMode != IAimingModes.AIM_MODE_NONE)) {    int roll=Compute.d6(2);    if ((5 < roll) && (roll < 9)) {      rv=new HitData(aimedLocation,side == ToHitData.SIDE_REAR,true);      bHitAimed=true;    }  }  if (!bHitAimed) {switch (Compute.d6(2)) {case 2:      if (game.getOptions().booleanOption("vehicles_threshold")) {        setPotCrit(HitData.EFFECT_CRITICAL);      } else {        rv.setEffect(HitData.EFFECT_CRITICAL);      }    break;case 3:  if (game.getOptions().booleanOption("vehicles_threshold")) {    setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);  } else {    rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);  }rv.setMotiveMod(motiveMod);break;case 4:if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);} else {rv.setEffect(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}rv.setMotiveMod(motiveMod);break;case 5:if (bSide) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv=new HitData(LOC_FRONT);} else {rv=new HitData(LOC_FRONT,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}} else if (bRear) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv=new HitData(LOC_LEFT);} else {rv=new HitData(LOC_LEFT,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}} else {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv=new HitData(LOC_LEFT);} else {rv=new HitData(LOC_LEFT,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}}rv.setMotiveMod(motiveMod);break;case 6:case 7:break;case 8:if (bSide && !game.getOptions().booleanOption("tacops_vehicle_effective")) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_CRITICAL);} else {rv.setEffect(HitData.EFFECT_CRITICAL);}}break;case 9:if (game.getOptions().booleanOption("tacops_vehicle_effective")) {if (bSide) {rv=new HitData(LOC_REAR);} else if (bRear) {rv=new HitData(LOC_RIGHT);} else {rv=new HitData(LOC_LEFT);}} else {if (bSide) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv=new HitData(LOC_REAR);} else {rv=new HitData(LOC_REAR,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}} else if (bRear) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv=new HitData(LOC_RIGHT);} else {rv=new HitData(LOC_RIGHT,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}} else {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_VEHICLE_MOVE_DAMAGED);rv=new HitData(LOC_LEFT);} else {rv=new HitData(LOC_LEFT,false,HitData.EFFECT_VEHICLE_MOVE_DAMAGED);}}rv.setMotiveMod(motiveMod);}break;case 10:if (!ignoreTurret) {if (!hasNoDualTurret()) {int roll=Compute.d6();if (side == ToHitData.SIDE_FRONT) {roll-=2;} else if (side == ToHitData.SIDE_REAR) {roll+=2;}if (roll <= 3) {rv=new HitData(LOC_TURRET_2);} else {rv=new HitData(LOC_TURRET);}} else {rv=new HitData(LOC_TURRET);}}break;case 11:if (!ignoreTurret) {if (!hasNoDualTurret()) {int roll=Compute.d6();if (side == ToHitData.SIDE_FRONT) {roll-=2;} else if (side == ToHitData.SIDE_REAR) {roll+=2;}if (roll <= 3) {rv=new HitData(LOC_TURRET_2);} else {rv=new HitData(LOC_TURRET);}} else {rv=new HitData(LOC_TURRET);}}break;case 12:if (ignoreTurret) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_CRITICAL);} else {rv.setEffect(HitData.EFFECT_CRITICAL);}} else {if (!hasNoDualTurret()) {int roll=Compute.d6();if (side == ToHitData.SIDE_FRONT) {roll-=2;} else if (side == ToHitData.SIDE_REAR) {roll+=2;}if (roll <= 3) {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_CRITICAL);rv=new HitData(LOC_TURRET_2);} else {rv=new HitData(LOC_TURRET_2,false,HitData.EFFECT_CRITICAL);}} else {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_CRITICAL);rv=new HitData(LOC_TURRET);} else {rv=new HitData(LOC_TURRET,false,HitData.EFFECT_CRITICAL);}}} else {if (game.getOptions().booleanOption("vehicles_threshold")) {setPotCrit(HitData.EFFECT_CRITICAL);rv=new HitData(LOC_TURRET);} else {rv=new HitData(LOC_TURRET,false,HitData.EFFECT_CRITICAL);}}}}}if (table == ToHitData.HIT_SWARM) {rv.setEffect(rv.getEffect() | HitData.EFFECT_CRITICAL);setPotCrit(HitData.EFFECT_CRITICAL);}return rv;}  }
class C{  public static void log(int logLevel,String tag,String msg,Object... params){switch (logLevel) {case TRACE:    trace(tag,msg,params);  break;case DEBUG:debug(tag,msg,params);break;case INFO:info(tag,msg,params);break;case WARN:warn(tag,msg,params);break;case ERROR:error(tag,msg,params);break;case FATAL:fatal(tag,msg,params);break;default :error(tag,"Log level " + logLevel + " is not supported!");}}  }
class C{  public static void main(String[] args) throws FileNotFoundException {  if (args.length != 1) {    System.out.println("Usage java Exercise_12_20 srcRootDirectory");    System.exit(1);  }  File rootDir=new File(args[0]);  if (!rootDir.isDirectory()) {    System.out.println("Directory " + args[0] + " does not exist");    System.exit(2);  }  ArrayList<File> chapters=getDirectories(rootDir);  while (!chapters.isEmpty()) {    ArrayList<File> files=getFiles(chapters);    deleteStatement(files,chapters.get(0));    chapters.remove(0);  }}  }
class C{  @Override public void registerCallback(IProviderCallback cb){synchronized (mCallbacks) {    mCallbacks.add(cb);  }}  }
class C{  public void seek(long pos) throws IOException {  if (in == null)   throw new XZIOException("Stream closed");  if (pos < 0)   throw new XZIOException("Negative seek position: " + pos);  seekPos=pos;  seekNeeded=true;}  }
class C{  public BufferOp(Geometry g){  argGeom=g;}  }
class C{  public void clearAnnotations(){  if (this.annotations != null) {    this.annotations.clear();    fireChangeEvent();  }}  }
class C{  public final double coverageOfTestCasesByPredictedRegions(){  return m_delegate.coverageOfTestCasesByPredictedRegions();}  }
class C{  public Heap(){}  }
class C{  private static void printMatrix(int[][] matrix){  Log.v(TAG,"\tprintMap:");  int m=matrix.length;  int n=matrix[0].length;  for (int j=0; j < n; j++) {    String colY="\t\t";    for (int i=0; i < m; i++) {      colY+=String.format("%3d",matrix[i][j]);    }    Log.v(TAG,colY);  }}  }
class C{  public String search(){  return "search";}  }
class C{  public T caseAnonymous_guard_1_(Anonymous_guard_1_ object){  return null;}  }
class C{  public LinkBuilder addLink(Link link){  if (link == null) {    throw new IllegalArgumentException("link is null");  }  this.links.add(link);  return this;}  }
class C{  public boolean isConsuming(){  return consuming;}  }
class C{  void startLocationUpdates(){  LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient,locationRequest,this);  log.trace("Requesting GoogleApiClient location updates");}  }
class C{  public NumberFormatStringTokenizer(String str){  this.str=str;  maxPosition=str.length();}  }
class C{  public static void randomShuffle(ArrayModifiableDBIDs ids,RandomFactory rnd){  randomShuffle(ids,rnd.getSingleThreadedRandom(),ids.size());}  }
class C{  public boolean registerBugCategory(BugCategory bc){  String category=bc.getCategory();  if (categoryDescriptionMap.get(category) != null) {    return false;  }  categoryDescriptionMap.put(category,bc);  return true;}  }
class C{  protected String underscoreName(String name){  if (!StringUtils.hasLength(name)) {    return "";  }  StringBuilder result=new StringBuilder();  result.append(lowerCaseName(name.substring(0,1)));  for (int i=1; i < name.length(); i++) {    String s=name.substring(i,i + 1);    String slc=lowerCaseName(s);    if (!s.equals(slc)) {      result.append("_").append(slc);    } else {      result.append(s);    }  }  return result.toString();}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public static double sum(Iterator tuples,String field){  try {    double sum=0;    while (tuples.hasNext()) {      sum+=((Tuple)tuples.next()).getDouble(field);    }    return sum;  } catch (  Exception e) {    return Double.NaN;  }}  }
class C{  private double scalarProduct(double[][] x,double[][] y,int d){  double result=0;  for (int i=0; i < d; i++) {    result+=x[i][0] * y[i][0];  }  return result;}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public GeneralizedSemImGraphicalEditor(GeneralizedSemIm semIm,Map<Object,EditorWindow> launchedEditors){  this.semIm=semIm;  this.launchedEditors=launchedEditors;  setLayout(new BorderLayout());  JScrollPane scroll=new JScrollPane(workbench());  scroll.setPreferredSize(new Dimension(450,450));  add(scroll,BorderLayout.CENTER);  setBorder(new TitledBorder("Double click expressions to edit"));}  }
class C{  public void start(){  if (mService != null && mService.getState() == STATE_DISCONNECTED) {    mService.start();  }}  }
class C{  public static byte[] fromHex(String s){  int len=s.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16));  }  return data;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public TechnicalServiceOperationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static Map<Property,Object> loadProperties(final String filename,final boolean addProperties){  final InputStream input=ConfigLoader.class.getClassLoader().getResourceAsStream(filename);  if (input != null) {    return loadProperties(input,addProperties);  }  LOGGER.debug("Property file not found on classpath, skipping config file");  return new HashMap<>();}  }
class C{  static public XObject create(Object val,XPathContext xctxt){  XObject result;  if (val instanceof XObject) {    result=(XObject)val;  } else   if (val instanceof String) {    result=new XString((String)val);  } else   if (val instanceof Boolean) {    result=new XBoolean((Boolean)val);  } else   if (val instanceof Number) {    result=new XNumber(((Number)val));  } else   if (val instanceof DTM) {    DTM dtm=(DTM)val;    try {      int dtmRoot=dtm.getDocument();      DTMAxisIterator iter=dtm.getAxisIterator(Axis.SELF);      iter.setStartNode(dtmRoot);      DTMIterator iterator=new OneStepIterator(iter,Axis.SELF);      iterator.setRoot(dtmRoot,xctxt);      result=new XNodeSet(iterator);    } catch (    Exception ex) {      throw new org.apache.xml.utils.WrappedRuntimeException(ex);    }  } else   if (val instanceof DTMAxisIterator) {    DTMAxisIterator iter=(DTMAxisIterator)val;    try {      DTMIterator iterator=new OneStepIterator(iter,Axis.SELF);      iterator.setRoot(iter.getStartNode(),xctxt);      result=new XNodeSet(iterator);    } catch (    Exception ex) {      throw new org.apache.xml.utils.WrappedRuntimeException(ex);    }  } else   if (val instanceof DTMIterator) {    result=new XNodeSet((DTMIterator)val);  } else   if (val instanceof org.w3c.dom.Node) {    result=new XNodeSetForDOM((org.w3c.dom.Node)val,xctxt);  } else   if (val instanceof org.w3c.dom.NodeList) {    result=new XNodeSetForDOM((org.w3c.dom.NodeList)val,xctxt);  } else   if (val instanceof org.w3c.dom.traversal.NodeIterator) {    result=new XNodeSetForDOM((org.w3c.dom.traversal.NodeIterator)val,xctxt);  } else {    result=new XObject(val);  }  return result;}  }
class C{  public PoolOperations(ViburObjectFactory connectionFactory,PoolService<ConnHolder> poolService,ViburConfig config){  this.config=config;  this.poolService=poolService;  this.connectionFactory=connectionFactory;  this.criticalSQLStates=new HashSet<>(Arrays.asList(config.getCriticalSQLStates().replaceAll("\\s","").split(",")));}  }
class C{  public void updateTime(String columnName,java.sql.Time x) throws SQLException {  updateTime(findColumn(columnName),x);}  }
class C{  public BaseSpringSystem(SpringLooper springLooper){  if (springLooper == null) {    throw new IllegalArgumentException("springLooper is required");  }  mSpringLooper=springLooper;  mSpringLooper.setSpringSystem(this);}  }
class C{  public UpdateSigner() throws Exception {  Properties antProp=new Properties();  InputStream is=UpdatePropUpdater.class.getClassLoader().getResourceAsStream("build.ant-private.properties");  if (is == null) {    throw new IOException("Loading build.ant-private.properties with parameters keystore.alias and keystore.password failed");  }  antProp.load(is);  is.close();  if ((antProp.getProperty("keystore.password") == null) || (antProp.getProperty("keystore.update-alias") == null)) {    throw new IllegalArgumentException("build.ant-private.properties is missing parameters keystore.alias or keystore.password");  }  KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());  char[] password=antProp.getProperty("keystore.password").toCharArray();  is=UpdatePropUpdater.class.getClassLoader().getResourceAsStream("keystore.ks");  if (is == null) {    throw new IOException("No keystore.ks in root folder.");  }  ks.load(is,password);  is.close();  KeyStore.PasswordProtection protection=new KeyStore.PasswordProtection(password);  KeyStore.PrivateKeyEntry pkEntry=(KeyStore.PrivateKeyEntry)ks.getEntry(antProp.getProperty("keystore.update-alias"),protection);  PrivateKey key=pkEntry.getPrivateKey();  signer=Signature.getInstance("SHA1withRSA");  signer.initSign(key);}  }
class C{  public Holder(GeneralNames entityName){  this(entityName,V2_CERTIFICATE_HOLDER);}  }
class C{  public VisibilityAwareIdentifiableScope(IScope parent,VariableVisibilityChecker checker,TypeVisibilityChecker typeVisibilityChecker,Resource context){  super(parent,typeVisibilityChecker,context);  this.checker=checker;}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  int i=0;  for (i=0; i < len; i++) {    int ch1=is.read();    int ch2=is.read();    if (ch2 < 0)     return i == 0 ? -1 : i;    cbuf[off + i]=(char)((ch1 << 8) + ch2);  }  return i;}  }
class C{  public static void shutdown(int port){  try {    ActivationSystem system=null;    try {      mesg("getting a reference to the activation system");      system=(ActivationSystem)Naming.lookup("//:" + port + "/java.rmi.activation.ActivationSystem");      mesg("obtained a reference to the activation system");    } catch (    RemoteException re) {      mesg("could not contact registry while trying to shutdown activation system");    }catch (    java.net.MalformedURLException mue) {    }    if (system == null) {      TestLibrary.bomb("reference to the activation system was null");    }    system.shutdown();  } catch (  RemoteException re) {    mesg("shutting down the activation daemon failed");  }catch (  Exception e) {    mesg("caught exception trying to shutdown rmid");    mesg(e.getMessage());    e.printStackTrace();  }  mesg("testlibrary finished shutting down rmid");}  }
class C{  public HttpSessionsAPI(ExtensionHttpSessions extension){  super();  this.extension=extension;  this.addApiAction(new ApiAction(ACTION_CREATE_EMPTY_SESSION,new String[]{ACTION_PARAM_SITE},new String[]{ACTION_PARAM_SESSION}));  this.addApiAction(new ApiAction(ACTION_REMOVE_SESSION,new String[]{ACTION_PARAM_SITE,ACTION_PARAM_SESSION}));  this.addApiAction(new ApiAction(ACTION_SET_ACTIVE_SESSION,new String[]{ACTION_PARAM_SITE,ACTION_PARAM_SESSION}));  this.addApiAction(new ApiAction(ACTION_UNSET_ACTIVE_SESSION,new String[]{ACTION_PARAM_SITE}));  this.addApiAction(new ApiAction(ACTION_ADD_SESSION_TOKEN,new String[]{ACTION_PARAM_SITE,ACTION_PARAM_TOKEN_NAME}));  this.addApiAction(new ApiAction(ACTION_REMOVE_SESSION_TOKEN,new String[]{ACTION_PARAM_SITE,ACTION_PARAM_TOKEN_NAME}));  this.addApiAction(new ApiAction(ACTION_SET_SESSION_TOKEN,new String[]{ACTION_PARAM_SITE,ACTION_PARAM_SESSION,ACTION_PARAM_TOKEN_NAME,ACTION_PARAM_TOKEN_VALUE}));  this.addApiAction(new ApiAction(ACTION_RENAME_SESSION,new String[]{ACTION_PARAM_SITE,ACTION_PARAM_SESSION_OLD_NAME,ACTION_PARAM_SESSION_NEW_NAME}));  this.addApiView(new ApiView(VIEW_SITES));  this.addApiView(new ApiView(VIEW_SESSIONS,new String[]{VIEW_PARAM_SITE},new String[]{VIEW_PARAM_SESSION}));  this.addApiView(new ApiView(VIEW_ACTIVE_SESSION,new String[]{VIEW_PARAM_SITE}));  this.addApiView(new ApiView(VIEW_SESSION_TOKENS,new String[]{VIEW_PARAM_SITE}));}  }
class C{  public int size(){  return size;}  }
class C{  public MimeMessageParser parse() throws MessagingException, IOException {  this.parse(mimeMessage);  return this;}  }
class C{  public static String acceptRoleAssignment(HttpServletRequest request,HttpServletResponse response){  ServletContext ctx=(ServletContext)request.getAttribute("servletContext");  RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");  Locale locale=UtilHttp.getLocale(request);  if (addToOrderRole(request)) {    try {      EventHandler eh=rh.getEventFactory().getEventHandler("service");      eh.invoke(new Event("service","","wfAcceptRoleAssignment",true),null,request,response);    } catch (    EventHandlerException e) {      Debug.logError(e,"Invocation error",module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderFailedToInvokeTheWfAcceptRoleAssignmentService",locale));      return "error";    }    return "success";  }  return "error";}  }
class C{  private void createBuild(){  Comment buildComment=doc.createComment("Application build");  root.appendChild(buildComment);  Element target=doc.createElement("target");  target.setAttribute("name","build");  target.setAttribute("depends","clean");  target.setAttribute("description","Builds the application");  Comment createDirectoryComment=doc.createComment("Create directory");  target.appendChild(createDirectoryComment);  Element mkdir=doc.createElement("mkdir");  mkdir.setAttribute("dir","${build.classes}");  target.appendChild(mkdir);  Comment compileSourcesComment=doc.createComment("Compile source code");  target.appendChild(compileSourcesComment);  Element javac=doc.createElement("javac");  javac.setAttribute("srcdir","${src.dir}");  javac.setAttribute("destdir","${build.classes}");  javac.setAttribute("debug","false");  javac.setAttribute("deprecation","true");  javac.setAttribute("optimize","true");  javac.setAttribute("includeantruntime","true");  target.appendChild(javac);  Comment copyNecessaryFiles=doc.createComment("Copy necessary files");  target.appendChild(copyNecessaryFiles);  Element copy=doc.createElement("copy");  copy.setAttribute("todir","${build.classes}");  Element copyFileset=doc.createElement("fileset");  copyFileset.setAttribute("dir","${src.dir}");  copyFileset.setAttribute("includes","**/*.*");  copyFileset.setAttribute("excludes","**/*.java");  copy.appendChild(copyFileset);  target.appendChild(copy);  Comment createJarComment=doc.createComment("Create JAR-file");  target.appendChild(createJarComment);  Element jar=doc.createElement("jar");  jar.setAttribute("jarfile","${build}/${name}.jar");  Element jarFileset=doc.createElement("fileset");  jarFileset.setAttribute("dir","${build.classes}");  jar.appendChild(jarFileset);  target.appendChild(jar);  root.appendChild(target);}  }
class C{  public static Signature readFrom(final Deserializer deserializer,final String label){  final byte[] bytes=deserializer.readBytes(label);  return new Signature(bytes);}  }
class C{  public BluRayFile(java.io.File bdmvDir,boolean directBuffer,int targetTitle,int readBufferSize) throws IOException {  this(null,bdmvDir,directBuffer,targetTitle,readBufferSize);}  }
class C{  public void testDisableExternalParameterEntities() throws Exception {  String xml="<!DOCTYPE foo [" + "  <!ENTITY % bar SYSTEM \"/no-such-document.xml\">" + "  %bar;"+ "]>"+ "<foo/>";  testDisableExternalEntities("http://xml.org/sax/features/external-parameter-entities",xml);}  }
class C{  public static void meterFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (inst == null || inst.isEmpty()) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_13) < 0) {    log.error("Goto Meter Instruction not supported in OpenFlow 1.0, 1.1, or 1.2");    return;  }  OFInstructionMeter.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildMeter();  String[] keyValue=inst.split("=");  if (keyValue.length != 2) {    throw new IllegalArgumentException("[Key, Value] " + keyValue + " does not have form 'key=value' parsing "+ inst);  }switch (keyValue[0]) {case STR_SUB_GOTO_METER_METER_ID:    ib.setMeterId(Long.parseLong(keyValue[1]));  break;default :log.error("Invalid String key for OFInstructionMeter: {}",keyValue[0]);}log.debug("Appending (Goto)Meter instruction: {}",ib.build());appendInstruction(fmb,ib.build());log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public AnalysisResult(){  nodeValues=new IdentityHashMap<>();  treeLookup=new IdentityHashMap<>();  stores=new IdentityHashMap<>();  finalLocalValues=new HashMap<>();}  }
class C{  @Deprecated public HibernateStore(SessionFactory aSessionFactory){  this.sessionFactory=aSessionFactory;  this.isScrollEnabled=true;  this.scrollMode=ScrollMode.FORWARD_ONLY;}  }
class C{  public boolean accept(SocketBar qSocket) throws IOException {  SocketChannelWrapperBar s=(SocketChannelWrapperBar)qSocket;  SocketChannel socket=_ss.accept();  if (socket == null) {    return false;  }  s.init(socket);  if (_connectionSocketTimeout > 0) {  }  return true;}  }
class C{  protected void addSourceElementPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_MappedElement_sourceElement_feature"),getString("_UI_PropertyDescriptor_description","_UI_MappedElement_sourceElement_feature","_UI_MappedElement_type"),SexecPackage.Literals.MAPPED_ELEMENT__SOURCE_ELEMENT,true,false,true,null,null,null));}  }
class C{  public static String bamIndexToUniqueString(InputStream is) throws IOException {  final StringBuilder ret=new StringBuilder();  final byte[] buf=new byte[4096];  readIOFully(is,buf,4);  final String header=new String(buf,0,4);  ret.append("Header correct: ").append(header.equals("BAI\u0001")).append(StringUtils.LS);  readIOFully(is,buf,4);  final int numRefs=ByteArrayIOUtils.bytesToIntLittleEndian(buf,0);  ret.append("numRefs: ").append(numRefs).append(StringUtils.LS);  ret.append(indicesToUniqueString(is,numRefs));  final int len=is.read(buf,0,8);  if (len > 0) {    IOUtils.readFully(is,buf,len,8 - len);    ret.append("Number of unmapped records with no coordinates: ").append(ByteArrayIOUtils.bytesToLongLittleEndian(buf,0));    ret.append(StringUtils.LS);  }  return ret.toString();}  }
class C{  public void disconnect(View view){  finish();}  }
class C{  @Override public Map<String,Set<URI>> findExportMasks(final StorageSystem storage,final List<String> initiatorNames,final boolean mustHaveAllPorts) throws DeviceControllerException {  return _exportMaskOperationsHelper.findExportMasks(storage,initiatorNames,mustHaveAllPorts);}  }
class C{  public void layoutContainer(final Container parent){  checkLayout(getModel());  final Insets insets=parent.getInsets();  final Dimension size=parent.getSize();  final int width=size.width - (insets.left + insets.right);  final int height=size.height - (insets.top + insets.bottom);  final Rectangle bounds=new Rectangle(insets.left,insets.top,width,height);  layout1(getModel(),bounds);  layout2(getModel(),bounds);}  }
class C{  public void test_PasswordCallback(){  String prompt="promptTest";  try {    PasswordCallback pc=new PasswordCallback(prompt,true);    assertNotNull("Null object returned",pc);    assertEquals(prompt,pc.getPrompt());    assertEquals(true,pc.isEchoOn());  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    PasswordCallback pc=new PasswordCallback(prompt,false);    assertNotNull("Null object returned",pc);    assertEquals(prompt,pc.getPrompt());    assertEquals(false,pc.isEchoOn());  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    PasswordCallback pc=new PasswordCallback(null,true);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }  try {    PasswordCallback pc=new PasswordCallback("",true);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }}  }
class C{  @Override public int hashCode(){  final long prime=2654435761L;  if (!isExpandable) {    return entry1.hashCode();  }  long result=0;  result=prime * result + ((entry1 == null) ? 0 : entry1.hashCode());  result=prime * result + ((entry2 == null) ? 0 : entry2.hashCode());  return (int)result;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private void add(ReferenceValue ref){  Clock.stop();  Trace.trace(Item.REFERENCES,"Discovered reference %s",ref);  Clock.start();  if (!oldRefs.contains(ref)) {    newRefs.add(ref);  } else {    currentRefs.add(ref);  }}  }
class C{  public void cacheInit() throws Exception {  computeRotationTime();  updateCachedKeys();}  }
class C{  protected void addByte(final byte b){  messageContents[currentOutputPosition]=b;  currentOutputPosition++;}  }
class C{  private void startJMSService() throws Exception {  broker=new BrokerService();  String brokerName="ActiveMQOutputOperator-broker";  broker.setBrokerName(brokerName);  broker.getPersistenceAdapter().setDirectory(new File("target/activemq-data/" + broker.getBrokerName() + '/'+ org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.class.getSimpleName()).getAbsoluteFile());  broker.addConnector("tcp://localhost:61617?broker.persistent=false");  broker.getSystemUsage().getStoreUsage().setLimit(1024 * 1024 * 1024);  broker.getSystemUsage().getTempUsage().setLimit(100 * 1024 * 1024);  broker.setDeleteAllMessagesOnStartup(true);  broker.start();}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public EventHit eventCategory(String value){  setString(EVENT_CATEGORY,value);  return this;}  }
class C{  private boolean isCyclic(Course cur,int[] result){  if (cur.tested)   return false;  if (cur.visited)   return true;  cur.visited=true;  for (  Course c : cur.pre) {    if (isCyclic(c,result)) {      return true;    }  }  cur.tested=true;  result[currentLabel++]=cur.number;  return false;}  }
class C{  @Override public Float remove(Object key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.151 -0500",hash_original_method="047BFF8451D039E49AAF4D452A82FBF3",hash_generated_method="60686E421DC4531B6272F4C57506CB55") public void traceMethodCalls(boolean enable){  if (enable != tracingMethods) {    if (enable) {      VMDebug.startMethodTracing();    } else {      VMDebug.stopMethodTracing();    }    tracingMethods=enable;  }}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendArea,stream);}  }
class C{  synchronized void dec(String name){  ClassLoaderBox box=(ClassLoaderBox)loaders.get(name);  if (box == null)   return;  box.users--;  if (box.users == 0)   box.unusedFrom=System.currentTimeMillis();}  }
class C{  protected Link resolveLink(final CommandRequest command,final List<Link> links){  Map<String,String> commandParametersCopy=CollectionUtils.removeKeys(new HashMap<>(command.getParameters()),NoValueFilter.INSTANCE);  Link resolvedLink=null;  int pathVariableCount=0;  for (  Link link : links) {    final List<String> pathVariables=new UriTemplate(decode(link.getHref().toString())).getVariableNames();    if (commandParametersCopy.keySet().containsAll(pathVariables)) {      if (resolvedLink == null || (pathVariables.size() > pathVariableCount)) {        resolvedLink=link;        pathVariableCount=pathVariables.size();      }    }  }  if (resolvedLink == null) {    throw new RestApiCallForCommandNotFoundException(String.format("No REST API call for command (%1$s) was found!",command.getInput()));  }  return resolvedLink;}  }
class C{  public boolean isInterfaceSubinterfaceOf(SootClass child,SootClass possibleParent){  child.checkLevel(SootClass.HIERARCHY);  possibleParent.checkLevel(SootClass.HIERARCHY);  return getSubinterfacesOf(possibleParent).contains(child);}  }
class C{  public boolean applyOptions() throws IOException {  Vector<?> model=RESULTS_LIST.getModel();  String[] bannedResults=new String[model.size()];  model.copyInto(bannedResults);  FilterSettings.BANNED_WORDS.setValue(bannedResults);  FilterSettings.FILTER_ADULT.setValue(IGNORE_ADULT_CHECK_BOX.isSelected());  return false;}  }
class C{  @Override public String toString(){  return "[" + this.hour + ","+ getDayOfMonth()+ "/"+ getMonth()+ "/"+ getYear()+ "]";}  }
class C{  private void testSocket(final SpeedTestSocket socket) throws TimeoutException, NoSuchFieldException, IllegalAccessException {  final Field fieldTask=socket.getClass().getDeclaredField("mTask");  Assert.assertNotNull(HEADER + "socket is null",fieldTask);  fieldTask.setAccessible(true);  final SpeedTestTask task=(SpeedTestTask)fieldTask.get(socket);  final Field field=task.getClass().getDeclaredField("mSocket");  Assert.assertNotNull(HEADER + "socket is null",field);  field.setAccessible(true);  Assert.assertNull(HEADER + "socket value at init",field.get(task));  socket.startDownload(TestCommon.SPEED_TEST_SERVER_HOST,TestCommon.SPEED_TEST_SERVER_PORT,TestCommon.SPEED_TEST_SERVER_URI_DL);  mWaiter.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  testSocketConnected((Socket)field.get(task));  socket.forceStopTask();  mWaiterError.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  Assert.assertTrue(HEADER + "socket closed after stop download",((Socket)field.get(task)).isClosed());  initCountDown();  socket.startUpload(TestCommon.SPEED_TEST_SERVER_HOST,TestCommon.SPEED_TEST_SERVER_URI_UL,TestCommon.FILE_SIZE_MEDIUM);  mWaiter.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  testSocketConnected((Socket)field.get(task));  socket.forceStopTask();  mWaiterError.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  Assert.assertTrue(HEADER + "socket closed after stop upload",((Socket)field.get(task)).isClosed());  initCountDown();  socket.startDownload(TestCommon.SPEED_TEST_SERVER_HOST,TestCommon.SPEED_TEST_SERVER_URI_DL);  mWaiter.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  testSocketConnected((Socket)field.get(task));  socket.forceStopTask();  mWaiterError.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  socket.closeSocket();  Assert.assertTrue(HEADER + "socket closed after stop download",((Socket)field.get(task)).isClosed());}  }
class C{  protected void removeThumbnailData(){  clearThumbnailAndStrips();  mIfdDatas[IfdId.TYPE_IFD_1]=null;}  }
class C{  public static void putBoolean(final String key,final boolean value){  final Editor editor=getOptimusPref().edit();  editor.putBoolean(key,value).apply();}  }
class C{  public ITypeBinding resolveBinding(){  AbstractTypeDeclaration d=getDeclaration();  if (d instanceof TypeDeclaration) {    return ((TypeDeclaration)d).resolveBinding();  } else   if (d instanceof AnnotationTypeDeclaration) {    return ((AnnotationTypeDeclaration)d).resolveBinding();  } else {    return null;  }}  }
class C{  public boolean hasData(){  if (disposed) {    throw new IllegalStateException("disposed profiler");  }  for (  Counter counter : counters.values()) {    if (counter.getInvocations(TimeKind.INTERPRETED_AND_COMPILED) > 0) {      return true;    }  }  return false;}  }
class C{  public Vector3f zero(){  x=y=z=0;  return this;}  }
class C{  public DrawingEntry(BaseEntry sourceEntry){  super(sourceEntry);}  }
class C{  public void testDecoder1(){  boolean res;  int originalAppIdValue=mAppIdValue;  Random rd=new Random();  for (int i=0; i < 10; i++) {    mAppIdValue=rd.nextInt(0xFFFF);    byte[] pdu=createPDU(1);    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);    assertTrue(res);    int index=(int)pduDecoder.getValue32();    res=pduDecoder.decodeXWapApplicationId(index);    assertTrue(res);    Log.d(LOG_TAG,"mAppIdValue: " + mAppIdValue + ", val: "+ pduDecoder.getValue32());    assertTrue(mAppIdValue == (int)pduDecoder.getValue32());  }  mAppIdValue=originalAppIdValue;}  }
class C{  @Pure public static boolean isVMIdentifierPart(char c){  return ((c != '.') && (c != ';') && (c != '[')&& (c != '/'));}  }
class C{  public AbstractGraph(List<Edge> edges,int numberOfVertices){  for (int i=0; i < numberOfVertices; i++) {    addVertex((V)(new Integer(i)));  }  createAdjacencyLists(edges,numberOfVertices);}  }
class C{  public final Address pop2(){  return uncheckedDequeue();}  }
class C{  protected boolean isReceiveBufferSizeChanged(){  return true;}  }
class C{  public static boolean reflectionEquals(final Object lhs,final Object rhs,final boolean testTransients){  return reflectionEquals(lhs,rhs,testTransients,null);}  }
class C{  @SuppressWarnings("deprecation") @Override protected void verifyMatch(Object target,Object deserialized){  JobDataMap targetMap=(JobDataMap)target;  JobDataMap deserializedMap=(JobDataMap)deserialized;  assertNotNull(deserializedMap);  assertEquals(targetMap.getWrappedMap(),deserializedMap.getWrappedMap());  assertEquals(targetMap.getAllowsTransientData(),deserializedMap.getAllowsTransientData());  assertEquals(targetMap.isDirty(),deserializedMap.isDirty());}  }
class C{  public JPasswordField(int columns){  this(null,null,columns);}  }
class C{  public DependentSpacingRule registerData(@NotNull Anchor anchor,int data){  myData.put(anchor,data);  return this;}  }
class C{  public QueryTimeoutImpl(long timeAllowed){  if (timeAllowed < 0L) {    timeAllowed=Long.MAX_VALUE;  }  timeoutAt=nanoTime() + TimeUnit.NANOSECONDS.convert(timeAllowed,TimeUnit.MILLISECONDS);}  }
class C{  private void bfs(char[][] grid,int i,int j){  Queue<Point> queue=new ArrayDeque<>();  grid[i][j]='0';  queue.add(new Point(i,j));  while (!queue.isEmpty()) {    Point p=queue.poll();    for (    int[] dir : dirs) {      int row=p.row + dir[0];      int col=p.col + dir[1];      if (row >= 0 && row < grid.length && col >= 0 && col < grid[row].length && grid[row][col] == '1') {        grid[row][col]='0';        queue.add(new Point(row,col));      }    }  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateChildren(changes,a);  Rectangle alloc=((a != null) && isAllocationValid()) ? getInsideAllocation(a) : null;  int pos=changes.getOffset();  View v=getViewAtPosition(pos,alloc);  if (v != null)   v.removeUpdate(changes,alloc,f);}  }
class C{  public static ColorUIResource parseColor(String information,ColorUIResource stdColor){  if (information == null || information.length() == 0 || information.trim().length() == 0)   return stdColor;  try {    int r=Integer.parseInt(information.substring(information.indexOf("r=") + 2,information.indexOf(",g=")));    int g=Integer.parseInt(information.substring(information.indexOf("g=") + 2,information.indexOf(",b=")));    int b=0;    int a=255;    if (information.indexOf("a=") == -1)     b=Integer.parseInt(information.substring(information.indexOf("b=") + 2,information.indexOf(']'))); else {      b=Integer.parseInt(information.substring(information.indexOf("b=") + 2,information.indexOf(",a=")));      a=Integer.parseInt(information.substring(information.indexOf("a=") + 2,information.indexOf(']')));    }    ColorUIResource retValue=new ColorUIResource(new Color(r,g,b,a));    return retValue;  } catch (  Exception e) {    log.config(information + " - cannot parse: " + e.toString());  }  return stdColor;}  }
class C{  private int indexOfSearchQuery(String displayName){  if (!TextUtils.isEmpty(mSearchTerm)) {    return displayName.toLowerCase(Locale.getDefault()).indexOf(mSearchTerm.toLowerCase(Locale.getDefault()));  }  return -1;}  }
class C{  public boolean isWildcard(){  return this.addressType == WILD_CARD;}  }
class C{  public void draw(Graphics2D g2d,AttributedCharacterIterator aci){  int begin=aci.getBeginIndex();  for (int idx=0; idx < gvs.length; idx++) {    GVTGlyphVector gv=gvs[idx];    int end=gv.getCharacterCount(0,gv.getNumGlyphs()) + 1;    gv.draw(g2d,new AttributedCharacterSpanIterator(aci,begin,end));    begin=end;  }}  }
class C{  public static String loadVersion(String groupId,String artifactId,String defaultVersion){  String version=null;  try {    Properties pom=loadPomProperties(groupId,artifactId);    if (pom != null) {      version=pom.getProperty("version");    }  } catch (  IOException e) {    LoggerFactory.getLogger(MavenUtil.class).warn("Unable to read version info",e);  }  if (version == null) {    version=defaultVersion;  }  return version;}  }
class C{  public void cancel(){  cancelled=true;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  private void cleanUp(){  if (rehash()) {    return;  }  if (size == 0) {    return;  }  int index=clean;  Object[] table=this.table;  for (int counter=table.length; counter > 0; counter>>=1, index=next(index)) {    Object k=table[index];    if (k == TOMBSTONE || k == null) {      continue;    }    @SuppressWarnings("unchecked") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;    if (reference.get() == null) {      table[index]=TOMBSTONE;      table[index + 1]=null;      tombstones++;      size--;    }  }  clean=index;}  }
class C{  public void addSprite(float x,float y,float z,int w,int h,float expansion){  addSprite(x,y,z,w,h,1,false,false,false,false,false,expansion);}  }
class C{  public static void exit(int code){  RUNTIME.exit(code);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  requestIds=new HashMap<String,String>();  blueSwatch=(Button)findViewById(R.id.blueswatch);  purpleSwatch=(Button)findViewById(R.id.purpleswatch);  greenSwatch=(Button)findViewById(R.id.greenswatch);  clicksLeft=(TextView)findViewById(R.id.numClicks);  centerButton=(Button)findViewById(R.id.button);}  }
class C{  @Override public void reset(){  this.reset(null);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("DateOrdered")) {      p_DateOrdered_From=(Timestamp)para[i].getParameter();      p_DateOrdered_To=(Timestamp)para[i].getParameter_To();    } else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("Vendor_ID"))     p_Vendor_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Order_ID"))     p_C_Order_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("IsDropShip"))     p_IsDropShip=((String)para[i].getParameter()).equals("Y"); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (getTable_ID() == MOrder.Table_ID && getRecord_ID() > 0)   p_C_Order_ID=getRecord_ID();}  }
class C{  protected void sequence_TObjectPrototype(ISerializationContext context,TObjectPrototype semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  c.setOpaque(false);}  }
class C{  private void resizeAndReadVector(RawByteCache cache,String key,int size,int chunkSize,int newSize) throws IOException {  logger.info("Testing vector: key=" + key + " size="+ size);  byte[] vector=makeVector(size);  cache.allocate(key);  int offset=0;  while (offset < size) {    cache.append(key,getChunk(vector,offset,chunkSize));    offset+=chunkSize;  }  logger.info("Cache: " + cache.toString());  Assert.assertEquals("Cache bytes, size=" + size,size,cache.getCurrentMemoryBytes() + cache.getCurrentStorageBytes());  cache.resize(key,newSize);  logger.info("Cache: " + cache.toString());  Assert.assertEquals("Cache bytes, size=" + newSize,newSize,cache.getCurrentMemoryBytes() + cache.getCurrentStorageBytes());  InputStream byteInput=cache.allocateStream(key);  readAndVerifyVector(getChunk(vector,0,newSize),byteInput);  cache.deallocate(key);}  }
class C{  public void render(GL2 gl){  int fSize=this.fixtures.size();  for (int i=0; i < fSize; i++) {    BodyFixture bodyFixture=this.getFixture(i);    Convex convex=bodyFixture.getShape();    this.setFillColor(gl);    RenderUtilities.fillShape(gl,convex);    this.setOutlineColor(gl);    RenderUtilities.drawShape(gl,convex,false);  }}  }
class C{  public void add(String key,String value){  if (key != null && value != null) {    Object params=urlParamsWithObjects.get(key);    if (params == null) {      params=new HashSet<String>();      this.put(key,params);    }    if (params instanceof List) {      ((List<Object>)params).add(value);    } else     if (params instanceof Set) {      ((Set<Object>)params).add(value);    }  }}  }
class C{  public synchronized void removeVetoableChangeListener(VetoableChangeListener listener){  if (vetoableChangeSupport == null) {    return;  }  vetoableChangeSupport.removeVetoableChangeListener(listener);}  }
class C{  protected BufferedImage drawImage(BufferedImage src,BufferedImage dest){  if (src == null) {    String msg=Logging.getMessage("nullValue.SourceIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (dest == null) {    String msg=Logging.getMessage("nullValue.DestinationIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Graphics2D g=null;  try {    g=dest.createGraphics();    g.drawImage(src,0,0,null);  }  finally {    if (g != null)     g.dispose();  }  return dest;}  }
class C{  private void clearUp(){  long limit=System.currentTimeMillis() - interval;  while (!data.isEmpty() && data.getLast() < limit) {    data.removeLast();  }}  }
class C{  public static Test suite(){  return (new TestSuite(EventITCase.class));}  }
class C{  public LibVlcException(){  super();}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    if (!ExamplesUtils.checkMinTopologySize(ignite.cluster(),2))     return;    System.out.println();    System.out.println(">>> Messaging example started.");    ClusterGroup rmts=ignite.cluster().forRemotes();    int msgCnt=rmts.nodes().size() * MESSAGES_NUM;    CountDownLatch orderedLatch=new CountDownLatch(msgCnt);    CountDownLatch unorderedLatch=new CountDownLatch(msgCnt);    localListen(ignite.message(ignite.cluster().forLocal()),orderedLatch,unorderedLatch);    startListening(ignite.message(rmts));    for (int i=0; i < MESSAGES_NUM; i++)     ignite.message(rmts).send(EXAMPLE_TOPIC.UNORDERED,Integer.toString(i));    System.out.println(">>> Finished sending unordered messages.");    for (int i=0; i < MESSAGES_NUM; i++)     ignite.message(rmts).sendOrdered(EXAMPLE_TOPIC.ORDERED,Integer.toString(i),0);    System.out.println(">>> Finished sending ordered messages.");    System.out.println(">>> Check output on all nodes for message printouts.");    System.out.println(">>> Will wait for messages acknowledgements from all remote nodes.");    orderedLatch.await();    unorderedLatch.await();    System.out.println(">>> Messaging example finished.");  } }  }
class C{  void restore(){  System.arraycopy(registerSave,0,register,0,blockSize);}  }
class C{  public Wine withOutputStream(OutputStream outputStream){  this.outputStream=outputStream;  return this;}  }
class C{  public static void delete(String url,boolean deleteDownloadedFileInPath,OnDeleteDownloadFileListener onDeleteDownloadFileListener){  getFileDownloadManager().delete(url,deleteDownloadedFileInPath,onDeleteDownloadFileListener);}  }
class C{  private void synchronizeThreads(final TargetProcessThread oldThread,final TargetProcessThread newThread){  if (oldThread != null) {    oldThread.removeListener(threadListener);  }  if (newThread != null) {    newThread.addListener(threadListener);  }  updateGui();}  }
class C{  public Mouse birth(){  Random random=new Random();  int godSeed=random.nextInt() % 3;  if (godSeed == 0) {    return new WhiteMouse();  } else   if (godSeed == 1) {    return new BlackMouse();  } else {    return new DeadMouse();  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static String flattenHTML(String text,char translateNbspTo){  return stripHTMLEntities(stripHTMLTags(text),translateNbspTo);}  }
class C{  public CertificateTypeExtension(ExtensionType type,boolean isClient){  super(type);  this.isClientExtension=isClient;  this.certificateTypes=new ArrayList<CertificateType>();}  }
class C{  public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);  if (!annotatedMethods.isEmpty()) {    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatedMethods));  }}  }
class C{  private void onChanged(){  if (isClean && parent != null) {    parent.markDirty();    isClean=false;  }}  }
class C{  public void unregisterAssociation(Association assoc,int regLevel) throws RegisterFailedException {  if (!OSUtils.isGoodWindows()) {    regLevel=AppConstants.SYSTEM_LEVEL;  }  BackupAssociation backupAssoc=new BackupAssociation(assoc,regLevel);  String curMimeType=backupAssoc.getCurMimeType();  String curFileExt=backupAssoc.getCurFileExt();  boolean curMimeTypeExisted=backupAssoc.getCurMimeTypeExisted();  boolean curFileExtExisted=backupAssoc.getCurFileExtExisted();  try {    if (curMimeTypeExisted) {      WinRegistryUtil.removeMimeType(curMimeType,regLevel);    }    if (curFileExtExisted) {      WinRegistryUtil.removeFileExt(curFileExt,regLevel);    }  } catch (  RegisterFailedException e) {    restoreAssociationUnregistration(backupAssoc,regLevel);    throw e;  }}  }
class C{  public StateMachineState(S id,StateMachine<S,E> submachine,Collection<E> deferred){  super(id,deferred,null,null,null,submachine);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  public Vector2f normalize(){  float length=length();  if (length != 0) {    return divide(length);  }  return divide(1);}  }
class C{  public void add_apps(@NonNull List<InstalledApp> to_add,boolean merge_with_existing){  if (_installed_apps.size() == 0) {    Collections.sort(to_add,_get_comparator());    _installed_apps=to_add;    notifyDataSetChanged();    return;  }  if (merge_with_existing) {    for (    InstalledApp app : _installed_apps) {      if (!to_add.contains(app)) {        to_add.add(app);      }    }  }  Collections.sort(to_add,_get_comparator());  for (int i=0; i < to_add.size(); ++i) {    if (_installed_apps.contains(to_add.get(i))) {      continue;    }    try {      _installed_apps.add(i,to_add.get(i));      notifyItemInserted(i);    } catch (    IndexOutOfBoundsException ignored) {      _installed_apps.add(to_add.get(i));      notifyItemInserted(_installed_apps.size() - 1);    }  }}  }
class C{  @Override public boolean addRef(Object object) throws IOException {  if (_isUnshared) {    _refCount++;    return false;  }  int newRef=_refCount;  int ref=addRef(object,newRef,false);  if (ref != newRef) {    writeRef(ref);    return true;  } else {    _refCount++;    return false;  }}  }
class C{  public Vector3fc dir(float x,float y,Vector3f dir){  float y1x=nxnyX + (nxpyX - nxnyX) * y;  float y1y=nxnyY + (nxpyY - nxnyY) * y;  float y1z=nxnyZ + (nxpyZ - nxnyZ) * y;  float y2x=pxnyX + (pxpyX - pxnyX) * y;  float y2y=pxnyY + (pxpyY - pxnyY) * y;  float y2z=pxnyZ + (pxpyZ - pxnyZ) * y;  float dx=y1x + (y2x - y1x) * x;  float dy=y1y + (y2y - y1y) * x;  float dz=y1z + (y2z - y1z) * x;  float invLen=(float)(1.0 / Math.sqrt(dx * dx + dy * dy + dz * dz));  dir.x=dx * invLen;  dir.y=dy * invLen;  dir.z=dz * invLen;  return dir;}  }
class C{  public static <T>Iterator<T> iterator(Flux<T> stream){  SeqSubscriber<T> sub=SeqSubscriber.subscriber();  Iterator<T> it=stream.subscribeWith(sub).iterator();  return it;}  }
class C{  @Override public PathImpl schemeWalk(String userPath,Map<String,Object> newAttributes,String newPath,int offset){  return getWrappedPath().schemeWalk(userPath,newAttributes,newPath,offset);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:24:54.500 -0400",hash_original_method="31B90A45F9451B6FAB059CF68DCF26BD",hash_generated_method="8CE24A3E847DEC6B396A5F750249816F") public static String waitForEvent(){  double taintDouble=0;  String retObj=new String();  retObj.addTaint(taintDouble);  return retObj;}  }
class C{  public static DateTimeFormatter hourMinuteSecondFraction(){  if (hmsf == null) {    hmsf=new DateTimeFormatterBuilder().append(hourElement()).append(minuteElement()).append(secondElement()).append(fractionElement()).toFormatter();  }  return hmsf;}  }
class C{  public Meter meter(String name){  return metrics.getMeter(name);}  }
class C{  public static Stream<Transaction> streamDirectTransactions(final Block block){  return block.getTransactions().stream();}  }
class C{  @Override public void flush(){  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  public static float midY(final CGRect aRect){  return aRect.origin.y + (float)(aRect.size.height / 2.0);}  }
class C{  public CTerminateAction(final JFrame parent,final IFrontEndDebuggerProvider debugger){  m_parent=Preconditions.checkNotNull(parent,"IE00678: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01551: Debugger argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Terminate");}  }
class C{  public CannotInvokeException(IllegalAccessException e){  super("by " + e.toString());  err=e;}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      throw new Exception("Usage: SingleIndex <indexspec>");    }    SingleIndex singleIndex=new SingleIndex();    singleIndex.setSingleIndex(argv[0]);    singleIndex.setUpper(9);    System.out.println("Input: " + argv[0] + "\n"+ singleIndex.toString());    int selectedIndex=singleIndex.getIndex();    System.out.println(selectedIndex + "");  } catch (  Exception ex) {    ex.printStackTrace();    System.out.println(ex.getMessage());  }}  }
class C{  public float[] toArray(){  float[] result=new float[size()];  float[] set=_set;  byte[] states=_states;  for (int i=states.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      result[j++]=set[i];    }  }  return result;}  }
class C{  public static boolean isUnspecified(final Command command){  return (command == null || command.isUnspecified());}  }
class C{  static protected void testsFromDirectory(TestSuite suite){  TestSuite subsuite=new TestSuite("Jython sample scripts");  suite.addTest(subsuite);  if (System.getProperty("jmri.skipjythontests","false").equals("true"))   return;  java.io.File dir=new java.io.File("jython/test");  java.io.File[] files=dir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    if (files[i].getName().toLowerCase().endsWith("test.py")) {      subsuite.addTest(new CheckOneScript(files[i]));    }  }}  }
class C{  public static boolean isNotEmpty(final int[] array){  return array != null && array.length != 0;}  }
class C{  private void doTestInjectParameter(Variant variant,URI sourceURI,String paramName,String originalValue,String hackValue,String expectedHackedURI) throws URIException, NullPointerException, CloneNotSupportedException {  HttpMessage msg=new HttpMessage();  msg.setRequestHeader(new HttpRequestHeader());  NameValuePair originalPair=new NameValuePair(NameValuePair.TYPE_URL_PATH,paramName,originalValue,1);  msg.getRequestHeader().setURI((URI)sourceURI.clone());  variant.setMessage(msg);  String param=originalPair.getName();  setParameter(msg,param,hackValue,variant,originalPair);  URI hackedURI=msg.getRequestHeader().getURI();  String hackedURIasStr=hackedURI.getURI();  assertThat("RequestHeader.uri",hackedURIasStr,is(expectedHackedURI));}  }
class C{  public static void resetSingleUse(Context context,String showcaseID){  PrefsManager.resetShowcase(context,showcaseID);}  }
class C{  File writeFile(String path,String body,File ref) throws Exception {  for (int i=0; i < 5; i++) {    File f=writeFile(path,body);    if (f.lastModified() > ref.lastModified())     return f;    Thread.sleep(2000);  }  throw new Exception("cannot create file " + path + " newer than "+ ref);}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  protected boolean printView(Graphics2D graphics2D,Shape allocation,View view){  boolean pageExists=false;  Rectangle clipRectangle=graphics2D.getClipBounds();  Shape childAllocation;  View childView;  if (view.getViewCount() > 0) {    for (int i=0; i < view.getViewCount(); i++) {      childAllocation=view.getChildAllocation(i,allocation);      if (childAllocation != null) {        childView=view.getView(i);        if (printView(graphics2D,childAllocation,childView)) {          pageExists=true;        }      }    }  } else {    if (allocation.getBounds().getMaxY() >= clipRectangle.getY()) {      pageExists=true;      if ((allocation.getBounds().getHeight() > clipRectangle.getHeight()) && (allocation.intersects(clipRectangle))) {        view.paint(graphics2D,allocation);      } else {        if (allocation.getBounds().getY() >= clipRectangle.getY()) {          if (allocation.getBounds().getMaxY() <= clipRectangle.getMaxY()) {            view.paint(graphics2D,allocation);          } else {            if (allocation.getBounds().getY() < m_PageEndY) {              m_PageEndY=allocation.getBounds().getY();            }          }        }      }    }  }  return pageExists;}  }
class C{  void emitCLDCStackMap(int pc,int localsSize){  if (lastStackMapPC == pc) {    stackMapBuffer[--stackMapBufferSize]=null;  }  lastStackMapPC=pc;  if (stackMapBuffer == null) {    stackMapBuffer=new StackMapFrame[20];  } else {    stackMapBuffer=ArrayUtils.ensureCapacity(stackMapBuffer,stackMapBufferSize);  }  StackMapFrame frame=stackMapBuffer[stackMapBufferSize++]=new StackMapFrame();  frame.pc=pc;  frame.locals=new Type[localsSize];  for (int i=0; i < localsSize; i++) {    if (state.defined.isMember(i) && lvar[i] != null) {      Type vtype=lvar[i].sym.type;      if (!(vtype instanceof UninitializedType))       vtype=types.erasure(vtype);      frame.locals[i]=vtype;    }  }  frame.stack=new Type[state.stacksize];  for (int i=0; i < state.stacksize; i++)   frame.stack[i]=state.stack[i];}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 67:{        addToken(Token.SEPARATOR);        yybegin(JSP_DIRECTIVE);      }case 79:    break;case 54:{    addToken(Token.ERROR_NUMBER_FORMAT);  }case 80:break;case 10:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.VARIABLE);}case 81:break;case 23:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE_SCRIPT);}case 82:break;case 70:{start=zzMarkedPos - 4;yybegin(HIDDEN_COMMENT);}case 83:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 84:break;case 49:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 85:break;case 5:{addToken(Token.WHITESPACE);}case 86:break;case 33:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 87:break;case 74:{addToken(Token.FUNCTION);}case 88:break;case 68:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 89:break;case 37:{addToken(Token.ERROR_STRING_DOUBLE);addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 90:break;case 42:{addToken(Token.ERROR_CHAR);}case 91:break;case 20:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 92:break;case 77:{addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 6,zzMarkedPos - 1,Token.MARKUP_TAG_NAME);start=zzMarkedPos;yybegin(INTAG_SCRIPT);}case 93:break;case 62:{addToken(Token.SEPARATOR);yybegin(YYINITIAL);}case 94:break;case 50:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(YYINITIAL);}case 95:break;case 78:{yybegin(YYINITIAL);addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 7,zzMarkedPos - 2,Token.MARKUP_TAG_NAME);addToken(zzMarkedPos - 1,zzMarkedPos - 1,Token.MARKUP_TAG_DELIMITER);}case 96:break;case 21:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 97:break;case 40:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JAVA_MLC);return firstToken;}case 98:break;case 17:{yypushback(yylength());yybegin(INTAG);}case 99:break;case 26:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 100:break;case 44:{addToken(Token.IDENTIFIER);}case 101:break;case 75:{yybegin(YYINITIAL);addToken(start,zzStartRead + 3,Token.COMMENT_MULTILINE);}case 102:break;case 76:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 103:break;case 46:{addToken(Token.SEPARATOR);yybegin(JAVA_EXPRESSION);}case 104:break;case 72:{addToken(Token.COMMENT_MULTILINE);}case 105:break;case 69:{start=zzMarkedPos - 3;yybegin(JAVA_DOCCOMMENT);}case 106:break;case 48:{start=zzMarkedPos - 2;yybegin(PI);}case 107:break;case 45:{int count=yylength();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 1);yybegin(INTAG_CHECK_TAG_NAME);}case 108:break;case 59:{yybegin(JAVA_EXPRESSION);addToken(start,zzStartRead + 1,Token.COMMENT_DOCUMENTATION);}case 109:break;case 57:{yybegin(JAVASCRIPT);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 110:break;case 28:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 111:break;case 12:{addToken(Token.OPERATOR);}case 112:break;case 38:{addToken(Token.ERROR_CHAR);addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 113:break;case 71:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 114:break;case 61:{start=zzMarkedPos - 2;yybegin(JAVA_MLC);}case 115:break;case 2:{addToken(Token.IDENTIFIER);}case 116:break;case 39:{addToken(Token.VARIABLE);}case 117:break;case 34:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_HIDDEN_COMMENT);return firstToken;}case 118:break;case 8:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 119:break;case 25:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 120:break;case 29:{addToken(Token.ERROR_STRING_DOUBLE);addEndToken(INTERNAL_IN_JS);return firstToken;}case 121:break;case 41:{addToken(Token.ERROR_STRING_DOUBLE);}case 122:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 123:break;case 36:{addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 124:break;case 24:{yybegin(JAVASCRIPT);addToken(Token.MARKUP_TAG_DELIMITER);}case 125:break;case 53:{start=zzMarkedPos - 2;yybegin(JS_MLC);}case 126:break;case 56:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 127:break;case 52:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_JS);return firstToken;}case 128:break;case 63:{yybegin(JAVA_EXPRESSION);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 129:break;case 27:{addToken(Token.ERROR_IDENTIFIER);}case 130:break;case 73:{addToken(Token.LITERAL_BOOLEAN);}case 131:break;case 18:{yypushback(1);yybegin(INTAG);}case 132:break;case 3:{addNullToken();return firstToken;}case 133:break;case 60:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 134:break;case 43:{addToken(Token.RESERVED_WORD);}case 135:break;case 13:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 136:break;case 65:{yybegin(YYINITIAL);addToken(Token.SEPARATOR);}case 137:break;case 9:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 138:break;case 64:{addToken(Token.LITERAL_CHAR);}case 139:break;case 16:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 140:break;case 35:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addEndToken(INTERNAL_IN_JAVA_DOCCOMMENT);return firstToken;}case 141:break;case 6:{addToken(Token.DATA_TYPE);}case 142:break;case 32:{addToken(Token.SEPARATOR);}case 143:break;case 66:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 2);yybegin(INTAG_CHECK_TAG_NAME);}case 144:break;case 19:{addToken(Token.MARKUP_TAG_NAME);}case 145:break;case 11:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 146:break;case 30:{addToken(Token.ERROR_CHAR);addEndToken(INTERNAL_IN_JS);return firstToken;}case 147:break;case 55:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 148:break;case 14:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 149:break;case 15:{addToken(Token.MARKUP_TAG_DELIMITER);}case 150:break;case 31:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 151:break;case 51:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 152:break;case 47:{start=zzMarkedPos - 2;yybegin(DTD);}case 153:break;case 58:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.PREPROCESSOR);start=zzMarkedPos;}case 154:break;case 22:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE_SCRIPT);}case 155:break;case 1:{}case 156:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INATTR_SINGLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT);return firstToken;}case 1258:break;case JAVA_EXPRESSION:{addEndToken(INTERNAL_IN_JAVA_EXPRESSION);return firstToken;}case 1259:break;case HIDDEN_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_HIDDEN_COMMENT);return firstToken;}case 1260:break;case JS_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 1261:break;case INTAG_SCRIPT:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG_SCRIPT);return firstToken;}case 1262:break;case JAVA_DOCCOMMENT:{yybegin(JAVA_EXPRESSION);addToken(start,zzEndRead,Token.COMMENT_DOCUMENTATION);addEndToken(INTERNAL_IN_JAVA_DOCCOMMENT);return firstToken;}case 1263:break;case JSP_DIRECTIVE:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_IN_JSP_DIRECTIVE);return firstToken;}case 1264:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 1265:break;case INATTR_DOUBLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT);return firstToken;}case 1266:break;case PI:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 1267:break;case JAVASCRIPT:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 1268:break;case INTAG:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 1269:break;case INTAG_CHECK_TAG_NAME:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 1270:break;case DTD:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 1271:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 1272:break;case YYINITIAL:{addNullToken();return firstToken;}case 1273:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 1274:break;case JAVA_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JAVA_MLC);return firstToken;}case 1275:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  Type litType(TypeTag tag){  return (tag == CLASS) ? syms.stringType : syms.typeOfTag[tag.ordinal()];}  }
class C{  private String normalize(String str){  String rpt3="(?i)VALUES\\s*\\((.*?)\\)";  String rpt4="(?i)in\\s*\\([^\\(^\\)]+\\)";  String rpt5="(?i)limit\\s+\\d+\\s*$";  String rpt6="(?i)limit\\s+\\d+\\s*,\\s*\\d+\\s*$";  str=str.replaceAll("=\\s*\\d+","=?");  str=str.replaceAll("=\\s*'[^']+'","=?");  str=str.replaceAll("\\+\\s*'?\\d+'?","+?");  str=str.replaceAll("\\-\\s*'?\\d+'?","-?");  str=str.replaceAll(">\\s*\\d+",">?");  str=str.replaceAll(">\\s*'[^']+'",">?");  str=str.replaceAll(">=\\s*\\d+",">=?");  str=str.replaceAll(">=\\s*'[^']+'",">=?");  str=str.replaceAll("<\\s*\\d+","<?");  str=str.replaceAll("<\\s*'[^']+'","<?");  str=str.replaceAll("<=\\s*'?\\d+'?","<=?");  str=str.replaceAll("<=\\s*'[^']+'","<=?");  str=str.replaceAll("(?i)BETWEEN\\s+\\d+\\s+AND\\s+\\d+","BETWEEN ? and ?");  str=str.replaceAll("(?i)BETWEEN\\s+'[^']+'\\s+AND\\s+'[^']+'","BETWEEN ? and ?");  str=str.replaceAll(rpt4,"IN (?)");  str=str.replaceAll(rpt3,"VALUES (?)");  str=str.replaceAll(rpt5,"LIMIT ?");  str=str.replaceAll(rpt6,"LIMIT ?, ?");  str=replaceInlist(str);  return str;}  }
class C{  @Override public void shutdownNow(){  ((JournalTransactionService)getTransactionService()).shutdownNow();  super.shutdownNow();}  }
class C{  protected void sequence_SimpleProjectDescription(ISerializationContext context,SimpleProjectDescription semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static int modPow(int a,int e,int n){  if (n <= 0 || (n * n) > Integer.MAX_VALUE || e < 0) {    return 0;  }  int result=1;  a=(a % n + n) % n;  while (e > 0) {    if ((e & 1) == 1) {      result=(result * a) % n;    }    a=(a * a) % n;    e>>>=1;  }  return result;}  }
class C{  public AbstractPercentPreference(){  this(ApplicationPreferences.getPreferences());}  }
class C{  @Override public int compareTo(Value o){  return hashCode() - o.hashCode();}  }
class C{  public static <E,C extends Collection<E>>SynchronizedMutableCollection<E> of(C collection){  return new SynchronizedMutableCollection<>(CollectionAdapter.adapt(collection));}  }
class C{  private FacetResult search() throws IOException, ParseException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);  Expression expr=JavascriptCompiler.compile("_score * sqrt(popularity)");  SimpleBindings bindings=new SimpleBindings();  bindings.add(new SortField("_score",SortField.Type.SCORE));  bindings.add(new SortField("popularity",SortField.Type.LONG));  FacetsCollector fc=new FacetsCollector(true);  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);  Facets facets=new TaxonomyFacetSumValueSource(taxoReader,config,fc,expr.getValueSource(bindings));  FacetResult result=facets.getTopChildren(10,"A");  indexReader.close();  taxoReader.close();  return result;}  }
class C{  private int dipsToPix(float dps){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dps,getResources().getDisplayMetrics());}  }
class C{  public ChallanAction(){  addRelatedEntity("receiptMisc.fund",Fund.class);  addRelatedEntity("challan.service",ServiceDetails.class);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:09.925 -0500",hash_original_method="5BC6394F5F5C73D6097502885E125B6B",hash_generated_method="084A9AC1CC7A4235E57585946A2F7B65") private void writeObject(ObjectOutputStream stream) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=stream.putFields();  fields.put("positivePrefix",dform.getPositivePrefix());  fields.put("positiveSuffix",dform.getPositiveSuffix());  fields.put("negativePrefix",dform.getNegativePrefix());  fields.put("negativeSuffix",dform.getNegativeSuffix());  fields.put("posPrefixPattern",(String)null);  fields.put("posSuffixPattern",(String)null);  fields.put("negPrefixPattern",(String)null);  fields.put("negSuffixPattern",(String)null);  fields.put("multiplier",dform.getMultiplier());  fields.put("groupingSize",(byte)dform.getGroupingSize());  fields.put("groupingUsed",dform.isGroupingUsed());  fields.put("decimalSeparatorAlwaysShown",dform.isDecimalSeparatorAlwaysShown());  fields.put("parseBigDecimal",dform.isParseBigDecimal());  fields.put("roundingMode",roundingMode);  fields.put("symbols",symbols);  fields.put("useExponentialNotation",false);  fields.put("minExponentDigits",(byte)0);  fields.put("maximumIntegerDigits",dform.getMaximumIntegerDigits());  fields.put("minimumIntegerDigits",dform.getMinimumIntegerDigits());  fields.put("maximumFractionDigits",dform.getMaximumFractionDigits());  fields.put("minimumFractionDigits",dform.getMinimumFractionDigits());  fields.put("serialVersionOnStream",4);  stream.writeFields();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.301 -0500",hash_original_method="26B3CB37F20A0B53C2CE3E9A4CAEEB23",hash_generated_method="65C35583B33AC219F8D79447C6A677D0") protected synchronized WebBackForwardList clone(){  WebBackForwardList l=new WebBackForwardList(null);  if (mClearPending) {    l.addHistoryItem(getCurrentItem());    return l;  }  l.mCurrentIndex=mCurrentIndex;  int size=getSize();  l.mArray=new ArrayList<WebHistoryItem>(size);  for (int i=0; i < size; i++) {    l.mArray.add(mArray.get(i).clone());  }  return l;}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (environment == null) {    throw new InternalTranslationException("Error: Argument environment cannot be null");  }  if (instructions == null) {    throw new InternalTranslationException("Error: Argument instructions cannot be null");  }  if (offset < 0) {    throw new InternalTranslationException("Error: Argument offset cannot be less than 0");  }  final String connected=environment.getNextVariableString();  final String ored=environment.getNextVariableString();  final String negated=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,connected));  instructions.add(ReilHelpers.createOr(offset + 1,OperandSize.BYTE,connected,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,ored));  instructions.add(ReilHelpers.createXor(offset + 2,OperandSize.BYTE,ored,OperandSize.BYTE,"1",OperandSize.BYTE,negated));  return new Pair<OperandSize,String>(OperandSize.BYTE,negated);}  }
class C{  public static String buildPosterUrl(String imagePath,int width){  String widthPath;  if (width <= 92)   widthPath="/w92"; else   if (width <= 154)   widthPath="/w154"; else   if (width <= 185)   widthPath="/w185"; else   if (width <= 342)   widthPath="/w342"; else   if (width <= 500)   widthPath="/w500"; else   widthPath="/w780";  return BASE_URL + widthPath + imagePath;}  }
class C{  public SGraphEditPlugin(){  super(new ResourceLocator[]{BaseEditPlugin.INSTANCE,TypesEditPlugin.INSTANCE});}  }
class C{  public static double nextUp(double d){  if (d == Double.POSITIVE_INFINITY)   return d; else {    d+=0.0d;    return Double.longBitsToDouble(Double.doubleToRawLongBits(d) + ((d >= 0.0d) ? +1L : -1L));  }}  }
class C{  public GraphNodeMeasured(Node modelNode){  setModelNode(modelNode);  if (modelNode.getNodeType() != NodeType.MEASURED) {    throw new IllegalArgumentException("GraphNodeMeasured requires " + "a GraphNode of type NodeType.MEASURED.");  }  setDisplayComp(new MeasuredDisplayComp(modelNode.getName()));}  }
class C{  protected void selectRenderables(DrawContext dc){  ArrayList<GraticuleTile> tileList=getVisibleTiles(dc);  if (tileList.size() > 0) {    for (    GraticuleTile gz : tileList) {      gz.selectRenderables(dc);    }  }}  }
class C{  protected void initGUI(){  update();}  }
class C{  public void finalizeIndex(){  storeBuffer();}  }
class C{  @Override public Channel createChannel(int fromMemberId,int toMemberId){  SocketChannel channel=new NastyChannel(gondola,fromMemberId,toMemberId);  channels.add(channel);  return channel;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == GamlDefinition.class) {switch (derivedFeatureID) {case GamlPackage.MODEL__NAME:      return GamlPackage.GAML_DEFINITION__NAME;default :    return -1;}}if (baseClass == VarDefinition.class) {switch (derivedFeatureID) {default :  return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private static String pack(String value,int len,boolean prepend,char pad){  int vlen=value.length();  if (vlen < len) {    StringBuffer sbuf=new StringBuffer();    if (prepend)     sbuf.append(value);    for (int i=len; i < vlen; ++i)     sbuf.append(pad);    if (!prepend)     sbuf.append(value);    return sbuf.toString();  } else {    return value.substring(0,len);  }}  }
class C{  public void swipeUpdated(long time,float x,float y,float dx,float dy,float tx,float ty){  if (!mInSwipe)   return;  final float toolbarSize=mLayout.getHeight() - mLayout.getHeightMinusTopControls();  if (ty > toolbarSize)   mSwipeCanScroll=true;  if (!mSwipeCanScroll)   return;  final int index=mTabModel.index();  if (index < 0 || index >= mStackTabs.length) {    assert false : "Tab index out of bounds in Stack#swipeUpdated()";    return;  }  final float delta=mCurrentMode == Orientation.PORTRAIT ? dy : dx;  mSwipeUnboundScrollOffset+=delta;  final float minScroll=getMinScroll(true);  final float maxScroll=getMaxScroll(true);  float offset=MathUtils.clamp(mSwipeUnboundScrollOffset,minScroll,maxScroll);  final float constrainedDelta=offset - mSwipeBoundedScrollOffset;  mSwipeBoundedScrollOffset=offset;  if (constrainedDelta == 0.f)   return;  if (mCurrentMode == Orientation.PORTRAIT) {    dy=constrainedDelta;  } else {    dx=constrainedDelta;  }  drag(time,x,y,dx,dy);  if (mCurrentMode == Orientation.PORTRAIT) {    final float discardOffset=mStackTabs[index].getScrollOffset();    final boolean beyondThreshold=-mScrollOffset < discardOffset;    mSwipeIsCancelable|=beyondThreshold;    if (mSwipeIsCancelable && !beyondThreshold)     swipeCancelled(time);  } else {    final float discardOffset=mStackTabs[index].getLayoutTab().getY();    boolean aboveThreshold=discardOffset < getRange(SWIPE_LANDSCAPE_THRESHOLD);    mSwipeIsCancelable|=!aboveThreshold;    if (mSwipeIsCancelable && aboveThreshold)     swipeCancelled(time);  }}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public Object isNull(Object o,Object dflt){  if (o == null) {    return dflt;  } else {    return o;  }}  }
class C{  private Object readResolve() throws ObjectStreamException {  try {    if (array == null) {      throw new InvalidObjectException("null array");    }switch (tag & 0xff) {case IMM_LIST:      return ImmutableCollections.listOf(array);case IMM_SET:    return ImmutableCollections.setOf(array);case IMM_MAP:  if (array.length == 0) {    return ImmutableCollections.Map0.EMPTY_MAP;  } else   if (array.length == 2) {    return new ImmutableCollections.Map1<Object,Object>(array[0],array[1]);  } else {    return new ImmutableCollections.MapN<Object,Object>(array);  }default :throw new InvalidObjectException(String.format("invalid flags 0x%x",tag));}} catch (NullPointerException ex) {throw ioe(ex);}catch (IllegalArgumentException ex) {throw ioe(ex);}}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public boolean insertsAreDetected(int type) throws SQLException {  return false;}  }
class C{  public void postCommit(){  final boolean protectTransients=m_sessionActive || m_store.isSessionProtected();  for (  AllocBlock b : m_allocBlocks) {    b.m_commit=b.m_live.clone();    if (!protectTransients)     b.m_transients=b.m_live.clone();    if (m_context != null) {    } else {      b.m_commit=b.m_live.clone();      if (b.m_saveCommit != null) {        if (!m_pendingContextCommit)         throw new IllegalStateException("Unexpected m_saveCommit when no pending commit");        b.m_saveCommit=null;        b.m_isoFrees=null;      }    }  }  if (m_pendingContextCommit) {    m_pendingContextCommit=false;    if (m_freeWaiting && meetsSmallSlotThreshold()) {      addToFreeList();    }  }  if (!protectTransients) {    m_freeBits+=m_freeTransients;    if (m_freeWaiting && meetsSmallSlotThreshold()) {      addToFreeList();    }    m_freeTransients=0;  }  if (s_islogDebug)   checkBits();}  }
class C{  public Iterator<List<Edge>> iterator(){  return pathList.iterator();}  }
class C{  public EventEntry addParticipant(Who participant){  super.addElement(Who.KEY,participant);  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  String childValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.setNodeValue("Marilyn Martin");  childData=child.getData();  assertEquals("data","Marilyn Martin",childData);  childValue=child.getNodeValue();  assertEquals("value","Marilyn Martin",childValue);}  }
class C{  protected void sequence_FinallyBlock(ISerializationContext context,FinallyBlock semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ABSTRACT_CATCH_BLOCK__BLOCK) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ABSTRACT_CATCH_BLOCK__BLOCK));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0(),semanticObject.getBlock());  feeder.finish();}  }
class C{  public SelectionInputDialog(Window owner,String key,T[] selectionValues,T initialSelectionValue){  this(owner,key,selectionValues,initialSelectionValue,new Object[]{});}  }
class C{  public void connectionLost(Throwable cause){  connected=false;  syncOut(getDate() + Messages.MqttClientView_45);  String connectString=connectAddress + ":" + connectPort;  syncOut(getDate() + Messages.MqttClientView_47 + connectString);  try {    mqttClient.connect(connOpts);  } catch (  Exception e) {    syncOut(getDate() + Messages.MqttClientView_48);    syncOut(getDate() + Messages.MqttClientView_49);  }  connected=true;  syncOut(getDate() + Messages.MqttClientView_50 + clientId);}  }
class C{  @Override public void mousePressed(MouseEvent e){}  }
class C{  public static Border createBevelLowered(){  Border b=new Border();  b.type=TYPE_BEVEL_LOWERED;  b.themeColors=true;  b.thickness=2;  return b;}  }
class C{  public void testByteArraysAsBase64() throws Exception {  JsonFactory jf=new JsonFactory();  StringWriter sw=new StringWriter(1000);  final int entryCount=15;  JsonGenerator jg=jf.createJsonGenerator(sw);  jg.writeStartArray();  byte[][] entries=new byte[entryCount][];  for (int i=0; i < entryCount; ++i) {    byte[] b=new byte[1000 - i * 20];    for (int x=0; x < b.length; ++x) {      b[x]=(byte)(i + x);    }    entries[i]=b;    jg.writeBinary(b);  }  jg.writeEndArray();  jg.close();  String inputData=sw.toString();  ObjectMapper mapper=new ObjectMapper();  byte[][] result=mapper.readValue(inputData,byte[][].class);  assertNotNull(result);  assertEquals(entryCount,result.length);  for (int i=0; i < entryCount; ++i) {    byte[] b=result[i];    assertArrayEquals("Comparing entry #" + i + "/"+ entryCount,entries[i],b);  }}  }
class C{  public static LineCoordinateGenerator fromRadians(double[] radians){  return new LineCoordinateGenerator(radians);}  }
class C{  public int constrain(int size,float refValue,ContainerWrapper parent){  if (max != null)   size=Math.min(size,max.getPixels(refValue,parent,parent));  if (min != null)   size=Math.max(size,min.getPixels(refValue,parent,parent));  return size;}  }
class C{  public Card build(){  if (imageUri == null) {    throw new IllegalStateException("App Card requires a non-null imageUri");  }  return new Card(APP_CARD_TYPE,imageUri.toString(),appName,appIPhoneId,appIPadId,appGooglePlayId);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.270 -0400",hash_original_method="A242DFA5F52516C95D0F167B92B745B6",hash_generated_method="1891156C8FEFAA68CD85CC13506CC1D3") protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  public void mouseClicked(MouseEvent ev){  if (!tryPopup(ev) && SwingUtilities.isLeftMouseButton(ev)) {    if (!isResizing)     hmo.handleHeaderColumnLeftClick(ev.getPoint()); else     isResizing=false;  }}  }
class C{  @Override public void runPlugin(String pluginName,String[] args){  host.runPlugin(pluginName,args);  if (automaticallyClose) {    this.dispose();  }}  }
class C{  public TPipeline(List<Step> steps){  this.uniqueSources=new HashMap<>();  this.steps=new ArrayList<>();  this.numSources=0;  this.connections=new HashMap<>();  this.stepInstances=new HashMap<>();  set(steps.stream().filter(null).collect(Collectors.toList()));}  }
class C{  public boolean checkError(){  OutputStream delegate=out;  if (delegate == null) {    return ioError;  }  flush();  return ioError || delegate.checkError();}  }
class C{  public Connection connect(String url,Properties info) throws SQLException {  Driver d=getUnderlyingDriver(url);  if (d == null) {    return null;  }  url=url.substring(9);  lastUnderlyingDriverRequested=d;  Connection c=d.connect(url,info);  if (c == null) {    throw new SQLException("invalid or unknown driver url: " + url);  }  if (log.isJdbcLoggingEnabled()) {    ConnectionSpy cspy=new ConnectionSpy(c);    RdbmsSpecifics r=null;    String dclass=d.getClass().getName();    if (dclass != null && dclass.length() > 0) {      r=(RdbmsSpecifics)rdbmsSpecifics.get(dclass);    }    if (r == null) {      r=defaultRdbmsSpecifics;    }    cspy.setRdbmsSpecifics(r);    return cspy;  } else {    return c;  }}  }
class C{  @Override public int read(char[] chars) throws IOException {  return read(chars,0,chars.length - 1);}  }
class C{  private void checkLocation(int i,Location location){  assertEquals(INITIAL_LATITUDE + (double)i / 10000.0,location.getLatitude());  assertEquals(INITIAL_LONGITUDE - (double)i / 10000.0,location.getLongitude());  assertEquals((float)i / 100.0f,location.getAccuracy());  assertEquals(i * ALTITUDE_INTERVAL,location.getAltitude());}  }
class C{  private Token createNewToken(StorageOSUserDAO user){  Token token=new Token();  token.setId(URIUtil.createId(Token.class));  token.setUserId(user.getId());  long timeNow=getCurrentTimeInMins();  token.setIssuedTime(timeNow);  token.setLastAccessTime(timeNow);  token.setExpirationTime(timeNow + (_maxLifeValuesHolder.getMaxTokenLifeTimeInMins()));  token.setIndexed(true);  _dbClient.persistObject(token);  return token;}  }
class C{  public ConverterConfiguration(Class<?>... classes){  for (  Class<?> clazz : classes) {    processClass(clazz);  }}  }
class C{  public static boolean hasExtension(int type,String name){switch (type) {case 0:    if (name.toLowerCase().endsWith(".stl"))     return true;  break;case 1:if ((name.toLowerCase().endsWith(".gcode")) || (name.toLowerCase().endsWith(".gco")) || (name.toLowerCase().endsWith(".g"))) return true;break;}return false;}  }
class C{  public Door(final String clazz,final String rejectMessage){  super(rejectMessage);  setRPClass("door");  put("type","door");  setEntityClass(clazz);  open=false;}  }
class C{  public void initialize(Context context,boolean is24HourMode,boolean hasInnerCircle,boolean disappearsOut,int selectionDegrees,boolean isInnerCircle){  if (mIsInitialized) {    Log.e(TAG,"This RadialSelectorView may only be initialized once.");    return;  }  Resources res=context.getResources();  int blue=res.getColor(R.color.red_button);  mPaint.setColor(blue);  mPaint.setAntiAlias(true);  mIs24HourMode=is24HourMode;  if (is24HourMode) {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.circle_radius_multiplier_24HourMode));  } else {    mCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.circle_radius_multiplier));    mAmPmCircleRadiusMultiplier=Float.parseFloat(res.getString(R.string.ampm_circle_radius_multiplier));  }  mHasInnerCircle=hasInnerCircle;  if (hasInnerCircle) {    mInnerNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_inner));    mOuterNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_outer));  } else {    mNumbersRadiusMultiplier=Float.parseFloat(res.getString(R.string.numbers_radius_multiplier_normal));  }  mSelectionRadiusMultiplier=Float.parseFloat(res.getString(R.string.selection_radius_multiplier));  mAnimationRadiusMultiplier=1;  mTransitionMidRadiusMultiplier=1f + (0.05f * (disappearsOut ? -1 : 1));  mTransitionEndRadiusMultiplier=1f + (0.3f * (disappearsOut ? 1 : -1));  mInvalidateUpdateListener=new InvalidateUpdateListener();  setSelection(selectionDegrees,isInnerCircle,false);  mIsInitialized=true;}  }
class C{  static byte[] altBase64ToByteArray(String s){  return base64ToByteArray(s,true);}  }
class C{  byte[] unparseMethod(method_info m){  int codesize;  byte bc[];  Instruction i;  m.cfg.reconstructInstructions();  codesize=relabel(m.instructions);  bc=new byte[codesize];  if (bc == null) {    G.v().out.println("Warning: can't allocate memory for recompile");    return null;  }  i=m.instructions;  codesize=0;  while (i != null) {    codesize=i.compile(bc,codesize);    i=i.next;  }  if (codesize != bc.length)   G.v().out.println("Warning: code size doesn't match array length!");  return bc;}  }
class C{  private void startContentSynchronizations(List<SynchronizeFileOperation> filesToSyncContents,OwnCloudClient client){  RemoteOperationResult contentsResult;  for (  SynchronizeFileOperation op : filesToSyncContents) {    contentsResult=op.execute(mStorageManager,mContext);    if (!contentsResult.isSuccess()) {      if (contentsResult.getCode() == ResultCode.SYNC_CONFLICT) {        mConflictsFound++;      } else {        mFailsInFavouritesFound++;        if (contentsResult.getException() != null) {          Log_OC.e(TAG,"Error while synchronizing favourites : " + contentsResult.getLogMessage(),contentsResult.getException());        } else {          Log_OC.e(TAG,"Error while synchronizing favourites : " + contentsResult.getLogMessage());        }      }    }  }}  }
class C{  public synchronized void end(){  this.active=false;  this.beginPosition=null;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private void doDeleteEntry(String alias) throws Exception {  if (keyStore.containsAlias(alias) == false) {    MessageFormat form=new MessageFormat(rb.getString("Alias.alias.does.not.exist"));    Object[] source={alias};    throw new Exception(form.format(source));  }  keyStore.deleteEntry(alias);}  }
class C{  public boolean isGL(){  return g.isGL();}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  super.onTouchEvent(event);  boolean clickCaptured=processTouchEvent(event);  boolean scrollCaptured=scroller != null && scroller.onTouchEvent(event);  boolean singleTapCaptured=getGestureDetectorCompat().onTouchEvent(event);  return clickCaptured || scrollCaptured || singleTapCaptured;}  }
class C{  public void addRectangle(float lt1,float ln1,int x1,int y1,int x2,int y2,LinkProperties properties) throws IOException {  LinkRectangle.write(lt1,ln1,x1,y1,x2,y2,properties,link.dos);}  }
class C{  private static synchronized void createOperatingSystemInfoProvider() throws Exception {  if (null == operatingSystemInfoProvider) {    operatingSystemInfoProvider=new IbmJava6OperatingSystemInfoProvider();  }}  }
class C{  static public boolean isActive(String name) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, java.lang.reflect.InvocationTargetException {  String classname=name + ".ActiveFlag";  Class<?> c=Class.forName(classname);  java.lang.reflect.Method m=c.getMethod("isActive",(Class[])null);  Object b=m.invoke(null,(Object[])null);  return ((Boolean)b).booleanValue();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z, val;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean onlyInterolateInteriorHoles=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    image.isReflectedAtEdges=true;    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z == noData) {          output.setValue(row,col,1);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 6: ",progress);    }    if (onlyInterolateInteriorHoles) {      int[] scanFilter=new int[]{6,7,0,5};      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z == 1) {            for (int a=0; a < 4; a++) {              x=col + dX[scanFilter[a]];              y=row + dY[scanFilter[a]];              z=output.getValue(y,x);              if (z == -1 || x < 0 || x >= cols || y < 0 || y >= rows) {                output.setValue(row,col,-1);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 6: ",progress);      }      scanFilter=new int[]{4,3,2,1};      for (row=(rows - 1); row >= 0; row--) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z == 1) {            for (int a=0; a < 4; a++) {              x=col + dX[scanFilter[a]];              y=row + dY[scanFilter[a]];              z=output.getValue(y,x);              if (z == -1 || x < 0 || x >= cols || y < 0 || y >= rows) {                output.setValue(row,col,-1);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * 1 - row / (rows - 1));        updateProgress("Loop 3 of 6: ",progress);      }    }    int k=0;    boolean neighboursNoData=false;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          neighboursNoData=false;          for (i=0; i < 8; i++) {            if (output.getValue(row + dY[i],col + dX[i]) == 1) {              neighboursNoData=true;              break;            }          }          if (neighboursNoData) {            k++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 4 of 6: ",progress);    }    KdTree<Double> tree=new KdTree.SqrEuclid<Double>(2,k);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          neighboursNoData=false;          for (i=0; i < 8; i++) {            if (output.getValue(row + dY[i],col + dX[i]) == 1) {              neighboursNoData=true;              break;            }          }          if (neighboursNoData) {            double[] entry={row,col};            tree.addPoint(entry,z);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 5 of 6: ",progress);    }    List<KdTree.Entry<Double>> results;    double sumWeights;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=output.getValue(row,col);        if (z == 1) {          double[] entry={row,col};          results=tree.nearestNeighbor(entry,6,true);          sumWeights=0;          for (i=0; i < results.size(); i++) {            sumWeights+=1 / (results.get(i).distance);          }          val=0;          for (i=0; i < results.size(); i++) {            val+=(1 / (results.get(i).distance)) / sumWeights * results.get(i).value;          }          output.setValue(row,col,val);        } else {          output.setValue(row,col,image.getValue(row,col));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 6 of 6: ",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final double[] regression(Matrix y,double[] w,double ridge){  return getMatrix().regression(y.getMatrix(),w,ridge).getCoefficients();}  }
class C{  public static Number div(Number left,Character right){  return NumberNumberDiv.div(left,Integer.valueOf(right));}  }
class C{  public List<Document> search(Query query,boolean prefixWildCard){  List<Document> documents=new ArrayList<Document>();  try {    IndexSearcher searcher=getSearcher();    TopDocs search=searcher.search(query,10000);    for (    ScoreDoc scoreDoc : search.scoreDocs) {      Document doc=searcher.doc(scoreDoc.doc);      documents.add(doc);    }  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  }  return documents;}  }
class C{  public void testSHA256Encoding() throws Exception {  MessageDigest digest=MessageDigest.getInstance("SHA-256");  Base64.encode(digest.digest("password".getBytes()));}  }
class C{  private int height(){  int width=width();  if (width > 0) {    return get(0).size();  }  return 0;}  }
class C{  public static void registerStorageType(ResourceLocation id,Class<? extends ChunkStorage> storageClass){  if (STORAGE_MAP.containsKey(id))   throw new RuntimeException("Duplicate chunk storage ID");  STORAGE_MAP.put(id,storageClass);}  }
class C{  public String toString(){  if (m_Classifier == null) {    return "MultiScheme: No model built yet.";  }  String result="MultiScheme selection using";  if (m_NumXValFolds > 1) {    result+=" cross validation error";  } else {    result+=" error on training data";  }  result+=" from the following:\n";  for (int i=0; i < m_Classifiers.length; i++) {    result+='\t' + getClassifierSpec(i) + '\n';  }  result+="Selected scheme: " + getClassifierSpec(m_ClassifierIndex) + "\n\n"+ m_Classifier.toString();  return result;}  }
class C{  public CountSimComparisonKMLWriter(final List<CountSimComparison> countSimCompList,final Counts counts,final CoordinateTransformation coordTransform,String graphname){  super(countSimCompList);  this.network=null;  this.counts=counts;  this.coordTransform=coordTransform;  this.graphname=graphname;}  }
class C{  public static void process(SsaMethod ssaMethod){  ConstCollector cc=new ConstCollector(ssaMethod);  cc.run();}  }
class C{  private void updateUiFromCommand(Command command){  if (command == null) {    return;  }  actionsComboBox.setText(command.getAction());  dataTextField.setText(command.getData());  categoryTextField.setText(command.getCategory());  mimeTextField.setText(command.getMimeType());  componentTextField.setText(command.getComponent());  userTextField.setText(command.getUser());  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());  List<IntentFlags> flags=command.getFlags();  if (flags != null && flags.size() > 0) {    for (    IntentFlags flag : command.getFlags()) {      flagsList_.setSelectedValue(flag,false);    }  } else {    flagsList_.setSelectedIndex(0);  }  updateFlagsTextField();  tableModel_.removeAllRows();  List<ExtraField> extras=command.getExtras();  if (extras != null && extras.size() > 0) {    for (    ExtraField extra : extras) {      tableModel_.addRow(extra);    }  }  updateTableVisibility();}  }
class C{  public String normTipText(){  return "The norm of the instances after normalization.";}  }
class C{  String createLargeBody(int minimumSize){  StringBuilder sb=new StringBuilder();  while (sb.length() <= minimumSize) {    sb.append(UUID.randomUUID().toString());  }  return sb.toString();}  }
class C{  public static boolean ipAddressNotConfigured(LinkedHashMap<String,String> ipv4,LinkedHashMap<String,String> ipv6){  boolean ipv4IsDefault=isIpv4Default(ipv4);  boolean ipv6IsDefault=isIpv6Default(ipv6);  if (ipv4IsDefault && ipv6IsDefault) {    return true;  } else {    return false;  }}  }
class C{  public static long reverseBits(final boolean value){  return value ? 1 : 0;}  }
class C{  public void traverseSample(TreeModel tree,NodeRef node,int[] parentState){  int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  double[] conditionalProbabilities=new double[stateCount];  int[] state=new int[patternCount];  if (!tree.isExternal(node)) {    if (parent == null) {      double[] rootPartials=getRootPartials();      for (int j=0; j < patternCount; j++) {        System.arraycopy(rootPartials,j * stateCount,conditionalProbabilities,0,stateCount);        double[] frequencies=frequencyModel.getFrequencies();        for (int i=0; i < stateCount; i++) {          conditionalProbabilities[i]*=frequencies[i];        }        try {          state[j]=drawChoice(conditionalProbabilities);        } catch (        Error e) {          System.err.println(e.toString());          System.err.println("Please report error to Marc");          state[j]=0;        }        reconstructedStates[nodeNum][j]=state[j];        jointLogLikelihood+=Math.log(frequencies[state[j]]);      }    } else {      double[] partialLikelihood=new double[stateCount * patternCount];      if (categoryCount > 1)       throw new RuntimeException("Reconstruction not implemented for multiple categories yet.");      likelihoodCore.getPartials(nodeNum,partialLikelihood);      ((AbstractLikelihoodCore)likelihoodCore).getNodeMatrix(nodeNum,0,probabilities);      for (int j=0; j < patternCount; j++) {        int parentIndex=parentState[j] * stateCount;        int childIndex=j * stateCount;        for (int i=0; i < stateCount; i++) {          conditionalProbabilities[i]=partialLikelihood[childIndex + i] * probabilities[parentIndex + i];        }        state[j]=drawChoice(conditionalProbabilities);        reconstructedStates[nodeNum][j]=state[j];        double contrib=probabilities[parentIndex + state[j]];        jointLogLikelihood+=Math.log(contrib);      }    }    NodeRef child1=tree.getChild(node,0);    traverseSample(tree,child1,state);    NodeRef child2=tree.getChild(node,1);    traverseSample(tree,child2,state);  } else {    ((AbstractLikelihoodCore)likelihoodCore).getNodeStates(nodeNum,reconstructedStates[nodeNum]);    for (int j=0; j < patternCount; j++) {      final int thisState=reconstructedStates[nodeNum][j];      final int parentIndex=parentState[j] * stateCount;      ((AbstractLikelihoodCore)likelihoodCore).getNodeMatrix(nodeNum,0,probabilities);      if (dataType.isAmbiguousState(thisState)) {        System.arraycopy(probabilities,parentIndex,conditionalProbabilities,0,stateCount);        reconstructedStates[nodeNum][j]=drawChoice(conditionalProbabilities);      }      double contrib=probabilities[parentIndex + reconstructedStates[nodeNum][j]];      jointLogLikelihood+=Math.log(contrib);    }  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 126) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  public FloatMemberValue(int index,ConstPool cp){  super('F',cp);  this.valueIndex=index;}  }
class C{  public QName(String localName){  this(localName,false);}  }
class C{  public static void notEmpty(int[] arr,String name){  notNull(arr,name);  if (arr.length == 0)   throw new IllegalArgumentException(INVALID_ARG_MSG_PREFIX + name + NOT_EMPTY_SUFFIX);}  }
class C{  private Point mirror_2nd_SemicirclePoint(Point firstSemicirclePoint){  return new Point(firstSemicirclePoint.getX(),-firstSemicirclePoint.getY() + 2 * mY0);}  }
class C{  protected static void saveGroupNodes(final SQLProvider provider,final List<INaviViewNode> nodes,final int firstNode,final List<Integer> groupNodeIndices) throws SQLException {  Preconditions.checkNotNull(provider,"IE02525: connection argument can not be null");  Preconditions.checkNotNull(nodes,"IE02526: nodes argument can not be null");  Preconditions.checkNotNull(groupNodeIndices,"Error: groupNodeIndices argument can not be null");  if (!groupNodeIndices.isEmpty()) {    final String query="INSERT INTO " + CTableNames.GROUP_NODES_TABLE + "(node_id, collapsed, comment_id) VALUES (?, ?, ?)";    final PreparedStatement preparedStatement=provider.getConnection().getConnection().prepareStatement(query);    final List<INaviGroupNode> groupNodesWithUnsavedComments=new ArrayList<INaviGroupNode>();    try {      for (      final Integer index : groupNodeIndices) {        final INaviGroupNode node=(INaviGroupNode)nodes.get(index);        preparedStatement.setInt(1,firstNode + index);        preparedStatement.setBoolean(2,node.isCollapsed());        final List<IComment> comment=node.getComments();        final Integer commentId=comment == null ? null : comment.size() == 0 ? null : Iterables.getLast(comment).getId();        if ((comment != null) && (comment.size() != 0) && (commentId == null)) {          groupNodesWithUnsavedComments.add(node);        }        if (commentId == null) {          preparedStatement.setNull(3,Types.INTEGER);        } else {          preparedStatement.setInt(3,commentId);        }        preparedStatement.addBatch();      }      preparedStatement.executeBatch();    }  finally {      preparedStatement.close();    }    for (    final INaviGroupNode groupNode : groupNodesWithUnsavedComments) {      final ArrayList<IComment> groupNodeComments=new ArrayList<IComment>();      for (      final IComment comment : groupNode.getComments()) {        try {          final Integer commentId=provider.appendGroupNodeComment(groupNode,comment.getComment(),comment.getUser().getUserId());          final IComment newComment=new CComment(commentId,comment.getUser(),comment.getParent(),comment.getComment());          groupNodeComments.add(newComment);        } catch (        final CouldntSaveDataException exception) {          CUtilityFunctions.logException(exception);        }      }      groupNode.initializeComment(groupNodeComments);    }  }}  }
class C{  static Rectangle translateCoordinates(long src,long dst,Rectangle r){  Point translatedLoc=translateCoordinates(src,dst,r.getLocation());  if (translatedLoc == null) {    return null;  } else {    return new Rectangle(translatedLoc,r.getSize());  }}  }
class C{  static List<String> checkGitRequirements(final TestableProcessFactory processFactory){  final String trimmedResponse=fetchGitVersion(processFactory);  return isValidGitVersion(trimmedResponse);}  }
class C{  public Cursor rawQueryWithFactory(CursorFactory cursorFactory,String sql,String[] selectionArgs,String editTable){  verifyDbIsOpen();  Cursor cursor=null;  PreparedStatement statement=null;  ResultSet resultSet=null;  try {synchronized (connection) {      statement=prepareStatement(connection,sql,(Object[])selectionArgs);      resultSet=statement.executeQuery();      return new Cursor(statement,resultSet);    }  } catch (  Throwable e) {    LOG.warn("Error performing SQL statement: " + sql,e);  }  return cursor;}  }
class C{  public int length(){  return getSize();}  }
class C{  protected SRegResponse(ParameterList params){  _parameters=params;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.924 -0500",hash_original_method="4616EBEA9D2FF88EEA02D51F5D1F1A7C",hash_generated_method="F722B0DF9628C717F5A61713FDCA07A3") @Override public String toString(){  StringBuilder sb=new StringBuilder("GsmMmiCode {");  sb.append("State=" + getState());  if (action != null)   sb.append(" action=" + action);  if (sc != null)   sb.append(" sc=" + sc);  if (sia != null)   sb.append(" sia=" + sia);  if (sib != null)   sb.append(" sib=" + sib);  if (sic != null)   sb.append(" sic=" + sic);  if (poundString != null)   sb.append(" poundString=" + poundString);  if (dialingNumber != null)   sb.append(" dialingNumber=" + dialingNumber);  if (pwd != null)   sb.append(" pwd=" + pwd);  sb.append("}");  return sb.toString();}  }
class C{  public final int size(){  return vertices.size();}  }
class C{  static public byte[] successor(final byte[] b,final int off,final int len){  if (len == 0) {    throw new NoSuccessorException("Empty byte[]");  }  boolean overflow=false;  for (int i=off + len - 1; i >= off; i--) {    overflow=b[i] == (byte)-1;    b[i]++;    if (!overflow)     return b;  }  throw new NoSuccessorException("Overflow");}  }
class C{  public static boolean isChanged(PO po){  String[] columnNames=s_sourceColumnNames.get(po.get_TableName());  if (columnNames == null || columnNames.length == 0) {    return false;  }  if (po.is_new() || po.is_ValueChanged("IsActive")) {    return true;  }  for (  String columnName : columnNames) {    if (po.is_ValueChanged(columnName)) {      return true;    }  }  return false;}  }
class C{  protected void dragExit(Component dragged){}  }
class C{  protected Expression notequals(int opPos) throws TransformerException {  return compileOperation(new NotEquals(),opPos);}  }
class C{  public void init(boolean forSigning,CipherParameters params){  if (forSigning) {    this.signingKeyPair=(NTRUSigningPrivateKeyParameters)params;  } else {    this.verificationKey=(NTRUSigningPublicKeyParameters)params;  }  hashAlg=this.params.hashAlg;  hashAlg.reset();}  }
class C{  public ConfirmDialog(JFrame p,String title,String question){  this(p,title,question,false);}  }
class C{  private void separateAnnotationsKinds(JCTree typetree,Type type,Symbol sym,TypeAnnotationPosition pos){  List<Attribute.Compound> annotations=sym.getRawAttributes();  ListBuffer<Attribute.Compound> declAnnos=new ListBuffer<Attribute.Compound>();  ListBuffer<Attribute.TypeCompound> typeAnnos=new ListBuffer<Attribute.TypeCompound>();  ListBuffer<Attribute.TypeCompound> onlyTypeAnnos=new ListBuffer<Attribute.TypeCompound>();  for (  Attribute.Compound a : annotations) {switch (annotationType(a,sym)) {case DECLARATION:      declAnnos.append(a);    break;case BOTH:{    declAnnos.append(a);    Attribute.TypeCompound ta=toTypeCompound(a,pos);    typeAnnos.append(ta);    break;  }case TYPE:{  Attribute.TypeCompound ta=toTypeCompound(a,pos);  typeAnnos.append(ta);  onlyTypeAnnos.append(ta);  break;}}}sym.resetAnnotations();sym.setDeclarationAttributes(declAnnos.toList());if (typeAnnos.isEmpty()) {return;}List<Attribute.TypeCompound> typeAnnotations=typeAnnos.toList();if (type == null) {type=sym.getEnclosingElement().asType();type=typeWithAnnotations(typetree,type,typeAnnotations,typeAnnotations);sym.appendUniqueTypeAttributes(typeAnnotations);return;}type=typeWithAnnotations(typetree,type,typeAnnotations,onlyTypeAnnos.toList());if (sym.getKind() == ElementKind.METHOD) {sym.type.asMethodType().restype=type;} else if (sym.getKind() == ElementKind.PARAMETER) {sym.type=type;if (sym.getQualifiedName().equals(names._this)) {sym.owner.type.asMethodType().recvtype=type;} else {MethodType methType=sym.owner.type.asMethodType();List<VarSymbol> params=((MethodSymbol)sym.owner).params;List<Type> oldArgs=methType.argtypes;ListBuffer<Type> newArgs=new ListBuffer<Type>();while (params.nonEmpty()) {if (params.head == sym) {  newArgs.add(type);} else {  newArgs.add(oldArgs.head);}oldArgs=oldArgs.tail;params=params.tail;}methType.argtypes=newArgs.toList();}} else {sym.type=type;}sym.appendUniqueTypeAttributes(typeAnnotations);if (sym.getKind() == ElementKind.PARAMETER || sym.getKind() == ElementKind.LOCAL_VARIABLE || sym.getKind() == ElementKind.RESOURCE_VARIABLE || sym.getKind() == ElementKind.EXCEPTION_PARAMETER) {sym.owner.appendUniqueTypeAttributes(sym.getRawTypeAttributes());}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.217 -0500",hash_original_method="9CFB04510A80ABA723862EE634095A2D",hash_generated_method="9713832FE84F3FCBD8DE0E9E6E792254") public void cancel(){  if (mService == null) {    return;  }  try {    mService.cancelVibrate(mToken);  } catch (  RemoteException e) {    Log.w(TAG,"Failed to cancel vibration.",e);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (DefaultKey_1: ");  result.append(defaultKey_1);  result.append(')');  return result.toString();}  }
class C{  @Override public CompositeRequestCondition combine(CompositeRequestCondition other){  if (isEmpty() && other.isEmpty()) {    return this;  } else   if (other.isEmpty()) {    return this;  } else   if (isEmpty()) {    return other;  } else {    assertNumberOfConditions(other);    RequestConditionHolder[] combinedConditions=new RequestConditionHolder[getLength()];    for (int i=0; i < getLength(); i++) {      combinedConditions[i]=this.requestConditions[i].combine(other.requestConditions[i]);    }    return new CompositeRequestCondition(combinedConditions);  }}  }
class C{  public Quaternionf lookAlong(Vector3fc dir,Vector3fc up){  return lookAlong(dir.x(),dir.y(),dir.z(),up.x(),up.y(),up.z(),this);}  }
class C{  private void insertRequestHeaders(SQLiteDatabase db,long downloadId,ContentValues values){  ContentValues rowValues=new ContentValues();  rowValues.put(DownloadContract.RequestHeaders.COLUMN_DOWNLOAD_ID,downloadId);  for (  Map.Entry<String,Object> entry : values.valueSet()) {    String key=entry.getKey();    if (key.startsWith(DownloadContract.RequestHeaders.INSERT_KEY_PREFIX)) {      String headerLine=entry.getValue().toString();      if (!headerLine.contains(":")) {        throw new IllegalArgumentException("Invalid HTTP header line: " + headerLine);      }      String[] parts=headerLine.split(":",2);      rowValues.put(DownloadContract.RequestHeaders.COLUMN_HEADER,parts[0].trim());      rowValues.put(DownloadContract.RequestHeaders.COLUMN_VALUE,parts[1].trim());      db.insert(DownloadContract.RequestHeaders.HEADERS_DB_TABLE,null,rowValues);    }  }}  }
class C{  public synchronized void close() throws IOException {  try {    if (!readOnly) {      syncRunnableHandle.cancel(false);      sync();    }    unmapFile();  }  finally {    super.close();  }}  }
class C{  public static void parseOptions(String args[]){  AnalysisManager.getInstance();  StringBuilder argStringBuilder=new StringBuilder();  for (int i=0; i < args.length - 1; i++) {    argStringBuilder.append(args[i]).append(" ");  }  if (args.length > 0)   argStringBuilder.append(args[args.length - 1]);  arguments=argStringBuilder.toString();  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (arg.startsWith("-")) {      JOption<?> opt=options.get(arg);      if (opt != null) {        if (opt.getDefaultValue() instanceof Boolean) {          opt.setValue(Boolean.TRUE);        } else         if (opt.getDefaultValue() instanceof Integer) {          opt.setValue(Integer.parseInt(args[++i]));        } else         if (opt.getDefaultValue() instanceof Long) {          arg=args[++i];          if (arg.startsWith("0x"))           opt.setValue(Long.parseLong(arg.substring(2),16)); else           opt.setValue(Long.parseLong(arg));        } else         if (opt.getDefaultValue() instanceof String) {          opt.setValue(args[++i]);        } else {          assert false : "Unhandled Option type " + opt.getDefaultValue().getClass().getSimpleName();        }      } else       if (arg.equals("-m")) {        mainFilename=args[++i];      } else {        logger.fatal("Invalid command line argument: " + arg);        logger.fatal("");        Options.printOptions();        System.exit(1);      }    } else {      moduleFilenames.add(arg);    }  }  if (mainFilename == null) {    logger.fatal("No main file specified!");    logger.fatal("");    Options.printOptions();    System.exit(1);  }}  }
class C{  public void clear(){  this.value=null;}  }
class C{  public boolean updateGeometryBuffer(int width,int height){  boolean changed=false;  if (this.geometryBuffer == null) {    this.geometryBuffer=new FloatFramebuffer(width,height,this.depthBuffer);    changed=true;  }  if (width != this.geometryBuffer.framebufferWidth || height != this.geometryBuffer.framebufferHeight) {    this.geometryBuffer.deleteFramebuffer();    this.geometryBuffer=new FloatFramebuffer(width,height,this.depthBuffer);    changed=true;  }  return changed;}  }
class C{  public Analyzer showAll(){  showIndividualValues();  showAggregate();  showStatisticalSignificance();  return this;}  }
class C{  private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);  trackAllChildViews();  if (mHasFastScrollTouchSettled) {    mCurrentFastScrollSection=info.sectionName;    mTargetFastScrollSection=null;    updateTrackedViewsFastScrollFocusState();  } else {    mCurrentFastScrollSection=null;    mTargetFastScrollSection=info.sectionName;    mHasFastScrollTouchSettled=false;    updateTrackedViewsFastScrollFocusState();    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);  }  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));  int numFrames=mFastScrollFrames.length;  for (int i=0; i < numFrames; i++) {    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;  }  mFastScrollFrameIndex=0;  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);}  }
class C{  private void changeDefault(Component component,boolean setDefault){  if (component instanceof JButton) {    JButton button=(JButton)component;    JRootPane parent=button.getRootPane();    if (parent != null) {      if (setDefault) {        parent.setDefaultButton(button);      } else {        parent.setDefaultButton(null);      }    }  }}  }
class C{  @Override public String toString(){  try {    return format(2);  } catch (  Exception e) {    return null;  }}  }
class C{  public static byte[] props(Map<String,String> map){  Properties properties=new Properties();  map.forEach(null);  try (ByteArrayOutputStream output=new ByteArrayOutputStream()){    Errors.rethrow().run(null);    return output.toByteArray();  } catch (  IOException e) {    throw Errors.asRuntime(e);  }}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  canvas.drawColor(this.baseColor);  if (this.bitmap != null) {    Matrix m=new Matrix();    m.setRectToRect(new RectF(0,0,bitmap.getWidth(),bitmap.getHeight()),new RectF(0,0,canvas.getWidth(),canvas.getHeight()),Matrix.ScaleToFit.CENTER);    bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,true);    height=(((canvas.getHeight() / 2) - bitmap.getHeight() / 2));    width=((canvas.getWidth() / 2) - bitmap.getWidth() / 2);    canvas.drawBitmap(bitmap,width,height,new Paint());    right=canvas.getWidth();    bottom=height + ((bitmap.getHeight()));    canvas.clipRect(0,height,right,bottom);  }  for (int i=0; i < this.historyPointer; i++) {    Path path=this.pathLists.get(i);    Paint paint=this.paintLists.get(i);    canvas.drawPath(path,paint);  }  this.drawText(canvas);  this.canvas=canvas;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public NullChange(){  this(" No operation change");}  }
class C{  public AsyncResult ModifyMonitoredItemsAsync(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,TimestampsToReturn TimestampsToReturn,MonitoredItemModifyRequest... ItemsToModify){  ModifyMonitoredItemsRequest req=new ModifyMonitoredItemsRequest(RequestHeader,SubscriptionId,TimestampsToReturn,ItemsToModify);  return channel.serviceRequestAsync(req);}  }
class C{  public boolean hasHittableCriticals(int loc){  return false;}  }
class C{  public void completeTradeInternally(){  tradeState=TradeState.TRADE_COMPLETED;}  }
class C{  public static <T>void forEach(MongoIterable<T> iterable,Consumer<T> operation){  try (MongoCursor<T> cursor=iterable.iterator()){    while (cursor.hasNext()) {      operation.accept(cursor.next());    }  } }  }
class C{  public <OUT>DataSet<OUT> createTestDataSet(Input<OUT> input){  return testEnv.fromCollection(input.getInput());}  }
class C{  @EventHandler(ignoreCancelled=true,priority=EventPriority.MONITOR) public void onPlayerTeleport(PlayerTeleportEvent event){  final Player player=event.getPlayer();  World from=WorldDimension.getBaseWorld(event.getFrom().getWorld());  World to=WorldDimension.getBaseWorld(event.getTo().getWorld());  if (!from.equals(to)) {    playerLeftWorld(player.getWorld());  }}  }
class C{  @Override public Object saveView(FacesContext context){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("saveView");  }  Object[] result;  UIViewRoot viewRoot=context.getViewRoot();  Util.checkIdUniqueness(context,viewRoot,new HashSet<>(viewRoot.getChildCount() << 1));  Object state=viewRoot.processSaveState(context);  List<TreeNode> treeList=new ArrayList<>(32);  captureChild(treeList,0,viewRoot);  Object[] tree=treeList.toArray();  result=new Object[]{tree,state};  return result;}  }
class C{  public static int geoHashLevelsForPrecision(String distance){  return geoHashLevelsForPrecision(DistanceUnit.METERS.parse(distance,DistanceUnit.DEFAULT));}  }
class C{  @Override public void addChild(WXComponent child){  addChild(child,-1);}  }
class C{  public GlassFish3xAsAdmin(String home){  super();  if (home == null) {    throw new CargoException("GlassFish home directory is not set");  }  this.home=home;}  }
class C{  private void record(){  for (  KeepFreeArea keepFreeArea : keepFreeAreas) {    for (    Player player : keepFreeArea.getPlayers()) {      PlayerPositionEntry entry=new PlayerPositionEntry(player,keepFreeArea);      if (!playerPositions.contains(entry)) {        playerPositions.add(entry);      }    }  }}  }
class C{  public void run(){  boolean addCloseTag;  int tag2Start;  int tagStart;  int tagEnd;  String tag;  String line="";  try {    while (!m_ofx.equals("")) {      addCloseTag=false;      tagStart=m_ofx.indexOf('<');      if (tagStart == -1) {        break;      }      tagEnd=m_ofx.indexOf('>');      if (tagEnd <= tagStart + 1) {        throw new IOException("PARSE ERROR: Invalid tag");      }      tag=m_ofx.substring(tagStart + 1,tagEnd);      if (tag.indexOf(' ') != -1) {        throw new IOException("PARSE ERROR: Invalid tag");      }      if (!tag.startsWith("/")) {        addCloseTag=(m_ofx.indexOf("</" + tag + ">") == -1);      }      tag2Start=m_ofx.indexOf("<",tagEnd);      if (m_ofx.indexOf("\n",tagEnd) < tag2Start) {        tag2Start=m_ofx.indexOf("\n",tagEnd);      }      if (tag2Start == -1) {        tag2Start=m_ofx.length();      }      String data=m_ofx.substring(tagEnd + 1,tag2Start);      line=m_ofx.substring(0,tagEnd + 1) + xmlEncodeTextAsPCDATA(data);      m_ofx=m_ofx.substring(tag2Start);      if (addCloseTag) {        line+="</" + tag + ">";      }      write(line);    }    write(m_ofx);    m_writer.close();  } catch (  IOException e) {    log.log(Level.SEVERE,"Ofx1To2Convertor: IO Exception",e);  }}  }
class C{  public static void createJavaProject(SWTWorkbenchBot bot,String projectName){  bot.perspectiveById("org.eclipse.jdt.ui.JavaPerspective").activate();  bot.menu("File").menu("New").menu("Project...").click();  SWTBotTree projectSelectionTree=bot.tree();  SWTBotTreeItem projectSelectionTreeItem=SwtBotTreeActions.getUniqueTreeItem(bot,projectSelectionTree,"Java","Java Project");  SwtBotTreeActions.selectTreeItem(bot,projectSelectionTreeItem,"Java Project");  bot.button("Next >").click();  bot.textWithLabel("Project name:").setText(projectName);  SwtBotUtils.clickButtonAndWaitForWindowChange(bot,bot.button("Finish"));}  }
class C{  public static <T>int detectLastIndex(List<T> list,Predicate<? super T> predicate){  if (list instanceof RandomAccess) {    return RandomAccessListIterate.detectLastIndex(list,predicate);  }  int size=list.size();  int i=size - 1;  ListIterator<T> reverseIterator=list.listIterator(size);  while (reverseIterator.hasPrevious()) {    if (predicate.accept(reverseIterator.previous())) {      return i;    }    i--;  }  return -1;}  }
class C{  public static ExtensionObject binaryEncode(Structure encodeable,EncoderContext ctx) throws EncodingException {  return binaryEncode(encodeable,StackUtils.getDefaultSerializer(),ctx);}  }
class C{  @Override public ScriptSortBuilder order(SortOrder order){  this.order=order;  return this;}  }
class C{  public BlockDenseDoubleMatrix2D(final int rows,final int cols){  this(rows,cols,deriveDefaultBlockStripeSize(rows,cols),BlockOrder.ROWMAJOR);}  }
class C{  public synchronized void registerMapper(String type,Mapper.TypeParser parser){  if (mapperParsers.containsKey(type)) {    throw new IllegalArgumentException("A mapper is already registered for type [" + type + "]");  }  mapperParsers.put(type,parser);}  }
class C{  private boolean recalculateSize(){  int oldSize=size;  size=0;  for (  long elt : elements)   size+=Long.bitCount(elt);  return size != oldSize;}  }
class C{  public PositionAwareSplitWrapper(T _split,int _splitnum){  super(null,0,0,null);  split=_split;  splitnum=_splitnum;}  }
class C{  @SuppressWarnings("unchecked") public static PartListing parseListParts(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    PartListing partListing=new PartListing();    partListing.setBucketName(root.getChildText("Bucket"));    partListing.setKey(root.getChildText("Key"));    partListing.setUploadId(root.getChildText("UploadId"));    partListing.setStorageClass(root.getChildText("StorageClass"));    partListing.setMaxParts(Integer.valueOf(root.getChildText("MaxParts")));    partListing.setTruncated(Boolean.valueOf(root.getChildText("IsTruncated")));    if (root.getChild("PartNumberMarker") != null) {      String partNumberMarker=root.getChildText("PartNumberMarker");      if (!isNullOrEmpty(partNumberMarker)) {        partListing.setPartNumberMarker(Integer.valueOf(partNumberMarker));      }    }    if (root.getChild("NextPartNumberMarker") != null) {      String nextPartNumberMarker=root.getChildText("NextPartNumberMarker");      if (!isNullOrEmpty(nextPartNumberMarker)) {        partListing.setNextPartNumberMarker(Integer.valueOf(nextPartNumberMarker));      }    }    List<Element> partElems=root.getChildren("Part");    for (    Element elem : partElems) {      PartSummary ps=new PartSummary();      ps.setPartNumber(Integer.valueOf(elem.getChildText("PartNumber")));      ps.setLastModified(DateUtil.parseIso8601Date(elem.getChildText("LastModified")));      ps.setETag(trimQuotes(elem.getChildText("ETag")));      ps.setSize(Integer.valueOf(elem.getChildText("Size")));      partListing.addPart(ps);    }    return partListing;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public Pair<ByteBuffer,CLEvent> mapLater(CLQueue queue,MapFlags flags,long offsetX,long offsetY,long offsetZ,long lengthX,long lengthY,long lengthZ,long rowPitch,long slicePitch,CLEvent... eventsToWaitFor){  return map(queue,flags,pointerToSizeTs(offsetX,offsetY,offsetZ),pointerToSizeTs(lengthX,lengthY,lengthZ),rowPitch,slicePitch,true,eventsToWaitFor);}  }
class C{  public long shift(long val){  assert val <= mask();  return val << position;}  }
class C{  @PermitAll @GET public ResultEntity<List<Subscription>> subscribe(@PathParam("clientId") String clientId,@Auth UserPrincipal user){  List<Subscription> subscriptions=new ArrayList<>();  if (!this.validator.isClientIdValid(clientId)) {    logger.debug("Protocol violation: Client id {} not valid based on configuration",clientId);    throw new ValidateException(new ErrorEntity(ErrorCode.INVALID));  }  Map<String,MqttQoS> map=this.storage.getClientSubscriptions(clientId);  map.forEach(null);  return new ResultEntity<>(subscriptions);}  }
class C{  public UISelectItemTestCase(String name){  super(name);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public boolean hasExtra(String name){  return mExtras != null && mExtras.containsKey(name);}  }
class C{  private void interpretMethodResult(final MethodResult methodResult,final ClassResult classResult){  if (methodResult.getSubResource() != null) {    interpretClassResult(methodResult.getSubResource());    return;  }  final String path=PathNormalizer.getPath(methodResult);  final ResourceMethod resourceMethod=interpretResourceMethod(methodResult,classResult);  resources.addMethod(path,resourceMethod);}  }
class C{  int flipTriangles(long[] flippedB){  final int size=tris.size();  int numflips=0;  BitsUtil.zeroI(flippedB);  for (int i=0; i < size; i++) {    if (!BitsUtil.get(flippedB,i) && flipTriangle(i,flippedB) >= 0) {      numflips+=2;    }  }  if (LOG.isDebuggingFinest()) {    LOG.debugFinest("Flips: " + numflips);  }  return numflips;}  }
class C{  public SortPomImpl(){  fileUtil=new FileUtil();  wrapperFactory=new WrapperFactoryImpl(fileUtil);  xmlProcessor=new XmlProcessor(wrapperFactory);  xmlProcessingInstructionParser=new XmlProcessingInstructionParser();}  }
class C{  private RevCommit createNotesCommit(NoteMap map,ObjectInserter inserter,RevWalk revWalk,String message,RevCommit... parents) throws IOException {  CommitBuilder commitBuilder=new CommitBuilder();  commitBuilder.setTreeId(map.writeTree(inserter));  commitBuilder.setAuthor(author);  commitBuilder.setCommitter(author);  if (parents.length > 0) {    commitBuilder.setParentIds(parents);  }  commitBuilder.setMessage(message);  ObjectId commitId=inserter.insert(commitBuilder);  inserter.flush();  return revWalk.parseCommit(commitId);}  }
class C{  public SimpleBooleanProperty expandedProperty(){  return expandedProperty;}  }
class C{  public void didBatchUpdates(){  removeClearedEntries();}  }
class C{  @Override public void endOfProcess(){  builder.append(baseIndent).append('}').append("\n");}  }
class C{  public void testDateEscapeSequence() throws Exception {  check("'2016-08-26'","{d '2016-08-26'}");  check("select '2016-08-26'","select {d '2016-08-26'}");  check("select '2016-08-26' from table;","select {d '2016-08-26'} from table;");}  }
class C{  public SimpleDate(java.sql.Timestamp datetime){  this(datetime,DATETIME);}  }
class C{  public double distanceSquaredTo(Point2D that){  double dx=this.x - that.x;  double dy=this.y - that.y;  return dx * dx + dy * dy;}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  public DimProduct(int id,String name,float price,int qty){  this.id=id;  this.name=name;  this.price=price;  this.qty=qty;}  }
class C{  public static void writeToStream(final ByteArrayOutputStream bos,final Object obj) throws IOException {  final ObjectOutput os=new ObjectOutputStream(bos);  os.writeObject(obj);  os.close();}  }
class C{  public Matrix(final int rows,final int cols){  this(rows,cols,EnumSet.noneOf(Address.Flags.class));}  }
class C{  public void login(String userName,String password) throws IOException {  send("USER " + userName);  readCode(331);  send("PASS " + password);  readCode(230);  send("SYST");  readCode(215);  send("SITE");  readCode(500);  send("STRU F");  readCode(200);  send("TYPE I");  readCode(200);}  }
class C{  public String toString(){  return this.getClass().getName() + ": " + getID();}  }
