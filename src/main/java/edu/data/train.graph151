class C{  public void addExtensionFilter(String extension){  if (ext == null) {    ext=new Vector();  }  ext.addElement(extension);}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  public static Intent implicit2ExplicitIntent(Context context,Intent implicitIntent){  PackageManager pm=context.getPackageManager();  List<ResolveInfo> resolveInfo=pm.queryIntentServices(implicitIntent,0);  if (resolveInfo == null || resolveInfo.size() != 1) {    return null;  }  ResolveInfo serviceInfo=resolveInfo.get(0);  String packageName=serviceInfo.serviceInfo.packageName;  String className=serviceInfo.serviceInfo.name;  ComponentName component=new ComponentName(packageName,className);  Intent explicitIntent=new Intent(implicitIntent);  explicitIntent.setComponent(component);  return explicitIntent;}  }
class C{  public void writeShort(final int value,final JBBPByteOrder byteOrder) throws IOException {  if (byteOrder == JBBPByteOrder.BIG_ENDIAN) {    this.write(value >>> 8);    this.write(value);  } else {    this.write(value);    this.write(value >>> 8);  }}  }
class C{  public URI(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.163 -0400",hash_original_method="3492963B9799FA768D7650AC10A0F976",hash_generated_method="05FA181A353EB1D2A8C6F63EB83AD424") public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  @Override public void put(Mean other){  if (other instanceof StatisticalMoments) {    StatisticalMoments othe=(StatisticalMoments)other;    final double nn=othe.n + this.n;    final double delta=othe.m1 - this.m1;    final double delta_nn=delta / nn;    final double delta_nn2=delta_nn * delta_nn;    final double delta_nn3=delta_nn2 * delta_nn;    final double na2=this.n * this.n;    final double nb2=othe.n * othe.n;    final double ntn=this.n * othe.n;    this.m4+=othe.m4 + delta * delta_nn3 * ntn* (na2 - ntn + nb2) + 6. * (na2 * othe.m2 + nb2 * this.m2) * delta_nn2 + 4. * (this.n * othe.m3 - othe.n * this.m3) * delta_nn;    this.m3+=othe.m3 + delta * delta_nn2 * ntn* (this.n - othe.n) + 3. * (this.n * othe.m2 - othe.n * this.m2) * delta_nn;    this.m2+=othe.m2 + delta * delta_nn * this.n* othe.n;    this.m1+=othe.n * delta_nn;    this.n=nn;    min=Math.min(min,othe.min);    max=Math.max(max,othe.max);  } else {    throw new AbortException("I cannot combine Mean or MeanVariance into to a StatisticalMoments class.");  }}  }
class C{  private JCTree capturedDecl(int depth,Symbol sym){  int currentDepth=frameStack.size() - 1;  for (  Frame block : frameStack) {switch (block.tree.getTag()) {case CLASSDEF:      ClassSymbol clazz=((JCClassDecl)block.tree).sym;    if (sym.isMemberOf(clazz,types)) {      return currentDepth > depth ? null : block.tree;    }  break;case VARDEF:if (((JCVariableDecl)block.tree).sym == sym && sym.owner.kind == MTH) {  return currentDepth > depth ? null : block.tree;}break;case BLOCK:case METHODDEF:case LAMBDA:if (block.locals != null && block.locals.contains(sym)) {return currentDepth > depth ? null : block.tree;}break;default :Assert.error("bad decl kind " + block.tree.getTag());}currentDepth--;}return null;}  }
class C{  public Set<Emoticon> findMatchingEmoticons(String emoteCode){  Set<Emoticon> found=new HashSet<>();  found.addAll(findMatchingEmoticons(emoteCode,emoticonsByEmoteset.values()));  found.addAll(findMatchingEmoticons(emoteCode,streamEmoticons.values()));  return found;}  }
class C{  public Quaterniond rotateX(double angle){  return rotateX(angle,this);}  }
class C{  public ULLMapIter(){  cur=list;}  }
class C{  public Relation createRelation(String type,List<OsmElement> members){  createCheckpoint(R.string.undo_action_create_relation);  Relation relation=getDelegator().createAndInsertRelation(members);  SortedMap<String,String> tags=new TreeMap<String,String>();  if (type != null)   tags.put("type",type); else   tags.put("type","");  getDelegator().setTags(relation,tags);  return relation;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.587 -0500",hash_original_method="5EA4CC699810E4F50A6EFC012301B7BB",hash_generated_method="0BA4858ECD5A4BD94F468B1B6F8520E2") private GsmDataConnection createDataConnection(){  if (DBG)   log("createDataConnection E");  RetryManager rm=new RetryManager();  int id=mUniqueIdGenerator.getAndIncrement();  GsmDataConnection conn=GsmDataConnection.makeDataConnection(mPhone,id,rm);  mDataConnections.put(id,conn);  DataConnectionAc dcac=new DataConnectionAc(conn,LOG_TAG);  int status=dcac.fullyConnectSync(mPhone.getContext(),this,conn.getHandler());  if (status == AsyncChannel.STATUS_SUCCESSFUL) {    mDataConnectionAsyncChannels.put(dcac.dataConnection.getDataConnectionId(),dcac);  } else {    loge("createDataConnection: Could not connect to dcac.mDc=" + dcac.dataConnection + " status="+ status);  }  IntentFilter filter=new IntentFilter();  filter.addAction(INTENT_RECONNECT_ALARM + '.' + id);  mPhone.getContext().registerReceiver(mIntentReceiver,filter,null,mPhone);  if (DBG)   log("createDataConnection() X id=" + id);  return conn;}  }
class C{  public boolean isPowerOfFourB(int num){  return (num & (num - 1)) == 0 && num % 3 == 1;}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple){  emitDirect(taskId,streamId,tuple,null);}  }
class C{  public Telephone(TelUri uri){  setUri(uri);}  }
class C{  private void loadPlaylists(){  notifyPreloader(3,4,"Loading playlists...");  String playlistsPath=applicationFolder + File.separator + PLAYLISTS_PERSISTENCE_FILE;  File playlistsFile=new File(playlistsPath);  List<Playlist> playlists;  if (playlistsFile.exists())   playlists=parsePlaylistFromJsonFile(playlistsFile); else {    playlists=new ArrayList<>();    playlists.add(new Playlist("My Top 10",false));    playlists.add(new Playlist("Favourites",false));    playlists.add(new Playlist("Listen later",false));  }  musicLibrary.addPlaylists(playlists);}  }
class C{  public static boolean vPoolAllowsExpansion(final VirtualPool virtualPool){  return virtualPool.getExpandable() != null && virtualPool.getExpandable();}  }
class C{  public boolean hasDateChanged(WatchFaceTime otherTime){  return (monthDay != otherTime.monthDay) || (month != otherTime.month) || (year != otherTime.year);}  }
class C{  @Override public void addressWrite(ObjectReference src,Address slot,Address value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.addressWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  public LIRKind makeDerivedReference(AllocatableValue base){  assert !isUnknownReference() && derivedReferenceBase == null;  if (Value.ILLEGAL.equals(base)) {    return makeUnknownReference();  } else {    if (isValue()) {      return derivedReference(getPlatformKind(),base);    } else {      return new LIRKind(getPlatformKind(),referenceMask,base);    }  }}  }
class C{  public RosterGroupsPanel(){  this(null);}  }
class C{  public static boolean containsIgnoreCase(String string,String substring){  return contains(string.toLowerCase(),substring.toLowerCase());}  }
class C{  public static MekaFrame launchFrame(JPanel panel,String title,boolean center){  MekaFrame result=new MekaFrame();  result.setTitle(title);  result.setDefaultCloseOperation(MekaFrame.DISPOSE_ON_CLOSE);  String icon=GUIHelper.getDefaultFrameIcon(panel.getClass());  if ((icon != null) && (GUIHelper.getIcon(icon) != null))   result.setIconImage(GUIHelper.getIcon(icon).getImage()); else   result.setIconImage(GUIHelper.getLogoIcon().getImage());  result.setLayout(new BorderLayout());  result.add(panel,BorderLayout.CENTER);  if (panel instanceof MenuBarProvider)   result.setJMenuBar(((MenuBarProvider)panel).getMenuBar());  if (GUIHelper.getPackFrame(panel.getClass()))   result.pack(); else   result.setSize(GUIHelper.getDefaultFrameDimensions(panel.getClass()));  if (center)   result.setLocationRelativeTo(null);  result.setVisible(true);  return result;}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  private void createMapWhenNeeded(){  if (isMapInitialized) {    return;  }  if (resourceBundle != null) {    Set<String> set=resourceBundle.keySet();    topLevelMap=new HashMap<String,Object>(set.size());    for (    String key : set) {      Object value=resourceBundle.getObject(key);      topLevelMap.put(key,value);    }  } else {    topLevelMap=new HashMap<String,Object>(1);  }  topLevelMap.put("_RESOURCE_BUNDLE_",resourceBundle);  isMapInitialized=true;}  }
class C{  public void testConnectA2dp(){  int iterations=BluetoothTestRunner.sConnectA2dpIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.A2DP,null);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("connectA2dp iteration " + (i + 1) + " of "+ iterations);    mTestUtils.connectProfile(adapter,device,BluetoothProfile.A2DP,String.format("connectA2dp(device=%s)",device));    mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.A2DP,String.format("disconnectA2dp(device=%s)",device));  }  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  public TopologyArchiveImpl(ArchiveBase<?> archive){  super(archive);}  }
class C{  public static StringSet runVPlexHighAvailabilityMatcher(DbClientImpl dbClient,VirtualPool vpool,List<StoragePool> pools){  Set<String> poolNames=new HashSet<String>();  for (  StoragePool pool : pools) {    poolNames.add(pool.getLabel());  }  _log.info("Calling VPlexHighAvailabilityMatcher on pools: " + poolNames.toString());  VPlexHighAvailabilityMatcher matcher=new VPlexHighAvailabilityMatcher();  ObjectLocalCache cache=new ObjectLocalCache(dbClient);  matcher.setObjectCache(cache);  Map<String,Object> attributeMap=new HashMap<String,Object>();  attributeMap.put(Attributes.high_availability_type.name(),vpool.getHighAvailability());  attributeMap.put(Attributes.varrays.name(),vpool.getVirtualArrays());  attributeMap.put(Attributes.high_availability_varray.name(),null);  attributeMap.put(Attributes.high_availability_vpool.name(),null);  if (vpool.getHaVarrayVpoolMap() != null) {    for (    Map.Entry<String,String> entry : vpool.getHaVarrayVpoolMap().entrySet()) {      attributeMap.put(Attributes.high_availability_varray.name(),entry.getKey());      attributeMap.put(Attributes.high_availability_vpool.name(),entry.getValue());    }  }  StringBuffer errorMessage=new StringBuffer();  List<StoragePool> matchedPools=matcher.matchStoragePoolsWithAttributeOn(pools,attributeMap,errorMessage);  StringSet result=new StringSet();  for (  StoragePool matchedPool : matchedPools) {    result.add(matchedPool.getId().toString());  }  _log.info("Matched results: " + result.toString());  return result;}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      if (!eof) {        exhaustInputStream(this);      }    }  finally {      eof=true;      closed=true;    }  }}  }
class C{  public void property(Map<Object,Object> args){  if (args == null)   return;  String name=(String)args.get("name");  Object type=args.get("type");  Object doc=args.get("doc");  Object docUrl=args.get("docUrl");  Boolean isStatic=(Boolean)args.get("isStatic");  Map<Object,Object> getter=new HashMap<Object,Object>();  getter.put("name",GroovyPropertyUtils.getGetterNameNonBoolean(name));  getter.put("type",type);  getter.put("isStatic",isStatic);  getter.put("doc",doc);  getter.put("docUrl",docUrl);  method(getter);  Map<Object,Object> setter=new HashMap<Object,Object>();  setter.put("name",GroovyPropertyUtils.getSetterName(name));  setter.put("type","void");  setter.put("isStatic",isStatic);  setter.put("doc",doc);  setter.put("docUrl",docUrl);  final HashMap<Object,Object> param=new HashMap<Object,Object>();  param.put(name,type);  setter.put("params",param);  method(setter);}  }
class C{  public boolean submitTopology(){  String statemgrClass=Context.stateManagerClass(config);  IStateManager statemgr;  String launcherClass=Context.launcherClass(config);  ILauncher launcher;  String uploaderClass=Context.uploaderClass(config);  IUploader uploader;  try {    statemgr=ReflectionUtils.newInstance(statemgrClass);    launcher=ReflectionUtils.newInstance(launcherClass);    uploader=ReflectionUtils.newInstance(uploaderClass);  } catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {    LOG.log(Level.SEVERE,"Failed to instantiate instances",e);    return false;  }  boolean isSuccessful=false;  URI packageURI=null;  try {    statemgr.initialize(config);    SchedulerStateManagerAdaptor adaptor=new SchedulerStateManagerAdaptor(statemgr,5000);    boolean isValid=validateSubmit(adaptor,topology.getName());    if (isValid) {      LOG.log(Level.FINE,"Topology {0} to be submitted",topology.getName());      packageURI=uploadPackage(uploader);      if (packageURI == null) {        LOG.severe("Failed to upload package.");        return false;      } else {        Config runtime=Config.newBuilder().putAll(LauncherUtils.getInstance().getPrimaryRuntime(topology,adaptor)).put(Keys.topologyPackageUri(),packageURI).put(Keys.launcherClassInstance(),launcher).build();        isSuccessful=callLauncherRunner(runtime);      }    }  }  finally {    if (!isSuccessful) {      if (packageURI != null) {        uploader.undo();      }    }    SysUtils.closeIgnoringExceptions(uploader);    SysUtils.closeIgnoringExceptions(launcher);    SysUtils.closeIgnoringExceptions(statemgr);  }  return isSuccessful;}  }
class C{  public String dumpData(byte[] pachData,int nMaxBytes){  StringBuffer sb=new StringBuffer();  if (eType == DDFDataType.DDFFloat) {    sb.append("      Subfield ").append(pszName).append("=").append(extractFloatData(pachData,nMaxBytes,null)).append("\n");  } else   if (eType == DDFDataType.DDFInt) {    sb.append("      Subfield ").append(pszName).append("=").append(extractIntData(pachData,nMaxBytes,null)).append("\n");  } else   if (eType == DDFDataType.DDFBinaryString) {    sb.append("      Subfield ").append(pszName).append("=").append(extractStringData(pachData,nMaxBytes,null)).append("\n");  } else {    sb.append("      Subfield ").append(pszName).append("=").append(extractStringData(pachData,nMaxBytes,null)).append("\n");  }  return sb.toString();}  }
class C{  public void displaySelected(){  MAttachmentEntry entry=m_attachment.getEntry(displayIndex);  log.config("Index=" + displayIndex + " - "+ entry);  if (entry != null && entry.getData() != null) {    bSave.setEnabled(true);    bDelete.setEnabled(true);    log.config(entry.toStringX());    try {      AMedia media=new AMedia(entry.getName(),null,entry.getContentType(),entry.getData());      preview.setContent(media);      preview.setVisible(true);      preview.invalidate();    } catch (    Exception e) {      log.log(Level.SEVERE,"attachment",e);    }  }}  }
class C{  public DelegateHandler(final Vertx vertx,final HttpClient selfClient,final ResourceStorage storage,final MonitoringHandler monitoringHandler,final String delegatesUri,final Map<String,Object> properties){  this.vertx=vertx;  this.selfClient=selfClient;  this.storage=storage;  this.delegatesUri=delegatesUri;  String delegatesSchema=ResourcesUtils.loadResource("gateleen_delegate_schema_delegates",true);  this.delegateFactory=new DelegateFactory(monitoringHandler,selfClient,properties,delegatesSchema);  delegateNamePattern=Pattern.compile(delegatesUri + "([^/]+)(/" + DEFINITION_RESOURCE+ "|/"+ EXECUTION_RESOURCE+ ".*"+ "|/?)");  delegateMap=new HashMap<>();  initialized=false;}  }
class C{  protected void writeImageDesc() throws IOException {  out.write(0x2c);  writeShort(0);  writeShort(0);  writeShort(width);  writeShort(height);  if (firstFrame) {    out.write(0);  } else {    out.write(0x80 | 0 | 0| 0| palSize);  }}  }
class C{  private long tryIncReaderOverflow(long s){  if ((s & ABITS) == RFULL) {    if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {      ++readerOverflow;      U.putLongVolatile(this,STATE,s);      return s;    }  } else   if ((nextSecondarySeed() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();  return 0L;}  }
class C{  private void drawTicks(Canvas canvas,double min,double max,double minAngle,double maxAngle,int centerX,int centerY,double longRadius,double shortRadius,double ticks,Paint paint,boolean labels){  for (double i=min; i <= max; i+=ticks) {    double angle=getAngleForValue(i,minAngle,maxAngle,min,max);    double sinValue=Math.sin(angle);    double cosValue=Math.cos(angle);    int x1=Math.round(centerX + (float)(shortRadius * sinValue));    int y1=Math.round(centerY + (float)(shortRadius * cosValue));    int x2=Math.round(centerX + (float)(longRadius * sinValue));    int y2=Math.round(centerY + (float)(longRadius * cosValue));    canvas.drawLine(x1,y1,x2,y2,paint);    if (labels) {      paint.setTextAlign(Align.LEFT);      if (x1 <= x2) {        paint.setTextAlign(Align.RIGHT);      }      String text=i + "";      if (Math.round(i) == (long)i) {        text=(long)i + "";      }      canvas.drawText(text,x1,y1,paint);    }  }}  }
class C{  public static void updateInstrumentation(CollectorConfiguration config) throws Exception {  List<String> scripts=new ArrayList<String>();  List<String> scriptNames=new ArrayList<String>();  Map<String,Instrumentation> instrumentTypes=config.getInstrumentation();  for (  Map.Entry<String,Instrumentation> stringInstrumentationEntry : instrumentTypes.entrySet()) {    Instrumentation types=stringInstrumentationEntry.getValue();    String rules=ruleTransformer.transform(stringInstrumentationEntry.getKey(),types,config.getProperty("version." + stringInstrumentationEntry.getKey(),null));    if (log.isLoggable(Level.FINER)) {      log.finer("Update instrumentation script name=" + stringInstrumentationEntry.getKey() + " rules="+ rules);    }    if (rules != null) {      scriptNames.add(stringInstrumentationEntry.getKey());      scripts.add(rules);    }  }  PrintWriter writer=new PrintWriter(new StringWriter());  transformer.installScript(scripts,scriptNames,writer);  writer.close();}  }
class C{  public static String gensalt(int log_rounds){  return gensalt(log_rounds,new SecureRandom());}  }
class C{  public ResultTable(RModel reportModel){  this();  setModel(reportModel);}  }
class C{  @Override protected void autoAdjustRange(){  setRange(this.fixedRange,false,false);}  }
class C{  @Override public void initialize(ResourceManager rm){}  }
class C{  public void flush() throws java.io.IOException {  m_os.flush();}  }
class C{  public StripedLockIntObjectConcurrentHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public boolean canBeShortAddress(int address){  return ((address >= 1) && (address <= 127));}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobKOctetsProcessed);}  }
class C{  public void reset(){  impl.reset();}  }
class C{  private void resetUserParameters(){  try {    if (null == m_userParams)     return;    int n=m_userParams.size();    for (int i=n - 1; i >= 0; i--) {      Arg arg=(Arg)m_userParams.elementAt(i);      QName name=arg.getQName();      String s1=name.getNamespace();      String s2=name.getLocalPart();      setParameter(s2,s1,arg.getVal().object());    }  } catch (  java.util.NoSuchElementException nsee) {  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  historyAdd(getText());  historyPosition=history.size();  setText("");  historyTextEdited=false;}  }
class C{  public final void testGetX(){  DSAPrivateKeySpec dpks=new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(1,dpks.getX().intValue());}  }
class C{  @SuppressWarnings("unused") public List<String> hostClusterChangeDetails(URI hostId,URI clusterId,URI vCenterDataCenterId,boolean isVcenter){  List<String> result=Lists.newArrayList();  Host host=_dbClient.queryObject(Host.class,hostId);  if (host == null) {    return Lists.newArrayList("Host has been deleted");  }  URI oldClusterURI=host.getCluster();  Cluster oldCluster=null;  if (!NullColumnValueGetter.isNullURI(oldClusterURI)) {    oldCluster=_dbClient.queryObject(Cluster.class,oldClusterURI);  }  Cluster newCluster=null;  if (!NullColumnValueGetter.isNullURI(clusterId)) {    newCluster=_dbClient.queryObject(Cluster.class,clusterId);  }  if (newCluster != null && oldCluster != null) {    result.add(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostClusterChangeDetails",host.getLabel(),oldCluster.getLabel(),newCluster.getLabel()));  } else   if (newCluster == null && oldCluster != null) {    result.add(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostClusterChangeDetailsRemovedFromCluster",host.getLabel(),oldCluster.getLabel()));  } else   if (newCluster != null && oldCluster == null) {    result.add(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostClusterChangeDetailsAddedToCluster",host.getLabel(),newCluster.getLabel()));  }  if (!NullColumnValueGetter.isNullURI(oldClusterURI) && NullColumnValueGetter.isNullURI(clusterId) && ComputeSystemHelper.isClusterInExport(_dbClient,oldClusterURI)) {    List<ExportGroup> exportGroups=ComputeSystemControllerImpl.getSharedExports(_dbClient,oldClusterURI);    for (    ExportGroup export : exportGroups) {      if (export != null) {        List<BlockObjectDetails> affectedVolumes=getBlockObjectDetails(hostId,export.getVolumes());        result.addAll(getVolumeDetails(affectedVolumes,false));      }    }  } else   if (NullColumnValueGetter.isNullURI(oldClusterURI) && !NullColumnValueGetter.isNullURI(clusterId) && ComputeSystemHelper.isClusterInExport(_dbClient,clusterId)) {    List<ExportGroup> exportGroups=ComputeSystemControllerImpl.getSharedExports(_dbClient,clusterId);    for (    ExportGroup eg : exportGroups) {      List<BlockObjectDetails> affectedVolumes=getBlockObjectDetails(hostId,eg.getVolumes());      result.addAll(getVolumeDetails(affectedVolumes,true));    }  } else   if (!NullColumnValueGetter.isNullURI(oldClusterURI) && !NullColumnValueGetter.isNullURI(clusterId) && !oldClusterURI.equals(clusterId)&& (ComputeSystemHelper.isClusterInExport(_dbClient,oldClusterURI) || ComputeSystemHelper.isClusterInExport(_dbClient,clusterId))) {    List<ExportGroup> exportGroups=ComputeSystemControllerImpl.getSharedExports(_dbClient,oldClusterURI);    for (    ExportGroup export : exportGroups) {      if (export != null) {        List<BlockObjectDetails> affectedVolumes=getBlockObjectDetails(hostId,export.getVolumes());        result.addAll(getVolumeDetails(affectedVolumes,false));      }    }    exportGroups=ComputeSystemControllerImpl.getSharedExports(_dbClient,clusterId);    for (    ExportGroup eg : exportGroups) {      List<BlockObjectDetails> affectedVolumes=getBlockObjectDetails(hostId,eg.getVolumes());      result.addAll(getVolumeDetails(affectedVolumes,true));    }  }  return result;}  }
class C{  public void animateY(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easing);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  public void initializeStatistics(){  updateBoundariesAndOrWeights();  m_TM=new TreeMap<Double,Double>();  m_WeightedSum=0;  m_WeightedSumSquared=0;  m_SumOfWeights=0;  m_Weights=null;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  tokenizeInstance(instance,false);  double[] probOfClassGivenDoc=new double[m_data.numClasses()];  double[] logDocGivenClass=new double[m_data.numClasses()];  for (int i=0; i < m_data.numClasses(); i++) {    logDocGivenClass[i]+=Math.log(m_probOfClass[i]);    LinkedHashMap<String,Count> dictForClass=m_probOfWordGivenClass.get(i);    int allWords=0;    double iNorm=0;    double fv=0;    if (m_normalize) {      for (      Map.Entry<String,Count> feature : m_inputVector.entrySet()) {        String word=feature.getKey();        Count c=feature.getValue();        boolean ok=false;        for (int clss=0; clss < m_data.numClasses(); clss++) {          if (m_probOfWordGivenClass.get(clss).get(word) != null) {            ok=true;            break;          }        }        if (ok) {          fv=(m_wordFrequencies) ? c.m_count : 1.0;          iNorm+=Math.pow(Math.abs(fv),m_lnorm);        }      }      iNorm=Math.pow(iNorm,1.0 / m_lnorm);    }    for (    Map.Entry<String,Count> feature : m_inputVector.entrySet()) {      String word=feature.getKey();      Count dictCount=dictForClass.get(word);      boolean ok=false;      for (int clss=0; clss < m_data.numClasses(); clss++) {        if (m_probOfWordGivenClass.get(clss).get(word) != null) {          ok=true;          break;        }      }      if (ok) {        double freq=(m_wordFrequencies) ? feature.getValue().m_count : 1.0;        if (m_normalize) {          freq/=iNorm * m_norm;        }        allWords+=freq;        if (dictCount != null) {          logDocGivenClass[i]+=freq * Math.log(dictCount.m_count);        } else {          logDocGivenClass[i]+=freq * Math.log(m_leplace);        }      }    }    if (m_wordsPerClass[i] > 0) {      logDocGivenClass[i]-=allWords * Math.log(m_wordsPerClass[i]);    }  }  double max=logDocGivenClass[Utils.maxIndex(logDocGivenClass)];  for (int i=0; i < m_data.numClasses(); i++) {    probOfClassGivenDoc[i]=Math.exp(logDocGivenClass[i] - max);  }  Utils.normalize(probOfClassGivenDoc);  return probOfClassGivenDoc;}  }
class C{  public MonotoneSolver(final ILatticeGraph<GraphNode> graph,final Lattice lattice,final IStateVector<GraphNode,LatticeElement> startVector,final ITransformationProvider<GraphNode,LatticeElement> transformationProvider,final IGraphWalker<GraphNode,ObjectType> walker,final IMonotoneDebugger debugger){  Preconditions.checkNotNull(graph,"Error: Graph argument can not be null");  Preconditions.checkNotNull(lattice,"Error: Lattice argument can not be null");  Preconditions.checkNotNull(startVector,"Error: Start vector argument can not be null");  Preconditions.checkNotNull(transformationProvider,"Error: Transformation list argument can not be null");  final List<GraphNode> nodes=graph.getNodes();  Preconditions.checkArgument(nodes.size() == startVector.size(),String.format("Error: Invalid start vector (%d states for %d nodes)",startVector.size(),nodes.size()));  for (  final GraphNode node : nodes) {    Preconditions.checkArgument(startVector.hasState(node),"Error: Node " + node + " does not have a state in the initial state vector");  }  this.graph=graph;  this.lattice=lattice;  this.state=startVector;  this.transformationList=transformationProvider;  this.walker=walker;  this.debugger=debugger;}  }
class C{  static public String formatPerc(double percent){  return percFormatter().format(percent);}  }
class C{  public void putMap(String settingName,Map map){synchronized (LOCK) {    Map settingMap=getMapInternal(settingName);    settingMap.clear();    settingMap.putAll(map);  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  MACDSeries clone=(MACDSeries)super.clone();  clone.fastYYValues=new LinkedList<Double>();  return clone;}  }
class C{  public Map<Integer,TestTable1> selectToMap(){  return selectByExampleToMap((Example)this.example);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void print(char x){  out.print(x);  out.flush();}  }
class C{  protected BaseInterval(Object interval,Chronology chrono){  super();  IntervalConverter converter=ConverterManager.getInstance().getIntervalConverter(interval);  if (converter.isReadableInterval(interval,chrono)) {    ReadableInterval input=(ReadableInterval)interval;    iChronology=(chrono != null ? chrono : input.getChronology());    iStartMillis=input.getStartMillis();    iEndMillis=input.getEndMillis();  } else   if (this instanceof ReadWritableInterval) {    converter.setInto((ReadWritableInterval)this,interval,chrono);  } else {    MutableInterval mi=new MutableInterval();    converter.setInto(mi,interval,chrono);    iChronology=mi.getChronology();    iStartMillis=mi.getStartMillis();    iEndMillis=mi.getEndMillis();  }  checkInterval(iStartMillis,iEndMillis);}  }
class C{  public GeneralViewModel autoRender(){  mShouldRenderOnTrigger=true;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.050 -0500",hash_original_method="C353B574FF2B3DDFEDDE0862E878329F",hash_generated_method="B33A211A12366700A0DC5DADFEC12A20") public static UnicodeBlock of(int codePoint){  checkValidCodePoint(codePoint);  int block=ofImpl(codePoint);  if (block == -1 || block >= BLOCKS.length) {    return null;  }  return BLOCKS[block];}  }
class C{  protected void acceptDrag(int dragOperation){  DropTargetContextPeer peer=getDropTargetContextPeer();  if (peer != null) {    peer.acceptDrag(dragOperation);  }}  }
class C{  public void readBucketsFromPrefs(){  SharedPreferences prefs=mContext.getSharedPreferences(SHARED_PREFS,0);  Set<String> buckets=prefs.getStringSet(PREF_BUCKETS_IDS,new TreeSet<String>());  mBuckets.clear();  for (  String bucketId : buckets) {    AutoMixBucket bucket=restoreBucketFromId(bucketId);    mBuckets.add(bucket);  }}  }
class C{  public void enableDPM(DPMInfoJson dpmInfo) throws ApiException {  Object postBody=dpmInfo;  byte[] postBinaryBody=null;  if (dpmInfo == null) {    throw new ApiException(400,"Missing the required parameter 'dpmInfo' when calling enableDPM");  }  String path="/v1/system/enableDPM".replaceAll("\\{format\\}","json");  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  public static boolean isAbsoluteImageRef(String src){  return src.startsWith("{@docRoot}");}  }
class C{  public boolean allowsAllContentTypes(){  if (mediaRange == null)   return false; else   return mediaRange.type.compareTo(STAR) == 0;}  }
class C{  public void test_DivideBigDecimalRoundingModeDOWN(){  String a="-37361671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.DOWN;  String c="0";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public void removeInteresado(String idInteresado){  getIntercambioRegistralManager().removeInteresado(idInteresado);}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  return null;}  }
class C{  public static final double poundsToNewtons(double pound){  return pound * POUND_TO_NEWTON;}  }
class C{  public final DD divide(double y){  if (Double.isNaN(y))   return createNaN();  return copy(this).selfDivide(y,0.0);}  }
class C{  protected boolean hasCompliantEntity(Object entity){  if (entity == null) {    return false;  }  if (entity instanceof List) {    List<?> entities=(List)entity;    for (    Object simpleEntity : entities) {      if (getElementType(simpleEntity) == UNKNOWN) {        return false;      }    }  } else   if (getElementType(entity) == UNKNOWN) {    return false;  }  return true;}  }
class C{  public static byte[] convertHexToBytes(String s){  int len=s.length();  if (len % 2 != 0) {    throw DbException.get(ErrorCode.HEX_STRING_ODD_1,s);  }  len/=2;  byte[] buff=new byte[len];  int mask=0;  int[] hex=HEX_DECODE;  try {    for (int i=0; i < len; i++) {      int d=hex[s.charAt(i + i)] << 4 | hex[s.charAt(i + i + 1)];      mask|=d;      buff[i]=(byte)d;    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw DbException.get(ErrorCode.HEX_STRING_WRONG_1,s);  }  if ((mask & ~255) != 0) {    throw DbException.get(ErrorCode.HEX_STRING_WRONG_1,s);  }  return buff;}  }
class C{  public TwitchApiRequest(TwitchApi origin,RequestType type,String url){  this(origin,type,url,null);}  }
class C{  @SuppressWarnings("unchecked") public static <O>Hierarchy.Iter<O> emptyIterator(){  return (Iter<O>)EMPTY_ITERATOR;}  }
class C{  static String valueToString(Object value,int indentFactor,int indent){  if (value == null || value.equals(null)) {    return "null";  }  try {    if (value instanceof String) {      return quote((String)value);    }  } catch (  Exception e) {  }  if (value instanceof Float || value instanceof Double || value instanceof Byte|| value instanceof Short|| value instanceof Integer|| value instanceof Long) {    return numberToString(value);  }  if (value instanceof Boolean) {    return value.toString();  }  if (value instanceof Map) {    return print((Map)value,indentFactor,indent);  }  if (value instanceof List) {    return print((List)value,indentFactor,indent);  }  return quote(value.toString());}  }
class C{  private void addListenerToItem(Entity entity){  InputListenerComponent inputListenerComponent=entity.getComponent(InputListenerComponent.class);  if (inputListenerComponent == null) {    inputListenerComponent=new InputListenerComponent();    entity.add(inputListenerComponent);  }  inputListenerComponent.removeAllListener();  inputListenerComponent.addListener(new SandboxItemEventListener(entity));}  }
class C{  @Override public void onProfileProvisioningComplete(Context context,Intent intent){  DevicePolicyManager manager=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);  ComponentName componentName=getComponentName(context);  manager.setProfileName(componentName,context.getString(R.string.profile_name));  Intent launch=new Intent(context,MainActivity.class);  launch.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(launch);}  }
class C{  public void repaint(long time,int x,int y,int width,int height){  if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {    RepaintManager.currentManager(this).addDirtyRegion(this,x,y,width,height);  } else {    super.repaint(time,x,y,width,height);  }}  }
class C{  public static String toHexString(byte[] bytes){  char[] chars=new char[bytes.length * 2];  int i=0;  for (  byte b : bytes) {    chars[i++]=CharUtil.int2hex((b & 0xF0) >> 4);    chars[i++]=CharUtil.int2hex(b & 0x0F);  }  return new String(chars);}  }
class C{  public void handleDOMCharacterDataModified(MutationEvent evt){  Node childNode=(Node)evt.getTarget();  if (isParentDisplayed(childNode)) {    if (getParentNode(childNode) != childNode.getParentNode()) {      computeLaidoutText(ctx,e,node);    } else {      laidoutText=null;    }  }}  }
class C{  private Object readResolve(){  return ToStringStyle.MULTI_LINE_STYLE;}  }
class C{  public boolean weakEquals(SoftwareVersion v){  log.info("Version detail info: version release {}, version prefix {}",v.release,v.prefix);  if (v.release.equals(SOFTWARE_VERSION_RELEASE_WILDCARD) || this.release.equals(SOFTWARE_VERSION_RELEASE_WILDCARD)) {    return this.prefix.equals(v.prefix) && Arrays.equals(versionTuple,v.versionTuple);  }  return this.equals(v);}  }
class C{  public synchronized void merge(Network network){  throwReadOnly();}  }
class C{  @Override public List<Element> generateXML(Document doc){  GaussianDensityFunction gaussian=new GaussianDensityFunction(points);  return gaussian.generateXML(doc);}  }
class C{  public InvalidPasswordException(){  super();}  }
class C{  public void inc(){  this.counter++;}  }
class C{  public Ring<E> hole(){  Ring<E> hole=new Ring<>(thisRef());  this.holes.add(hole);  return hole;}  }
class C{  public boolean hasReceiver(){  return !receiverNodes.isEmpty();}  }
class C{  public Node item(int index){  int handle=m_firstChild;  while (--index >= 0 && handle != DTM.NULL) {    handle=m_parentDTM.getNextSibling(handle);  }  if (handle == DTM.NULL) {    return null;  }  return m_parentDTM.getNode(handle);}  }
class C{  public void rollback(Xid xid) throws XAException {  StringBuilder commandBuf=new StringBuilder(MAX_COMMAND_LENGTH);  commandBuf.append("XA ROLLBACK ");  appendXid(commandBuf,xid);  try {    dispatchCommand(commandBuf.toString());  }  finally {    this.underlyingConnection.setInGlobalTx(false);  }}  }
class C{  private void init(Configuration exp) throws IOException {  isInitialized=true;}  }
class C{  public boolean isInsideScaleGrid(){  return insideScaleGrid || definesScaleGrid;}  }
class C{  public void saveGroup(){  save();}  }
class C{  public static void deleteMovementLine(Properties ctx,int movementLineId){  MMovementLine movementLine=new MMovementLine(ctx,movementLineId,null);  movementLine.delete(true,null);}  }
class C{  public Integer isValid(String captchaAnswer){  captchaAnswer=captchaAnswer.toUpperCase();  if (captchaAnswer.length() < captchaChars.length - 2) {    return null;  }  String patternStr="^";  for (int i=0; i < captchaChars.length; ++i) {    if (captchaCharColours[i] == CaptchaColours.LIGHT_GREY) {      patternStr+="(?<light>" + captchaChars[i] + ")?";    } else     if (captchaCharColours[i] == CaptchaColours.LIGHTEST_GREY) {      patternStr+="(?<lightest>" + captchaChars[i] + ")?";    } else {      patternStr+=captchaChars[i];    }  }  patternStr+="$";  Matcher matcher=Pattern.compile(patternStr).matcher(captchaAnswer);  if (matcher.matches() == false) {    return null;  }  if (matcher.group("light") == null) {    if (matcher.group("lightest") == null) {      return 2;    } else {      return null;    }  } else   if (matcher.group("lightest") == null) {    return 1;  }  return 0;}  }
class C{  private LZWDecode(ByteBuffer buf) throws PDFParseException {  for (int i=0; i < 256; i++) {    dict[i]=new byte[1];    dict[i][0]=(byte)i;  }  dictlen=258;  bitspercode=9;  this.buf=buf;  bytepos=0;  bitpos=0;}  }
class C{  public void testForkJoin(){  testForkJoin(mainPool());}  }
class C{  void errorMessage(String errMsg){  this.errMsg=errMsg;}  }
class C{  protected int engineGetKeySize(Key key) throws InvalidKeyException {  byte[] encoded=key.getEncoded();  if (!AESCrypt.isKeySizeValid(encoded.length)) {    throw new InvalidKeyException("Invalid key length: " + encoded.length + " bytes");  }  return encoded.length * 8;}  }
class C{  public boolean isConfidentialInfo(){  Object oo=get_Value(COLUMNNAME_IsConfidentialInfo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public String nextString(){  double sum=0;  for (  Pair p : _values) {    sum+=p._weight;  }  double val=_random.nextDouble();  for (  Pair p : _values) {    if (val < p._weight / sum) {      return p._value;    }    val-=p._weight / sum;  }  System.out.println("oops. should not get here.");  System.exit(0);  return null;}  }
class C{  public static <T>Iterator<T> sort(Iterator<T> self,@ClosureParams(value=FromString.class,options={"T","T,T"}) Closure closure){  return sort((Iterable<T>)toList(self),closure).listIterator();}  }
class C{  private E dequeue(){  final Object[] items=this.items;  @SuppressWarnings("unchecked") E x=(E)items[takeIndex];  items[takeIndex]=null;  if (++takeIndex == items.length)   takeIndex=0;  count--;  if (itrs != null)   itrs.elementDequeued();  notFull.signal();  return x;}  }
class C{  public static void main(String[] args){  HaitiFoodWithUI simple=new HaitiFoodWithUI(new HaitiFood(System.currentTimeMillis()));  Console c=new Console(simple);  c.setVisible(true);}  }
class C{  @Override public int hashCode(){  long temp=this.size != +0.0d ? Double.doubleToLongBits(this.size) : 0L;  return (int)(temp ^ (temp >>> 32));}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public VNXeCommandResult createHostIpPort(HostIpPortCreateParam param){  _logger.info("Creating hostIpPort: " + param.getAddress());  return postRequestSync(param);}  }
class C{  private ConditionMatch evaluateNumericCondition(final long compareWith){  if (log.isDebugEnabled()) {    log.debug("evaluating with operator, is " + compareWith + " "+ getOperator()+ " "+ numericValue);  }switch (operator) {case OPERATOR_NOT_EQUAL:    return compareWith != numericValue ? new ConditionMatch() : null;case OPERATOR_GREATER_THAN:  return compareWith > numericValue ? new ConditionMatch() : null;case OPERATOR_LESS_THAN:return compareWith < numericValue ? new ConditionMatch() : null;case OPERATOR_GREATER_THAN_OR_EQUAL:return compareWith >= numericValue ? new ConditionMatch() : null;case OPERATOR_LESS_THAN_OR_EQUAL:return compareWith <= numericValue ? new ConditionMatch() : null;default :return compareWith == numericValue ? new ConditionMatch() : null;}}  }
class C{  @HLEFunction(nid=0x5F9529F6,version=150,checkInsideInterrupt=true) public int __sceSasSetSL(int sasCore,int voice,int level){  checkSasAndVoiceHandlesGood(sasCore,voice);  voices[voice].getEnvelope().SustainLevel=level;  return 0;}  }
class C{  public void layout(Container container){  Map<Location,Drawable> comps=getComponentsByLocation(container);  Drawable north=comps.get(Location.NORTH);  Drawable northEast=comps.get(Location.NORTH_EAST);  Drawable east=comps.get(Location.EAST);  Drawable southEast=comps.get(Location.SOUTH_EAST);  Drawable south=comps.get(Location.SOUTH);  Drawable southWest=comps.get(Location.SOUTH_WEST);  Drawable west=comps.get(Location.WEST);  Drawable northWest=comps.get(Location.NORTH_WEST);  Drawable center=comps.get(Location.CENTER);  double widthWest=getMaxWidth(northWest,west,southWest);  double widthEast=getMaxWidth(northEast,east,southEast);  double heightNorth=getMaxHeight(northWest,north,northEast);  double heightSouth=getMaxHeight(southWest,south,southEast);  double gapWest=(widthWest > 0.0 && center != null) ? getGapX() : 0.0;  double gapEast=(widthEast > 0.0 && center != null) ? getGapX() : 0.0;  double gapNorth=(heightNorth > 0.0 && center != null) ? getGapY() : 0.0;  double gapSouth=(heightSouth > 0.0 && center != null) ? getGapY() : 0.0;  Rectangle2D bounds=container.getBounds();  Insets2D insets=container.getInsets();  if (insets == null) {    insets=new Insets2D.Double();  }  double xWest=bounds.getMinX() + insets.getLeft();  double xCenter=xWest + widthWest + gapWest;  double xEast=bounds.getMaxX() - insets.getRight() - widthEast;  double yNorth=bounds.getMinY() + insets.getTop();  double yCenter=yNorth + heightNorth + gapNorth;  double ySouth=bounds.getMaxY() - insets.getBottom() - heightSouth;  double widthAll=widthWest + widthEast;  double heightAll=heightNorth + heightSouth;  double gapHAll=gapWest + gapEast;  double gapVAll=gapNorth - gapSouth;  layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth);  layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal() - widthAll- gapHAll,heightNorth);  layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth);  layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical() - heightAll- gapVAll);  layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth);  layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal() - widthAll- gapHAll,heightSouth);  layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth);  layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical() - heightAll- gapVAll);  layoutComponent(center,xCenter,yCenter,bounds.getWidth() - insets.getLeft() - widthAll- insets.getRight()- gapHAll,bounds.getHeight() - insets.getTop() - heightAll- insets.getBottom()- gapVAll);}  }
class C{  public boolean isSPD(){  return isspd;}  }
class C{  public Quaterniond rotation(double angleX,double angleY,double angleZ){  double thetaX=angleX * 0.5;  double thetaY=angleY * 0.5;  double thetaZ=angleZ * 0.5;  double thetaMagSq=thetaX * thetaX + thetaY * thetaY + thetaZ * thetaZ;  double s;  if (thetaMagSq * thetaMagSq / 24.0f < 1E-8f) {    w=1.0 - thetaMagSq / 2.0;    s=1.0 - thetaMagSq / 6.0;  } else {    double thetaMag=Math.sqrt(thetaMagSq);    w=Math.cos(thetaMag);    s=Math.sin(thetaMag) / thetaMag;  }  x=thetaX * s;  y=thetaY * s;  z=thetaZ * s;  return this;}  }
class C{  public void paintCheckBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public GenericFeed retreiveGroupOwners(String groupId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getFeed(new URL(baseDomainUrl + groupId + "/owner"),GenericFeed.class);}  }
class C{  private Resource loadFromDir(File resourceDir,ActionLogger alog) throws InvalidConfigException {  if (resourceDir.exists()) {    String shortname=resourceDir.getName();    try {      File cfgFile=dataDir.resourceFile(shortname,PERSISTENCE_FILE);      InputStream input=new FileInputStream(cfgFile);      Resource resource=(Resource)xstream.fromXML(input);      resource.getManagers().remove(null);      for (      ExtensionMapping ext : resource.getMappings()) {        Extension x=ext.getExtension();        if (x == null) {          alog.warn("manage.resource.create.extension.null");          throw new InvalidConfigException(TYPE.INVALID_EXTENSION,"Resource references non-existent extension");        } else         if (extensionManager.get(x.getRowType()) == null) {          alog.warn("manage.resource.create.rowType.null",new String[]{x.getRowType()});          throw new InvalidConfigException(TYPE.INVALID_EXTENSION,"Resource references non-installed extension");        }        if (ext.isCore() && !ext.isTaxonCore() && ext.getIdColumn() != null) {          if (ext.getIdColumn().equals(ExtensionMapping.IDGEN_LINE_NUMBER) || ext.getIdColumn().equals(ExtensionMapping.IDGEN_UUID)) {            ext.setIdColumn(ExtensionMapping.NO_ID);          }        }      }      resource.setShortname(shortname);      if (resource.getCoreType() == null) {        inferCoreType(resource);      }      if (resource.getSubtype() != null) {        standardizeSubtype(resource);      }      for (      Source src : resource.getSources()) {        src.setResource(resource);        if (src instanceof FileSource) {          FileSource frSrc=(FileSource)src;          frSrc.setFile(dataDir.sourceFile(resource,frSrc));        }      }      if (resource.getIdentifierStatus() == null) {        resource.setIdentifierStatus(IdentifierStatus.UNRESERVED);      }      loadEml(resource);      BigDecimal converted=convertVersion(resource);      if (converted != null) {        updateResourceVersion(resource,resource.getEmlVersion(),converted);      }      VersionHistory history=constructVersionHistoryForLastPublishedVersion(resource);      if (history != null) {        resource.addVersionHistory(history);      }      if (resource.getLastPublishedVersionsVersion() != null) {        renameDwcaToIncludeVersion(resource,resource.getLastPublishedVersionsVersion());      }      syncEmlWithResource(resource);      log.debug("Read resource configuration for " + shortname);      return resource;    } catch (    FileNotFoundException e) {      log.error("Cannot read resource configuration for " + shortname,e);      throw new InvalidConfigException(TYPE.RESOURCE_CONFIG,"Cannot read resource configuration for " + shortname + ": "+ e.getMessage());    }  }  return null;}  }
class C{  public MembershipAttributes(String[] requiredRoles,LossAction lossAction,ResumptionAction resumptionAction){  this.requiredRoles=toRoleSet(requiredRoles);  if (this.requiredRoles.isEmpty()) {    throw new IllegalArgumentException(LocalizedStrings.MembershipAttributes_ONE_OR_MORE_REQUIRED_ROLES_MUST_BE_SPECIFIED.toLocalizedString());  }  this.lossAction=lossAction;  this.resumptionAction=resumptionAction;}  }
class C{  public int mapColumnIndex(int parsedIndex){  return parsedIndex - getFirstColumnIndex();}  }
class C{  public static ViewGroup buildStickyDrawerItemFooter(Context ctx,DrawerBuilder drawer,View.OnClickListener onClickListener){  final LinearLayout linearLayout=new LinearLayout(ctx);  linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));  linearLayout.setOrientation(LinearLayout.VERTICAL);  linearLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(ctx,R.attr.material_drawer_background,R.color.material_drawer_background));  if (drawer.mStickyFooterDivider) {    addStickyFooterDivider(ctx,linearLayout);  }  fillStickyDrawerItemFooter(drawer,linearLayout,onClickListener);  return linearLayout;}  }
class C{  public static <U,I>Function<U,IntPredicate> all(){  return null;}  }
class C{  @Override public void onMousePressed(final MapMouseEvent ev){  if (!isTriggerMouseButton(ev)) {    return;  }  panePos=ev.getPoint();  panning=true;}  }
class C{  public Transform lerped(Vector2 dp,double da,double alpha){  Transform result=new Transform();  result.set(this);  result.translate(dp.x * alpha,dp.y * alpha);  result.rotate(da * alpha,result.getTranslationX(),result.getTranslationY());  return result;}  }
class C{  public void addPersianDate(int field,int amount){  if (amount == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  if (field == YEAR) {    setPersianDate(this.persianYear + amount,getPersianMonth() + 1,this.persianDay);    return;  } else   if (field == MONTH) {    setPersianDate(this.persianYear + ((getPersianMonth() + 1 + amount) / 12),(getPersianMonth() + 1 + amount) % 12,this.persianDay);    return;  }  add(field,amount);  calculatePersianDate();}  }
class C{  public WbXmlAttribute addValues(List<String> values){  this.values.addAll(values);  return this;}  }
class C{  public static boolean isLoggable(int logLevel){  return (logLevel >= LOGLEVEL);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (attribute: ");  result.append(attribute);  result.append(')');  return result.toString();}  }
class C{  public void paint(Graphics g,Shape alloc){synchronized (locator) {    locator.setAllocation(alloc);    locator.paintChildren(g);  }}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceDescription createInstance(ProvisioningSettings settings) throws APPlatformException {  try {    PropertyHandler ph=new PropertyHandler(settings);    validateStackName(ph);    ph.setState(FlowState.CREATION_REQUESTED);    InstanceDescription id=new InstanceDescription();    id.setInstanceId("stack-" + UUID.randomUUID().toString());    id.setBaseUrl("baseurl");    id.setChangedParameters(settings.getParameters());    LOGGER.info("createInstance({})",LogAndExceptionConverter.getLogText(id.getInstanceId(),settings));    return id;  } catch (  Exception t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.CREATION);  }}  }
class C{  public int readInt(){  byte[] buff=data;  int x=(buff[pos] << 24) + ((buff[pos + 1] & 0xff) << 16) + ((buff[pos + 2] & 0xff) << 8)+ (buff[pos + 3] & 0xff);  pos+=4;  return x;}  }
class C{  @Override protected void executionStarted(){  m_ButtonStart.setEnabled(false);  m_ButtonStop.setEnabled(true);}  }
class C{  public EffectItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected void predefineImageFills(Movie movie,SWFTagTypes timelineWriter,SWFTagTypes definitionWriter) throws IOException {  for (Iterator it=elements.iterator(); it.hasNext(); ) {    Object el=it.next();    if (el instanceof Shape.ImageFill) {      Symbol image=((Shape.ImageFill)el).getImage();      if (image != null) {        image.define(movie,timelineWriter,definitionWriter);      }    }  }}  }
class C{  private final void cleanLast0(final byte[] b,final int start) throws IOException {  assert b.length - start >= this.recordsize;  if (this.buffercount > 0) {    System.arraycopy(this.buffer,(this.buffercount - 1) * this.recordsize,b,start,this.recordsize);    this.buffercount--;    return;  }  long endpos=this.raf.length() - this.recordsize;  if (endpos >= 0) {    this.raf.seek(endpos);    this.raf.readFully(b,start,this.recordsize);  } else {    endpos=0;    System.arraycopy(this.zero,0,b,start,this.recordsize);  }  this.raf.seek(endpos);  this.raf.write(this.zero,0,this.recordsize);  this.raf.setLength(endpos);}  }
class C{  public static Joint show(Window owner,SandboxBody[] bodies,Class<? extends Joint> clazz){  AddJointDialog dialog=new AddJointDialog(owner,bodies,clazz);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    dialog.incrementCounter(clazz);    return dialog.pnlJoint.getJoint();  } else {    return null;  }}  }
class C{  void checkError() throws IOException {  if (powerFailureCountdown == 0) {    return;  }  if (powerFailureCountdown < 0) {    throw POWER_FAILURE;  }  powerFailureCountdown--;  if (powerFailureCountdown == 0) {    powerFailureCountdown--;    throw POWER_FAILURE;  }}  }
class C{  public T caseKey_(Key_ object){  return null;}  }
class C{  public int hashCode(){  Object method=getProperties().get("hashCode");  if (method != null && method instanceof Closure) {    Closure closure=(Closure)method;    closure.setDelegate(this);    Integer ret=(Integer)closure.call();    return ret.intValue();  } else {    return super.hashCode();  }}  }
class C{  public static byte[] hash(byte[] input){  if (input != null) {    final MessageDigest digest;    try {      digest=MessageDigest.getInstance("SHA-256");      byte[] hashedBytes=input;      digest.update(hashedBytes,0,hashedBytes.length);      return hashedBytes;    } catch (    NoSuchAlgorithmException e) {      Log.e(TAG,"problem hashing \"" + input + "\" "+ e.getMessage(),e);    }  } else {    Log.w(TAG,"hash called with null input byte[]");  }  return null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.057 -0500",hash_original_method="79F0F9E2337864B3A25E38841319137B",hash_generated_method="760DF7690E0B7EAD9ECBC86BAD1DE27E") public static void fill(Object[] array,int start,int end,Object value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] removeElement(Class<T> kind,T[] array,T element){  if (array != null) {    final int length=array.length;    for (int i=0; i < length; i++) {      if (array[i] == element) {        if (length == 1) {          return null;        }        T[] result=(T[])Array.newInstance(kind,length - 1);        System.arraycopy(array,0,result,0,i);        System.arraycopy(array,i + 1,result,i,length - i - 1);        return result;      }    }  }  return array;}  }
class C{  final Object peek(){  int size=stack.size();  return size == 0 ? null : stack.get(size - 1);}  }
class C{  public IoServiceListenerSupport(IoService service){  if (service == null) {    throw new IllegalArgumentException("service");  }  this.service=service;}  }
class C{  void pretendIssuesSyncedAndDownloadedAndUploaded(){  pretendIssuesSyncedAndDownloaded();  fireNewIssuesUploadedEvent();}  }
class C{  public SimpleQueryParser(Analyzer analyzer,Map<String,Float> weights,int flags,Settings settings){  super(analyzer,weights,flags);  this.settings=settings;}  }
class C{  public RenderStringStockChange(DataLogicStockChanges dlChanges){  m_dlChanges=dlChanges;}  }
class C{  private void applyPriorModel(ExampleSet trainingSet,List<BayBoostBaseModelInfo> modelInfo) throws OperatorException {  if (this.startModel != null) {    ExampleSet resultSet=this.startModel.apply((ExampleSet)trainingSet.clone());    WeightedPerformanceMeasures wp=new WeightedPerformanceMeasures(resultSet);    this.reweightExamples(wp,resultSet);    modelInfo.add(new BayBoostBaseModelInfo(this.startModel,wp.getContingencyMatrix()));    PredictionModel.removePredictedLabel(resultSet);  }}  }
class C{  public void constructGraph(String nodeFile,String numNodes,String linkFile,String weightI) throws FileNotFoundException {  System.out.println("Loading nodes into array list...");  myGraph=new DirectedSparseMultigraph<NmvNode,NmvLink>();  String csvFile1=nodeFile;  BufferedReader br1=null;  String lineNode="";  String counterID;  String currentNodeId;  double currentNodeX;  double currentNodeY;  int number=Integer.parseInt(numNodes);  int weightIndex=Integer.parseInt(weightI);  String[] nodeId=new String[number];  int counter=0;  ArrayList<NmvNode> nodeList=new ArrayList<NmvNode>();  NmvNode currentNode=new NmvNode("","",0,0);  try {    br1=new BufferedReader(new FileReader(csvFile1));    while ((lineNode=br1.readLine()) != null) {      String[] nodeData=lineNode.split(",");      counterID=Integer.toString(counter);      currentNodeId=nodeData[1];      currentNodeX=Double.parseDouble(nodeData[3]);      currentNodeY=Double.parseDouble(nodeData[4]);      currentNode=new NmvNode(counterID,currentNodeId,currentNodeX,currentNodeY);      nodeId[counter]=currentNodeId;      nodeList.add(counter,currentNode);      counter++;    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (br1 != null) {      try {        br1.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  System.out.println("Nodes loaded in array list");  System.out.println("Adding links to graph....");  String csvFile2=linkFile;  BufferedReader br2=null;  String lineLink="";  String currentLinkId;  String currentFromId;  String currentToId;  double currentLinkWeight;  double currentTransProb;  int indexTo;  int indexFrom;  int counter1=0;  try {    br2=new BufferedReader(new FileReader(csvFile2));    while ((lineLink=br2.readLine()) != null) {      String[] linkData=lineLink.split(",");      currentLinkId=linkData[0];      currentFromId=linkData[1];      currentToId=linkData[2];      currentLinkWeight=Double.parseDouble(linkData[weightIndex]);      indexFrom=getNode(nodeList,currentFromId);      indexTo=getNode(nodeList,currentToId);      currentTransProb=0;      myGraph.addEdge(new NmvLink(currentLinkId,currentLinkWeight,currentTransProb),nodeList.get(indexFrom),nodeList.get(indexTo),EdgeType.DIRECTED);      counter1++;    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (br2 != null) {      try {        br2.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  LinkedList<NmvLink> linkList=new LinkedList(myGraph.getEdges());  System.out.println("Graph created");}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  maybeParse();  out.defaultWriteObject();}  }
class C{  public static boolean isAutoNew(Properties ctx){  if (ctx == null)   throw new IllegalArgumentException("Require Context");  String s=getContext(ctx,"AutoNew");  if (s != null && s.equals("Y"))   return true;  return false;}  }
class C{  public void testWaitSeqno() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  Future<ReplDBMSHeader> future=pipeline.watchForCommittedSequenceNumber(9,false);  ReplDBMSHeader matchingEvent=future.get(3,TimeUnit.SECONDS);  assertTrue("Applied sequence number matches",matchingEvent.getSeqno() >= 9);  assertTrue("Applied seqnence number not higher",matchingEvent.getSeqno() < 10);  future=pipeline.watchForExtractedSequenceNumber(9);  matchingEvent=future.get(3,TimeUnit.SECONDS);  assertTrue("Extracted sequence number matches",matchingEvent.getSeqno() >= 9);  assertTrue("Extracted seqnence number not higher",matchingEvent.getSeqno() < 10);  String eventId=matchingEvent.getEventId();  future=pipeline.watchForExtractedEventId(eventId);  matchingEvent=future.get(3,TimeUnit.SECONDS);  assertTrue("Extracted event ID matches",eventId.equals(matchingEvent.getEventId()));  future=pipeline.watchForProcessedEventId(eventId);  matchingEvent=future.get(3,TimeUnit.SECONDS);  assertTrue("Applied event ID matches",eventId.equals(matchingEvent.getEventId()));  future=pipeline.watchForExtractedSequenceNumber(99);  try {    matchingEvent=future.get(1,TimeUnit.SECONDS);    throw new Exception("Wait for extracted event did not time out! seqno=" + matchingEvent.getSeqno());  } catch (  TimeoutException e) {  }  future=pipeline.watchForProcessedSequenceNumber(99);  try {    matchingEvent=future.get(1,TimeUnit.SECONDS);    throw new Exception("Wait for applied event did not time out! seqno=" + matchingEvent.getSeqno());  } catch (  TimeoutException e) {  }  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  private boolean isStemmable(String term){  for (int c=0; c < term.length(); c++) {    if (!Character.isLetter(term.charAt(c)))     return false;  }  return true;}  }
class C{  public AddCacheServerProfileMessage(){}  }
class C{  public MoveEvaluation alreadyDetermined(IGameState state){  Node<Pair> node=list.head();  while (node != null) {    Pair p=node.value();    if (state.equivalent(p.state)) {      return p.move;    }    node=node.next();  }  return null;}  }
class C{  public boolean hasLayers(){  return (mapBean.getComponentCount() > 0);}  }
class C{  public void testDivideRoundHalfDownPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean isImageCachable(int w,int h){  return (w * h) < maxSingleImagePixelSize;}  }
class C{  public void complete(){}  }
class C{  public SVGFlowRootElementBridge(){}  }
class C{  private static String single(File file){  return file.getAbsolutePath();}  }
class C{  protected void processCloudletSubmit(SimEvent ev,boolean ack){  updateCloudletProcessing();  try {    ContainerCloudlet cl=(ContainerCloudlet)ev.getData();    if (cl.isFinished()) {      String name=CloudSim.getEntityName(cl.getUserId());      Log.printConcatLine(getName(),": Warning - Cloudlet #",cl.getCloudletId()," owned by ",name," is already completed/finished.");      Log.printLine("Therefore, it is not being executed again");      Log.printLine();      if (ack) {        int[] data=new int[3];        data[0]=getId();        data[1]=cl.getCloudletId();        data[2]=CloudSimTags.FALSE;        int tag=CloudSimTags.CLOUDLET_SUBMIT_ACK;        sendNow(cl.getUserId(),tag,data);      }      sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_RETURN,cl);      return;    }    cl.setResourceParameter(getId(),getCharacteristics().getCostPerSecond(),getCharacteristics().getCostPerBw());    int userId=cl.getUserId();    int vmId=cl.getVmId();    int containerId=cl.getContainerId();    double fileTransferTime=predictFileTransferTime(cl.getRequiredFiles());    ContainerHost host=getVmAllocationPolicy().getHost(vmId,userId);    ContainerVm vm=host.getContainerVm(vmId,userId);    Container container=vm.getContainer(containerId,userId);    double estimatedFinishTime=container.getContainerCloudletScheduler().cloudletSubmit(cl,fileTransferTime);    if (estimatedFinishTime > 0.0 && !Double.isInfinite(estimatedFinishTime)) {      estimatedFinishTime+=fileTransferTime;      send(getId(),estimatedFinishTime,CloudSimTags.VM_DATACENTER_EVENT);    }    if (ack) {      int[] data=new int[3];      data[0]=getId();      data[1]=cl.getCloudletId();      data[2]=CloudSimTags.TRUE;      int tag=CloudSimTags.CLOUDLET_SUBMIT_ACK;      sendNow(cl.getUserId(),tag,data);    }  } catch (  ClassCastException c) {    Log.printLine(String.format("%s.processCloudletSubmit(): ClassCastException error.",getName()));    c.printStackTrace();  }catch (  Exception e) {    Log.printLine(String.format("%s.processCloudletSubmit(): Exception error.",getName()));    e.printStackTrace();  }  checkCloudletCompletion();}  }
class C{  public WebAppFactory(HttpBaratineBuilder httpBuilder,HttpBaratine http){  Objects.requireNonNull(httpBuilder);  Objects.requireNonNull(http);  _id="webapp";  _path="";  _http=http;  _config=httpBuilder.config();  for (  IncludeWebAmp webModule : httpBuilder.include()) {    _includes.add(webModule);  }}  }
class C{  public ToHitData(int value,String desc,int hitTable,int sideTable){  super(value,desc);  this.hitTable=hitTable;  this.sideTable=sideTable;}  }
class C{  public boolean write(Type type,Object value,NodeMap<OutputNode> node,Map map) throws Exception {  boolean reference=strategy.write(type,value,node,map);  if (!reference) {    return write(type,value,node);  }  return reference;}  }
class C{  public static Test suite(){  return new TestSuite(CSVTest.class);}  }
class C{  public void add(TimeBlock timeblock,Employee empl){  times.add(timeInterval(empl,timeblock));}  }
class C{  public Code(MethodSymbol meth,boolean fatcode,Position.LineMap lineMap,boolean varDebugInfo,StackMapFormat stackMap,boolean debugCode,CRTable crt,Symtab syms,Types types,Pool pool,LVTRanges lvtRanges){  this.meth=meth;  this.fatcode=fatcode;  this.lineMap=lineMap;  this.lineDebugInfo=lineMap != null;  this.varDebugInfo=varDebugInfo;  this.crt=crt;  this.syms=syms;  this.types=types;  this.debugCode=debugCode;  this.stackMap=stackMap;switch (stackMap) {case CLDC:case JSR202:    this.needStackMap=true;  break;default :this.needStackMap=false;}state=new State();lvar=new LocalVar[20];this.pool=pool;this.lvtRanges=lvtRanges;}  }
class C{  public void addExit(BlockNode exit){  if (exit != null) {    curState.exits.add(exit);  }}  }
class C{  public static boolean isFloat(String s){  if (isEmpty(s))   return defaultEmptyOK;  boolean seenDecimalPoint=false;  if (s.startsWith(decimalPointDelimiter))   return false;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == decimalPointDelimiter.charAt(0)) {      if (!seenDecimalPoint) {        seenDecimalPoint=true;      } else {        return false;      }    } else {      if (!isDigit(c))       return false;    }  }  return true;}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public Picker resume(List<Uri> uriList){  if (uriList == null) {    return this;  }  mResumeList.addAll(uriList);  return this;}  }
class C{  private TypeDependenceGraph initializeTypeSystem(final List<RawBaseType> rawBaseTypes,final List<RawTypeMember> rawMembers){  ImmutableList.Builder<BaseType> baseTypes=ImmutableList.<BaseType>builder();  for (  final RawBaseType rawType : rawBaseTypes) {    final BaseType newType=new BaseType(rawType.getId(),rawType.getName(),rawType.getSize(),rawType.isSigned(),rawType.getCategory());    types.add(newType);    typesById.put(newType.getId(),newType);    typesByName.put(newType.getName(),newType);    stableTypeList.clear();    baseTypes.add(newType);  }  ImmutableList.Builder<TypeMember> typeMembers=ImmutableList.<TypeMember>builder();  for (  final RawTypeMember rawMember : rawMembers) {    final BaseType parentType=typesById.get(rawMember.getParentId());    TypeMember newMember=null;    if (rawMember.getOffset().isPresent()) {      newMember=TypeMember.createStructureMember(rawMember.getId(),parentType,typesById.get(rawMember.getBaseTypeId()),rawMember.getName(),rawMember.getOffset().get());    } else     if (rawMember.getArgumentIndex().isPresent()) {      newMember=TypeMember.createFunctionPrototypeMember(rawMember.getId(),parentType,typesById.get(rawMember.getBaseTypeId()),rawMember.getName(),rawMember.getArgumentIndex().get());    } else     if (rawMember.getNumberOfElements().isPresent()) {      newMember=TypeMember.createArrayMember(rawMember.getId(),parentType,typesById.get(rawMember.getBaseTypeId()),rawMember.getName(),rawMember.getNumberOfElements().get());    } else {      throw new IllegalStateException("Error: can not associate the raw member to a compound type.");    }    typeMembers.add(newMember);    memberById.put(newMember.getId(),newMember);    newMember.getParentType().addMember(newMember);  }  for (  final RawBaseType rawType : rawBaseTypes) {    final Integer pointerId=rawType.getPointerId();    if (pointerId != null) {      final BaseType child=typesById.get(pointerId);      final BaseType parent=typesById.get(rawType.getId());      BaseType.appendToPointerHierarchy(child,parent);    }  }  return new TypeDependenceGraph(baseTypes.build(),typeMembers.build());}  }
class C{  private void scaleHyponymCountMap() throws WikiApiException {  for (  int key : getHyponymCountMap().keySet()) {    if (getHyponymCountMap().get(key) > graph.vertexSet().size()) {      getHyponymCountMap().put(key,(graph.vertexSet().size() - 1));    }  }}  }
class C{  private TupleQueryResult readExpectedTupleQueryResult(String resultFile) throws Exception {  Optional<QueryResultFormat> tqrFormat=QueryResultIO.getParserFormatForFileName(resultFile);  if (tqrFormat.isPresent()) {    InputStream in=SPARQLServiceEvaluationTest.class.getResourceAsStream(resultFile);    try {      TupleQueryResultParser parser=QueryResultIO.createTupleParser(tqrFormat.get());      parser.setValueFactory(SimpleValueFactory.getInstance());      TupleQueryResultBuilder qrBuilder=new TupleQueryResultBuilder();      parser.setQueryResultHandler(qrBuilder);      parser.parseQueryResult(in);      return qrBuilder.getQueryResult();    }  finally {      in.close();    }  } else {    Set<Statement> resultGraph=readExpectedGraphQueryResult(resultFile);    return DAWGTestResultSetUtil.toTupleQueryResult(resultGraph);  }}  }
class C{  public boolean removeDefaultGraph(IRI graphURI){  return defaultGraphs.remove(graphURI);}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class<?> c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Before public void init(){  compiler=new Compiler();  options=new Options();  options.setOutputStyle(OutputStyle.COMPRESSED);}  }
class C{  public void addAttribute(AttributeInfo info){  if (attribute == null)   attribute=new ArrayList();  AttributeInfo.remove(attribute,info.getName());  attribute.add(info);}  }
class C{  public boolean isActAsLabel(){  return actAsLabel;}  }
class C{  public ResultFileReader(Problem problem,File file) throws IOException {  super();  this.problem=problem;  reader=new BufferedReader(new FileReader(file));  line=reader.readLine();}  }
class C{  protected double distance(double xDataPt,double yDataPt,double xGrdPt,double yGrdPt){  double dx=xDataPt - xGrdPt;  double dy=yDataPt - yGrdPt;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public int levels(URL url){  String path=getPathWithoutSuffix(url).replaceAll("/+$","");  int levels=0;  for (int i=0; i < path.length(); i++) {    if (path.charAt(i) == '/') {      levels++;    }  }  return levels;}  }
class C{  public static Archives createArchives(){  return new ArchivesImpl();}  }
class C{  public CallableStatement prepareCall(final String sql,final int resultSetType,final int resultSetConcurrency,final int resultSetHoldability) throws SQLException {  return prepareCall(sql);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private void iterate(IgniteCache<Integer,Integer> cache,IgniteInClosure<Cache.Entry<Integer,Integer>> c){  for (  Cache.Entry<Integer,Integer> entry : cache.localEntries())   c.apply(entry);}  }
class C{  public WriteMultipleCoilsRequest(int ref,BitVector bv){  super();  setFunctionCode(Modbus.WRITE_MULTIPLE_COILS);  setDataLength(bv.byteSize() + 5);  setReference(ref);  coils=bv;}  }
class C{  private void removeConstraints(Component comp){  comptable.remove(comp);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public static boolean deviceHasCameraAbility(){  return BaseProjectApplication.getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA);}  }
class C{  public boolean isSearching(){  return isSearching;}  }
class C{  public static int readFully(Reader in,char[] buffer,int max) throws IOException {  try {    int result=0, len=Math.min(max,buffer.length);    while (len > 0) {      int l=in.read(buffer,result,len);      if (l < 0) {        break;      }      result+=l;      len-=l;    }    return result;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  private void dropIntMultTbl(DbConnection dbConn) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropIntMultTbl");  try {    tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_INTEGER);    DbTableFns.dropTable(dbConn,tableName);  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  public DistributionPointName(RDN relativeName){  if (relativeName == null) {    throw new IllegalArgumentException("relativeName must not be null");  }  this.relativeName=relativeName;}  }
class C{  @Override protected void reduce(NullWritable key,Iterable<Fact> triples,Context context) throws IOException, InterruptedException {  long count=0;  for (  Fact fact : triples) {    schema.processTriple(fact.getTriple());    count++;    if (count % LOG_INTERVAL == 0) {      log.debug("After " + count + " schema triples...");      log.debug(schema.getSummary());    }    if (debug) {      debugKey.set("SCHEMA TRIPLE " + count);      debugValue.set(fact.explain(false));      debugOut.write(MRReasoningUtils.DEBUG_OUT,debugKey,debugValue);    }  }  log.debug("Total: " + count + " schema triples");  log.debug(schema.getSummary());}  }
class C{  static String escapeBytes(final ByteString input){  final StringBuilder builder=new StringBuilder(input.size());  for (int i=0; i < input.size(); i++) {    final byte b=input.byteAt(i);switch (b) {case 0x07:      builder.append("\\a");    break;case '\b':  builder.append("\\b");break;case '\f':builder.append("\\f");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;case '\t':builder.append("\\t");break;case 0x0b:builder.append("\\v");break;case '\\':builder.append("\\\\");break;case '\'':builder.append("\\\'");break;case '"':builder.append("\\\"");break;default :if (b >= 0x20) {builder.append((char)b);} else {builder.append('\\');builder.append((char)('0' + ((b >>> 6) & 3)));builder.append((char)('0' + ((b >>> 3) & 7)));builder.append((char)('0' + (b & 7)));}break;}}return builder.toString();}  }
class C{  GeneralRange<T> intersect(GeneralRange<T> other){  checkNotNull(other);  checkArgument(comparator.equals(other.comparator));  boolean hasLowBound=this.hasLowerBound;  @Nullable T lowEnd=getLowerEndpoint();  BoundType lowType=getLowerBoundType();  if (!hasLowerBound()) {    hasLowBound=other.hasLowerBound;    lowEnd=other.getLowerEndpoint();    lowType=other.getLowerBoundType();  } else   if (other.hasLowerBound()) {    int cmp=comparator.compare(getLowerEndpoint(),other.getLowerEndpoint());    if (cmp < 0 || (cmp == 0 && other.getLowerBoundType() == OPEN)) {      lowEnd=other.getLowerEndpoint();      lowType=other.getLowerBoundType();    }  }  boolean hasUpBound=this.hasUpperBound;  @Nullable T upEnd=getUpperEndpoint();  BoundType upType=getUpperBoundType();  if (!hasUpperBound()) {    hasUpBound=other.hasUpperBound;    upEnd=other.getUpperEndpoint();    upType=other.getUpperBoundType();  } else   if (other.hasUpperBound()) {    int cmp=comparator.compare(getUpperEndpoint(),other.getUpperEndpoint());    if (cmp > 0 || (cmp == 0 && other.getUpperBoundType() == OPEN)) {      upEnd=other.getUpperEndpoint();      upType=other.getUpperBoundType();    }  }  if (hasLowBound && hasUpBound) {    int cmp=comparator.compare(lowEnd,upEnd);    if (cmp > 0 || (cmp == 0 && lowType == OPEN && upType == OPEN)) {      lowEnd=upEnd;      lowType=OPEN;      upType=CLOSED;    }  }  return new GeneralRange<T>(comparator,hasLowBound,lowEnd,lowType,hasUpBound,upEnd,upType);}  }
class C{  public static synchronized void cleanup(Statement S){  if (S != null) {    cleanup(S,null);  }}  }
class C{  private void writeData() throws IOException {  int tosend;  int sent=0;  byte[] block=new byte[kBlockSize];  do {    tosend=bytesPerSend != 0 ? bytesPerSend : block.length;    tosend=send_stream.read(block,tosend);    if (tosend > 0) {      sent=sender.send(block,tosend);      updateLocalClock();      if (sent != -1) {        if (logger.isLoggable(Level.FINE)) {          logger.log(Level.FINE,"Sent: " + sent);        }      } else {        logger.log(Level.FINE,"Flow controlled");      }    } else {      sent=tosend=0;    }  } while (sent > 0);}  }
class C{  public PBEKeySpec(char[] password){  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  salt=null;  iterationCount=0;  keyLength=0;}  }
class C{  public static boolean lookAhead(PsiBuilder builder,IElementType[] elems){  if (elems[0] != builder.getTokenType())   return false;  if (elems.length == 1)   return true;  Marker rb=builder.mark();  builder.advanceLexer();  int i=1;  while (!builder.eof() && i < elems.length && elems[i] == builder.getTokenType()) {    builder.advanceLexer();    i++;  }  rb.rollbackTo();  return i == elems.length;}  }
class C{  @Override public boolean containsValue(final Object value){  throw new UnsupportedOperationException();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode08.class,args);}  }
class C{  public void addMethodNoBidirectionalUpdate(MethodType type){  if (methods == null) {    methods=new MethodTypeSet();  }  methods.add(type);}  }
class C{  public void testPassword(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  configuration.setProperty(RemotePropertySet.PASSWORD,"foo");  Hashtable<String,Object> connectionOptions=factory.readConfiguration(configuration);  assertEquals(connectionOptions.get(Context.INITIAL_CONTEXT_FACTORY),MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_INITIAL_CTX_FACTORY);  assertEquals(connectionOptions.get(Context.PROVIDER_URL),MEJBMBeanServerConnectionFactory.DEFAULT_PROVIDER_URI);  assertNull(connectionOptions.get(Context.SECURITY_PRINCIPAL));  assertNull(connectionOptions.get(Context.SECURITY_CREDENTIALS));  assertEquals(factory.mejbJndiPath,MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_MEJB_PATH);  assertNull(factory.username);  assertNull(factory.password);  assertNull(factory.jaasFile);  assertNull(factory.jaasEntry);}  }
class C{  protected void writeColumnNames(ResultSet rs) throws SQLException {  writeNext(resultService.getColumnNames(rs));}  }
class C{  public final boolean doesOpFilterHasDiscoveryFilter(final Object filterValue,final String[] filterValuesFromOp){  boolean bOpHasFilterValue=true;  if (filterValue instanceof List<?>) {    @SuppressWarnings("unchecked") final List<String> filterValuesFromKeymap=(List<String>)filterValue;    boolean bMatched=false;    for (    String v : filterValuesFromKeymap) {      for (      String s : filterValuesFromOp) {        if (v.equalsIgnoreCase(s)) {          bMatched=true;          break;        }      }    }    if (!bMatched) {      bOpHasFilterValue=false;    }  }  return bOpHasFilterValue;}  }
class C{  @Override public Collection<VALUE> values(){  Collection<VALUE> vs=values;  return (vs != null ? vs : (values=new Values()));}  }
class C{  public Script createEmptyInputScript(@Nullable ECKey key,@Nullable Script redeemScript){  if (isSentToAddress()) {    checkArgument(key != null,"Key required to create pay-to-address input script");    return ScriptBuilder.createInputScript(null,key);  } else   if (isSentToRawPubKey()) {    return ScriptBuilder.createInputScript(null);  } else   if (isPayToScriptHash()) {    checkArgument(redeemScript != null,"Redeem script required to create P2SH input script");    return ScriptBuilder.createP2SHMultiSigInputScript(null,redeemScript);  } else {    throw new ScriptException("Do not understand script type: " + this);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SIF__ELSE:    setElse((EObject)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private CExpressionTreeValidator(){}  }
class C{  public Pong(long nonce){  this.nonce=nonce;}  }
class C{  public FileExistsException(File file){  super("File " + file + " exists");}  }
class C{  public int hashCode(){  int total=0;  Iterator it=createEntrySetIterator();  while (it.hasNext()) {    total+=it.next().hashCode();  }  return total;}  }
class C{  public AccessibilityEvent dequeue(){  if (mEventQueue.isEmpty()) {    return null;  }  final AccessibilityEvent event=mEventQueue.remove(0);  if (event != null && AccessibilityEventUtils.eventMatchesAnyType(event,MASK_LIMITED_EVENT_TYPES)) {    final int eventType=event.getEventType();    final int eventCountOfType=mQualifyingEvents.get(eventType,0);    mQualifyingEvents.put(eventType,(eventCountOfType - 1));  }  return event;}  }
class C{  public static boolean isSame(boolean[] s1,boolean[] s2){  boolean reverse;  reverse=s1[0] != s2[0];  if (s1.length != s2.length)   throw new IllegalArgumentException("Splits must be of the same length!");  for (int i=0; i < s1.length; i++) {    if (reverse) {      if (s1[i] == s2[i])       return false;    } else {      if (s1[i] != s2[i])       return false;    }  }  return true;}  }
class C{  public synchronized void unsynchronizeWith(UpdateSynchronizer oldsync){  if (synchronizer == null) {    LoggingUtil.warning("Warning: was not synchronized.");    return;  }  if (synchronizer != oldsync) {    LoggingUtil.warning("Warning: was synchronized differently!");    return;  }  synchronizer=null;  runQueue();}  }
class C{  public boolean isEnabled(){  return getBooleanProperty(BOOLEAN_PROPERTY_ENABLED);}  }
class C{  public <T>String toJson(T dto){  if (dto instanceof JsonSerializable) {    return ((JsonSerializable)dto).toJson();  }  throw new IllegalArgumentException("JsonSerializable instance required. ");}  }
class C{  public long deleteAttributeValue(final long attributeValuePk) throws UnmappedInterfaceException, UnableToCreateInstanceException {  final long productSkuId=dtoProductSkuService.deleteAttributeValue(attributeValuePk);  reindexService.reindexProductSku(productSkuId);  return productSkuId;}  }
class C{  public void logPurchase(BigDecimal purchaseAmount,Currency currency,Bundle parameters){  if (purchaseAmount == null) {    notifyDeveloperError("purchaseAmount cannot be null");    return;  } else   if (currency == null) {    notifyDeveloperError("currency cannot be null");    return;  }  if (parameters == null) {    parameters=new Bundle();  }  parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,currency.getCurrencyCode());  logEvent(AppEventsConstants.EVENT_NAME_PURCHASED,purchaseAmount.doubleValue(),parameters);  eagerFlush();}  }
class C{  public boolean checkVolumeAssociatedWithAnyPhantomSG(String volNativeId,String groupName,StorageSystem storage,String policy){  CloseableIterator<CIMInstance> sgInstanceIr=null;  try {    _log.info("Trying to find volume {} is associated with any phantom SG with expected FAST {}",volNativeId,policy);    CIMObjectPath volumePath=_cimPath.getVolumePath(storage,volNativeId);    sgInstanceIr=getAssociatorInstances(storage,volumePath,null,SmisCommandHelper.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup.name(),null,null,SmisConstants.PS_ELEMENT_NAME);    while (sgInstanceIr.hasNext()) {      CIMInstance sgInstance=sgInstanceIr.next();      String gpNameFound=(String)sgInstance.getPropertyValue(SmisConstants.CP_ELEMENT_NAME);      if (groupName.equalsIgnoreCase(gpNameFound)) {        continue;      }      _log.info("Volume {} available in other SG {}",volNativeId,gpNameFound);      if (!checkStorageGroupInAnyMaskingView(storage,sgInstance.getObjectPath()) && checkVolumeGroupAssociatedWithPolicy(storage,sgInstance.getObjectPath(),policy)) {        return true;      }    }  } catch (  Exception e) {    _log.warn("Find volume associated with any phantom SG with right policy failed",e);  } finally {    if (null != sgInstanceIr) {      sgInstanceIr.close();    }  }  _log.info("No Phantom SGs found for volume {}",volNativeId);  return false;}  }
class C{  protected void append(StringBuilder dest,String content,int start,int end){  if (escape) {    for (int i=start; i < end; i++) {      char ch=content.charAt(i);switch (ch) {case '&':        dest.append("&amp;");      break;case '<':    dest.append("&lt;");  break;case '>':dest.append("&gt;");break;case '"':dest.append("&quot;");break;case '\'':dest.append("&#x27;");break;case '/':dest.append("&#x2F;");break;default :if (ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A) {dest.append(ch);} else if (ch < 0xff) {dest.append("&#");dest.append((int)ch);dest.append(";");} else {dest.append(ch);}}}} else {dest.append(content,start,end);}}  }
class C{  public boolean updateDownload(DownloadInfo di){  ContentValues cv=new ContentValues();  cv.put(DownloadColumns.INDEX,di.mIndex);  cv.put(DownloadColumns.FILENAME,di.mFileName);  cv.put(DownloadColumns.URI,di.mUri);  cv.put(DownloadColumns.ETAG,di.mETag);  cv.put(DownloadColumns.TOTALBYTES,di.mTotalBytes);  cv.put(DownloadColumns.CURRENTBYTES,di.mCurrentBytes);  cv.put(DownloadColumns.LASTMOD,di.mLastMod);  cv.put(DownloadColumns.STATUS,di.mStatus);  cv.put(DownloadColumns.CONTROL,di.mControl);  cv.put(DownloadColumns.NUM_FAILED,di.mNumFailed);  cv.put(DownloadColumns.RETRY_AFTER,di.mRetryAfter);  cv.put(DownloadColumns.REDIRECT_COUNT,di.mRedirectCount);  return updateDownload(di,cv);}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(ListDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new ListDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  public void selectAll(){  select(0L,content.length());  refreshSelections();}  }
class C{  public ServiceResult toServiceResult(){  ServiceResult res=new ServiceResult();  if (statusCode == null)   res.setCode(new StatusCode(StatusCodes.Bad_UnexpectedError)); else   res.setCode(statusCode);  res.setSymbolicId(statusCode.toString());  res.setLocalizedText(new LocalizedText(getMessage(),""));  res.setAdditionalInfo(Arrays.toString(getStackTrace()));  return res;}  }
class C{  public static void writeTextFile(String theName,List<String> theContents) throws IOException {  theName=getInitialPropertyExpanded(theName);  File file=new File(theName);  if (file.isFile() && !file.delete()) {    throw new IOException("Failed to delete " + file.getCanonicalFile());  }  PrintWriter writer=new PrintWriter(file);  try {    for (Iterator<String> ii=theContents.iterator(); ii.hasNext(); )     writer.println(ii.next());  }  finally {    writer.close();  }}  }
class C{  protected void visitInspectorAssertion(InspectorAssertion assertion){  VariableReference source=assertion.getSource();  Object value=assertion.getValue();  Inspector inspector=assertion.getInspector();  if (value == null) {    testCode+="assertNull(" + getVariableName(source) + "."+ inspector.getMethodCall()+ "());";  } else   if (value.getClass().equals(Long.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ "."+ inspector.getMethodCall()+ "());";  } else   if (value.getClass().equals(Float.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ "."+ inspector.getMethodCall()+ "(), "+ NumberFormatter.getNumberString(Properties.FLOAT_PRECISION)+ ");";  } else   if (value.getClass().equals(Double.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ "."+ inspector.getMethodCall()+ "(), "+ NumberFormatter.getNumberString(Properties.DOUBLE_PRECISION)+ ");";  } else   if (value.getClass().equals(Character.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ "."+ inspector.getMethodCall()+ "());";  } else   if (value.getClass().equals(String.class)) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ "."+ inspector.getMethodCall()+ "());";  } else   if (value.getClass().isEnum() || value instanceof Enum) {    testCode+="assertEquals(" + NumberFormatter.getNumberString(value) + ", "+ getVariableName(source)+ "."+ inspector.getMethodCall()+ "());";    getClassName(value.getClass());  } else   if (value.getClass().equals(boolean.class) || value.getClass().equals(Boolean.class)) {    if (((Boolean)value).booleanValue())     testCode+="assertTrue(" + getVariableName(source) + "."+ inspector.getMethodCall()+ "());"; else     testCode+="assertFalse(" + getVariableName(source) + "."+ inspector.getMethodCall()+ "());";  } else   testCode+="assertEquals(" + value + ", "+ getVariableName(source)+ "."+ inspector.getMethodCall()+ "());";}  }
class C{  @Override public boolean updateElevation(QuadTree quadTree){  return (false);}  }
class C{  public void drawLine(int x1,int y1,int x2,int y2){  g.drawLine(x1,y1,x2,y2);}  }
class C{  protected void offsetCorner(float x1,float y1,float x2,float y2,float x3,float y3,float distance,Vec2D out){  float c1=x2, d1=y2, c2=x2, d2=y2;  float dx1, dy1, dist1, dx2, dy2, dist2, insetX, insetY;  dx1=x2 - x1;  dy1=y2 - y1;  dist1=(float)Math.sqrt(dx1 * dx1 + dy1 * dy1);  dx2=x3 - x2;  dy2=y3 - y2;  dist2=(float)Math.sqrt(dx2 * dx2 + dy2 * dy2);  if (dist1 < MathUtils.EPS || dist2 < MathUtils.EPS) {    return;  }  dist1=distance / dist1;  dist2=distance / dist2;  insetX=dy1 * dist1;  insetY=-dx1 * dist1;  x1+=insetX;  c1+=insetX;  y1+=insetY;  d1+=insetY;  insetX=dy2 * dist2;  insetY=-dx2 * dist2;  x3+=insetX;  c2+=insetX;  y3+=insetY;  d2+=insetY;  if (c1 == c2 && d1 == d2) {    out.set(c1,d1);    return;  }  Line2D l1=new Line2D(new Vec2D(x1,y1),new Vec2D(c1,d1));  Line2D l2=new Line2D(new Vec2D(c2,d2),new Vec2D(x3,y3));  LineIntersection isec=l1.intersectLine(l2);  final Vec2D ipos=isec.getPos();  if (ipos != null) {    out.set(ipos);  }}  }
class C{  public VisorGridTaskEvent(int typeId,IgniteUuid id,String name,UUID nid,long ts,@Nullable String msg,String shortDisplay,String taskName,String taskClsName,IgniteUuid taskSesId,boolean internal){  super(typeId,id,name,nid,ts,msg,shortDisplay);  this.taskName=taskName;  this.taskClsName=taskClsName;  this.taskSesId=taskSesId;  this.internal=internal;}  }
class C{  HasEnabledView(Document parent,Map<String,Object> data,Class<? extends Document> mainInterface){  super(parent,data,mainInterface);}  }
class C{  public void testSwapCleanupAfterCacheDestroy() throws Exception {  try (Ignite g=startGrid()){    for (int iter=0; iter < 3; iter++) {      IgniteCache cache=g.getOrCreateCache(createCacheConfiguration());      for (int i=0; i < 20; i++) {        assertNull(cache.get(i));        cache.put(i,i);      }      String spaceName=CU.swapSpaceName(internalCache(cache).context());      GridSwapSpaceManager swapSpaceMgr=((IgniteEx)g).context().swap();      assertEquals(10,swapSpaceMgr.swapKeys(spaceName));      g.destroyCache(cache.getName());      assertEquals(0,swapSpaceMgr.swapKeys(spaceName));      assertEquals(0,swapSpaceMgr.swapSize(spaceName));    }  } }  }
class C{  public void processFirstMessage(IAnalyzedInterval contextElement,short[] timeLine){  final boolean hasTimeline=!ArrayUtils.isEmpty(timeLine);  final long millisPerTick=contextElement.getInterval().getIntervalSize() / SummarizationProperties.TIMELINE_RESOLUTION;  if (hasTimeline) {    m_firstMsgTime=contextElement.getIntervalStartTime() + timeLine[0] * millisPerTick;    m_mainStat=MainStatVal.REGULAR;    m_deltasInSeconds=new ArrayList<Long>(timeLine.length);  } else {    m_firstMsgTime=contextElement.getIntervalStartTime() + (SummarizationProperties.TIMELINE_RESOLUTION / SPLIT_TIMELINE_FACTOR) * millisPerTick;    m_mainStat=MainStatVal.NO_TIMELINE;    m_deltasInSeconds=new ArrayList<Long>(1);  }}  }
class C{  public static List<String> readLines(Reader reader) throws IOException {  IteratorClosureAdapter<String> closure=new IteratorClosureAdapter<String>(reader);  eachLine(reader,closure);  return closure.asList();}  }
class C{  protected Extent computeExtent(DrawContext dc){  if (this.coordBuffer == null)   return null;  this.coordBuffer.rewind();  Box box=Box.computeBoundingBox(new BufferWrapper.FloatBufferWrapper(this.coordBuffer),ColladaAbstractGeometry.COORDS_PER_VERTEX);  Matrix matrix=this.computeRenderMatrix(dc);  List<Vec4> extrema=new ArrayList<Vec4>();  Vec4[] corners=box.getCorners();  for (  Vec4 corner : corners) {    extrema.add(corner.transformBy4(matrix));  }  if (extrema.isEmpty())   return null;  return Box.computeBoundingBox(extrema);}  }
class C{  public void addBannedMac(final String mac,final Date banTill){  if (isMacBanned(mac).getFirst()) {    removeBannedMac(mac);  }  Timestamp banTillTs=null;  if (banTill != null) {    banTillTs=new Timestamp(banTill.getTime());  }  s_logger.fine("Banning mac:" + mac);  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement("insert into banned_macs (mac, ban_till) values (?, ?)");    ps.setString(1,mac);    ps.setTimestamp(2,banTillTs);    ps.execute();    ps.close();    con.commit();  } catch (  final SQLException sqle) {    if (sqle.getErrorCode() == 30000) {      s_logger.info("Tried to create duplicate banned mac:" + mac + " error:"+ sqle.getMessage());      return;    }    s_logger.log(Level.SEVERE,"Error inserting banned mac:" + mac,sqle);    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }}  }
class C{  public synchronized void free(long pos,int length){  int start=getBlock(pos);  int blocks=getBlockCount(length);  BlockRange x=new BlockRange(start,blocks);  BlockRange next=freeSpace.ceiling(x);  if (next == null) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Free space sentinel is missing");  }  BlockRange prev=freeSpace.lower(x);  if (prev != null) {    if (prev.start + prev.blocks == start) {      prev.blocks+=blocks;      if (prev.start + prev.blocks == next.start) {        prev.blocks+=next.blocks;        freeSpace.remove(next);      }      return;    }  }  if (start + blocks == next.start) {    next.start-=blocks;    next.blocks+=blocks;    return;  }  freeSpace.add(x);}  }
class C{  public int arrayLength(){  return mArray.length;}  }
class C{  public Builder addFixed64(final long value){  if (result.fixed64 == null) {    result.fixed64=new ArrayList<Long>();  }  result.fixed64.add(value);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.587 -0500",hash_original_method="DA93EFB6297A5552E15BC0248101E996",hash_generated_method="84449B13270383501CCC60F1CE80C5AC") public String auditStack(Set activeCallIDs,long leakedDialogTimer,long leakedTransactionTimer){  String auditReport=null;  String leakedDialogs=auditDialogs(activeCallIDs,leakedDialogTimer);  String leakedServerTransactions=auditTransactions(serverTransactionTable,leakedTransactionTimer);  String leakedClientTransactions=auditTransactions(clientTransactionTable,leakedTransactionTimer);  if (leakedDialogs != null || leakedServerTransactions != null || leakedClientTransactions != null) {    auditReport="SIP Stack Audit:\n" + (leakedDialogs != null ? leakedDialogs : "") + (leakedServerTransactions != null ? leakedServerTransactions : "")+ (leakedClientTransactions != null ? leakedClientTransactions : "");  }  return auditReport;}  }
class C{  public boolean hasQValue(){  return hasParameter("q");}  }
class C{  public IntIterator rangeSortedBy(String field,int lo,int hi,int indexType){  Index index=getIndex(field,int.class,true);  return index.rows(lo,hi,indexType);}  }
class C{  public boolean isUsedForVista(){  return usedForVista;}  }
class C{  @Override public void validate(){}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  private static String attributeName(SourceCode cfml,RefBoolean dynamic,ArrayList<String> args,TagLibTag tag,StringBuffer sbType,boolean[] parseExpression,boolean allowDefaultValue) throws TemplateException {  String _id=identifier(cfml,!allowDefaultValue,true);  if (StringUtil.isEmpty(_id)) {    return null;  }  int typeDef=tag.getAttributeType();  String id=StringUtil.toLowerCase(_id);  if (args.contains(id))   throw createTemplateException(cfml,"you can't use the same tag attribute [" + id + "] twice",tag);  args.add(id);  if ("attributecollection".equals(id)) {    dynamic.setValue(tag.getAttribute(id,true) == null);    sbType.append("struct");    parseExpression[0]=true;    parseExpression[1]=true;  } else   if (typeDef == TagLibTag.ATTRIBUTE_TYPE_FIXED || typeDef == TagLibTag.ATTRIBUTE_TYPE_MIXED) {    TagLibTagAttr attr=tag.getAttribute(id,true);    if (attr == null) {      if (typeDef == TagLibTag.ATTRIBUTE_TYPE_FIXED) {        String names=tag.getAttributeNames();        if (StringUtil.isEmpty(names))         throw createTemplateException(cfml,"Attribute " + id + " is not allowed for tag "+ tag.getFullName(),tag);        try {          names=ListUtil.sort(names,"textnocase",null,null);        } catch (        Throwable t) {        }        throw createTemplateException(cfml,"Attribute " + id + " is not allowed for tag "+ tag.getFullName(),"valid attribute names are [" + names + "]",tag);      }      dynamic.setValue(true);    } else {      id=attr.getName();      sbType.append(attr.getType());      parseExpression[0]=attr.getRtexpr();    }  } else   if (typeDef == TagLibTag.ATTRIBUTE_TYPE_DYNAMIC) {    dynamic.setValue(true);  }  return id;}  }
class C{  public void transmit(Command c,Map h,String b){  try {    Transmitter.transmit(c,h,b,_output);  } catch (  Exception e) {    receive(Command.ERROR,null,e.getMessage());  }}  }
class C{  public Boolean isLacpSupported(){  return lacpSupported;}  }
class C{  public boolean removeTuple(Tuple t){  if (t instanceof Node) {    return removeNode((Node)t);  } else   if (t instanceof Edge) {    return removeEdge((Edge)t);  } else {    throw new IllegalArgumentException("Input tuple must be part of this graph");  }}  }
class C{  public static int toIntValue(int i){  return i;}  }
class C{  public Interpolation(SpatialGrid sg,final int method,final double exp){  this.sg=sg;  this.interpolationMethod=method;  this.exp=exp;  if (this.interpolationMethod == BILINEAR) {    log.info("Preparing bilinear interpolation ...");    this.biLinearInterpolator=new BiLinearInterpolator(this.sg);  }  if (this.interpolationMethod == BICUBIC) {    log.info("Preparing bicubic interpolation ...");    this.biCubicInterpolator=new BiCubicInterpolator(this.sg);  }  if (this.interpolationMethod == INVERSE_DISTANCE_WEIGHTING) {    log.info("Preparing interpolation with the inverse distance weighting method ...");    this.inverseDistanceWeighting=new InverseDistanceWeighting(this.sg);  }}  }
class C{  public MultiModuleScriptProvider(Iterable<? extends ModuleScriptProvider> providers){  final List<ModuleScriptProvider> l=new LinkedList<ModuleScriptProvider>();  for (  ModuleScriptProvider provider : providers) {    l.add(provider);  }  this.providers=l.toArray(new ModuleScriptProvider[l.size()]);}  }
class C{  public boolean hasThresholdValue(){  return getThresholdValue() != null;}  }
class C{  private void expectAlarmAt(long millis){  mMockAlarmManager.expectAlarmTime(AlarmManager.RTC_WAKEUP,millis + AlarmScheduler.ALARM_DELAY_MS);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream temp=new DerOutputStream();  DerOutputStream bytes=new DerOutputStream();  temp.putOctetString(userData);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  if (timestamp != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),timestamp.asn1Encode());  }  if (usec != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(usec.intValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),temp);  }  if (seqNumber != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(seqNumber.longValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),temp);  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),sAddress.asn1Encode());  if (rAddress != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),rAddress.asn1Encode());  }  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x1C),temp);  return bytes.toByteArray();}  }
class C{  protected MessageUid findFirstUnseenMessageUid(MailboxSession session) throws MailboxException {  MessageMapper messageMapper=mapperFactory.getMessageMapper(session);  return messageMapper.findFirstUnseenMessageUid(getMailboxEntity());}  }
class C{  public void printStackTrace(PrintWriter writer){  m_stackTrace=ExceptionUtil.fillInExceptionMessage(this,m_stackTrace,getMessage());  writer.print(m_stackTrace);}  }
class C{  public ScheduledExecutorService newScheduledThreadPool(int poolSize,String name){  return threadPools.newScheduledThreadPool(poolSize,name);}  }
class C{  @Override protected EClass eStaticClass(){  return SRuntimePackage.Literals.EXECUTION_SLOT;}  }
class C{  private static Path2D createLeftTabShape(int x,int y,int w,int h,double rLeft,boolean addSide){  Path2D path=new Path2D.Double();  path.append(new Line2D.Double(x + w,y + h,x + rLeft,y + h),true);  QuadCurve2D curve=new QuadCurve2D.Double(x + rLeft,y + h,x,y + h,x,y + h - rLeft);  path.append(curve,true);  path.append(new Line2D.Double(x,y + h - rLeft,x,y + rLeft),true);  curve=new QuadCurve2D.Double(x,y + rLeft,x,y,x + rLeft,y);  path.append(curve,true);  path.append(new Line2D.Double(x + rLeft,y,x + w,y),true);  if (addSide) {    path.append(new Line2D.Double(x + w,y,x + w,y + h - 1),true);  }  return path;}  }
class C{  public boolean isRangeGridlinesVisible(){  return this.rangeGridlinesVisible;}  }
class C{  public ClientResponse unsetProtectionType(URI id){  String unsetFlag=String.format(INTERNAL_VARRAY_UNSET_PROTECTIONTYPE,id.toString());  WebResource rRoot=createRequest(unsetFlag);  ClientResponse resp=null;  try {    resp=addSignature(rRoot).delete(ClientResponse.class);  } catch (  UniformInterfaceException e) {    _log.warn("could not unset protection flag from varray {}. Err:{}",id,e);    if (e.getResponse().getStatus() == 404) {      throw APIException.notFound.unableToFindEntityInURL(id);    }  }  return resp;}  }
class C{  public Query addIfNotEmpty(String segment,Object... args){  if (args != null && args.length == 1) {    if (args[0] == null) {      return this;    } else     if (args[0] instanceof String) {      String s=(String)args[0];      if (s.trim().length() < 1) {        return this;      }    }  }  return add(segment,args);}  }
class C{  public static final void normalize(Vector3d v){  if ((v.x == 0.0) && (v.y == 0.0) && (v.z == 0.0))   return;  normalize(v,v.length());}  }
class C{  private void reachablePathFind(Graph graph,Node a,Node b,Node c,LinkedList<Node> reachable){  Set<Node> cParents=new HashSet<>(graph.getParents(c));  Set<Node> visited=new HashSet<>();  visited.add(b);  visited.add(c);  while (reachable.size() > 0) {    Node x=reachable.removeFirst();    visited.add(x);    List<Node> pathExtensions=graph.getNodesInTo(x,Endpoint.ARROW);    pathExtensions.removeAll(visited);    for (    Node l : pathExtensions) {      boolean checkABCL=false;      for (      Set<Node> marginalSet : marginalVars) {        if (marginalSet.contains(a) && marginalSet.contains(b) && marginalSet.contains(c)&& marginalSet.contains(l)) {          checkABCL=true;        }      }      if (!checkABCL) {        continue;      }      if (!graph.isAdjacentTo(l,c)) {        doDdpOrientation(graph,l,a,b,c);        return;      } else       if (cParents.contains(l)) {        if (graph.getEndpoint(x,l) == Endpoint.ARROW) {          reachable.add(l);        }      }    }  }}  }
class C{  public int whatColumn(String columnname){  for (int i=0; i < columnInfo.length; i++) {    if (columnInfo[i].getColumnName().equals(columnname)) {      return i;    }  }  return -1;}  }
class C{  public void position(int position){  data.position(position);}  }
class C{  public static void main(String[] args){  System.out.println("JOHN G DOE -> " + toInitialCase("JOHN G DOE"));  System.out.println("DOE jOHn G. -> " + toInitialCase("DOE jOHn G."));  System.out.println("jOhN g. dOe -> " + toInitialCase("jOhN g. dOe"));  System.out.println("To be Or NOT to BE.that is THE QUESTION. -> " + toInitialCase("To be Or NOT to BE.that is THE QUESTION."));}  }
class C{  public void clearChatNotifications(){  ChatNotificationHelper.getInstance(this).clearChatNotifications();}  }
class C{  protected long countUnseenMessagesInMailbox(MailboxSession session) throws MailboxException {  MessageMapper messageMapper=mapperFactory.getMessageMapper(session);  return messageMapper.countUnseenMessagesInMailbox(getMailboxEntity());}  }
class C{  private Iterable<Element> iterableElements(final NodeList n){  return null;}  }
class C{  default FeatureToggle<T> toFeatureToggle(){  final Optional<T> opt=toOptional();  return opt.isPresent() ? FeatureToggle.enable(opt.get()) : FeatureToggle.disable(null);}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   super.fireEntityReference(name);}  }
class C{  public NopStmt newNopStmt(){  return new JNopStmt();}  }
class C{  private boolean initAttributes(){  Rows rows=new Rows();  rows.setParent(centerLayout);  if (m_M_Product_ID == 0 && !m_productWindow)   return false;  MAttributeSet as=null;  if (m_M_Product_ID != 0) {    m_product=MProduct.get(Env.getCtx(),m_M_Product_ID);    if (m_product.getM_AttributeSetInstance_ID() > 0) {      m_productASI=true;      if (m_M_AttributeSetInstance_ID != m_product.getM_AttributeSetInstance_ID()) {        log.fine("Different ASI than what is specified on Product!");      }    } else {      m_productASI=m_productWindow;    }    m_masi=MAttributeSetInstance.get(Env.getCtx(),m_M_AttributeSetInstance_ID,m_M_Product_ID);    if (m_masi == null) {      log.severe("No Model for M_AttributeSetInstance_ID=" + m_M_AttributeSetInstance_ID + ", M_Product_ID="+ m_M_Product_ID);      return false;    }    Env.setContext(Env.getCtx(),m_WindowNo,"M_AttributeSet_ID",m_masi.getM_AttributeSet_ID());    as=m_masi.getMAttributeSet();  } else {    int M_AttributeSet_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNoParent,"M_AttributeSet_ID");    m_masi=new MAttributeSetInstance(Env.getCtx(),0,M_AttributeSet_ID,null);    as=m_masi.getMAttributeSet();  }  if (as == null) {    FDialog.error(m_WindowNo,this,"PAttributeNoAttributeSet");    return false;  }  if (!m_productWindow || !m_productASI) {    if (!m_productASI) {      Row row=new Row();      if (m_M_AttributeSetInstance_ID == 0)       cbNewEdit.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(),"NewRecord"))); else       cbNewEdit.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(),"EditRecord")));      cbNewEdit.addEventListener(Events.ON_CHECK,this);      row.appendChild(cbNewEdit);      bSelect.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(),"SelectExisting")));      bSelect.setImage("images/PAttribute16.png");      bSelect.addEventListener(Events.ON_CLICK,this);      row.appendChild(bSelect);      rows.appendChild(row);    }    MAttribute[] attributes=as.getMAttributes(true);    log.fine("Instance Attributes=" + attributes.length);    for (int i=0; i < attributes.length; i++)     addAttributeLine(rows,attributes[i],false,false);  }  MAttribute[] attributes=as.getMAttributes(false);  log.fine("Product Attributes=" + attributes.length);  for (int i=0; i < attributes.length; i++)   addAttributeLine(rows,attributes[i],true,!m_productWindow);  if ((!m_productWindow || !m_productASI) && as.isLot()) {    Row row=new Row();    row.setParent(rows);    m_row++;    Label label=new Label(Util.cleanAmp(Msg.translate(Env.getCtx(),"Lot")));    row.appendChild(label);    row.appendChild(fieldLotString);    fieldLotString.setText(m_masi.getLot());    String sql="SELECT M_Lot_ID, Name " + "FROM M_Lot l " + "WHERE EXISTS (SELECT M_Product_ID FROM M_Product p "+ "WHERE p.M_AttributeSet_ID=" + m_masi.getM_AttributeSet_ID() + " AND p.M_Product_ID=l.M_Product_ID)";    fieldLot=new Listbox();    fieldLot.setMold("select");    KeyNamePair[] keyNamePairs=DB.getKeyNamePairs(sql,true);    for (    KeyNamePair pair : keyNamePairs) {      fieldLot.appendItem(pair.getName(),pair.getKey());    }    label=new Label(Util.cleanAmp(Msg.translate(Env.getCtx(),"M_Lot_ID")));    row=new Row();    row.setParent(rows);    m_row++;    row.appendChild(label);    row.appendChild(fieldLot);    if (m_masi.getM_Lot_ID() != 0) {      for (int i=1; i < fieldLot.getItemCount(); i++) {        ListItem pp=fieldLot.getItemAtIndex(i);        if ((Integer)pp.getValue() == m_masi.getM_Lot_ID()) {          fieldLot.setSelectedIndex(i);          fieldLotString.setReadonly(true);          break;        }      }    }    fieldLot.addEventListener(Events.ON_SELECT,this);    if (m_masi.getMAttributeSet().getM_LotCtl_ID() != 0) {      if (MRole.getDefault().isTableAccess(MLot.Table_ID,false) && MRole.getDefault().isTableAccess(MLotCtl.Table_ID,false) && !m_masi.isExcludeLot(m_AD_Column_ID,Env.isSOTrx(Env.getCtx(),m_WindowNoParent))) {        row=new Row();        row.setParent(rows);        m_row++;        row.appendChild(bLot);        bLot.addEventListener(Events.ON_CLICK,this);      }    }    mZoom=new Menuitem(Msg.getMsg(Env.getCtx(),"Zoom"),"images/Zoom16.png");    mZoom.addEventListener(Events.ON_CLICK,this);    popupMenu.appendChild(mZoom);    this.appendChild(popupMenu);  }  if ((!m_productWindow || !m_productASI) && as.isSerNo()) {    Row row=new Row();    row.setParent(rows);    m_row++;    Label label=new Label(Util.cleanAmp(Msg.translate(Env.getCtx(),"SerNo")));    row.appendChild(label);    row.appendChild(fieldSerNo);    fieldSerNo.setText(m_masi.getSerNo());    if (m_masi.getMAttributeSet().getM_SerNoCtl_ID() != 0) {      if (MRole.getDefault().isTableAccess(MSerNoCtl.Table_ID,false) && !m_masi.isExcludeSerNo(m_AD_Column_ID,Env.isSOTrx(Env.getCtx(),m_WindowNoParent))) {        row=new Row();        row.setParent(rows);        m_row++;        row.appendChild(bSerNo);        bSerNo.addEventListener(Events.ON_CLICK,this);      }    }  }  if ((!m_productWindow || !m_productASI) && as.isGuaranteeDate()) {    Row row=new Row();    row.setParent(rows);    m_row++;    Label label=new Label(Util.cleanAmp(Msg.translate(Env.getCtx(),"GuaranteeDate")));    if (m_M_AttributeSetInstance_ID == 0)     fieldGuaranteeDate.setValue(m_masi.getGuaranteeDate(true)); else     fieldGuaranteeDate.setValue(m_masi.getGuaranteeDate());    row.appendChild(label);    row.appendChild(fieldGuaranteeDate);  }  if (m_row == 0) {    FDialog.error(m_WindowNo,this,"PAttributeNoInfo");    return false;  }  if (!m_productWindow) {    cbNewEdit.setChecked(m_M_AttributeSetInstance_ID == 0);    cmd_newEdit();  }  Label label=new Label(Util.cleanAmp(Msg.translate(Env.getCtx(),"Description")));  fieldDescription.setText(m_masi.getDescription());  fieldDescription.setReadonly(true);  Row row=new Row();  row.setParent(rows);  row.appendChild(label);  row.appendChild(fieldDescription);  return true;}  }
class C{  public BulkUserImportException(String msg,BulkUserImportExceptionBean bean,Throwable cause){  super(msg,bean,cause);  this.bean=bean;}  }
class C{  public void removeAllZeros(){  Iterator<Map.Entry<K,AtomicLong>> entryIterator=map.entrySet().iterator();  while (entryIterator.hasNext()) {    Map.Entry<K,AtomicLong> entry=entryIterator.next();    AtomicLong atomic=entry.getValue();    if (atomic != null && atomic.get() == 0L) {      entryIterator.remove();    }  }}  }
class C{  static BOSHMessageEvent createRequestSentEvent(final BOSHClient source,final AbstractBody body){  return new BOSHMessageEvent(source,body);}  }
class C{  public void addItem(T item){  this.mItemList.add(item);  mScrollAdapter.addItem(item);}  }
class C{  public SendableStickerMessage build(){  return new SendableStickerMessage(sticker,replyTo,replyMarkup,disableNotification);}  }
class C{  public static boolean isID(int displayType){  if (displayType == ID || displayType == Table || displayType == TableDir || displayType == Search || displayType == Location || displayType == Locator || displayType == Account || displayType == Assignment || displayType == PAttribute || displayType == Image || displayType == Color)   return true;  return false;}  }
class C{  void filterSub(byte[] pixels,int startPos,int width){  int i;  int offset=bytesPerPixel;  int actualStart=startPos + offset;  int nBytes=width * bytesPerPixel;  int leftInsert=offset;  int leftExtract=0;  for (i=actualStart; i < startPos + nBytes; i++) {    leftBytes[leftInsert]=pixels[i];    pixels[i]=(byte)((pixels[i] - leftBytes[leftExtract]) % 256);    leftInsert=(leftInsert + 1) % 0x0f;    leftExtract=(leftExtract + 1) % 0x0f;  }}  }
class C{  public static char[] cloneCharArray(char[] chars){  if (chars == null) {    return null;  }  int len=chars.length;  if (len == 0) {    return chars;  }  char[] copy=new char[len];  System.arraycopy(chars,0,copy,0,len);  return copy;}  }
class C{  private ChatCondition constructHayCartsNotYetCompletedCondition(){  ChatCondition c=new AndCondition(new QuestStartedCondition(QUEST_SLOT),new QuestInStateCondition(QUEST_SLOT,0,"start"),new QuestStateGreaterThanCondition(QUEST_SLOT,1,0));  return c;}  }
class C{  protected double calcAngularWidth(NodeItem n,int d){  if (d > m_maxDepth)   m_maxDepth=d;  double aw=0;  Rectangle2D bounds=n.getBounds();  double w=bounds.getWidth(), h=bounds.getHeight();  double diameter=d == 0 ? 0 : Math.sqrt(w * w + h * h) / d;  if (n.isExpanded() && n.getChildCount() > 0) {    Iterator childIter=n.children();    while (childIter.hasNext()) {      NodeItem c=(NodeItem)childIter.next();      aw+=calcAngularWidth(c,d + 1);    }    aw=Math.max(diameter,aw);  } else {    aw=diameter;  }  ((Params)n.get(PARAMS)).width=aw;  return aw;}  }
class C{  @SuppressWarnings({"unchecked"}) public void addListener(EventType eventType,Listener<? extends BaseEvent> listener){  if (listener == null)   return;  if (listeners == null) {    listeners=new HashMap<String,List<Listener<BaseEvent>>>();  }  String key=getKey(eventType);  List<Listener<BaseEvent>> list=listeners.get(key);  if (list == null) {    list=new ArrayList<Listener<BaseEvent>>();    list.add((Listener)listener);    listeners.put(key,list);  } else {    if (!list.contains(listener)) {      list.add((Listener)listener);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return java.io.File.listRoots();}  }
class C{  @SuppressWarnings("unchecked") public <K,V>void store(final String space,final K key,final V val,long expirationTime) throws IgniteCheckedException {  assert key != null;  assert val != null;  assert enabled();  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to write to index (grid is stopping).");  try {    if (log.isDebugEnabled())     log.debug("Storing key to cache query index [key=" + key + ", value="+ val+ "]");    getSpi().store(space,key,val,expirationTime);  }  finally {    busyLock.leaveBusy();  }}  }
class C{  private void computeLabelSides(int geomIndex){  computeLabelSide(geomIndex,Position.LEFT);  computeLabelSide(geomIndex,Position.RIGHT);}  }
class C{  public APIException(APIError error){  super(Response.status(error.getType().getStatus()).type(MediaType.APPLICATION_JSON).entity(error).build());}  }
class C{  void putAttribute(String name,String value){  if ((attributes == null) || (attributes.size() == 0)) {    attributes=new HashMap<String,String>();  }  attributes.put(name,value);}  }
class C{  protected synchronized void notifyListenersSpiderComplete(boolean successful){  for (  SpiderListener l : listeners) {    l.spiderComplete(successful);  }}  }
class C{  private static Period create(int years,int months,int days){  if ((years | months | days) == 0) {    return ZERO;  }  return new Period(years,months,days);}  }
class C{  public int indexOf(final AbstractInsnNode insn){  if (cache == null) {    cache=toArray();  }  return insn.index;}  }
class C{  protected Jerry(Jerry parent,List<Node> nodeList){  this(parent,nodeList.toArray(new Node[nodeList.size()]));}  }
class C{  public static int compare(boolean left,Date right){  return compare(left ? 1D : 0D,right);}  }
class C{  protected int sizeOf(V value){  return 1;}  }
class C{  public RadialGradientPaint(Rectangle2D gradientBounds,float[] fractions,Color[] colors){  this((float)gradientBounds.getX() + ((float)gradientBounds.getWidth() / 2),(float)gradientBounds.getY() + ((float)gradientBounds.getWidth() / 2),(float)gradientBounds.getWidth() / 2,fractions,colors);}  }
class C{  @Override public void onReceive(Context context,Intent intent){  String action=intent.getAction();  if (ACTION_PASSWORD_CHANGED.equals(action)) {    onPasswordChanged(context,intent);  } else   if (ACTION_PASSWORD_FAILED.equals(action)) {    onPasswordFailed(context,intent);  } else   if (ACTION_PASSWORD_SUCCEEDED.equals(action)) {    onPasswordSucceeded(context,intent);  } else   if (ACTION_DEVICE_ADMIN_ENABLED.equals(action)) {    onEnabled(context,intent);  } else   if (ACTION_DEVICE_ADMIN_DISABLE_REQUESTED.equals(action)) {    CharSequence res=onDisableRequested(context,intent);    if (res != null) {      Bundle extras=getResultExtras(true);      extras.putCharSequence(EXTRA_DISABLE_WARNING,res);    }  } else   if (ACTION_DEVICE_ADMIN_DISABLED.equals(action)) {    onDisabled(context,intent);  } else   if (ACTION_PASSWORD_EXPIRING.equals(action)) {    onPasswordExpiring(context,intent);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference newEntRefNode;  NodeList newEntRefList;  Node child;  String name;  String value;  doc=(Document)load("staff",true);  newEntRefNode=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",newEntRefNode);  newEntRefList=newEntRefNode.getChildNodes();  assertSize("size",1,newEntRefList);  child=newEntRefNode.getFirstChild();  name=child.getNodeName();  assertEquals("name","#text",name);  value=child.getNodeValue();  assertEquals("value","Texas",value);}  }
class C{  public byte minor(){  return minor;}  }
class C{  public static Status needsAction(){  return create(NEEDS_ACTION);}  }
class C{  public EncodingWriter create(String encoding){  throw new UnsupportedOperationException();}  }
class C{  public ConfirmDialog(Window owner,String key,int mode,boolean showAskAgainCheckbox,Object... arguments){  super(owner,"confirm." + key,ModalityType.APPLICATION_MODAL,arguments);  constructConfirmDialog(mode,showAskAgainCheckbox);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_FLAGS__FLAGS:    return flags != null && !flags.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static final StringBuilder sprintf0d(StringBuilder sb,int value,int width){  long d=value;  if (d < 0) {    sb.append('-');    d=-d;    --width;  }  int n=10;  for (int i=2; i < width; i++) {    n*=10;  }  for (int i=1; i < width && d < n; i++) {    sb.append('0');    n/=10;  }  sb.append(d);  return sb;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:40.085 -0500",hash_original_method="464B91F9461F0393A5548F6081396811",hash_generated_method="B757C01EA85FA3AA8E87FB8B83D365B8") public boolean hasMonetaryCost(){  return mHasMonetaryCost;}  }
class C{  public OrganizationDataException(String message){  super(message);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static final float[] trim(float[] a,int size){  if (a.length == size) {    return a;  } else {    float[] b=new float[size];    System.arraycopy(a,0,b,0,size);    return b;  }}  }
class C{  private void applyConnectionParams(final HttpMethod method) throws IOException {  int timeout=0;  Object param=method.getParams().getParameter(HttpMethodParams.SO_TIMEOUT);  if (param == null) {    param=this.conn.getParams().getParameter(HttpConnectionParams.SO_TIMEOUT);  }  if (param != null) {    timeout=((Integer)param).intValue();  }  this.conn.setSocketTimeout(timeout);}  }
class C{  public Number physToMem(Number value){  return ((long)java.lang.Math.round((value.floatValue() - offsetPhys) * divider / factor - offset));}  }
class C{  public final String elementAt(int i){  return m_map[i];}  }
class C{  public PrivateKey loadPrivateKey() throws Exception {  if (defaultKeys) {    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);  }  if (priKey == null) {    FileReader f=new FileReader(path + "privatekey" + this.id);    BufferedReader r=new BufferedReader(f);    String tmp="";    String key="";    while ((tmp=r.readLine()) != null) {      key=key + tmp;    }    f.close();    r.close();    priKey=getPrivateKeyFromString(key);  }  return priKey;}  }
class C{  public TStructMember basicGetDefinedMember(){  return definedMember;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public void shutdown(){  mongodProcess.stop();  mongodExecutable.stop();}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public String installImage(final File file) throws LocalRepositoryException {  final String prefix="installImage path=" + file + ": ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_INSTALL,file.getPath()};  final String[] images=exec(prefix,cmd);  if (images == null) {    throw SyssvcException.syssvcExceptions.localRepoError(prefix + "Internal error. Null output");  } else   if (images.length != 1) {    throw SyssvcException.syssvcExceptions.localRepoError(prefix + "Internal error. No results.");  }  _log.info(prefix + "Success!");  return images[0];}  }
class C{  public static JSONObject toJSONObject(XMLTokener x) throws JSONException {  return (JSONObject)parse(x,false,null);}  }
class C{  private static <T>boolean containsIdentity(List<T> list,T object){  for (  T item : list) {    if (item == object) {      return true;    }  }  return false;}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (!(objectToCompare instanceof TradeOrder))   return false;  TradeOrder theOtherOrder=(TradeOrder)objectToCompare;  if (!theOtherOrder.getAction().equals((this.getAction()))) {    return false;  }  if (theOtherOrder.getAverageFilledPrice() != this.getAverageFilledPrice()) {    return false;  }  if (theOtherOrder.getAllOrNothing() != this.getAllOrNothing()) {    return false;  }  if (theOtherOrder.getAuxPrice() != this.getAuxPrice()) {    return false;  }  if (theOtherOrder.getClientId() != this.getClientId()) {    return false;  }  if (theOtherOrder.getCommission() != this.getCommission()) {    return false;  }  if (theOtherOrder.getCreateDate() != this.getCreateDate()) {    return false;  }  if (theOtherOrder.getDisplayQuantity() != this.getDisplayQuantity()) {    return false;  }  if (theOtherOrder.getFilledQuantity() != this.getFilledQuantity()) {    return false;  }  if (theOtherOrder.getFilledDate() != this.getFilledDate()) {    return false;  }  if (theOtherOrder.getGoodAfterTime() != this.getGoodAfterTime()) {    return false;  }  if (theOtherOrder.getGoodTillTime() != this.getGoodTillTime()) {    return false;  }  if (theOtherOrder.getHidden() != this.getHidden()) {    return false;  }  if (theOtherOrder.getIsOpenPosition() != this.getIsOpenPosition()) {    return false;  }  if (theOtherOrder.getIsFilled() != this.getIsFilled()) {    return false;  }  if (theOtherOrder.getLimitPrice() != this.getLimitPrice()) {    return false;  }  if (!theOtherOrder.getOcaGroupName().equals(this.getOcaGroupName())) {    return false;  }  if (theOtherOrder.getOcaType() != this.getOcaType()) {    return false;  }  if (theOtherOrder.getOrderKey() != this.getOrderKey()) {    return false;  }  if (!theOtherOrder.getOrderReference().equals(this.getOrderReference())) {    return false;  }  if (!theOtherOrder.getOrderType().equals(this.getOrderType())) {    return false;  }  if (theOtherOrder.getOverrideConstraints() != this.getOverrideConstraints()) {    return false;  }  if (theOtherOrder.getPermId() != this.getPermId()) {    return false;  }  if (theOtherOrder.getParentId() != this.getParentId()) {    return false;  }  if (theOtherOrder.getQuantity() != this.getQuantity()) {    return false;  }  if (!theOtherOrder.getTimeInForce().equals(this.getTimeInForce())) {    return false;  }  if (!theOtherOrder.getStatus().equals(this.getStatus())) {    return false;  }  if (theOtherOrder.getStopPrice() != this.getStopPrice()) {    return false;  }  if (theOtherOrder.getTransmit() != this.getTransmit()) {    return false;  }  if (theOtherOrder.getTriggerMethod() != this.getTriggerMethod()) {    return false;  }  if (!theOtherOrder.getWarningMessage().equals(this.getWarningMessage())) {    return false;  }  if (!theOtherOrder.getWhyHeld().equals(this.getWhyHeld())) {    return false;  }  return true;}  }
class C{  private synchronized void sendPendingState(){  if (!mPendingClients.isEmpty()) {    final Message[] messages=new Message[]{SantaServiceMessages.getBeginFullStateMessage(),SantaServiceMessages.getSwitchOffMessage(mPreferences.getSwitchOff()),getTimeUpdateMessage(),SantaServiceMessages.getCastDisabledMessage(mPreferences.getCastDisabled()),SantaServiceMessages.getGamesMessage(mPreferences.getGumballDisabled(),mPreferences.getJetpackDisabled(),mPreferences.getMemoryDisabled(),mPreferences.getRocketDisabled(),mPreferences.getDancerDisabled(),mPreferences.getSnowdownDisabled()),SantaServiceMessages.getDestinationPhotoMessage(mPreferences.getDestinationPhotoDisabled()),SantaServiceMessages.getStateMessage(mState),SantaServiceMessages.getVideosMessage(mPreferences.getVideos())};    for (int i=0; i < mPendingClients.size(); i++) {      final Messenger messenger=mPendingClients.get(i);      try {        for (        Message msg : messages) {          messenger.send(msg);        }        mClients.add(messenger);      } catch (      RemoteException e) {      }      mPendingClients.remove(i);    }  }}  }
class C{  private static void dualPivotQuicksort(long[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  long ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    long t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    long t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    long t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    long t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    long t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  long pivot1=ae2;  a[e2]=a[left];  long pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public void and() throws IOException {  writeCode(AND);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @MainThread public void stop(){  mRestartOnDisconnect=false;  Log.d(TAG,"Stopping socket notification client");  if (mThread != null) {    mThread.tryToStop();  }  cleanup();}  }
class C{  public boolean isTrackVisitedURLs(){  return trackVisitedURLs;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return type.isType(TC_CLASS) ? 25 : super.costInline(thresh,env,ctx);}  }
class C{  private void computeVOVs(KNNQuery<O> knnq,DBIDs ids,DoubleDataStore vols,WritableDoubleDataStore vovs,DoubleMinMax vovminmax){  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Variance of Volume",ids.size(),LOG) : null;  boolean warned=false;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    KNNList knns=knnq.getKNNForDBID(iter,k);    DoubleDBIDListIter it=knns.iter();    double vbar=0.;    for (; it.valid(); it.advance()) {      vbar+=vols.doubleValue(it);    }    vbar/=knns.size();    double vov=0.;    for (it.seek(0); it.valid(); it.advance()) {      double v=vols.doubleValue(it) - vbar;      vov+=v * v;    }    if (!(vov < Double.POSITIVE_INFINITY) && !warned) {      LOG.warning("Variance of Volumes has hit double precision limits, results are not reliable.");      warned=true;    }    vov=(knns.size() > 1 && vov < Double.POSITIVE_INFINITY) ? vov / (knns.size() - 1) : Double.POSITIVE_INFINITY;    vovs.putDouble(iter,vov);    vovminmax.put(vov);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);}  }
class C{  @SuppressWarnings("rawtypes") public static Class primitiveToWrapper(Class clazz){  Class convertedClass=clazz;  if (clazz != null && clazz.isPrimitive()) {    convertedClass=(Class)primitiveWrapperMap.get(clazz);  }  return convertedClass;}  }
class C{  public Holder(GeneralNames entityName,int version){  this.entityName=entityName;  this.version=version;}  }
class C{  public void addKdContainer(KdistanceContainer kd){  this.listOfkDContainers.add(kd);}  }
class C{  @Override protected void finalize() throws Throwable {  mImage=null;  super.finalize();}  }
class C{  public MGRSPoint(LatLonPoint llpoint){  this(llpoint,Ellipsoid.WGS_84);}  }
class C{  public void clearAllSubtitles(){  this.subtitles.clear();}  }
class C{  public void write(final byte b[],final int off,final int len) throws IOException {  if (m_store == null) {    throw new IllegalStateException(ERR_NO_STORE);  }  if (m_isSaved) {    throw new IllegalStateException(ERR_ALREADY_SAVED);  }  if ((m_count + len) > m_blobThreshold) {    for (int i=0; i < len; i++) {      write(b[off + i]);    }  } else {    System.arraycopy(b,off,m_buf,m_count,len);    m_count+=len;    m_bytesWritten+=len;  }}  }
class C{  public boolean hasDispatchFunction(){  return true;}  }
class C{  private void constraints_69_Implementation(MemberMatrix mm,Collection<TMember> membersMissingOverrideAnnotation){  String missingAccessor=null;  List<TMember> missingAccessors=new MemberList<>();  List<TMember> conflictingMembers=new MemberList<>();  TClassifier currentClassifier=getCurrentClassifier();  Set<TMember> ownedErroneousMembers=null;  for (  TMember m : mm.implemented()) {    if (mm.isConsumed(m)) {      continue;    }    boolean bExistCompatibleMember=false;    boolean bExistCompatibleGetter=false;    boolean bExistCompatibleSetter=false;    for (SourceAwareIterator iter=mm.ownedConsumedInheritedImplemented(); iter.hasNext(); ) {      TMember m_=iter.next();      if (ownedErroneousMembers != null && !iter.isOwnedMember()) {        break;      }      if (m_ == m || ownedErroneousMembers != null && ownedErroneousMembers.contains(m_)) {        if (iter.isInheritedMember()) {          bExistCompatibleMember=true;        }        continue;      }      OverrideCompatibilityResult compatibility=checkAccessibilityAndOverrideCompatibility(RedefinitionType.implemented,m_,m,!iter.isActualMember(),mm);      if (compatibility == OverrideCompatibilityResult.ACCESSOR_PAIR) {        continue;      } else       if (compatibility == OverrideCompatibilityResult.ERROR) {        if (iter.isOwnedMember()) {          if (ownedErroneousMembers == null) {            ownedErroneousMembers=new HashSet<>();          }          ownedErroneousMembers.add(m_);        } else         if (iter.isActualMember()) {          return;        } else {          break;        }      } else       if (iter.isActualMember()) {        if (m.isField()) {          if (m_.isGetter()) {            bExistCompatibleGetter=true;          } else           if (m_.isSetter()) {            bExistCompatibleSetter=true;          } else {            bExistCompatibleMember=true;          }        } else {          bExistCompatibleMember=true;        }        if (!m_.isDeclaredOverride() && m_.getContainingType() == currentClassifier) {          membersMissingOverrideAnnotation.add(m_);        }      }    }    if (bExistCompatibleGetter != bExistCompatibleSetter) {      missingAccessor=bExistCompatibleGetter ? "setter" : "getter";      missingAccessors.add(m);    } else     if (!bExistCompatibleMember && !(bExistCompatibleGetter && bExistCompatibleSetter)) {      conflictingMembers.add(m);    }  }  if (ownedErroneousMembers != null) {    return;  }  if (!conflictingMembers.isEmpty()) {    messageConflictingMixins(conflictingMembers);  } else   if (!missingAccessors.isEmpty()) {    messageMissingAccessor(missingAccessor,missingAccessors);  }}  }
class C{  @Override protected void postDelete(RdKNNEntry entry){  ModifiableDoubleDBIDList rnns=DBIDUtil.newDistanceDBIDList();  doReverseKNN(getRoot(),((RdKNNLeafEntry)entry).getDBID(),rnns);  ArrayModifiableDBIDs ids=DBIDUtil.newArray(rnns);  ids.sort();  List<? extends KNNList> knnLists=knnQuery.getKNNForBulkDBIDs(ids,settings.k_max);  adjustKNNDistance(getRootEntry(),ids,knnLists);}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  m_predDepth++;  if (m_predDepth == 1) {    if ((pred instanceof Variable) || (pred instanceof XNumber) || (pred instanceof Div)|| (pred instanceof Plus)|| (pred instanceof Minus)|| (pred instanceof Mod)|| (pred instanceof Quo)|| (pred instanceof Mult)|| (pred instanceof org.apache.xpath.operations.Number)|| (pred instanceof Function))     m_hasPositionalPred=true; else     pred.callVisitors(owner,this);  }  m_predDepth--;  return false;}  }
class C{  public static String[] createArgList(String[] prevArgList,String argString){  if (argString.matches("^[ \t]*$"))   return prevArgList;  String[] newArgs=argString.split("\036");  return concat(prevArgList,newArgs);}  }
class C{  public boolean isFinished(){  AsyncHttpRequest _request=request.get();  return _request == null || _request.isDone();}  }
class C{  protected void processChange(Database currentModel,Database desiredModel,RemoveIndexChange change,StringBuilder ddl){  writeExternalIndexDropStmt(change.getChangedTable(),change.getIndex(),ddl);  change.apply(currentModel,delimitedIdentifierModeOn);}  }
class C{  public static boolean deleteSpreadsheets(Context context,String accountName){  try {    GoogleAccountCredential googleAccountCredential=SendToGoogleUtils.getGoogleAccountCredential(context,accountName,SendToGoogleUtils.DRIVE_SCOPE);    if (googleAccountCredential == null) {      return false;    }    Drive drive=SyncUtils.getDriveService(googleAccountCredential);    com.google.api.services.drive.Drive.Files.List list=drive.files().list().setQ(String.format(Locale.US,SendSpreadsheetsAsyncTask.GET_SPREADSHEET_QUERY,SPREADSHEETS_NAME));    List<File> files=list.execute().getItems();    Iterator<File> iterator=files.iterator();    while (iterator.hasNext()) {      File file=(File)iterator.next();      drive.files().delete(file.getId()).execute();    }    return true;  } catch (  Exception e) {    Log.e(TAG,"Unable to delete spreadsheets.",e);  }  return false;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public IonDatagram reload(IonDatagram dg){  byte[] bytes=dg.getBytes();  checkBinaryHeader(bytes);  IonDatagram dg1=loader().load(bytes);  return dg1;}  }
class C{  String formatTime(int hour,int minute){  String s="";  String t=Integer.toString(hour);  if (t.length() == 2) {    s=t + ":";  } else   if (t.length() == 1) {    s="0" + t + ":";  }  t=Integer.toString(minute);  if (t.length() == 2) {    s=s + t;  } else   if (t.length() == 1) {    s=s + "0" + t;  }  if (s.length() != 5) {    s="00:00";  }  return s;}  }
class C{  public static boolean isSimpleLiteral(Value v){  if (v instanceof Literal) {    return isSimpleLiteral((Literal)v);  }  return false;}  }
class C{  public static int hash(double value){  assert !Double.isNaN(value) : "Values of NaN are not supported.";  long bits=Double.doubleToLongBits(value);  return (int)(bits ^ (bits >>> 32));}  }
class C{  @Deprecated public static double quantile(double x,double mu,double sigma,double lambda){  throw new NotImplementedException();}  }
class C{  public void removeTable(String tableUniquName){  tableInfoMap.remove(convertToLowerCase(tableUniquName));}  }
class C{  @Override public int read(final byte b[],final int off,int len){  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {    throw new IndexOutOfBoundsException();  }  if (this.pos >= this.count) {    return -1;  }  if (this.pos + len > this.count) {    len=this.count - this.pos;  }  if (len <= 0) {    return 0;  }  System.arraycopy(this.buf,this.pos,b,off,len);  this.pos+=len;  return len;}  }
class C{  protected void beginToCompile(ICompilationUnit[] sourceUnits){  int maxUnits=sourceUnits.length;  this.totalUnits=0;  this.unitsToProcess=new CompilationUnitDeclaration[maxUnits];  internalBeginToCompile(sourceUnits,maxUnits);}  }
class C{  private AsyncFuture<ClusterNode> createClusterNode(final URI uri){  final RpcProtocol protocol=protocols.get(uri.getScheme());  if (protocol == null) {    throw new IllegalArgumentException("Unsupported scheme (" + uri.getScheme() + ")");  }  return protocol.connect(uri);}  }
class C{  @Override public void onDestroy(boolean isChangingConfiguration){}  }
class C{  @Override public byte[] read(int length) throws IOException {  if (length > available()) {    throw new EndOfBufferException();  }  byte[] res=new byte[length];  System.arraycopy(buffer,read_pos,res,0,length);  read_pos=read_pos + length;  return res;}  }
class C{  public BitmapConversion(String[] initData){  initFromStrings(initData);}  }
class C{  private String[] parseRowColSpec(HTML.Attribute key){  AttributeSet attributes=getElement().getAttributes();  String spec="*";  if (attributes != null) {    if (attributes.getAttribute(key) != null) {      spec=(String)attributes.getAttribute(key);    }  }  StringTokenizer tokenizer=new StringTokenizer(spec,",");  int nTokens=tokenizer.countTokens();  int n=getViewCount();  String[] items=new String[Math.max(nTokens,n)];  int i=0;  for (; i < nTokens; i++) {    items[i]=tokenizer.nextToken().trim();    if (items[i].equals("100%")) {      items[i]="*";    }  }  for (; i < items.length; i++) {    items[i]="*";  }  return items;}  }
class C{  public boolean isRestricted(){  return restricted;}  }
class C{  public int createId(Object object){  assert !objectToID.containsKey(object);  int id=++highestID;  objectToID.put(object,id);  idToObject.put(id,object);  return id;}  }
class C{  public static String[] toCommaSeparatedArray(String str) throws IOException {  return str.split("\\s*,\\s*");}  }
class C{  public boolean isPaused(){  return this.paused;}  }
class C{  private void addContainerToSuite(String containerId,ContainerType type,Class<? extends Test> testClass) throws Exception {  Method[] methods=testClass.getMethods();  for (  Method method : methods) {    if (method.getName().startsWith("test")) {      addContainerToTest(containerId,type,method.getName(),testClass);    }  }}  }
class C{  @LargeTest public void testFinalSeparator() throws Exception {  final String PUNCTUATION="abc, def.";  verifyWordLimits(PUNCTUATION,3,0,3);  verifyWordLimits(PUNCTUATION,4,0,4);  verifyWordLimits(PUNCTUATION,8,5,8);  verifyWordLimits(PUNCTUATION,9,5,9);}  }
class C{  private void publish(Throwable exception){  String action=context.getString(R.string.toast_pub_failed,(Object[])additionalArgs);  c.addAction(action);  Notify.toast(context,action,Toast.LENGTH_SHORT);}  }
class C{  public MessageTokenizer(IDiscordClient client,String content){  if (content == null)   throw new IllegalArgumentException("Content cannot be null!");  if (content.length() == 0)   throw new IllegalArgumentException("Content must have length!");  if (client == null)   throw new IllegalArgumentException("Client cannot be null!");  this.content=content;  this.client=client;  stepForward(0);}  }
class C{  private boolean alreadyInSync(){  for (  String replica : replicas) {    requestFingerprint(replica);  }  for (; ; ) {    ShardResponse srsp=shardHandler.takeCompletedOrError();    if (srsp == null)     break;    try {      IndexFingerprint otherFingerprint=IndexFingerprint.fromObject(srsp.getSolrResponse().getResponse().get("fingerprint"));      IndexFingerprint ourFingerprint=IndexFingerprint.getFingerprint(core,Long.MAX_VALUE);      if (IndexFingerprint.compare(otherFingerprint,ourFingerprint) == 0) {        log.info("We are already in sync. No need to do a PeerSync ");        return true;      }    } catch (    IOException e) {      log.warn("Could not cofirm if we are already in sync. Continue with PeerSync");    }  }  return false;}  }
class C{  public void add(Contract contract,RegularTimePeriod period,double open,double high,double low,double close,ZonedDateTime lastUpdateDate){  if (!this.isEmpty()) {    HeikinAshiItem item0=(HeikinAshiItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new HeikinAshiItem(contract,period,open,high,low,close,lastUpdateDate),true);}  }
class C{  static Configuration configuration(String scheme,String authority,boolean skipEmbed,boolean skipLocShmem){  final Configuration cfg=new Configuration();  if (scheme != null && authority != null)   cfg.set("fs.defaultFS",scheme + "://" + authority+ "/");  setImplClasses(cfg);  if (authority != null) {    if (skipEmbed)     cfg.setBoolean(String.format(HadoopIgfsUtils.PARAM_IGFS_ENDPOINT_NO_EMBED,authority),true);    if (skipLocShmem)     cfg.setBoolean(String.format(HadoopIgfsUtils.PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM,authority),true);  }  return cfg;}  }
class C{  public Page(){}  }
class C{  public void testBug4742() throws Exception {  HashMap<String,String> clashMap=new HashMap<String,String>();  this.rs=this.conn.getMetaData().getTypeInfo();  while (this.rs.next()) {    String name=this.rs.getString(1);    assertTrue("Type represented twice in type info, '" + name + "'.",!clashMap.containsKey(name));    clashMap.put(name,name);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.OBJECT_LITERAL__DEFINED_TYPE:    setDefinedType((Type)newValue);  return;case N4JSPackage.OBJECT_LITERAL__PROPERTY_ASSIGNMENTS:getPropertyAssignments().clear();getPropertyAssignments().addAll((Collection<? extends PropertyAssignment>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean writeWkhtmltopdf(String url,String proxy,String userAgent,final String acceptLanguage,File destination){  boolean success=false;  for (  boolean ignoreErrors : new boolean[]{false,true}) {    success=writeWkhtmltopdfInternal(url,proxy,destination,userAgent,acceptLanguage,ignoreErrors);    if (success)     break;    if (!success && proxy != null) {      ConcurrentLog.warn("Html2Image","trying to load without proxy: " + url);      success=writeWkhtmltopdfInternal(url,null,destination,userAgent,acceptLanguage,ignoreErrors);      if (success)       break;    }  }  if (success) {    ConcurrentLog.info("Html2Image","wrote " + destination.toString() + " for "+ url);  } else {    ConcurrentLog.warn("Html2Image","could not generate snapshot for " + url);  }  return success;}  }
class C{  @SuppressWarnings("unused") public long create_video_sample_entry_atom(MP4DataStream bitstream) throws IOException {  log.trace("Video entry atom contains wxh");  bitstream.skipBytes(6);  int dataReferenceIndex=(int)bitstream.readBytes(2);  bitstream.skipBytes(2);  bitstream.skipBytes(2);  bitstream.skipBytes(12);  width=(int)bitstream.readBytes(2);  log.trace("Width: {}",width);  height=(int)bitstream.readBytes(2);  log.trace("Height: {}",height);  int horizontalRez=(int)bitstream.readBytes(4) >> 16;  log.trace("H Resolution: {}",horizontalRez);  int verticalRez=(int)bitstream.readBytes(4) >> 16;  log.trace("V Resolution: {}",verticalRez);  bitstream.skipBytes(4);  int frameCount=(int)bitstream.readBytes(2);  log.trace("Frame to sample count: {}",frameCount);  int stringLen=(int)bitstream.readBytes(1);  log.trace("String length (cpname): {}",stringLen);  String compressorName=bitstream.readString(31);  log.trace("Compressor name: {}",compressorName.trim());  int depth=(int)bitstream.readBytes(2);  log.trace("Depth: {}",depth);  bitstream.skipBytes(2);  readed+=78;  log.trace("Bytes read: {}",readed);  MP4Atom child=MP4Atom.createAtom(bitstream);  this.children.add(child);  readed+=child.getSize();  return readed;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void close(){  try {    log.info("Closing UrbanSimZoneCSVWriterV2 ...");    assert (UrbanSimParcelCSVWriter.parcelWriter != null);    parcelWriter.flush();    parcelWriter.close();    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  @BeforeMethod public void init(){  timerRawVO=new TimerRawVO(null,PLATFORM_ID,SENSOR_ID,METHOD_ID,null,false);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void closeWrite() throws IOException {  if (_isWriteClosed) {    return;  }  _isWriteClosed=true;  StreamImpl stream=_streamImpl;  if (stream != null) {    stream.closeWrite();  } else   if (_sslSocket != null) {    _sslSocket.getOutputStream().close();  } else   if (_channel != null) {    try {      _channel.shutdownOutput();    } catch (    UnsupportedOperationException e) {      log.log(Level.FINEST,e.toString(),e);    }catch (    Exception e) {      log.finer(e.toString());      log.log(Level.FINEST,e.toString(),e);    }  }}  }
class C{  public boolean isAfterLast(){  return m_isAfterLast;}  }
class C{  public static double min(final double... array){  validateArray(array);  double min=array[0];  for (int i=1; i < array.length; i++) {    if (Double.isNaN(array[i])) {      return Double.NaN;    }    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String(){  String[] alg={"","qwertyu","!@#$%^&*()"};  String[] prv={"",null};  String[] prv1={"1234567890","qwertyu","!@#$%^&*()"};  try {    AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC","MyProvider");    checkUnititialized(ap);    ap.init(new byte[6]);    checkAP(ap,p);  } catch (  Exception e) {    fail("Unexpected exception");  }  for (int i=0; i < alg.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(alg[i],"MyProvider");      fail("NoSuchAlgorithmException was not thrown for parameter " + alg[i]);    } catch (    NoSuchAlgorithmException nsae) {    }catch (    Exception e) {      fail("Incorrect exception " + e + " was thrown for "+ alg[i]);    }  }  for (int i=0; i < prv.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC",prv[i]);      fail("IllegalArgumentException was not thrown for parameter " + prv[i]);    } catch (    IllegalArgumentException iae) {    }catch (    Exception e) {      fail("Incorrect exception " + e + " was thrown for "+ prv[i]);    }  }  for (int i=0; i < prv1.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC",prv1[i]);      fail("NoSuchProviderException was not thrown for parameter " + prv1[i]);    } catch (    NoSuchProviderException nspe) {    }catch (    Exception e) {      fail("Incorrect exception " + e + " was thrown for "+ prv1[i]);    }  }}  }
class C{  protected void closingOK(){  StringBuffer buff=new StringBuffer();  for (int i=0; i < m_listModel.size(); i++) {    Sorter.SortRule m=(Sorter.SortRule)m_listModel.elementAt(i);    buff.append(m.toStringInternal());    if (i < m_listModel.size() - 1) {      buff.append("@@sort-rule@@");    }  }  if (m_sorter.getSortDetails() != null) {    if (!m_sorter.getSortDetails().equals(buff.toString())) {      m_modifyL.setModifiedStatus(SorterCustomizer.this,true);    }  } else {    m_modifyL.setModifiedStatus(SorterCustomizer.this,true);  }  m_sorter.setSortDetails(buff.toString());  if (m_buffSize.getText() != null && m_buffSize.getText().length() > 0) {    if (m_sorter.getBufferSize() != null && !m_sorter.getBufferSize().equals(m_buffSize.getText())) {      m_modifyL.setModifiedStatus(SorterCustomizer.this,true);    }    m_sorter.setBufferSize(m_buffSize.getText());  }  if (m_tempDir.getText() != null && m_tempDir.getText().length() > 0) {    if (m_sorter.getTempDirectory() != null && !m_sorter.getTempDirectory().equals(m_tempDir.getText())) {      m_modifyL.setModifiedStatus(SorterCustomizer.this,true);    }    m_sorter.setTempDirectory(m_tempDir.getText());  }}  }
class C{  private static Map<String,String> properties(FileStatus status){  FsPermission perm=status.getPermission();  if (perm == null)   perm=FsPermission.getDefault();  HashMap<String,String> res=new HashMap<>(3);  res.put(IgfsUtils.PROP_PERMISSION,String.format("%04o",perm.toShort()));  res.put(IgfsUtils.PROP_USER_NAME,status.getOwner());  res.put(IgfsUtils.PROP_GROUP_NAME,status.getGroup());  return res;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.686 -0400",hash_original_method="F17DBFC7F57232A5AE529942C4D7251B",hash_generated_method="ADCC31AFFCFC94B7E77FBB5033D03DEE") public void save(String g2gFileName) throws IOException {  SR_GrammarSave(mGrammar,g2gFileName);}  }
class C{  public void deleteInstalledApk(String packageName){  database.delete(Schema.Updates.getName(),"package_name = ?",new String[]{packageName});}  }
class C{  public EventBean[] toArray(){  if (firstEvent == null) {    return new EventBean[0];  }  if (additionalEvents == null) {    return new EventBean[]{firstEvent};  }  EventBean[] events=new EventBean[1 + additionalEvents.size()];  events[0]=firstEvent;  int count=1;  for (  EventBean theEvent : additionalEvents) {    events[count]=theEvent;    count++;  }  return events;}  }
class C{  public Perspective createUserPerspective(final String name,final boolean show){  Perspective perspective=model.addPerspective(name,true);  perspective.store(context);  if (show) {    showPerspective(name);  }  return perspective;}  }
class C{  public static boolean installNormal(Context context,String filePath){  Intent i=new Intent(Intent.ACTION_VIEW);  File file=new File(filePath);  if (file == null || !file.exists() || !file.isFile() || file.length() <= 0) {    return false;  }  i.setDataAndType(Uri.parse("file://" + filePath),"application/vnd.android.package-archive");  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void openPopupMenu(MenuLockLayer menuLockLayer){  int x=element.getAbsoluteLeft();  int y=0;  popupMenu=new PopupMenu(group,actionManager,managerProvider,presentationFactory,menuLockLayer,this,keyBindingAgent,"topmenu/" + title);  menuLockLayer.add(popupMenu,x,y);}  }
class C{  public DefaultHandler2(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node lcNode;  Node nsNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  lcNode=employeeNode.getLastChild();  nsNode=lcNode.getNextSibling();  assertNull("nodeGetNextSiblingNullAssert1",nsNode);}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  LOG.d(LOG_TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  quotaUpdater.updateQuota(MAX_QUOTA);}  }
class C{  public void dispose(){  LibUsb.exit(null);}  }
class C{  protected void log(ProtocolSession session,Response response,String logmessage){  if (session.getLogger().isDebugEnabled()) {    session.getLogger().debug(logmessage);  }}  }
class C{  public boolean isLeaf(){  return children == null || children.isEmpty();}  }
class C{  public boolean isEmpty(){  return false;}  }
class C{  public int compareToIgnoreCase(XMLString str){  throw new org.apache.xml.utils.WrappedRuntimeException(new java.lang.NoSuchMethodException("Java 1.2 method, not yet implemented"));}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int i;  int progress;  String reflectionAxis="vertical";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("v")) {        reflectionAxis="vertical";      } else       if (args[i].toLowerCase().contains("ho")) {        reflectionAxis="horizontal";      } else       if (args[i].toLowerCase().contains("b")) {        reflectionAxis="both";      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    int rowsLessOne=numRows - 1;    int colsLessOne=numCols - 1;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    double[] data;    if (reflectionAxis.equals("vertical")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(rowsLessOne - row,col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    } else     if (reflectionAxis.equals("horizontal")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(row,colsLessOne - col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    } else     if (reflectionAxis.equals("both")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(rowsLessOne - row,colsLessOne - col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    }    output.setDisplayMinimum(image.getDisplayMinimum());    output.setDisplayMaximum(image.getDisplayMaximum());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean notmainentry(){  return soot.PhaseOptions.getBoolean(options,"notmainentry");}  }
class C{  @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  SurrogateModes surMode=controller.getSurrogates();  String wikiEncoding=encodingField.getText();  if (wikiEncoding.length() == 0) {    errors.add(new ConfigItem(ConfigItemTypes.WARNING,ConfigErrorKeys.MISSING_VALUE,"The CharacterEncoding was not set."));  }  builder.append("\t<input>\r\n");  builder.append("\t\t<MODE_SURROGATES>" + surMode + "</MODE_SURROGATES>\r\n");  builder.append("\t\t<WIKIPEDIA_ENCODING>" + wikiEncoding + "</WIKIPEDIA_ENCODING>\r\n");  ArchiveRegistry reg=controller.getArchives();  int size=reg.getRowCount();  ArchiveDescription archive;  InputType type;  String archivePath;  long start;  if (size == 0) {    errors.add(new ConfigItem(ConfigItemTypes.WARNING,ConfigErrorKeys.MISSING_VALUE,"No source file has been set."));  }  for (int i=0; i < size; i++) {    archive=reg.get(i);    type=archive.getType();switch (type) {case XML:      break;case BZIP2:    break;case SEVENZIP:  if (!controller.is7ZipEnabled()) {    errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.ILLEGAL_INPUT_FILE,"The SevenUip mode is not " + "activated"));  }break;}archivePath=archive.getPath();if (archivePath.length() == 0) {errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.PATH_NOT_SET,"The archive path is missing"));}start=archive.getStartPosition();if (start < 0) {errors.add(new ConfigItem(ConfigItemTypes.ERROR,ConfigErrorKeys.VALUE_OUT_OF_RANGE,"The archive start value should be at least 0"));}builder.append("\t\t<archive>\r\n");builder.append("\t\t\t<type>" + type + "</type>\r\n");builder.append("\t\t\t<path>\"" + archivePath + "\"</path>\r\n");builder.append("\t\t\t<start>" + start + "</start>\r\n");builder.append("\t\t</archive>\r\n");}builder.append("\t</input>\r\n");}  }
class C{  private void updateVolume(MprisPlugin mpris,int step){  final int currentVolume=mpris.getVolume();  if (currentVolume < 100 || currentVolume > 0) {    int newVolume=currentVolume + step;    if (newVolume > 100) {      newVolume=100;    } else     if (newVolume < 0) {      newVolume=0;    }    mpris.setVolume(newVolume);  }}  }
class C{  static synchronized JmriPreferencesProvider findProvider(File path,boolean shared){  if (shared) {    if (sharedProviders.get(path) == null) {      sharedProviders.put(path,new JmriPreferencesProvider(path,shared));    }    return sharedProviders.get(path);  } else {    if (privateProviders.get(path) == null) {      privateProviders.put(path,new JmriPreferencesProvider(path,shared));    }    return privateProviders.get(path);  }}  }
class C{  public void addBean(Object bean){  if (!(bean instanceof SimpleBeanObject))   throw new IllegalArgumentException("not instanceof SimpleBeanObject");  layer.addObject((SimpleBeanObject)bean);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetlastchild.class,args);}  }
class C{  public void stdoutShouldContain(String expectedString){  if (!stdout.contains(expectedString)) {    reportDiagnosticSummary();    throw new RuntimeException("'" + expectedString + "' missing from stdout \n");  }}  }
class C{  public SHA1Digest(){  try {    digest=MessageDigest.getInstance(M.e("SHA-1"));  } catch (  final NoSuchAlgorithmException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(e);    }  }}  }
class C{  public static int calcTextHeight(Paint paint,String demoText){  Rect r=new Rect();  paint.getTextBounds(demoText,0,demoText.length(),r);  return r.height();}  }
class C{  public static boolean isSameLength(int[] array1,int[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  public static boolean isBlockAnalytics(){  return blockAnalytics;}  }
class C{  static short order(long qAddr,GridUnsafeMemory mem){  return mem.readShort(qAddr);}  }
class C{  public void encode(ByteBuffer aBuffer,OutputStream aStream) throws IOException {  byte[] buf=getBytes(aBuffer);  encode(buf,aStream);}  }
class C{  @Override public void close(){  super.close();  addressBookDao=null;  addressItemDao=null;  contactDao=null;  simpleAddressDao=null;}  }
class C{  public FastCharArrayReader(char buf[],int offset,int length){  if ((offset < 0) || (offset > buf.length) || (length < 0)|| ((offset + length) < 0)) {    throw new IllegalArgumentException();  }  this.buf=buf;  this.pos=offset;  this.count=Math.min(offset + length,buf.length);  this.markedPos=offset;}  }
class C{  public void testSortedSetField() throws Exception {  Directory dir=newDirectory();  IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(null));  Document doc=new Document();  doc.add(new SortedSetDocValuesField("foo",new BytesRef("bar")));  iw.addDocument(doc);  DirectoryReader dr=DirectoryReader.open(iw);  LeafReader r=getOnlyLeafReader(dr);  assertNotNull(DocValues.getSortedSet(r,"foo"));  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  dr.close();  iw.close();  dir.close();}  }
class C{  protected Long wrapValue(long k){  return new Long(k);}  }
class C{  public String buildSSLArguments(DistributedSystemConfig config){  Properties sslProps=buildSSLProperties(config,true);  if (sslProps == null)   return null;  StringBuffer sb=new StringBuffer();  for (Iterator iter=sslProps.keySet().iterator(); iter.hasNext(); ) {    String key=(String)iter.next();    String value=sslProps.getProperty(key);    sb.append(" -J-D" + key + "="+ value);  }  return sb.toString();}  }
class C{  private int readIndexWithFieldType(char ft) throws EOFException, FormatException {switch (ft) {case 'S':    return (int)inputFile.readShort();case 'I':  return inputFile.readInteger();}throw new FormatException("Unrecognized FieldTypeOfIndex");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operator: ");  result.append(operator);  result.append(')');  return result.toString();}  }
class C{  public JTable generateTable(String titles,Object[][] content){  String[] titles_arr=titles.split(",");  return new JTable(content,titles_arr);}  }
class C{  public static Object findServiceConfiguration(ServiceDetailDescriptor descriptor){  return new ServiceConfigurationFinder().findConfigurationDescriptor(descriptor);}  }
class C{  public static ReferenceRegions regions(File f) throws IOException {  if (f != null) {    try (BedReader reader=BedReader.openBedReader(null,f,0)){      return ReferenceRegions.regions(reader);    }   } else {    return null;  }}  }
class C{  void acc_pack(String s){  for (int i=0; i < digits.length; i++) {    digits[i]=0;  }  sign=0;  int idx=digits.length - 1;  for (int i=s.length() - 1; i >= 0; i--) {    char ch=s.charAt(i);    if (i == 0 && ch == '-') {      sign=-1;    } else {      if (ch != '0' && sign == 0) {        sign=1;      }      digits[idx--]=ch - '0';    }  }}  }
class C{  public static void writeVarInt(OutputStream out,int x) throws IOException {  while ((x & ~0x7f) != 0) {    out.write((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  out.write((byte)x);}  }
class C{  public synchronized void incrementAtomicInteger(){  this.atomicTotal.incrementAndGet();}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 4:case 3:case 2:case 1:    return true;default :  break;}return false;}  }
class C{  public Sentence[] splitAll(){  for (String paragraph=getParagraph(); paragraph.trim().length() != 0; paragraph=getParagraph()) {    if (paragraph.trim().length() != 0)     process(paragraph);    currentOffset+=paragraph.length();  }  return sentences.toArray(new Sentence[sentences.size()]);}  }
class C{  public void searchContact(View v){  final String name=editText.getText().toString();  String saveText=searchBtn.getText().toString();  if (getString(R.string.button_search).equals(saveText)) {    toAddUsername=name;    if (TextUtils.isEmpty(name)) {      new EaseAlertDialog(this,R.string.Please_enter_a_username).show();      return;    }    searchedUserLayout.setVisibility(View.VISIBLE);    nameText.setText(toAddUsername);  }}  }
class C{  public boolean isVisible(ReviewDb db,@Nullable ChangeData cd) throws OrmException {  if (getChange().getStatus() == Change.Status.DRAFT && !isDraftVisible(db,cd)) {    return false;  }  return isRefVisible();}  }
class C{  private CellIdentityCdma(Parcel in){  mNetworkId=in.readInt();  mSystemId=in.readInt();  mBasestationId=in.readInt();  mLongitude=in.readInt();  mLatitude=in.readInt();  if (DBG)   log("CellIdentityCdma(Parcel): " + toString());}  }
class C{  protected void indexPolygons(InputStream is,long ptr,OutputStream os){  boolean moreRecords=true;  byte rHdr[]=new byte[SHAPE_RECORD_HEADER_LENGTH];  byte outBuf[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];  int result;  int shapeType;  int nRecords=0;  int recLengthWords, recLengthBytes;  long recOffset;  int recBufSize=100000;  byte recBuf[]=new byte[recBufSize];  ESRIBoundingBox polyBounds;  try {    while (moreRecords) {      result=is.read(rHdr,0,SHAPE_RECORD_HEADER_LENGTH);      if (result < 0) {        moreRecords=false;        if (logger.isLoggable(Level.FINE)) {          logger.fine("Found " + nRecords + " records");          logger.fine("recBufSize = " + recBufSize);        }      } else {        nRecords++;        recOffset=ptr;        readBEInt(rHdr,0);        recLengthWords=readBEInt(rHdr,4);        recLengthBytes=recLengthWords * 2;        if (recLengthBytes > recBufSize) {          if (logger.isLoggable(Level.FINE)) {            logger.fine("Shapefile SpatialIndex increasing recBufSize to " + recLengthBytes);          }          recBufSize=recLengthBytes;          recBuf=new byte[recBufSize];        }        result=is.read(recBuf,0,recLengthBytes);        shapeType=readLEInt(recBuf,0);        if (shapeType != SHAPE_TYPE_NULL) {          polyBounds=readBox(recBuf,4);        } else {          polyBounds=new ESRIBoundingBox();        }        ptr+=recLengthBytes + 8;        writeBEInt(outBuf,0,(int)(recOffset / 2));        writeBEInt(outBuf,4,recLengthWords);        writeLEDouble(outBuf,8,polyBounds.min.x);        writeLEDouble(outBuf,16,polyBounds.min.y);        writeLEDouble(outBuf,24,polyBounds.max.x);        writeLEDouble(outBuf,32,polyBounds.max.y);        os.write(outBuf,0,SPATIAL_INDEX_RECORD_LENGTH);      }    }  } catch (  java.io.IOException e) {    e.printStackTrace();  } finally {    try {      is.close();    } catch (    java.io.IOException e) {    }  }}  }
class C{  private void reduceNoSeed(List<Trade> trades){  Optional<String> instList=trades.stream().map(null).reduce(null);  System.out.println("Comma separated instruments: " + instList);}  }
class C{  public static String toStatementPatternString(final StatementPattern sp){  checkNotNull(sp);  final Var subjVar=sp.getSubjectVar();  String subj=subjVar.getName();  if (subjVar.isConstant()) {    subj=subj + TYPE_DELIM + URI_TYPE;  }  final Var predVar=sp.getPredicateVar();  String pred=predVar.getName();  if (predVar.isConstant()) {    pred=pred + TYPE_DELIM + URI_TYPE;  }  final Var objVar=sp.getObjectVar();  String obj=objVar.getName();  if (objVar.isConstant()) {    final RyaType rt=RdfToRyaConversions.convertValue(objVar.getValue());    obj=obj + TYPE_DELIM + rt.getDataType().stringValue();  }  return subj + DELIM + pred+ DELIM+ obj;}  }
class C{  private static int GetStaticByteField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticByteField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getByteValueUnchecked(null);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  @OnWebSocketClose public void onClose(int statusCode,String reason){}  }
class C{  public static boolean isWorkingPipe(){  for (  Map<Integer,Protocol> maps : registryMap.values()) {    if (maps.containsKey(SERVER_PROTOCOL))     return true;  }  return false;}  }
class C{  public Builder withGlobalSuspendTimeout(Duration globalSuspendTimeout){  Assert.notNull(globalSuspendTimeout,"globalSuspendTimeout");  this.globalSuspendTimeout=Assert.argNot(globalSuspendTimeout,globalSuspendTimeout.isNegative() || globalSuspendTimeout.isZero(),"globalSuspendTimeout must be positive");  return this;}  }
class C{  public static void aligned16Copy(Address dstPtr,Address srcPtr,int copyBytes){  if (USE_NATIVE && copyBytes > NATIVE_THRESHOLD) {    memcopy(dstPtr,srcPtr,copyBytes);  } else {    if (copyBytes >= BYTES_IN_COPY && (srcPtr.toWord().and(Word.fromIntZeroExtend(BYTES_IN_COPY - 1)).EQ((dstPtr.toWord().and(Word.fromIntZeroExtend(BYTES_IN_COPY - 1)))))) {      Address endPtr=srcPtr.plus(copyBytes);      Address wordEndPtr=endPtr.toWord().and(Word.fromIntZeroExtend(BYTES_IN_COPY - 1).not()).toAddress();      if (BYTES_IN_COPY == 8) {        if (srcPtr.toWord().and(Word.fromIntZeroExtend(2)).NE(Word.zero())) {          copy2Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(2);          dstPtr=dstPtr.plus(2);        }        if (srcPtr.toWord().and(Word.fromIntZeroExtend(4)).NE(Word.zero())) {          copy4Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(4);          dstPtr=dstPtr.plus(4);        }      } else {        if (srcPtr.toWord().and(Word.fromIntZeroExtend(2)).NE(Word.zero())) {          copy2Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(2);          dstPtr=dstPtr.plus(2);        }      }      while (srcPtr.LT(wordEndPtr)) {        if (BYTES_IN_COPY == 8) {          copy8Bytes(dstPtr,srcPtr);        } else {          copy4Bytes(dstPtr,srcPtr);        }        srcPtr=srcPtr.plus(BYTES_IN_COPY);        dstPtr=dstPtr.plus(BYTES_IN_COPY);      }      if (BYTES_IN_COPY == 8) {        if (endPtr.toWord().and(Word.fromIntZeroExtend(4)).NE(Word.zero())) {          copy4Bytes(dstPtr,srcPtr);          srcPtr=srcPtr.plus(4);          dstPtr=dstPtr.plus(4);        }        if (endPtr.toWord().and(Word.fromIntZeroExtend(2)).NE(Word.zero())) {          copy2Bytes(dstPtr,srcPtr);        }      } else {        if (endPtr.toWord().and(Word.fromIntZeroExtend(2)).NE(Word.zero())) {          copy2Bytes(dstPtr,srcPtr);        }      }    } else {      Address endPtr=srcPtr.plus(copyBytes);      while (srcPtr.LT(endPtr)) {        copy2Bytes(dstPtr,srcPtr);        srcPtr=srcPtr.plus(2);        dstPtr=dstPtr.plus(2);      }    }  }}  }
class C{  public AddressSelector reset(){  if (selectionsIterator != null) {    this.selections=strategy.selectConnections(leader,new ArrayList<>(servers));    this.selectionsIterator=null;  }  return this;}  }
class C{  public RegressionDataSet(int numerical,CategoricalData[] categories){  this.numNumerVals=numerical;  this.categories=categories;  dataPoints=new ArrayList<DataPointPair<Double>>();  this.numericalVariableNames=new ArrayList<String>(getNumNumericalVars());  setUpGenericNumericNames();}  }
class C{  private static void addSolr5Index(){  try {    Field field=StandardIndexProvider.class.getDeclaredField("ALL_MANAGER_CLASSES");    field.setAccessible(true);    Field modifiersField=Field.class.getDeclaredField("modifiers");    modifiersField.setAccessible(true);    modifiersField.setInt(field,field.getModifiers() & ~Modifier.FINAL);    Map<String,String> customMap=new HashMap<>(StandardIndexProvider.getAllProviderClasses());    customMap.put("solr",Solr5Index.class.getName());    customMap.put("solr5",Solr5Index.class.getName());    ImmutableMap<String,String> immap=ImmutableMap.copyOf(customMap);    field.set(null,immap);    LOG.debug("Injected solr5 index - {}",Solr5Index.class.getName());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override protected AudioBufFormat doFormatChanged(AudioBufFormat format){  mAudioFormat=format;  return format;}  }
class C{  public Image(int x,int y){  this(x,y,DEFAULT_RADIUS);}  }
class C{  public boolean findRRset(Name name,int type,int section){  if (sections[section] == null)   return false;  for (int i=0; i < sections[section].size(); i++) {    Record r=(Record)sections[section].get(i);    if (r.getType() == type && name.equals(r.getName()))     return true;  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean isScraped(){  return scraped || getHasMetadata();}  }
class C{  public double itmAssetProbability(){  return cum_d1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.525 -0500",hash_original_method="8CC59A12163BED34BD1BF794F4FF4839",hash_generated_method="0C6ABD7106EB30CEC8CE93DCC3AE4141") protected NameValue qheader() throws ParseException {  String name=lexer.getNextToken('=');  lexer.consume(1);  String value=hvalue();  return new NameValue(name,value,false);}  }
class C{  public void warn(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHWarning(msg,args);  ErrorListener ehandler=xctxt.getErrorListener();  if (null != ehandler) {    ehandler.warning(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));  }}  }
class C{  @Override protected void onResume(){  super.onResume();  startCameraSource();}  }
class C{  public RemoteConnection port(String port){  this.port=port;  return this;}  }
class C{  private void initialize(){  if (mBluetoothLeAdvertiser == null) {    BluetoothManager mBluetoothManager=(BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);    if (mBluetoothManager != null) {      BluetoothAdapter mBluetoothAdapter=mBluetoothManager.getAdapter();      if (mBluetoothAdapter != null) {        mBluetoothLeAdvertiser=mBluetoothAdapter.getBluetoothLeAdvertiser();      } else {        Toast.makeText(this,getString(R.string.bt_null),Toast.LENGTH_LONG).show();      }    } else {      Toast.makeText(this,getString(R.string.bt_null),Toast.LENGTH_LONG).show();    }  }}  }
class C{  @Override public int compareTo(LayerInfo that){  return (this.name.compareTo(that.name));}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  log.info("afterSave");  int p_A_Asset_ID=0;  int total_unitsused=0;  p_A_Asset_ID=getA_Asset_ID();  String sql="SELECT SUM(USEUNITS) FROM A_Asset_use WHERE A_Asset_ID=? and usedate <= SYSDATE";  total_unitsused=DB.getSQLValueEx(null,sql,getA_Asset_ID());  MAsset asset=MAsset.get(getCtx(),p_A_Asset_ID,null);  asset.setUseUnits(total_unitsused);  asset.setProcessing(false);  asset.saveEx();  MAssetChange change=new MAssetChange(getCtx(),0,null);  change.setA_Asset_ID(p_A_Asset_ID);  change.setChangeType("USE");  change.setTextDetails(MRefList.getListDescription(getCtx(),"A_Update_Type","USE"));  change.setUseUnits(getUseUnits());  change.saveEx();  return true;}  }
class C{  private void box(int x,int y){  Block block=new Block(true,"pumpkin_halloween");  block.setPosition(this.getX() + x,this.getY() + y);  block.setResetBlock(false);  block.setDescription("You see a pumpkin, move it to a basket.");  this.getZone().add(block);  entitiesToCleanup.add(block);  boxes.add(block);}  }
class C{  public static Vec3D computePointAt(float u,float v,Vec3D[][] points){  final float u1=1 - u;  final float u1squared=u1 * u1 * 3* u;  final float u1cubed=u1 * u1 * u1;  final float usquared=u * u;  final float v1=1 - v;  final float vsquared=v * v * 3;  final float v1squared=v1 * v1 * 3;  final float v1cubed=v1 * v1 * v1;  final float vcubed=v * v * v;  final float u1usq=u1 * usquared * 3;  final float usqu=u * usquared;  final float v1vsq=v1 * vsquared;  final float v1sqv=v1squared * v;  final Vec3D[] p0=points[0];  final Vec3D[] p1=points[1];  final Vec3D[] p2=points[2];  final Vec3D[] p3=points[3];  final float x=u1cubed * (p0[0].x * v1cubed + p0[1].x * v1sqv + p0[2].x * v1vsq + p0[3].x * vcubed) + u1squared * (p1[0].x * v1cubed + p1[1].x * v1sqv + p1[2].x * v1vsq + p1[3].x * vcubed) + u1usq * (p2[0].x * v1cubed + p2[1].x * v1sqv + p2[2].x * v1vsq + p2[3].x * vcubed) + usqu * (p3[0].x * v1cubed + p3[1].x * v1sqv + p3[2].x * v1vsq + p3[3].x * vcubed);  final float y=u1cubed * (p0[0].y * v1cubed + p0[1].y * v1sqv + p0[2].y * v1vsq + p0[3].y * vcubed) + u1squared * (p1[0].y * v1cubed + p1[1].y * v1sqv + p1[2].y * v1vsq + p1[3].y * vcubed) + u1usq * (p2[0].y * v1cubed + p2[1].y * v1sqv + p2[2].y * v1vsq + p2[3].y * vcubed) + usqu * (p3[0].y * v1cubed + p3[1].y * v1sqv + p3[2].y * v1vsq + p3[3].y * vcubed);  final float z=u1cubed * (p0[0].z * v1cubed + p0[1].z * v1sqv + p0[2].z * v1vsq + p0[3].z * vcubed) + u1squared * (p1[0].z * v1cubed + p1[1].z * v1sqv + p1[2].z * v1vsq + p1[3].z * vcubed) + u1usq * (p2[0].z * v1cubed + p2[1].z * v1sqv + p2[2].z * v1vsq + p2[3].z * vcubed) + usqu * (p3[0].z * v1cubed + p3[1].z * v1sqv + p3[2].z * v1vsq + p3[3].z * vcubed);  return new Vec3D(x,y,z);}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  private static byte[] loadDefaultIcon(final serverObjects post,final Switchboard sb,String ext){  byte[] resultBytes;  byte[] defaultBytes=new byte[0];  try {    defaultBytes=FileUtils.read(new File(sb.getAppPath(),defaulticon));  } catch (  final IOException initicon) {    defaultBytes=new byte[0];  } finally {    resultBytes=new EncodedImage(defaultBytes,ext,post.getBoolean("isStatic")).getImage().getBytes();  }  return resultBytes;}  }
class C{  public boolean isScramble(String s1,String s2){  if (s1.length() != s2.length()) {    return false;  }  if (s1.length() == 0 || s1.equals(s2)) {    return true;  }  int n=s1.length();  boolean[][][] res=new boolean[n][n][n];  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      res[0][i][j]=s1.charAt(i) == s2.charAt(j);    }  }  for (int len=2; len <= n; len++) {    for (int i=n - len; i >= 0; i--) {      for (int j=n - len; j >= 0; j--) {        boolean r=false;        for (int k=1; k < len && r == false; k++) {          r=(res[k - 1][i][j] && res[len - k - 1][i + k][j + k]) || (res[k - 1][i][j + len - k] && res[len - k - 1][i + k][j]);        }        res[len - 1][i][j]=r;      }    }  }  return res[n - 1][0][0];}  }
class C{  public void createNegotiationTableData(final TenderResponse tenderResponse,final PdfPTable negotiationTable,final Contractor contractor) throws DocumentException, ApplicationException {  Date asOnDate=null;  if (tenderResponse.getNegotiationDate() != null)   asOnDate=tenderResponse.getNegotiationDate();  int i=0;  final Map<String,Integer> exceptionaSorMap=worksService.getExceptionSOR();  for (  final TenderResponseActivity tenderResponseActivity : tenderResponse.getTenderResponseActivities()) {    String schNo="";    String description="";    Double quantity=0.0;    double rate=0.0;    String per="";    double befNegRate=0.0;    double befNegAmount=0.0;    double aftNegRate=0.0;    double aftNegAmount=0.0;    MarketRate marketRateObj=null;    double marketRate=0.0;    double marketRateAmount=0.0;    negotiationTable.addCell(makePara(++i));    double uomFactor=1;    if (tenderResponseActivity != null) {      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null && tenderResponseActivity.getActivity().getSchedule().getCode() != null && exceptionaSorMap.containsKey(tenderResponseActivity.getActivity().getUom().getUom()))       uomFactor=exceptionaSorMap.get(tenderResponseActivity.getActivity().getUom().getUom());      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null && tenderResponseActivity.getActivity().getSchedule().getCode() != null)       schNo=tenderResponseActivity.getActivity().getSchedule().getCode();      negotiationTable.addCell(centerPara(schNo));      negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null && tenderResponseActivity.getActivity().getSchedule().getDescription() != null)       description=tenderResponseActivity.getActivity().getSchedule().getDescription();      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getNonSor() != null && tenderResponseActivity.getActivity().getNonSor().getDescription() != null)       description=tenderResponseActivity.getActivity().getNonSor().getDescription();      negotiationTable.addCell(makePara(description,Element.ALIGN_LEFT));      negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getQuantity() != 0)       quantity=tenderResponseActivity.getActivity().getQuantity();      negotiationTable.addCell(centerPara(quantity));      negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null && tenderResponseActivity.getActivity().getRate() != 0 && tenderResponseActivity.getActivity().getSORCurrentRate() != null)       rate=tenderResponseActivity.getActivity().getSORCurrentRate().getValue();      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getNonSor() != null && tenderResponseActivity.getActivity().getRate() != 0)       rate=tenderResponseActivity.getActivity().getRate();      negotiationTable.addCell(rightPara(formatter.format(rate)));      negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);      if (tenderResponseActivity.getActivity().getSchedule() != null && tenderResponseActivity.getActivity().getSchedule().getUom() != null && tenderResponseActivity.getActivity().getSchedule().getUom().getUom() != null)       per=tenderResponseActivity.getActivity().getSchedule().getUom().getUom();      if (tenderResponseActivity.getActivity().getNonSor() != null && tenderResponseActivity.getActivity().getNonSor().getUom() != null && tenderResponseActivity.getActivity().getNonSor().getUom().getUom() != null)       per=tenderResponseActivity.getActivity().getNonSor().getUom().getUom();      negotiationTable.addCell(centerPara(per));      final double amount=quantity * rate / uomFactor;      totalAmt=totalAmt + amount;      negotiationTable.addCell(rightPara(formatter.format(amount)));      negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);      for (      final TenderResponseQuotes tenderResponseQuotes : tenderResponseActivity.getTenderResponseQuotes())       if (tenderResponseQuotes.getContractor().getId() == contractor.getId()) {        if (tenderResponseQuotes.getQuotedRate() != 0.0)         befNegRate=tenderResponseQuotes.getQuotedRate();        final double quotedQty=tenderResponseQuotes.getQuotedQuantity();        negotiationTable.addCell(rightPara(formatter.format(befNegRate)));        befNegAmount=quotedQty * befNegRate / uomFactor;        totalBefNegAmt=totalBefNegAmt + befNegAmount;        negotiationTable.addCell(rightPara(formatter.format(befNegAmount)));      }      if (tenderResponseActivity.getNegotiatedRate() != 0.0)       aftNegRate=tenderResponseActivity.getNegotiatedRate();      final double negotiatedQty=tenderResponseActivity.getNegotiatedQuantity();      negotiationTable.addCell(rightPara(formatter.format(aftNegRate)));      aftNegAmount=negotiatedQty * aftNegRate / uomFactor;      totalAftNegAmt=totalAftNegAmt + aftNegAmount;      negotiationTable.addCell(rightPara(formatter.format(aftNegAmount)));      if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null && asOnDate != null && tenderResponseActivity.getActivity().getSchedule().hasValidMarketRateFor(asOnDate)) {        marketRateObj=tenderResponseActivity.getActivity().getSchedule().getMarketRateOn(asOnDate);        marketRate=marketRateObj.getMarketRate().getValue();        marketRateAmount=quantity * marketRate / uomFactor;      } else       if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getSchedule() != null) {        marketRate=tenderResponseActivity.getActivity().getSORCurrentRate().getValue();        final double marketQty=tenderResponseActivity.getActivity().getQuantity();        marketRateAmount=marketQty * marketRate / uomFactor;      } else       if (tenderResponseActivity.getActivity() != null && tenderResponseActivity.getActivity().getNonSor() != null) {        marketRate=tenderResponseActivity.getActivity().getRate();        final double marketQty=tenderResponseActivity.getActivity().getQuantity();        marketRateAmount=marketQty * marketRate;      }      negotiationTable.addCell(rightPara(formatter.format(marketRate)));      totalMarketRateAmt=totalMarketRateAmt + marketRateAmount;      negotiationTable.addCell(rightPara(formatter.format(marketRateAmount)));    }  }}  }
class C{  boolean crosses(double minLat,double maxLat,double minLon,double maxLon){  if (minLat <= max) {    double cy=lat1;    double dy=lat2;    double cx=lon1;    double dx=lon2;    boolean outside=(cy < minLat && dy < minLat) || (cy > maxLat && dy > maxLat) || (cx < minLon && dx < minLon)|| (cx > maxLon && dx > maxLon);    if (outside == false) {      if (orient(cx,cy,dx,dy,minLon,maxLat) * orient(cx,cy,dx,dy,maxLon,maxLat) <= 0 && orient(minLon,maxLat,maxLon,maxLat,cx,cy) * orient(minLon,maxLat,maxLon,maxLat,dx,dy) <= 0) {        return true;      }      if (orient(cx,cy,dx,dy,maxLon,maxLat) * orient(cx,cy,dx,dy,maxLon,minLat) <= 0 && orient(maxLon,maxLat,maxLon,minLat,cx,cy) * orient(maxLon,maxLat,maxLon,minLat,dx,dy) <= 0) {        return true;      }      if (orient(cx,cy,dx,dy,maxLon,minLat) * orient(cx,cy,dx,dy,minLon,minLat) <= 0 && orient(maxLon,minLat,minLon,minLat,cx,cy) * orient(maxLon,minLat,minLon,minLat,dx,dy) <= 0) {        return true;      }      if (orient(cx,cy,dx,dy,minLon,minLat) * orient(cx,cy,dx,dy,minLon,maxLat) <= 0 && orient(minLon,minLat,minLon,maxLat,cx,cy) * orient(minLon,minLat,minLon,maxLat,dx,dy) <= 0) {        return true;      }    }    if (left != null) {      if (left.crosses(minLat,maxLat,minLon,maxLon)) {        return true;      }    }    if (right != null && maxLat >= low) {      if (right.crosses(minLat,maxLat,minLon,maxLon)) {        return true;      }    }  }  return false;}  }
class C{  public Object load(String yaml){  return loadFromReader(new StreamReader(yaml),Object.class);}  }
class C{  public static Date parse(String date){  try {    int offset=0;    int year=parseInt(date,offset,offset+=4);    checkOffset(date,offset,'-');    int month=parseInt(date,offset+=1,offset+=2);    checkOffset(date,offset,'-');    int day=parseInt(date,offset+=1,offset+=2);    checkOffset(date,offset,'T');    int hour=parseInt(date,offset+=1,offset+=2);    checkOffset(date,offset,':');    int minutes=parseInt(date,offset+=1,offset+=2);    checkOffset(date,offset,':');    int seconds=parseInt(date,offset+=1,offset+=2);    int milliseconds=0;    if (date.charAt(offset) == '.') {      checkOffset(date,offset,'.');      milliseconds=parseInt(date,offset+=1,offset+=3);    }    String timezoneId;    char timezoneIndicator=date.charAt(offset);    if (timezoneIndicator == '+' || timezoneIndicator == '-') {      timezoneId=GMT_ID + date.substring(offset);    } else     if (timezoneIndicator == 'Z') {      timezoneId=GMT_ID;    } else {      throw new IndexOutOfBoundsException("Invalid time zone indicator " + timezoneIndicator);    }    TimeZone timezone=TimeZone.getTimeZone(timezoneId);    if (!timezone.getID().equals(timezoneId)) {      throw new IndexOutOfBoundsException();    }    Calendar calendar=new GregorianCalendar(timezone);    calendar.setLenient(false);    calendar.set(Calendar.YEAR,year);    calendar.set(Calendar.MONTH,month - 1);    calendar.set(Calendar.DAY_OF_MONTH,day);    calendar.set(Calendar.HOUR_OF_DAY,hour);    calendar.set(Calendar.MINUTE,minutes);    calendar.set(Calendar.SECOND,seconds);    calendar.set(Calendar.MILLISECOND,milliseconds);    return calendar.getTime();  } catch (  IndexOutOfBoundsException e) {    throw new IllegalArgumentException("Failed to parse date " + date,e);  }catch (  NumberFormatException e) {    throw new IllegalArgumentException("Failed to parse date " + date,e);  }catch (  IllegalArgumentException e) {    throw new IllegalArgumentException("Failed to parse date " + date,e);  }}  }
class C{  @Override public String toString(){  if (stack.isEmpty()) {    return "";  }  if (stack.size() != 1) {    throw new RuntimeException(String.format("Stack of WordAlignmentExtractor should contain only a single (last) element, but was size %d",stack.size()));  }  return stack.peek().toFinalString();}  }
class C{  protected Expression mult(int opPos) throws TransformerException {  return compileOperation(new Mult(),opPos);}  }
class C{  @Override public void populateFrame(Audio a){  if (!(a instanceof AudioBuffer)) {    throw new IllegalArgumentException(a.getSystemName() + " is not an AudioBuffer object");  }  super.populateFrame(a);  AudioBuffer b=(AudioBuffer)a;  url.setText(b.getURL());  stream.setSelected(b.isStreamed());  stream.setEnabled(false);  loopStart.setValue(b.getStartLoopPoint());  loopEnd.setValue(b.getEndLoopPoint());  loopStart.setEnabled(true);  loopStartLabel.setEnabled(true);  loopEnd.setEnabled(true);  loopEndLabel.setEnabled(true);  this.newBuffer=false;}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public IItemStreamRequest buildRequest(){  return buildRequest(getOptions());}  }
class C{  public CertificacionException(String message){  this(message,null);}  }
class C{  public void addIgnoredEmote(Emoticon emote){  addIgnoredEmote(emote.code);}  }
class C{  public boolean isDescending(){  return descending;}  }
class C{  @EventHandler public void onCardinalRespawn(CardinalRespawnEvent event){  Players.reset(event.getPlayer());  Players.setPlaying(event.getPlayer());  if (event.getSpawn().getKit() != null) {    event.getSpawn().getKit().apply(event.getPlayer(),false);  }  event.getPlayer().teleport(event.getSpawn().getSpawnPoint());}  }
class C{  public CompressionRegionFactoryDUnitTest(){  super();}  }
class C{  public synchronized V put(K key,V value){  if ((key == null) || (value == null))   return null;  cache.put(key,value);  return value;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.backgroundPaint,stream);  SerialUtilities.writePaint(this.stripOutlinePaint,stream);  SerialUtilities.writeStroke(this.stripOutlineStroke,stream);}  }
class C{  public void storageType(int type){  closedStorage=type;}  }
class C{  public NATURAL_CROSS_JOIN NATURAL_CROSS_JOIN(String tableToJoin){  return new NATURAL_CROSS_JOIN(this,tableToJoin);}  }
class C{  public void fetch(ArtifactCallback callback,InputStream stream,long length) throws IOException {  log.debug("  FETCH: saving " + node + " to "+ tempFile);  final File file;  try {    if (callback != null) {      callback.start(NodeUtils.getFullPath(node),length != -1 ? length : node.getSize(),node.getStoreDisplayString());      stream=new ArtifactCallbackStream(callback,stream);    }    log.debug("  Saving content of " + node + " to "+ fileContentStore.getFile(tempNode));    fileContentStore.putContent(tempNode,stream,context);    file=fileContentStore.getFile(tempNode);    assert (file.getPath().equals(tempFile.getPath()));    if (callback != null) {      callback.done(file);    }  } catch (  Throwable t) {    if (callback != null) {      callback.error(fileContentStore.getFile(node),t);    }    if (t instanceof RuntimeException) {      throw (RuntimeException)t;    } else {      throw IOUtils.toIOException(t);    }  }  if (context.isIgnoreSHA() == false && node instanceof OpenNode) {    verify((OpenNode)node);  } else {    log.debug("  Not validating checksum: " + tempNode);  }}  }
class C{  @Override public int hashCode(){  int hash=37;  hash=HashUtilities.hashCode(hash,this.g1);  hash=HashUtilities.hashCode(hash,this.g2);  hash=HashUtilities.hashCode(hash,this.g3);  return hash;}  }
class C{  public static <T>T[] parse(String[] options,String option,Class<T> cls) throws Exception {  List<String> list=new ArrayList<>();  while (Utils.getOptionPos(option,options) > -1)   list.add(Utils.getOption(option,options));  if (ClassDiscovery.hasInterface(OptionHandler.class,cls)) {    Object result=Array.newInstance(cls,list.size());    for (int i=0; i < list.size(); i++) {      try {        Array.set(result,i,OptionUtils.fromCommandLine(cls,list.get(i)));      } catch (      Exception e) {        System.err.println("Failed to instantiate class '" + cls.getName() + "' with command-line: "+ list.get(i));      }    }    return (T[])result;  } else {    Constructor constr=cls.getConstructor(String.class);    if (constr == null)     throw new IllegalArgumentException("Class '" + cls.getName() + "' does not have a constructor that takes a String!");    Object result=Array.newInstance(cls,list.size());    for (int i=0; i < list.size(); i++) {      try {        Array.set(result,i,constr.newInstance(list.get(i)));      } catch (      Exception e) {        System.err.println("Failed to instantiate class '" + cls.getName() + "' with string value: "+ list.get(i));      }    }    return (T[])result;  }}  }
class C{  public Class classForName(String name) throws ClassNotFoundException {  return classForName(name,new ClassLoader[]{defaultClassLoader,Thread.currentThread().getContextClassLoader(),getClass().getClassLoader(),ClassLoader.getSystemClassLoader()});}  }
class C{  public AbsentResourceList(int maxTries,int minCheckInterval){  if (maxTries < 1) {    String message=Logging.getMessage("AbsentResourceList.MaxTriesLessThanOne");    throw new IllegalArgumentException(message);  }  if (minCheckInterval < 0) {    String message=Logging.getMessage("AbsentResourceList.CheckIntervalLessThanZero");    throw new IllegalArgumentException(message);  }  this.maxTries=maxTries;  this.minCheckInterval=minCheckInterval;}  }
class C{  public Builder withSchedulingResultCallback(Action1<SchedulingResult> callback){  this.schedulingResultCallback=callback;  return this;}  }
class C{  private void doIndent() throws XMLStreamException {  if (depth > 0) {    for (int i=0; i < depth; i++)     super.writeCharacters(indentStep);  }}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2, b3, b4;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  int finish=end - 4;  i=nextI(data,i,finish);  while (i < finish) {    b1=decodingTable[data[i++]];    i=nextI(data,i,finish);    b2=decodingTable[data[i++]];    i=nextI(data,i,finish);    b3=decodingTable[data[i++]];    i=nextI(data,i,finish);    b4=decodingTable[data[i++]];    if ((b1 | b2 | b3| b4) < 0) {      throw new IOException("invalid characters encountered in base64 data");    }    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    outLen+=3;    i=nextI(data,i,finish);  }  outLen+=decodeLastBlock(out,(char)data[end - 4],(char)data[end - 3],(char)data[end - 2],(char)data[end - 1]);  return outLen;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAutouniqueAttribute_();}  }
class C{  public static double clamp(double v,double min,double max){  return v < min ? min : v > max ? max : v;}  }
class C{  @Action(value="/reports/cashCollectionReport-report") public String report(){  final ReportRequest reportInput=new ReportRequest(CASH_COLLECTION_TEMPLATE,critParams,ReportDataSourceType.SQL);  final ReportOutput reportOutput=reportService.createReport(reportInput);  reportId=reportViewerUtil.addReportToTempCache(reportOutput);  return REPORT;}  }
class C{  private void initViewLayout(TypedArray ta){  collapsingView=new CollapsingView(getContext());  collapsingView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.WRAP_CONTENT));  collapsingView.setCollapseListener(this);  collapsingView.enableDrag(builder.cancelable);  builder.view.setBackgroundColor(ta.getColor(0,Color.WHITE));  collapsingView.addView(builder.view);  setContentView(collapsingView);}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  private static void queryAuthStore(StatelessService service,Operation parentOp,String userLink,BasicAuthenticationContext authContext){  QueryTask authQuery=new QueryTask();  authQuery.querySpec=new QueryTask.QuerySpecification();  authQuery.querySpec.query=authContext.authQuery;  authQuery.taskInfo.isDirect=true;  Operation.CompletionHandler authCompletionHandler=null;  Operation queryAuth=Operation.createPost(service,ServiceUriPaths.CORE_QUERY_TASKS).setBody(authQuery).setCompletion(authCompletionHandler);  service.setAuthorizationContext(queryAuth,service.getSystemAuthorizationContext());  service.sendRequest(queryAuth);}  }
class C{  public boolean isSuscription(){  return this.getType() == Type.subscription;}  }
class C{  public int hashCode(){  return p.hashCode();}  }
class C{  private void dispatchPreDraw(View view){  while (view.getViewTreeObserver().dispatchOnPreDraw()) {  }  if (view instanceof ViewGroup) {    ViewGroup vg=(ViewGroup)view;    for (int i=0; i < vg.getChildCount(); i++) {      dispatchPreDraw(vg.getChildAt(i));    }  }}  }
class C{  public static boolean isSubnet(String cidr1,String cidr2){  if (cidr2 == null) {    return true;  } else   if (cidr1 == null) {    return false;  }  int[] cidr=IPAddressUtil.parseCIDR(cidr1);  int cidr1Prefix=cidr[0];  int cidr1MaskBits=cidr[1];  cidr=IPAddressUtil.parseCIDR(cidr2);  int cidr2Prefix=cidr[0];  int cidr2MaskBits=cidr[1];  int bitsToShift_1=32 - cidr1MaskBits;  int bitsToShift_2=32 - cidr2MaskBits;  int offset=(bitsToShift_1 > bitsToShift_2) ? bitsToShift_1 : bitsToShift_2;  if (offset > 0) {    cidr1Prefix=cidr1Prefix >> offset;    cidr2Prefix=cidr2Prefix >> offset;    cidr1Prefix=cidr1Prefix << offset;    cidr2Prefix=cidr2Prefix << offset;  }  if (cidr1Prefix == cidr2Prefix) {    if (cidr1MaskBits >= cidr2MaskBits) {      return true;    }  }  return false;}  }
class C{  public void close() throws java.io.IOException {  m_os.close();}  }
class C{  private static JComboBox<String> buildRow(final JPanel componentPanel,final DebuggerException exception){  componentPanel.add(new JLabel(exception.getExceptionName()));  final JComboBox<String> combobox=new JComboBox<String>();  combobox.addItem(getString(DebuggerExceptionHandlingAction.Continue));  combobox.addItem(getString(DebuggerExceptionHandlingAction.Halt));  combobox.addItem(getString(DebuggerExceptionHandlingAction.Ignore));  combobox.setSelectedIndex(exception.getExceptionAction().getValue());  componentPanel.add(combobox);  return combobox;}  }
class C{  public boolean dismissPopup(){  if (isShowingPopup()) {    getListPopupWindow().dismiss();    ViewTreeObserver viewTreeObserver=getViewTreeObserver();    if (viewTreeObserver.isAlive()) {      viewTreeObserver.removeGlobalOnLayoutListener(mOnGlobalLayoutListener);    }  }  return true;}  }
class C{  public void putMetricData(String metricName,Double metricValue) throws AmazonClientException, AmazonServiceException {  this.putMetricData(namespace,metricName,metricValue);}  }
class C{  protected UnManagedFileSystem checkUnManagedFileSystemExistsInDB(DbClient dbClient,String nativeGuid) throws IOException {  UnManagedFileSystem filesystemInfo=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemInfoNativeGUIdConstraint(nativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unFileSystemtURI=iter.next();    filesystemInfo=dbClient.queryObject(UnManagedFileSystem.class,unFileSystemtURI);    return filesystemInfo;  }  return filesystemInfo;}  }
class C{  private boolean showMember(DVariable child){  if (isTraits(child))   return false;  return true;}  }
class C{  public E peekLast(){  if (size == 0)   return null;  return getLast();}  }
class C{  public boolean isPropertyBool(String key){  return getProperty(key).equals("Y");}  }
class C{  public boolean isType(int[] types){  for (  int type : types) {    if (isType(type)) {      return true;    }  }  return false;}  }
class C{  public void fromAxes(Vector3f uAxis,Vector3f vAxis,Vector3f wAxis){  m00=uAxis.x;  m10=uAxis.y;  m20=uAxis.z;  m01=vAxis.x;  m11=vAxis.y;  m21=vAxis.z;  m02=wAxis.x;  m12=wAxis.y;  m22=wAxis.z;}  }
class C{  public void cleanup(){  if (cleanupRecords != null) {    Iterator<Long> iterRecord=cleanupRecords.iterator();    while (iterRecord.hasNext()) {      Long record=iterRecord.next();      if (iterRecord.hasNext()) {        deleteID(record.longValue());      }    }    cleanupRecords.clear();    cleanupRecords=null;  }}  }
class C{  public boolean computeAngleOffset(){  if (mFinished) {    return false;  }  long systemClock=AnimationUtils.currentAnimationTimeMillis();  long timePassed=systemClock - mStartTime;  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float sc=(float)timePassed / mDuration;    mCurrAngle=mStartAngle + Math.round(mDeltaAngle * sc);  break;case FLING_MODE:float timePassedSeconds=timePassed / 1000.0f;float distance;if (mVelocity < 0) {distance=mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f);} else {distance=-mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f);}mCurrAngle=mStartAngle - Math.signum(mVelocity) * Math.round(distance);break;}return true;} else {mFinished=true;return false;}}  }
class C{  public DoubleMatrix1D viewColumn(int column){  checkColumn(column);  int viewSize=this.rows;  int viewZero=this.rowZero;  int viewStride=this.rowStride;  int[] viewOffsets=this.rowOffsets;  int viewOffset=this.offset + _columnOffset(_columnRank(column));  return new SelectedDenseDoubleMatrix1D(viewSize,this.elements,viewZero,viewStride,viewOffsets,viewOffset);}  }
class C{  public ActionEvent(Component dragged,Component drop,int x,int y){  this.source=dragged;  this.sourceComponent=drop;  this.keyEvent=x;  this.y=y;  this.trigger=Type.PointerDrag;}  }
class C{  public void runTests(File dir,int width,int height) throws Exception {  File[] files=dir.listFiles();  for (int i=0; i < files.length; i++) {    if (files[i].isDirectory()) {      runTests(files[i],width,height);      continue;    }    if (files[i].getName().endsWith(".xhtml")) {      String testfile=files[i].getAbsolutePath();      String difffile=testfile.substring(0,testfile.length() - 6) + ".diff";      XRLog.log("unittests",Level.WARNING,"test file = " + testfile);      try {        boolean is_correct=compareTestFile(testfile,difffile,width,height);        XRLog.log("unittests",Level.WARNING,"is correct = " + is_correct);      } catch (      Throwable thr) {        XRLog.log("unittests",Level.WARNING,thr.toString());        thr.printStackTrace();      }    }  }}  }
class C{  public DirectoryRequest(String localDirectory,String repository){  BugLog.getInstance().assertNotNull(localDirectory);  BugLog.getInstance().assertNotNull(repository);  this.localDirectory=localDirectory;  this.repository=repository;}  }
class C{  public static void stashEnableAssertionArg(String arg){  assertionsEnabled=true;  enabledAssertionStrings=arg.split(":");  if (enabledAssertionStrings != null) {    if ((enabledAssertionStrings.length == 0) || (enabledAssertionStrings.length == 1 && enabledAssertionStrings[0].equals(""))) {      enabledAssertionStrings=null;    }  }}  }
class C{  private long triggerTime(long delay,TimeUnit unit){  return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));}  }
class C{  @Override protected void determineFormat(){  ArrayList<Attribute> hv;  Attribute predictedClass;  Attribute classAt;  Attribute margin=null;  ArrayList<String> attVals;  int i;  if (!m_SaveForVisualization) {    m_PlotInstances=null;    return;  }  hv=new ArrayList<Attribute>();  classAt=m_Instances.attribute(m_ClassIndex);  if (classAt.isNominal()) {    attVals=new ArrayList<String>();    for (i=0; i < classAt.numValues(); i++) {      attVals.add(classAt.value(i));    }    predictedClass=new Attribute("predicted " + classAt.name(),attVals);    margin=new Attribute("prediction margin");  } else {    predictedClass=new Attribute("predicted" + classAt.name());  }  for (i=0; i < m_Instances.numAttributes(); i++) {    if (i == m_Instances.classIndex()) {      if (classAt.isNominal()) {        hv.add(margin);      }      hv.add(predictedClass);    }    hv.add((Attribute)m_Instances.attribute(i).copy());  }  m_PlotInstances=new Instances(m_Instances.relationName() + "_predicted",hv,m_Instances.numInstances());  if (classAt.isNominal()) {    m_PlotInstances.setClassIndex(m_ClassIndex + 2);  } else {    m_PlotInstances.setClassIndex(m_ClassIndex + 1);  }}  }
class C{  private String createJar(String dir) throws IOException, InterruptedException {  String jarname=dir + "/" + DML_JAR_NAME;  File fdir=new File(dir);  File[] tmp=fdir.listFiles();  StringBuilder flist=new StringBuilder();  for (  File ftmp : tmp) {    flist.append(ftmp.getName());    flist.append(" ");  }  String javahome=System.getProperty("java.home");  File fjdkhome=new File(new File(javahome).getParent() + File.separator + "bin");  String jarPrefix="";  if (fjdkhome.exists()) {    jarPrefix=fjdkhome.getAbsolutePath();    jarPrefix+=File.separator;  }  if (jarPrefix.isEmpty())   LOG.warn("Failed to find jdk home of running jre (java.home=" + javahome + ").");  String command=jarPrefix + "jar cf " + jarname+ " "+ flist.subSequence(0,flist.length() - 1);  LOG.debug("Packaging jar of unzipped files: " + command);  Process child=Runtime.getRuntime().exec(command,null,fdir);  int c=0;  while ((c=child.getInputStream().read()) != -1)   System.out.print((char)c);  while ((c=child.getErrorStream().read()) != -1)   System.err.print((char)c);  child.waitFor();  return jarname;}  }
class C{  public void sendAuthCertDeletionRequest(SecurityServerId securityServer,byte[] authCert) throws Exception {  sendToProxy(builder.buildAuthCertDeletionRequest(securityServer,authCert));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static boolean isInRange(final float min,final float max,final float a){  return min <= a && a <= max;}  }
class C{  public static boolean isElective(int optionNumber){  return (optionNumber & 1) == 0;}  }
class C{  public void put(final byte[] b,final int off,final int len){  ensureFree(len);  System.arraycopy(b,0,buf,this.len,len);  this.len+=len;}  }
class C{  private void returnError(BeanError error){  resetSketchUploadState();  beanListener.onError(error);}  }
class C{  private boolean isIgnorable(Throwable bug,String msg){  if (bug instanceof StackOverflowError)   return true;  if (bug instanceof OutOfMemoryError)   return true;  if (msg == null)   return true;  if (msg.indexOf("javax.swing.RepaintManager") != -1)   return true;  if (msg.indexOf("sun.awt.RepaintArea.paint") != -1)   return true;  if (bug instanceof ArrayIndexOutOfBoundsException) {    if (msg.indexOf("apple.awt.CWindow.displayChanged") != -1)     return true;    if (msg.indexOf("javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds") != -1)     return true;  }  if (bug instanceof IllegalStateException) {    if (msg.indexOf("cannot open system clipboard") != -1)     return true;  }  if (bug instanceof IllegalComponentStateException) {    if (msg.indexOf("component must be showing on the screen to determine its location") != -1)     return true;  }  if (bug instanceof NullPointerException) {    if (msg.indexOf("MetalFileChooserUI") != -1)     return true;    if (msg.indexOf("WindowsFileChooserUI") != -1)     return true;    if (msg.indexOf("AquaDirectoryModel") != -1)     return true;    if (msg.indexOf("SizeRequirements.calculateAlignedPositions") != -1)     return true;    if (msg.indexOf("BasicTextUI.damageRange") != -1)     return true;    if (msg.indexOf("null pData") != -1)     return true;    if (msg.indexOf("disposed component") != -1)     return true;    if (msg.indexOf("javax.swing.JComponent.repaint") != -1 && msg.indexOf("com.limegroup.gnutella.gui.FileChooserHandler.getSaveAsFile") != -1) {      return true;    }    if (msg.indexOf("javax.swing.JComponent.repaint") != -1 && msg.indexOf("com.limegroup.gnutella.gui.FileChooserHandler.getInput") != -1) {      return true;    }  }  if (bug instanceof IndexOutOfBoundsException) {    if (msg.indexOf("Invalid index") != -1 && msg.indexOf("com.limegroup.gnutella.gui.FileChooserHandler.getSaveAsFile") != -1) {      return true;    }    if (msg.indexOf("Invalid index") != -1 && msg.indexOf("com.limegroup.gnutella.gui.FileChooserHandler.getInput") != -1) {      return true;    }  }  if (bug instanceof InternalError) {    if (msg.indexOf("getGraphics not implemented for this component") != -1)     return true;  }  if (msg.indexOf("com.limegroup.gnutella") == -1 && msg.indexOf("org.limewire") == -1)   return true;  if (intercepts(msg,"com.limegroup.gnutella.tables.MouseEventConsumptionChecker"))   return true;  if (intercepts(msg,"com.limegroup.gnutella.gui.tables.LimeJTable.processMouseEvent"))   return true;  return false;}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public void testGetColumnDisplaySize(){  try {    for (int i=0; i < rsmd.getColumnCount(); i++) {      int size=rsmd.getColumnDisplaySize(i + 1);      assertTrue(size > 0);    }  } catch (  SQLException e) {    fail("SQLException is thrown: " + e.getMessage());  }  try {    rsmd.getColumnDisplaySize(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rsmd.getColumnDisplaySize(5);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public void testSortOneDocument() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.SORTED));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.STRING));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(1,td.totalHits);  assertEquals("foo",searcher.doc(td.scoreDocs[0].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public static void addNotificationsRequests(Message message,boolean offline,boolean delivered,boolean displayed,boolean composing){  MessageEvent messageEvent=new MessageEvent();  messageEvent.setOffline(offline);  messageEvent.setDelivered(delivered);  messageEvent.setDisplayed(displayed);  messageEvent.setComposing(composing);  message.addExtension(messageEvent);}  }
class C{  protected void fail(S state,Throwable t){  ServiceUtils.logSevere(this,t);  ServiceUtils.logInfo(this,"Failing task service for workflow %s",state.documentSelfLink);  try {    TaskServiceUtils.fail(this,ServiceDocumentUtils.getTaskServiceState(state),t,null);  } catch (  Throwable throwable) {    ServiceUtils.logSevere(this,"Failed to fail workflow: %s",throwable.toString());  }}  }
class C{  public void testDivideBigDecimal2(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=-15;  String c="-5E-26";  int resScale=26;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public AuthorityKeyIdentifierStructure(X509Certificate certificate) throws CertificateParsingException {  super(fromCertificate(certificate));}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public void revertToDefault(int row,String field){  int col=getColumnNumber(field);  row=getColumnRow(row,col);  getColumn(col).revertToDefault(row);}  }
class C{  public static BIP38PrivateKey fromBase58(NetworkParameters params,String base58) throws AddressFormatException {  return new BIP38PrivateKey(params,base58);}  }
class C{  public String toString(){  StringBuffer output=new StringBuffer();  output.append(currentTileKey).append("/");  if ((nextTileID != -1) && (nextTileKey != -1)) {    output.append(nextTileID).append(",");    output.append(nextTileKey);  }  return output.toString();}  }
class C{  private static void s_uacmean(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,Mean kmean,int rl,int ru){  Arrays.fill(c,n,n * 2,ru - rl);  if (a.isContiguous()) {    countDisAgg(a.values(rl),c,a.indexes(rl),a.pos(rl),n,(int)a.size(rl,ru));  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       countDisAgg(a.values(i),c,a.indexes(i),a.pos(i),n,a.size(i));    }  }  if (a.isContiguous()) {    meanAgg(a.values(rl),c,a.indexes(rl),a.pos(rl),(int)a.size(rl,ru),n,kbuff,kmean);  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       meanAgg(a.values(i),c,a.indexes(i),a.pos(i),a.size(i),n,kbuff,kmean);    }  }}  }
class C{  private boolean shouldTitleBeShown(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  String key=getString(R.string.show_bottom_sheet_title_preference_key);  boolean defaultValue=getResources().getBoolean(R.bool.show_bottom_sheet_title_preference_default_value);  return sharedPreferences.getBoolean(key,defaultValue);}  }
class C{  private void refreshBuffer() throws IOException {  if (output == null) {    throw new OutOfSpaceException();  }  output.write(buffer,0,position);  position=0;}  }
class C{  public RuleNode rightNode(){  return m_right;}  }
class C{  private boolean inNestedFrameSet(){  FrameSetView parent=(FrameSetView)getParent();  return (parent.getParent() instanceof FrameSetView);}  }
class C{  public static String constNameToNormal(final String text,final boolean capitalizeWords){  final StringBuilder sb=new StringBuilder(text.length());  boolean nextCapital=true;  for (  final char ch : text.toCharArray()) {    if (ch == '_') {      sb.append(' ');      nextCapital=capitalizeWords;    } else     if (nextCapital) {      sb.append(ch);      nextCapital=false;    } else     sb.append(Character.toLowerCase(ch));  }  return sb.toString();}  }
class C{  public boolean isMandatory(){  return (m_isMandatory);}  }
class C{  public static String streamAttachment(HttpServletResponse response,MAttachment attachment,int attachmentIndex){  if (attachment == null)   return "No Attachment";  int realIndex=-1;  MAttachmentEntry[] entries=attachment.getEntries();  for (int i=0; i < entries.length; i++) {    MAttachmentEntry entry=entries[i];    if (entry.getIndex() == attachmentIndex) {      realIndex=i;      break;    }  }  if (realIndex < 0) {    log.fine("No Attachment Entry for Index=" + attachmentIndex + " - "+ attachment);    return "Attachment Entry not found";  }  MAttachmentEntry entry=entries[realIndex];  if (entry.getData() == null) {    log.fine("Empty Attachment Entry for Index=" + attachmentIndex + " - "+ attachment);    return "Attachment Entry empty";  }  try {    int bufferSize=2048;    int fileLength=entry.getData().length;    response.setContentType(entry.getContentType());    response.setBufferSize(bufferSize);    response.setContentLength(fileLength);    log.fine(entry.toString());    long time=System.currentTimeMillis();    ServletOutputStream out=response.getOutputStream();    out.write(entry.getData());    out.flush();    out.close();    time=System.currentTimeMillis() - time;    double speed=(fileLength / 1024) / ((double)time / 1000);    log.info("Length=" + fileLength + " - "+ time+ " ms - "+ speed+ " kB/sec - "+ entry.getContentType());  } catch (  IOException ex) {    log.log(Level.SEVERE,ex.toString());    return "Streaming error - " + ex;  }  return null;}  }
class C{  protected JSONArray(JSONTokener x){  this();  if (x.nextClean() != '[') {    throw new RuntimeException("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        myArrayList.add(JSONObject.NULL);      } else {        x.back();        myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ';':case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw new RuntimeException("Expected a ',' or ']'");}}}}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  rentHelper=AllotmentUtilities.get();  buildNPC(zone,attributes);}  }
class C{  public TestHttpServer(HttpCallback cb,int threads,int cperthread,int port) throws IOException {  schan=ServerSocketChannel.open();  InetSocketAddress addr=new InetSocketAddress(port);  schan.socket().bind(addr);  this.threads=threads;  this.cb=cb;  this.cperthread=cperthread;  servers=new Server[threads];  for (int i=0; i < threads; i++) {    servers[i]=new Server(cb,schan,cperthread);    servers[i].start();  }}  }
class C{  private void findNextClip(int pw,int ph){  final boolean ltr=table.getComponentOrientation().isLeftToRight();  if (col == 0) {    if (ltr) {      clip.x=0;    } else {      clip.x=totalColWidth;    }    clip.y+=clip.height;    clip.width=0;    clip.height=0;    int rowCount=table.getRowCount();    int rowHeight=table.getRowHeight(row);    do {      clip.height+=rowHeight;      if (++row >= rowCount) {        break;      }      rowHeight=table.getRowHeight(row);    } while (clip.height + rowHeight <= ph);  }  if (printMode == JTable.PrintMode.FIT_WIDTH) {    clip.x=0;    clip.width=totalColWidth;    return;  }  if (ltr) {    clip.x+=clip.width;  }  clip.width=0;  int colCount=table.getColumnCount();  int colWidth=colModel.getColumn(col).getWidth();  do {    clip.width+=colWidth;    if (!ltr) {      clip.x-=colWidth;    }    if (++col >= colCount) {      col=0;      break;    }    colWidth=colModel.getColumn(col).getWidth();  } while (clip.width + colWidth <= pw);}  }
class C{  public CollectionCreationException(String message){  super(message);}  }
class C{  private void initMnemonics(){  mnemonicToIndexMap=new Hashtable<Integer,Integer>();  mnemonicInputMap=new ComponentInputMapUIResource(tabPane);  mnemonicInputMap.setParent(SwingUtilities.getUIInputMap(tabPane,JComponent.WHEN_IN_FOCUSED_WINDOW));  SwingUtilities.replaceUIInputMap(tabPane,JComponent.WHEN_IN_FOCUSED_WINDOW,mnemonicInputMap);}  }
class C{  private void createDatasetObject(String[] args,ListIterator<String> inputIterator){  int lineNr=inputIterator.nextIndex();  String datasetId=null;  if (args != null) {    if (args.length > 1) {      datasetId=args[1];    }  }  DataSet newDataset=new DataSet(datasetId,datasetNr++,lineNr);  while (inputIterator.hasNext()) {    String nextLine=inputIterator.next();    if (nextLine.matches(PlotConstants.REGEX_COMMENT)) {      continue;    } else     if (nextLine.trim().isEmpty()) {      break;    } else {      newDataset.addLine(nextLine.split(PlotConstants.REGEX_DATA_SEPARATOR));    }  }  if (datasetId != null) {    for (    DataSet ds : datasetList) {      if (datasetId.equals(ds.getId())) {        throw new ParserException("The dataset name \"" + datasetId + "\" (line: "+ lineNr+ ") already exists");      }    }  }  datasetList.add(newDataset);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TYPE__ANNOTATIONS:    getAnnotations().clear();  return;}super.eUnset(featureID);}  }
class C{  public boolean addAll(Line1D[] c){  boolean changed=false;  for (  Line1D l : c) {    changed=add(l) || changed;  }  return changed;}  }
class C{  private TableReference executeQueryAndWaitForCompletion() throws IOException, InterruptedException {  Job dryRunJob=new Job().setConfiguration(new JobConfiguration().setQuery(new JobConfigurationQuery().setQuery(query)).setDryRun(true));  JobStatistics jobStats=executeWithBackOff(client.jobs().insert(projectId,dryRunJob),String.format("Error when trying to dry run query %s.",query)).getStatistics();  String location=null;  @Nullable List<TableReference> tables=jobStats.getQuery().getReferencedTables();  if (tables != null && !tables.isEmpty()) {    Table table=getTable(tables.get(0));    location=table.getLocation();  }  Random rnd=new Random(System.currentTimeMillis());  temporaryDatasetId="_dataflow_temporary_dataset_" + rnd.nextInt(1000000);  temporaryTableId="dataflow_temporary_table_" + rnd.nextInt(1000000);  createDataset(temporaryDatasetId,location);  Job job=new Job();  JobConfiguration config=new JobConfiguration();  JobConfigurationQuery queryConfig=new JobConfigurationQuery();  config.setQuery(queryConfig);  job.setConfiguration(config);  queryConfig.setQuery(query);  queryConfig.setAllowLargeResults(true);  queryConfig.setFlattenResults(flattenResults);  queryConfig.setUseLegacySql(useLegacySql);  TableReference destinationTable=new TableReference();  destinationTable.setProjectId(projectId);  destinationTable.setDatasetId(temporaryDatasetId);  destinationTable.setTableId(temporaryTableId);  queryConfig.setDestinationTable(destinationTable);  Job queryJob=executeWithBackOff(client.jobs().insert(projectId,job),String.format("Error when trying to execute the job for query %s.",query));  JobReference jobId=queryJob.getJobReference();  while (true) {    Job pollJob=executeWithBackOff(client.jobs().get(projectId,jobId.getJobId()),String.format("Error when trying to get status of the job for query %s.",query));    JobStatus status=pollJob.getStatus();    if (status.getState().equals("DONE")) {      ErrorProto error=status.getErrorResult();      if (error == null) {        return pollJob.getConfiguration().getQuery().getDestinationTable();      } else {        temporaryTableId=null;        throw new IOException("Executing query " + query + " failed: "+ error.getMessage());      }    }    Uninterruptibles.sleepUninterruptibly(QUERY_COMPLETION_POLL_TIME.getMillis(),TimeUnit.MILLISECONDS);  }}  }
class C{  public boolean isCalculationTypeSubtract(){  return CALCULATIONTYPE_SubtractOp1_Op2.equals(getCalculationType());}  }
class C{  private static boolean isDelimiter(final char ch,final char[] delimiters){  if (delimiters == null) {    return Character.isWhitespace(ch);  }  for (  final char delimiter : delimiters) {    if (ch == delimiter) {      return true;    }  }  return false;}  }
class C{  private Array(){}  }
class C{  public synchronized void activityStop(){  if (this.spinnerDialog != null) {    this.spinnerDialog.dismiss();    this.spinnerDialog=null;  }}  }
class C{  public boolean areNodesReachable(String vdcShortId,Map<String,String> ipv4,Map<String,String> ipv6,boolean isAllNotReachable){  List<String> ips=new ArrayList<String>();  if (ipv4 != null && !ipv4.isEmpty()) {    for (    String node : ipv4.keySet()) {      if (!ipv4.get(node).equals(PropertyConstants.IPV4_ADDR_DEFAULT)) {        ips.add(ipv4.get(node));      }    }  }  if (ips.isEmpty()) {    if (ipv6 != null && !ipv6.isEmpty()) {      for (      String node : ipv6.keySet()) {        if (!ipv6.get(node).equals(PropertyConstants.IPV6_ADDR_DEFAULT)) {          ips.add(ipv6.get(node));        }      }    }  }  if (ips.isEmpty()) {    throw new IllegalStateException("Cannot perform node reachable check on vdc " + vdcShortId + " no nodes were found on VdcConfig object");  }  for (  String host : ips) {    log.info("Testing connection to ip address : " + host);    Socket socket=null;    try {      socket=new Socket();      InetSocketAddress endpoint=new InetSocketAddress(InetAddress.getByName(host),NODE_REACHABLE_PORT);      socket.connect(endpoint,NODE_REACHABLE_TIMEOUT);      if (isAllNotReachable) {        return true;      }    } catch (    IOException e) {      if (isAllNotReachable) {        log.info("Disconnect node check, could NOT access node {}, will continue check.",host);        continue;      }      log.error("Could not connect to server {}",host);      log.error(e.getMessage(),e);      return false;    } finally {      if (socket != null) {        try {          socket.close();        } catch (        IOException e) {          log.error("Exception closing socket");          log.error(e.getMessage(),e);        }      }    }    log.info("ip address " + host + " is reachable");  }  if (isAllNotReachable) {    log.info("All nodes are not reachable.");    return false;  } else {    return true;  }}  }
class C{  public SearchParamEditor(){}  }
class C{  public void stopClient() throws IOException {  oPingThread.giveup();  oPingThread.interrupt();  PacketBYE p=new PacketBYE();  p.send(hostAddress,hostPort);}  }
class C{  public JsonRandomAccessFile(final File dumpFile,final int concurrency) throws IOException {  super(dumpFile,"rw");  this.file=dumpFile;  this.concurrency=concurrency;  this.jsonline=new ArrayBlockingQueue<>(1000);}  }
class C{  private void trimLeadingZeros(){  int i=nWords;  if (i > 0 && (data[--i] == 0)) {    while (i > 0 && data[i - 1] == 0) {      i--;    }    this.nWords=i;    if (i == 0) {      this.offset=0;    }  }}  }
class C{  public void eventDispatched(AWTEvent event){  getListener().eventDispatched(event);}  }
class C{  @RequestMapping(value="/rows/{nbRows}",method=RequestMethod.GET) public @ResponseBody List<Message> listMessages(@PathVariable final Integer nbRows) throws ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.debug("nbRows:" + nbRows);  }  return messageService.listByUser(authentificationUtils.getAuthentificatedUser(),nbRows);}  }
class C{  private static int nextHashCode(){  return nextHashCode.getAndAdd(HASH_INCREMENT);}  }
class C{  public boolean isPassthruCapable(){  return passthruCapable;}  }
class C{  @Override public boolean isMasterConnection(){  return this.currentConnection != null && this.currentConnection == this.masterConnection;}  }
class C{  public void finalStatistics(final EvolutionState state,final int result){  super.finalStatistics(state,result);  EvolutionAgent agent=(EvolutionAgent)state;  StatisticsData data=new StatisticsData(new Address(agent.getName()),state.generation,System.currentTimeMillis() - creationtime,getBestIndividual(state),getBestIndividual(state));  if (agent.iamroot)   printStatistics(state,data); else {    for (int i=0; i < 5; i++) {      IRequest request=agent.fireMessage(agent.getRootAddress(),EvolutionAgent.M_STATS,data);      while (request.getStatus() == IRequest.WAITING) {        Thread.yield();      }      if (request.getStatus() == IRequest.DONE) {        break;      } else {        state.output.error("There was an error sending final statistics.");        try {          Thread.sleep(1000 * i ^ 2);        } catch (        Exception e) {          state.output.error("Exception: " + e);        }      }    }  }}  }
class C{  public void removeHeaders(){  qheaders=new NameValueList();}  }
class C{  public boolean isSuccessfullResponse(){  int code=getResponseCode();  if ((code >= 200) && (code < 300)) {    return true;  }  return false;}  }
class C{  public static Disjunction or(Expression first,Expression second,Expression... expressions){  return new Disjunction(first,second,expressions);}  }
class C{  public boolean containsMetaphasedFlux(){  return getFluid() != null && getFluid().isFluidEqual(new FluidStack(FancyFluidStorage.fluidMetaphasedFlux,1000));}  }
class C{  public static void main(String[] argv){  try {    Queue queue=new Queue();    for (int i=0; i < argv.length; i++) {      queue.push(argv[i]);    }    System.out.println("After Pushing");    System.out.println(queue.toString());    System.out.println("Popping...");    while (!queue.empty()) {      System.out.println(queue.pop().toString());    }  } catch (  Exception ex) {    System.out.println(ex.getMessage());  }}  }
class C{  public Selection(){  this.elements=Collections.emptyList();  this.head=null;}  }
class C{  public boolean isAggregatedType(){  return true;}  }
class C{  public void appendBrTag(){  text.append("<br/>");}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.PROPERTY__PRESENCE:    setPresence((Presence)newValue);  return;case DatatypePackage.PROPERTY__MULTIPLICITY:setMultiplicity((Boolean)newValue);return;case DatatypePackage.PROPERTY__NAME:setName((String)newValue);return;case DatatypePackage.PROPERTY__DESCRIPTION:setDescription((String)newValue);return;case DatatypePackage.PROPERTY__CONSTRAINT_RULE:setConstraintRule((ConstraintRule)newValue);return;case DatatypePackage.PROPERTY__TYPE:setType((PropertyType)newValue);return;case DatatypePackage.PROPERTY__PROPERTY_ATTRIBUTES:getPropertyAttributes().clear();getPropertyAttributes().addAll((Collection<? extends PropertyAttribute>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static String cleanNfo(String sourceNfoContent){  try {    Tidy tidy=new Tidy();    tidy.setInputEncoding("UTF-8");    tidy.setOutputEncoding("UTF-8");    tidy.setWraplen(Integer.MAX_VALUE);    tidy.setXmlOut(true);    tidy.setSmartIndent(true);    tidy.setXmlTags(true);    tidy.setMakeClean(true);    tidy.setForceOutput(true);    tidy.setQuiet(true);    tidy.setShowWarnings(false);    StringReader in=new StringReader(sourceNfoContent);    StringWriter out=new StringWriter();    tidy.parse(in,out);    return out.toString();  } catch (  Exception e) {  }  return sourceNfoContent;}  }
class C{  private static char[] encodeGroup(byte[] data,int position){  final char[] c=new char[]{'=','=','=','='};  int b1=0, b2=0, b3=0;  int length=data.length - position;  if (length == 0)   return c;  if (length >= 1) {    b1=(data[position]) & 0xFF;  }  if (length >= 2) {    b2=(data[position + 1]) & 0xFF;  }  if (length >= 3) {    b3=(data[position + 2]) & 0xFF;  }  c[0]=ALPHABET[b1 >> 2];  c[1]=ALPHABET[(b1 & 3) << 4 | (b2 >> 4)];  if (length == 1)   return c;  c[2]=ALPHABET[(b2 & 15) << 2 | (b3 >> 6)];  if (length == 2)   return c;  c[3]=ALPHABET[b3 & 0x3f];  return c;}  }
class C{  public GeneralRuntimeException(String msg,Throwable nested){  super(msg);  this.nested=nested;}  }
class C{  private String createIdentifier(JsonNode object){  JsonNode idNode=object.get(ID);  String id=idNode != null ? idNode.asText().trim() : "";  if (id.isEmpty() && deserializationFeatures.contains(DeserializationFeature.REQUIRE_RESOURCE_ID)) {    throw new IllegalArgumentException("Resource must have an non null and non-empty 'id' attribute!");  }  String type=object.get(TYPE).asText();  return type.concat(id);}  }
class C{  public ReadRequest(int objectId){  this(null,new LwM2mPath(objectId));}  }
class C{  private static void printCacheEntries(IgniteCache<Integer,Integer> cache){  System.out.println();  System.out.println(">>> Entries in the cache.");  Map<Integer,Integer> entries=cache.getAll(KEYS_SET);  if (entries.isEmpty())   System.out.println("No entries in the cache."); else {    for (    Map.Entry<Integer,Integer> entry : entries.entrySet())     System.out.println("Entry [key=" + entry.getKey() + ", value="+ entry.getValue()+ ']');  }}  }
class C{  public SelectedNodes(){  update();}  }
class C{  @Override public void init(){  executorPool=new ThreadPoolExecutor(DEFAULT_THREAD_POOL_CORE_SIZE,DEFAULT_THREAD_POOL_MAX_SIZE,DEFAULT_THREAD_POOL_SHRINK_TIME,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());  Map<String,List<AlertEmailGenerator>> tmpEmailGenerators=new HashMap<String,List<AlertEmailGenerator>>();  String site=config.getString("eagleProps.site");  String dataSource=config.getString("eagleProps.dataSource");  Map<String,Map<String,AlertDefinitionAPIEntity>> initialAlertDefs;  try {    initialAlertDefs=dao.findActiveAlertDefsGroupbyAlertExecutorId(site,dataSource);  } catch (  Exception ex) {    LOG.error("fail to initialize initialAlertDefs: ",ex);    throw new IllegalStateException("fail to initialize initialAlertDefs: ",ex);  }  if (initialAlertDefs == null || initialAlertDefs.isEmpty()) {    LOG.warn("No alert definitions found for site: " + site + ", dataSource: "+ dataSource);  } else {    for (    String alertExecutorId : alertExecutorIdList) {      if (initialAlertDefs.containsKey(alertExecutorId)) {        for (        AlertDefinitionAPIEntity alertDef : initialAlertDefs.get(alertExecutorId).values()) {          List<AlertEmailGenerator> gens=createAlertEmailGenerator(alertDef);          tmpEmailGenerators.put(alertDef.getTags().get("policyId"),gens);        }      } else {        LOG.info(String.format("No alert definitions found for site: %s, dataSource: %s, alertExecutorId: %s",site,dataSource,alertExecutorId));      }    }  }  alertEmailGeneratorsMap=new CopyOnWriteHashMap<String,List<AlertEmailGenerator>>();  alertEmailGeneratorsMap.putAll(tmpEmailGenerators);  DynamicPolicyLoader policyLoader=DynamicPolicyLoader.getInstance();  policyLoader.init(initialAlertDefs,dao,config);  for (  String alertExecutorId : alertExecutorIdList) {    policyLoader.addPolicyChangeListener(alertExecutorId,this);  }}  }
class C{  public synchronized void connected(BluetoothSocket socket,BluetoothDevice device,final String socketType){  if (D)   Log.d(TAG,"connected, Socket Type:" + socketType);  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mSecureAcceptThread != null) {    mSecureAcceptThread.cancel();    mSecureAcceptThread=null;  }  if (mInsecureAcceptThread != null) {    mInsecureAcceptThread.cancel();    mInsecureAcceptThread=null;  }  mConnectedThread=new ConnectedThread(socket,socketType);  mConnectedThread.start();  Message msg=mHandler.obtainMessage(BlueToothServer.MESSAGE_DEVICE_NAME);  Bundle bundle=new Bundle();  bundle.putString(BlueToothServer.DEVICE_NAME,device.getName());  msg.setData(bundle);  mHandler.sendMessage(msg);  setState(STATE_CONNECTED);}  }
class C{  public static void renderOrthogonal(ComplexVector vec1,ComplexVector vec2){  IncompatibleVectorsException.checkVectorsCompatible(vec1,vec2);  if (vec1.getOpMode() != ComplexVector.Mode.CARTESIAN)   vec1.toCartesian();  if (vec2.getOpMode() != ComplexVector.Mode.CARTESIAN)   vec2.toCartesian();  float[] coordinates1=vec1.getCoordinates();  float[] coordinates2=vec2.getCoordinates();  double cosine=vec1.measureHermitianOverlap(vec2);  for (int i=0; i < coordinates1.length; i++)   coordinates1[i]=(float)(coordinates1[i] - cosine * coordinates2[i]);}  }
class C{  protected void childJustAddedHook(Object child,BCSChild bcsChild){}  }
class C{  public void standby() throws SchedulerException {  try {    getRemoteScheduler().standby();  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  protected PropertyChangeListener createActionPropertyChangeListener(Action a){  return new TextFieldActionPropertyChangeListener(this,a);}  }
class C{  public static void copyTypeModifiers(TypeRef target,TypeRef source){  target.setUndefModifier(source.getUndefModifier());  target.setNullModifier(source.getNullModifier());  if (target instanceof BaseTypeRef) {    ((BaseTypeRef)target).setDynamic(target.isDynamic() || source.isDynamic());  }}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  public void removeFloor(Floor floor){  LOGGER.debug("BuildUpFloor.removeFloor");  getFloorDetails().remove(floor);  noofFloors=getFloorDetails().size();}  }
class C{  protected final Field unpackField(Buffer packet,boolean extractDefaultValues) throws SQLException {  if (this.use41Extensions) {    if (this.has41NewNewProt) {      int catalogNameStart=packet.getPosition() + 1;      int catalogNameLength=packet.fastSkipLenString();      catalogNameStart=adjustStartForFieldLength(catalogNameStart,catalogNameLength);    }    int databaseNameStart=packet.getPosition() + 1;    int databaseNameLength=packet.fastSkipLenString();    databaseNameStart=adjustStartForFieldLength(databaseNameStart,databaseNameLength);    int tableNameStart=packet.getPosition() + 1;    int tableNameLength=packet.fastSkipLenString();    tableNameStart=adjustStartForFieldLength(tableNameStart,tableNameLength);    int originalTableNameStart=packet.getPosition() + 1;    int originalTableNameLength=packet.fastSkipLenString();    originalTableNameStart=adjustStartForFieldLength(originalTableNameStart,originalTableNameLength);    int nameStart=packet.getPosition() + 1;    int nameLength=packet.fastSkipLenString();    nameStart=adjustStartForFieldLength(nameStart,nameLength);    int originalColumnNameStart=packet.getPosition() + 1;    int originalColumnNameLength=packet.fastSkipLenString();    originalColumnNameStart=adjustStartForFieldLength(originalColumnNameStart,originalColumnNameLength);    packet.readByte();    short charSetNumber=(short)packet.readInt();    long colLength=0;    if (this.has41NewNewProt) {      colLength=packet.readLong();    } else {      colLength=packet.readLongInt();    }    int colType=packet.readByte() & 0xff;    short colFlag=0;    if (this.hasLongColumnInfo) {      colFlag=(short)packet.readInt();    } else {      colFlag=(short)(packet.readByte() & 0xff);    }    int colDecimals=packet.readByte() & 0xff;    int defaultValueStart=-1;    int defaultValueLength=-1;    if (extractDefaultValues) {      defaultValueStart=packet.getPosition() + 1;      defaultValueLength=packet.fastSkipLenString();    }    Field field=new Field(this.connection,packet.getByteBuffer(),databaseNameStart,databaseNameLength,tableNameStart,tableNameLength,originalTableNameStart,originalTableNameLength,nameStart,nameLength,originalColumnNameStart,originalColumnNameLength,colLength,colType,colFlag,colDecimals,defaultValueStart,defaultValueLength,charSetNumber);    return field;  }  int tableNameStart=packet.getPosition() + 1;  int tableNameLength=packet.fastSkipLenString();  tableNameStart=adjustStartForFieldLength(tableNameStart,tableNameLength);  int nameStart=packet.getPosition() + 1;  int nameLength=packet.fastSkipLenString();  nameStart=adjustStartForFieldLength(nameStart,nameLength);  int colLength=packet.readnBytes();  int colType=packet.readnBytes();  packet.readByte();  short colFlag=0;  if (this.hasLongColumnInfo) {    colFlag=(short)(packet.readInt());  } else {    colFlag=(short)(packet.readByte() & 0xff);  }  int colDecimals=(packet.readByte() & 0xff);  if (this.colDecimalNeedsBump) {    colDecimals++;  }  Field field=new Field(this.connection,packet.getByteBuffer(),nameStart,nameLength,tableNameStart,tableNameLength,colLength,colType,colFlag,colDecimals);  return field;}  }
class C{  public boolean isSuccessful(){  return (type == SUCCESSFUL);}  }
class C{  public void removeOutOfContexts(int id){  outOfContextLock.lock();  Integer[] keys=new Integer[outOfContextProposes.keySet().size()];  outOfContextProposes.keySet().toArray(keys);  for (int i=0; i < keys.length; i++) {    if (keys[i] <= id) {      outOfContextProposes.remove(keys[i]);    }  }  keys=new Integer[outOfContext.keySet().size()];  outOfContext.keySet().toArray(keys);  for (int i=0; i < keys.length; i++) {    if (keys[i] <= id) {      outOfContext.remove(keys[i]);    }  }  outOfContextLock.unlock();}  }
class C{  public boolean translateSpoiledKey() throws NoSuchAlgorithmException, InvalidKeySpecException {  SecretKey key1=getMyOwnSecretKey();  ((MyPBKDF2SecretKey)key1).spoil();  SecretKeyFactory skf=SecretKeyFactory.getInstance(algoToTest);  try {    SecretKey key2=skf.translateKey(key1);  } catch (  InvalidKeyException ike) {    return true;  }  return false;}  }
class C{  public static void download(long[] globalIds){  for (  long globalId : globalIds) {    download(globalId);  }}  }
class C{  protected void tearDown(){}  }
class C{  public int count(){  return count;}  }
class C{  public void mergeFrom(ParseOperationSet other){  for (  String key : other.keySet()) {    ParseFieldOperation operation1=other.get(key);    ParseFieldOperation operation2=get(key);    if (operation2 != null) {      operation2=operation2.mergeWithPrevious(operation1);    } else {      operation2=operation1;    }    put(key,operation2);  }}  }
class C{  private int loadShader(int shaderType,String source){  int shader=GLES20.glCreateShader(shaderType);  if (shader != 0) {    GLES20.glShaderSource(shader,source);    GLES20.glCompileShader(shader);    int[] compiled=new int[1];    GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compiled,0);    if (compiled[0] == 0) {      RajLog.e("[" + getClass().getName() + "] Could not compile "+ (shaderType == GLES20.GL_FRAGMENT_SHADER ? "fragment" : "vertex")+ " shader:");      RajLog.e("Shader log: " + GLES20.glGetShaderInfoLog(shader));      GLES20.glDeleteShader(shader);      shader=0;    }  }  return shader;}  }
class C{  public static double area(int n,double side){  return (n * Math.pow(side,2) / (4 * Math.tan(Math.PI / n)));}  }
class C{  public Settings createNewDefaultSettings(){  Settings settings=new Settings();  setToDefaultSettings(settings);  mDaoSession.getSettingsDao().insert(settings);  return settings;}  }
class C{  public void resetAllRotations(){  rotateAngleX=initRotateAngleX;  rotateAngleY=initRotateAngleY;  rotateAngleZ=initRotateAngleZ;}  }
class C{  private String isCheckSum(final Coordinates c){  final String cext=c.getExtension();  if (cext == null) {    return null;  }  for (  final String ext : this.options.getChecksumExtensions()) {    if (cext.endsWith("." + ext)) {      return ext;    }  }  return null;}  }
class C{  public int candy(int[] ratings){  int[] candies=new int[ratings.length];  candies[0]=1;  for (int i=1; i < ratings.length; i++)   candies[i]=ratings[i] > ratings[i - 1] ? candies[i - 1] + 1 : 1;  int res=candies[candies.length - 1];  for (int i=ratings.length - 2; i >= 0; i--) {    if (ratings[i] > ratings[i + 1])     candies[i]=Math.max(candies[i],candies[i + 1] + 1);    res+=candies[i];  }  return res;}  }
class C{  public static final boolean equals(final double[] v1,final double[] v2){  return Arrays.equals(v1,v2);}  }
class C{  private void add(HttpServletRequest request,HttpServletResponse response) throws IOException {  PrintWriter out=response.getWriter();  String label=request.getParameter("add");  String units=request.getParameter("units");  String value=request.getParameter("value");  String detail=request.getParameter("detail");  Double val=toDouble(value);  if (isEmpty(label) || isEmpty(units) || isEmpty(val)) {    out.println(ERROR + ": add requires that a label, units and numeric value are passed in.  For example: curl http://localhost:8080/jamon/Mon?add=mylabel&units=bytes&value=1234");    out.println("  Optionally a detail may be passed in: curl http://localhost:8080/jamon/Mon?add=os.mylabel&units=bytes&value=1234&detail=Backup%20script%20from%20host%20backupserver\n");  } else {    MonKey key=getMonKey(label,detail,units);    Monitor mon=MonitorFactory.add(key,val);    out.println(OK + ": add successfully called on - " + label+ " - "+ mon);  }}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public RemoteImageServiceImpl(final DtoImageService dtoImageService,final SystemService systemService){  super(dtoImageService);  this.dtoImageService=dtoImageService;  this.systemService=systemService;}  }
class C{  private void log(LogLevel eventLevel,String message){switch (eventLevel) {case TRACE:    logger.trace(message);  return;case DEBUG:logger.debug(message);return;case INFO:logger.info(message);return;case WARN:logger.warn(message);return;case ERROR:logger.error(message);return;default :return;}}  }
class C{  public void removeBridge(String namespaceURI,String localName){  if (namespaceURIMap == null) {    return;  }  namespaceURI=((namespaceURI == null) ? "" : namespaceURI);  HashMap localNameMap=(HashMap)namespaceURIMap.get(namespaceURI);  if (localNameMap != null) {    localNameMap.remove(localName);    if (localNameMap.isEmpty()) {      namespaceURIMap.remove(namespaceURI);      if (namespaceURIMap.isEmpty()) {        namespaceURIMap=null;      }    }  }}  }
class C{  @Override public void write(byte b[]) throws IOException {  Iterator<Client> it=clients.iterator();  while (it.hasNext()) {    Client client=it.next();    try {      client.output.write(b);    } catch (    Exception e) {      it.remove();      close(client);    }  }}  }
class C{  @Override public void reset(){  count=0;}  }
class C{  public static final String createWarning(String msgKey,Object args[]){  return createMsg(XSLTBundle,msgKey,args);}  }
class C{  public static XYZSolid makeXYZSolid(final PlanetModel planetModel,final double minX,final double maxX,final double minY,final double maxY,final double minZ,final double maxZ){  if (Math.abs(maxX - minX) < Vector.MINIMUM_RESOLUTION) {    if (Math.abs(maxY - minY) < Vector.MINIMUM_RESOLUTION) {      if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {        return new dXdYdZSolid(planetModel,(minX + maxX) * 0.5,(minY + maxY) * 0.5,minZ);      } else {        return new dXdYZSolid(planetModel,(minX + maxX) * 0.5,(minY + maxY) * 0.5,minZ,maxZ);      }    } else {      if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {        return new dXYdZSolid(planetModel,(minX + maxX) * 0.5,minY,maxY,(minZ + maxZ) * 0.5);      } else {        return new dXYZSolid(planetModel,(minX + maxX) * 0.5,minY,maxY,minZ,maxZ);      }    }  }  if (Math.abs(maxY - minY) < Vector.MINIMUM_RESOLUTION) {    if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {      return new XdYdZSolid(planetModel,minX,maxX,(minY + maxY) * 0.5,(minZ + maxZ) * 0.5);    } else {      return new XdYZSolid(planetModel,minX,maxX,(minY + maxY) * 0.5,minZ,maxZ);    }  }  if (Math.abs(maxZ - minZ) < Vector.MINIMUM_RESOLUTION) {    return new XYdZSolid(planetModel,minX,maxX,minY,maxY,(minZ + maxZ) * 0.5);  }  return new StandardXYZSolid(planetModel,minX,maxX,minY,maxY,minZ,maxZ);}  }
class C{  void clearTransientStateViews(){  if (mTransientStateViews != null) {    mTransientStateViews.clear();  }}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  public static <T extends Map.Entry<String,String>>Map<String,String> toMap(Collection<T> from){  HashMap<String,String> map=new HashMap<String,String>();  if (from != null) {    for (    Map.Entry<String,String> entry : from) {      String key=entry.getKey();      if (!map.containsKey(key)) {        map.put(key,entry.getValue());      }    }  }  return map;}  }
class C{  public byte valueAt(int index){  return mValues[index];}  }
class C{  public static void assertStarted(){  assert !CLOCK_STATE.get().inHarness();}  }
class C{  public WeakNodeIdentity(final String id,final String name){  super(new KeyPair(),name);  this.name=id;}  }
class C{  public Icon(String id,String sourcePath){  this.id=id;  this.sourcePath=sourcePath;  this.svgResource=null;  this.imageResource=null;}  }
class C{  public DefaultDnDCatcher(DragSource ds,Component c){  this(ds,c,DnDConstants.ACTION_NONE);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public int compareTo(CharSequence csq){  return Order.LEXICAL.compare(this,csq);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List<URI> refreshXtremeIOConnections(final List<StorageProvider> xioProviderList,DbClient dbClient,XtremIOClientFactory xtremioRestClientFactory){  List<URI> activeProviders=new ArrayList<URI>();  for (  StorageProvider provider : xioProviderList) {    try {      XtremIOClient xioClient=(XtremIOClient)xtremioRestClientFactory.getRESTClient(URI.create(XtremIOConstants.getXIOBaseURI(provider.getIPAddress(),provider.getPortNumber())),provider.getUserName(),provider.getPassword(),provider.getVersionString(),true);      if (null != xioClient.getXtremIOXMSVersion()) {        provider.setConnectionStatus(StorageProvider.ConnectionStatus.CONNECTED.toString());        activeProviders.add(provider.getId());      } else {        _log.info("XIO Connection is not active {}",provider.getProviderID());        provider.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.toString());      }    } catch (    Exception ex) {      _log.error("Exception occurred while validating XIO client for {}",provider.getProviderID(),ex);      provider.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.toString());    } finally {      dbClient.updateObject(provider);    }  }  return activeProviders;}  }
class C{  public boolean isHaltedBefore(){  verifyValidState(true);  return location == SteppingLocation.BEFORE_STATEMENT;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:09.541 -0500",hash_original_method="14EA39361109DCC90111D16D29CE0C8D",hash_generated_method="227A58A6782E59F194019631AF0DF412") @Override public int hashCode(){  if (hashCode == 0) {    if (bytes != null && bytes.length != 0) {      int len=bytes.length;      int inc=((len - 32) / 32) + 1;      for (int i=0; i < len; ) {        hashCode=(hashCode * 37) + bytes[i];        i+=inc;      }    }    if (hashCode == 0) {      hashCode=1;    }  }  return hashCode;}  }
class C{  public static AuthRequest forUser(final String username){  final AccountExternalId.Key i=new AccountExternalId.Key(SCHEME_GERRIT,username);  final AuthRequest r=new AuthRequest(i.get());  r.setUserName(username);  return r;}  }
class C{  public XmlHandler deleteAnnotatedClasses(){  for (  String className : xml.getClasses()) {    try {      deleteAnnotatedClass(Class.forName(className));    } catch (    ClassNotFoundException e) {      try {        com.googlecode.jmapper.config.Error.xmlMappingClassDoesNotExist(className);      } catch (      Exception e2) {        JmapperLog.ERROR(e2);      }    }catch (    LoadingFileException e) {      JmapperLog.ERROR(e);    }catch (    IOException e) {      JmapperLog.ERROR(e);    }  }  xml.write();  return this;}  }
class C{  public static void cleanToolObjects(int toolId){  Iterator iter=semanticNodes.iterator();  while (iter.hasNext()) {    SemanticNode node=(SemanticNode)iter.next();    node.setToolObject(toolId,null);  }}  }
class C{  public static ExtensionRegistry createRegistryFrom(ExtensionRegistry parentRegistry,List<Class<? extends Extension>> extensionTypes){  Preconditions.notNull(parentRegistry,"parentRegistry must not be null");  ExtensionRegistry registry=new ExtensionRegistry(parentRegistry);  extensionTypes.forEach(null);  return registry;}  }
class C{  public RotatingGraphMousePlugin(int modifiers){  super(modifiers);  Dimension cd=Toolkit.getDefaultToolkit().getBestCursorSize(16,16);  BufferedImage cursorImage=new BufferedImage(cd.width,cd.height,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=cursorImage.createGraphics();  g.addRenderingHints(Collections.singletonMap(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON));  g.setColor(new Color(0,0,0,0));  g.fillRect(0,0,16,16);  int left=0;  int top=0;  int right=15;  int bottom=15;  g.setColor(Color.white);  g.setStroke(new BasicStroke(3));  g.drawLine(left + 2,top + 6,right / 2 + 1,top);  g.drawLine(right / 2 + 1,top,right - 2,top + 5);  g.drawLine(left + 2,bottom - 6,right / 2,bottom);  g.drawLine(right / 2,bottom,right - 2,bottom - 6);  g.drawLine(left + 2,top + 6,left + 5,top + 6);  g.drawLine(left + 2,top + 6,left + 2,top + 3);  g.drawLine(right - 2,bottom - 6,right - 6,bottom - 6);  g.drawLine(right - 2,bottom - 6,right - 2,bottom - 3);  g.setColor(Color.black);  g.setStroke(new BasicStroke(1));  g.drawLine(left + 2,top + 6,right / 2 + 1,top);  g.drawLine(right / 2 + 1,top,right - 2,top + 5);  g.drawLine(left + 2,bottom - 6,right / 2,bottom);  g.drawLine(right / 2,bottom,right - 2,bottom - 6);  g.drawLine(left + 2,top + 6,left + 5,top + 6);  g.drawLine(left + 2,top + 6,left + 2,top + 3);  g.drawLine(right - 2,bottom - 6,right - 6,bottom - 6);  g.drawLine(right - 2,bottom - 6,right - 2,bottom - 3);  g.dispose();  cursor=Toolkit.getDefaultToolkit().createCustomCursor(cursorImage,new Point(),"RotateCursor");}  }
class C{  public static void randomFixedLengthUnicodeString(Random random,char[] chars,int offset,int length){  int i=offset;  final int end=offset + length;  while (i < end) {    final int t=random.nextInt(5);    if (0 == t && i < length - 1) {      chars[i++]=(char)nextInt(random,0xd800,0xdbff);      chars[i++]=(char)nextInt(random,0xdc00,0xdfff);    } else     if (t <= 1) {      chars[i++]=(char)random.nextInt(0x80);    } else     if (2 == t) {      chars[i++]=(char)nextInt(random,0x80,0x7ff);    } else     if (3 == t) {      chars[i++]=(char)nextInt(random,0x800,0xd7ff);    } else     if (4 == t) {      chars[i++]=(char)nextInt(random,0xe000,0xffff);    }  }}  }
class C{  public final void open(){  this.setVisible(true);  this.log.log(Core.ALERT.MESSAGE,"Grassmarlin is ready.");  this.resetViews(null,false);}  }
class C{  public void subTask(String name){}  }
class C{  public Matrix3d(double m00,double m01,double m02,double m10,double m11,double m12,double m20,double m21,double m22){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;}  }
class C{  public static void appendInt(AbstractStringBuilder sb,int i){  convertInt(sb,i);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.SINGLETON___SINGLETON_1:    setSingleton_1((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Element removeElementFromRegistry(String hashcode){  registry.remove(hashcode);  registryList.removeElement(hashcode);  return (this);}  }
class C{  private void makeRulesCompatible(){switch (startMode) {case DOM_MODE:    startDay=1 + (startDay / 7);  startDayOfWeek=Calendar.SUNDAY;break;case DOW_GE_DOM_MODE:if (startDay != 1) {startDay=1 + (startDay / 7);}break;case DOW_LE_DOM_MODE:if (startDay >= 30) {startDay=-1;} else {startDay=1 + (startDay / 7);}break;}switch (endMode) {case DOM_MODE:endDay=1 + (endDay / 7);endDayOfWeek=Calendar.SUNDAY;break;case DOW_GE_DOM_MODE:if (endDay != 1) {endDay=1 + (endDay / 7);}break;case DOW_LE_DOM_MODE:if (endDay >= 30) {endDay=-1;} else {endDay=1 + (endDay / 7);}break;}switch (startTimeMode) {case UTC_TIME:startTime+=rawOffset;break;}while (startTime < 0) {startTime+=millisPerDay;startDayOfWeek=1 + ((startDayOfWeek + 5) % 7);}while (startTime >= millisPerDay) {startTime-=millisPerDay;startDayOfWeek=1 + (startDayOfWeek % 7);}switch (endTimeMode) {case UTC_TIME:endTime+=rawOffset + dstSavings;break;case STANDARD_TIME:endTime+=dstSavings;}while (endTime < 0) {endTime+=millisPerDay;endDayOfWeek=1 + ((endDayOfWeek + 5) % 7);}while (endTime >= millisPerDay) {endTime-=millisPerDay;endDayOfWeek=1 + (endDayOfWeek % 7);}}  }
class C{  protected void doLoad() throws ClassNotFoundException, IOException {  Context context=getTheContext();  if (context == null) {    return;  }  File store=sessionStore(context.getPath());  if (store == null) {    getLogger().debug("No session store file found");    return;  }  if (getLogger().isDebugEnabled()) {    getLogger().debug("Loading sessions from " + store.getAbsolutePath());  }  FileInputStream fis=null;  BufferedInputStream bis=null;  ObjectInputStream ois=null;  Loader loader=null;  ClassLoader classLoader=null;  try {    fis=new FileInputStream(store.getAbsolutePath());    bis=new BufferedInputStream(fis);    if (getTheContext() != null) {      loader=getTheContext().getLoader();    }    if (loader != null) {      classLoader=loader.getClassLoader();    }    if (classLoader != null) {      if (getLogger().isDebugEnabled()) {        getLogger().debug("Creating custom object input stream for class loader");      }      ois=new CustomObjectInputStream(bis,classLoader);    } else {      if (getLogger().isDebugEnabled()) {        getLogger().debug("Creating standard object input stream");      }      ois=new ObjectInputStream(bis);    }  } catch (  FileNotFoundException e) {    if (getLogger().isDebugEnabled()) {      getLogger().debug("No persisted data file found");    }    return;  }catch (  IOException e) {    getLogger().error("Exception loading sessions",e);    if (fis != null) {      try {        fis.close();      } catch (      IOException f) {      }    }    if (bis != null) {      try {        bis.close();      } catch (      IOException f) {      }    }    throw e;  }  try {    Integer count=(Integer)ois.readObject();    int n=count.intValue();    if (getLogger().isDebugEnabled()) {      getLogger().debug("Loading " + n + " persisted sessions");    }    for (int i=0; i < n; i++) {      StandardSession session=getNewSession();      session.readObjectData(ois);      session.setManager(this);      Region region=getSessionCache().getOperatingRegion();      DeltaSessionInterface existingSession=(DeltaSessionInterface)region.get(session.getId());      if (existingSession != null && existingSession.getLastAccessedTime() > session.getLastAccessedTime()) {        if (getLogger().isDebugEnabled()) {          getLogger().debug("Loaded session " + session.getId() + " is older than cached copy");        }        continue;      }      if (!session.isValid()) {        if (getLogger().isDebugEnabled()) {          getLogger().debug("Loaded session " + session.getId() + " is invalid");        }        continue;      }      getLogger().debug("Loading session " + session.getId());      session.activate();      add(session);    }  } catch (  ClassNotFoundException e) {    getLogger().error(e);    try {      ois.close();    } catch (    IOException f) {    }    throw e;  }catch (  IOException e) {    getLogger().error(e);    try {      ois.close();    } catch (    IOException f) {    }    throw e;  } finally {    try {      ois.close();    } catch (    IOException f) {    }    if (store.exists()) {      store.delete();    }  }}  }
class C{  public static boolean supportsDumbModeFolding(@NotNull PsiFile file){  final FileViewProvider viewProvider=file.getViewProvider();  for (  final Language language : viewProvider.getLanguages()) {    final FoldingBuilder foldingBuilder=LanguageFolding.INSTANCE.forLanguage(language);    if (foldingBuilder != null && !DumbService.isDumbAware(foldingBuilder))     return false;  }  return true;}  }
class C{  public Object instantiateChild(String beanName) throws IOException, ClassNotFoundException {  BeanContext bc=getBeanContextPeer();  return Beans.instantiate(bc.getClass().getClassLoader(),beanName,bc);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:51.087 -0500",hash_original_method="C82C5551751BCEB1A1B9782968036383",hash_generated_method="561C7F8CC940BAC2190BD2357E257E33") public MalformedServerReplyException(String message){  super(message);}  }
class C{  public void propagateSwtForeground(final Component component,final Color foreground,final boolean preserveDefaults){  assert EventQueue.isDispatchThread();  assert component != null;  ResourceConverter converter=ResourceConverter.getInstance();  java.awt.Color fg=converter.convertColor(foreground);  if (!fg.equals(component.getForeground()) || !preserveDefaults) {    component.setForeground(fg);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Type attribExpr(JCTree tree,Env<AttrContext> env){  return attribTree(tree,env,unknownExprInfo);}  }
class C{  public int resolveLevel(Binding binding){  return INACCURATE_MATCH;}  }
class C{  @Override public String toString(){  return key;}  }
class C{  public long checksum(){  return this.checksum;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(YOMI);}  }
class C{  public OutputStream openWrite(WriteOption... options){  return null;}  }
class C{  private void unsortedIntervalRemoved(ListDataEvent e){  int begin=e.getIndex0();  int end=e.getIndex1();  int nElementsRemoved=end - begin + 1;  int sortedSize=sortedModel.size();  boolean[] bElementRemoved=new boolean[sortedSize];  for (int x=sortedSize - 1; x >= 0; --x) {    SortedListEntry entry=sortedModel.get(x);    int index=entry.getIndex();    if (index > end) {      entry.setIndex(index - nElementsRemoved);    } else     if (index >= begin) {      sortedModel.remove(x);      bElementRemoved[x]=true;    }  }  for (int x=bElementRemoved.length - 1; x >= 0; --x) {    if (bElementRemoved[x]) {      fireIntervalRemoved(ListDataEvent.INTERVAL_REMOVED,x,x);    }  }}  }
class C{  public void markStatBegin(){  if (alive && lineDebugInfo) {    int line=lineMap.getLineNumber(pendingStatPos);    char cp1=(char)cp;    char line1=(char)line;    if (cp1 == cp && line1 == line)     addLineNumber(cp1,line1);  }  pendingStatPos=Position.NOPOS;}  }
class C{  public static void cleanApplicationDatas(Context context,String... filePath){  cleanInternalCache(context);  cleanExternalCache(context);  cleanDatabases(context);  cleanSharedPreferences(context);  cleanFiles(context);  for (  String fp : filePath) {    cleanCustomCache(fp);  }}  }
class C{  @Override public String toString(){  return String.format("Simulated Memory (Size: %d Bytes)",m_memory.getMemorySize());}  }
class C{  public boolean isAccessibleChildSelected(int i){  return (i == getSelectionModel().getSelectedIndex());}  }
class C{  public QDate(long year,long month,long dayOfMonth){  this(_localTimeZone);  setDate(year,month,dayOfMonth);}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  void onInsnRemoved(SsaInsn insn){  if (useList != null) {    removeFromUseList(insn,insn.getSources());  }  RegisterSpec resultReg=insn.getResult();  if (definitionList != null && resultReg != null) {    definitionList[resultReg.getReg()]=null;  }}  }
class C{  @Override public void onAction(){  onAction(ActionType.USE);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  private boolean hasCrossCheckedFlag(char flag,char[] flags,boolean matchEmpty){  return (flags.length == 0 && matchEmpty) || Arrays.binarySearch(flags,flag) >= 0;}  }
class C{  public Source<Date> withMilliseconds(long millisecondsFromEpoch){  lowerBoundGEQZero(millisecondsFromEpoch);  return Compositions.weightWithValues(Dates.withMilliSeconds(millisecondsFromEpoch),new Date(millisecondsFromEpoch));}  }
class C{  public String query(String key){  return mQueries.get(key);}  }
class C{  public Coord(double latitude,double longitude){  this(latitude,longitude,false);}  }
class C{  public static void storeBooleanAsync(SharedPreferences prefs,String key,boolean value){  SharedPreferences.Editor editor=prefs.edit();  editor.putBoolean(key,value);  editor.apply();}  }
class C{  @Override public void registerAdapterDataObserver(RecyclerView.AdapterDataObserver observer){  super.registerAdapterDataObserver(observer);  if (mFastAdapter != null) {    mFastAdapter.registerAdapterDataObserver(observer);  }}  }
class C{  public NonUniqueBusinessKeyException(String message,DomainObjectExceptionBean bean){  super(message,bean);}  }
class C{  public void show(ClasspathPagePresenter pagePresenter,ClasspathNodeInterceptor nodeInterceptor,boolean forCurrent){  this.classpathPagePresenter=pagePresenter;  this.interceptor=nodeInterceptor;  if (forCurrent) {    final Project project=appContext.getRootProject();    view.setStructure(Collections.<Node>singletonList(nodeFactory.newContainerNode(project,settingsProvider.getSettings())),interceptor);  } else {    final List<Node> nodes=new ArrayList<>();    for (    Project project : appContext.getProjects()) {      nodes.add(nodeFactory.newContainerNode(project,settingsProvider.getSettings()));    }    view.setStructure(nodes,interceptor);  }  view.show();}  }
class C{  public boolean hasNext(){  return pos + 1 < lcText.length;}  }
class C{  public static Version fromOrdinalOrCurrent(short ordinal){  if (ordinal == TOKEN_ORDINAL) {    return TOKEN;  }  final Version version;  if ((VALUES.length < ordinal + 1) || (version=VALUES[ordinal]) == null) {    return CURRENT;  }  return version;}  }
class C{  public Builder put(String key,ArrayList<File> file) throws FileNotFoundException {  if (key != null && file != null) {    mParams.put(key,file,null,null);  }  return this;}  }
class C{  public boolean check(final String event,final String param1,final String param2){  final String source=getSourceFromEventName(event);  if (source == null) {    return true;  }  if (type == null) {    return true;  }  return source.equals(type) && this.param1.equals(param1) && this.param2.endsWith(param2);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @NotNull public TrelloUser fetchUserByToken() throws Exception {  try {    final URIBuilder url=new URIBuilder(getRestApiUrl("members","me")).addParameter("fields",TrelloUser.REQUIRED_FIELDS);    return ObjectUtils.assertNotNull(makeRequestAndDeserializeJsonResponse(url.build(),TrelloUser.class));  } catch (  Exception e) {    LOG.warn("Error while fetching initial user info",e);    myCurrentBoard=null;    myCurrentList=null;    throw e;  }}  }
class C{  @Override public void send(HandshakeIODataStream out){  if (exchange_keys.length != 0) {    if (!isRSA || isTLS) {      out.writeUint16(exchange_keys.length);    }    out.write(exchange_keys);  }}  }
class C{  public java.lang.StringBuffer append(int i){  return null;}  }
class C{  public void startSpan(SpanBuilder spanBuilder,SpanContext context,String id){  if (context != null) {    spanBuilder.asChildOf(context);  }  doStartSpan(spanBuilder,id);}  }
class C{  public FitWidthImageView(Context paramContext,AttributeSet paramAttributeSet,int paramInt){  super(paramContext,paramAttributeSet,paramInt);}  }
class C{  public void scan(){  Log.i("Manager: Bluetooth scanning requested.");  if (!handleBluetoothErrors()) {    startScanning();  } else   Log.i("Manager: Unable to initiate Bluetooth scanning, an error occurred.");}  }
class C{  public void discardUpstreamSamples(int discardFromIndex){  totalBytesWritten=infoQueue.discardUpstreamSamples(discardFromIndex);  dropUpstreamFrom(totalBytesWritten);}  }
class C{  public static Border createImageBorder(Image top,Image bottom,Image left,Image right,Image topLeft,Image topRight,Image bottomLeft,Image bottomRight,Image background){  Border b=new Border();  b.type=TYPE_IMAGE;  b.images=new Image[]{top,bottom,left,right,topLeft,topRight,bottomLeft,bottomRight,background};  return b;}  }
class C{  public Object clone(){  ExtendedPKIXBuilderParameters params=null;  try {    params=new ExtendedPKIXBuilderParameters(getTrustAnchors(),getTargetConstraints());  } catch (  Exception e) {    throw new RuntimeException(e.getMessage());  }  params.setParams(this);  return params;}  }
class C{  public void accept() throws Exception {  accept(true);}  }
class C{  public Builder rootCa(Certificate rootCa){  this.rootCa=rootCa;  return this;}  }
class C{  public XBLOMImportElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @SuppressWarnings("MagicNumber") static char[] escape(int cp){  if (cp < SAFE_OCTETS.length && SAFE_OCTETS[cp]) {    return null;  } else   if (cp == ' ') {    return PLUS_SIGN;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  public void calculateQuantityToSupply(BigDecimal reorderQuantity,BigDecimal minimumStock,ListIterator<GenericValue> listIterIEP){  if (quantity.compareTo(reorderQuantity) < 0) {    quantity=reorderQuantity;  }}  }
class C{  public static double REWSRmaxFitness(boolean useTrainingData,GEPIndividual ind){  int len=(useTrainingData ? GEPDependentVariable.trainingData.getDependentVariableValues().length : GEPDependentVariable.testingData.getDependentVariableValues().length);  return (len * REWSRrange);}  }
class C{  public static boolean resourceExists(final String path){  final String path_=normalisePath(path);  final URL url=DSSUtils.class.getResource(path_);  return url != null;}  }
class C{  public T remove(ServletRequest request,Map<String,Object> expandContext){  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);  return aa.remove(request);}  }
class C{  InterfaceAddress(Inet4Address address,Inet4Address broadcastAddress,Inet4Address mask){  this.address=address;  this.broadcastAddress=broadcastAddress;  this.prefixLength=countPrefixLength(mask);}  }
class C{  public Assignment(Set<Entry<String,Value>> entries){  this();  for (  Entry<String,Value> entry : entries) {    addPair(entry.getKey(),entry.getValue());  }}  }
class C{  public void stopSpinning(){  isSpinning=false;  progress=0;  postInvalidate();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public static void cancelAction(String requestId){  getManager().cancel(requestId);}  }
class C{  public MapTileMaker(Layer[] layers,ImageFormatter formatter){  super(layers,formatter);}  }
class C{  public void complete(@NonNull ServiceRequestResult result){synchronized (this) {    if (mStatus.equals(Status.IN_PROGRESS)) {      try {        final int requestType=mInfo.getRequestType();switch (requestType) {case RequestInfo.TYPE_WEATHER_BY_GEO_LOCATION_REQ:case RequestInfo.TYPE_WEATHER_BY_WEATHER_LOCATION_REQ:          if (result.getWeatherInfo() == null) {            throw new IllegalStateException("The service request result doesn't" + " contain a valid WeatherInfo object");          }        mClient.setServiceRequestState(mInfo,result,CMWeatherManager.RequestStatus.COMPLETED);      break;case RequestInfo.TYPE_LOOKUP_CITY_NAME_REQ:    if (result.getLocationLookupList() == null || result.getLocationLookupList().size() <= 0) {      mClient.setServiceRequestState(mInfo,null,CMWeatherManager.RequestStatus.NO_MATCH_FOUND);    } else {      mClient.setServiceRequestState(mInfo,result,CMWeatherManager.RequestStatus.COMPLETED);    }  break;}} catch (RemoteException e) {}mStatus=Status.COMPLETED;}}}  }
class C{  private static void run(Recurrence recur,DateValue start,TimeZone tz,DateValue[] expected){  run(recur,start,tz,null,expected);}  }
class C{  public static boolean isIdent(String str){  return null != identHashTable.get(str);}  }
class C{  public boolean hasInvoices(){  boolean retValue=false;  String sql="SELECT COUNT(*) FROM C_DunningRunLine WHERE C_DunningRunEntry_ID=? AND C_Invoice_ID IS NOT NULL";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,get_ID());    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      if (rs.getInt(1) > 0)       retValue=true;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  return retValue;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String toStringLong(){  StringBuffer sb=new StringBuffer("CConnection[");  sb.append("name=").append(m_name).append(",AppsHost=").append(m_apps_host).append(",AppsPort=").append(m_apps_port).append(",type=").append(m_type).append(",DBhost=").append(m_db_host).append(",DBport=").append(m_db_port).append(",DBname=").append(m_db_name).append(",BQ=").append(m_bequeath).append(",FW=").append(m_firewall).append(",FWhost=").append(m_fw_host).append(",FWport=").append(m_fw_port).append(",UID=").append(m_db_uid).append(",PWD=").append(m_db_pwd);  sb.append("]");  return sb.toString();}  }
class C{  public static File[] convertFileCollectionToFileArray(Collection<File> files){  return files.toArray(new File[files.size()]);}  }
class C{  public void testWithVoiceAsWav(){  final InputStream is=service.synthesize(text,Voice.EN_LISA,AudioFormat.WAV).execute();  assertNotNull(is);  try {    writeInputStreamToOutputStream(is,new FileOutputStream("target/output.wav"));  } catch (  final FileNotFoundException e) {    Assert.fail(e.getMessage());  }}  }
class C{  public static SubjectKeyIdentifier decode(byte[] encoding) throws IOException {  SubjectKeyIdentifier res=new SubjectKeyIdentifier((byte[])ASN1OctetString.getInstance().decode(encoding));  res.encoding=encoding;  return res;}  }
class C{  public void putValue(String key,Object newValue){  Object oldValue=null;  if (key == "enabled") {    if (newValue == null || !(newValue instanceof Boolean)) {      newValue=false;    }    oldValue=enabled;    enabled=(Boolean)newValue;  } else {    if (arrayTable == null) {      arrayTable=new ArrayTable();    }    if (arrayTable.containsKey(key))     oldValue=arrayTable.get(key);    if (newValue == null) {      arrayTable.remove(key);    } else {      arrayTable.put(key,newValue);    }  }  firePropertyChange(key,oldValue,newValue);}  }
class C{  public Object remove() throws ForceReattemptException {  Object key=this.eventSeqNumQueue.remove();  if (key != null) {    destroyKey(key);  }  return key;}  }
class C{  protected void parseArguments(final String... args){  try {    parseCommand(args);    parseMemberName(args);    final OptionSet options=getParser().parse(args);    setDebug(options.has("debug"));    setForce(options.has("force"));    setHelp(options.has("help"));    setRedirectOutput(options.has("redirect-output"));    if (!isHelping()) {      if (options.has("bind-address")) {        setBindAddress(ObjectUtils.toString(options.valueOf("bind-address")));      }      if (options.has("dir")) {        setWorkingDirectory(ObjectUtils.toString(options.valueOf("dir")));      }      if (options.has("hostname-for-clients")) {        setHostnameForClients(ObjectUtils.toString(options.valueOf("hostname-for-clients")));      }      if (options.has("pid")) {        setPid((Integer)options.valueOf("pid"));      }      if (options.has("port")) {        setPort((Integer)options.valueOf("port"));      }      if (options.has("version")) {        setCommand(Command.VERSION);      }    }  } catch (  OptionException e) {    throw new IllegalArgumentException(LocalizedStrings.Launcher_Builder_PARSE_COMMAND_LINE_ARGUMENT_ERROR_MESSAGE.toLocalizedString("Locator",e.getMessage()),e);  }catch (  Exception e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public PatternFilenameFilter(Pattern pattern){  this.pattern=Preconditions.checkNotNull(pattern);}  }
class C{  public ConcurrentWriteLockedOffHeapHashMap(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory){  super(new WriteLockedOffHeapHashMapFactory<K,V>(tableSource,storageEngineFactory));}  }
class C{  final public boolean isKeys(){  return true;}  }
class C{  public DateTimeFormatterBuilder appendClockhourOfHalfday(int minDigits){  return appendDecimal(DateTimeFieldType.clockhourOfHalfday(),minDigits,2);}  }
class C{  @Override public void onPageSelected(int position){  mIndexOfPager=position;}  }
class C{  private void createSceneSSBO(){  this.trianglesSsbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,trianglesSsbo);  ByteBuffer ssboData=BufferUtils.createByteBuffer(4 * (4) * mesh.numVertices);  FloatBuffer fv=ssboData.asFloatBuffer();  for (int i=0; i < mesh.numVertices; i++) {    float x=mesh.positions.get(3 * i + 0);    float y=mesh.positions.get(3 * i + 1);    float z=mesh.positions.get(3 * i + 2);    fv.put(x).put(y).put(z).put(0.0f);  }  glBufferData(GL_ARRAY_BUFFER,ssboData,GL_STATIC_DRAW);  glBindBuffer(GL_ARRAY_BUFFER,0);  this.objectsSsbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,objectsSsbo);  DynamicByteBuffer objectsBuffer=new DynamicByteBuffer();  List<GPUObject> objects=new ArrayList<GPUObject>();  for (  MeshObject o : mesh.objects) {    GPUObject obj=new GPUObject();    obj.min=o.min;    obj.max=o.max;    obj.first=o.first;    obj.count=o.count;    objects.add(obj);  }  Std430Writer.write(objects,GPUObject.class,objectsBuffer);  objectsBuffer.flip();  glBufferData(GL_ARRAY_BUFFER,objectsBuffer.bb,GL_STATIC_DRAW);  glBindBuffer(GL_ARRAY_BUFFER,0);}  }
class C{  public static <T>BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass){  BeanPropertyRowMapper<T> newInstance=new BeanPropertyRowMapper<T>();  newInstance.setMappedClass(mappedClass);  return newInstance;}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  public static <K,V>void writeMap(BinaryRawWriterEx writer,Map<K,V> map,@Nullable PlatformWriterBiClosure<K,V> writeClo){  assert map != null;  writer.writeInt(map.size());  if (writeClo == null) {    for (    Map.Entry<K,V> entry : map.entrySet()) {      writer.writeObject(entry.getKey());      writer.writeObject(entry.getValue());    }  } else {    for (    Map.Entry<K,V> entry : map.entrySet())     writeClo.write(writer,entry.getKey(),entry.getValue());  }}  }
class C{  public static long nextId(){  return CNTR.incrementAndGet();}  }
class C{  private static int generateLocalUdpPort(int portBase){  int resp=-1;  int port=portBase;  while ((resp == -1) && (port < Integer.MAX_VALUE)) {    if (isLocalUdpPortFree(port)) {      resp=port;    } else {      port+=2;    }  }  return resp;}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.STRING_LITERAL___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public LauncherScroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  mInterpolator=interpolator;  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;  mPhysicalCoeff=computeDeceleration(0.84f);}  }
class C{  public PdfRendererBuilder usePdfVersion(float version){  this._pdfVersion=version;  return this;}  }
class C{  public void test_addSubjectAlternativeNameLintLbyte_array() throws IOException {  int[] types={GeneralName.OTHER_NAME,GeneralName.RFC822_NAME,GeneralName.DNS_NAME,GeneralName.X400_ADDR,GeneralName.DIR_NAME,GeneralName.EDIP_NAME,GeneralName.UR_ID,GeneralName.IP_ADDR,GeneralName.REG_ID};  for (int i=0; i < types.length; i++) {    try {      new X509CertSelector().addSubjectAlternativeName(types[i],(byte[])null);      fail("No expected NullPointerException for type: " + types[i]);    } catch (    NullPointerException expected) {    }  }}  }
class C{  public static byte[] tauAdicWNaf(byte mu,ZTauElement lambda,byte width,BigInteger pow2w,BigInteger tw,ZTauElement[] alpha){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 + width : 34 + width;  byte[] u=new byte[maxLength];  BigInteger pow2wMin1=pow2w.shiftRight(1);  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  int i=0;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      BigInteger uUnMod=r0.add(r1.multiply(tw)).mod(pow2w);      byte uLocal;      if (uUnMod.compareTo(pow2wMin1) >= 0) {        uLocal=(byte)uUnMod.subtract(pow2w).intValue();      } else {        uLocal=(byte)uUnMod.intValue();      }      u[i]=uLocal;      boolean s=true;      if (uLocal < 0) {        s=false;        uLocal=(byte)-uLocal;      }      if (s) {        r0=r0.subtract(alpha[uLocal].u);        r1=r1.subtract(alpha[uLocal].v);      } else {        r0=r0.add(alpha[uLocal].u);        r1=r1.add(alpha[uLocal].v);      }    } else {      u[i]=0;    }    BigInteger t=r0;    if (mu == 1) {      r0=r1.add(r0.shiftRight(1));    } else {      r0=r1.subtract(r0.shiftRight(1));    }    r1=t.shiftRight(1).negate();    i++;  }  return u;}  }
class C{  public void align(int incr){  if (alive)   while (cp % incr != 0)   emitop0(nop);}  }
class C{  @CheckReturnValue @Nonnull static public String arrayToString(@Nonnull byte[] v){  StringBuilder retval=new StringBuilder();  boolean first=true;  for (  byte e : v) {    if (!first) {      retval.append(',');    }    first=false;    retval.append('[');    retval.append(e);    retval.append(']');  }  return new String(retval);}  }
class C{  public File file(final String child){  return new File(mOutputDir,child);}  }
class C{  public void addArg(final int index,final BOp newArg){  if (newArg == null)   throw new IllegalArgumentException();  if (newArg == this)   throw new IllegalArgumentException();  args.add(index,newArg);  mutation();}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  public DynamicValidationRefactoringChange(final JavaRefactoringDescriptor descriptor,final String name){  super(name);  Assert.isNotNull(descriptor);  fDescriptor=descriptor;}  }
class C{  protected void init(){  setVague(true);  setTraverseMode(LAST_ADDED_ON_TOP);  setConnectParts(true);}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info(toString());  StringBuffer info=new StringBuffer();  boolean fromPOS=false;  if (getC_Order_ID() > 0) {    fromPOS=getC_Order().getC_POS_ID() > 0;  }  if (PAYMENTRULE_Cash.equals(getPaymentRule()) && !fromPOS) {    MCash cash;    int posId=Env.getContextAsInt(getCtx(),Env.POS_ID);    if (posId != 0) {      MPOS pos=new MPOS(getCtx(),posId,get_TrxName());      int cashBookId=pos.getC_CashBook_ID();      cash=MCash.get(getCtx(),cashBookId,getDateInvoiced(),get_TrxName());    } else {      cash=MCash.get(getCtx(),getAD_Org_ID(),getDateInvoiced(),getC_Currency_ID(),get_TrxName());    }    if (cash == null || cash.get_ID() == 0) {      m_processMsg="@NoCashBook@";      return DocAction.STATUS_Invalid;    }    MCashLine cl=new MCashLine(cash);    cl.setInvoice(this);    if (!cl.save(get_TrxName())) {      m_processMsg="Could not save Cash Journal Line";      return DocAction.STATUS_Invalid;    }    info.append("@C_Cash_ID@: " + cash.getName() + " #"+ cl.getLine());    setC_CashLine_ID(cl.getC_CashLine_ID());  }  int matchInv=0;  int matchPO=0;  MInvoiceLine[] lines=getLines(false);  for (int i=0; i < lines.length; i++) {    MInvoiceLine line=lines[i];    MOrderLine ol=null;    if (line.getC_OrderLine_ID() != 0) {      if (isSOTrx() || line.getM_Product_ID() == 0) {        ol=new MOrderLine(getCtx(),line.getC_OrderLine_ID(),get_TrxName());        if (line.getQtyInvoiced() != null)         ol.setQtyInvoiced(ol.getQtyInvoiced().add(line.getQtyInvoiced()));        if (!ol.save(get_TrxName())) {          m_processMsg="Could not update Order Line";          return DocAction.STATUS_Invalid;        }      } else       if (!isSOTrx() && line.getM_Product_ID() != 0 && !isReversal()) {        BigDecimal matchQty=line.getQtyInvoiced();        MMatchPO po=MMatchPO.create(line,null,getDateInvoiced(),matchQty);        boolean isNewMatchPO=false;        if (po.get_ID() == 0)         isNewMatchPO=true;        if (!po.save(get_TrxName())) {          m_processMsg="Could not create PO Matching";          return DocAction.STATUS_Invalid;        }        matchPO++;        if (isNewMatchPO)         addDocsPostProcess(po);      }    }    if (line.getM_RMALine_ID() != 0) {      MRMALine rmaLine=new MRMALine(getCtx(),line.getM_RMALine_ID(),get_TrxName());      if (rmaLine.getQtyInvoiced() != null)       rmaLine.setQtyInvoiced(rmaLine.getQtyInvoiced().add(line.getQtyInvoiced())); else       rmaLine.setQtyInvoiced(line.getQtyInvoiced());      if (!rmaLine.save(get_TrxName())) {        m_processMsg="Could not update RMA Line";        return DocAction.STATUS_Invalid;      }    }    if (!isSOTrx() && line.getM_InOutLine_ID() != 0 && line.getM_Product_ID() != 0 && !isReversal()) {      MInOutLine receiptLine=new MInOutLine(getCtx(),line.getM_InOutLine_ID(),get_TrxName());      BigDecimal matchQty=line.getQtyInvoiced();      if (receiptLine.getMovementQty().compareTo(matchQty) < 0)       matchQty=receiptLine.getMovementQty();      MMatchInv inv=new MMatchInv(line,getDateInvoiced(),matchQty);      boolean isNewMatchInv=false;      if (inv.get_ID() == 0)       isNewMatchInv=true;      if (!inv.save(get_TrxName())) {        m_processMsg=CLogger.retrieveErrorString("Could not create Invoice Matching");        return DocAction.STATUS_Invalid;      }      matchInv++;      if (isNewMatchInv)       addDocsPostProcess(inv);    }  }  if (matchInv > 0)   info.append(" @M_MatchInv_ID@#").append(matchInv).append(" ");  if (matchPO > 0)   info.append(" @M_MatchPO_ID@#").append(matchPO).append(" ");  MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());  BigDecimal invAmt=MConversionRate.convertBase(getCtx(),getGrandTotal(true),getC_Currency_ID(),getDateAcct(),getC_ConversionType_ID(),getAD_Client_ID(),getAD_Org_ID());  if (invAmt == null) {    m_processMsg="Could not convert C_Currency_ID=" + getC_Currency_ID() + " to base C_Currency_ID="+ MClient.get(Env.getCtx()).getC_Currency_ID();    return DocAction.STATUS_Invalid;  }  BigDecimal newBalance=bp.getTotalOpenBalance(false);  if (newBalance == null)   newBalance=Env.ZERO;  if (isSOTrx()) {    newBalance=newBalance.add(invAmt);    if (bp.getFirstSale() == null)     bp.setFirstSale(getDateInvoiced());    BigDecimal newLifeAmt=bp.getActualLifeTimeValue();    if (newLifeAmt == null)     newLifeAmt=invAmt; else     newLifeAmt=newLifeAmt.add(invAmt);    BigDecimal newCreditAmt=bp.getSO_CreditUsed();    if (newCreditAmt == null)     newCreditAmt=invAmt; else     newCreditAmt=newCreditAmt.add(invAmt);    log.fine("GrandTotal=" + getGrandTotal(true) + "("+ invAmt+ ") BP Life="+ bp.getActualLifeTimeValue()+ "->"+ newLifeAmt+ ", Credit="+ bp.getSO_CreditUsed()+ "->"+ newCreditAmt+ ", Balance="+ bp.getTotalOpenBalance(false)+ " -> "+ newBalance);    bp.setActualLifeTimeValue(newLifeAmt);    bp.setSO_CreditUsed(newCreditAmt);  } else {    newBalance=newBalance.subtract(invAmt);    log.fine("GrandTotal=" + getGrandTotal(true) + "("+ invAmt+ ") Balance="+ bp.getTotalOpenBalance(false)+ " -> "+ newBalance);  }  bp.setTotalOpenBalance(newBalance);  bp.setSOCreditStatus();  if (!bp.save(get_TrxName())) {    m_processMsg="Could not update Business Partner";    return DocAction.STATUS_Invalid;  }  if (getAD_User_ID() != 0) {    MUser user=new MUser(getCtx(),getAD_User_ID(),get_TrxName());    user.setLastContact(new Timestamp(System.currentTimeMillis()));    user.setLastResult(Msg.translate(getCtx(),"C_Invoice_ID") + ": " + getDocumentNo());    if (!user.save(get_TrxName())) {      m_processMsg="Could not update Business Partner User";      return DocAction.STATUS_Invalid;    }  }  if (isSOTrx() && getC_Project_ID() != 0) {    MProject project=new MProject(getCtx(),getC_Project_ID(),get_TrxName());    BigDecimal amt=getGrandTotal(true);    int C_CurrencyTo_ID=project.getC_Currency_ID();    if (C_CurrencyTo_ID != getC_Currency_ID())     amt=MConversionRate.convert(getCtx(),amt,getC_Currency_ID(),C_CurrencyTo_ID,getDateAcct(),0,getAD_Client_ID(),getAD_Org_ID());    if (amt == null) {      m_processMsg="Could not convert C_Currency_ID=" + getC_Currency_ID() + " to Project C_Currency_ID="+ C_CurrencyTo_ID;      return DocAction.STATUS_Invalid;    }    BigDecimal newAmt=project.getInvoicedAmt();    if (newAmt == null)     newAmt=amt; else     newAmt=newAmt.add(amt);    log.fine("GrandTotal=" + getGrandTotal(true) + "("+ amt+ ") Project "+ project.getName()+ " - Invoiced="+ project.getInvoicedAmt()+ "->"+ newAmt);    project.setInvoicedAmt(newAmt);    if (!project.save(get_TrxName())) {      m_processMsg="Could not update Project";      return DocAction.STATUS_Invalid;    }  }  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  MInvoice counter=createCounterDoc();  if (counter != null)   info.append(" - @CounterDoc@: @C_Invoice_ID@=").append(counter.getDocumentNo());  m_processMsg=info.toString().trim();  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public Neuron(final Network parent,final NeuronUpdateRule updateRule){  this.parent=parent;  setUpdateRule(updateRule);}  }
class C{  void imtql2(int nm,int n,double d[],double e[],double z[]){  int index, nnm, j, last, l, m, i, k, iteration;  boolean convergence, underflow;  double b, test, g, r, s, c, p, f;  if (n == 1)   return;  ierr=0;  last=n - 1;  for (i=1; i < n; i++)   e[i - 1]=e[i];  e[last]=0.0;  nnm=n * nm;  for (l=0; l < n; l++) {    iteration=0;    while (iteration <= 30) {      for (m=l; m < n; m++) {        convergence=false;        if (m == last)         break; else {          test=fabs(d[m]) + fabs(d[m + 1]);          if (test + fabs(e[m]) == test)           convergence=true;        }        if (convergence)         break;      }      if (m != l) {        if (iteration == 30) {          ierr=l;          return;        }        p=d[l];        iteration+=1;        g=(d[l + 1] - p) / (2.0 * e[l]);        r=svd_pythag(g,1.0);        g=d[m] - p + e[l] / (g + svd_fsign(r,g));        s=1.0;        c=1.0;        p=0.0;        underflow=false;        i=m - 1;        while (underflow == false && i >= l) {          f=s * e[i];          b=c * e[i];          r=svd_pythag(f,g);          e[i + 1]=r;          if (r == 0.0)           underflow=true; else {            s=f / r;            c=g / r;            g=d[i + 1] - p;            r=(d[i] - g) * s + 2.0 * c * b;            p=s * r;            d[i + 1]=g + p;            g=c * r - b;            for (k=0; k < nnm; k+=n) {              index=k + i;              f=z[index + 1];              z[index + 1]=s * z[index] + c * f;              z[index]=c * z[index] - s * f;            }            i--;          }        }        if (underflow) {          d[i + 1]-=p;          e[m]=0.0;        } else {          d[l]-=p;          e[l]=g;          e[m]=0.0;        }      } else       break;    }  }  for (l=1; l < n; l++) {    i=l - 1;    k=i;    p=d[i];    for (j=l; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      for (j=0; j < nnm; j+=n) {        p=z[j + i];        z[j + i]=z[j + k];        z[j + k]=p;      }    }  }  return;}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  checkKeySize(key,fixedKeySize);  core.init(opmode,key,params,random);}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return toSVG((TexturePaint)gc.getPaint());}  }
class C{  protected Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  this.tag=tag;  this.settings=new Settings();  return settings;}  }
class C{  public boolean hasMethod(final String owner,final String methodName,final String methodDescriptor,final int opcode){  Type[] types=Type.getArgumentTypes(methodDescriptor);  if (opcode == Opcodes.INVOKEVIRTUAL || opcode == Opcodes.INVOKEINTERFACE) {    Type[] newTypes=new Type[types.length + 1];    newTypes[0]=Type.getType("L" + owner + ";");    System.arraycopy(types,0,newTypes,1,types.length);    types=newTypes;  }  outer_loop:   for (  Method m : class_.getDeclaredMethods()) {    final Type[] methodTypes=Type.getArgumentTypes(m);    if (!m.getName().equals(methodName) || methodTypes.length != types.length) {      continue;    }    for (int i=0; i < types.length; ++i) {      if (!types[i].equals(methodTypes[i])) {        continue outer_loop;      }    }    return true;  }  return false;}  }
class C{  public void add(IoServiceListener listener){  if (listener != null) {    listeners.add(listener);  }}  }
class C{  public static void main(String[] args){  Traveler cal=new Traveler("Not-quite-lava-proof Cal",3);  digForTreasure(cal);  digForTreasure(cal);  fallToCenterOfTheEarth(cal);  digForTreasure(cal);  cal.endJourney();}  }
class C{  private static void findAllVirtualArraysForRPSiteArray(DbClient dbClient,RPSiteArray siteArray,Collection<URI> ids){  if (siteArray != null) {    URIQueryResultList storagePoolURIs=new URIQueryResultList();    dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePoolConstraint(siteArray.getStorageSystem()),storagePoolURIs);    Iterator<URI> storagePoolIter=storagePoolURIs.iterator();    while (storagePoolIter.hasNext()) {      URI storagePoolURI=storagePoolIter.next();      StoragePool storagePool=dbClient.queryObject(StoragePool.class,storagePoolURI);      if (storagePool != null && !storagePool.getInactive() && storagePool.getConnectedVirtualArrays() != null) {        for (        String vArrayId : storagePool.getConnectedVirtualArrays()) {          ids.add(URI.create(vArrayId));        }      }    }    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,siteArray.getStorageSystem());    if (storageSystem != null && isAVPlex(storageSystem)) {      Map<URI,List<StoragePort>> storagePortMap=ConnectivityUtil.getStoragePortsOfType(dbClient,storageSystem.getId(),PortType.frontend);      for (      Map.Entry<URI,List<StoragePort>> storagePortEntry : storagePortMap.entrySet()) {        for (        StoragePort storagePort : storagePortEntry.getValue()) {          if (storagePort.getConnectedVirtualArrays() != null && !storagePort.getConnectedVirtualArrays().isEmpty() && !ids.containsAll(URIUtil.toURIList(storagePort.getConnectedVirtualArrays()))) {            _log.info(String.format("Vplex System [%s] has connectvity to RP Site [%s]",storageSystem.getLabel(),siteArray.getRpSiteName()));            ids.addAll(URIUtil.toURIList(storagePort.getConnectedVirtualArrays()));          }          if (storagePort.getAssignedVirtualArrays() != null && !storagePort.getAssignedVirtualArrays().isEmpty() && !ids.containsAll(URIUtil.toURIList(storagePort.getAssignedVirtualArrays()))) {            _log.info(String.format("Vplex System [%s] has connectvity to RP Site [%s]",storageSystem.getLabel(),siteArray.getRpSiteName()));            ids.addAll(URIUtil.toURIList(storagePort.getAssignedVirtualArrays()));          }        }      }    }  }}  }
class C{  private <T>List<T> runOne(final Callable<T> task,final long timeout,final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {  final Future<T> f=getThreadPool().submit(task);  final T t=f.get(timeout,unit);  return Collections.singletonList(t);}  }
class C{  public void addFavorite(Emoticon emote){  favorites.put(createFavorite(emote),emote);}  }
class C{  private MarkupContainer createPositiveResultFragment(){  info(getLocalizer().getString(POSITIVE_PAYMENT_NOTES,this));  return new Fragment(RESULT_CONTAINER,POSITIVE_RESULT_FRAGMENT,this);}  }
class C{  private static InetAddress[] lookupHostByName(String host) throws UnknownHostException {  BlockGuard.getThreadPolicy().onNetwork();  Object cachedResult=addressCache.get(host);  if (cachedResult != null) {    if (cachedResult instanceof InetAddress[]) {      return (InetAddress[])cachedResult;    } else {      throw new UnknownHostException((String)cachedResult);    }  }  try {    StructAddrinfo hints=new StructAddrinfo();    hints.ai_flags=AI_ADDRCONFIG;    hints.ai_family=AF_UNSPEC;    hints.ai_socktype=SOCK_STREAM;    InetAddress[] addresses=Libcore.os.getaddrinfo(host,hints);    for (    InetAddress address : addresses) {      address.hostName=host;    }    addressCache.put(host,addresses);    return addresses;  } catch (  GaiException gaiException) {    if (gaiException.getCause() instanceof ErrnoException) {      if (((ErrnoException)gaiException.getCause()).errno == EACCES) {        throw new SecurityException("Permission denied (missing INTERNET permission?)",gaiException);      }    }    String detailMessage="Unable to resolve host \"" + host + "\": "+ Libcore.os.gai_strerror(gaiException.error);    addressCache.putUnknownHost(host,detailMessage);    throw gaiException.rethrowAsUnknownHostException(detailMessage);  }}  }
class C{  public void removeSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.remove(renderer);}  }
class C{  void putEntry(GlowBanEntry entry){  entryMap.put(entry.getTarget(),entry.clone());  save();}  }
class C{  public static ITypeBinding normalizeWildcardType(ITypeBinding wildcardType,boolean isBindingToAssign,AST ast){  ITypeBinding bound=wildcardType.getBound();  if (isBindingToAssign) {    if (bound == null || !wildcardType.isUpperbound()) {      ITypeBinding[] typeBounds=wildcardType.getTypeBounds();      if (typeBounds.length > 0) {        return typeBounds[0];      } else {        return wildcardType.getErasure();      }    }  } else {    if (bound == null || wildcardType.isUpperbound()) {      return null;    }  }  return bound;}  }
class C{  private boolean isHostModeOptionSupported(String hostType){  return hostType.equalsIgnoreCase(Host.HostType.Windows.name()) || hostType.equalsIgnoreCase(Host.HostType.Linux.name()) || hostType.equalsIgnoreCase(Host.HostType.AIX.name())|| hostType.equalsIgnoreCase(Host.HostType.Esx.name())|| hostType.equalsIgnoreCase(Host.HostType.HPUX.name());}  }
class C{  public RendererChangeEvent(Object renderer){  this(renderer,false);}  }
class C{  public SafeCalendar createdAt(){  return createdAt;}  }
class C{  public void phoneStateChanged(int numActive,int numHeld,int callState,String number,int type){  if (mService != null && isEnabled()) {    try {      mService.phoneStateChanged(numActive,numHeld,callState,number,type);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }}  }
class C{  public JavaDocContext(TemplateContextType type,Document document,Position completionPosition,CompilationUnit compilationUnit){  super(type,document,completionPosition,compilationUnit);}  }
class C{  public void addGraphic(OMGraphic g){  this.geometry.add((OMGeometry)g);  drawingAttributes.setTo(g);}  }
class C{  public short compareDocumentPosition(Node other) throws DOMException {  return 0;}  }
class C{  public NominatimGeocoder(String nomi_url,Integer max_point_number,Boolean bounding_box_flag){  init(nomi_url,max_point_number,bounding_box_flag);}  }
class C{  synchronized public static void unregister(final EventBusListener listener){  for (  final List<EventBusListener> list : map.values()) {    list.remove(listener);  }}  }
class C{  public static OutputLimitSpec buildOutputLimitSpec(CommonTokenStream tokenStream,EsperEPL2GrammarParser.OutputLimitContext ctx,Map<Tree,ExprNode> astExprNodeMap,VariableService variableService,String engineURI,TimeProvider timeProvider,ExprEvaluatorContext exprEvaluatorContext){  OutputLimitLimitType displayLimit=OutputLimitLimitType.DEFAULT;  if (ctx.k != null) {switch (ctx.k.getType()) {case EsperEPL2GrammarParser.FIRST:      displayLimit=OutputLimitLimitType.FIRST;    break;case EsperEPL2GrammarParser.LAST:  displayLimit=OutputLimitLimitType.LAST;break;case EsperEPL2GrammarParser.SNAPSHOT:displayLimit=OutputLimitLimitType.SNAPSHOT;break;case EsperEPL2GrammarParser.ALL:displayLimit=OutputLimitLimitType.ALL;break;default :throw ASTWalkException.from("Encountered unrecognized token " + ctx.k.getText(),tokenStream,ctx);}}String variableName=null;Double rate=null;ExprNode whenExpression=null;List<ExprNode> crontabScheduleSpec=null;List<OnTriggerSetAssignment> thenExpressions=null;ExprTimePeriod timePeriodExpr=null;OutputLimitRateType rateType;ExprNode andAfterTerminateExpr=null;List<OnTriggerSetAssignment> andAfterTerminateSetExpressions=null;if (ctx.t != null) {rateType=OutputLimitRateType.TERM;if (ctx.expression() != null) {andAfterTerminateExpr=ASTExprHelper.exprCollectSubNodes(ctx.expression(),0,astExprNodeMap).get(0);}if (ctx.onSetExpr() != null) {andAfterTerminateSetExpressions=ASTExprHelper.getOnTriggerSetAssignments(ctx.onSetExpr().onSetAssignmentList(),astExprNodeMap);}} else if (ctx.wh != null) {rateType=OutputLimitRateType.WHEN_EXPRESSION;whenExpression=ASTExprHelper.exprCollectSubNodes(ctx.expression(),0,astExprNodeMap).get(0);if (ctx.onSetExpr() != null) {thenExpressions=ASTExprHelper.getOnTriggerSetAssignments(ctx.onSetExpr().onSetAssignmentList(),astExprNodeMap);}} else if (ctx.at != null) {rateType=OutputLimitRateType.CRONTAB;crontabScheduleSpec=ASTExprHelper.exprCollectSubNodes(ctx.crontabLimitParameterSet(),0,astExprNodeMap);} else {if (ctx.ev != null) {rateType=ctx.e != null ? OutputLimitRateType.EVENTS : OutputLimitRateType.TIME_PERIOD;if (ctx.i != null) {variableName=ctx.i.getText();} else if (ctx.timePeriod() != null) {timePeriodExpr=(ExprTimePeriod)ASTExprHelper.exprCollectSubNodes(ctx.timePeriod(),0,astExprNodeMap).get(0);} else {ASTExprHelper.exprCollectSubNodes(ctx.number(),0,astExprNodeMap);rate=Double.parseDouble(ctx.number().getText());}} else {rateType=OutputLimitRateType.AFTER;}}ExprTimePeriod afterTimePeriodExpr=null;Integer afterNumberOfEvents=null;if (ctx.outputLimitAfter() != null) {if (ctx.outputLimitAfter().timePeriod() != null) {ExprNode expression=ASTExprHelper.exprCollectSubNodes(ctx.outputLimitAfter(),0,astExprNodeMap).get(0);afterTimePeriodExpr=(ExprTimePeriod)expression;} else {Object constant=ASTConstantHelper.parse(ctx.outputLimitAfter().number());afterNumberOfEvents=((Number)constant).intValue();}}boolean andAfterTerminate=false;if (ctx.outputLimitAndTerm() != null) {andAfterTerminate=true;if (ctx.outputLimitAndTerm().expression() != null) {andAfterTerminateExpr=ASTExprHelper.exprCollectSubNodes(ctx.outputLimitAndTerm().expression(),0,astExprNodeMap).get(0);}if (ctx.outputLimitAndTerm().onSetExpr() != null) {andAfterTerminateSetExpressions=ASTExprHelper.getOnTriggerSetAssignments(ctx.outputLimitAndTerm().onSetExpr().onSetAssignmentList(),astExprNodeMap);}}return new OutputLimitSpec(rate,variableName,rateType,displayLimit,whenExpression,thenExpressions,crontabScheduleSpec,timePeriodExpr,afterTimePeriodExpr,afterNumberOfEvents,andAfterTerminate,andAfterTerminateExpr,andAfterTerminateSetExpressions);}  }
class C{  public double editDistanceSecond(){  return 1.0 - (1.0 * editOperationsSecond() / editOperationsBaseline());}  }
class C{  public void paintViewportBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean conflictsWith(EnchantmentType enchantment){  return this.isConflicting.test(enchantment);}  }
class C{  public XMLElement(){  this(null,null,null,NO_LINE);}  }
class C{  public Shape createSliderThumbDiscrete(final int x,final int y,final int w,final int h,final CornerSize size){  final double topArc=size.getRadius(w,h);  final double bottomArcH=size == CornerSize.INTERIOR ? 0 : 1;  final double bottomArcW=3;  path.reset();  path.moveTo(x,y + topArc);  path.quadTo(x,y,x + topArc,y);  path.lineTo(x + w - topArc,y);  path.quadTo(x + w,y,x + w,y + topArc);  path.lineTo(x + w,y + h / 2.0);  path.quadTo(x + w - bottomArcW,y + h - bottomArcH,x + w / 2.0,y + h);  path.quadTo(x + bottomArcW,y + h - bottomArcH,x,y + h / 2.0);  path.closePath();  return path;}  }
class C{  public static void put3ByteInt(ByteBuffer buffer,int val,int offset,ByteOrder order){  int offInc=1;  if (order == ByteOrder.BIG_ENDIAN) {    offInc=-1;    offset+=2;  }  buffer.put(offset,(byte)(val & 0xFF));  buffer.put(offset + (1 * offInc),(byte)((val >>> 8) & 0xFF));  buffer.put(offset + (2 * offInc),(byte)((val >>> 16) & 0xFF));}  }
class C{  private static void taskQueued(ProgressThread task){  for (  ProgressThreadStateListener l : listener.getListeners(ProgressThreadStateListener.class)) {    l.progressThreadQueued(task);  }}  }
class C{  public MouseButtonListener(){  isCancelArmed=false;}  }
class C{  @Override public void areaInvalidated(ToolEvent e){  fireAreaInvalidated(e.getInvalidatedArea());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final void invertKeyOrdering(){  mKeyOrderingSign=-mKeyOrderingSign;  mSorted=false;}  }
class C{  protected PrintPage(){}  }
class C{  public String addStepsForDetachMirror(Workflow workflow,String waitFor,URI vplexURI,URI mirrorURI,URI promotedVolumeURI,String taskId) throws ControllerException {  try {    String detachStep=workflow.createStepId();    waitFor=workflow.createStep(VPLEX_STEP,String.format("VPlex %s detaching mirror:%n%s",vplexURI,mirrorURI),waitFor,vplexURI,DiscoveredDataObject.Type.vplex.name(),this.getClass(),detachMirrorDeviceMethod(vplexURI,mirrorURI,promotedVolumeURI,false),rollbackMethodNullMethod(),detachStep);    return waitFor;  } catch (  Exception ex) {    throw VPlexApiException.exceptions.addStepsForDetachMirror(ex);  }}  }
class C{  private void createAndQueueNewRequest(){  if (mConnection != null) {    RequestHandle newHandle=mRequestQueue.queueSynchronousRequest(mUrl,mUri,mMethod,mHeaders,mRequest.mEventHandler,mBodyProvider,mBodyLength);    mRequest=newHandle.mRequest;    mConnection=newHandle.mConnection;    newHandle.processRequest();    return;  }  mRequest=mRequestQueue.queueRequest(mUrl,mUri,mMethod,mHeaders,mRequest.mEventHandler,mBodyProvider,mBodyLength).mRequest;}  }
class C{  protected synchronized void callConnectionEventListeners(int eventType,SQLException sqlException){  if (this.connectionEventListeners == null) {    return;  }  Iterator<Map.Entry<ConnectionEventListener,ConnectionEventListener>> iterator=this.connectionEventListeners.entrySet().iterator();  ConnectionEvent connectionevent=new ConnectionEvent(this,sqlException);  while (iterator.hasNext()) {    ConnectionEventListener connectioneventlistener=iterator.next().getValue();    if (eventType == CONNECTION_CLOSED_EVENT) {      connectioneventlistener.connectionClosed(connectionevent);    } else     if (eventType == CONNECTION_ERROR_EVENT) {      connectioneventlistener.connectionErrorOccurred(connectionevent);    }  }}  }
class C{  public LocalZKServer(int port){  this.port=port;}  }
class C{  public void update(Graphics g){  g.setColor(getForeground());  paint(g);}  }
class C{  @Override public Codebase edit(Codebase input,Map<String,String> options){  File tempDir=filesystem.getTemporaryDirectory("rename_run_");  try {    copyDirectoryAndRename(input.path().getAbsoluteFile(),input.path().getAbsoluteFile(),tempDir.getAbsoluteFile());  } catch (  IOException e) {    throw new MoeProblem(e.getMessage());  }  return Codebase.create(tempDir,input.projectSpace(),input.expression());}  }
class C{  public Script parse(String scriptText) throws CompilationFailedException {  return parse(scriptText,generateScriptName());}  }
class C{  public KeyStoreState previousState(){  return previous;}  }
class C{  public SGenFactoryImpl(){  super();}  }
class C{  protected void appendValueLength(long value){  if (value < LENGTH_QUOTE) {    appendShortLength((int)value);    return;  }  append(LENGTH_QUOTE);  appendUintvarInteger(value);}  }
class C{  private void adjustASIAndCollectFollowElements(CustomInternalN4JSParser previousParser,boolean strict,Set<FollowElement> result){  ObservableXtextTokenStream tokens=(ObservableXtextTokenStream)previousParser.getTokenStream();  int lastTokenIndex=tokens.size() - 1;  if (lastTokenIndex >= 0) {    CommonToken lastToken=(CommonToken)tokens.LT(-1);    @SuppressWarnings("unchecked") List<Token> tokenList=tokens.getTokens();    if (lastToken == null) {      return;    }    if (shouldSkipASI(lastToken)) {      if (maySkipASI(lastToken,tokens)) {        tokenList.remove(lastTokenIndex);        result.addAll(resetAndGetFollowElements(tokens,strict));        removePostfixOperator(result);      }    } else     if (shouldAddSyntheticSemicolon(previousParser,lastTokenIndex,lastToken)) {      CommonToken token=new CommonToken(semi);      tokenList.add(token);      result.addAll(resetAndGetFollowElements(tokens,strict));      removePostfixOperator(result);    }  }}  }
class C{  public static int indexOf(Object[] array,Object value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (array[i].equals(value)) {      return i;    }  }  return -1;}  }
class C{  private IOException error(String message){  return new IOException(message);}  }
class C{  public void initializeSerialNode(SerialNode node){synchronized (this) {    for (int i=0; i < getNumNodes(); i++) {      if (getNode(i) == node) {        setMustInit(i,true);        return;      }    }  }}  }
class C{  public final void testEqualsObject02(){  ECPoint p2=null, p1=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ONE);  assertFalse(p1.equals(p2));  p1=new ECPoint(BigInteger.valueOf(-23457L),BigInteger.ONE);  p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.valueOf(1L));  assertFalse(p1.equals(p2) || p2.equals(p1));  p1=new ECPoint(BigInteger.valueOf(-23457L),BigInteger.ONE);  p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ZERO);  assertFalse(p1.equals(p2) || p2.equals(p1));  p1=ECPoint.POINT_INFINITY;  p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ZERO);  assertFalse(p1.equals(p2) || p2.equals(p1));}  }
class C{  public boolean isPutAll(){  return (this.opDetails & OP_DETAILS_PUTALL) != 0;}  }
class C{  public static boolean isDottedQuad(String s){  byte[] address=Address.toByteArray(s,IPv4);  return (address != null);}  }
class C{  public TradeMainControllerPanel(Frame frame){  super(frame);  try {    setMenu(new TradeMainPanelMenu(this));    setSelected(true);    m_tradePersistentModel=(PersistentModel)ClassFactory.getServiceForInterface(PersistentModel._persistentModel,this);    Tradingday tradingday=Tradingday.newInstance(TradingCalendar.getCurrentTradingDay());    Tradingday todayTradingday=m_tradePersistentModel.findTradingdayByOpenCloseDate(tradingday.getOpen(),tradingday.getClose());    if (null != todayTradingday)     tradingday=todayTradingday;    m_tradingdays=new Tradingdays();    m_tradingdays.add(tradingday);    String strategyDir=ConfigProperties.getPropAsString("trade.strategy.default.dir");    dynacode=new DynamicCode();    dynacode.addSourceDir(new File(strategyDir));    tradingdayPanel=new TradingdayPanel(m_tradingdays,this,m_tradePersistentModel);    contractPanel=new ContractPanel(m_tradingdays,this,m_tradePersistentModel);    portfolioPanel=new PortfolioPanel(this,m_tradePersistentModel);    configurationPanel=new ConfigurationPanel(m_tradePersistentModel);    strategyPanel=new StrategyPanel(m_tradePersistentModel);    this.addTab("Tradingday",tradingdayPanel);    this.addTab("Contract Details",contractPanel);    this.addTab("Portfolio",portfolioPanel);    this.addTab("Configuration",configurationPanel);    this.addTab("Strategies",strategyPanel);    this.setSelectPanel(tradingdayPanel);  } catch (  IOException ex) {    this.setErrorMessage("Error During Initialization. Please make sure config.properties file is in the root dir.",ex.getMessage(),ex);    System.exit(0);  }catch (  Exception ex1) {    this.setErrorMessage("Error During Initialization.",ex1.getMessage(),ex1);    System.exit(0);  }}  }
class C{  void add(MutableBigInteger addend){  int x=intLen;  int y=addend.intLen;  int resultLen=(intLen > addend.intLen ? intLen : addend.intLen);  int[] result=(value.length < resultLen ? new int[resultLen] : value);  int rstart=result.length - 1;  long sum;  long carry=0;  while (x > 0 && y > 0) {    x--;    y--;    sum=(value[x + offset] & LONG_MASK) + (addend.value[y + addend.offset] & LONG_MASK) + carry;    result[rstart--]=(int)sum;    carry=sum >>> 32;  }  while (x > 0) {    x--;    if (carry == 0 && result == value && rstart == (x + offset))     return;    sum=(value[x + offset] & LONG_MASK) + carry;    result[rstart--]=(int)sum;    carry=sum >>> 32;  }  while (y > 0) {    y--;    sum=(addend.value[y + addend.offset] & LONG_MASK) + carry;    result[rstart--]=(int)sum;    carry=sum >>> 32;  }  if (carry > 0) {    resultLen++;    if (result.length < resultLen) {      int temp[]=new int[resultLen];      System.arraycopy(result,0,temp,1,result.length);      temp[0]=1;      result=temp;    } else {      result[rstart--]=1;    }  }  value=result;  intLen=resultLen;  offset=result.length - resultLen;}  }
class C{  public void actionPerformed(ActionEvent e){  String group=null;  if (Beans.hasProperty(wi,RosterGroupSelector.SELECTED_ROSTER_GROUP)) {    group=(String)Beans.getProperty(wi,RosterGroupSelector.SELECTED_ROSTER_GROUP);  }  ThrottleFrame tf=ThrottleFrameManager.instance().createThrottleFrame();  tf.getAddressPanel().getRosterEntrySelector().setSelectedRosterGroup(group);  tf.toFront();}  }
class C{  public ToHitData toHit(IGame game){  return toHit(game,getEntityId(),game.getTarget(getTargetType(),getTargetId()),getArm());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.764 -0400",hash_original_method="CAEC80FD980017DE24EC23E6474A88F7",hash_generated_method="6BC2F450418327A275035F64F14A8775") public PrefixFileFilter(String[] prefixes){  this(prefixes,IOCase.SENSITIVE);}  }
class C{  @VisibleForTesting public BKDLConfig(String zkServers,String ledgersPath){  this(zkServers,zkServers,zkServers,zkServers,ledgersPath);}  }
class C{  public AssertionValidationException(String message,ReasonEnum reason,Object[] params){  super(message,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) void appendQueryFields(final StringBuffer buf,final Map fields){  final List fieldNames=new ArrayList(fields.keySet());  final Iterator itr=fieldNames.iterator();  while (itr.hasNext()) {    final String fieldName=(String)itr.next();    final String fieldValue=(String)fields.get(fieldName);    if (fieldValue != null && fieldValue.length() > 0)     try {      buf.append(URLEncoder.encode(fieldName,"UTF-8"));      buf.append('=');      buf.append(URLEncoder.encode(fieldValue,"UTF-8"));    } catch (    final UnsupportedEncodingException e) {      throw new RuntimeException(e.getMessage());    }    if (itr.hasNext())     buf.append('&');  }}  }
class C{  private JMenuItem createCheckBoxMenuItem(JMenu menu,String label,String mnemonic,String accessibleDescription,Action action){  JCheckBoxMenuItem mi=(JCheckBoxMenuItem)menu.add(new JCheckBoxMenuItem(getString(label)));  mi.setMnemonic(getMnemonic(mnemonic));  mi.getAccessibleContext().setAccessibleDescription(getString(accessibleDescription));  mi.addActionListener(action);  return mi;}  }
class C{  public T httpEquiv(String value){  return attr("http-equiv",value);}  }
class C{  public ParameterizedTypeImpl(Type ownerType,Class<?> rawType,Type[] actualTypeArguments){  this.ownerType=ownerType;  this.rawType=rawType;  this.actualTypeArguments=actualTypeArguments;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ADDITIVE_EXPRESSION__LHS:    setLhs((Expression)null);  return;case N4JSPackage.ADDITIVE_EXPRESSION__OP:setOp(OP_EDEFAULT);return;case N4JSPackage.ADDITIVE_EXPRESSION__RHS:setRhs((Expression)null);return;}super.eUnset(featureID);}  }
class C{  private Deployable modifyWar(Deployable originalDeployable) throws Exception {  File tmpDir=new File(new File(getTestData().targetDir).getParent(),"modified-war");  tmpDir.mkdirs();  if (!tmpDir.isDirectory()) {    throw new FileNotFoundException("Cannot create modified WAR temporary directory \"" + tmpDir + "\"");  }  File htmlFile=new File(tmpDir,"some.html");  FileWriter fw=new FileWriter(htmlFile);  fw.write("It works...");  fw.close();  File originalWar=new File(originalDeployable.getFile());  File updatedWar=new File(tmpDir,originalWar.getName());  this.fileHandler.copyFile(originalWar.getPath(),updatedWar.getPath());  War warTask=(War)new AntUtils().createProject().createTask("war");  warTask.setUpdate(true);  warTask.setDestFile(updatedWar);  FileSet fileSet=new FileSet();  fileSet.setFile(htmlFile);  warTask.addFileset(fileSet);  warTask.execute();  return new DefaultDeployableFactory().createDeployable(getContainer().getId(),updatedWar.getPath(),DeployableType.WAR);}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  private Security(){}  }
class C{  public static String decode(final String escaped,final String charset) throws URIException {  return Coder.decode(escaped.toCharArray(),charset);}  }
class C{  private void drawFrequencies(Graphics2D graphics){  drawFrequencyLine(graphics,getAxisFromFrequency(1000),Color.LIGHT_GRAY);  drawFrequencyLineAndLabel(graphics,2000);  drawFrequencyLine(graphics,getAxisFromFrequency(3000),Color.LIGHT_GRAY);  drawFrequencyLineAndLabel(graphics,4000);  drawFrequencyLine(graphics,getAxisFromFrequency(5000),Color.LIGHT_GRAY);}  }
class C{  public Object clone(){  ObjectArrayList v=(ObjectArrayList)super.clone();  v.elements=(Object[])elements.clone();  return v;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.848 -0500",hash_original_method="925F30C66D72EC6F79C9BA5892CFF1DD",hash_generated_method="558B5397C621FBF92D8EECC0FC621376") protected static long toNtpTime(long t){  boolean useBase1=t < msb0baseTime;  long baseTime;  if (useBase1) {    baseTime=t - msb1baseTime;  } else {    baseTime=t - msb0baseTime;  }  long seconds=baseTime / 1000;  long fraction=((baseTime % 1000) * 0x100000000L) / 1000;  if (useBase1) {    seconds|=0x80000000L;  }  long time=seconds << 32 | fraction;  return time;}  }
class C{  public static String toBase58(byte[] b){  if (b.length == 0) {    return "";  }  int lz=0;  while (lz < b.length && b[lz] == 0) {    ++lz;  }  StringBuilder s=new StringBuilder();  BigInteger n=new BigInteger(1,b);  while (n.compareTo(BigInteger.ZERO) > 0) {    BigInteger[] r=n.divideAndRemainder(BigInteger.valueOf(58));    n=r[0];    char digit=b58[r[1].intValue()];    s.append(digit);  }  while (lz > 0) {    --lz;    s.append("1");  }  return s.reverse().toString();}  }
class C{  public static int height(final Segment document,final int maxWidth,final FontRenderer renderer){  int currentX=0;  int currentY=0;  Segment segment=document;  while (segment != null) {    currentY+=segment.nextY(currentX,maxWidth,renderer);    currentX=segment.nextX(currentX,maxWidth,renderer);    segment=segment.next();  }  return currentY;}  }
class C{  public static int alert(final String cMsg,final int nIcon,final int nType,String title){  if (showOutput) {    System.out.println("JSApp.alert(cMsg, nIcon, nType)");  }  final int javaIcon;  final int javaButtonType;switch (nIcon) {case ICON_ERROR:    javaIcon=JOptionPane.ERROR_MESSAGE;  break;case ICON_WARNING:javaIcon=JOptionPane.WARNING_MESSAGE;break;case ICON_QUESTION:javaIcon=JOptionPane.QUESTION_MESSAGE;break;case ICON_STATUS:javaIcon=JOptionPane.PLAIN_MESSAGE;break;default :javaIcon=JOptionPane.PLAIN_MESSAGE;}switch (nType) {case BUTTONTYPE_OK:javaButtonType=JOptionPane.DEFAULT_OPTION;break;case BUTTONTYPE_OK_CANCEL:javaButtonType=JOptionPane.OK_CANCEL_OPTION;break;case BUTTONTYPE_YES_NO:javaButtonType=JOptionPane.YES_NO_OPTION;break;case BUTTONTYPE_YES_NO_CANCEL:javaButtonType=JOptionPane.YES_NO_CANCEL_OPTION;break;default :javaButtonType=JOptionPane.OK_CANCEL_OPTION;}if (title == null || title.length() <= 0) {title="Jpedal JavaScript Window";}int nButton=JOptionPane.showConfirmDialog(null,cMsg,title,javaButtonType,javaIcon);switch (nButton) {case JOptionPane.OK_OPTION:if (nType == BUTTONTYPE_YES_NO || nType == BUTTONTYPE_YES_NO_CANCEL) {nButton=BUTTON_YES;} else {nButton=BUTTON_OK;}break;case JOptionPane.CANCEL_OPTION:nButton=BUTTON_CANCEL;break;case JOptionPane.NO_OPTION:nButton=BUTTON_NO;break;case JOptionPane.CLOSED_OPTION:if (javaButtonType == JOptionPane.DEFAULT_OPTION) {nButton=BUTTON_OK;} else if (javaButtonType == JOptionPane.YES_NO_OPTION) {nButton=BUTTON_NO;} else {nButton=BUTTON_CANCEL;}break;}return nButton;}  }
class C{  public static int maxIndex(double[] doubles){  double maximum=0;  int maxIndex=0;  for (int i=0; i < doubles.length; i++) {    if ((i == 0) || (doubles[i] > maximum)) {      maxIndex=i;      maximum=doubles[i];    }  }  return maxIndex;}  }
class C{  static public int month(){  time.setToNow();  return time.month + 1;}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_Product_ID=(Integer)value;  if (M_Product_ID == null || M_Product_ID.intValue() == 0)   return "";  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_Product_ID") == M_Product_ID.intValue() && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID") != 0) {    mTab.setValue("M_AttributeSetInstance_ID",new Integer(Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID")));  } else {    mTab.setValue("M_AttributeSetInstance_ID",null);  }  MProduct product=MProduct.get(ctx,M_Product_ID);  if (product != null) {    if (product.getM_Locator_ID() > 0)     mTab.setValue("M_Locator_ID",product.getM_Locator_ID());  }  return "";}  }
class C{  @Transactional public void sendEmailVerifycode(){  final List<Filter> filters=new ArrayList<Filter>();  filters.add(new PropertyFilter(Verifycode.TYPE,FilterOperator.EQUAL,Verifycode.TYPE_C_EMAIL));  filters.add(new PropertyFilter(Verifycode.STATUS,FilterOperator.EQUAL,Verifycode.STATUS_C_UNSENT));  final Query query=new Query().setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));  try {    final JSONObject result=verifycodeRepository.get(query);    final JSONArray verifycodes=result.optJSONArray(Keys.RESULTS);    if (Symphonys.getBoolean("sendcloud.enabled")) {      final Map<String,List<String>> vars=new HashMap<String,List<String>>();      final List<String> var1=new ArrayList<String>();      final List<String> var2=new ArrayList<String>();      vars.put("%1%",var1);      vars.put("%2%",var2);      final List<String> toMails=new ArrayList<String>();      for (int i=0; i < verifycodes.length(); i++) {        final JSONObject verifycode=verifycodes.optJSONObject(i);        final String userId=verifycode.optString(Verifycode.USER_ID);        final JSONObject user=userRepository.get(userId);        if (null == user) {          continue;        }        final String userName=user.optString(User.USER_NAME);        final String toMail=verifycode.optString(Verifycode.RECEIVER);        final String code=verifycode.optString(Verifycode.CODE);        var1.add(userName);        final int bizType=verifycode.optInt(Verifycode.BIZ_TYPE);switch (bizType) {case Verifycode.BIZ_TYPE_C_REGISTER:          var2.add(Latkes.getServePath() + "/register?code=" + code);        break;case Verifycode.BIZ_TYPE_C_RESET_PWD:      var2.add(Latkes.getServePath() + "/reset-pwd?code=" + code);    break;default :  LOGGER.warn("Send email verify code failed with wrong biz type [" + bizType + "]");continue;}toMails.add(toMail);verifycode.put(Verifycode.STATUS,Verifycode.STATUS_C_SENT);verifycodeRepository.update(verifycode.optString(Keys.OBJECT_ID),verifycode);}if (0 != verifycodes.length()) {Mails.send(langPropsService.get("verifycodeEmailSubjectLabel"),"sym_register",toMails,vars);}} else {for (int i=0; i < verifycodes.length(); i++) {final JSONObject verifycode=verifycodes.optJSONObject(i);final String userId=verifycode.optString(Verifycode.USER_ID);final JSONObject user=userRepository.get(userId);if (null == user) {continue;}final String toMail=verifycode.optString(Verifycode.RECEIVER);final String code=verifycode.optString(Verifycode.CODE);final int bizType=verifycode.optInt(Verifycode.BIZ_TYPE);switch (bizType) {case Verifycode.BIZ_TYPE_C_REGISTER:String body=langPropsService.get("registerBodyLabel");body=body.replace("${url}",Latkes.getServePath() + "/register?code=" + code);Mails.send(toMail,langPropsService.get("registerSubjectLabel"),body);break;case Verifycode.BIZ_TYPE_C_RESET_PWD:body=langPropsService.get("forgetPwdBodyLabel");body=body.replace("${url}",Latkes.getServePath() + "/reset-pwd?code=" + code);Mails.send(toMail,langPropsService.get("forgetPwdSubjectLabel"),body);break;default :LOGGER.warn("Send email verify code failed with wrong biz type [" + bizType + "]");continue;}verifycode.put(Verifycode.STATUS,Verifycode.STATUS_C_SENT);verifycodeRepository.update(verifycode.optString(Keys.OBJECT_ID),verifycode);}}} catch (final Exception e) {LOGGER.log(Level.ERROR,"Sends verifycode failed",e);}}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector();  OptionUtils.addOption(newVector,sizeTipText(),"" + getDefaultSize(),"size");  OptionUtils.addOption(newVector,thresholdTipText(),"" + getDefaultThreshold(),"threshold");  OptionUtils.add(newVector,super.listOptions());  return OptionUtils.toEnumeration(newVector);}  }
class C{  public void addSuperAttribute(String key,Object value){  this.superAttributes.put(key,value);}  }
class C{  public boolean isLinkDown(){  return portStateLinkDown;}  }
class C{  public float tf(int freq,int passageLen){  float norm=k1 * ((1 - b) + b * (passageLen / pivot));  return freq / (freq + norm);}  }
class C{  public boolean obtainAudioFocus(){  if (mMediaPlayer.isPlaying() || mTextToSpeech.isSpeaking()) {    return false;  }  int result=mAudioManager.requestAudioFocus(mAudioFocusChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);  return (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED);}  }
class C{  @Override public String toString(){  return "cudaEvent_t[" + "nativePointer=" + getNativePointer() + "]";}  }
class C{  public final MoveList pseudoLegalCapturesAndChecks(Position pos){  MoveList moveList=getMoveListObj();  long occupied=pos.whiteBB | pos.blackBB;  if (pos.whiteMove) {    int bKingSq=pos.getKingSq(false);    long discovered=0;    long kRookAtk=BitBoard.rookAttacks(bKingSq,occupied);    if ((BitBoard.rookAttacks(bKingSq,occupied & ~kRookAtk) & (pos.pieceTypeBB[Piece.WQUEEN] | pos.pieceTypeBB[Piece.WROOK])) != 0)     discovered|=kRookAtk;    long kBishAtk=BitBoard.bishopAttacks(bKingSq,occupied);    if ((BitBoard.bishopAttacks(bKingSq,occupied & ~kBishAtk) & (pos.pieceTypeBB[Piece.WQUEEN] | pos.pieceTypeBB[Piece.WBISHOP])) != 0)     discovered|=kBishAtk;    long squares=pos.pieceTypeBB[Piece.WQUEEN];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=(BitBoard.rookAttacks(sq,occupied) | BitBoard.bishopAttacks(sq,occupied));      if ((discovered & (1L << sq)) == 0)       m&=(pos.blackBB | kRookAtk | kBishAtk);      m&=~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.WROOK];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.rookAttacks(sq,occupied);      if ((discovered & (1L << sq)) == 0)       m&=(pos.blackBB | kRookAtk);      m&=~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.WBISHOP];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.bishopAttacks(sq,occupied);      if ((discovered & (1L << sq)) == 0)       m&=(pos.blackBB | kBishAtk);      m&=~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }{      int sq=pos.getKingSq(true);      long m=BitBoard.kingAttacks[sq];      m&=((discovered & (1L << sq)) == 0) ? pos.blackBB : ~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      final int k0=4;      if (sq == k0) {        final long OO_SQ=0x60L;        final long OOO_SQ=0xEL;        if (((pos.getCastleMask() & (1 << Position.H1_CASTLE)) != 0) && ((OO_SQ & (pos.whiteBB | pos.blackBB)) == 0) && (pos.getPiece(k0 + 3) == Piece.WROOK)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 + 1)) {          setMove(moveList,k0,k0 + 2,Piece.EMPTY);        }        if (((pos.getCastleMask() & (1 << Position.A1_CASTLE)) != 0) && ((OOO_SQ & (pos.whiteBB | pos.blackBB)) == 0) && (pos.getPiece(k0 - 4) == Piece.WROOK)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 - 1)) {          setMove(moveList,k0,k0 - 2,Piece.EMPTY);        }      }    }    long knights=pos.pieceTypeBB[Piece.WKNIGHT];    long kKnightAtk=BitBoard.knightAttacks[bKingSq];    while (knights != 0) {      int sq=BitBoard.numberOfTrailingZeros(knights);      long m=BitBoard.knightAttacks[sq] & ~pos.whiteBB;      if ((discovered & (1L << sq)) == 0)       m&=(pos.blackBB | kKnightAtk);      m&=~pos.whiteBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      knights&=knights - 1;    }    long pawns=pos.pieceTypeBB[Piece.WPAWN];    int epSquare=pos.getEpSquare();    long epMask=(epSquare >= 0) ? (1L << epSquare) : 0L;    long m=(pawns << 7) & BitBoard.maskAToGFiles & (pos.blackBB | epMask);    if (addPawnMovesByMask(moveList,pos,m,-7,false))     return moveList;    m=(pawns << 9) & BitBoard.maskBToHFiles & (pos.blackBB | epMask);    if (addPawnMovesByMask(moveList,pos,m,-9,false))     return moveList;    long pawnAll=discovered | BitBoard.maskRow7;    m=((pawns & pawnAll) << 8) & ~(pos.whiteBB | pos.blackBB);    if (addPawnMovesByMask(moveList,pos,m,-8,false))     return moveList;    m=((m & BitBoard.maskRow3) << 8) & ~(pos.whiteBB | pos.blackBB);    addPawnDoubleMovesByMask(moveList,pos,m,-16);    m=((pawns & ~pawnAll) << 8) & ~(pos.whiteBB | pos.blackBB);    if (addPawnMovesByMask(moveList,pos,m & BitBoard.bPawnAttacks[bKingSq],-8,false))     return moveList;    m=((m & BitBoard.maskRow3) << 8) & ~(pos.whiteBB | pos.blackBB);    addPawnDoubleMovesByMask(moveList,pos,m & BitBoard.bPawnAttacks[bKingSq],-16);  } else {    int wKingSq=pos.getKingSq(true);    long discovered=0;    long kRookAtk=BitBoard.rookAttacks(wKingSq,occupied);    if ((BitBoard.rookAttacks(wKingSq,occupied & ~kRookAtk) & (pos.pieceTypeBB[Piece.BQUEEN] | pos.pieceTypeBB[Piece.BROOK])) != 0)     discovered|=kRookAtk;    long kBishAtk=BitBoard.bishopAttacks(wKingSq,occupied);    if ((BitBoard.bishopAttacks(wKingSq,occupied & ~kBishAtk) & (pos.pieceTypeBB[Piece.BQUEEN] | pos.pieceTypeBB[Piece.BBISHOP])) != 0)     discovered|=kBishAtk;    long squares=pos.pieceTypeBB[Piece.BQUEEN];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=(BitBoard.rookAttacks(sq,occupied) | BitBoard.bishopAttacks(sq,occupied));      if ((discovered & (1L << sq)) == 0)       m&=pos.whiteBB | kRookAtk | kBishAtk;      m&=~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.BROOK];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.rookAttacks(sq,occupied);      if ((discovered & (1L << sq)) == 0)       m&=pos.whiteBB | kRookAtk;      m&=~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }    squares=pos.pieceTypeBB[Piece.BBISHOP];    while (squares != 0) {      int sq=BitBoard.numberOfTrailingZeros(squares);      long m=BitBoard.bishopAttacks(sq,occupied);      if ((discovered & (1L << sq)) == 0)       m&=pos.whiteBB | kBishAtk;      m&=~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      squares&=squares - 1;    }{      int sq=pos.getKingSq(false);      long m=BitBoard.kingAttacks[sq];      m&=((discovered & (1L << sq)) == 0) ? pos.whiteBB : ~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      final int k0=60;      if (sq == k0) {        final long OO_SQ=0x6000000000000000L;        final long OOO_SQ=0xE00000000000000L;        if (((pos.getCastleMask() & (1 << Position.H8_CASTLE)) != 0) && ((OO_SQ & (pos.whiteBB | pos.blackBB)) == 0) && (pos.getPiece(k0 + 3) == Piece.BROOK)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 + 1)) {          setMove(moveList,k0,k0 + 2,Piece.EMPTY);        }        if (((pos.getCastleMask() & (1 << Position.A8_CASTLE)) != 0) && ((OOO_SQ & (pos.whiteBB | pos.blackBB)) == 0) && (pos.getPiece(k0 - 4) == Piece.BROOK)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 - 1)) {          setMove(moveList,k0,k0 - 2,Piece.EMPTY);        }      }    }    long knights=pos.pieceTypeBB[Piece.BKNIGHT];    long kKnightAtk=BitBoard.knightAttacks[wKingSq];    while (knights != 0) {      int sq=BitBoard.numberOfTrailingZeros(knights);      long m=BitBoard.knightAttacks[sq] & ~pos.blackBB;      if ((discovered & (1L << sq)) == 0)       m&=pos.whiteBB | kKnightAtk;      m&=~pos.blackBB;      if (addMovesByMask(moveList,pos,sq,m))       return moveList;      knights&=knights - 1;    }    long pawns=pos.pieceTypeBB[Piece.BPAWN];    int epSquare=pos.getEpSquare();    long epMask=(epSquare >= 0) ? (1L << epSquare) : 0L;    long m=(pawns >>> 9) & BitBoard.maskAToGFiles & (pos.whiteBB | epMask);    if (addPawnMovesByMask(moveList,pos,m,9,false))     return moveList;    m=(pawns >>> 7) & BitBoard.maskBToHFiles & (pos.whiteBB | epMask);    if (addPawnMovesByMask(moveList,pos,m,7,false))     return moveList;    long pawnAll=discovered | BitBoard.maskRow2;    m=((pawns & pawnAll) >>> 8) & ~(pos.whiteBB | pos.blackBB);    if (addPawnMovesByMask(moveList,pos,m,8,false))     return moveList;    m=((m & BitBoard.maskRow6) >>> 8) & ~(pos.whiteBB | pos.blackBB);    addPawnDoubleMovesByMask(moveList,pos,m,16);    m=((pawns & ~pawnAll) >>> 8) & ~(pos.whiteBB | pos.blackBB);    if (addPawnMovesByMask(moveList,pos,m & BitBoard.wPawnAttacks[wKingSq],8,false))     return moveList;    m=((m & BitBoard.maskRow6) >>> 8) & ~(pos.whiteBB | pos.blackBB);    addPawnDoubleMovesByMask(moveList,pos,m & BitBoard.wPawnAttacks[wKingSq],16);  }  return moveList;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case InformationModelPackage.INFORMATION_MODEL__NAME:    return getName();case InformationModelPackage.INFORMATION_MODEL__NAMESPACE:  return getNamespace();case InformationModelPackage.INFORMATION_MODEL__VERSION:return getVersion();case InformationModelPackage.INFORMATION_MODEL__REFERENCES:return getReferences();case InformationModelPackage.INFORMATION_MODEL__DESCRIPTION:return getDescription();case InformationModelPackage.INFORMATION_MODEL__DISPLAYNAME:return getDisplayname();case InformationModelPackage.INFORMATION_MODEL__CATEGORY:return getCategory();case InformationModelPackage.INFORMATION_MODEL__PROPERTIES:return getProperties();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void runMaintenance(){  List<MaintenanceOperation> L=HGQuery.hg.getAll(this,HGQuery.hg.typePlus(MaintenanceOperation.class));  for (  MaintenanceOperation op : L)   try {    op.execute(this);    remove(getHandle(op));  } catch (  MaintenanceException ex) {    ex.printStackTrace(System.err);    if (ex.isFatal())     break;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.588 -0400",hash_original_method="F053058678CE408C06156A1232B98617",hash_generated_method="EE747F857EBFFF02FA6FA68C1F4F79C6") private ThreadMonitor(Thread thread,long timeout){  this.thread=thread;  this.timeout=timeout;}  }
class C{  private void configureReconciler(final DocumentHandle documentHandle){  final Reconciler reconciler=configuration.getReconciler();  if (reconciler != null) {    reconciler.setDocumentHandle(documentHandle);    documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,reconciler);    reconciler.install(textEditor);  }}  }
class C{  public void addMemoryListener(final IMemoryListener listener){  Preconditions.checkNotNull(listener,"Error: Listener can't be null");  m_listeners.add(listener);}  }
class C{  private void fillPersonalNav(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> dataModel){  dataModel.put(Common.IS_LOGGED_IN,false);  dataModel.put(Common.IS_ADMIN_LOGGED_IN,false);  if (null == Sessions.currentUser(request) && !userMgmtService.tryLogInWithCookie(request,response)) {    dataModel.put("loginLabel",langPropsService.get("loginLabel"));    return;  }  JSONObject curUser=null;  try {    curUser=userQueryService.getCurrentUser(request);  } catch (  final ServiceException e) {    LOGGER.log(Level.ERROR,"Gets the current user failed",e);  }  if (null == curUser) {    dataModel.put("loginLabel",langPropsService.get("loginLabel"));    return;  }  dataModel.put(Common.IS_LOGGED_IN,true);  dataModel.put(Common.LOGOUT_URL,userQueryService.getLogoutURL("/"));  dataModel.put("logoutLabel",langPropsService.get("logoutLabel"));  final String userName=curUser.optString(User.USER_NAME);  dataModel.put(User.USER_NAME,userName);  final String userRole=curUser.optString(User.USER_ROLE);  dataModel.put(User.USER_ROLE,userRole);  dataModel.put(Common.IS_ADMIN_LOGGED_IN,Role.ADMIN_ROLE.equals(userRole));  avatarQueryService.fillUserAvatarURL(curUser);  final String userId=curUser.optString(Keys.OBJECT_ID);  final long followingArticleCnt=followQueryService.getFollowingCount(userId,Follow.FOLLOWING_TYPE_C_ARTICLE);  final long followingTagCnt=followQueryService.getFollowingCount(userId,Follow.FOLLOWING_TYPE_C_TAG);  final long followingUserCnt=followQueryService.getFollowingCount(userId,Follow.FOLLOWING_TYPE_C_USER);  curUser.put(Common.FOLLOWING_ARTICLE_CNT,followingArticleCnt);  curUser.put(Common.FOLLOWING_TAG_CNT,followingTagCnt);  curUser.put(Common.FOLLOWING_USER_CNT,followingUserCnt);  final int point=curUser.optInt(UserExt.USER_POINT);  final int appRole=curUser.optInt(UserExt.USER_APP_ROLE);  if (UserExt.USER_APP_ROLE_C_HACKER == appRole) {    curUser.put(UserExt.USER_T_POINT_HEX,Integer.toHexString(point));  } else {    curUser.put(UserExt.USER_T_POINT_CC,UserExt.toCCString(point));  }  dataModel.put(Common.CURRENT_USER,curUser);  final int unreadNotificationCount=notificationQueryService.getUnreadNotificationCount(curUser.optString(Keys.OBJECT_ID));  dataModel.put(Notification.NOTIFICATION_T_UNREAD_COUNT,unreadNotificationCount);  dataModel.put(Common.IS_DAILY_CHECKIN,activityQueryService.isCheckedinToday(userId));}  }
class C{  public static ZyLabelContent buildContent(final INaviFunctionNode node,final ZyGraphViewSettings graphSettings,final INodeModifier modifier){  Preconditions.checkNotNull(node,"IE01556: Argument node can't be null");  final ZyLabelContent content=new ZyLabelContent(null);  buildContent(content,node,graphSettings,modifier);  return content;}  }
class C{  public void finishAnnotating(){  endAnnotation();  if (annotations != null) {    int asz=annotations.size();    while (asz > 0) {      Annotation last=annotations.get(asz - 1);      if (last.getStart() > cursor) {        annotations.remove(asz - 1);        asz--;      } else       if (last.getEnd() > cursor) {        last.setEnd(cursor);        break;      } else {        break;      }    }  }}  }
class C{  public void updateCoverRotate(){  mRotateDegrees+=VELOCITY;  mRotateDegrees=mRotateDegrees % 360;  postInvalidate();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] roles=getStringList(stack);  Show s=getShow(stack);  if (s == null)   return "";  java.util.ArrayList rv=new java.util.ArrayList();  for (int i=0; i < roles.length; i++) {    String[] str=s.getPeopleCharacterList(Show.getRoleForString(roles[i]));    for (int j=0; (str != null) && j < str.length; j++)     if (str[j].length() > 0)     rv.add(str[j]);  }  return (String[])rv.toArray(Pooler.EMPTY_STRING_ARRAY);}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public void prepend(Move[] movesToPrepend){  Move[] newMoves=new Move[maxSize];  System.arraycopy(movesToPrepend,0,newMoves,0,movesToPrepend.length);  System.arraycopy(moves,0,newMoves,movesToPrepend.length,size);  moves=newMoves;  size+=movesToPrepend.length;}  }
class C{  public void updateVehicleStatistics(MultiPolygon studyArea){  setAverageActivitiesPerChain();  setAverageChainDuration();  setAverageChainDistance();  setStudyAreaActivities(studyArea);}  }
class C{  protected void tearDown(){  objArray=null;  s=null;}  }
class C{  private static String parseVersionNumber(String line){  StringTokenizer tokenizer=new StringTokenizer(line," \t");  if (!expect(tokenizer,"sourceInfo") || !expect(tokenizer,"version") || !tokenizer.hasMoreTokens()) {    return null;  }  return tokenizer.nextToken();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Post from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(false);}  }
class C{  public JsRuntimeReplFactoryBuilder addVariable(@NonNull String name,Object value){  mVariables.put(name,value);  return this;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public int[] validBaudValues(){  return validSpeedValues;}  }
class C{  @Override protected void restoreAcceleratedSurface(){synchronized (this) {    if (restoreCountdown > 0) {      restoreCountdown--;      throw new InvalidPipeException("Will attempt to restore surface " + " in " + restoreCountdown);    }  }  SurfaceData sData=initAcceleratedSurface();  if (sData != null) {    sdAccel=sData;  } else {    throw new InvalidPipeException("could not restore surface");  }}  }
class C{  private void createNotification(int notificationId,int mediaType,String url){  int notificationContentTextId=0;  int notificationIconId=0;  if (mediaType == MEDIATYPE_AUDIO_AND_VIDEO_CAPTURE) {    notificationContentTextId=R.string.video_audio_call_notification_text_2;    notificationIconId=R.drawable.webrtc_video;  } else   if (mediaType == MEDIATYPE_VIDEO_CAPTURE_ONLY) {    notificationContentTextId=R.string.video_call_notification_text_2;    notificationIconId=R.drawable.webrtc_video;  } else   if (mediaType == MEDIATYPE_AUDIO_CAPTURE_ONLY) {    notificationContentTextId=R.string.audio_call_notification_text_2;    notificationIconId=R.drawable.webrtc_audio;  } else   if (mediaType == MEDIATYPE_AUDIO_PLAYBACK) {    notificationContentTextId=R.string.audio_playback_notification_text;    notificationIconId=R.drawable.audio_playing;  }  Intent tabIntent=Tab.createBringTabToFrontIntent(notificationId);  PendingIntent contentIntent=PendingIntent.getActivity(mContext,notificationId,tabIntent,0);  String contentText=mContext.getResources().getString(notificationContentTextId) + ". " + mContext.getResources().getString(R.string.media_notification_link_text,url);  NotificationCompat.Builder builder=new NotificationCompat.Builder(mContext).setAutoCancel(false).setOngoing(true).setContentIntent(contentIntent).setContentTitle(mContext.getString(R.string.app_name)).setContentText(contentText).setSmallIcon(notificationIconId).setLocalOnly(true);  Notification notification=new NotificationCompat.BigTextStyle(builder).bigText(contentText).build();  mNotificationManager.notify(NOTIFICATION_NAMESPACE,notificationId,notification);  mNotifications.put(notificationId,mediaType);  updateSharedPreferencesEntry(notificationId,false);}  }
class C{  public void write(int c){  if (text != null) {    text.append(String.valueOf((char)c));    if (++col > wrap)     println();  } else   super.write(c);}  }
class C{  public static final void installApk(Context context,String apkPath){  if (TextUtils.isEmpty(apkPath)) {    return;  }  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.setDataAndType(Uri.fromFile(new File(apkPath)),"application/vnd.android.package-archive");  context.startActivity(intent);}  }
class C{  public HttpsURL(final HttpsURL base,final HttpsURL relative) throws URIException {  super(base,relative);  checkValid();}  }
class C{  public final double distanceToSphere(IMovingAgent agent,boolean useSphere){  double d=distance(agent);  if (useSphere)   d+=agent.getSphereRadius();  return d;}  }
class C{  private void strategyNominateFirstHostOrReflexiveValid(PropertyChangeEvent evt){  if (IceMediaStream.PROPERTY_PAIR_VALIDATED.equals(evt.getPropertyName())) {    CandidatePair validPair=(CandidatePair)evt.getSource();    Component component=validPair.getParentComponent();    LocalCandidate localCandidate=validPair.getLocalCandidate();    boolean isRelayed=(localCandidate instanceof RelayedCandidate) || localCandidate.getType().equals(CandidateType.RELAYED_CANDIDATE) || validPair.getRemoteCandidate().getType().equals(CandidateType.RELAYED_CANDIDATE);    boolean nominate=false;synchronized (validatedCandidates) {      TimerTask task=validatedCandidates.get(component.toShortString());      if (isRelayed && task == null) {        Timer timer=new Timer();        task=new RelayedCandidateTask(validPair);        logger.info("Wait timeout to nominate relayed candidate");        timer.schedule(task,0);        validatedCandidates.put(component.toShortString(),task);      } else       if (!isRelayed) {        if (task != null) {          task.cancel();          logger.info("Found a better candidate pair to nominate for " + component.toShortString());        }        logger.info("Nominate (first highest valid): " + validPair.toShortString());        nominate=true;      }    }    if (nominate)     parentAgent.nominate(validPair);  }}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_TAnonymousFormalParameterList_TypeRefWithModifiers(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrsetvalue2.class,args);}  }
class C{  public void testEdgeNGramTokenizer() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=tokenizerFactory("EdgeNGram").create();  ((Tokenizer)stream).setReader(reader);  assertTokenStreamContents(stream,new String[]{"t"});}  }
class C{  public static String removeNonNumeric(String str){  return removeRegex(str,"[\\D]");}  }
class C{  public static Map<String,Vector<Object>> errorAsHastable(String msgId){  Map<String,Vector<Object>> table=new Hashtable<String,Vector<Object>>();  table.put(LivingDocServerErrorKey.ERROR,errorAsVector(msgId));  return table;}  }
class C{  public static float[] reallocateBuffer(float[] buffer,int userSuppliedCapacity,int oldCapacity,int newCapacity,boolean deferred){  assert (newCapacity > oldCapacity);  assert (userSuppliedCapacity == 0 || newCapacity <= userSuppliedCapacity);  if ((!deferred || buffer != null) && userSuppliedCapacity == 0) {    buffer=reallocateBuffer(buffer,oldCapacity,newCapacity);  }  return buffer;}  }
class C{  public boolean isMatched(){  return m_C_BPartner_ID > 0 || m_C_Payment_ID > 0 || m_C_Invoice_ID > 0;}  }
class C{  public void evaluateInverse(double[] X,double[] x){  Xr[0]=X[0] + X[N2];  Xi[0]=X[0] - X[N2];  int N2pk=N2 + 1;  int N2mk=N2 - 1;  int Nmk=N - 1;  for (int k=1; k < N4; k++) {    double Xrk=X[k];    double Xik=X[Nmk];    double XrkpN2=X[N2mk];    double XikpN2=-X[N2pk];    double Dr=Xrk - XrkpN2;    double Di=Xik - XikpN2;    Xr[k]=Xrk + XrkpN2 - s[k] * Dr - c[k] * Di;    Xi[k]=Xik + XikpN2 + c[k] * Dr - s[k] * Di;    N2pk++;    N2mk--;    Nmk--;  }  Xr[N4]=2.0f * X[N4];  Xi[N4]=-2.0f * X[N2 + N4];  N2pk=N2 + N4 + 1;  N2mk=N4 - 1;  Nmk=N - N4 - 1;  int reflect=N4 - 1;  for (int k=N4 + 1; k < N2; k++) {    double Xrk=X[k];    double Xik=X[Nmk];    double XrkpN2=X[N2mk];    double XikpN2=-X[N2pk];    double Dr=Xrk - XrkpN2;    double Di=Xik - XikpN2;    Xr[k]=Xrk + XrkpN2 - s[reflect] * Dr + c[reflect] * Di;    Xi[k]=Xik + XikpN2 - c[reflect] * Dr - s[reflect] * Di;    N2pk++;    N2mk--;    Nmk--;    reflect--;  }  dft.evaluate(Xr,Xi,xr,xi);  x[0]=xr[0] / N;  x[1]=xi[0] / N;  int j=N2 - 1;  for (int k=1; k < N2; k++) {    int i=k << 1;    x[i++]=xr[j] / N;    x[i]=xi[j] / N;    j--;  }}  }
class C{  protected void changeFileId(int fileId){  m_fileId=fileId;}  }
class C{  public String addStepsForRestoreFromFullcopy(Workflow workflow,String waitFor,URI storage,List<URI> fullcopies,String opId,TaskCompleter completer) throws InternalException {  Volume firstFullCopy=_dbClient.queryObject(Volume.class,fullcopies.get(0));  if (firstFullCopy.isVPlexVolume(_dbClient)) {    return waitFor;  }  BlockObject firstSource=BlockObject.fetch(_dbClient,firstFullCopy.getAssociatedSourceVolume());  if (!NullColumnValueGetter.isNullURI(firstSource.getConsistencyGroup())) {    completer.addConsistencyGroupId(firstSource.getConsistencyGroup());  }  StorageSystem system=_dbClient.queryObject(StorageSystem.class,storage);  Workflow.Method restoreFromFullcopyMethod=new Workflow.Method(RESTORE_FROM_FULLCOPY_METHOD_NAME,storage,fullcopies,Boolean.TRUE);  waitFor=workflow.createStep(RESTORE_FROM_FULLCOPY_STEP,"Restore volumes from full copies",waitFor,storage,system.getSystemType(),this.getClass(),restoreFromFullcopyMethod,null,null);  _log.info("Created workflow step to restore volume from full copies");  return waitFor;}  }
class C{  public synchronized void startListening(Context context){  if (!mListening) {    mContext=context;    IntentFilter filter=new IntentFilter();    filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);    context.registerReceiver(mReceiver,filter);    mListening=true;  }}  }
class C{  public User(){  super("user",TextTemplateMessages.MESSAGES.variableDescriptionUser());}  }
class C{  public boolean hasElement(QName id){  return (state.elements == null) ? false : state.elements.containsKey(id);}  }
class C{  public Builder skipIdleMetrics(boolean skipIdleMetrics){  this.skipIdleMetrics=skipIdleMetrics;  return this;}  }
class C{  private void assertConstructorThrowsException(SoapBinding binding,SecurityTokenServiceConfig config){  boolean exceptionThrown=false;  try {    new SecurityTokenServiceImpl(binding,config);  } catch (  IllegalArgumentException e) {    exceptionThrown=true;  } finally {    assertTrue(exceptionThrown);  }}  }
class C{  public AutoColorCorrelogram(int[] distanceSet,IAutoCorrelogramFeatureExtractor extractionAlgorith){  this(DEFAULT_NUMBER_COLORS,distanceSet,extractionAlgorith);}  }
class C{  protected Value colorLirOperand(LIRInstruction op,Variable operand,OperandMode mode){  int opId=op.id();  Interval interval=allocator.intervalFor(operand);  assert interval != null : "interval must exist";  if (opId != -1) {    if (DetailedAsserts.getValue()) {      AbstractBlockBase<?> block=allocator.blockForId(opId);      if (block.getSuccessorCount() <= 1 && opId == allocator.getLastLirInstructionId(block)) {        LIRInstruction instr=allocator.getLIR().getLIRforBlock(block).get(allocator.getLIR().getLIRforBlock(block).size() - 1);        if (instr instanceof StandardOp.JumpOp) {          if (allocator.getBlockData(block).liveOut.get(allocator.operandNumber(operand))) {            assert false : String.format("can't get split child for the last branch of a block because the information would be incorrect (moves are inserted before the branch in resolveDataFlow) block=%s, instruction=%s, operand=%s",block,instr,operand);          }        }      }    }    interval=allocator.splitChildAtOpId(interval,opId,mode);  }  if (isIllegal(interval.location()) && interval.canMaterialize()) {    assert mode != OperandMode.DEF;    return new ConstantValue(interval.kind(),interval.getMaterializedValue());  }  return interval.location();}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  private static void println(String msg){}  }
class C{  protected final V wrapValue(V o){  return o;}  }
class C{  public void initialize(UimaContext aContext){  return;}  }
class C{  private Account findIntendedAccount(String username){  Account[] accounts=AccountManager.get(mContext).getAccountsByTypeAsUser("com.google",new UserHandle(mLockPatternUtils.getCurrentUser()));  Account bestAccount=null;  int bestScore=0;  for (  Account a : accounts) {    int score=0;    if (username.equals(a.name)) {      score=4;    } else     if (username.equalsIgnoreCase(a.name)) {      score=3;    } else     if (username.indexOf('@') < 0) {      int i=a.name.indexOf('@');      if (i >= 0) {        String aUsername=a.name.substring(0,i);        if (username.equals(aUsername)) {          score=2;        } else         if (username.equalsIgnoreCase(aUsername)) {          score=1;        }      }    }    if (score > bestScore) {      bestAccount=a;      bestScore=score;    } else     if (score == bestScore) {      bestAccount=null;    }  }  return bestAccount;}  }
class C{  private Map<String,TeamExplorerNavigationLinkConfig[]> discoverNavigationLinks(){  final Map<String,List<TeamExplorerNavigationLinkConfig>> map;  map=new HashMap<String,List<TeamExplorerNavigationLinkConfig>>();  for (  final IConfigurationElement element : getExtensions(NAVLINK_EXTENSION_POINT_ID)) {    final TeamExplorerNavigationLinkConfig navLink=TeamExplorerNavigationLinkConfig.fromConfigurationElement(element);    List<TeamExplorerNavigationLinkConfig> navLinks=map.get(navLink.getParentID());    if (navLinks == null) {      navLinks=new ArrayList<TeamExplorerNavigationLinkConfig>();      map.put(navLink.getParentID(),navLinks);    }    navLinks.add(navLink);  }  final Map<String,TeamExplorerNavigationLinkConfig[]> toReturn;  toReturn=new HashMap<String,TeamExplorerNavigationLinkConfig[]>();  for (  final String itemID : map.keySet()) {    final List<TeamExplorerNavigationLinkConfig> list=map.get(itemID);    final TeamExplorerNavigationLinkConfig[] links=list.toArray(new TeamExplorerNavigationLinkConfig[list.size()]);    Arrays.sort(links,new TeamExplorerOrderedComponentComparator());    toReturn.put(itemID,links);  }  return toReturn;}  }
class C{  public static int indexOf(double[] array,double value){  for (int i=0; i < array.length; i++) {    if (Double.compare(array[i],value) == 0) {      return i;    }  }  return -1;}  }
class C{  public String proximityvectorfile(){  return proximityvectorfile;}  }
class C{  public static JSONObject rowToJSONObject(JSONArray names,JSONTokener x) throws JSONException {  JSONArray ja=rowToJSONArray(x);  return ja != null ? ja.toJSONObject(names) : null;}  }
class C{  void young(){  mYoung=true;}  }
class C{  public boolean isIssueError(){  Boolean b=(Boolean)Env.getCtx().get(ISSUE_ERROR_KEY);  if (b == null) {    b=Boolean.TRUE;    setIssueError(b);  }  return b;}  }
class C{  private String protectedToString(Object obj){  String out=EMPTY_STRING;  if (obj != null) {    try {      out=obj.toString();    } catch (    RuntimeException runtime) {      String message="Caught an exception while trying to call obj.toString()";      if (_log.isDebugEnabled()) {        _log.error(message,runtime);      } else {        _log.info(message);      }    }  }  return out;}  }
class C{  public PrivateSetIntersection(ArrayList<byte[]> values) throws NoSuchAlgorithmException {  this.blindedItems=new ArrayList<BigInteger>();  BigInteger rand;  do {    rand=new BigInteger(DH_SUBGROUP_SIZE,random);  } while (rand.equals(BigInteger.ZERO) || rand.equals(BigInteger.ONE));  this.x=DH_GROUP_PARAMETERS.getG().modPow(rand,DH_GROUP_PARAMETERS.getP());  MessageDigest md=MessageDigest.getInstance(HASH_ALGORITHM);  for (  byte[] v : values) {    md.reset();    byte[] itemHash=md.digest(v);    BigInteger val=new BigInteger(1,itemHash);    BigInteger item=DH_GROUP_PARAMETERS.getG().modPow(val,DH_GROUP_PARAMETERS.getP());    BigInteger blindedItem=item.modPow(x,DH_GROUP_PARAMETERS.getP());    this.blindedItems.add(blindedItem);  }  Collections.shuffle(this.blindedItems,random);}  }
class C{  public void handleNoSelection(){  removeAction.setEnabled(false);  resumeAction.setEnabled(false);  clearInactiveAction.setEnabled(false);  pauseAction.setEnabled(false);  exploreAction.setEnabled(false);  showInLibraryAction.setEnabled(false);  copyMagnetAction.setEnabled(false);  copyHashAction.setEnabled(false);  shareTorrentAction.setEnabled(false);  sendToItunesAction.setEnabled(false);  playSingleMediaFileAction.setEnabled(false);  BTDownloadActions.REMOVE_TORRENT_ACTION.setEnabled(false);  BTDownloadActions.REMOVE_TORRENT_AND_DATA_ACTION.setEnabled(false);  removeYouTubeAction.setEnabled(false);}  }
class C{  public AuthChallengeException(){  super();}  }
class C{  private SSLConfig configureLegacyGatewaySSL(SSLConfig sslConfig){  sslConfig.setCiphers(getDistributionConfig().getGatewaySSLCiphers());  sslConfig.setEnabled(getDistributionConfig().getGatewaySSLEnabled());  sslConfig.setKeystore(getDistributionConfig().getGatewaySSLKeyStore());  sslConfig.setKeystorePassword(getDistributionConfig().getGatewaySSLKeyStorePassword());  sslConfig.setKeystoreType(getDistributionConfig().getGatewaySSLKeyStoreType());  sslConfig.setTruststore(getDistributionConfig().getGatewaySSLTrustStore());  sslConfig.setTruststorePassword(getDistributionConfig().getGatewaySSLTrustStorePassword());  sslConfig.setProtocols(getDistributionConfig().getGatewaySSLProtocols());  sslConfig.setRequireAuth(getDistributionConfig().getGatewaySSLRequireAuthentication());  return sslConfig;}  }
class C{  public boolean equals(Object o2){  if (o2 instanceof Style) {    Style ss2=(Style)o2;    if (this.underline == ss2.underline && areEqual(foreground,ss2.foreground) && areEqual(background,ss2.background) && areEqual(font,ss2.font) && areEqual(fontMetrics,ss2.fontMetrics))     return true;  }  return false;}  }
class C{  static Meta.Frame frame(ResultSet resultSet,long offset,int fetchMaxRowCount,Calendar calendar) throws SQLException {  final ResultSetMetaData metaData=resultSet.getMetaData();  final int columnCount=metaData.getColumnCount();  final int[] types=new int[columnCount];  for (int i=0; i < types.length; i++) {    types[i]=metaData.getColumnType(i + 1);  }  final List<Object> rows=new ArrayList<>();  boolean done=fetchMaxRowCount == 0;  for (int i=0; fetchMaxRowCount < 0 || i < fetchMaxRowCount; i++) {    if (!resultSet.next()) {      done=true;      resultSet.close();      break;    }    Object[] columns=new Object[columnCount];    for (int j=0; j < columnCount; j++) {      columns[j]=getValue(resultSet,types[j],j,calendar);    }    rows.add(columns);  }  return new Meta.Frame(offset,done,rows);}  }
class C{  public static int flags(long memPtr){  return GridUnsafe.getInt(memPtr + MEM_HDR_OFF_FLAGS);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.953 -0400",hash_original_method="04E39E51E22AEC2B13BC19CC957BBEE0",hash_generated_method="82F0FA11A2B1327D2D560BACCF021942") public DrmInfoStatus(int _statusCode,int _infoType,ProcessedData _data,String _mimeType){  statusCode=_statusCode;  infoType=_infoType;  data=_data;  mimeType=_mimeType;}  }
class C{  public LogFileContent(String logFile){  setLogFile(logFile);}  }
class C{  protected void initialize(){  m_Rows=new Vector<JPanel>();  m_Labels=new Vector<JLabel>();  m_Parameters=new Vector<Component>();  m_PreferredDimensionJSpinner=new Dimension(100,20);}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public ProgressIndicator(){  this(null,null);}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemParam v=(ElemParam)handler.getElemTemplateElement();  handler.getStylesheet().appendChild(v);  handler.getStylesheet().setParam(v);  super.endElement(handler,uri,localName,rawName);}  }
class C{  private Object readResolve(){  if (iChronology == null) {    return new LocalTime(iLocalMillis,ISOChronology.getInstanceUTC());  }  if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {    return new LocalTime(iLocalMillis,iChronology.withUTC());  }  return this;}  }
class C{  public NotificationChain basicSetVersionConstraint(VersionConstraint newVersionConstraint,NotificationChain msgs){  VersionConstraint oldVersionConstraint=versionConstraint;  versionConstraint=newVersionConstraint;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DEPENDENCY__VERSION_CONSTRAINT,oldVersionConstraint,newVersionConstraint);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public SlowPathException(String message,Throwable cause){  super(message,cause);  CompilerDirectives.transferToInterpreterAndInvalidate();}  }
class C{  protected final void unexpectedEndOfInput(){  if (cacheRequest != null) {    cacheRequest.abort();  }  httpEngine.release(true);}  }
class C{  public void shallowScramble(PrefabValues prefabValues,TypeTag enclosingType){  for (  Field field : FieldIterable.ofIgnoringSuper(type)) {    FieldAccessor accessor=new FieldAccessor(object,field);    accessor.changeField(prefabValues,enclosingType);  }}  }
class C{  public void testConstructorSignBytesZero2(){  byte aBytes[]={-0,0,+0,0,0,00,000};  int aSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  FiringPlan guessFullFiringPlan(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,IGame game){  final String METHOD_NAME="guessFullFiringPlan(Entity, EntityState, Targetable, EntityState, IGame)";  if (shooterState == null) {    shooterState=new EntityState(shooter);  }  if (targetState == null) {    targetState=new EntityState(target);  }  FiringPlan myPlan=new FiringPlan(target);  if ((shooter.getPosition() == null) || shooter.isOffBoard() || !game.getBoard().contains(shooter.getPosition())) {    owner.log(getClass(),METHOD_NAME,LogLevel.ERROR,"Shooter's position is NULL/Off Board!");    return myPlan;  }  if ((target.getPosition() == null) || target.isOffBoard() || !game.getBoard().contains(target.getPosition())) {    owner.log(getClass(),METHOD_NAME,LogLevel.ERROR,"Target's position is NULL/Off Board!");    return myPlan;  }  for (  Mounted weapon : shooter.getWeaponList()) {    WeaponFireInfo shoot=buildWeaponFireInfo(shooter,shooterState,target,targetState,weapon,game,true);    if ((shooter instanceof Infantry) && (shooter.getWalkMP() == 0) && !(shooterState.getMovementType() == EntityMovementType.MOVE_NONE)) {      continue;    }    if ((shooter instanceof Infantry) && !(shooterState.getMovementType() == EntityMovementType.MOVE_NONE) && (shoot.getWeapon().getLocation() == Infantry.LOC_FIELD_GUNS)) {      continue;    }    if (shoot.getProbabilityToHit() > 0) {      myPlan.add(shoot);    }  }  calculateUtility(myPlan,calcHeatTolerance(shooter,null),shooterState.isAero());  return myPlan;}  }
class C{  @Deprecated public boolean needContentLength(){  return false;}  }
class C{  public static void mergeResources(RamlRoot raml,RamlResource resource,boolean addActions){  RamlResource existingResource=raml.getResource(resource.getRelativeUri());  if (existingResource == null) {    raml.addResource(resource.getRelativeUri(),resource);  } else {    mergeResources(existingResource,resource,addActions);  }}  }
class C{  public final long readLong() throws IOException {  readFully(readBuffer,0,8);  return (((long)readBuffer[0] << 56) + ((long)(readBuffer[1] & 255) << 48) + ((long)(readBuffer[2] & 255) << 40)+ ((long)(readBuffer[3] & 255) << 32)+ ((long)(readBuffer[4] & 255) << 24)+ ((readBuffer[5] & 255) << 16)+ ((readBuffer[6] & 255) << 8)+ ((readBuffer[7] & 255) << 0));}  }
class C{  private synchronized void determineLines(){  if (m_lineMap != null)   return;  int count=lineCountFor(m_text) + 1;  m_lineMap=new int[(2 * count) + 1];  int i=0;  int lineNum=0;  int startAt=0;  int endAt=0;  int length=m_text.length();  char c='\0';  while (i < length) {    c=m_text.charAt(i++);    if (c == '\n' || c == '\r') {      m_lineMap[2 * lineNum]=startAt;      m_lineMap[(2 * lineNum) + 1]=endAt;      lineNum++;      if (c == '\r' && i < length && m_text.charAt(i) == '\n')       i++;      startAt=i;      endAt=i;    } else     endAt++;  }  if (startAt != endAt) {    m_lineMap[2 * lineNum]=startAt;    m_lineMap[(2 * lineNum) + 1]=endAt;  }}  }
class C{  void updateRack(UpdateRackHeartbeat updateRack){  ClusterHeartbeat cluster=findCluster(updateRack.getClusterId());  if (cluster == null) {    return;  }  RackHeartbeat rack;  if (cluster != _serverSelf.getCluster()) {    rack=cluster.createRack("external");    ClusterTarget target=createClusterTarget(cluster);  } else {    rack=cluster.findRack(updateRack.getId());  }  if (rack == null) {    return;  }  rack.updateRack(this,updateRack);  updateHeartbeats();}  }
class C{  private String convertTimestamp(){  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + "+","\\\\S+");  result=result.replaceAll(Pattern.quote("."),"\\\\.");  return result;}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Populate database with data...");    DbH2ServerStartup.populateDatabase();    System.out.println();    System.out.println(">>> Cache auto store example started...");    try (IgniteCache<Long,Person> cache=ignite.getOrCreateCache(cacheConfiguration())){      try (Transaction tx=ignite.transactions().txStart()){        Person val=cache.get(id);        System.out.println(">>> Read value: " + val);        val=cache.getAndPut(id,new Person(id,1L,"Isaac","Newton",100.10,"English physicist and mathematician"));        System.out.println(">>> Overwrote old value: " + val);        val=cache.get(id);        System.out.println(">>> Read value: " + val);        System.out.println(">>> Update salary in transaction...");        val.salary*=2;        cache.put(id,val);        tx.commit();      }       System.out.println(">>> Read value after commit: " + cache.get(id));      cache.clear();      System.out.println(">>> ------------------------------------------");      System.out.println(">>> Load data to cache from DB with custom SQL...");      cache.loadCache(null,"java.lang.Long","select * from PERSON where id <= 3");      System.out.println(">>> Loaded cache entries: " + cache.size());      cache.clear();      System.out.println(">>> Load ALL data to cache from DB...");      cache.loadCache(null);      System.out.println(">>> Loaded cache entries: " + cache.size());    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public static int readUShort(ByteBuffer buffer){  short s=buffer.getShort();  return s & 0xffff;}  }
class C{  public static boolean isRotationEnabled(Context context){  return android.provider.Settings.System.getInt(context.getContentResolver(),Settings.System.ACCELEROMETER_ROTATION,0) == 1;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider02(){  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  try {    KeyManagerFactory.getInstance(null,defaultProvider);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i],defaultProvider);      fail("Expected NuSuchAlgorithmException was not thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public double quadraticMean(){  return quadraticMean.reduce(this);}  }
class C{  public void onReqOpenOrders() throws BrokerModelException {  if (m_client.isConnected()) {    openOrders.clear();    m_client.reqOpenOrders();  } else {    throw new BrokerModelException(0,3010,"Not conected to TWS historical data cannot be retrieved");  }}  }
class C{  protected boolean isBackendExpand(String uri){  return ruleFeaturesProvider.isFeatureRequest(EXPAND_ON_BACKEND,uri);}  }
class C{  public X500PrivateCredential(X509Certificate cert,PrivateKey key,String alias){  if (cert == null || key == null || alias == null)   throw new IllegalArgumentException();  this.cert=cert;  this.key=key;  this.alias=alias;}  }
class C{  @Deprecated public SelectionInputDialog(String key,boolean editable,T[] selectionValues,T initialSelectionValue,Object... keyArguments){  this(ApplicationFrame.getApplicationFrame(),key,editable,selectionValues,initialSelectionValue,keyArguments);}  }
class C{  public MalformedStreamException(String message){  super(message);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TENUM__AST_ELEMENT:    setAstElement((EObject)null);  return;case TypesPackage.TENUM__EXTERNAL:setExternal(EXTERNAL_EDEFAULT);return;case TypesPackage.TENUM__LITERALS:getLiterals().clear();return;}super.eUnset(featureID);}  }
class C{  public SQLAutoIndentStrategy(String partitioning,SQLSyntaxManager syntaxManager){  this.partitioning=partitioning;  this.syntaxManager=syntaxManager;}  }
class C{  @Override public void requestReceived(TOMMessage msg){  if (!doWork)   return;  boolean readOnly=(msg.getReqType() == TOMMessageType.UNORDERED_REQUEST || msg.getReqType() == TOMMessageType.UNORDERED_HASHED_REQUEST);  if (readOnly) {    dt.deliverUnordered(msg,syncher.getLCManager().getLastReg());  } else {    if (clientsManager.requestReceived(msg,true,communication)) {      haveMessages();    } else {      Logger.println("(TOMLayer.requestReceive) the received TOMMessage " + msg + " was discarded.");    }  }}  }
class C{  public static void onTrimMemory(Activity activity,int level){  String activityName=(null != activity) ? activity.getClass().getSimpleName() : "NotAvailable";  Log.e(LOW_MEMORY_LOG_TAG,"Active application : onTrimMemory from " + activityName + " level="+ level);  displayMemoryInformation(activity);}  }
class C{  public void testGetSecretKey(){  SecretKey sk=new tmpSecretKey();  KeyStore.SecretKeyEntry ske=new KeyStore.SecretKeyEntry(sk);  assertEquals("Incorrect SecretKey",sk,ske.getSecretKey());}  }
class C{  public DataFilterCriterion(String filterColumn,DataFilterOperator operator,Object filterValue){  this.filterColumn=filterColumn;  this.filterOperator=operator;  this.filterValue=filterValue;}  }
class C{  public MapOptions streetViewControl(boolean streetViewControl){  this.streetViewControl=streetViewControl;  return this;}  }
class C{  private boolean isFragmentShown(Class<? extends Fragment> claz){  Fragment currFragment=getFragmentManager().findFragmentById(R.id.frame_contents);  return (currFragment == null && claz == null) || (currFragment != null && claz.isInstance(currFragment));}  }
class C{  public Boolean push(Value request){  String queue_key=request.getFirstChild("queue_name").strValue();  if (has_queue(queue_key)) {    Value element=request.getFirstChild("element");    LinkedList queue=queue_map.get(queue_key);    queue.offerLast(element);    return true;  } else {    return false;  }}  }
class C{  public boolean isDocOrdered(){  return m_exprObj.isDocOrdered();}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  s.append(V + " " + E+ NEWLINE);  for (int v=0; v < V; v++) {    s.append(v + ":  ");    for (    FlowEdge e : adj[v]) {      if (e.to() != v)       s.append(e + "  ");    }    s.append(NEWLINE);  }  return s.toString();}  }
class C{  public void removeColumn(TableColumn column){  int columnIndex=tableColumns.indexOf(column);  if (columnIndex != -1) {    if (selectionModel != null) {      selectionModel.removeIndexInterval(columnIndex,columnIndex);    }    column.removePropertyChangeListener(this);    tableColumns.removeElementAt(columnIndex);    invalidateWidthCache();    fireColumnRemoved(new TableColumnModelEvent(this,columnIndex,0));  }}  }
class C{  public static Value concreteRef(Value val){  if (val == null)   return null;  if (val instanceof ConcreteRef)   return val;  return null;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static void replace(Tag src,Tag trg,boolean moveBody){  trg.setParent(src.getParent());  Body p=(Body)src.getParent();  List<Statement> stats=p.getStatements();  Iterator<Statement> it=stats.iterator();  Statement stat;  int count=0;  while (it.hasNext()) {    stat=it.next();    if (stat == src) {      if (moveBody && src.getBody() != null)       src.getBody().setParent(trg);      stats.set(count,trg);      break;    }    count++;  }}  }
class C{  private int F(int v){  return ((s0[v >>> 24] + s1[(v >> 16) & 0xff]) ^ s2[(v >> 8) & 0xff]) + s3[v & 0xff];}  }
class C{  public static Matrix constructWithCopy(double[][] A){  int m=A.length;  int n=A[0].length;  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public static void toggleWatched(Context context,String episode,String season,String link,boolean forceWatched){  int watched=1;  if (!forceWatched && isWatched(context,episode,season)) {    watched=0;  }  ContentValues values=new ContentValues();  values.put(TrackingTable.COLUMN_EPISODE,episode);  values.put(TrackingTable.COLUMN_SEASON,season);  values.put(TrackingTable.COLUMN_LINK,link);  values.put(TrackingTable.COLUMN_WATCHED,watched);  final ContentResolver resolver=context.getApplicationContext().getContentResolver();  if (resolver.update(TrackingContentProvider.CONTENT_URI,values,TrackingTable.COLUMN_EPISODE + "='" + episode+ "' AND "+ TrackingTable.COLUMN_SEASON+ "='"+ season+ "'",null) < 1) {    resolver.insert(TrackingContentProvider.CONTENT_URI,values);  }}  }
class C{  public void testSimple(){  TextBuffer tb=new TextBuffer(new BufferRecycler());  tb.append('a');  tb.append(new char[]{'X','b'},1,1);  tb.append("c",0,1);  assertEquals(3,tb.contentsAsArray().length);  assertEquals("abc",tb.toString());  assertNotNull(tb.expandCurrentSegment());}  }
class C{  public HouseName(){  super(KEY);}  }
class C{  public static String signMessage(String messageToSign) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException, UnsupportedEncodingException {  String signingAlgoUri=getSigningAlgorithmUri();  SignatureAlgorithm algo=SignatureAlgorithm.getSignatureAlgorithmForURI(signingAlgoUri);  Signature sig=Signature.getInstance(algo.getAlgorithmName());  sig.initSign(TestUtils.getPrivateKey());  byte[] messageBytes=messageToSign.getBytes();  sig.update(messageBytes);  byte[] sigBytes=sig.sign();  return URLEncoder.encode(SharedUtils.encodeBytes(sigBytes),"UTF-8");}  }
class C{  public static TemplateQueryBuilder templateQuery(Template template){  return new TemplateQueryBuilder(template);}  }
class C{  public static void addDataDictionary(Instances trainHeader,PMML pmml){  DataDictionary dictionary=new DataDictionary();  for (int i=0; i < trainHeader.numAttributes(); i++) {    String name=trainHeader.attribute(i).name();    OPTYPE optype=getOPTYPE(trainHeader.attribute(i).type());    DataField field=new DataField(name,optype);    if (trainHeader.attribute(i).isNominal()) {      for (int j=0; j < trainHeader.attribute(i).numValues(); j++) {        Value val=new Value(trainHeader.attribute(i).value(j));        field.addValue(val);      }    }    dictionary.addDataField(field);  }  pmml.setDataDictionary(dictionary);}  }
class C{  public int compareTypeSave(Value a,Value b){  return a.compareTypeSave(b,compareMode);}  }
class C{  @Override public BufferedImage createDropShadow(BufferedImage source){  BufferedImage subject=new BufferedImage(source.getWidth() + this.shadowSize * 2,source.getHeight() + this.shadowSize * 2,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=subject.createGraphics();  g2.drawImage(source,null,this.shadowSize,this.shadowSize);  g2.dispose();  applyShadow(subject);  return subject;}  }
class C{  public void sortRules(){  Collections.sort(_rules);}  }
class C{  public MessageHeader entryAt(int n){  return entries.elementAt(n);}  }
class C{  private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){  Class refClass=left.getClass();  Method[] methods=refClass.getMethods();  for (  Method method : methods) {    boolean contain=false;    Name nameAnn=method.getAnnotation(Name.class);    if (nameAnn == null) {      continue;    }    String key=nameAnn.value();    if (contained != null && contained.contains(key)) {      contain=true;    } else     if (included != null && !included.contains(key)) {      continue;    }    if (excluded.contains(key)) {      continue;    }    Class type=method.getReturnType();    try {      Object obja=method.invoke(left);      Object objb=method.invoke(right);      if (type == StringSet.class) {        if (contain) {          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);        } else {          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);        }      } else       if (type == StringMap.class) {        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);      } else       if (type == StringSetMap.class) {        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);      } else {        if (!isEqual(obja,objb)) {          Change change=new Change(key,obja,objb,nameAnn.value());          changes.put(key,change);        }      }    } catch (    IllegalAccessException ex) {      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});    }catch (    InvocationTargetException ex) {      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});    }  }}  }
class C{  public void drawHorizontalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column){  BoxAndWhiskerCategoryDataset bawDataset=(BoxAndWhiskerCategoryDataset)dataset;  double categoryEnd=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  double categoryStart=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  double categoryWidth=Math.abs(categoryEnd - categoryStart);  double yy=categoryStart;  int seriesCount=getRowCount();  int categoryCount=getColumnCount();  if (seriesCount > 1) {    double seriesGap=dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));    double usedWidth=(state.getBarWidth() * seriesCount) + (seriesGap * (seriesCount - 1));    double offset=(categoryWidth - usedWidth) / 2;    yy=yy + offset + (row * (state.getBarWidth() + seriesGap));  } else {    double offset=(categoryWidth - state.getBarWidth()) / 2;    yy=yy + offset;  }  g2.setPaint(getItemPaint(row,column));  Stroke s=getItemStroke(row,column);  g2.setStroke(s);  RectangleEdge location=plot.getRangeAxisEdge();  Number xQ1=bawDataset.getQ1Value(row,column);  Number xQ3=bawDataset.getQ3Value(row,column);  Number xMax=bawDataset.getMaxRegularValue(row,column);  Number xMin=bawDataset.getMinRegularValue(row,column);  Shape box=null;  if (xQ1 != null && xQ3 != null && xMax != null && xMin != null) {    double xxQ1=rangeAxis.valueToJava2D(xQ1.doubleValue(),dataArea,location);    double xxQ3=rangeAxis.valueToJava2D(xQ3.doubleValue(),dataArea,location);    double xxMax=rangeAxis.valueToJava2D(xMax.doubleValue(),dataArea,location);    double xxMin=rangeAxis.valueToJava2D(xMin.doubleValue(),dataArea,location);    double yymid=yy + state.getBarWidth() / 2.0;    double halfW=(state.getBarWidth() / 2.0) * this.whiskerWidth;    box=new Rectangle2D.Double(Math.min(xxQ1,xxQ3),yy,Math.abs(xxQ1 - xxQ3),state.getBarWidth());    if (this.fillBox) {      g2.fill(box);    }    Paint outlinePaint=getItemOutlinePaint(row,column);    if (this.useOutlinePaintForWhiskers) {      g2.setPaint(outlinePaint);    }    g2.draw(new Line2D.Double(xxMax,yymid,xxQ3,yymid));    g2.draw(new Line2D.Double(xxMax,yymid - halfW,xxMax,yymid + halfW));    g2.draw(new Line2D.Double(xxMin,yymid,xxQ1,yymid));    g2.draw(new Line2D.Double(xxMin,yymid - halfW,xxMin,yymid + halfW));    g2.setStroke(getItemOutlineStroke(row,column));    g2.setPaint(outlinePaint);    g2.draw(box);  }  g2.setPaint(this.artifactPaint);  double aRadius;  if (this.meanVisible) {    Number xMean=bawDataset.getMeanValue(row,column);    if (xMean != null) {      double xxMean=rangeAxis.valueToJava2D(xMean.doubleValue(),dataArea,location);      aRadius=state.getBarWidth() / 4;      if ((xxMean > (dataArea.getMinX() - aRadius)) && (xxMean < (dataArea.getMaxX() + aRadius))) {        Ellipse2D.Double avgEllipse=new Ellipse2D.Double(xxMean - aRadius,yy + aRadius,aRadius * 2,aRadius * 2);        g2.fill(avgEllipse);        g2.draw(avgEllipse);      }    }  }  if (this.medianVisible) {    Number xMedian=bawDataset.getMedianValue(row,column);    if (xMedian != null) {      double xxMedian=rangeAxis.valueToJava2D(xMedian.doubleValue(),dataArea,location);      g2.draw(new Line2D.Double(xxMedian,yy,xxMedian,yy + state.getBarWidth()));    }  }  if (state.getInfo() != null && box != null) {    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addItemEntity(entities,dataset,row,column,box);    }  }}  }
class C{  public JSONObject put(String name,boolean value){  put(name,JSON.value(value));  return this;}  }
class C{  public Insert defaultValues(){  defaultValues=true;  columns.clear();  valuesToInsert.clear();  query=null;  invalidateCompileCache();  return this;}  }
class C{  protected ASN1Primitive buildObject(int tag,int tagNo,int length) throws IOException {  boolean isConstructed=(tag & CONSTRUCTED) != 0;  DefiniteLengthInputStream defIn=new DefiniteLengthInputStream(this,length);  if ((tag & APPLICATION) != 0) {    return new DERApplicationSpecific(isConstructed,tagNo,defIn.toByteArray());  }  if ((tag & TAGGED) != 0) {    return new ASN1StreamParser(defIn).readTaggedObject(isConstructed,tagNo);  }  if (isConstructed) {switch (tagNo) {case OCTET_STRING:      ASN1EncodableVector v=buildDEREncodableVector(defIn);    ASN1OctetString[] strings=new ASN1OctetString[v.size()];  for (int i=0; i != strings.length; i++) {    strings[i]=(ASN1OctetString)v.get(i);  }return new BEROctetString(strings);case SEQUENCE:if (lazyEvaluate) {return new LazyEncodedSequence(defIn.toByteArray());} else {return DERFactory.createSequence(buildDEREncodableVector(defIn));}case SET:return DERFactory.createSet(buildDEREncodableVector(defIn));case EXTERNAL:return new DERExternal(buildDEREncodableVector(defIn));default :throw new IOException("unknown tag " + tagNo + " encountered");}}return createPrimitiveDERObject(tagNo,defIn,tmpBuffers);}  }
class C{  public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  int i=name.lastIndexOf('.');  if (i != -1) {    SecurityManager sm=System.getSecurityManager();    if (sm != null) {      sm.checkPackageAccess(name.substring(0,i));    }  }  if (ucp.knownToNotExist(name)) {    Class<?> c=findLoadedClass(name);    if (c != null) {      if (resolve) {        resolveClass(c);      }      return c;    }    throw new ClassNotFoundException(name);  }  return (super.loadClass(name,resolve));}  }
class C{  public boolean isUltraSparse(int rows,int cols){  double sp=((double)nnz / rows / cols);  return sp < ULTRA_SPARSITY_TURN_POINT;}  }
class C{  private void validateEntries(){  for (int i=myEntriesList.size() - 1; i >= 0; i--) {    final HistoryEntry entry=myEntriesList.get(i);    if (!entry.myFile.isValid()) {      myEntriesList.remove(i);    }  }}  }
class C{  private void dumpRCCStack(PrintWriter pw){  pw.println("\nRemote Control Client stack entries (last is top of stack):");synchronized (mRCStack) {    Iterator<RemoteControlStackEntry> stackIterator=mRCStack.iterator();    while (stackIterator.hasNext()) {      RemoteControlStackEntry rcse=stackIterator.next();      pw.println("  uid: " + rcse.mCallingUid + "  -- id: "+ rcse.mRccId+ "  -- type: "+ rcse.mPlaybackType+ "  -- state: "+ rcse.mPlaybackState+ "  -- vol handling: "+ rcse.mPlaybackVolumeHandling+ "  -- vol: "+ rcse.mPlaybackVolume+ "  -- volMax: "+ rcse.mPlaybackVolumeMax+ "  -- volObs: "+ rcse.mRemoteVolumeObs);    }synchronized (mCurrentRcLock) {      pw.println("\nCurrent remote control generation ID = " + mCurrentRcClientGen);    }  }synchronized (mMainRemote) {    pw.println("\nRemote Volume State:");    pw.println("  has remote: " + mHasRemotePlayback);    pw.println("  is remote active: " + mMainRemoteIsActive);    pw.println("  rccId: " + mMainRemote.mRccId);    pw.println("  volume handling: " + ((mMainRemote.mVolumeHandling == RemoteControlClient.PLAYBACK_VOLUME_FIXED) ? "PLAYBACK_VOLUME_FIXED(0)" : "PLAYBACK_VOLUME_VARIABLE(1)"));    pw.println("  volume: " + mMainRemote.mVolume);    pw.println("  volume steps: " + mMainRemote.mVolumeMax);  }}  }
class C{  private static boolean hasAppleRetinaDevice(){  return (Float)Toolkit.getDefaultToolkit().getDesktopProperty("apple.awt.contentScaleFactor") != 1.0f;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode07.class,args);}  }
class C{  public boolean isExpandEntityReferences(){  return false;}  }
class C{  private void ensureReadCacheInit(){  assert reader != null;  if (readCache == null) {    int fieldIdLen=BinaryUtils.fieldIdLength(flags);    int fieldOffsetLen=BinaryUtils.fieldOffsetLength(flags);    BinarySchema schema=reader.schema();    Map<Integer,Object> readCache=new HashMap<>();    IgniteBiTuple<Integer,Integer> footer=BinaryUtils.footerAbsolute(reader,start);    int footerPos=footer.get1();    int footerEnd=footer.get2();    int rawPos=BinaryUtils.rawOffsetAbsolute(reader,start);    int idx=0;    while (footerPos + fieldIdLen < footerEnd) {      int fieldId=schema.fieldId(idx++);      IgniteBiTuple<Integer,Integer> posAndLen=fieldPositionAndLength(footerPos,footerEnd,rawPos,fieldIdLen,fieldOffsetLen);      Object val=reader.getValueQuickly(posAndLen.get1(),posAndLen.get2());      readCache.put(fieldId,val);      footerPos+=fieldIdLen + fieldOffsetLen;    }    this.readCache=readCache;  }}  }
class C{  @Override public String toString(String f){  StringBuilder buffer=new StringBuilder();  if (field != null && !field.equals(f)) {    buffer.append(field);    buffer.append(":");  }  buffer.append("\"");  final int maxPosition;  if (positions.length == 0) {    maxPosition=-1;  } else {    maxPosition=positions[positions.length - 1];  }  String[] pieces=new String[maxPosition + 1];  for (int i=0; i < terms.length; i++) {    int pos=positions[i];    String s=pieces[pos];    if (s == null) {      s=(terms[i]).text();    } else {      s=s + "|" + (terms[i]).text();    }    pieces[pos]=s;  }  for (int i=0; i < pieces.length; i++) {    if (i > 0) {      buffer.append(' ');    }    String s=pieces[i];    if (s == null) {      buffer.append('?');    } else {      buffer.append(s);    }  }  buffer.append("\"");  if (slop != 0) {    buffer.append("~");    buffer.append(slop);  }  return buffer.toString();}  }
class C{  @SuppressWarnings("UnusedParameters") protected ByteBuf extractObject(ChannelHandlerContext ctx,ByteBuf buffer,int index,int length){  return buffer.slice(index,length).retain();}  }
class C{  public static void expire(long threshold){  for (int i=0; i < pools.length; i++) {    if (pools[i] != null) {      pools[i].expire(threshold);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void removeListener(INotifyChangedListener notifyChangedListener){  changeNotifier.removeListener(notifyChangedListener);}  }
class C{  public void writeModel(DbfTableModel model) throws IOException {  int rowCount=model.getRowCount();  short headerLength=calcHeaderLength(model);  short recordLength=calcRecordLength(model);  writeHeader(rowCount,headerLength,recordLength);  writeFieldDescriptors(model);  writeRecords(model);  close();}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public void calculateIntegratePartials(double[] inPartials,double[] proportions,double[] outPartials){  int u=0;  int v=0;  for (int k=0; k < patternCount; k++) {    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;  }  for (int j=1; j < matrixCount; j++) {    u=0;    for (int k=0; k < patternCount; k++) {      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;    }  }}  }
class C{  public final void init(KeyStore ks,char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {  spiImpl.engineInit(ks,password);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public SQLNonTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  public final double meanPriorAbsoluteError(){  return m_delegate.meanPriorAbsoluteError();}  }
class C{  public boolean isRotationNeeded(final String data,final File file){  m_currentSize+=data.length();  return m_currentSize >= m_maxSize;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_LIMIT_STACK_SIZE:    return "CU_LIMIT_STACK_SIZE";case CU_LIMIT_PRINTF_FIFO_SIZE:  return "CU_LIMIT_PRINTF_FIFO_SIZE";case CU_LIMIT_MALLOC_HEAP_SIZE:return "CU_LIMIT_MALLOC_HEAP_SIZE";case CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH:return "CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH";case CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT:return "CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT";}return "INVALID CUlimit: " + n;}  }
class C{  public void testSystemRunFinalizationReturnsEvenIfQueueIsNonEmpty() throws Exception {  AtomicInteger count=new AtomicInteger();  AtomicBoolean keepGoing=new AtomicBoolean(true);  createChainedFinalizer(count,keepGoing);  while (count.get() == 0) {    Thread.sleep(500);    FinalizationTester.induceFinalization();  }  keepGoing.set(false);  assertTrue(count.get() > 0);}  }
class C{  private static RegisterPriority registerPriorityOfOutputOperand(LIRInstruction op){  if (op instanceof LabelOp) {    return RegisterPriority.None;  }  if (op instanceof ValueMoveOp) {    ValueMoveOp move=(ValueMoveOp)op;    if (optimizeMethodArgument(move.getInput())) {      return RegisterPriority.None;    }  }  return RegisterPriority.MustHaveRegister;}  }
class C{  public CSVParser(char separator,char quotechar){  this(separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public FileInfo findNameFile(String name){  return files.get(name);}  }
class C{  @ObjectiveCName("subscribeToDownloads:") public void subscribeToDownloads(FileEventCallback callback){  modules.getFilesModule().subscribe(callback);}  }
class C{  public static Label createWrapLabel(Composite parent,String text,int hspan,int wrapwidth){  Label l=new Label(parent,SWT.NONE | SWT.WRAP);  l.setFont(parent.getFont());  l.setText(text);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  gd.widthHint=wrapwidth;  l.setLayoutData(gd);  return l;}  }
class C{  @Override @SuppressWarnings("unchecked") public void loadCachedGamePropertiesInto(final GameData gameData){  final File cache=getCacheFile(gameData);  try {    if (cache.exists()) {      final ObjectInputStream in=new ObjectInputStream(new FileInputStream(cache));      final Map<String,Serializable> serializedMap=(Map<String,Serializable>)in.readObject();      for (      final IEditableProperty property : gameData.getProperties().getEditableProperties()) {        final Serializable ser=serializedMap.get(property.getName());        if (ser != null) {          property.setValue(ser);        }      }      in.close();    }  } catch (  IOException|ClassNotFoundException e) {    ClientLogger.logQuietly(e);  }}  }
class C{  public static ConditionOperand CMPG_LESS(){  return new ConditionOperand(CMPG_LESS);}  }
class C{  public void fetchThumbnailOnThread(final ImageView imageView){  if (mThumbnail != null) {    imageView.setImageBitmap(mThumbnail);    imageView.setVisibility(View.VISIBLE);  } else   if (mThumbnailPath != null) {    imageView.setVisibility(View.GONE);    new ThumbnailTask(imageView).execute(imageView);  } else {    imageView.setVisibility(View.GONE);  }}  }
class C{  public static <T extends Date>T firstOfYear(T ts){  checkNotNull(ts);  T cloned=(T)ts.clone();  cloned.setTime(new DateTime(ts.getTime()).withTime(0,0,0,0).withDayOfMonth(1).withDayOfYear(1).getMillis());  return cloned;}  }
class C{  public static Locale toLocale(String strLocale,Locale defaultValue){  return LocaleFactory.getLocale(strLocale,defaultValue);}  }
