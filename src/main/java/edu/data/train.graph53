class C{  private boolean isRecaptchaFlowRequired(){  if ((null != mRegistrationResponse) && (null != mRegistrationResponse.flows)) {    for (    LoginFlow loginFlow : mRegistrationResponse.flows) {      if ((loginFlow.stages.indexOf(LoginRestClient.LOGIN_FLOW_TYPE_EMAIL_RECAPTCHA) < 0) && !TextUtils.equals(loginFlow.type,LoginRestClient.LOGIN_FLOW_TYPE_EMAIL_RECAPTCHA)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public boolean isCrossesDateline(){  return this.crossesDateline;}  }
class C{  private static void write0(Scriptable thisObj,Object[] args,boolean eol) throws IOException {  File thisFile=checkInstance(thisObj);  if (thisFile.reader != null) {    throw Context.reportRuntimeError("already writing file \"" + thisFile.name + "\"");  }  if (thisFile.writer == null)   thisFile.writer=new BufferedWriter(thisFile.file == null ? new OutputStreamWriter(System.out) : new FileWriter(thisFile.file));  for (int i=0; i < args.length; i++) {    String s=Context.toString(args[i]);    thisFile.writer.write(s,0,s.length());  }  if (eol)   thisFile.writer.newLine();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildHideoutArea(zone);}  }
class C{  public void writeSwitchPageAttribute(byte page) throws IOException {  if (pageAttrState != page) {    pageAttrState=page;    write(WbXmlLiterals.SWTICH_PAGE);    write(pageAttrState);  }}  }
class C{  @Autowired public SettleCashFromCashierCommandHandler(final TellerWritePlatformService writePlatformService){  super();  this.writePlatformService=writePlatformService;}  }
class C{  protected double categoryUtility() throws Exception {  if (m_children == null) {    throw new Exception("categoryUtility: No children!");  }  double totalCU=0;  for (int i=0; i < m_children.size(); i++) {    CNode child=m_children.get(i);    totalCU+=categoryUtilityChild(child);  }  totalCU/=m_children.size();  return totalCU;}  }
class C{  private static void registerDebuggerKeys(final JFrame parent,final ZyGraph graph,final IFrontEndDebuggerProvider debuggerProvider,final InputMap inputMap,final ActionMap actionMap){  final CStepIntoHotkeyAction stepIntoAction=new CStepIntoHotkeyAction(parent,debuggerProvider);  final CStepOverHotkeyAction stepOverAction=new CStepOverHotkeyAction(parent,graph,debuggerProvider);  final CStepBlockHotkeyAction stepBlockAction=new CStepBlockHotkeyAction(parent,graph,debuggerProvider);  final CResumeHotkeyAction resumeAction=new CResumeHotkeyAction(parent,debuggerProvider);  inputMap.put(HotKeys.DEBUGGER_SINGLE_STEP_KEY.getKeyStroke(),"SINGLE_STEP");  actionMap.put("SINGLE_STEP",stepIntoAction);  inputMap.put(HotKeys.DEBUGGER_STEP_OVER_KEY.getKeyStroke(),"STEP_OVER");  actionMap.put("STEP_OVER",stepOverAction);  inputMap.put(HotKeys.DEBUGGER_STEP_BLOCK_KEY.getKeyStroke(),"STEP_BLOCK");  actionMap.put("STEP_BLOCK",stepBlockAction);  inputMap.put(HotKeys.DEBUGGER_RESUME_KEY.getKeyStroke(),"RESUME");  actionMap.put("RESUME",resumeAction);}  }
class C{  public boolean isMutableRendererBackgrounds(){  return mutableRendererBackgrounds;}  }
class C{  public void restoreActive(int pos){  if (pos > array.length) {    throw new IllegalArgumentException("cannot set active " + "region past end of input");  }  end=pos;}  }
class C{  public void add(String key,T object){  if (!entries.containsKey(key)) {    entries.put(key,new HashSet<>());  }  entries.get(key).add(object);  if (!locations.containsKey(object)) {    locations.put(object,new HashSet<>());  }  locations.get(object).add(key);  addEventListeners.publish(new AddEvent<>(key,object));}  }
class C{  private WroManagerFactory initFactory(final Properties properties){  WroManagerFactory factory=null;  final String wroManagerClassName=properties.getProperty(ConfigConstants.managerFactoryClassName.name());  if (StringUtils.isEmpty(wroManagerClassName)) {    factory=newManagerFactory();  } else {    Class<?> factoryClass=null;    try {      factoryClass=Thread.currentThread().getContextClassLoader().loadClass(wroManagerClassName);      factory=(WroManagerFactory)factoryClass.newInstance();    } catch (    final Exception e) {      throw new WroRuntimeException("Exception while loading WroManagerFactory class:" + wroManagerClassName,e);    }  }  if (factory instanceof ConfigurableWroManagerFactory) {    ((ConfigurableWroManagerFactory)factory).addConfigProperties(properties);  }  return factory;}  }
class C{  public static String payPalIPN(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore == null) {    Debug.logError("ProductStore is null",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  GenericValue paymentConfig=ProductStoreWorker.getProductStorePaymentSetting(delegator,productStore.getString("productStoreId"),"EXT_PAYPAL",null,true);  String configString=null;  String paymentGatewayConfigId=null;  if (paymentConfig != null) {    paymentGatewayConfigId=paymentConfig.getString("paymentGatewayConfigId");    configString=paymentConfig.getString("paymentPropertiesPath");  }  if (configString == null) {    configString="payment.properties";  }  String confirmUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"confirmUrl",configString,"payment.paypal.confirm");  String redirectUrl=getPaymentGatewayConfigValue(delegator,paymentGatewayConfigId,"redirectUrl",configString,"payment.paypal.redirect");  if (UtilValidate.isEmpty(confirmUrl) || UtilValidate.isEmpty(redirectUrl)) {    Debug.logError("Payment properties is not configured properly, no confirm URL defined!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingMerchantConfiguration",locale));    return "error";  }  Map<String,Object> parametersMap=UtilHttp.getParameterMap(request);  parametersMap.put("cmd","_notify-validate");  String confirmResp=null;  try {    String str=UtilHttp.urlEncodeArgs(parametersMap);    URL u=new URL(redirectUrl);    URLConnection uc=u.openConnection();    uc.setDoOutput(true);    uc.setRequestProperty("Content-Type","application/x-www-form-urlencoded");    PrintWriter pw=new PrintWriter(uc.getOutputStream());    pw.println(str);    pw.close();    BufferedReader in=new BufferedReader(new InputStreamReader(uc.getInputStream()));    confirmResp=in.readLine();    in.close();    Debug.logError("PayPal Verification Response: " + confirmResp,module);  } catch (  IOException e) {    Debug.logError(e,"Problems sending verification message",module);  }  Debug.logInfo("Got verification from PayPal, processing..",module);  boolean verified=false;  for (  String name : parametersMap.keySet()) {    String value=request.getParameter(name);    Debug.logError("### Param: " + name + " => "+ value,module);    if (UtilValidate.isNotEmpty(name) && "payer_status".equalsIgnoreCase(name) && UtilValidate.isNotEmpty(value)&& "verified".equalsIgnoreCase(value)) {      verified=true;    }  }  if (!verified) {    Debug.logError("###### PayPal did not verify this request, need investigation!",module);  }  GenericValue userLogin=null;  try {    userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot get UserLogin for: system; cannot continue",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingAuthenticationUser",locale));    return "error";  }  String orderId=request.getParameter("invoice");  GenericValue orderHeader=null;  if (UtilValidate.isNotEmpty(orderId)) {    try {      orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get the order header for order: " + orderId,module);      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingOrderHeader",locale));      return "error";    }  } else {    Debug.logError("PayPal did not callback with a valid orderId!",module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.noValidOrderIdReturned",locale));    return "error";  }  if (orderHeader == null) {    Debug.logError("Cannot get the order header for order: " + orderId,module);    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.problemsGettingOrderHeader",locale));    return "error";  }  String paymentStatus=request.getParameter("payment_status");  boolean okay=true;  boolean beganTransaction=false;  try {    beganTransaction=TransactionUtil.begin();    if (paymentStatus.equals("Completed")) {      okay=OrderChangeHelper.approveOrder(dispatcher,userLogin,orderId);    } else     if (paymentStatus.equals("Failed") || paymentStatus.equals("Denied")) {      okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);    }    if (okay) {      okay=setPaymentPreferences(delegator,dispatcher,userLogin,orderId,request);    }  } catch (  Exception e) {    String errMsg="Error handling PayPal notification";    Debug.logError(e,errMsg,module);    try {      TransactionUtil.rollback(beganTransaction,errMsg,e);    } catch (    GenericTransactionException gte2) {      Debug.logError(gte2,"Unable to rollback transaction",module);    }  } finally {    if (!okay) {      try {        TransactionUtil.rollback(beganTransaction,"Failure in processing PayPal callback",null);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to rollback transaction",module);      }    } else {      try {        TransactionUtil.commit(beganTransaction);      } catch (      GenericTransactionException gte) {        Debug.logError(gte,"Unable to commit transaction",module);      }    }  }  if (okay) {    OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);    Map<String,String> emailContext=UtilMisc.toMap("orderId",orderId);    try {      dispatcher.runSync("sendOrderConfirmation",emailContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problems sending email confirmation",module);    }  }  return "success";}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  private void logMissingResource(FacesContext ctx,String resourceName,String libraryName,Throwable t){  Level level;  if (!ctx.isProjectStage(ProjectStage.Production)) {    level=Level.WARNING;  } else {    level=((t != null) ? Level.WARNING : Level.FINE);  }  if (libraryName != null) {    if (LOGGER.isLoggable(level)) {      LOGGER.log(level,"jsf.application.resource.unable_to_serve_from_library",new Object[]{resourceName,libraryName});      if (t != null) {        LOGGER.log(level,"",t);      }    }  } else {    if (LOGGER.isLoggable(level)) {      LOGGER.log(level,"jsf.application.resource.unable_to_serve",new Object[]{resourceName});      if (t != null) {        LOGGER.log(level,"",t);      }    }  }}  }
class C{  public static <T extends DataObject>boolean collectionContains(Collection<T> col,T obj){  return findInCollection(col,obj) != null;}  }
class C{  public CodeNode createCodeNode(final Function function,final List<Instruction> instructions){  Preconditions.checkNotNull(instructions,"Error: Instructions argument can't be null");  final List<INaviInstruction> instructionsList=new ArrayList<INaviInstruction>();  for (  final Instruction instruction : instructions) {    Preconditions.checkNotNull(instruction,"Error: Instruction list contains a null-element");    instructionsList.add(instruction.getNative());  }  assert !instructions.isEmpty();  final CCodeNode newCodenode=naviView.getContent().createCodeNode(function == null ? null : function.getNative(),instructionsList);  newCodenode.setColor(ConfigManager.instance().getColorSettings().getBasicBlocksColor());  return (CodeNode)cachedNodes.get(newCodenode);}  }
class C{  public static boolean isInMyTracksAndValid(File driveFile,String folderId){  return isInMyTracks(driveFile,folderId) && !driveFile.getLabels().getTrashed();}  }
class C{  public void clear(){  Properties sysprops=System.getProperties();  sysprops.remove("http.proxyHost");  sysprops.remove("http.proxyPort");  sysprops.remove("http.proxyUser");  sysprops.remove("http.proxyPassword");  sysprops.remove("https.proxyHost");  sysprops.remove("https.proxyPort");  sysprops.remove("ftp.proxyHost");  sysprops.remove("ftp.proxyPort");  Authenticator.setDefault(new ProxyAuthenticator("",""));}  }
class C{  public void testGetTable_int(){  System.out.println("getTable");  int index=0;  Table expResult=new Table(new TableHelper(null),"testName","123");  TableDB.addTable(expResult);  Table result=TableDB.getTable(index);  assertEquals(expResult.getID(),result.getID());}  }
class C{  private void readConsistMemory(int consistNum,int eNum){  locoNum=eNum;  int nceMemAddr=(consistNum * 2) + NceCmdStationMemory.CabMemorySerial.CS_CONSIST_MEM;  if (eNum == REAR) {    nceMemAddr=(consistNum * 2) + NceCmdStationMemory.CabMemorySerial.CS_CON_MEM_REAR;  }  if (eNum == MID) {    nceMemAddr=(consistNum * 8) + NceCmdStationMemory.CabMemorySerial.CS_CON_MEM_MID;  }  byte[] bl=NceBinaryCommand.accMemoryRead(nceMemAddr);  sendNceMessage(bl,NceMessage.REPLY_16);}  }
class C{  private void reconcileChangeset(final Workspace workspace,final int changesetID,final boolean recursive){  Check.notNull(workspace,"workspace");  final Changeset changeset=workspace.getClient().getChangeset(changesetID);  final PendingSet set;  if (getFreeArguments().length == 0) {    set=workspace.getPendingChanges();  } else {    final String[] paths=getFreeArguments();    for (int i=0; i < paths.length; i++) {      if (ServerPath.isServerPath(paths[i]) == false) {        paths[i]=LocalPath.canonicalize(paths[i]);      }    }    final ItemSpec[] specs=new ItemSpec[paths.length];    for (int i=0; i < paths.length; i++) {      specs[i]=new ItemSpec(paths[i],recursive ? RecursionType.FULL : RecursionType.NONE);    }    set=workspace.getPendingChanges(specs,false);  }  final PendingChange[] pendingChanges=(set != null) ? set.getPendingChanges() : null;  if (pendingChanges == null || pendingChanges.length == 0) {    getDisplay().printLine(Messages.getString("CommandReconcile.ThereAreNoLocalPendingChangesToReconcile"));    return;  }  final ReconcilePendingChangesStatus findStatus=workspace.findReconcilablePendingChangesForChangeset(changeset,pendingChanges);  if (findStatus.matchedAtLeastOnePendingChange() == false) {    getDisplay().printLine(Messages.getString("CommandReconcile.NoPendingChangesFoundInChangeset"));    return;  }  final PendingChange[] reconcilablePendingChanges=findStatus.getReconcilablePendingChanges();  final String[] localItems=PendingChange.toLocalItems(reconcilablePendingChanges);  if (reconcilablePendingChanges.length == 0 || localItems.length == 0) {    getDisplay().printLine(Messages.getString("CommandReconcile.NoChangesCanBeAutomaticallyReconciled"));    return;  }  final ItemSpec[] getItemSpecs=new ItemSpec[localItems.length];  for (int i=0; i < localItems.length; i++) {    getItemSpecs[i]=new ItemSpec(localItems[i],RecursionType.NONE);  }  if (workspace.undo(getItemSpecs,GetOptions.NO_DISK_UPDATE) == 0) {    setExitCode(ExitCode.FAILURE);    return;  }  final GetRequest[] getRequests=GetRequest.createOptimizedRequests(workspace.getClient(),localItems,new ChangesetVersionSpec(changeset.getChangesetID()));  GetStatus status=null;  try {    TaskMonitorService.pushTaskMonitor(taskMonitor);    status=workspace.get(getRequests,GetOptions.OVERWRITE);  }  finally {    TaskMonitorService.popTaskMonitor();  }  if (status != null) {    if (status.isNoActionNeeded()) {    } else {      if (findOptionType(OptionNoSummary.class) == null) {        displayGetSummary(status);      }    }    setExitCode(ExitCode.SUCCESS);  }}  }
class C{  private static String findPrefixCommonToAll(List<String> input){  String result=null;  for (  String item : input) {    if (result == null) {      result=item;    } else     if (!item.toLowerCase().startsWith(result.toLowerCase())) {      result=findCommonPrefix(item,result);      if (result.isEmpty()) {        return result;      }    }  }  return result;}  }
class C{  public MachineTagsCollection findOccurrencesOfTag(String namespace,Integer index,String key){  MachineTagsCollection foundTags=new MachineTagsCollection();  for (  MachineTag searchTag : this) {    if (searchTag.isTag(namespace,key,index)) {      foundTags.add(searchTag);    }  }  return foundTags;}  }
class C{  public static IJavaElement findTypeContainer(IJavaProject jproject,String typeContainerName) throws JavaModelException {  IJavaElement result=jproject.findType(typeContainerName);  if (result == null) {    IPath path=new Path(typeContainerName.replace('.','/'));    result=jproject.findElement(path);    if (!(result instanceof IPackageFragment)) {      result=null;    }  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.AWAIT_EXPRESSION;}  }
class C{  private long determineGCD(long a,long b){  if (b == 0)   return a; else   return determineGCD(b,a % b);}  }
class C{  public void applyTemplates(Document document,String mode) throws Exception {  Mode mod=ruleManager.getMode(mode);  for (int i=0, size=document.nodeCount(); i < size; i++) {    Node node=document.node(i);    mod.fireRule(node);  }}  }
class C{  final public Chunk Chunk() throws ParseException {  Block b;  Chunk c;  long i=LineInfo();switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case 69:    jj_consume_token(69);  token_source.SwitchTo(IN_COMMENT);break;default :jj_la1[0]=jj_gen;;}b=Block();jj_consume_token(0);c=new Chunk(b);L(c,i);{if (true) return c;}throw new Error("Missing return statement in function");}  }
class C{  public static boolean equals(int[] field1,int[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  public static boolean isValidExtFilename(String name){  return (name != null) && name.equals(buildValidExtFilename(name));}  }
class C{  public void clearGeneratorCache(GenericClass target){  generatorCache.clear();}  }
class C{  public void add(ConfusionMatrix<T> other){  for (  T actual : other.matrix.keySet()) {    Multiset<T> counts=other.matrix.get(actual);    for (    T predicted : counts.elementSet()) {      int count=counts.count(predicted);      this.add(actual,predicted,count);    }  }}  }
class C{  public CompoundName(String n,Properties syntax) throws InvalidNameException {  if (syntax == null) {    throw new NullPointerException();  }  mySyntax=syntax;  impl=new NameImpl(syntax,n);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isRequestingQueryParam(final HttpServletRequest req,String queryParam){  if (req.getQueryString() != null && req.getQueryString().contains(queryParam)) {    try {      for (      String pair : req.getQueryString().split("&")) {        int eq=pair.indexOf("=");        String key;        String value=null;        if (eq < 0) {          key=URLDecoder.decode(pair,UTF8_ENCODING);        } else {          key=URLDecoder.decode(pair.substring(0,eq),UTF8_ENCODING);          value=URLDecoder.decode(pair.substring(eq + 1),UTF8_ENCODING);        }        if (key.equalsIgnoreCase(queryParam) && (value == null || value.equalsIgnoreCase("true"))) {          return true;        }      }    } catch (    UnsupportedEncodingException ex) {      _log.error("exception parsing query string",ex);      throw APIException.badRequests.parameterIsNotValidURI(URI.create(req.getQueryString()),ex);    }  }  return false;}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  private void closeDestination(State state){  try {    if (state.mStream != null) {      state.mStream.close();      state.mStream=null;    }  } catch (  IOException ex) {    if (Constants.LOGV) {      Log.v(Constants.TAG,"exception when closing the file after download : " + ex);    }  }}  }
class C{  public static StorageFileSystem parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageFileSystem object=new StorageFileSystem();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageFileSystem".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageFileSystem)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list3=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","uniqueIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUniqueIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","fileSystem").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setFileSystem(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","fileSystemInfo").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list3.add(null);        reader.next();      } else {        list3.add(FileSystemInfo.Factory.parse(reader));      }      boolean loopDone3=false;      while (!loopDone3) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone3=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","fileSystemInfo").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list3.add(null);              reader.next();            } else {              list3.add(FileSystemInfo.Factory.parse(reader));            }          } else {            loopDone3=true;          }        }      }      object.setFileSystemInfo((FileSystemInfo[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(FileSystemInfo.class,list3));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","fileSystemVersion").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setFileSystemVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","nativeSnapshotSupported").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setNativeSnapshotSupported(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","thinProvisioningStatus").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setThinProvisioningStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void notifyEntered(final ActiveEntity entity,final int newX,final int newY){  Rectangle2D eArea;  eArea=entity.getArea(newX,newY);  for (  final MovementListener l : movementListeners) {    Rectangle2D area=l.getArea();    if (area.intersects(eArea)) {      l.onEntered(entity,this,newX,newY);    }  }}  }
class C{  private void fillRect(WritableRaster raster,int x,int y,int width,int height,Color color){  for (int i=0; i < width; i++)   for (int j=0; j < height; j++)   putPixel(raster,x + i,y + j,color);}  }
class C{  static public JettyResponseListener checkResponseCode(final JettyResponseListener responseListener) throws IOException {  final int rc=responseListener.getStatus();  if (rc < 200 || rc >= 300) {    throw new HttpException(rc,"Status Code=" + rc + ", Status Line="+ responseListener.getReason()+ ", Response="+ responseListener.getResponseBody());  }  if (log.isDebugEnabled()) {    log.debug("*** Response ***");    log.debug("Status Line: " + responseListener.getReason());  }  return responseListener;}  }
class C{  private static int insertOrdered(char[] source,int start,int current,int p,char c,char c2,int cc){  int back, preBack;  int r;  int prevCC, trailCC=cc;  if (start < current && cc != 0) {    preBack=back=current;    PrevArgs prevArgs=new PrevArgs();    prevArgs.current=current;    prevArgs.start=start;    prevArgs.src=source;    prevCC=getPrevCC(prevArgs);    preBack=prevArgs.current;    if (cc < prevCC) {      trailCC=prevCC;      back=preBack;      while (start < preBack) {        prevCC=getPrevCC(prevArgs);        preBack=prevArgs.current;        if (cc >= prevCC) {          break;        }        back=preBack;      }      r=p;      do {        source[--r]=source[--current];      } while (back != current);    }  }  source[current]=c;  if (c2 != 0) {    source[(current + 1)]=c2;  }  return trailCC;}  }
class C{  void addScrapView(View scrap,int position,int viewType){  if (viewTypeCount == 1) {    currentScrapViews.put(position,scrap);  } else {    scrapViews[viewType].put(position,scrap);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    scrap.setAccessibilityDelegate(null);  }}  }
class C{  protected int readString() throws IOException, XMLException {  do {    nextChar();  } while (current != -1 && current != attrDelimiter);  if (current == -1) {    throw createXMLException("unexpected.eof");  }  nextChar();  return LexicalUnits.STRING;}  }
class C{  public TitleUpdatedEvent(ScriptingPanel source){  super(source);}  }
class C{  public void onNarrowFillSendBoxStream(String stream,String subject,boolean openSoftKeyboard){  displayChatBox(true);  displayFAB(false);  switchToStream();  streamActv.setText(stream);  topicActv.setText(subject);  if ("".equals(subject)) {    topicActv.requestFocus();  } else   messageEt.requestFocus();  if (openSoftKeyboard) {    ((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(InputMethodManager.SHOW_FORCED,InputMethodManager.HIDE_IMPLICIT_ONLY);  }}  }
class C{  public final boolean checkTag(int identifier){  return this.id == identifier || this.constrId == identifier;}  }
class C{  private void createUTMRenderables(){  this.gridElements=new ArrayList<GridElement>();  ArrayList<Position> positions=new ArrayList<Position>();  int lon=-180;  int zoneNumber=1;  int maxLat;  for (int i=0; i < 60; i++) {    Angle longitude=Angle.fromDegrees(lon);    positions.clear();    positions.add(new Position(Angle.fromDegrees(-80),longitude,10e3));    positions.add(new Position(Angle.fromDegrees(-60),longitude,10e3));    positions.add(new Position(Angle.fromDegrees(-30),longitude,10e3));    positions.add(new Position(Angle.ZERO,longitude,10e3));    positions.add(new Position(Angle.fromDegrees(30),longitude,10e3));    if (lon < 6 || lon > 36) {      maxLat=84;      positions.add(new Position(Angle.fromDegrees(60),longitude,10e3));      positions.add(new Position(Angle.fromDegrees(maxLat),longitude,10e3));    } else {      if (lon == 6) {        maxLat=56;        positions.add(new Position(Angle.fromDegrees(maxLat),longitude,10e3));      } else {        maxLat=72;        positions.add(new Position(Angle.fromDegrees(60),longitude,10e3));        positions.add(new Position(Angle.fromDegrees(maxLat),longitude,10e3));      }    }    Object polyline=createLineRenderable(new ArrayList<Position>(positions),AVKey.GREAT_CIRCLE);    Sector sector=Sector.fromDegrees(-80,maxLat,lon,lon);    this.gridElements.add(new GridElement(sector,polyline,GridElement.TYPE_LINE));    GeographicText text=new UserFacingText(zoneNumber + "",Position.fromDegrees(0,lon + 3,0));    sector=Sector.fromDegrees(-90,90,lon + 3,lon + 3);    this.gridElements.add(new GridElement(sector,text,GridElement.TYPE_LONGITUDE_LABEL));    lon+=6;    zoneNumber++;  }  for (int i=0; i < 5; i++) {    positions.clear();    lon=specialMeridians[i][0];    positions.add(new Position(Angle.fromDegrees(specialMeridians[i][1]),Angle.fromDegrees(lon),10e3));    positions.add(new Position(Angle.fromDegrees(specialMeridians[i][2]),Angle.fromDegrees(lon),10e3));    Object polyline=createLineRenderable(new ArrayList<Position>(positions),AVKey.GREAT_CIRCLE);    Sector sector=Sector.fromDegrees(specialMeridians[i][1],specialMeridians[i][2],lon,lon);    this.gridElements.add(new GridElement(sector,polyline,GridElement.TYPE_LINE));  }  int lat=-80;  for (int i=0; i < 21; i++) {    Angle latitude=Angle.fromDegrees(lat);    for (int j=0; j < 4; j++) {      positions.clear();      lon=-180 + j * 90;      positions.add(new Position(latitude,Angle.fromDegrees(lon),10e3));      positions.add(new Position(latitude,Angle.fromDegrees(lon + 30),10e3));      positions.add(new Position(latitude,Angle.fromDegrees(lon + 60),10e3));      positions.add(new Position(latitude,Angle.fromDegrees(lon + 90),10e3));      Object polyline=createLineRenderable(new ArrayList<Position>(positions),AVKey.LINEAR);      Sector sector=Sector.fromDegrees(lat,lat,lon,lon + 90);      this.gridElements.add(new GridElement(sector,polyline,GridElement.TYPE_LINE));    }    if (i < 20) {      GeographicText text=new UserFacingText(latBands.charAt(i) + "",Position.fromDegrees(lat + 4,0,0));      Sector sector=Sector.fromDegrees(lat + 4,lat + 4,-180,180);      this.gridElements.add(new GridElement(sector,text,GridElement.TYPE_LATITUDE_LABEL));    }    lat+=lat < 72 ? 8 : 12;  }}  }
class C{  public Matrix4d rotation(double angle,Vector3dc axis){  return rotation(angle,axis.x(),axis.y(),axis.z());}  }
class C{  @Override public char[] labelAnnotationIntroducingCharacters(){  return annotationIntroducingChars;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void reset(){  contexts=new Context[32];  namespaceDeclUris=false;  contextPos=0;  contexts[contextPos]=currentContext=new Context();  currentContext.declarePrefix("xml",XMLNS);}  }
class C{  public static void assertEquals(String message,NominalMapping expected,NominalMapping actual,boolean ignoreOrder){  if (expected == actual) {    return;  }  Assert.assertTrue(expected == null && actual == null || expected != null && actual != null);  if (expected == null || actual == null) {    return;  }  Assert.assertEquals(message + " (nominal mapping size)",expected.size(),actual.size());  List<String> expectedValues=expected.getValues();  List<String> actualValues=actual.getValues();  Set<String> expectedValuesSet=new HashSet<String>(expectedValues);  Set<String> actualValuesSet=new HashSet<String>(actualValues);  Assert.assertEquals(message + " (different nominal values)",expectedValuesSet,actualValuesSet);  if (!ignoreOrder) {    Iterator<String> expectedIt=expectedValues.iterator();    while (expectedIt.hasNext()) {      String expectedValue=expectedIt.next();      Assert.assertEquals(message + " (index of nominal value '" + expectedValue+ "')",expected.mapString(expectedValue),actual.mapString(expectedValue));    }  }}  }
class C{  public UnknownServiceException(String detailMessage){  super(detailMessage);}  }
class C{  private void sendOk(Response response,VirtualFile file) throws Exception {  LessSource source=new LessSource(file.getRealFile());  long lastModified=source.getLastModifiedIncludingImports();  String etag=getETag(file,lastModified);  String content=compileToCss(source,lastModified);  response.status=Http.StatusCode.OK;  response.setHeader(LAST_MODIFIED,Utils.getHttpDateFormatter().format(new Date(lastModified)));  response.setHeader(ETAG,etag);  response.print(content);}  }
class C{  @Override protected void doAction(){  Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  Transferable t=clipboard.getContents(null);  try {    if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {      String data;      data=(String)t.getTransferData(DataFlavor.stringFlavor);      show(data);    }  } catch (  UnsupportedFlavorException e) {  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private Map<MemberType,Integer> computeSearchLimits(int limit,MemberType memberType){  Map<MemberType,Integer> memberTypeToLimit=new HashMap<MemberType,Integer>();  int limitPerPrincipalType=limit;  if (memberType == MemberType.ALL) {    limitPerPrincipalType=limit < 0 ? -1 : limit / (MemberType.values().length - 1);    int solutionUserLimit=limitPerPrincipalType < 0 ? -1 : limitPerPrincipalType + (limit % (MemberType.values().length - 1));    memberTypeToLimit.put(MemberType.USER,limitPerPrincipalType);    memberTypeToLimit.put(MemberType.GROUP,limitPerPrincipalType);    memberTypeToLimit.put(MemberType.SOLUTIONUSER,solutionUserLimit);  } else {    memberTypeToLimit.put(memberType,limit);  }  return memberTypeToLimit;}  }
class C{  private void clearRepeatTask(final ISpeedTestListener listener,final Timer timer){  mSpeedTestSocket.removeSpeedTestListener(listener);  if (timer != null) {    timer.cancel();    timer.purge();  }  mRepeatFinished=true;  mSpeedTestSocket.closeSocket();  mSpeedTestSocket.shutdownAndWait();}  }
class C{  public DrawerBuilder withTranslucentNavigationBar(boolean translucentNavigationBar){  this.mTranslucentNavigationBar=translucentNavigationBar;  if (!translucentNavigationBar) {    this.mTranslucentNavigationBarProgrammatically=false;  }  return this;}  }
class C{  @LargeTest public void testStressMediaProperties() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String VideoItemFileName1=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String AudioItemFileName3=INPUT_FILE_PATH + "AACLC_44.1kHz_256kbps_s_1_17.mp4";  final String[] loggingInfo=new String[1];  int i=0;  final int videoAspectRatio=MediaProperties.ASPECT_RATIO_3_2;  final int videoFileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int videoDuration=77366;  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;  final int videoLevel=MediaProperties.H264Level.H264Level13;  final int videoHeight=MediaProperties.HEIGHT_720;  final int videoWidth=1080;  final int imageAspectRatio=MediaProperties.ASPECT_RATIO_4_3;  final int imageFileType=MediaProperties.FILE_JPEG;  final int imageWidth=640;  final int imageHeight=MediaProperties.HEIGHT_480;  final int audioDuration=77554;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=44100;  final int audioChannel=2;  writeTestCaseHeader("testStressMediaProperties");  getBeginMemory();  for (i=0; i < 50; i++) {    if (i % 3 == 0) {      final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,VideoItemFileName1,renderingMode);      mVideoEditor.addMediaItem(mediaItem1);      mediaItem1.setExtractBoundaries(0,20000);      assertEquals("Aspect Ratio Mismatch",videoAspectRatio,mediaItem1.getAspectRatio());      assertEquals("File Type Mismatch",videoFileType,mediaItem1.getFileType());      assertEquals("VideoCodec Mismatch",videoCodecType,mediaItem1.getVideoType());      assertEquals("duration Mismatch",videoDuration,mediaItem1.getDuration());      assertEquals("Video Profile ",videoProfile,mediaItem1.getVideoProfile());      assertEquals("Video Level ",videoLevel,mediaItem1.getVideoLevel());      assertEquals("Video height ",videoHeight,mediaItem1.getHeight());      assertEquals("Video width ",videoWidth,mediaItem1.getWidth());      mVideoEditor.removeMediaItem("m1" + i);    }    if (i % 3 == 1) {      final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2" + i,ImageItemFileName2,10000,renderingMode);      mVideoEditor.addMediaItem(mediaItem2);      assertEquals("Aspect Ratio Mismatch",imageAspectRatio,mediaItem2.getAspectRatio());      assertEquals("File Type Mismatch",imageFileType,mediaItem2.getFileType());      assertEquals("Image height",imageHeight,mediaItem2.getHeight());      assertEquals("Image width",imageWidth,mediaItem2.getWidth());      mVideoEditor.removeMediaItem("m2" + i);    }    if (i % 3 == 2) {      final AudioTrack mediaItem3=new AudioTrack(mVideoEditor,"m3" + i,AudioItemFileName3);      mVideoEditor.addAudioTrack(mediaItem3);      assertEquals("AudioType Mismatch",audioCodecType,mediaItem3.getAudioType());      assertEquals("Audio Sampling",audioSamplingFrequency,mediaItem3.getAudioSamplingFrequency());      assertEquals("Audio Channels",audioChannel,mediaItem3.getAudioChannels());      assertEquals("duration Mismatch",audioDuration,mediaItem3.getDuration());      mVideoEditor.removeAudioTrack("m3" + i);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);}  }
class C{  private void forceOutOfMemory(){  ArrayList junk=new ArrayList();  for (; ; ) {    junk.add(new long[100000]);  }}  }
class C{  public VmSchedulerTimeShared(List<? extends Pe> pelist){  super(pelist);  setMipsMapRequested(new HashMap<String,List<Double>>());}  }
class C{  @FromString public static Days parseDays(String periodStr){  if (periodStr == null) {    return Days.ZERO;  }  Period p=PARSER.parsePeriod(periodStr);  return Days.days(p.getDays());}  }
class C{  private int nextFreeId(){  int id=0;  Set<Integer> ids=solutions.keySet();  while (ids.contains(id)) {    id++;  }  return id;}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  public void addAttribute(String rawName,String value){  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addAttribute(rawName,value);}  }
class C{  public String toString(){  return getSignature();}  }
class C{  public static Bitmap resizeBitmap(final Bitmap input,int destWidth,int destHeight,int rotation) throws OutOfMemoryError {  int dstWidth=destWidth;  int dstHeight=destHeight;  final int srcWidth=input.getWidth();  final int srcHeight=input.getHeight();  if (rotation == 90 || rotation == 270) {    dstWidth=destHeight;    dstHeight=destWidth;  }  boolean needsResize=false;  float p;  if ((srcWidth > dstWidth) || (srcHeight > dstHeight)) {    needsResize=true;    if ((srcWidth > srcHeight) && (srcWidth > dstWidth)) {      p=(float)dstWidth / (float)srcWidth;      dstHeight=(int)(srcHeight * p);    } else {      p=(float)dstHeight / (float)srcHeight;      dstWidth=(int)(srcWidth * p);    }  } else {    dstWidth=srcWidth;    dstHeight=srcHeight;  }  if (needsResize || rotation != 0) {    Bitmap output;    if (rotation == 0) {      output=Bitmap.createScaledBitmap(input,dstWidth,dstHeight,true);    } else {      Matrix matrix=new Matrix();      matrix.postScale((float)dstWidth / srcWidth,(float)dstHeight / srcHeight);      matrix.postRotate(rotation);      output=Bitmap.createBitmap(input,0,0,srcWidth,srcHeight,matrix,true);    }    return output;  } else   return input;}  }
class C{  public String isValidAddress(String s,int size,boolean executeNow){  if (size == -1) {    size=1;  }  CalculatedAddress a=new CalculatedAddress(dataspace);  String errorString=a.readFromString(s);  if (errorString != null) {    return errorString;  }  return a.isValid(size,executeNow);}  }
class C{  public void testResourceIsolatedMode() throws Exception {  processTestGridifyResource(DeploymentMode.ISOLATED);}  }
class C{  protected void initBPOrderDetails(int C_BPartner_ID,boolean forInvoice){  log.config("C_BPartner_ID=" + C_BPartner_ID);  KeyNamePair pp=new KeyNamePair(0,"");  orderField.removeActionListener(this);  orderField.removeAllItems();  orderField.addItem(pp);  ArrayList<KeyNamePair> list=loadOrderData(C_BPartner_ID,forInvoice,false);  for (  KeyNamePair knp : list)   orderField.addItem(knp);  orderField.setSelectedIndex(0);  orderField.addActionListener(this);  initBPDetails(C_BPartner_ID);}  }
class C{  public double cdf(int k){  if (k < 0)   return 0.0;  if (k >= cdf.length - 1)   return 1.0;  return cdf[k];}  }
class C{  private void fillByGroundTarget(RPAction action){  int x=action.getInt(EquipActionConsts.GROUND_X);  int y=action.getInt(EquipActionConsts.GROUND_Y);  slot=new GroundSlot(zone,x,y);}  }
class C{  public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(3);  newVector.addElement("measureNumAttributesSelected");  newVector.addElement("measureSelectionTime");  newVector.addElement("measureTime");  if (m_Classifier instanceof AdditionalMeasureProducer) {    newVector.addAll(Collections.list(((AdditionalMeasureProducer)m_Classifier).enumerateMeasures()));  }  return newVector.elements();}  }
class C{  public SWFVectors tagDefineFont2(int id,int flags,String name,int numGlyphs,int ascent,int descent,int leading,int[] codes,int[] advances,Rect[] bounds,int[] kernCodes1,int[] kernCodes2,int[] kernAdjustments) throws IOException {  fontCodes.put(new Integer(id),(codes != null) ? codes : new int[0]);  return null;}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  protected void sendTestMessage(SerialMessage m,SerialListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  public ProcessListEntry(ResultSet rs) throws java.sql.SQLException {  this.setId(rs.getString("ID"));  this.setUser(rs.getString("USER"));  this.setHost(rs.getString("HOST"));  this.setDb(rs.getString("DB"));  this.setCommand(rs.getString("COMMAND"));  this.setState(rs.getString("STATE"));  this.setTime(rs.getInt("TIME"));  this.setInfo(rs.getString("INFO"));}  }
class C{  public PopupExcludeFromScanMenu(){  super(Constant.messages.getString("sites.exclude.ascan.popup"),true);}  }
class C{  public HMM(RandomVariable stateVariable,Matrix transitionModel,Map<Object,Matrix> sensorModel,Matrix prior){  if (!stateVariable.getDomain().isFinite()) {    throw new IllegalArgumentException("State Variable for HHM must be finite.");  }  this.stateVariable=stateVariable;  stateVariableDomain=(FiniteDomain)stateVariable.getDomain();  if (transitionModel.getRowDimension() != transitionModel.getColumnDimension()) {    throw new IllegalArgumentException("Transition Model row and column dimensions must match.");  }  if (stateVariableDomain.size() != transitionModel.getRowDimension()) {    throw new IllegalArgumentException("Transition Model Matrix does not map correctly to the HMM's State Variable.");  }  this.transitionModel=transitionModel;  for (  Matrix smVal : sensorModel.values()) {    if (smVal.getRowDimension() != smVal.getColumnDimension()) {      throw new IllegalArgumentException("Sensor Model row and column dimensions must match.");    }    if (stateVariableDomain.size() != smVal.getRowDimension()) {      throw new IllegalArgumentException("Sensor Model Matrix does not map correctly to the HMM's State Variable.");    }  }  this.sensorModel=sensorModel;  if (transitionModel.getRowDimension() != prior.getRowDimension() && prior.getColumnDimension() != 1) {    throw new IllegalArgumentException("Prior is not of the correct dimensions.");  }  this.prior=prior;}  }
class C{  public boolean canLoad(Entity unit){  boolean result=true;  if (!(unit instanceof Infantry)) {    result=false;  } else   if (currentSpace < unit.getWeight()) {    result=false;  }  return result;}  }
class C{  public static BigDecimalUtilsCalculation calculate(String value){  return new BigDecimalUtilsCalculation(value);}  }
class C{  public void refresh(CnATreeElement cnAElement) throws CommandException {  RefreshElement command=new RefreshElement(cnAElement);  command=getCommandService().executeCommand(command);  CnATreeElement refreshedElement=command.getElement();  cnAElement.setEntity(refreshedElement.getEntity());}  }
class C{  public int matchRowIndex(String what,String columnName){  return matchRowIndex(what,getColumnIndex(columnName));}  }
class C{  public synchronized CtClass makeInterface(String name,CtClass superclass) throws RuntimeException {  checkNotFrozen(name);  CtClass clazz=new CtNewClass(name,this,true,superclass);  cacheCtClass(name,clazz,true);  return clazz;}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.surface_view);  mSurfaceView=(SurfaceView)findViewById(R.id.surface_view);  mOverlayView=(ImageView)findViewById(R.id.overlay_layer);  ViewGroup.LayoutParams lp=mSurfaceView.getLayoutParams();  mSurfaceHolder=mSurfaceView.getHolder();  mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);  mSurfaceHolder.addCallback(this);  midiafd=this.getResources().openRawResourceFd(R.raw.testmidi);  mp3afd=this.getResources().openRawResourceFd(R.raw.testmp3);  mOverlayView.setLayoutParams(lp);  mDestBitmap=Bitmap.createBitmap((int)640,(int)480,Bitmap.Config.ARGB_8888);  mOverlayView.setImageBitmap(mDestBitmap);  PowerManager pm=(PowerManager)this.getSystemService(Context.POWER_SERVICE);  mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK,"MediaFrameworkTest");  mWakeLock.acquire();}  }
class C{  public void init(){  initScriptSelectionModel();}  }
class C{  public boolean refresh(){  return refresh;}  }
class C{  public static boolean processDeclaredSubsNames(Project project,Processor<String> processor){  return PerlStubIndex.getInstance().processAllKeys(PerlSubDeclarationStubIndex.KEY,project,processor);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  Class<?> javaxToolsJavac(String packageName,String className,String source){  String fullClassName=packageName + "." + className;  StringWriter writer=new StringWriter();  JavaFileManager fileManager=new ClassFileManager(JAVA_COMPILER.getStandardFileManager(null,null,null));  ArrayList<JavaFileObject> compilationUnits=new ArrayList<JavaFileObject>();  compilationUnits.add(new StringJavaFileObject(fullClassName,source));  JAVA_COMPILER.getTask(writer,fileManager,null,null,null,compilationUnits).call();  String err=writer.toString();  throwSyntaxError(err);  try {    return fileManager.getClassLoader(null).loadClass(fullClassName);  } catch (  ClassNotFoundException e) {    throw DbException.convert(e);  }}  }
class C{  public void operationCanceled(){  operationCanceled=true;}  }
class C{  public final static int pixel_distance(int x1,int y1,int x2,int y2){  int dx=Math.abs(x1 - x2);  int dy=Math.abs(y1 - y2);  return (dx > dy) ? dx : dy;}  }
class C{  public Vertex parseCaseByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex vertex=network.createTemporyVertex();  vertex.addRelationship(Primitive.INSTANTIATION,Primitive.CASE);  long id=dataStream.readLong();  if (id == 0) {    return vertex;  }  Vertex variable=network.findById(id);  if (variable == null) {    return vertex;  }  if (variable.is(Primitive.PATTERN)) {    id=dataStream.readLong();    if (id == 0) {      return vertex;    }    variable=network.findById(id);    if (variable == null) {      return vertex;    }    vertex.addRelationship(Primitive.PATTERN,variable);  } else {    vertex.addRelationship(Primitive.CASE,variable);  }  id=dataStream.readLong();  while (id > 0) {    Vertex type=network.findById(id);    if (type == null) {      return vertex;    }    id=dataStream.readLong();    if (type.is(Primitive.GOTO) || type.is(Primitive.FOR)) {      while (id > 0) {        Vertex element=network.findById(id);        if (element == null) {          id=dataStream.readLong();          continue;        }        vertex.addRelationship(type,element);        id=dataStream.readLong();      }      id=dataStream.readLong();      continue;    }    Vertex element=network.findById(id);    if (element == null) {      id=dataStream.readLong();      continue;    }    if (element.is(Primitive.EQUATION)) {      element=parseOperatorByteCode(dataStream,network);    }    vertex.addRelationship(type,element);    id=dataStream.readLong();  }  return vertex;}  }
class C{  public CloseAction(){  super(CLOSE_CMD);}  }
class C{  public <T>Tuple<T> giveTuple(TypeTag tag){  realizeCacheFor(tag,emptyStack());  return cache.getTuple(tag);}  }
class C{  private void logDeprecationWarning(Node node,Context cx,String name,String since,String message,String replacement){  final int pos=node.getPosition();  final InputBuffer input=cx.input;  assert ((name != null) && (name.length() > 0));  final boolean hasSince=(since != null) && (since.length() > 0);  final boolean hasMessage=(message != null) && (message.length() > 0);  final boolean hasReplacement=(replacement != null) && (replacement.length() > 0);  if (hasMessage) {    warning(pos,input,kWarning_DeprecatedMessage,message);  } else   if (hasReplacement) {    if (hasSince) {      warning(pos,input,kWarning_DeprecatedSince,name,since,replacement);    } else {      warning(pos,input,kWarning_DeprecatedUseReplacement,name,replacement);    }  } else   if (hasSince) {    warning(pos,input,kWarning_DeprecatedSinceNoReplacement,name,since);  } else {    warning(pos,input,kWarning_Deprecated,name);  }}  }
class C{  private static void wrapAll(Menu menu,Component[] components){  for (  Component c : components) {    MenuItem item=AWTMenuWrapper.wrap(c);    menu.add(item);    if (item instanceof Menu) {      wrapAll((Menu)item,((JMenu)c).getMenuComponents());    }  }}  }
class C{  public Reduction asReduction(CSTNode second){  Reduction created=asReduction();  created.add(second);  return created;}  }
class C{  public static Vector<Object> toXmlRpcSpecificationLocationsParameters(Collection<SpecificationLocation> specificationLocations){  Vector<Object> specificationLocationsParams=new Vector<Object>();  for (  SpecificationLocation specificationLoc : specificationLocations) {    specificationLocationsParams.add(specificationLoc.marshallize());  }  log.debug(ToStringBuilder.reflectionToString(specificationLocationsParams));  return specificationLocationsParams;}  }
class C{  public static IntInterval evensFromTo(int from,int to){  if (from % 2 != 0) {    if (from < to) {      from++;    } else {      from--;    }  }  if (to % 2 != 0) {    if (to > from) {      to--;    } else {      to++;    }  }  return IntInterval.fromToBy(from,to,to > from ? 2 : -2);}  }
class C{  private DeviceInfo regenerateKey(String uid,String username) throws DataAccessException {  log.info("Generating encryption key");  String encryptionKey=Utilities.generateRandomString();  if (deviceAuthenticator.registerDevice(uid,encryptionKey,username)) {    return deviceAuthenticator.getDeviceInfo(uid);  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  int nodeType;  Node entElementContent;  Node entReference;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(1,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).insertData(1,"newArg");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WReport.init");}  }
class C{  public ProcessInfoLog(int P_ID,Timestamp P_Date,BigDecimal P_Number,String P_Msg){  this(s_Log_ID++,P_ID,P_Date,P_Number,P_Msg);}  }
class C{  public void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException {  int identity=makeNodeIdentity(nodeHandle);  if (identity == DTM.NULL)   return;  int type=_type(identity);  if (isTextType(type)) {    int dataIndex=m_dataOrQName.elementAt(identity);    int offset=m_data.elementAt(dataIndex);    int length=m_data.elementAt(dataIndex + 1);    if (normalize)     m_chars.sendNormalizedSAXcharacters(ch,offset,length); else     m_chars.sendSAXcharacters(ch,offset,length);  } else {    int firstChild=_firstch(identity);    if (DTM.NULL != firstChild) {      int offset=-1;      int length=0;      int startNode=identity;      identity=firstChild;      do {        type=_type(identity);        if (isTextType(type)) {          int dataIndex=_dataOrQName(identity);          if (-1 == offset) {            offset=m_data.elementAt(dataIndex);          }          length+=m_data.elementAt(dataIndex + 1);        }        identity=getNextNodeIdentity(identity);      } while (DTM.NULL != identity && (_parent(identity) >= startNode));      if (length > 0) {        if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length); else         m_chars.sendSAXcharacters(ch,offset,length);      }    } else     if (type != DTM.ELEMENT_NODE) {      int dataIndex=_dataOrQName(identity);      if (dataIndex < 0) {        dataIndex=-dataIndex;        dataIndex=m_data.elementAt(dataIndex + 1);      }      String str=m_valuesOrPrefixes.indexToString(dataIndex);      if (normalize)       FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch); else       ch.characters(str.toCharArray(),0,str.length());    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String toString(){  return "ClientHealthMonitor@" + Integer.toHexString(System.identityHashCode(this));}  }
class C{  public ClientPropertiesBuilder withProxyPort(Integer proxyPortNumber){  properties.setProperty(CLIENT_SERVICE_PROXY_PORT,proxyPortNumber.toString());  return this;}  }
class C{  public void addAll(double... values){  for (  double value : values) {    add(value);  }}  }
class C{  private void selfPatch(ResolutionKind resolution){  ResolutionRequest resolve=new ResolutionRequest();  resolve.resolutionKind=resolution;  Operation operation=Operation.createPatch(getUri()).setCompletion(null).setBody(resolve);  sendRequest(operation);}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  protected String fetchNativeId(String nativeGuid){  String[] token=nativeGuid.split(VNXFileConstants.PLUS_SEPERATOR);  return token[token.length - 1];}  }
class C{  public static List<ComparableTextSpan> buildSpans(String text,Pattern pattern){  Matcher m=pattern.matcher(text);  List<ComparableTextSpan> spans=new LinkedList<>();  while (m.find()) {    ComparableTextSpan cs=new ComparableTextSpan(m.start(),m.end(),m.group());    spans.add(cs);  }  return spans;}  }
class C{  public IndexedPropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue,int index){  super(source,propertyName,oldValue,newValue);  this.index=index;}  }
class C{  private void doEncode(ByteBuffer compressedBytes,LongBuffer pixels,int nx,int ny,byte[] nbitplanes){  int nx2=(nx + 1) / 2;  int ny2=(ny + 1) / 2;  startOutputtingBits();  qtreeEncode(compressedBytes,copy(pixels,0),ny,nx2,ny2,nbitplanes[0]);  qtreeEncode(compressedBytes,copy(pixels,ny2),ny,nx2,ny / 2,nbitplanes[1]);  qtreeEncode(compressedBytes,copy(pixels,ny * nx2),ny,nx / 2,ny2,nbitplanes[1]);  qtreeEncode(compressedBytes,copy(pixels,ny * nx2 + ny2),ny,nx / 2,ny / 2,nbitplanes[2]);  outputNybble(compressedBytes,0);  doneOutputtingBits(compressedBytes);}  }
class C{  public void checkFilesAreInList(boolean only,VirtualFile... files){  ensureUpToDate();  final Collection<Change> changes=peer.getDefaultChangeList().getChanges();  if (only) {    Assert.assertEquals(changes.size(),files.length);  }  final Collection<VirtualFile> filesInChangeList=new HashSet<VirtualFile>();  for (  Change c : changes) {    filesInChangeList.add(c.getVirtualFile());  }  for (  VirtualFile f : files) {    Assert.assertTrue(filesInChangeList.contains(f));  }}  }
class C{  public IvfWriter(OutputStream outputStream,int width,int height) throws IOException {  this(outputStream,width,height,1,1000000);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the POST method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  public void clearUserDesignation(){  userDesignation=null;}  }
class C{  public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  @Override public void createMetaVolumeHead(StorageSystem storageSystem,StoragePool storagePool,Volume metaHead,long capacity,VirtualPoolCapabilityValuesWrapper capabilities,MetaVolumeTaskCompleter metaVolumeTaskCompleter) throws Exception {  String label;  _log.info(String.format("Create Meta Volume Head Start - Array: %s, Pool: %s, %n   Head: %s, IsThinlyProvisioned: %s, Capacity: %s",storageSystem.getSerialNumber(),storagePool.getNativeId(),metaHead.getLabel(),metaHead.getThinlyProvisioned(),capacity));  String tenantName="";  try {    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,metaHead.getTenant().getURI());    tenantName=tenant.getLabel();  } catch (  DatabaseException e) {    _log.error("Error lookup TenantOrb object",e);  }  label=_nameGenerator.generate(tenantName,metaHead.getLabel(),metaHead.getId().toString(),'-',SmisConstants.MAX_VOLUME_NAME_LENGTH);  boolean isThinlyProvisioned=metaHead.getThinlyProvisioned();  boolean isBoundToPool=!(isThinlyProvisioned && DiscoveredDataObject.Type.vmax.toString().equalsIgnoreCase(storageSystem.getSystemType()));  try {    CIMObjectPath configSvcPath=_cimPath.getConfigSvcPath(storageSystem);    CIMArgument[] inArgs;    if (DiscoveredDataObject.Type.vnxblock.toString().equalsIgnoreCase(storageSystem.getSystemType())) {      inArgs=_helper.getCreateVolumesInputArgumentsOnFastEnabledPool(storageSystem,storagePool,label,capacity,1,isThinlyProvisioned,capabilities.getAutoTierPolicyName());    } else {      inArgs=_helper.getCreateVolumesInputArguments(storageSystem,storagePool,label,capacity,1,isThinlyProvisioned,null,isBoundToPool);    }    CIMArgument[] outArgs=new CIMArgument[5];    StorageSystem forProvider=_helper.getStorageSystemForProvider(storageSystem,metaHead);    _log.info("Selected Provider : {}",forProvider.getNativeGuid());    SmisCreateMetaVolumeHeadJob smisJobCompleter=new SmisCreateMetaVolumeHeadJob(null,forProvider.getId(),metaVolumeTaskCompleter,metaHead.getId());    _helper.invokeMethodSynchronously(forProvider,configSvcPath,_helper.createVolumesMethodName(forProvider),inArgs,outArgs,smisJobCompleter);  } catch (  WBEMException e) {    _log.error("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,error);    throw e;  }catch (  Exception e) {    _log.error("Problem in createMetaVolumeHead: " + metaHead.getLabel(),e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("createMetaVolumeHead",e.getMessage());    metaVolumeTaskCompleter.getVolumeTaskCompleter().error(_dbClient,error);    throw e;  } finally {    _log.info(String.format("Create Meta Volume Head End - Array:%s, Pool: %s, %n   Head: %s",storageSystem.getSerialNumber(),storagePool.getNativeId(),metaHead.getLabel()));  }}  }
class C{  public void testComplexOptimization01(){  new Helper(){{      given=select(varNode(x),where(joinGroupWithVars("x1","x2"),alpNodeWithVars("x1","x2"),stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),unionWithVars("y2","y1","y2"),stmtPatternWithVar("y1"),subqueryWithVars("y1","y4","y5"),stmtPatternWithVarOptional("z1"),joinGroupWithVars("a1","a2"),joinGroupWithVars("z1","z2"),filterWithVar("x1"),filterWithVars("x1","y1"),filterWithVars("x1","z1")));      expected=select(varNode(x),where(stmtPatternWithVar("x1"),filterWithVar("x1"),joinGroupWithVars("x1","x2"),joinGroupWithVars("a1","a2"),alpNodeWithVars("x1","x2"),stmtPatternWithVarOptional("y1"),stmtPatternWithVar("y1"),filterWithVars("x1","y1"),unionWithVars("y2","y1","y2"),subqueryWithVars("y1","y4","y5"),stmtPatternWithVarOptional("z1"),joinGroupWithVars("z1","z2"),filterWithVars("x1","z1")));    }  }.testWhileIgnoringExplainHints();}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  @NonNull public static LocalDateTime dateToLocalDateTime(@NonNull Date date){  return dateToZonedDateTime(date).toLocalDateTime();}  }
class C{  public ImageScroller(InternalFrameDemo demo,Icon icon,int layer,int count){  super();  JPanel p=new JPanel();  p.setBackground(Color.white);  p.setLayout(new BorderLayout());  p.add(new JLabel(icon),BorderLayout.CENTER);  getViewport().add(p);  getHorizontalScrollBar().setUnitIncrement(10);  getVerticalScrollBar().setUnitIncrement(10);}  }
class C{  public MLResults results(){  return results;}  }
class C{  public void checkExtension(Project proj){  logger.log(Level.FINE,"Checking extension..");  if (!(proj instanceof J2SEProject)) {    logger.log(Level.WARNING,"Trying to load Assets Properties from non-asset project");    return;  }  FileObject projDir=proj.getProjectDirectory();  final FileObject buildXmlFO=J2SEProjectUtil.getBuildXml((J2SEProject)proj);  if (buildXmlFO == null) {    logger.log(Level.WARNING,"The project build script does not exist, the project cannot be extended by jMP.");    return;  }  FileObject assetsBuildFile=getImplFile(projDir,true);  AntBuildExtender extender=proj.getLookup().lookup(AntBuildExtender.class);  if (extender != null) {    assert assetsBuildFile != null;    if (extender.getExtension(extensionName) == null) {      logger.log(Level.FINE,"Creating extension {0}",extensionName);      AntBuildExtender.Extension ext=extender.addExtension(extensionName,assetsBuildFile);      if (extensionDependencies != null) {        for (int i=0; i < extensionDependencies.length; i+=2) {          String target=extensionDependencies[i];          String extension=extensionDependencies[i + 1];          ext.addDependency(target,extension);        }      }      addAntTaskLibrary(proj,antTaskLibrary);      try {        addZipContents(proj.getProjectDirectory());      } catch (      IOException ex) {        Exceptions.printStackTrace(ex);      }    }  } else {    logger.log(Level.WARNING,"Trying to include assets build snippet in project type that doesn't support AntBuildExtender API contract.");  }}  }
class C{  public DnsSdTxtRecord(){  mData=new byte[0];}  }
class C{  public SplitPaneVerticalState(){  super("Vertical");}  }
class C{  protected void fireClusterChange(long timestamp,String type,String message){  if (listeners != null && !listeners.isEmpty()) {    ClusterEvent event=new ClusterEvent(this,timestamp,type,message);    Vector targets;synchronized (this) {      targets=(Vector)listeners.clone();    }    Enumeration e=targets.elements();    while (e.hasMoreElements()) {      ClusterEventListener l=(ClusterEventListener)e.nextElement();      l.changeCluster(event);    }  }}  }
class C{  public static String makeTimeString(final Context context,long secs){  long hours, mins;  hours=secs / 3600;  secs-=hours * 3600;  mins=secs / 60;  secs-=mins * 60;  final String durationFormat=context.getResources().getString(hours == 0 ? R.string.durationformatshort : R.string.durationformatlong);  return String.format(durationFormat,hours,mins,secs);}  }
class C{  public Collection<Account.Id> addCcs(ChangeNotes notes,ChangeUpdate update,Collection<Account.Id> wantCCs) throws OrmException {  return addCcs(update,wantCCs,notes.load().getReviewers());}  }
class C{  public synchronized void ensureCapacity(int minimumCapacity){  if (elementData.length < minimumCapacity) {    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;    grow(minimumCapacity > next ? minimumCapacity : next);  }}  }
class C{  public static void cleanUp(){  if (privateKey == null)   TAssert.fail("Must call initialize with a password to clean up data");  SQLiteDatabase db=GTG.db;  Cursor c=db.rawQuery("select _id, encrypted_data from user_data_key udk where " + "udk.app_id != ? and udk._id != " + "(select max(_id) from user_data_key udk2 where udk2.app_id = udk.app_id)",new String[]{String.valueOf(GTG.MASTER_APP_ID)});  Cursor c2=null;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Contract findByUniqueKey(String SECType,String symbol,String exchange,String currency,ZonedDateTime expiryDate){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Contract> query=builder.createQuery(Contract.class);    Root<Contract> from=query.from(Contract.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != SECType) {      Predicate predicate=builder.equal(from.get("secType"),SECType);      predicates.add(predicate);    }    if (null != symbol) {      Predicate predicate=builder.equal(from.get("symbol"),symbol);      predicates.add(predicate);    }    if (null != exchange) {      Predicate predicate=builder.equal(from.get("exchange"),exchange);      predicates.add(predicate);    }    if (null != currency) {      Predicate predicate=builder.equal(from.get("currency"),currency);      predicates.add(predicate);    }    if (null != expiryDate) {      Integer yearExpiry=expiryDate.getYear();      Expression<Integer> year=builder.function("year",Integer.class,from.get("expiry"));      Predicate predicateYear=builder.equal(year,yearExpiry);      predicates.add(predicateYear);      Integer monthExpiry=expiryDate.getMonthValue();      Expression<Integer> month=builder.function("month",Integer.class,from.get("expiry"));      Predicate predicateMonth=builder.equal(month,monthExpiry);      predicates.add(predicateMonth);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Contract> typedQuery=entityManager.createQuery(query);    List<Contract> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  @Override public void ConsumeFromTopicPartition(String a_topic,int a_partition) throws Exception {  PartitionMetadata metadata=findLeader(m_metaDataManager.getBrokerList(false),m_consumerProperties.port,a_topic,a_partition);  if (metadata == null) {    throw new Exception("Cannot find metadata for Topic and Partition. Exiting");  }  if (metadata.leader() == null) {    throw new Exception("Cannnot find Leader for Topic and Partition. Exiting");  }  String leadBroker=metadata.leader().host();  String clientName="Client_" + a_topic + "_"+ a_partition;  kafka.javaapi.consumer.SimpleConsumer consumer=new kafka.javaapi.consumer.SimpleConsumer(leadBroker,m_consumerProperties.port,m_consumerProperties.soTimeout,m_consumerProperties.bufferSize,clientName);  long readOffset=getLastOffset(consumer,a_topic,a_partition,kafka.api.OffsetRequest.EarliestTime(),clientName);  int numErrors=0;  int maxReads=m_consumerProperties.maxReads;  while (maxReads > 0) {    if (consumer == null) {      consumer=new kafka.javaapi.consumer.SimpleConsumer(leadBroker,m_consumerProperties.port,m_consumerProperties.soTimeout,m_consumerProperties.bufferSize,clientName);    }    FetchRequest req=new FetchRequestBuilder().clientId(clientName).addFetch(a_topic,a_partition,readOffset,m_consumerProperties.fetchSize).build();    FetchResponse fetchResponse=consumer.fetch(req);    if (fetchResponse.hasError()) {      numErrors++;      short code=fetchResponse.errorCode(a_topic,a_partition);      logger.error("Error fetching data from the Broker:" + leadBroker + " Reason: "+ code);      if (numErrors > 5)       break;      if (code == ErrorMapping.OffsetOutOfRangeCode()) {        readOffset=getLastOffset(consumer,a_topic,a_partition,kafka.api.OffsetRequest.LatestTime(),clientName);        continue;      }      consumer.close();      consumer=null;      leadBroker=findNewLeader(leadBroker,a_topic,a_partition,m_consumerProperties.port);      continue;    }    numErrors=0;    long numRead=0;    for (    MessageAndOffset messageAndOffset : fetchResponse.messageSet(a_topic,a_partition)) {      long currentOffset=messageAndOffset.offset();      if (currentOffset < readOffset) {        logger.error("Found an old offset: " + currentOffset + " Expecting: "+ readOffset);        continue;      }      readOffset=messageAndOffset.nextOffset();      ByteBuffer payload=messageAndOffset.message().payload();      byte[] bytes=new byte[payload.limit()];      payload.get(bytes);      logger.info(String.valueOf(messageAndOffset.offset()) + ": " + new String(bytes,"UTF-8"));      numRead++;      maxReads--;    }    if (numRead == 0) {      throw new Exception("Either this topic has no data or fetchSize is too small");    }  }  if (consumer != null)   consumer.close();}  }
class C{  public void enableErrorMessageCollection(boolean pNewState){  mMessageCollectionEnabled=pNewState;  if (mMessages == null && mMessageCollectionEnabled) {    mMessages=new ArrayList<String>();  }}  }
class C{  private static boolean isUniqueServiceName(String id,String name,String parentId){  CatalogCategoryRestRep parentCatalogCategory=CatalogCategoryUtils.getCatalogCategory(uri(parentId));  if (parentCatalogCategory != null) {    List<CatalogServiceRestRep> catalogServices=CatalogServiceUtils.getCatalogServices(parentCatalogCategory);    for (    CatalogServiceRestRep catalogService : catalogServices) {      if (catalogService.getId().toString().equals(id) == false && name.equalsIgnoreCase(catalogService.getName())) {        return false;      }    }  }  return true;}  }
class C{  public static Selector ofAllResponses(Connection connection){  return connectionSelector(connection,Type.ALL);}  }
class C{  public void clear(){  names.clear();  types.clear();  values.clear();}  }
class C{  public void store(ObjectReference value,Offset offset){}  }
class C{  public boolean isCharacter(int i){  return i >= 0 && i < size() && getArgument(i) instanceof MathCharacter && ((MathCharacter)getArgument(i)).isCharacter();}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isMenuRequests(){  Object oo=get_Value(COLUMNNAME_IsMenuRequests);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void convertFrom(Blackboard bb,SqlNode from){  if (from == null) {    bb.setRoot(LogicalValues.createOneRow(cluster),false);    return;  }  final SqlCall call;  final SqlNode[] operands;switch (from.getKind()) {case AS:    convertFrom(bb,((SqlCall)from).operand(0));  return;case WITH_ITEM:convertFrom(bb,((SqlWithItem)from).query);return;case WITH:convertFrom(bb,((SqlWith)from).body);return;case TABLESAMPLE:operands=((SqlBasicCall)from).getOperands();SqlSampleSpec sampleSpec=SqlLiteral.sampleValue(operands[1]);if (sampleSpec instanceof SqlSampleSpec.SqlSubstitutionSampleSpec) {String sampleName=((SqlSampleSpec.SqlSubstitutionSampleSpec)sampleSpec).getName();datasetStack.push(sampleName);convertFrom(bb,operands[0]);datasetStack.pop();} else if (sampleSpec instanceof SqlSampleSpec.SqlTableSampleSpec) {SqlSampleSpec.SqlTableSampleSpec tableSampleSpec=(SqlSampleSpec.SqlTableSampleSpec)sampleSpec;convertFrom(bb,operands[0]);RelOptSamplingParameters params=new RelOptSamplingParameters(tableSampleSpec.isBernoulli(),tableSampleSpec.getSamplePercentage(),tableSampleSpec.isRepeatable(),tableSampleSpec.getRepeatableSeed());bb.setRoot(new Sample(cluster,bb.root,params),false);} else {throw Util.newInternal("unknown TABLESAMPLE type: " + sampleSpec);}return;case IDENTIFIER:final SqlValidatorNamespace fromNamespace=validator.getNamespace(from).resolve();if (fromNamespace.getNode() != null) {convertFrom(bb,fromNamespace.getNode());return;}final String datasetName=datasetStack.isEmpty() ? null : datasetStack.peek();boolean[] usedDataset={false};RelOptTable table=SqlValidatorUtil.getRelOptTable(fromNamespace,catalogReader,datasetName,usedDataset);final RelNode tableRel;if (shouldConvertTableAccess) {tableRel=toRel(table);} else {tableRel=LogicalTableScan.create(cluster,table);}bb.setRoot(tableRel,true);if (usedDataset[0]) {bb.setDataset(datasetName);}return;case JOIN:final SqlJoin join=(SqlJoin)from;final SqlValidatorScope scope=validator.getJoinScope(from);final Blackboard fromBlackboard=createBlackboard(scope,null,false);SqlNode left=join.getLeft();SqlNode right=join.getRight();final boolean isNatural=join.isNatural();final JoinType joinType=join.getJoinType();final SqlValidatorScope leftScope=Util.first(validator.getJoinScope(left),((DelegatingScope)bb.scope).getParent());final Blackboard leftBlackboard=createBlackboard(leftScope,null,false);final SqlValidatorScope rightScope=Util.first(validator.getJoinScope(right),((DelegatingScope)bb.scope).getParent());final Blackboard rightBlackboard=createBlackboard(rightScope,null,false);convertFrom(leftBlackboard,left);RelNode leftRel=leftBlackboard.root;convertFrom(rightBlackboard,right);RelNode rightRel=rightBlackboard.root;JoinRelType convertedJoinType=convertJoinType(joinType);RexNode conditionExp;final SqlValidatorNamespace leftNamespace=validator.getNamespace(left);final SqlValidatorNamespace rightNamespace=validator.getNamespace(right);if (isNatural) {final RelDataType leftRowType=leftNamespace.getRowType();final RelDataType rightRowType=rightNamespace.getRowType();final List<String> columnList=SqlValidatorUtil.deriveNaturalJoinColumnList(leftRowType,rightRowType);conditionExp=convertUsing(leftNamespace,rightNamespace,columnList);} else {conditionExp=convertJoinCondition(fromBlackboard,leftNamespace,rightNamespace,join.getCondition(),join.getConditionType(),leftRel,rightRel);}final RelNode joinRel=createJoin(fromBlackboard,leftRel,rightRel,conditionExp,convertedJoinType);bb.setRoot(joinRel,false);return;case SELECT:case INTERSECT:case EXCEPT:case UNION:final RelNode rel=convertQueryRecursive(from,false,null).project();bb.setRoot(rel,true);return;case VALUES:convertValuesImpl(bb,(SqlCall)from,null);return;case UNNEST:call=(SqlCall)from;final List<SqlNode> nodes=call.getOperandList();final SqlUnnestOperator operator=(SqlUnnestOperator)call.getOperator();for (SqlNode node : nodes) {replaceSubqueries(bb,node,RelOptUtil.Logic.TRUE_FALSE_UNKNOWN);}final List<RexNode> exprs=new ArrayList<>();final List<String> fieldNames=new ArrayList<>();for (Ord<SqlNode> node : Ord.zip(nodes)) {exprs.add(bb.convertExpression(node.e));fieldNames.add(validator.deriveAlias(node.e,node.i));}final RelNode input=RelOptUtil.createProject((null != bb.root) ? bb.root : LogicalValues.createOneRow(cluster),exprs,fieldNames,true);Uncollect uncollect=new Uncollect(cluster,cluster.traitSetOf(Convention.NONE),input,operator.withOrdinality);bb.setRoot(uncollect,true);return;case COLLECTION_TABLE:call=(SqlCall)from;assert call.getOperandList().size() == 1;final SqlCall call2=call.operand(0);convertCollectionTable(bb,call2);return;default :throw Util.newInternal("not a join operator " + from);}}  }
class C{  public static ASTNode findParentType(ASTNode node,boolean treatModifiersOutside){  StructuralPropertyDescriptor lastLocation=null;  while (node != null) {    if (node instanceof AbstractTypeDeclaration) {      AbstractTypeDeclaration decl=(AbstractTypeDeclaration)node;      if (!treatModifiersOutside || lastLocation != decl.getModifiersProperty()) {        return decl;      }    } else     if (node instanceof AnonymousClassDeclaration) {      return node;    }    lastLocation=node.getLocationInParent();    node=node.getParent();  }  return null;}  }
class C{  public IntKeyMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  int capacity=1;  while (capacity < initialCapacity)   capacity<<=1;  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  table=new IntEntry[capacity];}  }
class C{  public static <T>T splitEachLine(URL self,Pattern pattern,String charset,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self,charset),pattern,closure);}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.403 -0500",hash_original_method="ABCEA4F06C4D017F6CAEB91F3D863D84",hash_generated_method="FB5F5EF61221C4C9234FA7D9CD6A9D99") public void log(Level logLevel,String msg,Object[] params){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setParameters(params);  setResourceBundle(record);  log(record);}  }
class C{  public String subtype(){  return subtype;}  }
class C{  MapContent(Object content,StructuredContent parent){  this.root=content;  this.parent=parent;}  }
class C{  public boolean isExceptionThrower(){  return exceptionThrower != null;}  }
class C{  public void onNewIntent(Intent intent){}  }
class C{  public static ParsedUpdate parseUpdate(QueryLanguage ql,String update,String baseURI) throws MalformedQueryException, UnsupportedQueryLanguageException {  QueryParser parser=createParser(ql);  return parser.parseUpdate(update,baseURI);}  }
class C{  public Instance instantiate(Database database,Relation<V> relation){  DistanceQuery<V> dq=database.getDistanceQuery(relation,EuclideanDistanceFunction.STATIC);  KNNQuery<V> knnq=database.getKNNQuery(dq,settings.k);  WritableDataStore<PCAFilteredResult> storage=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,PCAFilteredResult.class);  PCARunner pca=settings.pca;  EigenPairFilter filter=settings.filter;  Duration time=LOG.newDuration(this.getClass().getName() + ".preprocessing-time").begin();  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress(this.getClass().getName(),relation.size(),LOG) : null;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    DoubleDBIDList ref=knnq.getKNNForDBID(iditer,settings.k);    PCAResult pcares=pca.processQueryResult(ref,relation);    storage.put(iditer,new PCAFilteredResult(pcares.getEigenPairs(),filter.filter(pcares.getEigenvalues()),1.,0.));    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  LOG.statistics(time.end());  return new Instance(relation.getDBIDs(),storage,relation);}  }
class C{  public static void expand(){  Alphabet DNA=Alphabet.DNA;  int n=BinaryStdIn.readInt();  for (int i=0; i < n; i++) {    char c=BinaryStdIn.readChar(2);    BinaryStdOut.write(DNA.toChar(c),8);  }  BinaryStdOut.close();}  }
class C{  public HttpServletResponse doGet(HttpServlet servlet) throws Exception {  return doMethod("GET",servlet);}  }
class C{  protected <T>T processServiceCall(final ResponseConverter<T> converter,Response response){  if (response.isSuccessful()) {    return converter.convert(response);  }  final String error=getErrorMessage(response);  LOG.log(Level.SEVERE,response.request().method() + " " + response.request().url().toString()+ ", status: "+ response.code()+ ", error: "+ error);switch (response.code()) {case HttpStatus.BAD_REQUEST:    throw new BadRequestException(error != null ? error : "Bad Request",response);case HttpStatus.UNAUTHORIZED:  throw new UnauthorizedException("Unauthorized: Access is denied due to invalid credentials",response);case HttpStatus.FORBIDDEN:throw new ForbiddenException(error != null ? error : "Forbidden: Service refuse the request",response);case HttpStatus.NOT_FOUND:throw new NotFoundException(error != null ? error : "Not found",response);case HttpStatus.NOT_ACCEPTABLE:throw new ForbiddenException(error != null ? error : "Forbidden: Service refuse the request",response);case HttpStatus.CONFLICT:throw new ConflictException(error != null ? error : "",response);case HttpStatus.REQUEST_TOO_LONG:throw new RequestTooLargeException(error != null ? error : "Request too large: " + "The request entity is larger than the server is able to process",response);case HttpStatus.UNSUPPORTED_MEDIA_TYPE:throw new UnsupportedException(error != null ? error : "Unsupported Media Type",response);case HttpStatus.TOO_MANY_REQUESTS:throw new TooManyRequestsException(error != null ? error : "Too many requests",response);case HttpStatus.INTERNAL_SERVER_ERROR:throw new InternalServerErrorException(error != null ? error : "Internal Server Error",response);case HttpStatus.SERVICE_UNAVAILABLE:throw new ServiceUnavailableException(error != null ? error : "Service Unavailable",response);default :throw new ServiceResponseException(response.code(),error,response);}}  }
class C{  @Override public int hashCode(){  int yearValue=year;  int monthValue=month;  int dayValue=day;  return (yearValue & 0xFFFFF800) ^ ((yearValue << 11) + (monthValue << 6) + (dayValue));}  }
class C{  public Builder corePoolSize(int corePoolSize){  this.corePoolSize=corePoolSize;  return this;}  }
class C{  public void addUniqueAttribute(String name,String value,int flags) throws SAXException {  try {    final java.io.Writer writer=m_writer;    if ((flags & NO_BAD_CHARS) > 0 && m_htmlcharInfo.onlyQuotAmpLtGt) {      writer.write(' ');      writer.write(name);      writer.write("=\"");      writer.write(value);      writer.write('"');    } else     if ((flags & HTML_ATTREMPTY) > 0 && (value.length() == 0 || value.equalsIgnoreCase(name))) {      writer.write(' ');      writer.write(name);    } else {      writer.write(' ');      writer.write(name);      writer.write("=\"");      if ((flags & HTML_ATTRURL) > 0) {        writeAttrURI(writer,value,m_specialEscapeURLs);      } else {        writeAttrString(writer,value,this.getEncoding());      }      writer.write('"');    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  protected Instances applyFilter(Filter[] filters,Range[] ranges,boolean remove) throws Exception {  PartitionedMultiFilter filter;  Instances result;  filter=(PartitionedMultiFilter)getFilter();  filter.setFilters(filters);  filter.setRanges(ranges);  filter.setRemoveUnused(remove);  filter.setInputFormat(m_Instances);  result=Filter.useFilter(m_Instances,filter);  return result;}  }
class C{  public WindowBuilder helpLink(final String helpLink){  this.helpLink=helpLink;  return this;}  }
class C{  protected double angleBetween(Point2D v1,Point2D v2){  double x1=v1.getX();  double y1=v1.getY();  double x2=v2.getX();  double y2=v2.getY();  double cross=x1 * y2 - x2 * y1;  int cw=1;  if (cross > 0) {    cw=-1;  }  double angle=cw * Math.acos((x1 * x2 + y1 * y2) / (Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2)));  if (Double.isNaN(angle)) {    angle=0;  }  return angle;}  }
class C{  public final void clear(){  collection.clear();}  }
class C{  public void removePropertyChangeListener(final PropertyChangeListener listener){  propertyChangeSupport.removePropertyChangeListener(listener);}  }
class C{  protected Vector secureProduct(Vector v){  int n=this.rows();  int m=this.columns();  double[] vectorComponents=new double[n];  for (int i=0; i < n; i++) {    vectorComponents[i]=0;    for (int j=0; j < m; j++)     vectorComponents[i]+=components[i][j] * v.components[j];  }  return new Vector(vectorComponents);}  }
class C{  public void deregister(LocalDispatcher local){  if (Debug.infoOn())   Debug.logInfo("De-Registering dispatcher: " + local.getName(),module);  localContext.remove(local.getName());  if (localContext.size() == 0) {    try {      this.shutdown();    } catch (    GenericServiceException e) {      Debug.logError(e,"Trouble shutting down ServiceDispatcher!",module);    }  }}  }
class C{  public static VisorAtomicConfiguration from(AtomicConfiguration src){  VisorAtomicConfiguration cfg=new VisorAtomicConfiguration();  cfg.seqReserveSize=src.getAtomicSequenceReserveSize();  cfg.cacheMode=src.getCacheMode();  cfg.backups=src.getBackups();  return cfg;}  }
class C{  public static int convertToColorInt(String argb) throws IllegalArgumentException {  if (!argb.startsWith("#")) {    argb="#" + argb;  }  return Color.parseColor(argb);}  }
class C{  private boolean isHiraganaIterationMark(char c){  if (normalizeKana) {    return c == HIRAGANA_ITERATION_MARK || c == HIRAGANA_VOICED_ITERATION_MARK;  } else {    return false;  }}  }
class C{  public void paintValue(Graphics g,Rectangle box){  Color oldColor=g.getColor();  Font oldFont=g.getFont();  g.setColor(Color.blue);  g.setFont(new Font(oldFont.getFontName(),Font.BOLD,oldFont.getSize()));  g.drawRect(box.x - 1,box.y + 1,box.width - 2,box.height - 2);  g.setColor(Color.white);  g.drawString("Click to Edit",box.x + 10,box.y + box.height / 2 + 4);  g.setFont(oldFont);  g.setColor(oldColor);}  }
class C{  private double betafunction(double[] x){  int dim=x.length;  if (dType == 1) {    double beta=0;    for (int i=0; i < dim; i++) {      beta+=x[i] * x[i];    }    return 2.0 * beta / dim;  } else   if (dType == 2) {    double beta=0;    for (int i=0; i < dim; i++) {      beta+=Math.sqrt(i + 1) * x[i] * x[i];    }    return 2.0 * beta / dim;  } else   if (dType == 3) {    double sum=0;    double xx;    for (int i=0; i < dim; i++) {      xx=2 * x[i];      sum+=(xx * xx - Math.cos(4 * Math.PI * xx) + 1);    }    return 2.0 * sum / dim;  } else   if (dType == 4) {    double sum=0;    double prod=1;    double xx;    for (int i=0; i < dim; i++) {      xx=2 * x[i];      sum+=xx * xx;      prod*=Math.cos(10 * Math.PI * xx / Math.sqrt(i + 1));    }    return 2.0 * (sum - 2 * prod + 2) / dim;  } else {    throw new IllegalStateException();  }}  }
class C{  private void editSubscriptions(){  String packageName=getPackageName();  Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + packageName));  startActivity(i);}  }
class C{  public void stateChanged(ChangeEvent e){  if (centerTabbedPane.getSelectedIndex() == 1)   initReservedOrderedTab(true); else   if (centerTabbedPane.getSelectedIndex() == 2)   initReservedOrderedTab(false); else   if (centerTabbedPane.getSelectedIndex() == 3)   initUnconfirmedTab(); else   if (centerTabbedPane.getSelectedIndex() == 4)   initAtpTab();}  }
class C{  @Override protected void onStartLoading(){  if (mData != null) {    deliverResult(mData);  }  if (mPackageObserver == null) {    mPackageObserver=new PackageIntentReceiver(this);  }  if (takeContentChanged() || mData == null) {    forceLoad();  }}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  @Override public float estimateCost(final Rule rule){  if (rule != null && rule.getOwner().equals(ownerID)) {    if (rule.getPrecomputableCost() <= Float.NEGATIVE_INFINITY)     rule.setPrecomputableCost(phrase_weights,weights);    return rule.getPrecomputableCost();  }  return 0.0f;}  }
class C{  public GfManagerAgentConfig(String displayName,TransportConfig transport,InternalLogWriter logWriter,int level,AlertListener listener,DisconnectListener disconnectListener){  this.displayName=displayName;  this.transport=transport;  this.logWriter=logWriter;  this.alertLevel=level;  this.alertListener=listener;  this.disconnectListener=disconnectListener;}  }
class C{  public static TermQueryBuilder termQuery(String name,float value){  return new TermQueryBuilder(name,value);}  }
class C{  public final int invalidateActiveSessions(){  final ContentValues values=new ContentValues();  values.put(Schema.COL_IS_ACTIVE,0);  return contentResolver.update(ContentProvider.CONTENT_URI_SESSION,values,Schema.COL_IS_ACTIVE + " > 0",null);}  }
class C{  boolean shouldEDTSleepNoFormAnimation(){  boolean b;synchronized (lock) {    b=inputEventStackPointer == 0 && hasNoSerialCallsPending() && (!keyRepeatCharged || !longPressCharged);  }  return b;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  Attr clonedTitle;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  clonedTitle=(Attr)titleAttr.cloneNode(false);  textNode.setNodeValue("text_node_not_cloned");  value=clonedTitle.getValue();  assertEquals("attrValue","Yesterday",value);  value=clonedTitle.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  lastChild=clonedTitle.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","terday",value);}  }
class C{  public ResultRecord(DirectoryScannerConfig scan,Action[] actions,File f){  directoryScanner=scan.getName();  this.actions=actions;  date=new Date();  filename=f.getAbsolutePath();}  }
class C{  public KMeansPDN(){  this(new HamerlyKMeans());}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  static <K,V>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {  stream.writeInt(map.size());  for (  Map.Entry<K,V> entry : map.entrySet()) {    stream.writeObject(entry.getKey());    stream.writeObject(entry.getValue());  }}  }
class C{  public HexEditorEvent(HexEditor editor,int offs,int added,int removed){  super(editor);  this.offset=offs;  this.added=added;  this.removed=removed;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void makeValueIndex(Number max,Number min,Set uniqueValues){  double valueRange=max.doubleValue() - min.doubleValue();  double valueStep=valueRange / this.paintLimit;  int paint=0;  double cutPoint=min.doubleValue() + valueStep;  for (Iterator i=uniqueValues.iterator(); i.hasNext(); ) {    Number value=(Number)i.next();    while (value.doubleValue() > cutPoint) {      cutPoint+=valueStep;      paint++;      if (paint > this.paintLimit) {        paint=this.paintLimit;      }    }    this.paintIndex.put(value,new Integer(paint));  }}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public Generator(int baseWidth,int beseHeight){  this.baseWidth=baseWidth;  this.beseHeight=beseHeight;  XSTREAM.autodetectAnnotations(true);  this.resFile=new File("./res");  if (!resFile.exists()) {    resFile.mkdir();  }}  }
class C{  public void testShiftRightNegZeroes(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,0,0,0,0,0,0,0,0,0};  int aSign=-1;  int number=68;  byte rBytes[]={-25,-4,121,-80,20,-70,109,48};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static JSONArrayHelper newJSONArrayHelper(){  return new JSONArrayHelper();}  }
class C{  public static boolean isMemoryLimited(){  return MemUtil.isMemoryLimited();}  }
class C{  public static int findNextNewLineChar(CharSequence s,int start){  for (int i=start; i < s.length(); i++) {    if (s.charAt(i) == '\n') {      return i;    }  }  return -1;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Builder notificationIcon(@DrawableRes int resId){  notificationConfig.setNotificationIcon(resId);  return this;}  }
class C{  public void modelDestroyed(SessionEvent event){  getSessionSupport().fireSessionEvent(event);  setSessionChanged(true);}  }
class C{  public void removeRecord(short platformID,short platformSpecificID,short languageID,short nameID){  NameRecord rec=new NameRecord(platformID,platformSpecificID,languageID,nameID);  records.remove(rec);}  }
class C{  public boolean class_method_var(){  return soot.PhaseOptions.getBoolean(options,"class-method-var");}  }
class C{  public static Number multiply(Number left,Character right){  return NumberNumberMultiply.multiply(Integer.valueOf(right),left);}  }
class C{  public void executeCallback(SceKernelThreadInfo thread,int address,IAction afterAction,boolean returnVoid,int registerA0,int registerA1,int registerA2,int registerA3){  if (log.isDebugEnabled()) {    log.debug(String.format("Execute callback 0x%08X($a0=0x%08X, $a1=0x%08X, $a2=0x%08X, $a3=0x%08X), afterAction=%s, returnVoid=%b",address,registerA0,registerA1,registerA2,registerA3,afterAction,returnVoid));  }  callAddress(thread,address,afterAction,returnVoid,false,new int[]{registerA0,registerA1,registerA2,registerA3});}  }
class C{  protected void run(){  if (minute == 59)   hour=hour + 1;  if (second == 59)   minute=minute + 1;  second=second < 59 ? second + 1 : 0;  text.setText(getTime());}  }
class C{  @NonNull public static Animator fadeOut(float duration,@Nullable Interpolator interpolator){  return alpha(0,duration,interpolator);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  flushStartDoc();  m_resultContentHandler.startPrefixMapping(prefix,uri);}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  for (int i=0; i < this.axes.size(); i++) {    final ValueAxis axis=(ValueAxis)this.axes.get(i);    if (axis != null) {      axis.configure();    }  }  if (getParent() != null) {    getParent().datasetChanged(event);  } else {    super.datasetChanged(event);  }}  }
class C{  public int end(int group){  if (first < 0)   throw new IllegalStateException("No match available");  if (group < 0 || group > groupCount())   throw new IndexOutOfBoundsException("No group " + group);  return groups[group * 2 + 1];}  }
class C{  Builder addLenient(String line){  int index=line.indexOf(":",1);  if (index != -1) {    return addLenient(line.substring(0,index),line.substring(index + 1));  } else   if (line.startsWith(":")) {    return addLenient("",line.substring(1));  } else {    return addLenient("",line);  }}  }
class C{  private void initCrawler(String indexFile,String linkFile,String semFile,String logFile) throws IOException {  this.logFileName=logFile;  System.out.println("Loading id - URL map.");  BufferedReader br=InputUtil.getBufferedReader(new File(indexFile));  int cnt=0;  while (br.ready()) {    String line=br.readLine();    String tok[]=line.split("\t");    Long id=Long.parseLong(tok[0]);    cnt++;    mapper.put(id,cnt);  }  br.close();  System.out.println("Read " + mapper.size() + " indexes.");  System.out.println("Reading id - id link map.");  br=InputUtil.getBufferedReader(new File(linkFile));  int lCnt=0;  while (br.ready()) {    if (++lCnt % 100000 == 0) {      System.out.println("... read " + lCnt + " Urls with links.");    }    String line=br.readLine();    String tok[]=line.split("\t");    List<Integer> ids=new ArrayList<Integer>();    for (int i=1; i < tok.length; i++) {      ids.add(mapper.get(Long.parseLong(tok[i])));    }    linkArrayList[mapper.get(Long.parseLong(tok[0]))]=ids;  }  br.close();  System.out.println("Read " + lCnt + " urls with outgoing links.");  System.out.println("Reading sem id set.");  br=InputUtil.getBufferedReader(new File(semFile));  while (br.ready()) {    String line=br.readLine();    String tok[]=line.split("\t");    Integer id=mapper.get(Long.parseLong(tok[0]));    if (id != null) {      semIds.add(id);    }  }  br.close();  System.out.println("Read " + semIds.size() + " semantic ids.");}  }
class C{  private static Opt<Integer> data(final InputStream input,final Opt<Integer> data,final boolean available) throws IOException {  final Opt<Integer> ret;  if (data.has()) {    ret=data;  } else   if (available && input.available() <= 0) {    ret=new Opt.Single<>(-1);  } else {    ret=new Opt.Single<>(input.read());  }  return ret;}  }
class C{  public NodeWalker(Node rootNode){  nodes=new Stack<Node>();  nodes.add(rootNode);}  }
class C{  private InetSocketAddress nextInetSocketAddress() throws UnknownHostException {  InetSocketAddress result=new InetSocketAddress(socketAddresses[nextSocketAddressIndex++],socketPort);  if (nextSocketAddressIndex == socketAddresses.length) {    socketAddresses=null;    nextSocketAddressIndex=0;  }  return result;}  }
class C{  public static void deleteAllDataAndSetNewPassword(Context context,String password){  GpsTrailerDb.dropAndRecreateEncryptedTables(GTG.db);  setupPreferencesForCrypt(context,password);}  }
class C{  public void write(int b,long pos) throws IOException {  if (pos < 0) {    throw new ArrayIndexOutOfBoundsException("pos < 0");  }  if (pos >= length) {    pad(pos);    length=pos + 1;  }  byte[] buf=getCacheBlock(pos / BUFFER_LENGTH);  int offset=(int)(pos % BUFFER_LENGTH);  buf[offset]=(byte)b;}  }
class C{  public void registerListeners(PropertyChangeSupport pcs){  PropertyChangeListener listener=new HPChangeListener();  addPropertyChangeListenerWithModifiedSupport(pcs,"base_hp",listener);  addPropertyChangeListenerWithModifiedSupport(pcs,"hp",listener);  listener=new ATKChangeListener();  addPropertyChangeListenerWithModifiedSupport(pcs,"atk",listener);  pcs.addPropertyChangeListener("atk_xp",listener);  listener=new DEFChangeListener();  addPropertyChangeListenerWithModifiedSupport(pcs,"def",listener);  pcs.addPropertyChangeListener("def_xp",listener);  if (Testing.COMBAT) {    listener=new RATKChangeListener();    addPropertyChangeListenerWithModifiedSupport(pcs,"ratk",listener);    pcs.addPropertyChangeListener("ratk_xp",listener);  }  listener=new XPChangeListener();  pcs.addPropertyChangeListener("xp",listener);  listener=new LevelChangeListener();  addPropertyChangeListenerWithModifiedSupport(pcs,"level",listener);  listener=new WeaponChangeListener();  pcs.addPropertyChangeListener("atk_item",listener);  listener=new ArmorChangeListener();  pcs.addPropertyChangeListener("def_item",listener);  if (Testing.COMBAT) {    listener=new RangedWeaponChangeListener();    pcs.addPropertyChangeListener("ratk_item",listener);  }  listener=new MoneyChangeListener();  for (  String slot : MONEY_SLOTS) {    pcs.addPropertyChangeListener(slot,listener);  }  listener=new EatingChangeListener();  pcs.addPropertyChangeListener("eating",listener);  pcs.addPropertyChangeListener("choking",listener);  listener=new StatusChangeListener();  for (  StatusID id : StatusID.values()) {    pcs.addPropertyChangeListener(id.getAttribute(),listener);  }  listener=new AwayChangeListener();  pcs.addPropertyChangeListener("away",listener);  listener=new GrumpyChangeListener();  pcs.addPropertyChangeListener("grumpy",listener);  listener=new KarmaChangeListener();  pcs.addPropertyChangeListener("karma",listener);  listener=new ManaChangeListener();  addPropertyChangeListenerWithModifiedSupport(pcs,"base_mana",listener);  addPropertyChangeListenerWithModifiedSupport(pcs,"mana",listener);}  }
class C{  void reset(){  System.arraycopy(iv,0,register,0,blockSize);}  }
class C{  public static double computeSphereProjectedArea(View view,Vec4 center,double radius){  if (view == null) {    String message=Logging.getMessage("nullValue.ViewIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (center == null) {    String message=Logging.getMessage("nullValue.CenterIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (radius < 0) {    String message=Logging.getMessage("Geom.RadiusIsNegative",radius);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (radius == 0)   return 0;  double depth=Math.abs(center.transformBy4(view.getModelviewMatrix()).z);  double radiusInPixels=radius / view.computePixelSizeAtDistance(depth);  return Math.PI * radiusInPixels * radiusInPixels;}  }
class C{  private List<GitHubPRCause> readyToBuildCauses(@Nonnull GitHubPRRepository localRepository,@Nonnull LoggingTaskListenerWrapper listener,@Nullable Integer prNumber){  try {    GitHub github=DescriptorImpl.githubFor(localRepository.getGithubUrl().toURI());    GHRateLimit rateLimitBefore=github.getRateLimit();    listener.debug("GitHub rate limit before check: {}",rateLimitBefore);    GHRepository remoteRepo=getRemoteRepository();    Set<GHPullRequest> remotePulls=pullRequestsToCheck(prNumber,remoteRepo,localRepository);    Set<GHPullRequest> prepared=from(remotePulls).filter(badState(localRepository,listener)).filter(notUpdated(localRepository,listener)).transform(prepareUserRestrictionFilter(localRepository,this)).toSet();    List<GitHubPRCause> causes=from(prepared).filter(and(ifSkippedFirstRun(listener,skipFirstRun),withBranchRestriction(listener,branchRestriction),withUserRestriction(listener,userRestriction))).transform(toGitHubPRCause(localRepository,listener,this)).filter(notNull()).toList();    LOGGER.trace("Causes count for {}: {}",localRepository.getFullName(),causes.size());    from(remotePulls).transform(updateLocalRepo(localRepository)).toSet();    saveIfSkipFirstRun();    GHRateLimit rateLimitAfter=github.getRateLimit();    int consumed=rateLimitBefore.remaining - rateLimitAfter.remaining;    LOGGER.info("GitHub rate limit after check {}: {}, consumed: {}, checked PRs: {}",localRepository.getFullName(),rateLimitAfter,consumed,remotePulls.size());    return causes;  } catch (  IOException|URISyntaxException e) {    listener.error("Can't get build causes: ",e);    return Collections.emptyList();  }}  }
class C{  public void endVisit(InfixExpression node){}  }
class C{  public LinkedCaseInsensitiveMap(Locale locale){  super();  this.caseInsensitiveKeys=new HashMap<String,String>();  this.locale=(locale != null ? locale : Locale.getDefault());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.326 -0500",hash_original_method="593629377CF6402E72F5DC997FF5D0DD",hash_generated_method="E5520E2615841A376E1AE93951083E59") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public static boolean hasUtil(final String util,final String box){  return getInternals().hasUtil(util,box);}  }
class C{  protected boolean isStateTransitionAllowed(StateType oldState,StateType newState){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.710 -0500",hash_original_method="182A36951EBA765A4D1CAFFC02BFF851",hash_generated_method="129BC9F4D86B8059494E49277383CAE7") @DSSafe(DSCat.SAFE_OTHERS) @DSVerified public boolean showSoftInput(View view,int flags,ResultReceiver resultReceiver){  checkFocus();synchronized (mH) {    if (resultReceiver != null) {      resultReceiver.send(DSUtils.FAKE_INT,new Bundle());    }    if (mServedView != view && (mServedView == null || !mServedView.checkInputConnectionProxy(view))) {      return false;    }    try {      return mService.showSoftInput(mClient,flags,resultReceiver);    } catch (    RemoteException e) {    }    return false;  }}  }
class C{  public static Map<String,Object> updateContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  context.put("skipPermissionCheck",null);  Map<String,Object> result=updateContentAssocMethod(dctx,context);  return result;}  }
class C{  public Class<?> type(){  if (isClass) {    return (Class<?>)object;  } else {    return object.getClass();  }}  }
class C{  public ProjectionComponent(final String name,final int numDataSources){  super(name);  projectionModel=new ProjectionModel(numDataSources);  initializeConsumers();  addListener();}  }
class C{  public Builder customProperty(String name,Number value){  return customProperty(new Property(name,value));}  }
class C{  private void advance(Node prev){  Node r, b;  if ((r=lastRet) != null && !r.isMatched())   lastPred=r; else   if ((b=lastPred) == null || b.isMatched())   lastPred=null; else {    Node s, n;    while ((s=b.next) != null && s != b && s.isMatched() && (n=s.next) != null && n != s)     b.casNext(s,n);  }  this.lastRet=prev;  for (Node p=prev, s, n; ; ) {    s=(p == null) ? head : p.next;    if (s == null)     break; else     if (s == p) {      p=null;      continue;    }    Object item=s.item;    if (s.isData) {      if (item != null && item != s) {        nextItem=LinkedTransferQueue.<E>cast(item);        nextNode=s;        return;      }    } else     if (item == null)     break;    if (p == null)     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=null; else     p.casNext(s,n);  }  nextNode=null;  nextItem=null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.writeObject(iInstant);  oos.writeObject(iField.getType());}  }
class C{  protected void finalize() throws Throwable {  this.reader=null;  super.finalize();}  }
class C{  public R proceed2(final T2 param){  return fn.apply(param1,param);}  }
class C{  private void processElementCluster(GeneratorMain gen,Node cur){  int size=-1;  double overweight=1.0;  String sizestr=((Element)cur).getAttribute(ATTR_SIZE);  if (sizestr != null && sizestr.length() > 0) {    size=(int)(Integer.parseInt(sizestr) * sizescale);  }  String name=((Element)cur).getAttribute(ATTR_NAME);  String dcostr=((Element)cur).getAttribute(ATTR_DENSITY);  if (dcostr != null && dcostr.length() > 0) {    overweight=ParseUtil.parseDouble(dcostr);  }  if (size < 0) {    throw new AbortException("No valid cluster size given in specification file.");  }  if (name == null || name.length() == 0) {    throw new AbortException("No cluster name given in specification file.");  }  Random newRand=clusterRandom.getSingleThreadedRandom();  GeneratorSingleCluster cluster=new GeneratorSingleCluster(name,size,overweight,newRand);  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (TAG_UNIFORM.equals(child.getNodeName())) {      processElementUniform(cluster,child);    } else     if (TAG_NORMAL.equals(child.getNodeName())) {      processElementNormal(cluster,child);    } else     if (TAG_GAMMA.equals(child.getNodeName())) {      processElementGamma(cluster,child);    } else     if (TAG_HALTON.equals(child.getNodeName())) {      processElementHalton(cluster,child);    } else     if (TAG_ROTATE.equals(child.getNodeName())) {      processElementRotate(cluster,child);    } else     if (TAG_TRANSLATE.equals(child.getNodeName())) {      processElementTranslate(cluster,child);    } else     if (TAG_CLIP.equals(child.getNodeName())) {      processElementClipping(cluster,child);    } else     if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }  gen.addCluster(cluster);}  }
class C{  public void doRandomSortsOnLargeIndex() throws Exception {  final Collection<String> allFieldNames=getAllSortFieldNames();  final int numInitialDocs=TestUtil.nextInt(random(),100,200);  final int totalDocs=atLeast(500);  List<SolrInputDocument> initialDocs=new ArrayList<>();  for (int i=1; i <= numInitialDocs; i++) {    SolrInputDocument doc=CursorPagingTest.buildRandomDocument(i);    initialDocs.add(doc);    indexDoc(doc);  }  commit();  for (  String f : allFieldNames) {    for (    String order : new String[]{" asc"," desc"}) {      String sort=f + order + ("id".equals(f) ? "" : ", id" + order);      String rows="" + TestUtil.nextInt(random(),13,50);      SentinelIntSet ids=assertFullWalkNoDups(numInitialDocs,params("q","*:*","fl","id," + f,"rows",rows,"sort",sort));      if (numInitialDocs != ids.size()) {        StringBuilder message=new StringBuilder("Expected " + numInitialDocs + " docs but got "+ ids.size()+ ". ");        message.append("sort=");        message.append(sort);        message.append(". ");        if (ids.size() < numInitialDocs) {          message.append("Missing doc(s): ");          for (          SolrInputDocument doc : initialDocs) {            int id=((Integer)doc.get("id").getValue()).intValue();            if (!ids.exists(id)) {              QueryResponse rsp=cloudClient.query(params("q","id:" + id,"rows","1"));              if (0 == rsp.getResults().size()) {                message.append("<NOT RETRIEVABLE>:");                message.append(doc.values());              } else {                message.append(rsp.getResults().get(0).getFieldValueMap().toString());              }              message.append("; ");            }          }        }        fail(message.toString());      }    }  }  for (int i=numInitialDocs + 1; i <= totalDocs; i++) {    SolrInputDocument doc=CursorPagingTest.buildRandomDocument(i);    indexDoc(doc);  }  commit();  final int numRandomSorts=atLeast(3);  for (int i=0; i < numRandomSorts; i++) {    final String sort=CursorPagingTest.buildRandomSort(allFieldNames);    final String rows="" + TestUtil.nextInt(random(),63,113);    final String fl=random().nextBoolean() ? "id" : "id,score";    final boolean matchAll=random().nextBoolean();    final String q=matchAll ? "*:*" : CursorPagingTest.buildRandomQuery();    SentinelIntSet ids=assertFullWalkNoDups(totalDocs,params("q",q,"fl",fl,"rows",rows,"sort",sort));    if (matchAll) {      assertEquals(totalDocs,ids.size());    }  }}  }
class C{  public synchronized boolean isDesignTime(){  return designTime;}  }
class C{  public static void showOperationError(final Project project,final VcsException ex,@NonNls @NotNull final String operation){  showOperationError(project,operation,ex.getMessage());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String sprintf(final double x) throws IllegalArgumentException {  final Iterator<ConversionSpecification> e=vFmt.iterator();  ConversionSpecification cs;  char c;  final StringBuilder sb=new StringBuilder();  while (e.hasNext()) {    cs=e.next();    c=cs.getConversionCharacter();    if (c == '\0') {      sb.append(cs.getLiteral());    } else     if (c == '%') {      sb.append('%');    } else {      sb.append(cs.internalsprintf(x));    }  }  return sb.toString();}  }
class C{  public ProofFoldAction(ResourceBundle bundle,String prefix,TLAEditor editor){  super(bundle,prefix,editor);  editor.getViewer().getTextWidget().addCaretListener(this);  editor.getSelectionProvider().addSelectionChangedListener(this);}  }
class C{  public static boolean strictEquals(Value xv,Value yv){  xv=safeValue(xv,Isolate.DEFAULT_ID);  yv=safeValue(yv,Isolate.DEFAULT_ID);  Object x=xv.getValueAsObject();  Object y=yv.getValueAsObject();  if (xv.getType() == yv.getType()) {    if (x == Value.UNDEFINED)     return true;    if (x == null)     return true;    if (x instanceof Double) {      double dx=((Double)x).doubleValue();      double dy=((Double)y).doubleValue();      return dx == dy;    }    if (x instanceof String || x instanceof Boolean)     return x.equals(y);    if (xv.getId() != -1 || yv.getId() != -1)     return xv.getId() == yv.getId();    return false;  } else {    return false;  }}  }
class C{  protected void updateDamage(DocumentEvent changes,Shape a,ViewFactory f){  Component host=getContainer();  updateMetrics();  Element elem=getElement();  DocumentEvent.ElementChange ec=changes.getChange(elem);  Element[] added=(ec != null) ? ec.getChildrenAdded() : null;  Element[] removed=(ec != null) ? ec.getChildrenRemoved() : null;  if (((added != null) && (added.length > 0)) || ((removed != null) && (removed.length > 0))) {    if (added != null) {      int currWide=getLineWidth(longLine);      for (int i=0; i < added.length; i++) {        int w=getLineWidth(added[i]);        if (w > currWide) {          currWide=w;          longLine=added[i];        }      }    }    if (removed != null) {      for (int i=0; i < removed.length; i++) {        if (removed[i] == longLine) {          calculateLongestLine();          break;        }      }    }    preferenceChanged(null,true,true);    host.repaint();  } else {    Element map=getElement();    int line=map.getElementIndex(changes.getOffset());    damageLineRange(line,line,a,host);    if (changes.getType() == DocumentEvent.EventType.INSERT) {      int w=getLineWidth(longLine);      Element e=map.getElement(line);      if (e == longLine) {        preferenceChanged(null,true,false);      } else       if (getLineWidth(e) > w) {        longLine=e;        preferenceChanged(null,true,false);      }    } else     if (changes.getType() == DocumentEvent.EventType.REMOVE) {      if (map.getElement(line) == longLine) {        calculateLongestLine();        preferenceChanged(null,true,false);      }    }  }}  }
class C{  public boolean draw(Canvas canvas){  update();  final int glowHeight=mGlow.getIntrinsicHeight();  final float distScale=(float)mHeight / mWidth;  mGlow.setAlpha((int)(Math.max(0,Math.min(mGlowAlpha,1)) * 255));  mGlow.setBounds(0,0,mWidth,(int)Math.min(glowHeight * mGlowScaleY * distScale* 0.6f,mHeight * MAX_GLOW_HEIGHT));  mGlow.draw(canvas);  if (mEdge != null) {    final int edgeHeight=mEdge.getIntrinsicHeight();    mEdge.setAlpha((int)(Math.max(0,Math.min(mEdgeAlpha,1)) * 255));    mEdge.setBounds(0,0,mWidth,(int)(edgeHeight * mEdgeScaleY));    mEdge.draw(canvas);  }  return mState != STATE_IDLE;}  }
class C{  private DatabaseExportUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  protected void initialize(){  int iwidth=m_plotPanel.getWidth();  int iheight=m_plotPanel.getHeight();  m_osi=m_plotPanel.createImage(iwidth,iheight);  Graphics m=m_osi.getGraphics();  m.fillRect(0,0,iwidth,iheight);}  }
class C{  @Override public void eagerlyMmapAllSpaces(AddressArray spaceMap){}  }
class C{  private List<NodePair> allNodePairs(List<Node> nodes){  List<NodePair> nodePairs=new ArrayList<>();  for (int j=0; j < nodes.size() - 1; j++) {    for (int k=j + 1; k < nodes.size(); k++) {      nodePairs.add(new NodePair(nodes.get(j),nodes.get(k)));    }  }  return nodePairs;}  }
class C{  @Override protected void onResume(){  super.onResume();  LOG.d(TAG,"Resumed the activity.");  if (this.appView == null) {    return;  }  this.getWindow().getDecorView().requestFocus();  this.appView.handleResume(this.keepRunning);}  }
class C{  @Override public void pool(){  disconnect();}  }
class C{  public void needMoreMemory(){  imgmap.clear();  log("HACK! need more memory: freeing up memory");}  }
class C{  public TechnicalServiceMultiSubscriptions(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  Enumeration(CharSet cs){  this.chars=cs.chars;  p=0;}  }
class C{  @Override protected void calculateThumbLocation(){  super.calculateThumbLocation();  if (slider.getSnapToTicks()) {    int upperValue=slider.getValue() + slider.getExtent();    int snappedValue=upperValue;    int majorTickSpacing=slider.getMajorTickSpacing();    int minorTickSpacing=slider.getMinorTickSpacing();    int tickSpacing=0;    if (minorTickSpacing > 0) {      tickSpacing=minorTickSpacing;    } else     if (majorTickSpacing > 0) {      tickSpacing=majorTickSpacing;    }    if (tickSpacing != 0) {      if ((upperValue - slider.getMinimum()) % tickSpacing != 0) {        float temp=(float)(upperValue - slider.getMinimum()) / (float)tickSpacing;        int whichTick=Math.round(temp);        snappedValue=slider.getMinimum() + (whichTick * tickSpacing);      }      if (snappedValue != upperValue) {        slider.setExtent(snappedValue - slider.getValue());      }    }  }  if (slider.getOrientation() == JSlider.HORIZONTAL) {    int upperPosition=xPositionForValue(slider.getValue() + slider.getExtent());    upperThumbRect.x=upperPosition - (upperThumbRect.width / 2);    upperThumbRect.y=trackRect.y;  } else {    int upperPosition=yPositionForValue(slider.getValue() + slider.getExtent());    upperThumbRect.x=trackRect.x;    upperThumbRect.y=upperPosition - (upperThumbRect.height / 2);  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  public void enableCache(){  enableCache(getCount());}  }
class C{  public int lastIndexOf(int offset,byte value){  for (int i=offset; i-- > 0; ) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  private boolean isReservingOverflow(){  if (!mReserveOverflowSet) {    mReserveOverflow=ActionMenuPresenter.reserveOverflow(mActivity);    mReserveOverflowSet=true;  }  return mReserveOverflow;}  }
class C{  public void put(float newValue){  get(newValue);}  }
class C{  public List<Space> S() throws ScopeException, ComputingException {  return universe.getCartography().getSubspaces(universe,this);}  }
class C{  public Writer asWriter(){  return new StrBuilderWriter();}  }
class C{  public void clear(){  locked=false;  reset(0);}  }
class C{  protected void createTextFile(String infile,Charset charsetInfile,String toDir,String outfile,Charset charsetOutfile,Map<String,String> variables) throws NullPointerException, IOException {  String infileResource=infile.replace('\\','/');  InputStream is=getClass().getClassLoader().getResourceAsStream(infileResource);  InputStreamReader inRead=new InputStreamReader(is,charsetInfile);  BufferedReader bufRead=new BufferedReader(inRead);  StringBuffer skelFile=new StringBuffer();  String line;  Pattern var=Pattern.compile("\\{(.*)\\}");  while ((line=bufRead.readLine()) != null) {    line=line.replaceFirst("\n",LINE_SEP);    if (variables != null) {      Matcher match=var.matcher(line);      if (match.find()) {        line=match.replaceFirst(variables.get(match.group(1)));      }    }    skelFile.append(line + LINE_SEP);  }  bufRead.close();  inRead.close();  is.close();  backupFile(toDir,outfile);  FileOutputStream fout=new FileOutputStream(toDir + File.separator + outfile,false);  OutputStreamWriter outWrite=new OutputStreamWriter(fout,charsetOutfile);  outWrite.write(skelFile.toString());  outWrite.close();  fout.close();}  }
class C{  private List<FacetResult> search() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  SortedSetDocValuesReaderState state=new DefaultSortedSetDocValuesReaderState(indexReader);  FacetsCollector fc=new FacetsCollector();  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);  Facets facets=new SortedSetDocValuesFacetCounts(state,fc);  List<FacetResult> results=new ArrayList<>();  results.add(facets.getTopChildren(10,"Author"));  results.add(facets.getTopChildren(10,"Publish Year"));  indexReader.close();  return results;}  }
class C{  void dispatchOnLauncherTransitionEnd(View v,boolean animated,boolean toWorkspace){  if (v instanceof LauncherTransitionable) {    ((LauncherTransitionable)v).onLauncherTransitionEnd(mLauncher,animated,toWorkspace);  }  dispatchOnLauncherTransitionStep(v,1f);}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Description("Creates an alert.") public AlertDto createAlert(@Context HttpServletRequest req,AlertDto alertDto){  if (alertDto == null) {    throw new WebApplicationException("Null alert object cannot be created.",Status.BAD_REQUEST);  }  PrincipalUser owner=validateAndGetOwner(req,alertDto.getOwnerName());  Alert alert=new Alert(getRemoteUser(req),owner,alertDto.getName(),alertDto.getExpression(),alertDto.getCronEntry());  copyProperties(alert,alertDto);  return AlertDto.transformToDto(alertService.updateAlert(alert));}  }
class C{  public static float toFloatValue(boolean b){  return (b ? 1F : 0F);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.031 -0500",hash_original_method="15C17CA69A0E3C6519F160E1B18C9284",hash_generated_method="DDB193F4AB03DBF42B77F2F79AFB5FBA") synchronized boolean cacheConnection(HttpHost host,Connection connection){  boolean ret=false;  if (HttpLog.LOGV) {    HttpLog.v("IdleCache size " + mCount + " host "+ host);  }  if (mCount < IDLE_CACHE_MAX) {    long time=SystemClock.uptimeMillis();    for (int i=0; i < IDLE_CACHE_MAX; i++) {      Entry entry=mEntries[i];      if (entry.mHost == null) {        entry.mHost=host;        entry.mConnection=connection;        entry.mTimeout=time + TIMEOUT;        mCount++;        if (HttpLog.LOGV)         mCached++;        ret=true;        if (mThread == null) {          mThread=new IdleReaper();          mThread.start();        }        break;      }    }  }  return ret;}  }
class C{  private boolean isErrorStyle(UIComponent uiComponent){  if (!(uiComponent instanceof UIInput)) {    return false;  }  if (uiComponent instanceof UISelectBoolean) {    return (STYLE_CHECKBOX_ERROR).equals(uiComponent.getAttributes().get(ATTRIBUTE_STYLE));  }  return (STYLE_ERROR).equals(uiComponent.getAttributes().get(ATTRIBUTE_STYLE));}  }
class C{  void testRange(final int range){  testRange(range,1);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public static FunctionLib loadFromFile(Resource res,Identification id) throws FunctionLibException {  FunctionLib lib=FunctionLibFactory.hashLib.get(id(res));  if (lib == null) {    lib=new FunctionLibFactory(DEFAULT_SAX_PARSER,null,res,id).getLib();    FunctionLibFactory.hashLib.put(id(res),lib);  }  lib.setSource(res.toString());  return lib;}  }
class C{  protected URISyntax(URI uri){  this.uri=verify(uri);}  }
class C{  @DebugLog public static void restartApplication(Activity activity){  Intent refresh=new Intent(activity,MainActivity.class);  activity.finish();  activity.startActivity(refresh);}  }
class C{  public void addPlugInToBeanContext(PlugIn pi){  BeanContext bc=getBeanContext();  if (bc != null && pi != null && (pi instanceof BeanContextChild || (pi instanceof AbstractPlugIn && ((AbstractPlugIn)pi).getAddToBeanContext()))) {    bc.add(pi);  }}  }
class C{  private String nestedTagsRegex(int depth){  if (depth == 0) {    return "";  } else {    return "(?:<[a-z/!$](?:[^<>]|" + nestedTagsRegex(depth - 1) + ")*>)";  }}  }
class C{  public void updateQuantitiesInQuestStatus(final Player player){  StringBuilder sb=new StringBuilder(30);  sb.append("start");  for (  ItemCollectorData id : itemCollector.requiredItems()) {    sb.append(";");    sb.append(id.getAlreadyBrought());  }  player.setQuest(quest.getSlotName(),sb.toString());}  }
class C{  public static <V,V1 extends V>Map<String,V> toMap(String name1,V1 value1){  return populateMap(new HashMap<String,V>(),name1,value1);}  }
class C{  protected void postClosingEvent(JInternalFrame frame){  InternalFrameEvent e=new InternalFrameEvent(frame,InternalFrameEvent.INTERNAL_FRAME_CLOSING);  if (JInternalFrame.class.getClassLoader() == null) {    try {      Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(e);      return;    } catch (    SecurityException se) {    }  }  frame.dispatchEvent(e);}  }
class C{  public boolean isOnTop(){  return (onTop);}  }
class C{  private void initialize(){  this.setHideable(false);  this.setIcon(new ImageIcon(View.class.getResource("/resource/icon/16/094.png")));  this.setName(Constant.messages.getString("sites.panel.title"));  this.setDefaultAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | Event.SHIFT_MASK,false));  this.setMnemonic(Constant.messages.getChar("sites.panel.mnemonic"));  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(300,200);  }  this.setLayout(new GridBagLayout());  this.add(this.getPanelToolbar(),LayoutHelper.getGBC(0,0,1,0,new Insets(2,2,2,2)));  this.add(new ContextsSitesPanel(getTreeContext(),getTreeSite(),"sitesPanelScrollPane"),LayoutHelper.getGBC(0,1,1,1.0,1.0,GridBagConstraints.BOTH,new Insets(2,2,2,2)));  expandRoot();}  }
class C{  public Rectangle(int x,int y,int w,int h){  this.x=x;  this.y=y;  this.size=new Dimension(w,h);}  }
class C{  public boolean requestSucceeded(){  return super.hasSucceeded();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  private void blockCarsFromStaging() throws BuildFailedException {  if (_departStageTrack == null || !_departStageTrack.isBlockCarsEnabled()) {    return;  }  addLine(_buildReport,THREE,BLANK_LINE);  addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("blockDepartureHasBlocks"),new Object[]{_departStageTrack.getName(),_numOfBlocks.size()}));  Enumeration<String> en=_numOfBlocks.keys();  while (en.hasMoreElements()) {    String locId=en.nextElement();    int numCars=_numOfBlocks.get(locId);    String locName="";    Location l=locationManager.getLocationById(locId);    if (l != null) {      locName=l.getName();    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockFromHasCars"),new Object[]{locId,locName,numCars}));    if (_numOfBlocks.size() < 2) {      addLine(_buildReport,SEVEN,Bundle.getMessage("blockUnable"));      return;    }  }  blockByLocationMoves();  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("blockDone"),new Object[]{_departStageTrack.getName()}));}  }
class C{  public boolean isRdtscp(){  return rdtscp;}  }
class C{  private boolean isMainActivity(XmlContext context,Node node){  if (TAG_APPLICATION.equals(node.getNodeName())) {    mApplicationTagLocation=context.getLocation(node);  }  if (TAG_ACTIVITY.equals(node.getNodeName())) {    mHasActivity=true;    for (    Element activityChild : LintUtils.getChildren(node)) {      if (TAG_INTENT_FILTER.equals(activityChild.getNodeName())) {        boolean hasLauncherCategory=false;        boolean hasMainAction=false;        for (        Element intentFilterChild : LintUtils.getChildren(activityChild)) {          if (NODE_CATEGORY.equals(intentFilterChild.getNodeName()) && Constants.CATEGORY_NAME_LAUNCHER.equals(intentFilterChild.getAttributeNS(ANDROID_URI,ATTR_NAME))) {            hasLauncherCategory=true;          }          if (NODE_ACTION.equals(intentFilterChild.getNodeName()) && Constants.ACTION_NAME_MAIN.equals(intentFilterChild.getAttributeNS(ANDROID_URI,ATTR_NAME))) {            hasMainAction=true;          }        }        if (hasLauncherCategory && hasMainAction) {          if (mHasLauncherActivity) {            context.report(ISSUE_MORE_THAN_ONE_LAUNCHER,context.getLocation(node),"Expecting " + ANDROID_MANIFEST_XML + " to have only one activity with a launcher intent.");          }          if (context.getProject() == context.getMainProject() && context.getMainProject().isLibrary()) {            context.report(ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY,context.getLocation(node),"Expecting " + ANDROID_MANIFEST_XML + " not to have an activity with a launcher intent.");          }          return true;        }      }    }  }  return false;}  }
class C{  protected IssuesEntry insertIssue(IssuesEntry entry) throws IOException, ServiceException {  return service.insert(issuesFeedUrl,entry);}  }
class C{  @Override protected LongTermCredential createLongTermCredential(StunCandidateHarvest harvest,byte[] realm){  return longTermCredential;}  }
class C{  public DoubleMatrix3D make(double[][][] values){  if (this == sparse)   return new SparseDoubleMatrix3D(values);  return new DenseDoubleMatrix3D(values);}  }
class C{  private Sensor runtimes(Sensor sensor,String[] sensors) throws Exception {  flushAWT();  _sensorMgr.getSensor(sensors[0]).setState(Sensor.ACTIVE);  for (int i=1; i < sensors.length; i++) {    flushAWT();    _sensorMgr.getSensor(sensors[i]).setState(Sensor.ACTIVE);    flushAWT();    _sensorMgr.getSensor(sensors[i - i]).setState(Sensor.INACTIVE);  }  return sensor;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void write(byte[] buffer,int offset,int length) throws IOException {  _file.write(buffer,offset,length);}  }
class C{  public int size(){  return queue.size();}  }
class C{  public VersionProperty(File file) throws IOException {  this.file=file;  if (!file.exists()) {    File tempFile;    tempFile=new File(file.getParentFile(),file.getName() + ".tmp");    if (tempFile.exists()) {      Log.error("WARNING: " + file.getName() + " was not found, but temp file from "+ "previous write operation was. Attempting automatic recovery."+ " Please check file for data consistency.");      tempFile.renameTo(file);    } else {      throw new FileNotFoundException("XML properties file does not exist: " + file.getName());    }  }  if (!file.canRead()) {    throw new IOException("XML properties file must be readable: " + file.getName());  }  if (!file.canWrite()) {    throw new IOException("XML properties file must be writable: " + file.getName());  }  FileReader reader=new FileReader(file);  lastModified=file.lastModified();  buildDoc(reader);}  }
class C{  public static String toPascalCase(String name){  StringBuilder result=new StringBuilder();  boolean needUpper=false;  if (StringUtils.isNotEmpty(name)) {    result.append(Character.toUpperCase(name.charAt(0)));    for (int i=1; i < name.length(); i++) {      String s=String.valueOf(name.charAt(i));      if ("_".equals(s) || "-".equals(s)) {        needUpper=true;      } else {        if (needUpper) {          result.append(s.toUpperCase());          needUpper=false;        } else {          result.append(s.toLowerCase());        }      }    }  }  return result.toString();}  }
class C{  @Override public MetaData checkForNewMetaData(Long expectedVersion) throws NoPersistedMetaDataException {  MetaData localMetaData=readMetaDataAsRow(ConsistencyLevel.ONE);  if (localMetaData != null && localMetaData.version() >= expectedVersion) {    return localMetaData;  }  if (localMetaData == null) {    throw new NoPersistedMetaDataException("No cluster metadata in " + this.elasticAdminKeyspaceName);  }  MetaData quorumMetaData=readMetaDataAsRow(this.metadataReadCL);  if (quorumMetaData.version() >= expectedVersion) {    return quorumMetaData;  }  return null;}  }
class C{  public static void logSystemProperties(){  LOG.info("System properties: ");  Properties properties=System.getProperties();  Enumeration<Object> keys=properties.keys();  List<String> keyList=new ArrayList<String>();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof String && !preferenceBlacklist.contains(key)) {      keyList.add((String)key);    }  }  Collections.sort(keyList);  for (  String key : keyList) {    if (ConfigurationLogger.ECLIPSE_VMARGS.equals(key)) {      logVmArgsExceptD((String)properties.get(key));    } else {      LOG.info(key + ": " + properties.get(key));    }  }}  }
class C{  public static float trapeze(float t,float a,float aT,float b,float bT,float c,float cT,float d,float dT){  if (t < aT) {    return a;  }  if (t >= aT && t < bT) {    float norm=normalize(t,aT,bT);    return a + norm * (b - a);  }  if (t >= bT && t < cT) {    float norm=normalize(t,bT,cT);    return b + norm * (c - b);  }  if (t >= cT && t <= dT) {    float norm=normalize(t,cT,dT);    return c + norm * (d - c);  }  return d;}  }
class C{  private void markSmsAsRead(String contactInformation){  ResolvedContact rc=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_CELL);  if (rc == null) {    if (mSmsManager.markAsRead(contactInformation)) {      send(R.string.chat_mark_as_read,contactInformation);    } else {      send(R.string.chat_no_match_for,contactInformation);    }  } else   if (rc.isDistinct()) {    markSmsAsReadByNumber(rc.getNumber(),rc.getName());  } else {    askForMoreDetails(rc.getCandidates());  }}  }
class C{  @RequestMapping(value="/SAML2/SSOSSL",method={RequestMethod.GET,RequestMethod.POST}) public void ssoSSLDummyDefault(Locale locale,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  ssoSSLDummy(locale,model,Shared.getDefaultTenant(),request,response);}  }
class C{  private double normalize(int d,double val){  d=(mean.length == 1) ? 0 : d;  return val / mean[d];}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  Iterator it=strings.iterator();  while (it.hasNext()) {    byte[] array=(byte[])it.next();    sb.append(byteArrayToString(array,true));    if (it.hasNext())     sb.append(" ");  }  return sb.toString();}  }
class C{  private static void extractScene(IndexUnit iu,AScene scene){  for (  CompilationUnit cu : iu.getCompilationUnits()) {    List<TypeDeclaration> typeDecls=cu.getTypes();    if (typeDecls != null) {      List<ImportDeclaration> impDecls=cu.getImports();      PackageDeclaration pkgDecl=cu.getPackage();      for (      TypeDeclaration typeDecl : typeDecls) {        ToIndexFileConverter converter=new ToIndexFileConverter(pkgDecl,impDecls,scene);        String pkgName=converter.pkgName;        String name=typeDecl.getName();        if (!pkgName.isEmpty()) {          name=pkgName + "." + name;        }        typeDecl.accept(converter,scene.classes.vivify(name));      }    }  }}  }
class C{  @Override public boolean incrementToken() throws IOException {  while (!exhausted && input.incrementToken()) {    State current=captureState();    if (previous != null && !isGramType()) {      restoreState(previous);      previous=current;      previousType=typeAttribute.type();      if (isGramType()) {        posIncAttribute.setPositionIncrement(1);      }      return true;    }    previous=current;  }  exhausted=true;  if (previous == null || GRAM_TYPE.equals(previousType)) {    return false;  }  restoreState(previous);  previous=null;  if (isGramType()) {    posIncAttribute.setPositionIncrement(1);  }  return true;}  }
class C{  public boolean equalHeaders(Instance inst){  if (m_Dataset == null) {    throw new UnassignedDatasetException("Instance doesn't have access to a dataset!");  }  return m_Dataset.equalHeaders(inst.m_Dataset);}  }
class C{  public static SubjectArea findByAbbv(Long sessionId,String subjectAreaAbbr){  SubjectAreaDAO subjDAO=new SubjectAreaDAO();  Session hibSession=subjDAO.getSession();  List subjs=hibSession.createCriteria(SubjectArea.class).add(Restrictions.eq("session.uniqueId",sessionId)).add(Restrictions.eq("subjectAreaAbbreviation",subjectAreaAbbr)).list();  if (subjs == null || subjs.size() == 0)   return null;  return (SubjectArea)subjs.get(0);}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){synchronized (comp.getTreeLock()) {    if ((constraints == null) || (constraints instanceof String)) {      addLayoutComponent((String)constraints,comp);    } else {      throw new IllegalArgumentException("cannot add to layout: constraint must be a string (or null)");    }  }}  }
class C{  public PackageEntry(){  this("!",null,false);}  }
class C{  protected TypePlacingRule(){}  }
class C{  ServerSessionContext registerRequest(long sequence,Runnable runnable){  commands.put(sequence,runnable);  return this;}  }
class C{  public int rows(){  return rows;}  }
class C{  public MoveUpAction(){  super();  putValue(SMALL_ICON,new ImageIcon(CMain.class.getResource("data/arrow_up.png")));}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() instanceof JButton) {    JButton source=(JButton)e.getSource();    DTNHost host=(DTNHost)source.getClientProperty(HOST_KEY);    gui.setFocus(host);  } else   if (e.getSource() == this.groupChooser) {    setNodes(groupChooser.getSelectedIndex() * MAX_NODE_COUNT);  } else   if (e.getSource() == this.refreshTimer) {    updateShownNodes();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS01.class,args);}  }
class C{  private Element obtainReferenceElement(XMLSignatureInput resource) throws CanonicalizationException, ParserConfigurationException, IOException, SAXException, KeyResolverException {  Element e;  if (resource.isElement()) {    e=(Element)resource.getSubNode();  } else   if (resource.isNodeSet()) {    log.log(java.util.logging.Level.FINE,"De-reference of KeyInfoReference returned an unsupported NodeSet");    return null;  } else {    byte inputBytes[]=resource.getBytes();    e=getDocFromBytes(inputBytes);  }  return e;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public LockManager(boolean trackLocks,int collectionFrequency){  this.trackLocks=trackLocks || Properties.lockTrackingEnabled();  this.waitToCollect=collectionFrequency;}  }
class C{  public T caseSkillFakeDefinition(SkillFakeDefinition object){  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void cutChangesIfNecessary(DocumentEvent event,StringBuilder oldText){  if (myChanges.isEmpty()) {    return;  }  int start=event.getOffset();  int end=event.getOffset() + event.getOldLength();  int diff=event.getNewLength() - event.getOldLength();  int forwardIndex=findIndex(start);  int backwardIndexStart=forwardIndex - 1;  if (forwardIndex < 0) {    backwardIndexStart=myChanges.size() - 1;  } else {    TIntArrayList indices=new TIntArrayList();    for (; forwardIndex < myChanges.size(); forwardIndex++) {      TextChangeImpl change=myChanges.get(forwardIndex);      if (change.getStart() >= end) {        change.advance(diff);      } else       if (change.getEnd() <= end) {        indices.add(forwardIndex);        int deleteStart=start - change.getStart();        deleteStart=Math.max(0,deleteStart);        int deleteEnd=change.getEnd() - change.getStart();        deleteEnd=Math.min(oldText.length(),Math.max(0,deleteEnd));        oldText.delete(deleteStart,deleteEnd);        oldText.insert(0,change.getText());      } else {        int deleteStart=change.getStart() - start;        deleteStart=Math.min(oldText.length(),Math.max(0,deleteStart));        int deleteEnd=oldText.length();        deleteEnd=Math.min(oldText.length(),Math.max(0,deleteEnd));        oldText.delete(deleteStart,deleteEnd);        myChanges.set(forwardIndex,new TextChangeImpl(change.getText(),end + diff,change.getEnd() + diff));      }    }    if (!indices.isEmpty()) {      for (int i=indices.size() - 1; i >= 0; i--) {        myChanges.remove(indices.get(i));      }    }  }  for (int i=Math.min(backwardIndexStart,myChanges.size() - 1); i >= 0; i--) {    TextChangeImpl change=myChanges.get(i);    if (change.getEnd() <= start) {      break;    }    CharSequence textToUse=change.getText();    int symbolsToCut=Math.min(change.getEnd(),end) - start;    if (textToUse.length() >= symbolsToCut) {      oldText.insert(symbolsToCut,textToUse.subSequence(textToUse.length() - symbolsToCut,textToUse.length()));      textToUse=textToUse.subSequence(0,textToUse.length() - symbolsToCut);    }    oldText.delete(0,symbolsToCut);    myChanges.set(i,new TextChangeImpl(textToUse,change.getStart(),start));    if (change.getEnd() > end) {      int shift=event.getOffset() + event.getNewLength() - end;      TextChangeImpl changeTail=new TextChangeImpl("",end + shift,change.getEnd() + shift);      if (i >= myChanges.size() - 1) {        myChanges.add(changeTail);      } else {        myChanges.add(i + 1,changeTail);      }    }  }}  }
class C{  public @Test final void testSetUsersNegative(){  Role role=new Role(TEST_ROLE);  thrown.expect(IllegalArgumentException.class);  role.setUsers(null);}  }
class C{  public IItemStreamRequest buildRequest(final List<Option> options){  return new ItemStreamRequest(getRequestUrl(),getClient(),options);}  }
class C{  protected void init(){  log.info("SampleAutomaton monitors sensor " + sensorName + " and controls turnout "+ turnoutName);  turnout=InstanceManager.turnoutManagerInstance().provideTurnout(turnoutName);  sensor=InstanceManager.sensorManagerInstance().provideSensor(sensorName);  now=sensor.getKnownState();  setTurnout(now);}  }
class C{  protected void writeMapEntry(String key,Object value,CharBuf buffer){  buffer.addJsonFieldName(key,disableUnicodeEscaping);  writeObject(key,value,buffer);}  }
class C{  void connect(final OutputPort out,final InputPort in){  Operator inOp=in.getPorts().getOwner().getOperator();  if (!inOp.isEnabled()) {    inOp.setEnabled(true);  }  Operator outOp=out.getPorts().getOwner().getOperator();  if (!outOp.isEnabled()) {    outOp.setEnabled(true);  }  out.connectTo(in);}  }
class C{  @SuppressWarnings("unchecked") void postTodo(YokeRequest request){  Long id=id(request);  @SuppressWarnings("rawtypes") MessageHandler onreply=null;  String action=request.getFormParameter(ACTION,"");switch (action) {case "save":    JsonObject entity=getForm(request);  client.save(entity,onreply);break;case "delete":client.delete(id,onreply);break;default :request.response().setStatusCode(500).end();}}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ExecutionSlot.class) {switch (baseFeatureID) {case SRuntimePackage.EXECUTION_SLOT__VALUE:      return SRuntimePackage.EXECUTION_CONTEXT__VALUE;case SRuntimePackage.EXECUTION_SLOT__FQ_NAME:    return SRuntimePackage.EXECUTION_CONTEXT__FQ_NAME;case SRuntimePackage.EXECUTION_SLOT__WRITABLE:  return SRuntimePackage.EXECUTION_CONTEXT__WRITABLE;case SRuntimePackage.EXECUTION_SLOT__TYPE:return SRuntimePackage.EXECUTION_CONTEXT__TYPE;default :return -1;}}if (baseClass == CompositeSlot.class) {switch (baseFeatureID) {case SRuntimePackage.COMPOSITE_SLOT__SLOTS:return SRuntimePackage.EXECUTION_CONTEXT__SLOTS;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private void copyRemaining(ByteBuffer src,OutputStream dest) throws IOException {  byte[] b=new byte[src.remaining()];  src.get(b);  dest.write(b);}  }
class C{  public void removeTreeCheckingListener(TreeCheckingListener tsl){  this.checkingModel.removeTreeCheckingListener(tsl);}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  private boolean allocateToPhysical(CompoundInterval i,Register p){  GenericRegisterRestrictions restrict=ir.stackManager.getRestrictions();  Register r=i.getRegister();  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  if (p != null && !phys.isAllocatable(p))   return false;  if (LinearScan.VERBOSE_DEBUG && p != null) {    if (!p.isAvailable())     System.out.println("unavailable " + i + p);    if (restrict.isForbidden(r,p))     System.out.println("forbidden" + i + p);  }  if ((p != null) && p.isAvailable() && !restrict.isForbidden(r,p)) {    CompoundInterval pInterval=regAllocState.getInterval(p);    if (pInterval == null) {      return true;    } else {      if (!i.intersects(pInterval)) {        return true;      }    }  }  return false;}  }
class C{  public static void addMetallurgicInfuserRecipe(InfuseType infuse,int amount,ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addMetallurgicInfuserRecipe",InfuseType.class,Integer.TYPE,ItemStack.class,ItemStack.class);    m.invoke(null,infuse,amount,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public ActionForward searchClasses(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  return performAction(mapping,form,request,response,"searchClasses");}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  BigInteger n=key.getParameters().getN();  BigInteger e=calculateE(n,message);  if (r.compareTo(ONE) < 0 || r.compareTo(n) >= 0) {    return false;  }  if (s.compareTo(ONE) < 0 || s.compareTo(n) >= 0) {    return false;  }  BigInteger c=s.modInverse(n);  BigInteger u1=e.multiply(c).mod(n);  BigInteger u2=r.multiply(c).mod(n);  ECPoint G=key.getParameters().getG();  ECPoint Q=((ECPublicKeyParameters)key).getQ();  ECPoint point=ECAlgorithms.sumOfTwoMultiplies(G,u1,Q,u2);  if (point.isInfinity()) {    return false;  }  BigInteger v=point.getX().toBigInteger().mod(n);  return v.equals(r);}  }
class C{  public void testResequenceCommand() throws Throwable {  CompletableFuture<CommandResponse> future1=new CompletableFuture<>();  CompletableFuture<CommandResponse> future2=new CompletableFuture<>();  Connection connection=mock(Connection.class);  Mockito.<CompletableFuture<CommandResponse>>when(connection.send(any(CommandRequest.class))).thenReturn(future1).thenReturn(future2);  ClientSessionState state=new ClientSessionState(UUID.randomUUID()).setSessionId(1).setState(Session.State.OPEN);  Executor executor=new MockExecutor();  ThreadContext context=mock(ThreadContext.class);  when(context.executor()).thenReturn(executor);  ClientSessionSubmitter submitter=new ClientSessionSubmitter(connection,state,new ClientSequencer(state),context);  CompletableFuture<String> result1=submitter.submit(new TestCommand());  CompletableFuture<String> result2=submitter.submit(new TestCommand());  future2.complete(CommandResponse.builder().withStatus(Response.Status.OK).withIndex(10).withResult("Hello world again!").build());  assertEquals(state.getCommandRequest(),2);  assertEquals(state.getCommandResponse(),0);  assertEquals(state.getResponseIndex(),1);  assertFalse(result1.isDone());  assertFalse(result2.isDone());  future1.complete(CommandResponse.builder().withStatus(Response.Status.OK).withIndex(9).withResult("Hello world!").build());  assertTrue(result1.isDone());  assertEquals(result1.get(),"Hello world!");  assertTrue(result2.isDone());  assertEquals(result2.get(),"Hello world again!");  assertEquals(state.getCommandRequest(),2);  assertEquals(state.getCommandResponse(),2);  assertEquals(state.getResponseIndex(),10);}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  protected void drawGeometry(DrawContext dc,int mode,int count,int type,Buffer elementBuffer,ShapeData shapeData,int face){  if (elementBuffer == null) {    String message="nullValue.ElementBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Geometry mesh=shapeData.getMesh(face);  if (mesh.getBuffer(Geometry.VERTEX) == null) {    String message="nullValue.VertexBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  int size, glType, stride;  Buffer vertexBuffer, normalBuffer;  size=mesh.getSize(Geometry.VERTEX);  glType=mesh.getGLType(Geometry.VERTEX);  stride=mesh.getStride(Geometry.VERTEX);  vertexBuffer=mesh.getBuffer(Geometry.VERTEX);  normalBuffer=null;  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      normalBuffer=mesh.getBuffer(Geometry.NORMAL);      if (normalBuffer == null) {        gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);      } else {        glType=mesh.getGLType(Geometry.NORMAL);        stride=mesh.getStride(Geometry.NORMAL);        gl.glNormalPointer(glType,stride,normalBuffer);      }    }  }  if (this.shouldUseVBOs(dc) && (this.getVboIds(getSubdivisions(),dc)) != null) {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,getVboIds(getSubdivisions(),dc)[2 * face]);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,this.getVboIds(getSubdivisions(),dc)[2 * face + 1]);    gl.glVertexPointer(size,glType,stride,0);    gl.glDrawElements(mode,count,type,0);    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);  } else {    gl.glVertexPointer(size,glType,stride,vertexBuffer.rewind());    gl.glDrawElements(mode,count,type,elementBuffer);  }  gl.glDisable(GL2.GL_RESCALE_NORMAL);  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      if (normalBuffer == null)       gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);    }  }}  }
class C{  public void previousMonth(){  mCalendar.add(Calendar.MONTH,-1);  recalculate();}  }
class C{  public static void verify(final String verificationCode) throws IOException {  if (!initialized) {    throw new IllegalStateException("Registrator must be initialized by calling initialize() first.");  }  if (!requested) {    throw new IllegalStateException("Registrator must request a code before verifying.");  }  final String url=SettingsService.getURL();  final String username=SettingsService.getUsername();  final TrustStore trustStore=TrustStore.getInstance();  final String password=SettingsService.getPassword();  final String signalingKey=SettingsService.getSignalingKey();  final Integer installID=SettingsService.getInstallID();  final TextSecureAccountManager accountManager=new TextSecureAccountManager(url,trustStore,username,password,Constants.USER_AGENT);  accountManager.verifyAccountWithCode(verificationCode,signalingKey,installID,REDPHONE_UNSUPPORTED);  accountManager.setGcmId(Optional.of("Norvos does not support GCM."));  final IdentityKey identityKey=IdentityKeyStore.getInstance().getIdentityKeyPair().getPublicKey();  final PreKeyRecord lastResortKey=PreKeyStore.getInstance().getLastResortKey();  final SignedPreKeyRecord signedPreKey=SignedPreKeyStore.getInstance().loadSignedPreKeys().get(0);  accountManager.setPreKeys(identityKey,lastResortKey,signedPreKey,oneTimePreKeys);  SettingsService.setSetupFinished(true);}  }
class C{  public SecP256K1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  public RandomizeObjectsAction(final NetworkPanel networkPanel){  super(networkPanel,"Randomize selection",EnablingCondition.ALLITEMS);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Rand.png"));  putValue(SHORT_DESCRIPTION,"Randomize Selected Weights and Nodes (r)");  networkPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke('r'),this);  networkPanel.getActionMap().put(this,this);}  }
class C{  public final MappedByteBuffer force(){  checkIsMapped();  if (mapMode == MapMode.READ_WRITE) {    try {      Libcore.os.msync(block.toLong(),block.getSize(),MS_SYNC);    } catch (    ErrnoException errnoException) {      throw new AssertionError(errnoException);    }  }  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public JSONBuffer appendString(Object cont){  if (stack.empty() || stack.peek() != Operand.ARRAY) {    throw new JSONException("Appending string outside of array context.");  }  addQuotedString(cont);  addSeparator();  return this;}  }
class C{  public void and(LongBitSet other){  int pos=Math.min(numWords,other.numWords);  while (--pos >= 0) {    bits[pos]&=other.bits[pos];  }  if (numWords > other.numWords) {    Arrays.fill(bits,other.numWords,numWords,0L);  }}  }
class C{  private URLUtil(){  super();}  }
class C{  public boolean isToplevel(){  EObject _eContainer=this.eContainer();  if ((_eContainer instanceof ExportDeclaration)) {    EObject _eContainer_1=this.eContainer();    EObject _eContainer_2=_eContainer_1.eContainer();    return (_eContainer_2 instanceof Script);  }  EObject _eContainer_3=this.eContainer();  return (_eContainer_3 instanceof Script);}  }
class C{  private void find(SearchContext context){  if (context != null) {    SearchResult found=SearchEngine.find(textArea,context);    if (!found.wasFound()) {      if (wrapSearchCB.isSelected()) {        if (forwardSearch.isSelected()) {          textArea.setCaretPosition(0);        } else {          textArea.setCaretPosition(textArea.getText().length());        }      }    }  }}  }
class C{  public static AttachContainerParams create(@NotNull String container){  return new AttachContainerParams().withContainer(container);}  }
class C{  public static boolean occupy(){  return occupy(DEFAULT_WAIT_MS);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void removeEncoding(){  final int[] items=getUnusedFragments();  int current;  for (  final int item : items) {    current=item;    if (!isUsed[current]) {      content[current]=removeHiddenMarkers(current);    }  }}  }
class C{  public void addAllReviewers(ReviewDb db,ChangeAttribute a,ChangeNotes notes) throws OrmException {  Collection<Account.Id> reviewers=approvalsUtil.getReviewers(db,notes).all();  if (!reviewers.isEmpty()) {    a.allReviewers=Lists.newArrayListWithCapacity(reviewers.size());    for (    Account.Id id : reviewers) {      a.allReviewers.add(asAccountAttribute(id));    }  }}  }
class C{  private void deleteSignerFromOldLocation(){  String tenantLduDn=getLduDn();  ILdapMessage credsObjects=null;  try {    credsObjects=getTenantCredentials(tenantLduDn);    delete(credsObjects);  }  finally {    closeMessage(credsObjects);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void write(Environment env,DataOutputStream out) throws IOException {  ConstantPoolData list[]=new ConstantPoolData[hash.size()];  String keys[]=new String[list.length];  int index=1, count=0;  for (int n=0; n < 5; n++) {    int first=count;    for (Enumeration<ConstantPoolData> e=hash.elements(); e.hasMoreElements(); ) {      ConstantPoolData data=e.nextElement();      if (data.order() == n) {        keys[count]=sortKey(data);        list[count++]=data;      }    }    xsort(list,keys,first,count - 1);  }  for (int n=0; n < list.length; n++) {    ConstantPoolData data=list[n];    data.index=index;    index+=data.width();  }  out.writeShort(index);  for (int n=0; n < count; n++) {    list[n].write(env,out,this);  }}  }
class C{  @Override public synchronized void pendingCounter(Page page,int increment) throws Exception {  if (!persistent) {    return;  }  Pair<Long,AtomicInteger> pendingInfo=pendingCounters.get((long)page.getPageId());  if (pendingInfo == null) {    long id=storage.storePendingCounter(this.subscriptionID,page.getPageId(),increment);    pendingInfo=new Pair<>(id,new AtomicInteger(1));    pendingCounters.put((long)page.getPageId(),pendingInfo);  } else {    pendingInfo.getB().addAndGet(increment);  }  pendingValue.addAndGet(increment);  page.addPendingCounter(this);}  }
class C{  public void sendEcosMessage(EcosMessage m,EcosListener reply){  sendMessage(m,reply);}  }
class C{  private boolean appearsNested(RSyntaxTextArea textArea,int line,int offs){  final int firstLine=line;  while (line < textArea.getLineCount()) {    Token t=textArea.getTokenListForLine(line);    int i=0;    if (line++ == firstLine) {      t=RSyntaxUtilities.getTokenAtOffset(t,offs);      if (t == null) {        continue;      }      i=t.documentToToken(offs);    } else {      i=t.textOffset;    }    while (i < t.textOffset + t.textCount - 1) {      if (t.text[i] == '/' && t.text[i + 1] == '*') {        return true;      }      i++;    }    if (t.getNextToken() != null) {      return false;    }  }  return true;}  }
class C{  public final void returnMoveList(MoveList moveList){  if (moveListsInCache < moveListCache.length) {    moveListCache[moveListsInCache++]=moveList;  }}  }
class C{  public void updateMakeToKit(BigDecimal qtyShipment){  MPPOrderBOM obom=(MPPOrderBOM)getMPPOrderBOM();  getLines(true);  if (MPPOrderBOM.BOMTYPE_Make_To_Kit.equals(obom.getBOMType()) && MPPOrderBOM.BOMUSE_Manufacturing.equals(obom.getBOMUse())) {    Timestamp today=new Timestamp(System.currentTimeMillis());    ArrayList[][] issue=new ArrayList[m_lines.length][1];    for (int i=0; i < getLines().length; i++) {      MPPOrderBOMLine line=m_lines[i];      KeyNamePair id=null;      if (MPPOrderBOMLine.ISSUEMETHOD_Backflush.equals(line.getIssueMethod())) {        id=new KeyNamePair(line.get_ID(),"Y");      } else       id=new KeyNamePair(line.get_ID(),"N");      ArrayList<Object> data=new ArrayList<Object>();      BigDecimal qtyToDeliver=qtyShipment.multiply(line.getQtyMultiplier());      data.add(id);      data.add(line.isCritical());      MProduct product=(MProduct)line.getM_Product();      data.add(product.getValue());      KeyNamePair productKey=new KeyNamePair(product.get_ID(),product.getName());      data.add(productKey);      data.add(qtyToDeliver);      data.add(Env.ZERO);      issue[i][0]=data;    }    boolean forceIssue=false;    MOrderLine oline=oline=(MOrderLine)getC_OrderLine();    if (MOrder.DELIVERYRULE_CompleteLine.equals(oline.getParent().getDeliveryRule()) || MOrder.DELIVERYRULE_CompleteOrder.equals(oline.getParent().getDeliveryRule())) {      boolean isCompleteQtyDeliver=MPPOrder.isQtyAvailable(this,issue,today);      if (!isCompleteQtyDeliver) {        throw new AdempiereException("@NoQtyAvailable@");      }    } else     if (MOrder.DELIVERYRULE_Availability.equals(oline.getParent().getDeliveryRule()) || MOrder.DELIVERYRULE_AfterReceipt.equals(oline.getParent().getDeliveryRule()) || MOrder.DELIVERYRULE_Manual.equals(oline.getParent().getDeliveryRule())) {      throw new AdempiereException("@ActionNotSupported@");    } else     if (MOrder.DELIVERYRULE_Force.equals(oline.getParent().getDeliveryRule())) {      forceIssue=true;    }    for (int i=0; i < issue.length; i++) {      int M_AttributeSetInstance_ID=0;      KeyNamePair key=(KeyNamePair)issue[i][0].get(0);      Boolean isCritical=(Boolean)issue[i][0].get(1);      String value=(String)issue[i][0].get(2);      KeyNamePair productkey=(KeyNamePair)issue[i][0].get(3);      int M_Product_ID=productkey.getKey();      MProduct product=MProduct.get(getCtx(),M_Product_ID);      BigDecimal qtyToDeliver=(BigDecimal)issue[i][0].get(4);      BigDecimal qtyScrapComponent=(BigDecimal)issue[i][0].get(5);      int PP_Order_BOMLine_ID=(Integer)key.getKey();      if (PP_Order_BOMLine_ID > 0) {        MPPOrderBOMLine orderBOMLine=new MPPOrderBOMLine(getCtx(),PP_Order_BOMLine_ID,get_TrxName());        M_AttributeSetInstance_ID=orderBOMLine.getM_AttributeSetInstance_ID();      }      MStorage[] storages=MPPOrder.getStorages(getCtx(),M_Product_ID,getM_Warehouse_ID(),M_AttributeSetInstance_ID,today,get_TrxName());      MPPOrder.createIssue(this,key.getKey(),today,qtyToDeliver,qtyScrapComponent,Env.ZERO,storages,forceIssue);    }    MPPOrder.createReceipt(this,today,getQtyDelivered(),qtyShipment,getQtyScrap(),getQtyReject(),getM_Locator_ID(),getM_AttributeSetInstance_ID());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int indexOf(float[] array,float value,int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    if (Float.compare(array[i],value) == 0) {      return i;    }  }  return -1;}  }
class C{  public void register(Template template){  templates.put(template.getURI(),template);}  }
class C{  public void applyProperties(Object o,boolean ignoreIfMissing){  Method[] methods=o.getClass().getMethods();  Map<String,TungstenProperties> beanMaps=new HashMap<String,TungstenProperties>();  for (  String key : keyNames()) {    int period=key.indexOf('.');    if (period == -1 || (period + 1) >= key.length())     continue;    String prefix=key.substring(0,period);    TungstenProperties beanProps=beanMaps.get(prefix);    if (beanProps == null) {      beanProps=new TungstenProperties();      beanMaps.put(prefix,beanProps);    }    beanProps.put(key.substring(period + 1),getString(key));  }  for (  String key : keyNames()) {    int period=key.indexOf('.');    if (period > 1 && (period + 1) < key.length())     continue;    StringBuffer setterNameBuffer=new StringBuffer();    setterNameBuffer.append("set");    char prev='\0';    for (int i=0; i < key.length(); i++) {      char c=key.charAt(i);      if (i == 0) {        setterNameBuffer.append(Character.toUpperCase(c));      } else       if (prev == '\0') {        if (c == '_')         prev=c; else         setterNameBuffer.append(c);      } else {        setterNameBuffer.append(Character.toUpperCase(c));        prev='\0';      }    }    if (prev != '\0')     setterNameBuffer.append(prev);    String setterName=setterNameBuffer.toString();    Method setter=null;    for (    Method m : methods) {      if (!m.getName().equals(setterName))       continue; else       if (m.getParameterTypes().length != 1)       continue; else {        setter=m;        break;      }    }    if (setter == null) {      if (ignoreIfMissing) {        if (logger.isDebugEnabled())         logger.debug("Ignoring missing setter for property=" + key);        continue;      }      throw new PropertyException("Unable to find method corresponding to property: " + " class=" + o.getClass().getName() + " property="+ key+ " expected setter="+ setterName);    }    String value=getString(key);    if (value == null)     continue;    Object arg=null;    Class<?>[] argTypes=setter.getParameterTypes();    Class<?> arg0Type=argTypes[0];    if (arg0Type.isPrimitive()) {      try {        if (arg0Type == Integer.TYPE)         arg=new Integer(value); else         if (arg0Type == Long.TYPE)         arg=new Long(value); else         if (arg0Type == Boolean.TYPE)         arg=new Boolean(value); else         if (arg0Type == Character.TYPE)         arg=new Character(value.charAt(0)); else         if (arg0Type == Float.TYPE)         arg=new Float(value); else         if (arg0Type == Double.TYPE)         arg=new Double(value); else         if (arg0Type == Byte.TYPE)         arg=new Byte(value); else         if (arg0Type == Short.TYPE)         arg=new Short(value);      } catch (      Exception e) {        throw new PropertyException("Unable to translate property value: key=" + key + " value = "+ value,e);      }    } else     if (arg0Type == Date.class) {      try {        arg=new Date(new Long(value));      } catch (      Exception e) {        throw new PropertyException("Unable to translate property value: key=" + key + " value = "+ value,e);      }    } else     if (arg0Type == List.class) {      arg=Arrays.asList(value.split(","));    } else {      arg=constructBean(value,beanMaps.get(key),ignoreIfMissing);      if (arg == null)       arg=constructFromString(arg0Type,value);      if (arg == null)       arg=constructUsingValueOf(arg0Type,value);      if (arg == null) {        if (ignoreIfMissing) {          continue;        }        logger.warn("Could not instantiate non-bean arg of type " + arg0Type + ". No Constructor(String) nor valueOf(String) found in this class");        throw new PropertyException("Unsupported property type: key=" + key + " type="+ arg0Type+ " value="+ value);      }    }    try {      setter.invoke(o,new Object[]{arg});      if (logger.isDebugEnabled() == true) {        logger.debug("Set attribute in object=<" + o.getClass().getSimpleName() + "> from key <"+ key+ ">");      }    } catch (    Exception e) {      throw new PropertyException("Unable to set property: key=" + key + " value = "+ value,e);    }  }}  }
class C{  public InterruptedException(String s){  super(s);}  }
class C{  public Weeks negated(){  return Weeks.weeks(FieldUtils.safeNegate(getValue()));}  }
class C{  public final FilterServiceEntry add(FilterValueSet filterValueSet,FilterHandle filterCallback,FilterServiceGranularLockFactory lockFactory){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qFilterAdd(filterValueSet,filterCallback);  }  EventType eventType=filterValueSet.getEventType();  FilterHandleSetNode rootNode=eventTypeIndex.get(eventType);  if (rootNode == null) {    callbacksLock.lock();    try {      rootNode=eventTypeIndex.get(eventType);      if (rootNode == null) {        rootNode=new FilterHandleSetNode(lockFactory.obtainNew());        eventTypeIndex.add(eventType,rootNode);      }    }  finally {      callbacksLock.unlock();    }  }  ArrayDeque<EventTypeIndexBuilderIndexLookupablePair>[] path=IndexTreeBuilder.add(filterValueSet,filterCallback,rootNode,lockFactory);  EventTypeIndexBuilderIndexLookupablePair[][] pathArray=new EventTypeIndexBuilderIndexLookupablePair[path.length][];  for (int i=0; i < path.length; i++) {    pathArray[i]=path[i].toArray(new EventTypeIndexBuilderIndexLookupablePair[path[i].size()]);  }  EventTypeIndexBuilderValueIndexesPair pair=new EventTypeIndexBuilderValueIndexesPair(filterValueSet,pathArray);  if (isolatableCallbacks == null) {    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aFilterAdd();    }    return pair;  }  callbacksLock.lock();  try {    isolatableCallbacks.put(filterCallback,pair);  }  finally {    callbacksLock.unlock();  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aFilterAdd();  }  return null;}  }
class C{  public static void createResponse(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,Properties cookieProperties,MobileDoc doc,boolean debug) throws IOException {  response.setHeader("Cache-Control","no-cache");  response.setContentType("text/html; charset=UTF-8");  if (cookieProperties != null) {    Cookie cookie=new Cookie(MobileEnv.COOKIE_INFO,propertiesEncode(cookieProperties));    cookie.setComment("(c) adempiere, Inc - Jorg Janke");    cookie.setSecure(false);    cookie.setPath("/");    if (cookieProperties.size() == 0)     cookie.setMaxAge(0); else     cookie.setMaxAge(2592000);    response.addCookie(cookie);  }  if (debug && MobileEnv.DEBUG) {    MobileEnv.addFooter(request,response,servlet,doc.getBody());  }  PrintWriter out=response.getWriter();  doc.output(out);  out.flush();  if (out.checkError())   log.log(Level.SEVERE,"error writing");  out.close();}  }
class C{  public CertificateEncodingException(){  super();}  }
class C{  public ListIterator<OMGraphic> listIteratorCopy(){  return new OMGraphicList(graphics).listIterator();}  }
class C{  public void forceReload(File file){  fFilesToReoad.add(file);}  }
class C{  public final Object put(Object param,Object level){  int newLevel=((Integer)level).intValue();  Object old=this.get(param);  int oldLevel=(old == null) ? MaxLevel : ((Integer)old).intValue();  super.put(param,new Integer(Math.min(newLevel,oldLevel)));  return old;}  }
class C{  CompressedChart parseSentence(final List<String> sentence,final AtomicDouble beta,final Collection<Category> rootCategories){  final CompressedChart compressed;  final List<Collection<Category>> categories=new ArrayList<>();  final List<List<ScoredCategory>> tagsForSentence=tagger.tag(InputWord.listOf(sentence));  for (  final List<ScoredCategory> tagsForWord : tagsForSentence) {    final List<Category> tagsForWord2=new ArrayList<>();    final double threshold=beta.doubleValue() * Math.exp(tagsForWord.get(0).getScore());    for (    final ScoredCategory leaf : tagsForWord) {      if (Math.exp(leaf.getScore()) < threshold) {        break;      }      tagsForWord2.add(leaf.getCategory());    }    categories.add(tagsForWord2);  }  final ChartCell[][] chart=parser.parse(sentence,categories);  if (chart == null) {    if (beta.doubleValue() * 2 < 0.1 && backoff) {      beta.set(beta.doubleValue() * 2);      return parseSentence(sentence,beta,rootCategories);    } else {      return null;    }  }  if (chart[0][chart.length - 1] == null || chart[0][chart.length - 1].getEntries().size() == 0) {    return null;  }  compressed=CompressedChart.make(InputWord.listOf(sentence),chart,cutoffsDictionary,unaryRules,rootCategories);  return compressed;}  }
class C{  public ChildNodes(){}  }
class C{  public CompositeFilter(Composite composite){  this.composite=composite;}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public void printHelp(){  VM.sysWriteln("Commands");  VM.sysWrite(prefix);  VM.sysWriteln("[:help]\t\t\tPrint brief description of arguments");  VM.sysWrite(prefix);  VM.sysWriteln(":printOptions\t\tPrint the current values of options");  VM.sysWriteln();  VM.sysWrite("Boolean Options (");  VM.sysWrite(prefix);  VM.sysWrite(":<option>=true or ");  VM.sysWrite(prefix);  VM.sysWriteln(":<option>=false)");  VM.sysWriteln("Option                                 Description");  Option o=getFirst();  while (o != null) {    if (o.getType() == Option.BOOLEAN_OPTION) {      String key=o.getKey();      VM.sysWrite(key);      for (int c=key.length(); c < 39; c++) {        VM.sysWrite(" ");      }      VM.sysWriteln(o.getDescription());    }    o=o.getNext();  }  VM.sysWrite("\nValue Options (");  VM.sysWrite(prefix);  VM.sysWriteln(":<option>=<value>)");  VM.sysWriteln("Option                         Type    Description");  o=getFirst();  while (o != null) {    if (o.getType() != Option.BOOLEAN_OPTION && o.getType() != Option.ENUM_OPTION) {      String key=o.getKey();      VM.sysWrite(key);      for (int c=key.length(); c < 31; c++) {        VM.sysWrite(" ");      }switch (o.getType()) {case Option.INT_OPTION:        VM.sysWrite("int     ");      break;case Option.ADDRESS_OPTION:    VM.sysWrite("address ");  break;case Option.FLOAT_OPTION:VM.sysWrite("float   ");break;case Option.MICROSECONDS_OPTION:VM.sysWrite("usec    ");break;case Option.PAGES_OPTION:VM.sysWrite("bytes   ");break;case Option.STRING_OPTION:VM.sysWrite("string  ");break;}VM.sysWriteln(o.getDescription());}o=o.getNext();}VM.sysWriteln("\nSelection Options (set option to one of an enumeration of possible values)");o=getFirst();while (o != null) {if (o.getType() == Option.ENUM_OPTION) {String key=o.getKey();VM.sysWrite(key);for (int c=key.length(); c < 31; c++) {VM.sysWrite(" ");}VM.sysWriteln(o.getDescription());VM.sysWrite("    { ");boolean first=true;for (String val : ((EnumOption)o).getValues()) {VM.sysWrite(first ? "" : ", ");VM.sysWrite(val);first=false;}VM.sysWriteln(" }");}o=o.getNext();}VM.sysExit(EXIT_STATUS_PRINTED_HELP_MESSAGE);}  }
class C{  public static Ignite ignite(UUID locNodeId) throws IgniteIllegalStateException {  return IgnitionEx.grid(locNodeId);}  }
class C{  public boolean forEach(TIntProcedure procedure){  for (int i=0; i < _pos; i++) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public String missingMergeTipText(){  return "Distribute counts for missing values. Counts are distributed " + "across other values in proportion to their frequency. Otherwise, " + "missing is treated as a separate value.";}  }
class C{  public long readUnsignedLongToLong(){  long result=shiftIntoLong(data,position,8);  position+=8;  if (result < 0) {    throw new IllegalArgumentException("Top bit not zero: " + result);  }  return result;}  }
class C{  @Override public void zoomRange(double lowerPercent,double upperPercent){  Range range=getRange();  double start=range.getLowerBound();  double end=range.getUpperBound();  double log1=calculateLog(start);  double log2=calculateLog(end);  double length=log2 - log1;  Range adjusted;  if (isInverted()) {    double logA=log1 + length * (1 - upperPercent);    double logB=log1 + length * (1 - lowerPercent);    adjusted=new Range(calculateValueNoINF(logA),calculateValueNoINF(logB));  } else {    double logA=log1 + length * lowerPercent;    double logB=log1 + length * upperPercent;    adjusted=new Range(calculateValueNoINF(logA),calculateValueNoINF(logB));  }  setRange(adjusted);}  }
class C{  public void testReceiveWindow(){  PseudoTcpTestRecvWindow test=new PseudoTcpTestRecvWindow();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setOptNagling(false);  test.setOptAckDelay(0);  test.doTestTransfer(1024 * 1000);}  }
class C{  private static boolean inputOperandsAreRegisters(final ReilInstruction instruction){  final OperandType firstOperandType=instruction.getFirstOperand().getType();  final OperandType secondOperandType=instruction.getSecondOperand().getType();  return (firstOperandType == OperandType.REGISTER) && (secondOperandType == OperandType.REGISTER);}  }
class C{  protected void resetOptions(){  m_trainInstances=null;  m_sampleM=-1;  m_Knn=10;  m_sigma=2;  m_weightByDistance=false;  m_seed=1;}  }
class C{  public static int generateAlertColorFromDrawable(Drawable drawable){  int alertColor=Color.BLACK;  Bitmap bitmap=null;  if (drawable == null) {    return alertColor;  }  if (drawable instanceof BitmapDrawable) {    bitmap=((BitmapDrawable)drawable).getBitmap();  } else {    int width=drawable.getIntrinsicWidth();    int height=drawable.getIntrinsicHeight();    bitmap=Bitmap.createBitmap(Math.max(1,width),Math.max(1,height),Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(bitmap);    drawable.draw(canvas);  }  if (bitmap != null) {    Palette p=Palette.from(bitmap).generate();    if (p == null) {      return alertColor;    }    final Palette.Swatch dominantSwatch=getDominantSwatch(p);    int iconColor=alertColor;    if (dominantSwatch != null) {      iconColor=dominantSwatch.getRgb();      alertColor=findPerceptuallyNearestSolidColor(iconColor);    }    if (alertColor == Color.BLACK || alertColor == Color.WHITE) {      iconColor=p.getVibrantColor(Color.WHITE);      alertColor=findPerceptuallyNearestSolidColor(iconColor);    }    if (!(drawable instanceof BitmapDrawable)) {      bitmap.recycle();    }  }  return alertColor;}  }
class C{  protected void fillVbo(DrawContext dc){  GL gl=dc.getGL();  int glBuf[]=new int[1];  gl.glGenBuffers(1,glBuf,0);  gl.glBindBuffer(GL.GL_ARRAY_BUFFER,glBuf[0]);  gl.glBufferData(GL.GL_ARRAY_BUFFER,this.starsBuffer.limit() * 4,this.starsBuffer,GL.GL_STATIC_DRAW);  dc.getGpuResourceCache().put(this.vboCacheKey,glBuf,GpuResourceCache.VBO_BUFFERS,this.starsBuffer.limit() * 4);}  }
class C{  public void close() throws IOException {  ensureBlocksNotEmpty();  if (closed)   return;  if (hasMoreBlocks()) {    nextBlock();    return;  }  if (DEBUG)   LOGGER.debug("Closing the underlying input stream of this segmented input stream");  closed=true;  in.close();}  }
class C{  public static boolean isVideoType(String mime){  return mime.toLowerCase().startsWith("video/");}  }
class C{  public static void checkUri(final URI uri){  if (!URIUtil.isValid(uri)) {    throw APIException.badRequests.invalidURI(uri);  }}  }
class C{  @Override public void debug(String msg,Throwable t){  if (logger.isLoggable(Level.FINE)) {    log(SELF,Level.FINE,msg,t);  }}  }
class C{  private static <T extends Enum<T>>T enumValueOrDie(Class<T> ec,String key){  try {    return T.valueOf(ec,key);  } catch (  IllegalArgumentException e) {    System.err.println("unknown " + ec.getSimpleName() + ": "+ key);    System.err.println("allowed: {" + StringUtil.join(ec.getEnumConstants(),", ").toLowerCase() + "}");    System.exit(1);    return null;  }}  }
class C{  public static TIB addressAsTIB(Address address){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  return null;}  }
class C{  protected int launchMoveCentroids(Instances[] clusters){  int emptyClusterCount=0;  List<Future<double[]>> results=new ArrayList<Future<double[]>>();  for (int i=0; i < m_NumClusters; i++) {    if (clusters[i].numInstances() == 0) {      emptyClusterCount++;    } else {      Future<double[]> futureCentroid=m_executorPool.submit(new KMeansComputeCentroidTask(i,clusters[i]));      results.add(futureCentroid);    }  }  try {    for (    Future<double[]> d : results) {      m_ClusterCentroids.add(new DenseInstance(1.0,d.get()));    }  } catch (  Exception ex) {    ex.printStackTrace();  }  return emptyClusterCount;}  }
class C{  public UpdateAttributesProcessor(DistributionAdvisee da,boolean removeProfile){  this.advisee=da;  this.removeProfile=removeProfile;}  }
class C{  public void closeBluetoothGatt(){  if (bluetoothGatt != null) {    bluetoothGatt.disconnect();    refreshDeviceCache();    bluetoothGatt.close();    Log.i(TAG,"closed BluetoothGatt ");  }}  }
class C{  static boolean isTypeAccessible(long where,Environment env,Type t,ClassDefinition c){switch (t.getTypeCode()) {case TC_CLASS:    try {      Identifier nm=t.getClassName();      ClassDefinition def=env.getClassDefinition(t);      return c.canAccess(env,def.getClassDeclaration());    } catch (    ClassNotFound e) {    }  return true;case TC_ARRAY:return isTypeAccessible(where,env,t.getElementType(),c);default :return true;}}  }
class C{  public List<IvrVsanConfiguration> showIvrVsanTopology() throws NetworkDeviceControllerException {  List<IvrVsanConfiguration> ivrVsans=new ArrayList<IvrVsanConfiguration>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN,SSHPrompt.MDS_CONFIG,SSHPrompt.MDS_CONFIG_IVR_ZONE,SSHPrompt.MDS_CONFIG_IVR_ZONESET};  StringBuilder buf=new StringBuilder();  sendWaitFor(MDSDialogProperties.getString("MDSDialog.ivr.vsan.topology.cmd"),defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  String[] regex={MDSDialogProperties.getString("MDSDialog.ivr.showTopology.wwn.match")};  String[] groups=new String[10];  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      IvrVsanConfiguration ivrVsan=new IvrVsanConfiguration();    ivrVsan.setSwitchWwn(groups[0] + groups[2]);  ivrVsan.setLocalSwitch("*".equalsIgnoreCase(groups[3]));try {  int vsanId=Integer.valueOf(groups[4]);  if (vsanId > 0) {    String vsansText=line.substring(line.indexOf(groups[4],line.indexOf(ivrVsan.getSwitchWwn()) + ivrVsan.getSwitchWwn().length()));    String[] vsans=vsansText.split(",");    for (    String vsan : vsans) {      if (vsan.indexOf('-') > 0) {        String[] range=vsan.split("-");        ivrVsan.getVsansRanges().add(new IntRange(Integer.valueOf(range[0].trim()),Integer.valueOf(range[1].trim())));      } else {        ivrVsan.getVsans().add(Integer.valueOf(vsan.trim()));      }    }  }} catch (Exception e) {}ivrVsans.add(ivrVsan);break;}}return ivrVsans;}  }
class C{  private Tag findTag(final CTag tag,final Tag apiTag){  if (tag == apiTag.getNative().getObject()) {    return apiTag;  }  for (  final Tag child : apiTag.getChildren()) {    final Tag foundTag=findTag(tag,child);    if (foundTag != null) {      return foundTag;    }  }  return null;}  }
class C{  public void addFloat(float x){  prep(4,0);  putFloat(x);}  }
class C{  public void shrink(){  resize(size);}  }
class C{  public EventKey(int bucketID,int schemaID,int dimensionDescriptorID,int aggregatorID,GPOMutable key){  setBucketID(bucketID);  setSchemaID(schemaID);  setDimensionDescriptorID(dimensionDescriptorID);  setAggregatorID(aggregatorID);  setKey(key);}  }
class C{  public void addView(View... view){  List<View> viewList=Arrays.asList(view);  addViews(viewList);}  }
class C{  public boolean isSwitchOpen(){  return openImage.getVisibility() == View.VISIBLE;}  }
class C{  @Override public void computeScroll(){  super.computeScroll();  if (scroller != null) {    scroller.computeScroll();  }}  }
class C{  public static String expandRegex(String regex){  String newRegex=regex.replaceAll("\\\\d","[0-9]");  newRegex=newRegex.replaceAll("\\\\D","[^0-9]");  newRegex=newRegex.replaceAll("\\\\s","[ \\t\\n\\f\\r]");  newRegex=newRegex.replaceAll("\\\\S","[^ \\t\\n\\f\\r]");  newRegex=newRegex.replaceAll("\\\\w","[a-zA-Z_0-9]");  newRegex=newRegex.replaceAll("\\\\W","[^a-zA-Z_0-9]");  if (newRegex.startsWith("^"))   newRegex=newRegex.substring(1);  if (newRegex.endsWith("$"))   newRegex=newRegex.substring(0,newRegex.length() - 1);  newRegex=removeFlagExpressions(newRegex);  newRegex=removeReluctantOperators(newRegex);  return newRegex;}  }
class C{  public SystemStream(String system,String stream){  this.system=system;  this.stream=stream;}  }
class C{  public static Query newPolygonQuery(String field,Polygon... polygons){  return new LatLonPointInPolygonQuery(field,polygons);}  }
class C{  protected void configureEditor(){  editor.setEnabled(comboBox.isEnabled());  editor.setFocusable(comboBox.isFocusable());  editor.setFont(comboBox.getFont());  if (focusListener != null) {    editor.addFocusListener(focusListener);  }  editor.addFocusListener(getHandler());  comboBox.getEditor().addActionListener(getHandler());  if (editor instanceof JComponent) {    ((JComponent)editor).putClientProperty("doNotCancelPopup",HIDE_POPUP_KEY);    ((JComponent)editor).setInheritsPopupMenu(true);  }  comboBox.configureEditor(comboBox.getEditor(),comboBox.getSelectedItem());  editor.addPropertyChangeListener(propertyChangeListener);}  }
class C{  Future<DistributedLock> lockHandler(){  if (null != lockFuture) {    return lockFuture;  }  lockFuture=lock.asyncAcquire();  return lockFuture;}  }
class C{  public void detach(){  super.detach();  m_exprObj.detach();  m_exprObj=null;}  }
class C{  public MultipleSoloMapComponentException(String s){  super(s);}  }
class C{  public boolean hasUTF16BEBom(){  if (buffer.length >= 2)   return (buffer[0] == -2 && buffer[1] == -1); else   return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void incNumCqListenerInvocations(){  this._stats.incLong(_numCqListenerInvocationsId,1);}  }
class C{  public HashedBlockOutputStream(OutputStream outputStream){  this(outputStream,false);}  }
class C{  public void cancel(){  cancelled=true;}  }
class C{  NameRecord(short platformID,short platformSpecificID,short languageID,short nameID){  this.platformID=platformID;  this.platformSpecificID=platformSpecificID;  this.languageID=languageID;  this.nameID=nameID;}  }
class C{  public void surfaceChanged(SurfaceHolder holder,int format,int width,int height){  surfaceHolder=holder;}  }
class C{  protected Object[] argsAsArray(){switch (_myTypetag[0]) {case (0X66):    final float[] myFloatArray=new float[_myArguments.length];  for (int i=0; i < myFloatArray.length; i++) {    myFloatArray[i]=((Float)_myArguments[i]).floatValue();  }return new Object[]{myFloatArray};case (0x69):final int[] myIntArray=new int[_myArguments.length];for (int i=0; i < myIntArray.length; i++) {myIntArray[i]=((Integer)_myArguments[i]).intValue();}return new Object[]{myIntArray};case (0x53):case (0x73):final String[] myStringArray=new String[_myArguments.length];for (int i=0; i < myStringArray.length; i++) {myStringArray[i]=((String)_myArguments[i]);}return new Object[]{myStringArray};default :break;}return new Object[]{};}  }
class C{  protected Object writeReplace() throws java.io.ObjectStreamException {  return new LongCounterSnapshot(getName(),getUnits(),getVariability(),getFlags(),longValue());}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void writeString(String key,String value){  SharedPreferences.Editor editor=preferences.edit();  editor.putString(key,value);  editor.commit();}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  int extractedBit;  if (request.getServerPort() == 80) {    extractedBit=0;  } else   if (request.getServerPort() == 443) {    extractedBit=1;  } else {    System.err.println("HstsSuperCookieExistingIDServlet: Unexpected protocol.");    response.sendError(404);    return;  }  int subdomainNumber;{    String subdomain=request.getServerName();    Matcher domainRegexMatcher=Pattern.compile("^hsts(\\d+)\\..*$").matcher(subdomain);    if (domainRegexMatcher.matches() == false) {      System.err.println("HstsSuperCookieExistingIDServlet: Invalid subdomain <" + subdomain + ">.");      response.sendError(404);      return;    }    subdomainNumber=Integer.parseInt(domainRegexMatcher.group(1));  }  int subdomainGroupIndex=(subdomainNumber - 1) % HstsSuperCookieStartServlet.ID_LENGTH + 1;  if (subdomainGroupIndex < HstsSuperCookieStartServlet.ID_LENGTH) {    response.sendRedirect("http://hsts" + (subdomainNumber + 1) + "."+ getServletContext().getInitParameter("websiteBaseURL")+ request.getRequestURI()+ extractedBit);  } else {    Matcher pathRegexMatcher=pathRegexPattern.matcher(request.getRequestURI());    if (pathRegexMatcher.matches() == false) {      System.err.println("HstsSuperCookieExistingIDServlet: Invalid path. Must contain valid ID of length " + HstsSuperCookieStartServlet.ID_LENGTH + ". Path = <"+ request.getRequestURI()+ ">.");      response.sendError(404);      return;    }    String id=pathRegexMatcher.group(1) + extractedBit;    if (id.length() % 4 == 0) {      id=Integer.toHexString(Integer.parseInt(id,2));    }    int image_width=id.length() * ID_IMAGE_WIDTH_PER_CHAR;    BufferedImage bImage=new BufferedImage(image_width,ID_IMAGE_HEIGHT,BufferedImage.TYPE_INT_RGB);    Graphics2D g2d=bImage.createGraphics();    g2d.setBackground(Color.WHITE);    g2d.clearRect(0,0,image_width,ID_IMAGE_HEIGHT);    g2d.setColor(Color.black);    g2d.setFont(new Font("Liberation Mono",Font.PLAIN,ID_IMAGE_FONT_SIZE));    g2d.drawString(id,ID_IMAGE_TEXT_X_POSITION,ID_IMAGE_TEXT_Y_POSITION);    response.setContentType("image/png");    ImageIO.write(bImage,"png",response.getOutputStream());    return;  }}  }
class C{  static void skipTag(IXMLReader reader) throws IOException, XMLParseException {  int level=1;  while (level > 0) {    char ch=reader.read();switch (ch) {case '<':      ++level;    break;case '>':  --level;break;}}}  }
class C{  public void testGL1() throws IOException {  SimilarityBase sim=new DFRSimilarity(new BasicModelG(),new AfterEffectL(),new NormalizationH1());  correctnessTestCore(sim,1.6390540599822998f);}  }
class C{  public DTMConfigurationException(){  super("Configuration Error");}  }
class C{  protected SystemMemberImpl(AdminDistributedSystem system,InternalDistributedMember member) throws AdminException {  this(system);  updateByInternalDistributedMember(member);}  }
class C{  void handleError(@NotNull Throwable throwable,Notification notification){  notification.setType(ERROR);  if (throwable instanceof UnauthorizedException) {    console.printError(constant.messagesNotAuthorized());    notification.setMessage(constant.messagesNotAuthorized());    return;  }  String errorMessage=throwable.getMessage();  if (errorMessage == null) {    console.printError(constant.pushFail());    notification.setMessage(constant.pushFail());    return;  }  try {    errorMessage=dtoFactory.createDtoFromJson(errorMessage,ServiceError.class).getMessage();    if (errorMessage.equals("Unable get private ssh key")) {      console.printError(constant.messagesUnableGetSshKey());      notification.setMessage(constant.messagesUnableGetSshKey());      return;    }    console.printError(errorMessage);    notification.setMessage(errorMessage);  } catch (  Exception e) {    console.printError(errorMessage);    notification.setMessage(errorMessage);  }}  }
class C{  @Override public String toString(){  StringBuffer strBuff=new StringBuffer();  for (int i=0; i < iSections.length; i++) {    strBuff.append(iSections[i]);    if ((i + 1) < iSections.length) {      strBuff.append('.');    }  }  return strBuff.toString();}  }
class C{  public String post(String resource,Map<String,String> params) throws APIException, IOException {  return openURL(resource,params,"POST");}  }
class C{  public OrganizationDataException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public double nextDouble(double tau){  double u, u1, v, x, y;  if (tau != tau_set) {    s=1.0 / tau;    sm1=1.0 - s;    tau_set=tau;  }  do {    u=randomGenerator.raw();    u=(2.0 * u) - 1.0;    u1=Math.abs(u);    v=randomGenerator.raw();    if (u1 <= sm1) {      x=u1;    } else {      y=tau * (1.0 - u1);      x=sm1 - s * Math.log(y);      v=v * y;    }  } while (Math.log(v) > -Math.exp(Math.log(x) * tau));  if (u < 0.0)   return x; else   return -x;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void writeToStream(OutputStream os,int len) throws IOException {  while (len > 0) {    if (_readLength <= _readOffset) {      if (!readBuffer())       return;    }    int sublen=Math.min(len,_readLength - _readOffset);    os.write(_readBuffer,_readOffset,sublen);    _readOffset+=sublen;    len-=sublen;  }}  }
class C{  private void handleDelegateUnregistration(final HttpServerRequest request){  if (LOG.isTraceEnabled()) {    LOG.trace("handleDelegateUnregistration: {}",request.uri());  }  String delegateName=getDelegateName(request.uri());  storage.delete(delegatesUri + delegateName,null);}  }
class C{  public static String normalize(String dn,boolean toXml){  if ((dn == null) || dn.equals("")) {    return "";  }  try {    String DN=semicolonToComma(dn);    StringBuilder sb=new StringBuilder();    int i=0;    int l=0;    int k;    for (int j=0; (k=DN.indexOf(',',j)) >= 0; j=k + 1) {      l+=countQuotes(DN,j,k);      if ((k > 0) && (DN.charAt(k - 1) != '\\') && (l % 2) == 0) {        sb.append(parseRDN(DN.substring(i,k).trim(),toXml) + ",");        i=k + 1;        l=0;      }    }    sb.append(parseRDN(trim(DN.substring(i)),toXml));    return sb.toString();  } catch (  IOException ex) {    return dn;  }}  }
class C{  public static String kludgeFixAddDriveLetterToFilePath(final String pathStr){  for (  final File root : orderedDriveRoots) {    final File cPath=new File(root,(pathStr.startsWith("\\") ? pathStr.substring(1) : pathStr));    if (cPath.exists()) {      return cPath.getAbsolutePath();    }  }  return pathStr;}  }
class C{  public int computeSignatureHash(){  final int prime=31;  int result=1;  result=result * prime + name.hashCode();  for (  ClassInfo t : paramTypes) {    result=result * prime + System.identityHashCode(t);  }  return result;}  }
class C{  static Integer readInteger(final byte[] data,final int offset){  final int l=data.length;  int j=offset;  int end=-1;  while (j < l && end == -1) {    if (checkForString(data,j,DEF_CHARS)) {      end=j;    }    j++;  }  final String val=new String(data,offset,end - offset);  try {    return Integer.parseInt(val);  } catch (  final NumberFormatException e) {    LogWriter.writeLog("Exception in handling Integer in Type1 " + e);    return null;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    setCharacter(CHARACTER_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static final Vector2[] show(Window owner){  ApplyForceAtPointDialog afd=new ApplyForceAtPointDialog(owner);  afd.setLocationRelativeTo(owner);  afd.setVisible(true);  if (!afd.canceled) {    return new Vector2[]{afd.forceAtPointPanel.getForce(),afd.forceAtPointPanel.getPoint()};  }  return null;}  }
class C{  protected CacheConfiguration cacheConfiguration(){  CacheConfiguration cfg=defaultCacheConfiguration();  cfg.setName(CACHE_NAME);  cfg.setAffinity(new RendezvousAffinityFunction(false,128));  cfg.setCacheMode(PARTITIONED);  cfg.setBackups(1);  cfg.setNearConfiguration(null);  cfg.setWriteSynchronizationMode(FULL_SYNC);  cfg.setAtomicityMode(atomicityMode);  return cfg;}  }
class C{  public synchronized void addStratum(SmapStratum stratum,boolean defaultStratum){  strata.add(stratum);  if (defaultStratum)   this.defaultStratum=stratum.getStratumName();}  }
class C{  public final int offsetXZ(){  return this.rand.nextInt(16) + 8;}  }
class C{  public int estimateCellHSpan(int width){  int availWidth=width - (getPaddingLeft() + getPaddingRight());  int n=Math.max(1,(availWidth + mWidthGap) / (mCellWidth + mWidthGap));  return n;}  }
class C{  private synchronized Object createSingletonInstance(Class<?> classObject){  Object instance=componentFactory.create(classObject,null);  singletonInstances.put(classObject,instance);  return instance;}  }
class C{  private Vector3D averageNormal(CoordinateSequence seq){  int n=seq.size();  Coordinate sum=new Coordinate(0,0,0);  Coordinate p1=new Coordinate(0,0,0);  Coordinate p2=new Coordinate(0,0,0);  for (int i=0; i < n - 1; i++) {    seq.getCoordinate(i,p1);    seq.getCoordinate(i + 1,p2);    sum.x+=(p1.y - p2.y) * (p1.z + p2.z);    sum.y+=(p1.z - p2.z) * (p1.x + p2.x);    sum.z+=(p1.x - p2.x) * (p1.y + p2.y);  }  sum.x/=n;  sum.y/=n;  sum.z/=n;  Vector3D norm=Vector3D.create(sum).normalize();  return norm;}  }
class C{  public void postProcess(final HttpResponse response,final HttpProcessor processor,final HttpContext context) throws HttpException, IOException {  if (response == null) {    throw new IllegalArgumentException("HTTP response may not be null");  }  if (processor == null) {    throw new IllegalArgumentException("HTTP processor may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  processor.process(response,context);}  }
class C{  @NotNull public QueryBuilder addArgument(@Nullable Object argument){  arguments.add(argument);  return this;}  }
class C{  private static int[] trustedStripLeadingZeroInts(int val[]){  int vlen=val.length;  int keep;  for (keep=0; keep < vlen && val[keep] == 0; keep++)   ;  return keep == 0 ? val : java.util.Arrays.copyOfRange(val,keep,vlen);}  }
class C{  protected void doStateScouting(){  if (r.nextInt(5) == 0) {    turnBy(Math.toRadians(r.nextInt(40) - 20),Math.toRadians(r.nextInt(40) - 20));  }  doStepOutgoing(null);  foundSource();  if (nectarLoad <= nectarForReturn) {    forgetSource(Color.white,State.returnWithoutInfo);  }}  }
class C{  public void showOffsets(){  VM.sysWrite("in showOffset- #maps = ");  VM.sysWrite(mapCount);  VM.sysWrite("\n");  int i, tindex=0;  if (mapCount == 0) {    VM.sysWrite(" no maps for method");    return;  }  for (i=0; i < mapCount; i++) {    tindex=getNextRefIndex(tindex,i);    VM.sysWrite("initial offset  = ");    VM.sysWrite(tindex);    VM.sysWrite(" for map ");    VM.sysWrite(i);    VM.sysWrite("\n");    while (tindex != 0) {      tindex=getNextRefIndex(tindex,i);      VM.sysWrite("next offset = ");      VM.sysWrite(tindex);      if (tindex == 0)       VM.sysWrite("---------------- end of map");    }  }}  }
class C{  public GeoMark cityNear(final double lat,final double lon){  if (lat < -90.0d || lat > 90.0d)   return null;  if (lon < -180.0d || lon > 180.0d)   return null;  double mind=40000000.0d;  GeoLocation ming=null;  for (  GeoLocation g : id2loc.values()) {    double d=IntegerGeoPoint.distance(lat,lon,g.lat(),g.lon());    if (d < mind) {      mind=d;      ming=g;    }  }  return new GeoMark(ming,lat,lon);}  }
class C{  private int compareX(LineSegment seg0,LineSegment seg1){  int compare0=seg0.p0.compareTo(seg1.p0);  if (compare0 != 0)   return compare0;  return seg0.p1.compareTo(seg1.p1);}  }
class C{  public Median(DataSource original,int windowSize,int offset,Mode mode,int... cols){  super(original,mode,cols);  this.windowSize=windowSize;  this.offset=offset;  filter();}  }
class C{  private void init(){  setOpaque(false);}  }
class C{  public static void moveByText(@NotNull final CodeInsightTestFixture fixture,@NotNull final String testToFind){  final PsiElement element=fixture.findElementByText(testToFind,PsiElement.class);  assert element != null : "No element found by text: " + testToFind;  fixture.getEditor().getCaretModel().moveToOffset(element.getTextOffset());}  }
class C{  public Document createDocument(String ns,String root,String uri) throws IOException {  if (!SVGDOMImplementation.SVG_NAMESPACE_URI.equals(ns) || !"svg".equals(root)) {    throw new RuntimeException("Bad root element");  }  return createDocument(uri);}  }
class C{  public void sendMouse(int x,int y) throws IOException {  PacketMOUSE p=new PacketMOUSE(x,y);  p.send(hostAddress,hostPort);}  }
class C{  public MatchQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public RegistrationHandle add(final T item){  return add(Providers.of(item));}  }
class C{  public static int binarySearch(byte[][] arr,byte[] key,int offset,int length,RawComparator<byte[]> comparator){  int low=0;  int high=arr.length - 1;  while (low <= high) {    int mid=(low + high) >>> 1;    int cmp=comparator.compare(key,offset,length,arr[mid],0,arr[mid].length);    if (cmp > 0)     low=mid + 1; else     if (cmp < 0)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  public int rechargerSlotStartIndex(){  return 0;}  }
class C{  public static PrivateKey loadPrivateKey(String path) throws GeneralSecurityException, IOException {  byte[] clear=loadPrivateKeyFromFile(path);  PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(clear);  KeyFactory fact=KeyFactory.getInstance("RSA");  PrivateKey priv=fact.generatePrivate(keySpec);  Arrays.fill(clear,(byte)0);  return priv;}  }
class C{  protected void OrExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  AndExpr();  if ((null != m_token) && tokenIs("or")) {    nextToken();    insertOp(opPos,2,OpCodes.OP_OR);    OrExpr();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  }}  }
class C{  private void poll(){  Camera camera=this.simulation.getCamera();  World world=this.simulation.getWorld();  Dimension size=this.canvasSize;  Vector2 offset=camera.getTranslation();  double scale=camera.getScale();  if (this.mouse.hasScrolled()) {    int scroll=this.mouse.getScrollAmount();    if (scroll < 0) {      camera.zoomOut();    } else {      camera.zoomIn();    }  }  Point p=this.mouse.getLocation();  if (p == null) {    p=new Point();  }  Vector2 pw=this.screenToWorld(p,size,offset,scale);  if (this.mouse.hasMoved()) {    this.lblMouseLocation.update(pw);  }  if (this.mouse.wasClicked(MouseEvent.BUTTON1) || this.mouse.wasClicked(MouseEvent.BUTTON3)) {    if (this.selectBodyAction.isActive()) {      SandboxBody body=this.selectBodyAction.getObject();      BodyFixture fixture=this.getFixtureAtPoint(body,pw);      if (fixture == null) {        this.selectBodyAction.end();        this.editBodyAction.end();      }    } else     if (this.editBodyAction.isActive()) {      SandboxBody body=this.editBodyAction.getObject();      BodyFixture fixture=this.getFixtureAtPoint(body,pw);      if (fixture != null) {        this.selectFixtureAction.begin(fixture);      } else {        this.editBodyAction.end();        this.selectFixtureAction.end();      }    } else {      if (this.mouse.wasClicked(MouseEvent.BUTTON1) || this.isPaused()) {        SandboxBody body=this.getBodyAtPoint(world,pw);        if (body != null) {          this.selectBodyAction.begin(body);        }      }    }  }  if (this.mouse.isPressed(MouseEvent.BUTTON1)) {    if (this.selectBodyAction.isActive() && this.moveBodyAction.isActive()) {      SandboxBody body=this.selectBodyAction.getObject();      if (this.isPaused()) {        Vector2 tx=pw.difference(this.moveBodyAction.getBeginPosition());        body.translate(tx);        world.getBroadphaseDetector().update(body);        this.moveBodyAction.update(pw);      } else {        if (this.selectedBodyJoint == null) {          double mass=body.getMass().getMass();          if (mass <= Epsilon.E) {            mass=body.getMass().getInertia();          }          this.selectedBodyJoint=new PinJoint(body,pw,4.0,0.7,1000.0 * mass);synchronized (Simulation.LOCK) {            world.addJoint(this.selectedBodyJoint);          }        } else {          this.selectedBodyJoint.setTarget(pw);        }      }    } else     if (this.moveWorldAction.isActive()) {      Vector2 pwt=this.screenToWorld(p,size,this.moveWorldAction.getOffset(),scale);      Vector2 tx=pwt.difference(this.moveWorldAction.getBeginPosition());      camera.translate(tx);      this.moveWorldAction.update(pwt);    } else     if (this.editBodyAction.isActive()) {      SandboxBody body=this.editBodyAction.getObject();      if (this.selectFixtureAction.isActive() && this.moveFixtureAction.isActive()) {        BodyFixture bf=this.selectFixtureAction.getObject();        Vector2 lpw=body.getTransform().getInverseTransformed(pw);        Vector2 tx=lpw.difference(this.moveFixtureAction.getBeginPosition());        bf.getShape().translate(tx);        body.updateMass();        world.getBroadphaseDetector().update(body);        this.moveFixtureAction.update(lpw);      } else {        BodyFixture fixture=this.getFixtureAtPoint(body,pw);        if (fixture != null) {          this.selectFixtureAction.begin(fixture);          this.moveFixtureAction.begin(body.getTransform().getInverseTransformed(pw));        } else {          this.editBodyAction.end();          this.selectFixtureAction.end();        }      }    } else {      SandboxBody body=this.getBodyAtPoint(world,pw);      if (body != null) {        this.selectBodyAction.begin(body);        this.moveBodyAction.begin(pw);        this.editBodyAction.end();        body.setAsleep(false);        body.setActive(true);      } else {        this.moveWorldAction.begin(offset.copy(),pw,this.canvas);      }    }  }  if (this.mouse.wasDoubleClicked(MouseEvent.BUTTON1)) {    if (this.isPaused()) {      SandboxBody body=this.getBodyAtPoint(world,pw);      if (body != null) {        this.selectBodyAction.end();        this.editBodyAction.begin(body);        body.setAsleep(false);        body.setActive(true);      } else {        this.editBodyAction.end();      }    }  }  if (this.mouse.isPressed(MouseEvent.BUTTON3)) {    if (this.selectBodyAction.isActive() && this.rotateBodyAction.isActive()) {      SandboxBody body=this.selectBodyAction.getObject();      Vector2 c=body.getWorldCenter();      Vector2 v1=c.to(this.rotateBodyAction.getBeginPosition());      Vector2 v2=c.to(pw);      double theta=v1.getAngleBetween(v2);      body.rotate(theta,c);      world.getBroadphaseDetector().update(body);      this.rotateBodyAction.update(pw);    } else     if (this.editBodyAction.isActive()) {      SandboxBody body=this.editBodyAction.getObject();      if (this.selectFixtureAction.isActive() && this.rotateFixtureAction.isActive()) {        BodyFixture bf=this.selectFixtureAction.getObject();        Convex convex=bf.getShape();        Vector2 c=convex.getCenter();        Vector2 lpw=body.getTransform().getInverseTransformed(pw);        Vector2 v1=c.to(this.rotateFixtureAction.getBeginPosition());        Vector2 v2=c.to(lpw);        double theta=v1.getAngleBetween(v2);        bf.getShape().rotate(theta,convex.getCenter());        body.updateMass();        world.getBroadphaseDetector().update(body);        this.rotateFixtureAction.update(lpw);      } else {        BodyFixture fixture=this.getFixtureAtPoint(body,pw);        if (fixture != null) {          this.selectFixtureAction.begin(fixture);          this.rotateFixtureAction.begin(body.getTransform().getInverseTransformed(pw));        } else {          this.editBodyAction.end();          this.selectFixtureAction.end();        }      }    } else {      if (this.isPaused()) {        SandboxBody body=this.getBodyAtPoint(world,pw);        if (body != null) {          this.selectBodyAction.begin(body);          this.rotateBodyAction.begin(pw);          body.setAsleep(false);          body.setActive(true);        }      }    }  }  if (this.mouse.wasReleased(MouseEvent.BUTTON1)) {    if (this.moveBodyAction.isActive()) {      this.moveBodyAction.end();      if (this.selectedBodyJoint != null) {        world.removeJoint(this.selectedBodyJoint);        this.selectedBodyJoint=null;      }    }    if (this.moveFixtureAction.isActive()) {      SandboxBody body=this.editBodyAction.getObject();      body.updateMass();      this.moveFixtureAction.end();    }    if (this.moveWorldAction.isActive()) {      this.moveWorldAction.end(this.canvas);    }  }  if (this.mouse.wasReleased(MouseEvent.BUTTON3)) {    if (this.rotateBodyAction.isActive()) {      this.rotateBodyAction.end();    }    if (this.rotateFixtureAction.isActive()) {      this.rotateFixtureAction.end();    }  }  this.mouse.clear();}  }
class C{  public void append(TargetRoll other,boolean appendNonCumulative){  if (other == null) {    return;  }  for (  TargetRollModifier modifier : other.modifiers) {    if (appendNonCumulative || modifier.isCumulative()) {      addModifier(modifier);    }  }}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  draw(g2,area);  return null;}  }
class C{  private void toggleGroup(final NodeType node){  final IGroupNode<?,?> gnode=(IGroupNode<?,?>)node.getRawNode();  gnode.setCollapsed(!gnode.isCollapsed());}  }
class C{  public static double[] newVector(int m){  return (new double[m]);}  }
class C{  public void add(Rectangle rect){  add(rect,0,size - 1);}  }
class C{  public UserIdNotFoundException(String message,ReasonEnum reason,Object[] params){  super(message,params);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  private void evict(){  removeFromQueue();  removeFromStack();  backingMap.remove(key,this);  nonResident();  value=null;}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    try {      return ((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public void printComment(Mark start,Mark stop,char[] chars){  if (start != null && stop != null) {    println("// from=" + start);    println("//   to=" + stop);  }  if (chars != null)   for (int i=0; i < chars.length; ) {    printin();    print("// ");    while (chars[i] != '\n' && i < chars.length)     writer.print(chars[i++]);  }}  }
class C{  public final TextBuilder append(char chars[]){  append(chars,0,chars.length);  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String tzprop=Sage.get("time_zone","");  java.util.TimeZone tz=(tzprop != null && tzprop.length() > 0) ? java.util.TimeZone.getTimeZone(tzprop) : java.util.TimeZone.getDefault();  return tz.getDisplayName(true,java.util.TimeZone.SHORT,Sage.userLocale) + " " + tz.getDisplayName(Sage.userLocale)+ " ("+ tz.getID()+ ")";}  }
class C{  @Override public Overlay buildOverlay(MapView map,Style defaultStyle,Styler styler,KmlPlacemark kmlPlacemark,KmlDocument kmlDocument){  Polyline lineStringOverlay=new Polyline();  lineStringOverlay.setGeodesic(true);  lineStringOverlay.setPoints(mCoordinates);  lineStringOverlay.setTitle(kmlPlacemark.mName);  lineStringOverlay.setSnippet(kmlPlacemark.mDescription);  lineStringOverlay.setSubDescription(kmlPlacemark.getExtendedDataAsText());  if (styler != null)   styler.onTrack(lineStringOverlay,kmlPlacemark,this); else {    applyDefaultStyling(lineStringOverlay,defaultStyle,kmlPlacemark,kmlDocument,map);  }  return lineStringOverlay;}  }
class C{  public static <Item extends RealmObject>void registerRemoveNullListSerializer(GsonBuilder gsonBuilder,TypeToken<RealmList<Item>> typeToken,Class<Item> item){  gsonBuilder.registerTypeAdapter(typeToken.getType(),new RemoveNullListSerializer<>(item));}  }
class C{  public void testIsValidUtf8_2Bytes() throws UnsupportedEncodingException {  IsValidUtf8TestUtil.testBytes(2,IsValidUtf8TestUtil.EXPECTED_TWO_BYTE_ROUNDTRIPPABLE_COUNT);}  }
class C{  @Nullable @VisibleForTesting public State waitUntilFinish(Duration duration,MonitoringUtil.JobMessagesHandler messageHandler) throws IOException, InterruptedException {  return waitUntilFinish(duration,messageHandler,Sleeper.DEFAULT,NanoClock.SYSTEM);}  }
class C{  protected void addReactionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TraceReactionWillFire_reaction_feature"),getString("_UI_PropertyDescriptor_description","_UI_TraceReactionWillFire_reaction_feature","_UI_TraceReactionWillFire_type"),SexecPackage.Literals.TRACE_REACTION_WILL_FIRE__REACTION,true,false,true,null,null,null));}  }
class C{  public Weeks dividedBy(int divisor){  if (divisor == 1) {    return this;  }  return Weeks.weeks(getValue() / divisor);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public List<Challenge> _queryCategory_Challenges(long categoryId){synchronized (this) {    if (category_ChallengesQuery == null) {      QueryBuilder<Challenge> queryBuilder=queryBuilder();      queryBuilder.where(Properties.CategoryId.eq(null));      category_ChallengesQuery=queryBuilder.build();    }  }  Query<Challenge> query=category_ChallengesQuery.forCurrentThread();  query.setParameter(0,categoryId);  return query.list();}  }
class C{  static int[] roundSizes(float[] sizes){  int[] retInts=new int[sizes.length];  float posD=0;  for (int i=0; i < retInts.length; i++) {    int posI=(int)(posD + 0.5f);    posD+=sizes[i];    retInts[i]=(int)(posD + 0.5f) - posI;  }  return retInts;}  }
class C{  public Integer loadVolumesByRepValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadVolumesByRepValues");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  _info=FssMdoUtil.decodeVolInfo(statement.getLongText(index++));  _path=_info.m_path;  _maxSize=_info.m_maxSize;  _repType=_info.m_repType;  _temp=statement.getLongInteger(index++);  _actSize=statement.getShortText(index++);  _numFiles=statement.getLongInteger(index++);  _state=statement.getLongInteger(index++);  _remarks=statement.getShortText(index++);  _creatorId=statement.getLongInteger(index++);  _creationDate=statement.getDateTime(index++);  _updaterId=statement.getLongInteger(index++);  _updateDate=statement.getDateTime(index++);  return new Integer(index);}  }
class C{  public void queryLessThan(String type,int index,String value,int page,int limit,int visibilityScope,CloudResponse<CloudObject[]> response){  try {    queryImpl(type,value,index,page,limit,visibilityScope,3,0,false,false,false,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  public Stream<Tuple2io<int[]>> read(InputStream in){  return new BufferedReader(new InputStreamReader(in)).lines().map(null);}  }
class C{  public String toStringDebug(){  StringBuilder s=new StringBuilder("\n\nVplexBackendIngestionContext \n\t ");  s.append("unmanaged virtual volume: ").append(getUnmanagedVirtualVolume()).append(" \n\t ");  s.append("unmanaged backend volume(s): ").append(this.getUnmanagedBackendVolumes()).append(" \n\t ");  s.append("unmanaged snapshots: ").append(this.getUnmanagedSnapshots()).append(" \n\t ");  s.append("unmanaged full clones: ").append(this.getUnmanagedVplexClones()).append(" \n\t ");  s.append("unmanaged backend only clones: ").append(this.getUnmanagedBackendOnlyClones()).append(" \n\t ");  s.append("unmanaged mirrors: ").append(this.getUnmanagedVplexMirrors()).append(" \n\t ");  s.append("ingested objects: ").append(this.getObjectsIngestedByExportProcessing()).append(" \n\t ");  s.append("created objects map: ").append(this.getBlockObjectsToBeCreatedMap()).append(" \n\t ");  s.append("updated objects map: ");  for (  Entry<String,Set<DataObject>> e : this.getDataObjectsToBeUpdatedMap().entrySet()) {    s.append(e.getKey()).append(": ");    for (    DataObject o : e.getValue()) {      s.append(o.getLabel()).append("; ");    }  }  s.append(" \n\t ");  s.append("processed unmanaged volumes: ").append(this.getProcessedUnManagedVolumeMap()).append("\n\n");  return s.toString();}  }
class C{  public <T>Source<T> pick(List<T> ts){  return Arbitrary.pick(ts);}  }
class C{  public JSONArray(Collection c){  super(c);}  }
class C{  public void markChangedValue(String field){  setChanged(field);}  }
class C{  public boolean hasIfNoneMatch(){  return if_none_match;}  }
class C{  public WildcardType newWildcardType(){  WildcardType result=new WildcardType(this);  return result;}  }
class C{  public static void markTokenAndAdvance(PsiBuilder builder,IElementType markAs){  final PsiBuilder.Marker marker=builder.mark();  builder.advanceLexer();  marker.done(markAs);}  }
class C{  protected void doWriteObject(ObjectOutputStream out) throws IOException {  out.writeFloat(loadFactor);  out.writeInt(data.length);  out.writeInt(size);  for (MapIterator it=mapIterator(); it.hasNext(); ) {    out.writeObject(it.next());    out.writeObject(it.getValue());  }}  }
class C{  public FXGSAXParser(String profile){  scanner=createScanner(profile);}  }
class C{  @Override public byte[] decode(final byte[] data) throws Exception {  final FastByteArrayOutputStream bos;  final int count;  int len;  int value;  count=data.length;  bos=new FastByteArrayOutputStream(count);  for (int i=0; i < count; i++) {    len=data[i];    if (len < 0) {      len=256 + len;    }    if (len == 128) {      i=count;    } else     if (len > 128) {      i++;      len=257 - len;      value=data[i];      for (int j=0; j < len; j++) {        bos.write(value);      }    } else {      i++;      len++;      for (int j=0; j < len; j++) {        value=data[i + j];        bos.write(value);      }      i=i + len - 1;    }  }  return bos.toByteArray();}  }
class C{  public static int hash(long value){  return (int)(value ^ (value >> 32));}  }
class C{  public void addEntry(GoogleBaseEntry entry){  getEntries().add(entry);}  }
class C{  @Override protected void doInit(){  super.doInit();  myResourceTreeModel.updateResources();  getVerticalScrollBar().addAdjustmentListener(new VscrollAdjustmentListener(myUiFacade.getResourceChart(),false));}  }
class C{  public Hessian2Output(){}  }
class C{  protected void finalize() throws Throwable {  this.writer=null;  super.finalize();}  }
class C{  public void columns(String coldata[]){  column=coldata;  ncolumns=column.length;}  }
class C{  public SQLNonTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  private boolean isEmpty(String text){  return text == null || text.length() == 0;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) > 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  private void validateRequest(BusinessObjectDataInvalidateUnregisteredRequest businessObjectDataInvalidateUnregisteredRequest){  Assert.notNull(businessObjectDataInvalidateUnregisteredRequest,"The request is required");  Assert.isTrue(StringUtils.isNotBlank(businessObjectDataInvalidateUnregisteredRequest.getNamespace()),"The namespace is required");  Assert.isTrue(StringUtils.isNotBlank(businessObjectDataInvalidateUnregisteredRequest.getBusinessObjectDefinitionName()),"The business object definition name is required");  Assert.isTrue(StringUtils.isNotBlank(businessObjectDataInvalidateUnregisteredRequest.getBusinessObjectFormatUsage()),"The business object format usage is required");  Assert.isTrue(StringUtils.isNotBlank(businessObjectDataInvalidateUnregisteredRequest.getBusinessObjectFormatFileType()),"The business object format file type is required");  Assert.notNull(businessObjectDataInvalidateUnregisteredRequest.getBusinessObjectFormatVersion(),"The business object format version is required");  Assert.isTrue(businessObjectDataInvalidateUnregisteredRequest.getBusinessObjectFormatVersion() >= 0,"The business object format version must be greater than or equal to 0");  Assert.isTrue(StringUtils.isNotBlank(businessObjectDataInvalidateUnregisteredRequest.getPartitionValue()),"The partition value is required");  Assert.isTrue(StringUtils.isNotBlank(businessObjectDataInvalidateUnregisteredRequest.getStorageName()),"The storage name is required");  if (businessObjectDataInvalidateUnregisteredRequest.getSubPartitionValues() != null) {    for (int i=0; i < businessObjectDataInvalidateUnregisteredRequest.getSubPartitionValues().size(); i++) {      String subPartitionValue=businessObjectDataInvalidateUnregisteredRequest.getSubPartitionValues().get(i);      Assert.isTrue(StringUtils.isNotBlank(subPartitionValue),"The sub-partition value [" + i + "] must not be blank");    }  }}  }
class C{  public int size(){  return _frameTop;}  }
class C{  private String createNextMomentXml(String nextMomentId){  if (nextMomentId == null) {    return "";  }  return "<next_moment id='" + nextMomentId + "' />";}  }
class C{  protected static final void traceOutput(String srcClass,String srcMethod,String traceTag,byte[] output){  traceOutput(srcClass,srcMethod,traceTag,output,0,output == null ? 0 : output.length);}  }
class C{  public DeferredTreeViewer(Composite parent){  super(parent);}  }
class C{  @Override public String toString(){  return toString(0);}  }
class C{  public String toString(){  return "HDFSUpdateLog{state=" + getState() + ", tlog="+ tlog+ "}";}  }
class C{  private void removeIdentifiedLinks(String fileToRead,String fileToWrite){  this.log.info("Removing identified links.");  readNetwork(fileToRead);  Network nw=sc.getNetwork();  nw.removeLink(Id.create("182490",Link.class));  nw.removeLink(Id.create("182491",Link.class));  nw.removeLink(Id.create("209887",Link.class));  nw.removeLink(Id.create("209888",Link.class));  nw.removeLink(Id.create("107997",Link.class));  nw.removeLink(Id.create("107998",Link.class));  nw.removeLink(Id.create("40734",Link.class));  nw.removeLink(Id.create("76728",Link.class));  nw.removeLink(Id.create("76729",Link.class));  nw.removeLink(Id.create("207738",Link.class));  nw.removeLink(Id.create("207739",Link.class));  nw.removeLink(Id.create("58645",Link.class));  nw.removeLink(Id.create("58646",Link.class));  nw.removeLink(Id.create("41712",Link.class));  nw.removeLink(Id.create("41713",Link.class));  nw.removeLink(Id.create("7577",Link.class));  nw.removeLink(Id.create("7578",Link.class));  nw.removeLink(Id.create("117665",Link.class));  nw.removeLink(Id.create("117666",Link.class));  nw.removeLink(Id.create("183173",Link.class));  nw.removeLink(Id.create("183107",Link.class));  nw.removeLink(Id.create("117400",Link.class));  nw.removeLink(Id.create("117401",Link.class));  nw.removeLink(Id.create("117402",Link.class));  nw.removeLink(Id.create("101505",Link.class));  nw.removeLink(Id.create("101506",Link.class));  nw.removeLink(Id.create("101499",Link.class));  nw.removeLink(Id.create("101507",Link.class));  nw.removeLink(Id.create("101545",Link.class));  nw.removeLink(Id.create("101546",Link.class));  nw.removeLink(Id.create("35684",Link.class));  nw.removeLink(Id.create("35685",Link.class));  nw.removeLink(Id.create("73104",Link.class));  nw.removeLink(Id.create("73105",Link.class));  nw.removeLink(Id.create("118847",Link.class));  nw.removeLink(Id.create("190409",Link.class));  nw.removeLink(Id.create("156269",Link.class));  nw.removeLink(Id.create("156270",Link.class));  nw.removeLink(Id.create("138055",Link.class));  nw.removeLink(Id.create("138056",Link.class));  nw.removeLink(Id.create("143665",Link.class));  nw.removeLink(Id.create("143666",Link.class));  nw.removeLink(Id.create("143667",Link.class));  nw.removeLink(Id.create("143668",Link.class));  nw.removeLink(Id.create("143669",Link.class));  nw.removeLink(Id.create("143670",Link.class));  nw.removeLink(Id.create("118831",Link.class));  nw.removeLink(Id.create("118832",Link.class));  nw.removeLink(Id.create("184800",Link.class));  nw.removeLink(Id.create("184801",Link.class));  nw.removeLink(Id.create("96293",Link.class));  nw.removeLink(Id.create("96294",Link.class));  nw.removeLink(Id.create("9864",Link.class));  nw.removeLink(Id.create("9865",Link.class));  nw.removeLink(Id.create("29391",Link.class));  nw.removeLink(Id.create("29392",Link.class));  nw.removeLink(Id.create("220156",Link.class));  nw.removeLink(Id.create("220157",Link.class));  nw.removeLink(Id.create("174206",Link.class));  nw.removeLink(Id.create("188247",Link.class));  nw.removeLink(Id.create("159992",Link.class));  nw.removeLink(Id.create("159991",Link.class));  nw.removeLink(Id.create("29193",Link.class));  nw.removeLink(Id.create("29192",Link.class));  nw.removeLink(Id.create("60660",Link.class));  nw.removeLink(Id.create("60659",Link.class));  nw.removeLink(Id.create("102491",Link.class));  nw.removeLink(Id.create("103331",Link.class));  nw.removeLink(Id.create("39870",Link.class));  nw.removeLink(Id.create("39869",Link.class));  nw.removeLink(Id.create("140894",Link.class));  nw.removeLink(Id.create("140893",Link.class));  nw.removeLink(Id.create("138155",Link.class));  nw.removeLink(Id.create("90858",Link.class));  nw.removeLink(Id.create("98626",Link.class));  nw.removeLink(Id.create("98625",Link.class));  nw.removeLink(Id.create("78685",Link.class));  nw.removeLink(Id.create("78684",Link.class));  nw.removeLink(Id.create("167466",Link.class));  nw.removeLink(Id.create("167212",Link.class));  nw.removeLink(Id.create("50024",Link.class));  nw.removeLink(Id.create("50025",Link.class));  nw.removeLink(Id.create("500025",Link.class));  nw.removeLink(Id.create("127100",Link.class));  nw.removeLink(Id.create("38090",Link.class));  nw.removeLink(Id.create("207714",Link.class));  nw.removeLink(Id.create("207715",Link.class));  nw.removeLink(Id.create("83343",Link.class));  nw.removeLink(Id.create("83344",Link.class));  this.log.info("Identified links removed.");  this.log.info("Writing network to " + fileToWrite);  NetworkWriter nww=new NetworkWriter(nw);  nww.write(fileToWrite);  this.log.info("Network written.");}  }
class C{  @Override public int hashCode(){  return Long.valueOf(mIdentifier).hashCode();}  }
class C{  @Override protected void onDraw(Canvas canvas){  if (mPathWhite != null && mPathBlack != null) {    float textX=Math.max(getPaddingLeft() - (int)(mBubbleWidth / 4.0f),mProgress * mWidth / 100 - (int)(mBubbleWidth / 4.0f));    float textY=mHeight / 2 - mBubbleHeight / 2 + calculateDeltaY();switch (mState) {case STATE_WORKING:      canvas.save();    float speed=(getProgress() - mTarget) / 20;  mBubbleAngle+=speed * 10;if (mBubbleAngle > 20) {  mBubbleAngle=20;}if (mBubbleAngle < -20) {mBubbleAngle=-20;}if (Math.abs(speed) < 1) {mSpeedAngle-=mBubbleAngle / 20;mSpeedAngle*=.9f;}mBubbleAngle+=mSpeedAngle;canvas.rotate(mBubbleAngle,bubbleAnchorX,bubbleAnchorY);canvas.drawPath(mPathBubble,mPaintBubble);canvas.drawText(String.valueOf((int)mProgress) + " %",textX,textY,mPaintText);canvas.restore();break;case STATE_FAILED:canvas.save();canvas.rotate(mFailAngle,bubbleAnchorX,bubbleAnchorY);canvas.drawPath(mPathBubble,mPaintBubble);canvas.rotate(mFailAngle,bubbleAnchorX,textY - mBubbleHeight / 7);mPaintText.setColor(getResources().getColor(R.color.red_wine));textX=Math.max(getPaddingLeft() - (int)(mBubbleWidth / 3.2f),mProgress * mWidth / 100 - (int)(mBubbleWidth / 3.2f));canvas.drawText(getResources().getString(R.string.failed),textX,textY,mPaintText);canvas.restore();break;case STATE_SUCCESS:canvas.save();mPaintText.setColor(getResources().getColor(R.color.green_grass));textX=Math.max(getPaddingLeft() - (int)(mBubbleWidth / 3.2f),mProgress * mWidth / 100 - (int)(mBubbleWidth / 3.2f));Matrix flipMatrix=new Matrix();flipMatrix.setScale(mFlipFactor,1,bubbleAnchorX,bubbleAnchorY);canvas.concat(flipMatrix);canvas.drawPath(mPathBubble,mPaintBubble);canvas.concat(flipMatrix);canvas.drawText(getResources().getString(R.string.done),textX,textY,mPaintText);canvas.restore();break;}canvas.drawPath(mPathBlack,mPaintBlack);canvas.drawPath(mPathWhite,mPaintWhite);}}  }
class C{  public RootElement(String uri,String localName){  super(null,uri,localName,0);}  }
class C{  public void reportGpsGeofencePauseStatus(int geofenceId,int status){  if (DEBUG)   Log.d(TAG,"Pause Callback: GPS : Id: " + geofenceId + " Status: "+ status);  acquireWakeLock();  Message m=mGeofenceHandler.obtainMessage(PAUSE_GEOFENCE_CALLBACK);  m.arg1=geofenceId;  m.arg2=getGeofenceStatus(status);  mGeofenceHandler.sendMessage(m);}  }
class C{  public static boolean isDefault(InventoryView view){  return view.getBottomInventory() instanceof GlowPlayerInventory && view.getTopInventory() == ((GlowPlayerInventory)view.getBottomInventory()).getCraftingInventory();}  }
class C{  public TreeMaker at(int pos){  this.pos=pos;  return this;}  }
class C{  public BufferUnderflowException(){}  }
class C{  public long previousIndex(){  return previousIndex;}  }
class C{  public boolean isBeforeFirst() throws SQLException {  return crsInternal.isBeforeFirst();}  }
class C{  protected void buildFieldTypes(AbstractSession session){  for (  FieldDefinition field : getFields()) {    if (field.getForeignKeyFieldName() != null) {      addForeignKeyConstraint(buildForeignKeyConstraint(field,session.getPlatform()));    }  }}  }
class C{  void assertNextTerms(String expectedUnfolded,String expectedFolded,ASCIIFoldingFilter filter,CharTermAttribute termAtt) throws Exception {  assertTrue(filter.incrementToken());  assertEquals(expectedFolded,termAtt.toString());  if (filter.isPreserveOriginal() && !expectedUnfolded.equals(expectedFolded)) {    assertTrue(filter.incrementToken());    assertEquals(expectedUnfolded,termAtt.toString());  }}  }
class C{  private synchronized void unlinkStyleSheet(StyleSheet ss,int index){  if (resolvedStyles.size() > 0) {    Enumeration<ResolvedStyle> values=resolvedStyles.elements();    while (values.hasMoreElements()) {      ResolvedStyle rule=values.nextElement();      rule.removeExtendedStyleAt(index);    }  }}  }
class C{  @Deprecated public DateTimeParserBucket(long instantLocal,Chronology chrono,Locale locale){  this(instantLocal,chrono,locale,null,2000);}  }
class C{  public void purgeGameListeners(){  if (gameListeners == null) {    gameListeners=new Vector<GameListener>();  }  gameListeners.clear();}  }
class C{  public XTIFFTileCodec createTileCodec(XTIFFDecodeParam param) throws IOException {  int compression=getCompression();  XTIFFTileCodec codec=getTileCodec(compression);  if (codec == null)   throw new IOException("Compression type (" + compression + ") not supported");  return codec.create(param);}  }
class C{  public void write(Buffer buffer) throws Exception {  VideoSample sample=new VideoSample((byte[])buffer.getData(),buffer.getTimeStamp(),buffer.getSequenceNumber(),buffer.getVideoOrientation());  getRenderer().writeSample(sample);}  }
class C{  public static boolean isCommand(final String name){  return (valueOfName(name) != null);}  }
class C{  protected final void INT_DIVIDES(Instruction s,RegisterOperand result,Operand val1,Operand val2,boolean isDiv,boolean signed){  if (val1.isIntConstant()) {    int value=val1.asIntConstant().value;    if (value < 0) {      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEDX(),TypeReference.Int),IC(-1))));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),val1)));    } else {      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEDX(),TypeReference.Int),IC(0))));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),val1)));    }  } else   if (val1.isLongConstant()) {    int upper32=val1.asLongConstant().upper32();    int lower32=val1.asLongConstant().lower32();    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEDX(),TypeReference.Int),IC(upper32))));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),IC(lower32))));  } else   if (val1.getType().isLongType()) {    if (VM.BuildFor32Addr) {      Register upperReg=((RegisterOperand)val1).getRegister();      Register lowerReg=regpool.getSecondReg(upperReg);      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(upperReg,TypeReference.Int))));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),new RegisterOperand(lowerReg,TypeReference.Int))));    } else {      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEDX(),TypeReference.Int),val1)));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),val1)));      EMIT(CPOS(s,MIR_Move.create(IA32_SHR,new RegisterOperand(getEDX(),TypeReference.Int),LC(32))));    }  } else {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(getEAX(),TypeReference.Int),val1)));    EMIT(CPOS(s,MIR_ConvertDW2QW.create(IA32_CDQ,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int))));  }  if (val2.isIntConstant()) {    RegisterOperand temp=regpool.makeTempInt();    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp,val2)));    val2=temp.copyRO();  }  EMIT(MIR_Divide.mutate(s,signed ? IA32_IDIV : IA32_DIV,new RegisterOperand(getEDX(),TypeReference.Int),new RegisterOperand(getEAX(),TypeReference.Int),val2,GuardedBinary.getGuard(s)));  if (isDiv) {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result.copyD2D(),new RegisterOperand(getEAX(),TypeReference.Int))));  } else {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result.copyD2D(),new RegisterOperand(getEDX(),TypeReference.Int))));  }}  }
class C{  public static String name(Context context,EasyCursor c){switch (Type.get(c.getInt(Reviews.TYPE_ID))) {case PRIVATE:    if (!c.isNull(Reviews.CONTACT_ID)) {      return !c.isNull(Contacts.NAME) ? c.getString(Contacts.NAME) : context.getString(R.string.non_contact);    } else {      return context.getString(R.string.me);    }case GOOGLE:  return c.getString(Reviews.AUTHOR_NAME);}return null;}  }
class C{  public String convertIteratorOfReturnStatementToString(EDataType eDataType,Object instanceValue){  return super.convertToString(instanceValue);}  }
class C{  public Element append(VCardDataType dataType,String value){  String dataTypeStr=toLocalName(dataType);  return append(dataTypeStr,value);}  }
class C{  public boolean put(T t){  if (initial) {    if (size == data.length) {      if (size < limit * 2) {        @SuppressWarnings("unchecked") T[] newData=(T[])new Object[Math.min(limit,size) * 2];        System.arraycopy(data,0,newData,0,size);        data=newData;      } else {        Arrays.sort(data,comparator);        initial=false;        size=limit;      }      put(t);    } else {      data[size++]=t;    }    return true;  }  if (size == data.length) {    sortTail();  }  if (comparator.compare(t,data[limit - 1]) < 0) {    data[size++]=t;    return true;  }  return false;}  }
class C{  private void initPanel(final ConsolePane panel){  panel.setLanguage(defaultLanguage);  panel.setProgressWindowTitle("Scripting");  for (  final Entry<String,Object> binding : m_bindings.entrySet()) {    panel.addBinding(binding.getKey(),binding.getValue());  }  panel.setConsoleName("SCRIPT_CONSOLE");  panel.setLibraryPath(scriptsDirectory + File.separator + "lib");}  }
class C{  protected SealedObject(SealedObject so){  this.encryptedContent=so.encryptedContent.clone();  this.sealAlg=so.sealAlg;  this.paramsAlg=so.paramsAlg;  if (so.encodedParams != null) {    this.encodedParams=so.encodedParams.clone();  } else {    this.encodedParams=null;  }}  }
class C{  public void defineExperiment(final String definition,final Map<String,?> assign){  verifyChangesAllowed();  final ExperimentConfig expDef=new ExperimentConfig(definition,assign);  final ExperimentConfig existingDef=allExpDefs.put(definition,expDef);  checkArgument(existingDef == null,"duplicated experiment definition %s",expDef);}  }
class C{  public boolean isCachedFile(){  return false;}  }
class C{  @Override public String toString(){  if (item != null) {    return item.toString();  } else {    return label;  }}  }
class C{  @Override public void validateExpression(HashMap<String,DataIdentifier> ids,HashMap<String,ConstIdentifier> constVars,boolean conditional) throws LanguageException {  if (_left instanceof FunctionCallIdentifier) {    raiseValidateError("user-defined function calls not supported in relational expressions",false,LanguageException.LanguageErrorCodes.UNSUPPORTED_EXPRESSION);  }  if (_right instanceof FunctionCallIdentifier) {    raiseValidateError("user-defined function calls not supported in relational expressions",false,LanguageException.LanguageErrorCodes.UNSUPPORTED_EXPRESSION);  }  if ((_left != null && _left instanceof BooleanIdentifier) || (_right != null && _right instanceof BooleanIdentifier)) {    if ((_left instanceof IntIdentifier || _left instanceof DoubleIdentifier) || _right instanceof IntIdentifier || _right instanceof DoubleIdentifier) {      if (_left instanceof BooleanIdentifier) {        if (((BooleanIdentifier)_left).getValue())         this.setLeft(new IntIdentifier(1,_left.getFilename(),_left.getBeginLine(),_left.getBeginColumn(),_left.getEndLine(),_left.getEndColumn())); else         this.setLeft(new IntIdentifier(0,_left.getFilename(),_left.getBeginLine(),_left.getBeginColumn(),_left.getEndLine(),_left.getEndColumn()));      } else       if (_right instanceof BooleanIdentifier) {        if (((BooleanIdentifier)_right).getValue())         this.setRight(new IntIdentifier(1,_right.getFilename(),_right.getBeginLine(),_right.getBeginColumn(),_right.getEndLine(),_right.getEndColumn())); else         this.setRight(new IntIdentifier(0,_right.getFilename(),_right.getBeginLine(),_right.getBeginColumn(),_right.getEndLine(),_right.getEndColumn()));      }    }  }  _left.validateExpression(ids,constVars,conditional);  if (_right != null)   _right.validateExpression(ids,constVars,conditional);  if (_left instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)_left).getName()))   _left=constVars.get(((DataIdentifier)_left).getName());  if (_right instanceof DataIdentifier && constVars.containsKey(((DataIdentifier)_right).getName()))   _right=constVars.get(((DataIdentifier)_right).getName());  String outputName=getTempName();  DataIdentifier output=new DataIdentifier(outputName);  output.setAllPositions(this.getFilename(),this.getBeginLine(),this.getBeginColumn(),this.getEndLine(),this.getEndColumn());  boolean isLeftMatrix=(_left.getOutput() != null && _left.getOutput().getDataType() == DataType.MATRIX);  boolean isRightMatrix=(_right.getOutput() != null && _right.getOutput().getDataType() == DataType.MATRIX);  if (isLeftMatrix || isRightMatrix) {    if (isLeftMatrix && isRightMatrix) {      checkMatchingDimensions(_left,_right,true);    }    long[] dims=getBinaryMatrixCharacteristics(_left,_right);    output.setDataType(DataType.MATRIX);    output.setDimensions(dims[0],dims[1]);    output.setBlockDimensions(dims[2],dims[3]);    output.setValueType(ValueType.DOUBLE);  } else {    output.setBooleanProperties();  }  this.setOutput(output);}  }
class C{  public void remove(){}  }
class C{  public PvTableModel(ProcessVar pVar){  setProcessVar(pVar);}  }
class C{  private boolean checkInterfaceAndSuperInterfacesForName(ImmutableInterfaceType interfaceType,IMatchPattern namePattern){  if (namePattern.match(interfaceType.getFQN())) {    return true;  }  for (  ImmutableInterfaceType superInterfaceType : interfaceType.getImmutableSuperInterfaces()) {    if (checkInterfaceAndSuperInterfacesForName(superInterfaceType,namePattern)) {      return true;    }  }  return false;}  }
class C{  private void solve(final Component c) throws InterruptedException {  Map<Nonterminal,RecursiveProduction> equations=new HashMap<Nonterminal,RecursiveProduction>();  Map<Nonterminal,RecursiveProduction> scratch=new HashMap<Nonterminal,RecursiveProduction>();  for (  Nonterminal nt : c.getNodes()) {    equations.put(nt,new RecursiveProduction(nt));    RecursiveProduction v=new RecursiveProduction(nt);    scratch.put(nt,v);  }  List<Nonterminal> todo=new LinkedList<Nonterminal>(c.getNodes());  List<Nonterminal> odot=new LinkedList<Nonterminal>();  while (!todo.isEmpty()) {    RecursiveProduction from=scratch.get(todo.remove(0));    odot.add(0,from.nt);    for (    Nonterminal into : todo) {      RecursiveProduction nextInto=scratch.get(into).substitute(from);      scratch.put(into,nextInto);    }  }  while (!odot.isEmpty()) {    RecursiveProduction from=scratch.get(odot.remove(0));    from.arden();    for (    Nonterminal into : odot) {      RecursiveProduction nextInto=scratch.get(into).substitute(from);      scratch.put(into,nextInto);    }  }  for (  Map.Entry<Nonterminal,RecursiveProduction> e : scratch.entrySet()) {    setRE(e.getKey(),e.getValue().extractRE());  }}  }
class C{  long loadData(final InputStream is,final RDFFormat format,final String uri){  final RDFParser rdfParser=RDFParserRegistry.getInstance().get(format).getParser();  rdfParser.setValueFactory(store.getValueFactory());  rdfParser.setVerifyData(true);  rdfParser.setStopAtFirstError(true);  rdfParser.setDatatypeHandling(RDFParser.DatatypeHandling.IGNORE);  final AddStatementHandler handler=new AddStatementHandler();  if (getTripleStore().isQuads()) {    handler.setContext(new URIImpl(uri));  }  rdfParser.setRDFHandler(handler);  try {    rdfParser.parse(is,baseURI);    return handler.close();  } catch (  Exception e) {    throw new RuntimeException(e);  } finally {    try {      is.close();    } catch (    IOException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public static Paint newGuidelinePaint(){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(SEMI_TRANSPARENT));  paint.setStrokeWidth(DEFAULT_GUIDELINE_THICKNESS_PX);  return paint;}  }
class C{  public void sendBucketResponse(Exchange exchange,Response response){  super.sendResponse(exchange,response);}  }
class C{  public TranscoderSupport(){}  }
class C{  public RemoveContainerParams withForce(boolean force){  this.force=force;  return this;}  }
class C{  public void remove(T object){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.remove(object);    } else {      mObjects.remove(object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  private static Shape topEdge(BufferedImage image){  GeneralPath path=new GeneralPath();  Point2D p1=null;  Point2D p2=null;  Line2D line=new Line2D.Float();  Point2D p=new Point2D.Float();  int foundPointX=-1;  for (int i=image.getWidth() - 1; i >= 0; i--) {    for (int j=0; j < image.getHeight(); j++) {      if ((image.getRGB(i,j) & 0xff000000) != 0) {        p.setLocation(i,j);        foundPointX=i;        break;      }    }    if (foundPointX >= 0) {      if (p2 == null) {        p1=new Point2D.Float(foundPointX,image.getHeight() - 1);        path.moveTo(p1.getX(),p1.getY());        p2=new Point2D.Float();        p2.setLocation(p);      } else {        p2=detectLine(p1,p2,p,line,path);      }    }  }  path.lineTo(p.getX(),p.getY());  if (foundPointX >= 0) {    path.lineTo(foundPointX,image.getHeight() - 1);  }  path.closePath();  return path;}  }
class C{  public static Pointer to(long values[]){  return new Pointer(LongBuffer.wrap(values));}  }
class C{  @Override public void scheduleGcThreads(){  initCollectors();  setState(BLOCKED);  schedule();}  }
class C{  public AppDataSnapshotServerPOJO(){}  }
class C{  public ProcessModalDialog(Properties ctx,Frame parent,String title,ASyncProcess aProcess,int WindowNo,int AD_Process_ID,int tableId,int recordId,boolean autoStart){  super(parent,title,true);  log.info("Process=" + AD_Process_ID);  m_ctx=ctx;  m_ASyncProcess=aProcess;  m_WindowNo=WindowNo;  m_AD_Process_ID=AD_Process_ID;  m_tableId=tableId;  m_recordId=recordId;  m_autoStart=autoStart;  try {    jbInit();    init();  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  protected BinaryExpression(int operation,int minOp,int maxOp,Expression left,Expression right){  if (operation < minOp || operation > maxOp) {    throw new IllegalArgumentException("Unknown operation type: " + operation);  }  if (left == null || right == null) {    throw new IllegalArgumentException("Expressions must be non-null.");  }  this.m_op=operation;  this.m_left=left;  this.m_right=right;}  }
class C{  public static String buildImdnDeliveryReport(String msgId,ImdnDocument.DeliveryStatus status,long timestamp){  String method;switch (status) {case DISPLAYED:    method="display-notification";  break;case DELIVERED:method="delivery-notification";break;default :method="processing-notification";break;}return "<?xml version=\"1.0\" encoding=\"" + UTF8_STR + "\"?>"+ CRLF+ "<imdn xmlns=\"urn:ietf:params:xml:ns:imdn\">"+ CRLF+ "<message-id>"+ msgId+ "</message-id>"+ CRLF+ "<datetime>"+ DateUtils.encodeDate(timestamp)+ "</datetime>"+ CRLF+ "<"+ method+ "><status><"+ status+ "/></status></"+ method+ ">"+ CRLF+ "</imdn>";}  }
class C{  private void addCertCRLsToWorkingList(X509Certificate leafCert,Collection<Object> crlCollection) throws CertificateRevocationCheckException {  if (logger.isDebugEnabled()) {    logger.debug("IdmCertificatePathValidator.addCertCRLsToWorkingList(): Adding CRLs from CRLDP");  }  String error=null;  boolean atLeastOneCrlAdded=false;  X509CertImpl certImpl=(X509CertImpl)leafCert;  CRLDistributionPointsExtension crlDistributionPointsExt=certImpl.getCRLDistributionPointsExtension();  if (null == crlDistributionPointsExt) {    return;  }  try {    for (    DistributionPoint distribPoint : (List<DistributionPoint>)crlDistributionPointsExt.get(CRLDistributionPointsExtension.POINTS)) {      for (      GeneralName crlGeneralName : distribPoint.getFullName().names()) {        String crlGeneralNameString=crlGeneralName.toString();        if (crlGeneralNameString.startsWith(PREFIX_URI_NAME)) {          String crlURLString=crlGeneralNameString.substring(PREFIX_URI_NAME.length());          try {            addCRLToWorkingList(crlURLString,crlCollection);            atLeastOneCrlAdded=true;          } catch (          CrlDownloadException e) {            if (logger.isDebugEnabled()) {              logger.debug("No cached copy and failed to download CRL" + e.getMessage());            }            if (error == null) {              error=String.format("Unable to obtain CRL from certificate at following distribution points: %s",crlURLString);            } else {              error+=String.format(error + ", %s",crlURLString);            }          }        }      }    }  } catch (  IOException e) {    logger.error("IOException in accessing CRLDP" + e.getMessage());    throw new CertificateRevocationCheckException("IOException in calling CRLDistributionPointsExtension.get()");  }  if (error != null) {    logger.warn(error);    if (!atLeastOneCrlAdded) {      throw new CertificateRevocationCheckException(error);    }  }}  }
class C{  public void nodesWereRemoved(TreeNode node,int[] childIndices,Object[] removedChildren){  if (node != null && childIndices != null) {    fireTreeNodesRemoved(this,getPathToRoot(node),childIndices,removedChildren);  }}  }
class C{  public static FileDecrypter create(){  return FileDecrypter.from(new BufferedBlockCipher(new CBCBlockCipher(new AESEngine())),new SHA1Digest());}  }
class C{  public static double kmToAngle(double km){  return Length.KM.toRadians(km);}  }
class C{  public void start(final FileDownloadListener listener,final boolean isSerial){  if (listener == null) {    return;  }  final List<BaseDownloadTask> list=FileDownloadList.getImpl().copy(listener);  if (FileDownloadMonitor.isValid()) {    FileDownloadMonitor.getMonitor().onRequestStart(list.size(),isSerial,listener);  }  if (FileDownloadLog.NEED_LOG) {    FileDownloadLog.v(this,"start list size[%d] listener[%s] isSerial[%B]",list.size(),listener,isSerial);  }  if (isSerial) {    final Handler serialHandler=createSerialHandler(list);    Message msg=serialHandler.obtainMessage();    msg.what=WHAT_SERIAL_NEXT;    msg.arg1=0;    serialHandler.sendMessage(msg);  } else {    for (    final BaseDownloadTask downloadTask : list) {      downloadTask.start();    }  }}  }
class C{  public OverScroller(Context context,Interpolator interpolator,boolean flywheel){  if (interpolator == null) {    mInterpolator=new ViscousFluidInterpolator();  } else {    mInterpolator=interpolator;  }  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller(context);  mScrollerY=new SplineOverScroller(context);}  }
class C{  public void scanForPeripherals(OnDeviceDiscoveredListener deviceDiscoveredListener){  Timber.d("scanForPeripherals");  mOnDeviceDiscoveredListener=deviceDiscoveredListener;  scanForPeripherals();}  }
class C{  Type fold1(int opcode,Type operand){  try {    Object od=operand.constValue();switch (opcode) {case nop:      return operand;case ineg:    return syms.intType.constType(-intValue(od));case ixor:  return syms.intType.constType(~intValue(od));case bool_not:return syms.booleanType.constType(b2i(intValue(od) == 0));case ifeq:return syms.booleanType.constType(b2i(intValue(od) == 0));case ifne:return syms.booleanType.constType(b2i(intValue(od) != 0));case iflt:return syms.booleanType.constType(b2i(intValue(od) < 0));case ifgt:return syms.booleanType.constType(b2i(intValue(od) > 0));case ifle:return syms.booleanType.constType(b2i(intValue(od) <= 0));case ifge:return syms.booleanType.constType(b2i(intValue(od) >= 0));case lneg:return syms.longType.constType(new Long(-longValue(od)));case lxor:return syms.longType.constType(new Long(~longValue(od)));case fneg:return syms.floatType.constType(new Float(-floatValue(od)));case dneg:return syms.doubleType.constType(new Double(-doubleValue(od)));default :return null;}} catch (ArithmeticException e) {return null;}}  }
class C{  public long nanosElapsed(){  return System.nanoTime() - _startTimeNanos;}  }
class C{  public void build(ColorMap colorMap){  value=colorMap.getValues();  isGradient=colorMap.isGradient();  double dMin=Double.MAX_VALUE;  for (int i=1; i < value.length; ++i) {    dMin=Math.min(dMin,value[i] - value[i - 1]);  }  double fracDigits=Math.log10(dMin);  String str="0";  if (fracDigits > 0) {    fracDigits=0;  } else {    str+=".";    fracDigits=Math.ceil(Math.abs(fracDigits));    for (int i=0; i < fracDigits; ++i) {      str+="0";    }  }  formatter=new DecimalFormat(str);  color=colorMap.getColors();  tickStr=new String[value.length];  bigTick="";  for (int i=0; i < value.length; ++i) {    tickStr[i]=formatter.format(value[i]);    if (tickStr[i].length() > bigTick.length()) {      bigTick=tickStr[i];    }  }  if (vertical) {    colorRect=new Rectangle(0,0,40,20);    width=100;    height=color.length * colorRect.height;  } else {    colorRect=new Rectangle(0,0,80,40);    width=(color.length + 1) * colorRect.width;    height=80;  }  setPreferredSize(new Dimension(width,height));}  }
class C{  public static double computeTax(int[][] brackets,double[] rates,int status,double income){  double tax=0, incomeTaxed=0;  for (int i=4; i >= 0; i--) {    if (income > brackets[status][i])     tax+=(incomeTaxed=income - brackets[status][i]) * rates[i + 1];    income-=incomeTaxed;  }  return tax+=brackets[status][0] * rates[0];}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  public void testHashCodeUnequal(){  String a="8478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=-24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertTrue("incorrect value",aNumber.hashCode() != bNumber.hashCode());}  }
class C{  private void writeMultiSpecies(TaxonList taxonList,XMLWriter writer){  List<String> species=options.starBEASTOptions.getSpeciesList();  String sp;  numOfSpecies=species.size();  for (  String eachSp : species) {    writer.writeOpenTag(SpeciesBindingsSPinfoParser.SP,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,eachSp)});    for (int i=0; i < taxonList.getTaxonCount(); i++) {      Taxon taxon=null;      try {        taxon=taxonList.getTaxon(i);        sp=taxon.getAttribute(TraitData.TRAIT_SPECIES).toString();      } catch (      Exception e) {        throw new IllegalArgumentException("Cannot get value from Taxon " + taxon.getId());      }      if (sp.equals(eachSp)) {        writer.writeIDref(TaxonParser.TAXON,taxon.getId());      }    }    writer.writeCloseTag(SpeciesBindingsSPinfoParser.SP);  }  writeGeneTrees(writer);}  }
class C{  public void close() throws IOException {  if (isClosed) {    return;  }  if (debug) {    System.out.println("StartTLS: replacing SSL " + "streams with originals");  }  ldapConnection.replaceStreams(originalInputStream,originalOutputStream);  if (debug) {    System.out.println("StartTLS: closing SSL Socket");  }  sslSocket.close();  isClosed=true;}  }
class C{  public MethodInfo[] findMethodsHere(String name){  ArrayList<MethodInfo> result=new ArrayList<MethodInfo>();  for (  MethodInfo m : methods.values()) {    if (m.name.equals(name)) {      result.add(m);    }  }  return result.toArray(new MethodInfo[result.size()]);}  }
class C{  public static int roundToPowerOfTwo(final int value){  return 1 << (32 - Integer.numberOfLeadingZeros(value - 1));}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TFORMAL_PARAMETER___IS_OPTIONAL:    return isOptional();case TypesPackage.TFORMAL_PARAMETER___IS_VARIADIC_OR_OPTIONAL:  return isVariadicOrOptional();case TypesPackage.TFORMAL_PARAMETER___GET_FORMAL_PARAMETER_AS_STRING:return getFormalParameterAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public void debug(Throwable throwable,String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.DEBUG,throwable,msg,arg0,arg1,arg2,null);}  }
class C{  public void focusGained(FocusEvent e){  log.config(e.paramString());  if (e.getSource() instanceof VMemo)   requestFocus(); else   m_oldText=getText();}  }
class C{  public EObject loadModel(URI uri,URI root){  URI absURI=uri.resolve(root);  if (!uri.equals(absURI)) {    resourceSet.getURIConverter().getURIMap().put(uri,absURI);  }  Resource resource=null;  try {    resource=resourceSet.getResource(absURI,true);    resource.load(Collections.EMPTY_MAP);  } catch (  IOException e) {    e.printStackTrace();    return null;  }  EObject model=resource.getContents().get(0);  for (Iterator<String> it=fileHandlerRegistry.get(absURI.fileExtension()).importsIterator(model); it.hasNext(); ) {    String importURIStr=it.next();    URI importURI=URI.createURI(importURIStr);    URI resolvedURI=importURI.resolve(absURI);    resourceSet.getURIConverter().getURIMap().put(importURI,resolvedURI);    loadModel(resolvedURI,root);  }  return model;}  }
class C{  private static int[] WFG_create_A(int M,boolean degenerate){  assert M >= 2;  if (degenerate) {    int[] A=new int[M - 1];    A[0]=1;    return A;  } else {    int[] A=new int[M - 1];    Arrays.fill(A,1);    return A;  }}  }
class C{  public Boolean isCreateXSLDirectory() throws AdeException {  return m_createXSLDirectory;}  }
class C{  public Reference(final IReference reference){  m_reference=Preconditions.checkNotNull(reference,"Error: Reference argument can't be null");}  }
class C{  public static void i(String msg,Throwable thr){  if (DEBUG)   android.util.Log.i(TAG,buildMessage(msg),thr);}  }
class C{  public tfoot addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void validateVendorMandatoryFields(VOOrganization voOrganization) throws ValidationException {  BLValidator.isNotBlank(FIELD_NAME_EMAIL,voOrganization.getEmail());  BLValidator.isNotBlank(FIELD_NAME_PHONE,voOrganization.getPhone());  BLValidator.isNotBlank(FIELD_NAME_URL,voOrganization.getUrl());  BLValidator.isNotBlank(FIELD_NAME_NAME,voOrganization.getName());  BLValidator.isNotBlank(FIELD_NAME_ADDRESS,voOrganization.getAddress());  if (voOrganization.getOperatorRevenueShare() != null) {    BLValidator.isInRange("operatorRevenueShare",voOrganization.getOperatorRevenueShare(),RevenueShareModel.MIN_REVENUE_SHARE,RevenueShareModel.MAX_REVENUE_SHARE);  }}  }
class C{  public double intersectDistance(Line line){  if (line == null) {    throw new IllegalArgumentException("Line Is Null");  }  double ldotv=this.n.dot3(line.getDirection());  if (ldotv == 0) {    double ldots=this.n.dot4(line.getOrigin());    if (ldots == 0)     return Double.POSITIVE_INFINITY; else     return Double.NaN;  }  return -this.n.dot4(line.getOrigin()) / ldotv;}  }
class C{  public boolean generatesOutput(){  return false;}  }
class C{  public void removeTableModelListener(TableModelListener l){  listener.remove(l);}  }
class C{  public static double mean(double... values){  double sum=0;  for (  double x : values) {    sum+=x;  }  return sum / values.length;}  }
class C{  private void computeSharedFriends() throws NoSuchAlgorithmException {  commonFriends=mClientPSI.getCardinality(getSRTFromServerTuple());}  }
class C{  public boolean isConstant(){  return true;}  }
class C{  public Socket push(final Envelope envelope) throws IOException {  LOG.log(Level.FINE,"Pushing envelope: {0}",envelope);  final ObjectNode node=objectMapper.createObjectNode();  node.put("topic",envelope.getTopic());  node.put("event",envelope.getEvent());  node.put("ref",envelope.getRef());  node.set("payload",envelope.getPayload() == null ? objectMapper.createObjectNode() : envelope.getPayload());  final String json=objectMapper.writeValueAsString(node);  LOG.log(Level.FINE,"Sending JSON: {0}",json);  RequestBody body=RequestBody.create(WebSocket.TEXT,json);  if (this.isConnected()) {    try {      webSocket.sendMessage(body);    } catch (    IllegalStateException e) {      LOG.log(Level.SEVERE,"Attempted to send push when socket is not open",e);    }  } else {    this.sendBuffer.add(body);  }  return this;}  }
class C{  public static void main(String[] args){  Circle circle1=new Circle(15,"red",true);  Circle circle2=new Circle(10,"blue",false);  System.out.println("\nCircle 1: ");  print(circle1);  System.out.println("\nCircle 2: ");  print(circle2);  print("\nThe larger of the two circles was ");  print(Circle.max(circle1,circle2));  Rectangle rectangle1=new Rectangle(4,5,"green",true);  Rectangle rectangle2=new Rectangle(4.2,5,"orange",true);  System.out.println("\nRectangle 1: ");  print(circle1);  System.out.println("\nRectangle 2: ");  print(circle2);  print("\nThe larger of the two rectangles was ");  print(Rectangle.max(rectangle1,rectangle2));}  }
class C{  @Override public void applyDamage(){  super.applyDamage();  int troopersAlive=0;  for (int i=0; i < locations(); i++) {    if (getInternal(i) > 0) {      troopersAlive++;    }  }  troopersShooting=troopersAlive;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  String nullNS=null;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM","address");  assertNotNull("createElementNotNull",element);  attribute=doc.createAttributeNS(nullNS,"domestic");  newAttribute=element.setAttributeNode(attribute);  state=element.hasAttributeNS(nullNS,"domestic");  assertTrue("elementhasattributens03",state);}  }
class C{  @Override public long remove(Type type,String value) throws MailQueueException {switch (type) {case Name:    FileItem item=keyMappings.remove(value);  if (item != null) {    item.delete();    return 1;  } else {    return 0;  }default :break;}throw new MailQueueException("Not supported yet");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Boolean isPasswordBasedAuthenticationEnabled(){  return passwordBasedAuthenticationEnabled;}  }
class C{  private void createDictionaryByteArrayToSurrogateKeyMap(int initialMapSize){  dictionaryByteArrayToSurrogateKeyMap=new ConcurrentHashMap<>(initialMapSize);}  }
class C{  private void printHeader(Problem problem,boolean reduced,List<String> attributes,PrintWriter writer){  int numberOfVariables=problem.getNumberOfVariables();  int numberOfObjectives=problem.getNumberOfObjectives();  if (reduced) {    numberOfVariables=0;  }  writer.println("# Nondominated Solutions:");  writer.print("# Format:  Variables = ");  writer.print(numberOfVariables);  writer.print(" | Objectives = ");  writer.println(numberOfObjectives);  if (attributes.size() == numberOfObjectives) {    writer.print("# <DATA_HEADER>");    for (int i=0; i < numberOfVariables; i++) {      writer.print(" Var");      writer.print(i + 1);    }    for (int i=0; i < numberOfObjectives; i++) {      writer.print(" ");      writer.print(attributes.get(i));    }    writer.println();  } else   if (attributes.size() == numberOfVariables + numberOfObjectives) {    writer.print("# <DATA_HEADER>");    for (int i=0; i < numberOfVariables + numberOfObjectives; i++) {      writer.print(" ");      writer.print(attributes.get(i));    }    writer.println();  } else {    if (!attributes.isEmpty()) {      System.err.println("incorrect number of names, using defaults");    }    writer.print("# <DATA_HEADER>");    for (int i=0; i < numberOfVariables; i++) {      writer.print(" Var");      writer.print(i + 1);    }    for (int i=0; i < numberOfObjectives; i++) {      writer.print(" Obj");      writer.print(i + 1);    }    writer.println();  }  writer.println("# <GEN_HEADER> NFE, Time (sec)");  writer.println("#");}  }
class C{  private static Class<?>[] types(Object... values){  if (values == null) {    return new Class[0];  }  Class<?>[] result=new Class[values.length];  for (int i=0; i < values.length; i++) {    Object value=values[i];    result[i]=value == null ? NULL.class : value.getClass();  }  return result;}  }
class C{  public static Exception show(final Window parent,final String title,final IProgressThread thread){  Preconditions.checkNotNull(thread,"Error: Thread argument can't be null");  final EndlessHelperWrapper helperThread=new EndlessHelperWrapper(thread);  CProgressDialog.showEndless(parent,title,helperThread);  return helperThread.getException();}  }
class C{  public static RecipePetals registerPetalRecipe(ItemStack output,Object... inputs){  Preconditions.checkArgument(inputs.length <= 16);  RecipePetals recipe=new RecipePetals(output,inputs);  petalRecipes.add(recipe);  return recipe;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEBlendElement(prefix,(AbstractDocument)doc);}  }
class C{  protected void processKeyEvent(KeyEvent e){  boolean result;  boolean shouldProcessKey;  super.processKeyEvent(e);  if (!e.isConsumed()) {    processComponentKeyEvent(e);  }  shouldProcessKey=KeyboardState.shouldProcess(e);  if (e.isConsumed()) {    return;  }  if (shouldProcessKey && processKeyBindings(e,e.getID() == KeyEvent.KEY_PRESSED)) {    e.consume();  }}  }
class C{  public void add(Permission permission){  if (!(permission instanceof UnresolvedPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  UnresolvedPermission up=(UnresolvedPermission)permission;  List<UnresolvedPermission> v;synchronized (this) {    v=perms.get(up.getName());    if (v == null) {      v=new ArrayList<UnresolvedPermission>();      perms.put(up.getName(),v);    }  }synchronized (v) {    v.add(up);  }}  }
class C{  public Placeholder insertPlaceholder(String title,Bitmap placeholder,long timestamp){  if (title == null || placeholder == null) {    throw new IllegalArgumentException("Null argument passed to insertPlaceholder");  }  if (placeholder.getWidth() <= 0 || placeholder.getHeight() <= 0) {    throw new IllegalArgumentException("Image had bad height/width");  }  Uri uri=Storage.addPlaceholder(placeholder);  if (uri == null) {    return null;  }  return new Placeholder(title,uri,timestamp);}  }
class C{  public synchronized void unlock(){  if (!locked) {    return;  }  locked=false;  try {    if (watchdog != null) {      watchdog.interrupt();    }  } catch (  Exception e) {    trace.debug(e,"unlock");  }  try {    if (fileName != null) {      if (load().equals(properties)) {        FileUtils.delete(fileName);      }    }    if (serverSocket != null) {      serverSocket.close();    }  } catch (  Exception e) {    trace.debug(e,"unlock");  } finally {    fileName=null;    serverSocket=null;  }  try {    if (watchdog != null) {      watchdog.join();    }  } catch (  Exception e) {    trace.debug(e,"unlock");  } finally {    watchdog=null;  }}  }
class C{  private static int mergeOrdered(char[] source,int start,int current,char[] data,int next,int limit,boolean isOrdered){  int r;  int cc, trailCC=0;  boolean adjacent;  adjacent=current == next;  NextCCArgs ncArgs=new NextCCArgs();  ncArgs.source=data;  ncArgs.next=next;  ncArgs.limit=limit;  if (start != current || !isOrdered) {    while (ncArgs.next < ncArgs.limit) {      cc=getNextCC(ncArgs);      if (cc == 0) {        trailCC=0;        if (adjacent) {          current=ncArgs.next;        } else {          data[current++]=ncArgs.c;          if (ncArgs.c2 != 0) {            data[current++]=ncArgs.c2;          }        }        if (isOrdered) {          break;        } else {          start=current;        }      } else {        r=current + (ncArgs.c2 == 0 ? 1 : 2);        trailCC=insertOrdered(source,start,current,r,ncArgs.c,ncArgs.c2,cc);        current=r;      }    }  }  if (ncArgs.next == ncArgs.limit) {    return trailCC;  } else {    if (!adjacent) {      do {        source[current++]=data[ncArgs.next++];      } while (ncArgs.next != ncArgs.limit);      ncArgs.limit=current;    }    PrevArgs prevArgs=new PrevArgs();    prevArgs.src=data;    prevArgs.start=start;    prevArgs.current=ncArgs.limit;    return getPrevCC(prevArgs);  }}  }
class C{  public void clear(){  Record record=this.client.get(null,key,tailBin,topBin);  long tail=record.getLong(tailBin);  long top=record.getLong(topBin);  List<Key> subKeys=subrecordKeys(tail,top);  for (  Key key : subKeys) {    this.client.delete(null,key);  }}  }
class C{  private void takeLeadership(){  context.setLeader(context.getCluster().member().id());  context.getClusterState().getRemoteMemberStates().forEach(null);}  }
class C{  protected final double rand(){  return random.nextDouble();}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static Node createNodeWithName(final String name){  return createNodeWithHost("127.0.0.1",name);}  }
class C{  public Time(Date date){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(date) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    time=new DERGeneralizedTime(d);  } else {    time=new DERUTCTime(d.substring(2));  }}  }
class C{  private void filterOutInitiatorsNotAssociatedWithVArray(ExportGroup exportGroup,Collection<URI> storageSystems,List<URI> connectedStorageSystems,List<URI> newInitiators){  Iterator<URI> it=newInitiators.iterator();  BlockStorageScheduler blockScheduler=new BlockStorageScheduler();  blockScheduler.setDbClient(_dbClient);  List<URI> exportGroupInitiatorURIs=StringSetUtil.stringSetToUriList(exportGroup.getInitiators());  while (it.hasNext()) {    URI uri=it.next();    Initiator initiator=_dbClient.queryObject(Initiator.class,uri);    if (initiator == null) {      _log.info(String.format("Initiator %s was not found in DB. Will be eliminated from request payload.",uri.toString()));      it.remove();      continue;    }    Set<String> varraysConsidered=new HashSet<String>();    if (!hasConnectivityToAllSystems(initiator,storageSystems,connectedStorageSystems,exportGroup) || !isInitiatorInStorageSystemsNetwork(exportGroup,initiator,storageSystems,varraysConsidered)) {      _log.info(String.format("Initiator %s (%s) will be eliminated from the payload. " + "It was either not found to be connected to any of these StorageSystems [%s] that are " + "associated with VirtualArray(s) %s or not connected to any of its networks.",initiator.getInitiatorPort(),initiator.getId().toString(),Joiner.on(',').join(storageSystems),varraysConsidered.toString()));      if (!exportGroupInitiatorURIs.contains(uri)) {        it.remove();      }    }  }}  }
class C{  public GenericUrl(URL url){  this(url.getProtocol(),url.getHost(),url.getPort(),url.getPath(),url.getRef(),url.getQuery(),url.getUserInfo());}  }
class C{  public <T>NbtTagList(String name,NbtTagType type,Collection<? extends T> values){  super(name);  this.tagList=new ArrayList<>(values.size());  for (  T value : values) {    this.tagList.add(type.newInstance(value));  }}  }
class C{  protected JButton createArrowButton(){  JButton button=super.createArrowButton();  button.setContentAreaFilled(false);  button.setOpaque(false);  return button;}  }
class C{  public static ChainingXmlWriter writeXml(ICalendar... icals){  return writeXml(Arrays.asList(icals));}  }
class C{  public static synchronized X509CRLImpl intern(X509CRL c) throws CRLException {  if (c == null) {    return null;  }  boolean isImpl=c instanceof X509CRLImpl;  byte[] encoding;  if (isImpl) {    encoding=((X509CRLImpl)c).getEncodedInternal();  } else {    encoding=c.getEncoded();  }  X509CRLImpl newC=getFromCache(crlCache,encoding);  if (newC != null) {    return newC;  }  if (isImpl) {    newC=(X509CRLImpl)c;  } else {    newC=new X509CRLImpl(encoding);    encoding=newC.getEncodedInternal();  }  addToCache(crlCache,encoding,newC);  return newC;}  }
class C{  public static List<SubstringReplacerMatchRule> matchRulesFromInternal(String matchReplaceDetails,Instances inputStructure,String statusMessagePrefix,Logger log,Environment env){  List<SubstringReplacerMatchRule> matchRules=new ArrayList<SubstringReplacerMatchRule>();  String[] mrParts=matchReplaceDetails.split("@@match-replace@@");  for (  String p : mrParts) {    SubstringReplacerMatchRule mr=new SubstringReplacerMatchRule(p.trim());    mr.m_statusMessagePrefix=statusMessagePrefix;    mr.m_logger=log;    mr.init(env,inputStructure);    matchRules.add(mr);  }  return matchRules;}  }
class C{  public float distance(double x,double y){  return Float.POSITIVE_INFINITY;}  }
class C{  public void waitForState(final String collection,long wait,TimeUnit unit,CollectionStatePredicate predicate) throws InterruptedException, TimeoutException {  final CountDownLatch latch=new CountDownLatch(1);  CollectionStateWatcher watcher=null;  registerCollectionStateWatcher(collection,watcher);  try {    if (!latch.await(wait,unit))     throw new TimeoutException();  }  finally {    removeCollectionStateWatcher(collection,watcher);  }}  }
class C{  public static void main(String[] args){  Console c;  Object[] options={"Surprise me!","3D mode","2D mode","Abort"};  int n=JOptionPane.showOptionDialog(null,"Please choose the simulation mode.","Simulation mode selection.",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);  GUIState gui=null;switch (n) {case 0:    gui=new Random(System.currentTimeMillis()).nextBoolean() ? new ForagingBeeGUI2D() : new ForagingBeeGUI3D();  break;case 1:gui=new ForagingBeeGUI3D();break;case 2:gui=new ForagingBeeGUI2D();break;}if (gui != null) {c=new Console(gui);c.setVisible(true);}}  }
class C{  public static void appendMap(StringBuilder buff,String key,Object value){  if (buff.length() > 0) {    buff.append(',');  }  buff.append(key).append(':');  String v;  if (value instanceof Long) {    v=Long.toHexString((Long)value);  } else   if (value instanceof Integer) {    v=Integer.toHexString((Integer)value);  } else {    v=value.toString();  }  if (v.indexOf(',') < 0 && v.indexOf('\"') < 0) {    buff.append(v);  } else {    buff.append('\"');    for (int i=0, size=v.length(); i < size; i++) {      char c=v.charAt(i);      if (c == '\"') {        buff.append('\\');      }      buff.append(c);    }    buff.append('\"');  }}  }
class C{  private static void copyMissing(File source,File dest) throws IOException {  List<File> files;  try {    files=new ArrayList<>(Arrays.asList(source.listFiles()));  } catch (  Exception ex) {    URL url=Core.class.getProtectionDomain().getCodeSource().getLocation();    source=FileUtils.toFile(url);    source=FileUtils.getFile(source,Environment.APPLICATION_NAME);    files=new ArrayList<>(Arrays.asList(source.listFiles()));  }  if (files.size() == 1) {    File f=files.get(0);    files.clear();    files.addAll(Arrays.asList(f.listFiles()));  }  files.removeIf(null);  while (!files.isEmpty()) {    File target=files.get(0);    if (target.isDirectory()) {      File relativeFile=intersect(target,dest);      if (!relativeFile.exists()) {        relativeFile.mkdirs();      }      files.addAll(Arrays.asList(target.listFiles()));    } else     if (target.isFile()) {      File relativeFile=intersect(target,dest);      File parent=relativeFile.getParentFile();      if (!relativeFile.exists()) {        FileUtils.copyFileToDirectory(target,parent,true);        System.out.println("Unpacking " + target.getPath());      }    }    files.remove(0);    files.removeIf(null);  }}  }
class C{  void appendStartDocument(){  m_docElement=NULL;  initDocument(0);}  }
class C{  public static OutputStream leftShift(OutputStream self,byte[] value) throws IOException {  self.write(value);  self.flush();  return self;}  }
class C{  public byte[] sizedByteArray(){  return sizedByteArray(space,bb.capacity() - space);}  }
class C{  public boolean isEnabled(SignalMast dest){  if (!destList.containsKey(dest)) {    return false;  }  return destList.get(dest).isEnabled();}  }
class C{  public PlatformListenable executeNative(long taskPtr,long topVer){  final PlatformFullTask task=new PlatformFullTask(platformCtx,computeForPlatform,taskPtr,topVer);  return executeNative0(task);}  }
class C{  public boolean compileIsModified(){  if (_compileIsModified)   return true;  CompileThread compileThread=new CompileThread();  ThreadPool.current().start(compileThread);  try {synchronized (compileThread) {      if (!compileThread.isDone())       compileThread.wait(5000);    }    if (_compileIsModified)     return true; else     if (compileThread.isDone()) {      return reloadIsModified();    } else     return true;  } catch (  Throwable e) {  }  return false;}  }
class C{  public static String left(String str,int len){  if (len < 0) {    throw new IllegalArgumentException("Requested String length " + len + " is less than zero");  }  if ((str == null) || (str.length() <= len)) {    return str;  } else {    return str.substring(0,len);  }}  }
class C{  public static boolean isXml(final Path path) throws IOException {  final XmlToolsFactory xml=Activator.getXmlToolsFactory();  final XMLInputFactory xin=xml.newXMLInputFactory();  try (InputStream stream=new BufferedInputStream(Files.newInputStream(path))){    try {      final XMLStreamReader reader=xin.createXMLStreamReader(stream);      reader.next();      return true;    } catch (    final XMLStreamException e) {      return false;    }  } }  }
class C{  static char decodeEntity(String source){  if (source.length() < 4 || source.charAt(0) != HTML_ENTITY_START || source.charAt(source.length() - 1) != HTML_ENTITY_TERMINATE) {    return HTML_ENTITY_INVALID;  }  if (source.charAt(1) == HTML_ENTITY_RAWVALUE) {    try {      if (Character.toLowerCase(source.charAt(2)) == HTML_ENTITY_RAWHEXVALUE) {        return (char)Integer.parseInt(source.substring(3,4),16);      } else {        return (char)Integer.parseInt(source.substring(2,3),10);      }    } catch (    NumberFormatException nfe) {      return HTML_ENTITY_INVALID;    }  }  source=source.toLowerCase();  for (int i=0; i < HTML_ENCODED_ENTITIES.length; i++) {    if (source.equals(HTML_ENCODED_ENTITIES[i])) {      return HTML_ENTITIES[i];    }  }  return HTML_ENTITY_INVALID;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public BigOperatorAtom(Atom base,Atom under,Atom over,boolean limits){  this(base,under,over);  this.limits=limits;  limitsSet=true;}  }
class C{  private void attribute(int start,int count){  String segment=new String(data,start,count);  if (count > 0) {    attribute(segment);  }}  }
class C{  public void warning(SAXParseException e) throws SAXException {  System.err.println(e.getMessage());}  }
class C{  private void parseAggregatorConfiguration(Element configuration){  _aggregatorsConfDataList=new ArrayList<AggregatorConfigurationData>();  NodeList nodes=configuration.getChildNodes();  int n=0;  for (int i=0; i < nodes.getLength(); i++) {    Node node=nodes.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE) {      n++;      Element aggregatorNode=(Element)node;      String className;      Node classNameNode=aggregatorNode.getElementsByTagName("classname").item(0);      if (classNameNode == null) {        throw new RuntimeException("No tag 'classname' in aggregator " + n);      }      className=classNameNode.getTextContent();      if (className.equals("")) {        throw new RuntimeException("Empty tag 'classname' in aggregator " + n);      }      Node appTypeNode=aggregatorNode.getElementsByTagName("applicationtype").item(0);      if (appTypeNode == null) {        throw new RuntimeException("No tag or invalid tag 'applicationtype' in aggregator " + n + " classname "+ className);      }      String appTypeStr=appTypeNode.getTextContent();      if (appTypeStr == null) {        logger.error("Application type is not specified in aggregator " + n + " classname "+ className+ ". Skipping this configuration.");        continue;      }      ApplicationType appType=new ApplicationType(appTypeStr);      Map<String,String> paramsMap=Utils.getConfigurationParameters(aggregatorNode);      AggregatorConfigurationData aggregatorData=new AggregatorConfigurationData(className,appType,paramsMap);      _aggregatorsConfDataList.add(aggregatorData);    }  }}  }
class C{  public void cleanUp(){  m_Data=null;  m_Filtered=null;}  }
class C{  public double localScore(int i,int parent){  return localScore(i,new int[]{parent});}  }
class C{  public DTMAxisIterator reset(){  _sp=_oldsp;  return resetPosition();}  }
class C{  public void reverse(){  startAngle*=-1;}  }
class C{  public static void ageFile(Path path,int seconds) throws IOException {  long currentTime=Files.getLastModifiedTime(path).toMillis();  long newTime=currentTime - TimeUnit.SECONDS.toMillis(seconds);  Files.setLastModifiedTime(path,FileTime.fromMillis(newTime));}  }
class C{  public static ConditionOperand CMPL_NOT_EQUAL(){  return new ConditionOperand(CMPL_NOT_EQUAL);}  }
class C{  public RDFXMLPrettyWriter(Writer out){  super(out);}  }
class C{  private void computeStatistics(ProfileRequest req,int accessTime,int egressTime){  int count=0;  int sum=0;  this.min=Integer.MAX_VALUE;  this.max=0;  for (int start=req.fromTime; start < req.toTime; start+=60) {    int timeAtOriginStop=start + accessTime + RaptorWorker.BOARD_SLACK_SECONDS;    int bestTimeAtDestinationStop=Integer.MAX_VALUE;    for (    Itinerary itin : this.itineraries) {      if (itin.boardTimes[0] < timeAtOriginStop)       continue;      if (itin.alightTimes[this.length - 1] < bestTimeAtDestinationStop)       bestTimeAtDestinationStop=itin.alightTimes[this.length - 1];    }    if (bestTimeAtDestinationStop == Integer.MAX_VALUE)     continue;    int bestTimeAtDestination=bestTimeAtDestinationStop + egressTime;    int travelTime=bestTimeAtDestination - start;    count++;    sum+=travelTime;    min=Math.min(min,travelTime);    max=Math.max(max,travelTime);  }  if (count == 0)   throw new IllegalStateException("No valid itineraries found for path computed in RaptorWorker");  avg=sum / count;}  }
class C{  public void updateReferenceBasicProperty(final BasicProperty basicProperty,final String parentPropId){  PropertyStatusValues propStatVal=(PropertyStatusValues)propPerServ.find("from PropertyStatusValues psv where psv.basicProperty=? order by createdDate desc",basicProperty);  final BasicProperty referenceBasicProperty=(BasicProperty)propPerServ.find("from BasicPropertyImpl bp where bp.upicNo=?",parentPropId);  if (referenceBasicProperty != null)   propStatVal.setReferenceBasicProperty(referenceBasicProperty);}  }
class C{  public T caseCharacterClass(CharacterClass object){  return null;}  }
class C{  public void addLoadThis(){  add(ByteCode.ALOAD_0);}  }
class C{  protected void resetOptions(){  m_trainInstances=null;  m_missing_merge=true;}  }
class C{  private void updateEnabledState(){  mCustomDurationToggle.setEnabled(mAnimateToggle.isChecked());  mCustomDurationBar.setEnabled(mAnimateToggle.isChecked() && mCustomDurationToggle.isChecked());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:49.637 -0500",hash_original_method="3F53836604A3169B964FEAA2D80DC740",hash_generated_method="6389A096C6C5B364BEBC6472E3D31AB4") public static int[] calculateLength(String messageBody,boolean use7bitOnly){  return calculateLength((CharSequence)messageBody,use7bitOnly);}  }
class C{  public void initializeImageMap(){  if (imageMap == null) {    imageMap=new HashMap<>();  }  if (imageOnErrorSet == null) {    imageOnErrorSet=new HashSet<>();  }  imageMap.clear();  for (  RelatedContent relatedContent : ssp.getRelatedContentSet()) {    if (relatedContent instanceof ImageContent) {      BufferedImage image;      if (((ImageContent)relatedContent).getHttpStatusCode() != 200 || ((ImageContent)relatedContent).getContent() == null) {        imageOnErrorSet.add((ImageContent)relatedContent);      } else {        try {          image=ImageIO.read(new ByteArrayInputStream(((ImageContent)relatedContent).getContent()));          imageMap.put(((Content)relatedContent).getURI(),image);        } catch (        IOException ex) {          Logger.getLogger(SSPHandlerImpl.class.getName()).error(ex);        }      }    }  }}  }
class C{  public static Streamable<Double> fromDoubleStream(final DoubleStream stream){  Objects.requireNonNull(stream);  return fromStream(ReactiveSeq.fromDoubleStream(stream));}  }
class C{  public TransitionSecurityExpressionRoot(Authentication authentication,Transition<?,?> transition){  super(authentication);  this.transition=transition;}  }
class C{  Operand pop(){  return stack.pop();}  }
class C{  static public TupleQueryResult evaluateTupleQuery(final AbstractTripleStore store,final ASTContainer astContainer,final QueryBindingSet globallyScopedBS,final Dataset dataset) throws QueryEvaluationException {  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  final QueryRoot optimizedQuery=optimizeQuery(astContainer,context,globallyScopedBS,dataset);  final IVariable<?>[] projected=astContainer.getOptimizedAST().getProjection().getProjectionVars();  final List<String> projectedSet=new LinkedList<String>();  for (  IVariable<?> var : projected)   projectedSet.add(var.getName());  final boolean materializeProjectionInQuery=context.materializeProjectionInQuery && !optimizedQuery.hasSlice();  final CloseableIteration<BindingSet,QueryEvaluationException> itr=ASTEvalHelper.evaluateQuery(astContainer,context,materializeProjectionInQuery,projected);  TupleQueryResult r=null;  try {    r=new TupleQueryResultImpl(projectedSet,itr);    return r;  }  finally {    if (r == null) {      itr.close();    }  }}  }
class C{  public boolean add(Object e){synchronized (lock) {    ensureCapacity(size + 1);    elementData[size]=e;    ++size;  }  return true;}  }
class C{  protected Node newNode(){  return new XBLOMContentElement();}  }
class C{  protected boolean isConnected(){  return delegate.isConnected();}  }
class C{  public String searchTerminationTipText(){  return "Specify the number of consecutive non-improving nodes to allow " + "before terminating the search.";}  }
class C{  public boolean equalTo(Highlight h){  if (h == null)   return false; else {    if (this.mDataSetIndex == h.mDataSetIndex && this.mXIndex == h.mXIndex && this.mStackIndex == h.mStackIndex)     return true; else     return false;  }}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public static void main(String[] args){  try {    if (args.length == 0) {      throw new Exception("The first argument must be the class name of a kernel");    }    String kernel=args[0];    args[0]="";    System.out.println(evaluate(kernel,args));  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public void scheduleFirst(Envelope envelope){  if (envelope.getMailbox() != this) {    throw new RuntimeException("envelope.mailbox != this mailbox");  }  queueCollection.post(queueId,envelope,true);}  }
class C{  public LagHTMLWriter(String outputFileName) throws FileNotFoundException {  this.ps=new PrintStream(outputFileName);}  }
class C{  public static String quoteStringSQL(String s){  if (s == null) {    return "NULL";  }  int length=s.length();  StringBuilder buff=new StringBuilder(length + 2);  buff.append('\'');  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '\'') {      buff.append(c);    }    buff.append(c);  }  buff.append('\'');  return buff.toString();}  }
class C{  public static void addChemicalOxidizerRecipe(ItemStack input,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalOxidizerRecipe",ItemStack.class,GasStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public boolean isRangeCrosshairVisible(){  return this.rangeCrosshairVisible;}  }
class C{  @SuppressWarnings("deprecation") private void initCropFrameStyle(@NonNull TypedArray a){  int cropFrameStrokeSize=a.getDimensionPixelSize(R.styleable.ucrop_UCropView_ucrop_frame_stroke_size,getResources().getDimensionPixelSize(R.dimen.ucrop_default_crop_frame_stoke_width));  int cropFrameColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_frame_color,getResources().getColor(R.color.ucrop_color_default_crop_frame));  mCropFramePaint.setStrokeWidth(cropFrameStrokeSize);  mCropFramePaint.setColor(cropFrameColor);  mCropFramePaint.setStyle(Paint.Style.STROKE);}  }
class C{  public List<Node> listAvailableMutations(Node node){  List<Node> result=new ArrayList<Node>();  for (  Node mutation : availableNodes) {    if (isMutationCompatible(node,mutation)) {      result.add(mutation);    }  }  return result;}  }
class C{  private void readCRLF() throws IOException {  final int cr=in.read();  final int lf=in.read();  if ((cr != '\r') || (lf != '\n')) {    throw new IOException("CRLF expected at end of chunk: " + cr + "/"+ lf);  }}  }
class C{  public MockNTReceiver(String path,ITable table){  super(path);  this.table=table;}  }
class C{  @Override public void createSingleVolumeSnapshot(StorageSystem storage,URI snapshot,Boolean createInactive,Boolean readOnly,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    _log.info("createSingleVolumeSnapshot operation START");    Volume volume=_dbClient.queryObject(Volume.class,snapshotObj.getParent());    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,volume.getTenant().getURI());    String tenantName=tenant.getLabel();    String snapLabelToUse=_nameGenerator.generate(tenantName,snapshotObj.getLabel(),snapshot.toString(),'-',SmisConstants.MAX_SNAPSHOT_NAME_LENGTH);    CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] inArgs=_helper.getCreateElementReplicaSnapInputArguments(storage,volume,createInactive,snapLabelToUse);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethod(storage,replicationSvcPath,SmisConstants.CREATE_ELEMENT_REPLICA,inArgs,outArgs);    CIMObjectPath job=_cimPath.getCimObjectPathFromOutputArgs(outArgs,SmisConstants.JOB);    if (job != null) {      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisBlockCreateSnapshotJob(job,storage.getId(),!createInactive,taskCompleter)));    }  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);    setInactive(snapshot,true);  }}  }
class C{  public static WebElement swipeDownWaitVisible(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By swipeElement,By elementVisible,int waitTimeInSeconds,int quantity,int pressInMilliSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  Preconditions.checkNotNull(swipeElement);  Preconditions.checkNotNull(elementVisible);  return swipeVerticalWaitVisibleAfter(driver,augmentedFunctions,swipeElement,elementVisible,waitTimeInSeconds,BIG_NUMBER,quantity,pressInMilliSeconds);}  }
class C{  public static Script createMultiSigInputScriptBytes(List<byte[]> signatures,@Nullable byte[] multisigProgramBytes){  checkArgument(signatures.size() <= 16);  ScriptBuilder builder=new ScriptBuilder();  builder.smallNum(0);  for (  byte[] signature : signatures)   builder.data(signature);  if (multisigProgramBytes != null)   builder.data(multisigProgramBytes);  return builder.build();}  }
class C{  private void sortCatByThreads(){  DefaultMutableTreeNode node=(DefaultMutableTreeNode)tree.getLastSelectedPathComponent();  ((TreeCategory)node.getUserObject()).sort(new MonitorComparator());  displayCategory(node.getUserObject());}  }
class C{  public static void write(final GeomGridField gridField,Writer outputStream) throws IOException {  write(gridField,DEFAULT_NODATA_VALUE,outputStream);}  }
class C{  public static ScheduledExecutorService newSingleThreadScheduledExecutor(){  return wrap(Executors.newSingleThreadScheduledExecutor(newNamedThreadFactory(true)));}  }
class C{  @Override public int compare(final SemiCluster o1,final SemiCluster o2){  if (o1.score < o2.score) {    return -1;  } else   if (o1.score > o2.score) {    return 1;  } else {    if (!o1.equals(o2)) {      return 1;    }  }  return 0;}  }
class C{  public boolean hasNameSuffix(){  return super.hasElement(NameSuffix.KEY);}  }
class C{  public boolean isShadowMM(){  return shadowMM;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeattributenodename.class,args);}  }
class C{  public Collection values(){  if (values == null)   values=Collections.synchronizedCollection(new ValueCollection(),this);  return values;}  }
class C{  public boolean hasValueString(){  return super.hasAttribute(VALUE_STRING);}  }
class C{  public synchronized void put(int taskId,ReplDBMSEvent event) throws InterruptedException, ReplicatorException {  boolean needsSync=false;  DBMSEvent dbmsEvent=event.getDBMSEvent();  if (dbmsEvent == null | dbmsEvent instanceof DBMSEmptyEvent || dbmsEvent.getData().size() == 0) {    discardCount++;    return;  }  PartitionerResponse response=partitioner.partition(event,taskId);  if (response.isCritical() && (criticalPartition != response.getPartition())) {    serializationCount++;    blockToZero();    criticalPartition=response.getPartition();    if (logger.isDebugEnabled()) {      logger.debug("Enabling critical partition: partition=" + criticalPartition + " seqno="+ event.getSeqno());    }  } else   if (!response.isCritical() && criticalPartition > 0) {    blockToZero();    criticalPartition=-1;    if (logger.isDebugEnabled()) {      logger.debug("Ending critical partition: seqno=" + event.getSeqno());    }  }  queues.get(response.getPartition()).put(event);  long size=activeSize.incrAndGetSeqno();  transactionCount++;  if (logger.isDebugEnabled()) {    logger.debug("Placed event in queue: seqno=" + event.getSeqno() + " partition="+ response.getPartition()+ " activeSize="+ size);    if (transactionCount % 10000 == 0)     logger.debug("Queue store: xacts=" + transactionCount + " size="+ queues.size()+ " activeSize="+ size);  }  this.lastInsertedEvent=event;  if (event.getLastFrag() && stopRequested) {    putControlEvent(ReplControlEvent.STOP,event);    stopRequested=false;    if (logger.isDebugEnabled()) {      logger.debug("Added stop control event after log event: seqno=" + event.getSeqno());    }  }  if (event.getLastFrag() && watchPredicates.size() > 0) {    List<WatchPredicate<ReplDBMSHeader>> removeList=new ArrayList<WatchPredicate<ReplDBMSHeader>>();    for (    WatchPredicate<ReplDBMSHeader> predicate : watchPredicates) {      if (predicate.match(event)) {        needsSync=true;        removeList.add(predicate);      }    }    watchPredicates.removeAll(removeList);  }  if (syncEnabled && syncCounter >= syncInterval) {    needsSync=true;    syncCounter=1;  } else   syncCounter++;  if (!needsSync && event.getDBMSEvent().getMetadataOptionValue(ReplOptionParams.HEARTBEAT) != null) {    needsSync=true;  }  if (needsSync) {    putControlEvent(ReplControlEvent.SYNC,event);    if (logger.isDebugEnabled()) {      logger.debug("Added sync control event after log event: seqno=" + event.getSeqno());    }  }}  }
class C{  public double toReal(){  return _real;}  }
class C{  @SuppressWarnings("unchecked") public SymmetricalWordAlignment wordAlign(Sequence<IString> source,int sourceInputId,int threadId,Sequence<IString> target,InputProperties inputProperties){  Objects.requireNonNull(source);  Objects.requireNonNull(target);  if (threadId < 0 || threadId >= numThreads)   throw new IndexOutOfBoundsException("Thread id out of bounds: " + String.valueOf(threadId));  if (sourceInputId < 0)   throw new IndexOutOfBoundsException("Source id must be non-negative: " + String.valueOf(sourceInputId));  final TimeKeeper timer=TimingUtils.start();  if (wrapBoundary)   source=Sequences.wrapStartEnd(source,TokenUtils.START_TOKEN,TokenUtils.END_TOKEN);  if (inputProperties.containsKey(InputProperty.ForegroundTM)) {    final TranslationModel<IString,String> tm=(TranslationModel<IString,String>)inputProperties.get(InputProperty.ForegroundTM);    tm.setFeaturizer(featurizer);    tm.setName(TM_FOREGROUND_NAME);    logger.info("Configured foreground translation model for thread {}: {}",threadId,tm.getName());  }  if (inputProperties.containsKey(InputProperty.ModelWeights)) {    final Counter<String> weights=(Counter<String>)inputProperties.get(InputProperty.ModelWeights);    this.scorers.get(threadId).updateWeights(weights);    logger.info("Loaded decoder-local weights for thread {}",threadId);  } else {    this.scorers.get(threadId).updateWeights(this.globalModel);  }  timer.mark("setup");  final SymmetricalWordAlignment alignment=inferers.get(threadId).wordAlign(source,target,sourceInputId,inputProperties);  timer.mark("alignment");  logger.info("Alignment timing: {}",timer);  return alignment;}  }
class C{  public Client connect(URL url,ChannelHandler listener) throws RemotingException {  return new NettyClient(url,listener);}  }
class C{  private int computeRelevance(){  final int R_DEFAULT=0;  final int R_INTERESTING=5;  final int R_CASE=10;  final int R_NON_RESTRICTED=3;  final int R_EXACT_NAME=4;  final int R_INLINE_TAG=31;  int base=R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED;  try {    if (fContext instanceof DocumentTemplateContext) {      DocumentTemplateContext templateContext=(DocumentTemplateContext)fContext;      Document document=templateContext.getDocument();      String content=document.get(fRegion.getOffset(),fRegion.getLength());      if (fTemplate.getName().startsWith(content)) {        base+=R_CASE;      }      if (fTemplate.getName().equalsIgnoreCase(content)) {        base+=R_EXACT_NAME;      }      if (fContext instanceof JavaDocContext) {        base+=R_INLINE_TAG;      }    }  } catch (  BadLocationException e) {  }  final int TEMPLATE_RELEVANCE=1;  return base * 16 + TEMPLATE_RELEVANCE;}  }
class C{  public EdgeLayout(){  this(0.0,0.0);}  }
class C{  private void parseC3I(Element c3iTag,Entity entity){  NodeList nl=c3iTag.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node currNode=nl.item(i);    if (currNode.getParentNode() != c3iTag) {      continue;    }    int nodeType=currNode.getNodeType();    if (nodeType == Node.ELEMENT_NODE) {      Element currEle=(Element)currNode;      String nodeName=currNode.getNodeName();      if (nodeName.equalsIgnoreCase(C3ILINK)) {        String link=currEle.getAttribute(LINK);        int pos=entity.getFreeC3iUUID();        if ((link.length() > 0) && (pos != -1)) {          System.out.println("Loading C3i UUID " + pos + ": "+ link);          entity.setC3iNextUUIDAsString(pos,link);        }      }    } else {      continue;    }  }}  }
class C{  public List<Auditoria> logsUsuario(int id){  List<Auditoria> dados=new ArrayList<>();  try {    String sql="SELECT log.id_auditoria, log.acao, log.data, log.descricao, usuario.nome FROM tb_auditoria AS log, tb_usuario AS usuario " + "WHERE log.fk_usuario = usuario.id_usuario AND log.fk_usuario = ? ";    stm=conector.prepareStatement(sql);    stm.setInt(1,id);    rs=stm.executeQuery(sql);    while (rs.next()) {      Auditoria logs=new Auditoria(rs.getInt(1),rs.getString(2),Tempo.toDate(rs.getTimestamp(3)),rs.getString(4),null);      logs.setUser(new Usuario(rs.getInt(5),rs.getString(6)));      dados.add(logs);    }    stm.close();    rs.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao consultar logs na base de dados! \n" + ex);  }  return dados;}  }
class C{  protected void sendTestMessage(NceMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  public static ConditionalTransferEntropyCalculatorDiscrete newInstance(int base,int history,int numOtherInfoContributors){  return new ConditionalTransferEntropyCalculatorDiscrete(base,history,numOtherInfoContributors);}  }
class C{  protected int numNodes(){  int c=1;  if (this.l != null) {    c+=l.numNodes();  }  if (this.r != null) {    c+=r.numNodes();  }  return c;}  }
class C{  protected double generateAttributeValue(Instances data,int index,double classVal) throws Exception {  double result=Double.NaN;switch (data.attribute(index).type()) {case Attribute.NUMERIC:    result=classVal * 4 + m_Random.nextFloat() * 1 - 0.5;  break;case Attribute.NOMINAL:if (m_Random.nextFloat() < 0.2) {  result=Math.abs(m_Random.nextInt()) % data.attribute(index).numValues();} else {  result=((int)classVal) % data.attribute(index).numValues();}break;case Attribute.STRING:String str="";for (int n=0; n < m_Words.length; n++) {if ((n > 0) && (m_WordSeparators.length() != 0)) {str+=m_WordSeparators.charAt(m_Random.nextInt(m_WordSeparators.length()));}str+=m_Words[m_Random.nextInt(m_Words.length)];}result=data.attribute(index).addStringValue(str);break;case Attribute.DATE:result=data.attribute(index).parseDate((2000 + m_Random.nextInt(100)) + "-01-01");break;case Attribute.RELATIONAL:Instances rel=new Instances(data.attribute(index).relation(),0);for (int n=0; n < getNumInstancesRelational(); n++) {Instance inst=new DenseInstance(rel.numAttributes());inst.setDataset(data);for (int i=0; i < rel.numAttributes(); i++) {inst.setValue(i,generateAttributeValue(rel,i,0));}rel.add(inst);}result=data.attribute(index).addRelation(rel);break;}return result;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T cast(final Object o){  return (T)o;}  }
class C{  public void eventParser(Reader r) throws IOException {  eventParser=true;  parseTagContent(null,r);}  }
class C{  public CharSequence loadDescription(PackageManager pm){  if (nonLocalizedDescription != null) {    return nonLocalizedDescription;  }  if (descriptionRes != 0) {    CharSequence label=pm.getText(packageName,descriptionRes,null);    if (label != null) {      return label;    }  }  return null;}  }
class C{  private void print(String prefix){  System.out.println(prefix + "id=" + id+ ", name="+ name);  for (  Proc child : children) {    child.print(prefix + "    ");  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public NullProfile(@Nonnull File path) throws IOException {  super(path,false);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active") && !System.getenv().containsKey("SPRING_PROFILES_ACTIVE")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  protected RemoteCommand(Connection connection,String node,String jid){  super();  this.connection=connection;  this.jid=jid;  this.setNode(node);  this.packetReplyTimeout=SmackConfiguration.getPacketReplyTimeout();}  }
class C{  Class<?> loadClass(String className,ClassLoader cl) throws ClassNotFoundException {  Class<?> cls=Class.forName(className,true,cl);  return cls;}  }
class C{  protected AbstractChronology(){}  }
class C{  final Node succ(Node p){  Node next=p.next;  return (p == next) ? head : next;}  }
class C{  public static Image dropshadow(Image source,int blurRadius,float opacity,int xDistance,int yDistance){  Image s=dropshadow(source,blurRadius,opacity);  Image n=Image.createImage(source.getWidth() + Math.abs(xDistance),source.getHeight() + Math.abs(yDistance),0);  Graphics g=n.getGraphics();  int shadowX=0, imageX=0, shadowY=0, imageY=0;  if (xDistance < 0) {    imageX=xDistance * -1;  } else {    shadowX=xDistance;  }  if (yDistance < 0) {    imageY=yDistance * -1;  } else {    shadowY=yDistance;  }  g.drawImage(s,shadowX,shadowY);  g.drawImage(source,imageX,imageY);  return n;}  }
class C{  public void removeParamPanel(AbstractParamPanel panel){  this.getJSplitPane().removeParamPanel(panel);}  }
class C{  public Clock(boolean start,int format){  m_Running=false;  m_Start=0;  m_Stop=0;  m_UseCpuTime=true;  setOutputFormat(format);  if (start)   start();}  }
class C{  public static byte[] toByteArray(final File file) throws DSSException {  if (file == null) {    throw new NullPointerException();  }  try {    final byte[] bytes=readFileToByteArray(file);    return bytes;  } catch (  IOException e) {    throw new DSSException(e);  }}  }
class C{  public static ExceptionMessage translateExceptionMessage(String code) throws MessageTranslatorException {  return translateExceptionMessage(code,null);}  }
class C{  public CannotInvokeException(String reason){  super(reason);}  }
class C{  public boolean equals(SimpleTrigger that){  if (that == null) {    return false;  }  boolean this_present_triggerId=true & this.isSetTriggerId();  boolean that_present_triggerId=true & that.isSetTriggerId();  if (this_present_triggerId || that_present_triggerId) {    if (!(this_present_triggerId && that_present_triggerId)) {      return false;    }    if (this.triggerId != that.triggerId) {      return false;    }  }  boolean this_present_triggerName=true & this.isSetTriggerName();  boolean that_present_triggerName=true & that.isSetTriggerName();  if (this_present_triggerName || that_present_triggerName) {    if (!(this_present_triggerName && that_present_triggerName)) {      return false;    }    if (!this.triggerName.equals(that.triggerName)) {      return false;    }  }  boolean this_present_createTime=true & this.isSetCreateTime();  boolean that_present_createTime=true & that.isSetCreateTime();  if (this_present_createTime || that_present_createTime) {    if (!(this_present_createTime && that_present_createTime)) {      return false;    }    if (this.createTime != that.createTime) {      return false;    }  }  boolean this_present_operatorId=true & this.isSetOperatorId();  boolean that_present_operatorId=true & that.isSetOperatorId();  if (this_present_operatorId || that_present_operatorId) {    if (!(this_present_operatorId && that_present_operatorId)) {      return false;    }    if (this.operatorId != that.operatorId) {      return false;    }  }  boolean this_present_triggerType=true & this.isSetTriggerType();  boolean that_present_triggerType=true & that.isSetTriggerType();  if (this_present_triggerType || that_present_triggerType) {    if (!(this_present_triggerType && that_present_triggerType)) {      return false;    }    if (!this.triggerType.equals(that.triggerType)) {      return false;    }  }  boolean this_present_beginTime=true & this.isSetBeginTime();  boolean that_present_beginTime=true & that.isSetBeginTime();  if (this_present_beginTime || that_present_beginTime) {    if (!(this_present_beginTime && that_present_beginTime)) {      return false;    }    if (this.beginTime != that.beginTime) {      return false;    }  }  boolean this_present_endTime=true & this.isSetEndTime();  boolean that_present_endTime=true & that.isSetEndTime();  if (this_present_endTime || that_present_endTime) {    if (!(this_present_endTime && that_present_endTime)) {      return false;    }    if (this.endTime != that.endTime) {      return false;    }  }  boolean this_present_times=true & this.isSetTimes();  boolean that_present_times=true & that.isSetTimes();  if (this_present_times || that_present_times) {    if (!(this_present_times && that_present_times)) {      return false;    }    if (this.times != that.times) {      return false;    }  }  boolean this_present_executeInterval=true & this.isSetExecuteInterval();  boolean that_present_executeInterval=true & that.isSetExecuteInterval();  if (this_present_executeInterval || that_present_executeInterval) {    if (!(this_present_executeInterval && that_present_executeInterval)) {      return false;    }    if (this.executeInterval != that.executeInterval) {      return false;    }  }  boolean this_present_intervalUnit=true & this.isSetIntervalUnit();  boolean that_present_intervalUnit=true & that.isSetIntervalUnit();  if (this_present_intervalUnit || that_present_intervalUnit) {    if (!(this_present_intervalUnit && that_present_intervalUnit)) {      return false;    }    if (!this.intervalUnit.equals(that.intervalUnit)) {      return false;    }  }  return true;}  }
class C{  public static double computeNestedDuration(InvocationSequenceData data){  if (data.getNestedSequences().isEmpty()) {    return 0;  }  double nestedDuration=0d;  boolean added=false;  for (  InvocationSequenceData nestedData : data.getNestedSequences()) {    if (hasTimerData(nestedData)) {      nestedDuration=nestedDuration + nestedData.getTimerData().getDuration();      added=true;    } else     if (hasSQLData(nestedData)) {      nestedDuration=nestedDuration + nestedData.getSqlStatementData().getDuration();      added=true;    }    if (!added && !nestedData.getNestedSequences().isEmpty()) {      nestedDuration=nestedDuration + computeNestedDuration(nestedData);    }    added=false;  }  return nestedDuration;}  }
class C{  public void generate(ExtensionProfile extProfile,XmlWriter xw) throws IOException {  GenerateUtil.generateAtom(xw,currentEntry,extProfile);}  }
class C{  public static void rgb2hsl(int[] rgb,float[] hsl){  float h, s, l;  int maxVar;  float max, min;  float r=rgb[RED] / 255f;  float g=rgb[GREEN] / 255f;  float b=rgb[BLUE] / 255f;  if (r > g) {    max=r;    min=g;    maxVar=RED;  } else {    max=g;    min=r;    maxVar=GREEN;  }  if (b > max) {    max=b;    maxVar=BLUE;  } else   if (b < min) {    min=b;  }  l=(max + min) / 2;  float diff=max - min;  if (diff < Algebra.EPSILON) {    s=0;    h=0;  } else {    if (l < 0.5f) {      s=diff / (max + min);    } else {      s=diff / (2 - max - min);    }    if (maxVar == RED) {      h=(g - b) / diff;    } else     if (maxVar == GREEN) {      h=2f + (b - r) / diff;    } else {      h=4f + (r - g) / diff;    }    h/=6f;  }  hsl[0]=h;  hsl[1]=s;  hsl[2]=l;}  }
class C{  @Override public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException {  getDelegate().write(buffer,offset,length,isEnd);  logStream().write(buffer,offset,length);}  }
class C{  public StringVal(String str){  this.str=str;  hashcode=str.toLowerCase().hashCode();}  }
class C{  private void computeFiBuffer(){  for (int i=0; i < this.values[this.currentVar1].length + 1; i++) {    this.currentFiBuffer[i][0]=0.;    if (i == 0) {      for (int j=1; j < this.values[this.currentVar2].length + 1; j++) {        this.currentFiBuffer[i][j]=0.;      }    } else     if (i < this.values[this.currentVar1].length) {      for (int j=1; j < this.values[this.currentVar2].length + 1; j++) {        if (j < this.values[this.currentVar2].length) {          this.currentFiBuffer[i][j]=ProbUtils.biNormalCdf(this.thresholds[this.currentVar1][i - 1],this.thresholds[this.currentVar2][j - 1],this.currentRho);        } else {          this.currentFiBuffer[i][j]=ProbUtils.normalCdf(this.thresholds[this.currentVar1][i - 1]);        }      }    } else {      for (int j=1; j < this.values[this.currentVar2].length + 1; j++) {        if (j < this.values[this.currentVar2].length) {          this.currentFiBuffer[i][j]=ProbUtils.normalCdf(this.thresholds[this.currentVar2][j - 1]);        } else {          this.currentFiBuffer[i][j]=1.;        }      }    }  }}  }
class C{  public void fillRandomArticles(final Map<String,Object> dataModel) throws Exception {  dataModel.put(Common.SIDE_RANDOM_ARTICLES,articleQueryService.getRandomArticles(Symphonys.getInt("sideRandomArticlesCnt")));}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  ProcessorCharacters charProcessor=(ProcessorCharacters)handler.getProcessorFor(null,"text()","text");  charProcessor.setXslTextElement((ElemText)elem);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(elem);  elem.setDOMBackPointer(handler.getOriginatingNode());}  }
class C{  public static String formatCurrency(long value,Currency currency){  return formatCurrency((double)value,currency);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Message))   return false;  if (obj == this)   return true;  Message msg=(Message)obj;  if (msg.getMessageType() != getMessageType())   return false;  if (msg.getDataLength() != getDataLength())   return false;  for (  Attribute localAtt : attributes.values()) {    if (!localAtt.equals(msg.getAttribute(localAtt.getAttributeType())))     return false;  }  return true;}  }
class C{  public EclipseGitProgressTransformer(final IProgressMonitor eclipseMonitor){  root=eclipseMonitor;}  }
class C{  public void put(int idx,Value v,int i,boolean prio){  values[idx]=v;  indexes[idx]=i;  priorities[idx]=prio;}  }
class C{  public int indexOf(final ColumnItem item){  return this.children.indexOf(item);}  }
class C{  public String toString(){  return name.toString();}  }
class C{  public static <T>SortedSet<T> minus(SortedSet<T> self,Iterable<?> removeMe){  return (SortedSet<T>)minus((Set<T>)self,removeMe);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public Vector2f subtractLocal(float valX,float valY){  x-=valX;  y-=valY;  return this;}  }
class C{  protected void addBeanProps(DeserializationConfig config,BasicBeanDescription beanDesc,BeanDeserializerBuilder builder) throws JsonMappingException {  List<BeanPropertyDefinition> props=beanDesc.findProperties();  AnnotationIntrospector intr=config.getAnnotationIntrospector();  boolean ignoreAny=false;{    Boolean B=intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());    if (B != null) {      ignoreAny=B.booleanValue();      builder.setIgnoreUnknownProperties(ignoreAny);    }  }  Set<String> ignored=ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));  for (  String propName : ignored) {    builder.addIgnorable(propName);  }  AnnotatedMethod anySetter=beanDesc.findAnySetter();{    Collection<String> ignored2=(anySetter == null) ? beanDesc.getIgnoredPropertyNames() : beanDesc.getIgnoredPropertyNamesForDeser();    if (ignored2 != null) {      for (      String propName : ignored2) {        builder.addIgnorable(propName);      }    }  }  HashMap<Class<?>,Boolean> ignoredTypes=new HashMap<Class<?>,Boolean>();  for (  BeanPropertyDefinition property : props) {    String name=property.getName();    if (ignored.contains(name)) {      continue;    }    if (property.hasConstructorParameter()) {      builder.addCreatorProperty(property);      continue;    }    if (property.hasSetter()) {      AnnotatedMethod setter=property.getSetter();      Class<?> type=setter.getParameterClass(0);      if (isIgnorableType(config,beanDesc,type,ignoredTypes)) {        builder.addIgnorable(name);        continue;      }      SettableBeanProperty prop=constructSettableProperty(config,beanDesc,name,setter);      if (prop != null) {        builder.addProperty(prop);      }      continue;    }    if (property.hasField()) {      AnnotatedField field=property.getField();      Class<?> type=field.getRawType();      if (isIgnorableType(config,beanDesc,type,ignoredTypes)) {        builder.addIgnorable(name);        continue;      }      SettableBeanProperty prop=constructSettableProperty(config,beanDesc,name,field);      if (prop != null) {        builder.addProperty(prop);      }    }  }  if (anySetter != null) {    builder.setAnySetter(constructAnySetter(config,beanDesc,anySetter));  }  if (config.isEnabled(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS)) {    for (    BeanPropertyDefinition property : props) {      if (property.hasGetter()) {        String name=property.getName();        if (builder.hasProperty(name) || ignored.contains(name)) {          continue;        }        AnnotatedMethod getter=property.getGetter();        Class<?> rt=getter.getRawType();        if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {          if (!ignored.contains(name) && !builder.hasProperty(name)) {            builder.addProperty(constructSetterlessProperty(config,beanDesc,name,getter));          }        }      }    }  }}  }
class C{  public static boolean isWeakKey(byte[] key,int offset,int length){  for (int i=offset; i < length; i+=DES_KEY_LENGTH) {    if (DESParameters.isWeakKey(key,i)) {      return true;    }  }  return false;}  }
class C{  public void writeLinkedKml(final String filename,final KmlType kml){  if (filename.equals("doc.kml")) {    throw new IllegalArgumentException("The filename 'doc.kml' is reserved for the primary kml.");  }  if (filename.equals("main.kml")) {    throw new IllegalArgumentException("The filename 'main.kml' is reserved for the main kml.");  }  writeKml(filename,kml);}  }
class C{  public Diagnostic withDateTime(){  this.setDate(OffsetDateTime.now());  return this;}  }
class C{  private void generateFixedPartitionAttributes(String kind,List<FixedPartitionAttributes> allStaticAttrs) throws SAXException {  for (  FixedPartitionAttributes attr : allStaticAttrs) {    AttributesImpl sAtts=new AttributesImpl();    sAtts.addAttribute("","",PARTITION_NAME,"",attr.getPartitionName());    sAtts.addAttribute("","",IS_PRIMARY,"",String.valueOf(attr.isPrimary()));    sAtts.addAttribute("","",NUM_BUCKETS,"",String.valueOf(attr.getNumBuckets()));    handler.startElement("",kind,kind,sAtts);    handler.endElement("",kind,kind);  }}  }
class C{  public Organisation findPrimaryDoiAgencyAccount(){  for (  Organisation organisation : registration.getAssociatedOrganisations().values()) {    if (organisation.isAgencyAccountPrimary()) {      return organisation;    }  }  return null;}  }
class C{  public Tasks<FileShareRestRep> startFileContinuousCopies(URI id,FileReplicationParam input){  TaskList tasks=client.post(TaskList.class,input,getContinuousCopiesUrl() + "/start",id);  return new Tasks<FileShareRestRep>(client,tasks.getTaskList(),FileShareRestRep.class);}  }
class C{  void addDuplicate(final Pair<RegionRestriction,RegionRestriction> duplicate){  if (mPloidy != Ploidy.HAPLOID) {    throw new IllegalArgumentException("Duplicate specified for sequence that isn't haploid.");  }  if (!duplicate.getA().getSequenceName().equals(mName) && !duplicate.getB().getSequenceName().equals(mName)) {    throw new IllegalArgumentException("Duplicate specified for incorrect sequence.");  }  final RegionRestriction checki=duplicate.getA().getSequenceName().equals(mName) ? duplicate.getA() : duplicate.getB();  final int sti=checki.getStart();  final int eni=checki.getEnd();  for (  final Pair<RegionRestriction,RegionRestriction> other : mDuplicates) {    final RegionRestriction checkj=other.getA().getSequenceName().equals(mName) ? other.getA() : other.getB();    final int stj=checkj.getStart();    final int enj=checkj.getEnd();    if (!(eni <= stj || enj <= sti)) {      throw new IllegalArgumentException("Overlapping regions detected: " + checki + ", and "+ checkj);    }  }  mDuplicates.add(duplicate);}  }
class C{  public void endRegisterInterestSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(registerInterestSendInProgressId,-1);  int endRegisterInterestSendId;  if (failed) {    endRegisterInterestSendId=registerInterestSendFailedId;  } else {    endRegisterInterestSendId=registerInterestSendId;  }  this.sendStats.incInt(endRegisterInterestSendId,1);  this.stats.incLong(registerInterestSendDurationId,duration);}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  public static StorageImageAsync create(String fileName,Image placeholder){  return new StorageImageAsync(fileName,placeholder);}  }
class C{  public void testCreateEmbeddedContainerWithSystemPropertiesSet() throws Exception {  org.codehaus.cargo.maven2.configuration.Container containerElement=setUpContainerElement(new EmbeddedLocalContainerStub());  Map<String,String> props=new HashMap<String,String>();  props.put("id1","value1");  props.put("id2","value2");  containerElement.setSystemProperties(props);  File systemPropertiesFile=File.createTempFile(ConfigurationTest.class.getName(),".properties");  try {    OutputStream outputStream=new FileOutputStream(systemPropertiesFile);    try {      Properties properties=new Properties();      properties.put("id2","foobar");      properties.put("id3","value3");      properties.store(outputStream,null);    }  finally {      outputStream.close();    }    containerElement.setSystemPropertiesFile(systemPropertiesFile);    containerElement.createContainer(new StandaloneLocalConfigurationStub("configuration/home"),new NullLogger(),createTestCargoProject("whatever"));  }  finally {    systemPropertiesFile.delete();  }  props.put("id3","value3");  for (  Map.Entry<String,String> entry : props.entrySet()) {    assertEquals(entry.getValue(),System.getProperty(entry.getKey()));  }}  }
class C{  public LocalCandidate findLocalCandidate(TransportAddress localAddress){  for (  LocalCandidate localCnd : localCandidates) {    if (localCnd.getTransportAddress().equals(localAddress))     return localCnd;  }  return null;}  }
class C{  public static void validateObjectKey(BaseVO obj){  if (!(obj.getKey() > 0)) {    IllegalArgumentException iae=new IllegalArgumentException();    logger.logError(Log4jLogger.SYSTEM_LOG,iae,LogMessageIdentifier.ERROR_PASSED_ENTITY_NOT_PERSISTED,obj.getClass().getSimpleName());    throw iae;  }}  }
class C{  protected boolean updateChildren(DocumentEvent.ElementChange ec,DocumentEvent e,ViewFactory f){  return false;}  }
class C{  @Override public boolean onUsed(RPEntity user){  if (!nextTo(user)) {    user.sendPrivateText("You cannot reach that from here.");    return false;  }  String sound=sounds[(int)(Math.random() * sounds.length)];  SoundEvent event=new SoundEvent(sound,radius,volume,SoundLayer.AMBIENT_SOUND);  this.addEvent(event);  this.notifyWorldAboutChanges();  return true;}  }
class C{  public static boolean isNumber(int c){  return (c >= 48 && c <= 57);}  }
class C{  void touch(boolean openReadOnly) throws IOException {  if (isReadOnly || openReadOnly) {    throw new IOException("Read only");  }  lastModified=System.currentTimeMillis();}  }
class C{  private void loadConfig(){  config.load();  spawnRadius=config.getInt(Key.SPAWN_RADIUS);  whitelistEnabled=config.getBoolean(Key.WHITELIST);  idleTimeout=config.getInt(Key.PLAYER_IDLE_TIMEOUT);  craftingManager.initialize();  warnState=WarningState.value(config.getString(Key.WARNING_STATE));  try {    defaultGameMode=GameMode.valueOf(config.getString(Key.GAMEMODE));  } catch (  IllegalArgumentException|NullPointerException e) {    defaultGameMode=GameMode.SURVIVAL;  }  defaultIcon=new GlowServerIcon();  try {    File file=config.getFile("server-icon.png");    if (file.isFile()) {      defaultIcon=new GlowServerIcon(file);    }  } catch (  Exception e) {    logger.log(Level.WARNING,"Failed to load server-icon.png",e);  }}  }
class C{  private boolean checkOptions(ServerInfo info){  LanguageInfo[] languages=info.getLanguageInfos();  String[] countryLangs=info.getCountryLanguages();  int i;  if (option.getLanguage() == null) {    i=0;    option.setLanguage(languages[0].getName());    System.out.println("Using default language: " + languages[0].getName());  } else {    for (i=0; i < languages.length; i++) {      if (option.getLanguage().equals(languages[i].getName()))       break;    }    if (i == languages.length) {      if (!option.getLanguage().equals("?"))       System.out.println("Unknown language: \"" + option.getLanguage() + "\"");      System.out.println("\nAvailable languages:");      for (i=0; i < languages.length; i++) {        System.out.println(" - \"" + languages[i].getName() + "\""+ (i == 0 ? " (default language)\n" : "\n")+ "   default minimum match length = "+ languages[i].getDefMinMatchLen()+ "\n   default suffixes: "+ arrayToString(languages[i].getSuffixes()));      }      return false;    }  }  if (suffixes == null) {    suffixes=languages[i].getSuffixes();    System.out.println("Using default suffixes: " + arrayToString(suffixes));  }  if (option.getTitle() == null)   option.setTitle("submission-" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()));  if (option.getCountryLang() == null)   option.setCountryLang("en"); else {    for (i=0; i < countryLangs.length; i++) {      if (option.getCountryLang().equals(countryLangs[i]))       break;    }    if (i == countryLangs.length) {      if (!option.getCountryLang().equals("?"))       System.out.println("Unknown country language: \"" + option.getCountryLang() + "\"");      System.out.println("\nAvailable country languages:");      for (i=0; i < countryLangs.length; i++) {        System.out.println(" - \"" + countryLangs[i] + (i == 0 ? "\" (default)" : "\""));      }      return false;    }  }  return true;}  }
class C{  public Matrix compute(Matrix loghyper,Matrix X){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final double s2=Math.exp(2 * loghyper.get(0,0));  Matrix K=Matrix.identity(X.getRowDimension(),X.getRowDimension()).times(s2);  return K;}  }
class C{  public static CachedDeserializable create(Object object,int serializedSize){  if (STORE_ALL_VALUE_FORMS) {    return new StoreAllCachedDeserializable(object);  } else   if (PREFER_DESERIALIZED) {    if (object instanceof PdxInstance && cachePrefersPdx()) {      return new PreferBytesCachedDeserializable(object);    } else {      return new VMCachedDeserializable(object,serializedSize);    }  } else {    return new PreferBytesCachedDeserializable(object);  }}  }
class C{  public String minimumFrequencyTipText(){  return "The minimum frequency for a value to remain.";}  }
class C{  public void removeTransport(){  if (uriParms != null)   uriParms.delete(TRANSPORT);}  }
class C{  public byte ID(){  return 4;}  }
class C{  @Override public int read(){  return -1;}  }
class C{  protected void reloadSummaries(){  if (mSetPassword != null) {    if (mAdminActive) {      boolean sufficient=mDPM.isActivePasswordSufficient();      mSetPassword.setSummary(sufficient ? R.string.password_sufficient : R.string.password_insufficient);    } else {      mSetPassword.setSummary(null);    }  }}  }
class C{  public WriteAllLock acquireWriteAllLock(){  return new WriteAllLock();}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){}  }
class C{  public void forceRescan(){  pauser.unpause();}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=table.length;  double oldTable[]=table;  int oldValues[]=values;  byte oldState[]=state;  double newTable[]=new double[newCapacity];  int newValues[]=new int[newCapacity];  byte newState[]=new byte[newCapacity];  this.lowWaterMark=chooseLowWaterMark(newCapacity,this.minLoadFactor);  this.highWaterMark=chooseHighWaterMark(newCapacity,this.maxLoadFactor);  this.table=newTable;  this.values=newValues;  this.state=newState;  this.freeEntries=newCapacity - this.distinct;  for (int i=oldCapacity; i-- > 0; ) {    if (oldState[i] == FULL) {      double element=oldTable[i];      int index=indexOfInsertion(element);      newTable[index]=element;      newValues[index]=oldValues[i];      newState[index]=FULL;    }  }}  }
class C{  public void load() throws IOException {  Properties proxyConfig=ConfigurationUtil.loadConfigurationProperties(PROXY_SETTINGS_FILENAME,null);  propsFile=new File(confDir,PROXY_SETTINGS_FILENAME);  props=ConfigurationUtil.loadConfigurationProperties(propsFile,proxyConfig);}  }
class C{  public static boolean supportsAdd(int type){switch (type) {case BYTE:case DECIMAL:case DOUBLE:case FLOAT:case INT:case LONG:case SHORT:    return true;default :  return false;}}  }
class C{  public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveFile(srcFile,new File(destDir,srcFile.getName()));}  }
class C{  boolean terminate(){  return (state == null) || state.terminate();}  }
class C{  public FileVersionInputStream inputStream(String id,int version){  return inputStream(id,version,ITx.UNISOLATED);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public PLLocalFileDownloader(Context context){  this(context,null,null);}  }
class C{  final public void shake(Collection<PointMatch> matches,float scale,float[] center){  double xd=0.0;  double yd=0.0;  int num_matches=matches.size();  if (num_matches > 0) {    for (    PointMatch m : matches) {      float[] m_p1=m.getP1().getW();      float[] m_p2=m.getP2().getW();      xd+=Math.abs(m_p1[0] - m_p2[0]);      ;      yd+=Math.abs(m_p1[1] - m_p2[1]);      ;    }    xd/=matches.size();    yd/=matches.size();  }  affine.translate(rnd.nextGaussian() * (float)xd * scale,rnd.nextGaussian() * (float)yd);}  }
class C{  public void dataStatusChanged(DataStatusEvent e){  log.fine("#" + m_vo.TabNo + " - "+ e.toString());  int oldCurrentRow=e.getCurrentRow();  m_DataStatusEvent=e;  String msg=m_DataStatusEvent.getAD_Message();  if (msg != null && msg.equals("Sorted"))   setCurrentRow(0,true);  m_DataStatusEvent=e;  m_DataStatusEvent.setCurrentRow(m_currentRow);  if (oldCurrentRow == m_currentRow) {    GridField field=m_mTable.getField(e.getChangedColumn());    if (field != null) {      Object value=m_mTable.getValueAt(m_currentRow,e.getChangedColumn());      field.setValue(value,m_mTable.isInserting());    }  } else   fireDataStatusChanged(m_DataStatusEvent);  m_lastDataStatusEventTime=System.currentTimeMillis();  m_lastDataStatusEvent=m_DataStatusEvent;  m_DataStatusEvent=null;}  }
class C{  public static int indexOf(char[] array,char value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public void updateView(boolean resetViewer){  if (fParentComposite != null) {    if (fCallHierarchy == null) {      showEmptyPage();    } else {      if (resetViewer)       resetViewer();      showPage(PAGE_VIEWER);      setContentDescription(fCallHierarchy.getDescription());      fTreeViewer.setInput(fCallHierarchy);    }  }}  }
class C{  private static Boolean isAlphanumeric(final String label){  boolean status=false;  if (StringUtils.isNotEmpty(label)) {    Matcher matcher=patternAlphanumeric.matcher(label);    status=matcher.matches();  }  return status;}  }
class C{  public List<URIMetadataNode> query(QueryParams query){  if (!query.isLocal() && !MemoryControl.shortStatus()) {    List<URIMetadataNode> sdl=new ArrayList<URIMetadataNode>();    Set<AbstractFederateSearchConnector> picklist=getBest(query);    for (    AbstractFederateSearchConnector fsc : picklist) {      sdl.addAll(fsc.query(query));    }    return sdl;  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element cdataName;  NodeList childList;  Node child;  String cdataNodeValue;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  cdataName=(Element)elementList.item(1);  childList=cdataName.getChildNodes();  child=childList.item(1);  if ((child == null)) {    child=doc.createCDATASection("This is a CDATASection with EntityReference number 2 &ent2;");  }  cdataNodeValue=child.getNodeValue();  assertEquals("value","This is a CDATASection with EntityReference number 2 &ent2;",cdataNodeValue);}  }
class C{  public void trimToSize(){  final char[] v=new char[this.length];  System.arraycopy(this.buffer,this.offset,v,0,this.length);  this.buffer=v;}  }
class C{  private void postPlugin(final boolean isPing) throws IOException {  String pluginName=modName;  boolean onlineMode=MinecraftServer.getServer().isServerInOnlineMode();  String pluginVersion=modVersion;  String serverVersion;  if (MinecraftServer.getServer().isDedicatedServer()) {    serverVersion="MinecraftForge (MC: " + MinecraftServer.getServer().getMinecraftVersion() + ")";  } else {    serverVersion="MinecraftForgeSSP (MC: " + MinecraftServer.getServer().getMinecraftVersion() + ")";  }  int playersOnline=MinecraftServer.getServer().getCurrentPlayerCount();  StringBuilder json=new StringBuilder(1024);  json.append('{');  appendJSONPair(json,"guid",guid);  appendJSONPair(json,"plugin_version",pluginVersion);  appendJSONPair(json,"server_version",serverVersion);  appendJSONPair(json,"players_online",Integer.toString(playersOnline));  String osname=System.getProperty("os.name");  String osarch=System.getProperty("os.arch");  String osversion=System.getProperty("os.version");  String java_version=System.getProperty("java.version");  int coreCount=Runtime.getRuntime().availableProcessors();  if (osarch.equals("amd64")) {    osarch="x86_64";  }  appendJSONPair(json,"osname",osname);  appendJSONPair(json,"osarch",osarch);  appendJSONPair(json,"osversion",osversion);  appendJSONPair(json,"cores",Integer.toString(coreCount));  appendJSONPair(json,"auth_mode",onlineMode ? "1" : "0");  appendJSONPair(json,"java_version",java_version);  if (isPing) {    appendJSONPair(json,"ping","1");  }  json.append('}');  URL url=new URL(BASE_URL + String.format(REPORT_URL,urlEncode(pluginName)));  URLConnection connection;  if (isMineshafterPresent()) {    connection=url.openConnection(Proxy.NO_PROXY);  } else {    connection=url.openConnection();  }  byte[] uncompressed=json.toString().getBytes();  byte[] compressed=gzip(json.toString());  connection.addRequestProperty("User-Agent","MCStats/" + REVISION);  connection.addRequestProperty("Content-Type","application/json");  connection.addRequestProperty("Content-Encoding","gzip");  connection.addRequestProperty("Content-Length",Integer.toString(compressed.length));  connection.addRequestProperty("Accept","application/json");  connection.addRequestProperty("Connection","close");  connection.setDoOutput(true);  OutputStream os=connection.getOutputStream();  os.write(compressed);  os.flush();  final BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));  String response=reader.readLine();  os.close();  reader.close();  if (response == null || response.startsWith("ERR") || response.startsWith("7")) {    if (response == null) {      response="null";    } else     if (response.startsWith("7")) {      response=response.substring(response.startsWith("7,") ? 2 : 1);    }    throw new IOException(response);  }}  }
class C{  @Override HashMapEntry<K,V> constructorNewEntry(K key,V value,int hash,HashMapEntry<K,V> next){  LinkedEntry<K,V> header=this.header;  LinkedEntry<K,V> oldTail=header.prv;  LinkedEntry<K,V> newTail=new LinkedEntry<K,V>(key,value,hash,next,header,oldTail);  return oldTail.nxt=header.prv=newTail;}  }
class C{  public AbstractPreferencePagePresenter(String title,String category){  this.title=title;  this.category=category;}  }
class C{  private ViewTooltips(){}  }
class C{  protected void deleteActivitiDeployments(){  for (  Deployment deployment : activitiRepositoryService.createDeploymentQuery().list()) {    activitiRepositoryService.deleteDeployment(deployment.getId(),true);  }}  }
class C{  public void mark(int readAheadLimit) throws IOException {  if (readAheadLimit < 0)   throw new IllegalArgumentException("Read-ahead limit < 0");  mark=next;}  }
class C{  public Builder ignoreCount(@SuppressWarnings("hiding") int ignoreCount){  if (ignoreCount < 0) {    throw new IllegalArgumentException("IgnoreCount argument must be >= 0.");  }  this.ignoreCount=ignoreCount;  return this;}  }
class C{  public boolean equals(Object o){  if (NodeEqualityMode.getEqualityType() == NodeEqualityMode.Type.OBJECT) {    return o == this;  } else   if (NodeEqualityMode.getEqualityType() == NodeEqualityMode.Type.NAME) {    return o instanceof GraphNode && getName().equals(((Node)o).getName());  }  throw new IllegalStateException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:27.623 -0400",hash_original_method="20D8B14B6BFC4FB4889A48E862B05983",hash_generated_method="1E5FB026A49F9A9BED08F52829AB6E2E") private ComponentName findWebSearchActivity(ComponentName globalSearchActivity){  if (globalSearchActivity == null) {    return null;  }  Intent intent=new Intent(Intent.ACTION_WEB_SEARCH);  intent.setPackage(globalSearchActivity.getPackageName());  PackageManager pm=mContext.getPackageManager();  List<ResolveInfo> activities=pm.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);  if (activities != null && !activities.isEmpty()) {    ActivityInfo ai=activities.get(0).activityInfo;    return new ComponentName(ai.packageName,ai.name);  }  Log.w(LOG_TAG,"No web search activity found");  return null;}  }
class C{  public HashMap<String,String> propertiesForGID(int GID){  return tileProperties_.get(String.valueOf(GID));}  }
class C{  public final void writeDouble(double v) throws java.io.IOException {  return;}  }
class C{  public KeyStoreEntryDragGestureListener(KseFrame kseFrame){  this.kseFrame=kseFrame;}  }
class C{  public boolean hasVariable(String name){  return hasArgument("${" + name + "}");}  }
class C{  public void endBatch(long start,int numberOfEvents){  long ts=DistributionStats.getStatTime();  this.stats.incInt(batchesDistributedId,1);  this.stats.incInt(eventsDistributedId,numberOfEvents);  long elapsed=ts - start;  this.stats.incLong(batchDistributionTimeId,elapsed);}  }
class C{  @Override public void reset(URL url){  client.reset(url);}  }
class C{  public SepiaEffect(){}  }
class C{  public void init(String btxn,BusinessTxnConfig btc){  if (log.isLoggable(Level.FINE)) {    log.fine("ProcessManager: initialise btxn '" + btxn + "' config="+ btc+ " processors="+ btc.getProcessors().size());  }  if (btc.getProcessors() != null && !btc.getProcessors().isEmpty()) {    List<ProcessorWrapper> procs=new ArrayList<ProcessorWrapper>();    for (int i=0; i < btc.getProcessors().size(); i++) {      procs.add(new ProcessorWrapper(btc.getProcessors().get(i)));    }synchronized (processors) {      processors.put(btxn,procs);    }  } else {synchronized (processors) {      processors.remove(btxn);    }  }}  }
class C{  public void transitionWorkFlow(final PropertyImpl property){  final DateTime currentDate=new DateTime();  final User user=securityUtils.getCurrentUser();  final Assignment userAssignment=assignmentService.getPrimaryAssignmentForUser(user.getId());  Position pos=null;  Assignment wfInitiator=null;  String nature=getNatureOfTask();  if (!propertyByEmployee) {    currentState="Created";    final Assignment assignment=propertyService.getUserPositionByZone(property.getBasicProperty(),false);    if (null != assignment) {      approverPositionId=assignment.getPosition().getId();      approverName=(assignment.getEmployee().getName()).concat("~").concat(assignment.getPosition().getName());    }  } else {    currentState=null;    if (null != approverPositionId && approverPositionId != -1) {      Assignment assignment=assignmentService.getAssignmentsForPosition(approverPositionId,new Date()).get(0);      approverName=assignment.getEmployee().getName().concat("~").concat(assignment.getPosition().getName());    }  }  if (property.getId() != null)   wfInitiator=propertyService.getWorkflowInitiator(property); else   wfInitiator=propertyTaxCommonUtils.getWorkflowInitiatorAssignment(user.getId());  if (WFLOW_ACTION_STEP_REJECT.equalsIgnoreCase(workFlowAction)) {    if (wfInitiator.getPosition().equals(property.getState().getOwnerPosition())) {      property.transition(true).end().withSenderName(user.getUsername() + "::" + user.getName()).withComments(approverComments).withDateInfo(currentDate.toDate());      property.setStatus(STATUS_CANCELLED);      property.getBasicProperty().setUnderWorkflow(FALSE);    } else {      final String stateValue=property.getCurrentState().getValue().split(":")[0] + ":" + WF_STATE_REJECTED;      property.transition(true).withSenderName(user.getUsername() + "::" + user.getName()).withComments(approverComments).withStateValue(stateValue).withDateInfo(currentDate.toDate()).withOwner(wfInitiator != null ? wfInitiator.getPosition() : null).withNextAction(property.getBasicProperty().getSource().equals(SOURCEOFDATA_MOBILE) ? UD_REVENUE_INSPECTOR_APPROVAL_PENDING : WF_STATE_ASSISTANT_APPROVAL_PENDING);    }  } else {    if (null != approverPositionId && approverPositionId != -1)     pos=(Position)persistenceService.find("from Position where id=?",approverPositionId); else     if (WFLOW_ACTION_STEP_APPROVE.equalsIgnoreCase(workFlowAction))     pos=positionMasterService.getPositionByUserId(securityUtils.getCurrentUser().getId()); else     pos=wfInitiator.getPosition();    if (null == property.getState()) {      final WorkFlowMatrix wfmatrix=propertyWorkflowService.getWfMatrix(property.getStateType(),null,null,getAdditionalRule(),currentState,null);      property.transition().start().withSenderName(user.getUsername() + "::" + user.getName()).withComments(approverComments).withStateValue(wfmatrix.getNextState()).withDateInfo(currentDate.toDate()).withOwner(pos).withNextAction(wfmatrix.getNextAction()).withNatureOfTask(nature).withInitiator(wfInitiator != null ? wfInitiator.getPosition() : null);    } else     if (property.getCurrentState().getNextAction().equalsIgnoreCase("END"))     property.transition(true).end().withSenderName(user.getUsername() + "::" + user.getName()).withComments(approverComments).withDateInfo(currentDate.toDate()); else {      final WorkFlowMatrix wfmatrix=propertyWorkflowService.getWfMatrix(property.getStateType(),null,null,getAdditionalRule(),property.getCurrentState().getValue(),null);      property.transition(true).withSenderName(user.getUsername() + "::" + user.getName()).withComments(approverComments).withStateValue(wfmatrix.getNextState()).withDateInfo(currentDate.toDate()).withOwner(pos).withNextAction(wfmatrix.getNextAction());    }  }  if (approverName != null && !approverName.isEmpty() && !approverName.equalsIgnoreCase("----Choose----")) {    final String approvalmesg=" Succesfully Forwarded to : ";    ackMessage=ackMessage == null ? approvalmesg : ackMessage + approvalmesg;  } else   if (workFlowAction != null && workFlowAction.equalsIgnoreCase("cancel")) {    final String approvalmesg=" Succesfully Cancelled.";    ackMessage=ackMessage == null ? approvalmesg : ackMessage + approvalmesg;  }  LOGGER.debug("Exiting method : transitionWorkFlow");}  }
class C{  public static GeoParsedPoint parse(final String uriString){  URI uri;  try {    uri=URI.create(uriString.replaceAll("\\s+","+").replaceAll("%20","+").replaceAll("%2C",",").replaceAll("\\|",";"));  } catch (  IllegalArgumentException e) {    return null;  }  String scheme=uri.getScheme();  if (scheme == null)   return null; else   scheme=scheme.toLowerCase(Locale.US);  if ("http".equals(scheme) || "https".equals(scheme)) {    String host=uri.getHost();    if (host == null)     return null; else     host=host.toLowerCase(Locale.US);    String path=uri.getPath();    if (path == null) {      path="";    }    String fragment=uri.getFragment();    Set<String> simpleDomains=new HashSet<String>();    simpleDomains.add("osmand.net");    simpleDomains.add("www.osmand.net");    simpleDomains.add("download.osmand.net");    simpleDomains.add("openstreetmap.de");    simpleDomains.add("www.openstreetmap.de");    final Pattern commaSeparatedPairPattern=Pattern.compile("(?:loc:)?([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)");    try {      if (host.equals("osm.org") || host.endsWith("openstreetmap.org")) {        Pattern p;        Matcher matcher;        if (path.startsWith("/go/")) {          p=Pattern.compile("^/go/([A-Za-z0-9_@~]+-*)(?:.*)");          matcher=p.matcher(path);          if (matcher.matches()) {            return MapUtils.decodeShortLinkString(matcher.group(1));          }        } else {          double lat=0;          double lon=0;          int zoom=GeoParsedPoint.NO_ZOOM;          if (fragment != null) {            if (fragment.startsWith("map=")) {              fragment=fragment.substring("map=".length());            }            String[] vls=fragment.split("/");            if (vls.length >= 3) {              zoom=parseZoom(vls[0]);              lat=parseSilentDouble(vls[1]);              lon=parseSilentDouble(vls[2]);            }          }          String mlat=getQueryParameter("mlat",uri);          if (mlat != null) {            lat=parseSilentDouble(mlat);          }          String mlon=getQueryParameter("mlon",uri);          if (mlon != null) {            lon=parseSilentDouble(mlon);          }          return new GeoParsedPoint(lat,lon,zoom);        }      } else       if (host.startsWith("map.baidu.")) {        Map<String,String> params=getQueryParameters(uri);        String zm=params.get("l");        String[] vls=silentSplit(params.get("c"),",");        if (vls != null && vls.length >= 2) {          double lat=parseSilentInt(vls[0]) / 100000.;          double lon=parseSilentInt(vls[1]) / 100000.;          int zoom=parseZoom(zm);          return new GeoParsedPoint(lat,lon,zoom);        }      } else       if (simpleDomains.contains(host)) {        Map<String,String> params=getQueryParameters(uri);        if (uri.getQuery() == null && params.size() == 0) {          params=getQueryParameters(path.substring(1));        }        if (params.containsKey("lat") && params.containsKey("lon")) {          final double lat=parseSilentDouble(params.get("lat"));          final double lon=parseSilentDouble(params.get("lon"));          int zoom=GeoParsedPoint.NO_ZOOM;          if (params.containsKey("z")) {            zoom=parseZoom(params.get("z"));          } else           if (params.containsKey("zoom")) {            zoom=parseZoom(params.get("zoom"));          }          return new GeoParsedPoint(lat,lon,zoom);        }      } else       if (host.matches("(?:www\\.)?(?:maps\\.)?yandex\\.[a-z]+")) {        Map<String,String> params=getQueryParameters(uri);        String ll=params.get("ll");        if (ll != null) {          Matcher matcher=commaSeparatedPairPattern.matcher(ll);          if (matcher.matches()) {            String z=String.valueOf(parseZoom(params.get("z")));            return new GeoParsedPoint(matcher.group(1),matcher.group(2),z,params.get("text"));          }        }      } else       if (host.matches("(?:www\\.)?(?:maps\\.)?google\\.[a-z.]+")) {        String latString=null;        String lonString=null;        String z=String.valueOf(GeoParsedPoint.NO_ZOOM);        Map<String,String> params=getQueryParameters(uri);        if (params.containsKey("q")) {          Matcher matcher=commaSeparatedPairPattern.matcher(params.get("q"));          if (matcher.matches()) {            latString=matcher.group(1);            lonString=matcher.group(2);          }        } else         if (params.containsKey("ll")) {          Matcher matcher=commaSeparatedPairPattern.matcher(params.get("ll"));          if (matcher.matches()) {            latString=matcher.group(1);            lonString=matcher.group(2);          }        }        if (latString != null && lonString != null) {          if (params.containsKey("z")) {            z=params.get("z");          }          return new GeoParsedPoint(latString,lonString,z);        }        if (params.containsKey("daddr")) {          return parseGoogleMapsPath(params.get("daddr"),params);        } else         if (params.containsKey("saddr")) {          return parseGoogleMapsPath(params.get("saddr"),params);        } else         if (params.containsKey("q")) {          return parseGoogleMapsPath(params.get("q"),params);        }        if (fragment != null) {          Pattern p=Pattern.compile(".*[!&]q=([^&!]+).*");          Matcher m=p.matcher(fragment);          if (m.matches()) {            return new GeoParsedPoint(m.group(1));          }        }        String[] pathPrefixes=new String[]{"/@","/ll=","loc:","/"};        for (        String pref : pathPrefixes) {          if (path.contains(pref)) {            path=path.substring(path.lastIndexOf(pref) + pref.length());            return parseGoogleMapsPath(path,params);          }        }      } else       if (host.endsWith(".amap.com")) {        final String subString=uri.toString().substring(scheme.length() + host.length() + 4);        Pattern p;        Matcher matcher;        final String[] patterns={".*q=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?).*&radius=(\\d+).*",".*q=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?).*",".*p=(?:[A-Z0-9]+),([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?).*"};        for (int i=0; i < patterns.length; i++) {          p=Pattern.compile(patterns[i]);          matcher=p.matcher(subString);          if (matcher.matches()) {            if (matcher.groupCount() == 3) {              float radius=Float.valueOf(matcher.group(3));              long zoom=Math.round(23. - Math.log(radius) / Math.log(2.0));              return new GeoParsedPoint(matcher.group(1),matcher.group(2),String.valueOf(zoom));            } else             if (matcher.groupCount() == 2) {              return new GeoParsedPoint(matcher.group(1),matcher.group(2));            }          }        }      } else       if (host.equals("here.com") || host.endsWith(".here.com")) {        Map<String,String> params=getQueryParameters(uri);        String z=String.valueOf(GeoParsedPoint.NO_ZOOM);        String label=null;        if (params.containsKey("msg")) {          label=params.get("msg");        }        if (params.containsKey("z")) {          z=params.get("z");        }        if (params.containsKey("map")) {          String[] mapArray=params.get("map").split(",");          if (mapArray.length > 2) {            return new GeoParsedPoint(mapArray[0],mapArray[1],mapArray[2],label);          } else           if (mapArray.length > 1) {            return new GeoParsedPoint(mapArray[0],mapArray[1],z,label);          }        }        if (path.startsWith("/l/")) {          Pattern p=Pattern.compile("^/l/([+-]?\\d+(?:\\.\\d+)),([+-]?\\d+(?:\\.\\d+)),(.*)");          Matcher matcher=p.matcher(path);          if (matcher.matches()) {            return new GeoParsedPoint(matcher.group(1),matcher.group(2),z,matcher.group(3));          }        }      } else       if (host.endsWith(".qq.com")) {        Map<String,String> params=getQueryParameters(uri);        String x=null;        String y=null;        String z=String.valueOf(GeoParsedPoint.NO_ZOOM);        String label=null;        if (params.containsKey("city")) {          label=params.get("city");        } else         if (params.containsKey("key")) {          label=params.get("key");        } else         if (params.containsKey("a")) {          label=params.get("a");        } else         if (params.containsKey("n")) {          label=params.get("n");        }        String m=params.get("m");        if (m != null) {          Matcher matcher=commaSeparatedPairPattern.matcher(m);          if (matcher.matches()) {            x=matcher.group(2);            y=matcher.group(1);          }        }        String c=params.get("c");        if (c != null) {          Matcher matcher=commaSeparatedPairPattern.matcher(c);          if (matcher.matches()) {            x=matcher.group(2);            y=matcher.group(1);          } else {            x=c.replaceAll(".*\"lng\":\\s*([+\\-]?[0-9.]+).*","$1");            if (x == null)             x=c.replaceAll(".*\"lon\":\\s*([+\\-]?[0-9.]+).*","$1");            y=c.replaceAll(".*\"lat\":\\s*([+\\-]?[0-9.]+).*","$1");            z=c.replaceAll(".*\"l\":\\s*([+-]?[0-9.]+).*","$1");            return new GeoParsedPoint(y,x,z,label);          }        }        for (        String key : new String[]{"centerX","x","x1","x2"}) {          if (params.containsKey(key)) {            x=params.get(key);            break;          }        }        for (        String key : new String[]{"centerY","y","y1","y2"}) {          if (params.containsKey(key)) {            y=params.get(key);            break;          }        }        if (x != null && y != null)         return new GeoParsedPoint(y,x,z,label);      } else       if (host.equals("maps.apple.com")) {        Map<String,String> params=getQueryParameters(uri);        String z=String.valueOf(GeoParsedPoint.NO_ZOOM);        String label=null;        if (params.containsKey("q")) {          label=params.get("q");        }        if (params.containsKey("near")) {          label=params.get("near");        }        if (params.containsKey("z")) {          z=params.get("z");        }        String ll=params.get("ll");        if (ll != null) {          Matcher matcher=commaSeparatedPairPattern.matcher(ll);          if (matcher.matches()) {            return new GeoParsedPoint(matcher.group(1),matcher.group(2),z,label);          }        }        String sll=params.get("sll");        if (sll != null) {          Matcher matcher=commaSeparatedPairPattern.matcher(sll);          if (matcher.matches()) {            return new GeoParsedPoint(matcher.group(1),matcher.group(2),z,label);          }        }        if (params.containsKey("q")) {          return new GeoParsedPoint(params.get("q"));        }        if (params.containsKey("daddr")) {          return new GeoParsedPoint(params.get("daddr"));        }        if (params.containsKey("saddr")) {          return new GeoParsedPoint(params.get("saddr"));        }      }    } catch (    RuntimeException e) {      e.printStackTrace();    }    return null;  } else   if ("geo".equals(scheme) || "osmand.geo".equals(scheme)) {    String schemeSpecific=uri.getSchemeSpecificPart();    if (schemeSpecific == null) {      return null;    }    String name=null;    final Pattern namePattern=Pattern.compile("[\\+\\s]*\\((.*)\\)[\\+\\s]*$");    final Matcher nameMatcher=namePattern.matcher(schemeSpecific);    if (nameMatcher.find()) {      name=URLDecoder.decode(nameMatcher.group(1));      if (name != null) {        schemeSpecific=schemeSpecific.substring(0,nameMatcher.start());      }    }    String positionPart;    String queryPart="";    int queryStartIndex=schemeSpecific.indexOf('?');    if (queryStartIndex == -1) {      positionPart=schemeSpecific;    } else {      positionPart=schemeSpecific.substring(0,queryStartIndex);      if (queryStartIndex < schemeSpecific.length())       queryPart=schemeSpecific.substring(queryStartIndex + 1);    }    final Pattern positionPattern=Pattern.compile("([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)");    final Matcher positionMatcher=positionPattern.matcher(positionPart);    if (!positionMatcher.find()) {      return null;    }    double lat=Double.valueOf(positionMatcher.group(1));    double lon=Double.valueOf(positionMatcher.group(2));    int zoom=GeoParsedPoint.NO_ZOOM;    String searchRequest=null;    for (    String param : queryPart.split("&")) {      String paramName;      String paramValue=null;      int nameValueDelimititerIndex=param.indexOf('=');      if (nameValueDelimititerIndex == -1) {        paramName=param;      } else {        paramName=param.substring(0,nameValueDelimititerIndex);        if (nameValueDelimititerIndex < param.length())         paramValue=param.substring(nameValueDelimititerIndex + 1);      }      if ("z".equals(paramName) && paramValue != null) {        zoom=Integer.parseInt(paramValue);      } else       if ("q".equals(paramName) && paramValue != null) {        searchRequest=URLDecoder.decode(paramValue);      }    }    if (searchRequest != null) {      final Matcher positionInSearchRequestMatcher=positionPattern.matcher(searchRequest);      if (lat == 0.0 && lon == 0.0 && positionInSearchRequestMatcher.find()) {        lat=Double.valueOf(positionInSearchRequestMatcher.group(1));        lon=Double.valueOf(positionInSearchRequestMatcher.group(2));      }    }    if (lat == 0.0 && lon == 0.0 && searchRequest != null) {      return new GeoParsedPoint(searchRequest);    }    if (zoom != GeoParsedPoint.NO_ZOOM) {      return new GeoParsedPoint(lat,lon,zoom,name);    }    return new GeoParsedPoint(lat,lon,name);  }  return null;}  }
class C{  protected static boolean runsFromAnt(){  return "true".equals(System.getProperty("FROM_ANT"));}  }
class C{  public MultiMarkupCache(){  super();}  }
class C{  public void remove(){  if (!isAdded) {    logger.warn("-- remove() > already removed");  }  try {    Runtime.getRuntime().removeShutdownHook(this);    isAdded=false;  } catch (  IllegalStateException|SecurityException ex) {    logger.warn("-- remove() > exception: ",ex);  }}  }
class C{  public long sum(){  long sum=0L;  for (  AtomicLong value : map.values()) {    sum=sum + value.get();  }  return sum;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();}  }
class C{  public boolean canDetach(){  return canDetach;}  }
class C{  public boolean isDebugHandled(Context context,MenuItem item){  int id=item.getItemId();  if (id == R.id.action_debug) {    startActivity(context);    return true;  }  return false;}  }
class C{  public String toString(){  return "IDColumn - ID=" + m_record_ID + ", Selected="+ m_selected;}  }
class C{  private void performHighlightDrag(MotionEvent e){  Highlight h=mChart.getHighlightByTouchPoint(e.getX(),e.getY());  if (h != null && !h.equalTo(mLastHighlighted)) {    mLastHighlighted=h;    mChart.highlightTouch(h);  }}  }
class C{  public static boolean isAssignment(ASTNode node){  return ASSIGNMENT_ELEMENT_TYPES.contains(node.getElementType());}  }
class C{  public boolean hasField(final int number){  return fields.containsKey(number);}  }
class C{  protected Set<String> rabbitIdSet(){  Set<String> rabbitIdSet=new HashSet<>();  for (  Rabbit rabbit : rabbitCache.getRabbits()) {    if (!rabbit.getHideOnConsole()) {      rabbitIdSet.add(rabbit.getId());    }  }  return rabbitIdSet;}  }
class C{  public synchronized void clear(){  mSeries.clear();}  }
class C{  public boolean isActivated(){  return this.activated;}  }
class C{  public Long srem(final String key,final String... members){  checkIsInMulti();  client.srem(key,members);  return client.getIntegerReply();}  }
class C{  private void calculateSteps(RootedTree tree){  final List<Node> nodes=Utils.getNodes(tree,tree.getRootNode());  boolean[] union=new boolean[stateCount];  boolean[] intersection=new boolean[stateCount];  for (int k=nodes.size() - 1; k >= 0; --k) {    final Node node=nodes.get(k);    final boolean[] nodeStateSet=stateSets.get(node);    if (tree.isExternal(node)) {      boolean[] stateSet=stateSets.get(node);      Taxon taxon=tree.getTaxon(node);      int state=stateMap.get(taxon);      stateSet[state]=true;    } else {      boolean first=true;      for (      Node child : tree.getChildren(node)) {        boolean[] childStateSet=stateSets.get(child);        if (first) {          copyOf(childStateSet,union);          copyOf(childStateSet,intersection);          first=false;        } else {          unionOf(union,childStateSet,union);          intersectionOf(intersection,childStateSet,intersection);        }      }      if (sizeOf(intersection) > 0) {        copyOf(intersection,nodeStateSet);      } else {        copyOf(union,nodeStateSet);      }    }  }}  }
class C{  public SharedPreferences putLong(String key,long value){  editor.putLong(key,value);  return this;}  }
class C{  public void initialize(LagGraph lagGraph){  lagGraph.clearEdges();  List<String> factors=new ArrayList<>(lagGraph.getFactors());  for (  String factor1 : factors) {    LaggedFactor laggedFactor=new LaggedFactor(factor1,1);    lagGraph.addEdge(factor1,laggedFactor);  }}  }
class C{  public void copyToTexture(Texture tex){  textureRenderer.copyToTexture(tex,0,0,textureRenderer.getWidth(),textureRenderer.getHeight(),0,0);}  }
class C{  public int hashCode(){  long bits=1L;  for (int i=0; i < length; i++) {    bits=31L * bits + VecMathUtil.doubleToLongBits(values[i]);  }  return (int)(bits ^ (bits >> 32));}  }
class C{  public AuthResource(){}  }
class C{  public SubscriptionAlreadyExistsException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @DSModeled(DSC.SAFE) public RectF(float left,float top,float right,float bottom){  this();  addTaint(left);  addTaint(top);  addTaint(right);  addTaint(bottom);}  }
class C{  private static Properties generateDefaultKafkaProps(){  Properties props=new Properties();  props.put(KafkaSourceConstants.AUTO_COMMIT_ENABLED,KafkaSourceConstants.DEFAULT_AUTO_COMMIT);  props.put(KafkaSourceConstants.CONSUMER_TIMEOUT,KafkaSourceConstants.DEFAULT_CONSUMER_TIMEOUT);  props.put(KafkaSourceConstants.GROUP_ID,KafkaSourceConstants.DEFAULT_GROUP_ID);  return props;}  }
class C{  public static GeoCircle makeGeoCircle(final PlanetModel planetModel,final double latitude,final double longitude,final double radius){  if (radius < Vector.MINIMUM_RESOLUTION) {    return new GeoDegeneratePoint(planetModel,latitude,longitude);  }  return new GeoStandardCircle(planetModel,latitude,longitude,radius);}  }
class C{  @Override public <T>Provider<T> provider(Key<T> key){  Objects.requireNonNull(key);  Provider<T> provider=(Provider)_providerMap.get(key);  if (provider == null) {    provider=lookupProvider(key);    if (provider == null) {      provider=autoProvider(key);    }    _providerMap.putIfAbsent(key,provider);    provider=(Provider)_providerMap.get(key);  }  return provider;}  }
class C{  public void verify(ClientId sender,SignatureData signatureData) throws Exception {  verifier.verify(sender,signatureData);}  }
class C{  public void endSeq() throws EncodeException {  curSeqIndex--;  if (curSeqIndex < 0) {    throw new IllegalStateException("BER encode error: Unbalanced SEQUENCEs.");  }  int start=seqOffset[curSeqIndex] + 3;  int len=offset - start;  if (len <= 0x7f) {    shiftSeqData(start,len,-2);    buf[seqOffset[curSeqIndex]]=(byte)len;  } else   if (len <= 0xff) {    shiftSeqData(start,len,-1);    buf[seqOffset[curSeqIndex]]=(byte)0x81;    buf[seqOffset[curSeqIndex] + 1]=(byte)len;  } else   if (len <= 0xffff) {    buf[seqOffset[curSeqIndex]]=(byte)0x82;    buf[seqOffset[curSeqIndex] + 1]=(byte)(len >> 8);    buf[seqOffset[curSeqIndex] + 2]=(byte)len;  } else   if (len <= 0xffffff) {    shiftSeqData(start,len,1);    buf[seqOffset[curSeqIndex]]=(byte)0x83;    buf[seqOffset[curSeqIndex] + 1]=(byte)(len >> 16);    buf[seqOffset[curSeqIndex] + 2]=(byte)(len >> 8);    buf[seqOffset[curSeqIndex] + 3]=(byte)len;  } else {    throw new EncodeException("SEQUENCE too long");  }}  }
class C{  public void postDelete(Engine.Delete delete){}  }
class C{  public String path(){  return file.getAbsolutePath();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.247 -0500",hash_original_method="BDC1F894C327354FF6BC9BE2A0106898",hash_generated_method="444ACD2D65C852D3BADAF2A2AC45FF05") public void addArc(RectF oval,float startAngle,float sweepAngle){  if (oval == null) {    throw new NullPointerException("need oval parameter");  }  isSimplePath=false;  addTaint(oval.getTaintInt() + startAngle + sweepAngle);}  }
class C{  public SQLClientInfoException(String reason,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  protected int webCrawl(int level,OutputStream out){  int numPages=0;  LinkedHashSet<URL> stack=backlog.get(level);  int rawStackSize=stack.size();  stack.removeAll(visited);  int stackSize=stack.size();  LinkedHashSet<URL> subStack=new LinkedHashSet<>();  info("Entering crawl at level " + level + " ("+ rawStackSize+ " links total, "+ stackSize+ " new)");  for (  URL u : stack) {    try {      visited.add(u);      PageFetcherResult result=pageFetcher.readPageFromUrl(u);      if (result.httpStatus == 200) {        u=(result.redirectUrl != null) ? result.redirectUrl : u;        URL postUrl=new URL(appendParam(solrUrl.toString(),"literal.id=" + URLEncoder.encode(u.toString(),"UTF-8") + "&literal.url="+ URLEncoder.encode(u.toString(),"UTF-8")));        boolean success=postData(new ByteArrayInputStream(result.content.array(),result.content.arrayOffset(),result.content.limit()),null,out,result.contentType,postUrl);        if (success) {          info("POSTed web resource " + u + " (depth: "+ level+ ")");          Thread.sleep(delay * 1000);          numPages++;          if (recursive > level && result.contentType.equals("text/html")) {            Set<URL> children=pageFetcher.getLinksFromWebPage(u,new ByteArrayInputStream(result.content.array(),result.content.arrayOffset(),result.content.limit()),result.contentType,postUrl);            subStack.addAll(children);          }        } else {          warn("An error occurred while posting " + u);        }      } else {        warn("The URL " + u + " returned a HTTP result status of "+ result.httpStatus);      }    } catch (    IOException e) {      warn("Caught exception when trying to open connection to " + u + ": "+ e.getMessage());    }catch (    InterruptedException e) {      throw new RuntimeException(e);    }  }  if (!subStack.isEmpty()) {    backlog.add(subStack);    numPages+=webCrawl(level + 1,out);  }  return numPages;}  }
class C{  public void resetFlags(){  crossedAboveThreshold=false;  crossedBelowThreshold=false;  remainedAboveThreshold=false;  remainedBelowThreshold=false;}  }
class C{  public void testReformatTextRange(){  myTestIndentOptions.INDENT_SIZE=3;  myTestIndentOptions.TAB_SIZE=2;  myTestIndentOptions.USE_TAB_CHARACTER=true;  PsiFile file=myFixture.configureByFile(getTestName(true) + "_before.java");  CodeStyleManager.getInstance(getProject()).reformatText(file,6,file.getTextRange().getEndOffset() - 1);  myFixture.checkResultByFile(getTestName(true) + "_after.java");}  }
class C{  public static void createT_Selection(int AD_PInstance_ID,Collection<Integer> selection,String trxName){  StringBuffer insert=new StringBuffer();  insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");  int counter=0;  for (  Integer selectedId : selection) {    counter++;    if (counter > 1)     insert.append(" UNION ");    insert.append("SELECT ");    insert.append(AD_PInstance_ID);    insert.append(", ");    insert.append(selectedId);    insert.append(" FROM DUAL ");    if (counter >= 1000) {      DB.executeUpdateEx(insert.toString(),trxName);      insert=new StringBuffer();      insert.append("INSERT INTO T_SELECTION(AD_PINSTANCE_ID, T_SELECTION_ID) ");      counter=0;    }  }  if (counter > 0) {    DB.executeUpdateEx(insert.toString(),trxName);  }}  }
class C{  public boolean isEmpty(){  return names.isEmpty();}  }
class C{  public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  protected Abstract_Impl(){  super();}  }
class C{  E emitAddress(@Nullable String prefix,@Nullable Address address){  prefix=isNullOrEmpty(prefix) ? "" : prefix + " ";  if (address != null) {    emitList(prefix + "Street",address.getStreet());    emitField(prefix + "City",address.getCity());    emitField(prefix + "State/Province",address.getState());    emitField(prefix + "Postal Code",address.getZip());    emitField(prefix + "Country",address.getCountryCode());  }  return thisCastToDerived();}  }
class C{  public void removeSharedPreference(String preferenceName){  SharedPreferences pref=mContext.getSharedPreferences(preferenceName,0);  SharedPreferences.Editor editor=pref.edit();  editor.remove(preferenceName);  editor.apply();}  }
class C{  public void requestX11Forwarding(String hostname,int port,byte[] cookie,boolean singleConnection) throws IOException {  if (hostname == null)   throw new IllegalArgumentException("hostname argument may not be null");synchronized (this) {    if (flag_closed)     throw new IOException("This session is closed.");    if (flag_x11_requested)     throw new IOException("X11 forwarding was already requested.");    if (flag_execution_started)     throw new IOException("Cannot request X11 forwarding at this stage anymore, a remote execution has already started.");    flag_x11_requested=true;  }  X11ServerData x11data=new X11ServerData();  x11data.hostname=hostname;  x11data.port=port;  x11data.x11_magic_cookie=cookie;  byte[] fakeCookie=new byte[16];  String hexEncodedFakeCookie;  while (true) {    rnd.nextBytes(fakeCookie);    StringBuffer tmp=new StringBuffer(32);    for (int i=0; i < fakeCookie.length; i++) {      String digit2=Integer.toHexString(fakeCookie[i] & 0xff);      tmp.append((digit2.length() == 2) ? digit2 : "0" + digit2);    }    hexEncodedFakeCookie=tmp.toString();    if (cm.checkX11Cookie(hexEncodedFakeCookie) == null)     break;  }  cm.requestX11(cn,singleConnection,"MIT-MAGIC-COOKIE-1",hexEncodedFakeCookie,0);synchronized (this) {    if (flag_closed == false) {      this.x11FakeCookie=hexEncodedFakeCookie;      cm.registerX11Cookie(hexEncodedFakeCookie,x11data);    }  }}  }
class C{  public UnsupportedClassTypeException(){  super();}  }
class C{  public EmpiricalPiecewiseConstant(double[] intervals,double[] popSizes,double lag,Type units){  super(units);  if (popSizes == null || intervals == null) {    throw new IllegalArgumentException();  }  if (popSizes.length != intervals.length + 1) {    throw new IllegalArgumentException();  }  if (lag < 0.0)   throw new IllegalArgumentException("Lag must be greater than 1.");  this.intervals=intervals;  this.popSizes=popSizes;  this.lag=lag;}  }
class C{  private static Node locateAttrParent(Element elem,Node attr){  Node parent=null;  Attr check=elem.getAttributeNode(attr.getNodeName());  if (check == attr)   parent=elem;  if (null == parent) {    for (Node node=elem.getFirstChild(); null != node; node=node.getNextSibling()) {      if (Node.ELEMENT_NODE == node.getNodeType()) {        parent=locateAttrParent((Element)node,attr);        if (null != parent)         break;      }    }  }  return parent;}  }
class C{  protected void buildGraphicsNode(BridgeContext ctx,Element e,CompositeGraphicsNode parentNode){  if (HaltingThread.hasBeenHalted()) {    throw new InterruptedBridgeException();  }  Bridge bridge=ctx.getBridge(e);  if (bridge instanceof GenericBridge) {    ((GenericBridge)bridge).handleElement(ctx,e);    handleGenericBridges(ctx,e);    return;  } else   if (bridge == null || !(bridge instanceof GraphicsNodeBridge)) {    handleGenericBridges(ctx,e);    return;  }  if (!CSSUtilities.convertDisplay(e)) {    handleGenericBridges(ctx,e);    return;  }  GraphicsNodeBridge gnBridge=(GraphicsNodeBridge)bridge;  try {    GraphicsNode gn=gnBridge.createGraphicsNode(ctx,e);    if (gn != null) {      parentNode.getChildren().add(gn);      if (gnBridge.isComposite()) {        buildComposite(ctx,e,(CompositeGraphicsNode)gn);      } else {        handleGenericBridges(ctx,e);      }      gnBridge.buildGraphicsNode(ctx,e,gn);    } else {      handleGenericBridges(ctx,e);    }  } catch (  BridgeException ex) {    GraphicsNode errNode=ex.getGraphicsNode();    if (errNode != null) {      parentNode.getChildren().add(errNode);      gnBridge.buildGraphicsNode(ctx,e,errNode);      ex.setGraphicsNode(null);    }    throw ex;  }}  }
class C{  public double[][] asDoubleArray(){  double returnList[][]=new double[getRowCount()][getLogicalColumnCount()];  for (int i=0; i < getRowCount(); i++) {    for (int j=0; j < getLogicalColumnCount(); j++) {      returnList[i][j]=this.getLogicalValueAt(i,j);    }  }  return returnList;}  }
class C{  protected PrimeFinder(){}  }
class C{  public JavacMessages(String bundleName,Locale locale) throws MissingResourceException {  bundleNames=List.nil();  bundleCache=new HashMap<Locale,SoftReference<List<ResourceBundle>>>();  add(bundleName);  setCurrentLocale(locale);}  }
class C{  public final synchronized void connect(String hostname) throws IOException, IrcException, NickAlreadyInUseException {  this.connect(hostname,6667,null);}  }
class C{  private boolean inBounds(int x,int y){  return (!(x == 0 || x == N + 1 || y == 0 || y == N + 1));}  }
class C{  private IBindingSet[] optimize(final StaticAnalysis sa,final SubqueryRoot subqueryRoot,final StaticBindingInfo staticBindingInfo,final VariableUsageInfo ancestorVarUsageInfo,final Set<InlineTasks> inlineTasks){  final IBindingSet[] staticBindings=optimize(sa,subqueryRoot,staticBindingInfo,ancestorVarUsageInfo,inlineTasks,subqueryRoot.getBindingsClause());  final LinkedHashSet<IVariable<?>> bcVars=new LinkedHashSet<IVariable<?>>();  bcVars.addAll(SolutionSetStatserator.get(staticBindings).getUsedVars());  final List<IBindingSet> bcBindings=Arrays.asList(staticBindings);  if (!bcVars.isEmpty()) {    final BindingsClause bc=new BindingsClause(bcVars,bcBindings);    subqueryRoot.setBindingsClause(bc);  }  return staticBindings;}  }
class C{  public static Vector<PointMatch> createMatches(List<SiftFeature> fs1,List<SiftFeature> fs2,float max_sd,Model model,float max_id){  Vector<PointMatch> matches=new Vector<PointMatch>();  float min_sd=1.0f / max_sd;  int size=fs2.size();  int size_1=size - 1;  for (  SiftFeature f1 : fs1) {    SiftFeature best=null;    float best_d=Float.MAX_VALUE;    float second_best_d=Float.MAX_VALUE;    int first=0;    int last=size_1;    int s=size / 2 + size % 2;    if (max_sd < Float.MAX_VALUE) {      while (s > 1) {        SiftFeature f2=fs2.get(last);        if (f2.scale / f1.scale < min_sd)         last=Math.max(0,last - s); else         last=Math.min(size_1,last + s);        f2=fs2.get(first);        if (f2.scale / f1.scale < max_sd)         first=Math.max(0,first - s); else         first=Math.min(size_1,first + s);        s=s / 2 + s % 2;      }    }    for (int i=first; i <= last; ++i) {      SiftFeature f2=fs2.get(i);      float d=f1.descriptorDistance(f2);      if (d < best_d) {        second_best_d=best_d;        best_d=d;        best=f2;      } else       if (d < second_best_d)       second_best_d=d;    }    if (best != null && second_best_d < Float.MAX_VALUE && best_d / second_best_d < 0.92)     matches.addElement(new PointMatch(new Point(new float[]{f1.location[0],f1.location[1]}),new Point(new float[]{best.location[0],best.location[1]}),(f1.scale + best.scale) / 2.0f));  }  for (int i=0; i < matches.size(); ) {    boolean amb=false;    PointMatch m=matches.get(i);    float[] m_p2=m.getP2().getL();    for (int j=i + 1; j < matches.size(); ) {      PointMatch n=matches.get(j);      float[] n_p2=n.getP2().getL();      if (m_p2[0] == n_p2[0] && m_p2[1] == n_p2[1]) {        amb=true;        matches.removeElementAt(j);      } else       ++j;    }    if (amb) {      matches.removeElementAt(i);    } else     ++i;  }  return matches;}  }
class C{  public ZDT1(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public static double floor(double x){  return Math.floor(x);}  }
class C{  public TransactionTimeoutException(String msg){  super(msg);}  }
class C{  public boolean isCacheDataFailure(String cacheFile){  boolean failure=false;  File data=getFileStreamPath(cacheFile);  if (data.exists() && (System.currentTimeMillis() - data.lastModified()) > CACHE_TIME)   failure=true; else   if (!data.exists())   failure=true;  return failure;}  }
class C{  public boolean isInputShutdown(){  return isInputShutdown;}  }
class C{  public T allocate(){  while (true) {    SoftReference<T> ref;    ref=_ringQueue.poll();    if (ref == null) {      return null;    }    T value=ref.get();    if (value != null) {      return value;    }  }}  }
class C{  @Override public String toString(){  return ("linear");}  }
class C{  @Override public void free() throws SQLException {}  }
class C{  public String minThresholdTipText(){  return "The minimum threshold below values are replaced by a default.";}  }
class C{  public String readNestedContents() throws IOException {  return readNestedContents(reader);}  }
class C{  public FilePersistenceStrategy(final File baseDirectory,final XStream xstream){  this(baseDirectory,xstream,"utf-8","<>?:/\\\"|*%");}  }
class C{  public static double parseTime(String s) throws NumberFormatException {  if (s.length() > 4)   throw new NumberFormatException("Could not parse time: \"" + s + "\"!");  double result=0;  char[] c=s.toCharArray();  char[] x=new char[]{'0','0','0','0'};  for (int i=0; i < c.length; i++)   x[i + 4 - c.length]=c[i];  try {    int hours=Integer.parseInt("" + x[0] + x[1]);    int minutes=Integer.parseInt("" + x[2] + x[3]);    result=hours * 3600 + minutes * 60;  } catch (  NumberFormatException e) {    throw new NumberFormatException("Could not parse time: \"" + s + "\"!");  }  if (result < (3 * 3600))   result+=(24 * 3600);  return result;}  }
class C{  public static boolean isXML11ValidNmtoken(String nmtoken){  int length=nmtoken.length();  if (length == 0)   return false;  for (int i=0; i < length; ++i) {    char ch=nmtoken.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=nmtoken.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }  }  return true;}  }
class C{  public Node selectSingleNode(Node contextNode,String str,Node namespaceNode) throws TransformerException {  NodeIterator nl=selectNodeIterator(contextNode,str,namespaceNode);  return nl.nextNode();}  }
class C{  public X509AttributeCertificateHolder(byte[] certEncoding) throws IOException {  this(parseBytes(certEncoding));}  }
class C{  public synchronized void auxConnectionOpened(IOFConnectionBackend connection){  if (log.isDebugEnabled())   log.debug("[{}] - Switch Handshake - new aux connection {}",this.getDpid(),connection.getAuxId());  if (this.getState().equals("ACTIVE") || this.getState().equals("STANDBY")) {    auxConnections.put(connection.getAuxId(),connection);    connection.setListener(OFSwitchHandshakeHandler.this);    log.info("Auxiliary connection {} added for {}.",connection.getAuxId().getValue(),connection.getDatapathId().toString());  } else {    log.info("Auxiliary connection {} initiated for {} before main connection handshake complete. Ignorning aux connection attempt.",connection.getAuxId().getValue(),connection.getDatapathId().toString());  }}  }
class C{  private void assertFileUriEquals(String message,String expectedFile,String actual){  if (!("file:" + expectedFile).equals(actual) && !("file://" + expectedFile).equals(actual)) {    fail("Expected URI for: " + expectedFile + " but was "+ actual+ ". "+ message);  }}  }
class C{  protected void copyToOpsw(){  opsw[1]=opsw1.isSelected();  opsw[2]=opsw2.isSelected();  opsw[3]=opsw3.isSelected();  opsw[4]=opsw4.isSelected();  opsw[5]=opsw5.isSelected();  opsw[6]=opsw6.isSelected();  opsw[7]=opsw7.isSelected();  opsw[8]=opsw8.isSelected();  opsw[9]=opsw9.isSelected();  opsw[10]=opsw10.isSelected();  opsw[11]=opsw11.isSelected();  opsw[12]=opsw12.isSelected();  opsw[13]=opsw13.isSelected();  opsw[14]=opsw14.isSelected();  opsw[15]=opsw15.isSelected();  opsw[16]=opsw16.isSelected();  opsw[17]=opsw17.isSelected();  opsw[18]=opsw18.isSelected();  opsw[19]=opsw19.isSelected();  opsw[20]=opsw20.isSelected();  opsw[21]=opsw21.isSelected();}  }
class C{  public void trackPageView(String page){  Log.d(TAG,"Logging page " + page);  tracker.setScreenName(page);  tracker.send(screenViewBuilder.build());}  }
class C{  public static EntityItem spawnStackInWorld(final World world,final BlockPos pos,final ItemStack stack,final EnumFacing towards){  if (stack == null || stack.stackSize < 1) {    return null;  }  final Random rng=world.rand;  final double ox=towards.getFrontOffsetX();  final double oy=towards.getFrontOffsetY();  final double oz=towards.getFrontOffsetZ();  final double tx=0.1 * (rng.nextDouble() - 0.5) + ox * 0.65;  final double ty=0.1 * (rng.nextDouble() - 0.5) + oy * 0.75 + (ox + oz) * 0.25;  final double tz=0.1 * (rng.nextDouble() - 0.5) + oz * 0.65;  final double px=pos.getX() + 0.5 + tx;  final double py=pos.getY() + 0.5 + ty;  final double pz=pos.getZ() + 0.5 + tz;  final EntityItem entity=new EntityItem(world,px,py,pz,stack.copy());  entity.motionX=0.0125 * (rng.nextDouble() - 0.5) + ox * 0.03;  entity.motionY=0.0125 * (rng.nextDouble() - 0.5) + oy * 0.08 + (ox + oz) * 0.03;  entity.motionZ=0.0125 * (rng.nextDouble() - 0.5) + oz * 0.03;  entity.setPickupDelay(15);  world.spawnEntityInWorld(entity);  return entity;}  }
class C{  public Builder byMonthDay(Integer... monthDays){  return byMonthDay(Arrays.asList(monthDays));}  }
class C{  private static void padInt(StringBuilder buffer,int value,int length){  String strValue=Integer.toString(value);  for (int i=length - strValue.length(); i > 0; i--) {    buffer.append('0');  }  buffer.append(strValue);}  }
class C{  public static <T extends TMember>MemberList<T> newMemberList(){  return new MemberList<>();}  }
class C{  public static ODataUri createODataValueEntitiesUri(String serviceRoot,String entitySetName,String propertyName){  ValuePath$ valuePath=ValuePath$.MODULE$;  scala.Option<PathSegment> valuePathOption=scala.Option.apply(valuePath);  PropertyPath propertyPath=PropertyPath$.MODULE$.apply(propertyName,valuePathOption);  scala.Option<PathSegment> propertyPathOption=scala.Option.apply(propertyPath);  scala.Option<String> noString=scala.Option.apply(null);  EntityCollectionPath entityCollectionPath=new EntityCollectionPath(noString,propertyPathOption);  scala.Option<EntityCollectionPath> entityCollectionPathOption=scala.Option.apply(entityCollectionPath);  EntitySetPath entitySetPath=new EntitySetPath(entitySetName,entityCollectionPathOption);  List<QueryOption> queryOptions=new ArrayList<>();  ResourcePathUri resourcePathUri=new ResourcePathUri(entitySetPath,asScalaList(queryOptions));  return new ODataUri(serviceRoot,resourcePathUri);}  }
class C{  public void addDifferenceListener(final DifferenceListener listener){  if (listener != null) {    _listeners.add(listener);  }}  }
class C{  public static void filledSquare(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("square side length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  private boolean shiftSelect(D nodeData){  D firstNode=selectedNodes.get(0);  D lastNode=selectedNodes.get(selectedNodes.size() - 1);  int comparisonToFirst=dataAdapter.compare(nodeData,firstNode);  int comparisonToLast=dataAdapter.compare(nodeData,lastNode);  if (comparisonToFirst < 0) {    List<D> range=collectRangeToSelect(nodeData,firstNode,true,false);    visuallySelect(range,true);    selectedNodes.addAll(range);    return true;  }  if (comparisonToLast > 0) {    List<D> range=collectRangeToSelect(lastNode,nodeData,false,true);    visuallySelect(range,true);    selectedNodes.addAll(range);    return true;  }  if (comparisonToFirst >= 0 && comparisonToLast <= 0) {    clearSelections();    selectedNodes=collectRangeToSelect(nodeData,lastNode,true,true);    visuallySelect(selectedNodes,true);    return true;  }  assert false : "SelectionModel#shiftSelect(D): This should be unreachable!";  return false;}  }
class C{  public static Number div(Character left,Number right){  return NumberNumberDiv.div(Integer.valueOf(left),right);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.STRICTNESS___ANONYMOUS_STRICTNESS_11:    return getAnonymous_strictness_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private boolean proxyHasCredentials(){  return (this.properties.getProxy() != null && this.properties.getProxy().getAuth() != null && this.properties.getProxy().getAuth().getUsername() != null && this.properties.getProxy().getAuth().getPassword() != null);}  }
class C{  public void incrementIteration(){  iteration++;}  }
class C{  @Override public Void visitMethodInvocation(MethodInvocationTree node,Void p){  ProcessingEnvironment env=checker.getProcessingEnvironment();  if (TreeUtils.isMethodInvocation(node,patternCompile,env)) {    ExpressionTree flagParam=node.getArguments().get(1);    if (flagParam.getKind() == Kind.MEMBER_SELECT) {      MemberSelectTree memSelect=(MemberSelectTree)flagParam;      if (TreeUtils.isSpecificFieldAccess(memSelect,patternLiteral)) {        Void r=scan(node.getTypeArguments(),p);        r=reduce(scan(node.getMethodSelect(),p),r);        r=reduce(scan(node.getArguments(),p),r);        return r;      }    }  } else   if (TreeUtils.isMethodInvocation(node,matchResultEnd,env) || TreeUtils.isMethodInvocation(node,matchResultGroup,env) || TreeUtils.isMethodInvocation(node,matchResultStart,env)) {    ExpressionTree group=node.getArguments().get(0);    if (group.getKind() == Kind.INT_LITERAL) {      LiteralTree literal=(LiteralTree)group;      int paramGroups=(Integer)literal.getValue();      ExpressionTree receiver=TreeUtils.getReceiverTree(node);      int annoGroups=0;      AnnotatedTypeMirror receiverType=atypeFactory.getAnnotatedType(receiver);      if (receiverType.hasAnnotation(Regex.class)) {        annoGroups=atypeFactory.getGroupCount(receiverType.getAnnotation(Regex.class));      }      if (paramGroups > annoGroups) {        checker.report(Result.failure("group.count.invalid",paramGroups,annoGroups,receiver),group);      }    } else {      checker.report(Result.warning("group.count.unknown"),group);    }  }  return super.visitMethodInvocation(node,p);}  }
class C{  @Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){  return Math.sqrt((norm2(x_index,x_att,y_index,y_att) / sigma) + (shift * shift));}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string: ");  String str=input.nextLine();  System.out.println("There are " + countUppercase(str) + " uppercase letters in \""+ str+ "\".");}  }
class C{  private void showDescriptionLine(Spannable str,int textColor){  if (mContentsView.mTextLine2.getVisibility() != VISIBLE) {    mContentsView.mTextLine2.setVisibility(VISIBLE);  }  mContentsView.mTextLine2.setTextColor(textColor);  mContentsView.mTextLine2.setText(str,BufferType.SPANNABLE);}  }
class C{  public static boolean isMimeTypeExist(String mimeType,int regLevel){  String mimeTypeKey=getMimeTypeKey(mimeType,regLevel);  if (mimeTypeKey != null) {    return isSubKeyExist(mimeTypeKey,regLevel);  } else {    return false;  }}  }
class C{  public void modifyGraphic(int maskDescription,LinkProperties props) throws IOException {  link.dos.write(Link.UPDATE_GRAPHICS.getBytes());  link.dos.writeByte(ACTION_GRAPHICS);  link.dos.writeInt(maskDescription);  props.write(link.dos);}  }
class C{  public CodeLangs_ createCodeLangs_(){  CodeLangs_Impl codeLangs_=new CodeLangs_Impl();  return codeLangs_;}  }
class C{  public StrSubstitutor(final StrLookup<?> variableResolver,final StrMatcher prefixMatcher,final StrMatcher suffixMatcher,final char escape,final StrMatcher valueDelimiterMatcher){  this.setVariableResolver(variableResolver);  this.setVariablePrefixMatcher(prefixMatcher);  this.setVariableSuffixMatcher(suffixMatcher);  this.setEscapeChar(escape);  this.setValueDelimiterMatcher(valueDelimiterMatcher);}  }
class C{  @Override public void printStackTrace(PrintWriter pw){  super.printStackTrace(pw);  if (getOriginalThrowable() != null) {    getOriginalThrowable().printStackTrace(pw);  }}  }
class C{  @Override public Object lastElement(){  return ((CheckBoxListItem)super.lastElement()).getContent();}  }
class C{  public static JSONValue value(Float value){  if (Float.isInfinite(value) || Float.isNaN(value)) {    throw new IllegalArgumentException("Infinite and NaN values not permitted in JSON");  }  return new JSONNumber(cutOffPointZero(Float.toString(value)));}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public void testFormatEmpty() throws Exception {  igfs.format();}  }
class C{  protected void titleFieldChanged(){  if (titleField.getText().equals("")) {    return;  }  if (titleType.getSelectedValue().equals(Bundle.getMessage("SelectTitleTypeADDRESS"))) {    titleType.setSelectedValue(Bundle.getMessage("SelectTitleTypeTEXT"),true);  }}  }
class C{  public static Properties argsToProperties(String[] args){  Properties props=new Properties();  for (  String arg : args) {    String[] fields=arg.split(SEPARATOR);    if (fields.length == 1) {      props.put(fields[0],TRUE);    } else     if (fields.length == 2) {      props.put(fields[0],fields[1]);    } else {      System.err.printf("%s: Discarding invalid parameter %s%n",FeatureUtils.class.getName(),arg);    }  }  return props;}  }
class C{  private void next(){  if (rootPane.getCenter() == connLayerPnl) {    if (checkInput(jdbcDrvJarTf,true,"Path to JDBC driver is not specified!") && checkInput(jdbcDrvClsTf,true,"JDBC driver class name is not specified!") && checkInput(jdbcUrlTf,true,"JDBC URL connection string is not specified!")&& checkInput(userTf,true,"User name is not specified!"))     fill();  } else   generate();}  }
class C{  private static String replaceAll(String source,String search,String replace){  if (USE_REPLACE_ALL) {    return source.replaceAll(search,replace);  } else {    Pattern p=Pattern.compile(search);    Matcher m=p.matcher(source);    StringBuffer sb=new StringBuffer();    boolean atLeastOneFound=false;    while (m.find()) {      m.appendReplacement(sb,replace);      atLeastOneFound=true;    }    if (atLeastOneFound) {      m.appendTail(sb);      return sb.toString();    } else {      return source;    }  }}  }
class C{  public static CodeArray create(int numInstrs,boolean isHot){  if (VM.runningVM) {    return MemoryManager.allocateCode(numInstrs,isHot);  } else {    return BootImageCreate.create(numInstrs,isHot);  }}  }
class C{  @Override public boolean isAnimatingLw(){  return mWinAnimator.mAnimation != null || (mAppToken != null && mAppToken.mAppAnimator.animation != null);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n;  int oneHundredthTotal;  int numRecs;  int FID=0;  ShapeType shapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("The input shapefile must have a POLYLINE or POLYGON shape type.");      return;    }    numRecs=input.getNumberOfRecords();    oneHundredthTotal=numRecs / 100;    AttributeTable reader=input.getAttributeTable();    int numFields=reader.getFieldCount();    DBFField[] fields=reader.getAllFields();    ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);    output.setProjectionStringFromOtherShapefile(input);    Object[][] attributeTableRecords=new Object[numRecs][numFields];    Object[] dataRow;    int a=0;    while ((dataRow=reader.nextRecord()) != null) {      System.arraycopy(dataRow,0,attributeTableRecords[a],0,numFields);      a++;    }    com.vividsolutions.jts.geom.Point p=null;    com.vividsolutions.jts.geom.Geometry[] JTSGeometries=null;    n=0;    progress=0;    for (    ShapeFileRecord record : input.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        JTSGeometries=record.getGeometry().getJTSGeometries();        for (a=0; a < JTSGeometries.length; a++) {          p=JTSGeometries[a].getCentroid();          Coordinate pCoord=p.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(pCoord.x,pCoord.y);          Object[] rowData=attributeTableRecords[record.getRecordNumber() - 1];          output.addRecord(wbGeometry,rowData);        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Reading shapefile data:",progress);      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus activateInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  PropertyHandler paramHandler=new PropertyHandler(settings);  paramHandler.setState(Status.ACTIVATION_REQUESTED);  InstanceStatus result=new InstanceStatus();  result.setChangedParameters(settings.getParameters());  return result;}  }
class C{  public boolean isStartStateEvent(){  return startStateEvent;}  }
class C{  private static void validateRegex(String fieldName,String value,String pattern) throws Exception {  if (!matches(pattern,value)) {    throw new Exception();  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.709 -0500",hash_original_method="469CB0205646D06181D1559BA7D61CF9",hash_generated_method="81337774ED506DBA26C3B2CACBFB0825") public OpenSSLPBEParametersGenerator(){}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public JsOptimizer addInput(Statement stmt){  compUnits.add(stmt);  return this;}  }
class C{  public void addGrid(float lt,float ln,int offset_x1,int offset_y1,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties) throws IOException {  LinkGrid.write(lt,ln,offset_x1,offset_y1,rows,columns,orientation,vResolution,hResolution,major,data,properties,link.dos);}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  return true;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void initializeAttributes(){  addConsumerType(xLocationType);  addConsumerType(yLocationType);  addConsumerType(turningType);  addConsumerType(straightMovementType);  addConsumerType(absoluteMovementType);  addConsumerType(speechEffectorType);  addProducerType(xLocationType);  addProducerType(yLocationType);  addProducerType(smellSensorScalars);  addProducerType(smellSensorVectors);  addProducerType(tileSensorType);  addProducerType(hearingSensorType);}  }
class C{  public boolean isDelivered(){  return delivered;}  }
class C{  public PostValidation createPostValidation(){  PostValidationImpl postValidation=new PostValidationImpl();  return postValidation;}  }
class C{  public static RE mkConcat(RE x,RE y){  if (x.op == ReOp.STRING && y.op == ReOp.STRING) {    return mkString(x.lit + y.lit);  } else   if (x.equals(empty) || y.equals(empty)) {    return empty;  } else   if (y.equals(epsilon)) {    return x;  } else   if (x.equals(epsilon)) {    return y;  } else   if (x.op == ReOp.CONCAT && y.op == ReOp.CONCAT && x.meta == null && y.meta == null) {    RE res=new RE(ReOp.CONCAT);    res.cats=new LinkedList<RE>();    res.cats.addAll(x.cats);    res.cats.addAll(y.cats);    return res;  } else   if (x.op == ReOp.CONCAT && x.meta == null) {    RE res=new RE(ReOp.CONCAT);    res.cats=new LinkedList<RE>();    res.cats.addAll(x.cats);    res.cats.add(y);    return res;  } else   if (y.op == ReOp.CONCAT && y.meta == null) {    RE res=new RE(ReOp.CONCAT);    res.cats=new LinkedList<RE>();    res.cats.addAll(y.cats);    res.cats.add(0,x);    return res;  } else {    RE res=new RE(ReOp.CONCAT);    res.cats=new LinkedList<RE>();    res.cats.add(x);    res.cats.add(y);    return res;  }}  }
class C{  public StreamSource(InstanceStream stream){  super();  this.stream=stream;}  }
class C{  protected Size2D arrangeRR(Graphics2D g2,Range widthRange,Range heightRange){  RectangleEdge position=getPosition();  if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {    float maxWidth=(float)widthRange.getUpperBound();    g2.setFont(this.font);    this.content=TextUtilities.createTextBlock(this.text,this.font,this.paint,maxWidth,this.maximumLinesToDisplay,new G2TextMeasurer(g2));    this.content.setLineAlignment(this.textAlignment);    Size2D contentSize=this.content.calculateDimensions(g2);    if (this.expandToFitSpace) {      return new Size2D(maxWidth,contentSize.getHeight());    } else {      return contentSize;    }  } else   if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) {    float maxWidth=(float)heightRange.getUpperBound();    g2.setFont(this.font);    this.content=TextUtilities.createTextBlock(this.text,this.font,this.paint,maxWidth,this.maximumLinesToDisplay,new G2TextMeasurer(g2));    this.content.setLineAlignment(this.textAlignment);    Size2D contentSize=this.content.calculateDimensions(g2);    if (this.expandToFitSpace) {      return new Size2D(contentSize.getHeight(),maxWidth);    } else {      return new Size2D(contentSize.height,contentSize.width);    }  } else {    throw new RuntimeException("Unrecognised exception.");  }}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public void init(ModeledAuthenticatedUser currentUser,ModelType model){  super.init(currentUser);  setModel(model);}  }
class C{  protected boolean isSkippedInnerClass(AnnotatedNode node){  if (!(node instanceof InnerClassNode))   return false;  MethodNode enclosingMethod=((InnerClassNode)node).getEnclosingMethod();  return enclosingMethod != null && isSkipMode(enclosingMethod);}  }
class C{  public ReplicatorException(){  super();}  }
class C{  @Override public int numQueuedBuffers(){  if (!_initialised) {    return (0);  }  int[] num_processed=new int[1];  al.alGetSourcei(_source[0],AL.AL_BUFFERS_QUEUED,num_processed,0);  if (JoalAudioFactory.checkALError()) {    log.warn("Error getting # queued buffers from  JoalSource (" + this.getSystemName() + ")");    return (0);  }  if (log.isDebugEnabled()) {    log.debug("Queued " + num_processed[0] + " buffers on JoalAudioSource ("+ this.getSystemName()+ ")");  }  return (num_processed[0]);}  }
class C{  public AbsoluteSize(int width,int height){  if (width <= 0 || height <= 0) {    throw new IllegalArgumentException("Width and height must be greater than 0.");  }  this.size=new Dimension(width,height);}  }
class C{  public void run(){  BluetoothDevice device=mPeer.getNetwork().getBluetoothDevice();  if (device == null) {    mCallback.failure("No bluetooth device for peer " + mPeer.toString());    return;  }  UUID remoteUUID=getUUIDFromMACAddress(device.getAddress());  BluetoothSocket socket;  try {    socket=device.createInsecureRfcommSocketToServiceRecord(remoteUUID);  } catch (  IOException e) {    mCallback.failure(String.format("Failed to create insecure RFCOMM socket to %s on peer %s. IOException: %s",remoteUUID,mPeer,e));    return;  }  try {    socket.connect();  } catch (  IOException e) {    mCallback.failure(String.format("Exception connceting to %s on peer %s. IOException: %s",remoteUUID,mPeer,e));    return;  }  if (socket.isConnected()) {    mCallback.success(socket);  } else {    mCallback.failure(String.format("Socket to %s on %s wasn't connected after connection attempt.",remoteUUID,mPeer));  }}  }
class C{  @Override protected boolean removeEldestEntry(final Map.Entry<Object,Object> eldest){  return size() > maxSize;}  }
class C{  private void fireDataStatusChanged(DataStatusEvent e){  DataStatusListener[] listeners=listenerList.getListeners(DataStatusListener.class);  for (int i=0; i < listeners.length; i++)   listeners[i].dataStatusChanged(e);}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  out.write(buf,0,count);}  }
class C{  private void clearDirty(){  memory.clearDirty();  reg.clearDirty();}  }
class C{  public HadoopSplitWrapper(){}  }
class C{  public void sendPrefixedMessage(BaseComponent... components){  super.sendMessage(new UnlocalizedComponentBuilder("[{0}] {1}",new BaseComponent[]{new TeamComponent(team),Components.compress(components)}).color(team.getColor()).build());}  }
class C{  @Nullable protected Map<String,String> fetchPropertiesFromLocalFile(Version version){  Path pathToProperties=getDownloadDirectory(version).resolve(Artifact.ARTIFACT_PROPERTIES_FILE_NAME);  if (!Files.exists(pathToProperties)) {    return null;  }  try (InputStream in=newInputStream(pathToProperties)){    Properties properties=new Properties();    properties.load(in);    Map<String,String> propertiesMap=new HashMap<>();    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {      String key=(String)entry.getKey();      String value=(String)entry.getValue();      propertiesMap.put(key,value);    }    return propertiesMap;  } catch (  IOException e) {    return null;  }}  }
class C{  protected void initDataBindings(){  JTableBinding<MovieSetChooserModel,List<MovieSetChooserModel>,JTable> jTableBinding=SwingBindings.createJTableBinding(UpdateStrategy.READ,movieSetsFound,tableMovieSets);  BeanProperty<MovieSetChooserModel,String> movieSetChooserModelBeanProperty=BeanProperty.create("name");  jTableBinding.addColumnBinding(movieSetChooserModelBeanProperty).setEditable(false);  jTableBinding.bind();  BeanProperty<JTable,List<MovieInSet>> jTableBeanProperty=BeanProperty.create("selectedElement.movies");  JTableBinding<MovieInSet,JTable,JTable> jTableBinding_1=SwingBindings.createJTableBinding(UpdateStrategy.READ,tableMovieSets,jTableBeanProperty,tableMovies);  BeanProperty<MovieInSet,String> movieInSetBeanProperty=BeanProperty.create("name");  jTableBinding_1.addColumnBinding(movieInSetBeanProperty).setColumnName(BUNDLE.getString("tmm.movie")).setEditable(false);  BeanProperty<MovieInSet,String> movieInSetBeanProperty_2=BeanProperty.create("movie.title");  jTableBinding_1.addColumnBinding(movieInSetBeanProperty_2).setColumnName(BUNDLE.getString("movieset.movie.matched")).setEditable(false);  jTableBinding_1.bind();  BeanProperty<JTable,String> jTableBeanProperty_1=BeanProperty.create("selectedElement.name");  BeanProperty<JTextArea,String> jTextAreaBeanProperty=BeanProperty.create("text");  AutoBinding<JTable,String,JTextArea,String> autoBinding=Bindings.createAutoBinding(UpdateStrategy.READ,tableMovieSets,jTableBeanProperty_1,lblMovieSetName,jTextAreaBeanProperty);  autoBinding.bind();  BeanProperty<JTable,String> jTableBeanProperty_2=BeanProperty.create("selectedElement.posterUrl");  BeanProperty<ImageLabel,String> imageLabelBeanProperty=BeanProperty.create("imageUrl");  AutoBinding<JTable,String,ImageLabel,String> autoBinding_1=Bindings.createAutoBinding(UpdateStrategy.READ,tableMovieSets,jTableBeanProperty_2,lblMovieSetPoster,imageLabelBeanProperty);  autoBinding_1.bind();}  }
class C{  public void validate(FacesContext facesContext,UIComponent component,Object value) throws ValidatorException {  if (value == null) {    return;  }  String str=value.toString();  if (str.indexOf('{') < 0 && str.indexOf('}') < 0 && str.indexOf("/*") < 0) {    return;  }  Object[] args=null;  String label=JSFUtils.getLabel(component);  ValidationException e=new ValidationException(ValidationException.ReasonEnum.CSS_VALUE,label,null);  String text=JSFUtils.getText(e.getMessageKey(),args,facesContext);  throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));}  }
class C{  @Override public boolean isChangeTrackingSupported(Project project){  ClassDescriptor referencedDescriptor=getReferenceDescriptor();  if (referencedDescriptor == null) {    Iterator ordered=project.getOrderedDescriptors().iterator();    while (ordered.hasNext() && referencedDescriptor == null) {      ClassDescriptor descriptor=(ClassDescriptor)ordered.next();      if (descriptor.getJavaClassName().equals(getReferenceClassName())) {        referencedDescriptor=descriptor;      }    }  }  if (referencedDescriptor != null) {    if (!referencedDescriptor.supportsChangeTracking(project)) {      return false;    }    if (referencedDescriptor.hasInheritance()) {      for (Iterator iterator=referencedDescriptor.getInheritancePolicy().getChildDescriptors().iterator(); iterator.hasNext(); ) {        ClassDescriptor subclassDescriptor=(ClassDescriptor)iterator.next();        if (!subclassDescriptor.supportsChangeTracking(project)) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  public CannotInvokeException(String reason){  super(reason);}  }
class C{  public Boolean isIpV6Enabled(){  return ipV6Enabled;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double k=0.5;  double z;  int rIn, gIn, bIn, rOut, gOut, bOut;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  k=Double.parseDouble(args[2]);  if (k < 0) {    k=0;  }  if (k > 1) {    k=1;  }  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    if (input.getDataScale() != WhiteboxRasterBase.DataScale.RGB) {      showFeedback("The input image should be of an RGB data scale.");      return;    }    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRasterBase.DataScale.RGB);    double[] data;    int minVal;    double rMax=0, gMax=0, bMax=0;    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          rIn=((int)z & 0xFF);          gIn=(((int)z >> 8) & 0xFF);          bIn=(((int)z >> 16) & 0xFF);          minVal=rIn;          if (gIn < minVal) {            minVal=gIn;          }          if (bIn < minVal) {            minVal=bIn;          }          rOut=(int)(rIn - k * minVal);          gOut=(int)(gIn - k * minVal);          bOut=(int)(bIn - k * minVal);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          if (rOut > rMax) {            rMax=rOut;          }          if (gOut > gMax) {            gMax=gOut;          }          if (bOut > bMax) {            bMax=bOut;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          rIn=((int)z & 0xFF);          gIn=(((int)z >> 8) & 0xFF);          bIn=(((int)z >> 16) & 0xFF);          rOut=(int)(rIn / rMax * 255);          gOut=(int)(gIn / gMax * 255);          bOut=(int)(bIn / bMax * 255);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void applyProfile(ProfileConfig profile,Tuple input,JSONObject message) throws ParseException, UnsupportedEncodingException {  String onlyIf=profile.getOnlyif();  if (StringUtils.isBlank(onlyIf) || executor.execute(onlyIf,message,Boolean.class)) {    String entity=executor.execute(profile.getForeach(),message,String.class);    collector.emit(input,new Values(entity,profile,message));  }}  }
class C{  private String printOFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0;  if (sx.equals("0") && precisionSet && precision == 0)   sx="";  if (precisionSet)   nLeadingZeros=precision - sx.length();  if (alternateForm)   nLeadingZeros++;  if (nLeadingZeros < 0)   nLeadingZeros=0;  if (fieldWidthSet)   nBlanks=fieldWidth - nLeadingZeros - sx.length();  if (nBlanks < 0)   nBlanks=0;  int n=nLeadingZeros + sx.length() + nBlanks;  char[] ca=new char[n];  int i;  if (leftJustify) {    for (i=0; i < nLeadingZeros; i++)     ca[i]='0';    char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++)     ca[i]=csx[j];    for (int j=0; j < nBlanks; j++, i++)     ca[i]=' ';  } else {    if (leadingZeros)     for (i=0; i < nBlanks; i++)     ca[i]='0'; else     for (i=0; i < nBlanks; i++)     ca[i]=' ';    for (int j=0; j < nLeadingZeros; j++, i++)     ca[i]='0';    char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++)     ca[i]=csx[j];  }  return new String(ca);}  }
class C{  private static void pruneCandidates(HashSet<Register> candidates){  for (Iterator<Register> i=candidates.iterator(); i.hasNext(); ) {    Register r=i.next();    Instruction s=r.getFirstDef();    Operand val1=getUseFromCandidate(s);    if (val1 == null)     continue;    if (VM.VerifyAssertions) {      boolean isRegister=val1.isRegister();      if (!isRegister) {        String msg="Error with val1 of " + s;        VM._assert(VM.NOT_REACHED,msg);      }    }    Register v1=val1.asRegister().getRegister();    if (candidates.contains(v1)) {      Enumeration<RegisterOperand> uses=DefUse.uses(v1);      while (uses.hasMoreElements()) {        RegisterOperand op=uses.nextElement();        Instruction u=op.instruction;        if ((isCandidateExpression(u,true) == null) && !Move.conforms(u)) {          i.remove();          break;        }      }    }  }}  }
class C{  public static boolean isNotEmpty(final char[] array){  return array != null && array.length != 0;}  }
class C{  protected boolean handleOplogEvent(ServerAddress primaryAddress,Document event){  logger.debug("Found event: {}",event);  String ns=event.getString("ns");  Document object=event.get("o",Document.class);  if (object == null) {    logger.warn("Missing 'o' field in event, so skipping {}",event.toJson());    return true;  }  if (ns == null || ns.isEmpty()) {    String msg=object.getString("msg");    if ("new primary".equals(msg)) {      logger.info("Found new primary event in oplog, so stopping use of {} to continue with new primary",primaryAddress);      return false;    }    logger.debug("Skipping event with no namespace: {}",event.toJson());    return true;  }  int delimIndex=ns.indexOf('.');  if (delimIndex > 0) {    assert (delimIndex + 1) < ns.length();    String dbName=ns.substring(0,delimIndex);    String collectionName=ns.substring(delimIndex + 1);    if ("$cmd".equals(collectionName)) {      logger.debug("Skipping database command event: {}",event.toJson());      return true;    }    CollectionId collectionId=new CollectionId(rsName,dbName,collectionName);    if (collectionFilter.test(collectionId)) {      RecordsForCollection factory=recordMakers.forCollection(collectionId);      try {        factory.recordEvent(event,clock.currentTimeInMillis());      } catch (      InterruptedException e) {        Thread.interrupted();        return false;      }    }  }  return true;}  }
class C{  protected boolean scrollLeft(TextView widget,Spannable buffer,int amount){  final int minScrollX=getScrollBoundsLeft(widget);  int scrollX=widget.getScrollX();  if (scrollX > minScrollX) {    scrollX=Math.max(scrollX - getCharacterWidth(widget) * amount,minScrollX);    widget.scrollTo(scrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public synchronized ScanManagerConfig readFromFile() throws IOException {  final File f=new File(file);  if (!f.exists())   throw new IOException("No such file: " + file);  if (!f.canRead())   throw new IOException("Can't read file: " + file);  try {    return read(f);  } catch (  JAXBException x) {    final IOException io=new IOException("Failed to read SessionConfigBean from " + file + ": "+ x,x);    throw io;  }}  }
class C{  public OMScalingIcon(double centerLat,double centerLon,Image image){  this(centerLat,centerLon,0,0,image,4000000);  setMaxScale(4000000);  setMinScale(4000000);}  }
class C{  protected void displayImageFromAssets(String imageUri,ImageView imageView) throws IOException {  String filePath=Scheme.ASSETS.crop(imageUri);  Bitmap bitmap;  try {    bitmap=BitmapFactory.decodeStream(context.getAssets().open(filePath));  } catch (  IOException e) {    e.printStackTrace();    return;  }  if (imageView != null) {    imageView.setImageBitmap(bitmap);  }}  }
class C{  private static DefaultTestCase buildTestCase0() throws NoSuchMethodException, SecurityException, ClassNotFoundException {  TestCaseBuilder builder=new TestCaseBuilder();  VariableReference int0=builder.appendIntPrimitive(10);  VariableReference int1=builder.appendIntPrimitive(10);  VariableReference int2=builder.appendIntPrimitive(10);  Class<?> fooClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  Method barMethod=fooClass.getMethod("bar",int.class,int.class,int.class);  builder.appendMethod(null,barMethod,int0,int1,int2);  return builder.getDefaultTestCase();}  }
class C{  private boolean isSelectionTemplate(){  if (fContext instanceof DocumentTemplateContext) {    DocumentTemplateContext ctx=(DocumentTemplateContext)fContext;    if (ctx.getCompletionLength() > 0)     return true;  }  return false;}  }
class C{  public static Description createSuiteDescription(Class<?> testClass){  return new Description(testClass,testClass.getName(),testClass.getAnnotations());}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  public boolean hasSameIrritants(IrritantSet irritantSet){  if (irritantSet == null)   return false;  for (int i=0; i < GROUP_MAX; i++) {    if (this.bits[i] != irritantSet.bits[i])     return false;  }  return true;}  }
class C{  public void drawAsOneDot(String prefix,String name){  DotGraph dot=new DotGraph(name);  dot.setGraphLabel(name);  dot.setGraphAttribute("compound","true");  dot.setGraphAttribute("rankdir","LR");  Map<Unit,Integer> node=new HashMap<Unit,Integer>();  int id=0;  Iterator it=graph.iterator();  while (it.hasNext()) {    Unit stmt=(Unit)it.next();    PurityGraphBox ref=(PurityGraphBox)getFlowAfter(stmt);    DotGraph sub=dot.createSubGraph("cluster" + id);    DotGraphNode label=sub.drawNode("head" + id);    String lbl=stmt.toString();    if (lbl.startsWith("lookupswitch"))     lbl="lookupswitch...";    if (lbl.startsWith("tableswitch"))     lbl="tableswitch...";    sub.setGraphLabel(" ");    label.setLabel(lbl);    label.setAttribute("fontsize","18");    label.setShape("box");    ref.g.fillDotGraph("X" + id,sub);    node.put(stmt,new Integer(id));    id++;  }  it=graph.iterator();  while (it.hasNext()) {    Object src=it.next();    Iterator itt=graph.getSuccsOf(src).iterator();    while (itt.hasNext()) {      Object dst=itt.next();      DotGraphEdge edge=dot.drawEdge("head" + node.get(src),"head" + node.get(dst));      edge.setAttribute("ltail","cluster" + node.get(src));      edge.setAttribute("lhead","cluster" + node.get(dst));    }  }  File f=new File(SourceLocator.v().getOutputDir(),prefix + name + DotGraph.DOT_EXTENSION);  dot.plot(f.getPath());}  }
class C{  protected ApproximationLine conservativeKnnDistanceApproximation(int k_max){  int k_0=k_max;  double y_1=Double.NEGATIVE_INFINITY;  double y_kmax=Double.NEGATIVE_INFINITY;  for (int i=0; i < getNumEntries(); i++) {    MkCoPEntry entry=getEntry(i);    ApproximationLine approx=entry.getConservativeKnnDistanceApproximation();    k_0=Math.min(approx.getK_0(),k_0);  }  for (int i=0; i < getNumEntries(); i++) {    MkCoPEntry entry=getEntry(i);    ApproximationLine approx=entry.getConservativeKnnDistanceApproximation();    double entry_y_1=approx.getValueAt(k_0);    double entry_y_kmax=approx.getValueAt(k_max);    if (!Double.isInfinite(entry_y_1)) {      y_1=Math.max(entry_y_1,y_1);    }    if (!Double.isInfinite(entry_y_kmax)) {      y_kmax=Math.max(entry_y_kmax,y_kmax);    }  }  double m=(y_kmax - y_1) / (Math.log(k_max) - Math.log(k_0));  double t=y_1 - m * Math.log(k_0);  return new ApproximationLine(k_0,m,t);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.FEATURE_PARAMETER__FEATURE_TYPE:    return basicSetFeatureType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void writeFile(File file,byte[] input,CompressionMode mode) throws IOException {  try (OutputStream os=getOutputStreamForMode(mode,new FileOutputStream(file))){    os.write(input);  } }  }
class C{  public short readShort(){  short x=0;  for (int i=0; i < 2; i++) {    char c=readChar();    x<<=8;    x|=c;  }  return x;}  }
class C{  private void verifyRpConsistencyGroupMigration() throws Exception {  log.info("Verifying RP BlockConsistencyGroup and associated volume migration.");  BlockConsistencyGroup rpCg=_dbClient.queryObject(BlockConsistencyGroup.class,rpConsistencyGroupURI);  Assert.assertNotNull("The RP+VPlex BlockConsistencyGroup.systemConsistencyGroups field should be populated.",rpCg.getSystemConsistencyGroups());  Assert.assertTrue("The RP+VPlex BlockConsistencyGroup.systemConsistencyGroups field should contain a mapping for " + protectionSystemURI.toString() + "-> ViPR-"+ rpCg.getLabel(),rpCg.getSystemConsistencyGroups().get(protectionSystemURI.toString()).contains("ViPR-" + rpCg.getLabel()));  Iterator<Volume> rpVolumeItr=_dbClient.queryIterativeObjects(Volume.class,rpVolumeURIs);  verifyConsistencyGroupMigration(rpCg,Types.RP.name());  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (rpVolumeItr.hasNext()) {    blockObjects.add(rpVolumeItr.next());  }  verifyBlockObjects(blockObjects);}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return new FlowTextNode();}  }
class C{  public static boolean isRuntimeException(ITypeBinding thrownException){  if (thrownException == null || thrownException.isPrimitive() || thrownException.isArray())   return false;  return findTypeInHierarchy(thrownException,"java.lang.RuntimeException") != null;}  }
class C{  private boolean parse(){  if (mData == null) {    return true;  }  if (mData.length < 1) {    return false;  }  mVersion=mData[0] & 0xff;  String[] names=new String(mData,1,mData.length - 1).split(",");  mUniqueServiceNames=new ArrayList<String>();  for (  String name : names) {    mUniqueServiceNames.add(name);  }  return true;}  }
class C{  @Path("propdel") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse propdel(final PropertyDeleteRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.propdel(request);}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) / 2) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  public static int encodeWeight(long value){  if (value < 0 || value > Integer.MAX_VALUE) {    throw new UnsupportedOperationException("cannot encode value: " + value);  }  return Integer.MAX_VALUE - (int)value;}  }
class C{  static void scheduleRetry(Context context){  new Handler(context.getMainLooper()).post(new Scheduler(context));}  }
class C{  protected EnumSyntax(int value){  this.value=value;}  }
class C{  protected final Class<?> defineClass(String name,ByteBuffer b,ProtectionDomain protectionDomain) throws ClassFormatError {  byte[] temp=new byte[b.remaining()];  b.get(temp);  return defineClass(name,temp,0,temp.length,protectionDomain);}  }
class C{  protected boolean addToPendingNodes(final Link l,final Node n,final PseudoRemovePriorityQueue<Node> pendingNodes,final double currTime,final double currCost,final Node toNode){  this.customDataManager.initForLink(l);  double travelTime=this.timeFunction.getLinkTravelTime(l,currTime,this.person,this.vehicle);  double travelCost=this.costFunction.getLinkTravelDisutility(l,currTime,this.person,this.vehicle);  DijkstraNodeData data=getData(n);  double nCost=data.getCost();  if (!data.isVisited(getIterationId())) {    visitNode(n,data,pendingNodes,currTime + travelTime,currCost + travelCost,l);    this.customDataManager.storeTmpData();    return true;  }  double totalCost=currCost + travelCost;  if (totalCost < nCost) {    revisitNode(n,data,pendingNodes,currTime + travelTime,totalCost,l);    this.customDataManager.storeTmpData();    return true;  }  return false;}  }
class C{  public static void add(List<String> options,String option,double value){  options.add("-" + option);  options.add("" + value);}  }
class C{  public static String lowercaseFirstLetter(String data){  char firstLetter=Character.toLowerCase(data.substring(0,1).charAt(0));  String restLetters=data.substring(1);  return firstLetter + restLetters;}  }
class C{  public DimensionalComparator(int dimensionsToTest){  if (dimensionsToTest != 2 && dimensionsToTest != 3)   throw new IllegalArgumentException("only 2 or 3 dimensions may be specified");  this.dimensionsToTest=dimensionsToTest;}  }
class C{  public static void main(String... args) throws SQLException {  new RunScript().runTool(args);}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || StringUtils.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);      s.append("\n");    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public PriceModel(UUID id){  this.id=id;}  }
class C{  @Override public void tearDown() throws Exception {  try {    this.ctx.unbind(this.tempDir.getAbsolutePath() + "/test");    this.ctx.close();    this.tempDir.delete();  }  finally {    super.tearDown();  }}  }
