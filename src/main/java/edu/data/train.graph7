class C{  public JEditTextArea(TextAreaDefaults defaults){  enableEvents(AWTEvent.KEY_EVENT_MASK);  painter=new TextAreaPainter(this,defaults);  documentHandler=new DocumentHandler();  listenerList=new EventListenerList();  caretEvent=new MutableCaretEvent();  lineSegment=new Segment();  bracketLine=bracketPosition=-1;  blink=true;  setLayout(new ScrollLayout());  add(CENTER,painter);  add(RIGHT,vertical=new JScrollBar(JScrollBar.VERTICAL));  add(BOTTOM,horizontal=new JScrollBar(JScrollBar.HORIZONTAL));  vertical.addAdjustmentListener(new AdjustHandler());  horizontal.addAdjustmentListener(new AdjustHandler());  painter.addComponentListener(new ComponentHandler());  painter.addMouseListener(new MouseHandler());  painter.addMouseMotionListener(new DragHandler());  painter.addMouseWheelListener(new MouseHandler());  addFocusListener(new FocusHandler());  setInputHandler(defaults.inputHandler);  setDocument(defaults.document);  editable=defaults.editable;  caretVisible=defaults.caretVisible;  caretBlinks=defaults.caretBlinks;  electricScroll=defaults.electricScroll;  popup=defaults.popup;  focusedComponent=this;}  }
class C{  public DefaultClientWebRequestBuilder accept(String... mediaTypes){  this.httpHeaders.setAccept(Arrays.stream(mediaTypes).map(null).collect(Collectors.toList()));  return this;}  }
class C{  public void clear() throws IOException {  nioFile.truncate(HEADER_LENGTH);}  }
class C{  public static void main(String[] args) throws CloneNotSupportedException {  Integer[] list1={-44,-5,-3,3,3,1,-4,0,1,2,4,5,53};  Integer[] list2={-44,-5,-3,3,5,1,-4,0,1,2,4,5,53};  Heap<Integer> heap1=new Heap<>(list1);  Heap<Integer> heap2=(Heap)heap1.clone();  Heap<Integer> heap3=new Heap<>(list2);  System.out.println("Heap1 is " + (heap1.equals(heap2) ? "" : "not ") + "equal to heap2");  System.out.println("Heap1 is " + (heap1.equals(heap3) ? "" : "not ") + "equal to heap3");}  }
class C{  public void sendToBack(Figure figure){  if (basicRemove(figure) != -1) {    basicAdd(0,figure);    fireAreaInvalidated(figure.getDrawingArea());  }}  }
class C{  public static Product toNewTemplateProduct(final VOService voProduct,final TechnicalProduct tProd,final Organization organization) throws ValidationException {  Product product=new Product();  product.setType(ServiceType.TEMPLATE);  product.setStatus(ServiceStatus.INACTIVE);  product.setProvisioningDate(DateFactory.getInstance().getTransactionTime());  product.setVendor(organization);  product.setTechnicalProduct(tProd);  if (tProd.getAccessType() == ServiceAccessType.EXTERNAL) {    final PriceModel pm=new PriceModel();    pm.setType(PriceModelType.FREE_OF_CHARGE);    product.setPriceModel(pm);  }  copyAttributes(product,voProduct);  return product;}  }
class C{  void sendMessageToHandlerWithControllerReset(List<OFMessage> messages) throws Exception {  sendMessageToHandlerNoControllerReset(messages);}  }
class C{  private void connect() throws IOException {  client=AFTPClient.getInstance(conn.secure(),address,conn.getPort(),conn.getUsername(),conn.getPassword(),conn.getFingerprint(),conn.getStopOnError());  setConnectionSettings(client,conn);  if (conn.getTransferMode() == FTPConstant.TRANSFER_MODE_ASCCI)   getClient().setFileType(FTP.ASCII_FILE_TYPE); else   if (conn.getTransferMode() == FTPConstant.TRANSFER_MODE_BINARY)   getClient().setFileType(FTP.BINARY_FILE_TYPE);  try {    Proxy.start(conn.getProxyServer(),conn.getProxyPort(),conn.getProxyUser(),conn.getProxyPassword());    client.connect();  }  finally {    Proxy.end();  }}  }
class C{  public void start(){  isRunning=true;  start=_time();}  }
class C{  public void createTopic(String topic,int numPartitions,int replicationFactor){  RackAwareMode rackAwareMode=null;  AdminUtils.createTopic(getZkUtils(),topic,numPartitions,replicationFactor,new Properties(),rackAwareMode);}  }
class C{  public boolean isViewRunning(){  return mIsRunning;}  }
class C{  public final int establishedFusionMode(){  return establishedFusionMode;}  }
class C{  public static String random(final int count,final String chars){  if (chars == null) {    return random(count,0,0,false,false,null,RANDOM);  }  return random(count,chars.toCharArray());}  }
class C{  public void push(Object obj){  stack.push(requireNonNull(obj));}  }
class C{  public void buscarProcedimientoReemplazoAvanzadoExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  BusquedasHelper.buscarProcedimientoComunLogic(mappings,(BusquedaElementosForm)form,request,response);  setReturnActionFordward(request,mappings.findForward("form_busqueda_generica"));}  }
class C{  public ThumbnailParameterBuilder useExifOrientation(boolean use){  this.useExifOrientation=use;  return this;}  }
class C{  private void decrementWorkerCount(){  for (; ; ) {    int c=ctl.get();    if (ctl.compareAndSet(c,ctlOf(runStateOf(c),workerCountOf(c) - 1)))     break;  }}  }
class C{  public <T>MappingIterator<T> readValues(String json) throws IOException, JsonProcessingException {  JsonParser jp=_jsonFactory.createJsonParser(json);  if (_schema != null) {    jp.setSchema(_schema);  }  DeserializationContext ctxt=_createDeserializationContext(jp,_config);  return new MappingIterator<T>(_valueType,jp,ctxt,_findRootDeserializer(_config,_valueType),true,_valueToUpdate);}  }
class C{  protected TypeVar pickFreshTypeVarInstance(IdentityHashMap<TypeVar.TypeInstance,TypeVar> staleToFresh){  if (staleToFresh.containsKey(this.instance)) {    return staleToFresh.get(this.instance);  }  if (this.instance.isRigid) {    this.instance.unifiedVars=new LinkedList<>();    this.instance.unifiedVars.add(new WeakReference<>(this));    return this;  }  TypeVar fresh=new TypeVar(this.instance.name,this.instance.internal,this.instance.isRigid,this.instance.constraints.clone(),null);  staleToFresh.put(this.instance,fresh);  return fresh;}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new KeywordAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public ThrowableSet mightThrowImplicitly(ThrowStmt t){  return ThrowableSet.Manager.v().ALL_THROWABLES;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.876 -0500",hash_original_method="54479FEAF5918A2D0015420E3AF1868D",hash_generated_method="70A6BE8E028F56F9FFA10E60669FE620") public ComposeShader(Shader shaderA,Shader shaderB,Xfermode mode){  mShaderA=shaderA;  mShaderB=shaderB;  native_instance=nativeCreate1(shaderA.native_instance,shaderB.native_instance,(mode != null) ? mode.native_instance : 0);  if (mode instanceof PorterDuffXfermode) {    PorterDuff.Mode pdMode=((PorterDuffXfermode)mode).mode;    native_shader=nativePostCreate2(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0);  } else {    native_shader=nativePostCreate1(native_instance,shaderA.native_shader,shaderB.native_shader,mode != null ? mode.native_instance : 0);  }}  }
class C{  private void addTreeToCas(JCas jCas,DEPTree tree,WINDOW_TYPE window,List<TOKEN_TYPE> tokens){  ArrayList<DEPENDENCY_NODE_TYPE> nodes=new ArrayList<DEPENDENCY_NODE_TYPE>(tree.size());  DEPENDENCY_ROOT_NODE_TYPE rootNode=this.dependencyOps.createRootNode(jCas,window);  nodes.add(rootNode);  for (int i=0; i < tokens.size(); i++) {    TOKEN_TYPE token=tokens.get(i);    nodes.add(this.dependencyOps.createNode(jCas,token));  }  Multimap<DEPENDENCY_NODE_TYPE,DEPENDENCY_RELATION_TYPE> headRelations=HashMultimap.create();  Multimap<DEPENDENCY_NODE_TYPE,DEPENDENCY_RELATION_TYPE> childRelations=HashMultimap.create();  for (int i=0; i < tree.size(); i++) {    DEPNode parserNode=tree.get(i);    if (parserNode.hasHead()) {      int headIndex=parserNode.getHead().getID();      DEPENDENCY_NODE_TYPE node=nodes.get(i);      DEPENDENCY_NODE_TYPE headNode=nodes.get(headIndex);      DEPENDENCY_RELATION_TYPE rel=this.dependencyOps.createRelation(jCas,headNode,node,parserNode.getLabel());      headRelations.put(node,rel);      childRelations.put(headNode,rel);    }  }  for (  DEPENDENCY_NODE_TYPE node : nodes) {    this.dependencyOps.setHeadRelations(jCas,node,Lists.newArrayList(headRelations.get(node)));    this.dependencyOps.setChildRelations(jCas,node,Lists.newArrayList(childRelations.get(node)));    node.addToIndexes();  }}  }
class C{  public Ragdoll(Model model,String name,Vector3 location,Vector3 rotation,Vector3 scale,btCollisionShape shape,float mass,short belongsToFlag,short collidesWithFlag,boolean callback,boolean noDeactivate,Array<BlenderEmpty> ragdollEmpties,String armatureNodeId,SteerSettings steerSettings){  super(model,name,location,rotation,scale,shape,mass,belongsToFlag,collidesWithFlag,callback,noDeactivate,steerSettings);  createRagdoll(ragdollEmpties,armatureNodeId);}  }
class C{  public synchronized void countUp(){  this.count_++;}  }
class C{  static int decode4ByteInt(byte[] data,int pos){  int result=data[pos + 3] & 0xFF;  result=result | ((data[pos + 2] & 0xFF) << 8);  result=result | ((data[pos + 1] & 0xFF) << 16);  result=result | ((data[pos] & 0xFF) << 24);  return result;}  }
class C{  public static void createImageToStorage(String url,Label l,String cacheId,Dimension toScale){  createImageToStorage(url,l,cacheId,toScale,PRIORITY_NORMAL);}  }
class C{  public void stopForegroundCompat(int id){  foreground=false;  if (mStopForeground != null) {    mStopForegroundArgs[0]=Boolean.TRUE;    try {      mStopForeground.invoke(this,mStopForegroundArgs);    } catch (    InvocationTargetException e) {    }catch (    IllegalAccessException e) {    }  } else {    notificationManager.cancel(id);    try {      Method setForeground=getClass().getMethod("setForeground",mSetForegroudSignaure);      setForeground.invoke(this,new Object[]{true});    } catch (    NoSuchMethodException exception) {    }catch (    InvocationTargetException e) {    }catch (    IllegalAccessException e) {    }  }}  }
class C{  public HttpSendSocket(InetAddress address,int port) throws IOException {  this(address.getHostName(),port);}  }
class C{  public void startServer(WebServer.MessageHandler logResult,int port){  this.logResult=logResult;  setIsRunning(true);  WifiManager wifiManager=(WifiManager)getSystemService(WIFI_SERVICE);  WifiInfo wifiInfo=wifiManager.getConnectionInfo();  WebServerDefault.setWebServerIp(WebServerDefault.intToIp(wifiInfo.getIpAddress()));  if (wifiInfo.getSupplicantState() != SupplicantState.COMPLETED) {    this.logResult.OnError("Please connect to a WIFI-network.");    try {      throw new Exception("Please connect to a WIFI-network.");    } catch (    Exception e) {      e.printStackTrace();    }  }  webServers=new Servers(engine.getApplicationContext(),logResult,port);  webServers.start();  updateNotification("running on " + WebServerDefault.WebServerIp + ":"+ port);}  }
class C{  SolrInputDocument processAdd(final String chain,final SolrInputDocument docIn) throws IOException {  SolrCore core=h.getCore();  UpdateRequestProcessorChain pc=core.getUpdateProcessingChain(chain);  assertNotNull("No Chain named: " + chain,pc);  SolrQueryResponse rsp=new SolrQueryResponse();  SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());  try {    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    AddUpdateCommand cmd=new AddUpdateCommand(req);    cmd.solrDoc=docIn;    UpdateRequestProcessor processor=pc.createProcessor(req,rsp);    processor.processAdd(cmd);    return cmd.solrDoc;  }  finally {    SolrRequestInfo.clearRequestInfo();    req.close();  }}  }
class C{  @Override public String next(){  currLine=nextLine;  nextLine();  if (nextLine == null && series.hasNextEpisode()) {    nextEpisode();    nextLine();  }  ChainBuilder.THIS.setLabel("Reading Episode #" + series.currentEpisodeNum + " in "+ series.toString());  return currLine;}  }
class C{  public void closePopout(Channel channel){  if (channel == null) {    return;  }  if (!dialogs.containsKey(channel)) {    return;  }  JDialog dialog=dialogs.remove(channel);  dialog.dispose();  popoutDisposed(channel);}  }
class C{  protected List refreshVerticalTicks(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List result=new java.util.ArrayList();  result.clear();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  if (isAutoTickUnitSelection()) {    selectAutoTickUnit(g2,dataArea,edge);  }  double unit=getTickUnit().getSize();  double cycleBound=getCycleBound();  double currentTickValue=Math.ceil(cycleBound / unit) * unit;  double upperValue=getRange().getUpperBound();  boolean cycled=false;  boolean boundMapping=this.boundMappedToLastCycle;  this.boundMappedToLastCycle=true;  NumberTick lastTick=null;  float lastY=0.0f;  if (upperValue == cycleBound) {    currentTickValue=calculateLowestVisibleTickValue();    cycled=true;    this.boundMappedToLastCycle=true;  }  while (currentTickValue <= upperValue) {    boolean cyclenow=false;    if ((currentTickValue + unit > upperValue) && !cycled) {      cyclenow=true;    }    double yy=valueToJava2D(currentTickValue,dataArea,edge);    String tickLabel;    NumberFormat formatter=getNumberFormatOverride();    if (formatter != null) {      tickLabel=formatter.format(currentTickValue);    } else {      tickLabel=getTickUnit().valueToString(currentTickValue);    }    float y=(float)yy;    TextAnchor anchor;    TextAnchor rotationAnchor;    double angle=0.0;    if (isVerticalTickLabels()) {      if (edge == RectangleEdge.LEFT) {        anchor=TextAnchor.BOTTOM_CENTER;        if ((lastTick != null) && (lastY == y) && (currentTickValue != cycleBound)) {          anchor=isInverted() ? TextAnchor.BOTTOM_LEFT : TextAnchor.BOTTOM_RIGHT;          result.remove(result.size() - 1);          result.add(new CycleBoundTick(this.boundMappedToLastCycle,lastTick.getNumber(),lastTick.getText(),anchor,anchor,lastTick.getAngle()));          this.internalMarkerWhenTicksOverlap=true;          anchor=isInverted() ? TextAnchor.BOTTOM_RIGHT : TextAnchor.BOTTOM_LEFT;        }        rotationAnchor=anchor;        angle=-Math.PI / 2.0;      } else {        anchor=TextAnchor.BOTTOM_CENTER;        if ((lastTick != null) && (lastY == y) && (currentTickValue != cycleBound)) {          anchor=isInverted() ? TextAnchor.BOTTOM_RIGHT : TextAnchor.BOTTOM_LEFT;          result.remove(result.size() - 1);          result.add(new CycleBoundTick(this.boundMappedToLastCycle,lastTick.getNumber(),lastTick.getText(),anchor,anchor,lastTick.getAngle()));          this.internalMarkerWhenTicksOverlap=true;          anchor=isInverted() ? TextAnchor.BOTTOM_LEFT : TextAnchor.BOTTOM_RIGHT;        }        rotationAnchor=anchor;        angle=Math.PI / 2.0;      }    } else {      if (edge == RectangleEdge.LEFT) {        anchor=TextAnchor.CENTER_RIGHT;        if ((lastTick != null) && (lastY == y) && (currentTickValue != cycleBound)) {          anchor=isInverted() ? TextAnchor.BOTTOM_RIGHT : TextAnchor.TOP_RIGHT;          result.remove(result.size() - 1);          result.add(new CycleBoundTick(this.boundMappedToLastCycle,lastTick.getNumber(),lastTick.getText(),anchor,anchor,lastTick.getAngle()));          this.internalMarkerWhenTicksOverlap=true;          anchor=isInverted() ? TextAnchor.TOP_RIGHT : TextAnchor.BOTTOM_RIGHT;        }        rotationAnchor=anchor;      } else {        anchor=TextAnchor.CENTER_LEFT;        if ((lastTick != null) && (lastY == y) && (currentTickValue != cycleBound)) {          anchor=isInverted() ? TextAnchor.BOTTOM_LEFT : TextAnchor.TOP_LEFT;          result.remove(result.size() - 1);          result.add(new CycleBoundTick(this.boundMappedToLastCycle,lastTick.getNumber(),lastTick.getText(),anchor,anchor,lastTick.getAngle()));          this.internalMarkerWhenTicksOverlap=true;          anchor=isInverted() ? TextAnchor.TOP_LEFT : TextAnchor.BOTTOM_LEFT;        }        rotationAnchor=anchor;      }    }    CycleBoundTick tick=new CycleBoundTick(this.boundMappedToLastCycle,new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);    if (currentTickValue == cycleBound) {      this.internalMarkerCycleBoundTick=tick;    }    result.add(tick);    lastTick=tick;    lastY=y;    if (currentTickValue == cycleBound) {      this.internalMarkerCycleBoundTick=tick;    }    currentTickValue+=unit;    if (cyclenow) {      currentTickValue=calculateLowestVisibleTickValue();      upperValue=cycleBound;      cycled=true;      this.boundMappedToLastCycle=false;    }  }  this.boundMappedToLastCycle=boundMapping;  return result;}  }
class C{  public static ApplicationXml parseApplicationXml(InputStream input,EntityResolver entityResolver) throws IOException, JDOMException {  ApplicationXmlIo io=new ApplicationXmlIo();  SAXBuilder builder=io.createDocumentBuilder();  if (entityResolver != null) {    builder.setEntityResolver(entityResolver);  } else {    builder.setEntityResolver(new ApplicationXmlEntityResolver());  }  return (ApplicationXml)builder.build(input);}  }
class C{  public TranscoderException(Exception ex){  this(null,ex);}  }
class C{  @Override public final void perform(IR ir){  ir.desiredSSAOptions=new SSAOptions();  ir.desiredSSAOptions.setScalarsOnly(true);  ir.desiredSSAOptions.setBackwards(false);  ir.desiredSSAOptions.setInsertUsePhis(false);}  }
class C{  public TestProxySelector(int server_port,int proxy_port){  this.server_port=server_port;  this.proxy_port=proxy_port;}  }
class C{  public MutableDateTime(long instant){  super(instant);}  }
class C{  public static List<SelectArg> makeSelectArgsFromList(Collection<? extends Object> items){  List<SelectArg> args=new ArrayList<SelectArg>(items.size());  for (  Object item : items) {    args.add(new SelectArg(item));  }  return args;}  }
class C{  public void mouseClicked(MouseEvent e){  if (e.getClickCount() > 1) {    System.gc();  }}  }
class C{  public static TicketFlags parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new TicketFlags(subDer);  }}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder latitude(double latitude){  this.latitude=latitude;  return this;}  }
class C{  public void findAndInit(Object someObj){  if (!(someObj instanceof DrawingTool)) {    super.findAndInit(someObj);  }  if (editorTool != null) {    editorTool.findAndInit(someObj);  }  if (someObj instanceof InformationDelegator || someObj instanceof SelectMouseMode) {    getMouseMode().findAndInit(someObj);  }}  }
class C{  public void testSuccessWithDefaultConfig(){  CircuitBreaker breaker=new CircuitBreaker();  breaker.close();  ClosedState state=new ClosedState(breaker);  assertTrue(breaker.isClosed());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  @Override public String generateLabelString(XYDataset dataset,int series,int item){  String result;  Object[] items=createItemArray((XYZDataset)dataset,series,item);  result=MessageFormat.format(getFormatString(),items);  return result;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public ExternalizableStringSet(@NonNls String... defaultValues){  this.defaultValues=defaultValues.length == 0 ? ArrayUtil.EMPTY_STRING_ARRAY : defaultValues;  for (  String defaultValue : defaultValues) {    add(defaultValue);  }}  }
class C{  JCERSAPrivateCrtKey(PrivateKeyInfo info) throws IOException {  this(org.bouncycastle.asn1.pkcs.RSAPrivateKey.getInstance(info.parsePrivateKey()));}  }
class C{  public SSLConfig(boolean useSSL,boolean clientAuth,String keyStore,String keyStorePassword,String trustStore,String trustStorePassword){  this.useSsl=useSSL;  this.clientAuth=clientAuth;  this.keyStore=keyStore;  this.keyStorePassword=keyStorePassword;  this.trustStore=trustStore;  this.trustStorePassword=trustStorePassword;}  }
class C{  public TwitterMoPubAdAdapter(Activity activity,Adapter originalAdapter,MoPubNativeAdPositioning.MoPubClientPositioning adPositioning){  super(activity,originalAdapter,adPositioning);}  }
class C{  public void insertHistory(Weather w){  History yesterday=searchYesterdayHistory(w);  clearLocationHistory(w);  HistoryEntityDao dao=new DaoMaster(getDatabase()).newSession().getHistoryEntityDao();  if (yesterday != null) {    dao.insert(HistoryEntity.build(yesterday));  }  dao.insert(HistoryEntity.build(History.build(w)));}  }
class C{  public TimeEvent(Object src,long systemTime,long offsetTime,long simTime,TimerStatus timerStatus){  this.source=src;  this.systemTime=systemTime;  this.offsetTime=offsetTime;  this.simTime=simTime;  this.timerStatus=timerStatus;}  }
class C{  public long webgraphSize(){  return this.writeWebgraph ? this.getWebgraphConnector().getSize() : 0;}  }
class C{  public int indexOf(ElementInfo child){  ArrayList children=this.children;  if (children != null) {    return children.indexOf(child);  }  return -1;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:11.437 -0500",hash_original_method="EA37E144790F39B12A14B8A0E7D897B0",hash_generated_method="73377B88F34C63C9BB19DF8D05F68AF6") @Deprecated public NinePatchDrawable(Bitmap bitmap,byte[] chunk,Rect padding,String srcName){  this(new NinePatchState(new NinePatch(bitmap,chunk,srcName),padding),null);}  }
class C{  public MekaFrame(GraphicsConfiguration gc){  this("",gc);}  }
class C{  public void writeIntArray(int[] array,boolean append){  try {    DataOutput dos;    if (bigEndian) {      dos=new DataOutputStream(stream);    } else {      dos=new LEDataOutputStream(stream);    }    for (int i=0; i < array.length; i++) {      dos.writeInt(array[i]);    }    stream.close();  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unwritable : " + e.toString());  }}  }
class C{  public static double orthogonalDistance(GeoPoint point,GeoPoint lineStart,GeoPoint lineEnd){  double area=Math.abs((lineStart.getLatitude() * lineEnd.getLongitude() + lineEnd.getLatitude() * point.getLongitude() + point.getLatitude() * lineStart.getLongitude() - lineEnd.getLatitude() * lineStart.getLongitude() - point.getLatitude() * lineEnd.getLongitude() - lineStart.getLatitude() * point.getLongitude()) / 2.0);  double bottom=Math.hypot(lineStart.getLatitude() - lineEnd.getLatitude(),lineStart.getLongitude() - lineEnd.getLongitude());  return (area / bottom * 2.0);}  }
class C{  public static void receiveFromInputStream(DatagramPacket p,InputStream inputStream,InetAddress inetAddress,int port) throws IOException {  int b0=inputStream.read();  int b1=inputStream.read();  if (b0 == -1 || b1 == -1) {    p.setLength(0);    throw new SocketException("read failed");  }  int frameLen=((b0 & 0xFF) << 8) | (b1 & 0xFF);  int readLen=0;  byte[] data=p.getData();  int off=0;  while (readLen < frameLen) {    int len=inputStream.read(data,off,frameLen - off);    if (len == -1) {      throw new SocketException("read failed");    } else {      off+=len;      readLen+=len;    }  }  if (readLen == frameLen) {    p.setAddress(inetAddress);    p.setData(data,0,frameLen);    p.setPort(port);  } else {    throw new SocketException("Failed to receive data from socket");  }}  }
class C{  private void connectToSocket(){  SocketManager.getInstance().setListener(socketListener);  SocketManager.getInstance().connectToSocket(getActivity());}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public Enumeration<Element> elements(){  return (registry.elements());}  }
class C{  public static CreateVariableClause create(String variableType,String variableName){  return new CreateVariableClause(variableType,variableName,null,false);}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isDate(String s){  pp.setIndex(0);  return df.parse(s,pp) != null;}  }
class C{  static Node flush(Node node){  long x=node.bitmap - ((-6148914691236517206L & node.bitmap) >>> 1);  node.bitmap=x | ((-6148914691236517206L & x) >>> 1);  return node;}  }
class C{  public static final String timeStamp(Date date){  return timeStamp(date,null);}  }
class C{  public synchronized void add(DccLocoAddress locoAddress,boolean directionNormal){  if (!contains(locoAddress)) {    if (ConsistList.size() == 0) {      byte command=NceBinaryCommand.LOCO_CMD_FWD_CONSIST_LEAD;      if (!directionNormal) {        command=NceBinaryCommand.LOCO_CMD_REV_CONSIST_LEAD;      }      addLocoToConsist(locoAddress.getNumber(),locoAddress.isLongAddress(),command);      ConsistPosition.put(locoAddress,DccConsist.POSITION_LEAD);    } else     if (ConsistList.size() == 1) {      byte command=NceBinaryCommand.LOCO_CMD_FWD_CONSIST_REAR;      if (!directionNormal) {        command=NceBinaryCommand.LOCO_CMD_REV_CONSIST_REAR;      }      addLocoToConsist(locoAddress.getNumber(),locoAddress.isLongAddress(),command);      ConsistPosition.put(locoAddress,DccConsist.POSITION_TRAIL);    } else {      byte command=NceBinaryCommand.LOCO_CMD_FWD_CONSIST_MID;      if (!directionNormal) {        command=NceBinaryCommand.LOCO_CMD_REV_CONSIST_MID;      }      addLocoToConsist(locoAddress.getNumber(),locoAddress.isLongAddress(),command);      ConsistPosition.put(locoAddress,ConsistPosition.size());    }    ConsistList.add(locoAddress);    ConsistDir.put(locoAddress,Boolean.valueOf(directionNormal));  } else {    log.error("Loco " + locoAddress + " is already part of this consist "+ getConsistAddress());  }}  }
class C{  public static short[] toShortArray(boolean[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? (short)1 : (short)0;  }  return result;}  }
class C{  public static void checkMainThread(){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && Looper.myLooper() != Looper.getMainLooper()) {    throw new IllegalStateException("Not in applications main thread");  }}  }
class C{  public final void waitForReplies() throws InterruptedException, ReplyException {  boolean result=waitForReplies(0);  Assert.assertTrue(result,"failed but no exception thrown");}  }
class C{  private VPlexMigrationInfo migrateLocalVirtualVolumeExtent(String migrationName,VPlexVirtualVolumeInfo virtualVolumeInfo,Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap,boolean startNow,String transferSize) throws VPlexApiException {  String localDeviceName=virtualVolumeInfo.getSupportingDevice();  s_logger.info("Finding local device with name {}",localDeviceName);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexDeviceInfo deviceInfo=discoveryMgr.findLocalDevice(localDeviceName);  if (null == deviceInfo) {    throw VPlexApiException.exceptions.cantFindLocalDevice(localDeviceName);  }  discoveryMgr.setSupportingComponentsForLocalDevice(deviceInfo);  List<VPlexExtentInfo> extentInfoList=deviceInfo.getExtentInfo();  if (null == extentInfoList || extentInfoList.isEmpty()) {    throw VPlexApiException.exceptions.cantFindExtentForLocalDevice(localDeviceName);  }  String extentName=extentInfoList.get(0).getName();  s_logger.info("Finding extent with name {}",extentName);  VPlexExtentInfo srcExtentInfo=discoveryMgr.findExtent(extentName);  s_logger.info("Found source extent");  VPlexApiVirtualVolumeManager virtualVolumeMgr=_vplexApiClient.getVirtualVolumeManager();  virtualVolumeMgr.claimStorageVolumes(storageVolumeInfoMap,false);  s_logger.info("Claimed storage volume");  try {    List<VPlexStorageVolumeInfo> storageVolumeInfoList=new ArrayList<VPlexStorageVolumeInfo>(storageVolumeInfoMap.values());    virtualVolumeMgr.createExtents(storageVolumeInfoList);    s_logger.info("Created extent on storage volume");    VPlexExtentInfo tgtExtentInfo=discoveryMgr.findExtents(storageVolumeInfoList).get(0);    s_logger.info("Found target extent");    VPlexMigrationInfo migrationInfo=migrateResource(migrationName,srcExtentInfo,tgtExtentInfo,false,startNow,transferSize);    migrationInfo.setVirtualVolumeInfo(virtualVolumeInfo);    return migrationInfo;  } catch (  Exception e) {    s_logger.info("Exception occurred migrating local volume extent, attempting to cleanup VPLEX artifacts");    try {      List<VolumeInfo> nativeVolumeInfoList=new ArrayList<VolumeInfo>();      nativeVolumeInfoList.addAll(storageVolumeInfoMap.keySet());      virtualVolumeMgr.deleteVirtualVolume(nativeVolumeInfoList);    } catch (    Exception ex) {      s_logger.error("Failed attempting to cleanup VPLEX after failed attempt " + "to migrate local virtual volume by extent {}",virtualVolumeInfo.getPath(),ex);    }    throw e;  }}  }
class C{  protected static String addMavenNamespace(String effectiveXml,boolean isPom){  SAXBuilder builder=new SAXBuilder();  try {    Document document=builder.build(new StringReader(effectiveXml));    Element rootElement=document.getRootElement();    Namespace pomNamespace=Namespace.getNamespace("","http://maven.apache.org/POM/4.0.0");    rootElement.setNamespace(pomNamespace);    Namespace xsiNamespace=Namespace.getNamespace("xsi","http://www.w3.org/2001/XMLSchema-instance");    rootElement.addNamespaceDeclaration(xsiNamespace);    if (rootElement.getAttribute("schemaLocation",xsiNamespace) == null) {      rootElement.setAttribute("schemaLocation","http://maven.apache.org/POM/4.0.0 " + (isPom ? POM_XSD_URL : SETTINGS_XSD_URL),xsiNamespace);    }    ElementFilter elementFilter=new ElementFilter(Namespace.getNamespace(""));    for (Iterator<?> i=rootElement.getDescendants(elementFilter); i.hasNext(); ) {      Element e=(Element)i.next();      e.setNamespace(pomNamespace);    }    StringWriter w=new StringWriter();    Format format=Format.getPrettyFormat();    XMLOutputter out=new XMLOutputter(format);    out.output(document.getRootElement(),w);    return w.toString();  } catch (  JDOMException e) {    return effectiveXml;  }catch (  IOException e) {    return effectiveXml;  }}  }
class C{  public SentenceSplitter(String[] input){  this.input=input;  sentences=new LinkedList<>();}  }
class C{  public ObjectFactory(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.925 -0500",hash_original_method="9793E04705FFD088D66045627DCAA850",hash_generated_method="2F742925FADB1FDDF79355A7C4F82E50") void _processWill(int option) throws IOException {  if (debugoptions) {    System.err.println("RECEIVED WILL: " + TelnetOption.getOption(option));  }  if (__notifhand != null) {    __notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_WILL,option);  }  boolean acceptNewState=false;  if (optionHandlers[option] != null) {    acceptNewState=optionHandlers[option].getAcceptRemote();  }  if (_doResponse[option] > 0) {    --_doResponse[option];    if (_doResponse[option] > 0 && _stateIsDo(option)) {      --_doResponse[option];    }  }  if (_doResponse[option] == 0 && _requestedDont(option)) {switch (option) {default :      break;  }  if (acceptNewState) {    _setWantDo(option);    _sendDo(option);  } else {    ++_doResponse[option];    _sendDont(option);  }}_setDo(option);}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  public boolean levelCheck(int iter){  if (levelChecked < iter) {    levelChecked=iter;    boolean opDeclLevelCheck=opDeclNode.levelCheck(iter);    level=opDeclNode.getLevel();    if (set != null) {      levelCorrect=set.levelCheck(iter);      level=Math.max(set.getLevel(),level);      if (level == TemporalLevel) {        levelCorrect=false;        errors.addError(this.stn.getLocation(),"Level error:\n" + "Temporal formula used as set.");      }    }    ;    levelCorrect=levelCorrect && opDeclLevelCheck;    if (set != null) {      levelParams=set.getLevelParams();      allParams=set.getAllParams();      levelConstraints=set.getLevelConstraints();      argLevelConstraints=set.getArgLevelConstraints();      argLevelParams=set.getArgLevelParams();    }    ;  }  ;  return levelCorrect;}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new UnmodifiableRandomAccessList<E>(list);  }  return this;}  }
class C{  @Override public Object radioBut(final FormObject form){  final ToggleButton radioBut=new ToggleButton();  final JavaFXControlListener controlListener=new JavaFXControlListener(radioBut);  final StringBuilder styleBuilder=new StringBuilder(200);  radioBut.setUserData(RADIOBUTTON);  final boolean[] flags=form.getFieldFlags();  if ((flags != null) && (flags[FormObject.READONLY_ID])) {    radioBut.setDisable(true);  }  setupUniversalFeatures(radioBut,form,styleBuilder,controlListener);  setupButton(radioBut,form,controlListener);  setupToggleGroup(form,radioBut);  addFont(form,false,false,styleBuilder);  styleBuilder.append("-fx-padding:0;-fx-border:none;-fx-background-color:transparent;");  radioBut.selectedProperty().addListener(new JavaFXRadioListener(radioBut,form));  radioBut.setStyle(styleBuilder.toString());  return radioBut;}  }
class C{  protected ShapePainter createFillStrokePainter(BridgeContext ctx,Element e,ShapeNode shapeNode){  return PaintServer.convertStrokePainter(e,shapeNode,ctx);}  }
class C{  protected List<Animator> createAnimators(){  return animatorList;}  }
class C{  public void hideSplashScreen(){  if (splashScreen != null) {    splashScreen.close();    splashScreen=null;  }}  }
class C{  public static byte[] decode(final byte[] compressed) throws IOException {  ByteArrayInputStream byteIn=new ByteArrayInputStream(compressed);  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();  GZIPInputStream gzIn=null;  try {    gzIn=new GZIPInputStream(byteIn);    int read;    byte[] buffer=new byte[BUFFER_SIZE];    do {      read=gzIn.read(buffer);      if (read > 0) {        byteOut.write(buffer,0,read);      }    } while (read >= 0);    return byteOut.toByteArray();  }  finally {    gzIn.close();    byteOut.close();  }}  }
class C{  public GasStack(Gas gas,int quantity){  type=gas;  amount=quantity;}  }
class C{  public void readJasmin(Reader input,String name,boolean numberLines) throws IOException, Exception {  errors=0;  filename=name;  source_name=name;  cur_method=null;  cur_field=null;  cur_annotation=null;  class_header=false;  auto_number=numberLines;  class_env=new ClassEnv();  scanner=new Scanner(input);  parser parse_obj=new parser(this,scanner);  if (PARSER_DEBUG) {    parse_obj.debug_parse();  } else {    parse_obj.parse();  }}  }
class C{  private void write(int index,int value){  if (isWatched(index)) {    Clock.stop();    Trace.printf("%4d store %s: %08x -> %08x%n",Thread.currentThread().getId(),cellAddress(index),data[index],value);    Clock.start();  }  data[index]=value;}  }
class C{  public T caseDeclaredVersion(DeclaredVersion object){  return null;}  }
class C{  private void validateExtensionDataFile(ArchiveFile extFile) throws GeneratorException, InterruptedException, IOException {  addMessage(Level.INFO,"Validating the extension file: " + extFile.getTitle() + ". Depending on the number of records, this can take a while.");  Term id=TERM_FACTORY.findTerm(AppConfig.coreIdTerm(resource.getCoreRowType()));  Term occurrenceId=TERM_FACTORY.findTerm(Constants.DWC_OCCURRENCE_ID);  Term basisOfRecord=TERM_FACTORY.findTerm(Constants.DWC_BASIS_OF_RECORD);  int basisOfRecordIndex=-1;  if (isOccurrenceFile(extFile)) {    if (!extFile.hasTerm(basisOfRecord)) {      addMessage(Level.ERROR,"Archive validation failed, because required term basisOfRecord was not mapped in the occurrence extension data file: " + extFile.getTitle());      throw new GeneratorException("Can't validate DwC-A for resource " + resource.getShortname() + "Required term basisOfRecord was not mapped in the occurrence extension data file: "+ extFile.getTitle());    }    addMessage(Level.INFO,"? Validating the basisOfRecord in the occurrence extension data file is always present and its " + "value matches the Darwin Core Type Vocabulary.");    if (extFile.hasTerm(occurrenceId)) {      addMessage(Level.INFO,"? Validating the occurrenceId in occurrence extension data file is always present and unique. ");    } else {      addMessage(Level.WARN,"No occurrenceId found in occurrence extension. To be indexed by GBIF, each occurrence record within a resource must have a unique record level identifier.");    }    basisOfRecordIndex=extFile.getField(basisOfRecord).getIndex();  }  if (extFile.getId() == null) {    addMessage(Level.ERROR,"Archive validation failed, because the ID field " + id.simpleName() + "was not mapped in the extension data file: "+ extFile.getTitle());    throw new GeneratorException("Can't validate DwC-A for resource " + resource.getShortname() + ". The ID field was not mapped in the extension data file: "+ extFile.getTitle());  }  addMessage(Level.INFO,"? Validating the ID field " + id.simpleName() + " is always present in extension data file. ");  int sortColumnIndex=(extFile.hasTerm(occurrenceId) && extFile.getField(occurrenceId).getIndex() != null) ? extFile.getField(occurrenceId).getIndex() : ID_COLUMN_INDEX;  File sortedFile=sortCoreDataFile(extFile,sortColumnIndex);  CSVReader reader=CSVReaderFactory.build(sortedFile,CHARACTER_ENCODING,extFile.getFieldsTerminatedBy(),extFile.getFieldsEnclosedBy(),extFile.getIgnoreHeaderLines());  int recordsWithNoId=0;  AtomicInteger recordsWithNoOccurrenceId=new AtomicInteger(0);  AtomicInteger recordsWithDuplicateOccurrenceId=new AtomicInteger(0);  AtomicInteger recordsWithNoBasisOfRecord=new AtomicInteger(0);  AtomicInteger recordsWithNonMatchingBasisOfRecord=new AtomicInteger(0);  AtomicInteger recordsWithAmbiguousBasisOfRecord=new AtomicInteger(0);  ClosableReportingIterator<String[]> iter=null;  int line=0;  String lastId=null;  try {    iter=reader.iterator();    while (iter.hasNext()) {      line++;      if (line % 1000 == 0) {        checkForInterruption(line);        reportIfNeeded();      }      String[] record=iter.next();      if (record == null || record.length == 0) {        continue;      }      if (iter.hasRowError() && iter.getException() != null) {        throw new GeneratorException("A fatal error was encountered while trying to validate sorted extension data file: " + iter.getErrorMessage(),iter.getException());      } else {        if (Strings.isNullOrEmpty(record[ID_COLUMN_INDEX])) {          recordsWithNoId++;        }        if (isOccurrenceFile(extFile)) {          if (extFile.hasTerm(occurrenceId)) {            lastId=validateIdentifier(record[sortColumnIndex],lastId,recordsWithNoOccurrenceId,recordsWithDuplicateOccurrenceId);          }          validateBasisOfRecord(record[basisOfRecordIndex],line,recordsWithNoBasisOfRecord,recordsWithNonMatchingBasisOfRecord,recordsWithAmbiguousBasisOfRecord);        }      }    }  } catch (  InterruptedException e) {    setState(e);    throw e;  }catch (  Exception e) {    log.error("Exception caught while validating extension file",e);    setState(e);    throw new GeneratorException("Error while validating extension file occurred on line " + line,e);  } finally {    if (iter != null) {      if (!iter.hasRowError() && iter.getErrorMessage() != null) {        writePublicationLogMessage("Error reading data: " + iter.getErrorMessage());      }      iter.close();    }    FileUtils.deleteQuietly(sortedFile);  }  if (recordsWithNoId > 0) {    addMessage(Level.ERROR,String.valueOf(recordsWithNoId) + " line(s) in extension missing an ID " + id.simpleName()+ ", which is required when linking the extension record and core record together");    throw new GeneratorException("Can't validate DwC-A for resource " + resource.getShortname() + ". Each line in extension must have an ID "+ id.simpleName()+ ", which is required in order to link the extension to the core ");  } else {    addMessage(Level.INFO,"\u2713 Validated each line in extension has an ID " + id.simpleName());    writePublicationLogMessage("No lines in extension are missing an ID " + id.simpleName());  }  if (isOccurrenceFile(extFile)) {    if (extFile.hasTerm(occurrenceId)) {      summarizeIdentifierValidation(recordsWithNoOccurrenceId,recordsWithDuplicateOccurrenceId,occurrenceId.simpleName());    }    summarizeBasisOfRecordValidation(recordsWithNoBasisOfRecord,recordsWithNonMatchingBasisOfRecord,recordsWithAmbiguousBasisOfRecord);  }}  }
class C{  public static boolean isSupportNativeET(){  return SUPPORT_NATIVE_ET;}  }
class C{  public boolean drawImage(Image img,int x,int y,Color bgcolor,ImageObserver observer){  return drawImage(img,x,y,img.getWidth(null),img.getHeight(null),bgcolor,observer);}  }
class C{  public static boolean isGetter(Declaration decl){  return (decl instanceof Value) && !((Value)decl).isParameter() && ((Value)decl).isTransient();}  }
class C{  public void save(OutputStream out) throws IOException {  Writer w=new OutputStreamWriter(out,"UTF8");  save(w);  w.flush();}  }
class C{  public static void realft(double[] data,int isign){  com.nr.fft.FFT.realft(data,isign);}  }
class C{  @Override public void dispose(){  m_breakpointTable.dispose();}  }
class C{  public void fireGenerateEvent(int eventType,String name,String data){}  }
class C{  public boolean isAllMatches(){  return isAllMatches;}  }
class C{  protected FormalParameterImpl(){  super();}  }
class C{  @Override public void processSubToken(String subtok){  if (skey.isEmpty()) {    skey=subtok;  } else   if (sval.isEmpty()) {    sval=subtok;  }}  }
class C{  Region(int start,int end){  this.start=start;  this.end=end;  updateAvailable();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.085 -0500",hash_original_method="7CD774B1E9CE336DC45F8F4C393FF983",hash_generated_method="FD20BB14DD5208672DF9D0E4314121FC") @DSVerified @DSSafe(DSCat.SAFE_LIST) public IdentityHashMap(int maxSize){  super();  super.requestCapacity(maxSize);}  }
class C{  public boolean isMustCoerce(){  return isMustCoerce;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Node firstChild;  NodeList textList;  CharacterData textNode;  String data;  doc=(Document)load("staff",false);  root=doc.getDocumentElement();  root.normalize();  elementList=root.getElementsByTagName("name");  firstChild=elementList.item(2);  textList=firstChild.getChildNodes();  textNode=(CharacterData)textList.item(0);  data=textNode.getData();  assertEquals("data","Roger\n Jones",data);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public static AuthToken custom(String principal,String credentials,String realm,String scheme){  return new InternalAuthToken(parameters("scheme",scheme,"principal",principal,"credentials",credentials,"realm",realm).asMap(Values.ofValue()));}  }
class C{  @Override public String toString(){  return toString(false);}  }
class C{  public void updateBoolean(int columnIndex,boolean x) throws SQLException {  checkUpdatable();  getField(columnIndex).setBoolean(x);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:33.797 -0500",hash_original_method="2C829A46E677D5FF63843A6B74A54E87",hash_generated_method="E70428BC7F81D405D012426240F6C46E") private long jitterize(long minValue,long maxValue){  Random random=new Random(SystemClock.elapsedRealtime());  long spread=maxValue - minValue;  if (spread > Integer.MAX_VALUE) {    throw new IllegalArgumentException("the difference between the maxValue and the " + "minValue must be less than " + Integer.MAX_VALUE);  }  return minValue + random.nextInt((int)spread);}  }
class C{  public void addSequence(final Array datum,final Array weights){  QL.require(datum.size() == weights.size(),INCOMPATIBLE_ARRAY_SIZES);  for (int i=0; i < datum.size(); i++) {    add(datum.get(i),weights.get(i));  }}  }
class C{  public static Decimal negativeZero(int scale,MathContext mc){  return new NegativeZero(scale,mc);}  }
class C{  private static void swap(int[] x,int a,int b){  int t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public boolean isUnconfirmed(){  return UNKNOWN_ID.equals(getId());}  }
class C{  public ArithmeticCondition(String cond){  String value;  int multiplier=1;  if (cond.length() < 2) {    throw new SettingsError("Invalid condition \"" + cond + "\"");  }  operator=cond.charAt(0);  value=cond.substring(1);  if (value.endsWith("k")) {    multiplier=1000;  } else   if (value.endsWith("M")) {    multiplier=1000000;  }  if (multiplier > 1) {    value=value.substring(0,value.length() - 1);  }  if (VALID_OPERATORS.indexOf(operator) == -1) {    throw new SettingsError("Invalid operator in condition \"" + cond + "\" valid operators: "+ VALID_OPERATORS);  }  try {    number=Double.parseDouble(value);  } catch (  NumberFormatException e) {    throw new SettingsError("Invalid numeric value in condition \"" + cond + "\"");  }  number*=multiplier;}  }
class C{  private boolean isAnyCall(final List<INaviInstruction> instructions,final Set<INaviInstruction> calls){  for (  final INaviInstruction naviInstruction : instructions) {    if (calls.contains(naviInstruction)) {      return true;    }  }  return false;}  }
class C{  public ToggleLineNumbersAction(Application app,View view){  super(app,view);  labels.configureAction(this,ID);  setPropertyName("lineNumbersVisible");}  }
class C{  public void pick(MotionEvent event){  this.pickedObject=null;  PickedObjectList pickList=getWorldWindow().pick(event.getX(),event.getY());  PickedObject topPickedObject=pickList.topPickedObject();  if (topPickedObject != null) {    this.pickedObject=topPickedObject.getUserObject();  }}  }
class C{  public static void storagePortsJson(String id){  List<StoragePortInfo> items=Lists.newArrayList();  CachedResources<StorageSystemRestRep> storageSystems=StorageSystemUtils.createCache();  List<StoragePortRestRep> storagePorts=StoragePortUtils.getStoragePortsByVirtualArray(uri(id));  Map<URI,String> networks=NetworkUtils.getNetworkNamesByVirtualArray(id);  for (  StoragePortRestRep storagePort : storagePorts) {    StoragePortInfo item=new StoragePortInfo(storagePort,storageSystems.get(storagePort.getStorageDevice()));    item.assigned=VirtualArrayUtils.isAssigned(storagePort,id);    item.network=networks.get(id(storagePort.getNetwork()));    items.add(item);  }  renderJSON(DataTablesSupport.createJSON(items,params));}  }
class C{  final V putVal(int hash,K key,V value,boolean onlyIfAbsent,boolean evict){  Node<K,V>[] tab;  Node<K,V> p;  int n, i;  if ((tab=table) == null || (n=tab.length) == 0)   n=(tab=resize()).length;  if ((p=tab[i=(n - 1) & hash]) == null)   tab[i]=newNode(hash,key,value,null); else {    Node<K,V> e;    K k;    if (p.hash == hash && ((k=p.key) == key || (key != null && key.equals(k))))     e=p; else     if (p instanceof TreeNode)     e=((TreeNode<K,V>)p).putTreeVal(this,tab,hash,key,value); else {      for (int binCount=0; ; ++binCount) {        if ((e=p.next) == null) {          p.next=newNode(hash,key,value,null);          if (binCount >= TREEIFY_THRESHOLD - 1)           treeifyBin(tab,hash);          break;        }        if (e.hash == hash && ((k=e.key) == key || (key != null && key.equals(k))))         break;        p=e;      }    }    if (e != null) {      V oldValue=e.value;      if (!onlyIfAbsent || oldValue == null)       e.value=value;      afterNodeAccess(e);      return oldValue;    }  }  ++modCount;  if (++size > threshold)   resize();  afterNodeInsertion(evict);  return null;}  }
class C{  public ComputeCooccurrenceMatrixPairs(){}  }
class C{  protected boolean doPrompt(){  return true;}  }
class C{  public boolean rowDeleted() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  @Override public void writeByteStream(InputStream is) throws IOException {  while (true) {    int len=SIZE - _offset - 3;    if (len < 16) {      flushBuffer();      len=SIZE - _offset - 3;    }    len=is.read(_buffer,_offset + 3,len);    if (len <= 0) {      _buffer[_offset++]=BC_BINARY_DIRECT;      return;    }    _buffer[_offset + 0]=(byte)BC_BINARY_CHUNK;    _buffer[_offset + 1]=(byte)(len >> 8);    _buffer[_offset + 2]=(byte)(len);    _offset+=len + 3;  }}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public void update(boolean simulateConnections){  if (!isRadioActive()) {    tearDownAllConnections();    return;  }  if (simulateConnections) {    for (    NetworkInterface i : net) {      i.update();    }  }  this.router.update();}  }
class C{  public static Document createXMLTable(AxSf axsf,AxSfQueryResults queryResults,Locale locale,Integer autoDist,Integer distPerm,boolean canModify,boolean canOpenReg,String caseSensitive,String orderByTable,FieldFormat fieldFormat){  String data=axsf.getFormat().getData();  TableFormat tableFormat=new TableFormat(data);  longFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_LONGFORMAT));  shortFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_SHORTFORMAT));  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_INVESDOC_TEXT);  Element tableInfo=root.addElement(XML_TABLEINFO_TEXT);  addTableInfoHeader(queryResults.getTotalQuerySize(),queryResults.getCurrentFirstRow(),autoDist,caseSensitive,tableInfo,orderByTable);  addTableFormat(axsf,tableFormat,queryResults,tableInfo,locale);  addTableText(tableFormat,queryResults,tableInfo,locale,fieldFormat);  addAuxData(queryResults,root);  addRights(canModify,canOpenReg,distPerm,root);  Element fieldsNodo=root.addElement(XML_FIELDS_LIST);  generatefieldsList(fieldsNodo);  return document;}  }
class C{  private void addAcquisitionLinks(Book book,Element entry){  if (!currentProfile.getGenerateOpdsDownloads()) {    if (logger.isTraceEnabled())     logger.trace("addAcquisitionLinks: exit: download links suppressed");    return;  }  if (logger.isTraceEnabled())   logger.trace("addAcquisitionLinks: links to the ebook files");  for (  EBookFile file : book.getFiles()) {    if (logger.isTraceEnabled())     logger.trace("addAcquisitionLinks: prepare to copy the ebook file " + file.getName());    CatalogManager.addFileToTheMapOfLibraryFilesToCopy(file.getFile(),(file.getFormat() == EBookFormat.EPUB) ? book : null);    String prefix=currentProfile.getUrlBooks();    if (Helper.isNullOrEmpty(prefix)) {      prefix=Constants.PARENT_PATH_PREFIX + Constants.PARENT_PATH_PREFIX;    }    entry.addContent(FeedHelper.getAcquisitionLink(prefix + FeedHelper.urlEncode(book.getPath(),true) + Constants.FOLDER_SEPARATOR+ FeedHelper.urlEncode(file.getName() + file.getExtension(),true),file.getFormat().getMime(),Localization.Main.getText("bookentry.download",file.getFormat()),currentProfile.getIncludeSizeOfDownloads() ? org.apache.commons.io.FileUtils.byteCountToDisplaySize(file.getFile().length()) : ""));    if (currentProfile.getIncludeOnlyOneFile()) {      if (logger.isTraceEnabled())       logger.trace("addAcquisitionLinks: break to avoid publishing other files");      break;    }  }}  }
class C{  public void login(Account account){  loggedAccount=account;}  }
class C{  public int size(){  return eventQueue.size();}  }
class C{  @Deprecated public static CallSite bootstrapCurrentSafe(Lookup caller,String name,MethodType type){  return realBootstrap(caller,name,CALL_TYPES.METHOD.ordinal(),type,true,true,false);}  }
class C{  static public Automaton repeat(Automaton a,int min,int max){  if (min > max) {    return Automata.makeEmpty();  }  Automaton b;  if (min == 0) {    b=Automata.makeEmptyString();  } else   if (min == 1) {    b=new Automaton();    b.copy(a);  } else {    List<Automaton> as=new ArrayList<>();    for (int i=0; i < min; i++) {      as.add(a);    }    b=concatenate(as);  }  Set<Integer> prevAcceptStates=toSet(b,0);  Automaton.Builder builder=new Automaton.Builder();  builder.copy(b);  for (int i=min; i < max; i++) {    int numStates=builder.getNumStates();    builder.copy(a);    for (    int s : prevAcceptStates) {      builder.addEpsilon(s,numStates);    }    prevAcceptStates=toSet(a,numStates);  }  return builder.finish();}  }
class C{  private void testManyEvents(int nodes) throws Throwable {  createServers(nodes);  CopycatClient client=createClient();  client.onEvent("test",null);  for (int i=0; i < 10; i++) {    client.submit(new TestEvent(true)).thenAccept(null);    await(30000,2);  }}  }
class C{  public static void addWhitelistedBlock(Block block){  whitelist.add(block);}  }
class C{  public LoggingFraction fileHandler(String name,String path,Level level,String formatter){  Map<Object,Object> fileProperties=new HashMap<>();  fileProperties.put("path",path);  fileProperties.put("relative-to","jboss.server.log.dir");  fileHandler(new FileHandler(name).level(level).formatter(formatter).file(fileProperties));  return this;}  }
class C{  public RandomizedCollection(){  list=new ArrayList<Integer>();  r=new Random();}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public void disabledPeriodic(){  if (dpFirstRun) {    System.out.println("NerdyIterativeRobot IterativeRobot.disabledPeriodic() method... Overload me!");    dpFirstRun=false;  }  Timer.delay(0.001);}  }
class C{  public final void shiftColumnDown(int row,int col,int numRowsShifted){  if (row >= getNumRows() || col >= getNumColumns()) {    throw new IllegalArgumentException("Out of range:  row = " + row + " col = "+ col);  }  int lastRow=-1;  for (int i=getNumRows() - 1; i >= row; i--) {    if (dataBox.get(i,col) != null) {      lastRow=i;      break;    }  }  if (lastRow == -1) {    return;  }  resize(getNumRows() + numRowsShifted,getNumColumns());  for (int i=getNumRows() - 1; i >= row + numRowsShifted; i--) {    dataBox.set(i,col,dataBox.get(i - numRowsShifted,col));    dataBox.set(i - numRowsShifted,col,null);  }}  }
class C{  public void emitDirect(int taskId,String streamId,Tuple anchor,List<Object> tuple){  emitDirect(taskId,streamId,Arrays.asList(anchor),tuple);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/endpoints") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Deprecated public NetworkRestRep updateNetworkEndpoints(@PathParam("id") URI id,NetworkEndpointParam param){  Network network=doUpdateEndpoints(id,param);  recordAndAudit(network,OperationTypeEnum.UPDATE_NETWORK);  return MapNetwork.toNetworkRestRep(network,_dbClient);}  }
class C{  @Override public boolean containsKey(final Object k){  if (!(k instanceof byte[]))   return false;  assert k != null;  if (this.cache == null)   return false;  final byte[] key=normalizeKey((byte[])k);  boolean h;synchronized (this) {    h=this.cache.containsKey(key) || this.blob.containsKey(key);  }  return h;}  }
class C{  public static void begin(ServletRequest request,ServletResponse response,String serviceName,String objectId) throws ServletException {  ServiceContext context=(ServiceContext)_localContext.get();  if (context == null) {    context=new ServiceContext();    _localContext.set(context);  }  context._request=request;  context._response=response;  context._serviceName=serviceName;  context._objectId=objectId;  context._count++;}  }
class C{  public School beginDate(SafeCalendar beginDate){  this.beginDate=beginDate;  return this;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public double evaluateClustering(Database db,Relation<O> rel,Clustering<?> cl){  final DistanceQuery<O> dq=rel.getDistanceQuery(distanceFunction);  List<? extends Cluster<?>> clusters=cl.getAllClusters();  final int numc=clusters.size();  @SuppressWarnings("unchecked") final Relation<? extends SpatialComparable> vrel=(Relation<? extends SpatialComparable>)rel;  final int dim=RelationUtil.dimensionality(vrel);  ArrayDBIDs[] cids=new ArrayDBIDs[numc];  double[][] coreDists=new double[numc][];  for (int c=0; c < numc; c++) {    Cluster<?> cluster=clusters.get(c);    if (cluster.isNoise() || cluster.size() < 2) {      coreDists[c]=null;      continue;    }    ArrayDBIDs ids=cids[c]=DBIDUtil.ensureArray(cluster.getIDs());    double[] clusterCoreDists=coreDists[c]=new double[ids.size()];    for (DBIDArrayIter it=ids.iter(), it2=ids.iter(); it.valid(); it.advance()) {      double currentCoreDist=0;      int neighbors=0;      for (it2.seek(0); it2.valid(); it2.advance()) {        if (DBIDUtil.equal(it,it2)) {          continue;        }        double dist=dq.distance(it,it2);        if (dist > 0) {          currentCoreDist+=MathUtil.powi(1. / dist,dim);          ++neighbors;        }      }      clusterCoreDists[it.getOffset()]=Math.pow(currentCoreDist / neighbors,-1. / dim);    }  }  int[][] clusterDegrees=new int[numc][];  double[] clusterDscMax=new double[numc];  boolean[] internalEdges=new boolean[numc];  for (int c=0; c < numc; c++) {    Cluster<?> cluster=clusters.get(c);    if (cluster.isNoise() || cluster.size() < 2) {      clusterDegrees[c]=null;      clusterDscMax[c]=Double.NaN;      continue;    }    double[] clusterCoreDists=coreDists[c];    ArrayDBIDs ids=cids[c];    double dscMax=0;    double[][] distances=new double[cluster.size()][cluster.size()];    for (DBIDArrayIter it=ids.iter(), it2=ids.iter(); it.valid(); it.advance()) {      double currentCoreDist=clusterCoreDists[it.getOffset()];      for (it2.seek(it.getOffset() + 1); it2.valid(); it2.advance()) {        double mutualReachDist=MathUtil.max(currentCoreDist,clusterCoreDists[it2.getOffset()],dq.distance(it,it2));        distances[it.getOffset()][it2.getOffset()]=mutualReachDist;        distances[it2.getOffset()][it.getOffset()]=mutualReachDist;      }    }    int[] nodes=PrimsMinimumSpanningTree.processDense(distances);    int[] degree=new int[cluster.size()];    for (int i=0; i < nodes.length; i++) {      degree[nodes[i]]++;    }    for (int i=0; i < nodes.length; i+=2) {      if (degree[nodes[i]] > 1 && degree[nodes[i + 1]] > 1) {        internalEdges[c]=true;      }    }    clusterDegrees[c]=degree;    for (int i=0; i < nodes.length; i=i + 2) {      final int n1=nodes[i], n2=nodes[i + 1];      if (distances[n1][n2] > dscMax) {        if (!internalEdges[c] || (degree[n1] > 1 && degree[n2] > 1)) {          dscMax=distances[n1][n2];        }      }    }    clusterDscMax[c]=dscMax;  }  double dbcv=0;  for (int c=0; c < numc; c++) {    Cluster<?> cluster=clusters.get(c);    if (cluster.isNoise() || cluster.size() < 2) {      continue;    }    double currentDscMax=clusterDscMax[c];    double[] clusterCoreDists=coreDists[c];    int[] currentDegree=clusterDegrees[c];    double dspcMin=Double.POSITIVE_INFINITY;    for (DBIDArrayIter it=cids[c].iter(); it.valid(); it.advance()) {      if (currentDegree[it.getOffset()] < 2 && internalEdges[c]) {        continue;      }      double currentCoreDist=clusterCoreDists[it.getOffset()];      for (int oc=0; oc < numc; oc++) {        Cluster<?> ocluster=clusters.get(oc);        if (ocluster.isNoise() || ocluster.size() < 2 || cluster == ocluster) {          continue;        }        int[] oDegree=clusterDegrees[oc];        double[] oclusterCoreDists=coreDists[oc];        for (DBIDArrayIter it2=cids[oc].iter(); it2.valid(); it2.advance()) {          if (oDegree[it2.getOffset()] < 2 && internalEdges[oc]) {            continue;          }          double mutualReachDist=MathUtil.max(currentCoreDist,oclusterCoreDists[it2.getOffset()],dq.distance(it,it2));          dspcMin=mutualReachDist < dspcMin ? mutualReachDist : dspcMin;        }      }    }    double vc=(dspcMin - currentDscMax) / MathUtil.max(dspcMin,currentDscMax);    double weight=cluster.size() / (double)rel.size();    dbcv+=weight * vc;  }  EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),cl,"Internal Clustering Evaluation","internal evaluation");  MeasurementGroup g=ev.findOrCreateGroup("Distance-based Evaluation");  g.addMeasure("Density Based Clustering Validation",dbcv,0.,Double.POSITIVE_INFINITY,0.,true);  db.getHierarchy().resultChanged(ev);  return dbcv;}  }
class C{  public JCMethodDecl MethodDef(MethodSymbol m,JCBlock body){  return MethodDef(m,m.type,body);}  }
class C{  public static FormatDateTimeFormatter forPattern(String input,Locale locale){  if (Strings.hasLength(input)) {    input=input.trim();  }  if (input == null || input.length() == 0) {    throw new IllegalArgumentException("No date pattern provided");  }  DateTimeFormatter formatter;  if ("basicDate".equals(input) || "basic_date".equals(input)) {    formatter=ISODateTimeFormat.basicDate();  } else   if ("basicDateTime".equals(input) || "basic_date_time".equals(input)) {    formatter=ISODateTimeFormat.basicDateTime();  } else   if ("basicDateTimeNoMillis".equals(input) || "basic_date_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.basicDateTimeNoMillis();  } else   if ("basicOrdinalDate".equals(input) || "basic_ordinal_date".equals(input)) {    formatter=ISODateTimeFormat.basicOrdinalDate();  } else   if ("basicOrdinalDateTime".equals(input) || "basic_ordinal_date_time".equals(input)) {    formatter=ISODateTimeFormat.basicOrdinalDateTime();  } else   if ("basicOrdinalDateTimeNoMillis".equals(input) || "basic_ordinal_date_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.basicOrdinalDateTimeNoMillis();  } else   if ("basicTime".equals(input) || "basic_time".equals(input)) {    formatter=ISODateTimeFormat.basicTime();  } else   if ("basicTimeNoMillis".equals(input) || "basic_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.basicTimeNoMillis();  } else   if ("basicTTime".equals(input) || "basic_t_Time".equals(input)) {    formatter=ISODateTimeFormat.basicTTime();  } else   if ("basicTTimeNoMillis".equals(input) || "basic_t_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.basicTTimeNoMillis();  } else   if ("basicWeekDate".equals(input) || "basic_week_date".equals(input)) {    formatter=ISODateTimeFormat.basicWeekDate();  } else   if ("basicWeekDateTime".equals(input) || "basic_week_date_time".equals(input)) {    formatter=ISODateTimeFormat.basicWeekDateTime();  } else   if ("basicWeekDateTimeNoMillis".equals(input) || "basic_week_date_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.basicWeekDateTimeNoMillis();  } else   if ("date".equals(input)) {    formatter=ISODateTimeFormat.date();  } else   if ("dateHour".equals(input) || "date_hour".equals(input)) {    formatter=ISODateTimeFormat.dateHour();  } else   if ("dateHourMinute".equals(input) || "date_hour_minute".equals(input)) {    formatter=ISODateTimeFormat.dateHourMinute();  } else   if ("dateHourMinuteSecond".equals(input) || "date_hour_minute_second".equals(input)) {    formatter=ISODateTimeFormat.dateHourMinuteSecond();  } else   if ("dateHourMinuteSecondFraction".equals(input) || "date_hour_minute_second_fraction".equals(input)) {    formatter=ISODateTimeFormat.dateHourMinuteSecondFraction();  } else   if ("dateHourMinuteSecondMillis".equals(input) || "date_hour_minute_second_millis".equals(input)) {    formatter=ISODateTimeFormat.dateHourMinuteSecondMillis();  } else   if ("dateOptionalTime".equals(input) || "date_optional_time".equals(input)) {    return new FormatDateTimeFormatter(input,ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC),ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC),locale);  } else   if ("dateTime".equals(input) || "date_time".equals(input)) {    formatter=ISODateTimeFormat.dateTime();  } else   if ("dateTimeNoMillis".equals(input) || "date_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.dateTimeNoMillis();  } else   if ("hour".equals(input)) {    formatter=ISODateTimeFormat.hour();  } else   if ("hourMinute".equals(input) || "hour_minute".equals(input)) {    formatter=ISODateTimeFormat.hourMinute();  } else   if ("hourMinuteSecond".equals(input) || "hour_minute_second".equals(input)) {    formatter=ISODateTimeFormat.hourMinuteSecond();  } else   if ("hourMinuteSecondFraction".equals(input) || "hour_minute_second_fraction".equals(input)) {    formatter=ISODateTimeFormat.hourMinuteSecondFraction();  } else   if ("hourMinuteSecondMillis".equals(input) || "hour_minute_second_millis".equals(input)) {    formatter=ISODateTimeFormat.hourMinuteSecondMillis();  } else   if ("ordinalDate".equals(input) || "ordinal_date".equals(input)) {    formatter=ISODateTimeFormat.ordinalDate();  } else   if ("ordinalDateTime".equals(input) || "ordinal_date_time".equals(input)) {    formatter=ISODateTimeFormat.ordinalDateTime();  } else   if ("ordinalDateTimeNoMillis".equals(input) || "ordinal_date_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.ordinalDateTimeNoMillis();  } else   if ("time".equals(input)) {    formatter=ISODateTimeFormat.time();  } else   if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.timeNoMillis();  } else   if ("tTime".equals(input) || "t_time".equals(input)) {    formatter=ISODateTimeFormat.tTime();  } else   if ("tTimeNoMillis".equals(input) || "t_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.tTimeNoMillis();  } else   if ("weekDate".equals(input) || "week_date".equals(input)) {    formatter=ISODateTimeFormat.weekDate();  } else   if ("weekDateTime".equals(input) || "week_date_time".equals(input)) {    formatter=ISODateTimeFormat.weekDateTime();  } else   if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {    formatter=ISODateTimeFormat.weekDateTimeNoMillis();  } else   if ("weekyear".equals(input) || "week_year".equals(input)) {    formatter=ISODateTimeFormat.weekyear();  } else   if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {    formatter=ISODateTimeFormat.weekyearWeek();  } else   if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {    formatter=ISODateTimeFormat.weekyearWeekDay();  } else   if ("year".equals(input)) {    formatter=ISODateTimeFormat.year();  } else   if ("yearMonth".equals(input) || "year_month".equals(input)) {    formatter=ISODateTimeFormat.yearMonth();  } else   if ("yearMonthDay".equals(input) || "year_month_day".equals(input)) {    formatter=ISODateTimeFormat.yearMonthDay();  } else   if ("epoch_second".equals(input)) {    formatter=new DateTimeFormatterBuilder().append(new EpochTimePrinter(false),new EpochTimeParser(false)).toFormatter();  } else   if ("epoch_millis".equals(input)) {    formatter=new DateTimeFormatterBuilder().append(new EpochTimePrinter(true),new EpochTimeParser(true)).toFormatter();  } else   if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {    formatter=StrictISODateTimeFormat.basicWeekDate();  } else   if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {    formatter=StrictISODateTimeFormat.basicWeekDateTime();  } else   if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {    formatter=StrictISODateTimeFormat.basicWeekDateTimeNoMillis();  } else   if ("strictDate".equals(input) || "strict_date".equals(input)) {    formatter=StrictISODateTimeFormat.date();  } else   if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {    formatter=StrictISODateTimeFormat.dateHour();  } else   if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {    formatter=StrictISODateTimeFormat.dateHourMinute();  } else   if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {    formatter=StrictISODateTimeFormat.dateHourMinuteSecond();  } else   if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {    formatter=StrictISODateTimeFormat.dateHourMinuteSecondFraction();  } else   if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {    formatter=StrictISODateTimeFormat.dateHourMinuteSecondMillis();  } else   if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {    return new FormatDateTimeFormatter(input,StrictISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC),StrictISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC),locale);  } else   if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {    formatter=StrictISODateTimeFormat.dateTime();  } else   if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {    formatter=StrictISODateTimeFormat.dateTimeNoMillis();  } else   if ("strictHour".equals(input) || "strict_hour".equals(input)) {    formatter=StrictISODateTimeFormat.hour();  } else   if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {    formatter=StrictISODateTimeFormat.hourMinute();  } else   if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {    formatter=StrictISODateTimeFormat.hourMinuteSecond();  } else   if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {    formatter=StrictISODateTimeFormat.hourMinuteSecondFraction();  } else   if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {    formatter=StrictISODateTimeFormat.hourMinuteSecondMillis();  } else   if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {    formatter=StrictISODateTimeFormat.ordinalDate();  } else   if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {    formatter=StrictISODateTimeFormat.ordinalDateTime();  } else   if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {    formatter=StrictISODateTimeFormat.ordinalDateTimeNoMillis();  } else   if ("strictTime".equals(input) || "strict_time".equals(input)) {    formatter=StrictISODateTimeFormat.time();  } else   if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {    formatter=StrictISODateTimeFormat.timeNoMillis();  } else   if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {    formatter=StrictISODateTimeFormat.tTime();  } else   if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {    formatter=StrictISODateTimeFormat.tTimeNoMillis();  } else   if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {    formatter=StrictISODateTimeFormat.weekDate();  } else   if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {    formatter=StrictISODateTimeFormat.weekDateTime();  } else   if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {    formatter=StrictISODateTimeFormat.weekDateTimeNoMillis();  } else   if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {    formatter=StrictISODateTimeFormat.weekyear();  } else   if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {    formatter=StrictISODateTimeFormat.weekyearWeek();  } else   if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {    formatter=StrictISODateTimeFormat.weekyearWeekDay();  } else   if ("strictYear".equals(input) || "strict_year".equals(input)) {    formatter=StrictISODateTimeFormat.year();  } else   if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {    formatter=StrictISODateTimeFormat.yearMonth();  } else   if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {    formatter=StrictISODateTimeFormat.yearMonthDay();  } else   if (Strings.hasLength(input) && input.contains("||")) {    String[] formats=Strings.delimitedListToStringArray(input,"||");    DateTimeParser[] parsers=new DateTimeParser[formats.length];    if (formats.length == 1) {      formatter=forPattern(input,locale).parser();    } else {      DateTimeFormatter dateTimeFormatter=null;      for (int i=0; i < formats.length; i++) {        FormatDateTimeFormatter currentFormatter=forPattern(formats[i],locale);        DateTimeFormatter currentParser=currentFormatter.parser();        if (dateTimeFormatter == null) {          dateTimeFormatter=currentFormatter.printer();        }        parsers[i]=currentParser.getParser();      }      DateTimeFormatterBuilder builder=new DateTimeFormatterBuilder().append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(),parsers);      formatter=builder.toFormatter();    }  } else {    try {      formatter=DateTimeFormat.forPattern(input);    } catch (    IllegalArgumentException e) {      throw new IllegalArgumentException("Invalid format: [" + input + "]: "+ e.getMessage(),e);    }  }  return new FormatDateTimeFormatter(input,formatter.withZone(DateTimeZone.UTC),locale);}  }
class C{  private void initializeLastNameEditText(){  lastNameEditText=(EditText)findViewById(R.id.last_name_edit_text);  lastNameEditText.addValidator(Validators.minLength(this,R.string.min_length_validator_error_message,MIN_NAME_LENGTH));  lastNameEditText.addValidator(Validators.beginsWithUppercaseLetter(this,R.string.begins_with_uppercase_letter_validator_error_message));  lastNameEditText.addValidator(Validators.letter(this,R.string.letter_validator_error_message,Case.CASE_INSENSITIVE,false,new char[]{'-'}));}  }
class C{  protected double estimateEigenvalue(double[][] mat,double[] in){  double de=0., di=0.;  for (int d1=0; d1 < in.length; d1++) {    final double[] row=mat[d1];    double t=0.;    for (int d2=0; d2 < in.length; d2++) {      t+=row[d2] * in[d2];    }    final double s=in[d1];    de+=t * s;    di+=s * s;  }  return de / di;}  }
class C{  @SuppressWarnings("unchecked") @Override public void write(BinaryRawWriterEx writer,Object obj,Throwable err){  Collection<EventAdapter> events=(Collection<EventAdapter>)obj;  writer.writeInt(events.size());  for (  EventAdapter e : events)   platformCtx.writeEvent(writer,e);}  }
class C{  private void onTrigger4(){  final CharSequence targetName=mAppsAdapter.getLabel(TARGET_POSITION);  addInstruction(R.string.accessibility_tutorial_lesson_1_text_5,true,targetName);  mAllApps.setAccessibilityDelegate(mTargetIconLoseFocusDelegate);  mAllApps.setOnItemClickListener(mTargetIconClickListener);}  }
class C{  public static void init(long max,long minorTick,long majorTick){  maxVal=max;  minorTickVal=(long)Math.ceil(max / 100.0 * minorTick);  majorTickVal=(long)Math.ceil(max / 100.0 * majorTick);  counter=new AtomicLong(0);  System.out.print("\tProgress: 0%");}  }
class C{  public void addFconst(float f){  if (f == 0.0f || f == 1.0f || f == 2.0f)   addOpcode(11 + (int)f); else   addLdc(constPool.addFloatInfo(f));}  }
class C{  public void uninstall(StatusListener listener){  logger.debug("Uninstalling the Data Hub from MarkLogic");  AppConfig config=getAppConfig();  HubAppDeployer deployer=new HubAppDeployer(client,adminManager,listener);  deployer.setCommands(getCommands(config));  deployer.undeploy(config);}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.test();}  }
class C{  public void clearPoints(){synchronized (locations) {    locations.clear();    pendingLocations.clear();  }}  }
class C{  public final AssertSubscriber<T> requestedFusionMode(int requestMode){  this.requestedFusionMode=requestMode;  return this;}  }
class C{  private static BigInteger toUnsignedBigInteger(long i){  if (i >= 0L) {    return BigInteger.valueOf(i);  } else {    int upper=(int)(i >>> 32);    int lower=(int)i;    return (BigInteger.valueOf(Integers.toUnsignedLong(upper))).shiftLeft(32).add(BigInteger.valueOf(Integers.toUnsignedLong(lower)));  }}  }
class C{  private FilterExpression buildIsNullOperator(List<Predicate.PathElement> path,List<String> arguments){  Operator elideOP;  try {    boolean argBool=(boolean)CoerceUtil.coerce(arguments.get(0),boolean.class);    if (argBool) {      elideOP=Operator.ISNULL;    } else {      elideOP=Operator.NOTNULL;    }    return new Predicate(path,elideOP);  } catch (  InvalidValueException e) {    throw new RSQLParseException(String.format("Invalid value for operator =isnull="));  }}  }
class C{  public String toString(){  String[] theTable=getStringTable();  int theIndex=value - getOffset();  return theTable != null && theIndex >= 0 && theIndex < theTable.length ? theTable[theIndex] : Integer.toString(value);}  }
class C{  public final TextBuilder append(boolean b){  return b ? append("true") : append("false");}  }
class C{  public String docType(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_DocType_ID=(Integer)value;  if (C_DocType_ID == null || C_DocType_ID.intValue() == 0)   return "";  String sql="SELECT d.DocBaseType, d.IsDocNoControlled, s.CurrentNext, " + "s.AD_Sequence_ID, s.StartNewYear, s.DateColumn, d.IsSOTrx " + "FROM C_DocType d "+ "LEFT OUTER JOIN AD_Sequence s ON (d.DocNoSequence_ID=s.AD_Sequence_ID) "+ "WHERE C_DocType_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    Env.setContext(ctx,WindowNo,"C_DocTypeTarget_ID",C_DocType_ID.intValue());    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_DocType_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      String DocBaseType=rs.getString("DocBaseType");      String trxFlag=rs.getString(7);      if (DocBaseType.equals("MMS")) {        boolean IsSOTrx="Y".equals(trxFlag);        if (IsSOTrx)         mTab.setValue("MovementType","C-"); else         mTab.setValue("MovementType","V-");      } else       if (DocBaseType.equals("MMR")) {        boolean IsSOTrx="Y".equals(trxFlag);        if (IsSOTrx)         mTab.setValue("MovementType","C+"); else         mTab.setValue("MovementType","V+");      }      if (!(trxFlag.equals(mTab.getValue("IsSOTrx"))))       mTab.setValue("IsSOTrx",trxFlag);      if (rs.getString("IsDocNoControlled").equals("Y")) {        if ("Y".equals(rs.getString(5))) {          String dateColumn=rs.getString(6);          int AD_Sequence_ID=rs.getInt(4);          mTab.setValue("DocumentNo","<" + MSequence.getPreliminaryNoByYear(mTab,AD_Sequence_ID,dateColumn,null) + ">");        } else         mTab.setValue("DocumentNo","<" + rs.getString("CurrentNext") + ">");      }    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return "";}  }
class C{  protected Double wrap(double k){  return new Double(k);}  }
class C{  public static void recordAction(int action){  assert action >= 0;  assert action < NUM_ACTIONS;switch (action) {case ACTION_OPENED_MOST_VISITED_ENTRY:    RecordUserAction.record("MobileNTPMostVisited");  break;case ACTION_OPENED_RECENTLY_CLOSED_ENTRY:RecordUserAction.record("MobileNTPRecentlyClosed");break;case ACTION_OPENED_BOOKMARK:RecordUserAction.record("MobileNTPBookmark");break;case ACTION_OPENED_FOREIGN_SESSION:RecordUserAction.record("MobileNTPForeignSession");break;default :break;}RecordHistogram.recordEnumeratedHistogram("NewTabPage.ActionAndroid",action,NUM_ACTIONS);}  }
class C{  public CarouselImageView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public boolean isContainedWithin(UUIDSet other){  if (other == null)   return false;  if (!this.getUUID().equalsIgnoreCase(other.getUUID())) {    return false;  }  if (this.intervals.isEmpty())   return true;  if (other.intervals.isEmpty())   return false;  assert this.intervals.size() > 0;  assert other.intervals.size() > 0;  for (  Interval thisInterval : this.intervals) {    boolean found=false;    for (    Interval otherInterval : other.intervals) {      if (thisInterval.isContainedWithin(otherInterval)) {        found=true;        break;      }    }    if (!found)     return false;  }  return true;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void addObservations(double[][] source,double[][] destination,double[][] destinationPast) throws Exception {  if (destinationPast.length != destination.length) {    throw new Exception(String.format("Destination past and destination lengths (%d and %d) must match!",destinationPast.length,destination.length));  }  int thisDestPastDimensions=destinationPast[0].length;  if ((thisDestPastDimensions != destPastDimensions)) {    throw new Exception("Cannot add observsations for destination past variables " + " of " + thisDestPastDimensions + " dimensions for TE calculator set up for "+ destPastDimensions+ " destination past dimensions");  }  if (vectorOfJointDestinationPastObservations == null) {    throw new RuntimeException("User did not call startAddObservations before addObservations");  }  vectorOfJointDestinationPastObservations.add(destinationPast);  super.addObservations(source,destination);}  }
class C{  public SolarisNumericUserPrincipal(long name){  this.name=(new Long(name)).toString();}  }
class C{  @SuppressWarnings("unchecked") public Iterable<TClassifier> createTClassifierIterableFromString(EDataType eDataType,String initialValue){  return (Iterable<TClassifier>)super.createFromString(initialValue);}  }
class C{  protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config,BasicBeanDescription beanDesc,List<BeanPropertyWriter> props){  AnnotationIntrospector intr=config.getAnnotationIntrospector();  AnnotatedClass ac=beanDesc.getClassInfo();  String[] ignored=intr.findPropertiesToIgnore(ac);  if (ignored != null && ignored.length > 0) {    HashSet<String> ignoredSet=ArrayBuilders.arrayToSet(ignored);    Iterator<BeanPropertyWriter> it=props.iterator();    while (it.hasNext()) {      if (ignoredSet.contains(it.next().getName())) {        it.remove();      }    }  }  return props;}  }
class C{  public static String scdnl(){  return scdnl;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public boolean on_fly_cg(){  return soot.PhaseOptions.getBoolean(options,"on-fly-cg");}  }
class C{  static <T,R1,R>AnyMValue<R> each2(final MonadicValue<? extends T> monadicValue,final Function<? super T,? extends MonadicValue<R1>> value2,final BiFunction<? super T,? super R1,Boolean> filterFunction,final BiFunction<? super T,? super R1,? extends R> yieldingFunction){  return AnyM.ofValue(For.iterable(monadicValue).iterable(null).filter(null).yield2(yieldingFunction).unwrap());}  }
class C{  public CurrencyException(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SSPECIES__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public Macro(File file) throws EOFException, FileNotFoundException, IOException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  DocumentBuilder db=null;  Document doc=null;  try {    db=dbf.newDocumentBuilder();    InputSource is=new InputSource(new UnicodeReader(new FileInputStream(file),FILE_ENCODING));    is.setEncoding(FILE_ENCODING);    doc=db.parse(is);  } catch (  Exception e) {    e.printStackTrace();    String desc=e.getMessage();    if (desc == null) {      desc=e.toString();    }    throw new IOException("Error parsing XML: " + desc);  }  macroRecords=new ArrayList();  boolean parsedOK=initializeFromXMLFile(doc.getDocumentElement());  if (parsedOK == false) {    name=null;    macroRecords.clear();    macroRecords=null;    throw new IOException("Error parsing XML!");  }}  }
class C{  public void addAllListeners(PropertyChangeListener listener,Object newObject,Set updateSet){  addListeners(listener,newObject,updateSet);  if ((children != null) && (children.length > 0)) {    try {      Object newValue=null;      if (newObject != null) {        updateSet.add(newObject);        newValue=extractNewValue(newObject);      }      for (      BindPath child : children) {        child.addAllListeners(listener,newValue,updateSet);      }    } catch (    Exception e) {      e.printStackTrace(System.out);    }  }}  }
class C{  @Override protected boolean isPrepared(final Player player){  if (player.isEquipped("flask")) {    return true;  } else {    player.sendPrivateText("You need a flask to fill some water up.");    return false;  }}  }
class C{  public PrintOptions(JSONObject configOpts,PrintOutput output){  if (configOpts == null) {    return;  }  if (!configOpts.isNull("altPrinting")) {    try {      rawOptions.altPrinting=configOpts.getBoolean("altPrinting");    } catch (    JSONException e) {      warn("boolean","altPrinting",configOpts.opt("altPrinting"));    }  }  if (!configOpts.isNull("encoding")) {    rawOptions.encoding=configOpts.optString("encoding",null);  }  if (!configOpts.isNull("endOfDoc")) {    rawOptions.endOfDoc=configOpts.optString("endOfDoc",null);  }  if (!configOpts.isNull("language")) {    rawOptions.language=configOpts.optString("language",null);  }  if (!configOpts.isNull("perSpool")) {    try {      rawOptions.perSpool=configOpts.getInt("perSpool");    } catch (    JSONException e) {      warn("integer","perSpool",configOpts.opt("perSpool"));    }  }  if (!configOpts.isNull("copies")) {    try {      rawOptions.copies=configOpts.getInt("copies");    } catch (    JSONException e) {      warn("integer","copies",configOpts.opt("copies"));    }  }  if (!configOpts.isNull("jobName")) {    rawOptions.jobName=configOpts.optString("jobName",null);  }  if (!configOpts.isNull("colorType")) {    try {      psOptions.colorType=ColorType.valueOf(configOpts.optString("colorType").toUpperCase(Locale.ENGLISH));    } catch (    IllegalArgumentException e) {      warn("valid value","colorType",configOpts.opt("colorType"));    }  }  if (!configOpts.isNull("copies")) {    try {      psOptions.copies=configOpts.getInt("copies");    } catch (    JSONException e) {      warn("integer","copies",configOpts.opt("copies"));    }    if (psOptions.copies < 1) {      log.warn("Cannot have less than one copy");      psOptions.copies=1;    }  }  if (!configOpts.isNull("density")) {    JSONArray possibleDPIs=configOpts.optJSONArray("density");    if (possibleDPIs != null && possibleDPIs.length() > 0) {      int usableDpi=-1;      List<Integer> rSupport=PrintingUtilities.getSupportedDensities(output.getPrintService());      if (!rSupport.isEmpty()) {        for (int i=0; i < possibleDPIs.length(); i++) {          if (rSupport.contains(possibleDPIs.optInt(i))) {            usableDpi=possibleDPIs.optInt(i);            break;          }        }      }      if (usableDpi == -1) {        log.warn("Supported printer densities not found, using first value provided");        usableDpi=possibleDPIs.optInt(0);      }      psOptions.density=usableDpi;    } else {      try {        psOptions.density=configOpts.getDouble("density");      } catch (      JSONException e) {        warn("double","density",configOpts.opt("density"));      }    }  }  if (!configOpts.isNull("duplex")) {    try {      psOptions.duplex=configOpts.getBoolean("duplex");    } catch (    JSONException e) {      warn("boolean","duplex",configOpts.opt("duplex"));    }  }  if (!configOpts.isNull("interpolation")) {switch (configOpts.optString("interpolation")) {case "bicubic":      psOptions.interpolation=RenderingHints.VALUE_INTERPOLATION_BICUBIC;    break;case "bilinear":  psOptions.interpolation=RenderingHints.VALUE_INTERPOLATION_BILINEAR;break;case "nearest-neighbor":case "nearest":psOptions.interpolation=RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR;break;default :warn("valid value","interpolation",configOpts.opt("interpolation"));break;}}if (!configOpts.isNull("jobName")) {psOptions.jobName=configOpts.optString("jobName",null);}if (!configOpts.isNull("margins")) {Margins m=new Margins();JSONObject subMargins=configOpts.optJSONObject("margins");if (subMargins != null) {if (!subMargins.isNull("top")) {try {m.top=subMargins.getDouble("top");} catch (JSONException e) {warn("double","margins.top",subMargins.opt("top"));}}if (!subMargins.isNull("right")) {try {m.right=subMargins.getDouble("right");} catch (JSONException e) {warn("double","margins.right",subMargins.opt("right"));}}if (!subMargins.isNull("bottom")) {try {m.bottom=subMargins.getDouble("bottom");} catch (JSONException e) {warn("double","margins.bottom",subMargins.opt("bottom"));}}if (!subMargins.isNull("left")) {try {m.left=subMargins.getDouble("left");} catch (JSONException e) {warn("double","margins.left",subMargins.opt("left"));}}} else {try {m.setAll(configOpts.getDouble("margins"));} catch (JSONException e) {warn("double","margins",configOpts.opt("margins"));}}psOptions.margins=m;}if (!configOpts.isNull("orientation")) {try {psOptions.orientation=Orientation.valueOf(configOpts.optString("orientation").replaceAll("\\-","_").toUpperCase(Locale.ENGLISH));} catch (IllegalArgumentException e) {warn("valid value","orientation",configOpts.opt("orientation"));}}if (!configOpts.isNull("paperThickness")) {try {psOptions.paperThickness=configOpts.getDouble("paperThickness");} catch (JSONException e) {warn("double","paperThickness",configOpts.opt("paperThickness"));}}if (!configOpts.isNull("printerTray")) {psOptions.printerTray=configOpts.optString("printerTray",null);}if (!configOpts.isNull("rasterize")) {try {psOptions.rasterize=configOpts.getBoolean("rasterize");} catch (JSONException e) {warn("boolean","rasterize",configOpts.opt("rasterize"));}}if (!configOpts.isNull("rotation")) {try {psOptions.rotation=configOpts.getDouble("rotation");} catch (JSONException e) {warn("double","rotation",configOpts.opt("rotation"));}}if (!configOpts.isNull("scaleContent")) {try {psOptions.scaleContent=configOpts.getBoolean("scaleContent");} catch (JSONException e) {warn("boolean","scaleContent",configOpts.opt("scaleContent"));}}if (!configOpts.isNull("size")) {Size s=new Size();JSONObject subSize=configOpts.optJSONObject("size");if (subSize != null) {if (!subSize.isNull("width")) {try {s.width=subSize.getDouble("width");} catch (JSONException e) {warn("double","size.width",subSize.opt("width"));}}if (!subSize.isNull("height")) {try {s.height=subSize.getDouble("height");} catch (JSONException e) {warn("double","size.height",subSize.opt("height"));}}psOptions.size=s;} else {warn("JSONObject","size",configOpts.opt("size"));}}if (!configOpts.isNull("units")) {switch (configOpts.optString("units")) {case "mm":psOptions.units=Unit.MM;break;case "cm":psOptions.units=Unit.CM;break;case "in":psOptions.units=Unit.INCH;break;default :warn("valid value","units",configOpts.opt("units"));break;}}PrinterResolution defaultRes=PrintingUtilities.getNativeDensity(output.getPrintService());if (defaultRes != null) {defOptions.density=defaultRes.getFeedResolution(psOptions.getUnits().getDPIUnits());} else {try {defOptions.density=configOpts.getDouble("fallbackDensity");} catch (JSONException e) {warn("double","fallbackDensity",configOpts.opt("fallbackDensity"));defOptions.density=600;}}if (psOptions.isRasterize() && psOptions.getDensity() == 0) {psOptions.density=defOptions.density;}if (output.isSetService()) {try {PrinterJob job=PrinterJob.getPrinterJob();job.setPrintService(output.getPrintService());PageFormat page=job.getPageFormat(null);defOptions.pageSize=new Size(page.getWidth(),page.getHeight());} catch (PrinterException e) {log.warn("Unable to find the default paper size");}}}  }
class C{  public void testReceive_UnconnectedBufEmpty() throws Exception {  this.channel1.configureBlocking(false);  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_NORMAL);  assertNull(this.channel1.receive(dst));}  }
class C{  public static int[] add(int[] input1,int[] input2) throws Exception {  if (input1.length != input2.length) {    throw new Exception("Lengths of arrays are not equal");  }  int[] returnValues=new int[input1.length];  for (int i=0; i < returnValues.length; i++) {    returnValues[i]=input1[i] + input2[i];  }  return returnValues;}  }
class C{  protected Caret createCaret(){  return new WindowsTextUI.WindowsCaret();}  }
class C{  public void persistTradingday(final Tradingday transientInstance) throws PersistentModelException {  try {    m_tradingdayHome.persist(transientInstance);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error saving Tradingday please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error saving Tradingday: " + transientInstance.getOpen() + "\n Msg: "+ e.getMessage());  }}  }
class C{  MysqlParameterMetadata(int count){  this.parameterCount=count;  this.returnSimpleMetadata=true;}  }
class C{  @CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public boolean update(Dimension dimension){  boolean isEnabled=calculateIsEnabled(dimension,enableAllLayersSetting.get());  boolean isVisible=isEnabled && isVisibleSetting.get();  boolean reload=isVisible == true && this.isVisible == false;  this.isVisible=isVisible;  return reload;}  }
class C{  public final boolean readBoolean() throws java.io.IOException {  int temp=in.read();  if (temp < 0) {    throw new EOFException();  }  return temp != 0;}  }
class C{  public DailyTimeIntervalScheduleBuilder startingDailyAt(TimeOfDay timeOfDay){  if (timeOfDay == null)   throw new IllegalArgumentException("Start time of day cannot be null!");  this.startTimeOfDay=timeOfDay;  return this;}  }
class C{  public Class toClass() throws CannotCompileException {  return getClassPool().toClass(this);}  }
class C{  public Builder maxCheckPointCount(int maxCheckPointCount){  this.maxCheckPointCount=maxCheckPointCount;  return this;}  }
class C{  @Override public boolean dragTo(String obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {  return dragTo(getUiObject(obj),destObj,steps);}  }
class C{  public static Uri scaleDownBitmapForUri(Context ctx,Uri uri,int newHeight) throws FileNotFoundException, IOException {  if (uri == null)   throw new NullPointerException(ERROR_URI_NULL);  if (!MediaUtils.isMediaContentUri(uri))   return null;  Bitmap original=Media.getBitmap(ctx.getContentResolver(),uri);  Bitmap bmp=scaleBitmap(ctx,original,newHeight);  Uri destUri=null;  String uriStr=Utils.writeImageToMedia(ctx,bmp,"","");  if (uriStr != null) {    destUri=Uri.parse(uriStr);  }  return destUri;}  }
class C{  public Vec2 mix(Vec2 vector,double weight){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","mix","missingVector"));  }  double w0=1 - weight;  double w1=weight;  this.x=this.x * w0 + vector.x * w1;  this.y=this.y * w0 + vector.y * w1;  return this;}  }
class C{  public DefaultTableCellRenderer(){  super();  setOpaque(true);  setBorder(getNoFocusBorder());  setName("Table.cellRenderer");}  }
class C{  private void drop(ItemStack itemStack){  getPlayer().getWorld().dropItem(getPlayer().getLocation(),itemStack);}  }
class C{  public static String findCNBForClass(@Nonnull Class<?> cls){  String absolutePath;  absolutePath=cls.getName().replaceFirst("(^|\\.)[^.]+$","");  return absolutePath.replace('.','-');}  }
class C{  public void clearBatch() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (this.batchedArgs != null) {      this.batchedArgs.clear();    }  }}  }
class C{  public boolean isValid(DrawContext dc){  return this.verticalExaggeration == dc.getVerticalExaggeration() && (this.globeStateKey != null && globeStateKey.equals(dc.getGlobe().getGlobeStateKey(dc)));}  }
class C{  public AuthenticationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void clear(){  if (size() == 0)   return;  buffer=new byte[buffer.length];  root.next=null;  pos=0;  length=0;  curr=root;}  }
class C{  public ReilFunction(final com.google.security.zynamics.reil.ReilFunction function){  m_function=function;  m_graph=ReilGraphConverter.createReilGraph(function.getGraph());}  }
class C{  public void removeHostFromVcenterCluster(URI hostId,String stepId){  log.info("removeHostFromVcenterCluster {}",hostId);  Host host=null;  try {    WorkflowStepCompleter.stepExecuting(stepId);    host=_dbClient.queryObject(Host.class,hostId);    if (NullColumnValueGetter.isNullURI(host.getVcenterDataCenter())) {      log.info("datacenter is null, nothing to do");      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    if (NullColumnValueGetter.isNullURI(host.getCluster())) {      log.warn("cluster is null, nothing to do");      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    String taskId=UUID.randomUUID().toString();    Operation op=new Operation();    op.setResourceType(ResourceOperationTypeEnum.UPDATE_VCENTER_CLUSTER);    _dbClient.createTaskOpStatus(VcenterDataCenter.class,host.getVcenterDataCenter(),taskId,op);    AsyncTask task=new AsyncTask(VcenterDataCenter.class,host.getVcenterDataCenter(),taskId);    vcenterController.updateVcenterCluster(task,host.getCluster(),null,new URI[]{host.getId()},null);    log.info("Monitor remove host " + host.getHostName() + " update vCenter task...");    while (true) {      Thread.sleep(TASK_STATUS_POLL_FREQUENCY);      VcenterDataCenter vcenterDataCenter=_dbClient.queryObject(VcenterDataCenter.class,host.getVcenterDataCenter());switch (Status.toStatus(vcenterDataCenter.getOpStatus().get(taskId).getStatus())) {case ready:        log.info("vCenter update request succeeded");      WorkflowStepCompleter.stepSucceded(stepId);    return;case error:  log.info("vCenter update request failed - Best effort only so consider success");WorkflowStepCompleter.stepSucceded(stepId);return;case pending:break;}}} catch (VcenterControllerException e) {log.warn("VcenterControllerException when trying to removeHostFromVcenterCluster: " + e.getMessage(),e);if (e.getCause() instanceof VcenterObjectNotFoundException) {log.info("did not find the host, considering success");WorkflowStepCompleter.stepSucceded(stepId);} else if (e.getCause() instanceof VcenterObjectConnectionException) {log.info("host is not connected, considering success");WorkflowStepCompleter.stepSucceded(stepId);} else {log.error("failure " + e);WorkflowStepCompleter.stepFailed(stepId,e);}}catch (InternalException e) {log.error("InternalException when trying to removeHostFromVcenterCluster: " + e.getMessage(),e);WorkflowStepCompleter.stepFailed(stepId,e);}catch (Exception e) {log.error("unexpected exception: " + e.getMessage(),e);ServiceCoded serviceCoded=ComputeSystemControllerException.exceptions.unableToRemoveHostVcenterCluster(host != null ? host.getHostName() : hostId.toString(),e);WorkflowStepCompleter.stepFailed(stepId,serviceCoded);}}  }
class C{  private void broadcastNewFile(LocalFilesystemURL inputURL){  File file=new File(this.filesystemPathForURL(inputURL));  if (file.exists()) {    Activity activity=this.cordova.getActivity();    Context context=activity.getApplicationContext();    Uri uri=Uri.fromFile(file);    Intent intent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri);    context.sendBroadcast(intent);  }}  }
class C{  public boolean contains(JsonElement element){  return elements.contains(element);}  }
class C{  public final int compareTo(EntryFile o){  if (timestampMillis < o.timestampMillis)   return -1;  if (timestampMillis > o.timestampMillis)   return 1;  if (file != null && o.file != null)   return file.compareTo(o.file);  if (o.file != null)   return -1;  if (file != null)   return 1;  if (this == o)   return 0;  if (hashCode() < o.hashCode())   return -1;  if (hashCode() > o.hashCode())   return 1;  return 0;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private void zInternalSetLastValidTimeAndNotifyListeners(LocalTime newTime){  LocalTime oldTime=lastValidTime;  lastValidTime=newTime;  if (!PickerUtilities.isSameLocalTime(oldTime,newTime)) {    for (    TimeChangeListener timeChangeListener : timeChangeListeners) {      TimeChangeEvent timeChangeEvent=new TimeChangeEvent(this,oldTime,newTime);      timeChangeListener.timeChanged(timeChangeEvent);    }    firePropertyChange("time",oldTime,newTime);  }}  }
class C{  private void retreat(final Creature creature,final Entity enemy){  creature.clearPath();  creature.faceToward(enemy);  creature.setDirection(creature.getDirection().oppositeDirection());  if (creature.getZone().collides(creature,creature.getX() + creature.getDirection().getdx(),creature.getY() + creature.getDirection().getdy(),true)) {    if (Rand.rand(2) == 0) {      creature.setDirection(creature.getDirection().nextDirection());    } else {      creature.setDirection(creature.getDirection().nextDirection().oppositeDirection());    }  }  creature.setSpeed(creature.getBaseSpeed());  creature.applyMovement();}  }
class C{  static public List<String> readFile(File aFile){  List<String> contents=new ArrayList<String>();  BufferedReader input=null;  try {    input=new BufferedReader(new FileReader(aFile));    String line=null;    while ((line=input.readLine()) != null) {      if (!line.startsWith("@") && !line.startsWith("%") && !"".equals(line)) {        contents.add(line);      }    }  } catch (  FileNotFoundException ex) {    ex.printStackTrace();  }catch (  IOException ex) {    ex.printStackTrace();  } finally {    try {      if (input != null) {        input.close();      }    } catch (    IOException ex) {      ex.printStackTrace();    }  }  return contents;}  }
class C{  public ListenableFuture<PaymentIncrementAck> incrementPayment(Coin size) throws ValueOutOfRangeException, IllegalStateException {  return incrementPayment(size,null,null);}  }
class C{  public void distribute(int start,int remainder,int blockSize,int value){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(remainder <= blockSize);  if (value <= remainder) {    data[start]+=value;  } else {    data[start]+=remainder;    value-=remainder;    start++;    while (value >= blockSize) {      data[start]+=blockSize;      value-=blockSize;      start++;    }    data[start]+=value;  }}  }
class C{  public EnumDeclaration addEnum(String name){  return addEnum(name,Modifier.PUBLIC);}  }
class C{  public List<String> copy(){  return new ArrayList<String>(warnings);}  }
class C{  public FreeTextSuggester(Analyzer indexAnalyzer,Analyzer queryAnalyzer,int grams){  this(indexAnalyzer,queryAnalyzer,grams,DEFAULT_SEPARATOR);}  }
class C{  public static void escapeRegex(CharSequence s,boolean asciiOnly,boolean embeddable,Appendable out) throws IOException {  new Escaper(s,embeddable ? REGEX_LITERAL_EMBEDDABLE_ESCAPES : REGEX_LITERAL_ESCAPES,asciiOnly ? NO_NON_ASCII : ALLOW_NON_ASCII,JS_ENCODER,out).escape();}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.IMPORT_DECLARATION;}  }
class C{  private Support_TestWebData(String path,String type){  File file=new File(path);  testLength=file.length();  testLastModified=file.lastModified();  testName=file.getName();  testType=type;  testDir=file.isDirectory();  ByteArrayOutputStream out=new ByteArrayOutputStream();  FileInputStream in=null;  try {    in=new FileInputStream(file);    while (in.available() > 0) {      out.write(in.read());    }    in.close();    out.flush();    test0Data=out.toByteArray();    out.close();    test0DataAvailable=true;    return;  } catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (in != null) {        in.close();      }      if (out != null) {        out.close();      }    } catch (    IOException e) {    }  }}  }
class C{  public void clear(){  count=0;  indices=new HashMap<String,Integer>();}  }
class C{  protected void updatePage(){  setValid(isValid());  updateMessage();  updateValidationMessages();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null) {      s.writeObject(n.key);      s.writeObject(v);    }  }  s.writeObject(null);}  }
class C{  public void highlightLastRow(int row){  int lastrow=m_tableModel.getRowCount();  if (row == lastrow - 1) {    m_table.setRowSelectionInterval(lastrow - 1,lastrow - 1);  } else {    m_table.setRowSelectionInterval(row + 1,row + 1);  }  m_table.setColumnSelectionInterval(0,0);}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Floor(){  super(Number.class,Number.class);}  }
class C{  public StochasticOscillatorSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  public boolean fillIfLive(long timeout) throws IOException {  StreamImpl source=_source;  byte[] readBuffer=_readBuffer;  if (readBuffer == null || source == null) {    _readOffset=0;    _readLength=0;    return false;  }  if (_readOffset > 0) {    System.arraycopy(readBuffer,_readOffset,readBuffer,0,_readLength - _readOffset);    _readLength-=_readOffset;    _readOffset=0;  }  if (_readLength == readBuffer.length)   return true;  int readLength=source.readTimeout(_readBuffer,_readLength,_readBuffer.length - _readLength,timeout);  if (readLength >= 0) {    _readLength+=readLength;    _position+=readLength;    if (_isEnableReadTime)     _readTime=CurrentTime.currentTime();    return true;  } else   if (readLength == READ_TIMEOUT) {    return true;  } else {    return false;  }}  }
class C{  public boolean isRange(){  Object oo=get_Value(COLUMNNAME_IsRange);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void doCreatePointSymbols(FeatureMap featureMap,Collection<VPFSymbol> outCollection){  for (  Map.Entry<VPFSymbolKey,CombinedFeature> entry : featureMap.entrySet()) {    CombinedFeature feature=entry.getValue();    for (    VPFSymbolAttributes attr : this.getSymbolAttributes(feature,entry.getKey())) {switch (attr.getFeatureType()) {case POINT:        this.addPointSymbol(feature,attr,outCollection);      break;case LABEL:    this.addTextLabel(feature,attr,outCollection);  break;}}}}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {  if (random != null) {    this.random=random;  } else {    this.random=new SecureRandom();  }}  }
class C{  @Override public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public LimitTokenPositionFilter(TokenStream in,int maxTokenPosition,boolean consumeAllTokens){  super(in);  if (maxTokenPosition < 1) {    throw new IllegalArgumentException("maxTokenPosition must be greater than zero");  }  this.maxTokenPosition=maxTokenPosition;  this.consumeAllTokens=consumeAllTokens;}  }
class C{  public static String format(String format,Object... args){  return new Substituter(String.format(format,args)).toString();}  }
class C{  public void enableBasicProgress(long totalJobs){  mTotalJobs=totalJobs;  mBasicProgress=true;  Diagnostic.progress(mThreadPoolName + ": Starting " + mTotalJobs+ " Jobs");}  }
class C{  public static NetworkInfo fromVersion(final byte version){  for (  final NetworkInfo info : KNOWN_NETWORKS) {    if (version == info.getVersion()) {      return info;    }  }  throw new IllegalArgumentException(String.format("Invalid version '%d' is not a known network version",version));}  }
class C{  private void leaveBusy(){}  }
class C{  public CoreDescriptor(String coreName,CoreDescriptor other){  this.coreContainer=other.coreContainer;  this.cloudDesc=other.cloudDesc;  this.instanceDir=other.instanceDir;  this.originalExtraProperties.putAll(other.originalExtraProperties);  this.originalCoreProperties.putAll(other.originalCoreProperties);  this.coreProperties.putAll(other.coreProperties);  this.substitutableProperties.putAll(other.substitutableProperties);  this.coreProperties.setProperty(CORE_NAME,coreName);  this.originalCoreProperties.setProperty(CORE_NAME,coreName);  this.substitutableProperties.setProperty(SOLR_CORE_PROP_PREFIX + CORE_NAME,coreName);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double slope;  double z, z2;  int i, n;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX2={2,2,2,2,2,1,0,-1,-2,-2,-2,-2,-2,-1,0,1};  int[] dY2={-2,-1,0,1,2,2,2,2,2,1,0,-1,-2,-2,-2,-2};  int[] breachcell={0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,0};  double dist;  double gridRes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    double[] data=null;    for (row=0; row < rows; row++) {      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        output.setValue(row,col,data[col]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          n=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 < z) {              n++;            }          }          if (n == 0) {            for (i=0; i < 16; i++) {              z2=DEM.getValue(row + dY2[i],col + dX2[i]);              if (z2 < z && z2 != noData) {                output.setValue(row + dY[breachcell[i]],col + dX[breachcell[i]],(z + z2) / 2);              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void AddMobileDevice(String DeviceId,String SenderId,MobileDeviceReceiver receiver){  MobileDeviceParser parser=new MobileDeviceParser(receiver);  String url=mDomoticzUrls.constructGetUrl(DomoticzValues.Json.Url.Request.ADD_MOBILE_DEVICE);  url+="&uuid=" + DeviceId;  url+="&senderid=" + SenderId;  RequestUtil.makeJsonGetRequest(parser,getUserCredentials(Authentication.USERNAME),getUserCredentials(Authentication.PASSWORD),url,mSessionUtil,false,1,queue);}  }
class C{  public SchemeMap(){  _schemeMap.set(new ConcurrentHashMap<String,SchemeRoot>(),null);}  }
class C{  protected void emit_FunctionDeclaration_SemiParserRuleCall_1_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public Pair NE(){  int r2=row - 1;  if (r2 < 0)   return null;  return new Pair(diagonal,r2);}  }
class C{  public InlineQueryResultDocument build(){  return new InlineQueryResultDocument(id,title,caption,document_url,mime_type,description,reply_markup,input_message_content,thumb_url,thumb_width,thumb_height);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void clear(){  parameters=null;}  }
class C{  public void freeMemory(){  getInnerSources().freeMemory();  getInnerSinks().freeMemory();}  }
class C{  private static void drawHandle(final Graphics g,final int x,int y){  g.setColor(ourColor1);  g.drawRect(x,y,HANDLE_ATOM_WIDTH - 1,HANDLE_ATOM_HEIGHT - 1);  UIUtil.drawLine(g,x + HANDLE_ATOM_WIDTH / 2,y + HANDLE_ATOM_HEIGHT,x + HANDLE_ATOM_WIDTH / 2,y + HANDLE_ATOM_HEIGHT + HANDLE_ATOM_SPACE - 1);  y+=HANDLE_ATOM_HEIGHT + HANDLE_ATOM_SPACE;  g.drawRect(x,y,HANDLE_ATOM_WIDTH - 1,HANDLE_ATOM_HEIGHT - 1);  UIUtil.drawLine(g,x + HANDLE_ATOM_WIDTH / 2,y + HANDLE_ATOM_HEIGHT,x + HANDLE_ATOM_WIDTH / 2,y + HANDLE_ATOM_HEIGHT + HANDLE_ATOM_SPACE - 1);  y+=HANDLE_ATOM_HEIGHT + HANDLE_ATOM_SPACE;  g.drawRect(x,y,HANDLE_ATOM_WIDTH - 1,HANDLE_ATOM_HEIGHT - 1);}  }
class C{  public boolean isAddressedModePossible(){  return true;}  }
class C{  public static byte[] serializeToBlob(Object obj) throws IOException {  return serializeToBlob(obj,null);}  }
class C{  public File parallelCorpus(){  return parallelCorpus;}  }
class C{  public Object clone(){  return (html.clone());}  }
class C{  private void handleHtmlDoUserRestore(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final Errors errors=new Errors();  final Part part=requestAndResponse.request.getPart("file");  final boolean reuseIds=getCheckBoxValue(requestAndResponse,"reuseIds");  final boolean msWordListFormat=getCheckBoxValue(requestAndResponse,"msWordListFormat");  final String csrft=requestAndResponse.getParameter("csrft");  addIFrameHeader(requestAndResponse);  if (isTheCsrftWrong(requestAndResponse,csrft)) {    requestAndResponse.print(servletText.errorRequiresSignIn(false));  } else   if (!isUserSignedIn(requestAndResponse)) {    requestAndResponse.print(servletText.errorRequiresSignIn(false));  } else   if (isUsersAccountClosed(requestAndResponse)) {    requestAndResponse.print(servletText.errorAccountIsClosed());  } else   if (part == null) {    requestAndResponse.print(servletText.errorNoFileUploaded());  } else {    final InputStream stream=part.getInputStream();    final InputStreamReader streamReader=new InputStreamReader(stream,Charset.forName("UTF-8"));    boolean result=false;    if (msWordListFormat) {      result=dbLogic.restoreMsWordListFormatForUser(getEffectiveUserId(requestAndResponse),streamReader,isUserAnAdmin(requestAndResponse),errors);    } else {      result=dbLogic.restoreJsonForUser(getEffectiveUserId(requestAndResponse),streamReader,reuseIds,isUserAnAdmin(requestAndResponse),errors);    }    if (!result) {      requestAndResponse.print(servletText.errorRestoreFailed() + "<br>");      for (      final String text : errors.getTexts()) {        requestAndResponse.print(text);        requestAndResponse.print("<br>");      }    } else {      requestAndResponse.print(servletText.sentenceRestored());    }    requestAndResponse.print("<script type=\"text/javascript\">\n" + "history.replaceState(null, null, '/restoreFrame/');\n" + "</script>");  }  addIFrameFooter(requestAndResponse);}  }
class C{  private boolean adjustInstruction() throws IOException {  pos=c.localPosition();  newPos=map[pos];  int opcode=c.readU1();  if (Inject.verbose) {    traceln();    traceFixedWidthInt(pos,4);    traceFixedWidthInt(newPos,4);    trace(" ");  }  if (opcode == opc_wide) {    int wopcode=c.readU1();    int lvIndex=c.readU2();    if (Inject.verbose) {      trace(opcNames[wopcode] + "_w ");    }switch (wopcode) {case opc_aload:case opc_astore:case opc_fload:case opc_fstore:case opc_iload:case opc_istore:case opc_lload:case opc_lstore:case opc_dload:case opc_dstore:case opc_ret:      trace(lvIndex);    break;case opc_iinc:  int constVal=c.readS2();if (Inject.verbose) {  trace(lvIndex + " " + constVal);}break;default :throw new Error("Invalid wide opcode: " + wopcode);}} else {if (Inject.verbose) {trace(opcNames[opcode]);}switch (opcode) {case opc_tableswitch:{int widened=widening[pos];int header=(pos + 1 + 3) & (~3);int newHeader=(newPos + 1 + 3) & (~3);c.skip(header - (pos + 1));Span defaultSkip=new Span(c.readU4());int low=c.readU4();int high=c.readU4();if (Inject.verbose) {trace(" " + low + " to "+ high);trace(": default= [was] " + defaultSkip.target);trace(" [now] " + defaultSkip.newTarget);for (int i=low; i <= high; ++i) {Span jump=new Span(c.readU4());traceln("");trace('\t');traceFixedWidthInt(i,5);trace(": " + jump.newTarget);}} else {c.skip((high + 1 - low) * 4);}int newPadding=newHeader - newPos;int oldPadding=header - pos;int deltaPadding=newPadding - oldPadding;if (widened != deltaPadding) {widen(pos,deltaPadding);return false;}break;}case opc_lookupswitch:{int widened=widening[pos];int header=(pos + 1 + 3) & (~3);int newHeader=(newPos + 1 + 3) & (~3);c.skip(header - (pos + 1));Span defaultSkip=new Span(c.readU4());int npairs=c.readU4();if (Inject.verbose) {trace(" npairs: " + npairs);trace(": default= [was] " + defaultSkip.target);trace(" [now] " + defaultSkip.newTarget);for (int i=0; i < npairs; ++i) {int match=c.readU4();Span jump=new Span(c.readU4());traceln("");trace('\t');traceFixedWidthInt(match,5);trace(": " + jump.newTarget);}} else {c.skip(npairs * 8);}int newPadding=newHeader - newPos;int oldPadding=header - pos;int deltaPadding=newPadding - oldPadding;if (widened != deltaPadding) {widen(pos,deltaPadding);return false;}break;}case opc_jsr:case opc_goto:case opc_ifeq:case opc_ifge:case opc_ifgt:case opc_ifle:case opc_iflt:case opc_ifne:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmpge:case opc_if_icmpgt:case opc_if_icmple:case opc_if_icmplt:case opc_if_acmpeq:case opc_if_acmpne:case opc_ifnull:case opc_ifnonnull:{int widened=widening[pos];Span jump=new Span(c.readS2());if (widened == 0) {int newDelta=jump.newDelta;if ((newDelta < -32768) || (newDelta > 32767)) {switch (opcode) {case opc_jsr:case opc_goto:widen(pos,2);break;default :widen(pos,5);break;}return false;}}if (Inject.verbose) {trace(" [was] " + jump.target + " ==> "+ " [now] "+ jump.newTarget);}break;}case opc_jsr_w:case opc_goto_w:{Span jump=new Span(c.readU4());if (Inject.verbose) {trace(" [was] " + jump.target + " [now] "+ jump.newTarget);}break;}default :{int instrLen=opcLengths[opcode];c.skip(instrLen - 1);break;}}}return true;}  }
class C{  public void createDir(String fspath) throws IsilonException {  createDir(fspath,false);}  }
class C{  protected void appendHTML(final StringBuilder sbuf,final String text){  final StringCharacterIterator ci=new StringCharacterIterator(text);  char ch=ci.current();  while (ch != CharacterIterator.DONE) {    appendHTML(sbuf,ch);    ch=ci.next();  }}  }
class C{  public void registerTableNodes(SnmpMib mib,MBeanServer server){}  }
class C{  public static List<? extends Element> childElementList(Element element){  if (element == null)   return null;  List<Element> elements=new LinkedList<Element>();  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE) {        Element childElement=(Element)node;        elements.add(childElement);      }    } while ((node=node.getNextSibling()) != null);  }  return elements;}  }
class C{  public JPAStreamingMailboxMessage(JPAMailbox mailbox,MessageUid uid,long modSeq,MailboxMessage message) throws MailboxException {  super(mailbox,uid,modSeq,message);  try {    this.content=new SharedByteArrayInputStream(IOUtils.toByteArray(message.getFullContent()));    this.header=getHeaderContent();    this.body=getBodyContent();  } catch (  IOException e) {    throw new MailboxException("Unable to parse message",e);  }}  }
class C{  @Override public void agg(double newVal){  valueSet.add(newVal);  firstTime=false;}  }
class C{  private CodePattern buildCodePattern_RANDOM_CODE(Attribute classLabel) throws OperatorException {  double multiplicator=getParameterAsDouble(PARAMETER_RANDOM_CODE_MULTIPLICATOR);  int numberOfClasses=classLabel.getMapping().size();  CodePattern codePattern=new CodePattern(numberOfClasses,(int)(numberOfClasses * multiplicator));  RandomGenerator randomGenerator=RandomGenerator.getRandomGenerator(this);  for (int i=0; i < codePattern.data.length; i++) {    for (int j=0; j < codePattern.data[0].length; j++) {      codePattern.data[i][j]="" + randomGenerator.nextBoolean();    }  }  for (int i=0; i < codePattern.data[0].length; i++) {    boolean containsNoOne=true, containsNoZero=true;    for (int j=0; j < codePattern.data.length; j++) {      if ("true".equals(codePattern.data[j][i])) {        containsNoOne=false;      } else {        containsNoZero=false;      }    }    if (containsNoOne) {      codePattern.data[(int)(randomGenerator.nextDouble() * (codePattern.data.length - 1))][i]="true";    }    if (containsNoZero) {      codePattern.data[(int)(randomGenerator.nextDouble() * (codePattern.data.length - 1))][i]="false";    }  }  return codePattern;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_Record_ID=getRecord_ID();}  }
class C{  @Override public V put(K key,V value){  if (key == null)   return putForNullKey(value);  int hash=hash(key);  int i=indexFor(hash,table.length);  for (Entry<K,V> e=table[i]; e != null; e=e.next) {    Object k;    if (e.hash == hash && ((k=e.key) == key || key.equals(k))) {      V oldValue=e.value;      e.value=value;      e.recordAccess(this);      return oldValue;    }  }  modCount++;  addEntry(hash,key,value,i);  return null;}  }
class C{  protected InnerBuilder addHeaders(Map<String,String> headers){  String url=NULL_KEY_FOR_URL;  addHeadersWithUrl(url,headers);  return this;}  }
class C{  public static String escapeJS(String str,char quotesUsed,CharsetEncoder enc){  char[] arr=str.toCharArray();  StringBuilder rtn=new StringBuilder(arr.length);  rtn.append(quotesUsed);  for (int i=0; i < arr.length; i++) {    if (arr[i] < 128) {switch (arr[i]) {case '\\':        rtn.append("\\\\");      break;case '\n':    rtn.append("\\n");  break;case '\r':rtn.append("\\r");break;case '\f':rtn.append("\\f");break;case '\b':rtn.append("\\b");break;case '\t':rtn.append("\\t");break;case '"':if (quotesUsed == '"') rtn.append("\\\""); else rtn.append('"');break;case '\'':if (quotesUsed == '\'') rtn.append("\\\'"); else rtn.append('\'');break;case '/':if (i > 0 && arr[i - 1] == '<' && i + 1 < arr.length && arr[i + 1] == 's' && i + 2 < arr.length && arr[i + 2] == 'c' && i + 3 < arr.length && arr[i + 3] == 'r' && i + 4 < arr.length && arr[i + 4] == 'i' && i + 5 < arr.length && arr[i + 5] == 'p' && i + 6 < arr.length && arr[i + 6] == 't' && i + 7 < arr.length && (isWhiteSpace(arr[i + 7]) || arr[i + 7] == '>')) {rtn.append("\\/");break;}default :rtn.append(arr[i]);break;}} else if (enc == null || !enc.canEncode(arr[i])) {if (arr[i] < 0x10) rtn.append("\\u000"); else if (arr[i] < 0x100) rtn.append("\\u00"); else if (arr[i] < 0x1000) rtn.append("\\u0"); else rtn.append("\\u");rtn.append(Integer.toHexString(arr[i]));} else {rtn.append(arr[i]);}}return rtn.append(quotesUsed).toString();}  }
class C{  private void checkOffsetOrImageTag(ExifTag tag){  if (tag.getComponentCount() == 0) {    return;  }  short tid=tag.getTagId();  int ifd=tag.getIfd();  if (tid == TAG_EXIF_IFD && checkAllowed(ifd,ExifInterface.TAG_EXIF_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_EXIF) || isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_EXIF,tag.getValueAt(0));    }  } else   if (tid == TAG_GPS_IFD && checkAllowed(ifd,ExifInterface.TAG_GPS_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_GPS)) {      registerIfd(IfdId.TYPE_IFD_GPS,tag.getValueAt(0));    }  } else   if (tid == TAG_INTEROPERABILITY_IFD && checkAllowed(ifd,ExifInterface.TAG_INTEROPERABILITY_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_INTEROPERABILITY,tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT)) {    if (isThumbnailRequested()) {      registerCompressedImage(tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT_LENGTH && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)) {    if (isThumbnailRequested()) {      mJpegSizeTag=tag;    }  } else   if (tid == TAG_STRIP_OFFSETS && checkAllowed(ifd,ExifInterface.TAG_STRIP_OFFSETS)) {    if (isThumbnailRequested()) {      if (tag.hasValue()) {        for (int i=0; i < tag.getComponentCount(); i++) {          if (tag.getDataType() == ExifTag.TYPE_UNSIGNED_SHORT) {            registerUncompressedStrip(i,tag.getValueAt(i));          } else {            registerUncompressedStrip(i,tag.getValueAt(i));          }        }      } else {        mCorrespondingEvent.put(tag.getOffset(),new ExifTagEvent(tag,false));      }    }  } else   if (tid == TAG_STRIP_BYTE_COUNTS && checkAllowed(ifd,ExifInterface.TAG_STRIP_BYTE_COUNTS) && isThumbnailRequested() && tag.hasValue()) {    mStripSizeTag=tag;  }}  }
class C{  public static boolean hasGetAndSetMethods(JField field,JClassType clazz){  return hasGetMethod(field,clazz) && hasSetMethod(field,clazz);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public IndicesOptions indicesOptions(){  return indicesOptions;}  }
class C{  private static boolean isSorted(Comparable[] a){  for (int i=1; i < a.length; i++)   if (less(a[i],a[i - 1]))   return false;  return true;}  }
class C{  public RevisionMetadata processMetadata(RevisionHistory revisionHistory,List<Revision> revs,@Nullable MetadataScrubberConfig sc,@Nullable Revision fromRevision){  ImmutableList.Builder<RevisionMetadata> rmBuilder=ImmutableList.builder();  for (  Revision rev : revs) {    RevisionMetadata rm=revisionHistory.getMetadata(rev);    for (    MetadataScrubber scrubber : metadataScrubbers.values()) {      try {        rm=scrubber.scrub(rm,sc);      } catch (      RuntimeException e) {        throw new MoeProblem(e,"Error processing %s: %s",scrubber.getClass().getSimpleName(),e.getMessage());      }    }    rmBuilder.add(rm);  }  return RevisionMetadata.concatenate(rmBuilder.build(),fromRevision);}  }
class C{  public <T>void write(T obj,String localName,String uri,Class<T> cls) throws XMLStreamException {  _xml.add(obj,localName,uri,cls);}  }
class C{  public void debug(String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.DEBUG,null,msg,arg0,arg1,arg2,null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.477 -0500",hash_original_method="7F43853CDED9232ACA3765709B5C5CC7",hash_generated_method="5C9DEEA3F7D329A789B5C65180A72B7C") private Im(){}  }
class C{  public IgniteTxOptimisticCheckedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public void initializeAfterLoading(){  super.initializeAfterLoading();  Utils.removeEmptyStringsFromList(tags);  Utils.removeEmptyStringsFromList(genres);  for (  String genre : new ArrayList<>(genres)) {    addGenre(MediaGenres.getGenre(genre));  }  if (movieSetId != null) {    movieSet=MovieList.getInstance().lookupMovieSet(movieSetId);  }}  }
class C{  @Override public void writeMetadata(XDROutputBuffer xdr,IGangliaMetadataMessage decl){}  }
class C{  public DOMXMLSignature(Element sigElem,XMLCryptoContext context,Provider provider) throws MarshalException {  localSigElem=sigElem;  ownerDoc=localSigElem.getOwnerDocument();  id=DOMUtils.getAttributeValue(localSigElem,"Id");  Element siElem=DOMUtils.getFirstChildElement(localSigElem,"SignedInfo");  si=new DOMSignedInfo(siElem,context,provider);  Element sigValElem=DOMUtils.getNextSiblingElement(siElem,"SignatureValue");  sv=new DOMSignatureValue(sigValElem,context);  Element nextSibling=DOMUtils.getNextSiblingElement(sigValElem);  if (nextSibling != null && nextSibling.getLocalName().equals("KeyInfo")) {    ki=new DOMKeyInfo(nextSibling,context,provider);    nextSibling=DOMUtils.getNextSiblingElement(nextSibling);  }  if (nextSibling == null) {    objects=Collections.emptyList();  } else {    List<XMLObject> tempObjects=new ArrayList<XMLObject>();    while (nextSibling != null) {      String name=nextSibling.getLocalName();      if (!name.equals("Object")) {        throw new MarshalException("Invalid element name: " + name + ", expected KeyInfo or Object");      }      tempObjects.add(new DOMXMLObject(nextSibling,context,provider));      nextSibling=DOMUtils.getNextSiblingElement(nextSibling);    }    objects=Collections.unmodifiableList(tempObjects);  }}  }
class C{  public static void load(){  Context gcon=Context.getGlobalContext();  Context.ContextSymbolEnumeration Enum=gcon.getContextSymbolEnumeration();  while (Enum.hasMoreElements()) {    SymbolNode sn=Enum.nextElement();    Data d=(Data)LevelData.get(sn.getName().toString());    if (d != null) {      OpDefNode opDef=(OpDefNode)gcon.getSymbol(sn.getName());      if (opDef.getArity() != d.arity) {        throw new WrongInvocationException("Level data for " + sn.getName() + " has the wrong arity");      }      opDef.setBuiltinLevel(d);    }  }}  }
class C{  public double predict_char_prob(String pre,int n){  if (n < 0 || n > predicted_chars) {    return 0;  }  if (pre.equals(" ")) {    pre="<w>";  }  String key=pre + n;  Double prob=context_prob.get(key);  if (prob != null) {    prob=Math.pow(10,prob);  }  return prob;}  }
class C{  public static boolean removeBeanOrFolder(String path){  return removePath(path.split(PATH_SEPARATOR),s_directory,0) > 0;}  }
class C{  private int nextChunk() throws IOException {  int available=super.available();  if (available <= 0) {    available=1;  }  if (available > inBuf.length) {    available=super.read(inBuf,0,inBuf.length);  } else {    available=super.read(inBuf,0,available);  }  if (available < 0) {    if (finalized) {      return -1;    }    try {      if (bufferedBlockCipher != null) {        maxBuf=bufferedBlockCipher.doFinal(buf,0);      } else {        maxBuf=0;      }    } catch (    Exception e) {      throw new IOException("error processing stream: " + e.toString());    }    bufOff=0;    finalized=true;    if (bufOff == maxBuf) {      return -1;    }  } else {    bufOff=0;    try {      if (bufferedBlockCipher != null) {        maxBuf=bufferedBlockCipher.processBytes(inBuf,0,available,buf,0);      } else {        streamCipher.processBytes(inBuf,0,available,buf,0);        maxBuf=available;      }    } catch (    Exception e) {      throw new IOException("error processing stream: " + e.toString());    }    if (maxBuf == 0) {      return nextChunk();    }  }  return maxBuf;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:12.987 -0500",hash_original_method="F5040E07E9B927EF44F79345AA20F61D",hash_generated_method="8D33E80FC3E9A75B712A1E7DBCB79447") public DynamicLayout(CharSequence base,CharSequence display,TextPaint paint,int width,Alignment align,float spacingmult,float spacingadd,boolean includepad,TextUtils.TruncateAt ellipsize,int ellipsizedWidth){  this(base,display,paint,width,align,TextDirectionHeuristics.FIRSTSTRONG_LTR,spacingmult,spacingadd,includepad,ellipsize,ellipsizedWidth);}  }
class C{  public boolean equals(Object objectToCompare){  if (super.equals(objectToCompare))   return true;  if (objectToCompare instanceof Decimal) {    if (CoreUtils.nullSafeComparator(((Decimal)objectToCompare).getBigDecimalValue(),this.getBigDecimalValue()) == 0)     return true;  }  return false;}  }
class C{  public Boolean isAllowCreate(){  return allowCreate;}  }
class C{  protected String[] diff_halfMatch(String text1,String text2){  if (Diff_Timeout <= 0) {    return null;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  if (longtext.length() < 4 || shorttext.length() * 2 < longtext.length()) {    return null;  }  String[] hm1=diff_halfMatchI(longtext,shorttext,(longtext.length() + 3) / 4);  String[] hm2=diff_halfMatchI(longtext,shorttext,(longtext.length() + 1) / 2);  String[] hm;  if (hm1 == null && hm2 == null) {    return null;  } else   if (hm2 == null) {    hm=hm1;  } else   if (hm1 == null) {    hm=hm2;  } else {    hm=hm1[4].length() > hm2[4].length() ? hm1 : hm2;  }  if (text1.length() > text2.length()) {    return hm;  } else {    return new String[]{hm[2],hm[3],hm[0],hm[1],hm[4]};  }}  }
class C{  public static void normal(Vector3fc v0,Vector3fc v1,Vector3fc v2,Vector3f dest){  normal(v0.x(),v0.y(),v0.z(),v1.x(),v1.y(),v1.z(),v2.x(),v2.y(),v2.z(),dest);}  }
class C{  public void onExit(Context cx,boolean byThrow,Object resultOrException){  if (dim.breakOnReturn && !byThrow) {    dim.handleBreakpointHit(this,cx);  }  contextData.popFrame();}  }
class C{  private static int uariminGe(double value,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ixMin=1;  if (value <= bv[0] || value > bv[bv.length - 1])   return ixMin;  int ix=Arrays.binarySearch(bv,value);  if (ix < 0)   ix=Math.abs(ix) - 1;  ixMin=bvi[ix - 1] + 1;  return ixMin;}  }
class C{  private void createACSComponent(Composite container){  Group acsGrp=new Group(container,SWT.SHADOW_ETCHED_IN);  GridLayout groupGridLayout=new GridLayout();  GridData groupGridData=new GridData();  groupGridData.grabExcessHorizontalSpace=true;  groupGridData.horizontalIndent=10;  groupGridData.verticalIndent=10;  groupGridData.horizontalAlignment=SWT.FILL;  groupGridLayout.numColumns=2;  groupGridLayout.verticalSpacing=10;  acsGrp.setText(Messages.acsGrpTxt);  acsGrp.setLayout(groupGridLayout);  acsGrp.setLayoutData(groupGridData);  acsLbl=new Label(acsGrp,SWT.LEFT);  groupGridData=new GridData();  groupGridData.grabExcessHorizontalSpace=true;  groupGridData.horizontalAlignment=SWT.FILL;  groupGridLayout.numColumns=2;  acsLbl.setText(Messages.acsLbl);  acsLbl.setLayoutData(groupGridData);  acsTxt=new Text(acsGrp,SWT.LEFT | SWT.BORDER);  groupGridData=new GridData();  groupGridData.horizontalSpan=2;  groupGridData.widthHint=470;  acsTxt.setText(Messages.acsTxt);  acsTxt.setLayoutData(groupGridData);}  }
class C{  public void push(final float value){  int bits=Float.floatToIntBits(value);  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {    mv.visitInsn(Opcodes.FCONST_0 + (int)value);  } else {    mv.visitLdcInsn(new Float(value));  }}  }
class C{  void __deleteDataList(List<GenericDataDB> dataDBList){  genericDataDao.deleteInTx(dataDBList);  log.debug(Thread.currentThread().toString() + "##__deleteDataList(dataDBList.size()=[" + dataDBList.size()+ "])");}  }
class C{  private boolean hasSimiliarMapping(final String fontName){  final Set<String> keySet=fontMappings.keySet();  final Set<String> candidates=new HashSet<String>();  for (  final String key : keySet) {    final String lcKey=key.toLowerCase();    final String lcFont=fontName.toLowerCase();    if (lcKey.equals(lcFont)) {      fontID=key;      return true;    }    if (lcKey.contains(lcFont) || lcFont.contains(lcKey)) {      candidates.add(key);    }  }  if (!candidates.isEmpty()) {    String result[]=new String[candidates.size()];    result=candidates.toArray(result);    fontID=result[0];    if (candidates.size() > 1) {      for (int i=1; i < result.length; i++) {        if (result[i].length() < fontID.length()) {          fontID=result[i];        }      }    }    return true;  }  return false;}  }
class C{  public void combine(AnalysisResult<A,S> other){  for (  Entry<Node,A> e : other.nodeValues.entrySet()) {    nodeValues.put(e.getKey(),e.getValue());  }  for (  Entry<Tree,Node> e : other.treeLookup.entrySet()) {    treeLookup.put(e.getKey(),e.getValue());  }  for (  Entry<Block,TransferInput<A,S>> e : other.stores.entrySet()) {    stores.put(e.getKey(),e.getValue());  }  for (  Entry<Element,A> e : other.finalLocalValues.entrySet()) {    finalLocalValues.put(e.getKey(),e.getValue());  }}  }
class C{  public static void addDirToClasspath(File directory) throws IOException {  if (directory.exists()) {    File[] files=directory.listFiles();    for (int i=0; i < files.length; i++) {      File file=files[i];      addURL(file.toURI().toURL());    }  } else {    System.err.println("The directory \"" + directory + "\" does not exist!");  }}  }
class C{  public void centerOn(@NonNull View source){  centerOn=source;}  }
class C{  public void addBackward(EdgeInfo ei){  backward.append(ei);}  }
class C{  @SuppressWarnings("rawtypes") @Test public void testCustomStorageFormat() throws Exception {  String resourceId="/schema/test/foo";  String storedResourceId="_schema_test_foo.bin";  MockAnalysisComponent observer=new MockAnalysisComponent();  List<ManagedResourceObserver> observers=Arrays.asList((ManagedResourceObserver)observer);  Map<String,Object> storedData=new HashMap<>();  Map<String,Object> initArgs=new HashMap<>();  initArgs.put("someArg","someVal");  initArgs.put("arg2",Boolean.TRUE);  List<String> arg3list=Arrays.asList("one","two","three");  initArgs.put("arg3",arg3list);  initArgs.put("arg4",18L);  initArgs.put("arg5",0.9);  Map<String,Long> arg6map=new HashMap<>();  arg6map.put("uno",1L);  arg6map.put("dos",2L);  initArgs.put("arg6",arg6map);  storedData.put("initArgs",initArgs);  List<String> managedList=new ArrayList<>();  managedList.add("1");  managedList.add("2");  managedList.add("3");  storedData.put(ManagedResource.MANAGED_JSON_LIST_FIELD,managedList);  ManagedResourceStorage.InMemoryStorageIO storageIO=new ManagedResourceStorage.InMemoryStorageIO();  storageIO.storage.put(storedResourceId,ser2bytes((Serializable)storedData));  CustomStorageFormatResource res=new CustomStorageFormatResource(resourceId,new SolrResourceLoader(Paths.get("./")),storageIO);  res.loadManagedDataAndNotify(observers);  assertTrue("Observer was not notified by ManagedResource!",observer.wasNotified);  List<String> updatedData=new ArrayList<>();  updatedData.add("1");  updatedData.add("2");  updatedData.add("3");  updatedData.add("4");  res.storeManagedData(updatedData);  Object stored=res.storage.load(resourceId);  assertNotNull(stored);  assertTrue(stored instanceof Map);  Map storedMap=(Map)stored;  assertNotNull(storedMap.get("initArgs"));  List storedList=(List)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);  assertTrue(storedList.contains("4"));}  }
class C{  public AccountHeaderBuilder withHeaderBackground(Drawable headerBackground){  this.mHeaderBackground=new ImageHolder(headerBackground);  return this;}  }
class C{  public E removeFirst(){  final Node<E> f=first;  if (f == null)   throw new NoSuchElementException();  return unlinkFirst(f);}  }
class C{  public void testPropertyFileLoading() throws Exception {  File propFile=File.createTempFile("propertyLoadTest",".properties");  PrintWriter pw=new PrintWriter(propFile);  pw.println("a=");  pw.println("a1=   ");  pw.println("b=foo");  pw.println("b1=  foo  ");  pw.close();  FileInputStream fis=new FileInputStream(propFile);  TungstenProperties props=new TungstenProperties();  props.load(fis);  fis.close();  Assert.assertEquals("Empty string set","",props.get("a"));  Assert.assertEquals("Blank string set","",props.get("a1"));  Assert.assertEquals("Value set","foo",props.get("b"));  Assert.assertEquals("Padded value set","foo  ",props.get("b1"));  Assert.assertNull("No value set, is null",props.get("c"));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:41.303 -0500",hash_original_method="61CB88820073366C14C36F5A2569814F",hash_generated_method="7D268822285759A7379C078F51F43CDF") public static final String readMagic(DataInputStream in){  try {    byte[] bytes=new byte[512];    for (int i=0; i < bytes.length; i++) {      byte b=in.readByte();      if (b == '\0') {        String string=new String(bytes,0,i,"UTF-8");        if (string.startsWith(MAGIC)) {          return string;        }        return null;      }      bytes[i]=b;    }    return null;  } catch (  IOException e) {    return null;  }}  }
class C{  public void testRegister1(){  Phaser phaser=new Phaser();  assertState(phaser,0,0,0);  assertEquals(0,phaser.register());  assertState(phaser,0,1,1);}  }
class C{  public Matrix4f rotateZ(float ang){  return rotateZ(ang,this);}  }
class C{  public void test_ConstructorIILjava_util_Random(){  BigInteger bi1=new BigInteger(10,5,rand);  BigInteger bi2=new BigInteger(10,5,rand);  assertTrue(bi1 + " is negative",bi1.compareTo(BigInteger.ZERO) >= 0);  assertTrue(bi1 + " is too big",bi1.compareTo(new BigInteger("1024",10)) < 0);  assertTrue(bi2 + " is negative",bi2.compareTo(BigInteger.ZERO) >= 0);  assertTrue(bi2 + " is too big",bi2.compareTo(new BigInteger("1024",10)) < 0);  Random rand=new Random();  BigInteger bi;  int certainty[]={0,1,2,3,4,5,6,7,8,9,10,Integer.MIN_VALUE,Integer.MIN_VALUE + 1,-2,-1};  for (int i=2; i <= 20; i++) {    for (int c=0; c < certainty.length; c++) {      bi=new BigInteger(i,c,rand);      assertEquals(i,bi.bitLength());    }  }  try {    new BigInteger(1,80,(Random)null);    fail("ArithmeticException expected");  } catch (  ArithmeticException expected) {  }  try {    new BigInteger(-1,(Random)null);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public static String toHex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  int v;  for (int j=0; j < bytes.length; j++) {    v=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[v >>> 4];    hexChars[j * 2 + 1]=hexArray[v & 0x0F];  }  return new String(hexChars);}  }
class C{  public void testMoveRenameFileDestinationRootSourceMissing() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE.name());  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));  create(igfs,null,null);  igfs.rename(FILE,file);  checkExist(igfs,DIR,SUBDIR);  checkExist(igfs,igfsSecondary,file);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public void stop(){  CGlobalProgressManager.instance().remove(this);}  }
class C{  @Override public UpdateResponse deleteById(List<String> ids) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.deleteById(ids);  if (this.solr1 != null)   ur=this.solr1.deleteById(ids);  return ur;}  }
class C{  public static SortedDocValues wrap(SortedSetDocValues sortedSet,Type selector){  if (sortedSet.getValueCount() >= Integer.MAX_VALUE) {    throw new UnsupportedOperationException("fields containing more than " + (Integer.MAX_VALUE - 1) + " unique terms are unsupported");  }  SortedDocValues singleton=DocValues.unwrapSingleton(sortedSet);  if (singleton != null) {    return singleton;  } else {switch (selector) {case MIN:      return new MinValue(sortedSet);case MAX:    return new MaxValue(sortedSet);case MIDDLE_MIN:  return new MiddleMinValue(sortedSet);case MIDDLE_MAX:return new MiddleMaxValue(sortedSet);default :throw new AssertionError();}}}  }
class C{  public String country(){  return country;}  }
class C{  @Override public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  try {    MBeanServer server=QueryEval.getMBeanServer();    String v=server.getObjectInstance(name).getClassName();    if (v.equals(className)) {      return super.apply(name);    }    throw new InvalidApplicationException("Class name is " + v + ", should be "+ className);  } catch (  Exception e) {    throw new InvalidApplicationException("Qualified attribute: " + e);  }}  }
class C{  public void add(R record){  records.add(record);  lastRecord=record;  currentSizeBytes+=record.lengthWithOverhead();  if (timestamp < 0) {    timestamp=System.currentTimeMillis();  }}  }
class C{  public JPAProperty(JPAProperty property){  this(property.getNamespace(),property.getLocalName(),property.getValue(),property.getOrder());}  }
class C{  public static void assertSearcherHasChanged(SolrIndexSearcher previous){  SolrQueryRequest req=req("*:*");  try {    SolrIndexSearcher newSearcher=getMainSearcher(req);    assertNotSame(previous,newSearcher);  }  finally {    req.close();  }}  }
class C{  public void inputSentence(String text,String subject,String userName,String targetUserName,Message message,Network network) throws MessagingException {  Vertex input=createInputParagraph(text.trim(),network);  Vertex user=network.createSpeaker(userName);  input.addRelationship(Primitive.INSTANTIATION,Primitive.EMAIL);  input.getRelationship(Primitive.INPUT).addRelationship(Primitive.INSTANTIATION,Primitive.EMAIL);  long date=0;  if (message.getReceivedDate() == null) {    date=message.getSentDate().getTime();  } else {    date=message.getReceivedDate().getTime();  }  input.addRelationship(Primitive.CREATEDAT,network.createVertex(date));  input.addRelationship(Primitive.ID,network.createVertex(message.getMessageNumber()));  input.addRelationship(Primitive.SPEAKER,user);  input.addRelationship(Primitive.TOPIC,network.createSentence(subject));  Vertex conversation=network.createInstance(Primitive.CONVERSATION);  Language.addToConversation(input,conversation);  conversation.addRelationship(Primitive.SPEAKER,user);  conversation.addRelationship(Primitive.TYPE,Primitive.EMAIL);  if (targetUserName != null) {    Vertex targetUser=null;    if (targetUserName.equals(getEmailAddress())) {      targetUser=network.createVertex(Primitive.SELF);    } else {      targetUser=network.createSpeaker(targetUserName);    }    input.addRelationship(Primitive.TARGET,targetUser);    conversation.addRelationship(Primitive.SPEAKER,targetUser);  }  user.addRelationship(Primitive.INPUT,input);  user.addRelationship(Primitive.EMAIL,input);  network.save();  getBot().memory().addActiveMemory(input);}  }
class C{  public int addPadding(byte[] in,int inOff){  int count=in.length - inOff;  byte code;  if (inOff > 0) {    code=(byte)((in[inOff - 1] & 0x01) == 0 ? 0xff : 0x00);  } else {    code=(byte)((in[in.length - 1] & 0x01) == 0 ? 0xff : 0x00);  }  while (inOff < in.length) {    in[inOff]=code;    inOff++;  }  return count;}  }
class C{  public boolean isReverseAxes(){  return m_iterator.isReverse();}  }
class C{  public boolean shouldShowRequestPermissionRationale(Fragment fragment,String... permissions){  for (  String permission : permissions) {    if (FragmentCompat.shouldShowRequestPermissionRationale(fragment,permission)) {      return true;    }  }  return false;}  }
class C{  public boolean canLoadArchive(AcsAccessObject acs,int archId,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    can=ArchiveManager.canLoadArchive(dbConn,acs.getAccessToken(),archId);    return can;  } catch (  Exception e) {    return can;  } finally {    dbConn.close();  }}  }
class C{  protected void startWorkFlow(int AD_Workflow_ID){  centerPane.setSelectedIndex(m_tabWorkflow);  wfPanel.load(AD_Workflow_ID,false);}  }
class C{  public TollAnalyzer(final String eventsFile,final double simulationEndTime,final int noOfTimeBins,final String ug){  this(eventsFile,simulationEndTime,noOfTimeBins,null,null,ug);}  }
class C{  public final boolean peekOrTrue(){  return (m_index > -1) ? m_values[m_index] : true;}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof SetCookie2) {    if (cookie instanceof ClientCookie && !((ClientCookie)cookie).containsAttribute(ClientCookie.VERSION_ATTR)) {      throw new MalformedCookieException("Violates RFC 2965. Version attribute is required.");    }  }}  }
class C{  public InstanceEvent(Object source,Instances structure){  super(source);  m_structure=structure;  m_status=FORMAT_AVAILABLE;}  }
class C{  public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((SwapValues)m_FilteredClassifier.getFilter()).setAttributeIndex("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  private long factorial(long num){  assert num > 0;  if (num == 1)   return num;  return num * factorial(num - 1);}  }
class C{  public static TypesTreeModel createEmptyTypeModel(){  return new TypesTreeModel();}  }
class C{  public static String dumpAsString(Object obj,boolean verbose){  StringBuffer buf=new StringBuffer();  if (obj instanceof ASN1Primitive) {    _dumpAsString("",verbose,(ASN1Primitive)obj,buf);  } else   if (obj instanceof ASN1Encodable) {    _dumpAsString("",verbose,((ASN1Encodable)obj).toASN1Primitive(),buf);  } else {    return "unknown object type " + obj.toString();  }  return buf.toString();}  }
class C{  public boolean removeArg(final BOp arg){  if (arg == null)   throw new IllegalArgumentException();  if (arg == this)   throw new IllegalArgumentException();  if (args.remove(arg)) {    mutation();    return true;  }  return false;}  }
class C{  public Asn1Exception(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  public void initComponents() throws Exception {  super.initComponents();  addHelpMenu("package.jmri.jmrix.sprog.update.SprogIIUpdateFrame",true);  _memo.getSprogVersionQuery().requestVersion(this);}  }
class C{  public int read() throws IOException {  if (ostart >= ofinish) {    int i=0;    while (i == 0)     i=getMoreData();    if (i == -1)     return -1;  }  return ((int)obuffer[ostart++] & 0xff);}  }
class C{  public boolean isLastExpanded(){  return lastExpanded;}  }
class C{  @Override public void characters(char[] text,int start,int len) throws SAXException {  if (curHandler != null) {    if (unrecognizedElements == 0) {      if (curHandler.buffer == null) {        curHandler.buffer=new StringBuffer();      }      curHandler.buffer.append(text,start,len);    }    if (curHandler.innerXml != null && (curHandler.mixedContent || unrecognizedElements > 0)) {      if (curHandler.fullTextIndex) {        curHandler.fullTextIndexWriter.write(text,start,len);        curHandler.fullTextIndexWriter.write("\n");      }      try {        curHandler.innerXml.characters(new String(text,start,len));      } catch (      IOException e) {        throw new SAXException(e);      }    }  }}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.413 -0500",hash_original_method="43C05B8A0FF5CBFFF8E027DF94B104CB",hash_generated_method="BEA9506A49791E09E851664F93E1DBF1") public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public static String toHexString(byte[] buf,String sep,int lineLen){  return toHexString(buf,0,buf.length,sep,lineLen);}  }
class C{  private void skip(){  index++;}  }
class C{  private double calculateMultipleTraitsLikelihood(ContrastedTraitNode contrastNode,int traitCount){  SimpleTree contrastTree=new SimpleTree(contrastNode);  double[][] w=new double[traitCount][traitCount];  for (int j=0; j < traitCount; j++) {    for (int k=j; k < traitCount; k++) {      double wjk=0.0;      for (int i=0; i < contrastTree.getInternalNodeCount(); i++) {        ContrastedTraitNode ctNode=(ContrastedTraitNode)contrastTree.getInternalNode(i);        wjk+=(ctNode.contrast[j] * ctNode.contrast[k]) / ctNode.contrastVariance;      }      wjk/=(double)contrastTree.getInternalNodeCount();      w[j][k]=wjk;      w[k][j]=wjk;    }  }  MutableMatrix answer=Matrix.Util.createMutableMatrix(new double[1][1]);  MutableMatrix temp=Matrix.Util.createMutableMatrix(w);  double detW=0.0;  try {    detW=Matrix.Util.det(temp);  } catch (  Matrix.NotSquareException nse) {    nse.printStackTrace(System.out);  }  MutableMatrix invW=Matrix.Util.createMutableMatrix(w);  try {    Matrix.Util.invert(invW);  } catch (  Matrix.NotSquareException nse) {    nse.printStackTrace(System.out);  }  double logL=0.0;  int n=contrastTree.getInternalNodeCount() + 1;  for (int i=0; i < contrastTree.getInternalNodeCount(); i++) {    ContrastedTraitNode ctNode=(ContrastedTraitNode)contrastTree.getInternalNode(i);    double[] contrasts=ctNode.getTraitContrasts();    Matrix uT=Matrix.Util.createRowVector(contrasts);    Matrix u=Matrix.Util.createColumnVector(contrasts);    try {      Matrix.Util.product(invW,u,temp);      Matrix.Util.product(uT,temp,answer);    } catch (    Matrix.WrongDimensionException wde) {      wde.printStackTrace(System.out);    }    logL+=answer.getElement(0,0) / ctNode.getContrastVariance();    logL+=traitCount * Math.log(ctNode.getContrastVariance());  }  logL+=traitCount * Math.log(contrastNode.getNodeVariance());  logL+=n * Math.log(detW);  logL+=n * traitCount * Math.log(2 * Math.PI);  logL=-logL / 2.0;  return logL;}  }
class C{  public void generate(ActionEvent actionEvent){  final FileChooser fileChooser=new FileChooser();  fileChooser.setTitle("Export to");  fileChooser.getExtensionFilters().add(new ExtensionFilter(Language.JAVA.name,"*.java"));  fileChooser.getExtensionFilters().add(new ExtensionFilter(Language.CPP.name,"*.cpp"));  fileChooser.getExtensionFilters().add(new ExtensionFilter(Language.PYTHON.name,"*.py"));  fileChooser.setInitialFileName("Pipeline.java");  final File file=fileChooser.showSaveDialog(root.getScene().getWindow());  if (file == null) {    return;  }  Language lang=Language.get(fileChooser.getSelectedExtensionFilter().getDescription());  Exporter exporter=new Exporter(pipeline.getSteps(),lang,file);  final Set<String> nonExportableSteps=exporter.getNonExportableSteps();  if (!nonExportableSteps.isEmpty()) {    StringBuilder b=new StringBuilder("The following steps cannot be exported:\n");    nonExportableSteps.forEach(null);    Alert alert=new Alert(Alert.AlertType.WARNING);    alert.setContentText(b.toString());    alert.showAndWait();    return;  }  Thread exportRunner=new Thread(exporter);  exportRunner.setDaemon(true);  exportRunner.start();}  }
class C{  public void sendRequests(){  Connection conn=plugin.getDb().getSQLConnection();  try (Statement st=conn.createStatement()){    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getDeathHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "deaths VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (deaths)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "deaths VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getDeathHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getArrowHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "arrows VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (arrows)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "arrows VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getArrowHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getSnowballHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "snowballs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (snowballs)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "snowballs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getSnowballHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getEggHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "eggs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (eggs)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "eggs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getEggHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getFishHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "fish VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (fish)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "fish VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getFishHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getItemBreakHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "itembreaks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (itembreaks)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "itembreaks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getItemBreakHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getEatenItemsHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "eatenitems VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (eatenitems)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "eatenitems VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getEatenItemsHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getShearHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "shears VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (shears)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "shears VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getShearHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getMilkHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "milks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (milks)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "milks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getMilkHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getTradeHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "trades VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (trades)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "trades VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getTradeHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getAnvilHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "anvils VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (anvils)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "anvils VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getAnvilHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getEnchantmentHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "enchantments VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (enchantments)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "enchantments VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getEnchantmentHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getBedHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "beds VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (beds)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "beds VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getBedHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getXpHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "levels VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (levels)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "levels VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getXpHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getConsumedPotionsHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "consumedpotions VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (consumedpotions)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "consumedpotions VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getConsumedPotionsHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getDropHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "drops VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (drops)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "drops VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getDropHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getHoePlowingHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "hoeplowing VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (hoeplowing)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "hoeplowing VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getHoePlowingHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getFertiliseHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "fertilising VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (fertilising)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "fertilising VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getFertiliseHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getTameHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "tames VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (tames)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "tames VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getTameHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getBrewingHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "brewing VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (brewing)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "brewing VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getBrewingHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getFireworkHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "fireworks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (fireworks)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "fireworks VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getFireworkHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getMusicDiscHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "musicdiscs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (musicdiscs)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "musicdiscs VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getMusicDiscHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getEnderPearlHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "enderpearls VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername) DO UPDATE SET (enderpearls)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "enderpearls VALUES ('"+ entry.getKey()+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getEnderPearlHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getBlockPlaceHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "places VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername,blockid) DO UPDATE SET (places)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "places VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getBlockPlaceHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getBlockBreakHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "breaks VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername,blockid) DO UPDATE SET (breaks)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "breaks VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getBlockBreakHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getKillHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "kills VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername,mobname) DO UPDATE SET (kills)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "kills VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getKillHashMap()).remove(entry.getKey(),entry.getValue());    }    for (    Entry<String,Integer> entry : plugin.getPoolsManager().getCraftHashMap().entrySet()) {      if (plugin.getDb().isPostgres())       st.execute("INSERT INTO " + plugin.getDb().getTablePrefix() + "crafts VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")"+ " ON CONFLICT (playername,item) DO UPDATE SET (crafts)=("+ entry.getValue()+ ")"); else       st.execute("REPLACE INTO " + plugin.getDb().getTablePrefix() + "crafts VALUES ('"+ entry.getKey().substring(0,36)+ "', '"+ entry.getKey().substring(36)+ "', "+ entry.getValue()+ ")");      ((ConcurrentHashMap<String,Integer>)plugin.getPoolsManager().getCraftHashMap()).remove(entry.getKey(),entry.getValue());    }  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"Error while sending async pooled requests to database: ",e);  }}  }
class C{  public boolean fillEmpties(){  return filledEmpties == null ? false : filledEmpties;}  }
class C{  public TypeTuple apply(Substitution<ReferenceType> substitution){  List<Type> typeList=new ArrayList<>();  for (  Type type : this.list) {    Type newType=type.apply(substitution);    if (newType != null) {      typeList.add(newType);    } else {      typeList.add(type);    }  }  return new TypeTuple(typeList);}  }
class C{  @Override protected void uninstallViewListeners(View p){  super.uninstallViewListeners(p);  Action redoActionInView=p.getActionMap().get(ID);  if (redoActionInView != null && redoActionInView != this) {    redoActionInView.removePropertyChangeListener(redoActionPropertyListener);  }}  }
class C{  public Configurator emptyButton(int textRes,int backgroundRes){  if (textRes > 0) {    viewEmptyTryAgainButtonText=textRes;  }  if (backgroundRes > 0) {    viewEmptyTryAgainButtonBackgroundResource=backgroundRes;  }  return this;}  }
class C{  public static void recordRamUsage(String measurementPoint){  List<MemoryPoolMXBean> pools=ManagementFactory.getMemoryPoolMXBeans();  if (ramPoolName.length != pools.size()) {    logger.error("Unexpected change in number of RAM areas (was " + ramPoolName.length + ", now "+ pools.size());  } else {    for (int i=0; i < pools.size(); i++) {      MemoryPoolMXBean pool=pools.get(i);      if (ramPoolName[i] == null)       ramPoolName[i]=pool.getName();      if (ramPoolType[i] == null)       ramPoolType[i]=pool.getType().toString();      if (!ramPoolName[i].equals(pool.getName())) {        logger.error("Mismatch on RAM Pool " + i + " name (expected "+ ramPoolName[i]+ ", got "+ pool.getName()+ "0");      } else {        MemoryUsage usage=pool.getUsage();        if (usage.getCommitted() > ramPoolCommitted[i])         ramPoolCommitted[i]=usage.getCommitted();        if (usage.getInit() > ramPoolInit[i])         ramPoolInit[i]=usage.getInit();        if (usage.getMax() > ramPoolMax[i])         ramPoolMax[i]=usage.getMax();        if (usage.getUsed() > ramPoolUsed[i])         ramPoolUsed[i]=usage.getUsed();        if (logger.isDebugEnabled()) {          if (i == 0) {            logger.info("");            logger.info("Java VM RAM Usage " + measurementPoint);            logger.info(String.format("   %-20s %-15s%10s%10s%10s%10s","NAME","TYPE","COMMITTED","INIT","MAX","USED"));          }          logger.info(String.format("   %-20s %-15s%10d MB%7d MB%7d MB%7d MB",pool.getName(),pool.getType().toString(),usage.getCommitted() / (2 << 20),usage.getInit() / (2 << 20),usage.getMax() / (2 << 20),usage.getUsed() / (2 << 20)));          logger.info("");        }      }    }  }}  }
class C{  private static byte char64(char x){  if ((int)x < 0 || (int)x > index_64.length)   return -1;  return index_64[(int)x];}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public File resourceDwcaFile(@NotNull String resourceName){  return dataFile(RESOURCES_DIR + "/" + resourceName+ "/"+ DWCA_FILENAME);}  }
class C{  public title addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void testStartViaFaster(){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=new MultiNodeDijkstra(f.network,tc,tc);  Map<Node,InitialNode> fromNodes=new HashMap<Node,InitialNode>();  fromNodes.put(f.network.getNodes().get(Id.create(1,Node.class)),new InitialNode(1.0,1.0));  fromNodes.put(f.network.getNodes().get(Id.create(4,Node.class)),new InitialNode(4.0,4.0));  Map<Node,InitialNode> toNodes=new HashMap<Node,InitialNode>();  toNodes.put(f.network.getNodes().get(Id.create(5,Node.class)),new InitialNode(0.0,0.0));  Path p=dijkstra.calcLeastCostPath(fromNodes,toNodes,null);  assertNotNull("no path found!",p);  assertEquals(3,p.links.size());  assertEquals("1",p.links.get(0).getId().toString());  assertEquals("7",p.links.get(1).getId().toString());  assertEquals("5",p.links.get(2).getId().toString());}  }
class C{  public static final int[] quicksort(final int[] primary,final int[] secondary,final int[] names){  final int items=names.length;  final int[] primary_values=new int[items];  final int[] secondary_values=new int[items];  for (int i=0; i < items; i++) {    primary_values[i]=primary[i];    secondary_values[i]=secondary[i];  }  final int start=0;  int i, j, k;  int temp, temp2;  int temp_name;  for (i=start + 1; i < items; i++) {    temp=primary_values[i];    temp2=secondary_values[i];    temp_name=names[i];    k=start;    for (j=i - 1; j >= start; j--) {      if ((temp < primary_values[j]) | ((temp == primary_values[j]) & (temp2 < secondary_values[j]))) {        primary_values[j + 1]=primary_values[j];        secondary_values[j + 1]=secondary_values[j];        names[j + 1]=names[j];      } else {        k=j + 1;        break;      }    }    primary_values[k]=temp;    secondary_values[k]=temp2;    names[k]=temp_name;  }  return names;}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Class type=value.getClass();  Composite factory=getComposite(type);  Object real=factory.read(node,value);  return read(node,type,real);}  }
class C{  public static boolean isAVPlex(StorageSystem system){  return (system.getSystemType().equals(DiscoveredDataObject.Type.vplex.name()));}  }
class C{  public boolean exceptionOccurred(){  return getException() != null;}  }
class C{  public FluentTriFunction<T1,T2,T3,CompletableFuture<R>> liftAsync(final Executor ex){  return FluentFunctions.of(null);}  }
class C{  public BPTTCreationDialog(final NetworkPanel panel){  this.panel=panel;  setTitle("Build Backprop Through Time Network");  tfNumInputsOutputs.setColumns(5);  prefsPanel.addItem("Number of input / outupt nodes:",tfNumInputsOutputs);  prefsPanel.addItem("Number of hidden nodes:",tfNumHidden);  tfNumInputsOutputs.setText("" + 5);  tfNumHidden.setText("" + 5);  setContentPane(prefsPanel);}  }
class C{  public boolean mergeStack(Frame frame){  boolean changed=false;  if (top != frame.top)   throw new RuntimeException("Operand stacks could not be merged, they are different sizes!");  for (int i=0; i < top; i++) {    if (stack[i] != null) {      Type prev=stack[i];      Type merged=prev.merge(frame.stack[i]);      if (merged == Type.BOGUS)       throw new RuntimeException("Operand stacks could not be merged due to differing primitive types: pos = " + i);      stack[i]=merged;      if ((!merged.equals(prev)) || merged.popChanged()) {        changed=true;      }    }  }  return changed;}  }
class C{  public Spider(PageProcessor pageProcessor){  this.pageProcessor=pageProcessor;  this.site=pageProcessor.getSite();  this.startRequests=pageProcessor.getSite().getStartRequests();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.178 -0500",hash_original_method="0B011E4041136408340083F55A5156B3",hash_generated_method="407F6F402D6B283873CE3DF652B88B34") public int purge(){synchronized (impl) {    return impl.purge();  }}  }
class C{  public boolean canGoForward(){  return pager.getCurrentItem() < (adapter.getCount() - 1);}  }
class C{  public static boolean lazyGaussianElimination(final int var2Eq[][],final long[] c,final int[] variable,final long[] solution){  return lazyGaussianElimination(null,var2Eq,c,variable,solution);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return thresh;}  }
class C{  public boolean equals(XObject obj2){  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.equals(this);  try {    return m_val == obj2.bool();  } catch (  javax.xml.transform.TransformerException te) {    throw new org.apache.xml.utils.WrappedRuntimeException(te);  }}  }
class C{  public JavaEnvironment(File javaPath){  Objects.requireNonNull(javaPath);  this.javaPath=javaPath;}  }
class C{  public static void main(String[] args){  String outputFolderRunA="f:/data/experiments/parkingSearchOct2013/runs/run179/output/";  String outputFolderRunB="f:/data/experiments/parkingSearchOct2013/runs/run180/output/";  int startIteration=1200;  int endIteration=1205;  int iterationStep=10;  boolean ignoreCasesWithBothPPUse=true;  System.out.println("iteration\tpctDifferce-FacilityId\tpctDifferce-parkingStrategy\tpctDifferce-groupName");  for (int i=startIteration; i <= endIteration; i+=iterationStep) {    Matrix eventsMatrixA=GeneralLib.readStringMatrix(getEventsFileName(outputFolderRunA,i));    Matrix eventsMatrixB=GeneralLib.readStringMatrix(getEventsFileName(outputFolderRunB,i));    System.out.print(i + "\t" + percentageOfDifferentParkingUsages(eventsMatrixA,eventsMatrixB,"FacilityId",ignoreCasesWithBothPPUse));    System.out.print("\t" + percentageOfDifferentParkingUsages(eventsMatrixA,eventsMatrixB,"parkingStrategy",ignoreCasesWithBothPPUse));    System.out.print("\t" + percentageOfDifferentParkingUsages(eventsMatrixA,eventsMatrixB,"groupName",ignoreCasesWithBothPPUse));    System.out.println();  }}  }
class C{  @Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext){  this.callbackContext=callbackContext;  if (action.equals(ENCODE)) {    JSONObject obj=args.optJSONObject(0);    if (obj != null) {      String type=obj.optString(TYPE);      String data=obj.optString(DATA);      if (type == null) {        type=TEXT_TYPE;      }      if (data == null) {        callbackContext.error("User did not specify data to encode");        return true;      }      encode(type,data);    } else {      callbackContext.error("User did not specify data to encode");      return true;    }  } else   if (action.equals(SCAN)) {    scan(args);  } else {    return false;  }  return true;}  }
class C{  private boolean needIndexConsistency(){  return _index != null && _index.needConsistency();}  }
class C{  public void endElement(QName element,Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fDocumentHandler.endElement(element.rawname);    }    if (fContentHandler != null) {      fAugmentations=augs;      String uri=element.uri != null ? element.uri : "";      String localpart=fNamespaces ? element.localpart : "";      fContentHandler.endElement(uri,localpart,element.rawname);      if (fNamespaces) {        endNamespaceMapping();      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static List<Method> parseSpecMethods(List<String> strs){  LinkedList<Method> methods=new LinkedList<Method>();  for (  String str : strs) {    Method m=parseSpecMethod(str);    methods.add(m);  }  return methods;}  }
class C{  public static Year parseYear(String s){  int y;  try {    y=Integer.parseInt(s.trim());  } catch (  NumberFormatException e) {    throw new TimePeriodFormatException("Cannot parse string.");  }  try {    return new Year(y);  } catch (  IllegalArgumentException e) {    throw new TimePeriodFormatException("Year outside valid range.");  }}  }
class C{  public static <I0,I1,I2,I3,O>Function<tuple4<I0,I1,I2,I3>,O> Function(Class<?> theClass,String methodName,Class<?> parameterType0,Class<?> parameterType1,Class<?> parameterType2,Class<?> parameterType3){  return FunctionUtils.Function(theClass,methodName,parameterType0,parameterType1,parameterType2,parameterType3);}  }
class C{  public T caseAnonymous_concreteMethodDeclaration_2_(Anonymous_concreteMethodDeclaration_2_ object){  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  boolean alphaChannelOutput=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      alphaChannelOutput=Boolean.getBoolean(args[i]);    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal, alphaVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    double r, g, b, a;    double z;    double[] data;    float progress=0;    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    String outputHeader=inputHeader.replace(".dep","_Red.dep");    WhiteboxRaster outputFileRed=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileRed.setPreferredPalette("grey.pal");    outputFileRed.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    outputHeader=inputHeader.replace(".dep","_Green.dep");    WhiteboxRaster outputFileGreen=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileGreen.setPreferredPalette("grey.pal");    outputFileGreen.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    outputHeader=inputHeader.replace(".dep","_Blue.dep");    WhiteboxRaster outputFileBlue=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileBlue.setPreferredPalette("grey.pal");    outputFileBlue.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (!alphaChannelOutput) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            r=(double)((int)z & 0xFF);            g=(double)(((int)z >> 8) & 0xFF);            b=(double)(((int)z >> 16) & 0xFF);            outputFileRed.setValue(row,col,r);            outputFileGreen.setValue(row,col,g);            outputFileBlue.setValue(row,col,b);          } else {            outputFileRed.setValue(row,col,noData);            outputFileGreen.setValue(row,col,noData);            outputFileBlue.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      outputFileRed.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileRed.addMetadataEntry("Created on " + new Date());      outputFileRed.close();      outputFileGreen.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileGreen.addMetadataEntry("Created on " + new Date());      outputFileGreen.close();      outputFileBlue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileBlue.addMetadataEntry("Created on " + new Date());      outputFileBlue.close();      image.close();    } else {      outputHeader=inputHeader.replace(".dep","_A.dep");      WhiteboxRaster outputFileA=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);      outputFileA.setPreferredPalette("grey.pal");      outputFileA.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            r=(double)((int)z & 0xFF);            g=(double)(((int)z >> 8) & 0xFF);            b=(double)(((int)z >> 16) & 0xFF);            a=(double)(((int)z >> 24) & 0xFF);            outputFileRed.setValue(row,col,r);            outputFileGreen.setValue(row,col,g);            outputFileBlue.setValue(row,col,b);            outputFileA.setValue(row,col,a);          } else {            outputFileRed.setValue(row,col,noData);            outputFileGreen.setValue(row,col,noData);            outputFileBlue.setValue(row,col,noData);            outputFileA.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      outputFileRed.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileRed.addMetadataEntry("Created on " + new Date());      outputFileRed.close();      outputFileGreen.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileGreen.addMetadataEntry("Created on " + new Date());      outputFileGreen.close();      outputFileBlue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileBlue.addMetadataEntry("Created on " + new Date());      outputFileBlue.close();      outputFileA.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileA.addMetadataEntry("Created on " + new Date());      outputFileA.close();      image.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static boolean fileExists(String filePath){  File file=new File(filePath);  return file.exists();}  }
class C{  protected ILaunchConfiguration findOrCreateLaunchConfiguration(IResource resource,String startupUrl,boolean isExternal,boolean isGwtSuperDevModeEnabled) throws CoreException, OperationCanceledException {  ILaunchConfiguration config=findLaunchConfiguration(resource,startupUrl,isExternal);  if (config == null) {    config=createNewLaunchConfiguration(resource,startupUrl,isExternal,isGwtSuperDevModeEnabled);  } else   if (GWTNature.isGWTProject(resource.getProject()) && GWTLaunchConfigurationWorkingCopy.getSuperDevModeEnabled(config) != isGwtSuperDevModeEnabled) {    config=turnOnOrOffSuperDevMode(config,isGwtSuperDevModeEnabled);  }  return config;}  }
class C{  public List<String> makeKey(final Map<MetaKey,String> metaData,final boolean requireAll){  final List<String> result=new ArrayList<>(this.fields.size());  for (  final MetaKey field : this.fields) {    final String value=metaData.get(field);    if (requireAll && value == null) {      return null;    }    result.add(value);  }  return result;}  }
class C{  @Override public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){  for (  ValueAxis xAxis : this.domainAxes.values()) {    if (xAxis == null) {      continue;    }    if (useAnchor) {      double sourceX=source.getX();      if (this.orientation == PlotOrientation.HORIZONTAL) {        sourceX=source.getY();      }      double anchorX=xAxis.java2DToValue(sourceX,info.getDataArea(),getDomainAxisEdge());      xAxis.resizeRange2(factor,anchorX);    } else {      xAxis.resizeRange(factor);    }  }}  }
class C{  public void testDivisionKnuth1(){  byte aBytes[]={-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};  byte bBytes[]={-3,-3,-3,-3};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-5,-12,-33,-96,-36,-105,-56,92,15,48,-109};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(DatasetRenderingOrder.FORWARD)) {    return DatasetRenderingOrder.FORWARD;  } else   if (this.equals(DatasetRenderingOrder.REVERSE)) {    return DatasetRenderingOrder.REVERSE;  }  return null;}  }
class C{  protected void storeState(){  if (storePartials) {    likelihoodCore.storeState();  }  super.storeState();}  }
class C{  public boolean isISnsDiscoverySettable(){  return iSnsDiscoverySettable;}  }
class C{  protected StdTypeResolverBuilder _constructNoTypeResolverBuilder(){  return StdTypeResolverBuilder.noTypeInfoBuilder();}  }
class C{  public CCTMXLayer layerNamed(String layerName){  if (children_ == null)   return null;  for (  CCNode node : children_) {    CCTMXLayer layer=(CCTMXLayer)node;    if (layer != null) {      if (layer.layerName.equals(layerName))       return (CCTMXLayer)layer;    }  }  return null;}  }
class C{  public Matrix(int columns,double... data){  this(data,columns);}  }
class C{  private void readUidListHeader(String line) throws IOException {  if (line == null)   throw new IOException("Header entry in uid-file is null");  int gap1=line.indexOf(" ");  if (gap1 == -1) {    throw new IOException("Corrupted header entry in uid-file");  }  int version=Integer.valueOf(line.substring(0,gap1));  if (version != 1)   throw new IOException("Cannot read uidlists with versions other than 1.");  int gap2=line.indexOf(" ",gap1 + 1);  lastUid=Optional.of(MessageUid.of(Long.valueOf(line.substring(gap1 + 1,gap2))));  messageCount=Integer.valueOf(line.substring(gap2 + 1,line.length()));}  }
class C{  public ClientMessage createMessage(){  getInternalClient();  return internalClient.createMessage(isUseDurableMessage());}  }
class C{  public static int compareCanonicalIntegers(String int1,String int2){  if (int1.equals(int2)) {    return 0;  }  if (int1.charAt(0) == '-' && int2.charAt(0) != '-') {    return -1;  }  if (int2.charAt(0) == '-' && int1.charAt(0) != '-') {    return 1;  }  int result=int1.length() - int2.length();  if (result == 0) {    for (int i=0; result == 0 && i < int1.length(); i++) {      result=int1.charAt(i) - int2.charAt(i);    }  }  if (int1.charAt(0) == '-') {    result=-result;  }  return result;}  }
class C{  private boolean tag(TagData data,Body parent,boolean parseExpression) throws TemplateException {  boolean hasBody=false;  Position line=data.srcCode.getPosition();  int start=data.srcCode.getPos();  data.srcCode.next();  TagLib tagLib=nameSpace(data);  if (tagLib == null) {    data.srcCode.previous();    return false;  }  String strNameNormal=identifier(data.srcCode,false,true);  if (strNameNormal == null) {    data.srcCode.setPos((data.srcCode.getPos() - tagLib.getNameSpaceAndSeparator().length()) - 1);    return false;  }  String strName=strNameNormal.toLowerCase();  String appendix=null;  TagLibTag tagLibTag=tagLib.getTag(strName);  if (tagLibTag == null) {    tagLibTag=tagLib.getAppendixTag(strName);    if (tagLibTag == null) {      if (tagLib.getIgnoreUnknowTags()) {        data.srcCode.setPos(start);        return false;      }      throw new TemplateException(data.srcCode,"undefined tag [" + tagLib.getNameSpaceAndSeparator() + strName+ "]");    }    appendix=StringUtil.removeStartingIgnoreCase(strNameNormal,tagLibTag.getName());  }  Tag tag;  try {    tag=tagLibTag.getTag(data.factory,line,data.srcCode.getPosition());  } catch (  Exception e) {    throw new TemplateException(data.srcCode,e);  }  parent.addStatement(tag);  if (appendix != null) {    tag.setAppendix(appendix);    tag.setFullname(tagLibTag.getFullName().concat(appendix));  } else {    tag.setFullname(tagLibTag.getFullName());  }  tag.setTagLibTag(tagLibTag);  comment(data.srcCode,true);  if (tagLibTag.hasTTE()) {    data.ep.add(tagLibTag,tag,data.flibs,data.srcCode);  }  attributes(data,tagLibTag,tag);  if (tagLibTag.hasAttributeEvaluator()) {    try {      tagLibTag=tagLibTag.getAttributeEvaluator().evaluate(tagLibTag,tag);    } catch (    AttributeEvaluatorException e) {      throw new TemplateException(data.srcCode,e);    }  }  if (data.srcCode.forwardIfCurrent('>')) {    hasBody=tagLibTag.getHasBody();  } else   if (data.srcCode.forwardIfCurrent('/','>')) {    if (tagLibTag.getHasBody())     tag.setBody(new BodyBase(data.factory));  } else {    throw createTemplateException(data.srcCode,"tag [" + tagLibTag.getFullName() + "] is not closed",tagLibTag);  }  if (hasBody) {    if (tagLibTag.isTagDependent()) {      TagDependentBodyTransformer tdbt=null;      try {        tdbt=tagLibTag.getBodyTransformer();      } catch (      TagLibException e) {        throw new TemplateException(data.srcCode,e);      }      if (tdbt == null)       throw createTemplateException(data.srcCode,"Tag dependent body Transformer is invalid for Tag [" + tagLibTag.getFullName() + "]",tagLibTag);      tag.setBody(tdbt.transform(data.factory,data.root,data.ep,data.tlibs,data.flibs,tagLibTag.getFullName(),data.scriptTags,data.srcCode,data.settings));      if (!data.srcCode.forwardIfCurrent("</")) {        TemplateException te=new TemplateException(data.srcCode,"invalid construct");        if (tdbt instanceof CFMLScriptTransformer && ASMUtil.containsComponent(tag.getBody())) {          throw new CFMLScriptTransformer.ComponentTemplateException(te);        }        throw te;      }      TagLib tagLibEnd=nameSpace(data);      if (!(tagLibEnd != null && tagLibEnd.getNameSpaceAndSeparator().equals(tagLib.getNameSpaceAndSeparator())))       throw new TemplateException(data.srcCode,"invalid construct");      String strNameEnd=identifier(data.srcCode,true,true).toLowerCase();      if (!strName.equals(strNameEnd)) {        data.srcCode.setPos(start);        throw new TemplateException(data.srcCode,"Start and End Tag has not the same Name [" + tagLib.getNameSpaceAndSeparator() + strName+ "-"+ tagLibEnd.getNameSpaceAndSeparator()+ strNameEnd+ "]");      }      data.srcCode.removeSpace();      if (!data.srcCode.forwardIfCurrent('>'))       throw new TemplateException(data.srcCode,"End Tag [" + tagLibEnd.getNameSpaceAndSeparator() + strNameEnd+ "] not closed");    } else {      BodyBase body=new BodyBase(data.factory);      body.setParent(tag);      if (tagLibTag.getParseBody())       parseExpression=true;      while (true) {        ExprTransformer transfomer=null;        if (parseExpression) {          try {            transfomer=tagLibTag.getTagLib().getExprTransfomer();          } catch (          TagLibException e) {            throw new TemplateException(data.srcCode,e);          }        }        body(data,body,parseExpression,transfomer);        if (data.srcCode.isAfterLast()) {          if (tagLibTag.isBodyReq()) {            data.srcCode.setPos(start);            throw createTemplateException(data.srcCode,"No matching end tag found for tag [" + tagLibTag.getFullName() + "]",tagLibTag);          }          body.moveStatmentsTo(parent);          return executeEvaluator(data,tagLibTag,tag);        }        int posBeforeEndTag=data.srcCode.getPos();        if (!data.srcCode.forwardIfCurrent('<','/'))         throw createTemplateException(data.srcCode,"Missing end tag for [" + tagLibTag.getFullName() + "]",tagLibTag);        int _start=data.srcCode.getPos();        TagLib tagLibEnd=nameSpace(data);        if (tagLibEnd != null) {          String strNameEnd="";          if (tagLibEnd.getNameSpaceAndSeparator().equals(tagLib.getNameSpaceAndSeparator())) {            strNameEnd=identifier(data.srcCode,true,true).toLowerCase();            data.srcCode.removeSpace();            if (strName.equals(strNameEnd)) {              if (!data.srcCode.forwardIfCurrent('>'))               throw new TemplateException(data.srcCode,"End Tag [" + tagLibEnd.getNameSpaceAndSeparator() + strNameEnd+ "] not closed");              break;            }          }          if (tagLibTag.isBodyReq()) {            TagLibTag endTag=tagLibEnd.getTag(strNameEnd);            if (endTag != null && !endTag.getHasBody())             throw new TemplateException(data.srcCode,"End Tag [" + tagLibEnd.getNameSpaceAndSeparator() + strNameEnd+ "] is not allowed, for this tag only a Start Tag is allowed");            data.srcCode.setPos(start);            if (tagLibEnd.getIgnoreUnknowTags() && (tagLibEnd.getTag(strNameEnd)) == null) {              data.srcCode.setPos(_start);            } else             throw new TemplateException(data.srcCode,"Start and End Tag has not the same Name [" + tagLib.getNameSpaceAndSeparator() + strName+ "-"+ tagLibEnd.getNameSpaceAndSeparator()+ strNameEnd+ "]");          } else {            body.moveStatmentsTo(parent);            data.srcCode.setPos(posBeforeEndTag);            return executeEvaluator(data,tagLibTag,tag);          }        }        body.addPrintOut(data.factory,"</",null,null);      }      tag.setBody(body);    }  }  if (tag instanceof StatementBase)   ((StatementBase)tag).setEnd(data.srcCode.getPosition());  return executeEvaluator(data,tagLibTag,tag);}  }
class C{  public BusinessObjectDataStatusEntity createBusinessObjectDataStatusEntity(String statusCode,String description,Boolean preRegistrationStatus){  BusinessObjectDataStatusEntity businessObjectDataStatusEntity=new BusinessObjectDataStatusEntity();  businessObjectDataStatusEntity.setCode(statusCode);  businessObjectDataStatusEntity.setDescription(description);  businessObjectDataStatusEntity.setPreRegistrationStatus(preRegistrationStatus);  return businessObjectDataStatusDao.saveAndRefresh(businessObjectDataStatusEntity);}  }
class C{  public static int desaturate(int c){  int a=c & 0xff000000;  float r=((c & 0xff0000) >> 16);  float g=((c & 0x00ff00) >> 8);  float b=(c & 0x0000ff);  r*=0.2125f;  g*=0.7154f;  b*=0.0721f;  int gray=Math.min(((int)(r + g + b)),0xff) & 0xff;  return a | (gray << 16) | (gray << 8)| gray;}  }
class C{  private synchronized void notifyZoomListeners(ZoomEvent e){  for (  ZoomListener listener : mZoomListeners) {    listener.zoomApplied(e);  }}  }
class C{  public CIMInstance checkExists(StorageSystem storage,Volume volume,boolean propagated,boolean includeClassOrigin) throws Exception {  CIMInstance instance=null;  CIMObjectPath objectPath=_cimPath.getBlockObjectPath(storage,volume);  try {    if (objectPath != null) {      _log.debug(String.format("checkExists(storage=%s, objectPath=%s, propagated=%s, includeClassOrigin=%s)",storage.getSerialNumber(),objectPath.toString(),String.valueOf(propagated),String.valueOf(includeClassOrigin)));      instance=getInstance(storage,objectPath,propagated,includeClassOrigin,null);    }  } catch (  WBEMException e) {    if (e.getID() != WBEMException.CIM_ERR_NOT_FOUND) {      throw e;    }  }catch (  Exception e) {    _log.error("checkExists call encountered an exception",e);    throw e;  }  return instance;}  }
class C{  public IntArraySpliterator(int[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  public boolean skipLoadingRender(){  return skipRender;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.104 -0400",hash_original_method="379F3C8BA75588317558AB7BE5AA34A0",hash_generated_method="F163D1608D0123B45D0A1C14E95DFFF9") public synchronized boolean enable(boolean saveSetting){  mContext.enforceCallingOrSelfPermission(BLUETOOTH_ADMIN_PERM,"Need BLUETOOTH_ADMIN permission");  if (mIsAirplaneSensitive && isAirplaneModeOn() && !mIsAirplaneToggleable) {    return false;  }  mBluetoothState.sendMessage(BluetoothAdapterStateMachine.USER_TURN_ON,saveSetting);  return true;}  }
class C{  public Set<K> keySet(){  if (keySet == null) {    keySet=new ReferenceKeySet<K,V>(this);  }  return keySet;}  }
class C{  public ArbitraryBlock(ToplevelPane pane){  super("ArbitraryBlock",pane,pane.getEnvInstance().buildType("Arbitrary a => a"));  this.rngTrigger.setOnAction(null);  this.lastGenType=Optional.empty();  this.output.refreshType(new TypeScope());  this.getNextValue(this.hashCode(),false);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.329 -0500",hash_original_method="F57C7EC559BF09EB03BA0EA2BC063E8F",hash_generated_method="37ED6A429AC93FABB5ECD6432523CB64") private void copyFieldAttributes(){  if ((loadFields == null) || fields == null) {    return;  }  for (int i=0; i < loadFields.length; i++) {    ObjectStreamField loadField=loadFields[i];    String name=loadField.getName();    for (int j=0; j < fields.length; j++) {      ObjectStreamField field=fields[j];      if (name.equals(field.getName())) {        loadField.setUnshared(field.isUnshared());        loadField.setOffset(field.getOffset());        break;      }    }  }}  }
class C{  public void installAppBundle(String code,String data){  try {    resultBuilder.build(code);    if (code.equals(Constants.OPERATION_INSTALL_APPLICATION)) {      JSONObject appData=new JSONObject(data);      installApplication(appData,code);    } else     if (code.equals(Constants.OPERATION_INSTALL_APPLICATION_BUNDLE)) {      JSONArray jArray=null;      jArray=new JSONArray(data);      for (int i=0; i < jArray.length(); i++) {        JSONObject appObj=(JSONObject)jArray.getJSONObject(i);        installApplication(appObj,code);      }    }  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }}  }
class C{  private boolean putInternal(String variable,Object value){  Object oldValue=values.get(variable);  values.put(variable,value);  if (oldValue == null) {    return value != null;  } else {    return !oldValue.equals(value);  }}  }
class C{  public void advanceProcessingTime(Instant newProcessingTime) throws Exception {  timerInternals.advanceProcessingTime(TimerCallback.NO_OP,newProcessingTime);}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener listener){  m_propSupport.removePropertyChangeListener(listener);}  }
class C{  protected void firstInit(Context context){  entityName=context.getEntityAttribute("name");  String s=context.getEntityAttribute(ON_ERROR);  if (s != null)   onError=s;  initCache(context);  isFirstInit=false;}  }
class C{  public ConnectivityCheckServer(Agent parentAgent){  this.parentAgent=parentAgent;  logger=new Logger(classLogger,parentAgent.getLogger());  stunStack=this.parentAgent.getStunStack();  stunStack.getCredentialsManager().registerAuthority(this);  start();}  }
class C{  public static final Field MASK_COLUMN(int length){  if (length <= 0)   throw new IllegalArgumentException("The mask length must be positive");  return Field.create("column.mask.with." + length + ".chars").withValidation(null).withDescription("A comma-separated list of regular expressions matching fully-qualified names of columns that should " + "be masked with " + length + " asterisk ('*') characters.");}  }
class C{  private boolean isDelimiter() throws JasperException {  if (!isSpace()) {    int ch=peekChar();    if (ch == '=' || ch == '>' || ch == '"' || ch == '\'' || ch == '/') {      return true;    }    if (ch == '-') {      Mark mark=mark();      if (((ch=nextChar()) == '>') || ((ch == '-') && (nextChar() == '>'))) {        reset(mark);        return true;      } else {        reset(mark);        return false;      }    }    return false;  } else {    return true;  }}  }
class C{  public static int determineSampleSize(ImageRequest imageRequest,EncodedImage encodedImage){  if (!EncodedImage.isMetaDataAvailable(encodedImage)) {    return DEFAULT_SAMPLE_SIZE;  }  float ratio=determineDownsampleRatio(imageRequest,encodedImage);  int sampleSize;  if (encodedImage.getImageFormat() == ImageFormat.JPEG) {    sampleSize=ratioToSampleSizeJPEG(ratio);  } else {    sampleSize=ratioToSampleSize(ratio);  }  int maxDimension=Math.max(encodedImage.getHeight(),encodedImage.getWidth());  while (maxDimension / sampleSize > MAX_BITMAP_SIZE) {    if (encodedImage.getImageFormat() == ImageFormat.JPEG) {      sampleSize*=2;    } else {      sampleSize++;    }  }  return sampleSize;}  }
class C{  public static void build(PKIXBuilderParameters params) throws Exception {  CertPathBuilder builder=CertPathBuilder.getInstance("PKIX");  CertPathBuilderResult cpbr=builder.build(params);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void assertNotSame(Object expected,Object actual,String errorMessage){  TestUtils.assertNotSame(expected,actual,errorMessage);}  }
class C{  public Builder(int resourceId){  setResourceId(resourceId);}  }
class C{  AttributeListAdapter(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public NumericalAddSubtractExpression createNumericalAddSubtractExpression(){  NumericalAddSubtractExpressionImpl numericalAddSubtractExpression=new NumericalAddSubtractExpressionImpl();  return numericalAddSubtractExpression;}  }
class C{  protected String loadDocumentDetails(){  MOrder order=(MOrder)getPO();  setDateDoc(order.getDateOrdered());  setIsTaxIncluded(order.isTaxIncluded());  setAmount(AMTTYPE_Gross,order.getGrandTotal());  setAmount(AMTTYPE_Net,order.getTotalLines());  setAmount(AMTTYPE_Charge,order.getChargeAmt());  m_taxes=loadTaxes();  p_lines=loadLines(order);  return null;}  }
class C{  public static void fastScrollToTop(RecyclerView recyclerView){  new FastScrollToTop(recyclerView);}  }
class C{  public List<Element> append(String name,Collection<String> values){  List<Element> elements=new ArrayList<Element>(values.size());  for (  String value : values) {    elements.add(append(name,value));  }  return elements;}  }
class C{  public JBZipFile(File f,String encoding) throws IOException {  this.encoding=encoding;  archive=new RandomAccessFile(f,"rw");  try {    if (archive.length() > 0) {      populateFromCentralDirectory();    } else {      getOutputStream();    }  } catch (  IOException e) {    try {      archive.close();    } catch (    IOException e2) {    }    throw e;  }}  }
class C{  public boolean isClipped(){  return clipped;}  }
class C{  public void removeSeries(MatrixSeries series){  ParamChecks.nullNotPermitted(series,"series");  if (this.seriesList.contains(series)) {    series.removeChangeListener(this);    this.seriesList.remove(series);    fireDatasetChanged();  }}  }
class C{  @Beta public static String toString(byte x){  return toString(x,10);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget w=getWidget(stack);  return (w != null) ? w.getUntranslatedName() : null;}  }
class C{  protected void readLSD(){  width=readShort();  height=readShort();  final int packed=read();  gctFlag=(packed & 0x80) != 0;  gctSize=2 << (packed & 7);  bgIndex=read();  pixelAspect=read();  try {    mainPixels=new byte[width * height];    mainScratch=new int[width * height];    copyScratch=new int[width * height];    previousImage=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_4444);    currentImage=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_4444);  } catch (  final OutOfMemoryError e) {    final int dimension=(width * height) / 2;    mainPixels=new byte[dimension];    mainScratch=new int[dimension];    copyScratch=new int[dimension];    previousImage=Bitmap.createBitmap(width / 2,height / 2,Bitmap.Config.ARGB_4444);    currentImage=Bitmap.createBitmap(width / 2,height / 2,Bitmap.Config.ARGB_4444);  }}  }
class C{  public NotificationChain basicSetExecModule(BootstrapModule newExecModule,NotificationChain msgs){  BootstrapModule oldExecModule=execModule;  execModule=newExecModule;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.EXEC_MODULE__EXEC_MODULE,oldExecModule,newExecModule);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public String removeClassColumnTipText(){  return "Remove the class column (if set) from the data.";}  }
class C{  public void removeCardOffer(Offer offer){  ((AcceptedOfferBinder)getDataBinder(TYPE_CARDS)).remove(offer);}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<ResultPointsAndTransitions>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<ResultPoint,Integer>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  public final void op(String channel,String nick){  this.setMode(channel,"+o " + nick);}  }
class C{  public static void cleanup(Class<? extends Driver> driverClass){  ClassLoader pluginClassLoader=driverClass.getClassLoader();  if (pluginClassLoader == null) {    LOG.warn("PluginClassLoader is null. Cleanup not necessary.");    return;  }  shutDownMySQLAbandonedConnectionCleanupThread(pluginClassLoader);  unregisterOracleMBean(pluginClassLoader);}  }
class C{  public static String readAll(final File file) throws IOException {  try (InputStream input=new FileInputStream(file)){    return readAll(input);  } }  }
class C{  protected void showTableView(){  (new SelectionTableWindow(context)).setVisible(true);}  }
class C{  @HLEFunction(nid=0x20FFF560,version=150,checkInsideInterrupt=true) public int sceKernelCreateVTimer(String name,@CanBeNull TPointer optAddr){  SceKernelVTimerInfo sceKernelVTimerInfo=new SceKernelVTimerInfo(name);  vtimers.put(sceKernelVTimerInfo.uid,sceKernelVTimerInfo);  return sceKernelVTimerInfo.uid;}  }
class C{  public static double distance(double lat1,double lat2,double lon1,double lon2,double el1,double el2){  final int R=6371;  Double latDistance=deg2rad(lat2 - lat1);  Double lonDistance=deg2rad(lon2 - lon1);  Double a=Math.sin(latDistance / 2) * Math.sin(latDistance / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(lonDistance / 2)* Math.sin(lonDistance / 2);  Double c=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));  double distance=R * c * 1000;  double height=el1 - el2;  distance=Math.pow(distance,2) + Math.pow(height,2);  return Math.sqrt(distance);}  }
class C{  public Task delete(String clusterId) throws IOException {  String path=String.format("%s/%s",getBasePath(),clusterId);  HttpResponse response=this.restClient.perform(RestClient.Method.DELETE,path,null);  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  protected int execJava(StringList args){  return exec(javaExecutable,args);}  }
class C{  public void tabShown(Tab tab){  for (int i=0; i < mRecentTabs.size(); i++) {    Tab t=mRecentTabs.get(i).get();    if (t == tab) {      mRecentTabs.remove(i);    }  }}  }
class C{  public int scanLiteral(int quote,XMLString content) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  } else   if (fCurrentEntity.position == fCurrentEntity.count - 1) {    fCurrentEntity.ch[0]=fCurrentEntity.ch[fCurrentEntity.count - 1];    load(1,false);    fCurrentEntity.position=0;  }  int offset=fCurrentEntity.position;  int c=fCurrentEntity.ch[offset];  int newlines=0;  boolean external=fCurrentEntity.isExternal();  if (c == '\n' || (c == '\r' && external)) {    do {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (c == '\r' && external) {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.position=newlines;          if (load(newlines,false)) {            break;          }        }        if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {          fCurrentEntity.position++;          offset++;        } else {          newlines++;        }      } else       if (c == '\n') {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.position=newlines;          if (load(newlines,false)) {            break;          }        }      } else {        fCurrentEntity.position--;        break;      }    } while (fCurrentEntity.position < fCurrentEntity.count - 1);    for (int i=offset; i < fCurrentEntity.position; i++) {      fCurrentEntity.ch[i]='\n';    }    int length=fCurrentEntity.position - offset;    if (fCurrentEntity.position == fCurrentEntity.count - 1) {      content.setValues(fCurrentEntity.ch,offset,length);      return -1;    }  }  while (fCurrentEntity.position < fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position++];    if ((c == quote && (!fCurrentEntity.literal || external)) || c == '%' || !XMLChar.isContent(c)) {      fCurrentEntity.position--;      break;    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length - newlines;  content.setValues(fCurrentEntity.ch,offset,length);  if (fCurrentEntity.position != fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position];    if (c == quote && fCurrentEntity.literal) {      c=-1;    }  } else {    c=-1;  }  return c;}  }
class C{  public CharacterEscapeSequence createCharacterEscapeSequence(){  CharacterEscapeSequenceImpl characterEscapeSequence=new CharacterEscapeSequenceImpl();  return characterEscapeSequence;}  }
class C{  public final boolean isErrorEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  JSONObject jo=ja.optJSONObject(0);  if (jo != null) {    JSONArray names=jo.names();    if (names != null) {      return rowToString(names) + toString(names,ja);    }  }  return null;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  static public double log10(double inValue){  return Math.log(inValue) / Math.log(10.0);}  }
class C{  public void put(int key,double value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      double[] nvalues=new double[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public EventBTreeTupleSerializer(final IKeyBuilderFactory keyBuilderFactory){  super(keyBuilderFactory);}  }
class C{  public ParallelCompositeReader(boolean closeSubReaders,CompositeReader[] readers,CompositeReader[] storedFieldReaders) throws IOException {  super(prepareLeafReaders(readers,storedFieldReaders));  this.closeSubReaders=closeSubReaders;  Collections.addAll(completeReaderSet,readers);  Collections.addAll(completeReaderSet,storedFieldReaders);  if (!closeSubReaders) {    for (    final IndexReader reader : completeReaderSet) {      reader.incRef();    }  }  completeReaderSet.addAll(getSequentialSubReaders());}  }
class C{  public static void sort(float[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public String maxSubsequenceLengthTipText(){  return "The maximum subsequence length (theta in the paper)";}  }
class C{  @Deprecated public static String testServiceEndpointUrl(final String serviceEndpoint){  return normalizeEndpoint(serviceEndpoint);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getCapDevInput(stack).getCrossName();}  }
class C{  public synchronized void leave(){  if (!joined) {    return;  }  Presence leavePresence=new Presence(Presence.Type.unavailable);  leavePresence.setTo(room + "/" + nickname);  for (  PacketInterceptor packetInterceptor : presenceInterceptors) {    packetInterceptor.interceptPacket(leavePresence);  }  connection.sendPacket(leavePresence);  occupantsMap.clear();  nickname=null;  joined=false;  userHasLeft();}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  OpenCamera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.getCamera().setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public Builder discCacheExtraOptions(int maxImageWidthForDiscCache,int maxImageHeightForDiscCache,CompressFormat compressFormat,int compressQuality,BitmapProcessor processorForDiscCache){  this.maxImageWidthForDiscCache=maxImageWidthForDiscCache;  this.maxImageHeightForDiscCache=maxImageHeightForDiscCache;  this.imageCompressFormatForDiscCache=compressFormat;  this.imageQualityForDiscCache=compressQuality;  this.processorForDiscCache=processorForDiscCache;  return this;}  }
class C{  public void checkRange(double[] range,int scale){  if (mChart instanceof XYChart) {    double[] calcRange=((XYChart)mChart).getCalcRange(scale);    if (calcRange != null) {      if (!mRenderer.isMinXSet(scale)) {        range[0]=calcRange[0];        mRenderer.setXAxisMin(range[0],scale);      }      if (!mRenderer.isMaxXSet(scale)) {        range[1]=calcRange[1];        mRenderer.setXAxisMax(range[1],scale);      }      if (!mRenderer.isMinYSet(scale)) {        range[2]=calcRange[2];        mRenderer.setYAxisMin(range[2],scale);      }      if (!mRenderer.isMaxYSet(scale)) {        range[3]=calcRange[3];        mRenderer.setYAxisMax(range[3],scale);      }    }  }}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public void init(Allocator allocator){  this.allocator=allocator;  extractor.init(this);}  }
class C{  private ChangeFactory(){}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("");  HttpSession sess=request.getSession();  WWindowStatus ws=WWindowStatus.get(request);  if (ws == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  String columnName=WebUtil.getParameter(request,"ColumnName");  log.info("ColumnName=" + columnName + " - "+ ws.toString());  GridField mField=ws.curTab.getField(columnName);  log.config("ColumnName=" + columnName + ", MField="+ mField);  if (mField == null || columnName == null || columnName.equals("")) {    WebUtil.createErrorPage(request,response,this,Msg.getMsg(ws.ctx,"ParameterMissing"));    return;  }  MLocation location=null;  Object value=mField.getValue();  if (value != null && value instanceof Integer)   location=new MLocation(ws.ctx,((Integer)value).intValue(),null); else   location=new MLocation(ws.ctx,0,null);  String targetBase="opener.WWindow." + WWindow.FORM_NAME + "."+ columnName;  String action=request.getRequestURI();  WebDoc doc=WebDoc.createPopup(mField.getHeader());  doc.addPopupClose(ws.ctx);  boolean hasDependents=ws.curTab.hasDependants(columnName);  boolean hasCallout=mField.getCallout().length() > 0;  button reset=new button();  reset.addElement("Reset");  String script=targetBase + "D.value='';" + targetBase+ "F.value='';closePopup();";  if (hasDependents || hasCallout)   script+="startUpdate(" + targetBase + "F);";  reset.setOnClick(script);  doc.getTable().addElement(new tr().addElement(fillForm(ws,action,location,targetBase,hasDependents || hasCallout)).addElement(reset));  doc.addPopupClose(ws.ctx);  WebUtil.createResponse(request,response,this,null,doc,true);}  }
class C{  private static int transpositions(final CharSequence first,final CharSequence second){  int transpositions=0;  for (int i=0; i < first.length(); i++) {    if (first.charAt(i) != second.charAt(i)) {      transpositions++;    }  }  return transpositions / 2;}  }
class C{  public void asDate(MutableDateTime d){  if (length != 8)   throw new FIXValueFormatException("Not a date");  int year=getDigits(4,offset + 0);  int monthOfYear=getDigits(2,offset + 4);  int dayOfMonth=getDigits(2,offset + 6);  d.setDateTime(year,monthOfYear,dayOfMonth,0,0,0,0);}  }
class C{  public int writeBytes(int index,byte[] b,int offset,int length){  return this.array.put(this.boundOffset(index),b,offset,this.boundLength(index,length));}  }
class C{  public static URL[] findResourceBases(String baseResource,ClassLoader loader){  ArrayList<URL> list=new ArrayList<URL>();  try {    Enumeration<URL> urls=loader.getResources(baseResource);    while (urls.hasMoreElements()) {      URL url=urls.nextElement();      list.add(findResourceBase(url,baseResource));    }  } catch (  IOException e) {    throw new RuntimeException(e);  }  return list.toArray(new URL[list.size()]);}  }
class C{  public static boolean isLowSurrogate(int c){  return (0xDC00 <= c && c <= 0xDFFF);}  }
class C{  private void addFileUpload(String sessionId,FileUploadImpl filUpload){  if (sLogger.isActivated()) {    sLogger.debug("Add a file upload in the list (size=" + mFileUploadCache.size() + ")");  }  mFileUploadCache.put(sessionId,filUpload);}  }
class C{  public void focusLocalField(){}  }
class C{  public void writeToFile(String walletInfoFilename,MultiBitWalletVersion walletVersion) throws WalletSaveException {  BufferedWriter out=null;  try {    HashMap<String,WalletAddressBookData> allReceivingAddresses=new HashMap<String,WalletAddressBookData>();    if (receivingAddresses != null) {      for (      WalletAddressBookData addressBookData : receivingAddresses) {        allReceivingAddresses.put(addressBookData.address,addressBookData);      }    }    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(walletInfoFilename),"UTF8"));    out.write(INFO_MAGIC_TEXT + SEPARATOR + INFO_VERSION_TEXT+ "\n");    out.write(WALLET_VERSION_MARKER + SEPARATOR + walletVersion.getWalletVersionString()+ "\n");    Collection<WalletAddressBookData> receiveAddressValues=allReceivingAddresses.values();    for (    WalletAddressBookData addressBookData : receiveAddressValues) {      String columnOne=RECEIVE_ADDRESS_MARKER;      String columnTwo=addressBookData.getAddress();      String columnThree=addressBookData.getLabel();      if (columnTwo == null) {        columnTwo="";      }      out.write(columnOne + SEPARATOR + columnTwo+ SEPARATOR+ encodeURLString(columnThree)+ "\n");    }    for (    WalletAddressBookData addressBookData : sendingAddresses) {      String columnOne=SEND_ADDRESS_MARKER;      String columnTwo=addressBookData.getAddress();      String columnThree=addressBookData.getLabel();      if (columnTwo == null) {        columnTwo="";      }      out.write(columnOne + SEPARATOR + columnTwo+ SEPARATOR+ encodeURLString(columnThree)+ "\n");    }    Properties walletPreferencesClone=new Properties();    walletPreferencesClone.putAll(walletPreferences);    walletPreferencesClone.remove(BitcoinModel.WALLET_FILE_SIZE);    walletPreferencesClone.remove(BitcoinModel.WALLET_FILE_LAST_MODIFIED);    walletPreferencesClone.remove(BitcoinModel.WALLET_INFO_FILE_SIZE);    walletPreferencesClone.remove(BitcoinModel.WALLET_INFO_FILE_LAST_MODIFIED);    walletPreferencesClone.remove(BitcoinModel.VALIDATION_ADDRESS_IS_INVALID);    walletPreferencesClone.remove(BitcoinModel.VALIDATION_ADDRESS_VALUE);    walletPreferencesClone.remove(BitcoinModel.VALIDATION_AMOUNT_IS_INVALID);    walletPreferencesClone.remove(BitcoinModel.VALIDATION_AMOUNT_IS_MISSING);    walletPreferencesClone.remove(BitcoinModel.VALIDATION_AMOUNT_IS_NEGATIVE_OR_ZERO);    walletPreferencesClone.remove(BitcoinModel.VALIDATION_AMOUNT_VALUE);    walletPreferencesClone.remove(BitcoinModel.VALIDATION_NOT_ENOUGH_FUNDS);    walletPreferencesClone.remove(BitcoinModel.SEND_PERFORM_PASTE_NOW);    walletPreferencesClone.remove("sendErrorMessage");    walletPreferencesClone.remove("sendWasSuccessful");    walletPreferencesClone.remove("earliestTransactionDate");    for (    Map.Entry entry : walletPreferencesClone.entrySet()) {      String columnOne=PROPERTY_MARKER;      String columnTwo=(String)entry.getKey();      String encodedColumnThree=encodeURLString((String)entry.getValue());      if (columnTwo == null) {        columnTwo="";      }      out.write(columnOne + SEPARATOR + columnTwo+ SEPARATOR+ encodedColumnThree+ "\n");    }  } catch (  IOException ioe) {    throw new WalletSaveException("Could not write walletinfo file for wallet '" + walletInfoFilename + "'",ioe);  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException e) {        throw new WalletSaveException("Could not close walletinfo file for wallet '" + walletInfoFilename + "'",e);      }    }  }}  }
class C{  public static long parse(String s,boolean clamp){  if (s == null || s.length() == 0 || !Character.isDigit(s.charAt(0)))   throw new NumberFormatException();  long value=0;  long ttl=0;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    long oldvalue=value;    if (Character.isDigit(c)) {      value=(value * 10) + Character.getNumericValue(c);      if (value < oldvalue)       throw new NumberFormatException();    } else {switch (Character.toUpperCase(c)) {case 'W':        value*=7;case 'D':      value*=24;case 'H':    value*=60;case 'M':  value*=60;case 'S':break;default :throw new NumberFormatException();}ttl+=value;value=0;if (ttl > 0xFFFFFFFFL) throw new NumberFormatException();}}if (ttl == 0) ttl=value;if (ttl > 0xFFFFFFFFL) throw new NumberFormatException(); else if (ttl > MAX_VALUE && clamp) ttl=MAX_VALUE;return ttl;}  }
class C{  public ZkClusterData fetchClusterHealth(Collection<String> collections) throws Exception {  Map<String,Map<String,String>> sourceCollectionToNodeMap=getZkClusterData().getCollectionToNodeMapping();  Set<SolrCore> cluterCoresStatus=new HashSet<SolrCore>();  try {    zookeeperHandle=ZKConnectionManager.connectToZookeeper(this.zkHost);    setZookeeperHandle(zookeeperHandle);    for (    String sourceCollection : collections) {      fetchCoreHealthStatus(sourceCollectionToNodeMap,cluterCoresStatus,sourceCollection);    }  }  finally {    getZookeeperHandle().close();  }  getZkClusterData().setCluterCoresStatus(cluterCoresStatus);  return getZkClusterData();}  }
class C{  public final CC maxWidth(String size){  hor.setSize(LayoutUtil.derive(hor.getSize(),null,null,ConstraintParser.parseUnitValue(size,true)));  return this;}  }
class C{  private static void logThreadInfo(LEVEL level,String curTag){  String msg="Thread: " + Thread.currentThread().getName();  if (isLog2ConsoleEnabled) {    log2Console(level,curTag,msg,null);  }  if (isLog2FileEnabled) {    log2File(level,curTag,msg,null);  }}  }
class C{  public void deferFree(final long encodeAddr){  m_deferredFrees.add(encodeAddr);}  }
class C{  public static boolean isRelationshipParsable(JsonNode dataNode){  return dataNode != null && dataNode.hasNonNull(JSONAPISpecConstants.ID) && dataNode.hasNonNull(JSONAPISpecConstants.TYPE) && !dataNode.get(JSONAPISpecConstants.ID).isContainerNode() && !dataNode.get(JSONAPISpecConstants.TYPE).isContainerNode();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ABSTRACT_CASE_CLAUSE__STATEMENTS:    getStatements().clear();  getStatements().addAll((Collection<? extends Statement>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static TransitLine mergeTransitLine(TransitLine oldLine){  return mergeTransitLine(new TransitScheduleFactoryImpl(),oldLine);}  }
class C{  public void deleteStorageView(String viewName,String clusterName,Boolean[] viewFound) throws VPlexApiException {  s_logger.info("Request for storage view deletion on VPlex at {}",_baseURI);  _exportMgr.deleteStorageView(viewName,clusterName,viewFound);  s_logger.info("Storage view was found for deletion: {}",viewFound[0]);}  }
class C{  public final Node popAndTop(){  m_firstFree--;  m_map[m_firstFree]=null;  return (m_firstFree == 0) ? null : m_map[m_firstFree - 1];}  }
class C{  @Override public void startMonitoring(MonitoringJob monitoringJob,DistributedQueueItemProcessedCallback callback){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());synchronized (cacheLock) {    String storageSystemURI=monitoringJob.getId().toString();    _logger.info("storageSystemURI :{}",storageSystemURI);    try {      addIsilonDeviceIntoCache(storageSystemURI,callback);    } catch (    Exception e) {      _logger.error(e.getMessage(),e);    }  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  public DcwRecordFile(String name,boolean deferInit) throws FormatException {  this.filename=name;  if (!deferInit) {    finishInitialization();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public DepthButton(String text){  super(text);  setContentAreaFilled(false);}  }
class C{  public static Vector<?> create(Vector<String> markerNames,Properties properties){  return getInstance()._create(markerNames,null,properties,null,false);}  }
class C{  public void refreshSpeakerButton(){  AudioManager audioManager=(AudioManager)VectorCallViewActivity.this.getSystemService(Context.AUDIO_SERVICE);  boolean isOn=audioManager.isSpeakerphoneOn();  Log.d(LOG_TAG,"## refreshSpeakerButton(): isOn=" + isOn);  int iconId=isOn ? R.drawable.ic_material_speaker_phone_pink_red : R.drawable.ic_material_speaker_phone_grey;  mSpeakerSelectionView.setImageResource(iconId);  VectorCallViewActivity.this.setVolumeControlStream(audioManager.getMode());}  }
class C{  public static void gluLookAt(GL10 gl,float eyeX,float eyeY,float eyeZ,float centerX,float centerY,float centerZ,float upX,float upY,float upZ){  float[] scratch=sScratch;synchronized (scratch) {    Matrix.setLookAtM(scratch,0,eyeX,eyeY,eyeZ,centerX,centerY,centerZ,upX,upY,upZ);    gl.glMultMatrixf(scratch,0);  }}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public Tanh(){  super(Number.class,Number.class);}  }
class C{  public boolean isDisjoint(){  return matrix[Location.INTERIOR][Location.INTERIOR] == Dimension.FALSE && matrix[Location.INTERIOR][Location.BOUNDARY] == Dimension.FALSE && matrix[Location.BOUNDARY][Location.INTERIOR] == Dimension.FALSE && matrix[Location.BOUNDARY][Location.BOUNDARY] == Dimension.FALSE;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public UpdateConstraintException(String message,DomainObjectExceptionBean bean){  super(message,bean);}  }
class C{  public static boolean nullEquals(String s1,String s2){  return (s1 == null ? s2 == null : s1.equals(s2));}  }
class C{  void close(){  try {    stop=true;    JdbcUtils.closeSilently(conn);    if (socket != null) {      socket.close();    }    server.trace("Close");  } catch (  Exception e) {    server.traceError(e);  }  conn=null;  socket=null;  server.remove(this);}  }
class C{  @SuppressWarnings("unchecked") public CFunctionFilterCreator(final IViewContainer module){  super(Lists.newArrayList(new CInstructionGenerator(module),new CBlockGenerator(),new CEdgeGenerator(),new CNameDescriptionGenerator<CViewWrapper>(module)));  m_component=new CFunctionFilterComponent(module);}  }
class C{  public BufferedImage generateQRcode(String address,String amount,String label,int scaleFactor){  String bitcoinURI="";  try {    Address decodeAddress=null;    if (address != null && !"".equals(address) && this.bitcoinController.getMultiBitService() != null && this.bitcoinController.getModel().getNetworkParameters() != null) {      decodeAddress=new Address(this.bitcoinController.getModel().getNetworkParameters(),address);    }    if (decodeAddress != null && !"".equals(decodeAddress)) {      if (amount != null && !"".equals(amount)) {        CurrencyConverterResult converterResult=CurrencyConverter.INSTANCE.parseToBTCNotLocalised(amount);        if (converterResult.isBtcMoneyValid()) {          bitcoinURI=BitcoinURI.convertToBitcoinURI(decodeAddress,converterResult.getBtcMoney().getAmount().toBigInteger(),label,null);        } else {        }      } else {        bitcoinURI=BitcoinURI.convertToBitcoinURI(decodeAddress,null,label,null);      }    }    this.bitcoinController.getModel().setActiveWalletPreference(BitcoinModel.SEND_PERFORM_PASTE_NOW,"false");  } catch (  IllegalArgumentException e) {    return null;  }catch (  AddressFormatException e) {    return null;  }  ByteMatrix matrix;  try {    matrix=encode(bitcoinURI);  } catch (  com.google.zxing.WriterException e) {    return null;  }catch (  IllegalArgumentException e) {    return null;  }  int matrixWidth=matrix.getWidth();  int matrixHeight=matrix.getHeight();  int swatchWidth=matrixWidth * scaleFactor;  int swatchHeight=matrixHeight * scaleFactor;  BufferedImage image=new BufferedImage(swatchWidth,swatchHeight,BufferedImage.TYPE_INT_RGB);  for (int y=0; y < matrixHeight; y++) {    for (int x=0; x < matrixWidth; x++) {      byte imageValue=matrix.get(x,y);      for (int scaleX=0; scaleX < scaleFactor; scaleX++) {        for (int scaleY=0; scaleY < scaleFactor; scaleY++) {          image.setRGB(x * scaleFactor + scaleX,y * scaleFactor + scaleY,imageValue);        }      }    }  }  return image;}  }
class C{  private static synchronized boolean checkFolderPermissions(StringBuilder aStringBuilder,String aDirectory){  File directory=new File(aDirectory);  if (!directory.exists()) {    directory.mkdirs();  }  if (!directory.canRead()) {    aStringBuilder.append("The directory [" + directory + "] is not readable. "+ "Please check your permissions rights.\n");    return false;  }  if (!directory.canWrite()) {    aStringBuilder.append("The directory [" + directory + "] is not writable. "+ "Please check your permissions rights.\n");    return false;  }  return true;}  }
class C{  private void sendBroadcastNewSyncFolder(Account account,String remotePath){  Intent added=new Intent(FileDownloader.getDownloadAddedMessage());  added.putExtra(FileDownloader.ACCOUNT_NAME,account.name);  added.putExtra(FileDownloader.EXTRA_REMOTE_PATH,remotePath);  added.putExtra(FileDownloader.EXTRA_FILE_PATH,FileStorageUtils.getSavePath(account.name) + remotePath);  mService.sendStickyBroadcast(added);}  }
class C{  public Vector direction(){  if (this.magnitude() == 0.0)   throw new ArithmeticException("Zero-vector has no direction");  return this.times(1.0 / this.magnitude());}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Client) {    Client other=(Client)obj;    return this.getEndpoint().equals(other.getEndpoint());  } else {    return false;  }}  }
class C{  private void paintBackgroundHover(Graphics2D g,JComponent c,int width,int height){  paintBackground(g,c,width,height,hover);}  }
class C{  public void testDrawBug() throws ChessParseError {  Game game=new Game(null,new TimeControlData());  assertEquals(false,game.haveDrawOffer());  game.processString("e4");  game.processString("c5");  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.processString("draw accept");  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.processString("draw rep");  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.processString("draw 50");  assertEquals(Game.GameState.ALIVE,game.getGameState());  assertEquals(Piece.EMPTY,game.tree.currentPos.getPiece(TextIO.getSquare("e5")));}  }
class C{  private EncodingFactory(Iterator<EncodingSet> encodingSets){  while (encodingSets.hasNext()) {    processEncodingSet(encodingSets.next());  }  final EncodingDefinition candidateDefinition=javaCharsetToDefinition.get(DEFAULT_CHARSET);  if (candidateDefinition != null && !candidateDefinition.isInformationOnly()) {    defaultEncoding=candidateDefinition.getEncoding();    defaultEncodingDefinition=candidateDefinition;  } else {    defaultEncoding=new EncodingGeneric(DEFAULT_CHARSET);    defaultEncodingDefinition=new DefaultEncodingDefinition(ENCODING_NAME_NONE,DEFAULT_CHARSET,1,ISCConstants.CS_NONE,false);  }}  }
class C{  public static boolean isWhitespaceStr(String str){  if (str == null) {    return false;  }  str=str.trim();  for (int i=0; i < str.length(); i++) {    if (!Character.isWhitespace(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  @NotNull public OptionalInt findOptionalInt(@NotNull SqlQuery query){  Optional<Integer> value=findOptional(Integer.class,query);  return value.isPresent() ? OptionalInt.of(value.get()) : OptionalInt.empty();}  }
class C{  public int findColumn(String columnName){  for (int i=0; i < m_fields.size(); i++) {    GridField field=(GridField)m_fields.get(i);    if (columnName.equals(field.getColumnName()))     return i;  }  return -1;}  }
class C{  public boolean removeFields(String name){  return this.remove(name) != null;}  }
class C{  public void publish(Record record,Handler<AsyncResult<Record>> resultHandler){  delegate.publish(record,resultHandler);}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  private void createPackageDir(File packageFile,String treePath){  packageNode=createPackage(packageFile);  packageDir=new DirectoryElement(treePath);  builder.newDep(packageDir,packageNode,JavaRelation.PACKAGEDIR);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeattributenodename.class,args);}  }
class C{  public int lastIndexOf(String subString,int start){  int subCount=subString.count;  if (subCount <= count && start >= 0) {    if (subCount > 0) {      if (start > count - subCount) {        start=count - subCount;      }      char[] target=subString.value;      int subOffset=subString.offset;      char firstChar=target[subOffset];      int end=subOffset + subCount;      while (true) {        int i=lastIndexOf(firstChar,start);        if (i == -1) {          return -1;        }        int o1=offset + i, o2=subOffset;        while (++o2 < end && value[++o1] == target[o2]) {        }        if (o2 == end) {          return i;        }        start=i - 1;      }    }    return start < count ? start : count;  }  return -1;}  }
class C{  private static boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  void store(ASTNode newNode,org.eclipse.che.ide.ext.java.jdt.internal.compiler.ast.ASTNode oldASTNode){}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  private static synchronized void cleanup(Statement S,ResultSet R){  logger.trace("cleanup() -->entry");  Connection C=null;  if (R != null) {    logger.trace("cleanup() --> ResultSet.close()");    try {      R.close();    } catch (    Throwable t) {      surfaceThrowable("cleanup() called ResultSet.close()",t);    }  }  if (S != null) {    try {      C=S.getConnection();    } catch (    Throwable t) {      surfaceThrowable("cleanup() called Statement.getConnection()",t);    }    logger.trace("cleanup() --> Statement.close()");    try {      S.close();    } catch (    Throwable t) {      surfaceThrowable("cleanup() called Statement.close()",t);    }  }  if (C != null) {    logger.trace("cleanup() --> Connection.close()");    try {      C.close();    } catch (    Throwable t) {      surfaceThrowable("cleanup() called Connection.close()",t);    }  }  logger.trace("cleanup() <--exit");}  }
class C{  public void append(StringBuffer buffer,String fieldName,int[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public AdvancedStateMap.Builder withSuffix(String builderSuffixIn){  this.suffix=builderSuffixIn;  return this;}  }
class C{  public static Animation inFromRightAnimation(long duration,Interpolator interpolator){  Animation inFromRight=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,+1.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f);  inFromRight.setDuration(duration);  inFromRight.setInterpolator(interpolator == null ? new AccelerateInterpolator() : interpolator);  return inFromRight;}  }
class C{  public LongLazyValue(LongSupplier supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  NodeList gList;  Element genElement;  Attr newAttr;  Attr setAttr1;  doc=(Document)load("staffNS",true);  if (!isExpandEntityReferences()) {    genderList=doc.getElementsByTagName("gender");    gender=genderList.item(2);    genList=gender.getChildNodes();    gen=genList.item(0);  } else {    gen=doc.createEntityReference("ent4");  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("notnull",genElement);  newAttr=doc.createAttributeNS("www.xyz.com","emp:local1");{    boolean success=false;    try {      setAttr1=genElement.setAttributeNodeNS(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  private List<String> assertNotBlankAndTrim(List<String> list,String displayName){  List<String> trimmed=null;  if (list != null) {    for (    String string : list) {      Assert.hasText(string,displayName + " must not be blank");    }    trimmed=new ArrayList<>();    for (    String string : list) {      trimmed.add(string.trim());    }  }  return trimmed;}  }
class C{  public void updateData(float heightCoefficient,float amplitude){  for (  GLWave wave : waves) {    wave.setCoefficient(Utils.randomize(heightCoefficient,random));  }  if (amplitude > this.amplitude) {    this.amplitude=amplitude;    if (heightCoefficient > 0.25f) {      produceBubbles();    }  } else {    this.amplitude=Utils.smooth(this.amplitude,amplitude,0.8f);  }}  }
class C{  public static Ignite start(IgniteConfiguration cfg,boolean failIfStarted) throws IgniteCheckedException {  return start(cfg,null,failIfStarted);}  }
class C{  @Autowired public DeleteCashierAllocationCommandHandler(final TellerWritePlatformService writePlatformService){  super();  this.writePlatformService=writePlatformService;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.947 -0500",hash_original_method="468639083877010DF76F28D2CCF3941F",hash_generated_method="0C793579C53BAAFB5D1C7FE4CB20EEA9") public void send(byte[] data,int length,InetAddress host,int port) throws IOException {  _sendPacket.setData(data);  _sendPacket.setLength(length);  _sendPacket.setAddress(host);  _sendPacket.setPort(port);  _socket_.send(_sendPacket);}  }
class C{  public double[] dataVector(V p){  return project(minusEquals(p.toArray(),centroid),strongEigenvectors);}  }
class C{  public static int[][] loadPNMFile(InputStream str,boolean flipY) throws IOException {  int[][] vals=loadPNMFile(str);  if (flipY) {    for (int i=0; i < vals.length; i++) {      int height=vals[i].length;      for (int j=0; j < height / 2; j++) {        int temp=vals[i][j];        vals[i][j]=vals[i][height - j + 1];        vals[i][height - j + 1]=temp;      }    }  }  return vals;}  }
class C{  protected SequenceContext(JsonNode json){  children=null != json ? json.elements() : null;}  }
class C{  public static int modifierFlags(boolean altP,boolean ctrlP,boolean metaP,boolean shiftP){  int flags=0;  if (altP)   flags|=F_ALT_DOWN;  if (ctrlP)   flags|=F_CTRL_DOWN;  if (metaP)   flags|=F_META_DOWN;  if (shiftP)   flags|=F_SHIFT_DOWN;  return flags;}  }
class C{  public boolean areTablesSet(){  return (qTables != null);}  }
class C{  public void testGeneratedColumns() throws Exception {  if (!versionMeetsMinimum(5,7,6)) {    return;  }  createTable("pythagorean_triple","(side_a DOUBLE NULL, side_b DOUBLE NULL, " + "side_c_vir DOUBLE AS (SQRT(side_a * side_a + side_b * side_b)) VIRTUAL UNIQUE KEY COMMENT 'hypotenuse - virtual', " + "side_c_sto DOUBLE GENERATED ALWAYS AS (SQRT(POW(side_a, 2) + POW(side_b, 2))) STORED UNIQUE KEY COMMENT 'hypotenuse - stored' NOT NULL "+ "PRIMARY KEY)");  assertEquals(1,this.stmt.executeUpdate("INSERT INTO pythagorean_triple (side_a, side_b) VALUES (3, 4)"));  this.rs=this.stmt.executeQuery("SELECT * FROM pythagorean_triple");  assertTrue(this.rs.next());  assertEquals(3d,this.rs.getDouble(1));  assertEquals(4d,this.rs.getDouble(2));  assertEquals(5d,this.rs.getDouble(3));  assertEquals(5d,this.rs.getDouble(4));  assertEquals(3d,this.rs.getDouble("side_a"));  assertEquals(4d,this.rs.getDouble("side_b"));  assertEquals(5d,this.rs.getDouble("side_c_sto"));  assertEquals(5d,this.rs.getDouble("side_c_vir"));  assertFalse(this.rs.next());  for (  String connProps : new String[]{"useInformationSchema=false","useInformationSchema=true"}) {    Connection testConn=null;    testConn=getConnectionWithProps(connProps);    DatabaseMetaData dbmd=testConn.getMetaData();    String test="Case [" + connProps + "]";    this.rs=dbmd.getColumns(null,null,"pythagorean_triple","%");    assertTrue(test,this.rs.next());    assertEquals(test,"side_a",this.rs.getString("COLUMN_NAME"));    assertEquals(test,"YES",this.rs.getString("IS_NULLABLE"));    assertEquals(test,"NO",this.rs.getString("IS_AUTOINCREMENT"));    assertEquals(test,"NO",this.rs.getString("IS_GENERATEDCOLUMN"));    assertTrue(test,this.rs.next());    assertEquals(test,"side_b",this.rs.getString("COLUMN_NAME"));    assertEquals(test,"YES",this.rs.getString("IS_NULLABLE"));    assertEquals(test,"NO",this.rs.getString("IS_AUTOINCREMENT"));    assertEquals(test,"NO",this.rs.getString("IS_GENERATEDCOLUMN"));    assertTrue(test,this.rs.next());    assertEquals(test,"side_c_vir",this.rs.getString("COLUMN_NAME"));    assertEquals(test,"YES",this.rs.getString("IS_NULLABLE"));    assertEquals(test,"NO",this.rs.getString("IS_AUTOINCREMENT"));    assertEquals(test,"YES",this.rs.getString("IS_GENERATEDCOLUMN"));    assertTrue(test,this.rs.next());    assertEquals(test,"side_c_sto",this.rs.getString("COLUMN_NAME"));    assertEquals(test,"NO",this.rs.getString("IS_NULLABLE"));    assertEquals(test,"NO",this.rs.getString("IS_AUTOINCREMENT"));    assertEquals(test,"YES",this.rs.getString("IS_GENERATEDCOLUMN"));    assertFalse(test,this.rs.next());    this.rs=dbmd.getPrimaryKeys(null,null,"pythagorean_triple");    assertTrue(test,this.rs.next());    assertEquals(test,"side_c_sto",this.rs.getString("COLUMN_NAME"));    assertEquals(test,"PRIMARY",this.rs.getString("PK_NAME"));    assertFalse(test,this.rs.next());    this.rs=dbmd.getIndexInfo(null,null,"pythagorean_triple",false,true);    assertTrue(test,this.rs.next());    assertEquals(test,"PRIMARY",this.rs.getString("INDEX_NAME"));    assertEquals(test,"side_c_sto",this.rs.getString("COLUMN_NAME"));    assertTrue(test,this.rs.next());    assertEquals(test,"side_c_sto",this.rs.getString("INDEX_NAME"));    assertEquals(test,"side_c_sto",this.rs.getString("COLUMN_NAME"));    assertTrue(test,this.rs.next());    assertEquals(test,"side_c_vir",this.rs.getString("INDEX_NAME"));    assertEquals(test,"side_c_vir",this.rs.getString("COLUMN_NAME"));    assertFalse(test,this.rs.next());    testConn.close();  }}  }
class C{  public final String toString(){  return image;}  }
class C{  public OrientationProvider(SensorManager sensorManager){  this.sensorManager=sensorManager;  currentOrientationRotationMatrix=new Matrixf4x4();  currentOrientationQuaternion=new Quaternion();}  }
class C{  public static String substring(String str,int start,int end){  if (str == null) {    return null;  }  if (end < 0) {    end=str.length() + end;  }  if (start < 0) {    start=str.length() + start;  }  if (end > str.length()) {    end=str.length();  }  if (start > end) {    return "";  }  if (start < 0) {    start=0;  }  if (end < 0) {    end=0;  }  return str.substring(start,end);}  }
class C{  public WalkDistanceEstimator(String root,String studyArea,String version,String percentage){  this.studyArea=studyArea;  this.sb=new M2UStringbuilder(root,studyArea,version,percentage);}  }
class C{  protected void invalidateGeometryCache(){  super.invalidateGeometryCache();  geometryBounds=null;  primitiveBounds=null;  sensitiveBounds=null;  outline=null;}  }
class C{  private int mergeMovementsAvailable(){  final AtomicInteger pairsOfMergeableTiles=new AtomicInteger();  int cont=0;  Direction direction=Direction.UP;  do {    for (    Integer x : gridOperator.getTraverseX()) {      for (      Integer y : gridOperator.getTraverseY()) {        Location thisloc=new Location(x,y);        Tile tile=gameGrid.get(thisloc);        if (tile != null) {          Tile offsetTile=gameGrid.get(thisloc.offset(direction));          if (offsetTile != null && tile.isMergeable(offsetTile)) {            pairsOfMergeableTiles.incrementAndGet();          }        }      }    }    direction=Direction.LEFT;    cont++;  } while (cont < 2);  return pairsOfMergeableTiles.get();}  }
class C{  public ChatResponse chat(ChatConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/post-chat",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    ChatResponse response=new ChatResponse();    response.parseXML(root);    return response;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  void calculateCounters(){  if (!isDBAvailable())   return;  long time=System.currentTimeMillis();  int total=0;  write.lock();  try {    countResetFeedsAndCategories();    total+=countFeedsWithUnread();    countCategoriesWithUnread();    countSpecialCategories(total);  }  finally {    write.unlock();  }  Log.i(TAG,String.format("Recalculated counters, total unread: %s (took %sms)",total,(System.currentTimeMillis() - time)));}  }
class C{  private Set<UserDTO> searchPersonUsers(String tenantName,SearchCriteria criteria,int limit) throws Exception {  Set<PersonUser> idmPersonUsers=getIDMClient().findPersonUsersByName(tenantName,criteria,limit);  return UserMapper.getUserDTOs(idmPersonUsers,false);}  }
class C{  private StatisticsType extractType(Element typeNode,StatisticsTypeFactory statFactory){  Assert.assertTrue(typeNode.getTagName().equals("type"));  Assert.assertTrue(typeNode.hasAttribute("name"));  final String typeName=typeNode.getAttribute("name");  ArrayList stats=new ArrayList();  NodeList statNodes=typeNode.getElementsByTagName("stat");  for (int i=0; i < statNodes.getLength(); i++) {    Element statNode=(Element)statNodes.item(i);    stats.add(extractStat(statNode,statFactory));  }  StatisticDescriptor[] descriptors=(StatisticDescriptor[])stats.toArray(new StatisticDescriptor[stats.size()]);  String description="";{    NodeList descriptionNodes=typeNode.getElementsByTagName("description");    if (descriptionNodes.getLength() > 0) {      Element descriptionNode=(Element)descriptionNodes.item(0);      if (descriptionNode.getParentNode().getNodeName().equals(typeNode.getNodeName())) {        description=extractDescription(descriptionNode);      }    }  }  return statFactory.createType(typeName,description,descriptors);}  }
class C{  @Override public void attributeReplaced(ServletContextAttributeEvent event){  log("attributeReplaced('" + event.getName() + "', '"+ event.getValue()+ "')");}  }
class C{  protected Object convertArray(Object arr){  final int size=Array.getLength(arr);  ArrayList list=new ArrayList(size);  for (int i=0; i < size; i++) {    list.add(Array.get(arr,i));  }  return list;}  }
class C{  public void addPages(){  page=new UmpleMainClassWizardPage(this,possibilities);  addPage(page);}  }
class C{  private MInOut createShipment(MDocType dt,Timestamp movementDate){  log.info("For " + dt);  MInOut shipment=new MInOut(this,dt.getC_DocTypeShipment_ID(),movementDate);  if (!shipment.save(get_TrxName())) {    m_processMsg="Could not create Shipment";    return null;  }  MOrderLine[] oLines=getLines(true,null);  for (int i=0; i < oLines.length; i++) {    MOrderLine oLine=oLines[i];    MInOutLine ioLine=new MInOutLine(shipment);    BigDecimal MovementQty=oLine.getQtyOrdered().subtract(oLine.getQtyDelivered());    int M_Locator_ID=MStorage.getM_Locator_ID(oLine.getM_Warehouse_ID(),oLine.getM_Product_ID(),oLine.getM_AttributeSetInstance_ID(),MovementQty,get_TrxName());    if (M_Locator_ID == 0) {      MWarehouse wh=MWarehouse.get(getCtx(),oLine.getM_Warehouse_ID());      M_Locator_ID=wh.getDefaultLocator().getM_Locator_ID();    }    ioLine.setOrderLine(oLine,M_Locator_ID,MovementQty);    ioLine.setQty(MovementQty);    if (oLine.getQtyEntered().compareTo(oLine.getQtyOrdered()) != 0)     ioLine.setQtyEntered(MovementQty.multiply(oLine.getQtyEntered()).divide(oLine.getQtyOrdered(),6,BigDecimal.ROUND_HALF_UP));    if (!ioLine.save(get_TrxName())) {      m_processMsg="Could not create Shipment Line";      return null;    }  }  shipment.processIt(DocAction.ACTION_Complete);  shipment.saveEx(get_TrxName());  if (!DOCSTATUS_Completed.equals(shipment.getDocStatus())) {    m_processMsg="@M_InOut_ID@: " + shipment.getProcessMsg();    return null;  }  return shipment;}  }
class C{  private void validateInitiatorsInExportGroup(ExportGroup exportGroup){  if (exportGroup != null && exportGroup.getInitiators() != null) {    Initiator initiator=null;    boolean isCluster=exportGroup.forCluster();    Map<String,Set<URI>> initiatorMap=new HashMap<>();    Iterator<String> existingInitiatorsIterator=exportGroup.getInitiators().iterator();    List<URI> staleInitiatorList=new ArrayList<>();    URI initiatorURI=null;    while (existingInitiatorsIterator.hasNext()) {      initiatorURI=URI.create(existingInitiatorsIterator.next());      initiator=_dbClient.queryObject(Initiator.class,initiatorURI);      String name=null;      if (initiator != null && !initiator.getInactive()) {        if (!VPlexControllerUtils.isVplexInitiator(initiator,_dbClient) && !ExportUtils.checkIfInitiatorsForRP(Arrays.asList(initiator))) {          if (isCluster && StringUtils.hasText(initiator.getClusterName()) && StringUtils.hasText(initiator.getHostName())) {            name=initiator.getClusterName();          } else           if (!StringUtils.hasText(initiator.getHostName()) || (isCluster && !StringUtils.hasText(initiator.getClusterName()))) {            _log.error("Initiator {} does not have host/cluster name",initiator.getId());            throw APIException.badRequests.invalidInitiatorName(initiator.getId(),exportGroup.getId());          }          Set<URI> set=null;          if (initiatorMap.get(name) == null) {            set=new HashSet<URI>();            initiatorMap.put(name,set);          } else {            set=initiatorMap.get(name);          }          set.add(initiator.getId());        }      } else {        _log.error("Stale initiator URI {} is in ExportGroup and can be removed from ExportGroup{}",initiatorURI,exportGroup.getId());        staleInitiatorList.add(initiatorURI);      }    }    if (!staleInitiatorList.isEmpty()) {      exportGroup.removeInitiators(staleInitiatorList);      _dbClient.updateObject(exportGroup);      _log.info("Stale initiator URIs {} has been removed from from ExportGroup {}",staleInitiatorList,exportGroup.getId());    }    _log.info("{}",initiatorMap);    if (exportGroup.getType().equals(ExportGroupType.Cluster.name()) && initiatorMap.size() > 1) {      _log.error("Export Group {} is having initiators from multiple cluster/host. List of cluster/host names :{}",exportGroup.getId(),Joiner.on(",").join(initiatorMap.keySet()));      throw APIException.badRequests.invalidGroupOfInitiators(exportGroup.getId(),Joiner.on(",").join(initiatorMap.keySet()));    }  }}  }
class C{  private void savePhotoIcon(PhotoIcon photoIcon,ContactId contact) throws FileAccessException {  byte photoContent[]=photoIcon.getContent();  if (photoContent == null) {    return;  }  Uri photoUri=Uri.withAppendedPath(CONTENT_URI,contact.toString());  OutputStream outstream=null;  try {    outstream=mLocalContentResolver.openContentOutputStream(photoUri);    outstream.write(photoContent);    outstream.flush();  } catch (  IOException e) {    throw new FileAccessException("Failed to save photo icon for contact : " + contact,e);  } finally {    CloseableUtils.tryToClose(outstream);  }}  }
class C{  private void checkChildCount(){  if (getChildCount() != 1) {    throw new IllegalStateException(getResources().getString(R.string.child_count_error));  }}  }
class C{  public boolean isControlledBy(Control control){  Assert.isNotNull(control);  boolean contains=controls.contains(control);  if (!contains && control instanceof Composite) {    Control[] children=((Composite)control).getChildren();    for (int i=0; i < children.length; i++) {      contains=isControlledBy(children[i]);      if (contains) {        return true;      }    }  }  return contains;}  }
class C{  public String toString(){  return super.toString() + ":" + getObject();}  }
class C{  public void testInOutParams() throws Exception {  if (versionMeetsMinimum(5,0)) {    CallableStatement storedProc=null;    createProcedure("testInOutParam","(IN p1 VARCHAR(255), INOUT p2 INT)\nbegin\n DECLARE z INT;\nSET z = p2 + 1;\nSET p2 = z;\n" + "SELECT p1;\nSELECT CONCAT('zyxw', p1);\nend\n");    storedProc=this.conn.prepareCall("{call testInOutParam(?, ?)}");    storedProc.setString(1,"abcd");    storedProc.setInt(2,4);    storedProc.registerOutParameter(2,Types.INTEGER);    storedProc.execute();    assertEquals(5,storedProc.getInt(2));  }}  }
class C{  public <AE extends LayoutType>GenPrimArray1D(Class<?> elementInterfaceClass,Class<AE> userDefinedArrayClass){  arrayImplClassName=ImplHelper.getImplClassName(userDefinedArrayClass);  arrayInterfaceClassName=userDefinedArrayClass.getName().replace('.','/');  this.elementInterfaceClass=elementInterfaceClass;  dbgPrintNames();}  }
class C{  private void layoutForm(){  m_columnCount=0;  if (m_data == null)   return;  for (int row=0; row < m_data.getRowCount(); row++) {    log.info("Row=" + row);    m_data.setRowIndex(row);    boolean somethingPrinted=true;    for (int i=0; i < m_format.getItemCount(); i++) {      MPrintFormatItem item=m_format.getItem(i);      if (!item.isPrinted())       continue;      m_columnCount++;      if (row > 0 && (item.isHeader() || item.isFooter()))       continue;      if (item.isHeader())       setArea(AREA_HEADER); else       if (item.isFooter())       setArea(AREA_FOOTER); else       setArea(AREA_CONTENT);      if (item.isSetNLPosition() && item.isRelativePosition())       m_tempNLPositon=0;      if (item.isNextLine() && somethingPrinted) {        newLine();        somethingPrinted=false;      } else {        addX(m_lastWidth[m_area]);      }      if (item.isNextPage()) {        newPage(false,false);      }      if (item.isRelativePosition()) {        addX(item.getXSpace());        addY(item.getYSpace());      } else       setRelativePosition(item.getXPosition(),item.getYPosition());      if (item.isSetNLPosition() && !item.isRelativePosition())       m_tempNLPositon=(int)getPosition().getX();      String alignment=item.getFieldAlignmentType();      int maxWidth=item.getMaxWidth();      boolean lineAligned=false;      if (item.isRelativePosition()) {        if (item.isLineAlignLeading()) {          alignment=MPrintFormatItem.FIELDALIGNMENTTYPE_LeadingLeft;          maxWidth=getAreaBounds().width;          lineAligned=true;        } else         if (item.isLineAlignCenter()) {          alignment=MPrintFormatItem.FIELDALIGNMENTTYPE_Center;          maxWidth=getAreaBounds().width;          lineAligned=true;        } else         if (item.isLineAlignTrailing()) {          alignment=MPrintFormatItem.FIELDALIGNMENTTYPE_TrailingRight;          maxWidth=getAreaBounds().width;          lineAligned=true;        }      }      PrintElement element=null;      if (item.isTypePrintFormat()) {        element=includeFormat(item,m_data);      } else       if (item.isBarcode()) {        element=createBarcodeElement(item);        if (element != null) {          element.layout(maxWidth,item.getMaxHeight(),false,alignment);        }      } else       if (item.isTypeImage()) {        if (item.isImageField())         element=createImageElement(item); else         if (item.isImageIsAttached())         element=ImageElement.get(item.get_ID()); else         element=ImageElement.get(item.getImageURL());        if (element != null)         element.layout(maxWidth,item.getMaxHeight(),false,alignment);      } else       if (item.isTypeField()) {        if (maxWidth == 0 && item.isFieldAlignBlock())         maxWidth=getAreaBounds().width;        element=createFieldElement(item,maxWidth,alignment,m_format.isForm());      } else       if (item.isTypeBox()) {        if (m_format.isForm())         element=createBoxElement(item);        if (element != null && maxWidth == 0) {          maxWidth=getAreaBounds().width;          element.setMaxWidth(maxWidth);        }      } else {        if (maxWidth == 0 && item.isFieldAlignBlock())         maxWidth=getAreaBounds().width;        element=createStringElement(item.getPrintName(m_format.getLanguage()),item.getAD_PrintColor_ID(),item.getAD_PrintFont_ID(),maxWidth,item.getMaxHeight(),item.isHeightOneLine(),alignment,true);      }      if (element != null) {        somethingPrinted=true;        if (!lineAligned)         m_lastWidth[m_area]=element.getWidth();        m_lastHeight[m_area]=element.getHeight();      } else {        somethingPrinted=false;        m_lastWidth[m_area]=0f;        m_lastHeight[m_area]=0f;        if (item.isRelativePosition()) {          addX(-item.getXSpace());          addY(-item.getYSpace());        }      }      if (item.isRelativePosition() && !lineAligned) {        if (!isXspaceFor(m_lastWidth[m_area])) {          log.finest("Not enough X space for " + m_lastWidth[m_area] + " - remaining "+ getXspace()+ " - Area="+ m_area);          newLine();        }        if (m_area == AREA_CONTENT && !isYspaceFor(m_lastHeight[m_area])) {          log.finest("Not enough Y space " + m_lastHeight[m_area] + " - remaining "+ getYspace()+ " - Area="+ m_area);          newPage(true,true);        }      }      if (element != null)       element.setLocation(m_position[m_area]);      if (m_area == AREA_CONTENT)       m_currPage.addElement(element); else       m_headerFooter.addElement(element);      if (m_lastHeight[m_area] > m_maxHeightSinceNewLine[m_area])       m_maxHeightSinceNewLine[m_area]=m_lastHeight[m_area];      if (!item.isRelativePosition())       m_maxHeightSinceNewLine[m_area]=m_lastHeight[m_area];    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.LOGICAL_AND_EXPRESSION__LEFT_OPERAND:    return getLeftOperand();case ExpressionsPackage.LOGICAL_AND_EXPRESSION__RIGHT_OPERAND:  return getRightOperand();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static int compareTo(Vector2 a,Vector2 b){  return (int)a.lengthSquared() - (int)b.lengthSquared();}  }
class C{  protected void clearConstraints(){  this.constraints=new ConstraintSet();}  }
class C{  public EventExpressionConfigAttribute(Expression authorizeExpression){  Assert.notNull(authorizeExpression,"authorizeExpression cannot be null");  this.authorizeExpression=authorizeExpression;}  }
class C{  public Builder add(String line){  int index=line.indexOf(":");  if (index == -1) {    throw new IllegalArgumentException("Unexpected header: " + line);  }  return add(line.substring(0,index).trim(),line.substring(index + 1));}  }
class C{  static public void assertNull(String message,Object object){  assertTrue(message,object == null);}  }
class C{  @Override public void onDestroy(){  super.onDestroy();  mActiveListItemAdapter.cleanup();  mCurrentListRef.removeEventListener(mCurrentListRefListener);  mCurrentUserRef.removeEventListener(mCurrentUserRefListener);  mSharedWithRef.removeEventListener(mSharedWithListener);}  }
class C{  public static String map2TypeForDBMS(String type){  if (type.contains("DATABASE LINK"))   return "DB_LINK";  if (type.equals("JOB"))   return "PROCOBJ";  if (type.equals("SCHEDULE"))   return "PROCOBJ";  if (type.equals("PROGRAM"))   return "PROCOBJ";  if (type.equals("PACKAGE"))   return "PACKAGE_SPEC";  return type.replace(" ","_");}  }
class C{  public Object[] values(){  Object[] values=new Object[this.size()];  Entry[] table=this.table;  int i=0;  for (int bucket=0; bucket < table.length; bucket++) {    for (Entry e=table[bucket]; e != null; e=e.next) {      values[i++]=e.value;    }  }  return values;}  }
class C{  @SuppressWarnings("deprecation") public static Position limitCenterPosition(Position position,OrbitViewLimits viewLimits){  if (position == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new Position(limitCenterLocation(position.getLatitude(),position.getLongitude(),viewLimits),limitCenterElevation(position.getElevation(),viewLimits));}  }
class C{  public PassportDecoder(DecodeConfiguration config,AliasList aliasList){  mPassportFSKDecoder=new LTRFSKDecoder();  mPassportMessageFramer=new MessageFramer(SyncPattern.PASSPORT.getPattern(),PASSPORT_MESSAGE_LENGTH);  mPassportFSKDecoder.addListener(mPassportMessageFramer);  mPassportMessageProcessor=new PassportMessageProcessor(aliasList);  mPassportMessageFramer.addMessageListener(mPassportMessageProcessor);  mPassportMessageProcessor.setMessageListener(this);}  }
class C{  public PropertyMutation transitionWorkFlow(final PropertyMutation propertyMutation){  final DateTime currentDate=new DateTime();  final String approverComments="Property has been successfully forwarded.";  final Assignment assignment=propertyService.getAssignmentsForDesignation(PropertyTaxConstants.COMMISSIONER_DESGN).get(0);  final Position pos=assignment.getPosition();  propertyMutation.transition().start().withSenderName("anonymous user").withComments(approverComments).withStateValue(PropertyTaxConstants.WF_STATE_REVENUE_OFFICER_APPROVED).withDateInfo(currentDate.toDate()).withOwner(pos).withNextAction(PropertyTaxConstants.WF_STATE_COMMISSIONER_APPROVAL_PENDING).withNatureOfTask(NATURE_TITLE_TRANSFER);  return propertyMutation;}  }
class C{  public static void populatePkcs10UnstructuredName(Attribute[] attributes,JTextField textField){  ASN1ObjectIdentifier pkcs9UnstructureName=PKCSObjectIdentifiers.pkcs_9_at_unstructuredName;  populateTextField(attributes,textField,pkcs9UnstructureName);}  }
class C{  private String buildCreateStatement(String tableName,String[] columnNames,String[] columnTypes){  String createStatement="";  if (columnNames.length == columnTypes.length) {    createStatement+="CREATE TABLE IF NOT EXISTS " + tableName + "("+ _ID+ " INTEGER PRIMARY KEY, ";    for (int i=0; i < columnNames.length; i++) {      if (i == columnNames.length - 1) {        createStatement+=columnNames[i] + " " + columnTypes[i]+ ")";      } else {        createStatement+=columnNames[i] + " " + columnTypes[i]+ ", ";      }    }  }  return createStatement;}  }
class C{  private static void link(final ITreeNode<CTag> parent,final ITreeNode<CTag> child){  child.setParent(parent);  parent.addChild(child);}  }
class C{  private void detach(){  if (prevTakeIndex >= 0) {    prevTakeIndex=DETACHED;    itrs.doSomeSweeping(true);  }}  }
class C{  public LocVars(LuaString varname,int startpc,int endpc){  this.varname=varname;  this.startpc=startpc;  this.endpc=endpc;}  }
class C{  public void testMinGreaterThanMax(){  Document doc=new Document();  IllegalArgumentException expected;  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("is greater than max value"));}  }
class C{  public EGLSurface createWindowSurface(Object surface){  if (!(surface instanceof Surface) && !(surface instanceof SurfaceTexture)) {    throw new RuntimeException("invalid surface: " + surface);  }  int[] surfaceAttribs={EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreateWindowSurface(mEGLDisplay,mEGLConfig,surface,surfaceAttribs,0);  checkEglError("eglCreateWindowSurface");  if (eglSurface == null) {    throw new RuntimeException("surface was null");  }  return eglSurface;}  }
class C{  protected Block createLegendItemBlock(LegendItem item){  BlockContainer result;  LegendGraphic lg=new LegendGraphic(item.getShape(),item.getFillPaint());  lg.setFillPaintTransformer(item.getFillPaintTransformer());  lg.setShapeFilled(item.isShapeFilled());  lg.setLine(item.getLine());  lg.setLineStroke(item.getLineStroke());  lg.setLinePaint(item.getLinePaint());  lg.setLineVisible(item.isLineVisible());  lg.setShapeVisible(item.isShapeVisible());  lg.setShapeOutlineVisible(item.isShapeOutlineVisible());  lg.setOutlinePaint(item.getOutlinePaint());  lg.setOutlineStroke(item.getOutlineStroke());  lg.setPadding(this.legendItemGraphicPadding);  LegendItemBlockContainer legendItem=new LegendItemBlockContainer(new BorderArrangement(),item.getDataset(),item.getSeriesKey());  lg.setShapeAnchor(getLegendItemGraphicAnchor());  lg.setShapeLocation(getLegendItemGraphicLocation());  legendItem.add(lg,this.legendItemGraphicEdge);  Font textFont=item.getLabelFont();  if (textFont == null) {    textFont=this.itemFont;  }  Paint textPaint=item.getLabelPaint();  if (textPaint == null) {    textPaint=this.itemPaint;  }  LabelBlock labelBlock=new LabelBlock(item.getLabel(),textFont,textPaint);  labelBlock.setPadding(this.itemLabelPadding);  legendItem.add(labelBlock);  legendItem.setToolTipText(item.getToolTipText());  legendItem.setURLText(item.getURLText());  result=new BlockContainer(new CenterArrangement());  result.add(legendItem);  return result;}  }
class C{  public boolean isSendInstallEvent(){  return mSendInstallEvent;}  }
class C{  public AbstractWildFlyScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public void mSelectedDateInfo(int position){  RWeekCalendar.getInstance().getSelectedDate(dateInWeekArray.get(position));  mSelectedDate=dateInWeekArray.get(position);  AppController.getInstance().setSelected(mSelectedDate);}  }
class C{  @Deprecated protected final Class<?> defineClass(byte[] classRep,int offset,int length) throws ClassFormatError {  throw new UnsupportedOperationException("can't load this type of class file");}  }
class C{  public void start(){  _log.info("WorkflowService starting up");  _instance=this;  try {    _dataManager=_coordinator.getWorkflowDataManager();    _dataManager.setConnectionStateListener(_connectionStateListener);  } catch (  Exception ex) {    _log.error("Can't get a DistributedDataManager",ex);  }  if (!scrubberStarted) {    getScrubber().start();    scrubberStarted=true;  }}  }
class C{  public static GdsTypeRule excludesNativeOnly(){  return excludes(NativeGDSFactoryPlugin.NATIVE_TYPE_NAME,EmbeddedGDSFactoryPlugin.EMBEDDED_TYPE_NAME,LocalGDSFactoryPlugin.LOCAL_TYPE_NAME);}  }
class C{  private void validateBusinessObjectDefinitionUpdateRequest(BusinessObjectDefinitionUpdateRequest request){  if (request.getDisplayName() != null) {    request.setDisplayName(request.getDisplayName().trim());  }  attributeHelper.validateAttributes(request.getAttributes());}  }
class C{  private static Object unwrap(Object object){  if (object instanceof SuperReflect) {    return ((SuperReflect)object).get();  }  return object;}  }
class C{  void notifySlaveAvailability(SlaveConnection slave,final Job job,EvolutionState state){synchronized (allSlaves) {    notifyMonitor(allSlaves);  }  if (slave.numJobs() < maxJobsPerSlave) {synchronized (availableSlaves) {      if (!availableSlaves.contains(slave))       availableSlaves.addLast(slave);      notifyMonitor(availableSlaves);    }  }  debug("Notify the monitor that the slave is available.");  if (state instanceof ec.steadystate.SteadyStateEvolutionState) {synchronized (evaluatedIndividuals) {      for (int x=0; x < job.inds.length; x++)       evaluatedIndividuals.addLast(new QueueIndividual(job.inds[x],job.subPops[x]));      notifyMonitor(evaluatedIndividuals);    }  }}  }
class C{  public static MonoReilSolverResult<RegisterSetLatticeElement> track(final ReilFunction function,final IInstruction startInstruction,final String trackedRegister,final RegisterTrackingOptions options){  Preconditions.checkNotNull(function,"Error: function argument can not be null");  Preconditions.checkNotNull(startInstruction,"Error: startInstruction argument can not be null");  Preconditions.checkNotNull(trackedRegister,"Error: trackedRegister argument can not be null");  Preconditions.checkNotNull(options,"Error: options argument can not be null");  final CReilInstructionGraph instructionGraph=new CReilInstructionGraph(function.getGraph());  final RegisterSetLatticeElement registerSetLatticeElement=new RegisterSetLatticeElement(trackedRegister);  final MonoReilSolver<RegisterSetLatticeElement> monoReilSolver=new MonoReilSolver<RegisterSetLatticeElement>(instructionGraph,options.getAnalysisDirection(),new RegisterSetLattice());  final Iterable<IInstructionGraphEdge> relevantEdges=options.trackIncoming() ? instructionGraph.getIncomingEdgesForAddress(startInstruction.getAddress()) : instructionGraph.getOutgoingEdgesForAddress(startInstruction.getAddress());  final List<Pair<IInstructionGraphEdge,RegisterSetLatticeElement>> initialState=new ArrayList<Pair<IInstructionGraphEdge,RegisterSetLatticeElement>>();  for (  final IInstructionGraphEdge currentRelevantEdge : relevantEdges) {    initialState.add(new Pair<IInstructionGraphEdge,RegisterSetLatticeElement>(currentRelevantEdge,registerSetLatticeElement));  }  final ITransformationProvider<RegisterSetLatticeElement> transformationProvider=new RegisterTrackingTransformationProvider(options);  final MonoReilSolverResult<RegisterSetLatticeElement> solverResult=monoReilSolver.solve(transformationProvider,initialState,Integer.MAX_VALUE);  return solverResult;}  }
class C{  private void snapVertices(CoordinateList srcCoords,Coordinate[] snapPts){  int end=isClosed ? srcCoords.size() - 1 : srcCoords.size();  for (int i=0; i < end; i++) {    Coordinate srcPt=(Coordinate)srcCoords.get(i);    Coordinate snapVert=findSnapForVertex(srcPt,snapPts);    if (snapVert != null) {      srcCoords.set(i,new Coordinate(snapVert));      if (i == 0 && isClosed)       srcCoords.set(srcCoords.size() - 1,new Coordinate(snapVert));    }  }}  }
class C{  public Encoding(String name){  this.name=name;}  }
class C{  protected void appendContentStart(final StringBuffer buffer){  buffer.append(contentStart);}  }
class C{  public boolean isOKpressed(){  return m_okPressed;}  }
class C{  public Tween targetRelative(float... targetValues){  if (targetValues.length > combinedAttrsLimit)   throwCombinedAttrsLimitReached();  for (int i=0; i < targetValues.length; i++) {    this.targetValues[i]=isInitialized() ? targetValues[i] + startValues[i] : targetValues[i];  }  isRelative=true;  return this;}  }
class C{  private Explanation(boolean match,float value,String description,Collection<Explanation> details){  this.match=match;  this.value=value;  this.description=Objects.requireNonNull(description);  this.details=Collections.unmodifiableList(new ArrayList<>(details));  for (  Explanation detail : details) {    Objects.requireNonNull(detail);  }}  }
class C{  public void animate(float progress){  if (mPathMeasure == null) {    return;  }  mProgress=progress;  int stopD=(int)(mLength * mProgress);  mSegmentPath.reset();  mPathMeasure.getSegment(0,stopD,mSegmentPath,true);  mSegmentPath.rLineTo(0.0f,0.0f);  mPathMeasure.getPosTan(stopD,mPlaneCoordinate,mPlaneAngle);  invalidate();}  }
class C{  public static List<NameValuePair> parseQueryOrdered(String query) throws URISyntaxException {  List<NameValuePair> parameters=new ArrayList<NameValuePair>();  if (query == null) {    return parameters;  }  URIQueryTokenizer uqt=new URIQueryTokenizer(query);  while (uqt.hasMoreTokens()) {    String token=uqt.nextToken();    int index=token.indexOf(URI.PARAMETER_SEPARATOR);    String name;    String value;    if (index != -1) {      name=token.substring(0,index);      value=token.substring(index + 1);    } else {      name=token;      value=null;    }    parameters.add(new NameValuePair(name,value));  }  return parameters;}  }
class C{  public static Object[] buildValueArray(ParsedSql parsedSql,Map<String,?> paramSource){  List<Object> paramArray=new ArrayList<Object>();  if (parsedSql.getNamedParameterCount() > 0 && parsedSql.getUnnamedParameterCount() > 0) {    throw new IllegalStateException("You can't mix named and traditional ? placeholders. You have " + parsedSql.getNamedParameterCount() + " named parameter(s) and "+ parsedSql.getUnnamedParameterCount()+ " traditonal placeholder(s) in ["+ parsedSql.getOriginalSql()+ "]");  }  List<String> paramNames=parsedSql.getParameterNames();  for (int i=0; i < paramNames.size(); i++) {    String paramName=paramNames.get(i);    Object value=paramSource.get(paramName);    if (value instanceof Collection<?>) {      Collection<?> collection=(Collection<?>)value;      for (      Object object : collection) {        paramArray.add(object);      }    } else {      paramArray.add(value);    }  }  return paramArray.toArray(new Object[paramArray.size()]);}  }
class C{  protected void assertNoRecordsToConsume(){  assertThat(consumedLines.isEmpty()).isTrue();}  }
class C{  public void assertEqual(Object expected,Object actual,String errorMessage){  TestUtils.assertEqual(expected,actual,errorMessage);}  }
class C{  public static boolean isPacked(TextEdit edit){  if (!(edit instanceof MultiTextEdit))   return true;  if (!edit.hasChildren())   return true;  TextEdit[] children=edit.getChildren();  if (edit.getOffset() != children[0].getOffset())   return false;  if (edit.getExclusiveEnd() != children[children.length - 1].getExclusiveEnd())   return false;  for (int i=0; i < children.length; i++) {    if (!isPacked(children[i]))     return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:42.914 -0500",hash_original_method="6FDFDCFB7822F2E4E0EEE4A5AC1F1A39",hash_generated_method="B99B627752C96BA487CE34ACFF331411") public static boolean isValid(String address){  return isValidIPv4(address) || isValidIPv6(address);}  }
class C{  public boolean hasMetadata(){  return fieldSetFlags()[0];}  }
class C{  public static List<Key<DomainBase>> queryDomainsUsingResource(Class<? extends EppResource> clazz,Key<? extends EppResource> key,DateTime now,int limit){  checkArgument(ContactResource.class.equals(clazz) || HostResource.class.equals(clazz));  return ofy().load().type(DomainBase.class).filter(clazz.equals(ContactResource.class) ? "allContacts.contactId.linked" : "nameservers.linked",key).filter("deletionTime >",now).limit(limit).keys().list();}  }
class C{  public void testSetHostnameVerifier() throws Throwable {  setUpStoreProperties();  SSLServerSocket ss=(SSLServerSocket)getContext().getServerSocketFactory().createServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  connection.setSSLSocketFactory(getContext().getSocketFactory());  TestHostnameVerifier hnv_late=new TestHostnameVerifier();  connection.setHostnameVerifier(hnv_late);  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  assertTrue("Hostname verification was not done",hnv_late.verified);  assertFalse("Hostname verification should not be done by this verifier",hnv.verified);  checkConnectionStateParameters(connection,peerSocket);  connection.connect();}  }
class C{  public boolean checkListOptions(){  boolean result;  print("ListOptions...");  try {    Enumeration<Option> enu=getOptionHandler().listOptions();    if (getDebug() && enu.hasMoreElements()) {      println("");    }    while (enu.hasMoreElements()) {      Option option=enu.nextElement();      if (getDebug()) {        println(option.synopsis());        println(option.description());      }    }    println("yes");    result=true;  } catch (  Exception e) {    println("no");    result=false;    if (getDebug()) {      println(e);    }  }  return result;}  }
class C{  public Target createTarget(){  TargetImpl target=new TargetImpl();  return target;}  }
class C{  public int addStringValue(String value){  if (!isString()) {    return -1;  }  Object store=value;  if (value.length() > STRING_COMPRESS_THRESHOLD) {    try {      store=new SerializedObject(value,true);    } catch (    Exception ex) {      System.err.println("Couldn't compress string attribute value -" + " storing uncompressed.");    }  }  Integer index=(Integer)m_Hashtable.get(store);  if (index != null) {    return index.intValue();  } else {    int intIndex=m_Values.size();    m_Values.addElement(store);    m_Hashtable.put(store,new Integer(intIndex));    return intIndex;  }}  }
class C{  public void testBoundedLongs(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=123L;  for (long least=-86028121; least < MAX_LONG_BOUND; least+=1982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      final long lo=least, hi=bound;      r.longs(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(0,fails.get());}  }
class C{  public void addConfiguredSysproperty(Environment.Variable property){  addSysproperty(property);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void writeRawVarint64(long value) throws IOException {  while (true) {    if ((value & ~0x7FL) == 0) {      writeRawByte((int)value);      return;    } else {      writeRawByte(((int)value & 0x7F) | 0x80);      value>>>=7;    }  }}  }
class C{  private static OFAction decode_set_dst_port(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        TransportPort portnum=TransportPort.of(get_short(n.group(1)));        OFActionSetTpDst.Builder ab=OFFactories.getFactory(version).actions().buildSetTpDst();        ab.setTpPort(portnum);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid dst-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public ArrayConverter(final Class defaultType,final Converter elementConverter){  super();  if (defaultType == null) {    throw new IllegalArgumentException("Default type is missing");  }  if (!defaultType.isArray()) {    throw new IllegalArgumentException("Default type must be an array.");  }  if (elementConverter == null) {    throw new IllegalArgumentException("Component Converter is missing.");  }  this.defaultTypeInstance=Array.newInstance(defaultType.getComponentType(),0);  this.elementConverter=elementConverter;}  }
class C{  public ProtocolCodecException(Throwable cause){  super(cause);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean canSetDouble(){  return canSet(double.class);}  }
class C{  public boolean containsValue(Object value){  return contains(value);}  }
class C{  @Override public void add(Activity newOne){  super.add(newOne);  applyEditsOnActivity(newOne);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void executeCommand(HttpServletRequest request,String p_cmd,WebSessionCtx wsc,WWindowStatus ws){  String p_tab=WebUtil.getParameter(request,P_Tab);  String p_row=WebUtil.getParameter(request,P_MR_RowNo);  log.config(p_cmd + " - Tab=" + p_tab+ " - Row="+ p_row);  if (p_row != null && p_row.length() > 0) {    try {      int newRowNo=Integer.parseInt(p_row);      ws.curTab.navigate(newRowNo);      ws.curTab.setSingleRow(true);    } catch (    Exception e) {      log.log(Level.SEVERE,"Parse RowNo=" + p_row,e);    }  } else   if (p_tab != null && p_tab.length() > 0) {    int newTabNo=0;    try {      newTabNo=Integer.parseInt(p_tab);    } catch (    Exception e) {      log.log(Level.SEVERE,"Parse TabNo=" + p_tab,e);    }    if (newTabNo > ws.curTab.getTabNo()) {      ws.mWindow.initTab(newTabNo);      ws.curTab=ws.mWindow.getTab(newTabNo);      ws.curTab.query(false);      ws.curTab.navigate(0);      if (ws.curTab.getRowCount() < 1) {        if (!ws.curTab.dataNew(false))         ws.curTab.dataIgnore();      }    } else     if (newTabNo < ws.curTab.getTabNo()) {      ws.curTab=ws.mWindow.getTab(newTabNo);      ws.curTab.dataRefresh();    }  } else   if (p_cmd.equals("Multi")) {    boolean single=ws.curTab.isSingleRow();    ws.curTab.setSingleRow(!single);    if (single)     ws.curTab.navigate(0);  } else   if (p_cmd.equals("First")) {    ws.curTab.navigate(0);  } else   if (p_cmd.equals("Next")) {    ws.curTab.navigateRelative(+1);  } else   if (p_cmd.equals("Previous")) {    int rows=ws.curTab.isSingleRow() ? -1 : -2 * MAX_LINES;    ws.curTab.navigateRelative(rows);  } else   if (p_cmd.equals("Last")) {    ws.curTab.navigateRelative(LAST_LINE);  } else   if (p_cmd.equals("Test")) {  } else   if (p_cmd.equals("Refresh")) {    ws.curTab.dataRefreshAll();  } else   if (p_cmd.equals("Attachment")) {  } else   if (p_cmd.equals("Favorite")) {    int AD_Window_ID=ws.curTab.getAD_Window_ID();    String sqlNode="SELECT AD_Menu_ID FROM AD_Menu WHERE" + " AD_Window_ID = " + AD_Window_ID;    int Node_ID=DB.getSQLValue(null,sqlNode);    int AD_User_ID=Env.getAD_User_ID(wsc.ctx);    int AD_Role_ID=Env.getAD_Role_ID(wsc.ctx);    int AD_Org_ID=Env.getAD_Org_ID(wsc.ctx);    int AD_Client_ID=Env.getAD_Client_ID(wsc.ctx);    int AD_Tree_ID=DB.getSQLValue(null,"SELECT COALESCE(r.AD_Tree_Menu_ID, ci.AD_Tree_Menu_ID)" + "FROM AD_ClientInfo ci" + " INNER JOIN AD_Role r ON (ci.AD_Client_ID=r.AD_Client_ID) "+ "WHERE AD_Role_ID=?",AD_Role_ID);    if (AD_Tree_ID <= 0)     AD_Tree_ID=10;    String sql="SELECT count(*) FROM AD_TreeBar WHERE" + " Node_ID = " + Node_ID + " AND CreatedBy = "+ AD_User_ID+ " AND AD_Tree_ID = "+ AD_Tree_ID;    int Favorite=DB.getSQLValue(null,sql);    if (Favorite > 0) {      sql="DELETE FROM AD_TreeBar WHERE" + " Node_ID = " + Node_ID + " AND CreatedBy = "+ AD_User_ID+ " AND AD_Tree_ID = "+ AD_Tree_ID;      DB.executeUpdate(sql,null);    } else {      sql="INSERT INTO AD_TreeBar " + "( Node_ID, AD_User_ID, AD_Client_ID, AD_Org_ID," + " IsActive, CreatedBy, AD_Tree_ID, UpdatedBy)"+ "VALUES ( " + Node_ID + ", "+ AD_User_ID+ ", "+ AD_Client_ID+ ", "+ AD_Org_ID+ ", 'Y', "+ AD_User_ID+ ", "+ AD_Tree_ID+ ", "+ AD_User_ID+ ")";      DB.executeUpdate(sql,null);    }  } else   if (p_cmd.equals("History")) {    ws.mWindow.initTab(ws.curTab.getTabNo());    ws.curTab.query(!ws.curTab.isOnlyCurrentRows());    ws.curTab.navigate(0);  } else   if (p_cmd.equals("Report")) {  } else   if (p_cmd.equals("Print")) {  } else   if (p_cmd.equals("New")) {    if (!ws.curTab.dataNew(false))     ws.curTab.dataIgnore();  } else   if (p_cmd.equals("Delete")) {    ws.curTab.dataDelete();  } else   if (p_cmd.equals("Save")) {    executeSave(request,wsc,ws);  } else   if (p_cmd.equals("Find")) {    String strSearch=WebUtil.getParameter(request,"txtSearch");    if (strSearch != null) {      MQuery query=new MQuery();      if (strSearch.length() != 0)       query.addRestriction(m_searchField,MQuery.LIKE,strSearch);      ws.curTab.setQuery(query);      ws.curTab.query(false);      ws.curTab.navigate(0);    }  } else   if (p_cmd.equals("FindAdv")) {    String strSQL=WebUtil.getParameter(request,"txtSQL");    if (strSQL != null) {      MQuery query=new MQuery();      if (strSQL.equals("FIND")) {        String value=WebUtil.getParameter(request,"txtValue");        String docno=WebUtil.getParameter(request,"txtDocumentNo");        String name=WebUtil.getParameter(request,"txtName");        String desc=WebUtil.getParameter(request,"txtDescription");        if (value != null && value.length() != 0)         query.addRestriction("Value",MQuery.LIKE,value);        if (docno != null && docno.length() != 0)         query.addRestriction("DocumentNo",MQuery.LIKE,docno);        if (name != null && name.length() != 0)         query.addRestriction("Name",MQuery.LIKE,name);        if (desc != null && desc.length() != 0)         query.addRestriction("Description",MQuery.LIKE,desc);      } else {        query.addRestriction(strSQL);      }      ws.curTab.setQuery(query);      ws.curTab.query(false);      ws.curTab.navigate(0);    }  }}  }
class C{  private static boolean unwanted(Symbol s){  return s == null || (s.flags() & SYNTHETIC) != 0;}  }
class C{  public void broadcastGroupChatStateChange(String chatId,State state,GroupChat.ReasonCode reasonCode){  mGroupChatEventBroadcaster.broadcastStateChanged(chatId,state,reasonCode);}  }
class C{  public static synchronized CourseOffering addNew(Long subjAreaId,String courseNbr) throws Exception {  CourseOffering co=null;  InstructionalOfferingDAO idao=new InstructionalOfferingDAO();  Session hibSession=idao.getSession();  try {    SubjectArea subjArea=new SubjectAreaDAO().get(subjAreaId);    org.unitime.timetable.model.Session acadSession=subjArea.getSession();    CourseOfferingDAO cdao=new CourseOfferingDAO();    co=new CourseOffering();    co.setSubjectArea(subjArea);    co.setCourseNbr(courseNbr);    co.setProjectedDemand(new Integer(0));    co.setDemand(new Integer(0));    co.setNbrExpectedStudents(new Integer(0));    co.setIsControl(new Boolean(true));    co.setPermId(InstrOfferingPermIdGenerator.getGenerator().generate((SessionImplementor)new CourseOfferingDAO().getSession(),co).toString());    HashSet s=new HashSet();    s.add(co);    InstructionalOffering io=new InstructionalOffering();    io.setNotOffered(new Boolean(false));    io.setSession(acadSession);    io.generateInstrOfferingPermId();    io.setLimit(new Integer(0));    io.setByReservationOnly(false);    idao.saveOrUpdate(io);    idao.getSession().refresh(io);    co.setInstructionalOffering(io);    io.addTocourseOfferings(co);    cdao.saveOrUpdate(co);    cdao.getSession().refresh(co);    cdao.getSession().refresh(subjArea);    String className=ApplicationProperty.ExternalActionInstructionalOfferingAdd.value();    if (className != null && className.trim().length() > 0) {      ExternalInstructionalOfferingAddAction addAction=(ExternalInstructionalOfferingAddAction)(Class.forName(className).newInstance());      addAction.performExternalInstructionalOfferingAddAction(io,hibSession);    }  } catch (  Exception e) {    Debug.error(e);    throw new Exception("Could not create new course offering: " + e.getMessage());  } finally {  }  return co;}  }
class C{  public SetOnlineStatusCommand(String playerName,boolean online){  this.playerName=playerName;  this.online=online;}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public TriggerOption withEarlyFiringsAtEvery(long count){  CountTrigger trigger=new CountTrigger(Type.EARLY,count);  triggerList.add(trigger);  return this;}  }
class C{  public Simulator(DialogueSystem system,Domain domain){  this.system=system;  this.domain=domain;  simulatorState=domain.getInitialState().copy();  simulatorState.setParameters(domain.getParameters());  this.system.changeSettings(domain.getSettings());}  }
class C{  public boolean isHRApproved(){  Object oo=get_Value(COLUMNNAME_IsHRApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentfragmentnodevalue.class,args);}  }
class C{  public StatementBuilder resetCount(){  index=0;  return this;}  }
class C{  public Element store(){  Element e=new org.jdom2.Element(Xml.SCHEDULE);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.NAME,getName());  if (!getComment().equals(NONE)) {    e.setAttribute(Xml.COMMENT,getComment());  }  StringBuilder buf=new StringBuilder();  for (  String id : _trainIds) {    buf.append(id + ",");  }  e.setAttribute(Xml.TRAIN_IDS,buf.toString());  return e;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(opt(index));}  }
class C{  public BufferServletOutputStream(int bufferSize){  buffer=ByteBuffer.allocate(bufferSize);}  }
class C{  public static boolean canResumeFromSave(){  return GameState.canResumeFromSave();}  }
class C{  public static OMPoint read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  @Override public boolean doesMaxRowSizeIncludeBlobs(){  debugCodeCall("doesMaxRowSizeIncludeBlobs");  return false;}  }
class C{  private int rank(ASTNode node){  int relativeRank=node.getStartPosition() + node.getLength() - pos;  if (relativeRank < 0)   return Integer.MAX_VALUE + relativeRank; else   return relativeRank;}  }
class C{  public void stainedStatusChanged(Stainable stainable,boolean stained){  image=stained ? stain : clean;  repaint();}  }
class C{  @Override public void clear(){  cache.clear();}  }
class C{  public void shiftLeftThis(){  int i;  if ((len & 0x1f) == 0) {    len+=1;    blocks+=1;    if (blocks > value.length) {      int[] bs=new int[blocks];      System.arraycopy(value,0,bs,0,value.length);      value=null;      value=bs;    }    for (i=blocks - 1; i >= 1; i--) {      value[i]|=value[i - 1] >>> 31;      value[i - 1]<<=1;    }  } else {    len+=1;    for (i=blocks - 1; i >= 1; i--) {      value[i]<<=1;      value[i]|=value[i - 1] >>> 31;    }    value[0]<<=1;  }}  }
class C{  public AppActivity(){}  }
class C{  public static CassandraConfig parse(byte[] bytes) throws IOException {  return parse(CassandraProtos.CassandraConfig.parseFrom(bytes));}  }
class C{  public void testBitCountNeg(){  BigInteger aNumber=new BigInteger("-12378634756382937873487638746283767238657872368748726875");  assertEquals(87,aNumber.bitCount());}  }
class C{  public int next(){  for (++_currentNode; _sp >= 0; ++_currentNode) {    if (_currentNode < _stack[_sp]) {      if (_type(_currentNode) != ATTRIBUTE_NODE && _type(_currentNode) != NAMESPACE_NODE)       return returnNode(makeNodeHandle(_currentNode));    } else     --_sp;  }  return NULL;}  }
class C{  public ImmutableMap<String,String> attributes(){  return this.serviceAttributes;}  }
class C{  private void sweep(){  for (Node p=head, s, n; p != null && (s=p.next) != null; ) {    if (!s.isMatched())     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=head; else     p.casNext(s,n);  }}  }
class C{  public boolean isOutline(){  return this.showOutline;}  }
class C{  public static int copy(InputStream in,OutputStream out) throws IOException {  Assert.notNull(in,"No InputStream specified");  Assert.notNull(out,"No OutputStream specified");  int byteCount=0;  byte[] buffer=new byte[BUFFER_SIZE];  int bytesRead=-1;  while ((bytesRead=in.read(buffer)) != -1) {    out.write(buffer,0,bytesRead);    byteCount+=bytesRead;  }  out.flush();  return byteCount;}  }
class C{  @Override protected void modify(float[] data,int frames,int channels,int rate){  data=Dsp.convertSampleRate(data,frames,channels,mSampleRate,rate);  super.propagate(data,data.length,channels,rate);}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  public ZipShort(byte[] bytes,int offset){  value=getValue(bytes,offset);}  }
class C{  public MethodBinding tiebreakMethod(){  return this;}  }
class C{  private boolean shouldFireEvent(Trigger t,double quota,Statistic globalStat){  double threshold=getThesholdByUnit(quota,t.getMetricThreshold(),t.getUnit());  logger.debug("Aggreated [" + t.getMetric() + "-"+ t.getThresholdType()+ "] on all instances in app ["+ this.appId+ "]: "+ globalStat.getValue()+ " with the threshold: "+ threshold);  if (t.getThresholdType().equals(Trigger.THRESHOLD_TYPE_LARGER_THAN)) {    if (globalStat.getValue() >= threshold) {      if (checkBreachDuration(threshold,t)) {        logger.debug("Start counting for app " + t.getAppId() + " with trigger "+ t.getTriggerId());        return true;      }    } else {      setBreachStartTime(t,null);    }  } else   if (t.getThresholdType().equals(Trigger.THRESHOLD_TYPE_LESS_THAN)) {    if (globalStat.getValue() <= threshold) {      if (this.checkBreachDuration(threshold,t)) {        logger.debug("Start counting for app " + t.getAppId() + " with trigger "+ t.getTriggerId());        return true;      }    } else {      setBreachStartTime(t,null);    }  }  return false;}  }
class C{  @Override public View generateView(Context ctx){  VH viewHolder=getViewHolder(LayoutInflater.from(ctx).inflate(getLayoutRes(),null,false));  bindView(viewHolder,Collections.EMPTY_LIST);  return viewHolder.itemView;}  }
class C{  @Override public void pool(){}  }
class C{  protected boolean isRetentionRequired(){  ScheduledEvent event=ExecutionUtils.currentContext().getScheduledEvent();  if (event == null) {    return false;  }  try {    OrderCreateParam param=OrderCreateParam.deserialize(org.apache.commons.codec.binary.Base64.decodeBase64(event.getOrderCreationParam().getBytes(UTF_8)));    String additionalScheduleInfo=param.getAdditionalScheduleInfo();    if (additionalScheduleInfo == null) {      return false;    }    Integer.parseInt(additionalScheduleInfo);  } catch (  Exception ex) {    error("Unexpected exception when checking scheduler retention",ex);    return false;  }  return true;}  }
class C{  public void applyChainWaveBuffer(ModelRenderer... boxes){  float rotateAmount=0.01745329251F * ClientUtils.interpolate(this.prevPitchVariation,this.pitchVariation,LLibrary.PROXY.getPartialTicks()) / boxes.length;  for (  ModelRenderer box : boxes) {    box.rotateAngleX+=rotateAmount;  }}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  public DefaultInputHandler(){  bindings=currentBindings=new Hashtable();}  }
class C{  public static boolean isSurrogate(char char16){  return LEAD_SURROGATE_MIN_VALUE <= char16 && char16 <= TRAIL_SURROGATE_MAX_VALUE;}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  public InlineQueryResultAudio.InlineQueryResultAudioBuilder audioUrl(URL audioUrl){  this.audio_url=audioUrl;  return this;}  }
class C{  public GridCacheOperation op(){  return op;}  }
class C{  public PinLaterMySQLBackend(PropertiesConfiguration configuration,String serverHostName,long serverStartTimeMillis) throws Exception {  super(configuration,"MySQL",serverHostName,serverStartTimeMillis);  this.configuration=Preconditions.checkNotNull(configuration);  this.countLimit=configuration.getInt("MYSQL_COUNT_LIMIT");  this.numDbPerQueue=configuration.getInt("MYSQL_NUM_DB_PER_QUEUE",1);  this.mySQLHealthMonitor=new MySQLHealthMonitor(new HashSet<String>());  this.queueMonitorService=Executors.newSingleThreadScheduledExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("MySQLJobQueueMonitor-%d").build());  initialize();}  }
class C{  public static void addChemicalDissolutionChamberRecipe(ItemStack input,GasStack output){  addRecipe(Recipe.CHEMICAL_DISSOLUTION_CHAMBER,new DissolutionRecipe(input,output));}  }
class C{  private void addImportClass(Class<?> cl){  if (cl.isArray()) {    cl=cl.getComponentType();  }  if (cl.isPrimitive())   return;  addImportClass(cl.getCanonicalName());}  }
class C{  public void join(boolean cancel){  if (cancel)   U.cancel(workers);  boolean interrupted=Thread.interrupted();  try {    U.join(workers,log);  }  finally {    if (interrupted)     Thread.currentThread().interrupt();  }}  }
class C{  public boolean isAvailable(){  LOG.debug("Testing availability {}",baseUrl);  try {    return retrieveDescriptor() != null;  } catch (  Exception e) {    LOG.warn(e.getLocalizedMessage());    return false;  }}  }
class C{  public void enforceConstraints(){  addConstraintVertices();  int count=0;  int splits=0;  do {    splits=enforceGabriel(segments);    count++;    Debug.println("Iter: " + count + "   Splits: "+ splits+ "   Current # segments = "+ segments.size());  } while (splits > 0 && count < MAX_SPLIT_ITER);  if (count == MAX_SPLIT_ITER) {    Debug.println("ABORTED! Too many iterations while enforcing constraints");    if (!Debug.isDebugging())     throw new ConstraintEnforcementException("Too many splitting iterations while enforcing constraints.  Last split point was at: ",splitPt);  }}  }
class C{  public ImageProperty(String url,ImageType type){  super(url,type);}  }
class C{  public final void writeByte(int v){  write(v);}  }
class C{  public synchronized void removeTextListener(TextListener cl){  m_textListeners.remove(cl);}  }
class C{  public static boolean isMatched(String topicFilter,String topicName) throws IllegalStateException, IllegalArgumentException {  int curn=0, curf=0;  int curn_end=topicName.length();  int curf_end=topicFilter.length();  MqttTopic.validate(topicFilter,true);  MqttTopic.validate(topicName,false);  if (topicFilter.equals(topicName)) {    return true;  }  while (curf < curf_end && curn < curn_end) {    if (topicName.charAt(curn) == '/' && topicFilter.charAt(curf) != '/')     break;    if (topicFilter.charAt(curf) != '+' && topicFilter.charAt(curf) != '#' && topicFilter.charAt(curf) != topicName.charAt(curn))     break;    if (topicFilter.charAt(curf) == '+') {      int nextpos=curn + 1;      while (nextpos < curn_end && topicName.charAt(nextpos) != '/')       nextpos=++curn + 1;    } else     if (topicFilter.charAt(curf) == '#')     curn=curn_end - 1;    curf++;    curn++;  }  ;  return (curn == curn_end) && (curf == curf_end);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.827 -0500",hash_original_method="12CDDF08CF66932EC00C47C0F2860F33",hash_generated_method="11A2E6CBF0E0777D3F44E46ECBDC07EF") public void dump(Printer pw,String prefix){  pw.println(prefix + "exceptionClassName: " + exceptionClassName);  pw.println(prefix + "exceptionMessage: " + exceptionMessage);  pw.println(prefix + "throwFileName: " + throwFileName);  pw.println(prefix + "throwClassName: " + throwClassName);  pw.println(prefix + "throwMethodName: " + throwMethodName);  pw.println(prefix + "throwLineNumber: " + throwLineNumber);  pw.println(prefix + "stackTrace: " + stackTrace);}  }
class C{  public UserController(final UserService userService){  Spark.staticFileLocation("/public");  get("/api/users",null,json());  get("/api/users/:id",null,json());  post("/api/users",null,json());  put("/api/users/:id",null,json());  delete("/api/users/:id",null,json());  after(null);  exception(IllegalArgumentException.class,null);}  }
class C{  private void fileBrowse(){  Shell shell=new Shell(Display.getDefault());  FilteredResourcesSelectionDialog dialog=new FilteredResourcesSelectionDialog(shell,false,ResourcesPlugin.getWorkspace().getRoot(),IResource.FILE);  dialog.setInitialPattern("*.dpans");  if (dialog.open() == ResourceSelectionDialog.OK) {    Object[] result=dialog.getResult();    if (result.length == 1) {      System.out.println(result[0].getClass());      if (result[0] instanceof File) {        File resource=(File)result[0];        file.setText(resource.getFullPath().toOSString());      }    }  }}  }
class C{  public static SourceDSL values(){  return new SourceDSL(){  };}  }
class C{  protected final void paintPeer(final Graphics g){  final D delegate=getDelegate();  if (delegate != null) {    if (!SwingUtilities.isEventDispatchThread()) {      throw new InternalError("Painting must be done on EDT");    }synchronized (getDelegateLock()) {      getDelegate().print(g);    }  }}  }
class C{  public static byte[] generateSalt() throws GeneralSecurityException {  return randomBytes(PBE_SALT_LENGTH_BITS);}  }
class C{  public void selectAll(boolean notifyDataSetChanged,IFileFilter filter){  for (int i=0; i < getCount(); i++) {    IFileDataModel item=getItem(i);    item.setSelected(filter == null ? true : filter.accept(item.getFile()));  }  if (notifyDataSetChanged)   notifyDataSetChanged();}  }
class C{  protected FunctionTypeExprOrRefImpl(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.103 -0500",hash_original_method="96127A12D0FD338A76B8651F7EF76641",hash_generated_method="4C6CA4BAB6E956E2812EB9D744773149") public ActivityMonitor(String cls,ActivityResult result,boolean block){  mWhich=null;  mClass=cls;  mResult=result;  mBlock=block;}  }
class C{  public static void main(String[] args) throws FileNotFoundException {  driverMsg("Starting DroidSafe Run");  for (  String arg : args) {    commandLineArgs+=(arg + " ");  }  Config.v().init(args);  IDroidsafeProgressMonitor monitor=new DroidsafeDefaultProgressMonitor();  common_init(monitor);  if (Config.v().target.equals("errorhandling")) {    run_errorhandling(monitor);  } else   if (Config.v().target.equals("specdump")) {    run_specdump(monitor);  } else {    logger.error("Unknown DroidSafe run target: {}",Config.v().target);  }  writeCompletionFile();  System.out.println("Finished!");  System.exit(0);}  }
class C{  public boolean redo(){  return table.redo();}  }
class C{  public boolean isEmpty(){  return this.fromGroup.isEmpty() || this.toGroup.isEmpty();}  }
class C{  Operation findBestArcToDelete(BayesNet bayesNet,Instances instances,Operation oBestOperation){  int nNrOfAtts=instances.numAttributes();  for (int iNode=0; iNode < nNrOfAtts; iNode++) {    ParentSet parentSet=bayesNet.getParentSet(iNode);    for (int iParent=0; iParent < parentSet.getNrOfParents(); iParent++) {      Operation oOperation=new Operation(parentSet.getParent(iParent),iNode,Operation.OPERATION_DEL);      if (m_Cache.get(oOperation) > oBestOperation.m_fDeltaScore) {        if (isNotTabu(oOperation)) {          oBestOperation=oOperation;          oBestOperation.m_fDeltaScore=m_Cache.get(oOperation);        }      }    }  }  return oBestOperation;}  }
class C{  public static VirtualSubnet convert(VirtualNetworkService.State virtualNetworkState){  VirtualSubnet virtualSubnet=new VirtualSubnet();  virtualSubnet.setId(ServiceUtils.getIDFromDocumentSelfLink(virtualNetworkState.documentSelfLink));  virtualSubnet.setName(virtualNetworkState.name);  virtualSubnet.setDescription(virtualNetworkState.description);  virtualSubnet.setState(virtualNetworkState.state);  virtualSubnet.setRoutingType(virtualNetworkState.routingType);  virtualSubnet.setIsDefault(virtualNetworkState.isDefault);  virtualSubnet.setCidr(virtualNetworkState.cidr);  virtualSubnet.setLowIpDynamic(virtualNetworkState.lowIpDynamic);  virtualSubnet.setHighIpDynamic(virtualNetworkState.highIpDynamic);  virtualSubnet.setLowIpStatic(virtualNetworkState.lowIpStatic);  virtualSubnet.setHighIpStatic(virtualNetworkState.highIpStatic);  virtualSubnet.setReservedIpList(virtualNetworkState.reservedIpList);  return virtualSubnet;}  }
class C{  public ApplicationConfig applicationConfig(){  final Map<String,Object> eventData=data();  if (!eventData.containsKey(CONFIG_KEY)) {    return null;  }  return (ApplicationConfig)eventData.get(CONFIG_KEY);}  }
class C{  DeviceCommsApp(String propsPath) throws Exception {  super(propsPath);}  }
class C{  public int addValue(CharSequence value){  return add(value,bloom,bloomSeeds,bloomMask);}  }
class C{  private static DatacenterBroker createBroker(){  DatacenterBroker broker=null;  try {    broker=new DatacenterBroker("Broker");  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return broker;}  }
class C{  public void clear(){  mRecycler.setAdapter(null);}  }
class C{  @Override public void updateNCharacterStream(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNCharacterStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  String piValue;  doc=(Document)load("staff",true);  testList=doc.getChildNodes();  piNode=testList.item(0);  piNode.setNodeValue("Something different");  piValue=piNode.getNodeValue();  assertEquals("nodeValue","Something different",piValue);  piValue=((ProcessingInstruction)piNode).getData();  assertEquals("data","Something different",piValue);}  }
class C{  public boolean contains(float val){  return index(val) >= 0;}  }
class C{  @DSModeled public Intent cloneFilter(){  return new Intent(this,false);}  }
class C{  protected boolean canDrawInBounds(){  int arrowSize=this.getScrollArrowSize();  String orientation=this.getOrientation();  if (AVKey.VERTICAL.equals(orientation))   return this.bounds.height >= (arrowSize * 2 + this.getMinScrollKnobSize()) && this.bounds.width >= arrowSize; else   return this.bounds.width >= (arrowSize * 2 + this.getMinScrollKnobSize()) && this.bounds.height >= arrowSize;}  }
class C{  public double nextDouble(){  return nextDouble(this.freedom);}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  String serializeToString(){  final StringBuilder sb=new StringBuilder();  sb.append(String.format("%d,%d,",numActive,keys.length));  for (int i=0; i < keys.length; i++) {    if (states[i] != 0) {      sb.append(String.format("%d,%d,",keys[i],values[i]));    }  }  return sb.toString();}  }
class C{  private void serializeResultsDoc(KXmlSerializer serializer,String startTime,String endTime) throws IOException {  serializer.startTag(ns,RESULT_TAG);  serializer.attribute(ns,PLAN_ATTR,mPlanName);  serializer.attribute(ns,STARTTIME_ATTR,startTime);  serializer.attribute(ns,"endtime",endTime);  serializer.attribute(ns,LOGCAT_ATTR,mLogPath);  serializer.attribute(ns,"version",CTS_RESULT_FILE_VERSION);  serializer.attribute(ns,"suite",mSuiteName);  mResults.serialize(serializer);}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  if (terms.size() > 0) {    buffer.append("if ");    boolean firstTerm=true;    for (    SplitCondition condition : terms) {      if (!firstTerm) {        buffer.append(" and ");      }      buffer.append(condition.toString());      firstTerm=false;    }    buffer.append(" then ");  } else {    buffer.append("else ");  }  buffer.append(labelName);  if (frequencies != null) {    buffer.append("  (");    for (int i=0; i < frequencies.length; i++) {      if (i != 0) {        buffer.append(" / ");      }      buffer.append(frequencies[i]);    }    buffer.append(")");  }  return buffer.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_CLASS);  out.writeShort(_nameIndex);}  }
class C{  public void invalidate(){}  }
class C{  public bdo addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private String[] separatorAndEnclosuresToArray(){  String[] parts=m_Enclosures.split(",");  String[] result=new String[parts.length + 1];  result[0]=m_FieldSeparator;  int index=1;  for (  String e : parts) {    if (e.length() > 1 || e.length() == 0) {      throw new IllegalArgumentException("Enclosures can only be single characters");    }    result[index++]=e;  }  return result;}  }
class C{  private void storeKVTabularDataGeneric(ScanData scanData,MetricsGroup mg,Map<String,String> kvPairs,int queryTime) throws SQLException {  if (mg == null || !mg.isStoreInCommonTable()) {    logger.warning(mg.getGroupName() + " is not defined to store metrics in shared table. Ignore it.");    return;  }  if (kvPairs == null || kvPairs.size() == 0) {    return;  }  for (  Metric m : mg.getMetrics()) {    String srcName=m.getSourceName().toLowerCase();    if (!kvPairs.containsKey(srcName))     continue;    int metricId=this.frameworkContext.getAutoScanner().getMetricDb().checkAndAddMetricCode(mg.getMetricFullName(m.getName()));    if (metricId <= 0) {      logger.warning("Cannot find metric id for " + m.getName() + ", "+ mg.getMetricFullName(m.getName()));      break;    }    try {      byte[] buf=new byte[28];      java.nio.ByteBuffer buf2=java.nio.ByteBuffer.wrap(buf);      int pos=0;      buf2.putInt(pos,scanData.dbinfo.getDbid());      pos+=4;      buf2.putInt(pos,metricId);      pos+=4;      buf2.putInt(pos,scanData.snap_id);      pos+=4;      buf2.putLong(pos,scanData.startTimestamp);      pos+=8;      buf2.putDouble(pos,Double.parseDouble(kvPairs.get(srcName)));      this.frameworkContext.getAutoScanner().getMetricDb().putData(mg,null,buf2);    } catch (    Exception ex) {    }  }}  }
class C{  private void configureDecoder() throws IOException {  byte[] prefix=new byte[]{0x00,0x00,0x00,0x01};  ByteBuffer csd0=ByteBuffer.allocate(4 + mSPS.length + 4+ mPPS.length);  csd0.put(new byte[]{0x00,0x00,0x00,0x01});  csd0.put(mSPS);  csd0.put(new byte[]{0x00,0x00,0x00,0x01});  csd0.put(mPPS);  mDecoder=MediaCodec.createByCodecName(mDecoderName);  MediaFormat mediaFormat=MediaFormat.createVideoFormat(MIME_TYPE,mWidth,mHeight);  mediaFormat.setByteBuffer("csd-0",csd0);  mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,mDecoderColorFormat);  mDecoder.configure(mediaFormat,null,null,0);  mDecoder.start();  ByteBuffer[] decInputBuffers=mDecoder.getInputBuffers();  int decInputIndex=mDecoder.dequeueInputBuffer(1000000 / FRAMERATE);  if (decInputIndex >= 0) {    decInputBuffers[decInputIndex].clear();    decInputBuffers[decInputIndex].put(prefix);    decInputBuffers[decInputIndex].put(mSPS);    mDecoder.queueInputBuffer(decInputIndex,0,decInputBuffers[decInputIndex].position(),timestamp(),0);  } else {    if (VERBOSE)     Log.e(TAG,"No buffer available !");  }  decInputIndex=mDecoder.dequeueInputBuffer(1000000 / FRAMERATE);  if (decInputIndex >= 0) {    decInputBuffers[decInputIndex].clear();    decInputBuffers[decInputIndex].put(prefix);    decInputBuffers[decInputIndex].put(mPPS);    mDecoder.queueInputBuffer(decInputIndex,0,decInputBuffers[decInputIndex].position(),timestamp(),0);  } else {    if (VERBOSE)     Log.e(TAG,"No buffer available !");  }}  }
class C{  @SuppressWarnings("unchecked") public void sendMessage(SimpleMailMessage msg,String templateName,Map model){  String result=null;  try {    result=VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,templateName,model);  } catch (  VelocityException e) {    log.error(e.getMessage());  }  msg.setText(result);  send(msg);}  }
class C{  public Minutes toStandardMinutes(){  return Minutes.minutes(FieldUtils.safeMultiply(getValue(),DateTimeConstants.MINUTES_PER_DAY));}  }
class C{  @NotNull public PsiQuery siblings(@NotNull final String name){  return siblings(PsiNamedElement.class,name);}  }
class C{  public HGHandle refreshHandle(HGHandle handle){  if (handle instanceof HGPersistentHandle) {    HGHandle result=cache.get((HGPersistentHandle)handle);    return result != null ? result : handle;  } else {    HGLiveHandle live=(HGLiveHandle)handle;    if (live.getRef() == null) {      HGLiveHandle updated=cache.get(live.getPersistent());      if (updated != null)       return updated; else       return live.getPersistent();    } else     return handle;  }}  }
class C{  public ITurnOrdered nextElement(){  return this.getTurnTotalEnum().nextElement();}  }
class C{  public TextPanel(){  initComponents();}  }
class C{  private void cmd_archive(){  int record_ID=m_curTab.getRecord_ID();  log.info("ID=" + record_ID);  if (record_ID <= 0)   return;  int AD_Table_ID=m_curTab.getAD_Table_ID();  new AArchive(aArchive.getButton(),AD_Table_ID,record_ID);}  }
class C{  public synchronized UDAudio pause(){  final MediaPlayer player=getMediaPlayer();  if (player != null) {    try {      player.pause();    } catch (    Exception e) {      e.printStackTrace();    }  }  return this;}  }
class C{  public void registerRenderInformation(){}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  public void resetCounter(){  if (this.bitsInBuffer < 8) {    this.bitsInBuffer=0;    this.bitBuffer=0;  }  this.byteCounter=0L;}  }
class C{  public String removeProperty(String property){  return this.properties.remove(property);}  }
class C{  @SuppressWarnings("unchecked") public CnATreeElement loadById(String typeId,int id) throws CommandException {  LoadCnAElementById command=new LoadCnAElementById(typeId,id);  command=getCommandService().executeCommand(command);  return command.getFound();}  }
class C{  public static double calculateFStat(double rsq,int n,int k){  if (n < 1 || k < 2 || n == k) {    System.err.println("Cannot calculate F-stat.");    return Double.NaN;  }  double numerator=rsq / (k - 1);  double denominator=(1 - rsq) / (n - k);  return numerator / denominator;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public final ASTNode createCopyTarget(ASTNode node){  return createTargetNode(node,false);}  }
class C{  public Iterator<ViewMetadata> views(){  return Collections.unmodifiableMap(views).values().iterator();}  }
class C{  private void initComponents(){  toolButtonGroup=new javax.swing.ButtonGroup();  drawingPanel=new org.jhotdraw.samples.draw.DrawingPanel();  jToolBar1=new javax.swing.JToolBar();  loadButton=new javax.swing.JButton();  saveButton=new javax.swing.JButton();  FormListener formListener=new FormListener();  getContentPane().add(drawingPanel,java.awt.BorderLayout.CENTER);  jToolBar1.setFloatable(false);  loadButton.setText("Laden");  loadButton.addActionListener(formListener);  jToolBar1.add(loadButton);  saveButton.setText("Speichern");  saveButton.addActionListener(formListener);  jToolBar1.add(saveButton);  getContentPane().add(jToolBar1,java.awt.BorderLayout.SOUTH);}  }
class C{  protected void reportAccurateEnumConstructorReference(SearchMatch match,FieldDeclaration field,AllocationExpression allocation) throws CoreException {  if (allocation == null || allocation.enumConstant == null) {    report(match);    return;  }  int sourceStart=match.getOffset() + match.getLength();  if (allocation.arguments != null && allocation.arguments.length > 0) {    sourceStart=allocation.arguments[allocation.arguments.length - 1].sourceEnd + 1;  }  int sourceEnd=field.declarationSourceEnd;  if (allocation instanceof QualifiedAllocationExpression) {    QualifiedAllocationExpression qualifiedAllocation=(QualifiedAllocationExpression)allocation;    if (qualifiedAllocation.anonymousType != null) {      sourceEnd=qualifiedAllocation.anonymousType.sourceStart - 1;    }  }  Scanner scanner=this.parser.scanner;  scanner.setSource(this.currentPossibleMatch.getContents());  scanner.resetTo(sourceStart,sourceEnd);  try {    int token=scanner.getNextToken();    while (token != TerminalTokens.TokenNameEOF) {      if (token == TerminalTokens.TokenNameRPAREN) {        sourceEnd=scanner.getCurrentTokenEndPosition();      }      token=scanner.getNextToken();    }  } catch (  InvalidInputException iie) {  }  match.setLength(sourceEnd - match.getOffset() + 1);  report(match);}  }
class C{  public boolean handleEntry(String startingDir){  File startingFile=null;  if (startingDir != null) {    startingFile=new File(startingDir);    if (!startingFile.exists()) {      startingFile=null;      Debug.output("RpfFileSearch: " + startingDir + " doesn't exist.");      return false;    }  }  if (startingFile == null) {    return false;  }  boolean rpfDir=false;  String start=startingFile.getAbsolutePath();  if ((start.indexOf("RPF") != -1) || (start.indexOf("rpf") != -1)) {    rpfDir=true;  }  if (Debug.debugging("maketoc")) {    Debug.output("RpfFileSearch: Starting RPF file search from " + startingDir + ", RPF directory "+ (rpfDir ? "found." : "not found."));  }  handleEntry(startingFile,rpfDir);  return true;}  }
class C{  public void close(Throwable cause){  requireNonNull(cause,"cause");  final DefaultStreamMessage<T> m=new DefaultStreamMessage<>();  m.close(cause);  delegate(m);}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static float asin(float fValue){  if (-1.0f < fValue) {    if (fValue < 1.0f) {      return (float)Math.asin(fValue);    }    return HALF_PI;  }  return -HALF_PI;}  }
class C{  @Override public boolean showEdgeLabelsDefault(){  return false;}  }
class C{  private static Capitalization containsAt(String s,int index,String... substrings){  for (  String substring : substrings) {    if (index + substring.length() <= s.length()) {      boolean found=true;      Boolean up1=null;      Boolean up2=null;      for (int i=0; i < substring.length(); i++) {        char c1=s.charAt(index + i);        char c2=substring.charAt(i);        if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {          found=false;          break;        } else         if (Character.isLetter(c1)) {          if (up1 == null) {            up1=Character.isUpperCase(c1);          } else           if (up2 == null) {            up2=Character.isUpperCase(c1);          }        }      }      if (found) {        return Capitalization.toCapitalization(up1,up2);      }    }  }  return null;}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  public static boolean equalsContent(String oldLicenseText,String newLicenseText){  String contentOldLicenseText;  String contentNewLicenseText;  contentOldLicenseText=getContent(oldLicenseText);  contentNewLicenseText=getContent(newLicenseText);  return contentOldLicenseText.equalsIgnoreCase(contentNewLicenseText);}  }
class C{  public static boolean writeFile(String filePath,String content,boolean append){  FileWriter fileWriter=null;  try {    fileWriter=new FileWriter(filePath,append);    fileWriter.write(content);    fileWriter.close();    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (fileWriter != null) {      try {        fileWriter.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public static long diffTimestamps(final int a,final int b){  final long unsignedA=a & 0xFFFFFFFFL;  final long unsignedB=b & 0xFFFFFFFFL;  final long delta=unsignedA - unsignedB;  return delta;}  }
class C{  public Long lrem(final String key,final long count,final String value){  checkIsInMulti();  client.lrem(key,count,value);  return client.getIntegerReply();}  }
class C{  public static boolean supportedType(int type){  Type.check(type);  return (type == Type.PTR || type == Type.CNAME || type == Type.DNAME || type == Type.A || type == Type.AAAA || type == Type.NS);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static int abs(int a){  return (a ^ (a >> 31)) - (a >> 31);}  }
class C{  public void testHasProperty(){  UnboundArbitraryBean instance=new UnboundBeanImpl();  assertTrue(instance.hasProperty(STRING_PROPERTY));  assertTrue(instance.hasProperty(INDEXED_PROPERTY));  assertTrue(instance.hasProperty(MAPPED_STRING));  assertTrue(instance.hasProperty(MAPPED_INDEXED));  assertFalse(instance.hasProperty(NOT_A_PROPERTY));}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public ParameterTypeRepositoryLocation(String key,String description,boolean allowEntries,boolean allowDirectories,boolean optional){  this(key,description,allowEntries,allowDirectories,false,optional,false,false);}  }
class C{  @Override protected Document readPreProcess(Document document) throws Exception {  NodeList list;  int i;  Element node;  String clsName;  Vector<Element> children;  int id;  int n;  Element child;  m_BeanInstances=new Vector<Object>();  m_BeanInstancesID=new Vector<Integer>();  list=document.getElementsByTagName("*");  clsName=BeanInstance.class.getName();  for (i=0; i < list.getLength(); i++) {    node=(Element)list.item(i);    if (node.getAttribute(ATT_CLASS).equals(clsName)) {      children=XMLDocument.getChildTags(node);      id=m_BeanInstancesID.size();      for (n=0; n < children.size(); n++) {        child=children.get(n);        if (child.getAttribute(ATT_NAME).equals(VAL_ID)) {          id=readIntFromXML(child);        }      }      m_BeanInstancesID.add(new Integer(id));    }  }  m_BeanInstances.setSize(m_BeanInstancesID.size());  m_CurrentMetaBean=null;  m_IgnoreBeanConnections=true;  m_BeanConnectionRelation=new Hashtable<Object,Vector<String>>();  return document;}  }
class C{  public final void updateImage(BufferedImage img,int yAddr,int cbAddr,int crAddr,int align){  final int imageWidth=img.getWidth();  final int imageHeight=img.getHeight();  if ((imageWidth & 0x1) != 0 || (align & 1) != 0) {    throw new RuntimeException("Lcd: image width must be aligned to 32!");  }  int[] pixels=((DataBufferInt)img.getRaster().getDataBuffer()).getData();  DebuggableMemory memory=platform.getMemory();  final int addY=((imageWidth % align) != 0 ? (align - (imageWidth % align)) : 0);  final int addCbCr=(((imageWidth >> 1) % align) != 0 ? (align - ((imageWidth >> 1) % align)) : 0);  for (int yPos=0, pixelPos=0; yPos < imageHeight; yPos++) {    for (int xPos=0; xPos < imageWidth; xPos+=2, yAddr+=2, pixelPos+=2) {      final int y=memory.loadUnsigned16(yAddr,null);      setPixelsFromYCbCr422(pixels,pixelPos,y >> 8,y & 0xFF,memory.loadUnsigned8(cbAddr++,null),memory.loadUnsigned8(crAddr++,null));    }    yAddr+=addY;    cbAddr+=addCbCr;    crAddr+=addCbCr;  }}  }
class C{  public static JLabel createLabel_style3(String txt){  return createLabel_root(txt,__Icon9Factory__.getInstance().getOrangeBaloon(),new Insets(4,9,9,9),new Color(255,255,255),null);}  }
class C{  public void ensureCapacity(int minCapacity){  if (table.length < minCapacity) {    int newCapacity=nextPrime(minCapacity);    rehash(newCapacity);  }}  }
class C{  public TableRowSorter(){  this(null);}  }
class C{  public static boolean matchActionMouseShortcutsModifiers(final Keymap activeKeymap,@JdkConstants.InputEventMask int modifiers,final String actionId){  final MouseShortcut syntheticShortcut=new MouseShortcut(MouseEvent.BUTTON1,modifiers,1);  for (  Shortcut shortcut : activeKeymap.getShortcuts(actionId)) {    if (shortcut instanceof MouseShortcut) {      final MouseShortcut mouseShortcut=(MouseShortcut)shortcut;      if (mouseShortcut.getModifiers() == syntheticShortcut.getModifiers()) {        return true;      }    }  }  return false;}  }
class C{  public static void execute(ExecutablePool pool,String region,EntryEventImpl event){  AbstractOp op=new InvalidateOpImpl(region,event);  pool.execute(op);}  }
class C{  public static void saveSettings(final AbstractSQLProvider provider,final CView view,final Map<String,String> settings) throws CouldntSaveDataException {  checkArguments(provider,view);  Preconditions.checkNotNull(settings,"IE02414: settings argument can not be null");  if (settings.isEmpty()) {    return;  }  final CConnection connection=provider.getConnection();  final StringBuilder deleteQuery=new StringBuilder("DELETE FROM " + CTableNames.VIEW_SETTINGS_TABLE + " WHERE ");  final StringBuilder insertQuery=new StringBuilder("INSERT INTO " + CTableNames.VIEW_SETTINGS_TABLE + " VALUES");  boolean first=true;  for (  final Map.Entry<String,String> pair : settings.entrySet()) {    final String value=pair.getValue();    final String key=pair.getKey();    if ((value == null) || (key == null)) {      continue;    } else {      if (!first) {        deleteQuery.append("OR");        insertQuery.append(',');      }      deleteQuery.append(" (view_id = " + view.getConfiguration().getId() + " AND name = '"+ key+ "') ");      insertQuery.append(" (" + view.getConfiguration().getId() + ", '"+ key+ "', '"+ value+ "' ) ");    }    first=false;  }  try {    connection.executeUpdate(deleteQuery.toString(),true);    connection.executeUpdate(insertQuery.toString(),true);  } catch (  final SQLException exception) {    throw new CouldntSaveDataException("E00115: Could not update settings in " + CTableNames.VIEW_SETTINGS_TABLE);  }}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  private void implPutAll(Map<?,?> t){  for (  Map.Entry<?,?> e : t.entrySet()) {    implPut(e.getKey(),e.getValue());  }}  }
class C{  public Bag removeObjectsAtLocation(final Double3D location){  Bag bag=getObjectsAtLocation(location);  if (bag != null) {    Object[] objs=bag.objs;    int numObjs=bag.numObjs;    for (int i=0; i < bag.numObjs; i++)     remove(objs[i]);  }  return bag;}  }
class C{  private void resetCoordinatorData(CoordinatorClient coordinator,CassandraTokenManager tokenManager1,CassandraTokenManager tokenManager2,Base64TokenEncoder encoder1,Base64TokenEncoder encoder2,TokenKeyGenerator tokenKeyGenerator1,TokenKeyGenerator tokenKeyGenerator2) throws Exception {  final long ROTATION_INTERVAL_MSECS=5000;  DbClient dbClient=getDbClient();  coordinator=new TestCoordinator();  tokenManager1=new CassandraTokenManager();  encoder1=new Base64TokenEncoder();  tokenKeyGenerator1=new TokenKeyGenerator();  TokenMaxLifeValuesHolder holder1=new TokenMaxLifeValuesHolder();  holder1.setKeyRotationIntervalInMSecs(ROTATION_INTERVAL_MSECS);  tokenManager1.setTokenMaxLifeValuesHolder(holder1);  tokenManager1.setDbClient(dbClient);  tokenManager1.setCoordinator(coordinator);  encoder1.setCoordinator(coordinator);  tokenKeyGenerator1.setTokenMaxLifeValuesHolder(holder1);  encoder1.setTokenKeyGenerator(tokenKeyGenerator1);  encoder1.managerInit();  tokenManager1.setTokenEncoder(encoder1);  tokenManager2=new CassandraTokenManager();  encoder2=new Base64TokenEncoder();  tokenKeyGenerator2=new TokenKeyGenerator();  TokenMaxLifeValuesHolder holder2=new TokenMaxLifeValuesHolder();  holder2.setKeyRotationIntervalInMSecs(ROTATION_INTERVAL_MSECS);  tokenManager2.setTokenMaxLifeValuesHolder(holder2);  tokenManager2.setDbClient(dbClient);  tokenManager2.setCoordinator(coordinator);  encoder2.setCoordinator(coordinator);  tokenKeyGenerator2.setTokenMaxLifeValuesHolder(holder2);  encoder2.setTokenKeyGenerator(tokenKeyGenerator2);  encoder2.managerInit();  tokenManager2.setTokenEncoder(encoder2);  StorageOSUserDAO userDAO=new StorageOSUserDAO();  userDAO.setUserName("user1");  final String token1=tokenManager1.getToken(userDAO);  Assert.assertNotNull(token1);  TokenOnWire tw1=encoder1.decode(token1);  String key1=tw1.getEncryptionKeyId();  final String token2=tokenManager2.getToken(userDAO);  Assert.assertNotNull(token2);  TokenOnWire tw2=encoder2.decode(token2);  String key2=tw2.getEncryptionKeyId();  Assert.assertEquals(key1,key2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.021 -0500",hash_original_method="7C8784537648600B4251C9E262BFEFC5",hash_generated_method="9F167F07FC0CADA08203BAA255DB9A81") public static EntityIterator newEntityIterator(Cursor cursor){  return new EntityIteratorImpl(cursor);}  }
class C{  private static void calculateThresholdForBlock(byte[] luminances,int subWidth,int subHeight,int width,int height,int[][] blackPoints,BitMatrix matrix){  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int left=cap(x,2,subWidth - 3);      int top=cap(y,2,subHeight - 3);      int sum=0;      for (int z=-2; z <= 2; z++) {        int[] blackRow=blackPoints[top + z];        sum+=blackRow[left - 2] + blackRow[left - 1] + blackRow[left]+ blackRow[left + 1]+ blackRow[left + 2];      }      int average=sum / 25;      thresholdBlock(luminances,xoffset,yoffset,average,width,matrix);    }  }}  }
class C{  public void testBug41566() throws Exception {  this.rs=this.stmt.executeQuery("-- this should't change the literal\n select '{1}'");  this.rs.next();  assertEquals("{1}",this.rs.getString(1));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Collection<ObjectReference> dumpRoots(int width){  List<ObjectReference> roots=new ArrayList<ObjectReference>();  for (int i=0; i < values.length; i++) {    Value value=get(i);    String name=method.getSlotName(i);    if (value != null && value instanceof ObjectValue) {      ObjectReference ref=((ObjectValue)value).getObjectValue();      System.err.printf(" %s=%s",name,ObjectModel.formatObject(width,ref));      if (!ref.isNull())       roots.add(ref);    }  }  return roots;}  }
class C{  @Override public boolean equals(Object obj){  return obj instanceof PairComparator;}  }
class C{  @ApiOperation(value="Sync triggers on the specified engine") @RequestMapping(value="engine/{engine}/synctriggers",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postSyncTriggersByEngine(@PathVariable("engine") String engineName,@RequestParam(required=false,value="force") boolean force){  syncTriggersImpl(getSymmetricEngine(engineName),force);}  }
class C{  private void readZipFile(String classPath,DependenciesListener builder,ProgressListener progress) throws IOException {  ClassFileReader reader=new ClassFileReader(analysisStats);  ZipFile zipFile=new ZipFile(classPath);  JarFileLister jarReader=new JarFileLister(zipFile,builder,reader,progress);  jarReader.start();}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public OrganizationParser(String organization){  super(organization);}  }
class C{  private void reportValues(){  double prob=(1.0 * delivered) / created;  write(format(getSimTime()) + " " + created+ " "+ delivered+ " "+ format(prob));}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public DividerItemDecoration withOffset(boolean withOffset){  this.withOffset=withOffset;  return this;}  }
class C{  public BridgeContext(UserAgent userAgent,DocumentLoader loader){  this(userAgent,sharedPool,loader);}  }
class C{  private void onFinishedMovement(){  if (mSuppressSelectionChanged) {    mSuppressSelectionChanged=false;    super.selectionChanged();  }  checkSelectionChanged();  invalidate();}  }
class C{  @Override public <A extends Annotation>ExpressionResult checkPermission(Class<A> annotationClass,PersistentResource resource,ChangeSpec changeSpec){  if (requestScope.getSecurityMode() == SecurityMode.SECURITY_INACTIVE) {    return ExpressionResult.PASS;  }  Expressions expressions;  if (SharePermission.class == annotationClass) {    expressions=expressionBuilder.buildSharePermissionExpressions(resource);  } else {    ExpressionResult expressionResult=this.checkUserPermissions(resource.getResourceClass(),annotationClass);    if (expressionResult == PASS) {      return expressionResult;    }    expressions=expressionBuilder.buildAnyFieldExpressions(resource,annotationClass,changeSpec);  }  return executeExpressions(expressions,annotationClass);}  }
class C{  public boolean hasIncomingBatchInstances(){  if (m_listenees.size() == 0) {    return false;  }  if (m_listenees.containsKey("trainingSet") || m_listenees.containsKey("testSet") || m_listenees.containsKey("dataSet")) {    return true;  }  return false;}  }
class C{  public void addComponentListener(String formName,String componentName,Object listener){  if (localComponentListeners == null) {    localComponentListeners=new Hashtable();    Hashtable formListeners=new Hashtable();    formListeners.put(componentName,listener);    localComponentListeners.put(formName,formListeners);    return;  }  Hashtable formListeners=(Hashtable)localComponentListeners.get(formName);  if (formListeners == null) {    formListeners=new Hashtable();    formListeners.put(componentName,listener);    localComponentListeners.put(formName,formListeners);    return;  }  Object currentListeners=formListeners.get(componentName);  if (currentListeners == null) {    formListeners.put(componentName,listener);  } else {    if (currentListeners instanceof Vector) {      ((Vector)currentListeners).addElement(listener);    } else {      Vector v=new Vector();      v.addElement(currentListeners);      v.addElement(listener);      formListeners.put(componentName,v);    }  }}  }
class C{  protected void dumpWaitingThreads(){  VM.sysWrite(" waiting: ");  waiting.dump();}  }
class C{  public MPPOrderWorkflow(Properties ctx,int PP_Order_Workflow_ID,String trxName){  super(ctx,PP_Order_Workflow_ID,trxName);  if (PP_Order_Workflow_ID == 0) {    setAccessLevel(ACCESSLEVEL_Organization);    setAuthor(MClient.get(ctx).getName());    setDurationUnit(DURATIONUNIT_Day);    setDuration(1);    setEntityType(ENTITYTYPE_UserMaintained);    setIsDefault(false);    setPublishStatus(PUBLISHSTATUS_UnderRevision);    setVersion(0);    setCost(Env.ZERO);    setWaitingTime(0);    setWorkingTime(0);  }}  }
class C{  protected Reader createReader(InputStream in) throws IOException {  return new BufferedReader(new InputStreamReader(in));}  }
class C{  private FilePreferencesImpl(AbstractPreferences parent,String name){  super(parent,name);  path=((FilePreferencesImpl)parent).path + File.separator + name;  initPrefs();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public R addParams(String key,File file,String contentType){  addParams(key,file,contentType,null);  return (R)this;}  }
class C{  public static String javaEncoding(String encoding){  return (String)ENCODINGS.get(encoding.toUpperCase());}  }
class C{  void trace(){  glUseProgram(computeProgram);  glUniform3f(eyeUniform,cameraPosition.x,cameraPosition.y,cameraPosition.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,-1,0)).sub(cameraPosition).normalize();  glUniform3f(ray00Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(-1,1,0)).sub(cameraPosition).normalize();  glUniform3f(ray01Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,-1,0)).sub(cameraPosition).normalize();  glUniform3f(ray10Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  invViewProjMatrix.transformProject(tmpVector.set(1,1,0)).sub(cameraPosition).normalize();  glUniform3f(ray11Uniform,tmpVector.x,tmpVector.y,tmpVector.z);  glUniform3f(sceneMinUniform,sceneBounds.min.x,sceneBounds.min.y,sceneBounds.min.z);  glUniform3f(sceneMaxUniform,sceneBounds.max.x,sceneBounds.max.y,sceneBounds.max.z);  glUniform1i(debugUniform,debug ? 1 : 0);  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_WRITE_ONLY,GL_RGBA8);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,nodesSsboBinding,nodesSsbo);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,trianglesSsboBinding,trianglesSsbo);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,nodesSsboBinding,0);  glBindBufferBase(GL_SHADER_STORAGE_BUFFER,trianglesSsboBinding,0);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_WRITE_ONLY,GL_RGBA8);  glUseProgram(0);}  }
class C{  protected ShoppingCartItem(Delegator delegator,String itemTypeId,String description,String categoryId,BigDecimal basePrice,Map<String,Object> attributes,String prodCatalogId,Locale locale,ShoppingCart.ShoppingCartItemGroup itemGroup){  this.delegator=delegator;  this.itemType=itemTypeId;  this.itemGroup=itemGroup;  this.itemDescription=description;  this.productCategoryId=categoryId;  if (basePrice != null) {    this.setBasePrice(basePrice);    this.setDisplayPrice(basePrice);  }  this.attributes=(attributes == null ? new HashMap<String,Object>() : attributes);  this.prodCatalogId=prodCatalogId;  this.delegatorName=delegator.getDelegatorName();  this.locale=locale;}  }
class C{  private String removeStatusChar(String nick){  if (nick.startsWith("@") || nick.startsWith("+") || nick.startsWith("%")) {    nick=nick.substring(1);  }  return nick;}  }
class C{  public static Classifier makeCopy(Classifier model) throws Exception {  return (Classifier)new SerializedObject(model).getObject();}  }
class C{  void startRename(){  int row=TABLE.getSelectedRow();  if (row == -1)   return;}  }
class C{  public static String toString(Resource file,Charset charset) throws IOException {  Reader r=null;  try {    r=getReader(file,charset);    String str=toString(r);    return str;  }  finally {    closeEL(r);  }}  }
class C{  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {  try (IndexOutput tempFile=trackingDir.createTempOutput(tempFileNamePrefix,"sort",IOContext.DEFAULT);ByteSequencesWriter out=getWriter(tempFile)){    BytesRef spare;    long start=System.currentTimeMillis();    BytesRefIterator iter=buffer.iterator(comparator);    sortInfo.sortTime+=System.currentTimeMillis() - start;    while ((spare=iter.next()) != null) {      assert spare.length <= Short.MAX_VALUE;      out.write(spare);    }    buffer.clear();    CodecUtil.writeFooter(out.out);    return tempFile.getName();  } }  }
class C{  public static String createFaultXml(QName faultCode,String faultString,String faultActor,String detail) throws IOException {  try {    final SOAPMessage msg=SoapUtils.MESSAGE_FACTORY.createMessage();    final SOAPFault soapFault=msg.getSOAPBody().addFault();    soapFault.setFaultCode(faultCode);    if (faultActor != null) {      soapFault.setFaultActor(faultActor);    }    if (faultString != null) {      soapFault.setFaultString(faultString);    }    if (detail != null) {      soapFault.addDetail().addChildElement(FAULT_DETAIL).addTextNode(detail);    }    return SoapUtils.getXml(msg,StandardCharsets.UTF_8.name());  } catch (  SOAPException|IOException e) {    throw new IOException("Creating fault xml failed",e);  }}  }
class C{  boolean ClosedStart(Token t){  return t.kind == IDENTIFIER || (t.kind >= op_57 && t.kind <= op_119) || t.kind == NUMBER_LITERAL || t.kind == LBR || t.kind == LSB || t.kind == LAB || t.kind == LBC || t.kind == LWB || t.kind == STRING_LITERAL || t.kind == WF || t.kind == SF;}  }
class C{  final public MutableString append(boolean b){  return append(String.valueOf(b));}  }
class C{  public static Map<?,?> convertBeanToMap(Object source){  return null;}  }
class C{  private static void ExceptionDescribe(JNIEnvironment env){  if (traceJNI)   VM.sysWrite("JNI called: ExceptionDescribe  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Throwable e=env.getException();    if (e != null) {      env.recordException(null);      e.printStackTrace(System.err);    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(null);    env.recordException(unexpected);  }}  }
class C{  @Override public BufferedImage applyEffect(BufferedImage src,BufferedImage dst,int w,int h){  if (src == null || (src.getType() != BufferedImage.TYPE_INT_ARGB && src.getType() != BufferedImage.TYPE_INT_ARGB_PRE)) {    throw new IllegalArgumentException("Effect only works with source images of type BufferedImage.TYPE_INT_ARGB. Type is " + src.getType());  }  if (dst != null && dst.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with destination images of type BufferedImage.TYPE_INT_ARGB.");  }  double trangleAngle=Math.toRadians(angle - 90);  int offsetX=(int)(Math.sin(trangleAngle) * distance + 0.5);  int offsetY=(int)(Math.cos(trangleAngle) * distance + 0.5);  int tmpOffX=offsetX + size;  int tmpOffY=offsetX + size;  int tmpW=w + offsetX + size+ size;  int tmpH=h + offsetX + size;  int[] lineBuf=getArrayCache().getTmpIntArray(w);  byte[] tmpBuf1=getArrayCache().getTmpByteArray1(tmpW * tmpH);  Arrays.fill(tmpBuf1,(byte)0x00);  byte[] tmpBuf2=getArrayCache().getTmpByteArray2(tmpW * tmpH);  Raster srcRaster=src.getRaster();  for (int y=0; y < h; y++) {    int dy=(y + tmpOffY);    int offset=dy * tmpW;    srcRaster.getDataElements(0,y,w,1,lineBuf);    for (int x=0; x < w; x++) {      int dx=x + tmpOffX;      tmpBuf1[offset + dx]=(byte)((lineBuf[x] & 0xFF000000) >>> 24);    }  }  float[] kernel=EffectUtils.createGaussianKernel(size);  EffectUtils.blur(tmpBuf1,tmpBuf2,tmpW,tmpH,kernel,size);  EffectUtils.blur(tmpBuf2,tmpBuf1,tmpH,tmpW,kernel,size);  float spread=Math.min(1 / (1 - (0.01f * this.spread)),255);  for (int i=0; i < tmpBuf1.length; i++) {    int val=(int)(((int)tmpBuf1[i] & 0xFF) * spread);    tmpBuf1[i]=(val > 255) ? (byte)0xFF : (byte)val;  }  if (dst == null)   dst=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  WritableRaster shadowRaster=dst.getRaster();  int red=color.getRed();  int green=color.getGreen();  int blue=color.getBlue();  for (int y=0; y < h; y++) {    int srcY=y + tmpOffY;    int shadowOffset=(srcY - offsetY) * tmpW;    for (int x=0; x < w; x++) {      int srcX=x + tmpOffX;      lineBuf[x]=tmpBuf1[shadowOffset + (srcX - offsetX)] << 24 | red << 16 | green << 8 | blue;    }    shadowRaster.setDataElements(0,y,w,1,lineBuf);  }  return dst;}  }
class C{  protected void doAfter(){}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Document";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("ContentSize","" + content.length);  bdr.addSimpleElement("Extension",extension);  bdr.addSimpleElement("MimeType",mimeType);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  public abbr addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  void encodeYUV420(byte[] yuv420sp,int[] argb,int width,int height){  final int frameSize=width * height;  int yIndex=0;  int uvIndex=frameSize;  int vuIndex=frameSize + frameSize / 4;  int a, R, G, B, Y, U, V;  int index=0;  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      a=(argb[index] & 0xff000000) >> 24;      R=(argb[index] & 0xff0000) >> 16;      G=(argb[index] & 0xff00) >> 8;      B=(argb[index] & 0xff) >> 0;      Y=((66 * R + 129 * G + 25 * B + 128) >> 8) + 16;      U=((-38 * R - 74 * G + 112 * B + 128) >> 8) + 128;      V=((112 * R - 94 * G - 18 * B + 128) >> 8) + 128;      yuv420sp[yIndex]=(byte)((Y < 0) ? 0 : ((Y > 255) ? 255 : Y));      if (y % 2 == 0 && x % 2 == 0) {        yuv420sp[uvIndex]=(byte)((V < 0) ? 0 : ((V > 255) ? 255 : V));        yuv420sp[vuIndex]=(byte)((U < 0) ? 0 : ((U > 255) ? 255 : U));      }      yIndex++;      if (y % 2 == 0 && x % 2 == 0) {        uvIndex++;        vuIndex++;      }      index++;    }  }}  }
class C{  private AbstractBURS_TreeNode buildTree(Instruction s){  AbstractBURS_TreeNode root=AbstractBURS_TreeNode.create(new DepGraphNode(s));  AbstractBURS_TreeNode cur=root;  for (Enumeration<Operand> uses=s.getUses(); uses.hasMoreElements(); ) {    Operand op=uses.nextElement();    if (op == null)     continue;    AbstractBURS_TreeNode child;    if (op instanceof RegisterOperand) {      if (op.asRegister().getRegister().isValidation())       continue;      child=Register;    } else     if (op instanceof IntConstantOperand) {      child=new BURS_IntConstantTreeNode(((IntConstantOperand)op).value);    } else     if (op instanceof LongConstantOperand) {      child=LongConstant;    } else     if (op instanceof AddressConstantOperand) {      child=AddressConstant;    } else     if (op instanceof BranchOperand && s.isCall()) {      child=BranchTarget;    } else     if (op instanceof InlinedOsrTypeInfoOperand && s.isYieldPoint()) {      child=NullTreeNode;    } else {      continue;    }    if (cur.child1 == null) {      cur.child1=child;    } else     if (cur.child2 == null) {      cur.child2=child;    } else {      AbstractBURS_TreeNode child1=cur.child2;      AbstractBURS_TreeNode aux=AbstractBURS_TreeNode.create(OTHER_OPERAND_opcode);      cur.child2=aux;      cur=aux;      cur.child1=child1;      cur.child2=child;    }  }switch (s.getOpcode()) {case CALL_opcode:case SYSCALL_opcode:case YIELDPOINT_OSR_opcode:    if (cur.child2 == null) {      cur.child2=NullTreeNode;    }case RETURN_opcode:  if (cur.child1 == null) {    cur.child1=NullTreeNode;  }}return root;}  }
class C{  private static boolean isFourBytesSequence(byte b){  return -16 <= b && b <= -9;}  }
class C{  public void write(byte[] data,int offset,int length) throws IOException {  assert data.length >= offset + length;  while (length > 0) {    int toWrite=Math.min(length,NfcClient.MAX_XFER_SIZE);    writeInt(data,offset,toWrite);    offset+=toWrite;    length-=toWrite;  }}  }
class C{  public final void close(){  try {    log.info("Closing ...");    assert (writer != null);    writer.flush();    writer.close();    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public PeopleInfo(){  m_sID=null;  m_sName=null;}  }
class C{  public DatagramPacket responseReceive() throws IOException {  byte[] buf=new byte[1024];  DatagramPacket dp=new DatagramPacket(buf,buf.length);  datagramSocket.receive(dp);  return dp;}  }
class C{  public PLSTTest(String name){  super(name);}  }
class C{  public static ResultSet varArgsFunctionTable(int... values) throws SQLException {  if (values.length != 6) {    throw new SQLException("Unexpected argument count");  }  SimpleResultSet result=new SimpleResultSet();  result.addColumn("A",Types.INTEGER,0,0);  for (  int value : values) {    result.addRow(value);  }  return result;}  }
class C{  static void loadActionMap(LazyActionMap map){  map.put(new Actions(Actions.PRESS));  map.put(new Actions(Actions.RELEASE));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DrawerBuilder withStickyFooterShadow(boolean stickyFooterShadow){  this.mStickyFooterShadow=stickyFooterShadow;  return this;}  }
class C{  public static SimpleDataSet read(Path path,int lines_to_skip,Set<Integer> cat_cols) throws IOException {  return read(path,DEFAULT_DELIMITER,lines_to_skip,DEFAULT_COMMENT,cat_cols);}  }
class C{  public com.linkedin.camus.example.records.DummyLog.Builder clearId(){  fieldSetFlags()[0]=false;  return this;}  }
class C{  @SmallTest public void testCreateSpeechRules_dropEventIfNoFormatter() throws Exception {  final String strategy="<ss:rule>" + "  <ss:filter>" + "    <ss:eventType>TYPE_VIEW_CLICKED</ss:eventType>"+ "  </ss:filter>"+ "</ss:rule>";  final AccessibilityEvent event=AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_CLICKED);  final EventSpeechRuleProcessor processor=createProcessorWithStrategy(strategy,1);  final Utterance utterance=new Utterance();  final boolean processed=processor.processEvent(event,utterance);  assertTrue("The event must match the filter",processed);  assertTrue("No utterance should be produced",TextUtils.isEmpty(StringBuilderUtils.getAggregateText(utterance.getSpoken())));}  }
class C{  @VisibleForTesting void simulateAttachForTesting(){  mIsAttachedToInstance=true;  mWasMeasured=true;}  }
class C{  private double computeDepth() throws WikiApiException {  Category root=wiki.getMetaData().getMainCategory();  if (root == null) {    logger.error("There is no root node for this wiki. Check the parameter that provides the name of the root node.");    return 0.0;  }  if (!graph.containsVertex(root.getPageId())) {    logger.error("The root node is not part of this graph. Cannot compute depth of this graph. Setting depth to 0.0");    return 0.0;  }  double maxPathLength=0.0;  double[] returnValues=computeShortestPathLenghts(root.getPageId(),0.0,maxPathLength,new HashSet<Integer>());  maxPathLength=returnValues[1];  return maxPathLength;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public String processCallOut(GridField field,Object value,Object oldValue,int currentRow,int currentColumn){  String callout=field.getCallout();  if (callout.length() == 0)   return "";  logger.fine(field.getColumnName() + "=" + value+ " ("+ callout+ ") - old="+ oldValue);  StringTokenizer st=new StringTokenizer(callout,";,",false);  while (st.hasMoreTokens()) {    String cmd=st.nextToken().trim();    if (activeCallOuts.contains(cmd))     continue;    String retValue="";    if (cmd.toLowerCase().startsWith(MRule.SCRIPT_PREFIX)) {      MRule rule=MRule.get(ctx,cmd.substring(MRule.SCRIPT_PREFIX.length()));      if (rule == null) {        retValue="Callout " + cmd + " not found";        logger.log(Level.SEVERE,retValue);        return retValue;      }      if (!(rule.getEventType().equals(MRule.EVENTTYPE_Callout) && rule.getRuleType().equals(MRule.RULETYPE_JSR223ScriptingAPIs))) {        retValue="Callout " + cmd + " must be of type JSR 223 and event Callout";        logger.log(Level.SEVERE,retValue);        return retValue;      }      ScriptEngine engine=rule.getScriptEngine();      MRule.setContext(engine,ctx,browser.getWindowNo());      engine.put(MRule.ARGUMENTS_PREFIX + "WindowNo",browser.getWindowNo());      engine.put(MRule.ARGUMENTS_PREFIX + "Tab",this);      engine.put(MRule.ARGUMENTS_PREFIX + "Field",field);      engine.put(MRule.ARGUMENTS_PREFIX + "Value",value);      engine.put(MRule.ARGUMENTS_PREFIX + "OldValue",oldValue);      engine.put(MRule.ARGUMENTS_PREFIX + "currentRow",currentRow);      engine.put(MRule.ARGUMENTS_PREFIX + "currentColumn",currentColumn);      engine.put(MRule.ARGUMENTS_PREFIX + "Ctx",ctx);      try {        activeCallOuts.add(cmd);        retValue=engine.eval(rule.getScript()).toString();      } catch (      Exception e) {        logger.log(Level.SEVERE,"",e);        retValue="Callout Invalid: " + e.toString();        return retValue;      } finally {        activeCallOuts.remove(cmd);      }    } else {      WBrowserCallout call=null;      String method=null;      int methodStart=cmd.lastIndexOf('.');      try {        if (methodStart != -1) {          Class<?> cClass=Class.forName(cmd.substring(0,methodStart));          call=(WBrowserCallout)cClass.newInstance();          method=cmd.substring(methodStart + 1);        }      } catch (      Exception e) {        logger.log(Level.SEVERE,"class",e);        return "Callout Invalid: " + cmd + " ("+ e.toString()+ ")";      }      if (call == null || method == null || method.length() == 0)       return "Callout Invalid: " + method;      try {        activeCallOuts.add(cmd);        activeCallOutInstance.add(call);        retValue=call.start(ctx,method,browser.getWindowNo(),browserRows,field,value,oldValue,currentRow,currentColumn);      } catch (      Exception e) {        logger.log(Level.SEVERE,"start",e);        retValue="Callout Invalid: " + e.toString();        return retValue;      } finally {        activeCallOuts.remove(cmd);        activeCallOutInstance.remove(call);      }    }    if (!Util.isEmpty(retValue)) {      logger.severe(retValue);      return retValue;    }  }  return "";}  }
class C{  protected SVGDocument cloneDocument(){  return (SVGDocument)new CloneNoExport().cloneDocument(getDomImpl(),document);}  }
class C{  public StrBuilder trim(){  if (size == 0) {    return this;  }  int len=size;  char[] buf=buffer;  int pos=0;  while (pos < len && buf[pos] <= ' ') {    pos++;  }  while (pos < len && buf[len - 1] <= ' ') {    len--;  }  if (len < size) {    delete(len,size);  }  if (pos > 0) {    delete(0,pos);  }  return this;}  }
class C{  public static String mapLibraryName(String userLibName){  return VMCommonLibrarySupport.mapLibraryName(userLibName);}  }
class C{  public boolean isNeighbourMutual(int i){  return neighbours.get(i).isMutual();}  }
class C{  public boolean hasLayer(final String layername){  return getLayer(layername) != null;}  }
class C{  public boolean needsLayouting(){  return m_needsLayouting;}  }
class C{  private ArrayList<ArrayDBIDs> buildOneDimIndexes(Relation<? extends NumberVector> relation){  final int dim=RelationUtil.dimensionality(relation);  ArrayList<ArrayDBIDs> subspaceIndex=new ArrayList<>(dim + 1);  SortDBIDsBySingleDimension comp=new VectorUtil.SortDBIDsBySingleDimension(relation);  for (int i=0; i < dim; i++) {    ArrayModifiableDBIDs amDBIDs=DBIDUtil.newArray(relation.getDBIDs());    comp.setDimension(i);    amDBIDs.sort(comp);    subspaceIndex.add(amDBIDs);  }  return subspaceIndex;}  }
class C{  public LinkIcon(boolean linked){  this.linked=linked;  link=linked ? linkedImIc.getImage() : unlinkedImIc.getImage();  addMouseListener(this);  Dimension dim=new Dimension((int)link.getWidth(null),link.getHeight(null));  setPreferredSize(dim);  setMinimumSize(dim);  setMaximumSize(dim);  setSize(dim);  setLayout(null);  repaint();}  }
class C{  public synchronized FileSetSetting createFileSetSetting(String key,File[] defaultValue){  FileSetSetting result=new FileSetSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  void initFirstBlock(int maxStack,int maxLocals,String className,String methodDesc,boolean isStatic,boolean isConstructor) throws BadBytecode {  if (methodDesc.charAt(0) != '(')   throw new BadBytecode("no method descriptor: " + methodDesc);  stackTop=0;  stackTypes=TypeData.make(maxStack);  TypeData[] locals=TypeData.make(maxLocals);  if (isConstructor)   locals[0]=new TypeData.UninitThis(className); else   if (!isStatic)   locals[0]=new TypeData.ClassName(className);  int n=isStatic ? -1 : 0;  int i=1;  try {    while ((i=descToTag(methodDesc,i,++n,locals)) > 0)     if (locals[n].is2WordType())     locals[++n]=TypeTag.TOP;  } catch (  StringIndexOutOfBoundsException e) {    throw new BadBytecode("bad method descriptor: " + methodDesc);  }  numLocals=n;  localsTypes=locals;}  }
class C{  public synchronized ByteSetting createByteSetting(String key,byte defaultValue){  ByteSetting result=new ByteSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  public ChangeCorrectionProposal(String name,Change change,int relevance,Images image){  if (name == null) {    throw new IllegalArgumentException("Name must not be null");  }  fName=name;  fChange=change;  fRelevance=relevance;  fImage=image;  fCommandId=null;}  }
class C{  public FontFace(List srcs,String familyName,float unitsPerEm,String fontWeight,String fontStyle,String fontVariant,String fontStretch,float slope,String panose1,float ascent,float descent,float strikethroughPosition,float strikethroughThickness,float underlinePosition,float underlineThickness,float overlinePosition,float overlineThickness){  super(familyName,unitsPerEm,fontWeight,fontStyle,fontVariant,fontStretch,slope,panose1,ascent,descent,strikethroughPosition,strikethroughThickness,underlinePosition,underlineThickness,overlinePosition,overlineThickness);  this.srcs=srcs;}  }
class C{  public static int determineThreads(Output output,ParameterDatabase parameters,Parameter threadParameter){  int thread=1;  String tmp_s=parameters.getString(threadParameter,null);  if (tmp_s == null) {    output.fatal("Threads number must exist.",threadParameter,null);  } else   if (V_THREADS_AUTO.equalsIgnoreCase(tmp_s)) {    Runtime runtime=Runtime.getRuntime();    try {      return ((Integer)runtime.getClass().getMethod("availableProcessors",(Class[])null).invoke(runtime,(Object[])null)).intValue();    } catch (    Exception e) {      output.fatal("Whoa! This Java version is to old to have the Runtime.availableProcessors() method available.\n" + "This means you can't use 'auto' as a threads option.",threadParameter,null);    }  } else {    try {      thread=parameters.getInt(threadParameter,null);    } catch (    NumberFormatException e) {      output.fatal("Invalid, non-integer threads value (" + thread + ")",threadParameter,null);    }  }  return thread;}  }
class C{  public static List<Initiator> findIfInitiatorsAreUserAddedInAnotherMask(ExportMask exportMask,List<Initiator> newInitiators,DbClient dbClient){  List<Initiator> userAddedInitiators=new ArrayList<>();  for (  ExportMask matchedMask : ExportMaskUtils.getExportMasksWithInitiators(dbClient,newInitiators).values()) {    if (matchedMask.getId().equals(exportMask.getId()) || !matchedMask.getStorageDevice().equals(exportMask.getStorageDevice())) {      continue;    }    Iterator<Initiator> iterator=newInitiators.iterator();    while (iterator.hasNext()) {      Initiator initiator=iterator.next();      if (matchedMask.hasUserInitiator(initiator.getId())) {        userAddedInitiators.add(initiator);        iterator.remove();      }    }  }  Collection portNames=Collections2.transform(userAddedInitiators,CommonTransformerFunctions.fctnInitiatorToPortName());  if (!portNames.isEmpty()) {    _log.info(String.format("The following initiators were found in another ExportMask as user-added initiators: %s",CommonTransformerFunctions.collectionToString(portNames)));  }  return userAddedInitiators;}  }
class C{  private void runCommand(LibertyInstall install,String command,Map<String,String> env) throws Exception {  Process p=install.runCommand(command,env);  if (!"run".equals(command)) {    int retVal=p.waitFor();    if (retVal != 0) {      throw new Exception("WebSphere Liberty failed to start with return code " + retVal);    }  } else {  }}  }
class C{  private void ensureCapacity(){  if (size >= data.length) {    E[] newData=(E[])(new Object[size * 2 + 1]);    System.arraycopy(data,0,newData,0,size);    data=newData;  }}  }
class C{  void sendLocationUpdate(Location location){  if (location == null) {    return;  }  XmppMsg msg=new XmppMsg();  if (_settingsManager.useGoogleMapUrl) {    msg.appendLine("http://maps.google.com/maps?q=" + location.getLatitude() + ","+ location.getLongitude());  }  if (_settingsManager.useOpenStreetMapUrl) {    msg.appendLine("http://www.openstreetmap.org/?mlat=" + location.getLatitude() + "&mlon="+ location.getLongitude()+ "&zoom=14&layers=M");  }  msg.appendLine(getString(R.string.chat_geo_accuracy,location.getAccuracy()));  msg.appendLine(getString(R.string.chat_geo_altitude,location.getAltitude()));  msg.appendLine(getString(R.string.chat_geo_speed,location.getSpeed()));  msg.appendLine(getString(R.string.chat_geo_provider,location.getProvider()));  send(msg);}  }
class C{  @Override public int read() throws IOException {  if (read_pos == read_pos_end) {    throw new EndOfBufferException();  }  return buffer[read_pos++] & 0xFF;}  }
class C{  void log(String msg){  System.err.println(msg);}  }
class C{  public int priority(){  return numObjects();}  }
class C{  private boolean pauseTrue(int lo,int hi) throws Exception {  super.pause(lo,hi);  return true;}  }
class C{  protected static void resetLockedMeta(Spannable content){  resetLock(content,CAP);  resetLock(content,ALT);  resetLock(content,SYM);  resetLock(content,SELECTING);}  }
class C{  public NoPermissionException(){  super();}  }
class C{  private boolean doGroupSnapshotSessionCreation(List<BlockSnapshotSession> snapSessions){  boolean doGroupCreation=false;  if (snapSessions.size() > 1) {    doGroupCreation=true;  } else {    BlockSnapshotSession snapSession=snapSessions.get(0);    URI sourceObjURI=snapSession.getParent().getURI();    BlockObject sourceObj=BlockObject.fetch(_dbClient,sourceObjURI);    URI cgURI=sourceObj.getConsistencyGroup();    if (!NullColumnValueGetter.isNullURI(cgURI)) {      doGroupCreation=true;    }  }  return doGroupCreation;}  }
class C{  public JSONArray put(Map value){  this.put(new JSONObject(value));  return this;}  }
class C{  public void updateDouble(String columnName,double x) throws SQLException {  updateDouble(findColumn(columnName),x);}  }
class C{  <T extends VPlexResourceInfo>T renameVPlexResource(T resourceInfo,String newName) throws VPlexApiException {  StringBuilder pathBuilder=new StringBuilder();  pathBuilder.append(VPlexApiConstants.VPLEX_PATH);  pathBuilder.append(resourceInfo.getPath());  pathBuilder.append("?");  pathBuilder.append(VPlexApiConstants.ATTRIBUTE_NAME_JSON_KEY);  pathBuilder.append("=");  pathBuilder.append(newName);  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(pathBuilder.toString()));  s_logger.info("Update name URI is {}",requestURI.toString());  int retryCount=0;  while (++retryCount <= VPlexApiConstants.RENAME_RESOURCE_MAX_TRIES) {    ClientResponse response=_vplexApiClient.put(requestURI);    String responseStr=response.getEntity(String.class);    s_logger.info("Update name response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Update name is completing asynchronously");        _vplexApiClient.waitForCompletion(response);        response.close();      } else {        response.close();        if (retryCount == VPlexApiConstants.RENAME_RESOURCE_MAX_TRIES) {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.renameResourceFailureStatus(String.valueOf(response.getStatus()),cause);        } else {          s_logger.info(String.format("Update name for resource %s failed on attempt %d of %d, retrying...",resourceInfo.getName(),retryCount,VPlexApiConstants.RENAME_RESOURCE_MAX_TRIES));          VPlexApiUtils.pauseThread(VPlexApiConstants.RENAME_RESOURCE_SLEEP_TIME_MS);          continue;        }      }    }    String newPath=resourceInfo.getPath().replaceFirst(resourceInfo.getName(),newName);    resourceInfo.setPath(newPath);    resourceInfo.setName(newName);    break;  }  return resourceInfo;}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public FileChannelImpl(Object stream,FileDescriptor fd,int mode){  this.fd=fd;  this.stream=stream;  this.mode=mode;}  }
class C{  final int measureHeightOfChildrenCompat(int widthMeasureSpec,int startPosition,int endPosition,final int maxHeight,int disallowPartialChildPosition){  final int paddingTop=getListPaddingTop();  final int paddingBottom=getListPaddingBottom();  final int paddingLeft=getListPaddingLeft();  final int paddingRight=getListPaddingRight();  final int reportedDividerHeight=getDividerHeight();  final Drawable divider=getDivider();  final ListAdapter adapter=getAdapter();  if (adapter == null) {    return paddingTop + paddingBottom;  }  int returnedHeight=paddingTop + paddingBottom;  final int dividerHeight=((reportedDividerHeight > 0) && divider != null) ? reportedDividerHeight : 0;  int prevHeightWithoutPartialChild=0;  View child=null;  int viewType=0;  int count=adapter.getCount();  for (int i=0; i < count; i++) {    int newType=adapter.getItemViewType(i);    if (newType != viewType) {      child=null;      viewType=newType;    }    child=adapter.getView(i,child,this);    ;    int heightMeasureSpec;    int childHeight=child.getLayoutParams().height;    if (childHeight > 0) {      heightMeasureSpec=MeasureSpec.makeMeasureSpec(childHeight,MeasureSpec.EXACTLY);    } else {      heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);    }    child.measure(widthMeasureSpec,heightMeasureSpec);    if (i > 0) {      returnedHeight+=dividerHeight;    }    returnedHeight+=child.getMeasuredHeight();    if (returnedHeight >= maxHeight) {      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;    }    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {      prevHeightWithoutPartialChild=returnedHeight;    }  }  return returnedHeight;}  }
class C{  public static int roundUpInt(int x,int blockSizePowerOf2){  return (x + blockSizePowerOf2 - 1) & (-blockSizePowerOf2);}  }
class C{  public TLSARecord(Name name,int dclass,long ttl,int certificateUsage,int selector,int matchingType,byte[] certificateAssociationData){  super(name,Type.TLSA,dclass,ttl);  this.certificateUsage=checkU8("certificateUsage",certificateUsage);  this.selector=checkU8("selector",selector);  this.matchingType=checkU8("matchingType",matchingType);  this.certificateAssociationData=checkByteArrayLength("certificateAssociationData",certificateAssociationData,0xFFFF);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildchildexists.class,args);}  }
class C{  public void initializeClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_Data=new Instances(data);  m_Data.deleteWithMissingClass();  m_zeroR=new ZeroR();  m_zeroR.buildClassifier(m_Data);  if (m_Data.numAttributes() == 1) {    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");    m_SuitableData=false;    return;  } else {    m_SuitableData=true;  }  m_Classifiers=new ArrayList<Classifier>(m_NumIterations);  m_Data=residualReplace(m_Data,m_zeroR,false);  m_SSE=0;  m_Diff=Double.MAX_VALUE;  for (int i=0; i < m_Data.numInstances(); i++) {    m_SSE+=m_Data.instance(i).weight() * m_Data.instance(i).classValue() * m_Data.instance(i).classValue();  }  if (m_Debug) {    System.err.println("Sum of squared residuals " + "(predicting the mean) : " + m_SSE);  }}  }
class C{  public static OMDBApiService newApi(){  return newApi(new OkHttpClient());}  }
class C{  @Override public Blob createBlob() throws SQLException {  try {    int id=getNextId(TraceObject.BLOB);    debugCodeAssign("Blob",TraceObject.BLOB,id,"createClob()");    checkClosed();    try {      Value v=ValueLobDb.createTempBlob(new ByteArrayInputStream(Utils.EMPTY_BYTES),0);      session.addTemporaryLob(v);      return new JdbcBlob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static FilterSpecCompiled makeFilterSpec(EventType eventType,String eventTypeName,List<ExprNode> filterExpessions,PropertyEvalSpec optionalPropertyEvalSpec,LinkedHashMap<String,Pair<EventType,String>> taggedEventTypes,LinkedHashMap<String,Pair<EventType,String>> arrayEventTypes,StreamTypeService streamTypeService,String optionalStreamName,StatementContext statementContext,Collection<Integer> assignedTypeNumberStack) throws ExprValidationException {  List<ExprNode> validatedNodes=validateAllowSubquery(ExprNodeOrigin.FILTER,filterExpessions,streamTypeService,statementContext,taggedEventTypes,arrayEventTypes);  return build(validatedNodes,eventType,eventTypeName,optionalPropertyEvalSpec,taggedEventTypes,arrayEventTypes,streamTypeService,optionalStreamName,statementContext,assignedTypeNumberStack);}  }
class C{  protected double lnXpluslnY(double lnX,double lnY){  double lnYminusLnX, temp;  if (lnY > lnX) {    temp=lnX;    lnX=lnY;    lnY=temp;  }  lnYminusLnX=lnY - lnX;  if (lnYminusLnX < MININUM_EXPONENT) {    return lnX;  } else {    return Math.log1p(Math.exp(lnYminusLnX)) + lnX;  }}  }
class C{  public static void main(String[] args){  TestRunner.run(EnricherTest.class);}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public MockFlapListener(long threshold,int flapInterval,float flapStartThreshold,float flapStopThreshold,float lowWeight,float highWeight){  this.threshold=threshold;  setDefaultFlapInterval(flapInterval);  setDefaultFlapStartThreshold(flapStartThreshold);  setDefaultFlapStopThreshold(flapStopThreshold);  setDefaultFlapLowWeight(lowWeight);  setDefaultFlapHighWeight(highWeight);}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> headSet(E end){  return headSet(end,false);}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  if (dataset == null) {    return null;  }  Range r=DatasetUtilities.findStackedRangeBounds(dataset,this.seriesToGroupMap);  return r;}  }
class C{  public TourDisplaySetting(Paint paint){  this(paint,new BasicStroke());}  }
class C{  public TaskErrorHandlingException(String message,Exception cause){  super(message,cause);}  }
class C{  public SchemaResource(UserContext userContext){  this.userContext=userContext;}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  public void testConfigureSetsDefaultAJPPort() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/conf/server.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(TomcatPropertySet.AJP_PORT),"//Connector[@className='org.apache.ajp.tomcat4.Ajp13Connector']/@port",config);}  }
class C{  public static void deleteBlockSelection(Editor editor){}  }
class C{  public static final XPATHErrorResources loadResourceBundle(String className) throws MissingResourceException {  Locale locale=Locale.getDefault();  String suffix=getResourceSuffix(locale);  try {    return (XPATHErrorResources)ResourceBundle.getBundle(className + suffix,locale);  } catch (  MissingResourceException e) {    try {      return (XPATHErrorResources)ResourceBundle.getBundle(className,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  private void finishNestedMode() throws SAXException {  md=(ModeData)modeDataStack.pop();}  }
class C{  public static void UNREACHABLE(String module,String err1,String err2) throws OptimizingCompilerException {  throw new OptimizingCompilerException(module,"Executed UNREACHABLE code",err1,err2);}  }
class C{  public static Element createDiv(int id){  Element e=Document.get().createDivElement();  e.setId(Integer.toString(id));  return e;}  }
class C{  public void incrementCursor(){  if (attributes.print == DTVCCDirection.LEFT_TO_RIGHT) {    penX++;  } else   if (attributes.print == DTVCCDirection.RIGHT_TO_LEFT) {    penX--;  } else   if (attributes.print == DTVCCDirection.TOP_TO_BOTTOM) {    penY++;  } else   if (attributes.print == DTVCCDirection.BOTTOM_TO_TOP) {    penY--;  }}  }
class C{  public byte[] generateSignature() throws CryptoException, DataLengthException {  if (!forSigning) {    throw new IllegalStateException("RSADigestSigner not initialised for signature generation.");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  try {    byte[] data=derEncode(hash);    return rsaEngine.processBlock(data,0,data.length);  } catch (  IOException e) {    throw new CryptoException("unable to encode signature: " + e.getMessage(),e);  }}  }
class C{  public static String utf8BytesWithUtf16LengthToString(@Nonnull byte[] bytes,int start,int utf16Length,@Nullable int[] readLength){  char[] chars=localBuffer.get();  if (chars == null || chars.length < utf16Length) {    chars=new char[utf16Length];    localBuffer.set(chars);  }  int outAt=0;  int at=0;  for (at=start; utf16Length > 0; utf16Length--) {    int v0=bytes[at] & 0xFF;    char out;switch (v0 >> 4) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:{        if (v0 == 0) {          return throwBadUtf8(v0,at);        }        out=(char)v0;        at++;        break;      }case 0x0c:case 0x0d:{      int v1=bytes[at + 1] & 0xFF;      if ((v1 & 0xc0) != 0x80) {        return throwBadUtf8(v1,at + 1);      }      int value=((v0 & 0x1f) << 6) | (v1 & 0x3f);      if ((value != 0) && (value < 0x80)) {        return throwBadUtf8(v1,at + 1);      }      out=(char)value;      at+=2;      break;    }case 0x0e:{    int v1=bytes[at + 1] & 0xFF;    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v1,at + 1);    }    int v2=bytes[at + 2] & 0xFF;    if ((v2 & 0xc0) != 0x80) {      return throwBadUtf8(v2,at + 2);    }    int value=((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) | (v2 & 0x3f);    if (value < 0x800) {      return throwBadUtf8(v2,at + 2);    }    out=(char)value;    at+=3;    break;  }default :{  return throwBadUtf8(v0,at);}}chars[outAt]=out;outAt++;}if (readLength != null && readLength.length > 0) {readLength[0]=at - start;readLength[0]=at - start;}return new String(chars,0,outAt);}  }
class C{  public boolean save(String trxName){  m_trxName=trxName;  for (int i=0; i < m_lines.size(); i++) {    FactLine fl=(FactLine)m_lines.get(i);    if (!fl.save(trxName))     return false;  }  return true;}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  String userSpeechVar=system.getSettings().userSpeech;  String outputVar=system.getSettings().systemOutput;  if (updatedVars.contains(userSpeechVar) && state.hasChanceNode(userSpeechVar) && !paused) {    Value speechVal=system.getContent(userSpeechVar).getBest();    if (speechVal instanceof SpeechData) {      Thread t=new Thread(null);      t.start();    }  } else   if (updatedVars.contains(outputVar) && state.hasChanceNode(outputVar) && !paused) {    Value utteranceVal=system.getContent(outputVar).getBest();    if (utteranceVal instanceof StringVal) {      synthesise(utteranceVal.toString());    }  }}  }
class C{  public static SetExpression in(String propertyName,Collection<? extends Object> values){  return in(propertyName,values.toArray());}  }
class C{  public int read(char[] cbuf,int off,int len) throws java.io.IOException {  return 0;}  }
class C{  synchronized void deallocate(GlowEntity entity){  if (entity.id == 0) {    throw new IllegalStateException("Entity does not have an id assigned.");  }  usedIds.remove(entity.id);}  }
class C{  public void storeInRegister(int registerNumber) throws IOException {  writeCode(REGISTER);  out.writeUI16(1);  out.writeUI8(registerNumber);}  }
class C{  public Kernel negate(){  mul(-1.0);  return this;}  }
class C{  public void collapseUnder(NodeRenderingProperty node,NodeRenderingProperty parent){  if (parent == node) {    return;  }  node.collapsedUnder=parent;  parent.hasCollapsedNodeUnder=true;  node.pluginStore.put(this,new DeltaCollapse(parent.positionX - node.positionX,parent.positionY - node.positionY));}  }
class C{  public void delete(int i){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException();  if (!contains(i))   throw new NoSuchElementException("Specified index is not in the queue");  Node<Key> x=nodes[i];  x.key=null;  if (x.parent != null) {    cut(i);  }  head=cut(x,head);  if (x.child != null) {    Node<Key> child=x.child;    x.child=null;    x=child;    do {      child.parent=null;      child=child.next;    } while (child != x);    head=meld(head,child);  }  if (!isEmpty())   consolidate(); else   min=null;  nodes[i]=null;  size--;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEColorMatrixElement(prefix,(AbstractDocument)doc);}  }
class C{  public static void shareChannel(Context context,Channel channel,Uri bitmapUri){  String shareText=String.format(context.getString(R.string.share_channel_text),channel.getTitle(),channel.getSiteUrl());  Intent intent=new Intent(Intent.ACTION_SEND);  intent.setType("text/plain");  intent.putExtra(Intent.EXTRA_TEXT,shareText);  if (bitmapUri != null) {    intent.putExtra(Intent.EXTRA_STREAM,bitmapUri);  }  Intent chooser=Intent.createChooser(intent,context.getString(R.string.share_with));  if (intent.resolveActivity(context.getPackageManager()) != null) {    context.startActivity(chooser);  }}  }
class C{  synchronized boolean connectedToPrimaryHost(){  return isPrimaryHostIndex(this.currentHostIndex);}  }
class C{  public ShingleFilter(TokenStream input,String tokenType){  this(input,DEFAULT_MIN_SHINGLE_SIZE,DEFAULT_MAX_SHINGLE_SIZE);  setTokenType(tokenType);}  }
class C{  public boolean loadLines(){  boolean result=false;  log.info("MBankStatementLoader.loadLines");  if (m_loader == null) {    errorMessage="ClassNotLoaded";    return result;  }  if (!m_loader.init(this)) {    errorMessage=m_loader.getLastErrorMessage();    errorDescription=m_loader.getLastErrorDescription();    return result;  }  if (!m_loader.isValid()) {    errorMessage=m_loader.getLastErrorMessage();    errorDescription=m_loader.getLastErrorDescription();    return result;  }  if (!m_loader.loadLines()) {    errorMessage=m_loader.getLastErrorMessage();    errorDescription=m_loader.getLastErrorDescription();    return result;  }  result=true;  return result;}  }
class C{  public void play(){  play=true;  if (!ignoreRepeatSetting) {    repeatCount=0;  }}  }
class C{  private void findClassesInJar(File jarFile,String pathPrefix,Set<String> classNames,Set<String> subpackageNames) throws IOException {  Set<String> entryNames=getJarEntries(jarFile);  if (!entryNames.contains(pathPrefix)) {    return;  }  int prefixLength=pathPrefix.length();  for (  String entryName : entryNames) {    if (entryName.startsWith(pathPrefix)) {      if (entryName.endsWith(CLASS_EXTENSION)) {        int index=entryName.indexOf('/',prefixLength);        if (index >= 0) {          String p=entryName.substring(0,index).replace('/','.');          subpackageNames.add(p);        } else         if (isToplevelClass(entryName)) {          classNames.add(getClassName(entryName).replace('/','.'));        }      }    }  }}  }
class C{  public void writeEntryHeader(byte[] outbuf){  int offset=0;  offset=TarUtils.getNameBytes(name,outbuf,offset,NAMELEN);  offset=TarUtils.getOctalBytes(mode,outbuf,offset,MODELEN);  offset=TarUtils.getOctalBytes(userId,outbuf,offset,UIDLEN);  offset=TarUtils.getOctalBytes(groupId,outbuf,offset,GIDLEN);  offset=TarUtils.getLongOctalBytes(size,outbuf,offset,SIZELEN);  offset=TarUtils.getLongOctalBytes(modTime,outbuf,offset,MODTIMELEN);  int csOffset=offset;  for (int c=0; c < CHKSUMLEN; ++c) {    outbuf[offset++]=(byte)' ';  }  outbuf[offset++]=linkFlag;  offset=TarUtils.getNameBytes(linkName,outbuf,offset,NAMELEN);  offset=TarUtils.getNameBytes(magic,outbuf,offset,MAGICLEN);  offset=TarUtils.getNameBytes(userName,outbuf,offset,UNAMELEN);  offset=TarUtils.getNameBytes(groupName,outbuf,offset,GNAMELEN);  offset=TarUtils.getOctalBytes(devMajor,outbuf,offset,DEVLEN);  offset=TarUtils.getOctalBytes(devMinor,outbuf,offset,DEVLEN);  while (offset < outbuf.length) {    outbuf[offset++]=0;  }  long chk=TarUtils.computeCheckSum(outbuf);  TarUtils.getCheckSumOctalBytes(chk,outbuf,csOffset,CHKSUMLEN);}  }
class C{  public static void showAboutWindow(){  new AboutWindow().showDialog();}  }
class C{  public Cell<?> applySpacing(final Cell<?> cell){  cell.space(top,left,bottom,right);  return cell;}  }
class C{  public static PlayerBucketEmptyEvent callPlayerBucketEmptyEvent(net.minecraft.entity.player.EntityPlayer who,int clickedX,int clickedY,int clickedZ,int clickedFace,net.minecraft.item.ItemStack itemInHand){  return (PlayerBucketEmptyEvent)getPlayerBucketEvent(false,who,clickedX,clickedY,clickedZ,clickedFace,itemInHand,net.minecraft.init.Items.bucket);}  }
class C{  public FileLinesList(final CharSequence filename,final String encoding,final int bufferSize) throws IOException {  this(filename,encoding,bufferSize,FastBufferedInputStream.ALL_TERMINATORS);}  }
class C{  protected TabDelegate createTabDelegate(boolean incognito){  return new TabDelegate(incognito);}  }
class C{  public static Command createForcePuppetAgentCommand(NodeConfig node) throws AgentException {  return createCommand(getForcePuppetAgentCommand(),node);}  }
class C{  public static Iterable<TextRange> excludeRanges(@NotNull TextRange original,@NotNull List<TextRange> excludedRanges){  if (!excludedRanges.isEmpty()) {    List<TextRange> enabledRanges=new ArrayList<TextRange>();    if (excludedRanges.size() > 1) {      Collections.sort(excludedRanges,RANGE_COMPARATOR);    }    int enabledRangeStart=original.getStartOffset();    for (    TextRange excludedRange : excludedRanges) {      if (excludedRange.getEndOffset() < enabledRangeStart)       continue;      int excludedRangeStart=excludedRange.getStartOffset();      if (excludedRangeStart > original.getEndOffset())       break;      if (excludedRangeStart > enabledRangeStart) {        enabledRanges.add(new TextRange(enabledRangeStart,excludedRangeStart));      }      enabledRangeStart=excludedRange.getEndOffset();    }    if (enabledRangeStart < original.getEndOffset()) {      enabledRanges.add(new TextRange(enabledRangeStart,original.getEndOffset()));    }    return enabledRanges;  }  return Arrays.asList(original);}  }
class C{  @Override public synchronized String format(LogRecord record){  StringBuffer sb=new StringBuffer();  String[] array=parseLogRecord(record);  String type=array[0];  String text=array[1];  addTimeStamp(record,sb);  addClassName(record,sb);  addTypeName(record,sb,type);  addMethodName(record,sb);  addText(record,sb,text);  addThrown(record,sb);  return sb.toString();}  }
class C{  private void doAcquireInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  boolean nothingToVerify(){  return (anyToVerify == false);}  }
class C{  public boolean appliesChunk(int cx,int cz){  return true;}  }
class C{  @Override public void initialize() throws ReplicatorException, InterruptedException {  if (createCatalog) {    logger.info("Initializing data source tables: service=" + serviceName + " schema="+ connectionSpec.getSchema());    Database conn=null;    try {      if (this.connectionSpec.supportsCreateDB()) {        if (checkDBConnectivity(false,true)) {          logger.info("Confirmed DBMS connection");        } else {          logger.info("Attempting to create schema via JDBC");          checkDBConnectivity(true,false);        }      } else {        checkDBConnectivity(false,false);        logger.info("Confirmed DBMS connection");      }      conn=connectionManager.getCatalogConnection();      String schema=connectionSpec.getSchema();      if (conn.supportsUseDefaultSchema() && schema != null) {        if (conn.supportsCreateDropSchema()) {          conn.createSchema(schema);        }        conn.useDefaultSchema(schema);      }      commitSeqno.initialize();      Table consistency=ConsistencyTable.getConsistencyTableDefinition(schema);      if (conn.findTable(consistency.getSchema(),consistency.getName()) == null) {        conn.createTable(consistency,false,connectionSpec.getTableType());      }      HeartbeatTable heartbeatTable=new HeartbeatTable(schema,connectionSpec.getTableType(),serviceName);      heartbeatTable.initializeHeartbeatTable(conn);      heartbeatTable.initializeHeartbeatStageTable(conn);      ShardTable shardTable=new ShardTable(schema,connectionSpec.getTableType());      shardTable.initializeShardTable(conn);      channelTable=new ShardChannelTable(schema,connectionSpec.getTableType());      channelTable.initializeShardTable(conn,this.channels);    } catch (    SQLException e) {      throw new ReplicatorException("Unable to create catalog tables",e);    } finally {      if (conn != null) {        connectionManager.releaseCatalogConnection(conn);      }    }  }}  }
class C{  public void connectionLost(MqttException cause){  final String methodName="connectionLost";  try {    if (mqttCallback != null && cause != null) {      log.fine(CLASS_NAME,methodName,"708",new Object[]{cause});      mqttCallback.connectionLost(cause);    }    if (reconnectInternalCallback != null && cause != null) {      reconnectInternalCallback.connectionLost(cause);    }  } catch (  java.lang.Throwable t) {    log.fine(CLASS_NAME,methodName,"720",new Object[]{t});  }}  }
class C{  public boolean isText(){  return (this == TEXT);}  }
class C{  public ObjectMatrix1D make(int size){  if (this == sparse)   return new SparseObjectMatrix1D(size);  return new DenseObjectMatrix1D(size);}  }
class C{  public void close() throws IOException {  if (closed) {    return;  }  closed=true;  try {    obuffer=cipher.doFinal();  } catch (  IllegalBlockSizeException|BadPaddingException e) {    obuffer=null;  }  try {    flush();  } catch (  IOException ignored) {  }  out.close();}  }
class C{  public static void gradient(MultivariateFunction f,double[] x,double[] grad){  for (int i=0; i < f.getNumArguments(); i++) {    double h=MachineAccuracy.SQRT_EPSILON * (Math.abs(x[i]) + 1.0);    double oldx=x[i];    x[i]=oldx + h;    double fxplus=f.evaluate(x);    x[i]=oldx - h;    double fxminus=f.evaluate(x);    x[i]=oldx;    grad[i]=(fxplus - fxminus) / (2.0 * h);  }}  }
class C{  public boolean isDeclaredN4JS(){  return declaredN4JS;}  }
class C{  public void close() throws IOException {  writer.close();}  }
class C{  public boolean isProvisioningAcceptButton(){  return readBoolean(RcsSettingsData.PROV_ACCEPT_BUTTON);}  }
class C{  public long generateWanId(long threadId,long offset,int gatewayIndex){  assert this != RESERVED;  return Bits.WAN_TYPE.shift(ordinal()) | Bits.WAN.shift(offset) | Bits.GATEWAY_ID.shift(gatewayIndex)| threadId;}  }
class C{  @LargeTest public void testStressAddRemoveVideoItem() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String videoItemFileName1=INPUT_FILE_PATH + "H264_BP_176x144_15fps_144kbps_AMRNB_8kHz_12.2kbps_m_1_17.3gp";  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";  final String videoItemFileName3=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_128kbps_1_35.3gp";  final String videoItemFileName4=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";  final String[] loggingInfo=new String[1];  writeTestCaseHeader("testStressAddRemoveVideoItem");  int i=0;  getBeginMemory();  for (i=0; i < 50; i++) {    if (i % 4 == 0) {      final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,videoItemFileName1,renderingMode);      mediaItem1.setExtractBoundaries(0,5000);      mVideoEditor.addMediaItem(mediaItem1);    }    if (i % 4 == 1) {      final MediaVideoItem mediaItem2=new MediaVideoItem(mVideoEditor,"m2" + i,videoItemFileName2,renderingMode);      mediaItem2.setExtractBoundaries(0,10000);      mVideoEditor.addMediaItem(mediaItem2);    }    if (i % 4 == 2) {      final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3" + i,videoItemFileName3,renderingMode);      mediaItem3.setExtractBoundaries(30000,45000);      mVideoEditor.addMediaItem(mediaItem3);    }    if (i % 4 == 3) {      final MediaVideoItem mediaItem4=new MediaVideoItem(mVideoEditor,"m4" + i,videoItemFileName4,renderingMode);      mediaItem4.setExtractBoundaries(10000,30000);      mVideoEditor.addMediaItem(mediaItem4);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);  for (i=0; i < 50; i++) {    if (i % 4 == 0) {      mVideoEditor.removeMediaItem("m1" + i);    }    if (i % 4 == 1) {      mVideoEditor.removeMediaItem("m2" + i);    }    if (i % 4 == 2) {      mVideoEditor.removeMediaItem("m3" + i);    }    if (i % 4 == 3) {      mVideoEditor.removeMediaItem("m4" + i);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,true,i);    }  }  getAfterMemory_updateLog(loggingInfo,true,i);}  }
class C{  public Boolean isInRelationService(){  return myInRelServFlg.get();}  }
class C{  private static Map<URI,Set<StoragePort>> generateNetworkToStoragePortsMap(Map<Initiator,List<StoragePort>> existingAssignments,Map<URI,Set<Initiator>> existingInitiatorsMap){  Map<URI,Set<StoragePort>> network2StoragePortsMap=new HashMap<URI,Set<StoragePort>>();  if (existingAssignments == null) {    return network2StoragePortsMap;  }  for (  Entry<URI,Set<Initiator>> networkInitiators : existingInitiatorsMap.entrySet()) {    network2StoragePortsMap.put(networkInitiators.getKey(),new HashSet<StoragePort>());    for (    Initiator initiator : networkInitiators.getValue()) {      List<StoragePort> ports=existingAssignments.get(initiator);      for (      StoragePort port : ports) {        if (port.getRegistrationStatus().toString().equals(DiscoveredDataObject.RegistrationStatus.REGISTERED.name()) && port.getCompatibilityStatus().toString().equals(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name()) && port.getDiscoveryStatus().toString().equals(DiscoveryStatus.VISIBLE.name())) {          network2StoragePortsMap.get(networkInitiators.getKey()).add(port);        }      }    }  }  return network2StoragePortsMap;}  }
class C{  public static void throwAtomikosJMSException(String msg) throws AtomikosJMSException {  throwAtomikosJMSException(msg,null);}  }
class C{  public boolean isIntersection(Coordinate pt){  for (Iterator it=iterator(); it.hasNext(); ) {    EdgeIntersection ei=(EdgeIntersection)it.next();    if (ei.coord.equals(pt))     return true;  }  return false;}  }
class C{  @POST @Path("run/{noteId}/{paragraphId}") @ZeppelinApi public Response runParagraphSynchronously(@PathParam("noteId") String noteId,@PathParam("paragraphId") String paragraphId,String message) throws IOException, IllegalArgumentException {  LOG.info("run paragraph synchronously {} {} {}",noteId,paragraphId,message);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse<>(Status.NOT_FOUND,"note not found.").build();  }  Paragraph paragraph=note.getParagraph(paragraphId);  if (paragraph == null) {    return new JsonResponse<>(Status.NOT_FOUND,"paragraph not found.").build();  }  handleParagraphParams(message,note,paragraph);  if (paragraph.getListener() == null) {    note.initializeJobListenerForParagraph(paragraph);  }  paragraph.run();  final InterpreterResult result=paragraph.getResult();  if (result.code() == InterpreterResult.Code.SUCCESS) {    return new JsonResponse<>(Status.OK,result).build();  } else {    return new JsonResponse<>(Status.INTERNAL_SERVER_ERROR,result).build();  }}  }
class C{  public void configure(){  SerialTrafficController.instance().connectPort(this);  jmri.InstanceManager.setTurnoutManager(jmri.jmrix.oaktree.SerialTurnoutManager.instance());  jmri.InstanceManager.setLightManager(jmri.jmrix.oaktree.SerialLightManager.instance());  SerialSensorManager s;  jmri.InstanceManager.setSensorManager(s=jmri.jmrix.oaktree.SerialSensorManager.instance());  SerialTrafficController.instance().setSensorManager(s);  jmri.jmrix.oaktree.ActiveFlag.setActive();}  }
class C{  public boolean breakableLine(int line){  return (line < this.breakableLines.length) && this.breakableLines[line];}  }
class C{  protected Message(){}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  public static List<WebElement> findElementsPresentAfter(SearchContext parent,By by,int waitInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  findElementPresentAfter(parent,by,waitInSeconds);  return parent.findElements(by);}  }
class C{  public static PathPoint lineTo(float x,float y){  return new PathPoint(LINE,x,y);}  }
class C{  public final double tanHalfAngle(){  return Math.tan(0.5 * this.radians);}  }
class C{  final Type internalGetReturnType(){  supportedOnlyIn2();  if (this.returnType == null) {synchronized (this) {      if (this.returnType == null) {        preLazyInit();        this.returnType=this.ast.newPrimitiveType(PrimitiveType.VOID);        postLazyInit(this.returnType,RETURN_TYPE_PROPERTY);      }    }  }  return this.returnType;}  }
class C{  public DataSet sort(Closure sort){  return new DataSet(this,null,sort);}  }
class C{  static boolean isWhiteSpace(StringBuffer buf){  int n=buf.length();  for (int i=0; i < n; i++) {    if (!isWhiteSpace(buf.charAt(i)))     return false;  }  return true;}  }
class C{  protected RemoteServer(RemoteRef ref){  super(ref);}  }
class C{  public static long generate(long crc,byte[] buffer,int offset,int len){  final long[] crcTable=CRC_TABLE;  for (int i=0; i < len; i++) {    final int index=((int)crc ^ buffer[offset + i]) & 0xff;    crc=(crc >>> 8) ^ crcTable[index];  }  return crc;}  }
class C{  private FSManager(){  String delQueueProp=Sage.get(DELETE_QUEUE_PROP,"");  if (delQueueProp.length() > 0) {    java.util.Set delSet=Sage.parseDelimSet(delQueueProp,";");    java.util.Iterator walker=delSet.iterator();    while (walker.hasNext()) {      java.io.File newF=new java.io.File(walker.next().toString());      Seeker.getInstance().addIgnoreFile(newF);    }  }  if (Sage.EMBEDDED && Sage.LINUX_OS) {    String hddProp=Sage.get("linux/installed_hdd","");    if (hddProp != null && hddProp.length() > 0) {      if (Sage.DBG)       System.out.println("Found HDD property: " + hddProp);      if (new java.io.File(hddProp).exists()) {        if (IOUtils.mountExternalDrive(hddProp.substring(5),SageTV.LINUX_ROOT_MEDIA_PATH)) {          if (Sage.DBG)           System.out.println("Sucessfully mounted the HDD! (or it's already mounted)");          localHDD=new java.io.File(SageTV.LINUX_ROOT_MEDIA_PATH);        } else {          if (Sage.DBG)           System.out.println("FAILED mounting the HDD; clear the property!");          Sage.put("linux/installed_hdd","");        }      } else {        if (Sage.DBG)         System.out.println("HDD device does not exist; clear the property");        Sage.put("linux/installed_hdd","");      }    }  }}  }
class C{  private int rotateWordLeft(int x,int y){  x&=0xffff;  return (x << y) | (x >> (16 - y));}  }
class C{  public BindingElement createBindingElement(){  BindingElementImpl bindingElement=new BindingElementImpl();  return bindingElement;}  }
class C{  public QName isMultiNameResolved(MultiName multiName){  return multiNames.get(multiName);}  }
class C{  private void emitSSE41Compare(CompilationResultBuilder crb,AMD64MacroAssembler masm,Register result,Register array1,Register array2,Register length,Label trueLabel,Label falseLabel){  assert supportsSSE41(crb.target);  Register vector1=asRegister(vectorTemp1,AMD64Kind.DOUBLE);  Register vector2=asRegister(vectorTemp2,AMD64Kind.DOUBLE);  Label loop=new Label();  Label compareTail=new Label();  masm.andl(result,SSE4_1_VECTOR_SIZE - 1);  masm.andl(length,~(SSE4_1_VECTOR_SIZE - 1));  masm.jccb(ConditionFlag.Zero,compareTail);  masm.leaq(array1,new AMD64Address(array1,length,Scale.Times1,0));  masm.leaq(array2,new AMD64Address(array2,length,Scale.Times1,0));  masm.negq(length);  masm.align(crb.target.wordSize * 2);  masm.bind(loop);  masm.movdqu(vector1,new AMD64Address(array1,length,Scale.Times1,0));  masm.movdqu(vector2,new AMD64Address(array2,length,Scale.Times1,0));  masm.pxor(vector1,vector2);  masm.ptest(vector1,vector1);  masm.jcc(ConditionFlag.NotZero,falseLabel);  masm.addq(length,SSE4_1_VECTOR_SIZE);  masm.jcc(ConditionFlag.NotZero,loop);  masm.testl(result,result);  masm.jcc(ConditionFlag.Zero,trueLabel);  masm.movdqu(vector1,new AMD64Address(array1,result,Scale.Times1,-SSE4_1_VECTOR_SIZE));  masm.movdqu(vector2,new AMD64Address(array2,result,Scale.Times1,-SSE4_1_VECTOR_SIZE));  masm.pxor(vector1,vector2);  masm.ptest(vector1,vector1);  masm.jcc(ConditionFlag.NotZero,falseLabel);  masm.jmp(trueLabel);  masm.bind(compareTail);  masm.movl(length,result);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.051 -0500",hash_original_method="50B0D0B78D385E8C0BEE924F86CB84EC",hash_generated_method="38419D10162DE19B56D626859AF70FC1") private StreamItems(){}  }
class C{  public NotificationChain basicSetConfiguration(Configuration newConfiguration,NotificationChain msgs){  Configuration oldConfiguration=configuration;  configuration=newConfiguration;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,FunctionblockPackage.FUNCTION_BLOCK__CONFIGURATION,oldConfiguration,newConfiguration);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public LdapMessage(){}  }
class C{  public URL(String protocol,String host,int port,String file) throws MalformedURLException {  this(protocol,host,port,file,null);}  }
class C{  public void put(long key,long value){  lookup(key).setValue(value);}  }
class C{  private void loadMissingCertificates(TSLParserResult tslParserResult){  if ("ES".equals(tslParserResult.getTerritory())) {    List<TSLServiceProvider> serviceProviders=tslParserResult.getServiceProviders();    if (CollectionUtils.isNotEmpty(serviceProviders)) {      for (      TSLServiceProvider tslServiceProvider : serviceProviders) {        List<TSLService> services=tslServiceProvider.getServices();        if (CollectionUtils.isNotEmpty(services)) {          for (          TSLService tslService : services) {            List<String> certificateUrls=tslService.getCertificateUrls();            if (CollectionUtils.isNotEmpty(certificateUrls)) {              for (              String url : certificateUrls) {                try {                  byte[] byteArray=dataLoader.get(url);                  CertificateToken certificate=DSSUtils.loadCertificate(byteArray);                  if (certificate != null) {                    tslService.getCertificates().add(certificate);                  }                } catch (                Exception e) {                  logger.warn("Cannot load certificate from url '" + url + "' : "+ e.getMessage());                }              }            }          }        }      }    }  }}  }
class C{  @Override protected void persist(Collection<RawProtein<ProSitePatternRawMatch>> filteredProteins,Map<String,Signature> modelAccessionToSignatureMap,Map<String,Protein> proteinIdToProteinMap){  for (  RawProtein<ProSitePatternRawMatch> rawProtein : filteredProteins) {    final Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());    for (    ProSitePatternRawMatch rawMatch : rawProtein.getMatches()) {      Signature signature=modelAccessionToSignatureMap.get(rawMatch.getModelId());      PatternScanMatch match=buildMatch(signature,rawMatch);      protein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  public static TimeOfDay createTimeOfDay(String timeString) throws NumberFormatException, InstantiationException, IllegalAccessException {  TimeOfDay time=TimeOfDay.class.newInstance().setHours(Integer.parseInt(timeString.split(":")[0],BASE_10)).setMinutes(Integer.parseInt(timeString.split(":")[1],BASE_10)).setSeconds(Integer.parseInt(timeString.split(":")[2],BASE_10));  return time;}  }
class C{  public boolean isMouseResizeZone(){  return sizeWest || sizeEast || sizeNorth|| sizeSouth;}  }
class C{  public void endVisit(TypeDeclarationStatement node){}  }
class C{  private float calculateChallengePaceFromProgress(int progress){  return CHALLENGE_PACE_MIN_MINUTES_PER_MILE + ((1.0f - ((float)progress) / CHALLENGE_PACE_SEEK_BAR_MAX) * CHALLENGE_PACE_RANGE_MINUTES_PER_MILE);}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public boolean deleteTranslation(PO po){  if (!isActiveLanguages(false))   return true;  if (po.get_IDOld() == 0)   throw new IllegalArgumentException("PO Old ID is 0");  StringBuffer sb=new StringBuffer("DELETE  FROM  ");  sb.append(m_trlTableName).append(" WHERE ").append(m_baseTableName).append("_ID=").append(po.get_IDOld());  int no=DB.executeUpdate(sb.toString(),po.get_TrxName());  log.fine(m_trlTableName + ": ID=" + po.get_IDOld()+ " #"+ no);  return no != 0;}  }
class C{  public CharSequenceFilter addMatchesPattern(String regularExpression,int flags){  mCachedToString=null;  mMatchesPattern.add(Pattern.compile(regularExpression,flags));  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  Element newElem;  Document ownerDocDoc;  Document ownerDocElem;  DOMImplementation domImpl;  DocumentType docType;  String nullNS=null;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("mydoc",nullNS,nullNS);  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","mydoc",docType);  ownerDocDoc=newDoc.getOwnerDocument();  assertNull("nodegetownerdocument02_1",ownerDocDoc);  newElem=newDoc.createElementNS("http://www.w3.org/DOM/Test","myelem");  ownerDocElem=newElem.getOwnerDocument();  assertNotNull("nodegetownerdocument02_2",ownerDocElem);}  }
class C{  public static void connectViewsFunctions(final CConnection connection,final int moduleId,final int firstViewId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00453: connection argument can not be null");  final String query=" { call connect_views_to_functions(?,?) } ";  final CallableStatement call=connection.getConnection().prepareCall(query);  call.setInt(1,moduleId);  call.setInt(2,firstViewId);  call.execute();}  }
class C{  private Iterator<CustomerBean> iterator(){  List<CustomerBean> list=getCustomers();  if (list != null) {    return (list.iterator());  } else {    return (null);  }}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public void load(int offset,int width,long value){  for (int x=0; x < width; x++) {    long mask=Long.rotateLeft(1,width - x - 1);    if ((mask & value) == mask) {      set(offset + x);    } else {      clear(offset + x);    }  }}  }
class C{  public Sin(){  super(Number.class,Number.class);}  }
class C{  protected void _writeLn(String s) throws IOException {  _write(s);  if (_prettyPrint) {    _write(LINE_SEPARATOR);  }}  }
class C{  private static PduPart findSmilPart(PduBody body){  int partNum=body.getPartsNum();  for (int i=0; i < partNum; i++) {    PduPart part=body.getPart(i);    if (Arrays.equals(part.getContentType(),ContentType.APP_SMIL.getBytes())) {      return part;    }  }  return null;}  }
class C{  public ChildMemoryCircuitBreaker(BreakerSettings settings,ChildMemoryCircuitBreaker oldBreaker,ESLogger logger,HierarchyCircuitBreakerService parent,String name){  this.name=name;  this.settings=settings;  this.memoryBytesLimit=settings.getLimit();  this.overheadConstant=settings.getOverhead();  if (oldBreaker == null) {    this.used=new AtomicLong(0);    this.trippedCount=new AtomicLong(0);  } else {    this.used=oldBreaker.used;    this.trippedCount=oldBreaker.trippedCount;  }  this.logger=logger;  if (logger.isTraceEnabled()) {    logger.trace("creating ChildCircuitBreaker with settings {}",this.settings);  }  this.parent=parent;}  }
class C{  public static IEntity createEntity(final RPObject object){  try {    final String type=object.getRPClass().getName();    if (type.equals("player") && object.has("name")) {      if (StendhalClient.get().getCharacter().equalsIgnoreCase(object.get("name"))) {        final User me=new User();        me.initialize(object);        EventDispatcher.dispatchEvents(object,me);        return me;      }    }    String eclass=null;    if (object.has("class")) {      eclass=object.get("class");    }    String subClass=null;    if (object.has("subclass")) {      subClass=object.get("subclass");    }    final Class<? extends IEntity> entityClass=EntityMap.getClass(type,eclass,subClass);    if (entityClass == null) {      return null;    }    final IEntity en=entityClass.newInstance();    en.initialize(object);    if (en instanceof Entity) {      EventDispatcher.dispatchEvents(object,(Entity)en);    }    return en;  } catch (  final Exception e) {    logger.error("Error creating entity for object: " + object,e);    return null;  }}  }
class C{  public final boolean pop(){  return m_values[m_index--];}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public static JBBPParser prepare(final String script){  return JBBPParser.prepare(script,JBBPBitOrder.LSB0);}  }
class C{  public boolean save(String path){  boolean success=false;  loadPixels();  try {    OutputStream output=new BufferedOutputStream(parent.createOutput(path),16 * 1024);    String lower=path.toLowerCase();    String extension=lower.substring(lower.lastIndexOf('.') + 1);    if (extension.equals("jpg") || extension.equals("jpeg")) {      Bitmap outgoing=Bitmap.createBitmap(pixels,width,height,Config.ARGB_8888);      success=outgoing.compress(CompressFormat.JPEG,100,output);    } else     if (extension.equals("png")) {      Bitmap outgoing=Bitmap.createBitmap(pixels,width,height,Config.ARGB_8888);      success=outgoing.compress(CompressFormat.PNG,100,output);    } else     if (extension.equals("tga")) {      success=saveTGA(output);    } else {      if (!extension.equals("tif") && !extension.equals("tiff")) {        path+=".tif";      }      success=saveTIFF(output);    }    output.flush();    output.close();  } catch (  IOException e) {    e.printStackTrace();  }  if (!success) {    System.err.println("Could not write the image to " + path);  }  return success;}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return true;}  }
class C{  private ServerSocketChannelIterator(Collection<SelectionKey> selectedKeys){  iterator=selectedKeys.iterator();}  }
class C{  private void buildGetBusinessObjectDataResponse(MockCloseableHttpResponse response,URI uri) throws JAXBException {  Pattern pattern=Pattern.compile("/herd-app/rest/businessObjectData/namespaces/(.*)/businessObjectDefinitionNames/(.*)/businessObjectFormatUsages/(.*)" + "/businessObjectFormatFileTypes/(.*).*");  Matcher matcher=pattern.matcher(uri.getPath());  if (matcher.find()) {    BusinessObjectData businessObjectData=new BusinessObjectData();    businessObjectData.setNamespace(matcher.group(1));    businessObjectData.setBusinessObjectDefinitionName(matcher.group(2));    businessObjectData.setBusinessObjectFormatUsage(matcher.group(3));    businessObjectData.setBusinessObjectFormatFileType(matcher.group(4));    businessObjectData.setPartitionValue("2014-01-31");    businessObjectData.setPartitionKey("PROCESS_DATE");    businessObjectData.setAttributes(new ArrayList<Attribute>());    businessObjectData.setBusinessObjectFormatVersion(0);    businessObjectData.setLatestVersion(true);    businessObjectData.setStatus(BusinessObjectDataStatusEntity.VALID);    List<StorageUnit> storageUnits=new ArrayList<>();    businessObjectData.setStorageUnits(storageUnits);    StorageUnit storageUnit=new StorageUnit();    storageUnits.add(storageUnit);    storageUnit.setStorage(getNewStorage(StorageEntity.MANAGED_STORAGE));    List<StorageFile> storageFiles=new ArrayList<>();    storageUnit.setStorageFiles(storageFiles);    storageUnit.setStorageUnitStatus(StorageUnitStatusEntity.ENABLED);    List<String> localFiles=Arrays.asList("foo1.dat","Foo2.dat","FOO3.DAT","folder/foo3.dat","folder/foo2.dat","folder/foo1.dat");    for (    String filename : localFiles) {      StorageFile storageFile=new StorageFile();      storageFiles.add(storageFile);      storageFile.setFilePath(businessObjectData.getNamespace().toLowerCase().replace('_','-') + "/exchange-a/" + businessObjectData.getBusinessObjectFormatUsage().toLowerCase().replace('_','-')+ "/"+ businessObjectData.getBusinessObjectFormatFileType().toLowerCase().replace('_','-')+ "/"+ businessObjectData.getBusinessObjectDefinitionName().toLowerCase().replace('_','-')+ "/frmt-v"+ businessObjectData.getBusinessObjectFormatVersion()+ "/data-v"+ businessObjectData.getVersion()+ "/"+ businessObjectData.getPartitionKey().toLowerCase().replace('_','-')+ "="+ businessObjectData.getPartitionValue()+ "/"+ filename);      storageFile.setFileSizeBytes(1024L);      storageFile.setRowCount(10L);    }    businessObjectData.setSubPartitionValues(new ArrayList<String>());    businessObjectData.setId(1234);    businessObjectData.setVersion(0);    response.setEntity(getHttpEntity(businessObjectData));  }}  }
class C{  public final int put(Object key,int value,boolean isReplace){  int prime=_prime;  int hash=hashCode(key) % prime;  Object[] keys=_keys;  while (true) {    Object testKey=keys[hash];    if (testKey == null) {      keys[hash]=key;      _values[hash]=value;      _size++;      if (keys.length <= 4 * _size)       resize(4 * keys.length);      return NULL;    } else     if (key != testKey) {      hash=(hash + 1) % prime;      continue;    } else     if (isReplace) {      int old=_values[hash];      _values[hash]=value;      return old;    } else {      return _values[hash];    }  }}  }
class C{  private static boolean isDefaultToPortrait(Context context){  Display currentDisplay=AndroidServices.instance().provideWindowManager().getDefaultDisplay();  Point displaySize=new Point();  currentDisplay.getSize(displaySize);  int orientation=currentDisplay.getRotation();  int naturalWidth, naturalHeight;  if (orientation == Surface.ROTATION_0 || orientation == Surface.ROTATION_180) {    naturalWidth=displaySize.x;    naturalHeight=displaySize.y;  } else {    naturalWidth=displaySize.y;    naturalHeight=displaySize.x;  }  return naturalWidth < naturalHeight;}  }
class C{  private void flushStartTag() throws SAXException {  if (startTagInProgress) {    final String tagName=elementStack.get(0);    contentHandler.startElement("",tagName,tagName,attributeList);    attributeList.clear();    startTagInProgress=false;  }}  }
class C{  public static SemOptimizerRicf serializableInstance(){  return new SemOptimizerRicf();}  }
class C{  public void requestAllContactsCapabilities() throws RemoteException {  ServerApiUtils.testIms();  mCapabilityService.scheduleCapabilityOperation(new AllCapabilitiesRequester());}  }
class C{  @LargeTest public void testDownloadToProhibitedDirectory() throws Exception {  File downloadedFile=new File(PROHIBITED_DIRECTORY,DEFAULT_FILENAME);  try {    byte[] blobData=generateData(DEFAULT_FILE_SIZE,DataType.TEXT);    enqueueResponse(buildResponse(HTTP_OK,blobData));    Uri uri=getServerUri(DEFAULT_FILENAME);    Request request=new Request(uri);    Uri localUri=Uri.fromFile(downloadedFile);    request.setDestinationUri(localUri);    try {      mDownloadManager.enqueue(request);      fail("Failed to throw SecurityException when trying to write to /system.");    } catch (    SecurityException s) {      assertFalse(downloadedFile.exists());    }  }  finally {    downloadedFile.delete();  }}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public synchronized boolean inInitialPhase(CourseComponent component){  if (component != mainComponent && component != nextComponent && component != prevComponent)   return false;  return runnableCourseComponentWeakList.size() > 0;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void print(Object o){  println(o,false);}  }
class C{  public void clearContent(){  modelMap.clear();  filteredModelMap.clear();  filterNameString="";  filterNameStringLowerCase="";}  }
class C{  private Map parseObject(JsonLexer lexer){  Map content=new HashMap();  JsonToken previousToken=null;  JsonToken currentToken=null;  for (; ; ) {    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected a String key on line: " + lexer.getReader().getLine() + ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated object.");    }    if (currentToken.getType() == CLOSE_CURLY) {      return content;    } else     if (currentToken.getType() != STRING) {      throw new JsonException("Expected " + STRING.getLabel() + " key "+ "on line: "+ currentToken.getStartLine()+ ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }    String mapKey=(String)currentToken.getValue();    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected a " + COLON.getLabel() + " "+ "on line: "+ lexer.getReader().getLine()+ ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated object.");    }    if (currentToken.getType() != COLON) {      throw new JsonException("Expected " + COLON.getLabel() + " "+ "on line: "+ currentToken.getStartLine()+ ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected a value " + "on line: " + lexer.getReader().getLine() + ", "+ "column: "+ lexer.getReader().getColumn()+ ".\n"+ "But got an unterminated object.");    }    if (currentToken.getType() == OPEN_CURLY) {      content.put(mapKey,parseObject(lexer));    } else     if (currentToken.getType() == OPEN_BRACKET) {      content.put(mapKey,parseArray(lexer));    } else     if (currentToken.getType().ordinal() >= NULL.ordinal()) {      content.put(mapKey,currentToken.getValue());    } else {      throw new JsonException("Expected a value, an array, or an object " + "on line: " + currentToken.getStartLine() + ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }    previousToken=currentToken;    currentToken=lexer.nextToken();    if (currentToken == null) {      throw new JsonException("Expected " + CLOSE_CURLY.getLabel() + " or "+ COMMA.getLabel()+ " "+ "on line: "+ previousToken.getEndLine()+ ", "+ "column: "+ previousToken.getEndColumn()+ ".\n"+ "But got an unterminated object.");    }    if (currentToken.getType() == CLOSE_CURLY) {      break;    } else     if (currentToken.getType() != COMMA) {      throw new JsonException("Expected a value or " + CLOSE_CURLY.getLabel() + " "+ "on line: "+ currentToken.getStartLine()+ ", "+ "column: "+ currentToken.getStartColumn()+ ".\n"+ "But got '"+ currentToken.getText()+ "' instead.");    }  }  return content;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.364 -0500",hash_original_method="2A27A75937E4BE02DA5FD7B031C4079A",hash_generated_method="23BC72FFEAC2A16A0D3A8E2F49EBED8E") public void reset(){  contexts=new Context[32];  namespaceDeclUris=false;  contextPos=0;  contexts[contextPos]=currentContext=new Context();  currentContext.declarePrefix("xml",XMLNS);}  }
class C{  public void stopJumping(){  for (  JumpingBeansSpan bean : jumpingBeans) {    if (bean != null) {      bean.teardown();    }  }  TextView tv=textView.get();  if (tv != null) {    CharSequence text=tv.getText();    if (text instanceof Spanned) {      CharSequence cleanText=removeJumpingBeansSpans((Spanned)text);      tv.setText(cleanText);    }  }}  }
class C{  public ChampionCursor(Cursor cursor){  super(cursor);}  }
class C{  @Override public void onCreate(){  super.onCreate();  this.binder=new IPushMessageImpl();}  }
class C{  private int indexOfWordPrefix(final CharSequence text,final char[] prefix){  if (TextUtils.isEmpty(text) || prefix == null) {    return -1;  }  final int mTextLength=text.length();  final int mPrefixLength=prefix.length;  if (mPrefixLength == 0 || mTextLength < mPrefixLength) {    return -1;  }  int i=0;  while (i < mTextLength) {    while (i < mTextLength && !Character.isLetterOrDigit(text.charAt(i))) {      i++;    }    if (i + mPrefixLength > mTextLength) {      return -1;    }    int j;    for (j=0; j < mPrefixLength; j++) {      if (Character.toUpperCase(text.charAt(i + j)) != prefix[j]) {        break;      }    }    if (j == mPrefixLength) {      return i;    }    while (i < mTextLength && Character.isLetterOrDigit(text.charAt(i))) {      i++;    }  }  return -1;}  }
class C{  public void selectParameters(List<Parameter> params){  for (  PartitionPattern partitionData : options.getPartitionPattern()) {    getParameter(partitionData.getName() + "." + MicrosatelliteSamplerTreeModelParser.TREE_MICROSATELLITE_SAMPLER_MODEL+ ".internalNodesParameter");  }}  }
class C{  public UnusedParameterException(String message){  super(message);}  }
class C{  protected AbstractMRMessage pollMessage(){  if (commandOptionSet == false) {    if (log.isDebugEnabled()) {      log.debug("Command options are not valid yet!!");    }    return null;  }  NceMessage m=pollEprom.nceEpromPoll();  if (m != null) {    expectReplyEprom=true;    return m;  } else {    expectReplyEprom=false;  }  if (pollAiuStatus == null) {    pollAiuStatus=new NceAIUChecker(this);    return pollAiuStatus.nceAiuPoll();  }  if (pollHandler == null) {    pollHandler=new NceTurnoutMonitor(this);  }  mWaitBeforePoll=NceTurnoutMonitor.POLL_TIME;  return pollHandler.pollMessage();}  }
class C{  public WriteMetadataNodeToLocalIndexThread(Segment segment,Collection<URIMetadataNode> storeDocs){  super("WriteMetadataNodeToLocalIndexThread");  this.segment=segment;  this.storeDocs=storeDocs;}  }
class C{  public boolean isTuesday(){  return tuesday;}  }
class C{  public CucumberITGenerator create(final ParallelScheme parallelScheme) throws MojoExecutionException {  if (ParallelScheme.FEATURE.equals(parallelScheme)) {    return createFileGeneratorByFeature();  } else {    return createFileGeneratorByScenario();  }}  }
class C{  public BERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  public static List<SectionItemInterface> mappingAllVideoResponseModelFrom(CourseComponent courseComponent,Filter<VideoResponseModel> filter){  List<SectionItemInterface> items=new ArrayList<>();  for (  HasDownloadEntry item : courseComponent.getVideos()) {    VideoResponseModel model=mappingVideoResponseModelFrom((VideoBlockModel)item);    if (filter == null)     items.add(model); else {      if (filter.apply(model)) {        items.add(model);      }    }  }  return items;}  }
class C{  private static byte[] decode_base64(String s,int maxolen) throws IllegalArgumentException {  StringBuffer rs=new StringBuffer();  int off=0, slen=s.length(), olen=0;  byte ret[];  byte c1, c2, c3, c4, o;  if (maxolen <= 0) {    throw new IllegalArgumentException("Invalid maxolen");  }  while (off < slen - 1 && olen < maxolen) {    c1=char64(s.charAt(off++));    c2=char64(s.charAt(off++));    if (c1 == -1 || c2 == -1) {      break;    }    o=(byte)(c1 << 2);    o|=(c2 & 0x30) >> 4;    rs.append((char)o);    if (++olen >= maxolen || off >= slen) {      break;    }    c3=char64(s.charAt(off++));    if (c3 == -1) {      break;    }    o=(byte)((c2 & 0x0f) << 4);    o|=(c3 & 0x3c) >> 2;    rs.append((char)o);    if (++olen >= maxolen || off >= slen) {      break;    }    c4=char64(s.charAt(off++));    o=(byte)((c3 & 0x03) << 6);    o|=c4;    rs.append((char)o);    ++olen;  }  ret=new byte[olen];  for (off=0; off < olen; off++) {    ret[off]=(byte)rs.charAt(off);  }  return ret;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.842 -0500",hash_original_method="9DC9991C60DD393D44750907790C62ED",hash_generated_method="7F2F12718C23E6FE2A0FD5257882B9EA") protected void tearDown() throws Exception {}  }
