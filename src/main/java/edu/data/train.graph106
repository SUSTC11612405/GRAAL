class C{  public CLIOutputResponse copy(final CopyRequest request) throws IOException, SubversionException, UnauthorizedException {  if (request.getSource().startsWith("file://") || request.getDestination().startsWith("file://")) {    throw new SubversionException("Url is not acceptable");  }  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  if (!isNullOrEmpty(request.getComment())) {    addOption(cliArgs,"--message","\"" + request.getComment() + "\"");  }  cliArgs.add("copy");  final CommandLineResult result=runCommand(null,cliArgs,projectPath,Arrays.asList(request.getSource(),request.getDestination()),request.getUsername(),request.getPassword());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.374 -0500",hash_original_method="0DF13F4E9C7289EDBE516727D7987576",hash_generated_method="8ABC2977E60E6A60AEAE15751265B93E") static public void assertEquals(String message,Object expected,Object actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  failNotEquals(message,expected,actual);}  }
class C{  public static boolean isDirectory(String fileName){  return FilePath.get(fileName).isDirectory();}  }
class C{  public WolfeNWLineSearch(double c1,double c2){  setC1(c1);  setC2(c2);}  }
class C{  private void startAdvertising(){  Log.d(TAG,"Service: Starting Advertising");  if (mAdvertiseCallback == null) {    AdvertiseSettings settings=buildAdvertiseSettings();    AdvertiseData data=buildAdvertiseData();    mAdvertiseCallback=new SampleAdvertiseCallback();    if (mBluetoothLeAdvertiser != null) {      mBluetoothLeAdvertiser.startAdvertising(settings,data,mAdvertiseCallback);    }  }}  }
class C{  protected void checkOffscreenImage(Dimension d){  if (doubleBuffered) {    if (offscreen == null || offscreen.getWidth() != d.width || offscreen.getHeight() != d.height) {      offscreen=new BufferedImage(d.width,d.height,BufferedImage.TYPE_INT_ARGB);      offscreenG2d=offscreen.createGraphics();    }  }}  }
class C{  public SQLNonTransientException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public TIFFImage(SeekableStream stream,TIFFDecodeParam param,int directory) throws IOException {  this.stream=stream;  if (param == null) {    param=new TIFFDecodeParam();  }  decodePaletteAsShorts=param.getDecodePaletteAsShorts();  TIFFDirectory dir=param.getIFDOffset() == null ? new TIFFDirectory(stream,directory) : new TIFFDirectory(stream,param.getIFDOffset().longValue(),directory);  TIFFField sfield=dir.getField(TIFFImageDecoder.TIFF_SAMPLES_PER_PIXEL);  int samplesPerPixel=sfield == null ? 1 : (int)sfield.getAsLong(0);  TIFFField planarConfigurationField=dir.getField(TIFFImageDecoder.TIFF_PLANAR_CONFIGURATION);  char[] planarConfiguration=planarConfigurationField == null ? new char[]{1} : planarConfigurationField.getAsChars();  if (planarConfiguration[0] != 1 && samplesPerPixel != 1) {    throw new RuntimeException("TIFFImage0");  }  TIFFField bitsField=dir.getField(TIFFImageDecoder.TIFF_BITS_PER_SAMPLE);  char[] bitsPerSample=null;  if (bitsField != null) {    bitsPerSample=bitsField.getAsChars();  } else {    bitsPerSample=new char[]{1};    for (int i=1; i < bitsPerSample.length; i++) {      if (bitsPerSample[i] != bitsPerSample[0]) {        throw new RuntimeException("TIFFImage1");      }    }  }  sampleSize=bitsPerSample[0];  TIFFField sampleFormatField=dir.getField(TIFFImageDecoder.TIFF_SAMPLE_FORMAT);  char[] sampleFormat=null;  if (sampleFormatField != null) {    sampleFormat=sampleFormatField.getAsChars();    for (int l=1; l < sampleFormat.length; l++) {      if (sampleFormat[l] != sampleFormat[0]) {        throw new RuntimeException("TIFFImage2");      }    }  } else {    sampleFormat=new char[]{1};  }  boolean isValidDataFormat=false;switch (sampleSize) {case 1:case 4:case 8:    if (sampleFormat[0] != 3) {      dataType=DataBuffer.TYPE_BYTE;      isValidDataFormat=true;    }  break;case 16:if (sampleFormat[0] != 3) {  dataType=sampleFormat[0] == 2 ? DataBuffer.TYPE_SHORT : DataBuffer.TYPE_USHORT;  isValidDataFormat=true;}break;case 32:if (sampleFormat[0] == 3) isValidDataFormat=false; else {dataType=DataBuffer.TYPE_INT;isValidDataFormat=true;}break;}if (!isValidDataFormat) {throw new RuntimeException("TIFFImage3");}TIFFField compField=dir.getField(TIFFImageDecoder.TIFF_COMPRESSION);compression=compField == null ? COMP_NONE : compField.getAsInt(0);int photometricType=(int)dir.getFieldAsLong(TIFFImageDecoder.TIFF_PHOTOMETRIC_INTERPRETATION);imageType=TYPE_UNSUPPORTED;switch (photometricType) {case 0:isWhiteZero=true;case 1:if (sampleSize == 1 && samplesPerPixel == 1) {imageType=TYPE_BILEVEL;} else if (sampleSize == 4 && samplesPerPixel == 1) {imageType=TYPE_GRAY_4BIT;} else if (sampleSize % 8 == 0) {if (samplesPerPixel == 1) {imageType=TYPE_GRAY;} else if (samplesPerPixel == 2) {imageType=TYPE_GRAY_ALPHA;} else {imageType=TYPE_GENERIC;}}break;case 2:if (sampleSize % 8 == 0) {if (samplesPerPixel == 3) {imageType=TYPE_RGB;} else if (samplesPerPixel == 4) {imageType=TYPE_RGB_ALPHA;} else {imageType=TYPE_GENERIC;}}break;case 3:if (samplesPerPixel == 1 && (sampleSize == 4 || sampleSize == 8 || sampleSize == 16)) {imageType=TYPE_PALETTE;}break;case 4:if (sampleSize == 1 && samplesPerPixel == 1) {imageType=TYPE_BILEVEL;}break;case 6:if (compression == COMP_JPEG_TTN2 && sampleSize == 8 && samplesPerPixel == 3) {colorConvertJPEG=param.getJPEGDecompressYCbCrToRGB();imageType=colorConvertJPEG ? TYPE_RGB : TYPE_GENERIC;} else {TIFFField chromaField=dir.getField(TIFF_YCBCR_SUBSAMPLING);if (chromaField != null) {chromaSubH=chromaField.getAsInt(0);chromaSubV=chromaField.getAsInt(1);} else {chromaSubH=chromaSubV=2;}if (chromaSubH * chromaSubV == 1) {imageType=TYPE_GENERIC;} else if (sampleSize == 8 && samplesPerPixel == 3) {imageType=TYPE_YCBCR_SUB;}}break;default :if (sampleSize % 8 == 0) {imageType=TYPE_GENERIC;}}if (imageType == TYPE_UNSUPPORTED) {throw new RuntimeException("TIFFImage4");}Rectangle bounds=new Rectangle(0,0,(int)dir.getFieldAsLong(TIFFImageDecoder.TIFF_IMAGE_WIDTH),(int)dir.getFieldAsLong(TIFFImageDecoder.TIFF_IMAGE_LENGTH));numBands=samplesPerPixel;TIFFField efield=dir.getField(TIFFImageDecoder.TIFF_EXTRA_SAMPLES);int extraSamples=efield == null ? 0 : (int)efield.getAsLong(0);int tileWidth, tileHeight;if (dir.getField(TIFFImageDecoder.TIFF_TILE_OFFSETS) != null) {tiled=true;tileWidth=(int)dir.getFieldAsLong(TIFFImageDecoder.TIFF_TILE_WIDTH);tileHeight=(int)dir.getFieldAsLong(TIFFImageDecoder.TIFF_TILE_LENGTH);tileOffsets=(dir.getField(TIFFImageDecoder.TIFF_TILE_OFFSETS)).getAsLongs();tileByteCounts=getFieldAsLongs(dir.getField(TIFFImageDecoder.TIFF_TILE_BYTE_COUNTS));} else {tiled=false;tileWidth=dir.getField(TIFFImageDecoder.TIFF_TILE_WIDTH) != null ? (int)dir.getFieldAsLong(TIFFImageDecoder.TIFF_TILE_WIDTH) : bounds.width;TIFFField field=dir.getField(TIFFImageDecoder.TIFF_ROWS_PER_STRIP);if (field == null) {tileHeight=dir.getField(TIFFImageDecoder.TIFF_TILE_LENGTH) != null ? (int)dir.getFieldAsLong(TIFFImageDecoder.TIFF_TILE_LENGTH) : bounds.height;} else {long l=field.getAsLong(0);long infinity=1;infinity=(infinity << 32) - 1;if (l == infinity) {tileHeight=bounds.height;} else {tileHeight=(int)l;}}TIFFField tileOffsetsField=dir.getField(TIFFImageDecoder.TIFF_STRIP_OFFSETS);if (tileOffsetsField == null) {throw new RuntimeException("TIFFImage5");} else {tileOffsets=getFieldAsLongs(tileOffsetsField);}TIFFField tileByteCountsField=dir.getField(TIFFImageDecoder.TIFF_STRIP_BYTE_COUNTS);if (tileByteCountsField == null) {throw new RuntimeException("TIFFImage6");} else {tileByteCounts=getFieldAsLongs(tileByteCountsField);}}tilesX=(bounds.width + tileWidth - 1) / tileWidth;tilesY=(bounds.height + tileHeight - 1) / tileHeight;tileSize=tileWidth * tileHeight * numBands;isBigEndian=dir.isBigEndian();TIFFField fillOrderField=dir.getField(TIFFImageDecoder.TIFF_FILL_ORDER);if (fillOrderField != null) {fillOrder=fillOrderField.getAsInt(0);} else {fillOrder=1;}switch (compression) {case COMP_NONE:case COMP_PACKBITS:break;case COMP_DEFLATE:inflater=new Inflater();break;case COMP_FAX_G3_1D:case COMP_FAX_G3_2D:case COMP_FAX_G4_2D:if (sampleSize != 1) {throw new RuntimeException("TIFFImage7");}if (compression == 3) {TIFFField t4OptionsField=dir.getField(TIFFImageDecoder.TIFF_T4_OPTIONS);if (t4OptionsField != null) {tiffT4Options=t4OptionsField.getAsLong(0);} else {tiffT4Options=0;}}if (compression == 4) {TIFFField t6OptionsField=dir.getField(TIFFImageDecoder.TIFF_T6_OPTIONS);if (t6OptionsField != null) {tiffT6Options=t6OptionsField.getAsLong(0);} else {tiffT6Options=0;}}decoder=new TIFFFaxDecoder(fillOrder,tileWidth,tileHeight);break;case COMP_LZW:TIFFField predictorField=dir.getField(TIFFImageDecoder.TIFF_PREDICTOR);if (predictorField == null) {predictor=1;} else {predictor=predictorField.getAsInt(0);if (predictor != 1 && predictor != 2) {throw new RuntimeException("TIFFImage8");}if (predictor == 2 && sampleSize != 8) {throw new RuntimeException(sampleSize + "TIFFImage9");}}lzwDecoder=new TIFFLZWDecoder(tileWidth,predictor,samplesPerPixel);break;case COMP_JPEG_OLD:throw new RuntimeException("TIFFImage15");case COMP_JPEG_TTN2:if (!(sampleSize == 8 && ((imageType == TYPE_GRAY && samplesPerPixel == 1) || (imageType == TYPE_PALETTE && samplesPerPixel == 1) || (imageType == TYPE_RGB && samplesPerPixel == 3)))) {throw new RuntimeException("TIFFImage16");}if (dir.isTagPresent(TIFF_JPEG_TABLES)) {TIFFField jpegTableField=dir.getField(TIFF_JPEG_TABLES);byte[] jpegTable=jpegTableField.getAsBytes();ByteArrayInputStream tableStream=new ByteArrayInputStream(jpegTable);JPEGImageDecoder decoder=JPEGCodec.createJPEGDecoder(tableStream);decoder.decodeAsRaster();decodeParam=decoder.getJPEGDecodeParam();}break;default :throw new RuntimeException("TIFFImage10");}ColorModel colorModel=null;SampleModel sampleModel=null;switch (imageType) {case TYPE_BILEVEL:case TYPE_GRAY_4BIT:sampleModel=new MultiPixelPackedSampleModel(dataType,tileWidth,tileHeight,sampleSize);if (imageType == TYPE_BILEVEL) {byte[] map=new byte[]{(byte)(isWhiteZero ? 255 : 0),(byte)(isWhiteZero ? 0 : 255)};colorModel=new IndexColorModel(1,2,map,map,map);} else {byte[] map=new byte[16];if (isWhiteZero) {for (int i=0; i < map.length; i++) map[i]=(byte)(255 - (16 * i));} else {for (int i=0; i < map.length; i++) map[i]=(byte)(16 * i);}colorModel=new IndexColorModel(4,16,map,map,map);}break;case TYPE_GRAY:case TYPE_GRAY_ALPHA:case TYPE_RGB:case TYPE_RGB_ALPHA:int[] reverseOffsets=new int[numBands];for (int i=0; i < numBands; i++) {reverseOffsets[i]=numBands - 1 - i;}sampleModel=new PixelInterleavedSampleModel(dataType,tileWidth,tileHeight,numBands,numBands * tileWidth,reverseOffsets);if (imageType == TYPE_GRAY) {colorModel=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),new int[]{sampleSize},false,false,Transparency.OPAQUE,dataType);} else if (imageType == TYPE_RGB) {colorModel=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),new int[]{sampleSize,sampleSize,sampleSize},false,false,Transparency.OPAQUE,dataType);} else {int transparency=Transparency.OPAQUE;if (extraSamples == 1) {transparency=Transparency.TRANSLUCENT;} else if (extraSamples == 2) {transparency=Transparency.BITMASK;}colorModel=createAlphaComponentColorModel(dataType,numBands,extraSamples == 1,transparency);}break;case TYPE_GENERIC:case TYPE_YCBCR_SUB:int[] bandOffsets=new int[numBands];for (int i=0; i < numBands; i++) {bandOffsets[i]=i;}sampleModel=new PixelInterleavedSampleModel(dataType,tileWidth,tileHeight,numBands,numBands * tileWidth,bandOffsets);colorModel=null;break;case TYPE_PALETTE:TIFFField cfield=dir.getField(TIFFImageDecoder.TIFF_COLORMAP);if (cfield == null) {throw new RuntimeException("TIFFImage11");} else {colormap=cfield.getAsChars();}if (decodePaletteAsShorts) {numBands=3;if (dataType == DataBuffer.TYPE_BYTE) {dataType=DataBuffer.TYPE_USHORT;}sampleModel=createPixelInterleavedSampleModel(dataType,tileWidth,tileHeight,numBands);colorModel=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),new int[]{16,16,16},false,false,Transparency.OPAQUE,dataType);} else {numBands=1;if (sampleSize == 4) {sampleModel=new MultiPixelPackedSampleModel(DataBuffer.TYPE_BYTE,tileWidth,tileHeight,sampleSize);} else if (sampleSize == 8) {sampleModel=createPixelInterleavedSampleModel(DataBuffer.TYPE_BYTE,tileWidth,tileHeight,numBands);} else if (sampleSize == 16) {dataType=DataBuffer.TYPE_USHORT;sampleModel=createPixelInterleavedSampleModel(DataBuffer.TYPE_USHORT,tileWidth,tileHeight,numBands);}int bandLength=colormap.length / 3;byte[] r=new byte[bandLength];byte[] g=new byte[bandLength];byte[] b=new byte[bandLength];int gIndex=bandLength;int bIndex=bandLength * 2;if (dataType == DataBuffer.TYPE_SHORT) {for (int i=0; i < bandLength; i++) {r[i]=param.decodeSigned16BitsTo8Bits((short)colormap[i]);g[i]=param.decodeSigned16BitsTo8Bits((short)colormap[gIndex + i]);b[i]=param.decodeSigned16BitsTo8Bits((short)colormap[bIndex + i]);}} else {for (int i=0; i < bandLength; i++) {r[i]=param.decode16BitsTo8Bits(colormap[i] & 0xffff);g[i]=param.decode16BitsTo8Bits(colormap[gIndex + i] & 0xffff);b[i]=param.decode16BitsTo8Bits(colormap[bIndex + i] & 0xffff);}}colorModel=new IndexColorModel(sampleSize,bandLength,r,g,b);}break;default :throw new RuntimeException("TIFFImage4");}Map properties=new HashMap();properties.put("tiff_directory",dir);init((CachableRed)null,bounds,colorModel,sampleModel,0,0,properties);}  }
class C{  public void rectangle(double x,double y,double halfWidth,double halfHeight){  if (halfWidth < 0)   throw new IllegalArgumentException("half width can't be negative");  if (halfHeight < 0)   throw new IllegalArgumentException("half height can't be negative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public Property weekOfWeekyear(){  return new Property(this,getChronology().weekOfWeekyear());}  }
class C{  public static final int[] toIntArray(String s[]){  int u[]=new int[s.length];  for (int j=0; j < s.length; j++) {    u[j]=Integer.parseInt(s[j]);  }  return u;}  }
class C{  private void retrieveExpirePeriod(SipResponse response){  ExpiresHeader expiresHeader=(ExpiresHeader)response.getHeader(ExpiresHeader.NAME);  if (expiresHeader != null) {    int expires=expiresHeader.getExpires();    if (expires != -1) {      mExpirePeriod=expires * SECONDS_TO_MILLISECONDS_CONVERSION_RATE;    }  }}  }
class C{  public void sendMessage(int what){  Message msg=Message.obtain();  msg.what=what;  sendMessage(msg);}  }
class C{  private Parameters(){  for (Iterator i=arguments.iterator(); i.hasNext(); ) {    String arg=(String)i.next();    arg=arg.toLowerCase();    if (!arg.startsWith("-"))     throw new IllegalArgumentException("Command-line argument does not start with '-': " + arg);    int colonIndex=arg.indexOf(":");    String key;    String value;    if (colonIndex >= 0) {      key=arg.substring(1,colonIndex);      value=arg.substring(colonIndex + 1);    } else {      key=arg.substring(1);      value="";    }    if (!allowedKeys.contains(key))     throw new IllegalArgumentException("Unrecognized command-line argument: " + arg.substring(1) + ". Valid arguments are: "+ StringUtil.toCommaDelimitedString(allowedKeys));    hashtable.put(key,value);  }  for (Iterator i=requiredKeys.iterator(); i.hasNext(); ) {    String requiredKey=(String)i.next();    if (!hashtable.containsKey(requiredKey))     throw new IllegalArgumentException("Required command-line argument is missing: " + requiredKey);  }}  }
class C{  private void sop(String text,Throwable exception) throws IOException {  if (exception == null) {    if (infoStream.isEnabled("FS")) {      infoStream.message("FS",text);    }  } else {    if (infoStream.isEnabled("FS")) {      infoStream.message("FS",text + " (FAILED: " + exception+ ")");    }    IOUtils.reThrow(exception);  }}  }
class C{  private VPlexMigrationInfo migrateResource(String migrationName,VPlexResourceInfo sourceInfo,VPlexResourceInfo targetInfo,boolean isDeviceMigration,boolean startNow,String transferSize) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_START_MIGRATION);  s_logger.info("Start migration URI is {}",requestURI.toString());  ClientResponse response=null;  try {    s_logger.info("Start migration {} from {} to {}",new Object[]{migrationName,sourceInfo.getName(),targetInfo.getName()});    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_N,migrationName);    argsMap.put(VPlexApiConstants.ARG_DASH_F,sourceInfo.getPath());    argsMap.put(VPlexApiConstants.ARG_DASH_T,targetInfo.getPath());    if (transferSize != null && !transferSize.isEmpty()) {      argsMap.put(VPlexApiConstants.ARG_TRANSFER_SIZE,transferSize);    }    if (!startNow) {      argsMap.put(VPlexApiConstants.ARG_PAUSED,"");    }    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Start migration POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Start migration response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Start migration is completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.migrationFailureStatus(sourceInfo.getName(),targetInfo.getName(),String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully started migration {}",migrationName);    URI migrationPath=(isDeviceMigration ? VPlexApiConstants.URI_DEVICE_MIGRATIONS : VPlexApiConstants.URI_EXTENT_MIGRATIONS);    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    VPlexMigrationInfo migrationInfo=discoveryMgr.findMigration(migrationName,migrationPath,true);    migrationInfo.setIsDeviceMigration(isDeviceMigration);    return migrationInfo;  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedStartMigration(migrationName,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public void checkSize(AbstractMatrix1D B){  if (size != B.size)   throw new IllegalArgumentException("Incompatible sizes: " + toStringShort() + " and "+ B.toStringShort());}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public boolean isAggregatedType(){  return false;}  }
class C{  @UnpreemptibleNoWarn("The caller is prepared to lose control when it allocates a lock") static Lock allocate(){  RVMThread me=RVMThread.getCurrentThread();  if (me.cachedFreeLock != null) {    Lock l=me.cachedFreeLock;    me.cachedFreeLock=null;    if (trace) {      VM.sysWriteln("Lock.allocate: returning ",Magic.objectAsAddress(l),", a cached free lock from Thread #",me.getThreadSlot());    }    l.active=true;    return l;  }  Lock l=null;  while (l == null) {    if (globalFreeLock != null) {      lockAllocationMutex.lock();      l=globalFreeLock;      if (l != null) {        globalFreeLock=l.nextFreeLock;        l.nextFreeLock=null;        l.active=true;        globalFreeLocks--;      }      lockAllocationMutex.unlock();      if (trace && l != null) {        VM.sysWriteln("Lock.allocate: returning ",Magic.objectAsAddress(l)," from the global freelist for Thread #",me.getThreadSlot());      }    } else {      l=new Lock();      lockAllocationMutex.lock();      if (globalFreeLock == null) {        if (nextLockIndex >= MAX_LOCKS) {          VM.sysWriteln("Too many fat locks");          VM.sysFail("Exiting VM with fatal error");        }        l.index=nextLockIndex++;        globalLocksAllocated++;      } else {        l=null;      }      lockAllocationMutex.unlock();      if (l != null) {        if (l.index >= numLocks()) {          growLocks(l.index);        }        addLock(l);        l.active=true;        Magic.sync();      }      if (trace && l != null) {        VM.sysWriteln("Lock.allocate: returning ",Magic.objectAsAddress(l),", a freshly allocated lock for Thread #",me.getThreadSlot());      }    }  }  return l;}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof PropertyPermission))   return false;  PropertyPermission that=(PropertyPermission)obj;  return (this.mask == that.mask) && (this.getName().equals(that.getName()));}  }
class C{  public static InlineQueryResultCachedVideoBuilder builder(){  return new InlineQueryResultCachedVideoBuilder();}  }
class C{  private boolean contains(String[] list,String value) throws Exception {  for (  String entry : list) {    if (entry == value) {      return true;    }    if (entry.equals(value)) {      return true;    }  }  return false;}  }
class C{  @Override public String configurationInfo(){  StringBuilder result=new StringBuilder();  result.append("MediaWikiParser configuration:\n");  result.append("ParserClass: " + this.getClass() + "\n");  result.append("ShowImageText: " + showImageText + "\n");  result.append("DeleteTags: " + deleteTags + "\n");  result.append("ShowMathTagContent: " + showMathTagContent + "\n");  result.append("CalculateSrcSpans: " + calculateSrcSpans + "\n");  result.append("LanguageIdentifers: ");  for (  String s : languageIdentifers) {    result.append(s + " ");  }  result.append("\n");  result.append("CategoryIdentifers: ");  for (  String s : categoryIdentifers) {    result.append(s + " ");  }  result.append("\n");  result.append("ImageIdentifers: ");  for (  String s : imageIdentifers) {    result.append(s + " ");  }  result.append("\n");  result.append("TemplateParser: " + templateParser.getClass() + "\n");  result.append(templateParser.configurationInfo());  return result.toString();}  }
class C{  @Experimental public void registerHook(String event,String cmd,String replName){  String noteId=interpreterContext.getNoteId();  String className=getClassNameFromReplName(replName);  hooks.register(noteId,className,event,cmd);}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  public Configurator recordCommands(){  recordCommandStateChanges=true;  return this;}  }
class C{  private int colorWheelLocationToRGB(int x,int y,double rad){  double angle=Math.acos((double)x / rad);  int rgb;  if (angle < PI_3) {    if (y < 0) {      rgb=0xFF0000 | Math.min(255,(int)(255 * angle / PI_3)) << 8;    } else {      rgb=0xFF0000 | Math.min(255,(int)(255 * angle / PI_3));    }  } else   if (angle < 2 * PI_3) {    angle-=PI_3;    if (y < 0) {      rgb=0x00FF00 | Math.max(0,255 - (int)(255 * angle / PI_3)) << 16;    } else {      rgb=0x0000FF | Math.max(0,255 - (int)(255 * angle / PI_3)) << 16;    }  } else {    angle-=2 * PI_3;    if (y < 0) {      rgb=0x00FF00 | Math.min(255,(int)(255 * angle / PI_3));    } else {      rgb=0x0000FF | Math.min(255,(int)(255 * angle / PI_3)) << 8;    }  }  return rgb;}  }
class C{  private void displayChanged(){  clock.set12HourDisplay(displayCheckBox.isSelected(),true);  changed=true;}  }
class C{  private void generateImports(List<JClassType> extensions,ClassSourceFileComposerFactory composerFactory){  composerFactory.addImport(GWT.class.getCanonicalName());  composerFactory.addImport(Extension.class.getCanonicalName());  composerFactory.addImport(ExtensionRegistry.class.getCanonicalName());  composerFactory.addImport(Inject.class.getCanonicalName());  composerFactory.addImport(Provider.class.getCanonicalName());  composerFactory.addImport(List.class.getCanonicalName());  composerFactory.addImport(ArrayList.class.getCanonicalName());  composerFactory.addImport(Map.class.getCanonicalName());  composerFactory.addImport(HashMap.class.getCanonicalName());  for (  JClassType jClassType : extensions) {    composerFactory.addImport(jClassType.getQualifiedSourceName());  }}  }
class C{  public AppWidgetHostView(Context context){  this(context,android.R.anim.fade_in,android.R.anim.fade_out);}  }
class C{  public Address prepareAddress(Offset offset){  return null;}  }
class C{  public static void cancelScheduledEpisodeDownload(Context context){  if (!isJobScheduled(context,JOB_ID)) {    Log.d(TAG,"This job hasn't already been scheduled, no need to cancel");    return;  }  JobScheduler scheduler=(JobScheduler)context.getSystemService(Context.JOB_SCHEDULER_SERVICE);  scheduler.cancel(JOB_ID);}  }
class C{  void addRootRegion(RegionCreation root) throws RegionExistsException {  String name=root.getName();  RegionCreation existing=(RegionCreation)this.roots.get(name);  if (existing != null) {    throw new RegionExistsException(existing);  } else {    this.roots.put(root.getName(),root);  }}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  protected void reinitialize(){  reinitializeTextChange();  oldTextStyles=null;  newTextStyles=null;  oldLineStyles=null;  newLineStyles=null;  oldImages=null;  newImages=null;  oldHyperlinks=null;  newHyperlinks=null;}  }
class C{  public FileLinesBigList(final CharSequence filename,final String encoding) throws IOException {  this(filename,encoding,FastBufferedInputStream.DEFAULT_BUFFER_SIZE);}  }
class C{  public static RefactoringStatus createFatalErrorStatus(String msg,RefactoringStatusContext context){  return createStatus(FATAL,msg,context,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Sentence make(final Connective connective,final Sentence... children2){  return make(connective,Arrays.asList(children2));}  }
class C{  public <DatabaseType extends PropertyDatabase<KeyType,Property>,KeyType extends FieldOrMethodDescriptor,Property>DatabaseType loadPropertyDatabase(DatabaseType database,String fileName,String description){  try {    File dbFile=new File(getDatabaseInputDir(),fileName);    if (DEBUG) {      System.out.println("Loading " + description + " from "+ dbFile.getPath()+ "...");    }    database.readFromFile(dbFile.getPath());    return database;  } catch (  IOException e) {    getLookupFailureCallback().logError("Error loading " + description,e);  }catch (  PropertyDatabaseFormatException e) {    getLookupFailureCallback().logError("Invalid " + description,e);  }  return null;}  }
class C{  public void switchToAdvanced(Experiment exp){  if (exp == null) {    exp=m_simplePanel.getExperiment();  }  if (exp != null) {    m_AdvancedSetupRBut.setSelected(true);    m_advancedPanel.setExperiment(exp);  }  remove(m_simplePanel);  m_simplePanel.removeNotesFrame();  add(m_advancedPanel,BorderLayout.CENTER);  validate();  repaint();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isEmpty(){  return nodes.isEmpty();}  }
class C{  @Override public void onActivityResult(int aRequestCode,int aResultCode,final Intent aData){  super.onActivityResult(aRequestCode,aResultCode,aData);  if (REQ_CODE_UPDATE_ROOM_AVATAR == aRequestCode) {    onActivityResultRoomAvatarUpdate(aResultCode,aData);  }}  }
class C{  public void replaceAnnFile(String pathAnnFile){  m_doc.replaceAnnFile(pathAnnFile);}  }
class C{  public Instant minusSeconds(long secondsToSubtract){  if (secondsToSubtract == Long.MIN_VALUE) {    return plusSeconds(Long.MAX_VALUE).plusSeconds(1);  }  return plusSeconds(-secondsToSubtract);}  }
class C{  protected AbstractColorInterpolationRable(Filter src){  super(src);}  }
class C{  @SuppressWarnings("unchecked") public static <T>Sequence<T> wrapEnd(Sequence<T> sequence,T endToken){  Object[] arr=new Object[sequence.size() + 1];  System.arraycopy(sequence.elements(),0,arr,0,sequence.size());  arr[sequence.size()]=endToken;  return new ArraySequence<T>(true,(T[])arr);}  }
class C{  public Boolean consumptionPreferences(){  return consumptionPreferences;}  }
class C{  public HttpMethodInfoBuilder requestInfo(Map<String,String> groupValues){  this.groupValues=groupValues;  return this;}  }
class C{  static public String showTable(final Path[] a){  return showTable(a,null);}  }
class C{  private TransitSchedule mergeEqualTransitRoutes(final Scenario scenario,String outputDirectory){  final Logger log=Logger.getLogger(TransitScheduleSimplifier.class);  log.info("starting simplify method for given transit schedule...");  log.info("equal transit routes within a transit line will be merged...");  final String UNDERLINE="__";  TransitScheduleFactoryImpl factory=new TransitScheduleFactoryImpl();  TransitSchedule schedule=scenario.getTransitSchedule();  Map<Id<TransitLine>,TransitLine> transitLines=schedule.getTransitLines();  TransitSchedule mergedSchedule=factory.createTransitSchedule();  for (  TransitStopFacility stop : schedule.getFacilities().values())   mergedSchedule.addStopFacility(stop);  int routesCounter=0;  int mergedRoutesCounter=0;  Iterator<TransitLine> transitLineIterator=transitLines.values().iterator();  while (transitLineIterator.hasNext()) {    TransitLine transitLine=transitLineIterator.next();    Map<Id<TransitRoute>,TransitRoute> transitRoutes=transitLine.getRoutes();    TransitRoute refTransitRoute=null;    TransitLine mergedTransitLine=factory.createTransitLine(transitLine.getId());    TransitRoute mergedTransitRoute=null;    routesCounter+=transitRoutes.size();    PriorityQueue<Id> uncheckedRoutes=new PriorityQueue<Id>();    uncheckedRoutes.addAll(transitRoutes.keySet());    while (uncheckedRoutes.size() > 0) {      refTransitRoute=transitRoutes.get(uncheckedRoutes.remove());      String id=refTransitRoute.getId().toString();      for (      Id transitRouteId : transitRoutes.keySet()) {        if (!transitRouteId.equals(refTransitRoute.getId())) {          TransitRoute transitRoute=transitRoutes.get(transitRouteId);          if (routeProfilesEqual(transitRoute,refTransitRoute)) {            id+=UNDERLINE + transitRoute.getId().toString();            uncheckedRoutes.remove(transitRoute.getId());          }        }      }      if (id.equals(refTransitRoute.getId().toString())) {        mergedTransitLine.addRoute(refTransitRoute);        mergedRoutesCounter++;        continue;      }      String[] listOfRoutes=id.split(UNDERLINE);      NetworkRoute newRoute=refTransitRoute.getRoute();      List<TransitRouteStop> newStops=computeNewRouteProfile(factory,refTransitRoute,transitRoutes,listOfRoutes,newRoute,null);      compareRouteProfiles(refTransitRoute.getStops(),newStops);      mergedTransitRoute=factory.createTransitRoute(Id.create(id,TransitRoute.class),newRoute,newStops,TransportMode.pt);      mergeDepartures(factory,transitRoutes,mergedTransitRoute.getStops().get(0),mergedTransitRoute,listOfRoutes);      mergedTransitLine.addRoute(mergedTransitRoute);      mergedRoutesCounter++;    }    mergedSchedule.addTransitLine(mergedTransitLine);  }  log.info("number of initial transit routes: " + routesCounter);  String diff=routesCounter > mergedRoutesCounter ? Integer.toString(mergedRoutesCounter - routesCounter) : "+" + Integer.toString(mergedRoutesCounter - routesCounter);  log.info("number of merged transit routes: " + mergedRoutesCounter + " ( "+ diff+ " )");  log.info("writing simplified transit schedule to " + outputDirectory);  new TransitScheduleWriter(mergedSchedule).writeFile(outputDirectory);  log.info("... done.");  return mergedSchedule;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  s.append(V + " " + E+ NEWLINE);  for (int v=0; v < V; v++) {    s.append(v + ": ");    for (    Edge e : adj[v]) {      s.append(e + "  ");    }    s.append(NEWLINE);  }  return s.toString();}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("GenericsTarg");  targetClass=bpe.location().declaringType();{    Field strArray=targetClass.fieldByName("strArray");    ReferenceType fieldType=(ReferenceType)(strArray.type());    String genSig=fieldType.genericSignature();    System.out.println("strArray name = " + strArray);    System.out.println("         type = " + fieldType);    System.out.println("          sig = " + fieldType.signature());    System.out.println("       genSig = " + genSig);    if (!useOld && genSig != null) {      failure("FAILED: Expected generic signature = null for " + fieldType.name() + ", received: "+ genSig);    }  }{    Field intField=targetClass.fieldByName("intField");    Type fieldType=(Type)(intField.type());    System.out.println("intField name = " + intField);    System.out.println("         type = " + fieldType);    System.out.println("          sig = " + fieldType.signature());  }  Field genField=targetClass.fieldByName("genField");  ReferenceType gen1Class=(ReferenceType)(genField.type());  String genSig;  String expected;{    expected="<tt:Ljava/lang/Object;>Ljava/lang/Object;";    genSig=gen1Class.genericSignature();    System.out.println("genField name = " + genField);    System.out.println("         type = " + gen1Class);    System.out.println("          sig = " + gen1Class.signature());    System.out.println("       genSig = " + genSig);    if (!useOld && !expected.equals(genSig)) {      failure("FAILED: Expected generic signature for gen1: " + expected + ", received: "+ genSig);    }  }{    List genFields=gen1Class.fields();    Field field1=(Field)genFields.get(0);    expected="Ttt;";    genSig=field1.genericSignature();    System.out.println("field1 name = " + field1);    System.out.println("       type = " + gen1Class.signature());    System.out.println("        sig = " + field1.signature());    System.out.println("    gen sig = " + genSig);    if (!useOld && !expected.equals(genSig)) {      failure("FAILED: Expected generic signature for field1: " + expected + ", received: "+ genSig);    }  }{    List genMethods=gen1Class.methodsByName("method1");    Method method1=(Method)genMethods.get(0);    expected="(Ttt;)Ttt;";    genSig=method1.genericSignature();    System.out.println("method1 name = " + method1);    System.out.println("        type = " + gen1Class.signature());    System.out.println("         sig = " + method1.signature());    System.out.println("     gen sig = " + genSig);    System.out.println("     bridge  = " + method1.isBridge());    if (!useOld && !expected.equals(genSig)) {      failure("FAILED: Expected generic signature for method1: " + expected + ", received: "+ genSig);    }    if (method1.isBridge()) {      failure("FAILED: Expected gen1.method1 to not be a bridge" + " method but it is");    }    List localVars=method1.variables();    String[] expectedGenSigs={"Ttt","Gen1<String>"};    for (int ii=0; ii < localVars.size(); ii++) {      expected=expectedGenSigs[ii];      LocalVariable pp=(LocalVariable)localVars.get(ii);      genSig=pp.genericSignature();      System.out.println("   local var " + ii + " = "+ pp.name());      System.out.println("      sig      = " + pp.signature());      System.out.println("      gen sig  = " + genSig);    }  }{    List genMethods=gen1Class.methodsByName("method2");    Method method2=(Method)genMethods.get(0);    expected="null";    genSig=method2.genericSignature();    genSig=(genSig == null) ? "null" : genSig;    System.out.println("method2 name = " + method2);    System.out.println("        type = " + gen1Class.signature());    System.out.println("         sig = " + method2.signature());    System.out.println("     gen sig = " + genSig);    System.out.println("     bridge  = " + method2.isBridge());    if (!useOld && !expected.equals(genSig)) {      failure("FAILED: Expected generic signature for method2: " + expected + ", received: "+ genSig);    }    if (method2.isBridge()) {      failure("FAILED: Expected gen1.method2 to not be a bridge" + " method but it is");    }    List localVars=method2.variables();    expected="null";    for (int ii=0; ii < localVars.size(); ii++) {      LocalVariable pp=(LocalVariable)localVars.get(ii);      genSig=pp.genericSignature();      genSig=(genSig == null) ? "null" : genSig;      System.out.println("   local var " + ii + " = "+ pp.name());      System.out.println("      sig      = " + pp.signature());      System.out.println("      gen sig  = " + genSig);      if (!useOld && !expected.equals(genSig)) {        failure("FAILED: Expected generic signature for local var: " + expected + ", received: "+ genSig);      }    }  }{    Field sub1Field=targetClass.fieldByName("sub1Field");    ReferenceType sub1Class=(ReferenceType)(sub1Field.type());    List<Method> sub1Methods=sub1Class.methodsByName("method1");    for (    Method mm : sub1Methods) {      System.out.println("method is: " + mm);    }    Method method1=(Method)sub1Methods.get(1);    System.out.println("\nmethod1 name = " + method1);    System.out.println("         sig = " + method1.signature());    System.out.println("      bridge = " + method1.isBridge());    if (!useOld && !method1.isBridge()) {      failure("FAILED: Expected Sub1.method1 to be a bridge method" + " but it isn't");    }  }{    genSig=targetClass.genericSignature();    if (genSig != null) {      failure("FAILED: Expected generic signature = null for " + targetClass.name() + ", received: "+ genSig);    }  }{    Field objField=targetClass.fieldByName("objField");    genSig=objField.genericSignature();    if (genSig != null) {      failure("FAILED: Expected generic signature = null for " + objField.name() + ", received: "+ genSig);    }  }{    List methods=targetClass.methodsByName("main");    Method main=(Method)methods.get(0);    genSig=main.genericSignature();    if (genSig != null) {      failure("FAILED: Expected generic signature = null for " + main.name() + ", received: "+ genSig);    }  }  if (0 == 1) {    mainThread=bpe.thread();    EventRequestManager erm=vm().eventRequestManager();    StepRequest request=erm.createStepRequest(mainThread,StepRequest.STEP_LINE,StepRequest.STEP_INTO);    request.enable();  }  listenUntilVMDisconnect();  if (!testFailed) {    println("GenericsTest: passed");  } else {    throw new Exception("GenericsTest: failed");  }}  }
class C{  public LookupException(){  super();}  }
class C{  public MessageProviderObserver(Handler handler){  super(handler);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetrootnode.class,args);}  }
class C{  public void updateContext(){  if (m_vo.displayType == DisplayType.Text || m_vo.displayType == DisplayType.Memo || m_vo.displayType == DisplayType.TextLong || m_vo.displayType == DisplayType.Binary || m_vo.displayType == DisplayType.RowID || isEncrypted())   ; else   if (m_value instanceof Boolean) {    backupValue();    if (!isParentTabField()) {      Env.setContext(m_vo.ctx,m_vo.WindowNo,m_vo.ColumnName,((Boolean)m_value).booleanValue());    }    Env.setContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,m_vo.ColumnName,m_value == null ? null : (((Boolean)m_value) ? "Y" : "N"));  } else   if (m_value instanceof Timestamp) {    backupValue();    if (!isParentTabField()) {      Env.setContext(m_vo.ctx,m_vo.WindowNo,m_vo.ColumnName,(Timestamp)m_value);    }    String stringValue=null;    if (m_value != null && !m_value.toString().equals("")) {      Calendar c1=Calendar.getInstance();      c1.setTime((Date)m_value);      SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      stringValue=sdf.format(c1.getTime());    }    Env.setContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,m_vo.ColumnName,stringValue);  } else {    backupValue();    if (!isParentTabField()) {      Env.setContext(m_vo.ctx,m_vo.WindowNo,m_vo.ColumnName,m_value == null ? null : m_value.toString());    }    Env.setContext(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,m_vo.ColumnName,m_value == null ? null : m_value.toString());  }}  }
class C{  public ByteArrayOutputStream(int size){}  }
class C{  public static boolean usingMetalLnf(){  return usingLnf(MetalLookAndFeel.class);}  }
class C{  public static String readURLConnection(URLConnection uc) throws Exception {  StringBuffer buffer=new StringBuffer();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(uc.getInputStream()));    int letter=0;    while ((letter=reader.read()) != -1) {      buffer.append((char)letter);    }    reader.close();  } catch (  Exception e) {    System.out.println("Could not read from URL: " + e.toString());    throw e;  } finally {    if (reader != null) {      reader.close();      reader=null;    }  }  return buffer.toString();}  }
class C{  public static boolean isGpsEnabled(Context context){  LocationManager lm=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  return lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}  }
class C{  private static void addPermissionsForURLs(URL[] urls,PermissionCollection perms,boolean forLoader){  for (int i=0; i < urls.length; i++) {    URL url=urls[i];    try {      URLConnection urlConnection=url.openConnection();      Permission p=urlConnection.getPermission();      if (p != null) {        if (p instanceof FilePermission) {          String path=p.getName();          int endIndex=path.lastIndexOf(File.separatorChar);          if (endIndex != -1) {            path=path.substring(0,endIndex + 1);            if (path.endsWith(File.separator)) {              path+="-";            }            Permission p2=new FilePermission(path,"read");            if (!perms.implies(p2)) {              perms.add(p2);            }            perms.add(new FilePermission(path,"read"));          } else {            if (!perms.implies(p)) {              perms.add(p);            }          }        } else {          if (!perms.implies(p)) {            perms.add(p);          }          if (forLoader) {            URL hostURL=url;            for (URLConnection conn=urlConnection; conn instanceof JarURLConnection; ) {              hostURL=((JarURLConnection)conn).getJarFileURL();              conn=hostURL.openConnection();            }            String host=hostURL.getHost();            if (host != null && p.implies(new SocketPermission(host,"resolve"))) {              Permission p2=new SocketPermission(host,"connect,accept");              if (!perms.implies(p2)) {                perms.add(p2);              }            }          }        }      }    } catch (    IOException e) {    }  }}  }
class C{  public int readBytes(int index,byte[] b,int offset,int length){  int bytesRead=this.array.get(this.boundOffset(index),b,offset,this.boundLength(index,length));  if (bytesRead < 0) {    throw new IndexOutOfBoundsException("Index attempted to be read from is out of bounds: " + Integer.toHexString(index));  }  return bytesRead;}  }
class C{  private void addIndexDocAsync(Note note) throws IOException {  indexNoteName(writer,note.getId(),note.getName());  for (  Paragraph doc : note.getParagraphs()) {    if (doc.getText() == null) {      LOG.debug("Skipping empty paragraph");      continue;    }    indexDoc(writer,note.getId(),note.getName(),doc);  }}  }
class C{  public void waitForChannelState(DistributedMember member,Map channelState) throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  TCPConduit tc=this.conduit;  if (tc != null) {    tc.waitForThreadOwnedOrderedConnectionState(member,channelState);  }}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public Message send(Message query) throws IOException {  Resolution res=new Resolution(this,query);  return res.start();}  }
class C{  public void addTestCall(GenericAccessibleObject<?> call) throws IllegalArgumentException {  Inputs.checkNull(call);  testMethods.add(call);}  }
class C{  public Response load(final Request request,final CacheStrategy cacheStrategy,final int maxFileSize,final BlacklistType blacklistType,ClientIdentification.Agent agent) throws IOException {  Semaphore check=this.loaderSteering.get(request.url());  if (check != null && cacheStrategy != CacheStrategy.NOCACHE) {    long t=System.currentTimeMillis();    try {      check.tryAcquire(5,TimeUnit.SECONDS);    } catch (    final InterruptedException e) {    }    ConcurrentLog.info("LoaderDispatcher","waited " + (System.currentTimeMillis() - t) + " ms for "+ request.url().toNormalform(true));  }  this.loaderSteering.put(request.url(),new Semaphore(0));  try {    final Response response=loadInternal(request,cacheStrategy,maxFileSize,blacklistType,agent);    return response;  } catch (  final Throwable e) {    throw new IOException(e);  } finally {    check=this.loaderSteering.remove(request.url());    if (check != null)     check.release(1000);  }}  }
class C{  public ConcurrentHashMap(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);  putAll(m);}  }
class C{  public NarClassLoader(final File narWorkingDirectory,final ClassLoader parentClassLoader) throws ClassNotFoundException, IOException {  super(new URL[0],parentClassLoader);  this.narWorkingDirectory=narWorkingDirectory;  updateClasspath(narWorkingDirectory);}  }
class C{  @Override protected void performCachedLargeMessageDeletes(){  for (  Long largeMsgId : largeMessagesToDelete) {    SequentialFile msg=createFileForLargeMessage(largeMsgId,LargeMessageExtension.DURABLE);    try {      msg.delete();    } catch (    Exception e) {      ActiveMQServerLogger.LOGGER.journalErrorDeletingMessage(e,largeMsgId);    }    if (replicator != null) {      replicator.largeMessageDelete(largeMsgId);    }  }  largeMessagesToDelete.clear();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void close() throws IOException {  if (inputStream != null) {    try {      inputStream.close();    }  finally {      inputStream=null;    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Seconds plus(int seconds){  if (seconds == 0) {    return this;  }  return Seconds.seconds(FieldUtils.safeAdd(getValue(),seconds));}  }
class C{  public void paint(Graphics g){  Projection p=getProjection();  if (p == null)   return;  if (Debug.debugging("labellayer")) {    System.out.println("labelLayer.paint(): " + labelText);  }  positionText(p.getWidth(),p.getHeight());  text.setData(labelText);  text.generate(p);  text.render(g);}  }
class C{  public long lifetime(){  final String value=this.map.get("lifetime");  final long msec;  if (value == null) {    msec=Long.MAX_VALUE;  } else {    msec=Long.parseLong(value);  }  return msec;}  }
class C{  public boolean isNullOnComplicatedPath23(){  int baseKind=getBaseKind();  return baseKind == NCP2 || baseKind == NCP3;}  }
class C{  public void addBrowserField(MBrowseField field,int column){  if (field.isDisplayed()) {    indexesDisplay.put(column,noViewColumns);    displayIndexes.put(noViewColumns,column);    noViewColumns++;  }  columnNamesIndex.put(field.getAD_View_Column().getAD_Column().getColumnName(),column);  browserFields.put(column,field);}  }
class C{  @Override public boolean preCall(Request request,Response responder,ServiceMethodInfo serviceMethodInfo) throws Exception {  long time=new Date().getTime();  serviceMethodInfo.setAttribute(RESPONDER_ATTRIBUTE,responder);  String traceOriginId=request.getHeader(TracingConstants.TRACE_ORIGIN_ID_HEADER);  String serverTraceId;  if (traceOriginId == null) {    traceOriginId=TracingUtil.generateUniqueId();    serverTraceId=traceOriginId;  } else {    serverTraceId=TracingUtil.generateUniqueId();  }  String traceParentId=request.getHeader(TracingConstants.TRACE_ID_HEADER);  TraceEvent serverTraceEvent=new TraceEvent(TracingConstants.SERVER_TRACE_START,serverTraceId,traceOriginId,time);  serverTraceEvent.setInstanceId(instanceId);  serverTraceEvent.setInstanceName(instanceName);  serverTraceEvent.setParentId(traceParentId);  serverTraceEvent.setHttpMethod(request.getHttpMethod());  serverTraceEvent.setUrl(request.getUri());  TracingEventTracker.setTraceEvent(serverTraceEvent);  serviceMethodInfo.setAttribute(TRACE_EVENT_ATTRIBUTE,serverTraceEvent);  TracingUtil.pushToDAS(serverTraceEvent,dasUrl);  return true;}  }
class C{  protected final void validate(Collection<? extends ProjectTypeDef> types){  Map<String,ProjectTypeDef> pass1=new HashMap<>();  if (!types.contains(BASE_TYPE)) {    pass1.put(BASE_TYPE.getId(),BASE_TYPE);  }  types.stream().filter(null).forEach(null);  pass1.values().stream().filter(null).forEach(null);}  }
class C{  public boolean hasHierarchy(){  return mHierarchy != null;}  }
class C{  public IncrementalClassifierEvent(Object source,Classifier scheme,Instances structure){  super(source);  m_structure=structure;  m_status=NEW_BATCH;  m_classifier=scheme;}  }
class C{  public static GasTank readFromNBT(NBTTagCompound nbtTags){  if (nbtTags == null || nbtTags.hasNoTags()) {    return null;  }  GasTank tank=new GasTank();  tank.read(nbtTags);  return tank;}  }
class C{  public static IStatus checkInSync(IResource resource){  return checkInSync(new IResource[]{resource});}  }
class C{  protected void insertAttacks(IGame.Phase phase,Vector<Report> vPhaseReport){  return;}  }
class C{  private static void testZero() throws Exception {  try (FileInputStream fis=new FileInputStream(blah)){    FileChannel fc=fis.getChannel();    MappedByteBuffer b=fc.map(MapMode.READ_ONLY,0,0);  } }  }
class C{  public void skipAttribute() throws IOException {  nextAttributeName();  skipAttributeValue();}  }
class C{  @POST @Path("rename/validate/name") @Consumes("application/json") @Produces("application/json") public RefactoringStatus validateNewName(ValidateNewName newName) throws RefactoringException {  return manager.renameValidateNewName(newName);}  }
class C{  protected static MockResponse jsonResponse(Object body){  return new MockResponse().addHeader(CONTENT_TYPE,HttpMediaType.APPLICATION_JSON).setBody(GSON.toJson(body));}  }
class C{  static String scanSystemID(IXMLReader reader) throws IOException, XMLParseException {  if (!XMLUtil.checkLiteral(reader,"YSTEM")) {    return null;  }  XMLUtil.skipWhitespace(reader,null);  return XMLUtil.scanString(reader,'\0',null);}  }
class C{  public void close(long timeout,TimeUnit timeUnit){  disable();  for (  GetJobsAction<K,V> getJobsAction : actions) {    getJobsAction.close(timeout,timeUnit);  }  if (reconnectTrigger != null) {    reconnectTrigger.unsubscribe();    reconnectTrigger=null;  }}  }
class C{  public static <S extends HasRowMouseUpHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    RowMouseUpEvent event=new RowMouseUpEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  if (noBorder) {    return;  }  if (!iconsLoaded) {    super.paintBorder(c,g,x,y,width,height);    return;  }  g.translate(x,y);  if (tlCorner.getImageLoadStatus() == MediaTracker.COMPLETE) {    paintCorner(c,g,0,0,tlCorner);  }  if (blCorner.getImageLoadStatus() == MediaTracker.COMPLETE) {    paintCorner(c,g,0,height - blCorner.getIconHeight(),blCorner);  }  if (trCorner.getImageLoadStatus() == MediaTracker.COMPLETE) {    paintCorner(c,g,width - trCorner.getIconWidth(),0,trCorner);  }  if (brCorner.getImageLoadStatus() == MediaTracker.COMPLETE) {    paintCorner(c,g,width - brCorner.getIconWidth(),height - brCorner.getIconHeight(),brCorner);  }  int edgeWidth=width - (insets.left + insets.right);  int edgeHeight=height - (insets.top + insets.bottom);  paintEdge(c,g,topLine,insets.left,0,edgeWidth,insets.top,false,topShouldTile,topNumTiledIcons,topStaticSpace);  paintEdge(c,g,bottomLine,insets.left,height - insets.bottom,edgeWidth,insets.bottom,false,bottomShouldTile,bottomNumTiledIcons,bottomStaticSpace);  paintEdge(c,g,leftLine,0,insets.top,insets.left,edgeHeight,true,leftShouldTile,leftNumTiledIcons,leftStaticSpace);  paintEdge(c,g,rightLine,width - insets.right,insets.top,insets.right,edgeHeight,true,rightShouldTile,rightNumTiledIcons,rightStaticSpace);  g.translate(-x,-y);}  }
class C{  final public void dispose(){  finished=true;  activity=null;  if (g != null)   g.dispose();  handleMethods("dispose");  if (thread == null)   return;  thread=null;}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(field.getModifiers());}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void logout(){  TwitterCore.getInstance().logOut();}  }
class C{  public TermSuggestionBuilder suggestMode(String suggestMode){  this.suggestMode=suggestMode;  return this;}  }
class C{  public void hideColumn(TableColumn column){  if (columnModel.getColumnCount() == 1) {    return;  }  columnModel.removeColumnModelListener(this);  columnModel.removeColumn(column);  columnModel.addColumnModelListener(this);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String inputHeaderPan=null;  String outputHeader=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  int nColsPan, nRowsPan;  double redNoData=-32768;  double greenNoData=-32768;  double blueNoData=-32768;  double panNoData=-32768;  double x, y, z;  int progress=0;  int col, row;  int a, i;  double north, south, east, west;  double gridResX, gridResY;  String fusionMethod="brovey";  double r, g, b;  int rOut, gOut, bOut;  double adj;  double p;  double[] dataR, dataG, dataB, dataI, dataP;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderRed=args[0];  inputHeaderGreen=args[1];  inputHeaderBlue=args[2];  inputHeaderPan=args[3];  outputHeader=args[4];  if (args[5].toLowerCase().contains("ihs")) {    fusionMethod="ihs";  } else   if (args[5].toLowerCase().contains("brov")) {    fusionMethod="brovey";  }  try {    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);    WhiteboxRasterInfo pan=new WhiteboxRasterInfo(inputHeaderPan);    nCols=red.getNumberColumns();    nRows=red.getNumberRows();    if (green.getNumberColumns() != nCols || green.getNumberRows() != nRows) {      showFeedback("The input multispectral files must have the same dimensions.");      return;    }    if (blue.getNumberColumns() != nCols || blue.getNumberRows() != nRows) {      showFeedback("The input multispectral files must have the same dimensions.");      return;    }    north=red.getNorth();    south=red.getSouth();    east=red.getEast();    west=red.getWest();    redNoData=red.getNoDataValue();    greenNoData=green.getNoDataValue();    blueNoData=blue.getNoDataValue();    panNoData=pan.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeaderPan,WhiteboxRaster.DataType.FLOAT,panNoData);    output.setDataScale(DataScale.RGB);    nColsPan=pan.getNumberColumns();    nRowsPan=pan.getNumberRows();    int nColsLessOne=nColsPan - 1;    int nRowsLessOne=nRowsPan - 1;    gridResX=pan.getCellSizeX();    gridResY=pan.getCellSizeY();    double yRange=pan.getNorth() - pan.getSouth() - gridResY;    double xRange=pan.getEast() - pan.getWest() - gridResX;    int sourceCol, sourceRow;    double northernEdge=pan.getNorth() - gridResY;    double westernEdge=pan.getWest() + gridResX;    if (north < south) {      northernEdge=pan.getNorth() + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    double pMin=pan.getMinimumValue();    double pRange=pan.getMaximumValue() - pMin;    double maxMSVal=red.getMaximumValue();    if (green.getMaximumValue() > maxMSVal) {      maxMSVal=green.getMaximumValue();    }    if (blue.getMaximumValue() > maxMSVal) {      maxMSVal=blue.getMaximumValue();    }    if (fusionMethod.contains("brov")) {      for (row=0; row < nRowsPan; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        sourceRow=(int)Math.round((north - y) / (north - south) * (nRows - 0.5));        if (sourceRow >= nRows) {          break;        }        if (sourceRow < 0) {          sourceRow=0;        }        dataR=red.getRowValues(sourceRow);        dataG=green.getRowValues(sourceRow);        dataB=blue.getRowValues(sourceRow);        dataP=pan.getRowValues(row);        for (col=0; col < nColsPan; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          sourceCol=(int)Math.round((x - west) / (east - west) * (nCols - 0.5));          if (sourceCol >= nCols) {            break;          }          if (sourceCol < 0) {            sourceCol=0;          }          p=(dataP[col] - pMin) / pRange;          if (dataP[col] != panNoData && dataR[sourceCol] != redNoData && dataG[sourceCol] != greenNoData && dataB[sourceCol] != blueNoData) {            r=dataR[sourceCol];            g=dataG[sourceCol];            b=dataB[sourceCol];            adj=(r + g + b) / 3;            rOut=(int)(r * p / adj * 255);            gOut=(int)(g * p / adj * 255);            bOut=(int)(b * p / adj * 255);            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);            output.setValue(row,col,z);          } else {            output.setValue(row,col,panNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRowsPan - 1));        updateProgress(progress);      }    } else     if (fusionMethod.contains("ihs")) {      double[] ihs=new double[3];      double[] rgb=new double[3];      for (row=0; row < nRowsPan; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        sourceRow=(int)Math.round((north - y) / (north - south) * (nRows - 0.5));        if (sourceRow >= nRows) {          break;        }        if (sourceRow < 0) {          sourceRow=0;        }        dataR=red.getRowValues(sourceRow);        dataG=green.getRowValues(sourceRow);        dataB=blue.getRowValues(sourceRow);        dataP=pan.getRowValues(row);        for (col=0; col < nColsPan; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          sourceCol=(int)Math.round((x - west) / (east - west) * (nCols - 0.5));          if (sourceCol >= nCols) {            break;          }          if (sourceCol < 0) {            sourceCol=0;          }          p=(dataP[col] - pMin) / pRange;          if (dataP[col] != panNoData && dataR[sourceCol] != redNoData && dataG[sourceCol] != greenNoData && dataB[sourceCol] != blueNoData) {            r=dataR[sourceCol] / maxMSVal;            g=dataG[sourceCol] / maxMSVal;            b=dataB[sourceCol] / maxMSVal;            ihs=RGBtoIHS(r,g,b);            ihs[0]=p * 3;            rgb=IHStoRGB(ihs);            rOut=(int)(rgb[0] * 255);            gOut=(int)(rgb[1] * 255);            bOut=(int)(rgb[2] * 255);            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);            output.setValue(row,col,z);          } else {            output.setValue(row,col,panNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRowsPan - 1));        updateProgress(progress);      }    }    pan.close();    red.close();    green.close();    blue.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SimpleInputRegister(int value){  setValue(value);}  }
class C{  public static void writeHtml(String templateFile,OutputStream output,Map<String,String> replacements) throws IOException {  final InputStream is=Resources.getResourceAsStream(templateFile);  try (BufferedReader br=new BufferedReader(new InputStreamReader(is))){    try (final LineWriter pw=new LineWriter(new OutputStreamWriter(output))){      fillTemplate(replacements,br,pw);    }   } }  }
class C{  public void doNew(){  doNew(this,false);}  }
class C{  public Map<GraphNode,? extends SuccessorEdges> computeSpanningHierarchy(EdgeMatcher<String> edgeMatcher){  SuccessorsMap builder=new SuccessorsMap();  Set<GraphNode> visited=Sets.newHashSet();  for (  GraphEdge edge : getEdges()) {    if (edge.getHead() == edge.getTail()) {      continue;    }    if (edgeMatcher.edgeForward(edge)) {      if (false == visited.contains((edge.getTail()))) {        builder.addForwardEdge(edge);        visited.add((edge.getTail()));      }      continue;    }    if (edgeMatcher.edgeReverse(edge)) {      if (false == visited.contains((edge.getHead()))) {        builder.addReverseEdge(edge);        visited.add((edge.getHead()));      }      continue;    }  }  return builder.getSuccessorMap();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS10.class,args);}  }
class C{  @Override protected void applyDefaultAttributes(ShapeAttributes attributes){  Material material=this.getDefaultMaterial();  attributes.setOutlineMaterial(material);  attributes.setInteriorMaterial(material);  String status=this.getStatus();  if (!SymbologyConstants.STATUS_PRESENT.equalsIgnoreCase(status)) {    attributes.setOutlineStippleFactor(this.getOutlineStippleFactor());    attributes.setOutlineStipplePattern(this.getOutlineStipplePattern());  } else {    attributes.setOutlineStippleFactor(OUTLINE_STIPPLE_FACTOR_PRESENT);  }  attributes.setDrawInterior(false);}  }
class C{  private static WindowsFileAttributes fromFileInformation(long address,int reparseTag){  int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);  long creationTime=unsafe.getLong(address + OFFSETOF_FILE_INFORMATION_CREATETIME);  long lastAccessTime=unsafe.getLong(address + OFFSETOF_FILE_INFORMATION_LASTACCESSTIME);  long lastWriteTime=unsafe.getLong(address + OFFSETOF_FILE_INFORMATION_LASTWRITETIME);  long size=((long)(unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_SIZELOW) & 0xFFFFFFFFL);  int volSerialNumber=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_VOLSERIALNUM);  int fileIndexHigh=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_INDEXHIGH);  int fileIndexLow=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_INDEXLOW);  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,volSerialNumber,fileIndexHigh,fileIndexLow);}  }
class C{  BluetoothServerSocket(int type,boolean auth,boolean encrypt,int port) throws IOException {  mChannel=port;  mSocket=new BluetoothSocket(type,-1,auth,encrypt,null,port,null);}  }
class C{  synchronized final void cancelAll(final boolean mayInterrupt){  for (  final Integer key : mRunningOperations.keySet()) {    cancel(key,mayInterrupt,false);  }  mRunningOperations.clear();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public int hashCode(){  int hashCode=0;  for (int i=0; i < mag.length; i++)   hashCode=(int)(31 * hashCode + (mag[i] & LONG_MASK));  return hashCode * signum;}  }
class C{  public DeleteDelta(Chunk<T> original,Chunk<T> revised){  super(original,revised);}  }
class C{  public static boolean isSupportedAttr(String attrName){  if (BACKGROUND.equals(attrName)) {    return true;  }  if (TEXT_COLOR.equals(attrName)) {    return true;  }  if (LIST_SELECTOR.equals(attrName)) {    return true;  }  if (DIVIDER.equals(attrName)) {    return true;  }  return false;}  }
class C{  public static String format(Number number){  String formatted=Double.toString(number.doubleValue()).replaceAll("\\.0+$","").replaceAll("(\\.[0-9]*[1-9])0+$","$1");  return formatted;}  }
class C{  public static String decode(final String escaped) throws URIException {  try {    final byte[] rawdata=URLCodec.decodeUrl(EncodingUtil.getAsciiBytes(escaped));    return EncodingUtil.getString(rawdata,URI.getDefaultProtocolCharset());  } catch (  final DecoderException e) {    throw new URIException(e.getMessage());  }}  }
class C{  Node<K,V> findLast(){  Index<K,V> q=head;  for (; ; ) {    Index<K,V> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      Node<K,V> b=q.node;      Node<K,V> n=b.next;      for (; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  public AnalystClusterRequest(String destinationPointsetId,String graphId,ProfileRequest req){  this(destinationPointsetId,graphId);  profileRequest=req.clone();  profileRequest.toLat=profileRequest.fromLat;  profileRequest.toLon=profileRequest.fromLon;}  }
class C{  public String toString(){  return image;}  }
class C{  public String renderJSON(String title,EventBean theEvent){  return renderJSON(title,theEvent,new JSONRenderingOptions());}  }
class C{  private static void checkRobustInCircle(Coordinate a,Coordinate b,Coordinate c,Coordinate p){  boolean nonRobustInCircle=isInCircle(a,b,c,p);  boolean isInCircleDD=TriPredicate.isInCircleDD(a,b,c,p);  boolean isInCircleCC=TriPredicate.isInCircleCC(a,b,c,p);  Coordinate circumCentre=Triangle.circumcentre(a,b,c);  System.out.println("p radius diff a = " + Math.abs(p.distance(circumCentre) - a.distance(circumCentre)) / a.distance(circumCentre));  if (nonRobustInCircle != isInCircleDD || nonRobustInCircle != isInCircleCC) {    System.out.println("inCircle robustness failure (double result = " + nonRobustInCircle + ", DD result = "+ isInCircleDD+ ", CC result = "+ isInCircleCC+ ")");    System.out.println(WKTWriter.toLineString(new CoordinateArraySequence(new Coordinate[]{a,b,c,p})));    System.out.println("Circumcentre = " + WKTWriter.toPoint(circumCentre) + " radius = "+ a.distance(circumCentre));    System.out.println("p radius diff a = " + Math.abs(p.distance(circumCentre) / a.distance(circumCentre) - 1));    System.out.println("p radius diff b = " + Math.abs(p.distance(circumCentre) / b.distance(circumCentre) - 1));    System.out.println("p radius diff c = " + Math.abs(p.distance(circumCentre) / c.distance(circumCentre) - 1));    System.out.println();  }}  }
class C{  protected long unwrapValue(Object value){  return ((Long)value).longValue();}  }
class C{  private void revokeEncryptPolicy(org.wso2.emm.agent.beans.Operation operation){  boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && (devicePolicyManager.getStorageEncryptionStatus() == devicePolicyManager.ENCRYPTION_STATUS_ACTIVE || devicePolicyManager.getStorageEncryptionStatus() == devicePolicyManager.ENCRYPTION_STATUS_ACTIVATING));  if (operation.isEnabled() && encryptStatus) {    devicePolicyManager.setStorageEncryption(deviceAdmin,false);  }}  }
class C{  public RestHttpOperationInvoker(final LinkIndex linkIndex,final Gfsh gfsh,Map<String,String> securityProperties){  this(linkIndex,gfsh,CliStrings.CONNECT__DEFAULT_BASE_URL,securityProperties);}  }
class C{  public InputStream fetchSelectedFileSystemInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating filesystem info query");  InputStream iStream=null;  try {    Query query=new Query();    FileSystemQueryParams fsQueryParam=new FileSystemQueryParams();    AspectSelection selection=new AspectSelection();    selection.setFileSystems(true);    selection.setFileSystemCapacityInfos(true);    fsQueryParam.setAspectSelection(selection);    FileSystemAlias fsAlias=new FileSystemAlias();    fsAlias.setName((String)keyMap.get(VNXFileConstants.FILESYSTEM_NAME));    fsQueryParam.setAlias(fsAlias);    query.getQueryRequestChoice().add(fsQueryParam);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(fsQueryParam,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for fileSystem info",jaxbException.getCause());  }  return iStream;}  }
class C{  private boolean isStarted(Configuration config){  String status=config.getConfig(IpReconfigConstants.CONFIG_STATUS_KEY);  return status.equals(ClusterNetworkReconfigStatus.Status.STARTED.toString());}  }
class C{  public void testNextLong(){  long f=ThreadLocalRandom.current().nextLong();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextLong() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  public GenericRawResults<String[]> queryRaw(ConnectionSource connectionSource,String query,String[] arguments,ObjectCache objectCache) throws SQLException {  logger.debug("executing raw query for: {}",query);  if (arguments.length > 0) {    logger.trace("query arguments: {}",(Object)arguments);  }  DatabaseConnection connection=connectionSource.getReadOnlyConnection();  CompiledStatement compiledStatement=null;  try {    compiledStatement=connection.compileStatement(query,StatementType.SELECT,noFieldTypes,DatabaseConnection.DEFAULT_RESULT_FLAGS);    assignStatementArguments(compiledStatement,arguments);    GenericRawResults<String[]> rawResults=new RawResultsImpl<String[]>(connectionSource,connection,query,String[].class,compiledStatement,this,objectCache);    compiledStatement=null;    connection=null;    return rawResults;  }  finally {    if (compiledStatement != null) {      compiledStatement.close();    }    if (connection != null) {      connectionSource.releaseConnection(connection);    }  }}  }
class C{  public static boolean isWebContainer(AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  final String packageName=node.getPackageName() != null ? node.getPackageName().toString() : "";  return hasNativeWebContent(node) || packageName.startsWith("org.mozilla.");}  }
class C{  private void testSupportedDeployableType(DeployableType type){  assertTrue("DeployableType " + type + " is not supported",capability.supportsDeployableType(type));}  }
class C{  public static void plain(String message){  show(message,MessageType.PLAIN);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.402 -0500",hash_original_method="F413EBA539C7D7D57656EE1032BAAF7C",hash_generated_method="086EE2DCEAFC1A5826481261194B1DF7") protected void alert(byte level,byte description){  if (logger != null) {    logger.println("Alert.alert: " + level + " "+ description);  }  this.alert[0]=level;  this.alert[1]=description;}  }
class C{  public GridConsistentHash(@Nullable Comparator<N> nodesComp,@Nullable Object affSeed){  this.nodesComp=nodesComp;  this.affSeed=affSeed == null ? new Integer(PRIME) : affSeed;}  }
class C{  public PayloadFilter(){  this(FilterType.AND);}  }
class C{  public void clear(){  this.md5.reset();  this.aggExplicitHashKey="";  this.aggPartitionKey="";  this.aggregatedMessageSizeBytes=0;  this.explicitHashKeys.clear();  this.partitionKeys.clear();  this.aggregatedRecordBuilder=AggregatedRecord.newBuilder();}  }
class C{  private static final boolean isWholeWord(CharSequence searchIn,int offset,int len){  boolean wsBefore, wsAfter;  try {    wsBefore=!Character.isLetterOrDigit(searchIn.charAt(offset - 1));  } catch (  IndexOutOfBoundsException e) {    wsBefore=true;  }  try {    wsAfter=!Character.isLetterOrDigit(searchIn.charAt(offset + len));  } catch (  IndexOutOfBoundsException e) {    wsAfter=true;  }  return wsBefore && wsAfter;}  }
class C{  public ProgramTask(final ActionEnum action,final IStep step,final IJoinNexusFactory joinNexusFactory,final IIndexManager indexManager){  if (action == null)   throw new IllegalArgumentException();  if (step == null)   throw new IllegalArgumentException();  if (joinNexusFactory == null)   throw new IllegalArgumentException();  if (indexManager == null)   throw new IllegalArgumentException();  this.action=action;  this.step=step;  this.joinNexusFactory=joinNexusFactory;  this.indexManager=indexManager;}  }
class C{  public void startExecuting(){}  }
class C{  public TreeNode(String name){  this(name,null);}  }
class C{  public IoBuffer encodePacket(RTMP rtmp,Packet packet){  IoBuffer out=null;  IoBuffer data=null;  final Header header=packet.getHeader();  final int channelId=header.getChannelId();  final IRTMPEvent message=packet.getMessage();  if (message instanceof ChunkSize) {    ChunkSize chunkSizeMsg=(ChunkSize)message;    rtmp.setWriteChunkSize(chunkSizeMsg.getSize());  }  if (!dropMessage(rtmp,channelId,message)) {    data=encodeMessage(rtmp,header,message);    if (data != null) {      if (data.position() != 0) {        data.flip();      } else {        data.rewind();      }      header.setSize(data.limit());      Header lastHeader=rtmp.getLastWriteHeader(channelId);      int headerSize=calculateHeaderSize(rtmp,header,lastHeader);      rtmp.setLastWriteHeader(channelId,header);      rtmp.setLastWritePacket(channelId,packet);      int chunkSize=rtmp.getWriteChunkSize();      int chunkHeaderSize=1;      if (header.getChannelId() > 320) {        chunkHeaderSize=3;      } else       if (header.getChannelId() > 63) {        chunkHeaderSize=2;      }      int numChunks=(int)Math.ceil(header.getSize() / (float)chunkSize);      int bufSize=header.getSize() + headerSize + (numChunks > 0 ? (numChunks - 1) * chunkHeaderSize : 0);      out=IoBuffer.allocate(bufSize,false);      encodeHeader(rtmp,header,lastHeader,out);      if (numChunks == 1) {        BufferUtils.put(out,data,out.remaining());      } else {        for (int i=0; i < numChunks - 1; i++) {          BufferUtils.put(out,data,chunkSize);          RTMPUtils.encodeHeaderByte(out,HEADER_CONTINUE,header.getChannelId());        }        BufferUtils.put(out,data,out.remaining());      }      data.free();      out.flip();      data=null;    }  }  message.release();  return out;}  }
class C{  public boolean isData(String name){  byte b=((Byte)resourceTypes.get(name)).byteValue();  return b == MAGIC_DATA;}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public void refresh(){  final List<List<TableData>> columns=new ArrayList<>(m_data.getDiceSides() + 1);  for (int i=0; i <= m_data.getDiceSides(); i++) {    columns.add(i,new ArrayList<>());  }  final List<Unit> units=new ArrayList<>(m_units);  DiceRoll.sortByStrength(units,!m_attack);  final Map<Unit,Tuple<Integer,Integer>> unitPowerAndRollsMap;  m_data.acquireReadLock();  try {    if (m_battleType.isAirPreBattleOrPreRaid()) {      unitPowerAndRollsMap=null;    } else {      unitPowerAndRollsMap=DiceRoll.getUnitPowerAndRollsForNormalBattles(units,new ArrayList<>(m_enemyBattleModel.getUnits()),!m_attack,false,m_data,m_location,m_territoryEffects,m_isAmphibious,m_amphibiousLandAttackers);    }  }  finally {    m_data.releaseReadLock();  }  final int diceSides=m_data.getDiceSides();  final Collection<UnitCategory> unitCategories=UnitSeperator.categorize(units,null,false,false,false);  for (  final UnitCategory category : unitCategories) {    int strength;    final UnitAttachment attachment=UnitAttachment.get(category.getType());    final int[] shift=new int[m_data.getDiceSides() + 1];    for (    final Unit current : category.getUnits()) {      if (m_battleType.isAirPreBattleOrPreRaid()) {        if (m_attack) {          strength=attachment.getAirAttack(category.getOwner());        } else {          strength=attachment.getAirDefense(category.getOwner());        }      } else {        strength=unitPowerAndRollsMap.get(current).getFirst();      }      strength=Math.min(Math.max(strength,0),diceSides);      shift[strength]++;    }    for (int i=0; i <= m_data.getDiceSides(); i++) {      if (shift[i] > 0) {        columns.get(i).add(new TableData(category.getOwner(),shift[i],category.getType(),m_data,category.hasDamageOrBombingUnitDamage(),category.getDisabled(),m_uiContext));      }    }  }  int rowCount=1;  for (  final List<TableData> column : columns) {    rowCount=Math.max(rowCount,column.size());  }  setNumRows(rowCount);  for (int row=0; row < rowCount; row++) {    for (int column=0; column < columns.size(); column++) {      if (columns.get(column).size() > row) {        setValueAt(columns.get(column).get(row),row,column);      } else {        setValueAt(TableData.NULL,row,column);      }    }  }}  }
class C{  private static ByteBuffer serialize(ByteBuffer buffer,AkibanInformationSchema ais,ProtobufWriter.WriteSelector selector){  ProtobufWriter writer=new ProtobufWriter(selector);  writer.save(ais);  int size=writer.getBufferSize();  if (buffer == null || (buffer.capacity() < size)) {    buffer=ByteBuffer.allocate(size);  }  buffer.clear();  writer.serialize(buffer);  buffer.flip();  return buffer;}  }
class C{  public CSVFormat withQuotePolicy(final Quote quotePolicy){  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public void testWeaklyConsistentIteration(){  final LinkedBlockingQueue q=new LinkedBlockingQueue(3);  q.add(one);  q.add(two);  q.add(three);  for (Iterator it=q.iterator(); it.hasNext(); ) {    q.remove();    it.next();  }  assertEquals(0,q.size());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapchildnoderange.class,args);}  }
class C{  public static void wrapContentAgain(ViewGroup subTreeRoot,boolean relayoutAllNodes,int subTreeRootWidthMeasureSpec,int subTreeRootHeightMeasureSpec){  assert ("main".equals(Thread.currentThread().getName()));  if (subTreeRoot == null)   return;  LayoutParams layoutParams=subTreeRoot.getLayoutParams();  int widthMeasureSpec=subTreeRootWidthMeasureSpec;  if (layoutParams.width != LayoutParams.WRAP_CONTENT && subTreeRoot.getWidth() > 0)   widthMeasureSpec=MeasureSpec.makeMeasureSpec(subTreeRoot.getWidth(),MeasureSpec.EXACTLY);  int heightMeasureSpec=subTreeRootHeightMeasureSpec;  if (layoutParams.height != LayoutParams.WRAP_CONTENT && subTreeRoot.getHeight() > 0)   heightMeasureSpec=MeasureSpec.makeMeasureSpec(subTreeRoot.getHeight(),MeasureSpec.EXACTLY);  subTreeRoot.measure(widthMeasureSpec,heightMeasureSpec);  recurseWrapContent(subTreeRoot,relayoutAllNodes);  subTreeRoot.requestLayout();}  }
class C{  public boolean isRoot(V vertex){  if (root == null)   return false;  return root.equals(vertex);}  }
class C{  public boolean isDrawValueAboveBarEnabled(){  return mDrawValueAboveBar;}  }
class C{  @NonNull public JSONObject toJson(){  JSONObject json=new JSONObject();  JsonUtil.put(json,KEY_TYPE,type);  JsonUtil.put(json,KEY_CODE,code);  JsonUtil.putIfNotNull(json,KEY_ERROR,error);  JsonUtil.putIfNotNull(json,KEY_ERROR_DESCRIPTION,errorDescription);  JsonUtil.putIfNotNull(json,KEY_ERROR_URI,errorUri);  return json;}  }
class C{  private void ensureOpen() throws IOException {  if (in == null) {    throw new IOException("Stream closed");  }}  }
class C{  protected IntFunctions(){}  }
class C{  public Plottable toPlottable(String name){  Integer dsId=nameindex.get(name);  if (dsId == null)   throw new RuntimeException("datasource not not found: " + name);  long[] date=new long[rows];  double[] results=new double[rows];  long time=startTime;  for (int row=0; row < rows; row++, time+=step) {    date[row]=time;    results[row]=data[row][dsId];  }  return new LinearInterpolator(date,results);}  }
class C{  private void writeJournal(ParcelFileDescriptor newState,Journal journal){  try {    FileOutputStream outStream=new FileOutputStream(newState.getFileDescriptor());    final byte[] journalBytes=writeCheckedBytes(journal);    outStream.write(journalBytes);    if (VERBOSE)     Log.v(TAG,"wrote " + journalBytes.length + " bytes of journal");  } catch (  IOException e) {    Log.w(TAG,"failed to write backup journal",e);  }}  }
class C{  public OrPredicate(Predicate p1){  add(p1);}  }
class C{  public String createUrl(boolean createDB){  if (url == null) {    StringBuffer sb=new StringBuffer();    sb.append("jdbc:postgresql://");    sb.append(host);    sb.append(":");    sb.append(port);    sb.append("/");    sb.append(databaseName);    sb.append("?tcpKeepAlive=true");    return sb.toString();  } else {    return url;  }}  }
class C{  private int trailingCdWhitespaceStart(int startPos,int limitPos){  if (fLevels != null) {    final byte baseLevel=(byte)(fIsDirectionLTR ? 0 : 1);    for (int cdWsStart=limitPos; --cdWsStart >= startPos; ) {      if ((fLevels[cdWsStart] % 2) == baseLevel || Character.getDirectionality(fChars[cdWsStart]) != Character.DIRECTIONALITY_WHITESPACE) {        return ++cdWsStart;      }    }  }  return startPos;}  }
class C{  public PreparedStatementWrapper preparedStatement(String sql,String[] columnNames) throws SQLException {  final PreparedStatementWrapper psw=new PreparedStatementWrapper(m_connection,sql,columnNames);  if (m_preparedStatements == null) {    m_preparedStatements=new ArrayList<PreparedStatementWrapper>();  }  m_preparedStatements.add(psw);  return psw;}  }
class C{  public void informational(Stage stage,String message,String details){  messageLabel.setText(message);  detailsLabel.setText(details);  cancelButton.setVisible(false);  actionButton.setVisible(false);  okButton.setOnAction(null);}  }
class C{  public void addRoundRectangleStraightRight(final float x,final float y,final float width,final float height,final float arcWidth,final float arcHeight){  if (this.isDisposed()) {    SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);  }  this.cubicTo(x,y,x,y,x,y + arcHeight);  this.cubicTo(x,y,x,y,x + arcWidth,y);  this.lineTo(x + width,y);  this.lineTo(x + width,y + height);  this.cubicTo(x,y + height,x,y + height,x + arcWidth,y + height);  this.cubicTo(x,y + height,x,y + height,x,y + height - arcHeight);}  }
class C{  public void preReplace(IDocument document,int offset) throws BadLocationException {  fPosition.setOffset(offset);  try {    document.addPositionCategory(CATEGORY);    document.addPositionUpdater(fPositionUpdater);    document.addPosition(CATEGORY,fPosition);  } catch (  BadPositionCategoryException e) {    JavaPlugin.log(e);  }}  }
class C{  public div addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static com.linkedin.camus.example.records.DummyLog2.Builder newBuilder(com.linkedin.camus.example.records.DummyLog2.Builder other){  return new com.linkedin.camus.example.records.DummyLog2.Builder(other);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public KdbxHeader(){  SecureRandom random=new SecureRandom();  cipherUuid=AES_CIPHER;  compressionFlags=CompressionFlags.GZIP;  masterSeed=random.generateSeed(32);  transformSeed=random.generateSeed(32);  transformRounds=6000;  encryptionIv=random.generateSeed(16);  protectedStreamKey=random.generateSeed(32);  streamStartBytes=new byte[32];  protectedStreamAlgorithm=ProtectedStreamAlgorithm.SALSA_20;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public NibbleArray(int size){  checkArgument(size > 0 && size % 2 == 0,"size must be positive even number, not " + size);  data=new byte[size / 2];}  }
class C{  protected void drawTriangle(DrawContext dc,float rotation,Rectangle bounds,Insets insets){  GL2 gl=dc.getGL().getGL2();  try {    gl.glPushMatrix();    Rectangle insetBounds=new Rectangle(bounds.x + insets.left,bounds.y + insets.bottom,bounds.width - insets.left - insets.right,bounds.height - insets.top - insets.bottom);    float halfHeight=insetBounds.height / 2.0f;    float halfWidth=insetBounds.width / 2.0f;    float adjustX=0;    float adjustY=0;    if (rotation == 90) {      adjustX=halfWidth;      adjustY=(insetBounds.height - halfWidth) / 2.0f;    } else     if (rotation == -90) {      adjustX=halfWidth;      adjustY=(insetBounds.height - halfWidth) / 2.0f + halfWidth;    } else     if (rotation == 0) {      adjustX=(insetBounds.width - halfWidth) / 2.0f;      adjustY=halfHeight;    } else     if (rotation == 180) {      adjustX=(insetBounds.width - halfWidth) / 2.0f + halfWidth;      adjustY=halfHeight;    }    gl.glTranslated(insetBounds.x + adjustX,insetBounds.y + adjustY,1.0);    gl.glRotatef(rotation,0,0,1);    gl.glBegin(GL2.GL_TRIANGLES);    gl.glVertex2f(0,halfHeight);    gl.glVertex2f(halfWidth,0);    gl.glVertex2f(0,-halfHeight);    gl.glEnd();  }  finally {    gl.glPopMatrix();  }}  }
class C{  public ReplDBMSEvent eventFromRowInsert(long seqno,String schema,String table,String[] names,Object[] values,int fragNo,boolean lastFrag,Timestamp commitTime){  OneRowChange rowChange=generateRowChange(schema,table,RowChangeData.ActionType.INSERT);  rowChange.setColumnSpec(generateSpec(rowChange,names));  rowChange.setColumnValues(generateValues(rowChange,values));  RowChangeData rowChangeData=new RowChangeData();  rowChangeData.appendOneRowChange(rowChange);  ArrayList<DBMSData> data=new ArrayList<DBMSData>();  data.add(rowChangeData);  DBMSEvent dbmsEvent=new DBMSEvent(new Long(seqno).toString(),null,data,lastFrag,new Timestamp(System.currentTimeMillis()));  ReplDBMSEvent replDbmsEvent=new ReplDBMSEvent(seqno,(short)fragNo,lastFrag,"NONE",0,commitTime,dbmsEvent);  return replDbmsEvent;}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x,int length) throws SQLException {  updateCharacterStream(columnLabel,x,(long)length);}  }
class C{  protected TaskList migrateVolumesInReplicationGroup(List<Volume> volumes,VirtualPool vpool,List<Volume> volumesNotInRG,List<Volume> volumesInRG,ControllerOperationValuesWrapper controllerOperationValues,String taskId){  TaskList taskList=new TaskList();  Table<URI,String,List<Volume>> groupVolumes=VPlexUtil.groupVPlexVolumesByRG(volumes,volumesNotInRG,volumesInRG,_dbClient);  for (  Table.Cell<URI,String,List<Volume>> cell : groupVolumes.cellSet()) {    List<Volume> volumesInRGRequest=cell.getValue();    Volume firstVolume=volumesInRGRequest.get(0);    List<Volume> rgVolumes=VPlexUtil.getVolumesInSameReplicationGroup(cell.getColumnKey(),cell.getRowKey(),firstVolume.getPersonality(),_dbClient);    if (volumesInRGRequest.size() != rgVolumes.size()) {      throw APIException.badRequests.cantChangeVpoolNotAllCGVolumes();    }    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,firstVolume.getConsistencyGroup());    URI systemURI=firstVolume.getStorageController();    if (volumesInRGRequest.size() > _maxCgVolumesForMigration) {      throw APIException.badRequests.cgContainsTooManyVolumesForVPoolChange(cg.getLabel(),volumes.size(),_maxCgVolumesForMigration);    }    if (volumesInRGRequest.size() > 1) {      s_logger.info("Multiple volume request, verifying target storage systems");      verifyTargetSystemsForCGDataMigration(volumesInRGRequest,vpool,cg.getVirtualArray());    }    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,systemURI);    List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();    for (    Volume volume : volumesInRGRequest) {      descriptors.addAll(createChangeVirtualPoolDescriptors(storageSystem,volume,vpool,taskId,null,null,controllerOperationValues));    }    taskList.getTaskList().add(createTaskForRG(vpool,rgVolumes,taskId));    orchestrateVPoolChanges(volumesInRGRequest,descriptors,taskId);  }  return taskList;}  }
class C{  public static boolean openUrlsPrompt(Component parent,List<String> urls,boolean forcePrompt){  if (urls.isEmpty()) {    return false;  }  if (!forcePrompt && !prompt) {    return openUrls(urls);  }switch (showUrlsPrompt(parent,urls)) {case 0:    return openUrls(urls);case 1:  MiscUtil.copyToClipboard(urls.get(0));}return true;}  }
class C{  public Builder penaltyDeath(){  return enable(PENALTY_DEATH);}  }
class C{  protected MenuBuilder createMenuBuilder(){  return new DefaultMenuBuilder();}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  RectangleInsets insets=getInsets();  insets.trim(area);  if (info != null) {    info.setPlotArea(area);    info.setDataArea(area);  }  drawBackground(g2,area);  drawOutline(g2,area);  Shape savedClip=g2.getClip();  g2.clip(area);  Composite originalComposite=g2.getComposite();  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));  if (!DatasetUtilities.isEmptyOrNull(this.dataset)) {    Graphics2D savedG2=g2;    boolean suppressShadow=Boolean.TRUE.equals(g2.getRenderingHint(JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));    BufferedImage dataImage=null;    if (this.shadowGenerator != null && !suppressShadow) {      dataImage=new BufferedImage((int)area.getWidth(),(int)area.getHeight(),BufferedImage.TYPE_INT_ARGB);      g2=dataImage.createGraphics();      g2.translate(-area.getX(),-area.getY());      g2.setRenderingHints(savedG2.getRenderingHints());    }    drawPie(g2,area,info);    if (this.shadowGenerator != null && !suppressShadow) {      BufferedImage shadowImage=this.shadowGenerator.createDropShadow(dataImage);      g2=savedG2;      g2.drawImage(shadowImage,(int)area.getX() + this.shadowGenerator.calculateOffsetX(),(int)area.getY() + this.shadowGenerator.calculateOffsetY(),null);      g2.drawImage(dataImage,(int)area.getX(),(int)area.getY(),null);    }  } else {    drawNoDataMessage(g2,area);  }  g2.setClip(savedClip);  g2.setComposite(originalComposite);  drawOutline(g2,area);}  }
class C{  public InputStream executeAndReturnStdoutAsInputStream(String[] rawArgs) throws IOException, InterruptedException, MameExecutionException {  return this.executeAndReturnStdoutAsInputStream(rawArgs,true);}  }
class C{  public Certificate[] certificates(){  if (certificates == null) {    return new Certificate[0];  }  int len=certificates.size();  Certificate[] certs=new Certificate[len];  certificates.copyInto(certs);  return certs;}  }
class C{  @Override public void addMessage(final String message,final String from,final boolean thirdperson){  addMessageWithSound(message,from,thirdperson,SoundPath.CLIP_CHAT_MESSAGE);}  }
class C{  public void testCargoDaemonWelcomePage() throws Exception {  PingUtils.assertPingTrue("Cargo Daemon not started","Welcome to Cargo Daemon Web site",CargoDaemonDeployableTest.daemonUrl,logger);}  }
class C{  @Override public Connection connect(String url,Properties info) throws SQLException {  try {    if (info == null) {      info=new Properties();    }    if (!acceptsURL(url)) {      return null;    }    if (url.equals(DEFAULT_URL)) {      return DEFAULT_CONNECTION.get();    }    Connection c=DbUpgrade.connectOrUpgrade(url,info);    if (c != null) {      return c;    }    return new JdbcConnection(url,info);  } catch (  Exception e) {    throw DbException.toSQLException(e);  }}  }
class C{  @SuppressWarnings("unchecked") public State handleProposal(AbstractActivity<?> fromActivity){  System.out.println("RememeberTaskClient: handleProposal");  ProposalConversation conversation=(ProposalConversation)(AbstractActivity<ProposalConversation.State>)fromActivity;  if (true) {    Json reply=getReply(conversation.getMessage());    ArrayList<Object> contents=new ArrayList<Object>();    for (    LogEntry entry : entries) {      contents.add(Json.object(Messages.OPERATION,entry.getOperation(),Messages.CONTENT,(entry.getOperation() == StorageService.Operation.Remove) ? entry.getHandle() : SubgraphManager.encodeSubgraph(entry.getData())));    }    reply.set(Messages.CONTENT,contents);    conversation.accept(reply);  }  return State.Accepted;}  }
class C{  public void callback(final long status_id,final String twitlonger_message_id) throws Exception {  final ArrayList<NameValuePair> args=new ArrayList<>(2);  args.add(new BasicNameValuePair("application",app_name));  args.add(new BasicNameValuePair("api_key",api_key));  args.add(new BasicNameValuePair("message_id",twitlonger_message_id));  args.add(new BasicNameValuePair("twitter_id ",Long.toString(status_id)));  try {    final HttpClient httpclient=new DefaultHttpClient();    final HttpPost httppost=new HttpPost(TWITLONGER_API_CALLBACK);    httppost.setEntity(new UrlEncodedFormEntity(args,"UTF-8"));    final HttpResponse response=httpclient.execute(httppost);    final String responseStr=EntityUtils.toString(response.getEntity(),"UTF-8");    final XmlPullParserFactory factory=XmlPullParserFactory.newInstance();    factory.setNamespaceAware(true);    final XmlPullParser parser=factory.newPullParser();    parser.setInput(new StringReader(responseStr));    int eventType=parser.getEventType();    String tagName;    boolean lookingForEndOfUnknownTag=false;    String unknownTagName=null;    do {      if (eventType == XmlPullParser.START_TAG) {        tagName=parser.getName();        if (TAG_TWITLONGER.equals(tagName)) {          eventType=parser.next();          break;        }        throw new RuntimeException("Expecting " + TAG_TWITLONGER + " , got "+ tagName);      }      eventType=parser.next();    } while (eventType != XmlPullParser.END_DOCUMENT);    boolean endOfDocument=false;    while (!endOfDocument) {switch (eventType) {case XmlPullParser.START_TAG:{          if (lookingForEndOfUnknownTag) {            break;          }          tagName=parser.getName();          if (TAG_POST.equalsIgnoreCase(tagName)) {          } else           if (TAG_ERROR.equalsIgnoreCase(tagName))           throw new TwitLongerException("Server returned error response: " + parser.nextText()); else {            lookingForEndOfUnknownTag=true;            unknownTagName=tagName;          }          break;        }case XmlPullParser.END_TAG:{        tagName=parser.getName();        if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {          lookingForEndOfUnknownTag=false;          unknownTagName=null;        }        break;      }case XmlPullParser.END_DOCUMENT:{      endOfDocument=true;    }}eventType=parser.next();}} catch (final IOException e) {throw new TwitLongerException(e);}catch (final XmlPullParserException e) {throw new TwitLongerException(e);}}  }
class C{  protected void removeDuplicatesAndTautologies(AST2BOpContext ctx,StaticAnalysis sa,IBindingSet[] bSets,JoinGroupNode group){  final Set<IVariable<?>> definitelyProd=new HashSet<IVariable<?>>();  sa.getDefinitelyIncomingBindings(group,definitelyProd);  sa.getDefinitelyProducedBindings(group,definitelyProd,true);  final Set<IVariable<?>> maybeProd=new HashSet<IVariable<?>>();  sa.getMaybeIncomingBindings(group,maybeProd);  sa.getMaybeProducedBindings(group,maybeProd,true);  final Set<FilterNode> alreadySeen=new HashSet<FilterNode>();  final List<FilterNode> filtersToRemove=new ArrayList<FilterNode>();  for (int i=group.size() - 1; i >= 0; i--) {    final BOp child=group.get(i);    if (child instanceof FilterNode) {      final FilterNode filterNode=(FilterNode)child;      if (filterAlwaysSatisifed(filterNode,definitelyProd,maybeProd) || alreadySeen.contains(filterNode)) {        filtersToRemove.add(filterNode);      }      alreadySeen.add(filterNode);    }  }  for (int i=filtersToRemove.size() - 1; i >= 0; i--) {    final FilterNode filterNode=filtersToRemove.get(i);    group.removeChild(filterNode);  }}  }
class C{  public String toASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCII(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  public Hessian2StreamingOutput(OutputStream os){  _out=new Hessian2Output(os);}  }
class C{  public static int pxToDp(Context context,int px){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  return (int)((px / displayMetrics.density) + 0.5);}  }
class C{  public void assertNoMoreEvents(){  assertThat(events.isEmpty()).isTrue();}  }
class C{  public static Pair<String,String> pluginSplit(String name){  return split(name,".",false);}  }
class C{  protected boolean supportsNetLoad(){  return true;}  }
class C{  public void mergeBackendNotes(List<Note> remoteNotes){  List<Note> toMergeNotes=new ArrayList<>();  Map<String,Note> remoteNotesMap=new HashMap<>();  for (  Note note : remoteNotes) {    remoteNotesMap.put(note.getBackendId(),note);  }  List<Note> localNotes=noteDao.queryByBackendIds(remoteNotesMap.keySet());  Map<String,Note> localNotesMap=new HashMap<>();  for (  Note localNote : localNotes) {    localNotesMap.put(localNote.getBackendId(),localNote);  }  for (  Note remoteNote : remoteNotes) {    Note localNote=localNotesMap.get(remoteNote.getBackendId());    if (localNote != null) {      remoteNote.setId(localNote.getId());    }    toMergeNotes.add(remoteNote);  }  saveNotes(toMergeNotes);}  }
class C{  public void unregister(ICalComponentScribe<? extends ICalComponent> scribe){  experimentalCompByName.remove(scribe.getComponentName().toUpperCase());  experimentalCompByClass.remove(scribe.getComponentClass());}  }
class C{  public boolean logout() throws LoginException {  if (subject.isReadOnly()) {    cleanState();    throw new LoginException("Subject is Readonly");  }  subject.getPrincipals().remove(userPrincipal);  subject.getPrincipals().remove(UIDPrincipal);  subject.getPrincipals().remove(GIDPrincipal);  for (int i=0; i < supplementaryGroups.size(); i++) {    subject.getPrincipals().remove(supplementaryGroups.get(i));  }  cleanState();  succeeded=false;  commitSucceeded=false;  userPrincipal=null;  UIDPrincipal=null;  GIDPrincipal=null;  supplementaryGroups=new LinkedList<UnixNumericGroupPrincipal>();  if (debug) {    System.out.println("\t\t[JndiLoginModule]: " + "logged out Subject");  }  return true;}  }
class C{  public static void deregisterServerAuthModule(ServletContext servletContext){  String registrationId=(String)servletContext.getAttribute(CONTEXT_REGISTRATION_ID);  if (!isEmpty(registrationId)) {    AuthConfigFactory.getFactory().removeRegistration(registrationId);  }}  }
class C{  public boolean deleteVolumeStep(URI storageURI,List<URI> volumes,String token) throws WorkflowException {  boolean status=true;  String volumeList=Joiner.on(',').join(volumes);  try {    WorkflowStepCompleter.stepExecuting(token);    _log.info("Delete Volume Step Started. " + volumeList);    deleteVolumes(storageURI,volumes,token);    _log.info("Delete Volume Step Dispatched: " + volumeList);  } catch (  Exception ex) {    _log.error("Delete Volume Step Failed." + volumeList);    String opName=ResourceOperationTypeEnum.DELETE_VOLUME_WORKFLOW_STEP.getName();    ServiceError serviceError=DeviceControllerException.errors.jobFailedOp(opName);    WorkflowStepCompleter.stepFailed(token,serviceError);    status=false;  }  return status;}  }
class C{  static String indent(String o){  return indent(o,4);}  }
class C{  @Override public boolean handle(IGame.Phase phase,Vector<Report> vPhaseReport){  if (!this.cares(phase)) {    return true;  }  Report r=new Report(3115);  r.indent();  r.newlines=0;  r.subject=subjectId;  r.add(wtype.getName());  r.messageId=3120;  r.add(target.getDisplayName(),true);  vPhaseReport.addElement(r);  if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {    r=new Report(3135);    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);    return false;  } else   if (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL) {    r=new Report(3140);    r.newlines=0;    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);  } else   if (toHit.getValue() == TargetRoll.AUTOMATIC_SUCCESS) {    r=new Report(3145);    r.newlines=0;    r.subject=subjectId;    r.add(toHit.getDesc());    vPhaseReport.addElement(r);  }  addHeat();  for (int i=0; i < weapon.getBayWeapons().size(); i++) {    Coords coords=target.getPosition();    server.deliverScreen(coords,vPhaseReport);    for (    Entity entity : game.getEntitiesVector(coords)) {      if (entity instanceof FighterSquadron) {        entity.getSubEntities().ifPresent(null);      } else {        ToHitData hexToHit=new ToHitData();        hexToHit.setHitTable(ToHitData.HIT_NORMAL);        HitData hit=entity.rollHitLocation(hexToHit.getHitTable(),ToHitData.SIDE_FRONT);        hit.setCapital(false);        vPhaseReport.addAll(server.damageEntity(entity,hit,attackValue));        server.creditKill(entity,ae);      }    }  }  return false;}  }
class C{  private void incrementTailKey() throws CacheException {  this.tailKey.set(inc(this.tailKey.get()));  if (logger.isTraceEnabled()) {    logger.trace("{}: Incremented TAIL_KEY for region {} to {}",this,this.region.getName(),this.tailKey);  }}  }
class C{  public Boolean exists(final String key){  checkIsInMulti();  client.exists(key);  return client.getIntegerReply() == 1;}  }
class C{  public boolean isSetVersion(){  return this.version != null;}  }
class C{  public static void main(String[] args){  GetProperties getProperties=new GetProperties();  List<GetPropertiesInfo> getPropertiesInfos=getProperties.execute(args);  OozieUtil oozieUtil=new OozieUtil();  try {    oozieUtil.persistBeanList(getPropertiesInfos,false);  } catch (  Exception e) {    LOGGER.error(e);    throw new MetadataException(e);  }}  }
class C{  private void writeTaxon(Taxon taxon,boolean hasDate,boolean hasAttr,XMLWriter writer) throws Arguments.ArgumentException {  writer.writeTag(TaxonParser.TAXON,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,taxon.getId())},!(hasDate || hasAttr));  if (hasDate) {    dr.evolution.util.Date date=(dr.evolution.util.Date)taxon.getAttribute(dr.evolution.util.Date.DATE);    Attribute[] attributes;    if (date.getPrecision() > 0.0) {      attributes=new Attribute[]{new Attribute.Default<Double>(DateParser.VALUE,date.getTimeValue()),new Attribute.Default<String>(DateParser.DIRECTION,date.isBackwards() ? DateParser.BACKWARDS : DateParser.FORWARDS),new Attribute.Default<String>(DateParser.UNITS,Units.Utils.getDefaultUnitName(options.units)),new Attribute.Default<Double>(DateParser.PRECISION,date.getPrecision())};    } else {      attributes=new Attribute[]{new Attribute.Default<Double>(DateParser.VALUE,date.getTimeValue()),new Attribute.Default<String>(DateParser.DIRECTION,date.isBackwards() ? DateParser.BACKWARDS : DateParser.FORWARDS),new Attribute.Default<String>(DateParser.UNITS,Units.Utils.getDefaultUnitName(options.units))};    }    writer.writeTag(dr.evolution.util.Date.DATE,attributes,true);  }  for (  TraitData trait : options.traits) {    writer.writeOpenTag(AttributeParser.ATTRIBUTE,new Attribute[]{new Attribute.Default<String>(Attribute.NAME,trait.getName())});    writer.writeText(taxon.containsAttribute(trait.getName()) ? taxon.getAttribute(trait.getName()).toString() : "?");    writer.writeCloseTag(AttributeParser.ATTRIBUTE);  }  generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_TAXON,taxon,writer);  if (hasDate || hasAttr)   writer.writeCloseTag(TaxonParser.TAXON);}  }
class C{  public CyclicXYItemRenderer(int type,XYToolTipGenerator labelGenerator){  super(type,labelGenerator);}  }
class C{  public AdaptiveMetropolis(int numberOfParents,int numberOfOffspring,double jumpRateCoefficient){  super();  this.numberOfParents=numberOfParents;  this.numberOfOffspring=numberOfOffspring;  this.jumpRateCoefficient=jumpRateCoefficient;}  }
class C{  public void close(){  LOG.trace("enter HttpConnection.close()");  closeSocketAndStreams();}  }
class C{  public ColorRange addSaturationRange(float min,float max){  return addAlphaRange(new FloatRange(min,max));}  }
class C{  @Override public synchronized void updateObject(String columnName,Object x,int scale) throws SQLException {  updateObject(findColumn(columnName),x);}  }
class C{  private boolean createDirs(File directory){  if (directory == null) {    return true;  }  if (directory.exists()) {    return true;  } else {    if (!createDirs(directory.getParentFile())) {      return false;    }    if (!directory.mkdir()) {      return false;    } else {      return true;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.073 -0500",hash_original_method="A2BE521086BBB92362B9FD64733842A2",hash_generated_method="E688882E7340371BF6866E83AC6F0F8F") public UnsupportedParser(String unsupported){  super(unsupported);}  }
class C{  public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){  final double oneMinusBeta=1.0 - beta;  final double A=Math.pow(forward * strike,oneMinusBeta);  final double sqrtA=Math.sqrt(A);  double logM;  if (!isClose(forward,strike))   logM=Math.log(forward / strike); else {    final double epsilon=(forward - strike) / strike;    logM=epsilon - .5 * epsilon * epsilon;  }  final double z=(nu / alpha) * sqrtA * logM;  final double B=1.0 - 2.0 * rho * z + z * z;  final double C=oneMinusBeta * oneMinusBeta * logM* logM;  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);  final double xx=Math.log(tmp);  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));  double multiplier;  final double m=10;  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx; else {    final double talpha=(0.5 - rho * rho) / (1.0 - rho);    final double tbeta=alpha - .5;    final double tgamma=rho / (1 - rho);    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;  }  return (alpha / D) * multiplier * d;}  }
class C{  public static boolean isGlobal(Class<? extends DataObject> clazz){  return (clazz.isAnnotationPresent(DbKeyspace.class) && clazz.getAnnotation(DbKeyspace.class).value().equals(Keyspaces.GLOBAL));}  }
class C{  private final boolean checkTrailBlock(int currentBlock,int currentValue){  while (m_nextTrailIndexOffset_ < TRAIL_SURROGATE_INDEX_BLOCK_LENGTH_) {    m_nextBlockIndex_=0;    if (!checkBlock(currentBlock,currentValue)) {      return false;    }    m_nextTrailIndexOffset_++;    m_nextIndex_++;  }  return true;}  }
class C{  public java.util.Date longDate(){  return new LongDate();}  }
class C{  public JSONObject optJSONObject(int index){  Object o=opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override protected void buildClassPath(ArrayList<String> pathList){  for (int i=0; i < _jarList.size(); i++) {    JarEntry jarEntry=_jarList.get(i);    JarPath jar=jarEntry.getJarPath();    String path=jar.getContainer().getNativePath();    if (!pathList.contains(path)) {      pathList.add(path);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public static Bitmap scale(Bitmap src,float scaleX,float scaleY){  Matrix matrix=new Matrix();  matrix.postScale(scaleX,scaleY);  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);}  }
class C{  boolean isSynthetic(){  return field.isSynthetic();}  }
class C{  public DynamicIntArray(int initialCapacity){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal initialCapacity: " + initialCapacity);  }  data=new int[initialCapacity];  size=0;}  }
class C{  public static boolean isZipFile(File file){  return file.isFile() && file.getName().toLowerCase().endsWith(ZIP_EXTENSION);}  }
class C{  public boolean rewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  RandomAccessFile file=null;  InputStream is=null;  boolean ret;  try {    File temp=new File(filename);    is=new BufferedInputStream(new FileInputStream(temp));    ExifParser parser=null;    try {      parser=ExifParser.parse(is,this);    } catch (    ExifInvalidFormatException e) {      throw new IOException("Invalid exif format : ",e);    }    long exifSize=parser.getOffsetToExifEndFromSOF();    is.close();    is=null;    file=new RandomAccessFile(temp,"rw");    long fileLength=file.length();    if (fileLength < exifSize) {      throw new IOException("Filesize changed during operation");    }    ByteBuffer buf=file.getChannel().map(MapMode.READ_WRITE,0,exifSize);    ret=rewriteExif(buf,tags);  }  finally {    closeSilently(is);  }  file.close();  return ret;}  }
class C{  public void restoreState(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    super.restoreState(stateInXml);  } catch (  Exception e) {  }  RestorableSupport restorableSupport;  try {    restorableSupport=RestorableSupport.parse(stateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  RestorableSupport.StateObject positionStateObj=restorableSupport.getStateObject("position");  if (positionStateObj != null) {    Double latitudeState=restorableSupport.getStateValueAsDouble(positionStateObj,"latitude");    Double longitudeState=restorableSupport.getStateValueAsDouble(positionStateObj,"longitude");    Double elevationState=restorableSupport.getStateValueAsDouble(positionStateObj,"elevation");    if (latitudeState != null && elevationState != null)     setPosition(Position.fromDegrees(latitudeState,longitudeState,elevationState));  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:    return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected BKDReader(IndexInput in,int numDims,int maxPointsInLeafNode,int bytesPerDim,long[] leafBlockFPs,byte[] splitPackedValues,byte[] minPackedValue,byte[] maxPackedValue,long pointCount,int docCount) throws IOException {  this.in=in;  this.numDims=numDims;  this.maxPointsInLeafNode=maxPointsInLeafNode;  this.bytesPerDim=bytesPerDim;  bytesPerIndexEntry=numDims == 1 ? bytesPerDim : bytesPerDim + 1;  packedBytesLength=numDims * bytesPerDim;  this.leafNodeOffset=leafBlockFPs.length;  this.leafBlockFPs=leafBlockFPs;  this.splitPackedValues=splitPackedValues;  this.minPackedValue=minPackedValue;  this.maxPackedValue=maxPackedValue;  this.pointCount=pointCount;  this.docCount=docCount;  this.version=BKDWriter.VERSION_CURRENT;  assert minPackedValue.length == packedBytesLength;  assert maxPackedValue.length == packedBytesLength;}  }
class C{  public static MosaicId parse(final String mosaicId){  final Matcher matcher=MOSAIC_ID_PATTERN.matcher(mosaicId);  if (!matcher.matches()) {    throw new IllegalArgumentException(String.format("pattern '%s' could not be parsed",mosaicId));  }  return new MosaicId(new NamespaceId(matcher.group(1)),matcher.group(2));}  }
class C{  public void add(Object o){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:19.780 -0500",hash_original_method="8A39C40193810117501439EDABBFE6E5",hash_generated_method="648001FDA029DADEC8796D207B8A9CB3") public char charAt(int where){  int len=length();  if (where < 0) {    throw new IndexOutOfBoundsException("charAt: " + where + " < 0");  } else   if (where >= len) {    throw new IndexOutOfBoundsException("charAt: " + where + " >= length "+ len);  }  if (where >= mGapStart)   return mText[where + mGapLength]; else   return mText[where];}  }
class C{  public static BNode parseBNode(String nTriplesBNode,ValueFactory valueFactory) throws IllegalArgumentException {  if (nTriplesBNode.startsWith("_:")) {    return valueFactory.createBNode(nTriplesBNode.substring(2));  } else {    throw new IllegalArgumentException("Not a legal N-Triples Blank Node: " + nTriplesBNode);  }}  }
class C{  public static <S extends HasDropOverHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DropOverEvent event=new DropOverEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public boolean isTruncated(){  return truncated;}  }
class C{  public static <T extends Throwable>void lockAndThen(ReentrantLock lock,ExceptionalRunnable<T> code) throws T {  if (lock.isHeldByCurrentThread()) {    code.run();  } else {    lock.lock();    try {      code.run();    }  finally {      lock.unlock();    }  }}  }
class C{  protected void tearDown() throws Exception {  super.tearDown();}  }
class C{  @SuppressWarnings("try") void installNativeFunctionStub(HotSpotNativeFunctionHandle function){  Plugins plugins=new Plugins(providers.getGraphBuilderPlugins());  plugins.prependParameterPlugin(new ConstantBindingParameterPlugin(new Object[]{function,null},providers.getMetaAccess(),providers.getSnippetReflection()));  PhaseSuite<HighTierContext> graphBuilder=new PhaseSuite<>();  graphBuilder.appendPhase(new GraphBuilderPhase(GraphBuilderConfiguration.getDefault(plugins)));  Suites suites=providers.getSuites().getDefaultSuites();  LIRSuites lirSuites=providers.getSuites().getDefaultLIRSuites();  StructuredGraph g=new StructuredGraph(callStubMethod,AllowAssumptions.NO);  CompilationResult compResult=GraalCompiler.compileGraph(g,callStubMethod,providers,backend,graphBuilder,OptimisticOptimizations.ALL,DefaultProfilingInfo.get(TriState.UNKNOWN),suites,lirSuites,new CompilationResult(),CompilationResultBuilderFactory.Default);  try (Scope s=Debug.scope("CodeInstall",providers.getCodeCache(),g.method(),compResult)){    HotSpotCompiledCode compiledCode=HotSpotCompiledCodeBuilder.createCompiledCode(g.method(),null,compResult);    function.code=providers.getCodeCache().addCode(g.method(),compiledCode,null,null);  } catch (  Throwable e) {    throw Debug.handle(e);  }}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  @Override public double confSmallM(double totalWeight,double delta){  double term=Math.log(4.0d / delta) / (2.0d * totalWeight);  return Math.pow(term,1.5d) + 3.0d * term + 3.0d * Math.sqrt(term);}  }
class C{  public static final long gtsId(long[] key,long classId,long labelsId){  byte[] buf=new byte[8 + 8 + 2+ 3];  buf[0]='G';  buf[1]='T';  buf[2]='S';  buf[3]=':';  for (int i=0; i < 8; i++) {    buf[11 - i]=(byte)(classId & 0xffL);    classId>>>=8;  }  buf[12]=':';  for (int i=0; i < 8; i++) {    buf[20 - i]=(byte)(labelsId & 0xffL);    labelsId>>>=8;  }  return SipHashInline.hash24_palindromic(key[0],key[1],buf);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String batchcompareseparator(){  return batchcompareseparator;}  }
class C{  @Override public void add(int field,int amount){  int savedYearOffset=yearOffset;  yearOffset=0;  try {    super.add(field,amount);  }  finally {    yearOffset=savedYearOffset;  }}  }
class C{  public Message(DTNHost from,DTNHost to,String id,int size){  this.from=from;  this.to=to;  this.id=id;  this.size=size;  this.path=new ArrayList<DTNHost>();  this.uniqueId=nextUniqueId;  this.timeCreated=SimClock.getTime();  this.timeReceived=this.timeCreated;  this.initTtl=INFINITE_TTL;  this.responseSize=0;  this.requestMsg=null;  this.properties=null;  this.appID=null;  Message.nextUniqueId++;  addNodeOnPath(from);}  }
class C{  public void insertAttributeAt(int position){  if (m_Dataset != null) {    throw new RuntimeException("Instance has accesss to a dataset!");  }  if ((position < 0) || (position > numAttributes())) {    throw new IllegalArgumentException("Can't insert attribute: index out " + "of range");  }  forceInsertAttributeAt(position);}  }
class C{  private void remove(ThreadGroup g){synchronized (groups) {    for (Iterator<ThreadGroup> i=groups.iterator(); i.hasNext(); ) {      ThreadGroup threadGroup=i.next();      if (threadGroup.equals(g)) {        i.remove();        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  @Override public boolean supportsCatalogsInIndexDefinitions(){  debugCodeCall("supportsCatalogsInIndexDefinitions");  return true;}  }
class C{  public void addHighlightedNodes(Collection<Tree> nodes){  highlightedNodes=new ArrayList<Tree>();  highlightedNodes.addAll(nodes);}  }
class C{  public void testSeveralClasses() throws Exception {  runPythonTest(new SkeletonTestTask("dotNet/expected.skeleton.java.py","com.just.like.java","import_several_classes_from_module.py","com.just.like.java.LikeJavaClass"));}  }
class C{  protected void jbInit() throws Exception {  mainPanel.setLayout(new java.awt.BorderLayout());  setLayout(new java.awt.BorderLayout());  southPanel.setLayout(southLayout);  southPanel.add(confirmPanel,BorderLayout.CENTER);  southPanel.add(statusBar,BorderLayout.SOUTH);  mainPanel.add(southPanel,BorderLayout.SOUTH);  mainPanel.add(parameterPanel,BorderLayout.NORTH);  mainPanel.add(scrollPane,BorderLayout.CENTER);  scrollPane.getViewport().add(p_table,null);  confirmPanel.addActionListener(this);  confirmPanel.getResetButton().setVisible(hasReset());  confirmPanel.getCustomizeButton().setVisible(hasCustomize());  confirmPanel.getHistoryButton().setVisible(hasHistory());  confirmPanel.getZoomButton().setVisible(hasZoom());  JButton print=ConfirmPanel.createPrintButton(true);  print.addActionListener(this);  confirmPanel.addButton(print);  popup.add(calcMenu);  calcMenu.setText(Msg.getMsg(Env.getCtx(),"Calculator"));  calcMenu.setIcon(new ImageIcon(org.compiere.Adempiere.class.getResource("images/Calculator16.gif")));  calcMenu.addActionListener(this);  p_table.getSelectionModel().addListSelectionListener(this);  enableButtons();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void onDraw(){  if (mIsControllerAttached) {    return;  }  if (!mTrimmed) {    FLog.wtf(DraweeEventTracker.class,"%x: Draw requested for a non-attached controller %x. %s",System.identityHashCode(this),System.identityHashCode(mController),toString());  }  mTrimmed=false;  mIsHolderAttached=true;  mIsVisible=true;  attachOrDetachController();}  }
class C{  public boolean isChangeTabOnFocus(){  return changeTabOnFocus;}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer(super.toString());  result.append(Tools.getLineSeparator());  result.append(this.hypothesis);  return result.toString();}  }
class C{  public static void writeToFileComplex_3D(String format,int n1,int n2,int n3,double[][][] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int k=0; k < 2 * n3; k=k + 2) {      out.newLine();      out.write("(:,:," + k / 2 + ")=");      out.newLine();      out.newLine();      for (int i=0; i < n1; i++) {        for (int j=0; j < n2; j++) {          if (x[i][j][k + 1] == 0) {            out.write(String.format(format,x[i][j][k]) + "\t");            continue;          }          if (x[i][j][k] == 0) {            out.write(String.format(format,x[i][j][k + 1]) + "i\t");            continue;          }          if (x[i][j][k + 1] < 0) {            out.write(String.format(format,x[i][j][k]) + " - " + String.format(format,-x[i][j][k + 1])+ "i\t");            continue;          }          out.write(String.format(format,x[i][j][k]) + " + " + String.format(format,x[i][j][k + 1])+ "i\t");        }        out.newLine();      }    }    out.newLine();    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  protected synchronized byte[] engineGenerateSeed(int numBytes){  byte[] myBytes;  if (numBytes < 0) {    throw new NegativeArraySizeException(Integer.toString(numBytes));  }  if (numBytes == 0) {    return EmptyArray.BYTE;  }  if (myRandom == null) {    myRandom=new SHA1PRNG_SecureRandomImpl();    myRandom.engineSetSeed(getRandomBytes(DIGEST_LENGTH));  }  myBytes=new byte[numBytes];  myRandom.engineNextBytes(myBytes);  return myBytes;}  }
class C{  public MemorizingTrustManager(Context m){  init(m);  this.appTrustManager=getTrustManager(appKeyStore);  this.defaultTrustManager=getTrustManager(null);}  }
class C{  protected SVGOMSymbolElement(){}  }
class C{  public static SynthStyle updateStyle(SeaGlassContext context,SeaglassUI ui){  SynthStyle newStyle=SynthLookAndFeel.getStyle(context.getComponent(),context.getRegion());  SynthStyle oldStyle=context.getStyle();  if (newStyle != oldStyle) {    if (oldStyle != null) {      oldStyle.uninstallDefaults(context);    }    context.setStyle(newStyle);    if (newStyle instanceof SeaGlassStyle) {      ((SeaGlassStyle)newStyle).installDefaults(context,ui);    }  }  return newStyle;}  }
class C{  private void decorateFromPendingChanges(final IResource resource,final IDecoration decoration,final TFSRepository repository,final String resourcePath){  if (resourcePath == null) {    return;  } else   if (resource.getType() == IResource.FILE) {    decorateFromFilePendingChanges(resource,decoration,repository,resourcePath);  } else   if (decorateParentPendingChanges) {    decorateFromFolderPendingChanges(resource,decoration,repository,resourcePath);  }}  }
class C{  public void testUnivariateTEVariousNumberThreads() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={-0.0096556};  System.out.println("Kraskov TE - multivariate coupled data 1, k=2,l=2 (0->2)");  System.out.println(" with various numbers of threads:");  System.out.println(" -- 1 thread:");  NUM_THREADS_TO_USE="1";  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1),kNNs,expectedFromTRENTOOL);  System.out.println(" -- 2 threads:");  NUM_THREADS_TO_USE="2";  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1),kNNs,expectedFromTRENTOOL);  System.out.println(" -- 3 threads:");  NUM_THREADS_TO_USE="3";  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1),kNNs,expectedFromTRENTOOL);  System.out.println(" -- all threads:");  NUM_THREADS_TO_USE=ConditionalMutualInfoCalculatorMultiVariateKraskov.USE_ALL_THREADS;  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1),kNNs,expectedFromTRENTOOL);  double[] expectedValue=new double[]{0.026517704};  NUM_THREADS_TO_USE="2";  checkTEForGivenData(MatrixUtils.select(MatrixUtils.selectColumn(data,0),0,501),MatrixUtils.select(MatrixUtils.selectColumn(data,1),0,501),kNNs,expectedValue);  NUM_THREADS_TO_USE="3";  checkTEForGivenData(MatrixUtils.select(MatrixUtils.selectColumn(data,0),0,501),MatrixUtils.select(MatrixUtils.selectColumn(data,1),0,501),kNNs,expectedValue);  NUM_THREADS_TO_USE=NUM_THREADS_TO_USE_DEFAULT;}  }
class C{  protected Instance createInstance(Instances header,Element parent) throws Exception {  Instance result;  Element node;  Element child;  boolean sparse;  int i;  int index;  Vector<Element> list;  Vector<Element> subList;  double[] values;  String content;  double weight;  Instances data;  result=null;  sparse=(parent.getAttribute(ATT_TYPE).equals(VAL_SPARSE));  values=new double[header.numAttributes()];  if (parent.getAttribute(ATT_WEIGHT).length() != 0) {    weight=Double.parseDouble(parent.getAttribute(ATT_WEIGHT));  } else {    weight=1.0;  }  list=getChildTags(parent,TAG_VALUE);  for (i=0; i < list.size(); i++) {    node=list.get(i);    if (sparse) {      index=Integer.parseInt(node.getAttribute(ATT_INDEX)) - 1;    } else {      index=i;    }    if (node.getAttribute(ATT_MISSING).equals(VAL_YES)) {      values[index]=Utils.missingValue();    } else {      content=getContent(node);switch (header.attribute(index).type()) {case Attribute.NUMERIC:        values[index]=Double.parseDouble(content);      break;case Attribute.DATE:    values[index]=header.attribute(index).parseDate(content);  break;case Attribute.NOMINAL:values[index]=header.attribute(index).indexOfValue(content);break;case Attribute.STRING:values[index]=header.attribute(index).addStringValue(content);break;case Attribute.RELATIONAL:subList=getChildTags(node,TAG_INSTANCES);child=subList.get(0);data=createInstances(header.attribute(index).relation(),child);values[index]=header.attribute(index).addRelation(data);break;default :throw new Exception("Attribute type " + header.attribute(index).type() + " is not supported!");}}}if (sparse) {result=new SparseInstance(weight,values);} else {result=new DenseInstance(weight,values);}return result;}  }
class C{  public void correctBounds(ComponentWrapper comp){}  }
class C{  protected StringEntity serializeObjectAsJson(Object o) throws JsonProcessingException {  String payload=objectMapper.writeValueAsString(o);  return new StringEntity(payload,ContentType.APPLICATION_JSON);}  }
class C{  public VectorStoreFormat indexfileformat(){  return indexfileformat;}  }
class C{  public void seriesChanged(SeriesChangeEvent event){  this.lastEvent=event;}  }
class C{  public MongoHistory(SharedMongoResource mongo){  this.mongo=mongo;}  }
class C{  public void columnMoved(TableColumnModelEvent e){  repaint();}  }
class C{  public boolean isModifiedOutsideEditor(){  return loc.getActualLastModified() > getLastSaveOrLoadTime();}  }
class C{  private static Object parseClassValue(ByteBuffer buf,ConstantPool constPool,Class<?> container){  int classIndex=buf.getShort() & 0xFFFF;  try {    try {      String sig=constPool.getUTF8At(classIndex);      return parseSig(sig,container);    } catch (    IllegalArgumentException ex) {      return constPool.getClassAt(classIndex);    }  } catch (  NoClassDefFoundError e) {    return new TypeNotPresentExceptionProxy("[unknown]",e);  }catch (  TypeNotPresentException e) {    return new TypeNotPresentExceptionProxy(e.typeName(),e.getCause());  }}  }
class C{  public static double gaussian(){  double r, x, y;  do {    x=uniform(-1.0,1.0);    y=uniform(-1.0,1.0);    r=x * x + y * y;  } while (r >= 1 || r == 0);  return x * Math.sqrt(-2 * Math.log(r) / r);}  }
class C{  public static void buildHeadlessWithN4jscJar(Collection<? extends File> workspaceRoots,String... options){  Objects.requireNonNull(workspaceRoots);  Objects.requireNonNull(options);  if (workspaceRoots.isEmpty())   throw new IllegalArgumentException("at least one workspace root must be given");  final List<String> workspaceRootsAbsolute=workspaceRoots.stream().map(null).collect(Collectors.toList());  final List<String> cmdline=new ArrayList<>();  cmdline.addAll(Arrays.asList("java","-Xmx2000m","-jar",getAbsoluteRunnableN4jsc().getAbsolutePath(),"-t","allprojects"));  cmdline.addAll(Arrays.asList(options));  cmdline.add("-pl");  cmdline.addAll(workspaceRootsAbsolute);  ProcessBuilder pb=new ProcessBuilder(cmdline);  pb.directory(null);  pb.inheritIO();  LOGGER.info("current directory is: " + new File("").getAbsolutePath());  LOGGER.info("spawning process with command: " + Joiner.on(" ").join(cmdline));  boolean timeout=false;  int exitCode=0;  boolean gotExitCode=false;  Exception ex=null;  System.out.println("--- start of output of external process");  try {    Process ps=pb.start();    timeout=!ps.waitFor(PROCESS_TIMEOUT_IN_MINUTES,TimeUnit.MINUTES);    if (!timeout) {      exitCode=ps.exitValue();      gotExitCode=true;    }  } catch (  Exception e) {    ex=e;  }  System.out.println("--- end of output of external process");  LOGGER.info("external process done (exit code: " + (gotExitCode ? exitCode : "<none>") + ")");  if (ex != null) {    final String msg="exception while running external process";    LOGGER.error(msg,ex);    ex.printStackTrace();    throw new IllegalStateException(msg,ex);  } else   if (timeout) {    final String msg="external process timed out (after " + PROCESS_TIMEOUT_IN_MINUTES + " minutes)";    LOGGER.error(msg);    throw new IllegalStateException(msg);  } else   if (exitCode != 0) {    final String msg="external process returned non-zero exit code: " + exitCode;    LOGGER.error(msg);    throw new IllegalStateException(msg);  }}  }
class C{  public void delete(Object element,boolean testForEquality){  int index=indexOfFromTo(element,0,size - 1,testForEquality);  if (index >= 0)   removeFromTo(index,index);}  }
class C{  public void zoomReset(){  if (mFitZoom != null) {    mFitZoom.apply();    mZoomIn.notifyZoomResetListeners();    repaint();  }}  }
class C{  public VcpcRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  protected int executeCriteriaReturnCountScrOrgsList(Locale locale,StringBuffer query) throws HibernateException {  int result=0;  Session session=null;  try {    session=getSession();    StringBuffer querySize=new StringBuffer();    querySize.append("SELECT COUNT(*) FROM ");    querySize.append((getScrOrgLanguage(locale.getLanguage())).getName());    querySize.append(" AS SCR WHERE ");    querySize.append(query);    result=((Integer)session.iterate(querySize.toString()).next()).intValue();  }  finally {    this.closeSession(session);  }  return result;}  }
class C{  public CryptoException(final Throwable cause){  super(cause);}  }
class C{  public final String toString(){  NumberFormat nf=NumberFormatUtil.getInstance().getNumberFormat();  StringBuilder buf=new StringBuilder();  int numVars=getVariableNames().size();  buf.append(getSampleSize()).append("\n");  for (int i=0; i < numVars; i++) {    String name=getVariableNames().get(i);    buf.append(name).append("\t");  }  buf.append("\n");  for (int j=0; j < numVars; j++) {    for (int i=0; i <= j; i++) {      buf.append(nf.format(getValue(i,j))).append("\t");    }    buf.append("\n");  }  return buf.toString();}  }
class C{  private void removeRoleFromRootTenant(VirtualDataCenter vdc,TenantOrg rootTenant){  StringSetMap vdcRoles=vdc.getRoleAssignments();  for (  Map.Entry<String,AbstractChangeTrackingSet<String>> roleAssignment : vdcRoles.entrySet()) {    String uid=roleAssignment.getKey();    Iterator<String> itr=roleAssignment.getValue().iterator();    while (itr.hasNext()) {      String role=itr.next();      rootTenant.removeRole(uid,role);    }  }}  }
class C{  public void compileExpr(ASTree e) throws CompileError {  if (e != null)   gen.compileExpr(e);}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive())   return "";  Integer M_Product_ID=(Integer)value;  if (M_Product_ID == null || M_Product_ID.intValue() == 0)   return "";  int M_Locator_ID=0;  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_Product_ID") == M_Product_ID.intValue() && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID") != 0) {    mTab.setValue("M_AttributeSetInstance_ID",new Integer(Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID")));    M_Locator_ID=Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_Locator_ID");    if (M_Locator_ID != 0)     mTab.setValue("M_Locator_ID",new Integer(M_Locator_ID));  } else   mTab.setValue("M_AttributeSetInstance_ID",null);  int M_Warehouse_ID=Env.getContextAsInt(ctx,WindowNo,"M_Warehouse_ID");  boolean IsSOTrx="Y".equals(Env.getContext(ctx,WindowNo,"IsSOTrx"));  if (IsSOTrx) {    return "";  }  MProduct product=MProduct.get(ctx,M_Product_ID.intValue());  mTab.setValue("C_UOM_ID",new Integer(product.getC_UOM_ID()));  BigDecimal QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");  mTab.setValue("MovementQty",QtyEntered);  if (M_Locator_ID != 0)   ; else   if (product.getM_Locator_ID() != 0) {    MLocator loc=MLocator.get(ctx,product.getM_Locator_ID());    if (M_Warehouse_ID == loc.getM_Warehouse_ID())     mTab.setValue("M_Locator_ID",new Integer(product.getM_Locator_ID())); else     log.fine("No Locator for M_Product_ID=" + M_Product_ID + " and M_Warehouse_ID="+ M_Warehouse_ID);  } else   log.fine("No Locator for M_Product_ID=" + M_Product_ID);  return "";}  }
class C{  public <K2,V2>JavaPairRDD<Tuple2<K,V>,Option<V2>> outerJoinGeodeRegion(String regionPath,Function<Tuple2<K,V>,K2> func,GeodeConnectionConf connConf){  GeodeOuterJoinRDD<Tuple2<K,V>,K2,V2> rdd=rddf.outerJoinGeodeRegion(regionPath,func,connConf);  ClassTag<Tuple2<K,V>> kt=fakeClassTag();  ClassTag<Option<V2>> vt=fakeClassTag();  return new JavaPairRDD<>(rdd,kt,vt);}  }
class C{  public IntArraySpliterator(int[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  public static void main(String argv[]){  if (argv.length == 0) {    System.out.println("Usage : java PTB2TextLexer <inputfile>");  } else {    for (int i=0; i < argv.length; i++) {      PTB2TextLexer scanner=null;      try {        scanner=new PTB2TextLexer(new java.io.FileReader(argv[i]));        while (!scanner.yy_atEOF)         scanner.next();      } catch (      java.io.FileNotFoundException e) {        System.out.println("File not found : \"" + argv[i] + "\"");      }catch (      java.io.IOException e) {        System.out.println("IO error scanning file \"" + argv[i] + "\"");        System.out.println(e);      }catch (      Exception e) {        System.out.println("Unexpected exception:");        e.printStackTrace();      }    }  }}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public static Map<String,String> readTnsNames(@Nullable File oraHome,boolean checkTnsAdmin){  File tnsNamesFile=findTnsNamesFile(oraHome,checkTnsAdmin);  if (tnsNamesFile != null) {    return parseTnsNames(tnsNamesFile);  } else {    return Collections.emptyMap();  }}  }
class C{  public PointLatLonTime(final PointLatLon spatialPoint,final Long timestamp){  this.spatialPoint=spatialPoint;  this.timestamp=timestamp;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;default :return null;}}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public List<byte[]> mget(final byte[]... keys){  checkIsInMulti();  client.mget(keys);  return client.getBinaryMultiBulkReply();}  }
class C{  public static AmqpConnection connect(URI broker,String username,String password) throws Exception {  if (username == null && password != null) {    throw new IllegalArgumentException("Password must be null if user name value is null");  }  AmqpClient client=new AmqpClient(broker,username,password);  return client.connect();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:28.167 -0500",hash_original_method="CD75AC17D7F386D86DC2E6459CAA03CB",hash_generated_method="5FF28E01CC55A0DCA7583B0CF55EFA69") static void _dumpAsString(String indent,boolean verbose,DERObject obj,StringBuffer buf){  String nl=System.getProperty("line.separator");  if (obj instanceof ASN1Sequence) {    Enumeration e=((ASN1Sequence)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSequence) {      buf.append("BER Sequence");    } else     if (obj instanceof DERSequence) {      buf.append("DER Sequence");    } else {      buf.append("Sequence");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null || o.equals(DERNull.INSTANCE)) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof DERObject) {        _dumpAsString(tab,verbose,(DERObject)o,buf);      } else {        _dumpAsString(tab,verbose,((DEREncodable)o).getDERObject(),buf);      }    }  } else   if (obj instanceof DERTaggedObject) {    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERTaggedObject) {      buf.append("BER Tagged [");    } else {      buf.append("Tagged [");    }    DERTaggedObject o=(DERTaggedObject)obj;    buf.append(Integer.toString(o.getTagNo()));    buf.append(']');    if (!o.isExplicit()) {      buf.append(" IMPLICIT ");    }    buf.append(nl);    if (o.isEmpty()) {      buf.append(tab);      buf.append("EMPTY");      buf.append(nl);    } else {      _dumpAsString(tab,verbose,o.getObject(),buf);    }  } else   if (obj instanceof BERSet) {    Enumeration e=((ASN1Set)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    buf.append("BER Set");    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof DERObject) {        _dumpAsString(tab,verbose,(DERObject)o,buf);      } else {        _dumpAsString(tab,verbose,((DEREncodable)o).getDERObject(),buf);      }    }  } else   if (obj instanceof DERSet) {    Enumeration e=((ASN1Set)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    buf.append("DER Set");    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof DERObject) {        _dumpAsString(tab,verbose,(DERObject)o,buf);      } else {        _dumpAsString(tab,verbose,((DEREncodable)o).getDERObject(),buf);      }    }  } else   if (obj instanceof DERObjectIdentifier) {    buf.append(indent + "ObjectIdentifier(" + ((DERObjectIdentifier)obj).getId()+ ")"+ nl);  } else   if (obj instanceof DERBoolean) {    buf.append(indent + "Boolean(" + ((DERBoolean)obj).isTrue()+ ")"+ nl);  } else   if (obj instanceof DERInteger) {    buf.append(indent + "Integer(" + ((DERInteger)obj).getValue()+ ")"+ nl);  } else   if (obj instanceof BERConstructedOctetString) {    ASN1OctetString oct=(ASN1OctetString)obj;    buf.append(indent + "BER Constructed Octet String" + "["+ oct.getOctets().length+ "] ");    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,oct.getOctets()));    } else {      buf.append(nl);    }  } else   if (obj instanceof DEROctetString) {    ASN1OctetString oct=(ASN1OctetString)obj;    buf.append(indent + "DER Octet String" + "["+ oct.getOctets().length+ "] ");    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,oct.getOctets()));    } else {      buf.append(nl);    }  } else   if (obj instanceof DERBitString) {    DERBitString bt=(DERBitString)obj;    buf.append(indent + "DER Bit String" + "["+ bt.getBytes().length+ ", "+ bt.getPadBits()+ "] ");    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,bt.getBytes()));    } else {      buf.append(nl);    }  } else   if (obj instanceof DERIA5String) {    buf.append(indent + "IA5String(" + ((DERIA5String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTF8String) {    buf.append(indent + "UTF8String(" + ((DERUTF8String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERPrintableString) {    buf.append(indent + "PrintableString(" + ((DERPrintableString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERVisibleString) {    buf.append(indent + "VisibleString(" + ((DERVisibleString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERBMPString) {    buf.append(indent + "BMPString(" + ((DERBMPString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERT61String) {    buf.append(indent + "T61String(" + ((DERT61String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTCTime) {    buf.append(indent + "UTCTime(" + ((DERUTCTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof DERGeneralizedTime) {    buf.append(indent + "GeneralizedTime(" + ((DERGeneralizedTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof DERUnknownTag) {    buf.append(indent + "Unknown " + Integer.toString(((DERUnknownTag)obj).getTag(),16)+ " "+ new String(Hex.encode(((DERUnknownTag)obj).getData()))+ nl);  } else   if (obj instanceof BERApplicationSpecific) {    buf.append(outputApplicationSpecific("BER",indent,verbose,obj,nl));  } else   if (obj instanceof DERApplicationSpecific) {    buf.append(outputApplicationSpecific("DER",indent,verbose,obj,nl));  } else   if (obj instanceof DEREnumerated) {    DEREnumerated en=(DEREnumerated)obj;    buf.append(indent + "DER Enumerated(" + en.getValue()+ ")"+ nl);  } else   if (obj instanceof DERExternal) {    DERExternal ext=(DERExternal)obj;    buf.append(indent + "External " + nl);    String tab=indent + TAB;    if (ext.getDirectReference() != null) {      buf.append(tab + "Direct Reference: " + ext.getDirectReference().getId()+ nl);    }    if (ext.getIndirectReference() != null) {      buf.append(tab + "Indirect Reference: " + ext.getIndirectReference().toString()+ nl);    }    if (ext.getDataValueDescriptor() != null) {      _dumpAsString(tab,verbose,ext.getDataValueDescriptor(),buf);    }    buf.append(tab + "Encoding: " + ext.getEncoding()+ nl);    _dumpAsString(tab,verbose,ext.getExternalContent(),buf);  } else {    buf.append(indent + obj.toString() + nl);  }}  }
class C{  private void clearReport(){  textArea.setText("");}  }
class C{  public boolean __eq__(final Object rhs){  return getBigInteger(this).equals(getBigInteger(rhs));}  }
class C{  public boolean isDynamic(){  return myDynamic;}  }
class C{  public void chainWave(MowzieModelRenderer[] boxes,float speed,float degree,double rootOffset,float f,float f1){  int numberOfSegments=boxes.length;  float offset=(float)((rootOffset * Math.PI) / (2 * numberOfSegments));  for (int i=0; i < numberOfSegments; i++)   boxes[i].rotateAngleX+=MathHelper.cos(f * speed + offset * i) * f1 * degree;}  }
class C{  @SuppressWarnings({"UnusedParameters"}) protected void endMoveEntries(BufferedImage oldBackingImage,BufferedImage newBackingImage){  if (this.g != null) {    this.g.dispose();    this.g=null;  }  this.markDirty(0,0,newBackingImage.getWidth(),newBackingImage.getHeight());}  }
class C{  public SteadyStateBreeder(){  bp=null;  deselectors=null;}  }
class C{  public static int deleteExpiredHistory(EntityManager em){  requireArgument(em != null,"Entity manager cannot be null.");  Query query=em.createNamedQuery("History.cullExpired");  query.setParameter("expirationDate",new Date(System.currentTimeMillis() - (2 * MILLIS_PER_WEEK)));  return query.executeUpdate();}  }
class C{  @Override public void start(){  getLogger().info("Starting the Kubernetes-based discovery");  getLogger().info("Looking for nodes from namespace " + namespace + " with label '"+ label+ "' set to '"+ labelValue+ "'.");}  }
class C{  private void updatePercentagesAndAdjustmentWeights(int span){  adjustmentWeights=new int[columnRequirements.length];  for (int i=0; i < columnRequirements.length; i++) {    adjustmentWeights[i]=0;  }  if (relativeCells) {    percentages=new int[columnRequirements.length];  } else {    percentages=null;  }  int nrows=getRowCount();  for (int rowIndex=0; rowIndex < nrows; rowIndex++) {    RowView row=getRow(rowIndex);    int col=0;    int ncells=row.getViewCount();    for (int cell=0; cell < ncells; cell++, col++) {      View cv=row.getView(cell);      for (; row.isFilled(col); col++)       ;      int rowSpan=getRowsOccupied(cv);      int colSpan=getColumnsOccupied(cv);      AttributeSet a=cv.getAttributes();      CSS.LengthValue lv=(CSS.LengthValue)a.getAttribute(CSS.Attribute.WIDTH);      if (lv != null) {        int len=(int)(lv.getValue(span) / colSpan + 0.5f);        for (int i=0; i < colSpan; i++) {          if (lv.isPercentage()) {            percentages[col + i]=Math.max(percentages[col + i],len);            adjustmentWeights[col + i]=Math.max(adjustmentWeights[col + i],WorstAdjustmentWeight);          } else {            adjustmentWeights[col + i]=Math.max(adjustmentWeights[col + i],WorstAdjustmentWeight - 1);          }        }      }      col+=colSpan - 1;    }  }}  }
class C{  public static void tick(RobotState state){  tickers.tick();  for (  StateListener.Ticker ticker : tickers)   ticker.tickState(state);}  }
class C{  public Name(String name) throws IOException {  rdn=new DNParser(name).parse();}  }
class C{  private static File igniteHadoopConfig(String igniteHome){  Path path=Paths.get(igniteHome,"modules","hadoop","config");  if (!Files.exists(path))   path=Paths.get(igniteHome,"config","hadoop");  if (Files.exists(path))   return path.toFile(); else   return new File(igniteHome,"docs");}  }
class C{  public PrefixResolverDefault(Node xpathExpressionContext){  m_context=xpathExpressionContext;}  }
class C{  public void start(){  httpClient=HttpClientBuilder.create().build();}  }
class C{  URL createResumableUploadSession(URL createMediaUrl,String title,MediaFileSource file) throws IOException, ServiceException {  String mimeType=file.getContentType();  GDataRequest request=createRequest(GDataRequest.RequestType.INSERT,createMediaUrl,new ContentType(mimeType));  initResumableMediaRequest(request,file,title);  try {    startVersionScope();    request.execute();    return new URL(request.getResponseHeader("Location"));  }  finally {    endVersionScope();    request.end();  }}  }
class C{  public void onStop(){}  }
class C{  public SimpleStringProperty executionInfoProperty(){  return this.executionInfoProperty;}  }
class C{  public final T blockLast(Duration d){  return blockLastMillis(d.toMillis());}  }
class C{  public void addModule(final MemoryModule module){  Preconditions.checkNotNull(module,"IE00756: Module argument can not be null");  if (addressSpaceModules.contains(module)) {    throw new IllegalStateException("IE00757: Module can not be added twice");  }  addressSpaceModules.add(module);  moduleAddresses.add(module.getBaseAddress().getAddress());  moduleByAddress.put(module.getBaseAddress().getAddress(),module);  for (  final ProcessManagerListener listener : listeners) {    try {      listener.addedModule(module);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public String fileTipText(){  return "The file to read from/write to.";}  }
class C{  public final PositionRecord loadPositionById(final String id){  if (id == null) {    throw new IllegalArgumentException("Position id is null");  }  String selection=null;  String[] selectionArgs=null;  selection=Schema.COL_ID + " = ?";  selectionArgs=new String[]{id};  final Cursor cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,selection,selectionArgs,null);  PositionRecord position=new PositionRecord();  if (cursor.moveToNext()) {    position=positionFromCursor(cursor);  }  cursor.close();  return position;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public InlineQueryResultLocation.InlineQueryResultLocationBuilder title(String title){  this.title=title;  return this;}  }
class C{  private void writeTransportHeader(DataOutputStream out) throws RemoteException {  try {    DataOutputStream dataOut=new DataOutputStream(out);    dataOut.writeInt(TransportConstants.Magic);    dataOut.writeShort(TransportConstants.Version);  } catch (  IOException e) {    throw new ConnectIOException("error writing JRMP transport header",e);  }}  }
class C{  public static void v(String msg,Throwable throwable){  if (null == msg || null == throwable || null == sXLogConfig) {    return;  }  if (allowConsoleLogPrint(LogLevel.V)) {    Log.v(getDefaultTag(),msg,throwable);  }  if (allowFileLogPrint(LogLevel.V)) {    FileLogHelper.getInstance().logToFile(msg,throwable,getDefaultTag(),LogLevel.V);  }}  }
class C{  void add(Map<File,SharedFsTimeData> newFiles){  assert newFiles != null;synchronized (mux) {    files.putAll(newFiles);    mux.notifyAll();  }}  }
class C{  private ClassDefinition accessBase(Environment env,Context ctx){  if (field.isPrivate()) {    ClassDefinition cdef=field.getClassDefinition();    ClassDefinition ctxClass=ctx.field.getClassDefinition();    if (cdef == ctxClass) {      return null;    }    return cdef;  } else   if (field.isProtected()) {    if (superBase == null) {      return null;    }    ClassDefinition cdef=field.getClassDefinition();    ClassDefinition ctxClass=ctx.field.getClassDefinition();    if (cdef.inSamePackage(ctxClass)) {      return null;    }    return superBase;  } else {    return null;  }}  }
class C{  protected void paintComponent(Component comp,Graphics g){  if (comp != null) {    comp.paint(g);  }}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"Sales growth January 1995 to December 2000"};  List<Date[]> dates=new ArrayList<Date[]>();  List<double[]> values=new ArrayList<double[]>();  Date[] dateValues=new Date[]{new Date(95,0,1),new Date(95,3,1),new Date(95,6,1),new Date(95,9,1),new Date(96,0,1),new Date(96,3,1),new Date(96,6,1),new Date(96,9,1),new Date(97,0,1),new Date(97,3,1),new Date(97,6,1),new Date(97,9,1),new Date(98,0,1),new Date(98,3,1),new Date(98,6,1),new Date(98,9,1),new Date(99,0,1),new Date(99,3,1),new Date(99,6,1),new Date(99,9,1),new Date(100,0,1),new Date(100,3,1),new Date(100,6,1),new Date(100,9,1),new Date(100,11,1)};  dates.add(dateValues);  values.add(new double[]{4.9,5.3,3.2,4.5,6.5,4.7,5.8,4.3,4,2.3,-0.5,-2.9,3.2,5.5,4.6,9.4,4.3,1.2,0,0.4,4.5,3.4,4.5,4.3,4});  int[] colors=new int[]{Color.BLUE};  PointStyle[] styles=new PointStyle[]{PointStyle.POINT};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  setChartSettings(renderer,"Sales growth","Date","%",dateValues[0].getTime(),dateValues[dateValues.length - 1].getTime(),-4,11,Color.GRAY,Color.LTGRAY);  renderer.setYLabels(10);  renderer.setXRoundedLabels(false);  XYSeriesRenderer xyRenderer=(XYSeriesRenderer)renderer.getSeriesRendererAt(0);  FillOutsideLine fill=new FillOutsideLine(FillOutsideLine.Type.BOUNDS_ABOVE);  fill.setColor(Color.GREEN);  xyRenderer.addFillOutsideLine(fill);  fill=new FillOutsideLine(FillOutsideLine.Type.BOUNDS_BELOW);  fill.setColor(Color.MAGENTA);  xyRenderer.addFillOutsideLine(fill);  fill=new FillOutsideLine(FillOutsideLine.Type.BOUNDS_ABOVE);  fill.setColor(Color.argb(255,0,200,100));  fill.setFillRange(new int[]{10,19});  xyRenderer.addFillOutsideLine(fill);  return ChartFactory.getTimeChartIntent(context,buildDateDataset(titles,dates,values),renderer,"MMM yyyy");}  }
class C{  AbstractMap.SimpleImmutableEntry<K,V> createSnapshot(){  Object v=value;  if (v == null || v == this || v == BASE_HEADER)   return null;  @SuppressWarnings("unchecked") V vv=(V)v;  return new AbstractMap.SimpleImmutableEntry<K,V>(key,vv);}  }
class C{  public void clear(int col,int row){  cells[col][row]=EMPTY;}  }
class C{  public String toString(){  if (m_IndexString.equals("")) {    return "No index set";  }  if (m_Upper == -1) {    throw new RuntimeException("Upper limit has not been specified");  }  return m_IndexString;}  }
class C{  public String toString(){  return getClass().getSimpleName().toLowerCase() + " " + getLabel()+ ", by={"+ getBy().toString()+ "}";}  }
class C{  public void handlePresenceInfoNotification(ContactId contact,PidfDocument presence){  if (sLogger.isActivated()) {    sLogger.debug("Handle event presence info notification for " + contact);  }}  }
class C{  public void testQuerySerialize() throws Throwable {  callerContext.execute(null);  await();  ServerSessionContext session=state.getStateMachine().executor().context().sessions().getSession(1);  assertNotNull(session);  assertEquals(session.id(),1);  assertEquals(session.getTimestamp(),timestamp);  assertEquals(session.getCommandSequence(),0);  callerContext.execute(null);  callerContext.execute(null);  await(1000,2);  assertEquals(session.getCommandSequence(),1);  assertEquals(session.getTimestamp(),timestamp + 100);}  }
class C{  public void run(){  getCache().getCachePerfStats().decDiskTasksWaiting();  if (!this.scheduled)   return;  boolean compactedSuccessfully=false;  try {    SystemFailure.checkFailure();    if (isClosing()) {      return;    }    if (!this.compactorEnabled)     return;    final CompactableOplog[] oplogs=this.scheduledOplogs;    this.me=Thread.currentThread();    try {      String tName="OplogCompactor " + getName() + " for oplog "+ oplogs[0].toString();      Thread.currentThread().setName(tName);      StringBuffer buffer=new StringBuffer();      for (int j=0; j < oplogs.length; ++j) {        buffer.append(oplogs[j].toString());        if (j + 1 < oplogs.length) {          buffer.append(", ");        }      }      String ids=buffer.toString();      logger.info(LocalizedMessage.create(LocalizedStrings.DiskRegion_COMPACTION_OPLOGIDS,new Object[]{getName(),ids}));      if (LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER) {        CacheObserverHolder.getInstance().beforeGoingToCompact();      }      compactedSuccessfully=compact();      if (compactedSuccessfully) {        if (LocalRegion.ISSUE_CALLBACKS_TO_CACHE_OBSERVER) {          CacheObserverHolder.getInstance().afterHavingCompacted();        }      } else {        logger.warn(LocalizedMessage.create(LocalizedStrings.DiskRegion_COMPACTION_FAILURE,new Object[]{getName(),ids}));      }    } catch (    DiskAccessException dae) {      handleDiskAccessException(dae);      throw dae;    }catch (    KillCompactorException ex) {      if (logger.isDebugEnabled()) {        logger.debug("compactor thread terminated by test");      }      throw ex;    } finally {      if (compactedSuccessfully) {        this.me.setName("Idle OplogCompactor");      }      this.me=null;    }  } catch (  CancelException ignore) {  } finally {    reschedule(compactedSuccessfully);  }}  }
class C{  public static int bytesRequiredWhenCopied(Object fromObj,RVMClass type){  return JavaHeader.bytesRequiredWhenCopied(fromObj,type);}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public static void main(String[] args) throws Exception {  String topologyName="slidingWindowCounts";  if (args.length >= 1) {    topologyName=args[0];  }  boolean runLocally=true;  if (args.length >= 2 && args[1].equalsIgnoreCase("remote")) {    runLocally=false;  }  LOG.info("Topology name: " + topologyName);  RollingTopWords rtw=new RollingTopWords(topologyName);  if (runLocally) {    LOG.info("Running in local mode");    rtw.runLocally();  } else {    LOG.info("Running in remote (cluster) mode");    rtw.runRemotely();  }}  }
class C{  private void loadDrawerFragments(){  getSupportFragmentManager().beginTransaction().replace(R.id.nav_drawer_container,new NavigationDrawerFragment()).commit();  mQueueDrawerFragment=new QueueDrawerFragment();  getSupportFragmentManager().beginTransaction().replace(R.id.current_queue_drawer_container,mQueueDrawerFragment).commit();}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new DataLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;    len-=gapLen;    inOff+=gapLen;    while (len > blockSize) {      System.arraycopy(in,inOff,buf,bufOff,blockSize);      resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);      System.arraycopy(buf,blockSize,buf,0,blockSize);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  @SuppressWarnings("empty-statement") public int nextToken() throws IOException {  if (pushedBack) {    pushedBack=false;    return ttype;  }  byte ct[]=ctype;  sval=null;  int c=peekc;  if (c < 0)   c=NEED_CHAR;  if (c == SKIP_LF) {    c=read();    if (c < 0) {      startpos=endpos=readpos - 1;      return ttype=TT_EOF;    }    if (c == '\n')     c=NEED_CHAR;  }  if (c == NEED_CHAR) {    c=read();    if (c < 0) {      startpos=endpos=readpos - 1;      return ttype=TT_EOF;    }  }  ttype=c;  peekc=NEED_CHAR;  int ctype=c < 256 ? ct[c] : CT_ALPHA;  while ((ctype & CT_WHITESPACE) != 0) {    if (c == '\r') {      lineno++;      if (eolIsSignificantP) {        peekc=SKIP_LF;        startpos=endpos=readpos - 1;        return ttype=TT_EOL;      }      c=read();      if (c == '\n')       c=read();    } else {      if (c == '\n') {        lineno++;        if (eolIsSignificantP) {          startpos=endpos=readpos - 1;          return ttype=TT_EOL;        }      }      c=read();    }    if (c < 0) {      startpos=endpos=readpos;      return ttype=TT_EOF;    }    ctype=c < 256 ? ct[c] : CT_ALPHA;  }  startpos=readpos - 1;  hex:   if (((ctype & CT_DIGIT) != 0) && c == '0' && isParseHexNumbers) {    c=read();    if (c == 'x') {      int digits=0;      long hval=0;      while (digits < 16) {        c=read();        if (c >= '0' && c <= '9') {          hval=(hval << 4) | (c - '0');        } else         if (c >= 'A' && c <= 'F') {          hval=(hval << 4) | (c - 'A' + 10);        } else         if (c >= 'a' && c <= 'f') {          hval=(hval << 4) | (c - 'a' + 10);        } else {          unread(c);          if (digits == 0) {            sval="0x";            endpos=readpos - 1;            return ttype=TT_WORD;          } else {            nval=(double)hval;            endpos=readpos - 1;            return ttype=TT_NUMBER;          }        }        digits++;      }      nval=(double)hval;      endpos=readpos - 1;      return ttype=TT_NUMBER;    } else {      unread(c);      c='0';    }  }  digit:   if ((ctype & CT_DIGIT) != 0) {    int digits=0;    boolean neg=false;    if (c == '-') {      c=read();      if (c != '.' && (c < '0' || c > '9')) {        peekc=c;        if (('-' & CT_ALPHA) != 0) {          unread(c);          c='-';          break digit;        } else {          endpos=readpos - 1;          return ttype='-';        }      }      neg=true;    } else     if (c == '+') {      c=read();      if (c != '.' && (c < '0' || c > '9')) {        peekc=c;        if (('+' & CT_ALPHA) != 0) {          unread(c);          c='+';          break digit;        } else {          endpos=readpos - 1;          return ttype='-';        }      }      neg=false;    }    double v=0;    int decexp=0;    int seendot=0;    while (true) {      if (c == '.' && seendot == 0)       seendot=1; else       if ('0' <= c && c <= '9') {        digits++;        v=v * 10 + (c - '0');        decexp+=seendot;      } else       break;      c=read();    }    peekc=c;    if (decexp != 0) {      double denom=10;      decexp--;      while (decexp > 0) {        denom*=10;        decexp--;      }      v=v / denom;    }    nval=neg ? -v : v;    endpos=(c == -1) ? readpos - 1 : readpos - 2;    if (digits == 0) {      if (('.' & CT_ALPHA) != 0) {        unread(c);        if (neg) {          unread('.');          c='-';        } else {          read();          c='.';        }        break digit;      } else {        return ttype='.';      }    } else {      if (isParseExponents) {        if (c == 'E' || c == 'e') {          c=read();          digits=0;          neg=false;          if (c == '-') {            c=read();            if (c < '0' || c > '9') {              unread(c);              unread('E');              return ttype=TT_NUMBER;            }            neg=true;          }          v=0;          decexp=0;          while (true) {            if ('0' <= c && c <= '9') {              digits++;              v=v * 10 + (c - '0');            } else {              break;            }            c=read();          }          peekc=c;          nval*=Math.pow(10,(neg) ? -v : v);        }      }      return ttype=TT_NUMBER;    }  }  if ((ctype & CT_ALPHA) != 0) {    int i=0;    do {      if (i >= buf.length) {        char nb[]=new char[buf.length * 2];        System.arraycopy(buf,0,nb,0,buf.length);        buf=nb;      }      buf[i++]=(char)c;      c=read();      ctype=c < 0 ? CT_WHITESPACE : c < 256 ? ct[c] : CT_ALPHA;    } while ((ctype & (CT_ALPHA | CT_DIGIT)) != 0);    peekc=c;    sval=String.copyValueOf(buf,0,i);    if (forceLower)     sval=sval.toLowerCase();    endpos=(c == -1) ? readpos - 1 : readpos - 2;    return ttype=TT_WORD;  }  if ((ctype & CT_QUOTE) != 0) {    ttype=c;    int i=0;    int d=read();    while (d >= 0 && d != ttype && d != '\n' && d != '\r') {      if (d == '\\') {        c=read();        int first=c;        if (c >= '0' && c <= '7') {          c=c - '0';          int c2=read();          if ('0' <= c2 && c2 <= '7') {            c=(c << 3) + (c2 - '0');            c2=read();            if ('0' <= c2 && c2 <= '7' && first <= '3') {              c=(c << 3) + (c2 - '0');              d=read();            } else             d=c2;          } else           d=c2;        } else {switch (c) {case 'a':            c=0x7;          break;case 'b':        c='\b';      break;case 'f':    c=0xC;  break;case 'n':c='\n';break;case 'r':c='\r';break;case 't':c='\t';break;case 'v':c=0xB;break;}d=read();}} else {c=d;d=read();}if (i >= buf.length) {char nb[]=new char[buf.length * 2];System.arraycopy(buf,0,nb,0,buf.length);buf=nb;}buf[i++]=(char)c;}peekc=(d == ttype) ? NEED_CHAR : d;sval=String.copyValueOf(buf,0,i);endpos=readpos - 2;return ttype;}if (slashSlashCommentsP && c == slashSlash[0] || slashStarCommentsP && c == slashStar[0]) {if (c == slashStar[0] && slashStar.length == 1) {while ((c=read()) != starSlash[0]) {if (c == '\r') {lineno++;c=read();if (c == '\n') {c=read();}} else {if (c == '\n') {lineno++;c=read();}}if (c < 0) {endpos=readpos;return ttype=TT_EOF;}}return nextToken();} else if (c == slashSlash[0] && slashSlash.length == 1) {while ((c=read()) != '\n' && c != '\r' && c >= 0) ;peekc=c;return nextToken();} else {c=read();if (c == slashStar[1] && slashStarCommentsP) {int prevc=0;while ((c=read()) != starSlash[1] || prevc != starSlash[0]) {if (c == '\r') {lineno++;c=read();if (c == '\n') {c=read();}} else {if (c == '\n') {lineno++;c=read();}}if (c < 0) {endpos=readpos;return ttype=TT_EOF;}prevc=c;}return nextToken();} else if (c == slashSlash[1] && slashSlashCommentsP) {while ((c=read()) != '\n' && c != '\r' && c >= 0) ;peekc=c;return nextToken();} else {if ((ct[slashSlash[0]] & CT_COMMENT) != 0) {while ((c=read()) != '\n' && c != '\r' && c >= 0) ;peekc=c;return nextToken();} else {peekc=c;endpos=readpos - 2;return ttype=slashSlash[0];}}}}if ((ctype & CT_COMMENT) != 0) {while ((c=read()) != '\n' && c != '\r' && c >= 0) ;peekc=c;return nextToken();}endpos=readpos - 1;return ttype=c;}  }
class C{  private void initEventTypes(IoEventType... eventTypes){  if ((eventTypes == null) || (eventTypes.length == 0)) {    eventTypes=DEFAULT_EVENT_SET;  }  this.eventTypes=EnumSet.of(eventTypes[0],eventTypes);  if (this.eventTypes.contains(IoEventType.SESSION_CREATED)) {    this.eventTypes=null;    throw new IllegalArgumentException(IoEventType.SESSION_CREATED + " is not allowed.");  }}  }
class C{  public void addRepeatingExtension(Extension ext){  addRepeatingExtension(ext,ext.getClass());}  }
class C{  public EntityLoadingException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){  JMenu menu=(JMenu)menuItem;  ButtonModel model=menuItem.getModel();  Color oldColor=g.getColor();  boolean paintRollover=model.isRollover();  if (paintRollover && menu.isTopLevelMenu()) {    MenuElement[] menus=((JMenuBar)menu.getParent()).getSubElements();    for (int i=0; i < menus.length; i++) {      if (((JMenuItem)menus[i]).isSelected()) {        paintRollover=false;        break;      }    }  }  if ((model.isSelected() && (!menu.isTopLevelMenu())) || ((paintRollover || model.isArmed() || model.isSelected()))) {    g.setColor(selectionForeground);  }  if (menu.isTopLevelMenu())   g.setColor(new Color(35,35,35));  WinUtils.paintText(g,menuItem,textRect,text,0);  g.setColor(oldColor);}  }
class C{  public UserProjectObject(UserProjectObject parent){  this.id=parent.getId();  this.userId=parent.getUserId();  this.projectId=parent.getProjectId();  this.companyId=parent.getCompanyId();  this.customOrder=parent.getCustomOrder();}  }
class C{  byte[] commitData(){  try {    final byte[] buf=new byte[1024];    final DataOutputStream str=new DataOutputStream(new FixedOutputStream(buf));    try {      str.writeInt(m_size);      final Iterator<AllocBlock> iter=m_allocBlocks.iterator();      while (iter.hasNext()) {        final AllocBlock block=iter.next();        str.writeInt(block.m_addr);        for (int i=0; i < m_bitSize; i++) {          str.writeInt(block.m_commit[i]);        }      }      final int chk=ChecksumUtility.getCHK().checksum(buf,str.size());      str.writeInt(chk);    }  finally {      str.close();    }    return buf;  } catch (  IOException e) {    throw new StorageTerminalError("Error on write",e);  }}  }
class C{  private static String relativize_0(Path dest,Path home){  return home.relativize(dest).toString();}  }
class C{  protected static String shortenClassname(String nam,char c){  final int lastdot=nam.lastIndexOf(c);  if (lastdot >= 0) {    nam=nam.substring(lastdot + 1);  }  return nam;}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  void loginByNameInsecure() throws Exception {  System.out.println("Insecure Systems Inc. - login");  String name=input("Name?");  String password=input("Password?");  ResultSet rs=stat.executeQuery("SELECT * FROM USERS WHERE " + "NAME='" + name + "' AND PASSWORD='"+ password+ "'");  if (rs.next()) {    System.out.println("Welcome!");  } else {    System.out.println("Access denied!");  }}  }
class C{  public static Object max(Comparable c1,Comparable c2){  return (compare(c1,c2,false) >= 0 ? c1 : c2);}  }
class C{  public ReflectPermission(String name){  super(name);}  }
class C{  public int countTokens(){  int count=0;  int currpos=currentPosition;  while (currpos < maxPosition) {    currpos=skipDelimiters(currpos);    if (currpos >= maxPosition)     break;    currpos=scanToken(currpos);    count++;  }  return count;}  }
class C{  public Boolean deleteOneDiskCacheData(String originalKey){  if (mDiskLruCache == null || mDiskLruCache.isClosed()) {    open();  }  try {    String key=hashKeyForDisk(originalKey);    return mDiskLruCache.remove(key);  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  public final WifiRecord loadWifiById(final int id){  WifiRecord wifi=null;  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(ContentProvider.CONTENT_URI_WIFI,id),null,null,null,null);  if (cursor.moveToNext()) {    wifi=new WifiRecord(cursor.getString(cursor.getColumnIndex(Schema.COL_BSSID)),cursor.getString(cursor.getColumnIndex(Schema.COL_SSID)),cursor.getString(cursor.getColumnIndex(Schema.COL_CAPABILITIES)),cursor.getInt(cursor.getColumnIndex(Schema.COL_FREQUENCY)),cursor.getInt(cursor.getColumnIndex(Schema.COL_LEVEL)),cursor.getLong(cursor.getColumnIndex(Schema.COL_TIMESTAMP)),loadPositionById(cursor.getString(cursor.getColumnIndex(Schema.COL_BEGIN_POSITION_ID))),loadPositionById(cursor.getString(cursor.getColumnIndex(Schema.COL_END_POSITION_ID))),CatalogStatus.values()[cursor.getInt(cursor.getColumnIndex(Schema.COL_KNOWN_WIFI))]);  }  cursor.close();  return wifi;}  }
class C{  public static String generateToken(String scope,String email){  long now=clock.nowUtc().getMillis();  return Joiner.on(':').join(encodeToken(now,scope,email),now);}  }
class C{  @GET @Path(":availableAssociations/{key}") @Produces(MimeTypes.APPLICATION_JSON_UTF8) public Resolution selectionProviders(@PathParam("key") String key){  try {    loadOnePk(key);  } catch (  Exception e) {    logger.error("Cannot get key " + key,e);  }  return jsonAssociations();}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public void addAll(int position,T... items){  for (int i=position; i < (items.length + position); i++) {    mItems.add(i,items[i]);  }  notifyDataSetChanged();}  }
class C{  protected EditorKit createDefaultEditorKit(){  return new StyledEditorKit();}  }
class C{  @Override protected void onRestoreInstanceState(Bundle state){  ensureList();  super.onRestoreInstanceState(state);}  }
class C{  public NurserySize(){  boundedNursery=new BoundedNursery();  fixedNursery=new FixedNursery(boundedNursery);}  }
class C{  public static byte[] ipStrToBytes(String ip) throws IOException {  if (!InetAddress.isNumeric(ip)) {    throw new IOException("Not an IP address: " + ip);  }  return InetAddress.getByName(ip).getAddress();}  }
class C{  public void addScriptGroup(){  if ("<Script Group Name>".equalsIgnoreCase(currentScriptGroup.getName())) {    messages.error("Please give the Script Group a name.");  } else {    currentTestPlan.addScriptGroupAt(currentScriptGroup,insertIndex);  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public Map<Integer,Integer> popMissing(){  HashMap<Integer,Integer> map=new HashMap<>();  for (int i=0; i < missingBlocks.length; i++) {    int count=missingBlocks[i];    if (count > 0) {      map.put(i,count);    }  }  Arrays.fill(missingBlocks,0);  return map;}  }
class C{  public static void copy(File from,Charset charset,Appendable to) throws IOException {  asCharSource(from,charset).copyTo(to);}  }
class C{  public static void assertEquals(String message,Example expected,Example actual){  Assert.assertEquals(message + " (number of attributes)",expected.getAttributes().allSize(),actual.getAttributes().allSize());  Assert.assertEquals(message + " (number of special attributes)",expected.getAttributes().specialSize(),actual.getAttributes().specialSize());  Iterator<Attribute> allExpectedAttributesIterator=expected.getAttributes().allAttributes();  Iterator<Attribute> allActualAttributesIterator=actual.getAttributes().allAttributes();  List<Attribute> allExpectedAttributes=new ArrayList<Attribute>();  while (allExpectedAttributesIterator.hasNext()) {    allExpectedAttributes.add(allExpectedAttributesIterator.next());  }  List<Attribute> allActualAttributes=new ArrayList<Attribute>();  while (allActualAttributesIterator.hasNext()) {    allActualAttributes.add(allActualAttributesIterator.next());  }  Iterator<Attribute> expectedAttributesToConsider=expected.getAttributes().iterator();  Iterator<Attribute> actualAttributesToConsider=actual.getAttributes().iterator();  while (expectedAttributesToConsider.hasNext() && actualAttributesToConsider.hasNext()) {    Attribute a1=expectedAttributesToConsider.next();    Attribute a2=actualAttributesToConsider.next();    if (!a1.getName().equals(a2.getName())) {      throw new AssertionFailedError("Attribute ordering does not match: " + a1.getName() + ","+ a2.getName());    }    if (a1.isNominal()) {      Assert.assertEquals(MessageFormat.format(message,"nominal",a1.getName()),expected.getNominalValue(a1),actual.getNominalValue(a2));    } else     if (a1.isNumerical()) {      assertEqualsWithRelativeErrorOrBothNaN(MessageFormat.format(message,"numerical",a1.getName()),expected.getValue(a1),actual.getValue(a2));    } else {      Assert.assertEquals(expected.getDateValue(a1),actual.getDateValue(a2));    }    allExpectedAttributes.remove(a1);    allActualAttributes.remove(a2);  }  for (int i=0; i < allExpectedAttributes.size(); i++) {    Attribute expectedSpecial=allExpectedAttributes.get(i);    String expectedName=expectedSpecial.getName();    String actualName=null;    for (int j=0; i < allActualAttributes.size(); j++) {      Attribute actualSpecial=allActualAttributes.get(j);      actualName=actualSpecial.getName();      if (expectedName.equals(actualName)) {        if (expectedSpecial.isNominal()) {          Assert.assertEquals(MessageFormat.format(message,"nominal",expectedSpecial.getName()),expected.getNominalValue(expectedSpecial),actual.getNominalValue(actualSpecial));        } else         if (expectedSpecial.isNumerical()) {          assertEqualsWithRelativeErrorOrBothNaN(MessageFormat.format(message,"numerical",expectedSpecial.getName()),expected.getValue(expectedSpecial),actual.getValue(actualSpecial));        } else {          Assert.assertEquals(expected.getDateValue(expectedSpecial),actual.getDateValue(actualSpecial));        }        allExpectedAttributes.remove(expectedSpecial);        allActualAttributes.remove(actualSpecial);        i--;        j--;        break;      }    }    if (!expectedName.equals(actualName)) {      throw new AssertionFailedError("Expected attribute not found: " + expectedSpecial.getName());    }  }}  }
class C{  public static Object stringToValue(String string){  if ("true".equalsIgnoreCase(string)) {    return Boolean.TRUE;  }  if ("false".equalsIgnoreCase(string)) {    return Boolean.FALSE;  }  if ("null".equalsIgnoreCase(string)) {    return JSONObject.NULL;  }  try {    char initial=string.charAt(0);    if (initial == '-' || (initial >= '0' && initial <= '9')) {      Long value=new Long(string);      if (value.toString().equals(string)) {        return value;      }    }  } catch (  Exception ignore) {    try {      Double value=new Double(string);      if (value.toString().equals(string)) {        return value;      }    } catch (    Exception ignoreAlso) {    }  }  return string;}  }
class C{  public int intValue(){  return ((Integer)value).intValue();}  }
class C{  void loginByIdSecure() throws Exception {  System.out.println("Secure Systems Inc. - login by id");  String id=input("User ID?");  String password=input("Password?");  try {    PreparedStatement prep=conn.prepareStatement("SELECT * FROM USERS WHERE " + "ID=? AND PASSWORD=?");    prep.setInt(1,Integer.parseInt(id));    prep.setString(2,password);    ResultSet rs=prep.executeQuery();    if (rs.next()) {      System.out.println("Welcome!");    } else {      System.out.println("Access denied!");    }    rs.close();    prep.close();  } catch (  Exception e) {    System.out.println(e);  }}  }
class C{  private void loadNextPage(List<GoodsListBean> tempNextList){  nexPage=tempNextList.get(0).getNext();  ArrayList<GoodsModel> tempNextAL=new ArrayList<>();  for (int i=0; i < tempNextList.get(0).getPosts().length; i++)   tempNextAL.add(tempNextList.get(0).getPosts()[i]);  addItems(tempNextAL);  notifyDataSetChanged();}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:20.091 -0500",hash_original_method="A6B9FE53FCB83D066C3DAD2A2CD2AA6D",hash_generated_method="4A0CA3D82DAD09F68F1F4B54C3FB9B45") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public boolean isNetworkSupported(int networkType){  try {    return mService.isNetworkSupported(networkType);  } catch (  RemoteException e) {  }  return false;}  }
class C{  public RowDataStatic(List<ResultSetRow> rows){  this.index=-1;  this.rows=rows;}  }
class C{  public void removeRenamingCallback(OneSheeldRenamingCallback renamingCallback){  if (renamingCallback != null && renamingCallbacks.contains(renamingCallback))   renamingCallbacks.remove(renamingCallback);}  }
class C{  protected String doIt() throws Exception {  for (  MPPMRP mrp : getRecords()) {    if (MPPMRP.TYPEMRP_Demand.equals(mrp.getTypeMRP()))     saveBrowseValues(mrp,DEMAND); else     if (MPPMRP.TYPEMRP_Supply.equals(mrp.getTypeMRP()))     saveBrowseValues(mrp,SUPPLY);    if (p_Priority != null)     mrp.setPriority(p_Priority);    if (p_Planner_ID != null)     mrp.setPlanner_ID(p_Planner_ID);    schedule(mrp);  }  return "@DocProcessed@ " + processRecords;}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public static short[] append(short buffer[],short newElement){  short[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  private Recommendation findVPlexHARecommendations(VirtualArray varray,VirtualPool vpool,VirtualArray haVarray,VirtualPool haVpool,Project project,VirtualPoolCapabilityValuesWrapper capabilities,Map<String,List<StoragePool>> vplexPoolMapForVarray){  Recommendation haRecommendation=null;  List<Recommendation> vplexHaVArrayRecommendations=null;  if (haVarray == null) {    haVarray=vplexScheduler.getHaVirtualArray(varray,project,vpool);  }  if (haVpool == null) {    haVpool=vplexScheduler.getHaVirtualPool(varray,project,vpool);  }  vplexHaVArrayRecommendations=getAllHARecommendations(varray,vpool,haVarray,haVpool,capabilities,vplexPoolMapForVarray);  if (!vplexHaVArrayRecommendations.isEmpty()) {    haRecommendation=vplexHaVArrayRecommendations.get(0);  }  return haRecommendation;}  }
class C{  public boolean pauseAll(long cyclePeriod){  if (timerTasks.containsKey(cyclePeriod)) {    timerTasks.get(cyclePeriod).pause();    return true;  }  return false;}  }
class C{  protected void doWriteState(FacesContext facesContext,Object state,Writer writer) throws IOException {  if (facesContext.getViewRoot().isTransient()) {    writer.write("stateless");    writer.flush();    return;  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  OutputStream base=null;  if (compressViewState) {    base=new GZIPOutputStream(baos,csBuffSize);  } else {    base=baos;  }  ObjectOutputStream oos=null;  try {    oos=serialProvider.createObjectOutputStream(new BufferedOutputStream(base));    if (stateTimeoutEnabled) {      oos.writeLong(System.currentTimeMillis());    }    Object[] stateToWrite=(Object[])state;    if (debugSerializedState) {      ByteArrayOutputStream discard=new ByteArrayOutputStream();      DebugObjectOutputStream out=new DebugObjectOutputStream(discard);      try {        out.writeObject(stateToWrite[0]);      } catch (      Exception e) {        throw new FacesException("Serialization error. Path to offending instance: " + out.getStack(),e);      }    }    oos.writeObject(stateToWrite[0]);    if (debugSerializedState) {      ByteArrayOutputStream discard=new ByteArrayOutputStream();      DebugObjectOutputStream out=new DebugObjectOutputStream(discard);      try {        out.writeObject(stateToWrite[1]);      } catch (      Exception e) {        DebugUtil.printState((Map)stateToWrite[1],LOGGER);        throw new FacesException("Serialization error. Path to offending instance: " + out.getStack(),e);      }    }    oos.writeObject(stateToWrite[1]);    oos.flush();    oos.close();    oos=null;    byte[] bytes=baos.toByteArray();    if (guard != null) {      bytes=guard.encrypt(facesContext,bytes);    }    Base64OutputStreamWriter bos=new Base64OutputStreamWriter(bytes.length,writer);    bos.write(bytes,0,bytes.length);    bos.finish();    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,"Client State: total number of characters written: {0}",bos.getTotalCharsWritten());    }  }  finally {    if (oos != null) {      try {        oos.close();      } catch (      IOException ioe) {        if (LOGGER.isLoggable(Level.FINEST)) {          LOGGER.log(Level.FINEST,"Closing stream",ioe);        }      }    }  }}  }
class C{  protected void rotateOrthogonal(){  if (_iconMaps != null) {    Iterator<HashMap<Integer,NamedIcon>> it=_iconMaps.values().iterator();    while (it.hasNext()) {      Iterator<NamedIcon> iter=it.next().values().iterator();      while (iter.hasNext()) {        NamedIcon icon=iter.next();        icon.setRotation(icon.getRotation() + 1,this);      }    }  }  displayState(turnoutState());}  }
class C{  private void readAndCompact() throws IOException {  assert beg != -1;  if (buf == null) {    bytes=new byte[bufSize];    buf=ByteBuffer.wrap(bytes);  }  final int pos=buf.position();  final int lim=(int)(end - beg + pos);  assert pos >= 0;  assert pos < lim : pos + " " + lim;  assert lim <= buf.capacity();  buf.limit(lim);  int res=writeCh.read(buf,beg);  assert res == lim - pos;  int prevEnd=pos;  long delta=beg - pos;  for (int j=vals.size(); j > compacted; j--) {    SwapValue val=vals.pollFirst();    int valPos=(int)(val.pos - delta);    if (prevEnd != valPos) {      assert prevEnd < valPos : prevEnd + " " + valPos;      U.arrayCopy(bytes,valPos,bytes,prevEnd,val.len);    }    prevEnd+=val.len;    vals.addLast(val);  }  assert prevEnd > 0 : prevEnd;  buf.position(prevEnd);  end=-1;  compacted=vals.size();}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  void club(){  Mounted club=chooseClub();  club(club);}  }
class C{  public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){  SortedSet<Integer> newPositions=new TreeSet<>();  for (  Integer entry : positions) {    int position=entry;    if (position < startPosition || position > endPosition) {      newPositions.add(position);    } else     if (adjustBy > 0) {      newPositions.add(position + adjustBy);    } else     if (adjustBy < 0) {      if (position > startPosition + adjustBy && position <= startPosition) {        ;      } else {        newPositions.add(position + adjustBy);      }    }  }  return newPositions;}  }
class C{  protected void clearParameters(){  Object nullObject=null;  fDocumentNo.setValue("");  fDescription.setValue("");  fPOReference.setValue("");  fBPartner_ID.setValue(null);  fShipper_ID.setValue(null);  fDateFrom.setValue(nullObject);  fDateTo.setValue(nullObject);  fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(),p_WindowNo,"IsSOTrx")));}  }
class C{  public RemoveStorableEntityAction(final StorableEntityList<?> storeableEntityList){  this.storeableEntityList=storeableEntityList;}  }
class C{  static double hypot_NaN(final double xAbs,final double yAbs){  if (xAbs == Double.POSITIVE_INFINITY || yAbs == Double.POSITIVE_INFINITY) {    return Double.POSITIVE_INFINITY;  }  return Double.NaN;}  }
class C{  final public void println(){  try {    _out.println();  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public static void fill(long[] array,int start,int end,long value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void write(ClassFile classFile,OutputStream s) throws IOException {  this.classFile=classFile;  out.reset();  write();  out.writeTo(s);}  }
class C{  public static void CF8(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double N=2.0;  double a=4.0;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    if (j % 3 == 1) {      sum1+=yj * yj;      count1++;    } else     if (j % 3 == 2) {      sum2+=yj * yj;      count2++;    } else {      sum3+=yj * yj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;  c[0]=(f[0] * f[0] + f[1] * f[1]) / (1 - f[2] * f[2]) - a * Math.abs(Math.sin(N * PI * ((f[0] * f[0] - f[1] * f[1]) / (1 - f[2] * f[2]) + 1.0))) - 1.0;}  }
class C{  public void testSetScaleRoundHalfDown(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_HALF_DOWN);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  @Override public String toString(){  return w + "x" + h;}  }
class C{  public JarModifier(File jarFile) throws JarException, IOException {  this.jarFile=jarFile;  JarFile jar=new JarFile(jarFile);  Enumeration<? extends JarEntry> enumerator=jar.entries();  while (enumerator.hasMoreElements()) {    JarEntry currentEntry=(JarEntry)enumerator.nextElement();    JarEntry resetEntry=new JarEntry(currentEntry.getName());    jarEntries.put(currentEntry.getName(),resetEntry);  }  String manifestPath=META_INF + SEPERATOR + "MANIFEST.MF";  JarEntry jarEntry=jar.getJarEntry(manifestPath);  if (jarEntry != null) {    Enumeration<JarEntry> entries=jar.entries();    while (entries.hasMoreElements()) {      jarEntry=(JarEntry)entries.nextElement();      if (manifestPath.equalsIgnoreCase(jarEntry.getName())) {        break;      } else {        jarEntry=null;      }    }  }  Manifest manifest=new Manifest();  if (jarEntry != null) {    manifest.read(jar.getInputStream(jarEntry));  }  this.manifest=manifest;  jar.close();}  }
class C{  protected String parseString(int closingCharacter) throws IOException, RDFParseException {  StringBuilder sb=getBuilder();  while (true) {    int c=readCodePoint();    if (c == closingCharacter) {      break;    } else     if (c == -1) {      throwEOFException();    }    appendCodepoint(sb,c);    if (c == '\\') {      c=readCodePoint();      if (c == -1) {        throwEOFException();      }      appendCodepoint(sb,c);    }  }  return sb.toString();}  }
class C{  public static CloseableHttpClient noAuthentication(){  return HttpClientBuilder.create().build();}  }
class C{  public WindowBuilder caption(final String caption){  this.caption=caption;  return this;}  }
class C{  protected String randomSubSpace(Integer[] indices,int subSpaceSize,int classIndex,Random random){  Collections.shuffle(Arrays.asList(indices),random);  StringBuffer sb=new StringBuffer("");  for (int i=0; i < subSpaceSize; i++) {    sb.append(indices[i] + ",");  }  sb.append(classIndex);  if (getDebug())   System.out.println("subSPACE = " + sb);  return sb.toString();}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  private static String replaceInvalidVfatCharacters(String filename){  final char START_CTRLCODE=0x00;  final char END_CTRLCODE=0x1f;  final char QUOTEDBL=0x22;  final char ASTERISK=0x2A;  final char SLASH=0x2F;  final char COLON=0x3A;  final char LESS=0x3C;  final char GREATER=0x3E;  final char QUESTION=0x3F;  final char BACKSLASH=0x5C;  final char BAR=0x7C;  final char DEL=0x7F;  final char UNDERSCORE=0x5F;  StringBuffer sb=new StringBuffer();  char ch;  boolean isRepetition=false;  for (int i=0; i < filename.length(); i++) {    ch=filename.charAt(i);    if ((START_CTRLCODE <= ch && ch <= END_CTRLCODE) || ch == QUOTEDBL || ch == ASTERISK || ch == SLASH || ch == COLON || ch == LESS || ch == GREATER || ch == QUESTION || ch == BACKSLASH || ch == BAR || ch == DEL) {      if (!isRepetition) {        sb.append(UNDERSCORE);        isRepetition=true;      }    } else {      sb.append(ch);      isRepetition=false;    }  }  return sb.toString();}  }
class C{  public void restoreDefaultSyntaxScheme(){  setSyntaxScheme(getDefaultSyntaxScheme());}  }
class C{  public static SystemSettings fromJson(byte[] bytes){  checkNotNull(bytes,"bytes");  try (BufferedReader reader=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes)))){    return gson.fromJson(new JsonReader(reader),SystemSettings.class);  } catch (  IOException e) {    throw Throwables.propagate(e);  }}  }
class C{  public Collection addCategories(Categories categories){  super.addElement(Categories.KEY,categories);  return this;}  }
class C{  public final boolean isDirty(){  if (_paneManager == null)   return false;  return _paneManager.isDirty();}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public void add(String expr,ColorAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  public String showCustomerBillingData() throws IOException {  if (billingData == null) {    return OUTCOME_ERROR;  }  SimpleDateFormat sdf=new SimpleDateFormat("yyyy_MM_dd");  String filename=sdf.format(Calendar.getInstance().getTime()) + "_BillingData.xml";  writeContentToResponse(billingData,filename,"text/xml");  billingData=null;  return OUTCOME_SUCCESS;}  }
class C{  public synchronized void removeProjectionListener(ProjectionListener l){  projectionSupport.remove(l);}  }
class C{  private boolean compareUserAttributeParam(UserGroup userGroup,String attributeParamString){  boolean isEqual=false;  if (StringUtils.isBlank(attributeParamString)) {    _log.warn("Invalid attribute string {} in user group {}.",attributeParamString,this.getLabel());    return isEqual;  }  UserAttributeParam attributeParam=UserAttributeParam.fromString(attributeParamString);  if (attributeParam == null) {    _log.warn("Failed to convert attributes param string {} to object.",attributeParamString);    return isEqual;  }  if (CollectionUtils.isEmpty(userGroup._attributes)) {    _log.info("No attributes to compare");    return isEqual;  }  for (  String comparingAttributeParamString : userGroup._attributes) {    if (StringUtils.isBlank(comparingAttributeParamString)) {      _log.info("Invalid attribute string {}",comparingAttributeParamString);      break;    }    UserAttributeParam comparingAttributeParam=UserAttributeParam.fromString(comparingAttributeParamString);    if (comparingAttributeParam == null) {      _log.info("Failed to convert attributes param string {} to object.",comparingAttributeParamString);      return isEqual;    }    if (comparingAttributeParam.isEqual(attributeParam)) {      _log.debug("Attributes {} match with {}",attributeParamString,comparingAttributeParamString);      isEqual=true;      break;    }  }  return isEqual;}  }
class C{  public static void writeErrorData(Throwable err,BinaryRawWriterEx writer,@Nullable IgniteLogger log){  if (err instanceof PlatformExtendedException) {    PlatformExtendedException err0=(PlatformExtendedException)err;    writer.writeBoolean(true);    int pos=writer.out().position();    try {      writer.writeBoolean(true);      err0.writeData(writer);    } catch (    Exception e) {      if (log != null)       U.warn(log,"Failed to write interop exception data: " + e.getMessage(),e);      writer.out().position(pos);      writer.writeBoolean(false);      writer.writeString(e.getClass().getName());      String innerMsg;      try {        innerMsg=e.getMessage();      } catch (      Exception innerErr) {        innerMsg="Exception message is not available.";      }      writer.writeString(innerMsg);    }  } else   writer.writeBoolean(false);}  }
class C{  private Object[] chomp(Object[] params){  if (params == null)   return null;  Object[] trimmedParameters=new Object[params.length];  for (int i=0; i < params.length; i++) {    if (params[i] == null)     trimmedParameters[i]=null; else     trimmedParameters[i]=params[i].toString().trim();  }  return trimmedParameters;}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public String toString(){  return this.scheme + ":" + telephoneNumber.encode();}  }
class C{  @Nullable public RestFilterChain filterChainOrNull(RestFilter executionFilter){  if (filters.length == 0) {    return null;  }  return new ControllerFilterChain(executionFilter);}  }
class C{  public void readProxyAuthenticateHeader(SipResponse response){  ProxyAuthenticateHeader header=(ProxyAuthenticateHeader)response.getHeader(ProxyAuthenticateHeader.NAME);  if (header != null) {    mDigest.setRealm(header.getRealm());    mDigest.setQop(header.getQop());    mDigest.setNextnonce(header.getNonce());  }}  }
class C{  public DefaultTerminalFactory addTerminalEmulatorFrameAutoCloseTrigger(TerminalEmulatorAutoCloseTrigger autoCloseTrigger){  if (autoCloseTrigger != null) {    this.autoCloseTriggers.add(autoCloseTrigger);  }  return this;}  }
class C{  public BusinessObjectDefinitionTagEntity createBusinessObjectDefinitionTagEntity(BusinessObjectDefinitionTagKey businessObjectDefinitionTagKey){  return createBusinessObjectDefinitionTagEntity(businessObjectDefinitionTagKey.getBusinessObjectDefinitionKey(),businessObjectDefinitionTagKey.getTagKey());}  }
class C{  public void removeAllResourceBundles(){  resourceBundles.clear();}  }
class C{  public TransformerItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static Function<JsonObject,byte[]> asBytes(){  return null;}  }
class C{  public boolean isDelimiter(String character){  return Character.isWhitespace(character.charAt(0)) || (m_Delimiters.indexOf(character.charAt(0)) > -1);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static RefreshMemberSnapshotRequest create(){  RefreshMemberSnapshotRequest m=new RefreshMemberSnapshotRequest();  return m;}  }
class C{  public void onAttach(Context context){  if (!shownByMe) {    dismissed=false;  }}  }
class C{  public double fog(List<String> words,int nrofSentences){  words=filterWords(words);  int nrofBigwords=getNrofBigwords(words);  return fog(words.size(),nrofBigwords,nrofSentences);}  }
class C{  public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof KeyIdentifier))   return false;  byte[] otherString=((KeyIdentifier)other).octetString;  return java.util.Arrays.equals(octetString,otherString);}  }
class C{  public static double[] stringToDoubleArray(String str){  if (str == null) {    return (null);  }  String[] array=str.split(",");  if (array.length == 0) {    array=new String[]{str.trim()};  }  double[] nArray=new double[array.length];  for (int i=0; i < nArray.length; ++i) {    nArray[i]=Double.parseDouble(array[i]);  }  return (nArray);}  }
class C{  public boolean shouldSelectCell(EventObject e){  boolean retValue=!m_valueToColumn || (m_valueToColumn && m_between);  return retValue;}  }
class C{  public ArrowButtonPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);}  }
class C{  protected void priorityLayout1(){  int[] horPositions=new int[m_nodes.size()];  int maxCount=0;  for (int i=0; i < nodeLevels.length; i++) {    int count=0;    for (int j=0; j < nodeLevels[i].length; j++) {      horPositions[nodeLevels[i][j]]=j;      count++;    }    if (count > maxCount) {      maxCount=count;    }  }  int priorities[], BC[];  for (int i=1; i < nodeLevels.length; i++) {    priorities=new int[nodeLevels[i].length];    BC=new int[nodeLevels[i].length];    for (int j=0; j < nodeLevels[i].length; j++) {      if (m_nodes.get(nodeLevels[i][j]).ID.startsWith("S")) {        priorities[j]=maxCount + 1;      } else {        priorities[j]=uConnectivity(i,j);      }      BC[j]=uBCenter(i,j,horPositions);    }    priorityLayout2(nodeLevels[i],priorities,BC,horPositions);  }  for (int i=nodeLevels.length - 2; i >= 0; i--) {    priorities=new int[nodeLevels[i].length];    BC=new int[nodeLevels[i].length];    for (int j=0; j < nodeLevels[i].length; j++) {      if (m_nodes.get(nodeLevels[i][j]).ID.startsWith("S")) {        priorities[j]=maxCount + 1;      } else {        priorities[j]=lConnectivity(i,j);      }      BC[j]=lBCenter(i,j,horPositions);    }    priorityLayout2(nodeLevels[i],priorities,BC,horPositions);  }  for (int i=2; i < nodeLevels.length; i++) {    priorities=new int[nodeLevels[i].length];    BC=new int[nodeLevels[i].length];    for (int j=0; j < nodeLevels[i].length; j++) {      if (m_nodes.get(nodeLevels[i][j]).ID.startsWith("S")) {        priorities[j]=maxCount + 1;      } else {        priorities[j]=uConnectivity(i,j);      }      BC[j]=uBCenter(i,j,horPositions);    }    priorityLayout2(nodeLevels[i],priorities,BC,horPositions);  }  int minPosition=horPositions[0];  for (  int horPosition : horPositions) {    if (horPosition < minPosition) {      minPosition=horPosition;    }  }  if (minPosition < 0) {    minPosition=minPosition * -1;    for (int i=0; i < horPositions.length; i++) {      horPositions[i]+=minPosition;    }  }  for (int i=0, temp=0; i < nodeLevels.length; i++) {    for (int j=0; j < nodeLevels[i].length; j++) {      temp=nodeLevels[i][j];      GraphNode n=m_nodes.get(temp);      n.x=horPositions[temp] * m_nodeWidth;      n.y=i * 3 * m_nodeHeight;    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  FunctionButtonPropertyEditor editor=new FunctionButtonPropertyEditor();  editor.setFunctionButton(this);  editor.setLocation(this.getLocationOnScreen());  editor.setVisible(true);}  }
class C{  public static SignalGroupSettingsData createSetting4SignalGroup(SignalControlDataFactory fac,Id<SignalGroup> signalGroupId,int onset,int dropping){  SignalGroupSettingsData signalGroupSettings=fac.createSignalGroupSettingsData(signalGroupId);  signalGroupSettings.setOnset(onset);  signalGroupSettings.setDropping(dropping);  return signalGroupSettings;}  }
class C{  public boolean isRoot(){  return "root".equals(getName()) && "org.apache.log4j.spi.RootLogger".equals(getTargetClass());}  }
class C{  public void add(Integer value){  if (value == null) {    addNull();  } else {    _add(numberNode(value.intValue()));  }}  }
class C{  protected void analyze(){  IntStream.range(0,method.getGenericParameterTypes().length).forEach(null);  this.returnType=convertType(method.getGenericReturnType());}  }
class C{  public static int addLineupToAccount(String lineupName) throws IOException, SDException {  SDHeadendLineup lineup=lineupCache.get(lineupName);  if (lineup == null) {    String postalCode=getCurrentPostalCode();    if (postalCode != null) {      getLineupsForPostalCode(getCurrentCountry(getCurrentRegion()),postalCode);      lineup=lineupCache.get(lineupName);    }    if (lineup == null) {      if (Sage.DBG)       System.out.println("SDEPG Error: Unable to find lineup details to add '" + lineupName + "'");      throw new SDException(SDErrors.INVALID_LINEUP);    }  }  int returnValue=ensureSession().addLineup(lineup.getUri());  if (Sage.DBG)   System.out.println("SDEPG Added lineup '" + lineupName + "' with "+ returnValue+ " changes remaining.");  return returnValue;}  }
class C{  public void andNot(BitMatrix other){  checkDimensionCompatibility(other);  toBitVector().andNot(other.toBitVector());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void remove(String filename) throws IOException {  throw new IOException("not implemented");}  }
class C{  @Override public boolean add(E e){  ConcurrentMap<E,Object> m=(ConcurrentMap<E,Object>)map;  return m.putIfAbsent(e,e) == null;}  }
class C{  private void populateOutputs(){  outputs=new String[outputVars.length];  outputInfos=new OutputInfo[outputVars.length];  for (int i=0; i < outputVars.length; i++) {    outputs[i]=outputMatrices[i].getFileName();    MatrixFormatMetaData md=(MatrixFormatMetaData)outputMatrices[i].getMetaData();    outputInfos[i]=md.getOutputInfo();  }}  }
class C{  boolean replace(ReplaceHolder rh) throws BadLocationException {  int start=-1;  int direction=1;  int literalCount=-1;  if (rh.length > 0 && (rh.text == null || rh.text.length() == 0) && (getFormattedTextField().getSelectionStart() != rh.offset || rh.length > 1)) {    direction=-1;  }  if (!getAllowsInvalid()) {    if ((rh.text == null || rh.text.length() == 0) && rh.length > 0) {      start=getFormattedTextField().getSelectionStart();    } else {      start=rh.offset;    }    literalCount=getLiteralCountTo(start);  }  if (super.replace(rh)) {    if (start != -1) {      int end=((ExtendedReplaceHolder)rh).endOffset;      end+=((ExtendedReplaceHolder)rh).endTextLength;      repositionCursor(literalCount,end,direction);    } else {      start=((ExtendedReplaceHolder)rh).endOffset;      if (direction == 1) {        start+=((ExtendedReplaceHolder)rh).endTextLength;      }      repositionCursor(start,direction);    }    return true;  }  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.OPERATION__PARAMS:    return ((InternalEList<?>)getParams()).basicRemove(otherEnd,msgs);case FunctionblockPackage.OPERATION__RETURN_TYPE:  return basicSetReturnType(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public double[] distributionsByOriginalIndex(double[] before){  double[] after=new double[m_Converter.length];  for (int i=0; i < m_Converter.length; i++) {    after[i]=before[m_Converter[i]];  }  return after;}  }
class C{  public Option(String opt,boolean hasArg,String description) throws IllegalArgumentException {  this(opt,null,hasArg,description);}  }
class C{  private WroModelFactory decorate(final WroModelFactory decorated){  return new ModelTransformerFactory(new FallbackAwareWroModelFactory(decorated)).setTransformers(modelTransformers);}  }
class C{  public static Distribution guessNumberOfBins(DataSet data){  if (data.getSampleSize() < 20)   return new UniformDiscrete(2,data.getSampleSize() - 1); else   if (data.getSampleSize() >= 1000000)   return new LogUniform(50,1000);  int sqrt=(int)Math.sqrt(data.getSampleSize());  return new UniformDiscrete(Math.max(sqrt / 3,2),Math.min(sqrt * 3,data.getSampleSize() - 1));}  }
class C{  public InputSource(InputStream byteStream){  setByteStream(byteStream);}  }
class C{  public void run(){  int numberOfLines=highlighter.getNumberOfLines();  cachedLineDone=new boolean[numberOfLines];  parser.clearCache(numberOfLines);  boolean skipbreakpoint=false;  if (isBreakPoint(data.getInstructionPointer())) {    skipbreakpoint=true;  }  int lineNumber=data.getInstructionPointer();  while ((lineNumber < numberOfLines)) {    if (!running) {      break;    }    if (isBreakPoint(lineNumber) && !skipbreakpoint) {      break;    } else     if (isBreakPoint(lineNumber) && skipbreakpoint) {      skipbreakpoint=false;    }    if ((lineNumber < numberOfLines)) {      data.setInstructionPointer(lineNumber + 1);      try {        executeLineNumber(lineNumber,true);      } catch (      Exception ex) {        updateExecutionMark();        scrollToExecutionMark();        ErrorLabel.setText(ex.toString() + "");        ex.printStackTrace();        break;      }    }    lineNumber=data.getInstructionPointer();  }  data.updateDirty();  running=false;  Thread.yield();  updateAll();  frame.checkButtonStates();  runningThread=null;}  }
class C{  private void updateCollForRcptCreate(final EgDemand demand,final BillReceiptInfo billRcptInfo){  LOGGER.debug("updateCollForRcptCreate : Updating Collection Started For Demand : " + demand + " with BillReceiptInfo - "+ billRcptInfo);  LOGGER.info("updateCollForRcptCreate : Total amount collected : " + totalAmount);  demand.addCollected(totalAmount);  try {    if (demand.getMinAmtPayable() != null && demand.getMinAmtPayable().compareTo(BigDecimal.ZERO) > 0)     demand.setMinAmtPayable(BigDecimal.ZERO);    updateDemandDetailForReceiptCreate(billRcptInfo.getAccountDetails(),demand,billRcptInfo);  } catch (  final Exception e) {    throw new ApplicationRuntimeException("Error occured during back update of DCB : updateCollForRcptCreate() " + e.getMessage(),e);  }  LOGGER.debug("updateCollForRcptCreate : Updating Demand For Collection finished...");}  }
class C{  public void addEntityVariable(String variableName,JpqlEntityModel entity){  if (variableName == null) {    throw new NullPointerException("No entity variable name passed");  }  if (entity == null) {    throw new NullPointerException("No entity passed");  }  if (entityVariableName2entity.containsKey(variableName))   throw new IllegalArgumentException(String.format("Trying to rebind variable [%s]",variableName));  entityVariableName2entity.put(variableName,entity);}  }
class C{  @Override public void clear(){  size=0;  _list=null;}  }
class C{  public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.removeUpdate(e,a,this);}  }
class C{  private void invalidateSortOrder(){  needsSorting=true;}  }
class C{  public AbstractInsnNode[] toArray(){  int i=0;  AbstractInsnNode elem=first;  AbstractInsnNode[] insns=new AbstractInsnNode[size];  while (elem != null) {    insns[i]=elem;    elem.index=i++;    elem=elem.next;  }  return insns;}  }
class C{  public final void privateInitialize(CordovaInterface cordova,CordovaWebView webView,CordovaPreferences preferences){  assert this.cordova == null;  this.cordova=cordova;  this.webView=webView;  this.preferences=preferences;  initialize(cordova,webView);  pluginInitialize();}  }
class C{  public void putLong(String key,long value){  map.put(key,value);}  }
class C{  private void deAllocate(){  if (getC_Order_ID() != 0)   setC_Order_ID(0);  MAllocationHdr[] allocations=MAllocationHdr.getOfPayment(getCtx(),getC_Payment_ID(),get_TrxName());  log.fine("#" + allocations.length);  for (int i=0; i < allocations.length; i++) {    allocations[i].set_TrxName(get_TrxName());    allocations[i].setDocAction(DocAction.ACTION_Reverse_Correct);    if (!allocations[i].processIt(DocAction.ACTION_Reverse_Correct))     throw new AdempiereException(allocations[i].getProcessMsg());    allocations[i].saveEx();  }  if (getC_Invoice_ID() != 0) {    String sql="UPDATE C_Invoice " + "SET C_Payment_ID = NULL, IsPaid='N' " + "WHERE C_Invoice_ID=" + getC_Invoice_ID() + " AND C_Payment_ID="+ getC_Payment_ID();    int no=DB.executeUpdate(sql,get_TrxName());    if (no != 0)     log.fine("Unlink Invoice #" + no);    sql="UPDATE C_Order o " + "SET C_Payment_ID = NULL " + "WHERE EXISTS (SELECT * FROM C_Invoice i "+ "WHERE o.C_Order_ID=i.C_Order_ID AND i.C_Invoice_ID=" + getC_Invoice_ID() + ")"+ " AND C_Payment_ID="+ getC_Payment_ID();    no=DB.executeUpdate(sql,get_TrxName());    if (no != 0)     log.fine("Unlink Order #" + no);  }  setC_Invoice_ID(0);  setIsAllocated(false);}  }
class C{  protected Node newNode(){  return new SVGOMDescElement();}  }
class C{  public static JSONArray toJSONArray(XMLTokener x) throws JSONException {  return (JSONArray)parse(x,true,null);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendStageProgressPatch(buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  protected static boolean queryCache(final Pair<CConnection,String> cacheKey,final ImmutableSet<String> rawTableNames){  return PostgreSQLDatabaseFunctions.m_cache.get(cacheKey).containsAll(rawTableNames);}  }
class C{  private QueryBuilder buildSort(){  QueryBuilder builder=new QueryBuilder();  Iterator<String> sortIterator=mSortingOrderList.iterator();  while (sortIterator.hasNext()) {    builder.append(sortIterator.next());    if (sortIterator.hasNext())     builder.append(", ");  }  return builder;}  }
class C{  public Builder(Extension extension){  this.urn=extension.urn;  this.fields=extension.fields;}  }
class C{  public static void createAllSupportedCountries(DataService mgr) throws NonUniqueBusinessKeyException {  for (  String countryCode : Locale.getISOCountries()) {    findOrCreate(mgr,countryCode);  }}  }
class C{  void deregisterSpring(Spring spring){  if (spring == null) {    throw new IllegalArgumentException("spring is required");  }  mActiveSprings.remove(spring);  mSpringRegistry.remove(spring.getId());}  }
class C{  void verifyExceptionCaptured(Class<? extends Throwable> expectedExceptionClass){  assertTrue("Excpected exception not thrown",exceptionEventCapture.hasCaptured());  Throwable caughtEx=exceptionEventCapture.getValue().getCause();  assertEquals(expectedExceptionClass,caughtEx.getClass());  exceptionEventCapture.reset();}  }
class C{  public void picture(double x,double y,String s){  BufferedImage image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth();  int hs=image.getHeight();  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  draw();}  }
class C{  Entry(K key,V value,ReferenceQueue<K> queue,int hash,Entry<K,V> next){  super(key,queue);  this.value=value;  this.hash=hash;  this.next=next;}  }
class C{  public final boolean isWrapperMessage(){  return m_isWrapperMessage;}  }
class C{  public Matrix4f rotationXYZ(float angleX,float angleY,float angleZ){  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float m_sinX=-sinX;  float m_sinY=-sinY;  float m_sinZ=-sinZ;  float nm11=cosX;  float nm12=sinX;  float nm21=m_sinX;  float nm22=cosX;  float nm00=cosY;  float nm01=nm21 * m_sinY;  float nm02=nm22 * m_sinY;  this._m20(sinY);  this._m21(nm21 * cosY);  this._m22(nm22 * cosY);  this._m23(0.0f);  this._m00(nm00 * cosZ);  this._m01(nm01 * cosZ + nm11 * sinZ);  this._m02(nm02 * cosZ + nm12 * sinZ);  this._m03(0.0f);  this._m10(nm00 * m_sinZ);  this._m11(nm01 * m_sinZ + nm11 * cosZ);  this._m12(nm02 * m_sinZ + nm12 * cosZ);  this._m13(0.0f);  this._m30(0.0f);  this._m31(0.0f);  this._m32(0.0f);  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  public UnmarshalException(String s,Exception ex){  super(s,ex);}  }
class C{  private SubscriberExceptionContext context(Object event){  return new SubscriberExceptionContext(bus,event,target,method);}  }
class C{  public static Border createBlackLineBorder(){  if (blackLine == null) {    blackLine=new LineBorder(Color.black,1);  }  return blackLine;}  }
class C{  public String toString(){  return val + " in (" + generateValueList()+ ")";}  }
class C{  public DynamicPseudoScope(){  this(IScope.NULLSCOPE);}  }
class C{  public boolean isPropagate(){  return propagate;}  }
class C{  public SayNPCNamesForUnstartedQuestsAction(String region){  this.regions=Arrays.asList(region);}  }
class C{  public void createPictScenario03_2() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-07-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  String supplierAdminId="Pict03_2Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_2SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_2Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_2Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_2CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_2",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_2",serviceDetails,customerAdmin,role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-07-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-07-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-07-22 10:20:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_2",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_2",customer);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public IntArrayList data(){  return values;}  }
class C{  public Matrix4(double m11,double m12,double m13,double m14,double m21,double m22,double m23,double m24,double m31,double m32,double m33,double m34,double m41,double m42,double m43,double m44){  this.m[0]=m11;  this.m[1]=m12;  this.m[2]=m13;  this.m[3]=m14;  this.m[4]=m21;  this.m[5]=m22;  this.m[6]=m23;  this.m[7]=m24;  this.m[8]=m31;  this.m[9]=m32;  this.m[10]=m33;  this.m[11]=m34;  this.m[12]=m41;  this.m[13]=m42;  this.m[14]=m43;  this.m[15]=m44;}  }
class C{  public void addStmtGroup(String name,StmtGroupMetrics config){  statementGroups.put(name,config);}  }
class C{  private static int findClosingParenToLeft(JavaHeuristicScanner scanner,int position){  if (position < 1)   return position;  if (scanner.previousToken(position - 1,JavaHeuristicScanner.UNBOUND) == Symbols.TokenRPAREN)   return scanner.getPosition() + 1;  return position;}  }
class C{  private void bindTrackEntriesList(){  musicottTrackEntriesList=FXCollections.observableArrayList(musicottTracks.entrySet());  musicottTrackEntriesListProperty=new SimpleListProperty<>(this,"all tracks");  musicottTrackEntriesListProperty.bind(new SimpleObjectProperty<>(musicottTrackEntriesList));}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  @Override protected void processClass(Class clazz){  if (DataObject.class.isAssignableFrom(clazz)) {    DataObjectType doType=TypeMap.getDoType(clazz);    cfMap.put(doType.getCF().getName(),clazz);  }}  }
class C{  public boolean supportsOpenStatementsAcrossCommit() throws SQLException {  return true;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static Uri uriForRestaurant(long id){  return CONTENT_URI.buildUpon().appendQueryParameter(RESTAURANT_ID,String.valueOf(id)).build();}  }
class C{  public AddressLocator(){  super();  locations=new ArrayList<Coord>();}  }
class C{  protected Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  int wrappedKeyLen=wrappedKey.length;  if (wrappedKeyLen == 0) {    throw new InvalidKeyException("The wrapped key is empty");  }  if (wrappedKeyLen % 8 != 0) {    throw new InvalidKeyException("The wrapped key has invalid key length");  }  byte[] out=new byte[wrappedKeyLen - 8];  byte[] buffer=new byte[blksize];  if (wrappedKeyLen == 16) {    cipher.decryptBlock(wrappedKey,0,buffer,0);    for (int i=0; i < IV.length; i++) {      if (IV[i] != buffer[i]) {        throw new InvalidKeyException("Integrity check failed");      }    }    System.arraycopy(buffer,IV.length,out,0,out.length);  } else {    System.arraycopy(wrappedKey,0,buffer,0,IV.length);    System.arraycopy(wrappedKey,IV.length,out,0,out.length);    int N=out.length / 8;    for (int j=5; j >= 0; j--) {      for (int i=N; i > 0; i--) {        int T=i + j * N;        System.arraycopy(out,8 * (i - 1),buffer,IV.length,8);        for (int k=1; T != 0; k++) {          byte v=(byte)T;          buffer[IV.length - k]^=v;          T>>>=8;        }        cipher.decryptBlock(buffer,0,buffer,0);        System.arraycopy(buffer,IV.length,out,8 * (i - 1),8);      }    }    for (int i=0; i < IV.length; i++) {      if (IV[i] != buffer[i]) {        throw new InvalidKeyException("Integrity check failed");      }    }  }  return ConstructKeys.constructKey(out,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public boolean hasValues(){  return values != null && values.size() > 0;}  }
class C{  public jMatrix timesEquals(double s){  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s * A[i][j];    }  }  return this;}  }
class C{  private void handleHtmlSearch(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleSearch();  if (addTitle(requestAndResponse,title)) {    return;  }  String query=requestAndResponse.getParameter("q");  final boolean queryWasNull=query == null;  if (query == null) {    query="";  }  String dataSet=requestAndResponse.getParameter("s");  if (dataSet == null || (!dataSet.equals("quotations") && !dataSet.equals("sources") && !dataSet.equals("accounts")&& !dataSet.equals("notebooks"))) {    dataSet="notes";  }  if (!isUserAnAdmin(requestAndResponse) && dataSet.equals("accounts")) {    dataSet="notes";  }  query=query.trim();  final String paneId="search";  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId(paneId);  pageWrapper.addHeader();  requestAndResponse.print("<form action=\"" + StringEscapeUtils.escapeHtml4(requestAndResponse.getRequestURI()) + "\" method=\"GET\"><table class=\"nopadding\"><tr><td>"+ "<input class=\"searchbox\" title=\""+ servletText.tooltipSearch()+ "\" placeholder=\""+ servletText.placeholderSearch()+ "\" type=\"text\" name=\"q\" value=\""+ StringEscapeUtils.escapeHtml4(query)+ "\" autofocus></td></tr><tr><td>"+ "<span class=\"searchRadio\"><input type=\"radio\" name=\"s\" value=\"notes\" id=\"searchNotes\""+ isInputChecked(dataSet,"notes")+ "><label for=\"searchNotes\">"+ servletText.labelSearchNotes()+ "</label></span> "+ "<span class=\"searchRadio\"><input type=\"radio\" name=\"s\" value=\"quotations\" id=\"searchQuotations\""+ isInputChecked(dataSet,"quotations")+ "><label for=\"searchQuotations\">"+ servletText.labelSearchQuotations()+ "</label></span> "+ "<span class=\"searchRadio\"><input type=\"radio\" name=\"s\" value=\"sources\" id=\"searchSources\""+ isInputChecked(dataSet,"sources")+ "><label for=\"searchSources\">"+ servletText.labelSearchSources()+ "</label></span> "+ "<span class=\"searchRadio\"><input type=\"radio\" name=\"s\" value=\"notebooks\" id=\"searchNotebooks\""+ isInputChecked(dataSet,"notebooks")+ "><label for=\"searchNotebooks\">"+ servletText.labelSearchNotebooks()+ "</label></span>"+ (!isUserAnAdmin(requestAndResponse) ? "" : "<input type=\"radio\" name=\"s\" value=\"accounts\" id=\"searchAccounts\"" + isInputChecked(dataSet,"accounts") + "><label for=\"searchAccounts\">"+ servletText.labelSearchAccounts()+ "</label>")+ "</td></tr>"+ "<tr><td><button onclick=\"replacePaneForForm(event, '"+ servletText.buttonSearch()+ "'); return false;\" class=\"specialbutton\" style=\"margin:10px 0px 10px 0px\">"+ servletText.buttonSearch()+ "</button></td></tr></table></form>");  if (!queryWasNull && query.isEmpty()) {    requestAndResponse.print(servletText.errorQueryIsRequired());  } else   if (dataSet == null || dataSet.isEmpty()) {    requestAndResponse.print(servletText.errorSearchDataSetIsRequired());  } else   if (!query.isEmpty()) {    pageWrapper.addMetaData(new KeyAndValue("paneType",dataSet));    if (dataSet.equals("notes")) {      handleHtmlSearchNotes(pageWrapper,requestAndResponse,query,paneId);    } else     if (dataSet.equals("quotations")) {      handleHtmlSearchQuotations(pageWrapper,requestAndResponse,query,paneId);    } else     if (dataSet.equals("sources")) {      handleHtmlSearchSources(pageWrapper,requestAndResponse,query,paneId);    } else     if (dataSet.equals("notebooks")) {      handleHtmlSearchNotebooks(pageWrapper,requestAndResponse,query,paneId);    } else     if (dataSet.equals("accounts")) {      pageWrapper.addMetaData(new KeyAndValue("notEditable",true));      handleHtmlSearchAccounts(pageWrapper,requestAndResponse,query,paneId);    } else {      requestAndResponse.print(servletText.errorSearchDataSetIsRequired());    }  }  pageWrapper.addFooter();}  }
class C{  @Override public String toString(){  return "SearchAlgorithm\n";}  }
class C{  protected void traverse(Node node){  if (node == null) {    return;  }  int type=node.getNodeType();switch (type) {case Node.DOCUMENT_NODE:{      elements=0;      attributes=0;      characters=0;      traverse(((org.w3c.dom.Document)node).getDocumentElement());      break;    }case Node.ELEMENT_NODE:{    elements++;    NamedNodeMap attrs=node.getAttributes();    if (attrs != null) {      attributes+=attrs.getLength();    }    NodeList children=node.getChildNodes();    if (children != null) {      int len=children.getLength();      for (int i=0; i < len; i++) {        traverse(children.item(i));      }    }    break;  }case Node.ENTITY_REFERENCE_NODE:{  NodeList children=node.getChildNodes();  if (children != null) {    int len=children.getLength();    for (int i=0; i < len; i++) {      traverse(children.item(i));    }  }  break;}case Node.CDATA_SECTION_NODE:{characters+=node.getNodeValue().length();break;}case Node.TEXT_NODE:{characters+=node.getNodeValue().length();break;}default :break;}}  }
class C{  public boolean containsKey(int key){  final Entry[] tab=table;  final int hash=key;  final int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.hash == hash) {      return true;    }  }  return false;}  }
class C{  public Class<?> resolve(){  return classForName(fullyQualifiedClassName);}  }
class C{  public ColumnInfo(String colHeader,String colSQL,Class<?> colClass,int displayType,boolean readOnly,boolean colorColumn,String keyPairColSQL){  this(colHeader,colSQL,colClass,0,readOnly,colorColumn,keyPairColSQL,true);}  }
class C{  public DrawerBuilder inflateMenu(@MenuRes int menuRes){  MenuInflater menuInflater=new SupportMenuInflater(mActivity);  MenuBuilder mMenu=new MenuBuilder(mActivity);  menuInflater.inflate(menuRes,mMenu);  addMenuItems(mMenu,false);  return this;}  }
class C{  @EventHandler(priority=EventPriority.LOWEST) public void onModuleLoadComplete(ModuleLoadCompleteEvent event){  Cardinal.getInstance().getMatchThreads().forEach(null);}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  c.setOpaque(true);}  }
class C{  public static long cycles(){  return Magic.getTimeBase();}  }
class C{  public void addTab(String title,Image icon,Component component){  insertTab(title,icon,component,tabsContainer.getComponentCount());}  }
class C{  private void fieldInsn(final int opcode,final Type ownerType,final String name,final Type fieldType){  mv.visitFieldInsn(opcode,ownerType.getInternalName(),name,fieldType.getDescriptor());}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new HindiAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public void procesarFicherosRecibidos(){  getIntercambioRegistralManager().procesarFicherosRecibidos();}  }
class C{  @OnMessage public void onMessage(final String message){}  }
class C{  void syntaxError(String s) throws RESyntaxException {  throw new RESyntaxException(s);}  }
class C{  private JsonUtil(){}  }
class C{  private static void printResults(List<TableRow> rows){  System.out.print("\nQuery Results:\n------------\n");  for (  TableRow row : rows) {    for (    TableCell field : row.getF()) {      System.out.printf("%-50s",field.getV());    }    System.out.println();  }}  }
class C{  TIntByteKeyHashIterator(TPrimitiveHash hash){  super(hash);}  }
class C{  @Override protected void withBindHolder(SingleItemHolder holder,String data,int position){  bindthisInhere(holder,data,position);}  }
class C{  Feature nextSFeature(){  Feature sF=(Feature)sFeatures.get(sFeatureIdx);  sFeatureIdx++;  return sF;}  }
class C{  public void dispose(){  m_processManager.removeListener(m_internalThreadListener);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getNamedItemNS04.class,args);}  }
class C{  public static ComponentUI createUI(JComponent b){  return new BERadioButtonMenuItemUI();}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getHitShape().contains(p);}  }
class C{  protected void customOnClose(){}  }
class C{  public LabelLayer(){  text=new OMText(0,0,"uninitialized",font,OMText.JUSTIFY_RIGHT);  text.setLinePaint(fgColor);  text.setFillPaint(bgColor);}  }
class C{  public Segment(final ConcurrentLog log,final File segmentPath,final File archivePath,final CollectionConfiguration collectionConfiguration,final WebgraphConfiguration webgraphConfiguration) throws IOException {  log.info("Initializing Segment '" + segmentPath + ".");  this.log=log;  this.segmentPath=segmentPath;  archivePath.mkdirs();  this.fulltext=new Fulltext(segmentPath,archivePath,collectionConfiguration,webgraphConfiguration);  this.termIndex=null;  this.urlCitationIndex=null;  this.firstSeenIndex=new IndexTable(new File(segmentPath,firstseenIndexName),12,8,false,false);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TMember.class) {switch (baseOperationID) {case TypesPackage.TMEMBER___GET_MEMBER_ACCESS_MODIFIER:      return TypesPackage.TSTRUCT_MEMBER___GET_MEMBER_ACCESS_MODIFIER;case TypesPackage.TMEMBER___IS_STATIC:    return TypesPackage.TSTRUCT_MEMBER___IS_STATIC;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public ArrayBasedLongToInternalIntFixedLengthBiMap(int capacity,double loadFactor,int defaultGetReturnValue,long defaultGetKeyReturnValue,StatsReceiver statsReceiver){  int arraySize=(int)(capacity / loadFactor);  int arrayLength=Math.max(Integer.highestOneBit(arraySize - 1) << 1,16);  this.capacity=(int)(arrayLength * loadFactor);  long[] dataArray=new long[arrayLength];  if (defaultGetKeyReturnValue != 0L) {    Arrays.fill(dataArray,defaultGetKeyReturnValue);  }  this.array=new AtomicLongArray(dataArray);  bitMask=dataArray.length - 1;  Preconditions.checkArgument(defaultGetReturnValue < 0 || defaultGetReturnValue >= capacity,"defaultGetReturnValue must NOT be one of the indices that can be returned otherwise.");  this.defaultGetReturnValue=defaultGetReturnValue;  this.defaultGetKeyReturnValue=defaultGetKeyReturnValue;  StatsReceiver scopedStatsReceiver=statsReceiver.scope(this.getClass().getSimpleName());  numStoredKeysCounter=scopedStatsReceiver.counter("numStoredKeys");}  }
class C{  public synchronized long pendingMessagesDiscarded(){  return pendingMsgsDiscarded;}  }
class C{  public boolean isAssignableFrom(JClass cl){  return getRawClass().isAssignableFrom(cl);}  }
class C{  public NotRandom(int size){  this.size=size;}  }
class C{  public SetConfigCommand unsetValue(String name){  if (unset == null) {    unset=new LinkedList<>();  }  unset.add(name);  return this;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public int numNodes(){  int no=1;  int i;  if (!m_isLeaf) {    for (i=0; i < m_sons.length; i++) {      no=no + m_sons[i].numNodes();    }  }  return no;}  }
class C{  private void pStackCreate(){  System.out.println();  System.out.println("pStackCreate:");  PStack<String> list1=PStackX.of("a","b","c");  System.out.println(list1);  PStack<String> list2=PStackX.fromCollection(Arrays.asList("a1","b1","c1"));  System.out.println(list2);  List<String> empty=PStackX.empty();  System.out.println(empty);  PStack<String> single=PStackX.singleton("1");  System.out.println(single);}  }
class C{  public void mousePressed(MouseEvent e){  e.getComponent().requestFocus();  mousePressed=true;  BufferedMapBean mb=getBufferedMapBean(e);  if (mb == null) {    return;  }  theMap=mb;  theMap.addPaintListener(this);  if (mb != null) {    rPoint1=theMap.getCoordinates(e);    rPoint2=null;    totalDistance=0;  }}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public boolean isInitialized(){  return getIndexData().isInitialized();}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static VirtualPool queryFullCopySourceVPool(BlockObject fcSourceObj,DbClient dbClient){  URI fcSourceURI=fcSourceObj.getId();  URI vpoolURI=null;  if (URIUtil.isType(fcSourceURI,Volume.class)) {    vpoolURI=((Volume)fcSourceObj).getVirtualPool();  } else   if (URIUtil.isType(fcSourceURI,BlockSnapshot.class)) {    URI parentVolURI=((BlockSnapshot)fcSourceObj).getParent().getURI();    Volume parentVolume=dbClient.queryObject(Volume.class,parentVolURI);    vpoolURI=parentVolume.getVirtualPool();  }  if (vpoolURI == null) {    throw APIException.badRequests.invalidFullCopySource(fcSourceURI.toString());  }  VirtualPool vpool=dbClient.queryObject(VirtualPool.class,vpoolURI);  return vpool;}  }
class C{  private void release(WNode h){  if (h != null) {    WNode q;    Thread w;    U.compareAndSwapInt(h,WSTATUS,WAITING,0);    if ((q=h.next) == null || q.status == CANCELLED) {      for (WNode t=wtail; t != null && t != h; t=t.prev)       if (t.status <= 0)       q=t;    }    if (q != null && (w=q.thread) != null)     U.unpark(w);  }}  }
class C{  protected boolean readyToProcessRequests(){  return this.ds != null;}  }
class C{  public Class<?> findClass(String name){  try {    return ClassFinder.resolveClass(name,getClassLoader());  } catch (  ClassNotFoundException exception) {    handleException(exception);    return null;  }}  }
class C{  protected Container constructSideNavigationComponent(){  return constructSideNavigationPanel();}  }
class C{  public void load(@NonNull ViewGroup parent,@NonNull View succeedView){  if (null != mSucceedView) {    removeView(mSucceedView);  }  mSucceedView=succeedView;  addView(mSucceedView,0);  parent.addView(this);}  }
class C{  private List<DiffEntry> commitToIndex(String commitId,DiffFormatter formatter) throws IOException {  if (commitId == null) {    commitId=Constants.HEAD;  }  ObjectId commitA=repository.resolve(commitId);  if (commitA == null) {    throw new IllegalArgumentException("Invalid commit id " + commitId);  }  RevTree treeA;  try (RevWalk revWalkA=new RevWalk(repository)){    treeA=revWalkA.parseTree(commitA);  }   DirCache dirCache=null;  List<DiffEntry> diff;  try (ObjectReader reader=repository.newObjectReader()){    dirCache=repository.lockDirCache();    CanonicalTreeParser iterA=new CanonicalTreeParser();    iterA.reset(reader,treeA);    DirCacheIterator iterB=new DirCacheIterator(dirCache);    if (!request.isNoRenames()) {      formatter.setDetectRenames(true);      int renameLimit=request.getRenameLimit();      if (renameLimit > 0) {        formatter.getRenameDetector().setRenameLimit(renameLimit);      }    }    diff=formatter.scan(iterA,iterB);  }  finally {    if (dirCache != null) {      dirCache.unlock();    }  }  return diff;}  }
class C{  public NodeCommand(String command){  if (command == null)   throw new IllegalArgumentException("parameter is null");  StringTokenizer st=new StringTokenizer(command);  if (st.countTokens() == 0)   throw new IllegalArgumentException("No command in given string \'" + command + "\'");  String cname=st.nextToken();  if (cname.equals("cleanall")) {    com=CLEANALL;    pars=new Object[]{new Long(10000)};    if (st.hasMoreTokens()) {      try {        pars[0]=new Long(st.nextToken());      } catch (      NumberFormatException e) {      }      if (((Long)pars[0]).longValue() < 0)       pars[0]=new Long(10000);    }  } else {    throw new IllegalArgumentException("Unknown command \'" + command + "\'");  }}  }
class C{  public int count(final FullTextQuery query){  if (cache.containsKey(query)) {    if (log.isInfoEnabled())     log.info("found hits in cache");    return cache.get(query).length;  } else {    if (log.isInfoEnabled())     log.info("did not find hits in cache");  }  final TermFrequencyData<V> qdata=tokenize(query);  if (qdata == null) {    cache.put(query,new Hit[]{});    return 0;  }  if (qdata.distinctTermCount() == 1 && !query.isMatchExact() && query.getMatchRegex() == null) {    final boolean prefixMatch=query.isPrefixMatch();    final Map.Entry<String,ITermMetadata> e=qdata.getSingletonEntry();    final String termText=e.getKey();    final ITermMetadata md=e.getValue();    final CountIndexTask<V> task1=new CountIndexTask<V>(termText,0,1,prefixMatch,md.getLocalTermWeight(),this);    return (int)task1.getRangeCount();  } else {    final Hit<V>[] a=_search(query);    return a.length;  }}  }
class C{  public static void executeSqlScript(Connection connection,String scriptPath,String script,boolean continueOnError,boolean ignoreFailedDrops,String commentPrefix,String separator,String blockCommentStartDelimiter,String blockCommentEndDelimiter) throws ScriptException {  try {    if (LOGGER.isInfoEnabled()) {      LOGGER.info("Executing SQL script from " + script);    }    long startTime=System.currentTimeMillis();    List<String> statements=new LinkedList<>();    if (separator == null) {      separator=DEFAULT_STATEMENT_SEPARATOR;    }    if (!containsSqlScriptDelimiters(script,separator)) {      separator=FALLBACK_STATEMENT_SEPARATOR;    }    splitSqlScript(scriptPath,script,separator,commentPrefix,blockCommentStartDelimiter,blockCommentEndDelimiter,statements);    int lineNumber=0;    Statement stmt=connection.createStatement();    try {      for (      String statement : statements) {        lineNumber++;        try {          stmt.execute(statement);          int rowsAffected=stmt.getUpdateCount();          if (LOGGER.isDebugEnabled()) {            LOGGER.debug(rowsAffected + " returned as updateCount for SQL: " + statement);          }        } catch (        SQLException ex) {          boolean dropStatement=statement.trim().toLowerCase().startsWith("drop");          if (continueOnError || (dropStatement && ignoreFailedDrops)) {            if (LOGGER.isDebugEnabled()) {              LOGGER.debug("Failed to execute SQL script statement at line " + lineNumber + " of resource "+ scriptPath+ ": "+ statement,ex);            }          } else {            throw new ScriptStatementFailedException(statement,lineNumber,scriptPath,ex);          }        }      }    }  finally {      try {        stmt.close();      } catch (      Throwable ex) {        LOGGER.debug("Could not close JDBC Statement",ex);      }    }    long elapsedTime=System.currentTimeMillis() - startTime;    if (LOGGER.isInfoEnabled()) {      LOGGER.info("Executed SQL script from " + scriptPath + " in "+ elapsedTime+ " ms.");    }  } catch (  Exception ex) {    if (ex instanceof ScriptException) {      throw (ScriptException)ex;    }    throw new UncategorizedScriptException("Failed to execute database script from resource [" + script + "]",ex);  }}  }
class C{  public void removeAny(TraceInterval i){  TraceInterval list=getAny();  TraceInterval prev=null;  TraceInterval cur=list;  while (cur != i) {    assert cur != null && cur != TraceInterval.EndMarker : "interval has not been found in list: " + i;    prev=cur;    cur=cur.next;  }  if (prev == null) {    setAny(cur.next);  } else {    prev.next=cur.next;  }}  }
class C{  public void flush() throws IOException {  Set<OutputStream> outputStreams=this.streams;  for (  OutputStream out : outputStreams) {    out.flush();  }}  }
class C{  public BulkUserImportException(Reason reason,Exception cause){  super(reason.toString(),cause);  bean.setReason(reason);  setMessageKey(initMessageKey(reason));}  }
class C{  protected Node newNode(){  return new GenericNotation();}  }
class C{  public void add(Map<String,Object> map) throws SQLException {  if (withinDataSetBatch) {    if (batchData.isEmpty()) {      batchKeys=map.keySet();    } else {      if (!map.keySet().equals(batchKeys)) {        throw new IllegalArgumentException("Inconsistent keys found for batch add!");      }    }    batchData.add(map);    return;  }  int answer=executeUpdate(buildListQuery(map),new ArrayList<Object>(map.values()));  if (answer != 1) {    LOG.warning("Should have updated 1 row not " + answer + " when trying to add: "+ map);  }}  }
class C{  @HLEFunction(nid=0x244172AF,version=150) public int sceNetResolverCreate(TPointer32 pRid,TPointer buffer,int bufferLength){  int newID=SceUidManager.getNewUid(uidPurpose);  ResolverID newRID=new ResolverID(newID,true);  RIDs.put(newID,newRID);  pRid.setValue(newRID.getID());  return 0;}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  void close(){  if (VDBG)   log("close()");  IBluetoothManager mgr=mAdapter.getBluetoothManager();  if (mgr != null) {    try {      mgr.unregisterStateChangeCallback(mBluetoothStateChangeCallback);    } catch (    Exception e) {      Log.e(TAG,"",e);    }  }synchronized (mConnection) {    if (mService != null) {      try {        mService=null;        mContext.unbindService(mConnection);      } catch (      Exception re) {        Log.e(TAG,"",re);      }    }  }  mServiceListener=null;}  }
class C{  public Text makeText(String string){  return new Text(string);}  }
class C{  public RestoreSnapshotRequest source(BytesReference source){  try (XContentParser parser=XContentFactory.xContent(source).createParser(source)){    return source(parser.mapOrdered());  } catch (  IOException e) {    throw new IllegalArgumentException("failed to parse template source",e);  }}  }
class C{  private void loadTracks(){  notifyPreloader(-1,0,"Loading tracks...");  File tracksFile=new File(applicationFolder + File.separator + TRACKS_PERSISTENCE_FILE);  ObservableMap<Integer,Track> tracksMap;  if (tracksFile.exists())   tracksMap=parseTracksFromJsonFile(tracksFile); else   tracksMap=FXCollections.observableHashMap();  musicLibrary.addTracks(tracksMap);}  }
class C{  public static int lowestOneBit(int i){  return (i & (-i));}  }
class C{  private synchronized void breakIfBroken() throws BrokenBarrierException {  if (isBroken()) {    throw new BrokenBarrierException();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.944 -0500",hash_original_method="5C789B83F9658DFF3AD82091DAFFDD49",hash_generated_method="1CECFCE84FD52EF63862DC7F8ED424FB") public void writeToParcel(Parcel out,int flags){  out.writeFloat(left);  out.writeFloat(top);  out.writeFloat(right);  out.writeFloat(bottom);  out.addTaint(flags);}  }
class C{  private static Map<INaviModule,IAddress> loadImageBases(final CConnection connection,final int addressSpaceId,final List<INaviModule> list) throws CouldntLoadDataException {  final HashMap<INaviModule,IAddress> imageBases=new HashMap<INaviModule,IAddress>();  final String query="SELECT module_id, image_base FROM " + CTableNames.SPACE_MODULES_TABLE + " WHERE address_space_id = "+ addressSpaceId;  try {    final ResultSet resultSet=connection.executeQuery(query,true);    try {      while (resultSet.next()) {        try {          final INaviModule module=findModule(list,resultSet.getInt("module_id"));          imageBases.put(module,PostgreSQLHelpers.loadAddress(resultSet,"image_base"));        } catch (        final MaybeNullException exception) {          CUtilityFunctions.logException(exception);        }      }    }  finally {      resultSet.close();    }    return imageBases;  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  public void skip(){  return;}  }
class C{  public ComponentName(Context pkg,String cls){  if (cls == null)   throw new NullPointerException("class name is null");  mPackage=pkg.getPackageName();  mClass=cls;}  }
class C{  private boolean equalOrBothNull(Object obj1,Object obj2){  if (obj1 == obj2) {    return true;  }  if (obj1 == null || obj2 == null) {    return false;  }  return obj1.equals(obj2);}  }
class C{  public void testToMonitorString(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  String expResult="Reply from CORE-ID reader. Tag read 04171F04FE checksum F6 valid? yes";  assertEquals(expResult,instance.toMonitorString(msgStandalone));  instance=new CoreIdRfidProtocol('A','H',1);  expResult="Reply from CORE-ID reader. Reply from port A Tag read 04171F04FE checksum F6 valid? yes";  assertEquals(expResult,instance.toMonitorString(msgConcentrator));}  }
class C{  public Gas(String s){  unlocalizedName=name=s;}  }
class C{  protected void removeCommands(Command clear,Command t9,Command originalClear){  Form f=getComponentForm();  if (f != null) {    f.removeCommand(clear);    f.removeCommand(t9);    if (selectCommand != null) {      f.removeCommand(selectCommand);    }    f.setClearCommand(originalClearCommand);    if (replaceMenu && originalCommands != null) {      int olen=originalCommands.length;      for (int iter=olen - 1; iter >= 0; iter--) {        f.addCommand(originalCommands[iter]);      }      originalCommands=null;    }    f.revalidate();  }}  }
class C{  public WKTFileReader(String filename,WKTReader wktReader){  this(new File(filename),wktReader);}  }
class C{  final boolean tokenIs(char c){  return (m_token != null) ? (m_tokenChar == c) : false;}  }
class C{  public void mousePressed(final MouseEvent mouseEvent){  Point lastClickedPoint=mouseEvent.getPoint();  if (mouseEvent.isControlDown() || (mouseEvent.getButton() == MouseEvent.BUTTON3)) {    contextMenu.show(frame,(int)lastClickedPoint.getX() + MENU_X_OFFSET,(int)lastClickedPoint.getY() + MENU_Y_OFFSET);  }}  }
class C{  public IonValue loadOneValue(String text){  IonDatagram dg=loader().load(text);  if (dg.size() == 0) {    fail("No user values in text: " + text);  }  if (dg.size() > 1) {    IonValue part=dg.get(1);    fail("Found unexpected part <" + part + "> in text: "+ text);  }  IonValue value=dg.get(0);  dg.remove(value);  return value;}  }
class C{  public static AbstractTripleStore mockTripleStore(final String namespace){  final Properties properties=new Properties();  properties.setProperty(com.bigdata.journal.Options.BUFFER_MODE,BufferMode.MemStore.name());  final Journal store=new Journal(properties);  final AbstractTripleStore kb=new LocalTripleStore(store,namespace,ITx.UNISOLATED,properties);  kb.create();  store.commit();  return kb;}  }
class C{  public static String randomString(int length){  if (length < 1) {    return null;  }  char[] randBuffer=new char[length];  for (int i=0; i < randBuffer.length; i++) {    randBuffer[i]=numbersAndLetters[randGen.nextInt(71)];  }  return new String(randBuffer);}  }
class C{  public boolean onClickPerformed(){  if (mCheckable) {    mChecked=!mChecked;  }  return mListener != null && mListener.onMenuItemClick(this);}  }
class C{  public Boolean isEnable(){  return enable;}  }
class C{  public static String toString(Object object,String tagName) throws JSONException {  StringBuilder sb=new StringBuilder();  int i;  JSONArray ja;  JSONObject jo;  String key;  Iterator<String> keys;  int length;  String string;  Object value;  if (object instanceof JSONObject) {    if (tagName != null) {      sb.append('<');      sb.append(tagName);      sb.append('>');    }    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next();      value=jo.opt(key);      if (value == null) {        value="";      }      string=value instanceof String ? (String)value : null;      if ("content".equals(key)) {        if (value instanceof JSONArray) {          ja=(JSONArray)value;          length=ja.length();          for (i=0; i < length; i+=1) {            if (i > 0) {              sb.append('\n');            }            sb.append(escape(ja.get(i).toString()));          }        } else {          sb.append(escape(value.toString()));        }      } else       if (value instanceof JSONArray) {        ja=(JSONArray)value;        length=ja.length();        for (i=0; i < length; i+=1) {          value=ja.get(i);          if (value instanceof JSONArray) {            sb.append('<');            sb.append(key);            sb.append('>');            sb.append(toString(value));            sb.append("</");            sb.append(key);            sb.append('>');          } else {            sb.append(toString(value,key));          }        }      } else       if ("".equals(value)) {        sb.append('<');        sb.append(key);        sb.append("/>");      } else {        sb.append(toString(value,key));      }    }    if (tagName != null) {      sb.append("</");      sb.append(tagName);      sb.append('>');    }    return sb.toString();  }  if (object != null) {    if (object.getClass().isArray()) {      object=new JSONArray(object);    }    if (object instanceof JSONArray) {      ja=(JSONArray)object;      length=ja.length();      for (i=0; i < length; i+=1) {        sb.append(toString(ja.opt(i),tagName == null ? "array" : tagName));      }      return sb.toString();    }  }  string=(object == null) ? "null" : escape(object.toString());  return (tagName == null) ? "\"" + string + "\"" : (string.length() == 0) ? "<" + tagName + "/>" : "<" + tagName + ">"+ string+ "</"+ tagName+ ">";}  }
class C{  public IssueMatcher offset(int expectedOffset){  return addEqualsMatcher("offset",expectedOffset,null);}  }
class C{  public Optional<EAnnotationWrapper<A>> findFirstAnnotationByName(final String name){  checkNotNull(name,"name");  return tryFind(annotationResolver.apply(annotatable),null);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static int OS2IP(byte[] input,int inOff,int inLen){  int result=0;  for (int i=inLen - 1; i >= 0; i--) {    result|=(input[inOff + i] & 0xff) << (8 * i);  }  return result;}  }
class C{  public void addZoomListener(ZoomListener listener){}  }
class C{  public CViewSaverOperation(final String description){  CGlobalProgressManager.instance().add(this);  m_progressPanel.setText(description);  m_progressPanel.start();}  }
class C{  public boolean isUnix(){  return u;}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId){  return new InputSource(new StringReader(""));}  }
class C{  public IssuerAlternativeNameExtension(Boolean critical,GeneralNames names) throws IOException {  this.names=names;  this.extensionId=PKIXExtensions.IssuerAlternativeName_Id;  this.critical=critical.booleanValue();  encodeThis();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:20.715 -0500",hash_original_method="D4C35157D70C69AB7944CFDC18FEF0BE",hash_generated_method="1CEA631C42C9FC4BF01F41A7F2D3B794") public static String toLowerCase(Locale locale,String s,char[] value,int offset,int count){  String languageCode=locale.getLanguage();  if (languageCode.equals("tr") || languageCode.equals("az") || languageCode.equals("lt")) {    return ICU.toLowerCase(s,locale.toString());  }  char[] newValue=null;  int newCount=0;  for (int i=offset, end=offset + count; i < end; ++i) {    char ch=value[i];    char newCh;    if (ch == LATIN_CAPITAL_I_WITH_DOT || Character.isHighSurrogate(ch)) {      return ICU.toLowerCase(s,locale.toString());    } else     if (ch == GREEK_CAPITAL_SIGMA && isFinalSigma(value,offset,count,i)) {      newCh=GREEK_SMALL_FINAL_SIGMA;    } else {      newCh=Character.toLowerCase(ch);    }    if (newValue == null && ch != newCh) {      newValue=new char[count];      newCount=i - offset;      System.arraycopy(value,offset,newValue,0,newCount);    }    if (newValue != null) {      newValue[newCount++]=newCh;    }  }  return newValue != null ? new String(0,newCount,newValue) : s;}  }
class C{  public void zoomOut(){  if (zoomIndex <= 0) {    return;  }  this.zoomIndex-=1;}  }
class C{  @Override protected void validate() throws IllegalStateException {  boolean inUseFound=false;  int numMethods=VerificationMethod.MethodType.values().length;  BitSet foundMethods=new BitSet(numMethods);  for (  VerificationMethod m : getVerificationMethods()) {    int methodIndex=m.getMethodType().ordinal();    if (foundMethods.get(methodIndex)) {      throw new IllegalStateException("Duplicate verification method.");    }    foundMethods.set(methodIndex);    if (m.getInUse()) {      if (inUseFound) {        throw new IllegalStateException("Only one method can be marked as in-use.");      }      inUseFound=true;    }  }}  }
class C{  public static Thread start(Thread self,Closure closure){  return createThread(null,false,closure);}  }
class C{  public boolean isUnion(){  return union;}  }
class C{  public boolean isCABCEnabled(){  try {    return checkService() && sService.isCABCEnabled();  } catch (  RemoteException e) {    return false;  }}  }
class C{  private static synchronized void createTransactionManager(){  if (transactionManager == null)   transactionManager=new TransactionManagerImpl();}  }
class C{  public static int compareTo(final byte[] left,final byte[] right){  return UnsignedBytes.lexicographicalComparator().compare(left,right);}  }
class C{  public DateTime(long instant){  super(instant);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof Xid))   return false;  Xid other=(Xid)obj;  boolean result=formatId == other.getFormatId();  byte[] otherGlobalID=other.getGlobalTransactionId();  byte[] otherBranchID=other.getBranchQualifier();  result&=Arrays.equals(globalId,otherGlobalID);  result&=Arrays.equals(branchId,otherBranchID);  return result;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  private int calculateCurrentSeconds(float mCurrentProgressPosition){  return (int)(mCurrentProgressPosition * mMaxSeconds) / mWidth;}  }
class C{  protected void stopProcessor(){  thread=null;  pool.shutdownNow();  try {    if (!pool.awaitTermination(1,TimeUnit.MINUTES)) {      LOG.warn("Failed to gracefully shutdown");    }  } catch (  InterruptedException e) {    LOG.info("Interrupted while waiting for stop",e);    Thread.currentThread().interrupt();  }}  }
class C{  public MemStatementIterator(MemStatementList statementList,MemResource subject,MemIRI predicate,MemValue object,Boolean explicit,int snapshot,MemResource... contexts){  this.statementList=statementList;  this.subject=subject;  this.predicate=predicate;  this.object=object;  this.contexts=contexts;  this.explicit=explicit;  this.snapshot=snapshot;  this.statementIdx=-1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static ImageType find(String type,String mediaType,String extension){  return enums.find(new String[]{type,mediaType,extension});}  }
class C{  public static boolean isAllOrWildcard(String[] data){  return CollectionUtils.isEmpty(data) || data.length == 1 && ("_all".equals(data[0]) || "*".equals(data[0]));}  }
class C{  private static boolean search(String[] ids,String id){  return (Arrays.binarySearch(ids,id) >= 0);}  }
class C{  public void pointerDrag(float x,float y,int[] path){  TestUtils.pointerDrag(x,y,path);}  }
class C{  protected void waitForActiveWriter() throws InterruptedException {  activeWriter.waitForActiveLocks();}  }
class C{  public boolean isEmpty(){  return head == tail;}  }
class C{  public static void assertThrows(final Consumer<Void> consumer,final Class<?> exceptionClass,final String message){  assertThrows(consumer,exceptionClass,null,message);}  }
class C{  public void flush() throws IOException {  this.out.write(this.buff,0,this.len);  this.out.flush();  this.len=0;}  }
class C{  @SuppressWarnings("unchecked") protected void constructPDG(){  Hashtable<Block,Region> block2region=this.m_regionAnalysis.getBlock2RegionMap();  DominatorTree pdom=this.m_regionAnalysis.getPostDominatorTree();  DominatorTree dom=this.m_regionAnalysis.getDominatorTree();  List<Region> regions2process=new LinkedList<Region>();  Region topLevelRegion=this.m_regionAnalysis.getTopLevelRegion();  m_strongRegionStartID=m_weakRegions.size();  PDGNode pdgnode=new PDGNode(topLevelRegion,PDGNode.Type.REGION);  this.addNode(pdgnode);  this.m_obj2pdgNode.put(topLevelRegion,pdgnode);  this.m_startNode=pdgnode;  topLevelRegion.setParent(null);  regions2process.add(topLevelRegion);  while (!regions2process.isEmpty()) {    Region r=regions2process.remove(0);    pdgnode=this.m_obj2pdgNode.get(r);    List<Block> blocks=r.getBlocks();    Hashtable<Region,List<Block>> toBeRemoved=new Hashtable<Region,List<Block>>();    PDGNode prevPDGNodeInRegion=null;    PDGNode curNodeInRegion=null;    for (Iterator<Block> itr=blocks.iterator(); itr.hasNext(); ) {      Block a=itr.next();      PDGNode pdgNodeOfA=null;      if (!this.m_obj2pdgNode.containsKey(a)) {        pdgNodeOfA=new PDGNode(a,PDGNode.Type.CFGNODE);        this.addNode(pdgNodeOfA);        this.m_obj2pdgNode.put(a,pdgNodeOfA);      } else       pdgNodeOfA=this.m_obj2pdgNode.get(a);      this.addEdge(pdgnode,pdgNodeOfA,"dependency");      pdgnode.addDependent(pdgNodeOfA);      curNodeInRegion=pdgNodeOfA;      List<Block> bs=this.m_blockCFG.getSuccsOf(a);      for (Iterator<Block> bItr=bs.iterator(); bItr.hasNext(); ) {        List<Block> dependents=new ArrayList<Block>();        Block b=bItr.next();        if (b.equals(a))         throw new RuntimeException("PDG construction: A and B are not supposed to be the same node!");        DominatorNode aDode=pdom.getDode(a);        DominatorNode bDode=pdom.getDode(b);        if (pdom.isDominatorOf(bDode,aDode))         continue;        DominatorNode aParentDode=aDode.getParent();        DominatorNode dode=bDode;        while (dode != aParentDode) {          dependents.add((Block)dode.getGode());          if (dode.getParent() == null)           break;          dode=dode.getParent();        }        if (pdgNodeOfA.getAttrib() != PDGNode.Attribute.CONDHEADER) {          PDGNode oldA=pdgNodeOfA;          pdgNodeOfA=new ConditionalPDGNode(pdgNodeOfA);          this.replaceInGraph(pdgNodeOfA,oldA);          pdgnode.removeDependent(oldA);          this.m_obj2pdgNode.put(a,pdgNodeOfA);          pdgnode.addDependent(pdgNodeOfA);          pdgNodeOfA.setAttrib(PDGNode.Attribute.CONDHEADER);          curNodeInRegion=pdgNodeOfA;        }        List<Block> copyOfDependents=new ArrayList<Block>();        copyOfDependents.addAll(dependents);        Region regionOfB=block2region.get(b);        PDGNode pdgnodeOfBRegion=null;        if (!this.m_obj2pdgNode.containsKey(regionOfB)) {          pdgnodeOfBRegion=new PDGNode(regionOfB,PDGNode.Type.REGION);          this.addNode(pdgnodeOfBRegion);          this.m_obj2pdgNode.put(regionOfB,pdgnodeOfBRegion);        } else         pdgnodeOfBRegion=this.m_obj2pdgNode.get(regionOfB);        regionOfB.setParent(r);        r.addChildRegion(regionOfB);        this.addEdge(pdgNodeOfA,pdgnodeOfBRegion,"dependency");        pdgNodeOfA.addDependent(pdgnodeOfBRegion);        regions2process.add(regionOfB);        copyOfDependents.remove(b);        copyOfDependents.removeAll(regionOfB.getBlocks());        while (!copyOfDependents.isEmpty()) {          Block depB=copyOfDependents.remove(0);          Region rdepB=block2region.get(depB);          PDGNode depBPDGNode=this.m_obj2pdgNode.get(depB);          if (depBPDGNode == null) {            PDGNode pdgnodeOfdepBRegion=null;            if (!this.m_obj2pdgNode.containsKey(rdepB)) {              pdgnodeOfdepBRegion=new PDGNode(rdepB,PDGNode.Type.REGION);              this.addNode(pdgnodeOfdepBRegion);              this.m_obj2pdgNode.put(rdepB,pdgnodeOfdepBRegion);            } else             pdgnodeOfdepBRegion=this.m_obj2pdgNode.get(rdepB);            rdepB.setParent(regionOfB);            regionOfB.addChildRegion(rdepB);            this.addEdge(pdgnodeOfBRegion,pdgnodeOfdepBRegion,"dependency");            pdgnodeOfBRegion.addDependent(pdgnodeOfdepBRegion);            regions2process.add(rdepB);            copyOfDependents.removeAll(rdepB.getBlocks());            continue;          }          if (dependents.containsAll(rdepB.getBlocks())) {            PDGNode pdgnodeOfdepBRegion=null;            if (!this.m_obj2pdgNode.containsKey(rdepB)) {              pdgnodeOfdepBRegion=new PDGNode(rdepB,PDGNode.Type.REGION);              this.addNode(pdgnodeOfdepBRegion);              this.m_obj2pdgNode.put(rdepB,pdgnodeOfdepBRegion);            } else             pdgnodeOfdepBRegion=this.m_obj2pdgNode.get(rdepB);            this.addEdge(pdgnodeOfBRegion,pdgnodeOfdepBRegion,"dependency");            pdgnodeOfBRegion.addDependent(pdgnodeOfdepBRegion);            regions2process.add(rdepB);            copyOfDependents.removeAll(rdepB.getBlocks());            continue;          } else {            PDGNode predPDGofdepB=(PDGNode)this.getPredsOf(depBPDGNode).get(0);            assert (this.m_obj2pdgNode.containsKey(rdepB));            PDGNode pdgnodeOfdepBRegion=this.m_obj2pdgNode.get(rdepB);            if (predPDGofdepB == pdgnodeOfdepBRegion) {              Region newRegion=new Region(this.m_strongRegionStartID++,topLevelRegion.getSootMethod(),topLevelRegion.getSootClass(),this.m_cfg);              newRegion.add(depB);              this.m_strongRegions.add(newRegion);              List<Block> blocks2BRemoved;              if (toBeRemoved.contains(predPDGofdepB))               blocks2BRemoved=toBeRemoved.get(predPDGofdepB); else {                blocks2BRemoved=new ArrayList<Block>();                toBeRemoved.put(rdepB,blocks2BRemoved);              }              blocks2BRemoved.add(depB);              PDGNode newpdgnode=new LoopedPDGNode(newRegion,PDGNode.Type.REGION,depBPDGNode);              this.addNode(newpdgnode);              this.m_obj2pdgNode.put(newRegion,newpdgnode);              newpdgnode.setAttrib(PDGNode.Attribute.LOOPHEADER);              depBPDGNode.setAttrib(PDGNode.Attribute.LOOPHEADER);              this.removeEdge(pdgnodeOfdepBRegion,depBPDGNode,"dependency");              pdgnodeOfdepBRegion.removeDependent(depBPDGNode);              this.addEdge(pdgnodeOfdepBRegion,newpdgnode,"dependency");              this.addEdge(newpdgnode,depBPDGNode,"dependency");              pdgnodeOfdepBRegion.addDependent(newpdgnode);              newpdgnode.addDependent(depBPDGNode);              if (depB == a) {                PDGNode loopBodyPDGNode=(PDGNode)this.getSuccsOf(depBPDGNode).get(0);                this.addEdge(depBPDGNode,newpdgnode,"dependency-back");                ((LoopedPDGNode)newpdgnode).setBody(loopBodyPDGNode);                depBPDGNode.addBackDependent(newpdgnode);                curNodeInRegion=newpdgnode;              } else {                pdgnodeOfBRegion.addBackDependent(newpdgnode);                this.addEdge(pdgnodeOfBRegion,newpdgnode,"dependency-back");                PDGNode loopBodyPDGNode=null;                List<PDGNode> successors=this.getSuccsOf(depBPDGNode);                Iterator<PDGNode> succItr=successors.iterator();                while (succItr.hasNext()) {                  PDGNode succRPDGNode=succItr.next();                  assert (succRPDGNode.getType() == PDGNode.Type.REGION);                  Region succR=(Region)succRPDGNode.getNode();                  Block h=succR.getBlocks().get(0);                  DominatorNode hdode=dom.getDode(h);                  DominatorNode adode=dom.getDode(a);                  if (dom.isDominatorOf(hdode,adode)) {                    loopBodyPDGNode=succRPDGNode;                    break;                  }                }                assert (loopBodyPDGNode != null);                ((LoopedPDGNode)newpdgnode).setBody(loopBodyPDGNode);                PDGNode prev=depBPDGNode.getPrev();                if (prev != null) {                  this.removeEdge(prev,depBPDGNode,"controlflow");                  this.addEdge(prev,newpdgnode,"controlflow");                  prev.setNext(newpdgnode);                  newpdgnode.setPrev(prev);                  depBPDGNode.setPrev(null);                }                PDGNode next=depBPDGNode.getNext();                if (next != null) {                  this.removeEdge(depBPDGNode,next,"controlflow");                  this.addEdge(newpdgnode,next,"controlflow");                  newpdgnode.setNext(next);                  next.setPrev(newpdgnode);                  depBPDGNode.setNext(null);                }              }            } else {              this.addEdge(pdgnodeOfBRegion,predPDGofdepB,"dependency-back");              pdgnodeOfBRegion.addBackDependent(predPDGofdepB);            }          }        }      }      if (prevPDGNodeInRegion != null) {        this.addEdge(prevPDGNodeInRegion,curNodeInRegion,"controlflow");        prevPDGNodeInRegion.setNext(curNodeInRegion);        curNodeInRegion.setPrev(prevPDGNodeInRegion);      }      prevPDGNodeInRegion=curNodeInRegion;    }    Enumeration<Region> itr1=toBeRemoved.keys();    while (itr1.hasMoreElements()) {      Region region=itr1.nextElement();      Iterator<Block> blockItr=toBeRemoved.get(region).iterator();      while (blockItr.hasNext())       region.remove(blockItr.next());    }  }}  }
class C{  public RegressionParamsEditor(){}  }
class C{  static <T>GeneralRange<T> range(Comparator<? super T> comparator,@Nullable T lower,BoundType lowerType,@Nullable T upper,BoundType upperType){  return new GeneralRange<T>(comparator,true,lower,lowerType,true,upper,upperType);}  }
class C{  public PointF[] newArray(int size){  return new PointF[size];}  }
class C{  void secureAuth411(Buffer packet,int packLength,String user,String password,String database,boolean writeClientParams) throws SQLException {  String enc=getEncodingForHandshake();  if (packet == null) {    packet=new Buffer(packLength);  }  if (writeClientParams) {    if (this.use41Extensions) {      if (versionMeetsMinimum(4,1,1)) {        packet.writeLong(this.clientParam);        packet.writeLong(this.maxThreeBytes);        appendCharsetByteForHandshake(packet,enc);        packet.writeBytesNoNull(new byte[23]);      } else {        packet.writeLong(this.clientParam);        packet.writeLong(this.maxThreeBytes);      }    } else {      packet.writeInt((int)this.clientParam);      packet.writeLongInt(this.maxThreeBytes);    }  }  if (user != null) {    packet.writeString(user,enc,this.connection);  }  if (password.length() != 0) {    packet.writeByte((byte)0x14);    try {      packet.writeBytesNoNull(Security.scramble411(password,this.seed,this.connection.getPasswordCharacterEncoding()));    } catch (    NoSuchAlgorithmException nse) {      throw SQLError.createSQLException(Messages.getString("MysqlIO.91") + Messages.getString("MysqlIO.92"),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());    }catch (    UnsupportedEncodingException e) {      throw SQLError.createSQLException(Messages.getString("MysqlIO.91") + Messages.getString("MysqlIO.92"),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());    }  } else {    packet.writeByte((byte)0);  }  if (this.useConnectWithDb) {    packet.writeString(database,enc,this.connection);  } else {    packet.writeByte((byte)0);  }  if ((this.serverCapabilities & CLIENT_CONNECT_ATTRS) != 0) {    sendConnectionAttributes(packet,enc,this.connection);  }  send(packet,packet.getPosition());  byte savePacketSequence=this.packetSequence++;  Buffer reply=checkErrorPacket();  if (reply.isAuthMethodSwitchRequestPacket()) {    this.packetSequence=++savePacketSequence;    packet.clear();    String seed323=this.seed.substring(0,8);    packet.writeString(Util.newCrypt(password,seed323,this.connection.getPasswordCharacterEncoding()));    send(packet,packet.getPosition());    checkErrorPacket();  }}  }
class C{  public void addDirtyRegion(JComponent c,int x,int y,int w,int h){  RepaintManager delegate=getDelegate(c);  if (delegate != null) {    delegate.addDirtyRegion(c,x,y,w,h);    return;  }  addDirtyRegion0(c,x,y,w,h);}  }
class C{  public GeoRssWhere(Point lower,Point upper){  this(new GmlEnvelope(lower,upper));}  }
class C{  public DioriteTask start(long startDelay){  if (this.type == TaskType.SINGLE) {    this.delay+=startDelay;    return this.plugin.getDiorite().getScheduler().runTask(this,0);  }  if (this.name == null) {    this.name=this.runnable.getClass().getName() + "@" + System.identityHashCode(this.runnable);  }  return this.plugin.getDiorite().getScheduler().runTask(this,startDelay);}  }
class C{  private void dynInit(){  ArrayList<KeyNamePair> data=getPaySelectionData();  for (  KeyNamePair pp : data)   fPaySelect.addItem(pp);  if (fPaySelect.getItemCount() == 0)   FDialog.info(m_WindowNo,form,"VPayPrintNoRecords"); else {    fPaySelect.setSelectedIndex(0);    loadPaySelectInfo();  }}  }
class C{  protected FloatControl(Type type,float minimum,float maximum,float precision,int updatePeriod,float initialValue,String units,String minLabel,String midLabel,String maxLabel){  super(type);  if (minimum > maximum) {    throw new IllegalArgumentException("Minimum value " + minimum + " exceeds maximum value "+ maximum+ ".");  }  if (initialValue < minimum) {    throw new IllegalArgumentException("Initial value " + initialValue + " smaller than allowable minimum value "+ minimum+ ".");  }  if (initialValue > maximum) {    throw new IllegalArgumentException("Initial value " + initialValue + " exceeds allowable maximum value "+ maximum+ ".");  }  this.minimum=minimum;  this.maximum=maximum;  this.precision=precision;  this.updatePeriod=updatePeriod;  this.value=initialValue;  this.units=units;  this.minLabel=((minLabel == null) ? "" : minLabel);  this.midLabel=((midLabel == null) ? "" : midLabel);  this.maxLabel=((maxLabel == null) ? "" : maxLabel);}  }
class C{  public void destroy(ObservableGroup group){  group.destroy();  observableGroupMap.remove(group.id());}  }
class C{  public boolean isLevel(){  return level;}  }
class C{  public void andNot(BitVector other){  checkSize(other);  final long[] theBits=this.bits;  final long[] otherBits=other.bits;  for (int i=theBits.length; --i >= 0; )   theBits[i]&=~otherBits[i];}  }
class C{  public ExternalLibraryPreferenceModel(final URI firstLocation,final URI... restLocations){  this(Lists.asList(firstLocation,restLocations));}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));  expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static void init(){  if (Bukkit.getServer() != null) {    if (Bukkit.getVersion().contains("MCPC") || Bukkit.getVersion().contains("Forge")) {      forge=true;    }    final Server server=Bukkit.getServer();    final Class<?> bukkitServerClass=server.getClass();    String[] pas=bukkitServerClass.getName().split("\\.");    if (pas.length == 5) {      final String verB=pas[3];      preClassB="org.bukkit.craftbukkit." + verB;    }    try {      final Method getHandle=bukkitServerClass.getDeclaredMethod("getHandle");      final Object handle=getHandle.invoke(server);      final Class handleServerClass=handle.getClass();      pas=handleServerClass.getName().split("\\.");      if (pas.length == 5) {        final String verM=pas[3];        preClassM="net.minecraft.server." + verM;      }    } catch (    final Exception ignored) {      MainUtil.handleError(ignored);    }  }}  }
class C{  private boolean noTrailInstructions(BlockNode block){  IContainer curContainer=block;  for (  IRegion region : regionStack) {    if (region instanceof IBranchRegion) {      curContainer=region;      continue;    }    List<IContainer> subBlocks=region.getSubBlocks();    if (!subBlocks.isEmpty()) {      ListIterator<IContainer> itSubBlock=subBlocks.listIterator(subBlocks.size());      while (itSubBlock.hasPrevious()) {        IContainer subBlock=itSubBlock.previous();        if (subBlock == curContainer) {          break;        } else         if (!isEmpty(subBlock)) {          return false;        }      }    }    curContainer=region;  }  return true;}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  if (object.has("ripeness")) {    ripeness=object.getInt("ripeness");  } else {    ripeness=0;  }  if (object.has("max_ripeness")) {    maxRipeness=object.getInt("max_ripeness");  } else {    maxRipeness=5;  }}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public boolean isMcastEnabled(){  return this.getMcastPort() > 0;}  }
class C{  public void run(){  while (true) {    Runnable r=null;synchronized (queue) {      while (queue.isEmpty()) {        try {          queue.wait();        } catch (        java.lang.InterruptedException e) {          e.printStackTrace();        }      }      r=queue.remove(queue.size() - 1);    }    try {      r.run();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  protected static boolean readYes() throws IOException {  return (System.in.read() == 'y');}  }
class C{  public void printVerboseGc(){  System.out.println("Uptime: " + formatMillis(rmbean.getUptime()));  System.out.println("Heap usage: " + mmbean.getHeapMemoryUsage());  System.out.println("Non-Heap memory usage: " + mmbean.getNonHeapMemoryUsage());  for (  GarbageCollectorMXBean gc : gcmbeans) {    System.out.print(" [" + gc.getName() + ": ");    System.out.print("Count=" + gc.getCollectionCount());    System.out.print(" GCTime=" + formatMillis(gc.getCollectionTime()));    System.out.print("]");  }  System.out.println();  for (  MemoryPoolMXBean p : pools) {    System.out.print("  [" + p.getName() + ":");    MemoryUsage u=p.getUsage();    System.out.print(" Used=" + formatBytes(u.getUsed()));    System.out.print(" Committed=" + formatBytes(u.getCommitted()));    System.out.println("]");  }}  }
class C{  public FileOperationFailedException(String operation,String entity,String name){  super(String.format(_errorMessage,operation,entity,name));}  }
class C{  public static void process(ASyncProcess aProcess,int WindowNo,ProcessInfo pi,Trx trx){  log.fine("WindowNo=" + WindowNo + " - "+ pi);  MPInstance instance=null;  try {    instance=new MPInstance(Env.getCtx(),pi.getAD_Process_ID(),pi.getRecord_ID());  } catch (  Exception e) {    pi.setSummary(e.getLocalizedMessage());    pi.setError(true);    log.warning(pi.toString());  }catch (  Error e) {    pi.setSummary(e.getLocalizedMessage());    pi.setError(true);    log.warning(pi.toString());  }  if (!instance.save()) {    pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessNoInstance"));    pi.setError(true);  }  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  ProcessModalDialog para=new ProcessModalDialog(aProcess,WindowNo,pi,false);  if (para.isValid()) {    para.setWidth("500px");    para.setVisible(true);    para.setPosition("center");    para.setAttribute(Window.MODE_KEY,Window.MODE_MODAL);    AEnv.showWindow(para);  }}  }
class C{  public boolean inField(){  return false;}  }
class C{  @Override public void updateInterceptors(List<BaseInterceptor> incomingInterceptors,List<BaseInterceptor> outgoingInterceptors){  for (  ProtocolManager manager : protocolMap.values()) {    manager.updateInterceptors(incomingInterceptors,outgoingInterceptors);  }}  }
class C{  public static ValueTimestamp parse(String s){  try {    return parseTry(s);  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"TIMESTAMP",s);  }}  }
class C{  public SecP224R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  int blockLen=(lineLen * 3) / 4;  if (blockLen <= 0)   throw new IllegalArgumentException();  int lines=(iLen + blockLen - 1) / blockLen;  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();  StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  public static <S extends HasDataChangedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DataChangedEvent event=new DataChangedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @Override public void tearDown(){  super.tearDown();}  }
class C{  @Override public final void save(final IScope scope,final Facets saveFacets){  final IExpression exp=saveFacets.getExpr(IKeyword.REWRITE);  final boolean overwrite=exp == null || Cast.asBool(scope,exp.value(scope));  if (overwrite && getFile(scope).exists()) {    getFile(scope).delete();  }  if (!writable)   throw GamaRuntimeException.error("File " + getName(scope) + " is not writable",scope);  flushBuffer(scope,saveFacets);}  }
class C{  private void assertRow(View rowView,FontAwesomeIcons icon,int titleRes,int subtitleRes){  assertNotNull(rowView);  assertThat(rowView).isInstanceOf(ViewGroup.class);  View iconView=rowView.findViewById(R.id.row_type);  assertNotNull(iconView);  assertThat(iconView).isInstanceOf(IconImageView.class);  assertEquals(icon,((IconImageView)iconView).getIcon());  Resources res=rowView.getContext().getResources();  View titleView=rowView.findViewById(R.id.row_title);  assertNotNull(titleView);  assertThat(titleView).isInstanceOf(TextView.class);  assertThat((TextView)titleView).hasText(res.getText(titleRes));  View subtitleView=rowView.findViewById(R.id.row_subtitle);  assertNotNull(subtitleView);  assertThat(subtitleView).isInstanceOf(TextView.class);  assertThat((TextView)subtitleView).hasText(res.getText(subtitleRes));}  }
class C{  public void clearHistory(){  while (mFragmentManager.popBackStackImmediate())   ;}  }
class C{  @Override protected void selectAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  throw new UnsupportedOperationException();}  }
class C{  public Serializer withWhitelistRequired(boolean whitelistRequired){  this.whitelistRequired.set(whitelistRequired);  return this;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  private void drawEye(Canvas canvas,PointF eyePosition,float eyeRadius,PointF irisPosition,float irisRadius,boolean isOpen){  if (isOpen) {    canvas.drawCircle(eyePosition.x,eyePosition.y,eyeRadius,mEyeWhitesPaint);    canvas.drawCircle(irisPosition.x,irisPosition.y,irisRadius,mEyeIrisPaint);  } else {    canvas.drawCircle(eyePosition.x,eyePosition.y,eyeRadius,mEyeLidPaint);    float y=eyePosition.y;    float start=eyePosition.x - eyeRadius;    float end=eyePosition.x + eyeRadius;    canvas.drawLine(start,y,end,y,mEyeOutlinePaint);  }  canvas.drawCircle(eyePosition.x,eyePosition.y,eyeRadius,mEyeOutlinePaint);}  }
class C{  protected InputStream openFileInputStream(String filePath) throws IOException {  return new FileInputStream(filePath);}  }
class C{  @Override public void logSevere(String message,Throwable t){  super.logSevere(message,t);  errorString=message;  hasError=true;  handleExecutionResult(ERROR_RESULT);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void save(OutputStream stream,ClipboardFormat format) throws IOException {  checkNotNull(stream);  checkNotNull(format);  try (ClipboardWriter writer=format.getWriter(stream)){    writer.write(clipboard,clipboard.getRegion().getWorld().getWorldData());  } }  }
class C{  public static void createParameterizedQueryRegion(){  try {    if (logger.isDebugEnabled()) {      logger.debug("Starting creation of  __ParameterizedQueries__ region");    }    GemFireCacheImpl cache=(GemFireCacheImpl)CacheFactory.getAnyInstance();    if (cache != null) {      final InternalRegionArguments regionArguments=new InternalRegionArguments();      regionArguments.setIsUsedForMetaRegion(true);      final AttributesFactory<String,String> attributesFactory=new AttributesFactory<String,String>();      attributesFactory.setConcurrencyChecksEnabled(false);      attributesFactory.setDataPolicy(DataPolicy.REPLICATE);      attributesFactory.setKeyConstraint(String.class);      attributesFactory.setScope(Scope.DISTRIBUTED_ACK);      attributesFactory.setStatisticsEnabled(false);      attributesFactory.setValueConstraint(String.class);      final RegionAttributes<String,String> regionAttributes=attributesFactory.create();      cache.createVMRegion("__ParameterizedQueries__",regionAttributes,regionArguments);      if (logger.isDebugEnabled()) {        logger.debug("Successfully created __ParameterizedQueries__ region");      }    } else {      logger.error("Cannot create ParameterizedQueries Region as no cache found!");    }  } catch (  Exception e) {    if (logger.isDebugEnabled()) {      logger.debug("Error creating __ParameterizedQueries__ Region with cause {}",e.getMessage(),e);    }  }}  }
class C{  public cudaMipmappedArray(){}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.LINE_START;}  }
class C{  public boolean validate(){  if (validators == null || validators.size() == 0) {    return true;  }  CharSequence text=getText();  boolean isEmpty=text.length() == 0;  boolean isValid=true;  for (  METValidator validator : validators) {    isValid=isValid && validator.isValid(text,isEmpty);    if (!isValid) {      setError(validator.getErrorMessage());      break;    }  }  postInvalidate();  return isValid;}  }
class C{  public static <K,V>Builder<K,V> builder(){  return new Builder();}  }
class C{  @LargeTest public void testRemountObb(){  mFile=createObbFile(OBB_FILE_1,R.raw.obb_file1);  String filePath=mFile.getAbsolutePath();  mountObb(filePath);  verifyObb1Contents(filePath);  mountObb(filePath,null,OnObbStateChangeListener.ERROR_ALREADY_MOUNTED);  verifyObb1Contents(filePath);  unmountObb(filePath,DONT_FORCE);}  }
class C{  @SuppressWarnings("rawtypes") public DistinctFilterImpl(final IPropertySet propertySet){  final int initialCapacity=getProperty(propertySet,Annotations.INITIAL_CAPACITY,Annotations.DEFAULT_INITIAL_CAPACITY);  final float loadFactor=getProperty(propertySet,Annotations.LOAD_FACTOR,Annotations.DEFAULT_LOAD_FACTOR);  members=new HashSet(initialCapacity,loadFactor);}  }
class C{  public int size(){  return col.size();}  }
class C{  private Element createKeyDescriptor(boolean exportPrivateData) throws Exception {  Element keyValueEle=null;  if (exportPrivateData) {    keyValueEle=createKeyValue();  }  Element x509DataEle=createX509Data();  if (x509DataEle == null && keyValueEle == null) {    return null;  } else {    Element keyD=doc.createElement(SAMLNames.KEYDESCRIPTOR);    keyD.setAttribute(SAMLNames.NS_NAME_SAML_DS,SAMLNames.NS_NAME_SAML_DIGTALSIG);    keyD.setAttribute(SAMLNames.USE,SAMLNames.SIGNING);    Element keyInfoEle=doc.createElement(SAMLNames.DS_KEYINFO);    if (keyValueEle != null && exportPrivateData) {      keyInfoEle.appendChild(keyValueEle);    }    if (x509DataEle != null) {      keyInfoEle.appendChild(x509DataEle);    }    keyD.appendChild(keyInfoEle);    return keyD;  }}  }
class C{  @Override public boolean supportsExtendedSQLGrammar(){  debugCodeCall("supportsExtendedSQLGrammar");  return false;}  }
class C{  public void onChanged(){}  }
class C{  public BasicHttpEntity(){  super();  this.length=-1;}  }
class C{  public static String checkNull(String string1,String string2,String string3){  if (string1 != null)   return string1; else   if (string2 != null)   return string2; else   if (string3 != null)   return string3; else   return "";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:28.147 -0500",hash_original_method="F98ABD2EA2392557384972BDB7FAD5AD",hash_generated_method="79CB2E4E46BC8B45741840D877F07864") public void fixStrictRouting(SIPRequest req){  RouteList routes=req.getRouteHeaders();  Route first=(Route)routes.getFirst();  SipUri firstUri=(SipUri)first.getAddress().getURI();  routes.removeFirst();  AddressImpl addr=new AddressImpl();  addr.setAddess(req.getRequestURI());  Route route=new Route(addr);  routes.add(route);  req.setRequestURI(firstUri);  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("post: fixStrictRouting" + req);  }}  }
class C{  static void alwaysScheduleAfter(Activity before,Activity after){  getInstance()._alwaysScheduleAfter(before,after);}  }
class C{  public void configureManagers(){  getRailCommManager();  InstanceManager.setReporterManager(getReporterManager());  InstanceManager.setSensorManager(getSensorManager());}  }
class C{  @Override public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.GlobalProgrammerManager.class)) {    return getProgrammerManager().isGlobalProgrammerAvailable();  }  if (type.equals(jmri.AddressedProgrammerManager.class)) {    return getProgrammerManager().isAddressedModePossible();  }  if (type.equals(jmri.ThrottleManager.class)) {    return true;  }  if (type.equals(jmri.PowerManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  if (type.equals(jmri.ConsistManager.class)) {    return true;  }  if (type.equals(jmri.CommandStation.class)) {    return true;  }  return false;}  }
class C{  protected void allocate(){}  }
class C{  public void CompareCountStarQueryResultsWithoutAndWithIndexes(Object[][] r,int len,boolean checkOrder,String queries[]){  Integer count1, count2;  Iterator<Integer> itert1, itert2;  SelectResults result1, result2;  boolean exactMatch=true;  for (int j=0; j < len; j++) {    result1=((SelectResults)r[j][0]);    result2=((SelectResults)r[j][1]);    assertEquals(queries[j],1,result1.size());    assertEquals(queries[j],1,result2.size());    checkSelectResultTypes((SelectResults)r[j][0],(SelectResults)r[j][1],queries[j]);    checkResultSizes((SelectResults)r[j][0],(SelectResults)r[j][1],queries[j]);    compareResults(result1,result2,queries[j],true);  }}  }
class C{  public hr addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  static Class<?> findClassOrNull(String className,ClassLoader classLoader){  try {    return classLoader.loadClass(className);  } catch (  ClassNotFoundException e) {    return null;  }}  }
class C{  public EventStatus(){  super(KEY);}  }
class C{  public Pair(Cur cur,Cud cud){  this.cur=cur;  this.cud=cud;}  }
class C{  public DeviationRenderer(boolean lines,boolean shapes){  super(lines,shapes);  super.setDrawSeriesLineAsPath(true);  this.alpha=0.5f;}  }
class C{  public GenericFeed retrieveEmailRoutingSettings() throws AppsForYourDomainException, IOException, ServiceException {  return getFeed(new URL(domainUrlBase + "emailrouting"),GenericFeed.class);}  }
class C{  boolean isPrivateInOtherClass(){  return (tree.sym.flags() & PRIVATE) != 0 && !types.isSameType(types.erasure(tree.sym.enclClass().asType()),types.erasure(owner.enclClass().asType()));}  }
class C{  private void initTimer(){  Collection<?> timers=timerService.getTimers();  if (timers.isEmpty()) {    timerService.createTimer(0,TIMER_DELAY_VALUE,null);  }}  }
class C{  public void testPrivateData(){  Context cx=Context.enter();  try {    global.associateValue(key,"bar");    Object result=cx.evaluateString(global,"g('foo');","test source",1,null);    assertEquals("foobar",result);  }  finally {    Context.exit();  }}  }
class C{  public void updateText(){  if (neuronGroup.isRecording()) {    interactionBox.setText(neuronGroup.getLabel() + " -- RECORDING");  } else {    interactionBox.setText(neuronGroup.getLabel());  }  interactionBox.updateText();}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  char c;  if (++bufpos == available)   AdjustBuffSize();  if ((buffer[bufpos]=c=ReadByte()) == '\\') {    UpdateLineColumn(c);    int backSlashCnt=1;    for (; ; ) {      if (++bufpos == available)       AdjustBuffSize();      try {        if ((buffer[bufpos]=c=ReadByte()) != '\\') {          UpdateLineColumn(c);          if ((c == 'u') && ((backSlashCnt & 1) == 1)) {            if (--bufpos < 0)             bufpos=bufsize - 1;            break;          }          backup(backSlashCnt);          return '\\';        }      } catch (      java.io.IOException e) {        if (backSlashCnt > 1)         backup(backSlashCnt - 1);        return '\\';      }      UpdateLineColumn(c);      backSlashCnt++;    }    try {      while ((c=ReadByte()) == 'u')       ++column;      buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));      column+=4;    } catch (    java.io.IOException e) {      throw new Error("Invalid escape character at line " + line + " column "+ column+ ".");    }    if (backSlashCnt == 1)     return c; else {      backup(backSlashCnt - 1);      return '\\';    }  } else {    UpdateLineColumn(c);    return c;  }}  }
class C{  public void finish(){  String jsonOutput=((SingleMessageTrackingMeasurer)measurer).getMeasurementsAsJSON();  System.out.println(jsonOutput);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  @Deprecated public String readLine() throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.readLine()");  assertOpen();  return HttpParser.readLine(inputStream);}  }
class C{  public Dimension maximumLayoutSize(Container target){  Dimension size;synchronized (this) {    checkContainer(target);    checkRequests();    size=new Dimension(xTotal.maximum,yTotal.maximum);  }  Insets insets=target.getInsets();  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);  return size;}  }
class C{  private static void buildTriLegScenario(String inputDirectory,int numberOfAgents){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Set<String> modes=new TreeSet<>();  modes.add(GfipMode.GFIP_A1.toString());  modes.add(GfipMode.GFIP_A2.toString());  modes.add(GfipMode.GFIP_B.toString());  modes.add(GfipMode.GFIP_C.toString());  modes.add(TransportMode.car);  NetworkFactory nf=sc.getNetwork().getFactory();  Node n1=nf.createNode(Id.create("1",Node.class),new Coord((double)0,(double)0));  sc.getNetwork().addNode(n1);  Node n2=nf.createNode(Id.create("2",Node.class),new Coord((double)10000,(double)0));  sc.getNetwork().addNode(n2);  Node n3=nf.createNode(Id.create("3",Node.class),new Coord((double)60000,(double)0));  sc.getNetwork().addNode(n3);  Node n4=nf.createNode(Id.create("4",Node.class),new Coord((double)70000,(double)0));  sc.getNetwork().addNode(n4);  Link l12=nf.createLink(Id.createLinkId("12"),n1,n2);  l12.setLength(1000);  l12.setCapacity(2500);  l12.setNumberOfLanes(1000);  l12.setFreespeed(120.0 / 3.6);  l12.setAllowedModes(modes);  Link l23=nf.createLink(Id.createLinkId("23"),n2,n3);  l23.setLength(5000);  l23.setCapacity(2500);  l23.setNumberOfLanes(2);  l23.setFreespeed(120.0 / 3.6);  l23.setAllowedModes(modes);  Link l34=nf.createLink(Id.createLinkId("34"),n3,n4);  l34.setLength(1000);  l34.setCapacity(2500);  l34.setNumberOfLanes(1000);  l34.setFreespeed(120.0 / 3.6);  l34.setAllowedModes(modes);  sc.getNetwork().addLink(l12);  sc.getNetwork().addLink(l23);  sc.getNetwork().addLink(l34);  new NetworkWriter(sc.getNetwork()).write(inputDirectory + (inputDirectory.endsWith("/") ? "" : "/") + "input_network.xml.gz");  VehiclesFactory vf=VehicleUtils.getFactory();  VehicleType A1=vf.createVehicleType(Id.create(GfipMode.GFIP_A1.toString(),VehicleType.class));  A1.setDescription("Motorcycle");  A1.setMaximumVelocity(114.0 / 3.6);  A1.setLength(0.5 * 7.5);  A1.setPcuEquivalents(0.5);  sc.getVehicles().addVehicleType(A1);  VehicleType A2=vf.createVehicleType(Id.create(GfipMode.GFIP_A2.toString(),VehicleType.class));  A2.setDescription("Light vehicle");  A2.setMaximumVelocity(103.6 / 3.6);  A2.setLength(1 * 7.5);  A2.setPcuEquivalents(1.0);  sc.getVehicles().addVehicleType(A2);  VehicleType B=vf.createVehicleType(Id.create(GfipMode.GFIP_B.toString(),VehicleType.class));  B.setDescription("Medium vehicle");  B.setMaximumVelocity(85.7 / 3.6);  B.setLength(2 * 7.5);  B.setPcuEquivalents(2.0);  sc.getVehicles().addVehicleType(B);  VehicleType C=vf.createVehicleType(Id.create(GfipMode.GFIP_C.toString(),VehicleType.class));  C.setDescription("Heavy vehicle");  C.setMaximumVelocity(77.8 / 3.6);  C.setLength(3 * 7.5);  C.setPcuEquivalents(3.0);  sc.getVehicles().addVehicleType(C);  PopulationFactory pf=sc.getPopulation().getFactory();  for (int i=0; i < numberOfAgents; i++) {    Person person=pf.createPerson(Id.createPersonId(i));    Plan plan=pf.createPlan();    double random=MatsimRandom.getRandom().nextDouble();    GfipMode mode=null;    if (random <= 0.25) {      mode=GfipMode.GFIP_A1;    } else     if (random <= 0.50) {      mode=GfipMode.GFIP_A2;    } else     if (random <= 0.75) {      mode=GfipMode.GFIP_B;    } else {      mode=GfipMode.GFIP_C;    }    Activity firstActivity=pf.createActivityFromCoord("first",n1.getCoord());    firstActivity.setEndTime(MatsimRandom.getLocalInstance().nextDouble() * Time.parseTime("20:00:00"));    plan.addActivity(firstActivity);    Leg leg=pf.createLeg(mode.toString());    plan.addLeg(leg);    Activity finalActivity=pf.createActivityFromCoord("final",n4.getCoord());    plan.addActivity(finalActivity);    person.addPlan(plan);    sc.getPopulation().addPerson(person);    Vehicle vehicle=null;switch (mode) {case GFIP_A1:      vehicle=vf.createVehicle(Id.create(person.getId().toString(),Vehicle.class),A1);    break;case GFIP_A2:  vehicle=vf.createVehicle(Id.create(person.getId().toString(),Vehicle.class),A2);break;case GFIP_B:vehicle=vf.createVehicle(Id.create(person.getId().toString(),Vehicle.class),B);break;case GFIP_C:vehicle=vf.createVehicle(Id.create(person.getId().toString(),Vehicle.class),C);break;default :break;}sc.getVehicles().addVehicle(vehicle);}new PopulationWriter(sc.getPopulation()).write(inputDirectory + (inputDirectory.endsWith("/") ? "" : "/") + "input_plans.xml.gz");new VehicleWriterV1(sc.getVehicles()).writeFile(inputDirectory + (inputDirectory.endsWith("/") ? "" : "/") + "input_vehicles.xml.gz");}  }
class C{  public void testDivideBigDecimalScaleMathContextFLOOR(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=15;  String b="748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.FLOOR;  MathContext mc=new MathContext(precision,rm);  String c="4.98978611802562512995E+70";  int resScale=-50;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  protected void addRoomFeatPref(HttpServletRequest request,PreferencesForm frm,ActionMessages errors){  List lst=frm.getRoomFeaturePrefs();  if (frm.checkPrefs(lst)) {    for (int i=0; i < Constants.PREF_ROWS_ADDED; i++) {      frm.addToRoomFeatPrefs(Preference.BLANK_PREF_VALUE,Preference.BLANK_PREF_VALUE);    }    request.setAttribute(HASH_ATTR,HASH_RM_FEAT_PREF);  } else {    errors.add("roomFeaturePrefs",new ActionMessage("errors.generic",MSG.errorInvalidRoomFeaturePreference()));    saveErrors(request,errors);  }}  }
class C{  void onBindAppWidget(Launcher launcher){  if (!mHasNotifiedInitialWidgetSizeChanged) {    AppWidgetResizeFrame.updateWidgetSizeRanges(hostView,launcher,spanX,spanY);    mHasNotifiedInitialWidgetSizeChanged=true;  }}  }
class C{  public String resumeService(){  Service selectedService=serviceDetailsModel.getSelectedService();  if (selectedService != null) {    try {      setService(getProvisioningService().resumeService(selectedService.getVO()));    } catch (    SaaSApplicationException ex) {      ExceptionHandler.execute(ex);      return OUTCOME_ERROR;    }  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_SERVICE_RESUMED);  serviceDetailsModel.setSelectedServiceKey(serviceDetailsModel.getSelectedService().getKey() + "");  return OUTCOME_SUCCESS;}  }
class C{  private static CNaviViewNode insertTextNode(final INaviView target,final INaviTextNode sourceNode){  return target.getContent().createTextNode(sourceNode.getComments());}  }
class C{  protected void addIfdData(IfdData data){  mIfdDatas[data.getId()]=data;}  }
class C{  private boolean executeCommand(BufferedReader reader) throws IOException, ServiceException, InterruptedException {  System.err.print("Command: ");  try {    String command=reader.readLine();    if (command == null) {      return false;    }    String[] args=parseCommand(command);    String name=args[0];    if (name.equals("create")) {      executeCreate(args);    } else     if (name.equals("trash")) {      executeTrash(args);    } else     if (name.equals("download")) {      executeDownload(args);    } else     if (name.equals("list")) {      executeList(args);    } else     if (name.equals("move")) {      executeMove(args);    } else     if (name.equals("perms")) {      executePerms(args);    } else     if (name.equals("remove")) {      executeRemove(args);    } else     if (name.equals("search")) {      executeSearch(args);    } else     if (name.equals("asearch")) {      executeAdvancedSearch(args);    } else     if (name.equals("upload")) {      executeUpload(args);    } else     if (name.equals("revisions")) {      executeRevisions(args);    } else     if (name.equals("help")) {      executeHelp(args);    } else     if (name.startsWith("q") || name.startsWith("exit")) {      return false;    } else {      out.println("Unknown command. Type 'help' for a list of commands.");    }  } catch (  DocumentListException e) {    e.printStackTrace();  }  return true;}  }
class C{  private static void displayHeaders(List<Report.Headers> headers){  for (  Report.Headers header : headers) {    System.out.printf("%25s",header.getName());  }  System.out.println();}  }
class C{  public final boolean levelCheck(int itr){  if (this.levelChecked >= itr) {    return this.levelCorrect;  }  this.levelChecked=itr;  this.maxLevels=new int[this.params.length];  this.weights=new int[this.params.length];  for (int i=0; i < this.params.length; i++) {    this.maxLevels[i]=MaxLevel;    this.weights[i]=0;    this.isLeibniz=true;    this.isLeibnizArg=new boolean[this.params.length];    this.isLeibnizArg[i]=true;  }  ;  this.levelCorrect=this.body.levelCheck(itr);  this.level=this.body.getLevel();  SetOfLevelConstraints lcSet=this.body.getLevelConstraints();  for (int i=0; i < this.params.length; i++) {    Object plevel=lcSet.get(params[i]);    if (plevel != null) {      this.maxLevels[i]=((Integer)plevel).intValue();    }  }  for (int i=0; i < this.params.length; i++) {    if (this.body.getLevelParams().contains(this.params[i])) {      this.weights[i]=this.weights[i];    }  }  this.minMaxLevel=new int[this.params.length][];  SetOfArgLevelConstraints alcSet=this.body.getArgLevelConstraints();  for (int i=0; i < this.params.length; i++) {    int alen=this.params[i].getArity();    this.minMaxLevel[i]=new int[alen];    for (int j=0; j < alen; j++) {      Object alevel=alcSet.get(new ParamAndPosition(this.params[i],j));      if (alevel == null) {        this.minMaxLevel[i][j]=MinLevel;      } else {        this.minMaxLevel[i][j]=((Integer)alevel).intValue();      }    }  }  this.opLevelCond=new boolean[this.params.length][this.params.length][];  HashSet alpSet=this.body.getArgLevelParams();  for (int i=0; i < this.params.length; i++) {    for (int j=0; j < this.params.length; j++) {      this.opLevelCond[i][j]=new boolean[this.params[i].getArity()];      for (int k=0; k < this.params[i].getArity(); k++) {        ArgLevelParam alp=new ArgLevelParam(this.params[i],k,this.params[j]);        this.opLevelCond[i][j][k]=alpSet.contains(alp);      }    }  }  this.levelParams.addAll(this.body.getLevelParams());  this.allParams.addAll(this.body.getAllParams());  this.nonLeibnizParams.addAll(this.body.getNonLeibnizParams());  for (int i=0; i < this.params.length; i++) {    this.levelParams.remove(this.params[i]);    this.allParams.remove(this.params[i]);    if (this.nonLeibnizParams.contains(this.params[i])) {      this.nonLeibnizParams.remove(this.params[i]);      this.isLeibnizArg[i]=false;      this.isLeibniz=false;    }    ;  }  this.levelConstraints=(SetOfLevelConstraints)lcSet.clone();  for (int i=0; i < this.params.length; i++) {    this.levelConstraints.remove(this.params[i]);  }  this.argLevelConstraints=(SetOfArgLevelConstraints)alcSet.clone();  for (int i=0; i < this.params.length; i++) {    int alen=this.params[i].getArity();    for (int j=0; j < alen; j++) {      this.argLevelConstraints.remove(new ParamAndPosition(this.params[i],j));    }  }  Iterator iter=alpSet.iterator();  while (iter.hasNext()) {    ArgLevelParam alp=(ArgLevelParam)iter.next();    if (!alp.op.occur(this.params) || !alp.param.occur(this.params)) {      this.argLevelParams.add(alp);    }  }  return levelCorrect;}  }
class C{  public PendingOrderEventHandlerImpl(final PaymentProcessorFactory paymentProcessorFactory,final WarehouseService warehouseService,final SkuWarehouseService skuWarehouseService,final ProductService productService){  this.paymentProcessorFactory=paymentProcessorFactory;  this.warehouseService=warehouseService;  this.skuWarehouseService=skuWarehouseService;  this.productService=productService;}  }
class C{  public static void main(String[] args){  final boolean success=Talkback.commandLineTalkback(args);  System.exit(success ? 0 : 1);}  }
class C{  protected CompositeName(Enumeration<String> comps){  impl=new NameImpl(null,comps);}  }
class C{  @Override public boolean equals(Object o){  if (o == this) {    return true;  }  if (o == null || !(o instanceof RyaStatementWritable)) {    return false;  }  RyaStatement rsThis=this.getRyaStatement();  RyaStatement rsOther=((RyaStatementWritable)o).getRyaStatement();  if (rsThis == null) {    return rsOther == null;  } else {    return rsThis.equals(rsOther);  }}  }
class C{  public boolean isBullet(){  return bullet;}  }
class C{  public void writeData2File(byte[] data) throws FileAccessException {  try {    if (mOut == null) {      File destination=new File(mUri.getPath());      FileOutputStream fos=new FileOutputStream(destination);      mOut=new BufferedOutputStream(fos,8 * 1024);    }    mOut.write(data);  } catch (  IOException e) {    throw new FileAccessException("Failed to write data chunk to file!",e);  }}  }
class C{  synchronized String createSignatureXml(byte[] signatureValue) throws Exception {  return builder.createSignatureXml(signatureValue);}  }
class C{  public float loadFloat(Offset offset){  return this.plus(offset).loadFloat();}  }
class C{  public boolean isSameTeam(Player playerOne,Player playerTwo){  return isHuman(playerOne) && isHuman(playerTwo) || isZombie(playerOne) && isZombie(playerTwo);}  }
class C{  public void testDoublesCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.doubles(size).parallel().forEach(null);    assertEquals(size,counter.sum());    size+=524959;  }}  }
class C{  public void reject(){  exchange.sendReject();}  }
class C{  private void createMiniBarControl(IMiniBar miniBar,CTabFolder tabFolder,Composite parent){  ((ToolBarManager)miniBar.getToolBarManager()).createControl(parent);}  }
class C{  public void or(BitSet bs){  if (data.length != bs.data.length)   throw new IllegalArgumentException("incompatible bitsets");  for (int k=0; k < data.length; ++k) {    data[k]|=bs.data[k];  }}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> deactivateSnapshot(URI consistencyGroupId,URI snapshotId){  final String url=getIdUrl() + "/protection/snapshots/{fcid}/deactivate";  return postTasks(url,consistencyGroupId,snapshotId);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Header)) {    return false;  }  return ((Header)obj).tag == this.tag;}  }
class C{  public static <T>void validateAccssor(final Class<T> clazz,final String... skipThese) throws IntrospectionException {  final PropertyDescriptor[] props=Introspector.getBeanInfo(clazz).getPropertyDescriptors();  for (  PropertyDescriptor prop : props) {    for (    String skipThis : skipThese) {      if (skipThis.equals(prop.getName())) {        continue;      }    }    findBooleanIsMethods(clazz,prop);    final Method getter=prop.getReadMethod();    final Method setter=prop.getWriteMethod();    if (getter != null && setter != null) {      final Class<?> returnType=getter.getReturnType();      final Class<?>[] params=setter.getParameterTypes();      if (params.length == 1 && params[0] == returnType) {        try {          Object value=buildValue(returnType);          T bean=clazz.newInstance();          setter.invoke(bean,value);          Assert.assertEquals(String.format("Failed while testing property %s",prop.getName()),value,getter.invoke(bean));        } catch (        Exception ex) {          ex.printStackTrace();          System.err.println(String.format("An exception was thrown while testing the property %s: %s",prop.getName(),ex.toString()));        }      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected HttpURLConnection createUndeployConnection(WAR war) throws IOException {  String undeployURL=this.deployerUrl + "/undeploy?path=/" + war.getContext();  URL url=new URL(undeployURL);  HttpURLConnection connection=(HttpURLConnection)url.openConnection();  connection.setAllowUserInteraction(false);  connection.setDoInput(true);  connection.setDoOutput(true);  connection.setUseCaches(false);  connection.setDoOutput(false);  connection.setRequestMethod("GET");  if (this.username != null) {    String authorization=toAuthorization(this.username,this.password);    connection.setRequestProperty("Authorization",authorization);  }  connection.connect();  return connection;}  }
class C{  public Hand(String label){  super(label);}  }
class C{  public void addPosition(final int position){  if (this.positions == null && position > 0)   this.positions=new LinkedBlockingQueue<Integer>();  if (position > 0)   this.positions.add(position);}  }
class C{  public String generateValidTld(int length){  StringBuffer buffer=new StringBuffer();  for (int i=1; i <= length; i++) {    char c=(char)('a' + Math.random() * 26);    buffer.append(c);  }  String tempValidUrl=preUrl + buffer.toString();  return tempValidUrl;}  }
class C{  public RippleBackground(RippleDrawable owner,Rect bounds){  mOwner=owner;  mBounds=bounds;}  }
class C{  public boolean intersects(ShiftingBitSet set){  for (int i=Math.min(wordsInUse,set.wordsInUse) - 1; i >= 0; i--)   if ((words[i] & set.words[i]) != 0)   return true;  return false;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static LRIcon f(final String name){  return new LRIcon(f_(name));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__BODY:    return body != null;case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__FLAGS:  return flags != null;}return super.eIsSet(featureID);}  }
class C{  public void testNamedNodeMapInvalidType() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element docElem;  Element newElem;  doc=(Document)load("hc_staff",builder);  docElem=doc.getDocumentElement();  attributes=docElem.getAttributes();  newElem=doc.createElement("html");{    boolean success=false;    try {      attributes.setNamedItem(newElem);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public boolean forwardIfCurrent(short before,String val,short after){  int start=pos;  if (before == AT_LEAST_ONE_SPACE) {    if (!removeSpace())     return false;  } else   removeSpace();  if (!forwardIfCurrent(val)) {    setPos(start);    return false;  }  if (after == AT_LEAST_ONE_SPACE) {    if (!removeSpace()) {      setPos(start);      return false;    }  } else   removeSpace();  return true;}  }
class C{  public PolynomialGF2mSmallM multiply(PolynomialGF2mSmallM factor){  int[] resultCoeff=multiply(coefficients,factor.coefficients);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public UndoableEdit remove(int where,int nitems) throws BadLocationException {  if (where + nitems >= count) {    throw new BadLocationException("Invalid range",count);  }  String removedString=getString(where,nitems);  UndoableEdit edit=new RemoveUndo(where,removedString);  replace(where,nitems,empty,0,0);  if (marks != null) {    updateMarksForRemove(where,nitems);  }  return edit;}  }
class C{  @Deprecated public ContentItem userid(String userId){  this.userId=userId;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  uiMgr.clearLock(true,false);  return null;}  }
class C{  public MBrowseField(MBrowse browse,MViewColumn column){  super(column.getCtx(),0,column.get_TrxName());  setAD_Browse_ID(browse.getAD_Browse_ID());  setAD_Element_ID(column.getAD_Element_ID());  setName(column.getName());  setDescription(column.getDescription());  setHelp(column.getHelp());  setAD_View_Column_ID(column.getAD_View_Column_ID());  setIsActive(true);  setIsIdentifier(column.isIdentifier());  setIsRange(false);  setIsQueryCriteria(false);  setAD_Reference_ID(column.getAD_Reference_ID());  setAD_Reference_Value_ID(column.getAD_Column().getAD_Reference_Value_ID());  setIsKey(false);  setIsDisplayed(true);  m_view_column=column;}  }
class C{  public TokenDelegate lastDelegate(){  return delegationChain.isEmpty() ? null : delegationChain.get(delegationChain.size() - 1);}  }
class C{  public void unsubscribe(String clientHandle,final String topic,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.unsubscribe(topic,invocationContext,activityToken);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.972 -0500",hash_original_method="961665135E04FC2BFD71FE9A7899CD8F",hash_generated_method="FA197A67FA9AFD61E253F9571020120A") protected boolean scrollPageUp(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int top=widget.getScrollY() - getInnerHeight(widget);  int topLine=layout.getLineForVertical(top);  if (topLine >= 0) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(topLine));    return true;  }  return false;}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public Workflow.Method verifyDatastoreMethod(URI exportGroup,URI vcenter,URI vcenterDatacenter){  return new Workflow.Method("verifyDatastore",exportGroup,vcenter,vcenterDatacenter);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static boolean hasEdge(final List<ReilBlock> nodes,final ReilBlock node,final ReilInstruction instruction){  for (  final ReilBlock block : nodes) {    if (shareOriginalInstruction(node,block) && hasEdge(block,instruction)) {      return true;    }  }  return false;}  }
class C{  public void add(String source,Population population){  if (populations.containsKey(source)) {    throw new IllegalArgumentException("source already exists");  }  populations.put(source,population);  for (  Solution solution : population) {    solution.setAttribute(SOURCE_ATTRIBUTE,source);    for (    Solution s : combinedPopulation) {      if (MathArrays.distance(s.getObjectives(),solution.getObjectives()) < Settings.EPS) {        System.err.println("duplicate solution found");      }    }    combinedPopulation.add(solution);  }}  }
class C{  public RemoteAttributeGroupServiceImpl(final DtoAttributeGroupService dtoAttributeGroupService){  super(dtoAttributeGroupService);}  }
class C{  public static String bitcoinValueToFriendlyString(BigInteger value){  boolean negative=value.compareTo(BigInteger.ZERO) < 0;  if (negative)   value=value.negate();  BigDecimal bd=new BigDecimal(value,8);  String formatted=bd.toPlainString();  int decimalPoint=formatted.indexOf(".");  int toDelete=0;  for (int i=formatted.length() - 1; i > decimalPoint + 2; i--) {    if (formatted.charAt(i) == '0')     toDelete++; else     break;  }  return (negative ? "-" : "") + formatted.substring(0,formatted.length() - toDelete);}  }
class C{  public void clearModified(){  _isModified=false;  _lastCheckTime=CurrentTime.currentTime();}  }
class C{  public static void i(String tag,String s,Throwable e){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,s,e);}  }
class C{  private void createContainer(){  this.buttonContainer=new Composite(this,SWT.NONE);  final GridData buttonContainerGridData=new GridData(GridData.FILL,GridData.FILL,true,false,2,1);  buttonContainerGridData.heightHint=63;  this.buttonContainer.setLayoutData(buttonContainerGridData);  this.buttonContainer.setBackground(getDisplay().getSystemColor(SWT.COLOR_WHITE));  final GridLayout gridLayout=new GridLayout(this.tabs.size(),false);  gridLayout.marginWidth=gridLayout.marginHeight=0;  gridLayout.horizontalSpacing=gridLayout.verticalSpacing=0;  gridLayout.marginBottom=2;  this.buttonContainer.setLayout(gridLayout);}  }
class C{  public void await(){  try {    CountDownLatch latch=this.latch;    latch.await();  } catch (  InterruptedException e) {    return;  }}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public boolean existsSprite(final String ref){  final URL url=DataLoader.getResource(ref);  return url != null;}  }
class C{  public BMW256(){  super();}  }
class C{  public void addIntersection(LineIntersector li,int segmentIndex,int geomIndex,int intIndex){  Coordinate intPt=new Coordinate(li.getIntersection(intIndex));  addIntersection(intPt,segmentIndex);}  }
class C{  public static void writeWorkplaceData2CSV(final List<SpatialReferenceObject> jobSampleList,Config config){  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)config.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);  try {    log.info("Initializing AnalysisWorkplaceCSVWriter ...");    BufferedWriter bwWorkplaces=IOUtils.getBufferedWriter(module.getMATSim4OpusOutput() + FILE_NAME);    log.info("Writing data into " + module.getMATSim4OpusOutput() + FILE_NAME+ " ...");    bwWorkplaces.write(InternalConstants.JOB_ID + "," + InternalConstants.PARCEL_ID+ ","+ InternalConstants.ZONE_ID+ ","+ InternalConstants.X_COORDINATE+ ","+ InternalConstants.Y_COORDINATE);    bwWorkplaces.newLine();    Iterator<SpatialReferenceObject> jobIterator=jobSampleList.iterator();    while (jobIterator.hasNext()) {      SpatialReferenceObject job=jobIterator.next();      bwWorkplaces.write(job.getObjectID() + "," + job.getParcelID()+ ","+ job.getZoneID()+ ","+ job.getCoord().getX()+ ","+ job.getCoord().getY());      bwWorkplaces.newLine();    }    bwWorkplaces.flush();    bwWorkplaces.close();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static double L_LogLoss(int Y[][],double Rpred[][],double C){  double loss=0.0;  for (int i=0; i < Y.length; i++) {    for (int j=0; j < Y[i].length; j++) {      loss+=L_LogLoss(Y[i][j],Rpred[i][j],C);    }  }  return loss;}  }
class C{  public static EnchantmentType matchEnchantment(String str){  Integer id=DioriteMathUtils.asInt(str);  if (id != null) {    return getByNumericID(id);  }  EnchantmentType type=byStringID.get(str);  if (type != null) {    return type;  }  return getByEnumName(str);}  }
class C{  private void publish(){  String topic=((EditText)connectionDetails.findViewById(R.id.lastWillTopic)).getText().toString();  ((EditText)connectionDetails.findViewById(R.id.lastWillTopic)).getText().clear();  String message=((EditText)connectionDetails.findViewById(R.id.lastWill)).getText().toString();  ((EditText)connectionDetails.findViewById(R.id.lastWill)).getText().clear();  RadioGroup radio=(RadioGroup)connectionDetails.findViewById(R.id.qosRadio);  int checked=radio.getCheckedRadioButtonId();  int qos=ActivityConstants.defaultQos;switch (checked) {case R.id.qos0:    qos=0;  break;case R.id.qos1:qos=1;break;case R.id.qos2:qos=2;break;}boolean retained=((CheckBox)connectionDetails.findViewById(R.id.retained)).isChecked();String[] args=new String[2];args[0]=message;args[1]=topic + ";qos:" + qos+ ";retained:"+ retained;try {Connections.getInstance(context).getConnection(clientHandle).getClient().publish(topic,message.getBytes(),qos,retained,null,new ActionListener(context,Action.PUBLISH,clientHandle,args));} catch (MqttSecurityException e) {Log.e(this.getClass().getCanonicalName(),"Failed to publish a messged from the client with the handle " + clientHandle,e);}catch (MqttException e) {Log.e(this.getClass().getCanonicalName(),"Failed to publish a messged from the client with the handle " + clientHandle,e);}}  }
class C{  public void unsetTriggerName(){  this.triggerName=null;}  }
class C{  public void prepare(){  root=new Element("rpsfile");  doc=newDocument(root,dtdLocation + "rpsfile.dtd");  java.util.Map<String,String> m=new java.util.HashMap<String,String>();  m.put("type","text/xsl");  m.put("href",xsltLocation + "rpsfile.xsl");  ProcessingInstruction p=new ProcessingInstruction("xml-stylesheet",m);  doc.addContent(0,p);}  }
class C{  public static ArrayList<BaseQuestion> returnMovieList(String jsonFile){  ArrayList<BaseQuestion> questions=new ArrayList<BaseQuestion>();  RestAPI api=RestAPI.getAPI();  ArrayList<String> genre=api.getMovieOptions(GENRE,jsonFile);  ArrayList<String> time=api.getMovieOptions(TIME,jsonFile);  ArrayList<String> rating=api.getMovieOptions(RATING,jsonFile);  ArrayList<String> expected=api.getMovieOptions(EXPECTED,jsonFile);  Iterator<String> genreList=genre.iterator();  while (genreList.hasNext()) {    String genreVal=genreList.next();    Iterator<String> timeList=time.iterator();    while (timeList.hasNext()) {      String timeVal=timeList.next();      Iterator<String> ratingList=rating.iterator();      while (ratingList.hasNext()) {        String ratingVal=ratingList.next();        BaseQuestion question=new BaseQuestion.Builder("").genre(genreVal).timeFrame(timeVal).rating(ratingVal).expectedResponse(expected).build();        question.makeQuestion();        questions.add(question);      }    }  }  return questions;}  }
class C{  public void testIncludeNonEmpty() throws Exception {  inclProps=new String[]{"prop1","prop2"};  startGridAndCheck();}  }
class C{  public static <V,E,G extends Hypergraph<V,E>>Collection<G> createAllInducedSubgraphs(Collection<? extends Collection<V>> vertex_collections,G graph){  Collection<G> subgraphs=new ArrayList<G>();  for (  Collection<V> vertex_set : vertex_collections)   subgraphs.add(createInducedSubgraph(vertex_set,graph));  return subgraphs;}  }
class C{  public T caseLocalArgumentsVariable(LocalArgumentsVariable object){  return null;}  }
class C{  @Override public void transform(AffineTransform tx){  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {    if (get(TRANSFORM) == null) {      TRANSFORM.setClone(this,tx);    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }  invalidate();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case STRING_THING:    return isSetString_thing();case BYTE_THING:  return isSetByte_thing();case I32_THING:return isSetI32_thing();case I64_THING:return isSetI64_thing();}throw new IllegalStateException();}  }
class C{  public void addCertificate(X509CertificateHolder certificate) throws CMSException {  certs.add(certificate.toASN1Structure());}  }
class C{  public static String encryptName(final String Name,final int seed){  return scramble(Name,seed,true);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numDownslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numDownslopeNeighbours=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 < z) {              numDownslopeNeighbours++;            }          }          output.setValue(row,col,numDownslopeNeighbours);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void alloc(Address region,int size){  ObjectReference object=VM.objectModel.getObjectFromStartAddress(region);  objects.put(object,new Entry(object,region,size));}  }
class C{  public void write(String fileName) throws IOException {  FileOutputStream outputFile;  byte profileData[];  profileData=getData();  outputFile=new FileOutputStream(fileName);  outputFile.write(profileData);  outputFile.close();}  }
class C{  public final E elementAt(int index){  return get(index);}  }
class C{  public void add(Number mean,Number standardDeviation,Comparable rowKey,Comparable columnKey){  MeanAndStandardDeviation item=new MeanAndStandardDeviation(mean,standardDeviation);  this.data.addObject(item,rowKey,columnKey);  double m=Double.NaN;  double sd=Double.NaN;  if (mean != null) {    m=mean.doubleValue();  }  if (standardDeviation != null) {    sd=standardDeviation.doubleValue();  }  int r=this.data.getColumnIndex(columnKey);  int c=this.data.getRowIndex(rowKey);  if ((r == this.maximumRangeValueRow && c == this.maximumRangeValueColumn) || (r == this.maximumRangeValueIncStdDevRow && c == this.maximumRangeValueIncStdDevColumn) || (r == this.minimumRangeValueRow && c == this.minimumRangeValueColumn)|| (r == this.minimumRangeValueIncStdDevRow && c == this.minimumRangeValueIncStdDevColumn)) {    updateBounds();  } else {    if (!Double.isNaN(m)) {      if (Double.isNaN(this.maximumRangeValue) || m > this.maximumRangeValue) {        this.maximumRangeValue=m;        this.maximumRangeValueRow=r;        this.maximumRangeValueColumn=c;      }    }    if (!Double.isNaN(m + sd)) {      if (Double.isNaN(this.maximumRangeValueIncStdDev) || (m + sd) > this.maximumRangeValueIncStdDev) {        this.maximumRangeValueIncStdDev=m + sd;        this.maximumRangeValueIncStdDevRow=r;        this.maximumRangeValueIncStdDevColumn=c;      }    }    if (!Double.isNaN(m)) {      if (Double.isNaN(this.minimumRangeValue) || m < this.minimumRangeValue) {        this.minimumRangeValue=m;        this.minimumRangeValueRow=r;        this.minimumRangeValueColumn=c;      }    }    if (!Double.isNaN(m - sd)) {      if (Double.isNaN(this.minimumRangeValueIncStdDev) || (m - sd) < this.minimumRangeValueIncStdDev) {        this.minimumRangeValueIncStdDev=m - sd;        this.minimumRangeValueIncStdDevRow=r;        this.minimumRangeValueIncStdDevColumn=c;      }    }  }  fireDatasetChanged();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.900 -0500",hash_original_method="A9B16E70D2A4A056B33DA4268AACFBA9",hash_generated_method="F50F2C459FB5069F52492E2F1C167523") public int indexOf(int c,int start){  addTaint(c);  addTaint(start);  return getTaintInt();}  }
class C{  public WrappedByteBuffer reset(){  _buf=(java.nio.ByteBuffer)_buf.reset();  return this;}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);changed=true;return local;}  }
class C{  public UserChannelMap(){  channelToUserMap=HashMultimap.create();  userToChannelMap=HashMultimap.create();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  double backgroundValue=Double.parseDouble(args[1]);  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    double[] data;    for (int a=0; a < numFiles; a++) {      WhiteboxRaster inputFile=new WhiteboxRaster(imageFiles[a],"rw");      int rows=inputFile.getNumberRows();      int cols=inputFile.getNumberColumns();      double noData=inputFile.getNoDataValue();      for (row=0; row < rows; row++) {        data=inputFile.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] == backgroundValue) {            inputFile.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Processing image " + (a + 1) + " of "+ numFiles+ ":",progress);      }      inputFile.close();    }    showFeedback("Operation complete");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static List<Node> searchPath(final Entity entity,final int ex,final int ey){  return searchPath(entity,entity.getX(),entity.getY(),entity.getArea(ex,ey),defaultMaximumDistance(entity,ex,ey));}  }
class C{  @Override public void addChangeListener(DatasetChangeListener listener){}  }
class C{  public static void run(){  ClassGetNameToClassString transformer=new ClassGetNameToClassString();  for (  SootClass clz : Scene.v().getClasses()) {    for (    SootMethod meth : clz.getMethods()) {      if (meth.isConcrete())       try {        transformer.transform(meth.retrieveActiveBody());      } catch (      Exception ex) {        logger.info("Exception retrieving method body {}",ex);        continue;      }    }  }}  }
class C{  @Override public void close() throws Exception {  this.isOpen=false;  this.searchQuery=null;  this.sourceTuple=null;}  }
class C{  public Annotation createAnnotation(){  AnnotationImpl annotation=new AnnotationImpl();  return annotation;}  }
class C{  public void sendConsistCommand(DccLocoAddress loco,boolean dirNorm,WiFiConsist consist){  int conAddr=0;  if (consist != null) {    conAddr=getConsistAddress().getNumber();  }  byte packet[]=jmri.NmraPacket.consistControl(loco.getNumber(),loco.isLongAddress(),conAddr,dirNorm);  if (packet != null) {    if (log.isDebugEnabled()) {      log.debug(java.util.Arrays.toString(packet));    }    jmri.InstanceManager.getDefault(jmri.CommandStation.class).sendPacket(packet,1);  }}  }
class C{  public static String classSimpleName(String className){  int separator=className.lastIndexOf('.');  if (separator == -1) {    return className;  } else {    return className.substring(separator + 1);  }}  }
class C{  public void flush(){  writeDataBlock();}  }
class C{  public int rgbFor(int pixel){  return pixel;}  }
class C{  public OracleDocumentFragmentImpl findFragment(String key,long offset,int length) throws OracleException {  OracleDocumentFragmentImpl result=null;  PreparedStatement stmt=null;  ResultSet rows=null;  byte[] payload=null;  LobInputStream payloadStream=null;  boolean streamContent=false;  String sqltext=buildQuery();  key=canonicalKey(key);  if (admin().isHeterogeneous())   streamContent=true;  try {    metrics.startTiming();    stmt=conn.prepareStatement(sqltext);    bindKeyColumn(stmt,1,key);    rows=stmt.executeQuery();    if (rows.next()) {      int num=0;      String keyval=rows.getString(++num);      String ctype=null;      String mtime=null;      String ctime=null;      String version=null;      long datalen=-1L;      if (options.doctypeColumnName != null) {        ctype=rows.getString(++num);        if (ctype == null)         streamContent=false; else         if (ctype.equalsIgnoreCase(OracleDocumentImpl.APPLICATION_JSON))         streamContent=false;      }      if (streamContent) {        if (options.contentDataType != CollectionDescriptor.BLOB_CONTENT) {          throw SODAUtils.makeException(SODAMessage.EX_UNSUPPORTED_MODE,options.uriName,options.getContentDataType());        }        Blob loc=rows.getBlob(++num);        if (loc != null) {          datalen=loc.length();          if (datalen > 0L) {            if ((length < 0) || (((long)length + offset) > datalen))             length=(int)(datalen - offset);            if ((offset > 0L) || (((long)length + offset) < datalen)) {              if ((length <= MAX_RANGE_TRANSFER) && (datalen > MIN_RANGE_TRANSFER) && ((datalen >> 1) > (long)length)) {                payload=loc.getBytes(offset + 1L,length);                streamContent=false;              }            }            if (streamContent) {              InputStream inp=loc.getBinaryStream();              if (inp != null) {                payloadStream=new LobInputStream(loc,inp,(int)datalen);                payloadStream.setMetrics(metrics);              }            }          }          if ((payloadStream == null) && (payload == null))           payloadStream=new LobInputStream();        }      } else {        payload=readPayloadColumn(rows,++num);      }      if (options.timestampColumnName != null)       mtime=rows.getString(++num);      if (options.creationColumnName != null)       ctime=rows.getString(++num);      if (options.versionColumnName != null)       version=rows.getString(++num);      if (payloadStream != null) {        result=new OracleDocumentFragmentImpl(keyval,version,mtime,payloadStream,ctype);      } else {        result=new OracleDocumentFragmentImpl(keyval,version,mtime,payload);        setContentType(ctype,result);        if (datalen > 0L)         result.setFragmentInfo(offset,datalen);      }      if (ctime != null)       result.setCreatedOn(ctime);    }    metrics.recordReads(1,1);  } catch (  SQLException e) {    if (OracleLog.isLoggingEnabled())     log.severe(e.toString());    try {      if (payloadStream != null)       payloadStream.close();    } catch (    IOException ie) {      if (OracleLog.isLoggingEnabled())       log.severe(ie.toString());    }    throw (SODAUtils.makeExceptionWithSQLText(e,sqltext));  } finally {    for (    String message : SODAUtils.closeCursor(stmt,rows)) {      if (OracleLog.isLoggingEnabled())       log.severe(message);    }  }  return (result);}  }
class C{  public static Pair[] createSafeTransitionParticipants(@NonNull Activity activity,boolean includeStatusBar,@Nullable Pair... otherParticipants){  View decor=activity.getWindow().getDecorView();  View statusBar=null;  if (includeStatusBar) {    statusBar=decor.findViewById(android.R.id.statusBarBackground);  }  View navBar=decor.findViewById(android.R.id.navigationBarBackground);  List<Pair> participants=new ArrayList<>(3);  addNonNullViewToTransitionParticipants(statusBar,participants);  addNonNullViewToTransitionParticipants(navBar,participants);  if (otherParticipants != null && !(otherParticipants.length == 1 && otherParticipants[0] == null)) {    participants.addAll(Arrays.asList(otherParticipants));  }  return participants.toArray(new Pair[participants.size()]);}  }
class C{  public boolean checkDuplicate(T obj){  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.344 -0500",hash_original_method="FE2EE888E133A219C2FC6A0924C277B1",hash_generated_method="C2CC0D8C5F45F369D2FCB8EF49695423") private static boolean checkDuplicatePortOmadmWappush(byte[] origPdu,int index){  index+=4;  byte[] omaPdu=new byte[origPdu.length - index];  System.arraycopy(origPdu,index,omaPdu,0,omaPdu.length);  WspTypeDecoder pduDecoder=new WspTypeDecoder(omaPdu);  int wspIndex=2;  if (pduDecoder.decodeUintvarInteger(wspIndex) == false) {    return false;  }  wspIndex+=pduDecoder.getDecodedDataLength();  if (pduDecoder.decodeContentType(wspIndex) == false) {    return false;  }  String mimeType=pduDecoder.getValueString();  if (mimeType != null && mimeType.equals(WspTypeDecoder.CONTENT_TYPE_B_PUSH_SYNCML_NOTI)) {    return true;  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  panel=new CoordinateTransformDialog(myHost);  if (myHost instanceof JFrame) {    JDialog dialog=new JDialog((JFrame)myHost,"Coordinate System Transformation",false);    Container contentPane=dialog.getContentPane();    contentPane.add(panel,BorderLayout.CENTER);    dialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    dialog.pack();    dialog.setLocationRelativeTo(null);    dialog.setVisible(true);  } else {    JFrame frame=new JFrame("Coordinate System Transformation");    Container contentPane=frame.getContentPane();    contentPane.add(panel,BorderLayout.CENTER);    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    frame.pack();    frame.setLocationRelativeTo(null);    frame.setVisible(true);  }}  }
class C{  public static void finishedDrawing(){  sDrawPrepared=false;  GLES20.glDisableVertexAttribArray(sPositionHandle);  GLES20.glUseProgram(0);}  }
class C{  private int handleS(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index - 1,3,"ISL","YSL")) {    index++;  } else   if (index == 0 && contains(value,index,5,"SUGAR")) {    result.append('X','S');    index++;  } else   if (contains(value,index,2,"SH")) {    if (contains(value,index + 1,4,"HEIM","HOEK","HOLM","HOLZ")) {      result.append('S');    } else {      result.append('X');    }    index+=2;  } else   if (contains(value,index,3,"SIO","SIA") || contains(value,index,4,"SIAN")) {    if (slavoGermanic) {      result.append('S');    } else {      result.append('S','X');    }    index+=3;  } else   if ((index == 0 && contains(value,index + 1,1,"M","N","L","W")) || contains(value,index + 1,1,"Z")) {    result.append('S','X');    index=contains(value,index + 1,1,"Z") ? index + 2 : index + 1;  } else   if (contains(value,index,2,"SC")) {    index=handleSC(value,result,index);  } else {    if (index == value.length() - 1 && contains(value,index - 2,2,"AI","OI")) {      result.appendAlternate('S');    } else {      result.append('S');    }    index=contains(value,index + 1,1,"S","Z") ? index + 2 : index + 1;  }  return index;}  }
class C{  public synchronized static void track_method(Object o,String methodName,Object... args) throws Exception {  Class<? extends Object> c=o.getClass();  Method[] methods=c.getDeclaredMethods();  Method targetMethod=null;  for (  Method m : methods) {    if (m.getName().equals(methodName)) {      targetMethod=m;      break;    }  }  if (targetMethod == null) {    String msg=String.format("Couldn't find method %d in class %s",methodName,c.getName());    throw new IllegalArgumentException(msg);  }  LogInfo.track(methodName);  targetMethod.invoke(o,args);  LogInfo.end_track();}  }
class C{  public static boolean parameterListContainsParameterName(List<IParameter> parameterList,String parameterName){  boolean result=false;  for (  IParameter p : parameterList) {    if (parameterName.equals(p.getName())) {      result=true;      break;    }  }  return result;}  }
class C{  private DeviceStatusUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  @Override public boolean isModified(){  return burpEditor.isTextModified();}  }
class C{  public static boolean isStringOrSimilarType(Type type){  if (type instanceof RefType) {    RefType refType=(RefType)type;    return refType.equals(RefType.v("java.lang.String")) || refType.equals(RefType.v("java.lang.CharSequence")) || refType.equals(RefType.v("java.lang.StringBuffer"))|| refType.equals(RefType.v("java.lang.StringBuilder"));  }  return false;}  }
class C{  @Override public double[] projectDataToRenderSpace(double[] data){  return projectScaledToRender(projectDataToScaledSpace(data));}  }
class C{  public GPUImageFilterGroup(){  this(null);}  }
class C{  public static OFPacketIn DhcpDiscoveryRequestOFPacketIn(MACAddress hostMac){  byte[] serializedPacket=DhcpDiscoveryRequestEthernet(hostMac).serialize();  return (((OFPacketIn)OFMessageFactory.getMessage(OFType.PACKET_IN)).setBufferId(OFPacketOut.BUFFER_ID_NONE).setInPort((short)1).setPacketData(serializedPacket).setReason(OFPacketInReason.NO_MATCH).setTotalLength((short)serializedPacket.length));}  }
class C{  private void paintBackgroundTogetherDecrease(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createScrollButtonTogetherDecrease(0,0,width,height);  dropShadow.fill(g,s);  fillScrollBarButtonInteriorColors(g,s,isIncrease,buttonsTogether);}  }
class C{  public Orientation flipPlacement(boolean flip){  isFlip=flip;  return this;}  }
class C{  public HttpBasicAuthLogicHandler(final ProxyIoSession proxyIoSession) throws ProxyAuthException {  super(proxyIoSession);  ((HttpProxyRequest)request).checkRequiredProperties(HttpProxyConstants.USER_PROPERTY,HttpProxyConstants.PWD_PROPERTY);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public ConcurrentSet(int size,float loadFactor){  this.map=new ConcurrentHashMap<>(size,loadFactor);}  }
class C{  public synchronized boolean authenticateWithKeyboardInteractive(String user,String[] submethods,InteractiveCallback cb) throws IOException {  if (cb == null)   throw new IllegalArgumentException("Callback may not ne NULL!");  if (tm == null)   throw new IllegalStateException("Connection is not established!");  if (authenticated)   throw new IllegalStateException("Connection is already authenticated!");  if (am == null)   am=new AuthenticationManager(tm);  if (cm == null)   cm=new ChannelManager(tm);  if (user == null)   throw new IllegalArgumentException("user argument is null");  authenticated=am.authenticateInteractive(user,submethods,cb);  return authenticated;}  }
class C{  public void stream(HeadersAmp headers,String from,long qid,int credit,String to,String methodName,Object... args) throws IOException {  if (log.isLoggable(Level.FINEST)) {    log.finest(this + " stream" + methodName+ Arrays.asList(args)+ "\n  {to:"+ to+ ","+ headers+ "}");  }  try {    JsonWriterImpl jOut=_jOut;    jOut.init();    jOut.writeStartArray();    jOut.write("stream");    writeHeaders(jOut,headers);    jOut.write(from);    jOut.write(qid);    jOut.write(credit);    jOut.write(to);    jOut.write(methodName);    writeArgs(jOut,args);    jOut.writeEndArray();    jOut.close();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  public static Drawable tintList(Context context,@DrawableRes int drawableRes,@ColorRes int tintListRes){  Drawable drawable=getDrawable(context,drawableRes);  drawable=drawable.mutate();  return tintList(context,drawable,tintListRes);}  }
class C{  @Override public final void add(T linkable){  _lastReturned=null;  _nextIndex++;  if (_size == 0) {    TLinkedList.this.add(linkable);  } else {    addBefore(_next,linkable);  }}  }
class C{  public final void testValidateLowercaseAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.LOWERCASE,true,allowedCharacters);  assertTrue(characterValidator.validate("ab c-"));}  }
class C{  public void remember(IType lhs,IType rhs){  Assert.isLegal(lhs != null);  Assert.isLegal(rhs != null);  try {    if (!isCacheableRHS(rhs))     return;    ITypeHierarchy hierarchy=rhs.newSupertypeHierarchy(getProgressMonitor());    if (hierarchy.contains(lhs)) {      IType[] allLHSides=hierarchy.getAllSupertypes(lhs);      String rhsQualifiedName=rhs.getFullyQualifiedName();      for (int i=0; i < allLHSides.length; i++)       rememberInternal(allLHSides[i],rhsQualifiedName);      rememberInternal(lhs,rhsQualifiedName);    }  } catch (  JavaModelException x) {    JavaPlugin.log(x);  }}  }
class C{  public int next(){  if (_startNode == NULL) {    return NULL;  }  if (_includeSelf && (_currentNode + 1) == _startNode)   return returnNode(makeNodeHandle(++_currentNode));  int node=_currentNode;  int type;  do {    node++;    type=_type(node);    if (NULL == type || !isDescendant(node)) {      _currentNode=NULL;      return END;    }  } while (ATTRIBUTE_NODE == type || TEXT_NODE == type || NAMESPACE_NODE == type);  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  @Override public void addBatch(final String sql) throws SQLException {  throw new SQLException("Cannot do addBatch(String) on preparedStatement");}  }
class C{  long determineFreePeriodEnd(PriceModelHistory pmHistory){  final long priceModelStartTime=bdr.loadPriceModelStartDate(pmHistory.getObjKey()).getTime();  final Calendar calendar=Calendar.getInstance();  calendar.setTimeInMillis(priceModelStartTime);  calendar.add(Calendar.DAY_OF_MONTH,pmHistory.getFreePeriod());  return calendar.getTimeInMillis();}  }
class C{  @SuppressWarnings("rawtypes") public Iterator iterator(){  return children.iterator();}  }
class C{  public HMSNumberFormat(){}  }
class C{  public static String convertToHumanReadableDate(String timestamp){  SimpleDateFormat fmtOut=new SimpleDateFormat();  return fmtOut.format(new Date(Long.valueOf(timestamp)));}  }
class C{  protected void assertThrows(int expectedErrorCode,Statement stat,String sql){  try {    stat.execute(sql);    fail("Expected error: " + expectedErrorCode);  } catch (  SQLException ex) {    assertEquals(expectedErrorCode,ex.getErrorCode());  }}  }
class C{  public boolean isAvailable(){  return adminOperations.isInitialized() && !adminOperations.health().isSealed();}  }
class C{  protected AbstractGraph(List<V> vertices,List<Edge> edges){  for (int i=0; i < vertices.size(); i++)   addVertex(vertices.get(i));  createAdjacencyLists(edges,vertices.size());}  }
class C{  private Object readResolve() throws ObjectStreamException {  URLStreamHandler handler=null;  handler=getURLStreamHandler(tempState.getProtocol());  URL replacementURL=null;  if (isBuiltinStreamHandler(handler.getClass().getName())) {    replacementURL=fabricateNewURL();  } else {    replacementURL=setDeserializedFields(handler);  }  return replacementURL;}  }
class C{  public void readSet(ASN1Set set) throws IOException {  if (tag != ASN1Constants.TAG_C_SET) {    throw expected("set");  }  throw new ASN1Exception("Decoding ASN.1 Set type is not supported");}  }
class C{  private static void analyzeStringSets(StringSet a,StringSet b,String name,HashMap<String,Change> changes){  if (a != null) {    Iterator<String> iter=a.iterator();    while (iter.hasNext()) {      String val=iter.next();      if (b != null && b.contains(val)) {        continue;      }      String key=name + "." + val;      Change change=new Change(key,val,null,name);      changes.put(key,change);    }  }  if (b != null) {    Iterator<String> iter=b.iterator();    while (iter.hasNext()) {      String val=iter.next();      if (a != null && a.contains(val)) {        continue;      }      String key=name + "." + val;      Change change=new Change(key,null,val,name);      changes.put(key,change);    }  }}  }
class C{  public void remove(JarEntry entry){  jarEntries.remove(entry.getName());  jarEntriesToAdd.remove(entry.getName());}  }
class C{  @Override protected void onResume(){  super.onResume();  Log.d(TAG,"onResume() - the activity has become visible (it is now " + "\"resumed\")");}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("NOM: ").append(actual()).append(" ").append(predicted());  sb.append(' ').append(weight());  double[] dist=distribution();  for (int i=0; i < dist.length; i++) {    sb.append(' ').append(dist[i]);  }  return sb.toString();}  }
class C{  public String saveToLocal(Bitmap bitmap){  String mFileName=System.currentTimeMillis() + ".jpg";  String path=FILE_LOCAL + File.separator + mFileName;  try {    FileOutputStream fos=new FileOutputStream(path);    bitmap.compress(CompressFormat.JPEG,75,fos);    fos.flush();    fos.close();  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return path;}  }
class C{  protected UncheckedExecutionException(@Nullable String message){  super(message);}  }
class C{  private void manageSendMoreButtons(){  boolean hasText=mEditText.getText().length() > 0;  mSendImageView.setImageResource(hasText ? R.drawable.ic_material_send_green : R.drawable.ic_material_file);}  }
class C{  public boolean inPaintedArea(Point2D pt){  if (markerGroup == null) {    buildMarkerGroup();  }  GraphicsNode gn=markerGroup.nodeHitAt(pt);  return (gn != null);}  }
class C{  private static MethodHandle selectNumberTransformer(Class param,Object arg){  param=TypeHelper.getWrapperClass(param);  if (param == Byte.class) {    return TO_BYTE;  } else   if (param == Character.class || param == Integer.class) {    return TO_INT;  } else   if (param == Long.class) {    return TO_LONG;  } else   if (param == Float.class) {    return TO_FLOAT;  } else   if (param == Double.class) {    return TO_DOUBLE;  } else   if (param == BigInteger.class) {    return TO_BIG_INT;  } else   if (param == BigDecimal.class) {    return TO_BIG_DEC;  } else   if (param == Short.class) {    return TO_SHORT;  } else {    return null;  }}  }
class C{  public static double[][] multiply(double[][] a,double c){  double[][] result=new double[a.length][a[0].length];  for (int i=0; i < a.length; i++) {    for (int j=0; j < a[0].length; j++) {      result[i][j]=a[i][j] * c;    }  }  return result;}  }
class C{  static Cancelable doBind(final ImageView view,final String url,final ImageOptions options,final Callback.CommonCallback<Drawable> callback){  ImageOptions localOptions=options;{    if (view == null) {      postArgsException(null,localOptions,"view is null",callback);      return null;    }    if (TextUtils.isEmpty(url)) {      postArgsException(view,localOptions,"url is null",callback);      return null;    }    if (localOptions == null) {      localOptions=ImageOptions.DEFAULT;    }    localOptions.optimizeMaxSize(view);  }  MemCacheKey key=new MemCacheKey(url,localOptions);  Drawable oldDrawable=view.getDrawable();  if (oldDrawable instanceof AsyncDrawable) {    ImageLoader loader=((AsyncDrawable)oldDrawable).getImageLoader();    if (loader != null && !loader.stopped) {      if (key.equals(loader.key)) {        return null;      } else {        loader.cancel();      }    }  } else   if (oldDrawable instanceof ReusableDrawable) {    MemCacheKey oldKey=((ReusableDrawable)oldDrawable).getMemCacheKey();    if (oldKey != null && oldKey.equals(key)) {      MEM_CACHE.put(key,oldDrawable);    }  }  Drawable memDrawable=null;  if (localOptions.isUseMemCache()) {    memDrawable=MEM_CACHE.get(key);    if (memDrawable instanceof BitmapDrawable) {      Bitmap bitmap=((BitmapDrawable)memDrawable).getBitmap();      if (bitmap == null || bitmap.isRecycled()) {        memDrawable=null;      }    }  }  if (memDrawable != null) {    boolean trustMemCache=false;    try {      if (callback instanceof ProgressCallback) {        ((ProgressCallback)callback).onWaiting();      }      view.setScaleType(localOptions.getImageScaleType());      view.setImageDrawable(memDrawable);      trustMemCache=true;      if (callback instanceof CacheCallback) {        trustMemCache=((CacheCallback<Drawable>)callback).onCache(memDrawable);        if (!trustMemCache) {          return new ImageLoader().doLoad(view,url,localOptions,callback);        }      } else       if (callback != null) {        callback.onSuccess(memDrawable);      }    } catch (    Throwable ex) {      LogUtil.e(ex.getMessage(),ex);      trustMemCache=false;      return new ImageLoader().doLoad(view,url,localOptions,callback);    } finally {      if (trustMemCache && callback != null) {        try {          callback.onFinished();        } catch (        Throwable ignored) {          LogUtil.e(ignored.getMessage(),ignored);        }      }    }  } else {    return new ImageLoader().doLoad(view,url,localOptions,callback);  }  return null;}  }
class C{  public byte[] serializeKey(final ISPO spo){  return keyOrder.encodeKey(getKeyBuilder(),spo);}  }
class C{  public void testIntMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new IntPoint("value",-1));  doc.add(new StoredField("value",-1));  writer.addDocument(doc);  doc=new Document();  doc.add(new IntPoint("value",4));  doc.add(new StoredField("value",4));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.INTEGER_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  SortField sortField=new SortField("value",SortField.Type.INT);  sortField.setMissingValue(Integer.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public void superimpose(ProcessContext other){  if (other == null) {    return;  }  for (  Pair<String,String> macro : other.macros) {    this.macros.add(macro);  }  for (int i=0; i < other.inputRepositoryLocations.size(); i++) {    String loc=other.inputRepositoryLocations.get(i);    if ((loc != null) && !loc.isEmpty()) {      this.setInputRepositoryLocation(i,loc);    }  }  for (int i=0; i < other.outputRepositoryLocations.size(); i++) {    String loc=other.outputRepositoryLocations.get(i);    if ((loc != null) && !loc.isEmpty()) {      this.setOutputRepositoryLocation(i,loc);    }  }}  }
class C{  public ReflectionPanel(){  try {    image=ImageIO.read(getClass().getResource("Mirror Lake.jpg"));    image=createReflection(image);  } catch (  IOException ex) {    ex.printStackTrace();  }  setOpaque(false);}  }
class C{  private boolean parsePattern(PsiBuilder builder){  final PsiBuilder.Marker marker=builder.mark();  if (!parseBranch(builder)) {    marker.drop();    return false;  }  while (builder.getTokenType() == RegExpTT.UNION) {    builder.advanceLexer();    if (!parseBranch(builder)) {      patternExpected(builder);      break;    }  }  marker.done(RegExpElementTypes.PATTERN);  return true;}  }
class C{  public void service(ServletRequest request,ServletResponse response) throws IOException, ServletException {  HttpServletRequest req=(HttpServletRequest)request;  HttpServletResponse res=(HttpServletResponse)response;  if (!req.getMethod().equals("POST")) {    res.setStatus(500,"Burlap Requires POST");    PrintWriter out=res.getWriter();    res.setContentType("text/html");    out.println("<h1>Burlap Requires POST</h1>");    return;  }  String serviceId=req.getPathInfo();  String objectId=req.getParameter("id");  if (objectId == null)   objectId=req.getParameter("ejbid");  ServiceContext.begin(req,res,serviceId,objectId);  try {    InputStream is=request.getInputStream();    OutputStream os=response.getOutputStream();    BurlapInput in=new BurlapInput(is);    BurlapOutput out=new BurlapOutput(os);    _skeleton.invoke(in,out);  } catch (  RuntimeException e) {    throw e;  }catch (  ServletException e) {    throw e;  }catch (  Throwable e) {    throw new ServletException(e);  } finally {    ServiceContext.end();  }}  }
class C{  @Deprecated public static Uri addToMyContactsGroup(ContentResolver resolver,long personId){  long groupId=tryGetMyContactsGroupId(resolver);  if (groupId == 0) {    throw new IllegalStateException("Failed to find the My Contacts group");  }  return addToGroup(resolver,personId,groupId);}  }
class C{  public static Object evaluate(Map<String,? extends Object> context,String expression){  return evaluate(context,expression,Object.class);}  }
class C{  public int read(String context) throws IOException {  int b=this.read();  log.debug("Read " + context + " byte, val is "+ ByteUtils.formatByte(b));  return b;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.search_query_results);  mQueryText=(TextView)findViewById(R.id.txt_query);  mAppDataText=(TextView)findViewById(R.id.txt_appdata);  mDeliveredByText=(TextView)findViewById(R.id.txt_deliveredby);  final Intent queryIntent=getIntent();  final String queryAction=queryIntent.getAction();  if (Intent.ACTION_SEARCH.equals(queryAction)) {    doSearchQuery(queryIntent,"onCreate()");  } else {    mDeliveredByText.setText("onCreate(), but no ACTION_SEARCH intent");  }}  }
class C{  @Override public Dimension preferredLayoutSize(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Insets insets=parent.getInsets();  int prefWidth=insets.left + insets.right;  int prefHeight=insets.top + insets.bottom;  Dimension extentSize=null;  Dimension viewSize=null;  Component view=null;  if (viewport != null) {    extentSize=viewport.getPreferredSize();    viewSize=viewport.getViewSize();    view=viewport.getView();  }  if (extentSize != null) {    prefWidth+=extentSize.width;    prefHeight+=extentSize.height;  }  Border viewportBorder=scrollPane.getViewportBorder();  if (viewportBorder != null) {    Insets vpbInsets=viewportBorder.getBorderInsets(parent);    prefWidth+=vpbInsets.left + vpbInsets.right;    prefHeight+=vpbInsets.top + vpbInsets.bottom;  }  if ((rowHead != null) && rowHead.isVisible()) {    prefWidth+=rowHead.getPreferredSize().width;  }  if ((colHead != null) && colHead.isVisible()) {    prefHeight+=colHead.getPreferredSize().height;  }  if ((vsb != null) && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {    if (vsbPolicy == VERTICAL_SCROLLBAR_ALWAYS) {      prefWidth+=vsb.getPreferredSize().width;    } else     if ((viewSize != null) && (extentSize != null)) {      boolean canScroll=true;      if (view instanceof Scrollable) {        canScroll=!((Scrollable)view).getScrollableTracksViewportHeight();      }      if (canScroll && (viewSize.height > extentSize.height)) {        prefWidth+=vsb.getPreferredSize().width;      }    }  }  if ((hsb != null) && (hsbPolicy != HORIZONTAL_SCROLLBAR_NEVER)) {    if (hsbPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {      prefHeight+=hsb.getPreferredSize().height;    } else     if ((viewSize != null) && (extentSize != null)) {      boolean canScroll=true;      if (view instanceof Scrollable) {        canScroll=!((Scrollable)view).getScrollableTracksViewportWidth();      }      if (canScroll && (viewSize.width > extentSize.width)) {        prefHeight+=hsb.getPreferredSize().height;      }    }  }  return new Dimension(prefWidth,prefHeight);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  protected void fillDialogMenu(IMenuManager dialogMenu){  dialogMenu.add(new GroupMarker("SystemMenuStart"));  dialogMenu.add(new MoveAction());  dialogMenu.add(new ResizeAction());  if (showPersistActions) {    if (isUsing34API) {      dialogMenu.add(new PersistLocationAction());      dialogMenu.add(new PersistSizeAction());    } else {      dialogMenu.add(new PersistBoundsAction());    }  }  dialogMenu.add(new Separator("SystemMenuEnd"));}  }
class C{  protected InlineKeyboardButton.InlineKeyboardButtonBuilder keyboardBuilder(){  return InlineKeyboardButton.builder().text(text).callbackData("im." + owner.getInternalId() + "."+ row+ "."+ num);}  }
class C{  public MoveEvaluation negmax(int ply,IPlayer player,IPlayer opponent){  Iterator<IGameMove> it=player.validMoves(state).iterator();  if (ply == 0 || !it.hasNext()) {    return new MoveEvaluation(player.eval(state));  }  MoveEvaluation best=new MoveEvaluation(MoveEvaluation.minimum());  while (it.hasNext()) {    IGameMove move=it.next();    move.execute(state);    MoveEvaluation me=negmax(ply - 1,opponent,player);    move.undo(state);    if (-me.score > best.score) {      best=new MoveEvaluation(move,-me.score);    }  }  return best;}  }
class C{  public boolean implies(Permission permission){  return false;}  }
class C{  public AllConnectionsInUseException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void saveTermBuffer(){  buffer.setLength(0);  buffer.append(termAttribute.buffer(),0,termAttribute.length());  buffer.append(SEPARATOR);  lastStartOffset=offsetAttribute.startOffset();  lastWasCommon=isCommon();}  }
class C{  private double[][] createSampleData2(){  double[][] result=new double[10][2];  result[0][0]=2;  result[0][1]=56.27;  result[1][0]=3;  result[1][1]=41.32;  result[2][0]=4;  result[2][1]=31.45;  result[3][0]=5;  result[3][1]=30.05;  result[4][0]=6;  result[4][1]=24.69;  result[5][0]=7;  result[5][1]=19.78;  result[6][0]=8;  result[6][1]=20.94;  result[7][0]=9;  result[7][1]=16.73;  result[8][0]=10;  result[8][1]=14.21;  result[9][0]=11;  result[9][1]=12.44;  return result;}  }
class C{  private File launchReport(MPrintFormat pf,HttpServletRequest request,GridTab m_curTab,MQuery m_query){  int Record_ID=0;  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  File fileName=null;  if (m_query.getRestrictionCount() == 1 && m_query.getCode(0) instanceof Integer) {    Record_ID=((Integer)m_query.getCode(0)).intValue();  }  PrintInfo info=new PrintInfo(pf.getName(),pf.getAD_Table_ID(),Record_ID);  info.setDescription(m_query.getInfo());  if (pf != null && pf.getJasperProcess_ID() > 0) {    ProcessInfo pi=new ProcessInfo("",pf.getJasperProcess_ID());    Trx trx=Trx.get(Trx.createTrxName("WebPrc"),true);    WProcessCtl.process(this,m_curTab.getAD_Window_ID(),pi,trx,request);  } else {    ReportEngine re=new ReportEngine(wsc.ctx,pf,m_query,info);    if (re == null) {      log.info("Could not start ReportEngine");    } else {      try {        File file=File.createTempFile("WProcess",".pdf");        boolean ok=re.createPDF(file);        if (ok) {          fileName=file;        } else {          log.info("Could not create Report");        }      } catch (      Exception e) {        log.info(e.toString());      }    }  }  return fileName;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static Pair<Integer,Integer> parseAudioSpecificConfig(byte[] audioSpecificConfig){  int audioObjectType=(audioSpecificConfig[0] >> 3) & 0x1F;  int byteOffset=audioObjectType == 5 || audioObjectType == 29 ? 1 : 0;  int frequencyIndex=(audioSpecificConfig[byteOffset] & 0x7) << 1 | ((audioSpecificConfig[byteOffset + 1] >> 7) & 0x1);  Assertions.checkState(frequencyIndex < 13);  int sampleRate=AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[frequencyIndex];  int channelCount=(audioSpecificConfig[byteOffset + 1] >> 3) & 0xF;  return Pair.create(sampleRate,channelCount);}  }
class C{  public BasicEffect copy(){  BasicEffect copy=new BasicEffect(variableLabel,variableValue,priority,exclusive,negated);  return copy;}  }
class C{  public void processConfigXML(URI uri) throws Exception {  Element testCasesElem=loadXMLFromURL(uri);  NodeList children=testCasesElem.getChildNodes();  for (int childIdx=0; childIdx < children.getLength(); childIdx++) {    Node n=children.item(childIdx);    if (n.getNodeType() == Node.ELEMENT_NODE) {      final String nodeName=n.getNodeName();      if (nodeName.equals(ELEM_SETTING)) {        NamedNodeMap attrs=n.getAttributes();        for (int attrIdx=0; attrIdx < attrs.getLength(); attrIdx++) {          Attr attr=(Attr)attrs.item(attrIdx);          testSuiteSettings.put(attr.getName(),attr.getValue());        }      } else       if (nodeName.equals(ELEM_TEST_CASE)) {        for (        TemplateTestCase testCase : createTestCasesFromElement((Element)n)) {          addTest(testCase);        }      }    }  }}  }
class C{  public static boolean isUriKey(String key){  return key.endsWith(".url") || key.endsWith(".uri");}  }
class C{  public RosterEntrySelection(ArrayList<String> rosterEntries){  this.Ids=rosterEntries;}  }
class C{  public GingerbreadPurgeableDecoder(WebpBitmapFactory.WebpErrorLogger webpErrorLogger){}  }
class C{  public EvoSVM(OperatorDescription description){  super(description);}  }
class C{  public void disconnected(){synchronized (m_event) {    m_event.notifyAll();  }}  }
class C{  public Object[] patch_apply(LinkedList<Patch> patches,String text){  if (patches.isEmpty()) {    return new Object[]{text,new boolean[0]};  }  patches=patch_deepCopy(patches);  String nullPadding=patch_addPadding(patches);  text=nullPadding + text + nullPadding;  patch_splitMax(patches);  int x=0;  int delta=0;  boolean[] results=new boolean[patches.size()];  for (  Patch aPatch : patches) {    int expected_loc=aPatch.start2 + delta;    String text1=diff_text1(aPatch.diffs);    int start_loc;    int end_loc=-1;    if (text1.length() > this.Match_MaxBits) {      start_loc=match_main(text,text1.substring(0,this.Match_MaxBits),expected_loc);      if (start_loc != -1) {        end_loc=match_main(text,text1.substring(text1.length() - this.Match_MaxBits),expected_loc + text1.length() - this.Match_MaxBits);        if (end_loc == -1 || start_loc >= end_loc) {          start_loc=-1;        }      }    } else {      start_loc=match_main(text,text1,expected_loc);    }    if (start_loc == -1) {      results[x]=false;      delta-=aPatch.length2 - aPatch.length1;    } else {      results[x]=true;      delta=start_loc - expected_loc;      String text2;      if (end_loc == -1) {        text2=text.substring(start_loc,Math.min(start_loc + text1.length(),text.length()));      } else {        text2=text.substring(start_loc,Math.min(end_loc + this.Match_MaxBits,text.length()));      }      if (text1.equals(text2)) {        text=text.substring(0,start_loc) + diff_text2(aPatch.diffs) + text.substring(start_loc + text1.length());      } else {        LinkedList<Diff> diffs=diff_main(text1,text2,false);        if (text1.length() > this.Match_MaxBits && diff_levenshtein(diffs) / (float)text1.length() > this.Patch_DeleteThreshold) {          results[x]=false;        } else {          diff_cleanupSemanticLossless(diffs);          int index1=0;          for (          Diff aDiff : aPatch.diffs) {            if (aDiff.operation != Operation.EQUAL) {              int index2=diff_xIndex(diffs,index1);              if (aDiff.operation == Operation.INSERT) {                text=text.substring(0,start_loc + index2) + aDiff.text + text.substring(start_loc + index2);              } else               if (aDiff.operation == Operation.DELETE) {                text=text.substring(0,start_loc + index2) + text.substring(start_loc + diff_xIndex(diffs,index1 + aDiff.text.length()));              }            }            if (aDiff.operation != Operation.DELETE) {              index1+=aDiff.text.length();            }          }        }      }    }    x++;  }  text=text.substring(nullPadding.length(),text.length() - nullPadding.length());  return new Object[]{text,results};}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>(2);  result.addElement(new Option("\tSpecifies list of columns to Discretize. First" + " and last are valid indexes.\n" + "\t(default: first-last)","R",1,"-R <col1,col2-col4,...>"));  result.addElement(new Option("\tInvert matching sense of column indexes.","V",0,"-V"));  return result.elements();}  }
class C{  public void addFrequency(Token token,int docFreq){  if (tokenFrequency == null) {    tokenFrequency=new LinkedHashMap<>();  }  tokenFrequency.put(token,docFreq);}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForHtmlContentTag instance=new ForHtmlContentTag();  String value="<div>";  String expected="&lt;div&gt;";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  protected TransitionRootImpl(){  super();}  }
class C{  public boolean isCsVideoSupported(){  return mCsVideo;}  }
class C{  public static void transfer(InputStream in,OutputStream out,int bufferSize) throws IOException {  byte[] buffer=new byte[bufferSize];  int bytesRead;  while ((bytesRead=in.read(buffer)) != -1) {    out.write(buffer,0,bytesRead);  }}  }
class C{  protected int hash(Object key1,Object key2,Object key3,Object key4){  int h=0;  if (key1 != null) {    h^=key1.hashCode();  }  if (key2 != null) {    h^=key2.hashCode();  }  if (key3 != null) {    h^=key3.hashCode();  }  if (key4 != null) {    h^=key4.hashCode();  }  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.ATTACK);  rpclass.addAttribute(HIT_ATTR,Type.FLAG);  rpclass.addAttribute(DAMAGE_ATTR,Type.INT);  rpclass.addAttribute(DAMAGE_TYPE_ATTR,Type.INT);  rpclass.addAttribute(RANGED_ATTR,Type.FLAG);  rpclass.addAttribute(WEAPON_ATTR,Type.STRING);  rpclass.addAttribute(TARGET_ATTR,Type.STRING);}  }
class C{  @Override public int compareTo(@NonNull MessageKey another){  int equal=0;  int result;  int idCompare=Integer.compare(this.id,another.id);  if (idCompare == equal) {    result=equal;  } else {    idCompare=-idCompare;    int priorityCompare=Integer.compare(this.priority,another.priority);    if (priorityCompare == equal) {      result=idCompare;    } else {      result=priorityCompare;    }  }  return result;}  }
class C{  public boolean addDomoticzServer(ServerInfo server){  if (mServerList == null)   mServerList=new ArrayList<>();  boolean alreadyContains=false;  for (  ServerInfo s : mServerList) {    if (s.getServerName().equals(server.getServerName()))     alreadyContains=true;  }  if (!alreadyContains) {    mServerList.add(server);    saveDomoticzServers(false);    return true;  } else   return false;}  }
class C{  @SuppressWarnings("deprecation") private static long javaToDosTime(long time){  Date d=new Date(time);  int year=d.getYear() + 1900;  if (year < 1980) {    return ZipEntry.DOSTIME_BEFORE_1980;  }  return (year - 1980) << 25 | (d.getMonth() + 1) << 21 | d.getDate() << 16 | d.getHours() << 11 | d.getMinutes() << 5 | d.getSeconds() >> 1;}  }
class C{  public final int bytesConsumed(){  return bytesConsumed;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.465 -0400",hash_original_method="2712ACBC7A57054D6E52521A90E499FB",hash_generated_method="553812C8CEC629E544B2C792B826D7B1") private int handleZ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    result.append('J');    index+=2;  } else {    if (contains(value,index + 1,2,"ZO","ZI","ZA") || (slavoGermanic && (index > 0 && charAt(value,index - 1) != 'T'))) {      result.append("S","TS");    } else {      result.append('S');    }    index=charAt(value,index + 1) == 'Z' ? index + 2 : index + 1;  }  return index;}  }
class C{  protected void process(List<String> messages){  setStatusBarMessage(messages.get(messages.size() - 1),BasePanel.INFORMATION);}  }
class C{  public void importVectors(Class<?> clazz){  Field fields[]=clazz.getDeclaredFields();  for (int i=0; i < fields.length; i++) {    Field field=fields[i];    Annotation annotation=field.getAnnotation(TraceVectorArgDesc.class);    if (annotation == null)     continue;    TraceVectorArgDesc argDesc=(TraceVectorArgDesc)annotation;    try {      int target=field.getInt(field);      add(argDesc.component(),argDesc.category(),target,argDesc.description());    } catch (    Exception e) {      logger.warn(String.format("Failed to add vector for field '%s'",field.getName()));    }  }}  }
class C{  public SearchBuilder<T> byName(String name){  return by(NAME_PARAM,name);}  }
class C{  public NBodyForce(){  this(DEFAULT_GRAV_CONSTANT,DEFAULT_DISTANCE,DEFAULT_THETA);}  }
class C{  public GenericFeed retrieveSettingsFeed(String username,String setting) throws IOException, ServiceException {  URL singleUrl=buildSettingsUrl(username,setting);  return getFeed(singleUrl,GenericFeed.class);}  }
class C{  @Override public void closeElement(){  current=(XMLElement)stack.pop();}  }
class C{  public static void putFloatLE(byte[] arr,long off,float val){  int intVal=Float.floatToIntBits(val);  if (UNALIGNED)   UNSAFE.putInt(arr,off,Integer.reverseBytes(intVal)); else   putIntByByte(arr,off,intVal,false);}  }
class C{  public <D>D oneToMany(Class<D> destinationClass,final T source){  try {    return this.<D,T>getJMapper(relationalOneToManyMapper,destinationClass).getDestination(source);  } catch (  Exception e) {    return (D)this.destinationClassControl(e,destinationClass);  }}  }
class C{  public SSLSessionBindingEvent(SSLSession session,String name){  super(session);  this.name=name;}  }
class C{  public Wagging(ContinuousDistribution dist,Classifier weakL,int iterations){  setDistribution(dist);  setIterations(iterations);  setWeakLearner(weakL);}  }
class C{  public void createBufferStrategy(int numBuffers){  super.createBufferStrategy(numBuffers);}  }
class C{  private int scanEscapeChar() throws IOException {  long p=in.pos;switch (ch=in.read()) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':{      int n=ch - '0';      for (int i=2; i > 0; i--) {switch (ch=in.read()) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':          n=(n << 3) + ch - '0';        break;default :      if (n > 0xFF) {        env.error(p,"invalid.escape.char");      }    return n;}}ch=in.read();if (n > 0xFF) {env.error(p,"invalid.escape.char");}return n;}case 'r':ch=in.read();return '\r';case 'n':ch=in.read();return '\n';case 'f':ch=in.read();return '\f';case 'b':ch=in.read();return '\b';case 't':ch=in.read();return '\t';case '\\':ch=in.read();return '\\';case '\"':ch=in.read();return '\"';case '\'':ch=in.read();return '\'';}env.error(p,"invalid.escape.char");ch=in.read();return -1;}  }
class C{  public static Object newClassLoader(){  Object result;  Class<?> cls;  Constructor<?> constr;  result=null;  if (isPresent()) {    try {      cls=Class.forName(CLASS_GROOVYCLASSLOADER);      constr=cls.getConstructor(new Class[]{ClassLoader.class});      result=constr.newInstance(Groovy.class.getClassLoader());    } catch (    Exception e) {      e.printStackTrace();      result=null;    }  }  return result;}  }
class C{  static String readNumber(String s){  int i=0;  if (s.startsWith("0x") || s.startsWith("0X")) {    i=2;    while (true) {      char ch=s.charAt(i);      if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {        break;      }      i++;    }    if (s.charAt(i) == 'l' || s.charAt(i) == 'L') {      i++;    }  } else {    while (true) {      char ch=s.charAt(i);      if ((ch < '0' || ch > '9') && ch != '.') {        break;      }      i++;    }    if (s.charAt(i) == 'e' || s.charAt(i) == 'E') {      i++;      if (s.charAt(i) == '-' || s.charAt(i) == '+') {        i++;      }      while (Character.isDigit(s.charAt(i))) {        i++;      }    }    if (s.charAt(i) == 'f' || s.charAt(i) == 'F' || s.charAt(i) == 'd' || s.charAt(i) == 'D' || s.charAt(i) == 'L' || s.charAt(i) == 'l') {      i++;    }  }  return s.substring(0,i);}  }
class C{  public void testDoubleValueNegMaxValue(){  byte[] a={0,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=-1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == -Double.MAX_VALUE);}  }
class C{  public int count(){  return getData().rows();}  }
class C{  public PlacePanel(final GameData data,final MapPanel map,final TripleAFrame frame){  super(data,map,frame);  m_undoableMovesPanel=new UndoablePlacementsPanel(data,this);  m_unitsToPlace=new SimpleUnitPanel(map.getUIContext());  m_leftToPlaceLabel.setText("Units left to place:");}  }
class C{  public DateFormatDayFormatter(){  this.dateFormat=new SimpleDateFormat("d",Locale.getDefault());}  }
class C{  public static int hashIntArray(int seed,int... intArray){  return hash(seed,intArray);}  }
class C{  public Iterable<Edge> edges(){  return mst;}  }
class C{  public void testBug36948() throws Exception {  Connection _conn=null;  try {    Properties props=getPropertiesFromTestsuiteUrl();    String host=props.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY,"localhost");    String port=props.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY,"3306");    String db=props.getProperty(NonRegisteringDriver.DBNAME_PROPERTY_KEY,"test");    String hostSpec=host;    if (!NonRegisteringDriver.isHostPropertiesList(host)) {      hostSpec=host + ":" + port;    }    props=getHostFreePropertiesFromTestsuiteUrl();    props.remove("useSSL");    props.remove("requireSSL");    props.remove("verifyServerCertificate");    props.remove("trustCertificateKeyStoreUrl");    props.remove("trustCertificateKeyStoreType");    props.remove("trustCertificateKeyStorePassword");    final String url="jdbc:mysql://" + hostSpec + "/"+ db+ "?useSSL=true&requireSSL=true&verifyServerCertificate=true"+ "&trustCertificateKeyStoreUrl=file:src/testsuite/ssl-test-certs/test-cert-store&trustCertificateKeyStoreType=JKS"+ "&trustCertificateKeyStorePassword=password";    _conn=DriverManager.getConnection(url,props);  }  finally {    if (_conn != null) {      _conn.close();    }  }}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append('@');  result.append(klazz.getName());  result.append('(');  for (int i=0; i < elements.length; ++i) {    if (i != 0) {      result.append(", ");    }    result.append(elements[i]);  }  result.append(')');  return result.toString();}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public static void download(String nodeId,String[] service,Integer severity,String searchMessage,String startTime,String endTime,String orderTypes){  SupportPackageCreator creator=new SupportPackageCreator(request,BourneUtil.getSysClient(),Models.currentTenant(),BourneUtil.getCatalogClient());  if (StringUtils.isNotEmpty(nodeId)) {    creator.setNodeIds(Lists.newArrayList(nodeId));  }  if (service != null && service.length > 0) {    creator.setLogNames(Lists.newArrayList(service));  }  if (StringUtils.isNotEmpty(searchMessage)) {    creator.setMsgRegex("(?i).*" + searchMessage + ".*");  }  if (StringUtils.isNotEmpty(startTime)) {    creator.setStartTime(startTime);  }  if (StringUtils.isNotEmpty(endTime)) {    creator.setEndTime(endTime);  }  if (severity != null && severity > 0) {    creator.setLogSeverity(severity);  }  if (DisasterRecoveryUtils.isActiveSite()) {    if (StringUtils.equalsIgnoreCase(orderTypes,OrderTypes.ALL.name())) {      creator.setOrderTypes(OrderTypes.ALL);    } else     if (StringUtils.equals(orderTypes,OrderTypes.ERROR.name())) {      creator.setOrderTypes(OrderTypes.ERROR);    }  }  renderSupportPackage(creator);}  }
class C{  public static void createPath(String path,boolean mustCreate) throws IOException {  File fpath=new File(path);  if (fpath.exists() && mustCreate)   throw new IOException(path + " already exists"); else   if (!fpath.mkdirs())   throw new IOException("cannot create path: " + path);}  }
class C{  @Override public int read() throws IOException {  bytik=in.get() & 0x00FF;  consumed++;  return bytik;}  }
class C{  public Line3D(Stack<Vector3> points,float thickness,int[] colors,boolean createVBOs){  super();  mPoints=points;  mLineThickness=thickness;  mColors=colors;  if (colors != null && colors.length != points.size())   throw new RuntimeException("The number of line points and colors is not the same.");  init(createVBOs);}  }
class C{  public boolean assignIfBestMatch(MethodDeclaration declaration){  assert !finalized : "Assigning on a method that has already been finalized";  if (!isMatch(declaration.getParameters())) {    return false;  }  if (this.bestMatchMethod.isPresent()) {    if (this.bestMatchMethod.get().getParameters().size() > declaration.getParameters().size()) {      return false;    }  }  this.bestMatchMethod=Optional.of(declaration);  return true;}  }
class C{  public void minimizeWindows(){  Iterator<Container> iter;  Container frame;  iter=getWindowList();  while (iter.hasNext()) {    frame=iter.next();    try {      if (frame instanceof ChildFrameMDI) {        ((ChildFrameMDI)frame).setIcon(true);      } else       if (frame instanceof ChildFrameSDI) {        ((ChildFrameSDI)frame).setExtendedState(JFrame.ICONIFIED);      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public boolean fill(Reader reader,int pos) throws IOException {  int res=reader.read(fBuf);  if (res == -1) {    fOffset=pos;    fLength=0;    return true;  }  int charsRead=res;  while (charsRead < BUFFER_SIZE) {    res=reader.read(fBuf,charsRead,BUFFER_SIZE - charsRead);    if (res == -1) {      fOffset=pos;      fLength=charsRead;      return true;    }    charsRead+=res;  }  fOffset=pos;  fLength=BUFFER_SIZE;  return false;}  }
class C{  @Override public boolean conditionOk(Example example){  for (  Attribute attribute : example.getAttributes()) {    if (Double.isNaN(example.getValue(attribute))) {      return true;    }  }  return false;}  }
class C{  protected void invalidateApplicationUser(HttpServletRequest request){  if (request != null) {    HttpSession session=request.getSession(false);    if (session != null) {      session.invalidate();    }  }  SecurityContextHolder.clearContext();}  }
class C{  public void testSubscribe1(){  TestSubscriber s=new TestSubscriber();  SubmissionPublisher<Integer> p=basicPublisher();  p.subscribe(s);  assertTrue(p.hasSubscribers());  assertEquals(1,p.getNumberOfSubscribers());  assertTrue(p.getSubscribers().contains(s));  assertTrue(p.isSubscribed(s));  s.awaitSubscribe();  assertNotNull(s.sn);  assertEquals(0,s.nexts);  assertEquals(0,s.errors);  assertEquals(0,s.completes);  TestSubscriber s2=new TestSubscriber();  p.subscribe(s2);  assertTrue(p.hasSubscribers());  assertEquals(2,p.getNumberOfSubscribers());  assertTrue(p.getSubscribers().contains(s));  assertTrue(p.getSubscribers().contains(s2));  assertTrue(p.isSubscribed(s));  assertTrue(p.isSubscribed(s2));  s2.awaitSubscribe();  assertNotNull(s2.sn);  assertEquals(0,s2.nexts);  assertEquals(0,s2.errors);  assertEquals(0,s2.completes);  p.close();}  }
class C{  public synchronized void deleteFile(JDBCSequentialFile file) throws SQLException {  try {    connection.setAutoCommit(false);    deleteFile.setInt(1,file.getId());    deleteFile.executeUpdate();    connection.commit();  } catch (  SQLException e) {    connection.rollback();    throw e;  }}  }
class C{  public Grantee grantee(){  return grantee;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.172 -0400",hash_original_method="4F8BC4B02FA590E6AB961D704D5180C8",hash_generated_method="E1A34038E8E0FFFDAF780D23BB69F715") public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public static void writeToFileReal_2D(String format,int n1,int n2,float[] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int i=0; i < n1; i++) {      for (int j=0; j < n2; j++) {        if (Math.abs(x[i * n2 + j]) < 5e-5) {          out.write("0\t");        } else {          out.write(String.format(format,x[i * n2 + j]) + "\t");        }      }      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void doExportInternal(final JobContext context) throws IOException {  doDataExport(context);}  }
class C{  public static boolean writeFile(String filePath,InputStream stream,boolean append){  return writeFile(filePath != null ? new File(filePath) : null,stream,append);}  }
class C{  public static void main(String[] args){  Header.printHeader(SouthAfricaLinks2EsriShapefile.class.toString(),args);  String input=args[0];  String output=args[1];  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  MatsimNetworkReader mnr=new MatsimNetworkReader(sc.getNetwork());  mnr.readFile(input);  CoordinateReferenceSystem crs=MGC.getCRS("WGS84_SA_Albers");  FeatureGeneratorBuilderImpl builder=new FeatureGeneratorBuilderImpl(sc.getNetwork(),"WGS84_SA_Albers");  builder.setWidthCoefficient(-1 * 1);  builder.setWidthCalculatorPrototype(LanesBasedWidthCalculator.class);  builder.setCoordinateReferenceSystem(crs);  Links2ESRIShape lts=new Links2ESRIShape(sc.getNetwork(),output,builder);  lts.write();  Header.printFooter();}  }
class C{  public static Element addChildElement(Element element,String childElementName,Document document){  Element newElement=document.createElement(childElementName);  element.appendChild(newElement);  return newElement;}  }
class C{  public void addMaterializationValue(Constant value){  if (numMaterializationValuesAdded == 0) {    materializedValue=value;  } else {    materializedValue=null;  }  numMaterializationValuesAdded++;}  }
class C{  public static void print(double[][] m,int r){  for (int j=0; j < m[r].length; j++) {    System.out.print(m[r][j] + " ");  }}  }
class C{  public AWTTerminalFrame(String title,TerminalEmulatorDeviceConfiguration deviceConfiguration,AWTTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration,TerminalEmulatorAutoCloseTrigger... autoCloseTriggers){  this(title,null,deviceConfiguration,fontConfiguration,colorConfiguration,autoCloseTriggers);}  }
class C{  public float toYaw(){  double x=getX();  double z=getZ();  double t=Math.atan2(-x,z);  double _2pi=2 * Math.PI;  return (float)Math.toDegrees(((t + _2pi) % _2pi));}  }
class C{  private static AVList handleGeotiff(BufferedImage image,GeotiffReader reader,int imageIndex,int interpolation_mode) throws IOException {  AVList values=new AVListImpl();  if (null != image) {    values.setValue(AVKey.IMAGE,image);    values.setValue(AVKey.WIDTH,image.getWidth());    values.setValue(AVKey.HEIGHT,image.getHeight());  }  ImageUtil.readGeoKeys(reader,imageIndex,values);  if (AVKey.COORDINATE_SYSTEM_PROJECTED.equals(values.getValue(AVKey.COORDINATE_SYSTEM)))   ImageUtil.reprojectUtmToGeographic(values,interpolation_mode);  return values;}  }
class C{  protected boolean isOldFormat(String body){  return CONTAINS_ENVIRONMENTS_ARRAY_PATTERN.matcher(body).matches();}  }
class C{  public void load() throws CouldntLoadDataException, InvalidDatabaseVersionException {  try {    m_database.load();  } catch (  com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException|LoadCancelledException e) {    throw new CouldntLoadDataException(e);  }catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.InvalidDatabaseVersionException e) {    throw new InvalidDatabaseVersionException(e);  }}  }
class C{  public Object[] resetAndStart(){  _reset();  if (_freeBuffer == null) {    return new Object[INITIAL_CHUNK_SIZE];  }  return _freeBuffer;}  }
class C{  public static void closeReaders(SequenceFile.Reader[] readers) throws IOException {  if (readers != null) {    for (int i=0; i < readers.length; i++) {      SequenceFile.Reader reader=readers[i];      if (reader != null) {        reader.close();      }    }  }}  }
class C{  public static double[] convertFloatsToDoubles(float[] input){  if (input == null)   return null;  double[] output=new double[input.length];  for (int i=0; i < input.length; ++i) {    output[i]=(double)input[i];  }  return output;}  }
class C{  public void addGraphEdge(SpaceEffGraphEdge e){  e.fromNode().appendOutEdge(e);  e.toNode().appendInEdge(e);}  }
class C{  void retrieve(String fileName,OutputStream out,long restartAt) throws IOException {  passive();  if (restartAt > 0) {    send("REST " + restartAt);    readCode(350);  }  send("RETR " + fileName);  IOUtils.copyAndClose(inData,out);  readCode(150,226);}  }
class C{  public void managerInit() throws Exception {  _keyGenerator.setCoordinator(_coordinator);  _keyGenerator.globalInit();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TYPE_VARIABLE__DECLARED_UPPER_BOUND:    return basicSetDeclaredUpperBound(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public FarthestPair(Point2D[] points){  GrahamScan graham=new GrahamScan(points);  if (points.length <= 1)   return;  int m=0;  for (  Point2D p : graham.hull())   m++;  Point2D[] hull=new Point2D[m + 1];  m=1;  for (  Point2D p : graham.hull()) {    hull[m++]=p;  }  m--;  if (m == 1)   return;  if (m == 2) {    best1=hull[1];    best2=hull[2];    bestDistanceSquared=best1.distanceSquaredTo(best2);    return;  }  int k=2;  while (Point2D.area2(hull[m],hull[1],hull[k + 1]) > Point2D.area2(hull[m],hull[1],hull[k])) {    k++;  }  int j=k;  for (int i=1; i <= k && j <= m; i++) {    if (hull[i].distanceSquaredTo(hull[j]) > bestDistanceSquared) {      best1=hull[i];      best2=hull[j];      bestDistanceSquared=hull[i].distanceSquaredTo(hull[j]);    }    while ((j < m) && Point2D.area2(hull[i],hull[i + 1],hull[j + 1]) > Point2D.area2(hull[i],hull[i + 1],hull[j])) {      j++;      double distanceSquared=hull[i].distanceSquaredTo(hull[j]);      if (distanceSquared > bestDistanceSquared) {        best1=hull[i];        best2=hull[j];        bestDistanceSquared=hull[i].distanceSquaredTo(hull[j]);      }    }  }}  }
class C{  protected double overallStress(){  double v=0;  for (  Cluster cluster : clusters) {    v+=cluster.getStress();  }  return v;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.497 -0500",hash_original_method="DE85950924139BCA289E1B65627F95C2",hash_generated_method="B9A6D6A78DD82FAE8A96D093725B1214") public synchronized void transactionErrorEvent(SIPTransactionErrorEvent transactionErrorEvent){  SIPTransaction transaction=(SIPTransaction)transactionErrorEvent.getSource();  if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TRANSPORT_ERROR) {    transaction.setState(SIPTransaction.TERMINATED_STATE);    if (transaction instanceof SIPServerTransaction) {      ((SIPServerTransaction)transaction).collectionTime=0;    }    transaction.disableTimeoutTimer();    transaction.disableRetransmissionTimer();  }}  }
class C{  public RequestHandle post(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(null,url,params,responseHandler);}  }
class C{  public MappedElement createMappedElement(){  MappedElementImpl mappedElement=new MappedElementImpl();  return mappedElement;}  }
class C{  public WheelHorizontalView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("GridStroke")) {    attemptGridStrokeSelection();  } else   if (command.equals("GridPaint")) {    attemptGridPaintSelection();  } else   if (command.equals("AutoRangeOnOff")) {    toggleAutoRange();  } else   if (command.equals("MinimumRange")) {    validateMinimum();  } else   if (command.equals("MaximumRange")) {    validateMaximum();  } else   if (command.equals("AutoTickOnOff")) {    toggleAutoTick();  } else {    super.actionPerformed(event);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void testAccents(){  assertTrue(sh.isDefaultCorrection("nino","ni\u00F1o"));  assertTrue(sh.isDefaultCorrection("nimo","ni\u00F1o"));  assertTrue(sh.isDefaultCorrection("maria","Mar\u00EDa"));}  }
class C{  public DirectedSurfacePolyline(){}  }
class C{  public boolean specifiesHighAvailability(){  return (highAvailability != null && ((HighAvailabilityType.vplex_local.name().equals(highAvailability.getType())) || (HighAvailabilityType.vplex_distributed.name().equals(highAvailability.getType()))));}  }
class C{  @Contract(pure=true) synchronized final boolean isOperationCancelled(final int id){  return mCancelledOperations.contains(Integer.valueOf(id));}  }
class C{  public MiniStorageDeviceDetector(){}  }
class C{  public final void readChildren(ObjectInputStream ois) throws IOException, ClassNotFoundException {synchronized (children) {    for (int i=0; i < serializable; i++) {      Object child=ois.readObject();      BCSChild childBCSC=(BCSChild)ois.readObject();      children.put(child,childBCSC);      childDeserializedHook(child,childBCSC);      BeanContextChild beanContextChild=getChildBeanContextChild(child);      if (beanContextChild != null) {        try {          beanContextChild.setBeanContext(getBeanContextPeer());        } catch (        PropertyVetoException e) {          throw new IOException(Messages.getString("beans.6B"));        }        beanContextChild.removePropertyChangeListener("beanContext",nonSerPCL);        beanContextChild.addPropertyChangeListener("beanContext",nonSerPCL);      }    }  }}  }
class C{  public static void init(int logLevel){  init(logLevel,new LogConfiguration.Builder().build(),DefaultsFactory.createPrinter());}  }
class C{  public void endPutAll(long start){  endPutAll(start,1);}  }
class C{  public ViolationInfo(Parcel in,boolean unsetGatheringBit){  crashInfo=new ApplicationErrorReport.CrashInfo(in);  int rawPolicy=in.readInt();  if (unsetGatheringBit) {    policy=rawPolicy & ~PENALTY_GATHER;  } else {    policy=rawPolicy;  }  durationMillis=in.readInt();  violationNumThisLoop=in.readInt();  numAnimationsRunning=in.readInt();  violationUptimeMillis=in.readLong();  numInstances=in.readLong();  broadcastIntentAction=in.readString();  tags=in.readStringArray();}  }
class C{  @Override public void unload(){  this.mDrawable=null;}  }
class C{  public static CCShakyTiles3D action(int range,boolean shakeZ,ccGridSize gridSize,float d){  return new CCShakyTiles3D(range,shakeZ,gridSize,d);}  }
class C{  public boolean isStaticTargetDiscoveryEnabled(){  return staticTargetDiscoveryEnabled;}  }
class C{  public XMLException(String systemID,int lineNr,Exception e){  this(systemID,lineNr,e,"Nested Exception",true);}  }
class C{  public String selectHeaderAccept(String[] accepts){  if (accepts.length == 0) {    return null;  }  if (StringUtil.containsIgnoreCase(accepts,"application/json")) {    return "application/json";  }  return StringUtil.join(accepts,",");}  }
class C{  private void loadNames() throws IOException {  mNames=new PrereadNames(mDirectory,mRegion,false);  if (mIndexFile.getVersion() >= IndexFile.SEPARATE_CHECKSUM_VERSION && mRegion.getStart() == 0 && mRegion.getEnd() == mIndexFile.getNumberSequences()) {    if (mNames.calcChecksum() != mIndexFile.getNameChecksum()) {      throw new CorruptSdfException("Sequence names failed checksum - SDF may be corrupt: \"" + mDirectory + "\"");    } else {      Diagnostic.developerLog("Sequence names passed checksum");    }  }}  }
class C{  public static void main(final String[] args){  try {    if (args.length > 0) {      int i=0;      String username=null;      String password=null;      String character=null;      String host=null;      String port=null;      while (i != args.length) {        if (args[i].equals("-u")) {          username=args[i + 1];        } else         if (args[i].equals("-p")) {          password=args[i + 1];        } else         if (args[i].equals("-c")) {          character=args[i + 1];        } else         if (args[i].equals("-h")) {          host=args[i + 1];        } else         if (args[i].equals("-P")) {          port=args[i + 1];        }        i++;      }      if ((username != null) && (password != null) && (character != null)&& (host != null)&& (port != null)) {        final ShouterMain shouter=new ShouterMain(host,username,password,character,port);        shouter.script();        return;      }    }    System.out.println("Stendhal textClient");    System.out.println();    System.out.println("  games.stendhal.bot.shouter.Shouter -u username -p pass -h host -P port -c character");    System.out.println();    System.out.println("Required parameters");    StandardClientFramework.printConnectionParameters();  } catch (  final Exception e) {    e.printStackTrace(System.err);    System.exit(1);  }}  }
class C{  private Object readResolve(){  return INSTANCE;}  }
class C{  public static void registerPermissionProvider(ITurtlePermissionProvider handler){  findCC();  if (computerCraft_registerPermissionProvider != null) {    try {      computerCraft_registerPermissionProvider.invoke(null,handler);    } catch (    Exception e) {    }  }}  }
class C{  public boolean isPipeline(){  return material.isPipeline();}  }
class C{  private synchronized static void log(int logType,String tag,String message,int methodCount){  if (settings.logLevel == LogLevel.NONE) {    return;  }  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  private String processPort(String port){  if (ValidationUtil.isFunction(port)) {    port=FunctionHandler.executeFunction(port,variables);  }  return port;}  }
class C{  public boolean isAddressedModePossible(){  return false;}  }
class C{  private void initializeSourceCodeMap(String adaptedContent){  sourceCodeWithLine=new LinkedHashMap<>();  int lineNumber=1;  StringReader sr=new StringReader(adaptedContent);  BufferedReader br=new BufferedReader(sr);  String line;  try {    while ((line=br.readLine()) != null) {      sourceCodeWithLine.put(lineNumber,line);      lineNumber++;    }  } catch (  IOException ex) {    LOGGER.error("Error occured while initialize source code map " + ex.getMessage());  }}  }
class C{  public static void verification(Context context,String productKey,String vendorKey,String mobile,String mail,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  if (!TextUtils.isEmpty(productKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.PRODUCT_KEY,productKey));  }  if (!TextUtils.isEmpty(vendorKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.VENDOR_KEY,vendorKey));  }  try {    String jsonParams="";    JSONStringer jsonStringer=new JSONStringer().object();    if (!TextUtils.isEmpty(mobile)) {      jsonStringer.key(ApiKey.MOBILE).value(mobile);    } else {      jsonStringer.key(ApiKey.MAIL).value(mail);    }    jsonParams=jsonStringer.endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    post(context,getApiServerUrl() + USER_VERIFICATION,headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){  for (int i=0; i < mYAxis.mEntryCount; i++) {    String text=mYAxis.getFormattedLabel(i);    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;    c.drawText(text,fixedPosition,positions[i * 2 + 1] + offset,mAxisLabelPaint);  }}  }
class C{  public static double alphaMSquared(final int m){switch (m) {case 1:case 2:case 4:case 8:    throw new IllegalArgumentException("'m' cannot be less than 16 (" + m + " < 16).");case 16:  return 0.673 * m * m;case 32:return 0.697 * m * m;case 64:return 0.709 * m * m;default :return (0.7213 / (1.0 + 1.079 / m)) * m * m;}}  }
class C{  @Override public String toString(){  return getClass().getName() + "[threadGroup=" + threadGroup.getName()+ "]";}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("p_IMAPHost"))     p_IMAPHost=((String)para[i].getParameter()); else     if (name.equals("p_IMAPUser"))     p_IMAPUser=((String)para[i].getParameter()); else     if (name.equals("p_IMAPPwd"))     p_IMAPPwd=((String)para[i].getParameter()); else     if (name.equals("p_RequestFolder"))     p_RequestFolder=((String)para[i].getParameter()); else     if (name.equals("p_InboxFolder"))     p_InboxFolder=((String)para[i].getParameter()); else     if (name.equals("p_ErrorFolder"))     p_ErrorFolder=((String)para[i].getParameter()); else     if (name.equals("C_BPartner_ID"))     C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_User_ID"))     AD_User_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_Role_ID"))     AD_Role_ID=para[i].getParameterAsInt(); else     if (name.equals("SalesRep_ID"))     SalesRep_ID=para[i].getParameterAsInt(); else     if (name.equals("R_RequestType_ID"))     R_RequestType_ID=para[i].getParameterAsInt(); else     if (name.equals("p_DefaultPriority"))     p_DefaultPriority=((String)para[i].getParameter()); else     if (name.equals("p_DefaultConfidentiality"))     p_DefaultConfidentiality=((String)para[i].getParameter()); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public void addToFilters(Filter filter){  if (filters == null) {    filters=new HashMap();  }  filters.put(filter.getName(),filter);}  }
class C{  public DeleteRequest(final String path){  super(new LwM2mPath(path));}  }
class C{  public static Text intern(CharSequence csq){  Text txt=INTERN.get(csq);  if (txt != null)   return txt;  txt=Text.valueOf(csq);  Text previous=INTERN.putIfAbsent(txt,txt);  return previous == null ? txt : previous;}  }
class C{  public int valueSparseInt(int indexOfIndex) throws Exception {  return Integer.parseInt(actualValue(indexOfIndex));}  }
class C{  static final int nextSecondarySeed(){  int r;  Thread t=Thread.currentThread();  if ((r=UNSAFE.getInt(t,SECONDARY)) != 0) {    r^=r << 13;    r^=r >>> 17;    r^=r << 5;  } else   if ((r=java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)   r=1;  UNSAFE.putInt(t,SECONDARY,r);  return r;}  }
class C{  @SuppressWarnings("unchecked") private static void addGetter(ClassNode classNode,String fieldName,String fieldNameForMethods,String fieldJavaType){  String getterSignature="()" + fieldJavaType;  MethodNode getterNode=new MethodNode(Opcodes.ACC_PUBLIC,(fieldJavaType.equals(typeIdentifierBoolean) ? "is" : "get") + fieldNameForMethods,getterSignature,null,null);  getterNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  getterNode.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName,fieldJavaType));  int returnOpCode;  if (fieldJavaType.equals(Character.toString(typeIdentifierBoolean)) || fieldJavaType.equals(Character.toString(typeIdentifierByte)) || fieldJavaType.equals(Character.toString(typeIdentifierChar))|| fieldJavaType.equals(Character.toString(typeIdentifierShort))|| fieldJavaType.equals(Character.toString(typeIdentifierInt))) {    returnOpCode=Opcodes.IRETURN;  } else   if (fieldJavaType.equals(Character.toString(typeIdentifierLong))) {    returnOpCode=Opcodes.LRETURN;  } else   if (fieldJavaType.equals(Character.toString(typeIdentifierFloat))) {    returnOpCode=Opcodes.FRETURN;  } else   if (fieldJavaType.equals(Character.toString(typeIdentifierDouble))) {    returnOpCode=Opcodes.DRETURN;  } else {    returnOpCode=Opcodes.ARETURN;  }  getterNode.instructions.add(new InsnNode(returnOpCode));  classNode.methods.add(getterNode);}  }
class C{  public boolean isUser(){  return type == Type.USER;}  }
class C{  public ChartProgressEvent(Object source,JFreeChart chart,int type,int percent){  super(source);  this.chart=chart;  this.type=type;  this.percent=percent;}  }
class C{  @Override public double calculateDistance(double[] x1,double[] x2){  return Math.sqrt((norm2(x1,x2) / sigma) + (shift * shift));}  }
class C{  public boolean isFromDeplDescr(){  return fromDeplDescr;}  }
class C{  public static boolean moveFileOrDirectory(String source,String target){  File sourceFile=new File(source);  File destinationDir=null;  if (sourceFile.exists()) {    log.info("Moving " + source + " to "+ target);    FileName fm=new FileName(target,'/','.');    if (fm.filename().length() <= 0) {      log.error("No file name for hot start pop file given!");      return false;    }    destinationDir=new File(fm.path());    if (!destinationDir.exists()) {      log.info("Target directory doesn't exsit and will created ...");      destinationDir.mkdirs();      log.info("... done!");    }    boolean success=sourceFile.renameTo(new File(target));    return success;  }  log.error("File not found: " + source);  return false;}  }
class C{  public static Automaton reverse(Automaton a){  return reverse(a,null);}  }
class C{  public EsriPointList(int initialCapacity,int capacityIncrement){  super(initialCapacity);}  }
class C{  DockWrapper createDockWrapper(JComponent comp){  DockWrapper dw=new DockWrapper(this);  setWrapper(comp,dw);  dw.addChild(comp);  dockSomewhere(comp);  return dw;}  }
class C{  @CanIgnoreReturnValue public Builder<C> add(Range<C> range){  if (range.isEmpty()) {    throw new IllegalArgumentException("range must not be empty, but was " + range);  } else   if (!rangeSet.complement().encloses(range)) {    for (    Range<C> currentRange : rangeSet.asRanges()) {      checkArgument(!currentRange.isConnected(range) || currentRange.intersection(range).isEmpty(),"Ranges may not overlap, but received %s and %s",currentRange,range);    }    throw new AssertionError("should have thrown an IAE above");  }  rangeSet.add(range);  return this;}  }
class C{  public String vertexId(){  return id;}  }
class C{  public BreakdownChartPanelSingle(String title,String unitName,ChangingPieDatasetWithTTG dataset,ChartLocker locker){  super(title,unitName);  this.dataset=dataset;  this.locker=locker;  addChart();}  }
class C{  private final void count(List<MatchingDocs> matchingDocs) throws IOException {  MultiDocValues.OrdinalMap ordinalMap;  if (dv instanceof MultiDocValues.MultiSortedSetDocValues && matchingDocs.size() > 1) {    ordinalMap=((MultiSortedSetDocValues)dv).mapping;  } else {    ordinalMap=null;  }  IndexReader origReader=state.getOrigReader();  for (  MatchingDocs hits : matchingDocs) {    LeafReader reader=hits.context.reader();    if (ReaderUtil.getTopLevelContext(hits.context).reader() != origReader) {      throw new IllegalStateException("the SortedSetDocValuesReaderState provided to this class does not match the reader being searched; you must create a new SortedSetDocValuesReaderState every time you open a new IndexReader");    }    SortedSetDocValues segValues=reader.getSortedSetDocValues(field);    if (segValues == null) {      continue;    }    DocIdSetIterator it=ConjunctionDISI.intersectIterators(Arrays.asList(hits.bits.iterator(),segValues));    if (ordinalMap != null) {      final int segOrd=hits.context.ord;      final LongValues ordMap=ordinalMap.getGlobalOrds(segOrd);      int numSegOrds=(int)segValues.getValueCount();      if (hits.totalHits < numSegOrds / 10) {        for (int doc=it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=it.nextDoc()) {          int term=(int)segValues.nextOrd();          while (term != SortedSetDocValues.NO_MORE_ORDS) {            counts[(int)ordMap.get(term)]++;            term=(int)segValues.nextOrd();          }        }      } else {        final int[] segCounts=new int[numSegOrds];        for (int doc=it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=it.nextDoc()) {          int term=(int)segValues.nextOrd();          while (term != SortedSetDocValues.NO_MORE_ORDS) {            segCounts[term]++;            term=(int)segValues.nextOrd();          }        }        for (int ord=0; ord < numSegOrds; ord++) {          int count=segCounts[ord];          if (count != 0) {            counts[(int)ordMap.get(ord)]+=count;          }        }      }    } else {      for (int doc=it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc=it.nextDoc()) {        int term=(int)segValues.nextOrd();        while (term != SortedSetDocValues.NO_MORE_ORDS) {          counts[term]++;          term=(int)segValues.nextOrd();        }      }    }  }}  }
class C{  private void createOrUpdateDiskStates(EBSVolumesEnumerationSubStage next){  List<DiskState> diskStatesToBeCreated=new ArrayList<DiskState>();  this.aws.volumesToBeCreated.forEach(null);  diskStatesToBeCreated.forEach(null);  this.service.logFine("Creating %d disks",this.aws.volumesToBeCreated.size());  List<DiskState> diskStatesToBeUpdated=new ArrayList<DiskState>();  this.aws.disksToBeUpdated.forEach(null);  diskStatesToBeUpdated.forEach(null);  this.service.logFine("Updating %d disks",this.aws.disksToBeUpdated.size());  OperationJoin.JoinedCompletionHandler joinCompletion=null;  OperationJoin joinOp=OperationJoin.create(this.aws.enumerationOperations);  joinOp.setCompletion(joinCompletion);  joinOp.sendWith(this.service.getHost());}  }
class C{  public Sech(){  super("sech",1);}  }
class C{  public static final SSLContext createSSLContext(final String protocol,final String provider,final KeyManager[] keyManagers,final TrustManager[] trustManagers){  try {    SSLContext context=SSLContext.getInstance(protocol,provider);    context.init(keyManagers,trustManagers,new SecureRandom());    return context;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public ListSelectionListener createListSelectionListener(JFileChooser fc){  return super.createListSelectionListener(fc);}  }
class C{  public static boolean isOnZeroRatedNetwork(Context context,Config config){  if (config.getZeroRatingConfig().isEnabled()) {    TelephonyManager manager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);    String carrierId=manager.getNetworkOperator();    logger.debug(String.format("Carrier id: %s",carrierId));    List<String> zeroRatedCarriers=config.getZeroRatingConfig().getCarriers();    for (    String carrier : zeroRatedCarriers) {      if (carrier.equalsIgnoreCase(carrierId)) {        logger.debug(String.format("Is on zero rated carrier (ID): %s",carrierId));        return true;      }    }  }  return false;}  }
class C{  public boolean matchInetNetwork(String hostIP){  InetAddress ip;  try {    ip=dnsServer.getByName(hostIP);  } catch (  UnknownHostException uhe) {    log("Cannot resolve address for " + hostIP + ": "+ uhe.getMessage());    return false;  }  return matchInetNetwork(ip);}  }
class C{  @Override public int hashCode(){  long value=17;  value+=37 * value + Double.doubleToLongBits(Math.abs(x));  value+=37 * value + Double.doubleToLongBits(Math.abs(y));  return (int)(value ^ (value >>> 32));}  }
class C{  public void addDependency(Dependency dependency){  if (_dependencies != null)   _dependencies.add(dependency);}  }
class C{  protected void assertExists(File file){  assertTrue("File '" + file.getAbsolutePath() + "' does not exist",file.exists());}  }
class C{  public void dataStatusChanged(DataStatusEvent e){  int col=e.getChangedColumn();  log.config("(" + m_mTab + ") Col="+ col+ ": "+ e.toString());  GridField mField=m_mTab.getField(col);  if (mField != null && (mField.getCallout().length() > 0 || m_mTab.hasDependants(mField.getColumnName()))) {    String msg=m_mTab.processFieldChange(mField);    if (msg.length() > 0)     ADialog.error(m_WindowNo,this,msg);  }  if (mField != null && mField.isLookup()) {    Lookup lookup=(Lookup)mField.getLookup();    if (lookup != null && lookup instanceof MLookup) {      MLookup mlookup=(MLookup)lookup;      Object value=mField.getValue();      if (mlookup.isAlert() && value != null && value instanceof Integer) {        String alert=MMemo.getAlerts(Env.getCtx(),mlookup.getTableName(),(Integer)value);        if (!Util.isEmpty(alert)) {          VAlert memo=new VAlert(Env.getWindow(m_WindowNo));          memo.setAlwaysOnTop(true);          memo.setText(alert);          AEnv.showCenterScreen(memo);          memo=null;        }      }    }  }  dynamicDisplay(col);}  }
class C{  public ToStringBuilder append(String fieldName,boolean[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  protected List<Position> computeVerticalSegmentPositions(Globe globe,Vec4 basePoint,Vec4 segment,double verticalLength){  Vec4 normal=globe.computeSurfaceNormalAtPoint(basePoint);  Vec4 perpendicular=normal.cross3(segment);  perpendicular=perpendicular.normalize3().multiply3(verticalLength / 2.0);  Vec4 pA=basePoint.add3(perpendicular);  Vec4 pB=basePoint.subtract3(perpendicular);  return Arrays.asList(globe.computePositionFromPoint(pA),globe.computePositionFromPoint(pB));}  }
class C{  @Override protected void autoAdjustRange(){  Plot plot=getPlot();  if (plot == null) {    return;  }  if (plot instanceof ValueAxisPlot) {    ValueAxisPlot vap=(ValueAxisPlot)plot;    Range r=vap.getDataRange(this);    if (r == null) {      r=getDefaultAutoRange();    }    double upper=r.getUpperBound();    double lower=r.getLowerBound();    if (this.rangeType == RangeType.POSITIVE) {      lower=Math.max(0.0,lower);      upper=Math.max(0.0,upper);    } else     if (this.rangeType == RangeType.NEGATIVE) {      lower=Math.min(0.0,lower);      upper=Math.min(0.0,upper);    }    if (getAutoRangeIncludesZero()) {      lower=Math.min(lower,0.0);      upper=Math.max(upper,0.0);    }    double range=upper - lower;    double fixedAutoRange=getFixedAutoRange();    if (fixedAutoRange > 0.0) {      lower=upper - fixedAutoRange;    } else {      double minRange=getAutoRangeMinimumSize();      if (range < minRange) {        double expand=(minRange - range) / 2;        upper=upper + expand;        lower=lower - expand;        if (lower == upper) {          double adjust=Math.abs(lower) / 10.0;          lower=lower - adjust;          upper=upper + adjust;        }        if (this.rangeType == RangeType.POSITIVE) {          if (lower < 0.0) {            upper=upper - lower;            lower=0.0;          }        } else         if (this.rangeType == RangeType.NEGATIVE) {          if (upper > 0.0) {            lower=lower - upper;            upper=0.0;          }        }      }      if (getAutoRangeStickyZero()) {        if (upper <= 0.0) {          upper=Math.min(0.0,upper + getUpperMargin() * range);        } else {          upper=upper + getUpperMargin() * range;        }        if (lower >= 0.0) {          lower=Math.max(0.0,lower - getLowerMargin() * range);        } else {          lower=lower - getLowerMargin() * range;        }      } else {        upper=upper + getUpperMargin() * range;        lower=lower - getLowerMargin() * range;      }    }    setRange(new Range(lower,upper),false,false);  }}  }
