class C{  public int sizeMapArray(){  int x=0;  for (  Segment<V> s : segments) {    x+=s.entries.length;  }  return x;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:09.015 -0500",hash_original_method="7E9F59302235A7D0B845D6D175C9DBE6",hash_generated_method="60C99D34C8ECCB1BE065D8D35CAF2D6D") public static String[] forLocale(Locale locale){  return forCountryCode(locale.getCountry());}  }
class C{  public void pushCommand(CMD cmdID,int param){  String cmd=createCommand(cmdID,param);  if (cmd != null)   cmdQueue.add(cmd);}  }
class C{  private SearchLoadAndWriteProcessor(){  resetResults();  this.pendingResponders.clear();  this.attemptedLocalLoad=false;  this.netSearchDone=false;  this.isSerialized=false;  this.result=null;  this.key=null;  this.requestInProgress=false;  this.netWriteSucceeded=false;  this.remoteGetInProgress=false;  this.responseQueue=null;}  }
class C{  public Request createGetRequest(final String string) throws IOException {  return this.createGetRequest(string,null);}  }
class C{  public Album(PlayMusicManager playMusicManager){  super(playMusicManager);}  }
class C{  public static String parseCompiled(CharSequence input){  return EmojiParser.convertToCheatCode(input.toString());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public UsageException(final Throwable cause){  super(cause);}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 184) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public AttributeListPanel(){  m_Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  m_Table.setColumnSelectionAllowed(false);  m_Table.setPreferredScrollableViewportSize(new Dimension(250,150));  setLayout(new BorderLayout());  add(new JScrollPane(m_Table),BorderLayout.CENTER);}  }
class C{  public boolean isOrgAccess(int AD_Org_ID,boolean rw){  if (isAccessAllOrgs())   return true;  if (AD_Org_ID == 0 && !rw)   return true;  loadOrgAccess(false);  for (int i=0; i < m_orgAccess.length; i++) {    if (m_orgAccess[i].AD_Org_ID == AD_Org_ID) {      if (!rw)       return true;      if (!m_orgAccess[i].readOnly)       return true;      return false;    }  }  return false;}  }
class C{  public int loadOrder(){  return 50;}  }
class C{  @SuppressFBWarnings(value="SF_SWITCH_FALLTHROUGH") public OrderedCollection<PortChangeEvent> handlePortStatusMessage(OFPortStatus ps){  if (ps == null) {    throw new NullPointerException("OFPortStatus message must " + "not be null");  }  lock.writeLock().lock();  try {    OFPortDesc port=ps.getDesc();    OFPortReason reason=ps.getReason();    if (reason == null) {      throw new IllegalArgumentException("Unknown PortStatus " + "reason code " + ps.getReason());    }    if (log.isDebugEnabled()) {      log.debug("Handling OFPortStatus: {} for {}",reason,String.format("%s (%d)",port.getName(),port.getPortNo().getPortNumber()));    }    if (reason == OFPortReason.DELETE)     return handlePortStatusDelete(port);    Map<OFPort,OFPortDesc> newPortByNumber=new HashMap<OFPort,OFPortDesc>(portsByNumber);    OrderedCollection<PortChangeEvent> events=getSinglePortChanges(port);    for (    PortChangeEvent e : events) {switch (e.type) {case DELETE:        newPortByNumber.remove(e.port.getPortNo());      break;case ADD:    if (reason != OFPortReason.ADD) {    }case DOWN:case OTHER_UPDATE:case UP:  newPortByNumber.put(e.port.getPortNo(),e.port);break;}}updatePortsWithNewPortsByNumber(newPortByNumber);return events;}  finally {lock.writeLock().unlock();}}  }
class C{  @Override public void emitTuple(Object tuple){  outputPort.emit(tuple);}  }
class C{  public LinkedHashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor,true);}  }
class C{  public boolean wasReleased(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return false;  }  return mb.wasReleased();}  }
class C{  public StringEncoderComparator(StringEncoder stringEncoder){  this.stringEncoder=stringEncoder;}  }
class C{  protected void flushCache() throws IOException {  if (cachePosition > 0) {    byte chunkHeader[]=(Integer.toHexString(cachePosition) + "\r\n").getBytes("US-ASCII");    stream.write(chunkHeader,0,chunkHeader.length);    stream.write(cache,0,cachePosition);    stream.write(ENDCHUNK,0,ENDCHUNK.length);    cachePosition=0;  }}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public synchronized void rewind(){  iterator=null;}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  private static String checkHashes(String markdownString){  if (TextUtils.isEmpty(markdownString) || !markdownString.contains("#")) {    return markdownString;  }  return mHashPattern.matcher(markdownString).replaceAll("\\\\$0");}  }
class C{  public void deletePrivacyList(String listName){  this.getItemLists().remove(listName);  if (this.getDefaultName() != null && listName.equals(this.getDefaultName())) {    this.setDefaultName(null);  }}  }
class C{  protected synchronized ConnectionFactory lookupConnectionFactoryFromJNDI(String uri) throws NamingException {  final InitialContext jndiContext=getInitialContext();  return (ConnectionFactory)jndiContext.lookup(uri);}  }
class C{  public static void xmlClassExistent(String path,Class<?> aClass){  throw new XmlMappingClassExistException(MSG.INSTANCE.message(xmlMappingClassExistException1,aClass.getSimpleName(),path));}  }
class C{  public Key(InputStream in,KeyType type) throws IOException {  super(in,type);}  }
class C{  public int delete(){  log.info("");  StringBuffer sql=new StringBuffer("DELETE FROM AD_Preference WHERE ");  sql.append("AD_Client_ID=").append(cbClient.isSelected() ? m_AD_Client_ID : 0);  sql.append(" AND AD_Org_ID=").append(cbOrg.isSelected() ? m_AD_Org_ID : 0);  if (cbUser.isSelected())   sql.append(" AND AD_User_ID=").append(m_AD_User_ID); else   sql.append(" AND AD_User_ID IS NULL");  if (cbWindow.isSelected())   sql.append(" AND AD_Window_ID=").append(m_AD_Window_ID); else   sql.append(" AND AD_Window_ID IS NULL");  sql.append(" AND Attribute='").append(m_Attribute).append("'");  log.fine(sql.toString());  int no=DB.executeUpdate(sql.toString(),null);  if (no > 0)   Env.setContext(m_ctx,getContextKey(),(String)null);  return no;}  }
class C{  public void writeOptions(PrintWriter fout){  fout.println("OPTION VALUES:");  fout.println("==============");  fout.println("Model directory: " + modelDir);  fout.println("Model file: " + modelFile);  fout.println("Option file: " + optionFile);  fout.println("Training log file: " + trainLogFile + " (this one)");  fout.println("Training data file: " + trainDataFile);  fout.println("Testing data file: " + testDataFile);  fout.println("Number of training examples " + Integer.toString(numTrainExps));  fout.println("Number of testing examples " + Integer.toString(numTestExps));  fout.println("Number of class labels: " + Integer.toString(numLabels));  fout.println("Number of context predicates: " + Integer.toString(numCps));  fout.println("Number of features: " + Integer.toString(numFeatures));  fout.println("Rare threshold for context predicates: " + Integer.toString(cpRareThreshold));  fout.println("Rare threshold for features: " + Integer.toString(fRareThreshold));  fout.println("Number of training iterations: " + Integer.toString(numIterations));  fout.println("Initial value of feature weights: " + Double.toString(initLambdaVal));  fout.println("Sigma square: " + Double.toString(sigmaSquare));  fout.println("Epsilon for convergence: " + Double.toString(epsForConvergence));  fout.println("Number of corrections in L-BFGS: " + Integer.toString(mForHessian));  if (evaluateDuringTraining) {    fout.println("Evaluation during training: true");  } else {    fout.println("Evaluation during training: false");  }  if (saveBestModel) {    fout.println("Save the best model towards testing data: true");  } else {    fout.println("Save the best model towards testing data: false");  }  fout.println();}  }
class C{  public AlternativeName(boolean which,byte[] encoding) throws IOException {  super(encoding);  this.which=which;  this.alternativeNames=(GeneralNames)GeneralNames.ASN1.decode(encoding);}  }
class C{  private static boolean equalsHandlesNulls(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public DoubleMatrix(DoubleMatrix dm){  rows=dm.rows;  cols=dm.cols;  mtrx=new double[rows][cols];  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      mtrx[i][j]=dm.mtrx[i][j];    }  }}  }
class C{  public static Object internalExecute(File artemisHome,File artemisInstance,String[] args) throws Exception {  Action action=builder(artemisInstance).build().parse(args);  action.setHomeValues(artemisHome,artemisInstance);  if (action.isVerbose()) {    System.out.print("Executing " + action.getClass().getName() + " ");    for (    String arg : args) {      System.out.print(arg + " ");    }    System.out.println();    System.out.println("Home::" + action.getBrokerHome() + ", Instance::"+ action.getBrokerInstance());  }  return action.execute(ActionContext.system());}  }
class C{  private void assertIntervalQuery(String field,String... intervals){  assertIntervalQuery(field,"*:*",-1,intervals);}  }
class C{  protected PooledConnectionHandler createConnectionHandler(){  return new PooledConnectionHandler(connection,this);}  }
class C{  public void clearSelection(){  selectionModel.clear();}  }
class C{  public static List<String> splitText(String text){  int startLine=0;  int i=0;  int n=text.length();  ArrayList<String> rc=new ArrayList<String>();  while (i < n) {switch (text.charAt(i)) {case '\n':      i++;    if (i < n && text.charAt(i) == '\r') {      i++;    }  rc.add(text.substring(startLine,i));startLine=i;break;case '\r':i++;if (i < n && text.charAt(i) == '\n') {i++;}rc.add(text.substring(startLine,i));startLine=i;break;default :i++;}}if (startLine == text.length()) {rc.add("");} else {rc.add(text.substring(startLine,i));}return rc;}  }
class C{  public void addToken(Segment segment,int start,int end,int tokenType,int startOffset){switch (tokenType) {case Token.IDENTIFIER:    int value=wordsToHighlight.get(segment,start,end);  if (value != -1)   tokenType=value;break;case Token.WHITESPACE:case Token.SEPARATOR:case Token.OPERATOR:case Token.ERROR_IDENTIFIER:case Token.ERROR_NUMBER_FORMAT:case Token.ERROR_STRING_DOUBLE:case Token.ERROR_CHAR:case Token.COMMENT_EOL:case Token.COMMENT_MULTILINE:case Token.LITERAL_BOOLEAN:case Token.LITERAL_NUMBER_DECIMAL_INT:case Token.LITERAL_NUMBER_FLOAT:case Token.LITERAL_NUMBER_HEXADECIMAL:case Token.LITERAL_STRING_DOUBLE_QUOTE:case Token.LITERAL_CHAR:break;default :new Exception("Unknown tokenType: '" + tokenType + "'").printStackTrace();tokenType=Token.IDENTIFIER;break;}super.addToken(segment,start,end,tokenType,startOffset);}  }
class C{  void doInit(){  mode=INIT;  state=FIRSTCV16;  writeCV16(1);}  }
class C{  public static double sampleKurtosis(int size,double moment4,double sampleVariance){  int n=size;  double s2=sampleVariance;  double m4=moment4 * n;  return m4 * n * (n + 1) / ((n - 1) * (n - 2) * (n - 3)* s2* s2) - 3.0 * (n - 1) * (n - 1) / ((n - 2) * (n - 3));}  }
class C{  public void postJoin(BaggageImpl current){  for (  ByteString bag : current.keys(PT_ACTIVE_NAMESPACE)) {    Set<ByteString> entries=current.get(PT_ACTIVE_NAMESPACE,bag);    if (entries.size() > 1) {      ByteString merged=merge(entries);      if (merged == null) {        current.remove(PT_ACTIVE_NAMESPACE,bag);      } else {        current.replace(PT_ACTIVE_NAMESPACE,bag,merged);      }    }  }}  }
class C{  @Override public void activate(){  SlingScriptHelper scriptHelper=getSlingScriptHelper();  RecaptchaService recaptchaService=scriptHelper.getService(RecaptchaService.class);  if (recaptchaService == null) {    show=false;  } else {    resource=getResource();    ValueMap properties=resource.adaptTo(ValueMap.class);    String sizeProperty=properties.get(SIZE_PROPERTY,String.class);    String themeProperty=properties.get(THEME_PROPERTY,String.class);    String typeProperty=properties.get(TYPE_PROPERTY,String.class);    boolean enableProperty=properties.get(ENABLE_PROPERTY,true);    boolean enableService=recaptchaService.getEnabled();    siteKey=recaptchaService.getSiteKey();    if (enableService && enableProperty && StringUtils.isNotBlank(siteKey)) {      show=true;      if (THEME_DARK.equals(themeProperty)) {        theme=themeProperty;      }      if (TYPE_AUDIO.equals(typeProperty)) {        type=typeProperty;      }      if (SIZE_COMPACT.equals(sizeProperty)) {        size=sizeProperty;      }    } else {      show=false;    }  }}  }
class C{  protected boolean matchArray(int r[],int rpos,int rend,char d[],int dpos){  if (d.length - dpos < rend - rpos) {    return (false);  }  for (int i=rpos; i < rend; i++) {    if (r[i] != d[dpos++]) {      return (false);    }  }  return (true);}  }
class C{  void startRetrievingLocation(final Context context){  locationManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  try {    currentBestLocation=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);    Location gpsLocation=locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);    if (isBetterLocation(gpsLocation)) {      currentBestLocation=gpsLocation;    }  } catch (  SecurityException e) {    log.warning("SecurityException when retrieving the last known " + "location: " + e.getMessage());  }catch (  IllegalArgumentException e) {    log.warning("IllegalArgumentException when retrieving the last known " + "location: " + e.getMessage());  }  locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,LOCATION_PROVIDER_UPDATE_RATE,LOCATION_PROVIDER_UPDATE_DISTANCE,locationListener);  locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,LOCATION_PROVIDER_UPDATE_RATE,LOCATION_PROVIDER_UPDATE_DISTANCE,locationListener);}  }
class C{  private boolean isCompactionPossible(){  return getParent().isCompactionPossible();}  }
class C{  Map.Entry<K,V> doRemoveLastEntry(){  for (; ; ) {    Node<K,V> b=findPredecessorOfLast();    Node<K,V> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      K key=n.key;      Comparable<? super K> ck=comparable(key);      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(ck); else {        findPredecessor(ck);        if (head.right == null)         tryReduceLevel();      }      return new AbstractMap.SimpleImmutableEntry<K,V>(key,(V)v);    }  }}  }
class C{  public String outputRamlToString(){  if (this.raml == null) {    return "";  }  RamlModelEmitter ramlEmitter=RamlModelFactoryOfFactories.createRamlModelFactory().createRamlModelEmitter();  return postProcessRaml(ramlEmitter.dump(this.raml));}  }
class C{  protected void drawInterior(DrawContext dc,OrderedLabel olbl){  GL2 gl=dc.getGL().getGL2();  double width=this.bounds.getWidth();  double height=this.bounds.getHeight();  int x=olbl.screenPoint.x;  int y=olbl.screenPoint.y;  int xAligned=x;  if (AVKey.CENTER.equals(textAlign))   xAligned=x - (int)(width / 2); else   if (AVKey.RIGHT.equals(textAlign))   xAligned=x - (int)width;  int yAligned=(int)(y - height);  Insets insets=this.getInsets();  xAligned-=insets.left;  width=width + insets.left + insets.right;  yAligned-=insets.bottom;  height=height + insets.bottom + insets.top;  if (!dc.isPickingMode()) {    Color color=this.computeBackgroundColor(this.getMaterial().getDiffuse());    gl.glColor4ub((byte)color.getRed(),(byte)color.getGreen(),(byte)color.getBlue(),(byte)(this.interiorOpacity < 1 ? (int)(this.interiorOpacity * 255 + 0.5) : 255));  }  try {    gl.glPushMatrix();    gl.glTranslated(xAligned,yAligned,0);    gl.glScaled(width,height,1.0);    dc.drawUnitQuad();  }  finally {    gl.glPopMatrix();  }}  }
class C{  public FileAuthenticationProvider() throws GuacamoleException {  environment=new LocalEnvironment();}  }
class C{  protected boolean isInitialized(){  return (getUnsortedModel() != null);}  }
class C{  public static View createLoggedView(final ICallResolverTarget target,final List<IndirectCall> indirectCallAddresses,final Map<BigInteger,Set<ResolvedFunction>> resolvedAddresses){  final View view=target.createView();  final Map<Function,FunctionNode> nodes=new HashMap<Function,FunctionNode>();  for (  final Entry<BigInteger,Set<ResolvedFunction>> element : resolvedAddresses.entrySet()) {    final BigInteger start=element.getKey();    final Set<ResolvedFunction> targets=element.getValue();    final IndirectCall call=IndirectCallResolver.findIndirectCall(target.getDebugger(),indirectCallAddresses,start);    FunctionNode sourceNode=nodes.get(call.getFunction());    if (sourceNode == null) {      sourceNode=view.createFunctionNode(call.getFunction());      nodes.put(call.getFunction(),sourceNode);    }    for (    final ResolvedFunction targetFunction : targets) {      final Function function=targetFunction.getFunction();      final MemoryModule memoryModule=targetFunction.getMemoryModule();      if (function != null) {        FunctionNode targetNode=nodes.get(function);        if (targetNode == null) {          targetNode=view.createFunctionNode(function);          nodes.put(function,targetNode);        }        try {          sourceNode.appendComment(start.toString(16).toUpperCase() + " -> " + function.getAddress().toHexString().toUpperCase());        } catch (        CouldntSaveDataException|CouldntLoadDataException e) {          e.printStackTrace();        }        view.createEdge(sourceNode,targetNode,EdgeType.JumpUnconditional);      } else       if (memoryModule != null) {        final String targetString=String.format("%s!%s",targetFunction.getMemoryModule().getName(),targetFunction.getAddress().toHexString().toUpperCase());        try {          sourceNode.appendComment(start.toString(16).toUpperCase() + " -> " + targetString);        } catch (        CouldntSaveDataException|CouldntLoadDataException e) {          e.printStackTrace();        }      } else {        final String targetString="???!" + targetFunction.getAddress().toHexString().toUpperCase();        try {          sourceNode.appendComment(start.toString(16).toUpperCase() + " -> " + targetString);        } catch (        CouldntSaveDataException|CouldntLoadDataException e) {          e.printStackTrace();        }      }    }  }  for (  final Module module : target.getModules()) {    final Callgraph callgraph=module.getCallgraph();    for (    final FunctionEdge edge : callgraph.getEdges()) {      final FunctionNode source=nodes.get(edge.getSource().getFunction());      final FunctionNode targetNode=nodes.get(edge.getTarget().getFunction());      if ((source != null) && (targetNode != null)) {        view.createEdge(source,targetNode,EdgeType.JumpUnconditional);      }    }  }  return view;}  }
class C{  private void validatePeerStatus(DataPageMain dpMain,DataPageMain peerMain) throws IOException {  if (dpMain._leaf != peerMain._leaf) {    throw new IllegalStateException(withErrorContext("Mismatched peer status " + dpMain._leaf + " "+ peerMain._leaf));  }  if (!dpMain._leaf) {    if ((dpMain._parentPageNumber != null) && (peerMain._parentPageNumber != null) && ((int)dpMain._parentPageNumber != (int)peerMain._parentPageNumber)) {      throw new IllegalStateException(withErrorContext("Mismatched node parents " + dpMain._parentPageNumber + " "+ peerMain._parentPageNumber));    }  }}  }
class C{  public final boolean isMaximized(){  return rootView != null && rootView.isMaximized();}  }
class C{  @VisibleForTesting int findConnection(Connection conn){  if (mConnections.isEmpty()) {    return -1;  }  int bestGuess=findPositionForConnection(conn);  if (bestGuess >= mConnections.size()) {    return -1;  }  int yPos=conn.getPosition().y;  int pointerMin=bestGuess;  int pointerMax=bestGuess + 1;  while (pointerMin >= 0 && mConnections.get(pointerMin).getPosition().y == yPos) {    if (mConnections.get(pointerMin) == conn) {      return pointerMin;    }    pointerMin--;  }  while (pointerMax < mConnections.size() && mConnections.get(pointerMax).getPosition().y == yPos) {    if (mConnections.get(pointerMax) == conn) {      return pointerMax;    }    pointerMax++;  }  return -1;}  }
class C{  @Override public void writeQuery(StubAmp actor,String methodName,Object[] args,InboxAmp inbox){  try (OutputStream os=openItem(inbox)){    try (OutH3 out=_serializer.out(os)){      String key=actor.journalKey();      out.writeLong(CODE_QUERY);      out.writeString(key);      out.writeString(methodName);      out.writeLong(args.length);      for (      Object arg : args) {        out.writeObject(arg);      }    }   } catch (  IOException e) {    log.log(Level.FINER,e.toString(),e);  }}  }
class C{  @Override public synchronized void handleNotification(Notification notification,Object object){  if (notification instanceof MBeanServerNotification) {    ObjectName objectName=((MBeanServerNotification)notification).getMBeanName();    if (notification.getType().equals(MBeanServerNotification.REGISTRATION_NOTIFICATION)) {      if ("RequestProcessor".equals(objectName.getKeyProperty("type"))) {        ThreadPoolObjectName threadPoolObjectName=findPool(objectName.getKeyProperty("worker"));        if (threadPoolObjectName != null) {          threadPoolObjectName.getRequestProcessorNames().add(objectName);        }      }    } else     if (notification.getType().equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION)) {      if ("RequestProcessor".equals(objectName.getKeyProperty("type"))) {        ThreadPoolObjectName threadPoolObjectName=findPool(objectName.getKeyProperty("worker"));        if (threadPoolObjectName != null) {          threadPoolObjectName.getRequestProcessorNames().remove(objectName);        }      }    }  }}  }
class C{  static void errorUnexpectedElement(String systemID,int lineNr,String parentElementName,String unexpectedElementName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.UNEXPECTED_ELEMENT,systemID,lineNr,unexpectedElementName,null,null,"Unexpected " + unexpectedElementName + " in a "+ parentElementName);}  }
class C{  public void start(String threadName){  final String methodName="start";  log.fine(CLASS_NAME,methodName,"855");synchronized (lifecycle) {    if (!running) {      running=true;      recThread=new Thread(this,threadName);      recThread.start();    }  }}  }
class C{  private void inflateTitleView(){  titleContainer=(ViewGroup)rootView.findViewById(R.id.title_container);  titleContainer.removeAllViews();  if (customTitleView != null) {    titleContainer.addView(customTitleView);  } else   if (customTitleViewId != -1) {    LayoutInflater layoutInflater=LayoutInflater.from(getContext());    View view=layoutInflater.inflate(customTitleViewId,titleContainer,false);    titleContainer.addView(view);  } else {    LayoutInflater layoutInflater=LayoutInflater.from(getContext());    View view=layoutInflater.inflate(R.layout.bottom_sheet_title,titleContainer,false);    titleContainer.addView(view);  }  if (getStyle() == Style.LIST) {    int padding=getContext().getResources().getDimensionPixelSize(R.dimen.bottom_sheet_list_item_horizontal_padding);    titleContainer.setPadding(padding,0,padding,0);  } else {    int padding=getContext().getResources().getDimensionPixelSize(R.dimen.bottom_sheet_grid_item_horizontal_padding);    titleContainer.setPadding(padding,0,padding,0);  }  View titleView=titleContainer.findViewById(android.R.id.title);  titleTextView=titleView instanceof TextView ? (TextView)titleView : null;}  }
class C{  synchronized private void writeObject(ObjectOutputStream s) throws IOException {  ObjectOutputStream.PutField fields=s.putFields();  fields.put("seed",seed.get());  fields.put("nextNextGaussian",nextNextGaussian);  fields.put("haveNextNextGaussian",haveNextNextGaussian);  s.writeFields();}  }
class C{  private void doTestOperationsOnDiskFull(boolean updates) throws IOException {  Term searchTerm=new Term("content","aaa");  int START_COUNT=157;  int END_COUNT=144;  MockDirectoryWrapper startDir=newMockDirectory();  IndexWriter writer=new IndexWriter(startDir,newIndexWriterConfig(new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false)));  for (int i=0; i < 157; i++) {    Document d=new Document();    d.add(newStringField("id",Integer.toString(i),Field.Store.YES));    d.add(newTextField("content","aaa " + i,Field.Store.NO));    d.add(new NumericDocValuesField("dv",i));    writer.addDocument(d);  }  writer.close();  long diskUsage=startDir.sizeInBytes();  long diskFree=diskUsage + 10;  IOException err=null;  boolean done=false;  while (!done) {    if (VERBOSE) {      System.out.println("TEST: cycle");    }    MockDirectoryWrapper dir=new MockDirectoryWrapper(random(),TestUtil.ramCopyOf(startDir));    dir.setAllowRandomFileNotFoundException(false);    IndexWriter modifier=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false)).setMaxBufferedDocs(1000).setMaxBufferedDeleteTerms(1000).setMergeScheduler(new ConcurrentMergeScheduler()));    ((ConcurrentMergeScheduler)modifier.getConfig().getMergeScheduler()).setSuppressExceptions();    boolean success=false;    for (int x=0; x < 2; x++) {      if (VERBOSE) {        System.out.println("TEST: x=" + x);      }      double rate=0.1;      double diskRatio=((double)diskFree) / diskUsage;      long thisDiskFree;      String testName;      if (0 == x) {        thisDiskFree=diskFree;        if (diskRatio >= 2.0) {          rate/=2;        }        if (diskRatio >= 4.0) {          rate/=2;        }        if (diskRatio >= 6.0) {          rate=0.0;        }        if (VERBOSE) {          System.out.println("\ncycle: " + diskFree + " bytes");        }        testName="disk full during reader.close() @ " + thisDiskFree + " bytes";        dir.setRandomIOExceptionRateOnOpen(random().nextDouble() * 0.01);      } else {        thisDiskFree=0;        rate=0.0;        if (VERBOSE) {          System.out.println("\ncycle: same writer: unlimited disk space");        }        testName="reader re-use after disk full";        dir.setRandomIOExceptionRateOnOpen(0.0);      }      dir.setMaxSizeInBytes(thisDiskFree);      dir.setRandomIOExceptionRate(rate);      try {        if (0 == x) {          int docId=12;          for (int i=0; i < 13; i++) {            if (updates) {              Document d=new Document();              d.add(newStringField("id",Integer.toString(i),Field.Store.YES));              d.add(newTextField("content","bbb " + i,Field.Store.NO));              d.add(new NumericDocValuesField("dv",i));              modifier.updateDocument(new Term("id",Integer.toString(docId)),d);            } else {              modifier.deleteDocuments(new Term("id",Integer.toString(docId)));            }            docId+=12;          }          try {            modifier.close();          } catch (          IllegalStateException ise) {            throw (IOException)ise.getCause();          }        }        success=true;        if (0 == x) {          done=true;        }      } catch (      IOException e) {        if (VERBOSE) {          System.out.println("  hit IOException: " + e);          e.printStackTrace(System.out);        }        err=e;        if (1 == x) {          e.printStackTrace();          fail(testName + " hit IOException after disk space was freed up");        }      }      final double randomIOExceptionRate=dir.getRandomIOExceptionRate();      final long maxSizeInBytes=dir.getMaxSizeInBytes();      dir.setRandomIOExceptionRate(0.0);      dir.setRandomIOExceptionRateOnOpen(0.0);      dir.setMaxSizeInBytes(0);      if (!success) {        if (VERBOSE) {          System.out.println("TEST: now rollback");        }        modifier.rollback();      }      if (success) {        TestUtil.checkIndex(dir);      }      dir.setRandomIOExceptionRate(randomIOExceptionRate);      dir.setMaxSizeInBytes(maxSizeInBytes);      IndexReader newReader=null;      try {        newReader=DirectoryReader.open(dir);      } catch (      IOException e) {        e.printStackTrace();        fail(testName + ":exception when creating IndexReader after disk full during close: " + e);      }      IndexSearcher searcher=newSearcher(newReader);      ScoreDoc[] hits=null;      try {        hits=searcher.search(new TermQuery(searchTerm),1000).scoreDocs;      } catch (      IOException e) {        e.printStackTrace();        fail(testName + ": exception when searching: " + e);      }      int result2=hits.length;      if (success) {        if (x == 0 && result2 != END_COUNT) {          fail(testName + ": method did not throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ END_COUNT);        } else         if (x == 1 && result2 != START_COUNT && result2 != END_COUNT) {          fail(testName + ": method did not throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ START_COUNT+ " or "+ END_COUNT);        }      } else {        if (result2 != START_COUNT && result2 != END_COUNT) {          err.printStackTrace();          fail(testName + ": method did throw exception but hits.length for search on term 'aaa' is " + result2+ " instead of expected "+ START_COUNT+ " or "+ END_COUNT);        }      }      newReader.close();      if (result2 == END_COUNT) {        break;      }    }    dir.close();    diskFree+=10;  }  startDir.close();}  }
class C{  public void sendRequestVoteRequest(boolean isPrevote) throws GondolaException {  if (!enabled || masterId >= 0) {    return;  }  if (!isPrevote) {    currentTerm++;    votedFor=-1;    save(currentTerm,memberId);    votedFor=memberId;  }  prevotesOnly=isPrevote;  Message message=pool.checkout();  try {    saveQueue.getLatest(savedRid);    message.requestVoteRequest(memberId,currentTerm,isPrevote,savedRid);    peers.forEach(null);  }  finally {    message.release();  }  prevoteTs=clock.now() + (long)((Math.random() * prevotePeriod));  if (!isPrevote) {    prevoteTs+=electionTimeout;  }}  }
class C{  public void addLinkedPositionProposal(String groupID,String displayString,String proposal,Image image){  addLinkedPositionProposal(groupID,proposal,image);}  }
class C{  void initSubscriptions(){  setSubscriptionID(null);  setSelectedSubscription(model.getSelectedSubscriptionAndCustomer());  updatePriceModel();}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  @Override public void AASTORE(Object conc_array,int conc_index){  @SuppressWarnings("unused") ReferenceExpression value_ref=env.topFrame().operandStack.popRef();  IntegerValue symb_index=env.topFrame().operandStack.popBv32();  ReferenceExpression array_ref=env.topFrame().operandStack.popRef();  env.heap.initializeReference(conc_array,array_ref);  if (nullReferenceViolation(array_ref,conc_array)) {    return;  }  if (negativeIndexViolation(conc_index,symb_index)) {    return;  }  ReferenceExpression symb_array=array_ref;  int conc_array_length=Array.getLength(conc_array);  IntegerValue symb_array_length=env.heap.getField("",ARRAY_LENGTH,conc_array,symb_array,conc_array_length);  if (indexTooBigViolation(conc_index,symb_index,conc_array_length,symb_array_length))   return;  return;}  }
class C{  @Override protected Class<?> resolveClass(ObjectStreamClass objectstreamclass) throws IOException, ClassNotFoundException {  String s=objectstreamclass.getName();  if (s.startsWith("[")) {    int i;    for (i=1; s.charAt(i) == '['; i++)     ;    Class<?> class1;    if (s.charAt(i) == 'L') {      class1=loader.loadClass(s.substring(i + 1,s.length() - 1));    } else {      if (s.length() != i + 1)       throw new ClassNotFoundException(s);      class1=primitiveType(s.charAt(i));    }    int ai[]=new int[i];    for (int j=0; j < i; j++)     ai[j]=0;    return Array.newInstance(class1,ai).getClass();  } else {    return loader.loadClass(s);  }}  }
class C{  private static float calcSum(float[] vals){  float sum=0f;  for (  float f : vals)   sum+=f;  return sum;}  }
class C{  default <X extends Throwable>Try<T,X> toTry(final Class<X>... classes){  return Try.withCatch(null,classes);}  }
class C{  protected void startJmxConnector(){  String serviceAddress=null;  try {    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();    serviceAddress=generateServiceAddress(host,beanPort,registryPort,serviceName);    JMXServiceURL address=new JMXServiceURL(serviceAddress);    HashMap<String,Object> env=new HashMap<String,Object>();    if (authenticationInfo != null && authenticationInfo.isAuthenticationNeeded()) {      if (authenticationInfo.isUseTungstenAuthenticationRealm())       env.put(JMXConnectorServer.AUTHENTICATOR,new RealmJMXAuthenticator(authenticationInfo)); else       env.put("jmx.remote.x.password.file",authenticationInfo.getPasswordFileLocation());      env.put("jmx.remote.x.access.file",authenticationInfo.getAccessFileLocation());    }    if (authenticationInfo != null && authenticationInfo.isEncryptionNeeded()) {      System.setProperty("javax.net.ssl.keyStore",authenticationInfo.getKeystoreLocation());      System.setProperty("javax.net.ssl.keyStorePassword",authenticationInfo.getKeystorePassword());      try {        String[] protocolArray=authenticationInfo.getEnabledProtocols().toArray(new String[0]);        String[] allowedCipherSuites=authenticationInfo.getEnabledCipherSuites().toArray(new String[0]);        String[] cipherArray;        if (protocolArray.length == 0)         protocolArray=null;        if (allowedCipherSuites.length == 0)         cipherArray=null; else {          cipherArray=authenticationInfo.getJvmEnabledCipherSuites().toArray(new String[0]);          if (cipherArray.length == 0) {            String message="Unable to find approved ciphers in the supported cipher suites on this JVM";            StringBuffer sb=new StringBuffer(message).append("\n");            sb.append(String.format("JVM supported cipher suites: %s\n",StringUtils.join(SecurityHelper.getJvmSupportedCiphers())));            sb.append(String.format("Approved cipher suites from security.properties: %s\n",StringUtils.join(allowedCipherSuites)));            logger.error(sb.toString());            throw new RuntimeException(message);          }        }        logger.info("Setting allowed JMX server protocols: " + StringUtils.join(protocolArray,","));        logger.info("Setting allowed JMX server ciphers: " + StringUtils.join(cipherArray,","));        SslRMIClientSocketFactory csf=new SslRMIClientSocketFactory();        SslRMIServerSocketFactory ssf=new SslRMIServerSocketFactory(cipherArray,protocolArray,false);        env.put(RMIConnectorServer.RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE,csf);        env.put(RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE,ssf);      } catch (      IllegalArgumentException ie) {        logger.warn("Some of the protocols or ciphers are not supported. " + ie.getMessage());        throw new RuntimeException(ie.getLocalizedMessage(),ie);      }    }    env.put(RMIConnectorServer.JNDI_REBIND_ATTRIBUTE,"true");    JMXConnectorServer connector=JMXConnectorServerFactory.newJMXConnectorServer(address,env,mbs);    connector.start();    logger.info(MessageFormat.format("JMXConnector: security.properties={0}",(authenticationInfo != null) ? authenticationInfo.getParentPropertiesFileLocation() : "No security.properties file found !..."));    if (authenticationInfo != null)     logger.info(authenticationInfo.toString());    logger.info(String.format("JMXConnector started at address %s",serviceAddress));    jmxConnectorServer=connector;  } catch (  Throwable e) {    throw new ServerRuntimeException(MessageFormat.format("Unable to create RMI listener: {0} -> {1}",getServiceProps(),e),e);  }}  }
class C{  public synchronized void joinToConfCall(String number){  IConnection current=Red5.getConnectionLocal();  String streamid=current.getClient().getId();  RoomClient currentClient=this.clientListManager.getClientByStreamId(streamid);  Rooms rooms=roommanagement.getRoomById(currentClient.getRoom_id());  log.debug("asterisk -rx \"originate Local/" + number + "@rooms extension "+ rooms.getSipNumber()+ "@rooms\"");  try {    Runtime.getRuntime().exec(new String[]{"asterisk","-rx","originate Local/" + number + "@rooms extension "+ rooms.getSipNumber()+ "@rooms"});  } catch (  IOException e) {    log.error("Executing asterisk originate error: ",e);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return node == null ? null : node.getIcon(stack.getUIComponent());}  }
class C{  @Override public void close(){synchronized (lock) {    if (isOpen()) {      str=null;    }  }}  }
class C{  @Override public Array values(final Array params){  model.setParams(params);  final Array values=new Array(instruments.size());  for (int i=0; i < instruments.size(); i++) {    final double value=instruments.get(i).calibrationError() * Math.sqrt(weights[i]);    values.set(i,value);  }  return values;}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MMeasure[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public void start(WFNode node){  log.fine("Node=" + node);  MWFNode model=node.getModel();  StringBuffer msg=new StringBuffer("<HTML>");  msg.append("<H2>").append(model.getName(true)).append("</H2>");  String s=model.getDescription(true);  if (s != null && s.length() > 0)   msg.append("<B>").append(s).append("</B>");  s=model.getHelp(true);  if (s != null && s.length() > 0)   msg.append("<BR>").append(s);  msg.append("</HTML>");  infoTextPane.setText(msg.toString());  infoTextPane.setCaretPosition(0);  if (m_menu != null)   (new AMenuStartItem(model.getAD_WF_Node_ID(),false,model.getName(true),m_menu)).start();  m_activeNode=node;  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  boolean first=m_wf.isFirst(m_activeNode.getAD_WF_Node_ID(),AD_Client_ID);  boolean last=m_wf.isLast(m_activeNode.getAD_WF_Node_ID(),AD_Client_ID);  wfStart.setEnabled(!first);  wfBack.setEnabled(!first);  wfNext.setEnabled(!last);  wfEnd.setEnabled(!last);}  }
class C{  public static int parameter(Configuration cfg,String name,String authority,int dflt) throws IOException {  String name0=String.format(name,authority != null ? authority : "");  try {    return cfg.getInt(name0,dflt);  } catch (  NumberFormatException ignore) {    throw new IOException("Failed to parse parameter value to integer: " + name0);  }}  }
class C{  private void handleResponse(ByteBuf response,ChannelHandlerContext context){  NettyConnection connection=getConnection(context.channel());  if (connection != null) {    connection.handleResponse(response);  }}  }
class C{  public static int runSyncProcess(boolean verbose,boolean isInheritIO,String[] cmdline,StringBuilder stdout,StringBuilder stderr,File workingDirectory,Map<String,String> envs){  final StringBuilder pStdOut=stdout == null ? new StringBuilder() : stdout;  final StringBuilder pStdErr=stderr == null ? new StringBuilder() : stderr;  LOG.log(Level.FINE,"Process command: `$ {0}`",Arrays.toString(cmdline));  ProcessBuilder pb=getProcessBuilder(isInheritIO,cmdline,workingDirectory,envs);  Process process;  try {    process=pb.start();  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to run Sync Process ",e);    return -1;  }  Thread stdoutThread=asyncProcessStream(process.getInputStream(),pStdOut);  Thread stderrThread=asyncProcessStream(process.getErrorStream(),pStdErr);  int exitValue;  try {    exitValue=process.waitFor();    stdoutThread.join();    stderrThread.join();  } catch (  InterruptedException e) {    stdoutThread.interrupt();    stderrThread.interrupt();    process.destroy();    LOG.log(Level.SEVERE,"Running Sync Process was interrupted",e);    Thread.currentThread().interrupt();    return -1;  }  String stdoutString=pStdOut.toString();  String stderrString=pStdErr.toString();  if (!stdoutString.isEmpty()) {    LOG.log(Level.FINE,"\nSTDOUT:\n {0}",stdoutString);  }  if (!stderrString.isEmpty()) {    LOG.log(Level.FINE,"\nSTDERR:\n {0}",stderrString);  }  return exitValue;}  }
class C{  @SuppressWarnings("javadoc") public static UnionTypeExpression createNonSimplifiedUnionType(Iterable<? extends TypeRef> elements){  UnionTypeExpression unionType=TypeRefsFactory.eINSTANCE.createUnionTypeExpression();  EList<TypeRef> unionElements=unionType.getTypeRefs();  for (  TypeRef e : elements) {    unionElements.add(TypeUtils.copyIfContained(e));  }  return unionType;}  }
class C{  @Inline @Entrypoint public static void wordFieldWrite(Object ref,Word value,Offset offset,int locationMetadata){  if (NEEDS_WORD_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().wordWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public boolean isLDAPUser(){  Object oo=get_Value(COLUMNNAME_LDAPUser);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected String buildContextURL(ODataRequestContext requestContext,Object data) throws ODataRenderException {  ODataUri oDataUri=requestContext.getUri();  if (ODataUriUtil.isActionCallUri(oDataUri) || ODataUriUtil.isFunctionCallUri(oDataUri)) {    return buildContextUrlFromOperationCall(oDataUri,requestContext.getEntityDataModel(),isCollection(data));  }  Option<String> contextURL;  if (isWriteOperation(requestContext)) {    contextURL=getContextUrlWriteOperation(oDataUri);  } else {    contextURL=getContextUrl(oDataUri);  }  checkContextURL(requestContext,contextURL);  return contextURL.get();}  }
class C{  @VisibleForTesting static boolean endSegment(Track segment,long stopTime,ArrayList<Track> splitTracks){  if (segment.getLocations().size() < 2) {    Log.d(TAG,"segment has less than 2 points");    return false;  }  segment.getTripStatistics().setStopTime(stopTime);  LocationUtils.decimate(segment,2.0);  splitTracks.add(segment);  return true;}  }
class C{  public void updateLongitudeExtremities(double longitude){  longitudeExtremities.update(longitude);}  }
class C{  public static int countGsmSeptets(char c,boolean throwsException) throws EncodeException {  if (sCharsToGsmTables[0].get(c,-1) != -1) {    return 1;  }  if (sCharsToShiftTables[0].get(c,-1) != -1) {    return 2;  }  if (throwsException) {    throw new EncodeException(c);  } else {    return 1;  }}  }
class C{  public final CC growPrioX(int p){  hor.setGrowPriority(p);  return this;}  }
class C{  public static void logNoMoreArticles(final Logger logger,final ArchiveDescription archive){  logger.logMessage(Level.INFO,"Archive " + archive.toString() + " contains no more articles");}  }
class C{  public static void init(ActorSystem actorSystem){  monitorAgentImpl=new DefaultMonitorAgentImpl(actorSystem);}  }
class C{  public int estimateCellHeight(int vSpan){  return vSpan * mCellHeight;}  }
class C{  public void addTransition(int source,int dest,String term){  addTransition(source,dest,new BytesRef(term));}  }
class C{  private Optional<Integer> parseContentLength(okhttp3.Response response){  Integer parsed=Ints.tryParse(response.header("Content-Length",""));  if (parsed != null && parsed <= 0) {    parsed=null;  }  return Optional.fromNullable(parsed);}  }
class C{  public DOMXMLObject(List<? extends XMLStructure> content,String id,String mimeType,String encoding){  if (content == null || content.isEmpty()) {    this.content=Collections.emptyList();  } else {    this.content=Collections.unmodifiableList(new ArrayList<XMLStructure>(content));    for (int i=0, size=this.content.size(); i < size; i++) {      if (!(this.content.get(i) instanceof XMLStructure)) {        throw new ClassCastException("content[" + i + "] is not a valid type");      }    }  }  this.id=id;  this.mimeType=mimeType;  this.encoding=encoding;}  }
class C{  private void testReadInDefaultFormat(final String filename){  if (AvailableGraphParsers.getAvailableLoaders().contains(format)) {    System.out.println("this format is supported for reading, attempting to re-read this graph");    GamaGraph readen=GraphLoader.loadGraph(null,filename,null,null,null,null,format,false);    assertFalse(graph == readen);    TestUtilsGraphs.compareGamaGraphs(format,graph,readen,0);  } else {    System.out.println("this format is not supported for reading, and error should be thrown !");    try {      GamaGraph readen=GraphLoader.loadGraph(null,filename,null,null,null,null,format,false);      fail("expected a GamaRuntimeException");    } catch (    GamaRuntimeException e) {      System.out.println(e.getMessage());    }  }}  }
class C{  public static void saveParameters(){  saveParameters(FileSystemService.getMainUserConfigFile());  for (  ParameterWriter writer : PARAMETER_WRITERS) {    writer.writeParameters(PARAMETER_MAP);  }  informListenerOfSave();}  }
class C{  public void clearContent(){  modelMap=new LinkedHashMap<>();  filteredModelMap=new LinkedHashMap<>();  filterNameString="";  nominalFilter=false;  numericFilter=false;  dateTimeFilter=false;}  }
class C{  protected static void checkCRLs(ExtendedPKIXParameters paramsPKIX,X509Certificate cert,Date validDate,X509Certificate sign,PublicKey workingPublicKey,List certPathCerts) throws AnnotatedException {  AnnotatedException lastException=null;  CRLDistPoint crldp=null;  try {    crldp=CRLDistPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(cert,RFC3280CertPathUtilities.CRL_DISTRIBUTION_POINTS));  } catch (  Exception e) {    throw new AnnotatedException("CRL distribution point extension could not be read.",e);  }  try {    CertPathValidatorUtilities.addAdditionalStoresFromCRLDistributionPoint(crldp,paramsPKIX);  } catch (  AnnotatedException e) {    throw new AnnotatedException("No additional CRL locations could be decoded from CRL distribution point extension.",e);  }  CertStatus certStatus=new CertStatus();  ReasonsMask reasonsMask=new ReasonsMask();  boolean validCrlFound=false;  if (crldp != null) {    DistributionPoint dps[]=null;    try {      dps=crldp.getDistributionPoints();    } catch (    Exception e) {      throw new AnnotatedException("Distribution points could not be read.",e);    }    if (dps != null) {      for (int i=0; i < dps.length && certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonsMask.isAllReasons(); i++) {        ExtendedPKIXParameters paramsPKIXClone=(ExtendedPKIXParameters)paramsPKIX.clone();        try {          checkCRL(dps[i],paramsPKIXClone,cert,validDate,sign,workingPublicKey,certStatus,reasonsMask,certPathCerts);          validCrlFound=true;        } catch (        AnnotatedException e) {          lastException=e;        }      }    }  }  if (certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonsMask.isAllReasons()) {    try {      ASN1Primitive issuer=null;      try {        issuer=new ASN1InputStream(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert).getEncoded()).readObject();      } catch (      Exception e) {        throw new AnnotatedException("Issuer from certificate for CRL could not be reencoded.",e);      }      DistributionPoint dp=new DistributionPoint(new DistributionPointName(0,new GeneralNames(new GeneralName(GeneralName.directoryName,issuer))),null,null);      ExtendedPKIXParameters paramsPKIXClone=(ExtendedPKIXParameters)paramsPKIX.clone();      checkCRL(dp,paramsPKIXClone,cert,validDate,sign,workingPublicKey,certStatus,reasonsMask,certPathCerts);      validCrlFound=true;    } catch (    AnnotatedException e) {      lastException=e;    }  }  if (!validCrlFound) {    if (lastException instanceof AnnotatedException) {      throw lastException;    }    throw new AnnotatedException("No valid CRL found.",lastException);  }  if (certStatus.getCertStatus() != CertStatus.UNREVOKED) {    String message="Certificate revocation after " + certStatus.getRevocationDate();    message+=", reason: " + crlReasons[certStatus.getCertStatus()];    throw new AnnotatedException(message);  }  if (!reasonsMask.isAllReasons() && certStatus.getCertStatus() == CertStatus.UNREVOKED) {    certStatus.setCertStatus(CertStatus.UNDETERMINED);  }  if (certStatus.getCertStatus() == CertStatus.UNDETERMINED) {    throw new AnnotatedException("Certificate status could not be determined.");  }}  }
class C{  public Glyph createGlyph(BridgeContext ctx,Element glyphElement,Element textElement,int glyphCode,float fontSize,GVTFontFace fontFace,TextPaintInfo tpi){  float fontHeight=fontFace.getUnitsPerEm();  float scale=fontSize / fontHeight;  AffineTransform scaleTransform=AffineTransform.getScaleInstance(scale,-scale);  String d=glyphElement.getAttributeNS(null,SVG_D_ATTRIBUTE);  Shape dShape=null;  if (d.length() != 0) {    AWTPathProducer app=new AWTPathProducer();    app.setWindingRule(CSSUtilities.convertFillRule(textElement));    try {      PathParser pathParser=new PathParser();      pathParser.setPathHandler(app);      pathParser.parse(d);    } catch (    ParseException pEx) {      throw new BridgeException(ctx,glyphElement,pEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_D_ATTRIBUTE});    } finally {      Shape shape=app.getShape();      Shape transformedShape=scaleTransform.createTransformedShape(shape);      dShape=transformedShape;    }  }  NodeList glyphChildren=glyphElement.getChildNodes();  int numChildren=glyphChildren.getLength();  int numGlyphChildren=0;  for (int i=0; i < numChildren; i++) {    Node childNode=glyphChildren.item(i);    if (childNode.getNodeType() == Node.ELEMENT_NODE) {      numGlyphChildren++;    }  }  CompositeGraphicsNode glyphContentNode=null;  if (numGlyphChildren > 0) {    GVTBuilder builder=ctx.getGVTBuilder();    glyphContentNode=new CompositeGraphicsNode();    Element fontElementClone=(Element)glyphElement.getParentNode().cloneNode(false);    NamedNodeMap fontAttributes=glyphElement.getParentNode().getAttributes();    int numAttributes=fontAttributes.getLength();    for (int i=0; i < numAttributes; i++) {      fontElementClone.setAttributeNode((Attr)fontAttributes.item(i));    }    Element clonedGlyphElement=(Element)glyphElement.cloneNode(true);    fontElementClone.appendChild(clonedGlyphElement);    textElement.appendChild(fontElementClone);    CompositeGraphicsNode glyphChildrenNode=new CompositeGraphicsNode();    glyphChildrenNode.setTransform(scaleTransform);    NodeList clonedGlyphChildren=clonedGlyphElement.getChildNodes();    int numClonedChildren=clonedGlyphChildren.getLength();    for (int i=0; i < numClonedChildren; i++) {      Node childNode=clonedGlyphChildren.item(i);      if (childNode.getNodeType() == Node.ELEMENT_NODE) {        Element childElement=(Element)childNode;        GraphicsNode childGraphicsNode=builder.build(ctx,childElement);        glyphChildrenNode.add(childGraphicsNode);      }    }    glyphContentNode.add(glyphChildrenNode);    textElement.removeChild(fontElementClone);  }  String unicode=glyphElement.getAttributeNS(null,SVG_UNICODE_ATTRIBUTE);  String nameList=glyphElement.getAttributeNS(null,SVG_GLYPH_NAME_ATTRIBUTE);  List names=new ArrayList();  StringTokenizer st=new StringTokenizer(nameList," ,");  while (st.hasMoreTokens()) {    names.add(st.nextToken());  }  String orientation=glyphElement.getAttributeNS(null,SVG_ORIENTATION_ATTRIBUTE);  String arabicForm=glyphElement.getAttributeNS(null,SVG_ARABIC_FORM_ATTRIBUTE);  String lang=glyphElement.getAttributeNS(null,SVG_LANG_ATTRIBUTE);  Element parentFontElement=(Element)glyphElement.getParentNode();  String s=glyphElement.getAttributeNS(null,SVG_HORIZ_ADV_X_ATTRIBUTE);  if (s.length() == 0) {    s=parentFontElement.getAttributeNS(null,SVG_HORIZ_ADV_X_ATTRIBUTE);    if (s.length() == 0) {      throw new BridgeException(ctx,parentFontElement,ERR_ATTRIBUTE_MISSING,new Object[]{SVG_HORIZ_ADV_X_ATTRIBUTE});    }  }  float horizAdvX;  try {    horizAdvX=SVGUtilities.convertSVGNumber(s) * scale;  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,glyphElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_HORIZ_ADV_X_ATTRIBUTE,s});  }  s=glyphElement.getAttributeNS(null,SVG_VERT_ADV_Y_ATTRIBUTE);  if (s.length() == 0) {    s=parentFontElement.getAttributeNS(null,SVG_VERT_ADV_Y_ATTRIBUTE);    if (s.length() == 0) {      s=String.valueOf(fontFace.getUnitsPerEm());    }  }  float vertAdvY;  try {    vertAdvY=SVGUtilities.convertSVGNumber(s) * scale;  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,glyphElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VERT_ADV_Y_ATTRIBUTE,s});  }  s=glyphElement.getAttributeNS(null,SVG_VERT_ORIGIN_X_ATTRIBUTE);  if (s.length() == 0) {    s=parentFontElement.getAttributeNS(null,SVG_VERT_ORIGIN_X_ATTRIBUTE);    if (s.length() == 0) {      s=Float.toString(horizAdvX / 2);    }  }  float vertOriginX;  try {    vertOriginX=SVGUtilities.convertSVGNumber(s) * scale;  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,glyphElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VERT_ORIGIN_X_ATTRIBUTE,s});  }  s=glyphElement.getAttributeNS(null,SVG_VERT_ORIGIN_Y_ATTRIBUTE);  if (s.length() == 0) {    s=parentFontElement.getAttributeNS(null,SVG_VERT_ORIGIN_Y_ATTRIBUTE);    if (s.length() == 0) {      s=String.valueOf(fontFace.getAscent());    }  }  float vertOriginY;  try {    vertOriginY=SVGUtilities.convertSVGNumber(s) * -scale;  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,glyphElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_VERT_ORIGIN_Y_ATTRIBUTE,s});  }  Point2D vertOrigin=new Point2D.Float(vertOriginX,vertOriginY);  s=parentFontElement.getAttributeNS(null,SVG_HORIZ_ORIGIN_X_ATTRIBUTE);  if (s.length() == 0) {    s=SVG_HORIZ_ORIGIN_X_DEFAULT_VALUE;  }  float horizOriginX;  try {    horizOriginX=SVGUtilities.convertSVGNumber(s) * scale;  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,parentFontElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_HORIZ_ORIGIN_X_ATTRIBUTE,s});  }  s=parentFontElement.getAttributeNS(null,SVG_HORIZ_ORIGIN_Y_ATTRIBUTE);  if (s.length() == 0) {    s=SVG_HORIZ_ORIGIN_Y_DEFAULT_VALUE;  }  float horizOriginY;  try {    horizOriginY=SVGUtilities.convertSVGNumber(s) * -scale;  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,glyphElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_HORIZ_ORIGIN_Y_ATTRIBUTE,s});  }  Point2D horizOrigin=new Point2D.Float(horizOriginX,horizOriginY);  return new Glyph(unicode,names,orientation,arabicForm,lang,horizOrigin,vertOrigin,horizAdvX,vertAdvY,glyphCode,tpi,dShape,glyphContentNode);}  }
class C{  protected Size2D arrangeFF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  double width=constraint.getWidth() / this.columns;  double height=constraint.getHeight() / this.rows;  List blocks=container.getBlocks();  for (int c=0; c < this.columns; c++) {    for (int r=0; r < this.rows; r++) {      int index=r * this.columns + c;      if (index >= blocks.size()) {        break;      }      Block b=(Block)blocks.get(index);      if (b != null) {        b.setBounds(new Rectangle2D.Double(c * width,r * height,width,height));      }    }  }  return new Size2D(this.columns * width,this.rows * height);}  }
class C{  AttachmentTask(){  mDownloadRunnable=new AttachmentDownloader(this);  mDecodeRunnable=new PhotoDecodeRunnable(this);  sPhotoManager=AttachmentManager.getInstance();}  }
class C{  @SuppressWarnings("unused") public StreamingBoundedRead(DataflowRunner runner,Read.Bounded<T> transform){  this.source=transform.getSource();}  }
class C{  public void run(){  BufferedReader tdin=null;  PrintWriter tdout=null;  if (viewName == null) {    Debug.error("NetMapReader not given a view name to request from the NETMAP server.");    return;  }  while (!this.shutdown) {    if (DEBUG)     Debug.output("NetMapReader attempting connection");    try {      tdin=new BufferedReader(new InputStreamReader(s.getInputStream()));      tdout=new PrintWriter(s.getOutputStream(),true);      if (DEBUG)       Debug.output("Loading view: " + viewName);      tdout.println("jmap '" + viewName + "' 768");      s.setSoTimeout(500);    } catch (    InterruptedIOException eConnectInterrupted) {      continue;    }catch (    IOException eConnect) {      Debug.error("NetMapReader: " + eConnect.getMessage() + "; NetMapReader sleeping");      try {        Thread.sleep(40000);      } catch (      Exception eSleep) {      }      continue;    }    if (netmapConn == null) {      continue;    }    netmapConn.connectionUp();    while (!this.shutdown) {      try {        String line=null;        if ((line=tdin.readLine()) == null)         break;        if (DEBUG_VERBOSE)         Debug.output("  read: " + line);        Properties eventProps=procline(line);        if (DEBUG_VERBOSE)         Debug.output("  processed...");        if (!eventProps.isEmpty()) {          netmapConn.distributeEvent(eventProps);          if (DEBUG_VERBOSE)           Debug.output("  distributed...");        } else {          if (DEBUG_VERBOSE)           Debug.output("  ignored...");        }      } catch (      InterruptedIOException eReadInterrupted) {        continue;      }catch (      Exception e) {        Debug.error("NetMapReader exception: " + e.getMessage() + "; in NetMapReader run. ");        continue;      }    }    try {      s.close();      netmapConn.connectionDown();    } catch (    Exception eShutdown) {    }  }}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  public void testToString(){  DoubleAdder ai=new DoubleAdder();  assertEquals(Double.toString(0.0),ai.toString());  ai.add(1.0);  assertEquals(Double.toString(1.0),ai.toString());}  }
class C{  public String toString(){  return "UTMPoint[zone_number=" + zone_number + ", easting="+ easting+ ", northing="+ northing+ ", hemisphere="+ zone_letter+ "]";}  }
class C{  public void code(Environment env,Assembler asm) throws ClassNotFound {switch (status) {case PARSED:    check(env);  code(env,asm);return;case CHECKED:inline(env);code(env,asm);return;case INLINED:if (env.dump()) {System.out.println("[code field " + getClassDeclaration().getName() + "."+ getName()+ "]");}if (isMethod() && (!isNative()) && (!isAbstract())) {env=new Environment(env,this);Context ctx=new Context((Context)null,this);Statement s=(Statement)getValue();for (Enumeration e=args.elements(); e.hasMoreElements(); ) {LocalMember f=(LocalMember)e.nextElement();ctx.declare(env,f);}if (s != null) {s.code(env,ctx,asm);}if (getType().getReturnType().isType(TC_VOID) && !isInitializer()) {asm.add(getWhere(),opc_return,true);}}return;}}  }
class C{  public Document read(Reader reader) throws DocumentException, IOException, XmlPullParserException {  getXPPParser().setInput(reader);  return parseDocument();}  }
class C{  public static <T>TStream<T> subscribe(TopologyElement te,String topic,Class<T> streamType){  Topology topology=te.topology();  Supplier<RuntimeServices> rts=topology.getRuntimeServiceSupplier();  return te.topology().events(new SubscriberSetup<T>(topic,streamType,rts));}  }
class C{  public BufferIterator littleEndianIterator(){  return new NioBufferIterator(address,(int)size,ByteOrder.nativeOrder() != ByteOrder.LITTLE_ENDIAN);}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("liberty",ContainerType.INSTALLED,LibertyInstalledLocalContainer.class);}  }
class C{  public boolean downField(){  return downField(currentField);}  }
class C{  static private Properties createProperties(@Nonnull String hostname,int port,@Nonnull String encryption,boolean disableCertificateChecking) throws MessagingException {  if (port <= 0 || port > 65535 || !("none".equals(encryption) || "tls".equals(encryption) || "starttls".equals(encryption))) {    throw new MessagingException("Invalid Port or Encryption scheme");  }  Properties props=new Properties();  props.put("mail.smtp.auth",true);  props.put("mail.smtp.port",port);  props.put("mail.smtp.host",hostname);  if ("starttls".equals(encryption)) {    props.put("mail.smtp.starttls.enable",true);  } else   if ("tls".equals(encryption)) {    props.put("mail.smtp.ssl.enable",true);  }  props.put("mail.smtp.connectiontimeout",20000);  if (disableCertificateChecking) {    props.put("mail.smtp.ssl.trust","*");  }  return props;}  }
class C{  public NioDatagramConnector(){  super(new DefaultDatagramSessionConfig(),NioProcessor.class);}  }
class C{  public DateMidnight(DateTimeZone zone){  super(zone);}  }
class C{  public void reset(){  reset(SettingsManager.settings());}  }
class C{  @Deprecated public ExpectedException handleAssumptionViolatedExceptions(){  return this;}  }
class C{  protected String _becomeMaster(){  _logger.info("Attempting to become " + lockType + " master.");  Date now=new Date();  Date expiration=new Date(System.currentTimeMillis() + GLOBAL_LOCK_EXPIRATION_PERIOD_MS);  String lockNote=MessageFormat.format(GLOBAL_LOCK_NOTE_TEMPLATE,lockType,now,expiration);synchronized (_globalInterlockService) {    String key=_globalInterlockService.obtainLock(GLOBAL_LOCK_EXPIRATION_PERIOD_MS,lockType,lockNote);    _logger.info("Attempt to become {} master {}.",lockType,(key == null ? "did not succeed" : "succeeded"));    return key;  }}  }
class C{  private void doAutoScroll(final JTextArea ta,final boolean scroll){  SwingUtilities.invokeLater(null);}  }
class C{  public void sort(){  this.valueCollection.sort();}  }
class C{  public static BlockSnapshot checkBlockSnapshotExistsInDB(DbClient dbClient,String nativeGuid) throws IOException {  List<BlockSnapshot> snapshots=CustomQueryUtility.getActiveBlockSnapshotByNativeGuid(dbClient,nativeGuid);  Iterator<BlockSnapshot> snapshotItr=snapshots.iterator();  if (snapshotItr.hasNext()) {    return snapshotItr.next();  }  return null;}  }
class C{  protected AbstractGraph(List<V> vertices,List<Edge> edges){  for (int i=0; i < vertices.size(); i++)   addVertex(vertices.get(i));  createAjacencyLists(edges,vertices.size());}  }
class C{  public Float remove(Integer key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  @Override public void onNewItem(int id,Barcode item){  mGraphic.setId(id);}  }
class C{  @Override public boolean supportsResultSetType(int type){  debugCodeCall("supportsResultSetType",type);  return type != ResultSet.TYPE_SCROLL_SENSITIVE;}  }
class C{  public void sendTestMessage(NceMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  public ScriptBuilder(Script template){  chunks=new ArrayList<ScriptChunk>(template.getChunks());}  }
class C{  private static void updateDistance(Context context,RemoteViews remoteViews,int[] ids,TripStatistics tripStatistics,boolean metricUnits){  double totalDistance=tripStatistics == null ? Double.NaN : tripStatistics.getTotalDistance();  String[] totalDistanceParts=StringUtils.getDistanceParts(context,totalDistance,metricUnits);  if (totalDistanceParts[0] == null) {    totalDistanceParts[0]=context.getString(R.string.value_unknown);  }  remoteViews.setTextViewText(ids[0],context.getString(R.string.stats_distance));  remoteViews.setTextViewText(ids[1],totalDistanceParts[0]);  remoteViews.setTextViewText(ids[2],totalDistanceParts[1]);}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,boolean[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  public int bitsPerElement(){  return this.bitsPerElement;}  }
class C{  public Constant(long value){  this(Long.class,value);}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  private char readEscapeCharacter() throws JSONException {  char escaped=in.charAt(pos++);switch (escaped) {case 'u':    if (pos + 4 > in.length()) {      throw syntaxError("Unterminated escape sequence");    }  String hex=in.substring(pos,pos + 4);pos+=4;try {return (char)Integer.parseInt(hex,16);} catch (NumberFormatException nfe) {throw syntaxError("Invalid escape sequence: " + hex);}case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  public static byte[] computeAuthenticationChallenge(byte[] nonce,String realm,boolean access,boolean userID) throws IOException {  byte[] authChall=null;  if (nonce.length != 16) {    throw new IllegalArgumentException("Nonce must be 16 bytes long");  }  if (realm == null) {    authChall=new byte[21];  } else {    if (realm.length() >= 255) {      throw new IllegalArgumentException("Realm must be less then 255 bytes");    }    authChall=new byte[24 + realm.length()];    authChall[21]=0x02;    authChall[22]=(byte)(realm.length() + 1);    authChall[23]=0x01;    System.arraycopy(realm.getBytes("ISO8859_1"),0,authChall,24,realm.length());  }  authChall[0]=0x00;  authChall[1]=0x10;  System.arraycopy(nonce,0,authChall,2,16);  authChall[18]=0x01;  authChall[19]=0x01;  authChall[20]=0x00;  if (!access) {    authChall[20]=(byte)(authChall[20] | 0x02);  }  if (userID) {    authChall[20]=(byte)(authChall[20] | 0x01);  }  return authChall;}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (listenerList == null) {    listenerList=new Vector<PropertyChangeListener>();  }  listenerList.add(listener);}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  private void fillListUp(int topEdge,final int offset){  while (topEdge + offset > 0 && mFirstItemPosition > 0) {    mFirstItemPosition--;    final View newTopCild=mAdapter.getView(mFirstItemPosition,getCachedView(),this);    addAndMeasureChild(newTopCild,LAYOUT_MODE_ABOVE);    final int childHeight=getChildHeight(newTopCild);    topEdge-=childHeight;    mListTopOffset-=childHeight;  }}  }
class C{  protected CodeLang_Impl(){  super();}  }
class C{  public synchronized void close() throws IOException {  if (!closed) {    closed=true;    backend.close();  }}  }
class C{  public int length(){  return this.map.size();}  }
class C{  @Override public void flip(WComponentPeer peer,Component target,VolatileImage backBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){  SurfaceManager d3dvsm=SurfaceManager.getManager(backBuffer);  SurfaceData sd=d3dvsm.getPrimarySurfaceData();  if (sd instanceof D3DSurfaceData) {    D3DSurfaceData d3dsd=(D3DSurfaceData)sd;    D3DSurfaceData.swapBuffers(d3dsd,x1,y1,x2,y2);  } else {    Graphics g=peer.getGraphics();    try {      g.drawImage(backBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);    }  finally {      g.dispose();    }  }  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {    Graphics g=backBuffer.getGraphics();    try {      g.setColor(target.getBackground());      g.fillRect(0,0,backBuffer.getWidth(),backBuffer.getHeight());    }  finally {      g.dispose();    }  }}  }
class C{  public boolean forEach(cern.colt.function.DoubleProcedure procedure){  for (int i=buffers.length; --i >= 0; ) {    for (int w=buffers[i].weight(); --w >= 0; ) {      if (!(buffers[i].values.forEach(procedure)))       return false;    }  }  return true;}  }
class C{  public void onEvent(Event e){  if (e.getTarget().getId().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  }  String columnName=null;  String from_Info=null;  String to_Info=null;  int from_ID=0;  int to_ID=0;  for (int i=0; (i < m_columnName.length && from_ID == 0 && to_ID == 0); i++) {    Object value=m_from[i].getValue();    if (value != null) {      if (value instanceof Integer)       from_ID=((Integer)value).intValue(); else       continue;      value=m_to[i].getValue();      if (value != null && value instanceof Integer)       to_ID=((Integer)value).intValue(); else       from_ID=0;      if (from_ID != 0) {        columnName=m_columnName[i];        from_Info=m_from[i].getDisplay();        to_Info=m_to[i].getDisplay();      }    }  }  if (from_ID == 0 || from_ID == to_ID)   return;  m_msg=Msg.getMsg(Env.getCtx(),"MergeFrom") + " = " + from_Info+ "\n"+ Msg.getMsg(Env.getCtx(),"MergeTo")+ " = "+ to_Info;  if (!FDialog.ask(m_WindowNo,form,"MergeQuestion",m_msg))   return;  updateDeleteTable(columnName);  progressWindow=new BusyDialog();  progressWindow.setPage(form.getPage());  progressWindow.doHighlighted();  runnable=new MergeRunnable(columnName,from_ID,to_ID);  Clients.response(new AuEcho(form,"runProcess",null));}  }
class C{  public boolean addChild(E edge,V parent,V child,EdgeType edgeType){  Collection<V> vertices=delegate.getVertices();  if (vertices.contains(parent) == false) {    throw new IllegalArgumentException("Tree must already contain parent " + parent);  }  if (vertices.contains(child)) {    throw new IllegalArgumentException("Tree must not already contain child " + child);  }  vertex_depths.put(child,vertex_depths.get(parent) + 1);  return delegate.addEdge(edge,parent,child,edgeType);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void shutdown(){  super.shutdown();  clearConversation();}  }
class C{  private void initialize(){  this.add(getPopupMenuPurgeSites());  this.menuSelectionChangeListener=new MenuSelectionChangeListener();  addPopupMenuListener(new MenuSelectionListenerInstaller());}  }
class C{  public int argmax(){  if (isEmpty()) {    return -1;  }  float v=Float.NEGATIVE_INFINITY;  int a=-1;  for (int i=0; i < length; i++) {    if (!Float.isNaN(get(i)) && get(i) > v) {      v=get(i);      a=i;    }  }  return a;}  }
class C{  protected <E extends Identifiable>E mergeEntity(EntityManager em,E entity){  requireArgument(em != null,"The entity manager cannot be null.");  requireArgument(entity != null,"The entity cannot be null.");  return em.merge(entity);}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  public final boolean waitForRepliesUninterruptibly(long p_msecs) throws ReplyException {  return waitForRepliesUninterruptibly(p_msecs,getLatch(),true);}  }
class C{  public ServerReplyTuple replyToBlindedItems(ArrayList<byte[]> remoteBlindedItems) throws NoSuchAlgorithmException, IllegalArgumentException {  if (remoteBlindedItems == null) {    throw new IllegalArgumentException("Null remote blinded items to replyToBlindedItems!");  }  ArrayList<byte[]> doubleBlindedItems=new ArrayList<byte[]>(remoteBlindedItems.size());  for (  byte[] b : remoteBlindedItems) {    BigInteger i=new BigInteger(b);    BigInteger iDoubleBlind=i.modPow(x,DH_GROUP_PARAMETERS.getP());    doubleBlindedItems.add(iDoubleBlind.toByteArray());  }  java.util.Collections.shuffle(doubleBlindedItems,random);  MessageDigest md=MessageDigest.getInstance(HASH_ALGORITHM);  ArrayList<byte[]> hashedBlindedItems=new ArrayList<byte[]>(blindedItems.size());  for (  BigInteger i : blindedItems) {    md.reset();    hashedBlindedItems.add(md.digest(i.toByteArray()));  }  return new ServerReplyTuple(doubleBlindedItems,hashedBlindedItems);}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  public Matrix4d translationRotateScaleInvert(Vector3dc translation,Quaterniondc quat,double scale){  return translationRotateScaleInvert(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale,scale,scale);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.459 -0500",hash_original_method="74B12EE6F294A949F3B11979331384E6",hash_generated_method="0D81FC045ACCD1B8D12A1541C1C020DA") public boolean deleteSurroundingText(int leftLength,int rightLength){  if (DEBUG)   Log.v(TAG,"deleteSurroundingText " + leftLength + " / "+ rightLength);  final Editable content=getEditable();  if (content == null)   return false;  beginBatchEdit();  int a=Selection.getSelectionStart(content);  int b=Selection.getSelectionEnd(content);  if (a > b) {    int tmp=a;    a=b;    b=tmp;  }  int ca=getComposingSpanStart(content);  int cb=getComposingSpanEnd(content);  if (cb < ca) {    int tmp=ca;    ca=cb;    cb=tmp;  }  if (ca != -1 && cb != -1) {    if (ca < a)     a=ca;    if (cb > b)     b=cb;  }  int deleted=0;  if (leftLength > 0) {    int start=a - leftLength;    if (start < 0)     start=0;    content.delete(start,a);    deleted=a - start;  }  if (rightLength > 0) {    b=b - deleted;    int end=b + rightLength;    if (end > content.length())     end=content.length();    content.delete(b,end);  }  endBatchEdit();  return true;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private Set<LocalVariable> findLocalVariables(List<ValueBox> web,Local local,String expectedTypeDescriptor,Map<ValueBox,Unit> boxToUnit,Body body){  Set<LocalVariable> lvs=new HashSet<>();  if (local.getIndex() != -1) {    boolean incompatibleType=false;    String firstType=null;    for (    ValueBox box : web) {      LocalVariable lv=findLocalVariable(body,local.getIndex(),boxToUnit.get(box));      if (lv != null) {        lvs.add(lv);        if (expectedTypeDescriptor != null && lv.getDescriptor().equals(expectedTypeDescriptor)) {          incompatibleType=true;        }        if (firstType == null) {          firstType=lv.getDescriptor();        } else         if (!firstType.equals(lv.getDescriptor())) {          incompatibleType=true;        }      }    }    if (incompatibleType) {      lvs.clear();      return lvs;    }    if (lvs.size() > 1) {      String name=null;      for (      LocalVariable lv : lvs) {        if (name == null) {          name=lv.getName();        } else {          if (!lv.getName().equals(name)) {            throw new IllegalStateException("Found LocalVariables do " + "not refer to a variable with the same name: " + lvs);          }        }      }    }  }  return lvs;}  }
class C{  public TeXParser(String parseString,TeXFormula formula,boolean firstpass){  this(false,parseString,formula,firstpass);}  }
class C{  private static void lay32Bits(byte[] array,int index,int value){  for (int i=0; i < 4; i++) {    array[index + i]=(byte)(value >> (i * 8));  }}  }
class C{  public static void textLeft(double x,double y,String text){  if (text == null)   throw new NullPointerException();  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int hs=metrics.getDescent();  offscreen.drawString(text,(float)xs,(float)(ys + hs));  draw();}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=getActualCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void centerVertical(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new centerVerticalAction(nodes));  }  int nMinX=-1;  int nMaxX=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nX=getPositionX(nodes.get(iNode));    if (nX < nMinX || iNode == 0) {      nMinX=nX;    }    if (nX > nMaxX || iNode == 0) {      nMaxX=nX;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionX.set(nNode,(nMinX + nMaxX) / 2);  }}  }
class C{  @Override public void recovered(){  recoveryStrat=null;  recoveringAfterStartup=false;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean isAtom(){  final JSGraphQLElementType elementType=(JSGraphQLElementType)getNode().getElementType();  return JSGraphQLElementType.ATOM_KIND.equals(elementType.getKind());}  }
class C{  private void parseOption(Attributes attributes) throws SAXException {  boolean mustSupport;  String mustSupportValue=attributes.getValue("","mustSupport");  if (mustSupportValue != null) {    mustSupportValue=mustSupportValue.trim();    mustSupport=mustSupportValue.equals("1") || mustSupportValue.equals("true");  } else   mustSupport=false;  String name=Uri.resolve(NVDL_URI,attributes.getValue("","name"));  Option option=sr.getOption(name);  if (option == null) {    if (mustSupport)     error("unknown_option",name);  } else {    String arg=attributes.getValue("","arg");    try {      PropertyId pid=option.getPropertyId();      Object value=option.valueOf(arg);      Object oldValue=md.options.get(pid);      if (oldValue != null) {        value=option.combine(new Object[]{oldValue,value});        if (value == null)         error("duplicate_option",name); else         md.options.put(pid,value);      } else {        md.options.put(pid,value);        md.mustSupportOptions.addElement(new MustSupportOption(name,pid,locator == null ? null : new LocatorImpl(locator)));      }    } catch (    OptionArgumentPresenceException e) {      error(arg == null ? "option_requires_argument" : "option_unexpected_argument",name);    }catch (    OptionArgumentException e) {      if (arg == null)       error("option_requires_argument",name); else       error("option_bad_argument",name,arg);    }  }}  }
class C{  private void updatePodcastPublicationDateAndLastMediaUrl(Episode episode,Podcast podcast){  Date podcastPublicationDate=podcast.getPublicationDate();  boolean episodePubDateIsMoreRecent=episode.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(episode.getPublicationDate()));  if (episodePubDateIsMoreRecent) {    podcast.setPublicationDate(episode.getPublicationDate());    podcast.setLastEpisodeMediaUrl(episode.getMediaUrl());  }}  }
class C{  public void testSearchMultiThreaded() throws Exception {  doTestMultiThreads(false);}  }
class C{  public SolrClusterSizeResponse(final String clusterId,final Integer currentSize,final Integer targetSize,final String message,final Status status){  this.clusterId=clusterId;  this.status=status;  this.currentSize=currentSize;  this.targetSize=targetSize;  this.message=message;}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.744 -0500",hash_original_method="01C49558DED2DE24F896F908105CD756",hash_generated_method="CD93DA4C1C1B38B7502DF1AB3E17F9C3") public static char[] encodeHex(byte[] data){  int l=data.length;  char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=DIGITS[(0xF0 & data[i]) >>> 4];    out[j++]=DIGITS[0x0F & data[i]];  }  return out;}  }
class C{  public void readExif(byte[] jpeg) throws IOException {  readExif(new ByteArrayInputStream(jpeg));}  }
class C{  public Boolean isValidating(){  return validating;}  }
class C{  public static boolean intersectLineCircle(double a,double b,double c,double centerX,double centerY,double radius,Vector3d intersectionCenterAndHL){  double invDenom=1.0 / Math.sqrt(a * a + b * b);  double dist=(a * centerX + b * centerY + c) * invDenom;  if (-radius <= dist && dist <= radius) {    intersectionCenterAndHL.x=centerX + dist * a * invDenom;    intersectionCenterAndHL.y=centerY + dist * b * invDenom;    intersectionCenterAndHL.z=Math.sqrt(radius * radius - dist * dist);    return true;  }  return false;}  }
class C{  public static Cursor createCursor(Table table) throws IOException {  return table.newCursor().toCursor();}  }
class C{  public void testCustomEmptyHighlights() throws Exception {  indexAnalyzer.setPositionIncrementGap(10);  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,indexAnalyzer);  Document doc=new Document();  Field body=new Field("body","test this is.  another sentence this test has.  far away is that planet.",fieldType);  doc.add(body);  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher searcher=newSearcher(ir);  UnifiedHighlighter highlighter=new UnifiedHighlighter(searcher,indexAnalyzer);  highlighter.setMaxNoHighlightPassages(0);  Query query=new TermQuery(new Term("body","highlighting"));  int[] docIDs=new int[]{0};  String snippets[]=highlighter.highlightFields(new String[]{"body"},query,docIDs,new int[]{2}).get("body");  assertEquals(1,snippets.length);  assertNull(snippets[0]);  ir.close();}  }
class C{  private void visitFromCached(Document document,StoredFieldVisitor visitor) throws IOException {  for (  IndexableField f : document) {    final FieldInfo info=fieldInfos.fieldInfo(f.name());    final Status needsField=visitor.needsField(info);    if (needsField == Status.STOP)     return;    if (needsField == Status.NO)     continue;    if (f.binaryValue() != null) {      final BytesRef binaryValue=f.binaryValue();      final byte copy[]=new byte[binaryValue.length];      System.arraycopy(binaryValue.bytes,binaryValue.offset,copy,0,copy.length);      visitor.binaryField(info,copy);    } else     if (f.numericValue() != null) {      final Number numericValue=f.numericValue();      if (numericValue instanceof Double) {        visitor.doubleField(info,numericValue.doubleValue());      } else       if (numericValue instanceof Integer) {        visitor.intField(info,numericValue.intValue());      } else       if (numericValue instanceof Float) {        visitor.floatField(info,numericValue.floatValue());      } else       if (numericValue instanceof Long) {        visitor.longField(info,numericValue.longValue());      } else {        throw new AssertionError();      }    } else {      visitor.stringField(info,f.stringValue().getBytes(StandardCharsets.UTF_8));    }  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void flush(){}  }
class C{  @Override public void write(int b){}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  protected double gain(int i){  return dists[primary] - dists[i];}  }
class C{  public void changedUpdate(FlowView fv,DocumentEvent e,Rectangle alloc){  sync(fv);  super.changedUpdate(fv,e,alloc);}  }
class C{  public FitnessBasedArchive(FitnessEvaluator evaluator,int capacity,DominanceComparator comparator,Iterable<? extends Solution> iterable){  this(evaluator,capacity,comparator);  addAll(iterable);}  }
class C{  static byte[] toNpnProtocolsList(byte[]... npnProtocols){  if (npnProtocols.length == 0) {    throw new IllegalArgumentException("npnProtocols.length == 0");  }  int totalLength=0;  for (  byte[] s : npnProtocols) {    if (s.length == 0 || s.length > 255) {      throw new IllegalArgumentException("s.length == 0 || s.length > 255: " + s.length);    }    totalLength+=1 + s.length;  }  byte[] result=new byte[totalLength];  int pos=0;  for (  byte[] s : npnProtocols) {    result[pos++]=(byte)s.length;    for (    byte b : s) {      result[pos++]=b;    }  }  return result;}  }
class C{  public void testAddSiteAudit(){  System.out.println("addSiteAudit");  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  AuditCommand auditCommand=EasyMock.createMock(AuditCommand.class);  AuditServiceThread auditServiceThread=createMockAuditServiceThread(instance);  AuditServiceThreadFactory auditServiceThreadFactory=createMockAuditServiceThreadFactory(auditCommand,auditServiceThread);  instance.setAuditServiceThreadFactory(auditServiceThreadFactory);  instance.addSiteAudit(auditCommand);  try {    Thread.sleep(500);  } catch (  InterruptedException ex) {    Logger.getLogger(AuditServiceThreadQueueImplTest.class.getName()).log(Level.SEVERE,null,ex);  }  EasyMock.verify(auditServiceThread);  EasyMock.verify(auditServiceThreadFactory);}  }
class C{  public static boolean hasStatus(String receivedApdu,String statusCode) throws IOException {  return hasStatus(decodeHex(receivedApdu),decodeHex(statusCode));}  }
class C{  public float[] valueArray(float[] array){  if (array == null || array.length != size()) {    array=new float[count];  }  System.arraycopy(values,0,array,0,count);  return array;}  }
class C{  public void addRecipient(Email recipient){  addRepeatingExtension(recipient);}  }
class C{  public void shutdown(){  unregisterShutdownHook();  syncExecutor.shutdown();}  }
class C{  private void prepareData(){  final ISearcher searcher=(ISearcher)m_typeBox.getSelectedItem();  if (searcher != null) {    m_searchData=searcher.getSearchData(m_inputField.getText());  }}  }
class C{  public static void putValue2(){  try {    Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME);    r1.put("key-1","value-2");  } catch (  Exception ex) {    ex.printStackTrace();    org.apache.geode.test.dunit.Assert.fail("failed while region.put()",ex);  }}  }
class C{  public BaseComponent[] create(){  parts.add(current);  return parts.toArray(new BaseComponent[parts.size()]);}  }
class C{  public void concat(ByteBuffer buf){  if (buf == null)   return;  for (int i=0; i <= buf.last; i++) {    put(buf.buffer[i / SIZE][i % SIZE]);  }}  }
class C{  public ClientMessage sendMessageWithProperties(String address,byte[] body,Map<String,Object> properties){  return sendMessageWithProperties(SimpleString.toSimpleString(address),body,properties);}  }
class C{  @Override public void addVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.addVetoableChangeListener(name,vcl);}  }
class C{  public static int moduloSignedPowerOfTwo(int value,int spot){  if (ASSERTIONS)   assert (isSignedPowerOfTwo(spot));  if (spot == Integer.MIN_VALUE) {    return (value != Integer.MIN_VALUE) ? value : 0;  } else {    int s=(value >> 31);    return ((((value + s) ^ s) & (abs(spot) - 1)) + s) ^ s;  }}  }
class C{  void success(boolean success){  this.success=success;}  }
class C{  public void sendTestMessage(XBeeReply m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyReply(m,null);  return;}  }
class C{  public void paintColorChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void columnAdded(TableColumnModelEvent e){  resizeAndRepaint();}  }
class C{  @Override public void onCreate(Bundle icicle){  Log.v("Ringdroid","EditActivity OnCreate");  super.onCreate(icicle);  mPlayer=null;  mIsPlaying=false;  mAlertDialog=null;  mProgressDialog=null;  mLoadSoundFileThread=null;  mRecordAudioThread=null;  mSaveSoundFileThread=null;  Intent intent=getIntent();  mWasGetContentIntent=intent.getBooleanExtra("was_get_content_intent",false);  mFilename=intent.getData().toString().replaceFirst("file://","").replaceAll("%20"," ");  mSoundFile=null;  mKeyDown=false;  mHandler=new Handler();  loadGui();  mHandler.postDelayed(mTimerRunnable,100);  if (!mFilename.equals("record")) {    loadFromFile();  } else {    recordAudio();  }}  }
class C{  protected TextAttribute(String name){  super(name);  if (this.getClass() == TextAttribute.class) {    instanceMap.put(name,this);  }}  }
class C{  protected ViewBox(){}  }
class C{  public BoundType upperBoundType(){  return ubt;}  }
class C{  private boolean selectDataItems(int[] positions,boolean selectionStatus){  int count;  int max;  boolean positionsValid;  Arrays.sort(positions);  max=positions.length > 0 ? positions[positions.length - 1] : 0;  count=getListAdapter().getCount();  positionsValid=(max < count);  if (positionsValid) {    for (    int i : positions) {      getListView().setItemChecked(i,selectionStatus);    }  }  setMenuItemEnable(R.id.graph_actions,positions.length > 0 && selectionStatus);  return positionsValid;}  }
class C{  public static void writeBufferedImage(BufferedImage image,String format,OutputStream outputStream,float quality) throws IOException {  ImageEncoder imageEncoder=ImageEncoderFactory.newInstance(format,quality);  imageEncoder.encode(image,outputStream);}  }
class C{  @Override W writeThroughImpl(ActionRunner<K,V> actionRunner,Object arg){  if (writeThrough)   return super.writeThroughImpl(actionRunner,arg); else   return null;}  }
class C{  @Deprecated protected String normalizeMimeTypeParameter(String parameterName,String parameterValue){  return parameterValue;}  }
class C{  public static boolean typeMatches(Class<?> type,EclipseNode node,TypeReference typeRef){  if (typeRef == null || typeRef.getTypeName() == null || typeRef.getTypeName().length == 0)   return false;  String lastPartA=new String(typeRef.getTypeName()[typeRef.getTypeName().length - 1]);  String lastPartB=type.getSimpleName();  if (!lastPartA.equals(lastPartB))   return false;  String typeName=toQualifiedName(typeRef.getTypeName());  TypeResolver resolver=new TypeResolver(node.getImportList());  return resolver.typeMatches(node,type.getName(),typeName);}  }
class C{  private List safeLdapSearch(final String base,final String ldapQuery,final SearchControls searchControls,final AttributesMapper mapper){  ValidationFailureReason[] failureReason=new ValidationFailureReason[1];  return safeLdapSearch(base,ldapQuery,searchControls,mapper,failureReason);}  }
class C{  public static synchronized void stopRecording(){  if (sStats != null) {    System.err.println("Shutting down monitoring");    sStats.terminate();    sThread.interrupt();    Thread.yield();  }}  }
class C{  public static void acc_realMultiply(AccurateValue n1,AccurateValue n2,AccurateValue result){  int i, m, n, off;  int pos;  acc_align(n1,n2);  result.digits=new int[n1.digits.length * 2 + 1];  pos=result.digits.length - 1;  for (i=0; i < result.digits.length; i++) {    result.digits[i]=0;  }  for (m=n1.digits.length - 1; m >= 0; m--) {    off=n1.digits.length - 1 - m;    if (n1.digits[m] == 0) {      continue;    }    for (n=n2.digits.length - 1; n >= 0; n--) {      int prod=n1.digits[m] * n2.digits[n];      result.digits[pos - off]+=prod % 10;      if (result.digits[pos - off] > 9) {        do {          result.digits[pos - off]-=10;          result.digits[pos - off - 1]++;        } while (result.digits[pos - off] > 9);      }      if (prod > 9) {        result.digits[pos - off - 1]+=prod / 10;      }      off++;    }  }  result.acc_reduceInner();}  }
class C{  protected void printNode(MapNode node,DefaultEntityViewInfo pInfo){  int x=transformer.x(node.getLon());  int y=transformer.y(node.getLat());  int width=0;  if (pInfo.icon != null) {    width=Math.round(pInfo.icon.size * displayFactorSym);    pInfo.icon.draw(imageBdr,x,y,displayFactorSym);  }  if (scale >= pInfo.minNameScale * displayFactor) {    String name=node.getName();    if (name != null && pInfo.nameColor != null) {      NameInfo info=new NameInfo(name,pInfo.nameColor,pInfo.printOrder);      info.x=x + width;      info.y=y + width / 4;      nameInfoBuffer.add(info);    }  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.dataDecoration=new EasyBorderDividerItemDecoration(this.getResources().getDimensionPixelOffset(R.dimen.data_border_divider_height),this.getResources().getDimensionPixelOffset(R.dimen.data_border_padding_infra_spans));  this.welfareDecoration=new EasyBorderDividerItemDecoration(this.getResources().getDimensionPixelOffset(R.dimen.welfare_border_divider_height),this.getResources().getDimensionPixelOffset(R.dimen.welfare_border_padding_infra_spans));  this.mainRv.addItemDecoration(this.dataDecoration);  this.mLinearLayoutManager=(LinearLayoutManager)this.mainRv.getLayoutManager();  this.mStaggeredGridLayoutManager=new StaggeredGridLayoutManager(2,StaggeredGridLayoutManager.VERTICAL);  this.mActionBarHelper.setDrawerTitle(this.getResources().getString(R.string.app_menu));  UmengUpdateAgent.update(this);}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public void updateUnderAllocatedMipsForCloudlet(ResCloudlet rcl,double mips){  if (getUnderAllocatedMips().containsKey(rcl.getUid())) {    mips+=getUnderAllocatedMips().get(rcl.getUid());  }  getUnderAllocatedMips().put(rcl.getUid(),mips);}  }
class C{  public boolean hasCell(DF_LatticeCell cell){  for (  DF_LatticeCell operand : operands) {    if (operand == cell) {      return true;    }  }  return false;}  }
class C{  public LiquidCargoBay(double space,int doors,int bayNumber){  totalSpace=space * 0.91;  weight=space;  currentSpace=space * 0.91;  this.doors=doors;  this.bayNumber=bayNumber;}  }
class C{  public void decodeJBIG2(File file) throws IOException, JBIG2Exception {  decodeJBIG2(file.getAbsolutePath());}  }
class C{  public Map<Object,Object> map(){  return map;}  }
class C{  public void testStressAllocationContextRecycling(){  final Journal store=(Journal)getStore(1);  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final IAllocationContext cntxt=rw.newAllocationContext(true);    final int allocs=100000;    final Random ran=new Random();    for (int r=0; r < 20; r++) {      ArrayList<Integer> addrs=new ArrayList<Integer>();      for (int a=0; a < allocs; a++) {        addrs.add(rw.alloc(50,cntxt));      }      final PseudoRandom ps=new PseudoRandom(allocs,ran.nextInt(allocs));      for (      int a : addrs) {        rw.free(addrs.get(ps.next()),50,cntxt);      }    }    assertTrue(rw.getFixedAllocatorCount() < 20);    if (log.isInfoEnabled()) {      final StringBuilder str=new StringBuilder();      rw.showAllocators(str);      log.info(str);    }    store.commit();  }  finally {    store.destroy();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void detach(){  ClassPool cp=getClassPool();  CtClass obj=cp.removeCached(getName());  if (obj != this)   cp.cacheCtClass(getName(),obj,false);}  }
class C{  private static int findAnyZero(float[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    float middleValue=a[middle];    if (middleValue < 0.0f) {      low=middle + 1;    } else     if (middleValue > 0.0f) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  public static boolean reThrowIfNotNull(@Nullable Throwable e){  if (e != null) {    if (e instanceof RuntimeException) {      throw (RuntimeException)e;    } else {      throw new RuntimeException(e);    }  }  return true;}  }
class C{  public NamedIcon(NamedIcon pOld){  this(pOld.mURL,pOld.mName);}  }
class C{  public JFastLabel(){  this(null);}  }
class C{  protected boolean isEndNode(DelphiPMDNode node){  return node.getText().equals(end);}  }
class C{  public void reset(){  _xml.reset();  _outputStream=null;  _writer=null;}  }
class C{  private void initWidget(){  this.widgetCard=(ImageView)findViewById(R.id.widget_week_card);  widgetCard.setVisibility(View.GONE);  this.widgetWeeks=new TextView[]{(TextView)findViewById(R.id.widget_week_week_1),(TextView)findViewById(R.id.widget_week_week_2),(TextView)findViewById(R.id.widget_week_week_3),(TextView)findViewById(R.id.widget_week_week_4),(TextView)findViewById(R.id.widget_week_week_5)};  this.widgetIcons=new ImageView[]{(ImageView)findViewById(R.id.widget_week_icon_1),(ImageView)findViewById(R.id.widget_week_icon_2),(ImageView)findViewById(R.id.widget_week_icon_3),(ImageView)findViewById(R.id.widget_week_icon_4),(ImageView)findViewById(R.id.widget_week_icon_5)};  this.widgetTemps=new TextView[]{(TextView)findViewById(R.id.widget_week_temp_1),(TextView)findViewById(R.id.widget_week_temp_2),(TextView)findViewById(R.id.widget_week_temp_3),(TextView)findViewById(R.id.widget_week_temp_4),(TextView)findViewById(R.id.widget_week_temp_5)};  ImageView wallpaper=(ImageView)findViewById(R.id.activity_create_widget_week_wall);  wallpaper.setImageDrawable(WallpaperManager.getInstance(this).getDrawable());  this.container=(CoordinatorLayout)findViewById(R.id.activity_create_widget_week_container);  ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text,nameList);  adapter.setDropDownViewResource(R.layout.spinner_text);  Spinner locationSpinner=(Spinner)findViewById(R.id.activity_create_widget_week_spinner);  locationSpinner.setAdapter(adapter);  locationSpinner.setOnItemSelectedListener(this);  this.showCardSwitch=(Switch)findViewById(R.id.activity_create_widget_week_showCardSwitch);  showCardSwitch.setOnCheckedChangeListener(new ShowCardSwitchCheckListener());  this.blackTextSwitch=(Switch)findViewById(R.id.activity_create_widget_week_blackTextSwitch);  blackTextSwitch.setOnCheckedChangeListener(new BlackTextSwitchCheckListener());  Button doneButton=(Button)findViewById(R.id.activity_create_widget_week_doneButton);  doneButton.setOnClickListener(this);}  }
class C{  public static String formatTime(long millis){  if (millis < 0) {    throw new IllegalArgumentException("Duration must be greater than zero!");  }  long days=TimeUnit.MILLISECONDS.toDays(millis);  millis-=TimeUnit.DAYS.toMillis(days);  long hours=TimeUnit.MILLISECONDS.toHours(millis);  millis-=TimeUnit.HOURS.toMillis(hours);  long minutes=TimeUnit.MILLISECONDS.toMinutes(millis);  millis-=TimeUnit.MINUTES.toMillis(minutes);  long seconds=TimeUnit.MILLISECONDS.toSeconds(millis);  StringBuilder sb=new StringBuilder(64);  if (days > 0) {    sb.append(days);    if (days > 1)     sb.append(" Days "); else     sb.append(" Day ");  }  sb.append(hours);  if (minutes > 9)   sb.append(":"); else   sb.append(":0");  sb.append(minutes);  if (seconds > 9)   sb.append(":"); else   sb.append(":0");  sb.append(seconds);  return (sb.toString());}  }
class C{  public void afterReturning(Object returnValue,Method method,Object[] args,Object target) throws Throwable {  User user=(User)args[0];  if (user.getVersion() != null) {    Authentication auth=SecurityContextHolder.getContext().getAuthentication();    AuthenticationTrustResolver resolver=new AuthenticationTrustResolverImpl();    boolean signupUser=resolver.isAnonymous(auth);    if (auth != null && !signupUser) {      User currentUser=getCurrentUser(auth);      if (currentUser.getId().equals(user.getId())) {        auth=new UsernamePasswordAuthenticationToken(user,user.getPassword(),user.getAuthorities());        SecurityContextHolder.getContext().setAuthentication(auth);      }    }  }}  }
class C{  public double eval(double params[]){  return (Math.atan(params[0]));}  }
class C{  void update(long timeNanos,int rows){  count++;  executionTimeMinNanos=Math.min(timeNanos,executionTimeMinNanos);  executionTimeMaxNanos=Math.max(timeNanos,executionTimeMaxNanos);  rowCountMin=Math.min(rows,rowCountMin);  rowCountMax=Math.max(rows,rowCountMax);  double rowDelta=rows - rowCountMean;  rowCountMean+=rowDelta / count;  rowCountM2+=rowDelta * (rows - rowCountMean);  double timeDelta=timeNanos - executionTimeMeanNanos;  executionTimeMeanNanos+=timeDelta / count;  executionTimeM2Nanos+=timeDelta * (timeNanos - executionTimeMeanNanos);  executionTimeCumulativeNanos+=timeNanos;  rowCountCumulative+=rows;  lastUpdateTime=System.currentTimeMillis();}  }
class C{  protected AbstractCategoryItemLabelGenerator(String labelFormat,NumberFormat formatter){  this(labelFormat,formatter,NumberFormat.getPercentInstance());}  }
class C{  public Date readDate(Type target){  long ms=(long)buf.getDouble();  @SuppressWarnings("unused") short timeZoneMins=buf.getShort();  Date date=new Date(ms);  storeReference(date);  return date;}  }
class C{  public ParallelQueueApplier(){}  }
class C{  public static void dumpMyThreads(){  OSProcess.printStacks(0,false);}  }
class C{  private double[] parseDoubles(String[] strings,String name){  double[] values=new double[strings.length];  for (int i=0; i < values.length; i++) {    values[i]=parseDouble(strings[i],name);  }  return values;}  }
class C{  public static String basic(String userName,String password){  try {    String usernameAndPassword=userName + ":" + password;    byte[] bytes=usernameAndPassword.getBytes("ISO-8859-1");    String encoded=ByteString.of(bytes).base64();    return "Basic " + encoded;  } catch (  UnsupportedEncodingException e) {    throw new AssertionError();  }}  }
class C{  public int highKey(){  return stream.readInt(alignedBci + OFFSET_TO_HIGH_KEY);}  }
class C{  public FastVector(int capacity){  m_Objects=new Object[capacity];  m_Size=0;  m_CapacityIncrement=1;  m_CapacityMultiplier=2;}  }
class C{  public void drawString(String str,int x,int y){  g.drawString(str,x,y);}  }
class C{  public void run(){  final List<MgmtSoftwareModuleType> createdSoftwareModuleTypes=softwareModuleTypeResource.createSoftwareModuleTypes(new SoftwareModuleTypeBuilder().key(SM_MODULE_TYPE).name(SM_MODULE_TYPE).maxAssignments(1).build()).getBody();  distributionSetTypeResource.createDistributionSetTypes(new DistributionSetTypeBuilder().key(DS_MODULE_TYPE).name(DS_MODULE_TYPE).mandatorymodules(createdSoftwareModuleTypes.get(0).getModuleId()).build()).getBody();  final List<MgmtDistributionSet> distributionSetsRest=distributionSetResource.createDistributionSets(new DistributionSetBuilder().name("rollout-example").version("1.0.0").type(DS_MODULE_TYPE).build()).getBody();  final List<MgmtSoftwareModule> softwareModulesRest=softwareModuleResource.createSoftwareModules(new SoftwareModuleBuilder().name("firmware").version("1.0.0").type(SM_MODULE_TYPE).build()).getBody();  distributionSetResource.assignSoftwareModules(distributionSetsRest.get(0).getDsId(),new SoftwareModuleAssigmentBuilder().id(softwareModulesRest.get(0).getModuleId()).build());  targetResource.createTargets(new TargetBuilder().controllerId("00-FF-AA-0").name("00-FF-AA-0").description("Targets used for rollout example").buildAsList(10));  final MgmtRolloutResponseBody rolloutResponseBody=rolloutResource.create(new RolloutBuilder().name("MyRollout").groupSize(2).targetFilterQuery("name==00-FF-AA-0*").distributionSetId(distributionSetsRest.get(0).getDsId()).successThreshold("80").errorThreshold("50").build()).getBody();  rolloutResource.start(rolloutResponseBody.getRolloutId(),false);}  }
class C{  private void populateVolumeExportInfo(StorageCenterAPI api,String volumeId,ScMapping map,Map<String,HostExportInfo> result,Map<String,ScServer> serverCache,Map<String,Initiator> serverPortCache,Map<String,StoragePort> portCache) throws StorageCenterAPIException {  ScServer server;  Initiator initiator;  StoragePort port;  if (serverCache.containsKey(map.server.instanceId)) {    server=serverCache.get(map.server.instanceId);  } else {    server=api.getServerDefinition(map.server.instanceId);    serverCache.put(server.instanceId,server);  }  if (serverPortCache.containsKey(map.serverHba.instanceId)) {    initiator=serverPortCache.get(map.serverHba.instanceId);  } else {    ScServerHba hba=api.getServerHba(map.serverHba.instanceId);    initiator=getInitiatorInfo(api,server,hba);    serverPortCache.put(hba.instanceId,initiator);  }  if (portCache.containsKey(map.controllerPort.instanceId)) {    port=portCache.get(map.controllerPort.instanceId);  } else {    ScControllerPort scPort=api.getControllerPort(map.controllerPort.instanceId);    port=util.getStoragePortForControllerPort(api,scPort);    portCache.put(scPort.instanceId,port);  }  String hostName=initiator.getHostName();  if (initiator.getInitiatorType() == Type.Cluster) {    hostName=initiator.getClusterName();  }  HostExportInfo exportInfo;  if (result.containsKey(hostName)) {    exportInfo=result.get(hostName);  } else {    exportInfo=new HostExportInfo(hostName,new ArrayList<>(),new ArrayList<>(),new ArrayList<>());  }  if (!exportInfo.getStorageObjectNativeIds().contains(volumeId)) {    exportInfo.getStorageObjectNativeIds().add(volumeId);  }  if (!exportInfo.getTargets().contains(port)) {    exportInfo.getTargets().add(port);  }  if (!exportInfo.getInitiators().contains(initiator)) {    exportInfo.getInitiators().add(initiator);  }  result.put(hostName,exportInfo);}  }
class C{  public int intValue(){  return (int)longValue;}  }
class C{  public CircularRedirectException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public ZDT6(){  this(10);}  }
class C{  public void runTest(){  try {    assureResultsDirectoryExists(RESULTS_DIR);    ExtendedProperties c=new ExtendedProperties(TEST_CONFIG);    FileWriter result=new FileWriter(getFileName(RESULTS_DIR,"output","res"));    message(result,"Testing order of keys ...");    showIterator(result,c.getKeys());    message(result,"Testing retrieval of CSV values ...");    showVector(result,c.getVector("resource.loader"));    message(result,"Testing subset(prefix).getKeys() ...");    ExtendedProperties subset=c.subset("file.resource.loader");    showIterator(result,subset.getKeys());    message(result,"Testing getVector(prefix) ...");    showVector(result,subset.getVector("path"));    message(result,"Testing getString(key) ...");    result.write(c.getString("config.string.value"));    result.write("\n\n");    message(result,"Testing getBoolean(key) ...");    result.write(new Boolean(c.getBoolean("config.boolean.value")).toString());    result.write("\n\n");    message(result,"Testing getByte(key) ...");    result.write(new Byte(c.getByte("config.byte.value")).toString());    result.write("\n\n");    message(result,"Testing getShort(key) ...");    result.write(new Short(c.getShort("config.short.value")).toString());    result.write("\n\n");    message(result,"Testing getInt(key) ...");    result.write(new Integer(c.getInt("config.int.value")).toString());    result.write("\n\n");    message(result,"Testing getLong(key) ...");    result.write(new Long(c.getLong("config.long.value")).toString());    result.write("\n\n");    message(result,"Testing getFloat(key) ...");    result.write(new Float(c.getFloat("config.float.value")).toString());    result.write("\n\n");    message(result,"Testing getDouble(key) ...");    result.write(new Double(c.getDouble("config.double.value")).toString());    result.write("\n\n");    message(result,"Testing escaped-comma scalar...");    result.write(c.getString("escape.comma1"));    result.write("\n\n");    message(result,"Testing escaped-comma vector...");    showVector(result,c.getVector("escape.comma2"));    result.write("\n\n");    result.flush();    result.close();    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"output","res","cmp")) {      fail("Output incorrect.");    }  } catch (  Exception e) {    System.err.println("Cannot setup CommonsExtPropTestCase!");    e.printStackTrace();    System.exit(1);  }}  }
class C{  public void deleteDatabase() throws IOException {  if (isOpen)   throw new IllegalStateException("db must be already closed");  for (  ITimmyTable tt : tables)   tt.deleteTableFiles();}  }
class C{  public void sendErrorMessage(final String tenant,final List<String> updateResultMessages,final Long actionId){  final Message message=createActionStatusMessage(tenant,ActionStatus.ERROR,updateResultMessages,actionId);  sendMessage(spExchange,message);}  }
class C{  public <T>StandardMBean(T implementation,Class<T> mbeanInterface) throws NotCompliantMBeanException {  construct(implementation,mbeanInterface,false,false);}  }
class C{  public static DoubleSolenoid doubleSolenoid(int pcmID,int solenoidFwdChannel,int solenoidRevChannel){  return solenoidRegistrar.fetch(new SolenoidID(pcmID,solenoidFwdChannel,solenoidRevChannel),DoubleSolenoid.class,null);}  }
class C{  protected SAXModifyException(Throwable cause){  super(cause);}  }
class C{  public JSONArray put(int index,Map<String,Object> value) throws JSONException {  this.put(index,new JSONObject(value));  return this;}  }
class C{  public TokenMap(int size,boolean ignoreCase){  this.size=size;  tokenMap=new TokenMapToken[size];  this.ignoreCase=ignoreCase;}  }
class C{  static int measureIndentationUnits(IDocument document,int lineOfInvocationOffset,int lineOffset,IJavaProject project) throws BadLocationException {  Map<?,?> options=project.getOptions(true);  String lineText=document.get(lineOffset,document.getLineLength(lineOfInvocationOffset));  int indentationUnits=IndentManipulation.measureIndentUnits(lineText,IndentManipulation.getTabWidth(options),IndentManipulation.getIndentWidth(options));  return indentationUnits;}  }
class C{  public void removeDateChangeListener(DateChangeListener listener){  dateChangeListeners.remove(listener);}  }
class C{  public boolean isServiceDiscoveryCapable(){  return (deviceCapability & DEVICE_CAPAB_SERVICE_DISCOVERY) != 0;}  }
class C{  public LatLonPoint(String name,double latitude,double longitude){  super(name,TYPE);  setLocationValue(latitude,longitude);}  }
class C{  private PhoneLookup(){}  }
class C{  public void columnSelectionChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting()) {    return;  }  ListSelectionModel selectionModel=(ListSelectionModel)e.getSource();  DataSet dataSet=getDataSet();  dataSet.clearSelection();  if (!getRowSelectionAllowed()) {    for (int i=0; i < dataSet.getNumColumns(); i++) {      if (selectionModel.isSelectedIndex(i + 2)) {        dataSet.setSelected(dataSet.getVariable(i),true);      }    }  }}  }
class C{  public MenuFactory(ResourceBundle rb,ActionMap am){  super(rb);  actions=am;  buttonGroup=null;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void clearCache(){synchronized (classCache) {    for (    Class cl : classCache.values()) {      InvokerHelper.removeClass(cl);    }    classCache.clear();  }synchronized (sourceCache) {    sourceCache.clear();  }}  }
class C{  public static int checkEqualCoords(BigInteger c,BigInteger d1,BigInteger d2,BigInteger p,BigInteger q,SMState state,int version) throws SMException {  BigInteger temp2=state.g3.modPow(d1,MODULUS_S);  BigInteger temp3=p.modPow(c,MODULUS_S);  BigInteger temp1=temp2.multiply(temp3).mod(MODULUS_S);  temp2=state.g1.modPow(d1,MODULUS_S);  temp3=state.g2.modPow(d2,MODULUS_S);  temp2=temp2.multiply(temp3).mod(MODULUS_S);  temp3=q.modPow(c,MODULUS_S);  temp2=temp3.multiply(temp2).mod(MODULUS_S);  BigInteger cprime=hash(version,temp1,temp2);  return c.compareTo(cprime);}  }
class C{  QuickSelectSketch(final int nomEntries,final int lgResizeFactor,final float samplingProbability,final SummaryFactory<S> summaryFactory){  this(nomEntries,lgResizeFactor,samplingProbability,summaryFactory,1 << startingSubMultiple(Integer.numberOfTrailingZeros(ceilingPowerOf2(nomEntries) * 2),ResizeFactor.getRF(lgResizeFactor),MIN_LG_ARR_LONGS));}  }
class C{  protected void clearOutEvents(){}  }
class C{  public boolean lazy_pts(){  return soot.PhaseOptions.getBoolean(options,"lazy-pts");}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("Save raw split evaluator output.","D",0,"-D"));  result.addElement(new Option("\tThe filename where raw output will be stored.\n" + "\tIf a directory name is specified then then individual\n" + "\toutputs will be gzipped, otherwise all output will be\n"+ "\tzipped to the named file. Use in conjuction with -D.\n"+ "\t(default: splitEvalutorOut.zip)","O",1,"-O <file/directory name/path>"));  result.addElement(new Option("\tThe full class name of a SplitEvaluator.\n" + "\teg: weka.experiment.ClassifierSplitEvaluator","W",1,"-W <class name>"));  result.addElement(new Option("\tSet when data is to be randomized.","R",0,"-R"));  result.addElement(new Option("\tThe directory containing the test sets.\n" + "\t(default: current directory)","dir",1,"-dir <directory>"));  result.addElement(new Option("\tAn optional prefix for the test sets (before the relation name).\n" + "(default: empty string)","prefix",1,"-prefix <string>"));  result.addElement(new Option("\tThe suffix to append to the test set.\n" + "\t(default: " + DEFAULT_SUFFIX + ")","suffix",1,"-suffix <string>"));  result.addElement(new Option("\tThe regular expression to search the relation name with.\n" + "\tNot used if an empty string.\n" + "\t(default: empty string)","find",1,"-find <regular expression>"));  result.addElement(new Option("\tThe replacement string for the all the matches of '-find'.\n" + "\t(default: empty string)","replace",1,"-replace <string>"));  if ((m_SplitEvaluator != null) && (m_SplitEvaluator instanceof OptionHandler)) {    result.addElement(new Option("","",0,"\nOptions specific to split evaluator " + m_SplitEvaluator.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_SplitEvaluator).listOptions()));  }  return result.elements();}  }
class C{  @Override public String globalInfo(){  return "Stopwords list based on Rainbow:\n" + "http://www.cs.cmu.edu/~mccallum/bow/rainbow/";}  }
class C{  public boolean isAutoStart(){  return mAutoStart;}  }
class C{  public boolean isSetExtendAttrs(){  return this.extendAttrs != null;}  }
class C{  public void removeFromList(List<ExprNodePropOrStreamDesc> items){  Iterator<ExprNodePropOrStreamDesc> item=items.iterator();  for (; item.hasNext(); ) {    if (findItem(item.next())) {      item.remove();    }  }}  }
class C{  public static LuaValue toTable(List<?> params){  if (params != null) {    final LuaTable result=new LuaTable();    if (params.size() > 0) {      Object value=null;      for (int i=0; i < params.size(); i++) {        value=params.get(i);        result.set(i + 1,toLuaValue(value));      }    }    return result;  }  return LuaValue.NIL;}  }
class C{  public void validateInvalid(SampleReader reader){  Assert.assertTrue(reader.hasNext());  reader.next();  Assert.assertTrue(reader.hasNext());  reader.next();}  }
class C{  protected void restoreInputsInSymbolTable(){  Map<String,Object> inputs=script.getInputs();  Map<String,Metadata> inputMetadata=script.getInputMetadata();  LocalVariableMap symbolTable=script.getSymbolTable();  Set<String> inputVariables=script.getInputVariables();  for (  String inputVariable : inputVariables) {    if (symbolTable.get(inputVariable) == null) {      Metadata m=inputMetadata.get(inputVariable);      script.in(inputVariable,inputs.get(inputVariable),m);    }  }}  }
class C{  @Override public Element addElement(DescriptorTag tag,Element child,Element parent){  Element importedNode=(Element)child.detach();  Element refNode=getInsertionPointFor(tag,parent.getName());  int idx=parent.getContent().indexOf(refNode);  if (idx == -1) {    if (!containsElement(parent.getChildren(),importedNode)) {      parent.addContent(importedNode);    }  } else {    while (idx > 0 && parent.getContent(idx - 1) instanceof Comment) {      idx--;    }    if (!containsElement(parent.getChildren(),importedNode)) {      parent.addContent(idx,importedNode);    }  }  return importedNode;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  boolean isLabeled(){  return label != null;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  @Deprecated private int[] assignTopics(final double[] topicDistribution){  double threshold=Math.max(Collections.max(Arrays.asList(ArrayUtils.toObject(topicDistribution))).doubleValue() / maxTopicAssignments,minTopicProb);  List<Integer> indexes=new ArrayList<>(topicDistribution.length);  for (int i=0; i < topicDistribution.length; i++) {    if (topicDistribution[i] >= threshold) {      indexes.add(i);    }  }  if (indexes.size() > maxTopicAssignments) {    Collections.sort(indexes,null);    while (indexes.size() > maxTopicAssignments) {      indexes.remove(0);    }  }  return ArrayUtils.toPrimitive(indexes.toArray(new Integer[indexes.size()]));}  }
class C{  public ECKey decompress(){  if (!pub.isCompressed())   return this; else   return new ECKey(priv,decompressPoint(pub.get()));}  }
class C{  public void endTransaction(){  dbOpenHelper.getWritableDatabase().endTransaction();}  }
class C{  public boolean buildIfSelected(){  if (isBuildEnabled() && !isBuilt()) {    return build();  }  log.debug("Train (" + getName() + ") not selected or already built, skipping build");  return false;}  }
class C{  public LegendItemBlockContainer(Arrangement arrangement,int datasetIndex,int series){  super(arrangement);  this.datasetIndex=datasetIndex;  this.series=series;}  }
class C{  public static ArrayList<Page> AspectPages(IAspectType aspect,Item manualType){  ArrayList<Page> newPages=new ArrayList<>();  int height=0;  ArrayList<ManualWidgetBase> widgets=new ArrayList<>();  widgets.add(new AspectWidget(18,12,aspect,1f));  widgets.add(new TextWidget(38,14,"<font:custom>" + aspect.getName() + "</font>",true));  height+=24;  widgets.add(new TextWidget(18,12 + height,"manual." + aspect.getName().toLowerCase() + ".description"));  TextContainer textContainer=parseTextContainer(new TextContainer(116,144,TranslationHelper.translateToLocal("manual." + aspect.getName().toLowerCase() + ".description"),Minecraft.getMinecraft().fontRendererObj));  height+=textContainer.getPages().get(0).getSegments().get(textContainer.getPages().get(0).getSegments().size() - 1).y + 18;  if (height + 18 + 16 < 152) {    widgets.add(new TextWidget(18,12 + height,"manual.aspect.found.in"));    height+=16;    widgets.add(new AspectItemSlideShowWidget(18,12 + height,aspect));    height+=18;  } else {    newPages.add(new Page(aspect.getName().toLowerCase(),widgets,false,manualType).setParent().setAspect(aspect).setLocalizedPageName(aspect.getName()));    widgets.add(new TextWidget(18,12 + height,"manual.aspect.found.in"));    height+=16;    widgets.add(new AspectItemSlideShowWidget(18,12 + height,aspect));    height+=18;  }  if (widgets.size() > 0) {    if (newPages.size() > 0)     newPages.add(new Page(aspect.getName().toLowerCase(),widgets,false,manualType).setAspect(aspect).setLocalizedPageName(aspect.getName())); else     newPages.add(new Page(aspect.getName().toLowerCase(),widgets,false,manualType).setParent().setAspect(aspect).setLocalizedPageName(aspect.getName()));  }  return newPages;}  }
class C{  public OpenMrsServer(OpenMrsConnectionDetails connectionDetails,RequestFactory requestFactory,Gson gson){  mConnectionDetails=connectionDetails;  mRequestFactory=requestFactory;  mGson=gson;}  }
class C{  public DateTimeZoneBuilder addCutover(int year,char mode,int monthOfYear,int dayOfMonth,int dayOfWeek,boolean advanceDayOfWeek,int millisOfDay){  if (iRuleSets.size() > 0) {    OfYear ofYear=new OfYear(mode,monthOfYear,dayOfMonth,dayOfWeek,advanceDayOfWeek,millisOfDay);    RuleSet lastRuleSet=iRuleSets.get(iRuleSets.size() - 1);    lastRuleSet.setUpperLimit(year,ofYear);  }  iRuleSets.add(new RuleSet());  return this;}  }
class C{  private static void checkArguments(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  checkArguments(debuggerProvider);  Preconditions.checkNotNull(rows,"IE01358: Rows argument can't be null");}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public synchronized void reset() throws IOException {  throw new IOException("Reset not supported");}  }
class C{  boolean isPersisted(int id){  int bit=1 << id;  return (persisted & bit) != 0;}  }
class C{  public void breedPopChunk(Population newpop,EvolutionState state,int[] numinds,int[] from,int threadnum){  for (int subpop=0; subpop < newpop.subpops.length; subpop++) {    count[threadnum]=0;    BreedingPipeline bp=(BreedingPipeline)newpop.subpops[subpop].species.pipe_prototype.clone();    if (!bp.produces(state,newpop,subpop,threadnum))     state.output.fatal("The Breeding Pipeline of subpopulation " + subpop + " does not produce individuals of the expected species "+ newpop.subpops[subpop].species.getClass().getName()+ " or fitness "+ newpop.subpops[subpop].species.f_prototype);    bp.prepareToProduce(state,subpop,threadnum);    if (count[threadnum] == 0)     state.output.warnOnce("Whoa!  Breeding Pipeline for subpop " + subpop + " doesn't have an ESSelection, but is being used by MuCommaLambdaBreeder or MuPlusLambdaBreeder.  That's probably not right.");    count[threadnum]=0;    int upperbound=from[subpop] + numinds[subpop];    for (int x=from[subpop]; x < upperbound; x++) {      if (bp.produce(1,1,x,subpop,newpop.subpops[subpop].individuals,state,threadnum) != 1)       state.output.fatal("Whoa! Breeding Pipeline for subpop " + subpop + " is not producing one individual at a time, as is required by the MuLambda strategies.");      count[threadnum]++;    }    bp.finishProducing(state,subpop,threadnum);  }}  }
class C{  public IntDict(BufferedReader reader){  String[] lines=PApplet.loadStrings(reader);  keys=new String[lines.length];  values=new int[lines.length];  for (int i=0; i < lines.length; i++) {    String[] pieces=PApplet.split(lines[i],'\t');    if (pieces.length == 2) {      keys[count]=pieces[0];      values[count]=PApplet.parseInt(pieces[1]);      count++;    }  }}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitLocalVariable(name,desc,signature,start.getLabel(),end.getLabel(),index);}  }
class C{  @Inject public NotificationEntityChangeListener(NotificationInterface notificationInterface,TypeSystem typeSystem){  this.notificationInterface=notificationInterface;  this.typeSystem=typeSystem;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public CActionSearchOnlyVisibleNodes(final ZyGraph graph){  super("Visible Only Search");  m_graph=graph;}  }
class C{  void drawPaddle(){  mPaddle.draw();}  }
class C{  public static String releaseLicense(final String license){  return permissions.remove(license);}  }
class C{  public DViewAsn1Dump(JDialog parent,PublicKey publicKey) throws Asn1Exception, IOException {  super(res.getString("DViewAsn1Dump.PublicKey.Title"));  this.publicKey=publicKey;  initComponents();}  }
class C{  protected TextureData readTexture(java.net.URL url,String textureFormat,boolean useMipMaps){  try {    if ("image/dds".equalsIgnoreCase(textureFormat) && !url.toString().toLowerCase().endsWith("dds")) {      DXTCompressionAttributes attributes=DDSCompressor.getDefaultCompressionAttributes();      attributes.setBuildMipmaps(useMipMaps);      ByteBuffer buffer=DDSCompressor.compressImageURL(url,attributes);      return OGLUtil.newTextureData(Configuration.getMaxCompatibleGLProfile(),WWIO.getInputStreamFromByteBuffer(buffer),useMipMaps);    } else {      return OGLUtil.newTextureData(Configuration.getMaxCompatibleGLProfile(),url,useMipMaps);    }  } catch (  Exception e) {    String msg=Logging.getMessage("layers.TextureLayer.ExceptionAttemptingToReadTextureFile",url);    Logging.logger().log(java.util.logging.Level.SEVERE,msg,e);    return null;  }}  }
class C{  public boolean generate(ReportDescription description,Date date){  try {    Integer targetDateInt=Integer.parseInt(format.format(date));    AnalysisResultSet logAggregation=makeLogAnal(description,targetDateInt);    Report report=new Report();    report.setSendTime(new Date());    report.setTargetDate(date);    report.setLogReport(logAggregation);    report.setTargets(description.getTargets());    logger.debug("generated > " + report);    reportRepository.save(report);    return true;  } catch (  Exception e) {    logger.error(e.getMessage(),e);    return false;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.STATE_INTERNAL___COMMENT_1:    getComment_1().clear();  getComment_1().addAll((Collection<? extends Comment_>)newValue);return;case UmplePackage.STATE_INTERNAL___CHANGE_TYPE_1:setChangeType_1((String)newValue);return;case UmplePackage.STATE_INTERNAL___STATE_ENTITY_1:getStateEntity_1().clear();getStateEntity_1().addAll((Collection<? extends StateEntity_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Timer display(){  System.out.println(this);  return this;}  }
class C{  public final boolean cancelOperation(@NonNull final String tag,final boolean mayInterrupt){  return mChronosListener.cancel(tag,mayInterrupt);}  }
class C{  public QueryWorker(String requestUrl){  this._requestUrl=requestUrl;}  }
class C{  public Vector4i add(Vector4i v){  x+=v.x;  y+=v.y;  z+=v.z;  w+=v.w;  return this;}  }
class C{  public InlineConstantRefactoring(ICompilationUnit unit,CompilationUnit node,int selectionStart,int selectionLength){  Assert.isTrue(selectionStart >= 0);  Assert.isTrue(selectionLength >= 0);  fSelectionCu=unit;  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  if (unit != null)   initialize(unit,node);}  }
class C{  protected final void charactersFlush(){  if (m_textPendingStart >= 0) {    int length=m_chars.size() - m_textPendingStart;    boolean doStrip=false;    if (getShouldStripWhitespace()) {      doStrip=m_chars.isWhitespace(m_textPendingStart,length);    }    if (doStrip) {      m_chars.setLength(m_textPendingStart);    } else {      if (length > 0) {        if (length <= TEXT_LENGTH_MAX && m_textPendingStart <= TEXT_OFFSET_MAX) {          m_previous=addNode(m_coalescedTextType,DTM.TEXT_NODE,m_parents.peek(),m_previous,length + (m_textPendingStart << TEXT_LENGTH_BITS),false);        } else {          int dataIndex=m_data.size();          m_previous=addNode(m_coalescedTextType,DTM.TEXT_NODE,m_parents.peek(),m_previous,-dataIndex,false);          m_data.addElement(m_textPendingStart);          m_data.addElement(length);        }      }    }    m_textPendingStart=-1;    m_textType=m_coalescedTextType=DTM.TEXT_NODE;  }}  }
class C{  private void createSMBShareMap(HashSet<UnManagedSMBFileShare> unManagedSMBFileShareHashSet,UnManagedSMBShareMap unManagedSMBShareMap,String addr,String nativeid){  UnManagedSMBFileShare newUnManagedSMBFileShare=null;  for (  UnManagedSMBFileShare unManagedSMBFileShare : unManagedSMBFileShareHashSet) {    String mountPoint="\\\\" + addr + "\\"+ unManagedSMBFileShare.getName();    newUnManagedSMBFileShare=new UnManagedSMBFileShare(unManagedSMBFileShare.getName(),unManagedSMBFileShare.getDescription(),FileControllerConstants.CIFS_SHARE_PERMISSION_TYPE_ALLOW,FileControllerConstants.CIFS_SHARE_PERMISSION_CHANGE,unManagedSMBFileShare.getMaxUsers(),mountPoint);    newUnManagedSMBFileShare.setPath(nativeid);    newUnManagedSMBFileShare.setNativeId(nativeid);    newUnManagedSMBFileShare.setPortGroup(addr);    unManagedSMBShareMap.put(unManagedSMBFileShare.getName(),newUnManagedSMBFileShare);    _logger.info("New SMB share name: {} has mount point : {}",unManagedSMBFileShare.getName(),mountPoint);  }}  }
class C{  public void testDivideRoundDownNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799283E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void removeListener(final IHistoryStringBuilderListener listener){  m_listeners.removeListener(listener);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MFactAcct[");  sb.append(get_ID()).append("-Acct=").append(getAccount_ID()).append(",Dr=").append(getAmtSourceDr()).append("|").append(getAmtAcctDr()).append(",Cr=").append(getAmtSourceCr()).append("|").append(getAmtAcctCr()).append("]");  return sb.toString();}  }
class C{  public XMLStreamException(String msg,Throwable th){  super(msg,th);  nested=th;}  }
class C{  public void play(int musicID,float volume){  if (musicMap.containsValue(musicID)) {    soundPool.play(musicID,volume,volume,0,0,1);  }}  }
class C{  public void emitMultianewarray(int ndims,int type,Type arrayType){  emitop(multianewarray);  if (!alive)   return;  emit2(type);  emit1(ndims);  state.pop(ndims);  state.push(arrayType);}  }
class C{  public double measureNumRules(){  return m_root.numLeaves();}  }
class C{  public int read(){  return readInt();}  }
class C{  @Override public final int computeHashCode(T object){  return System.identityHashCode(object);}  }
class C{  public static String humanReadableByteCount(long bytes){  int unit=1024;  if (bytes < unit)   return bytes + " B";  int exp=(int)(Math.log(bytes) / Math.log(unit));  char pre=("KMGTPE").charAt(exp - 1);  return String.format("%.2f %cB",bytes / Math.pow(unit,exp),pre);}  }
class C{  @Subscribe public void onTabSelectedEvent(TabSelectedEvent event){  if (event.position != MainFragment.FIRST)   return;  if (mInAtTop) {    mRefreshLayout.setRefreshing(true);    onRefresh();  } else {    scrollToTop();  }}  }
class C{  public static <K,V>Map<K,V> limitedMap(int limit){  if (limit == 0)   return Collections.emptyMap();  if (limit < 5)   return new GridLeanMap<>(limit);  return new HashMap<>(capacity(limit),0.75f);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void testSubtractMathContextDiffScaleNegPos(){  String a="986798656676789766678767876078779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=40;  String c="9.867986566767897666787678760787798104576347813847567949870000000000000E+71";  int cScale=-2;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(70,RoundingMode.HALF_DOWN);  BigDecimal result=aNumber.subtract(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public void deregister(Route route){  if (route == null) {    return;  }  route.dispose();  Integer oldSize=Integer.valueOf(_routeHashTable.size());  _routeHashTable.remove(route.getId());  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_routeHashTable.size()));}  }
class C{  public static Test suite(){  return (new TestSuite(csetITCase.class));}  }
class C{  public CipherOutputStream(OutputStream os,Cipher c){  super(os);  output=os;  cipher=c;}  }
class C{  protected void linearLayout(VisualTable labels){  Rectangle2D b=getLayoutBounds();  double breadth=getBreadth(b);  double span=m_hi - m_lo;  double pspan=m_prevhi - m_prevlo;  double vlo=0;  if (m_lo >= 0) {    vlo=Math.pow(10,Math.floor(MathLib.log10(m_lo)));  } else {    vlo=-Math.pow(10,1 + Math.floor(MathLib.log10(-m_lo)));  }  Iterator iter=labels.tuples();  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    reset(item);    double v=item.getDouble(VALUE);    double x=span == 0 ? 0 : ((v - m_lo) / span) * breadth;    set(item,x,b);  }  Index index=labels.index(VALUE);  double step=getLinearStep(span,span == 0 ? 0 : breadth / span);  if (step == 0)   step=1;  int r;  for (double x, v=vlo; v <= m_hi; v+=step) {    x=((v - m_lo) / span) * breadth;    if (x < -0.5) {      continue;    } else     if ((r=index.get(v)) >= 0) {      VisualItem item=labels.getItem(r);      item.setVisible(true);      item.setEndVisible(true);    } else {      VisualItem item=labels.addItem();      item.set(LABEL,m_nf.format(v));      item.setDouble(VALUE,v);      double f=pspan == 0 ? 0 : ((v - m_prevlo) / pspan);      if (f <= 0 || f >= 1.0)       item.setStartVisible(true);      set(item,f * breadth,b);      set(item,x,b);    }  }}  }
class C{  @Transactional public void updateProduct(final JSONObject product) throws ServiceException {  try {    final String productId=product.optString(Keys.OBJECT_ID);    productRepository.update(productId,product);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Updates product failed",e);    throw new ServiceException(e);  }}  }
class C{  public void resetToCheckpoint(){  if (checkPoint != -1) {    current_item=checkPoint;  }  checkPoint=-1;}  }
class C{  public byte[] encode() throws InvalidKeyException {  return getEncodedInternal().clone();}  }
class C{  public void updateBlob(int columnIndex,InputStream inputStream) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public DateMidnight withDayOfYear(int dayOfYear){  return withMillis(getChronology().dayOfYear().set(getMillis(),dayOfYear));}  }
class C{  public static byte[] keyGenPublic(byte[] privateKey){  byte[] publicKey=new byte[32];  curve_sigs.curve25519_keygen(publicKey,privateKey);  return publicKey;}  }
class C{  public ByteArrayList(){  this(10);}  }
class C{  private void saveDownloadedFile(){  OCFile file=mStorageManager.getFileById(mCurrentDownload.getFile().getFileId());  long syncDate=System.currentTimeMillis();  file.setLastSyncDateForProperties(syncDate);  file.setLastSyncDateForData(syncDate);  file.setNeedsUpdateThumbnail(true);  file.setModificationTimestamp(mCurrentDownload.getModificationTimestamp());  file.setModificationTimestampAtLastSyncForData(mCurrentDownload.getModificationTimestamp());  file.setMimetype(mCurrentDownload.getMimeType());  file.setStoragePath(mCurrentDownload.getSavePath());  file.setFileLength((new File(mCurrentDownload.getSavePath()).length()));  file.setRemoteId(mCurrentDownload.getFile().getRemoteId());  mStorageManager.saveFile(file);  mStorageManager.triggerMediaScan(file.getStoragePath());}  }
class C{  public List<ComputeDescription> parse(Document doc,ComputeDescription template){  NodeList networks=nodes(doc,"/ovf:Envelope/ovf:NetworkSection/ovf:Network");  CustomProperties cust=CustomProperties.of(template);  for (  Element network : iterableElements(networks)) {    cust.put(network(attr("ovf:name",network)),text(network,"ovf:Description/text()"));  }  NodeList props=nodes(doc,"/ovf:Envelope/ovf:VirtualSystem/ovf:ProductSection/ovf:Property");  for (  Element prop : iterableElements(props)) {    String userConfigurable=attr("ovf:userConfigurable",prop);    if (!"true".equals(userConfigurable)) {      continue;    }    String key=attr("ovf:key",prop);    Element section=(Element)prop.getParentNode();    String instanceId=attr("ovf:instance",section);    String classId=attr("ovf:class",section);    String description=text(prop,"ovf:Description/text()");    cust.put(property(classId,key,instanceId),description);  }  String productName=text(doc,"/ovf:Envelope/ovf:VirtualSystem/ovf:ProductSection/ovf:Product/text()");  String productVersion=text(doc,"/ovf:Envelope/ovf:VirtualSystem/ovf:ProductSection/ovf:Version/text()");  template.name=productName + " " + productVersion;  NodeList hwItems=nodes(doc,"/ovf:Envelope/ovf:VirtualSystem/ovf:VirtualHardwareSection/ovf:Item");  Map<String,ComputeDescription> hwByConfigName=new HashMap<>();  for (  Element item : iterableElements(hwItems)) {    String configName=attr("ovf:configuration",item);    ComputeDescription desc=hwByConfigName.get(configName);    if (desc == null) {      desc=Utils.clone(template);      desc.documentSelfLink=UUID.randomUUID().toString();      desc.id="ovf-imported-" + desc.documentSelfLink;      desc.customProperties.put(PROP_OVF_CONFIGURATION,configName);      hwByConfigName.put(configName,desc);    }    String resourceType=text(item,"rasd:ResourceType/text()");    if (RESOURCE_TYPE_CPU.equals(resourceType)) {      long qty=Long.parseLong(text(item,"rasd:VirtualQuantity/text()"));      desc.cpuCount=qty;    }    if (RESOURCE_TYPE_MEMORY.equals(resourceType)) {      double qty=Double.parseDouble(text(item,"rasd:VirtualQuantity/text()"));      long mult=memAllocationUnit2Multiplier(text(item,"rasd:AllocationUnits/text()"));      desc.totalMemoryBytes=(long)(qty * mult);    }  }  for (Iterator<ComputeDescription> it=hwByConfigName.values().iterator(); it.hasNext(); ) {    ComputeDescription desc=it.next();    if (desc.cpuCount <= 0) {      it.remove();    }  }  return new ArrayList<>(hwByConfigName.values());}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEGaussianBlurElement(prefix,(AbstractDocument)doc);}  }
class C{  public Tuple[] toArray(){  Tuple[] t=new Tuple[getTupleCount()];  m_tuples.toArray(t);  return t;}  }
class C{  public boolean isSuperscript(){  sync();  return superscript;}  }
class C{  public Accept(){  super(KEY);}  }
class C{  public void quitServer(){  this.quitServer("");}  }
class C{  private void computeAverageClassValues(){  double totalCounts, sum;  Instance instance;  double[] counts;  double[][] avgClassValues=new double[getInputFormat().numAttributes()][0];  m_Indices=new int[getInputFormat().numAttributes()][0];  for (int j=0; j < getInputFormat().numAttributes(); j++) {    Attribute att=getInputFormat().attribute(j);    if (att.isNominal()) {      avgClassValues[j]=new double[att.numValues()];      counts=new double[att.numValues()];      for (int i=0; i < getInputFormat().numInstances(); i++) {        instance=getInputFormat().instance(i);        if (!instance.classIsMissing() && (!instance.isMissing(j))) {          counts[(int)instance.value(j)]+=instance.weight();          avgClassValues[j][(int)instance.value(j)]+=instance.weight() * instance.classValue();        }      }      sum=Utils.sum(avgClassValues[j]);      totalCounts=Utils.sum(counts);      if (Utils.gr(totalCounts,0)) {        for (int k=0; k < att.numValues(); k++) {          if (Utils.gr(counts[k],0)) {            avgClassValues[j][k]/=counts[k];          } else {            avgClassValues[j][k]=sum / totalCounts;          }        }      }      m_Indices[j]=Utils.sort(avgClassValues[j]);    }  }}  }
class C{  public SpiderSVNEntriesParser(SpiderParam params){  super();  this.params=params;}  }
class C{  public boolean write(byte[] buffer,int offset,int length){  if (length == 0) {    return true;  }  int count=length / BLOCK_SIZE + 1;  if (_tailAddress <= _index + length + PAD+ 2 * count) {    return false;  }  _crc.update(buffer,offset,length);  byte[] headerBuffer=_headerBuffer;  while (length > 0) {    int sublen=Math.min(length,BLOCK_SIZE);    BitsUtil.writeInt16(headerBuffer,0,sublen);    writeImpl(headerBuffer,0,2);    writeImpl(buffer,offset,sublen);    length-=sublen;    offset+=sublen;  }  return true;}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  public static void main(String[] args) throws Exception {  String usage="Usage:\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\n\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.";  if (args.length > 0 && ("-h".equals(args[0]) || "-help".equals(args[0]))) {    System.out.println(usage);    System.exit(0);  }  String index="index";  String field="contents";  String queries=null;  int repeat=0;  boolean raw=false;  String queryString=null;  int hitsPerPage=10;  for (int i=0; i < args.length; i++) {    if ("-index".equals(args[i])) {      index=args[i + 1];      i++;    } else     if ("-field".equals(args[i])) {      field=args[i + 1];      i++;    } else     if ("-queries".equals(args[i])) {      queries=args[i + 1];      i++;    } else     if ("-query".equals(args[i])) {      queryString=args[i + 1];      i++;    } else     if ("-repeat".equals(args[i])) {      repeat=Integer.parseInt(args[i + 1]);      i++;    } else     if ("-raw".equals(args[i])) {      raw=true;    } else     if ("-paging".equals(args[i])) {      hitsPerPage=Integer.parseInt(args[i + 1]);      if (hitsPerPage <= 0) {        System.err.println("There must be at least 1 hit per page.");        System.exit(1);      }      i++;    }  }  IndexReader reader=DirectoryReader.open(FSDirectory.open(Paths.get(index)));  IndexSearcher searcher=new IndexSearcher(reader);  Analyzer analyzer=new StandardAnalyzer();  BufferedReader in=null;  if (queries != null) {    in=Files.newBufferedReader(Paths.get(queries),StandardCharsets.UTF_8);  } else {    in=new BufferedReader(new InputStreamReader(System.in,StandardCharsets.UTF_8));  }  QueryParser parser=new QueryParser(field,analyzer);  while (true) {    if (queries == null && queryString == null) {      System.out.println("Enter query: ");    }    String line=queryString != null ? queryString : in.readLine();    if (line == null || line.length() == -1) {      break;    }    line=line.trim();    if (line.length() == 0) {      break;    }    Query query=parser.parse(line);    System.out.println("Searching for: " + query.toString(field));    if (repeat > 0) {      Date start=new Date();      for (int i=0; i < repeat; i++) {        searcher.search(query,100);      }      Date end=new Date();      System.out.println("Time: " + (end.getTime() - start.getTime()) + "ms");    }    doPagingSearch(in,searcher,query,hitsPerPage,raw,queries == null && queryString == null);    if (queryString != null) {      break;    }  }  reader.close();}  }
class C{  public void resetDictCursor(){  dictionary.resetCursor();}  }
class C{  private String sendBind(BindType bindType,String systemId,String password,String systemType,InterfaceVersion interfaceVersion,TypeOfNumber addrTon,NumberingPlanIndicator addrNpi,String addressRange,long timeout) throws PDUException, ResponseTimeoutException, InvalidResponseException, NegativeResponseException, IOException {  BindCommandTask task=new BindCommandTask(pduSender(),bindType,systemId,password,systemType,interfaceVersion,addrTon,addrNpi,addressRange);  BindResp resp=(BindResp)executeSendCommand(task,timeout);  OptionalParameter.Sc_interface_version scVersion=resp.getOptionalParameter(Sc_interface_version.class);  if (scVersion != null) {    logger.info("Other side reports SMPP interface version {}",scVersion);  }  return resp.getSystemId();}  }
class C{  public Object lookupLink(String name) throws NamingException {  throw new NamingException(LocalizedStrings.ContextImpl_LOOKUPLINKSTRING_NAME_IS_NOT_IMPLEMENTED.toLocalizedString());}  }
class C{  public NamedMapConverter(final Mapper mapper,final String entryName,final String keyName,final Class<?> keyType,final String valueName,final Class<?> valueType,final boolean keyAsAttribute,final boolean valueAsAttribute,final ConverterLookup lookup){  this(null,mapper,entryName,keyName,keyType,valueName,valueType,keyAsAttribute,valueAsAttribute,lookup);}  }
class C{  static public int removeDirectory(StringBuffer out,StringBuffer err,String directory){  return ThreadedSynchronousStreamReader.exec(out,err,getRmDirArgs(directory));}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  @SuppressWarnings("unchecked") Ordering<K> naturalOrder=(Ordering<K>)NATURAL_ORDER;  return copyOf(entries,naturalOrder);}  }
class C{  public void createPopup(Point point){  popup=new JPopupMenu();  if (popupMenu) {    JMenuItem addMenuItem=popup.add(new JMenuItem("Add"));    addMenuItem.addActionListener(this);    JMenuItem deleteMenuItem=popup.add(new JMenuItem("Delete"));    deleteMenuItem.addActionListener(this);    JMenuItem clearAllMenuItem=popup.add(new JMenuItem("ClearAll"));    clearAllMenuItem.addActionListener(this);  }  JMenuItem printMenuItem=popup.add(new JMenuItem("Print"));  printMenuItem.addActionListener(this);  JMenuItem saveAsMenuItem=popup.add(new JMenuItem("Save As"));  saveAsMenuItem.addActionListener(this);  point=getSuitableLocation(point,popup.getPreferredSize(),this);  popup.show(this,point.x,point.y);}  }
class C{  private ImmutablePair(A first,B second){  this.first=first;  this.second=second;}  }
class C{  public Boolean isStatsAggregationDisabled(){  return statsAggregationDisabled;}  }
class C{  public void open(String port,int baudRate) throws XBeeException {  try {    if (this.isConnected()) {      throw new IllegalStateException("Cannot open new connection -- existing connection is still open.  Please close first");    }    this.type=null;    SerialPortConnection serial=new SerialPortConnection();    serial.openSerialPort(port,baudRate);    this.initConnection(serial);  } catch (  XBeeException e) {    throw e;  }catch (  Exception e) {    throw new XBeeException(e);  }}  }
class C{  @Override public boolean equals(Object x,Object y) throws HibernateException {  if (x == null) {    return y == null;  }  return x.equals(y);}  }
class C{  public void toggleAccessibilityFeedback(boolean enabled){  if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {    return;  }  toggleAndroidVox(enabled);  if (!enabled && (mTextToSpeech != null)) {    mTextToSpeech.stop();  }}  }
class C{  private static boolean unorderedCompare(List<Query> fqList1,List<Query> fqList2,int start){  assert null != fqList1;  assert null != fqList2;  final int sz=fqList1.size();  assert fqList2.size() == sz;  final ArrayList<Query> set2=new ArrayList<>(fqList2.subList(start,sz));  for (int i=start; i < sz; i++) {    Query q1=fqList1.get(i);    if (!set2.remove(q1)) {      return false;    }  }  return set2.isEmpty();}  }
class C{  public List<Vector2> computeTriangles(final List<Vector2> polygon){  final ArrayList<Vector2> triangles=new ArrayList<Vector2>();  final ArrayList<Vector2> vertices=new ArrayList<Vector2>(polygon.size());  vertices.addAll(polygon);  while (vertices.size() > 3) {    final int vertexTypes[]=this.classifyVertices(vertices);    final int vertexCount=vertices.size();    for (int index=0; index < vertexCount; index++) {      if (this.isEarTip(vertices,index,vertexTypes)) {        this.cutEarTip(vertices,index,triangles);        break;      }    }  }  if (vertices.size() == 3) {    triangles.addAll(vertices);  }  return triangles;}  }
class C{  public static RegisterSpecList make(RegisterSpec spec){  RegisterSpecList result=new RegisterSpecList(1);  result.set(0,spec);  return result;}  }
class C{  public boolean hasToFetchAd(int position,int fetchingAdsCount){  int adIndex=getAdIndex(position);  int firstAdPos=getOffsetValue();  return position >= firstAdPos && adIndex >= 0 && adIndex < getLimitOfAds() && adIndex >= fetchingAdsCount;}  }
class C{  public boolean isFrequencyValid(int frequency){  if (frequency < mMinFrequency || frequency > mMaxFrequency) {    return false;  }  if ((frequency - mMinFrequency) % mChannelOffset != 0) {    return false;  }  return true;}  }
class C{  public void clearStack(){  top=0;}  }
class C{  public static boolean isSolaris(){  return solaris;}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  super.appendAndPush(handler,elem);  elem.setDOMBackPointer(handler.getOriginatingNode());  handler.getStylesheet().setTemplate((ElemTemplate)elem);}  }
class C{  public static boolean isBlank(String value){  return value == null || value.isEmpty();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public BranchGroupPortrayal3D(BranchGroup scene,double scale,Appearance a){  setScale(null,scale);  traverseForAttributes(scene);  group=scene;  appearance=a;}  }
class C{  public void check(){  for (int i=0; i < classes.size(); i++)   for (int j=i + 1; j < classes.size(); j++) {    IntCharSet x=(IntCharSet)classes.elementAt(i);    IntCharSet y=(IntCharSet)classes.elementAt(j);    if (x.and(y).containsElements()) {      System.out.println("Error: non disjoint char classes " + i + " and "+ j);      System.out.println("class " + i + ": "+ x);      System.out.println("class " + j + ": "+ y);    }  }  for (char c=0; c < maxChar; c++) {    getClassCode(c);    if (c % 100 == 0)     System.out.print(".");  }  getClassCode(maxChar);}  }
class C{  public synchronized void performEraseWay(final Way way,final boolean deleteOrphanNodes,boolean createCheckpoint){  if (createCheckpoint) {    createCheckpoint(R.string.undo_action_deleteway);  }  HashSet<Node> nodes=deleteOrphanNodes ? new HashSet<Node>(way.getNodes()) : null;  getDelegator().removeWay(way);  if (deleteOrphanNodes) {    for (    Node node : nodes) {      if (getWaysForNode(node).isEmpty() && node.getTags().isEmpty())       getDelegator().removeNode(node);    }  }  map.invalidate();}  }
class C{  public static <K,V>HashMap<K,V> newEmptyHashMap(Iterable<?> iterable){  if (iterable instanceof Collection<?>)   return Maps.newHashMapWithExpectedSize(((Collection<?>)iterable).size());  return Maps.newHashMap();}  }
class C{  public AnrInfo(){}  }
class C{  private boolean versionCheck(String title){  if (this.type != UpdateType.NO_VERSION_CHECK) {    final String version=this.plugin.getDescription().getVersion();    if (title.split(" v").length == 2) {      final String remoteVersion=title.split(" v")[1].split(" ")[0];      if (this.hasTag(version) || version.equalsIgnoreCase(remoteVersion)) {        this.result=Updater.UpdateResult.NO_UPDATE;        return false;      }    } else {      final String authorInfo=this.plugin.getDescription().getAuthors().size() == 0 ? "" : " (" + this.plugin.getDescription().getAuthors().get(0) + ")";      this.plugin.getLogger().warning("The author of this plugin" + authorInfo + " has misconfigured their Auto Update system");      this.plugin.getLogger().warning("File versions should follow the format 'PluginName vVERSION'");      this.plugin.getLogger().warning("Please notify the author of this error.");      this.result=Updater.UpdateResult.FAIL_NOVERSION;      return false;    }  }  return true;}  }
class C{  public void postCompileStep(Compiler compiler){  m_isTopLevel=compiler.getLocationPathDepth() == -1;}  }
class C{  private void expandDelimiterData(){  int i;  int cnt;  int delimiterIndex=3755 + GB2312_FIRST_CHAR;  i=0;  while (i < wordItem_charArrayTable[delimiterIndex].length) {    char c=wordItem_charArrayTable[delimiterIndex][i][0];    int j=getGB2312Id(c);    if (wordItem_charArrayTable[j] == null) {      int k=i;      while (k < wordItem_charArrayTable[delimiterIndex].length && wordItem_charArrayTable[delimiterIndex][k][0] == c) {        k++;      }      cnt=k - i;      if (cnt != 0) {        wordItem_charArrayTable[j]=new char[cnt][];        wordItem_frequencyTable[j]=new int[cnt];      }      for (k=0; k < cnt; k++, i++) {        wordItem_frequencyTable[j][k]=wordItem_frequencyTable[delimiterIndex][i];        wordItem_charArrayTable[j][k]=new char[wordItem_charArrayTable[delimiterIndex][i].length - 1];        System.arraycopy(wordItem_charArrayTable[delimiterIndex][i],1,wordItem_charArrayTable[j][k],0,wordItem_charArrayTable[j][k].length);      }      setTableIndex(c,j);    }  }  wordItem_charArrayTable[delimiterIndex]=null;  wordItem_frequencyTable[delimiterIndex]=null;}  }
class C{  public static XField createXFieldUsingSlashedClassName(@SlashedClassName String className,String fieldName,String fieldSignature,boolean isStatic){  FieldDescriptor fieldDesc=DescriptorFactory.instance().getFieldDescriptor(className,fieldName,fieldSignature,isStatic);  return createXField(fieldDesc);}  }
class C{  public void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/test/",new MyHandler());  ctx.setAuthenticator(new MyBasicAuthenticator("foo"));  ctx.getFilters().add(0,new CookieFilter());  HttpContext ctx2=httpServer.createContext("/test2/",new MyHandler2());  ctx2.setAuthenticator(new MyBasicAuthenticator("foobar"));  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AxisSpace)) {    return false;  }  AxisSpace that=(AxisSpace)obj;  if (this.top != that.top) {    return false;  }  if (this.bottom != that.bottom) {    return false;  }  if (this.left != that.left) {    return false;  }  if (this.right != that.right) {    return false;  }  return true;}  }
class C{  void target(Targetable t){  target=t;  updateTarget();}  }
class C{  private void updateManager(HttpServletRequest request,TimetableManagerForm frm) throws Exception {  sessionContext.checkPermission(frm.getUniqueId(),"TimetableManager",Right.TimetableManagerEdit);  lookupManager(frm);  TimetableManagerDAO mgrDao=new TimetableManagerDAO();  RolesDAO rDao=new RolesDAO();  DepartmentDAO dDao=new DepartmentDAO();  SolverGroupDAO sgDao=new SolverGroupDAO();  Long sessionId=sessionContext.getUser().getCurrentAcademicSessionId();  Session hibSession=mgrDao.getSession();  Transaction tx=hibSession.beginTransaction();  TimetableManager mgr=mgrDao.get(new Long(frm.getUniqueId()));  mgr.setFirstName(frm.getFirstName());  mgr.setMiddleName(frm.getMiddleName());  mgr.setLastName(frm.getLastName());  mgr.setAcademicTitle(frm.getTitle());  mgr.setExternalUniqueId(frm.getExternalId());  mgr.setEmailAddress(frm.getEmail());  List roles=frm.getRoles();  List roleReceiveEmails=frm.getRoleReceiveEmailFlags();  Set mgrRoles=mgr.getManagerRoles();  if (mgrRoles == null)   mgrRoles=new HashSet();  Iterator receiveEmailIt=roleReceiveEmails.iterator();  for (Iterator i=roles.iterator(); i.hasNext(); ) {    Roles role=rDao.get(new Long(i.next().toString()));    Boolean receiveEmail=new Boolean(false);    if (receiveEmailIt.hasNext()) {      String str=(String)receiveEmailIt.next();      str=(str == null ? "false" : (str.equalsIgnoreCase("on") ? "true" : str));      receiveEmail=new Boolean(str);    }    boolean found=false;    for (Iterator j=mgrRoles.iterator(); j.hasNext(); ) {      ManagerRole eMgrRole=(ManagerRole)j.next();      Roles eRole=eMgrRole.getRole();      if (eRole.equals(role)) {        if (frm.getPrimaryRole().equals(role.getRoleId().toString()))         eMgrRole.setPrimary(new Boolean(true)); else         eMgrRole.setPrimary(new Boolean(false));        found=true;        eMgrRole.setReceiveEmails(receiveEmail);        break;      }    }    if (!found) {      ManagerRole mgrRole=new ManagerRole();      mgrRole.setRole(role);      mgrRole.setTimetableManager(mgr);      if (frm.getPrimaryRole().equals(role.getRoleId().toString()))       mgrRole.setPrimary(new Boolean(true)); else       mgrRole.setPrimary(new Boolean(false));      mgrRole.setReceiveEmails(receiveEmail);      mgr.addTomanagerRoles(mgrRole);    }  }  for (Iterator j=mgrRoles.iterator(); j.hasNext(); ) {    ManagerRole eMgrRole=(ManagerRole)j.next();    Roles eRole=eMgrRole.getRole();    boolean found=false;    for (Iterator i=roles.iterator(); i.hasNext(); ) {      Roles role=rDao.get(new Long(i.next().toString()));      if (eRole.equals(role)) {        found=true;        break;      }    }    if (!found) {      j.remove();    }  }  List depts=frm.getDepts();  Set mgrDepts=mgr.getDepartments();  if (mgrDepts == null) {    mgrDepts=new HashSet();    mgr.setDepartments(mgrDepts);  }  for (Iterator i=depts.iterator(); i.hasNext(); ) {    Department dept=dDao.get(new Long(i.next().toString()));    boolean found=false;    for (Iterator j=mgrDepts.iterator(); j.hasNext(); ) {      Department eDept=(Department)j.next();      if (eDept.equals(dept)) {        found=true;        break;      }    }    if (!found) {      mgrDepts.add(dept);      dept.getTimetableManagers().add(mgr);      hibSession.saveOrUpdate(dept);    }  }  for (Iterator j=mgrDepts.iterator(); j.hasNext(); ) {    Department eDept=(Department)j.next();    if (!eDept.getSessionId().equals(sessionId))     continue;    boolean found=false;    for (Iterator i=depts.iterator(); i.hasNext(); ) {      Department dept=dDao.get(new Long(i.next().toString()));      if (eDept.equals(dept)) {        found=true;        break;      }    }    if (!found) {      j.remove();      eDept.getTimetableManagers().remove(mgr);      hibSession.saveOrUpdate(eDept);    }  }  List solverGrs=frm.getSolverGrs();  Set mgrSolverGrs=mgr.getSolverGroups();  if (mgrSolverGrs == null) {    mgrSolverGrs=new HashSet();    mgr.setSolverGroups(mgrSolverGrs);  }  for (Iterator i=solverGrs.iterator(); i.hasNext(); ) {    SolverGroup sg=sgDao.get(new Long(i.next().toString()));    boolean found=false;    for (Iterator j=mgrSolverGrs.iterator(); j.hasNext(); ) {      SolverGroup eSg=(SolverGroup)j.next();      if (eSg.equals(sg)) {        found=true;        break;      }    }    if (!found) {      mgrSolverGrs.add(sg);      sg.getTimetableManagers().add(mgr);      hibSession.saveOrUpdate(sg);    }  }  for (Iterator j=mgrSolverGrs.iterator(); j.hasNext(); ) {    SolverGroup eSg=(SolverGroup)j.next();    if (!eSg.getSession().getUniqueId().equals(sessionId))     continue;    boolean found=false;    for (Iterator i=solverGrs.iterator(); i.hasNext(); ) {      SolverGroup sg=sgDao.get(new Long(i.next().toString()));      if (eSg.equals(sg)) {        found=true;        break;      }    }    if (!found) {      j.remove();      eSg.getTimetableManagers().remove(mgr);      hibSession.saveOrUpdate(eSg);    }  }  hibSession.saveOrUpdate(mgr);  ChangeLog.addChange(hibSession,sessionContext,mgr,ChangeLog.Source.MANAGER_EDIT,ChangeLog.Operation.UPDATE,null,null);  tx.commit();  if (mgr.getUniqueId() != null)   request.setAttribute(Constants.JUMP_TO_ATTR_NAME,mgr.getUniqueId().toString());}  }
class C{  public boolean match(Element e,String pseudoE){  String name=getLocalName();  if (name == null) {    return true;  }  String eName;  if (e.getPrefix() == null)   eName=e.getNodeName(); else   eName=e.getLocalName();  return eName.equals(name);}  }
class C{  public boolean isOpaqueCube(IBlockState state){  return false;}  }
class C{  private void processPhi(Instruction s){  Register result=Phi.getResult(s).asRegister().getRegister();  ValueGraphVertex v=findOrCreateVertex(result);  BasicBlock bb=s.getBasicBlock();  v.setLabel(bb,bb.getNumberOfIn());  for (int i=0; i < Phi.getNumberOfValues(s); i++) {    Operand val=Phi.getValue(s,i);    val=bypassMoves(val);    ValueGraphVertex target=findOrCreateVertex(val);    link(v,target,i);  }}  }
class C{  @LogMessageDoc(level="ERROR",message="Error reading link discovery update.",explanation="Unable to process link discovery update",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public List<LDUpdate> applyUpdates(){  List<LDUpdate> appliedUpdates=new ArrayList<LDUpdate>();  LDUpdate update=null;  while (ldUpdates.peek() != null) {    try {      update=ldUpdates.take();    } catch (    Exception e) {      log.error("Error reading link discovery update.",e);    }    if (log.isTraceEnabled()) {      log.trace("Applying update: {}",update);    }switch (update.getOperation()) {case LINK_UPDATED:      addOrUpdateLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort(),update.getType());    break;case LINK_REMOVED:  removeLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort());break;case SWITCH_UPDATED:addOrUpdateSwitch(update.getSrc());break;case SWITCH_REMOVED:removeSwitch(update.getSrc());break;case TUNNEL_PORT_ADDED:addTunnelPort(update.getSrc(),update.getSrcPort());break;case TUNNEL_PORT_REMOVED:removeTunnelPort(update.getSrc(),update.getSrcPort());break;case PORT_UP:case PORT_DOWN:break;}appliedUpdates.add(update);}return (Collections.unmodifiableList(appliedUpdates));}  }
class C{  private static <K,V>ImmutableSortedMap<K,V> of(Comparator<? super K> comparator,K k1,V v1){  return new ImmutableSortedMap<K,V>(new RegularImmutableSortedSet<K>(ImmutableList.of(k1),checkNotNull(comparator)),ImmutableList.of(v1));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? null : s.getSeriesInfo();}  }
class C{  public void endGetClientPRMetadataSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(getClientPRMetadataSendInProgressId,-1);  int endGetClientPRMetadataSendId;  if (failed) {    endGetClientPRMetadataSendId=getClientPRMetadataSendFailedId;  } else {    endGetClientPRMetadataSendId=getClientPRMetadataSendId;  }  this.sendStats.incInt(endGetClientPRMetadataSendId,1);  this.stats.incLong(getClientPRMetadataSendDurationId,duration);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("PriceList[");  sb.append(m_prices.size()).append("]");  return sb.toString();}  }
class C{  public void testBug75592() throws Exception {  if (versionMeetsMinimum(5,0,3)) {    MySQLConnection con=(MySQLConnection)getConnectionWithProps("statementInterceptors=" + Bug75592StatementInterceptor.class.getName());    Map<String,String> serverVariables=new HashMap<String,String>();    this.rs=con.createStatement().executeQuery("SHOW VARIABLES");    while (this.rs.next()) {      serverVariables.put(this.rs.getString(1),this.rs.getString(2));    }    assertEquals(serverVariables.get("auto_increment_increment"),con.getServerVariable("auto_increment_increment"));    assertEquals(serverVariables.get("character_set_client"),con.getServerVariable("character_set_client"));    assertEquals(serverVariables.get("character_set_connection"),con.getServerVariable("character_set_connection"));    if (con.getServerVariable(ConnectionImpl.JDBC_LOCAL_CHARACTER_SET_RESULTS) == null) {      assertEquals("",serverVariables.get("character_set_results"));    } else {      assertEquals(serverVariables.get("character_set_results"),con.getServerVariable(ConnectionImpl.JDBC_LOCAL_CHARACTER_SET_RESULTS));    }    assertEquals(serverVariables.get("character_set_server"),con.getServerVariable("character_set_server"));    assertEquals(serverVariables.get("init_connect"),con.getServerVariable("init_connect"));    assertEquals(serverVariables.get("interactive_timeout"),con.getServerVariable("interactive_timeout"));    assertEquals(serverVariables.get("license"),con.getServerVariable("license"));    assertEquals(serverVariables.get("lower_case_table_names"),con.getServerVariable("lower_case_table_names"));    assertEquals(serverVariables.get("max_allowed_packet"),con.getServerVariable("max_allowed_packet"));    assertEquals(serverVariables.get("net_buffer_length"),con.getServerVariable("net_buffer_length"));    assertEquals(serverVariables.get("net_write_timeout"),con.getServerVariable("net_write_timeout"));    assertEquals(serverVariables.get("query_cache_size"),con.getServerVariable("query_cache_size"));    assertEquals(serverVariables.get("query_cache_type"),con.getServerVariable("query_cache_type"));    for (    String sm : serverVariables.get("sql_mode").split(",")) {      if (!sm.equals("STRICT_TRANS_TABLES")) {        assertTrue(con.getServerVariable("sql_mode").contains(sm));      }    }    assertEquals(serverVariables.get("system_time_zone"),con.getServerVariable("system_time_zone"));    assertEquals(serverVariables.get("time_zone"),con.getServerVariable("time_zone"));    assertEquals(serverVariables.get("tx_isolation"),con.getServerVariable("tx_isolation"));    assertEquals(serverVariables.get("wait_timeout"),con.getServerVariable("wait_timeout"));    if (!versionMeetsMinimum(5,5,0)) {      assertEquals(serverVariables.get("language"),con.getServerVariable("language"));    }  }}  }
class C{  public byte[] digestWorkaround(MessageDigest md){  md.reset();  md.update(rawBytes,offset,length);  return md.digest();}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.931 -0500",hash_original_method="AE664F52BD7226DBAA3D1D1034C9653E",hash_generated_method="40AF093ECF595321C0D30F523CF4A847") public boolean addError(int error){  boolean rval=(0 <= error && error < SslError.SSL_MAX_ERROR);  if (rval) {    mErrors|=(0x1 << error);  }  return rval;}  }
class C{  private Integer compareDateValues(Long loadValue,Long userValue){  return loadValue.compareTo(userValue);}  }
class C{  void initPolicyList(JList policyList){  JScrollPane scrollPane=new JScrollPane(policyList);  addNewComponent(this,scrollPane,MW_POLICY_LIST,0,3,2,1,1.0,1.0,GridBagConstraints.BOTH);}  }
class C{  public LengthValidatorTestCase(String name){  super(name);}  }
class C{  public static List<X509Certificate> convertFromPem(byte[] bytes) throws IOException, CertificateException {  ByteArrayInputStream bai=new ByteArrayInputStream(bytes);  Reader reader=new InputStreamReader(bai,Charsets.US_ASCII);  PemReader pr=new PemReader(reader);  CertificateFactory cf=CertificateFactory.getInstance("X509");  List<X509Certificate> result=new ArrayList<X509Certificate>();  PemObject o;  while ((o=pr.readPemObject()) != null) {    if (o.getType().equals("CERTIFICATE")) {      Certificate c=cf.generateCertificate(new ByteArrayInputStream(o.getContent()));      result.add((X509Certificate)c);    } else {      throw new IllegalArgumentException("Unknown type " + o.getType());    }  }  pr.close();  return result;}  }
class C{  public LockGrantorId(DM dm,InternalDistributedMember lockGrantorMember,long lockGrantorVersion,int lockGrantorSerialNumber){  if (lockGrantorMember == null) {    throw new NullPointerException(LocalizedStrings.LockGrantorId_LOCKGRANTORMEMBER_IS_NULL.toLocalizedString());  }  this.dm=dm;  this.lockGrantorMember=lockGrantorMember;  this.lockGrantorVersion=lockGrantorVersion;  this.lockGrantorSerialNumber=lockGrantorSerialNumber;}  }
class C{  public String validate(LayoutEditor lePanel){  if (initializationNeeded) {    initializeBlocks();  }  if (lePanel != null) {    for (int i=0; i < (mBlockEntries.size() - 1); i++) {      LayoutBlock lBlock=jmri.InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class).getByUserName(getBlockBySequenceNumber(i).getUserName());      if (lBlock == null) {        log.error("Layout Block " + getBlockBySequenceNumber(i).getUserName() + " not found.  Paths not checked.");      } else {        lBlock.updatePathsUsingPanel(lePanel);      }    }  }  if (mBlockEntries.size() > 1) {    for (int i=0; i < (mBlockEntries.size() - 1); i++) {      if (!connected(getBlockBySequenceNumber(i),getBlockBySequenceNumber(i + 1))) {        String s="Sequential Blocks - " + getBlockBySequenceNumber(i).getSystemName() + ", "+ getBlockBySequenceNumber(i + 1).getSystemName()+ " - are not connected in Section "+ getSystemName()+ ".";        return s;      }      if (!connected(getBlockBySequenceNumber(i + 1),getBlockBySequenceNumber(i))) {        String s="Sequential Blocks - " + getBlockBySequenceNumber(i).getSystemName() + ", "+ getBlockBySequenceNumber(i + 1).getSystemName()+ " - Paths are not consistent - Section "+ getSystemName()+ ".";        return s;      }    }  }  if ((mForwardEntryPoints.size() == 0) && (mReverseEntryPoints.size() == 0)) {    String s="Section " + getSystemName() + "has no Entry Points.";    return s;  }  if (mForwardEntryPoints.size() > 0) {    for (int i=0; i < mForwardEntryPoints.size(); i++) {      EntryPoint ep=mForwardEntryPoints.get(i);      if (!containsBlock(ep.getBlock())) {        String s="Entry Point Block, " + ep.getBlock().getSystemName() + ", is not a Block in Section "+ getSystemName()+ ".";        return s;      }      if (!connectsToBlock(ep.getFromBlock())) {        String s="Entry Point From Block, " + ep.getBlock().getSystemName() + ", is not connected to a Block in Section "+ getSystemName()+ ".";        return s;      }      if (!ep.isForwardType()) {        String s="Direction of FORWARD Entry Point From Block " + ep.getFromBlock().getSystemName() + " to Section "+ getSystemName()+ " is incorrectly set.";        return s;      }      if (!connected(ep.getBlock(),ep.getFromBlock())) {        String s="Entry Point Blocks, " + ep.getBlock().getSystemName() + " and "+ ep.getFromBlock().getSystemName()+ ", are not connected in Section "+ getSystemName()+ ".";        return s;      }    }  }  if (mReverseEntryPoints.size() > 0) {    for (int i=0; i < mReverseEntryPoints.size(); i++) {      EntryPoint ep=mReverseEntryPoints.get(i);      if (!containsBlock(ep.getBlock())) {        String s="Entry Point Block, " + ep.getBlock().getSystemName() + ", is not a Block in Section "+ getSystemName()+ ".";        return s;      }      if (!connectsToBlock(ep.getFromBlock())) {        String s="Entry Point From Block, " + ep.getBlock().getSystemName() + ", is not connected to a Block in Section "+ getSystemName()+ ".";        return s;      }      if (!ep.isReverseType()) {        String s="Direction of REVERSE Entry Point From Block " + ep.getFromBlock().getSystemName() + " to Section "+ getSystemName()+ " is incorrectly set.";        return s;      }      if (!connected(ep.getBlock(),ep.getFromBlock())) {        String s="Entry Point Blocks, " + ep.getBlock().getSystemName() + " and "+ ep.getFromBlock().getSystemName()+ ", are not connected in Section "+ getSystemName()+ ".";        return s;      }    }  }  return "";}  }
class C{  public synchronized FilmstripItem remove(int index){  try {    FilmstripItem removedItem=mList.remove(index);    mUriMap.remove(removedItem);    return removedItem;  } catch (  IndexOutOfBoundsException ex) {    Log.w(TAG,"Could not remove item. Not found: " + index,ex);    return null;  }}  }
class C{  public void deleteEpisode(TvShowEpisode episode){  if (episodes.contains(episode)) {    int oldValue=episodes.size();    episode.deleteFilesSafely();    episodes.remove(episode);    episode.removePropertyChangeListener(propertyChangeListener);    removeFromSeason(episode);    TvShowList.getInstance().removeEpisodeFromDb(episode);    saveToDb();    firePropertyChange(REMOVED_EPISODE,null,episode);    firePropertyChange(EPISODE_COUNT,oldValue,episodes.size());  }}  }
class C{  public OAuth2Credentials build(){  validate();  OAuth2Credentials oAuth2Credentials=new OAuth2Credentials();  oAuth2Credentials.redirectUri=redirectUri;  Set<String> allScopes=new TreeSet<>();  if (scopes != null) {    for (    Scope scope : scopes) {      allScopes.add(scope.name().toLowerCase());    }  }  if (customScopes != null) {    allScopes.addAll(customScopes);  }  if (!allScopes.isEmpty()) {    oAuth2Credentials.scopes=allScopes;  }  if (httpTransport == null) {    httpTransport=new NetHttpTransport();  }  if (credentialDataStoreFactory == null) {    credentialDataStoreFactory=MemoryDataStoreFactory.getDefaultInstance();  }  if (loginRegion == null) {    loginRegion=WORLD;  }  if (authorizationCodeFlow == null) {    try {      AuthorizationCodeFlow.Builder builder=new AuthorizationCodeFlow.Builder(BearerToken.authorizationHeaderAccessMethod(),httpTransport,new JacksonFactory(),new GenericUrl(getLoginDomain(loginRegion) + TOKEN_PATH),new ClientParametersAuthentication(clientId,clientSecret),clientId,getLoginDomain(loginRegion) + AUTHORIZATION_PATH);      if (oAuth2Credentials.scopes != null && !oAuth2Credentials.scopes.isEmpty()) {        builder.setScopes(oAuth2Credentials.scopes);      }      authorizationCodeFlow=builder.setDataStoreFactory(credentialDataStoreFactory).build();    } catch (    IOException e) {      throw new IllegalStateException("Unexpected exception while building OAuth2Credentials.",e);    }  }  oAuth2Credentials.authorizationCodeFlow=authorizationCodeFlow;  return oAuth2Credentials;}  }
class C{  public void addResultSet(MariaSelectResultSet result,boolean moreResultAvailable){  this.resultSet=result;  this.insertId[currentStat]=Statement.SUCCESS_NO_INFO;  this.affectedRows[currentStat++]=-1;  this.setMoreResultAvailable(moreResultAvailable);}  }
class C{  @org.junit.Test public void testImport() throws Exception {  Utils.sleep(SLEEP);  Bot bot=Bot.createInstance();  Utils.sleep(5000);  bot.shutdown();}  }
class C{  public void doFilter(GenericContainerResponse containerResponse){  Object entity=containerResponse.getEntity();  if (entity == null) {    return;  }  if (!MediaType.APPLICATION_JSON_TYPE.equals(containerResponse.getContentType())) {    return;  }  ApplicationContext applicationContext=ApplicationContextImpl.getCurrent();  Request request=applicationContext.getRequest();  if (!HttpMethod.GET.equals(request.getMethod())) {    return;  }  HashFunction hashFunction=Hashing.md5();  Hasher hasher=hashFunction.newHasher();  boolean hashingSuccess=true;  if (entity instanceof List) {    List<?> entities=(List)entity;    for (    Object simpleEntity : entities) {      hashingSuccess=addHash(simpleEntity,hasher);      if (!hashingSuccess) {        break;      }    }  } else {    hashingSuccess=addHash(entity,hasher);  }  if (hashingSuccess) {    HashCode hashCode=hasher.hash();    EntityTag entityTag=new EntityTag(hashCode.toString());    Response.ResponseBuilder builder=request.evaluatePreconditions(entityTag);    if (builder != null) {      containerResponse.setResponse(builder.tag(entityTag).build());    } else {      Response.ResponseBuilder responseBuilder=Response.fromResponse(containerResponse.getResponse()).tag(entityTag);      containerResponse.setResponse(responseBuilder.build());    }  }}  }
class C{  private static boolean equalsMayBeNull(Object obj1,Object obj2){  return (obj2 == obj1) || ((null != obj1) && (null != obj2) && obj2.equals(obj1));}  }
class C{  private boolean isDisabled(){  if (_maxAuthnLoginAttemtsCount == 0 || _maxAuthnLoginAttemtsLifeTimeInMins == 0) {    return true;  }  return false;}  }
class C{  public AsyncResult CreateSubscriptionAsync(CreateSubscriptionRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  protected List<ImageDTO> extractImagesFromCursor(Cursor cursor,int offset,int limit){  List<ImageDTO> images=new ArrayList<>();  int count=0;  int begin=offset > 0 ? offset : 0;  if (cursor.moveToPosition(begin)) {    do {      ImageDTO image=extractOneImageFromCurrentCursor(cursor);      images.add(image);      count++;      if (limit > 0 && count > limit) {        break;      }    } while (cursor.moveToNext());  }  cursor.close();  return images;}  }
class C{  public E remove(int index){  checkElementIndex(index);  return unlink(node(index));}  }
class C{  public int readInteger() throws IOException, ImportException {  String token=readToken();  try {    return Integer.parseInt(token);  } catch (  NumberFormatException nfe) {    throw new ImportException("Number format error: " + nfe.getMessage());  }}  }
class C{  public PutIndexedScriptRequest source(XContentBuilder sourceBuilder){  source=sourceBuilder.bytes();  return this;}  }
class C{  public <OUT>DataStreamSource<OUT> createTestStream(EventTimeInput<OUT> input){  return testEnv.fromInput(input);}  }
class C{  public boolean isSetErrorCode(){  return EncodingUtils.testBit(__isset_bitfield,__ERRORCODE_ISSET_ID);}  }
class C{  public LogicalSwitchApi(RestClient restClient){  super(restClient);}  }
class C{  @Override public void updateFloat(String columnLabel,float x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateFloat(" + quote(columnLabel) + ", "+ x+ "f);");    }    update(columnLabel,ValueFloat.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void parseLoggcFile(InputStream loggcFileStream,DefaultMutableTreeNode root){  BufferedReader bis=new BufferedReader(new InputStreamReader(loggcFileStream));  Vector histograms=new Vector();  try {    while (bis.ready()) {      bis.mark(getMarkSize());      String nextLine=bis.readLine();      if (nextLine.startsWith("num   #instances    #bytes  class name")) {        bis.reset();        histograms.add(parseNextClassHistogram(bis));      }    }    for (int i=histograms.size() - 1; i >= 0; i--) {      DefaultMutableTreeNode dump=getNextDumpForHistogram(root);      if (dump != null) {        addHistogramToDump(dump,(HistogramTableModel)histograms.get(i));      }    }  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  public synchronized void addAction(IAction action){  SchedulerAction schedulerAction=new SchedulerAction(0,action);  addSchedulerAction(schedulerAction);}  }
class C{  public T load(){  Query query=dialect().load(this);  query.use(db());  Object r=query.load(this);  return (T)r;}  }
class C{  private void log(String str){  Log.i(this.getClass().getSimpleName(),"-------" + str);}  }
class C{  public void export(String fileName,Class<? extends AExporter> aExporter) throws ExporterException {  export(fileName,aExporter,false);}  }
class C{  public void downloadTranscriptsForVideo(TranscriptModel transcript){  if (transcript == null) {    return;  }  if (transcript.chineseUrl != null) {    startTranscriptDownload(transcript.chineseUrl);  }  if (transcript.englishUrl != null) {    startTranscriptDownload(transcript.englishUrl);  }  if (transcript.frenchUrl != null) {    startTranscriptDownload(transcript.frenchUrl);  }  if (transcript.germanUrl != null) {    startTranscriptDownload(transcript.germanUrl);  }  if (transcript.portugueseUrl != null) {    startTranscriptDownload(transcript.portugueseUrl);  }  if (transcript.spanishUrl != null) {    startTranscriptDownload(transcript.spanishUrl);  }}  }
class C{  public static String toString(Double arg){  return toString("%f",arg);}  }
class C{  public TypeEraseFilter(TokenStream input){  super(input);}  }
class C{  public void print(Object s) throws IOException {  out.write(Convert.escapeUnicode(s.toString()));}  }
class C{  static void i(String msg){  if (debug) {    android.util.Log.i(TAG,msg);  }}  }
class C{  public PlayerContainerData(MatchThread matchThread,Match match,PlayingPlayerContainer playing){  if (match != null && playing == null) {    throw new IllegalArgumentException("Playing cannot be null when match is not null");  }  this.matchThread=matchThread;  this.match=match;  this.playing=playing;}  }
class C{  public void load(InputStream in) throws IOException {  properties.load(in);  dirty=false;}  }
class C{  public void zoom(final float zoomFactor){  try {    viewBox.zoom(zoomFactor);  } catch (  OsmException e) {    e.printStackTrace();  }  DataStyle.updateStrokes(strokeWidth(viewBox.getWidth()));  if (rotatingWay) {    showCrosshairsForCentroid();  }  map.postInvalidate();}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int d, x2, y2;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentValue=0;    double currentOrder=0;    double maxStreamOrder=noData;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentOrder=1;            output.setValue(y,x,currentOrder);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > currentOrder) {                    flag=false;                    break;                  }                  if (currentValue == currentOrder) {                    numNeighbouringStreamCells=0;                    for (d=0; d < 8; d++) {                      x2=x + dX[d];                      y2=y + dY[d];                      if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d] && output.getValue(y2,x2) == currentOrder) {                        numNeighbouringStreamCells++;                      }                    }                    if (numNeighbouringStreamCells >= 2) {                      currentOrder++;                      if (currentOrder > maxStreamOrder) {                        maxStreamOrder=currentOrder;                      }                    } else {                      flag=false;                      break;                    }                  }                  if (currentValue < currentOrder) {                    output.setValue(y,x,currentOrder);                  }                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,output.getValue(y,x) + 1);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void populateActionHistoryDetails(final Target target){  if (null != target) {    actionHistoryHeader.populateHeader(target.getName());    actionHistoryTable.setAlreadyHasMessages(false);    actionHistoryTable.populateTableData(target);  } else {    actionHistoryHeader.updateActionHistoryHeader(" ");    actionHistoryTable.setAlreadyHasMessages(false);    actionHistoryTable.clearContainerData();  }}  }
class C{  @NonNull public IconDrawable color(@ColorInt int color){  return color(ColorStateList.valueOf(color));}  }
class C{  void read(int startPos,byte[] buff,int off,int len){  System.arraycopy(data.getBytes(),startPos,buff,off,len);}  }
class C{  private void constructFan(Node target,Graph graph){  addAllowableAssociates(target,graph);  prune(target,graph);}  }
class C{  public void start(){  try {    mCurrentMediaPlayer.start();  } catch (  Throwable ignored) {  }}  }
class C{  public JNIEnvironment(){  JNIRefs=JNIRefsShadow=createArrayForJNIRefs(JNIREFS_ARRAY_LENGTH);  JNIRefsTop=0;  JNIRefsSavedFP=0;  adjustJNIRefsMaxForNewArrayLength();  alwaysHasNativeFrame=false;}  }
class C{  public RoundedToolbar(final Composite parent,final int style,Color startGradientColor,Color endGradientColor){  super(parent,style | SWT.DOUBLE_BUFFERED);  items=new ArrayList<RoundedToolItem>();  cornerRadius=2;  addListeners();  START_GRADIENT_COLOR=startGradientColor;  END_GRADIENT_COLOR=endGradientColor;}  }
class C{  public static String reformatJavaSourceAsString(String source){  TextEdit reformatTextEdit=CodeFormatterUtil.format2(CodeFormatter.K_COMPILATION_UNIT,source,0,(String)null,JavaCore.getOptions());  if (reformatTextEdit != null) {    Document document=new Document(source);    try {      reformatTextEdit.apply(document,TextEdit.NONE);      source=document.get();    } catch (    BadLocationException ble) {      CorePluginLog.logError(ble);    }  }  return source;}  }
class C{  public InlineQueryResultAudio build(){  return new InlineQueryResultAudio(id,audio_url,title,performer,audio_duration,reply_markup,input_message_content,caption);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollFirstEntry(){  throw new UnsupportedOperationException();}  }
class C{  public CannotCompileException(CompileError e){  this("[source error] " + e.getMessage(),e);}  }
class C{  public void removeAttributeNS(String namespaceURI,String localName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  public DeviceIndexInterator(DeviceManagerImpl deviceManager,Iterator<Long> subIterator){  super();  this.deviceManager=deviceManager;  this.subIterator=subIterator;}  }
class C{  public int availableSpace(){  return _maxUDPPayload - HEADER_SIZE - _questionsBytes.size()- _answersBytes.size()- _authoritativeAnswersBytes.size()- _additionalsAnswersBytes.size();}  }
class C{  public DistinguishedNameException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override public void run(){  while (isLeader.get()) {    try {      checkRecoveryStatus();      checkClusterStatus();      runNodeRecovery();    } catch (    Exception e) {      log.warn("Internal error of Recovery manager: ",e.getMessage());    }  }}  }
class C{  public GuaranteedValue(String key,Object fallback){  if (key == null || fallback == null) {    throw new NullPointerException("Null parameters: " + key + ','+ fallback);  }  value=UIManager.get(key);  if (value == null) {    value=fallback;  }}  }
class C{  public void actionPerformed(ActionEvent e){  resultField.setText(processStatements(sqlField.getText(),false));}  }
class C{  public ReturnStatement newReturnStatement(){  return new ReturnStatement(this);}  }
class C{  public void addListener(final IGraphSearchFieldListener listener){  m_listenerProvider.addListener(listener);}  }
class C{  public static KeyPair generateDSAKeyPair() throws NoSuchAlgorithmException {  KeyPairGenerator gen=KeyPairGenerator.getInstance("DSA");  gen.initialize(1024);  KeyPair pair=gen.generateKeyPair();  return pair;}  }
class C{  public HessianConnection open(URL url) throws IOException {  if (log.isLoggable(Level.FINER))   log.finer(this + " open(" + url+ ")");  URLConnection conn=url.openConnection();  long connectTimeout=_proxyFactory.getConnectTimeout();  if (connectTimeout >= 0)   conn.setConnectTimeout((int)connectTimeout);  conn.setDoOutput(true);  long readTimeout=_proxyFactory.getReadTimeout();  if (readTimeout > 0) {    try {      conn.setReadTimeout((int)readTimeout);    } catch (    Throwable e) {    }  }  return new HessianURLConnection(url,conn);}  }
class C{  public static final int makeIntFromByte4(byte[] b,int offset){  return b[offset] << 24 | (b[offset + 1] & 0xff) << 16 | (b[offset + 2] & 0xff) << 8 | (b[offset + 3] & 0xff);}  }
class C{  public Boolean isApiWallet(){  return apiWallet;}  }
class C{  public Vertex size(Vertex source){  if (source.instanceOf(Primitive.ARRAY)) {    Collection<Relationship> elements=source.getRelationships(Primitive.ELEMENT);    if (elements == null) {      return source.getNetwork().createVertex(0);    }    return source.getNetwork().createVertex(elements.size());  } else   if (source.instanceOf(Primitive.SENTENCE) || source.instanceOf(Primitive.FRAGMENT)) {    Collection<Relationship> elements=source.getRelationships(Primitive.WORD);    if (elements == null) {      return source.getNetwork().createVertex(0);    }    return source.getNetwork().createVertex(elements.size());  }  return source.getNetwork().createVertex(source.getAllRelationships().size());}  }
class C{  public List<Double> train(DataSource<Document> docs,int numIterations,int numBurnIn){  LOG.info("Training start, num_iter:" + numIterations + " num_burn_in:"+ numBurnIn);  List<Double> loglikelihoods=new ArrayList<Double>();  setLocked(false);  long numTagTokens=0;  int totalNumDocs=0;  for (  Document d : docs) {    initializeDocument(d);    numTagTokens+=d.tags.length;    totalNumDocs++;  }  docs.rewind();  LOG.info("Number of tag tokens: " + numTagTokens + " N/R: "+ pcm());  SparseCounter<String> meanNtw=new SparseCounter<String>();  Counter<String> meanNw=new Counter<String>();  for (int i=0; i < numIterations; i++) {    double l=0;    Map<String,AnyDoublePair<Integer>> perTagLikelihood=new Hashtable<String,AnyDoublePair<Integer>>();    long numDocs=0;    for (    Document d : docs) {      l+=inference(d,perTagLikelihood);      numDocs++;      if (numDocs % 1000 == 0) {        System.err.print("Sampling " + (numDocs * 100 / totalNumDocs) + "%  \r");        System.err.flush();      }    }    docs.rewind();    l/=numTagTokens;    double pertagl=0;    for (    Entry<String,AnyDoublePair<Integer>> e : perTagLikelihood.entrySet()) {      pertagl+=e.getValue().second / (double)e.getValue().first;    }    pertagl/=perTagLikelihood.size();    LOG.info(" No: " + i + " LL: "+ String.format("%.4f",l)+ " PL: "+ String.format("%.4f",pertagl)+ " NR: "+ String.format("%.4f",pcm())+ " SP: "+ String.format("%.4f",ntw.sparsity())+ " NZ: "+ ntw.numNonZeroElements());    if (i > numBurnIn) {      meanNtw.inc(ntw);      meanNw.inc(nw);    }    loglikelihoods.add(l);  }  ntw=null;  ntw=meanNtw;  nw=null;  nw=meanNw;  numCombinedIterations=numIterations - numBurnIn;  setLocked(true);  return loglikelihoods;}  }
class C{  public RegexValidator(String[] regexs){  this(regexs,true);}  }
class C{  public ConnectionResult(Network network,Headers responseHeaders,InputStream serverStream,Exception exception){  this.network=network;  this.mResponseHeaders=responseHeaders;  this.mServerStream=serverStream;  this.mException=exception;}  }
class C{  private static void globalStepTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"comprehensive_promotion",TestType.ADD);  final HLL hll=newHLL(HLLType.EMPTY);  initLineAdd(output,hll,schemaVersion);  for (int i=0; i < 10000; i++) {    cumulativeAddLine(output,hll,randomLong(),schemaVersion);  }  output.flush();  output.close();}  }
class C{  public static boolean verifyTopology(TopologyAPI.Topology topology){  if (!topology.hasName() || topology.getName().isEmpty()) {    LOG.severe("Missing topology name");    return false;  }  if (topology.getName().contains(".") || topology.getName().contains("/")) {    LOG.severe("Invalid topology name. Topology name shouldn't have . or /");    return false;  }  getComponentRamMapConfig(topology);  Set<String> outputStreams=new HashSet<>();  for (  TopologyAPI.Spout spout : topology.getSpoutsList()) {    for (    TopologyAPI.OutputStream stream : spout.getOutputsList()) {      outputStreams.add(stream.getStream().getComponentName() + "/" + stream.getStream().getId());    }  }  for (  TopologyAPI.Bolt bolt : topology.getBoltsList()) {    for (    TopologyAPI.OutputStream stream : bolt.getOutputsList()) {      outputStreams.add(stream.getStream().getComponentName() + "/" + stream.getStream().getId());    }  }  for (  TopologyAPI.Bolt bolt : topology.getBoltsList()) {    for (    TopologyAPI.InputStream stream : bolt.getInputsList()) {      String key=stream.getStream().getComponentName() + "/" + stream.getStream().getId();      if (!outputStreams.contains(key)) {        LOG.severe("Invalid input stream " + key + " existing streams are "+ outputStreams);        return false;      }    }  }  return true;}  }
class C{  public void updatePresenters(RosiePresenter.View view){  if (view == null) {    throw new IllegalArgumentException("The view instance used to update the presenters can't be null");  }  for (  RosiePresenter presenter : presenters) {    presenter.setView(view);    presenter.update();  }}  }
class C{  private void advance(Node prev){  Node r, b;  if ((r=lastRet) != null && !r.isMatched())   lastPred=r; else   if ((b=lastPred) == null || b.isMatched())   lastPred=null; else {    Node s, n;    while ((s=b.next) != null && s != b && s.isMatched() && (n=s.next) != null && n != s)     b.casNext(s,n);  }  this.lastRet=prev;  for (Node p=prev, s, n; ; ) {    s=(p == null) ? head : p.next;    if (s == null)     break; else     if (s == p) {      p=null;      continue;    }    Object item=s.item;    if (s.isData) {      if (item != null && item != s) {        nextItem=LinkedTransferQueue.<E>cast(item);        nextNode=s;        return;      }    } else     if (item == null)     break;    if (p == null)     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=null; else     p.casNext(s,n);  }  nextNode=null;  nextItem=null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Sage.putBoolean("videoframe/force_live_playback_on_currently_airing_programs",evalBool(stack.pop()));  NetworkClient.distributePropertyChange("videoframe/force_live_playback_on_currently_airing_programs");  return null;}  }
class C{  public static void copy(InputStream in,OutputStream out) throws IOException {  byte[] buffer=new byte[2048];  int i;  while ((i=in.read(buffer)) > 0) {    out.write(buffer,0,i);  }}  }
class C{  public static void sort(float[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public synchronized void signInputs(SigHash hashType,Wallet wallet,@Nullable KeyParameter aesKey) throws ScriptException {  checkState(inputs.size() > 0);  checkState(outputs.size() > 0);  checkArgument(hashType == SigHash.ALL,"Only SIGHASH_ALL is currently supported");  TransactionSignature[] signatures=new TransactionSignature[inputs.size()];  RemoteECKey[] signingKeys=new RemoteECKey[inputs.size()];  for (int i=0; i < inputs.size(); i++) {    TransactionInput input=inputs.get(i);    if (input.getOutpoint().getConnectedOutput() == null) {      log.warn("Missing connected output, assuming input {} is already signed.",i);      continue;    }    try {      input.getScriptSig().correctlySpends(this,i,input.getOutpoint().getConnectedOutput().getScriptPubKey(),true);      log.warn("Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing.",i);      continue;    } catch (    ScriptException e) {    }    if (input.getScriptBytes().length != 0)     log.warn("Re-signing an already signed transaction! Be sure this is what you want.");    ECKey keyT=input.getOutpoint().getConnectedKey(wallet);    log.debug("Trying to replace key");    RemoteECKey rECKey=null;    try {      String filename=Utils.bytesToHexString(keyT.getPubKeyHash());      FileInputStream fis=new FileInputStream(filename + ".key");      ObjectInputStream in=new ObjectInputStream(fis);      rECKey=(RemoteECKey)in.readObject();      in.close();      fis.close();    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }catch (    ClassNotFoundException e) {      e.printStackTrace();    }    RemoteECKey key=null;    if (keyT != null && rECKey != null && Arrays.equals(keyT.getPubKey(),rECKey.getPubKey())) {      log.debug("Found key to replace");      key=rECKey;    } else {      log.error("Didn't find key to replace");    }    checkNotNull(key,"Transaction exists in wallet that we cannot redeem: %s",input.getOutpoint().getHash());    signingKeys[i]=key;    boolean anyoneCanPay=false;    byte[] connectedPubKeyScript=input.getOutpoint().getConnectedPubKeyScript();    if (key.hasPrivKey() || key.isEncrypted()) {      signatures[i]=calculateSignature(i,key,aesKey,connectedPubKeyScript,hashType,anyoneCanPay);    } else {      signatures[i]=TransactionSignature.dummy();    }  }  for (int i=0; i < inputs.size(); i++) {    if (signatures[i] == null)     continue;    TransactionInput input=inputs.get(i);    final TransactionOutput connectedOutput=input.getOutpoint().getConnectedOutput();    checkNotNull(connectedOutput);    Script scriptPubKey=connectedOutput.getScriptPubKey();    if (scriptPubKey.isSentToAddress()) {      input.setScriptSig(ScriptBuilder.createInputScript(signatures[i],signingKeys[i]));    } else     if (scriptPubKey.isSentToRawPubKey()) {      input.setScriptSig(ScriptBuilder.createInputScript(signatures[i]));    } else {      throw new RuntimeException("Do not understand script type: " + scriptPubKey);    }  }}  }
class C{  public String typeName(){  return typeName;}  }
class C{  public void testAbsMathContextPos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  int precision=41;  RoundingMode rm=RoundingMode.HALF_EVEN;  MathContext mc=new MathContext(precision,rm);  String result="1.2380964839238475457356735674573563567890E+53";  int resScale=-13;  BigDecimal res=aNumber.abs(mc);  assertEquals("incorrect value",result,res.toString());  assertEquals("incorrect scale",resScale,res.scale());}  }
class C{  public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitDescending(){  throw new UnsupportedOperationException("Not implemented yet!");}  }
class C{  public CommentWhitespaceListener(Printer printer,List<Token> singleLineComments,List<Token> multilineComments){  super(printer,singleLineComments,multilineComments);}  }
class C{  public void readSequence(ASN1Sequence sequence) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCE) {    throw expected("sequence");  }  int begOffset=offset;  int endOffset=begOffset + length;  ASN1Type[] type=sequence.type;  int i=0;  if (isVerify) {    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        i++;      }      type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }    }  } else {    int seqTagOffset=tagOffset;    Object[] values=new Object[type.length];    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        if (sequence.DEFAULT[i] != null) {          values[i]=sequence.DEFAULT[i];        }        i++;      }      values[i]=type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }      if (sequence.DEFAULT[i] != null) {        values[i]=sequence.DEFAULT[i];      }    }    content=values;    tagOffset=seqTagOffset;  }  if (offset != endOffset) {    throw new ASN1Exception("Wrong encoding at [" + begOffset + "]. Content's length and encoded length are not the same");  }}  }
class C{  @Override public int compareTo(GeoLocation o){  if (this.equals(o))   return 0;  long s=(ph(this.getPopulation()) << 30) + this.hashCode();  long t=(ph(o.getPopulation()) << 30) + o.hashCode();  if (s > t)   return -1;  if (s < t)   return 1;  return 0;}  }
class C{  private String sql_select(String vendorName,String catalogName,String schemaName,String tableName,String tableAlias,ArrayList<String> columnNames,ArrayList<String> aliasNames,ArrayList<String> joinTypes,ArrayList<String> joinTables,ArrayList<String> joinAliases,ArrayList<String> joinConditions,ArrayList<String> conditions,ArrayList<String> sortColumns,boolean isDistinct){  if (tableAlias == null)   tableAlias="t";  if (joinTables != null) {    if (joinAliases == null) {      joinAliases=new ArrayList<String>();      for (int i=0; i < joinTables.size(); i++)       joinAliases.add(new StringBuffer("t").append(i).toString());    }  }  ArrayList<String> translatedAliasNames=null;  if (columnNames != null && (aliasNames == null || aliasNames.size() != columnNames.size())) {    translatedAliasNames=new ArrayList<String>();    for (    String columnName : columnNames) {      translatedAliasNames.add(columnName);    }  } else   if (aliasNames != null) {    translatedAliasNames=new ArrayList<String>();    for (    String aliasName : aliasNames) {      translatedAliasNames.add(aliasName);    }  }  ArrayList<String> translatedColumnNames=null;  if (columnNames != null) {    translatedColumnNames=new ArrayList<String>();    for (    String columnName : columnNames) {      translatedColumnNames.add(normalizeColumnName(vendorName,columnName));    }  }  if (translatedColumnNames != null && translatedAliasNames != null) {    for (int i=0; i < translatedColumnNames.size(); i++) {      if (translatedColumnNames.get(i).equals(translatedAliasNames.get(i)))       translatedAliasNames.set(i,null);    }  }  if (columnNames != null) {    if (columnNames.get(0).equalsIgnoreCase("*")) {      translatedColumnNames=null;      translatedAliasNames=null;    }  }  return m_interfaces.get(getDBVendorID(vendorName)).sql_select(catalogName,schemaName,tableName,tableAlias,translatedColumnNames,translatedAliasNames,joinTypes,joinTables,joinAliases,joinConditions,conditions,sortColumns,isDistinct);}  }
class C{  @Override public PathImpl lookupImpl(String userPath,Map<String,Object> newAttributes,boolean isAllowRoot){  String newPath;  if (userPath == null)   return _root.fsWalk(getPath(),newAttributes,"/");  int length=userPath.length();  int colon=userPath.indexOf(':');  int slash=userPath.indexOf('/');  int query=userPath.indexOf('?');  if (colon != -1 && (colon < slash || slash == -1))   return super.lookupImpl(userPath,newAttributes,isAllowRoot);  if (slash == 0 && length > 1 && userPath.charAt(1) == '/')   return schemeWalk(userPath,newAttributes,userPath,0); else   if (slash == 0) {    String queryString="";    if (query >= 0) {      queryString=userPath.substring(query);      userPath=userPath.substring(0,query);    }    newPath=normalizePath("/",userPath,0,'/');    if (query >= 0)     newPath+=queryString;  } else {    String queryString="";    if (query >= 0) {      queryString=userPath.substring(query);      userPath=userPath.substring(0,query);    }    newPath=normalizePath(_pathname,userPath,0,'/');    if (query >= 0)     newPath+=queryString;  }  return _root.fsWalk(userPath,newAttributes,newPath);}  }
class C{  public static <T>GitNoteWriter<T> createNoteWriter(String reviewCommitHash,final Repository db,PersonIdent author,String ref){  return new GitNoteWriter<T>(reviewCommitHash,db,ref,author);}  }
class C{  public Bus(){  this(DEFAULT_IDENTIFIER);}  }
class C{  Property(Partial partial,int fieldIndex){  super();  iPartial=partial;  iFieldIndex=fieldIndex;}  }
class C{  public YearSorter(boolean ascending){  super(ascending);}  }
class C{  protected void establishRoute(HttpRoute route,HttpContext context) throws HttpException, IOException {  HttpRouteDirector rowdy=new BasicRouteDirector();  int step;  do {    HttpRoute fact=managedConn.getRoute();    step=rowdy.nextStep(route,fact);switch (step) {case HttpRouteDirector.CONNECT_TARGET:case HttpRouteDirector.CONNECT_PROXY:      managedConn.open(route,context,this.params);    break;case HttpRouteDirector.TUNNEL_TARGET:{    boolean secure=createTunnelToTarget(route,context);    this.log.debug("Tunnel to target created.");    managedConn.tunnelTarget(secure,this.params);  }break;case HttpRouteDirector.TUNNEL_PROXY:{final int hop=fact.getHopCount() - 1;boolean secure=createTunnelToProxy(route,hop,context);this.log.debug("Tunnel to proxy created.");managedConn.tunnelProxy(route.getHopTarget(hop),secure,this.params);}break;case HttpRouteDirector.LAYER_PROTOCOL:managedConn.layerProtocol(context,this.params);break;case HttpRouteDirector.UNREACHABLE:throw new IllegalStateException("Unable to establish route." + "\nplanned = " + route + "\ncurrent = "+ fact);case HttpRouteDirector.COMPLETE:break;default :throw new IllegalStateException("Unknown step indicator " + step + " from RouteDirector.");}} while (step > HttpRouteDirector.COMPLETE);}  }
class C{  private void addContainerproperties(){  container.addContainerProperty(SPUILabelDefinitions.NAME,String.class,null);  container.addContainerProperty(SPUILabelDefinitions.VAR_CREATED_BY,String.class,null);  container.addContainerProperty(SPUILabelDefinitions.VAR_CREATED_DATE,Date.class,null);  container.addContainerProperty(SPUILabelDefinitions.VAR_LAST_MODIFIED_BY,String.class,null,false,true);  container.addContainerProperty(SPUILabelDefinitions.VAR_LAST_MODIFIED_DATE,String.class,null,false,true);  container.addContainerProperty(SPUILabelDefinitions.VAR_TARGET_STATUS,TargetUpdateStatus.class,null);  container.addContainerProperty(SPUILabelDefinitions.VAR_DESC,String.class,"",false,true);  container.addContainerProperty(ASSIGN_DIST_SET,DistributionSet.class,null,false,true);  container.addContainerProperty(INSTALL_DIST_SET,DistributionSet.class,null,false,true);  container.addContainerProperty(SPUILabelDefinitions.ASSIGNED_DISTRIBUTION_NAME_VER,String.class,"");  container.addContainerProperty(SPUILabelDefinitions.INSTALLED_DISTRIBUTION_NAME_VER,String.class,null);}  }
class C{  public static <T>LazyDequeX<T> fromIterable(Collector<T,?,Deque<T>> collector,Iterable<T> it){  if (it instanceof LazyDequeX)   return (LazyDequeX<T>)it;  if (it instanceof Deque)   return new LazyDequeX<T>((Deque<T>)it,collector);  return new LazyDequeX<T>(Flux.fromIterable(it),collector);}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public static String readFileString(String path,String defaultValue){  File file=new File(path);  logt("Checking if file exists: " + path);  if (file.exists()) {    String readResult="";    try {      InputStream inputStream=new FileInputStream(file);      logt("Reading file...");      InputStreamReader inputStreamReader=new InputStreamReader(inputStream);      BufferedReader bufferedReader=new BufferedReader(inputStreamReader);      String readString;      StringBuilder stringBuilder=new StringBuilder();      while ((readString=bufferedReader.readLine()) != null) {        stringBuilder.append(readString).append("\n");      }      stringBuilder.delete(stringBuilder.length() - 1,stringBuilder.length() - 2);      inputStream.close();      logt("Read complete.");      readResult=stringBuilder.toString();      stringBuilder.delete(0,stringBuilder.length() - 1);    } catch (    FileNotFoundException e) {      Log.e("readFile","File not found: " + e.toString());      readResult="null;FileNotFoundException";    }catch (    IOException e) {      Log.e("readFile","Cannot read file (IOException): " + e.toString());      readResult="null;IOException";    }    return readResult;  } else {    return defaultValue;  }}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;}  }
class C{  static String validateTnf(short tnf,byte[] type,byte[] id,byte[] payload){switch (tnf) {case TNF_EMPTY:    if (type.length != 0 || id.length != 0 || payload.length != 0) {      return "unexpected data in TNF_EMPTY record";    }  return null;case TNF_WELL_KNOWN:case TNF_MIME_MEDIA:case TNF_ABSOLUTE_URI:case TNF_EXTERNAL_TYPE:return null;case TNF_UNKNOWN:case TNF_RESERVED:if (type.length != 0) {return "unexpected type field in TNF_UNKNOWN or TNF_RESERVEd record";}return null;case TNF_UNCHANGED:return "unexpected TNF_UNCHANGED in first chunk or logical record";default :return String.format("unexpected tnf value: 0x%02x",tnf);}}  }
class C{  @SmallTest public void testCreateSpeechRules_filteringByTextProperty() throws Exception {  final String strategy="<ss:rule>" + "   <ss:filter>" + "       <ss:text>first blank second</ss:text>"+ "   </ss:filter>"+ "   <ss:formatter>"+ "       <ss:template>template</ss:template>"+ "   </ss:formatter>"+ "</ss:rule>";  final AccessibilityEvent event=AccessibilityEvent.obtain();  event.getText().add("first blank second");  final EventSpeechRuleProcessor processor=createProcessorWithStrategy(strategy,1);  final Utterance utterance=new Utterance();  final boolean processed=processor.processEvent(event,utterance);  assertTrue("The event must match the filter",processed);  assertFalse("An utterance must be produced",TextUtils.isEmpty(StringBuilderUtils.getAggregateText(utterance.getSpoken())));}  }
class C{  public boolean isGenerator(){  return generator;}  }
class C{  private void resizeBounds(int x,int y){  if (_bleft == -1)   _bleft=x; else   if (x < _bleft)   _bleft=x;  if (_bright == -1)   _bright=x; else   if (x > _bright)   _bright=x;  if (_btop == -1)   _btop=y; else   if (y < _btop)   _btop=y;  if (_bbottom == -1)   _bbottom=y; else   if (y > _bbottom)   _bbottom=y;}  }
class C{  public static List<String> buildDefaultMR4CConfig(List<String> args) throws IOException {  MR4CConfigBuilder builder=new MR4CConfigBuilder(MR4CConfig.getDefaultInstance(),args);  builder.build();  return builder.getRemainingArguments();}  }
class C{  protected void acceptHashcode(T model){  requireNonNull(model);  model.add(Method.of(HASHCODE,int.class).set(Javadoc.of("Generates a hashCode for this object. If any field is " + "changed to another value, the hashCode may be different. " + "Two objects with the same values are guaranteed to have "+ "the same hashCode. Two objects with the same hashCode are "+ "not guaranteed to have the same hashCode.").add(RETURN.setText("The hash code."))).public_().add(OVERRIDE).add("int hash = 7;").add(model.getFields().stream().map(null).collect(Collectors.joining(nl()))).add("return hash;"));}  }
class C{  public boolean remove(float val){  int index=index(val);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  private String processLogoutRequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {  String sessionId=null;  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();  Validate.notNull(sessionList,"sessionList");  Validate.isTrue(sessionList.size() > 0);  for (  SessionIndex sessionIndex : sessionList) {    Validate.notNull(sessionIndex);    String participantSession=sessionIndex.getSessionIndex();    Validate.notNull(participantSession,"participantSession");    Session session=sessionManager.getByParticipant(participantSession);    if (session == null) {      throw new SamlServiceException("Server session not found");    }    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {      throw new SamlServiceException("Issuer URL does not match session participant URL");    }    if (sessionId == null) {      sessionId=session.getId();    } else {      if (!sessionId.equals(session.getId())) {        throw new SamlServiceException("Participant requested multiple server sessions to be terminated");      }    }  }  return sessionId;}  }
class C{  public final AC sizeGroup(){  return sizeGroup("",curIx);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void writeTrailer(IndexOutput out,long dirStart) throws IOException {  out.writeLong(dirStart);}  }
class C{  @Override public Revision findHighestRevision(String revId){  if (Strings.isNullOrEmpty(revId)) {    revId="HEAD";  }  String hashID;  GitClonedRepository headClone=headCloneSupplier.get();  try {    hashID=headClone.runGitCommand("log","--max-count=1","--format=%H",revId).trim();  } catch (  CommandException e) {    throw new MoeProblem("Failed git log run: %d %s %s",e.returnStatus,e.stdout,e.stderr);  }  return Revision.create(hashID,headClone.getRepositoryName());}  }
class C{  public boolean extractText(ExtractedTextRequest request,ExtractedText outText){  return mInputView.extractText(request,outText);}  }
class C{  public int multipleBitVectorCrossover(final int min,final int max,final int start,final int subpopulation,final Individual[] inds,final EvolutionState state,final int thread){  if (!(inds[0] instanceof BitVectorIndividual))   state.output.fatal("Trying to produce bit vector individuals when you can't!");  if (sources.length <= 2)   state.output.error("Only two parents specified!");  int n=typicalIndsProduced();  if (n < min)   n=min;  if (n > max)   n=max;  for (int i=0; i < parents.length; i++) {    sources[i].produce(1,1,i,subpopulation,parents,state,thread);    if (!(sources[i] instanceof BreedingPipeline))     parents[i]=(BitVectorIndividual)(parents[i].clone());  }  VectorSpecies species=(VectorSpecies)inds[0].species;  for (int i=0; i < parents[0].genomeLength(); i++) {    if (state.random[thread].nextBoolean(species.crossoverProbability)) {      for (int j=parents.length - 1; j > 0; j--) {        int swapIndex=state.random[thread].nextInt(j);        boolean temp=((BitVectorIndividual)parents[j]).genome[i];        ((BitVectorIndividual)parents[j]).genome[i]=((BitVectorIndividual)parents[swapIndex]).genome[i];        ((BitVectorIndividual)parents[swapIndex]).genome[i]=temp;      }    }  }  for (int i=0, q=start; i < parents.length; i++, q++) {    parents[i].evaluated=false;    if (q < inds.length) {      inds[q]=(BitVectorIndividual)parents[i];    }  }  return n;}  }
class C{  private boolean tryExpire(final Player player){  if (!isGagged(player)) {    return true;  }  if (getTimeRemaining(player) < (10L * 1000L)) {    release(player);    return true;  }  return false;}  }
class C{  private boolean isMatrixObject(String outputName){  Data data=getData(outputName);  return (data instanceof MatrixObject);}  }
class C{  private int read(){  if (_index < _length)   return _sig.charAt(_index++); else   return -1;}  }
class C{  public int maximalRectangle(char[][] matrix){  if (matrix == null || matrix.length == 0 || matrix[0].length == 0)   return 0;  int m=matrix.length;  int n=matrix[0].length;  int[] height=new int[n + 1];  height[n]=0;  int max=0;  for (int i=0; i < m; i++) {    Stack<Integer> s=new Stack<Integer>();    for (int j=0; j < n + 1; j++) {      if (j < n) {        if (matrix[i][j] == '1')         height[j]+=1; else         height[j]=0;      }      while (!s.isEmpty() && height[j] < height[s.peek()]) {        int h=height[s.pop()];        int w=(s.isEmpty() ? j : j - s.peek() - 1);        max=Math.max(max,h * w);      }      s.push(j);    }  }  return max;}  }
class C{  public static char[] toPrimitive(Character[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_CHAR_ARRAY;  }  final char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].charValue();  }  return result;}  }
class C{  public static BloomFilter createOptimalFilter(int n,double falsePositiveProbability,int tweak,UpdateMode update){  double ln2=Math.log(2.0);  int mod=Math.max(1,(int)Math.min((-n * Math.log(falsePositiveProbability) / (ln2 * ln2)) / 8.0,MAX_FILTER_SIZE));  int hashFunctions=Math.max(1,Math.min((int)(mod * 8.0 / n * ln2),MAX_HASH_FUNCS));  return new BloomFilter(new byte[mod],hashFunctions,tweak,update);}  }
class C{  int updateChildOffsets(float targetOffset){  int n=getViewCount();  int targetIndex=n - 1;  int pos=lastValidOffset.getChildView().getStartOffset();  int startIndex=getViewIndex(pos,Position.Bias.Forward);  float start=lastValidOffset.getMajorOffset();  float lastOffset=start;  for (int i=startIndex; i < n; i++) {    ChildState cs=getChildState(i);    cs.setMajorOffset(lastOffset);    lastOffset+=cs.getMajorSpan();    if (targetOffset < lastOffset) {      targetIndex=i;      lastValidOffset=cs;      break;    }  }  return targetIndex;}  }
class C{  public int errorCount(){  return errors;}  }
class C{  protected void initializeWorld(){  this.world.setGravity(World.ZERO_GRAVITY);  this.controller=new SimulationBody(Color.CYAN);  this.controller.addFixture(Geometry.createCircle(0.5));  this.controller.setMass(MassType.INFINITE);  this.controller.setAutoSleepingEnabled(false);  this.world.addBody(this.controller);  SimulationBody player=new SimulationBody(Color.GREEN);  player.addFixture(Geometry.createCircle(0.5));  player.setMass(MassType.NORMAL);  player.setAutoSleepingEnabled(false);  this.world.addBody(player);  MotorJoint control=new MotorJoint(player,this.controller);  control.setCollisionAllowed(false);  control.setMaximumForce(1000.0);  control.setMaximumTorque(1000.0);  this.world.addJoint(control);  SimulationBody wall=new SimulationBody();  wall.addFixture(Geometry.createRectangle(1,10));  wall.setMass(MassType.INFINITE);  wall.translate(2,0);  this.world.addBody(wall);}  }
class C{  public void addPlot(PlotData2D newPlot) throws Exception {  if (newPlot.m_plotInstances == null) {    throw new Exception("No instances in plot data!");  }  if (m_masterPlot != null) {    if (m_masterPlot.m_plotInstances.equalHeaders(newPlot.m_plotInstances) == false) {      throw new Exception("Plot2D :Plot data's instances are incompatable " + " with master plot");    }  } else {    m_masterPlot=newPlot;    m_plotInstances=m_masterPlot.m_plotInstances;  }  m_plots.add(newPlot);  setXindex(m_xIndex);  setYindex(m_yIndex);  setCindex(m_cIndex);}  }
class C{  public void addEventListener(OneToOneChatListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IOneToOneChatListener rcsListener=new OneToOneChatListenerImpl(listener);    mOneToOneChatListeners.put(listener,new WeakReference<>(rcsListener));    mApi.addEventListener2(rcsListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public GF2mVector(GF2mField field,byte[] v){  this.field=new GF2mField(field);  int d=8;  int count=1;  while (field.getDegree() > d) {    count++;    d+=8;  }  if ((v.length % count) != 0) {    throw new IllegalArgumentException("Byte array is not an encoded vector over the given finite field.");  }  length=v.length / count;  vector=new int[length];  count=0;  for (int i=0; i < vector.length; i++) {    for (int j=0; j < d; j+=8) {      vector[i]|=(v[count++] & 0xff) << j;    }    if (!field.isElementOfThisField(vector[i])) {      throw new IllegalArgumentException("Byte array is not an encoded vector over the given finite field.");    }  }}  }
class C{  public DrawerBuilder withOnDrawerNavigationListener(@NonNull Drawer.OnDrawerNavigationListener onDrawerNavigationListener){  this.mOnDrawerNavigationListener=onDrawerNavigationListener;  return this;}  }
class C{  protected void printIssues(IssuesFeed issuesFeed){  for (  IssuesEntry issueEntry : issuesFeed.getEntries()) {    printIssue(issueEntry);  }}  }
class C{  public boolean activeOnly(){  return activeOnly;}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){  if (mRemoveEnabled && mIsRemoving) {    mPositionX=position.x;  }}  }
class C{  public double readDouble(){  return readDoubleArray()[0];}  }
class C{  @ReactMethod public void findSubviewIn(final int reactTag,final ReadableArray point,final Callback callback){  mUIImplementation.findSubviewIn(reactTag,Math.round(PixelUtil.toPixelFromDIP(point.getDouble(0))),Math.round(PixelUtil.toPixelFromDIP(point.getDouble(1))),callback);}  }
class C{  public void test_setShortLjava_lang_ObjectIS(){  short[] x={0};  boolean thrown=false;  try {    Array.setShort(x,0,(short)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getShort(x,0));  try {    Array.setShort(new Object(),0,(short)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setShort(x,4,(short)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setShort(null,0,(short)0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.254 -0500",hash_original_method="E4CA114D3203375891711738ECF0A722",hash_generated_method="F8EFAE91A5ADEB3557D34652D034011A") public void addPath(Path src,float dx,float dy){  isSimplePath=false;  addTaint(src.getTaintInt() + dx + dy);}  }
class C{  private void sumWithCompensation(double value){  double tmp=value - sumCompensation;  double velvel=sum + tmp;  sumCompensation=(velvel - sum) - tmp;  sum=velvel;}  }
class C{  public static void asserts(final boolean expression,final String failedMessage){  if (!expression) {    throw new AssertionError(failedMessage);  }}  }
class C{  public boolean isGroup(){  return group;}  }
class C{  public void write(OutputStream os) throws DataIOException {  try {    PrintStream out=new PrintStream(new BufferedOutputStream(os));    for (int i=0; i < names.length; ++i) {      out.print(names[i]);      out.print('\t');      out.print(cols[i + 1] - cols[i]);      out.println();    }  } catch (  Exception e) {    throw new DataIOException(e);  }}  }
class C{  protected final boolean hasAccessRole(){  for (  final String role : this.roles) {    if (this.shopFederationStrategy.isCurrentUser(role)) {      return true;    }  }  return false;}  }
class C{  public static void copyParentPropertiesToChild(final Configuration config){  copyParentPropToChild(config,MRUtils.AC_MOCK_PROP);  copyParentPropToChild(config,MRUtils.AC_INSTANCE_PROP);  copyParentPropToChild(config,MRUtils.AC_USERNAME_PROP);  copyParentPropToChild(config,MRUtils.AC_PWD_PROP);  copyParentPropToChild(config,MRUtils.AC_ZK_PROP);  MergeTool.setDuplicateKeys(config);}  }
class C{  private Cluster<SubspaceModel> runDOC(Database database,Relation<V> relation,ArrayModifiableDBIDs S,final int d,int n,int m,int r,int minClusterSize){  DBIDs C=null;  long[] D=null;  double quality=Double.NEGATIVE_INFINITY;  SubspaceMaximumDistanceFunction df=new SubspaceMaximumDistanceFunction(BitsUtil.zero(d));  DistanceQuery<V> dq=database.getDistanceQuery(relation,df);  RangeQuery<V> rq=database.getRangeQuery(dq);  FiniteProgress iprogress=LOG.isVerbose() ? new FiniteProgress("Iteration progress for current cluster",m * n,LOG) : null;  Random random=rnd.getSingleThreadedRandom();  DBIDArrayIter iter=S.iter();  for (int i=0; i < n; ++i) {    iter.seek(random.nextInt(S.size()));    for (int j=0; j < m; ++j) {      DBIDs randomSet=DBIDUtil.randomSample(S,r,random);      long[] nD=BitsUtil.zero(d);      for (int k=0; k < d; ++k) {        if (dimensionIsRelevant(k,relation,randomSet)) {          BitsUtil.setI(nD,k);        }      }      if (BitsUtil.cardinality(nD) > 0) {        df.setSelectedDimensions(nD);        DBIDs nC=DBIDUtil.intersection(S,rq.getRangeForDBID(iter,w));        if (LOG.isDebuggingFiner()) {          LOG.finer("Testing a cluster candidate, |C| = " + nC.size() + ", |D| = "+ BitsUtil.cardinality(nD));        }        if (nC.size() < minClusterSize) {          if (LOG.isDebuggingFiner()) {            LOG.finer("... but it's too small.");          }        } else {          double nQuality=computeClusterQuality(nC.size(),BitsUtil.cardinality(nD));          if (nQuality > quality) {            if (LOG.isDebuggingFiner()) {              LOG.finer("... and it's the best so far: " + nQuality + " vs. "+ quality);            }            C=nC;            D=nD;            quality=nQuality;          } else {            if (LOG.isDebuggingFiner()) {              LOG.finer("... but we already have a better one.");            }          }        }      }      LOG.incrementProcessed(iprogress);    }  }  LOG.ensureCompleted(iprogress);  return (C != null) ? makeCluster(relation,C,D) : null;}  }
class C{  public void onDisplayAreaChanged(MapPaneEvent ev){}  }
class C{  public static boolean installPackages(List<Package> toInstall,PrintStream... progress) throws Exception {  useCacheOrOnlineRepository();  List<Boolean> upgrades=new ArrayList<Boolean>();  for (  Package p : toInstall) {    if (p.isInstalled()) {      upgrades.add(new Boolean(true));    } else {      upgrades.add(new Boolean(false));    }  }  PACKAGE_MANAGER.installPackages(toInstall,progress);  boolean atLeastOneUpgrade=false;  List<File> gpcFiles=new ArrayList<File>();  int i=0;  for (  Package p : toInstall) {    boolean isAnUpgrade=upgrades.get(i++);    if (isAnUpgrade) {      atLeastOneUpgrade=true;    }    String packageName=p.getName();    File packageDir=new File(PACKAGE_MANAGER.getPackageHome().toString() + File.separator + packageName);    boolean loadIt=loadCheck(p,packageDir,progress);    if (loadIt & !isAnUpgrade) {      loadPackageDirectory(packageDir,false,gpcFiles,false);    }  }  for (  File f : gpcFiles) {    processGenericPropertiesCreatorProps(f);  }  return atLeastOneUpgrade;}  }
class C{  @Override public List<EventObject> retrieveHeadlessEvents(){  return m_headlessEvents;}  }
class C{  protected BigDecimal createDDOrder(MWMInOutBoundLine boundline){  WMRuleEngine engineRule=WMRuleEngine.get();  Collection<MStorage> storages=engineRule.getMStorage(boundline,p_WM_Area_Type_ID,p_WM_Section_Type_ID);  int M_Shipper_ID=0;  BigDecimal qtySupply=Env.ZERO;  if (storages != null && storages.size() > 0) {    MWarehouse[] wsts=MWarehouse.getInTransitForOrg(getCtx(),m_locator.getAD_Org_ID());    if (wsts == null || wsts.length == 0) {      throw new AdempiereException("Do not exist Transit Warehouse");    }    MOrg org=MOrg.get(getCtx(),m_locator.getAD_Org_ID());    int C_BPartner_ID=org.getLinkedC_BPartner_ID(get_TrxName());    if (C_BPartner_ID == 0) {      throw new NoBPartnerLinkedforOrgException(org);    }    MBPartner bp=MBPartner.get(getCtx(),C_BPartner_ID);    if (order == null) {      order=new MDDOrder(getCtx(),0,get_TrxName());      order.setAD_Org_ID(m_locator.getAD_Org_ID());      order.setC_BPartner_ID(C_BPartner_ID);      if (p_C_DocType_ID > 0) {        order.setC_DocType_ID(p_C_DocType_ID);      } else {        order.setC_DocType_ID(MDocType.getDocType(X_C_DocType.DOCBASETYPE_DistributionOrder));      }      order.setM_Warehouse_ID(wsts[0].get_ID());      if (p_DocAction != null) {        order.setDocAction(p_DocAction);      } else {        order.setDocAction(X_DD_Order.DOCACTION_Prepare);      }      MUser[] users=MUser.getOfBPartner(getCtx(),bp.getC_BPartner_ID(),get_TrxName());      if (users == null || users.length == 0) {        throw new AdempiereException("Do not exist Users for this Business Partner" + bp.getName());      }      order.setDateOrdered(getToday());      order.setDatePromised(getToday());      order.setAD_User_ID(users[0].getAD_User_ID());      order.setM_Shipper_ID(M_Shipper_ID);      order.setIsInDispute(false);      order.setIsInTransit(false);      order.setSalesRep_ID(bp.getPrimaryAD_User_ID());      order.saveEx();    }    for (    MStorage storage : storages) {      MDDOrderLine oline=new MDDOrderLine(order);      oline.setM_Locator_ID(storage.getM_Locator_ID());      oline.setM_LocatorTo_ID(p_M_Locator_ID);      oline.setC_UOM_ID(boundline.getC_UOM_ID());      oline.setM_Product_ID(boundline.getM_Product_ID());      oline.setDateOrdered(getToday());      oline.setDatePromised(boundline.getPickDate());      oline.set_ValueOfColumn(I_WM_InOutBoundLine.COLUMNNAME_WM_InOutBoundLine_ID,boundline.getWM_InOutBoundLine_ID());      oline.setIsInvoiced(false);      if (boundline.getQtyToPick().subtract(qtySupply).compareTo(storage.getQtyOnHand()) < 0) {        oline.setConfirmedQty(boundline.getQtyToPick());        oline.setQtyEntered(boundline.getQtyToPick());        oline.setQtyOrdered(boundline.getQtyToPick());        oline.setTargetQty(boundline.getQtyToPick());        qtySupply=qtySupply.add(boundline.getQtyToPick());      } else {        oline.setConfirmedQty(storage.getQtyOnHand());        oline.setQtyEntered(storage.getQtyOnHand());        oline.setQtyOrdered(storage.getQtyOnHand());        oline.setTargetQty(storage.getQtyOnHand());        qtySupply=qtySupply.add(storage.getQtyOnHand());      }      oline.saveEx();    }  } else {    qtySupply=boundline.getQtyToPick().subtract(qtySupply);  }  return qtySupply;}  }
class C{  public static <K,V>Collection<K> addAllKeysTo(Map<K,V> map,Collection<K> targetCollection){  MapIterate.forEachKey(map,CollectionAddProcedure.on(targetCollection));  return targetCollection;}  }
class C{  public int next(){  final int result=_currentNode;  if (result == END)   return DTM.NULL;  _currentNode=END;  if (_nodeType >= DTM.NTYPES) {    if (_exptype2(makeNodeIdentity(result)) == _nodeType) {      return returnNode(result);    }  } else {    if (_type2(makeNodeIdentity(result)) == _nodeType) {      return returnNode(result);    }  }  return NULL;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] addToArray(T[] array,T el){  T[] newArray=(T[])Array.newInstance(array.getClass().getComponentType(),array.length + 1);  System.arraycopy(array,0,newArray,0,array.length);  newArray[array.length]=el;  return newArray;}  }
class C{  public DatabaseBuilder putSummaryProperty(String name,DataType type,Object value){  _summaryProps=putProperty(_summaryProps,name,type,value);  return this;}  }
class C{  private void populateUnicodeVersion(String version,SortedMap<Integer,String> relativeURLs) throws IOException {  EnumMap<DataFileType,URL> dataFiles=new EnumMap<DataFileType,URL>(DataFileType.class);  for (  String relativeURL : relativeURLs.values()) {    URL baseURL=new URL(UNICODE_DOT_ORG_URL + relativeURL);    String versionedDirectoryListing=getPageContent(baseURL);    if (-1 != versionedDirectoryListing.indexOf("<a href=\"ucd/\">")) {      baseURL=new URL(baseURL,"ucd/");      versionedDirectoryListing=getPageContent(baseURL);    }    for (    DataFileType fileType : DataFileType.values()) {      if (null == dataFiles.get(fileType)) {        URL url=fileType.getURL(version,baseURL,versionedDirectoryListing);        if (null != url) {          dataFiles.put(fileType,url);        }      }    }    Matcher matcher=DIRECTORY_LINK_PATTERN.matcher(versionedDirectoryListing);    while (matcher.find()) {      URL nestedBaseURL=new URL(baseURL,matcher.group(1));      String nestedVersionedDirectoryListing=getPageContent(nestedBaseURL);      for (      DataFileType fileType : DataFileType.values()) {        if (null == dataFiles.get(fileType)) {          URL url=fileType.getURL(version,nestedBaseURL,nestedVersionedDirectoryListing);          if (null != url) {            dataFiles.put(fileType,url);          }        }      }    }  }  if (null != dataFiles.get(DataFileType.UNICODE_DATA)) {    UnicodeVersion unicodeVersion=new UnicodeVersion(version,dataFiles);    unicodeVersion.fetchAndParseDataFiles(getLog());    unicodeVersion.addCompatibilityProperties();    unicodeVersions.put(unicodeVersion.majorMinorVersion,unicodeVersion);    getLog().info("Completed downloading and parsing Unicode " + unicodeVersion.majorMinorVersion + " data.\n");  }}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  public ConverterFileChooser(File currentDirectory){  super(currentDirectory);  initialize();}  }
class C{  public JEditorString(){  super();}  }
class C{  public static void main(String[] args) throws AuthenticationException {  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","p");  boolean help=parser.containsKey("help","h");  if (help || username == null || password == null) {    usage();    System.exit(1);  }  CellDemo demo=new CellDemo(new SpreadsheetService("Cell Demo"),System.out);  demo.run(username,password);}  }
class C{  public static void main(String[] args) throws IgniteException {  System.out.println();  System.out.println(">>> Compute continuous mapper example started.");  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    int phraseLen=ignite.compute().execute(ContinuousMapperTask.class,"Hello Continuous Mapper");    System.out.println();    System.out.println(">>> Total number of characters in the phrase is '" + phraseLen + "'.");  } }  }
class C{  public void paintRootPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public synchronized void updateLines(){  for (int i=0; i < lines.length; i++)   lines[i].update();}  }
class C{  public ScriptBuilder data(byte[] data){  if (data.length == 0)   return smallNum(0); else   return data(chunks.size(),data);}  }
class C{  @Provides @Singleton @Inject public Configuration provideFreemarker(DataDir datadir){  Configuration fm=new Configuration();  List<TemplateLoader> tLoader=new ArrayList<TemplateLoader>();  tLoader.add(new ClassTemplateLoader(AppConfig.class,"/templates"));  try {    TemplateLoader tlDataDir=new DataDirTemplateLoader(datadir.dataFile(""));    tLoader.add(tlDataDir);  } catch (  IOException e) {    LOG.warn("Cannot load custom templates from data dir: " + e.getMessage(),e);  }  TemplateLoader tl=new MultiTemplateLoader(tLoader.toArray(new TemplateLoader[tLoader.size()]));  fm.setDefaultEncoding("utf8");  fm.setTemplateLoader(tl);  return fm;}  }
class C{  public void initializeHardwareClock(){  if (synchronizeWithHardware || correctHardware) {    if (startStopped) {      jmri.InstanceManager.getDefault(jmri.ClockControl.class).initializeHardwareClock(0,getTime(),(!internalMaster && !startSetTime));    } else {      jmri.InstanceManager.getDefault(jmri.ClockControl.class).initializeHardwareClock(mFactor,getTime(),(!internalMaster && !startSetTime));    }  } else   if (!internalMaster) {    if (startStopped) {      hardwareTimeSource.initializeHardwareClock(0,getTime(),(!startSetTime));    } else {      hardwareTimeSource.initializeHardwareClock(hardwareFactor,getTime(),(!startSetTime));    }  }  notInitialized=false;}  }
class C{  public boolean isValid(String inetAddress){  return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);}  }
class C{  @Override public Set<Parameter> findDefaultParameterSet(){  Set<Parameter> paramSet=new LinkedHashSet<Parameter>();  Set<String> paramElementSet=new HashSet<String>();  Query query=entityManager.createQuery("SELECT p FROM " + getEntityClass().getName() + " p"+ " WHERE p.isDefaultParameterValue = :isDefault");  query.setParameter("isDefault",true);  try {    for (    Parameter parameter : (List<Parameter>)query.getResultList()) {      String paramElement=parameter.getParameterElement().getParameterElementCode();      if (!paramElementSet.contains(paramElement)) {        paramSet.add(parameter);      }      paramElementSet.add(paramElement);    }    return paramSet;  } catch (  NoResultException nre) {    return paramSet;  }}  }
class C{  public void clearNeuronList(){  neuronList.clear();}  }
class C{  public boolean isFrontFacing(Vector3 direction){  float dot=normal.dot(direction);  return dot <= 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.723 -0400",hash_original_method="F3A65193C6854CE5E8578754D48CBE4D",hash_generated_method="098D454E7770DCD432F546BC1B0DCED0") public final boolean isErrorEnabled(){  return false;}  }
class C{  public TypeParameter newTypeParameter(){  TypeParameter result=new TypeParameter(this);  return result;}  }
class C{  public long startRecovery(IndexShard indexShard,DiscoveryNode sourceNode,RecoveryTarget.RecoveryListener listener,TimeValue activityTimeout){  RecoveryStatus status=new RecoveryStatus(indexShard,sourceNode,listener);  RecoveryStatus existingStatus=onGoingRecoveries.putIfAbsent(status.recoveryId(),status);  assert existingStatus == null : "found two RecoveryStatus instances with the same id";  logger.trace("{} started recovery from {}, id [{}]",indexShard.shardId(),sourceNode,status.recoveryId());  threadPool.schedule(activityTimeout,ThreadPool.Names.GENERIC,new RecoveryMonitor(status.recoveryId(),status.lastAccessTime(),activityTimeout));  return status.recoveryId();}  }
class C{  public long nextLong(){  return random.nextLong() & Long.MAX_VALUE;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowMediaPlayer.isEVRSupported());}  }
class C{  public void print(byte x){  out.print(x);  out.flush();}  }
class C{  static protected String identString(int ident){  StringBuilder sb=new StringBuilder();  String spaces="  ";  for (int i=0; i < ident; i++) {    sb.append(spaces);  }  return sb.toString();}  }
class C{  public static final String interpretHostManufacturerDevice(Integer hostMfr,Integer hostDevice,Integer slaveMfr,Integer slaveDevice){  String s;  s="Unknown Host Manufacturer/Device";switch (hostMfr) {case LnConstants.RE_IPL_MFR_DIGITRAX:{switch (hostDevice) {case LnConstants.RE_IPL_DIGITRAX_HOST_DCS51:        s="Digitrax DCS51";      break;case LnConstants.RE_IPL_DIGITRAX_HOST_DT402:    if ((slaveMfr == LnConstants.RE_IPL_MFR_DIGITRAX) && (slaveDevice == LnConstants.RE_IPL_DIGITRAX_SLAVE_RF24)) {      s="Digitrax DT402D";    } else {      s="Digitrax DT402(x)";    }  break;case LnConstants.RE_IPL_DIGITRAX_HOST_PR3:s="Digitrax PR3";break;case LnConstants.RE_IPL_DIGITRAX_HOST_UR92:s="Digitrax UR92";break;case LnConstants.RE_IPL_DIGITRAX_HOST_UT4:if ((slaveMfr == LnConstants.RE_IPL_MFR_DIGITRAX) && (slaveDevice == LnConstants.RE_IPL_DIGITRAX_SLAVE_RF24)) {s="Digitrax UT4D";} else {s="Digitrax UT4(x)";}break;default :break;}break;}case LnConstants.RE_IPL_MFR_RR_CIRKITS:s=interpretHostManufacturerDevice(hostMfr,hostDevice) + " " + interpretSlaveManufacturerDevice(slaveMfr,slaveDevice);break;default :break;}return s;}  }
class C{  TextMetrics calcTextMetrics(){  if (container == null) {    return null;  }  if (isSeparator()) {    return new TextMetrics(new Dimension(SEPARATOR_WIDTH,SEPARATOR_HEIGHT),0,0);  }  Graphics g=container.getGraphics();  if (g == null) {    return null;  }  try {    g.setFont(getTargetFont());    FontMetrics fm=g.getFontMetrics();    String str=getTargetLabel();    int width=fm.stringWidth(str);    int height=fm.getHeight();    Dimension textDimension=new Dimension(width,height);    int textBaseline=fm.getHeight() - fm.getAscent();    String sc=getShortcutText();    int shortcutWidth=(sc == null) ? 0 : fm.stringWidth(sc);    return new TextMetrics(textDimension,shortcutWidth,textBaseline);  }  finally {    g.dispose();  }}  }
class C{  @Override public void writeFromObjectIntoRow(Object object,AbstractRecord databaseRow,AbstractSession session,WriteType writeType) throws DescriptorException {  if (isReadOnly()) {    return;  }  writeToRowFromAggregate(databaseRow,object,getAttributeValueFromObject(object),session,writeType);}  }
class C{  private void dispatchPress(View child){  if (child != null) {    child.setPressed(true);  }  setPressed(true);}  }
class C{  @PUT @Path("/resetruntimecounters") @Produces(MediaType.APPLICATION_JSON) @Description("Resets Argus system monitoring runtime counters.") public Response resetRuntimeCounters(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.resetRuntimeCounters();  return Response.status(Status.OK).build();}  }
class C{  public Object realExecute() throws ExecutionException {  Activator.getDefault().logDebug("Decompose Proof Called");  Vector<SemanticNode> assumes;  SemanticNode goal;  String[] blankLine=new String[]{""};  String[] oneline=new String[]{"1"};  if (this.windowShell != null) {    if (!this.windowShell.isDisposed()) {      System.out.println("Command called when being executed.");      return null;    }  }  if (existDirtyModules()) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","There is an unsaved module.");    return null;  }  Spec spec=Activator.getSpecManager().getSpecLoaded();  if (spec == null || spec.getStatus() != IParseConstants.PARSED) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","The spec status must be \"parsed\" to execute this command.");    return null;  }  if (editor == null) {    Activator.getDefault().logDebug("2nd call of getTLAEditorWithFocus returned null");    return null;  }  editorIFile=((FileEditorInput)editor.getEditorInput()).getFile();  if (editor.isDirty()) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","The module is dirty; this should not happen.");    return null;  }  hasChanged=false;  chosenSplit=-1;  needsStepNumber=false;  andSplitBegin=-1;  andSplitEnd=-1;  goalDefinitions=new HashSet<String>();  assumpDefinitions=new HashSet<String>();  Location selectedLocation=EditorUtil.getLocationAt(doc,offset,selection.getLength());  TheoremNode[] allTheorems=moduleNode.getTheorems();  theorem=null;  int i=0;  String moduleFile=moduleNode.stn.getFilename();  while ((theorem == null) & (i < allTheorems.length)) {    if (allTheorems[i].stn.getFilename().equals(moduleFile) && EditorUtil.lineLocationContainment(selectedLocation,allTheorems[i].stn.getLocation())) {      theorem=allTheorems[i];    }    i++;  }  if (theorem == null) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","The cursor is not in a theorem.");    return null;  }  this.declaredIdentifiers=ResourceHelper.declaredSymbolsInScope(this.moduleNode,theorem.stn.getLocation());  step=theorem;  boolean notDone=true;  proofLevel=-1;  proof=step.getProof();  while (notDone && (proof != null) && (proof instanceof NonLeafProofNode)) {    LevelNode[] pfsteps=((NonLeafProofNode)proof).getSteps();    LevelNode foundLevelNode=null;    i=0;    proofLevel=-1;    while ((foundLevelNode == null) && (i < pfsteps.length)) {      if ((proofLevel == -1) && !(pfsteps[i] instanceof DefStepNode) && !(pfsteps[i] instanceof InstanceNode)) {        proofLevel=stepLevel(pfsteps[i]);      }      if (EditorUtil.lineLocationContainment(selectedLocation,pfsteps[i].stn.getLocation())) {        foundLevelNode=pfsteps[i];        if (!step.isSuffices() && (step.getTheorem() instanceof AssumeProveNode)) {          SemanticNode[] assumptions=((AssumeProveNode)step.getTheorem()).getAssumes();          for (int j=0; j < assumptions.length; j++) {            if (assumptions[j] instanceof NewSymbNode) {              declaredIdentifiers.add(((NewSymbNode)assumptions[j]).getOpDeclNode().getName().toString());            }          }        }      } else {        if (pfsteps[i] instanceof TheoremNode) {          TheoremNode node=(TheoremNode)pfsteps[i];          if (node.isSuffices() && (node.getTheorem() instanceof AssumeProveNode)) {            SemanticNode[] assumptions=((AssumeProveNode)node.getTheorem()).getAssumes();            for (int j=0; j < assumptions.length; j++) {              if (assumptions[j] instanceof NewSymbNode) {                declaredIdentifiers.add(((NewSymbNode)assumptions[j]).getOpDeclNode().getName().toString());              }            }          } else           if (node.getTheorem() instanceof OpApplNode) {            OpApplNode oanode=(OpApplNode)node.getTheorem();            if (oanode.getOperator().getName().toString().equals("$Pick")) {              FormalParamNode[] fp=oanode.getUnbdedQuantSymbols();              if (fp != null) {                for (int j=0; j < fp.length; j++) {                  declaredIdentifiers.add(fp[j].getName().toString());                }              } else {                FormalParamNode[][] fpn=oanode.getBdedQuantSymbolLists();                for (int j=0; j < fpn.length; j++) {                  for (int k=0; k < fpn[j].length; k++) {                    declaredIdentifiers.add(fpn[j][k].getName().toString());                  }                }              }            }          }        }        if (pfsteps[i] instanceof DefStepNode) {          OpDefNode[] defs=((DefStepNode)pfsteps[i]).getDefs();          for (int j=0; j < defs.length; j++) {            declaredIdentifiers.add(defs[j].getName().toString());          }        }        if (pfsteps[i] instanceof InstanceNode) {          ResourceHelper.addDeclaredSymbolsInScope(declaredIdentifiers,((InstanceNode)pfsteps[i]).getModule(),ResourceHelper.infiniteLoc);        }      }      i++;    }    if (foundLevelNode == null) {      notDone=false;    } else     if (!(foundLevelNode instanceof TheoremNode)) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","The cursor is in a non-provable step.");      return null;    } else {      step=(TheoremNode)foundLevelNode;      proof=step.getProof();    }  }  if (step.isSuffices()) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Cannot decompose a SUFFICES step.");    return null;  }  int level=this.proofLevel;  if (level < 0) {    level=0;  }  proofLevelString="<" + (level + 1) + ">";  SyntaxTreeNode nd=(SyntaxTreeNode)step.stn;  if (step == theorem) {    stepNumber=null;  } else {    stepNumber=nd.getHeirs()[0].image.toString();    if (stepNumber.indexOf('>') == stepNumber.length() - 1) {      stepNumber=null;    } else {      i=stepNumber.indexOf('>') + 1;      while ((i < stepNumber.length() && (Character.isLetterOrDigit(stepNumber.charAt(i)) || (stepNumber.charAt(i) == '_')))) {        i++;      }      if (i < stepNumber.length()) {        stepNumber=stepNumber.substring(0,i);      }    }  }  stepColumn=nd.getLocation().beginColumn();  if ((proof != null) && !(proof instanceof LeafProofNode)) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","You have selected a step that already has a non-leaf proof.");    return null;  }  try {    stepRep=new NodeRepresentation(doc,step);  } catch (  BadLocationException e) {    e.printStackTrace();    System.out.println("threw exception");  }  LevelNode thm=step.getTheorem();  if (thm instanceof AssumeProveNode) {    hasAssumes=true;    SemanticNode[] assump=((AssumeProveNode)thm).getAssumes();    assumes=new Vector<SemanticNode>();    assumeReps=new Vector<NodeRepresentation>();    int rowOfLastNew=-1;    for (i=0; i < assump.length; i++) {      if (assump[i] instanceof AssumeProveNode) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Cannot decompose a step with a nested ASSUME/PROVE.");        return null;      }      assumes.add(assump[i]);      NodeRepresentation nodeRep=stepRep.subNodeRep(assump[i],assumeReps,null,null,null);      if (nodeRep.nodeType == NodeRepresentation.NEW_NODE) {        Location loc=nodeRep.semanticNode.stn.getLocation();        if (loc.beginLine() == loc.endLine()) {          if (loc.beginLine() == rowOfLastNew) {            assumeReps.elementAt(i - 1).onSameLineAsNext=true;          }          rowOfLastNew=loc.beginLine();        } else {          rowOfLastNew=-1;        }      } else {        rowOfLastNew=-1;      }      assumeReps.add(nodeRep);      goal=((AssumeProveNode)thm).getProve();      if (!(goal instanceof OpApplNode)) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","This step has a weird goal that cannot\n be processed.");        return null;      }      goalRep=stepRep.subNodeRep(goal,null,null,null,null);    }  } else {    hasAssumes=false;    assumes=new Vector<SemanticNode>();    assumeReps=new Vector<NodeRepresentation>();    if (!(thm instanceof OpApplNode)) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","This is a weird step that cannot\n be processed.");      return null;    }    goal=thm;    UniqueString goalOpName=null;    if (goal instanceof OpApplNode) {      goalOpName=((OpApplNode)goal).getOperator().getName();    }    if ((goalOpName == null) || (goalOpName == ASTConstants.OP_qed) || (goalOpName == ASTConstants.OP_pfcase)|| (goalOpName == ASTConstants.OP_have)|| (goalOpName == ASTConstants.OP_pick)|| (goalOpName == ASTConstants.OP_witness)|| (goalOpName == ASTConstants.OP_suffices)) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Cannot decompose this kind of step.");      return null;    }    goalRep=stepRep.subNodeRep(goal,null,null,null,null);  }  editorIFile.setReadOnly(true);  raiseWindow();  return null;}  }
class C{  public Long sort(final byte[] key,final SortingParams sortingParameters,final byte[] dstkey){  checkIsInMulti();  client.sort(key,sortingParameters,dstkey);  return client.getIntegerReply();}  }
class C{  public void testConnectPolarBluetoothSensor_notRecording(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  bluetoothSensorTest(R.string.settings_sensor_type_polar,POLAR_NAME,false);}  }
class C{  @Override public void write(Kryo kryo,Output output){  int size=index.size();  output.writeInt(size + 1,true);  for (int i=0; i < size; ++i) {    String s=index.get(i);    if (s == null) {      throw new RuntimeException("Cannot serialize null string at index " + Integer.toString(i));    }    output.writeString(s);  }}  }
class C{  private void initBuildIdAndDate(){  if (buildId != null) {    return;  }  buildId="-1";  buildDate="";  final InputStream in=FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream("/META-INF/MANIFEST.MF");  String str=null;  if (in != null) {    final Properties prop=PropertiesLoader.loadProperties(in);    str=prop.getProperty("Implementation-Version");  }  if (str == null) {    return;  }  final int sep=str.lastIndexOf("-");  buildId=str.substring(0,sep);  SimpleDateFormat inFormat=new SimpleDateFormat("yyyyMMddHHmmss");  SimpleDateFormat outFormat=new SimpleDateFormat("yyyy/MM/dd");  try {    buildDate=outFormat.format(inFormat.parse(str.substring(sep + 1)));  } catch (  ParseException e) {    logger.error(e.getMessage());  }}  }
class C{  public SyncCommand(SyncRequest sr) throws SyncParameterException {  veriniceArchive=new PureXml();  this.veriniceArchive.setSourceId(sr.getSourceId());  this.veriniceArchive.setSyncData(sr.getSyncData());  this.veriniceArchive.setSyncMapping(sr.getSyncMapping());  this.stationId=ChangeLogEntry.STATION_ID;  this.parameter=new SyncParameter(sr.isInsert(),sr.isUpdate(),sr.isDelete(),false,SyncParameter.EXPORT_FORMAT_XML_PURE);}  }
class C{  public void testAddMultipleServletInitParams() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <servlet>"+ "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addServletInitParam(webXml,"s1","s1param1","s1param1value");  WebXmlUtils.addServletInitParam(webXml,"s1","s1param2","s1param2value");  WebXmlUtils.addServletInitParam(webXml,"s1","s1param3","s1param3value");  List<String> initParams=WebXmlUtils.getServletInitParamNames(webXml,"s1");  assertEquals(3,initParams.size());  assertEquals("s1param1",initParams.get(0));  assertEquals("s1param2",initParams.get(1));  assertEquals("s1param3",initParams.get(2));}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static PseudoFunction<?> lookupPseudoFunction(String pseudoFunctionName){  PseudoFunction pseudoFunction=PSEUDO_FUNCTION_MAP.get(pseudoFunctionName);  if (pseudoFunction == null) {    throw new CSSellyException("Unsupported pseudo function: " + pseudoFunctionName);  }  return pseudoFunction;}  }
class C{  private void executeFallbacks(TransformerImpl transformer) throws TransformerException {  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK) {      try {        transformer.pushElemTemplateElement(child);        ((ElemFallback)child).executeFallback(transformer);      }  finally {        transformer.popElemTemplateElement();      }    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster destination=null;  WhiteboxRasterInfo imageInfo=null;  int nCols=0;  int nRows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double x, y, z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  String resampleMethod="nearest neighbour";  double north, south, east, west;  double gridResX, gridResY;  int currentFile=-1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  destHeader=args[1];  resampleMethod=args[2].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.equals("cubic convolution")) {    showFeedback("Resample method not recognized");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    boolean eastGreaterThanWest=true;    boolean northGreaterThanSouth=true;    double[][] imageData=new double[numImages][11];    north=Double.NEGATIVE_INFINITY;    south=Double.POSITIVE_INFINITY;    east=Double.NEGATIVE_INFINITY;    west=Double.POSITIVE_INFINITY;    double cellSizeX=Double.POSITIVE_INFINITY;    double cellSizeY=Double.POSITIVE_INFINITY;    for (a=0; a < numImages; a++) {      imageInfo=new WhiteboxRasterInfo(imageFiles[a]);      imageData[a][0]=imageInfo.getNorth();      imageData[a][1]=imageInfo.getSouth();      imageData[a][2]=imageInfo.getEast();      imageData[a][3]=imageInfo.getWest();      imageData[a][4]=imageInfo.getNumberRows();      imageData[a][5]=imageInfo.getNumberColumns();      imageData[a][6]=imageInfo.getCellSizeX();      imageData[a][7]=imageInfo.getCellSizeY();      imageData[a][8]=imageInfo.getNoDataValue();      imageData[a][9]=imageInfo.getEast() - imageInfo.getWest();      imageData[a][10]=imageInfo.getNorth() - imageInfo.getSouth();      if (a == 0) {        if (imageData[a][0] < imageData[a][1]) {          northGreaterThanSouth=false;          north=Double.POSITIVE_INFINITY;          south=Double.NEGATIVE_INFINITY;        }        if (imageData[a][2] < imageData[a][3]) {          eastGreaterThanWest=false;          east=Double.POSITIVE_INFINITY;          west=Double.NEGATIVE_INFINITY;        }      }      if (northGreaterThanSouth) {        if (imageData[a][0] > north) {          north=imageData[a][0];        }        if (imageData[a][1] < south) {          south=imageData[a][1];        }      } else {        if (imageData[a][0] < north) {          north=imageData[a][0];        }        if (imageData[a][1] > south) {          south=imageData[a][1];        }      }      if (eastGreaterThanWest) {        if (imageData[a][2] > east) {          east=imageData[a][2];        }        if (imageData[a][3] < west) {          west=imageData[a][3];        }      } else {        if (imageData[a][2] < east) {          east=imageData[a][2];        }        if (imageData[a][3] > west) {          west=imageData[a][3];        }      }      if (imageData[a][6] < cellSizeX) {        cellSizeX=imageData[a][6];      }      if (imageData[a][7] < cellSizeY) {        cellSizeY=imageData[a][7];      }    }    nRows=(int)Math.round(Math.abs(north - south) / cellSizeY);    nCols=(int)Math.round(Math.abs(east - west) / cellSizeX);    destination=new WhiteboxRaster(destHeader,north,south,east,west,nRows,nCols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,outputNoData,outputNoData);    int nColsLessOne=nCols - 1;    int nRowsLessOne=nRows - 1;    gridResX=destination.getCellSizeX();    gridResY=destination.getCellSizeY();    double northernEdge=north - gridResY;    double westernEdge=west + gridResX;    if (north < south) {      northernEdge=north + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    double yRange=north - south - gridResY;    double xRange=east - west - gridResX;    int sourceCol, sourceRow;    if (resampleMethod.equals("nearest neighbour")) {      for (a=0; a < numImages; a++) {        image=new WhiteboxRaster(imageFiles[a],"r");        int startRow=destination.getRowFromYCoordinate(image.getNorth()) - 1;        int endRow=destination.getRowFromYCoordinate(image.getSouth()) + 1;        int startCol=destination.getColumnFromXCoordinate(image.getWest()) - 1;        int endCol=destination.getColumnFromXCoordinate(image.getEast()) + 1;        if (startRow < 0) {          startRow=0;        }        if (startCol < 0) {          startCol=0;        }        if (endRow > nRows - 1) {          endRow=nRows - 1;        }        if (endCol > nCols - 1) {          endCol=nCols - 1;        }        for (row=startRow; row <= endRow; row++) {          y=northernEdge - (yRange * row) / nRowsLessOne;          for (col=startCol; col <= endCol; col++) {            x=westernEdge + (xRange * col) / nColsLessOne;            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              sourceRow=(int)Math.round((imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5));              sourceCol=(int)Math.round((x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5));              z=image.getValue(sourceRow,sourceCol);              if (z != imageData[a][8]) {                destination.setValue(row,col,z);              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        image.close();        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * (a + 1) / numImages);        updateProgress(progress);      }    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.equals("cubic convolution")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[16][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[4][2];      }      for (a=0; a < numImages; a++) {        image=new WhiteboxRaster(imageFiles[a],"r");        int startRow=destination.getRowFromYCoordinate(image.getNorth()) - 1;        int endRow=destination.getRowFromYCoordinate(image.getSouth()) + 1;        int startCol=destination.getColumnFromXCoordinate(image.getWest()) - 1;        int endCol=destination.getColumnFromXCoordinate(image.getEast()) + 1;        if (startRow < 0) {          startRow=0;        }        if (startCol < 0) {          startCol=0;        }        if (endRow > nRows - 1) {          endRow=nRows - 1;        }        if (endCol > nCols - 1) {          endCol=nCols - 1;        }        for (row=startRow; row <= endRow; row++) {          y=northernEdge - (yRange * row) / nRowsLessOne;          for (col=startCol; col <= endCol; col++) {            x=westernEdge + (xRange * col) / nColsLessOne;            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              imageNoData=imageData[a][8];              srcRow=(imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5);              srcCol=(x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5);              originRow=Math.floor(srcRow);              originCol=Math.floor(srcCol);              sumOfDist=0;              for (i=0; i < numNeighbours; i++) {                rowN=originRow + shiftY[i];                colN=originCol + shiftX[i];                neighbour[i][0]=image.getValue((int)rowN,(int)colN);                dY=rowN - srcRow;                dX=colN - srcCol;                if ((dX + dY) != 0 && neighbour[i][0] != imageNoData) {                  neighbour[i][1]=1 / (dX * dX + dY * dY);                  sumOfDist+=neighbour[i][1];                } else                 if (neighbour[i][0] == imageNoData) {                  neighbour[i][1]=0;                } else {                  destination.setValue(row,col,neighbour[0][3]);                  break;                }              }              if (sumOfDist > 0) {                z=0;                for (i=0; i < numNeighbours; i++) {                  z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;                }                destination.setValue(row,col,z);              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        image.close();        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * (a + 1) / numImages);        updateProgress(progress);      }    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    returnData(destHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BamReader(final File input) throws IOException {  this(new BgzfInputStream(input),true);}  }
class C{  protected void sequence_Wildcard_WildcardNewNotation(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public PrintDataColumn(int AD_Column_ID,String columnName,int displayType,int columnSize,String alias,boolean isPageBreak){  m_AD_Column_ID=AD_Column_ID;  m_columnName=columnName;  m_displayType=displayType;  m_columnSize=columnSize;  m_alias=alias;  if (m_alias == null)   m_alias=columnName;  m_pageBreak=isPageBreak;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(TemplateLoaderUtils.getClassNameForToString(this));  sb.append("(Map { ");  int cnt=0;  for (Iterator it=templates.keySet().iterator(); it.hasNext(); ) {    cnt++;    if (cnt != 1) {      sb.append(", ");    }    if (cnt > 10) {      sb.append("...");      break;    }    sb.append(StringUtil.jQuote(it.next()));    sb.append("=...");  }  if (cnt != 0) {    sb.append(' ');  }  sb.append("})");  return sb.toString();}  }
class C{  public SoSCentroidDistance(DistanceMetric dm){  this.dm=dm;}  }
class C{  protected NetworkItem(INetworkLink link,CharSequence title,CharSequence summary,UrlInfoCollection<?> urls){  Link=link;  Title=title != null ? title : "";  setSummary(summary);  if (urls != null && !urls.isEmpty()) {    myURLs=new UrlInfoCollection<UrlInfo>(urls);  } else {    myURLs=null;  }}  }
class C{  @VisibleForTesting protected State buildPatch(TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  public static boolean isStrElementNode(String elementName,Node elementNode,boolean ignoreCase){  if ((elementNode == null) || (elementName == null) || (elementName.trim().equals(""))|| (elementNode.getNodeType() != Node.ELEMENT_NODE))   return false;  StringTokenizer tokenizer=new StringTokenizer(":");  int numTokens=tokenizer.countTokens();  if (numTokens == 1) {    String name=(String)tokenizer.nextElement();    Element element=(Element)elementNode;    if (element.getNamespaceURI() != null)     return false;    if (ignoreCase)     return element.getNodeName().trim().equalsIgnoreCase(elementName);    return element.getNodeName().trim().equals(elementName);  } else   if (numTokens == 2) {    String namespace=(String)tokenizer.nextElement();    String localName=(String)tokenizer.nextElement();    Element element=(Element)elementNode;    if (element.getNamespaceURI() == null)     return false;    if (ignoreCase)     return ((element.getLocalName().trim().equalsIgnoreCase(localName)) && (element.getNamespaceURI().equalsIgnoreCase(namespace.trim())));    return ((element.getLocalName().trim().equals(localName)) && (element.getNamespaceURI().equals(namespace.trim())));  } else   return false;}  }
class C{  public TimeDuration pause(){  return pause(this.getTotalMilliseconds());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:58.391 -0500",hash_original_method="DD9AA0788424353442B0CFE218D97412",hash_generated_method="D16B9D80B8A3FF76F7E29D31CF350BD3") public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(SEMICOLON + this.parameters.encode());  return retval.toString();}  }
class C{  public ChangeableHighlightPainter(){  this(null);}  }
class C{  protected void transfer(final WritableDataStore<Meta> metas,Meta meta,ModifiableDBIDs src,ModifiableDBIDs dst,DBIDRef id,int dstnum){  src.remove(id);  dst.add(id);  meta.primary=dstnum;  metas.put(id,meta);}  }
class C{  @Bean public DefaultJmsListenerContainerFactory jmsListenerContainerFactory(ConnectionFactory jmsConnectionFactory){  DefaultJmsListenerContainerFactory factory=new DefaultJmsListenerContainerFactory();  factory.setConnectionFactory(jmsConnectionFactory);  factory.setDestinationResolver(herdDestinationResolver);  factory.setConcurrency(configurationHelper.getProperty(ConfigurationValue.JMS_LISTENER_POOL_CONCURRENCY_LIMITS));  return factory;}  }
class C{  public PeerAddress(InetAddress addr,int port){  this(addr,port,NetworkParameters.ProtocolVersion.CURRENT.getBitcoinProtocolVersion());}  }
class C{  public int firstByte(){  return firstByte;}  }
class C{  public void closeSecureChannel(){  channel.close();}  }
class C{  private ClassUtils(){}  }
class C{  public void addUpdateAction(UpdateAction action){  updater.getUpdateManager().addAction(action);}  }
class C{  public void onCancelRealtimeBars(Tradestrategy tradestrategy){  if (m_realTimeBarsRequests.containsKey(tradestrategy.getContract().getId())) {    Contract contract=m_realTimeBarsRequests.get(tradestrategy.getContract().getId());    for (    Tradestrategy item : contract.getTradestrategies()) {      if (item.equals(tradestrategy)) {        contract.removeTradestrategy(tradestrategy);        break;      }    }    if (contract.getTradestrategies().isEmpty()) {      onCancelRealtimeBars(contract);      onCancelMarketData(contract);    }  }}  }
class C{  public static List<ListenLogger.LogEntry> sortByTime(List<ListenLogger.LogEntry> list){  Collections.sort(list,sTimeSort);  return list;}  }
class C{  public Iterator<INode> iterator(){  return closed.iterator();}  }
class C{  public V cloneValue(V v){  return v;}  }
class C{  public void removeChild(Group theGroup){  mChildren.remove(theGroup);}  }
class C{  public void resetSingleton(){  root=null;  tmpFileCounter.set(0);  accessedFiles.clear();  shouldAllThrowIOException=false;  classesThatShouldThrowIOException.clear();synchronized (leakingResources) {    for (    LeakingResource resource : leakingResources) {      try {        resource.release();      } catch (      Exception e) {        logger.warn("Failed to release resource: " + e.getMessage(),e);      }    }    leakingResources.clear();  }}  }
class C{  private float calculateDy(float distanceY){  int currentY=view.getScrollY();  float nextY=distanceY + currentY;  boolean isInsideVertically=nextY >= minY && nextY <= maxY;  return isInsideVertically ? distanceY : 0;}  }
class C{  public List<Map<String,Object>> parseRSSFeed(URL url,long fromTime){  try {    Element root=parseXMLURL(url);    List<Map<String,Object>> feed=new ArrayList<Map<String,Object>>();    if (root == null) {      return null;    }    NodeList list=root.getElementsByTagName("entry");    if ((list != null) && (list.getLength() > 0)) {      for (int index=0; index < list.getLength(); index++) {        Element entry=(Element)list.item(index);        Map<String,Object> map=new HashMap<String,Object>(4);        NodeList children=entry.getElementsByTagName("published");        if ((children != null) && (children.getLength() > 0)) {          String date=children.item(0).getTextContent();          long time=System.currentTimeMillis();          try {            time=Utils.parseDate(date,"yyyy-MM-dd'T'HH:mm:ss.SSS").getTimeInMillis();          } catch (          Exception exception) {            try {              time=Utils.parseDate(date,"yyyy-MM-dd'T'HH:mm:ssX").getTimeInMillis();            } catch (            Exception exception2) {              try {                time=Utils.parseDate(date,"EEE, dd MMM yyyy").getTimeInMillis();              } catch (              Exception exception3) {                log(exception);              }            }          }          if (time <= fromTime) {            break;          }          map.put("published",time);        } else {          continue;        }        children=entry.getElementsByTagName("title");        if ((children != null) && (children.getLength() > 0)) {          map.put("title",children.item(0).getTextContent());        } else {          continue;        }        children=entry.getElementsByTagName("content");        if ((children != null) && (children.getLength() > 0)) {          map.put("content",children.item(0).getTextContent());        } else {          continue;        }        NodeList links=entry.getElementsByTagName("link");        for (int index2=0; index2 < links.getLength(); index2++) {          Element link=(Element)links.item(index2);          String rel=link.getAttribute("rel");          if ((rel != null) && rel.equals("alternate")) {            map.put("link",link.getAttribute("href"));          }        }        feed.add(map);      }    } else {      list=root.getElementsByTagName("channel");      if ((list != null) && (list.getLength() > 0)) {        list=((Element)list.item(0)).getElementsByTagName("item");        if ((list != null) && (list.getLength() > 0)) {          for (int index=0; index < list.getLength(); index++) {            Element entry=(Element)list.item(index);            Map<String,Object> map=new HashMap<String,Object>(3);            NodeList children=entry.getElementsByTagName("pubDate");            if ((children != null) && (children.getLength() > 0)) {              String date=children.item(0).getTextContent();              long time=System.currentTimeMillis();              try {                time=Utils.parseDate(date,"EEE, dd MMM yyyy HH:mm:ss zzz").getTimeInMillis();              } catch (              Exception exception) {                try {                  time=Utils.parseDate(date,"EEE, dd MMM yyyy").getTimeInMillis();                } catch (                Exception exception2) {                  try {                    time=Utils.parseDate(date,"yyyy-MM-dd'T'HH:mm:ss.SSS").getTimeInMillis();                  } catch (                  Exception exception3) {                    log(exception);                  }                }              }              if (time <= fromTime) {                break;              }              map.put("published",time);            } else {              continue;            }            children=entry.getElementsByTagName("title");            if ((children != null) && (children.getLength() > 0)) {              map.put("title",children.item(0).getTextContent());            } else {              continue;            }            children=entry.getElementsByTagName("link");            if ((children != null) && (children.getLength() > 0)) {              map.put("link",children.item(0).getTextContent());            } else {              continue;            }            feed.add(map);          }        }      }    }    return feed;  } catch (  Exception ioException) {    log(ioException.getMessage(),Level.WARNING,url);    return null;  }}  }
class C{  protected Map<String,String> performHttpCall(final String method,final Map<String,String> nvp) throws IOException {  final NvpBuilder npvb=new NvpBuilder();  npvb.addRaw(PP_EC_METHOD,method).addRaw(PP_EC_VERSION,"123.0").addEncoded("PWD",getParameterValue(PP_API_USER_PASSWORD)).addEncoded("USER",getParameterValue(PP_API_USER_NAME)).addEncoded(PP_SIGNATURE,getParameterValue(PP_SIGNATURE));  npvb.addAllRaw(nvp);  return deformatNVP(performPayPalApiCall(getParameterValue(PP_EC_API_URL),npvb.toQuery()));}  }
class C{  public static boolean matchesFullyQualifiedProcessor(final String processor,List<String> fullyQualifiedCheckerNames,boolean allowSubcheckers){  return !processor.equals(unshorthandProcessorName(processor,fullyQualifiedCheckerNames,allowSubcheckers));}  }
class C{  public static SAXParser newSAXParser(String schemaLanguage,Source... schemas) throws SAXException, ParserConfigurationException {  return newSAXParser(schemaLanguage,true,false,schemas);}  }
class C{  protected void engineSetPadding(String paddingScheme) throws NoSuchPaddingException {  if ((paddingScheme != null) && (!paddingScheme.equalsIgnoreCase("PKCS5Padding"))) {    throw new NoSuchPaddingException("Invalid padding scheme: " + paddingScheme);  }}  }
class C{  public void clear(){  set.clear();  fireContentsChanged(this,0,0);}  }
class C{  public static void zoomToBreakpoint(final Window parent,final ZyGraph graph,final IViewContainer container,final BreakpointAddress address){  final IAddress addr=address.getAddress().getAddress();  if (!ZyZoomHelpers.zoomToAddress(graph,addr,address.getModule(),true)) {    for (    final CGraphWindow window : CWindowManager.instance()) {      for (      final IGraphPanel graphPanel : window) {        if (ZyZoomHelpers.zoomToAddress(graphPanel.getModel().getGraph(),addr,address.getModule(),true)) {          window.activate(graphPanel);          window.toFront();          return;        }      }    }    CViewSearcher.searchView(parent,container,addr);  }}  }
class C{  public DelphiLanguage(){  super(KEY,LANGUAGE_NAME);  instance=this;}  }
class C{  static int countPositions(Analyzer analyzer,String fieldName,String fieldValue) throws IOException {  try (TokenStream tokenStream=analyzer.tokenStream(fieldName,fieldValue)){    int count=0;    PositionIncrementAttribute position=tokenStream.addAttribute(PositionIncrementAttribute.class);    tokenStream.reset();    while (tokenStream.incrementToken()) {      count+=position.getPositionIncrement();    }    tokenStream.end();    count+=position.getPositionIncrement();    return count;  } }  }
class C{  private void confirmHiSeqno(THLParallelQueue tpq,long seqno,long waitMillis) throws Exception {  AtomicIntervalGuard<?> intervalGuard=tpq.getIntervalGuard();  long currentSeqno;  long startMillis=System.currentTimeMillis();  while ((currentSeqno=intervalGuard.getHiSeqno()) != seqno) {    if (System.currentTimeMillis() - startMillis > waitMillis)     throw new Exception("Timed out waiting for interval guard to reach expected high seqno: expected seqno=" + seqno + " actual value="+ currentSeqno);    Thread.sleep(100);  }  logger.info("Confirmed hi sequence number in interval guard structure: seqno=" + seqno);}  }
class C{  @Override public void tokenize(String s){  m_Tokenizer=new StringTokenizer(s,getDelimiters());}  }
class C{  public static boolean testRayTriangle(Vector3fc origin,Vector3fc dir,Vector3fc v0,Vector3fc v1,Vector3fc v2,float epsilon){  return testRayTriangleFront(origin.x(),origin.y(),origin.z(),dir.x(),dir.y(),dir.z(),v0.x(),v0.y(),v0.z(),v1.x(),v1.y(),v1.z(),v2.x(),v2.y(),v2.z(),epsilon);}  }
class C{  @Override public boolean supportsConvert(){  debugCodeCall("supportsConvert");  return true;}  }
class C{  public String substring(int start,int end){  if (start == 0 && end == count) {    return this;  }  if (0 <= start && start <= end && end <= count) {    return new String(offset + start,end - start,value);  }  throw new StringIndexOutOfBoundsException();}  }
class C{  private int alphabeta(int ply,IPlayer player,IPlayer opponent,int alpha,int beta){  Iterator<IGameMove> it=player.validMoves(state).iterator();  if (ply <= 0 || !it.hasNext()) {    int score=player.eval(state);    if (debug != null) {      ScoreNode scoreNode=new ScoreNode(score);      debug.visitNode(scoreNode);      debug.visitEdge(debugGame.peek(),scoreNode);    }    return score;  }  if (debug != null) {    debugHome.push(new AlphaBetaDebugNode(alpha,beta));    debug.visitNode(debugHome.peek());    debug.visitEdge(debugGame.peek(),debugHome.peek());  }  while (it.hasNext()) {    IGameMove move=it.next();    move.execute(state);    state.incrementCounter();    if (debug != null) {      debugGame.push(state.copy());      debug.visitNode(debugGame.peek());      debug.visitEdge(debugHome.peek(),debugGame.peek());    }    int moveScore=-alphabeta(ply - 1,opponent,player,-beta,-alpha);    move.undo(state);    if (moveScore > alpha) {      alpha=moveScore;      if (alpha >= beta) {        if (debug != null) {          AlphaPrune apn=new AlphaPrune();          debug.visitNode(apn);          debug.visitEdge(debugGame.pop(),apn);          AlphaBetaDebugNode abdn=debugHome.pop();          abdn.value(alpha);        }        return alpha;      }    }    if (debug != null) {      debugGame.pop();    }  }  AlphaBetaDebugNode abdn=debugHome.pop();  abdn.value(alpha);  return alpha;}  }
class C{  @Override public void updateScreen(){  ipBox.updateCursorCounter();  ((GuiButton)buttonList.get(0)).displayString=state.isRunning() ? "Cancel" : "Search";  ipBox.setEnabled(!state.isRunning());  maxThreadsBox.setEnabled(!state.isRunning());  ((GuiButton)buttonList.get(0)).enabled=MiscUtils.isInteger(maxThreadsBox.getText()) && !ipBox.getText().isEmpty();}  }
class C{  public ColorAtom(Atom atom,Color bg,Color c){  elements=new RowAtom(atom);  background=bg;  color=c;}  }
class C{  private static void createBillingResultDataMock(){  Long subscriptionKey=1L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,CURRENCY_EUR,BigDecimal.valueOf(120),getProductHistory(subscriptionKey)));  subscriptionKey=2L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,CURRENCY_EUR,BigDecimal.valueOf(210.15),getProductHistory(subscriptionKey)));  subscriptionKey=3L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,CURRENCY_EUR,BigDecimal.valueOf(187.99),getProductHistory(subscriptionKey)));  subscriptionKey=4L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,CURRENCY_EUR,BigDecimal.valueOf(26),getProductHistory(subscriptionKey)));  subscriptionKey=5L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,CURRENCY_USD,BigDecimal.valueOf(523.56),getProductHistory(subscriptionKey)));  subscriptionKey=6L;  billingResultDataMock.put(subscriptionKey,new BillingResultDataMock(subscriptionKey,CURRENCY_EUR,BigDecimal.valueOf(176.44),getProductHistory(subscriptionKey)));  printTestData();}  }
class C{  public void addOuterBorder(Border outer){  outerBorder=outer;}  }
class C{  public long queryForLong(DatabaseConnection databaseConnection,PreparedStmt<T> preparedStmt) throws SQLException {  CompiledStatement stmt=preparedStmt.compile(databaseConnection,StatementType.SELECT_LONG);  DatabaseResults results=null;  try {    results=stmt.runQuery(null);    if (results.first()) {      return results.getLong(0);    } else {      throw new SQLException("No result found in queryForLong: " + preparedStmt.getStatement());    }  }  finally {    if (results != null) {      results.close();    }    stmt.close();  }}  }
class C{  private void cmdPlayer(CommandSender sender,String[] args){  if (args.length == 3) {    if (!args[2].equalsIgnoreCase("clear")) {      sendUsagePlayer(sender);      return;    }    if (isNotPermissed(sender,"nametagedit.clear.self"))     return;    String targetName=args[1];    if (!sender.hasPermission("nametagedit.clear.others") && !targetName.equalsIgnoreCase(sender.getName())) {      NametagMessages.MODIFY_OWN_TAG.send(sender);      return;    }    handler.clear(sender,targetName);    handler.applyTagToPlayer(Bukkit.getPlayerExact(targetName));  } else   if (args.length >= 4) {switch (args[2].toLowerCase()) {case "prefix":case "suffix":      if (isNotPermissed(sender,"nametagedit.edit.self"))       return;    String targetName=args[1];  if (!sender.hasPermission("nametagedit.edit.others") && !targetName.equalsIgnoreCase(sender.getName())) {    NametagMessages.MODIFY_OWN_TAG.send(sender);    return;  }NametagEvent.ChangeType changeType=args[2].equalsIgnoreCase("prefix") ? NametagEvent.ChangeType.PREFIX : NametagEvent.ChangeType.SUFFIX;handler.save(sender,targetName,changeType,Utils.format(args,3,args.length));break;case "priority":if (isNotPermissed(sender,"nametagedit.edit.self")) return;String priorityName=args[1];if (!sender.hasPermission("nametagedit.edit.others") && !priorityName.equalsIgnoreCase(sender.getName())) {NametagMessages.MODIFY_OWN_TAG.send(sender);break;}setupPriority(sender,true,priorityName,args[3]);break;default :sendUsagePlayer(sender);}} else {sendUsagePlayer(sender);}}  }
class C{  public void removePrimaryKeyRelationship(ERDAssociation table,boolean reflect){  primaryKeyRelationships.remove(table);  if (reflect) {    firePropertyChange(INPUT,table,null);  }}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  static void svd_dscal(int n,double da,double[] dx,int incx){  if (n <= 0 || incx == 0)   return;  int ix=(incx < 0) ? n - 1 : 0;  for (int i=0; i < n; i++) {    dx[ix]*=da;    ix+=incx;  }  return;}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  @Override public boolean isEmpty(final IScope scope){  for (  final IPopulationSet p : populationSets) {    if (!p.isEmpty(scope)) {      return false;    }  }  return true;}  }
class C{  protected String submitCommand(String shellId,String command,String[] arguments) throws WinRMException {  String commandId=newSubmitCommand(shellId,command,arguments).execute();  return commandId;}  }
class C{  private ContentElement parseContentElement(SpanManager sm,ContentElementParsingParameters cepp,Span lineSpan,ContentElement result){  LinkedList<Span> lineSpans=new LinkedList<Span>();  lineSpans.add(lineSpan);  return parseContentElement(sm,cepp,lineSpans,result);}  }
class C{  protected void rewardPlayer(final Player player){  player.addKarma(10.0);  player.setAtkXP(player.getAtkXP() + (int)(player.getXP() * ATK_REWARD_RATE));  player.incAtkXP();  player.sendPrivateText(NotificationType.POSITIVE,"You gained " + Integer.toString((int)(player.getXP() * ATK_REWARD_RATE)) + " of attack experience points.");}  }
class C{  @SuppressWarnings("unchecked") public static <E>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  public static double intelligentRound(double min,double max,double value,int precisionModifier,boolean preDecimalRound){  int powerOf10=getOptimalPrecision(min,max);  if (powerOf10 == Integer.MAX_VALUE) {    return value;  }  return roundToPowerOf10(value,powerOf10 + precisionModifier);}  }
class C{  @Override public String readLine() throws IOException {  StringBuilder result=new StringBuilder();  for (; ; ) {    int intRead=read();    if (intRead == -1) {      return result.length() == 0 ? null : result.toString();    }    char c=(char)intRead;    if (c == '\n' || c == '\r')     break;    result.append(c);  }  return result.toString();}  }
class C{  @Override public boolean isDomainNameSupported(){  return false;}  }
class C{  private void addNodesSF(ArrayList<MWFNode> list,int AD_WF_Node_ID,int AD_Client_ID){  ArrayList<MWFNode> tmplist=new ArrayList<MWFNode>();  MWFNode node=getNode(AD_WF_Node_ID);  if (node != null && (node.getAD_Client_ID() == 0 || node.getAD_Client_ID() == AD_Client_ID)) {    if (!list.contains(node))     list.add(node);    MWFNodeNext[] nexts=node.getTransitions(AD_Client_ID);    for (int i=0; i < nexts.length; i++) {      MWFNode child=getNode(nexts[i].getAD_WF_Next_ID());      if (!child.isActive())       continue;      if (child.getAD_Client_ID() == 0 || child.getAD_Client_ID() == AD_Client_ID) {        if (!list.contains(child)) {          list.add(child);          tmplist.add(child);        }      }    }    for (int i=0; i < tmplist.size(); i++)     addNodesSF(list,tmplist.get(i).get_ID(),AD_Client_ID);  }}  }
class C{  public ArrayList<GeoPoint> finalizeRoadShape(Road road,ArrayList<RoadLink> links){  ArrayList<GeoPoint> newShape=new ArrayList<GeoPoint>(road.mRouteHigh.size());  RoadNode nodeStart=road.mNodes.get(0);  RoadNode nodeEnd=road.mNodes.get(road.mNodes.size() - 1);  int shapeIndexStart=links.get(nodeStart.mNextRoadLink).mShapeIndex;  int shapeIndexEnd=links.get(nodeEnd.mNextRoadLink).mShapeIndex;  for (int i=shapeIndexStart; i <= shapeIndexEnd; i++) {    newShape.add(road.mRouteHigh.get(i));  }  return newShape;}  }
class C{  public NumberTickUnitSource(boolean integers){  this(integers,null);}  }
class C{  public static Insets of(int left,int top,int right,int bottom){  if (left == 0 && top == 0 && right == 0 && bottom == 0) {    return NONE;  }  return new Insets(left,top,right,bottom);}  }
class C{  protected void onRemoveChannelBan(String channel,String sourceNick,String sourceLogin,String sourceHostname,String hostmask){}  }
class C{  public static SipResponse create200OkReInviteResponse(SipDialogPath dialog,SipRequest request,String[] featureTags,String content) throws PayloadException {  try {    Response response=SipUtils.MSG_FACTORY.createResponse(200,request.getStackMessage());    ToHeader to=(ToHeader)response.getHeader(ToHeader.NAME);    to.setTag(dialog.getLocalTag());    response.addHeader(dialog.getSipStack().getContact());    SipUtils.setFeatureTags(response,featureTags);    SipUtils.buildAllowHeader(response);    response.addHeader(SipUtils.buildServerHeader());    if (dialog.getSessionExpireTime() >= SessionTimerManager.MIN_EXPIRE_PERIOD) {      Header requireHeader=SipUtils.HEADER_FACTORY.createHeader(RequireHeader.NAME,"timer");      response.addHeader(requireHeader);      Header sessionExpiresHeader=SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_SESSION_EXPIRES,dialog.getSessionExpireTime() + ";refresher=" + dialog.getInvite().getSessionTimerRefresher());      response.addHeader(sessionExpiresHeader);    }    response.setContent(content,SipUtils.HEADER_FACTORY.createContentTypeHeader("application","sdp"));    response.setContentLength(SipUtils.HEADER_FACTORY.createContentLengthHeader(content.getBytes(UTF8).length));    SipResponse resp=new SipResponse(response);    resp.setStackTransaction(request.getStackTransaction());    return resp;  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create response for re-invite with content : " + content,e);  }}  }
class C{  static void errorMissingElement(String systemID,int lineNr,String parentElementName,String missingElementName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.MISSING_ELEMENT,systemID,lineNr,missingElementName,null,null,"Element " + parentElementName + " expects to have a "+ missingElementName);}  }
class C{  public VcpcRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public void test_probablePrime(){  for (int bitLength=50; bitLength <= 1050; bitLength+=100) {    BigInteger a=BigInteger.probablePrime(bitLength,rand);    assertTrue("isProbablePrime(probablePrime()) failed for: " + bi,a.isProbablePrime(80));  }}  }
class C{  public boolean nextPacketIsKLVFillItem(){  return (this.nextHeaderWasRead() && KLVPacket.isKLVFillItem(Arrays.copyOf(this.nextHeader.getKey(),this.nextHeader.getKey().length)));}  }
class C{  public boolean isConnectedTo(BranchCoverageGoal goal){  if (branch == null || goal.branch == null) {    return goal.methodName.equals(methodName) && goal.className.equals(className);  }  return branch.getInstruction().isDirectlyControlDependentOn(goal.branch) || goal.branch.getInstruction().isDirectlyControlDependentOn(branch);}  }
class C{  public void removeSelectionListener(final NetworkSelectionListener l){  selectionModel.removeSelectionListener(l);}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public void configure(){  setParameters();}  }
class C{  public PatternAndExpr(){}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.display_weather_activity);  initializeViewFields();  final Intent intent=getIntent();  if (intent.getType().equals(TYPE_WEATHER)) {    final WeatherData weatherData=intent.getParcelableExtra(KEY_WEATHER_DATA);    setViewFields(weatherData);  } else   Utils.showToast(this,"Incorrect Data");}  }
class C{  private void testEventsAfterLeaderKill(int nodes) throws Throwable {  List<CopycatServer> servers=createServers(nodes);  CopycatClient client=createClient();  client.onEvent("test",null);  for (int i=0; i < 10; i++) {    client.submit(new TestEvent(true)).thenAccept(null);    await(30000,2);  }  client.submit(new TestEvent(true)).thenAccept(null);  CopycatServer leader=servers.stream().filter(null).findFirst().get();  leader.shutdown().get(10,TimeUnit.SECONDS);  await(30000,2);  for (int i=0; i < 10; i++) {    client.submit(new TestEvent(true)).thenAccept(null);    await(30000,2);  }}  }
class C{  public SimpleEntry(){  id=nextId++;}  }
class C{  @Override public int doStartTag() throws JspException {  ExpressionEvaluator eval=new ExpressionEvaluator(this,pageContext);  if (selected != null) {    selected=eval.evalString("default",selected);  }  Locale userLocale=pageContext.getRequest().getLocale();  List<LabelValue> countries=this.buildCountryList(userLocale);  if (scope != null) {    if (scope.equals("page")) {      pageContext.setAttribute(name,countries);    } else     if (scope.equals("request")) {      pageContext.getRequest().setAttribute(name,countries);    } else     if (scope.equals("session")) {      pageContext.getSession().setAttribute(name,countries);    } else     if (scope.equals("application")) {      pageContext.getServletContext().setAttribute(name,countries);    } else {      throw new JspException("Attribute 'scope' must be: page, request, session or application");    }  } else {    StringBuffer sb=new StringBuffer();    sb.append("<select name=\"").append(name).append("\" id=\"").append(name).append("\" class=\"select\">\n");    if (prompt != null) {      sb.append("    <option value=\"\" selected=\"selected\">");      sb.append(eval.evalString("prompt",prompt)).append("</option>\n");    }    for (    Object country1 : countries) {      LabelValue country=(LabelValue)country1;      sb.append("    <option value=\"").append(country.getValue()).append("\"");      if ((selected != null) && selected.equals(country.getValue())) {        sb.append(" selected=\"selected\"");      }      sb.append(">").append(country.getLabel()).append("</option>\n");    }    sb.append("</select>");    try {      pageContext.getOut().write(sb.toString());    } catch (    IOException io) {      throw new JspException(io);    }  }  return super.doStartTag();}  }
class C{  public UnassignedClassException(){  super();}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public static int hashCode(long[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  public static void startSvcIntent(final Context ctx,final String action){  final Intent i=newSvcIntent(ctx,action,null,null);  ctx.startService(i);}  }
class C{  public void restoreClassBuilder(){  if (javaClassName != null) {    classBuilder.restoreClassBuilder();  }}  }
class C{  public static int indexOf(float[] array,float[] sub){  return indexOf(array,sub,0,array.length);}  }
class C{  public SerializerRegistry registerAbstract(Class<?> abstractType,int id,TypeSerializerFactory factory){  abstractFactories.put(abstractType,factory);  types.put(id,abstractType);  ids.put(abstractType,id);  return this;}  }
class C{  private static MimeBodyPart createMessageBodyPart(String body,boolean html) throws MessagingException {  MimeBodyPart bodyPart=new MimeBodyPart();  bodyPart.setText(body);  bodyPart.setHeader("content-type",html ? "text/html" : "text/plain");  return bodyPart;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("TitleEntity: ");  sb.append("tooltip = ");  sb.append(getToolTipText());  return sb.toString();}  }
class C{  private void jumpToNextTarget(){  Entity targ=getNextTarget();  if (targ == null) {    return;  }  showTargetChoice=false;  clientgui.bv.centerOnHex(targ.getPosition());  clientgui.getBoardView().select(targ.getPosition());  showTargetChoice=true;  target(targ);}  }
class C{  protected Attribute generateAttribute(int index,int attType,String namePrefix) throws Exception {  Attribute result;  String name;  int valIndex;  int nomCount;  String prefix;  result=null;  if (index == CLASS_IS_LAST) {    valIndex=0;    name="Class";    prefix="class";    nomCount=getNumClasses();  } else {    valIndex=index;    nomCount=getNumNominalValues();    prefix="att" + (valIndex + 1) + "val";switch (attType) {case Attribute.NOMINAL:      name="Nominal" + (valIndex + 1);    break;case Attribute.NUMERIC:  name="Numeric" + (valIndex + 1);break;case Attribute.STRING:name="String" + (valIndex + 1);break;case Attribute.DATE:name="Date" + (valIndex + 1);break;case Attribute.RELATIONAL:name="Relational" + (valIndex + 1);break;default :throw new IllegalArgumentException("Attribute type '" + attType + "' unknown!");}}switch (attType) {case Attribute.NOMINAL:ArrayList<String> nomStrings=new ArrayList<String>(valIndex + 1);for (int j=0; j < nomCount; j++) {nomStrings.add(prefix + (j + 1));}result=new Attribute(namePrefix + name,nomStrings);break;case Attribute.NUMERIC:result=new Attribute(namePrefix + name);break;case Attribute.STRING:result=new Attribute(namePrefix + name,(ArrayList<String>)null);break;case Attribute.DATE:result=new Attribute(namePrefix + name,"yyyy-mm-dd");break;case Attribute.RELATIONAL:Instances rel;if (index == CLASS_IS_LAST) {rel=getRelationalClassFormat();} else {rel=getRelationalFormat(index);}if (rel == null) {TestInstances dataset=new TestInstances();dataset.setNumNominal(getNumRelationalNominal());dataset.setNumNominalValues(getNumRelationalNominalValues());dataset.setNumNumeric(getNumRelationalNumeric());dataset.setNumString(getNumRelationalString());dataset.setNumDate(getNumRelationalDate());dataset.setNumInstances(0);dataset.setClassType(Attribute.NOMINAL);rel=new Instances(dataset.generate());if (!getNoClass()) {int clsIndex=rel.classIndex();rel.setClassIndex(-1);rel.deleteAttributeAt(clsIndex);}}result=new Attribute(namePrefix + name,rel);break;default :throw new IllegalArgumentException("Attribute type '" + attType + "' unknown!");}return result;}  }
class C{  public void dynInit() throws Exception {  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2163,DisplayType.TableDir);  fOrg=new VLookup("AD_Org_ID",false,false,true,orgL);  fOrg.addVetoableChangeListener(this);  MLookup docActionL=MLookupFactory.get(Env.getCtx(),m_WindowNo,3494,DisplayType.List,Env.getLanguage(Env.getCtx()),"DocAction",135,false,"AD_Ref_List.Value IN ('CO','PR')");  docAction=new VLookup("DocAction",true,false,true,docActionL);  docAction.addVetoableChangeListener(this);  docAction.setValue("PR");  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);  fBPartner=new VLookup("C_BPartner_ID",false,false,true,bpL);  fBPartner.addVetoableChangeListener(this);  lDocType.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),"Order")));  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),"CustomerRMA")));  cmbDocType.addActionListener(this);  panel.getStatusBar().setStatusLine(Msg.getMsg(Env.getCtx(),"InvGenerateSel"));}  }
class C{  public void draw(Object object,Graphics2D graphics,DrawInfo2D info){  graphics.setColor(getColor());  graphics.draw(getLocatedArea(info.draw.x,info.draw.y,info.draw.width,info.draw.height));}  }
class C{  public XMLApiResult executeSsh(String command,String request){  XMLApiResult result=new XMLApiResult();  if ((_host == null) || (_userName == null) || (_password == null)) {    _log.error("Invalid connection parameter");    result.setCommandFailed();    return result;  }  String cmd="export NAS_DB=/nas;" + command + " "+ request;  _log.info("executeSsh: cmd: " + cmd);  InputStream in=null;  Session session=null;  Channel channel=null;  try {    java.util.Properties config=new java.util.Properties();    config.put("StrictHostKeyChecking","no");    JSch jsch=new JSch();    session=jsch.getSession(_userName,_host,DEFAULT_PORT);    session.setPassword(_password);    session.setConfig(config);    session.connect();    channel=session.openChannel("exec");    ((ChannelExec)channel).setCommand(cmd);    channel.setInputStream(null);    in=channel.getInputStream();    channel.connect();    byte[] tmp=new byte[BUFFER_SIZE];    StringBuilder cmdResults=new StringBuilder();    while (true) {      while (in.available() > 0) {        int i=in.read(tmp,0,BUFFER_SIZE);        if (i < 0) {          break;        }        cmdResults.append(new String(tmp,0,i));      }      if (channel.isClosed()) {        _log.info("Ssh exit status: " + channel.getExitStatus());        result.setMessage(cmdResults.toString());        if (channel.getExitStatus() == 0) {          StringTokenizer st=new StringTokenizer(cmdResults.toString());          if (st.hasMoreTokens()) {            st.nextToken();          }          if (!command.equalsIgnoreCase(SERVER_USER_CMD)) {            if (st.hasMoreTokens()) {              st.nextToken();            }          }          String res="";          if (st.hasMoreTokens()) {            res=st.nextToken();          }          if (res.equalsIgnoreCase("done")) {            result.setCommandSuccess();          } else           if (res.equalsIgnoreCase("error")) {            result.setCommandFailed();          } else {            result.setCommandSuccess();          }        } else {          result.setCommandFailed();        }        break;      }      try {        Thread.sleep(_respDelay);      } catch (      InterruptedException e) {        _log.error("VNX File executeSsh Communication thread interrupted for command: " + cmd,e);      }    }    _log.info("executeSsh: Done");  } catch (  Exception e) {    _log.error("VNX File executeSsh connection failed while attempting to execute: " + cmd,e);    result.setCommandFailed();    result.setMessage(e.getMessage());  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException ignored) {        _log.error("Exception occured while closing input stream due to ",ignored);      }    }    if (channel != null) {      channel.disconnect();    }    if (session != null) {      session.disconnect();    }  }  return result;}  }
class C{  protected void compareDatasets(Instances data1,Instances data2) throws Exception {  if (!data2.equalHeaders(data1)) {    throw new Exception("header has been modified\n" + data2.equalHeadersMsg(data1));  }  if (!(data2.numInstances() == data1.numInstances())) {    throw new Exception("number of instances has changed");  }  for (int i=0; i < data2.numInstances(); i++) {    Instance orig=data1.instance(i);    Instance copy=data2.instance(i);    for (int j=0; j < orig.numAttributes(); j++) {      if (orig.isMissing(j)) {        if (!copy.isMissing(j)) {          throw new Exception("instances have changed");        }      } else       if (orig.value(j) != copy.value(j)) {        throw new Exception("instances have changed");      }      if (orig.weight() != copy.weight()) {        throw new Exception("instance weights have changed");      }    }  }}  }
class C{  public ExifReader(JpegSegmentData segmentData){  this(segmentData.getSegment(JpegSegmentReader.SEGMENT_APP1));}  }
class C{  private void pruneChild(Tree currentNode){  if (!currentNode.isLeaf()) {    Iterator<Edge> childIterator=currentNode.childIterator();    while (childIterator.hasNext()) {      pruneChild(childIterator.next().getChild());    }    if (!childrenHaveChildren(currentNode)) {      double leafsErrorEstimate=0;      int examplesCurrentNode=currentNode.getSubtreeFrequencySum();      childIterator=currentNode.childIterator();      Set<String> classSet=new HashSet<String>();      while (childIterator.hasNext()) {        Tree leafNode=childIterator.next().getChild();        classSet.add(leafNode.getLabel());        int examples=leafNode.getFrequencySum();        double currentErrorRate=getErrorNumber(leafNode,leafNode.getLabel()) / (double)examples;        leafsErrorEstimate+=pessimisticErrors(examples,currentErrorRate,confidenceLevel) * ((double)examples / (double)examplesCurrentNode);      }      if (classSet.size() <= 1) {        changeToLeaf(currentNode);      } else {        String currentNodeLabel=prunedLabel(currentNode);        double currentErrorRate=getErrorNumber(currentNode,currentNodeLabel) / (double)examplesCurrentNode;        double nodeErrorEstimate=pessimisticErrors(examplesCurrentNode,currentErrorRate,confidenceLevel);        if (nodeErrorEstimate - PRUNE_PREFERENCE <= leafsErrorEstimate) {          changeToLeaf(currentNode);        }      }    }  }}  }
class C{  public void addNeuron(Neuron neuron,boolean fireEvent){  neuronList.add(neuron);  neuron.setParentGroup(this);  if (getParentNetwork() != null) {    neuron.setId(getParentNetwork().getNeuronIdGenerator().getId());    if (fireEvent) {      getParentNetwork().fireNeuronAdded(neuron);    }  }  if (fireEvent) {    resetSubsamplingIndices();  }}  }
class C{  public final void upDateCounter(Instance instanceNoClass,Instance instanceClass){  if (containedBy(instanceNoClass)) {    m_counter++;    if (this.m_classLabel == instanceClass.value(0)) {      m_ruleSupCounter++;    }  }}  }
class C{  @Override public void onStyleChange(int state){}  }
class C{  public void connected(){}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  return inflater.inflate(layoutID,container,false);}  }
class C{  public void testClientSessionCaching() throws IOException, KeyManagementException {  OpenSSLContextImpl context=new OpenSSLContextImpl();  FakeClientSessionCache fakeCache=new FakeClientSessionCache();  context.engineInit(null,null,null);  context.engineGetClientSessionContext().setPersistentCache(fakeCache);  SSLSocketFactory socketFactory=context.engineGetSocketFactory();  context.engineGetClientSessionContext().setSessionCacheSize(2);  makeRequests(socketFactory);  List<String> smallCacheOps=Arrays.asList("get www.fortify.net","put www.fortify.net","get www.paypal.com","put www.paypal.com","get www.yellownet.ch","put www.yellownet.ch","get www.fortify.net","get www.paypal.com","get www.yellownet.ch");  assertEquals(smallCacheOps,fakeCache.ops);  fakeCache=new FakeClientSessionCache();  context.engineInit(null,null,null);  context.engineGetClientSessionContext().setPersistentCache(fakeCache);  socketFactory=context.engineGetSocketFactory();  context.engineGetClientSessionContext().setSessionCacheSize(3);  makeRequests(socketFactory);  List<String> bigCacheOps=Arrays.asList("get www.fortify.net","put www.fortify.net","get www.paypal.com","put www.paypal.com","get www.yellownet.ch","put www.yellownet.ch");  assertEquals(bigCacheOps,fakeCache.ops);  fakeCache=new FakeClientSessionCache();  context.engineInit(null,null,null);  context.engineGetClientSessionContext().setPersistentCache(fakeCache);  socketFactory=context.engineGetSocketFactory();  context.engineGetClientSessionContext().setSessionCacheSize(4);  makeRequests(socketFactory);  assertEquals(bigCacheOps,fakeCache.ops);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("AD_Table_ID"))     p_AD_Table_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void open(){  this.database=openHelper.getWritableDatabase();}  }
class C{  public void testConnect_IllegalStateException() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.connect(localAddr1);  assertTrue(this.channel1.isConnected());  try {    this.channel1.connect(localAddr1);    fail("Should throw IllegalStateException.");  } catch (  IllegalStateException e) {  }}  }
class C{  public static WebSocketFrame createTextFrame(String payload){  return new WebSocketFrame().setFin(true).setOpcode(TEXT).setPayload(payload);}  }
class C{  public Notification clear(Integer notificationID){  return find(notificationID).clear();}  }
class C{  private void handleHtmlShowSource(RequestAndResponse requestAndResponse) throws IOException, ServletException {  String title=servletText.pageTitleSource();  final String paneId="source";  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId(paneId);  final String id=requestAndResponse.getURIParameter();  boolean headerAdded=false;  try {    final StringBuilder result=new StringBuilder();    final Entry source=dbLogic.getEntryById(id);    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    if (source != null) {      pageWrapper.setPaneId(source.getId());    }    if (source == null) {      if (addTitle(requestAndResponse,title)) {        dbLogic.commit();        return;      }      if (!requestAndResponse.moreThanOneUri) {        requestAndResponse.response.setStatus(HttpServletResponse.SC_NOT_FOUND);      }      pageWrapper.addHeader();      headerAdded=true;      result.append(servletText.errorNoSourceFound());    } else     if (!dbLogic.canUserSeeEntry(user,source,isUserAnAdmin(requestAndResponse))) {      if (addTitle(requestAndResponse,title)) {        dbLogic.commit();        return;      }      pageWrapper.addHeader();      headerAdded=true;      if (user == null) {        result.append(servletText.errorRequiresSignIn(false));      } else {        result.append(servletText.errorMayNotSeeSource());      }    } else {      title=source.getSourceTitle();      if (addTitle(requestAndResponse,title)) {        dbLogic.commit();        return;      }      pageWrapper.setIncludeEdit();      pageWrapper.setIncludeDelete();      pageWrapper.setTitle(title);      pageWrapper.addMetaData(new KeyAndValue("paneType","source"));      pageWrapper.addHeader();      headerAdded=true;      pageWrapper.addPageIntroText(servletText.introTextShowSource(false),servletText.introTextShowSource(true));      addSourceHtml(source,result,SourceEmbedContext.InSource,null,-1,paneId);      final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,servletText.sentenceNoQuotationsForThisSourceExist(),result,servletText);      final List<?> results=dbLogic.getEntriesBySourceId(source.getId(),paginator.getStartPosition(),paginator.getMaxResults());      entryListToHtmlAndJson(paneId,result,paginator,results,SourceEmbedContext.InSourceQuotations);    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    if (!headerAdded) {      pageWrapper.addHeader();    }    requestAndResponse.print(servletText.errorInternalDatabase());  }  pageWrapper.addFooter();}  }
class C{  public static String findCodeBaseInClassPath(Pattern codeBaseNamePattern,String classPath){  if (classPath == null) {    return null;  }  StringTokenizer tok=new StringTokenizer(classPath,File.pathSeparator);  while (tok.hasMoreTokens()) {    String t=tok.nextToken();    File f=new File(t);    Matcher m=codeBaseNamePattern.matcher(f.getName());    if (m.matches()) {      return t;    }  }  return null;}  }
class C{  public void onMessage(String from,Bundle data){  if (mGcmListener != null)   mGcmListener.onMessage(from,data);}  }
class C{  @Override @SuppressWarnings("UnusedReturnValue") public Object executeCommand(final int commandID,final Object[] args){  if (!isSetup) {    throw new RuntimeException("You must call viewer.setupViewer(); before you call any commands");  }  return currentCommands.executeCommand(commandID,args);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ArrayLike.class) {switch (baseFeatureID) {case TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE:      return TypesPackage.PRIMITIVE_TYPE__DECLARED_ELEMENT_TYPE;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.602 -0500",hash_original_method="5965A0E7316AAA95881AE3D055547B57",hash_generated_method="75CC9E4CFD4DB5920EF6129A9FB0C362") public final boolean isAntiAlias(){  return 1 == ((getFlags() & ANTI_ALIAS_FLAG) + 0);}  }
class C{  public boolean isConstrained(){  return constrained;}  }
class C{  public QuotaExceededException(){  super();}  }
class C{  public void addBox(String title,Component component){  final JXCollapsiblePane collapsible=new JXCollapsiblePane();  collapsible.getContentPane().setBackground(Color.WHITE);  collapsible.add(component);  collapsible.setBorder(new CompoundBorder(separatorBorder,collapsible.getBorder()));  Action toggleAction=collapsible.getActionMap().get(JXCollapsiblePane.TOGGLE_ACTION);  toggleAction.putValue(JXCollapsiblePane.COLLAPSE_ICON,UIManager.getIcon("Tree.expandedIcon"));  toggleAction.putValue(JXCollapsiblePane.EXPAND_ICON,UIManager.getIcon("Tree.collapsedIcon"));  JXHyperlink link=new JXHyperlink(toggleAction);  link.setText(title);  link.setFont(link.getFont().deriveFont(Font.BOLD));  link.setOpaque(true);  link.setBackground(getTitleBackgroundColor());  link.setFocusPainted(false);  link.setUnclickedColor(getTitleForegroundColor());  link.setClickedColor(getTitleForegroundColor());  link.setBorder(new CompoundBorder(separatorBorder,BorderFactory.createEmptyBorder(2,4,2,4)));  link.setBorderPainted(true);  add(link);  add(collapsible);}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  ActionSet changeCurrentMode(Mode mode){  ActionSet actions=new ActionSet();  if (this.resultAction != null)   actions.resultAction=this.resultAction.changeCurrentMode(mode);  actions.noResultActions=new NoResultAction[this.noResultActions.length];  for (int i=0; i < actions.noResultActions.length; i++)   actions.noResultActions[i]=this.noResultActions[i].changeCurrentMode(mode);  return actions;}  }
class C{  protected void process(final DirtyRegion dirtyRegion){  Region region=dirtyRegion;  if (region == null) {    region=new RegionImpl(0,getDocument().getContents().length());  }  final List<TypedRegion> regions=computePartitioning(region.getOffset(),region.getLength());  for (  final TypedRegion r : regions) {    final ReconcilingStrategy strategy=getReconcilingStrategy(r.getType());    if (strategy == null) {      continue;    }    if (dirtyRegion != null) {      strategy.reconcile(dirtyRegion,r);    } else {      strategy.reconcile(r);    }  }}  }
class C{  public static List<Integer> toIntList(@Nullable int[] arr,IgnitePredicate<Integer>... p){  if (arr == null || arr.length == 0)   return Collections.emptyList();  List<Integer> ret=new ArrayList<>(arr.length);  if (F.isEmpty(p))   for (  int i : arr)   ret.add(i); else {    for (    int i : arr)     if (F.isAll(i,p))     ret.add(i);  }  return ret;}  }
class C{  public static void assertEqual(short expected,short actual,String errorMessage){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected == actual,errorMessage);}  }
class C{  @Override public List<NamedRelatedResourceRep> listByTenant(URI tenantId){  UriBuilder uriBuilder=client.uriBuilder(baseUrl);  if (tenantId != null) {    uriBuilder.queryParam(TENANT_PARAM,tenantId);  }  HostList response=client.getURI(HostList.class,uriBuilder.build());  return defaultList(response.getHosts());}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public CustomConfigRestRep updateCustomConfig(@PathParam("id") URI id,CustomConfigUpdateParam param){  CustomConfig config=getCustomConfigById(id,true);  if (config.getSystemDefault()) {    throw APIException.badRequests.systemDefaultConfigCouldNotBeModifiedOrDeactivated(config.getId());  }  customConfigHandler.validate(config.getConfigType(),config.getScope(),param.getValue(),false);  if (param.getValue() != null && !param.getValue().isEmpty()) {    config.setValue(param.getValue());  }  _dbClient.updateAndReindexObject(config);  auditOp(OperationTypeEnum.UPDATE_CONFIG,true,null,config.getId().toString(),config.getLabel(),config.getScope());  return DbObjectMapper.map(config);}  }
class C{  public void rebuildStackMap(ClassPool pool) throws BadBytecode {  CodeAttribute ca=getCodeAttribute();  if (ca != null) {    StackMapTable smt=MapMaker.make(pool,this);    ca.setAttribute(smt);  }}  }
class C{  public static void flowMessage(Message m,boolean delSp) throws MessagingException, IOException {  flowMessage(m,delSp,RFC2646_WIDTH);}  }
class C{  private AddressbookEntry parseLine(String line){  if (line == null || line.isEmpty()) {    return null;  }  String[] split=line.trim().split(" ");  if (split.length == 1) {    String name=split[0];    return new AddressbookEntry(name,new HashSet<String>());  }  if (split.length == 2) {    String name=split[0];    Set<String> categories=getCategoriesFromString(split[1]);    return new AddressbookEntry(name,categories);  }  return null;}  }
class C{  public void addNodesInDocOrder(DTMIterator iterator,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  int node;  while (DTM.NULL != (node=iterator.nextNode())) {    addNodeInDocOrder(node,support);  }}  }
class C{  public String clustererTipText(){  return "The density based clusterer to use.";}  }
class C{  public void componentResized(ComponentEvent e){}  }
class C{  protected void actuallyCheckforUpdates(URI url,Collection<Plugin> plugins,String entryPoint) throws IOException {  LOGGER.fine("Checking for updates at " + url + " for "+ getPluginNames(plugins));  if (DEBUG) {    System.out.println(url);  }  HttpURLConnection conn=(HttpURLConnection)url.toURL().openConnection();  conn.setDoInput(true);  conn.setDoOutput(true);  conn.setRequestMethod("POST");  conn.connect();  OutputStream out=conn.getOutputStream();  writeXml(out,plugins,entryPoint,true);  if (DEBUG) {    System.out.println("Sending");    writeXml(System.out,plugins,entryPoint,false);  }  int responseCode=conn.getResponseCode();  if (responseCode != 200) {    logError(SystemProperties.ASSERTIONS_ENABLED ? Level.WARNING : Level.FINE,"Error checking for updates at " + url + ": "+ responseCode+ " - "+ conn.getResponseMessage());  } else {    parseUpdateXml(url,plugins,conn.getInputStream());  }  conn.disconnect();}  }
class C{  public synchronized boolean isNullAutofill(){  return nullAutofill;}  }
class C{  public static char firstChar(String str){  if (isEmpty(str))   return 0;  return str.charAt(0);}  }
class C{  public static <T>List<T> iteratorAsList(Iterator<T> i){  ArrayList<T> list=new ArrayList<T>(10);  while (i.hasNext()) {    list.add(i.next());  }  return list;}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message) throws HeadlessException {  return showConfirmDialog(parentComponent,message,UIManager.getString("OptionPane.titleText"),YES_NO_CANCEL_OPTION);}  }
class C{  public long[] toArray(){  return Arrays.copyOf(values,size);}  }
class C{  public static String generateNativeGuid(String deviceType,String serialNumber){  return String.format("%s+%s",_deviceTypeMap.get(deviceType),serialNumber);}  }
class C{  private void printMenu(){  OUT.println("\n");  OUT.println("Choose one of the following demo options:");  OUT.println("\t1) Retrieve my next week's events");  OUT.println("\t2) Update my attendee status for an event");  OUT.println("\t0) Exit");  OUT.println("\nEnter Number (0-2): ");}  }
class C{  public String serialize(TreeNode root){  StringBuilder sb=new StringBuilder();  buildString(root,sb);  return sb.toString();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  Expression expr=((ElemVariable)m_obj).getSelect().getExpression();  XObject xobj=expr.execute(xctxt);  xobj.allowDetachToRelease(false);  return xobj;}  }
class C{  public static void writeToMifareClassic1KCard(MfReaderWriter reader,MfCard card,int sectorId,int blockId,String key,String dataString) throws CardException {  if (!isValidMifareClassic1KKey(key)) {    System.out.println("The key " + key + "is not valid.");    return;  }  if (!isHexString(dataString)) {    System.out.println(dataString + " is not an hex string.");    return;  }  byte[] keyBytes=hexStringToBytes(key);  MfAccess access=new MfAccess(card,sectorId,blockId,Key.A,keyBytes);  String blockData=readMifareClassic1KBlock(reader,access);  if (blockData == null) {    access=new MfAccess(card,sectorId,blockId,Key.B,keyBytes);    blockData=readMifareClassic1KBlock(reader,access);  }  System.out.print("Old block data: ");  if (blockData == null) {    System.out.println("<Failed to read block>");  } else {    System.out.println(blockData + " (Key " + access.getKey()+ ": "+ key+ ")");    boolean written=false;    try {      byte[] data=hexStringToBytes(dataString);      MfBlock block=BlockResolver.resolveBlock(MemoryLayout.CLASSIC_1K,sectorId,blockId,data);      written=writeMifareClassic1KBlock(reader,access,block);    } catch (    MfException me) {      System.out.println(me.getMessage());    }    if (written) {      blockData=readMifareClassic1KBlock(reader,access);      System.out.print("New block data: ");      if (blockData == null) {        System.out.println("<Failed to read block>");      } else {        System.out.println(blockData + " (Key " + access.getKey()+ ": "+ key+ ")");      }    }  }}  }
class C{  public GlobalRosterEntryComboBox(String roadName,String roadNumber,String dccAddress,String mfg,String decoderMfgID,String decoderVersionID,String id){  super(Roster.getDefault(),Roster.ALLENTRIES,roadName,roadNumber,dccAddress,mfg,decoderMfgID,decoderVersionID,id);}  }
class C{  public boolean is(String cssSelectors){  for (  Node node : nodes) {    Node parentNode=node.getParentNode();    if (parentNode == null) {      continue;    }    NodeSelector nodeSelector=createNodeSelector(parentNode);    List<Node> selectedNodes=nodeSelector.select(cssSelectors);    for (    Node selected : selectedNodes) {      if (node == selected) {        return true;      }    }  }  return false;}  }
class C{  private StandardGlyphVector(GlyphVector gv,FontRenderContext frc){  this.font=gv.getFont();  this.frc=frc;  initFontData();  int nGlyphs=gv.getNumGlyphs();  this.userGlyphs=gv.getGlyphCodes(0,nGlyphs,null);  if (gv instanceof StandardGlyphVector) {    this.glyphs=userGlyphs;  } else {    this.glyphs=getValidatedGlyphs(this.userGlyphs);  }  this.flags=gv.getLayoutFlags() & FLAG_MASK;  if ((flags & FLAG_HAS_POSITION_ADJUSTMENTS) != 0) {    this.positions=gv.getGlyphPositions(0,nGlyphs + 1,null);  }  if ((flags & FLAG_COMPLEX_GLYPHS) != 0) {    this.charIndices=gv.getGlyphCharIndices(0,nGlyphs,null);  }  if ((flags & FLAG_HAS_TRANSFORMS) != 0) {    AffineTransform[] txs=new AffineTransform[nGlyphs];    for (int i=0; i < nGlyphs; ++i) {      txs[i]=gv.getGlyphTransform(i);    }    setGlyphTransforms(txs);  }}  }
class C{  public void trapFieldWrite(String name,Object value){  Class jc=getClassMetaobject().getJavaClass();  try {    jc.getField(name).set(getObject(),value);  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e.toString());  }catch (  IllegalAccessException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.198 -0500",hash_original_method="A1BEE89A791B5892C0419D31229063CC",hash_generated_method="EB9B16E8EFD92A7622854E0DAA174898") public Region(Rect r){  addTaintLocal(r.getTaintInt());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.EXPORT_SPECIFIER__ELEMENT:    return element != null;case N4JSPackage.EXPORT_SPECIFIER__ALIAS:  return ALIAS_EDEFAULT == null ? alias != null : !ALIAS_EDEFAULT.equals(alias);}return super.eIsSet(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.229 -0500",hash_original_method="A059B8FD47D8FC83321E2DEF4CB18490",hash_generated_method="611D9F064A8B84D209095D30B8CFDDB5") public ProxyRequireHeader createProxyRequireHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("bad optionTag arg");  ProxyRequire p=new ProxyRequire();  p.setOptionTag(optionTag);  return p;}  }
class C{  public boolean hasTransaction(){  return (this.transactionStatus != null);}  }
class C{  @Override public void messageArrived(String topic,MqttMessage message) throws Exception {  service.traceDebug(TAG,"messageArrived(" + topic + ",{"+ message.toString()+ "})");  String messageId=service.messageStore.storeArrived(clientHandle,topic,message);  Bundle resultBundle=messageToBundle(messageId,topic,message);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.MESSAGE_ARRIVED_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_MESSAGE_ID,messageId);  service.callbackToActivity(clientHandle,Status.OK,resultBundle);}  }
class C{  public Acos(){  super(Number.class,Number.class);}  }
class C{  public void writeUnsafeTo(final PacketOutputStream os) throws IOException {  throw new IOException("Cannot use unsafe with Stream");}  }
class C{  public boolean hasLanguages(){  return hasRepeatingExtension(Language.class);}  }
class C{  private static boolean doesNewVpoolContainsVolumePool(URI volumePool,VirtualPool vPool){  boolean vPoolHasVolumePool=false;  if (volumePool != null && vPool != null) {    StringSet poolsToCheck=vPool.getUseMatchedPools() ? vPool.getMatchedStoragePools() : vPool.getAssignedStoragePools();    if (poolsToCheck != null && poolsToCheck.contains(volumePool.toString())) {      vPoolHasVolumePool=true;    }  }  return vPoolHasVolumePool;}  }
class C{  public DfuServiceController start(final Context context,final Class<? extends DfuBaseService> service){  if (fileType == -1)   throw new UnsupportedOperationException("You must specify the firmware file before starting the service");  final Intent intent=new Intent(context,service);  intent.putExtra(DfuBaseService.EXTRA_DEVICE_ADDRESS,deviceAddress);  intent.putExtra(DfuBaseService.EXTRA_DEVICE_NAME,deviceName);  intent.putExtra(DfuBaseService.EXTRA_DISABLE_NOTIFICATION,disableNotification);  intent.putExtra(DfuBaseService.EXTRA_FILE_MIME_TYPE,mimeType);  intent.putExtra(DfuBaseService.EXTRA_FILE_TYPE,fileType);  intent.putExtra(DfuBaseService.EXTRA_FILE_URI,fileUri);  intent.putExtra(DfuBaseService.EXTRA_FILE_PATH,filePath);  intent.putExtra(DfuBaseService.EXTRA_FILE_RES_ID,fileResId);  intent.putExtra(DfuBaseService.EXTRA_INIT_FILE_URI,initFileUri);  intent.putExtra(DfuBaseService.EXTRA_INIT_FILE_PATH,initFilePath);  intent.putExtra(DfuBaseService.EXTRA_INIT_FILE_RES_ID,initFileResId);  intent.putExtra(DfuBaseService.EXTRA_KEEP_BOND,keepBond);  intent.putExtra(DfuBaseService.EXTRA_FORCE_DFU,forceDfu);  if (packetReceiptNotificationsEnabled != null) {    intent.putExtra(DfuBaseService.EXTRA_PACKET_RECEIPT_NOTIFICATIONS_ENABLED,packetReceiptNotificationsEnabled);    intent.putExtra(DfuBaseService.EXTRA_PACKET_RECEIPT_NOTIFICATIONS_VALUE,numberOfPackets);  } else {  }  context.startService(intent);  return new DfuServiceController(context);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  GlobalAnnotations other=(GlobalAnnotations)obj;  if (lex == null) {    if (other.lex != null)     return false;  } else   if (!lex.equals(other.lex))   return false;  if (timestamp != other.timestamp)   return false;  return true;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (estados.length == 0)   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.SOLICITUDES_ESTADOS_CONSULTA,request.getLocale())));  if (!new CustomDate(this.fechaFinFormatoEntrega,this.fechaAEntrega,this.fechaMEntrega,this.fechaDEntrega,this.fechaSEntrega).validate() || !new CustomDate(this.fechaIniFormatoEntrega,this.fechaIniAEntrega,this.fechaIniMEntrega,this.fechaIniDEntrega,this.fechaIniSEntrega).validate() || !new CustomDate(this.fechaFinFormatoEntrega,this.fechaFinAEntrega,this.fechaFinMEntrega,this.fechaFinDEntrega,this.fechaFinSEntrega).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(ConsultasConstants.BUSQUEDA_CONSULTAS_FECHA_ENTREGA,request.getLocale())));  }  return errors;}  }
class C{  public T update(T object){  return getEntityManager().merge(object);}  }
class C{  private void actionOK(){  if (chkCreateNew.isChecked()) {    ListItem listitem=lstWarehouse.getSelectedItem();    KeyNamePair pp=(KeyNamePair)listitem.getValue();    if (pp != null)     getWarehouseInfo(pp.getKey());    String mandatoryFields="";    if (m_M_Warehouse_ID == 0)     mandatoryFields+=lblWarehouse.getValue() + " - ";    if (txtKey.getText().length() == 0)     mandatoryFields+=lblKey.getValue() + " - ";    if (txtAisleX.getText().length() == 0)     mandatoryFields+=lblAisleX.getValue() + " - ";    if (txtBinY.getText().length() == 0)     mandatoryFields+=lblBinY.getValue() + " - ";    if (txtLevelZ.getText().length() == 0)     mandatoryFields+=lblLevelZ.getValue() + " - ";    if (mandatoryFields.length() != 0) {      FDialog.error(m_WindowNo,this,"FillMandatory",mandatoryFields.substring(0,mandatoryFields.length() - 3));      return;    }    MLocator loc=MLocator.get(Env.getCtx(),m_M_Warehouse_ID,txtKey.getText(),txtAisleX.getText(),txtBinY.getText(),txtLevelZ.getText());    m_M_Locator_ID=loc.getM_Locator_ID();    listitem=new ListItem();    listitem.setValue(loc);    lstLocator.appendItem(loc.get_TableName(),loc);    lstLocator.setSelectedIndex(lstLocator.getItemCount() - 1);  }  log.config("M_Locator_ID=" + m_M_Locator_ID);}  }
class C{  private BasicInformation(){}  }
class C{  public static <T>Iterator<T> eachWithIndex(Iterator<T> self,@ClosureParams(value=FromString.class,options="T,java.lang.Integer") Closure closure){  final Object[] args=new Object[2];  int counter=0;  while (self.hasNext()) {    args[0]=self.next();    args[1]=counter++;    closure.call(args);  }  return self;}  }
class C{  public static void checkInputValueType(String name,Object value){  if (name == null) {    throw new MLContextException("No input name supplied");  } else   if (value == null) {    throw new MLContextException("No input value supplied");  }  Object o=value;  boolean supported=false;  for (  Class<?> clazz : ALL_SUPPORTED_DATA_TYPES) {    if (o.getClass().equals(clazz)) {      supported=true;      break;    } else     if (clazz.isAssignableFrom(o.getClass())) {      supported=true;      break;    }  }  if (!supported) {    throw new MLContextException("Input name (\"" + value + "\") value type not supported: "+ o.getClass());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:25.729 -0500",hash_original_method="5457B6ADA9169BEDA2429E8007C22AEC",hash_generated_method="CD65ECE60001EF2C88E3D007B6B65249") public Base64OutputStream(OutputStream out,int flags,boolean encode){  super(out);  this.flags=flags;  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }}  }
class C{  public static MPrintFormat copy(Properties ctx,int from_AD_PrintFormat_ID,int to_AD_PrintFormat_ID){  return copy(ctx,from_AD_PrintFormat_ID,to_AD_PrintFormat_ID,-1);}  }
class C{  private void clearList(){  ListView listView=(ListView)findViewById(R.id.recordListView);  listView.setAdapter(null);  listView.setVisibility(View.VISIBLE);}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  @Override public boolean start(){  if (!_lifecycle.toStarting()) {    return false;  }  log.isLoggable(Level.FINER);  String name="resin-nio-select-manager-" + _gId++;  _thread=new Thread(this,name);  _thread.setDaemon(true);  _thread.start();  _lifecycle.waitForActive(2000);  if (log.isLoggable(Level.FINER))   log.finer(this + " active");  log.fine("Non-blocking keepalive enabled with max sockets = " + _selectMax);  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void applyDecidedIconOrSetGone(ImageHolder imageHolder,ImageView imageView,int iconColor,boolean tint){  if (imageHolder != null && imageView != null) {    Drawable drawable=ImageHolder.decideIcon(imageHolder,imageView.getContext(),iconColor,tint);    if (drawable != null) {      imageView.setImageDrawable(drawable);      imageView.setVisibility(View.VISIBLE);    } else     if (imageHolder.getBitmap() != null) {      imageView.setImageBitmap(imageHolder.getBitmap());      imageView.setVisibility(View.VISIBLE);    } else {      imageView.setVisibility(View.GONE);    }  } else   if (imageView != null) {    imageView.setVisibility(View.GONE);  }}  }
class C{  public List findMultipleTermsInRectangle(final int x1,final int y1,final int x2,final int y2,final int rotation,final String[] terms,final boolean orderResults,final int searchType,final SearchListener listener) throws PdfException {  usingMultipleTerms=true;  multipleTermTeasers.clear();  teasers=null;  final List<Object> highlights=findMultipleTermsInRectangle(x1,y1,x2,y2,terms,searchType,listener);  if (orderResults) {    Collections.sort(highlights,new ResultsComparator(rotation));  }  usingMultipleTerms=false;  return highlights;}  }
class C{  @Ignore("TODO: disabled for unknown reason") @Test public void testExceptionInPutForSequenceViolationWithoutGII(){  DistributedSystem ds=cache.getDistributedSystem();  cache.close();  ds.disconnect();  Properties props=new Properties();  props.put(LOG_LEVEL,"config");  try {    cache=CacheFactory.create(DistributedSystem.connect(props));  } catch (  Exception e1) {    throw new AssertionError("Test failed because of exception. Exception=",e1);  }  HARegionQueue rq=null;  try {    rq=HARegionQueue.getHARegionQueueInstance("testException",cache,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  } catch (  Exception e) {    throw new AssertionError("Test failed because of exception. Exception=",e);  }  ConflatableObject cf1=new ConflatableObject("key1","val1",new EventID(new byte[]{1},1,2),false,"test");  ConflatableObject cf2=new ConflatableObject("key1","val1",new EventID(new byte[]{1},1,1),false,"test");  try {    rq.put(cf1);  } catch (  Exception e) {    throw new AssertionError("Test failed because of exception. Exception=",e);  }  try {    rq.put(cf2);    fail("Test failed because asertion error was expected but there was'nt any");  } catch (  AssertionError ignore) {    System.out.println("Got the right assertion failure");  }catch (  Exception e) {    e.printStackTrace();    throw new AssertionError("Test failed because of exception. Exception=",e);  }}  }
class C{  public EndpointMatrixGraph(){  this.nodes=new ArrayList<>();}  }
class C{  private void updateTitle(Class<? extends ISensorConfig> sensorConfigClass){  String titleText=TextFormatter.getSensorConfigName(sensorConfigClass);  Image titleImage=ImageFormatter.getSensorConfigImage(sensorConfigClass);  title.setText("<form><p> <img href=\"titleImage\"/> <span color=\"header\" font=\"header\">" + titleText + "</span></p></form>",true,false);  title.setImage("titleImage",titleImage);}  }
class C{  public long create_video_media_header_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  if ((size - readed) == 8) {    graphicsMode=(int)bitstream.readBytes(2);    opColorRed=(int)bitstream.readBytes(2);    opColorGreen=(int)bitstream.readBytes(2);    opColorBlue=(int)bitstream.readBytes(2);    readed+=8;  }  return readed;}  }
class C{  public IIndex findIndex(String name,boolean caseSensitive){  for (int idx=0; idx < getIndexCount(); idx++) {    IIndex index=getIndex(idx);    if (caseSensitive) {      if (index.getName().equals(name)) {        return index;      }    } else {      if (index.getName().equalsIgnoreCase(name)) {        return index;      }    }  }  return null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getModel();}  }
class C{  public synchronized void registerSinglePointChannel(WorkerCategory category,WrappedResponse response){  singlePointChannels.put(category,response);}  }
class C{  public CeylonRepoManagerBuilder logger(Logger logger){  this.log=logger;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().volumeUp();  return null;}  }
class C{  public static void openEditor(final TFSServer server,final int workItemID){  final Shell shell=ShellUtils.getWorkbenchShell();  final WorkItemClient workItemClient=server.getConnection().getWorkItemClient();  final GetWorkItemByIDCommand command=new GetWorkItemByIDCommand(workItemClient,workItemID);  final ICommandExecutor executor=UICommandExecutorFactory.newUICommandExecutor(shell);  final IStatus status=executor.execute(command);  if (!status.isOK()) {    return;  }  final WorkItem workItem=command.getWorkItem();  if (workItem == null) {    WorkItemHelpers.showWorkItemDoesNotExistError(shell,workItemID);    return;  }  WorkItemEditorHelper.openEditor(server,workItem);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRecurring[").append(get_ID()).append("-").append(getName());  if (getRecurringType().equals(MRecurring.RECURRINGTYPE_Order))   sb.append(",C_Order_ID=").append(getC_Order_ID()); else   if (getRecurringType().equals(MRecurring.RECURRINGTYPE_Invoice))   sb.append(",C_Invoice_ID=").append(getC_Invoice_ID()); else   if (getRecurringType().equals(MRecurring.RECURRINGTYPE_Project))   sb.append(",C_Project_ID=").append(getC_Project_ID()); else   if (getRecurringType().equals(MRecurring.RECURRINGTYPE_GLJournal))   sb.append(",GL_JournalBatch_ID=").append(getGL_JournalBatch_ID());  sb.append(",Frequency=").append(getFrequencyType()).append("*").append(getFrequency());  sb.append("]");  return sb.toString();}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  protected static <K,T>void groupAnswer(final Map<K,List<T>> answer,T element,K value){  if (answer.containsKey(value)) {    answer.get(value).add(element);  } else {    List<T> groupedElements=new ArrayList<T>();    groupedElements.add(element);    answer.put(value,groupedElements);  }}  }
class C{  public TupleComparator(String field,Class type,boolean ascend){  this(field,type,ascend,DefaultLiteralComparator.getInstance());}  }
class C{  private void scan(HilbertFeatures hf,int k0){  final int mink0=Math.min(2 * k0,capital_n - 1);  if (LOG.isDebuggingFine()) {    LOG.debugFine("Scanning with k0=" + k0 + " ("+ mink0+ ")"+ " N*="+ capital_n_star);  }  for (int i=0; i < hf.pf.length; i++) {    if (hf.pf[i].ubound < omega_star) {      continue;    }    if (hf.pf[i].lbound < hf.pf[i].ubound) {      double omega=hf.fastUpperBound(i);      if (omega < omega_star) {        hf.pf[i].ubound=omega;      } else {        int maxcount;        if (hf.top.contains(hf.pf[i])) {          maxcount=capital_n - 1;        } else {          maxcount=mink0;        }        innerScan(hf,i,maxcount);      }    }    if (hf.pf[i].ubound > 0) {      hf.updateOUT(i);    }    if (hf.pf[i].lbound > 0) {      hf.updateWLB(i);    }    if (hf.wlb.size() >= n) {      omega_star=Math.max(omega_star,hf.wlb.peek().lbound);    }  }}  }
class C{  public static FixedByteArrayBuffer wrap(final byte[] array){  return new FixedByteArrayBuffer(array,0,array.length);}  }
class C{  public TomcatServiceException(){}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    int currentA=Integer.parseInt(argv[0]);    int maxA=currentA;    int currentB=Integer.parseInt(argv[1]);    int maxB=currentB;    for (int i=2; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      if (currentA > maxA) {        maxA=currentA;      }      if (currentB > maxB) {        maxB=currentB;      }    }    DNConditionalEstimator newEst=new DNConditionalEstimator(maxA + 1,1);    for (int i=0; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      System.out.println(newEst);      System.out.println("Prediction for " + currentA + '|'+ currentB+ " = "+ newEst.getProbability(currentA,currentB));      newEst.addValue(currentA,currentB,1);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  public void addState(TLCState state,boolean stateSortDirection){  if (stateSortDirection) {    states.addFirst(state);  } else {    states.add(state);  }}  }
class C{  private boolean isNumberAndPunctuation(String string){  int length=string.length();  for (int i=0; i < length; ++i) {    char c=string.charAt(i);    if (!(Character.isDigit(c) || Characters.isPunctuation(c))) {      return false;    }  }  return true;}  }
class C{  public KMLPoint(String namespaceURI){  super(namespaceURI);}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_04(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer[] bbAN={ByteBuffer.allocate(100),null,ByteBuffer.allocate(100)};  ByteBuffer[] bbN=null;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer bN=null;  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bN,bbA,0,3);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bb,bbAN,0,3);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bb,bbN,0,0);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bN,bbN,0,0);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  private void dragEntity(boolean isShiftKeyDown,GridElement mainElement){  DESELECT_MULTISEL=false;  Point newp=getNewCoordinate();  Point oldp=getOldCoordinate();  int diffx=newp.x - oldp.x;  int diffy=newp.y - oldp.y;  List<GridElement> elementsToMove=selector.getSelectedElements();  if (!resizeDirections.isEmpty()) {    elementsToMove=Arrays.asList(mainElement);  }  if (FIRST_MOVE_COMMANDS == null) {    POINT_BEFORE_MOVE=mousePressedPoint;    FIRST_MOVE_COMMANDS=calculateFirstMoveCommands(diffx,diffy,POINT_BEFORE_MOVE,elementsToMove,isShiftKeyDown,false,handler,resizeDirections);  } else   if (diffx != 0 || diffy != 0) {    Vector<Command> commands=continueDragging(diffx,diffy,POINT_BEFORE_MOVE,elementsToMove);    POINT_BEFORE_MOVE=new Point(POINT_BEFORE_MOVE.getX() + diffx,POINT_BEFORE_MOVE.getY() + diffy);    controller.executeCommand(new Macro(commands));    FIRST_DRAG=false;  }}  }
class C{  public Period(long startInstant,long endInstant,PeriodType type){  super(startInstant,endInstant,type,null);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesPm == null) {    throw new NullPointerException();  }  if (nodes == null) {    throw new NullPointerException();  }  if (parents == null) {    throw new NullPointerException();  }  if (parentDims == null) {    throw new NullPointerException();  }  if (probs == null) {    throw new NullPointerException();  }}  }
class C{  public Builder parallax(@FloatRange(from=0f,to=1f) float parallax){  mParallax=parallax;  return this;}  }
class C{  public static boolean readInstallPolicy(File policyFile){  return readInstallPolicy(new File[]{policyFile,null});}  }
class C{  public HttpDelete(String path,ParameterMap params){  super(path,params);  this.httpMethod=HttpMethod.DELETE;}  }
class C{  synchronized boolean isPrimaryHostIndex(int hostIndex){  return hostIndex == this.primaryHostIndex;}  }
class C{  @PreDestroy synchronized protected void flushCache(){  if (caching == null || caching.isEmpty()) {    return;  }  lastCacheTime=null;  logRepository.save(caching);  Map<String,Map<String,Object>> hours=new HashMap<>();  for (  Log log : caching) {    Calendar cal=Calendar.getInstance();    cal.setTime(new Date(log.getLoggingEvent().getTimeStamp()));    String key=log.getRabbitId() + "/" + log.getLoggingEventDateInt()+ "/"+ cal.get(Calendar.HOUR_OF_DAY);    Map<String,Object> hour;    if (hours.containsKey(key)) {      hour=hours.get(key);    } else {      hour=new HashMap<>();      hour.put("rabbitId",log.getRabbitId());      hour.put("dateInt",log.getLoggingEventDateInt());      hour.put("year",cal.get(Calendar.YEAR));      hour.put("month",cal.get(Calendar.MONTH) + 1);      hour.put("day",cal.get(Calendar.DAY_OF_MONTH));      hour.put("hour",cal.get(Calendar.HOUR_OF_DAY));      hours.put(key,hour);    }    String levelKey="level_" + log.getLoggingEvent().getLevel();    if (hour.containsKey(levelKey)) {      hour.put(levelKey,(Integer)hour.get(levelKey) + 1);      hour.put(levelKey,(Integer)hour.get(levelKey) + 1);    } else {      hour.put(levelKey,1);    }    eventStreamCentral.input(log);    webSocketMessagingService.sendReportToConsole(log);  }  for (  Map<String,Object> hour : hours.values()) {    logLevelDailyStatisticsRepository.insertStatistic(hour);    logLevelHourlyStatisticsRepository.insertStatistic(hour);    for (    Map.Entry<String,Object> entry : hour.entrySet()) {      if (entry.getKey().startsWith("level_")) {        String level=entry.getKey().replaceAll("level_","");        rabbitCache.updateDailyStatistics((String)hour.get("rabbitId"),level,(Integer)hour.get("dateInt"),(Integer)entry.getValue());      }    }  }  caching.clear();}  }
class C{  protected void onDismiss(){}  }
class C{  public static boolean isOFBGiftCard(String stPassed){  if (isEmpty(stPassed))   return defaultEmptyOK;  String st=stripCharsInBag(stPassed,creditCardDelimiters);  if (st.length() == 15 && sumIsMod10(getLuhnSum(st))) {    return true;  }  return false;}  }
class C{  public final double determinant(){  double total;  total=this.m00 * (this.m11 * this.m22 - this.m12 * this.m21) + this.m01 * (this.m12 * this.m20 - this.m10 * this.m22) + this.m02 * (this.m10 * this.m21 - this.m11 * this.m20);  return total;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  final protected int withinByteIndexForBit(final long bitIndex){  return (int)((bitIndex + off) % 8);}  }
class C{  public static boolean show(String title,String text,int type,Image icon,String okText,String cancelText,long timeout){  Command[] cmds;  Command okCommand=new Command(okText);  if (cancelText != null) {    cmds=new Command[]{new Command(cancelText),okCommand};  } else {    cmds=new Command[]{okCommand};  }  return show(title,text,okCommand,cmds,type,icon,timeout) == okCommand;}  }
class C{  public double computeAverageJointEntropy(){  double entropy=0.0;  for (int b=0; b < totalObservations; b++) {    double prob=mvkeForEachDiscrete[discObservations[b]].getProbability(contObservations[b]) * (double)discCounts[discObservations[b]] / (double)totalObservations;    double cont=0.0;    if (prob > 0.0) {      cont=-Math.log(prob);    }    entropy+=cont;    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ cont / Math.log(2.0) + " -> sum: " + (entropy / Math.log(2.0)));    }  }  return entropy / (double)totalObservations / Math.log(2.0);}  }
class C{  public Vertex details(Vertex source,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  return discover(true,false,null,vertex,vertex2,vertex3,vertex4,vertex5);}  }
class C{  public final static double correlation(double y1[],double y2[],int n){  int i;  double av1=0.0, av2=0.0, y11=0.0, y22=0.0, y12=0.0, c;  if (n <= 1) {    return 1.0;  }  for (i=0; i < n; i++) {    av1+=y1[i];    av2+=y2[i];  }  av1/=(double)n;  av2/=(double)n;  for (i=0; i < n; i++) {    y11+=(y1[i] - av1) * (y1[i] - av1);    y22+=(y2[i] - av2) * (y2[i] - av2);    y12+=(y1[i] - av1) * (y2[i] - av2);  }  if (y11 * y22 == 0.0) {    c=1.0;  } else {    c=y12 / Math.sqrt(Math.abs(y11 * y22));  }  return c;}  }
class C{  public List<String> hostVcenterUnassignDeclineDetails(URI hostId){  Host host=_dbClient.queryObject(Host.class,hostId);  return Lists.newArrayList(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostVcenterUnassignDeclineDetails",host.getLabel()));}  }
class C{  public void testUtf8Encoding() throws Exception {  Properties props=new Properties();  props.put("characterEncoding","UTF8");  props.put("useUnicode","true");  props.put("jdbcCompliantTruncation","false");  Connection utfConn=DriverManager.getConnection(dbUrl,props);  testConversionForString("UTF8",utfConn,"\u043c\u0438\u0445\u0438");}  }
class C{  public static void createTopLevelClassesXML(String outputDir,String templatesPath,boolean lenient) throws CompilerException {  try {    AsDocHelper asDocHelp=new AsDocHelper(outputDir + "toplevel.xml",outputDir + "tempdita",outputDir,outputDir + "tempdita" + File.separator+ "ASDoc_Config.xml");    asDocHelp.createTopLevelClasses(lenient);  } catch (  Throwable t) {    t.printStackTrace();    CompilerMessage c=new CouldNotCreate("toplevel.xml",t.getMessage());    ThreadLocalToolkit.log(c);    throw c;  }}  }
class C{  public final void chopMap(){  if (mapChopped) {    return;  }  mapChopped=true;  if (this.map == null) {    for (int index=0; index < len; index++) {      MapItemValue entry=(MapItemValue)items[index];      Value value=entry.getValue();      if (value == null)       continue;      if (value.isContainer()) {        chopContainer(value);      } else {        value.chop();      }    }  } else {    for (    Map.Entry<String,Object> entry : map.entrySet()) {      Object object=entry.getValue();      if (object instanceof Value) {        Value value=(Value)object;        if (value.isContainer()) {          chopContainer(value);        } else {          value.chop();        }      } else       if (object instanceof LazyValueMap) {        LazyValueMap m=(LazyValueMap)object;        m.chopMap();      } else       if (object instanceof ValueList) {        ValueList list=(ValueList)object;        list.chopList();      }    }  }}  }
class C{  public RailRoadStation(){  super();}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public int showDialog(){  m_Result=CANCEL_OPTION;  setVisible(true);  setButtons();  return m_Result;}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Document";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("Guid",guid);  bdr.addSimpleElement("Content",content.toString());  bdr.addSimpleElement("Hash",hash);  bdr.addSimpleElement("Extension",extension);  bdr.addSimpleElement("Timestamp",timestamp.toString());  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  public ApiException(int code,Exception originalException){  super(originalException);  this.code=code;}  }
class C{  public static Date parseDate(String dateValue,String[] dateFormats,Date startDate) throws DateParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  for (  String dateFormat : dateFormats) {    SimpleDateFormat dateParser=DateFormatHolder.formatFor(dateFormat);    dateParser.set2DigitYearStart(startDate);    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new DateParseException("Unable to parse the date " + dateValue);}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public double variance(double totalWeight,double totalPositiveWeight,Hypothesis hypo){  double p0;  if (hypo.getPrediction() == Hypothesis.POSITIVE_CLASS) {    p0=this.priors[Hypothesis.POSITIVE_CLASS];  } else {    p0=this.priors[Hypothesis.NEGATIVE_CLASS];  }  double mean=this.utility(totalWeight,totalPositiveWeight,hypo);  double innerTerm=hypo.getPositiveWeight() * Math.pow(1.0 - p0 - mean,2) + (hypo.getCoveredWeight() - hypo.getPositiveWeight()) * Math.pow(0.0 - p0 - mean,2) + (totalWeight - hypo.getCoveredWeight()) * Math.pow(0.0 - mean,2);  return Math.sqrt(innerTerm) / totalWeight;}  }
class C{  protected void loadSlots(){  for (int i=0; i < NUM_SLOTS; i++) {    _slots[i]=new UhlenbrockSlot(i);  }}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  @Override protected void processComponent(final Object component){  injectFields(component);  if (component instanceof Initiated) {    try {      ((Initiated)component).initiate();    } catch (    final Exception exception) {      throw new RuntimeException("Unable to initiate component: " + component,exception);    }  }  if (component instanceof Destructible) {    destructibles.add((Destructible)component);  }}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  private void release(WNode h){  if (h != null) {    WNode q;    Thread w;    U.compareAndSwapInt(h,WSTATUS,WAITING,0);    if ((q=h.next) == null || q.status == CANCELLED) {      for (WNode t=wtail; t != null && t != h; t=t.prev)       if (t.status <= 0)       q=t;    }    if (q != null && (w=q.thread) != null)     U.unpark(w);  }}  }
class C{  public void updateShineBounds(Rect insetsScreen,int canvasWidth,int canvasHeight){  mShineRectBounds=new Rect();  mShineRectBounds.set(-insetsScreen.top,-insetsScreen.left,canvasWidth,canvasHeight);}  }
class C{  public void init(int size,int columns,OnColorSelectedListener listener){  mNumColumns=columns;  Resources res=getResources();  if (size == ColorPickerDialog.SIZE_LARGE) {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_large);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_large);  } else {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_small);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_small);  }  mOnColorSelectedListener=listener;  mDescription=res.getString(R.string.color_swatch_description);  mDescriptionSelected=res.getString(R.string.color_swatch_description_selected);}  }
class C{  @Override public boolean showVertexLabelsDefault(){  return false;}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  setFileExtension(".csv");}  }
class C{  public void clearListener(){  mListener=null;}  }
class C{  public CharSequence loadLabel(PackageManager pm){  if (nonLocalizedLabel != null) {    return nonLocalizedLabel;  }  CharSequence label;  if (resolvePackageName != null && labelRes != 0) {    label=pm.getText(resolvePackageName,labelRes,null);    if (label != null) {      return label.toString().trim();    }  }  ComponentInfo ci=activityInfo != null ? activityInfo : serviceInfo;  ApplicationInfo ai=ci.applicationInfo;  if (labelRes != 0) {    label=pm.getText(ci.packageName,labelRes,ai);    if (label != null) {      return label.toString().trim();    }  }  CharSequence data=ci.loadLabel(pm);  if (data != null)   data=data.toString().trim();  return data;}  }
class C{  public OpenHashSet(int capacity){  this(capacity,0.75f);}  }
class C{  public CUDA_MEMCPY2D(){}  }
class C{  public static Drawable resToDrawable(Context context,int resId){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    return context.getDrawable(resId);  }  return context.getResources().getDrawable(resId);}  }
class C{  @Override public void populateDAG(DAG dag,Configuration conf){  LineReader lineReader=dag.addOperator("lineReader",new LineReader());  WordReader wordReader=dag.addOperator("wordReader",new WordReader());  WindowWordCount windowWordCount=dag.addOperator("windowWordCount",new WindowWordCount());  FileWordCount fileWordCount=dag.addOperator("fileWordCount",new FileWordCount());  WordCountWriter wcWriter=dag.addOperator("wcWriter",new WordCountWriter());  ConsoleOutputOperator console=dag.addOperator("console",new ConsoleOutputOperator());  console.setStringFormat("wordCount: %s");  dag.addStream("lines",lineReader.output,wordReader.input);  dag.addStream("control",lineReader.control,fileWordCount.control);  dag.addStream("words",wordReader.output,windowWordCount.input);  dag.addStream("windowWordCounts",windowWordCount.output,fileWordCount.input);  dag.addStream("fileWordCounts",fileWordCount.fileOutput,wcWriter.input);  String gatewayAddress=dag.getValue(DAG.GATEWAY_CONNECT_ADDRESS);  if (!StringUtils.isEmpty(gatewayAddress)) {    URI uri=URI.create("ws://" + gatewayAddress + "/pubsub");    AppDataSnapshotServerMap snapshotServerFile=dag.addOperator("snapshotServerFile",new AppDataSnapshotServerMap());    AppDataSnapshotServerMap snapshotServerGlobal=dag.addOperator("snapshotServerGlobal",new AppDataSnapshotServerMap());    String snapshotServerJSON=SchemaUtils.jarResourceFileToString(SNAPSHOT_SCHEMA);    snapshotServerFile.setSnapshotSchemaJSON(snapshotServerJSON);    snapshotServerGlobal.setSnapshotSchemaJSON(snapshotServerJSON);    PubSubWebSocketAppDataQuery wsQueryFile=new PubSubWebSocketAppDataQuery();    PubSubWebSocketAppDataQuery wsQueryGlobal=new PubSubWebSocketAppDataQuery();    wsQueryFile.setUri(uri);    wsQueryGlobal.setUri(uri);    snapshotServerFile.setEmbeddableQueryInfoProvider(wsQueryFile);    snapshotServerGlobal.setEmbeddableQueryInfoProvider(wsQueryGlobal);    PubSubWebSocketAppDataResult wsResultFile=dag.addOperator("wsResultFile",new PubSubWebSocketAppDataResult());    PubSubWebSocketAppDataResult wsResultGlobal=dag.addOperator("wsResultGlobal",new PubSubWebSocketAppDataResult());    wsResultFile.setUri(uri);    wsResultGlobal.setUri(uri);    Operator.InputPort<String> queryResultFilePort=wsResultFile.input;    Operator.InputPort<String> queryResultGlobalPort=wsResultGlobal.input;    dag.addStream("WordCountsFile",fileWordCount.outputPerFile,snapshotServerFile.input,console.input);    dag.addStream("WordCountsGlobal",fileWordCount.outputGlobal,snapshotServerGlobal.input);    dag.addStream("ResultFile",snapshotServerFile.queryResult,queryResultFilePort);    dag.addStream("ResultGlobal",snapshotServerGlobal.queryResult,queryResultGlobalPort);  } else {    dag.addStream("WordCounts",fileWordCount.outputPerFile,console.input);  }  LOG.info("done with populateDAG, isDebugEnabled = " + LOG.isDebugEnabled());  LOG.info("Returning from populateDAG");}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  protected void configDeleteColumn(JTable table){  JComboBox<String> editCombo=new JComboBox<String>();  editCombo.addItem(Bundle.getMessage("ButtonSelect"));  editCombo.addItem(Bundle.getMessage("ButtonEdit"));  editCombo.addItem(Bundle.getMessage("ButtonCopy"));  editCombo.addItem(Bundle.getMessage("ButtonDelete"));  TableColumn col=table.getColumnModel().getColumn(BeanTableDataModel.DELETECOL);  col.setCellEditor(new DefaultCellEditor(editCombo));}  }
class C{  @Override protected CommandLine createCommandLine(BuilderConfiguration config) throws BuilderException {  final CommandLine commandLine=new CommandLine("bower");  commandLine.add(config.getTargets());  commandLine.add("--config.interactive=false");  return commandLine;}  }
class C{  private BigIntPolynomial multRecursive(BigIntPolynomial poly2){  BigInteger[] a=coeffs;  BigInteger[] b=poly2.coeffs;  int n=poly2.coeffs.length;  if (n <= 1) {    BigInteger[] c=Arrays.clone(coeffs);    for (int i=0; i < coeffs.length; i++) {      c[i]=c[i].multiply(poly2.coeffs[0]);    }    return new BigIntPolynomial(c);  } else {    int n1=n / 2;    BigIntPolynomial a1=new BigIntPolynomial(Arrays.copyOf(a,n1));    BigIntPolynomial a2=new BigIntPolynomial(Arrays.copyOfRange(a,n1,n));    BigIntPolynomial b1=new BigIntPolynomial(Arrays.copyOf(b,n1));    BigIntPolynomial b2=new BigIntPolynomial(Arrays.copyOfRange(b,n1,n));    BigIntPolynomial A=(BigIntPolynomial)a1.clone();    A.add(a2);    BigIntPolynomial B=(BigIntPolynomial)b1.clone();    B.add(b2);    BigIntPolynomial c1=a1.multRecursive(b1);    BigIntPolynomial c2=a2.multRecursive(b2);    BigIntPolynomial c3=A.multRecursive(B);    c3.sub(c1);    c3.sub(c2);    BigIntPolynomial c=new BigIntPolynomial(2 * n - 1);    for (int i=0; i < c1.coeffs.length; i++) {      c.coeffs[i]=c1.coeffs[i];    }    for (int i=0; i < c3.coeffs.length; i++) {      c.coeffs[n1 + i]=c.coeffs[n1 + i].add(c3.coeffs[i]);    }    for (int i=0; i < c2.coeffs.length; i++) {      c.coeffs[2 * n1 + i]=c.coeffs[2 * n1 + i].add(c2.coeffs[i]);    }    return c;  }}  }
class C{  public static String makeCompliantName(String value){  value=value.replace(':','-');  value=value.replace(',','-');  value=value.replace('=','-');  value=value.replace('*','-');  value=value.replace('?','-');  if (value.length() < 1) {    value="nothing";  }  return value;}  }
class C{  public void catchEvent(NetMapEvent nme){  if (DEBUG) {    Debug.output(nme.getProperties().toString());  }  processEventProperties(nme.getProperties());}  }
class C{  public static Scs cs_symperm(Scs A,int[] pinv,boolean values){  int i, j, p, q, i2, j2, n, Ap[], Ai[], Cp[], Ci[], w[];  float Cx[], Ax[];  Scs C;  if (!Scs_util.CS_CSC(A))   return (null);  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  C=Scs_util.cs_spalloc(n,n,Ap[n],values && (Ax != null),false);  w=new int[n];  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (j=0; j < n; j++) {    j2=pinv != null ? pinv[j] : j;    for (p=Ap[j]; p < Ap[j + 1]; p++) {      i=Ai[p];      if (i > j)       continue;      i2=pinv != null ? pinv[i] : i;      w[Math.max(i2,j2)]++;    }  }  Scs_cumsum.cs_cumsum(Cp,w,n);  for (j=0; j < n; j++) {    j2=pinv != null ? pinv[j] : j;    for (p=Ap[j]; p < Ap[j + 1]; p++) {      i=Ai[p];      if (i > j)       continue;      i2=pinv != null ? pinv[i] : i;      Ci[q=w[Math.max(i2,j2)]++]=Math.min(i2,j2);      if (Cx != null)       Cx[q]=Ax[p];    }  }  return C;}  }
class C{  private void initConnectors() throws Exception {  SslContextFactory sslFac=new SslContextFactory();  sslFac.setIncludeCipherSuites(_ciphers);  KeyStore ks=loadKeystore();  sslFac.setKeyStore(ks);  sslFac.setKeyStorePassword(_keystorePassword);  sslFac.setKeyManagerPassword(_keystorePassword);  sslFac.setTrustStorePassword(_keystorePassword);  _securedConnector=new SslSelectChannelConnector(sslFac);  _securedConnector.setPort(_securePort);  _server.addConnector(_securedConnector);  _server.setSendServerVersion(false);}  }
class C{  public ResultSetHelper(ResultSet rs){  this(rs,0);}  }
class C{  public static <T>LazyPOrderedSetX<T> fromStreamS(Stream<T> stream){  return new LazyPOrderedSetX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  public static ChangeSet buildChangeSet(Table newTable,String sql,int toTableID){  ChangeSet.Builder builder=ChangeSet.newBuilder();  builder.setChangeLevel(ChangeLevel.TABLE.name());  assert (sql != null);  builder.setSelectStatement(sql);  builder.setTableId(newTable.getTableId());  builder.setOldSchema(newTable.getName().getSchemaName());  builder.setOldName(newTable.getName().getTableName());  builder.setNewSchema(newTable.getName().getSchemaName());  builder.setNewName(newTable.getName().getTableName());  builder.setToTableId(toTableID);  return builder.build();}  }
class C{  public IgniteException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public ListenableFuture<String> push(final String name,final Expression func){  String let=String.format("let %s = %s",name,func.toHaskell());  return pullRaw(let);}  }
class C{  private @Nullable Headers extractHeaders(@Nullable ReadableArray headersArray,@Nullable ReadableMap requestData){  if (headersArray == null) {    return null;  }  Headers.Builder headersBuilder=new Headers.Builder();  for (int headersIdx=0, size=headersArray.size(); headersIdx < size; headersIdx++) {    ReadableArray header=headersArray.getArray(headersIdx);    if (header == null || header.size() != 2) {      return null;    }    String headerName=header.getString(0);    String headerValue=header.getString(1);    headersBuilder.add(headerName,headerValue);  }  if (headersBuilder.get(USER_AGENT_HEADER_NAME) == null && mDefaultUserAgent != null) {    headersBuilder.add(USER_AGENT_HEADER_NAME,mDefaultUserAgent);  }  boolean isGzipSupported=requestData != null && requestData.hasKey(REQUEST_BODY_KEY_STRING);  if (!isGzipSupported) {    headersBuilder.removeAll(CONTENT_ENCODING_HEADER_NAME);  }  return headersBuilder.build();}  }
class C{  public Area unwrap(){  return new Area(shape.unwrap());}  }
class C{  static boolean nonZeroDroppedBits(int numberOfBits,int[] digits){  int intCount=numberOfBits >> 5;  int bitCount=numberOfBits & 31;  int i;  for (i=0; (i < intCount) && (digits[i] == 0); i++) {    ;  }  return ((i != intCount) || (digits[i] << (32 - bitCount) != 0));}  }
class C{  public void sortPlayers(){  int index=0;  for (int i=1; i <= getPlayerCount(); i++) {    Player p=getPlayerAtSeat(i);    if (p != null) {      players.remove(p);      players.add(index,p);      index++;    }  }}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:32.761 -0500",hash_original_method="04F11977515FDB4F5E012AC13A40882D",hash_generated_method="1BAB2227279275269EDB0E4C6BD99FA5") public static Bitmap extractThumbnail(Bitmap source,int width,int height){  return extractThumbnail(source,width,height,OPTIONS_NONE);}  }
class C{  public final double incorrect(){  return m_delegate.incorrect();}  }
class C{  public TemplateCollectionModel keys() throws TemplateModelException {  try {    PyObject method=object.__findattr__(KEYS);    if (method == null) {      method=object.__findattr__(KEYSET);    }    if (method != null) {      return (TemplateCollectionModel)wrapper.wrap(method.__call__());    }  } catch (  PyException e) {    throw new TemplateModelException(e);  }  throw new TemplateModelException("'?keys' is not supported as there is no 'keys' nor 'keySet' attribute on an instance of " + JythonVersionAdapterHolder.INSTANCE.getPythonClassName(object));}  }
class C{  private void freePackets(Map<Integer,Packet> packets){  for (  Packet packet : packets.values()) {    if (packet != null && packet.getData() != null) {      packet.getData().free();      packet.setData(null);    }  }  packets.clear();}  }
class C{  public void initSpikeResponder(){  if (source != null) {    if (source.getUpdateRule() instanceof SpikingNeuronUpdateRule) {      if (getSpikeResponder() == null) {        setSpikeResponder(new JumpAndDecay());      }    } else {      setSpikeResponder(null);    }  }}  }
class C{  private static String stripComments(String str){  if (str == null)   return "";  String s=str.trim();  while (s.startsWith("/*")) {    int idx=s.indexOf("*/");    if (idx < 0)     return s;    s=s.substring(idx + 2);    if (s == null)     return s; else     s=s.trim();  }  return s;}  }
class C{  public void arcConnect(final int cx,final int cy,final int arcRadius,final double angle1,final double angle2,final boolean in,final Long colorLine,final int intensityLine,final Long colorDot,final int intensityDot,final int dotDist,final int dotPos,final int dotRadius,final boolean dotFilled,final String message,final Long colorMessage,final int intensityMessage){  final double a1=PI180 * angle1;  final double a2=PI180 * angle2;  final int x1=cx + (int)(arcRadius * Math.cos(a1));  final int y1=cy - (int)(arcRadius * Math.sin(a1));  final int x2=cx + (int)(arcRadius * Math.cos(a2));  final int y2=cy - (int)(arcRadius * Math.sin(a2));  if (in) {    line(x1,y1,x2,y2,colorLine,intensityLine,colorDot,intensityDot,dotDist,dotPos,dotRadius,dotFilled);  } else {    line(x2,y2,x1,y1,colorLine,intensityLine,colorDot,intensityDot,dotDist,dotPos,dotRadius,dotFilled);  }  if (message != null && message.length() > 0) {    this.setColor(colorMessage);    int xm=(x1 + 5 * x2) / 6;    int ym=(y1 + 5 * y2) / 6;    if (ym < cy)     ym+=6; else     ym-=6;    if (xm < cx)     xm+=6; else     xm-=6;    if (xm > cx)     xm-=6 * message.length();    PrintTool.print(this,xm,ym,0,message.toUpperCase(),-1,intensityMessage);  }}  }
class C{  private void $$$setupUI$$$(){  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(5,3,new Insets(0,0,0,0),-1,-1));  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Authentication.DeviceFlowVisitUrl"));  contentPanel.add(label1,new GridConstraints(0,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  contentPanel.add(spacer1,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,1,null,null,null,0,false));  final Spacer spacer2=new Spacer();  contentPanel.add(spacer2,new GridConstraints(1,0,2,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  verificationUriLink=new Hyperlink();  contentPanel.add(verificationUriLink,new GridConstraints(1,1,1,1,GridConstraints.ANCHOR_NORTH,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  final JLabel label2=new JLabel();  this.$$$loadLabelText$$$(label2,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Authentication.DeviceFlowEnterFollowingCode"));  contentPanel.add(label2,new GridConstraints(2,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  userCodeTextField=new JTextField();  contentPanel.add(userCodeTextField,new GridConstraints(3,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  final JLabel label3=new JLabel();  this.$$$loadLabelText$$$(label3,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("Authentication.DeviceFlowContinueAfterLogin"));  contentPanel.add(label3,new GridConstraints(4,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  public void writeShortInt(int x){  byte[] buff=data;  buff[pos++]=(byte)(x >> 8);  buff[pos++]=(byte)x;}  }
class C{  @Override public BitVector clone(){  final BitVector copy=new BitVector(registerWidth,count);  System.arraycopy(words,0,copy.words,0,words.length);  return copy;}  }
class C{  public void draw(){  double xc=(x.min() + x.max()) / 2.0;  double yc=(y.min() + y.max()) / 2.0;  StdDraw.rectangle(xc,yc,x.length() / 2.0,y.length() / 2.0);}  }
class C{  public void addEmailAdress(String anEmailAddress){  if (mEmails.indexOf(anEmailAddress) < 0) {    mEmails.add(anEmailAddress);  }}  }
class C{  protected void ensureUnsignedProperties() throws DSSException {  final NodeList qualifyingPropertiesNodeList=currentSignatureDom.getElementsByTagNameNS(XAdESNamespaces.XAdES,"QualifyingProperties");  if (qualifyingPropertiesNodeList.getLength() != 1) {    throw new DSSException("The signature does not contain QualifyingProperties element (or contains more than one)! Extension is not possible.");  }  qualifyingPropertiesDom=(Element)qualifyingPropertiesNodeList.item(0);  final NodeList unsignedPropertiesNodeList=currentSignatureDom.getElementsByTagNameNS(XAdESNamespaces.XAdES,"UnsignedProperties");  final int length=unsignedPropertiesNodeList.getLength();  if (length == 1) {    unsignedPropertiesDom=(Element)qualifyingPropertiesNodeList.item(0);  } else   if (length == 0) {    unsignedPropertiesDom=DSSXMLUtils.addElement(documentDom,qualifyingPropertiesDom,XAdESNamespaces.XAdES,"xades:UnsignedProperties");  } else {    throw new DSSException("The signature contains more then one UnsignedProperties element! Extension is not possible.");  }}  }
class C{  @Override public int executeUpdate(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private Matrix[] split(){  int n=rows();  int p=largestPowerOf2SmallerThan(n);  int q=n - p;  double[][] a=new double[p][p];  double[][] b=new double[q][q];  double[][] c=new double[q][p];  for (int i=0; i < p; i++) {    for (int j=0; j < p; j++)     a[i][j]=components[i][j];    for (int j=p; j < n; j++)     c[j - p][i]=components[i][j];  }  for (int i=p; i < n; i++) {    for (int j=p; j < n; j++)     b[i - p][j - p]=components[i][j];  }  Matrix[] answer=new Matrix[3];  answer[0]=new SymmetricMatrix(a);  answer[1]=new SymmetricMatrix(b);  answer[2]=new Matrix(c);  return answer;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public boolean containsSegment(byte segmentMarker){  return _segmentDataMap.containsKey(new Byte(segmentMarker));}  }
class C{  public int hashCode(){  int value=m << 5;  value+=(rp == null ? 0 : rp.hashCode());  return value;}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  DistanceFunction<? super O> df=clusterer.getDistanceFunction();  DistanceQuery<O> dq=database.getDistanceQuery(relation,df);  Clustering<?> c=clusterer.run(database,relation);  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_DB);  DoubleMinMax mm=new DoubleMinMax();  @SuppressWarnings("unchecked") NumberVector.Factory<O> factory=(NumberVector.Factory<O>)RelationUtil.assumeVectorField(relation).getFactory();  List<? extends Cluster<?>> clusters=c.getAllClusters();  for (  Cluster<?> cluster : clusters) {    O mean=factory.newNumberVector(ModelUtil.getPrototype(cluster.getModel(),relation));    for (DBIDIter iter=cluster.getIDs().iter(); iter.valid(); iter.advance()) {      double dist=dq.distance(mean,iter);      scores.put(iter,dist);      mm.put(dist);    }  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("KMeans outlier scores","kmeans-outlier",scores,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(mm.getMin(),mm.getMax(),0.,Double.POSITIVE_INFINITY,0.);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  MemberState startConfigure(){  configuring=true;  return this;}  }
class C{  public static void registerConfig(){  Config.registerSelf(ResponseTimeStats.class);}  }
class C{  public void requestToLoadMore(@NotNull Runnable onLoaded){  myMoreRequested=true;  myUi.getFilterer().moreCommitsNeeded(onLoaded);  myUi.getTable().setPaintBusy(true);}  }
class C{  public void clearData(){  sharedPreferences.edit().clear().apply();  persistenceService.deleteAll();}  }
class C{  public void normal(){  mHintTextView.setText(R.string.rebound_listview_header_hint_normal);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public DoubleMatrix1D assign(DoubleMatrix1D source){  if (!(source instanceof DenseDoubleMatrix1D)) {    return super.assign(source);  }  DenseDoubleMatrix1D other=(DenseDoubleMatrix1D)source;  if (other == this)   return this;  checkSize(other);  if (isNoView && other.isNoView) {    System.arraycopy(other.elements,0,this.elements,0,this.elements.length);    return this;  }  if (haveSharedCells(other)) {    DoubleMatrix1D c=other.copy();    if (!(c instanceof DenseDoubleMatrix1D)) {      return super.assign(source);    }    other=(DenseDoubleMatrix1D)c;  }  final double[] elems=this.elements;  final double[] otherElems=other.elements;  if (elements == null || otherElems == null)   throw new InternalError();  int s=this.stride;  int ys=other.stride;  int index=index(0);  int otherIndex=other.index(0);  for (int k=size; --k >= 0; ) {    elems[index]=otherElems[otherIndex];    index+=s;    otherIndex+=ys;  }  return this;}  }
class C{  private boolean showInputEntry(int entryType){switch (entryType) {case Ontology.INTEGER:case Ontology.REAL:case Ontology.NUMERICAL:    if (!isNumericFilterToggled()) {      return false;    } else {      return true;    }case Ontology.DATE_TIME:case Ontology.DATE:case Ontology.TIME:  if (!isDateTimeFilterToggled()) {    return false;  } else {    return true;  }case Ontology.FILE_PATH:case Ontology.STRING:case Ontology.POLYNOMINAL:case Ontology.BINOMINAL:case Ontology.NOMINAL:if (!isNominalFilterToggled()) {  return false;} else {  return true;}default :return false;}}  }
class C{  @Override public void onGeolocationPermissionsShowPrompt(String origin,GeolocationPermissions.Callback callback){  super.onGeolocationPermissionsShowPrompt(origin,callback);}  }
class C{  public MonitorDataException(){  super();}  }
class C{  public float[] generateTransformedValuesCandle(List<CandleEntry> entries,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil((to - from) * phaseX) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    CandleEntry e=entries.get(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getHigh() * phaseY;    }  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  public synchronized void entering(String sourceClass,String sourceMethod){  LogRecord record=new LogRecord(Level.CONFIG,"Entering method");  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.971 -0500",hash_original_method="5AE788D699768B81A9959AB7BD861BB0",hash_generated_method="5AE788D699768B81A9959AB7BD861BB0") TFTPErrorPacket(DatagramPacket datagram) throws TFTPPacketException {  super(TFTPPacket.ERROR,datagram.getAddress(),datagram.getPort());  int index, length;  byte[] data;  StringBuffer buffer;  data=datagram.getData();  length=datagram.getLength();  if (getType() != data[1])   throw new TFTPPacketException("TFTP operator code does not match type.");  _error=(((data[2] & 0xff) << 8) | (data[3] & 0xff));  if (length < 5)   throw new TFTPPacketException("Bad error packet. No message.");  index=4;  buffer=new StringBuffer();  while (index < length && data[index] != 0) {    buffer.append((char)data[index]);    ++index;  }  _message=buffer.toString();}  }
class C{  private ViPRTaskMonitor<VolumeRestRep> createBootVolume(Host host){  String volumeName=getBootVolumeName(host);  String volumeSize=BlockStorageUtils.gbToVolumeSize(sizeInGb);  ViPRTaskMonitor<VolumeRestRep> task=ExecutionUtils.startViprTask(new CreateBlockVolumeByName(project,virtualArray,virtualPool,volumeSize,null,volumeName));  URI volumeId=task.getTask().getResourceId();  volumeIdToHost.put(volumeId,host);  return task;}  }
class C{  public JavaVersion(String javaVersion) throws VersionException {  this.javaVersion=javaVersion;  int versionDelimiters=0;  int lastIndex=0;  while ((lastIndex=javaVersion.indexOf(VERSION_DELIMITER,lastIndex + 1)) != -1) {    versionDelimiters++;  }  int indexUpdate;  if (versionDelimiters == 3) {    indexUpdate=javaVersion.lastIndexOf(VERSION_DELIMITER);  } else {    indexUpdate=javaVersion.indexOf(START_UPDATE);  }  int indexIdentifier=javaVersion.indexOf(START_IDENTIFIER);  String versionRead=null;  String updateRead="0";  String identifierRead=null;  if (indexUpdate == -1 && indexIdentifier == -1) {    versionRead=javaVersion;  } else   if (indexUpdate != -1 && indexIdentifier == -1) {    versionRead=javaVersion.substring(0,indexUpdate);    updateRead=javaVersion.substring(indexUpdate + 1);  } else   if (indexUpdate == -1) {    versionRead=javaVersion.substring(0,indexIdentifier);    identifierRead=javaVersion.substring(indexIdentifier + 1);  } else {    versionRead=javaVersion.substring(0,indexUpdate);    updateRead=javaVersion.substring(indexUpdate + 1,indexIdentifier);    identifierRead=javaVersion.substring(indexIdentifier + 1);  }  StringTokenizer strTok=new StringTokenizer(versionRead,"" + VERSION_DELIMITER);  if (strTok.countTokens() != 3) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  String majorRead=strTok.nextToken();  try {    major=Integer.parseInt(majorRead);  } catch (  NumberFormatException ex) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  if (major < 0) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  String middleRead=strTok.nextToken();  try {    middle=Integer.parseInt(middleRead);  } catch (  NumberFormatException ex) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  if (middle < 0) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  String minorRead=strTok.nextToken();  try {    minor=Integer.parseInt(minorRead);  } catch (  NumberFormatException ex) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  if (minor < 0) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  try {    update=Integer.parseInt(updateRead);  } catch (  NumberFormatException ex) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  if (update < 0) {    throw new VersionException(MessageFormat.format(res.getString("NoParseJavaVersion.exception.message"),javaVersion));  }  this.identifier=identifierRead;}  }
class C{  @PostConstruct void checkCompatibility() throws ServerException {  try {    Version versionInfo=dockerConnector.getVersion();    if (!supportedVersions.contains(versionInfo.getVersion())) {      throw new ServerException("Unsupported docker version " + versionInfo.getVersion());    }  } catch (  IOException e) {    LOG.info(e.getMessage());    throw new ServerException("Impossible to get docker version",e);  }}  }
class C{  public static void modifyProxyHeaders(final HeaderFramework requestHeader,final String httpVer){  removeHopByHopHeaders(requestHeader);  setViaHeader(requestHeader,httpVer);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  protected int computeIndexInPositionList(List<Position> positions,int offset,boolean orderedByOffset){  if (positions.size() == 0)   return 0;  int left=0;  int right=positions.size() - 1;  int mid=0;  Position p;  while (left < right) {    mid=(left + right) / 2;    p=positions.get(mid);    int pOffset=getOffset(orderedByOffset,p);    if (offset < pOffset) {      if (left == mid)       right=left; else       right=mid - 1;    } else     if (offset > pOffset) {      if (right == mid)       left=right; else       left=mid + 1;    } else     if (offset == pOffset) {      left=right=mid;    }  }  int pos=left;  p=positions.get(pos);  int pPosition=getOffset(orderedByOffset,p);  if (offset > pPosition) {    pos++;  } else {    do {      --pos;      if (pos < 0)       break;      p=positions.get(pos);      pPosition=getOffset(orderedByOffset,p);    } while (offset == pPosition);    ++pos;  }  Assert.isTrue(0 <= pos && pos <= positions.size());  return pos;}  }
class C{  @Override protected Message createMessage(Object tuple){  try {    if (tuple instanceof Message) {      return (Message)tuple;    } else     if (tuple instanceof String) {      return getSession().createTextMessage((String)tuple);    } else     if (tuple instanceof byte[]) {      BytesMessage message=getSession().createBytesMessage();      message.writeBytes((byte[])tuple);      return message;    } else     if (tuple instanceof Map) {      return createMessageForMap((Map)tuple);    } else     if (tuple instanceof Serializable) {      return getSession().createObjectMessage((Serializable)tuple);    } else {      throw new RuntimeException("Cannot convert object of type " + tuple.getClass() + "] to JMS message. Supported message "+ "payloads are: String, byte array, Map<String,?>, Serializable object.");    }  } catch (  JMSException ex) {    logger.error(ex.getLocalizedMessage());    throw new RuntimeException(ex);  }}  }
class C{  public static void main(String... args) throws Exception {  new FileConverter().run(args);}  }
class C{  @SuppressWarnings("rawtypes") public static void writeJSONString(Map map,Writer out) throws IOException {  if (map == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=map.entrySet().iterator();  out.write('{');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Map.Entry entry=(Map.Entry)iter.next();    out.write('\"');    out.write(escape(String.valueOf(entry.getKey())));    out.write('\"');    out.write(':');    JSONValue.writeJSONString(entry.getValue(),out);  }  out.write('}');}  }
class C{  public void test_simpleOptional() throws MalformedQueryException {  final String queryStr="" + "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n" + "PREFIX dc: <http://purl.org/dc/terms/> \n"+ "PREFIX p1: <http://www.bigdata.com/> \n"+ "SELECT * \n"+ "WHERE { \n"+ "  ?_var1 rdf:type <http://suawa.org/mediadb#Album>. \n"+ "  ?_var1 p1:genre ?_var8.  \n"+ "  ?_var8 dc:title ?_var9.  \n"+ "  FILTER ((?_var9 in(\"Folk\", \"Hip-Hop\"))) . \n"+ "  OPTIONAL { \n"+ "    ?_var1 dc:title ?_var10 \n"+ "  }.  \n"+ "  OPTIONAL { \n"+ "    ?_var1 p1:mainArtist ?_var12. \n"+ "    ?_var12 dc:title ?_var11 \n"+ "  } \n"+ "}";  final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryStr,baseURI);  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  QueryRoot queryRoot=astContainer.getOriginalAST();  queryRoot=(QueryRoot)new ASTWildcardProjectionOptimizer().optimize(context,new QueryNodeWithBindingSet(queryRoot,null)).getQueryNode();  queryRoot=(QueryRoot)new ASTSimpleOptionalOptimizer().optimize(context,new QueryNodeWithBindingSet(queryRoot,null)).getQueryNode();  final GraphPatternGroup<?> whereClause=queryRoot.getWhereClause();{    int nstmts=0;    for (    IGroupMemberNode child : whereClause) {      if (child instanceof StatementPatternNode) {        nstmts++;      }    }    assertEquals("#statements",4,nstmts);  }{    final Iterator<JoinGroupNode> itr=BOpUtility.visitAll(whereClause,JoinGroupNode.class);    int ngroups=0;    int noptionalGroups=0;    while (itr.hasNext()) {      final JoinGroupNode tmp=itr.next();      ngroups++;      if (tmp.isOptional())       noptionalGroups++;    }    assertEquals("#ngroups",2,ngroups);    assertEquals("#optionalGroups",1,noptionalGroups);  }}  }
class C{  private MeshPartBuilder.VertexInfo calculateNormalAt(MeshPartBuilder.VertexInfo out,int x,int y){  out.normal.set(getNormalAt(x,y));  return out;}  }
class C{  private void processVMAX3SLO(StorageSystem storageSystem,CIMInstance settingInstance,Set<String> sloNames){  String emcFastSetting=(String)settingInstance.getPropertyValue(Constants.EMC_FAST_SETTING);  if (!Strings.isNullOrEmpty(emcFastSetting)) {    String slo=(String)settingInstance.getPropertyValue(Constants.EMC_SLO);    Float avgResponseTimeValue=(Float)settingInstance.getPropertyValue(Constants.EMC_AVG_RESPONSE_TIME);    if (!Strings.isNullOrEmpty(slo) && !checkForNull(avgResponseTimeValue)) {      String avgResponseTime=avgResponseTimeValue.toString();      String workload=(String)settingInstance.getPropertyValue(Constants.EMC_WORKLOAD);      workload=Strings.isNullOrEmpty(workload) ? Constants.NONE : workload;      String sloName=generateSLOPolicyName(slo,workload,avgResponseTime);      sloNames.add(sloName);    } else {      _logger.warn(String.format("Setting %s had non-null EMCFastSetting property = '%s', " + "but its EMCSLO and/or EMCApproxAverageResponseTime property is null/empty.",settingInstance.getObjectPath().toString(),emcFastSetting));    }  }}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  protected boolean[] correctSearchInitialisation(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  boolean[] result=new boolean[2];  print("correct initialisation during search");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  Instances train1=null;  Instances train2=null;  ASSearch search=null;  ASEvaluation evaluation1A=null;  ASEvaluation evaluation1B=null;  ASEvaluation evaluation2=null;  AttributeSelection attsel1A=null;  AttributeSelection attsel1B=null;  int stage=0;  try {    train1=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    train2=makeTestDataset(84,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train1,missingLevel,predictorMissing,classMissing);      addMissing(train2,missingLevel,predictorMissing,classMissing);    }    search=ASSearch.makeCopies(getSearch(),1)[0];    evaluation1A=ASEvaluation.makeCopies(getEvaluator(),1)[0];    evaluation1B=ASEvaluation.makeCopies(getEvaluator(),1)[0];    evaluation2=ASEvaluation.makeCopies(getEvaluator(),1)[0];  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    stage=0;    attsel1A=search(search,evaluation1A,train1);    stage=1;    search(search,evaluation2,train2);    stage=2;    attsel1B=search(search,evaluation1B,train1);    stage=3;    if (!attsel1A.toResultsString().equals(attsel1B.toResultsString())) {      if (m_Debug) {        println("\n=== Full report ===\n" + "\nFirst search\n" + attsel1A.toResultsString() + "\n\n");        println("\nSecond search\n" + attsel1B.toResultsString() + "\n\n");      }      throw new Exception("Results differ between search calls");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during  training");switch (stage) {case 0:        print(" of dataset 1");      break;case 1:    print(" of dataset 2");  break;case 2:print(" of dataset 1 (2nd build)");break;case 3:print(", comparing results from builds of dataset 1");break;}println(": " + ex.getMessage() + "\n");println("here are the datasets:\n");println("=== Train1 Dataset ===\n" + train1.toString() + "\n");println("=== Train2 Dataset ===\n" + train2.toString() + "\n");}}return result;}  }
class C{  public boolean esFijo(String id,int tipoObjeto,String idObjeto){  DocClasificadorVO clasificador=getClasificador(tipoObjeto,idObjeto,id);  return (clasificador == null) || (clasificador.getMarcas() == MarcasClasificador.FIJO);}  }
class C{  @SuppressWarnings("unchecked") public boolean offer(E e){  if (q.size() < qbound) {    return q.offer(e);  }  boolean ret=false;  boolean insert;  Comparable<? super E> head=(Comparable<? super E>)q.peek();  if (ascending) {    insert=head.compareTo(e) <= 0;  } else {    insert=head.compareTo(e) >= 0;  }  if (insert && q.offer(e)) {    ret=true;    q.poll();  }  return ret;}  }
class C{  @Override public String toString(){  return toBigInteger().toString();}  }
class C{  public static <T>LazyPBagX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  private void applyCollapseState(@NotNull TreePath path){  final String key=getPath(path);  final Boolean expanded=myExpandedStateHolder.get(key);  if (expanded == null) {    return;  }  boolean s=mySuppressCollapseTracking;  mySuppressCollapseTracking=true;  try {    if (expanded) {      expandPath(path);    } else {      collapsePath(path);    }  }  finally {    mySuppressCollapseTracking=s;  }}  }
class C{  @Override public boolean usesLocalFilePerTable(){  debugCodeCall("usesLocalFilePerTable");  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docAlt;  Element element;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staffNS",true);  docAlt=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test","elem1");  attribute=docAlt.createAttributeNS("http://www.w3.org/DOM/Test","attr");{    boolean success=false;    try {      newAttribute=element.setAttributeNodeNS(attribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public void skipValue() throws IOException {  skipping=true;  try {    int count=0;    do {      JsonToken token=advance();      if (token == JsonToken.BEGIN_ARRAY || token == JsonToken.BEGIN_OBJECT) {        count++;      } else       if (token == JsonToken.END_ARRAY || token == JsonToken.END_OBJECT) {        count--;      }    } while (count != 0);  }  finally {    skipping=false;  }}  }
class C{  private void checkPoints(Collection<Cache.Entry<Integer,EnemyCamp>> res,String... points){  Set<String> set=new HashSet<>(Arrays.asList(points));  assertEquals(set.size(),res.size());  for (  Cache.Entry<Integer,EnemyCamp> e : res)   assertTrue(set.remove(e.getValue().name));}  }
class C{  public boolean isMean(){  return isMean;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean containsAll(Collection<?> c){  if (!(c instanceof JumboEnumSet))   return super.containsAll(c);  JumboEnumSet<?> es=(JumboEnumSet<?>)c;  if (es.elementType != elementType)   return es.isEmpty();  for (int i=0; i < elements.length; i++)   if ((es.elements[i] & ~elements[i]) != 0)   return false;  return true;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public SecurityCredentials credentials(){  return creds;}  }
class C{  public SgenEditPlugin(){  super(new ResourceLocator[]{BaseEditPlugin.INSTANCE});}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public synchronized void clear(){  map.clear();}  }
class C{  static public void writeURL(Writer out,char[] textBuff,int start,int len,String queryEncoding) throws IOException, UnsupportedEncodingException {  int end=start + len;  for (int i=start; i < end; i++) {    char ch=textBuff[i];    if ((ch < 33) || (ch > 126)) {      encodeURIString(out,textBuff,"UTF-8",i,i + 1);    } else     if (ch == '"') {      out.write("%22");    } else     if (ch == '?') {      out.write('?');      encodeURIString(out,textBuff,queryEncoding,i + 1,end);      return;    } else {      out.write(ch);    }  }}  }
class C{  public static boolean intersectSphereSphere(Vector3fc centerA,float radiusSquaredA,Vector3fc centerB,float radiusSquaredB,Vector4f centerAndRadiusOfIntersectionCircle){  return intersectSphereSphere(centerA.x(),centerA.y(),centerA.z(),radiusSquaredA,centerB.x(),centerB.y(),centerB.z(),radiusSquaredB,centerAndRadiusOfIntersectionCircle);}  }
class C{  public String encodeImage(Drawable drawable){  Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();  ByteArrayOutputStream outStream=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.PNG,COMPRESSION_LEVEL,outStream);  byte[] bitmapContent=outStream.toByteArray();  String encodedImage=Base64.encodeToString(bitmapContent,Base64.NO_WRAP);  StreamHandler.closeOutputStream(outStream,TAG);  return encodedImage;}  }
class C{  public NodeList(List nodes){  this(nodes,true);}  }
class C{  private ImageMappings(){}  }
class C{  public Vertex createAdjective(String text,Vertex meaning,Network network){  Vertex word=createWord(text,meaning,network,Primitive.ADJECTIVE);  return word;}  }
class C{  private static String decodeParameterValue(String value){  Matcher m=hexPattern.matcher(value);  StringBuffer sb=null;  while (m.find()) {    if (sb == null) {      sb=new StringBuffer(value.length());    }    int hex=Integer.parseInt(m.group(1),16);    m.appendReplacement(sb,Character.toString((char)hex));  }  if (sb == null) {    return value;  }  m.appendTail(sb);  return sb.toString();}  }
class C{  public UploadPartResult uploadPart(UploadPartRequest uploadPartRequest) throws OSSException, ClientException {  assertParameterNotNull(uploadPartRequest,"uploadPartRequest");  String key=uploadPartRequest.getKey();  String bucketName=uploadPartRequest.getBucketName();  String uploadId=uploadPartRequest.getUploadId();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  assertParameterNotNull(key,"key");  ensureObjectKeyValid(key);  assertStringNotNullOrEmpty(uploadId,"uploadId");  if (uploadPartRequest.getInputStream() == null) {    throw new IllegalArgumentException(OSS_RESOURCE_MANAGER.getString("MustSetContentStream"));  }  InputStream repeatableInputStream=null;  try {    repeatableInputStream=newRepeatableInputStream(uploadPartRequest.buildPartialStream());  } catch (  IOException ex) {    logException("Cannot wrap to repeatable input stream: ",ex);    throw new ClientException("Cannot wrap to repeatable input stream: ",ex);  }  int partNumber=uploadPartRequest.getPartNumber();  if (!checkParamRange(partNumber,0,false,MAX_PART_NUMBER,true)) {    throw new IllegalArgumentException(OSS_RESOURCE_MANAGER.getString("PartNumberOutOfRange"));  }  Map<String,String> headers=new HashMap<String,String>();  populateUploadPartOptionalHeaders(uploadPartRequest,headers);  Map<String,String> params=new LinkedHashMap<String,String>();  params.put(PART_NUMBER,Integer.toString(partNumber));  params.put(UPLOAD_ID,uploadId);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.PUT).setBucket(bucketName).setKey(key).setParameters(params).setHeaders(headers).setInputStream(repeatableInputStream).setInputSize(uploadPartRequest.getPartSize()).setUseChunkEncoding(uploadPartRequest.isUseChunkEncoding()).setOriginalRequest(uploadPartRequest).build();  final ProgressListener listener=uploadPartRequest.getProgressListener();  ResponseMessage response=null;  try {    publishProgress(listener,ProgressEventType.TRANSFER_PART_STARTED_EVENT);    response=doOperation(request,emptyResponseParser,bucketName,key);    publishProgress(listener,ProgressEventType.TRANSFER_PART_COMPLETED_EVENT);  } catch (  RuntimeException e) {    publishProgress(listener,ProgressEventType.TRANSFER_PART_FAILED_EVENT);    throw e;  }  UploadPartResult result=new UploadPartResult();  result.setPartNumber(partNumber);  result.setETag(trimQuotes(response.getHeaders().get(OSSHeaders.ETAG)));  result.setRequestId(response.getRequestId());  result.setPartSize(uploadPartRequest.getPartSize());  ResponseParsers.setCRC64(result,response);  return result;}  }
class C{  public int item(int index){  runTo(index);  return this.elementAt(index);}  }
class C{  public SimpleTreeViewer(){  super();  setBackground(Color.white);}  }
class C{  protected void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,float halfDiffX,int seriesNr,int seriesIndex,Paint paint){  int scale=mDataset.getSeriesAt(seriesIndex).getScaleNumber();  if (mType == Type.STACKED) {    drawBar(canvas,xMin - halfDiffX,yMax,xMax + halfDiffX,yMin,scale,seriesIndex,paint);  } else {    float startX=xMin - seriesNr * halfDiffX + seriesIndex * 2 * halfDiffX;    drawBar(canvas,startX,yMax,startX + 2 * halfDiffX,yMin,scale,seriesIndex,paint);  }}  }
class C{  public NumericEntityEscaper(){  this(0,Integer.MAX_VALUE,true);}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public int size(){  return values.length;}  }
class C{  public FileSystem fileSystem(@Nullable URI uri,Configuration cfg) throws IOException {  return fileSystemForMrUserWithCaching(uri,cfg,fsMap);}  }
class C{  public void handleBindingEvent(Element bindableElement,Element shadowTree){}  }
class C{  @Override public int size(){  return size;}  }
class C{  public static BootstrapSession unauthorized(){  return new BootstrapSession(null,null,false);}  }
class C{  public String toUpperCase(Locale locale){  boolean turkish="tr".equals(locale.getLanguage());  char[] output=null;  int i=0;  for (int o=offset, end=offset + count; o < end; o++) {    char ch=value[o];    int index=upperIndex(ch);    if (index == -1) {      if (output != null && i >= output.length) {        char[] newoutput=new char[output.length + (count / 6) + 2];        System.arraycopy(output,0,newoutput,0,output.length);        output=newoutput;      }      char upch=!turkish ? Character.toUpperCase(ch) : (ch != 0x69 ? Character.toUpperCase(ch) : (char)0x130);      if (ch != upch) {        if (output == null) {          output=new char[count];          i=o - offset;          System.arraycopy(value,offset,output,0,i);        }        output[i++]=upch;      } else       if (output != null) {        output[i++]=ch;      }    } else {      int target=index * 3;      char val3=upperValues[target + 2];      if (output == null) {        output=new char[count + (count / 6) + 2];        i=o - offset;        System.arraycopy(value,offset,output,0,i);      } else       if (i + (val3 == 0 ? 1 : 2) >= output.length) {        char[] newoutput=new char[output.length + (count / 6) + 3];        System.arraycopy(output,0,newoutput,0,output.length);        output=newoutput;      }      char val=upperValues[target];      output[i++]=val;      val=upperValues[target + 1];      output[i++]=val;      if (val3 != 0) {        output[i++]=val3;      }    }  }  if (output == null) {    return this;  }  return output.length == i || output.length - i < 8 ? new String(0,i,output) : new String(output,0,i);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  if (b == null) {    throw new NullPointerException();  }  Date start=new Date();  if (Options.v().verbose())   G.v().out.println("[TypeAssigner] typing system started on " + start);  JBTROptions opt=new JBTROptions(options);  ignoreWrongStaticNess=opt.ignore_wrong_staticness();  if (opt.compare_type_assigners()) {    compareTypeAssigners(b,opt.use_older_type_assigner());  } else {    if (opt.use_older_type_assigner())     TypeResolver.resolve((JimpleBody)b,Scene.v()); else     (new soot.jimple.toolkits.typing.fast.TypeResolver((JimpleBody)b)).inferTypes();  }  Date finish=new Date();  if (Options.v().verbose()) {    long runtime=finish.getTime() - start.getTime();    long mins=runtime / 60000;    long secs=(runtime % 60000) / 1000;    G.v().out.println("[TypeAssigner] typing system ended. It took " + mins + " mins and "+ secs+ " secs.");  }  if (typingFailed((JimpleBody)b))   throw new RuntimeException("type inference failed!");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public AsyncResult RegisterNodesAsync(RegisterNodesRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public void moveToBack(Component c){  setPosition(c,-1);}  }
class C{  public void endDTD(Augmentations augs) throws XNIException {  fInDTD=false;  try {    if (fLexicalHandler != null) {      fLexicalHandler.endDTD();    }  } catch (  SAXException e) {    throw new XNIException(e);  }  if (fDeclaredAttrs != null) {    fDeclaredAttrs.clear();  }}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  private void logResult(Label label){  LogUtils.log(this,Log.VERBOSE,"Query result: %s.",label);}  }
class C{  public Orientation hookBasedOnHitSide(){  if (provider instanceof Block) {    ((Block)provider).events.on(Block.PlaceEvent.class).bind(null);  }  return this;}  }
class C{  public boolean isCrcCheckingEnabled(){  return crcCheckingEnabled;}  }
class C{  public Iterable<State> dominatedInstructionStateIterable() throws DataflowAnalysisException {  if (!lookForDominatedInstruction()) {    throw new IllegalStateException();  }  LinkedList<State> stateList=new LinkedList<State>();  State dup=this.duplicate();  if (currentMatch != null) {    PatternElementMatch dominator=currentMatch.getFirstLabeledMatch(patternElement.getDominatedBy());    BasicBlock domBlock=dominator.getBasicBlock();    InstructionHandle domInstruction=dominator.getMatchedInstructionInstructionHandle();    for (Iterator<BasicBlock> i=cfg.blockIterator(); i.hasNext(); ) {      BasicBlock block=i.next();      boolean includeInstructions=block != domBlock;      BitSet dominators=domAnalysis.getResultFact(block);      if (block == domBlock || dominators.get(domBlock.getLabel())) {        for (Iterator<InstructionHandle> j=block.instructionIterator(); j.hasNext(); ) {          InstructionHandle next=j.next();          if (includeInstructions) {            MatchResult matchResult=dup.matchLocation(new Location(next,block));            if (matchResult != null) {              stateList.add(dup);              dup=this.duplicate();            }          } else           if (next.equals(domInstruction)) {            includeInstructions=true;          }        }      }    }  }  return stateList;}  }
class C{  protected void executeRuntimeProgram(){  try {    runtimeProgram.execute(executionContext);  } catch (  DMLRuntimeException e) {    throw new MLContextException("Exception occurred while executing runtime program",e);  }}  }
class C{  @Override public boolean contains(Value subvalue){  return equals(subvalue);}  }
class C{  public static String conflict(GitRepository repository,String branch,String file){  assert !branchExists(repository,branch) : "Branch [" + branch + "] shouldn\'t exist for this scenario";  GitExecutor.cd(repository);  Executor.touch(file,"initial content");  GitExecutor.git("add " + file);  GitExecutor.git("commit -m initial_content");  GitExecutor.git("checkout -b " + branch);  Executor.echo(file,"branch content");  GitExecutor.git("commit -am branch_content");  GitExecutor.git("checkout master");  Executor.echo(file,"master content");  return GitExecutor.git("commit -am master_content");}  }
class C{  private MotionEvent swapXY(MotionEvent ev){  float width=getWidth();  float height=getHeight();  float newX=(ev.getY() / height) * width;  float newY=(ev.getX() / width) * height;  ev.setLocation(newX,newY);  return ev;}  }
class C{  public Formatter(){  this("%G");}  }
class C{  public IntRingBuffer(int size){  ringBuffer=new int[size];}  }
class C{  protected boolean isClassIndex(int columnIndex){  boolean result;  int index;  result=false;  if (m_Data.classIndex() > 0) {    index=m_Data.classIndex();    result=(index > 0) && (columnIndex > 0) && (columnIndex <= index);  }  return result;}  }
class C{  public static Map<String,Object> conditionTrueService(DispatchContext dctx,Map<String,?> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("conditionReply",Boolean.TRUE);  return result;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  protected Collection<CustomToken> tokenizeExtended(PerlStringLexer stringLexer,boolean isSecondBlock){  ArrayList<CustomToken> tokens=new ArrayList<CustomToken>();  int currentOffset=startOffset;  int blockStart=currentOffset;  boolean isEscaped=false;  boolean isCharGroup=false;  int regexEndOffset=endOffset - 1;  while (currentOffset < regexEndOffset) {    char currentChar=buffer.charAt(currentOffset);    int charsLeft=regexEndOffset - currentOffset;    if (!isEscaped && !isCharGroup && charsLeft > 3 && "(?#".equals(buffer.subSequence(currentOffset,currentOffset + 3).toString())) {      if (currentOffset > blockStart) {        stringLexer.reset(buffer,blockStart,currentOffset,0);        tokens.addAll(PerlLexer.processLexer(stringLexer));      }      int commentStart=currentOffset;      currentOffset+=2;      while (currentOffset < regexEndOffset && buffer.charAt(currentOffset) != ')') {        currentOffset++;      }      if (currentOffset < regexEndOffset) {        currentOffset++;      }      tokens.add(new CustomToken(commentStart,currentOffset,COMMENT_LINE));      blockStart=currentOffset;    } else     if (!isEscaped && Character.isWhitespace(currentChar)) {      if (currentOffset > blockStart) {        stringLexer.reset(buffer,blockStart,currentOffset,0);        tokens.addAll(PerlLexer.processLexer(stringLexer));      }      int whiteSpaceStart=currentOffset;      while (currentOffset < regexEndOffset && Character.isWhitespace(buffer.charAt(currentOffset))) {        currentOffset++;      }      tokens.add(new CustomToken(whiteSpaceStart,currentOffset,TokenType.WHITE_SPACE));      blockStart=currentOffset;    } else     if (!isEscaped && currentChar == '#') {      if (currentOffset > blockStart) {        stringLexer.reset(buffer,blockStart,currentOffset,0);        tokens.addAll(PerlLexer.processLexer(stringLexer));      }      int commentStart=currentOffset;      while (currentOffset < regexEndOffset && buffer.charAt(currentOffset) != '\n') {        currentOffset++;      }      tokens.add(new CustomToken(commentStart,currentOffset,COMMENT_LINE));      blockStart=currentOffset;    } else {      currentOffset++;    }    if (!isSecondBlock) {      if (!isEscaped && !isCharGroup && currentChar == '[') {        isCharGroup=true;      } else       if (!isEscaped && isCharGroup && currentChar == ']') {        isCharGroup=false;      }    }    isEscaped=!isEscaped && currentChar == '\\';  }  if (currentOffset > blockStart) {    stringLexer.reset(buffer,blockStart,currentOffset,0);    tokens.addAll(PerlLexer.processLexer(stringLexer));  }  tokens.add(new CustomToken(currentOffset,currentOffset + 1,REGEX_QUOTE_CLOSE));  return tokens;}  }
class C{  public static boolean equalsIgnoreXid(OFMessage a,OFMessage b){  OFMessage.Builder mb=b.createBuilder().setXid(a.getXid());  return a.equals(mb.build());}  }
class C{  public void prune(){}  }
class C{  public static String remove(String source,char searchFor){  String s=String.valueOf(searchFor);  return StringUtils.remove(source,s);}  }
class C{  public void applyToTaskView(View v,int duration,Interpolator interp,boolean allowLayers,boolean allowShadows,ValueAnimator.AnimatorUpdateListener updateCallback){  if (duration > 0) {    ViewPropertyAnimator anim=v.animate();    boolean requiresLayers=false;    if (hasTranslationYChangedFrom(v.getTranslationY())) {      anim.translationY(translationY);    }    if (hasScaleChangedFrom(v.getScaleX())) {      anim.scaleX(scale).scaleY(scale);      requiresLayers=true;    }    if (hasAlphaChangedFrom(v.getAlpha())) {      anim.alpha(alpha);      requiresLayers=true;    }    if (requiresLayers && allowLayers) {      anim.withLayer();    }    anim.setStartDelay(startDelay).setDuration(duration).setInterpolator(interp).start();  } else {    if (hasTranslationYChangedFrom(v.getTranslationY())) {      v.setTranslationY(translationY);    }    if (hasScaleChangedFrom(v.getScaleX())) {      v.setScaleX(scale);      v.setScaleY(scale);    }    if (hasAlphaChangedFrom(v.getAlpha())) {      v.setAlpha(alpha);    }  }}  }
class C{  public boolean isManufacturer(){  Object oo=get_Value(COLUMNNAME_IsManufacturer);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void move(float x,float y){  mStartingX=x;  mStartingY=y;  clampStartingPosition();}  }
class C{  public static int isMoreOrSameSpecificParameterType(final Class specific,final Class generic,boolean bugfixed,int ifHigherThan){  if (ifHigherThan >= 4)   return 0;  if (generic.isAssignableFrom(specific)) {    return generic == specific ? 1 : 4;  } else {    final boolean specificIsPrim=specific.isPrimitive();    final boolean genericIsPrim=generic.isPrimitive();    if (specificIsPrim) {      if (genericIsPrim) {        if (ifHigherThan >= 3)         return 0;        return isWideningPrimitiveNumberConversion(specific,generic) ? 3 : 0;      } else {        if (bugfixed) {          final Class specificAsBoxed=ClassUtil.primitiveClassToBoxingClass(specific);          if (specificAsBoxed == generic) {            return 2;          } else           if (generic.isAssignableFrom(specificAsBoxed)) {            return 4;          } else           if (ifHigherThan >= 3) {            return 0;          } else           if (Number.class.isAssignableFrom(specificAsBoxed) && Number.class.isAssignableFrom(generic)) {            return isWideningBoxedNumberConversion(specificAsBoxed,generic) ? 3 : 0;          } else {            return 0;          }        } else {          return 0;        }      }    } else {      if (ifHigherThan >= 3)       return 0;      if (bugfixed && !genericIsPrim && Number.class.isAssignableFrom(specific)&& Number.class.isAssignableFrom(generic)) {        return isWideningBoxedNumberConversion(specific,generic) ? 3 : 0;      } else {        return 0;      }    }  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Entry.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);  builder.addElement(Comments.KEY);  builder.addElement(EventStatus.KEY);  builder.addElement(OriginalEvent.KEY);  builder.addElement(Transparency.KEY);  builder.addElement(Visibility.KEY);  builder.addElement(When.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);  builder.addElement(Where.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);  builder.addElement(Who.KEY).setCardinality(ElementMetadata.Cardinality.MULTIPLE);}  }
class C{  public DefaultEdgeLabelRenderer(Color pickedEdgeLabelColor,boolean rotateEdgeLabels){  super();  this.pickedEdgeLabelColor=pickedEdgeLabelColor;  this.rotateEdgeLabels=rotateEdgeLabels;  setOpaque(true);  setBorder(noFocusBorder);}  }
class C{  public void reset(){  status=EMPTY;}  }
class C{  @Override public void DALOAD(Object conc_array,int conc_index){  IntegerValue symb_index=env.topFrame().operandStack.popBv32();  ReferenceExpression array_ref=env.topFrame().operandStack.popRef();  env.heap.initializeReference(conc_array,array_ref);  if (nullReferenceViolation(array_ref,conc_array)) {    return;  }  if (negativeIndexViolation(conc_index,symb_index)) {    return;  }  ReferenceExpression symb_array=(ReferenceExpression)array_ref;  int conc_array_length=Array.getLength(conc_array);  IntegerValue symb_array_length=env.heap.getField("",ARRAY_LENGTH,conc_array,symb_array,conc_array_length);  if (indexTooBigViolation(conc_index,symb_index,conc_array_length,symb_array_length))   return;  double fp64=Array.getDouble(conc_array,conc_index);  RealValue c=env.heap.array_load(symb_array,conc_index,(double)fp64);  env.topFrame().operandStack.pushFp64(c);}  }
class C{  public List<ClassLoadingInformationData> createDataObjects(int countOfObjects){  List<ClassLoadingInformationData> tempObjects=new ArrayList<>();  long currentTime=1221469200000L;  for (int i=0; i < countOfObjects; i++) {    ClassLoadingInformationData data=new ClassLoadingInformationData(new Timestamp(currentTime),1,5);    currentTime+=5000L;    int count=5;    data.setCount(count);    data.setId(-1L);    data.setMinLoadedClassCount(2000 + i);    data.setMaxLoadedClassCount(3000 + i);    int totalLoadedClassCount=(((data.getMinLoadedClassCount() + data.getMaxLoadedClassCount())) / 2) / count;    data.setTotalLoadedClassCount(totalLoadedClassCount);    data.setMinUnloadedClassCount(20 + i);    data.setMaxUnloadedClassCount(30 + i);    long totalUnloadedClassCount=((data.getMinUnloadedClassCount() + data.getMaxUnloadedClassCount()) / 2) / count;    data.setTotalUnloadedClassCount(totalUnloadedClassCount);    data.setMinTotalLoadedClassCount(10000);    data.setMaxTotalLoadedClassCount(15000);    long totalTotalLoadedClassCount=((data.getMinTotalLoadedClassCount() + data.getMaxTotalLoadedClassCount()) / 2) / count;    data.setTotalTotalLoadedClassCount(totalTotalLoadedClassCount);    tempObjects.add(data);  }  return tempObjects;}  }
class C{  private void reportDiagnosticSummary(){  String msg=" stdout: [" + stdout + "];\n"+ " stderr: ["+ stderr+ "]\n"+ " exitValue = "+ getExitValue()+ "\n";  System.err.println(msg);}  }
class C{  RejectAction(ModeUsage modeUsage){  super(modeUsage);}  }
class C{  public <T>CompletableFuture<T> submit(Operation<T> operation){  if (operation instanceof Query) {    return submit((Query<T>)operation);  } else   if (operation instanceof Command) {    return submit((Command<T>)operation);  } else {    throw new UnsupportedOperationException("unknown operation type: " + operation.getClass());  }}  }
class C{  public void addSessionListener(SessionListener listener){  listeners.add(listener);}  }
class C{  @Override public void process(Map<K,V> tuple){  V v=tuple.get(getKey());  if (v == null) {    tupleNotMatched(tuple);    return;  }  if (compareValue(v.doubleValue())) {    tupleMatched(tuple);  } else {    tupleNotMatched(tuple);  }}  }
class C{  @Transactional public <VO>VO update(Class<VO> voType,Object inputParam,User currentUser) throws Exception {  T po=findByIdParam(inputParam);  BeanUtils.copyPropertiesIgnoreNull(inputParam,po);  return updateByPO(voType,po,currentUser);}  }
class C{  public BlockVirtualPoolRestRep update(URI id,BlockVirtualPoolUpdateParam input){  return client.put(BlockVirtualPoolRestRep.class,input,getIdUrl(),id);}  }
class C{  public E putIfAbsent(int key,E value){  if (value == null) {    throw new NullPointerException();  }synchronized (this) {    Object[] arr=array;    E prev;    if (arr.length <= key) {      arr=Arrays.copyOf(arr,key * 3 / 2 + 1);      prev=null;    } else {      prev=(E)arr[key];    }    if (prev == null) {      arr[key]=value;      array=arr;      size++;    }    return prev;  }}  }
class C{  public static void error(String message,Throwable exception){  showException(message,exception);}  }
class C{  public Class<?> returnType(){  return rtype;}  }
class C{  @Override public int remove(Object element,int occurrences){  throw new UnsupportedOperationException();}  }
class C{  private List<Alert> filterAlerts(List<Alert> alerts,boolean open){  List<Alert> filteredAlerts=new ArrayList<>();  for (  Alert alert : alerts) {    if (alert.isOpen() == open) {      filteredAlerts.add(alert);    }  }  return filteredAlerts;}  }
class C{  public IllegalFormatWidthException(int w){  this.w=w;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(getCapDev(stack).isNetworkEncoder());}  }
class C{  private boolean checkSequenceNumber(Authenticator authenticator,byte type) throws IOException {  if (connectionState >= cs_ERROR || authenticator == MAC.NULL) {    return false;  }  if (authenticator.seqNumOverflow()) {    if (debug != null && Debug.isOn("ssl")) {      System.out.println(Thread.currentThread().getName() + ", sequence number extremely close to overflow " + "(2^64-1 packets). Closing connection.");    }    fatal(Alerts.alert_handshake_failure,"sequence number overflow");    return true;  }  if ((type != Record.ct_handshake) && authenticator.seqNumIsHuge()) {    if (debug != null && Debug.isOn("ssl")) {      System.out.println(Thread.currentThread().getName() + ", request renegotiation " + "to avoid sequence number overflow");    }    beginHandshake();    return true;  }  return false;}  }
class C{  public boolean isWindowed(){  return windowed;}  }
class C{  public void putConstraint(String e1,Component c1,Spring s,String e2,Component c2){  putConstraint(e1,c1,Spring.sum(s,getConstraint(e2,c2)));}  }
class C{  public Swagger2MarkupConfigBuilder withInterDocumentCrossReferences(){  config.interDocumentCrossReferencesEnabled=true;  return this;}  }
class C{  public DesktopCouplingManager(final SimbrainDesktop desktop,final GenericJInternalFrame frame){  super(new BorderLayout());  this.desktop=desktop;  this.frame=frame;  Border leftBorder=BorderFactory.createTitledBorder("Producers");  producingAttributes=new PotentialAttributePanel(desktop.getWorkspace(),ProducerOrConsumer.Producing);  producingAttributes.setBorder(leftBorder);  Border rightBorder=BorderFactory.createTitledBorder("Consumers");  consumingAttributes=new PotentialAttributePanel(desktop.getWorkspace(),ProducerOrConsumer.Consuming);  consumingAttributes.setBorder(rightBorder);  JPanel bottomPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));  bottomPanel.add(new JButton(new ShowHelpAction("Pages/Workspace/Couplings.html")));  bottomPanel.add(couplingMethodComboBox);  JButton addCouplingsButton=new JButton("Add Coupling(s)");  addCouplingsButton.setActionCommand("addCouplings");  addCouplingsButton.addActionListener(this);  bottomPanel.add(addCouplingsButton);  JButton okButton=new JButton("OK");  okButton.setActionCommand("ok");  okButton.addActionListener(this);  bottomPanel.add(okButton);  JButton cancelButton=new JButton("Cancel");  cancelButton.setActionCommand("cancel");  cancelButton.addActionListener(this);  bottomPanel.add(cancelButton);  JComponent couplingList=new CouplingListPanel(desktop,new Vector(desktop.getWorkspace().getCouplingManager().getCouplings()));  couplingList.setBorder(BorderFactory.createTitledBorder("Couplings"));  JPanel centerPanel=new JPanel(new GridLayout(1,3,10,10));  centerPanel.add(producingAttributes);  centerPanel.add(couplingList);  centerPanel.add(consumingAttributes);  centerPanel.setPreferredSize(new Dimension(800,400));  this.add("Center",centerPanel);  this.add("South",bottomPanel);  frame.getRootPane().setDefaultButton(okButton);  frame.pack();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoLdapUserPermsRecA[");  buffer.append("m_userId = ").append(m_userId);  buffer.append(", m_prodId = ").append(m_prodId);  buffer.append(", m_type = ").append(m_type);  buffer.append("]");  return buffer.toString();}  }
class C{  @DSSpec(DSCat.THREADING) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.129 -0500",hash_original_method="F5D6E902D7971393BC779DF27078ED52",hash_generated_method="62FF54BB817CCC7842C56839A52B4CB8") @Override public void run(){  while (true) {    TimerTask task;synchronized (this) {      if (cancelled) {        return;      }      if (tasks.isEmpty()) {        if (finished) {          return;        }        try {          this.wait();        } catch (        InterruptedException ignored) {        }        continue;      }      long currentTime=System.currentTimeMillis();      task=tasks.minimum();      long timeToSleep;synchronized (task.lock) {        if (task.cancelled) {          tasks.delete(0);          continue;        }        timeToSleep=task.when - currentTime;      }      if (timeToSleep > 0) {        try {          this.wait(timeToSleep);        } catch (        InterruptedException ignored) {        }        continue;      }synchronized (task.lock) {        int pos=0;        if (tasks.minimum().when != task.when) {          pos=tasks.getTask(task);        }        if (task.cancelled) {          tasks.delete(tasks.getTask(task));          continue;        }        task.setScheduledTime(task.when);        tasks.delete(pos);        if (task.period >= 0) {          if (task.fixedRate) {            task.when=task.when + task.period;          } else {            task.when=System.currentTimeMillis() + task.period;          }          insertTask(task);        } else {          task.when=0;        }      }    }    boolean taskCompletedNormally=false;    try {      task.run();      taskCompletedNormally=true;    }  finally {      if (!taskCompletedNormally) {synchronized (this) {          cancelled=true;        }      }    }  }}  }
class C{  @Override public void fillOval(int x,int y,int width,int height){  setStateToLocal();  m_printstream.println(xTransform(xScale(x)) + " " + yTransform(yScale(y))+ " "+ xScale(width)+ " "+ yScale(height)+ " true Oval");}  }
class C{  @RequestMapping(value="/_search/users/{query}",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public List<User> search(@PathVariable String query){  return StreamSupport.stream(userSearchRepository.search(queryString(query)).spliterator(),false).collect(Collectors.toList());}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit){  return offer(e);}  }
class C{  public LinkedHashMap(int initialCapacity,float loadFactor,boolean accessOrder){  super(initialCapacity,loadFactor);  this.accessOrder=accessOrder;}  }
class C{  public void attach(Portrayal3D portrayal,String name){  attach(portrayal,name,true);}  }
class C{  public void validate() throws IgniteCheckedException {  for (  CachePluginProvider provider : providersList)   provider.validate();}  }
class C{  static int signum(long lng){  return (lng == 0 ? 0 : (lng < 0 ? -1 : 1));}  }
class C{  private boolean isAttribute(){  Verbosity verbosity=format.getVerbosity();  if (verbosity != null) {    return verbosity == LOW;  }  return false;}  }
class C{  public byte loadByte(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return (byte)0;}  }
class C{  protected Iterator<TMember> nextIter(){switch (source) {case OWNED:    if (returnConsumed) {      source=CONSUMED;      return consumed.iterator();    }case CONSUMED:{    source=INHERITED;    return members(source).iterator();  }case INHERITED:{  source=IMPLEMENTED;  return members(source).iterator();}case IMPLEMENTED:default :source=-1;return null;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:04.931 -0500",hash_original_method="E4A04FCA37D7E9FFFC1F15D63F30923E",hash_generated_method="941CB903E09ACFA666CAB312718BD14B") protected boolean hasDividerBeforeChildAt(int childIndex){  if (childIndex == 0) {    return (mShowDividers & SHOW_DIVIDER_BEGINNING) != 0;  } else   if (childIndex == getChildCount()) {    return (mShowDividers & SHOW_DIVIDER_END) != 0;  } else   if ((mShowDividers & SHOW_DIVIDER_MIDDLE) != 0) {    boolean hasVisibleViewBefore=false;    for (int i=childIndex - 1; i >= 0; i--) {      if (getChildAt(i).getVisibility() != GONE) {        hasVisibleViewBefore=true;        break;      }    }    return hasVisibleViewBefore;  }  return false;}  }
class C{  protected void handleOrDeferViewEvent(NetView viewArg){  if (this.isJoining) {synchronized (startupLock) {      startupMessages.add(new StartupEvent(viewArg));      return;    }  }  latestViewWriteLock.lock();  try {synchronized (startupLock) {      if (!processingEvents) {        startupMessages.add(new StartupEvent(viewArg));        return;      }    }    long newId=viewArg.getViewId();    LocalViewMessage v=new LocalViewMessage(address,newId,viewArg,GMSMembershipManager.this);    listener.messageReceived(v);  }  finally {    latestViewWriteLock.unlock();  }}  }
class C{  public DeterministicHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public static void step(){  counter.incrementAndGet();  if (counter.get() == maxVal) {    System.out.print(NumberFormat.getPercentInstance().format(counter.get() / (double)maxVal));    System.out.print("\n");  } else   if (counter.get() % majorTickVal == 0) {    System.out.print(NumberFormat.getPercentInstance().format(counter.get() / (double)maxVal));  } else   if (counter.get() % minorTickVal == 0) {    System.out.print(DOT);  }}  }
class C{  public void processMouseEvent(MouseEvent event,MenuElement path[],MenuSelectionManager manager){}  }
class C{  public int value(){  String s=toString();  String[] part=s.split("\\s",10);  int val=-1;  try {    int tmp=Integer.valueOf(part[8],10).intValue();    val=tmp;  } catch (  Exception e) {    log.error("Unable to get number from reply: \"" + s + "\"");  }  return val;}  }
class C{  public boolean fail(Throwable t){  if (t != null) {    this.errorHandler.accept(t);    return true;  } else {    return false;  }}  }
class C{  public boolean isPreferred(){  return preferred;}  }
class C{  @Override public boolean isDefinitelyWritable(int columnIndex){  return false;}  }
class C{  public SimpleQueryParser(Analyzer analyzer,Map<String,Float> weights){  this(analyzer,weights,-1);}  }
class C{  public TField field(){  return (TField)members[FIELD];}  }
class C{  static HeapDoublesSketch heapifyInstance(Memory srcMem){  long memCapBytes=srcMem.getCapacity();  if (memCapBytes < 8) {    throw new SketchesArgumentException("Source Memory too small: " + memCapBytes + " < 8");  }  long cumOffset=srcMem.getCumulativeOffset(0L);  Object memArr=srcMem.array();  int preLongs=extractPreLongs(memArr,cumOffset);  int serVer=extractSerVer(memArr,cumOffset);  int familyID=extractFamilyID(memArr,cumOffset);  int flags=extractFlags(memArr,cumOffset);  int k=extractK(memArr,cumOffset);  short serDeId=extractSerDeId(memArr,cumOffset);  DoublesUtil.checkDoublesSerVer(serVer);  if (serDeId != ARRAY_OF_DOUBLES_SERDE_ID) {    throw new SketchesArgumentException("Possible Corruption: serDeId incorrect: " + serDeId + " != "+ ARRAY_OF_DOUBLES_SERDE_ID);  }  boolean empty=Util.checkPreLongsFlagsCap(preLongs,flags,memCapBytes);  Util.checkFamilyID(familyID);  HeapDoublesSketch hds=newInstance(k);  if (empty) {    return hds;  }  boolean compact=(serVer == 2) | ((flags & COMPACT_FLAG_MASK) > 0);  long n=extractN(memArr,cumOffset);  DoublesUtil.checkMemCapacity(k,n,compact,memCapBytes);  hds.n_=n;  hds.combinedBufferItemCapacity_=computeExpandedCombinedBufferItemCapacity(k,n);  hds.baseBufferCount_=computeBaseBufferItems(k,n);  hds.bitPattern_=computeBitPattern(k,n);  hds.combinedBuffer_=new double[hds.combinedBufferItemCapacity_];  hds.srcMemoryToCombinedBuffer(compact,srcMem);  return hds;}  }
class C{  public String write(final Entry entry){  String key=null;  try {    final Entry oldEntry=read(entry.key);    final Date oldDate=oldEntry.date();    entry.setAncestorDate(oldDate);    oldEntry.setChild(entry.subject());    this.bkpbase.insert(UTF8.getBytes(entry.key + dateString(oldDate)),oldEntry.record);    this.datbase.insert(UTF8.getBytes(entry.key),entry.record);    key=entry.key;  } catch (  final Exception e) {    ConcurrentLog.logException(e);  }  return key;}  }
class C{  private String resolvePrefix(String reference){  NamespaceMap parent=source.getNamespaces();  if (parent != null) {    String prefix=parent.getPrefix(reference);    if (!containsValue(prefix)) {      return prefix;    }  }  return null;}  }
class C{  public RequestHandle post(String url,ResponseHandlerInterface responseHandler){  return post(null,url,null,responseHandler);}  }
class C{  public InputStream createDecryptedInputStream(byte[] key,InputStream inputStream) throws IOException {  Cipher cipher;  if ((flags & FLAG_RIJNDAEL) == 0) {    throw new IllegalStateException("StreamEncryptor algorithm is not supported");  }  byte[] finalKeyDigest=Encryption.getFinalKeyDigest(key,masterSeed,transformSeed,transformRounds);  return Encryption.getDecryptedInputStream(inputStream,finalKeyDigest,encryptionIv);}  }
class C{  private static void SetDoubleField(JNIEnvironment env,int objJREF,int fieldID,double value){  if (traceJNI)   VM.sysWrite("JNI called: SetDoubleField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setDoubleValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public SortingFocusTraversalPolicy(Comparator<? super Component> comparator){  this.comparator=comparator;}  }
class C{  public T caseSingleton_(Singleton_ object){  return null;}  }
class C{  public Enumeration<Permission> elements(){  Vector<Permission> v=new Vector<>(1);  if (all_allowed)   v.add(CryptoAllPermission.INSTANCE);  return v.elements();}  }
class C{  public PNormNormalization(double p){  if (p <= 0 || Double.isNaN(p))   throw new IllegalArgumentException("p must be greater than zero, not " + p);  this.p=p;}  }
class C{  private boolean resourceIsGwtXmlAndInGwt(IResource resource) throws CoreException {  return GWTNature.isGWTProject(resource.getProject()) && resource.getName().endsWith(".gwt.xml");}  }
