class C{  public static String readString(DataInputStream in) throws IOException {  int llength=in.readInt();  if (llength == -1)   return null;  byte a[]=new byte[llength];  in.readFully(a,0,llength);  return new String(a);}  }
class C{  public Fail(String message){  this.message=message;}  }
class C{  @PickTriggerResult public int fromGallery(){  return this.triggerPick(this.prepareGalleryIntent(),QiPick.REQ_GALLERY);}  }
class C{  public static boolean hasColumn(String tableName){switch (tableName) {case COLUMN_NUMBER:    return true;default :  return false;}}  }
class C{  public Arguments newArgumentList(Value arg1,Value arg2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public String binarizeNumericAttributesTipText(){  return "Just binarize numeric attributes instead of properly discretizing them.";}  }
class C{  public void accumulate(){  for (int i=0; i < iflen; i++)   iforces[i].init(this);  for (int i=0; i < sflen; i++)   sforces[i].init(this);  Iterator itemIter=items.iterator();  while (itemIter.hasNext()) {    ForceItem item=(ForceItem)itemIter.next();    item.force[0]=0.0f;    item.force[1]=0.0f;    for (int i=0; i < iflen; i++)     iforces[i].getForce(item);  }  Iterator springIter=springs.iterator();  while (springIter.hasNext()) {    Spring s=(Spring)springIter.next();    for (int i=0; i < sflen; i++) {      sforces[i].getForce(s);    }  }}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(com.android.volley.VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public FriendsGetQueryWithFields userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  private static String cityFromGoogleResponse(final JSONObject json){  final JSONArray matches=json.optJSONArray(GoogleKey.RESULTS);  String city;  city=cityFromGoogleMatchesList(matches,GoogleKey.FORMATTED_ADDRESS);  if (city == null && matches != null && matches.length() > 0) {    final JSONArray addressComponents=matches.getJSONObject(0).optJSONArray(GoogleKey.ADDRESS_COMPONENTS);    city=cityFromGoogleMatchesList(addressComponents,GoogleKey.LONG_NAME);  }  return city;}  }
class C{  public Page pack(Array<Rect> rects,FreeRectChoiceHeuristic method){  rects=new Array(rects);  while (rects.size > 0) {    int bestRectIndex=-1;    Rect bestNode=new Rect();    bestNode.score1=Integer.MAX_VALUE;    bestNode.score2=Integer.MAX_VALUE;    for (int i=0; i < rects.size; i++) {      Rect newNode=scoreRect(rects.get(i),method);      if (newNode.score1 < bestNode.score1 || (newNode.score1 == bestNode.score1 && newNode.score2 < bestNode.score2)) {        bestNode.set(rects.get(i));        bestNode.score1=newNode.score1;        bestNode.score2=newNode.score2;        bestNode.x=newNode.x;        bestNode.y=newNode.y;        bestNode.width=newNode.width;        bestNode.height=newNode.height;        bestNode.rotated=newNode.rotated;        bestRectIndex=i;      }    }    if (bestRectIndex == -1)     break;    placeRect(bestNode);    rects.removeIndex(bestRectIndex);  }  Page result=getResult();  result.remainingRects=rects;  return result;}  }
class C{  public FTPProxyConnector(String proxyHost,int proxyPort){  this(proxyHost,proxyPort,"anonymous","ftp4j");}  }
class C{  private <T>T send(String method,TypeReference<T> responseType,@Nullable Object entity){  try {    InputStream responseStream=entity == null ? builder().method(method,InputStream.class) : builder().method(method,InputStream.class,shadingSafeEntity(entity));    return EntityHelper.getEntity(responseStream,responseType);  } catch (  UniformInterfaceException e) {    throw asEmoClientException(e);  }}  }
class C{  public static String exceptionStackTraceToString(Exception ex){  StringWriter errors=new StringWriter();  ex.printStackTrace(new PrintWriter(errors));  return errors.toString();}  }
class C{  public String process(Item seg) throws ProcessException {  return segOnsetCtype(seg,"s");}  }
class C{  public static String normalizeColumnValueForItsDataType(String value,CarbonDimension dimension){  try {    Object parsedValue=null;switch (dimension.getDataType()) {case DECIMAL:      return parseStringToBigDecimal(value,dimension);case INT:case LONG:    parsedValue=normalizeIntAndLongValues(value,dimension.getDataType());  break;case DOUBLE:parsedValue=Double.parseDouble(value);break;default :return value;}if (null != parsedValue) {return value;}return null;} catch (Exception e) {return null;}}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    StandardData standardData=getStandardData();    double minScale=getMinimumValue(fieldConfigManager.get(FieldIdEnum.MINIMUM_SCALE));    double maxScale=getMaximumValue(fieldConfigManager.get(FieldIdEnum.MAXIMUM_SCALE));    String filterText=fieldConfigVisitor.getText(FieldIdEnum.FILTER);    Filter filter=originalFilter;    if (originalFilter == null) {      try {        if (!filterText.isEmpty()) {          filter=CQL.toFilter(filterText);        }      } catch (      CQLException e) {        filter=originalFilter;        ConsoleManager.getInstance().exception(this,e);      }    }    org.geotools.styling.Rule existingRule=SelectedSymbol.getInstance().getRule();    if (existingRule != null) {      List<org.geotools.styling.Symbolizer> symbolizerList=existingRule.symbolizers();      org.geotools.styling.Symbolizer[] symbolizerArray=new org.geotools.styling.Symbolizer[symbolizerList.size()];      int index=0;      for (      org.geotools.styling.Symbolizer symbolizer : symbolizerList) {        symbolizerArray[index]=symbolizer;        index++;      }      GraphicLegend existingLegend=existingRule.getLegend();      Graphic[] legendGraphics=null;      if (existingLegend != null) {        int legendGraphicCount=existingLegend.graphicalSymbols().size();        legendGraphics=new Graphic[legendGraphicCount];        index=0;        for (        GraphicalSymbol graphicalSymbol : existingLegend.graphicalSymbols()) {          legendGraphics[index]=(Graphic)graphicalSymbol;          index++;        }      } else {        legendGraphics=new Graphic[0];      }      boolean isElseFilter=fieldConfigVisitor.getBoolean(FieldIdEnum.ELSE_FILTER);      Rule rule=getStyleFactory().createRule(symbolizerArray,standardData.description,legendGraphics,standardData.name,filter,isElseFilter,maxScale,minScale);      SelectedSymbol.getInstance().replaceRule((org.geotools.styling.Rule)rule);      this.fireUpdateSymbol();    }  }}  }
class C{  public DatabaseGetChairsQuery(VkApiClient client,int facultyId){  super(client,"database.getChairs",GetChairsResponse.class);  facultyId(facultyId);}  }
class C{  void agg2way(NetNode x,NetNode y){  x.nbr=y;  y.nbr=x;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_CHAR_WAREHOUSE_CANT_EXTEND_DUE_TO_MINIMUM_EXTEND_LEVEL_BY_THIS_NPC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300438,value0,value1);}  }
class C{  public static final double combinationsOfNByK(int n,int k){  return gr.demokritos.iit.jinsect.utils.factorial(n,k);}  }
class C{  public static RoutingService.Builder buildRoutingService(RoutingService routingService){  return new RoutingServiceProvider(routingService);}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public RVController(Npc slave,RiftEnum riftTemplate){  this.riftTemplate=riftTemplate;  this.isVortex=riftTemplate.isVortex();  this.maxEntries=riftTemplate.getEntries();  this.minLevel=riftTemplate.getMinLevel();  this.maxLevel=riftTemplate.getMaxLevel();  this.deSpawnedTime=((int)(System.currentTimeMillis() / 1000)) + (isVortex ? VortexService.getInstance().getDuration() * 3600 : RiftService.getInstance().getDuration() * 3600);  if (slave != null) {    this.slave=slave;    this.slaveSpawnTemplate=slave.getSpawn();    isMaster=true;    isAccepting=true;  }}  }
class C{  public static String mapFullWidthLetterToHalfWidth(String text){}  }
class C{  public boolean isVoiced(){  Allophone allophone=getAllophone();  return allophone.isVoiced();}  }
class C{  private void init(){  mPaint=new Paint();  mPath=new Path();  startPoint=new Point(300,100);  endPoint=new Point(900,100);  assistPoint=new Point(600,300);  mPaint.setAntiAlias(true);  mPaint.setDither(true);}  }
class C{  public FisheyeTreeFilter(String group){  this(group,1);}  }
class C{  @Override public AemTextArea clear(){  thisAemElement.clear();  return this;}  }
class C{  public boolean isSet(final OPTION option){  return options == null ? false : options.contains(option);}  }
class C{  @Override public Node nextNode(){  if (fCurrentNode == null)   return null;  Node result=getFirstChild(fCurrentNode);  if (result != null) {    fCurrentNode=result;    return result;  }  result=getNextSibling(fCurrentNode);  if (result != null) {    fCurrentNode=result;    return result;  }  Node parent=getParentNode(fCurrentNode);  while (parent != null) {    result=getNextSibling(parent);    if (result != null) {      fCurrentNode=result;      return result;    } else {      parent=getParentNode(parent);    }  }  return null;}  }
class C{  @Nullable public PsiElement resolveLabel(Label label){  return resolveLabel(label.blazePackage(),label.ruleName(),false);}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  ActiveElectionState(State state){  setState(state);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DONT_USE_ITEM_BY_NOT_MENTEE(String value1){  return new SM_SYSTEM_MESSAGE(1400774,value1);}  }
class C{  private static double mlsafir(double x,double b[],int m,double a,double d[],int _pt3){  d[_pt3 + 0]=x;  d[_pt3 + 1]=(1 - a * a) * d[_pt3 + 0] + (a * d[_pt3 + 1]);  for (int i=2; i <= m; i++) {    d[_pt3 + i]+=a * (d[_pt3 + i + 1] - d[_pt3 + i - 1]);  }  double y=0.0;  for (int i=2; i <= m; i++) {    y+=d[_pt3 + i] * b[i];  }  for (int i=m + 1; i > 1; i--) {    d[_pt3 + i]=d[_pt3 + i - 1];  }  return y;}  }
class C{  public boolean addFrame(BufferedImage im){  if ((im == null) || !started) {    return false;  }  boolean ok=true;  try {    if (!sizeSet) {      setSize(im.getWidth(),im.getHeight());    }    image=im;    getImagePixels();    analyzePixels();    if (firstFrame) {      writeLSD();      writePalette();      if (repeat >= 0) {        writeNetscapeExt();      }    }    writeGraphicCtrlExt();    writeImageDesc();    if (!firstFrame) {      writePalette();    }    writePixels();    firstFrame=false;  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  public ExplainPlan(Plan p){  this.p=p;}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  FailOverPolicy.FailOverPolicyDescription copy=(FailOverPolicy.FailOverPolicyDescription)is.readObject();  is.close();  os.close();  assertNull(copy.m_BackupMemberNames);  assertNull(copy.m_BackupOnly);  assertEquals(-1,copy.m_PolicyType);}  }
class C{  public ZWaveThermostatFanModeCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  boolean checkMessageForConsumer(GSMessageImpl message) throws JMSException {  if (!isValid(message)) {    long ttl=message.getJMSExpiration();    Time expTime=new Time(ttl);    if (_logger.isLoggable(Level.FINE)) {      _logger.fine(toString2() + "Not delivering JMS message < " + message.JMSMessageID+ " > due to expiration: "+ expTime);    }    return false;  }  if (m_noLocal) {    String prodConnection=message.getStringProperty(GSMessageImpl.JMS_GSCONNECTION_KEY_NAME);    boolean pass=!connectionKey.equals(prodConnection);    if (!pass && _logger.isLoggable(Level.FINE)) {      _logger.fine(toString2() + "Not delivering JMS message < " + message.JMSMessageID+ " > due to noLocal attribute.");    }    return pass;  }  return true;}  }
class C{  @Override public boolean equals(Object other){  boolean equal=super.equals(other);  if (!equal && other instanceof AccessToken) {    equal=Objects.equals(this.token_type,((AccessToken)other).token_type);    equal&=Objects.equals(this.getTokenVersion(),((AccessToken)other).getTokenVersion());    equal&=Objects.equals(this.getIUSToken(),((AccessToken)other).getIUSToken());    equal&=Objects.equals(this.getTokenUserId(),((AccessToken)other).getTokenUserId());  }  return equal;}  }
class C{  public boolean isEnable(){  return enable;}  }
class C{  private boolean isOff(long flag){  return (options & flag) == 0;}  }
class C{  public double[] extractParameterJacobian(final ODEState state,final String pName){  final double[] p=state.getSecondaryState(index);  final double[] dYdP=new double[stateDim];  int i=stateDim * stateDim;  for (  MutableParameterConfiguration param : selectedParameters) {    if (param.getParameterName().equals(pName)) {      System.arraycopy(p,i,dYdP,0,stateDim);      break;    }    i+=stateDim;  }  return dYdP;}  }
class C{  public HumanTime d(int n){  delta+=DAY * Math.abs(n);  return this;}  }
class C{  @Override public boolean isXIncludeAware(){  try {    return domParser.getFeature(XINCLUDE_FEATURE);  } catch (  SAXException exc) {    return false;  }}  }
class C{  private void checkDouble(double expected,String string,int delta){  long expectedBits=Double.doubleToRawLongBits(expected);  BytesRef bytes=getBytes(string);  final double v;  try {    v=MathUtil.parseDouble(bytes.bytes,bytes.offset,bytes.length);  } catch (  Throwable t) {    throw new AssertionError(string + " didn't parse to " + expected+ ", instead hit "+ t,t);  }  try {    long actualBits=Double.doubleToRawLongBits(v);    long actualDelta=Math.abs(expectedBits - actualBits);    if (actualDelta > delta) {      throw new AssertionError("expected: <" + expectedBits + "> but was:<"+ actualBits+ ">");    }  } catch (  Throwable t) {    throw new AssertionError(string + " didn't parse to " + expected+ ", instead: "+ v,t);  }}  }
class C{  public HypergeometricDistribution(int populationSize,int numberOfSuccesses,int sampleSize) throws MathIllegalArgumentException {  if (populationSize <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.POPULATION_SIZE,populationSize);  }  if (numberOfSuccesses < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);  }  if (sampleSize < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_SAMPLES,sampleSize);  }  if (numberOfSuccesses > populationSize) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,numberOfSuccesses,populationSize,true);  }  if (sampleSize > populationSize) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);  }  this.numberOfSuccesses=numberOfSuccesses;  this.populationSize=populationSize;  this.sampleSize=sampleSize;  this.numericalVariance=calculateNumericalVariance();}  }
class C{  void removeJMSAckDataEntryFromSpace(JMSAckDataEntry ackDataEntry) throws JMSException {  try {    m_space.clear(ackDataEntry,null);  } catch (  EntryAlreadyInSpaceException entryInSpaceException) {    JMSException e=new JMSException("EntryAlreadyInSpaceException in GSSessionImpl.removeJMSAckDataEntryFromSpace()");    e.setLinkedException(entryInSpaceException);    throw e;  }catch (  TransactionException te) {    JMSException e=new JMSException("TransactionException in GSSessionImpl.removeJMSAckDataEntryFromSpace()");    e.setLinkedException(te);    throw e;  }catch (  UnusableEntryException uue) {    if (uue instanceof EntryNotInSpaceException) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"GSSessionImpl.removeJMSAckDataEntryFromSpace(): The Entry " + ((EntryNotInSpaceException)uue).getUID() + " No Longer In Space "+ uue.getCause(),uue);      }    } else {      final JMSException ex=new JMSException("UnusableEntryException : ");      ex.setLinkedException(uue);      throw ex;    }  }catch (  RemoteException re) {    JMSException e=new JMSException("RemoteException in GSSessionImpl.removeJMSAckDataEntryFromSpace()" + re.toString());    e.setLinkedException(re);    throw e;  }}  }
class C{  public boolean hasSingleIndicatorAsDataFilter(){  return getFilterIndicators().size() == 1 && getFilterOptions(DATA_X_DIM_ID).size() == 1;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public FragmentDelegate(DelegateCallback<T,S> callback,Fragment delegatedFragment){  super(callback);  this.delegatedFragment=delegatedFragment;  cache=new ViewModelCache();}  }
class C{  public static double[] lpc2lpcc(double[] oneMinusA,double gain,int cepstrumOrder){  if (cepstrumOrder <= 0) {    throw new RuntimeException("The cepstrum order [" + cepstrumOrder + "] must be a positive integer.");  }  int k, m;  double acc;  double[] c=new double[cepstrumOrder + 1];  int lpcOrder=oneMinusA.length - 1;  c[0]=Math.log(gain);  for (m=1; m <= cepstrumOrder; m++) {    if (m <= lpcOrder) {      acc=0.0;      for (k=1; k < m; k++)       acc+=((m - k) * oneMinusA[k] * c[m - k]);      c[m]=acc / (m) + oneMinusA[m];    } else {      acc=0.0;      for (k=1; k <= lpcOrder; k++)       acc+=((m - k) * oneMinusA[k] * c[m - k]);      c[m]=acc / (m);    }  }  return (c);}  }
class C{  public void add(Predicate p,double size){  super.add(p,new Double(size));}  }
class C{  private void updateItemPosition(ModelState item,List<UpdateOp> moveOps){  int size=moveOps.size();  for (int i=item.lastMoveOp; i < size; i++) {    UpdateOp moveOp=moveOps.get(i);    int fromPosition=moveOp.positionStart;    int toPosition=moveOp.itemCount;    if (item.position > fromPosition && item.position <= toPosition) {      item.position--;    } else     if (item.position < fromPosition && item.position >= toPosition) {      item.position++;    }  }  item.lastMoveOp=size;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  public static Type toBaseType(String internal){  if (internal.charAt(0) == '[') {    internal=internal.substring(internal.lastIndexOf('[') + 1,internal.length());  }  if (internal.charAt(internal.length() - 1) == ';') {    internal=internal.substring(0,internal.length() - 1);    if (internal.charAt(0) == 'L') {      internal=internal.substring(1,internal.length());    }    internal=toQualifiedName(internal);    return RefType.v(internal);  }switch (internal.charAt(0)) {case 'Z':    return BooleanType.v();case 'B':  return ByteType.v();case 'C':return CharType.v();case 'S':return ShortType.v();case 'I':return IntType.v();case 'F':return FloatType.v();case 'J':return LongType.v();case 'D':return DoubleType.v();default :internal=toQualifiedName(internal);return RefType.v(internal);}}  }
class C{  @Override protected String dateToString(DateTimeData date){  StringBuffer message=new StringBuffer(5);  append(message,date.year,4);  append(message,(char)date.utc,0);  return message.toString();}  }
class C{  public static final int find(int[] a,int key,int begin,int end){  for (int i=begin; i < end; i++) {    if (a[i] == key) {      return i;    }  }  return -1;}  }
class C{  public TIntHash(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity);  this._hashingStrategy=strategy;}  }
class C{  public void java_lang_Class_getClassLoader0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassLoaderObject());}  }
class C{  void neverEverAskForThatPermissionAgain(String permission){  sharedPreferences.edit().putBoolean(permission,true).apply();}  }
class C{  @Override public void flush(){}  }
class C{  private void addConnectionNode(GeoServerConnection connection){  GeoServerNode node=new GeoServerNode(this,connection);  getRootGeoServerNode().add(node);  progress.addNewConnectionNode(connection,node);}  }
class C{  private void loadText(InputStream is) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(is));  String line=null;  while ((line=reader.readLine()) != null) {    if (!line.startsWith("***")) {      if (line.startsWith(VOCAB_SIZE)) {        vocabularySize=parseLastInt(line);      } else       if (line.startsWith(NUM_OF_TRANSITIONS)) {        int transitionsSize=parseLastInt(line);        transitions=new int[transitionsSize];      } else       if (line.startsWith(TRANSITIONS)) {        StringTokenizer st=new StringTokenizer(line);        String transition=st.nextToken();        int i=0;        while (st.hasMoreTokens() && i < transitions.length) {          transition=st.nextToken().trim();          transitions[i++]=Integer.parseInt(transition);        }      }    }  }  reader.close();}  }
class C{  @Override protected void loadData() throws IOException, MaryConfigurationException {  cart=new DirectedGraphReader().load(dataStream);  try {    predictionFeatureNames=cart.getFeatureDefinition().getFeatureNames();  } catch (  NullPointerException e) {    throw new IOException("Could not get FeatureDefinition from CART",e);  }  if (predictionFeatureNames.length() == 0) {    throw new IOException("Could not get prediction feature names");  }}  }
class C{  public boolean contains(int legionId){  return legionsById.containsKey(legionId);}  }
class C{  Collection<? extends ClientRequestResult> handleTagStatisticsRequest(final ClientRequest tagStatisticsRequest){  Collection<TagStatisticsResponse> tagStatistics=new ArrayList<>();  Map<String,ProcessTagStatistics> processes=new HashMap<>();  int total=0;  int invalid=0;  for (  Long processId : processCache.getKeys()) {    ProcessTagStatistics processStatistics=new ProcessTagStatistics(processCache.getNumTags(processId),processCache.getNumInvalidTags(processId));    total+=processStatistics.getTotal();    invalid+=processStatistics.getInvalid();    processes.put(processCache.get(processId).getName(),processStatistics);  }  tagStatistics.add(new TagStatisticsResponseImpl(total,invalid,processes));  LOG.debug("Finished processing tag statistics request request");  return tagStatistics;}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<ManagedUserDTO> updateUser(@RequestBody ManagedUserDTO managedUserDTO){  log.debug("REST request to update User : {}",managedUserDTO);  Optional<User> existingUser=userRepository.findOneByEmail(managedUserDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserDTO.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","emailexists","E-mail already in use")).body(null);  }  existingUser=userRepository.findOneByLogin(managedUserDTO.getLogin().toLowerCase());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserDTO.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","userexists","Login already in use")).body(null);  }  return userRepository.findOneById(managedUserDTO.getId()).map(null).orElseGet(null);}  }
class C{  public static boolean bernoulli(){  return bernoulli(0.5);}  }
class C{  public SearchOptions(String searchValue,boolean matchCase){  this.searchValue=searchValue;  this.matchCase=matchCase;}  }
class C{  public static Collection<Map<String,Object>> parseMultiFormData(Map<String,Object> parameters){  Map<Integer,Map<String,Object>> rows=new HashMap<Integer,Map<String,Object>>();  for (  String key : parameters.keySet()) {    if (key == null || key.length() <= ROW_SUBMIT_PREFIX_LENGTH)     continue;    if (key.indexOf(MULTI_ROW_DELIMITER) <= 0)     continue;    if (!key.substring(0,ROW_SUBMIT_PREFIX_LENGTH).equals(ROW_SUBMIT_PREFIX))     continue;    if (!parameters.get(key).equals("Y"))     continue;    Integer n=Integer.decode(key.substring(ROW_SUBMIT_PREFIX_LENGTH,key.length()));    Map<String,Object> m=new HashMap<String,Object>();    m.put("row",n);    rows.put(n,m);  }  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {    String key=entry.getKey();    if (key == null)     continue;    int index=key.indexOf(MULTI_ROW_DELIMITER);    if (index <= 0)     continue;    if (key.length() > ROW_SUBMIT_PREFIX_LENGTH && key.substring(0,ROW_SUBMIT_PREFIX_LENGTH).equals(ROW_SUBMIT_PREFIX))     continue;    Integer n=Integer.decode(key.substring(index + MULTI_ROW_DELIMITER_LENGTH,key.length()));    Map<String,Object> map=rows.get(n);    if (map == null)     continue;    String newKey=key.substring(0,index);    map.put(newKey,entry.getValue());  }  return rows.values();}  }
class C{  @VisibleForTesting private void handlePostRequestIntent(Intent intent){  if (!hasRequest()) {    return;  }  long currentTimestamp=getBackoffScheduler().getCurrentTime();  if (currentTimestamp >= mTimestampForNextPostAttempt) {    String sessionID=generateRandomUUID();    boolean sendingInstallRequest=mSendInstallEvent;    boolean succeeded=generateAndPostRequest(currentTimestamp,sessionID);    if (succeeded && sendingInstallRequest) {      mSendInstallEvent=false;      registerNewRequest(currentTimestamp);      generateAndPostRequest(currentTimestamp,sessionID);    }  } else {    Intent postIntent=createPostRequestIntent(this);    getBackoffScheduler().createAlarm(postIntent,mTimestampForNextPostAttempt);  }  saveState();}  }
class C{  public boolean isApplicable(){  CompareWindow viewer=(CompareWindow)getParent();  return viewer != null;}  }
class C{  public boolean interiorContains(S2LatLng ll){  return (lat.interiorContains(ll.lat().radians()) && lng.interiorContains(ll.lng().radians()));}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public static boolean verifyProjectView(BlazeContext context,WorkspaceRoot workspaceRoot,ProjectViewSet projectViewSet,WorkspaceLanguageSettings workspaceLanguageSettings){  if (!verifyIncludedPackagesExistOnDisk(context,workspaceRoot,projectViewSet)) {    return false;  }  if (!verifyIncludedPackagesAreNotExcluded(context,projectViewSet)) {    return false;  }  for (  BlazeSyncPlugin syncPlugin : BlazeSyncPlugin.EP_NAME.getExtensions()) {    if (!syncPlugin.validateProjectView(context,projectViewSet,workspaceLanguageSettings)) {      return false;    }  }  if (!projectViewSet.listItems(ExcludedSourceSection.KEY).isEmpty()) {    IssueOutput.warn("excluded_sources is deprecated and has no effect.").inFile(projectViewSet.getTopLevelProjectViewFile().projectViewFile).submit(context);  }  return true;}  }
class C{  public void append(String fileName,InputStream inputStream,long streamOffset,FTPDataTransferListener listener) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    int tp=type;    if (tp == TYPE_AUTO) {      tp=detectType(fileName);    }    if (tp == TYPE_TEXTUAL) {      communication.sendFTPCommand("TYPE A");    } else     if (tp == TYPE_BINARY) {      communication.sendFTPCommand("TYPE I");    }    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    boolean wasAborted=false;    FTPDataTransferConnectionProvider provider=openDataTransferChannel();    communication.sendFTPCommand("APPE " + fileName);    try {      Socket dtConnection;      try {        dtConnection=provider.openDataTransferConnection();      }  finally {        provider.dispose();      }synchronized (abortLock) {        ongoingDataTransfer=true;        aborted=false;        consumeAborCommandReply=false;      }      try {        inputStream.skip(streamOffset);        dataTransferOutputStream=dtConnection.getOutputStream();        if (modezEnabled) {          dataTransferOutputStream=new DeflaterOutputStream(dataTransferOutputStream);        }        if (listener != null) {          listener.started();        }        if (tp == TYPE_TEXTUAL) {          Reader reader=new InputStreamReader(inputStream);          Writer writer=new OutputStreamWriter(dataTransferOutputStream,pickCharset());          char[] buffer=new char[SEND_AND_RECEIVE_BUFFER_SIZE];          int l;          while ((l=reader.read(buffer)) != -1) {            writer.write(buffer,0,l);            writer.flush();            if (listener != null) {              listener.transferred(l);            }          }        } else         if (tp == TYPE_BINARY) {          byte[] buffer=new byte[SEND_AND_RECEIVE_BUFFER_SIZE];          int l;          while ((l=inputStream.read(buffer)) != -1) {            dataTransferOutputStream.write(buffer,0,l);            dataTransferOutputStream.flush();            if (listener != null) {              listener.transferred(l);            }          }        }      } catch (      IOException e) {synchronized (abortLock) {          if (aborted) {            if (listener != null) {              listener.aborted();            }            throw new FTPAbortedException();          } else {            if (listener != null) {              listener.failed();            }            throw new FTPDataTransferException("I/O error in data transfer",e);          }        }      } finally {        if (dataTransferOutputStream != null) {          try {            dataTransferOutputStream.close();          } catch (          Throwable t) {            ;          }        }        try {          dtConnection.close();        } catch (        Throwable t) {          ;        }        dataTransferOutputStream=null;synchronized (abortLock) {          wasAborted=aborted;          ongoingDataTransfer=false;          aborted=false;        }      }    }  finally {      r=communication.readFTPReply();      touchAutoNoopTimer();      if (r.getCode() != 150 && r.getCode() != 125) {        throw new FTPException(r);      }      r=communication.readFTPReply();      if (!wasAborted && r.getCode() != 226) {        throw new FTPException(r);      }      if (consumeAborCommandReply) {        communication.readFTPReply();        consumeAborCommandReply=false;      }    }    if (listener != null) {      listener.completed();    }  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  void useSAXParser(){  LitePalContentHandler handler=null;  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    XMLReader xmlReader=factory.newSAXParser().getXMLReader();    handler=new LitePalContentHandler();    xmlReader.setContentHandler(handler);    xmlReader.parse(new InputSource(getConfigInputStream()));    return;  } catch (  NotFoundException e) {    throw new ParseConfigurationFileException(ParseConfigurationFileException.CAN_NOT_FIND_LITEPAL_FILE);  }catch (  SAXException e) {    throw new ParseConfigurationFileException(ParseConfigurationFileException.FILE_FORMAT_IS_NOT_CORRECT);  }catch (  ParserConfigurationException e) {    throw new ParseConfigurationFileException(ParseConfigurationFileException.PARSE_CONFIG_FAILED);  }catch (  IOException e) {    throw new ParseConfigurationFileException(ParseConfigurationFileException.IO_EXCEPTION);  }}  }
class C{  public static String graphToDot(UniqueVertexGraph gTree,boolean bDirected){  StringBuffer sb=new StringBuffer();  String sConnector;  boolean bDistroGraph=gTree instanceof DistributionGraph;  if (!bDirected) {    sb.append("graph {\n");    sConnector="--";  } else {    sb.append("digraph {\n");    sConnector="->";  }  Iterator iIter=gTree.getEdgeSet().iterator();  while (iIter.hasNext()) {    Edge e=(Edge)iIter.next();    String sA="_" + e.getVertexA().toString().replaceAll("\\W","_");    String sB="_" + e.getVertexB().toString().replaceAll("\\W","_");    String sLabel="";    if (e instanceof WeightedEdge) {      sLabel+=String.format("%4.2f",((WeightedEdge)e).getWeight());    }    if (bDistroGraph) {      Distribution dTmp;      if ((dTmp=(Distribution)((DistributionGraph)gTree).EdgeDistros.get(e)) != null)       sLabel+=" - Distro: " + dTmp.toString();    }    if (e instanceof WeightedEdge)     sb.append("\t" + sA + " "+ sConnector+ " "+ sB+ " [label=\""+ sLabel.replaceAll("\\s+"," ")+ "\"]\n"); else     sb.append("\t" + sA + " "+ sConnector+ " "+ sB+ "\n");    sb.append("\t" + sA + " [label=\""+ sA+ "\"] "+ "\n");  }  sb.append("}");  return sb.toString();}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public MainViewModel(AppPreferences preferences){  this.preferences=preferences;}  }
class C{  @Override public String doRender(Object o){  if (o != null) {    if (o instanceof Alarm) {      Alarm alarm=(Alarm)o;      StringBuffer str=new StringBuffer();      str.append(alarm.getId());      str.append('\t');      str.append(alarm.getTagId());      str.append('\t');      str.append(alarm.getTimestamp());      str.append('\t');      str.append(alarm.getFaultFamily());      str.append('\t');      str.append(alarm.getFaultMember());      str.append('\t');      str.append(alarm.getFaultCode());      str.append('\t');      str.append(alarm.getState());      if (alarm.getInfo() != null) {        str.append('\t');        str.append(alarm.getInfo());      }      return str.toString();    } else {      return o.toString();    }  } else {    return null;  }}  }
class C{  @Override public void run(){  logger.finest("LookupDiscovery - Requestor thread started");  int count;  try {    if (delayFlag && (initialMulticastRequestDelayRange > 0) && (multicastRequestMax >= 0)) {      Thread.sleep((long)(Math.random() * initialMulticastRequestDelayRange));    }    for (count=multicastRequestMax; --count >= 0 && !isInterrupted(); ) {      DatagramPacket[] reqs=encodeMulticastRequest(new MulticastRequest(multicastRequestHost,responsePort,groups,getServiceIDs()));      sendPacketByNIC(sock,reqs);      Thread.sleep(count > 0 ? multicastRequestInterval : finalMulticastRequestInterval);    }  } catch (  InterruptedException e) {  }catch (  InterruptedIOException e) {  }catch (  Exception e) {    logger.log(Level.INFO,"exception while marshalling outgoing " + "multicast request",e);  } finally {synchronized (requestors) {      requestors.remove(Thread.currentThread());      if (respondeeThread != null && requestors.isEmpty()) {        respondeeThread.interrupt();        respondeeThread=null;      }    }    sock.close();    logger.finest("LookupDiscovery - Requestor thread completed");  }}  }
class C{  private int measureHeight(int measureSpec){  return MeasureSpec.getSize(measureSpec);}  }
class C{  public MulticastMaxPacketSize(int size){  if (size < MIN_MAX_PACKET_SIZE) {    throw new IllegalArgumentException("invalid size");  }  this.size=size;}  }
class C{  public static final void fillCircleFromCenter(GL2 gl,double r,double cx,double cy){  double c=COS;  double s=SIN;  double t;  double x=r;  double y=0;  gl.glBegin(GL.GL_TRIANGLE_FAN);  gl.glVertex2d(cx,cy);  for (int i=0; i <= N; i++) {    gl.glVertex2d(x + cx,y + cy);    t=x;    x=c * x - s * y;    y=s * t + c * y;  }  gl.glEnd();}  }
class C{  public Builder layers(ILayer[] layers){  this.layers=layers;  return this;}  }
class C{  private Map<String,List<ChartObject>> mapRevert(Map<String,List<ChartObject>> input){  Map<String,List<ChartObject>> result=new LinkedHashMap<>();  for (  Map.Entry<String,List<ChartObject>> entry : input.entrySet()) {    List<ChartObject> newOrder=Lists.newArrayList();    List<ChartObject> data=entry.getValue();    for (int i=(data.size() - 1); i >= 0; i--)     newOrder.add(data.get(i));    result.put(entry.getKey(),newOrder);  }  return result;}  }
class C{  public String optString(int index){  return optString(index,"");}  }
class C{  @Override public ASModel parseASInputSource(LSInput is) throws Exception {  XMLInputSource xis=this.dom2xmlInputSource(is);  try {    return parseASInputSource(xis);  } catch (  XNIException e) {    Exception ex=e.getException();    throw ex;  }}  }
class C{  public void writeTo(OutputStream out) throws IOException {  if (!closed) {    throw new IOException("Stream not closed");  }  if (isInMemory()) {    memoryOutputStream.writeTo(out);  } else {    FileInputStream fis=new FileInputStream(outputFile);    try {      IOUtils.copy(fis,out);    }  finally {      IOUtils.closeQuietly(fis);    }  }}  }
class C{  public static BufferedImage toImage(INDArray matrix){  BufferedImage img=new BufferedImage(matrix.rows(),matrix.columns(),BufferedImage.TYPE_INT_ARGB);  WritableRaster r=img.getRaster();  int[] equiv=new int[matrix.length()];  for (int i=0; i < equiv.length; i++) {    equiv[i]=(int)matrix.getDouble(i);  }  r.setDataElements(0,0,matrix.rows(),matrix.columns(),equiv);  return img;}  }
class C{  public void configureWith(ComponentConfiguration config){  verifyIsDisplayed();  configure(config);  confirm();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonSkillArea_ME_TO_B(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201148,skillcaster,skillname);}  }
class C{  protected void addPageLink(PaginationLink link,int pageNumber){  UriBuilder uriBuilder=uriInfo.getRequestUriBuilder().replaceQueryParam("page",pageNumber);  builder.header(HttpHeaders.LINK,Link.fromUriBuilder(uriBuilder).rel(link.getHeaderName()).build());}  }
class C{  private boolean canReadMessageConversation(User user,org.hisp.dhis.message.MessageConversation messageConversation){  return messageConversation.getUsers().contains(user) || user.isSuper();}  }
class C{  public boolean insert_null_checks(){  return soot.PhaseOptions.getBoolean(options,"insert-null-checks");}  }
class C{  @Override public Dfp multiply(final int x){  if (x >= 0 && x < RADIX) {    return multiplyFast(x);  } else {    return multiply(newInstance(x));  }}  }
class C{  public MessagesGetHistoryQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public DistributedLogNamespaceBuilder statsLogger(StatsLogger statsLogger){  this._statsLogger=statsLogger;  return this;}  }
class C{  protected boolean expect(TokenKind kind,boolean alwaysConsume){  return expect(kind,String.format("'%s' expected",kind),alwaysConsume);}  }
class C{  public static void sendServerListFor(int accountId){  if (accountsOnLS.containsKey(accountId)) {    accountsOnLS.get(accountId).sendPacket(new SM_SERVER_LIST());  }}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  protected void addCommonComponent(XMLComponent component){  if (fCommonComponents.contains(component)) {    return;  }  fCommonComponents.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public FriendsGetOnlineQueryWithMobile userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  @Nonnull public WorkUnit produce(){  return this;}  }
class C{  @Override protected void synchronizeChildren(){  needsSyncChildren(false);  isReadOnly(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();  ownerDocument.synchronizeChildren(this,fNodeIndex);  setReadOnly(true,true);}  }
class C{  public String render(String combinedName) throws GeneralException, IOException, SAXException, ParserConfigurationException {  String resourceName=ScreenFactory.getResourceNameFromCombined(combinedName);  String screenName=ScreenFactory.getScreenNameFromCombined(combinedName);  return this.render(resourceName,screenName,false);}  }
class C{  public List<ValidationError> validate(@Nullable AndroidFacet facet){  return commonState.validate(facet);}  }
class C{  protected LogSegmentMetadata doCompleteAndCloseLogSegment(String inprogressZnodeName,long logSegmentSeqNo,long ledgerId,long firstTxId,long lastTxId,int recordCount,long lastEntryId,long lastSlotId) throws IOException {  Promise<LogSegmentMetadata> promise=new Promise<LogSegmentMetadata>();  doCompleteAndCloseLogSegment(inprogressZnodeName,logSegmentSeqNo,ledgerId,firstTxId,lastTxId,recordCount,lastEntryId,lastSlotId,promise);  return FutureUtils.result(promise);}  }
class C{  public static boolean throwsException(Value val){  val=getEquivalentValueRoot(val);  if (val instanceof BinopExpr || val instanceof UnopExpr || val instanceof Local|| val instanceof Constant) {    if (val instanceof DivExpr || val instanceof RemExpr || val instanceof LengthExpr)     return true;    return false;  }  return true;}  }
class C{  public ContainsExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_UNSUMMONED(int value0){  return new SM_SYSTEM_MESSAGE(1200006,calculateNameId(value0));}  }
class C{  public INDArray toBgr(File file){  try {    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));    INDArray ret=toBgr(bis);    bis.close();    return ret;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void addSection(String tag,Section section){  this.sections.put(tag,section);  this.sectionViewTypeNumbers.put(tag,viewTypeCount);  viewTypeCount+=VIEW_TYPE_QTY;}  }
class C{  @Override public Intent tryLoad(TinkerApplication app,int tinkerFlag,boolean tinkerLoadVerifyFlag){  Intent resultIntent=new Intent();  long begin=SystemClock.elapsedRealtime();  tryLoadPatchFilesInternal(app,tinkerFlag,tinkerLoadVerifyFlag,resultIntent);  long cost=SystemClock.elapsedRealtime() - begin;  ShareIntentUtil.setIntentPatchCostTime(resultIntent,cost);  return resultIntent;}  }
class C{  public static double cosh(double x){  return (Math.exp(x) + Math.exp(-x)) / 2.0;}  }
class C{  private UByte(int value) throws NumberFormatException {  this.value=rangeCheck(value);}  }
class C{  public void removeItem(int itemObjId){  if (items.containsKey(itemObjId)) {    LinkedHashMap<Integer,TradePSItem> newItems=new LinkedHashMap<Integer,TradePSItem>();    for (    int itemObjIds : items.keySet()) {      if (itemObjId != itemObjIds) {        newItems.put(itemObjIds,items.get(itemObjIds));      }    }    this.items=newItems;  }}  }
class C{  public boolean isTranslationEnabled(){  return mIsTranslationEnabled;}  }
class C{  public void removeAttributes(Collection<String> attributes){  attributeOrder.removeAll(attributes);  attribute2type.keySet().removeAll(attributes);  for (  String attribute : attributes) {    table.removeColumn(attribute);  }}  }
class C{  private void extractPathLayers(@NotNull Element root,@NotNull List<Layer> layers){  for (int i=0; i < layers.size(); i++) {    Layer layer=layers.get(i);    if (!layer.isVisible())     continue;    Layer.Type type=layer.getType();    if (type == Layer.Type.SHAPE) {      if (layer.getShapeInfo().getStyle() == ShapeInfo.Style.NONE)       continue;      Shape path=getTransformedPath(layer);      if (path.getBounds2D().isEmpty())       continue;      Area clipPath=null;      float opacityModifier=1.0f;      boolean fullyClipped=false;      if (!layer.isClipBase()) {        for (int j=i + 1; j < layers.size(); j++) {          Layer clipBase=layers.get(j);          if (clipBase.isClipBase()) {            if (!clipBase.isVisible()) {              fullyClipped=true;              break;            }            if (clipBase.getType() != Layer.Type.SHAPE) {              break;            }            opacityModifier=clipBase.getOpacity();            Area source=new Area(path);            clipPath=new Area(getTransformedPath(clipBase));            source.intersect(clipPath);            path=source;            break;          }        }      }      if (!fullyClipped) {        Element element=new Element("path");        boolean hasFillOrStroke;        hasFillOrStroke=extractFill(layer,element,opacityModifier);        hasFillOrStroke|=extractStroke(layer,path,clipPath,root,element,opacityModifier);        if (hasFillOrStroke) {          element.attribute("name",StringUtil.escapeXml(layer.getName()));          element.attribute("pathData",toPathData(path,myFormat));          root.childAtFront(element);        }      }    } else     if (type == Layer.Type.GROUP) {      extractPathLayers(root,layer.getChildren());    }  }}  }
class C{  private void handleNewObjects(Collection<OpenJPAStateManager> sms,IJSpace space){  final HashMap<Class<?>,ArrayList<Object>> objectsToWriteByType=new HashMap<Class<?>,ArrayList<Object>>();  final ArrayList<OpenJPAStateManager> stateManagersToRestore=new ArrayList<OpenJPAStateManager>();  Class<?> previousType=null;  ArrayList<Object> currentList=null;  for (  OpenJPAStateManager sm : sms) {    if (_classesRelationStatus.containsKey(sm.getMetaData().getDescribedType())) {      continue;    }    _relationsManager.removeOwnedEntitiesStateManagers(stateManagersToRestore,sm);    if (!sm.getMetaData().getDescribedType().equals(previousType)) {      currentList=objectsToWriteByType.get(sm.getMetaData().getDescribedType());      if (currentList == null) {        currentList=new ArrayList<Object>();        objectsToWriteByType.put(sm.getMetaData().getDescribedType(),currentList);      }      previousType=sm.getMetaData().getDescribedType();    }    sm.getPersistenceCapable().pcReplaceStateManager(null);    stateManagersToRestore.add(sm);    currentList.add(sm.getManagedInstance());  }  try {    for (    Map.Entry<Class<?>,ArrayList<Object>> entry : objectsToWriteByType.entrySet()) {      space.writeMultiple(entry.getValue().toArray(),_transaction,Lease.FOREVER,UpdateModifiers.WRITE_ONLY);    }  } catch (  Exception e) {    throw new RuntimeException(e.getMessage(),e);  } finally {    _relationsManager.restoreRemovedStateManagers(stateManagersToRestore);  }  if (getConfiguration().getOptimistic()) {    for (    Map.Entry<Class<?>,ArrayList<Object>> entry : objectsToWriteByType.entrySet()) {      for (      Object obj : entry.getValue()) {        PersistenceCapable pc=(PersistenceCapable)obj;        OpenJPAStateManager sm=(OpenJPAStateManager)pc.pcGetStateManager();        if (sm.getMetaData().getVersionField() == null)         break;        Object version=sm.fetch(sm.getMetaData().getVersionField().getIndex());        sm.setVersion(version);      }    }  }}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_WIN_CASTLE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400298,value0,value1);}  }
class C{  public LogReaderTask(final File selectedFile,final MqttViewManager viewManager,final MqttSpyMainController mainController){  this.selectedFile=selectedFile;  this.viewManager=viewManager;  this.controller=mainController;  super.updateTitle("Processing message audit log file " + selectedFile.getName());}  }
class C{  public double optDouble(int index,double defaultValue){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  return token.getDoubleValue(cbuf);}  }
class C{  public LocalFile(IFile file){  super(file);}  }
class C{  private void deleteStorePath(){  FileFactory.FileType fileType=FileFactory.getFileType(this.hdfsStorePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.hdfsStorePath,fileType);  deleteRecursiveSilent(carbonFile);}  }
class C{  public LikesGetListQueryWithExtended friendsOnly(Boolean value){  return unsafeParam("friends_only",value);}  }
class C{  private void requestChangeLevel(Player activePlayer){  if (legionRestrictions.canChangeLevel(activePlayer)) {    Legion legion=activePlayer.getLegion();    activePlayer.getInventory().decreaseKinah(legion.getKinahPrice());    changeLevel(legion,legion.getLegionLevel() + 1,false);    addHistory(legion,legion.getLegionLevel() + "",LegionHistoryType.LEVEL_UP);  }}  }
class C{  public TooManyEvaluationsException(Number max){  super(max);}  }
class C{  @Override public Grammar loadGrammar(XMLInputSource source) throws IOException, XNIException {  reset();  String eid=XMLEntityManager.expandSystemId(source.getSystemId(),source.getBaseSystemId(),fStrictURI);  XMLDTDDescription desc=new XMLDTDDescription(source.getPublicId(),source.getSystemId(),source.getBaseSystemId(),eid,null);  if (!fBalanceSyntaxTrees) {    fDTDGrammar=new DTDGrammar(fSymbolTable,desc);  } else {    fDTDGrammar=new BalancedDTDGrammar(fSymbolTable,desc);  }  fGrammarBucket=new DTDGrammarBucket();  fGrammarBucket.setStandalone(false);  fGrammarBucket.setActiveGrammar(fDTDGrammar);  try {    fDTDScanner.setInputSource(source);    fDTDScanner.scanDTDExternalSubset(true);  } catch (  EOFException e) {  } finally {    fEntityManager.closeReaders();  }  if (fDTDGrammar != null && fGrammarPool != null) {    fGrammarPool.cacheGrammars(XMLGrammarDescription.XML_DTD,new Grammar[]{fDTDGrammar});  }  return fDTDGrammar;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_NPC_BOSS_KILLED(String value0){  return new SM_SYSTEM_MESSAGE(1400021,value0);}  }
class C{  public static void onActivityCreateSetTheme(Activity activity){switch (sTheme) {default :case THEME_DEFAULT:    activity.setTheme(R.style.PizzaTheme);  break;case THEME_WHITE:activity.setTheme(R.style.DonutTheme);break;case THEME_BLUE:activity.setTheme(R.style.IceCreamTheme);break;}}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  private void initNavHelper(Context context){  this.mContext=context;  this.mNavBean=new NavigatorBean();}  }
class C{  protected static double kernelLength2bandwidth(int kernelLength){  return (double)4 / kernelLength;}  }
class C{  public WallGetCommentsQuery needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public static boolean isOrSubOf(Object obj,String parentName) throws ClassNotFoundException {  Class<?> parentClass=loadClass(parentName);  return isOrSubOf(obj,parentClass);}  }
class C{  @RequestMapping(value="/",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<ProjectDTO> create(@RequestBody ProjectDTO projectDTO) throws URISyntaxException {  log.debug("Create ProjectDTO : {}",projectDTO);  if (projectDTO.isIdSet()) {    return ResponseEntity.badRequest().header("Failure","Cannot create Project with existing ID").body(null);  }  ProjectDTO result=projectDTOService.save(projectDTO);  return ResponseEntity.created(new URI("/api/projects/" + result.id)).body(result);}  }
class C{  public HermiteParametricTest(int numberOfPoints,int maxDegree,double eps,double numUlps){  super(factory.hermite(numberOfPoints),maxDegree,eps,numUlps);}  }
class C{  public boolean checkSelfValid(){  if (TextUtils.isEmpty(dbName)) {    throw new InvalidAttributesException(InvalidAttributesException.DBNAME_IS_EMPTY_OR_NOT_DEFINED);  }  if (!dbName.endsWith(Const.LitePal.DB_NAME_SUFFIX)) {    dbName=dbName + Const.LitePal.DB_NAME_SUFFIX;  }  if (version < 1) {    throw new InvalidAttributesException(InvalidAttributesException.VERSION_OF_DATABASE_LESS_THAN_ONE);  }  if (version < SharedUtil.getLastVersion()) {    throw new InvalidAttributesException(InvalidAttributesException.VERSION_IS_EARLIER_THAN_CURRENT);  }  if (TextUtils.isEmpty(cases)) {    cases=Const.LitePal.CASES_LOWER;  } else {    if (!cases.equals(Const.LitePal.CASES_UPPER) && !cases.equals(Const.LitePal.CASES_LOWER) && !cases.equals(Const.LitePal.CASES_KEEP)) {      throw new InvalidAttributesException(cases + InvalidAttributesException.CASES_VALUE_IS_INVALID);    }  }  return true;}  }
class C{  public BisectionSolver(){  this(DEFAULT_ABSOLUTE_ACCURACY);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_GUILD_CARRIER_KILLED(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1390206,value1,value0);}  }
class C{  protected static Dfp[] split(final DfpField field,final String a){  Dfp result[]=new Dfp[2];  char[] buf;  boolean leading=true;  int sp=0;  int sig=0;  buf=new char[a.length()];  for (int i=0; i < buf.length; i++) {    buf[i]=a.charAt(i);    if (buf[i] >= '1' && buf[i] <= '9') {      leading=false;    }    if (buf[i] == '.') {      sig+=(400 - sig) % 4;      leading=false;    }    if (sig == (field.getRadixDigits() / 2) * 4) {      sp=i;      break;    }    if (buf[i] >= '0' && buf[i] <= '9' && !leading) {      sig++;    }  }  result[0]=field.newDfp(new String(buf,0,sp));  for (int i=0; i < buf.length; i++) {    buf[i]=a.charAt(i);    if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {      buf[i]='0';    }  }  result[1]=field.newDfp(new String(buf));  return result;}  }
class C{  public boolean isBatchingAckTrackerEmpty(){  boolean state=true;  for (  Consumer consumer : consumers) {    state&=((ConsumerImpl)consumer).isBatchingAckTrackerEmpty();  }  return state;}  }
class C{  public String readUTF() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readUTF();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public UpdateResourcesCommand(SVNWorkspaceRoot root,IResource[] resources,SVNRevision revision){  this.root=root;  this.resources=resources;  this.revision=revision;}  }
class C{  @deprecated public boolean hasDateAndTimeFields(){  int foundMask=0;  for (  Object item : this.items) {    if ((item instanceof DateTimePatternGenerator.VariableField)) {      int type=((DateTimePatternGenerator.VariableField)item).getType();      foundMask|=1 << type;    }  }  boolean isDate=(foundMask & 0x3FF) != 0;  boolean isTime=(foundMask & 0xFC00) != 0;  return (isDate) && (isTime);}  }
class C{  public static boolean isCategoryTop(ServletRequest request,String productCategoryId){  return isCategoryTop((Delegator)request.getAttribute("delegator"),(LocalDispatcher)request.getAttribute("dispatcher"),productCategoryId);}  }
class C{  public static boolean checkElement(String element,Set<String> filterSet){  boolean notInSet=true;  if (filterSet.contains(element)) {    notInSet=false;  } else {    String[] tokens=element.split("\\.");    if (tokens.length > 1) {      String subdomain=element;      int i=0;      while (i < tokens.length - 1) {        subdomain=subdomain.substring(subdomain.indexOf(".") + 1);        if (filterSet.contains(subdomain)) {          notInSet=false;          break;        }        ++i;      }    }  }  return notInSet;}  }
class C{  public static final boolean isValid(ForceItem item){  return !(Float.isNaN(item.location[0]) || Float.isNaN(item.location[1]) || Float.isNaN(item.plocation[0])|| Float.isNaN(item.plocation[1])|| Float.isNaN(item.velocity[0])|| Float.isNaN(item.velocity[1])|| Float.isNaN(item.force[0])|| Float.isNaN(item.force[1]));}  }
class C{  public boolean isSetAverageLoad(){  return __isset_bit_vector.get(__AVERAGELOAD_ISSET_ID);}  }
class C{  public static void main(String[] args){  try {    ProgramProperties.setProgramName("SAM2RMA6");    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);    PeakMemoryUsageMonitor.start();    (new SAM2RMA6()).run(args);    System.err.println("Total time:  " + PeakMemoryUsageMonitor.getSecondsSinceStartString());    System.err.println("Peak memory: " + PeakMemoryUsageMonitor.getPeakUsageString());    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  public static <T>String createJSONStringFromPojo(Context context,T data){  Gson gson=new Gson();  return gson.toJson(data);}  }
class C{  public _DbLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  public CMMParams(){  minFF=new DoubleParam(this,"minFF","min feature frequency",ParamValidators.gt(0));  setDefault(minFF,2.0);  numFeatures=new IntParam(this,"numFeatures","number of features used in feature hashing",ParamValidators.gt(0));  setDefault(numFeatures,1000);  regParam=new DoubleParam(this,"regParam","regularization parameter",ParamValidators.gtEq(0d));  setDefault(regParam,0.0);  maxIter=new IntParam(this,"maxIter","max number of iterations",ParamValidators.gt(0));  setDefault(maxIter,100);  tolerance=new DoubleParam(this,"tolerance","convergence tolerance of iterations",ParamValidators.gt(0));  setDefault(tolerance,1E-5);  markovOrder=new IntParam(this,"markovOrder","Markov order of the model",ParamValidators.gt(0));  setDefault(markovOrder,1);}  }
class C{  private void fillDeclaredPrefixes(XMLStreamReader reader){  fDeclaredPrefixes.clear();  final int len=reader.getNamespaceCount();  for (int i=0; i < len; ++i) {    String prefix=reader.getNamespacePrefix(i);    fDeclaredPrefixes.add(prefix != null ? prefix : "");  }}  }
class C{  public static float calculateTop(float left,float right,float bottom,float targetAspectRatio){  final float width=right - left;  return bottom - (width / targetAspectRatio);}  }
class C{  @SkylarkCallable(name="add_label",doc="Add a label to the end of the description") public void addLabel(String label,String value){  validateLabelName(label);  List<String> byLine=Splitter.on("\n").splitToList(getMessage());  int idx=byLine.size() - 1;  boolean alreadyEmptyLine=false;  while (idx >= 0) {    String line=byLine.get(idx);    if (line.isEmpty()) {      idx--;      alreadyEmptyLine=true;    } else {      break;    }  }  int position=idx + 1;  boolean putInGroup=false;  while (idx >= 0) {    String line=byLine.get(idx);    if (new LabelFinder(line).isLabel()) {      putInGroup=true;      idx--;    } else {      break;    }  }  if (idx >= 0) {    String current=byLine.get(idx);    if (!current.isEmpty() && !current.equals("--")) {      putInGroup=false;    }  }  if (putInGroup) {    ArrayList<String> list=new ArrayList<>(byLine);    list.add(position,label + "=" + value);    setMessage(Joiner.on("\n").join(list));  } else {    setMessage(getMessage() + (alreadyEmptyLine ? "" : "\n\n") + label+ "="+ value+ "\n");  }}  }
class C{  public void enqueueDownloadManagerRequest(final DownloadInfo info,boolean notifyCompleted){  EnqueueDownloadRequestTask task=new EnqueueDownloadRequestTask(info);  task.execute(notifyCompleted);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public static void paintClipped(@NotNull Graphics2D g,@NotNull BufferedImage image,@Nullable Device device,int x,int y,boolean withRetina){  Shape prevClip=null;  Shape clip=getClip(device,x,y,image.getWidth(),image.getHeight());  if (clip != null) {    prevClip=g.getClip();    g.setClip(clip);  }  if (withRetina) {    UIUtil.drawImage(g,image,x,y,null);  } else {    g.drawImage(image,x,y,null);  }  if (clip != null) {    g.setClip(prevClip);  }}  }
class C{  public NotesDeleteQuery(VkApiClient client,UserActor actor,int noteId){  super(client,"notes.delete",OkResponse.class);  accessToken(actor.getAccessToken());  noteId(noteId);}  }
class C{  public void renderScreenString(Appendable writer,Map<String,Object> context,ScreenStringRenderer screenStringRenderer) throws ScreenRenderException {  context.put("nullField",GenericEntity.NULL_FIELD);  Map<String,String> parameters=UtilGenerics.cast(context.get("parameters"));  boolean beganTransaction=false;  int transactionTimeout=-1;  if (parameters != null) {    String transactionTimeoutPar=parameters.get("TRANSACTION_TIMEOUT");    if (transactionTimeoutPar != null) {      try {        transactionTimeout=Integer.parseInt(transactionTimeoutPar);      } catch (      NumberFormatException nfe) {        String msg="TRANSACTION_TIMEOUT parameter for screen [" + this.sourceLocation + "#"+ getName()+ "] is invalid and it will be ignored: "+ nfe.toString();        Debug.logWarning(msg,module);      }    }  }  if (transactionTimeout < 0 && !transactionTimeoutExdr.isEmpty()) {    String transactionTimeoutStr=transactionTimeoutExdr.expandString(context);    if (UtilValidate.isNotEmpty(transactionTimeoutStr)) {      try {        transactionTimeout=Integer.parseInt(transactionTimeoutStr);      } catch (      NumberFormatException e) {        Debug.logWarning(e,"Could not parse transaction-timeout value, original=[" + transactionTimeoutExdr + "], expanded=["+ transactionTimeoutStr+ "]",module);      }    }  }  try {    if (useTransaction) {      if (transactionTimeout < 0) {        beganTransaction=TransactionUtil.begin();      }      if (transactionTimeout > 0) {        beganTransaction=TransactionUtil.begin(transactionTimeout);      }    }    this.section.renderWidgetString(writer,context,screenStringRenderer);    TransactionUtil.commit(beganTransaction);  } catch (  Exception e) {    String errMsg="Error rendering screen [" + this.sourceLocation + "#"+ getName()+ "]: "+ e.toString();    Debug.logError(errMsg + ". Rolling back transaction.",module);    try {      TransactionUtil.rollback(beganTransaction,errMsg,e);    } catch (    GenericEntityException e2) {      Debug.logError(e2,"Could not rollback transaction: " + e2.toString(),module);    }    if (e instanceof ScreenRenderException) {      throw ((ScreenRenderException)e);    } else {      throw new ScreenRenderException(errMsg,e);    }  }}  }
class C{  void unregister(){  mListener=null;  mMediaFactory=null;}  }
class C{  public void parent(String name,String parentName){  ElementType child=getElementType(name);  ElementType parent=getElementType(parentName);  if (child == null) {    throw new Error("No child " + name + " for parent "+ parentName);  }  if (parent == null) {    throw new Error("No parent " + parentName + " for child "+ name);  }  child.setParent(parent);}  }
class C{  public static List<String> readLines(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public GenericValue findByPrimaryKeyPartial(GenericPK primaryKey,Set<String> keys) throws GenericEntityException {  if (primaryKey == null) {    return null;  }  GenericValue genericValue=GenericValue.create(primaryKey);  genericDAO.partialSelect(genericValue,keys);  return genericValue;}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  public WallCreateCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static ContainerDescription buildCoreAgentContainerDescription(){  ContainerDescription cd=new ContainerDescription();  cd.documentSelfLink=AGENT_CONTAINER_DESCRIPTION_LINK;  cd.name=AGENT_CONTAINER_NAME;  cd.image=getAgentImageNameAndVersion();  cd.publishAll=true;  cd.volumes=AGENT_CONTAINER_VOLUMES;  cd.restartPolicy="always";  return cd;}  }
class C{  protected Boolean isNotifyUpdate(){  if (notifyUpdate == null) {    return false;  }  return this.notifyUpdate;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void closeAndFree() throws IOException {  if (this.messageReader != null) {    this.messageReader.dispose();    this.messageReader=null;  }  if (this.writeQueue != null) {    while (this.writeQueue.available() > 0) {      TcpMessage queuedOutboundMessage=(TcpMessage)writeQueue.take();      queuedOutboundMessage.free();    }  }  if (this.readSelectorSelectionKey != null) {    this.readSelectorSelectionKey.attach(null);    if (this.isRegisteredWithReadSelector) {      this.readSelectorSelectionKey.cancel();    }    this.readSelectorSelectionKey=null;  }  if (this.socketChannel != null) {    this.socketChannel.close();    this.socketChannel=null;  }}  }
class C{  @Override protected boolean scanStartElementAfterName() throws IOException, XNIException {  String rawname=fElementQName.rawname;  if (fBindNamespaces) {    fNamespaceContext.pushContext();    if (fScannerState == SCANNER_STATE_ROOT_ELEMENT) {      if (fPerformValidation) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_GRAMMAR_NOT_FOUND",new Object[]{rawname},XMLErrorReporter.SEVERITY_ERROR);        if (fDoctypeName == null || !fDoctypeName.equals(rawname)) {          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"RootElementTypeMustMatchDoctypedecl",new Object[]{fDoctypeName,rawname},XMLErrorReporter.SEVERITY_ERROR);        }      }    }  }  fCurrentElement=fElementStack.pushElement(fElementQName);  boolean empty=false;  fAttributes.removeAllAttributes();  do {    int c=fEntityScanner.peekChar();    if (c == '>') {      fEntityScanner.scanChar();      break;    } else     if (c == '/') {      fEntityScanner.scanChar();      if (!fEntityScanner.skipChar('>')) {        reportFatalError("ElementUnterminated",new Object[]{rawname});      }      empty=true;      break;    } else     if (!isValidNameStartChar(c) || !fSawSpace) {      reportFatalError("ElementUnterminated",new Object[]{rawname});    }    scanAttribute(fAttributes);    fSawSpace=fEntityScanner.skipSpaces();  } while (true);  if (fBindNamespaces) {    if (fElementQName.prefix == XMLSymbols.PREFIX_XMLNS) {      fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementXMLNSPrefix",new Object[]{fElementQName.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);    }    String prefix=fElementQName.prefix != null ? fElementQName.prefix : XMLSymbols.EMPTY_STRING;    fElementQName.uri=fNamespaceContext.getURI(prefix);    fCurrentElement.uri=fElementQName.uri;    if (fElementQName.prefix == null && fElementQName.uri != null) {      fElementQName.prefix=XMLSymbols.EMPTY_STRING;      fCurrentElement.prefix=XMLSymbols.EMPTY_STRING;    }    if (fElementQName.prefix != null && fElementQName.uri == null) {      fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementPrefixUnbound",new Object[]{fElementQName.prefix,fElementQName.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);    }    int length=fAttributes.getLength();    for (int i=0; i < length; i++) {      fAttributes.getName(i,fAttributeQName);      String aprefix=fAttributeQName.prefix != null ? fAttributeQName.prefix : XMLSymbols.EMPTY_STRING;      String uri=fNamespaceContext.getURI(aprefix);      if (fAttributeQName.uri != null && fAttributeQName.uri == uri) {        continue;      }      if (aprefix != XMLSymbols.EMPTY_STRING) {        fAttributeQName.uri=uri;        if (uri == null) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributePrefixUnbound",new Object[]{fElementQName.rawname,fAttributeQName.rawname,aprefix},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }        fAttributes.setURI(i,uri);      }    }    if (length > 1) {      QName name=fAttributes.checkDuplicatesNS();      if (name != null) {        if (name.uri != null) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNSNotUnique",new Object[]{fElementQName.rawname,name.localpart,name.uri},XMLErrorReporter.SEVERITY_FATAL_ERROR);        } else {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNotUnique",new Object[]{fElementQName.rawname,name.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      }    }  }  if (fDocumentHandler != null) {    if (empty) {      fMarkupDepth--;      if (fMarkupDepth < fEntityStack[fEntityDepth - 1]) {        reportFatalError("ElementEntityMismatch",new Object[]{fCurrentElement.rawname});      }      fDocumentHandler.emptyElement(fElementQName,fAttributes,null);      if (fBindNamespaces) {        fNamespaceContext.popContext();      }      fElementStack.popElement(fElementQName);    } else {      fDocumentHandler.startElement(fElementQName,fAttributes,null);    }  }  if (DEBUG_CONTENT_SCANNING)   System.out.println("<<< scanStartElementAfterName(): " + empty);  return empty;}  }
class C{  boolean isModifiedBy(long txNum){  internalLock.writeLock().lock();  try {    return modifiedBy.contains(txNum);  }  finally {    internalLock.writeLock().unlock();  }}  }
class C{  protected MessagesGetChatQueryWithFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public static void scale(String source,int x,int y,int w0,int h0,int w1,int h1,String file,int w,int h){  try {    BufferedImage img=ImageIO.read(new File(source));    if (img == null || w < 0 || h < 0)     return;    int w2=img.getWidth();    int h2=img.getHeight();    if (w > w1 || h > h1)     return;    x=x * w2 / w1;    y=y * h2 / h1;    w0=w0 * w2 / w1;    h0=h0 * h2 / h1;    BufferedImage out=new BufferedImage(w0,h0,BufferedImage.TYPE_3BYTE_BGR);    Graphics g=out.getGraphics();    g.drawImage(img,0,0,w0,h0,x,y,x + w0,y + h0,null);    Image tmp=out.getScaledInstance(w,h,Image.SCALE_SMOOTH);    out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);    g=out.getGraphics();    g.drawImage(tmp,0,0,w,h,null);    ImageIO.write(out,"jpg",new File(file));  } catch (  Exception e) {    log.error(e.getMessage(),e);  }}  }
class C{  public IdQuery(String typeName,Object id,Object routing){  this(typeName,id,routing,QueryResultType.DEFAULT,0);}  }
class C{  public void beginArray() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_BEGIN_ARRAY) {    push(JsonScope.EMPTY_ARRAY);    pathIndices[stackSize - 1]=0;    peeked=PEEKED_NONE;  } else {    throw new IllegalStateException("Expected BEGIN_ARRAY but was " + peek() + locationString());  }}  }
class C{  private void patchHandlerImplementation(){  SootClass sc=Scene.v().getSootClassUnsafe("android.os.Handler");  if (sc == null)   return;  SootClass runnable=Scene.v().getSootClassUnsafe("java.lang.Runnable");  if (runnable == null)   return;  SootMethod smPost=sc.getMethodUnsafe("boolean post(java.lang.Runnable)");  SootMethod smPostAtFrontOfQueue=sc.getMethodUnsafe("boolean postAtFrontOfQueue(java.lang.Runnable)");  SootMethod smPostAtTimeWithToken=sc.getMethodUnsafe("boolean postAtTime(java.lang.Runnable,java.lang.Object,long)");  SootMethod smPostAtTime=sc.getMethodUnsafe("boolean postAtTime(java.lang.Runnable,long)");  SootMethod smPostDelayed=sc.getMethodUnsafe("boolean postDelayed(java.lang.Runnable,long)");  if (smPost != null && !smPost.hasActiveBody())   patchHandlerPostBody(smPost,runnable);  if (smPostAtFrontOfQueue != null && !smPostAtFrontOfQueue.hasActiveBody())   patchHandlerPostBody(smPostAtFrontOfQueue,runnable);  if (smPostAtTime != null && !smPostAtTime.hasActiveBody())   patchHandlerPostBody(smPostAtTime,runnable);  if (smPostAtTimeWithToken != null && !smPostAtTimeWithToken.hasActiveBody())   patchHandlerPostBody(smPostAtTimeWithToken,runnable);  if (smPostDelayed != null && !smPostDelayed.hasActiveBody())   patchHandlerPostBody(smPostDelayed,runnable);}  }
class C{  @Override public String toString(){  String str=null;  if (BigInteger.ONE.equals(denominator)) {    str=numerator.toString();  } else   if (BigInteger.ZERO.equals(numerator)) {    str="0";  } else {    str=numerator + " / " + denominator;  }  return str;}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public DistributedLogNamespaceBuilder perLogStatsLogger(StatsLogger statsLogger){  this._perLogStatsLogger=statsLogger;  return this;}  }
class C{  public ValueComboBoxData(String key,String text,Class<?> panelId){  super();  this.key=key;  this.text=text;  this.panelId=panelId;  this.vendorOptionVersion=VendorOptionManager.getInstance().getDefaultVendorOptionVersion();}  }
class C{  public void applyOnMembers(Predicate<M> predicate){  lock();  try {    for (    TM member : members.values()) {      if (!predicate.apply(member.getObject())) {        return;      }    }  }  finally {    unlock();  }}  }
class C{  public static UserImpl signup(Map<String,String[]> parameters,String ip,List<SignupError> errors){  log.entering("GaeStore","signup");  String email=getFirst(parameters,"email");  String displayName=getFirst(parameters,"displayName");  String photoUrl=getFirst(parameters,"photoUrl");  String password=getFirst(parameters,"password");  String confirm=getFirst(parameters,"confirm");  if (Strings.isNullOrEmpty(email) || !EmailValidator.isValid(email)) {    errors.add(SignupError.INVALID_EMAIL);  }  if (Strings.isNullOrEmpty(displayName)) {    errors.add(SignupError.EMPTY_DISPLAY_NAME);  }  if (Strings.isNullOrEmpty(password)) {    errors.add(SignupError.INVALID_PASSWORD);  } else   if (!password.equals(confirm)) {    errors.add(SignupError.CONFIRM_MISMATCH);  } else   if (password.length() < 3) {    errors.add(SignupError.INVALID_PASSWORD);  }  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord record=findUserByEmail(pm,email);    if (record != null) {      errors.add(SignupError.EMAIL_REGISTERED);    } else     if (errors.isEmpty()) {      log.fine("Create new legacy user for: " + email);      record=new UserRecord();      record.setEmail(email);      record.setDisplayName(displayName);      record.setPhotoUrl(photoUrl);      record.setPassword(password);      record.setTosAccepted(true);      record.setLastBigChangeTime(System.currentTimeMillis());      pm.makePersistent(record);      UserImpl user=createUserByRecord(record);      return user;    }  }  finally {    pm.close();  }  log.exiting("GaeStore","signup");  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffPhysical_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201252,skilltarget,skillname);}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  public WallEditCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public LeadsCompleteQuery(VkApiClient client,UserActor actor,String vkSid,String secret){  super(client,"leads.complete",Complete.class);  accessToken(actor.getAccessToken());  vkSid(vkSid);  secret(secret);}  }
class C{  public void diffEquals(){  double[] col=null;  for (int i=0; i < A.length; i++) {    col=new double[A[i].length - 1];    for (int j=1; j < A[i].length; j++)     col[j - 1]=Math.abs(A[i][j] - A[i][j - 1]);    A[i]=col;  }  n--;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null) {    return false;  }  if (!(o instanceof Column)) {    return false;  }  Column column=(Column)o;  return Objects.equals(name,column.name);}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof GraphView && ((GraphView)getViewer()).getSelectedEdges().size() > 0;}  }
class C{  public static final void sort(double[] a,int[] b,int length){  mergesort(a,b,0,length - 1);}  }
class C{  public void initGui(){}  }
class C{  @SuppressWarnings("unchecked") public static <T>T unwrap(T proxy){  if (!isProxy(proxy)) {    return proxy;  }  Hibernate.initialize(proxy);  if (HibernateProxy.class.isInstance(proxy)) {    Object result=((HibernateProxy)proxy).writeReplace();    if (!SerializableProxy.class.isInstance(result)) {      return (T)result;    }  }  if (PersistentCollection.class.isInstance(proxy)) {    PersistentCollection persistentCollection=(PersistentCollection)proxy;    if (PersistentSet.class.isInstance(persistentCollection)) {      Map<?,?> map=(Map<?,?>)persistentCollection.getStoredSnapshot();      return (T)new LinkedHashSet<>(map.keySet());    }    return (T)persistentCollection.getStoredSnapshot();  }  return proxy;}  }
class C{  public TrustManagerBuilder withConfig(@NonNull Context ctxt,@XmlRes int resourceId){  return (withConfig(new XmlConfigSource(ctxt,resourceId,false)));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuffPhysical_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201248,skillname);}  }
class C{  public void addNewFeatureTypeStyle(FeatureTypeStyle featureTypeStyle){  if (this.symbolData.getStyle() == null) {    ConsoleManager.getInstance().error(this,"style == null");  } else {    List<FeatureTypeStyle> ftsList=this.symbolData.getStyle().featureTypeStyles();    ftsList.add(featureTypeStyle);  }}  }
class C{  public void extractInducedTree(Map<Integer,NodeData> id2data,Set<Integer> collapsedIds,PhyloTree targetTree,Map<Integer,Set<Node>> targetId2Nodes){  final Map<Integer,Integer> id2count=new HashMap<>();  for (  Integer id : id2data.keySet()) {    id2count.put(id,id2data.get(id).getCountAssigned());  }  final NodeSet keep=new NodeSet(this);  labelToKeepRec(getRoot(),id2count.keySet(),keep);  targetTree.clear();  final Node rootCpy=targetTree.newNode();  Map<Node,Node> node2cpy=new HashMap<>();  targetTree.setRoot(rootCpy);  rootCpy.setInfo(getRoot().getInfo());  node2cpy.put(getRoot(),rootCpy);  final int rootId=(Integer)getRoot().getInfo();  final NodeData rootData=id2data.get(rootId);  rootCpy.setData(rootData != null ? rootData : emptyData);  induceRec(getRoot(),rootCpy,targetTree,keep,collapsedIds,id2data,node2cpy);  targetId2Nodes.clear();  for (Node v=targetTree.getFirstNode(); v != null; v=v.getNext()) {    int id=(Integer)v.getInfo();    Set<Node> nodes=targetId2Nodes.get(id);    if (nodes == null) {      nodes=new HashSet<>();      targetId2Nodes.put(id,nodes);    }    nodes.add(v);    if (v.getInDegree() > 1)     System.err.println("Reticulate node: " + id + " (currently not supported)");  }  System.err.println(String.format("Induced tree has %,d of %,d nodes",+keep.size(),getNumberOfNodes()));  if (collapsedIds.size() > 0) {    final Set<Integer> notNeeded=new HashSet<>();    for (Node v=targetTree.getFirstNode(); v != null; v=targetTree.getNextNode(v)) {      Integer id=(Integer)v.getInfo();      if (!collapsedIds.contains(id))       notNeeded.add(id);    }    if (notNeeded.size() > 0) {      collapsedIds.removeAll(notNeeded);    }  }}  }
class C{  public Vector multiply(double factor){  return new Vector(x * factor,y * factor);}  }
class C{  public void clear(){  emptySoftQueue();  Entry tab[]=table;  for (int i=0; i < tab.length; ++i)   tab[i]=null;  size=0;  emptySoftQueue();}  }
class C{  public static Peer createMapPeer(Map map) throws MessageException {  if (!map.containsKey(PORT) || !map.containsKey(ADDRESS))   throw new MessageException("Invalid address map");  int port=(int)(long)map.get(PORT);  String address=(String)map.get(ADDRESS);  String peerId=null;  if (map.containsKey(PEER_ID))   peerId=(String)map.get(PEER_ID);  return new Peer(peerId,new InetSocketAddress(address,port));}  }
class C{  public ChangeSet increment(String path,int delta){  return add(new IncrementSpaceEntryMutator(path,delta));}  }
class C{  public WallReportCommentQuery reason(ReportReason value){  return unsafeParam("reason",value);}  }
class C{  public String captionGet(int value){  StringBuffer buffer;  String caption;  buffer=new StringBuffer();  buffer.append(unicodeNotation(value));  buffer.append(" = ");  if (captionMap == null)   caption=null; else   caption=(String)captionMap.get(new Integer(value));  if (caption == null) {    if ((value >= 0x0000) && (value <= 0x007F))     caption="Basic Latin"; else     if ((value >= 0x0080) && (value <= 0x00FF))     caption="Latin-1 Supplement"; else     if ((value >= 0x0100) && (value <= 0x017F))     caption="Latin Extended-A"; else     if ((value >= 0x0180) && (value <= 0x024F))     caption="Latin Extended-B"; else     if ((value >= 0x0250) && (value <= 0x02AF))     caption="IPA Extensions"; else     if ((value >= 0x02B0) && (value <= 0x02FF))     caption="Spacing Modifier Letters"; else     if ((value >= 0x0300) && (value <= 0x036F))     caption="Combining Diacritical Marks"; else     if ((value >= 0x0370) && (value <= 0x03FF))     caption="Greek and Coptic"; else     if ((value >= 0x0400) && (value <= 0x04FF))     caption="Cyrillic"; else     if ((value >= 0x0500) && (value <= 0x052F))     caption="Cyrillic Supplement"; else     if ((value >= 0x0530) && (value <= 0x058F))     caption="Armenian"; else     if ((value >= 0x0590) && (value <= 0x05FF))     caption="Hebrew"; else     if ((value >= 0x0600) && (value <= 0x06FF))     caption="Arabic"; else     if ((value >= 0x0700) && (value <= 0x074F))     caption="Syriac"; else     if ((value >= 0x0750) && (value <= 0x077F))     caption="Arabic Supplement"; else     if ((value >= 0x0780) && (value <= 0x07BF))     caption="Thaana"; else     if ((value >= 0x07C0) && (value <= 0x07FF))     caption="NKo"; else     if ((value >= 0x0800) && (value <= 0x083F))     caption="Samaritan"; else     if ((value >= 0x0840) && (value <= 0x085F))     caption="Mandaic"; else     if ((value >= 0x08A0) && (value <= 0x08FF))     caption="Arabic Extended-A"; else     if ((value >= 0x0900) && (value <= 0x097F))     caption="Devanagari"; else     if ((value >= 0x0980) && (value <= 0x09FF))     caption="Bengali"; else     if ((value >= 0x0A00) && (value <= 0x0A7F))     caption="Gurmukhi"; else     if ((value >= 0x0A80) && (value <= 0x0AFF))     caption="Gujarati"; else     if ((value >= 0x0B00) && (value <= 0x0B7F))     caption="Oriya"; else     if ((value >= 0x0B80) && (value <= 0x0BFF))     caption="Tamil"; else     if ((value >= 0x0C00) && (value <= 0x0C7F))     caption="Telugu"; else     if ((value >= 0x0C80) && (value <= 0x0CFF))     caption="Kannada"; else     if ((value >= 0x0D00) && (value <= 0x0D7F))     caption="Malayalam"; else     if ((value >= 0x0D80) && (value <= 0x0DFF))     caption="Sinhala"; else     if ((value >= 0x0E00) && (value <= 0x0E7F))     caption="Thai"; else     if ((value >= 0x0E80) && (value <= 0x0EFF))     caption="Lao"; else     if ((value >= 0x0F00) && (value <= 0x0FFF))     caption="Tibetan"; else     if ((value >= 0x1000) && (value <= 0x109F))     caption="Myanmar"; else     if ((value >= 0x10A0) && (value <= 0x10FF))     caption="Georgian"; else     if ((value >= 0x1100) && (value <= 0x11FF))     caption="Hangul Jamo"; else     if ((value >= 0x1200) && (value <= 0x137F))     caption="Ethiopic"; else     if ((value >= 0x1380) && (value <= 0x139F))     caption="Ethiopic Supplement"; else     if ((value >= 0x13A0) && (value <= 0x13FF))     caption="Cherokee"; else     if ((value >= 0x1400) && (value <= 0x167F))     caption="Unified Canadian Aboriginal Syllabics"; else     if ((value >= 0x1680) && (value <= 0x169F))     caption="Ogham"; else     if ((value >= 0x16A0) && (value <= 0x16FF))     caption="Runic"; else     if ((value >= 0x1700) && (value <= 0x171F))     caption="Tagalog"; else     if ((value >= 0x1720) && (value <= 0x173F))     caption="Hanunoo"; else     if ((value >= 0x1740) && (value <= 0x175F))     caption="Buhid"; else     if ((value >= 0x1760) && (value <= 0x177F))     caption="Tagbanwa"; else     if ((value >= 0x1780) && (value <= 0x17FF))     caption="Khmer"; else     if ((value >= 0x1800) && (value <= 0x18AF))     caption="Mongolian"; else     if ((value >= 0x18B0) && (value <= 0x18FF))     caption="Unified Canadian Aboriginal Syllabics Extended"; else     if ((value >= 0x1900) && (value <= 0x194F))     caption="Limbu"; else     if ((value >= 0x1950) && (value <= 0x197F))     caption="Tai Le"; else     if ((value >= 0x1980) && (value <= 0x19DF))     caption="New Tai Lue"; else     if ((value >= 0x19E0) && (value <= 0x19FF))     caption="Khmer Symbols"; else     if ((value >= 0x1A00) && (value <= 0x1A1F))     caption="Buginese"; else     if ((value >= 0x1A20) && (value <= 0x1AAF))     caption="Tai Tham"; else     if ((value >= 0x1B00) && (value <= 0x1B7F))     caption="Balinese"; else     if ((value >= 0x1B80) && (value <= 0x1BBF))     caption="Sundanese"; else     if ((value >= 0x1BC0) && (value <= 0x1BFF))     caption="Batak"; else     if ((value >= 0x1C00) && (value <= 0x1C4F))     caption="Lepcha"; else     if ((value >= 0x1C50) && (value <= 0x1C7F))     caption="Ol Chiki"; else     if ((value >= 0x1CC0) && (value <= 0x1CCF))     caption="Sundanese Supplement"; else     if ((value >= 0x1CD0) && (value <= 0x1CFF))     caption="Vedic Extensions"; else     if ((value >= 0x1D00) && (value <= 0x1D7F))     caption="Phonetic Extensions"; else     if ((value >= 0x1D80) && (value <= 0x1DBF))     caption="Phonetic Extensions Supplement"; else     if ((value >= 0x1DC0) && (value <= 0x1DFF))     caption="Combining Diacritical Marks Supplement"; else     if ((value >= 0x1E00) && (value <= 0x1EFF))     caption="Latin Extended Additional"; else     if ((value >= 0x1F00) && (value <= 0x1FFF))     caption="Greek Extended"; else     if ((value >= 0x2000) && (value <= 0x206F))     caption="General Punctuation"; else     if ((value >= 0x2070) && (value <= 0x209F))     caption="Superscripts and Subscripts"; else     if ((value >= 0x20A0) && (value <= 0x20CF))     caption="Currency Symbols"; else     if ((value >= 0x20D0) && (value <= 0x20FF))     caption="Combining Diacritical Marks for Symbols"; else     if ((value >= 0x2100) && (value <= 0x214F))     caption="Letterlike Symbols"; else     if ((value >= 0x2150) && (value <= 0x218F))     caption="Number Forms"; else     if ((value >= 0x2190) && (value <= 0x21FF))     caption="Arrows"; else     if ((value >= 0x2200) && (value <= 0x22FF))     caption="Mathematical Operators"; else     if ((value >= 0x2300) && (value <= 0x23FF))     caption="Miscellaneous Technical"; else     if ((value >= 0x2400) && (value <= 0x243F))     caption="Control Pictures"; else     if ((value >= 0x2440) && (value <= 0x245F))     caption="Optical Character Recognition"; else     if ((value >= 0x2460) && (value <= 0x24FF))     caption="Enclosed Alphanumerics"; else     if ((value >= 0x2500) && (value <= 0x257F))     caption="Box Drawing"; else     if ((value >= 0x2580) && (value <= 0x259F))     caption="Block Elements"; else     if ((value >= 0x25A0) && (value <= 0x25FF))     caption="Geometric Shapes"; else     if ((value >= 0x2600) && (value <= 0x26FF))     caption="Miscellaneous Symbols"; else     if ((value >= 0x2700) && (value <= 0x27BF))     caption="Dingbats"; else     if ((value >= 0x27C0) && (value <= 0x27EF))     caption="Miscellaneous Mathematical Symbols-A"; else     if ((value >= 0x27F0) && (value <= 0x27FF))     caption="Supplemental Arrows-A"; else     if ((value >= 0x2800) && (value <= 0x28FF))     caption="Braille Patterns"; else     if ((value >= 0x2900) && (value <= 0x297F))     caption="Supplemental Arrows-B"; else     if ((value >= 0x2980) && (value <= 0x29FF))     caption="Miscellaneous Mathematical Symbols-B"; else     if ((value >= 0x2A00) && (value <= 0x2AFF))     caption="Supplemental Mathematical Operators"; else     if ((value >= 0x2B00) && (value <= 0x2BFF))     caption="Miscellaneous Symbols and Arrows"; else     if ((value >= 0x2C00) && (value <= 0x2C5F))     caption="Glagolitic"; else     if ((value >= 0x2C60) && (value <= 0x2C7F))     caption="Latin Extended-C"; else     if ((value >= 0x2C80) && (value <= 0x2CFF))     caption="Coptic"; else     if ((value >= 0x2D00) && (value <= 0x2D2F))     caption="Georgian Supplement"; else     if ((value >= 0x2D30) && (value <= 0x2D7F))     caption="Tifinagh"; else     if ((value >= 0x2D80) && (value <= 0x2DDF))     caption="Ethiopic Extended"; else     if ((value >= 0x2DE0) && (value <= 0x2DFF))     caption="Cyrillic Extended-A"; else     if ((value >= 0x2E00) && (value <= 0x2E7F))     caption="Supplemental Punctuation"; else     if ((value >= 0x2E80) && (value <= 0x2EFF))     caption="CJK Radicals Supplement"; else     if ((value >= 0x2F00) && (value <= 0x2FDF))     caption="Kangxi Radicals"; else     if ((value >= 0x2FF0) && (value <= 0x2FFF))     caption="Ideographic Description Characters"; else     if ((value >= 0x3000) && (value <= 0x303F))     caption="CJK Symbols and Punctuation"; else     if ((value >= 0x3040) && (value <= 0x309F))     caption="Hiragana"; else     if ((value >= 0x30A0) && (value <= 0x30FF))     caption="Katakana"; else     if ((value >= 0x3100) && (value <= 0x312F))     caption="Bopomofo"; else     if ((value >= 0x3130) && (value <= 0x318F))     caption="Hangul Compatibility Jamo"; else     if ((value >= 0x3190) && (value <= 0x319F))     caption="Kanbun"; else     if ((value >= 0x31A0) && (value <= 0x31BF))     caption="Bopomofo Extended"; else     if ((value >= 0x31C0) && (value <= 0x31EF))     caption="CJK Strokes"; else     if ((value >= 0x31F0) && (value <= 0x31FF))     caption="Katakana Phonetic Extensions"; else     if ((value >= 0x3200) && (value <= 0x32FF))     caption="Enclosed CJK Letters and Months"; else     if ((value >= 0x3300) && (value <= 0x33FF))     caption="CJK Compatibility"; else     if ((value >= 0x3400) && (value <= 0x4DBF))     caption="CJK Unified Ideographs Extension A"; else     if ((value >= 0x4DC0) && (value <= 0x4DFF))     caption="Yijing Hexagram Symbols"; else     if ((value >= 0x4E00) && (value <= 0x9FFF))     caption="CJK Unified Ideographs"; else     if ((value >= 0xA000) && (value <= 0xA48F))     caption="Yi Syllables"; else     if ((value >= 0xA490) && (value <= 0xA4CF))     caption="Yi Radicals"; else     if ((value >= 0xA4D0) && (value <= 0xA4FF))     caption="Lisu"; else     if ((value >= 0xA500) && (value <= 0xA63F))     caption="Vai"; else     if ((value >= 0xA640) && (value <= 0xA69F))     caption="Cyrillic Extended-B"; else     if ((value >= 0xA6A0) && (value <= 0xA6FF))     caption="Bamum"; else     if ((value >= 0xA700) && (value <= 0xA71F))     caption="Modifier Tone Letters"; else     if ((value >= 0xA720) && (value <= 0xA7FF))     caption="Latin Extended-D"; else     if ((value >= 0xA800) && (value <= 0xA82F))     caption="Syloti Nagri"; else     if ((value >= 0xA830) && (value <= 0xA83F))     caption="Common Indic Number Forms"; else     if ((value >= 0xA840) && (value <= 0xA87F))     caption="Phags-pa"; else     if ((value >= 0xA880) && (value <= 0xA8DF))     caption="Saurashtra"; else     if ((value >= 0xA8E0) && (value <= 0xA8FF))     caption="Devanagari Extended"; else     if ((value >= 0xA900) && (value <= 0xA92F))     caption="Kayah Li"; else     if ((value >= 0xA930) && (value <= 0xA95F))     caption="Rejang"; else     if ((value >= 0xA960) && (value <= 0xA97F))     caption="Hangul Jamo Extended-A"; else     if ((value >= 0xA980) && (value <= 0xA9DF))     caption="Javanese"; else     if ((value >= 0xAA00) && (value <= 0xAA5F))     caption="Cham"; else     if ((value >= 0xAA60) && (value <= 0xAA7F))     caption="Myanmar Extended-A"; else     if ((value >= 0xAA80) && (value <= 0xAADF))     caption="Tai Viet"; else     if ((value >= 0xAAE0) && (value <= 0xAAFF))     caption="Meetei Mayek Extensions"; else     if ((value >= 0xAB00) && (value <= 0xAB2F))     caption="Ethiopic Extended-A"; else     if ((value >= 0xABC0) && (value <= 0xABFF))     caption="Meetei Mayek"; else     if ((value >= 0xAC00) && (value <= 0xD7AF))     caption="Hangul Syllables"; else     if ((value >= 0xD7B0) && (value <= 0xD7FF))     caption="Hangul Jamo Extended-B"; else     if ((value >= 0xD800) && (value <= 0xDB7F))     caption="High Surrogates"; else     if ((value >= 0xDB80) && (value <= 0xDBFF))     caption="High Private Use Surrogates"; else     if ((value >= 0xDC00) && (value <= 0xDFFF))     caption="Low Surrogates"; else     if ((value >= 0xE000) && (value <= 0xF8FF))     caption="Private Use Area"; else     if ((value >= 0xF900) && (value <= 0xFAFF))     caption="CJK Compatibility Ideographs"; else     if ((value >= 0xFB00) && (value <= 0xFB4F))     caption="Alphabetic Presentation Forms"; else     if ((value >= 0xFB50) && (value <= 0xFDFF))     caption="Arabic Presentation Forms-A"; else     if ((value >= 0xFE00) && (value <= 0xFE0F))     caption="Variation Selectors"; else     if ((value >= 0xFE10) && (value <= 0xFE1F))     caption="Vertical Forms"; else     if ((value >= 0xFE20) && (value <= 0xFE2F))     caption="Combining Half Marks"; else     if ((value >= 0xFE30) && (value <= 0xFE4F))     caption="CJK Compatibility Forms"; else     if ((value >= 0xFE50) && (value <= 0xFE6F))     caption="Small Form Variants"; else     if ((value >= 0xFE70) && (value <= 0xFEFF))     caption="Arabic Presentation Forms-B"; else     if ((value >= 0xFF00) && (value <= 0xFFEF))     caption="Halfwidth and Fullwidth Forms"; else     if ((value >= 0xFFF0) && (value <= 0xFFFF))     caption="Specials"; else     if ((value >= 0x10000) && (value <= 0x1007F))     caption="Linear B Syllabary"; else     if ((value >= 0x10080) && (value <= 0x100FF))     caption="Linear B Ideograms"; else     if ((value >= 0x10100) && (value <= 0x1013F))     caption="Aegean Numbers"; else     if ((value >= 0x10140) && (value <= 0x1018F))     caption="Ancient Greek Numbers"; else     if ((value >= 0x10190) && (value <= 0x101CF))     caption="Ancient Symbols"; else     if ((value >= 0x101D0) && (value <= 0x101FF))     caption="Phaistos Disc"; else     if ((value >= 0x10280) && (value <= 0x1029F))     caption="Lycian"; else     if ((value >= 0x102A0) && (value <= 0x102DF))     caption="Carian"; else     if ((value >= 0x10300) && (value <= 0x1032F))     caption="Old Italic"; else     if ((value >= 0x10330) && (value <= 0x1034F))     caption="Gothic"; else     if ((value >= 0x10380) && (value <= 0x1039F))     caption="Ugaritic"; else     if ((value >= 0x103A0) && (value <= 0x103DF))     caption="Old Persian"; else     if ((value >= 0x10400) && (value <= 0x1044F))     caption="Deseret"; else     if ((value >= 0x10450) && (value <= 0x1047F))     caption="Shavian"; else     if ((value >= 0x10480) && (value <= 0x104AF))     caption="Osmanya"; else     if ((value >= 0x10800) && (value <= 0x1083F))     caption="Cypriot Syllabary"; else     if ((value >= 0x10840) && (value <= 0x1085F))     caption="Imperial Aramaic"; else     if ((value >= 0x10900) && (value <= 0x1091F))     caption="Phoenician"; else     if ((value >= 0x10920) && (value <= 0x1093F))     caption="Lydian"; else     if ((value >= 0x10980) && (value <= 0x1099F))     caption="Meroitic Hieroglyphs"; else     if ((value >= 0x109A0) && (value <= 0x109FF))     caption="Meroitic Cursive"; else     if ((value >= 0x10A00) && (value <= 0x10A5F))     caption="Kharoshthi"; else     if ((value >= 0x10A60) && (value <= 0x10A7F))     caption="Old South Arabian"; else     if ((value >= 0x10B00) && (value <= 0x10B3F))     caption="Avestan"; else     if ((value >= 0x10B40) && (value <= 0x10B5F))     caption="Inscriptional Parthian"; else     if ((value >= 0x10B60) && (value <= 0x10B7F))     caption="Inscriptional Pahlavi"; else     if ((value >= 0x10C00) && (value <= 0x10C4F))     caption="Old Turkic"; else     if ((value >= 0x10E60) && (value <= 0x10E7F))     caption="Rumi Numeral Symbols"; else     if ((value >= 0x11000) && (value <= 0x1107F))     caption="Brahmi"; else     if ((value >= 0x11080) && (value <= 0x110CF))     caption="Kaithi"; else     if ((value >= 0x110D0) && (value <= 0x110FF))     caption="Sora Sompeng"; else     if ((value >= 0x11100) && (value <= 0x1114F))     caption="Chakma"; else     if ((value >= 0x11180) && (value <= 0x111DF))     caption="Sharada"; else     if ((value >= 0x11680) && (value <= 0x116CF))     caption="Takri"; else     if ((value >= 0x12000) && (value <= 0x123FF))     caption="Cuneiform"; else     if ((value >= 0x12400) && (value <= 0x1247F))     caption="Cuneiform Numbers and Punctuation"; else     if ((value >= 0x13000) && (value <= 0x1342F))     caption="Egyptian Hieroglyphs"; else     if ((value >= 0x16800) && (value <= 0x16A3F))     caption="Bamum Supplement"; else     if ((value >= 0x16F00) && (value <= 0x16F9F))     caption="Miao"; else     if ((value >= 0x1B000) && (value <= 0x1B0FF))     caption="Kana Supplement"; else     if ((value >= 0x1D000) && (value <= 0x1D0FF))     caption="Byzantine Musical Symbols"; else     if ((value >= 0x1D100) && (value <= 0x1D1FF))     caption="Musical Symbols"; else     if ((value >= 0x1D200) && (value <= 0x1D24F))     caption="Ancient Greek Musical Notation"; else     if ((value >= 0x1D300) && (value <= 0x1D35F))     caption="Tai Xuan Jing Symbols"; else     if ((value >= 0x1D360) && (value <= 0x1D37F))     caption="Counting Rod Numerals"; else     if ((value >= 0x1D400) && (value <= 0x1D7FF))     caption="Mathematical Alphanumeric Symbols"; else     if ((value >= 0x1EE00) && (value <= 0x1EEFF))     caption="Arabic Mathematical Alphabetic Symbols"; else     if ((value >= 0x1F000) && (value <= 0x1F02F))     caption="Mahjong Tiles"; else     if ((value >= 0x1F030) && (value <= 0x1F09F))     caption="Domino Tiles"; else     if ((value >= 0x1F0A0) && (value <= 0x1F0FF))     caption="Playing Cards"; else     if ((value >= 0x1F100) && (value <= 0x1F1FF))     caption="Enclosed Alphanumeric Supplement"; else     if ((value >= 0x1F200) && (value <= 0x1F2FF))     caption="Enclosed Ideographic Supplement"; else     if ((value >= 0x1F300) && (value <= 0x1F5FF))     caption="Miscellaneous Symbols And Pictographs"; else     if ((value >= 0x1F600) && (value <= 0x1F64F))     caption="Emoticons"; else     if ((value >= 0x1F680) && (value <= 0x1F6FF))     caption="Transport And Map Symbols"; else     if ((value >= 0x1F700) && (value <= 0x1F77F))     caption="Alchemical Symbols"; else     if ((value >= 0x20000) && (value <= 0x2A6DF))     caption="CJK Unified Ideographs Extension B"; else     if ((value >= 0x2A700) && (value <= 0x2B73F))     caption="CJK Unified Ideographs Extension C"; else     if ((value >= 0x2B740) && (value <= 0x2B81F))     caption="CJK Unified Ideographs Extension D"; else     if ((value >= 0x2F800) && (value <= 0x2FA1F))     caption="CJK Compatibility Ideographs Supplement"; else     if ((value >= 0xE0000) && (value <= 0xE007F))     caption="Tags"; else     if ((value >= 0xE0100) && (value <= 0xE01EF))     caption="Variation Selectors Supplement"; else     if ((value >= 0xF0000) && (value <= 0xFFFFF))     caption="Supplementary Private Use Area-A"; else     if ((value >= 0x100000) && (value <= 0x10FFFF))     caption="Supplementary Private Use Area-B"; else     caption="decimal " + getFormatComma().format(value);  }  buffer.append(caption);  return (buffer.toString());}  }
class C{  public synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  if (status == null) {    return true;  }  return (status.mState != State.CANCEL);}  }
class C{  public SpaceClusterInfo(){}  }
class C{  public HTMLSchema(){  setURI("http://www.w3.org/1999/xhtml");  setPrefix("html");  elementType("<pcdata>",M_EMPTY,M_PCDATA,0);  elementType("<root>",M_ROOT,M_EMPTY,0);  elementType("a",M_PCDATA | M_NOLINK,M_INLINE,0);  elementType("abbr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("acronym",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("address",M_PCDATA | M_INLINE | M_P,M_BLOCK,0);  elementType("applet",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("area",M_EMPTY,M_AREA,0);  elementType("b",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("base",M_EMPTY,M_HEAD,0);  elementType("basefont",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("bdo",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("bgsound",M_EMPTY,M_HEAD,0);  elementType("big",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blink",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blockquote",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("body",M_PCDATA | M_INLINE | M_BLOCK,M_HTML | M_BODY,0);  elementType("br",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("button",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("canvas",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("caption",M_PCDATA | M_INLINE,M_TABULAR,0);  elementType("center",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("cite",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("code",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("col",M_EMPTY,M_COL | M_TABULAR,0);  elementType("colgroup",M_COL,M_TABULAR,0);  elementType("comment",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("dd",M_PCDATA | M_INLINE | M_BLOCK,M_DEF,0);  elementType("del",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCKINLINE | M_BLOCK,F_RESTART);  elementType("dfn",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("dir",M_LI,M_BLOCK,0);  elementType("div",M_LI | M_PCDATA | M_INLINE| M_BLOCK,M_LI | M_BLOCK,0);  elementType("dl",M_DEF,M_BLOCK,0);  elementType("dt",M_PCDATA | M_INLINE,M_DEF,0);  elementType("em",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("fieldset",M_PCDATA | M_LEGEND | M_INLINE| M_BLOCK,M_BLOCK,0);  elementType("font",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("form",M_PCDATA | M_INLINE | M_NOLINK| M_BLOCK| M_TR| M_CELL,M_BLOCK | M_FORM,F_NOFORCE);  elementType("frame",M_EMPTY,M_FRAME,0);  elementType("frameset",M_FRAME,M_FRAME | M_HTML,0);  elementType("h1",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h2",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h3",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h4",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h5",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h6",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("head",M_HEAD,M_HTML,0);  elementType("hr",M_EMPTY,M_BLOCK,0);  elementType("html",M_HTML,M_ROOT,0);  elementType("i",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("iframe",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("img",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("input",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("ins",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCK,F_RESTART);  elementType("isindex",M_EMPTY,M_HEAD,0);  elementType("kbd",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("label",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("legend",M_PCDATA | M_INLINE,M_LEGEND,0);  elementType("li",M_PCDATA | M_INLINE | M_BLOCK,M_LI,0);  elementType("link",M_EMPTY,M_HEAD | M_INLINE,0);  elementType("listing",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("map",M_BLOCK | M_AREA,M_INLINE,0);  elementType("marquee",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("menu",M_LI,M_BLOCK,0);  elementType("meta",M_EMPTY,M_HEAD,0);  elementType("nobr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("noframes",M_BODY | M_BLOCK | M_INLINE,M_BLOCK | M_HTML | M_FRAME,0);  elementType("noscript",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("object",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_HEAD | M_INLINE | M_NOLINK,0);  elementType("ol",M_LI | M_INLINE | M_BLOCK,M_LI | M_BLOCK,0);  elementType("optgroup",M_OPTIONS,M_OPTIONS,0);  elementType("option",M_PCDATA,M_OPTION | M_OPTIONS,0);  elementType("p",M_PCDATA | M_INLINE | M_TABLE,M_BLOCK | M_P,0);  elementType("param",M_EMPTY,M_PARAM,0);  elementType("pre",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("q",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rb",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rbc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rtc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ruby",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("s",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("samp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("script",M_PCDATA,M_ANY & ~M_ROOT,F_CDATA);  elementType("select",M_OPTIONS,M_INLINE,0);  elementType("small",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("span",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("strike",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("strong",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("style",M_PCDATA,M_HEAD | M_INLINE,F_CDATA);  elementType("sub",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("sup",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("table",M_FORM | M_TABULAR,M_BLOCK | M_TABLE,F_NOFORCE);  elementType("tbody",M_TR,M_TABULAR,0);  elementType("td",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("textarea",M_PCDATA,M_INLINE,0);  elementType("tfoot",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("th",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("thead",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("title",M_PCDATA,M_HEAD,0);  elementType("tr",M_FORM | M_CELL,M_TR | M_TABULAR,0);  elementType("tt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("u",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ul",M_LI | M_INLINE | M_BLOCK,M_LI | M_BLOCK,0);  elementType("var",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("wbr",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("xmp",M_PCDATA | M_INLINE,M_BLOCK,0);  parent("<pcdata>","body");  parent("html","<root>");  parent("a","body");  parent("abbr","body");  parent("acronym","body");  parent("address","body");  parent("applet","body");  parent("area","map");  parent("b","body");  parent("base","head");  parent("basefont","body");  parent("bdo","body");  parent("bgsound","head");  parent("big","body");  parent("blink","body");  parent("blockquote","body");  parent("body","html");  parent("br","body");  parent("button","form");  parent("canvas","body");  parent("caption","table");  parent("center","body");  parent("cite","body");  parent("code","body");  parent("col","table");  parent("colgroup","table");  parent("comment","body");  parent("dd","dl");  parent("del","body");  parent("dfn","body");  parent("dir","body");  parent("div","body");  parent("dl","body");  parent("dt","dl");  parent("em","body");  parent("fieldset","form");  parent("font","body");  parent("form","body");  parent("frame","frameset");  parent("frameset","html");  parent("h1","body");  parent("h2","body");  parent("h3","body");  parent("h4","body");  parent("h5","body");  parent("h6","body");  parent("head","html");  parent("hr","body");  parent("i","body");  parent("iframe","body");  parent("img","body");  parent("input","form");  parent("ins","body");  parent("isindex","head");  parent("kbd","body");  parent("label","form");  parent("legend","fieldset");  parent("li","ul");  parent("link","head");  parent("listing","body");  parent("map","body");  parent("marquee","body");  parent("menu","body");  parent("meta","head");  parent("nobr","body");  parent("noframes","html");  parent("noscript","body");  parent("object","body");  parent("ol","body");  parent("optgroup","select");  parent("option","select");  parent("p","body");  parent("param","object");  parent("pre","body");  parent("q","body");  parent("rb","body");  parent("rbc","body");  parent("rp","body");  parent("rt","body");  parent("rtc","body");  parent("ruby","body");  parent("s","body");  parent("samp","body");  parent("script","html");  parent("select","form");  parent("small","body");  parent("span","body");  parent("strike","body");  parent("strong","body");  parent("style","head");  parent("sub","body");  parent("sup","body");  parent("table","body");  parent("tbody","table");  parent("td","tr");  parent("textarea","form");  parent("tfoot","table");  parent("th","tr");  parent("thead","table");  parent("title","head");  parent("tr","tbody");  parent("tt","body");  parent("u","body");  parent("ul","body");  parent("var","body");  parent("wbr","body");  parent("xmp","body");  attribute("a","hreflang","NMTOKEN",null);  attribute("a","shape","CDATA","rect");  attribute("a","tabindex","NMTOKEN",null);  attribute("applet","align","NMTOKEN",null);  attribute("area","nohref","BOOLEAN",null);  attribute("area","shape","CDATA","rect");  attribute("area","tabindex","NMTOKEN",null);  attribute("br","clear","CDATA","none");  attribute("button","disabled","BOOLEAN",null);  attribute("button","tabindex","NMTOKEN",null);  attribute("button","type","CDATA","submit");  attribute("caption","align","NMTOKEN",null);  attribute("col","align","NMTOKEN",null);  attribute("col","span","CDATA","1");  attribute("col","valign","NMTOKEN",null);  attribute("colgroup","align","NMTOKEN",null);  attribute("colgroup","span","CDATA","1");  attribute("colgroup","valign","NMTOKEN",null);  attribute("dir","compact","BOOLEAN",null);  attribute("div","align","NMTOKEN",null);  attribute("dl","compact","BOOLEAN",null);  attribute("form","enctype","CDATA","application/x-www-form-urlencoded");  attribute("form","method","CDATA","get");  attribute("frame","frameborder","CDATA","1");  attribute("frame","noresize","BOOLEAN",null);  attribute("frame","scrolling","CDATA","auto");  attribute("h1","align","NMTOKEN",null);  attribute("h2","align","NMTOKEN",null);  attribute("h3","align","NMTOKEN",null);  attribute("h4","align","NMTOKEN",null);  attribute("h5","align","NMTOKEN",null);  attribute("h6","align","NMTOKEN",null);  attribute("hr","align","NMTOKEN",null);  attribute("hr","noshade","BOOLEAN",null);  attribute("iframe","align","NMTOKEN",null);  attribute("iframe","frameborder","CDATA","1");  attribute("iframe","scrolling","CDATA","auto");  attribute("img","align","NMTOKEN",null);  attribute("img","ismap","BOOLEAN",null);  attribute("input","align","NMTOKEN",null);  attribute("input","checked","BOOLEAN",null);  attribute("input","disabled","BOOLEAN",null);  attribute("input","ismap","BOOLEAN",null);  attribute("input","maxlength","NMTOKEN",null);  attribute("input","readonly","BOOLEAN",null);  attribute("input","tabindex","NMTOKEN",null);  attribute("input","type","CDATA","text");  attribute("label","for","IDREF",null);  attribute("legend","align","NMTOKEN",null);  attribute("li","value","NMTOKEN",null);  attribute("link","hreflang","NMTOKEN",null);  attribute("marquee","width","NMTOKEN",null);  attribute("menu","compact","BOOLEAN",null);  attribute("meta","http-equiv","NMTOKEN",null);  attribute("meta","name","NMTOKEN",null);  attribute("object","align","NMTOKEN",null);  attribute("object","declare","BOOLEAN",null);  attribute("object","tabindex","NMTOKEN",null);  attribute("ol","compact","BOOLEAN",null);  attribute("ol","start","NMTOKEN",null);  attribute("optgroup","disabled","BOOLEAN",null);  attribute("option","disabled","BOOLEAN",null);  attribute("option","selected","BOOLEAN",null);  attribute("p","align","NMTOKEN",null);  attribute("param","valuetype","CDATA","data");  attribute("pre","width","NMTOKEN",null);  attribute("rt","rbspan","CDATA","1");  attribute("script","defer","BOOLEAN",null);  attribute("select","disabled","BOOLEAN",null);  attribute("select","multiple","BOOLEAN",null);  attribute("select","size","NMTOKEN",null);  attribute("select","tabindex","NMTOKEN",null);  attribute("table","align","NMTOKEN",null);  attribute("table","frame","NMTOKEN",null);  attribute("table","rules","NMTOKEN",null);  attribute("tbody","align","NMTOKEN",null);  attribute("tbody","valign","NMTOKEN",null);  attribute("td","align","NMTOKEN",null);  attribute("td","colspan","CDATA","1");  attribute("td","headers","IDREFS",null);  attribute("td","nowrap","BOOLEAN",null);  attribute("td","rowspan","CDATA","1");  attribute("td","scope","NMTOKEN",null);  attribute("td","valign","NMTOKEN",null);  attribute("textarea","cols","NMTOKEN",null);  attribute("textarea","disabled","BOOLEAN",null);  attribute("textarea","readonly","BOOLEAN",null);  attribute("textarea","rows","NMTOKEN",null);  attribute("textarea","tabindex","NMTOKEN",null);  attribute("tfoot","align","NMTOKEN",null);  attribute("tfoot","valign","NMTOKEN",null);  attribute("th","align","NMTOKEN",null);  attribute("th","colspan","CDATA","1");  attribute("th","headers","IDREFS",null);  attribute("th","nowrap","BOOLEAN",null);  attribute("th","rowspan","CDATA","1");  attribute("th","scope","NMTOKEN",null);  attribute("th","valign","NMTOKEN",null);  attribute("thead","align","NMTOKEN",null);  attribute("thead","valign","NMTOKEN",null);  attribute("tr","align","NMTOKEN",null);  attribute("tr","valign","NMTOKEN",null);  attribute("ul","compact","BOOLEAN",null);  attribute("ul","type","NMTOKEN",null);  attribute("xmp","width","NMTOKEN",null);  attribute("a","class","NMTOKEN",null);  attribute("abbr","class","NMTOKEN",null);  attribute("acronym","class","NMTOKEN",null);  attribute("address","class","NMTOKEN",null);  attribute("applet","class","NMTOKEN",null);  attribute("area","class","NMTOKEN",null);  attribute("b","class","NMTOKEN",null);  attribute("base","class","NMTOKEN",null);  attribute("basefont","class","NMTOKEN",null);  attribute("bdo","class","NMTOKEN",null);  attribute("bgsound","class","NMTOKEN",null);  attribute("big","class","NMTOKEN",null);  attribute("blink","class","NMTOKEN",null);  attribute("blockquote","class","NMTOKEN",null);  attribute("body","class","NMTOKEN",null);  attribute("br","class","NMTOKEN",null);  attribute("button","class","NMTOKEN",null);  attribute("canvas","class","NMTOKEN",null);  attribute("caption","class","NMTOKEN",null);  attribute("center","class","NMTOKEN",null);  attribute("cite","class","NMTOKEN",null);  attribute("code","class","NMTOKEN",null);  attribute("col","class","NMTOKEN",null);  attribute("colgroup","class","NMTOKEN",null);  attribute("comment","class","NMTOKEN",null);  attribute("dd","class","NMTOKEN",null);  attribute("del","class","NMTOKEN",null);  attribute("dfn","class","NMTOKEN",null);  attribute("dir","class","NMTOKEN",null);  attribute("div","class","NMTOKEN",null);  attribute("dl","class","NMTOKEN",null);  attribute("dt","class","NMTOKEN",null);  attribute("em","class","NMTOKEN",null);  attribute("fieldset","class","NMTOKEN",null);  attribute("font","class","NMTOKEN",null);  attribute("form","class","NMTOKEN",null);  attribute("frame","class","NMTOKEN",null);  attribute("frameset","class","NMTOKEN",null);  attribute("h1","class","NMTOKEN",null);  attribute("h2","class","NMTOKEN",null);  attribute("h3","class","NMTOKEN",null);  attribute("h4","class","NMTOKEN",null);  attribute("h5","class","NMTOKEN",null);  attribute("h6","class","NMTOKEN",null);  attribute("head","class","NMTOKEN",null);  attribute("hr","class","NMTOKEN",null);  attribute("html","class","NMTOKEN",null);  attribute("i","class","NMTOKEN",null);  attribute("iframe","class","NMTOKEN",null);  attribute("img","class","NMTOKEN",null);  attribute("input","class","NMTOKEN",null);  attribute("ins","class","NMTOKEN",null);  attribute("isindex","class","NMTOKEN",null);  attribute("kbd","class","NMTOKEN",null);  attribute("label","class","NMTOKEN",null);  attribute("legend","class","NMTOKEN",null);  attribute("li","class","NMTOKEN",null);  attribute("link","class","NMTOKEN",null);  attribute("listing","class","NMTOKEN",null);  attribute("map","class","NMTOKEN",null);  attribute("marquee","class","NMTOKEN",null);  attribute("menu","class","NMTOKEN",null);  attribute("meta","class","NMTOKEN",null);  attribute("nobr","class","NMTOKEN",null);  attribute("noframes","class","NMTOKEN",null);  attribute("noscript","class","NMTOKEN",null);  attribute("object","class","NMTOKEN",null);  attribute("ol","class","NMTOKEN",null);  attribute("optgroup","class","NMTOKEN",null);  attribute("option","class","NMTOKEN",null);  attribute("p","class","NMTOKEN",null);  attribute("param","class","NMTOKEN",null);  attribute("pre","class","NMTOKEN",null);  attribute("q","class","NMTOKEN",null);  attribute("rb","class","NMTOKEN",null);  attribute("rbc","class","NMTOKEN",null);  attribute("rp","class","NMTOKEN",null);  attribute("rt","class","NMTOKEN",null);  attribute("rtc","class","NMTOKEN",null);  attribute("ruby","class","NMTOKEN",null);  attribute("s","class","NMTOKEN",null);  attribute("samp","class","NMTOKEN",null);  attribute("script","class","NMTOKEN",null);  attribute("select","class","NMTOKEN",null);  attribute("small","class","NMTOKEN",null);  attribute("span","class","NMTOKEN",null);  attribute("strike","class","NMTOKEN",null);  attribute("strong","class","NMTOKEN",null);  attribute("style","class","NMTOKEN",null);  attribute("sub","class","NMTOKEN",null);  attribute("sup","class","NMTOKEN",null);  attribute("table","class","NMTOKEN",null);  attribute("tbody","class","NMTOKEN",null);  attribute("td","class","NMTOKEN",null);  attribute("textarea","class","NMTOKEN",null);  attribute("tfoot","class","NMTOKEN",null);  attribute("th","class","NMTOKEN",null);  attribute("thead","class","NMTOKEN",null);  attribute("title","class","NMTOKEN",null);  attribute("tr","class","NMTOKEN",null);  attribute("tt","class","NMTOKEN",null);  attribute("u","class","NMTOKEN",null);  attribute("ul","class","NMTOKEN",null);  attribute("var","class","NMTOKEN",null);  attribute("wbr","class","NMTOKEN",null);  attribute("xmp","class","NMTOKEN",null);  attribute("a","dir","NMTOKEN",null);  attribute("abbr","dir","NMTOKEN",null);  attribute("acronym","dir","NMTOKEN",null);  attribute("address","dir","NMTOKEN",null);  attribute("applet","dir","NMTOKEN",null);  attribute("area","dir","NMTOKEN",null);  attribute("b","dir","NMTOKEN",null);  attribute("base","dir","NMTOKEN",null);  attribute("basefont","dir","NMTOKEN",null);  attribute("bdo","dir","NMTOKEN",null);  attribute("bgsound","dir","NMTOKEN",null);  attribute("big","dir","NMTOKEN",null);  attribute("blink","dir","NMTOKEN",null);  attribute("blockquote","dir","NMTOKEN",null);  attribute("body","dir","NMTOKEN",null);  attribute("br","dir","NMTOKEN",null);  attribute("button","dir","NMTOKEN",null);  attribute("canvas","dir","NMTOKEN",null);  attribute("caption","dir","NMTOKEN",null);  attribute("center","dir","NMTOKEN",null);  attribute("cite","dir","NMTOKEN",null);  attribute("code","dir","NMTOKEN",null);  attribute("col","dir","NMTOKEN",null);  attribute("colgroup","dir","NMTOKEN",null);  attribute("comment","dir","NMTOKEN",null);  attribute("dd","dir","NMTOKEN",null);  attribute("del","dir","NMTOKEN",null);  attribute("dfn","dir","NMTOKEN",null);  attribute("dir","dir","NMTOKEN",null);  attribute("div","dir","NMTOKEN",null);  attribute("dl","dir","NMTOKEN",null);  attribute("dt","dir","NMTOKEN",null);  attribute("em","dir","NMTOKEN",null);  attribute("fieldset","dir","NMTOKEN",null);  attribute("font","dir","NMTOKEN",null);  attribute("form","dir","NMTOKEN",null);  attribute("frame","dir","NMTOKEN",null);  attribute("frameset","dir","NMTOKEN",null);  attribute("h1","dir","NMTOKEN",null);  attribute("h2","dir","NMTOKEN",null);  attribute("h3","dir","NMTOKEN",null);  attribute("h4","dir","NMTOKEN",null);  attribute("h5","dir","NMTOKEN",null);  attribute("h6","dir","NMTOKEN",null);  attribute("head","dir","NMTOKEN",null);  attribute("hr","dir","NMTOKEN",null);  attribute("html","dir","NMTOKEN",null);  attribute("i","dir","NMTOKEN",null);  attribute("iframe","dir","NMTOKEN",null);  attribute("img","dir","NMTOKEN",null);  attribute("input","dir","NMTOKEN",null);  attribute("ins","dir","NMTOKEN",null);  attribute("isindex","dir","NMTOKEN",null);  attribute("kbd","dir","NMTOKEN",null);  attribute("label","dir","NMTOKEN",null);  attribute("legend","dir","NMTOKEN",null);  attribute("li","dir","NMTOKEN",null);  attribute("link","dir","NMTOKEN",null);  attribute("listing","dir","NMTOKEN",null);  attribute("map","dir","NMTOKEN",null);  attribute("marquee","dir","NMTOKEN",null);  attribute("menu","dir","NMTOKEN",null);  attribute("meta","dir","NMTOKEN",null);  attribute("nobr","dir","NMTOKEN",null);  attribute("noframes","dir","NMTOKEN",null);  attribute("noscript","dir","NMTOKEN",null);  attribute("object","dir","NMTOKEN",null);  attribute("ol","dir","NMTOKEN",null);  attribute("optgroup","dir","NMTOKEN",null);  attribute("option","dir","NMTOKEN",null);  attribute("p","dir","NMTOKEN",null);  attribute("param","dir","NMTOKEN",null);  attribute("pre","dir","NMTOKEN",null);  attribute("q","dir","NMTOKEN",null);  attribute("rb","dir","NMTOKEN",null);  attribute("rbc","dir","NMTOKEN",null);  attribute("rp","dir","NMTOKEN",null);  attribute("rt","dir","NMTOKEN",null);  attribute("rtc","dir","NMTOKEN",null);  attribute("ruby","dir","NMTOKEN",null);  attribute("s","dir","NMTOKEN",null);  attribute("samp","dir","NMTOKEN",null);  attribute("script","dir","NMTOKEN",null);  attribute("select","dir","NMTOKEN",null);  attribute("small","dir","NMTOKEN",null);  attribute("span","dir","NMTOKEN",null);  attribute("strike","dir","NMTOKEN",null);  attribute("strong","dir","NMTOKEN",null);  attribute("style","dir","NMTOKEN",null);  attribute("sub","dir","NMTOKEN",null);  attribute("sup","dir","NMTOKEN",null);  attribute("table","dir","NMTOKEN",null);  attribute("tbody","dir","NMTOKEN",null);  attribute("td","dir","NMTOKEN",null);  attribute("textarea","dir","NMTOKEN",null);  attribute("tfoot","dir","NMTOKEN",null);  attribute("th","dir","NMTOKEN",null);  attribute("thead","dir","NMTOKEN",null);  attribute("title","dir","NMTOKEN",null);  attribute("tr","dir","NMTOKEN",null);  attribute("tt","dir","NMTOKEN",null);  attribute("u","dir","NMTOKEN",null);  attribute("ul","dir","NMTOKEN",null);  attribute("var","dir","NMTOKEN",null);  attribute("wbr","dir","NMTOKEN",null);  attribute("xmp","dir","NMTOKEN",null);  attribute("a","id","ID",null);  attribute("abbr","id","ID",null);  attribute("acronym","id","ID",null);  attribute("address","id","ID",null);  attribute("applet","id","ID",null);  attribute("area","id","ID",null);  attribute("b","id","ID",null);  attribute("base","id","ID",null);  attribute("basefont","id","ID",null);  attribute("bdo","id","ID",null);  attribute("bgsound","id","ID",null);  attribute("big","id","ID",null);  attribute("blink","id","ID",null);  attribute("blockquote","id","ID",null);  attribute("body","id","ID",null);  attribute("br","id","ID",null);  attribute("button","id","ID",null);  attribute("canvas","id","ID",null);  attribute("caption","id","ID",null);  attribute("center","id","ID",null);  attribute("cite","id","ID",null);  attribute("code","id","ID",null);  attribute("col","id","ID",null);  attribute("colgroup","id","ID",null);  attribute("comment","id","ID",null);  attribute("dd","id","ID",null);  attribute("del","id","ID",null);  attribute("dfn","id","ID",null);  attribute("dir","id","ID",null);  attribute("div","id","ID",null);  attribute("dl","id","ID",null);  attribute("dt","id","ID",null);  attribute("em","id","ID",null);  attribute("fieldset","id","ID",null);  attribute("font","id","ID",null);  attribute("form","id","ID",null);  attribute("frame","id","ID",null);  attribute("frameset","id","ID",null);  attribute("h1","id","ID",null);  attribute("h2","id","ID",null);  attribute("h3","id","ID",null);  attribute("h4","id","ID",null);  attribute("h5","id","ID",null);  attribute("h6","id","ID",null);  attribute("head","id","ID",null);  attribute("hr","id","ID",null);  attribute("html","id","ID",null);  attribute("i","id","ID",null);  attribute("iframe","id","ID",null);  attribute("img","id","ID",null);  attribute("input","id","ID",null);  attribute("ins","id","ID",null);  attribute("isindex","id","ID",null);  attribute("kbd","id","ID",null);  attribute("label","id","ID",null);  attribute("legend","id","ID",null);  attribute("li","id","ID",null);  attribute("link","id","ID",null);  attribute("listing","id","ID",null);  attribute("map","id","ID",null);  attribute("marquee","id","ID",null);  attribute("menu","id","ID",null);  attribute("meta","id","ID",null);  attribute("nobr","id","ID",null);  attribute("noframes","id","ID",null);  attribute("noscript","id","ID",null);  attribute("object","id","ID",null);  attribute("ol","id","ID",null);  attribute("optgroup","id","ID",null);  attribute("option","id","ID",null);  attribute("p","id","ID",null);  attribute("param","id","ID",null);  attribute("pre","id","ID",null);  attribute("q","id","ID",null);  attribute("rb","id","ID",null);  attribute("rbc","id","ID",null);  attribute("rp","id","ID",null);  attribute("rt","id","ID",null);  attribute("rtc","id","ID",null);  attribute("ruby","id","ID",null);  attribute("s","id","ID",null);  attribute("samp","id","ID",null);  attribute("script","id","ID",null);  attribute("select","id","ID",null);  attribute("small","id","ID",null);  attribute("span","id","ID",null);  attribute("strike","id","ID",null);  attribute("strong","id","ID",null);  attribute("style","id","ID",null);  attribute("sub","id","ID",null);  attribute("sup","id","ID",null);  attribute("table","id","ID",null);  attribute("tbody","id","ID",null);  attribute("td","id","ID",null);  attribute("textarea","id","ID",null);  attribute("tfoot","id","ID",null);  attribute("th","id","ID",null);  attribute("thead","id","ID",null);  attribute("title","id","ID",null);  attribute("tr","id","ID",null);  attribute("tt","id","ID",null);  attribute("u","id","ID",null);  attribute("ul","id","ID",null);  attribute("var","id","ID",null);  attribute("wbr","id","ID",null);  attribute("xmp","id","ID",null);  attribute("a","lang","NMTOKEN",null);  attribute("abbr","lang","NMTOKEN",null);  attribute("acronym","lang","NMTOKEN",null);  attribute("address","lang","NMTOKEN",null);  attribute("applet","lang","NMTOKEN",null);  attribute("area","lang","NMTOKEN",null);  attribute("b","lang","NMTOKEN",null);  attribute("base","lang","NMTOKEN",null);  attribute("basefont","lang","NMTOKEN",null);  attribute("bdo","lang","NMTOKEN",null);  attribute("bgsound","lang","NMTOKEN",null);  attribute("big","lang","NMTOKEN",null);  attribute("blink","lang","NMTOKEN",null);  attribute("blockquote","lang","NMTOKEN",null);  attribute("body","lang","NMTOKEN",null);  attribute("br","lang","NMTOKEN",null);  attribute("button","lang","NMTOKEN",null);  attribute("canvas","lang","NMTOKEN",null);  attribute("caption","lang","NMTOKEN",null);  attribute("center","lang","NMTOKEN",null);  attribute("cite","lang","NMTOKEN",null);  attribute("code","lang","NMTOKEN",null);  attribute("col","lang","NMTOKEN",null);  attribute("colgroup","lang","NMTOKEN",null);  attribute("comment","lang","NMTOKEN",null);  attribute("dd","lang","NMTOKEN",null);  attribute("del","lang","NMTOKEN",null);  attribute("dfn","lang","NMTOKEN",null);  attribute("dir","lang","NMTOKEN",null);  attribute("div","lang","NMTOKEN",null);  attribute("dl","lang","NMTOKEN",null);  attribute("dt","lang","NMTOKEN",null);  attribute("em","lang","NMTOKEN",null);  attribute("fieldset","lang","NMTOKEN",null);  attribute("font","lang","NMTOKEN",null);  attribute("form","lang","NMTOKEN",null);  attribute("frame","lang","NMTOKEN",null);  attribute("frameset","lang","NMTOKEN",null);  attribute("h1","lang","NMTOKEN",null);  attribute("h2","lang","NMTOKEN",null);  attribute("h3","lang","NMTOKEN",null);  attribute("h4","lang","NMTOKEN",null);  attribute("h5","lang","NMTOKEN",null);  attribute("h6","lang","NMTOKEN",null);  attribute("head","lang","NMTOKEN",null);  attribute("hr","lang","NMTOKEN",null);  attribute("html","lang","NMTOKEN",null);  attribute("i","lang","NMTOKEN",null);  attribute("iframe","lang","NMTOKEN",null);  attribute("img","lang","NMTOKEN",null);  attribute("input","lang","NMTOKEN",null);  attribute("ins","lang","NMTOKEN",null);  attribute("isindex","lang","NMTOKEN",null);  attribute("kbd","lang","NMTOKEN",null);  attribute("label","lang","NMTOKEN",null);  attribute("legend","lang","NMTOKEN",null);  attribute("li","lang","NMTOKEN",null);  attribute("link","lang","NMTOKEN",null);  attribute("listing","lang","NMTOKEN",null);  attribute("map","lang","NMTOKEN",null);  attribute("marquee","lang","NMTOKEN",null);  attribute("menu","lang","NMTOKEN",null);  attribute("meta","lang","NMTOKEN",null);  attribute("nobr","lang","NMTOKEN",null);  attribute("noframes","lang","NMTOKEN",null);  attribute("noscript","lang","NMTOKEN",null);  attribute("object","lang","NMTOKEN",null);  attribute("ol","lang","NMTOKEN",null);  attribute("optgroup","lang","NMTOKEN",null);  attribute("option","lang","NMTOKEN",null);  attribute("p","lang","NMTOKEN",null);  attribute("param","lang","NMTOKEN",null);  attribute("pre","lang","NMTOKEN",null);  attribute("q","lang","NMTOKEN",null);  attribute("rb","lang","NMTOKEN",null);  attribute("rbc","lang","NMTOKEN",null);  attribute("rp","lang","NMTOKEN",null);  attribute("rt","lang","NMTOKEN",null);  attribute("rtc","lang","NMTOKEN",null);  attribute("ruby","lang","NMTOKEN",null);  attribute("s","lang","NMTOKEN",null);  attribute("samp","lang","NMTOKEN",null);  attribute("script","lang","NMTOKEN",null);  attribute("select","lang","NMTOKEN",null);  attribute("small","lang","NMTOKEN",null);  attribute("span","lang","NMTOKEN",null);  attribute("strike","lang","NMTOKEN",null);  attribute("strong","lang","NMTOKEN",null);  attribute("style","lang","NMTOKEN",null);  attribute("sub","lang","NMTOKEN",null);  attribute("sup","lang","NMTOKEN",null);  attribute("table","lang","NMTOKEN",null);  attribute("tbody","lang","NMTOKEN",null);  attribute("td","lang","NMTOKEN",null);  attribute("textarea","lang","NMTOKEN",null);  attribute("tfoot","lang","NMTOKEN",null);  attribute("th","lang","NMTOKEN",null);  attribute("thead","lang","NMTOKEN",null);  attribute("title","lang","NMTOKEN",null);  attribute("tr","lang","NMTOKEN",null);  attribute("tt","lang","NMTOKEN",null);  attribute("u","lang","NMTOKEN",null);  attribute("ul","lang","NMTOKEN",null);  attribute("var","lang","NMTOKEN",null);  attribute("wbr","lang","NMTOKEN",null);  attribute("xmp","lang","NMTOKEN",null);  entity("aacgr",0x03AC);  entity("Aacgr",0x0386);  entity("aacute",0x00E1);  entity("Aacute",0x00C1);  entity("abreve",0x0103);  entity("Abreve",0x0102);  entity("ac",0x223E);  entity("acd",0x223F);  entity("acirc",0x00E2);  entity("Acirc",0x00C2);  entity("acute",0x00B4);  entity("acy",0x0430);  entity("Acy",0x0410);  entity("aelig",0x00E6);  entity("AElig",0x00C6);  entity("af",0x2061);  entity("afr",0x1D51E);  entity("Afr",0x1D504);  entity("agr",0x03B1);  entity("Agr",0x0391);  entity("agrave",0x00E0);  entity("Agrave",0x00C0);  entity("alefsym",0x2135);  entity("aleph",0x2135);  entity("alpha",0x03B1);  entity("Alpha",0x0391);  entity("amacr",0x0101);  entity("Amacr",0x0100);  entity("amalg",0x2A3F);  entity("amp",0x0026);  entity("and",0x2227);  entity("And",0x2A53);  entity("andand",0x2A55);  entity("andd",0x2A5C);  entity("andslope",0x2A58);  entity("andv",0x2A5A);  entity("ang",0x2220);  entity("ange",0x29A4);  entity("angle",0x2220);  entity("angmsd",0x2221);  entity("angmsdaa",0x29A8);  entity("angmsdab",0x29A9);  entity("angmsdac",0x29AA);  entity("angmsdad",0x29AB);  entity("angmsdae",0x29AC);  entity("angmsdaf",0x29AD);  entity("angmsdag",0x29AE);  entity("angmsdah",0x29AF);  entity("angrt",0x221F);  entity("angrtvb",0x22BE);  entity("angrtvbd",0x299D);  entity("angsph",0x2222);  entity("angst",0x212B);  entity("angzarr",0x237C);  entity("aogon",0x0105);  entity("Aogon",0x0104);  entity("aopf",0x1D552);  entity("Aopf",0x1D538);  entity("ap",0x2248);  entity("apacir",0x2A6F);  entity("ape",0x224A);  entity("apE",0x2A70);  entity("apid",0x224B);  entity("apos",0x0027);  entity("ApplyFunction",0x2061);  entity("approx",0x2248);  entity("approxeq",0x224A);  entity("aring",0x00E5);  entity("Aring",0x00C5);  entity("ascr",0x1D4B6);  entity("Ascr",0x1D49C);  entity("Assign",0x2254);  entity("ast",0x002A);  entity("asymp",0x2248);  entity("asympeq",0x224D);  entity("atilde",0x00E3);  entity("Atilde",0x00C3);  entity("auml",0x00E4);  entity("Auml",0x00C4);  entity("awconint",0x2233);  entity("awint",0x2A11);  entity("b.alpha",0x1D6C2);  entity("b.beta",0x1D6C3);  entity("b.chi",0x1D6D8);  entity("b.delta",0x1D6C5);  entity("b.Delta",0x1D6AB);  entity("b.epsi",0x1D6C6);  entity("b.epsiv",0x1D6DC);  entity("b.eta",0x1D6C8);  entity("b.gamma",0x1D6C4);  entity("b.Gamma",0x1D6AA);  entity("b.gammad",0x1D7CB);  entity("b.Gammad",0x1D7CA);  entity("b.iota",0x1D6CA);  entity("b.kappa",0x1D6CB);  entity("b.kappav",0x1D6DE);  entity("b.lambda",0x1D6CC);  entity("b.Lambda",0x1D6B2);  entity("b.mu",0x1D6CD);  entity("b.nu",0x1D6CE);  entity("b.omega",0x1D6DA);  entity("b.Omega",0x1D6C0);  entity("b.phi",0x1D6D7);  entity("b.Phi",0x1D6BD);  entity("b.phiv",0x1D6DF);  entity("b.pi",0x1D6D1);  entity("b.Pi",0x1D6B7);  entity("b.piv",0x1D6E1);  entity("b.psi",0x1D6D9);  entity("b.Psi",0x1D6BF);  entity("b.rho",0x1D6D2);  entity("b.rhov",0x1D6E0);  entity("b.sigma",0x1D6D4);  entity("b.Sigma",0x1D6BA);  entity("b.sigmav",0x1D6D3);  entity("b.tau",0x1D6D5);  entity("b.Theta",0x1D6AF);  entity("b.thetas",0x1D6C9);  entity("b.thetav",0x1D6DD);  entity("b.upsi",0x1D6D6);  entity("b.Upsi",0x1D6BC);  entity("b.xi",0x1D6CF);  entity("b.Xi",0x1D6B5);  entity("b.zeta",0x1D6C7);  entity("backcong",0x224C);  entity("backepsilon",0x03F6);  entity("backprime",0x2035);  entity("backsim",0x223D);  entity("backsimeq",0x22CD);  entity("Backslash",0x2216);  entity("Barv",0x2AE7);  entity("barvee",0x22BD);  entity("barwed",0x2305);  entity("Barwed",0x2306);  entity("barwedge",0x2305);  entity("bbrk",0x23B5);  entity("bbrktbrk",0x23B6);  entity("bcong",0x224C);  entity("bcy",0x0431);  entity("Bcy",0x0411);  entity("bdquo",0x201E);  entity("becaus",0x2235);  entity("because",0x2235);  entity("bemptyv",0x29B0);  entity("bepsi",0x03F6);  entity("bernou",0x212C);  entity("Bernoullis",0x212C);  entity("beta",0x03B2);  entity("Beta",0x0392);  entity("beth",0x2136);  entity("between",0x226C);  entity("bfr",0x1D51F);  entity("Bfr",0x1D505);  entity("bgr",0x03B2);  entity("Bgr",0x0392);  entity("bigcap",0x22C2);  entity("bigcirc",0x25EF);  entity("bigcup",0x22C3);  entity("bigodot",0x2A00);  entity("bigoplus",0x2A01);  entity("bigotimes",0x2A02);  entity("bigsqcup",0x2A06);  entity("bigstar",0x2605);  entity("bigtriangledown",0x25BD);  entity("bigtriangleup",0x25B3);  entity("biguplus",0x2A04);  entity("bigvee",0x22C1);  entity("bigwedge",0x22C0);  entity("bkarow",0x290D);  entity("blacklozenge",0x29EB);  entity("blacksquare",0x25AA);  entity("blacktriangle",0x25B4);  entity("blacktriangledown",0x25BE);  entity("blacktriangleleft",0x25C2);  entity("blacktriangleright",0x25B8);  entity("blank",0x2423);  entity("blk12",0x2592);  entity("blk14",0x2591);  entity("blk34",0x2593);  entity("block",0x2588);  entity("bnot",0x2310);  entity("bNot",0x2AED);  entity("bopf",0x1D553);  entity("Bopf",0x1D539);  entity("bot",0x22A5);  entity("bottom",0x22A5);  entity("bowtie",0x22C8);  entity("boxbox",0x29C9);  entity("boxdl",0x2510);  entity("boxdL",0x2555);  entity("boxDl",0x2556);  entity("boxDL",0x2557);  entity("boxdr",0x250C);  entity("boxdR",0x2552);  entity("boxDr",0x2553);  entity("boxDR",0x2554);  entity("boxh",0x2500);  entity("boxH",0x2550);  entity("boxhd",0x252C);  entity("boxhD",0x2565);  entity("boxHd",0x2564);  entity("boxHD",0x2566);  entity("boxhu",0x2534);  entity("boxhU",0x2568);  entity("boxHu",0x2567);  entity("boxHU",0x2569);  entity("boxminus",0x229F);  entity("boxplus",0x229E);  entity("boxtimes",0x22A0);  entity("boxul",0x2518);  entity("boxuL",0x255B);  entity("boxUl",0x255C);  entity("boxUL",0x255D);  entity("boxur",0x2514);  entity("boxuR",0x2558);  entity("boxUr",0x2559);  entity("boxUR",0x255A);  entity("boxv",0x2502);  entity("boxV",0x2551);  entity("boxvh",0x253C);  entity("boxvH",0x256A);  entity("boxVh",0x256B);  entity("boxVH",0x256C);  entity("boxvl",0x2524);  entity("boxvL",0x2561);  entity("boxVl",0x2562);  entity("boxVL",0x2563);  entity("boxvr",0x251C);  entity("boxvR",0x255E);  entity("boxVr",0x255F);  entity("boxVR",0x2560);  entity("bprime",0x2035);  entity("breve",0x02D8);  entity("brvbar",0x00A6);  entity("bscr",0x1D4B7);  entity("Bscr",0x212C);  entity("bsemi",0x204F);  entity("bsim",0x223D);  entity("bsime",0x22CD);  entity("bsol",0x005C);  entity("bsolb",0x29C5);  entity("bull",0x2022);  entity("bullet",0x2022);  entity("bump",0x224E);  entity("bumpe",0x224F);  entity("bumpE",0x2AAE);  entity("bumpeq",0x224F);  entity("Bumpeq",0x224E);  entity("cacute",0x0107);  entity("Cacute",0x0106);  entity("cap",0x2229);  entity("Cap",0x22D2);  entity("capand",0x2A44);  entity("capbrcup",0x2A49);  entity("capcap",0x2A4B);  entity("capcup",0x2A47);  entity("capdot",0x2A40);  entity("CapitalDifferentialD",0x2145);  entity("caret",0x2041);  entity("caron",0x02C7);  entity("Cayleys",0x212D);  entity("ccaps",0x2A4D);  entity("ccaron",0x010D);  entity("Ccaron",0x010C);  entity("ccedil",0x00E7);  entity("Ccedil",0x00C7);  entity("ccirc",0x0109);  entity("Ccirc",0x0108);  entity("Cconint",0x2230);  entity("ccups",0x2A4C);  entity("ccupssm",0x2A50);  entity("cdot",0x010B);  entity("Cdot",0x010A);  entity("cedil",0x00B8);  entity("Cedilla",0x00B8);  entity("cemptyv",0x29B2);  entity("cent",0x00A2);  entity("centerdot",0x00B7);  entity("cfr",0x1D520);  entity("Cfr",0x212D);  entity("chcy",0x0447);  entity("CHcy",0x0427);  entity("check",0x2713);  entity("checkmark",0x2713);  entity("chi",0x03C7);  entity("Chi",0x03A7);  entity("cir",0x25CB);  entity("circ",0x02C6);  entity("circeq",0x2257);  entity("circlearrowleft",0x21BA);  entity("circlearrowright",0x21BB);  entity("circledast",0x229B);  entity("circledcirc",0x229A);  entity("circleddash",0x229D);  entity("CircleDot",0x2299);  entity("circledR",0x00AE);  entity("circledS",0x24C8);  entity("CircleMinus",0x2296);  entity("CirclePlus",0x2295);  entity("CircleTimes",0x2297);  entity("cire",0x2257);  entity("cirE",0x29C3);  entity("cirfnint",0x2A10);  entity("cirmid",0x2AEF);  entity("cirscir",0x29C2);  entity("ClockwiseContourIntegral",0x2232);  entity("CloseCurlyDoubleQuote",0x201D);  entity("CloseCurlyQuote",0x2019);  entity("clubs",0x2663);  entity("clubsuit",0x2663);  entity("colon",0x003A);  entity("Colon",0x2237);  entity("colone",0x2254);  entity("Colone",0x2A74);  entity("coloneq",0x2254);  entity("comma",0x002C);  entity("commat",0x0040);  entity("comp",0x2201);  entity("compfn",0x2218);  entity("complement",0x2201);  entity("complexes",0x2102);  entity("cong",0x2245);  entity("congdot",0x2A6D);  entity("Congruent",0x2261);  entity("conint",0x222E);  entity("Conint",0x222F);  entity("ContourIntegral",0x222E);  entity("copf",0x1D554);  entity("Copf",0x2102);  entity("coprod",0x2210);  entity("Coproduct",0x2210);  entity("copy",0x00A9);  entity("copysr",0x2117);  entity("CounterClockwiseContourIntegral",0x2233);  entity("crarr",0x21B5);  entity("cross",0x2717);  entity("Cross",0x2A2F);  entity("cscr",0x1D4B8);  entity("Cscr",0x1D49E);  entity("csub",0x2ACF);  entity("csube",0x2AD1);  entity("csup",0x2AD0);  entity("csupe",0x2AD2);  entity("ctdot",0x22EF);  entity("cudarrl",0x2938);  entity("cudarrr",0x2935);  entity("cuepr",0x22DE);  entity("cuesc",0x22DF);  entity("cularr",0x21B6);  entity("cularrp",0x293D);  entity("cup",0x222A);  entity("Cup",0x22D3);  entity("cupbrcap",0x2A48);  entity("cupcap",0x2A46);  entity("CupCap",0x224D);  entity("cupcup",0x2A4A);  entity("cupdot",0x228D);  entity("cupor",0x2A45);  entity("curarr",0x21B7);  entity("curarrm",0x293C);  entity("curlyeqprec",0x22DE);  entity("curlyeqsucc",0x22DF);  entity("curlyvee",0x22CE);  entity("curlywedge",0x22CF);  entity("curren",0x00A4);  entity("curvearrowleft",0x21B6);  entity("curvearrowright",0x21B7);  entity("cuvee",0x22CE);  entity("cuwed",0x22CF);  entity("cwconint",0x2232);  entity("cwint",0x2231);  entity("cylcty",0x232D);  entity("dagger",0x2020);  entity("Dagger",0x2021);  entity("daleth",0x2138);  entity("darr",0x2193);  entity("dArr",0x21D3);  entity("Darr",0x21A1);  entity("dash",0x2010);  entity("dashv",0x22A3);  entity("Dashv",0x2AE4);  entity("dbkarow",0x290F);  entity("dblac",0x02DD);  entity("dcaron",0x010F);  entity("Dcaron",0x010E);  entity("dcy",0x0434);  entity("Dcy",0x0414);  entity("dd",0x2146);  entity("DD",0x2145);  entity("ddagger",0x2021);  entity("ddarr",0x21CA);  entity("DDotrahd",0x2911);  entity("ddotseq",0x2A77);  entity("deg",0x00B0);  entity("Del",0x2207);  entity("delta",0x03B4);  entity("Delta",0x0394);  entity("demptyv",0x29B1);  entity("dfisht",0x297F);  entity("dfr",0x1D521);  entity("Dfr",0x1D507);  entity("dgr",0x03B4);  entity("Dgr",0x0394);  entity("dHar",0x2965);  entity("dharl",0x21C3);  entity("dharr",0x21C2);  entity("DiacriticalAcute",0x00B4);  entity("DiacriticalDot",0x02D9);  entity("DiacriticalDoubleAcute",0x02DD);  entity("DiacriticalGrave",0x0060);  entity("DiacriticalTilde",0x02DC);  entity("diam",0x22C4);  entity("diamond",0x22C4);  entity("diamondsuit",0x2666);  entity("diams",0x2666);  entity("die",0x00A8);  entity("DifferentialD",0x2146);  entity("digamma",0x03DD);  entity("disin",0x22F2);  entity("div",0x00F7);  entity("divide",0x00F7);  entity("divideontimes",0x22C7);  entity("divonx",0x22C7);  entity("djcy",0x0452);  entity("DJcy",0x0402);  entity("dlcorn",0x231E);  entity("dlcrop",0x230D);  entity("dollar",0x0024);  entity("dopf",0x1D555);  entity("Dopf",0x1D53B);  entity("dot",0x02D9);  entity("Dot",0x00A8);  entity("doteq",0x2250);  entity("doteqdot",0x2251);  entity("DotEqual",0x2250);  entity("dotminus",0x2238);  entity("dotplus",0x2214);  entity("dotsquare",0x22A1);  entity("doublebarwedge",0x2306);  entity("DoubleContourIntegral",0x222F);  entity("DoubleDot",0x00A8);  entity("DoubleDownArrow",0x21D3);  entity("DoubleLeftArrow",0x21D0);  entity("DoubleLeftRightArrow",0x21D4);  entity("DoubleLeftTee",0x2AE4);  entity("DoubleLongLeftArrow",0x27F8);  entity("DoubleLongLeftRightArrow",0x27FA);  entity("DoubleLongRightArrow",0x27F9);  entity("DoubleRightArrow",0x21D2);  entity("DoubleRightTee",0x22A8);  entity("DoubleUpArrow",0x21D1);  entity("DoubleUpDownArrow",0x21D5);  entity("DoubleVerticalBar",0x2225);  entity("downarrow",0x2193);  entity("Downarrow",0x21D3);  entity("DownArrowBar",0x2913);  entity("DownArrowUpArrow",0x21F5);  entity("downdownarrows",0x21CA);  entity("downharpoonleft",0x21C3);  entity("downharpoonright",0x21C2);  entity("DownLeftRightVector",0x2950);  entity("DownLeftTeeVector",0x295E);  entity("DownLeftVector",0x21BD);  entity("DownLeftVectorBar",0x2956);  entity("DownRightTeeVector",0x295F);  entity("DownRightVector",0x21C1);  entity("DownRightVectorBar",0x2957);  entity("DownTee",0x22A4);  entity("DownTeeArrow",0x21A7);  entity("drbkarow",0x2910);  entity("drcorn",0x231F);  entity("drcrop",0x230C);  entity("dscr",0x1D4B9);  entity("Dscr",0x1D49F);  entity("dscy",0x0455);  entity("DScy",0x0405);  entity("dsol",0x29F6);  entity("dstrok",0x0111);  entity("Dstrok",0x0110);  entity("dtdot",0x22F1);  entity("dtri",0x25BF);  entity("dtrif",0x25BE);  entity("duarr",0x21F5);  entity("duhar",0x296F);  entity("dwangle",0x29A6);  entity("dzcy",0x045F);  entity("DZcy",0x040F);  entity("dzigrarr",0x27FF);  entity("eacgr",0x03AD);  entity("Eacgr",0x0388);  entity("eacute",0x00E9);  entity("Eacute",0x00C9);  entity("easter",0x2A6E);  entity("ecaron",0x011B);  entity("Ecaron",0x011A);  entity("ecir",0x2256);  entity("ecirc",0x00EA);  entity("Ecirc",0x00CA);  entity("ecolon",0x2255);  entity("ecy",0x044D);  entity("Ecy",0x042D);  entity("eDDot",0x2A77);  entity("edot",0x0117);  entity("eDot",0x2251);  entity("Edot",0x0116);  entity("ee",0x2147);  entity("eeacgr",0x03AE);  entity("EEacgr",0x0389);  entity("eegr",0x03B7);  entity("EEgr",0x0397);  entity("efDot",0x2252);  entity("efr",0x1D522);  entity("Efr",0x1D508);  entity("eg",0x2A9A);  entity("egr",0x03B5);  entity("Egr",0x0395);  entity("egrave",0x00E8);  entity("Egrave",0x00C8);  entity("egs",0x2A96);  entity("egsdot",0x2A98);  entity("el",0x2A99);  entity("Element",0x2208);  entity("elinters",0x23E7);  entity("ell",0x2113);  entity("els",0x2A95);  entity("elsdot",0x2A97);  entity("emacr",0x0113);  entity("Emacr",0x0112);  entity("empty",0x2205);  entity("emptyset",0x2205);  entity("EmptySmallSquare",0x25FB);  entity("emptyv",0x2205);  entity("EmptyVerySmallSquare",0x25AB);  entity("emsp",0x2003);  entity("emsp13",0x2004);  entity("emsp14",0x2005);  entity("eng",0x014B);  entity("ENG",0x014A);  entity("ensp",0x2002);  entity("eogon",0x0119);  entity("Eogon",0x0118);  entity("eopf",0x1D556);  entity("Eopf",0x1D53C);  entity("epar",0x22D5);  entity("eparsl",0x29E3);  entity("eplus",0x2A71);  entity("epsi",0x03F5);  entity("epsilon",0x03B5);  entity("Epsilon",0x0395);  entity("epsiv",0x03B5);  entity("eqcirc",0x2256);  entity("eqcolon",0x2255);  entity("eqsim",0x2242);  entity("eqslantgtr",0x2A96);  entity("eqslantless",0x2A95);  entity("Equal",0x2A75);  entity("equals",0x003D);  entity("EqualTilde",0x2242);  entity("equest",0x225F);  entity("Equilibrium",0x21CC);  entity("equiv",0x2261);  entity("equivDD",0x2A78);  entity("eqvparsl",0x29E5);  entity("erarr",0x2971);  entity("erDot",0x2253);  entity("escr",0x212F);  entity("Escr",0x2130);  entity("esdot",0x2250);  entity("esim",0x2242);  entity("Esim",0x2A73);  entity("eta",0x03B7);  entity("Eta",0x0397);  entity("eth",0x00F0);  entity("ETH",0x00D0);  entity("euml",0x00EB);  entity("Euml",0x00CB);  entity("euro",0x20AC);  entity("excl",0x0021);  entity("exist",0x2203);  entity("Exists",0x2203);  entity("expectation",0x2130);  entity("exponentiale",0x2147);  entity("fallingdotseq",0x2252);  entity("fcy",0x0444);  entity("Fcy",0x0424);  entity("female",0x2640);  entity("ffilig",0xFB03);  entity("fflig",0xFB00);  entity("ffllig",0xFB04);  entity("ffr",0x1D523);  entity("Ffr",0x1D509);  entity("filig",0xFB01);  entity("FilledSmallSquare",0x25FC);  entity("FilledVerySmallSquare",0x25AA);  entity("flat",0x266D);  entity("fllig",0xFB02);  entity("fltns",0x25B1);  entity("fnof",0x0192);  entity("fopf",0x1D557);  entity("Fopf",0x1D53D);  entity("forall",0x2200);  entity("fork",0x22D4);  entity("forkv",0x2AD9);  entity("Fouriertrf",0x2131);  entity("fpartint",0x2A0D);  entity("frac12",0x00BD);  entity("frac13",0x2153);  entity("frac14",0x00BC);  entity("frac15",0x2155);  entity("frac16",0x2159);  entity("frac18",0x215B);  entity("frac23",0x2154);  entity("frac25",0x2156);  entity("frac34",0x00BE);  entity("frac35",0x2157);  entity("frac38",0x215C);  entity("frac45",0x2158);  entity("frac56",0x215A);  entity("frac58",0x215D);  entity("frac78",0x215E);  entity("frasl",0x2044);  entity("frown",0x2322);  entity("fscr",0x1D4BB);  entity("Fscr",0x2131);  entity("gacute",0x01F5);  entity("gamma",0x03B3);  entity("Gamma",0x0393);  entity("gammad",0x03DD);  entity("Gammad",0x03DC);  entity("gap",0x2A86);  entity("gbreve",0x011F);  entity("Gbreve",0x011E);  entity("Gcedil",0x0122);  entity("gcirc",0x011D);  entity("Gcirc",0x011C);  entity("gcy",0x0433);  entity("Gcy",0x0413);  entity("gdot",0x0121);  entity("Gdot",0x0120);  entity("ge",0x2265);  entity("gE",0x2267);  entity("gel",0x22DB);  entity("gEl",0x2A8C);  entity("geq",0x2265);  entity("geqq",0x2267);  entity("geqslant",0x2A7E);  entity("ges",0x2A7E);  entity("gescc",0x2AA9);  entity("gesdot",0x2A80);  entity("gesdoto",0x2A82);  entity("gesdotol",0x2A84);  entity("gesles",0x2A94);  entity("gfr",0x1D524);  entity("Gfr",0x1D50A);  entity("gg",0x226B);  entity("Gg",0x22D9);  entity("ggg",0x22D9);  entity("ggr",0x03B3);  entity("Ggr",0x0393);  entity("gimel",0x2137);  entity("gjcy",0x0453);  entity("GJcy",0x0403);  entity("gl",0x2277);  entity("gla",0x2AA5);  entity("glE",0x2A92);  entity("glj",0x2AA4);  entity("gnap",0x2A8A);  entity("gnapprox",0x2A8A);  entity("gne",0x2A88);  entity("gnE",0x2269);  entity("gneq",0x2A88);  entity("gneqq",0x2269);  entity("gnsim",0x22E7);  entity("gopf",0x1D558);  entity("Gopf",0x1D53E);  entity("grave",0x0060);  entity("GreaterEqual",0x2265);  entity("GreaterEqualLess",0x22DB);  entity("GreaterFullEqual",0x2267);  entity("GreaterGreater",0x2AA2);  entity("GreaterLess",0x2277);  entity("GreaterSlantEqual",0x2A7E);  entity("GreaterTilde",0x2273);  entity("gscr",0x210A);  entity("Gscr",0x1D4A2);  entity("gsim",0x2273);  entity("gsime",0x2A8E);  entity("gsiml",0x2A90);  entity("gt",0x003E);  entity("Gt",0x226B);  entity("gtcc",0x2AA7);  entity("gtcir",0x2A7A);  entity("gtdot",0x22D7);  entity("gtlPar",0x2995);  entity("gtquest",0x2A7C);  entity("gtrapprox",0x2A86);  entity("gtrarr",0x2978);  entity("gtrdot",0x22D7);  entity("gtreqless",0x22DB);  entity("gtreqqless",0x2A8C);  entity("gtrless",0x2277);  entity("gtrsim",0x2273);  entity("Hacek",0x02C7);  entity("hairsp",0x200A);  entity("half",0x00BD);  entity("hamilt",0x210B);  entity("hardcy",0x044A);  entity("HARDcy",0x042A);  entity("harr",0x2194);  entity("hArr",0x21D4);  entity("harrcir",0x2948);  entity("harrw",0x21AD);  entity("Hat",0x005E);  entity("hbar",0x210F);  entity("hcirc",0x0125);  entity("Hcirc",0x0124);  entity("hearts",0x2665);  entity("heartsuit",0x2665);  entity("hellip",0x2026);  entity("hercon",0x22B9);  entity("hfr",0x1D525);  entity("Hfr",0x210C);  entity("HilbertSpace",0x210B);  entity("hksearow",0x2925);  entity("hkswarow",0x2926);  entity("hoarr",0x21FF);  entity("homtht",0x223B);  entity("hookleftarrow",0x21A9);  entity("hookrightarrow",0x21AA);  entity("hopf",0x1D559);  entity("Hopf",0x210D);  entity("horbar",0x2015);  entity("HorizontalLine",0x2500);  entity("hscr",0x1D4BD);  entity("Hscr",0x210B);  entity("hslash",0x210F);  entity("hstrok",0x0127);  entity("Hstrok",0x0126);  entity("HumpDownHump",0x224E);  entity("HumpEqual",0x224F);  entity("hybull",0x2043);  entity("hyphen",0x2010);  entity("iacgr",0x03AF);  entity("Iacgr",0x038A);  entity("iacute",0x00ED);  entity("Iacute",0x00CD);  entity("ic",0x2063);  entity("icirc",0x00EE);  entity("Icirc",0x00CE);  entity("icy",0x0438);  entity("Icy",0x0418);  entity("idiagr",0x0390);  entity("idigr",0x03CA);  entity("Idigr",0x03AA);  entity("Idot",0x0130);  entity("iecy",0x0435);  entity("IEcy",0x0415);  entity("iexcl",0x00A1);  entity("iff",0x21D4);  entity("ifr",0x1D526);  entity("Ifr",0x2111);  entity("igr",0x03B9);  entity("Igr",0x0399);  entity("igrave",0x00EC);  entity("Igrave",0x00CC);  entity("ii",0x2148);  entity("iiiint",0x2A0C);  entity("iiint",0x222D);  entity("iinfin",0x29DC);  entity("iiota",0x2129);  entity("ijlig",0x0133);  entity("IJlig",0x0132);  entity("Im",0x2111);  entity("imacr",0x012B);  entity("Imacr",0x012A);  entity("image",0x2111);  entity("ImaginaryI",0x2148);  entity("imagline",0x2110);  entity("imagpart",0x2111);  entity("imath",0x0131);  entity("imof",0x22B7);  entity("imped",0x01B5);  entity("Implies",0x21D2);  entity("in",0x2208);  entity("incare",0x2105);  entity("infin",0x221E);  entity("infintie",0x29DD);  entity("inodot",0x0131);  entity("int",0x222B);  entity("Int",0x222C);  entity("intcal",0x22BA);  entity("integers",0x2124);  entity("Integral",0x222B);  entity("intercal",0x22BA);  entity("Intersection",0x22C2);  entity("intlarhk",0x2A17);  entity("intprod",0x2A3C);  entity("InvisibleComma",0x2063);  entity("InvisibleTimes",0x2062);  entity("iocy",0x0451);  entity("IOcy",0x0401);  entity("iogon",0x012F);  entity("Iogon",0x012E);  entity("iopf",0x1D55A);  entity("Iopf",0x1D540);  entity("iota",0x03B9);  entity("Iota",0x0399);  entity("iprod",0x2A3C);  entity("iquest",0x00BF);  entity("iscr",0x1D4BE);  entity("Iscr",0x2110);  entity("isin",0x2208);  entity("isindot",0x22F5);  entity("isinE",0x22F9);  entity("isins",0x22F4);  entity("isinsv",0x22F3);  entity("isinv",0x2208);  entity("it",0x2062);  entity("itilde",0x0129);  entity("Itilde",0x0128);  entity("iukcy",0x0456);  entity("Iukcy",0x0406);  entity("iuml",0x00EF);  entity("Iuml",0x00CF);  entity("jcirc",0x0135);  entity("Jcirc",0x0134);  entity("jcy",0x0439);  entity("Jcy",0x0419);  entity("jfr",0x1D527);  entity("Jfr",0x1D50D);  entity("jmath",0x0237);  entity("jopf",0x1D55B);  entity("Jopf",0x1D541);  entity("jscr",0x1D4BF);  entity("Jscr",0x1D4A5);  entity("jsercy",0x0458);  entity("Jsercy",0x0408);  entity("jukcy",0x0454);  entity("Jukcy",0x0404);  entity("kappa",0x03BA);  entity("Kappa",0x039A);  entity("kappav",0x03F0);  entity("kcedil",0x0137);  entity("Kcedil",0x0136);  entity("kcy",0x043A);  entity("Kcy",0x041A);  entity("kfr",0x1D528);  entity("Kfr",0x1D50E);  entity("kgr",0x03BA);  entity("Kgr",0x039A);  entity("kgreen",0x0138);  entity("khcy",0x0445);  entity("KHcy",0x0425);  entity("khgr",0x03C7);  entity("KHgr",0x03A7);  entity("kjcy",0x045C);  entity("KJcy",0x040C);  entity("kopf",0x1D55C);  entity("Kopf",0x1D542);  entity("kscr",0x1D4C0);  entity("Kscr",0x1D4A6);  entity("lAarr",0x21DA);  entity("lacute",0x013A);  entity("Lacute",0x0139);  entity("laemptyv",0x29B4);  entity("lagran",0x2112);  entity("lambda",0x03BB);  entity("Lambda",0x039B);  entity("lang",0x2329);  entity("Lang",0x27EA);  entity("langd",0x2991);  entity("langle",0x2329);  entity("lap",0x2A85);  entity("Laplacetrf",0x2112);  entity("laquo",0x00AB);  entity("larr",0x2190);  entity("lArr",0x21D0);  entity("Larr",0x219E);  entity("larrb",0x21E4);  entity("larrbfs",0x291F);  entity("larrfs",0x291D);  entity("larrhk",0x21A9);  entity("larrlp",0x21AB);  entity("larrpl",0x2939);  entity("larrsim",0x2973);  entity("larrtl",0x21A2);  entity("lat",0x2AAB);  entity("latail",0x2919);  entity("lAtail",0x291B);  entity("late",0x2AAD);  entity("lbarr",0x290C);  entity("lBarr",0x290E);  entity("lbbrk",0x2997);  entity("lbrace",0x007B);  entity("lbrack",0x005B);  entity("lbrke",0x298B);  entity("lbrksld",0x298F);  entity("lbrkslu",0x298D);  entity("lcaron",0x013E);  entity("Lcaron",0x013D);  entity("lcedil",0x013C);  entity("Lcedil",0x013B);  entity("lceil",0x2308);  entity("lcub",0x007B);  entity("lcy",0x043B);  entity("Lcy",0x041B);  entity("ldca",0x2936);  entity("ldquo",0x201C);  entity("ldquor",0x201E);  entity("ldrdhar",0x2967);  entity("ldrushar",0x294B);  entity("ldsh",0x21B2);  entity("le",0x2264);  entity("lE",0x2266);  entity("LeftAngleBracket",0x2329);  entity("leftarrow",0x2190);  entity("Leftarrow",0x21D0);  entity("LeftArrowBar",0x21E4);  entity("LeftArrowRightArrow",0x21C6);  entity("leftarrowtail",0x21A2);  entity("LeftCeiling",0x2308);  entity("LeftDoubleBracket",0x27E6);  entity("LeftDownTeeVector",0x2961);  entity("LeftDownVector",0x21C3);  entity("LeftDownVectorBar",0x2959);  entity("LeftFloor",0x230A);  entity("leftharpoondown",0x21BD);  entity("leftharpoonup",0x21BC);  entity("leftleftarrows",0x21C7);  entity("leftrightarrow",0x2194);  entity("Leftrightarrow",0x21D4);  entity("leftrightarrows",0x21C6);  entity("leftrightharpoons",0x21CB);  entity("leftrightsquigarrow",0x21AD);  entity("LeftRightVector",0x294E);  entity("LeftTee",0x22A3);  entity("LeftTeeArrow",0x21A4);  entity("LeftTeeVector",0x295A);  entity("leftthreetimes",0x22CB);  entity("LeftTriangle",0x22B2);  entity("LeftTriangleBar",0x29CF);  entity("LeftTriangleEqual",0x22B4);  entity("LeftUpDownVector",0x2951);  entity("LeftUpTeeVector",0x2960);  entity("LeftUpVector",0x21BF);  entity("LeftUpVectorBar",0x2958);  entity("LeftVector",0x21BC);  entity("LeftVectorBar",0x2952);  entity("leg",0x22DA);  entity("lEg",0x2A8B);  entity("leq",0x2264);  entity("leqq",0x2266);  entity("leqslant",0x2A7D);  entity("les",0x2A7D);  entity("lescc",0x2AA8);  entity("lesdot",0x2A7F);  entity("lesdoto",0x2A81);  entity("lesdotor",0x2A83);  entity("lesges",0x2A93);  entity("lessapprox",0x2A85);  entity("lessdot",0x22D6);  entity("lesseqgtr",0x22DA);  entity("lesseqqgtr",0x2A8B);  entity("LessEqualGreater",0x22DA);  entity("LessFullEqual",0x2266);  entity("LessGreater",0x2276);  entity("lessgtr",0x2276);  entity("LessLess",0x2AA1);  entity("lesssim",0x2272);  entity("LessSlantEqual",0x2A7D);  entity("LessTilde",0x2272);  entity("lfisht",0x297C);  entity("lfloor",0x230A);  entity("lfr",0x1D529);  entity("Lfr",0x1D50F);  entity("lg",0x2276);  entity("lgE",0x2A91);  entity("lgr",0x03BB);  entity("Lgr",0x039B);  entity("lHar",0x2962);  entity("lhard",0x21BD);  entity("lharu",0x21BC);  entity("lharul",0x296A);  entity("lhblk",0x2584);  entity("ljcy",0x0459);  entity("LJcy",0x0409);  entity("ll",0x226A);  entity("Ll",0x22D8);  entity("llarr",0x21C7);  entity("llcorner",0x231E);  entity("Lleftarrow",0x21DA);  entity("llhard",0x296B);  entity("lltri",0x25FA);  entity("lmidot",0x0140);  entity("Lmidot",0x013F);  entity("lmoust",0x23B0);  entity("lmoustache",0x23B0);  entity("lnap",0x2A89);  entity("lnapprox",0x2A89);  entity("lne",0x2A87);  entity("lnE",0x2268);  entity("lneq",0x2A87);  entity("lneqq",0x2268);  entity("lnsim",0x22E6);  entity("loang",0x27EC);  entity("loarr",0x21FD);  entity("lobrk",0x27E6);  entity("longleftarrow",0x27F5);  entity("Longleftarrow",0x27F8);  entity("longleftrightarrow",0x27F7);  entity("Longleftrightarrow",0x27FA);  entity("longmapsto",0x27FC);  entity("longrightarrow",0x27F6);  entity("Longrightarrow",0x27F9);  entity("looparrowleft",0x21AB);  entity("looparrowright",0x21AC);  entity("lopar",0x2985);  entity("lopf",0x1D55D);  entity("Lopf",0x1D543);  entity("loplus",0x2A2D);  entity("lotimes",0x2A34);  entity("lowast",0x2217);  entity("lowbar",0x005F);  entity("LowerLeftArrow",0x2199);  entity("LowerRightArrow",0x2198);  entity("loz",0x25CA);  entity("lozenge",0x25CA);  entity("lozf",0x29EB);  entity("lpar",0x0028);  entity("lparlt",0x2993);  entity("lrarr",0x21C6);  entity("lrcorner",0x231F);  entity("lrhar",0x21CB);  entity("lrhard",0x296D);  entity("lrm",0x200E);  entity("lrtri",0x22BF);  entity("lsaquo",0x2039);  entity("lscr",0x1D4C1);  entity("Lscr",0x2112);  entity("lsh",0x21B0);  entity("lsim",0x2272);  entity("lsime",0x2A8D);  entity("lsimg",0x2A8F);  entity("lsqb",0x005B);  entity("lsquo",0x2018);  entity("lsquor",0x201A);  entity("lstrok",0x0142);  entity("Lstrok",0x0141);  entity("lt",0x003C);  entity("Lt",0x226A);  entity("ltcc",0x2AA6);  entity("ltcir",0x2A79);  entity("ltdot",0x22D6);  entity("lthree",0x22CB);  entity("ltimes",0x22C9);  entity("ltlarr",0x2976);  entity("ltquest",0x2A7B);  entity("ltri",0x25C3);  entity("ltrie",0x22B4);  entity("ltrif",0x25C2);  entity("ltrPar",0x2996);  entity("lurdshar",0x294A);  entity("luruhar",0x2966);  entity("macr",0x00AF);  entity("male",0x2642);  entity("malt",0x2720);  entity("maltese",0x2720);  entity("map",0x21A6);  entity("Map",0x2905);  entity("mapsto",0x21A6);  entity("mapstodown",0x21A7);  entity("mapstoleft",0x21A4);  entity("mapstoup",0x21A5);  entity("marker",0x25AE);  entity("mcomma",0x2A29);  entity("mcy",0x043C);  entity("Mcy",0x041C);  entity("mdash",0x2014);  entity("mDDot",0x223A);  entity("measuredangle",0x2221);  entity("MediumSpace",0x205F);  entity("Mellintrf",0x2133);  entity("mfr",0x1D52A);  entity("Mfr",0x1D510);  entity("mgr",0x03BC);  entity("Mgr",0x039C);  entity("mho",0x2127);  entity("micro",0x00B5);  entity("mid",0x2223);  entity("midast",0x002A);  entity("midcir",0x2AF0);  entity("middot",0x00B7);  entity("minus",0x2212);  entity("minusb",0x229F);  entity("minusd",0x2238);  entity("minusdu",0x2A2A);  entity("MinusPlus",0x2213);  entity("mlcp",0x2ADB);  entity("mldr",0x2026);  entity("mnplus",0x2213);  entity("models",0x22A7);  entity("mopf",0x1D55E);  entity("Mopf",0x1D544);  entity("mp",0x2213);  entity("mscr",0x1D4C2);  entity("Mscr",0x2133);  entity("mstpos",0x223E);  entity("mu",0x03BC);  entity("Mu",0x039C);  entity("multimap",0x22B8);  entity("mumap",0x22B8);  entity("nabla",0x2207);  entity("nacute",0x0144);  entity("Nacute",0x0143);  entity("nap",0x2249);  entity("napos",0x0149);  entity("napprox",0x2249);  entity("natur",0x266E);  entity("natural",0x266E);  entity("naturals",0x2115);  entity("nbsp",0x00A0);  entity("ncap",0x2A43);  entity("ncaron",0x0148);  entity("Ncaron",0x0147);  entity("ncedil",0x0146);  entity("Ncedil",0x0145);  entity("ncong",0x2247);  entity("ncup",0x2A42);  entity("ncy",0x043D);  entity("Ncy",0x041D);  entity("ndash",0x2013);  entity("ne",0x2260);  entity("nearhk",0x2924);  entity("nearr",0x2197);  entity("neArr",0x21D7);  entity("nearrow",0x2197);  entity("NegativeMediumSpace",0x200B);  entity("NegativeThickSpace",0x200B);  entity("NegativeThinSpace",0x200B);  entity("NegativeVeryThinSpace",0x200B);  entity("nequiv",0x2262);  entity("nesear",0x2928);  entity("NestedGreaterGreater",0x226B);  entity("NestedLessLess",0x226A);  entity("NewLine",0x000A);  entity("nexist",0x2204);  entity("nexists",0x2204);  entity("nfr",0x1D52B);  entity("Nfr",0x1D511);  entity("nge",0x2271);  entity("ngeq",0x2271);  entity("ngr",0x03BD);  entity("Ngr",0x039D);  entity("ngsim",0x2275);  entity("ngt",0x226F);  entity("ngtr",0x226F);  entity("nharr",0x21AE);  entity("nhArr",0x21CE);  entity("nhpar",0x2AF2);  entity("ni",0x220B);  entity("nis",0x22FC);  entity("nisd",0x22FA);  entity("niv",0x220B);  entity("njcy",0x045A);  entity("NJcy",0x040A);  entity("nlarr",0x219A);  entity("nlArr",0x21CD);  entity("nldr",0x2025);  entity("nle",0x2270);  entity("nleftarrow",0x219A);  entity("nLeftarrow",0x21CD);  entity("nleftrightarrow",0x21AE);  entity("nLeftrightarrow",0x21CE);  entity("nleq",0x2270);  entity("nless",0x226E);  entity("nlsim",0x2274);  entity("nlt",0x226E);  entity("nltri",0x22EA);  entity("nltrie",0x22EC);  entity("nmid",0x2224);  entity("NoBreak",0x2060);  entity("NonBreakingSpace",0x00A0);  entity("nopf",0x1D55F);  entity("Nopf",0x2115);  entity("not",0x00AC);  entity("Not",0x2AEC);  entity("NotCongruent",0x2262);  entity("NotCupCap",0x226D);  entity("NotDoubleVerticalBar",0x2226);  entity("NotElement",0x2209);  entity("NotEqual",0x2260);  entity("NotExists",0x2204);  entity("NotGreater",0x226F);  entity("NotGreaterEqual",0x2271);  entity("NotGreaterLess",0x2279);  entity("NotGreaterTilde",0x2275);  entity("notin",0x2209);  entity("notinva",0x2209);  entity("notinvb",0x22F7);  entity("notinvc",0x22F6);  entity("NotLeftTriangle",0x22EA);  entity("NotLeftTriangleEqual",0x22EC);  entity("NotLess",0x226E);  entity("NotLessEqual",0x2270);  entity("NotLessGreater",0x2278);  entity("NotLessTilde",0x2274);  entity("notni",0x220C);  entity("notniva",0x220C);  entity("notnivb",0x22FE);  entity("notnivc",0x22FD);  entity("NotPrecedes",0x2280);  entity("NotPrecedesSlantEqual",0x22E0);  entity("NotReverseElement",0x220C);  entity("NotRightTriangle",0x22EB);  entity("NotRightTriangleEqual",0x22ED);  entity("NotSquareSubsetEqual",0x22E2);  entity("NotSquareSupersetEqual",0x22E3);  entity("NotSubsetEqual",0x2288);  entity("NotSucceeds",0x2281);  entity("NotSucceedsSlantEqual",0x22E1);  entity("NotSupersetEqual",0x2289);  entity("NotTilde",0x2241);  entity("NotTildeEqual",0x2244);  entity("NotTildeFullEqual",0x2247);  entity("NotTildeTilde",0x2249);  entity("NotVerticalBar",0x2224);  entity("npar",0x2226);  entity("nparallel",0x2226);  entity("npolint",0x2A14);  entity("npr",0x2280);  entity("nprcue",0x22E0);  entity("nprec",0x2280);  entity("nrarr",0x219B);  entity("nrArr",0x21CF);  entity("nrightarrow",0x219B);  entity("nRightarrow",0x21CF);  entity("nrtri",0x22EB);  entity("nrtrie",0x22ED);  entity("nsc",0x2281);  entity("nsccue",0x22E1);  entity("nscr",0x1D4C3);  entity("Nscr",0x1D4A9);  entity("nshortmid",0x2224);  entity("nshortparallel",0x2226);  entity("nsim",0x2241);  entity("nsime",0x2244);  entity("nsimeq",0x2244);  entity("nsmid",0x2224);  entity("nspar",0x2226);  entity("nsqsube",0x22E2);  entity("nsqsupe",0x22E3);  entity("nsub",0x2284);  entity("nsube",0x2288);  entity("nsubseteq",0x2288);  entity("nsucc",0x2281);  entity("nsup",0x2285);  entity("nsupe",0x2289);  entity("nsupseteq",0x2289);  entity("ntgl",0x2279);  entity("ntilde",0x00F1);  entity("Ntilde",0x00D1);  entity("ntlg",0x2278);  entity("ntriangleleft",0x22EA);  entity("ntrianglelefteq",0x22EC);  entity("ntriangleright",0x22EB);  entity("ntrianglerighteq",0x22ED);  entity("nu",0x03BD);  entity("Nu",0x039D);  entity("num",0x0023);  entity("numero",0x2116);  entity("numsp",0x2007);  entity("nvdash",0x22AC);  entity("nvDash",0x22AD);  entity("nVdash",0x22AE);  entity("nVDash",0x22AF);  entity("nvHarr",0x2904);  entity("nvinfin",0x29DE);  entity("nvlArr",0x2902);  entity("nvrArr",0x2903);  entity("nwarhk",0x2923);  entity("nwarr",0x2196);  entity("nwArr",0x21D6);  entity("nwarrow",0x2196);  entity("nwnear",0x2927);  entity("oacgr",0x03CC);  entity("Oacgr",0x038C);  entity("oacute",0x00F3);  entity("Oacute",0x00D3);  entity("oast",0x229B);  entity("ocir",0x229A);  entity("ocirc",0x00F4);  entity("Ocirc",0x00D4);  entity("ocy",0x043E);  entity("Ocy",0x041E);  entity("odash",0x229D);  entity("odblac",0x0151);  entity("Odblac",0x0150);  entity("odiv",0x2A38);  entity("odot",0x2299);  entity("odsold",0x29BC);  entity("oelig",0x0153);  entity("OElig",0x0152);  entity("ofcir",0x29BF);  entity("ofr",0x1D52C);  entity("Ofr",0x1D512);  entity("ogon",0x02DB);  entity("ogr",0x03BF);  entity("Ogr",0x039F);  entity("ograve",0x00F2);  entity("Ograve",0x00D2);  entity("ogt",0x29C1);  entity("ohacgr",0x03CE);  entity("OHacgr",0x038F);  entity("ohbar",0x29B5);  entity("ohgr",0x03C9);  entity("OHgr",0x03A9);  entity("ohm",0x2126);  entity("oint",0x222E);  entity("olarr",0x21BA);  entity("olcir",0x29BE);  entity("olcross",0x29BB);  entity("oline",0x203E);  entity("olt",0x29C0);  entity("omacr",0x014D);  entity("Omacr",0x014C);  entity("omega",0x03C9);  entity("Omega",0x03A9);  entity("omicron",0x03BF);  entity("Omicron",0x039F);  entity("omid",0x29B6);  entity("ominus",0x2296);  entity("oopf",0x1D560);  entity("Oopf",0x1D546);  entity("opar",0x29B7);  entity("OpenCurlyDoubleQuote",0x201C);  entity("OpenCurlyQuote",0x2018);  entity("operp",0x29B9);  entity("oplus",0x2295);  entity("or",0x2228);  entity("Or",0x2A54);  entity("orarr",0x21BB);  entity("ord",0x2A5D);  entity("order",0x2134);  entity("orderof",0x2134);  entity("ordf",0x00AA);  entity("ordm",0x00BA);  entity("origof",0x22B6);  entity("oror",0x2A56);  entity("orslope",0x2A57);  entity("orv",0x2A5B);  entity("oS",0x24C8);  entity("oscr",0x2134);  entity("Oscr",0x1D4AA);  entity("oslash",0x00F8);  entity("Oslash",0x00D8);  entity("osol",0x2298);  entity("otilde",0x00F5);  entity("Otilde",0x00D5);  entity("otimes",0x2297);  entity("Otimes",0x2A37);  entity("otimesas",0x2A36);  entity("ouml",0x00F6);  entity("Ouml",0x00D6);  entity("ovbar",0x233D);  entity("OverBar",0x00AF);  entity("OverBrace",0xFE37);  entity("OverBracket",0x23B4);  entity("OverParenthesis",0xFE35);  entity("par",0x2225);  entity("para",0x00B6);  entity("parallel",0x2225);  entity("parsim",0x2AF3);  entity("parsl",0x2AFD);  entity("part",0x2202);  entity("PartialD",0x2202);  entity("pcy",0x043F);  entity("Pcy",0x041F);  entity("percnt",0x0025);  entity("period",0x002E);  entity("permil",0x2030);  entity("perp",0x22A5);  entity("pertenk",0x2031);  entity("pfr",0x1D52D);  entity("Pfr",0x1D513);  entity("pgr",0x03C0);  entity("Pgr",0x03A0);  entity("phgr",0x03C6);  entity("PHgr",0x03A6);  entity("phi",0x03D5);  entity("Phi",0x03A6);  entity("phiv",0x03C6);  entity("phmmat",0x2133);  entity("phone",0x260E);  entity("pi",0x03C0);  entity("Pi",0x03A0);  entity("pitchfork",0x22D4);  entity("piv",0x03D6);  entity("planck",0x210F);  entity("planckh",0x210E);  entity("plankv",0x210F);  entity("plus",0x002B);  entity("plusacir",0x2A23);  entity("plusb",0x229E);  entity("pluscir",0x2A22);  entity("plusdo",0x2214);  entity("plusdu",0x2A25);  entity("pluse",0x2A72);  entity("PlusMinus",0x00B1);  entity("plusmn",0x00B1);  entity("plussim",0x2A26);  entity("plustwo",0x2A27);  entity("pm",0x00B1);  entity("Poincareplane",0x210C);  entity("pointint",0x2A15);  entity("popf",0x1D561);  entity("Popf",0x2119);  entity("pound",0x00A3);  entity("pr",0x227A);  entity("Pr",0x2ABB);  entity("prap",0x2AB7);  entity("prcue",0x227C);  entity("pre",0x2AAF);  entity("prE",0x2AB3);  entity("prec",0x227A);  entity("precapprox",0x2AB7);  entity("preccurlyeq",0x227C);  entity("Precedes",0x227A);  entity("PrecedesEqual",0x2AAF);  entity("PrecedesSlantEqual",0x227C);  entity("PrecedesTilde",0x227E);  entity("preceq",0x2AAF);  entity("precnapprox",0x2AB9);  entity("precneqq",0x2AB5);  entity("precnsim",0x22E8);  entity("precsim",0x227E);  entity("prime",0x2032);  entity("Prime",0x2033);  entity("primes",0x2119);  entity("prnap",0x2AB9);  entity("prnE",0x2AB5);  entity("prnsim",0x22E8);  entity("prod",0x220F);  entity("Product",0x220F);  entity("profalar",0x232E);  entity("profline",0x2312);  entity("profsurf",0x2313);  entity("prop",0x221D);  entity("Proportion",0x2237);  entity("Proportional",0x221D);  entity("propto",0x221D);  entity("prsim",0x227E);  entity("prurel",0x22B0);  entity("pscr",0x1D4C5);  entity("Pscr",0x1D4AB);  entity("psgr",0x03C8);  entity("PSgr",0x03A8);  entity("psi",0x03C8);  entity("Psi",0x03A8);  entity("puncsp",0x2008);  entity("qfr",0x1D52E);  entity("Qfr",0x1D514);  entity("qint",0x2A0C);  entity("qopf",0x1D562);  entity("Qopf",0x211A);  entity("qprime",0x2057);  entity("qscr",0x1D4C6);  entity("Qscr",0x1D4AC);  entity("quaternions",0x210D);  entity("quatint",0x2A16);  entity("quest",0x003F);  entity("questeq",0x225F);  entity("quot",0x0022);  entity("rAarr",0x21DB);  entity("race",0x29DA);  entity("racute",0x0155);  entity("Racute",0x0154);  entity("radic",0x221A);  entity("raemptyv",0x29B3);  entity("rang",0x232A);  entity("Rang",0x27EB);  entity("rangd",0x2992);  entity("range",0x29A5);  entity("rangle",0x232A);  entity("raquo",0x00BB);  entity("rarr",0x2192);  entity("rArr",0x21D2);  entity("Rarr",0x21A0);  entity("rarrap",0x2975);  entity("rarrb",0x21E5);  entity("rarrbfs",0x2920);  entity("rarrc",0x2933);  entity("rarrfs",0x291E);  entity("rarrhk",0x21AA);  entity("rarrlp",0x21AC);  entity("rarrpl",0x2945);  entity("rarrsim",0x2974);  entity("rarrtl",0x21A3);  entity("Rarrtl",0x2916);  entity("rarrw",0x219D);  entity("ratail",0x291A);  entity("rAtail",0x291C);  entity("ratio",0x2236);  entity("rationals",0x211A);  entity("rbarr",0x290D);  entity("rBarr",0x290F);  entity("RBarr",0x2910);  entity("rbbrk",0x2998);  entity("rbrace",0x007D);  entity("rbrack",0x005D);  entity("rbrke",0x298C);  entity("rbrksld",0x298E);  entity("rbrkslu",0x2990);  entity("rcaron",0x0159);  entity("Rcaron",0x0158);  entity("rcedil",0x0157);  entity("Rcedil",0x0156);  entity("rceil",0x2309);  entity("rcub",0x007D);  entity("rcy",0x0440);  entity("Rcy",0x0420);  entity("rdca",0x2937);  entity("rdldhar",0x2969);  entity("rdquo",0x201D);  entity("rdquor",0x201D);  entity("rdsh",0x21B3);  entity("Re",0x211C);  entity("real",0x211C);  entity("realine",0x211B);  entity("realpart",0x211C);  entity("reals",0x211D);  entity("rect",0x25AD);  entity("reg",0x00AE);  entity("ReverseElement",0x220B);  entity("ReverseEquilibrium",0x21CB);  entity("ReverseUpEquilibrium",0x296F);  entity("rfisht",0x297D);  entity("rfloor",0x230B);  entity("rfr",0x1D52F);  entity("Rfr",0x211C);  entity("rgr",0x03C1);  entity("Rgr",0x03A1);  entity("rHar",0x2964);  entity("rhard",0x21C1);  entity("rharu",0x21C0);  entity("rharul",0x296C);  entity("rho",0x03C1);  entity("Rho",0x03A1);  entity("rhov",0x03F1);  entity("RightAngleBracket",0x232A);  entity("rightarrow",0x2192);  entity("Rightarrow",0x21D2);  entity("RightArrowBar",0x21E5);  entity("RightArrowLeftArrow",0x21C4);  entity("rightarrowtail",0x21A3);  entity("RightCeiling",0x2309);  entity("RightDoubleBracket",0x27E7);  entity("RightDownTeeVector",0x295D);  entity("RightDownVector",0x21C2);  entity("RightDownVectorBar",0x2955);  entity("RightFloor",0x230B);  entity("rightharpoondown",0x21C1);  entity("rightharpoonup",0x21C0);  entity("rightleftarrows",0x21C4);  entity("rightleftharpoons",0x21CC);  entity("rightrightarrows",0x21C9);  entity("rightsquigarrow",0x219D);  entity("RightTee",0x22A2);  entity("RightTeeArrow",0x21A6);  entity("RightTeeVector",0x295B);  entity("rightthreetimes",0x22CC);  entity("RightTriangle",0x22B3);  entity("RightTriangleBar",0x29D0);  entity("RightTriangleEqual",0x22B5);  entity("RightUpDownVector",0x294F);  entity("RightUpTeeVector",0x295C);  entity("RightUpVector",0x21BE);  entity("RightUpVectorBar",0x2954);  entity("RightVector",0x21C0);  entity("RightVectorBar",0x2953);  entity("ring",0x02DA);  entity("risingdotseq",0x2253);  entity("rlarr",0x21C4);  entity("rlhar",0x21CC);  entity("rlm",0x200F);  entity("rmoust",0x23B1);  entity("rmoustache",0x23B1);  entity("rnmid",0x2AEE);  entity("roang",0x27ED);  entity("roarr",0x21FE);  entity("robrk",0x27E7);  entity("ropar",0x2986);  entity("ropf",0x1D563);  entity("Ropf",0x211D);  entity("roplus",0x2A2E);  entity("rotimes",0x2A35);  entity("RoundImplies",0x2970);  entity("rpar",0x0029);  entity("rpargt",0x2994);  entity("rppolint",0x2A12);  entity("rrarr",0x21C9);  entity("Rrightarrow",0x21DB);  entity("rsaquo",0x203A);  entity("rscr",0x1D4C7);  entity("Rscr",0x211B);  entity("rsh",0x21B1);  entity("rsqb",0x005D);  entity("rsquo",0x2019);  entity("rsquor",0x2019);  entity("rthree",0x22CC);  entity("rtimes",0x22CA);  entity("rtri",0x25B9);  entity("rtrie",0x22B5);  entity("rtrif",0x25B8);  entity("rtriltri",0x29CE);  entity("RuleDelayed",0x29F4);  entity("ruluhar",0x2968);  entity("rx",0x211E);  entity("sacute",0x015B);  entity("Sacute",0x015A);  entity("sbquo",0x201A);  entity("sc",0x227B);  entity("Sc",0x2ABC);  entity("scap",0x2AB8);  entity("scaron",0x0161);  entity("Scaron",0x0160);  entity("sccue",0x227D);  entity("sce",0x2AB0);  entity("scE",0x2AB4);  entity("scedil",0x015F);  entity("Scedil",0x015E);  entity("scirc",0x015D);  entity("Scirc",0x015C);  entity("scnap",0x2ABA);  entity("scnE",0x2AB6);  entity("scnsim",0x22E9);  entity("scpolint",0x2A13);  entity("scsim",0x227F);  entity("scy",0x0441);  entity("Scy",0x0421);  entity("sdot",0x22C5);  entity("sdotb",0x22A1);  entity("sdote",0x2A66);  entity("searhk",0x2925);  entity("searr",0x2198);  entity("seArr",0x21D8);  entity("searrow",0x2198);  entity("sect",0x00A7);  entity("semi",0x003B);  entity("seswar",0x2929);  entity("setminus",0x2216);  entity("setmn",0x2216);  entity("sext",0x2736);  entity("sfgr",0x03C2);  entity("sfr",0x1D530);  entity("Sfr",0x1D516);  entity("sfrown",0x2322);  entity("sgr",0x03C3);  entity("Sgr",0x03A3);  entity("sharp",0x266F);  entity("shchcy",0x0449);  entity("SHCHcy",0x0429);  entity("shcy",0x0448);  entity("SHcy",0x0428);  entity("ShortDownArrow",0x2193);  entity("ShortLeftArrow",0x2190);  entity("shortmid",0x2223);  entity("shortparallel",0x2225);  entity("ShortRightArrow",0x2192);  entity("ShortUpArrow",0x2191);  entity("shy",0x00AD);  entity("sigma",0x03C3);  entity("Sigma",0x03A3);  entity("sigmaf",0x03C2);  entity("sigmav",0x03C2);  entity("sim",0x223C);  entity("simdot",0x2A6A);  entity("sime",0x2243);  entity("simeq",0x2243);  entity("simg",0x2A9E);  entity("simgE",0x2AA0);  entity("siml",0x2A9D);  entity("simlE",0x2A9F);  entity("simne",0x2246);  entity("simplus",0x2A24);  entity("simrarr",0x2972);  entity("slarr",0x2190);  entity("SmallCircle",0x2218);  entity("smallsetminus",0x2216);  entity("smashp",0x2A33);  entity("smeparsl",0x29E4);  entity("smid",0x2223);  entity("smile",0x2323);  entity("smt",0x2AAA);  entity("smte",0x2AAC);  entity("softcy",0x044C);  entity("SOFTcy",0x042C);  entity("sol",0x002F);  entity("solb",0x29C4);  entity("solbar",0x233F);  entity("sopf",0x1D564);  entity("Sopf",0x1D54A);  entity("spades",0x2660);  entity("spadesuit",0x2660);  entity("spar",0x2225);  entity("sqcap",0x2293);  entity("sqcup",0x2294);  entity("Sqrt",0x221A);  entity("sqsub",0x228F);  entity("sqsube",0x2291);  entity("sqsubset",0x228F);  entity("sqsubseteq",0x2291);  entity("sqsup",0x2290);  entity("sqsupe",0x2292);  entity("sqsupset",0x2290);  entity("sqsupseteq",0x2292);  entity("squ",0x25A1);  entity("square",0x25A1);  entity("SquareIntersection",0x2293);  entity("SquareSubset",0x228F);  entity("SquareSubsetEqual",0x2291);  entity("SquareSuperset",0x2290);  entity("SquareSupersetEqual",0x2292);  entity("SquareUnion",0x2294);  entity("squarf",0x25AA);  entity("squf",0x25AA);  entity("srarr",0x2192);  entity("sscr",0x1D4C8);  entity("Sscr",0x1D4AE);  entity("ssetmn",0x2216);  entity("ssmile",0x2323);  entity("sstarf",0x22C6);  entity("star",0x2606);  entity("Star",0x22C6);  entity("starf",0x2605);  entity("straightepsilon",0x03F5);  entity("straightphi",0x03D5);  entity("strns",0x00AF);  entity("sub",0x2282);  entity("Sub",0x22D0);  entity("subdot",0x2ABD);  entity("sube",0x2286);  entity("subE",0x2AC5);  entity("subedot",0x2AC3);  entity("submult",0x2AC1);  entity("subne",0x228A);  entity("subnE",0x2ACB);  entity("subplus",0x2ABF);  entity("subrarr",0x2979);  entity("subset",0x2282);  entity("Subset",0x22D0);  entity("subseteq",0x2286);  entity("subseteqq",0x2AC5);  entity("SubsetEqual",0x2286);  entity("subsetneq",0x228A);  entity("subsetneqq",0x2ACB);  entity("subsim",0x2AC7);  entity("subsub",0x2AD5);  entity("subsup",0x2AD3);  entity("succ",0x227B);  entity("succapprox",0x2AB8);  entity("succcurlyeq",0x227D);  entity("Succeeds",0x227B);  entity("SucceedsEqual",0x2AB0);  entity("SucceedsSlantEqual",0x227D);  entity("SucceedsTilde",0x227F);  entity("succeq",0x2AB0);  entity("succnapprox",0x2ABA);  entity("succneqq",0x2AB6);  entity("succnsim",0x22E9);  entity("succsim",0x227F);  entity("SuchThat",0x220B);  entity("sum",0x2211);  entity("sung",0x266A);  entity("sup",0x2283);  entity("Sup",0x22D1);  entity("sup1",0x00B9);  entity("sup2",0x00B2);  entity("sup3",0x00B3);  entity("supdot",0x2ABE);  entity("supdsub",0x2AD8);  entity("supe",0x2287);  entity("supE",0x2AC6);  entity("supedot",0x2AC4);  entity("Superset",0x2283);  entity("SupersetEqual",0x2287);  entity("suphsub",0x2AD7);  entity("suplarr",0x297B);  entity("supmult",0x2AC2);  entity("supne",0x228B);  entity("supnE",0x2ACC);  entity("supplus",0x2AC0);  entity("supset",0x2283);  entity("Supset",0x22D1);  entity("supseteq",0x2287);  entity("supseteqq",0x2AC6);  entity("supsetneq",0x228B);  entity("supsetneqq",0x2ACC);  entity("supsim",0x2AC8);  entity("supsub",0x2AD4);  entity("supsup",0x2AD6);  entity("swarhk",0x2926);  entity("swarr",0x2199);  entity("swArr",0x21D9);  entity("swarrow",0x2199);  entity("swnwar",0x292A);  entity("szlig",0x00DF);  entity("Tab",0x0009);  entity("target",0x2316);  entity("tau",0x03C4);  entity("Tau",0x03A4);  entity("tbrk",0x23B4);  entity("tcaron",0x0165);  entity("Tcaron",0x0164);  entity("tcedil",0x0163);  entity("Tcedil",0x0162);  entity("tcy",0x0442);  entity("Tcy",0x0422);  entity("telrec",0x2315);  entity("tfr",0x1D531);  entity("Tfr",0x1D517);  entity("tgr",0x03C4);  entity("Tgr",0x03A4);  entity("there4",0x2234);  entity("therefore",0x2234);  entity("theta",0x03B8);  entity("Theta",0x0398);  entity("thetasym",0x03D1);  entity("thetav",0x03D1);  entity("thgr",0x03B8);  entity("THgr",0x0398);  entity("thickapprox",0x2248);  entity("thicksim",0x223C);  entity("thinsp",0x2009);  entity("ThinSpace",0x2009);  entity("thkap",0x2248);  entity("thksim",0x223C);  entity("thorn",0x00FE);  entity("THORN",0x00DE);  entity("tilde",0x02DC);  entity("Tilde",0x223C);  entity("TildeEqual",0x2243);  entity("TildeFullEqual",0x2245);  entity("TildeTilde",0x2248);  entity("times",0x00D7);  entity("timesb",0x22A0);  entity("timesbar",0x2A31);  entity("timesd",0x2A30);  entity("tint",0x222D);  entity("toea",0x2928);  entity("top",0x22A4);  entity("topbot",0x2336);  entity("topcir",0x2AF1);  entity("topf",0x1D565);  entity("Topf",0x1D54B);  entity("topfork",0x2ADA);  entity("tosa",0x2929);  entity("tprime",0x2034);  entity("trade",0x2122);  entity("triangle",0x25B5);  entity("triangledown",0x25BF);  entity("triangleleft",0x25C3);  entity("trianglelefteq",0x22B4);  entity("triangleq",0x225C);  entity("triangleright",0x25B9);  entity("trianglerighteq",0x22B5);  entity("tridot",0x25EC);  entity("trie",0x225C);  entity("triminus",0x2A3A);  entity("triplus",0x2A39);  entity("trisb",0x29CD);  entity("tritime",0x2A3B);  entity("trpezium",0x23E2);  entity("tscr",0x1D4C9);  entity("Tscr",0x1D4AF);  entity("tscy",0x0446);  entity("TScy",0x0426);  entity("tshcy",0x045B);  entity("TSHcy",0x040B);  entity("tstrok",0x0167);  entity("Tstrok",0x0166);  entity("twixt",0x226C);  entity("twoheadleftarrow",0x219E);  entity("twoheadrightarrow",0x21A0);  entity("uacgr",0x03CD);  entity("Uacgr",0x038E);  entity("uacute",0x00FA);  entity("Uacute",0x00DA);  entity("uarr",0x2191);  entity("uArr",0x21D1);  entity("Uarr",0x219F);  entity("Uarrocir",0x2949);  entity("ubrcy",0x045E);  entity("Ubrcy",0x040E);  entity("ubreve",0x016D);  entity("Ubreve",0x016C);  entity("ucirc",0x00FB);  entity("Ucirc",0x00DB);  entity("ucy",0x0443);  entity("Ucy",0x0423);  entity("udarr",0x21C5);  entity("udblac",0x0171);  entity("Udblac",0x0170);  entity("udhar",0x296E);  entity("udiagr",0x03B0);  entity("udigr",0x03CB);  entity("Udigr",0x03AB);  entity("ufisht",0x297E);  entity("ufr",0x1D532);  entity("Ufr",0x1D518);  entity("ugr",0x03C5);  entity("Ugr",0x03A5);  entity("ugrave",0x00F9);  entity("Ugrave",0x00D9);  entity("uHar",0x2963);  entity("uharl",0x21BF);  entity("uharr",0x21BE);  entity("uhblk",0x2580);  entity("ulcorn",0x231C);  entity("ulcorner",0x231C);  entity("ulcrop",0x230F);  entity("ultri",0x25F8);  entity("umacr",0x016B);  entity("Umacr",0x016A);  entity("uml",0x00A8);  entity("UnderBrace",0xFE38);  entity("UnderBracket",0x23B5);  entity("UnderParenthesis",0xFE36);  entity("Union",0x22C3);  entity("UnionPlus",0x228E);  entity("uogon",0x0173);  entity("Uogon",0x0172);  entity("uopf",0x1D566);  entity("Uopf",0x1D54C);  entity("uparrow",0x2191);  entity("Uparrow",0x21D1);  entity("UpArrowBar",0x2912);  entity("UpArrowDownArrow",0x21C5);  entity("updownarrow",0x2195);  entity("Updownarrow",0x21D5);  entity("UpEquilibrium",0x296E);  entity("upharpoonleft",0x21BF);  entity("upharpoonright",0x21BE);  entity("uplus",0x228E);  entity("UpperLeftArrow",0x2196);  entity("UpperRightArrow",0x2197);  entity("upsi",0x03C5);  entity("Upsi",0x03D2);  entity("upsih",0x03D2);  entity("upsilon",0x03C5);  entity("Upsilon",0x03A5);  entity("UpTee",0x22A5);  entity("UpTeeArrow",0x21A5);  entity("upuparrows",0x21C8);  entity("urcorn",0x231D);  entity("urcorner",0x231D);  entity("urcrop",0x230E);  entity("uring",0x016F);  entity("Uring",0x016E);  entity("urtri",0x25F9);  entity("uscr",0x1D4CA);  entity("Uscr",0x1D4B0);  entity("utdot",0x22F0);  entity("utilde",0x0169);  entity("Utilde",0x0168);  entity("utri",0x25B5);  entity("utrif",0x25B4);  entity("uuarr",0x21C8);  entity("uuml",0x00FC);  entity("Uuml",0x00DC);  entity("uwangle",0x29A7);  entity("vangrt",0x299C);  entity("varepsilon",0x03B5);  entity("varkappa",0x03F0);  entity("varnothing",0x2205);  entity("varphi",0x03C6);  entity("varpi",0x03D6);  entity("varpropto",0x221D);  entity("varr",0x2195);  entity("vArr",0x21D5);  entity("varrho",0x03F1);  entity("varsigma",0x03C2);  entity("vartheta",0x03D1);  entity("vartriangleleft",0x22B2);  entity("vartriangleright",0x22B3);  entity("vBar",0x2AE8);  entity("Vbar",0x2AEB);  entity("vBarv",0x2AE9);  entity("vcy",0x0432);  entity("Vcy",0x0412);  entity("vdash",0x22A2);  entity("vDash",0x22A8);  entity("Vdash",0x22A9);  entity("VDash",0x22AB);  entity("Vdashl",0x2AE6);  entity("vee",0x2228);  entity("Vee",0x22C1);  entity("veebar",0x22BB);  entity("veeeq",0x225A);  entity("vellip",0x22EE);  entity("verbar",0x007C);  entity("Verbar",0x2016);  entity("vert",0x007C);  entity("Vert",0x2016);  entity("VerticalBar",0x2223);  entity("VerticalLine",0x007C);  entity("VerticalSeparator",0x2758);  entity("VerticalTilde",0x2240);  entity("VeryThinSpace",0x200A);  entity("vfr",0x1D533);  entity("Vfr",0x1D519);  entity("vltri",0x22B2);  entity("vopf",0x1D567);  entity("Vopf",0x1D54D);  entity("vprop",0x221D);  entity("vrtri",0x22B3);  entity("vscr",0x1D4CB);  entity("Vscr",0x1D4B1);  entity("Vvdash",0x22AA);  entity("vzigzag",0x299A);  entity("wcirc",0x0175);  entity("Wcirc",0x0174);  entity("wedbar",0x2A5F);  entity("wedge",0x2227);  entity("Wedge",0x22C0);  entity("wedgeq",0x2259);  entity("weierp",0x2118);  entity("wfr",0x1D534);  entity("Wfr",0x1D51A);  entity("wopf",0x1D568);  entity("Wopf",0x1D54E);  entity("wp",0x2118);  entity("wr",0x2240);  entity("wreath",0x2240);  entity("wscr",0x1D4CC);  entity("Wscr",0x1D4B2);  entity("xcap",0x22C2);  entity("xcirc",0x25EF);  entity("xcup",0x22C3);  entity("xdtri",0x25BD);  entity("xfr",0x1D535);  entity("Xfr",0x1D51B);  entity("xgr",0x03BE);  entity("Xgr",0x039E);  entity("xharr",0x27F7);  entity("xhArr",0x27FA);  entity("xi",0x03BE);  entity("Xi",0x039E);  entity("xlarr",0x27F5);  entity("xlArr",0x27F8);  entity("xmap",0x27FC);  entity("xnis",0x22FB);  entity("xodot",0x2A00);  entity("xopf",0x1D569);  entity("Xopf",0x1D54F);  entity("xoplus",0x2A01);  entity("xotime",0x2A02);  entity("xrarr",0x27F6);  entity("xrArr",0x27F9);  entity("xscr",0x1D4CD);  entity("Xscr",0x1D4B3);  entity("xsqcup",0x2A06);  entity("xuplus",0x2A04);  entity("xutri",0x25B3);  entity("xvee",0x22C1);  entity("xwedge",0x22C0);  entity("yacute",0x00FD);  entity("Yacute",0x00DD);  entity("yacy",0x044F);  entity("YAcy",0x042F);  entity("ycirc",0x0177);  entity("Ycirc",0x0176);  entity("ycy",0x044B);  entity("Ycy",0x042B);  entity("yen",0x00A5);  entity("yfr",0x1D536);  entity("Yfr",0x1D51C);  entity("yicy",0x0457);  entity("YIcy",0x0407);  entity("yopf",0x1D56A);  entity("Yopf",0x1D550);  entity("yscr",0x1D4CE);  entity("Yscr",0x1D4B4);  entity("yucy",0x044E);  entity("YUcy",0x042E);  entity("yuml",0x00FF);  entity("Yuml",0x0178);  entity("zacute",0x017A);  entity("Zacute",0x0179);  entity("zcaron",0x017E);  entity("Zcaron",0x017D);  entity("zcy",0x0437);  entity("Zcy",0x0417);  entity("zdot",0x017C);  entity("Zdot",0x017B);  entity("zeetrf",0x2128);  entity("ZeroWidthSpace",0x200B);  entity("zeta",0x03B6);  entity("Zeta",0x0396);  entity("zfr",0x1D537);  entity("Zfr",0x2128);  entity("zgr",0x03B6);  entity("Zgr",0x0396);  entity("zhcy",0x0436);  entity("ZHcy",0x0416);  entity("zigrarr",0x21DD);  entity("zopf",0x1D56B);  entity("Zopf",0x2124);  entity("zscr",0x1D4CF);  entity("Zscr",0x1D4B5);  entity("zwj",0x200D);  entity("zwnj",0x200C);}  }
class C{  public NewsfeedGetMentionsQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.getMentions",GetMentionsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void add(JsonElement element){  if (element == null) {    element=JsonNull.INSTANCE;  }  elements.add(element);}  }
class C{  public AfterSpaceModeChangeEvent(IJSpace space,SpaceMode spaceMode){  super(space,spaceMode);}  }
class C{  public void enable(){  LOGGER.debug("enable listener");  setEnabled(true);}  }
class C{  public synchronized void recordStatisticsForDriver(QueryStatistic statistic,String queryId){  if (queryStatisticsMap.get(queryId) != null) {    queryStatisticsMap.get(queryId).add(statistic);  } else {    List<QueryStatistic> newQueryStatistics=new ArrayList<QueryStatistic>();    newQueryStatistics.add(statistic);    queryStatisticsMap.put(queryId,newQueryStatistics);  }}  }
class C{  public void union(Clip c){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(c);    status=INUSE;    return;  }  clip[0]=Math.min(clip[0],c.clip[0]);  clip[1]=Math.min(clip[1],c.clip[1]);  clip[6]=Math.max(clip[6],c.clip[6]);  clip[7]=Math.max(clip[7],c.clip[7]);}  }
class C{  public static TangoPoseData planeFitToTangoWorldPose(double[] point,double[] normal,TangoPoseData tangoPose,DeviceExtrinsics extrinsics){  Matrix4 startServiceTdevice=tangoPoseToMatrix(tangoPose);  Vector3 depthUp=TANGO_WORLD_UP.clone();  startServiceTdevice.clone().multiply(extrinsics.getDeviceTDepthCamera()).inverse().rotateVector(depthUp);  Matrix4 depthTplane=matrixFromPointNormalUp(point,normal,depthUp);  Matrix4 tangoWorldTplane=startServiceTdevice.multiply(extrinsics.getDeviceTDepthCamera()).multiply(depthTplane);  return matrixToTangoPose(tangoWorldTplane);}  }
class C{  public ParserConfigurationSettings(XMLComponentManager parent){  fRecognizedFeatures=new ArrayList();  fRecognizedProperties=new ArrayList();  fFeatures=new HashMap();  fProperties=new HashMap();  fParentSettings=parent;}  }
class C{  public static boolean toBoolean(String indicator,boolean defaultVal){  Boolean result=toBoolean(indicator);  return result != null ? result : defaultVal;}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  public static GeoServerConnection showDialog(JDialog parentPanel,GeoServerConnection connectionDetails){  JDialog dialog=new JDialog(parentPanel,Localisation.getString(ConnectorDetailsPanel.class,"ConnectorDetailsPanel.title"),true);  dialog.setResizable(false);  ConnectorDetailsPanel panel=new ConnectorDetailsPanel(dialog);  dialog.getContentPane().add(panel);  panel.populate(connectionDetails);  dialog.pack();  dialog.setSize(BasePanel.FIELD_PANEL_WIDTH,175);  Controller.getInstance().centreDialog(dialog);  dialog.setVisible(true);  if (panel.okButtonPressed()) {    return panel.getConnectionDetails();  }  return null;}  }
class C{  public DocsEditQuery(VkApiClient client,UserActor actor,int ownerId,int docId){  super(client,"docs.edit",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  docId(docId);}  }
class C{  public double[][] process(double[] input) throws IllegalArgumentException, IOException {  if (input == null)   throw new IllegalArgumentException("input data must not be a null value");  if ((input.length % hopSize) != 0)   throw new IllegalArgumentException("Input data must be multiple of hop size (windowSize/2).");  double[][] mfcc=new double[(input.length / hopSize) - 1][numberCoefficients];  for (int i=0, pos=0; pos < input.length - hopSize; i++, pos+=hopSize)   mfcc[i]=processWindow(input,pos);  return mfcc;}  }
class C{  public boolean canGet(Class type){  if (type == null)   return false;  if (m_columnType.isPrimitive()) {    boolean primTypes=type.isAssignableFrom(m_columnType) || (TypeLib.isNumericType(m_columnType) && TypeLib.isNumericType(type));    return primTypes || type.isAssignableFrom(TypeLib.getWrapperType(m_columnType)) || type.isAssignableFrom(String.class);  } else {    return type.isAssignableFrom(m_columnType);  }}  }
class C{  public void notifyAttackObservers(Creature creature){  notifyObservers(ObserverType.ATTACK,creature);}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigBoolean copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigBoolean(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public LUDecomposition(Matrix A){  LU=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  piv=new int[m];  for (int i=0; i < m; i++) {    piv[i]=i;  }  pivsign=1;  double[] LUrowi;  double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++) {      LUcolj[i]=LU[i][j];    }    for (int i=0; i < m; i++) {      LUrowi=LU[i];      int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++) {        s+=LUrowi[k] * LUcolj[k];      }      LUrowi[j]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {        p=i;      }    }    if (p != j) {      for (int k=0; k < n; k++) {        double t=LU[p][k];        LU[p][k]=LU[j][k];        LU[j][k]=t;      }      int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m & LU[j][j] != 0.0) {      for (int i=j + 1; i < m; i++) {        LU[i][j]/=LU[j][j];      }    }  }}  }
class C{  public TrieNode find(String word){  return (word.length() < 1 ? null : find(word,root,0));}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static int copy(InputStream in,OutputStream out,long start,long end,boolean closeAfterDone) throws IOException {  try {    if (in == null || out == null)     return 0;    byte[] bb=new byte[1024 * 4];    int total=0;    in.skip(start);    int ii=(int)Math.min((end - start),bb.length);    int len=in.read(bb,0,ii);    while (len > 0) {      out.write(bb,0,len);      total+=len;      ii=(int)Math.min((end - start - total),bb.length);      len=in.read(bb,0,ii);      out.flush();    }    return total;  }  finally {    if (closeAfterDone) {      if (in != null) {        in.close();      }      if (out != null) {        out.close();      }    }  }}  }
class C{  public LeastSquaresBuilder parameterValidator(final ParameterValidator newValidator){  paramValidator=newValidator;  return this;}  }
class C{  private void onSubEquipmentUp(final Long pId,final Timestamp pTimestamp,final String pMessage){  if (LOGGER.isDebugEnabled()) {    StringBuffer str=new StringBuffer("onSubEquipmentUp(");    str.append(pId);    str.append(", ");    str.append(pTimestamp);    str.append(", ");    str.append(pMessage);    LOGGER.debug(str.toString());  }  try {    subEquipmentFacade.resume(pId,pTimestamp,pMessage);    SubEquipment subEquipmentCopy=subEquipmentCache.getCopy(pId);    Long stateTagId=subEquipmentCopy.getStateTagId();    Long commFaultId=subEquipmentCopy.getCommFaultTagId();    controlTagCache.acquireWriteLockOnKey(stateTagId);    try {      ControlTag stateTag=controlTagCache.get(stateTagId);      if (stateTag.getValue() == null || !stateTag.getValue().equals(SupervisionStatus.RUNNING.toString()) || !stateTag.isValid()) {        controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.RUNNING.toString(),pMessage,pTimestamp);      }    } catch (    CacheElementNotFoundException controlCacheEx) {      LOGGER.error("Unable to locate subequipment state tag in control tag cache (id is " + stateTagId + ")",controlCacheEx);    } finally {      controlTagCache.releaseWriteLockOnKey(stateTagId);    }    ControlTag commFaultTag=controlTagCache.getCopy(commFaultId);    setCommFaultTag(commFaultId,true,commFaultTag.getValueDescription(),pTimestamp);  } catch (  CacheElementNotFoundException subEquipmentCacheEx) {    LOGGER.error("Unable to locate subequipment in cache (id is " + pId + ")",subEquipmentCacheEx);  }}  }
class C{  public TypeDecl type(){  ASTNode$State state=state();  try {    ArrayList<TypeDecl> list=new ArrayList<TypeDecl>();    for (int i=0; i < getNumTypeAccess(); i++)     list.add(getTypeAccess(i).type());    return lookupLUBType(list).lub();  }  finally {  }}  }
class C{  private boolean isAttached(Spannable str,Selection selection,Object span,SpanCollectMode mode){  int spanStart=str.getSpanStart(span);  int spanEnd=str.getSpanEnd(span);  int selStart=selection.start();  int selEnd=selection.end();  int start=Math.max(spanStart,selStart);  int end=Math.min(spanEnd,selEnd);  if (start > end) {    return false;  } else   if (start < end) {    return true;  } else   if ((spanStart > selStart && spanEnd < selEnd) || (selStart > spanStart && selEnd < spanEnd)) {    return true;  } else   if (mode == SpanCollectMode.EXACT) {    return spanStart == selStart && spanEnd == selEnd && selStart == selEnd;  } else {    int flags=str.getSpanFlags(span) & Spanned.SPAN_POINT_MARK_MASK;    if (spanEnd == selStart) {      return isOneFlagSet(flags,Spanned.SPAN_EXCLUSIVE_INCLUSIVE,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    } else {      return isOneFlagSet(flags,Spanned.SPAN_INCLUSIVE_EXCLUSIVE,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    }  }}  }
class C{  private void initializeCMA(double[] guess){  if (lambda <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,lambda,0);  }  final double[][] sigmaArray=new double[guess.length][1];  for (int i=0; i < guess.length; i++) {    sigmaArray[i][0]=inputSigma[i];  }  final RealMatrix insigma=new Array2DRowRealMatrix(sigmaArray,false);  sigma=max(insigma);  stopTolUpX=1e3 * max(insigma);  stopTolX=1e-11 * max(insigma);  stopTolFun=1e-12;  stopTolHistFun=1e-13;  mu=lambda / 2;  logMu2=FastMath.log(mu + 0.5);  weights=log(sequence(1,mu,1)).scalarMultiply(-1).scalarAdd(logMu2);  double sumw=0;  double sumwq=0;  for (int i=0; i < mu; i++) {    double w=weights.getEntry(i,0);    sumw+=w;    sumwq+=w * w;  }  weights=weights.scalarMultiply(1 / sumw);  mueff=sumw * sumw / sumwq;  cc=(4 + mueff / dimension) / (dimension + 4 + 2 * mueff / dimension);  cs=(mueff + 2) / (dimension + mueff + 3.);  damps=(1 + 2 * FastMath.max(0,FastMath.sqrt((mueff - 1) / (dimension + 1)) - 1)) * FastMath.max(0.3,1 - dimension / (1e-6 + maxIterations)) + cs;  ccov1=2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);  ccovmu=FastMath.min(1 - ccov1,2 * (mueff - 2 + 1 / mueff) / ((dimension + 2) * (dimension + 2) + mueff));  ccov1Sep=FastMath.min(1,ccov1 * (dimension + 1.5) / 3);  ccovmuSep=FastMath.min(1 - ccov1,ccovmu * (dimension + 1.5) / 3);  chiN=FastMath.sqrt(dimension) * (1 - 1 / ((double)4 * dimension) + 1 / ((double)21 * dimension * dimension));  xmean=MatrixUtils.createColumnRealMatrix(guess);  diagD=insigma.scalarMultiply(1 / sigma);  diagC=square(diagD);  pc=zeros(dimension,1);  ps=zeros(dimension,1);  normps=ps.getFrobeniusNorm();  B=eye(dimension,dimension);  D=ones(dimension,1);  BD=times(B,repmat(diagD.transpose(),dimension,1));  C=B.multiply(diag(square(D)).multiply(B.transpose()));  historySize=10 + (int)(3 * 10 * dimension / (double)lambda);  fitnessHistory=new double[historySize];  for (int i=0; i < historySize; i++) {    fitnessHistory[i]=Double.MAX_VALUE;  }}  }
class C{  public CreateSiteWindow typeTitle(String title){  textField.setValue(title);  return this;}  }
class C{  ParticipantHandle(TransactionParticipant preparedPart,long crashcount,StubId stubId,boolean persistent) throws RemoteException {  this(preparedPart,crashcount,stubId,persistent,-1,null,null);}  }
class C{  public static ExpectedCondition<Boolean> elementNotPresent(final By bySelector){  return null;}  }
class C{  @Override public double value(double[] point){  for (int i=0; i < scale.length; ++i) {    if ((point[i] < lower[i]) || (point[i] > upper[i])) {      double sum=0;      for (int j=i; j < scale.length; ++j) {        final double overshoot;        if (point[j] < lower[j]) {          overshoot=scale[j] * (lower[j] - point[j]);        } else         if (point[j] > upper[j]) {          overshoot=scale[j] * (point[j] - upper[j]);        } else {          overshoot=0;        }        sum+=FastMath.sqrt(overshoot);      }      return offset + sum;    }  }  return bounded.value(point);}  }
class C{  public List<HatchedEgg> queryHatchedEggs() throws RemoteServerException, LoginFailedException {  GetHatchedEggsMessage msg=GetHatchedEggsMessage.newBuilder().build();  ServerRequest serverRequest=new ServerRequest(RequestType.GET_HATCHED_EGGS,msg);  api.getRequestHandler().sendServerRequests(serverRequest);  GetHatchedEggsResponse response;  try {    response=GetHatchedEggsResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  api.getInventories().updateInventories();  List<HatchedEgg> eggs=new ArrayList<HatchedEgg>();  for (int i=0; i < response.getPokemonIdCount(); i++) {    eggs.add(new HatchedEgg(response.getPokemonId(i),response.getExperienceAwarded(i),response.getCandyAwarded(i),response.getStardustAwarded(i)));  }  return eggs;}  }
class C{  public DistributedLogManager createDistributedLogManager(String nameOfLogStream,ClientSharingOption clientSharingOption,Optional<DistributedLogConfiguration> streamConfiguration,Optional<DynamicDistributedLogConfiguration> dynamicStreamConfiguration) throws InvalidStreamNameException, IOException {  return namespace.createDistributedLogManager(nameOfLogStream,clientSharingOption,streamConfiguration,dynamicStreamConfiguration);}  }
class C{  public ISpaceSynchronizeReplicaState recoverFromOtherSpace() throws Exception {  boolean transientOnly=!_space.getEngine().isColdStart();  return _recoveryGroup.recover(transientOnly,transientOnly);}  }
class C{  public static final void shuffle(Object[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  protected VideoAddQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public synchronized double forceUpdate(double delta){  tokens=Math.min(tokens + delta,capacity);  return tokens;}  }
class C{  protected AccountSetPushSettingsQuery deviceId(String value){  return unsafeParam("device_id",value);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  String newValueObj=(String)undoRedoObject.getNewValue();  attributeChooserComboBox.setSelectedItem(newValueObj);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public boolean isCellEditable(Object node,int column){  return getColumnClass(column) == TreeTableModel.class;}  }
class C{  private Properties parseSettings(Properties settings) throws IOException {  String line;  Logger.log(getClass(),LogLevel.TRACE,"exec gsettings list-recursively org.gnome.system.proxy");  Process p=Runtime.getRuntime().exec("gsettings list-recursively org.gnome.system.proxy");  BufferedReader bri=new BufferedReader(new InputStreamReader(p.getInputStream()));  while ((line=bri.readLine()) != null) {    Logger.log(getClass(),LogLevel.TRACE,line);    int schemaSep=line.indexOf(" ");    int keySep=line.indexOf(" ",schemaSep + 1);    String entry=line.substring(0,keySep);    String value=line.substring(keySep + 1).replaceAll("'","");    if (value.matches("\\[.*\\]")) {      value=value.replaceAll("\\[|\\]| ","");    }    Logger.log(getClass(),LogLevel.TRACE,"prop is: {0}|{1}",entry,value);    settings.setProperty(entry,value);  }  try {    p.waitFor();  } catch (  InterruptedException ex) {    Logger.log(getClass(),LogLevel.ERROR,ex.getMessage());  }  return settings;}  }
class C{  public int provideBlockThreshold(){  return 1000;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public void classForName(SootMethod container,Stmt forNameInvokeStmt){  Set<String> classNames=reflectionInfo.classForNameClassNames(container);  if (classNames == null || classNames.isEmpty()) {    registerGuard(container,forNameInvokeStmt,"Class.forName() call site; Soot did not expect this site to be reached");  } else {    for (    String clsName : classNames) {      constantForName(clsName,container,forNameInvokeStmt);    }  }}  }
class C{  @Override public void initialize(InputSplit split) throws IOException, InterruptedException {  if (split instanceof ListStringSplit) {    ListStringSplit listStringSplit=(ListStringSplit)split;    delimitedData=listStringSplit.getData();    dataIter=delimitedData.iterator();  } else {    throw new IllegalArgumentException("Illegal type of input split " + split.getClass().getName());  }}  }
class C{  public static void main(String[] args){}  }
class C{  @Override public void close() throws IOException {}  }
class C{  private void populateChildGallery(){  ArrayList<DataHolder> files=readGallery((GalleryActivity)getActivity());  System.gc();  mGalleryAdapter=new GalleryAdapter(getActivity(),R.layout.gridview_child_gallery_item,mGalleryType,files,mCacheManager,myContext.getFilePathsList(),myContext.getMaxPhoto());  mGalleryAdapter.setPhotoClickListener((GalleryActivity)getActivity());  mGalleryView.setAdapter(mGalleryAdapter);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case R.id.task_delete_multi:    ArrayList<Selectable> list=new ArrayList<>(mTaskAdapter.getItemCount());  for (  Task task : mTaskAdapter.getDateSet()) {    list.add(new Selectable(false,false,task.getTitle()));  }SelectDialogFragment fragment=SelectDialogFragment.newInstance(list,R.string.task_delete_multi);fragment.show(getFragmentManager(),null);break;}return super.onOptionsItemSelected(item);}  }
class C{  @NonNull private Intent createEmailIntent(@Nullable String[] to,@Nullable String subject,@Nullable String text,@Nullable ArrayList<Uri> attachments){  Intent intent=new Intent();  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.setAction(Intent.ACTION_SEND);  intent.setType("plain/text");  intent.putExtra(Intent.EXTRA_EMAIL,to);  intent.putExtra(Intent.EXTRA_SUBJECT,subject);  intent.putExtra(Intent.EXTRA_TEXT,text);  if (attachments != null) {    if (attachments.size() == 1) {      intent.putExtra(Intent.EXTRA_STREAM,attachments.get(0));    } else {      intent.setAction(Intent.ACTION_SEND_MULTIPLE);      intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,attachments);    }  }  return intent;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssertStmt fullCopy(){  AssertStmt tree=(AssertStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SingleTypeImportDecl fullCopy(){  SingleTypeImportDecl tree=(SingleTypeImportDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void saveFingerprintAsFile(byte[] fingerprint,String filename){  FileOutputStream fileOutputStream;  try {    fileOutputStream=new FileOutputStream(filename);    fileOutputStream.write(fingerprint);    fileOutputStream.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private static void insertEdges(final double hyperplaneThickness,final BSPTree<Sphere2D> node,final List<Edge> edges){  int index=0;  Edge inserted=null;  while (inserted == null && index < edges.size()) {    inserted=edges.get(index++);    if (!node.insertCut(inserted.getCircle())) {      inserted=null;    }  }  if (inserted == null) {    final BSPTree<Sphere2D> parent=node.getParent();    if (parent == null || node == parent.getMinus()) {      node.setAttribute(Boolean.TRUE);    } else {      node.setAttribute(Boolean.FALSE);    }    return;  }  final List<Edge> outsideList=new ArrayList<Edge>();  final List<Edge> insideList=new ArrayList<Edge>();  for (  final Edge edge : edges) {    if (edge != inserted) {      edge.split(inserted.getCircle(),outsideList,insideList);    }  }  if (!outsideList.isEmpty()) {    insertEdges(hyperplaneThickness,node.getPlus(),outsideList);  } else {    node.getPlus().setAttribute(Boolean.FALSE);  }  if (!insideList.isEmpty()) {    insertEdges(hyperplaneThickness,node.getMinus(),insideList);  } else {    node.getMinus().setAttribute(Boolean.TRUE);  }}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public boolean isInteriorRight(){  double diff=v0.point.y - v1.point.y;  if (diff == 0.0) {    if (v0.point.x < v1.point.x) {      return true;    } else {      return false;    }  } else   if (diff > 0.0) {    return true;  } else {    return false;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200832,skillcaster,skillname);}  }
class C{  public HarmonicCurveFitter withMaxIterations(int newMaxIter){  return new HarmonicCurveFitter(initialGuess,newMaxIter);}  }
class C{  public void registerBootstrapNamespaces() throws PulsarServerException {  if (registerNamespace(getHeartbeatNamespace(host,config),true)) {    this.uncountedNamespaces++;    LOG.info("added heartbeat namespace name in local cache: ns={}",getHeartbeatNamespace(host,config));  }  for (  String namespace : config.getBootstrapNamespaces()) {    if (registerNamespace(namespace,false)) {      LOG.info("added bootstrap namespace name in local cache: ns={}",namespace);    }  }}  }
class C{  public int available(){  return _count - _position;}  }
class C{  void mergeIn(Operand... oprs){  ArrayList<Operand[]> in=this.in;  if (in.get(0).length != oprs.length)   throw new IllegalArgumentException("Invalid in operands length!");  int nrIn=in.size();  boolean diff=false;  all_opr:   for (int i=0; i != oprs.length; i++) {    Operand newOp=oprs[i];    for (int j=0; j != nrIn; j++) {      if (in.get(j)[i].equivTo(newOp))       continue all_opr;    }    diff=true;    Local stack=inStackLocals[i];    if (stack != null) {      if (newOp.stack == null) {        newOp.stack=stack;        AssignStmt as=Jimple.v().newAssignStmt(stack,newOp.value);        src.setUnit(newOp.insn,as);        newOp.updateBoxes();      } else {        AssignStmt as=Jimple.v().newAssignStmt(stack,newOp.stackOrValue());        src.mergeUnits(newOp.insn,as);        newOp.addBox(as.getRightOpBox());      }    } else {      for (int j=0; j != nrIn; j++) {        stack=in.get(j)[i].stack;        if (stack != null)         break;      }      if (stack == null) {        stack=newOp.stack;        if (stack == null)         stack=src.newStackLocal();      }      ValueBox box=boxes == null ? null : boxes[i];      for (int j=0; j != nrIn; j++) {        Operand prevOp=in.get(j)[i];        if (prevOp.stack == stack)         continue;        prevOp.removeBox(box);        if (prevOp.stack == null) {          prevOp.stack=stack;          AssignStmt as=Jimple.v().newAssignStmt(stack,prevOp.value);          src.setUnit(prevOp.insn,as);        } else {          Unit u=src.getUnit(prevOp.insn);          AssignStmt as;          if (u instanceof UnitContainer) {            UnitContainer uc=(UnitContainer)u;            as=(AssignStmt)uc.units[0];          } else           as=(AssignStmt)u;          ValueBox lvb=as.getLeftOpBox();          assert lvb.getValue() == prevOp.stack : "Invalid stack local!";          lvb.setValue(stack);          prevOp.stack=stack;        }        prevOp.updateBoxes();      }      if (newOp.stack != stack) {        if (newOp.stack == null) {          newOp.stack=stack;          AssignStmt as=Jimple.v().newAssignStmt(stack,newOp.value);          src.setUnit(newOp.insn,as);        } else {          Unit u=src.getUnit(newOp.insn);          AssignStmt as;          if (u instanceof UnitContainer) {            UnitContainer uc=(UnitContainer)u;            as=(AssignStmt)uc.units[0];          } else           as=(AssignStmt)u;          ValueBox lvb=as.getLeftOpBox();          assert lvb.getValue() == newOp.stack : "Invalid stack local!";          lvb.setValue(stack);          newOp.stack=stack;        }        newOp.updateBoxes();      }      if (box != null)       box.setValue(stack);      inStackLocals[i]=stack;    }  }  if (diff)   in.add(oprs);}  }
class C{  public ReplicationClientFactory usingApiKey(String apiKey){  if (Objects.equal(_apiKey,apiKey)) {    return this;  }  return new ReplicationClientFactory(_jerseyClient,apiKey);}  }
class C{  public Bundler putByte(String key,byte value){  bundle.putByte(key,value);  return this;}  }
class C{  public GSAContextDisplaySelection(String encoding,String content,int startOffset,int endOffset){  this.encoding=encoding;  this.content=content;  this.startOffset=startOffset;  this.endOffset=endOffset;}  }
class C{  public boolean forEach(TLongProcedure procedure){  byte[] states=_states;  long[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_ENTER_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1400561,value0);}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public boolean isUseInvertedIndex(){  return useInvertedIndex;}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEventMainThread(LinkEvent event){  final String fragmentTag=event.getFragmentTag();  mRTApi.removeFragment(fragmentTag);  if (!event.wasCancelled() && ID_01_LINK_FRAGMENT.equals(fragmentTag)) {    RTEditText editor=getActiveEditor();    if (editor != null) {      Link link=event.getLink();      String url=null;      if (link != null && link.isValid()) {        Selection selection=mLinkSelection != null && mLinkSelection.end() <= editor.length() ? mLinkSelection : new Selection(editor);        String linkText=link.getLinkText();        Editable str=editor.getText();        str.replace(selection.start(),selection.end(),linkText);        editor.setSelection(selection.start(),selection.start() + linkText.length());        url=link.getUrl();      }      editor.applyEffect(Effects.LINK,url);    }  }}  }
class C{  AsyncServerRequest(RequestType type,Request req){  this.type=type;  this.request=req;  this.requireCommonRequest=false;}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  @Override TaskDomino<T,R,U> newThread(){  return new TaskDomino<T,R,U>(super.newThread());}  }
class C{  private void doPaint(Graphics2D gc,Rectangle rect){  if (!(gc instanceof SelectionGraphics))   selectEdgesAbove();  gc.setStroke(new BasicStroke(1));  if (previousRectangle == null || !rect.equals(previousRectangle)) {    previousRectangle=rect;    fitToRectangle(treeView,rect);  }  for (Edge e=tree.getFirstEdge(); e != null; e=tree.getNextEdge(e)) {    try {      if (inUpdate)       break;      Point2D a=treeView.getLocation(e.getSource());      Point2D b=treeView.getLocation(e.getTarget());      if (treeView.getSelected(e))       gc.setColor(ProgramProperties.SELECTION_COLOR_DARKER); else       gc.setColor(Color.BLACK);      if (gc instanceof SelectionGraphics)       ((SelectionGraphics)gc).setCurrentItem(e);      final int ax=(int)Math.round(a.getX());      final int ay=(int)Math.round(a.getY());      gc.fillOval(ax - 1,ay - 1,3,3);switch (rootSide) {case BOTTOM:case TOP:        gc.drawLine(ax,ay,(int)Math.round(b.getX()),ay);      gc.drawLine((int)Math.round(b.getX()),ay,(int)Math.round(b.getX()),(int)Math.round(b.getY()));    break;default :case RIGHT:case LEFT:  gc.drawLine(ax,ay,(int)Math.round(a.getX()),(int)Math.round(b.getY()));gc.drawLine(ax,(int)Math.round(b.getY()),(int)Math.round(b.getX()),(int)Math.round(b.getY()));break;}}  finally {if (gc instanceof SelectionGraphics) ((SelectionGraphics)gc).clearCurrentItem();}}}  }
class C{  @Override public int hashCode(){  int result=key == null ? 0 : key.hashCode();  final int h=value == null ? 0 : value.hashCode();  result=37 * result + h ^ (h >>> 16);  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_CHANGE_LOOT_HE_DENIED_HIS_ASK(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300210,value0,value1);}  }
class C{  public static int readInt(byte[] bytes,int start){  return (((bytes[start] & 0xff) << 24) + ((bytes[start + 1] & 0xff) << 16) + ((bytes[start + 2] & 0xff) << 8)+ ((bytes[start + 3] & 0xff)));}  }
class C{  public void fromAxes(Vector3f uAxis,Vector3f vAxis,Vector3f wAxis){  m00=uAxis.x;  m10=uAxis.y;  m20=uAxis.z;  m01=vAxis.x;  m11=vAxis.y;  m21=vAxis.z;  m02=wAxis.x;  m12=wAxis.y;  m22=wAxis.z;}  }
class C{  public static Rule createReflexiveRule(String ruleId,RelationType relType,MindmapsGraph graph){  final int arity=relType.hasRoles().size();  if (arity != 2)   throw new IllegalArgumentException(ErrorMessage.RULE_CREATION_ARITY_ERROR.getMessage());  String body=Graql.var().isa(relType.getId()).rel("x").rel("y").toString() + ";";  String head=Graql.var().isa(relType.getId()).rel("x").rel("x").toString() + ";";  return graph.putRule(ruleId,body,head,graph.getMetaRuleInference());}  }
class C{  private void refreshSubscriptions() throws JMSException {  refreshLock.writeLock().lock();  try {    if (!registeredListeners.isEmpty()) {      sessions.clear();      topicToWrapper.clear();      for (      Map.Entry<TagUpdateListener,TopicRegistrationDetails> entry : registeredListeners.entrySet()) {        registerUpdateListener(entry.getKey(),entry.getValue());      }    }    if (alarmListenerWrapper.getListenerCount() > 0) {      subscribeToAlarmTopic();    }    subscribeToSupervisionTopic();    subscribeToHeartbeatTopic();    subscribeToAdminMessageTopic();  } catch (  JMSException e) {    LOGGER.error("Did not manage to refresh Topic subscriptions.",e);    throw e;  } finally {    refreshLock.writeLock().unlock();  }}  }
class C{  synchronized public Remote export(Remote impl,boolean allowCache) throws ExportException {  return export(impl,_config,allowCache);}  }
class C{  private static void deleteRecursiveSilent(CarbonFile f){  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursiveSilent(c);      }    }  }  if (f.exists() && !f.delete()) {    return;  }}  }
class C{  public static long parseLong(byte[] bytes,int start,int length){  final int end=start + length;  int i=start;  long negMul=-1;  if (length > 0) {    char c=(char)bytes[i];    if (c == '-') {      negMul=1;      i++;    } else     if (c == '+') {      i++;    }  } else {    throw new NumberFormatException("cannot convert empty string to int");  }  long result=0;  for (; i < end; i++) {    char c=(char)bytes[i];    int digit=c - '0';    if (digit >= 10 || digit < 0) {      throw newNumberFormatException("invalid integer representation",bytes,start,length);    }    long newResult=result * 10 - digit;    if (newResult > result) {      throw newNumberFormatException("overflow",bytes,start,length);    }    result=newResult;  }  if ((result == 0) && (bytes[i - 1] != (byte)'0')) {    throw newNumberFormatException("invalid integer representation",bytes,start,length);  }  if ((result == Long.MIN_VALUE) && negMul == 1) {    throw newNumberFormatException("overflow",bytes,start,length);  }  return negMul * result;}  }
class C{  public Label(){}  }
class C{  public void transformValues(TLongFunction function){  Object[] keys=_set;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200381,skillname);}  }
class C{  public static void kickAccountFromGameServer(Account account){  for (  GameServerInfo gsi : getGameServers()) {    if (gsi.isAccountOnGameServer(account.getId())) {      gsi.getConnection().sendPacket(new SM_REQUEST_KICK_ACCOUNT(account.getId()));      break;    }  }}  }
class C{  public boolean disableCharacteristicIndicate(){  return disableCharacteristicIndicate(getCharacteristic());}  }
class C{  public void actionPerformed(ActionEvent ev){  final Object choice=JOptionPane.showInputDialog(getViewer().getFrame(),"Choose node shape","MEGAN - Choose",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),SHAPES,SHAPES[0]);  if (choice != null)   execute("set nodeShape=" + choice.toString() + ";");}  }
class C{  public boolean last() throws GenericEntityException {  try {    return resultSet.last();  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the cursor to last",e);  }}  }
class C{  @Override public void elementDecl(String name,String contentModel,Augmentations augs) throws XNIException {  try {    if (fDeclHandler != null) {      fDeclHandler.elementDecl(name,contentModel);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  @Override public int compare(Record rec1,Record rec2){  for (int i=0; i < sortFlds.size(); i++) {    String fld=sortFlds.get(i);    int dir=sortDirs.get(i);    Constant val1=rec1.getVal(fld);    Constant val2=rec2.getVal(fld);    int result=val1.compareTo(val2);    if (result != 0)     return dir == DIR_ASC ? result : -result;  }  return 0;}  }
class C{  public static void registerKryoClasses(SparkConf conf){  List<Class<?>> classes=Arrays.asList((Class<?>)BooleanWritable.class,ByteWritable.class,DoubleWritable.class,FloatWritable.class,IntWritable.class,LongWritable.class,NullWritable.class,Text.class);  conf.registerKryoClasses((Class<?>[])classes.toArray());}  }
class C{  public static void initialize(final Activity activity,final String gameId,final IUnityAdsListener listener,final boolean testMode){  DeviceLog.entered();  if (_configurationInitialized) {    return;  }  _configurationInitialized=true;  if (gameId == null || gameId.length() == 0) {    DeviceLog.error("Error while initializing Unity Ads: empty game ID, halting Unity Ads init");    if (listener != null) {      listener.onUnityAdsError(UnityAdsError.INVALID_ARGUMENT,"Empty game ID");    }    return;  }  if (activity == null) {    DeviceLog.error("Error while initializing Unity Ads: null activity, halting Unity Ads init");    if (listener != null) {      listener.onUnityAdsError(UnityAdsError.INVALID_ARGUMENT,"Null activity");    }    return;  }  if (testMode) {    DeviceLog.info("Initializing Unity Ads " + SdkProperties.getVersionName() + " ("+ SdkProperties.getVersionCode()+ ") with game id "+ gameId+ " in test mode");  } else {    DeviceLog.info("Initializing Unity Ads " + SdkProperties.getVersionName() + " ("+ SdkProperties.getVersionCode()+ ") with game id "+ gameId+ " in production mode");  }  setDebugMode(_debugMode);  ClientProperties.setGameId(gameId);  ClientProperties.setListener(listener);  ClientProperties.setApplicationContext(activity.getApplicationContext());  SdkProperties.setTestMode(testMode);  if (EnvironmentCheck.isEnvironmentOk()) {    DeviceLog.info("Unity Ads environment check OK");  } else {    DeviceLog.error("Error during Unity Ads environment check, halting Unity Ads init");    if (listener != null) {      listener.onUnityAdsError(UnityAdsError.INIT_SANITY_CHECK_FAIL,"Unity Ads init environment check failed");    }    return;  }  Configuration configuration=new Configuration();  Class[] apiClassList={com.unity3d.ads.api.AdUnit.class,com.unity3d.ads.api.Broadcast.class,com.unity3d.ads.api.Cache.class,com.unity3d.ads.api.Connectivity.class,com.unity3d.ads.api.DeviceInfo.class,com.unity3d.ads.api.Listener.class,com.unity3d.ads.api.Storage.class,com.unity3d.ads.api.Sdk.class,com.unity3d.ads.api.Request.class,com.unity3d.ads.api.Resolve.class,com.unity3d.ads.api.VideoPlayer.class,com.unity3d.ads.api.Placement.class,com.unity3d.ads.api.Intent.class};  configuration.setWebAppApiClassList(apiClassList);  InitializeThread.initialize(configuration);}  }
class C{  public void synchronizeStmtOn(Stmt stmt,JimpleBody b,Local lock){  Chain units=b.getUnits();  units.insertBefore(Jimple.v().newEnterMonitorStmt(lock),stmt);  Stmt exitMon=Jimple.v().newExitMonitorStmt(lock);  units.insertAfter(exitMon,stmt);{    Stmt newGoto=Jimple.v().newGotoStmt((Stmt)units.getSuccOf(exitMon));    units.insertAfter(newGoto,exitMon);    List<Unit> l=new ArrayList<Unit>();    Local eRef=Jimple.v().newLocal("__exception",RefType.v("java.lang.Throwable"));    b.getLocals().add(eRef);    Stmt handlerStmt=Jimple.v().newIdentityStmt(eRef,Jimple.v().newCaughtExceptionRef());    l.add(handlerStmt);    l.add((Stmt)exitMon.clone());    l.add(Jimple.v().newThrowStmt(eRef));    units.insertAfter(l,newGoto);    Trap newTrap=Jimple.v().newTrap(Scene.v().getSootClass("java.lang.Throwable"),stmt,(Stmt)units.getSuccOf(stmt),handlerStmt);    b.getTraps().addFirst(newTrap);  }}  }
class C{  public static ToastCompat makeText(Context context,CharSequence text,@Duration int duration){  ToastCompat result=new ToastCompat(context);  LayoutInflater inflate=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View v=inflate.inflate(Resources.getSystem().getIdentifier("transient_notification","layout","android"),null);  TextView tv=(TextView)v.findViewById(Resources.getSystem().getIdentifier("message","id","android"));  tv.setText(text);  result.mNextView=v;  result.mDuration=duration;  return result;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public DistributionDocument(int iNeighbourhoodWindow,int iSourceNGramSize){  SourceNGramSize=iSourceNGramSize;  Graph=new DistributionGraph();  NeighbourhoodWindow=iNeighbourhoodWindow;}  }
class C{  public String sprintf(int x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuilder sb=new StringBuilder();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else     sb.append(cs.internalsprintf(x));  }  return sb.toString();}  }
class C{  public boolean isScheduledForSending(){  return sendValue;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (name == null) {    if (types != null) {      throw new InvalidObjectException("cannot have types with null name");    }  } else {    try {      check();    } catch (    RuntimeException e) {      rethrow(e);    }  }  if (constraints != null && constraints.isEmpty()) {    throw new InvalidObjectException("constraints cannot be empty");  }}  }
class C{  public boolean addUpdateListener(final BaseTagListener pListener){  boolean retval=false;  try {    listenersLock.writeLock().lock();    boolean isRegistered=false;    for (    BaseTagListener listener : listeners) {      if (listener == pListener) {        isRegistered=true;        retval=true;        break;      }    }    if (!isRegistered) {      retval=listeners.add(pListener);    }  }  finally {    listenersLock.writeLock().unlock();  }  return retval;}  }
class C{  public void unify(String from,String to){  Set<Atomic> toRemove=new HashSet<>();  Set<Atomic> toAdd=new HashSet<>();  atomSet.stream().filter(null).forEach(null);  toRemove.forEach(null);  toRemove.forEach(null);  toAdd.forEach(null);  toAdd.forEach(null);  Map<String,String> mapping=new HashMap<>();  mapping.put(from,to);  updateSelectedVars(mapping);}  }
class C{  public RuleRenderVisitor(FeatureTypeStyle featureTypeStyle,Rule rule,int symbolizerIndex,RuleRenderOptions options){  this.ftsToRender=featureTypeStyle;  this.ruleToRender=rule;  this.symbolizerIndex=symbolizerIndex;  this.options=options;}  }
class C{  private void doSendCompressMessage(GSTextMessageImpl message,Transaction tx,long ttl) throws RemoteException, TransactionException {  Object messageBody=message.Body;  try {    MarshObject compressedObject=compressObject(message.Body);    message.Body=compressedObject;  } catch (  IOException e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.severe("GSSessionImpl.doSend(): IOException while compressing message body. Sending uncompressed: " + message.Body);    }  }  try {    m_space.write(message,tx,ttl);    m_numOfProducedMsg++;  }  finally {    if (message.Body instanceof MarshObject) {      message.Body=messageBody;    }  }}  }
class C{  public void handleDecode(String result){  playBeepSoundAndVibrate();  Toast.makeText(MyApplication.getContext(),result,Toast.LENGTH_SHORT).show();  restartQr();}  }
class C{  public boolean showDialog(ProcessFunction existingProcessFunction){  this.existingProcessFunction=existingProcessFunction;  if (existingProcessFunction != null) {    displayFunction(existingProcessFunction.getName());  }  setVisible(true);  return okButtonPressed;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  final RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();  final ServicePanel servicePanel=remoteServiceBrowser.getServicePanel();  if (servicePanel != null) {    final Collection<String> selectedFiles=remoteServiceBrowser.getServicePanel().getSelectedFiles();    final StringBuilder buf=new StringBuilder();    int count=0;    Set<String> openFiles=servicePanel.getCurrentlyOpenRemoteFiles();    for (    String fileName : selectedFiles) {      if (openFiles.contains(fileName)) {        buf.append("toFront file='").append(fileName).append("';");      } else {        buf.append("open file='").append(fileName).append("' readOnly=true;");        count++;      }    }    if (count > 10) {      if (JOptionPane.showConfirmDialog(remoteServiceBrowser.getFrame(),"Do you really want to open " + count + " new files?","Confirm",JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)       return;    }    execute(buf.toString());  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private Object writeReplace() throws ObjectStreamException {  Object impl_proxy=impl;  if (impl instanceof ProxyAccessor) {    impl_proxy=((ProxyAccessor)impl).getProxy();    logger.log(Level.FINEST,"Obtained implementation proxy: {0}",impl_proxy);    if (impl_proxy == null) {      throw new InvalidObjectException("Implementation's getProxy() returned null");    }  }  return impl_proxy;}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  ReactiveLogin.onActivityResult(requestCode,resultCode,data);}  }
class C{  public SoftReferenceGrammarPool(int initialCapacity){  fGrammars=new Entry[initialCapacity];  fPoolIsLocked=false;}  }
class C{  public static int convertToColorInt(String argb) throws IllegalArgumentException {  if (!argb.startsWith("#")) {    argb="#" + argb;  }  return Color.parseColor(argb);}  }
class C{  public double norm1(){  double f=0;  for (int j=0; j < n; j++) {    double s=0;    for (int i=0; i < m; i++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  @SuppressWarnings("unchecked") public static ArrayList<JSONObject> createJSONDataElements(){  ArrayList<JSONObject> dataElementsJSON=new ArrayList<>();  JSONObject jsonObj1=new JSONObject();  jsonObj1.put(DATE,"2016-02-20T23:29:05.000Z");  jsonObj1.put(QNAME,"a.b.c.com");  jsonObj1.put(SRCIP,"55.55.55.55");  jsonObj1.put(DSTIP,"1.2.3.6");  jsonObj1.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj1.put(RCODE,0);  jsonObj1.put(IPS,new ArrayList<>(Arrays.asList("10.20.30.40","10.20.30.60")));  dataElementsJSON.add(jsonObj1);  JSONObject jsonObj2=new JSONObject();  jsonObj2.put(DATE,"2016-02-20T23:29:06.000Z");  jsonObj2.put(QNAME,"d.e.com");  jsonObj2.put(SRCIP,"127.128.129.130");  jsonObj2.put(DSTIP,"1.2.3.4");  jsonObj2.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj2.put(RCODE,0);  jsonObj2.put(IPS,new ArrayList<>(Collections.singletonList("5.6.7.8")));  dataElementsJSON.add(jsonObj2);  JSONObject jsonObj3=new JSONObject();  jsonObj3.put(DATE,"2016-02-20T23:29:07.000Z");  jsonObj3.put(QNAME,"d.e.com");  jsonObj3.put(SRCIP,"131.132.133.134");  jsonObj3.put(DSTIP,"9.10.11.12");  jsonObj3.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj3.put(RCODE,0);  jsonObj3.put(IPS,new ArrayList<>(Collections.singletonList("13.14.15.16")));  dataElementsJSON.add(jsonObj3);  JSONObject jsonObj4=new JSONObject();  jsonObj4.put(DATE,"2016-02-20T23:29:08.000Z");  jsonObj4.put(QNAME,"d.e.com");  jsonObj4.put(SRCIP,"135.136.137.138");  jsonObj4.put(DSTIP,"17.18.19.20");  jsonObj4.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj4.put(RCODE,3);  jsonObj4.put(IPS,new ArrayList<>(Collections.singletonList("21.22.23.24")));  dataElementsJSON.add(jsonObj4);  JSONObject jsonObj5=new JSONObject();  jsonObj5.put(DATE,"2016-02-20T23:29:09.000Z");  jsonObj5.put(QNAME,"d.e.com");  jsonObj5.put(SRCIP,"139.140.141.142");  jsonObj5.put(DSTIP,"25.26.27.28");  jsonObj5.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj5.put(RCODE,0);  jsonObj5.put(IPS,new ArrayList<>(Collections.singletonList("5.6.7.8")));  dataElementsJSON.add(jsonObj5);  JSONObject jsonObj6=new JSONObject();  jsonObj6.put(DATE,"2016-02-20T23:29:10.000Z");  jsonObj6.put(QNAME,"d.e.com");  jsonObj6.put(SRCIP,"143.144.145.146");  jsonObj6.put(DSTIP,"33.34.35.36");  jsonObj6.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj6.put(RCODE,0);  jsonObj6.put(IPS,new ArrayList<>(Collections.singletonList("5.6.7.8")));  dataElementsJSON.add(jsonObj6);  JSONObject jsonObj7=new JSONObject();  jsonObj7.put(DATE,"2016-02-20T23:29:11.000Z");  jsonObj7.put(QNAME,"something.else");  jsonObj7.put(SRCIP,"1.1.1.1");  jsonObj7.put(DSTIP,"2.2.2.2");  jsonObj7.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj7.put(RCODE,0);  jsonObj7.put(IPS,new ArrayList<>(Collections.singletonList("3.3.3.3")));  dataElementsJSON.add(jsonObj7);  JSONObject jsonObj8=new JSONObject();  jsonObj8.put(DATE,"2016-02-20T23:29:12.000Z");  jsonObj8.put(QNAME,"something.else2");  jsonObj8.put(SRCIP,"5.6.7.8");  jsonObj8.put(DSTIP,"2.2.2.22");  jsonObj8.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj8.put(RCODE,0);  jsonObj8.put(IPS,new ArrayList<>(Collections.singletonList("3.3.3.132")));  dataElementsJSON.add(jsonObj8);  JSONObject jsonObj9=new JSONObject();  jsonObj9.put(DATE,"2016-02-20T23:29:13.000Z");  jsonObj9.put(QNAME,"something.else.on.stoplist");  jsonObj9.put(SRCIP,"55.55.55.55");  jsonObj9.put(DSTIP,"2.2.2.232");  jsonObj9.put(QTYPE,new ArrayList<>(Collections.singletonList((short)1)));  jsonObj9.put(RCODE,0);  jsonObj9.put(IPS,new ArrayList<>(Collections.singletonList("3.3.3.132")));  dataElementsJSON.add(jsonObj9);  return dataElementsJSON;}  }
class C{  public void incrementCurrentCount(boolean store) throws GenericEntityException {  if (store) {    info.set("recurrenceCount",getCurrentCount() + 1);    info.store();  }}  }
class C{  private void loadSettings(){  Properties pIn=new Properties();  try {    if (!(new File("AutoSummENGGUI.properties").exists()))     return;    FileInputStream fsIn=new FileInputStream("AutoSummENGGUI.properties");    pIn.loadFromXML(fsIn);    fsIn.close();  } catch (  IOException ioe) {    ioe.printStackTrace(System.err);    return;  }  try {    ModelsRootDirEdt.setText(pIn.getProperty("ModelDir","./models"));    SummariesRootDirEdt.setText(pIn.getProperty("SummaryDir","./summaries"));    OutputFileEdt.setText(pIn.getProperty("OutputFile","./jinsect.table"));    ThreadCntEdt.setValue(Integer.valueOf(pIn.getProperty("Threads","2")));    SilentChk.setSelected(Boolean.valueOf(pIn.getProperty("Silent",Boolean.TRUE.toString())));    ProgressChk.setSelected(Boolean.valueOf(pIn.getProperty("ShowProgress",Boolean.TRUE.toString())));    DoWordChk.setSelected(Boolean.valueOf(pIn.getProperty("DoWord",Boolean.TRUE.toString())));    DoWordChkStateChanged(new ChangeEvent(DoWordChk));    DoCharChk.setSelected(Boolean.valueOf(pIn.getProperty("DoChar",Boolean.TRUE.toString())));    DoCharChkStateChanged(new ChangeEvent(DoCharChk));    if (pIn.getProperty("Use","Occurences").equals("Occurences"))     OccurencesChk.setSelected(true); else     DistrosChk.setSelected(true);    CharMinEdt.setValue(Integer.valueOf(pIn.getProperty("CharMin","3")));    CharMaxEdt.setValue(Integer.valueOf(pIn.getProperty("CharMax","3")));    CharDistEdt.setValue(Integer.valueOf(pIn.getProperty("CharDist","3")));    WordMinEdt.setValue(Integer.valueOf(pIn.getProperty("WordMin","1")));    WordMaxEdt.setValue(Integer.valueOf(pIn.getProperty("WordMax","2")));    WordDistEdt.setValue(Integer.valueOf(pIn.getProperty("WordDist","3")));  } catch (  Exception e) {    System.err.println("Could not load settings...");    return;  }  PerformanceTableModel tTmp=new PerformanceTableModel();  DetailedResultsTbl.setModel(tTmp);}  }
class C{  private boolean tryStep(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {  final int n=sequence[k];  final double subStep=step / n;  final double subStep2=2 * subStep;  double t=t0 + subStep;  for (int i=0; i < y0.length; ++i) {    yEnd[i]=y0[i] + subStep * f[0][i];  }  f[1]=computeDerivatives(t,yEnd);  final double[] yTmp=y0.clone();  for (int j=1; j < n; ++j) {    if (2 * j == n) {      System.arraycopy(yEnd,0,yMiddle,0,y0.length);    }    t+=subStep;    for (int i=0; i < y0.length; ++i) {      final double middle=yEnd[i];      yEnd[i]=yTmp[i] + subStep2 * f[j][i];      yTmp[i]=middle;    }    f[j + 1]=computeDerivatives(t,yEnd);    if (performTest && (j <= maxChecks) && (k < maxIter)) {      double initialNorm=0.0;      for (int l=0; l < scale.length; ++l) {        final double ratio=f[0][l] / scale[l];        initialNorm+=ratio * ratio;      }      double deltaNorm=0.0;      for (int l=0; l < scale.length; ++l) {        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];        deltaNorm+=ratio * ratio;      }      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {        return false;      }    }  }  for (int i=0; i < y0.length; ++i) {    yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]);  }  return true;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  try {    init();  } catch (  RuntimeException e) {    if (e instanceof NullPointerException || e instanceof IllegalArgumentException) {      InvalidObjectException ee=new InvalidObjectException(e.getMessage());      ee.initCause(e);      throw ee;    }    throw e;  }}  }
class C{  public void addRetype(RetypeableInstruction i){  instructionsToRetype.add(i);}  }
class C{  public static long readSwappedLong(byte[] data,int offset){  long low=((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16)+ ((data[offset + 3] & 0xff) << 24);  long high=((data[offset + 4] & 0xff) << 0) + ((data[offset + 5] & 0xff) << 8) + ((data[offset + 6] & 0xff) << 16)+ ((data[offset + 7] & 0xff) << 24);  return (high << 32) + (0xffffffffL & low);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonHoming_A_TO_B(String skillcaster,String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201036,skillcaster,value0,skilltarget,skillname);}  }
class C{  public PlacesCheckinQuery services(List<PlacesCheckinService> value){  return unsafeParam("services",value);}  }
class C{  @Deprecated public FortSearchResponse searchFort(FortData fortData) throws LoginFailedException, RemoteServerException {  FortSearchMessage reqMsg=FortSearchMessage.newBuilder().setFortId(fortData.getId()).setFortLatitude(fortData.getLatitude()).setFortLongitude(fortData.getLongitude()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).build();  ServerRequest serverRequest=new ServerRequest(RequestType.FORT_SEARCH,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  FortSearchResponse response;  try {    response=FortSearchResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  return response;}  }
class C{  public void removeColumnModelByName(String columnName){  if (TextUtils.isEmpty(columnName)) {    return;  }  int indexToRemove=-1;  for (int i=0; i < columnModels.size(); i++) {    ColumnModel columnModel=columnModels.get(i);    if (columnName.equalsIgnoreCase(columnModel.getColumnName())) {      indexToRemove=i;      break;    }  }  if (indexToRemove != -1) {    columnModels.remove(indexToRemove);  }}  }
class C{  private List<Property> parseXmlProperties(String xmlString) throws Exception {  List<Property> properties=new ArrayList<>();  Serializer serializer=new Persister();  PropertyList propertyList=serializer.read(PropertyList.class,xmlString);  for (  Property property : propertyList.getProperties()) {    properties.add(property);  }  return properties;}  }
class C{  protected boolean writeConstantPool(DataOutputStream dd) throws IOException {  cp_info cp;  int i;  boolean skipone=false;  for (i=1; i < constant_pool_count; i++) {    if (skipone) {      skipone=false;      continue;    }    cp=constant_pool[i];    dd.writeByte(cp.tag);switch (cp.tag) {case cp_info.CONSTANT_Class:      dd.writeShort(((CONSTANT_Class_info)cp).name_index);    break;case cp_info.CONSTANT_Fieldref:  dd.writeShort(((CONSTANT_Fieldref_info)cp).class_index);dd.writeShort(((CONSTANT_Fieldref_info)cp).name_and_type_index);break;case cp_info.CONSTANT_Methodref:dd.writeShort(((CONSTANT_Methodref_info)cp).class_index);dd.writeShort(((CONSTANT_Methodref_info)cp).name_and_type_index);break;case cp_info.CONSTANT_InterfaceMethodref:dd.writeShort(((CONSTANT_InterfaceMethodref_info)cp).class_index);dd.writeShort(((CONSTANT_InterfaceMethodref_info)cp).name_and_type_index);break;case cp_info.CONSTANT_String:dd.writeShort(((CONSTANT_String_info)cp).string_index);break;case cp_info.CONSTANT_Integer:dd.writeInt((int)((CONSTANT_Integer_info)cp).bytes);break;case cp_info.CONSTANT_Float:dd.writeInt((int)((CONSTANT_Float_info)cp).bytes);break;case cp_info.CONSTANT_Long:dd.writeInt((int)((CONSTANT_Long_info)cp).high);dd.writeInt((int)((CONSTANT_Long_info)cp).low);skipone=true;break;case cp_info.CONSTANT_Double:dd.writeInt((int)((CONSTANT_Double_info)cp).high);dd.writeInt((int)((CONSTANT_Double_info)cp).low);skipone=true;break;case cp_info.CONSTANT_NameAndType:dd.writeShort(((CONSTANT_NameAndType_info)cp).name_index);dd.writeShort(((CONSTANT_NameAndType_info)cp).descriptor_index);break;case cp_info.CONSTANT_Utf8:((CONSTANT_Utf8_info)cp).writeBytes(dd);break;default :G.v().out.println("Unknown tag in constant pool: " + cp.tag);return false;}}return true;}  }
class C{  public static <T extends RealFieldElement<T>>T distance1(final Vector3D v1,final FieldVector3D<T> v2){  return v2.distance1(v1);}  }
class C{  public void reset(){  m_root=null;}  }
class C{  public Builder piecesSpacing(float piecesSpacing){  this.piecesSpacing=piecesSpacing;  return this;}  }
class C{  public AggregateConfig(Configuration config,String[] configArgs) throws ConfigurationException {  specific=ConfigurationProvider.getInstance(configArgs);  common=config;}  }
class C{  public static boolean checkComplete(String directory,ShareSecurityCheck securityCheck,Intent intentResult){  String meta=securityCheck.getMetaContentMap().get(SO_MEAT_FILE);  if (meta == null) {    return true;  }  ArrayList<ShareBsDiffPatchInfo> libraryList=new ArrayList<>();  ShareBsDiffPatchInfo.parseDiffPatchInfo(meta,libraryList);  if (libraryList.isEmpty()) {    return true;  }  String libraryPath=directory + "/" + SO_PATH+ "/";  HashMap<String,String> libs=new HashMap<>();  for (  ShareBsDiffPatchInfo info : libraryList) {    if (!ShareBsDiffPatchInfo.checkDiffPatchInfo(info)) {      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_PACKAGE_CHECK_LIB_META_CORRUPTED);      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);      return false;    }    String middle=info.path + "/" + info.name;    libs.put(middle,info.md5);  }  File libraryDir=new File(libraryPath);  if (!libraryDir.exists() || !libraryDir.isDirectory()) {    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_LIB_DIRECTORY_NOT_EXIST);    return false;  }  for (  String relative : libs.keySet()) {    File libFile=new File(libraryPath + relative);    if (!libFile.exists()) {      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_LIB_FILE_NOT_EXIST);      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_LIB_PATH,libFile.getAbsolutePath());      return false;    }  }  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_LIBS_PATH,libs);  return true;}  }
class C{  public void dumpMaryCART(CART cart,String destFile) throws IOException {  if (cart == null)   throw new NullPointerException("Cannot dump null CART");  if (destFile == null)   throw new NullPointerException("No destination file");  Log.d(Mary.LOG,"Dumping CART in MaryCART format to " + destFile + " ...");  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destFile)));  MaryHeader hdr=new MaryHeader(MaryHeader.CARTS);  hdr.writeTo(out);  Properties props=cart.getProperties();  if (props == null) {    out.writeShort(0);  } else {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    props.store(baos,null);    byte[] propData=baos.toByteArray();    out.writeShort(propData.length);    out.write(propData);  }  cart.getFeatureDefinition().writeBinaryTo(out);  dumpBinary(cart.getRootNode(),out);  out.close();  Log.d(Mary.LOG," ... done\n");}  }
class C{  public static String convertText(final ConversionMethod method,final byte[] text){switch (method) {case HEX_ENCODE:{      return new String(Hex.encodeHex(text));    }case HEX_DECODE:{    return ConversionUtils.hexToStringNoException(ConversionUtils.arrayToString(text));  }case BASE_64_ENCODE:{  return Base64.encodeBase64String(text);}case BASE_64_DECODE:{return new String(Base64.decodeBase64(text));}default :return ConversionUtils.arrayToString(text);}}  }
class C{  public boolean isXPath(){  return false;}  }
class C{  protected void drawCell(Graphics2D gc,double[] boundingBox,double correlationCoefficent){  double centerX=boundingBox[0] + boundingBox[2] / 2;  double centerY=boundingBox[1] + boundingBox[3] / 2;  Color color=getChartColors().getHeatMapTable().getColor((int)Math.round(500.0 * (correlationCoefficent + 1.0)),1000);switch (getMode()) {case Beans:{      double width=2 + Math.min(boundingBox[2],boundingBox[3]) * (correlationCoefficent + 1.0) / 2.0;      double height=2 + Math.min(boundingBox[2],boundingBox[3]) * (1.0 - correlationCoefficent) / 2.0;      int x=(int)Math.round(centerX - width / 2.0);      int y=(int)Math.round(centerY - height / 2.0);      if (correlationCoefficent >= 1) {        gc.setColor(color.darker());        gc.rotate(Geometry.deg2rad(-45),centerX,centerY);        gc.drawLine(x,y,x + (int)Math.round(width),y);        gc.rotate(Geometry.deg2rad(45),centerX,centerY);      } else       if (correlationCoefficent <= -1) {        gc.setColor(color.darker());        gc.rotate(Geometry.deg2rad(45),centerX,centerY);        gc.drawLine(x,y,x + (int)Math.round(width),y);        gc.rotate(Geometry.deg2rad(-45),centerX,centerY);      } else {        gc.setColor(color);        gc.rotate(Geometry.deg2rad(-45),centerX,centerY);        gc.fillOval(x,y,(int)Math.round(width),(int)Math.round(height));        gc.setColor(color.darker());        gc.drawOval(x,y,(int)Math.round(width),(int)Math.round(height));        gc.rotate(Geometry.deg2rad(45),centerX,centerY);      }      break;    }case Circles:{    double width=Math.min(boundingBox[2],boundingBox[3]);    double height=Math.min(boundingBox[2],boundingBox[3]);    double radius=Math.abs(correlationCoefficent) * Math.min(width,height);    int x=(int)Math.round(centerX - radius / 2.0);    int y=(int)Math.round(centerY - radius / 2.0);    gc.setColor(color);    gc.fillOval(x,y,(int)Math.round(radius),(int)Math.round(radius));    gc.setColor(color.darker());    gc.drawOval(x,y,(int)Math.round(radius),(int)Math.round(radius));    break;  }case Squares:{  double width=Math.min(boundingBox[2],boundingBox[3]) * Math.abs(correlationCoefficent);  double height=Math.min(boundingBox[2],boundingBox[3]) * Math.abs(correlationCoefficent);  int x=(int)Math.round(centerX - width / 2.0);  int y=(int)Math.round(centerY - height / 2.0);  gc.setColor(color);  gc.fillRect(x,y,(int)Math.round(width),(int)Math.round(height));  gc.setColor(color.darker());  gc.drawRect(x,y,(int)Math.round(width),(int)Math.round(height));  break;}case Colors:{final double width=boundingBox[2];final double height=boundingBox[3];final double x=centerX - width / 2.0;final double y=centerY - height / 2.0;gc.setColor(color);if (isGapBetweenBars() && width > 3 && height > 3) {  final Rectangle2D rect=new Rectangle2D.Double(x + 1,y + 1,width - 2,height - 2);  gc.fill(rect);} else {  final Rectangle2D rect=new Rectangle2D.Double(x,y,width + 1,height + 1);  gc.fill(rect);  if (isShowVerticalGridLines()) {    gc.setColor(color.darker());    gc.draw(rect);  }}break;}case Numbers:{gc.setFont(getFont(ChartViewer.FontKeys.DrawFont.toString()));String label=String.format("%.3f",correlationCoefficent);Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();int x=(int)Math.round(centerX - labelSize.width / 2.0);int y=(int)Math.round(centerY);gc.setColor(color.darker());gc.drawString(label,x,y);}}}  }
class C{  private void createLocalDecl(polyglot.ast.LocalDecl localDecl){  String name=localDecl.name();  polyglot.types.LocalInstance localInst=localDecl.localInstance();  soot.Value lhs=createLocal(localInst);  polyglot.ast.Expr expr=localDecl.init();  if (expr != null) {    soot.Value rhs;    if (expr instanceof polyglot.ast.ArrayInit) {      rhs=getArrayInitLocal((polyglot.ast.ArrayInit)expr,localInst.type());    } else {      rhs=base().createAggressiveExpr(expr,false,false);    }    if (rhs instanceof soot.jimple.ConditionExpr) {      rhs=handleCondBinExpr((soot.jimple.ConditionExpr)rhs);    }    soot.jimple.AssignStmt stmt=soot.jimple.Jimple.v().newAssignStmt(lhs,rhs);    body.getUnits().add(stmt);    Util.addLnPosTags(stmt,localDecl.position());    if (localDecl.position() != null) {      Util.addLnPosTags(stmt.getLeftOpBox(),localDecl.position().line(),localDecl.position().endLine(),localDecl.position().endColumn() - name.length(),localDecl.position().endColumn());      if (expr != null) {        Util.addLnPosTags(stmt,localDecl.position().line(),expr.position().endLine(),localDecl.position().column(),expr.position().endColumn());      } else {        Util.addLnPosTags(stmt,localDecl.position().line(),localDecl.position().endLine(),localDecl.position().column(),localDecl.position().endColumn());      }    } else {    }    if (expr != null) {      Util.addLnPosTags(stmt.getRightOpBox(),expr.position());    }  }}  }
class C{  public static String readFile(final File file){  try {    return readFileWithExceptions(file);  } catch (  IOException e) {    System.out.println(ExceptionMessages.COULD_NOT_READ.with(e));  }  return null;}  }
class C{  private Tab createNewTab(LoadUrlParams loadUrlParams,TabModel.TabLaunchType type,Tab parent,int position,Intent intent){  try {    TraceEvent.begin("ChromeTabCreator.createNewTab");    int parentId=parent != null ? parent.getId() : Tab.INVALID_TAB_ID;    loadUrlParams.setUrl(UrlUtilities.fixupUrl(loadUrlParams.getUrl()));    loadUrlParams.setTransitionType(getTransitionType(type));    int assignedTabId=intent == null ? Tab.INVALID_TAB_ID : IntentUtils.safeGetIntExtra(intent,IntentHandler.EXTRA_TAB_ID,Tab.INVALID_TAB_ID);    AsyncTabCreationParams asyncParams=AsyncTabCreationParamsManager.remove(assignedTabId);    WebContents webContents=asyncParams == null ? null : asyncParams.getWebContents();    boolean openInForeground=mOrderController.willOpenInForeground(type,mIncognito) || webContents != null;    TabDelegateFactory delegateFactory=new TabDelegateFactory();    Tab tab;    if (webContents != null) {      Intent parentIntent=IntentUtils.safeGetParcelableExtra(intent,IntentHandler.EXTRA_PARENT_INTENT);      parentId=IntentUtils.safeGetIntExtra(intent,IntentHandler.EXTRA_PARENT_TAB_ID,parentId);      assert TabModelUtils.getTabIndexById(mTabModel,assignedTabId) == TabModel.INVALID_TAB_INDEX;      tab=Tab.createLiveTab(assignedTabId,mActivity,mIncognito,mNativeWindow,type,parentId,!openInForeground);      tab.initialize(webContents,mTabContentManager,delegateFactory,!openInForeground);      tab.setParentIntent(parentIntent);      webContents.resumeLoadingCreatedWebContents();    } else     if (!openInForeground && SysUtils.isLowEndDevice()) {      tab=Tab.createTabForLazyLoad(mActivity,mIncognito,mNativeWindow,type,parentId,loadUrlParams);      tab.initialize(null,mTabContentManager,delegateFactory,!openInForeground);      mTabSaver.addTabToSaveQueue(tab);    } else {      webContents=WarmupManager.getInstance().hasPrerenderedUrl(loadUrlParams.getUrl()) ? WarmupManager.getInstance().takePrerenderedWebContents() : null;      tab=Tab.createLiveTab(Tab.INVALID_TAB_ID,mActivity,mIncognito,mNativeWindow,type,parentId,!openInForeground);      tab.initialize(webContents,mTabContentManager,delegateFactory,!openInForeground);      tab.loadUrl(loadUrlParams);    }    tab.getTabRedirectHandler().updateIntent(intent);    if (intent != null && intent.hasExtra(ServiceTabLauncher.LAUNCH_REQUEST_ID_EXTRA)) {      ServiceTabLauncher.onWebContentsForRequestAvailable(intent.getIntExtra(ServiceTabLauncher.LAUNCH_REQUEST_ID_EXTRA,0),tab.getWebContents());    }    mTabModel.addTab(tab,position,type);    return tab;  }  finally {    TraceEvent.end("ChromeTabCreator.createNewTab");  }}  }
class C{  @Override public void characters(char[] ch,int start,int len) throws SAXException {  if (!cdataElement) {    if (mIgnoreChars) {      writeText4Links();      writeEscUTF16(new String(ch),start,len,false);    } else {      collectText4Links(ch,start,len);    }  } else {    writeText4Links();    for (int i=start; i < start + len; i++) {      write(ch[i]);    }  }  super.characters(ch,start,len);}  }
class C{  @Override public void afterSdkPathChange(@NotNull File sdkPath,@NotNull Project project){  if (!isBuildWithGradle(project)) {    return;  }  LocalProperties localProperties;  try {    localProperties=new LocalProperties(project);  } catch (  IOException e) {    logAndShowErrorWhenUpdatingLocalProperties(project,e,"read",sdkPath);    return;  }  if (!filesEqual(sdkPath,localProperties.getAndroidSdkPath())) {    try {      localProperties.setAndroidSdkPath(sdkPath);      localProperties.save();    } catch (    IOException e) {      logAndShowErrorWhenUpdatingLocalProperties(project,e,"update",sdkPath);      return;    }  }  if (!ApplicationManager.getApplication().isUnitTestMode()) {    GradleProjectImporter.getInstance().requestProjectSync(project,null);  }}  }
class C{  @Override public void onButtonClicked(boolean isPrimaryButton){  onButtonClicked(ActionType.OK);}  }
class C{  @RequestMapping(value="/race-data",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceData> updateRaceData(@RequestBody RaceData raceData) throws URISyntaxException {  log.debug("REST request to update RaceData : {}",raceData);  if (raceData.getRaceDataId() == null) {    return createRaceData(raceData);  }  RaceData result=raceDataRepository.save(raceData);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("raceData",raceData.getRaceDataId().toString())).body(result);}  }
class C{  private boolean resizeAndSaveImage(File targetFile,int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);  DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();  ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,ImageDownloader.Scheme.FILE.wrap(targetFile.getAbsolutePath()),targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);  Bitmap bmp=decoder.decode(decodingInfo);  if (bmp != null && configuration.processorForDiscCache != null) {    log(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISC);    bmp=configuration.processorForDiscCache.process(bmp);    if (bmp == null) {      L.e(ERROR_PROCESSOR_FOR_DISC_CACHE_NULL,memoryCacheKey);    }  }  if (bmp != null) {    OutputStream os=new BufferedOutputStream(new FileOutputStream(targetFile),BUFFER_SIZE);    try {      bmp.compress(configuration.imageCompressFormatForDiscCache,configuration.imageQualityForDiscCache,os);    }  finally {      IoUtils.closeSilently(os);    }    bmp.recycle();  }  return true;}  }
class C{  public boolean isPureQuaternion(double eps){  return FastMath.abs(getQ0()) <= eps;}  }
class C{  public boolean gotoFirst(){  countCurrent=0;  if (!searchInCollapsed) {    final List<Integer> list=classificationViewer.computeDisplayedIdsInSearchOrder();    currentIterator=list.iterator();    numberOfObjects=list.size();  } else {    final List<Integer> list=classificationViewer.computeAllIdsInSearchOrder();    currentIterator=list.iterator();    numberOfObjects=list.size();  }  currentId=(currentIterator.hasNext() ? currentIterator.next() : null);  return isCurrentSet();}  }
class C{  public Settings(PokemonGo api){  this.api=api;  this.mapSettings=new MapSettings();  this.levelUpSettings=new LevelUpSettings();  this.fortSettings=new FortSettings();  this.inventorySettings=new InventorySettings();  this.gpsSettings=new GpsSettings();  this.hash=new String();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_UNAUTHORIZED(String value0){  return new SM_SYSTEM_MESSAGE(1300783,value0);}  }
class C{  private static int c(int i,int j,int m,int n,long cmn,boolean strict){  if (strict) {    return FastMath.abs(i * (long)n - j * (long)m) <= cmn ? 1 : 0;  }  return FastMath.abs(i * (long)n - j * (long)m) < cmn ? 1 : 0;}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public static String prepareExpression(String expression){  String result=StringUtil.convertOperatorSubstitutions(expression);  result=result.replace("[]","['add']");  int openBrace=result.indexOf("[+");  int closeBrace=(openBrace == -1 ? -1 : result.indexOf(']',openBrace));  if (closeBrace != -1) {    String base=result.substring(0,openBrace);    String property=result.substring(openBrace + 2,closeBrace).trim();    String end=result.substring(closeBrace + 1);    result=base + "['insert@" + property+ "']"+ end;  }  return result;}  }
class C{  private DeferredFileOutputStream(int threshold,File outputFile,String prefix,String suffix,File directory){  super(threshold);  this.outputFile=outputFile;  memoryOutputStream=new ByteArrayOutputStream();  currentOutputStream=memoryOutputStream;  this.prefix=prefix;  this.suffix=suffix;  this.directory=directory;}  }
class C{  public static Double calcMaxDecisions(final long min_impressions,final long max_impressions){  if (min_impressions <= 0) {    throw new IllegalArgumentException("Minimum number of unique impressions must be positive.");  }  if (max_impressions <= 0) {    throw new IllegalArgumentException("Maximum number of unique impressions must be positive.");  }  return log(1.0 * max_impressions / min_impressions);}  }
class C{  public int modify_file1(String appender_file_id,long file_offset,byte[] file_buff) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.modify_file(parts[0],parts[1],file_offset,file_buff);}  }
class C{  public static void validateClusterSchemaAttributes(SpaceURL spaceURL) throws MalformedURLException {  if (spaceURL.containsKey(SpaceURL.CLUSTER_TOTAL_MEMBERS)) {    String[] clusterTotalMembers=getClusterMembers(spaceURL.getProperty(SpaceURL.CLUSTER_TOTAL_MEMBERS));    if (clusterTotalMembers.length == 1 && Integer.parseInt(clusterTotalMembers[0]) <= 1) {      throw new SpaceURLValidationException("The <" + SpaceURL.CLUSTER_TOTAL_MEMBERS + "> attribute must be larger than 1"+ " in the space URL: "+ spaceURL);    }  }  if (spaceURL.containsKey(SpaceURL.CLUSTER_SCHEMA) && !(spaceURL.containsKey(SpaceURL.CLUSTER_TOTAL_MEMBERS))) {    throw new SpaceURLValidationException("The <" + SpaceURL.CLUSTER_SCHEMA + "> attribute must be used together with the <"+ SpaceURL.CLUSTER_TOTAL_MEMBERS+ "> attribute "+ "in the space URL: "+ spaceURL);  }  if (spaceURL.containsKey(SpaceURL.CLUSTER_TOTAL_MEMBERS) && !(spaceURL.containsKey(SpaceURL.CLUSTER_SCHEMA))) {    throw new SpaceURLValidationException("The <" + SpaceURL.CLUSTER_TOTAL_MEMBERS + "> attribute must be used together with the <"+ SpaceURL.CLUSTER_SCHEMA+ "> attribute "+ "in the space URL: "+ spaceURL);  }  if (spaceURL.containsKey(SpaceURL.CLUSTER_SCHEMA) && spaceURL.containsKey(SpaceURL.CLUSTER_TOTAL_MEMBERS)) {    if (!spaceURL.containsKey(SpaceURL.CLUSTER_MEMBER_ID)) {      throw new SpaceURLValidationException("The <" + SpaceURL.CLUSTER_SCHEMA + "="+ spaceURL.getProperty(SpaceURL.CLUSTER_SCHEMA)+ "> attribute must be used together with the <"+ SpaceURL.CLUSTER_MEMBER_ID+ "> attribute in the space URL: "+ spaceURL);    }    String clusterSchema=spaceURL.getProperty(SpaceURL.CLUSTER_SCHEMA);    String totalMembers=spaceURL.getProperty(SpaceURL.CLUSTER_TOTAL_MEMBERS);    String[] totalMembersArray=getClusterMembers(totalMembers);    if (totalMembersArray.length > 1) {      if (ClusterXML.supportsBackup(clusterSchema)) {        try {          int pNum=Integer.valueOf(totalMembersArray[0]).intValue();          int bNum=Integer.valueOf(totalMembersArray[1]).intValue();          if (pNum < 1 || bNum < 0) {            throw new SpaceURLValidationException("The <" + SpaceURL.CLUSTER_SCHEMA + "="+ clusterSchema+ "> attribute must be used together with total_members attribute in the following format "+ "total_members={number of primary instances, number of backup instances per primary} "+ "in the space URL: "+ spaceURL+ ".\nThe number of primary instances must be greater than 0 and "+ ".\nthe number of number of backup instances per primary must not be less than 0.");          }        } catch (        NumberFormatException e) {          throw new SpaceURLValidationException("The <" + SpaceURL.CLUSTER_SCHEMA + "="+ clusterSchema+ "> attribute must be used together with the total_members attribute in the following format "+ "total_members={number of primary instances, number of backup instances per primary} "+ "in the space URL: "+ spaceURL+ ".\nThe number of primary instances must be greater than 0 and "+ ".\nthe number of number of backup instances per primary must not be less than 0.");        }      } else {        int bNum=Integer.valueOf(totalMembersArray[1]).intValue();        if (bNum > 0)         throw new SpaceURLValidationException("The <" + SpaceURL.CLUSTER_SCHEMA + "="+ clusterSchema+ "> attribute must be used together with the total_members attribute in the following format "+ "total_members={number of primary instances} "+ "in the space URL: "+ spaceURL+ ".\nOnly cluster_schema which ends with "+ ClusterXML.CLUSTER_SCHEMA_NAME_PARTITIONED+ " or "+ ClusterXML.CLUSTER_SCHEMA_NAME_PRIMARY_BACKUP+ " \ncan have total_member attribute in the following format "+ "total_members={number of primary instances, number of backup instances per primary}.");      }    }  }  String updateModeStr=spaceURL.getProperty(SpaceURL.LOCAL_CACHE_UPDATE_MODE);  if (updateModeStr != null) {    int updateMode=Integer.valueOf(updateModeStr);    if (updateMode != SpaceURL.UPDATE_MODE_PULL && updateMode != SpaceURL.UPDATE_MODE_PUSH) {      throw new SpaceURLValidationException("The <" + SpaceURL.LOCAL_CACHE_UPDATE_MODE + "> attribute must be equal to "+ SpaceURL.UPDATE_MODE_PULL+ " or "+ SpaceURL.UPDATE_MODE_PUSH+ " in the space URL: "+ spaceURL);    }  }  State state=(State)spaceURL.getLookupAttribute(SpaceURL.STATE);  if (state != null) {    if (!state.state.equalsIgnoreCase(SpaceURL.STATE_STARTED) && !state.state.equalsIgnoreCase(SpaceURL.STATE_STOPPED)) {      throw new SpaceURLValidationException("The <" + SpaceURL.STATE + "> attribute must be equal to "+ SpaceURL.STATE_STARTED+ " or "+ SpaceURL.STATE_STOPPED+ " in the space URL: "+ spaceURL);    }  }}  }
class C{  public IllConditionedOperatorException(final double cond){  super(org.hipparchus.migration.exception.util.LocalizedFormats.ILL_CONDITIONED_OPERATOR,cond);}  }
class C{  public static PrettyPrint indentWithTabs(){  return new PrettyPrint(new char[]{'\t'});}  }
class C{  public void write(OutputStream os) throws DataIOException {  try {    PrintStream out=new PrintStream(new BufferedOutputStream(os));    for (int i=0; i < names.length; ++i) {      out.print(names[i]);      out.print('\t');      out.print(cols[i + 1] - cols[i]);      out.println();    }  } catch (  Exception e) {    throw new DataIOException(e);  }}  }
class C{  @Override public void init(String[] args,String name,String configFile) throws ContainerException {  this.name=name;  this.configFile=configFile;  this.stores=new LinkedHashMap<Store,Session>();  this.pollTimer=Executors.newScheduledThreadPool(1);}  }
class C{  public MullerSolver(){  this(DEFAULT_ABSOLUTE_ACCURACY);}  }
class C{  protected static LazyNode cObject(int index){  return new LazyNode(OBJECT,index);}  }
class C{  public CASCGraph(){  super(1,1);  hVertexTypes=new HashMap();}  }
class C{  @Override public StringBuffer format(final long value,final StringBuffer buffer,final FieldPosition position){  return format(Long.valueOf(value),buffer,position);}  }
class C{  public static void main(String[] args) throws IOException {  String xmlfile=null;  int debuglevel=0;  int maxErrs=10;  boolean nsAware=true;  boolean validating=true;  boolean showWarnings=(debuglevel > 2);  boolean showErrors=true;  Vector catalogFiles=new Vector();  for (int i=0; i < args.length; i++) {    if (args[i].equals("-c")) {      ++i;      catalogFiles.add(args[i]);      continue;    }    if (args[i].equals("-w")) {      validating=false;      continue;    }    if (args[i].equals("-v")) {      validating=true;      continue;    }    if (args[i].equals("-n")) {      nsAware=false;      continue;    }    if (args[i].equals("-N")) {      nsAware=true;      continue;    }    if (args[i].equals("-d")) {      ++i;      String debugstr=args[i];      try {        debuglevel=Integer.parseInt(debugstr);        if (debuglevel >= 0) {          debug.setDebug(debuglevel);          showWarnings=(debuglevel > 2);        }      } catch (      Exception e) {      }      continue;    }    if (args[i].equals("-E")) {      ++i;      String errstr=args[i];      try {        int errs=Integer.parseInt(errstr);        if (errs >= 0) {          maxErrs=errs;        }      } catch (      Exception e) {      }      continue;    }    xmlfile=args[i];  }  if (xmlfile == null) {    System.out.println("Usage: org.apache.xml.resolver.apps.xparse [opts] xmlfile");    System.exit(1);  }  ResolvingParser.validating=validating;  ResolvingParser.namespaceAware=nsAware;  ResolvingParser reader=new ResolvingParser();  Catalog catalog=reader.getCatalog();  for (int count=0; count < catalogFiles.size(); count++) {    String file=(String)catalogFiles.elementAt(count);    catalog.parseCatalog(file);  }  XParseError xpe=new XParseError(showErrors,showWarnings);  xpe.setMaxMessages(maxErrs);  reader.setErrorHandler(xpe);  String parseType=validating ? "validating" : "well-formed";  String nsType=nsAware ? "namespace-aware" : "namespace-ignorant";  if (maxErrs > 0) {    System.out.println("Attempting " + parseType + ", "+ nsType+ " parse");  }  Date startTime=new Date();  try {    reader.parse(xmlfile);  } catch (  SAXException sx) {    System.out.println("SAX Exception: " + sx);  }catch (  Exception e) {    e.printStackTrace();  }  Date endTime=new Date();  long millisec=endTime.getTime() - startTime.getTime();  long secs=0;  long mins=0;  long hours=0;  if (millisec > 1000) {    secs=millisec / 1000;    millisec=millisec % 1000;  }  if (secs > 60) {    mins=secs / 60;    secs=secs % 60;  }  if (mins > 60) {    hours=mins / 60;    mins=mins % 60;  }  if (maxErrs > 0) {    System.out.print("Parse ");    if (xpe.getFatalCount() > 0) {      System.out.print("failed ");    } else {      System.out.print("succeeded ");      System.out.print("(");      if (hours > 0) {        System.out.print(hours + ":");      }      if (hours > 0 || mins > 0) {        System.out.print(mins + ":");      }      System.out.print(secs + "." + millisec);      System.out.print(") ");    }    System.out.print("with ");    int errCount=xpe.getErrorCount();    int warnCount=xpe.getWarningCount();    if (errCount > 0) {      System.out.print(errCount + " error");      System.out.print(errCount > 1 ? "s" : "");      System.out.print(" and ");    } else {      System.out.print("no errors and ");    }    if (warnCount > 0) {      System.out.print(warnCount + " warning");      System.out.print(warnCount > 1 ? "s" : "");      System.out.print(".");    } else {      System.out.print("no warnings.");    }    System.out.println("");  }  if (xpe.getErrorCount() > 0) {    System.exit(1);  }}  }
class C{  public void partitionWithPercent(boolean withPercent){  this.withPercent=withPercent;  if (withPercent)   chartUtils=ChartHelper.generateArcWithPercent(chartData); else   chartUtils=ChartHelper.generateArc(chartData);  animateValue=-1;  invalidate();}  }
class C{  public void testCache() throws Exception {  FileDownloader downloader=Mockito.mock(FileDownloader.class);  Mockito.when(downloader.download(Matchers.any(File.class))).thenReturn(ImmutableList.of(Pair.create(myDistributionFile,myDescription)));  DistributionService service=new DistributionService(downloader,CACHE_PATH,myDistributionFileUrl);  service.getSupportedDistributionForApiLevel(19);  service.getDistributionForApiLevel(21);  Mockito.verify(downloader).download(Matchers.any(File.class));}  }
class C{  public long optLong(int index,long defaultValue){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  return token.getLongValue(cbuf);}  }
class C{  private static void rethrowAsProperlyTypedException(Throwable throwable) throws IOException, ConfigurationException {  if (throwable != null) {    Throwables.propagateIfPossible(throwable,IOException.class,ConfigurationException.class);    throw new IllegalStateException(throwable);  }}  }
class C{  public PhotosCreateAlbumQuery commentsDisabled(Boolean value){  return unsafeParam("comments_disabled",value);}  }
class C{  private double[][] newPointAndDirection(double[] p,double[] d,double optimum){  final int n=p.length;  final double[] nP=new double[n];  final double[] nD=new double[n];  for (int i=0; i < n; i++) {    nD[i]=d[i] * optimum;    nP[i]=p[i] + nD[i];  }  final double[][] result=new double[2][];  result[0]=nP;  result[1]=nD;  return result;}  }
class C{  @Override public Node previousSibling(){  if (fCurrentNode == null)   return null;  Node node=getPreviousSibling(fCurrentNode);  if (node != null) {    fCurrentNode=node;  }  return node;}  }
class C{  @Override public int[] makeCumulativeTestPoints(){  return makeDensityTestPoints();}  }
class C{  @Override public WebElement findElement(){  WebElement context=scopeFactory.createLocator(scopeField).findElement();  return new DefaultElementLocator(context,searchField).findElement();}  }
class C{  public DeadLockDetector(int sleepTime,byte doWhenDL){  super("DeadLockDetector");  this.sleepTime=sleepTime * 1000;  this.tmx=ManagementFactory.getThreadMXBean();  this.doWhenDL=doWhenDL;}  }
class C{  private void onCreateFolderOperationFinish(CreateFolderOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    String remotePath=operation.getRemotePath().substring(0,operation.getRemotePath().length() - 1);    String newFolder=remotePath.substring(remotePath.lastIndexOf("/") + 1);    mParents.push(newFolder);    populateDirectoryList();  } else {    try {      Toast msg=Toast.makeText(this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  @Override public double nextNormalizedDouble(){  double omega=-FastMath.log(generator.nextDouble());  double phi=FastMath.PI * (generator.nextDouble() - 0.5);  if (alpha == 2d) {    return FastMath.sqrt(2d * omega) * FastMath.sin(phi);  }  double x;  if (beta == 0d) {    if (alpha == 1d) {      x=FastMath.tan(phi);    } else {      x=FastMath.pow(omega * FastMath.cos((1 - alpha) * phi),1d / alpha - 1d) * FastMath.sin(alpha * phi) / FastMath.pow(FastMath.cos(phi),1d / alpha);    }  } else {    double cosPhi=FastMath.cos(phi);    if (FastMath.abs(alpha - 1d) > 1e-8) {      double alphaPhi=alpha * phi;      double invAlphaPhi=phi - alphaPhi;      x=(FastMath.sin(alphaPhi) + zeta * FastMath.cos(alphaPhi)) / cosPhi * (FastMath.cos(invAlphaPhi) + zeta * FastMath.sin(invAlphaPhi)) / FastMath.pow(omega * cosPhi,(1 - alpha) / alpha);    } else {      double betaPhi=FastMath.PI / 2 + beta * phi;      x=2d / FastMath.PI * (betaPhi * FastMath.tan(phi) - beta * FastMath.log(FastMath.PI / 2d * omega * cosPhi / betaPhi));      if (alpha != 1d) {        x+=beta * FastMath.tan(FastMath.PI * alpha / 2);      }    }  }  return x;}  }
class C{  private boolean clobberCurrentDocument(String url,boolean hasUserGesture){  boolean shouldOpenNewTab=IntentUtils.safeGetBooleanExtra(getIntent(),Browser.EXTRA_CREATE_NEW_TAB,false);  String applicationId=IntentUtils.safeGetStringExtra(getIntent(),Browser.EXTRA_APPLICATION_ID);  if (shouldOpenNewTab || !getPackageName().equals(applicationId))   return false;  int tabId=ChromeApplication.getDocumentTabModelSelector().getCurrentTabId();  if (tabId == Tab.INVALID_TAB_ID)   return false;  LoadUrlParams params=new LoadUrlParams(url,PageTransition.LINK | PageTransition.FROM_API);  params.setHasUserGesture(hasUserGesture);  AsyncTabCreationParams data=new AsyncTabCreationParams(params,new Intent(getIntent()));  AsyncTabCreationParamsManager.add(tabId,data);  if (!relaunchTask(tabId)) {    AsyncTabCreationParamsManager.remove(tabId);    return false;  }  return true;}  }
class C{  public void removeEntry(Remote object){  Entry entry=_objMap.remove(object);  _objIdMap.remove(entry.m_ObjectId);}  }
class C{  private String downloadPacContent(String url) throws IOException {  if (url == null) {    throw new IOException("Invalid PAC script URL: null");  }  setPacProxySelectorEnabled(false);  HttpURLConnection con=null;  try {    con=setupHTTPConnection(url);    if (con.getResponseCode() != 200) {      throw new IOException("Server returned: " + con.getResponseCode() + " "+ con.getResponseMessage());    }    this.expireAtMillis=con.getExpiration();    BufferedReader r=getReader(con);    String result=readAllContent(r);    r.close();    return result;  }  finally {    setPacProxySelectorEnabled(true);    if (con != null) {      con.disconnect();    }  }}  }
class C{  private void putLocalVersioned(SpaceMapEntry newEnvelope,Object key,Object value,CacheEntry cacheEntry){  VersionCacheEntry versionEntry=new VersionCacheEntry(newEnvelope.getVersion());  boolean replaced=_cache.replace(key,versionEntry,cacheEntry);  if (!versionEntry.isChecked() && _putFirst) {    if (_cache.size() >= _sizeLimit)     _evictionStrategy.evict(this);    Object old=_cache.putIfAbsent(key,cacheEntry);    if (old != null) {      replaced=_cache.replace(key,versionEntry,cacheEntry);    }  }  if (replaced) {    Object entry=versionEntry.getOldEntry();    if (!(entry instanceof DummyCacheEntry))     _evictionStrategy.discardEntry((CacheEntry)entry);  }}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,getRandom(intArray.length));}  }
class C{  public S2LatLngRect(final S2LatLng lo,final S2LatLng hi){  lat=new R1Interval(lo.lat().radians(),hi.lat().radians());  lng=new S1Interval(lo.lng().radians(),hi.lng().radians());}  }
class C{  private boolean push(byte mode){  ++top;  if (top >= stack.length) {    if (top >= depth) {      return false;    }    stack=Arrays.copyOf(stack,Math.min(stack.length * 2,depth));  }  stack[top]=mode;  return true;}  }
class C{  public boolean equals(Object obj){  return ReferentUuids.compare(this,obj);}  }
class C{  public void close(){  if (textStorageReader != null)   textStorageReader.closeAllFiles();  if (dataIndexReader != null)   try {    dataIndexReader.close();  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  public AudioSaveQuery hash(String value){  return unsafeParam("hash",value);}  }
class C{  public void advance() throws ConcurrentModificationException, NoSuchElementException {  if (referenceCount != count) {    throw new ConcurrentModificationException();  }  current=next;  try {    while (states[++next] != FULL) {    }  } catch (  ArrayIndexOutOfBoundsException e) {    next=-2;    if (current < 0) {      throw new NoSuchElementException();    }  }}  }
class C{  public void createContainerFromWidgets(ArrayList<ConstraintWidget> widgets,ConstraintWidgetContainer containerInstance,String name){  Collections.sort(widgets,null);  if (widgets.size() == 0) {    return;  }  for (  ConstraintWidget w : mWidgets.values()) {    for (    ConstraintWidget widget : widgets) {      w.disconnectWidget(widget);      widget.resetAnchors();      widget.setHorizontalBiasPercent(0.5f);      widget.setVerticalBiasPercent(0.5f);    }  }  WidgetContainer parent=(WidgetContainer)widgets.get(0).getParent();  if (parent == null) {    parent=mRoot;  }  ConstraintWidgetContainer container=ConstraintWidgetContainer.createContainer(containerInstance,name,widgets,8);  if (container != null) {    if (container.getCompanionWidget() == null) {      container.setCompanionWidget(WidgetCompanion.create(container));    }    parent.add(container);    setWidget(container);    boolean previousAnimationState=Animator.doAnimation();    Animator.setAnimationEnabled(false);    mRoot.layout();    Animator.setAnimationEnabled(previousAnimationState);  }}  }
class C{  void addRTypeResourceName(RType rType,String resourceName,String resourceValue,ResourceDirectory resourceDirectory){  Map<String,Set<ResourceDirectory>> directoryResourceDirectoryMap=null;  if (this.rTypeResourceDirectoryMap.containsKey(rType)) {    directoryResourceDirectoryMap=this.rTypeResourceDirectoryMap.get(rType);  } else {    directoryResourceDirectoryMap=new HashMap<String,Set<ResourceDirectory>>();    this.rTypeResourceDirectoryMap.put(rType,directoryResourceDirectoryMap);  }  Set<ResourceDirectory> resourceDirectorySet=null;  if (directoryResourceDirectoryMap.containsKey(resourceDirectory.directoryName)) {    resourceDirectorySet=directoryResourceDirectoryMap.get(resourceDirectory.directoryName);  } else {    resourceDirectorySet=new HashSet<ResourceDirectory>();    directoryResourceDirectoryMap.put(resourceDirectory.directoryName,resourceDirectorySet);  }  boolean find=false;  ResourceDirectory newResourceDirectory=new ResourceDirectory(resourceDirectory.directoryName,resourceDirectory.resourceFullFilename);  if (!resourceDirectorySet.contains(newResourceDirectory)) {    resourceDirectorySet.add(newResourceDirectory);  }  for (  ResourceDirectory oldResourceDirectory : resourceDirectorySet) {    if (oldResourceDirectory.resourceEntrySet.contains(new ResourceEntry(resourceName,resourceValue))) {      find=true;      String resourceKey=rType + "/" + resourceDirectory.directoryName+ "/"+ resourceName;      Set<String> fullFilenameSet=null;      if (!this.duplicateResourceMap.containsKey(resourceKey)) {        fullFilenameSet=new HashSet<String>();        fullFilenameSet.add(oldResourceDirectory.resourceFullFilename);        this.duplicateResourceMap.put(resourceKey,fullFilenameSet);      } else {        fullFilenameSet=this.duplicateResourceMap.get(resourceKey);      }      fullFilenameSet.add(resourceDirectory.resourceFullFilename);    }  }  if (!find) {    for (    ResourceDirectory oldResourceDirectory : resourceDirectorySet) {      if (oldResourceDirectory.equals(newResourceDirectory)) {        if (!oldResourceDirectory.resourceEntrySet.contains(new ResourceEntry(resourceName,resourceValue))) {          oldResourceDirectory.resourceEntrySet.add(new ResourceEntry(resourceName,resourceValue));        }      }    }  }}  }
class C{  public int addAll(SplitSystem splits){  int count=0;  for (Iterator it=splits.iterator(); it.hasNext(); ) {    Split split=(Split)it.next();    if (!split2index.keySet().contains(split)) {      addSplit(split);      count++;    }  }  return count;}  }
class C{  public CommandManagerFX(IDirector dir,IDirectableViewer viewer,String commandsPath){  this(dir,viewer,new String[]{commandsPath},false);}  }
class C{  public static float reduce(float startValue,float endValue,float time){  if (startValue < endValue)   throw new IllegalArgumentException("End size can't be larger than start size.");  return endValue + (startValue - endValue) * (1 - time);}  }
class C{  public void onEnterZone(ZoneInstance zoneInstance){}  }
class C{  @Override public long limit(){  return fileLength >>> 2;}  }
class C{  private UByte(long value) throws NumberFormatException {  this.value=rangeCheck(value);}  }
class C{  public static String nullSafeToString(float[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public PhotosGetAllQuery(VkApiClient client,UserActor actor){  super(client,"photos.getAll",GetAllResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected Object resolve(){  GigaSpace gs=findGigaSpaceByName(this.name);  if (GigaSpace.class.isAssignableFrom(getMemberType())) {    if (!getMemberType().isInstance(gs)) {      throw new IllegalArgumentException("Cannot inject " + this.member + " with GigaSpaces ["+ this.name+ "]: type mismatch");    }    return gs;  } else {    throw new IllegalArgumentException("Failure to inject");  }}  }
class C{  public static void updateUserNamePictureCache(String accountId,String fullName,Bitmap bitmap){  sChildAccountId=null;  sCachedBadgedPicture=null;  sToNamePicture.put(accountId,new Pair<String,Bitmap>(fullName,makeRoundUserPicture(bitmap)));}  }
class C{  public static StateListDrawable toStateListDrawable(Drawable normal,Drawable pressed,Drawable focused,Drawable unable){  StateListDrawable drawable=new StateListDrawable();  drawable.addState(new int[]{android.R.attr.state_pressed,android.R.attr.state_enabled},pressed);  drawable.addState(new int[]{android.R.attr.state_enabled,android.R.attr.state_focused},focused);  drawable.addState(new int[]{android.R.attr.state_enabled},normal);  drawable.addState(new int[]{android.R.attr.state_focused},focused);  drawable.addState(new int[]{android.R.attr.state_window_focused},unable);  drawable.addState(new int[]{},normal);  return drawable;}  }
class C{  public M best(final G game,final IMoveGenerator<M,G> generator,int depthmax) throws TimeoutException {  try {    this.depthmax=depthmax;    final MinMaxEvaluatedMove best=minimax(game,generator,depthmax,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,game.currentPlayer() == 0,killer);    killer=best;    return best.getMove();  } catch (  final AlphaBetaPrunningException e) {    throw new RuntimeException("evaluated move found with value not between + infinity and - infinity...");  }}  }
class C{  private void handleFieldInits(soot.SootMethod sootMethod){  ArrayList<FieldDecl> fieldInits=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getFieldInits();  if (fieldInits != null) {    handleFieldInits(fieldInits);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("select what=previous;");}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  private static int[] compileLowerIndirection(final int parameters,final int order,final DSCompiler valueCompiler,final DSCompiler derivativeCompiler){  if (parameters == 0 || order <= 1) {    return new int[]{0};  }  final int vSize=valueCompiler.lowerIndirection.length;  final int dSize=derivativeCompiler.lowerIndirection.length;  final int[] lowerIndirection=new int[vSize + dSize];  System.arraycopy(valueCompiler.lowerIndirection,0,lowerIndirection,0,vSize);  for (int i=0; i < dSize; ++i) {    lowerIndirection[vSize + i]=valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];  }  return lowerIndirection;}  }
class C{  @Override public void write(String str,int st,int end) throws IOException {  out.write(str,st,end);}  }
class C{  @Override public void populateField(String key){  if (comboBox != null) {    comboBox.setSelectedDataKey(key);  }}  }
class C{  private int parseStyleInDefaultWorkspace(GeoServerRESTReader reader,int count,List<StyleWrapper> styleList){  RESTStyleList geoServerStyleList=reader.getStyles();  for (  String style : geoServerStyleList.getNames()) {    StyleWrapper newStyleWrapper=new StyleWrapper(DEFAULT_WORKSPACE_NAME,style);    styleList.add(newStyleWrapper);    if (parentObj != null) {      parentObj.readStylesProgress(connection,count,count);    }    count++;  }  return count;}  }
class C{  public static boolean isCategoryTop(Delegator delegator,LocalDispatcher dispatcher,String productCategoryId){  if (UtilValidate.isEmpty(productCategoryId)) {    return false;  }  try {    List<EntityCondition> rolllupConds=FastList.newInstance();    rolllupConds.add(EntityCondition.makeCondition("productCategoryId",productCategoryId));    rolllupConds.add(EntityUtil.getFilterByDateExpr());    Collection<GenericValue> rollups=EntityQuery.use(delegator).from("ProductCategoryRollup").where(rolllupConds).cache().queryList();    return rollups.isEmpty();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  return false;}  }
class C{  public MalformedURIException(String p_msg){  super(p_msg);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public void putCommandRunner(final long equipmentId,final ICommandRunner commandRunner){  commandRunners.put(equipmentId,commandRunner);}  }
class C{  public void afterMemberRemoved(MemberRemovedEvent memberRemovedEvent){}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  protected void doOptimizedEval(final Semaphore sSem,PrintStream pOverallResultsOutStream,int WordNGramSize_Min,int WordNGramSize_Max,int Word_Dmax,int CharacterNGramSize_Min,int CharacterNGramSize_Max,int Character_Dmax,boolean bDoCharNGrams,boolean bDoWordNGrams,String sSummaryDir,String sModelDir,int iThreads,boolean bSilent,boolean bProgress){  if (pOverallResultsOutStream == null)   pOverallResultsOutStream=System.out;  ThreadList tqRobin=new ThreadList(iThreads);  DocumentSet dsSummarySet=new DocumentSet(sSummaryDir,1.0);  final DocumentSet dsModelSet=new DocumentSet(sModelDir,1.0);  dsSummarySet.createSets();  dsModelSet.createSets();  HashMap hmCategoryResults=new HashMap();  if (dsSummarySet.getTrainingSet().size() * dsModelSet.getTrainingSet().size() == 0) {    System.err.println("Empty document set...");    System.exit(-1);  }  pOverallResultsOutStream.print("Theme\t");  pOverallResultsOutStream.print("SystemID\t");  if (bDoWordNGrams) {    pOverallResultsOutStream.print("GraphCooccurence\t");    pOverallResultsOutStream.print("GraphValue\t");    pOverallResultsOutStream.print("GraphSize\t");    pOverallResultsOutStream.print("HistoContainmentSimilarity\t");    pOverallResultsOutStream.print("HistoValue\t");    pOverallResultsOutStream.print("HistoSize\t");    pOverallResultsOutStream.print("OverallSimil\t");  }  if (bDoCharNGrams) {    pOverallResultsOutStream.print("CharGraphCooccurence\t");    pOverallResultsOutStream.print("CharGraphValue\t");    pOverallResultsOutStream.print("CharGraphSize\t");    pOverallResultsOutStream.print("NHistoContainmentSimilarity\t");    pOverallResultsOutStream.print("NHistoValue\t");    pOverallResultsOutStream.print("NHistoSize\t");    pOverallResultsOutStream.print("NOverallSimil\t");  }  pOverallResultsOutStream.println();  int iTotal=dsSummarySet.getTrainingSet().size();  int iCur=0;  Iterator iCatIter=dsModelSet.getCategories().iterator();  Date dStart=new Date();  while (iCatIter.hasNext()) {    String sCurCategory=(String)iCatIter.next();    if (!bSilent)     System.err.println("Processing category:" + sCurCategory);    hModelCache.clear();    hNModelCache.clear();    List lModelFiles=dsModelSet.getFilesFromCategory(sCurCategory);    Iterator iIter=dsSummarySet.getFilesFromCategory(sCurCategory,dsSummarySet.FROM_TRAINING_SET).iterator();    while (iIter.hasNext()) {      final CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();      Runnable r=new GaussCalcSimilRunner(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,cfeCur,lModelFiles,sSem,bDoCharNGrams,bDoWordNGrams,pOverallResultsOutStream,bSilent,this,WeightMethod,Progress);      while (!tqRobin.addThreadFor(r))       Thread.yield();      Date dCurTime=new Date();      long lRemaining=(iTotal - iCur + 1) * (long)((double)(dCurTime.getTime() - dStart.getTime()) / iCur);      if (!bSilent || (bProgress))       System.err.print("Completed " + String.format("%7.4f",(double)iCur++ / iTotal * 100) + "%"+ String.format(" - Remaining %50s\r",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lRemaining)));    }  }  try {    tqRobin.waitUntilCompletion();  } catch (  InterruptedException ex) {    System.err.println("Could not complete execution of all tasks.");    ex.printStackTrace(System.err);  }  System.err.println("Completed 100%. A total of " + iTotal + " comparisons were "+ "performed.");}  }
class C{  public void recordOpenedTabSwitcher(){  setFirstAction(OPENED_TAB_SWITCHER);}  }
class C{  public GroupsGetMembersQueryWithFields groupId(String value){  return unsafeParam("group_id",value);}  }
class C{  @Override public String toString(){  return String.format("Segment[%s%smin=%s;size=%,d;bytes=%,d;added=%,d;deleted=%,d;id=%s;dataId=%s]",_deleted ? "DELETED;" : "",_splitting ? "SPLITTING;" : "",(_min != null) ? ByteBufferUtil.bytesToHex(_min) : null,cardinality(),segmentSize(),_adds,_deletes,_id.toString().substring(4,8),_dataId.toString().substring(4,8));}  }
class C{  private static String joinPath(String path1,String path2){  File file1=new File(path1);  File file2=new File(file1,path2);  return file2.getPath();}  }
class C{  public QueryAndID takeNextQuery() throws IOException {  nextQuery:   while (true) {    QueryAndID theQuery=null;synchronized (this) {      for (      QueryAndID query : queryQueue.values()) {        if (query.state == 0 && globalState.hasIndex(query.indexName,query.shardOrd)) {          theQuery=query;          query.state=2;          break;        }      }      if (theQuery == null) {        try {          wait();        } catch (        InterruptedException ie) {          Thread.currentThread().interrupt();          throw new RuntimeException(ie);        }        continue;      }    }    for (    RemoteNodeConnection node : globalState.remoteNodes) {synchronized (node.c) {        node.c.out.writeByte(NodeToNodeHandler.CMD_TAKE_QUERY);        node.c.out.writeBytes(theQuery.id.id,0,theQuery.id.id.length);        node.c.bos.flush();        byte result=node.c.in.readByte();        if (result == 0) {          continue nextQuery;        }      }    }    return theQuery;  }}  }
class C{  @SuppressLint("NewApi") public final void makeFullScreenAfterKitKat(boolean enable){  try {    View decorView=getWindow().getDecorView();    if (enable) {      int uiOptionsEnable=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;      decorView.setSystemUiVisibility(uiOptionsEnable);    } else {      int uiOptionsDisable=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;      decorView.setSystemUiVisibility(uiOptionsDisable);    }  } catch (  Exception e) {    WindowManager.LayoutParams lp=getWindow().getAttributes();    if (enable) {      lp.flags|=WindowManager.LayoutParams.FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;    } else {      lp.flags&=(~WindowManager.LayoutParams.FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);    }    getWindow().setAttributes(lp);  }}  }
class C{  public Index open(Transaction tx){  TableInfo ti=VanillaDb.catalogMgr().getTableInfo(tblName,tx);  if (ti == null)   throw new TableNotFoundException("table '" + tblName + "' is not defined in catalog.");  return Index.newInstance(this,ti.schema().type(fldName),tx);}  }
class C{  private String textAreaHas(final int numOfLines){  return "textArea has " + numOfLines + " lines";}  }
class C{  public static void buildAchievementStats(JsonObject json,EntityPlayerMP player){  StatFileWriter sfw=player.getStatFile();  json.addProperty("DistanceTravelled",sfw.readStat((StatBase)StatList.distanceWalkedStat) + sfw.readStat((StatBase)StatList.distanceSwumStat) + sfw.readStat((StatBase)StatList.distanceDoveStat)+ sfw.readStat((StatBase)StatList.distanceFallenStat));  json.addProperty("TimeAlive",sfw.readStat((StatBase)StatList.timeSinceDeathStat));  json.addProperty("MobsKilled",sfw.readStat((StatBase)StatList.mobKillsStat));  json.addProperty("DamageTaken",sfw.readStat((StatBase)StatList.damageTakenStat));}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public FinderException(){  super();}  }
class C{  public Vector3f divideLocal(Vector3f scalar){  x/=scalar.x;  y/=scalar.y;  z/=scalar.z;  return this;}  }
class C{  public void loadData(Table t,String query,Object lock){  loadData(t,query,null,lock,null);}  }
class C{  public MultiwayPoolBuilder<K,R> expireAfterWrite(long duration,TimeUnit unit){  checkState(expireAfterWriteNanos == UNSET_INT,"expireAfterWrite was already set to %s ns",expireAfterWriteNanos);  checkArgument(duration >= 0,"duration cannot be negative: %s %s",duration,unit);  expireAfterWriteNanos=unit.toNanos(duration);  return this;}  }
class C{  @RequestMapping(value=ClientUris.CONFIG_FETCHES,method=RequestMethod.GET) public List<ConfigItem> fetches(@RequestParam("names") String names){  ClientSession client=ClientContext.get();  assert client != null;  List<String> nameList=Splitters.COMMA.splitToList(names);  Response<List<Config>> configsResp=configService.findByNames(client.getAppId(),nameList);  if (!configsResp.isSuccess()) {    Logs.error("failed to fetch configs(names={}), cause: {}",names,configsResp.getErr());    return Collections.emptyList();  }  return ConfigItemFactory.creates(configsResp.getData());}  }
class C{  public void shutDown(){  setTab(null);  if (mLayerTitleCache != null)   mLayerTitleCache.shutDown();  mCompositorView.shutDown();}  }
class C{  public SaveHeaderGroup copy(){  SaveHeaderGroup clone=new SaveHeaderGroup();  clone.headers.addAll(this.headers);  return clone;}  }
class C{  public D addFunction(PathEdge<N,D> edge){  return nonEmptyReverseLookup.putIfAbsent(edge,edge.factAtTarget());}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public boolean isIgnorableWhitespace(){  if (needsSyncData()) {    synchronizeData();  }  return internalIsIgnorableWhitespace();}  }
class C{  @Override public boolean isAlreadyMatched(){  return false;}  }
class C{  public int addAdjustment(GenericValue adjustment){  adjustments.add(adjustment);  return adjustments.indexOf(adjustment);}  }
class C{  public static void writeResultFile(File file,Map<String,List<QueryResponseJSON>> resultMap) throws IOException {  try (BufferedWriter bw=new BufferedWriter(new FileWriter(file))){    for (    Entry<String,List<QueryResponseJSON>> entry : resultMap.entrySet()) {      for (      QueryResponseJSON hitJSON : entry.getValue()) {        bw.write(hitJSON.getJSONString());        bw.newLine();      }    }  } }  }
class C{  public void initialize(Vector2[] points){  int size=points.length;  DoubleEdgeListFace face=new DoubleEdgeListFace();  this.faces.add(face);  DoubleEdgeListHalfEdge prevLeftEdge=null;  DoubleEdgeListHalfEdge prevRightEdge=null;  for (int i=0; i < size; i++) {    Vector2 point=points[i];    DoubleEdgeListVertex vertex=new DoubleEdgeListVertex(point);    DoubleEdgeListHalfEdge left=new DoubleEdgeListHalfEdge();    DoubleEdgeListHalfEdge right=new DoubleEdgeListHalfEdge();    left.face=face;    left.next=null;    left.origin=vertex;    left.twin=right;    right.face=null;    right.next=prevRightEdge;    right.origin=null;    right.twin=left;    this.edges.add(left);    this.edges.add(right);    vertex.leaving=left;    this.vertices.add(vertex);    if (prevLeftEdge != null) {      prevLeftEdge.next=left;    }    if (prevRightEdge != null) {      prevRightEdge.origin=vertex;    }    prevLeftEdge=left;    prevRightEdge=right;  }  DoubleEdgeListHalfEdge firstLeftEdge=this.edges.get(0);  prevLeftEdge.next=firstLeftEdge;  DoubleEdgeListHalfEdge firstRightEdge=this.edges.get(1);  firstRightEdge.next=prevRightEdge;  prevRightEdge.origin=this.vertices.get(0);  face.edge=firstLeftEdge;}  }
class C{  public boolean remove(JsonElement element){  return elements.remove(element);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_TOGGLE_SKILL_TURNED_ON(String value0){  return new SM_SYSTEM_MESSAGE(1390121,value0);}  }
class C{  public boolean isEmpty(){  return this.results == null || this.results.isEmpty();}  }
class C{  public Label(String tag){  id=tag.intern();  opc=opc_label;  operand=null;}  }
class C{  public T dotProduct(ArrayFieldVector<T> v) throws MathIllegalArgumentException {  checkVectorDimensions(v.data.length);  T dot=field.getZero();  for (int i=0; i < data.length; i++) {    dot=dot.add(data[i].multiply(v.data[i]));  }  return dot;}  }
class C{  public boolean isMinIsZero(){  return minIsZero;}  }
class C{  public static ICacheSystem create(Configuration conf){  String server=conf.getString("cache.url").substring(Cache.REDIS.length());  String[] ss=server.split(":");  String host=ss[0];  int port=6379;  if (ss.length > 1) {    port=X.toInt(ss[1],0);  }  RedisCache r=new RedisCache();  JedisPoolConfig config=new JedisPoolConfig();  config.setMaxTotal(20);  config.setMaxIdle(5);  config.setMaxWaitMillis(1000l);  config.setTestOnBorrow(false);  List<JedisShardInfo> shards=new ArrayList<JedisShardInfo>();  shards.add(new JedisShardInfo(host,port,"master"));  r.shardedJedisPool=new ShardedJedisPool(config,shards);  r.jedis=r.shardedJedisPool.getResource();  return r;}  }
class C{  public static String toTree(@NotNull List<NlComponent> roots){  return toTree(roots,false);}  }
class C{  public FieldVector3D<T> subtract(final T factor,final Vector3D v){  return new FieldVector3D<T>(x.subtract(factor.multiply(v.getX())),y.subtract(factor.multiply(v.getY())),z.subtract(factor.multiply(v.getZ())));}  }
class C{  public void scheduleValueForSending(){  this.sendValue=true;}  }
class C{  public void uploadNewFile(Context context,Account account,String localPath,String remotePath,int behaviour,String mimeType,boolean createRemoteFile,int createdBy){  uploadNewFile(context,account,new String[]{localPath},new String[]{remotePath},new String[]{mimeType},behaviour,createRemoteFile,createdBy);}  }
class C{  public OutOfRangeException(Localizable specific,Number wrong,Number lo,Number hi){  super(specific,wrong,lo,hi);  this.lo=lo;  this.hi=hi;}  }
class C{  private static TestingServer startLocalZooKeeper() throws Exception {  ((Logger)LoggerFactory.getLogger("org.apache.zookeeper")).setLevel(Level.ERROR);  TestingServer zooKeeperServer=new TestingServer(2181);  System.setProperty("dw.zooKeeper.connectString",zooKeeperServer.getConnectString());  return zooKeeperServer;}  }
class C{  private void scheduleRepeatingAlarm(){  Intent registerIntent=createRegisterRequestIntent(this);  PendingIntent pIntent=PendingIntent.getService(this,0,registerIntent,0);  AlarmManager am=(AlarmManager)getSystemService(Context.ALARM_SERVICE);  setAlarm(am,pIntent,AlarmManager.RTC,mTimestampForNewRequest);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private boolean isRestartNeeded(boolean optOut){  if (optOut)   return true;  boolean isFromFre=getActivity().getIntent() != null && getActivity().getIntent().getBooleanExtra(IntentHandler.EXTRA_INVOKED_FROM_FRE,false);  if (!isFromFre)   return true;  ActivityManager am=(ActivityManager)getActivity().getSystemService(Context.ACTIVITY_SERVICE);  PackageManager pm=getActivity().getPackageManager();  List<AppTask> taskList=am.getAppTasks();  for (int i=0; i < taskList.size(); i++) {    String className=DocumentUtils.getTaskClassName(taskList.get(i),pm);    if (className == null)     continue;    if (DocumentActivity.isDocumentActivity(className))     return true;  }  return false;}  }
class C{  private void enableHistoryMode(){  historyCache.clear();  ClientDataTagImpl liveTag=null;  ClientDataTagImpl historyTag=null;  Collection<BaseListener> listeners=null;  for (  Entry<Long,ClientDataTagImpl> entry : liveCache.entrySet()) {    liveTag=entry.getValue();    historyTag=liveTag.clone();    listeners=liveTag.getUpdateListeners();    liveTag.removeAllUpdateListeners();    historyTag.addUpdateListeners(listeners);    historyCache.put(entry.getKey(),historyTag);  }  activeCache=historyCache;}  }
class C{  public RegulaFalsiSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy,Method.REGULA_FALSI);}  }
class C{  private DownloadManager(){  mDownloaderMap=new LinkedHashMap<String,Downloader>();}  }
class C{  public RemExpr newRemExpr(Value op1,Value op2){  return new JRemExpr(op1,op2);}  }
class C{  public SortByTime(){  super();}  }
class C{  public static boolean isInited(){  return inited;}  }
class C{  public static Set<String> convertArrayToSet(String[] array){  Set<String> resultSet=new HashSet<String>(array.length);  Collections.addAll(resultSet,array);  return resultSet;}  }
class C{  public String normalizeText(String text){  return text.replaceAll("\\t","    ").replaceAll("[^\\S\\n]+(\\n)","$1").replaceAll("[^\\S\\n]"," ");}  }
class C{  Segment(UUID id,Snapshot snapshot,long splitThresholdBytes,SplitQueue<Segment> splitQueue){  if (snapshot.version > PERSISTENCE_VERSION) {    throw new UnsupportedOperationException("Unsupported persistent sorted queue data version: " + snapshot.version);  }  _id=checkNotNull(id,"id");  _dataId=Objects.firstNonNull(snapshot.dataId,id);  _min=(snapshot.min != null) ? ByteBufferUtil.hexToBytes(snapshot.min) : null;  _adds=snapshot.adds;  _bytesAdded=snapshot.bytesAdded;  try {    _distinctAdds=HyperLogLog.Builder.build(checkNotNull(snapshot.distinctAddsHll,"distinctAddsHll"));  } catch (  IOException e) {    throw Throwables.propagate(e);  }  _deletes=snapshot.deletes;  _bytesUntilSplitCheckSize=snapshot.bytesUntilSplitCheckSize;  _bytesUntilSplitCheckRemaining=0;  _splitThresholdBytes=splitThresholdBytes;  _splitting=snapshot.splitting;  _splitTargetSize=snapshot.splitTargetSize;  _splitTargetRemaining=snapshot.splitTargetRemaining;  _splitQueue=checkNotNull(splitQueue,"splitQueue");}  }
class C{  public ColourRampPanel(XMLTwoColourRampList xmlTwoColourRampList){  this.rampDataList=createColourRampList(xmlTwoColourRampList);  createUI();}  }
class C{  private void messageArrived(GSMessageImpl message){  if (_logger.isLoggable(Level.FINEST)) {    _logger.log(Level.FINEST,toString2() + "messageArrived(): " + message.JMSMessageID);  }synchronized (synchTopicNotifyLock) {    while (currentMessage != null) {      if (_logger.isLoggable(Level.FINEST)) {        _logger.log(Level.FINEST,toString2() + "messageArrived(): A message is already pending: " + currentMessage.JMSMessageID);      }      try {        synchTopicNotifyLock.wait();      } catch (      InterruptedException e) {        if (m_session.isLocalConsumer(m_consumerID)) {          if (_logger.isLoggable(Level.SEVERE)) {            _logger.log(Level.SEVERE,toString2() + "messageArrived(): The notification thread was interrupted. Notification message: " + message.JMSMessageID);          }        } else {          if (_logger.isLoggable(Level.INFO)) {            _logger.log(Level.INFO,toString2() + "messageArrived(): The notification thread is exiting. Notification message: " + message.JMSMessageID);          }        }      }    }    currentMessage=message;    synchTopicNotifyLock.notify();    while (!m_closed && currentMessage != null) {      try {        synchTopicNotifyLock.wait();      } catch (      InterruptedException e) {        if (m_session.isLocalConsumer(m_consumerID)) {          if (_logger.isLoggable(Level.SEVERE)) {            _logger.log(Level.SEVERE,toString2() + "messageArrived(): The notification thread was interrupted while waiting to be released: " + currentMessage.JMSMessageID);          }        } else {          if (_logger.isLoggable(Level.INFO)) {            _logger.log(Level.INFO,toString2() + "messageArrived(): The notification thread is exiting. The consumer is closed. Pending message: " + currentMessage.JMSMessageID);          }        }      }    }  }}  }
class C{  @Override public void serializeAsField(Object bean,JsonGenerator jgen,SerializerProvider prov) throws Exception {  Object value=get(bean);  if (value == null) {    return;  }  JsonSerializer<Object> ser=_serializer;  if (ser == null) {    Class<?> cls=value.getClass();    PropertySerializerMap map=_dynamicSerializers;    ser=map.serializerFor(cls);    if (ser == null) {      ser=_findAndAddDynamic(map,cls,prov);    }  }  if (_suppressableValue != null) {    if (MARKER_FOR_EMPTY == _suppressableValue) {      if (ser.isEmpty(value)) {        return;      }    } else     if (_suppressableValue.equals(value)) {      return;    }  }  if (value == bean) {    _handleSelfReference(bean,ser);  }  jgen.writeFieldName(_name);  if (_typeSerializer == null) {    ser.serialize(value,jgen,prov);  } else {    ser.serializeWithType(value,jgen,prov,_typeSerializer);  }}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  public void write(DataOutput raf) throws IOException {  assert duration >= 0;  if (data == null) {    throw new IllegalStateException("This method can only be called for data that is not null");  }  raf.writeLong(duration);  raf.writeInt(data.length);  raf.write(data);}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  public static boolean dateTimeIsValid(final String dateTimeString){  try {    DATE_TIME_FORMAT.parseDateTime(dateTimeString);    return true;  } catch (  IllegalArgumentException ex) {    return false;  }}  }
class C{  @Override public int compareTo(ValidationResult other){  int result=orgUnit.getName().compareTo(other.orgUnit.getName());  if (result != 0) {    return result;  }  result=period.getStartDate().compareTo(other.period.getStartDate());  if (result != 0) {    return result;  }  result=period.getEndDate().compareTo(other.period.getEndDate());  if (result != 0) {    return result;  }  result=attributeOptionCombo.getId() - other.attributeOptionCombo.getId();  if (result != 0) {    return result;  }  result=validationImportanceOrder(validationRule.getImportance()) - validationImportanceOrder(other.validationRule.getImportance());  if (result != 0) {    return result;  }  result=validationRule.getLeftSide().getDescription().compareTo(other.validationRule.getLeftSide().getDescription());  if (result != 0) {    return result;  }  result=validationRule.getOperator().compareTo(other.validationRule.getOperator());  if (result != 0) {    return result;  }  result=validationRule.getRightSide().getDescription().compareTo(other.validationRule.getRightSide().getDescription());  if (result != 0) {    return result;  }  result=(int)Math.signum(Math.round(100.0 * leftsideValue) - Math.round(100.0 * other.leftsideValue));  if (result != 0) {    return result;  }  result=(int)Math.signum(Math.round(100.0 * rightsideValue) - Math.round(100.0 * other.rightsideValue));  if (result != 0) {    return result;  }  return 0;}  }
class C{  boolean insertSubtree(BinarySearchTreeNode<E> node){  if (node == null)   return false;  Iterator<E> iterator=new BinarySearchTreeIterator<E>(node);  while (iterator.hasNext()) {    BinarySearchTreeNode<E> newNode=new BinarySearchTreeNode<E>(iterator.next());    this.insert(newNode);  }  return true;}  }
class C{  public void loadFile(IName2IdMap label2id,String fileName,ProgressListener progressListener) throws IOException, CanceledException {  System.err.println("Loading map from file: " + fileName);  FileInputIterator it=new FileInputIterator(new InputStreamReader(ResourceManager.getFileAsStream(fileName)),fileName);  it.setSkipCommentLines(true);  it.setSkipEmptyLines(true);  progressListener.setProgress(0);  progressListener.setMaximum(it.getMaximumProgress());  try {    while (it.hasNext()) {      String aLine=it.next();      String[] tokens=aLine.split("\t");      if (tokens.length >= 2) {        final Integer id;        if (Basic.isInteger(tokens[1])) {          id=Basic.parseInt(tokens[1]);        } else {          id=label2id.get(tokens[1]);        }        if (id != 0)         put(tokens[0],id); else         System.err.println("Line " + it.getLineNumber() + ": invalid id: "+ tokens[1]);      } else {        throw new IOException("Loading synonyms-to-id file, line: " + it.getLineNumber() + ": expected two entries separated by a tab,  got: <"+ aLine+ ">");      }      progressListener.setProgress(it.getProgress());    }  }  finally {    it.close();    System.err.println("Lines loaded: " + size());  }}  }
class C{  public boolean hasDataConnector(){  return fileName != null && fileName.length() > 0 && (fileType.toString().startsWith("RMA") || fileType.toString().startsWith("DAA") || fileType == Type.MEGAN_SERVER_FILE);}  }
class C{  public LazyObject optJSONObject(int index) throws LazyException {  LazyNode token=getOptionalValueToken(index);  if (token == null)   return null;  if (token.type == LazyNode.VALUE_NULL)   return null;  if (token.type != LazyNode.OBJECT)   throw new LazyException("Requested value is not an object",token);  return new LazyObject(token,cbuf);}  }
class C{  private IResource areAnyElementsChecked(){  TreeItem[] item=fViewer.getTree().getItems();  for (int i=0; i < item.length; i++) {    TreeItem child=item[i];    if (child.getChecked() || child.getGrayed()) {      return (IResource)child.getData();    }  }  return null;}  }
class C{  public IntStringTranslator(){  list=new ArrayList<String>();  map=new HashMap<String,Integer>();}  }
class C{  public Object loadObject(ClassMetaData classMetaData,IEntryPacket entry){  Object[] ids=new Object[1];  ids[0]=entry.getID();  Object objectId=ApplicationIds.fromPKValues(ids,classMetaData);  return getContext().find(objectId,null,null,entry,0);}  }
class C{  public static String splitSafe(String string,String separator,int index){  if (string == null) {    return null;  }  String[] split=string.split(separator);  if (index >= 0 && split.length > index && split[index] != null) {    return String.valueOf(split[index]);  }  return null;}  }
class C{  private Stream<String> generateDimensionColumnHeaders(Map.Entry<Dimension,LinkedHashSet<DimensionField>> entry){  if (entry.getValue().isEmpty()) {    return Stream.of(entry.getKey().getApiName());  } else {    return entry.getValue().stream().map(null);  }}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),0);  setChild(new List(),1);}  }
class C{  public void addPreAllocatedServiceUnit(String suName,ResourceQuota quota){  this.preAllocatedBundles.add(suName);  this.preAllocatedQuota.add(quota);  estimateLoadPercentage();}  }
class C{  private void clearIssueReferences(String launchId){  List<FailReferenceResource> issues=issuesRepository.findAllLaunchIssues(launchId);  issuesRepository.delete(issues);}  }
class C{  public void testProcessDefinitionListenerDefinitionIllegalType() throws Exception {  org.activiti.engine.repository.Deployment deployment=null;  try {    deployment=repositoryService.createDeployment().addClasspathResource("org/activiti/standalone/event/invalidEventListenerType.bpmn20.xml").deploy();    fail("Exception expected");  } catch (  ActivitiException ae) {    assertTrue(ae instanceof ActivitiIllegalArgumentException);    assertEquals("Invalid event-type: invalid",ae.getMessage());  } finally {    if (deployment != null) {      repositoryService.deleteDeployment(deployment.getId(),true);    }  }}  }
class C{  public PrefixFileFilter(String prefix){  this(prefix,IOCase.SENSITIVE);}  }
class C{  public static String toLookupLocatorURLs(LookupLocator[] lookupLocators,boolean removeProtocolPrefix){  if (removeProtocolPrefix) {    StringBuilder sb=new StringBuilder();    for (    LookupLocator locator : lookupLocators) {      sb.append(locator.getHost()).append(":").append(locator.getPort()).append(",");    }    if (sb.length() > 0) {      sb.setLength(sb.length() - 1);    }    return sb.toString();  } else {    return arrayToCommaDelimitedString(lookupLocators);  }}  }
class C{  public static Map<String,Object> updatePartyGroup(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String partyId=getPartyId(context);  if (UtilValidate.isEmpty(partyId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.party_id_missing",locale));  }  GenericValue partyGroup=null;  GenericValue party=null;  try {    partyGroup=EntityQuery.use(delegator).from("PartyGroup").where("partyId",partyId).queryOne();    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_party_information_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  if (partyGroup == null || party == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_party_information_not_found",locale));  }  String oldStatusId=party.getString("statusId");  partyGroup.setNonPKFields(context);  party.setNonPKFields(context);  party.set("statusId",oldStatusId);  try {    partyGroup.store();    party.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_party_information_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  if (UtilValidate.isNotEmpty(context.get("statusId")) && !context.get("statusId").equals(oldStatusId)) {    try {      dispatcher.runSync("setPartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",context.get("statusId"),"userLogin",context.get("userLogin")));    } catch (    GenericServiceException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.write_failure",new Object[]{e.getMessage()},locale));    }  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public boolean isFull(){  return slotPosition(getNumRecords() + 1) >= Buffer.BUFFER_SIZE;}  }
class C{  @Requires(Resolved.class) @Nullable public EnumValue lookupValue(String name){  return valueByName.get(name);}  }
class C{  public void clear(){  for (int i=0; i < Divisions; ++i) {    size[i]=0;    header[i]=null;  }  hasNewFigure=false;}  }
class C{  @deprecated public ComposedCharIter(boolean compat,int options){  if (compat) {    this.n2impl=Norm2AllModes.getNFKCInstance().impl;  } else {    this.n2impl=Norm2AllModes.getNFCInstance().impl;  }}  }
class C{  public String toString(){  return new String(getType() + " with current value: " + getValue());}  }
class C{  public SootMethod(String name,List<Type> parameterTypes,Type returnType,int modifiers){  this(name,parameterTypes,returnType,modifiers,Collections.<SootClass>emptyList());}  }
class C{  @Override public boolean showDialog(){  Class<?> dataType=Object.class;  return showFilterDialog(dataType,filter);}  }
class C{  public MessagesGetLastActivityQuery(VkApiClient client,UserActor actor,int userId){  super(client,"messages.getLastActivity",LastActivity.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public void addTypeParameter(TypeVariable node){  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();  list.addChild(node);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public static Map<String,Object> returnSuccess(String successMessage){  return returnMessage(ModelService.RESPOND_SUCCESS,successMessage);}  }
class C{  public void diff_cleanupEfficiency(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  boolean pre_ins=false;  boolean pre_del=false;  boolean post_ins=false;  boolean post_del=false;  Diff thisDiff=pointer.next();  Diff safeDiff=thisDiff;  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      if (thisDiff.text.length() < Diff_EditCost && (post_ins || post_del)) {        equalities.push(thisDiff);        pre_ins=post_ins;        pre_del=post_del;        lastequality=thisDiff.text;      } else {        equalities.clear();        lastequality=null;        safeDiff=thisDiff;      }      post_ins=post_del=false;    } else {      if (thisDiff.operation == Operation.DELETE) {        post_del=true;      } else {        post_ins=true;      }      if (lastequality != null && ((pre_ins && pre_del && post_ins&& post_del) || ((lastequality.length() < Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0)+ (post_del ? 1 : 0)) == 3))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(thisDiff=new Diff(Operation.INSERT,lastequality));        equalities.pop();        lastequality=null;        if (pre_ins && pre_del) {          post_ins=post_del=true;          equalities.clear();          safeDiff=thisDiff;        } else {          if (!equalities.empty()) {            equalities.pop();          }          if (equalities.empty()) {            thisDiff=safeDiff;          } else {            thisDiff=equalities.lastElement();          }          while (thisDiff != pointer.previous()) {          }          post_ins=post_del=false;        }        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }}  }
class C{  @Override public void powerOnSelfTest() throws Error {  assert state == MODULE_RUNNING;  Log.i(Mary.LOG,"Starting power-on self test.");  try {    MaryData in=new MaryData(inputType,getLocale());    String example=inputType.exampleText(getLocale());    if (example != null) {      in.readFrom(new StringReader(example));      if (outputType.equals(MaryDataType.get("AUDIO")))       in.setAudioFileFormat(new AudioFileFormat(AudioFileFormat.Type.WAVE,Voice.AF22050,AudioSystem.NOT_SPECIFIED));      process(in);    } else {      Log.d(Mary.LOG,"3 No example text -- no power-on self test!");    }  } catch (  Throwable t) {    throw new Error("Module " + name + ": Power-on self test failed.",t);  }  Log.i(Mary.LOG,"Power-on self test complete.");}  }
class C{  @NotNull public ImageOverlayBuilder ocrImage(@NotNull OCRResult ocrResult){  ocrResult.regions.forEach(null);  return this;}  }
class C{  private void transformToTridiagonal(final RealMatrix matrix){  transformer=new TriDiagonalTransformer(matrix);  main=transformer.getMainDiagonalRef();  secondary=transformer.getSecondaryDiagonalRef();}  }
class C{  public void drawChart(Graphics2D gc){  gc.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int scaleWidth=30;  int x1=getWidth() - rightMargin - scaleWidth;  if (x0 >= x1)   return;  if (inUpdateCoordinates) {    gc.setFont(getFont("Default"));    gc.setColor(Color.LIGHT_GRAY);    gc.drawString("Computing correlation plot...",x0,y1 + 20);    viewer.getScrollPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    return;  } else   viewer.getScrollPane().setCursor(Cursor.getDefaultCursor());  if (sgc != null) {    drawYAxis(gc,null);  }  if (!getChartTitle().startsWith("Correlation plot: "))   setChartTitle("Correlation plot: " + getChartTitle());  final int numberOfClasses=(classNames == null ? 0 : classNames.length);  if (viewer.getClassesList().isDoClustering())   y1+=topTreeSpace;  if (sgc == null) {    drawScaleBar(gc,x1,scaleWidth,y1,y0 - y1);  }  if (viewer.getClassesList().isDoClustering()) {    x1-=rightTreeSpace;    int width=(int)((x1 - x0) / (numberOfClasses + 1.0) * numberOfClasses);    int xStart=x0 + ((x1 - x0) - width) / 2;    final Rectangle rect=new Rectangle(xStart,y1 - topTreeSpace,width,topTreeSpace);    topClusteringTree.paint(gc,rect);  }  if (viewer.getClassesList().isDoClustering()) {    int height=(int)Math.round((y0 - y1) / (numberOfClasses + 1.0) * numberOfClasses);    int yStart=y0 + ((y1 - y0) - height) / 2;    final Rectangle rect=new Rectangle(x1,yStart,rightTreeSpace,height);    rightClusteringTree.paint(gc,rect);  }  if (numberOfClasses > 0) {    double xStep=(x1 - x0) / (double)numberOfClasses;    double yStep=(y0 - y1) / (double)numberOfClasses;    int d=0;    for (    final String classNameX : classNames) {      final double xLabel=x0 + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      final Dimension labelSize=Basic.getStringSize(gc,classNameX,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(null,classNameX)) {        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      drawString(gc,classNameX,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null) {        sgc.setCurrentItem(new String[]{null,classNameX});        drawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle);        sgc.clearCurrentItem();      }      int c=numberOfClasses - 1;      for (      final String classNameY : classNames) {        final Float correlationCoefficient=dataMatrix.get(classNameX,classNameY);        if (correlationCoefficient != null) {          final double[] boundingBox=new double[]{x0 + d * xStep,y0 - (c + 1) * yStep,xStep,yStep};          drawCell(gc,boundingBox,correlationCoefficient);          if (sgc != null && !sgc.isShiftDown()) {            sgc.setCurrentItem(new String[]{null,classNameX});            gc.fillRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            sgc.clearCurrentItem();            sgc.setCurrentItem(new String[]{null,classNameY});            gc.fillRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            sgc.clearCurrentItem();          }          boolean isSelected=!classNameX.equals(classNameY) && getChartData().getChartSelection().isSelected(null,classNameX) && getChartData().getChartSelection().isSelected(null,classNameY);          if (isSelected) {            gc.setStroke(HEAVY_STROKE);            gc.setColor(ProgramProperties.SELECTION_COLOR);            gc.drawRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            gc.setStroke(NORMAL_STROKE);          }          if (showValues || isSelected) {            String aLabel=String.format("%.3f",correlationCoefficient);            valuesList.add(new DrawableValue(aLabel,(int)Math.round(boundingBox[0] + boundingBox[2] / 2),(int)Math.round(boundingBox[1] + boundingBox[3] / 2) - gc.getFont().getSize() / 2,isSelected));          }        }        c--;      }      d++;    }  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,true,true);    valuesList.clear();  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void notifyDataSetChanged(){  mDataSetObservable.notifyChanged();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CAN_BUY_ONLY_ONE(String value0){  return new SM_SYSTEM_MESSAGE(1390217,value0);}  }
class C{  public Bundler putParcelable(String key,Parcelable value){  bundle.putParcelable(key,value);  return this;}  }
class C{  public static int confirmValues(String confirmTitle,String[] titles,String[] values){  if (titles.length == 0 || (titles.length != values.length)) {    return -1;  }  JTable table=new JTable();  table.setModel(new DefaultTableModel(new Object[][]{},new String[]{" "," "}));  SwingUtil.TableUtil.ensureRowNumber(table,titles.length);  for (int i=0; i < titles.length; i++) {    table.setValueAt(titles[i],i,0);    table.setValueAt(values[i],i,1);  }  JScrollPane mainPanel=new JScrollPane(table);  return JOptionPane.showConfirmDialog(null,mainPanel,confirmTitle,JOptionPane.YES_NO_OPTION);}  }
class C{  public static void createSchemaFiles(String filter) throws Exception {  createSchemaFiles(null,false,filter);}  }
class C{  public DataTypeException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void updateFloatingActionButton(View dependency){  if (dependency != null && dependency instanceof FloatingActionButton) {    floatingActionButton=(FloatingActionButton)dependency;    if (!fabBottomMarginInitialized && dependency.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {      fabBottomMarginInitialized=true;      ViewGroup.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)dependency.getLayoutParams();      fabDefaultBottomMargin=p.bottomMargin;    }  }}  }
class C{  private void addShadowView(){  if (mShadowView == null) {    mShadowView=new ShadowView(getContext());    mShadowView.setX(-SHADOW_WIDTH);  }  final FrameLayout.LayoutParams layoutParams=new FrameLayout.LayoutParams(SHADOW_WIDTH,FrameLayout.LayoutParams.MATCH_PARENT);  final FrameLayout contentView=mCurrentContentView;  contentView.addView(mShadowView,1,layoutParams);}  }
class C{  public String toString(){  return "DiphoneUnitSelector";}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof Pair)) {    return false;  }  Pair<?,?> other=(Pair<?,?>)o;  return (key == null ? other.key == null : key.equals(other.key)) && (value == null ? other.value == null : value.equals(other.value));}  }
class C{  public byte[] encrypt(byte[] bytes){  byte[] resp=null;  try {    resp=crypt(bytes,Cipher.ENCRYPT_MODE);  } catch (  Exception e) {    return null;  }  return resp;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.parallelGatewayNoEndProcess.bpmn20.xml"}) public void testProcessCompleted_ParallelGatewayNoEnd() throws Exception {  this.runtimeService.startProcessInstanceByKey("noEndProcess");  assertEquals("ActivitiEventType.PROCESS_COMPLETED was expected 1 time.",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_NORMAL_REMAIN_PLAYTIME(String value0,String value1,String value2,String value3){  return new SM_SYSTEM_MESSAGE(1390141,value0,value1,value2,value3);}  }
class C{  public VarcharConstantRange(String low,boolean lowIncl,String high,boolean highIncl){  if (low == null)   this.low=NEG_INF; else {    this.low=new VarcharConstant(low);    hasLowerBound=true;    this.lowIncl=lowIncl;  }  if (high == null)   this.high=INF; else {    this.high=new VarcharConstant(high);    this.highIncl=highIncl;  }}  }
class C{  public void close(){  if (writer != null) {    if (!hasFile) {      writeStartFile(original,dataType,skeletonPath,fwConfigId,fwInputEncoding,null);    }    if (inFile) {      writeEndFile();    }    writer.writeEndElementLineBreak();    writer.writeEndDocument();    writer.close();    writer=null;  }  fwConfigId=null;  fwInputEncoding=null;  skeletonPath=null;}  }
class C{  public void decorate(Job job){  String sourceCode=job.getSourceCode();  int basePos=job.getBasePos();  List<Object> decorations=new ArrayList<Object>(Arrays.asList(new Object[]{basePos,PR_PLAIN}));  int pos=0;  String[] tokens=Util.match(tokenizer,sourceCode,true);  Map<String,String> styleCache=new HashMap<String,String>();  for (int ti=0, nTokens=tokens.length; ti < nTokens; ++ti) {    String token=tokens[ti];    String style=styleCache.get(token);    String[] match=null;    boolean isEmbedded;    if (style != null) {      isEmbedded=false;    } else {      List<Object> patternParts=shortcuts.get(token.charAt(0));      if (patternParts != null) {        match=Util.match((Pattern)patternParts.get(1),token,false);        style=(String)patternParts.get(0);      } else {        for (int i=0; i < nPatterns; ++i) {          patternParts=fallthroughStylePatterns.get(i);          match=Util.match((Pattern)patternParts.get(1),token,false);          if (match.length != 0) {            style=(String)patternParts.get(0);            break;          }        }        if (match.length == 0) {          style=PR_PLAIN;        }      }      isEmbedded=style != null && style.length() >= 5 && style.startsWith("lang-");      if (isEmbedded && !(match.length > 1 && match[1] != null)) {        isEmbedded=false;        style=PR_SOURCE;      }      if (!isEmbedded) {        styleCache.put(token,style);      }    }    int tokenStart=pos;    pos+=token.length();    if (!isEmbedded) {      decorations.add(basePos + tokenStart);      decorations.add(style);    } else {      String embeddedSource=match[1];      int embeddedSourceStart=token.indexOf(embeddedSource);      int embeddedSourceEnd=embeddedSourceStart + embeddedSource.length();      if (match.length > 2 && match[2] != null) {        embeddedSourceEnd=token.length() - match[2].length();        embeddedSourceStart=embeddedSourceEnd - embeddedSource.length();      }      String lang=style.substring(5);      appendDecorations(basePos + tokenStart,token.substring(0,embeddedSourceStart),this,decorations);      appendDecorations(basePos + tokenStart + embeddedSourceStart,embeddedSource,langHandlerForExtension(lang,embeddedSource),decorations);      appendDecorations(basePos + tokenStart + embeddedSourceEnd,token.substring(embeddedSourceEnd),this,decorations);    }  }  job.setDecorations(Util.removeDuplicates(decorations,job.getSourceCode()));}  }
class C{  public static Color averageEdgeColor(Pixmap pixmap,boolean ninePatch){  int border=0;  if (ninePatch) {    border=1;  }  Color temp=new Color();  float sumR=0.0f;  float sumG=0.0f;  float sumB=0.0f;  int count=0;  for (int y=border; y < pixmap.getHeight() - border; y++) {    for (int x=border; x < pixmap.getWidth() - border; x++) {      temp.set(pixmap.getPixel(x,y));      if (temp.a > 0) {        sumR+=temp.r;        sumG+=temp.g;        sumB+=temp.b;        count++;        break;      }    }  }  for (int y=border; y < pixmap.getHeight() - border; y++) {    for (int x=pixmap.getWidth() - 1 - border; x > border; x--) {      temp.set(pixmap.getPixel(x,y));      if (temp.a > 0) {        sumR+=temp.r;        sumG+=temp.g;        sumB+=temp.b;        count++;        break;      }    }  }  for (int x=border; x < pixmap.getWidth() - border; x++) {    for (int y=border; y < pixmap.getHeight() - border; y++) {      temp.set(pixmap.getPixel(x,y));      if (temp.a > 0) {        sumR+=temp.r;        sumG+=temp.g;        sumB+=temp.b;        count++;        break;      }    }  }  for (int x=border; x < pixmap.getWidth() - border; x++) {    for (int y=pixmap.getHeight() - 1 - border; y > border; y--) {      temp.set(pixmap.getPixel(x,y));      if (temp.a > 0) {        sumR+=temp.r;        sumG+=temp.g;        sumB+=temp.b;        count++;        break;      }    }  }  if (count == 0) {    return new Color(Color.BLACK);  } else {    return new Color(sumR / count,sumG / count,sumB / count,1.0f);  }}  }
class C{  public long remove(K key){  long prev=(long)0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BoundFieldAccess fullCopy(){  BoundFieldAccess tree=(BoundFieldAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected void performHouseholderReflection(int minor,double[][] matrix){  final double[] qrtMinor=matrix[minor];  double xNormSqr=0;  for (int row=minor; row < qrtMinor.length; row++) {    final double c=qrtMinor[row];    xNormSqr+=c * c;  }  final double a=(qrtMinor[minor] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);  rDiag[minor]=a;  if (a != 0.0) {    qrtMinor[minor]-=a;    for (int col=minor + 1; col < matrix.length; col++) {      final double[] qrtCol=matrix[col];      double alpha=0;      for (int row=minor; row < qrtCol.length; row++) {        alpha-=qrtCol[row] * qrtMinor[row];      }      alpha/=a * qrtMinor[minor];      for (int row=minor; row < qrtCol.length; row++) {        qrtCol[row]-=alpha * qrtMinor[row];      }    }  }}  }
class C{  public void testMappingCharFilter() throws Exception {  send("analyze","{text: foo bar, analyzer: {charFilters: [{class: Mapping, mappingFileContents: '\"bar\" => \"foo\"'}], tokenizer: Whitespace}}");  assertEquals("foo foo",justTokens());}  }
class C{  public static DateTime addTimeGrain(DateTime dateTime,TimeGrain timeGrain){  return dateTime.plus(timeGrain.getPeriod());}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static List<String> generateXVals(int from,int to){  List<String> xvals=new ArrayList<>();  for (int i=from; i < to; i++) {    xvals.add(Integer.toString(i));  }  return xvals;}  }
class C{  @Deprecated public boolean allowOasisXMLCatalogPI(){  return getAllowOasisXMLCatalogPI();}  }
class C{  public void clearOnlyItems(){  List<Insertion> insertions=new ArrayList<>();  insertions.addAll(getHeaders());  insertions.addAll(getOnlyInsertions());  insertions.addAll(getFooters());  mInserts.clear();  getItems().clear();  mOnlyItemsCount=0;  reAddAllInserts(insertions);  notifyIfNeed();}  }
class C{  public Bundle onSaveInstanceState(){  Bundle state=new Bundle();  state.putInt("destType",this.destType);  state.putInt("srcType",this.srcType);  state.putInt("mQuality",this.mQuality);  state.putInt("targetWidth",this.targetWidth);  state.putInt("targetHeight",this.targetHeight);  state.putInt("encodingType",this.encodingType);  state.putInt("mediaType",this.mediaType);  state.putInt("numPics",this.numPics);  state.putBoolean("allowEdit",this.allowEdit);  state.putBoolean("correctOrientation",this.correctOrientation);  state.putBoolean("saveToPhotoAlbum",this.saveToPhotoAlbum);  if (this.croppedUri != null) {    state.putString("croppedUri",this.croppedUri.toString());  }  if (this.imageUri != null) {    state.putString("imageUri",this.imageUri.toString());  }  return state;}  }
class C{  public static void resetPrintStream(){  setPrintStream(stdOut,stdErr);}  }
class C{  public Map<C,V> row(R rowKey){  if (rowKey == null)   return null;  return dataMap.get(rowKey);}  }
class C{  public GroupsGetByIdQuery groupIds(String... value){  return unsafeParam("group_ids",value);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FORCE_MATCH_JUST_SENT_APPLY(String value0){  return new SM_SYSTEM_MESSAGE(1400191,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200378,num0,skillname);}  }
class C{  public boolean hasMoreData(){  return signal.hasMoreData() || !stopWhenTouchingEnd && memoryFilled && posInMemory < memory.length;}  }
class C{  public boolean binomialTest(int numberOfTrials,int numberOfSuccesses,double probability,AlternativeHypothesis alternativeHypothesis,double alpha){  double pValue=binomialTest(numberOfTrials,numberOfSuccesses,probability,alternativeHypothesis);  return pValue < alpha;}  }
class C{  public static String toSystemIndependentPath(String path){  if (File.separatorChar != '/') {    path=path.replace(File.separatorChar,'/');  }  return path;}  }
class C{  @Override protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {  Class<?>[] interfaceClasses=new Class[interfaces.length];  for (int i=0; i < interfaces.length; i++) {    interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader);  }  try {    return Proxy.getProxyClass(classLoader,interfaceClasses);  } catch (  IllegalArgumentException e) {    return super.resolveProxyClass(interfaces);  }}  }
class C{  @Override public void playNewVideo(MetaData currentItemMetaData,VideoPlayerView videoPlayerView,String videoUrl){  if (SHOW_LOGS)   Logger.v(TAG,">> playNewVideo, videoPlayer " + videoPlayerView + ", mCurrentPlayer "+ mCurrentPlayer+ ", videoPlayerView "+ videoPlayerView);  mPlayerHandler.pauseQueueProcessing(TAG);  boolean currentPlayerIsActive=currentItemMetaData.isMorePlayView() && mCurrentPlayer == videoPlayerView;  boolean isAlreadyPlayingTheFile=mCurrentPlayer != null && videoUrl.equals(mCurrentPlayer.getVideoUrlDataSource());  if (SHOW_LOGS)   Logger.v(TAG,"playNewVideo, isAlreadyPlayingTheFile " + isAlreadyPlayingTheFile);  if (SHOW_LOGS)   Logger.v(TAG,"playNewVideo, currentPlayerIsActive " + currentPlayerIsActive);  startNewPlayback(currentItemMetaData,videoPlayerView,videoUrl);  mPlayerHandler.resumeQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< playNewVideo, videoPlayer " + videoPlayerView + ", videoUrl "+ videoUrl);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    if (DEBUG)     debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  protected final void notifyInvalidated(){  if (!myNotificationsEnabled) {    return;  }  for (  InvalidationListener listener : myListeners) {    listener.onInvalidated(this);  }  for (  InvalidationListener listener : myWeakListeners) {    listener.onInvalidated(this);  }}  }
class C{  public EventSessionConfig(){}  }
class C{  public void writeOffset(long offset) throws IOException {  dataOutputStream.writeLong(offset);}  }
class C{  @Override public void processUtterance(Utterance utterance) throws ProcessException {  Relation tokenRelation;  if ((tokenRelation=utterance.getRelation(Relation.TOKEN)) == null) {    throw new IllegalStateException("TokenToWords: Token relation does not exist");  }  WordRelation wordRelation=WordRelation.createWordRelation(utterance,this);  for (Item tokenItem=tokenRelation.getHead(); tokenItem != null; tokenItem=tokenItem.getNext()) {    FeatureSet featureSet=tokenItem.getFeatures();    String tokenVal=featureSet.getString("name");    tokenToWords(wordRelation,tokenItem,tokenVal);  }}  }
class C{  @Override public boolean hasRaster(Symbolizer symbolizer){  return (symbolizer instanceof RasterSymbolizer);}  }
class C{  private void ping(){  try (Jedis jedis=pool.getResource()){    String pong=jedis.ping();    redisIsHealthy="PONG".equals(pong);  } catch (  JedisException ignored) {    redisIsHealthy=false;  }}  }
class C{  @Override public Dfp divide(Dfp divisor){  int dividend[];  int quotient[];  int remainder[];  int qd;  int nsqd;  int trial=0;  int minadj;  boolean trialgood;  int md=0;  int excp;  if (field.getRadixDigits() != divisor.field.getRadixDigits()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    final Dfp result=newInstance(getZero());    result.nans=QNAN;    return dotrap(DfpField.FLAG_INVALID,DIVIDE_TRAP,divisor,result);  }  Dfp result=newInstance(getZero());  if (nans != FINITE || divisor.nans != FINITE) {    if (isNaN()) {      return this;    }    if (divisor.isNaN()) {      return divisor;    }    if (nans == INFINITE && divisor.nans == FINITE) {      result=newInstance(this);      result.sign=(byte)(sign * divisor.sign);      return result;    }    if (divisor.nans == INFINITE && nans == FINITE) {      result=newInstance(getZero());      result.sign=(byte)(sign * divisor.sign);      return result;    }    if (divisor.nans == INFINITE && nans == INFINITE) {      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);      result=newInstance(getZero());      result.nans=QNAN;      result=dotrap(DfpField.FLAG_INVALID,DIVIDE_TRAP,divisor,result);      return result;    }  }  if (divisor.mant[mant.length - 1] == 0) {    field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);    result=newInstance(getZero());    result.sign=(byte)(sign * divisor.sign);    result.nans=INFINITE;    result=dotrap(DfpField.FLAG_DIV_ZERO,DIVIDE_TRAP,divisor,result);    return result;  }  dividend=new int[mant.length + 1];  quotient=new int[mant.length + 2];  remainder=new int[mant.length + 1];  dividend[mant.length]=0;  quotient[mant.length]=0;  quotient[mant.length + 1]=0;  remainder[mant.length]=0;  for (int i=0; i < mant.length; i++) {    dividend[i]=mant[i];    quotient[i]=0;    remainder[i]=0;  }  nsqd=0;  for (qd=mant.length + 1; qd >= 0; qd--) {    final int divMsb=dividend[mant.length] * RADIX + dividend[mant.length - 1];    int min=divMsb / (divisor.mant[mant.length - 1] + 1);    int max=(divMsb + 1) / divisor.mant[mant.length - 1];    trialgood=false;    while (!trialgood) {      trial=(min + max) / 2;      int rh=0;      for (int i=0; i < mant.length + 1; i++) {        int dm=(i < mant.length) ? divisor.mant[i] : 0;        final int r=(dm * trial) + rh;        rh=r / RADIX;        remainder[i]=r - rh * RADIX;      }      rh=1;      for (int i=0; i < mant.length + 1; i++) {        final int r=((RADIX - 1) - remainder[i]) + dividend[i] + rh;        rh=r / RADIX;        remainder[i]=r - rh * RADIX;      }      if (rh == 0) {        max=trial - 1;        continue;      }      minadj=(remainder[mant.length] * RADIX) + remainder[mant.length - 1];      minadj/=divisor.mant[mant.length - 1] + 1;      if (minadj >= 2) {        min=trial + minadj;        continue;      }      trialgood=false;      for (int i=mant.length - 1; i >= 0; i--) {        if (divisor.mant[i] > remainder[i]) {          trialgood=true;        }        if (divisor.mant[i] < remainder[i]) {          break;        }      }      if (remainder[mant.length] != 0) {        trialgood=false;      }      if (trialgood == false) {        min=trial + 1;      }    }    quotient[qd]=trial;    if (trial != 0 || nsqd != 0) {      nsqd++;    }    if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {      break;    }    if (nsqd > mant.length) {      break;    }    dividend[0]=0;    for (int i=0; i < mant.length; i++) {      dividend[i + 1]=remainder[i];    }  }  md=mant.length;  for (int i=mant.length + 1; i >= 0; i--) {    if (quotient[i] != 0) {      md=i;      break;    }  }  for (int i=0; i < mant.length; i++) {    result.mant[mant.length - i - 1]=quotient[md - i];  }  result.exp=exp - divisor.exp + md - mant.length;  result.sign=(byte)((sign == divisor.sign) ? 1 : -1);  if (result.mant[mant.length - 1] == 0) {    result.exp=0;  }  if (md > (mant.length - 1)) {    excp=result.round(quotient[md - mant.length]);  } else {    excp=result.round(0);  }  if (excp != 0) {    result=dotrap(excp,DIVIDE_TRAP,divisor,result);  }  return result;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static URL[] toURLs(File[] files) throws IOException {  URL[] urls=new URL[files.length];  for (int i=0; i < urls.length; i++) {    urls[i]=files[i].toURI().toURL();  }  return urls;}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  public WishlistComponentCursor queryWishlistsComponent(SQLiteDatabase db){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Table=S.TABLE_WISHLIST_COMPONENT;  qh.Columns=null;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  SQLiteQueryBuilder qb=builderWishlistComponent();  Cursor cursor=qb.query(db,qh.Columns,qh.Selection,qh.SelectionArgs,qh.GroupBy,qh.Having,qh.OrderBy,qh.Limit);  return new WishlistComponentCursor(cursor);}  }
class C{  private void readFromVersion2Stream(StatusFromBytesStream dis) throws IOException {  readFromVersion1Stream(dis);  lockOwner=dis.readUTF();  if (lockOwner.equals(""))   lockOwner=null;  lockCreationDate=dis.readLong();  lockComment=dis.readUTF();  if (lockComment.equals(""))   lockComment=null;  readOnly=dis.readBoolean();}  }
class C{  public String toString(){  String sRes="";  Iterator iEdgeIter=Arrays.asList(getEdgeSet().toArray()).listIterator();  while (iEdgeIter.hasNext()) {    Edge e=(Edge)iEdgeIter.next();    String sA="";    char[] cTmp=e.getVertexA().getLabel().toCharArray();    int iCnt=0;    while (iCnt < cTmp.length) {      char c=cTmp[iCnt];      sA+=(Character.isISOControl(c)) ? "_" : (char)c;      iCnt++;    }    String sB="";    cTmp=e.getVertexB().getLabel().toCharArray();    iCnt=0;    while (iCnt < cTmp.length) {      char c=cTmp[iCnt];      sB+=(Character.isISOControl(c)) ? "_" : (char)c;      iCnt++;    }    sRes=sRes.concat(sA + "->" + sB+ "(Distro: "+ getEdgeDistro(e).toString()+ ")\n");  }  return sRes;}  }
class C{  public static void printf(Locale locale,String format,Object... args){  out.printf(locale,format,args);  out.flush();}  }
class C{  public static FileChannel createTempFile(String prefix,String suffix) throws IOException {  return createTempFile(TMPDIR,prefix,suffix);}  }
class C{  public static String format(Date date,boolean millis,TimeZone tz){  Calendar calendar=new GregorianCalendar(tz,Locale.US);  calendar.setTime(date);  int capacity="yyyy-MM-ddThh:mm:ss".length();  capacity+=millis ? ".sss".length() : 0;  capacity+=tz.getRawOffset() == 0 ? "Z".length() : "+hh:mm".length();  StringBuilder formatted=new StringBuilder(capacity);  padInt(formatted,calendar.get(Calendar.YEAR),"yyyy".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.MONTH) + 1,"MM".length());  formatted.append('-');  padInt(formatted,calendar.get(Calendar.DAY_OF_MONTH),"dd".length());  formatted.append('T');  padInt(formatted,calendar.get(Calendar.HOUR_OF_DAY),"hh".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.MINUTE),"mm".length());  formatted.append(':');  padInt(formatted,calendar.get(Calendar.SECOND),"ss".length());  if (millis) {    formatted.append('.');    padInt(formatted,calendar.get(Calendar.MILLISECOND),"sss".length());  }  int offset=tz.getOffset(calendar.getTimeInMillis());  if (offset != 0) {    int hours=Math.abs((offset / (60 * 1000)) / 60);    int minutes=Math.abs((offset / (60 * 1000)) % 60);    formatted.append(offset < 0 ? '-' : '+');    padInt(formatted,hours,"hh".length());    formatted.append(':');    padInt(formatted,minutes,"mm".length());  } else {    formatted.append('Z');  }  return formatted.toString();}  }
class C{  @Override @Transactional(value="cacheTransactionManager") public ProcessChange doCreateProcess(final ConfigurationElement element) throws IllegalAccessException {  processCache.acquireWriteLockOnKey(element.getEntityId());  try {    Process process=(Process)processFacade.createCacheObject(element.getEntityId(),element.getElementProperties());    processDAO.insert(process);    processCache.putQuiet(process);    updateControlTagInformation(element,process);    return new ProcessChange(process.getId());  }  finally {    processCache.releaseWriteLockOnKey(element.getEntityId());  }}  }
class C{  private void checkUnsymmetricMatrix(final RealMatrix m){  try {    EigenDecomposition ed=new EigenDecomposition(m);    RealMatrix d=ed.getD();    RealMatrix v=ed.getV();    RealMatrix x=m.multiply(v);    RealMatrix y=v.multiply(d);    double diffNorm=x.subtract(y).getNorm();    Assert.assertTrue("The norm of (X-Y) is too large: " + diffNorm + ", matrix="+ m.toString(),x.subtract(y).getNorm() < 1000 * Precision.EPSILON * FastMath.max(x.getNorm(),y.getNorm()));    RealMatrix invV=new LUDecomposition(v).getSolver().getInverse();    double norm=v.multiply(d).multiply(invV).subtract(m).getNorm();    Assert.assertEquals(0.0,norm,1.0e-10);  } catch (  Exception e) {    Assert.fail("Failed to create EigenDecomposition for matrix " + m.toString() + ", ex="+ e.toString());  }}  }
class C{  public AccountSaveProfileInfoQuery firstName(String value){  return unsafeParam("first_name",value);}  }
class C{  @Override TaskDomino<T,R,U> defaultScheduler(){  return new TaskDomino<T,R,U>(super.defaultScheduler());}  }
class C{  private static String toVersionString(@Nonnull final List<String> groups){  final StringBuilder builder=new StringBuilder(6);  int count=0;  for (  final String segment : groups) {    if (EMPTY_GROUP.equals(segment)) {      break;    } else {      if (count > 0) {        builder.append(SEPARATOR);      }      builder.append(segment);    }    count++;  }  return builder.toString();}  }
class C{  public static Style red(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_RED);  return style;}  }
class C{  public IdsQuery(String typeName,Object[] ids,Object routing){  this(typeName,ids,routing,null,QueryResultType.DEFAULT);}  }
class C{  protected TransferOperation(){  super();}  }
class C{  public void push(Map<K,V> existingMap){  if (existingMap == null) {    throw new IllegalArgumentException("Error: cannot push null existing Map onto a MapContext");  }  this.stackList.add(0,existingMap);}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException e) {    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  Diff other=(Diff)obj;  if (operation != other.operation) {    return false;  }  if (text == null) {    if (other.text != null) {      return false;    }  } else   if (!text.equals(other.text)) {    return false;  }  return true;}  }
class C{  public NewsfeedGetQuery maxPhotos(Integer value){  return unsafeParam("max_photos",value);}  }
class C{  public JsonArrayRequest(String url,Response.Listener<JSONObject> listener,Response.ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  @BeforeMethod private void runBeforeMethod(Method method){  LOGGER.info("==============> Invoking " + method);}  }
class C{  public static S2CellId sentinel(){  return new S2CellId(MAX_UNSIGNED);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public void sumQuantities(Map<String,BOMNode> quantityPerNode){  if (root != null) {    root.sumQuantity(quantityPerNode);  }}  }
class C{  private static boolean isLowercaseLetter(char ch){  return ('a' <= ch && ch <= 'z');}  }
class C{  protected WallReportCommentQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public synchronized void startPreview(){  OpenCamera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.getCamera().startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,theCamera.getCamera());  }}  }
class C{  public boolean hasFinally(){  return getFinallyOpt().getNumChild() != 0;}  }
class C{  public void init$Children(){}  }
class C{  public final void makeFullScreen(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int uiOptions=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;    View decorView=getWindow().getDecorView();    decorView.setSystemUiVisibility(uiOptions);  } else {    WindowManager.LayoutParams lp=getWindow().getAttributes();    lp.flags|=WindowManager.LayoutParams.FLAG_FULLSCREEN;    getWindow().setAttributes(lp);  }}  }
class C{  private void afterSuccessfulBulkExecution(IReplicationInBatchContext context){  if (_operationStatisticsHandler != null) {    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());    List<BulkItem> bulk=context.getPendingContext();    sourceChannelStatistics.addSuccessfulOperationCount(bulk);  }}  }
class C{  public void startObservingFontPrefs(){  mFontSizePrefs.addObserver(mFontSizeObserver);  updatePreview();}  }
class C{  private static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public boolean catchableAsNoneOf(ThrowableSet set,List<RefType> members){  boolean result=true;  for (  RefType member : members) {    result=result && (!set.catchableAs(member));  }  return result;}  }
class C{  protected void tag(String tag,String name,String value,boolean close){  spacing();  m_out.print('<');  m_out.print(tag);  m_out.print(' ');  m_out.print(name);  m_out.print('=');  m_out.print('\"');  escapeString(value);  m_out.print('\"');  if (close)   m_out.print('/');  m_out.print('>');  println();  if (!close) {    m_tagStack.add(tag);  }}  }
class C{  public int addRow(int parentRow){  int r=super.addRow();  put(r,parentRow);  return r;}  }
class C{  public static String replaceCharacters(final ConversionMethod conversionMethod,final String input,final int fromCharacter,final int toCharacter,final String wrap){  String convertedText=input;  for (int i=fromCharacter; i <= toCharacter; i++) {    final String characterToReplace=new String(Character.toChars(i));    if (wrap != null) {      convertedText=convertedText.replace(characterToReplace,wrap + convertText(conversionMethod,characterToReplace) + wrap);    } else {      convertedText=convertedText.replace(characterToReplace,convertText(conversionMethod,characterToReplace));    }  }  return convertedText;}  }
class C{  public boolean hasDTD(){  return hasDTD;}  }
class C{  protected final void synchronizeChildren(AttrImpl a,int nodeIndex){  boolean orig=getMutationEvents();  setMutationEvents(false);  a.needsSyncChildren(false);  int last=getLastChild(nodeIndex);  int prev=getPrevSibling(last);  if (prev == -1) {    a.value=getNodeValueString(nodeIndex);    a.hasStringValue(true);  } else {    ChildNode firstNode=null;    ChildNode lastNode=null;    for (int index=last; index != -1; index=getPrevSibling(index)) {      ChildNode node=(ChildNode)getNodeObject(index);      if (lastNode == null) {        lastNode=node;      } else {        firstNode.previousSibling=node;      }      node.ownerNode=a;      node.isOwned(true);      node.nextSibling=firstNode;      firstNode=node;    }    if (lastNode != null) {      a.value=firstNode;      firstNode.isFirstChild(true);      a.lastChild(lastNode);    }    a.hasStringValue(false);  }  setMutationEvents(orig);}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader context=SecuritySupport.getContextClassLoader();  ClassLoader system=SecuritySupport.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=SecuritySupport.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=SecuritySupport.getParentClassLoader(chain);  }  return context;}  }
class C{  public void dispose(){  if (delegate instanceof IActionDelegate2) {    ((IActionDelegate2)delegate).dispose();    delegate=null;  }}  }
class C{  private void requestFocus(View view){  if (view.requestFocus()) {    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private Base64(){}  }
class C{  public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  public PhotosGetCommentsQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public MarketCreateCommentQuery stickerId(Integer value){  return unsafeParam("sticker_id",value);}  }
class C{  protected InputStream from(){  return from;}  }
class C{  private TransferTagAddressImpl(){}  }
class C{  private <T extends ClientRequestResult>Collection<T> executeRequest(final Collection<Long> ids,final Class<T> clazz,final ClientRequestReportListener reportListener,final String requestQueue){  LOGGER.debug("Initiating client request.");  ClientRequestImpl<T> clientRequest=new ClientRequestImpl<T>(clazz);  Iterator<Long> it=ids.iterator();  Collection<Future<Collection<T>>> results=new ArrayList<Future<Collection<T>>>();  int counter=0;  while (it.hasNext()) {    while (it.hasNext() && counter < maxRequestSize) {      clientRequest.addTagId(it.next());      counter++;    }    RequestValuesTask<T> task=new RequestValuesTask<T>(clientRequest,reportListener,requestQueue);    results.add(executor.submit(task));    clientRequest=new ClientRequestImpl<T>(clazz);    counter=0;  }  Collection<T> finalCollection=new ArrayList<T>();  for (  Future<Collection<T>> result : results) {    try {      finalCollection.addAll(result.get());    } catch (    InterruptedException e) {      LOGGER.error("InterruptedException caught while executing RequestValuesTask.",e);      throw new RuntimeException(e);    }catch (    ExecutionException e) {      LOGGER.error("ExecutionException caught while executing RequestValuesTask.",e);      throw new RuntimeException(e);    }  }  LOGGER.debug("Client request completed.");  return finalCollection;}  }
class C{  public Object postProcessAfterInitialization(Object bean,String beanName) throws BeansException {  return bean;}  }
class C{  private void debugPrint(String msg){  if (debug) {    System.out.println(toString() + ": " + msg);  }}  }
class C{  public boolean hasRemote(){  return org.tigris.subversion.svnclientadapter.utils.SVNStatusUtils.hasRemote(this);}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  private void putError(String text){  JOptionPane.showMessageDialog(this,text);}  }
class C{  @SuppressWarnings("unchecked") protected D restoreContextOnReturnedFact(D d4,D d5){  if (d5 instanceof LinkedNode) {    ((LinkedNode<D>)d5).setCallingContext(d4);  }  if (d5 instanceof JoinHandlingNode) {    ((JoinHandlingNode<D>)d5).setCallingContext(d4);  }  return d5;}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  if (contentType != null) {    uriRequest.addHeader("Content-Type",contentType);  }  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());  responseHandler.setRequestURI(uriRequest.getURI());  Future<?> request=threadPool.submit(new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler));  if (context != null) {    List<WeakReference<Future<?>>> requestList=requestMap.get(context);    if (requestList == null) {      requestList=new LinkedList<WeakReference<Future<?>>>();      requestMap.put(context,requestList);    }    requestList.add(new WeakReference<Future<?>>(request));  }  return new RequestHandle(request);}  }
class C{  public QueryString(String path){  q=null;  this.path=path;}  }
class C{  private void consumeNonExecutePrefix() throws IOException {  nextNonWhitespace(true);  pos--;  if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {    return;  }  for (int i=0; i < NON_EXECUTE_PREFIX.length; i++) {    if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {      return;    }  }  pos+=NON_EXECUTE_PREFIX.length;}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Border border=getBorder();  if (label == null) {    if (border != null) {      border.paintBorder(c,g,x,y,width,height);    }    return;  }  Rectangle grooveRect=new Rectangle(x + EDGE_SPACING,y + EDGE_SPACING,width - (EDGE_SPACING * 2),height - (EDGE_SPACING * 2));  Dimension labelDim=label.getPreferredSize();  int baseline=label.getBaseline(labelDim.width,labelDim.height);  int ascent=Math.max(0,baseline);  int descent=labelDim.height - ascent;  int diff;  Insets insets;  if (border != null) {    insets=border.getBorderInsets(c);  } else {    insets=new Insets(0,0,0,0);  }  diff=Math.max(0,ascent / 2 + TEXT_SPACING - EDGE_SPACING);  grooveRect.y+=diff;  grooveRect.height-=diff;  compLoc.y=grooveRect.y + insets.top / 2 - (ascent + descent) / 2 - 1;  int justification;  if (c.getComponentOrientation().isLeftToRight()) {    justification=LEFT;  } else {    justification=RIGHT;  }switch (justification) {case LEFT:    compLoc.x=grooveRect.x + TEXT_INSET_H + insets.left;  break;case RIGHT:compLoc.x=(grooveRect.x + grooveRect.width - (labelDim.width + TEXT_INSET_H + insets.right));break;}if (border != null) {if (grooveRect.y > compLoc.y - ascent) {Rectangle clipRect=new Rectangle();Rectangle saveClip=g.getClipBounds();clipRect.setBounds(saveClip);if (computeIntersection(clipRect,x,y,compLoc.x - 1 - x,height)) {g.setClip(clipRect);border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);}clipRect.setBounds(saveClip);if (computeIntersection(clipRect,compLoc.x + labelDim.width + 1,y,x + width - (compLoc.x + labelDim.width + 1),height)) {g.setClip(clipRect);border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);}clipRect.setBounds(saveClip);if (computeIntersection(clipRect,compLoc.x - 1,compLoc.y + ascent + descent,labelDim.width + 2,y + height - compLoc.y - ascent - descent)) {g.setClip(clipRect);border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);}g.setClip(saveClip);} else {border.paintBorder(c,g,grooveRect.x,grooveRect.y,grooveRect.width,grooveRect.height);}label.setLocation(compLoc);label.setSize(labelDim);}}  }
class C{  public void renderMenuString(Appendable writer,Map<String,Object> context,MenuStringRenderer menuStringRenderer) throws IOException {  AbstractModelAction.runSubActions(this.actions,context);  MenuRenderState.retrieve(context).updateSelectedMenuAndItem(context);  if ("simple".equals(this.type)) {    this.renderSimpleMenuString(writer,context,menuStringRenderer);  } else {    throw new IllegalArgumentException("The type " + this.getType() + " is not supported for menu with name "+ this.getName());  }}  }
class C{  private Localisation(){}  }
class C{  public static boolean instanceOf(Class<?> objectClass,Object typeObject){  Class<?> typeClass=typeObject.getClass();  return instanceOf(objectClass,typeClass);}  }
class C{  public void clear(){  parameters.clear();}  }
class C{  @Override public void put(int index,byte[] value){  System.arraycopy(value,0,datastore,((index) * sizeOfEachElement),sizeOfEachElement);}  }
class C{  public void reset(){  startTime=0L;  count=0L;  sum=0L;  minTime=Long.MAX_VALUE;  maxTime=0L;  notReliable=false;}  }
class C{  private static TransferTagImpl createTagForValue(final Object tagValue){  DataTagQualityImpl tagQuality=new DataTagQualityImpl(TagQualityStatus.PROCESS_DOWN,"Process Down");  Timestamp sourceTimestamp=new Timestamp(System.currentTimeMillis());  Timestamp daqTimestamp=new Timestamp(System.currentTimeMillis());  Timestamp serverTimestamp=new Timestamp(System.currentTimeMillis());  String descr="Test transfer tag";  String valDesc="Test val desc \n \t { \"test\" : \"1212\"}\n}";  String tagName="tag:name";  String topicName="topic:name";  TransferTagImpl transferTag=new TransferTagImpl(1234L,tagValue,valDesc,tagQuality,TagMode.TEST,sourceTimestamp,daqTimestamp,serverTimestamp,descr,tagName,topicName);  transferTag.addEquipmentIds(Arrays.asList(234L,4234L,234L));  transferTag.addSubEquipmentIds(Arrays.asList(1234L,14234L,1234L));  transferTag.addProcessIds(Arrays.asList(123L,3214L,123L));  transferTag.setValueClassName(tagValue.getClass().getName());  return transferTag;}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);  activity.invalidateOptionsMenu();}  }
class C{  private void checkEglError(String msg){  int error;  if ((error=EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {    throw new RuntimeException(msg + ": EGL error: 0x" + Integer.toHexString(error));  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public FaveRemoveGroupQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"fave.removeGroup",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public static int abs(final int x){  final int i=x >>> 31;  return (x ^ (~i + 1)) + i;}  }
class C{  public V put(K key,V value){  final int hash;  int index;  if (key == null) {    hash=0;    index=indexOfNull();  } else {    hash=key.hashCode();    index=indexOf(key,hash);  }  if (index >= 0) {    index=(index << 1) + 1;    final V old=(V)mArray[index];    mArray[index]=value;    return old;  }  index=~index;  if (mSize >= mHashes.length) {    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);    if (DEBUG)     Log.d(TAG,"put: grow from " + mHashes.length + " to "+ n);    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(n);    if (mHashes.length > 0) {      if (DEBUG)       Log.d(TAG,"put: copy 0-" + mSize + " to 0");      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);      System.arraycopy(oarray,0,mArray,0,oarray.length);    }    freeArrays(ohashes,oarray,mSize);  }  if (index < mSize) {    if (DEBUG)     Log.d(TAG,"put: move " + index + "-"+ (mSize - index)+ " to "+ (index + 1));    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);    System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1);  }  mHashes[index]=hash;  mArray[index << 1]=key;  mArray[(index << 1) + 1]=value;  mSize++;  return null;}  }
class C{  public static void overrideGeoServerClientClass(Class<?> geoServerClientClass){  GeoServerInput.geoServerClientClass=geoServerClientClass;}  }
class C{  public static DataSourceInterface createDataSource(DataSourceInterface override){  if (override != null) {    if ((dataSource == null) || override.getClass() != dataSource.getClass()) {      dataSource=override;    }  } else {    if (dataSource == null) {      dataSource=new DataSourceImpl();    }  }  return dataSource;}  }
class C{  public void destroyView() throws CanceledException {  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());  super.destroyView();}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_YOU_EXCLUDED(String value0){  return new SM_SYSTEM_MESSAGE(1300628,value0);}  }
class C{  public DefaultService(int apiPort){  this.apiPort=apiPort;}  }
class C{  public static String deleteFromCart(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(null,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  result=cartHelper.deleteFromCart(paramMap);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    return "success";  }}  }
class C{  public static <T>boolean contains(Enumeration<T> enumeration,T element){  if (enumeration != null) {    while (enumeration.hasMoreElements()) {      T candidate=enumeration.nextElement();      if (ObjectUtils.nullSafeEquals(candidate,element))       return true;    }  }  return false;}  }
class C{  public Matrix zoomOut(float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(0.7f,0.7f,x,y);  return save;}  }
class C{  protected DOMConfigurationImpl(SymbolTable symbolTable,XMLComponentManager parentSettings){  super(parentSettings);  fRecognizedFeatures=new ArrayList();  fRecognizedProperties=new ArrayList();  fFeatures=new HashMap();  fProperties=new HashMap();  final String[] recognizedFeatures={XERCES_VALIDATION,XERCES_NAMESPACES,SCHEMA,SCHEMA_FULL_CHECKING,DYNAMIC_VALIDATION,NORMALIZE_DATA,SCHEMA_ELEMENT_DEFAULT,SEND_PSVI,GENERATE_SYNTHETIC_ANNOTATIONS,VALIDATE_ANNOTATIONS,HONOUR_ALL_SCHEMALOCATIONS,USE_GRAMMAR_POOL_ONLY,DISALLOW_DOCTYPE_DECL_FEATURE,BALANCE_SYNTAX_TREES,WARN_ON_DUPLICATE_ATTDEF,PARSER_SETTINGS,NAMESPACE_GROWTH,TOLERATE_DUPLICATES};  addRecognizedFeatures(recognizedFeatures);  setFeature(XERCES_VALIDATION,false);  setFeature(SCHEMA,false);  setFeature(SCHEMA_FULL_CHECKING,false);  setFeature(DYNAMIC_VALIDATION,false);  setFeature(NORMALIZE_DATA,false);  setFeature(SCHEMA_ELEMENT_DEFAULT,false);  setFeature(XERCES_NAMESPACES,true);  setFeature(SEND_PSVI,true);  setFeature(GENERATE_SYNTHETIC_ANNOTATIONS,false);  setFeature(VALIDATE_ANNOTATIONS,false);  setFeature(HONOUR_ALL_SCHEMALOCATIONS,false);  setFeature(USE_GRAMMAR_POOL_ONLY,false);  setFeature(DISALLOW_DOCTYPE_DECL_FEATURE,false);  setFeature(BALANCE_SYNTAX_TREES,false);  setFeature(WARN_ON_DUPLICATE_ATTDEF,false);  setFeature(PARSER_SETTINGS,true);  setFeature(NAMESPACE_GROWTH,false);  setFeature(TOLERATE_DUPLICATES,false);  final String[] recognizedProperties={XML_STRING,SYMBOL_TABLE,ERROR_HANDLER,ENTITY_RESOLVER,ERROR_REPORTER,ENTITY_MANAGER,VALIDATION_MANAGER,GRAMMAR_POOL,SECURITY_MANAGER,JAXP_SCHEMA_SOURCE,JAXP_SCHEMA_LANGUAGE,SCHEMA_LOCATION,SCHEMA_NONS_LOCATION,DTD_VALIDATOR_PROPERTY,DTD_VALIDATOR_FACTORY_PROPERTY,SCHEMA_DV_FACTORY};  addRecognizedProperties(recognizedProperties);  features|=NAMESPACES;  features|=ENTITIES;  features|=COMMENTS;  features|=CDATA;  features|=SPLITCDATA;  features|=WELLFORMED;  features|=NSDECL;  if (symbolTable == null) {    symbolTable=new SymbolTable();  }  fSymbolTable=symbolTable;  fComponents=new ArrayList();  setProperty(SYMBOL_TABLE,fSymbolTable);  fErrorReporter=new XMLErrorReporter();  setProperty(ERROR_REPORTER,fErrorReporter);  addComponent(fErrorReporter);  fDatatypeValidatorFactory=DTDDVFactory.getInstance();  fXML11DatatypeFactory=DTDDVFactory.getInstance(XML11_DATATYPE_VALIDATOR_FACTORY);  fCurrentDVFactory=fDatatypeValidatorFactory;  setProperty(DTD_VALIDATOR_FACTORY_PROPERTY,fCurrentDVFactory);  XMLEntityManager manager=new XMLEntityManager();  setProperty(ENTITY_MANAGER,manager);  addComponent(manager);  fValidationManager=createValidationManager();  setProperty(VALIDATION_MANAGER,fValidationManager);  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {    XMLMessageFormatter xmft=new XMLMessageFormatter();    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);  }  if (fErrorReporter.getMessageFormatter("http://www.w3.org/TR/xml-schema-1") == null) {    MessageFormatter xmft=null;    try {      xmft=(MessageFormatter)(ObjectFactory.newInstance("mf.org.apache.xerces.impl.xs.XSMessageFormatter",ObjectFactory.findClassLoader(),true));    } catch (    Exception exception) {    }    if (xmft != null) {      fErrorReporter.putMessageFormatter("http://www.w3.org/TR/xml-schema-1",xmft);    }  }  try {    setLocale(Locale.getDefault());  } catch (  XNIException e) {  }}  }
class C{  public SimpleBooleanProperty autoStartProperty(){  return this.autoStart;}  }
class C{  public static void enableLogs(){  verbose=true;}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  public static void loadImage(final Context _context,final ImageView _imageView,final String _imageUrl,final int _placeHolderResource){  getBitmapLoader(_context,_imageUrl,_placeHolderResource).centerCrop().into(_imageView);}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  if (JSR != null) {    if ((status & VISITED) != 0) {      return;    }    status|=VISITED;    if ((status & RET) != 0) {      if (!inSameSubroutine(JSR)) {        Edge e=new Edge();        e.info=inputStackTop;        e.successor=JSR.successors.successor;        e.next=successors;        successors=e;      }    }  } else {    if (inSubroutine(id)) {      return;    }    addToSubroutine(id,nbSubroutines);  }  Edge e=successors;  while (e != null) {    if ((status & Label.JSR) == 0 || e != successors.next) {      e.successor.visitSubroutine(JSR,id,nbSubroutines);    }    e=e.next;  }}  }
class C{  public MessagesGetDialogsQuery unread(Boolean value){  return unsafeParam("unread",value);}  }
class C{  public boolean taxApplies(){  GenericValue product=getProduct();  if (product != null) {    return ProductWorker.taxApplies(product);  } else {    return true;  }}  }
class C{  public void download(String remoteFileName,File localFile,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  OutputStream outputStream=null;  try {    outputStream=new FileOutputStream(localFile,restartAt > 0);  } catch (  IOException e) {    throw new FTPDataTransferException(e);  }  try {    download(remoteFileName,outputStream,restartAt,listener);  } catch (  IllegalStateException e) {    throw e;  }catch (  IOException e) {    throw e;  }catch (  FTPIllegalReplyException e) {    throw e;  }catch (  FTPException e) {    throw e;  }catch (  FTPDataTransferException e) {    throw e;  }catch (  FTPAbortedException e) {    throw e;  } finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  public static void checkSubMatrixIndex(final AnyMatrix m,final int[] selectedRows,final int[] selectedColumns) throws MathIllegalArgumentException, NullArgumentException {  if (selectedRows == null) {    throw new NullArgumentException();  }  if (selectedColumns == null) {    throw new NullArgumentException();  }  if (selectedRows.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);  }  if (selectedColumns.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);  }  for (  final int row : selectedRows) {    checkRowIndex(m,row);  }  for (  final int column : selectedColumns) {    checkColumnIndex(m,column);  }}  }
class C{  private void startPeerSync(String peer,int port){  boolean isDone=false;  localRedisConnect();  while (!isDone) {    try {      isDone=(this.localJedis.slaveof(peer,port) != null);      sleeper.sleepQuietly(1000);    } catch (    Exception e) {      localRedisConnect();    }  }}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext context,Augmentations augs) throws XNIException {}  }
class C{  @Override public void shutdown(){  if (!this.isShutdown()) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine(_workingGroupName + " executor is commencing shutdown...");    }    this.getQueue().clear();    super.shutdown();    try {      this.awaitTermination(60,TimeUnit.SECONDS);    } catch (    InterruptedException e) {      if (_logger.isLoggable(Level.WARNING)) {        _logger.log(Level.WARNING,_workingGroupName + " interrupted while waiting for shutdown.",e);      }    }    if (this.isTerminated()) {      if (_logger.isLoggable(Level.FINE)) {        _logger.fine(_workingGroupName + " shutdown complete.");      }    } else {      if (this.isTerminating())       if (_logger.isLoggable(Level.WARNING)) {        _logger.warning(_workingGroupName + " unsafe shutdown still in progress...");      } else       if (_logger.isLoggable(Level.SEVERE)) {        _logger.severe(_workingGroupName + " shutdown failed to complete.");      }    }    _consumerObject.cleanUp();  }}  }
class C{  public Path newPath(){  return new FieldPathNode();}  }
class C{  public ClickHouseDataSource withConnectionsCleaning(int rate,TimeUnit timeUnit){  driver.scheduleConnectionsCleaning(rate,timeUnit);  return this;}  }
class C{  private static Class[] reduce0(Class[] classes,boolean keepSupers){  if (classes.length == 0) {    throw new IllegalArgumentException("cannot create constraint with no elements");  }  int i=0;  outer:   for (int j=0; j < classes.length; j++) {    Class cj=classes[j];    verify(cj);    for (int k=i; --k >= 0; ) {      Class ck=classes[k];      if (keepSupers ? ck.isAssignableFrom(cj) : cj.isAssignableFrom(ck)) {        continue outer;      }      if (keepSupers ? cj.isAssignableFrom(ck) : ck.isAssignableFrom(cj)) {        classes[k]=classes[--i];      }    }    classes[i++]=cj;  }  return (Class[])trim(classes,i);}  }
class C{  public boolean shift(double delta){  return set(getMin() + delta,getMax() + delta);}  }
class C{  @Override public int hashCode(){  return this.id.hashCode();}  }
class C{  public Iterator<E> reverseOrderIterator(){  return new BinarySearchTreeIterator<E>(this.root,false);}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_MethodHandle_info cu=(CONSTANT_MethodHandle_info)cp;  i=constant_pool[target_index].compareTo(constant_pool,cp_constant_pool[cu.target_index],cp_constant_pool);  if (i != 0)   return i;  return kind - cu.kind;}  }
class C{  public SourceSinkDefinition(SootMethodAndClass am){  this(am,null,null,null);}  }
class C{  @TargetApi(Build.VERSION_CODES.CUPCAKE) public static ActivityManager.MemoryInfo printMemoryInfo(Context context){  ActivityManager.MemoryInfo mi=getMemoryInfo(context);  if (LogUtils.getLogConfig().isEnable()) {    StringBuilder sb=new StringBuilder();    sb.append("_______  Memory :   ");    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {      sb.append("\ntotalMem        :").append(mi.totalMem);    }    sb.append("\navailMem        :").append(mi.availMem);    sb.append("\nlowMemory       :").append(mi.lowMemory);    sb.append("\nthreshold       :").append(mi.threshold);    LogUtils.i(sb.toString());  }  return mi;}  }
class C{  static boolean isExist(String libName,int version){  String file=_targetSoFile(libName,version);  File a=new File(file);  return a.exists();}  }
class C{  public void commit(){  for (  TransactionLifecycleListener l : lifecycleListeners)   l.onTxCommit(this);  if (logger.isLoggable(Level.FINE))   logger.fine("transaction " + txNum + " committed");}  }
class C{  public static int convert(String stringValue){  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {    return MISSING_VALUE;  }  Matcher matcher=COMMA_PATTERN.matcher(stringValue);  return Integer.parseInt(matcher.replaceAll(""));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REMAIN_PLAYTIME_CENTER_DISPLAY(String value0){  return new SM_SYSTEM_MESSAGE(1400280,value0);}  }
class C{  private static boolean isAncestor(String ancestorPath,String path){  if (ancestorPath.equals(path)) {    return false;  }  return FileUtil.isAncestor(ancestorPath,path,true);}  }
class C{  public void addMessages(List<? extends Message> messages){  if (SHOW_LOGS)   Logger.v(TAG,">> addMessages, lock " + messages);  mQueueLock.lock(TAG);  mPlayerMessagesQueue.addAll(messages);  mQueueLock.notify(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< addMessages, unlock " + messages);  mQueueLock.unlock(TAG);}  }
class C{  public Observable<FirebaseChildEvent> observeChildRemoved(final Query firebaseRef){  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.REMOVED));}  }
class C{  public void removeUnusedTransaction(XtnEntry xtnEntry,boolean needLock){  try {    if (needLock)     xtnEntry.lock();    if (((ConcurrentHashMap<ServerTransaction,XtnEntry>)getXtnTable()).remove(xtnEntry.m_Transaction,xtnEntry))     m_TimedXtns.remove(xtnEntry.m_Transaction);  }  finally {    if (needLock)     xtnEntry.unlock();  }}  }
class C{  public NotesGetQuery noteIds(Integer... value){  return unsafeParam("note_ids",value);}  }
class C{  public UsersGetQuery(VkApiClient client){  super(client,"users.get",Utils.buildParametrizedType(List.class,UserXtrCounters.class));}  }
class C{  public Pair<ChannelPromise,Integer> sendMessages(final List<Entry> entries){  final ChannelHandlerContext ctx=cnx.ctx();  final MutablePair<ChannelPromise,Integer> sentMessages=new MutablePair<ChannelPromise,Integer>();  final ChannelPromise writePromise=ctx.newPromise();  sentMessages.setLeft(writePromise);  if (entries.isEmpty()) {    if (log.isDebugEnabled()) {      log.debug("[{}] List of messages is empty, triggering write future immediately for consumerId {}",subscription,consumerId);    }    writePromise.setSuccess();    sentMessages.setRight(0);    return sentMessages;  }  sentMessages.setRight(updatePermitsAndPendingAcks(entries));  ctx.channel().eventLoop().execute(null);  return sentMessages;}  }
class C{  public static GenericEntity createGenericEntity(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  GenericEntity newEntity=new GenericEntity();  newEntity.init(delegator,modelEntity,fields);  return newEntity;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public void clearListeners(){  listeners.clear();}  }
class C{  public static void logVersionInfo(){  Log.i(TAG,"vendor  : " + GLES20.glGetString(GLES20.GL_VENDOR));  Log.i(TAG,"renderer: " + GLES20.glGetString(GLES20.GL_RENDERER));  Log.i(TAG,"version : " + GLES20.glGetString(GLES20.GL_VERSION));  if (false) {    int[] values=new int[1];    GLES30.glGetIntegerv(GLES30.GL_MAJOR_VERSION,values,0);    int majorVersion=values[0];    GLES30.glGetIntegerv(GLES30.GL_MINOR_VERSION,values,0);    int minorVersion=values[0];    if (GLES30.glGetError() == GLES30.GL_NO_ERROR) {      Log.i(TAG,"iversion: " + majorVersion + "."+ minorVersion);    }  }}  }
class C{  public static void createSAM(DAAParser daaParser,DAAMatchRecord matchRecord,ByteOutputBuffer buffer,byte[] queryAlphabet){  buffer.write(matchRecord.getQueryRecord().getQueryName());  buffer.writeString("\t0\t");  buffer.write(matchRecord.getSubjectName());  buffer.writeString(String.format("\t%d\t255\t",matchRecord.getSubjectBegin() + 1));  writeCigar(matchRecord,buffer);  buffer.writeString("\t*\t0\t0\t");  buffer.write(Translator.translate(matchRecord.getQuery(),queryAlphabet,matchRecord.getTranslatedQueryBegin(),matchRecord.getTranslatedQueryLen()));  buffer.writeString("\t*\t");  float bitScore=daaParser.getHeader().computeAlignmentBitScore(matchRecord.getScore());  float evalue=daaParser.getHeader().computeAlignmentExpected(matchRecord.getQuery().length,matchRecord.getScore());  int percentIdentity=Utilities.computePercentIdentity(matchRecord);  int blastFrame=computeBlastFrame(matchRecord.getFrame());  buffer.writeString(String.format("AS:i:%d\tNM:i:%d\tZL:i:%d\tZR:i:%d\tZE:f:%.1e\tZI:i:%d\tZF:i:%d\tZS:i:%d\tMD:Z:",(int)bitScore,matchRecord.getLen() - matchRecord.getIdentities(),matchRecord.getTotalSubjectLen(),matchRecord.getScore(),evalue,percentIdentity,blastFrame,matchRecord.getQueryBegin() + 1));  writeMD(matchRecord,buffer,queryAlphabet);  buffer.write((byte)'\n');}  }
class C{  static Type[] mapKeyAndValueTypes(Type context,Class<?> contextRawType){  if (context == Properties.class)   return new Type[]{String.class,String.class};  Type mapType=getSupertype(context,contextRawType,Map.class);  if (mapType instanceof ParameterizedType) {    ParameterizedType mapParameterizedType=(ParameterizedType)mapType;    return mapParameterizedType.getActualTypeArguments();  }  return new Type[]{Object.class,Object.class};}  }
class C{  private ArrayList createParameters(polyglot.ast.ProcedureDecl procedure){  ArrayList parameters=new ArrayList();  Iterator formalsIt=procedure.formals().iterator();  while (formalsIt.hasNext()) {    polyglot.ast.Formal next=(polyglot.ast.Formal)formalsIt.next();    parameters.add(Util.getSootType(next.type().type()));  }  return parameters;}  }
class C{  public void initialise(marytts.modules.synthesis.Voice aMaryVoice,String lexiconClassName){  this.maryVoice=aMaryVoice;  if (maryVoice != null) {    super.setLocale(maryVoice.getLocale());  }  if (lexiconClassName != null) {    try {      Lexicon lex=(Lexicon)Class.forName(lexiconClassName).newInstance();      setLexicon(lex);    } catch (    IllegalAccessException iae) {      throw new RuntimeException("Illegal access trying to instantiate " + lexiconClassName);    }catch (    ClassNotFoundException iae) {      throw new RuntimeException("Class not found trying to instantiate " + lexiconClassName);    }catch (    InstantiationException iae) {      throw new RuntimeException("Instantiation exception trying to instantiate " + lexiconClassName);    }  }  setRate(135f);  try {    if (aMaryVoice instanceof MbrolaVoice) {      MbrolaVoice mv=(MbrolaVoice)aMaryVoice;      float topMean=(mv.topStart() + mv.topEnd()) * 0.5f;      float baseMean=(mv.baseStart() + mv.baseEnd()) * 0.5f;      setPitch((baseMean + topMean) / 2);      setPitchRange((topMean - baseMean) / 2);    } else {      setPitch(100);      setPitchRange(30);    }  } catch (  NoClassDefFoundError err) {    setPitch(100);    setPitchRange(30);  }}  }
class C{  public GotoStmt newGotoStmt(Unit target){  return new JGotoStmt(target);}  }
class C{  public void makeCurrent(){  eglCore.makeCurrent(eGLSurface);}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  protected RealMatrix computeCovarianceMatrix(RealMatrix matrix) throws MathIllegalArgumentException {  return computeCovarianceMatrix(matrix,true);}  }
class C{  public boolean equals(Object o){  boolean result=false;  if (o != null && o instanceof SourceDataQuality) {    result=this.qualityCode == ((SourceDataQuality)o).qualityCode;    if (this.description == null) {      result=result && (((SourceDataQuality)o).description == null);    } else {      result=result && this.description.equals(((SourceDataQuality)o).description);    }  }  return result;}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public static boolean hasProvisionMethod(DeclaredType moduleType){  TypeElement moduleElement=(TypeElement)moduleType.asElement();  Preconditions.checkArgument(moduleElement.getAnnotation(Module.class) != null,String.format("not module: %s.",moduleType));  for (  Element element : moduleElement.getEnclosedElements()) {    if (element.getKind().equals(ElementKind.METHOD) && (element.getAnnotation(Provides.class) != null)) {      return true;    }  }  return false;}  }
class C{  public static Zmat au(Zmat A,Z1 u,int r1,int r2,int c1,int c2) throws JampackException {  if (r2 < r1) {    return A;  }  return au(A,u,r1,r2,c1,c2,new Z1(r2 - r1 + 1));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ArrayAccess fullCopy(){  ArrayAccess tree=(ArrayAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public boolean aggregateContains(int row,VisualItem member){  return getAggregatedRow(row,member) >= 0;}  }
class C{  public void init(Context context){  boolean isNightModel=PersistenceUtils.isNightModel(context);  AppCompatDelegate.setDefaultNightMode(isNightModel ? AppCompatDelegate.MODE_NIGHT_YES : AppCompatDelegate.MODE_NIGHT_NO);}  }
class C{  public ListIterator<E> listIterator(int index){  FastList<MithraFastList<E>> localLists=this.lists;  if (localLists.size() == 1) {    return localLists.getFirst().listIterator(index);  }  if (localLists.isEmpty()) {    return Collections.EMPTY_LIST.listIterator(index);  }  this.convertMultipleListsToFastList();  return this.lists.getFirst().listIterator(index);}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  protected void startBookKeeper() throws Exception {  zkc=MockZooKeeper.newInstance();  for (int i=0; i < numBookies; i++) {    ZkUtils.createFullPathOptimistic(zkc,"/ledgers/available/192.168.1.1:" + (5000 + i),"".getBytes(),null,null);  }  zkc.create("/ledgers/LAYOUT","1\nflat:1".getBytes(),null,null);  bkc=new MockBookKeeper(baseClientConf,zkc);}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  public boolean isEmpty(){  return findFirst() == null;}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  float lend=0.0f;  float mean;  float stddev;  float localMean;  float localStddev;  Object tval;  assert utterance.getRelation(Relation.SYLLABLE_STRUCTURE) != null;  assert utterance.getRelation(Relation.SYLLABLE) != null;  assert utterance.getRelation(Relation.TARGET) == null;  mean=utterance.getVoice().getPitch();  mean*=utterance.getVoice().getPitchShift();  stddev=utterance.getVoice().getPitchRange();  Relation target=utterance.createRelation(Relation.TARGET);  for (Item syllable=utterance.getRelation(Relation.SYLLABLE).getHead(); syllable != null; syllable=syllable.getNext()) {    if (syllable.getItemAs(Relation.SYLLABLE_STRUCTURE).hasDaughters()) {      tval=localF0Shift.findFeature(syllable);      localMean=Float.parseFloat(tval.toString());      if (localMean == 0.0) {        localMean=mean;      } else {        localMean*=mean;      }      tval=localF0Range.findFeature(syllable);      localStddev=Float.parseFloat(tval.toString());      if (localStddev == 0.0) {        localStddev=stddev;      }      Interceptor interceptor=applyLrModel(syllable);      if (isPostBreak(syllable)) {        lend=mapF0(interceptor.start,localMean,localStddev);      }      Float val=(Float)endPath.findFeature(syllable);      addTargetPoint(target,val.floatValue(),mapF0((interceptor.start + lend) / 2.0f,localMean,localStddev));      addTargetPoint(target,vowelMid(syllable),mapF0(interceptor.mid,localMean,localStddev));      lend=mapF0(interceptor.end,localMean,localStddev);      if (isPreBreak(syllable)) {        Float eval=(Float)lastDaughterEndPath.findFeature(syllable);        addTargetPoint(target,eval.floatValue(),mapF0(interceptor.end,localMean,localStddev));      }    }  }  if (utterance.getRelation(Relation.SEGMENT).getHead() != null) {    Item first=target.getHead();    if (first == null) {      addTargetPoint(target,0,mean);    } else     if (first.getFeatures().getFloat("pos") > 0) {      Item newItem=first.prependItem(null);      newItem.getFeatures().setFloat("pos",0.0f);      newItem.getFeatures().setFloat("f0",first.getFeatures().getFloat("f0"));    }    Item last=target.getTail();    Item lastSegment=utterance.getRelation(Relation.SEGMENT).getTail();    float segEnd=0.0f;    if (lastSegment != null) {      segEnd=lastSegment.getFeatures().getFloat("end");    }    if (last.getFeatures().getFloat("pos") < segEnd) {      addTargetPoint(target,segEnd,last.getFeatures().getFloat("f0"));    }  }}  }
class C{  public CollectionsObject(Activity a){  this.adapter=new CollectionAdapter(a,new ArrayList<Collection>());  this.service=CollectionService.getService();  this.collectionsPage=0;  this.loading=false;  this.over=false;}  }
class C{  private DotGraph initDotGraph(Body body){  String graphname="cfg";  if (body != null) {    graphname=body.getMethod().getSubSignature();  }  DotGraph canvas=new DotGraph(graphname);  canvas.setGraphLabel(graphname);  if (!onePage) {    canvas.setPageSize(8.5,11.0);  }  if (isBrief) {    canvas.setNodeShape(DotGraphConstants.NODE_SHAPE_CIRCLE);  } else {    canvas.setNodeShape(DotGraphConstants.NODE_SHAPE_BOX);  }  return canvas;}  }
class C{  public static boolean isEvictOnly(int mod){  return Modifiers.contains(mod,EVICT_ONLY);}  }
class C{  public NonSelfAdjointOperatorException(){  super(org.hipparchus.migration.exception.util.LocalizedFormats.NON_SELF_ADJOINT_OPERATOR);}  }
class C{  @deprecated public String toString(){  return this.string;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200981,skilltarget,num0,skillcaster,skillname);}  }
class C{  public LockableFileWriter(String fileName) throws IOException {  this(fileName,false,null);}  }
class C{  public synchronized TemporaryTopic createTemporaryTopic() throws JMSException {  ensureOpen();  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,"Creating temporary Topic");  }  return new GSTemporaryTopicImpl(m_sessionID + ":" + getRandomInt(),m_sessionID);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200830,skillcaster,skillname);}  }
class C{  public static String pad(String string,int minLength){  String result=string;  int pad=minLength - string.length();  if (pad > 0) {    result=string + pad(minLength - string.length());  } else   if (pad < 0) {    result=string.substring(0,minLength);  }  return result;}  }
class C{  private void addObservedFile(String localPath,Account account){  File file=new File(localPath);  String parentPath=file.getParent();  FolderObserver observer=mFolderObserversMap.get(parentPath);  if (observer == null) {    observer=new FolderObserver(parentPath,account,getApplicationContext());    mFolderObserversMap.put(parentPath,observer);    Log_OC.d(TAG,"Observer added for parent folder " + parentPath + "/");  }  observer.startWatching(file.getName());  Log_OC.d(TAG,"Added " + localPath + " to list of observed children");}  }
class C{  public int compare(IEntryPacket e1,IEntryPacket e2){  if (e1 == null) {    if (e2 == null)     return 0;    return -1;  }  if (e2 == null)   return 1;  int rc=0;  JoinedEntry j1=(JoinedEntry)e1;  JoinedEntry j2=(JoinedEntry)e2;  for (int i=0; i < groupColumns.size(); i++) {    SelectColumn groupCol=groupColumns.get(i);    e1=j1.getEntry(groupCol.getColumnTableData().getTableIndex());    e2=j2.getEntry(groupCol.getColumnTableData().getTableIndex());    Object obj1=(Comparable)groupCol.getFieldValue(e1);    Object obj2=(Comparable)groupCol.getFieldValue(e2);    if (obj1 == null && obj2 == null)     rc=0; else     if (obj1 == null && obj2 != null)     rc=-1; else     if (obj1 != null && obj2 == null)     rc=1; else     rc=((Comparable)obj1).compareTo(obj2);    if (rc != 0)     return rc;  }  return rc;}  }
class C{  public byte accumulate(byte other){  byte oldv=value;  value|=other;  return oldv;}  }
class C{  @RequestMapping(value="/{id}",method=GET,produces=APPLICATION_JSON_VALUE) public ResponseEntity<BookDTO> findById(@PathVariable Integer id) throws URISyntaxException {  log.debug("Find by id Book : {}",id);  return Optional.ofNullable(bookDTOService.findOne(id)).map(null).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));}  }
class C{  public final void connect(){  for (  JmsSender jmsSender : jmsSenders) {    jmsSender.connect();  }}  }
class C{  public static void println(Object... msg){  String line=joiner.join(msg);  trace.println(line);}  }
class C{  static public String formatMillis(long millis){  boolean isMinutes=false;  double instTime=millis;  String suffix="milliseconds";  if (instTime > (60 * 1000)) {    suffix="minutes";    instTime=instTime / (60 * 1000);    isMinutes=true;  } else   if (instTime > 1000) {    suffix="seconds";    instTime=instTime / 1000;  }  if (!isMinutes) {    NumberFormat nf=NumberFormat.getInstance();    nf.setMaximumFractionDigits(2);    return nf.format(instTime) + " " + suffix;  }  int minutes=(int)instTime;  double seconds=(instTime - minutes) * 60;  NumberFormat nf=NumberFormat.getInstance();  nf.setMaximumFractionDigits(2);  nf.setMinimumIntegerDigits(2);  return minutes + ":" + nf.format(seconds)+ " "+ suffix;}  }
class C{  public Calculable(){}  }
class C{  public LinearLayoutManager(Context context){  this(context,VERTICAL,false);}  }
class C{  @CalledByNative InfoBar showConfirmInfoBar(WindowAndroid windowAndroid,int enumeratedIconId,Bitmap iconBitmap,String message,String linkText,String buttonOk,String buttonCancel,int[] contentSettings){  int drawableId=ResourceId.mapToDrawableId(enumeratedIconId);  ConfirmInfoBar infoBar=new ConfirmInfoBar(null,drawableId,iconBitmap,message,linkText,buttonOk,buttonCancel);  infoBar.setContentSettings(windowAndroid,contentSettings);  return infoBar;}  }
class C{  public PatternN and(Observable<? extends Object> other){  if (other == null) {    throw new NullPointerException();  }  return new PatternN(observables,other);}  }
class C{  public MultifieldConfig(ConfigurationEntry entry,DialogFieldMap dialogFieldMap){  String[] types=entry.getType().split("#");  String[] labels=entry.getLabel().split("#");  assertCorrectLength(types,labels,entry);  this.fieldValue=entry.getValue();  this.fieldIndex=parseFieldIndex(types[1]);  this.fieldType=dialogFieldMap.getField(types[2]);  this.fieldLabel=labels[1];  this.multifieldLabel=labels[0];}  }
class C{  public static void splitFilePath(String sourcePath,List<String> partitionsFiles,String separator){  if (StringUtils.isNotEmpty(sourcePath)) {    String[] files=sourcePath.split(separator);    for (    String file : files) {      partitionsFiles.add(file);    }  }}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new Opt(),1);  setChild(new List(),2);  setChild(new List(),3);}  }
class C{  public boolean isSynchronizing(Account account,String remotePath){  if (account == null || remotePath == null)   return false;  return (mPendingOperations.contains(account.name,remotePath));}  }
class C{  Delta newDropFacade(Storage facade){  Delta storageDelta=Deltas.mapBuilder().put(StorageState.DROPPED.getMarkerAttribute().key(),now()).build();  MapDeltaBuilder storageMapDelta=Deltas.mapBuilder();  for (  Storage storage : facade.getPrimaryAndMirrors()) {    storageMapDelta.update(storage.getUuidString(),storageDelta);  }  return Deltas.mapBuilder().update(STORAGE.key(),storageMapDelta.build()).build();}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0)   throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  while (iLen > 0 && in[iOff + iLen - 1] == '=')   iLen--;  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen)     out[op++]=(byte)o1;    if (op < oLen)     out[op++]=(byte)o2;  }  return out;}  }
class C{  @Transactional @RequestMapping(method=RequestMethod.DELETE,value="/api/textunits/{textUnitId}") public void deleteTMTextUnitCurrentVariant(@PathVariable Long textUnitId){  logger.debug("Delete TextUnit, id: {}",textUnitId);  TMTextUnitCurrentVariant tmtucv=tmTextUnitCurrentVariantRepository.findOne(textUnitId);  if (tmtucv == null) {    logger.debug("Already removed, do nothing");  } else {    logger.debug("Remove tmTextUnitCurrentVariantRepository: {}",tmtucv.getId());    tmTextUnitCurrentVariantRepository.delete(tmtucv.getId());  }}  }
class C{  public StandardDocumentDistroComparator(){  sGraph=new GraphSimilarity();  sHistogram=new GraphSimilarity();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysResist_A_TO_SELF(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200789,skilltarget,skillcaster,skillname);}  }
class C{  public void nullifyItem(String sItem){  NGramHistogram.put(sItem,0.0);}  }
class C{  public int compareTo(Issue otherIssue){  return this.getKey().compareTo(otherIssue.getKey());}  }
class C{  public CannotNestException(){  super();}  }
class C{  public Cal add(int field,int amount){switch (field) {case Calendar.YEAR:    dateTimeUnit=getCalendar().plusYears(dateTimeUnit,amount);case Calendar.MONTH:  dateTimeUnit=getCalendar().plusMonths(dateTimeUnit,amount);case Calendar.DAY_OF_MONTH:case Calendar.DAY_OF_YEAR:dateTimeUnit=getCalendar().plusDays(dateTimeUnit,amount);break;default :throw new UnsupportedOperationException();}return this;}  }
class C{  public boolean isBcontains(int taxon){  return B.get(taxon);}  }
class C{  private static String parseRefSeqId(String aLine){  int pos=aLine.indexOf(IdParser.REFSEQ_TAG);  if (pos != -1) {    int start=pos + IdParser.REFSEQ_TAG.length();    int end=start;    while (end < aLine.length() && (Character.isLetterOrDigit(aLine.charAt(end)) || aLine.charAt(end) == '_'))     end++;    if (end > start)     return aLine.substring(start,end);  }  return null;}  }
class C{  private void validateRoleType(RoleTypeImpl roleType){  if (!ValidateGlobalRules.validateHasSingleIncomingHasRoleEdge(roleType))   errorsFound.add(ErrorMessage.VALIDATION_ROLE_TYPE.getMessage(roleType.getId()));}  }
class C{  public GatheringCursor queryGatheringItem(long id){  return mHelper.queryGatheringItem(id);}  }
class C{  @NotNull public IdeaSourceDirectoryStub addTestDir(@NotNull String path){  File dir=myFileStructure.createProjectDir(path);  IdeaSourceDirectoryStub testDir=new IdeaSourceDirectoryStub(dir);  myTestDirs.add(testDir);  return testDir;}  }
class C{  public static boolean isPrimitiveOrWrapper(Class clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isPrimitive() || isPrimitiveWrapper(clazz));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MISSION_SYSTEMMSG_ACQUIRE(String value0){  return new SM_SYSTEM_MESSAGE(1300930,value0);}  }
class C{  private static Path doPath(String s){  Path path=new Path();  PathParser.parse(s,path);  return path;}  }
class C{  public int hashCode(){  int hash=37;  hash+=37 * hash + Float.floatToIntBits(x);  hash+=37 * hash + Float.floatToIntBits(y);  hash+=37 * hash + Float.floatToIntBits(z);  return hash;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_SKILL_POINT_UP(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1330005,value0,value1);}  }
class C{  public void add(String feats){  if (feats == null)   return;  String key, value;  int idx;  for (  String feat : Splitter.splitPipes(feats)) {    idx=feat.indexOf(DELIM_KEY_VALUE);    if (idx > 0) {      key=feat.substring(0,idx);      value=feat.substring(idx + 1);      put(key,value);    }  }}  }
class C{  @Override public void createApplication(Application.Name applicationName){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_OBJECT_DELETE_EXPIRE_TIME(int nameId){  return new SM_SYSTEM_MESSAGE(1401261,calculateNameId(nameId));}  }
class C{  public short readShort() throws IOException {  return dis.readShort();}  }
class C{  static void changeViewVisibilityVisible(View view){  if (view != null && view.getVisibility() == View.GONE)   view.setVisibility(View.VISIBLE);}  }
class C{  public Local newLocal(String name,Type t){  return new JimpleLocal(name,t);}  }
class C{  public void onMove(){  notifyAIOnMove();  updateZone();}  }
class C{  public static <T,D extends Number>D addAndGet(GigaSpace gigaSpace,IdQuery<T> idQuery,String path,D delta,long timeout,TimeUnit timeUnit){  return addAndGet(gigaSpace,idQuery,path,delta,ChangeModifiers.NONE,timeout,timeUnit);}  }
class C{  public int compare(Object o1,Object o2){  Tuple t1=(Tuple)o1, t2=(Tuple)o2;  int c=0;  if (m_col == -1) {    if (m_type == int.class || m_type == byte.class) {      c=((LiteralComparator)m_cmp).compare(t1.getInt(m_field),t2.getInt(m_field));    } else     if (m_type == double.class) {      c=((LiteralComparator)m_cmp).compare(t1.getDouble(m_field),t2.getDouble(m_field));    } else     if (m_type == long.class) {      c=((LiteralComparator)m_cmp).compare(t1.getLong(m_field),t2.getLong(m_field));    } else     if (m_type == float.class) {      c=((LiteralComparator)m_cmp).compare(t1.getFloat(m_field),t2.getFloat(m_field));    } else     if (m_type == boolean.class) {      c=((LiteralComparator)m_cmp).compare(t1.getBoolean(m_field),t2.getBoolean(m_field));    } else     if (!m_type.isPrimitive()) {      c=m_cmp.compare(t1.get(m_field),t2.get(m_field));    } else {      throw new IllegalStateException("Unsupported type: " + m_type.getName());    }  } else {    if (m_type == int.class || m_type == byte.class) {      c=((LiteralComparator)m_cmp).compare(t1.getInt(m_col),t2.getInt(m_col));    } else     if (m_type == double.class) {      c=((LiteralComparator)m_cmp).compare(t1.getDouble(m_col),t2.getDouble(m_col));    } else     if (m_type == long.class) {      c=((LiteralComparator)m_cmp).compare(t1.getLong(m_col),t2.getLong(m_col));    } else     if (m_type == float.class) {      c=((LiteralComparator)m_cmp).compare(t1.getFloat(m_col),t2.getFloat(m_col));    } else     if (m_type == boolean.class) {      c=((LiteralComparator)m_cmp).compare(t1.getBoolean(m_col),t2.getBoolean(m_col));    } else     if (!m_type.isPrimitive()) {      c=m_cmp.compare(t1.get(m_col),t2.get(m_col));    } else {      throw new IllegalStateException("Unsupported type: " + m_type.getName());    }  }  return m_rev * c;}  }
class C{  public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  @Override protected boolean checkList(String currentVal,String tokenValue){  if (currentVal == null || tokenValue == null) {    throw new NullPointerException("Received null argument");  }  if (!currentVal.startsWith("INLIST") && !currentVal.startsWith("!INLIST")) {    throw new IllegalArgumentException("currentVal does not start with INLIST or !INLIST");  }  boolean negation=currentVal.startsWith("!");  String listName=currentVal.substring(currentVal.indexOf(":") + 1);  Object listObj=listMap.get(listName);  if (listObj == null)   return false;  boolean contains;  if (listObj instanceof Set) {    Set set=(Set)listObj;    contains=set.contains(tokenValue);  } else   if (listObj instanceof FSTLookup) {    FSTLookup fst=(FSTLookup)listObj;    contains=fst.lookup(tokenValue).length > 0;  } else {    throw new IllegalArgumentException("Unknown list representation: " + listObj);  }  return !(contains && negation || !contains && !negation);}  }
class C{  private int dip2px(float dip){  float v=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,getResources().getDisplayMetrics());  return (int)(v + 0.5f);}  }
class C{  @Subscribe public void onEvent(InternalExceptionEvent event){  event.getE().printStackTrace();  Snackbar.make(findViewById(R.id.root),getString(R.string.toast_internal_error),Snackbar.LENGTH_LONG).show();}  }
class C{  public void commit() throws JMSException {  ensureOpen();  ensureTX();  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("GSSessionImpl.commit(): Committing JMS transaction: " + _tx);  }  try {    sendMessages(this.sentMessages,_tx);    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("GSSessionImpl.commit(): Committing local transaction: " + _tx);    }    commitLocalTransaction();    renewTransaction();  } catch (  JMSException mfE) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"JMSException during GSSessionImpl.commit(): ",mfE);      _logger.log(Level.SEVERE,"Rolling back transaction: " + _tx);    }    try {      rollback();    } catch (    JMSException e) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,"Failed to roll back transaction: " + _tx,e);      }    }    TransactionRolledBackException tE=new TransactionRolledBackException("JMSException during GSSessionImpl.commit()");    tE.setLinkedException(mfE);    throw tE;  }catch (  TransactionException te) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"TransactionException during GSSessionImpl.commit(): ",te);      _logger.log(Level.SEVERE,"Rolling back transaction: " + _tx);    }    try {      rollback();    } catch (    JMSException e) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,"Failed to roll back transaction: " + _tx,e);      }    }    TransactionRolledBackException e=new TransactionRolledBackException("TransactionException during GSSessionImpl.commit()");    e.setLinkedException(te);    throw e;  }catch (  RemoteException re) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"RemoteException during GSSessionImpl.commit(): ",re);      _logger.log(Level.SEVERE,"Rolling back transaction: " + _tx);    }    try {      rollback();    } catch (    JMSException e) {    }    TransactionRolledBackException e=new TransactionRolledBackException("RemoteException during GSSessionImpl.commit()");    e.setLinkedException(re);    throw e;  }catch (  CommitFailedException cfe) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Internal error during GSSessionImpl.commit(): ",cfe.orig);      _logger.log(Level.SEVERE,"Rolling back transaction: " + _tx);    }    try {      rollback();    } catch (    JMSException e) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,"Failed to roll back transaction: " + _tx,e);      }    }    TransactionRolledBackException e=new TransactionRolledBackException("Failed to commit transaction:" + _tx + "\nThe transaction was rolled back.");    e.setLinkedException(cfe.orig);    throw e;  }catch (  TransactionCreateException tce) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Failed to renew transaction after commit: ",tce.orig);      _logger.log(Level.SEVERE,"Rolling back transaction: " + _tx);    }    JMSException e=new JMSException("Failed to renew transaction after commit");    e.setLinkedException(tce.orig);    throw e;  } finally {    sentMessages.clear();    unackedMessages.clear();  }}  }
class C{  public int memberOf(){  return theMemberOf;}  }
class C{  protected UserDetails createBasicUser(String username,String givenName,String surname,String commonName){  logger.info("Creating user: {}",username);  String randomPassword=RandomStringUtils.randomAlphanumeric(15);  User userWithRole=userService.createUserWithRole(username,randomPassword,Role.USER,givenName,surname,commonName);  logger.debug("Manually setting created by user to system user because at this point, there isn't an authenticated user context");  userService.updateCreatedByUserToSystemUser(userWithRole);  return new UserDetailsImpl(userWithRole);}  }
class C{  public boolean isGridDashedLineEnabled(){  return mGridDashPathEffect != null;}  }
class C{  protected BoardGetTopicsQueryWithExtended groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private static void defineEntity(String name,char value){  if (_byName.get(name) == null) {    _byName.put(name,new Integer(value));    _byChar.put(new Integer(value),name);  }}  }
class C{  public void populateExpression(String wellKnownName){  if (wellKnownName != null) {    int startSpeedOpenBracket=wellKnownName.indexOf("(");    int endSpeedCloseBracket=wellKnownName.indexOf(")");    if ((startSpeedOpenBracket < 0) || (endSpeedCloseBracket < 0)) {      return;    }    String windSpeed=wellKnownName.substring(startSpeedOpenBracket + 1,endSpeedCloseBracket);    int startUnitsOpenBracket=wellKnownName.indexOf("[");    int endUnitsOpenBracket=wellKnownName.indexOf("]");    if ((startUnitsOpenBracket < 0) || (endUnitsOpenBracket < 0)) {      return;    }    String windSpeedUnits=wellKnownName.substring(startUnitsOpenBracket + 1,endUnitsOpenBracket);    Expression windSpeedExpression=null;    if (AttributeUtils.isAttribute(windSpeed)) {      String propertyName=AttributeUtils.extract(windSpeed);      windSpeedExpression=getFilterFactory().property(propertyName);      DataSourceInterface dataSource=DataSourceFactory.getDataSource();      dataSource.addField(new DataSourceField(propertyName,Double.class));    } else {      windSpeedExpression=getFilterFactory().literal(windSpeed);    }    boolean isNorthernHemisphere=!wellKnownName.endsWith(HEMISPHERE_S);    fieldConfigVisitor.populateField(FieldIdEnum.WINDBARB_WINDSPEED,windSpeedExpression);    fieldConfigVisitor.populateBooleanField(FieldIdEnum.WINDBARB_NORTHERN_HEMISPHERE,isNorthernHemisphere);    fieldConfigVisitor.populateComboBoxField(FieldIdEnum.WINDBARB_WINDSPEED_UNITS,windSpeedUnits);  }}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public int EOF_sym(){  return 0;}  }
class C{  private boolean isTestAnnotated(SpringFixture fixture){  return fixture != null;}  }
class C{  public boolean canFindAll(){  return true;}  }
class C{  void recordTabRestoreResult(boolean succeeded,long time,long perceivedTime,int errorCode){  if (succeeded) {    RecordHistogram.recordEnumeratedHistogram("Tab.RestoreResult",TAB_RESTORE_RESULT_SUCCESS,TAB_RESTORE_RESULT_COUNT);    RecordHistogram.recordCountHistogram("Tab.RestoreTime",(int)time);    RecordHistogram.recordCountHistogram("Tab.PerceivedRestoreTime",(int)perceivedTime);  } else {switch (errorCode) {case NetError.ERR_INTERNET_DISCONNECTED:case NetError.ERR_NAME_RESOLUTION_FAILED:case NetError.ERR_DNS_TIMED_OUT:      RecordHistogram.recordEnumeratedHistogram("Tab.RestoreResult",TAB_RESTORE_RESULT_FAILURE_NETWORK_CONNECTIVITY,TAB_RESTORE_RESULT_COUNT);    break;default :  RecordHistogram.recordEnumeratedHistogram("Tab.RestoreResult",TAB_RESTORE_RESULT_FAILURE_OTHER,TAB_RESTORE_RESULT_COUNT);}}}  }
class C{  public ConstantRange constantRange(String fldName){  ConstantRange cr=null;  for (  Term t : terms) {    Constant c=t.oppositeConstant(fldName);    if (c != null) {      Operator op=t.operator(fldName);      if (op == OP_GT)       cr=cr == null ? ConstantRange.newInstance(c,false,null,false) : cr.applyLow(c,false); else       if (op == OP_GTE)       cr=cr == null ? ConstantRange.newInstance(c,true,null,false) : cr.applyLow(c,true); else       if (op == OP_EQ)       cr=cr == null ? ConstantRange.newInstance(c) : cr.applyConstant(c); else       if (op == OP_LTE)       cr=cr == null ? ConstantRange.newInstance(null,false,c,true) : cr.applyHigh(c,true); else       if (op == OP_LT)       cr=cr == null ? ConstantRange.newInstance(null,false,c,false) : cr.applyHigh(c,false);    }  }  if (cr != null && cr.isValid() && (cr.hasLowerBound() || cr.hasUpperBound()))   return cr;  return null;}  }
class C{  public StatusCode withoutOverflow(){  return new StatusCode(value & ~0x480);}  }
class C{  public boolean addAll(final List<T> collection){  final boolean added=this.data.addAll(collection);  this.notifyItemRangeInserted(0,data.size() + 1);  return added;}  }
class C{  public static void createAircraft(AirMapAircraft aircraft,AirMapCallback<AirMapAircraft> listener){  String url=String.format(pilotAircraftUrl,AirMap.getUserId());  AirMap.getClient().post(url,aircraft.getAsParamsPost(),new GenericOkHttpCallback(listener,AirMapAircraft.class));}  }
class C{  public static void transform(File srcFile,File destFile,File stylesheetFile,String outputFormat) throws IOException, FOPException {  StreamSource src=new StreamSource(srcFile);  StreamSource stylesheet=stylesheetFile == null ? null : new StreamSource(stylesheetFile);  BufferedOutputStream dest=new BufferedOutputStream(new FileOutputStream(destFile));  Fop fop=createFopInstance(dest,outputFormat);  if (fop.getUserAgent().getBaseURL() == null) {    String baseURL=null;    try {      File parentFile=new File(srcFile.getAbsolutePath()).getParentFile();      baseURL=parentFile.toURI().toURL().toExternalForm();    } catch (    Exception e) {      baseURL="";    }    fop.getUserAgent().setBaseURL(baseURL);  }  transform(src,stylesheet,fop);  dest.close();}  }
class C{  private void remove(String world,PermissionHolder holder,String permission){  try {    if (world != null && !world.equals("")) {      holder.unsetPermission(permission,server,world);    } else {      holder.unsetPermission(permission,server);    }  } catch (  ObjectLacksException ignored) {  }  save(holder);}  }
class C{  public static void main(String[] args){  System.out.println("20 Jacobsthal numbers (starting with index 10):\n" + new Jacobsthal(10,20).stream().collect(Collectors.toList()));}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapTraffic && ((AirMapTraffic)o).getId().equals(getId());}  }
class C{  public LeadsStartQuery start(int leadId,String secret){  return new LeadsStartQuery(getClient(),leadId,secret);}  }
class C{  public static void expandNumber(String numberString,WordRelation wordRelation,Item tokenItem){  int numDigits=numberString.length();  if (numDigits == 0) {  } else   if (numDigits == 1) {    expandDigits(numberString,wordRelation,tokenItem);  } else   if (numDigits == 2) {    expand2DigitNumber(numberString,wordRelation,tokenItem);  } else   if (numDigits == 3) {    expand3DigitNumber(numberString,wordRelation,tokenItem);  } else   if (numDigits < 7) {    expandBelow7DigitNumber(numberString,wordRelation,tokenItem);  } else   if (numDigits < 10) {    expandBelow10DigitNumber(numberString,wordRelation,tokenItem);  } else   if (numDigits < 13) {    expandBelow13DigitNumber(numberString,wordRelation,tokenItem);  } else {    expandDigits(numberString,wordRelation,tokenItem);  }}  }
class C{  public boolean isGenericURI(){  return (m_host != null);}  }
class C{  private void createNotification(int notificationId,int mediaType,String url){  int notificationContentTextId=0;  int notificationIconId=0;  if (mediaType == MEDIATYPE_AUDIO_AND_VIDEO) {    notificationContentTextId=R.string.video_audio_call_notification_text_2;    notificationIconId=R.drawable.webrtc_video;  } else   if (mediaType == MEDIATYPE_VIDEO_ONLY) {    notificationContentTextId=R.string.video_call_notification_text_2;    notificationIconId=R.drawable.webrtc_video;  } else   if (mediaType == MEDIATYPE_AUDIO_ONLY) {    notificationContentTextId=R.string.audio_call_notification_text_2;    notificationIconId=R.drawable.webrtc_audio;  }  NotificationCompat.Builder builder=new NotificationCompat.Builder(mContext).setAutoCancel(false).setOngoing(true).setContentTitle(mContext.getString(R.string.app_name)).setSmallIcon(notificationIconId).setLocalOnly(true);  StringBuilder contentText=new StringBuilder(mContext.getResources().getString(notificationContentTextId)).append('.');  Intent tabIntent=Tab.createBringTabToFrontIntent(notificationId);  if (tabIntent != null) {    PendingIntent contentIntent=PendingIntent.getActivity(mContext,notificationId,tabIntent,0);    builder.setContentIntent(contentIntent);    contentText.append(mContext.getResources().getString(R.string.media_notification_link_text,url));  } else {    contentText.append(" ").append(url);  }  builder.setContentText(contentText);  Notification notification=new NotificationCompat.BigTextStyle(builder).bigText(contentText).build();  mNotificationManager.notify(NOTIFICATION_NAMESPACE,notificationId,notification);  mNotifications.put(notificationId,mediaType);  updateSharedPreferencesEntry(notificationId,false);}  }
class C{  public synchronized ChangeReport onDataTagRemove(final DataTagRemove dataTagRemoveChange){  log.debug("Entering onDataTagRemove: ");  ChangeReport changeReport=new ChangeReport(dataTagRemoveChange);  Long equipmentId=dataTagRemoveChange.getEquipmentId();  Map<Long,SourceDataTag> sourceDataTags=getSourceDataTags(equipmentId);  if (sourceDataTags == null) {    changeReport.appendError("Equipment does not exist: " + equipmentId);    return changeReport;  }  log.debug("onDataTagRemove - removing " + dataTagRemoveChange.getDataTagId());  SourceDataTag sourceDataTag=sourceDataTags.get(dataTagRemoveChange.getDataTagId());  if (sourceDataTag != null) {    log.debug("onDataTagRemove - Core removed data tag with id " + dataTagRemoveChange.getDataTagId() + " successfully from equipment "+ equipmentId);    changeReport.appendInfo("Core removed data tag with id " + dataTagRemoveChange.getDataTagId() + " successfully from equipment "+ equipmentId);    List<ICoreDataTagChanger> coreChangers=coreDataTagChangers.get(equipmentId);    if (coreChangers != null) {      for (      ICoreDataTagChanger dataTagChanger : coreChangers) {        dataTagChanger.onRemoveDataTag(sourceDataTag,changeReport);      }    }    IDataTagChanger dataTagChanger=dataTagChangers.get(equipmentId);    if (dataTagChanger != null) {      dataTagChanger.onRemoveDataTag(sourceDataTag,changeReport);    } else {      changeReport.appendError("It was not possible to apply the changes" + "to the implementation part. No data tag changer was found.");      changeReport.setState(CHANGE_STATE.REBOOT);    }    sourceDataTags.remove(dataTagRemoveChange.getDataTagId());  } else {    log.debug("onDataTagRemove - The data tag with id " + dataTagRemoveChange.getDataTagId() + " to remove was not found"+ " in equipment with id "+ equipmentId);    changeReport.appendWarn("The data tag with id " + dataTagRemoveChange.getDataTagId() + " to remove was not found"+ " in equipment with id "+ equipmentId);    changeReport.setState(CHANGE_STATE.SUCCESS);  }  log.debug("Exiting onDataTagRemove: ");  return changeReport;}  }
class C{  public void drawChart(Graphics2D gc){  final SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  colorTable=getChartColors().getHeatMapTable();  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int scaleWidth=30;  int x1=getWidth() - rightMargin - scaleWidth;  if (x0 >= x1)   return;  if (inUpdateCoordinates) {    gc.setFont(getFont("Default"));    gc.setColor(Color.LIGHT_GRAY);    gc.drawString("Computing z-scores...",x0,y1 + 20);    viewer.getScrollPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    return;  } else {    viewer.getScrollPane().setCursor(Cursor.getDefaultCursor());  }  final int numberOfSeries=(seriesNames == null ? 0 : seriesNames.length);  final int numberOfClasses=(classNames == null ? 0 : classNames.length);  if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getSeriesList().isDoClustering())   y1+=topTreeSpace;  if (sgc == null)   drawScaleBar(gc,x1,scaleWidth,y1,y0 - y1);  if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getClassesList().isDoClustering()) {    x1-=rightTreeSpace;    int height=(int)Math.round((y0 - y1) / (numberOfClasses + 1.0) * numberOfClasses);    int yStart=y0 + ((y1 - y0) - height) / 2;    final Rectangle rect=new Rectangle(x1,yStart,rightTreeSpace,height);    classesClusteringTree.paint(gc,rect);  }  if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getSeriesList().isDoClustering()) {    int width=(int)((x1 - x0) / (numberOfSeries + 1.0) * numberOfSeries);    int xStart=x0 + ((x1 - x0) - width) / 2;    final Rectangle rect=new Rectangle(xStart,y1 - topTreeSpace,width,topTreeSpace);    seriesClusteringTree.paint(gc,rect);  }  double xStep=(x1 - x0) / (double)numberOfSeries;  double yStep=(y0 - y1) / (double)(numberOfClasses);  double maxValue=getChartData().getRange().get2().doubleValue();  double inverseMaxValueLog=0;  if (scalingType == ChartViewer.ScalingType.LOG && maxValue > 0) {    maxValue=Math.log(maxValue);    if (maxValue != 0)     inverseMaxValueLog=1 / maxValue;  } else   if (scalingType == ChartViewer.ScalingType.SQRT && maxValue > 0) {    maxValue=Math.sqrt(maxValue);  } else   if (scalingType == ChartViewer.ScalingType.PERCENT) {    maxValue=100;  }  if (numberOfClasses > 0 && numberOfSeries > 0) {    int d=0;    for (    String series : seriesNames) {      double xLabel=x0 + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      String label=seriesLabelGetter.getLabel(series);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelectedSeries(series)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null) {        sgc.setCurrentItem(new String[]{label,null});        drawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle);        sgc.clearCurrentItem();      }      int c=numberOfClasses - 1;      for (      String className : classNames) {        final Color color;        if (scalingType == ChartViewer.ScalingType.PERCENT) {          double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);          double value;          if (total == 0)           value=0; else           value=100 * getChartData().getValueAsDouble(series,className) / total;          color=colorTable.getColor((int)(1000 * value),(int)(1000 * maxValue));        } else         if (scalingType == ChartViewer.ScalingType.LOG) {          double value=getChartData().getValueAsDouble(series,className);          color=colorTable.getColorLogScale((int)value,inverseMaxValueLog);        } else         if (scalingType == ChartViewer.ScalingType.SQRT) {          double value=Math.sqrt(getChartData().getValueAsDouble(series,className));          color=colorTable.getColor((int)value,(int)maxValue);        } else         if (scalingType == ChartViewer.ScalingType.ZSCORE) {          double value=Math.max(-zScoreCutoff,Math.min(zScoreCutoff,zScores.get(series,className)));          color=colorTable.getColor((int)(value + zScoreCutoff),(int)(2 * zScoreCutoff));        } else {          double value=getChartData().getValueAsDouble(series,className);          color=colorTable.getColor((int)value,(int)maxValue);        }        gc.setColor(color);        int[] rect=new int[]{(int)Math.round(x0 + d * xStep),(int)Math.round(y0 - (c + 1) * yStep),(int)Math.round(xStep),(int)Math.round(yStep)};        if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});        if (isGapBetweenBars() && rect[2] > 2 && rect[3] > 2) {          gc.fillRect(rect[0] + 1,rect[1] + 1,rect[2] - 2,rect[3] - 2);        } else {          gc.fillRect(rect[0],rect[1],rect[2] + 1,rect[3] + 1);        }        if (sgc != null)         sgc.clearCurrentItem();        boolean isSelected=getChartData().getChartSelection().isSelectedSeries(series) || getChartData().getChartSelection().isSelectedClass(className);        if (isSelected) {          gc.setStroke(HEAVY_STROKE);          gc.setColor(ProgramProperties.SELECTION_COLOR);          gc.drawRect(rect[0],rect[1],rect[2],rect[3]);          gc.setStroke(NORMAL_STROKE);        }        if (showValues || isSelected) {          String aLabel;          if (scalingType == ChartViewer.ScalingType.ZSCORE)           aLabel=String.format("%.2f",zScores.get(series,className)); else           aLabel="" + (int)getChartData().getValueAsDouble(series,className);          valuesList.add(new DrawableValue(aLabel,rect[0] + rect[2] / 2,rect[1] + rect[3] / 2,isSelected));        }        c--;      }      d++;    }  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,true,true);    valuesList.clear();  }  gc.setColor(Color.WHITE);}  }
class C{  private void recodeNaNs(IntDoublePair[] ranks,double value){  for (int i=0; i < ranks.length; i++) {    if (Double.isNaN(ranks[i].getValue())) {      ranks[i]=new IntDoublePair(value,ranks[i].getPosition());    }  }}  }
class C{  public LocalVariableTypeTable_attribute findLocalVariableTypeTable(){  int i;  for (i=0; i < attributes_count; i++) {    if (attributes[i] instanceof LocalVariableTypeTable_attribute)     return (LocalVariableTypeTable_attribute)(attributes[i]);  }  return null;}  }
class C{  public static int rgb(String hex){  int color=(int)Long.parseLong(hex.replace("#",""),16);  int r=(color >> 16) & 0xFF;  int g=(color >> 8) & 0xFF;  int b=(color >> 0) & 0xFF;  return Color.rgb(r,g,b);}  }
class C{  public void delete(int slot){  currentBuff.lockFlushing();  try {    for (int i=slot + 1; i < getNumRecords(); i++)     copyRecordWithoutLogging(i,i - 1);    setNumRecordsWithoutLogging(getNumRecords() - 1);  }  finally {    currentBuff.unlockFlushing();  }}  }
class C{  TypeVariable typeVariable(Local local){  TypeVariable result=typeVariableMap.get(local);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariable(id,this);    typeVariableList.set(id,result);    typeVariableMap.put(local,result);    if (DEBUG) {      G.v().out.println("[LOCAL VARIABLE \"" + local + "\" -> "+ id+ "]");    }  }  return result;}  }
class C{  public static void initManager(Context context){  if (mInstance == null) {    mInstance=new AssetsDatabaseManager(context);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECT_WHISPER_FROM_LOW_LEVEL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400368,value0,value1);}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public boolean canGet(String field,Class type){  Column c=getColumn(field);  return (c == null ? false : c.canGet(type));}  }
class C{  public void onSearchResultsLoaded(boolean wasPrefetch){  mPanelMetrics.onSearchResultsLoaded(wasPrefetch);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static Quaternion slerp1(Quaternion q1,Quaternion q2,float t1){  Quaternion result=new Quaternion();  if (q1.x == q2.x && q1.y == q2.y && q1.z == q2.z && q1.w == q2.w) {    result.set(q1);    return result;  }  float result1=(q1.x * q2.x) + (q1.y * q2.y) + (q1.z * q2.z)+ (q1.w * q2.w);  if (result1 < 0.0f) {    q2.x=-q2.x;    q2.y=-q2.y;    q2.z=-q2.z;    q2.w=-q2.w;    result1=-result1;  }  float scale0=1 - t1;  float scale1=t1;  if ((1 - result1) > 0.1f) {    float theta=(float)Math.acos(result1);    float invSinTheta=1f / (float)Math.sin(theta);    scale0=(float)Math.sin((1 - t1) * theta) * invSinTheta;    scale1=(float)Math.sin((t1 * theta)) * invSinTheta;  }  result.x=(scale0 * q1.x) + (scale1 * q2.x);  result.y=(scale0 * q1.y) + (scale1 * q2.y);  result.z=(scale0 * q1.z) + (scale1 * q2.z);  result.w=(scale0 * q1.w) + (scale1 * q2.w);  return result;}  }
class C{  public boolean isDisplayedExpectingComponents(){  boolean result=false;  if (conditions.isConditionMet(visibilityOf(window))) {    if (components.isEmpty()) {      closeButton.click();    } else {      result=true;    }  }  return result;}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    toolbarPresenter.touchNavigatorIcon(getActivity());  break;case R.id.fragment_category_toolbar:toolbarPresenter.touchToolbar(getActivity());break;}}  }
class C{  public NGramDocument(int iMinGraphSize,int iMaxGraphSize,int iGraphCorrelationWindow,int iMinHistogramSize,int iMaxHistogramSize){  Graph=new DocumentNGramGraph(iMinGraphSize,iMaxGraphSize,iGraphCorrelationWindow);  Histogram=new DocumentNGramHistogram(iMinHistogramSize,iMaxHistogramSize);}  }
class C{  private void poll(){  Camera camera=this.simulation.getCamera();  World world=this.simulation.getWorld();  Dimension size=this.canvasSize;  Vector2 offset=camera.getTranslation();  double scale=camera.getScale();  if (this.mouse.hasScrolled()) {    int scroll=this.mouse.getScrollAmount();    if (scroll < 0) {      camera.zoomOut();    } else {      camera.zoomIn();    }  }  Point p=this.mouse.getLocation();  if (p == null) {    p=new Point();  }  Vector2 pw=this.screenToWorld(p,size,offset,scale);  if (this.mouse.hasMoved()) {    this.lblMouseLocation.update(pw);  }  if (this.mouse.wasClicked(MouseEvent.BUTTON1) || this.mouse.wasClicked(MouseEvent.BUTTON3)) {    if (this.selectBodyAction.isActive()) {      SandboxBody body=this.selectBodyAction.getObject();      BodyFixture fixture=this.getFixtureAtPoint(body,pw);      if (fixture == null) {        this.selectBodyAction.end();        this.editBodyAction.end();      }    } else     if (this.editBodyAction.isActive()) {      SandboxBody body=this.editBodyAction.getObject();      BodyFixture fixture=this.getFixtureAtPoint(body,pw);      if (fixture != null) {        this.selectFixtureAction.begin(fixture);      } else {        this.editBodyAction.end();        this.selectFixtureAction.end();      }    } else {      if (this.mouse.wasClicked(MouseEvent.BUTTON1) || this.isPaused()) {        SandboxBody body=this.getBodyAtPoint(world,pw);        if (body != null) {          this.selectBodyAction.begin(body);        }      }    }  }  if (this.mouse.isPressed(MouseEvent.BUTTON1)) {    if (this.selectBodyAction.isActive() && this.moveBodyAction.isActive()) {      SandboxBody body=this.selectBodyAction.getObject();      if (this.isPaused()) {        Vector2 tx=pw.difference(this.moveBodyAction.getBeginPosition());        body.translate(tx);        world.getBroadphaseDetector().update(body);        this.moveBodyAction.update(pw);      } else {        if (this.selectedBodyJoint == null) {          double mass=body.getMass().getMass();          if (mass <= Epsilon.E) {            mass=body.getMass().getInertia();          }          this.selectedBodyJoint=new PinJoint(body,pw,4.0,0.7,1000.0 * mass);synchronized (Simulation.LOCK) {            world.addJoint(this.selectedBodyJoint);          }        } else {          this.selectedBodyJoint.setTarget(pw);        }      }    } else     if (this.moveWorldAction.isActive()) {      Vector2 pwt=this.screenToWorld(p,size,this.moveWorldAction.getOffset(),scale);      Vector2 tx=pwt.difference(this.moveWorldAction.getBeginPosition());      camera.translate(tx);      this.moveWorldAction.update(pwt);    } else     if (this.editBodyAction.isActive()) {      SandboxBody body=this.editBodyAction.getObject();      if (this.selectFixtureAction.isActive() && this.moveFixtureAction.isActive()) {        BodyFixture bf=this.selectFixtureAction.getObject();        Vector2 lpw=body.getTransform().getInverseTransformed(pw);        Vector2 tx=lpw.difference(this.moveFixtureAction.getBeginPosition());        bf.getShape().translate(tx);        body.updateMass();        world.getBroadphaseDetector().update(body);        this.moveFixtureAction.update(lpw);      } else {        BodyFixture fixture=this.getFixtureAtPoint(body,pw);        if (fixture != null) {          this.selectFixtureAction.begin(fixture);          this.moveFixtureAction.begin(body.getTransform().getInverseTransformed(pw));        } else {          this.editBodyAction.end();          this.selectFixtureAction.end();        }      }    } else {      SandboxBody body=this.getBodyAtPoint(world,pw);      if (body != null) {        this.selectBodyAction.begin(body);        this.moveBodyAction.begin(pw);        this.editBodyAction.end();        body.setAsleep(false);        body.setActive(true);      } else {        this.moveWorldAction.begin(offset.copy(),pw,this.canvas);      }    }  }  if (this.mouse.wasDoubleClicked(MouseEvent.BUTTON1)) {    if (this.isPaused()) {      SandboxBody body=this.getBodyAtPoint(world,pw);      if (body != null) {        this.selectBodyAction.end();        this.editBodyAction.begin(body);        body.setAsleep(false);        body.setActive(true);      } else {        this.editBodyAction.end();      }    }  }  if (this.mouse.isPressed(MouseEvent.BUTTON3)) {    if (this.selectBodyAction.isActive() && this.rotateBodyAction.isActive()) {      SandboxBody body=this.selectBodyAction.getObject();      Vector2 c=body.getWorldCenter();      Vector2 v1=c.to(this.rotateBodyAction.getBeginPosition());      Vector2 v2=c.to(pw);      double theta=v1.getAngleBetween(v2);      body.rotate(theta,c);      world.getBroadphaseDetector().update(body);      this.rotateBodyAction.update(pw);    } else     if (this.editBodyAction.isActive()) {      SandboxBody body=this.editBodyAction.getObject();      if (this.selectFixtureAction.isActive() && this.rotateFixtureAction.isActive()) {        BodyFixture bf=this.selectFixtureAction.getObject();        Convex convex=bf.getShape();        Vector2 c=convex.getCenter();        Vector2 lpw=body.getTransform().getInverseTransformed(pw);        Vector2 v1=c.to(this.rotateFixtureAction.getBeginPosition());        Vector2 v2=c.to(lpw);        double theta=v1.getAngleBetween(v2);        bf.getShape().rotate(theta,convex.getCenter());        body.updateMass();        world.getBroadphaseDetector().update(body);        this.rotateFixtureAction.update(lpw);      } else {        BodyFixture fixture=this.getFixtureAtPoint(body,pw);        if (fixture != null) {          this.selectFixtureAction.begin(fixture);          this.rotateFixtureAction.begin(body.getTransform().getInverseTransformed(pw));        } else {          this.editBodyAction.end();          this.selectFixtureAction.end();        }      }    } else {      if (this.isPaused()) {        SandboxBody body=this.getBodyAtPoint(world,pw);        if (body != null) {          this.selectBodyAction.begin(body);          this.rotateBodyAction.begin(pw);          body.setAsleep(false);          body.setActive(true);        }      }    }  }  if (this.mouse.wasReleased(MouseEvent.BUTTON1)) {    if (this.moveBodyAction.isActive()) {      this.moveBodyAction.end();      if (this.selectedBodyJoint != null) {        world.removeJoint(this.selectedBodyJoint);        this.selectedBodyJoint=null;      }    }    if (this.moveFixtureAction.isActive()) {      SandboxBody body=this.editBodyAction.getObject();      body.updateMass();      this.moveFixtureAction.end();    }    if (this.moveWorldAction.isActive()) {      this.moveWorldAction.end(this.canvas);    }  }  if (this.mouse.wasReleased(MouseEvent.BUTTON3)) {    if (this.rotateBodyAction.isActive()) {      this.rotateBodyAction.end();    }    if (this.rotateFixtureAction.isActive()) {      this.rotateFixtureAction.end();    }  }  this.mouse.clear();}  }
class C{  public boolean isExistingCommand(){  return (!name.equals(CommandTagHandle.CMD_UNKNOWN));}  }
class C{  public static void write(JsonElement element,JsonWriter writer) throws IOException {  TypeAdapters.JSON_ELEMENT.write(writer,element);}  }
class C{  protected AxisLabelAnimator(){  super();}  }
class C{  public ObjectFactory(){}  }
class C{  public static String toInternalName(String className){  return className.replace('.','/');}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_STATUS_DURATION(String value0){  return new SM_SYSTEM_MESSAGE(1400804,value0);}  }
class C{  public void validateOutput() throws XmlParsingException, FileNotFoundException {  XmlParser.parse(outputFile,new String[]{TTML_SCHEMA},TTML_PACKAGES,TtEltype.class);}  }
class C{  public void loadAllSignatures(IDexUnit unit){  logger.info("Used Sig Files storing start...");  final long startTime=System.currentTimeMillis();  Set<String> usedSigFiles=new HashSet<>();  storeAllUsedSigFiles(unit,usedSigFiles);  final long endTime=System.currentTimeMillis();  logger.info("Used Sig Files storing completed! (Execution Time: " + (endTime - startTime) / 1000 + "s)");  logger.info("Library signatures loading start...");  final long startTime1=System.currentTimeMillis();  File f;  for (  String filePath : usedSigFiles) {    f=new File(filePath);    if (!loadSignatures(f)) {      logger.error("Cannot load signatures files: %s",f);    }  }  final long endTime1=System.currentTimeMillis();  logger.info("Library signatures loading completed! (Execution Time: " + (endTime1 - startTime1) / 1000 + "s)");  allUsedSignatureFileCount=usedSigFiles.size();  usedSigFiles.clear();  long a=0;  for (  List<String[]> e : allTightSignatures.values()) {    a+=e.size();  }  long b=0;  for (  List<String[]> e : allLooseSignatures.values()) {    b+=e.size();  }  long c=(a + b) / (allTightSignatures.size() + allLooseSignatures.size());  logger.info("Average candidates: " + c);  logger.info("allTightSignatures map size: " + allTightSignatures.size());  logger.info("candidates: " + a);  logger.info("allLooseSignatures map size: " + allLooseSignatures.size());  logger.info("candidates: " + b);}  }
class C{  public void scanNonNotifyTemplates(Context context,IEntryHolder entry,ServerTransaction txn,FifoSearch fifoSearch) throws EntryDeletedException, SAException {  scanNonNotifyTemplates(context,entry,txn,fifoSearch,fifoSearch == FifoSearch.YES ? FifoGroupsSearch.NO : FifoGroupsSearch.INCLUSIVE);}  }
class C{  public static CompoundTag read(File file) throws IOException {  return read(file,ByteOrder.BIG_ENDIAN);}  }
class C{  @Override public void createUI(){  int xPos=getXPos();  FieldPanel fieldPanel=createFieldPanel(xPos,getLabel());  int row=0;  xMinTextField=createRow(Localisation.getField(FieldConfigBase.class,"FieldConfigBoundingBox.minx"),xPos,fieldPanel,row);  xMaxTextField=createRow(Localisation.getField(FieldConfigBase.class,"FieldConfigBoundingBox.maxx"),xPos,fieldPanel,++row);  yMinTextField=createRow(Localisation.getField(FieldConfigBase.class,"FieldConfigBoundingBox.miny"),xPos,fieldPanel,++row);  yMaxTextField=createRow(Localisation.getField(FieldConfigBase.class,"FieldConfigBoundingBox.maxy"),xPos,fieldPanel,++row);  crsComboBox=createCRSList(Localisation.getField(FieldConfigBase.class,"FieldConfigBoundingBox.crs"),xPos,fieldPanel,++row);  Dimension preferredSize=new Dimension((int)fieldPanel.getPreferredSize().getWidth(),crsComboBox.getY() + crsComboBox.getHeight());  fieldPanel.setPreferredSize(preferredSize);  if (!isValueOnly()) {    setAttributeSelectionPanel(fieldPanel.internalCreateAttrButton(Boolean.class,this,isRasterSymbol()));  }}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public static Map<String,Object> rebuildSolrIndexAuto(DispatchContext dctx,Map<String,Object> context) throws GenericEntityException {  Map<String,Object> result;  LocalDispatcher dispatcher=dctx.getDispatcher();  boolean autoRunEnabled=UtilProperties.getPropertyAsBoolean(SolrUtil.solrConfigName,"solr.index.rebuild.autoRun.enabled",false);  if (autoRunEnabled) {    Boolean onlyIfDirty=(Boolean)context.get("onlyIfDirty");    if (onlyIfDirty == null) {      onlyIfDirty=UtilProperties.getPropertyAsBoolean(SolrUtil.solrConfigName,"solr.index.rebuild.autoRun.onlyIfDirty",false);    }    Debug.logInfo("Solr: auto-run index rebuild: starting (onlyIfDirty: " + onlyIfDirty + ")",module);    Map<String,Object> servCtx;    try {      servCtx=dctx.makeValidContext("rebuildSolrIndex",ModelService.IN_PARAM,context);      servCtx.put("onlyIfDirty",onlyIfDirty);      Map<String,Object> servResult=dispatcher.runSync("rebuildSolrIndex",servCtx);      if (ServiceUtil.isSuccess(servResult)) {        String respMsg=(String)servResult.get(ModelService.SUCCESS_MESSAGE);        if (respMsg != null) {          Debug.logInfo("Solr: auto-run index rebuild: rebuildSolrIndex returned success: " + respMsg,module);        } else {          Debug.logInfo("Solr: auto-run index rebuild: rebuildSolrIndex returned success",module);        }      } else {        Debug.logError("Solr: auto-run index rebuild: rebuildSolrIndex returned an error: " + ServiceUtil.getErrorMessage(servResult),module);      }      result=FastMap.newInstance();      result.putAll(servResult);    } catch (    GenericServiceException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }  } else {    Debug.logInfo("Solr: auto-run index rebuild: not running - disabled",module);    result=ServiceUtil.returnSuccess();  }  return result;}  }
class C{  public boolean duplicateSample(String sample,String newName,boolean allowReplaceSample){  if (allowReplaceSample || !table.rowKeySet().contains(newName)) {    Map<String,Object> row=table.row(sample);    return addSample(newName,row,true,false);  }  return false;}  }
class C{  public XMLParseException(XMLLocator locator,String message){  super(message);  if (locator != null) {    fPublicId=locator.getPublicId();    fLiteralSystemId=locator.getLiteralSystemId();    fExpandedSystemId=locator.getExpandedSystemId();    fBaseSystemId=locator.getBaseSystemId();    fLineNumber=locator.getLineNumber();    fColumnNumber=locator.getColumnNumber();    fCharacterOffset=locator.getCharacterOffset();  }}  }
class C{  private static void addGradleLibraryProjects(@NonNull LintClient client,@Nullable List<VirtualFile> files,@NonNull Map<AndroidLibrary,Project> libraryMap,@NonNull List<Project> projects,@NonNull AndroidFacet facet,@NonNull AndroidGradleModel androidGradleModel,@NonNull LintModuleProject project,@NonNull Map<Project,Module> projectMap,@NonNull List<Project> dependencies){  Collection<AndroidLibrary> libraries=androidGradleModel.getSelectedMainCompileDependencies().getLibraries();  for (  AndroidLibrary library : libraries) {    Project p=libraryMap.get(library);    if (p == null) {      File dir=library.getFolder();      p=new LintGradleLibraryProject(client,dir,dir,library);      libraryMap.put(library,p);      projectMap.put(p,facet.getModule());      projects.add(p);      if (files != null) {        VirtualFile libraryDir=LocalFileSystem.getInstance().findFileByIoFile(dir);        if (libraryDir != null) {          ListIterator<VirtualFile> iterator=files.listIterator();          while (iterator.hasNext()) {            VirtualFile file=iterator.next();            if (VfsUtilCore.isAncestor(libraryDir,file,false)) {              project.addFile(VfsUtilCore.virtualToIoFile(file));              iterator.remove();            }          }        }        if (files.isEmpty()) {          files=null;        }      }    }    dependencies.add(p);  }}  }
class C{  public static Map createPeerMap(Peer peer){  Map map=new HashMap();  InetSocketAddress address=peer.getAddress();  map.put(PORT,(long)address.getPort());  map.put(ADDRESS,address.getAddress().getHostAddress());  if (peer.getPeerId() != null)   map.put(PEER_ID,peer.getPeerId());  return map;}  }
class C{  public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  List lOldEdges;  lOldEdges=gGraph.getEdges(vA);  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=ScalingFunction(Math.abs(++iCnt - (lOtherNodes.size() / 2)));    dIncreaseWeight=dStartWeight;    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public static void clearCache(Module module){  if (ourCache.containsKey(module)) {    ourCache.remove(module);  }}  }
class C{  private static void addAlarmValues(final TransferTagValueImpl tagValue,final Collection<Alarm> alarms){  if (alarms != null) {    List<AlarmValueImpl> alarmValues=new ArrayList<AlarmValueImpl>(alarms.size());    for (    Alarm alarm : alarms) {      AlarmValueImpl alarmValue=new AlarmValueImpl(alarm.getId(),alarm.getFaultCode(),alarm.getFaultMember(),alarm.getFaultFamily(),alarm.getInfo(),alarm.getTagId(),alarm.getTimestamp(),alarm.isActive());      if (alarm.getMetadata() != null) {        alarmValue.setMetadata(alarm.getMetadata().getMetadata());      }      alarmValues.add(alarmValue);    }    tagValue.addAlarmValues(alarmValues);  }}  }
class C{  private HarRequest createHarRequestForHttpRequest(HttpRequest httpRequest){  String url=getFullUrl(httpRequest);  return new HarRequest(httpRequest.getMethod().toString(),url,httpRequest.getProtocolVersion().text());}  }
class C{  int indexOf(Node child,Node parent){  if (child.getParentNode() != parent)   return -1;  int i=0;  for (Node node=parent.getFirstChild(); node != child; node=node.getNextSibling()) {    i++;  }  return i;}  }
class C{  public static boolean isActionDown(KeyEvent event){  return event.getAction() == KeyEvent.ACTION_DOWN;}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  return new double[]{0,0.001d,0.01d,0.025d,0.05d,0.1d,0.999d,0.990d,0.975d,0.950d,0.900d,1};}  }
class C{  protected VideoAddQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static boolean hasKitkat(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;}  }
class C{  public static String ZtoEstring(Z num,int w,int d){  String snum=DoubletoEstring(num.re,w,d);  if (num.im < 0)   snum=snum + " - " + DoubletoEstring(-num.im,d + 6,d)+ "i"; else   snum=snum + " + " + DoubletoEstring(num.im,d + 6,d)+ "i";  return snum;}  }
class C{  public static void writeToBinFile(File dmpFile,File binFile) throws IOException {  System.err.println("Converting " + dmpFile.getName() + " to "+ binFile.getName()+ "...");  long totalOut=0;  try (final FileInputIterator it=new FileInputIterator(dmpFile,true);OutputWriter outs=new OutputWriter(binFile)){    System.err.println("Writing file: " + binFile);    outs.writeInt(MAGIC_NUMBER);    long lastGi=0;    int lineNo=0;    while (it.hasNext()) {      String aLine=it.next();      lineNo++;      final int pos=aLine.indexOf('\t');      final String giString=aLine.substring(0,pos);      final int dotPos=giString.indexOf('.');      final long gi=Long.parseLong(dotPos > 0 ? giString.substring(0,dotPos) : giString);      if (gi >= 0) {        final int taxId=Integer.parseInt(aLine.substring(pos + 1));        if (gi >= 0 && gi <= lastGi)         throw new IOException("Error, line: " + lineNo + ": GIs out of order: "+ gi+ " after "+ lastGi);        final int missing=(int)(gi - 1 - lastGi);        for (int i=0; i < missing; i++)         outs.writeInt(0);        outs.writeInt(taxId);        totalOut++;        lastGi=gi;      }    }  }   System.err.println("done (" + totalOut + " entries)");}  }
class C{  private static String unescape(String s){  int len=s.length(), base=0, idx;  String escapes="tnrbf\\\"'";  String chars="\t\n\r\b\f\\\"'";  StringBuffer sbuf=null;  while ((idx=s.indexOf('\\',base)) != -1) {    if (sbuf != null)     sbuf.append(s.substring(base,idx));    if (idx + 1 == len)     break;    char c=s.charAt(idx + 1);    int cidx=escapes.indexOf(c);    if (cidx == -1) {      sbuf.append('\\');      sbuf.append(c);    } else {      if (sbuf == null)       sbuf=new StringBuffer(s.substring(base,idx));      sbuf.append(chars.charAt(cidx));    }    base=idx + 2;  }  if (sbuf != null && base < len)   sbuf.append(s.substring(base));  return (sbuf == null ? s : sbuf.toString());}  }
class C{  public NonSquareMatrixException(int wrong,int expected){  super(org.hipparchus.migration.exception.util.LocalizedFormats.NON_SQUARE_MATRIX,wrong,expected);}  }
class C{  public void addGlobalAttributeDecl(XSAttributeDecl decl){  fGlobalAttrDecls.put(decl.fName,decl);  decl.setNamespaceItem(this);}  }
class C{  public BoardGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int groupId,int topicId){  super(client,"board.getComments",GetCommentsExtendedResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);  extended(true);}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  private void notifyAllSupervisedCachesOfUpdate(){  for (  Long key : processCache.getKeys()) {    processFacade.refreshAndnotifyCurrentSupervisionStatus(key);  }  for (  Long key : equipmentCache.getKeys()) {    equipmentFacade.refreshAndnotifyCurrentSupervisionStatus(key);  }  for (  Long key : subEquipmentCache.getKeys()) {    subEquipmentFacade.refreshAndnotifyCurrentSupervisionStatus(key);  }}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  mMap=googleMap;  refreshMapBtn.setEnabled(true);  clearMapBtn.setEnabled(true);  settingsrequest();}  }
class C{  public void readDataFile(String content) throws DataFileException {  if (content == null || content.length() <= 0)   throw new IllegalStateException("Content is empty, can't read file");  ByteArrayInputStream bis=new ByteArrayInputStream(content.getBytes());  readDataFile(bis,null);}  }
class C{  protected void init(){  InputStream in=null;  props=new Properties();  try {    URI uri=getClass().getClassLoader().getResource(PROPERTY_FILE_NAME).toURI();    File file=new File(uri);    in=new FileInputStream(file);    props.load(in);  } catch (  IOException e) {    e.printStackTrace();  }catch (  URISyntaxException e) {    e.printStackTrace();  } finally {    CarbonUtil.closeStreams(in);  }}  }
class C{  private void parseSection(){  PsiBuilder.Marker marker=builder.mark();  if (matches(ProjectViewTokenType.LIST_KEYWORD)) {    expect(ProjectViewTokenType.COLON);    skipPastNewline();    parseListItems();    marker.done(ProjectViewElementTypes.LIST_SECTION);    return;  }  if (currentToken() == ProjectViewTokenType.SCALAR_KEYWORD) {    ScalarSectionParser parser=ProjectViewKeywords.SCALAR_KEYWORD_MAP.get(builder.getTokenText());    if (parser != null) {      parseScalarSection(parser);      marker.done(ProjectViewElementTypes.SCALAR_SECTION);      return;    }  }  if (matches(ProjectViewTokenType.INDENT)) {    skipBlockAndError(marker,"Invalid indentation. Indented lines must be preceded by a list keyword");    return;  }  if (matches(ProjectViewTokenType.COLON)) {    skipBlockAndError(marker,"Invalid section: lines cannot begin with a colon.");    return;  }  skipBlockAndError(marker,"Unrecognized keyword: " + builder.getTokenText());}  }
class C{  @Override public void ignoredCharacters(XMLString text,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.ignoredCharacters(text,augs);  if (fDTDHandler != null) {    fDTDHandler.ignoredCharacters(text,augs);  }}  }
class C{  private Levels(){  throw new AssertionError("This class cannot be instantiated");}  }
class C{  @Override public boolean isLooping(){  Log.d(SBMP_TAG,"isLooping() 382");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  try {    return pmInterface.isLooping(ServiceBackedMediaPlayer.this.sessionId);  } catch (  RemoteException e) {    e.printStackTrace();    ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);  }  return false;}  }
class C{  static void throwExceptionForErrorResponse(HttpURLConnection conn,BaseResponse response) throws IOException, ClarifaiException {  String errorMessage="";  if (response.statusCode != null) {    errorMessage+=response.statusCode;  }  if (response.statusMsg != null) {    errorMessage+=" " + response.statusMsg;  }  if (response.results != null && response.results.isJsonPrimitive()) {    errorMessage+=" " + response.results.getAsString();  }  if (errorMessage.length() == 0) {    errorMessage=conn.getResponseMessage();  }  int code=conn.getResponseCode();  if (code == HttpURLConnection.HTTP_UNAUTHORIZED) {    throw new ClarifaiNotAuthorizedException(errorMessage);  } else   if (code == 429) {    int waitSeconds=conn.getHeaderFieldInt("X-Throttle-Wait-Seconds",10);    throw new ClarifaiThrottledException(errorMessage,waitSeconds);  } else   if (code >= 400 && code < 500) {    throw new ClarifaiBadRequestException(errorMessage);  } else   if (code >= 500 && code < 600) {    throw new ClarifaiException(errorMessage);  } else {    throw new ClarifaiException("Unexpected HTTP status code (" + code + "): "+ errorMessage);  }}  }
class C{  public FriendsGetQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){  super(client,"friends.get",GetFieldsResponse.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  public void delete(){  DataSourceWindowManager.sharedInstance().closeDataSource(this);  getOwner().getRepository().removeDataSource(this);}  }
class C{  public static int dipToPX(final Context ctx,float dip){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,ctx.getResources().getDisplayMetrics());}  }
class C{  private boolean sameType(Object flowSet){  return (flowSet instanceof ArraySparseSet);}  }
class C{  public Builder useAutoTag(boolean val){  useAutoTag=val;  return this;}  }
class C{  protected static void checkStandaloneEntityRef(String name,DTDGrammar grammar,XMLEntityDecl tempEntityDecl,XMLErrorReporter errorReporter) throws XNIException {  int entIndex=grammar.getEntityDeclIndex(name);  if (entIndex > -1) {    grammar.getEntityDecl(entIndex,tempEntityDecl);    if (tempEntityDecl.inExternal) {      errorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE",new Object[]{name},XMLErrorReporter.SEVERITY_ERROR);    }  }}  }
class C{  public void generateReport(){  if (asynchronousThread != null) {    requestScheduled=true;  } else {    report();  }}  }
class C{  public void maybeUpdateNavigationHistory(){  WebContents webContents=mTab.getWebContents();  if (mClearAllForwardHistoryRequired && webContents != null) {    NavigationController navigationController=webContents.getNavigationController();    int lastCommittedEntryIndex=getLastCommittedEntryIndex();    while (navigationController.canGoForward()) {      boolean ret=navigationController.removeEntryAtIndex(lastCommittedEntryIndex + 1);      assert ret;    }  } else   if (mShouldClearRedirectHistoryForTabClobbering && webContents != null) {    NavigationController navigationController=webContents.getNavigationController();    int indexBeforeRedirection=mTab.getTabRedirectHandler().getLastCommittedEntryIndexBeforeStartingNavigation();    int lastCommittedEntryIndex=getLastCommittedEntryIndex();    for (int i=lastCommittedEntryIndex - 1; i > indexBeforeRedirection; --i) {      boolean ret=navigationController.removeEntryAtIndex(i);      assert ret;    }  }  mClearAllForwardHistoryRequired=false;  mShouldClearRedirectHistoryForTabClobbering=false;}  }
class C{  public PhotosGetMessagesUploadServerQuery(VkApiClient client,Actor actor){  super(client,"photos.getMessagesUploadServer",PhotoUpload.class);  accessToken(actor.getAccessToken());}  }
class C{  public void initFromIds(ArrayList<Long> cellIds){  initRawIds(cellIds);  normalize();}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  MatrixUtils.deserializeRealVector(this,"coefficients",ois);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_WeaponStatUp_ME_TO_B(String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200582,skilltarget,value0,skillname);}  }
class C{  public FriendsGetByPhonesQuery(VkApiClient client,UserActor actor){  super(client,"friends.getByPhones",Utils.buildParametrizedType(List.class,UserXtrPhone.class));  accessToken(actor.getAccessToken());}  }
class C{  public static TimeZone toTimeZone(String tzId){  if (UtilValidate.isEmpty(tzId)) {    return TimeZone.getDefault();  } else {    return TimeZone.getTimeZone(tzId);  }}  }
class C{  public int truncate_file(String group_name,String appender_filename) throws IOException, MyException {  final long truncated_file_size=0;  return this.truncate_file(group_name,appender_filename,truncated_file_size);}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=new float[mYAxis.mEntryCount * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i + 1]=mYAxis.mEntries[i / 2];  }  mTrans.pointValuesToPixel(positions);  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  float xoffset=mYAxis.getXOffset();  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,"A") / 2.5f + mYAxis.getYOffset();  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float xPos;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.RIGHT);      xPos=mViewPortHandler.offsetLeft() - xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.offsetLeft() + xoffset;    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.contentRight() + xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.RIGHT);      xPos=mViewPortHandler.contentRight() - xoffset;    }  }  drawYLabels(c,xPos,positions,yoffset);}  }
class C{  public static double[] fromString(String data,String separator){  String[] split=data.split(separator);  double[] ret=new double[split.length];  for (int i=0; i < split.length; i++) {    ret[i]=Double.parseDouble(split[i]);  }  return ret;}  }
class C{  public GroupsGetMembersQueryWithFields(VkApiClient client,UserField... fields){  super(client,"groups.getMembers",GetMembersFieldsResponse.class);  fields(fields);}  }
class C{  public static boolean canDeconstruct(ItemStack stack){  return stack != null && (stack.getItem() instanceof IDeconstructable) && ((IDeconstructable)stack.getItem()).canDestroy(stack);}  }
class C{  public static Intent createGetContentIntent(){  final Intent intent=new Intent(Intent.ACTION_GET_CONTENT);  intent.setType("*/*");  intent.addCategory(Intent.CATEGORY_OPENABLE);  return intent;}  }
class C{  public static String fingerprint(String publicKey){  String[] contents=StringUtils.split(publicKey," ");  byte[] contentBase64=base64().decode(contents[1]);  HashCode hc=md5().hashBytes(contentBase64);  return on(":").join(fixedLength(2).split(base16().lowerCase().encode(hc.asBytes())));}  }
class C{  private void drawAsHeatMap(Node v,NodeView nv,NodeData data){  long count;  int[] array;  if (scaleBy == ScaleBy.Summarized || v.getOutDegree() == 0 && data.getCountSummarized() > data.getCountAssigned()) {    count=data.getCountSummarized();    array=data.getSummarized();  } else {    count=data.getCountAssigned();    array=data.getAssigned();  }  Point2D location=nv.getLocation();  Rectangle box=new Rectangle();  viewer.trans.w2d(new Rectangle(0,0,MainViewer.XSTEP,MainViewer.YSTEP),box);  box.setRect(box.x,box.y,Math.max(4,array.length == 0 ? 4 : maxNodeHeight / array.length),Math.min(2 * maxNodeHeight,box.height));  if (location == null)   return;  Point apt=viewer.trans.w2d(location);  if (v.getOutDegree() == 0 || count > 0) {    nv.setShape(NodeView.RECT_NODE);    nv.setWidth((int)Math.round(data.getAssigned().length * box.getWidth()));    nv.setHeight((int)Math.round(box.getHeight()));  } else {    nv.setShape(NodeView.OVAL_NODE);    nv.setWidth(1);    nv.setHeight(1);  }  apt.x-=nv.getWidth() >> 1;  apt.y-=box.getHeight() / 2 - 1;  if (data.getUpPValue() >= 0) {    gc.setColor(pvalueColor);    Stroke oldStroke=gc.getStroke();    int leftWidth=getWidthForPValue(data.getUpPValue());    gc.setStroke(new BasicStroke(leftWidth));    gc.drawLine(apt.x - 1,apt.y,apt.x - 1,apt.y + nv.getHeight());    gc.setStroke(oldStroke);  }  if (data.getDownPValue() >= 0) {    gc.setColor(pvalueColor);    Stroke oldStroke=gc.getStroke();    int rightWidth=getWidthForPValue(data.getDownPValue());    gc.setStroke(new BasicStroke(rightWidth));    gc.drawLine(apt.x + nv.getWidth() + 1,apt.y,apt.x + nv.getWidth() + 1,apt.y + nv.getHeight());    gc.setStroke(oldStroke);  }  if (v.getOutDegree() == 0 || count > 0) {    for (int i=0; i < array.length; i++) {      Color color;switch (scalingType) {default :case LINEAR:        color=doc.getChartColorManager().getHeatMapTable().getColor(array[i],(int)maxValue);      break;case SQRT:    color=doc.getChartColorManager().getHeatMapTable().getColorSqrtScale(array[i],inverseSqrtMaxCount);  break;case LOG:color=doc.getChartColorManager().getHeatMapTable().getColorLogScale(array[i],inverseLogMaxCount);break;}gc.setColor(color);gc.fill(new Rectangle2D.Double(apt.x + i * box.getWidth(),apt.y,box.getWidth(),box.getHeight()));gc.setColor(Color.DARK_GRAY);gc.draw(new Rectangle2D.Double(apt.x + i * box.getWidth(),apt.y,box.getWidth(),box.getHeight()));}} else nv.draw(gc,viewer.trans);}  }
class C{  @Override public synchronized void powerOnSelfTest() throws Error {  for (Iterator<WaveformSynthesizer> it=waveformSynthesizers.iterator(); it.hasNext(); ) {    WaveformSynthesizer ws=it.next();    ws.powerOnSelfTest();  }}  }
class C{  private int dataPos(long index){  return (int)(index & BIT_MASK);}  }
class C{  public NewsfeedAddBanQuery addBan(UserActor actor){  return new NewsfeedAddBanQuery(getClient(),actor);}  }
class C{  public Analytics(String keySpace,Set<String> subTypeIds,Set<String> statisticsResourceTypeIds){  this.keySpace=keySpace;  MindmapsGraph graph=Mindmaps.factory(Mindmaps.DEFAULT_URI,this.keySpace).getGraph();  graph.rollback();  Set<Type> subtypes=subTypeIds.stream().map(null).collect(Collectors.toSet());  Set<Type> statisticsResourceTypes=statisticsResourceTypeIds.stream().map(null).collect(Collectors.toSet());  graph.getMetaResourceType().instances().forEach(null);  if (subtypes.isEmpty()) {    Set<Concept> excludedTypes=new HashSet<>();    excludedTypes.add(graph.getMetaType());    excludedTypes.add(graph.getMetaEntityType());    excludedTypes.add(graph.getMetaRelationType());    excludedTypes.add(graph.getMetaResourceType());    excludedTypes.add(graph.getMetaRoleType());    excludedTypes.add(graph.getMetaRuleType());    excludedTypes.addAll(graph.getMetaRoleType().instances());    excludedTypes.addAll(graph.getMetaRuleType().instances());    HashSet<String> analyticsElements=Sets.newHashSet(Analytics.degree,GraqlType.HAS_RESOURCE.getId(Analytics.degree));    analyticsElements.stream().filter(null).map(null).forEach(null);    graph.getMetaType().instances().stream().filter(null).map(null).forEach(null);  } else {    for (    Type t : subtypes) {      t.subTypes().forEach(null);    }  }  if (!statisticsResourceTypes.isEmpty()) {    for (    Type t : statisticsResourceTypes) {      t.subTypes().forEach(null);    }  }  mutateResourceOntology(degree,ResourceType.DataType.LONG);  waitOnMutateResourceOntology(degree);}  }
class C{  public static final float toJulian(Date date){  Calendar c=Calendar.getInstance();  c.setTime(date);  return toJulian(c);}  }
class C{  @Override public String toString(){  String delegate=fileFilter != null ? fileFilter.toString() : filenameFilter.toString();  return super.toString() + "(" + delegate+ ")";}  }
class C{  public void paint(Graphics graphics){  super.paint(graphics);  Graphics2D gc=(Graphics2D)graphics;  gc.setColor(Color.WHITE);  gc.fill(getVisibleRect());  draw(gc,null);}  }
class C{  public OutputFormat(Document doc){  setMethod(whichMethod(doc));  setDoctype(whichDoctypePublic(doc),whichDoctypeSystem(doc));  setMediaType(whichMediaType(getMethod()));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public DoStmt fullCopy(){  DoStmt tree=(DoStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void processJsonResponse(String json) throws Exception {  JSONParser parser=new JSONParser();  JSONObject obj=(JSONObject)parser.parse(json);  String service=(String)obj.get("service");  if (service.isEmpty()) {    Logger.error("Missing required key 'service' in json response: " + json);    return;  }  Long uptime=(Long)obj.get("uptime");  if (uptime == null) {    Logger.error("Missing required key 'uptime' in json response: " + json);    uptime=0L;  }  processCounterMetric(service + "__uptime",uptime);  String[] fields={"latency_max","latency_999th","latency_99th","latency_95th","latency_mean","payload_size_max","payload_size_999th","payload_size_99th","payload_size_95th","payload_size_mean","alloc_msgs","free_msgs","average_cross_region_rtt","payload_size_mean","alloc_msgs","free_msgs","average_cross_region_rtt","99_cross_region_rtt","average_cross_zone_latency","99_cross_zone_latency","average_server_latency","99_server_latency","average_cross_region_queue_wait","99_cross_region_queue_wait","average_cross_zone_queue_wait","99_cross_zone_queue_wait","average_server_queue_wait","99_server_queue_wait","client_out_queue_99","server_in_queue_99","server_out_queue_99","dnode_client_out_queue_99","peer_in_queue_99","peer_out_queue_99","remote_peer_in_queue_99","remote_peer_out_queue_99","alloc_mbufs","free_mbufs"};  for (int i=0; i < fields.length; i++) {    Long val=(Long)obj.get(fields[i]);    if (val == null) {      val=0L;    }    processGaugeMetric(service + "__" + fields[i],val);  }  JSONObject stats=(JSONObject)obj.get("dyn_o_mite");  if (stats == null) {    Logger.error("Missing key 'dyn_o_mite' in json response: " + json);    return;  }  parseObjectMetrics(service,stats);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((colourButton != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof Color) {      Color oldValue=(Color)undoRedoObject.getOldValue();      colourButton.setColour(oldValue);      valueUpdated();    }  }}  }
class C{  public AdsUpdateTargetGroupQuery updateTargetGroup(UserActor actor,int accountId,int targetGroupId,String name){  return new AdsUpdateTargetGroupQuery(getClient(),actor,accountId,targetGroupId,name);}  }
class C{  public int store(GenericValue value) throws GenericEntityException {  if (value == null) {    return 0;  }  return genericDAO.update(value);}  }
class C{  protected void drawLinear(Canvas c,ILineDataSet dataSet){  int entryCount=dataSet.getEntryCount();  final boolean isDrawSteppedEnabled=dataSet.isDrawSteppedEnabled();  final int pointsPerEntryPair=isDrawSteppedEnabled ? 4 : 2;  Transformer trans=mDataProvider.getTransformer(dataSet.getAxisDependency());  float phaseY=mAnimator.getPhaseY();  mRenderPaint.setStyle(Paint.Style.STROKE);  Canvas canvas;  if (dataSet.isDashedLineEnabled()) {    canvas=mBitmapCanvas;  } else {    canvas=c;  }  mXBounds.set(mDataProvider,dataSet);  if (dataSet.getColors().size() > 1) {    if (mLineBuffer.length <= pointsPerEntryPair * 2)     mLineBuffer=new float[pointsPerEntryPair * 4];    for (int j=mXBounds.minIndex; j <= mXBounds.indexRange + mXBounds.minIndex; j++) {      Entry e=dataSet.getEntryForIndex(j);      if (e == null)       continue;      mLineBuffer[0]=e.getX();      mLineBuffer[1]=e.getY() * phaseY;      if (j < mXBounds.maxIndex) {        e=dataSet.getEntryForIndex(j + 1);        if (e == null)         break;        if (isDrawSteppedEnabled) {          mLineBuffer[2]=e.getX();          mLineBuffer[3]=mLineBuffer[1];          mLineBuffer[4]=mLineBuffer[2];          mLineBuffer[5]=mLineBuffer[3];          mLineBuffer[6]=e.getX();          mLineBuffer[7]=e.getY() * phaseY;        } else {          mLineBuffer[2]=e.getX();          mLineBuffer[3]=e.getY() * phaseY;        }      } else {        mLineBuffer[2]=mLineBuffer[0];        mLineBuffer[3]=mLineBuffer[1];      }      trans.pointValuesToPixel(mLineBuffer);      if (!mViewPortHandler.isInBoundsRight(mLineBuffer[0]))       break;      if (!mViewPortHandler.isInBoundsLeft(mLineBuffer[2]) || (!mViewPortHandler.isInBoundsTop(mLineBuffer[1]) && !mViewPortHandler.isInBoundsBottom(mLineBuffer[3])) || (!mViewPortHandler.isInBoundsTop(mLineBuffer[1]) && !mViewPortHandler.isInBoundsBottom(mLineBuffer[3])))       continue;      mRenderPaint.setColor(dataSet.getColor(j));      canvas.drawLines(mLineBuffer,0,pointsPerEntryPair * 2,mRenderPaint);    }  } else {    if (mLineBuffer.length < Math.max((entryCount) * pointsPerEntryPair,pointsPerEntryPair) * 2)     mLineBuffer=new float[Math.max((entryCount) * pointsPerEntryPair,pointsPerEntryPair) * 4];    Entry e1, e2;    e1=dataSet.getEntryForIndex(mXBounds.minIndex);    if (e1 != null) {      int j=0;      for (int x=mXBounds.minIndex; x <= mXBounds.indexRange + mXBounds.minIndex; x++) {        e1=dataSet.getEntryForIndex(x == 0 ? 0 : (x - 1));        e2=dataSet.getEntryForIndex(x);        if (e1 == null || e2 == null)         continue;        mLineBuffer[j++]=e1.getX();        mLineBuffer[j++]=e1.getY() * phaseY;        if (isDrawSteppedEnabled) {          mLineBuffer[j++]=e2.getX();          mLineBuffer[j++]=e1.getY() * phaseY;          mLineBuffer[j++]=e2.getX();          mLineBuffer[j++]=e1.getY() * phaseY;        }        mLineBuffer[j++]=e2.getX();        mLineBuffer[j++]=e2.getY() * phaseY;      }      if (j > 0) {        trans.pointValuesToPixel(mLineBuffer);        final int size=Math.max((mXBounds.indexRange + 1) * pointsPerEntryPair,pointsPerEntryPair) * 2;        mRenderPaint.setColor(dataSet.getColor());        canvas.drawLines(mLineBuffer,0,size,mRenderPaint);      }    }  }  mRenderPaint.setPathEffect(null);  if (dataSet.isDrawFilledEnabled() && entryCount > 0) {    drawLinearFill(c,dataSet,trans,mXBounds);  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private static void filterOutCached(Map<VirtualFile,AndroidFacet> resDirectories){  resDirectories.keySet().removeAll(ourDirMap.keySet());}  }
class C{  public boolean isAuthorized(String auth){  if (auth == null) {    return false;  }  final Set<String> auths=getAllAuthorities();  return auths.contains(UserAuthorityGroup.AUTHORITY_ALL) || auths.contains(auth);}  }
class C{  boolean dependsOn(CoordinatorLayout parent,View child,View dependency){  return dependency == mAnchorDirectChild || (mBehavior != null && mBehavior.layoutDependsOn(parent,child,dependency));}  }
class C{  public long next(long fromTime){  if (getCurrentCount() == 0 || fromTime == 0 || fromTime == startDate.getTime()) {    return first();  }  if (Debug.verboseOn()) {    Debug.logVerbose("Date List Size: " + (rDateList == null ? 0 : rDateList.size()),module);    Debug.logVerbose("Rule List Size: " + (rRulesList == null ? 0 : rRulesList.size()),module);  }  if (rDateList == null && rRulesList == null) {    return 0;  }  long nextRuleTime=fromTime;  boolean hasNext=true;  Iterator<RecurrenceRule> rulesIterator=getRecurrenceRuleIterator();  while (rulesIterator.hasNext()) {    RecurrenceRule rule=rulesIterator.next();    while (hasNext) {      nextRuleTime=getNextTime(rule,nextRuleTime);      if (nextRuleTime == 0 || isValid(nextRuleTime)) {        hasNext=false;      }    }  }  return nextRuleTime;}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    e.writeHeader(fos);    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public boolean isAtom(){  return myObject instanceof Atom;}  }
class C{  public EntityQuery cursorScrollSensitive(){  this.resultSetType=EntityFindOptions.TYPE_SCROLL_SENSITIVE;  return this;}  }
class C{  public void recycle(boolean initial,int width,int height,int topMargin){  if (initial) {    y=randRange(topMargin,height);  } else {    y=height + (randRange(0,21) - 10);  }  x=randRange(0,width);  radius=1;  maxRadius=randRange(3,BUBBLE_SIZE);  paint.setAlpha(randRange(100,250));  popped=false;  step=0;  amp=Math.random() * 3;  freq=Math.random() * 2;  skew=Math.random() - 0.5;}  }
class C{  protected void createAndPersistNewDiagramsIfNeeded(ParsedDeployment parsedDeployment){  final ProcessEngineConfigurationImpl processEngineConfiguration=Context.getProcessEngineConfiguration();  final DeploymentEntity deploymentEntity=parsedDeployment.getDeployment();  final ResourceEntityManager resourceEntityManager=processEngineConfiguration.getResourceEntityManager();  for (  ProcessDefinitionEntity processDefinition : parsedDeployment.getAllProcessDefinitions()) {    if (processDefinitionDiagramHelper.shouldCreateDiagram(processDefinition,deploymentEntity)) {      ResourceEntity resource=processDefinitionDiagramHelper.createDiagramForProcessDefinition(processDefinition,parsedDeployment.getBpmnParseForProcessDefinition(processDefinition));      if (resource != null) {        resourceEntityManager.insert(resource,false);        deploymentEntity.addResource(resource);      }    }  }}  }
class C{  public void removeOwnedEntitiesStateManagers(Collection<OpenJPAStateManager> stateManagersToRestore,OpenJPAStateManager sm){  for (  FieldMetaData fmd : sm.getMetaData().getFields()) {    if (!sm.getLoaded().get(fmd.getIndex()))     continue;    if (fmd.isEmbeddedPC()) {      Object value=sm.fetch(fmd.getDeclaredIndex());      if (value != null) {        PersistenceCapable pc=(PersistenceCapable)value;        OpenJPAStateManager stateManager=(OpenJPAStateManager)pc.pcGetStateManager();        removeOwnedEntitiesStateManagers(stateManagersToRestore,stateManager);        pc.pcReplaceStateManager(null);        stateManagersToRestore.add(stateManager);      }    } else     if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY || isPersistentCollection(fmd)) {      Collection<?> collection=(Collection<?>)sm.fetch(fmd.getIndex());      if (collection != null) {        for (        Object item : collection) {          PersistenceCapable pc=(PersistenceCapable)item;          OpenJPAStateManager stateManager=(OpenJPAStateManager)pc.pcGetStateManager();          if (stateManager != null) {            setOwnerStateManagerForPersistentInstance(item,sm,fmd);            removeOwnedEntitiesStateManagers(stateManagersToRestore,stateManager);            stateManagersToRestore.add(stateManager);            pc.pcReplaceStateManager(null);          }        }      }    } else     if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE) {      Object value=sm.fetch(fmd.getIndex());      if (value != null) {        setOwnerStateManagerForPersistentInstance(value,sm,fmd);        PersistenceCapable pc=(PersistenceCapable)value;        OpenJPAStateManager stateManager=(OpenJPAStateManager)pc.pcGetStateManager();        removeOwnedEntitiesStateManagers(stateManagersToRestore,stateManager);        stateManagersToRestore.add(stateManager);        pc.pcReplaceStateManager(null);      }    }  }}  }
class C{  public static ExecutableElement findInjectedCtor(TypeElement cls,ProcessingEnvironment env){  for (  Element element : cls.getEnclosedElements()) {    if (element.getKind().equals(ElementKind.CONSTRUCTOR) && isInjected(element,env)) {      return (ExecutableElement)element;    }  }  return null;}  }
class C{  private void initDictionaryDirPaths() throws IOException {  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(this.carbonStorePath,carbonTableIdentifier);  String dictionaryLocation=carbonTablePath.getMetadataDirectoryPath();  FileFactory.FileType fileType=FileFactory.getFileType(dictionaryLocation);  if (!FileFactory.isFileExist(dictionaryLocation,fileType)) {    FileFactory.mkdirs(dictionaryLocation,fileType);  }  this.dictionaryFilePath=carbonTablePath.getDictionaryFilePath(columnIdentifier.getColumnId());  this.dictionaryMetaFilePath=carbonTablePath.getDictionaryMetaFilePath(columnIdentifier.getColumnId());}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  public @Nullable VideoCursor fetch(){  return fetch(SortOrder.UNSPECIFIED);}  }
class C{  private static void expand3DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){  if (numberString.charAt(0) == '0') {    expandNumberAt(numberString,1,wordRelation,tokenItem);  } else {    String hundredDigit=digit2num[numberString.charAt(0) - '0'];    wordRelation.addWord(tokenItem,hundredDigit);    wordRelation.addWord(tokenItem,"hundred");    expandNumberAt(numberString,1,wordRelation,tokenItem);  }}  }
class C{  public void addAll(Schema sch){  fields.putAll(sch.fields);  if (myFieldSet != null)   myFieldSet=new TreeSet<String>(fields.keySet());}  }
class C{  private void initializeValues(){  IPreferenceStore store=getPreferenceStore();  String mergeProviderPreference=store.getString(ISVNUIConstants.PREF_MERGE_PROVIDER);  if (mergeProviderPreference == null)   mergeProviders[0].getName();  for (int i=0; i < mergeProviders.length; i++) {    if (mergeProviders[i].getName().equals(mergeProviderPreference)) {      mergeImplementationCombo.setText(mergeProviders[i].getName());      break;    }  }  if (mergeImplementationCombo.getText().length() == 0)   mergeImplementationCombo.setText(mergeProviders[0].getName());  suggestMergeSourcesButton.setSelection(store.getBoolean(ISVNUIConstants.PREF_SUGGEST_MERGE_SOURCES));  suggestMergeSourcesButton.setVisible(mergeImplementationCombo.getText().equals("CollabNet Desktop"));  mergeProgramLocationText.setText(store.getString(ISVNUIConstants.PREF_MERGE_PROGRAM_LOCATION));  mergeProgramParametersText.setText(store.getString(ISVNUIConstants.PREF_MERGE_PROGRAM_PARAMETERS));  if (store.getBoolean(ISVNUIConstants.PREF_MERGE_USE_EXTERNAL)) {    builtInMergeRadioButton.setSelection(false);    externalMergeRadioButton.setSelection(true);  } else {    builtInMergeRadioButton.setSelection(true);    externalMergeRadioButton.setSelection(false);  }  updateEnablements();}  }
class C{  public Fraction(int num,int den){  if (den == 0) {    throw MathRuntimeException.createArithmeticException(ZERO_DENOMINATOR_MESSAGE,num,den);  }  if (den < 0) {    if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {      throw MathRuntimeException.createArithmeticException(OVERFLOW_MESSAGE,num,den);    }    num=-num;    den=-den;  }  final int d=MathUtils.gcd(num,den);  if (d > 1) {    num/=d;    den/=d;  }  if (den < 0) {    num=-num;    den=-den;  }  this.numerator=num;  this.denominator=den;}  }
class C{  private void initThreadPoolSize(){  try {    thread_pool_size=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.NUM_CORES_LOADING,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));  } catch (  NumberFormatException e) {    thread_pool_size=Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  }}  }
class C{  public GroupsSearchQuery sort(GroupsSearchSort value){  return unsafeParam("sort",value);}  }
class C{  public static void initializeScopes(@NotNull Project project){  ModuleManager moduleManager=ModuleManager.getInstance(project);  for (  Module module : moduleManager.getModules()) {    TestArtifactSearchScopes scopes;    AndroidGradleModel androidModel=AndroidGradleModel.get(module);    scopes=androidModel != null ? new TestArtifactSearchScopes(module) : null;    module.putUserData(SEARCH_SCOPES_KEY,scopes);  }}  }
class C{  public ModelKeyMap findKeyMap(String fieldName){  for (  ModelKeyMap keyMap : keyMaps) {    if (keyMap.getFieldName().equals(fieldName))     return keyMap;  }  return null;}  }
class C{  public void expand(TreePath[] paths){  for (  TreePath path : paths) {    this.expand((DefaultMutableTreeNode)path.getLastPathComponent());  }}  }
class C{  @Override public void onError(Throwable responseException){  if (responseException instanceof ResponseException) {    ResponseException resException=(ResponseException)responseException;    publishResponse(httpResponseMaker.buildErrorResponse(resException.getStatusCode(),resException.getReason(),resException.getDescription(),resException.getDruidQuery()));  } else {    LOG.error("Failed to publish error Response",responseException);    throw new RuntimeException("Failed to publish error Response",responseException);  }}  }
class C{  public boolean isRevive(){  return getItemId() == ItemId.ITEM_REVIVE || getItemId() == ItemId.ITEM_MAX_REVIVE;}  }
class C{  public static void toXml(Grid grid,OutputStream out){  XMLWriter writer=XMLFactory.getXMLWriter(out);  writer.openDocument();  writer.openElement(ATTR_GRID,ATTR_TITLE,grid.getTitle(),ATTR_SUBTITLE,grid.getSubtitle(),ATTR_WIDTH,String.valueOf(grid.getWidth()),ATTR_HEIGHT,String.valueOf(grid.getHeight()));  writer.openElement(ATTR_HEADERS);  for (  GridHeader header : grid.getHeaders()) {    writer.writeElement(ATTR_HEADER,null,ATTR_NAME,header.getName(),ATTR_COLUMN,header.getColumn(),ATTR_TYPE,header.getType(),ATTR_HIDDEN,String.valueOf(header.isHidden()),ATTR_META,String.valueOf(header.isMeta()));  }  writer.closeElement();  writer.openElement(ATTR_ROWS);  for (  List<Object> row : grid.getRows()) {    writer.openElement(ATTR_ROW);    for (    Object field : row) {      writer.writeElement(ATTR_FIELD,field != null ? String.valueOf(field) : EMPTY);    }    writer.closeElement();  }  writer.closeElement();  writer.closeElement();  writer.closeDocument();}  }
class C{  public static String tokenText(Element t){  if (!t.getNodeName().equals(MaryXML.TOKEN))   throw new DOMException(DOMException.INVALID_ACCESS_ERR,"Only t elements allowed, received " + t.getNodeName() + ".");  return getPlainTextBelow(t).trim();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  protected Object takeGetMethodValueByField(DataSupport dataSupport,Field field) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (shouldGetOrSet(dataSupport,field)) {    String getMethodName=makeGetterMethodName(field);    return DynamicExecutor.send(dataSupport,getMethodName,null,dataSupport.getClass(),null);  }  return null;}  }
class C{  public static boolean isValidEmail(@NonNull String email){  return !TextUtils.isEmpty(email) && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  public static boolean removeFromCache(String imageUri,DiscCacheAware discCache){  File image=discCache.get(imageUri);  return image.delete();}  }
class C{  public void visitPhpAssignmentExpression(AssignmentExpression assignmentExpression){  PhpPsiElement variable=assignmentExpression.getVariable();  if (null != variable && assignmentExpression.getValue() instanceof BinaryExpression) {    BinaryExpression value=(BinaryExpression)assignmentExpression.getValue();    PsiElement leftOperand=value.getLeftOperand();    PsiElement rightOperand=value.getRightOperand();    if (null == leftOperand || null == rightOperand) {      return;    }    IElementType operation=value.getOperationType();    if (operation == PhpTokenTypes.opPLUS) {      if ((leftOperand.getText().equals("1") && PsiEquivalenceUtil.areElementsEquivalent(rightOperand,variable)) || (rightOperand.getText().equals("1") && PsiEquivalenceUtil.areElementsEquivalent(leftOperand,variable))) {        if (!isArrayAccessOrString(assignmentExpression.getVariable())) {          String strMessage=strProblemDescriptionIncrement.replace("%s%",variable.getText());          holder.registerProblem(assignmentExpression,strMessage,ProblemHighlightType.WEAK_WARNING);        }      }      return;    }    if (operation == PhpTokenTypes.opMINUS) {      if (rightOperand.getText().equals("1") && PsiEquivalenceUtil.areElementsEquivalent(leftOperand,variable) && !isArrayAccessOrString(assignmentExpression.getVariable())) {        String strMessage=strProblemDescriptionDecrement.replace("%s%",variable.getText());        holder.registerProblem(assignmentExpression,strMessage,ProblemHighlightType.WEAK_WARNING);      }    }  }}  }
class C{  public TIntHash(int initialCapacity){  super(initialCapacity);  this._hashingStrategy=this;}  }
class C{  public void showLoadingDialog(){  Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);  LoadingDialog loading=null;  if (frag == null) {    loading=new LoadingDialog(getResources().getString(R.string.wait_a_moment));    FragmentManager fm=getActivity().getSupportFragmentManager();    FragmentTransaction ft=fm.beginTransaction();    loading.show(ft,DIALOG_WAIT_TAG);  } else {    loading=(LoadingDialog)frag;    loading.setShowsDialog(true);  }}  }
class C{  public void eventDispatched(AWTEvent event){  Object source=event.getSource();  if (event instanceof KeyEvent && source instanceof Component) {    if ((SwingUtilities.windowForComponent((Component)source) == _window)) {      ((KeyEvent)event).consume();    }  }}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testProcessInstanceVariableEventsOnStart() throws Exception {  HashMap<String,Object> vars=new HashMap<String,Object>();  vars.put("testVariable","The value");  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",vars);  assertNotNull(processInstance);  assertEquals(1,listener.getEventsReceived().size());  ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNull(event.getTaskId());  assertEquals("testVariable",event.getVariableName());  assertEquals("The value",event.getVariableValue());  listener.clearEventsReceived();}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (this.textField != null) {    expression=getFilterFactory().literal(textField.getText());  }  return expression;}  }
class C{  public int hashCode(){  return hash;}  }
class C{  public void identify(@NotNull List<IdentificationSet> identificationSets){  identificationSets.forEach(null);}  }
class C{  private void startRow(){  mStart=mMargin;  mEnd=mWidth - mMargin;  mTop=mBottom + mMargin;  mBottom=mTop;}  }
class C{  public LazyArray optJSONArray(String key) throws LazyException {  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return null;  if (token.type == LazyNode.VALUE_NULL)   return null;  if (token.type != LazyNode.ARRAY)   throw new LazyException("Requested value is not an array",token);  return new LazyArray(token,cbuf);}  }
class C{  public PhotoInfoObject(){  photo=Mysplash.getInstance().getPhoto();}  }
class C{  public static R1Interval fromPoint(double p){  return new R1Interval(p,p);}  }
class C{  public static SectionSeparator createSectionSeparator(String caption){  return new SectionSeparator(caption);}  }
class C{  private String fmtTime(long time){  return fmtTime(time / 1000.0);}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new Opt(),0);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private static DefaultMutableTreeNode searchNode(boolean isRoot,DefaultMutableTreeNode rootNode,String nodeStr){  DefaultMutableTreeNode node=null;  @SuppressWarnings("rawtypes") Enumeration e=rootNode.breadthFirstEnumeration();  while (e.hasMoreElements()) {    node=(DefaultMutableTreeNode)e.nextElement();    if (isRoot || (node != rootNode)) {      Object userObject=node.getUserObject();      if (nodeStr.equals(userObject.toString())) {        if (node instanceof FileTreeNode) {          if (((FileTreeNode)node).populateDirectories(true)) {            ((DefaultTreeModel)fileSystemTreeComponent.getModel()).nodeStructureChanged(node);          }        }        return node;      }    }  }  return null;}  }
class C{  public TransferableDataItem(NodeInterface destinationTreeNode,TreePath path){  if ((destinationTreeNode != null) && (path != null)) {    Map<NodeInterface,TreePath> selectedData=new LinkedHashMap<NodeInterface,TreePath>();    selectedData.put(destinationTreeNode,path);    internalPopulate(selectedData);  }}  }
class C{  private void saveConfiguration(Document docXMLConfig){  String fileToSaveConf=environment.getProperty(Options.REMOTE_CONFIG_FILE);  if (fileToSaveConf.length() > 0 && docXMLConfig != null) {    log.info("saveConfiguration - saving the process configuration XML in a file " + fileToSaveConf + " due to user request");    File file=new File(fileToSaveConf);    if (file.isDirectory() || !fileToSaveConf.endsWith(".xml")) {      throw new RuntimeException("File name provided by '" + Options.REMOTE_CONFIG_FILE + "' option must end with '.xml'");    }    try {      DOMImplementationLS domImplementation=(DOMImplementationLS)docXMLConfig.getImplementation();      LSSerializer lsSerializer=domImplementation.createLSSerializer();      lsSerializer.writeToURI(docXMLConfig,file.toURI().toURL().toString());    } catch (    java.io.IOException ex) {      log.error("saveConfiguration - Could not save the configuration to the file " + fileToSaveConf,ex);    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public int increment(int val){  if (val < 0) {    return decrement(-val);  }  lock.lock();  int newValue=(value+=val);  lock.unlock();  return newValue;}  }
class C{  @Override public void updateSymbol(TextSymbolizer textSymbolizer){}  }
class C{  public void actionPerformed(ActionEvent ev){  Document doc=getDoc();  if ((doc.getMeganFile().isRMA2File() || doc.getMeganFile().isRMA3File()) && !doc.getMeganFile().isReadOnly()) {    Object object=doc.getSampleAttributeTable().get(doc.getSampleNames().get(0),SampleAttributeTable.DescriptionAttribute);    if (object == null)     object="";    String description=JOptionPane.showInputDialog(getViewer().getFrame(),"A short description:",object);    if (description != null) {      description=description.replaceAll("^ +| +$|( )+","$1");      execute("set description='" + description + "';");    }  } else {    StringBuilder buf=new StringBuilder();    for (    String name : doc.getSampleNames()) {      Object object=doc.getSampleAttributeTable().get(name,SampleAttributeTable.DescriptionAttribute);      if (object != null) {        buf.append(name).append(": ").append(object).append("\n");      }    }    if (buf.length() > 0) {      NotificationsInSwing.showInformation(getViewer().getFrame(),"Description:\n" + buf.toString());    }  }}  }
class C{  private AudioInputStream synthesizeSelectedVocalization(int backchannelNumber,AudioFileFormat aft,Element domElement) throws SynthesisException {  int numberOfBackChannels=unitFileReader.getNumberOfUnits();  if (backchannelNumber >= numberOfBackChannels) {    throw new IllegalArgumentException("This voice has " + numberOfBackChannels + " backchannels only. so it doesn't support unit number "+ backchannelNumber);  }  VocalizationUnit bUnit=unitFileReader.getUnit(backchannelNumber);  Unit[] units=bUnit.getUnits();  String[] unitNames=bUnit.getUnitNames();  long endTime=0l;  for (int i=0; i < units.length; i++) {    int unitDuration=units[i].duration * 1000 / unitFileReader.getSampleRate();    endTime+=unitDuration;    Element element=MaryXML.createElement(domElement.getOwnerDocument(),MaryXML.PHONE);    element.setAttribute("d",Integer.toString(unitDuration));    element.setAttribute("end",Long.toString(endTime));    element.setAttribute("p",unitNames[i]);    domElement.appendChild(element);  }  return this.vSynthesizer.synthesize(backchannelNumber,aft);}  }
class C{  public CreateIndexData(String idxName,String tblName,String fldName,int idxType){  this.idxName=idxName;  this.tblName=tblName;  this.fldName=fldName;  this.idxType=idxType;}  }
class C{  private static float computeDashLength(float dashLength,float xToYRatio,long prevX,long prevY,long currX,long currY,double prevXNorm,double prevYNorm,double currXNorm,double currYNorm){  float xDiff=currX - prevX;  float yDiff=currY - prevY;  float xDiffScaled=xDiff * xToYRatio;  float angle=(float)Math.atan2(yDiff,xDiffScaled);  float xRatio=(float)Math.cos(angle);  float yRatio=(float)Math.sin(angle);  float length=(float)Math.sqrt(Math.pow(dashLength * xRatio,2) + Math.pow(dashLength * xToYRatio * yRatio,2));  float h=(float)Math.sqrt(xDiff * xDiff + yDiff * yDiff);  float numDashes=h / length;  float xDiffNorm=(float)(currXNorm - prevXNorm);  float yDiffNorm=(float)(currYNorm - prevYNorm);  float hNorm=(float)Math.sqrt(xDiffNorm * xDiffNorm + yDiffNorm * yDiffNorm);  return hNorm / numDashes;}  }
class C{  public JSpaceServiceImpl(String[] configArgs,LifeCycle lifeCycle) throws Exception {  super(lifeCycle);  final Configuration config=ConfigurationProvider.getInstance(configArgs,getClass().getClassLoader());  init(config);  String cacheUrl=System.getProperty(SpaceURL.CACHE_URL_PROP,_spaceUrl);  if (cacheUrl != null) {    _spaceProxy=SpaceFinder.find(cacheUrl,null,lifeCycle,null);    if (_spaceProxy instanceof IJSpace) {      _spaceProxy=((IJSpace)_spaceProxy).getDirectProxy().getNonClusteredProxy();    }  } else {    Properties _customPropsObj=null;    if (_customPropertiesFileName != null)     _customPropsObj=ResourceLoader.findCustomPropertiesObj(_customPropertiesFileName);    _spaceAttr=new JSpaceAttributes(_schemaName,_clusterConfigURL);    if (_customPropsObj != null) {      _customPropsObj.setProperty(SpaceURL.PROPERTIES_FILE_NAME,_customPropertiesFileName);      _spaceAttr.setCustomProperties(_customPropsObj);    }    String spaceFileURL=SystemInfo.singleton().locations().config() + File.separator + _spaceName+ ".xml";    if (new File(spaceFileURL).exists()) {      ReplaceInFileUtils updateFile=new ReplaceInFileUtils(spaceFileURL);      updateFile.xmlReplace(Constants.Cluster.IS_CLUSTER_SPACE_PROP,_clusterConfigURL != null ? "true" : "false");      if (_clusterConfigURL != null)       updateFile.xmlReplace(Constants.Cluster.CLUSTER_CONFIG_URL_PROP,_clusterConfigURL);      updateFile.close();    }    _spaceContainer=initContainer(lifeCycle,_containerName,_schemaName,_customPropsObj);    try {      _spaceProxy=_spaceContainer.getClusteredSpace(_spaceName);    } catch (    NoSuchNameException ex) {      try {        _spaceProxy=_spaceContainer.createSpace(_spaceName,_spaceAttr);      } catch (      Exception ex1) {        if (_logger.isLoggable(Level.SEVERE))         _logger.log(Level.SEVERE,ex1.toString(),ex1);      }    }  }}  }
class C{  public int compare(IEntryPacket e1,IEntryPacket e2){  if (e1 == null) {    if (e2 == null)     return 0;    return -1;  }  if (e2 == null)   return 1;  int rc=0;  for (int i=0; i < groupColumns.size(); i++) {    SelectColumn groupCol=groupColumns.get(i);    Object obj1=_queryResult.getFieldValue(groupCol,e1);    Object obj2=_queryResult.getFieldValue(groupCol,e2);    if (obj1 == null && obj2 == null)     rc=0; else     if (obj1 == null && obj2 != null)     rc=-1; else     if (obj1 != null && obj2 == null)     rc=1; else     rc=((Comparable)obj1).compareTo(obj2);    if (rc != 0)     return rc;  }  return rc;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  private void scheduleNewInvoker(){  AsyncEventListenerInvoker invoker=new AsyncEventListenerInvoker();  this.taskExecutor.execute(invoker);  this.scheduledInvokers.add(invoker);  this.activeInvokerMonitor.notifyAll();}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_IT_CAN_NOT_BE_GIVEN_OPTION_MORE_TIME(String value0){  return new SM_SYSTEM_MESSAGE(1300461,value0);}  }
class C{  public static final double feetToMeters(double feet){  return feet * FOOT_TO_METER;}  }
class C{  protected PaginationComparator(String defaultSortOrder){  this.sortOrder=defaultSortOrder;}  }
class C{  public long put(short key,long value){  int index=insertionIndex(key);  return doPut(key,value,index);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_AERIALGATHERING_INFO_UPGRADE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1330068,value0,value1);}  }
class C{  public SafeArray(int initialCapacity){  _elements=(T[])new Object[initialCapacity];}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL.charAt(zzCurrentPosL++); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL.charAt(zzCurrentPosL++);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 34:{        return LTLT;      }case 58:    break;case 23:{    return RPARENTH;  }case 59:break;case 14:{return TILDE;}case 60:break;case 12:{return LT;}case 61:break;case 4:{return INTEGER_LITERAL;}case 62:break;case 35:{return GTEQ;}case 63:break;case 46:{return LONG_KEYWORD;}case 64:break;case 27:{return LONG_LITERAL;}case 65:break;case 11:{return EXCL;}case 66:break;case 40:{return CHARACTER_LITERAL;}case 67:break;case 38:{return ANDAND;}case 68:break;case 52:{return CLASS_KEYWORD;}case 69:break;case 20:{return XOR;}case 70:break;case 50:{return FLOAT_KEYWORD;}case 71:break;case 25:{return RBRACKET;}case 72:break;case 49:{return FALSE;}case 73:break;case 28:{return FLOAT_LITERAL;}case 74:break;case 26:{return COMMA;}case 75:break;case 5:{return DOT;}case 76:break;case 53:{return SHORT_KEYWORD;}case 77:break;case 48:{return VOID_KEYWORD;}case 78:break;case 37:{return QUESTQUEST;}case 79:break;case 19:{return OR;}case 80:break;case 7:{return STRING_LITERAL;}case 81:break;case 9:{return DIV;}case 82:break;case 22:{return LPARENTH;}case 83:break;case 8:{return COLON;}case 84:break;case 45:{return NULL;}case 85:break;case 31:{return EQEQ;}case 86:break;case 18:{return AND;}case 87:break;case 55:{return BOOLEAN_KEYWORD;}case 88:break;case 54:{return DOUBLE_KEYWORD;}case 89:break;case 21:{return PERC;}case 90:break;case 30:{return LAMBDA;}case 91:break;case 29:{return DOUBLE_LITERAL;}case 92:break;case 39:{return OROR;}case 93:break;case 13:{return GT;}case 94:break;case 47:{return CHAR_KEYWORD;}case 95:break;case 24:{return LBRACKET;}case 96:break;case 15:{return QUEST;}case 97:break;case 32:{return NE;}case 98:break;case 6:{return MINUS;}case 99:break;case 51:{return RESOURCE_REFERENCE;}case 100:break;case 44:{return BYTE_KEYWORD;}case 101:break;case 56:{return DEFAULT_KEYWORD;}case 102:break;case 2:{return com.intellij.psi.TokenType.WHITE_SPACE;}case 103:break;case 43:{return TRUE;}case 104:break;case 17:{return ASTERISK;}case 105:break;case 57:{return INSTANCEOF_KEYWORD;}case 106:break;case 41:{return INT_KEYWORD;}case 107:break;case 3:{return IDENTIFIER;}case 108:break;case 42:{return GTGTGT;}case 109:break;case 10:{return EQ;}case 110:break;case 16:{return PLUS;}case 111:break;case 36:{return GTGT;}case 112:break;case 1:{return com.intellij.psi.TokenType.BAD_CHARACTER;}case 113:break;case 33:{return LE;}case 114:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private static String findMatchInArray(String strToMatch,String[] matchInArray,String[] returnInArray){  for (int i=0; i < matchInArray.length; i++) {    if (strToMatch.equals(matchInArray[i])) {      if (i < returnInArray.length) {        return returnInArray[i];      } else {        return null;      }    }  }  return null;}  }
class C{  public DefaultErrorHandler(){  this(new PrintWriter(System.err));}  }
class C{  @NotNull public DetectFaceAction detectFace(boolean returnFaceId,boolean returnFaceLandmarks,@NotNull EnumSet<FaceAttributes> returnFaceAttributes,@NotNull String imageUrl){  return new DetectFaceAction(cognitiveContext,returnFaceId,returnFaceLandmarks,returnFaceAttributes,imageUrl);}  }
class C{  @Override public boolean isCellEditable(EventObject evt){  return true;}  }
class C{  public StatusGetQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  private Solver(final double[] realEigenvalues,final double[] imagEigenvalues,final ArrayRealVector[] eigenvectors){  this.realEigenvalues=realEigenvalues;  this.imagEigenvalues=imagEigenvalues;  this.eigenvectors=eigenvectors;}  }
class C{  public synchronized AbstractEntryReplicaData produceNextData(ISynchronizationCallback syncCallback){  if (isForcedClose()) {    throw new RuntimeException("space=" + _engine.getFullSpaceName() + " replica forced closing");  }  if (_isClosed)   return null;  try {    while (true) {      if (isForcedClose()) {        this.notifyAll();        throw new RuntimeException("space=" + _engine.getFullSpaceName() + " replica forced closing");      }      IEntryHolder entry=_entriesIterSA.next();      AbstractEntryReplicaData replicaData=produceDataFromEntry(syncCallback,entry);      if (replicaData == null && !_isClosed) {        continue;      }      if (replicaData == null && _isClosed) {        return null;      }      return replicaData;    }  } catch (  Exception ex) {    throw new ReplicationInternalSpaceException("Failure in .",ex);  }}  }
class C{  public FriendsGetRecentQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static Quaternion subtract(final Quaternion q1,final Quaternion q2){  return new Quaternion(q1.getQ0() - q2.getQ0(),q1.getQ1() - q2.getQ1(),q1.getQ2() - q2.getQ2(),q1.getQ3() - q2.getQ3());}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public BucketDeleteEvent(UserInfo user,ExperimentBase experiment,Bucket bucket){  super(user);  this.experiment=experiment;  this.bucket=bucket;  this.appName=experiment.getApplicationName();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OutofSight_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200914,skilltarget,skillcaster,skillname);}  }
class C{  public InnerClassAttr(){  list=new ArrayList();}  }
class C{  public void error(String message,Object... params){  diagCollector.addDiag(Diag.error(sourceLocation,message,params));}  }
class C{  public SLDTreeTools(){  createUI();}  }
class C{  private void removeEntry(){  model.removeEntries(table.getSelectionModel().getMinSelectionIndex(),table.getSelectionModel().getMaxSelectionIndex());  removeButton.setEnabled(false);}  }
class C{  public Object removeInternalSetting(Object key){  Object removed=null;  if (_internalSettings != null) {    removed=_internalSettings.remove(key);    if (_internalSettings.size() == 0) {      _internalSettings=null;    }  }  return removed;}  }
class C{  private synchronized void removeRange(int fromIndex,int toIndex){  Object[] elements=getArray();  int len=elements.length;  if (fromIndex < 0 || fromIndex >= len || toIndex > len || toIndex < fromIndex)   throw new IndexOutOfBoundsException();  int newlen=len - (toIndex - fromIndex);  int numMoved=len - toIndex;  if (numMoved == 0)   setArray(copyOf(elements,newlen)); else {    Object[] newElements=new Object[newlen];    System.arraycopy(elements,0,newElements,0,fromIndex);    System.arraycopy(elements,toIndex,newElements,fromIndex,numMoved);    setArray(newElements);  }}  }
class C{  @NonNull public static Observable<String> task2(@NonNull Observable<String> observable){  return Observable.just("");}  }
class C{  public <T>void putEnv(String key,T value){  String ekey=this.expandString(key);  FlexibleMapAccessor<T> fma=FlexibleMapAccessor.getInstance(ekey);  this.putEnv(fma,value);}  }
class C{  public boolean isGenericHide(){  return isOptionEnabled(UrlFilterRuleOption.GENERIC_HIDE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200782,skilltarget);}  }
class C{  public WeaponCursor queryWeapon(){  return mHelper.queryWeapon();}  }
class C{  @Override protected void onPostExecute(Boolean result){  if (mCurrentDialog != null) {    mCurrentDialog.dismiss();    mCurrentDialog=null;  }  if (result) {    Intent data=new Intent();    data.putExtra(EXTRA_CHOSEN_FILES,mFileListFragment.getCheckedFilePaths());switch (mBehaviourSpinner.getSelectedItemPosition()) {case 0:      setResult(RESULT_OK_AND_MOVE,data);    break;case 1:  setResult(RESULT_OK_AND_DO_NOTHING,data);break;case 2:setResult(RESULT_OK_AND_DELETE,data);break;}PreferenceManager.setUploaderBehaviour(getApplicationContext(),mBehaviourSpinner.getSelectedItemPosition());finish();} else {String[] args={getString(R.string.app_name)};ConfirmationDialogFragment dialog=ConfirmationDialogFragment.newInstance(R.string.upload_query_move_foreign_files,args,0,R.string.common_yes,-1,R.string.common_no);dialog.setOnConfirmationListener(UploadFilesActivity.this);dialog.show(getSupportFragmentManager(),QUERY_TO_MOVE_DIALOG_TAG);}}  }
class C{  public ConfigurationChangeEventReport(final int initialCapacity){  changeReports=new ArrayList<ChangeReport>(initialCapacity);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private void runExecutorAndAwaitCompletion(){  try {    executor.awaitCompletion();  } catch (  InterruptedException e) {    e.printStackTrace();  }  Throwable exception=executor.getException();  if (exception != null) {    throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);  }}  }
class C{  public boolean isValidLocalTld(String lTld){  lTld=unicodeToASCII(lTld);  return Arrays.binarySearch(LOCAL_TLDS,chompLeadingDot(lTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=StringCodingUtils.getBytes(input,Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public AirMapStatus(JSONObject statusJson){  constructFromJson(statusJson);}  }
class C{  public void abandon(){  abandon(new ConversationAbandonedEvent(this,new ManuallyAbandonedConversationCanceller()));}  }
class C{  public TObjectIntHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  @After public final void afterTest(){  this.testMessageListenerContainer.stop();}  }
class C{  public DefaultChunkListDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize,int chunkSize){  super(hQuery,sessionFactory,fetchSize,chunkSize);}  }
class C{  public boolean decrypt(byte[] data,int offset,int length){  cipher.decipher(data,offset,length);  return verifyChecksum(data,offset,length);}  }
class C{  static ByteBufferRange decode(String string){  int prefix=string.indexOf(':');  int sep=string.indexOf('-',prefix + 1);  checkArgument(prefix >= 0 && sep >= 0,"Invalid split string: %s",string);  char[] start=new char[prefix + sep - (prefix + 1)];  string.getChars(0,prefix,start,0);  string.getChars(prefix + 1,sep,start,prefix);  char[] end=new char[prefix + string.length() - (sep + 1)];  string.getChars(0,prefix,end,0);  string.getChars(sep + 1,string.length(),end,prefix);  byte[] startBytes, endBytes;  try {    startBytes=Hex.decodeHex(start);    endBytes=Hex.decodeHex(end);  } catch (  DecoderException e) {    throw new IllegalArgumentException(format("Invalid split string: %s",string));  }  return new ByteBufferRangeImpl(ByteBuffer.wrap(startBytes),ByteBuffer.wrap(endBytes),-1,false);}  }
class C{  public void init(ISpaceProxy space,Transaction txn,AbstractDMLQuery query) throws Exception {  IQueryResultSet<IEntryPacket> tableEntries=getTemplate(query.getQueryResultType()).readMultiple(space,txn,Integer.MAX_VALUE,query.getReadModifier());  if (_joinCondition != null)   setEntriesCursor(_joinCondition.createIndex(this,tableEntries)); else   setEntriesCursor(new ScanCursor(tableEntries));}  }
