class C{  void applyTo(DayViewFacade other){  if (selectionDrawable != null) {    other.setSelectionDrawable(selectionDrawable);  }  if (backgroundDrawable != null) {    other.setBackgroundDrawable(backgroundDrawable);  }  other.spans.addAll(spans);  other.isDecorated|=this.isDecorated;  other.daysDisabled=daysDisabled;}  }
class C{  public SVGSVGElementBridge(){}  }
class C{  protected String handleTimestamp(Timestamp timestamp,String timestampFormatString){  SimpleDateFormat timeFormat=new SimpleDateFormat(timestampFormatString);  return timestamp == null ? null : timeFormat.format(timestamp);}  }
class C{  public Vector3(float[] values){  this.set(values[0],values[1],values[2]);}  }
class C{  protected void appendEncodedStringValue(EncodedStringValue value,int field){  if (null == value) {    throw new NullPointerException();  }switch (field) {case BCC:case CC:case TO:    break;default :  throw new RuntimeException("Invalid header field!");}ArrayList<EncodedStringValue> list=(ArrayList<EncodedStringValue>)mHeaderMap.get(field);if (null == list) {list=new ArrayList<EncodedStringValue>();}list.add(value);mHeaderMap.put(field,list);}  }
class C{  public static String encrypt(String value){  if (value == null || value.length() == 0)   return value;  if (s_engine == null)   init(System.getProperties());  boolean inQuotes=value.startsWith("'") && value.endsWith("'");  if (inQuotes)   value=value.substring(1,value.length() - 1);  String retValue=s_engine.implementation.encrypt(value);  if (inQuotes)   return "'" + retValue + "'";  return retValue;}  }
class C{  public static String readUTF(DataInput in) throws IOException {  return DataInputStream.readUTF(in);}  }
class C{  public static boolean isISODigit(char c){  return c >= '0' && c <= '9';}  }
class C{  protected FocusListener createFocusListener(){  return getHandler();}  }
class C{  public void readShortArray(short vec[],int offset,int len) throws EOFException, FormatException {  while (len > 0) {    int shortsleft=bytesinbuffer / 2;    if (shortsleft == 0) {      assertSize(2);      continue;    }    int reallyread=(len < shortsleft) ? len : shortsleft;    if (MSBFirst) {      for (int i=0; i < reallyread; i++) {        vec[offset++]=MoreMath.BuildShortBE(buffer,curptr);        curptr+=2;      }    } else {      for (int i=0; i < reallyread; i++) {        vec[offset++]=MoreMath.BuildShortLE(buffer,curptr);        curptr+=2;      }    }    len-=reallyread;    bytesinbuffer-=(2 * reallyread);  }}  }
class C{  public static String toString(final float value){  return Float.toString(value);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRequest[");  sb.append(get_ID()).append("-").append(getDocumentNo()).append("]");  return sb.toString();}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info(toString());  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  setProcessed(true);  setDocAction(ACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public static int[] convertToIntArray(long[] longArray){  int[] intArray=new int[longArray.length];  for (int i=0; i < longArray.length; i++) {    intArray[i]=(int)longArray[i];  }  return intArray;}  }
class C{  public InlineQueryResponse.InlineQueryResponseBuilder isPersonal(boolean isPersonal){  this.is_personal=isPersonal;  return this;}  }
class C{  public static boolean isTest(Class<?> cls){  if (Modifier.isAbstract(cls.getModifiers())) {    return false;  }  TestClass tc;  try {    tc=new TestClass(cls);  } catch (  IllegalArgumentException e) {    return false;  }catch (  RuntimeException e) {    throw new RuntimeException("Failed to analyze class " + cls.getName() + " due to: "+ e.toString());  }  try {    List<FrameworkMethod> methods=new ArrayList<>();    methods.addAll(tc.getAnnotatedMethods(Test.class));    methods.addAll(tc.getAnnotatedMethods(EvoSuiteTest.class));    for (    FrameworkMethod method : methods) {      List<Throwable> errors=new ArrayList<Throwable>();      method.validatePublicVoidNoArg(false,errors);      if (errors.isEmpty()) {        return true;      }    }  } catch (  IllegalArgumentException e) {    return false;  }  Class<?> superClass=cls;  while ((superClass=superClass.getSuperclass()) != null) {    if (superClass.getCanonicalName().equals(Object.class.getCanonicalName())) {      break;    } else     if (superClass.getCanonicalName().equals(TestCase.class.getCanonicalName())) {      return true;    }  }  return false;}  }
class C{  public long randomLong(){  x^=(x << 21);  x^=(x >>> 35);  x^=(x << 4);  return x;}  }
class C{  private static long CallNonvirtualLongMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualLongMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Long,true);    return Reflection.unwrapLong(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static boolean aboveThan(int a,int b){  return Integer.compareUnsigned(a,b) > 0;}  }
class C{  private void copyLocalizedPricemodelValues(Product targetProduct,Product sourceProduct){  List<VOLocalizedText> localizedValues;  final PriceModel priceModelTarget=targetProduct.getPriceModel();  final PriceModel priceModelSource=sourceProduct.getType() == ServiceType.PARTNER_TEMPLATE ? sourceProduct.getTemplate().getPriceModel() : sourceProduct.getPriceModel();  if ((priceModelTarget != null) && (priceModelSource != null)) {    long targetKey=targetProduct.getPriceModel().getKey();    long sourceKey=priceModelSource.getKey();    localizedValues=localizer.getLocalizedValues(sourceKey,LocalizedObjectTypes.PRICEMODEL_DESCRIPTION);    if (localizedValues != null && !localizedValues.isEmpty()) {      localizer.storeLocalizedResources(targetKey,LocalizedObjectTypes.PRICEMODEL_DESCRIPTION,localizedValues);    }    if (sourceProduct.getVendor().getGrantedRoleTypes().contains(OrganizationRoleType.RESELLER)) {      localizedValues=localizer.getLocalizedValues(sourceProduct.getKey(),LocalizedObjectTypes.RESELLER_PRICEMODEL_LICENSE);    } else {      localizedValues=localizer.getLocalizedValues(sourceKey,LocalizedObjectTypes.PRICEMODEL_LICENSE);    }    if (localizedValues != null && !localizedValues.isEmpty()) {      localizer.storeLocalizedResources(targetKey,LocalizedObjectTypes.PRICEMODEL_LICENSE,localizedValues);    }  }}  }
class C{  public boolean isTrue(){  return false;}  }
class C{  public final void destroyFixture(Fixture fixture){  assert (m_world.isLocked() == false);  if (m_world.isLocked() == true) {    return;  }  assert (fixture.m_body == this);  assert (m_fixtureCount > 0);  Fixture node=m_fixtureList;  Fixture last=null;  boolean found=false;  while (node != null) {    if (node == fixture) {      node=fixture.m_next;      found=true;      break;    }    last=node;    node=node.m_next;  }  assert (found);  if (last == null) {    m_fixtureList=fixture.m_next;  } else {    last.m_next=fixture.m_next;  }  ContactEdge edge=m_contactList;  while (edge != null) {    Contact c=edge.contact;    edge=edge.next;    Fixture fixtureA=c.getFixtureA();    Fixture fixtureB=c.getFixtureB();    if (fixture == fixtureA || fixture == fixtureB) {      m_world.m_contactManager.destroy(c);    }  }  if ((m_flags & e_activeFlag) == e_activeFlag) {    BroadPhase broadPhase=m_world.m_contactManager.m_broadPhase;    fixture.destroyProxies(broadPhase);  }  fixture.destroy();  fixture.m_body=null;  fixture.m_next=null;  fixture=null;  --m_fixtureCount;  resetMassData();}  }
class C{  public DataTypeException(String message){  super(message);}  }
class C{  public void reset(){  currentBlockIndex=0;  size=0;  for (  Block block : blocks.values()) {    block.reset();  }}  }
class C{  protected void createExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ActionNotAllowedException {  if (validate(mapping,form,request,response) == false) {    setReturnActionFordward(request,mapping.findForward("create-failed"));    return;  }  try {    ServiceRepository services=getServiceRepository(request);    GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();    FormatoFichasForm fichasForm=(FormatoFichasForm)form;    FmtFichaVO fmtFichaVO=fichasForm.populate(new FmtFichaVO());    fmtFichaVO=descripcionService.createFmtFicha(fmtFichaVO);    goReturnPointExecuteLogic(mapping,form,request,response);  } catch (  ActionNotAllowedException anae) {    guardarError(request,anae);    setReturnActionFordward(request,mapping.findForward("create-failed"));  }}  }
class C{  private void sendHandshakeRequest(String key) throws IOException {  try {    String path="/mqtt";    URI srvUri=new URI(uri);    if (srvUri.getRawPath() != null && !srvUri.getRawPath().isEmpty()) {      path=srvUri.getRawPath();      if (srvUri.getRawQuery() != null && !srvUri.getRawQuery().isEmpty()) {        path+="?" + srvUri.getRawQuery();      }    }    PrintWriter pw=new PrintWriter(output);    pw.print("GET " + path + " HTTP/1.1"+ LINE_SEPARATOR);    pw.print("Host: " + host + ":"+ port+ LINE_SEPARATOR);    pw.print("Upgrade: websocket" + LINE_SEPARATOR);    pw.print("Connection: Upgrade" + LINE_SEPARATOR);    pw.print("Sec-WebSocket-Key: " + key + LINE_SEPARATOR);    pw.print("Sec-WebSocket-Protocol: mqttv3.1" + LINE_SEPARATOR);    pw.print("Sec-WebSocket-Version: 13" + LINE_SEPARATOR);    pw.print(LINE_SEPARATOR);    pw.flush();  } catch (  URISyntaxException e) {    throw new IllegalStateException(e);  }}  }
class C{  private static void DisplayHelpAndExit(EXIT_CODE exitCode){  HelpFormatter formatter=new HelpFormatter();  formatter.setWidth(120);  formatter.printHelp("tkeystoremanager",keystoreManager.options);  Exit(exitCode);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private static int magnitude(double x){  double xAbs=Math.abs(x);  double xLog10=Math.log(xAbs) / Math.log(10);  int xMag=(int)Math.floor(xLog10);  double xApprox=Math.pow(10,xMag);  if (xApprox * 10 <= xAbs)   xMag+=1;  return xMag;}  }
class C{  public void removeActor(TvShowActor obj){  actors.remove(obj);  firePropertyChange(ACTORS,null,this.getActors());}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((SerialListener)client).message((SerialMessage)m);}  }
class C{  protected int handleNext(){  CharacterIterator text=getText();  if (text.getIndex() == text.getEndIndex()) {    return BreakIterator.DONE;  }  int result=getNextIndex();  int lookaheadResult=0;  int state=START_STATE;  int category;  int c=getCurrent();  while (c != CharacterIterator.DONE && state != STOP_STATE) {    category=lookupCategory(c);    if (category != IGNORE) {      state=lookupState(state,category);    }    if (lookaheadStates[state]) {      if (endStates[state]) {        result=lookaheadResult;      } else {        lookaheadResult=getNextIndex();      }    } else {      if (endStates[state]) {        result=getNextIndex();      }    }    c=getNext();  }  if (c == CharacterIterator.DONE && lookaheadResult == text.getEndIndex()) {    result=lookaheadResult;  }  text.setIndex(result);  return result;}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public double pdf(int k){  if (k < 0)   throw new IllegalArgumentException();  int r=this.n - k;  return Math.exp(this.log_n - Arithmetic.logFactorial(k) - Arithmetic.logFactorial(r) + this.log_p * k + this.log_q * r);}  }
class C{  public boolean hasImAddresses(){  return hasRepeatingExtension(Im.class);}  }
class C{  @Override public StringBuilder toStringBuilder(){  StringBuilder result=null;  if (isNonGeoOnly()) {    result=new StringBuilder();    appendSubFields(result,NON_GEO_ONLY);    appendSubFields(result,"");  } else {    result=super.toStringBuilder();  }  appendSubFields(result,format(getDateMin()),format(getDateMax()));  appendSubFields(result,format(getPath()));  return result;}  }
class C{  public void recycle(){  clearForRecycle();synchronized (sPoolSync) {    if (sPoolSize < MAX_POOL_SIZE) {      next=sPool;      sPool=this;      sPoolSize++;    }  }}  }
class C{  public void postCommentOnMedia(InstagramAPIResponseCallback<IGPostResponse> callback,String commentText,String mediaId){  Call<IGAPIResponse> call=instagramAPIService.postCommentOnMedia(commentText,mediaId,getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<IGPostResponse>(){  }.getType()));}  }
class C{  public void eachRow(Closure closure) throws SQLException {  while (next()) {    closure.call(this);  }}  }
class C{  public IntervalRatioStatisticalTest(int numberOfGroups){  super();  this.numberOfGroups=numberOfGroups;  data=new ArrayList<Observation>();}  }
class C{  public static <T,K,L extends List<T>>BiConsumer<Partition<T,K,L>,T> scheduleEvictIfEmpty(long time,TimeUnit unit){  return null;}  }
class C{  public void addCount(){  count++;}  }
class C{  private void paintTiledIcon(Component c,Graphics g,ImageIcon icon,int sX,int sY,int width,int height){  int tileW=icon.getIconWidth();  int tileH=icon.getIconHeight();  width+=sX;  height+=sY;  for (int x=sX; x <= width; x+=tileW) {    for (int y=sY; y <= height; y+=tileH) {      icon.paintIcon(c,g,x,y);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.181 -0500",hash_original_method="9DE177160064B2A1F8C9D8228C599CDD",hash_generated_method="99855744DDC8DFBEDF34A8222C83CBF1") public void translatePointInScreenToAppWindow(PointF point){  final float scale=applicationInvertedScale;  if (scale != 1.0f) {    point.x*=scale;    point.y*=scale;  }}  }
class C{  public PublishResponse Publish(RequestHeader RequestHeader,SubscriptionAcknowledgement... SubscriptionAcknowledgements) throws ServiceFaultException, ServiceResultException {  PublishRequest req=new PublishRequest(RequestHeader,SubscriptionAcknowledgements);  return (PublishResponse)channel.serviceRequest(req);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (((PLA_HeaderViewListAdapter)mAdapter).removeHeader(v)) {      mDataSetObserver.onChanged();      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public MatrixElement(final int row,final int col,final double value){  this.row=row;  this.col=col;  this.value=value;}  }
class C{  public void put(double[] val,double weight){  assert (val.length == elements.length);  if (weight == 0) {    return;  }  final double nwsum=weight + wsum;  for (int i=0; i < elements.length; i++) {    final double delta=val[i] - elements[i];    final double rval=delta * weight / nwsum;    elements[i]+=rval;  }  wsum=nwsum;}  }
class C{  public static ActiveLagGraph serializableInstance(){  return new RandomActiveLagGraph(LagGraphParams.serializableInstance());}  }
class C{  public TreeRTGPiceaSitchensis(){  super();  this.logBlock=BlockUtil.getStateLog(1);  this.leavesBlock=BlockUtil.getStateLeaf(1);  this.trunkSize=8;  this.crownSize=10;  this.noLeaves=false;}  }
class C{  private void readTrailer(PDFPassword password) throws IOException, PDFAuthenticationFailureException, EncryptionUnsupportedByProductException, EncryptionUnsupportedByPlatformException {  objIdx=new PDFXref[50];  int pos=buf.position();  PDFDecrypter newDefaultDecrypter=null;  while (true) {    if (!nextItemIs("xref")) {      buf.position(pos);      readTrailer15(password);      return;    }    while (true) {      PDFObject obj=readObject(-1,-1,IdentityDecrypter.getInstance());      if (obj.getType() == PDFObject.KEYWORD && obj.getStringValue().equals("trailer")) {        break;      }      if (obj.getType() != PDFObject.NUMBER) {        throw new PDFParseException("Expected number for first xref entry");      }      int refstart=obj.getIntValue();      obj=readObject(-1,-1,IdentityDecrypter.getInstance());      if (obj.getType() != PDFObject.NUMBER) {        throw new PDFParseException("Expected number for length of xref table");      }      int reflen=obj.getIntValue();      readLine();      if (refstart + reflen >= objIdx.length) {        PDFXref nobjIdx[]=new PDFXref[refstart + reflen];        System.arraycopy(objIdx,0,nobjIdx,0,objIdx.length);        objIdx=nobjIdx;      }      for (int refID=refstart; refID < refstart + reflen; refID++) {        byte[] refline=new byte[20];        buf.get(refline);        if (objIdx[refID] != null) {          continue;        }        if (refline[17] == 'n') {          objIdx[refID]=new PDFXref(refline);        } else {          objIdx[refID]=new PDFXref(null);        }      }    }    PDFObject trailerdict=readObject(-1,-1,IdentityDecrypter.getInstance());    if (trailerdict.getType() != PDFObject.DICTIONARY) {      throw new IOException("Expected dictionary after \"trailer\"");    }    if (root == null) {      root=trailerdict.getDictRef("Root");      if (root != null) {        root.setObjectId(PDFObject.OBJ_NUM_TRAILER,PDFObject.OBJ_NUM_TRAILER);      }    }    if (encrypt == null) {      encrypt=trailerdict.getDictRef("Encrypt");      if (encrypt != null) {        encrypt.setObjectId(PDFObject.OBJ_NUM_TRAILER,PDFObject.OBJ_NUM_TRAILER);      }      newDefaultDecrypter=PDFDecrypterFactory.createDecryptor(encrypt,trailerdict.getDictRef("ID"),password);    }    if (info == null) {      info=trailerdict.getDictRef("Info");      if (info != null) {        if (!info.isIndirect()) {          throw new PDFParseException("Info in trailer must be an indirect reference");        }        info.setObjectId(PDFObject.OBJ_NUM_TRAILER,PDFObject.OBJ_NUM_TRAILER);      }    }    PDFObject xrefstmPos=trailerdict.getDictRef("XRefStm");    if (xrefstmPos != null) {      System.out.println("XRefStm:" + xrefstmPos.getIntValue());      int pos14=buf.position();      buf.position(xrefstmPos.getIntValue());      readTrailer15(password);      buf.position(pos14);    }    PDFObject prevloc=trailerdict.getDictRef("Prev");    if (prevloc != null) {      buf.position(prevloc.getIntValue());    } else {      break;    }    if (root.getDictRef("Version") != null) {      processVersion(root.getDictRef("Version").getStringValue());    }  }  if (root == null) {    throw new PDFParseException("No /Root key found in trailer dictionary");  }  if (encrypt != null) {    PDFObject permissions=encrypt.getDictRef("P");    if (permissions != null && !newDefaultDecrypter.isOwnerAuthorised()) {      int perms=permissions != null ? permissions.getIntValue() : 0;      if (permissions != null) {        printable=(perms & 4) != 0;        saveable=(perms & 16) != 0;      }    }    defaultDecrypter=newDefaultDecrypter;  }  root.dereference();}  }
class C{  protected void addUsageDetails(Long roleKey,UsageDetails details){  if (roleAssignmentDetails.containsKey(roleKey)) {    UsageDetails entry=roleAssignmentDetails.get(roleKey);    entry.addUsagePeriods(details.getUsagePeriods());    entry.setFactor(entry.getFactor() + details.getFactor());  } else {    putUsageDetails(roleKey,details);  }}  }
class C{  public Call(String method){  serviceMethodName=method;}  }
class C{  protected void alert(byte level,byte description){  if (logger != null) {    logger.println("SSLRecordProtocol.allert: " + level + " "+ description);  }  alertProtocol.alert(level,description);}  }
class C{  public void init(){  if (!_lifecycle.toActive()) {    return;  }  try {    sendAddLoaderEvent();    ArrayList<EnvLoaderListener> listeners=getListeners();    if (listeners != null) {      for (int i=0; i < listeners.size(); i++) {        EnvLoaderListener listener=listeners.get(i);        listener.classLoaderInit(this);      }    }  } catch (  Exception e) {    log().log(Level.WARNING,e.toString(),e);  }}  }
class C{  public void pathValuesToPixel(List<Path> paths){  for (int i=0; i < paths.size(); i++) {    pathValueToPixel(paths.get(i));  }}  }
class C{  public void reduce(FloatWritable key,Iterator<SelectorEntry> values,OutputCollector<FloatWritable,SelectorEntry> output,Reporter reporter) throws IOException {  while (values.hasNext()) {    if (count == limit) {      if (currentsegmentnum < maxNumSegments) {        count=0;        currentsegmentnum++;      } else       break;    }    SelectorEntry entry=values.next();    Text url=entry.url;    String urlString=url.toString();    URL u=null;    String hostordomain=null;    try {      if (normalise && normalizers != null) {        urlString=normalizers.normalize(urlString,URLNormalizers.SCOPE_GENERATE_HOST_COUNT);      }      u=new URL(urlString);      if (byDomain) {        hostordomain=URLUtil.getDomainName(u);      } else {        hostordomain=new URL(urlString).getHost();      }    } catch (    Exception e) {      LOG.warn("Malformed URL: '" + urlString + "', skipping ("+ StringUtils.stringifyException(e)+ ")");      reporter.getCounter("Generator","MALFORMED_URL").increment(1);      continue;    }    hostordomain=hostordomain.toLowerCase();    if (maxCount > 0) {      int[] hostCount=hostCounts.get(hostordomain);      if (hostCount == null) {        hostCount=new int[]{1,0};        hostCounts.put(hostordomain,hostCount);      }      hostCount[1]++;      while (segCounts[hostCount[0] - 1] >= limit && hostCount[0] < maxNumSegments) {        hostCount[0]++;        hostCount[1]=0;      }      if (hostCount[1] >= maxCount) {        if (hostCount[0] < maxNumSegments) {          hostCount[0]++;          hostCount[1]=0;        } else {          if (hostCount[1] == maxCount + 1 && LOG.isInfoEnabled()) {            LOG.info("Host or domain " + hostordomain + " has more than "+ maxCount+ " URLs for all "+ maxNumSegments+ " segments. Additional URLs won't be included in the fetchlist.");          }          continue;        }      }      entry.segnum=new IntWritable(hostCount[0]);      segCounts[hostCount[0] - 1]++;    } else {      entry.segnum=new IntWritable(currentsegmentnum);      segCounts[currentsegmentnum - 1]++;    }    output.collect(key,entry);    count++;  }}  }
class C{  public static ExpressionFactory newExpressionFactory(){  return new ExpressionFactoryImpl(new TreeStore(new ExtendedBuilder(),new Cache(1000)));}  }
class C{  public static boolean isWIZFile(java.io.File file){  try {    java.io.FileInputStream fis=new java.io.FileInputStream(file);    try {      int b1=fis.read();      int b2=fis.read();      int b3=fis.read();      if (b1 == 'W' && b2 == 'I' && (b3 == 'Z' || b3 == 'X')) {        return (true);      }      return (false);    }  finally {      fis.close();    }  } catch (  Exception x) {    return (false);  }}  }
class C{  public int createState(){  return builder.createState();}  }
class C{  public ImportException(String message,ImportExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  private static INaviModule findModule(final List<? extends INaviModule> modules,final int moduleId){  for (  final INaviModule module : modules) {    if (module.getConfiguration().getId() == moduleId) {      return module;    }  }  return null;}  }
class C{  public boolean isEmpty(){  long sum=0L;  final Segment<K,V>[] segments=this.segments;  for (int j=0; j < segments.length; ++j) {    Segment<K,V> seg=segmentAt(segments,j);    if (seg != null) {      if (seg.count != 0)       return false;      sum+=seg.modCount;    }  }  if (sum != 0L) {    for (int j=0; j < segments.length; ++j) {      Segment<K,V> seg=segmentAt(segments,j);      if (seg != null) {        if (seg.count != 0)         return false;        sum-=seg.modCount;      }    }    if (sum != 0L)     return false;  }  return true;}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final PrintWriter writer=response.getWriter();  final boolean allowWrite=userService.isAuthorable(request.getResourceResolver().adaptTo(Session.class));  response.setCharacterEncoding(CharEncoding.UTF_8);  response.setContentType("application/json");  int status=SlingHttpServletResponse.SC_FORBIDDEN;  String header="ERROR";  String message="Current user not authorized.";  String data=null;  if (allowWrite) {    final String action=request.getParameter(ACTION_PARAMETER);    final String packageName=request.getParameter(PACKAGE_NAME_PARAMETER);    if (ACTION_CREATE.equals(action)) {      final JcrPackage savedPackage=packageService.createBackupPackage(request,packageName);      if (savedPackage != null) {        try {          status=SlingHttpServletResponse.SC_OK;          header="OK";          message="Package successfully created.";          data=getJsonFromJcrPackage(savedPackage).toString();        } catch (        JSONException|RepositoryException e) {          status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;          header="Error";          message="JSON response could not be created";        }      } else {        status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;        header="Error";        message="Package could not be created.";      }    } else     if (ACTION_INSTALL.equals(action)) {      final boolean result=packageService.installBackupPackage(request,packageName);      if (result) {        status=SlingHttpServletResponse.SC_OK;        header="OK";        message="Package successfully installed.";      } else {        status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;        header="Error";        message="Package could not be installed.";      }    } else     if (ACTION_UPLOAD.equals(action)) {      final JcrPackage savedPackage=packageService.uploadBackupPackage(request);      if (savedPackage != null) {        try {          status=SlingHttpServletResponse.SC_OK;          header="OK";          message="Package successfully uploaded.";          data=getJsonFromJcrPackage(savedPackage).toString();        } catch (        JSONException|RepositoryException e) {          status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;          header="Error";          message="JSON response could not be created";        }      } else {        status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;        header="Error";        message="Package could not be uploaded.";      }    } else     if (ACTION_DELETE.equals(action)) {      final boolean result=packageService.deleteBackupPackage(request,packageName);      if (result) {        status=SlingHttpServletResponse.SC_OK;        header="OK";        message="Package successfully deleted.";      } else {        status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;        header="Error";        message="Package could not be deleted.";      }    } else {      status=SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR;      header="Error";      message="Action could not be performed.";    }  }  response.setStatus(status);  sendResponse(writer,header,message,data);}  }
class C{  public void createServerInGroup(String groupName,String hostname,int port) throws FabricCommunicationException {  errorSafeCallMethod(METHOD_GROUP_ADD,new Object[]{groupName,hostname + ":" + port});}  }
class C{  public ProcessInfo(){  super();}  }
class C{  public static void delete(File file){  delete(file,false);}  }
class C{  protected boolean intersectsFrustum(DrawContext dc,NodeLayout layout,Rectangle scrollBounds){  if (!scrollBounds.intersects(layout.screenBounds))   return false;  return !dc.isPickingMode() || dc.getPickFrustums().intersectsAny(layout.pickScreenBounds);}  }
class C{  public static Random createRandom(long rgenseed){  Random ret=new Random();  if (0L == rgenseed) {    rgenseed=System.currentTimeMillis();    System.out.println("Random number generator seed is " + rgenseed);  } else {    System.out.println("Fixed Random number generator seed is " + rgenseed);  }  ret.setSeed(rgenseed);  return ret;}  }
class C{  private static void Starting(String name){  if (Parameters.Debug) {    start=Debug.now();    ToolIO.out.println("Starting " + name);  }}  }
class C{  boolean isWindowAnimating(){  return mAnimation != null;}  }
class C{  public static String classToVariableName(Type type){  return VariableRenamer.getVariableName(type);}  }
class C{  @Bean public AmqpAuthenticationMessageHandler amqpAuthenticationMessageHandler(final RabbitTemplate rabbitTemplate,final AmqpControllerAuthentication authenticationManager,final ArtifactManagement artifactManagement,@Qualifier(CacheConstants.DOWNLOAD_ID_CACHE) final Cache cache,final HostnameResolver hostnameResolver,final ControllerManagement controllerManagement){  return new AmqpAuthenticationMessageHandler(rabbitTemplate,authenticationManager,artifactManagement,cache,hostnameResolver,controllerManagement);}  }
class C{  public GeolocInfoParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  @RequestProcessing(value="/timeline",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showTimeline(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("timeline.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);  dataModel.put("timelineCnt",Symphonys.getInt("timelineCnt"));  dataModel.put("timelines",timelineMgmtService.getTimelines());}  }
class C{  public static FloatMatrix zeros(int length){  return zeros(length,1);}  }
class C{  private final Object arenaExchange(Object item,boolean timed,long ns){  Node[] a=arena;  Node p=participant.get();  for (int i=p.index; ; ) {    int b, m, c;    long j;    Node q=(Node)U.getObjectVolatile(a,j=(i << ASHIFT) + ABASE);    if (q != null && U.compareAndSwapObject(a,j,q,null)) {      Object v=q.item;      q.match=item;      Thread w=q.parked;      if (w != null)       U.unpark(w);      return v;    } else     if (i <= (m=(b=bound) & MMASK) && q == null) {      p.item=item;      if (U.compareAndSwapObject(a,j,null,p)) {        long end=(timed && m == 0) ? System.nanoTime() + ns : 0L;        Thread t=Thread.currentThread();        for (int h=p.hash, spins=SPINS; ; ) {          Object v=p.match;          if (v != null) {            U.putOrderedObject(p,MATCH,null);            p.item=null;            p.hash=h;            return v;          } else           if (spins > 0) {            h^=h << 1;            h^=h >>> 3;            h^=h << 10;            if (h == 0)             h=SPINS | (int)t.getId(); else             if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)             Thread.yield();          } else           if (U.getObjectVolatile(a,j) != p)           spins=SPINS; else           if (!t.isInterrupted() && m == 0 && (!timed || (ns=end - System.nanoTime()) > 0L)) {            U.putObject(t,BLOCKER,this);            p.parked=t;            if (U.getObjectVolatile(a,j) == p)             U.park(false,ns);            p.parked=null;            U.putObject(t,BLOCKER,null);          } else           if (U.getObjectVolatile(a,j) == p && U.compareAndSwapObject(a,j,p,null)) {            if (m != 0)             U.compareAndSwapInt(this,BOUND,b,b + SEQ - 1);            p.item=null;            p.hash=h;            i=p.index>>>=1;            if (Thread.interrupted())             return null;            if (timed && m == 0 && ns <= 0L)             return TIMED_OUT;            break;          }        }      } else       p.item=null;    } else {      if (p.bound != b) {        p.bound=b;        p.collides=0;        i=(i != m || m == 0) ? m : m - 1;      } else       if ((c=p.collides) < m || m == FULL || !U.compareAndSwapInt(this,BOUND,b,b + SEQ + 1)) {        p.collides=c + 1;        i=(i == 0) ? m : i - 1;      } else       i=m + 1;      p.index=i;    }  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void unmapVolumes(StorageSystem storage,List<URI> volumeURIs,Collection<Initiator> initiators,TaskCompleter completer){  _log.info("unmapVolumes: volumeURIs: {}",volumeURIs);  _log.info("unmapVolumes: initiators: {}",initiators);  try {    for (    URI uri : volumeURIs) {      BlockObject object=BlockObject.fetch(_dbClient,uri);      if (object == null) {        _log.warn("Attempted to unmap BlockObject {}, which is empty",uri);        continue;      }      if (object.getInactive()) {        _log.warn("Attempted to unmap BlockObject {}, which is inactive",uri);        continue;      }      RBDMappingOptions rbdOptions=new RBDMappingOptions(object);      for (      Initiator initiator : initiators) {        Host host=_dbClient.queryObject(Host.class,initiator.getHost());        String port=initiator.getInitiatorPort();        if (initiator.getProtocol().equalsIgnoreCase(HostInterface.Protocol.RBD.name())) {          LinuxSystemCLI linuxClient=getLinuxClient(host);          linuxClient.unmapRBD(rbdOptions.poolName,rbdOptions.volumeName,rbdOptions.snapshotName);        } else {          String msgPattern="Unexpected initiator protocol %s for port %s and uri %s";          String msg=String.format(msgPattern,initiator.getProtocol(),port,uri);          ServiceCoded code=DeviceControllerErrors.ceph.operationFailed("unmapVolumes",msg);          completer.error(_dbClient,code);          return;        }      }    }    completer.ready(_dbClient);  } catch (  Exception e) {    _log.error("Encountered an exception",e);    ServiceCoded code=DeviceControllerErrors.ceph.operationFailed("unmapVolumes",e.getMessage());    completer.error(_dbClient,code);  }}  }
class C{  public TupleSet(){  this.tuples=new ArrayList<>();  this.tuples.add(new ArrayList<E>());  this.tupleLength=0;}  }
class C{  public void addRow(ResultSetRow row) throws SQLException {  notSupported();}  }
class C{  public static long factorial(int n){  return Arithmetic.longFactorial(n);}  }
class C{  Step(final String stepName,final String delegateName,final PlayerID player,final int changeStartIndex,final String displayName){  super(displayName,changeStartIndex);  m_stepName=stepName;  m_delegateName=delegateName;  m_player=player;}  }
class C{  @Override public boolean isTimeIncluded(long timeInMillis){  if ((getBaseCalendar() != null) && (getBaseCalendar().isTimeIncluded(timeInMillis) == false)) {    return false;  }  return (!(cronExpression.isSatisfiedBy(new Date(timeInMillis))));}  }
class C{  public Gobble(File file){  this(file,null,null);}  }
class C{  public HessianDebugInputStream(InputStream is,Logger log,Level level){  this(is,new PrintWriter(new LogWriter(log,level)));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public final CC growPrioY(int p){  ver.setGrowPriority(p);  return this;}  }
class C{  protected void makeWidgets(){  String locText;  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  Insets leftInsets=new Insets(0,10,0,10);  Insets rightInsets=new Insets(0,0,0,10);  setLayout(gridbag);  locText=i18n.get(MGRSCoordPanel.class,"border","MGRS Coordinate");  setBorder(new TitledBorder(new EtchedBorder(),locText));  locText=i18n.get(MGRSCoordPanel.class,"mgrsLabel","MGRS: ");  JLabel mgrsLabel=new JLabel(locText);  c.gridx=0;  c.fill=GridBagConstraints.NONE;  c.weightx=0f;  c.insets=leftInsets;  gridbag.setConstraints(mgrsLabel,c);  add(mgrsLabel);  mgrs=new JTextField(20);  c.gridx=1;  c.fill=GridBagConstraints.HORIZONTAL;  c.weightx=1.0f;  c.insets=rightInsets;  gridbag.setConstraints(mgrs,c);  add(mgrs);}  }
class C{  public void trashObject(String resourceId,boolean delete) throws IOException, MalformedURLException, ServiceException, DocumentListException {  if (resourceId == null) {    throw new DocumentListException("null resourceId");  }  String feedUrl=URL_DEFAULT + URL_DOCLIST_FEED + "/"+ resourceId;  if (delete) {    feedUrl+="?delete=true";  }  service.delete(buildUrl(feedUrl),getDocsListEntry(resourceId).getEtag());}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  double[] probs;  if (m_isLeaf) {    probs=modelDistributionForInstance(instance);  } else {    int branch=m_localModel.whichSubset(instance);    probs=m_sons[branch].distributionForInstance(instance);  }  return probs;}  }
class C{  private Response makeRequest(GridClientMessage msg) throws IgniteCheckedException {  assert msg != null;  try {    sock.getOutputStream().write(createPacket(msg));  } catch (  IOException e) {    throw new IgniteCheckedException("Failed to send packet.",e);  }  while (true) {    try {      Response res=queue.take();      if (res == QUIT_RESP)       return res;      if (res.opaque() == msg.requestId()) {        if (!res.isSuccess() && res.error() != null)         throw new IgniteCheckedException(res.error()); else         return res;      } else       queue.add(res);    } catch (    InterruptedException e) {      throw new IgniteCheckedException("Interrupted while waiting for response.",e);    }  }}  }
class C{  public void paintTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  private void showSticky(){  WXCell headComponent=headComponentStack.pop();  headComponentStack.push(headComponent);  View headerView=headComponent.getRealView();  if (headerView == null)   return;  headerViewStack.push(headerView);  headComponent.removeSticky();  ((ViewGroup)getParent()).addView(headerView);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof VostroDataset)) {    return false;  }  VostroDataset that=(VostroDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public boolean isBillTo(){  Object oo=get_Value(COLUMNNAME_IsBillTo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  public int width(){  return width(root,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.243 -0400",hash_original_method="3A2EF1D44B41CB7EE71623CBE9404B85",hash_generated_method="3A2EF1D44B41CB7EE71623CBE9404B85") boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  @Override public void process(K tuple){  processTuple(tuple);}  }
class C{  public EntropyCalculatorKernel(){  svke=new KernelEstimatorUniVariate();  svke.setDebug(debug);  svke.setNormalise(normalise);}  }
class C{  public IconEntry(final DigestURL url,Set<String> rel,Set<Dimension> sizes){  if (url == null) {    throw new IllegalArgumentException("url must not be null.");  }  if (rel == null || rel.isEmpty()) {    throw new IllegalArgumentException("rel must be specified");  }  this.url=url;  this.rel=rel;  if (sizes != null) {    this.sizes=sizes;  } else {    this.sizes=new HashSet<>();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:41.825 -0500",hash_original_method="3F6FAB1D23BC515BB2AF6438AF3536A0",hash_generated_method="3F6FAB1D23BC515BB2AF6438AF3536A0") void prepareLooper(){  Looper.prepare();}  }
class C{  protected void paintDragWindow(Graphics g){  g.setColor(dragWindow.getBackground());  int w=dragWindow.getWidth();  int h=dragWindow.getHeight();  g.fillRect(0,0,w,h);  g.setColor(dragWindow.getBorderColor());  g.drawRect(0,0,w - 1,h - 1);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String n=getString(stack);  String k=getString(stack);  String r=getString(stack);  if (!Sage.WINDOWS_OS)   return Boolean.FALSE;  return Boolean.valueOf(Sage.removeRegistryValue(Sage.getHKEYForName(r),k,n));}  }
class C{  public CloneGcpDialog(@NotNull Project project){  super(project,true);  this.project=project;  parentDirectoryLabel.setText(DvcsBundle.message("clone.parent.dir"));  init();  initComponents();  setTitle(GctBundle.message("clonefromgcp.title"));  setOKButtonText(GctBundle.message("clonefromgcp.button"));}  }
class C{  protected Boolean parseBooleanValue(String value) throws ParseException {  if (value == null) {    return null;  }  if (value.equalsIgnoreCase("false") || value.equals("0")) {    return Boolean.FALSE;  }  if (value.equalsIgnoreCase("true") || value.equals("1")) {    return Boolean.TRUE;  }  ParseException pe=new ParseException(CoreErrorDomain.ERR.invalidBooleanAttribute);  pe.setInternalReason("Invalid value for boolean attribute: " + value);  throw pe;}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new UkrainianMorfologikAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  private void removeListeners(){  try {    codeNode.getParentFunction().removeListener(functionUpdater);    codeNode.getParentFunction().getModule().removeListener(moduleUpdater);  } catch (  final MaybeNullException exception) {  }  codeNode.removeListener(codeNodeListener);  for (  final INaviInstruction instruction : codeNode.getInstructions()) {    instruction.removeListener(instructionUpdater);  }  final Iterator<CTag> it=codeNode.getTagsIterator();  while (it.hasNext()) {    it.next().removeListener(tagUpdater);  }  for (  final IDebugger debugger : provider.getDebuggers()) {    debugger.getProcessManager().removeListener(debuggerUpdater);  }  provider.removeListener(debuggerProviderListener);  graph.getSettings().getDisplaySettings().removeListener(settingsUpdater);}  }
class C{  public static <R>Task<R> transaction(Supplier<Task<R>> body){  final String parentTransactionId=currentTransactionId();  final ActorTaskContext oldContext=ActorTaskContext.current();  final ActorTaskContext context=oldContext != null ? oldContext.cloneContext() : new ActorTaskContext();  final String transactionId=IdUtils.urlSafeString(96);  context.setProperty(ORBIT_TRANSACTION_ID,transactionId);  final Transaction transaction=Actor.getReference(Transaction.class,transactionId);  transaction.initTransaction(parentTransactionId,null);  context.push();  if (oldContext == null) {    final ActorRuntime runtime=ActorRuntime.getRuntime();    if (runtime != null) {      runtime.bind();    }  }  try {    return safeCall(null);  }  finally {    context.pop();  }}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public AnonymousIdentityToken clone(){  AnonymousIdentityToken result=new AnonymousIdentityToken();  result.PolicyId=PolicyId;  return result;}  }
class C{  @NotNull private Optional<TypeConversion> findConversionFromDbValue(@NotNull Type source,@NotNull Type target){  if (isAssignable(target,source))   return Optional.of(TypeConversion.identity());  Optional<TypeConversion> directConversion=typeConversionRegistry.findConversionFromDbValue(source,target);  if (directConversion.isPresent())   return directConversion;  Optional<TypeConversion> arrayConversion=findArrayConversion(source,target);  if (arrayConversion.isPresent())   return arrayConversion;  Optional<TypeConversion> optionalConversion=findOptionalConversion(source,target);  if (optionalConversion.isPresent())   return optionalConversion;  Optional<TypeConversion> enumConversion=findEnumConversion(target);  if (enumConversion.isPresent())   return enumConversion;  return Optional.empty();}  }
class C{  public final void testGetAlgParameters02() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0],false));      assertNull(epki.getAlgParameters());      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public void commit(byte[] buf,int bufOffset,int bufLen) throws InterruptedException, GondolaException {  try {    ccmd.commit(buf,bufOffset,bufLen,-1);  } catch (  TimeoutException e) {    throw new IllegalStateException(e);  }}  }
class C{  public void disallowIn(int x,int y,int width,int height){  Rectangle r=new Rectangle(x,y,width,height);  arrivingBarriers.add(r);}  }
class C{  private void createJournalEntriesForRecoveryRepayments(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal amount=loanTransactionDTO.getAmount();  final boolean isReversal=loanTransactionDTO.isReversed();  final Long paymentTypeId=loanTransactionDTO.getPaymentTypeId();  this.helper.createCashBasedJournalEntriesAndReversalsForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_RECOVERY.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,amount,isReversal);}  }
class C{  public LoopingUnsafeCopier(Unsafe unsafe,long offset,long length){  super(unsafe);  Preconditions.checkArgument(offset >= 0,"Offset must be >= 0");  Preconditions.checkArgument(length >= 0,"Length must be >= 0");  Preconditions.checkArgument(length % COPY_STRIDE == 0,"Lengths must be a multiple of 8 bytes");  this.offset=offset;  this.end=offset + length;}  }
class C{  @Override public String parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  return stdout;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public long execute2() throws UpdateExecutionException {  return ASTEvalHelper.executeUpdate(((BigdataSailRepositoryConnection)getConnection()),astContainer,dataset,getIncludeInferred(),new QueryBindingSet(getBindings()));}  }
class C{  void _updateModelFromText(){  JTextComponent textC=getTextComponent();  Document doc=getDocument();  if (textC != null && doc != null) {    String text=textC.getText();    SimpleAttributeSet sas=new SimpleAttributeSet();    isSettingAttributes=true;    try {      sas.addAttribute(HTML.Attribute.COMMENT,text);      ((StyledDocument)doc).setCharacterAttributes(getStartOffset(),getEndOffset() - getStartOffset(),sas,false);    }  finally {      isSettingAttributes=false;    }  }}  }
class C{  public final int size(){  return keys.length;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(getMimeType());  NVPair[] params=getParams();  for (int i=0; i < params.length; i++) {    String attribute=params[i].getName();    String value=HTTPHeaderUtility.quoteString(params[i].getValue(),false);    sb.append("; " + attribute + "="+ value);  }  return sb.toString();}  }
class C{  public boolean isMethod(){  MemberType _memberType=this.getMemberType();  return Objects.equal(_memberType,MemberType.METHOD);}  }
class C{  @Override public String toVerboseString(){  final StringBuilder sb=new StringBuilder();  print(sb,0,Verbosity.LOG_WITH_STACKTRACE);  return sb.toString();}  }
class C{  public static String trimLeadingWhitespace(String str){  if (!hasLength(str)) {    return str;  }  StringBuilder buf=new StringBuilder(str);  while (buf.length() > 0 && Character.isWhitespace(buf.charAt(0))) {    buf.deleteCharAt(0);  }  return buf.toString();}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof Setting)) {    return false;  }  Setting setting=(Setting)obj;  return key.equals(setting.key);}  }
class C{  public InlineMenuButton buttonAt(int index){  return buttons.get(index);}  }
class C{  public PI removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static double RSEfitness(boolean useTrainingData,GEPIndividual ind){  double RSE=RSErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + RSE);}  }
class C{  public NbtTagIntArray(String name){  super(name);  this.value=EMPTY;}  }
class C{  public Boolean isEnabled(){  return this.enabled;}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);}  }
class C{  protected String doIt() throws Exception {  if (p_M_Product_ID == 0) {    throw new FillMandatoryException("M_Product_ID");  }  explodeProduct(p_M_Product_ID,Env.ONE,Env.ONE);  return "";}  }
class C{  public boolean isItemValid(ItemStack par1ItemStack){  if (par1ItemStack == null)   return false;  boolean flag=littlemaidInventory.isItemValidForSlot(InventoryLittleMaid.maxInventorySize + armorIndex,par1ItemStack);  LittleMaidReengaged.Debug("SLOT-INDEX: %d; VALID? %s",getSlotIndex(),flag);  return flag;}  }
class C{  @Override public void endTransaction(){  throw new UnsupportedOperationException("Transaction Unsupported.");}  }
class C{  public boolean contains(final Long cid,final Long pid){  Collection collection=read(cid);  Hibernate.initialize(collection.getProducts());  return collection.getProducts().contains(productDao.read(pid));}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public JSONArray put(Collection<Object> value){  this.put(new JSONArray(value));  return this;}  }
class C{  public HopfieldTrainer(Hopfield hop){  super(hop);  this.hopfield=hop;}  }
class C{  private static boolean createNaviDirectory(){  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));  return dir.exists() || dir.mkdir();}  }
class C{  public static ResolveUserTokenResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ResolveUserTokenResponse object=new ResolveUserTokenResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"resolveUserTokenResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ResolveUserTokenResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  GeometryFactory factory=new GeometryFactory();  double distTolerance=10;  boolean loseNoFeatures=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  distTolerance=Double.parseDouble(args[2]);  loseNoFeatures=Boolean.parseBoolean(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    if (shapeType.getBaseType() == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYGON;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE) {      outputShapeType=ShapeType.POLYLINE;    } else {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    int numOutputFields=input.getAttributeTable().getFieldCount() + 1;    int numInputFields=input.getAttributeTable().getFieldCount();    DBFField[] inputFields=input.getAttributeTable().getAllFields();    DBFField fields[]=new DBFField[numOutputFields];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    System.arraycopy(inputFields,0,fields,1,numInputFields);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      Object[] attData=input.getAttributeTable().getRecord(recordNum - 1);      recJTS=record.getGeometry().getJTSGeometries();      ArrayList<com.vividsolutions.jts.geom.Geometry> geomList=new ArrayList<>();      for (int a=0; a < recJTS.length; a++) {        geomList.add(recJTS[a]);      }      DouglasPeuckerSimplifier dps=new DouglasPeuckerSimplifier(factory.buildGeometry(geomList));      dps.setDistanceTolerance(distTolerance);      com.vividsolutions.jts.geom.Geometry outputGeom=dps.getResultGeometry();      if (outputGeom.isEmpty() && loseNoFeatures) {        outputGeom=factory.buildGeometry(geomList);      }      if (!outputGeom.isEmpty()) {        for (int a=0; a < outputGeom.getNumGeometries(); a++) {          com.vividsolutions.jts.geom.Geometry g=outputGeom.getGeometryN(a);          if (g instanceof com.vividsolutions.jts.geom.Polygon && !g.isEmpty()) {            com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;            ArrayList<ShapefilePoint> pnts=new ArrayList<>();            int[] parts=new int[p.getNumInteriorRing() + 1];            Coordinate[] buffCoords=p.getExteriorRing().getCoordinates();            if (!Topology.isLineClosed(buffCoords)) {              System.out.println("Exterior ring not closed.");            }            if (Topology.isClockwisePolygon(buffCoords)) {              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            } else {              for (i=buffCoords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            }            for (int b=0; b < p.getNumInteriorRing(); b++) {              parts[b + 1]=pnts.size();              buffCoords=p.getInteriorRingN(b).getCoordinates();              if (!Topology.isLineClosed(buffCoords)) {                System.out.println("Interior ring not closed.");              }              if (Topology.isClockwisePolygon(buffCoords)) {                for (i=buffCoords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              } else {                for (i=0; i < buffCoords.length; i++) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              }            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());            Object[] rowData=new Object[numOutputFields];            rowData[0]=new Double(recordNum - 1);            System.arraycopy(attData,0,rowData,1,numInputFields);            output.addRecord(wbPoly,rowData);          } else           if (g instanceof com.vividsolutions.jts.geom.LineString && !g.isEmpty()) {            LineString ls=(LineString)g;            ArrayList<ShapefilePoint> pnts=new ArrayList<>();            int[] parts={0};            Coordinate[] coords=ls.getCoordinates();            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            Object[] rowData=new Object[numOutputFields];            rowData[0]=new Double(recordNum - 1);            System.arraycopy(attData,0,rowData,1,numInputFields);            output.addRecord(wbGeometry,rowData);          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress(progress);      }    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override protected final long available(){  return available(false);}  }
class C{  public FeatureLabel next() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  int zzPushbackPosL=zzPushbackPos=-1;  boolean zzWasPushback;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzWasPushback=false;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          zzPushbackPos=zzPushbackPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          zzPushbackPosL=zzPushbackPos;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 2) == 2)         zzPushbackPosL=zzCurrentPosL;        if ((zzAttributes & 1) == 1) {          zzWasPushback=(zzAttributes & 4) == 4;          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;    if (zzWasPushback)     zzMarkedPos=zzPushbackPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 22:{        if (!suppressEscaping) {          return getNext(normalizeAmp(yytext()),yytext());        } else {          return getNext();        }      }case 28:    break;case 26:{    String s=yytext();    yypushback(1);    return getNext(s,yytext());  }case 29:break;case 12:{if (invertable) {  if (prevWord == null) {    prevWord=new FeatureLabel();  }  prevWord.appendAfter(yytext());}}case 30:break;case 8:{if (invertable) {if (prevWord == null) {prevWord=new FeatureLabel();}prevWord.appendAfter(yytext());}}case 31:break;case 2:{if (!suppressEscaping) {return getNext(openparen,yytext());} else {return getNext();}}case 32:break;case 4:{return getNext();}case 33:break;case 14:{if (!suppressEscaping) {return getNext(normalizeCp1252(yytext()),yytext());} else {return getNext();}}case 34:break;case 17:{if (!suppressEscaping) {return getNext(closedblquote,yytext());} else {return getNext();}}case 35:break;case 6:{if (!suppressEscaping) {String word=Americanize.americanize(yytext());return getNext(word,yytext());} else {return getNext();}}case 36:break;case 21:{if (!suppressEscaping) {return getNext(delimit(yytext(),'/'),yytext());} else {return getNext();}}case 37:break;case 18:{if (!suppressEscaping) {return getNext(openbrace,yytext());} else {return getNext();}}case 38:break;case 24:{yypushback(1);return getNext();}case 39:break;case 11:{if (!suppressEscaping) {return getNext(openparen,yytext());} else {return getNext();}}case 40:break;case 20:{if (!suppressEscaping) {return getNext(opendblquote,yytext());} else {return getNext();}}case 41:break;case 7:{if (!suppressEscaping) {return getNext(ptbmdash,yytext());} else {return getNext();}}case 42:break;case 3:{if (!suppressEscaping) {return getNext(delimit(yytext(),'/'),yytext());} else {return getNext();}}case 43:break;case 19:{if (!suppressEscaping) {return getNext(closebrace,yytext());} else {return getNext();}}case 44:break;case 15:{if (!suppressEscaping) {return getNext(ptbellipsis,yytext());} else {return getNext();}}case 45:break;case 5:{if (!suppressEscaping) {return getNext(closeparen,yytext());} else {return getNext();}}case 46:break;case 10:{if (yylength() >= 3 && yylength() <= 4 && !suppressEscaping) {return getNext(ptbmdash,yytext());} else {return getNext();}}case 47:break;case 27:{yypushback(3);return getNext();}case 48:break;case 1:{String str=yytext();if (invertable) {prevWord.appendAfter(str);}int first=str.charAt(0);System.err.println("Untokenizable: " + yytext() + " (first char in decimal: "+ first+ ")");}case 49:break;case 16:{if (!suppressEscaping) {return getNext(delimit(yytext(),'*'),yytext());} else {return getNext();}}case 50:break;case 9:{if (tokenizeCRs) {return getNext(cr,yytext());} else if (invertable) {prevWord.appendAfter(yytext());}}case 51:break;case 23:{String str=yytext();yypushback(2);if (!suppressEscaping) {return getNext("`",str);} else {return getNext(str,str);}}case 52:break;case 25:{if (!suppressEscaping) {return getNext("&",yytext());} else {return getNext();}}case 53:break;case 13:{if (!suppressEscaping) {return getNext(normalizeCp1252(yytext()),yytext());} else {return getNext();}}case 54:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{if (invertable) {prevWord.appendAfter(yytext());}return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private table printDescription(int activeNode,MWorkflow wf,MWFNode[] nodes,ArrayList nodes_ID){  table desTable=new table();  String WFName="";  String WFDescription="";  if (activeNode < 0) {    WFName=wf.getName();    WFDescription=wf.getHelp();  } else {    WFName=nodes[getIndex(activeNode,nodes_ID)].getName();    WFDescription=nodes[getIndex(activeNode,nodes_ID)].getHelp();  }  tr aRow=new tr();  td aGrid=new td();  aGrid.addElement(new h6(WFName));  aGrid.addElement(new br());  aGrid.addElement(WFDescription);  desTable.addElement(aRow.addElement(aGrid));  return desTable;}  }
class C{  @Override public void scan(ObjectReference obj){  scan(obj,true);}  }
class C{  @Override public boolean insertsAreDetected(int type){  debugCodeCall("insertsAreDetected",type);  return false;}  }
class C{  private void switchMode(){  if (commandList.getSelectedItem() == null || "None".equals((String)commandList.getSelectedItem())) {    setDefaultMode();    return;  }  String str=(String)commandList.getSelectedItem();  if (str == null) {    return;  }  Command command=Command.valueOf(str);  if (command == Command.PLAY_ANIMATION) {    setAnimMode();  } else   if (command == Command.PLAY_LED) {    setLEDMode();  } else {    setDefaultMode();  }}  }
class C{  Border createBorder(CSSElement styleAttributes,Component ui,int location,int styles,int type){  int borderStyle=styleAttributes.getAttrVal(BORDER_OUTLINE_PROPERTIES[type][STYLE] + location);  if ((borderStyle == -1) || (borderStyle == BORDER_STYLE_NONE)) {    return null;  }  int borderColor=styleAttributes.getAttrVal(BORDER_OUTLINE_PROPERTIES[type][COLOR] + location);  int borderWidth=styleAttributes.getAttrLengthVal(BORDER_OUTLINE_PROPERTIES[type][WIDTH] + location,ui,0);  if (borderWidth == -1) {    borderWidth=CSSElement.BORDER_DEFAULT_WIDTH;  }  if (type == OUTLINE) {    location=-1;  }  if ((styles & STYLE_SELECTED) != 0) {    incPadding(ui.getSelectedStyle(),location,borderWidth);  }  if ((styles & STYLE_UNSELECTED) != 0) {    incPadding(ui.getUnselectedStyle(),location,borderWidth);  }  if ((styles & STYLE_PRESSED) != 0) {    incPadding(((HTMLLink)ui).getPressedStyle(),location,borderWidth);  }  Border border=null;  if ((borderColor == -1) && (borderStyle >= BORDER_STYLE_GROOVE)) {    borderColor=DEFAULT_3D_BORDER_COLOR;  }switch (borderStyle) {case BORDER_STYLE_SOLID:    if (borderColor == -1) {      border=Border.createLineBorder(borderWidth);    } else {      border=Border.createLineBorder(borderWidth,borderColor);    }  break;case BORDER_STYLE_DOUBLE:if (borderColor == -1) {  border=Border.createDoubleBorder(borderWidth);} else {  border=Border.createDoubleBorder(borderWidth,borderColor);}break;case BORDER_STYLE_GROOVE:border=Border.createGrooveBorder(borderWidth,borderColor);break;case BORDER_STYLE_RIDGE:border=Border.createRidgeBorder(borderWidth,borderColor);break;case BORDER_STYLE_INSET:border=Border.createInsetBorder(borderWidth,borderColor);break;case BORDER_STYLE_OUTSET:border=Border.createOutsetBorder(borderWidth,borderColor);break;case BORDER_STYLE_DOTTED:if (borderColor == -1) {border=Border.createDottedBorder(borderWidth);} else {border=Border.createDottedBorder(borderWidth,borderColor);}break;case BORDER_STYLE_DASHED:if (borderColor == -1) {border=Border.createDashedBorder(borderWidth);} else {border=Border.createDashedBorder(borderWidth,borderColor);}break;}return border;}  }
class C{  protected boolean relevantSubspace(long[] subspace,DoubleDBIDList neigh,KernelDensityEstimator kernel){  Relation<V> relation=kernel.relation;  final double crit=K_S_CRITICAL001 / Math.sqrt(neigh.size());  for (int dim=BitsUtil.nextSetBit(subspace,0); dim > 0; dim=BitsUtil.nextSetBit(subspace,dim + 1)) {    double[] data=new double[neigh.size()];{      int count=0;      for (DBIDIter neighbor=neigh.iter(); neighbor.valid(); neighbor.advance()) {        V vector=relation.get(neighbor);        data[count]=vector.doubleValue(dim);        count++;      }      assert (count == neigh.size());    }    Arrays.sort(data);    final double norm=data[data.length - 1] - data[0];    final double min=data[0];    for (int j=1; j < data.length - 2; j++) {      double delta=(j / (data.length - 1.)) - ((data[j] - min) / norm);      if (Math.abs(delta) > crit) {        return false;      }    }  }  return true;}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static <T>T withWriterAppend(File file,@ClosureParams(value=SimpleType.class,options="java.io.BufferedWriter") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newWriter(file,true),closure);}  }
class C{  private boolean emitShortCompareBranch(CompilationResultBuilder crb,SPARCMacroAssembler masm){  ConditionFlag actualConditionFlag=conditionFlag;  Label actualTrueTarget=trueDestination.label();  Label actualFalseTarget=falseDestination.label();  Label tmpTarget;  boolean needJump;  if (crb.isSuccessorEdge(trueDestination)) {    actualConditionFlag=conditionFlag.negate();    tmpTarget=actualTrueTarget;    actualTrueTarget=actualFalseTarget;    actualFalseTarget=tmpTarget;    needJump=false;  } else {    needJump=!crb.isSuccessorEdge(falseDestination);    int targetPosition=getTargetPosition(masm);    if (needJump && !isShortBranch(masm,targetPosition,trueDestinationHint,actualTrueTarget)) {      actualConditionFlag=actualConditionFlag.negate();      tmpTarget=actualTrueTarget;      actualTrueTarget=actualFalseTarget;      actualFalseTarget=tmpTarget;    }  }  emitCBCond(masm,x,y,actualTrueTarget,actualConditionFlag);  if (needJump) {    masm.jmp(actualFalseTarget);    masm.nop();  }  return true;}  }
class C{  String resourceName(){  return rsrcName;}  }
class C{  public static <T>Range<T> closed(T lowerBound,T upperBound){  return range(lowerBound,BoundType.CLOSED,upperBound,BoundType.CLOSED);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tRandom number seed.\n" + "\t(default 1)","S",1,"-S <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public LineString createLineString(Coordinate[] coordinates){  return createLineString(coordinates != null ? getCoordinateSequenceFactory().create(coordinates) : null);}  }
class C{  @Override public SimpleClassifierAdapter create(){  SimpleClassifierAdapter l=new SimpleClassifierAdapter(learner,dataset);  if (dataset == null) {    System.out.println("dataset null while creating");  }  return l;}  }
class C{  private void genPreambleMethods() throws JasperException {  out.printil("public java.util.List<String> getDependants() {");  out.pushIndent();  out.printil("return _jspx_dependants;");  out.popIndent();  out.printil("}");  out.println();  if (genBytes) {    out.printil("private static byte[] _jspx_getBytes(String s) {");    out.pushIndent();    out.printil("try {");    out.pushIndent();    out.printil("return s.getBytes(_jspx_encoding);");    out.popIndent();    out.printil("} catch (java.io.UnsupportedEncodingException ex) {");    out.printil("}");    out.printil("return null;");    out.popIndent();    out.printil("}");    out.println();    out.printil("private boolean _jspx_same_encoding(String encoding) {");    out.pushIndent();    out.printil("if (! _jspx_encoding_tested) {");    out.pushIndent();    out.printil("_jspx_gen_bytes = _jspx_encoding.equals(encoding);");    out.printil("_jspx_encoding_tested = true;");    out.popIndent();    out.printil("}");    out.printil("return _jspx_gen_bytes;");    out.popIndent();    out.printil("}");    out.println();  }  generateTagHandlerInit();  generateTagHandlerDestroy();}  }
class C{  public static void writeUuid(BinaryRawWriter out,UUID uid){  if (uid != null) {    out.writeBoolean(true);    out.writeLong(uid.getMostSignificantBits());    out.writeLong(uid.getLeastSignificantBits());  } else   out.writeBoolean(false);}  }
class C{  public void schedule(Job job){  ensureJobRight(job);  if (triggerBinder == null) {    pendingList.put(job.jobInfo.identity,job);  } else {    triggerBinder.schedule(job);  }}  }
class C{  @Override public void onDeleted(ContactId contact,List<String> sharingIds) throws RemoteException {  mListener.onDeleted(contact,new HashSet<>(sharingIds));}  }
class C{  private int ensureBaselineOnGrid(){  float baseline=getBaseline();  float gridAlign=baseline % FOUR_DIP;  if (gridAlign != 0) {    extraTopPadding=(int)(FOUR_DIP - Math.ceil(gridAlign));  }  return extraTopPadding;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  String string00="\tSet the index of the attribute value to consider as 'positive'\n\t" + "for binary attributes in normal dense instances. Index 2 is always\n\t" + "used for sparse instances. (default = 2)";  String string0="\tThe maximum number of items to include " + "in large items sets (and rules). (default " + "= -1, i.e. no limit.)";  String string1="\tThe required number of rules. (default = " + m_numRulesToFind + ")";  String string2="\tThe minimum metric score of a rule. (default" + " = " + m_metricThreshold + ")";  String string3="\tThe metric by which to rank rules. (default" + " = confidence)";  String string4="\tThe lower bound for the minimum support as a fraction" + " or number of instances. (default = " + m_lowerBoundMinSupport + ")";  String string5="\tUpper bound for minimum support as a fraction or number of instances. " + "(default = 1.0)";  String string6="\tThe delta by which the minimum support is decreased in\n" + "\teach iteration as a fraction or number of instances. (default = " + m_delta + ")";  String string7="\tFind all rules that meet the lower bound on\n\t" + "minimum support and the minimum metric constraint.\n\t" + "Turning this mode on will disable the iterative support reduction\n\t"+ "procedure to find the specified number of rules.";  String string8="\tOnly consider transactions that contain these items (default = no restriction)";  String string9="\tOnly print rules that contain these items. (default = no restriction)";  String string10="\tUse OR instead of AND for must contain list(s). Use in conjunction" + "\n\twith -transactions and/or -rules";  newVector.add(new Option(string00,"P",1,"-P <attribute index of positive value>"));  newVector.add(new Option(string0,"I",1,"-I <max items>"));  newVector.add(new Option(string1,"N",1,"-N <require number of rules>"));  newVector.add(new Option(string3,"T",1,"-T <0=confidence | 1=lift | " + "2=leverage | 3=Conviction>"));  newVector.add(new Option(string2,"C",1,"-C <minimum metric score of a rule>"));  newVector.add(new Option(string5,"U",1,"-U <upper bound for minimum support>"));  newVector.add(new Option(string4,"M",1,"-M <lower bound for minimum support>"));  newVector.add(new Option(string6,"D",1,"-D <delta for minimum support>"));  newVector.add(new Option(string7,"S",0,"-S"));  newVector.add(new Option(string8,"transactions",1,"-transactions <comma separated " + "list of attribute names>"));  newVector.add(new Option(string9,"rules",1,"-rules <comma separated list " + "of attribute names>"));  newVector.add(new Option(string10,"use-or",0,"-use-or"));  return newVector.elements();}  }
class C{  @LargeTest public void testSetTitle() throws Exception {  int fileSize=1024;  byte[] blobData=generateData(fileSize,DataType.BINARY);  enqueueResponse(buildResponse(HTTP_OK,blobData));  final String title="\u00a5123;\"\u0152\u017d \u054b \u0a07 \ucce0 \u6820\u03a8\u5c34" + "\uf4ad\u0da9\uc0c5\uc1a8 \uf4c5 \uf4aa\u0023\'";  Uri uri=getServerUri(DEFAULT_FILENAME);  Request request=new Request(uri);  request.setTitle(title);  long dlRequest=mDownloadManager.enqueue(request);  waitForDownloadOrTimeout(dlRequest);  Cursor cursor=getCursor(dlRequest);  try {    verifyString(cursor,DownloadManager.COLUMN_TITLE,title);  }  finally {    cursor.close();  }}  }
class C{  public SearchObject(IconType icon,String keyword,String link){  this.icon=icon;  this.keyword=keyword;  this.link=link;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.CONFIGURATION__PROPERTIES:    return getProperties();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void assertTagMatchesLocation(Element tag,String latitude,String longitude,String time,String elevation){  assertEquals(latitude,tag.getAttribute("lat"));  assertEquals(longitude,tag.getAttribute("lon"));  assertEquals(time,getChildTextValue(tag,"time"));  assertEquals(elevation,getChildTextValue(tag,"ele"));}  }
class C{  AVA(Reader in) throws IOException {  this(in,DEFAULT);}  }
class C{  @Override public void handleEvent(LinkLeaveEvent event){  if (this.weighLinksByUse) {    addSpeedToZone(event);  } else {    addSpeedToLink(event);  }}  }
class C{  public ITypedReferenceableInstance create(IReferenceableInstance i) throws RepositoryException {  DiscoverInstances discoverInstances=new DiscoverInstances(this);  try {    new ObjectGraphWalker(typeSystem,discoverInstances,i).walk();  } catch (  AtlasException me) {    throw new RepositoryException("TypeSystem error when walking the ObjectGraph",me);  }  for (  Id oldId : discoverInstances.idToNewIdMap.keySet()) {    if (!discoverInstances.idToInstanceMap.containsKey(oldId)) {      throw new RepositoryException(String.format("Invalid Object Graph: " + "Encountered an unassignedId %s that is not associated with an Instance",oldId));    }  }  List<ITypedReferenceableInstance> newInstances=new ArrayList<ITypedReferenceableInstance>();  ITypedReferenceableInstance retInstance=null;  Set<ClassType> classTypes=new TreeSet<ClassType>();  Set<TraitType> traitTypes=new TreeSet<TraitType>();  for (  IReferenceableInstance transientInstance : discoverInstances.idToInstanceMap.values()) {    try {      ClassType cT=typeSystem.getDataType(ClassType.class,transientInstance.getTypeName());      ITypedReferenceableInstance newInstance=cT.convert(transientInstance,Multiplicity.REQUIRED);      newInstances.add(newInstance);      classTypes.add(cT);      for (      String traitName : newInstance.getTraits()) {        TraitType tT=typeSystem.getDataType(TraitType.class,traitName);        traitTypes.add(tT);      }      if (newInstance.getId() == i.getId()) {        retInstance=newInstance;      }      MapIds mapIds=new MapIds(discoverInstances.idToNewIdMap);      new ObjectGraphWalker(typeSystem,mapIds,newInstances).walk();    } catch (    AtlasException me) {      throw new RepositoryException(String.format("Failed to create Instance(id = %s",transientInstance.getId()),me);    }  }  for (  ClassType cT : classTypes) {    HierarchicalTypeStore st=typeStores.get(cT.getName());    st.acquireWriteLock();  }  for (  TraitType tT : traitTypes) {    HierarchicalTypeStore st=typeStores.get(tT.getName());    st.acquireWriteLock();  }  try {    for (    ITypedReferenceableInstance instance : newInstances) {      HierarchicalTypeStore st=typeStores.get(instance.getTypeName());      st.assignPosition(instance.getId());      for (      String traitName : instance.getTraits()) {        HierarchicalTypeStore tt=typeStores.get(traitName);        tt.assignPosition(instance.getId());      }    }    for (    ITypedReferenceableInstance instance : newInstances) {      HierarchicalTypeStore st=typeStores.get(instance.getTypeName());      st.store((ReferenceableInstance)instance);      for (      String traitName : instance.getTraits()) {        HierarchicalTypeStore tt=typeStores.get(traitName);        tt.store((ReferenceableInstance)instance);      }    }  } catch (  RepositoryException re) {    for (    ITypedReferenceableInstance instance : newInstances) {      HierarchicalTypeStore st=typeStores.get(instance.getTypeName());      st.releaseId(instance.getId());    }    throw re;  } finally {    for (    ClassType cT : classTypes) {      HierarchicalTypeStore st=typeStores.get(cT.getName());      st.releaseWriteLock();    }    for (    TraitType tT : traitTypes) {      HierarchicalTypeStore st=typeStores.get(tT.getName());      st.releaseWriteLock();    }  }  return retInstance;}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  @ObjectiveCName("isLargeDialogMessage:") public boolean isLargeDialogMessage(ContentType contentType){switch (contentType) {case SERVICE:case SERVICE_AVATAR:case SERVICE_AVATAR_REMOVED:case SERVICE_CREATED:case SERVICE_TITLE:case SERVICE_LEAVE:case SERVICE_REGISTERED:case SERVICE_KICK:case SERVICE_ADD:case SERVICE_JOINED:case SERVICE_CALL_ENDED:case SERVICE_CALL_MISSED:case SERVICE_ABOUT:case SERVICE_TOPIC:    return true;default :  return false;}}  }
class C{  public static VersionRange createFromVersionSpec(String spec) throws InvalidVersionSpecificationException {  if (spec == null) {    return null;  }  List<Restriction> restrictions=new ArrayList<>();  String process=spec;  ArtifactVersion version=null;  ArtifactVersion upperBound=null;  ArtifactVersion lowerBound=null;  while (process.startsWith("[") || process.startsWith("(")) {    int index1=process.indexOf(")");    int index2=process.indexOf("]");    int index=index2;    if (index2 < 0 || index1 < index2) {      if (index1 >= 0) {        index=index1;      }    }    if (index < 0) {      throw new InvalidVersionSpecificationException("Unbounded range: " + spec);    }    Restriction restriction=parseRestriction(process.substring(0,index + 1));    if (lowerBound == null) {      lowerBound=restriction.getLowerBound();    }    if (upperBound != null) {      if (restriction.getLowerBound() == null || restriction.getLowerBound().compareTo(upperBound) < 0) {        throw new InvalidVersionSpecificationException("Ranges overlap: " + spec);      }    }    restrictions.add(restriction);    upperBound=restriction.getUpperBound();    process=process.substring(index + 1).trim();    if (process.length() > 0 && process.startsWith(",")) {      process=process.substring(1).trim();    }  }  if (process.length() > 0) {    if (restrictions.size() > 0) {      throw new InvalidVersionSpecificationException("Only fully-qualified sets allowed in multiple set scenario: " + spec);    } else {      version=new DefaultArtifactVersion(process);      restrictions.add(Restriction.EVERYTHING);    }  }  return new VersionRange(version,restrictions);}  }
class C{  public int lastIndexOf(LuaString s){  final int slen=s.length();  final int limit=m_length - slen;  for (int i=limit; i >= 0; --i) {    if (equals(m_bytes,m_offset + i,s.m_bytes,s.m_offset,slen))     return i;  }  return -1;}  }
class C{  public void pause(){  log.i("pause()");  if (isInitialized()) {    resetSyncParams();    audioTrackUtil.pause();  }}  }
class C{  public boolean isWriterUsed(){  return (writer != null);}  }
class C{  @NotNull public PsiQuery siblings(@NotNull final FQNamesProvider name){  final List<PsiElement> result=new ArrayList<PsiElement>();  for (  final PsiElement element : myPsiElements) {    final PsiElement parent=element.getParent();    for (    final PyCallExpression callSibling : PsiTreeUtil.findChildrenOfType(parent,PyCallExpression.class)) {      if ((!callSibling.equals(element)) && (callSibling.isCallee(name))) {        result.add(callSibling);      }    }  }  return new PsiQuery(result.toArray(new PsiElement[result.size()]));}  }
class C{  public long loadFromStream(InputStream stream,long pos) throws IOException {  if (pos < length) {    return pos;  }  int offset=(int)(length % BUFFER_LENGTH);  byte[] buf=null;  long len=pos - length;  if (offset != 0) {    buf=getCacheBlock(length / BUFFER_LENGTH);  }  while (len > 0) {    if (buf == null) {      try {        buf=new byte[BUFFER_LENGTH];      } catch (      OutOfMemoryError e) {        throw new IOException("No memory left for cache!");      }      offset=0;    }    int left=BUFFER_LENGTH - offset;    int nbytes=(int)Math.min(len,(long)left);    nbytes=stream.read(buf,offset,nbytes);    if (nbytes == -1) {      return length;    }    if (offset == 0) {      cache.add(buf);    }    len-=nbytes;    length+=nbytes;    offset+=nbytes;    if (offset >= BUFFER_LENGTH) {      buf=null;    }  }  return pos;}  }
class C{  public NaiveBayesUpdateable(boolean sparse){  setSparse(sparse);}  }
class C{  private String nonSerializableReplacement(Object obj){  return "[Object could not be serialized: " + obj.getClass().getName() + "]";}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public XMLParseException(String msg){  super(msg);}  }
class C{  public String escapeSingleQuotes(String string){  Pattern pattern=Pattern.compile("(?<!\\\\)(')");  Matcher matcher=pattern.matcher(string);  StringBuffer stringBuffer=new StringBuffer();  while (matcher.find()) {    matcher.appendReplacement(stringBuffer,matcher.group(1).replace("'","\\\\'"));  }  matcher.appendTail(stringBuffer);  return stringBuffer.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.294 -0500",hash_original_method="B9175F57BE6F5AB8BBC535010119C8D9",hash_generated_method="0C389A662EDE8299C893E91991E30623") public void putAll(Map<? extends K,? extends V> m){  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  private static boolean equalsHandlesNulls(LocalItem a,LocalItem b){  return (a == b) || ((a != null) && a.equals(b));}  }
class C{  static void verifyPolicySigned(java.security.cert.Certificate[] certs) throws Exception {}  }
class C{  public void resetRemsetStream(){  remsetStream.resetData();  totalRemset=0;}  }
class C{  private static String fixGetFields(String js){  final Pattern pat=Pattern.compile("[^.]getField\\(");  final Matcher mat=pat.matcher(js);  while (mat.find()) {    final String s=mat.group();    js=js.replace(s,s.charAt(0) + "Doc.getField(");  }  js=js.replace("this.getField(","Doc.getField(");  return js;}  }
class C{  public void testShiftRight5(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=300;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public boolean isReturnval(){  return returnval;}  }
class C{  public static QName valueOf(String s){  if ((s == null) || s.equals("")) {    throw new IllegalArgumentException("invalid QName literal");  }  if (s.charAt(0) == '{') {    int i=s.indexOf('}');    if (i == -1) {      throw new IllegalArgumentException("invalid QName literal");    }    if (i == s.length() - 1) {      throw new IllegalArgumentException("invalid QName literal");    } else {      return new QName(s.substring(1,i),s.substring(i + 1));    }  } else {    return new QName(s);  }}  }
class C{  public synchronized int fileExists(JDBCSequentialFile file) throws SQLException {  connection.setAutoCommit(false);  selectFileByFileName.setString(1,file.getFileName());  try (ResultSet rs=selectFileByFileName.executeQuery()){    int id=rs.next() ? rs.getInt(1) : -1;    connection.commit();    return id;  } catch (  Exception e) {    connection.rollback();    throw e;  }}  }
class C{  protected void init() throws IOException {  if (internalIn2 != null)   return;  String encoding;  byte bom[]=new byte[BOM_SIZE];  int n, unread;  n=internalIn.read(bom,0,bom.length);  if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {    encoding="UTF-32BE";    unread=n - 4;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00)&& (bom[3] == (byte)0x00)) {    encoding="UTF-32LE";    unread=n - 4;  } else   if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    encoding="UTF-8";    unread=n - 3;  } else   if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {    encoding="UTF-16BE";    unread=n - 2;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {    encoding="UTF-16LE";    unread=n - 2;  } else {    encoding=defaultEnc;    unread=n;  }  if (unread > 0)   internalIn.unread(bom,(n - unread),unread);  if (encoding == null) {    internalIn2=new InputStreamReader(internalIn);  } else   if (strict) {    internalIn2=new InputStreamReader(internalIn,Charset.forName(encoding).newDecoder());  } else {    internalIn2=new InputStreamReader(internalIn,encoding);  }}  }
class C{  public static void openInBrowser(URI uri){  if (Desktop.isDesktopSupported()) {    try {      Desktop.getDesktop().browse(uri);    } catch (    IOException e) {      openInBrowserWithTempFile(uri);    }  } else {    showBrowserUnavailableMessage(uri.toString());  }}  }
class C{  public List<VirtualArrayRestRep> findByInitiators(Collection<InitiatorRestRep> initiators,ResourceFilter<VirtualArrayRestRep> filter){  Set<RelatedResourceRep> virtualArrayRefs=new TreeSet<RelatedResourceRep>(new RelatedResourceComparator());  for (  InitiatorRestRep initiator : initiators) {    String port=initiator.getInitiatorPort();    virtualArrayRefs.addAll(performSearchBy(SearchConstants.INITIATOR_PORT_PARAM,port));  }  return getByRefs(virtualArrayRefs,filter);}  }
class C{  public final int length(){  return _head - _tail;}  }
class C{  public void seekTo(int duration){  notifyPlayerLoading();  mediaPlayer.seekTo(duration * 1000);}  }
class C{  private void validateIDBookIsValid(Integer bookIDSession,Integer bookIDRequest,UseCaseConf useCaseConf) throws Exception {  if (_logger.isDebugEnabled()) {    _logger.debug("validateIDBookIsValid");  }  if ((bookIDSession != null) && (bookIDRequest != null)) {    compareIdBookSessionAndBookRequest(bookIDSession,bookIDRequest,useCaseConf);  } else {    if (((bookIDRequest != null) && (bookIDRequest != 0)) && (bookIDSession == null)) {      validateIDBookInCache(bookIDRequest,useCaseConf);    }  }}  }
class C{  public OnlineSearchProblem(ActionsFunction actionsFunction,GoalTest goalTest,StepCostFunction stepCostFunction){  this.actionsFunction=actionsFunction;  this.goalTest=goalTest;  this.stepCostFunction=stepCostFunction;}  }
class C{  public java.lang.StringBuffer insert(int offset,float f){  return null;}  }
class C{  public void dataStatusChanged(DataStatusEvent e){  log.config(e.getMessage());  boolean changed=e.isChanged();  bIgnore.setEnabled(changed);  bNew.setEnabled(!changed);  bSave.setEnabled(changed);  bDelete.setEnabled(!changed);}  }
class C{  public static Indication createDataIndication(TransportAddress peerAddress,byte[] data,byte[] tranID){  Indication dataIndication=new Indication();  try {    dataIndication.setMessageType(Message.DATA_INDICATION);    XorPeerAddressAttribute peerAddressAttribute=AttributeFactory.createXorPeerAddressAttribute(peerAddress,tranID);    dataIndication.putAttribute(peerAddressAttribute);    if (data != null && data.length > 0) {      DataAttribute dataAttribute=AttributeFactory.createDataAttribute(data);      dataIndication.putAttribute(dataAttribute);    }  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return dataIndication;}  }
class C{  public static boolean bernoulli(){  return bernoulli(0.5);}  }
class C{  @Override public void onReceive(Context context,Intent intent){  getOps().getVideoList();}  }
class C{  public Point2dUtils.Translater intoRegion(Rectangle2D region){  Rectangle2D graphOrtho=Point2dUtils.newOrthoRegion(graphArea);  return Point2dUtils.newIntoRegion(region,graphOrtho);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.323 -0500",hash_original_method="A3DC32615BCC1627FA6F5D9720F7FDA3",hash_generated_method="364063D4FD99910199DCA9476E1586D9") @DSSpec(DSCat.IO) public int read() throws IOException {  int ch;  if (__status == __LAST_WAS_NL) {    __status=__NOTHING_SPECIAL;    return '\n';  }  ch=in.read();switch (ch) {case '\r':    __status=__LAST_WAS_CR;  return '\r';case '\n':if (__status != __LAST_WAS_CR) {  __status=__LAST_WAS_NL;  return '\r';}default :__status=__NOTHING_SPECIAL;return ch;}}  }
class C{  private void tagEnd() throws IOException {  saveCurrent(2);  go(2);  _col+=2;  if (isAllRead()) {    return;  }  String tagName=identifier();  if (transformations != null && transformations.hasTransformationForTag(tagName)) {    TagTransformation tagTransformation=transformations.getTransformation(tagName);    if (tagTransformation != null) {      tagName=tagTransformation.getDestTag();    }  }  if (tagName != null) {    ITagInfoProvider tagInfoProvider=cleaner.getTagInfoProvider();    TagInfo tagInfo=tagInfoProvider.getTagInfo(tagName);    if ((tagInfo == null && !props.isOmitUnknownTags() && props.isTreatUnknownTagsAsContent() && !isReservedTag(tagName) && !props.isNamespacesAware()) || (tagInfo != null && tagInfo.isDeprecated() && !props.isOmitDeprecatedTags() && props.isTreatDeprecatedTagsAsContent())) {      content();      return;    }  }  _currentTagToken=new EndTagToken(tagName);  if (_asExpected) {    skipWhitespaces();    tagAttributes();    if (tagName != null) {      addToken(_currentTagToken);    }    if (isChar('>')) {      go();    }    if (props.isUseCdataFor(tagName)) {      _isSpecialContext=false;      _isSpecialContextName=tagName;    }    if (tagName != null && tagName.equalsIgnoreCase("html")) {      skipWhitespaces();    }    _currentTagToken=null;  } else {    addSavedAsContent();  }}  }
class C{  protected MessageIntegrityAttribute(){  super(MESSAGE_INTEGRITY);}  }
class C{  public boolean isSkipped(){  return hProcess.isSkipped(plugin);}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  protected BaseGameActivity(int requestedClients){  super();  setRequestedClients(requestedClients);}  }
class C{  public void postprocessRules(final EvolutionState state,final int thread){}  }
class C{  public _BuildUpdate(final _BuildUpdate_Flag[] flags){  super(flags);}  }
class C{  public void doRun(){  try {    if (m_tradingdays.isDirty()) {      this.setStatusBarMessage("Please save or refresh before running strategy ...\n",BasePanel.WARNING);    } else {      runStrategy(m_tradingdays,false);    }  } catch (  Exception ex) {    this.setErrorMessage("Error running Trade Strategies.",ex.getMessage(),ex);  }}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);  mContentView.setVisibility(GONE);}  }
class C{  public void testGetColumnCount(){  System.out.println("getColumnCount");  TableHelper instance=new TableHelper(new ArrayList<TableEntry>());  int expResult=9;  int result=instance.getColumnCount();  assertEquals(expResult,result);}  }
class C{  public SchemaFactory(){}  }
class C{  public void cancel(){  mIsCanceled.set(true);}  }
class C{  @Override public boolean isResetted(){  return (x == 0.0f && y == 0.0f && z == 0.0f);}  }
class C{  public void testReadStringInvalidUtf8() throws Exception {  ByteString.Output rawOutput=ByteString.newOutput();  CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);  int tag=WireFormat.makeTag(1,WireFormat.WIRETYPE_LENGTH_DELIMITED);  output.writeRawVarint32(tag);  output.writeRawVarint32(1);  output.writeRawBytes(new byte[]{(byte)0x80});  output.flush();  CodedInputStream input=rawOutput.toByteString().newCodedInput();  assertEquals(tag,input.readTag());  String text=input.readString();  assertEquals(0xfffd,text.charAt(0));}  }
class C{  public static String readFromStream(InputStream is){  InputStreamReader isr;  try {    isr=new InputStreamReader(is,"UTF-8");    BufferedReader br=new BufferedReader(isr);    StringBuilder sb=new StringBuilder();    String line;    while ((line=br.readLine()) != null) {      sb.append(line);      sb.append('\n');    }    br.close();    return sb.toString();  } catch (  UnsupportedEncodingException e) {    return null;  }catch (  IOException e) {    return null;  }}  }
class C{  public void addMigratingInContainer(Container container){  container.setInMigration(true);  if (!getContainersMigratingIn().contains(container)) {    if (getSize() < container.getSize()) {      Log.printConcatLine("[ContainerScheduler.addMigratingInContainer] Allocation of VM #",container.getId()," to Host #",getId()," failed by storage");      System.exit(0);    }    if (!getContainerRamProvisioner().allocateRamForContainer(container,container.getCurrentRequestedRam())) {      Log.printConcatLine("[ContainerScheduler.addMigratingInContainer] Allocation of VM #",container.getId()," to Host #",getId()," failed by RAM");      System.exit(0);    }    if (!getContainerBwProvisioner().allocateBwForContainer(container,container.getCurrentRequestedBw())) {      Log.printLine("[ContainerScheduler.addMigratingInContainer] Allocation of VM #" + container.getId() + " to Host #"+ getId()+ " failed by BW");      System.exit(0);    }    getContainerScheduler().getContainersMigratingIn().add(container.getUid());    if (!getContainerScheduler().allocatePesForContainer(container,container.getCurrentRequestedMips())) {      Log.printLine(String.format("[ContainerScheduler.addMigratingInContainer] Allocation of VM #%d to Host #%d failed by MIPS",container.getId(),getId()));      System.exit(0);    }    setSize(getSize() - container.getSize());    getContainersMigratingIn().add(container);    getContainerList().add(container);    updateContainersProcessing(CloudSim.clock());    container.getVm().updateContainersProcessing(CloudSim.clock());  }}  }
class C{  public static void waitElementToNotBePresent(SearchContext parent,By by,int waitInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  try {    WebElementWait wait=new WebElementWait(parent,waitInSeconds);    wait.until(null);  } catch (  TimeoutException e) {    throw new TimeoutException(String.format("Element %s is still present after %s seconds",by,waitInSeconds),e);  }}  }
class C{  @Beta public void reset(){  schedulersHook.set(null);}  }
class C{  @SuppressWarnings("unused") private static int smoothedJackknifeEstimator(int nRows,int sampleSize,ReaderColumnSelection sampleRowsReader){  return smoothedJackknifeEstimator(nRows,sampleSize,sampleRowsReader,getValCounts(sampleRowsReader));}  }
class C{  protected ShaderVar addGlobal(String name,DataType dataType){  ShaderVar v=getInstanceForDataType(name,dataType);  v.isGlobal(true);  mGlobals.put(v.getName(),v);  return v;}  }
class C{  private VNXFileCommApi loadVNXFileCommunicationAPIs(ApplicationContext context){  VNXFileCommApi vnxComm=null;  try {    vnxComm=(VNXFileCommApi)context.getBean(VNXCOMM_API);    vnxComm.setDbClient(_dbClient);  } catch (  Exception e) {    throw new DeviceControllerException("VNXFile Provisioning context didn't get loaded properly.Terminating File System Provisioning operations.");  }  return vnxComm;}  }
class C{  public static boolean contains(Enumeration enumeration,Object element){  if (enumeration != null) {    while (enumeration.hasMoreElements()) {      Object candidate=enumeration.nextElement();      if (ObjectUtils.nullSafeEquals(candidate,element)) {        return true;      }    }  }  return false;}  }
class C{  public byte[] printReceipt(ReceiptPackage receiptPackage,ReceiptPrintType receiptPrintType){  return cashBoxParameters.getPrinterModule().printReceipt(receiptPackage,receiptPrintType);}  }
class C{  public void init(){  if (!isVMwareVapp()) {    startRecoveryLeaderSelector();    addRecoveryStatusListener();  } else {    log.info("No need to init for node recovery in VMware vApp environment");  }}  }
class C{  public ViewHelperImpl view(View target){  if (target == null)   throw new NullPointerException("target view can;t be null!");  this.v=target;  return this;}  }
class C{  @Override public void afterPhase(PhaseEvent event){  PhaseListener listener=getPhaseListener();  if (listener != null) {    listener.afterPhase(event);  }}  }
class C{  public static String portName(StoragePort port){  if (port.getPortName().startsWith(port.getPortGroup())) {    return port.getPortName();  } else {    return port.getPortGroup() + ":" + port.getPortName();  }}  }
class C{  @Override protected void onResume(){  super.onResume();  LOG.d(TAG,"Resumed the activity.");  if (this.appView == null) {    return;  }  this.getWindow().getDecorView().requestFocus();  this.appView.handleResume(this.keepRunning);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.DBG)   System.out.println("Received API call to dump thread states...do it now!");  AWTThreadWatcher.dumpThreadStates();  return null;}  }
class C{  private void addPluginMenus(final JComponent menu){  final List<IModuleMenuPlugin> plugins=new ArrayList<>();  for (  final IPlugin<IPluginInterface> plugin : PluginInterface.instance().getPluginRegistry()) {    if (plugin instanceof IModuleMenuPlugin) {      plugins.add((IModuleMenuPlugin)plugin);    }  }  boolean addedSeparator=false;  for (  final IModuleMenuPlugin plugin : plugins) {    try {      final List<JComponent> menuItems=plugin.extendModuleMenu(getPluginModules());      if (menuItems != null) {        for (        final JComponent menuItem : menuItems) {          if (!addedSeparator) {            menu.add(new JSeparator());            addedSeparator=true;          }          menu.add(menuItem);        }      }    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);      final String innerMessage="E00093: " + "Plugin caused an unexpected exception";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The plugin %s caused an unexpected exception.",plugin.getName()),new String[]{"The plugin contains a bug."},new String[]{"The plugin probably behaves erroneously from this point on but it remains active"});      NaviErrorDialog.show(getParent(),innerMessage,innerDescription,exception);    }  }}  }
class C{  public boolean hasQuotaBytesUsed(){  return hasExtension(QuotaBytesUsed.class);}  }
class C{  public void mouseExited(MouseEvent evt){}  }
class C{  @Deprecated public static <T>T var(Var<T> var){  return var.value;}  }
class C{  @Ignore @Test public void testFaultInEntryValueShouldbeSerialized(){  try {    assertNotNull(cache);    LocalRegion rgn=(LocalRegion)cache.getRegion(Region.SEPARATOR + regionName);    assertNotNull(rgn);    assertEquals("Region is not properly cleared ",0,rgn.size());    assertTrue("Entry count not 0 ",new Long(0).equals(new Long(lifoStats.getCounter())));    for (int i=0; i < 8; i++) {      rgn.put(new Long(i),new Long(i));    }    assertTrue("FaultIn Value in not a byte Array ",rgn.get(new Long(6)) instanceof byte[]);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Test failed");  }}  }
class C{  public static double varp(double[] a,int lo,int hi){  int length=hi - lo + 1;  if (lo < 0 || hi >= a.length || lo > hi)   throw new IndexOutOfBoundsException("Subarray indices out of bounds");  if (length == 0)   return Double.NaN;  double avg=mean(a,lo,hi);  double sum=0.0;  for (int i=lo; i <= hi; i++) {    sum+=(a[i] - avg) * (a[i] - avg);  }  return sum / length;}  }
class C{  public void testLoginUnknownUser(){  ISWebServiceSessionSoap client=(ISWebServiceSessionSoap)this.applicationContext.getBean(CLIENT_WEB_SERVICE_SESSION);  Security security=new Security();  UsernameTokenClass value=new UsernameTokenClass();  value.setUsername("foo");  value.setPassword("bar");  value.setOfficeCode("001");  security.setUsernameToken(value);  try {    client.wsLogin(security);  } catch (  Exception e) {    assertTrue(e instanceof SOAPFaultException);    return;  }  fail();}  }
class C{  public boolean isCsVideoSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_CS_VIDEO);}  }
class C{  public Address leader(){  return leader;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static <T>List<T> compose(List<? extends T> l1,List<? extends T> l2){  return new ComposedList(l1,l2);}  }
class C{  public static Array create(Element arrayE) throws Exception {  if (!isArray(arrayE)) {    throw new Exception("[Array] the supplied element does not contain an array!");  }  if (isSparseArray(arrayE)) {    return new SparseArray(arrayE);  }  return new Array(arrayE);}  }
class C{  public DNetscapeCertificateType(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNetscapeCertificateType.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public TaskStackBuilder addNextIntent(Intent nextIntent){  mIntents.add(nextIntent);  return this;}  }
class C{  static double zetastatic(long st,long n,double theta,double initialsum){  double sum=initialsum;  for (long i=st; i < n; i++) {    sum+=1 / (Math.pow(i + 1,theta));  }  return sum;}  }
class C{  public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScroll()) {    if (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {      View currentFocused=findFocus();      if (currentFocused == this)       currentFocused=null;      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_DOWN);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_DOWN);    }    return false;  }  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_UP:      if (!event.isAltPressed()) {        handled=arrowScroll(View.FOCUS_UP);      } else {        handled=fullScroll(View.FOCUS_UP);      }    break;case KeyEvent.KEYCODE_DPAD_DOWN:  if (!event.isAltPressed()) {    handled=arrowScroll(View.FOCUS_DOWN);  } else {    handled=fullScroll(View.FOCUS_DOWN);  }break;case KeyEvent.KEYCODE_SPACE:pageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);break;}}return handled;}  }
class C{  public TaskHandle addZoneRefreshTask(String fullyQualifiedZoneName){  return addToQueue(TargetType.ZONE,fullyQualifiedZoneName,fullyQualifiedZoneName);}  }
class C{  public PlainFormatter(boolean appendLineSeparator){  appendLS=appendLineSeparator;}  }
class C{  public static Integer executeIntQuery(String sql,Connection con,boolean mandatory) throws AdeException {  final IntQueryExecuter executer=new IntQueryExecuter(sql,con,mandatory);  executer.executeQuery();  if (mandatory && executer.m_result == null) {    throw new AdeInternalException("Query " + sql + " returned null result");  }  return executer.m_result;}  }
class C{  public void synthesize(String ttsString){  Log.d(TAG,"synthesize called: " + this.hostURL.toString() + "/v1/synthesize");  String[] Arguments={this.hostURL.toString() + "/v1/synthesize",this.username,this.password,this.voice,ttsString,this.tokenProvider == null ? null : this.tokenProvider.getToken(),this.learningOptOut ? "true" : null};  try {    ttsUtility=new TTSUtility();    ttsUtility.setCodec(TTSUtility.CODEC_WAV);    ttsUtility.synthesize(Arguments);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private static String formHead(String hair,String face,String neck){  return String.join("",hair,face,neck);}  }
class C{  public Boolean isX509Token(){  return x509Token;}  }
class C{  public static AztecCode encode(byte[] data){  return encode(data,DEFAULT_EC_PERCENT,DEFAULT_AZTEC_LAYERS);}  }
class C{  public void addInvokespecial(int clazz,String name,String desc){  addInvokespecial(false,clazz,name,desc);}  }
class C{  public MutableDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,DateTimeZone zone){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,zone);}  }
class C{  private BrandUtil(){  instanceNotAllowed(getClass());}  }
class C{  public boolean sharedPreferenceExists(String preferenceName){  SharedPreferences pref=mContext.getSharedPreferences(preferenceName,0);  return pref.contains(preferenceName);}  }
class C{  private HARegionQueue createHARegionQueue(String name) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public static String join(String separator,List<String> strings){  StringBuilder sb=new StringBuilder();  for (Iterator<String> iter=strings.iterator(); iter.hasNext(); ) {    String s=iter.next();    sb.append(s);    if (iter.hasNext())     sb.append(separator);  }  return sb.toString();}  }
class C{  protected void engineInit(AlgorithmParameterSpec genParamSpec,SecureRandom random) throws InvalidAlgorithmParameterException {  if (!(genParamSpec instanceof DHGenParameterSpec)) {    throw new InvalidAlgorithmParameterException("Inappropriate parameter type");  }  DHGenParameterSpec dhParamSpec=(DHGenParameterSpec)genParamSpec;  primeSize=dhParamSpec.getPrimeSize();  try {    checkKeySize(primeSize);  } catch (  InvalidParameterException ipe) {    throw new InvalidAlgorithmParameterException(ipe.getMessage());  }  exponentSize=dhParamSpec.getExponentSize();  if (exponentSize <= 0) {    throw new InvalidAlgorithmParameterException("Exponent size must be greater than zero");  }  if (exponentSize >= primeSize) {    throw new InvalidAlgorithmParameterException("Exponent size must be less than modulus size");  }}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.712 -0400",hash_original_method="D7ED8780EA10829FC69FCC0BE368EAAC",hash_generated_method="81445DFC34CE6798AF01D55349AA8152") public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    int n=size;    size=0;    for (int i=0; i < n; i++)     array[i]=null;  }  finally {    lock.unlock();  }}  }
class C{  public int face(){  return (int)(id >>> POS_BITS);}  }
class C{  protected void scanAllocationRequestList(ArrayList<AllocationRequest> list){  if (list.size() <= 0) {    return;  }  copyAndSortARs(list);  removeCompletePlans();  for (int i=0; i < orderedRequests.size(); i++) {    try {      AllocationRequest ar=orderedRequests.get(i);      if (ar == null) {        log.error("error in allocation request list - AllocationRequest is null");        return;      }      if (DispatcherFrame.instance().getSignalType() == DispatcherFrame.SIGNALMAST && isSignalHeldAtStartOfSection(ar)) {        return;      }      if (getPlanThisTrain(ar.getActiveTrain()) != null) {        if (willAllocatingFollowPlan(ar,getPlanThisTrain(ar.getActiveTrain()))) {          if (allocateIfLessThanThreeAhead(ar)) {            return;          }        }      } else       if (!waitingForStartTime(ar)) {        if ((ar.getSection().getState() == Section.FREE) && (ar.getSection().getOccupancy() != Section.OCCUPIED) && (_dispatcher.getSignalType() == DispatcherFrame.SIGNALHEAD || (_dispatcher.getSignalType() == DispatcherFrame.SIGNALMAST && _dispatcher.checkBlocksNotInAllocatedSection(ar.getSection(),ar) == null))) {          ArrayList<ActiveTrain> activeTrainsList=_dispatcher.getActiveTrainsList();          if (activeTrainsList.size() == 1) {            if (allocateIfLessThanThreeAhead(ar)) {              return;            }          } else {            boolean okToAllocate=true;            ArrayList<ActiveTrain> neededByTrainList=new ArrayList<ActiveTrain>();            for (int j=0; j < activeTrainsList.size(); j++) {              ActiveTrain at=activeTrainsList.get(j);              if (at != ar.getActiveTrain()) {                if (sectionNeeded(ar,at)) {                  neededByTrainList.add(at);                }              }            }            if (neededByTrainList.size() <= 0) {              if (containsLevelXing(ar.getSection())) {                for (int j=0; j < activeTrainsList.size(); j++) {                  ActiveTrain at=activeTrainsList.get(j);                  if ((at != ar.getActiveTrain()) && (at.getPriority() > ar.getActiveTrain().getPriority())) {                    if (willLevelXingsBlockTrain(at)) {                      okToAllocate=false;                    }                  }                }              }            } else {              for (int k=0; k < neededByTrainList.size(); k++) {                ActiveTrain nt=neededByTrainList.get(k);                if (sameDirection(ar,nt)) {                  if (firstTrainLeadsSecond(ar.getActiveTrain(),nt) && (nt.getPriority() > ar.getActiveTrain().getPriority())) {                    if (checkForPassingPlan(ar,nt,neededByTrainList)) {                      if (!willAllocatingFollowPlan(ar,getPlanThisTrain(ar.getActiveTrain()))) {                        okToAllocate=false;                      }                    }                  }                } else {                  if (willTrainsCross(ar.getActiveTrain(),nt)) {                    if (checkForXingPlan(ar,nt,neededByTrainList)) {                      if (!willAllocatingFollowPlan(ar,getPlanThisTrain(ar.getActiveTrain()))) {                        okToAllocate=false;                      }                    }                  }                }              }            }            if (okToAllocate) {              if (allocateIfLessThanThreeAhead(ar)) {                return;              }            }          }        }      }    } catch (    Exception e) {      log.warn("scanAllocationRequestList - maybe the allocationrequest was removed due to a terminating train??" + e.toString());      continue;    }  }}  }
class C{  public boolean ownerControl(){  return false;}  }
class C{  public void queryError(OutputStream os,HeadersAmp headers,String address,long qId,Throwable exn) throws IOException {  init(os);  OutH3 out=_out;  if (out == null)   return;  if (log.isLoggable(_level)) {    log.log(_level,"query-error " + exn + " (in "+ this+ ")"+ " {to:"+ address+ ", "+ headers+ "}");    if (log.isLoggable(Level.FINEST)) {      log.log(Level.FINEST,exn.toString(),exn);    }  }  try {    out.writeLong(MessageTypeHamp.QUERY_ERROR.ordinal());    writeHeaders(out,headers);    writeToAddress(out,address);    out.writeLong(qId);    ErrorAmp error=ErrorAmp.create(exn);    out.writeString(error.getCode().toString());    out.writeString(error.getMessage());    out.writeObject(error.getDetail());  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  public TFloatHashSet(float[] array){  this(array.length);  addAll(array);}  }
class C{  public Cache(int pref_size,int size){  cache_size=size;  prefix_size=pref_size;  hashes=new long[cache_size];  hashes_idx=new long[cache_size];  encodings=new byte[cache_size][];  cache=new Object[cache_size];}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public static CacheInfoRequest create(){  CacheInfoRequest m=new CacheInfoRequest();  return m;}  }
class C{  public MockResult(Object beans[]){  if (beans == null) {    throw new NullPointerException();  }  this.beans=beans;}  }
class C{  @Override protected void onStart(){  super.onStart();  setShownTypes();  mAdapter.setStatisticItems(mShownTypes);  mAdapter.notifyDataSetChanged();}  }
class C{  public boolean wasCancelled(){  return cancelled;}  }
class C{  private void growAndRehash(){  final LongArray oldLongArray=longArray;  final BitSet oldBitSet=bitset;  final long oldCapacity=oldBitSet.capacity();  allocate(growthStrategy.nextCapacity(oldCapacity));  for (long pos=oldBitSet.nextSetBit(0); pos >= 0; pos=oldBitSet.nextSetBit(pos + 1)) {    final long key=oldLongArray.get(pos * 2);    final long value=oldLongArray.get(pos * 2 + 1);    long newPos=HASHER.hashLong(key) & mask;    long step=1;    boolean keepGoing=true;    while (keepGoing) {      if (!bitset.isSet(newPos)) {        longArray.set(newPos * 2,key);        longArray.set(newPos * 2 + 1,value);        bitset.set(newPos);        keepGoing=false;      } else {        newPos=(newPos + step) & mask;        step++;      }    }  }  allocator.free(oldLongArray.memoryBlock());  allocator.free(oldBitSet.memoryBlock());}  }
class C{  public void deletedDocument(int commitWithin){  _scheduleCommitWithinIfNeeded(commitWithin);}  }
class C{  public boolean removeEdge(Edge edge){  return getEdges().remove(edge);}  }
class C{  public static PLViewParameters checkViewParametersWithMask(int mask){  PLViewParameters parameters=PLViewParameters.PLViewParametersMake();  if ((mask & PLViewParameterTypeReset) == PLViewParameterTypeReset)   parameters.reset=true;  if ((mask & PLViewParameterTypeScrolling) == PLViewParameterTypeScrolling)   parameters.scrolling=true;  if ((mask & PLViewParameterTypeInertia) == PLViewParameterTypeInertia)   parameters.inertia=true;  if ((mask & PLViewParameterTypeAccelerometer) == PLViewParameterTypeAccelerometer)   parameters.accelerometer=true;  if ((mask & PLViewParameterTypeSensorialRotation) == PLViewParameterTypeSensorialRotation)   parameters.sensorialRotation=true;  return parameters;}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  area=trimMargin(area);  drawBorder(g2,area);  area=trimBorder(area);  if (this.backgroundPaint != null) {    g2.setPaint(this.backgroundPaint);    g2.fill(area);  }  area=trimPadding(area);  return this.container.draw(g2,area,params);}  }
class C{  public String toString(){  return String.format("(%.2f,%.2f)",x,y);}  }
class C{  public SocksException(int errCode){  this.errCode=errCode;  if ((errCode >> 16) == 0) {    errString=errCode <= serverReplyMessage.length ? serverReplyMessage[errCode] : UNASSIGNED_ERROR_MESSAGE;  } else {    errCode=(errCode >> 16) - 1;    errString=errCode <= localErrorMessage.length ? localErrorMessage[errCode] : UNASSIGNED_ERROR_MESSAGE;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Sage.getBoolean("miniclient/enable_cached_authentication",true));}  }
class C{  public void computeVertexSnaps(Collection edges){  for (Iterator i0=edges.iterator(); i0.hasNext(); ) {    NodedSegmentString edge0=(NodedSegmentString)i0.next();    computeVertexSnaps(edge0);  }}  }
class C{  public boolean updateMessage(String message,int priority){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    db.execSQL("UPDATE " + TABLE + " SET "+ COL_LIKES+ "="+ priority+ " WHERE "+ COL_MESSAGE+ "='"+ Utils.makeTextSafeForSQL(message)+ "';");    log.debug("Message priority changed in the store.");    return true;  }  log.debug("Message was not edited, either message or database is null. [" + message + "]");  return false;}  }
class C{  public void reset(){  coords.removeAllElements();  xypoints.removeAllElements();  profileLine.setLocation(setLLPoints(),OMGraphic.RADIANS);  stateMachine.reset();  layer.repaint();  lastMouse=null;}  }
class C{  public boolean inCompletion(){  return inCompletion;}  }
class C{  private void handleNumericAttribute(Instances trainInstances) throws Exception {  int firstMiss;  int next=1;  int last=0;  int index=0;  int splitIndex=-1;  double currentInfoGain;  double defaultEnt;  double minSplit;  Instance instance;  int i;  m_distribution=new Distribution(2,trainInstances.numClasses());  Enumeration<Instance> enu=trainInstances.enumerateInstances();  i=0;  while (enu.hasMoreElements()) {    instance=enu.nextElement();    if (instance.isMissing(m_attIndex)) {      break;    }    m_distribution.add(1,instance);    i++;  }  firstMiss=i;  minSplit=0.1 * (m_distribution.total()) / (trainInstances.numClasses());  if (Utils.smOrEq(minSplit,m_minNoObj)) {    minSplit=m_minNoObj;  } else   if (Utils.gr(minSplit,25)) {    minSplit=25;  }  if (Utils.sm(firstMiss,2 * minSplit)) {    return;  }  defaultEnt=m_infoGainCrit.oldEnt(m_distribution);  while (next < firstMiss) {    if (trainInstances.instance(next - 1).value(m_attIndex) + 1e-5 < trainInstances.instance(next).value(m_attIndex)) {      m_distribution.shiftRange(1,0,trainInstances,last,next);      if (Utils.grOrEq(m_distribution.perBag(0),minSplit) && Utils.grOrEq(m_distribution.perBag(1),minSplit)) {        currentInfoGain=m_infoGainCrit.splitCritValue(m_distribution,m_sumOfWeights,defaultEnt);        if (Utils.gr(currentInfoGain,m_infoGain)) {          m_infoGain=currentInfoGain;          splitIndex=next - 1;        }        index++;      }      last=next;    }    next++;  }  if (index == 0) {    return;  }  if (m_useMDLcorrection) {    m_infoGain=m_infoGain - (Utils.log2(index) / m_sumOfWeights);  }  if (Utils.smOrEq(m_infoGain,0)) {    return;  }  m_numSubsets=2;  m_splitPoint=(trainInstances.instance(splitIndex + 1).value(m_attIndex) + trainInstances.instance(splitIndex).value(m_attIndex)) / 2;  if (m_splitPoint == trainInstances.instance(splitIndex + 1).value(m_attIndex)) {    m_splitPoint=trainInstances.instance(splitIndex).value(m_attIndex);  }  m_distribution=new Distribution(2,trainInstances.numClasses());  m_distribution.addRange(0,trainInstances,0,splitIndex + 1);  m_distribution.addRange(1,trainInstances,splitIndex + 1,firstMiss);  m_gainRatio=m_gainRatioCrit.splitCritValue(m_distribution,m_sumOfWeights,m_infoGain);}  }
class C{  public boolean isDisabled(){  return OptionElement.as(this.getElement()).isDisabled();}  }
class C{  public void paintComponent(Graphics graphics){  this.rectMap.clear();  Graphics2D g2d=(Graphics2D)graphics;  int height=HEIGHT - PADDING;  FontMetrics fontMetrics=g2d.getFontMetrics();  g2d.setColor(this.getBackground());  g2d.fillRect(0,0,WIDTH + 2 * SPACE,HEIGHT);  g2d.setColor(Color.WHITE);  g2d.fillRect(PADDING,0,(WIDTH + SPACE) - PADDING,height);  g2d.setColor(LINE_COLOR);  g2d.drawRect(PADDING,0,(WIDTH + SPACE) - PADDING,height);  g2d.setColor(LINE_COLOR);  g2d.drawString(format.format(Math.floor(this.qqPlot.getMinSample())),PADDING + 5,height + 15);  g2d.drawLine(PADDING,height + DASH,PADDING,height);  String maxStr=format.format((int)Math.ceil(this.qqPlot.getMaxSample()));  g2d.drawString(maxStr,WIDTH - fontMetrics.stringWidth(maxStr),height + 15);  g2d.drawLine(WIDTH + SPACE,height + DASH,WIDTH + SPACE,height);  int size=(WIDTH - PADDING) / 4;  g2d.setColor(LINE_COLOR);  int topY=0;  String top="" + Math.ceil(this.qqPlot.getMaxSample());  g2d.drawString(top,PADDING - fontMetrics.stringWidth(top),topY + 10);  g2d.drawLine(PADDING - DASH,topY,PADDING,topY);  g2d.drawString(Math.floor(this.qqPlot.getMinSample()) + "",PADDING - fontMetrics.stringWidth(Math.floor(this.qqPlot.getMinIdeal()) + ""),height - 2);  g2d.drawLine(PADDING - DASH,height,PADDING,height);  double idealRange=this.qqPlot.getMaxIdeal() - this.qqPlot.getMinIdeal();  double sampleRange=this.qqPlot.getMaxSample() - this.qqPlot.getMinSample();  double idealPerSample=idealRange / sampleRange;  double intersectPoint=this.qqPlot.getMaxSample() * idealPerSample;  int dataColumn=this.qqPlot.getDataSet().getColumn(this.qqPlot.getSelectedVariable());  if (dataColumn == -1) {    for (int i=0; i < this.qqPlot.getDataSet().getNumColumns(); i++) {      if (this.qqPlot.getDataSet().getVariable(i) instanceof ContinuousVariable) {        this.qqPlot.setSelectedVariable((ContinuousVariable)this.qqPlot.getDataSet().getVariable(i));        dataColumn=i;        break;      }    }  }  g2d.setColor(new Color(255,0,0));  double originX=PADDING - 2;  double originY=height - 2;  for (int i=0; i < this.qqPlot.getDataSet().getNumRows(); i++) {    double x=(this.qqPlot.getDataSet().getDouble(i,dataColumn));    double y=(this.qqPlot.getComparisonVariable()[i]);    if (x >= this.qqPlot.getMinSample() && x <= this.qqPlot.getMaxSample() && y >= this.qqPlot.getMinSample() && y <= this.qqPlot.getMaxSample()) {      double result[]=plotPoint(x,y,Math.floor(this.qqPlot.getMinSample()),Math.ceil(this.qqPlot.getMaxSample()));      g2d.fill(new Ellipse2D.Double(result[0],result[1],4,4));    }  }  g2d.setColor(LINE_COLOR);  g2d.drawString(getDisplayString(),PADDING,HEIGHT - 5);}  }
class C{  private void assertWriting(){  if (!isWriting()) {    throw new IllegalStateException("No write operation in progress");  }}  }
class C{  public SpeechToText(){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }}  }
class C{  public boolean hasClass(String... classNames){  for (  Node node : nodes) {    String attrClass=node.getAttribute("class");    Set<String> classes=createPropertiesSet(attrClass,' ');    for (    String className : classNames) {      if (classes.contains(className)) {        return true;      }    }  }  return false;}  }
class C{  private boolean processRemovedNode(final INaviViewNode node){  if (node instanceof INaviCodeNode) {    final INaviCodeNode cnode=(INaviCodeNode)node;    try {      final INaviFunction targetFunction=cnode.getParentFunction();      if (m_nodeCounter.containsKey(targetFunction)) {        final int newCounter=m_nodeCounter.get(targetFunction) - 1;        if (newCounter == 0) {          m_nodeCounter.remove(targetFunction);          final Set<CCrossReference> toDelete=new HashSet<CCrossReference>();          for (          final CCrossReference reference : m_crossReferences) {            if (reference.getCalledFunction() == targetFunction) {              toDelete.add(reference);            }          }          m_crossReferences.removeAll(toDelete);          return true;        } else {          m_nodeCounter.put(targetFunction,newCounter);        }      }    } catch (    final MaybeNullException exception) {    }  }  return false;}  }
class C{  public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){  verify(cr,null,dump,pw);}  }
class C{  public boolean verifyKeyedChecksum(byte[] data,int size,byte[] key,byte[] checksum,int usage) throws KrbCryptoException {  try {    byte[] newCksum=ArcFourHmac.calculateChecksum(key,usage,data,0,size);    return isChecksumEqual(checksum,newCksum);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  public NominalPrediction(double actual,double[] distribution,double weight){  if (distribution == null) {    throw new NullPointerException("Null distribution in NominalPrediction.");  }  m_Actual=actual;  m_Distribution=distribution.clone();  m_Weight=weight;  updatePredicted();}  }
class C{  private void drawHole(){  if (mDrawHole) {    mDrawCanvas.drawCircle(mContentRect.width() / 2,mContentRect.height() / 2,getDiameter() / 4,mHolePaint);  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public OrientedBoundingBox computeOrientedBoundingBox(){  return GestureUtils.computeOrientedBoundingBox(points);}  }
class C{  public UnsignedMessageFromServerProxy(){  requestFileName="getstate.query";  responseFile="no-signature.query";  responseContentType="multipart/mixed; charset=UTF-8; " + "boundary=jetty42534330h7vzfqv2";}  }
class C{  public int column(){  return column;}  }
class C{  public IllegalFunctionRequest(int function){  setFunctionCode(function);}  }
class C{  public void deleteAll(){  Integer oldSize=Integer.valueOf(_hashTable.size());  Enumeration<String> en=_hashTable.keys();  while (en.hasMoreElements()) {    RollingStock rs=getById(en.nextElement());    rs.dispose();    _hashTable.remove(rs.getId());  }  firePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_hashTable.size()));}  }
class C{  public PeerNetwork clone(){  PeerNetwork clone=new WifiDirectPeerNetwork(new WifiP2pDevice(this.wifiP2pDevice));  return clone;}  }
class C{  public ByteArrayList grep(TIntProcedure condition){  ByteArrayList list=new ByteArrayList();  for (int i=0; i < _pos; i++) {    if (condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  protected static QueryPlan build(QueryGraph queryGraph,OuterJoinDesc[] outerJoinDescList,String[] streamNames,EventType[] typesPerStream,HistoricalViewableDesc historicalViewableDesc,DependencyGraph dependencyGraph,HistoricalStreamIndexList[] historicalStreamIndexLists,ExprEvaluatorContext exprEvaluatorContext,String[][][] indexedStreamsUniqueProps,TableMetadata[] tablesPerStream) throws ExprValidationException {  if (log.isDebugEnabled()) {    log.debug(".build queryGraph=" + queryGraph);  }  int numStreams=queryGraph.getNumStreams();  QueryPlanNode[] planNodeSpecs=new QueryPlanNode[numStreams];  QueryPlanIndex[] indexSpecs=QueryPlanIndexBuilder.buildIndexSpec(queryGraph,typesPerStream,indexedStreamsUniqueProps);  if (log.isDebugEnabled()) {    log.debug(".build Index build completed, indexes=" + QueryPlanIndex.print(indexSpecs));  }  if (historicalViewableDesc.isHasHistorical()) {    for (int i=0; i < historicalViewableDesc.getHistorical().length; i++) {      if (historicalViewableDesc.getHistorical()[i]) {        indexSpecs[i]=null;      }    }  }  OuterInnerDirectionalGraph outerInnerGraph;  InnerJoinGraph innerJoinGraph;  if (outerJoinDescList.length > 0) {    outerInnerGraph=graphOuterJoins(numStreams,outerJoinDescList);    innerJoinGraph=InnerJoinGraph.graphInnerJoins(numStreams,outerJoinDescList);  } else {    outerInnerGraph=new OuterInnerDirectionalGraph(numStreams);    innerJoinGraph=new InnerJoinGraph(numStreams,true);  }  if (log.isDebugEnabled()) {    log.debug(".build directional graph=" + outerInnerGraph.print());  }  for (int streamNo=0; streamNo < numStreams; streamNo++) {    if ((historicalViewableDesc.getHistorical()[streamNo]) && (dependencyGraph.hasDependency(streamNo))) {      planNodeSpecs[streamNo]=new QueryPlanNodeNoOp();      continue;    }    QueryPlanNode queryPlanNode=buildPlanNode(numStreams,streamNo,streamNames,queryGraph,outerInnerGraph,outerJoinDescList,innerJoinGraph,indexSpecs,typesPerStream,historicalViewableDesc.getHistorical(),dependencyGraph,historicalStreamIndexLists,exprEvaluatorContext,tablesPerStream);    if (log.isDebugEnabled()) {      log.debug(".build spec for stream '" + streamNames[streamNo] + "' number "+ streamNo+ " is "+ queryPlanNode);    }    planNodeSpecs[streamNo]=queryPlanNode;  }  QueryPlan queryPlan=new QueryPlan(indexSpecs,planNodeSpecs);  if (log.isDebugEnabled()) {    log.debug(".build query plan=" + queryPlan.toString());  }  return queryPlan;}  }
class C{  private boolean isRestrictedToOneLink(){  return relatedLinkType != null && relatedLinkType.getLinkType().isOneToMany() && !relatedLinkType.isForwardLink();}  }
class C{  public static boolean copyFile(String sourceFilePath,String destFilePath){  InputStream inputStream=null;  try {    inputStream=new FileInputStream(sourceFilePath);  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }  return writeFile(destFilePath,inputStream);}  }
class C{  public void endVisit(ClassInstanceCreation node){}  }
class C{  public static void arc(double x,double y,double r,double angle1,double angle2){  if (r < 0)   throw new IllegalArgumentException("arc radius must be nonnegative");  while (angle2 < angle1)   angle2+=360;  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Arc2D.Double(xs - ws / 2,ys - hs / 2,ws,hs,angle1,angle2 - angle1,Arc2D.OPEN));  draw();}  }
class C{  public static String paramToQueryString(Map<String,String> params,String charset){  if (params == null || params.isEmpty()) {    return null;  }  StringBuilder paramString=new StringBuilder();  boolean first=true;  for (  Map.Entry<String,String> p : params.entrySet()) {    String key=p.getKey();    String value=p.getValue();    if (!first) {      paramString.append("&");    }    paramString.append(HttpUtil.urlEncode(key,charset));    if (!isEmptyString(value)) {      paramString.append("=").append(HttpUtil.urlEncode(value,charset));    }    first=false;  }  return paramString.toString();}  }
class C{  public boolean isTemporary(){  return temporary;}  }
class C{  public NoSignatureToServerProxy(){  requestFileName="no-signature.query";  requestContentType="multipart/mixed; " + "boundary=jetty42534330h7vzfqv2;charset=ISO-8859-1";  url="http://127.0.0.1:" + PortNumbers.PROXY_PORT;}  }
class C{  public synchronized void incubate(T o){  if (o == null)   throw new IllegalArgumentException("null arg");  if (hatchMap.containsKey(o))   throw new IllegalArgumentException(o + " is already incubating");  hatchMap.put(o,o);  orderList.addLast(o);  notifyAll();}  }
class C{  public Map<String,Object> asMapProperties(){  Map<String,Object> properties=new HashMap<>();  properties.put("instanceIndex",String.valueOf(getInstanceIndex()));  properties.put("instanceCount",String.valueOf(getInstanceCount()));  properties.put("defaultBinder",getDefaultBinder());  properties.put("dynamicDestinations",getDynamicDestinations());  for (  Map.Entry<String,BindingProperties> entry : this.bindings.entrySet()) {    properties.put(entry.getKey(),entry.getValue().toString());  }  for (  Map.Entry<String,BinderProperties> entry : this.binders.entrySet()) {    properties.put(entry.getKey(),entry.getValue());  }  return properties;}  }
class C{  protected void resetSpeed(){  IAttributeInstance maidAttribute;  if ((maidAttribute=owner.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED)).hasModifier(CHARGING_BOOST_MODIFIER)) {    maidAttribute.removeModifier(CHARGING_BOOST_UUID);  }}  }
class C{  public void readLine(final String line){  String[] tabs=line.split("\t");  String personId=tabs[0] + "-" + tabs[1];  double endTime;  if (this.tmpPersonId.equals(personId)) {    Plan pl=this.pop.getPersons().get(Id.create(personId,Person.class)).getSelectedPlan();    endTime=convertTime(tabs[3]);    double dur=endTime - this.tmpEndTime;    Leg leg=PopulationUtils.createAndAddLeg(((Plan)pl),(String)TransportMode.car);    leg.setDepartureTime(convertTime(this.tmpTabs[3]));    Coord tmpCoord=getRandomCoordInZone(tabs[9]);    if (tabs[7].equals("H")) {      tmpCoord=this.tmpHome;    }    final Coord coord=tmpCoord;    Activity act=PopulationUtils.createAndAddActivityFromCoord(((Plan)pl),(String)tabs[7],coord);    act.setEndTime(convertTime(tabs[3]));    act.setMaximumDuration(dur);  } else {    if (!this.pop.getPersons().isEmpty()) {      Person p=this.pop.getPersons().get(Id.create(this.tmpPersonId,Person.class));      Plan tmpPl=p.getSelectedPlan();      Leg leg=PopulationUtils.createAndAddLeg(((Plan)tmpPl),(String)TransportMode.car);      leg.setDepartureTime(convertTime(this.tmpTabs[3]));      Coord tmpCoord2=getRandomCoordInZone(tabs[12]);      if (this.tmpTabs[10].equals("H")) {        tmpCoord2=this.tmpHome;      }      final Coord coord=tmpCoord2;      Activity lastAct=PopulationUtils.createAndAddActivityFromCoord(((Plan)tmpPl),(String)this.tmpTabs[10],coord);      Plan nonCarPlan=PopulationUtils.createPlan(p);      PopulationUtils.copyFromTo(tmpPl,nonCarPlan);      for (      PlanElement pe : nonCarPlan.getPlanElements()) {        if (pe instanceof Leg) {          ((Leg)pe).setMode(TransportMode.pt);        }      }      p.addPlan(nonCarPlan);    }    Person p=PopulationUtils.getFactory().createPerson(Id.create(personId,Person.class));    Plan pl=PopulationUtils.createPlan(p);    endTime=convertTime(tabs[3]);    this.tmpHome=getRandomCoordInZone(tabs[9]);    final Coord coord=this.tmpHome;    Activity homeAct=PopulationUtils.createAndAddActivityFromCoord(pl,(String)tabs[7],coord);    homeAct.setEndTime(convertTime(tabs[3]));    p.addPlan(pl);    this.pop.addPerson(p);  }  this.tmpPersonId=personId;  this.tmpEndTime=endTime;  this.tmpTabs=tabs;}  }
class C{  private void fireWorkspaceCleared(){  for (  WorkspaceListener listener : listeners) {    listener.workspaceCleared();  }}  }
class C{  public LocalVariableAttribute(ConstPool cp,String name){  super(cp,name,new byte[2]);  ByteArray.write16bit(0,info,0);}  }
class C{  @DSComment("Only wrap key, not a potential data leak") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:56.266 -0500",hash_original_method="6E0DA752A02639D8B96D35F2A60D917D",hash_generated_method="6A8137C15B985EDA25A40EAE7F2F579A") public final byte[] wrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  if (mode != WRAP_MODE) {    throw new IllegalStateException();  }  return spiImpl.engineWrap(key);}  }
class C{  private void makeRegistrarView() throws Exception {  handleTableCreation("registrar data view",bigquery().query(REGISTRAR_DATA_SQL.put("SOURCE_DATASET",sourceDatasetId).build(),bigquery().buildDestinationTable("RegistrarData").description("Synthetic view of registrar information.").type(TableType.VIEW).build()));}  }
class C{  public void push(){  Deque<TaskContext> stack=contextStacks.get();  if (stack == null) {    stack=new LinkedList<>();    contextStacks.set(stack);    final Thread currentThread=Thread.currentThread();synchronized (contextStacksMap) {      contextStacksMap.put(currentThread,stack);    }  }  stack.addLast(this);}  }
class C{  private static LuaValue toLuaValue(Object value){  if (value instanceof String) {    return LuaValue.valueOf((String)value);  } else   if (value instanceof Integer) {    return LuaValue.valueOf((Integer)value);  } else   if (value instanceof Long) {    return LuaValue.valueOf((Long)value);  } else   if (value instanceof Double) {    return LuaValue.valueOf((Double)value);  } else   if (value instanceof Boolean) {    return LuaValue.valueOf((Boolean)value);  } else   if (value instanceof JSONObject) {    return toLuaTable((JSONObject)value);  } else   if (value instanceof JSONArray) {    return toLuaTable((JSONArray)value);  } else {    return LuaValue.NIL;  }}  }
class C{  @Override public void update(ClassifyTab owner,JMenuItem menuitem){  menuitem.setEnabled(owner.getTestData() != null);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public XmlProperty(String fileName) throws IOException {  this(new File(fileName));}  }
class C{  @Override public void onPageStarted(AmazonWebView view,String url,Bitmap favicon){  super.onPageStarted(view,url,favicon);  String newloc="";  if (url.startsWith("http:") || url.startsWith("https:") || url.startsWith("file:")) {    newloc=url;  } else   if (url.startsWith(AmazonWebView.SCHEME_TEL)) {    try {      Intent intent=new Intent(Intent.ACTION_DIAL);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error dialing " + url + ": "+ e.toString());    }  } else   if (url.startsWith("geo:") || url.startsWith(AmazonWebView.SCHEME_MAILTO) || url.startsWith("market:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      intent.setData(Uri.parse(url));      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error with " + url + ": "+ e.toString());    }  } else   if (url.startsWith("sms:")) {    try {      Intent intent=new Intent(Intent.ACTION_VIEW);      String address=null;      int parmIndex=url.indexOf('?');      if (parmIndex == -1) {        address=url.substring(4);      } else {        address=url.substring(4,parmIndex);        Uri uri=Uri.parse(url);        String query=uri.getQuery();        if (query != null) {          if (query.startsWith("body=")) {            intent.putExtra("sms_body",query.substring(5));          }        }      }      intent.setData(Uri.parse("sms:" + address));      intent.putExtra("address",address);      intent.setType("vnd.android-dir/mms-sms");      cordova.getActivity().startActivity(intent);    } catch (    android.content.ActivityNotFoundException e) {      LOG.e(LOG_TAG,"Error sending sms " + url + ":"+ e.toString());    }  } else {    newloc="http://" + url;  }  if (!newloc.equals(edittext.getText().toString())) {    edittext.setText(newloc);  }  try {    JSONObject obj=new JSONObject();    obj.put("type",LOAD_START_EVENT);    obj.put("url",newloc);    sendUpdate(obj,true);  } catch (  JSONException ex) {    Log.d(LOG_TAG,"Should never happen");  }}  }
class C{  protected DOMException createDOMException(){  Object[] p=new Object[]{new Integer(getCssValueType())};  String s=Messages.formatMessage("invalid.value.access",p);  return new DOMException(DOMException.INVALID_ACCESS_ERR,s);}  }
class C{  public static double[] loadMatrix(File file,String separator) throws IOException {  BufferedReader in=null;  try {    in=new BufferedReader(new FileReader(file));    String line;    List<String[]> lines=new ArrayList<>();    while ((line=in.readLine()) != null) {      lines.add(line.split(separator));      if (lines.get(lines.size() - 1).length != lines.get(0).length) {        throw new IOException("Invalid matrix!");      }    }    double[] result=new double[lines.size() * lines.get(0).length];    int k=0;    for (    String[] row : lines) {      for (int j=0; j < row.length; j++) {        result[k++]=Double.valueOf(row[j].trim());      }    }    return result;  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public boolean isNot(){  return not;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public DirtyRegion(int offset,int length,String type,String text){  fOffset=offset;  fLength=length;  fType=normalizeTypeValue(type);  fText=text;}  }
class C{  @Override protected AbstractMRMessage pollMessage(){  if (numNodes <= 0) {    return null;  }  XBeeMessage msg=null;  if (getNode(curSerialNodeIndex).getSensorsActive()) {    msg=XBeeMessage.getForceSampleMessage(((XBeeNode)getNode(curSerialNodeIndex)).getPreferedTransmitAddress());  }  curSerialNodeIndex=(curSerialNodeIndex + 1) % numNodes;  return msg;}  }
class C{  @Override public void scan(JCTree tree){  if (tree == null)   return;  found.add(tree);  super.scan(tree);}  }
class C{  public static void xml(String xml){  if (TextUtils.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e(e.getCause().getMessage() + "\n" + xml);  }}  }
class C{  public void testStorageNeeds() throws Exception {  System.err.println("-- RAM consumption");  for (  Class<? extends Lookup> cls : benchmarkClasses) {    Lookup lookup=buildLookup(cls,dictionaryInput);    long sizeInBytes=lookup.ramBytesUsed();    System.err.println(String.format(Locale.ROOT,"%-15s size[B]:%,13d",lookup.getClass().getSimpleName(),sizeInBytes));  }}  }
class C{  public void test_getParams() throws Exception {  DSAParams param=new DSAParameterSpec(Util.P,Util.Q,Util.G);  KeyPairGenerator gen=KeyPairGenerator.getInstance("DSA");  gen.initialize((DSAParameterSpec)param);  DSAKey key=null;  key=(DSAKey)gen.generateKeyPair().getPrivate();  assertDSAParamsEquals(param,key.getParams());  key=(DSAKey)gen.generateKeyPair().getPublic();  assertDSAParamsEquals(param,key.getParams());}  }
class C{  private void processJoinResponse(JoinResponseMessage rsp){synchronized (joinResponse) {    if (!this.isJoined) {      if (rsp.getRejectionMessage() != null || rsp.getCurrentView() != null) {        joinResponse[0]=rsp;        joinResponse.notifyAll();      } else {        services.getMessenger().setClusterSecretKey(rsp.getSecretPk());      }    }  }}  }
class C{  public MethodInfo findMethodHere(String name,ClassInfo[] paramTypes){  return findMethodHere(MethodInfo.makePrototype(name,null,paramTypes,0));}  }
class C{  public final int numValues(){  if (!isNominal() && !isString() && !isRelationValued()) {    return 0;  } else {    return ((NominalAttributeInfo)m_AttributeInfo).m_Values.size();  }}  }
class C{  public boolean isTrigger(){  return this.trigger;}  }
class C{  public SQLClientInfoException(String reason,String sqlState,int vendorCode,Map<String,ClientInfoStatus> failedProperties){  super(reason,sqlState,vendorCode);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public float norm1(){  float norm=0.0f;  for (int i=0; i < length; i++) {    norm+=Math.abs(get(i));  }  return norm;}  }
class C{  public String type(){  return type;}  }
class C{  public ReplicationDriver() throws SQLException {}  }
class C{  public static Result searchInAGroup(String organizationName){  String searchTypeValue=request().getQueryString("searchType");  String keyword=request().getQueryString("keyword");  PageParam pageParam=getPage();  if (StringUtils.isEmpty(organizationName) || StringUtils.isEmpty(keyword) || StringUtils.isEmpty(searchTypeValue)) {    return badRequest();  }  Organization organization=Organization.findByName(organizationName);  User user=UserApp.currentUser();  SearchType searchType=SearchType.getValue(searchTypeValue);  if (searchType == SearchType.NA || organization == null) {    return badRequest(ErrorViews.BadRequest.render());  }  SearchResult searchResult=getSearchResult(keyword,user,organization,searchType);switch (searchResult.getSearchType()) {case ISSUE:    searchResult.setIssues(Search.findIssues(keyword,user,organization,pageParam));  break;case USER:searchResult.setUsers(Search.findUsers(keyword,organization,pageParam));break;case PROJECT:searchResult.setProjects(Search.findProjects(keyword,user,organization,pageParam));break;case POST:searchResult.setPosts(Search.findPosts(keyword,user,organization,pageParam));break;case MILESTONE:searchResult.setMilestones(Search.findMilestones(keyword,user,organization,pageParam));break;case ISSUE_COMMENT:searchResult.setIssueComments(Search.findIssueComments(keyword,user,organization,pageParam));break;case POST_COMMENT:searchResult.setPostComments(Search.findPostComments(keyword,user,organization,pageParam));break;case REVIEW:searchResult.setReviews(Search.findReviews(keyword,user,organization,pageParam));break;}return ok(result.render("title.search",organization,null,searchResult));}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 != z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 != constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 != constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static S2CellId fromLatLng(S2LatLng ll){  return fromPoint(ll.toPoint());}  }
class C{  public static SocketAddressSupplier uri(String connectURI){  return new SocketAddressSupplier(new String[]{connectURI},"");}  }
class C{  public void addHttpRequestHeader(CharSequence name){  ensureNotStarted();  builder.addHttpRequestHeader(name);}  }
class C{  public byte[] toByteArray(){  byte[] p=new byte[48];  p[0]=(byte)(leapIndicator << 6 | version << 3 | mode);  p[1]=(byte)stratum;  p[2]=pollInterval;  p[3]=precision;  int l=(int)(rootDelay * 65536.0);  p[4]=(byte)((l >> 24) & 0xFF);  p[5]=(byte)((l >> 16) & 0xFF);  p[6]=(byte)((l >> 8) & 0xFF);  p[7]=(byte)(l & 0xFF);  long ul=(long)(rootDispersion * 65536.0);  p[8]=(byte)((ul >> 24) & 0xFF);  p[9]=(byte)((ul >> 16) & 0xFF);  p[10]=(byte)((ul >> 8) & 0xFF);  p[11]=(byte)(ul & 0xFF);  p[12]=referenceIdentifier[0];  p[13]=referenceIdentifier[1];  p[14]=referenceIdentifier[2];  p[15]=referenceIdentifier[3];  encodeTimestamp(p,16,referenceTimestamp);  encodeTimestamp(p,24,originateTimestamp);  encodeTimestamp(p,32,receiveTimestamp);  encodeTimestamp(p,40,transmitTimestamp);  return p;}  }
class C{  public static DynamicClassLoader create(ClassLoader parent,PathImpl classDir,PathImpl sourceDir,String args,String encoding){  DynamicClassLoader loader=new DynamicClassLoader(parent);  loader.addLoader(new CompilingLoader(loader,classDir,sourceDir,args,encoding));  loader.init();  return loader;}  }
class C{  public SiteEntry copySite(String title,String summary,String sourceHref) throws MalformedURLException, IOException, ServiceException {  SiteEntry entry=new SiteEntry();  entry.setTitle(new PlainTextConstruct(title));  entry.setSummary(new PlainTextConstruct(summary));  entry.addLink(SitesLink.Rel.SOURCE,Link.Type.ATOM,sourceHref);  return service.insert(new URL(getSiteFeedUrl()),entry);}  }
class C{  public MessageServiceException(String message,Throwable rootCause){  super(message);  _rootCause=rootCause;}  }
class C{  protected void resetUndoManager(){  undo.discardAllEdits();  undoAction.update();  redoAction.update();}  }
class C{  static public void addPropertyChangeListener(PropertyChangeListener l){  if (listenerList.getListenerCount(PropertyChangeListener.class) == 0) {    accessibilityListener.installListeners();  }  listenerList.add(PropertyChangeListener.class,l);}  }
class C{  public Object clone(){  RenderContext newRenderContext=new RenderContext(usr2dev,aoi,hints);  return newRenderContext;}  }
class C{  private void paintRestoreHover(Graphics2D g,JComponent c,int width,int height){  restorePainter.paintHover(g,c,width,height);}  }
class C{  private String findLinuxDistribution(){  final String[] commands={"/bin/sh","-c","cat /etc/*-release"};  String distribution=TfsTelemetryHelper.UNKNOWN;  String version=TfsTelemetryHelper.UNKNOWN;  BufferedReader bufferedReader=null;  try {    final Process process=Runtime.getRuntime().exec(commands);    bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));    String line;    while ((line=bufferedReader.readLine()) != null) {      if (line.startsWith(LINUX_DISTRIBUTION_NAME)) {        distribution=line.replaceFirst(LINUX_DISTRIBUTION_NAME,StringUtils.EMPTY).replace("\"",StringUtils.EMPTY);      }      if (line.startsWith(LINUX_DISTRIBUTION_VERSION)) {        version=line.replaceFirst(LINUX_DISTRIBUTION_VERSION,StringUtils.EMPTY).replace("\"",StringUtils.EMPTY);      }    }  } catch (  Exception e) {    logger.warn("Could not find Linux distribution due to error",e);  } finally {    if (bufferedReader != null) {      try {        bufferedReader.close();      } catch (      IOException e) {        logger.warn("Could not close buffered reader",e);      }    }    return MessageFormat.format("{0} - {1}",distribution,version);  }}  }
class C{  public static int EDEADLK(){  return Errno.EDEADLK.intValue();}  }
class C{  public Boolean isHidden(File f){  String name=f.getName();  if ((name != null) && !name.equals("") && (name.charAt(0) == '.')) {    return Boolean.TRUE;  } else {    return Boolean.FALSE;  }}  }
class C{  public MigrationClient(String bindAddressName,int serverPort){  this.port=serverPort;  try {    this.serverAddress=InetAddress.getByName(bindAddressName);  } catch (  IOException e) {    throw new IllegalArgumentException("Error - bind address cannot be resolved: '" + bindAddressName + "'");  }}  }
class C{  public static void info(String fileName){  info(fileName,new PrintWriter(System.out));}  }
class C{  private int addPattern(int[] pattern){  for (int i=0; i < patternCount; i++) {    if (unique && comparePatterns(patterns[i],pattern)) {      weights[i]+=1.0;      return i;    }  }  if (isInvariant(pattern)) {    invariantCount++;  }  int index=patternCount;  patterns[index]=pattern;  weights[index]=1.0;  patternCount++;  return index;}  }
class C{  public static final JIPVariable create(){  return create(null);}  }
class C{  public double[][] generateIntervalSpacedSamples(EvolutionState state,double min,double max,double interval,int threadnum){  return generateIntervalSpacedSamples(state,new double[]{min},new double[]{max},new double[]{interval},threadnum);}  }
class C{  public String printISO8601Date(){  CharBuffer cb=new CharBuffer();  if (_year > 0) {    cb.append((_year / 1000) % 10);    cb.append((_year / 100) % 10);    cb.append((_year / 10) % 10);    cb.append(_year % 10);    cb.append('-');    cb.append(((_month + 1) / 10) % 10);    cb.append((_month + 1) % 10);    cb.append('-');    cb.append(((_dayOfMonth + 1) / 10) % 10);    cb.append((_dayOfMonth + 1) % 10);  }  return cb.toString();}  }
class C{  public static double mapValueFromRangeToRange(double value,double fromLow,double fromHigh,double toLow,double toHigh){  double fromRangeSize=fromHigh - fromLow;  double toRangeSize=toHigh - toLow;  double valueScale=(value - fromLow) / fromRangeSize;  return toLow + (valueScale * toRangeSize);}  }
class C{  public Object remove(int index){  Object old=get(index);  content.remove(index);  modCount++;  return old;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.849 -0500",hash_original_method="C1B1C01C4973B5698673C5D09FA67185",hash_generated_method="9F44FA927E6B01FF6A7180A7E08E5E5B") public boolean isOutputShutdown(){  return isOutputShutdown;}  }
class C{  public String toString(){  return "HttpAware" + super.toString();}  }
class C{  public CActionOpenLogConsole(){  super("Log Window");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public XZMap(float loadFactor,int capacity){  if (loadFactor > 1.0) {    throw new IllegalArgumentException("You really dont want to be using a " + loadFactor + " load loadFactor with this hash table!");  }  this.loadFactor=loadFactor;  int tCapacity=1;  while (tCapacity < capacity) {    tCapacity<<=1;  }  this.buckets=new XZAddressable[tCapacity];  this.refreshFields();}  }
class C{  RError(String msg){  super(msg);  verboseStackTrace=RInternalError.createVerboseStackTrace();}  }
class C{  @Override public Result doComparisonTest(final Properties properties) throws Exception {  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));  final double abortRate=Double.parseDouble(properties.getProperty(TestOptions.ABORT_RATE));  final Result result=doConcurrentClientTest(journal,timeout,nclients,ntrials,keyLen,nops,abortRate);  return result;}  }
class C{  public boolean hasFocus(){  return mIsFocused;}  }
class C{  public Excerpt typeParameters(){  if (typeParameters.isEmpty()) {    return Excerpts.empty();  } else {    return Excerpts.add("<%s>",Excerpts.join(", ",typeParameters));  }}  }
class C{  protected void uploadTestDataFilesToS3(String s3KeyPrefix) throws Exception {  uploadTestDataFilesToS3(s3KeyPrefix,testManifestFiles);}  }
class C{  public void expandToInclude(final double x,final double y,final double z){  if (isNull()) {    expandToInclude(x,y);    minz=z;    maxz=z;  } else {    expandToInclude(x,y);    if (z < minz) {      minz=z;    }    if (z > maxz) {      maxz=z;    }  }}  }
class C{  private static void putGetBinary(IgniteCache<Integer,Organization> cache){  Organization org=new Organization("Microsoft",new Address("1096 Eddy Street, San Francisco, CA",94109),OrganizationType.PRIVATE,new Timestamp(System.currentTimeMillis()));  cache.put(1,org);  IgniteCache<Integer,BinaryObject> binaryCache=cache.withKeepBinary();  BinaryObject po=binaryCache.get(1);  String name=po.field("name");  System.out.println();  System.out.println(">>> Retrieved organization name from binary object: " + name);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildoldchildnonexistent.class,args);}  }
class C{  public Graph(boolean directed){  this(new Table(),directed);}  }
class C{  public static SnapshotId readSnapshotId(StreamInput in) throws IOException {  SnapshotId snapshot=new SnapshotId();  snapshot.readFrom(in);  return snapshot;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.921 -0500",hash_original_method="9B1CCC3AB82A9C7B7A46C788921405FB",hash_generated_method="9EFBA24431943EE0CA752566A6372B65") public boolean isEmpty(){  return getTaintBoolean();}  }
class C{  private void constructKeys(){  rowBytes=rowName.getBytes();  columnFamilyBytes=columnFamilyName.getBytes();}  }
class C{  protected void checkAssignability(AnnotatedTypeMirror varType,Tree varTree){  if (TreeUtils.isExpressionTree(varTree)) {    AnnotatedTypeMirror rcvType=atypeFactory.getReceiverType((ExpressionTree)varTree);    if (!isAssignable(varType,rcvType,varTree)) {      checker.report(Result.failure("assignability.invalid",InternalUtils.symbol(varTree),rcvType),varTree);    }  }}  }
class C{  private void dynInit(){  SmjReportLogic logic=new SmjReportLogic();  data=logic.getDataReport(m_AD_PInstance_ID,trxName);  generalTitle=logic.getGeneralTitle(reportId,trxName);  clientName=logic.getOrgName(trxName);  clientNIT=logic.getOrgNIT(trxName);  periodName=logic.getPeriodName(p_C_Period_ID,trxName);  currencyName=logic.getCurrency(trxName);  codeFont=logic.getCodeFont(trxName,p_AD_PrintFont_ID);  city=logic.getClientCity(trxName);  Properties prop=Env.getCtx();  MOrgInfo oi=MOrgInfo.get(prop,Env.getAD_Org_ID(prop),null);  logoId=oi.getLogo_ID();  if (logoId <= 0) {    MClientInfo ci=MClientInfo.get(prop);    logoId=ci.getLogoReport_ID();    if (logoId <= 0)     logoId=ci.getLogo_ID();  }  SmjPdfReport pdf=new SmjPdfReport();  baosPDF=pdf.generate(data,trxName,generalTitle,clientName,clientNIT,periodName,currencyName,m_columns,codeFont,city,logoId);  filePdf=pdf.tofile(baosPDF.toByteArray(),generalTitle);  revalidate();}  }
class C{  public static <T>LazyQueueX<T> fromStreamS(Stream<T> stream){  return new LazyQueueX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  public TriggerProcessStatusException(){}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public boolean removeWorkspace(Workspace workspace){  return super.removeElement(workspace);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected UserExample(UserExample example){  this.orderByClause=example.orderByClause;  this.oredCriteria=example.oredCriteria;}  }
class C{  ArgusHttpClient(String endpoint,int maxConn,int timeout,int reqTimeout) throws IOException {  URL url=new URL(endpoint);  PoolingHttpClientConnectionManager connMgr=new PoolingHttpClientConnectionManager();  connMgr.setMaxTotal(maxConn);  connMgr.setDefaultMaxPerRoute(maxConn);  RequestConfig defaultRequestConfig=RequestConfig.custom().setConnectionRequestTimeout(reqTimeout).setConnectTimeout(timeout).build();  _httpClient=HttpClients.custom().setConnectionManager(connMgr).setDefaultRequestConfig(defaultRequestConfig).build();  _httpContext=new BasicHttpContext();  _httpContext.setAttribute(HttpClientContext.COOKIE_STORE,new BasicCookieStore());  _endpoint=endpoint;}  }
class C{  public boolean booleanValue(){  return value;}  }
class C{  public Builder(){  this(TweetUi.getInstance());}  }
class C{  private void applyFreedSpace(long storeVersion){  while (true) {    ArrayList<Chunk> modified=New.arrayList();    Iterator<Entry<Long,HashMap<Integer,Chunk>>> it;    it=freedPageSpace.entrySet().iterator();    while (it.hasNext()) {      Entry<Long,HashMap<Integer,Chunk>> e=it.next();      long v=e.getKey();      if (v > storeVersion) {        continue;      }      HashMap<Integer,Chunk> freed=e.getValue();      for (      Chunk f : freed.values()) {        Chunk c=chunks.get(f.id);        if (c == null) {          continue;        }        c.maxLenLive+=f.maxLenLive;        c.pageCountLive+=f.pageCountLive;        if (c.pageCountLive < 0 && c.pageCountLive > -MARKED_FREE) {          c.pageCountLive=0;        }        if (c.maxLenLive < 0 && c.maxLenLive > -MARKED_FREE) {          c.maxLenLive=0;        }        modified.add(c);      }      it.remove();    }    for (    Chunk c : modified) {      meta.put(Chunk.getMetaKey(c.id),c.asString());    }    if (modified.size() == 0) {      break;    }  }}  }
class C{  private Utils(){}  }
class C{  public static final int compare(final ArrowBuf left,int lStart,int lEnd,final byte[] right,int rStart,final int rEnd){  if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {    left.checkBytes(lStart,lEnd);  }  return memcmp(left.memoryAddress(),lStart,lEnd,right,rStart,rEnd);}  }
class C{  public boolean isRemoteLdapActive(){  return remoteLdapActive;}  }
class C{  public void addEmojiconGroup(List<EaseEmojiconGroupEntity> groupEntitieList){  for (int i=0; i < groupEntitieList.size(); i++) {    EaseEmojiconGroupEntity groupEntity=groupEntitieList.get(i);    emojiconGroupList.add(groupEntity);    pagerView.addEmojiconGroup(groupEntity,i == groupEntitieList.size() - 1 ? true : false);    tabBar.addTab(groupEntity.getIcon());  }}  }
class C{  public InstructionGraphEdge(final InstructionGraphNode source,final InstructionGraphNode target,final EdgeType edgeType){  super(source,target);  if (edgeType == null) {    throw new IllegalArgumentException("Error: Edge type argument can not be null");  }  this.edgeType=edgeType;}  }
class C{  public JFXRippler(Node control){  this(control,RipplerMask.RECT,RipplerPos.FRONT);}  }
class C{  @Override public Settings overrideSettings(final Settings settings){  final Settings.AuthenticationSettings authSettings=new Settings.AuthenticationSettings();  authSettings.className=SimpleAuthenticator.class.getName();  final Map<String,Object> authConfig=new HashMap<>();  authConfig.put(SimpleAuthenticator.CONFIG_CREDENTIALS_DB,"conf/tinkergraph-empty.properties");  authConfig.put(SimpleAuthenticator.CONFIG_CREDENTIALS_LOCATION,"data/credentials.kryo");  authSettings.config=authConfig;  settings.authentication=authSettings;  final String nameOfTest=name.getMethodName();switch (nameOfTest) {case "shouldAuthenticateOverSslWithPlainText":case "shouldFailIfSslEnabledOnServerButNotClient":    final Settings.SslSettings sslConfig=new Settings.SslSettings();  sslConfig.enabled=true;settings.ssl=sslConfig;break;}return settings;}  }
class C{  public FloatPoint(String name,float... point){  super(name,pack(point),getType(point.length));}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public boolean partial(){  return partial;}  }
class C{  protected TransformationDictionary(Element dictionary,Instances dataDictionary) throws Exception {  NodeList derivedL=dictionary.getChildNodes();  for (int i=0; i < derivedL.getLength(); i++) {    Node child=derivedL.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      String tagName=((Element)child).getTagName();      if (tagName.equals("DerivedField")) {        DerivedFieldMetaInfo df=new DerivedFieldMetaInfo((Element)child,null,null);        m_derivedFields.add(df);      } else       if (tagName.equals("DefineFunction")) {        DefineFunction defF=new DefineFunction((Element)child,null);        m_defineFunctions.add(defF);      }    }  }}  }
class C{  public int available() throws IOException {  if (eof || closed) {    return 0;  }  int n=in.available();  return n > remaining ? remaining : n;}  }
class C{  public static EnumSet<EmbeddingFlags> asSet(int value){  EnumSet<EmbeddingFlags> set=EnumSet.noneOf(EmbeddingFlags.class);  for (  EmbeddingFlags flag : EmbeddingFlags.values()) {    if ((value & flag.mask()) == flag.mask()) {      set.add(flag);    }  }  return set;}  }
class C{  public CopySourceEdit(int offset,int length,CopyTargetEdit target){  this(offset,length);  setTargetEdit(target);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void add(Term term){  add(term.field(),term.bytes());}  }
class C{  static void usage(){  PrintStream p=System.err;  p.println("\nUsage: java -jar serialbench.jar [-options]");  p.println("\nwhere options are:");  p.println("  -h              print this message");  p.println("  -v              verbose mode");  p.println("  -l              list configuration file");  p.println("  -t <num hours>  repeat benchmarks for specified number of hours");  p.println("  -o <file>       specify output file");  p.println("  -c <file>       specify (non-default) configuration file");  p.println("  -html           format output as html (default is text)");  p.println("  -xml            format output as xml");}  }
class C{  @Override public boolean equals(final Object obj){  return ((obj != null) && obj.getClass().equals(getClass()));}  }
class C{  public Challenge dnsChallenge(Authorization auth,String domain) throws AcmeException {  Dns01Challenge challenge=auth.findChallenge(Dns01Challenge.TYPE);  if (challenge == null) {    LOG.error("Found no " + Dns01Challenge.TYPE + " challenge, don't know what to do...");    return null;  }  LOG.info("Please create a TXT record:");  LOG.info("_acme-challenge." + domain + ". IN TXT "+ challenge.getDigest());  LOG.info("If you're ready, dismiss the dialog...");  StringBuilder message=new StringBuilder();  message.append("Please create a TXT record:\n\n");  message.append("_acme-challenge." + domain + ". IN TXT "+ challenge.getDigest());  int option=JOptionPane.showConfirmDialog(null,message.toString(),"Prepare Challenge",JOptionPane.OK_CANCEL_OPTION);  if (option == JOptionPane.CANCEL_OPTION) {    LOG.error("User cancelled challenge");    return null;  }  return challenge;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("Dimension2D[w=").append(width).append(",h=").append(height).append("]");  return sb.toString();}  }
class C{  private static void nextToken(XmlCursor xml){  do {    xml.toNextToken();    if (!xml.isText()) {      break;    } else     if (xml.getChars().trim().length() > 0) {      break;    }  } while (true);}  }
class C{  public static QName valueOf(CharSequence namespaceURI,CharSequence localName){  if (namespaceURI == null)   return QName.valueOf(localName);  TextBuilder tmp=new TextBuilder();  tmp.append('{');  tmp.append(namespaceURI);  tmp.append('}');  tmp.append(localName);  return QName.valueOf(tmp);}  }
class C{  public Graph search(){  return search(independenceTest.getVariables());}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  public Patch(int bank,int program){  this.bank=bank;  this.program=program;}  }
class C{  private void updateRecordingState(long trackId,boolean paused){  recordingTrackId=trackId;  PreferencesUtils.setLong(this,R.string.recording_track_id_key,trackId);  recordingTrackPaused=paused;  PreferencesUtils.setBoolean(this,R.string.recording_track_paused_key,recordingTrackPaused);}  }
class C{  public static byte[] decode(String data){  int len=data.length() / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void loadOrtho(float l,float r,float b,float t,float n,float f){  loadIdentity();  mMat[0]=2 / (r - l);  mMat[5]=2 / (t - b);  mMat[10]=-2 / (f - n);  mMat[12]=-(r + l) / (r - l);  mMat[13]=-(t + b) / (t - b);  mMat[14]=-(f + n) / (f - n);}  }
class C{  @Override public CategoryItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,CategoryPlot plot,int rendererIndex,PlotRenderingInfo info){  CategoryItemRendererState state=super.initialise(g2,dataArea,plot,rendererIndex,info);  calculateItemWidth(plot,dataArea,rendererIndex,state);  return state;}  }
class C{  public JavaVersion() throws VersionException {  this(System.getProperty("java.version"));}  }
class C{  public void crashAlert(Stage stage,String crashMessage){  messageLabel.setText("Unfortunately, we screwed up and the app crashed. Sorry about that!");  detailsLabel.setText(crashMessage);  cancelButton.setVisible(false);  actionButton.setVisible(false);  okButton.setOnAction(null);}  }
class C{  public static String fixedWidthDoubletoString(double x,int w,int d){  java.text.DecimalFormat fmt=new java.text.DecimalFormat();  fmt.setMaximumFractionDigits(d);  fmt.setMinimumFractionDigits(d);  fmt.setGroupingUsed(false);  String s=fmt.format(x);  while (s.length() < w) {    s=" " + s;  }  return s;}  }
class C{  private static Map<Integer,ArrayList<IComment>> loadGlobalEdgeComments(final SQLProvider provider,final int viewId) throws CouldntLoadDataException {  final String query="SELECT e.id, gc.comment_id FROM " + CTableNames.GLOBAL_EDGE_COMMENTS_TABLE + " AS gc "+ " join "+ CTableNames.INSTRUCTIONS_TABLE+ " AS src_inst on gc.src_address = src_inst.address "+ "AND gc.src_module_id = src_inst.module_id "+ " join "+ CTableNames.INSTRUCTIONS_TABLE+ " AS dst_inst on gc.dst_address = dst_inst.address "+ "AND gc.dst_module_id = dst_inst.module_id "+ " join "+ CTableNames.CODENODE_INSTRUCTIONS_TABLE+ " AS src_nodes on src_nodes.address = gc.src_address AND src_nodes.position = 0 "+ "AND src_nodes.module_id = gc.src_module_id "+ " join "+ CTableNames.CODENODE_INSTRUCTIONS_TABLE+ " AS dst_nodes on dst_nodes.address = gc.dst_address AND dst_nodes.position = 0 "+ "AND dst_nodes.module_id = gc.dst_module_id "+ " join "+ CTableNames.EDGES_TABLE+ " AS e ON e.source_node_id = src_nodes.node_id AND e.target_node_id = dst_nodes.node_id "+ " join "+ CTableNames.NODES_TABLE+ " AS src_n ON e.source_node_id = src_n.id "+ " join "+ CTableNames.NODES_TABLE+ " AS dst_n ON e.target_node_id = dst_n.id "+ " WHERE src_n.view_id = "+ viewId+ " AND dst_n.view_id = "+ viewId;  final HashMap<Integer,Integer> commentIdsToEdgeIds=new HashMap<Integer,Integer>();  final HashMap<Integer,ArrayList<IComment>> edgeIdsToCommentArray=new HashMap<Integer,ArrayList<IComment>>();  try {    final ResultSet resultSet=provider.getConnection().executeQuery(query,true);    try {      while (resultSet.next()) {        final int edgeId=resultSet.getInt("id");        final int commentId=resultSet.getInt("comment_id");        commentIdsToEdgeIds.put(commentId,edgeId);      }    }  finally {      resultSet.close();    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  if (!commentIdsToEdgeIds.isEmpty()) {    final HashMap<Integer,ArrayList<IComment>> commentIdsToComments=PostgreSQLCommentFunctions.loadMultipleCommentsById(provider,commentIdsToEdgeIds.keySet());    for (    final Entry<Integer,ArrayList<IComment>> commentIdToComment : commentIdsToComments.entrySet()) {      edgeIdsToCommentArray.put(commentIdsToEdgeIds.get(commentIdToComment.getKey()),commentIdToComment.getValue());    }  }  return edgeIdsToCommentArray;}  }
class C{  protected void updateCapabilitiesFilter(Capabilities filter){  Instances tempInst;  Capabilities filterClass;  if (filter == null) {    m_ClustererEditor.setCapabilitiesFilter(new Capabilities(null));    return;  }  if (!ExplorerDefaults.getInitGenericObjectEditorFilter()) {    tempInst=new Instances(m_Instances,0);  } else {    tempInst=new Instances(m_Instances);  }  tempInst.setClassIndex(-1);  if (!m_ignoreKeyList.isSelectionEmpty()) {    tempInst=removeIgnoreCols(tempInst);  }  if (m_ClassesToClustersBut.isSelected()) {    String classSelection=m_ClassCombo.getSelectedItem().toString();    classSelection=classSelection.substring(classSelection.indexOf(")") + 1).trim();    int classIndex=tempInst.attribute(classSelection).index();    Remove rm=new Remove();    rm.setAttributeIndices("" + (classIndex + 1));    try {      rm.setInputFormat(tempInst);      tempInst=Filter.useFilter(tempInst,rm);    } catch (    Exception e) {      e.printStackTrace();    }  }  try {    filterClass=Capabilities.forInstances(tempInst);  } catch (  Exception e) {    filterClass=new Capabilities(null);  }  m_ClustererEditor.setCapabilitiesFilter(filterClass);  m_StartBut.setEnabled(true);  Capabilities currentFilter=m_ClustererEditor.getCapabilitiesFilter();  Clusterer clusterer=(Clusterer)m_ClustererEditor.getValue();  Capabilities currentSchemeCapabilities=null;  if (clusterer != null && currentFilter != null && (clusterer instanceof CapabilitiesHandler)) {    currentSchemeCapabilities=((CapabilitiesHandler)clusterer).getCapabilities();    if (!currentSchemeCapabilities.supportsMaybe(currentFilter) && !currentSchemeCapabilities.supports(currentFilter)) {      m_StartBut.setEnabled(false);    }  }}  }
class C{  public boolean isDirty(){  return dirty;}  }
class C{  public ContinuousQuery(){  setPageSize(DFLT_PAGE_SIZE);}  }
class C{  public final void append(FastStringBuffer value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    int sourcechunk=(copyfrom + value.m_chunkSize - 1) >>> value.m_chunkBits;    int sourcecolumn=copyfrom & value.m_chunkMask;    int runlength=value.m_chunkSize - sourcecolumn;    if (runlength > available)     runlength=available;    System.arraycopy(value.m_array[sourcechunk],sourcecolumn,m_array[m_lastChunk],m_firstFree,runlength);    if (runlength != available)     System.arraycopy(value.m_array[sourcechunk + 1],0,m_array[m_lastChunk],m_firstFree + runlength,available - runlength);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  @Override public void doRender(Entity par1Entity,double par2,double par4,double par6,float par8,float par9){  this.doRenderGravityBlock((EntityFlyingBlock)par1Entity,par2,par4,par6,par8,par9);}  }
class C{  public void moveToTop(String pingerToken){  Pinger pinger=getPingerByToken(pingerToken);  if (pinger != null) {    moveToTop(pinger);  }}  }
class C{  @Override public KnownShield remove(int location){  throw new UnsupportedOperationException();}  }
class C{  public float innerProduct(FeatureVector other){  float cost=0.0f;  for (int i=0; i < DENSE_FEATURE_NAMES.size(); i++)   cost+=getDense(i) * other.getDense(i);  for (  String key : sparseFeatures.keySet())   cost+=sparseFeatures.get(key) * other.getSparse(key);  return cost;}  }
class C{  private String limitQuery(String query,int offset,int choice){  String limitedQuery;  StringBuffer order=new StringBuffer();  String orderByString="";  if (m_orderBy.size() != 0) {    order.append(" ORDER BY ");    for (int i=0; i < m_orderBy.size() - 1; i++) {      if (m_DataBaseConnection.getUpperCase()) {        order.append(m_orderBy.get(i).toUpperCase());      } else {        order.append(m_orderBy.get(i));      }      order.append(", ");    }    if (m_DataBaseConnection.getUpperCase()) {      order.append(m_orderBy.get(m_orderBy.size() - 1).toUpperCase());    } else {      order.append(m_orderBy.get(m_orderBy.size() - 1));    }    orderByString=order.toString();  }  if (choice == 0) {    limitedQuery=query.replaceFirst("SELECT","SELECT LIMIT " + offset + " 1");    limitedQuery=limitedQuery.concat(orderByString);    return limitedQuery;  }  if (choice == 1) {    limitedQuery=query.concat(orderByString + " LIMIT 1 OFFSET " + offset);    return limitedQuery;  }  limitedQuery=query.concat(orderByString + " LIMIT " + offset+ ", 1");  return limitedQuery;}  }
class C{  protected int nextInPI() throws IOException, XMLException {  if (piEndRead) {    piEndRead=false;    context=(depth == 0) ? TOP_LEVEL_CONTEXT : CONTENT_CONTEXT;    return LexicalUnits.PI_END;  }switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '?':if (nextChar() != '>') {  throw createXMLException("pi.end.expected");}nextChar();if (inDTD) {context=DTD_DECLARATIONS_CONTEXT;} else if (depth == 0) {context=TOP_LEVEL_CONTEXT;} else {context=CONTENT_CONTEXT;}return LexicalUnits.PI_END;default :do {do {nextChar();} while (current != -1 && current != '?');nextChar();} while (current != -1 && current != '>');nextChar();piEndRead=true;return LexicalUnits.PI_DATA;}}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public static String generateUserAgentString(Context ctx){  String packageName=null;  int packageVersion=0;  try {    packageName=ctx.getPackageName();    packageVersion=ctx.getPackageManager().getPackageInfo(packageName,0).versionCode;  } catch (  PackageManager.NameNotFoundException e) {    CAT.e(e.getMessage());  }  String userAgent=packageName + " Android/" + packageVersion;  Locale locale=java.util.Locale.getDefault();  if (locale == null) {    userAgent+=" (" + Locale.US + ");";  } else {    userAgent+=" (" + locale.toString() + "); ";  }  userAgent+="Android/" + Build.VERSION.RELEASE + "; ";  userAgent+=Build.MODEL + "/" + Build.VERSION.SDK_INT+ ";";  return userAgent;}  }
class C{  private static void exampleCacheEnableMBeans(TCacheFactory factory){  Builder<Integer,String> builder=factory.builder();  builder.setId("exampleCacheEnableMBeans").setExpectedMapSize(10);  Cache<Integer,String> cache=builder.build();  cache.enableManagement(true);  cache.enableStatistics(true);  putElements(cache,10);}  }
class C{  public static Map<String,Object> prodFindDistinctVariants(DispatchContext dctx,Map<String,? extends Object> context){  return ServiceUtil.returnFailure();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredTypeAccessModifier: ");  result.append(declaredTypeAccessModifier);  result.append(", declaredProvidedByRuntime: ");  result.append(declaredProvidedByRuntime);  result.append(", declaredFinal: ");  result.append(declaredFinal);  result.append(')');  return result.toString();}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  public CharSet plus(CharSet that){  if (that._mapping.length > this._mapping.length)   return that.plus(this);  CharSet result=this.copy();  for (int i=that._mapping.length; --i >= 0; ) {    result._mapping[i]|=that._mapping[i];  }  return result;}  }
class C{  @DSComment("OpenGL Math") @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.026 -0500",hash_original_method="16F064CAB0DDFBE8E594C269928942D4",hash_generated_method="1CF4E43AAA489B4CF0D3BF2F7D9D5FD5") public static void scaleM(float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[mi]*=x;    m[4 + mi]*=y;    m[8 + mi]*=z;  }}  }
class C{  public final void addPoisonedTransactionListeners(){  MyTestTransactionListener listener=new MyTestTransactionListener();  getCache().getCacheTransactionManager().addListener(listener);  getCache().getCacheTransactionManager().setWriter(listener);}  }
class C{  @Deprecated public void sendJavascript(String statement){  this.bridge.getMessageQueue().addJavaScript(statement);}  }
class C{  public WorkerThread(final String name,final Object complete){  super(name);  setDaemon(true);  mCompleteNotify=complete;}  }
class C{  protected void markDirty(int x,int y,int width,int height){  Rectangle rect=new Rectangle(x,y,width,height);  if (this.dirtyRect == null)   this.dirtyRect=rect; else   this.dirtyRect.add(rect);}  }
class C{  public static boolean isInitialized(Context ctx){  vitamioPackage=ctx.getPackageName();  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + "lib/";  return true;}  }
class C{  @Override protected void paintFigure(Graphics graphics){  if (selected) {    graphics.pushState();    graphics.setBackgroundColor(ColorConstants.menuBackgroundSelected);    graphics.fillRectangle(getSelectionRectangle());    graphics.popState();    graphics.setForegroundColor(ColorConstants.white);  }  super.paintFigure(graphics);}  }
class C{  public Legal checkEdgeLegality(final Direction direction,final String label){  if (null == this.edgeFilter)   return Legal.YES;  if (this.checkEdgeLegality(direction).negative())   return Legal.NO;  final Map<String,Legal> legalMap=this.edgeLegality.get(direction);  if (legalMap.containsKey(label))   return legalMap.get(label); else   if (legalMap.containsKey(null))   return legalMap.get(null); else   return Legal.NO;}  }
class C{  public static ItemBuilder start(final ItemStack itemStack){  return new ItemBuilder(itemStack);}  }
class C{  public void putNextEntry(ZipEntry ze) throws IOException {  closeEntry();  entry=ze;  entries.addElement(entry);  if (entry.getMethod() == -1) {    entry.setMethod(method);  }  if (entry.getTime() == -1) {    entry.setTime(System.currentTimeMillis());  }  if (entry.getMethod() == STORED && raf == null) {    if (entry.getSize() == -1) {      throw new RuntimeException("uncompressed size is required for" + " STORED method when not writing to a" + " file");    }    if (entry.getCrc() == -1) {      throw new RuntimeException("crc checksum is required for STORED" + " method when not writing to a file");    }    entry.setComprSize(entry.getSize());  }  if (entry.getMethod() == DEFLATED && hasCompressionLevelChanged) {    def.setLevel(level);    hasCompressionLevelChanged=false;  }  writeLocalFileHeader(entry);}  }
class C{  public boolean supportsBLOB(){  return true;}  }
class C{  private void fireOrPhysicalCheck(PhysicalOption best_po,Entity entity,ArrayList<ArrayList<AttackOption>> attackOptions,double la_dmg,double ra_dmg){  ArrayList<AttackOption> c;  if ((best_po != null) && (entity instanceof Mech)) {    if (best_po.type == PhysicalOption.PUNCH_LEFT) {      if ((la_dmg < best_po.expectedDmg) && (attackOptions.size() > 0)) {        for (int i=0; i < attackOptions.size(); i++) {          c=attackOptions.get(i);          for (int j=0; j < c.size(); j++) {            if (c.get(j).weapon.getLocation() == Mech.LOC_LARM) {              c.get(j).expected=0;              c.get(j).primary_expected=0;            }          }        }      }    }    if (best_po.type == PhysicalOption.PUNCH_RIGHT) {      if ((ra_dmg < best_po.expectedDmg) && (attackOptions.size() > 0)) {        for (int i=0; i < attackOptions.size(); i++) {          c=attackOptions.get(i);          for (int j=0; j < c.size(); j++) {            if (c.get(j).weapon.getLocation() == Mech.LOC_RARM) {              c.get(j).expected=0;              c.get(j).primary_expected=0;            }          }        }      }    }    if (best_po.type == PhysicalOption.PUNCH_BOTH) {      if (((la_dmg + ra_dmg) < best_po.expectedDmg) && (attackOptions.size() > 0)) {        for (int i=0; i < attackOptions.size(); i++) {          c=attackOptions.get(i);          for (int j=0; j < c.size(); j++) {            if (c.get(j).weapon.getLocation() == Mech.LOC_LARM) {              c.get(j).expected=0;              c.get(j).primary_expected=0;            }            if (c.get(j).weapon.getLocation() == Mech.LOC_RARM) {              c.get(j).expected=0;              c.get(j).primary_expected=0;            }          }        }      }    }  }}  }
class C{  public SecurityClientHeader createSecurityClientHeader(){  SecurityClient secClient=new SecurityClient();  return secClient;}  }
class C{  public void testArrayListToJsonArrayConversion(){  try {    JSONArray array=StoreRetrieveData.toJSONArray(mTestData);    assertEquals(mTestData.size(),array.length());  } catch (  Exception e) {    fail("Exception thrown when converting to JSONArray: " + e.getMessage());  }}  }
class C{  public String faultName(Object fault){  FaultDescriptor fd=getFaultDescriptor(fault);  if (fd != null) {    return fd.getName(fault);  }  return fault.getClass().getSimpleName();}  }
class C{  public static boolean isDebugMode(Context c){  SharedPreferences pref=c.getSharedPreferences(APP_PREF_NAME,Context.MODE_PRIVATE);  return pref.getBoolean("debug",c.getString(R.string.debug).equals("true"));}  }
class C{  public static void writeStatistics(Map<String,DescriptiveStatistics> statsMap,String filename) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(filename));  writer.write("property");  writer.write(TAB);  writer.write("mean");  writer.write(TAB);  writer.write("median");  writer.write(TAB);  writer.write("min");  writer.write(TAB);  writer.write("max");  writer.write(TAB);  writer.write("n");  writer.newLine();  writer.newLine();  SortedMap<String,DescriptiveStatistics> sortedMap=new TreeMap<>(statsMap);  for (  Entry<String,DescriptiveStatistics> entry : sortedMap.entrySet()) {    writer.write(entry.getKey());    writer.write("\t");    writer.write(String.valueOf(entry.getValue().getMean()));    writer.write("\t");    writer.write(String.valueOf(entry.getValue().getPercentile(50)));    writer.write("\t");    writer.write(String.valueOf(entry.getValue().getMin()));    writer.write("\t");    writer.write(String.valueOf(entry.getValue().getMax()));    writer.write("\t");    writer.write(String.valueOf(entry.getValue().getN()));    writer.write("\t");    writer.write(String.valueOf(entry.getValue().getVariance()));    writer.newLine();  }  writer.close();}  }
class C{  public int scaledCeil(float length){  return MathUtil.iceil(scaled(length));}  }
class C{  public RequestHandle patch(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPatch(getURI(url)),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public void updateStatusDots(int pinLength){  addDots(pinLength);}  }
class C{  private void updateSortTempFileLocation(){  String carbonDataDirectoryPath=CarbonDataProcessorUtil.getLocalDataFolderLocation(schemaName,tableName,taskNo,partitionID,segmentId,false);  this.tempFileLocation=carbonDataDirectoryPath + File.separator + CarbonCommonConstants.SORT_TEMP_FILE_LOCATION;  LOGGER.info("temp file location" + this.tempFileLocation);}  }
class C{  public void addAction(String action){  Object[] args=new String[1];  SimpleDateFormat sdf=new SimpleDateFormat(context.getString(R.string.dateFormat));  args[0]=sdf.format(new Date());  String timestamp=context.getString(R.string.timestamp,args);  history.add(action + timestamp);  notifyListeners(new PropertyChangeEvent(this,ActivityConstants.historyProperty,null,null));}  }
class C{  private String content(Map<String,String> params) throws IOException {  SB sb=new SB(TEST_URL);  for (  Map.Entry<String,String> e : params.entrySet())   sb.a(e.getKey()).a('=').a(e.getValue()).a('&');  String qry=sb.toString();  try {    URL url=new URL(qry);    URLConnection conn=url.openConnection();    conn.setRequestProperty("Accept-Charset",CHARSET);    InputStream in=conn.getInputStream();    StringBuilder buf=new StringBuilder(256);    try (LineNumberReader rdr=new LineNumberReader(new InputStreamReader(in,"UTF-8"))){      for (String line=rdr.readLine(); line != null; line=rdr.readLine())       buf.append(line);    }     return buf.toString();  } catch (  IOException e) {    error("Failed to send HTTP request: " + TEST_URL + "?"+ qry,e);    throw e;  }}  }
class C{  public void newLine() throws IOException {  super.newLine();  beginningOfLine=true;}  }
class C{  public KeyValueListParser(String pairDelimiterRegex,String keyValDelimiterRegex){  pairDelimiter=Pattern.compile(pairDelimiterRegex);  keyValDelimiter=Pattern.compile(keyValDelimiterRegex);}  }
class C{  public BroadcastJobListener(String name,List<JobListener> listeners){  this(name);  this.listeners.addAll(listeners);}  }
class C{  public void sendToServer(IMessage message){  netHandler.sendToServer(message);}  }
class C{  public synchronized Profile updateProfile(Profile profile) throws BusinessException, JAXBException, IOException {  if (profile.isCommonProfile()) {    throw new BusinessException("Update the profile '" + profile.getName() + ".",ConfigurationInterfaceErrorCodeEnum.COMMON_PROFILE_CAN_NOT_BE_ALTERED);  }  return updateProfileInternal(profile);}  }
class C{  public void testSetObject() throws Exception {  Properties props=new Properties();  props.put("noDatetimeStringSync","true");  Connection conn1=getConnectionWithProps(props);  Statement stmt1=conn1.createStatement();  createTable("t1"," (c1 DECIMAL," + "c2 VARCHAR(255)," + "c3 BLOB,"+ "c4 DATE,"+ "c5 TIMESTAMP,"+ "c6 TIME,"+ "c7 TIME)");  this.pstmt=conn1.prepareStatement("INSERT INTO t1 VALUES (?, ?, ?, ?, ?, ?, ?)");  long currentTime=System.currentTimeMillis();  this.pstmt.setObject(1,"1000",Types.DECIMAL);  this.pstmt.setObject(2,"2000",Types.VARCHAR);  this.pstmt.setObject(3,new byte[]{0},Types.BLOB);  this.pstmt.setObject(4,new java.util.Date(currentTime),Types.DATE);  this.pstmt.setObject(5,"2000-01-01 23-59-59",Types.TIMESTAMP);  this.pstmt.setObject(6,"11:22:33",Types.TIME);  this.pstmt.setObject(7,new java.sql.Timestamp(currentTime),Types.TIME);  this.pstmt.execute();  this.rs=stmt1.executeQuery("SELECT * FROM t1");  this.rs.next();  assertEquals("1000",this.rs.getString(1));  assertEquals("2000",this.rs.getString(2));  assertEquals(1,((byte[])this.rs.getObject(3)).length);  assertEquals(0,((byte[])this.rs.getObject(3))[0]);  assertEquals(new java.sql.Date(currentTime).toString(),this.rs.getDate(4).toString());  if (versionMeetsMinimum(4,1)) {    assertEquals("2000-01-01 23:59:59",this.rs.getString(5));  } else {    assertEquals("20000101235959",this.rs.getString(5));  }  assertEquals("11:22:33",this.rs.getString(6));  assertEquals(new java.sql.Time(currentTime).toString(),this.rs.getString(7));}  }
class C{  @Override public int compareTo(AnthURL o){  if (o.prediction == prediction) {    return 0;  } else   if (o.prediction > prediction) {    return 1;  } else {    return -1;  }}  }
class C{  protected Diff processRevision(final Revision revision) throws UnsupportedEncodingException {  Diff diff=super.processRevision(revision);  if (diff == null) {    this.ignoredRevisionsCounter++;  } else {    this.revisionCounter++;    this.diffPartCounter+=diff.size();  }  return diff;}  }
class C{  @SuppressWarnings({"unchecked"}) public boolean forEach(TObjectProcedure<? super T> procedure){  Object[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (set[i] != FREE && set[i] != REMOVED && !procedure.execute((T)set[i])) {      return false;    }  }  return true;}  }
class C{  public void actionPerformed(ActionEvent e){  if (!enabled)   return;  if (e.getActionCommand().equals("ContextSwitch")) {    Dim.ContextData contextData=debugGui.dim.currentContextData();    if (contextData == null) {      return;    }    int frameIndex=context.getSelectedIndex();    context.setToolTipText(toolTips.get(frameIndex));    int frameCount=contextData.frameCount();    if (frameIndex >= frameCount) {      return;    }    Dim.StackFrame frame=contextData.getFrame(frameIndex);    Object scope=frame.scope();    Object thisObj=frame.thisObj();    thisTable.resetTree(new VariableModel(debugGui.dim,thisObj));    VariableModel scopeModel;    if (scope != thisObj) {      scopeModel=new VariableModel(debugGui.dim,scope);    } else {      scopeModel=new VariableModel();    }    localsTable.resetTree(scopeModel);    debugGui.dim.contextSwitch(frameIndex);    debugGui.showStopLine(frame);    tableModel.updateModel();  }}  }
class C{  void peekInt(GPR reg,int idx){  asm.emitLInt(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_INT + (idx << LOG_BYTES_IN_STACKSLOT),FP);}  }
class C{  public boolean countDown(){  assert originalCount > 0;  for (; ; ) {    final int current=countDown.get();    assert current >= 0;    if (current == 0) {      return false;    }    if (countDown.compareAndSet(current,current - 1)) {      return current == 1;    }  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected void paint(SynthContext context,Graphics g){  JToolTip tip=(JToolTip)context.getComponent();  Insets insets=tip.getInsets();  View v=(View)tip.getClientProperty(BasicHTML.propertyKey);  if (v != null) {    Rectangle paintTextR=new Rectangle(insets.left,insets.top,tip.getWidth() - (insets.left + insets.right),tip.getHeight() - (insets.top + insets.bottom));    v.paint(g,paintTextR);  } else {    g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));    g.setFont(style.getFont(context));    context.getStyle().getGraphicsUtils(context).paintText(context,g,tip.getTipText(),insets.left,insets.top,-1);  }}  }
class C{  public boolean isSetCursorId(){  return EncodingUtils.testBit(__isset_bitfield,__CURSORID_ISSET_ID);}  }
class C{  public boolean hasPrevious(){  try {    if (resultSet.isFirst() || resultSet.isBeforeFirst()) {      return false;    } else {      if (!haveMadeValue && !resultSet.isAfterLast() && !resultSet.isLast()) {        return false;      } else {        return true;      }    }  } catch (  SQLException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException("Error while checking to see if this is the first result",e);  }}  }
class C{  public static void escapeHtml(Writer writer,String string) throws IOException {  if (writer == null) {    throw new IllegalArgumentException("The Writer must not be null.");  }  if (string == null) {    return;  }  EntitiesUtils.HTML40.escape(writer,string);}  }
class C{  public void localToWorldCoordinate(Vector3 coord){  coord.multiplyLocal(1.0 / pixelScale);  coord.setZ(coord.getZ() + minZ);  srs.getProjection().localToWorld(coord);}  }
class C{  @Override public double op(final int k){  if (k > nExp) {    return 0.0;  }  if (logP == 0.0) {    return (k == nExp ? 1.0 : 0.0);  }  if (logOneMinusP == 0.0) {    return (k == 0 ? 1.0 : 0.0);  }  return Math.exp(binomialCoefficientLn(nExp,k) + k * logP + (nExp - k) * logOneMinusP);}  }
class C{  private static String stripWhitespaces(final String s){  return s.replaceAll(" ","");}  }
class C{  private boolean checkExistingCertificate(){  boolean alreadyexists=txt_PubCert.getDocument().getLength() > MIN_CERT_LENGTH;  if (alreadyexists) {    final int result=JOptionPane.showConfirmDialog(this,Constant.messages.getString("dynssl.message2.caalreadyexists") + "\n" + Constant.messages.getString("dynssl.message2.willreplace")+ "\n\n"+ Constant.messages.getString("dynssl.message2.wanttooverwrite"),Constant.messages.getString("dynssl.message2.title"),JOptionPane.YES_NO_OPTION);    alreadyexists=!(result == JOptionPane.YES_OPTION);  }  return alreadyexists;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void test_SelectLeftOuterJoin() throws SQLException {  String sql="SELECT distinct s.snum as ssnum, c.snum as ccnum FROM " + DatabaseCreator.CUSTOMERS_TABLE + " c left outer join "+ DatabaseCreator.SALESPEOPLE_TABLE+ " s on s.snum=c.snum";  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,Integer> value=new HashMap<Integer,Integer>();  value.put(1001,1001);  value.put(1002,1002);  value.put(1003,1003);  value.put(1004,1004);  value.put(1007,1007);  while (result.next()) {    int key=result.getInt("ssnum");    Object val=result.getObject("ccnum");    assertTrue("wrong value of ssnum field",value.containsKey(key));    assertEquals("wrong value of ccnum field",value.get(key),(Integer)val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  public static InterestPolicy fromOrdinal(byte ordinal){  return VALUES[ordinal];}  }
class C{  public boolean accept(Node node){  if (!matchElement(node)) {    return false;  }  int totalSelectors=selectorsCount();  for (int i=0; i < totalSelectors; i++) {    Selector selector=getSelector(i);switch (selector.getType()) {case ATTRIBUTE:      if (!((AttributeSelector)selector).accept(node)) {        return false;      }    break;case PSEUDO_CLASS:  if (!((PseudoClassSelector)selector).accept(node)) {    return false;  }break;case PSEUDO_FUNCTION:if (!((PseudoFunctionSelector)selector).accept(node)) {return false;}break;}}return true;}  }
class C{  public ModbusTCPMaster(String addr){  this(addr,Modbus.DEFAULT_PORT);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.RANGE_CONSTRAINT__LOWER_BOUND:    return lowerBound != LOWER_BOUND_EDEFAULT;case TypesPackage.RANGE_CONSTRAINT__UPPER_BOUND:  return upperBound != UPPER_BOUND_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  protected void tearDown(){  objArray=null;  hs=null;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public XYValueSeries(String title){  super(title);}  }
class C{  @Override public boolean isLast() throws SQLException {  try {    debugCodeCall("isLast");    checkClosed();    int row=result.getRowId();    return row >= 0 && row == result.getRowCount() - 1;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public MiniMulticastPlayer(){  currState=NO_STATE;}  }
class C{  @Override public void evaluateOutput(Vertex output){  Vertex action=output.mostConscious(Primitive.ACTION);  if (action != null && action.isPrimitive()) {    setAction(action.getDataValue());  } else {    setAction(null);  }  Vertex pose=output.mostConscious(Primitive.POSE);  if (pose != null && pose.isPrimitive()) {    if (pose.getDataValue().equals("default")) {      setPose(null);    } else {      setPose(pose.getDataValue());    }  }  EmotionalState emote=this.bot.mood().evaluateEmotionalState(output);  setEmote(emote.name());  emote(emote,output.getNetwork());}  }
class C{  protected N4TypeDefinitionImpl(){  super();}  }
class C{  public int numDistinct(String s,String t){  if (s == null || t == null)   return 0;  int m=t.length();  int n=s.length();  if (m > n)   return 0;  int[][] dp=new int[m + 1][n + 1];  for (int i=0; i <= n; i++)   dp[0][i]=1;  for (int i=1; i <= m; i++)   for (int j=1; j <= n; j++)   dp[i][j]=dp[i][j - 1] + (t.charAt(i - 1) == s.charAt(j - 1) ? dp[i - 1][j - 1] : 0);  return dp[m][n];}  }
class C{  public static byte[] decode(String data){  int len=data.length() / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void test_DELETE_accessPath_delete_o_Literal() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,null,new URIImpl("http://www.bigdata.com/Bryan"));  assertEquals(1,mutationResult);}  }
class C{  public void testGetColorFromString(){  LOGGER.debug("getColorFromString");  String color="rgb(228; 228; 228)";  Color expResult=new Color(228,228,228);  Color result=ContrastHelper.getColorFromString(color);  assertEquals(expResult,result);  color="transparent";  expResult=new Color(255,255,255);  result=ContrastHelper.getColorFromString(color);  assertEquals(expResult,result);}  }
class C{  public static String substitute(Config config,String pathString){  String trimmedPath=pathString.trim();  if (isURL(trimmedPath)) {    return substituteURL(config,trimmedPath);  }  String fileSeparator=Matcher.quoteReplacement(System.getProperty("file.separator"));  List<String> fixedList=Arrays.asList(trimmedPath.split(fileSeparator));  List<String> list=new LinkedList<String>(fixedList);  String homePath=FileSystemView.getFileSystemView().getHomeDirectory().getAbsolutePath();  for (int i=0; i < list.size(); i++) {    String elem=list.get(i);    if ("${HOME}".equals(elem)) {      list.set(i,homePath);    } else     if ("~".equals(elem)) {      list.set(i,homePath);    } else     if ("${JAVA_HOME}".equals(elem)) {      String javaPath=System.getenv("JAVA_HOME");      if (javaPath != null) {        list.set(i,javaPath);      }    } else     if ("${HERON_HOME}".equals(elem)) {      list.set(i,Context.heronHome(config));    } else     if ("${HERON_BIN}".equals(elem)) {      list.set(i,Context.heronBin(config));    } else     if ("${HERON_CONF}".equals(elem)) {      list.set(i,Context.heronConf(config));    } else     if ("${HERON_LIB}".equals(elem)) {      list.set(i,Context.heronLib(config));    } else     if ("${HERON_DIST}".equals(elem)) {      list.set(i,Context.heronDist(config));    } else     if ("${HERON_SANDBOX_HOME}".equals(elem)) {      list.set(i,Context.heronSandboxHome(config));    } else     if ("${HERON_SANDBOX_BIN}".equals(elem)) {      list.set(i,Context.heronSandboxBin(config));    } else     if ("${HERON_SANDBOX_CONF}".equals(elem)) {      list.set(i,Context.heronSandboxConf(config));    } else     if ("${HERON_SANDBOX_LIB}".equals(elem)) {      list.set(i,Context.heronSandboxLib(config));    } else     if ("${CLUSTER}".equals(elem)) {      list.set(i,Context.cluster(config));    } else     if ("${ROLE}".equals(elem)) {      list.set(i,Context.role(config));    } else     if ("${TOPOLOGY}".equals(elem)) {      list.set(i,Context.topologyName(config));    } else     if ("${ENVIRON}".equals(elem)) {      list.set(i,Context.environ(config));    }  }  return combinePaths(list);}  }
class C{  public ShowNetworkHierarchyPanel(final NetworkPanel networkPanel){  super("Show Network Hierarchy Panel");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SHORT_DESCRIPTION,"Show Network Hierarchy");}  }
class C{  public void clear(){  Iterator<Edge> it=getEdges().iterator();  while (it.hasNext()) {    Edge edge=it.next();    it.remove();    getPcs().firePropertyChange("edgeRemoved",edge,null);  }  Iterator<Node> it2=this.nodes.iterator();  while (it2.hasNext()) {    Node node=it2.next();    it2.remove();    namesHash.remove(node.getName());    getPcs().firePropertyChange("nodeRemoved",node,null);  }  edgeLists.clear();}  }
class C{  private long readUntil(long pos) throws IOException {  if (pos < length) {    return pos;  }  if (foundEOS) {    return length;  }  int sector=(int)(pos >> SECTOR_SHIFT);  int startSector=length >> SECTOR_SHIFT;  for (int i=startSector; i <= sector; i++) {    byte[] buf=new byte[SECTOR_SIZE];    data.add(buf);    int len=SECTOR_SIZE;    int off=0;    while (len > 0) {      int nbytes=src.read(buf,off,len);      if (nbytes == -1) {        foundEOS=true;        return length;      }      off+=nbytes;      len-=nbytes;      length+=nbytes;    }  }  return length;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_ENTITY_1__TRACE_ENTITY_1:    return getTrace_entity_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected Geometry transformLinearRing(LinearRing geom,Geometry parent){  CoordinateSequence seq=transformCoordinates(geom.getCoordinateSequence(),geom);  if (seq == null)   return factory.createLinearRing((CoordinateSequence)null);  int seqSize=seq.size();  if (seqSize > 0 && seqSize < 4 && !preserveType)   return factory.createLineString(seq);  return factory.createLinearRing(seq);}  }
class C{  public DTBuilder(DateValue date){  this.year=date.year();  this.month=date.month();  this.day=date.day();  if (date instanceof TimeValue) {    TimeValue tv=(TimeValue)date;    this.hour=tv.hour();    this.minute=tv.minute();    this.second=tv.second();  }}  }
class C{  protected boolean isAffectingReplace(){  return fLength > 0 && fReplaceLength > 0 && fPosition.length < fOriginalPosition.length;}  }
class C{  private boolean nextPeriodReady(){  return m_ds.isNewControlData();}  }
class C{  private static boolean eq(float v1,float v2){  return v1 == v2;}  }
class C{  public AbstractConfigTest() throws Exception {  super.setUp();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (!inputHeader.contains(".dep")) {      throw new Exception("No input file found");    }    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,0);        } else {          outputFile.setValue(row,col,1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void seek(long filePointer) throws IOException {  mStream.seek(filePointer);  mBufferFilePointer=filePointer;  mFilePointer=filePointer;  mPos=0;  mBufferUsed=0;  mLineBufferUsed=0;  mInit=true;}  }
class C{  public GrainEffect(float strength){  if (strength < 0.0f)   strength=0.0f;  if (strength > 1.0f)   strength=1.0f;  this.strength=strength;}  }
class C{  public static boolean shouldHighlightMethd(String sootMethodSignature){  return methodsToHighlight.contains(sootMethodSignature);}  }
class C{  public static void log(Throwable error,String message,Object... args){  if (loggingEnabled) {    Log.d(TAG,args.length == 0 ? message : String.format(message,args),error);  }}  }
class C{  public void testAddTable(){  System.out.println("addTable");  Table t=null;  assertTrue(TableDB.addTable(t));}  }
class C{  public static OFGroup createL2DCOMulticastOverUnicastTunnels(U16 index,U16 tunnelId){  return OFGroup.of(0 | (index.getRaw() & 0x03ff) | (tunnelId.getRaw() << 12)| (L2OverlaySubType.L2_OVERLAY_MULTICAST_OVER_UNICAST_TUNNELS << 10)| (OFDPAGroupType.L2_DATA_CENTER_OVERLAY << 28));}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.009 -0500",hash_original_method="358FFD6F817CCE2A8A6AEFD88EADC0D0",hash_generated_method="79917D8CA357A494EFAC68C2B2CC183F") public void processRequest(SIPRequest sipRequest,MessageChannel incomingMessageChannel){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("PROCESSING INCOMING REQUEST " + sipRequest + " transactionChannel = "+ transactionChannel+ " listening point = "+ listeningPoint.getIPAddress()+ ":"+ listeningPoint.getPort());  if (listeningPoint == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping message: No listening point registered!");    return;  }  SipStackImpl sipStack=(SipStackImpl)transactionChannel.getSIPStack();  SipProviderImpl sipProvider=listeningPoint.getProvider();  if (sipProvider == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("No provider - dropping !!");    return;  }  if (sipStack == null)   InternalErrorHandler.handleException("Egads! no sip stack!");  SIPServerTransaction transaction=(SIPServerTransaction)this.transactionChannel;  if (transaction != null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("transaction state = " + transaction.getState());  }  String dialogId=sipRequest.getDialogId(true);  SIPDialog dialog=sipStack.getDialog(dialogId);  if (dialog != null && sipProvider != dialog.getSipProvider()) {    Contact contact=dialog.getMyContactHeader();    if (contact != null) {      SipUri contactUri=(SipUri)(contact.getAddress().getURI());      String ipAddress=contactUri.getHost();      int contactPort=contactUri.getPort();      String contactTransport=contactUri.getTransportParam();      if (contactTransport == null)       contactTransport="udp";      if (contactPort == -1) {        if (contactTransport.equals("udp") || contactTransport.equals("tcp"))         contactPort=5060; else         contactPort=5061;      }      if (ipAddress != null && (!ipAddress.equals(listeningPoint.getIPAddress()) || contactPort != listeningPoint.getPort())) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("nulling dialog -- listening point mismatch!  " + contactPort + "  lp port = "+ listeningPoint.getPort());        }        dialog=null;      }    }  }  if (sipProvider.isAutomaticDialogSupportEnabled() && sipProvider.isDialogErrorsAutomaticallyHandled() && sipRequest.getToTag() == null) {    SIPServerTransaction sipServerTransaction=sipStack.findMergedTransaction(sipRequest);    if (sipServerTransaction != null) {      this.sendLoopDetectedResponse(sipRequest,transaction);      return;    }  }  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("dialogId = " + dialogId);    sipStack.getStackLogger().logDebug("dialog = " + dialog);  }  if (sipRequest.getHeader(Route.NAME) != null && transaction.getDialog() != null) {    RouteList routes=sipRequest.getRouteHeaders();    Route route=(Route)routes.getFirst();    SipUri uri=(SipUri)route.getAddress().getURI();    int port;    if (uri.getHostPort().hasPort()) {      port=uri.getHostPort().getPort();    } else {      if (listeningPoint.getTransport().equalsIgnoreCase("TLS"))       port=5061; else       port=5060;    }    String host=uri.getHost();    if ((host.equals(listeningPoint.getIPAddress()) || host.equalsIgnoreCase(listeningPoint.getSentBy())) && port == listeningPoint.getPort()) {      if (routes.size() == 1)       sipRequest.removeHeader(Route.NAME); else       routes.removeFirst();    }  }  if (sipRequest.getMethod().equals(Request.REFER) && dialog != null && sipProvider.isDialogErrorsAutomaticallyHandled()) {    ReferToHeader sipHeader=(ReferToHeader)sipRequest.getHeader(ReferTo.NAME);    if (sipHeader == null) {      this.sendBadRequestResponse(sipRequest,transaction,"Refer-To header is missing");      return;    }    SIPTransaction lastTransaction=((SIPDialog)dialog).getLastTransaction();    if (lastTransaction != null && sipProvider.isDialogErrorsAutomaticallyHandled()) {      SIPRequest lastRequest=(SIPRequest)lastTransaction.getRequest();      if (lastTransaction instanceof SIPServerTransaction) {        if (!((SIPDialog)dialog).isAckSeen() && lastRequest.getMethod().equals(Request.INVITE)) {          this.sendRequestPendingResponse(sipRequest,transaction);          return;        }      } else       if (lastTransaction instanceof SIPClientTransaction) {        long cseqno=lastRequest.getCSeqHeader().getSeqNumber();        String method=lastRequest.getMethod();        if (method.equals(Request.INVITE) && !dialog.isAckSent(cseqno)) {          this.sendRequestPendingResponse(sipRequest,transaction);          return;        }      }    }  } else   if (sipRequest.getMethod().equals(Request.UPDATE)) {    if (sipProvider.isAutomaticDialogSupportEnabled() && dialog == null) {      this.sendCallOrTransactionDoesNotExistResponse(sipRequest,transaction);      return;    }  } else   if (sipRequest.getMethod().equals(Request.ACK)) {    if (transaction != null && transaction.isInviteTransaction()) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing ACK for INVITE Tx ");    } else {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing ACK for dialog " + dialog);      if (dialog == null) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Dialog does not exist " + sipRequest.getFirstLine() + " isServerTransaction = "+ true);        }        SIPServerTransaction st=sipStack.getRetransmissionAlertTransaction(dialogId);        if (st != null && st.isRetransmissionAlertEnabled()) {          st.disableRetransmissionAlerts();        }        SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);        if (ackTransaction != null) {          if (sipStack.isLoggingEnabled())           sipStack.getStackLogger().logDebug("Found Tx pending ACK");          try {            ackTransaction.setAckSeen();            sipStack.removeTransaction(ackTransaction);            sipStack.removeTransactionPendingAck(ackTransaction);          } catch (          Exception ex) {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logError("Problem terminating transaction",ex);            }          }          return;        }      } else {        if (!dialog.handleAck(transaction)) {          if (!dialog.isSequnceNumberValidation()) {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logDebug("Dialog exists with loose dialog validation " + sipRequest.getFirstLine() + " isServerTransaction = "+ true+ " dialog = "+ dialog.getDialogId());            }            SIPServerTransaction st=sipStack.getRetransmissionAlertTransaction(dialogId);            if (st != null && st.isRetransmissionAlertEnabled()) {              st.disableRetransmissionAlerts();            }          } else {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logDebug("Dropping ACK - cannot find a transaction or dialog");            }            SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);            if (ackTransaction != null) {              if (sipStack.isLoggingEnabled())               sipStack.getStackLogger().logDebug("Found Tx pending ACK");              try {                ackTransaction.setAckSeen();                sipStack.removeTransaction(ackTransaction);                sipStack.removeTransactionPendingAck(ackTransaction);              } catch (              Exception ex) {                if (sipStack.isLoggingEnabled()) {                  sipStack.getStackLogger().logError("Problem terminating transaction",ex);                }              }            }            return;          }        } else {          transaction.passToListener();          dialog.addTransaction(transaction);          dialog.addRoute(sipRequest);          transaction.setDialog(dialog,dialogId);          if (sipRequest.getMethod().equals(Request.INVITE) && sipProvider.isDialogErrorsAutomaticallyHandled()) {            sipStack.putInMergeTable(transaction,sipRequest);          }          if (sipStack.deliverTerminatedEventForAck) {            try {              sipStack.addTransaction(transaction);              transaction.scheduleAckRemoval();            } catch (            IOException ex) {            }          } else {            transaction.setMapped(true);          }        }      }    }  } else   if (sipRequest.getMethod().equals(Request.PRACK)) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Processing PRACK for dialog " + dialog);    if (dialog == null && sipProvider.isAutomaticDialogSupportEnabled()) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Dialog does not exist " + sipRequest.getFirstLine() + " isServerTransaction = "+ true);      }      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Sending 481 for PRACK - automatic dialog support is enabled -- cant find dialog!");      }      SIPResponse notExist=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);      try {        sipProvider.sendResponse(notExist);      } catch (      SipException e) {        sipStack.getStackLogger().logError("error sending response",e);      }      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();      }      return;    } else     if (dialog != null) {      if (!dialog.handlePrack(sipRequest)) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logDebug("Dropping out of sequence PRACK ");        if (transaction != null) {          sipStack.removeTransaction(transaction);          transaction.releaseSem();        }        return;      } else {        try {          sipStack.addTransaction(transaction);          dialog.addTransaction(transaction);          dialog.addRoute(sipRequest);          transaction.setDialog(dialog,dialogId);        } catch (        Exception ex) {          InternalErrorHandler.handleException(ex);        }      }    } else {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing PRACK without a DIALOG -- this must be a proxy element");    }  } else   if (sipRequest.getMethod().equals(Request.BYE)) {    if (dialog != null && !dialog.isRequestConsumable(sipRequest)) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping out of sequence BYE " + dialog.getRemoteSeqNumber() + " "+ sipRequest.getCSeq().getSeqNumber());      if (dialog.getRemoteSeqNumber() >= sipRequest.getCSeq().getSeqNumber() && transaction.getState() == TransactionState.TRYING) {        this.sendServerInternalErrorResponse(sipRequest,transaction);      }      if (transaction != null)       sipStack.removeTransaction(transaction);      return;    } else     if (dialog == null && sipProvider.isAutomaticDialogSupportEnabled()) {      SIPResponse response=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);      response.setReasonPhrase("Dialog Not Found");      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("dropping request -- automatic dialog " + "support enabled and dialog does not exist!");      try {        transaction.sendResponse(response);      } catch (      SipException ex) {        sipStack.getStackLogger().logError("Error in sending response",ex);      }      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();        transaction=null;      }      return;    }    if (transaction != null && dialog != null) {      try {        if (sipProvider == dialog.getSipProvider()) {          sipStack.addTransaction(transaction);          dialog.addTransaction(transaction);          transaction.setDialog(dialog,dialogId);        }      } catch (      IOException ex) {        InternalErrorHandler.handleException(ex);      }    }    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("BYE Tx = " + transaction + " isMapped ="+ transaction.isTransactionMapped());    }  } else   if (sipRequest.getMethod().equals(Request.CANCEL)) {    SIPServerTransaction st=(SIPServerTransaction)sipStack.findCancelTransaction(sipRequest,true);    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("Got a CANCEL, InviteServerTx = " + st + " cancel Server Tx ID = "+ transaction+ " isMapped = "+ transaction.isTransactionMapped());    }    if (sipRequest.getMethod().equals(Request.CANCEL)) {      if (st != null && st.getState() == SIPTransaction.TERMINATED_STATE) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logDebug("Too late to cancel Transaction");        try {          transaction.sendResponse(sipRequest.createResponse(Response.OK));        } catch (        Exception ex) {          if (ex.getCause() != null && ex.getCause() instanceof IOException) {            st.raiseIOExceptionEvent();          }        }        return;      }      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Cancel transaction = " + st);    }    if (transaction != null && st != null && st.getDialog() != null) {      transaction.setDialog((SIPDialog)st.getDialog(),dialogId);      dialog=(SIPDialog)st.getDialog();    } else     if (st == null && sipProvider.isAutomaticDialogSupportEnabled() && transaction != null) {      SIPResponse response=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("dropping request -- automatic dialog support " + "enabled and INVITE ST does not exist!");      }      try {        sipProvider.sendResponse(response);      } catch (      SipException ex) {        InternalErrorHandler.handleException(ex);      }      if (transaction != null) {        sipStack.removeTransaction(transaction);        transaction.releaseSem();      }      return;    }    if (st != null) {      try {        if (transaction != null) {          sipStack.addTransaction(transaction);          transaction.setPassToListener();          transaction.setInviteTransaction(st);          st.acquireSem();        }      } catch (      Exception ex) {        InternalErrorHandler.handleException(ex);      }    }  } else   if (sipRequest.getMethod().equals(Request.INVITE)) {    SIPTransaction lastTransaction=dialog == null ? null : dialog.getInviteTransaction();    if (dialog != null && transaction != null && lastTransaction != null && sipRequest.getCSeq().getSeqNumber() > dialog.getRemoteSeqNumber() && lastTransaction instanceof SIPServerTransaction && sipProvider.isDialogErrorsAutomaticallyHandled() && dialog.isSequnceNumberValidation() && lastTransaction.isInviteTransaction() && lastTransaction.getState() != TransactionState.COMPLETED && lastTransaction.getState() != TransactionState.TERMINATED && lastTransaction.getState() != TransactionState.CONFIRMED) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Sending 500 response for out of sequence message");      }      this.sendServerInternalErrorResponse(sipRequest,transaction);      return;    }    lastTransaction=(dialog == null ? null : dialog.getLastTransaction());    if (dialog != null && sipProvider.isDialogErrorsAutomaticallyHandled() && lastTransaction != null && lastTransaction.isInviteTransaction() && lastTransaction instanceof ClientTransaction && lastTransaction.getLastResponse() != null && lastTransaction.getLastResponse().getStatusCode() == 200 && !dialog.isAckSent(lastTransaction.getLastResponse().getCSeq().getSeqNumber())) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Sending 491 response for client Dialog ACK not sent.");      }      this.sendRequestPendingResponse(sipRequest,transaction);      return;    }    if (dialog != null && lastTransaction != null && sipProvider.isDialogErrorsAutomaticallyHandled() && lastTransaction.isInviteTransaction() && lastTransaction instanceof ServerTransaction && !dialog.isAckSeen()) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Sending 491 response for server Dialog ACK not seen.");      }      this.sendRequestPendingResponse(sipRequest,transaction);      return;    }  }  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("CHECK FOR OUT OF SEQ MESSAGE " + dialog + " transaction "+ transaction);  }  if (dialog != null && transaction != null && !sipRequest.getMethod().equals(Request.BYE) && !sipRequest.getMethod().equals(Request.CANCEL) && !sipRequest.getMethod().equals(Request.ACK) && !sipRequest.getMethod().equals(Request.PRACK)) {    if (!dialog.isRequestConsumable(sipRequest)) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Dropping out of sequence message " + dialog.getRemoteSeqNumber() + " "+ sipRequest.getCSeq());      }      if (dialog.getRemoteSeqNumber() >= sipRequest.getCSeq().getSeqNumber() && sipProvider.isDialogErrorsAutomaticallyHandled() && (transaction.getState() == TransactionState.TRYING || transaction.getState() == TransactionState.PROCEEDING)) {        this.sendServerInternalErrorResponse(sipRequest,transaction);      }      return;    }    try {      if (sipProvider == dialog.getSipProvider()) {        sipStack.addTransaction(transaction);        dialog.addTransaction(transaction);        dialog.addRoute(sipRequest);        transaction.setDialog(dialog,dialogId);      }    } catch (    IOException ex) {      transaction.raiseIOExceptionEvent();      sipStack.removeTransaction(transaction);      return;    }  }  RequestEvent sipEvent;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug(sipRequest.getMethod() + " transaction.isMapped = " + transaction.isTransactionMapped());  }  if (dialog == null && sipRequest.getMethod().equals(Request.NOTIFY)) {    SIPClientTransaction pendingSubscribeClientTx=sipStack.findSubscribeTransaction(sipRequest,listeningPoint);    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("PROCESSING NOTIFY  DIALOG == null " + pendingSubscribeClientTx);    }    if (sipProvider.isAutomaticDialogSupportEnabled() && pendingSubscribeClientTx == null && !sipStack.deliverUnsolicitedNotify) {      try {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Could not find Subscription for Notify Tx.");        }        Response errorResponse=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);        errorResponse.setReasonPhrase("Subscription does not exist");        sipProvider.sendResponse(errorResponse);        return;      } catch (      Exception ex) {        sipStack.getStackLogger().logError("Exception while sending error response statelessly",ex);        return;      }    }    if (pendingSubscribeClientTx != null) {      transaction.setPendingSubscribe(pendingSubscribeClientTx);      SIPDialog subscriptionDialog=(SIPDialog)pendingSubscribeClientTx.getDefaultDialog();      if (subscriptionDialog == null || subscriptionDialog.getDialogId() == null || !subscriptionDialog.getDialogId().equals(dialogId)) {        if (subscriptionDialog != null && subscriptionDialog.getDialogId() == null) {          subscriptionDialog.setDialogId(dialogId);        } else {          subscriptionDialog=pendingSubscribeClientTx.getDialog(dialogId);        }        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("PROCESSING NOTIFY Subscribe DIALOG " + subscriptionDialog);        }        if (subscriptionDialog == null && (sipProvider.isAutomaticDialogSupportEnabled() || pendingSubscribeClientTx.getDefaultDialog() != null)) {          Event event=(Event)sipRequest.getHeader(EventHeader.NAME);          if (sipStack.isEventForked(event.getEventType())) {            subscriptionDialog=SIPDialog.createFromNOTIFY(pendingSubscribeClientTx,transaction);          }        }        if (subscriptionDialog != null) {          transaction.setDialog(subscriptionDialog,dialogId);          subscriptionDialog.setState(DialogState.CONFIRMED.getValue());          sipStack.putDialog(subscriptionDialog);          pendingSubscribeClientTx.setDialog(subscriptionDialog,dialogId);          if (!transaction.isTransactionMapped()) {            this.sipStack.mapTransaction(transaction);            transaction.setPassToListener();            try {              this.sipStack.addTransaction(transaction);            } catch (            Exception ex) {            }          }        }      } else {        transaction.setDialog(subscriptionDialog,dialogId);        dialog=subscriptionDialog;        if (!transaction.isTransactionMapped()) {          this.sipStack.mapTransaction(transaction);          transaction.setPassToListener();          try {            this.sipStack.addTransaction(transaction);          } catch (          Exception ex) {          }        }        sipStack.putDialog(subscriptionDialog);        if (pendingSubscribeClientTx != null) {          subscriptionDialog.addTransaction(pendingSubscribeClientTx);          pendingSubscribeClientTx.setDialog(subscriptionDialog,dialogId);        }      }      if (transaction != null && ((SIPServerTransaction)transaction).isTransactionMapped()) {        sipEvent=new RequestEvent((SipProvider)sipProvider,(ServerTransaction)transaction,subscriptionDialog,(Request)sipRequest);      } else {        sipEvent=new RequestEvent((SipProvider)sipProvider,null,subscriptionDialog,(Request)sipRequest);      }    } else {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("could not find subscribe tx");      }      sipEvent=new RequestEvent(sipProvider,null,null,(Request)sipRequest);    }  } else {    if (transaction != null && (((SIPServerTransaction)transaction).isTransactionMapped())) {      sipEvent=new RequestEvent(sipProvider,(ServerTransaction)transaction,dialog,(Request)sipRequest);    } else {      sipEvent=new RequestEvent(sipProvider,null,dialog,(Request)sipRequest);    }  }  sipProvider.handleEvent(sipEvent,transaction);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  NamedNodeMap newAttributes;  Element element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");  newAttributes=element.getAttributes();  attribute=(Attr)newAttributes.getNamedItemNS("http://www.nist.gov","domestic");  assertNull("namednodemapremovenameditemns09",attribute);}  }
class C{  public void onReachAchievement(String achievementTitle,String achievementDescription,String achievementCategory){  ClientSingletonRepository.getUserInterface().addAchievementBox(achievementTitle,achievementDescription,achievementCategory);}  }
class C{  public synchronized void enqueueTasks(List<GenericClusterRequest> tasks){  Job job=findJob(tasks.get(0));  if (!workersAvailable(job.getWorkerCategory())) {    createWorkersInCategory(job.getWorkerCategory());  }  for (  GenericClusterRequest task : tasks) {    task.taskId=nextTaskId++;    job.addTask(task);    LOG.debug("Enqueued task id {} in job {}",task.taskId,job.jobId);    if (!task.graphId.equals(job.workerCategory.graphId)) {      LOG.error("Task graph ID {} does not match job: {}.",task.graphId,job.workerCategory);    }    if (!task.workerVersion.equals(job.workerCategory.workerVersion)) {      LOG.error("Task R5 commit {} does not match job: {}.",task.workerVersion,job.workerCategory);    }  }  notify();}  }
class C{  public String toString(){  if (defn != null) {    return defn.getName() + " = " + value;  }  return "";}  }
class C{  public void ifPresent(IntConsumer consumer){  if (isPresent)   consumer.accept(value);}  }
class C{  public static Appearance appearanceForColor(Color unlitColor){  Appearance appearance=new Appearance();  setAppearanceFlags(appearance);  float[] c=unlitColor.getRGBComponents(null);  ColoringAttributes ca=new ColoringAttributes(c[0],c[1],c[2],ColoringAttributes.SHADE_FLAT);  ca.setCapability(ColoringAttributes.ALLOW_COLOR_WRITE);  ca.setCapability(ColoringAttributes.ALLOW_COLOR_READ);  appearance.setColoringAttributes(ca);  if (c[3] < 1.0) {    TransparencyAttributes tta=new TransparencyAttributes(TransparencyAttributes.BLENDED,1.0f - c[3]);    tta.setCapability(TransparencyAttributes.ALLOW_VALUE_WRITE);    tta.setCapability(TransparencyAttributes.ALLOW_VALUE_READ);    appearance.setTransparencyAttributes(tta);  }  return appearance;}  }
class C{  public static ASTNode perform(ASTNode root,int start,int length){  NodeFinder finder=new NodeFinder(root,start,length);  ASTNode result=finder.getCoveredNode();  if (result == null || result.getStartPosition() != start || result.getLength() != length) {    return finder.getCoveringNode();  }  return result;}  }
class C{  private Payment runTransaction(final net.authorize.Merchant merchant,final net.authorize.aim.Transaction transaction,final Payment payment){  try {    final net.authorize.aim.Result<net.authorize.aim.Transaction> transTez=(net.authorize.aim.Result<net.authorize.aim.Transaction>)merchant.postTransaction(transaction);    payment.setTransactionOperationResultCode(String.valueOf(transTez.getReasonResponseCode().getResponseReasonCode()));    payment.setTransactionOperationResultMessage(transTez.getReasonResponseCode().getReasonText() + " " + transTez.getReasonResponseCode().getNotes());    if (net.authorize.ResponseCode.DECLINED == transTez.getReasonResponseCode().getResponseCode() || net.authorize.ResponseCode.ERROR == transTez.getReasonResponseCode().getResponseCode()) {      payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);      payment.setPaymentProcessorBatchSettlement(false);    } else     if (net.authorize.ResponseCode.APPROVED == transTez.getReasonResponseCode().getResponseCode()) {      payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_OK);      payment.setPaymentProcessorBatchSettlement(true);    } else     if (net.authorize.ResponseCode.REVIEW == transTez.getReasonResponseCode().getResponseCode()) {      payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_PROCESSING);      payment.setPaymentProcessorBatchSettlement(false);    } else {      payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);      payment.setPaymentProcessorBatchSettlement(false);    }    payment.setTransactionReferenceId(transTez.getTarget().getTransactionId());    payment.setTransactionAuthorizationCode(transTez.getTarget().getAuthorizationCode());    final Logger log=ShopCodeContext.getLog(this);    if (log.isDebugEnabled()) {      log.debug(payment.getTransactionOperation() + " transaction response code was : " + transTez.getReasonResponseCode().getResponseCode().getCode()+ " - "+ transTez.getReasonResponseCode().getResponseCode().getDescription());    }  } catch (  Throwable th) {    ShopCodeContext.getLog(this).error("Can not execute transaction. Client exception : " + payment,th);    payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);    payment.setPaymentProcessorBatchSettlement(false);    payment.setTransactionOperationResultMessage(th.getMessage());  }  return payment;}  }
class C{  private void insertInstance(Instance current,ArrayList<BinaryItem> singletons,FPTreeRoot tree,int minSupport){  ArrayList<BinaryItem> transaction=new ArrayList<BinaryItem>();  if (current instanceof SparseInstance) {    for (int j=0; j < current.numValues(); j++) {      int attIndex=current.index(j);      if (singletons.get(attIndex).getFrequency() >= minSupport) {        transaction.add(singletons.get(attIndex));      }    }    Collections.sort(transaction);    tree.addItemSet(transaction,1);  } else {    for (int j=0; j < current.numAttributes(); j++) {      if (!current.isMissing(j)) {        if (current.attribute(j).numValues() == 1 || current.value(j) == m_positiveIndex - 1) {          if (singletons.get(j).getFrequency() >= minSupport) {            transaction.add(singletons.get(j));          }        }      }    }    Collections.sort(transaction);    tree.addItemSet(transaction,1);  }}  }
class C{  public void removeAttribute(Object name){  StyleContext context=StyleContext.this;  attributes=context.removeAttribute(attributes,name);  fireStateChanged();}  }
class C{  public static void checkGlError(String op){  int error=GLES20.glGetError();  if (error != GLES20.GL_NO_ERROR) {    String msg=op + ": glError 0x" + Integer.toHexString(error);    Log.e(TAG,msg);    throw new RuntimeException(msg);  }}  }
class C{  private void removeAllTokens(){synchronized (this.tokens) {    Assert.assertTrue(this.destroyed);    for (Iterator iter=this.tokens.values().iterator(); iter.hasNext(); ) {      DLockToken token=(DLockToken)iter.next();synchronized (token) {        token.destroy();      }    }    getStats().incTokens(-this.tokens.size());    this.tokens.clear();  }}  }
class C{  public static ExecutorService newWorkStealingPool(int parallelism){  return new ForkJoinPool(parallelism,ForkJoinPool.defaultForkJoinWorkerThreadFactory,null,true);}  }
class C{  public boolean isContext(){  return false;}  }
class C{  public LineSelection(){  super(NAME,TextTemplateMessages.MESSAGES.variableDescriptionSelectedLines());}  }
class C{  static private void addOpaqueAttrPlugin(WbXmlDefinition def,Properties props,String key,String value){  try {    String[] keys=key.split(Pattern.quote("."));    byte pageCode=Integer.decode(keys[3]).byteValue();    String name=keys[4];    String tagProp=new StringBuilder(PROP_WBXML_ATTR_PREFIX).append(pageCode).append(".").append(name).toString();    WbXmlAttributeDef attrDef=getAttrDefinition(props,tagProp,props.getProperty(tagProp));    Class clazz=Class.forName(value);    OpaqueAttributePlugin plugin=(OpaqueAttributePlugin)clazz.newInstance();    def.addOpaqueAttr(attrDef,plugin);  } catch (  Exception e) {    log.log(Level.SEVERE,"Error loading plugin {0}={1}",new Object[]{key,value});    log.log(Level.SEVERE,"Exception",e);  }}  }
class C{  public final boolean isProtReady(){  return (state == STATE_DONE);}  }
class C{  protected Vector<Double> testWithTestValues(Estimator est,Vector<Double> test){  Vector<Double> results=new Vector<Double>();  for (int i=0; i < test.size(); i++) {    double testValue=(test.elementAt(i)).doubleValue();    double prob=est.getProbability(testValue);    Double p=new Double(prob);    results.add(p);  }  return results;}  }
class C{  public void Gen_populate(android.content.ContentValues values){  gen__Id=values.getAsLong(GEN_FIELD__ID);  gen_nickname=values.getAsString(GEN_FIELD_NICKNAME);  gen_address=values.getAsString(GEN_FIELD_ADDRESS);  gen_port=(int)values.getAsInteger(GEN_FIELD_PORT);  gen_password=values.getAsString(GEN_FIELD_PASSWORD);  gen_colorModel=values.getAsString(GEN_FIELD_COLORMODEL);  gen_forceFull=values.getAsLong(GEN_FIELD_FORCEFULL);  gen_repeaterId=values.getAsString(GEN_FIELD_REPEATERID);  gen_inputMode=values.getAsString(GEN_FIELD_INPUTMODE);  gen_SCALEMODE=values.getAsString(GEN_FIELD_SCALEMODE);  gen_useLocalCursor=(values.getAsInteger(GEN_FIELD_USELOCALCURSOR) != 0);  gen_keepPassword=(values.getAsInteger(GEN_FIELD_KEEPPASSWORD) != 0);  gen_followMouse=(values.getAsInteger(GEN_FIELD_FOLLOWMOUSE) != 0);  gen_useRepeater=(values.getAsInteger(GEN_FIELD_USEREPEATER) != 0);  gen_metaListId=values.getAsLong(GEN_FIELD_METALISTID);  gen_LAST_META_KEY_ID=values.getAsLong(GEN_FIELD_LAST_META_KEY_ID);  gen_followPan=(values.getAsInteger(GEN_FIELD_FOLLOWPAN) != 0);  gen_userName=values.getAsString(GEN_FIELD_USERNAME);  gen_secureConnectionType=values.getAsString(GEN_FIELD_SECURECONNECTIONTYPE);  gen_showZoomButtons=(values.getAsInteger(GEN_FIELD_SHOWZOOMBUTTONS) != 0);  gen_DOUBLE_TAP_ACTION=values.getAsString(GEN_FIELD_DOUBLE_TAP_ACTION);}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  long[] oldKeys=_set;  long[] oldVals=_values;  byte[] oldStates=_states;  _set=new long[newCapacity];  _values=new long[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      long o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  public IntAveDataSetProbs(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  this.dataSet=dataSet;  dims=new int[dataSet.getNumColumns()];  for (int i=0; i < dims.length; i++) {    DiscreteVariable variable=(DiscreteVariable)dataSet.getVariable(i);    dims[i]=variable.getNumCategories();  }  numRows=dataSet.getNumRows();}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public static IStatus validateMethodName(String name){  return validateMethodName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public String toMatlab(){  return getMatrix().toMatlab();}  }
class C{  public void handleException(Exception e,int option){  if (!getOptionIsSupported(option)) {    String message=e.getMessage();    if (message != null && (message.equals(osDoesNotSupportOperationString) || message.equals(osDoesNotSupportOptionString) || message.equals(osDoesNotSupportOptionArgumentString))) {    } else {      fail("Threw \"" + e + "\" instead of correct exception for unsupported socket option: "+ getSocketOptionString(option));    }  } else {    fail("Exception during test : " + e.getMessage());  }}  }
class C{  public static char lowSurrogate(int c){  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);}  }
class C{  public static final GeoTimeSerie sort(GeoTimeSerie gts,boolean reversed){  if (gts.sorted && gts.reversed != reversed) {    gts.sorted=false;  }  if (gts.sorted) {    return gts;  }  quicksort(gts,0,gts.values - 1,reversed);  gts.sorted=true;  gts.reversed=reversed;  return gts;}  }
class C{  public void pushOpenedFile() throws Exception {  JournalFile nextOpenedFile=takeFile(true,true,true,false);  if (logger.isTraceEnabled()) {    logger.trace("pushing openFile " + nextOpenedFile);  }  if (!openedFiles.offer(nextOpenedFile)) {    ActiveMQJournalLogger.LOGGER.failedToAddFile(nextOpenedFile);  }}  }
class C{  void displayState(int state){  log.debug(getNameString() + " displayState " + state);  updateSize();switch (getTurnoutType()) {case SINGLESLIP:    if (singleSlipRoute && state == 9) {      state=0;    } else     if ((!singleSlipRoute) && state == 7) {      state=0;    }  break;case THREEWAY:if ((state == 7) || (state == 11)) {  if (singleSlipRoute) {    state=11;  } else {    state=9;  }} else if (state == 9) {  if (!singleSlipRoute) {    state=11;  }}break;case SCISSOR:switch (state) {case 5:state=9;break;case 7:state=5;break;case 9:state=11;break;case 11:state=0;break;}break;}switch (state) {case Turnout.UNKNOWN:if (isText()) {super.setText(Bundle.getMessage("BeanStateUnknown"));}if (isIcon()) {super.setIcon(unknown);}break;case 5:if (isText()) {super.setText(upperWestToLowerEastText);}if (isIcon()) {super.setIcon(upperWestToLowerEast);}break;case 9:if (isText()) {super.setText(lowerWestToLowerEastText);}if (isIcon()) {super.setIcon(lowerWestToLowerEast);}break;case 7:if (isText()) {super.setText(upperWestToUpperEastText);}if (isIcon()) {super.setIcon(upperWestToUpperEast);}break;case 11:if (isText()) {super.setText(lowerWestToUpperEastText);}if (isIcon()) {super.setIcon(lowerWestToUpperEast);}break;default :if (isText()) {super.setText(Bundle.getMessage("BeanStateInconsistent"));}if (isIcon()) {super.setIcon(inconsistent);}break;}return;}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public static void execLine(int lineNumber){  instance.lineExecuted(lineNumber);}  }
class C{  public void startFunction(String name,String[] paramNames) throws IOException {  String args=name + "(";  if (paramNames != null) {    for (int i=0; i < paramNames.length; i++) {      if (i > 0) {        args+=",";      }      args+=" " + paramNames[i];    }    if (paramNames.length > 0) {      args+=" ";    }  }  args+=")";  printer.println();  print("defineFunction",new String[]{args});  print("{",null);  indent+="    ";}  }
class C{  public static void cancelAllNonPersistedTasks(){  cancelTasks(false);}  }
class C{  @Override public V remove(Object key){  LinkedHashMapEntry<K,V> m=(LinkedHashMapEntry<K,V>)removeEntry(key);  if (m == null) {    return null;  }  LinkedHashMapEntry<K,V> p=m.chainBackward;  LinkedHashMapEntry<K,V> n=m.chainForward;  if (p != null) {    p.chainForward=n;  } else {    head=n;  }  if (n != null) {    n.chainBackward=p;  } else {    tail=p;  }  return m.value;}  }
class C{  public boolean isSavePassword(){  return m_savePassword;}  }
class C{  private void nextToken(){  nextToken(fPosition);}  }
class C{  public S_Action createS_Action(){  S_ActionImpl s_Action=new S_ActionImpl();  return s_Action;}  }
class C{  private void checkConnectivity(State state) throws StopRequest {switch (mService.getNetworkAvailabilityState(mDB)) {case DownloaderService.NETWORK_OK:    return;case DownloaderService.NETWORK_NO_CONNECTION:  throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"waiting for network to return");case DownloaderService.NETWORK_TYPE_DISALLOWED_BY_REQUESTOR:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI_OR_CELLULAR_PERMISSION,"waiting for wifi or for download over cellular to be authorized");case DownloaderService.NETWORK_CANNOT_USE_ROAMING:throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"roaming is not allowed");case DownloaderService.NETWORK_UNUSABLE_DUE_TO_SIZE:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI,"waiting for wifi");}}  }
class C{  public IntegerOrPercentage maxUnmatedAlignmentScore(){  return mMaxASUnmatedValue;}  }
class C{  protected boolean hasStartMarker(Word w){  return w.capitalized || startsWithOpenQuote(w) || startsWithOpenBracket(w);}  }
class C{  public boolean removeAdapter(@NonNull ComposedChildAdapterTag tag){  final int segment=mAdaptersSet.getAdapterSegment(tag);  if (segment < 0) {    return false;  }  mAdaptersSet.removeAdapter(tag);  mSegmentedPositionTranslator.invalidateSegment(segment);  notifyDataSetChanged();  return true;}  }
class C{  private void createNotification(final int messageResId,final int defaults){  final Intent parentIntent=new Intent(this,FeaturesActivity.class);  parentIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  final Intent targetIntent=new Intent(this,UARTActivity.class);  final Intent disconnect=new Intent(ACTION_DISCONNECT);  disconnect.putExtra(EXTRA_SOURCE,SOURCE_NOTIFICATION);  final PendingIntent disconnectAction=PendingIntent.getBroadcast(this,DISCONNECT_REQ,disconnect,PendingIntent.FLAG_UPDATE_CURRENT);  final PendingIntent pendingIntent=PendingIntent.getActivities(this,OPEN_ACTIVITY_REQ,new Intent[]{parentIntent,targetIntent},PendingIntent.FLAG_UPDATE_CURRENT);  final NotificationCompat.Builder builder=new NotificationCompat.Builder(this);  builder.setContentIntent(pendingIntent);  builder.setContentTitle(getString(R.string.app_name)).setContentText(getString(messageResId,getDeviceName()));  builder.setSmallIcon(R.drawable.ic_stat_notify_uart);  builder.setShowWhen(defaults != 0).setDefaults(defaults).setAutoCancel(true).setOngoing(true);  builder.addAction(new NotificationCompat.Action(R.drawable.ic_action_bluetooth,getString(R.string.uart_notification_action_disconnect),disconnectAction));  final Notification notification=builder.build();  final NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  nm.notify(NOTIFICATION_ID,notification);}  }
class C{  public static void zdemo7(int rows,int columns,boolean print){  System.out.println("\n\n");  System.out.println("now initializing... ");  final cern.jet.math.Functions F=cern.jet.math.Functions.functions;  DoubleMatrix2D A=cern.colt.matrix.DoubleFactory2D.dense.make(rows,columns);  A.assign(new cern.jet.random.engine.DRand());  DoubleMatrix2D B=A.copy();  double[] v1=A.viewColumn(0).toArray();  double[] v2=A.viewColumn(0).toArray();  System.out.print("now quick sorting... ");  cern.colt.Timer timer=new cern.colt.Timer().start();  quickSort.sort(A,0);  timer.stop().display();  System.out.print("now merge sorting... ");  timer.reset().start();  mergeSort.sort(A,0);  timer.stop().display();  System.out.print("now quick sorting with simple aggregation... ");  timer.reset().start();  quickSort.sort(A,v1);  timer.stop().display();  System.out.print("now merge sorting with simple aggregation... ");  timer.reset().start();  mergeSort.sort(A,v2);  timer.stop().display();}  }
class C{  public static int dayOfWeek(long day){  long[] remainder=new long[1];  floorDivide(day + Calendar.THURSDAY,7,remainder);  int dayOfWeek=(int)remainder[0];  dayOfWeek=(dayOfWeek == 0) ? 7 : dayOfWeek;  return dayOfWeek;}  }
class C{  public StreamResult(Writer writer){  setWriter(writer);}  }
class C{  @Override public void write(byte[] b,int start,int len) throws IOException {  for (  OutputStream stream : streams) {    stream.write(b,start,len);  }}  }
class C{  public static Predicates<String> contains(char character){  return new ContainsCharacter(character);}  }
class C{  public void unzipArchive(final String archive,final String outputDir) throws IOException {  unzipArchive(new File(archive),new File(outputDir));}  }
class C{  public PureLogWriter(int level,PrintStream logWriter,String connectionName){  this(level,new PrintWriter(logWriter,true),connectionName);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.023 -0400",hash_original_method="BAEC3D3F780421802E8DF98D1AC17676",hash_generated_method="FAF7E4B208F36343E29E7C8C6E878353") public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public MinimumSafeDistanceZones(String sidc){  super(sidc);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredAbstract: ");  result.append(declaredAbstract);  result.append(')');  return result.toString();}  }
class C{  private String pendingRequestsToString(){  if (this.pendingRequests == null) {    return "(null)";  }  StringBuffer sb=new StringBuffer();  Iterator it=this.pendingRequests.iterator();  while (it.hasNext()) {    Object req=it.next();    sb.append("[");    sb.append(req.toString());    sb.append("]");  }  return sb.toString();}  }
class C{  private QueryResponse queryWithAsserts(String... q) throws Exception {  TrackingShardHandlerFactory.RequestTrackingQueue trackingQueue=new TrackingShardHandlerFactory.RequestTrackingQueue();  TrackingShardHandlerFactory.setTrackingQueue(cluster,trackingQueue);  QueryResponse response=cluster.getSolrClient().query(COLLECTION,new SolrQuery("debug","track",q));  Map<String,List<TrackingShardHandlerFactory.ShardRequestAndParams>> requests=trackingQueue.getAllRequests();  int numRequests=getNumRequests(requests);  boolean distribSinglePass=false;  Set<String> fls=new HashSet<>();  Set<String> sortFields=new HashSet<>();  for (int i=0; i < q.length; i+=2) {    if (ShardParams.DISTRIB_SINGLE_PASS.equals(q[i].toString()) && Boolean.parseBoolean(q[i + 1].toString())) {      assertTrue("distrib.singlePass=true made more requests than number of shards",numRequests == sliceCount);      distribSinglePass=true;    }    if (CommonParams.FL.equals(q[i].toString())) {      fls.addAll(StrUtils.splitSmart(q[i + 1].toString(),','));    }    if (CommonParams.SORT.equals(q[i].toString())) {      String val=q[i + 1].toString().trim();      sortFields.addAll(StrUtils.splitSmart(StrUtils.splitSmart(val,' ').get(0),','));    }  }  Set<String> idScoreFields=new HashSet<>(2);  idScoreFields.add("id");  if (fls.contains("score") || sortFields.contains("score"))   idScoreFields.add("score");  if (idScoreFields.containsAll(fls) && !fls.isEmpty()) {    distribSinglePass=true;  }  if (distribSinglePass) {    Map<String,Object> debugMap=response.getDebugMap();    SimpleOrderedMap<Object> track=(SimpleOrderedMap<Object>)debugMap.get("track");    assertNotNull(track);    assertNotNull(track.get("EXECUTE_QUERY"));    assertNull("A single pass request should not have a GET_FIELDS phase",track.get("GET_FIELDS"));    Set<String> reqAndIdScoreFields=new HashSet<>(fls);    reqAndIdScoreFields.addAll(idScoreFields);    assertParamsEquals(trackingQueue,COLLECTION,SHARD1,CommonParams.FL,ShardRequest.PURPOSE_GET_TOP_IDS,reqAndIdScoreFields.toArray(new String[reqAndIdScoreFields.size()]));    assertParamsEquals(trackingQueue,COLLECTION,SHARD2,CommonParams.FL,ShardRequest.PURPOSE_GET_TOP_IDS,reqAndIdScoreFields.toArray(new String[reqAndIdScoreFields.size()]));  } else {    assertTrue("distrib.singlePass=false made more requests than 2 * number of shards." + " Actual: " + numRequests + " but expected <= "+ sliceCount * 2,numRequests <= sliceCount * 2);    assertParamsEquals(trackingQueue,COLLECTION,SHARD1,CommonParams.FL,ShardRequest.PURPOSE_GET_TOP_IDS,idScoreFields.toArray(new String[idScoreFields.size()]));    assertParamsEquals(trackingQueue,COLLECTION,SHARD2,CommonParams.FL,ShardRequest.PURPOSE_GET_TOP_IDS,idScoreFields.toArray(new String[idScoreFields.size()]));    assertParamsEquals(trackingQueue,COLLECTION,SHARD1,CommonParams.FL,ShardRequest.PURPOSE_GET_FIELDS,fls.toArray(new String[fls.size()]));    assertParamsEquals(trackingQueue,COLLECTION,SHARD2,CommonParams.FL,ShardRequest.PURPOSE_GET_FIELDS,fls.toArray(new String[fls.size()]));  }  return response;}  }
class C{  @RequestProcessing(value="/admin/user/{userId}/abuse-point",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,AdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void abusePoint(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userId) throws Exception {  final String pointStr=request.getParameter(Common.POINT);  try {    final int point=Integer.valueOf(pointStr);    final JSONObject user=userQueryService.getUser(userId);    final int currentPoint=user.optInt(UserExt.USER_POINT);    if (currentPoint - point < 0) {      final AbstractFreeMarkerRenderer renderer=new SkinRenderer();      context.setRenderer(renderer);      renderer.setTemplateName("admin/error.ftl");      final Map<String,Object> dataModel=renderer.getDataModel();      dataModel.put(Keys.MSG,langPropsService.get("insufficientBalanceLabel"));      filler.fillHeaderAndFooter(request,response,dataModel);      return;    }    final String memo=request.getParameter(Common.MEMO);    final String transferId=pointtransferMgmtService.transfer(userId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_ABUSE_DEDUCT,point,memo);    final JSONObject notification=new JSONObject();    notification.put(Notification.NOTIFICATION_USER_ID,userId);    notification.put(Notification.NOTIFICATION_DATA_ID,transferId);    notificationMgmtService.addAbusePointDeductNotification(notification);  } catch (  final Exception e) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,e.getMessage());    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  response.sendRedirect(Latkes.getServePath() + "/admin/user/" + userId);}  }
class C{  private void writeIndexBlock(){  writeIndex(_indexAddress,_indexBuffer,0,_indexBuffer.length);}  }
class C{  public SpannableBuilder span(Object resource,int start,int end,int flag){  if (start >= 0 && end <= sb.length() && start <= end) {    sb.setSpan(resource,start,end,flag);  } else {    Log.d("StringUtil","Check indexes passed to span");  }  return this;}  }
class C{  private boolean isEmpty(TableReference ref) throws IOException {  Bigquery.Tabledata.List list=client.tabledata().list(ref.getProjectId(),ref.getDatasetId(),ref.getTableId());  list.setMaxResults(1L);  TableDataList dataList=list.execute();  return dataList.getRows() == null || dataList.getRows().isEmpty();}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final Quantity quantity){  serializer.writeLong(label,quantity.getRaw());}  }
class C{  void incrementRebuildCount(){  getPreferenceStore().setDefault(REBUILD_COUNT_KEY,getRebuildCount() + 1);}  }
class C{  Collection<AggVar> aggregates(boolean pack){  if (pack) {    return Sets.intersection(Sets.newHashSet(aggregate),Sets.newHashSet(outputs));  } else {    return aggregate;  }}  }
class C{  public static Version verifyAndCreate(String stringRepresentation) throws InvalidVersionException {  Version version=new Version();  if (StringUtils.isEmpty(stringRepresentation)) {    throw new InvalidVersionException(VersioningErrorCodeEnum.VERSION_INVALID,null);  }  String[] splitByDot=StringUtils.split(stringRepresentation,".");switch (splitByDot.length) {case 3:    version.major=getIntFromString(splitByDot[0]);  version.minor=getIntFromString(splitByDot[1]);version.buildno=getIntFromString(splitByDot[2]);break;case 4:version.major=getIntFromString(splitByDot[0]);version.minor=getIntFromString(splitByDot[1]);version.micro=getIntFromString(splitByDot[2]);version.buildno=getIntFromString(splitByDot[3]);break;default :throw new InvalidVersionException("The version " + stringRepresentation + " does not follow the format major.minor[.micro].build",VersioningErrorCodeEnum.VERSION_INVALID,null);}return version;}  }
class C{  double percentToAproxX(Rectangle2D.Double area){  return percentX * area.getWidth();}  }
class C{  private final boolean isBluetoothPersistedStateOn(){  return Settings.Global.getInt(mContentResolver,Settings.Global.BLUETOOTH_ON,0) != BLUETOOTH_OFF;}  }
class C{  public static boolean hasMimeType(String mimeType){  if (TextUtils.isEmpty(mimeType)) {    return false;  }  return mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  private static int determineConsecutiveBinaryCount(CharSequence msg,byte[] bytes,int startpos) throws WriterException {  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    int textCount=0;    while (textCount < 5 && isText(ch)) {      textCount++;      int i=idx + textCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (textCount >= 5) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (bytes[idx] == 63 && ch != '?') {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="DocumentTmp";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("SessionId",sessionId);  bdr.addSimpleElement("Guid",guid);  bdr.addSimpleElement("Timestamp",timestamp.toString());  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  void loadEpisodesFromDatabase(MVMap<UUID,String> episodesMap,ObjectMapper objectMapper){  ObjectReader episodeObjectReader=objectMapper.readerFor(TvShowEpisode.class);  int episodeCount=0;  for (  UUID uuid : episodesMap.keyList()) {    try {      episodeCount++;      TvShowEpisode episode=episodeObjectReader.readValue(episodesMap.get(uuid));      episode.setDbId(uuid);      for (      TvShow tvShow : tvShowList) {        if (tvShow.getDbId().equals(episode.getTvShowDbId())) {          episode.setTvShow(tvShow);          tvShow.addEpisode(episode);          break;        }      }    } catch (    Exception e) {      LOGGER.warn("problem decoding episode json string: ",e);    }  }  LOGGER.info("found " + episodeCount + " episodes in database");}  }
class C{  public javax.crypto.SecretKey engineLookupAndResolveSecretKey(Element element,String baseURI,StorageResolver storage){  return null;}  }
class C{  private void remeasure(){  measure(MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(getHeight(),MeasureSpec.EXACTLY));}  }
class C{  void dvn(Method m){  Deque<Block> code=dfs(m.entry.to);  Map<Block,Block> idom=idoms(code,preds(code));  boolean changed;  do {    changed=false;    for (    Block b : code) {      for (      Expr e : b) {        Expr a=dvn_find(e,b,idom);        if (a != null) {          makeCopy(e,a);          changed=true;        }      }    }    if (changed)     dce(m);  } while (changed);}  }
class C{  public CuboidRegion(Match match,Cuboid cuboid){  super(new RegionBounds(match,cuboid));  this.cuboid=cuboid;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:46.859 -0500",hash_original_method="6FAB1FA940C67F7A3A04C20DF403CDD7",hash_generated_method="3C00073F57D54F6B181CA8CC2696B60B") private void measureChild(View child,LayoutParams params,int myWidth,int myHeight){  int childWidthMeasureSpec=getChildMeasureSpec(params.mLeft,params.mRight,params.width,params.leftMargin,params.rightMargin,mPaddingLeft,mPaddingRight,myWidth);  int childHeightMeasureSpec=getChildMeasureSpec(params.mTop,params.mBottom,params.height,params.topMargin,params.bottomMargin,mPaddingTop,mPaddingBottom,myHeight);  child.measure(childWidthMeasureSpec,childHeightMeasureSpec);}  }
class C{  public static AttributeSet asAttributeSet(XmlPullParser parser){  return (parser instanceof AttributeSet) ? (AttributeSet)parser : new XmlPullAttributes(parser);}  }
class C{  public NumericEntityEscaper(){  this(0,Integer.MAX_VALUE,true);}  }
class C{  public void undo(){  File file;  ArrayList data;  Instances inst;  ObjectInputStream ois;  if (m_Undo.size() == 0)   return;  file=m_Undo.get(m_Undo.size() - 1);  m_Undo.remove(m_Undo.size() - 1);  try {    ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)));    data=(ArrayList)ois.readObject();    m_CurrentFile=(File)data.get(0);    inst=(Instances)data.get(1);    notifyTabsDataChanged(null,inst);  } catch (  Exception e) {    handleException(null,"Failed to load undo data from '" + file + "':",e);    JOptionPane.showMessageDialog(this,"Failed to load undo data from '" + file + "':\n"+ e,"Undo",JOptionPane.ERROR_MESSAGE);  }  updateMenu();}  }
class C{  public AccountAttribute asAccountAttribute(PersonIdent ident){  AccountAttribute who=new AccountAttribute();  who.name=ident.getName();  who.email=ident.getEmailAddress();  return who;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.371 -0500",hash_original_method="8E0188E751AB8076E783C3AD5EFABF59",hash_generated_method="D119BB75F3BE6BD72E10D84892164EBE") public static String extractNetworkPortionAlt(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int len=phoneNumber.length();  StringBuilder ret=new StringBuilder(len);  boolean haveSeenPlus=false;  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    if (c == '+') {      if (haveSeenPlus) {        continue;      }      haveSeenPlus=true;    }    if (isDialable(c)) {      ret.append(c);    } else     if (isStartsPostDial(c)) {      break;    }  }  return ret.toString();}  }
class C{  public void fatal(Object message,Throwable exception){  log(Level.SEVERE,String.valueOf(message),exception);}  }
class C{  public Builder notificationTag(String value){  notificationParams.put("tag",value);  return this;}  }
class C{  public BigDecimal optBigDecimal(int index,BigDecimal defaultValue){  try {    return this.getBigDecimal(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public GeoConcavePolygon(final PlanetModel planetModel,final List<GeoPoint> pointList,final List<GeoPolygon> holes){  super(planetModel);  this.points=pointList;  this.holes=holes;  this.isInternalEdges=new BitSet();  done(false);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int numBuckets=s.readInt();  table=new Entry[numBuckets];  init();  int size=s.readInt();  for (int i=0; i < size; i++) {    Object key=(Object)s.readObject();    int value=(int)s.readInt();    putForCreate(key,value);  }}  }
class C{  @Override public void clear(){  super.clear();  long[] keys=_set;  int[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  public boolean canUseExtendedOpcodes(){  return targetApiLevel >= DexFormat.API_CURRENT;}  }
class C{  private Object readLiteral() throws JSONException {  String literal=nextToInternal("{}[]/\\:,=;# \t\f");  if (literal.length() == 0) {    throw syntaxError("Expected literal value");  } else   if ("null".equalsIgnoreCase(literal)) {    return JSONObject.NULL;  } else   if ("true".equalsIgnoreCase(literal)) {    return Boolean.TRUE;  } else   if ("false".equalsIgnoreCase(literal)) {    return Boolean.FALSE;  }  if (literal.indexOf('.') == -1) {    int base=10;    String number=literal;    if (number.startsWith("0x") || number.startsWith("0X")) {      number=number.substring(2);      base=16;    } else     if (number.startsWith("0") && number.length() > 1) {      number=number.substring(1);      base=8;    }    try {      long longValue=Long.parseLong(number,base);      if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {        return (int)longValue;      } else {        return longValue;      }    } catch (    NumberFormatException e) {    }  }  try {    return Double.valueOf(literal);  } catch (  NumberFormatException ignored) {  }  return new String(literal);}  }
class C{  public byte[] toWire(){  DNSOutput out=new DNSOutput();  toWire(out);  size=out.current();  return out.toByteArray();}  }
class C{  @Override public String toString(){  return "ID:" + id + ":"+ bitset.cardinality()+ ":"+ bitSetSize;}  }
class C{  public TriggerProcessStatusException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public Operand(final COperandTree operand){  m_operand=Preconditions.checkNotNull(operand,"Error: Operand argument can't be null");  m_root=clone(operand.getRootNode(),null);}  }
class C{  public boolean isFirst() throws SQLException {  int saveCursorPos=cursorPos;  int saveAbsoluteCursorPos=absolutePos;  internalFirst();  if (cursorPos == saveCursorPos) {    return true;  } else {    cursorPos=saveCursorPos;    absolutePos=saveAbsoluteCursorPos;    return false;  }}  }
class C{  @Field(16) public Pointer<Short> piVal(){  return this.io.getPointerField(this,16);}  }
class C{  public void clear(){  selected.setAlpha(0);  unselected.setAlpha(1);}  }
class C{  public HashMap<Unit,IntegerMap<RepairRule>> show(final PlayerID id,final Collection<PlayerID> allowedPlayersToRepair,final JFrame parent,final GameData data,final boolean bid,final HashMap<Unit,IntegerMap<RepairRule>> initialPurchase){  if (!(parent == m_owner)) {    m_dialog=null;  }  if (m_dialog == null) {    initDialog(parent);  }  this.m_bid=bid;  this.m_allowedPlayersToRepair=allowedPlayersToRepair;  this.m_data=data;  this.initRules(id,allowedPlayersToRepair,data,initialPurchase);  this.initLayout();  this.calculateLimits();  m_dialog.pack();  m_dialog.setLocationRelativeTo(parent);  SwingUtilities.invokeLater(null);  m_dialog.setVisible(true);  m_dialog.dispose();  return getProduction();}  }
class C{  public void testMissingEncoder() throws IOException {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Configuration Error: missing parameter 'encoder'"));}  }
class C{  protected void redefine(int nodetype,String namespace,String localName){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=nodetype + namespace.hashCode() + localName.hashCode();}  }
class C{  protected void showToast(String msg){  Toast.makeText(getApplicationContext(),msg,Toast.LENGTH_SHORT).show();}  }
class C{  public double pdf(double x){  if (x <= 0.0)   throw new IllegalArgumentException();  double logGamma=Fun.logGamma(freedom / 2.0);  return Math.exp((freedom / 2.0 - 1.0) * Math.log(x / 2.0) - x / 2.0 - logGamma) / 2.0;}  }
class C{  private void readComponentConfiguration(ComponentContext context){  Dictionary<?,?> properties=context.getProperties();  boolean packetOutOnlyEnabled=isPropertyEnabled(properties,"packetOutOnly");  if (packetOutOnly != packetOutOnlyEnabled) {    packetOutOnly=packetOutOnlyEnabled;    log.info("Configured. Packet-out only forwarding is {}",packetOutOnly ? "enabled" : "disabled");  }  boolean packetOutOfppTableEnabled=isPropertyEnabled(properties,"packetOutOfppTable");  if (packetOutOfppTable != packetOutOfppTableEnabled) {    packetOutOfppTable=packetOutOfppTableEnabled;    log.info("Configured. Forwarding using OFPP_TABLE port is {}",packetOutOfppTable ? "enabled" : "disabled");  }  boolean ipv6ForwardingEnabled=isPropertyEnabled(properties,"ipv6Forwarding");  if (ipv6Forwarding != ipv6ForwardingEnabled) {    ipv6Forwarding=ipv6ForwardingEnabled;    log.info("Configured. IPv6 forwarding is {}",ipv6Forwarding ? "enabled" : "disabled");  }  boolean matchDstMacOnlyEnabled=isPropertyEnabled(properties,"matchDstMacOnly");  if (matchDstMacOnly != matchDstMacOnlyEnabled) {    matchDstMacOnly=matchDstMacOnlyEnabled;    log.info("Configured. Match Dst MAC Only is {}",matchDstMacOnly ? "enabled" : "disabled");  }  boolean matchVlanIdEnabled=isPropertyEnabled(properties,"matchVlanId");  if (matchVlanId != matchVlanIdEnabled) {    matchVlanId=matchVlanIdEnabled;    log.info("Configured. Matching Vlan ID is {}",matchVlanId ? "enabled" : "disabled");  }  boolean matchIpv4AddressEnabled=isPropertyEnabled(properties,"matchIpv4Address");  if (matchIpv4Address != matchIpv4AddressEnabled) {    matchIpv4Address=matchIpv4AddressEnabled;    log.info("Configured. Matching IPv4 Addresses is {}",matchIpv4Address ? "enabled" : "disabled");  }  boolean matchIpv4DscpEnabled=isPropertyEnabled(properties,"matchIpv4Dscp");  if (matchIpv4Dscp != matchIpv4DscpEnabled) {    matchIpv4Dscp=matchIpv4DscpEnabled;    log.info("Configured. Matching IPv4 DSCP and ECN is {}",matchIpv4Dscp ? "enabled" : "disabled");  }  boolean matchIpv6AddressEnabled=isPropertyEnabled(properties,"matchIpv6Address");  if (matchIpv6Address != matchIpv6AddressEnabled) {    matchIpv6Address=matchIpv6AddressEnabled;    log.info("Configured. Matching IPv6 Addresses is {}",matchIpv6Address ? "enabled" : "disabled");  }  boolean matchIpv6FlowLabelEnabled=isPropertyEnabled(properties,"matchIpv6FlowLabel");  if (matchIpv6FlowLabel != matchIpv6FlowLabelEnabled) {    matchIpv6FlowLabel=matchIpv6FlowLabelEnabled;    log.info("Configured. Matching IPv6 FlowLabel is {}",matchIpv6FlowLabel ? "enabled" : "disabled");  }  boolean matchTcpUdpPortsEnabled=isPropertyEnabled(properties,"matchTcpUdpPorts");  if (matchTcpUdpPorts != matchTcpUdpPortsEnabled) {    matchTcpUdpPorts=matchTcpUdpPortsEnabled;    log.info("Configured. Matching TCP/UDP fields is {}",matchTcpUdpPorts ? "enabled" : "disabled");  }  boolean matchIcmpFieldsEnabled=isPropertyEnabled(properties,"matchIcmpFields");  if (matchIcmpFields != matchIcmpFieldsEnabled) {    matchIcmpFields=matchIcmpFieldsEnabled;    log.info("Configured. Matching ICMP (v4 and v6) fields is {}",matchIcmpFields ? "enabled" : "disabled");  }  Integer flowTimeoutConfigured=getIntegerProperty(properties,"flowTimeout");  if (flowTimeoutConfigured == null) {    log.info("Flow Timeout is not configured, default value is {}",flowTimeout);  } else {    flowTimeout=flowTimeoutConfigured;    log.info("Configured. Flow Timeout is configured to {}",flowTimeout," seconds");  }  Integer flowPriorityConfigured=getIntegerProperty(properties,"flowPriority");  if (flowPriorityConfigured == null) {    log.info("Flow Priority is not configured, default value is {}",flowPriority);  } else {    flowPriority=flowPriorityConfigured;    log.info("Configured. Flow Priority is configured to {}",flowPriority);  }}  }
class C{  public boolean isTitleVisible(){  return null == titleVisible ? _titleVisible : titleVisible.get();}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) / 2) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  @Override public void onActivityResumed(Activity activity){synchronized (NfcActivityManager.this) {    NfcActivityState state=findActivityState(activity);    if (DBG)     Log.d(TAG,"onResume() for " + activity + " "+ state);    if (state == null)     return;    state.resumed=true;  }  requestNfcServiceCallback();}  }
class C{  @Override public int hashCode(){  return hash;}  }
class C{  private Map<String,Object> extractValues(Object object){  final Map<String,Object> result=new HashMap<>();  final BeanWrapper wrapper=new BeanWrapperImpl(object);  for (  PropertyDescriptor descriptor : wrapper.getPropertyDescriptors()) {    if (descriptor.getReadMethod() == null || descriptor.getWriteMethod() == null) {      continue;    }    final String propertyName=descriptor.getName();    final Object value=PropertyUtils.getPropertyValue(object,propertyName);    if (value == null) {      result.put(propertyName,null);      continue;    }    if (isIntractable(descriptor,value)) {      result.put(propertyName,value);      continue;    }    final Map<String,Object> children=extractValues(value);    for (    Map.Entry<String,Object> entry : children.entrySet()) {      result.put(propertyName + "." + entry.getKey(),entry.getValue());    }  }  return result;}  }
class C{  public int size(){  if (tail == null) {    return 1;  }  return 1 + tail.size();}  }
class C{  public void readItem(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SherlockMenuItem);  itemId=a.getResourceId(R.styleable.SherlockMenuItem_android_id,defaultItemId);  final int category=a.getInt(R.styleable.SherlockMenuItem_android_menuCategory,groupCategory);  final int order=a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory,groupOrder);  itemCategoryOrder=(category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);  itemTitle=a.getText(R.styleable.SherlockMenuItem_android_title);  itemTitleCondensed=a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);  itemIconResId=a.getResourceId(R.styleable.SherlockMenuItem_android_icon,0);  itemAlphabeticShortcut=getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));  itemNumericShortcut=getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));  if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {    itemCheckable=a.getBoolean(R.styleable.SherlockMenuItem_android_checkable,false) ? 1 : 0;  } else {    itemCheckable=groupCheckable;  }  itemChecked=a.getBoolean(R.styleable.SherlockMenuItem_android_checked,defaultItemChecked);  itemVisible=a.getBoolean(R.styleable.SherlockMenuItem_android_visible,groupVisible);  itemEnabled=a.getBoolean(R.styleable.SherlockMenuItem_android_enabled,groupEnabled);  TypedValue value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_showAsAction,value);  itemShowAsAction=value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;  itemListenerMethodName=a.getString(R.styleable.SherlockMenuItem_android_onClick);  itemActionViewLayout=a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout,0);  value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass,value);  itemActionViewClassName=value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;  value=new TypedValue();  a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass,value);  itemActionProviderClassName=value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;  final boolean hasActionProvider=itemActionProviderClassName != null;  if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {    itemActionProvider=newInstance(itemActionProviderClassName,ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,mActionProviderConstructorArguments);  } else {    if (hasActionProvider) {      Log.w(LOG_TAG,"Ignoring attribute 'actionProviderClass'." + " Action view already specified.");    }    itemActionProvider=null;  }  a.recycle();  itemAdded=false;}  }
class C{  public Bitmap makeIcon(String text){  if (mTextView != null) {    mTextView.setText(text);  }  return makeIcon();}  }
class C{  public static boolean isKeyEntry(String alias,KeyStore keyStore) throws KeyStoreException {  return keyStore.isKeyEntry(alias) && (keyStore.getCertificateChain(alias) == null || keyStore.getCertificateChain(alias).length == 0);}  }
class C{  public static Date parseDate(String s) throws ParseException {  return fmtThreadLocal.get().parse(s);}  }
class C{  private final Buffer reuseAndReadPacket(Buffer reuse) throws SQLException {  return reuseAndReadPacket(reuse,-1);}  }
class C{  public static CharSequence stripIllegalOperators(CharSequence s){  String temp=CONSECUTIVE_OP_PATTERN.matcher(s).replaceAll(" ");  return DANGLING_OP_PATTERN.matcher(temp).replaceAll("");}  }
class C{  static String pidOf(String lookFor){  String line;  String pid=null;  boolean applicationIsOk=false;  Process proc=null;  try {    proc=Runtime.getRuntime().exec("ps");  } catch (  IOException e) {    e.printStackTrace();  }  if (proc != null) {    InputStream stream=proc.getInputStream();    BufferedReader reader=new BufferedReader(new InputStreamReader(stream));    try {      while ((line=reader.readLine()) != null) {        Pattern pattern=Pattern.compile(lookFor);        Matcher matcher=pattern.matcher(line);        if (matcher.find()) {          if (Cfg.DEBUG) {            Check.log(TAG + " (pidOf): find=" + lookFor+ "in:\n"+ line);          }          String[] splited=line.split("\\s+");          if (splited.length > 3) {            int p=-1;            try {              p=Integer.parseInt(splited[1]);            } catch (            NumberFormatException nf) {              if (Cfg.DEBUG) {                Check.log(TAG + " (pidOf): failure parsing:" + splited[1]);              }            }            if (p > 0) {              pid=new String(splited[1]);            }          }          break;        }      }    } catch (    IOException e) {      e.printStackTrace();    }  }  return pid;}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  public ScheduleTimeEvent createScheduleTimeEvent(){  ScheduleTimeEventImpl scheduleTimeEvent=new ScheduleTimeEventImpl();  return scheduleTimeEvent;}  }
class C{  public static StyleChangeRecord move(double x,double y){  x*=TWIPS_PER_PIXEL;  y*=TWIPS_PER_PIXEL;  int moveX=(int)x;  int moveY=(int)y;  StyleChangeRecord scr=new StyleChangeRecord();  scr.setMove(moveX,moveY);  return scr;}  }
class C{  public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){  if (org == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);}  }
class C{  public Iterator<Capability> capabilities(){  return m_Capabilities.iterator();}  }
class C{  public AnimSVGLengthList(){  super(SVGOMAnimatedLengthList.this.direction);  itemList=new ArrayList(1);}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  attrMap=new HashMap();  int count=s.readInt();  Attribute attr;  for (int i=0; i < count; i++) {    attr=(Attribute)s.readObject();    add(attr);  }}  }
class C{  private void addEstimate(EstimateMapKey key,LoadEstimateTask task){  LoadEstimateTask oldTask=null;  oldTask=(LoadEstimateTask)this.estimateMap.put(key,task);  if (oldTask != null) {    oldTask.cancel();  }}  }
class C{  public List<Map<String,String>> listCIFSShares(String shareName){  FlexFileShare share=new FlexFileShare(server.getNaServer(),null);  return share.listCIFSInfo(shareName);}  }
class C{  protected String extractImageUrl(Document doc){  String imageUrl=SHelper.replaceSpaces(doc.select("head meta[property=og:image]").attr("content"));  if (imageUrl.isEmpty()) {    imageUrl=SHelper.replaceSpaces(doc.select("head meta[name=twitter:image]").attr("content"));    if (imageUrl.isEmpty()) {      imageUrl=SHelper.replaceSpaces(doc.select("link[rel=image_src]").attr("href"));      if (imageUrl.isEmpty()) {        imageUrl=SHelper.replaceSpaces(doc.select("head meta[name=thumbnail]").attr("content"));      }    }  }  System.out.println(" >> imageUrl : [" + imageUrl + "]");  return imageUrl;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public Request(String template,ClientId client,ServiceId service,String id,List<RequestTag> content,boolean async){  this.template=template;  this.client=client;  this.service=service;  this.id=id;  this.content=content;  this.async=async;}  }
class C{  public static Object[][] like2DArray(final Class... clazz){  final int totalItems=clazz.length;  final Object[][] objects=new Object[totalItems][1];  for (int i=0; i < totalItems; i++) {    objects[i][0]=clazz[i];  }  return objects;}  }
class C{  public static void main(String[] args){  new DBDifference().showDifference();}  }
class C{  static int nativeLoad(String libName,ClassLoader loader){  return DynamicLibrary.load(libName);}  }
class C{  public Channel(String host,int port,int timeout) throws Exception {  this.host=host;  this.port=port;  this.timeout=timeout;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("InvoiceServlet.init");}  }
class C{  public void remove(final AbstractInsnNode insn){  --size;  AbstractInsnNode next=insn.next;  AbstractInsnNode prev=insn.prev;  if (next == null) {    if (prev == null) {      first=null;      last=null;    } else {      prev.next=null;      last=prev;    }  } else {    if (prev == null) {      first=next;      next.prev=null;    } else {      prev.next=next;      next.prev=prev;    }  }  cache=null;  insn.index=-1;  insn.prev=null;  insn.next=null;}  }
class C{  private void runChecksAndRestart(){  checkExpired();  checkWarnings();  checkRemoved();  checkRemovedEarnings();  TurnNotifier.get().notifyInSeconds(CHECKING_INTERVAL,this);}  }
class C{  public ContentAssistHistory(){  this(DEFAULT_TRACKED_LHS,DEFAULT_TRACKED_RHS);}  }
class C{  public static byte[] decodeBase64(final String base64String){  return new Base64().decode(base64String);}  }
class C{  public int viewToModel(JTextComponent a,Point b,Position.Bias[] c){  int returnValue=((TextUI)(uis.elementAt(0))).viewToModel(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).viewToModel(a,b,c);  }  return returnValue;}  }
class C{  public static boolean beforeNow(long microsUtc){  return getSystemNowMicrosUtc() >= microsUtc;}  }
class C{  public RefrigeratedCargoBay(double space,int doors,int bayNumber){  totalSpace=space * 0.87;  weight=space;  currentSpace=space * 0.87;  this.doors=doors;  this.bayNumber=bayNumber;}  }
class C{  @Override public String generateToolTip(XYDataset data,int series,int item){  String xStr, yStr;  if (data instanceof YisSymbolic) {    yStr=((YisSymbolic)data).getYSymbolicValue(series,item);  } else {    double y=data.getYValue(series,item);    yStr=Double.toString(round(y,2));  }  if (data instanceof XisSymbolic) {    xStr=((XisSymbolic)data).getXSymbolicValue(series,item);  } else   if (data instanceof TimeSeriesCollection) {    RegularTimePeriod p=((TimeSeriesCollection)data).getSeries(series).getTimePeriod(item);    xStr=p.toString();  } else {    double x=data.getXValue(series,item);    xStr=Double.toString(round(x,2));  }  return "X: " + xStr + ", Y: "+ yStr;}  }
class C{  public void ForkCurrentBaggageIfNecessary(JoinPoint.StaticPart jp){  if (baggage == null) {    XTraceReport.entering(jp);    baggage=Baggage.fork();    XTraceReport.left(jp);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.284 -0500",hash_original_method="0FDDC4550D32FE0A8E48193D044787BB",hash_generated_method="B845E00C9CBC6D2C4107804420C92A12") public UserAgentHeader createUserAgentHeader(List product) throws ParseException {  if (product == null)   throw new NullPointerException("null user agent");  UserAgent userAgent=new UserAgent();  userAgent.setProduct(product);  return userAgent;}  }
class C{  public static IStorage resolveFileOnPackageFragment(String fileName,IPackageFragment pckgFragment) throws JavaModelException {  boolean isJavaFile=JavaCore.isJavaLikeFileName(fileName);  boolean isClassFile=ResourceUtils.endsWith(fileName,".class");  Object[] nonJavaResources=pckgFragment.getNonJavaResources();  for (  Object nonJavaResource : nonJavaResources) {    if (nonJavaResource instanceof IFile) {      IFile file=(IFile)nonJavaResource;      String resFileName=file.getName();      if (ResourceUtils.areFilenamesEqual(resFileName,fileName)) {        if (!JavaCore.isJavaLikeFileName(resFileName)) {          return file;        } else {          return null;        }      }    }    if (nonJavaResource instanceof IJarEntryResource) {      IJarEntryResource jarEntry=(IJarEntryResource)nonJavaResource;      if (jarEntry.isFile() && ResourceUtils.areFilenamesEqual(jarEntry.getName(),fileName)) {        return jarEntry;      }    }  }  if (isJavaFile) {    ICompilationUnit cu=pckgFragment.getCompilationUnit(fileName);    if (cu.exists()) {      return (IFile)cu.getCorrespondingResource();    }  }  if (isClassFile) {    IClassFile cf=pckgFragment.getClassFile(fileName);    if (cf.exists()) {      return (IFile)cf.getCorrespondingResource();    }  }  return null;}  }
class C{  private void initialize(){  this.levelMapper=new HashMap<LogLevel,Integer>();  this.levelMapper.put(LogLevel.DEBUG,new Integer(Project.MSG_DEBUG));  this.levelMapper.put(LogLevel.WARN,new Integer(Project.MSG_WARN));  this.levelMapper.put(LogLevel.INFO,new Integer(Project.MSG_INFO));}  }
class C{  protected void messageEvent(String selection){  m_notifier.notifyEvent(new MessageEvent(selection),new Vector<Object>());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public LoadSignFromHallOfFameAction(Sign sign,String introduction,String fametype,int max,boolean ascending){  this.sign=sign;  this.introduction=checkNotNull(introduction);  this.fametype=checkNotNull(fametype);  this.max=max;  this.ascending=ascending;}  }
class C{  public static void isInRange(String member,long inputValue,Long minValue,Long maxValue) throws ValidationException {  if ((minValue != null && inputValue < minValue.longValue()) || (maxValue != null && inputValue > maxValue.longValue())) {    minValue=(minValue != null) ? minValue : Long.valueOf(Long.MIN_VALUE);    maxValue=(maxValue != null) ? maxValue : Long.valueOf(Long.MAX_VALUE);    ValidationException vf=new ValidationException(ReasonEnum.VALUE_NOT_IN_RANGE,member,new Object[]{Long.valueOf(inputValue),minValue,maxValue});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public boolean nonEmpty(){  return count != 0;}  }
class C{  public Lattice<String> stringLattice(){  assert isLinearChain();  return Lattice.createStringLatticeFromString(source(),config);}  }
class C{  public void changeAnimationDirection(@AnimationDirection int animationDirection){  setAnimationDirection(animationDirection);}  }
class C{  public void receiveMsrpResponse(int code,String txId,Hashtable<String,String> headers){  mIsEstablished=true;  if (sLogger.isActivated()) {    sLogger.info("Response received (code=" + code + ", transaction="+ txId+ ")");  }  if (mFailureReportOption) {    if (!mCancelTransfer && mProgress.size() > 0) {      mMsrpEventListener.msrpTransferProgress(mProgress.get(0),mTotalSize);      mProgress.remove(0);    }  }  if (mRequestTransaction != null) {    mRequestTransaction.notifyResponse(code,headers);  }  if (mMsrpTransaction != null) {    mMsrpTransaction.handleResponse();  }  if (code != 200) {    String cpimMsgId=null;    TypeMsrpChunk typeMsrpChunk=TypeMsrpChunk.Unknown;    MsrpTransactionInfo msrpTransactionInfo=getMsrpTransactionInfo(txId);    if (msrpTransactionInfo != null) {      cpimMsgId=msrpTransactionInfo.mCpimMsgId;      typeMsrpChunk=msrpTransactionInfo.mTypeMsrpChunk;    }    mMsrpEventListener.msrpTransferError(cpimMsgId,"error response " + code,typeMsrpChunk);    removeMsrpTransactionInfo(txId);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(60);  builder.append("SparseGraph: ");  builder.append(String.valueOf(vertices.size()));  builder.append(" vertices, ");  builder.append(String.valueOf(edges.size()));  builder.append(" edges");  return builder.toString();}  }
class C{  public void loadData(Table t,String query,String keyField){  loadData(t,query,keyField,null,null);}  }
class C{  public static String encodeBytes(byte[] source){  return encodeBytes(source,0,source.length,NO_OPTIONS);}  }
class C{  private static String binRangeString(double[] cutPoints,int j){  assert cutPoints != null;  int n=cutPoints.length;  assert 0 <= j && j <= n;  return j == 0 ? "" + "(" + "-inf"+ "-" + Utils.doubleToString(cutPoints[0],6) + "]" : j == n ? "" + "(" + Utils.doubleToString(cutPoints[n - 1],6) + "-"+ "inf"+ ")" : "" + "(" + Utils.doubleToString(cutPoints[j - 1],6) + "-"+ Utils.doubleToString(cutPoints[j],6)+ "]";}  }
class C{  public TimeInstant(final int time){  if (time < 0) {    throw new IllegalArgumentException("time must be non-negative");  }  this.time=time;}  }
class C{  public synchronized void removeMeta(Session session,int id){  if (id > 0 && !starting) {    SearchRow r=meta.getTemplateSimpleRow(false);    r.setValue(0,ValueInt.get(id));    boolean wasLocked=lockMeta(session);    Cursor cursor=metaIdIndex.find(session,r,r);    if (cursor.next()) {      if (SysProperties.CHECK) {        if (lockMode != Constants.LOCK_MODE_OFF && !wasLocked) {          throw DbException.throwInternalError();        }      }      Row found=cursor.get();      meta.removeRow(session,found);      if (isMultiVersion()) {        session.log(meta,UndoLogRecord.DELETE,found);      }      if (SysProperties.CHECK) {        checkMetaFree(session,id);      }    } else     if (!wasLocked) {      meta.unlock(session);      session.unlock(meta);    }    objectIds.clear(id);  }}  }
class C{  static <T>T[] newArray(T[] reference,int length){  Class<?> type=reference.getClass().getComponentType();  @SuppressWarnings("unchecked") T[] result=(T[])Array.newInstance(type,length);  return result;}  }
class C{  public boolean isHipEstimator(){  return hipEstimator;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:45.052 -0500",hash_original_method="CCD3032C3525D921C0B3FD28370332A3",hash_generated_method="BFC6A709237B3892C610C764284EEBC1") public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  @Override public String fillSlots(Assignment fillers){  fillers.filterValues(null);  RegexTemplate template=new RegexTemplate(toString());  return template.fillSlots(fillers);}  }
class C{  @NonNull public static Animator color(int from,int to,float duration,@Nullable Interpolator interpolator){  TypedAction action=new TypedAction();  setPropertiesForAnimator(action,duration,interpolator);  action.setType(ActionType.COLOR);  action.setIntTargets(from,to);  return action;}  }
class C{  public ShortBandedRaster(SampleModel sampleModel,Point origin){  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  public Parameter defaultBase(){  return GPDefaults.base().push(P_GPPROBLEM);}  }
class C{  @SafeVarargs public ConjunctiveValidator(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type>... validators){  super(errorMessage);  setValidators(validators);}  }
class C{  public static Months monthsIn(ReadableInterval interval){  if (interval == null) {    return Months.ZERO;  }  int amount=BaseSingleFieldPeriod.between(interval.getStart(),interval.getEnd(),DurationFieldType.months());  return Months.months(amount);}  }
class C{  public TIntDoubleHashMap(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.946 -0500",hash_original_method="52751D07523F52C15F0E15149B768BF7",hash_generated_method="6DD64A04FC7BC7DC0050E5B221454760") public String replace(char oldChar,char newChar){  this.addTaint(oldChar);  addTaint(newChar);  return this;}  }
class C{  public void testGaps2(){  final JPanel panel=new JPanel(new GridBagLayout());  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(100,20));  final JTextField field2=new JTextField();  field2.setPreferredSize(new Dimension(100,20));  GridBagConverter converter=new GridBagConverter(new Insets(0,0,0,0),7,0,false,false);  converter.addComponent(field1,new GridConstraints(0,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field2,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(207,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();  assertEquals(new Rectangle(0,0,100,20),field1.getBounds());  assertEquals(new Rectangle(107,0,100,20),field2.getBounds());}  }
class C{  static Cancelable doLoadDrawable(final String url,final ImageOptions options,final Callback.CommonCallback<Drawable> callback){  if (TextUtils.isEmpty(url)) {    postArgsException(null,options,"url is null",callback);    return null;  }  FakeImageView fakeImageView=null;synchronized (FAKE_IMG_MAP) {    fakeImageView=FAKE_IMG_MAP.get(url);    if (fakeImageView == null) {      fakeImageView=new FakeImageView();    }  }  return doBind(fakeImageView,url,options,callback);}  }
class C{  public void writeMapEnd() throws IOException {  os.write('z');}  }
class C{  public void dragExit(DragSourceEvent dse){  System.out.println("[Source] dragExit");  changeCursor(dse.getDragSourceContext(),DnDConstants.ACTION_NONE);}  }
class C{  public static String replace(String inString,String oldPattern,String newPattern){  if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {    return inString;  }  StringBuilder sb=new StringBuilder();  int pos=0;  int index=inString.indexOf(oldPattern);  int patLen=oldPattern.length();  while (index >= 0) {    sb.append(inString.substring(pos,index));    sb.append(newPattern);    pos=index + patLen;    index=inString.indexOf(oldPattern,pos);  }  sb.append(inString.substring(pos));  return sb.toString();}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  String csName=null;  if (this == sRGBprofile) {    csName="CS_sRGB";  } else   if (this == XYZprofile) {    csName="CS_CIEXYZ";  } else   if (this == PYCCprofile) {    csName="CS_PYCC";  } else   if (this == GRAYprofile) {    csName="CS_GRAY";  } else   if (this == LINEAR_RGBprofile) {    csName="CS_LINEAR_RGB";  }  byte[] data=null;  if (csName == null) {    data=getData();  }  s.writeObject(csName);  s.writeObject(data);}  }
class C{  public TaskBuilder sync(){  this.async=false;  return this;}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public static void writeList(ArrayList<String> list,String fileName){  Writer writer=null;  if (fileName.toLowerCase(Locale.ROOT).endsWith(".gz")) {    writer=IOUtils.getBufferedWriter(fileName);  }  try {    if (writer == null) {      FileOutputStream fos=new FileOutputStream(fileName);      writer=new OutputStreamWriter(fos);    }    char[] charArray=Lists.getCharsOfAllArrayItemsWithNewLineCharacterInbetween(list);    writer.write(charArray);    writer.flush();    writer.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public String globalInfo(){  return "Reads Instances from a Database. " + "Can read a database in batch or incremental mode.\n" + "In inremental mode MySQL and HSQLDB are supported.\n"+ "For all other DBMS set a pseudoincremental mode is used:\n"+ "In pseudo incremental mode the instances are read into main memory all at once and then incrementally provided to the user.\n"+ "For incremental loading the rows in the database table have to be ordered uniquely.\n"+ "The reason for this is that every time only a single row is fetched by extending the user query by a LIMIT clause.\n"+ "If this extension is impossible instances will be loaded pseudoincrementally. To ensure that every row is fetched exaclty once, they have to ordered.\n"+ "Therefore a (primary) key is necessary.This approach is chosen, instead of using JDBC driver facilities, because the latter one differ betweeen different drivers.\n"+ "If you use the DatabaseSaver and save instances by generating automatically a primary key (its name is defined in DtabaseUtils), this primary key will "+ "be used for ordering but will not be part of the output. The user defined SQL query to extract the instances should not contain LIMIT and ORDER BY clauses (see -Q option).\n"+ "In addition, for incremental loading,  you can define in the DatabaseUtils file how many distinct values a nominal attribute is allowed to have. If this number is exceeded, the column will become a string attribute.\n"+ "In batch mode no string attributes will be created.";}  }
class C{  private void addSeparatorKey(final SimpleNodeData parent,final byte[] separatorKey){  if (parent == null)   throw new AssertionError();  if (separatorKey == null)   throw new AssertionError();  final int maxKeys=parent.max - 1;  final MutableKeyBuffer parentKeys=parent.keys;  if (parentKeys.nkeys < maxKeys) {    if (log.isDebugEnabled())     log.debug("h=" + parent.level + ", col="+ writtenInLevel[parent.level]+ ", separatorKey="+ BytesUtil.toString(separatorKey));    parentKeys.keys[parentKeys.nkeys++]=separatorKey;  } else {    addSeparatorKey(getParent(parent),separatorKey);  }}  }
class C{  public static List<Node> parseExpression(Context context,HashSet<String> configNamespaces,String text){  return parseExpression(context,configNamespaces,text,0,false);}  }
class C{  public final double meanAbsoluteError(){  return m_SumAbsErr / (m_WithClass - m_Unclassified);}  }
class C{  public BERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  static void generateNetwork(final Scenario scenario,String fromCrs,String toCrs,String osmFile,boolean cleanNetwork,String outputShapefile){  Network network=scenario.getNetwork();  CoordinateTransformation transformation=TransformationFactory.getCoordinateTransformation(fromCrs,toCrs);  OsmNetworkReader onr=new OsmNetworkReader(network,transformation);  onr.parse(osmFile);  if (cleanNetwork) {    new NetworkCleaner().run(network);  }  if (outputShapefile != null) {    GeometryUtils.writeNetwork2Shapefile(network,outputShapefile,toCrs);  }}  }
class C{  public void begin(){  setAutoCommit(false);}  }
class C{  public void readEnd() throws IOException {  int code=parseTag();  if (code < 100)   throw error("unknown code:" + (char)code);}  }
class C{  public static void checkDisplayedNotification(){  if (null != mActiveEventStreamService) {    mActiveEventStreamService.checkNotification();  }}  }
class C{  @Override public boolean isSigned(int columnIndex){  return true;}  }
class C{  public static String edgeTypeToString(@Type int edgeType){switch (edgeType) {case FALL_THROUGH_EDGE:    return "FALL_THROUGH";case IFCMP_EDGE:  return "IFCMP";case SWITCH_EDGE:return "SWITCH";case SWITCH_DEFAULT_EDGE:return "SWITCH_DEFAULT";case JSR_EDGE:return "JSR";case RET_EDGE:return "RET";case GOTO_EDGE:return "GOTO";case RETURN_EDGE:return "RETURN";case UNHANDLED_EXCEPTION_EDGE:return "UNHANDLED_EXCEPTION";case HANDLED_EXCEPTION_EDGE:return "HANDLED_EXCEPTION";case START_EDGE:return "START";case BACKEDGE_TARGET_EDGE:return "BACKEDGE_TARGET_EDGE";case BACKEDGE_SOURCE_EDGE:return "BACKEDGE_SOURCE_EDGE";case EXIT_EDGE:return "EXIT_EDGE";}throw new IllegalStateException("unknown edge type: " + edgeType);}  }
class C{  private List<MockRequest> makeRequests(int count){  Request.Priority[] allPriorities=Request.Priority.values();  Random random=new Random();  List<MockRequest> requests=new ArrayList<MockRequest>();  for (int i=0; i < count; i++) {    MockRequest request=new MockRequest();    Request.Priority priority=allPriorities[random.nextInt(allPriorities.length)];    request.setCacheKey(String.valueOf(i));    request.setPriority(priority);    requests.add(request);  }  return requests;}  }
class C{  protected void registerButtonAttributes(){  addAttributeProcessor(new ButtonProgrammaticChangeEventsLmlAttribute(),"programmaticChangeEvents");  addAttributeProcessor(new CheckedLmlAttribute(),"checked");  addAttributeProcessor(new ButtonImageLmlAttribute(),"image","icon");  addAttributeProcessor(new TextButtonImageLmlAttribute(),"image","icon");}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public static void copyTextToClipboard(@NonNull String text){  if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {    android.text.ClipboardManager clipboard=(android.text.ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);    clipboard.setText(text);  } else {    android.content.ClipboardManager clipboard=(android.content.ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);    android.content.ClipData clip=android.content.ClipData.newPlainText("Copied Text",text);    clipboard.setPrimaryClip(clip);  }}  }
class C{  public static void putAllAsByteIterators(Map<String,ByteIterator> out,Map<String,String> in){  for (  String s : in.keySet()) {    out.put(s,new StringByteIterator(in.get(s)));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static PlatformUser updatePlatformUser(VOUserDetails userDetails,List<SettingType> settingList,PlatformUser userToBeUpdated){  for (int i=0; i < settingList.size(); i++) {    if (settingList.get(i) == SettingType.LDAP_ATTR_ADDITIONAL_NAME) {      userToBeUpdated.setAdditionalName(userDetails.getAdditionalName());    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_EMAIL) {      if (!GenericValidator.isBlankOrNull(userDetails.getEMail())) {        userToBeUpdated.setEmail(userDetails.getEMail());      }    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_FIRST_NAME) {      userToBeUpdated.setFirstName(userDetails.getFirstName());    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_LAST_NAME) {      userToBeUpdated.setLastName(userDetails.getLastName());    } else     if (settingList.get(i) == SettingType.LDAP_ATTR_UID) {      userToBeUpdated.setRealmUserId((userDetails.getRealmUserId()));    }  }  return userToBeUpdated;}  }
class C{  protected NodeResult compareElements(final XNode xControl,final XNode xTest){  Differences differences=new Differences();  Element control=(Element)xControl.getNode();  Element test=(Element)xTest.getNode();  NodeResult nodeResult=new NodeResult(xControl,xTest,differences);  log("Comparing Elements at Test " + xTest.getXPath() + " Control "+ xControl.getXPath());  String uniqueAttrName=(String)_config.getUniqueAttributeMap().get(test.getTagName());  if ((uniqueAttrName != null) && (XMLUtil.nodesEqual(control,test,isIgnoringWhitespace()))) {    if ((control.hasAttributes()) && (test.hasAttributes())) {      String testAttrValue=test.getAttribute(uniqueAttrName);      String controlAttrValue=control.getAttribute(uniqueAttrName);      if ((!testAttrValue.trim().equals("")) && (controlAttrValue.equals(testAttrValue))) {        nodeResult.setUniqueAttrMatch(true);        return nodeResult;      }    }  }  reportMissingAttrs(xControl,xTest,differences);  differences.add(compareChildNodes(xControl,xTest));  if (differences.size() == 0) {    log(" Exact match for Test ELEMENT node " + XMLUtil.getNodeBasics(test) + " with control node "+ XMLUtil.getNodeBasics(control));    nodeResult.setIfExactMatch(true);  }  return nodeResult;}  }
class C{  public void testMultiReducerWholeMapReduceExecution() throws Exception {  IgfsPath inDir=new IgfsPath(PATH_INPUT);  igfs.mkdirs(inDir);  IgfsPath inFile=new IgfsPath(inDir,HadoopWordCount2.class.getSimpleName() + "-input");  generateTestFile(inFile.toString(),"key1",10000,"key2",20000,"key3",15000,"key4",7000,"key5",12000,"key6",18000);  for (int i=0; i < 2; i++) {    boolean useNewAPI=i == 1;    igfs.delete(new IgfsPath(PATH_OUTPUT),true);    flags.put("serializationWasConfigured",false);    flags.put("partitionerWasConfigured",false);    flags.put("inputFormatWasConfigured",false);    flags.put("outputFormatWasConfigured",false);    JobConf jobConf=new JobConf();    jobConf.set(CommonConfigurationKeys.IO_SERIALIZATIONS_KEY,CustomSerialization.class.getName());    jobConf.setInt(FileInputFormat.SPLIT_MAXSIZE,65000);    jobConf.setInt("fs.local.block.size",65000);    setupFileSystems(jobConf);    HadoopWordCount1.setTasksClasses(jobConf,!useNewAPI,!useNewAPI,!useNewAPI);    if (!useNewAPI) {      jobConf.setPartitionerClass(CustomV1Partitioner.class);      jobConf.setInputFormat(CustomV1InputFormat.class);      jobConf.setOutputFormat(CustomV1OutputFormat.class);    }    Job job=Job.getInstance(jobConf);    HadoopWordCount2.setTasksClasses(job,useNewAPI,useNewAPI,useNewAPI,false);    if (useNewAPI) {      job.setPartitionerClass(CustomV2Partitioner.class);      job.setInputFormatClass(CustomV2InputFormat.class);      job.setOutputFormatClass(CustomV2OutputFormat.class);    }    job.setOutputKeyClass(Text.class);    job.setOutputValueClass(IntWritable.class);    FileInputFormat.setInputPaths(job,new Path(igfsScheme() + inFile.toString()));    FileOutputFormat.setOutputPath(job,new Path(igfsScheme() + PATH_OUTPUT));    job.setNumReduceTasks(3);    job.setJarByClass(HadoopWordCount2.class);    IgniteInternalFuture<?> fut=grid(0).hadoop().submit(new HadoopJobId(UUID.randomUUID(),1),createJobInfo(job.getConfiguration()));    fut.get();    assertTrue("Serialization was configured (new API is " + useNewAPI + ")",flags.get("serializationWasConfigured"));    assertTrue("Partitioner was configured (new API is = " + useNewAPI + ")",flags.get("partitionerWasConfigured"));    assertTrue("Input format was configured (new API is = " + useNewAPI + ")",flags.get("inputFormatWasConfigured"));    assertTrue("Output format was configured (new API is = " + useNewAPI + ")",flags.get("outputFormatWasConfigured"));    assertEquals("Use new API = " + useNewAPI,"key3\t15000\n" + "key6\t18000\n",readAndSortFile(PATH_OUTPUT + "/" + (useNewAPI ? "part-r-" : "part-")+ "00000"));    assertEquals("Use new API = " + useNewAPI,"key1\t10000\n" + "key4\t7000\n",readAndSortFile(PATH_OUTPUT + "/" + (useNewAPI ? "part-r-" : "part-")+ "00001"));    assertEquals("Use new API = " + useNewAPI,"key2\t20000\n" + "key5\t12000\n",readAndSortFile(PATH_OUTPUT + "/" + (useNewAPI ? "part-r-" : "part-")+ "00002"));  }}  }
class C{  private boolean shouldRenameSpecificColumn(String schema,String table){  Hashtable<String,Hashtable<String,RenameRequest>> lookupTableCol=lookupSchemaTableCol.get(schema);  if (lookupTableCol != null) {    Hashtable<String,RenameRequest> lookupCol=lookupTableCol.get(table);    if (lookupCol != null) {      if (lookupCol.containsKey("*")) {        if (lookupCol.size() > 1)         return true;      } else {        if (lookupCol.size() > 0)         return true;      }    }  }  return false;}  }
class C{  public void send(Roster roster,String targetUserID){  Message msg=new Message(targetUserID);  RosterExchange rosterExchange=new RosterExchange(roster);  msg.addExtension(rosterExchange);  con.sendPacket(msg);}  }
class C{  static public double k1(double x) throws ArithmeticException {  double y, z;  z=0.5 * x;  if (z <= 0.0)   throw new ArithmeticException();  if (x <= 2.0) {    y=x * x - 2.0;    y=Math.log(z) * i1(x) + Arithmetic.chbevl(y,A_k1,11) / x;    return (y);  }  return (Math.exp(-x) * Arithmetic.chbevl(8.0 / x - 2.0,B_k1,25) / Math.sqrt(x));}  }
class C{  private void removePreferenceFromScreen(String key){  Preference pref=findPreference(key);  if (pref != null) {    getPreferenceScreen().removePreference(pref);  }}  }
class C{  public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException {  try {    this.tabelName=XMLHandler.getTagValue(stepnode,"TableName");    this.outputRowSize=XMLHandler.getTagValue(stepnode,"outputRowSize");    this.factDimLensString=XMLHandler.getTagValue(stepnode,"factDimLensString");    this.cubeName=XMLHandler.getTagValue(stepnode,"cubeName");    this.schemaName=XMLHandler.getTagValue(stepnode,"schemaName");    this.dimensionCount=XMLHandler.getTagValue(stepnode,"dimensionCount");    this.noDictionaryDims=XMLHandler.getTagValue(stepnode,"noDictionaryDims");    this.noDictionaryDimsMapping=XMLHandler.getTagValue(stepnode,"noDictionaryDimsMapping");    this.complexDimensionCount=XMLHandler.getTagValue(stepnode,"complexDimensionCount");    this.measureCount=XMLHandler.getTagValue(stepnode,"measureCount");    this.updateMemberRequest=XMLHandler.getTagValue(stepnode,"isUpdateMemberRequest");    this.measureDataType=XMLHandler.getTagValue(stepnode,"measureDataType");    currentRestructNumber=Integer.parseInt(XMLHandler.getTagValue(stepnode,"currentRestructNumber"));    this.partitionID=XMLHandler.getTagValue(stepnode,"partitionID");    this.segmentId=XMLHandler.getTagValue(stepnode,"segmentId");    this.taskNo=XMLHandler.getTagValue(stepnode,"taskNo");  } catch (  Exception e) {    throw new KettleXMLException("Unable to read step info from XML node",e);  }}  }
class C{  public int validate(int actual,int max,int min,int defaultVal){  if (actual <= max && actual >= min) {    return actual;  }  return defaultVal;}  }
class C{  public UriInfo relative(URI relative){  return new UriInfo(baseURI,relative);}  }
class C{  protected void addExclusion(Container container,String testName){  if (exclusions == null) {    exclusions=new HashMap<Container,Vector<String>>();  }  Vector<String> excluded=this.exclusions.get(container);  if (excluded == null) {    excluded=new Vector<String>();    exclusions.put(container,excluded);  }  excluded.add(testName);}  }
class C{  public static <T1,T2,T3,T4,R>BiFunction<T3,T4,R> partial4(final T1 t1,final T2 t2,final QuadFunction<T1,T2,T3,T4,R> quadFunc){  return null;}  }
class C{  public MemberFunctionResultSender(DM dm,MemberFunctionStreamingMessage msg,Function function){  this.msg=msg;  this.dm=dm;  this.function=function;}  }
class C{  @RequestMapping(value="/passwordReset",method=RequestMethod.POST) @ResponseStatus(HttpStatus.OK) public void triggerResetPassword(final HttpServletRequest request,@RequestBody final UserTriggerResetPasswordCommandDto userDto){  final String appUrl=request.getRequestURL().toString().replace(request.getRequestURI(),"") + request.getContextPath();  userService.resetPassword(userDto.getEmail(),appUrl);}  }
class C{  public static String transform(Document doc,InputSource xsl) throws TransformerException {  return transform(doc,xsl,null);}  }
class C{  public String encodeURI(){  if (!isWellFormed()) {    throw new MalformedArtifactIDException(this);  }  final StringBuffer uri=new StringBuffer();  try {    uri.append(VSTFS_PREFIX);    uri.append(URLEncoder.encode(tool,URL_ENCODING));    uri.append(URI_SEPARATOR);    uri.append(URLEncoder.encode(artifactType,URL_ENCODING));    uri.append(URI_SEPARATOR);    uri.append(URLEncoder.encode(toolSpecificId,URL_ENCODING));  } catch (  final UnsupportedEncodingException ex) {    throw new RuntimeException(ex);  }  return uri.toString();}  }
class C{  public void advanceToNextMinute(){}  }
class C{  public void assertNull(Object object,String errorMessage){  TestUtils.assertNull(object,errorMessage);}  }
class C{  protected static boolean processConfig(){  CollectorConfiguration config=configService.getCollector(null,null,null,null);  if (config != null) {    try {      updateInstrumentation(config);    } catch (    Exception e) {      log.severe("Failed to update instrumentation rules: " + e);    }  }  return config != null;}  }
class C{  public void clear(){  objectVectors.clear();}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static boolean isSdExist(){  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);}  }
class C{  public void testInvokeAny2() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    try {      e.invokeAny(new ArrayList<Callable<String>>());      shouldThrow();    } catch (    IllegalArgumentException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  @Override public boolean isGroupingUsed(){  return ndf.isGroupingUsed();}  }
class C{  protected void assertTrue(String message,boolean condition){  if (!condition) {    fail(message);  }}  }
class C{  public S2CellId next(){  return new S2CellId(id + (lowestOnBit() << 1));}  }
class C{  private int numberExampleDocuments(String authToken) throws Throwable {  URI exampleUri=UriUtils.buildFactoryUri(this.host,ExampleService.class);  Integer[] numberDocuments=new Integer[1];  Operation get=Operation.createGet(exampleUri).forceRemote().addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER,authToken).setCompletion(null);  clearClientCookieJar();  this.host.testStart(1);  this.host.send(get);  this.host.testWait();  return numberDocuments[0];}  }
class C{  public String go(){  StringWriter sw=new StringWriter();  try {    go(sw);  } catch (  IOException e) {    throw new RuntimeException(e);  }  return sw.toString();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.FORMAL_PARAMETER___IS_CONST:    return isConst();case N4JSPackage.FORMAL_PARAMETER___GET_CONTAINING_MODULE:  return getContainingModule();}return super.eInvoke(operationID,arguments);}  }
class C{  public void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != 4) {    throw new StunException("length invalid");  }  byte[] incomingCrcBytes=new byte[4];  incomingCrcBytes[0]=attributeValue[offset];  incomingCrcBytes[1]=attributeValue[offset + 1];  incomingCrcBytes[2]=attributeValue[offset + 2];  incomingCrcBytes[3]=attributeValue[offset + 3];  this.crc=incomingCrcBytes;}  }
class C{  private LogFactory(){}  }
class C{  public static AsyncCreateInstanceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncCreateInstanceResponse object=new AsyncCreateInstanceResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"asyncCreateInstanceResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (AsyncCreateInstanceResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public AbstractRaba(final int fromIndex,final int toIndex,final int capacity,final byte[][] a){  if (a == null)   throw new IllegalArgumentException();  if (fromIndex < 0)   throw new IllegalArgumentException();  if (fromIndex > toIndex)   throw new IllegalArgumentException();  if (toIndex > a.length)   throw new IllegalArgumentException();  if (capacity < toIndex - fromIndex)   throw new IllegalArgumentException();  this.fromIndex=fromIndex;  this.toIndex=toIndex;  this.capacity=capacity;  this.a=a;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT:    setExtendedRuntimeEnvironment((ProjectReference)null);  return;}super.eUnset(featureID);}  }
class C{  @Override public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if ((mv != null) && "<init>".equals(name)) {    ConstructorMethodAdapter aimv=new ConstructorMethodAdapter(mv,cl);    LocalVariablesSorter lvs=new LocalVariablesSorter(access,desc,aimv);    aimv.lvs=lvs;    mv=lvs;  }  return mv;}  }
class C{  public List<?> searchEntriesForUserBySourceTitle(String userId,String query,int startPosition,int maxResults){  return db.searchEntriesForUserHelper(userId,"sourceTitle",query,startPosition,maxResults);}  }
class C{  private void meekR3(Node a,Graph graph,IKnowledge knowledge){  List<Node> adjacentNodes=graph.getAdjacentNodes(a);  visitedNodes.add(a);  if (adjacentNodes.size() < 3) {    return;  }  for (  Node b : adjacentNodes) {    List<Node> otherAdjacents=new LinkedList<>(adjacentNodes);    otherAdjacents.remove(b);    if (!graph.isUndirectedFromTo(a,b)) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(otherAdjacents.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node c=otherAdjacents.get(combination[0]);      Node d=otherAdjacents.get(combination[1]);      if (graph.isAdjacentTo(c,d)) {        continue;      }      if (!graph.isDirectedFromTo(c,a)) {        continue;      }      if (!graph.isDirectedFromTo(d,a)) {        continue;      }      if (graph.isUndirectedFromTo(b,c) && graph.isUndirectedFromTo(b,d)) {        if (isArrowpointAllowed(b,a,knowledge,graph) && !createsCycle(b,a,graph)) {          if (!isUnshieldedNoncollider(c,b,d,graph)) {            continue;          }          Edge after=direct(b,a,graph);          Node x=after.getNode1();          Node y=after.getNode2();          rule1Queue.add(y);          rule2Queue.add(y);          rule3Queue.add(x);          if (useRule4) {            rule4Queue.add(x);          }          TetradLogger.getInstance().log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Meek R3",graph.getEdge(a,b)));        }      }    }  }}  }
class C{  public boolean containsValue(CompositeData value){  return dataMap.containsValue(value);}  }
class C{  public boolean login() throws LoginException {  long[] unixGroups=null;  ss=new UnixSystem();  if (ss == null) {    succeeded=false;    throw new FailedLoginException("Failed in attempt to import " + "the underlying system identity information");  } else {    userPrincipal=new UnixPrincipal(ss.getUsername());    UIDPrincipal=new UnixNumericUserPrincipal(ss.getUid());    GIDPrincipal=new UnixNumericGroupPrincipal(ss.getGid(),true);    if (ss.getGroups() != null && ss.getGroups().length > 0) {      unixGroups=ss.getGroups();      for (int i=0; i < unixGroups.length; i++) {        UnixNumericGroupPrincipal ngp=new UnixNumericGroupPrincipal(unixGroups[i],false);        if (!ngp.getName().equals(GIDPrincipal.getName()))         supplementaryGroups.add(ngp);      }    }    if (debug) {      System.out.println("\t\t[UnixLoginModule]: " + "succeeded importing info: ");      System.out.println("\t\t\tuid = " + ss.getUid());      System.out.println("\t\t\tgid = " + ss.getGid());      unixGroups=ss.getGroups();      for (int i=0; i < unixGroups.length; i++) {        System.out.println("\t\t\tsupp gid = " + unixGroups[i]);      }    }    succeeded=true;    return true;  }}  }
class C{  public GenericGF(int primitive,int size){  this.primitive=primitive;  this.size=size;  if (size <= INITIALIZATION_THRESHOLD) {    initialize();  }}  }
class C{  @SuppressWarnings("unchecked") public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map<String,Object>)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection<Object>)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  @Override public StringBuffer format(Date date,StringBuffer toAppendTo,FieldPosition fieldPosition){  this.calendar.setTime(date);  int year=this.calendar.get(Calendar.YEAR);  int month=this.calendar.get(Calendar.MONTH);  int quarter=month / 3;  if (this.quarterFirst) {    toAppendTo.append(this.quarters[quarter]);    toAppendTo.append(" ");    toAppendTo.append(year);  } else {    toAppendTo.append(year);    toAppendTo.append(" ");    toAppendTo.append(this.quarters[quarter]);  }  return toAppendTo;}  }
class C{  public GenericAnnotatedTypeFactory(BaseTypeChecker checker){  this(checker,FLOW_BY_DEFAULT);}  }
class C{  private MessageListView renderConversation(ConversationInfo convInfo,View parent){  MessageListView list=new MessageListView(parent.getContext());  convInfo.view=list;  list.setOnItemClickListener(MessageClickListener.getInstance());  MessageListAdapter adapter=convInfo.adapter;  if (adapter == null) {    adapter=new MessageListAdapter(convInfo.conv,parent.getContext());    convInfo.adapter=adapter;  }  list.setAdapter(adapter);  list.setSelection(adapter.getCount() - 1);  return list;}  }
class C{  public boolean isAcute(){  return isAcute(this.p0,this.p1,this.p2);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static void removePlayer(final Player player){  if (player != null) {    final String name=player.getName();    MockStendlRPWorld.get().remove(player.getID());    MockStendhalRPRuleProcessor.get().getOnlinePlayers().remove(player);    if (name != null) {      WordList.getInstance().unregisterSubjectName(name);    }  }}  }
class C{  public static void main(String[] args){  Gbl.startMeasurement();  Config config=ConfigUtils.createConfig();  String configFilename="examples/siouxfalls-2014/config_default.xml";  ConfigUtils.loadConfig(config,configFilename);  config.controler().setLastIteration(10);  config.qsim().setNumberOfThreads(1);  config.global().setNumberOfThreads(1);  config.parallelEventHandling().setNumberOfThreads(1);  Scenario sc=ScenarioUtils.loadScenario(config);  Controler controler=new Controler(sc);  controler.run();  LOG.info("Single thread time:");  Gbl.printElapsedTime();  IOUtils.deleteDirectory(new File(config.controler().getOutputDirectory()));  Gbl.startMeasurement();  config=ConfigUtils.createConfig();  ConfigUtils.loadConfig(config,configFilename);  config.controler().setLastIteration(10);  config.qsim().setNumberOfThreads(2);  config.global().setNumberOfThreads(2);  config.parallelEventHandling().setNumberOfThreads(2);  sc=ScenarioUtils.loadScenario(config);  controler=new Controler(sc);  controler.run();  LOG.info("Multi-threaded time:");  Gbl.printElapsedTime();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void nextMonth(){  mCalendar.add(Calendar.MONTH,1);  recalculate();}  }
class C{  public static boolean isCharAtEscaped(String src,int ndx,char escapeChar){  if (ndx == 0) {    return false;  }  ndx--;  return src.charAt(ndx) == escapeChar;}  }
class C{  private synchronized void moveTo(MovePath md){  md.clipToPossible();  if (ce().hasUMU()) {    getClient().sendUpdateEntity(ce());  }  getClient().moveEntity(cen,md);}  }
class C{  public ConfigureEvent(TungstenProperties props){  super(props);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  int id=item.getItemId();  if (id == R.id.action_sort) {    startActivity(new Intent(MainActivity.this,SettingsActivity.class));    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public static int hex2int(char c){switch (c) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':    return c - '0';case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':  return c - 55;case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':return c - 87;default :throw new IllegalArgumentException("Not a hex: " + c);}}  }
class C{  public User(String username){  super();  Assert.hasText(username,"Not allowed to create an User with an empty username");  this.username=username;  loadLazy();}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success || newRecord)   return success;  if (is_ValueChanged("AD_Org_ID")) {    String sql="UPDATE M_InOutLine ol" + " SET AD_Org_ID =" + "(SELECT AD_Org_ID"+ " FROM M_InOut o WHERE ol.M_InOut_ID=o.M_InOut_ID) "+ "WHERE M_InOut_ID="+ getC_Order_ID();    int no=DB.executeUpdate(sql,get_TrxName());    log.fine("Lines -> #" + no);  }  return true;}  }
class C{  private boolean copyOrMoveCheck(final Entry droppedOnEntry,final RepositoryLocation location,final TransferSupport ts) throws RepositoryException {  if (droppedOnEntry == null) {    throw new IllegalArgumentException("Entry must not be null.");  } else   if (location == null) {    throw new IllegalArgumentException("RepositoryLocation must not be null.");  } else   if (ts == null) {    throw new IllegalArgumentException("TransferSupport must not be null.");  } else   if (!(droppedOnEntry instanceof Folder)) {    return false;  } else {    RepositoryLocation targetLocation=((Folder)droppedOnEntry).getLocation();    if (targetLocation == null) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.repository.RepositoryTree.parameter_missing.target_location");      return false;    }    String targetAbsolutePath=targetLocation.getAbsoluteLocation();    if (targetAbsolutePath == null || targetAbsolutePath.isEmpty()) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.repository.RepositoryTree.parameter_missing.target_path");      return false;    }    String sourceAbsolutePath=location.getAbsoluteLocation();    if (sourceAbsolutePath == null || sourceAbsolutePath.isEmpty()) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.repository.RepositoryTree.parameter_missing.source_path");      return false;    }    Entry locationEntry=location.locateEntry();    if (locationEntry == null) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.repository.RepositoryTree.parameter_missing.repository_location");      return false;    }    String effectiveNewName=locationEntry.getName();    if (effectiveNewName == null || effectiveNewName.isEmpty()) {      LogService.getRoot().log(Level.WARNING,"com.rapidminer.repository.RepositoryTree.parameter_missing.name");      return false;    }    if (isMoveOperation(ts,false)) {      if (sourceAbsolutePath.equals(targetAbsolutePath)) {        SwingTools.showVerySimpleErrorMessage("repository_move_same_folder");        return false;      }      if (RepositoryGuiTools.isSuccessor(sourceAbsolutePath,targetAbsolutePath)) {        SwingTools.showVerySimpleErrorMessage("repository_move_into_subfolder");        return false;      }      if (!(location.locateEntry() instanceof Repository)) {        String sourceParentLocation=location.locateEntry().getContainingFolder().getLocation().getAbsoluteLocation();        if (sourceParentLocation.equals(targetAbsolutePath)) {          SwingTools.showVerySimpleErrorMessage("repository_move_same_folder");          return false;        }      }    } else {      if (sourceAbsolutePath.equals(targetAbsolutePath)) {        SwingTools.showVerySimpleErrorMessage("repository_copy_same_folder");        return false;      }      if (RepositoryGuiTools.isSuccessor(sourceAbsolutePath,targetAbsolutePath)) {        SwingTools.showVerySimpleErrorMessage("repository_copy_into_subfolder");        return false;      }    }    return true;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static RelationalOpExpression eq(Expression left,Expression right){  return new RelationalOpExpression(left,"=",right);}  }
class C{  @Override public Graphics2D createGraphics(SurfaceData sd,WComponentPeer peer,Color fgColor,Color bgColor,Font font){  if (!done && sd instanceof D3DWindowSurfaceData) {    D3DWindowSurfaceData d3dw=(D3DWindowSurfaceData)sd;    if (!d3dw.isSurfaceLost() || validate(d3dw)) {      trackScreenSurface(d3dw);      return new SunGraphics2D(sd,fgColor,bgColor,font);    }    sd=getGdiSurface(d3dw);  }  return super.createGraphics(sd,peer,fgColor,bgColor,font);}  }
class C{  private static void updateDebuggerHighlighting(final ZyGraph graph,final UnrelocatedAddress address,final NaviNode node,final INaviCodeNode codeNode){  for (  final INaviInstruction instruction : codeNode.getInstructions()) {    if (instruction.getAddress().equals(address.getAddress())) {      updateDebuggerHighlighting(graph,node,codeNode,instruction);    }  }}  }
class C{  @Override public final String toString(Instances instances){  return super.toString(instances);}  }
class C{  protected boolean intersectsVisibleSector(DrawContext dc,TextureTile tile){  return dc.getVisibleSector() != null && dc.getVisibleSector().intersects(tile.getSector());}  }
class C{  public boolean isIndependent(Node xVar,Node yVar,List<Node> z){  if (z == null) {    throw new NullPointerException();  }  for (  Node node : z) {    if (node == null) {      throw new NullPointerException();    }  }  int size=z.size();  int[] zCols=new int[size];  int xIndex=getVariables().indexOf(xVar);  int yIndex=getVariables().indexOf(yVar);  for (int i=0; i < z.size(); i++) {    zCols[i]=getVariables().indexOf(z.get(i));  }  int[] zRows=new int[data.rows()];  for (int i=0; i < data.rows(); i++) {    zRows[i]=i;  }  DoubleMatrix2D Z=data.viewSelection(zRows,zCols);  DoubleMatrix1D x=data.viewColumn(xIndex);  DoubleMatrix1D y=data.viewColumn(yIndex);  DoubleMatrix2D Zt=new Algebra().transpose(Z);  DoubleMatrix2D ZtZ=new Algebra().mult(Zt,Z);  TetradMatrix _ZtZ=new TetradMatrix(ZtZ.toArray());  TetradMatrix ginverse=_ZtZ.inverse();  DoubleMatrix2D G=new DenseDoubleMatrix2D(ginverse.toArray());  DoubleMatrix2D Zt2=Zt.like();  Zt2.assign(Zt);  DoubleMatrix2D GZt=new Algebra().mult(G,Zt2);  DoubleMatrix1D b_x=new Algebra().mult(GZt,x);  DoubleMatrix1D b_y=new Algebra().mult(GZt,y);  DoubleMatrix1D xPred=new Algebra().mult(Z,b_x);  DoubleMatrix1D yPred=new Algebra().mult(Z,b_y);  DoubleMatrix1D xRes=xPred.copy().assign(x,Functions.minus);  DoubleMatrix1D yRes=yPred.copy().assign(y,Functions.minus);  double r=StatUtils.correlation(xRes.toArray(),yRes.toArray());  if (Double.isNaN(thresh)) {    this.thresh=cutoffGaussian();  }  if (Double.isNaN(r)) {    if (verbose) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(xVar,yVar,z,getPValue()));    }    return true;  }  if (r > 1)   r=1;  if (r < -1)   r=-1;  this.fishersZ=Math.sqrt(sampleSize() - z.size() - 3.0) * 0.5 * (Math.log(1.0 + r) - Math.log(1.0 - r));  if (Double.isNaN(this.fishersZ)) {    throw new IllegalArgumentException("The Fisher's Z " + "score for independence fact " + xVar + " _||_ "+ yVar+ " | "+ z+ " is undefined.");  }  boolean indFisher=true;  if (Math.abs(fishersZ) > thresh) {    indFisher=false;  }  if (verbose) {    if (indFisher) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(xVar,yVar,z,getPValue()));    } else {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(xVar,yVar,z,getPValue()));    }  }  return indFisher;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int nextIndex(int weight){  if (used == parent.length) {    int nsize=used + (used >> 1);    this.weight=Arrays.copyOf(this.weight,nsize);    this.parent=Arrays.copyOf(this.parent,nsize);  }  this.weight[used]=weight;  this.parent[used]=used;  return used++;}  }
class C{  public synchronized StunMessageEvent sendRequestAndWaitForResponse(Request request,TransportAddress serverAddress,TransactionID tranID) throws StunException, IOException {synchronized (sendLock) {    stunStack.sendRequest(request,serverAddress,localAddress,BlockingRequestSender.this,tranID);  }  ended=false;  while (!ended) {    try {      wait();    } catch (    InterruptedException ex) {      logger.log(Level.WARNING,"Interrupted",ex);    }  }  StunMessageEvent res=responseEvent;  responseEvent=null;  return res;}  }
class C{  public boolean updateImage(byte[] imageBytes){  boolean isImageUpdated=false;  String tmpImageSha1=VCardTempXUpdatePresenceExtension.getImageSha1(imageBytes);  if (tmpImageSha1 != imageSha1) {    imageSha1=tmpImageSha1;    this.computeXML();    isImageUpdated=true;  }  return isImageUpdated;}  }
class C{  @Override protected boolean ensureFreeCapacity(){  if (!isFull())   return true;  EvictionThread evictionThread=ensureEvictionThreadIsRunning();  evictionThread.trigger();  if (isOverfull()) {    counterEvictionsHalts.incrementAndGet();    if (jamPolicy == JamPolicy.DROP) {      evictionThread=ensureEvictionThreadIsRunning();      evictionThread.trigger();      return false;    }  }  while (isOverfull()) {    try {synchronized (evictionNotifierDone) {        if (evictionThread.evictionIsRunning) {          evictionNotifierDone.wait();        }      }      evictionThread=ensureEvictionThreadIsRunning();      evictionThread.trigger();    } catch (    InterruptedException e) {    }  }  return true;}  }
class C{  public ArtistDataSource(PlayMusicManager playMusicManager){  super(playMusicManager);}  }
class C{  @Override public E pollFirst(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static boolean needsUID(String classname){  boolean result;  try {    result=needsUID(Class.forName(classname));  } catch (  Exception e) {    result=false;  }  return result;}  }
class C{  public boolean movePrimaryBucketForRegion(InternalDistributedMember target,int bucketId){  boolean movedPrimary=false;  if (getLeaderRegion().getDistributionManager().getId().equals(target)) {    BucketAdvisor bucketAdvisor=getLeaderRegion().getRegionAdvisor().getBucketAdvisor(bucketId);    if (bucketAdvisor.isHosting()) {      movedPrimary=bucketAdvisor.becomePrimary(isRebalance);    }  } else {    BecomePrimaryBucketResponse response=BecomePrimaryBucketMessage.send(target,getLeaderRegion(),bucketId,isRebalance);    if (response != null) {      movedPrimary=response.waitForResponse();    }  }  return movedPrimary;}  }
class C{  protected void dragDividerTo(int location){  splitPaneUI.dragDividerTo(location);}  }
class C{  public static void main(String... args) throws Exception {  Main.main(args);}  }
class C{  public String readUntil(char... end){  final StringBuilder sb=new StringBuilder();  int pos=this.pos;  while (pos < this.value.length()) {    final char ch=this.value.charAt(pos);    if (ch == '\\' && pos + 1 < this.value.length()) {      final char c;switch (c=this.value.charAt(pos + 1)) {case '\\':case '[':case ']':case '(':case ')':case '{':case '}':case '#':case '"':case '\'':case '.':case '>':case '*':case '+':case '-':case '_':case '!':case '`':        sb.append(c);      pos++;    break;default :  sb.append(ch);break;}} else {boolean endReached=false;for (final char anEnd : end) {if (ch == anEnd) {endReached=true;break;}}if (endReached) {break;}sb.append(ch);}pos++;}final char ch=pos < this.value.length() ? this.value.charAt(pos) : '\n';for (final char anEnd : end) {if (ch == anEnd) {this.pos=pos;return sb.toString();}}return null;}  }
class C{  public CLIOutputResponse propset(final PropertySetRequest request) throws IOException, ServerException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  if (request.isForce()) {    uArgs.add("--force");  }  addDepth(uArgs,request.getDepth().getValue());  uArgs.add("propset");  uArgs.add(request.getName());  String value=request.getValue();  Path valueFile=null;  if (value.contains("\n")) {    try {      valueFile=java.nio.file.Files.createTempFile("svn-propset-value-",null);      java.nio.file.Files.write(valueFile,value.getBytes());      uArgs.add("-F");      uArgs.add(valueFile.toString());    } catch (    IOException e) {      uArgs.add(value);    }  } else {    uArgs.add(value);  }  final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(request.getPath()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  protected void updateProject(ProjectConfig project) throws ServerException {  final String href=UriBuilder.fromUri(apiEndpoint).path(WorkspaceService.class).path(WorkspaceService.class,"updateProject").build(new String[]{workspaceId,project.getPath()},false).toString();  try {    httpJsonRequestFactory.fromUrl(href).usePutMethod().setBody(asDto(project)).request();  } catch (  IOException|ApiException e) {    throw new ServerException(e.getMessage());  }}  }
class C{  public boolean isValid(String bucketName){  Set<String> intersection=new HashSet<String>(this.actions);  intersection.retainAll(Constants.VALID_ACTIONS);  if (intersection.isEmpty()) {    return false;  }  if (!this.effect.equals("Allow")) {    return false;  }  Set<String> aws=this.principal.aws();  if (aws == null || !aws.contains("*")) {    return false;  }  String bucketResource=Constants.AWS_RESOURCE_PREFIX + bucketName;  if (this.resources.contains(bucketResource)) {    return true;  }  if (this.resources.startsWith(bucketResource + "/").isEmpty()) {    return false;  }  return true;}  }
class C{  public HashMap<String,String> generateSWFByCombine(List<String> swfs,String outputswf,int fps){  List<String> argvList=Arrays.asList(new String[]{getPathToSwfTools() + "swfcombine" + execExt,"-s","insertstop","-o",outputswf,"-r",Integer.toString(fps),"-z","-a"});  argvList.addAll(swfs);  return ProcessHelper.executeScript("generateSwfByImages",argvList.toArray(new String[0]));}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("processtemplate") @Valid ProcessTemplate processTemplate,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    processTemplate.setAddTS(DateConverter.stringToDate(processTemplate.getTableAddTS()));    if (processTemplate.getBatchPattern().isEmpty()) {      processTemplate.setBatchPattern(null);    }    processTemplate.setAddTS(DateConverter.stringToDate(processTemplate.getTableAddTS()));    com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate jpaProcessTemplate=new com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate();    jpaProcessTemplate.setProcessTemplateId(processTemplate.getProcessTemplateId());    jpaProcessTemplate.setDescription(processTemplate.getDescription());    jpaProcessTemplate.setProcessName(processTemplate.getProcessName());    jpaProcessTemplate.setBatchCutPattern(processTemplate.getBatchPattern());    jpaProcessTemplate.setAddTs(processTemplate.getAddTS());    if (processTemplate.getCanRecover() == null)     jpaProcessTemplate.setCanRecover(true); else     jpaProcessTemplate.setCanRecover(processTemplate.getCanRecover());    if (processTemplate.getDeleteFlag() == null)     jpaProcessTemplate.setDeleteFlag(false); else     jpaProcessTemplate.setDeleteFlag(processTemplate.getDeleteFlag());    jpaProcessTemplate.setNextProcessTemplateId(processTemplate.getNextProcessTemplateId());    ProcessType processType=new ProcessType();    processType.setProcessTypeId(processTemplate.getProcessTypeId());    jpaProcessTemplate.setProcessType(processType);    com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate pt=new com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate();    pt.setProcessTemplateId(processTemplate.getParentProcessId());    jpaProcessTemplate.setProcessTemplate(pt);    WorkflowType workflowType=new WorkflowType();    workflowType.setWorkflowId(processTemplate.getWorkflowId());    jpaProcessTemplate.setWorkflowType(workflowType);    BusDomain busDomain=new BusDomain();    busDomain.setBusDomainId(processTemplate.getBusDomainId());    jpaProcessTemplate.setBusDomain(busDomain);    Integer processTemplateId=processTemplateDAO.insert(jpaProcessTemplate);    processTemplate.setProcessTemplateId(processTemplateId);    restWrapper=new RestWrapper(processTemplate,RestWrapper.OK);    LOGGER.info("Record with ID:" + processTemplate.getProcessTemplateId() + " inserted in ProcessTemplate by User:"+ principal.getName()+ processTemplate);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private DiscoveryInformation verifyDiscovered(AuthSuccess authResp,DiscoveryInformation discovered) throws DiscoveryException {  if (authResp == null || authResp.getIdentity() == null) {    _log.info("Assertion is not about an identifier");    return null;  }  if (authResp.isVersion2())   return verifyDiscovered2(authResp,discovered); else   return verifyDiscovered1(authResp,discovered);}  }
class C{  public V2 addAction(int icon,CharSequence title,Action.OnActionListener listener){  N.addAction(icon,title,listener);  return this;}  }
class C{  public void write(int b) throws IOException {  ibuffer[0]=(byte)b;  obuffer=cipher.update(ibuffer,0,1);  if (obuffer != null) {    output.write(obuffer);    obuffer=null;  }}  }
class C{  public boolean isAnonymousClass(){  return false;}  }
class C{  public static SortedMap<Integer,Integer> generateSortedTagMap(String[] partitions,Map<String,String> tags){  final SortedMap<Integer,Integer> tagHashMap=new TreeMap<Integer,Integer>();  for (  Map.Entry<String,String> entry : tags.entrySet()) {    final String tagName=entry.getKey();    final String tagValue=entry.getValue();    if (tagValue == null || isPartitionTag(partitions,tagName))     continue;    tagHashMap.put(tagName.hashCode(),tagValue.hashCode());  }  return tagHashMap;}  }
class C{  @Override public int mapString(int column,String value){  Integer result=this.name2IndexMap.get(value);  if (result == null) {    return -1;  } else {    return result;  }}  }
class C{  public void clearPaymentMethodsById(List<String> paymentMethodIdsToRemove){  if (UtilValidate.isEmpty(paymentMethodIdsToRemove))   return;  for (Iterator<CartPaymentInfo> iter=paymentInfo.iterator(); iter.hasNext(); ) {    CartPaymentInfo info=iter.next();    if (paymentMethodIdsToRemove.contains(info.paymentMethodId)) {      iter.remove();    }  }}  }
class C{  public MathCharacter(MetaCharacter meta){  this.meta=meta;}  }
class C{  public void addFld(ArchiveTokenFld fld){  m_flds.add(fld);}  }
class C{  @Override protected void validate(T object){  boolean dirty=false;  for (  Painter<T> p : painters) {    if (p instanceof AbstractPainter) {      AbstractPainter<T> ap=(AbstractPainter<T>)p;      ap.validate(object);      if (ap.isDirty()) {        dirty=true;        break;      }    }  }  clearLocalCacheOnly=true;  setDirty(dirty);  clearLocalCacheOnly=false;}  }
class C{  public void clearParameters() throws SQLException {  params.clear();}  }
class C{  protected void updateReplacementLengthForString(IDocument document,int offset,String replacement){  boolean isString=replacement.startsWith("\"") || replacement.startsWith("'");  if (isString) {    int length=document.getLength();    int pos=offset;    char c;    while (pos < length) {      try {        c=document.getChar(pos);switch (c) {case '\r':case '\n':case '\t':case ' ':          return;case '"':case '\'':        setReplacementLength(getReplacementLength() + pos - offset + 1);      return;  }  ++pos;} catch (BadLocationException e) {  e.printStackTrace();}}}}  }
class C{  protected boolean createTunnelToTarget(HttpRoute route,HttpContext context) throws HttpException, IOException {  HttpHost proxy=route.getProxyHost();  HttpHost target=route.getTargetHost();  HttpResponse response=null;  boolean done=false;  while (!done) {    done=true;    if (!this.managedConn.isOpen()) {      this.managedConn.open(route,context,this.params);    }    HttpRequest connect=createConnectRequest(route,context);    String agent=HttpProtocolParams.getUserAgent(params);    if (agent != null) {      connect.addHeader(HTTP.USER_AGENT,agent);    }    connect.addHeader(HTTP.TARGET_HOST,target.toHostString());    AuthScheme authScheme=this.proxyAuthState.getAuthScheme();    AuthScope authScope=this.proxyAuthState.getAuthScope();    Credentials creds=this.proxyAuthState.getCredentials();    if (creds != null) {      if (authScope != null || !authScheme.isConnectionBased()) {        try {          connect.addHeader(authScheme.authenticate(creds,connect));        } catch (        AuthenticationException ex) {          if (this.log.isErrorEnabled()) {            this.log.error("Proxy authentication error: " + ex.getMessage());          }        }      }    }    response=requestExec.execute(connect,this.managedConn,context);    int status=response.getStatusLine().getStatusCode();    if (status < 200) {      throw new HttpException("Unexpected response to CONNECT request: " + response.getStatusLine());    }    CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);    if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {      if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {        this.log.debug("Proxy requested authentication");        Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);        try {          processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);        } catch (        AuthenticationException ex) {          if (this.log.isWarnEnabled()) {            this.log.warn("Authentication error: " + ex.getMessage());            break;          }        }        updateAuthState(this.proxyAuthState,proxy,credsProvider);        if (this.proxyAuthState.getCredentials() != null) {          done=false;          if (this.reuseStrategy.keepAlive(response,context)) {            this.log.debug("Connection kept alive");            HttpEntity entity=response.getEntity();            if (entity != null) {              entity.consumeContent();            }          } else {            this.managedConn.close();          }        }      } else {        this.proxyAuthState.setAuthScope(null);      }    }  }  int status=response.getStatusLine().getStatusCode();  if (status > 299) {    HttpEntity entity=response.getEntity();    if (entity != null) {      response.setEntity(new BufferedHttpEntity(entity));    }    this.managedConn.close();    throw new TunnelRefusedException("CONNECT refused by proxy: " + response.getStatusLine(),response);  }  this.managedConn.markReusable();  return false;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static Keymap newKeymap(final String key,final String displayString,final EditorType editorType){  if (key == null) {    throw new IllegalArgumentException("Keymap key can't be null");  }  if (displayString == null) {    throw new IllegalArgumentException("Keymap display string can't be null");  }  if (editorType == null) {    throw new IllegalArgumentException("Keymap editor can't be null");  }  if (fromKey(key) != null) {    throw new RuntimeException("Keymap with key " + key + " already exists");  }  Log.debug(Keymap.class,"Creation of new keymap " + key + " for editor type "+ editorType);  Keymap keymap=new Keymap(key,displayString,editorType);  instances.put(key,keymap);  return keymap;}  }
class C{  public JCExpression castSequentialToSequence(JCExpression sequentialExpr,Type iteratedType){  return makeUtilInvocation(null,"asSequence",List.of(sequentialExpr));}  }
class C{  public static DomainObjectExceptionBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DomainObjectExceptionBean object=new DomainObjectExceptionBean();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"domainObjectExceptionBean".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DomainObjectExceptionBean)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list4=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","causeStackTrace").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setCauseStackTrace(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","id").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMessageKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list4.add(null);        reader.next();      } else {        list4.add(reader.getElementText());      }      boolean loopDone4=false;      while (!loopDone4) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone4=true;        } else {          if (new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list4.add(null);              reader.next();            } else {              list4.add(reader.getElementText());            }          } else {            loopDone4=true;          }        }      }      object.setMessageParams((java.lang.String[])list4.toArray(new java.lang.String[list4.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","classEnum").equals(reader.getName())) {      object.setClassEnum(ClassEnum.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  @NamespacePermission(fields="#businessObjectFormatKey.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public BusinessObjectFormat updateBusinessObjectFormat(BusinessObjectFormatKey businessObjectFormatKey,BusinessObjectFormatUpdateRequest request){  businessObjectFormatHelper.validateBusinessObjectFormatKey(businessObjectFormatKey);  attributeHelper.validateAttributes(request.getAttributes());  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(businessObjectFormatKey);  businessObjectFormatEntity.setDescription(request.getDescription());  validateBusinessObjectFormatSchema(request.getSchema(),businessObjectFormatEntity.getPartitionKey());  Map<String,BusinessObjectFormatAttributeEntity> existingAttributeEntities=new HashMap<>();  for (  BusinessObjectFormatAttributeEntity attributeEntity : businessObjectFormatEntity.getAttributes()) {    String mapKey=attributeEntity.getName().toLowerCase();    if (existingAttributeEntities.containsKey(mapKey)) {      throw new IllegalStateException(String.format("Found duplicate attribute with name \"%s\" for business object format {%s}.",mapKey,businessObjectFormatHelper.businessObjectFormatKeyToString(businessObjectFormatKey)));    }    existingAttributeEntities.put(mapKey,attributeEntity);  }  List<BusinessObjectFormatAttributeEntity> createdAttributeEntities=new ArrayList<>();  List<BusinessObjectFormatAttributeEntity> retainedAttributeEntities=new ArrayList<>();  if (!CollectionUtils.isEmpty(request.getAttributes())) {    for (    Attribute attribute : request.getAttributes()) {      String lowercaseAttributeName=attribute.getName().toLowerCase();      if (existingAttributeEntities.containsKey(lowercaseAttributeName)) {        BusinessObjectFormatAttributeEntity attributeEntity=existingAttributeEntities.get(lowercaseAttributeName);        if (!StringUtils.equals(attribute.getValue(),attributeEntity.getValue())) {          attributeEntity.setValue(attribute.getValue());        }        retainedAttributeEntities.add(attributeEntity);      } else {        BusinessObjectFormatAttributeEntity attributeEntity=new BusinessObjectFormatAttributeEntity();        businessObjectFormatEntity.getAttributes().add(attributeEntity);        attributeEntity.setBusinessObjectFormat(businessObjectFormatEntity);        attributeEntity.setName(attribute.getName());        attributeEntity.setValue(attribute.getValue());        retainedAttributeEntities.add(attributeEntity);      }    }  }  businessObjectFormatEntity.getAttributes().retainAll(retainedAttributeEntities);  businessObjectFormatEntity.getAttributes().addAll(createdAttributeEntities);  BusinessObjectFormat businessObjectFormat=businessObjectFormatHelper.createBusinessObjectFormatFromEntity(businessObjectFormatEntity);  if ((request.getSchema() != null && !request.getSchema().equals(businessObjectFormat.getSchema())) || (request.getSchema() == null && businessObjectFormat.getSchema() != null)) {    clearBusinessObjectFormatSchema(businessObjectFormatEntity);    businessObjectFormatDao.saveAndRefresh(businessObjectFormatEntity);    populateBusinessObjectFormatSchema(businessObjectFormatEntity,request.getSchema());  }  businessObjectFormatEntity=businessObjectFormatDao.saveAndRefresh(businessObjectFormatEntity);  return businessObjectFormatHelper.createBusinessObjectFormatFromEntity(businessObjectFormatEntity);}  }
class C{  public HCatToAvroRecordConverter(HCatRecordJsonSerializer serializer){  this.serializer=serializer;  this.anonFields=new HashSet<String>(0);  this.salt="";}  }
class C{  public static <T>T[] sort(T[] self,Comparator<T> comparator){  return sort(self,true,comparator);}  }
class C{  public void doWork(ServletRequest req,ServletResponse res) throws IOException {  HttpServletResponse response=(HttpServletResponse)res;  HttpServletRequest request=(HttpServletRequest)req;  PrintWriter out=response.getWriter();  SecurityUseCase securityUseCase=new SecurityUseCase();  setupResponse(response);  Locale locale=IdiomaUtils.getInstance().getLocale(IdiomaUtils.getInstance().getNumIdioma(request));  String error="0";  int tries=0;  UseCaseConf useCaseConf=null;  if (isAuthProcess(request)) {    Map persistFields=new HashMap();    try {      Utils.setAuditContext(request);      useCaseConf=getUseCaseConf(request);      String name=getName(request);      String passwordCrypt=getPasswordCrypt(request);      tries=getTriesCtrl(request);      useCaseConf.setPassword(passwordCrypt);      securityUseCase.login(useCaseConf,name,passwordCrypt);      Integer archiveId=getArchiveId(request);      Integer folderId=getFolderId(request);      if (isOpenDistribucion(request)) {        BookUseCase bookUseCase=new BookUseCase();        bookUseCase.openBook(useCaseConf,archiveId);        bookUseCase.getPermsRegisterDistPen(useCaseConf,archiveId,folderId);      }      saveSessionData(request,useCaseConf,persistFields);      success(request,response,useCaseConf);    } catch (    SecurityException e) {      logger.fatal("Error de seguridad",e);      error="1";      ResponseUtils.generateJavaScriptError(out,e);      if (e.getCode().equals(SecurityException.ERROR_PASSWORD_INCORRECT)) {        logger.error("Password incorrecta",e);        tries++;      }    }catch (    BookException e) {      logger.fatal("Error en el libro",e);      error="1";      ResponseUtils.generateJavaScriptError(out,e);    }catch (    ValidationException e) {      logger.fatal("Error de validacion",e);      error="1";      ResponseUtils.generateJavaScriptLog(out,RBUtil.getInstance(locale).getProperty(Keys.I18N_EXCEPTION_VALIDATIONEXCEPTION));    }catch (    Exception e) {      logger.fatal("Error en las comunicaciones",e);      error="1";      ResponseUtils.generateJavaScriptLog(out,RBUtil.getInstance(locale).getProperty(Keys.I18N_EXCEPTION_REMOTEEXCEPTION));    }  }}  }
class C{  public SequenceResource(String mimetype,Resource... resources){  this(mimetype,Arrays.asList(resources));}  }
class C{  void authResponse(RoutingContext ctx,HttpClientResponse res,ProxyContext pc){  String modTok=res.headers().get(XOkapiHeaders.MODULE_TOKENS);  if (modTok != null && !modTok.isEmpty()) {    JsonObject jo=new JsonObject(modTok);    for (    ModuleInstance mi : pc.ml) {      String id=mi.getModuleDescriptor().getId();      if (jo.containsKey(id)) {        String tok=jo.getString(id);        mi.setAuthToken(tok);        logger.debug("authResponse: token for " + id + ": "+ tok);      } else       if (jo.containsKey("_")) {        String tok=jo.getString("_");        mi.setAuthToken(tok);        logger.debug("authResponse: Default (_) token for " + id + ": "+ tok);      }    }  }  res.headers().remove(XOkapiHeaders.MODULE_TOKENS);  res.headers().remove(XOkapiHeaders.MODULE_PERMISSIONS);}  }
class C{  protected RuleStats runSequential(final IJoinNexus joinNexus,final IStep program,final List<Callable<RuleStats>> tasks) throws InterruptedException, ExecutionException {  final int ntasks=tasks.size();  if (log.isInfoEnabled())   log.info("program=" + program.getName() + ", #tasks="+ ntasks);  if (indexManager == null)   throw new IllegalStateException();  final ExecutorService service=indexManager.getExecutorService();  final RuleStats totals=joinNexus.getRuleStatisticsFactory().newInstance(program);  final Iterator<Callable<RuleStats>> itr=tasks.iterator();  int n=0;  while (itr.hasNext()) {    final Callable<RuleStats> task=itr.next();    final RuleStats tmp=service.submit(task).get();    totals.add(tmp);    n++;    if (log.isDebugEnabled()) {      log.debug("program=" + program.getName() + ", finished "+ n+ " of "+ ntasks+ " seqential tasks.");    }  }  if (log.isInfoEnabled())   log.info("program=" + program.getName() + ", #tasks="+ ntasks+ " - done");  return totals;}  }
class C{  public void defineLineStyle(int width,Color color) throws IOException {  lineStyles.add(new LineStyle(width,color));  outstandingChanges=true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void init(Context context,String text){  this.setOrientation(VERTICAL);  LayoutInflater.from(context).inflate(R.layout.crouton_view,this);  ((TextView)this.findViewById(R.id.crouton_view_message)).setText(text);  setOrientation(VERTICAL);}  }
class C{  public static void execute(ExecutablePool pool,QueueConnectionImpl primary){  AbstractOp op=new ReadyForEventsOpImpl();  pool.executeOn(primary,op);}  }
class C{  private static <T>void executeScript(final File file,final T pluginInterface){  final List<Pair<String,Object>> bindings=new ArrayList<>();  final ConsoleWriter consoleWriter=new ConsoleWriter(new StringWriter());  bindings.add(new Pair<String,Object>("navi",pluginInterface));  bindings.add(new Pair<String,Object>("SCRIPT_CONSOLE",consoleWriter));  try {    ScriptRunner.runScript(file,bindings);    if (consoleWriter.getOutput() != null) {      NaviLogger.info(consoleWriter.getOutput());    }  } catch (  final Exception exception) {    final String message="E00061: " + "Script caused an error while loading";    final String description=CUtilityFunctions.createDescription(String.format("The script file '%s' could not be loaded because it caused an exception. " + "You should check the stdout console to see errors in the " + "script which were not passed to BinNavi.",file.getAbsoluteFile()),new String[]{"The script contains a bug that caused the exception"},new String[]{"The script was not loaded and the functionality of the " + "script will not be available in BinNavi"});    NaviLogger.severe(message);    CUtilityFunctions.logException(exception);    NaviLogger.severe(consoleWriter.getOutput());    NaviErrorDialog.show(null,message,description,exception);  }}  }
class C{  public String rawBody() throws IOException {  StringBuilder builder=new StringBuilder();  for (int i=_in.read(); i > -1; i=_in.read()) {    builder.append((char)i);  }  return builder.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public TinyDancerBuilder redFlagPercentage(float percentage){  fpsConfig.redFlagPercentage=percentage;  return this;}  }
class C{  public static List<String> execute(ExecutablePool pool){  AbstractOp op=new GetDurableCQsOpImpl();  return (List<String>)pool.execute(op);}  }
class C{  public void update(){  if (canvas.isVisible()) {    canvas.redraw();  }}  }
class C{  public void seekStart(long offset) throws IOException {  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  public Iterator<Entry> entryIterator(GeoCoordTransformation dataTransform) throws IOException, FormatException {  List<Entry> entriesHandle=entries;  if (entriesHandle == null) {    boolean gatherBounds=false;    if (bounds == null) {      bounds=new ESRIBoundingBox();      gatherBounds=true;    }    entriesHandle=readIndexFile(gatherBounds ? bounds : null,dataTransform);    entries=entriesHandle;  }  return new ArrayList<Entry>(entriesHandle).iterator();}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  LogHelper.logMessage("onConfigurationChanged: is landscape" + (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE));  super.onConfigurationChanged(newConfig);  if (videoId != null && player != null) {    ViewGroup.LayoutParams params=videoContainer.getLayoutParams();    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {      if (getActivity() != null) {        actionBarView.setVisibility(View.GONE);        for (        int id : hideableViews) {          getActivity().findViewById(id).setVisibility(View.GONE);        }      }      Point size=new Point();      display.getRealSize(size);      params.height=size.y;      params.width=size.x;      LogHelper.logMessage("x:" + size.x + " y:"+ size.y);      videoContainer.setX(0);      videoContainer.setY(0);      player.setFullscreen(true);    } else     if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {      if (getActivity() != null) {        actionBarView.setVisibility(View.VISIBLE);        for (        int id : hideableViews) {          getActivity().findViewById(id).setVisibility(View.VISIBLE);        }      }      setVideoPostion(this.attachedImgContainer);      player.setFullscreen(false);    }    videoContainer.setLayoutParams(params);  }}  }
class C{  public boolean markUsed(String name){  return used.put(name,Boolean.TRUE) != null;}  }
class C{  private boolean holdsFilledClassIsStaticPolyfillAware(PolyfillValidationState state){  if (!(isContainedInStaticPolyfillAware(state.filledType))) {    final String msg=getMessageForCLF_POLYFILL_STATIC_FILLED_TYPE_NOT_AWARE(state.name);    addIssue(state,msg,CLF_POLYFILL_STATIC_FILLED_TYPE_NOT_AWARE);    return false;  }  return true;}  }
class C{  public static void close(Closeable... closeables){  for (  Closeable c : closeables) {    if (c != null) {      try {        c.close();      } catch (      Exception ex) {        Logger.getLogger(Utilities.class.getName()).log(Level.WARNING,"Couldn't close Closeable",ex);      }    }  }}  }
class C{  private static boolean isAlphanum(char p_char){  return (isAlpha(p_char) || isDigit(p_char));}  }
class C{  protected SVGOMFESpecularLightingElement(){}  }
class C{  private static <Output>void silentRun(@NonNull final ChronosOperation<Output> operation,@NonNull final ChronosOperationResult<Output> operationResult){  try {    final Output output=operation.run();    operationResult.setOutput(output);  } catch (  Exception e) {    operationResult.setException(e);  }}  }
class C{  private void requestFromNextNode(){  boolean complete;  IgniteLogger log0=log;synchronized (this) {    while (!availableNodes.isEmpty()) {      ClusterNode node=availableNodes.poll();      try {        if (log0.isDebugEnabled())         log0.debug("Sending affinity fetch request to remote node [locNodeId=" + ctx.localNodeId() + ", node="+ node+ ']');        ctx.io().send(node,new GridDhtAffinityAssignmentRequest(key.get1(),key.get2()),AFFINITY_POOL);        if (ctx.discovery().node(node.id()) == null) {          U.warn(log0,"Failed to request affinity assignment from remote node (node left grid, will " + "continue to another node): " + node);          continue;        }        pendingNode=node;        break;      } catch (      ClusterTopologyCheckedException ignored) {        U.warn(log0,"Failed to request affinity assignment from remote node (node left grid, will " + "continue to another node): " + node);      }catch (      IgniteCheckedException e) {        U.error(log0,"Failed to request affinity assignment from remote node (will " + "continue to another node): " + node,e);      }    }    complete=pendingNode == null;  }  if (complete)   onDone((GridDhtAffinityAssignmentResponse)null);}  }
class C{  public StandardPieToolTipGenerator(){  this(DEFAULT_TOOLTIP_FORMAT);}  }
class C{  public void testSelected(){  Person person=PopulationUtils.getFactory().createPerson(Id.create(1,Person.class));  Plan plan1=PersonUtils.createAndAddPlan(person,false);  Plan plan2=PersonUtils.createAndAddPlan(person,true);  plan2.setScore(10.0);  Plan plan3=PersonUtils.createAndAddPlan(person,false);  plan3.setScore(-50.0);  KeepSelected selector=new KeepSelected();  assertEquals(plan2,selector.selectPlan(person));  person.setSelectedPlan(plan3);  assertEquals(plan3,selector.selectPlan(person));  person.setSelectedPlan(plan1);  assertEquals(plan1,selector.selectPlan(person));}  }
class C{  private void addRandomLine(final int width,final int height){  int numSegments=random.nextInt(NUM_LINE_SEGMENTS - 1) + 2;  Coordinate coordinates[]=new Coordinate[numSegments];  coordinates[0]=new Coordinate();  coordinates[0].x=random.nextDouble() * WIDTH;  coordinates[0].y=random.nextDouble() * HEIGHT;  for (int i=1; i < coordinates.length; i++) {    do {      int goLeftOrRight=random.nextBoolean() ? -1 : 1;      int goUpOrDown=random.nextBoolean() ? -1 : 1;      coordinates[i]=new Coordinate();      coordinates[i].x=coordinates[i - 1].x + random.nextDouble() * 10 * goLeftOrRight;      coordinates[i].y=coordinates[i - 1].y + random.nextDouble() * 10 * goUpOrDown;    } while (coordinates[i].x > WIDTH - 1 || coordinates[i].y > HEIGHT - 1 || coordinates[i].x < 0.0 || coordinates[i].y < 0.0);  }  LineString line=null;  try {    line=geometryFactory.createLineString(coordinates);  } catch (  Exception e) {    System.err.println(e);  }  objects.addGeometry(new MasonGeometry(line));}  }
class C{  protected void verifyAuthorizedSystemAdminOrTenantOrgUser(List<ACLEntry> aclEntries){  if (isSystemAdmin()) {    return;  }  verifyAuthorizedInTenantOrg(aclEntries);}  }
class C{  private void updateForeground(Color color){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  if (color == null) {    style.removeAttribute(StyleConstants.Foreground);  } else {    StyleConstants.setForeground(style,color);  }}  }
class C{  private CGraphLayouter(){}  }
class C{  @Transactional public List<InstrumentHeader> addToInstrument(final List<Map<String,Object>> paramList){  final List<InstrumentHeader> instrList=new ArrayList<InstrumentHeader>();  InstrumentHeader instrHeader;  InstrumentType instrumentType;  if (paramList != null)   if (LOGGER.isDebugEnabled())   LOGGER.debug("length of paramlist " + paramList.size());  for (  final Map<String,Object> instrMap : paramList) {    instrHeader=new InstrumentHeader();    if (instrMap.get(IS_PAYCHECK) == null)     throw new IllegalArgumentException(IS_PAYCHECK + IS_NULL); else     if (!instrMap.get(IS_PAYCHECK).equals(FinancialConstants.IS_PAYCHECK_ZERO) && !instrMap.get(IS_PAYCHECK).equals(FinancialConstants.IS_PAYCHECK_ONE))     throw new ApplicationRuntimeException("value for " + IS_PAYCHECK + "should be either"+ FinancialConstants.IS_PAYCHECK_ZERO+ "or "+ FinancialConstants.IS_PAYCHECK_ONE); else     instrHeader.setIsPayCheque(instrMap.get(IS_PAYCHECK).toString());    if (instrMap.get(INSTRUMENT_TYPE) == null)     throw new IllegalArgumentException(INSTRUMENT_TYPE + IS_NULL); else {      instrumentType=getInstrumentTypeByType(instrMap.get(INSTRUMENT_TYPE).toString());      if (instrumentType == null)       throw new ApplicationRuntimeException(INSTRUMENT_TYPE + "'" + instrMap.get(INSTRUMENT_TYPE).toString()+ "' is not defined in the system "); else       instrHeader.setInstrumentType(instrumentType);    }    if (instrMap.get(INSTRUMENT_AMOUNT) == null)     throw new IllegalArgumentException(INSTRUMENT_AMOUNT + IS_NULL); else     try {      instrHeader.setInstrumentAmount(new BigDecimal(instrMap.get(INSTRUMENT_AMOUNT).toString()));    } catch (    final NumberFormatException e) {      LOGGER.error(e.getMessage(),e);      throw new ApplicationRuntimeException(INSTRUMENT_AMOUNT + "is not numeric");    }switch (instrumentType.getType()) {case INSTRUMENT_TYPE_CHEQUE:      validateAndAssignCheque(instrHeader,instrMap);    break;case INSTRUMENT_TYPE_DD:  validateAndAssignCheque(instrHeader,instrMap);break;case INSTRUMENT_TYPE_CARD:validateAndAssignCard(instrHeader,instrMap);break;case INSTRUMENT_TYPE_ONLINE:validateAndAssignCard(instrHeader,instrMap);break;case INSTRUMENT_TYPE_ATM:validateAndAssingATM(instrHeader,instrMap);break;case INSTRUMENT_TYPE_ADVICE:validateAndAssingnAdvice(instrHeader,instrMap);break;case INSTRUMENT_TYPE_BANK:validateAndAssingnAdvice(instrHeader,instrMap);break;case INSTRUMENT_TYPE_CASH:validateAndAssignCash(instrHeader,instrMap);break;case INSTRUMENT_TYPE_BANK_TO_BANK:validateAndAssignCash(instrHeader,instrMap);break;case INSTRUMENT_TYPE_ECS:validateAndAssignEcs(instrHeader,instrMap);}instrHeader.setPayee(instrMap.get(PAYEE_NAME) != null ? instrMap.get(PAYEE_NAME).toString() : null);instrHeader.setPayTo(instrMap.get(PAY_TO) != null ? instrMap.get(PAY_TO).toString() : null);if (instrMap.get(DETAIL_TYPE_ID) != null) {final Accountdetailtype detailType=(Accountdetailtype)persistenceService.find("from Accountdetailtype where id=?",Integer.parseInt(instrMap.get(DETAIL_TYPE_ID).toString()));instrHeader.setDetailTypeId(detailType);}instrHeader.setDetailKeyId(instrMap.get(DETAIL_KEY_ID) != null ? (Long)instrMap.get(DETAIL_KEY_ID) : null);instrHeader.setBankBranchName(instrMap.get(BRANCH_NAME) != null ? instrMap.get(BRANCH_NAME).toString() : null);final EgwStatus status=(EgwStatus)persistenceService.find("from EgwStatus where upper(moduletype)=upper('Instrument') and upper(description)=upper('" + FinancialConstants.INSTRUMENT_CREATED_STATUS + "')");if (LOGGER.isInfoEnabled()) LOGGER.info("Created Status of Instrument" + status.getDescription());instrHeader.setStatusId(status);instrHeader.setCreatedDate(new Date());if (LOGGER.isDebugEnabled()) LOGGER.debug("saving instrument details as " + instrHeader.toString());instrumentHeaderService.persist(instrHeader);final InstrumentOtherDetails io=new InstrumentOtherDetails();io.setInstrumentHeaderId(instrHeader);if (instrHeader.getTransactionDate() != null) io.setInstrumentStatusDate(instrHeader.getTransactionDate()); else io.setInstrumentStatusDate(instrHeader.getInstrumentDate());instrumentOtherDetailsService.persist(io);if (LOGGER.isDebugEnabled()) LOGGER.debug("Saved " + io);instrList.add(instrHeader);}if (LOGGER.isDebugEnabled()) LOGGER.debug("returning " + instrList.size() + " instruments");return instrList;}  }
class C{  public byte[] source(){  if (source == null) {    return null;  }  if (sourceAsBytes != null) {    return sourceAsBytes;  }  this.sourceAsBytes=sourceRef().toBytes();  return this.sourceAsBytes;}  }
class C{  public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){  XPStyle xp=XPStyle.getXP();  if (xp != null) {    bounds.x+=2;    bounds.y+=2;    bounds.width-=4;    bounds.height-=4;  } else {    bounds.x+=1;    bounds.y+=1;    bounds.width-=2;    bounds.height-=2;  }  if (!comboBox.isEditable() && xp != null && xp.isSkinDefined(comboBox,Part.CP_READONLY)) {    ListCellRenderer renderer=comboBox.getRenderer();    Component c;    if (hasFocus && !isPopupVisible(comboBox)) {      c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,true,false);    } else {      c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,false,false);    }    c.setFont(comboBox.getFont());    if (comboBox.isEnabled()) {      c.setForeground(comboBox.getForeground());      c.setBackground(comboBox.getBackground());    } else {      c.setForeground(DefaultLookup.getColor(comboBox,this,"ComboBox.disabledForeground",null));      c.setBackground(DefaultLookup.getColor(comboBox,this,"ComboBox.disabledBackground",null));    }    boolean shouldValidate=false;    if (c instanceof JPanel) {      shouldValidate=true;    }    currentValuePane.paintComponent(g,c,comboBox,bounds.x,bounds.y,bounds.width,bounds.height,shouldValidate);  } else {    super.paintCurrentValue(g,bounds,hasFocus);  }}  }
class C{  @Override public boolean isPaintable(){  return true;}  }
class C{  public static boolean checkBusybox(){  if (!new File("/system/bin/busybox").exists() && !new File("/system/xbin/busybox").exists()) {    Log.e(TAG,"Busybox not in xbin or bin!");    return false;  }  try {    new CMDProcessor();    if (!CMDProcessor.runSuCommand("busybox mount").success()) {      Log.e(TAG," Busybox is there but it is borked! ");      return false;    }  } catch (  final NullPointerException e) {    Log.e(TAG,e.getLocalizedMessage().toString());    return false;  }  return true;}  }
class C{  public int deleteAllRows(){  return database.delete(dbHelper.TABLE_NAME,"1",null);}  }
class C{  public TimeRegex(){  super(TIME_REGEX,false,1.0);}  }
class C{  @Override public DPState computeFinal(HGNode tailNode,int i,int j,SourcePath sourcePath,Sentence sentence,Accumulator acc){  return new KenLMState();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void added(MailboxSession session,SortedMap<MessageUid,MessageMetaData> uids,Mailbox mailbox){  listener.event(eventFactory.added(session,uids,mailbox));}  }
class C{  public void cancel(){  cancelCallback();  unregisterReceiver();}  }
class C{  public int read(ByteBuffer dst) throws IOException {  if (!dst.hasRemaining())   return 0;  if (!isHandShakeComplete()) {    if (isBlocking()) {      while (!isHandShakeComplete()) {        processHandshake();      }    } else {      processHandshake();      if (!isHandShakeComplete()) {        return 0;      }    }  }  int purged=readRemaining(dst);  if (purged != 0)   return purged;  assert (inData.position() == 0);  inData.clear();  if (!inCrypt.hasRemaining())   inCrypt.clear(); else   inCrypt.compact();  if (isBlocking() || readEngineResult.getStatus() == Status.BUFFER_UNDERFLOW)   if (socketChannel.read(inCrypt) == -1) {    return -1;  }  inCrypt.flip();  unwrap();  int transfered=transfereTo(inData,dst);  if (transfered == 0 && isBlocking()) {    return read(dst);  }  return transfered;}  }
class C{  public EditableOMText(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  static final public Object deserialize(byte[] b){  if (b == null)   return null;  return deserialize(b,0,b.length);}  }
class C{  public static final String bytesToHexString(byte[] buf){  return bytesToHexString(buf,0,buf.length);}  }
class C{  public void reThrow(String msg) throws EvalError {  prependMessage(msg);  throw this;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("<root>");  toStringHelper(root,buf,1);  return buf.toString();}  }
class C{  private String fetchTableName(String query){  for (  String tableName : mTableNames) {    if (query.contains(tableName)) {      return tableName;    }  }  return "";}  }
class C{  public boolean allowDequeue(String queueName,int numJobs){  MorePreconditions.checkNotBlank(queueName);  Preconditions.checkArgument(numJobs > 0);  ImmutableMap<String,QueueRateLimiter.IFace> queueRateLimitMap=queueRateLimitMapRef.get();  if (queueRateLimitMap != null && queueRateLimitMap.containsKey(queueName)) {    return queueRateLimitMap.get(queueName).allowDequeue(numJobs);  } else {    return true;  }}  }
class C{  public Template(int size){  this.buf=new char[size];}  }
class C{  public boolean putImageWithFullPath(String fullPath,Bitmap theBitmap){  return !(fullPath == null || theBitmap == null) && saveBitmap(fullPath,theBitmap);}  }
class C{  protected void fireActionEvent(ActionEvent evt){  if (isEnabled() && !Display.getInstance().hasDragOccured()) {    dispatcher.fireActionEvent(evt);  }}  }
class C{  public IdentityStoreObjectMapping buildObjectMapping(){  return new IdentityStoreObjectMapping(this._idOfObject,this._objectClassOfObject,this._storeAttributes);}  }
class C{  public Object remove(int posn) throws InvalidNameException {  return impl.remove(posn);}  }
class C{  public NavNode(final String title,final String path){  this(title,path,0);}  }
class C{  public static Variable[] createVariableFromString(String[] line) throws VerifierException {  ArrayList<Variable> variables=new ArrayList<Variable>();  Variable var;  for (int i=1; i < line.length; i++) {    var=createVariableFromString(line[i]);    if (var != null) {      variables.add(var);    }  }  Variable.allVariableName=" ";  return variables.toArray(new Variable[0]);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void updateObjective(String objectiveClass){  try {    Class<? extends Objective> operatorClass=Class.forName(objectiveClass).asSubclass(Objective.class);    Objective operator=operatorClass.newInstance();    this.objective=operator;  } catch (  ClassNotFoundException|InstantiationException|IllegalAccessException ex) {    LOG.log(Level.SEVERE,"Unable to create required objective: " + objectiveClass,ex);    System.exit(1);  }}  }
class C{  synchronized public boolean isTscWatchMode(){  return tscWatchMode;}  }
class C{  public ToStringBuilder append(String fieldName,int[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public static final Position readFEN(String fen) throws ChessParseError {  Position pos=new Position();  String[] words=fen.split(" ");  if (words.length < 2) {    throw new ChessParseError("Too few spaces");  }  int row=7;  int col=0;  for (int i=0; i < words[0].length(); i++) {    char c=words[0].charAt(i);switch (c) {case '1':      col+=1;    break;case '2':  col+=2;break;case '3':col+=3;break;case '4':col+=4;break;case '5':col+=5;break;case '6':col+=6;break;case '7':col+=7;break;case '8':col+=8;break;case '/':row--;col=0;break;case 'P':safeSetPiece(pos,col,row,Piece.WPAWN);col++;break;case 'N':safeSetPiece(pos,col,row,Piece.WKNIGHT);col++;break;case 'B':safeSetPiece(pos,col,row,Piece.WBISHOP);col++;break;case 'R':safeSetPiece(pos,col,row,Piece.WROOK);col++;break;case 'Q':safeSetPiece(pos,col,row,Piece.WQUEEN);col++;break;case 'K':safeSetPiece(pos,col,row,Piece.WKING);col++;break;case 'p':safeSetPiece(pos,col,row,Piece.BPAWN);col++;break;case 'n':safeSetPiece(pos,col,row,Piece.BKNIGHT);col++;break;case 'b':safeSetPiece(pos,col,row,Piece.BBISHOP);col++;break;case 'r':safeSetPiece(pos,col,row,Piece.BROOK);col++;break;case 'q':safeSetPiece(pos,col,row,Piece.BQUEEN);col++;break;case 'k':safeSetPiece(pos,col,row,Piece.BKING);col++;break;default :throw new ChessParseError("Invalid piece");}}if (words[1].length() == 0) {throw new ChessParseError("Invalid side");}pos.setWhiteMove(words[1].charAt(0) == 'w');int castleMask=0;if (words.length > 2) {for (int i=0; i < words[2].length(); i++) {char c=words[2].charAt(i);switch (c) {case 'K':castleMask|=(1 << Position.H1_CASTLE);break;case 'Q':castleMask|=(1 << Position.A1_CASTLE);break;case 'k':castleMask|=(1 << Position.H8_CASTLE);break;case 'q':castleMask|=(1 << Position.A8_CASTLE);break;case '-':break;default :throw new ChessParseError("Invalid castling flags");}}}pos.setCastleMask(castleMask);if (words.length > 3) {String epString=words[3];if (!epString.equals("-")) {if (epString.length() < 2) {throw new ChessParseError("Invalid en passant square");}pos.setEpSquare(getSquare(epString));}}try {if (words.length > 4) {pos.halfMoveClock=Integer.parseInt(words[4]);}if (words.length > 5) {pos.fullMoveCounter=Integer.parseInt(words[5]);}} catch (NumberFormatException nfe) {}int wKings=0;int bKings=0;for (int x=0; x < 8; x++) {for (int y=0; y < 8; y++) {int p=pos.getPiece(Position.getSquare(x,y));if (p == Piece.WKING) {wKings++;} else if (p == Piece.BKING) {bKings++;}}}if (wKings != 1) {throw new ChessParseError("White must have exactly one king");}if (bKings != 1) {throw new ChessParseError("Black must have exactly one king");}Position pos2=new Position(pos);pos2.setWhiteMove(!pos.whiteMove);if (MoveGen.inCheck(pos2)) {throw new ChessParseError("King capture possible");}fixupEPSquare(pos);return pos;}  }
class C{  public void verifyAnnotation(String methodName,String annotationName) throws Exception {  Class clazz=Class.forName(className);  Method method=clazz.getDeclaredMethod(methodName);  Class annotationClazz=Class.forName(annotationName);  java.lang.annotation.Annotation annotation=method.getAnnotation(annotationClazz);  Assert.assertNotNull(annotation);}  }
class C{  public String write(Boolean value){  return value.toString();}  }
class C{  public TimeDuration(final long milliseconds,final Date date){  this(milliseconds,date.getTime());}  }
class C{  public void init(){  pubPanel.setLayout(new BorderLayout());  topic=new JComboBox();  topic.setEditable(true);  topic.setMaximumSize(MQTTFrame.TEXT_FIELD_DIMENSION);  topic.setMaximumRowCount(5);  qosList=new JComboBox(qos);  qosList.setSelectedIndex(0);  qosList.setMaximumSize(MQTTFrame.DROP_DOWN_DIMENSION);  pubData=new JTextArea(3,30);  pubData.setBorder(new BevelBorder(BevelBorder.LOWERED));  pubData.setMargin(MQTTFrame.TEXT_MARGINS);  retained=new JCheckBox();  retained.setSelected(false);  pubLabel=new JLabel(PANEL_TITLE + " - text display");  Font f=pubLabel.getFont();  pubLabel.setFont(new Font(f.getName(),Font.BOLD,f.getSize() + 1));  JPanel topicBox=new JPanel();  topicBox.setLayout(new BoxLayout(topicBox,BoxLayout.X_AXIS));  topicBox.add(new JLabel(" Topic:"));  topicBox.add(topic);  topicBox.add(new JLabel(" QoS:"));  topicBox.add(qosList);  topicBox.add(new JLabel(" Retained:"));  topicBox.add(retained);  JPanel titleAndTopic=new JPanel();  titleAndTopic.setLayout(new GridLayout(2,1));  titleAndTopic.add(pubLabel);  titleAndTopic.add(topicBox);  hexDisplay=false;  hexButton=new JButton("Hex");  hexButton.addActionListener(this);  fileButton=new JButton("File...");  fileButton.setEnabled(true);  fileButton.addActionListener(this);  pubButton=new JButton("Publish");  pubButton.setEnabled(false);  pubButton.addActionListener(this);  JPanel buttons=new JPanel();  buttons.setLayout(new GridLayout(3,1));  buttons.add(pubButton);  buttons.add(fileButton);  buttons.add(hexButton);  JPanel buttonLayout=new JPanel();  buttonLayout.add(buttons);  pubPanel.add(titleAndTopic,BorderLayout.NORTH);  pubPanel.add(new JScrollPane(pubData),BorderLayout.CENTER);  pubPanel.add(buttonLayout,BorderLayout.EAST);}  }
class C{  public int evaluateAt(int e){  int result=coefficients[degree];  for (int i=degree - 1; i >= 0; i--) {    result=field.mult(result,e) ^ coefficients[i];  }  return result;}  }
class C{  @Override final public void resetCounter(){  super.resetCounter();}  }
class C{  public boolean isReserved(){  return false;}  }
class C{  public void fillArc(int x,int y,int width,int height,int startAngle,int arcAngle){  mGraphics.fillArc(x,y,width,height,startAngle,arcAngle);}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder(key.toString());  if (isTOP())   return s.append("{TOP}").toString();  if (isBOTTOM())   return s.append("{BOTTOM}").toString();  s.append("{");  for (int i=0; i < size; i++) {    s.append(" ").append(numbers[i]);  }  s.append("}");  return s.toString();}  }
class C{  public Object nextElement() throws NoSuchElementException {  return nextToken();}  }
class C{  public void updateMktDepthL2(int tickerId,int position,String marketMaker,int operation,int side,double price,int size){  _log.debug("updateMktDepthL2: " + tickerId + " "+ position+ " "+ operation+ " "+ side+ " "+ price+ " "+ size);}  }
class C{  public boolean isShared(){  return shared;}  }
class C{  public Queue<Env<AttrContext>> attribute(Queue<Env<AttrContext>> envs){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  while (!envs.isEmpty())   results.append(attribute(envs.remove()));  return stopIfError(CompileState.ATTR,results);}  }
class C{  public void syncTraktTvShowCollection(List<TvShow> tvShowsInTmm){  if (!isEnabled()) {    return;  }  List<TvShow> tvShows=new ArrayList<>(tvShowsInTmm);  List<BaseShow> traktShows=new ArrayList<>();  try {    traktShows=TRAKT.sync().collectionShows(Extended.DEFAULT_MIN);  } catch (  RetrofitError e) {    handleRetrofitError(e);    return;  }catch (  OAuthUnauthorizedException e) {    try {      refreshAccessToken();      traktShows=TRAKT.sync().collectionShows(Extended.DEFAULT_MIN);    } catch (    Exception e1) {      if (e1.getCause() instanceof RetrofitError) {        handleRetrofitError((RetrofitError)e1.getCause());      } else {        LOGGER.error("could not retrieve trakt.tv response: ",e1.getMessage());      }      return;    }  }  LOGGER.info("You have " + traktShows.size() + " TvShows in your Trakt.tv collection");  Set<TvShowEpisode> episodesInTrakt=new HashSet<>();  for (  BaseShow traktShow : traktShows) {    for (    TvShow tmmShow : tvShows) {      if (matches(tmmShow,traktShow.show.ids)) {        boolean dirty=updateIDs(tmmShow,traktShow.show.ids);        if (traktShow.last_collected_at != null && !(traktShow.last_collected_at.toDate().equals(tmmShow.getDateAdded()))) {          LOGGER.trace("Marking TvShow '" + tmmShow.getTitle() + "' as collected on "+ traktShow.last_collected_at.toDate()+ " (was "+ tmmShow.getDateAddedAsString()+ ")");          tmmShow.setDateAdded(traktShow.last_collected_at.toDate());          dirty=true;        }        for (        BaseSeason bs : traktShow.seasons) {          for (          BaseEpisode be : bs.episodes) {            TvShowEpisode tmmEP=tmmShow.getEpisode(bs.number,be.number);            if (tmmEP == null) {              continue;            }            episodesInTrakt.add(tmmEP);            if (be.collected_at != null && !(be.collected_at.toDate().equals(tmmEP.getDateAdded()))) {              tmmEP.setDateAdded(be.collected_at.toDate());              tmmEP.writeNFO();              tmmEP.saveToDb();            }          }        }        if (dirty) {          tmmShow.writeNFO();          tmmShow.saveToDb();        }      }    }  }  LOGGER.info("Adding " + tvShows.size() + " TvShows to Trakt.tv collection");  for (  TvShow tvShow : tvShows) {    SyncShow show=toSyncShow(tvShow,false,episodesInTrakt);    if (show == null) {      continue;    }    try {      SyncItems items=new SyncItems().shows(show);      response=TRAKT.sync().addItemsToCollection(items);      LOGGER.debug("Trakt add-to-library status: " + tvShow.getTitle());      printStatus(response);    } catch (    RetrofitError e) {      handleRetrofitError(e);    }catch (    OAuthUnauthorizedException e) {      handleRetrofitError((RetrofitError)e.getCause());    }  }}  }
class C{  private Group parseGroupResult(ResultSet resultSet) throws SQLException, AdeInternalException {  int uid=resultSet.getInt("GROUP_INTERNAL_ID");  String name=resultSet.getString("GROUP_NAME");  Short groupTypeVal=resultSet.getShort("GROUP_TYPE");  GroupType groupType=GroupType.getGroupType(groupTypeVal);  Short dataTypeVal=resultSet.getShort("DATA_TYPE");  DataType dataType=DataType.getDataType(dataTypeVal);  short evaluationOrder=resultSet.getShort("EVALUATION_ORDER");  int rid=resultSet.getInt("RULE_INTERNAL_ID");  String ruleName=getRuleName(rid);  return new Group(uid,name,groupType,dataType,evaluationOrder,ruleName);}  }
class C{  public DTMIterator createDTMIterator(Object xpathCompiler,int pos){  return m_dtmManager.createDTMIterator(xpathCompiler,pos);}  }
class C{  public T caseVariableStatement(VariableStatement object){  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n;  int numRecs;  ShapeType shapeType;  double distanceTolerance=0;  BoundingBox[] boundingBoxes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  distanceTolerance=Double.parseDouble(args[2]);  if (distanceTolerance < 0) {    showFeedback("The buffer size has not been set properly.");    return;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE && shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only operates on shapefiles of a POLYLINE or POLYGON shape type.");      return;    }    numRecs=input.getNumberOfRecords();    boundingBoxes=new BoundingBox[numRecs];    AttributeTable table=input.getAttributeTable();    ShapeFile output=new ShapeFile(outputFile,shapeType,table.getAllFields());    output.setProjectionStringFromOtherShapefile(input);    ArrayList<com.vividsolutions.jts.geom.Geometry> geoms=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    int oldProgress=-1;    n=0;    for (    ShapeFileRecord record : input.records) {      int recNum=record.getRecordNumber();      double[][] points=record.getGeometry().getPoints();      double minX=Double.POSITIVE_INFINITY;      double maxX=Double.NEGATIVE_INFINITY;      double minY=Double.POSITIVE_INFINITY;      double maxY=Double.NEGATIVE_INFINITY;      for (i=0; i < points.length; i++) {        if (points[i][0] < minX) {          minX=points[i][0];        }        if (points[i][0] > maxX) {          maxX=points[i][0];        }        if (points[i][1] < minY) {          minY=points[i][1];        }        if (points[i][1] > maxY) {          maxY=points[i][1];        }      }      boundingBoxes[recNum - 1]=new BoundingBox(minX,minY,maxX,maxY);      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTS=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTS.length; a++) {          recJTS[a].setUserData(recNum);          geoms.add(recJTS[a]);        }      }      progress=(int)(100f * n / (numRecs - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    n=0;    oldProgress=-1;    int numGeoms=geoms.size();    int recNum1, recNum2;    for (i=0; i < numGeoms; i++) {      recNum1=(int)geoms.get(i).getUserData() - 1;      for (j=i + 1; j < numGeoms; j++) {        recNum2=(int)geoms.get(j).getUserData() - 1;        if (boundingBoxes[recNum1].near(boundingBoxes[recNum2],distanceTolerance * 10)) {          com.vividsolutions.jts.geom.Geometry[] geomsResult=GeometrySnapper.snap(geoms.get(i),geoms.get(j),distanceTolerance);          geomsResult[0].setUserData(recNum1 + 1);          geomsResult[1].setUserData(recNum2 + 1);          geoms.set(i,geomsResult[0]);          geoms.set(j,geomsResult[1]);        }      }      progress=(int)(100f * n / (numGeoms - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    n=0;    oldProgress=-1;    for (    com.vividsolutions.jts.geom.Geometry g : geoms) {      int recNum=(int)g.getUserData();      if (g instanceof com.vividsolutions.jts.geom.Polygon && shapeType.getBaseType() == ShapeType.POLYGON) {        com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[p.getNumInteriorRing() + 1];        Coordinate[] coords=p.getExteriorRing().getCoordinates();        if (Topology.isClockwisePolygon(coords)) {          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }        } else {          for (i=coords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }        }        for (int b=0; b < p.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          coords=p.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Geometry wbGeometry;        if (shapeType == ShapeType.POLYGON) {          wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        } else         if (shapeType == ShapeType.POLYGONZ) {          PolygonZ pz=(PolygonZ)input.getRecord(recNum).getGeometry();          double[] zArray=pz.getzArray();          double[] mArray=pz.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolygonZ(parts,pl.getPointsArray(),zArray,mArray);        } else {          PolygonM pm=(PolygonM)input.getRecord(recNum).getGeometry();          double[] mArray=pm.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolygonM(parts,pl.getPointsArray(),mArray);        }        output.addRecord(wbGeometry,table.getRecord(recNum - 1));      } else       if (g instanceof com.vividsolutions.jts.geom.LineString && shapeType.getBaseType() == ShapeType.POLYLINE) {        com.vividsolutions.jts.geom.LineString p=(com.vividsolutions.jts.geom.LineString)g;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts={0};        Coordinate[] coords=p.getCoordinates();        for (i=0; i < coords.length; i++) {          pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Geometry wbGeometry;        if (shapeType == ShapeType.POLYLINE) {          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());        } else         if (shapeType == ShapeType.POLYLINEZ) {          PolyLineZ pz=(PolyLineZ)input.getRecord(recNum).getGeometry();          double[] zArray=pz.getzArray();          double[] mArray=pz.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLineZ(parts,pl.getPointsArray(),zArray,mArray);        } else {          PolyLineM pm=(PolyLineM)input.getRecord(recNum).getGeometry();          double[] mArray=pm.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLineM(parts,pl.getPointsArray(),mArray);        }        output.addRecord(wbGeometry,table.getRecord(recNum - 1));      }      progress=(int)(100f * n / (numGeoms - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (xctxt.isSecureProcessing())   throw new javax.xml.transform.TransformerException(XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{toString()}));  XObject result;  Vector argVec=new Vector();  int nArgs=m_argVec.size();  for (int i=0; i < nArgs; i++) {    Expression arg=(Expression)m_argVec.elementAt(i);    XObject xobj=arg.execute(xctxt);    xobj.allowDetachToRelease(false);    argVec.addElement(xobj);  }  ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();  Object val=extProvider.extFunction(this,argVec);  if (null != val) {    result=XObject.create(val,xctxt);  } else {    result=new XNull();  }  return result;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public static void auditFile(DbClient dbClient,OperationTypeEnum auditType,boolean operationalStatus,String description,Object... descparams){  AuditLogManager auditMgr=AuditLogManagerFactory.getAuditLogManager();  auditMgr.setDbClient(dbClient);  auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,description,descparams);}  }
class C{  protected void initExceptionHandlers(boolean isConnected){  ExceptionHandlers handlers=AppBeans.get("cuba_ExceptionHandlers",ExceptionHandlers.class);  if (isConnected) {    handlers.createByConfiguration();  } else {    handlers.createMinimalSet();  }}  }
class C{  @Override public void stopScan(){  lock.lock();  try {    if (!State.NOT_STARTED.equals(state) && !State.FINISHED.equals(state)) {      spiderThread.stopScan();      state=State.FINISHED;    }  }  finally {    lock.unlock();  }}  }
class C{  protected boolean hasReference(Object obj){  return refMap.containsKey(new IdentityWrapper(obj));}  }
class C{  public int missingArcs(BayesNet other){  try {    Sync(other);    int nMissing=0;    for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {      for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {        int nParent=m_ParentSets[iAttribute].getParent(iParent);        if (!other.getParentSet(m_order[iAttribute]).contains(m_order[nParent]) && !other.getParentSet(m_order[nParent]).contains(m_order[iAttribute])) {          nMissing++;        }      }    }    return nMissing;  } catch (  Exception e) {    System.err.println(e.getMessage());    return 0;  }}  }
class C{  void enterState(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrremovechild1.class,args);}  }
class C{  public XMLDocument addStylesheet(String href){  return addStylesheet(href,"text/xsl");}  }
class C{  public static String encode(String string,Charset encoding){  checkNotNull(string);  checkNotNull(encoding);  if (encoding.equals(DEFAULT_ENCODING)) {    return encode(string);  } else {    try {      return FastURLEncoder.encode(string,encoding.name());    } catch (    UnsupportedEncodingException impossible) {      throw new AssertionError(impossible);    }  }}  }
class C{  public QuickOpenIntIntHashMap(int initialCapacity){  this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor);}  }
class C{  public void testResourcesAvailable(){  new BasqueAnalyzer().close();}  }
class C{  public float dot(Vector2 that){  return Vector2.dot(this,that);}  }
class C{  @Override protected void dispatchDraw(Canvas canvas){  canvas.clipRect(new Rect(0,0,clipX,canvas.getHeight()));  super.dispatchDraw(canvas);}  }
class C{  public synchronized Panel removeAllComponents(){  for (  Component component : new ArrayList<Component>(components)) {    removeComponent(component);  }  return this;}  }
class C{  private void updateStage(Operation op,SubStage stage){  TransactionServiceState existing=getState(op);  existing.taskSubStage=stage;  setState(op,existing);}  }
class C{  public FileImageOutputStream(File f) throws FileNotFoundException, IOException {  this(f == null ? null : new RandomAccessFile(f,"rw"));}  }
class C{  public void updateFirewallLabel(boolean notFirewalled){  if (notFirewalled) {    _firewallStatus.setIcon(GUIMediator.getThemeImage("firewall_no"));    _firewallStatus.setToolTipText(I18n.tr("FrostWire has not detected a firewall"));  } else {    _firewallStatus.setIcon(GUIMediator.getThemeImage("firewall"));    _firewallStatus.setToolTipText(I18n.tr("FrostWire has detected a firewall"));  }}  }
class C{  public void mousePressed(MouseEvent e){  if (!slider.isEnabled()) {    return;  }  calculateGeometry();  currentMouseX=e.getX();  currentMouseY=e.getY();  if (slider.isRequestFocusEnabled()) {    slider.requestFocus();  }  if (thumbRect.contains(currentMouseX,currentMouseY)) {    if (UIManager.getBoolean("Slider.onlyLeftMouseButtonDrag") && !SwingUtilities.isLeftMouseButton(e)) {      return;    }switch (slider.getOrientation()) {case JSlider.VERTICAL:      offset=currentMouseY - thumbRect.y;    break;case JSlider.HORIZONTAL:  offset=currentMouseX - thumbRect.x;break;}isDragging=true;return;}if (!SwingUtilities.isLeftMouseButton(e)) {return;}isDragging=false;slider.setValueIsAdjusting(true);Dimension sbSize=slider.getSize();int direction=POSITIVE_SCROLL;switch (slider.getOrientation()) {case JSlider.VERTICAL:if (thumbRect.isEmpty()) {int scrollbarCenter=sbSize.height / 2;if (!drawInverted()) {direction=(currentMouseY < scrollbarCenter) ? POSITIVE_SCROLL : NEGATIVE_SCROLL;} else {direction=(currentMouseY < scrollbarCenter) ? NEGATIVE_SCROLL : POSITIVE_SCROLL;}} else {int thumbY=thumbRect.y;if (!drawInverted()) {direction=(currentMouseY < thumbY) ? POSITIVE_SCROLL : NEGATIVE_SCROLL;} else {direction=(currentMouseY < thumbY) ? NEGATIVE_SCROLL : POSITIVE_SCROLL;}}break;case JSlider.HORIZONTAL:if (thumbRect.isEmpty()) {int scrollbarCenter=sbSize.width / 2;if (!drawInverted()) {direction=(currentMouseX < scrollbarCenter) ? NEGATIVE_SCROLL : POSITIVE_SCROLL;} else {direction=(currentMouseX < scrollbarCenter) ? POSITIVE_SCROLL : NEGATIVE_SCROLL;}} else {int thumbX=thumbRect.x;if (!drawInverted()) {direction=(currentMouseX < thumbX) ? NEGATIVE_SCROLL : POSITIVE_SCROLL;} else {direction=(currentMouseX < thumbX) ? POSITIVE_SCROLL : NEGATIVE_SCROLL;}}break;}if (shouldScroll(direction)) {scrollDueToClickInTrack(direction);}if (shouldScroll(direction)) {scrollTimer.stop();scrollListener.setDirection(direction);scrollTimer.start();}}  }
class C{  public static StringResourceModel createStringResourceModel(final Component component,final String resourceKey,final Map<String,Object> parameters){  if (parameters != null) {    final ValueMap params=new ValueMap(parameters);    return new StringResourceModel(resourceKey,component,new Model<ValueMap>(params));  }  return new StringResourceModel(resourceKey,component,null);}  }
class C{  public FixedSizeRandomPartition(int numSeeds,long randomSeed){  random=new Random(randomSeed);  this.n=numSeeds;}  }
class C{  public void add(StatisticsChart other) throws AdeInternalException {  if (other.m_doubleStats != null) {    for (    Map.Entry<String,Double> val : other.m_doubleStats.entrySet()) {      setStat(val.getKey(),val.getValue());    }  }  if (other.m_stringStats != null) {    for (    Map.Entry<String,String> val : other.m_stringStats.entrySet()) {      setStat(val.getKey(),val.getValue());    }  }}  }
class C{  public AttributeMapping select(Domain domain,DimensionIndex index,Attribute attr) throws ScopeException, SQLScopeException {  ExpressionAST expr=getUniverse().getParser().parse(domain,attr);  ISelectPiece piece=select.select(expr);  piece.addComment(index.getDimensionName() + "/" + attr.getName()+ " (Attribute)");  groupBy(index,piece);  if (this.strategy == Strategy.MIXED) {    piece=mixedSelect.select(piece);    mixedSelect.groupingSets(index.getRoot(),piece);  }  AttributeMapping attrmap=new AttributeMapping(piece,attr);  return attrmap;}  }
class C{  public void initializeDocument(Document doc){  Map<String,Double> d=new Hashtable<String,Double>();  double numDocs=wordlex == null ? 0 : wordlex.getNumDocs();  for (int i=0; i < doc.tags.length; i++) {    if (wordlex == null) {      int rindex=random.nextInt(doc.words.length + 1);      if (rindex < doc.words.length) {        doc.reason[i]=doc.words[rindex];      } else {        doc.reason[i]=TagAllocationModel.NOISE;      }    } else {      d.clear();      double sampleWeight=0;      for (int j=0; j < doc.words.length; j++) {        Word w=wordlex.getWord(doc.words[j]);        if (w != null) {          double idf=numDocs / w.getDocumentFrequency();          d.put(doc.words[j],idf);          sampleWeight+=idf;        }      }      d.put(TagAllocationModel.NOISE,sampleWeight / d.size());      doc.reason[i]=sample(d);    }    if (!locked) {      ntw.inc(doc.tags[i],doc.reason[i],1);    }  }  for (  String word : doc.words) {    nw.inc(word,doc.tags.length);  }}  }
class C{  private void collectBoundaryTouchEdge(DirectedEdge de,int opCode,List edges){  Label label=de.getLabel();  if (de.isLineEdge())   return;  if (de.isVisited())   return;  if (de.isInteriorAreaEdge())   return;  if (de.getEdge().isInResult())   return;  Assert.isTrue(!(de.isInResult() || de.getSym().isInResult()) || !de.getEdge().isInResult());  if (OverlayOp.isResultOfOp(label,opCode) && opCode == OverlayOp.INTERSECTION) {    edges.add(de.getEdge());    de.setVisitedEdge(true);  }}  }
class C{  public boolean contains(int x,int y,int z){  return contains(new BlockPosition(x,y,z));}  }
class C{  public Exception(String string){  super(string);}  }
class C{  public boolean canSetInt(){  return canSet(int.class);}  }
class C{  static public void validateDirectoryFail(TestSuite suite,String name){  TestSuite subsuite=new TestSuite("Directory " + name + " validation");  suite.addTest(subsuite);  if (System.getProperty("jmri.skipschematests","false").equals("true"))   return;  java.io.File dir=new java.io.File(name);  java.io.File[] files=dir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    if (files[i].getName().endsWith(".xml")) {      subsuite.addTest(new CheckOneFileFails(files[i]));    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private MapperBuilder(Class<?> source){  this.source=source;}  }
class C{  protected void cacheCtClass(String classname,CtClass c,boolean dynamic){  classes.put(classname,c);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.897 -0500",hash_original_method="FE9B399F97E79B5140A06EB88BCEBC31",hash_generated_method="FE9B399F97E79B5140A06EB88BCEBC31") JSONStringer open(Scope empty,String openBracket) throws JSONException {  if (stack.isEmpty() && out.length() > 0) {    throw new JSONException("Nesting problem: multiple top-level roots");  }  beforeValue();  stack.add(empty);  out.append(openBracket);  return this;}  }
class C{  protected Container createSymbolTable(){  char[] symbolArray=getSymbolTable();  Container symbols=new Container(new GridLayout(symbolArray.length / 5,5));  int slen=symbolArray.length;  for (int iter=0; iter < slen; iter++) {    Button button=new Button(new Command("" + symbolArray[iter]));    button.setUIID("VKBButton");    button.setAlignment(CENTER);    symbols.addComponent(button);  }  return symbols;}  }
class C{  public Sequence findSequence(String sequenceName){  return sequences.get(sequenceName);}  }
class C{  public DESKeySpec(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new NullPointerException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  this.key=new byte[DES_KEY_LEN];  System.arraycopy(key,offset,this.key,0,DES_KEY_LEN);}  }
class C{  public boolean forEachEntry(TIntFloatProcedure procedure){  byte[] states=_states;  int[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  private static void checkResultListOrdered(VOServiceListResult result,int... indices){  int pos=0;  for (  int index : indices) {    assertEquals("Expected service at index " + (index) + " to be at position "+ pos+ " in the result list. Service key ",allServices.get(index).getKey(),result.getServices().get(pos).getKey());    pos++;  }  assertEquals(indices.length,result.getResultSize());}  }
class C{  public int subtreeDepth() throws UnsupportedOperationException {  throw new UnsupportedOperationException("subtreeDepth not supported for X400Address");}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  void release(Sample sample){  sample.next=head;  head=sample;}  }
class C{  private ResultContentEvent newResultContentEvent(double[] prediction,InstanceContentEvent inEvent){  ResultContentEvent rce=new ResultContentEvent(inEvent.getInstanceIndex(),inEvent.getInstance(),inEvent.getClassId(),prediction,inEvent.isLastEvent());  rce.setClassifierIndex(this.processorId);  rce.setEvaluationIndex(inEvent.getEvaluationIndex());  return rce;}  }
class C{  protected void broadcast(CallEvent event){  if (mCallEventListener != null) {    mCallEventListener.receive(event);  }}  }
class C{  public void pushDepth() throws IOException {  _indentDepth+=2;}  }
class C{  public boolean hasExportDocIds(){  return hasRepeatingExtension(ExportDocId.class);}  }
class C{  public static CatchTable build(RopMethod method,int[] order,BlockAddresses addresses){  int len=order.length;  BasicBlockList blocks=method.getBlocks();  ArrayList<CatchTable.Entry> resultList=new ArrayList<CatchTable.Entry>(len);  CatchHandlerList currentHandlers=CatchHandlerList.EMPTY;  BasicBlock currentStartBlock=null;  BasicBlock currentEndBlock=null;  for (int i=0; i < len; i++) {    BasicBlock block=blocks.labelToBlock(order[i]);    if (!block.canThrow()) {      continue;    }    CatchHandlerList handlers=handlersFor(block,addresses);    if (currentHandlers.size() == 0) {      currentStartBlock=block;      currentEndBlock=block;      currentHandlers=handlers;      continue;    }    if (currentHandlers.equals(handlers) && rangeIsValid(currentStartBlock,block,addresses)) {      currentEndBlock=block;      continue;    }    if (currentHandlers.size() != 0) {      CatchTable.Entry entry=makeEntry(currentStartBlock,currentEndBlock,currentHandlers,addresses);      resultList.add(entry);    }    currentStartBlock=block;    currentEndBlock=block;    currentHandlers=handlers;  }  if (currentHandlers.size() != 0) {    CatchTable.Entry entry=makeEntry(currentStartBlock,currentEndBlock,currentHandlers,addresses);    resultList.add(entry);  }  int resultSz=resultList.size();  if (resultSz == 0) {    return CatchTable.EMPTY;  }  CatchTable result=new CatchTable(resultSz);  for (int i=0; i < resultSz; i++) {    result.set(i,resultList.get(i));  }  result.setImmutable();  return result;}  }
class C{  public String toPattern(){  return pattern;}  }
class C{  public static void registerAutoCompleteController(ICorporeaAutoCompleteController controller){  autoCompleteControllers.add(controller);}  }
class C{  @Inline private static int pagesForSizeClass(int blockSizeClass){  return 1 << (LOG_MIN_BLOCK + blockSizeClass - LOG_BYTES_IN_PAGE);}  }
class C{  protected boolean isInitialized(){  return initialized;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_PERIOD___TRACE_PERIOD_1:    setTrace_period_1(TRACE_PERIOD_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public OverpassFilterQuery tag(String name){  builder.standaloneParam(name);  return this;}  }
class C{  public List<Order> fetchOrders(int startIndex,int num){  int endIndex=startIndex + num > orders.size() ? orders.size() : startIndex + num;  return orders.subList(startIndex,endIndex);}  }
class C{  public LocationStore(Context context,int encryptionMode) throws IllegalArgumentException {  store=new StorageBase(context,encryptionMode);}  }
class C{  public static MapWayAttFilter createAnyWayFilter(){  MapWayAttFilter filter=new MapWayAttFilter("highway");  filter.setAccepted("motorway");  filter.setAccepted("motorway_link");  filter.setAccepted("trunk");  filter.setAccepted("trunk_link");  filter.setAccepted("primary");  filter.setAccepted("primary_link");  filter.setAccepted("secondary");  filter.setAccepted("tertiary");  filter.setAccepted("road");  filter.setAccepted("residential");  filter.setAccepted("living_street");  filter.setAccepted("pedestrian");  filter.setAccepted("service");  filter.setAccepted("track");  filter.setAccepted("cycleway");  filter.setAccepted("path");  filter.setAccepted("footway");  filter.setAccepted("steps");  filter.setAccepted("unclassified");  return filter;}  }
class C{  public Strategy withExamples(int examples){  return new Strategy(prng,examples,shrinkCycles,reporter);}  }
class C{  @Override public synchronized void close() throws IOException {  buffer=null;  notifyAll();}  }
class C{  public void addStructuralNodeModifier(StructuralNodeModifier snm){  this.snms.add(snm);  this.fireTableRowsInserted(this.snms.size() - 1,this.snms.size() - 1);}  }
class C{  public static boolean isSorted(long[] array){  if (array == null || array.length < 2) {    return true;  }  long previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final long current=array[i];    if (NumberUtils.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public synchronized ZooKeeperClientBuilder uri(URI uri){  this.zkServers=DLUtils.getZKServersFromDLUri(uri);  return this;}  }
class C{  public static TLCState parseState(String input,String modelName){  int index=input.indexOf(COLON);  int index2=input.indexOf(CR,index);  if (index2 == -1) {    index2=input.length();  }  int number=Integer.parseInt(input.substring(0,index));  String label=input.substring(index + 1,index2);  if (label.indexOf(STUTTERING) != -1) {    return STUTTERING_STATE(number,modelName);  } else   if (label.indexOf(BACK_TO_STATE) != -1) {    final TLCState state=BACK_TO_STATE(number,modelName);    state.setLocation(Location.parseLocation(label.substring(" Back to State: ".length(),label.length())));    return state;  } else {    TLCState state=new TLCState(number,modelName);    state.label=label;    state.variablesAsString=input.substring(index2 + 1);    state.variables=TLCState.parseVariables(state.variablesAsString);    state.setLocation(Location.parseLocation(label));    return state;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ObjectName monitorGemFireHealth() throws MalformedObjectNameException {  GemFireHealthJmxImpl health=(GemFireHealthJmxImpl)getGemFireHealth();  health.ensureMBeansAreRegistered();  return health.getObjectName();}  }
class C{  public static RadioButton createToggle(Command cmd,ButtonGroup bg){  RadioButton rb=new RadioButton(cmd.getCommandName(),cmd.getIcon());  rb.setCommand(cmd);  bg.add(rb);  rb.setToggle(true);  return rb;}  }
class C{  public GridLayerHelper(final MapContent content,final Layer layer){  super(content,null);  Object rasterSource=null;  try (FeatureIterator<?> iter=layer.getFeatureSource().getFeatures().features()){    final String gridAttrName=Utils.getGridAttributeName(layer);    rasterSource=iter.next().getProperty(gridAttrName).getValue();  } catch (  final Exception ex) {    throw new IllegalStateException("Unable to access raster feature data",ex);  }  GridCoverage2D cov=null;  try {    if (GridCoverage2DReader.class.isAssignableFrom(rasterSource.getClass())) {      cov=((GridCoverage2DReader)rasterSource).read(null);    } else {      cov=(GridCoverage2D)rasterSource;    }    this.covRef=new WeakReference<GridCoverage2D>(cov);  } catch (  final Exception ex) {    throw new IllegalArgumentException(ex);  }  setCRS(cov.getCoordinateReferenceSystem());}  }
class C{  public BasicTacticalSymbolAttributes(Double scale,Material interiorMaterial,Double opacity,Font textModifierFont,Material textModifierMaterial){  if (scale != null && scale < 0d) {    String msg=Logging.getMessage("generic.ScaleOutOfRange",scale);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (opacity != null && (opacity < 0d || opacity > 1d)) {    String msg=Logging.getMessage("generic.OpacityOutOfRange",opacity);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.scale=scale;  this.interiorMaterial=interiorMaterial;  this.opacity=opacity;  this.textModifierFont=textModifierFont;  this.textModifierMaterial=textModifierMaterial;}  }
class C{  public Resources addResources(List<String> resources){  Resources prop=new Resources(resources);  addResources(prop);  return prop;}  }
class C{  public void testConstructorSignBytesNegative4(){  byte aBytes[]={127,56,100,-2};  int aSign=-1;  byte rBytes[]={-128,-57,-101,2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isAPIModeledMethod(SootMethod m){  return api_modeled_methods.contains(m);}  }
class C{  @Override public void send(Object message) throws RemotingException {  send(message,getUrl().getParameter(Constants.SENT_KEY,false));}  }
class C{  public void addOperatorsToSelection(List<Operator> selectedOperators){  List<Operator> newList=new ArrayList<>(getSelectedOperators().size() + selectedOperators.size());  newList.addAll(getSelectedOperators());  newList.addAll(selectedOperators);  this.selectedOperators=Collections.unmodifiableList(newList);}  }
class C{  public URLStreamManager(URL url){  this.url=url;}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case DomPackage.CONTENT_NODE__OWNER:    return eInternalContainer().eInverseRemove(this,DomPackage.COMPOSITE__CONTENTS,Composite.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  private static void swap(long[] x,int a,int b){  long t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public void doCancel(final Tradestrategy tradestrategy){  try {    if (m_brokerModel.isRealtimeBarsRunning(tradestrategy)) {      m_brokerModel.onCancelRealtimeBars(tradestrategy);      this.setStatusBarMessage("Realtime data has been cancelled for Symbol: " + tradestrategy.getContract().getSymbol(),BasePanel.INFORMATION);    }    if (tradingdayPanel.isStrategyWorkerRunning(tradestrategy)) {      tradingdayPanel.killAllStrategyWorkersForTradestrategy(tradestrategy);      this.setStatusBarMessage("Strategy has been cancelled for Symbol: " + tradestrategy.getContract().getSymbol(),BasePanel.INFORMATION);    }  } catch (  Exception ex) {    this.setErrorMessage("Could not cancel strategy.",ex.getMessage(),ex);  }}  }
class C{  private void startlistening(CoordinatorImp coordinator){  Set<TxState> forgetStates=new HashSet<TxState>();  for (  TxState txState : TxState.values()) {    if (txState.isFinalStateForOltp()) {      forgetStates.add(txState);    }  }  for (  TxState txState : forgetStates) {    coordinator.addFSMEnterListener(this,txState);  }  if (forgetStates.contains(coordinator.getState()))   removeCoordinator(coordinator);}  }
class C{  @SuppressWarnings("unused") @Test public void testFinalStateEnterSequenceCall(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    EventDefinition e1=_createEventDefinition("e1",s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);      FinalState fs=_createFinalState(r);      Transition t_s1_fs=_createTransition(s1,fs);      _createReactionTrigger(t_s1_fs);      _createRegularEventSpec(e1,(ReactionTrigger)t_s1_fs.getTrigger());    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  ExecutionState _fs=flow.getStates().get(1);  assertEquals("sc.r._final_",_fs.getName());  assertNull(_fs.getEntryAction());  assertNull(_fs.getExitAction());  Sequence cycle=_s1.getReactSequence();  If _if=(If)SCTTestUtil.flattenSequenceStepsAsList(cycle).get(0);  assertCall(_if.getThenStep(),_s1.getReactions().get(0).getEffect());  Sequence _seq=(Sequence)_s1.getReactions().get(0).getEffect();  assertCall(_seq,1,_fs.getEnterSequences().get(0));}  }
class C{  private boolean advance() throws IOException {  if (input.incrementToken()) {    String urlString=termAttribute.toString();    if ((Strings.isNullOrEmpty(urlString) || "null".equals(urlString)) && !allowMalformed && !passthrough) {      return false;    }    try {      tokens=tokenize(urlString);    } catch (    IOException e) {      if (e.getMessage().contains("Malformed URL")) {        if (allowMalformed) {          tokens=ImmutableList.of(new Token(urlString,URLPart.WHOLE,0,urlString.length()));        } else {          throw new MalformedURLException("Malformed URL: " + urlString);        }      }      throw e;    }    if (tokens.isEmpty()) {      return false;    }    iterator=tokens.iterator();    return true;  } else {    return false;  }}  }
class C{  public static String randomNumeric(int count){  return random(count,false,true);}  }
