class C{  public String globalInfo(){  return "An instance filter that adds a new attribute to the dataset." + " The new attribute will contain all missing values.";}  }
class C{  private boolean looksLikeMethodDeclLBrace(int offset){  nextToken();  while (true) {switch (fToken) {case Symbols.TokenTHROWS:case Symbols.TokenIDENT:case Symbols.TokenCOMMA:case Symbols.TokenAT:case Symbols.TokenLBRACKET:case Symbols.TokenRBRACKET:      break;case Symbols.TokenOTHER:    try {      if (fDocument.getChar(fPosition) != '.') {        return false;      }    } catch (    BadLocationException e) {      return false;    }  break;case Symbols.TokenRPAREN:skipScope();int storedPos=fPosition;if (looksLikeMethodDecl()) return true;fPosition=storedPos;break;case Symbols.TokenEOF:return false;default :return false;}nextToken();}}  }
class C{  public InvocationManagerBuilder<I> maxURILength(int maxURILength){  _maxURILength=maxURILength;  return this;}  }
class C{  public static void main(String[] args) throws Exception {  Ignition.setClientMode(true);  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    if (!ExamplesUtils.hasServerNodes(ignite))     return;    CacheConfiguration<AffinityUuid,String> cfg=CacheConfig.wordCache();    try (IgniteCache<AffinityUuid,String> stmCache=ignite.getOrCreateCache(cfg)){      SqlFieldsQuery top10Qry=new SqlFieldsQuery("select _val, count(_val) as cnt from String group by _val order by cnt desc limit 10",true);      SqlFieldsQuery statsQry=new SqlFieldsQuery("select avg(cnt), min(cnt), max(cnt) from (select count(_val) as cnt from String group by _val)");      while (true) {        List<List<?>> top10=stmCache.query(top10Qry).getAll();        List<List<?>> stats=stmCache.query(statsQry).getAll();        List<?> row=stats.get(0);        if (row.get(0) != null)         System.out.printf("Query results [avg=%.2f, min=%d, max=%d]%n",row.get(0),row.get(1),row.get(2));        ExamplesUtils.printQueryResults(top10);        Thread.sleep(5000);      }    }  finally {      ignite.destroyCache(cfg.getName());    }  } }  }
class C{  public LongArraySpliterator(long[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  private void notifyListeners(final Set<? extends ISetting<?>> settingSet){  final Set<ISettingChangeListener> listenerSet=new HashSet<>();  for (  final ISetting<?> setting : settingSet) {    final Set<ISettingChangeListener> listenerSet2=settingChangeListenerSetMap.get(setting);    if (listenerSet2 != null)     listenerSet.addAll(listenerSet2);  }  if (!listenerSet.isEmpty()) {    final SettingChangeEvent event=new SettingChangeEvent(this,settingSet);    for (    final ISettingChangeListener listener : listenerSet)     listener.valuesChanged(event);  }}  }
class C{  protected SipStackImpl(){  super();  NistSipMessageFactoryImpl msgFactory=new NistSipMessageFactoryImpl(this);  super.setMessageFactory(msgFactory);  this.eventScanner=new EventScanner(this);  this.listeningPoints=new Hashtable<String,ListeningPointImpl>();  this.sipProviders=new LinkedList<SipProviderImpl>();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  return uiMgr.getLock(true,null) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  private CheerleaderPlayer(Context applicationContext,String clientId){  mClientKey=clientId;  mIsClosed=false;  mDestroyDelayed=false;  mState=STATE_STOPPED;  mCheerleaderPlayerListeners=new ArrayList<>();  mCheerleaderPlaylistListeners=new ArrayList<>();  mApplicationContext=new WeakReference<>(applicationContext);  mPlayerPlaylist=PlayerPlaylist.getInstance();  mNotificationManager=NotificationManager.getInstance(getContext());  initInternalListener(applicationContext);}  }
class C{  @Ignore("not a real test") @Test public void testRandom() throws Exception {  long seed=System.nanoTime();  System.out.println("random seed=" + seed);  try {    Random rand=new Random(seed);    int MAX_MEMBERS=20;    int MAX_BUCKETS=200;    int MAX_REDUNDANCY=3;    float IMAIRED_PERCENTAGE=0.1f;    int AVERAGE_BUCKET_SIZE=10;    int AVERAGE_MAX_MEMORY=200;    int members=rand.nextInt(MAX_MEMBERS) + 2;    int buckets=rand.nextInt(MAX_BUCKETS) + members;    int redundancy=rand.nextInt(MAX_REDUNDANCY);    long[][] bucketLocations=new long[members][buckets];    long[][] bucketPrimaries=new long[members][buckets];    for (int i=0; i < buckets; i++) {      int bucketSize=rand.nextInt(AVERAGE_BUCKET_SIZE * 2);      int remainingCopies=redundancy + 1;      if (rand.nextFloat() <= IMAIRED_PERCENTAGE) {        remainingCopies=redundancy == 0 ? 0 : rand.nextInt(redundancy);      }      if (remainingCopies > 0) {        int primary=rand.nextInt(members);        bucketLocations[primary][i]=bucketSize;        bucketPrimaries[primary][i]=1;        remainingCopies--;      }      while (remainingCopies > 0) {        int member=rand.nextInt(members);        if (bucketLocations[member][i] == 0) {          bucketLocations[member][i]=bucketSize;          remainingCopies--;        }      }    }    PartitionedRegionLoadModel model=new PartitionedRegionLoadModel(bucketOperator,redundancy,buckets,getAddressComparor(false),Collections.<InternalDistributedMember>emptySet(),null);    PartitionMemberInfoImpl[] details=new PartitionMemberInfoImpl[members];    for (int i=0; i < members; i++) {      InternalDistributedMember member=new InternalDistributedMember(InetAddress.getByName("127.0.0.1"),i);      int maxMemory=rand.nextInt(AVERAGE_MAX_MEMORY * 2);      details[i]=buildDetails(member,maxMemory,maxMemory,bucketLocations[i],bucketPrimaries[i]);    }    model.addRegion("a",Arrays.asList(details),new FakeOfflineDetails(),true);    doMoves(new CompositeDirector(true,true,true,true),model);  } catch (  Throwable e) {    throw new Exception("Error with seed " + seed,e);  }}  }
class C{  public static SubjectKeyIdentifier decode(byte[] encoding) throws IOException {  SubjectKeyIdentifier res=new SubjectKeyIdentifier((byte[])ASN1OctetString.getInstance().decode(encoding));  res.encoding=encoding;  return res;}  }
class C{  public void qsort(final int left,final int right){  qsort2(left,right);  while (helpRequested) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.250 -0400",hash_original_method="21FAB374CD1C2C82C29BC885824E546F",hash_generated_method="30A7AC9B50C584CD38B98C36A8ED2C2A") final boolean link(Index<K,V> succ,Index<K,V> newSucc){  Node<K,V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  public FileSendPacket send(File file,SendListener listener){  if (!file.exists())   throw new NullPointerException("Not Find: " + file.getPath());  FileSendPacket entity=new FileSendPacket(file,listener);  send(entity);  return entity;}  }
class C{  public StunMappingCandidateHarvester(String[] servers){  super(null,null);  StunMappingCandidateHarvester.stunServers=servers;  obtainAddresses();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  @VisibleForTesting boolean uploadAllTrackPoints(Track track){  int numberOfPoints=track.getNumberOfPoints();  List<Location> locations=new ArrayList<Location>(MAX_POINTS_PER_UPLOAD);  Location lastValidLocation=null;  boolean sentStartMarker=false;  int elevationSamplingFrequency=Math.max(1,(int)(numberOfPoints / 250.0));  Vector<Double> distances=new Vector<Double>();  Vector<Double> elevations=new Vector<Double>();  TripStatisticsUpdater tripStatisticsUpdater=new TripStatisticsUpdater(track.getTripStatistics().getStartTime());  int recordingDistanceInterval=PreferencesUtils.getInt(context,R.string.recording_distance_interval_key,PreferencesUtils.RECORDING_DISTANCE_INTERVAL_DEFAULT);  int readCount=0;  LocationIterator locationIterator=null;  try {    locationIterator=myTracksProviderUtils.getTrackPointLocationIterator(trackId,-1L,false,MyTracksProviderUtils.DEFAULT_LOCATION_FACTORY);    while (locationIterator.hasNext()) {      Location location=locationIterator.next();      locations.add(location);      if (LocationUtils.isValidLocation(location)) {        lastValidLocation=location;      }      if (!sentStartMarker && lastValidLocation != null) {        if (!uploadMarker(context.getString(R.string.marker_label_start,track.getName()),"",START_ICON_URL,lastValidLocation)) {          Log.d(TAG,"Unable to create a start marker");          return false;        }        sentStartMarker=true;      }      tripStatisticsUpdater.addLocation(location,recordingDistanceInterval,false,ActivityType.INVALID,0.0);      if (readCount % elevationSamplingFrequency == 0) {        distances.add(tripStatisticsUpdater.getTripStatistics().getTotalDistance());        elevations.add(tripStatisticsUpdater.getSmoothedElevation());      }      readCount++;      if (readCount % MAX_POINTS_PER_UPLOAD == 0) {        if (!prepareAndUploadPoints(track,locations,false)) {          Log.d(TAG,"Unable to upload points");          return false;        }        updateProgress(readCount,numberOfPoints);        locations.clear();      }    }    if (!prepareAndUploadPoints(track,locations,true)) {      Log.d(TAG,"Unable to upload points");      return false;    }    if (lastValidLocation != null) {      distances.add(tripStatisticsUpdater.getTripStatistics().getTotalDistance());      elevations.add(tripStatisticsUpdater.getSmoothedElevation());      DescriptionGenerator descriptionGenerator=new DescriptionGeneratorImpl(context);      track.setDescription(descriptionGenerator.generateTrackDescription(track,distances,elevations,true));      if (!uploadMarker(context.getString(R.string.marker_label_end,track.getName()),track.getDescription(),END_ICON_URL,lastValidLocation)) {        Log.d(TAG,"Unable to create an end marker");        return false;      }    }    return true;  }  finally {    if (locationIterator != null) {      locationIterator.close();    }  }}  }
class C{  public static final boolean isJava7(){  return System.getProperty("java.version").startsWith("1.7");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ENTITY___CLASS_DEFINITION_1:    return getClassDefinition_1();case UmplePackage.ENTITY___INTERFACE_DEFINITION_1:  return getInterfaceDefinition_1();case UmplePackage.ENTITY___EXTERNAL_DEFINITION_1:return getExternalDefinition_1();case UmplePackage.ENTITY___ASSOCIATION_DEFINITION_1:return getAssociationDefinition_1();case UmplePackage.ENTITY___ASSOCIATION_CLASS_DEFINITION_1:return getAssociationClassDefinition_1();case UmplePackage.ENTITY___STATE_MACHINE_DEFINITION_1:return getStateMachineDefinition_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String toString(){  return id;}  }
class C{  private int reverseIndex(int k){  if (reverseIndexMap == null) {    reverseIndexMap=new int[attributes.getLength()];    for (int i=0, len=indexSet.size(); i < len; i++)     reverseIndexMap[indexSet.get(i)]=i + 1;  }  return reverseIndexMap[k] - 1;}  }
class C{  public WMFHeaderProperties(File wmffile) throws IOException {  super();  reset();  stream=new DataInputStream(new BufferedInputStream(new FileInputStream(wmffile)));  read(stream);  stream.close();}  }
class C{  public static IStatus validateMethodName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  protected int bytesPerAtom(){  return (4);}  }
class C{  public LogSplitItemEventCommand(RPEntity player,RPObject item,RPObject newItem){  this.player=player;  this.liveItem=item;  this.liveNewItem=newItem;  this.frozenItem=(RPObject)item.clone();  this.frozenNewItem=(RPObject)newItem.clone();}  }
class C{  private void writeLengthAndValue() throws IOException {  if (dataPos == dataSize)   return;  int curLen=0;  int lenByte=data[dataPos++] & 0xff;  if (isIndefinite(lenByte)) {    byte[] lenBytes=(byte[])ndefsList.get(index++);    System.arraycopy(lenBytes,0,newData,newDataPos,lenBytes.length);    newDataPos+=lenBytes.length;    return;  }  if (isLongForm(lenByte)) {    lenByte&=LEN_MASK;    for (int i=0; i < lenByte; i++) {      curLen=(curLen << 8) + (data[dataPos++] & 0xff);    }    if (curLen < 0) {      throw new IOException("Invalid length bytes");    }  } else {    curLen=(lenByte & LEN_MASK);  }  writeLength(curLen);  writeValue(curLen);}  }
class C{  public QueryBuilder aggregation(final Optional<Aggregation> aggregation){  checkNotNull(aggregation,"aggregation must not be null");  this.aggregation=pickOptional(this.aggregation,aggregation);  return this;}  }
class C{  @Override public void put(String name,Object value){  emulatedFields.put(name,value);}  }
class C{  @LargeTest public void testCameraPairwiseScenario06() throws Exception {  genericPairwiseTestCase(Flash.ON,Exposure.NONE,WhiteBalance.CLOUDY,SceneMode.AUTO,PictureSize.SMALL,Geotagging.ON);}  }
class C{  public void println() throws IOException {  out.write(strategy.getPrinterNewline());  newLine=true;}  }
class C{  public BinaryBlockMatrix(DataFrame dataFrame,long numRows,long numCols){  this(dataFrame,new MatrixMetadata(numRows,numCols,ConfigurationManager.getBlocksize(),ConfigurationManager.getBlocksize()));}  }
class C{  public double gaussianRegret(double target){  double m=this.mean();  double std=this.standardDeviation();  double variance=std * std;  final CumulativeNormalDistribution gIntegral=new CumulativeNormalDistribution(m,std);  final NormalDistribution g=new NormalDistribution(m,std);  double firstTerm=variance + m * m - 2.0 * target * m + target * target;  double alfa=gIntegral.op(target);  double secondTerm=m - target;  double beta=variance * g.op(target);  double result=alfa * firstTerm - beta * secondTerm;  return result / alfa;}  }
class C{  public void testSql() throws Exception {  IgniteCache<Long,Long> cache=populate();  Collection<Cache.Entry<Long,Long>> res=cache.query(new SqlQuery<Long,Long>(Long.class,"_val >= ? and _val < ?").setArgs(from,to)).getAll();  assertEquals(to - from,res.size());  for (  Cache.Entry<Long,Long> entry : res) {    assertNotNull(entry);    assertNotNull(entry.getKey());    assertNotNull(entry.getValue());    assert entry.getKey().equals(entry.getValue());  }  assertEquals(0,offheapedCnt.get());  assertEquals(0,onheapedCnt.get());  checkEntries(cache);  assertEquals(0,offheapedCnt.get());  assertEquals(to - from,onheapedCnt.get() + unswapedCnt.get());}  }
class C{  public static boolean isAmbiguousNounVerb(final String normalized){  return normalized.equals("mill") || normalized.equals("fish") || normalized.equals("esacpe");}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (!(other instanceof ManagedResourceType))   return false;  final ManagedResourceType that=(ManagedResourceType)other;  if (!StringUtils.equals(this.name,that.name))   return false;  if (this.clazz != that.clazz && !(this.clazz != null && this.clazz.equals(that.clazz)))   return false;  return true;}  }
class C{  public boolean isDoubleMetaphoneEqual(String value1,String value2){  return isDoubleMetaphoneEqual(value1,value2,false);}  }
class C{  public void addAnalytics(){  AtomicReference<Range<Integer>> range=new AtomicReference<>();  AtomicReference<Boolean> isPublish1hzOutsideRange=new AtomicReference<>();  range.set(app.utils().getRangeInteger(sensorId,"outside1hzMeanRange"));  isPublish1hzOutsideRange.set(false);  app.mqttDevice().commands(commandId("set1hzMeanRangeThreshold")).tag(commandId("set1hzMeanRangeThresholdCmd")).sink(null);  app.mqttDevice().commands(commandId("setPublish1hzOutsideRange")).tag(commandId("setPublish1hzOutsideRangeCmd")).sink(null);  PeriodicRandomSensor simulatedSensorFactory=new PeriodicRandomSensor();  TStream<Pair<Long,Integer>> raw1khz=simulatedSensorFactory.newInteger(t,1,255).tag("raw1khz");  traceStream(raw1khz,"raw1khz");  TStream<JsonObject> j1khz=JsonTuples.wrap(raw1khz,sensorId).tag("j1khz");  traceStream(j1khz,"j1khz");  TStream<JsonObject> j1hzStats=j1khz.last(1000,JsonTuples.keyFn()).batch(JsonTuples.statistics(MIN,MAX,MEAN,STDDEV)).tag("1hzStats");  j1hzStats=j1hzStats.last(30,JsonTuples.keyFn()).aggregate(null).tag("1hzStats.enriched");  traceStream(j1hzStats,"j1hzStats");  TStream<JsonObject> outside1hzMeanRange=j1hzStats.filter(null).tag("outside1hzMeanRange");  traceStream(outside1hzMeanRange,null);  app.utils().logStream(outside1hzMeanRange,"ALERT","outside1hzMeanRange");  app.mqttDevice().events(PlumbingStreams.pressureReliever(outside1hzMeanRange.filter(null).tag("outside1hzMeanRangeEvent.conditional"),null,30).tag("outside1hzMeanRangeEvent.pressureRelieved"),app.sensorEventId(sensorId,"outside1hzMeanRangeEvent"),QoS.FIRE_AND_FORGET);  periodicallyPublishLastNInfo(outside1hzMeanRange,10,30,"periodicLastOutsideRangeEvent");}  }
class C{  @PostConstruct public void postConstruct(){  if (log.isInfoEnabled()) {    log.info("|-Keep Alive Service active...");  }}  }
class C{  public void createCategoryGUINormal(Material clickedItem,Player player){  String category;  double statistic;switch (clickedItem) {case BOOK_AND_QUILL:    statistic=plugin.getDb().getConnectionsAmount(player);  category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[0];break;case SKULL_ITEM:statistic=plugin.getPoolsManager().getPlayerDeathAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[1];break;case ARROW:statistic=plugin.getPoolsManager().getPlayerArrowAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[2];break;case SNOW_BALL:statistic=plugin.getPoolsManager().getPlayerSnowballAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[3];break;case EGG:statistic=plugin.getPoolsManager().getPlayerEggAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[4];break;case RAW_FISH:statistic=plugin.getPoolsManager().getPlayerFishAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[5];break;case FLINT:statistic=plugin.getPoolsManager().getPlayerItemBreakAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[6];break;case MELON:statistic=plugin.getPoolsManager().getPlayerEatenItemAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[7];break;case SHEARS:statistic=plugin.getPoolsManager().getPlayerShearAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[8];break;case MILK_BUCKET:statistic=plugin.getPoolsManager().getPlayerMilkAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[9];break;case EMERALD:statistic=plugin.getPoolsManager().getPlayerTradeAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[10];break;case ANVIL:statistic=plugin.getPoolsManager().getPlayerAnvilAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[11];break;case ENCHANTMENT_TABLE:statistic=plugin.getPoolsManager().getPlayerEnchantmentAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[12];break;case BED:statistic=plugin.getPoolsManager().getPlayerBedAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[13];break;case EXP_BOTTLE:statistic=plugin.getPoolsManager().getPlayerXPAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[14];break;case GLASS_BOTTLE:statistic=plugin.getPoolsManager().getPlayerConsumedPotionAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[15];break;case WATCH:statistic=(double)(System.currentTimeMillis() - plugin.getConnectionListener().getJoinTime().getOrDefault(player.getUniqueId().toString(),0L) + plugin.getConnectionListener().getPlayTime().getOrDefault(player.getUniqueId().toString(),0L)) / 3600000L;category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[16];break;case HOPPER:statistic=plugin.getPoolsManager().getPlayerDropAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[17];break;case GRASS:statistic=plugin.getPoolsManager().getPlayerHoePlowingAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[18];break;case INK_SACK:statistic=plugin.getPoolsManager().getPlayerFertiliseAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[19];break;case LEASH:statistic=plugin.getPoolsManager().getPlayerTameAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[20];break;case BREWING_STAND_ITEM:statistic=plugin.getPoolsManager().getPlayerBrewingAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[21];break;case FIREWORK:statistic=plugin.getPoolsManager().getPlayerFireworkAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[22];break;case JUKEBOX:statistic=plugin.getPoolsManager().getPlayerMusicDiscAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[23];break;case ENDER_PEARL:statistic=plugin.getPoolsManager().getPlayerEnderPearlAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[24];break;case LEATHER_BOOTS:statistic=plugin.getAchieveDistanceRunnable().getAchievementDistancesFoot().getOrDefault(player.getUniqueId().toString(),0);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[25];break;case CARROT_STICK:statistic=plugin.getAchieveDistanceRunnable().getAchievementDistancesPig().getOrDefault(player.getUniqueId().toString(),0);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[26];break;case SADDLE:statistic=plugin.getAchieveDistanceRunnable().getAchievementDistancesHorse().getOrDefault(player.getUniqueId().toString(),0);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[27];break;case MINECART:statistic=plugin.getAchieveDistanceRunnable().getAchievementDistancesMinecart().getOrDefault(player.getUniqueId().toString(),0);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[28];break;case BOAT:statistic=plugin.getAchieveDistanceRunnable().getAchievementDistancesBoat().getOrDefault(player.getUniqueId().toString(),0);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[29];break;case BEDROCK:statistic=plugin.getAchieveDistanceRunnable().getAchievementDistancesGliding().getOrDefault(player.getUniqueId().toString(),0);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[30];break;case BOOKSHELF:statistic=-1;category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[31];break;default :statistic=-1;category="";break;}if ("".equals(category) && version >= 9) {switch (clickedItem) {case ELYTRA:statistic=plugin.getAchieveDistanceRunnable().getAchievementDistancesGliding().getOrDefault(player.getUniqueId(),0);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[30];break;case GRASS_PATH:statistic=plugin.getPoolsManager().getPlayerHoePlowingAmount(player);category=AdvancedAchievements.NORMAL_ACHIEVEMENTS[18];break;default :statistic=-1;category="";break;}}YamlManager config=plugin.getPluginConfig();int inventorySize=getClosestGreaterMultipleOf9(config.getConfigurationSection(category).getKeys(false).size() + 1);Inventory inventory=Bukkit.createInventory(null,inventorySize,ChatColor.translateAlternateColorCodes('&',plugin.getPluginLang().getString("list-gui-title","&5&lAchievements List")));int positionInGUI=0;String previousItemDate=null;Integer previousItemGoal=0;for (String ach : plugin.getPluginConfig().getConfigurationSection(category).getKeys(false)) {if (positionInGUI >= inventorySize - 1) break;Integer currentItemGoal=Ints.tryParse(ach);String achName=plugin.getPluginConfig().getString(category + '.' + ach+ ".Name","");String displayName=plugin.getPluginConfig().getString(category + '.' + ach+ ".DisplayName","");String nameToShowUser;if (Strings.isNullOrEmpty(displayName)) {nameToShowUser=achName;} else {nameToShowUser=displayName;}String achMessage;String goal=config.getString(category + '.' + ach+ ".Goal","");if (Strings.isNullOrEmpty(goal)) {achMessage=config.getString(category + '.' + ach+ ".Message","");} else {achMessage=goal;}List<String> rewards=plugin.getReward().getRewardType(category + '.' + ach);String date=plugin.getDb().getPlayerAchievementDate(player,achName);boolean inelligibleSeriesItem;if (Math.round(statistic) == -1L || positionInGUI == 0 || date != null || previousItemDate != null) {inelligibleSeriesItem=false;} else {if (currentItemGoal > previousItemGoal) inelligibleSeriesItem=true; else inelligibleSeriesItem=false;}createGUIItem(inventory,positionInGUI,ach,statistic,nameToShowUser,achMessage,rewards,date,inelligibleSeriesItem);positionInGUI++;previousItemDate=date;previousItemGoal=currentItemGoal;}ItemStack achItem=new ItemStack(Material.PAPER);ItemMeta connectionsMeta=achItem.getItemMeta();connectionsMeta.setDisplayName(ChatColor.translateAlternateColorCodes('&',StringEscapeUtils.unescapeJava(plugin.getPluginLang().getString("list-back-message","&7Back"))));achItem.setItemMeta(connectionsMeta);inventory.setItem(positionInGUI,achItem);player.openInventory(inventory);}  }
class C{  @Override public int countTokens(){  return -1;}  }
class C{  public void abort(){  try {    if (done.compareAndSet(false,true)) {      if (getLoggerI18n().fineEnabled())       getLoggerI18n().fine("SNP: Aborting export of region");      entries.clear();      entries.put(end);      for (      Entry<DistributedMember,Integer> entry : members.entrySet()) {        sendAbort(entry.getKey(),entry.getValue());      }    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  private void loadNotifiedDownloads(){  notifiedDownloads=new BloomFilter<>(Constants.NOTIFIED_BLOOM_FILTER_BITSET_SIZE,Constants.NOTIFIED_BLOOM_FILTER_EXPECTED_ELEMENTS);  if (!notifiedDat.exists()) {    try {      notifiedDat.createNewFile();    } catch (    Throwable e) {      e.printStackTrace();      LOG.error("Could not create notified.dat",e);    }  } else   if (notifiedDat.length() > 0) {    try {      ObjectInputStream ois=new ObjectInputStream(new FileInputStream(notifiedDat));      int numberOfElements=ois.readInt();      BitSet bs=(BitSet)ois.readObject();      ois.close();      notifiedDownloads=new BloomFilter<>(Constants.NOTIFIED_BLOOM_FILTER_BITSET_SIZE,Constants.NOTIFIED_BLOOM_FILTER_EXPECTED_ELEMENTS,numberOfElements,bs);      LOG.info("Loaded bloom filter from notified.dat sucessfully (" + numberOfElements + " elements)");    } catch (    Throwable e) {      LOG.error("Error reading notified.dat",e);      notifiedDat.delete();      try {        notifiedDat.createNewFile();        LOG.info("Created new notified.dat file.");      } catch (      IOException e1) {        LOG.error(e1.getMessage(),e1);      }    }  }}  }
class C{  public void testMoveDirectoryDestinationRoot() throws Exception {  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR),null);  igfs.rename(SUBSUBDIR,IgfsPath.ROOT);  checkExist(igfs,igfsSecondary,new IgfsPath("/" + SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public boolean isStart(){switch (compareType) {case Comparison.EQUAL:case Comparison.EQUAL_NULL_SAFE:case Comparison.BIGGER_EQUAL:case Comparison.BIGGER:    return true;default :  return false;}}  }
class C{  public void vote(final QuorumVote quorumVote){  List<VoteRunnable> runnables=new ArrayList<>();synchronized (voteRunnables) {    if (!started)     return;    for (    TopologyMemberImpl tm : clusterController.getDefaultClusterTopology().getMembers()) {      if (!tm.getNodeId().equals(clusterController.getNodeID().toString())) {        Pair<TransportConfiguration,TransportConfiguration> pair=tm.getConnector();        final TransportConfiguration serverTC=pair.getA();        VoteRunnable voteRunnable=new VoteRunnable(serverTC,quorumVote);        runnables.add(voteRunnable);      }    }    if (runnables.size() > 0) {      voteRunnables.put(quorumVote,new VoteRunnableHolder(quorumVote,runnables,runnables.size()));      for (      VoteRunnable runnable : runnables) {        executor.submit(runnable);      }    } else {      quorumVote.allVotesCast(clusterController.getDefaultClusterTopology());    }  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDR");  translateAll(environment,instruction,"LDR",instructions);}  }
class C{  final V doRemove(Object okey,Object value){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c < 0)       return null;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       return null;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key);        if (head.right == null)         tryReduceLevel();      }      return (V)v;    }  }}  }
class C{  public Builder withIndex(long index){  buffer.writeLong(0,index);  return this;}  }
class C{  public AutoMixBucket createBucket(String name,String[] styles,String[] moods,boolean taste,float adventurous,String[] songTypes,float speechiness,float energy,float familiar){  AutoMixBucket bucket=new AutoMixBucket(name,styles,moods,taste,adventurous,songTypes,speechiness,energy,familiar);  bucket.createPlaylistSession();  mBuckets.add(bucket);  saveBucket(bucket);  return bucket;}  }
class C{  public void addHouseNumbers(List<HouseNumber> HouseNumbers){  if (HouseNumbers != null) {    for (    HouseNumber houseNumber : HouseNumbers) {      addHouseNumber(houseNumber);    }  }}  }
class C{  public static File[] createFiles(String str) throws ParseException {  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  public void rtpStreamAborted(){  mEventListener.onPlayerError();}  }
class C{  synchronized void unlock(){  if (isLockedExclusive) {    isLockedExclusive=false;  } else {    sharedLockCount=Math.max(0,sharedLockCount - 1);  }}  }
class C{  public void finish() throws IOException {  articleIdxWriter.flush();  chronoIdxWriter.flush();  revisionIdxWriter.flush();}  }
class C{  public static int size(Iterable<?> iterable){  return (iterable instanceof Collection) ? ((Collection<?>)iterable).size() : size(iterable.iterator());}  }
class C{  public void stop(){  timer.stop();}  }
class C{  public static Emoticon parseEmote(JSONObject emote,String streamRestriction,String info,Emoticon.SubType subType){  try {    int width=JSONUtil.getInteger(emote,"width",-1);    int height=JSONUtil.getInteger(emote,"height",-1);    String code=(String)emote.get("name");    JSONObject urls=(JSONObject)emote.get("urls");    String url1=(String)urls.get("1");    String url2=(String)urls.get("2");    int id=((Number)emote.get("id")).intValue();    Object owner=emote.get("owner");    String creator=null;    if (owner != null && owner instanceof JSONObject) {      creator=(String)((JSONObject)owner).get("display_name");    }    if (code == null || code.isEmpty()) {      return null;    }    if (url1 == null || url1.isEmpty()) {      return null;    }    Emoticon.Builder b=new Emoticon.Builder(Emoticon.Type.FFZ,code,url1);    b.setX2Url(url2);    b.setSize(width,height);    b.setCreator(creator);    b.setNumericId(id);    b.addStreamRestriction(streamRestriction);    b.addInfo(info);    b.setSubType(subType);    return b.build();  } catch (  ClassCastException|NullPointerException ex) {    LOGGER.warning("Error parsing FFZ emote: " + ex);    return null;  }}  }
class C{  public static void addURL(URL u) throws IOException {  ClassloaderUtil clu=new ClassloaderUtil();  URLClassLoader sysLoader=(URLClassLoader)clu.getClass().getClassLoader();  URL urls[]=sysLoader.getURLs();  for (  URL url : urls) {    if (url.toString().toLowerCase().equals(u.toString().toLowerCase())) {      System.err.println("URL " + u + " is already in the CLASSPATH");      return;    }  }  Class<?> sysclass=URLClassLoader.class;  try {    Method method=sysclass.getDeclaredMethod("addURL",parameters);    method.setAccessible(true);    method.invoke(sysLoader,new Object[]{u});  } catch (  Throwable t) {    t.printStackTrace();    throw new IOException("Error, could not add URL to system classloader");  }}  }
class C{  public ParseResult(String originalUrl){  parseMap=new HashMap<Text,Parse>();  this.originalUrl=originalUrl;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (e.getActionCommand() == "calculate") {    this.module.runCalculation();  } else {    if ((e.getActionCommand() == "changeIteration") && (!firstLoad)) {      File newFile=this.module.getEventPathFromName("" + iterationsList.getSelectedItem());      int index=iterationsList.getSelectedIndex();      if (newFile != null) {        this.module.setCurrentEventFile(newFile);      }      if (!useCalculateButton) {        this.module.runCalculation();      }      iterationsList.setSelectedIndex(index);    } else {      if (e.getActionCommand() == "changeMode") {        this.module.setMode((Mode)modeList.getSelectedItem());      } else {        if (e.getActionCommand() == "OTFVis") {        }      }    }  }}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public void initializeDefinition(String tableName,String columnType,int columnSize,int columnPrecision,String columnDefault,boolean columnNullable){  m_table=tableName;  m_type=columnType;  m_size=columnSize;  m_precision=columnPrecision;  m_default=columnDefault;  m_isNullable=columnNullable;  s_logger.log(Level.FINEST,toString());}  }
class C{  private void saveDeviceObject(NetworkSystem networkSystem) throws ControllerException {  try {    _dbClient.persistObject(networkSystem);  } catch (  DatabaseException ex) {    throw NetworkDeviceControllerException.exceptions.saveDeviceObjectFailed(networkSystem.getId().toString(),ex);  }}  }
class C{  protected void addDeprecatedProperty(String name,String depName){  m_deprecatedMap.put(name,depName);}  }
class C{  private Workflow.Method rollbackDeleteMirrorDeviceMethod(URI vplexURI,URI vplexMirrorURI){  return new Workflow.Method(RB_DELETE_MIRROR_DEVICE_METHOD_NAME,vplexURI,vplexMirrorURI);}  }
class C{  protected void specifyColumn(final PreparedStatement statement,final int index,final LogEvent event) throws SQLException, IllegalStateException {  final ColumnInfo info=m_columns[index];switch (info.getType()) {case ColumnType.RELATIVE_TIME:    statement.setLong(index + 1,event.getRelativeTime());  break;case ColumnType.TIME:statement.setTimestamp(index + 1,new Timestamp(event.getTime()));break;case ColumnType.MESSAGE:statement.setString(index + 1,event.getMessage());break;case ColumnType.CATEGORY:statement.setString(index + 1,event.getCategory());break;case ColumnType.PRIORITY:statement.setString(index + 1,event.getPriority().getName());break;case ColumnType.CONTEXT:statement.setString(index + 1,getContextMap(event.getContextMap(),info.getAux()));break;case ColumnType.STATIC:statement.setString(index + 1,info.getAux());break;case ColumnType.THROWABLE:statement.setString(index + 1,getStackTrace(event.getThrowable()));break;default :throw new IllegalStateException("Unknown ColumnType: " + info.getType());}}  }
class C{  private CellIdentityGsm(Parcel in){  mMcc=in.readInt();  mMnc=in.readInt();  mLac=in.readInt();  mCid=in.readInt();  if (DBG)   log("CellIdentityGsm(Parcel): " + toString());}  }
class C{  public void configurePermissionIsOffPreferences(Preference osWarning,Preference osWarningExtra,Activity activity,boolean specificCategory){  Intent perAppIntent=getIntentToEnableOsPerAppPermission(activity);  Intent globalIntent=getIntentToEnableOsGlobalPermission(activity);  String perAppMessage=getMessageForEnablingOsPerAppPermission(activity,!specificCategory);  String globalMessage=getMessageForEnablingOsGlobalPermission(activity);  Resources resources=activity.getResources();  int color=resources.getColor(R.color.pref_accent_color);  ForegroundColorSpan linkSpan=new ForegroundColorSpan(color);  if (perAppIntent != null) {    SpannableString messageWithLink=SpanApplier.applySpans(perAppMessage,new SpanInfo("<link>","</link>",linkSpan));    osWarning.setTitle(messageWithLink);    osWarning.setIntent(perAppIntent);    if (!specificCategory) {      osWarning.setIcon(getDisabledInAndroidIcon(activity));    }  }  if (globalIntent != null) {    SpannableString messageWithLink=SpanApplier.applySpans(globalMessage,new SpanInfo("<link>","</link>",linkSpan));    osWarningExtra.setTitle(messageWithLink);    osWarningExtra.setIntent(globalIntent);    if (!specificCategory) {      if (perAppIntent == null) {        osWarningExtra.setIcon(getDisabledInAndroidIcon(activity));      } else {        Drawable transparent=new ColorDrawable(Color.TRANSPARENT);        osWarningExtra.setIcon(transparent);      }    }  }}  }
class C{  private void loadAttachment(int AD_PrintFormatItem_ID){  MAttachment attachment=MAttachment.get(Env.getCtx(),MPrintFormatItem.Table_ID,AD_PrintFormatItem_ID);  if (attachment == null) {    log.log(Level.WARNING,"No Attachment - AD_PrintFormatItem_ID=" + AD_PrintFormatItem_ID);    return;  }  if (attachment.getEntryCount() != 1) {    log.log(Level.WARNING,"Need just 1 Attachment Entry = " + attachment.getEntryCount());    return;  }  byte[] imageData=attachment.getEntryData(0);  if (imageData != null)   try {    BufferedImage bufferedImage=ImageIO.read(new ByteArrayInputStream(imageData));    m_image=bufferedImage;  } catch (  Exception e) {    log.log(Level.WARNING,"(byteArray)",e);  }  if (m_image != null)   log.fine(attachment.getEntryName(0) + " - Size=" + imageData.length); else   log.log(Level.WARNING,attachment.getEntryName(0) + " - not loaded (must be gif or jpg) - AD_PrintFormatItem_ID=" + AD_PrintFormatItem_ID);}  }
class C{  public List<OperableTrigger> acquireNextTriggers(long noLaterThan,int maxCount,long timeWindow){synchronized (lock) {    List<OperableTrigger> result=new ArrayList<OperableTrigger>();    Set<JobKey> acquiredJobKeysForNoConcurrentExec=new HashSet<JobKey>();    Set<TriggerWrapper> excludedTriggers=new HashSet<TriggerWrapper>();    long batchEnd=noLaterThan;    if (timeTriggers.size() == 0)     return result;    while (true) {      TriggerWrapper tw;      try {        tw=timeTriggers.first();        if (tw == null)         break;        timeTriggers.remove(tw);      } catch (      java.util.NoSuchElementException nsee) {        break;      }      if (tw.trigger.getNextFireTime() == null) {        continue;      }      if (applyMisfire(tw)) {        if (tw.trigger.getNextFireTime() != null) {          timeTriggers.add(tw);        }        continue;      }      if (tw.getTrigger().getNextFireTime().getTime() > batchEnd) {        timeTriggers.add(tw);        break;      }      JobKey jobKey=tw.trigger.getJobKey();      JobDetail job=jobsByKey.get(tw.trigger.getJobKey()).jobDetail;      if (job.isConcurrentExectionDisallowed()) {        if (acquiredJobKeysForNoConcurrentExec.contains(jobKey)) {          excludedTriggers.add(tw);          continue;        } else {          acquiredJobKeysForNoConcurrentExec.add(jobKey);        }      }      tw.state=TriggerWrapper.STATE_ACQUIRED;      tw.trigger.setFireInstanceId(getFiredTriggerRecordId());      OperableTrigger trig=(OperableTrigger)tw.trigger.clone();      if (result.isEmpty()) {        batchEnd=Math.max(tw.trigger.getNextFireTime().getTime(),System.currentTimeMillis()) + timeWindow;      }      result.add(trig);      if (result.size() == maxCount)       break;    }    if (excludedTriggers.size() > 0)     timeTriggers.addAll(excludedTriggers);    return result;  }}  }
class C{  public static CoordinateSequence decode(final String encodedPath){  int len=encodedPath.length();  final List<Coordinate> path=new ArrayList<>();  int index=0;  int lat=0;  int lng=0;  while (index < len) {    int result=1;    int shift=0;    int b;    do {      b=encodedPath.charAt(index++) - 63 - 1;      result+=b << shift;      shift+=5;    } while (b >= 0x1f);    lat+=(result & 1) != 0 ? ~(result >> 1) : (result >> 1);    result=1;    shift=0;    do {      b=encodedPath.charAt(index++) - 63 - 1;      result+=b << shift;      shift+=5;    } while (b >= 0x1f);    lng+=(result & 1) != 0 ? ~(result >> 1) : (result >> 1);    path.add(new Coordinate(lng * 1e-5,lat * 1e-5));  }  return new PackedCoordinateSequence.Double(path.toArray(new Coordinate[path.size()]));}  }
class C{  protected void selectAll(){  if (this.filterText != null) {    this.filterText.selectAll();  }}  }
class C{  @Override public boolean equals(Object otherObj){  if (!(otherObj instanceof DoubleRangeValidator)) {    return false;  }  DoubleRangeValidator other=(DoubleRangeValidator)otherObj;  return ((this.getMaximum() == other.getMaximum()) && (this.getMinimum() == other.getMinimum()) && (this.isMaximumSet() == other.isMaximumSet())&& (this.isMinimumSet() == other.isMinimumSet()));}  }
class C{  GridCacheQueryMetricsKey(@Nullable GridCacheQueryType type,@Nullable Class<?> cls,@Nullable String clause){  this.type=type;  this.cls=cls;  this.clause=clause;}  }
class C{  public static boolean isCurrentMonth(DateTime date){  DateTime firstDayOfMonthMidnight=DateTime.now(DateTimeZone.getDefault()).withDayOfMonth(Calendar.getInstance(Locale.getDefault()).getMinimum(Calendar.DAY_OF_MONTH)).withTimeAtStartOfDay();  DateTime firstDayOfNextMonth=firstDayOfMonthMidnight.plusMonths(1);  return ((firstDayOfMonthMidnight.isEqual(date.getMillis())) || firstDayOfMonthMidnight.isBefore(date.getMillis())) && firstDayOfNextMonth.isAfter(date.getMillis());}  }
class C{  public int compareTo(Integer object){  return compare(value,object.value);}  }
class C{  public Vector rotateZY(final double angle){  return rotateZY(Math.sin(angle),Math.cos(angle));}  }
class C{  public static void writeVarInt32(final OutputStream output,int value) throws IOException {  while (true) {    if ((value & ~0x7F) == 0) {      output.write(value);      return;    }    output.write((value & 0x7F) | 0x80);    value>>>=7;  }}  }
class C{  static void checkOpcode(final int opcode,final int type){  if (opcode < 0 || opcode > 199 || TYPE[opcode] != type) {    throw new IllegalArgumentException("Invalid opcode: " + opcode);  }}  }
class C{  public void disconnectPan(BluetoothAdapter adapter,BluetoothDevice device){  disconnectFromRemoteOrVerifyConnectNap(adapter,device,true);}  }
class C{  public XCardElement(Element element){  this(element,VCardVersion.V4_0);}  }
class C{  public static Integer findTimeSlot(Channels broadcast,ArrayList<Integer> im){  System.err.println("taille " + broadcast.getRecordedFrames().size());  for (int i=0; i < im.size(); i++) {    String aboutTm=broadcast.getRecordedFrames().get(im.get(i)).getData()[4];    aboutTm=new BigInteger(aboutTm,16).toString(2);    for (; aboutTm.length() < 8; ) {      aboutTm="0" + aboutTm;    }    if (aboutTm.charAt(1) == '1') {      return Integer.parseInt(aboutTm.substring(5,8),2);    }  }  return null;}  }
class C{  public void testSerialization(){  DefaultCategoryDataset d1=new DefaultCategoryDataset();  d1.setValue(23.4,"R1","C1");  DefaultCategoryDataset d2=(DefaultCategoryDataset)TestUtilities.serialised(d1);  assertEquals(d1,d2);}  }
class C{  public boolean isValidLockdownProfile(){  try {    InetAddress.parseNumericAddress(server);    for (    String dnsServer : dnsServers.split(" +")) {      InetAddress.parseNumericAddress(this.dnsServers);    }    if (TextUtils.isEmpty(dnsServers)) {      Log.w(TAG,"DNS required");      return false;    }    return true;  } catch (  IllegalArgumentException e) {    Log.w(TAG,"Invalid address",e);    return false;  }}  }
class C{  private void startSequentialMode(){  resetPriorities();  if (hasPieces == null) {    torrentHandle.setSequentialDownload(true);  } else {    for (int i=firstPieceIndex + piecesToPrepare; i < firstPieceIndex + piecesToPrepare + SEQUENTIAL_CONCURRENT_PIECES_COUNT; i++) {      torrentHandle.piecePriority(i,Priority.SEVEN);      torrentHandle.setPieceDeadline(i,1000);    }  }}  }
class C{  public SamzaResourceRequest peekPendingRequest(){synchronized (lock) {    return this.requestsQueue.peek();  }}  }
class C{  public void validateCertificatePath(X509Certificate x509Certificate,String siteID,Map<String,String> authStatExt) throws CertificateRevocationCheckException, InvalidArgumentException, IdmCertificateRevokedException, CertificatePathBuildingException {  IdmCertificatePathValidator checker=new IdmCertificatePathValidator(trustStore,certPolicy,this.tenantName,siteID);  checker.validate(x509Certificate,authStatExt);}  }
class C{  public static List<IPath> resolveToAbsolutePossiblePaths(final RobotSuiteFile file,final String path) throws PathResolvingException {  return resolveToAbsolutePossiblePath(file,new Path(path));}  }
class C{  public static Class<?>[] toClassArray(Collection<Class<?>> collection){  if (collection == null) {    return null;  }  return collection.toArray(new Class<?>[collection.size()]);}  }
class C{  public static String printBigDecimal(BigDecimal price){  if (price == null) {    return null;  }  BigDecimal roundedPrice=price.setScale(PriceConverter.NORMALIZED_PRICE_SCALING,PriceConverter.ROUNDING_MODE);  return converter.getValueToDisplay(roundedPrice,false,Locale.ENGLISH);}  }
class C{  protected void registerVerticalGroupAttributes(){  addAttributeProcessor(new VerticalGroupAlignmentLmlAttribute(),"groupAlign");  addAttributeProcessor(new VerticalGroupFillLmlAttribute(),"groupFill");  addAttributeProcessor(new VerticalGroupPaddingBottomLmlAttribute(),"groupPadBottom");  addAttributeProcessor(new VerticalGroupPaddingLeftLmlAttribute(),"groupPadLeft");  addAttributeProcessor(new VerticalGroupPaddingLmlAttribute(),"groupPad","padding");  addAttributeProcessor(new VerticalGroupPaddingRightLmlAttribute(),"groupPadRight");  addAttributeProcessor(new VerticalGroupPaddingTopLmlAttribute(),"groupPadTop");  addAttributeProcessor(new VerticalGroupReverseLmlAttribute(),"reverse");  addAttributeProcessor(new VerticalGroupSpacingLmlAttribute(),"groupSpace","spacing");}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MUL");  translateAll(environment,instruction,"MUL",instructions);}  }
class C{  private void routeSingleGetRequest(RequestAndResponse requestAndResponse,String uri) throws IOException, ServletException {  if (uri.startsWith("/notebooks/")) {    handleHtmlShowNotebooks(requestAndResponse);  } else   if (uri.startsWith("/quotations/")) {    handleHtmlShowQuotations(requestAndResponse);  } else   if (uri.startsWith("/sources/")) {    handleHtmlShowSources(requestAndResponse);  } else   if (uri.startsWith("/source/")) {    handleHtmlShowSource(requestAndResponse);  } else   if (uri.startsWith("/notebook/")) {    handleHtmlShowNotebook(requestAndResponse);  } else   if (uri.startsWith("/search/")) {    handleHtmlSearch(requestAndResponse);  } else   if (uri.equals("/help/")) {    handleHtmlBasicHelp(requestAndResponse);  } else   if (uri.equals("/advancedHelp/")) {    handleHtmlAdvancedHelp(requestAndResponse);  } else   if (uri.startsWith("/help/")) {    handleHtmlHelp(requestAndResponse);  } else   if (uri.equals("/backup/")) {    handleHtmlUserBackupForm(requestAndResponse);  } else   if (uri.equals("/restore/")) {    handleHtmlUserRestoreForm(requestAndResponse);  } else   if (uri.startsWith("/account/")) {    handleHtmlShowAccount(requestAndResponse);  } else   if (uri.startsWith("/accounts/")) {    handleHtmlShowAccounts(requestAndResponse);  } else   if (uri.equals("/shutdown/")) {    handleHtmlShutdownForm(requestAndResponse);  } else   if (uri.equals("/clear/")) {    handleHtmlClearForm(requestAndResponse);  } else   if (uri.equals("/onlineBackup/")) {    handleHtmlOnlineBackupForm(requestAndResponse);  } else   if (uri.equals("/checkForErrors/")) {    handleHtmlCheckForErrorsForm(requestAndResponse);  } else   if (uri.equals("/backups/")) {    handleHtmlShowDBBackups(requestAndResponse);  } else   if (uri.equals("/offlineBackup/")) {    handleHtmlOfflineDbBackupForm(requestAndResponse);  } else   if (uri.equals("/noteJson/")) {    handleJsonShowEntry(requestAndResponse);  } else   if (uri.equals("/noteParentJson/")) {    handleJsonShowEntryParent(requestAndResponse);  } else   if (uri.equals("/noteChildrenJson/")) {    handleJsonShowEntryChildren(requestAndResponse);  } else   if (uri.equals("/searchNotesJson/")) {    handleJsonSearchNotes(requestAndResponse);  } else   if (uri.equals("/newNotebook/")) {    handleHtmlNewNotebookForm(requestAndResponse);  } else   if (uri.equals("/nothing/")) {    handleHtmlNothing(requestAndResponse);  } else   if (uri.equals("/couldNotCreateNote/")) {    handleHtmlCouldNotCreateNote(requestAndResponse);  } else   if (uri.equals("/restoreBackupCommand/")) {    handleHtmlShowRestoreDbBackupCommand(requestAndResponse);  } else   if (uri.equals("/signedOut/")) {    handleHtmlShowSignedOut(requestAndResponse);  } else   if (uri.startsWith("/changePassword/")) {    handleHtmlChangePassword(requestAndResponse);  } else   if (uri.startsWith("/changeAccount/")) {    handleHtmlChangeAccount(requestAndResponse);  } else   if (uri.startsWith("/closeAccount/")) {    handleHtmlCloseAccount(requestAndResponse);  } else   if (uri.equals("/isSignedIn/")) {    handleJsonIsSignedIn(requestAndResponse);  } else   if (uri.equals("/restoreFrame/")) {    handleHtmlUserRestoreFrame(requestAndResponse);  } else {    returnHtml404(requestAndResponse);  }}  }
class C{  public void entering(String sourceClass,String sourceMethod,@GuardSatisfied Object param1){  throw new RuntimeException();}  }
class C{  private static String digits(long val,int digits){  long hi=1L << (digits * 4);  return Long.toHexString(hi | (val & (hi - 1))).substring(1);}  }
class C{  public WishListPage(final PageParameters params){  super(params);  final String email;  final Customer customer;  final String publicKey;  final String key=params.get("token").toString();  final String tag=params.get("tag").toString();  if (StringUtils.isBlank(key)) {    final ShoppingCart cart=ApplicationDirector.getShoppingCart();    if (cart.getLogonState() == ShoppingCart.LOGGED_IN && ((AuthenticatedWebSession)getSession()).isSignedIn()) {      email=cart.getCustomerEmail();      customer=customerServiceFacade.getCustomerByEmail(ApplicationDirector.getCurrentShop(),email);      publicKey=customerServiceFacade.getCustomerPublicKey(customer);    } else {      email="";      customer=null;      publicKey=null;      final PageParameters rparams=new PageParameters();      rparams.set(ShoppingCartCommand.CMD_LOGOUT,ShoppingCartCommand.CMD_LOGOUT);      setResponsePage(Application.get().getHomePage(),rparams);    }  } else {    publicKey=null;    customer=customerServiceFacade.getCustomerByPublicKey(key);    if (customer == null) {      info(getLocalizer().getString("wishListNotFound",this));      email="";    } else {      email=customer.getEmail();    }  }  String safePublicKey=publicKey;  if (StringUtils.isNotBlank(publicKey)) {    try {      safePublicKey=HttpUtil.encodeUtf8UriParam(publicKey);    } catch (    Exception exp) {      ShopCodeContext.getLog(this).error(exp.getMessage(),exp);    }  }  add(new FeedbackPanel(FEEDBACK));  add(new WishListView(WISHLIST_PANEL,new Model<String>(email),new Model<String>(CustomerWishList.SIMPLE_WISH_ITEM),new Model<String>(tag)).setVisible(customer != null).add(new AttributeModifier("data-publickey",safePublicKey)));  add(new StandardFooter(FOOTER));  add(new StandardHeader(HEADER));  add(new ServerSideJs("serverSideJs"));  add(new HeaderMetaInclude("headerInclude"));  if (StringUtils.isNotBlank(publicKey)) {    String content=contentServiceFacade.getContentBody("profile_wishlist_owner_include",ShopCodeContext.getShopId(),getLocale().getLanguage());    add(new Label("wishListOwnerInfo",content).setEscapeModelStrings(false));    add(new Label("wishListViewerInfo",""));  } else {    String content=contentServiceFacade.getContentBody("profile_wishlist_viewer_include",ShopCodeContext.getShopId(),getLocale().getLanguage());    add(new Label("wishListOwnerInfo",""));    add(new Label("wishListViewerInfo",content).setEscapeModelStrings(false));  }}  }
class C{  @Nullable public String userMessage(){  return userMessage;}  }
class C{  public static synchronized TipOfTheDayMediator instance(){  if (instance == null)   instance=new TipOfTheDayMediator();  return instance;}  }
class C{  private void processFilterAgg(InternalFilter filter,ESResultSet rs) throws SQLException {  List<Object> row=rs.getNewRow();  Column count=null;  for (  Column c : rs.getHeading().columns())   if (c.getOp() == Operation.COUNT)   count=c;  if (count != null) {    row.set(count.getIndex(),filter.getDocCount());  }  for (  Aggregation agg : filter.getAggregations()) {    if (agg instanceof InternalNumericMetricsAggregation.SingleValue) {      InternalNumericMetricsAggregation.SingleValue numericAgg=(InternalNumericMetricsAggregation.SingleValue)agg;      String name=numericAgg.getName();      Column column=rs.getHeading().getColumnByLabel(name);      if (column == null) {        throw new SQLException("Unable to identify column for " + name);      }      row.set(column.getIndex(),numericAgg.value());    } else     throw new SQLException("Unable to parse aggregation of type " + agg.getClass());  }  rs.add(row);}  }
class C{  public Boolean isForce(){  return force;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.827 -0500",hash_original_method="805E3D268EC2C624B76D676FF5B77E40",hash_generated_method="E26FE89963A7CF23AB90370ADC8186C5") @DSVerified @DSSpec(DSCat.IO) public static final long copyStream(InputStream source,OutputStream dest,int bufferSize) throws CopyStreamException {  return copyStream(source,dest,bufferSize,CopyStreamEvent.UNKNOWN_STREAM_SIZE,null);}  }
class C{  public static int combineHashCodes(int numA,int numB,int numC){  final int prime=31;  int result=1;  result=prime * result + numA;  result=prime * result + numB;  result=prime * result + numC;  return result;}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  @Override protected void initData(){}  }
class C{  private StatementBlock vectorizeScalarAggregate(StatementBlock sb,StatementBlock csb,Hop from,Hop to,Hop increment,String itervar) throws HopsException {  StatementBlock ret=sb;  if (!(increment != null && increment instanceof LiteralOp && ((LiteralOp)increment).getDoubleValue() == 1.0)) {    return ret;  }  boolean leftScalar=false;  boolean rightScalar=false;  boolean rowIx=false;  if (csb.get_hops() != null && csb.get_hops().size() == 1) {    Hop root=csb.get_hops().get(0);    if (root.getDataType() == DataType.SCALAR && root.getInput().get(0) instanceof BinaryOp) {      BinaryOp bop=(BinaryOp)root.getInput().get(0);      Hop left=bop.getInput().get(0);      Hop right=bop.getInput().get(1);      if (HopRewriteUtils.isValidOp(bop.getOp(),MAP_SCALAR_AGGREGATE_SOURCE_OPS) && left instanceof DataOp && left.getDataType() == DataType.SCALAR && root.getName().equals(left.getName()) && right instanceof UnaryOp && ((UnaryOp)right).getOp() == OpOp1.CAST_AS_SCALAR && right.getInput().get(0) instanceof IndexingOp) {        IndexingOp ix=(IndexingOp)right.getInput().get(0);        if (ix.getRowLowerEqualsUpper() && ix.getInput().get(1) instanceof DataOp && ix.getInput().get(1).getName().equals(itervar)) {          leftScalar=true;          rowIx=true;        } else         if (ix.getColLowerEqualsUpper() && ix.getInput().get(3) instanceof DataOp && ix.getInput().get(3).getName().equals(itervar)) {          leftScalar=true;          rowIx=false;        }      } else       if (HopRewriteUtils.isValidOp(bop.getOp(),MAP_SCALAR_AGGREGATE_SOURCE_OPS) && right instanceof DataOp && right.getDataType() == DataType.SCALAR && root.getName().equals(right.getName()) && left instanceof UnaryOp && ((UnaryOp)left).getOp() == OpOp1.CAST_AS_SCALAR && left.getInput().get(0) instanceof IndexingOp) {        IndexingOp ix=(IndexingOp)left.getInput().get(0);        if (ix.getRowLowerEqualsUpper() && ix.getInput().get(1) instanceof DataOp && ix.getInput().get(1).getName().equals(itervar)) {          rightScalar=true;          rowIx=true;        } else         if (ix.getColLowerEqualsUpper() && ix.getInput().get(3) instanceof DataOp && ix.getInput().get(3).getName().equals(itervar)) {          rightScalar=true;          rowIx=false;        }      }    }  }  if (leftScalar || rightScalar) {    Hop root=csb.get_hops().get(0);    BinaryOp bop=(BinaryOp)root.getInput().get(0);    Hop cast=bop.getInput().get(leftScalar ? 1 : 0);    Hop ix=cast.getInput().get(0);    int aggOpPos=HopRewriteUtils.getValidOpPos(bop.getOp(),MAP_SCALAR_AGGREGATE_SOURCE_OPS);    AggOp aggOp=MAP_SCALAR_AGGREGATE_TARGET_OPS[aggOpPos];    AggUnaryOp newSum=new AggUnaryOp(cast.getName(),DataType.SCALAR,ValueType.DOUBLE,aggOp,Direction.RowCol,ix);    HopRewriteUtils.removeChildReference(cast,ix);    HopRewriteUtils.removeChildReference(bop,cast);    HopRewriteUtils.addChildReference(bop,newSum,leftScalar ? 1 : 0);    int index1=rowIx ? 1 : 3;    int index2=rowIx ? 2 : 4;    HopRewriteUtils.removeChildReferenceByPos(ix,ix.getInput().get(index1),index1);    HopRewriteUtils.addChildReference(ix,from,index1);    HopRewriteUtils.removeChildReferenceByPos(ix,ix.getInput().get(index2),index2);    HopRewriteUtils.addChildReference(ix,to,index2);    ret=csb;    LOG.debug("Applied vectorizeScalarSumForLoop.");  }  return ret;}  }
class C{  public static void addOption(Vector options,String text,String defValue,String option){  options.add(new Option("\t" + text + "\n\t(default: "+ defValue+ ")",option,0,"-" + option + " <value>"));}  }
class C{  private void buildOutputDirectory(){  currentJobOutputDir=new File(outputDir + "/" + "crawl"+ "-"+ new Date().getTime());  if (!currentJobOutputDir.exists()) {    boolean success=currentJobOutputDir.mkdir();    if (success) {      LOGGER.debug("Directory: " + currentJobOutputDir + " created");    }  }}  }
class C{  @Override protected void onVoice(String target,String sourceNick,String sourceLogin,String sourceHostname,String recipient){  Message message=new Message(service.getString(R.string.message_voice,sourceNick,recipient));  message.setIcon(R.drawable.voice);  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);  service.sendBroadcast(intent);}  }
class C{  public TextMessage(String text){  object=convert(text);}  }
class C{  final boolean needsBridge(){  return isSuper || needsVarArgsConversion() || isArrayOp()|| isPrivateInOtherClass()|| !receiverAccessible();}  }
class C{  public SourceCallChainBuilder(int timeout,boolean process_callbacks){  this.timeout=timeout;  this.process_callbacks=process_callbacks;}  }
class C{  public void keepPredictions(boolean keepPredictions){  this.keepPredictions=keepPredictions;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void enable(RAbstractVector operand){}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  private String computeNewImageLocation(final String cssUri,final String imageUrl){  LOG.debug("cssUri: {}, imageUrl {}",cssUri,imageUrl);  final String cleanImageUrl=cleanImageUrl(imageUrl);  int idxLastSeparator=cssUri.lastIndexOf(ServletContextUriLocator.PREFIX);  if (idxLastSeparator == -1) {    if (ClasspathUriLocator.isValid(cssUri)) {      idxLastSeparator=cssUri.lastIndexOf(ClasspathUriLocator.PREFIX);      if (idxLastSeparator >= 0) {        idxLastSeparator+=ClasspathUriLocator.PREFIX.length() - 1;      }    }    if (idxLastSeparator < 0) {      throw new IllegalStateException("Invalid cssUri: " + cssUri + ". Should contain at least one '/' character!");    }  }  final String cssUriFolder=cssUri.substring(0,idxLastSeparator + 1);  final String processedImageUrl=cleanImageUrl.startsWith(ServletContextUriLocator.PREFIX) ? cleanImageUrl.substring(1) : cleanImageUrl;  final String computedImageLocation=cleanPath(cssUriFolder + processedImageUrl);  LOG.debug("computedImageLocation: {}",computedImageLocation);  return computedImageLocation;}  }
class C{  public boolean containsKey(K key){  return contains(key);}  }
class C{  public static boolean logout(final HttpServletRequest request,final HttpServletResponse response){  final HttpSession session=request.getSession(false);  if (null != session) {    final Cookie cookie=new Cookie("b3log-latke",null);    cookie.setMaxAge(0);    cookie.setPath("/");    response.addCookie(cookie);    session.invalidate();    return true;  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public Pids(){  Arrays.sort(PIDs,pidComparator);}  }
class C{  private void layoutForPredictiveAnimations(RecyclerView.Recycler recycler,RecyclerView.State state,int startOffset,int endOffset){  if (!state.willRunPredictiveAnimations() || getChildCount() == 0 || state.isPreLayout() || !supportsPredictiveItemAnimations()) {    return;  }  int scrapExtraStart=0, scrapExtraEnd=0;  final List<RecyclerView.ViewHolder> scrapList=recycler.getScrapList();  final int scrapSize=scrapList.size();  final int firstChildPos=getPosition(getChildAt(0));  for (int i=0; i < scrapSize; i++) {    RecyclerView.ViewHolder scrap=scrapList.get(i);    if (scrap.isRemoved()) {      continue;    }    final int position=scrap.getLayoutPosition();    final int direction=position < firstChildPos != mShouldReverseLayout ? LayoutState.LAYOUT_START : LayoutState.LAYOUT_END;    if (direction == LayoutState.LAYOUT_START) {      scrapExtraStart+=mOrientationHelper.getDecoratedMeasurement(scrap.itemView);    } else {      scrapExtraEnd+=mOrientationHelper.getDecoratedMeasurement(scrap.itemView);    }  }  if (DEBUG) {    Log.d(TAG,"for unused scrap, decided to add " + scrapExtraStart + " towards start and "+ scrapExtraEnd+ " towards end");  }  mLayoutState.mScrapList=scrapList;  if (scrapExtraStart > 0) {    View anchor=getChildClosestToStart();    updateLayoutStateToFillStart(getPosition(anchor),startOffset);    mLayoutState.mExtra=scrapExtraStart;    mLayoutState.mAvailable=0;    mLayoutState.assignPositionFromScrapList();    fill(recycler,mLayoutState,state,false);  }  if (scrapExtraEnd > 0) {    View anchor=getChildClosestToEnd();    updateLayoutStateToFillEnd(getPosition(anchor),endOffset);    mLayoutState.mExtra=scrapExtraEnd;    mLayoutState.mAvailable=0;    mLayoutState.assignPositionFromScrapList();    fill(recycler,mLayoutState,state,false);  }  mLayoutState.mScrapList=null;}  }
class C{  public WTableModelEvent(ListModel source){  this(source,0,Integer.MAX_VALUE,ALL_COLUMNS,CONTENTS_CHANGED);}  }
class C{  @Override protected boolean canTriggerWalking(){  return false;}  }
class C{  public static int intersectLineRectangle(Point2D a1,Point2D a2,Rectangle2D r,Point2D[] pts){  double a1x=a1.getX(), a1y=a1.getY();  double a2x=a2.getX(), a2y=a2.getY();  double mxx=r.getMaxX(), mxy=r.getMaxY();  double mnx=r.getMinX(), mny=r.getMinY();  if (pts[0] == null)   pts[0]=new Point2D.Double();  if (pts[1] == null)   pts[1]=new Point2D.Double();  int i=0;  if (intersectLineLine(mnx,mny,mxx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (intersectLineLine(mxx,mny,mxx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (i == 2)   return i;  if (intersectLineLine(mxx,mxy,mnx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (i == 2)   return i;  if (intersectLineLine(mnx,mxy,mnx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  return i;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.458 -0500",hash_original_method="6BBF92D1C6E8D0EDE6C4F442992FDCAA",hash_generated_method="D96361B18913B1B8DF9154B1BFF13F95") private static char bcdToChar(byte b){  if (b < 0xa) {    return (char)('0' + b);  } else switch (b) {case 0xa:    return '*';case 0xb:  return '#';case 0xc:return PAUSE;case 0xd:return WILD;default :return 0;}}  }
class C{  public Collaborators createCollaborators(GHPersonSet<? extends GHPerson> ghPersons) throws IOException {  Collaborators collaborators=DtoFactory.getInstance().createDto(Collaborators.class);  for (  GHPerson ghPerson : ghPersons) {    collaborators.getCollaborators().add(createUser(ghPerson));  }  return collaborators;}  }
class C{  public static double max(double[] a,int lo,int hi){  if (lo < 0 || hi >= a.length || lo > hi)   throw new IndexOutOfBoundsException("Subarray indices out of bounds");  double max=Double.NEGATIVE_INFINITY;  for (int i=lo; i <= hi; i++) {    if (Double.isNaN(a[i]))     return Double.NaN;    if (a[i] > max)     max=a[i];  }  return max;}  }
class C{  @Override public String toString(){  return toString(false);}  }
class C{  public static CCFollow action(CCNode followedNode){  return new CCFollow(followedNode);}  }
class C{  @Override public String globalInfo(){  return "A filter for adding the classification, the class distribution and " + "an error flag to a dataset with a classifier. The classifier is " + "either trained on the data itself or provided as serialized model.";}  }
class C{  public void rotatedCubeVolumeExtendedDown(World world,int x,int y,int z,int offsetX,int offsetY,int offsetZ,IBlockState blockState,int sizeWidth,int sizeHeight,int sizeDepth,int rotation){  while (isReplaceable(world,x,y,z,offsetX,offsetY - 1,offsetZ,rotation)) {    offsetY--;    sizeHeight++;  }  rotatedCubeVolume(world,x,y,z,offsetX,offsetY,offsetZ,blockState,sizeWidth,sizeHeight,sizeDepth,rotation);}  }
class C{  private static int base64toInt(char c,byte[] alphaToInt){  int result=alphaToInt[c];  if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);  return result;}  }
class C{  public AnakiaTestCase(){  super("AnakiaTestCase");}  }
class C{  public void readSkyLight(ByteBuf input){  byte[] handle=new byte[LIGHT_LENGTH];  input.readBytes(handle);  if (skyLight != null) {    skyLight.setHandle(handle);    return;  }  this.skyLight=new NibbleArray(handle);}  }
class C{  public Boolean isD0On(){  return this.isDigitalOn(0);}  }
class C{  public nvrtcProgram(){}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static FileEncodedImageAsync create(String fileName,Image placeholder){  return new FileEncodedImageAsync(fileName,placeholder);}  }
class C{  public Time toTime(Element el,String attributeName,Time defaultValue){  return new TimeImpl(toDateTime(el,attributeName,defaultValue));}  }
class C{  protected Map<String,RuleSet> addToNameMap(Map<String,RuleSet> map,String name,Rule rule){  if (map == null) {    map=new HashMap<String,RuleSet>();  }  RuleSet ruleSet=map.get(name);  if (ruleSet == null) {    ruleSet=new RuleSet();    map.put(name,ruleSet);  }  ruleSet.addRule(rule);  return map;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.388 -0500",hash_original_method="5A565618B4FD768311EE533344239248",hash_generated_method="88665A90789B2985F9D18FFADF4E89A5") public void removeAltitude(){  mAltitude=0.0f;  mHasAltitude=false;}  }
class C{  public CFGGenerator(ClassLoader classLoader,String className,String methodName,MethodNode node){  this.classLoader=classLoader;  registerMethodNode(node,className,methodName);}  }
class C{  @Deprecated public boolean hasOption(String option){  return hasSquidbOption(option);}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  private boolean saveChangesInTrx(final String trxName){  if (m_cashLine != null)   m_cashLine.set_TrxName(trxName);  if (m_mPayment != null)   m_mPayment.set_TrxName(trxName);  if (m_mPaymentOriginal != null)   m_mPaymentOriginal.set_TrxName(trxName);  ValueNamePair vp=paymentCombo.getSelectedItem().toValueNamePair();  String newPaymentRule=vp.getValue();  log.info("New Rule: " + newPaymentRule);  if (m_onlyRule) {    if (!newPaymentRule.equals(m_PaymentRule))     m_mTab.setValue("PaymentRule",newPaymentRule);    return true;  }  Timestamp newDateAcct=m_DateAcct;  int newC_PaymentTerm_ID=m_C_PaymentTerm_ID;  int newC_CashLine_ID=m_C_CashLine_ID;  int newC_CashBook_ID=m_C_CashBook_ID;  String newCCType=m_CCType;  int newC_BankAccount_ID=0;  String payTypes=m_Cash_As_Payment ? "KTSDB" : "KTSD";  if (newPaymentRule.equals(X_C_Order.PAYMENTRULE_Cash)) {    if (m_Cash_As_Payment) {      ListItem selected=bBankAccountCombo.getSelectedItem();      KeyNamePair kp=selected != null ? selected.toKeyNamePair() : null;      if (kp != null)       newC_BankAccount_ID=kp.getKey();    } else {      ListItem selected=bCashBookCombo.getSelectedItem();      KeyNamePair kp=selected != null ? selected.toKeyNamePair() : null;      if (kp != null)       newC_CashBook_ID=kp.getKey();    }    newDateAcct=(Timestamp)bDateField.getValue();    m_mPayment.setAmount(m_C_Currency_ID,(BigDecimal)bAmountField.getValue());    m_Amount=(BigDecimal)bAmountField.getValue();  } else   if (newPaymentRule.equals(X_C_Order.PAYMENTRULE_CreditCard)) {    ListItem selected=kTypeCombo.getSelectedItem();    vp=selected != null ? selected.toValueNamePair() : null;    if (vp != null)     newCCType=vp.getValue();  } else   if (newPaymentRule.equals(MOrder.PAYMENTRULE_DirectDeposit) || newPaymentRule.equals(MOrder.PAYMENTRULE_DirectDebit)) {    tAccountCombo.getSelectedItem();  } else   if (newPaymentRule.equals(X_C_Order.PAYMENTRULE_OnCredit)) {    ListItem selected=pTermCombo.getSelectedItem();    KeyNamePair kp=selected != null ? selected.toKeyNamePair() : null;    if (kp != null)     newC_PaymentTerm_ID=kp.getKey();  } else   if (newPaymentRule.equals(X_C_Order.PAYMENTRULE_Check)) {    ListItem selected=sBankAccountCombo.getSelectedItem();    KeyNamePair kp=selected != null ? selected.toKeyNamePair() : null;    if (kp != null)     newC_BankAccount_ID=kp.getKey();  } else   return false;  if (!newPaymentRule.equals(m_PaymentRule)) {    log.fine("Changed PaymentRule: " + m_PaymentRule + " -> "+ newPaymentRule);    if (m_PaymentRule.equals(X_C_Order.PAYMENTRULE_Cash)) {      log.fine("Old Cash - " + m_cashLine);      if (m_cashLine != null) {        MCashLine cl=m_cashLine.createReversal();        if (cl.save())         log.config("CashCancelled"); else         FDialog.error(m_WindowNo,this,"PaymentError","CashNotCancelled");      }      newC_CashLine_ID=0;    } else     if (payTypes.indexOf(m_PaymentRule) != -1 && payTypes.indexOf(newPaymentRule) != -1 && m_mPaymentOriginal != null) {      log.fine("Old Payment(1) - " + m_mPaymentOriginal);      m_mPaymentOriginal.setDocAction(DocAction.ACTION_Reverse_Correct);      boolean ok=m_mPaymentOriginal.processIt(DocAction.ACTION_Reverse_Correct);      m_mPaymentOriginal.saveEx();      if (ok)       log.info("Payment Canecelled - " + m_mPaymentOriginal); else       FDialog.error(m_WindowNo,this,"PaymentError","PaymentNotCancelled " + m_mPaymentOriginal.getDocumentNo());      m_mPayment.resetNew();    } else     if (payTypes.indexOf(m_PaymentRule) != -1 && payTypes.indexOf(newPaymentRule) == -1) {      log.fine("Old Payment(2) - " + m_mPaymentOriginal);      if (m_mPaymentOriginal != null) {        m_mPaymentOriginal.setDocAction(DocAction.ACTION_Reverse_Correct);        boolean ok=m_mPaymentOriginal.processIt(DocAction.ACTION_Reverse_Correct);        m_mPaymentOriginal.saveEx();        if (ok) {          log.fine("PaymentCancelled " + m_mPayment.getDocumentNo());          m_mTab.getTableModel().dataSave(true);          m_mPayment.resetNew();          m_mPayment.setAmount(m_C_Currency_ID,m_Amount);        } else         FDialog.error(m_WindowNo,this,"PaymentError","PaymentNotCancelled " + m_mPayment.getDocumentNo());      }    }  }  int C_Order_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_Order_ID");  int C_Invoice_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"C_Invoice_ID");  if (C_Invoice_ID == 0 && m_DocStatus.equals("CO"))   C_Invoice_ID=getInvoiceID(C_Order_ID);  boolean negateAmt=false;  MInvoice invoice=null;  if (C_Invoice_ID != 0) {    invoice=new MInvoice(Env.getCtx(),C_Invoice_ID,null);    negateAmt=invoice.isCreditMemo();  }  MOrder order=null;  if (invoice == null && C_Order_ID != 0)   order=new MOrder(Env.getCtx(),C_Order_ID,null);  BigDecimal payAmount=m_Amount;  if (negateAmt)   payAmount=m_Amount.negate();  log.config("C_Order_ID=" + C_Order_ID + ", C_Invoice_ID="+ C_Invoice_ID+ ", NegateAmt="+ negateAmt);  if (newPaymentRule.equals(X_C_Order.PAYMENTRULE_Cash) && !m_Cash_As_Payment) {    log.fine("Cash");    if (C_Invoice_ID == 0 && order == null) {      log.config("No Invoice!");      FDialog.error(m_WindowNo,this,"PaymentError","CashNotCreated");    } else {      payAmount=(BigDecimal)bAmountField.getValue();      if (m_cashLine != null && payAmount.compareTo(m_cashLine.getAmount()) != 0) {        log.config("Changed CashBook Amount");        m_cashLine.setAmount((BigDecimal)bAmountField.getValue());        m_cashLine.saveEx();      }      if (m_cashLine != null && (newC_CashBook_ID != m_C_CashBook_ID || !TimeUtil.isSameDay(m_cashLine.getStatementDate(),newDateAcct))) {        log.config("Changed CashBook/Date: " + m_C_CashBook_ID + "->"+ newC_CashBook_ID);        MCashLine reverse=m_cashLine.createReversal();        reverse.saveEx();        m_cashLine=null;      }      if (m_cashLine == null) {        log.config("New CashBook");        int C_Currency_ID=0;        if (invoice != null)         C_Currency_ID=invoice.getC_Currency_ID();        if (C_Currency_ID == 0 && order != null)         C_Currency_ID=order.getC_Currency_ID();        MCash cash=null;        if (newC_CashBook_ID != 0)         cash=MCash.get(Env.getCtx(),newC_CashBook_ID,newDateAcct,null); else         cash=MCash.get(Env.getCtx(),m_AD_Org_ID,newDateAcct,C_Currency_ID,null);        if (cash == null || cash.get_ID() == 0)         FDialog.error(m_WindowNo,this,"PaymentError",CLogger.retrieveErrorString("CashNotCreated")); else {          MCashLine cl=new MCashLine(cash);          if (invoice != null)           cl.setInvoice(invoice);          if (order != null) {            cl.setOrder(order,null);            m_needSave=true;          }          cl.setAmount((BigDecimal)bAmountField.getValue());          cl.saveEx();          log.config("CashCreated");          if (invoice == null && C_Invoice_ID != 0) {            invoice=new MInvoice(Env.getCtx(),C_Invoice_ID,null);          }          if (invoice != null) {            invoice.setC_CashLine_ID(cl.getC_CashLine_ID());            invoice.saveEx(trxName);          }          if (order == null && C_Order_ID != 0) {            order=new MOrder(Env.getCtx(),C_Order_ID,null);          }          if (order != null) {            order.setC_CashLine_ID(cl.getC_CashLine_ID());            order.saveEx(trxName);          }          log.config("Update Order & Invoice with CashLine");        }      }    }  }  if (("KS".indexOf(newPaymentRule) != -1) || (newPaymentRule.equals(MOrder.PAYMENTRULE_Cash) && m_Cash_As_Payment)) {    log.fine("Payment - " + newPaymentRule);    m_mPayment.setAmount(m_C_Currency_ID,payAmount);    if (newPaymentRule.equals(MOrder.PAYMENTRULE_CreditCard)) {      m_mPayment.setCreditCard(MPayment.TRXTYPE_Sales,newCCType,kNumberField.getText(),"",kExpField.getText());      m_mPayment.setAmount(m_C_Currency_ID,(BigDecimal)kAmountField.getValue());      m_mPayment.setPaymentProcessor();    } else     if (newPaymentRule.equals(MOrder.PAYMENTRULE_DirectDeposit) || newPaymentRule.equals(MOrder.PAYMENTRULE_DirectDebit)) {      m_mPayment.setBankACH(newC_BankAccount_ID,m_isSOTrx,newPaymentRule,tRoutingField.getText(),tNumberField.getText());      m_mPayment.setAmount(m_C_Currency_ID,payAmount);    } else     if (newPaymentRule.equals(MOrder.PAYMENTRULE_Check)) {      m_mPayment.setBankCheck(newC_BankAccount_ID,m_isSOTrx,sRoutingField.getText(),sNumberField.getText(),sCheckField.getText());      m_mPayment.setAmount(m_C_Currency_ID,(BigDecimal)sAmountField.getValue());    } else     if (newPaymentRule.equals(MOrder.PAYMENTRULE_Cash)) {      m_mPayment.setTenderType(MPayment.TENDERTYPE_Cash);      m_mPayment.setBankCash(newC_BankAccount_ID,m_isSOTrx,MPayment.TENDERTYPE_Cash);      m_mPayment.setAmount(m_C_Currency_ID,payAmount);    }    m_mPayment.setC_BPartner_ID(m_C_BPartner_ID);    m_mPayment.setC_Invoice_ID(C_Invoice_ID);    if (order != null) {      m_mPayment.setC_Order_ID(C_Order_ID);      m_needSave=true;    }    m_mPayment.setDateTrx(m_DateAcct);    m_mPayment.setDateAcct(m_DateAcct);    m_mPayment.saveEx();    if (m_mPayment.get_ID() > 0 && MPayment.DOCSTATUS_Drafted.equals(m_mPayment.getDocStatus())) {      boolean ok=m_mPayment.processIt(DocAction.ACTION_Complete);      m_mPayment.saveEx();      if (ok)       FDialog.info(m_WindowNo,this,"PaymentCreated",m_mPayment.getDocumentNo()); else       FDialog.error(m_WindowNo,this,"PaymentError","PaymentNotCreated");    } else     log.fine("NotDraft " + m_mPayment);  }  log.config("Saving changes");  if (!newPaymentRule.equals(m_PaymentRule))   m_mTab.setValue("PaymentRule",newPaymentRule);  if (!newDateAcct.equals(m_DateAcct))   m_mTab.setValue("DateAcct",newDateAcct);  if (newC_PaymentTerm_ID != m_C_PaymentTerm_ID)   m_mTab.setValue("C_PaymentTerm_ID",new Integer(newC_PaymentTerm_ID));  if (m_mPayment.getC_Payment_ID() != m_C_Payment_ID) {    if (m_mPayment.getC_Payment_ID() == 0)     m_mTab.setValue("C_Payment_ID",null); else     m_mTab.setValue("C_Payment_ID",new Integer(m_mPayment.getC_Payment_ID()));  }  if (newC_CashLine_ID != m_C_CashLine_ID) {    if (newC_CashLine_ID == 0)     m_mTab.setValue("C_CashLine_ID",null); else     m_mTab.setValue("C_CashLine_ID",new Integer(newC_CashLine_ID));  }  return true;}  }
class C{  private void performInitialSync() throws IOException {  About about=drive.about().get().setFields(ABOUT_GET_FIELDS).execute();  long largestChangeId=about.getLargestChangeId();  Files.List myTracksFolderRequest=drive.files().list().setQ(String.format(Locale.US,SyncUtils.MY_TRACKS_FOLDER_FILES_QUERY,folderId));  Map<String,File> myTracksFolderMap=getFiles(myTracksFolderRequest,true);  Set<String> syncedDriveIds=updateSyncedTracks();  for (  String driveId : syncedDriveIds) {    myTracksFolderMap.remove(driveId);  }  Files.List sharedWithMeRequest=drive.files().list().setQ(SyncUtils.SHARED_WITH_ME_FILES_QUERY);  Map<String,File> sharedWithMeMap=getFiles(sharedWithMeRequest,false);  try {    insertNewTracks(myTracksFolderMap.values());    insertNewTracks(sharedWithMeMap.values());    PreferencesUtils.setLong(context,R.string.drive_largest_change_id_key,largestChangeId);  } catch (  IOException e) {    Cursor cursor=null;    try {      cursor=myTracksProviderUtils.getTrackCursor(SyncUtils.DRIVE_ID_TRACKS_QUERY,null,null);      if (cursor != null && cursor.moveToFirst()) {        do {          Track track=myTracksProviderUtils.createTrack(cursor);          if (!syncedDriveIds.contains(track.getDriveId())) {            myTracksProviderUtils.deleteTrack(context,track.getId());          }        } while (cursor.moveToNext());      }    }  finally {      if (cursor != null) {        cursor.close();      }    }    throw e;  }}  }
class C{  public static boolean isValidDisplacement(IGame game,int entityId,Coords src,int direction){  return Compute.isValidDisplacement(game,entityId,src,src.translated(direction));}  }
class C{  public static final void writeListXml(List val,OutputStream out) throws XmlPullParserException, IOException {  XmlSerializer serializer=Xml.newSerializer();  serializer.setOutput(out,"utf-8");  serializer.startDocument(null,true);  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  writeListXml(val,null,serializer);  serializer.endDocument();}  }
class C{  protected void configError(){  HadoopErrorSimulator.instance().onReduceConfigure();}  }
class C{  public static double log2Multinomial(double a,double[] bs){  double sum=0;  int i;  for (i=0; i < bs.length; i++) {    if (Utils.gr(bs[i],a)) {      throw new ArithmeticException("Can't compute multinomial coefficient.");    } else {      sum=sum + lnFactorial(bs[i]);    }  }  return (lnFactorial(a) - sum) / log2;}  }
class C{  public static Character[] toReferenceType(char[] primArr){  Character[] refArr=new Character[primArr.length];  for (int i=0; i < primArr.length; i++)   refArr[i]=new Character(primArr[i]);  return refArr;}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  public ClassNotFoundException toClassNotFoundException(){  ClassDescriptor classDescriptor=DescriptorFactory.createClassDescriptorFromResourceName(resourceName);  return new ClassNotFoundException("ResourceNotFoundException while looking for class " + classDescriptor.toDottedClassName() + ": "+ getMessage());}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.681 -0500",hash_original_method="13B1BC43B8C5BB9B164E62DA1A0BBF2A",hash_generated_method="6F9AB4C50A662290F4B5F8D5EC47BCC8") @Override public synchronized int read(){  return pos < count ? buffer.charAt(pos++) & 0xFF : -1;}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<BlockPair>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  public void onSuccess(int statusCode,Headers headers,String content){  onSuccess(statusCode,content);}  }
class C{  public void clearBackdrop(){  backdropAppearance=null;  backdropImage=null;  backdropColor=null;  setShowsBackdrop(false);}  }
class C{  public Object init(InternalContextAdapter context,Object data) throws Exception {  super.init(context,data);  return data;}  }
class C{  public XmlSerializer newSerializer() throws XmlPullParserException {  if (serializerClasses == null) {    throw new XmlPullParserException("Factory initialization incomplete - has not tried " + classNamesLocation);  }  if (serializerClasses.size() == 0) {    throw new XmlPullParserException("No valid serializer classes found in " + classNamesLocation);  }  final StringBuilder issues=new StringBuilder();  for (int i=0; i < serializerClasses.size(); i++) {    final Class ppClass=(Class)serializerClasses.get(i);    try {      final XmlSerializer ser=(XmlSerializer)ppClass.newInstance();      return ser;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create serializer: " + issues);}  }
class C{  public static boolean createAnonymous(){  if (instance == null) {    getCurrentPersona();  }  ConnectionRequest login=new ConnectionRequest();  login.setPost(true);  login.setUrl(CloudStorage.SERVER_URL + "/objStoreUser");  login.addArgument("pk",Display.getInstance().getProperty("package_name",null));  login.addArgument("bb",Display.getInstance().getProperty("built_by_user",null));  NetworkManager.getInstance().addToQueueAndWait(login);  if (login.getResposeCode() != 200) {    return false;  }  ByteArrayInputStream bi=new ByteArrayInputStream(login.getResponseData());  DataInputStream di=new DataInputStream(bi);  if (instance == null) {    instance=new CloudPersona();  }  try {    instance.persona=di.readUTF();  } catch (  IOException ex) {    ex.printStackTrace();  }  Preferences.set("CN1Persona",instance.persona);  Preferences.set("CN1PersonaAnonymous",true);  Util.cleanup(di);  return true;}  }
class C{  public static byte[] encodeBase64Chunked(byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  public int hleJpegDecodeYCbCr(BufferedImage bufferedImage,TPointer yCbCrBuffer,int yCbCrBufferSize,int dhtMode){  int width=bufferedImage.getWidth();  int height=bufferedImage.getHeight();  int sizeY=width * height;  int sizeCb=sizeY >> 2;  int addressY=yCbCrBuffer.getAddress();  int addressCb=addressY + sizeY;  int addressCr=addressCb + sizeCb;  if (log.isDebugEnabled()) {    log.debug(String.format("hleJpegDecodeYCbCr 0x%08X, 0x%08X, 0x%08X",addressY,addressCb,addressCr));  }  int[] bufferCb=new int[sizeCb];  int[] bufferCr=new int[sizeCb];  IMemoryWriter imageWriterY=MemoryWriter.getMemoryWriter(addressY,sizeY,1);  for (int y=0; y < height; y++) {    int indexCb=(y >> 1) * (width >> 1);    for (int x=0; x < width; x+=2, indexCb++) {      int argb0=bufferedImage.getRGB(x,y);      int yCbCr0=colorARGBToYCbCr(argb0);      int argb1=bufferedImage.getRGB(x + 1,y);      int yCbCr1=colorARGBToYCbCr(argb1);      imageWriterY.writeNext(getY(yCbCr0));      imageWriterY.writeNext(getY(yCbCr1));      bufferCb[indexCb]+=getCb(yCbCr0);      bufferCb[indexCb]+=getCb(yCbCr1);      bufferCr[indexCb]+=getCr(yCbCr0);      bufferCr[indexCb]+=getCr(yCbCr1);    }  }  imageWriterY.flush();  IMemoryWriter imageWriterCb=MemoryWriter.getMemoryWriter(addressCb,sizeCb,1);  IMemoryWriter imageWriterCr=MemoryWriter.getMemoryWriter(addressCr,sizeCb,1);  for (int i=0; i < sizeCb; i++) {    imageWriterCb.writeNext(bufferCb[i] >> 2);    imageWriterCr.writeNext(bufferCr[i] >> 2);  }  imageWriterCb.flush();  imageWriterCr.flush();  return getWidthHeight(width,height);}  }
class C{  private void emitCode(){  LinkedList<Instantiation> worklist=new LinkedList<Instantiation>();  worklist.add(new Instantiation(null,mainSubroutine));  InsnList newInstructions=new InsnList();  List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>();  List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>();  while (!worklist.isEmpty()) {    Instantiation inst=worklist.removeFirst();    emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables);  }  instructions=newInstructions;  tryCatchBlocks=newTryCatchBlocks;  localVariables=newLocalVariables;}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println("JAXP: " + msg);  }}  }
class C{  @Override public void close(){  if (publisherChannel == null) {    return;  }  cachedPublisherStub=null;  cachedSubscriberStub=null;  ManagedChannel publisherChannel=this.publisherChannel;  this.publisherChannel=null;  publisherChannel.shutdown();  try {    publisherChannel.awaitTermination(timeoutSec,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public boolean equals(Object otherObj){  if (!(otherObj instanceof ByteArrayList))   return super.equals(otherObj);  if (this == otherObj)   return true;  if (otherObj == null)   return false;  ByteArrayList other=(ByteArrayList)otherObj;  if (size() != other.size())   return false;  byte[] theElements=elements();  byte[] otherElements=other.elements();  for (int i=size(); --i >= 0; ) {    if (theElements[i] != otherElements[i])     return false;  }  return true;}  }
class C{  public void addAlternativeOCSP(AlternativeOCSP altOCSP){  Validate.notNull(altOCSP,"altOCSP");  if (_ocspList == null) {    _ocspList=new ArrayList<AlternativeOCSP>();  }  for (  AlternativeOCSP ocsp : _ocspList) {    if (ocsp.get_responderURL().equals(altOCSP.get_responderURL())) {      ocsp.set_responderSigningCert(altOCSP.get_responderSigningCert());      return;    }  }  _ocspList.add(altOCSP);}  }
class C{  public DrillSidewaysResult search(DrillDownQuery query,int topN) throws IOException {  return search(null,query,topN);}  }
class C{  public static double gaussian(){  double r, x, y;  do {    x=uniform(-1.0,1.0);    y=uniform(-1.0,1.0);    r=x * x + y * y;  } while (r >= 1 || r == 0);  return x * Math.sqrt(-2 * Math.log(r) / r);}  }
class C{  public static Location parseLocation(String locationString){  if (locationString == null || locationString.length() == 0 || UNKNOWN_LOCATION.equals(locationString)) {    return nullLoc;  }  Matcher matcher;  if ((matcher=LOCATION_MATCHER2.matcher(locationString)).matches()) {    return moduleLocation(matcher.group(1));  } else   if ((matcher=LOCATION_MATCHER.matcher(locationString)).matches()) {    try {      return new Location(UniqueString.uniqueStringOf(matcher.group(5)),Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)));    } catch (    NumberFormatException e) {      return nullLoc;    }  } else   if ((matcher=LOCATION_MATCHER3.matcher(locationString.trim())).matches()) {    try {      return new Location(UniqueString.uniqueStringOf(matcher.group(5)),Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)));    } catch (    NumberFormatException e) {      return nullLoc;    }  } else   if ((matcher=LOCATION_MATCHER4.matcher(locationString.trim())).matches()) {    try {      return new Location(UniqueString.uniqueStringOf(matcher.group(5)),Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)));    } catch (    NumberFormatException e) {      return nullLoc;    }  } else {    return nullLoc;  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected KeyGenerator(KeyGeneratorSpi keyGenSpi,Provider provider,String algorithm){  this.spi=keyGenSpi;  this.provider=provider;  this.algorithm=algorithm;  if (!skipDebug && pdebug != null) {    pdebug.println("KeyGenerator." + algorithm + " algorithm from: "+ this.provider.getName());  }}  }
class C{  private int check(Grammar g1,Grammar g2){  Assert.assertEquals(g1.size(),g2.size());  int count=0;  for (int i=0; i < g1.size(); i++) {    if (g1.get(i) != g2.get(i)) {      count++;    }  }  return count;}  }
class C{  public static void makePrefix(CSTNode node,boolean throwIfInvalid){switch (node.getMeaning()) {case PLUS:    node.setMeaning(PREFIX_PLUS);  break;case MINUS:node.setMeaning(PREFIX_MINUS);break;case PLUS_PLUS:node.setMeaning(PREFIX_PLUS_PLUS);break;case MINUS_MINUS:node.setMeaning(PREFIX_MINUS_MINUS);break;default :if (throwIfInvalid) {throw new GroovyBugError("cannot convert to prefix for type [" + node.getMeaning() + "]");}}}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  public FullFrameRect(IFilter program){  mFilter=program;  Matrix.setIdentityM(IDENTITY_MATRIX,0);}  }
class C{  public boolean isFragmentEvent(){  if (streamNumber == -1) {    throw new IllegalStateException("Not initialized for stream number and tagged event");  }  return isFragmentEvent;}  }
class C{  public void linkToExit(BasicBlock bb){  bb.insertOut(exit());}  }
class C{  public void refresh(){  Vector vec=cache.getKeysInCache();  int s=vec.size();  Vector cld=new Vector();  for (int iter=0; iter < s; iter++) {    Object key=vec.elementAt(iter);    Object val=cache.get(key);    if (val != null && val instanceof CloudObject) {      cld.addElement((CloudObject)val);    }  }  if (cld.size() > 0) {    CloudObject[] obj=new CloudObject[cld.size()];    cld.toArray(obj);    int response=CloudStorage.getInstance().refresh(obj);    if (response != CloudStorage.RETURN_CODE_SUCCESS) {      onError(new CloudException(response));    } else {      for (int iter=0; iter < obj.length; iter++) {        cache.put(obj[iter].getCloudId(),obj[iter]);      }      modelListener.fireDataChangeEvent(0,getSize());    }  }}  }
class C{  public void cancel(){  streamAllocation.cancel();}  }
class C{  @Override public void windowClosing(WindowEvent e){  int button;  while (getMainPanel().getTabbedPane().getTabCount() > 0) {    getMainPanel().closeFile(false);  }  if (getConfirmExit()) {    button=ComponentHelper.showMessageBox(this,"Quit - " + getTitle(),"Do you really want to quit?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);    if (button == JOptionPane.YES_OPTION) {      dispose();    }  } else {    dispose();  }  if (getExitOnClose()) {    System.exit(0);  }}  }
class C{  public static void initialize(Retransformer trans) throws Exception {  transformer=trans;  URI uri=OpenTracingRuleLoader.class.getResource(ROOT_RULE_FOLDER).toURI();  String s=uri.toString();  int separator=s.indexOf("!/");  String entryName=s.substring(separator + 2);  URI fileURI=URI.create(s.substring(0,separator));  List<String> scripts=new ArrayList<>();  List<String> scriptNames=new ArrayList<>();  try (FileSystem fs=FileSystems.newFileSystem(fileURI,Collections.<String,Object>emptyMap())){    Path rules=fs.getPath(entryName);    Files.walk(rules).filter(null).forEach(null);  }   try (PrintWriter writer=new PrintWriter(new StringWriter())){    transformer.installScript(scripts,scriptNames,writer);  }   if (log.isLoggable(Level.FINE)) {    log.fine("Installed rules");  }}  }
class C{  public GenerateJavaRoutes(URI modelURI,File targetFolder,List<? extends Object> arguments) throws IOException {  initialize(modelURI,targetFolder,arguments);}  }
class C{  public int zoomLevelForScale(float scale,int scaleType){  if (scale == 1) {    return 10;  } else   if (scale < 1) {    return Math.round(scale * 10f);  }  double scaleFrom0x10=Math.round(scale * 10) - 10d;  double exactValue=Math.log(scaleFrom0x10) / Math.log(2);  int roundedValue=(int)(scaleType == SCALE_TYPE_FLOOR ? Math.floor(exactValue) : scaleType == SCALE_TYPE_CEIL ? Math.ceil(exactValue) : Math.round(exactValue));  return (int)(10 + Math.pow(2,roundedValue));}  }
class C{  public void preLoad() throws ClassNotFoundException {}  }
class C{  public static int clampMono(int value){  return Math.max(Math.min(value,0x7FFF),-0x8000);}  }
class C{  @Override protected void complete(DbClient dbClient,Status status,ServiceCoded coded) throws DeviceControllerException {  log.info("ComputeImageServerCompleter.complete {}",status.name());  ComputeImageServer imageServer=dbClient.queryObject(ComputeImageServer.class,getId());  AuditLogManager auditMgr=AuditLogManagerFactory.getAuditLogManager();  if (status == Status.error) {    dbClient.error(ComputeImageServer.class,getId(),getOpId(),coded);    auditMgr.recordAuditLog(null,null,serviceType,opType,System.currentTimeMillis(),AuditLogManager.AUDITLOG_FAILURE,AuditLogManager.AUDITOP_END,imageServer.getId().toString(),imageServer.getComputeImageServerStatus());  } else {    if (opType == OperationTypeEnum.DELETE_COMPUTE_IMAGESERVER) {      dbClient.markForDeletion(imageServer);    } else     if (opType == OperationTypeEnum.IMAGESERVER_VERIFY_IMPORT_IMAGES) {      imageServer.setComputeImageServerStatus(ComputeImageServerStatus.AVAILABLE.name());      dbClient.persistObject(imageServer);    }    dbClient.ready(ComputeImageServer.class,getId(),getOpId());    auditMgr.recordAuditLog(null,null,serviceType,opType,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_END,imageServer.getId().toString(),imageServer.getComputeImageServerStatus());  }}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public static boolean useUTF8(){  try {    System.setOut(new PrintStream(System.out,true,"UTF8"));    System.setErr(new PrintStream(System.err,true,"UTF8"));    return true;  } catch (  UnsupportedEncodingException e1) {    LOG.warn("UTF8 is not a valid encoding; using system default encoding for System.out and System.err.");    return false;  }catch (  SecurityException e2) {    LOG.warn("Security manager is configured to disallow changes to System.out or System.err; using system default encoding.");    return false;  }}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=appDeploymentQueueDAO.totalRecordCount();    List<com.wipro.ats.bdre.md.dao.jpa.AppDeploymentQueue> jpaAdqList=appDeploymentQueueDAO.list(startPage,pageSize);    List<AppDeploymentQueue> appDeploymentQueues=new ArrayList<AppDeploymentQueue>();    for (    com.wipro.ats.bdre.md.dao.jpa.AppDeploymentQueue adq : jpaAdqList) {      AppDeploymentQueue appDeploymentQueue=new AppDeploymentQueue();      appDeploymentQueue.setUsername(adq.getUsers().getUsername());      appDeploymentQueue.setAppDomain(adq.getAppDomain());      appDeploymentQueue.setAppName(adq.getAppName());      appDeploymentQueue.setProcessId(adq.getProcess().getProcessId());      appDeploymentQueue.setAppDeploymentQueueId(adq.getAppDeploymentQueueId());      appDeploymentQueue.setAppDeploymentStatusId(adq.getAppDeploymentQueueStatus().getAppDeploymentStatusId());      appDeploymentQueue.setCounter(counter);      appDeploymentQueues.add(appDeploymentQueue);    }    restWrapper=new RestWrapper(appDeploymentQueues,RestWrapper.OK);    LOGGER.info("All records listed from AppDeploymentQueue by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  void suspend(){  vmdata.suspend();}  }
class C{  @DSComment("Character encoder/decoder") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.579 -0500",hash_original_method="72D962B2D73E7D1A25E9E1AB76F037A1",hash_generated_method="CAF9A4E111854F6FF7C687173E4F4809") public boolean isUnderflow(){  return ((this.type) == 1);}  }
class C{  public static double[] subtract(double[] array,double value) throws Exception {  double[] returnValues=new double[array.length];  for (int i=0; i < returnValues.length; i++) {    returnValues[i]=array[i] - value;  }  return returnValues;}  }
class C{  protected Tasks<T> postTasks(String path,Object... args){  TaskList tasks=client.post(TaskList.class,path,args);  return new Tasks<T>(client,tasks.getTaskList(),resourceClass);}  }
class C{  public synchronized void verifyLogin(String username,String password) throws SOSAuthenticationFailure, SOSFailure {  final String methodName="verifyLogin(): ";  final String FILE_COS_LIST_URI="/file/vpools";  try {    _client.setLoginCredentials(username,password);    _client.queryObject(FILE_COS_LIST_URI,String.class);  } catch (  NoSuchAlgorithmException e) {    log.error(methodName + "NoSuchAlgorithmException occured",e);    throw new SOSFailure(e);  }catch (  UniformInterfaceException e) {    if (e.toString().contains("403 Forbidden")) {      throw new SOSAuthenticationFailure("Incorrect login credentials");    }    if (e.toString().contains("401 Unauthorized")) {      throw new SOSAuthenticationFailure("Incorrect login credentials");    }  }}  }
class C{  public static final boolean isLocationProviderEnabled(ContentResolver cr,String provider){  return isLocationProviderEnabledForUser(cr,provider,UserHandle.myUserId());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.156 -0500",hash_original_method="62C2434D460BC8554CF92975C4745DF3",hash_generated_method="D16272D013A1528940CEA00C0F124898") @DSVerified @DSSafe(DSCat.XML) public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  public boolean mouseClicked(MouseEvent e){  int descriptor=MOUSE_CLICKED_MASK;  LinkOMGraphicList graphics=getGraphicList();  if (graphics == null) {    Debug.message("link","DrawLinkLayer.mouseClicked: null LinkOMGraphicList, making new one...");    graphics=new LinkOMGraphicList();    setGraphicList(graphics);  }  Debug.message("link","DrawLinkLayer mouseClicked");  OMGraphic gesGraphic=null;  LinkOMGraphicList selectableList=new LinkOMGraphicList();  OMGraphic g;  Properties p;  String selectable;  for (Iterator it=graphics.iterator(); it.hasNext(); ) {    g=(OMGraphic)it.next();    p=(Properties)g.getAttribute(OMGraphic.APP_OBJECT);    selectable=p.getProperty(LPC_SELECTABLE);    if (selectable.equals("true")) {      selectableList.add(g);    }  }  try {    if (e == null) {      graphics.deselect();      return false;    }    gesGraphic=selectableList.findClosest(e.getX(),e.getY(),distanceLimit);    String id=null;    if (gesGraphic != null) {      Debug.message("link","LinkLayer: found gesture graphic");      boolean tellServer=graphicGestureReaction(gesGraphic,descriptor,e);      if (!tellServer) {        repaint();        return true;      }      descriptor=LinkUtil.setMask(descriptor,GRAPHIC_ID_MASK);      id=((LinkProperties)gesGraphic.getAttribute(OMGraphic.APP_OBJECT)).getProperty(LPC_GRAPHICID);    } else {      Debug.message("link","LinkLayer: gesture graphic NOT FOUND");      fireRequestInfoLine("");    }    if (!LinkUtil.isMask(getGestureDescriptor(),SERVER_NOTIFICATION_MASK)) {      return false;    }    Point2D llpoint=getProjection().inverse(e.getX(),e.getY());    ClientLink l=linkManager.getLink(false);    if (l == null) {      Debug.message("link","LinkLayer: unable to get link in handleGesture().");      return false;    }synchronized (l) {      if (id != null) {        args.setProperty(LPC_GRAPHICID,id);      } else {        args.remove(LPC_GRAPHICID);      }      LinkActionRequest.write(descriptor,e,(float)llpoint.getY(),(float)llpoint.getX(),args,l);    }    linkManager.finLink();  } catch (  IOException ioe) {    System.err.println("LinkLayer: IOException contacting server during gesture handling!");    System.err.println(ioe);    linkManager.resetLink();    return false;  }  OMDrawingTool dt=getDrawingTool();  if (dt != null) {    dt.setMask(OMDrawingTool.DEACTIVATE_ASAP_BEHAVIOR_MASK);    EditableOMGraphic egraphic=dt.getCurrentEditable();    if (egraphic != null) {      OMGraphic graphic=egraphic.getGraphic();      OMAction action=new OMAction(UPDATE_GRAPHIC_MASK);      drawingComplete(graphic,action);      dt.setCurrentEditable(null);    }  }  if (gesGraphic != null && drawingTool != null) {    OMGraphic graphic=null;    if (dt != null) {      Properties prop=(Properties)gesGraphic.getAttribute(OMGraphic.APP_OBJECT);      String editable=prop.getProperty(LPC_EDITABLE);      Debug.message("link","DrawLinkLayer: editable: " + editable);      if (editable.equals("false")) {        Debug.message("link","DrawLinkLayer not editing graphic.  editable = false");      } else {        Debug.message("link","DrawLinkLayer trying to edit graphic");        graphic=dt.edit(gesGraphic,layer);      }    } else {      Debug.message("link","Error: DrawLinkLayer has not drawing tool");    }    if (graphic != null) {      Debug.message("link","DrawLinkLayer editing graphic");    } else {      Debug.message("link","DrawLinkLayer unable to edit graphic");    }  }  return true;}  }
class C{  @Override public void processView(ViewEngineContext context) throws ViewEngineException {  try {    forwardRequest(context,"*.xhtml");  } catch (  ServletException|IOException e) {    throw new ViewEngineException(e);  }}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public Email subject(String subject){  if (subject == null)   throw new IllegalArgumentException("subject == null");  this.subject=subject;  return this;}  }
class C{  public void revalidate(){}  }
class C{  @Beta public static <K,V>ImmutableSortedMap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries,Comparator<? super K> comparator){  return fromEntries(checkNotNull(comparator),false,entries);}  }
class C{  public FastLongBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  public boolean isScrollOnExpand(){  return scrollOnExpand;}  }
class C{  private boolean analyzeTraces(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,List<ExecutionResult> results,Map<Integer,Integer> predicateCount,Map<Integer,Double> trueDistance,Map<Integer,Double> falseDistance){  boolean hasTimeoutOrTestException=false;  for (  ExecutionResult result : results) {    if (result.hasTimeout() || result.hasTestException()) {      hasTimeoutOrTestException=true;      continue;    }    for (    Entry<Integer,Integer> entry : result.getTrace().getPredicateExecutionCount().entrySet()) {      if (!branchesId.contains(entry.getKey()) || (removedBranchesT.contains(entry.getKey()) && removedBranchesF.contains(entry.getKey())))       continue;      if (!predicateCount.containsKey(entry.getKey()))       predicateCount.put(entry.getKey(),entry.getValue()); else {        predicateCount.put(entry.getKey(),predicateCount.get(entry.getKey()) + entry.getValue());      }    }    for (    Entry<Integer,Double> entry : result.getTrace().getTrueDistances().entrySet()) {      if (!branchesId.contains(entry.getKey()) || removedBranchesT.contains(entry.getKey()))       continue;      if (!trueDistance.containsKey(entry.getKey()))       trueDistance.put(entry.getKey(),entry.getValue()); else {        trueDistance.put(entry.getKey(),Math.min(trueDistance.get(entry.getKey()),entry.getValue()));      }      if ((Double.compare(entry.getValue(),0.0) == 0)) {        result.test.addCoveredGoal(branchCoverageTrueMap.get(entry.getKey()));        if (Properties.TEST_ARCHIVE) {          TestsArchive.instance.putTest(this,branchCoverageTrueMap.get(entry.getKey()),result);          toRemoveBranchesT.add(entry.getKey());          suite.isToBeUpdated(true);        }      }    }    for (    Entry<Integer,Double> entry : result.getTrace().getFalseDistances().entrySet()) {      if (!branchesId.contains(entry.getKey()) || removedBranchesF.contains(entry.getKey()))       continue;      if (!falseDistance.containsKey(entry.getKey()))       falseDistance.put(entry.getKey(),entry.getValue()); else {        falseDistance.put(entry.getKey(),Math.min(falseDistance.get(entry.getKey()),entry.getValue()));      }      if ((Double.compare(entry.getValue(),0.0) == 0)) {        result.test.addCoveredGoal(branchCoverageFalseMap.get(entry.getKey()));        if (Properties.TEST_ARCHIVE) {          TestsArchive.instance.putTest(this,branchCoverageFalseMap.get(entry.getKey()),result);          toRemoveBranchesF.add(entry.getKey());          suite.isToBeUpdated(true);        }      }    }  }  return hasTimeoutOrTestException;}  }
class C{  public int indexOf(String subString,int start){  if (start < 0) {    start=0;  }  int subCount=subString.length();  if (subCount > 0) {    if (subCount + start > count) {      return -1;    }    char firstChar=subString.charAt(0);    while (true) {      int i=start;      boolean found=false;      for (; i < count; i++) {        if (value[i] == firstChar) {          found=true;          break;        }      }      if (!found || subCount + i > count) {        return -1;      }      int o1=i, o2=0;      while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {      }      if (o2 == subCount) {        return i;      }      start=i + 1;    }  }  return (start < count || start == 0) ? start : count;}  }
class C{  public PendingDelete(Index index,Settings settings){  this.index=index.getName();  this.shardId=-1;  this.settings=settings;  this.deleteIndex=true;}  }
class C{  public void removeErrorCallback(OneSheeldErrorCallback errorCallback){  if (errorCallback != null && errorCallbacks.contains(errorCallback))   errorCallbacks.remove(errorCallback);}  }
class C{  public boolean empties_as_allocs(){  return soot.PhaseOptions.getBoolean(options,"empties-as-allocs");}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType,String typeName) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType,typeName);}  }
class C{  private static <T>void assertCollectionEqualsNoOrder(Collection<T> expected,Collection<T> actual){  String msg=String.format("expected=%s, actual=%s",expected.toString(),actual.toString());  assertEquals(msg,expected.size(),actual.size());  for (  T e : expected) {    if (!actual.contains(e)) {      msg=String.format("Expected element %s not found in " + "actual. expected=%s, actual=%s",e,expected,actual);      fail(msg);    }  }}  }
class C{  public void defaultInit(){  addDataSources(INITIAL_DATA_SOURCES);}  }
class C{  public void write(OutputNode node,Object item) throws Exception {  if (!entry.isAttribute()) {    writeElement(node,item);  } else   if (item != null) {    writeAttribute(node,item);  }}  }
class C{  @Override public String toString(){  return "SI: " + symbolic + " "+ scratch+ " ["+ regAllocState.getDFN(begin)+ ","+ regAllocState.getDFN(end)+ "]";}  }
class C{  public static Document parse(String xml) throws SAXException, IOException {  return documentBuilder.parse(new InputSource(new StringReader(xml)));}  }
class C{  public void endConfig() throws NetworkDeviceControllerException {  if (inConfigMode == false) {    return;  }  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};  StringBuilder buf=new StringBuilder();  lastPrompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.endConfig.end.cmd"),defaultTimeout,prompts,buf);  inConfigMode=false;}  }
class C{  public Nystrom(KernelTrick k,int basisSize,SamplingMethod method,double ridge,boolean sampleWithReplacment){  setKernel(k);  setBasisSize(basisSize);  setBasisSamplingMethod(method);  setRidge(ridge);  this.sampleWithReplacment=sampleWithReplacment;}  }
class C{  public static Object quoteIfString(Object obj){  return (obj instanceof String ? quote((String)obj) : obj);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  String attrName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  attrName=domesticAttr.getNodeName();  assertEquals("namednodemapGetNamedItemAssert","domestic",attrName);}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  }  if (!(o instanceof TOMMessage)) {    return false;  }  TOMMessage mc=(TOMMessage)o;  return (mc.getSender() == sender) && (mc.getSequence() == sequence) && (mc.getOperationId() == operationId);}  }
class C{  public byte[] exportPreferences(SharedPreferences preferences) throws IOException {  ByteArrayOutputStream bufStream=new ByteArrayOutputStream(BUFFER_SIZE);  DataOutputStream outWriter=new DataOutputStream(bufStream);  exportPreferences(preferences,outWriter);  return bufStream.toByteArray();}  }
class C{  protected HARegionQueue createHARegionQueue(String name) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public boolean retainAll(AbstractFloatList other){  if (!(other instanceof FloatArrayList))   return super.retainAll(other);  int limit=other.size() - 1;  int j=0;  float[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    FloatArrayList sortedList=(FloatArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.EVENT__DIRECTION:    setDirection((Direction)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void loadUrl(String url){  if (appView == null) {    init();  }  this.keepRunning=preferences.getBoolean("KeepRunning",true);  appView.loadUrlIntoView(url,true);}  }
class C{  public DefaultListModel(Collection<T> items){  this.items=new ArrayList(items);}  }
class C{  public void firePropertyChange(String propertyName,int oldValue,int newValue){  super.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  private Map<String,Object> parseIncluded(JsonNode parent) throws IOException, IllegalAccessException, InstantiationException {  Map<String,Object> result=new HashMap<>();  if (parent.has(INCLUDED)) {    List<Resource> includedResources=getIncludedResources(parent);    if (!includedResources.isEmpty()) {      for (      Resource includedResource : includedResources) {        result.put(includedResource.getIdentifier(),includedResource.getObject());      }      ArrayNode includedArray=(ArrayNode)parent.get(INCLUDED);      for (int i=0; i < includedResources.size(); i++) {        Resource resource=includedResources.get(i);        JsonNode node=includedArray.get(i);        handleRelationships(node,resource.getObject());      }    }  }  return result;}  }
class C{  public static void delete(File fileOrDirectory){  if (!fileOrDirectory.exists()) {    return;  }  if (fileOrDirectory.isDirectory()) {    File[] filesList=fileOrDirectory.listFiles();    for (    File child : filesList) {      delete(child);    }  }  final File to=new File(fileOrDirectory.getAbsolutePath() + System.currentTimeMillis());  fileOrDirectory.renameTo(to);  to.delete();}  }
class C{  protected void updateCloudletProcessing(){  if (CloudSim.clock() < 0.111 || CloudSim.clock() > getLastProcessTime() + CloudSim.getMinTimeBetweenEvents()) {    List<? extends ContainerHost> list=getVmAllocationPolicy().getContainerHostList();    double smallerTime=Double.MAX_VALUE;    for (int i=0; i < list.size(); i++) {      ContainerHost host=list.get(i);      double time=host.updateContainerVmsProcessing(CloudSim.clock());      if (time < smallerTime) {        smallerTime=time;      }    }    if (smallerTime < CloudSim.clock() + CloudSim.getMinTimeBetweenEvents() + 0.01) {      smallerTime=CloudSim.clock() + CloudSim.getMinTimeBetweenEvents() + 0.01;    }    if (smallerTime != Double.MAX_VALUE) {      schedule(getId(),(smallerTime - CloudSim.clock()),CloudSimTags.VM_DATACENTER_EVENT);    }    setLastProcessTime(CloudSim.clock());  }}  }
class C{  @SuppressWarnings("unused") public static byte[] print_bar_code(byte barcode_typ,String barcode2print){  byte[] barcodeBytes=barcode2print.getBytes();  byte[] result=new byte[3 + barcodeBytes.length + 1];  result[0]=GS;  result[1]=107;  result[2]=barcode_typ;  int idx=3;  for (  byte b : barcodeBytes) {    result[idx]=b;    idx++;  }  result[idx]=0;  return result;}  }
class C{  public static <K,V>BiMap<K,V> constrainedBiMap(BiMap<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedBiMap<K,V>(map,null,constraint);}  }
class C{  public void onServerSentPartialBlockDeleteCommand(BlockPos p){  for (int i=0; i < partiallyMinedBlocksArray.length; i++) {    if (partiallyMinedBlocksArray[i] != null && partiallyMinedBlocksArray[i].getPos().equals(p)) {      partiallyMinedBlocksArray[i]=null;      vanillaDestroyBlockProgressMap.remove(i);      break;    }  }}  }
class C{  public static boolean hasQName(Node node,QName qname){  return qname.getNamespaceURI().equals(node.getNamespaceURI()) && qname.getLocalPart().equals(node.getLocalName());}  }
class C{  public java.lang.StringBuffer deleteCharAt(int index){  return null;}  }
class C{  public static void main(String[] args) throws IgniteException {  ExamplesUtils.checkMinMemory(MIN_MEMORY);  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache data streamer example started.");    try (IgniteCache<Integer,String> cache=ignite.getOrCreateCache(CACHE_NAME)){      long start=System.currentTimeMillis();      try (IgniteDataStreamer<Integer,String> stmr=ignite.dataStreamer(CACHE_NAME)){        stmr.perNodeBufferSize(1024);        stmr.perNodeParallelOperations(8);        for (int i=0; i < ENTRY_COUNT; i++) {          stmr.addData(i,Integer.toString(i));          if (i > 0 && i % 10000 == 0)           System.out.println("Loaded " + i + " keys.");        }      }       long end=System.currentTimeMillis();      System.out.println(">>> Loaded " + ENTRY_COUNT + " keys in "+ (end - start)+ "ms.");    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public CActionSaveAs(final JFrame parent,final ZyGraph graph,final IViewContainer container){  super("Save View As");  m_parent=parent;  m_graph=graph;  m_container=container;}  }
class C{  public void testSimpleClassAsProperty() throws Exception {  ObjectMapper m=new ObjectMapper();  Animal a=m.readValue(asJSONObjectValueString("@classy",Cat.class.getName(),"furColor","tabby","name","Garfield"),Animal.class);  assertNotNull(a);  assertEquals(Cat.class,a.getClass());  Cat c=(Cat)a;  assertEquals("Garfield",c.name);  assertEquals("tabby",c.furColor);}  }
class C{  public String seedTipText(){  return "the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.";}  }
class C{  @RequestMapping(value={"/admin/add/","/admin/add"},method=RequestMethod.PUT) @ResponseBody public RestWrapper addOneRecord(@ModelAttribute("generalConfig") @Valid GeneralConfig generalConfig,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    if (generalConfig.getRequired() <= 1) {      com.wipro.ats.bdre.md.dao.jpa.GeneralConfig jpaGeneralConfig=new com.wipro.ats.bdre.md.dao.jpa.GeneralConfig();      GeneralConfigId jpaGeneralConfigId=new GeneralConfigId();      jpaGeneralConfigId.setConfigGroup(generalConfig.getConfigGroup());      jpaGeneralConfigId.setGcKey(generalConfig.getKey());      jpaGeneralConfig.setDefaultVal(generalConfig.getDefaultVal());      jpaGeneralConfig.setDescription(generalConfig.getDescription());      jpaGeneralConfig.setEnabled(generalConfig.isEnabled());      jpaGeneralConfig.setGcValue(generalConfig.getValue());      jpaGeneralConfig.setId(jpaGeneralConfigId);      if (generalConfig.getRequired() == 1)       jpaGeneralConfig.setRequired(true); else       jpaGeneralConfig.setRequired(false);      jpaGeneralConfig.setType(generalConfig.getType());      GeneralConfigId id=generalConfigDAO.insert(jpaGeneralConfig);      if (id != null) {        restWrapper=new RestWrapper(generalConfig,RestWrapper.OK);        LOGGER.info(" Record with key:" + jpaGeneralConfigId.getGcKey() + " and config group:"+ jpaGeneralConfigId.getConfigGroup()+ " added in general_config by User:"+ principal.getName());      } else       LOGGER.error("Error to insert data");    } else {      LOGGER.error("Invalid required field's data");      restWrapper=new RestWrapper("Required field does not accest value other than 0 or 1",RestWrapper.ERROR);    }  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void broadcastShieldFrame(ShieldFrame frame,OneSheeldDevice exceptionArray[]){  broadcastShieldFrame(frame,false,exceptionArray);}  }
class C{  public static double weightedMean(DoubleArrayList data,DoubleArrayList weights){  int size=data.size();  if (size != weights.size() || size == 0)   throw new IllegalArgumentException();  double[] elements=data.elements();  double[] theWeights=weights.elements();  double sum=0.0;  double weightsSum=0.0;  for (int i=size; --i >= 0; ) {    double w=theWeights[i];    sum+=elements[i] * w;    weightsSum+=w;  }  return sum / weightsSum;}  }
class C{  public static boolean isFedora(){  return _isFedora;}  }
class C{  public static void stopThread(){  ActivityManager am;synchronized (ActivityManager.class) {    am=s_instance;  }  if (am != null)   am._stop();}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public boolean matches(String methodFqn){  return Utils.getRegex(pattern).matcher(methodFqn).matches();}  }
class C{  public void testStrangeProblem1() throws StringMatchingPatternSyntaxException {  RegexPattern pat=new RegexPattern("^(/.*)$",false);  StringMatchingMatcher mat=pat.matcher("/tester/one-level-sub/two-leel-sub/");  mat.find();  mat.groupCount();  mat.groupCount();  mat.groupCount();  mat.group(1);}  }
class C{  public FastBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  public static byte[] toByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(Math.max(32,in.available()));  copy(in,out);  return out.toByteArray();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(80);  int modifier=getModifiers();  if (modifier != 0) {    final int MASK=~(Modifier.BRIDGE | Modifier.VARARGS);    sb.append(Modifier.toString(modifier & MASK)).append(' ');  }  appendArrayType(sb,getReturnType());  sb.append(' ');  sb.append(getDeclaringClass().getName()).append('.').append(getName());  sb.append('(');  appendArrayType(sb,getParameterTypes());  sb.append(')');  Class[] exn=getExceptionTypes();  if (exn.length > 0) {    sb.append(" throws ");    appendSimpleType(sb,exn);  }  return sb.toString();}  }
class C{  public Set<Resource> onClass(){  Set<Resource> targets=new HashSet<>();  for (  OwlClass c : qcClasses) {    targets.add(c.getURI());  }  return targets;}  }
class C{  @Override public void notifyDownloadSpeed(long id,long bytesPerSecond){  notificationDisplayer.notifyDownloadSpeed(id,bytesPerSecond);}  }
class C{  public void initializeContacts(final EvolutionState state){  peers=((EvolutionAgent)state).getPeerAddresses();  return;}  }
class C{  public void destroyRegion(String regName){  DiskRegionView drv=getDiskInitFile().getDiskRegionByName(regName);  if (drv == null) {    drv=getDiskInitFile().getDiskRegionByPrName(regName);    PRPersistentConfig prConfig=getDiskInitFile().getPersistentPR(regName);    if (drv == null && prConfig == null) {      throw new IllegalArgumentException("The disk store does not contain a region named: " + regName);    } else {      getDiskInitFile().destroyPRRegion(regName);    }  } else {    getDiskInitFile().endDestroyRegion(drv);  }}  }
class C{  static String sanitizeFileName(String name){  StringBuffer buffer=new StringBuffer(name.length());  for (int i=0; i < name.length(); i++) {    int codePoint=name.codePointAt(i);    char character=name.charAt(i);    if (Character.isLetterOrDigit(character) || codePoint > 127 || isSpecialFat32(character)) {      buffer.appendCodePoint(codePoint);    } else {      buffer.append("_");    }  }  String result=buffer.toString();  return result.replaceAll("_+","_");}  }
class C{  private void createChildren(){  add(new CTaggedGraphNodesContainerNode(getGraph(),m_model,m_tag));  for (  final ITreeNode<CTag> child : m_tag.getChildren()) {    add(new CTagTreeNode(m_parent,getGraph(),m_tagManager,m_model,child));  }}  }
class C{  public static Set<String> flattenPaths(Object value){  Set<String> paths=new HashSet<>();  if (value == null) {    return paths;  } else   if (Draft3SchemaHelper.isFileFromValue(value)) {    paths.add(getPath(value));    List<Map<String,Object>> secondaryFiles=getSecondaryFiles(value);    if (secondaryFiles != null) {      paths.addAll(flattenPaths(secondaryFiles));    }    return paths;  } else   if (value instanceof List<?>) {    for (    Object subvalue : ((List<?>)value)) {      paths.addAll(flattenPaths(subvalue));    }    return paths;  } else   if (value instanceof Map<?,?>) {    for (    Object subvalue : ((Map<?,?>)value).values()) {      paths.addAll(flattenPaths(subvalue));    }  }  return paths;}  }
class C{  public SharedObjectMessage(IEventListener source,String name,int version,boolean persistent){  super(Type.SHARED_OBJECT,source);  this.name=name;  this.version=version;  this.persistent=persistent;}  }
class C{  public void scrollLinesToVisible(int startLine,int endLine,Collection<Integer> otherLines){  int startY, endY;  try {    startY=lineToY(startLine);  } catch (  BadLocationException ble) {    if (MainFrame.GUI2_DEBUG) {      ble.printStackTrace();    }    return;  }  try {    endY=lineToY(endLine);  } catch (  BadLocationException ble) {    endY=startY;  }  int max=parentHeight() - 0;  if (endY - startY > max) {    endY=startY + max;  } else   if (otherLines != null && otherLines.size() > 0) {    int origin=startY + endY / 2;    PriorityQueue<Integer> pq=new PriorityQueue<Integer>(otherLines.size(),new DistanceComparator(origin));    for (    int line : otherLines) {      int otherY;      try {        otherY=lineToY(line);      } catch (      BadLocationException ble) {        continue;      }      pq.add(otherY);    }    while (!pq.isEmpty()) {      int y=pq.remove();      int lo=Math.min(startY,y);      int hi=Math.max(endY,y);      if (hi - lo > max) {        break;      } else {        startY=lo;        endY=hi;      }    }  }  if (endY - startY > max) {    endY=startY + max;  }  scrollYToVisibleImpl((startY + endY) / 2,max / 2);}  }
class C{  public void tag(int tagType,boolean longTag2,byte[] contents) throws IOException {  boolean longTag=longTag2;  int length=(contents != null) ? contents.length : 0;  longTag=(length > 62) || longTag;  int hdr=(tagType << 6) + (longTag ? 0x3f : length);  out.writeUI16(hdr);  if (longTag) {    out.writeUI32(length);  }  if (contents != null) {    out.write(contents);  }  if (tagType == SWFConstants.TAG_SHOWFRAME) {    frameCount++;  }  if (tagType == SWFConstants.TAG_END) {    finish();  }}  }
class C{  public static Date parseDate(String dateString) throws ParseException {  return getSimplDateFormat(DF_LONG).parse(dateString);}  }
class C{  static int eType(int[] elemInfo,int tripletIndex){  if (((tripletIndex * 3) + 1) >= elemInfo.length) {    return -1;  }  return elemInfo[(tripletIndex * 3) + 1];}  }
class C{  public void testNotNeg(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  int aSign=-1;  byte rBytes[]={0,-128,56,100,-2,-76,89,45,91,3,-15,35,26,-118};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  void seek(int position) throws IOException {  mDexFile.seek(position);}  }
class C{  public void appendData(float[] newData){  int nDataPoints=newData.length;  if (nDataPoints > this.valueHistory.length) {    throw new IllegalArgumentException("More data than series to put them in");  }  int s;  for (s=0; s < nDataPoints; s++) {    if (this.valueHistory[s] == null) {      this.valueHistory[s]=new ValueSequence(this.historyCount);    }    this.valueHistory[s].enterData(this.newestAt,newData[s]);  }  fireSeriesChanged();}  }
class C{  public static final double[] labelCardinalities(ArrayList<int[]> Y){  int L=((int[])Y.get(0)).length;  double lc[]=new double[L];  int[] count=new int[L];  for (  int y[] : Y) {    for (int j=0; j < L; j++) {      if (lc[j] <= 0) {        lc[j]+=y[j];        count[j]++;      }    }  }  for (int j=0; j < L; j++) {    lc[j]/=count[j];  }  return lc;}  }
class C{  private static byte[] writeInt(int value) throws IOException {  byte[] b=new byte[4];  b[0]=(byte)(value & 0x000000FF);  b[1]=(byte)((value & 0x0000FF00) >> 8);  b[2]=(byte)((value & 0x00FF0000) >> 16);  b[3]=(byte)((value & 0xFF000000) >> 24);  return b;}  }
class C{  @Override public void trim(MemoryTrimType trimType){  if (!mSemaphore.tryAcquire()) {    return;  }  try {    mByteArraySoftRef.clear();  }  finally {    mSemaphore.release();  }}  }
class C{  public InvalidNodeEndpointException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public VetoableChangeSupport(Object sourceBean){  if (sourceBean == null) {    throw new NullPointerException();  }  source=sourceBean;}  }
class C{  public void onLibraryVersionQueryResponse(OneSheeldDevice device,int libraryVersion){}  }
class C{  protected boolean isText(Element elem){  return (elem.getName() == AbstractDocument.ContentElementName);}  }
class C{  public static void fill(ArrayList<Integer> list){  Scanner input=new Scanner(System.in);  for (int i=0; i < 5; i++) {    list.add(input.nextInt());  }}  }
class C{  public Matrix3f transpose(){  return transpose(this);}  }
class C{  public static MatchQueryBuilder matchQuery(String name,Object text){  return new MatchQueryBuilder(name,text).type(MatchQueryBuilder.Type.BOOLEAN);}  }
class C{  public static void runAssociator(Associator associator,String[] options){  try {    System.out.println(AssociatorEvaluation.evaluate(associator,options));  } catch (  Exception e) {    if ((e.getMessage() != null) && (e.getMessage().indexOf("General options") == -1))     e.printStackTrace(); else     System.err.println(e.getMessage());  }}  }
class C{  @Override public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {synchronized (_bb) {    _bb.add(buf,offset,length);  }  _node.lastModified=CurrentTime.currentTime();}  }
class C{  public void startLifeCycle(){  if (view != null) {    view.setSplashScreenLoadingCompletion(0.0);  }  initAllExtension(5.0);  initModelAllExtension(model,0.0);  initXMLAllExtension(model.getSession(),model.getOptionsParam(),0.0);  initViewAllExtension(view,10.0);  hookAllExtension(75.0);  startAllExtension(10.0);}  }
class C{  public static boolean applyTo(ImageHolder imageHolder,ImageView imageView,String tag){  if (imageHolder != null && imageView != null) {    return imageHolder.applyTo(imageView,tag);  }  return false;}  }
class C{  public void close(){  this.isClosed=true;  try {    for (    ElectionContext context : electionContexts.values()) {      try {        context.close();      } catch (      Exception e) {        log.error("Error closing overseer",e);      }    }  }  finally {    try {      try {        overseer.close();      } catch (      Exception e) {        log.error("Error closing overseer",e);      }    }  finally {      try {        try {          zkStateReader.close();        } catch (        Exception e) {          log.error("Error closing zkStateReader",e);        }      }  finally {        try {          zkClient.close();        } catch (        Exception e) {          log.error("Error closing zkClient",e);        }      }    }  }}  }
class C{  public CursorBuilder restoreSavepoint(Cursor.Savepoint savepoint){  _savepoint=savepoint;  return this;}  }
class C{  public void removeService(DeviceService service){  removeServiceWithId(service.getServiceName());}  }
class C{  public void removeConnectionCallback(OneSheeldConnectionCallback connectionCallback){  if (connectionCallback != null && connectionCallbacks.contains(connectionCallback))   connectionCallbacks.remove(connectionCallback);}  }
class C{  public void delNodeValue(int nTargetNode,String sValue) throws Exception {  if (m_bNeedsUndoAction) {    addUndoAction(new DelValueAction(nTargetNode,sValue));  }  Attribute att=m_Instances.attribute(nTargetNode);  int nCardinality=att.numValues();  ArrayList<String> values=new ArrayList<String>(nCardinality);  int nValue=-1;  for (int iValue=0; iValue < nCardinality; iValue++) {    if (att.value(iValue).equals(sValue)) {      nValue=iValue;    } else {      values.add(att.value(iValue));    }  }  if (nValue < 0) {    throw new Exception("Node " + nTargetNode + " does not have value ("+ sValue+ ")");  }  replaceAtt(nTargetNode,att.name(),values);  Estimator[] distributions=m_Distributions[nTargetNode];  int nCard=values.size();  for (int iParent=0; iParent < distributions.length; iParent++) {    DiscreteEstimatorBayes distribution=new DiscreteEstimatorBayes(nCard,0);    double sum=0;    for (int iValue=0; iValue < nCard; iValue++) {      sum+=distributions[iParent].getProbability(iValue);    }    if (sum > 0) {      for (int iValue=0; iValue < nCard; iValue++) {        distribution.addValue(iValue,distributions[iParent].getProbability(iValue) / sum);      }    } else {      for (int iValue=0; iValue < nCard; iValue++) {        distribution.addValue(iValue,1.0 / nCard);      }    }    distributions[iParent]=distribution;  }  for (int iNode=0; iNode < getNrOfNodes(); iNode++) {    if (m_ParentSets[iNode].contains(nTargetNode)) {      ParentSet parentSet=m_ParentSets[iNode];      distributions=m_Distributions[iNode];      Estimator[] newDistributions=new Estimator[distributions.length * nCard / (nCard + 1)];      int iCurrentDist=0;      int nParents=parentSet.getNrOfParents();      int[] values2=new int[nParents];      int nParentCard=parentSet.getFreshCardinalityOfParents(m_Instances) * (nCard + 1) / nCard;      int iTargetNode=0;      while (parentSet.getParent(iTargetNode) != nTargetNode) {        iTargetNode++;      }      int[] nCards=new int[nParents];      for (int iParent=0; iParent < nParents; iParent++) {        nCards[iParent]=getCardinality(parentSet.getParent(iParent));      }      nCards[iTargetNode]++;      for (int iPos=0; iPos < nParentCard; iPos++) {        if (values2[iTargetNode] != nValue) {          newDistributions[iCurrentDist++]=distributions[iPos];        }        int i=0;        values2[i]++;        while (i < nParents && values2[i] == nCards[i]) {          values2[i]=0;          i++;          if (i < nParents) {            values2[i]++;          }        }      }      m_Distributions[iNode]=newDistributions;    }  }  if (getEvidence(nTargetNode) > nValue) {    setEvidence(nTargetNode,getEvidence(nTargetNode) - 1);  }}  }
class C{  protected void restartServers(List<CloudJettyRunner> servers) throws Exception {  for (  CloudJettyRunner server : servers) {    this.restartServer(server);  }}  }
class C{  public void write(DataOutput dos) throws IOException {  int length=(points.length / 2) * 2;  dos.writeInt(length);  for (int i=0; i < length; i++) {    dos.writeFloat(points[i]);  }}  }
class C{  public VPlexClusterInfo findClusterInfo(String clusterName){  VPlexClusterInfo vplexclusterInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    if (clusterInfo.getName().equals(clusterName)) {      vplexclusterInfo=clusterInfo;      break;    }  }  return vplexclusterInfo;}  }
class C{  public static TProtocolFactory guessProtocolFactory(byte[] data,TProtocolFactory fallback){  if ('{' == data[0] && '}' == data[data.length - 1]) {    return new TJSONProtocol.Factory();  }  if (data[data.length - 1] != 0) {    return new TBinaryProtocol.Factory();  }  if (data[0] > 0x10) {    return new TCompactProtocol.Factory();  }  if (data.length > 1 && 0 == data[1]) {    return new TBinaryProtocol.Factory();  }  if (data.length > 1 && (data[1] & 0x80) != 0) {    return new TCompactProtocol.Factory();  }  return fallback;}  }
class C{  public boolean delete(String name){  String lcName=name.toLowerCase();  if (this.nameValueMap.containsKey(lcName)) {    this.nameValueMap.remove(lcName);    return true;  } else {    return false;  }}  }
class C{  public static AsyncResult forMessage(Message m){  AsyncResult ret;  ret=new AsyncResult(m.obj,null,null);  m.obj=ret;  return ret;}  }
class C{  public void update(Map<String,Object> eventMap){  @SuppressWarnings("unchecked") Map<String,Object> body=eventMap;  Long timestamp=(Long)eventMap.get(SPQR_EVENT_TIMESTAMP_FIELD);  if (body != null) {    try {      byte[] messageBody=mapper.writeValueAsBytes(body);      if (messageBody != null && messageBody.length > 0) {        result=new StreamingDataMessage[]{new StreamingDataMessage(messageBody,(timestamp != null ? timestamp.longValue() : System.currentTimeMillis()))};        this.waitStrategy.release();      }    } catch (    IOException e) {      logger.error("Failed to parse ESPER result to JSON representation. Error: " + e.getMessage(),e);    }  }}  }
class C{  public SAXException(Exception e){  super();  this.exception=e;}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  if (!(params instanceof ParametersWithIV)) {    throw new IllegalArgumentException("Grain-128 Init parameters must include an IV");  }  ParametersWithIV ivParams=(ParametersWithIV)params;  byte[] iv=ivParams.getIV();  if (iv == null || iv.length != 12) {    throw new IllegalArgumentException("Grain-128  requires exactly 12 bytes of IV");  }  if (!(ivParams.getParameters() instanceof KeyParameter)) {    throw new IllegalArgumentException("Grain-128 Init parameters must include a key");  }  KeyParameter key=(KeyParameter)ivParams.getParameters();  workingIV=new byte[key.getKey().length];  workingKey=new byte[key.getKey().length];  lfsr=new int[STATE_SIZE];  nfsr=new int[STATE_SIZE];  out=new byte[4];  System.arraycopy(iv,0,workingIV,0,iv.length);  System.arraycopy(key.getKey(),0,workingKey,0,key.getKey().length);  reset();}  }
class C{  public FittingFunction(SemIm sem){  this.sem=sem;  this.freeParameters=sem.getFreeParameters();}  }
class C{  public static void warning(String message){  warnings++;  err(NL + "Warning : " + message);}  }
class C{  @Override public void updateNClob(String columnLabel,NClob x) throws SQLException {  throw unsupported("NClob");}  }
class C{  private void resizePanels(){}  }
class C{  public static Long valueOf(String string) throws NumberFormatException {  return valueOf(parseLong(string));}  }
class C{  public boolean omitStart(){  return oStart;}  }
class C{  @ReactMethod public void open(@Nullable final ReadableMap options,Promise promise){  Activity activity=getCurrentActivity();  if (activity == null) {    promise.reject(ERROR_NO_ACTIVITY,"Tried to open a DatePicker dialog while not attached to an Activity");    return;  }  if (activity instanceof android.support.v4.app.FragmentActivity) {    android.support.v4.app.FragmentManager fragmentManager=((android.support.v4.app.FragmentActivity)activity).getSupportFragmentManager();    android.support.v4.app.DialogFragment oldFragment=(android.support.v4.app.DialogFragment)fragmentManager.findFragmentByTag(FRAGMENT_TAG);    if (oldFragment != null) {      oldFragment.dismiss();    }    SupportDatePickerDialogFragment fragment=new SupportDatePickerDialogFragment();    if (options != null) {      final Bundle args=createFragmentArguments(options);      fragment.setArguments(args);    }    final DatePickerDialogListener listener=new DatePickerDialogListener(promise);    fragment.setOnDismissListener(listener);    fragment.setOnDateSetListener(listener);    fragment.show(fragmentManager,FRAGMENT_TAG);  } else {    FragmentManager fragmentManager=activity.getFragmentManager();    DialogFragment oldFragment=(DialogFragment)fragmentManager.findFragmentByTag(FRAGMENT_TAG);    if (oldFragment != null) {      oldFragment.dismiss();    }    DatePickerDialogFragment fragment=new DatePickerDialogFragment();    if (options != null) {      final Bundle args=createFragmentArguments(options);      fragment.setArguments(args);    }    final DatePickerDialogListener listener=new DatePickerDialogListener(promise);    fragment.setOnDismissListener(listener);    fragment.setOnDateSetListener(listener);    fragment.show(fragmentManager,FRAGMENT_TAG);  }}  }
class C{  public OpenDefaultAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("OpenDefaultAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.SHIFT_MASK));  putValue(LONG_DESCRIPTION,res.getString("OpenDefaultAction.statusbar"));  putValue(NAME,res.getString("OpenDefaultAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("OpenDefaultAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("OpenDefaultAction.image")))));}  }
class C{  public void addRtpStreamListener(RtpStreamListener rtpStreamListener){  this.rtpStreamListener=rtpStreamListener;}  }
class C{  public Observable<RxCameraData> successiveDataRequest(){  return new SuccessiveDataRequest(rxCamera).get();}  }
class C{  void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed,UriPermissionOwner owner){  if (needed != null) {    for (int i=0; i < needed.size(); i++) {      grantUriPermissionUncheckedLocked(needed.targetUid,needed.targetPkg,needed.get(i),needed.flags,owner);    }  }}  }
class C{  public static ArrayList<String> toArraylistString(ArrayList<String[]> liste){  ArrayList<String> listeString=new ArrayList<String>();  StringBuilder temp=new StringBuilder();  for (int i=0; i < liste.size(); i++) {    for (int j=0; j < liste.get(i).length; j++) {      temp.append(liste.get(i)[j]);    }    listeString.add(temp.toString());  }  return listeString;}  }
class C{  private CassandraKeyValueServiceConfigManager(Supplier<CassandraKeyValueServiceConfig> configSupplier,@Nullable ScheduledExecutorService refreshExecutor,long initDelay,long refreshInterval){  this.configSupplier=configSupplier;  this.refreshExecutor=refreshExecutor;  this.config=configSupplier.get();  this.initDelay=initDelay;  this.refreshInterval=refreshInterval;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public IPreparedTupleQuery prepareTupleQuery(final String query) throws Exception {  return prepareTupleQuery(query,UUID.randomUUID());}  }
class C{  void unloadModule(org.jboss.modules.Module module){  dependencies.remove(module.getIdentifier());  unloadModuleLocal(module);}  }
class C{  public Builder withText(CharSequence text){  this.text=text;  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  JFileChooser fileChooser=jmri.jmrit.XmlFile.userFileChooser(Bundle.getMessage("PromptXmlFileTypes"),"xml");  fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);  fileChooser.setCurrentDirectory(new File(VSDecoderPane.getDefaultVSDecoderFolder()));  java.io.File file=StoreXmlConfigAction.getFileName(fileChooser);  if (file == null) {    return;  }  saveVSDecoderProfile(file);}  }
class C{  public View iterateOverItems(ItemOperator op){  for (int k=0; k < getChildCount(); k++) {    CellLayout page=getPageAt(k);    for (int j=0; j < page.getCountY(); j++) {      for (int i=0; i < page.getCountX(); i++) {        View v=page.getChildAt(i,j);        if ((v != null) && op.evaluate((ItemInfo)v.getTag(),v,this)) {          return v;        }      }    }  }  return null;}  }
class C{  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {  ConfirmationCallback confirmation=null;  for (int i=0; i < callbacks.length; i++) {    if (callbacks[i] instanceof TextOutputCallback) {      TextOutputCallback tc=(TextOutputCallback)callbacks[i];      String text;switch (tc.getMessageType()) {case TextOutputCallback.INFORMATION:        text="";      break;case TextOutputCallback.WARNING:    text="Warning: ";  break;case TextOutputCallback.ERROR:text="Error: ";break;default :throw new UnsupportedCallbackException(callbacks[i],"Unrecognized message type");}String message=tc.getMessage();if (message != null) {text+=message;}if (text != null) {System.err.println(text);}} else if (callbacks[i] instanceof NameCallback) {NameCallback nc=(NameCallback)callbacks[i];if (nc.getDefaultName() == null) {System.err.print(nc.getPrompt());} else {System.err.print(nc.getPrompt() + " [" + nc.getDefaultName()+ "] ");}System.err.flush();String result=readLine();if (result.equals("")) {result=nc.getDefaultName();}nc.setName(result);} else if (callbacks[i] instanceof PasswordCallback) {PasswordCallback pc=(PasswordCallback)callbacks[i];System.err.print(pc.getPrompt());System.err.flush();pc.setPassword(Password.readPassword(System.in,pc.isEchoOn()));} else if (callbacks[i] instanceof ConfirmationCallback) {confirmation=(ConfirmationCallback)callbacks[i];} else {throw new UnsupportedCallbackException(callbacks[i],"Unrecognized Callback");}}if (confirmation != null) {doConfirmation(confirmation);}}  }
class C{  public Element store(Object o){  LocoIcon p=(LocoIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("locoicon");  storeCommonAttributes(p,element);  if (p.getUnRotatedText() != null) {    element.setAttribute("text",p.getUnRotatedText());  }  storeTextInfo(p,element);  element.setAttribute("icon","yes");  element.setAttribute("dockX","" + p.getDockX());  element.setAttribute("dockY","" + p.getDockY());  element.addContent(storeIcon("icon",(NamedIcon)p.getIcon()));  RosterEntry entry=p.getRosterEntry();  if (entry != null) {    element.setAttribute("rosterentry",entry.getId());  }  element.setAttribute("class","jmri.jmrit.display.configurexml.LocoIconXml");  return element;}  }
class C{  @Override public void registerByteSizeObserver(KV<K,V> kv,ElementByteSizeObserver observer,Context context) throws Exception {  if (kv == null) {    throw new CoderException("cannot encode a null KV");  }  keyCoder.registerByteSizeObserver(kv.getKey(),observer,context.nested());  valueCoder.registerByteSizeObserver(kv.getValue(),observer,context.nested());}  }
class C{  RPEntity(){  textIndicators=new LinkedList<TextIndicator>();  attackTarget=null;}  }
class C{  public static int size(JMenu self){  return self.getMenuComponentCount();}  }
class C{  @Override public String containedTypeName(int index){  if (index == 0)   return "K";  if (index == 1)   return "V";  return null;}  }
class C{  @Override public Object valueForSearch(Object value){  return value(value);}  }
class C{  public boolean isSuspendedRelocateSupported(){  return suspendedRelocateSupported;}  }
class C{  public NotifyPlayerAboutHallOfFamePoints(SpeakerNPC npc,String playerName,String fametype,String questSlot){  this.npc=npc;  this.playerName=playerName;  this.handle=new ResultHandle();  this.questSlot=questSlot;  DBCommand command=new ReadHallOfFamePointsCommand(playerName,fametype);  DBCommandQueue.get().enqueueAndAwaitResult(command,handle);}  }
class C{  public T caseExecutionChoice(ExecutionChoice object){  return null;}  }
class C{  public iOSActionBarWorker(ABv7 actionb,ActionBarActionListener ls){  super(actionb);  listener=ls;}  }
class C{  public CompositeTitle(){  this(new BlockContainer(new BorderArrangement()));}  }
class C{  public void updateCloudletFinishedSoFar(long miLength){  cloudletFinishedSoFar+=miLength;}  }
class C{  public int model(){  return theType.model();}  }
class C{  private void waitUntilReadable() throws IOException {  readTimeout.enter();  try {    while (readBuffer.size() == 0 && !finished && !closed && errorCode == null) {      waitForIo();    }  }  finally {    readTimeout.exitAndThrowIfTimedOut();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:02.835 -0400",hash_original_method="CE7037EC5C32EFF20AA636D36C55F6B2",hash_generated_method="4A0FBB80B109B632ACDCF50033F2E742") public X509CRLEntryImpl(TBSCertList.RevokedCertificate rcert,X500Principal issuer){  this.rcert=rcert;  this.extensions=rcert.getCrlEntryExtensions();  this.issuer=issuer;}  }
class C{  public PLTokenData(PLTokenType typeValue,Pattern regexValue){  super();  type=typeValue;  regex=regexValue;}  }
class C{  public void filter(int kind,float param){  g.filter(kind,param);}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {  m_inDTD=false;}  }
class C{  public void addMessage(ChatMessage chatMsg){  this.values.add(chatMsg);  notifyDataSetChanged();}  }
class C{  public Millisecond(int millisecond,Second second){  this.millisecond=millisecond;  this.second=(byte)second.getSecond();  this.minute=(byte)second.getMinute().getMinute();  this.hour=(byte)second.getMinute().getHourValue();  this.day=second.getMinute().getDay();  peg(Calendar.getInstance());}  }
class C{  public void applyTemplates(Node node,String mode) throws Exception {  if (node instanceof Element) {    applyTemplates((Element)node,mode);  } else   if (node instanceof Document) {    applyTemplates((Document)node,mode);  }}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,boolean useSystemDefault){  addEmojis(context,text,emojiSize,0,-1,useSystemDefault);}  }
class C{  private static void dateRangeQuery(CalendarService service,DateTime startTime,DateTime endTime) throws ServiceException, IOException {  CalendarQuery myQuery=new CalendarQuery(eventFeedUrl);  myQuery.setMinimumStartTime(startTime);  myQuery.setMaximumStartTime(endTime);  CalendarEventFeed resultFeed=service.query(myQuery,CalendarEventFeed.class);  System.out.println("Events from " + startTime.toString() + " to "+ endTime.toString()+ ":");  System.out.println();  for (int i=0; i < resultFeed.getEntries().size(); i++) {    CalendarEventEntry entry=resultFeed.getEntries().get(i);    System.out.println("\t" + entry.getTitle().getPlainText());  }  System.out.println();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized UDAudio stopAndReset(){  return stop().reset();}  }
class C{  public BuildImageParams withRemoveIntermediateContainers(boolean removeIntermediateContainer){  this.removeIntermediateContainer=removeIntermediateContainer;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrinsertdataoffsetnegative.class,args);}  }
class C{  protected void writeDistribution(Parameter parameter,boolean isRef,XMLWriter writer){switch (parameter.priorType) {case UNIFORM_PRIOR:    String id=parameter.taxaId + "-uniformDist";  if (isRef) {    writer.writeIDref(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL,id);  } else {    writer.writeOpenTag(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,id)});    writer.writeOpenTag(UniformDistributionModelParser.LOWER);    writer.writeText(Double.toString(parameter.uniformLower));    writer.writeCloseTag(UniformDistributionModelParser.LOWER);    writer.writeOpenTag(UniformDistributionModelParser.UPPER);    writer.writeText(Double.toString(parameter.uniformUpper));    writer.writeCloseTag(UniformDistributionModelParser.UPPER);    writer.writeCloseTag(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL);  }break;case EXPONENTIAL_PRIOR:writer.writeOpenTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL);writer.writeOpenTag(DistributionModelParser.MEAN);writer.writeText(Double.toString(parameter.mean));writer.writeCloseTag(DistributionModelParser.MEAN);writer.writeOpenTag(DistributionModelParser.OFFSET);writer.writeText(Double.toString(parameter.offset));writer.writeCloseTag(DistributionModelParser.OFFSET);writer.writeCloseTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL);break;case NORMAL_PRIOR:writer.writeOpenTag(NormalDistributionModelParser.NORMAL_DISTRIBUTION_MODEL);writer.writeOpenTag(NormalDistributionModelParser.MEAN);writer.writeText(Double.toString(parameter.mean));writer.writeCloseTag(NormalDistributionModelParser.MEAN);writer.writeOpenTag(NormalDistributionModelParser.STDEV);writer.writeText(Double.toString(parameter.stdev));writer.writeCloseTag(NormalDistributionModelParser.STDEV);writer.writeCloseTag(NormalDistributionModelParser.NORMAL_DISTRIBUTION_MODEL);break;case LOGNORMAL_PRIOR:writer.writeOpenTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL,new Attribute[]{new Attribute.Default<Boolean>(LogNormalDistributionModelParser.MEAN_IN_REAL_SPACE,parameter.isMeanInRealSpace()),new Attribute.Default<Boolean>(LogNormalDistributionModelParser.STDEV_IN_REAL_SPACE,parameter.isMeanInRealSpace())});writer.writeOpenTag(LogNormalDistributionModelParser.MEAN);writer.writeText(Double.toString(parameter.mean));writer.writeCloseTag(LogNormalDistributionModelParser.MEAN);writer.writeOpenTag(LogNormalDistributionModelParser.STDEV);writer.writeText(Double.toString(parameter.stdev));writer.writeCloseTag(LogNormalDistributionModelParser.STDEV);writer.writeOpenTag(LogNormalDistributionModelParser.OFFSET);writer.writeText(Double.toString(parameter.offset));writer.writeCloseTag(LogNormalDistributionModelParser.OFFSET);writer.writeCloseTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL);break;case GAMMA_PRIOR:writer.writeOpenTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL);writer.writeOpenTag(DistributionModelParser.SHAPE);writer.writeText(Double.toString(parameter.shape));writer.writeCloseTag(DistributionModelParser.SHAPE);writer.writeOpenTag(DistributionModelParser.SCALE);writer.writeText(Double.toString(parameter.scale));writer.writeCloseTag(DistributionModelParser.SCALE);writer.writeOpenTag(DistributionModelParser.OFFSET);writer.writeText(Double.toString(parameter.offset));writer.writeCloseTag(DistributionModelParser.OFFSET);writer.writeCloseTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL);break;default :throw new IllegalArgumentException("Unknown Distribution Model for " + parameter.getName());}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.TAG_TITLE__TAG:    if (resolve)     return getTag();  return basicGetTag();case DomPackage.TAG_TITLE__TITLE:return getTitle();case DomPackage.TAG_TITLE__ACTUAL_TITLE:return getActualTitle();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public List<Axis> A(){  ArrayList<Axis> axes=new ArrayList<Axis>();  try {    for (    DimensionIndex index : universe.getDomainHierarchy(domain,true).getDimensionIndexes()) {      axes.add(index.getAxis());    }  } catch (  ComputingException|InterruptedException e) {  }  return axes;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (XString)getArg0AsString(xctxt);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.225 -0400",hash_original_method="1DD02F40CB7ADA84392EE8D645EFC005",hash_generated_method="0FD44489DB9880A52C6AC4F3545F2D1E") public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return decode((byte[])pObject);  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be quoted-printable decoded");  }}  }
class C{  @Override public MemChunkHolder<VolatileMemAllocator> createChunk(long size,boolean autoreclaim){  MemChunkHolder<VolatileMemAllocator> ret=null;  Long addr=m_vmasvc.allocate(m_nid,size,true);  if (0 == addr && m_activegc) {    m_chunkcollector.waitReclaimCoolDown(m_gctimeout);    addr=m_vmasvc.allocate(m_nid,size,true);  }  if (0 != addr) {    ret=new MemChunkHolder<VolatileMemAllocator>(this,addr,size);    ret.setCollector(m_chunkcollector);    if (autoreclaim) {      m_chunkcollector.register(ret);    }  }  return ret;}  }
class C{  public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {  return compareResults(controlClient,cloudClient,null,null);}  }
class C{  public void editingStopped(ChangeEvent e){  getHandler().editingStopped(e);}  }
class C{  public static void staticAssert(boolean condition,String message){  if (REPLACEMENTS_ASSERTIONS_ENABLED) {    AssertionNode.assertion(true,condition,message);  }}  }
class C{  @Transactional public static Comment saveComment(IMAPMessage message,Resource target) throws MessagingException, MailHandlerException, IOException, NoSuchAlgorithmException {  User author=IMAPMessageUtil.extractSender(message);  if (!AccessControl.isProjectResourceCreatable(author,target.getProject(),target.getType())) {    throw new PermissionDenied(cannotCreateMessage(author,target.getProject(),target.getType()));  }  Content parsedMessage=extractContent(message);  Comment comment=makeNewComment(target,author,parsedMessage.body);  comment.save();  Map<String,Attachment> relatedAttachments=saveAttachments(parsedMessage.attachments,comment.asResource());  if (new ContentType(parsedMessage.type).match(MimeType.HTML)) {    comment.contents=postprocessForHTML(comment.contents,relatedAttachments);    comment.update();  }  new OriginalEmail(message.getMessageID(),comment.asResource()).save();  addEvent(NotificationEvent.forNewComment(comment,author),message.getAllRecipients(),author);  return comment;}  }
class C{  static public void main(final String[] args){  if (args.length != 2) {    usage();  }  final File inFile=new File(args[0]);  final File outFile=new File(args[1]);  if (!inFile.exists()) {    System.err.println("Source file does not exist: " + inFile);    System.exit(1);  }  if (outFile.exists() && outFile.length() > 0L) {    System.err.println("Output file exists and is not empty: " + outFile);    System.exit(1);  }  System.out.println("inFile=" + inFile + ", outFile="+ outFile);  final Journal sourceJournal;{    Properties p=new Properties();    p.setProperty(Options.FILE,inFile.getAbsolutePath());    sourceJournal=new Journal(p);    System.out.println("source: nbytes=" + sourceJournal.size() + ", nindices="+ sourceJournal.getName2Addr(sourceJournal.getLastCommitTime()).rangeCount());  }  try {    final Future<Journal> f=sourceJournal.compact(outFile);    System.out.println("Running: " + new Date());    final Journal newJournal=f.get();    System.out.println("Success: " + new Date());    final long bytesBefore=sourceJournal.size();    final long bytesAfter=newJournal.size();    final int percentChange=100 - (int)(bytesAfter * 100d / bytesBefore);    System.out.println("bytes used: before=" + bytesBefore + ", after="+ bytesAfter+ ", reducedBy="+ percentChange+ "%");    newJournal.shutdownNow();    System.exit(0);  } catch (  Throwable t) {    t.printStackTrace(System.err);    sourceJournal.shutdownNow();  }  sourceJournal.shutdown();  System.exit(0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.337 -0400",hash_original_method="40FE3D25511A62018FC369BF8427CEB7",hash_generated_method="E555F44876A2103FC7372A2E8BF3597A") @Override public void close(){  idx=0;  mark=0;}  }
class C{  public boolean isFullRank(){  return getRank() == sLength();}  }
class C{  public static <T>void fill(List<? super T> list,T object){  ListIterator<? super T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(object);  }}  }
class C{  public void addAll(T... items){  ArrayList<T> values=this.mObjects;  for (  T item : items) {    values.add(item);  }  this.mObjects=values;}  }
class C{  public UserInputInlineMenuButtonBuilder<T> textCallback(BiConsumer<InlineMenuButton,String> textCallback){  this.textCallback=textCallback;  return this;}  }
class C{  public final void removeColumn(Node variable){  int index=variables.indexOf(variable);  if (index != -1) {    removeColumn(index);  }}  }
class C{  public static String classString(int flags){  return humanHelper(flags,CLASS_FLAGS,CONV_CLASS);}  }
class C{  public static boolean scheduleReminder(Reminder reminder){  if ((System.currentTimeMillis() - reminder.date.getMillis()) > 0)   return false;  Intent intent=new Intent(reminder.uuid);  intent.setClass(GlobalApplication.getAppContext(),AlarmReceiver.class);  intent.putExtra("description",reminder.description);  PendingIntent pendingIntent=PendingIntent.getBroadcast(GlobalApplication.getAppContext(),0,intent,PendingIntent.FLAG_UPDATE_CURRENT);  AlarmManager am=(AlarmManager)GlobalApplication.getAppContext().getSystemService(GlobalApplication.getAppContext().ALARM_SERVICE);  if (reminder.recurring) {    long interval=0;switch (reminder.recurrence) {case Daily:      interval=DateUtil.DAY_IN_MILLISECONDS;    am.setRepeating(AlarmManager.RTC_WAKEUP,reminder.date.getMillis(),interval,pendingIntent);  break;case Weekly:interval=DateUtil.WEEK_IN_MILLISECONDS;am.setRepeating(AlarmManager.RTC_WAKEUP,reminder.date.getMillis(),interval,pendingIntent);break;case Monthly:am.set(AlarmManager.RTC_WAKEUP,reminder.date.plusMonths(1).getMillis(),pendingIntent);break;case Yearly:am.set(AlarmManager.RTC_WAKEUP,reminder.date.plusYears(1).getMillis(),pendingIntent);break;}} else {am.set(AlarmManager.RTC_WAKEUP,reminder.date.getMillis(),pendingIntent);}return true;}  }
class C{  @Override public void migrateBuckets(Range<Integer> splitRange,String fromShardId,String toShardId,long timeoutMs) throws ShardManagerException {  if (!filter.isLeaderInShard(fromShardId)) {    return;  } else {    assignBucketOnLeader(splitRange,fromShardId,toShardId,timeoutMs);  }}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  public SequenceTypeTuple buildSequenceTypeTuple(UUID id,UUID trackId,org.smpte_ra.schemas.st2067_2_2013.SequenceType.ResourceList resourceList,Composition.SequenceTypeEnum sequenceType){  org.smpte_ra.schemas.st2067_2_2013.SequenceType sequence=new org.smpte_ra.schemas.st2067_2_2013.SequenceType();  sequence.setId(UUIDHelper.fromUUID(id));  sequence.setTrackId(UUIDHelper.fromUUID(trackId));  sequence.setResourceList(resourceList);  return new SequenceTypeTuple(sequence,sequenceType);}  }
class C{  private boolean updateHeaderTax(){  if (!getParent().isProcessed())   if (!updateOrderTax(false))   return false;  String sql="UPDATE C_Order i" + " SET TotalLines=" + "(SELECT COALESCE(SUM(LineNetAmt),0) FROM C_OrderLine il WHERE i.C_Order_ID=il.C_Order_ID) "+ "WHERE C_Order_ID="+ getC_Order_ID();  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 1)   log.warning("(1) #" + no);  if (isTaxIncluded())   sql="UPDATE C_Order i " + " SET GrandTotal=TotalLines " + "WHERE C_Order_ID="+ getC_Order_ID(); else   sql="UPDATE C_Order i " + " SET GrandTotal=TotalLines+" + "(SELECT COALESCE(SUM(TaxAmt),0) FROM C_OrderTax it WHERE i.C_Order_ID=it.C_Order_ID) "+ "WHERE C_Order_ID="+ getC_Order_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 1)   log.warning("(2) #" + no);  m_parent=null;  return no == 1;}  }
class C{  public Boolean isAutoClaimStorage(){  return autoClaimStorage;}  }
class C{  public String toString(){  if (head == null) {    return "DoubleLinkedList[0]";  }  return "DoubleLinkedList[" + size + "]: "+ head.value.toString();}  }
class C{  public int start_production(){  return 1;}  }
class C{  private static List<Node> findNaYX(Node x,Node y,Graph graph){  List<Node> naYX=new LinkedList<>(graph.getAdjacentNodes(y));  naYX.retainAll(graph.getAdjacentNodes(x));  for (int i=0; i < naYX.size(); i++) {    Node z=naYX.get(i);    Edge edge=graph.getEdge(y,z);    if (!Edges.isUndirectedEdge(edge)) {      naYX.remove(z);    }  }  return naYX;}  }
class C{  public PLSpherical2Panorama(){  super();}  }
class C{  public static double dmod_d(double lhs,double rhs){  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;}  }
class C{  public JEditTextArea(TextAreaDefaults defaults){  enableEvents(AWTEvent.KEY_EVENT_MASK);  painter=new TextAreaPainter(this,defaults);  documentHandler=new DocumentHandler();  caretEvent=new MutableCaretEvent();  lineSegment=new Segment();  bracketLine=bracketPosition=-1;  blink=true;  setLayout(new ScrollLayout());  add(CENTER,painter);  add(RIGHT,vertical=new JScrollBar(Adjustable.VERTICAL));  add(BOTTOM,horizontal=new JScrollBar(Adjustable.HORIZONTAL));  vertical.addAdjustmentListener(new AdjustHandler());  horizontal.addAdjustmentListener(new AdjustHandler());  painter.addComponentListener(new ComponentHandler());  painter.addMouseListener(new MouseHandler());  painter.addMouseMotionListener(new DragHandler());  addFocusListener(new FocusHandler());  setInputHandler(defaults.inputHandler);  setDocument(defaults.document);  editable=defaults.editable;  caretVisible=defaults.caretVisible;  caretBlinks=defaults.caretBlinks;  electricScroll=defaults.electricScroll;  popup=defaults.popup;  focusedComponent=this;  addMouseWheelListener(this);  setRightClickPopup(createTextPopupMenu());}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public void testUpdatePackage1(){  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  try {    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    mAppIdValue+=10;    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    mContentTypeValue+=20;    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    mContentTypeValue+=20;    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);  } catch (  RemoteException e) {    assertTrue(false);  }  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  utUpdatePackage(false,false);  mAppIdValue+=10;  utUpdatePackage(false,true);  mContentTypeValue+=20;  utUpdatePackage(true,false);  mContentTypeValue+=20;  utUpdatePackage(true,true);  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  try {    IWapPushManager iwapman=getInterface();    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    mAppIdValue+=10;    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    mContentTypeValue+=20;    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    mContentTypeValue+=20;    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;}  }
class C{  public static <T,W extends BoundedWindow>boolean skipAssignWindows(Window.Bound<T> transform,EvaluationContext context){  @SuppressWarnings("unchecked") WindowFn<? super T,W> windowFn=(WindowFn<? super T,W>)transform.getWindowFn();  return windowFn == null || (context.getInput(transform).getWindowingStrategy().getWindowFn() instanceof GlobalWindows && windowFn instanceof GlobalWindows);}  }
class C{  public PatternFilenameFilter(Pattern pattern){  this.pattern=Preconditions.checkNotNull(pattern);}  }
class C{  public IgniteConfiguration(){}  }
class C{  public DefaultMapEntry(final KeyValue<K,V> pair){  super(pair.getKey(),pair.getValue());}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException, HeadlessException {  if (GraphicsEnvironment.isHeadless()) {    throw new HeadlessException();  }  s.defaultReadObject();}  }
class C{  public PreDestroyCustomScopeEvent(ScopeContext scopeContext){  super(scopeContext);}  }
class C{  public final void test_write$BII_4() throws NoSuchAlgorithmException, IOException {  assertEquals(0,MY_MESSAGE_LEN % CHUNK_SIZE);  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      dos.on(false);      for (int i=0; i < MY_MESSAGE_LEN / CHUNK_SIZE; i++) {        dos.write(myMessage,i * CHUNK_SIZE,CHUNK_SIZE);      }      assertTrue("write",Arrays.equals(myMessage,bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void print(CtClass clazz){  CtMethod[] methods=clazz.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    print(methods[i]);  }}  }
class C{  @ResponseBody @RequestMapping(value="/verify/{applicationName}/{serverName}",method=RequestMethod.GET) public JsonResponse isValid(@PathVariable String applicationName,@PathVariable String serverName) throws ServiceException, CheckException {  if (logger.isInfoEnabled()) {    logger.info("applicationName:" + applicationName);    logger.info("serverName:" + serverName);  }  CheckUtils.validateInput(applicationName,"check.app.name");  CheckUtils.validateInput(serverName,"check.server.name");  applicationService.isValid(applicationName,serverName);  return new HttpOk();}  }
class C{  protected void doLogRpc(PendingClientCallState state,Message response,String errorMessage){  if (rpcLogger != null) {    rpcLogger.logCall(clientInfo,serverInfo,state.getMethodDesc().getFullName(),state.getRequest(),response,errorMessage,state.getController().getCorrelationId(),state.getStartTimestamp(),System.currentTimeMillis());  }}  }
class C{  private void grow(){  int oldCapacity=queue.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity < 0)   newCapacity=Integer.MAX_VALUE;  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  public void editText(String txt,Rectangle r){  if (m_editing) {    stopEditing();  }  m_editing=true;  m_editor.setBounds(r.x,r.y,r.width,r.height);  m_editor.setText(txt);  m_editor.setVisible(true);  m_editor.setCaretPosition(txt.length());  m_editor.requestFocus();}  }
class C{  public void endPingSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(pingSendInProgressId,-1);  int endPingSendId;  if (failed) {    endPingSendId=pingSendFailedId;  } else {    endPingSendId=pingSendId;  }  this.sendStats.incInt(endPingSendId,1);  this.stats.incLong(pingSendDurationId,duration);}  }
class C{  public static int d6(int dice){  Roll roll=random.d6(dice);  if (Server.getServerInstance() != null) {    if (Server.getServerInstance().getGame().getOptions().booleanOption("rng_log")) {      Server.getServerInstance().reportRoll(roll);    }  }  return roll.getIntValue();}  }
class C{  public static Map<String,Object> updateImage(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=updateImageMethod(dctx,context);  return result;}  }
class C{  @ExpectWarning("IL") static void case1a(){  case1a();}  }
class C{  public double[][] generateIntervalSpacedSamples(EvolutionState state,double[] min,double[] max,double[] interval,int threadnum){  ArrayList list=new ArrayList();  double[] current=new double[min.length];  buildIntervalPoints(state,list,min,max,interval,current,0,threadnum);  return (double[][])(list.toArray(new double[0][]));}  }
class C{  public final float lengthSquared(){  return (x * x + y * y);}  }
class C{  private void updateInitiatorInfo(String clusterName,VPlexInitiatorInfo initiatorInfo) throws VPlexApiException {  String initiatorName=initiatorInfo.getName();  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.URI_CLUSTERS.toString());  uriBuilder.append(clusterName);  uriBuilder.append(VPlexApiConstants.URI_INITIATORS.toString());  uriBuilder.append(initiatorName);  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Initiator Info Request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw new VPlexApiException(String.format("Failed getting info for initiator %s in cluster %s with status: %s",initiatorName,clusterName,status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,initiatorInfo);    s_logger.info("Updated Initiator Info {}",initiatorInfo.toString());  } catch (  Exception e) {    throw new VPlexApiException(String.format("Error processing initiator information: %s",e.getMessage()),e);  }}  }
class C{  public static Object convertValue(Object value,Type currentType,Type expectedType){  if (expectedType == null) {    return value;  }  if (currentType == expectedType) {    return value;  }switch (expectedType) {case INTEGER:switch (currentType) {case FLOAT:      LOG.debug("Trying to convert float value {} to integer",value);    Long longValue=((Double)value).longValue();  if ((double)value == longValue.doubleValue()) {    return longValue;  }default :break;}break;case FLOAT:switch (currentType) {case INTEGER:LOG.debug("Trying to convert integer value {} to float",value);Double floatValue=((Long)value).doubleValue();if ((long)value == floatValue.longValue()) {return floatValue;}default :break;}break;case BOOLEAN:switch (currentType) {case STRING:LOG.debug("Trying to convert string value {} to boolean",value);if (StringUtils.equalsIgnoreCase((String)value,"true")) {return true;} else if (StringUtils.equalsIgnoreCase((String)value,"false")) {return false;}break;case INTEGER:LOG.debug("Trying to convert int value {} to boolean",value);Long val=(Long)value;if (val == 1) {return true;} else if (val == 0) {return false;}break;default :break;}break;case TIME:switch (currentType) {case INTEGER:LOG.debug("Trying to convert long value {} to date",value);return new Date((Long)value);case STRING:LOG.debug("Trying to convert string value {} to date",value);try {DatatypeFactory datatypeFactory=DatatypeFactory.newInstance();XMLGregorianCalendar cal=datatypeFactory.newXMLGregorianCalendar((String)value);return cal.toGregorianCalendar().getTime();} catch (DatatypeConfigurationException e) {LOG.debug("Unable to convert string to date",e);}default :break;}break;case STRING:switch (currentType) {case BOOLEAN:case INTEGER:case FLOAT:return String.valueOf(value);default :break;}break;case OPAQUE:if (currentType == Type.STRING) {LOG.debug("Trying to convert hexadecimal string {} to byte array",value);return Hex.decodeHex(((String)value).toCharArray());}break;default :}throw new IllegalArgumentException("Invalid value type, expected " + expectedType + ", got "+ currentType);}  }
class C{  public void addAtBottom(List<EndlessAdapter.RemovedElement> removingGiveaways){  removedGiveaways.add(removingGiveaways);  wasSwiped=false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.274 -0500",hash_original_method="B06DCE1DF709801335FC6880CADA9E72",hash_generated_method="E8B99B66CF7B8D547C92FB35AF020C1A") public static long rotateRight(long v,int distance){  return (v >>> distance) | (v << -distance);}  }
class C{  private Object arrayToColumn(ColumnDesc added,Object o) throws FitsException {  if (!added.isVarying && !added.isBoolean && !added.isComplex&& !added.isString) {    return o;  }  if (!added.isVarying) {    if (added.isString) {      int[] dims=added.dimens;      if (dims[dims.length - 1] < 0) {        dims[dims.length - 1]=FitsUtil.maxLength((String[])o);      }      if (o instanceof String) {        o=new String[]{(String)o};      }      o=FitsUtil.stringsToByteArray((String[])o,dims[dims.length - 1]);    } else     if (added.isBoolean) {      o=FitsUtil.booleanToByte((boolean[])o);    }  } else {    if (added.isBoolean) {      if (o instanceof boolean[]) {        o=new boolean[][]{(boolean[])o};      }      boolean[][] to=(boolean[][])o;      byte[][] xo=new byte[to.length][];      for (int i=0; i < to.length; i++) {        xo[i]=FitsUtil.booleanToByte(to[i]);      }      o=xo;    }    int offset=this.heap.putData(o);    int blen=ArrayFuncs.getBaseLength(o);    if (!(o instanceof Object[])) {      o=new Object[]{o};    }    int nrow=Array.getLength(o);    int factor=1;    if (added.isComplex) {      factor=2;    }    if (added.isLongVary) {      long[] descrip=new long[2 * nrow];      Object[] x=(Object[])o;      for (int i=0; i < nrow; i++) {        int len=Array.getLength(x[i]);        descrip[2 * i]=len;        descrip[2 * i + 1]=offset;        offset+=len * blen * factor;      }      o=descrip;    } else {      int[] descrip=new int[2 * nrow];      Object[] x=(Object[])o;      for (int i=0; i < nrow; i++) {        int len=Array.getLength(x[i]);        descrip[2 * i]=len;        descrip[2 * i + 1]=offset;        offset+=len * blen * factor;      }      o=descrip;    }  }  return o;}  }
class C{  public static DeleteParticipant[] loadDeleteParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,DeleteArguments arguments,String[] affectedNatures,SharableParticipants shared){  return loadDeleteParticipants(status,processor,element,arguments,null,affectedNatures,shared);}  }
class C{  public Void doInBackground(){  String message=null;  int totalSumbitted=0;  int reSumbittedAt=20;  this.startTime=System.currentTimeMillis();  this.submitTimes.clear();  ConcurrentHashMap<Integer,Tradingday> runningContractRequests=new ConcurrentHashMap<Integer,Tradingday>();  setProgress(0);  try {    this.grandTotal=calculateTotalTradestrategiesToProcess(this.startTime);    Collections.sort(tradingdays.getTradingdays(),Tradingday.DATE_ORDER_ASC);    for (    Tradingday tradingday : tradingdays.getTradingdays()) {      Tradingday toProcessTradingday=(Tradingday)tradingday.clone();      for (      Tradestrategy tradestrategy : tradingday.getTradestrategies()) {        tradestrategy.setStrategyData(StrategyData.create(tradestrategy));        toProcessTradingday.addTradestrategy(tradestrategy);        addIndicatorTradestrategyToTradingday(toProcessTradingday,tradestrategy);      }      totalSumbitted=processTradingday(getTradingdayToProcess(toProcessTradingday,runningContractRequests),totalSumbitted);      if (totalSumbitted > reSumbittedAt) {        reSumbittedAt=totalSumbitted + reSumbittedAt;        totalSumbitted=reProcessTradingdays(tradingdays,runningContractRequests,totalSumbitted);      }    }    if (backTestBarSize > 0 && this.brokerModel.isBrokerDataOnly()) {      Collections.sort(tradingdays.getTradingdays(),Tradingday.DATE_ORDER_ASC);      for (      Tradingday itemTradingday : tradingdays.getTradingdays()) {        if (TradingCalendar.isTradingDay(itemTradingday.getOpen()) && TradingCalendar.sameDay(itemTradingday.getOpen(),TradingCalendar.getZonedDateTimeFromMilli(this.startTime)) && !TradingCalendar.isAfterHours(TradingCalendar.getZonedDateTimeFromMilli(this.startTime)))         continue;        Tradingday tradingday=(Tradingday)itemTradingday.clone();        for (        Tradestrategy itemTradestrategy : itemTradingday.getTradestrategies()) {          if (getBarSize(tradingday) < itemTradestrategy.getBarSize()) {            try {              Tradestrategy tradestrategy=(Tradestrategy)itemTradestrategy.clone();              tradestrategy.setBarSize(getBarSize(tradingday));              tradestrategy.setChartDays(1);              tradestrategy.setIdTradeStrategy(this.brokerModel.getNextRequestId());              tradestrategy.setStrategyData(null);              tradestrategy.setStrategyData(StrategyData.create(tradestrategy));              if (this.brokerModel.validateBrokerData(tradestrategy)) {                tradingday.addTradestrategy(tradestrategy);                addIndicatorTradestrategyToTradingday(tradingday,tradestrategy);              }            } catch (            BrokerModelException ex) {              continue;            }          }        }        totalSumbitted=processTradingday(getTradingdayToProcess(tradingday,runningContractRequests),totalSumbitted);      }    }    totalSumbitted=reProcessTradingdays(tradingdays,runningContractRequests,totalSumbitted);  } catch (  InterruptedException ex) {    _log.error("doInBackground interupted Msg: ",ex.getMessage());  }catch (  Exception ex) {    _log.error("Error getting history data Msg: ",ex.getMessage());    this.firePropertyChange("error",new String("OK"),ex);  } finally {synchronized (this.brokerModel.getHistoricalData()) {      while ((this.brokerModel.getHistoricalData().size() > 0) && !this.isCancelled()) {        try {          this.brokerModel.getHistoricalData().wait();          int percent=(int)(((double)(getGrandTotal() - this.brokerModel.getHistoricalData().size()) / getGrandTotal()) * 100d);          setProgress(percent);        } catch (        InterruptedException ex) {          _log.error("doInBackground finally interupted Msg: ",ex.getMessage());        }      }    }    setProgress(100);    message="Completed Historical data total contracts processed: " + totalSumbitted + " in : "+ ((System.currentTimeMillis() - this.startTime) / 1000)+ " Seconds.";    _log.debug(message);    publish(message);  }  return null;}  }
class C{  private void generateChunk(GlowChunk chunk,int x,int z){  Random random=new Random(x * 341873128712L + z * 132897987541L);  BiomeGrid biomes=new BiomeGrid();  int[] biomeValues=biomeGrid[0].generateValues(x * GlowChunk.WIDTH,z * GlowChunk.HEIGHT,GlowChunk.WIDTH,GlowChunk.HEIGHT);  for (int i=0; i < biomeValues.length; i++) {    biomes.biomes[i]=(byte)biomeValues[i];  }  GlowChunkData glowChunkData=null;  if (generator instanceof GlowChunkGenerator) {    glowChunkData=(GlowChunkData)generator.generateChunkData(world,random,x,z,biomes);  } else {    ChunkGenerator.ChunkData chunkData=generator.generateChunkData(world,random,x,z,biomes);    if (chunkData != null) {      glowChunkData=new GlowChunkData(world);      for (int i=0; i < 16; ++i) {        for (int j=0; j < 16; ++j) {          int maxHeight=chunkData.getMaxHeight();          for (int k=0; k < maxHeight; ++k) {            MaterialData materialData=chunkData.getTypeAndData(i,k,j);            if (materialData != null) {              glowChunkData.setBlock(i,k,j,materialData);            } else {              glowChunkData.setBlock(i,k,j,new MaterialData(Material.AIR));            }          }        }      }    }  }  if (glowChunkData != null) {    short[][] extSections=glowChunkData.getSections();    if (extSections != null) {      ChunkSection[] sections=new ChunkSection[extSections.length];      for (int i=0; i < extSections.length; ++i) {        if (extSections[i] != null) {          sections[i]=new ChunkSection();          for (int j=0; j < extSections[i].length; ++j) {            sections[i].types[j]=(char)extSections[i][j];          }          sections[i].recount();        }      }      chunk.initializeSections(sections);      chunk.setBiomes(biomes.biomes);      chunk.automaticHeightMap();      return;    }  }  short[][] extSections=generator.generateExtBlockSections(world,random,x,z,biomes);  if (extSections != null) {    ChunkSection[] sections=new ChunkSection[extSections.length];    for (int i=0; i < extSections.length; ++i) {      if (extSections[i] != null) {        sections[i]=new ChunkSection();        for (int j=0; j < extSections[i].length; ++j) {          sections[i].types[j]=(char)(extSections[i][j] << 4);        }        sections[i].recount();      }    }    chunk.initializeSections(sections);    chunk.setBiomes(biomes.biomes);    chunk.automaticHeightMap();    return;  }  byte[][] blockSections=generator.generateBlockSections(world,random,x,z,biomes);  if (blockSections != null) {    ChunkSection[] sections=new ChunkSection[blockSections.length];    for (int i=0; i < blockSections.length; ++i) {      if (blockSections[i] != null) {        sections[i]=new ChunkSection();        for (int j=0; j < blockSections[i].length; ++j) {          sections[i].types[j]=(char)(blockSections[i][j] << 4);        }        sections[i].recount();      }    }    chunk.initializeSections(sections);    chunk.setBiomes(biomes.biomes);    chunk.automaticHeightMap();    return;  }  byte[] types=generator.generate(world,random,x,z);  ChunkSection[] sections=new ChunkSection[8];  for (int sy=0; sy < sections.length; ++sy) {    ChunkSection sec=new ChunkSection();    int by=16 * sy;    for (int cx=0; cx < 16; ++cx) {      for (int cz=0; cz < 16; ++cz) {        for (int cy=by; cy < by + 16; ++cy) {          char type=(char)types[(cx * 16 + cz) * 128 + cy];          sec.types[sec.index(cx,cy,cz)]=(char)(type << 4);        }      }    }    sec.recount();    sections[sy]=sec;  }  chunk.initializeSections(sections);  chunk.setBiomes(biomes.biomes);  chunk.automaticHeightMap();}  }
class C{  public SolrRequestHandler register(String handlerName,SolrRequestHandler handler){  String norm=normalize(handlerName);  if (handler == null) {    return handlers.remove(norm);  }  SolrRequestHandler old=handlers.put(norm,handler);  if (0 != norm.length() && handler instanceof SolrInfoMBean) {    core.getInfoRegistry().put(handlerName,handler);  }  return old;}  }
class C{  private boolean loadLOBDataFromDB(){  m_items=new ArrayList<MAttachmentEntry>();  byte[] data=getBinaryData();  if (data == null)   return true;  log.fine("ZipSize=" + data.length);  if (data.length == 0)   return true;  if (!ZIP.equals(getTitle())) {    m_items.add(new MAttachmentEntry(getTitle(),data,1));    return true;  }  try {    ByteArrayInputStream in=new ByteArrayInputStream(data);    ZipInputStream zip=new ZipInputStream(in);    ZipEntry entry=zip.getNextEntry();    while (entry != null) {      String name=entry.getName();      ByteArrayOutputStream out=new ByteArrayOutputStream();      byte[] buffer=new byte[2048];      int length=zip.read(buffer);      while (length != -1) {        out.write(buffer,0,length);        length=zip.read(buffer);      }      byte[] dataEntry=out.toByteArray();      log.fine(name + " - size=" + dataEntry.length+ " - zip="+ entry.getCompressedSize()+ "("+ entry.getSize()+ ") "+ (entry.getCompressedSize() * 100 / entry.getSize())+ "%");      m_items.add(new MAttachmentEntry(name,dataEntry,m_items.size() + 1));      entry=zip.getNextEntry();    }  } catch (  Exception e) {    log.log(Level.SEVERE,"loadLOBData",e);    m_items=null;    return false;  }  return true;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_AcctSchema_ID"))     p_C_AcctSchema_ID=para[i].getParameterAsInt(); else     if (name.equals("CopyOverwriteAcct"))     p_CopyOverwriteAcct="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static CacheSpan createCacheEntry(File file){  Matcher matcher=cacheFilePattern.matcher(file.getName());  if (!matcher.matches()) {    return null;  }  return CacheSpan.createCacheEntry(matcher.group(1),Long.parseLong(matcher.group(2)),Long.parseLong(matcher.group(3)),file);}  }
class C{  private LegendItemCollection createLegendItems(){  LegendItemCollection result=new LegendItemCollection();  return result;}  }
class C{  public boolean isIsChange(){  return isChange;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:49.791 -0500",hash_original_method="8094E6003A9AD72F860775776E112CF5",hash_generated_method="75AB8E31F3FFE2C2BA960C3340D99E46") public static CdmaSmsAddress parse(String address){  CdmaSmsAddress addr=new CdmaSmsAddress();  addr.address=address;  addr.ton=CdmaSmsAddress.TON_UNKNOWN;  byte[] origBytes=null;  String filteredAddr=filterNumericSugar(address);  if (filteredAddr != null) {    origBytes=parseToDtmf(filteredAddr);  }  if (origBytes != null) {    addr.digitMode=DIGIT_MODE_4BIT_DTMF;    addr.numberMode=NUMBER_MODE_NOT_DATA_NETWORK;    if (address.indexOf('+') != -1) {      addr.ton=TON_INTERNATIONAL_OR_IP;    }  } else {    filteredAddr=filterWhitespace(address);    origBytes=UserData.stringToAscii(filteredAddr);    if (origBytes == null) {      return null;    }    addr.digitMode=DIGIT_MODE_8BIT_CHAR;    addr.numberMode=NUMBER_MODE_DATA_NETWORK;    if (address.indexOf('@') != -1) {      addr.ton=TON_NATIONAL_OR_EMAIL;    }  }  addr.origBytes=origBytes;  addr.numberOfDigits=origBytes.length;  return addr;}  }
class C{  boolean removeInternal(K key,V value,boolean mutateLocal){  final DeleteAction<K,V,Object> action;  boolean twoArgRemove=(value != null);  if (twoArgRemove) {    AccessTimeObjectHolder<V> holder=tcache.peekHolder(key);    V valueInCache=holder != null ? holder.peek() : null;    boolean mustWriteThrough=value.equals(valueInCache);    action=new DeleteOnValueAction<K,V,Object>(key,mustWriteThrough);    if (valueInCache != null && !mustWriteThrough) {      holder.updateMaxIdleTime(tcache.expiryPolicy.getExpiryForAccess());    }  } else {    action=new DeleteAction<K,V,Object>(key);  }  boolean removed=false;  if (actionRunner.preMutate(action)) {    if (mutateLocal) {      if (value == null) {        V oldValue=tcache.remove(key);        removed=oldValue != null;        action.setRemoved(removed);        actionRunner.postMutate(action,oldValue);      } else {        removed=tcache.remove(key,value);        action.setRemoved(removed);        actionRunner.postMutate(action,value);      }    } else {      if (actionRunner instanceof WriteBehindActionRunner) {        action.setRemoved(removed);        action.writeThrough(actionRunner,null);      }    }  }  action.close();  return removed;}  }
class C{  public void connectFailed(Connection connection,IOException failure){  Route failedRoute=connection.getRoute();  if (failedRoute.getProxy().type() != Proxy.Type.DIRECT && proxySelector != null) {    proxySelector.connectFailed(uri,failedRoute.getProxy().address(),failure);  }  routeDatabase.failed(failedRoute,failure);}  }
class C{  public boolean isSetVersionedValue(){  return this.versionedValue != null;}  }
class C{  public static boolean parseBoolean(String s){  return normalizeBoolean(s).equals("true");}  }
class C{  private void renovateOsrPoints(IR ir){  for (int osrIdx=0, osrSize=osrPoints.size(); osrIdx < osrSize; osrIdx++) {    Instruction osr=osrPoints.get(osrIdx);    LinkedList<Instruction> barriers=new LinkedList<Instruction>();{      GenerationContext gc=ir.getGc();      Instruction bar=gc.getOSRBarrierFromInst(osr);      if (osr.position() == null)       osr.setPosition(bar.position());      adjustBCIndex(osr);      while (bar != null) {        barriers.add(bar);        if (VM.VerifyAssertions) {          if (!isBarrierClean(bar)) {            VM.sysWriteln("Barrier " + bar + " is not clean!");          }          VM._assert(isBarrierClean(bar));        }        Instruction callsite=bar.position().getCallSite();        if (callsite != null) {          bar=gc.getOSRBarrierFromInst(callsite);          if (bar == null) {            VM.sysWrite("call site :" + callsite);            if (VM.VerifyAssertions)             VM._assert(VM.NOT_REACHED);          }          adjustBCIndex(bar);        } else {          bar=null;        }      }    }    int inlineDepth=barriers.size();    if (VM.VerifyAssertions) {      if (inlineDepth == 0) {        VM.sysWriteln("Inlining depth for " + osr + " is 0!");      }      VM._assert(inlineDepth != 0);    }    int[] methodids=new int[inlineDepth];    int[] bcindexes=new int[inlineDepth];    byte[][] localTypeCodes=new byte[inlineDepth][];    byte[][] stackTypeCodes=new byte[inlineDepth][];    int totalOperands=0;    for (int barIdx=0, barSize=barriers.size(); barIdx < barSize; barIdx++) {      Instruction bar=barriers.get(barIdx);      methodids[barIdx]=bar.position().method.getId();      bcindexes[barIdx]=bar.getBytecodeIndex();      OsrTypeInfoOperand typeInfo=OsrBarrier.getTypeInfo(bar);      localTypeCodes[barIdx]=typeInfo.localTypeCodes;      stackTypeCodes[barIdx]=typeInfo.stackTypeCodes;      totalOperands+=OsrBarrier.getNumberOfElements(bar);    }    InlinedOsrTypeInfoOperand typeInfo=new InlinedOsrTypeInfoOperand(methodids,bcindexes,localTypeCodes,stackTypeCodes);    OsrPoint.mutate(osr,osr.operator(),typeInfo,totalOperands);    int opIndex=0;    for (int barIdx=0, barSize=barriers.size(); barIdx < barSize; barIdx++) {      Instruction bar=barriers.get(barIdx);      for (int elmIdx=0, elmSize=OsrBarrier.getNumberOfElements(bar); elmIdx < elmSize; elmIdx++) {        Operand op=OsrBarrier.getElement(bar,elmIdx);        if (VM.VerifyAssertions) {          if (op == null) {            VM.sysWriteln(elmIdx + "th Operand of " + bar+ " is null!");          }          VM._assert(op != null);        }        if (op.isRegister()) {          op=op.asRegister().copyU2U();        } else {          op=op.copy();        }        OsrPoint.setElement(osr,opIndex,op);        opIndex++;      }    }    if (VM.VerifyAssertions) {      Instruction lastBar=barriers.getLast();      if (ir.method != lastBar.position().method) {        VM.sysWriteln("The last barrier is not in the same method as osr:");        VM.sysWriteln(lastBar + "@" + lastBar.position().method);        VM.sysWriteln("current method @" + ir.method);      }      VM._assert(ir.method == lastBar.position().method);      if (opIndex != totalOperands) {        VM.sysWriteln("opIndex and totalOperands do not match:");        VM.sysWriteln("opIndex = " + opIndex);        VM.sysWriteln("totalOperands = " + totalOperands);      }      VM._assert(opIndex == totalOperands);    }  }}  }
class C{  public void makeChanges(){  try {    for (int i=0; i <= lastUsedSensor; i++) {      if (sensorArray[i] == null) {        continue;      }      boolean value=sensorORedSetting[i];      if (value) {        if (((sensorTempSetting[i] == Sensor.ACTIVE) || (sensorTempSetting[i] == Sensor.UNKNOWN)) && (sensorLastSetting[i] != Sensor.ACTIVE)) {          sensorLastSetting[i]=Sensor.ACTIVE;          sensorArray[i].setKnownState(Sensor.ACTIVE);        }        sensorTempSetting[i]=Sensor.ACTIVE;      } else {        if (((sensorTempSetting[i] == Sensor.INACTIVE) || (sensorTempSetting[i] == Sensor.UNKNOWN)) && (sensorLastSetting[i] != Sensor.INACTIVE)) {          sensorLastSetting[i]=Sensor.INACTIVE;          sensorArray[i].setKnownState(Sensor.INACTIVE);        }        sensorTempSetting[i]=Sensor.INACTIVE;      }    }  } catch (  JmriException e) {    log.error("exception in makeChanges: " + e);  }  for (int i=0; i < lastUsedSensor; i++) {    sensorORedSetting[i]=false;  }}  }
class C{  private void addJBossDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("META-INF/jboss.xml");    if (in != null) {      JBossXml descr=JBossXmlIo.parseJBossXml(in);      if (descr != null) {        this.ejbJarXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public static void showContextHelp(final JFrame window){  CHelpManager.instance().start(window);}  }
class C{  public synchronized void compact(int compactMode){  if (!database.getSettings().pageStoreTrim) {    return;  }  if (SysProperties.MODIFY_ON_WRITE && readMode && compactMode == 0) {    return;  }  openForWriting();  int lastUsed=-1;  for (int i=getFreeListId(pageCount); i >= 0; i--) {    lastUsed=getFreeList(i).getLastUsed();    if (lastUsed != -1) {      break;    }  }  writeBack();  log.free();  recoveryRunning=true;  try {    logFirstTrunkPage=lastUsed + 1;    allocatePage(logFirstTrunkPage);    log.openForWriting(logFirstTrunkPage,true);    log.checkpoint();  }  finally {    recoveryRunning=false;  }  long start=System.currentTimeMillis();  boolean isCompactFully=compactMode == CommandInterface.SHUTDOWN_COMPACT;  boolean isDefrag=compactMode == CommandInterface.SHUTDOWN_DEFRAG;  if (database.getSettings().defragAlways) {    isCompactFully=isDefrag=true;  }  int maxCompactTime=database.getSettings().maxCompactTime;  int maxMove=database.getSettings().maxCompactCount;  if (isCompactFully || isDefrag) {    maxCompactTime=Integer.MAX_VALUE;    maxMove=Integer.MAX_VALUE;  }  int blockSize=isCompactFully ? COMPACT_BLOCK_SIZE : 1;  int firstFree=MIN_PAGE_COUNT;  for (int x=lastUsed, j=0; x > MIN_PAGE_COUNT && j < maxMove; x-=blockSize) {    for (int full=x - blockSize + 1; full <= x; full++) {      if (full > MIN_PAGE_COUNT && isUsed(full)) {synchronized (this) {          firstFree=getFirstFree(firstFree);          if (firstFree == -1 || firstFree >= full) {            j=maxMove;            break;          }          if (compact(full,firstFree)) {            j++;            long now=System.currentTimeMillis();            if (now > start + maxCompactTime) {              j=maxMove;              break;            }          }        }      }    }  }  if (isDefrag) {    log.checkpoint();    writeBack();    cache.clear();    ArrayList<Table> tables=database.getAllTablesAndViews(false);    recordedPagesList=New.arrayList();    recordedPagesIndex=new IntIntHashMap();    recordPageReads=true;    Session sysSession=database.getSystemSession();    for (    Table table : tables) {      if (!table.isTemporary() && Table.TABLE.equals(table.getTableType())) {        Index scanIndex=table.getScanIndex(sysSession);        Cursor cursor=scanIndex.find(sysSession,null,null);        while (cursor.next()) {          cursor.get();        }        for (        Index index : table.getIndexes()) {          if (index != scanIndex && index.canScan()) {            cursor=index.find(sysSession,null,null);            while (cursor.next()) {            }          }        }      }    }    recordPageReads=false;    int target=MIN_PAGE_COUNT - 1;    int temp=0;    for (int i=0, size=recordedPagesList.size(); i < size; i++) {      log.checkpoint();      writeBack();      int source=recordedPagesList.get(i);      Page pageSource=getPage(source);      if (!pageSource.canMove()) {        continue;      }      while (true) {        Page pageTarget=getPage(++target);        if (pageTarget == null || pageTarget.canMove()) {          break;        }      }      if (target == source) {        continue;      }      temp=getFirstFree(temp);      if (temp == -1) {        DbException.throwInternalError("no free page for defrag");      }      cache.clear();      swap(source,target,temp);      int index=recordedPagesIndex.get(target);      if (index != IntIntHashMap.NOT_FOUND) {        recordedPagesList.set(index,source);        recordedPagesIndex.put(source,index);      }      recordedPagesList.set(i,target);      recordedPagesIndex.put(target,i);    }    recordedPagesList=null;    recordedPagesIndex=null;  }  checkpoint();  log.checkpoint();  writeIndexRowCounts();  log.checkpoint();  writeBack();  commit(pageStoreSession);  writeBack();  log.checkpoint();  log.free();  recoveryRunning=true;  try {    setLogFirstPage(++logKey,0,0);  }  finally {    recoveryRunning=false;  }  writeBack();  for (int i=getFreeListId(pageCount); i >= 0; i--) {    lastUsed=getFreeList(i).getLastUsed();    if (lastUsed != -1) {      break;    }  }  int newPageCount=lastUsed + 1;  if (newPageCount < pageCount) {    freed.set(newPageCount,pageCount,false);  }  pageCount=newPageCount;  freeLists.clear();  trace.debug("pageCount: " + pageCount);  long newLength=(long)pageCount << pageSizeShift;  if (file.length() != newLength) {    file.setLength(newLength);    writeCount++;  }}  }
class C{  private boolean isWeekly(){  return WEEKLY.equalsIgnoreCase(this.executionWindowType);}  }
class C{  public void removeChangeListener(MarkerChangeListener listener){  this.listenerList.remove(MarkerChangeListener.class,listener);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_RECORD___RECORD_ENTITY_1:    return getRecordEntity_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void writeWithAlpha(OutStream out) throws IOException {  write(out);}  }
class C{  private static int checkChar(final char c,final String signature,int pos){  if (getChar(signature,pos) == c) {    return pos + 1;  }  throw new IllegalArgumentException(signature + ": '" + c+ "' expected at index "+ pos);}  }
class C{  public static String printDate(Date date,String format){  if (date == null) {    return "";  }  return new SimpleDateFormat(format).format(date);}  }
class C{  public static boolean checkPermission(String permissionName){  if (context == null) {    throw new RuntimeException("Before comparing permissions you need to call Nammu.init(context)");  }  return PackageManager.PERMISSION_GRANTED == ContextCompat.checkSelfPermission(context,permissionName);}  }
class C{  private static void noteImplements(RVMClass c,RVMClass I){  ImmutableEntryHashSetRVM<RVMClass> implementsSet=findOrCreateSet(I);  implementsSet.add(c);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isDiscountAllowedOnTotal(){  Object oo=get_Value(COLUMNNAME_IsDiscountAllowedOnTotal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ConfigGetter(Class<?> configInterface,Method method){  super(configInterface,method);  defaultValue=ConfigUtil.getDefaultValue(configInterface,method);  sourceType=ConfigUtil.getSourceType(configInterface,method);  factory=TypeFactory.getInstance(configInterface,method);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.TESTED_PROJECTS__TESTED_PROJECTS:    return ((InternalEList<?>)getTestedProjects()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private CharSet(int[] chars){  this.chars=chars;}  }
class C{  public TransformerException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.toString() : message);  this.containedException=e;  this.locator=null;}  }
class C{  public double zDotProduct(DoubleMatrix1D y,int from,int length){  if (!(y instanceof DenseDoubleMatrix1D)) {    return super.zDotProduct(y,from,length);  }  DenseDoubleMatrix1D yy=(DenseDoubleMatrix1D)y;  int tail=from + length;  if (from < 0 || length < 0)   return 0;  if (size < tail)   tail=size;  if (y.size < tail)   tail=y.size;  int min=tail - from;  int i=index(from);  int j=yy.index(from);  int s=stride;  int ys=yy.stride;  final double[] elems=this.elements;  final double[] yElems=yy.elements;  if (elems == null || yElems == null)   throw new InternalError();  double sum=0;  i-=s;  j-=ys;  for (int k=min / 4; --k >= 0; ) {    sum+=elems[i+=s] * yElems[j+=ys] + elems[i+=s] * yElems[j+=ys] + elems[i+=s] * yElems[j+=ys] + elems[i+=s] * yElems[j+=ys];  }  for (int k=min % 4; --k >= 0; ) {    sum+=elems[i+=s] * yElems[j+=ys];  }  return sum;}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  private List<GraphTraversal> translateAnd(RexNode node0){  eqMap.clear();  multimap.clear();  for (  RexNode node : RelOptUtil.conjunctions(node0)) {    translateMatch2(node);  }  Map<String,Object> map=builder.map();  for (  Map.Entry<String,RexLiteral> entry : eqMap.entrySet()) {    multimap.removeAll(entry.getKey());    map.put(entry.getKey(),literalValue(entry.getValue()));  }  for (  Map.Entry<String,Collection<Pair<String,RexLiteral>>> entry : multimap.asMap().entrySet()) {    Map<String,Object> map2=builder.map();    for (    Pair<String,RexLiteral> s : entry.getValue()) {      addPredicate(map2,s.left,literalValue(s.right));    }    map.put(entry.getKey(),map2);  }  List<GraphTraversal> traversals=new ArrayList<>();  GraphTraversal andTraversal=__.identity();  for (  Map.Entry<String,Object> entry : map.entrySet()) {    String fieldName=entry.getKey().toLowerCase();    Object value=entry.getValue();    if (value instanceof Map) {      Map<String,Object> mapValue=(Map)value;      for (      Map.Entry<String,Object> valEntry : mapValue.entrySet()) {        String op=valEntry.getKey();        Object val=valEntry.getValue();        val=TableUtil.convertType(val,tableDef.getColumn(fieldName));        P predicate=null;switch (op) {case "$gt":          predicate=P.gt(val);        break;case "$gte":      predicate=P.gte(val);    break;case "$lt":  predicate=P.lt(val);break;case "$lte":predicate=P.lte(val);break;case "$ne":predicate=P.neq(val);break;default :break;}if (fieldName.endsWith("_id")) {andTraversal.has(T.id,predicate);} else {String propertyKey=TableUtil.getProperty(tableDef,fieldName);andTraversal.has(propertyKey,predicate);}}} else {if (fieldName.endsWith("_id")) {andTraversal.has(T.id,value);} else {String propertyKey=TableUtil.getProperty(tableDef,fieldName);value=TableUtil.convertType(value,tableDef.getColumn(fieldName));andTraversal.has(propertyKey,value);}}}traversals.add(andTraversal);return traversals;}  }
class C{  public void migrateVolumeForExpansion(URI vplexSystemURI,URI vplexVolumeURI,List<URI> targetVolumeURIs,Map<URI,URI> migrationsMap,Map<URI,URI> poolVolumeMap,String opId,String stepId) throws ControllerException {  WorkflowStepCompleter.stepExecuting(stepId);  String successMsg=String.format("Virtual volume %s migrated successfully",vplexVolumeURI);  String failMsg=String.format("Virtual volume %s migration failed",vplexVolumeURI);  migrateVolumes(vplexSystemURI,vplexVolumeURI,targetVolumeURIs,migrationsMap,poolVolumeMap,null,null,successMsg,failMsg,null,opId,stepId);  _log.info("Created and started sub workflow to execute the migration");}  }
class C{  public static void writeJUnitTestSuite(){  logger.info("Writing {} failing tests",violations.size());  TestSuiteWriter writer=new TestSuiteWriter();  writeJUnitTestSuite(writer);  String name=Properties.TARGET_CLASS.substring(Properties.TARGET_CLASS.lastIndexOf(".") + 1);  String testDir=Properties.TEST_DIR;  writer.writeTestSuite("Failures" + name,testDir,Collections.emptyList());}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case DomPackage.TAG_TITLE__TAG:    return eInternalContainer().eInverseRemove(this,DomPackage.TAG__TITLE,Tag.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public static void main(final String[] args){  run(args[0],args[1],args[2],args[3]);}  }
class C{  @Override protected Bitmap doInBackground(final String... urls){  String url=urls[0];  Bitmap bitmap=null;  try {    InputStream in=new java.net.URL(url).openStream();    bitmap=BitmapFactory.decodeStream(in);  } catch (  IOException e) {    LOG.warning("Downloading image failed: " + e.getMessage());  }  return bitmap;}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx >> 1;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  public CCopySelectionToClipboard(final NaviNode node){  super("Copy selection to clipboard");  m_node=Preconditions.checkNotNull(node,"IE00938: Node argument can not be null");}  }
class C{  public BitSamplingImageSearcher(int maximumHits,String featureFieldName,String hashesFieldName,GlobalFeature feature){  this.maximumHits=maximumHits;  this.featureFieldName=featureFieldName;  this.hashesFieldName=hashesFieldName;  this.feature=feature;  try {    BitSampling.readHashFunctions();  } catch (  IOException e) {    System.err.println("Error reading hash functions from default location.");    e.printStackTrace();  }}  }
class C{  public static int countDots(final String s){  int count=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '.') {      count++;    }  }  return count;}  }
class C{  public UM(double probability){  super();  this.probability=probability;}  }
class C{  protected int determineDumpNumber(){  String dumpNr=System.getProperty("MAT_HPROF_DUMP_NR");  return dumpNr == null ? 0 : Integer.parseInt(dumpNr);}  }
class C{  @SubscribeEvent public void preTextureHook(TextureStitchEvent.Pre event){  if (event.map == Minecraft.getMinecraft().getTextureMapBlocks()) {    Game.render().blockTextures.forEach(null);    Game.render().itemTextures.forEach(null);    Game.render().entityTextures.forEach(null);  }}  }
class C{  public ArrayList<Interval> insert(ArrayList<Interval> intervals,Interval newInterval){  if (intervals == null || intervals.size() == 0 || newInterval == null) {    if (newInterval != null) {      intervals.add(newInterval);    }    return intervals;  }  int start=newInterval.start;  int front=-1;  for (int i=0; i < intervals.size(); i++) {    if (intervals.get(i).start <= start) {      front=i;    }  }  if (front == -1) {    intervals.add(0,newInterval);  }  intervals.add(front + 1,newInterval);  Interval pre=intervals.get(0);  Interval curr=null;  for (int i=1; i < intervals.size(); i++) {    curr=intervals.get(i);    if (pre.end >= curr.start) {      pre.end=pre.end > curr.end ? pre.end : curr.end;      intervals.remove(i);      i--;    } else {      pre=curr;    }  }  return intervals;}  }
class C{  private static Stream<?> all(Iterator<Object> i){  requireNonNull(i);  final Iterable<Object> it=null;  return StreamSupport.stream(it.spliterator(),false);}  }
class C{  public void dealTrade(){  trade.deal();}  }
class C{  protected ExportSpecifierImpl(){  super();}  }
class C{  public String toString(){  return value.toString();}  }
class C{  protected boolean drawView(){  if (mIsRendererCreated && mRenderer.isRunning() && mPanorama != null) {    if (!mIsValidForFov)     mPanorama.getCamera().rotate(this,mStartPoint,mEndPoint);    mGLSurfaceView.requestRender();    return true;  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void sort(Comparable[] a){  Comparable[] aux=new Comparable[a.length];  sort(a,aux,0,a.length - 1);  assert isSorted(a);}  }
class C{  public void testGetPrimaryKeysUsingInfoShcema() throws Exception {  if (versionMeetsMinimum(5,0,7)) {    createTable("t1","(c1 int(1) primary key)");    Properties props=new Properties();    props.put("useInformationSchema","true");    Connection conn1=null;    try {      conn1=getConnectionWithProps(props);      DatabaseMetaData metaData=conn1.getMetaData();      this.rs=metaData.getPrimaryKeys(null,null,"t1");      this.rs.next();      assertEquals("t1",this.rs.getString("TABLE_NAME"));      assertEquals("c1",this.rs.getString("COLUMN_NAME"));    }  finally {      if (conn1 != null) {        conn1.close();      }    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(", name_2: ");  result.append(name_2);  result.append(')');  return result.toString();}  }
class C{  public void classify(AnthOnlineClassifier classifier){  for (  AnthURL aurl : readyUrls) {    classifier.classifyUrl(aurl);  }}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(Iterable<? extends E> initialContents){  return new Builder<E>(Ordering.<E>natural()).create(initialContents);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;default :return null;}}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level2.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  protected void addToAnimation(ChromeAnimation.Animation<Animatable<?>> component){  if (mLayoutAnimations == null || mLayoutAnimations.finished()) {    onAnimationStarted();    mLayoutAnimations=new ChromeAnimation<Animatable<?>>();    mLayoutAnimations.start();  }  component.start();  mLayoutAnimations.add(component);  requestUpdate();}  }
class C{  public void addAttribute(String name,final String value){  if (m_elemContext.m_startTagOpen) {    final String patchedName=patchName(name);    final String localName=getLocalName(patchedName);    final String uri=getNamespaceURI(patchedName,false);    addAttributeAlways(uri,localName,patchedName,"CDATA",value,false);  }}  }
class C{  public boolean mouseMoved(java.awt.event.MouseEvent e){  if (receiver instanceof PlugIn && omList != null) {    OMGraphic graphic=omList.getContains(e.getX(),e.getY());    String label=null;    if (graphic instanceof Node) {      label=((Node)graphic).getLabel();    }    if (receiver instanceof PlugIn) {      Component comp=((PlugIn)receiver).getComponent();      if (comp instanceof Layer) {        if (graphic != null && label != null) {          ((Layer)comp).fireRequestToolTip("Node " + label);          toolTipUp=true;        } else         if (toolTipUp) {          ((Layer)comp).fireHideToolTip();          toolTipUp=false;        }        return true;      }    }  }  return false;}  }
class C{  void clearSearchResults(){  tempOverlapSearchMap.clear();}  }
class C{  public boolean isNewInfo(){  return getResult() != null;}  }
class C{  public void testJob() throws Exception {  Ignite ignite=startGrid(1);  startGrid(2);  final TestBinarylizableClosure closure=new TestBinarylizableClosure();  ignite.compute(ignite.cluster().forRemotes()).apply(closure,new TestBinarylizableObject());  assert TestBinarylizableClosure.executed.get();  assert TestBinarylizableClosure.writeCalled.get();  assert TestBinarylizableClosure.readCalled.get();  assert TestBinarylizableObject.writeCalled.get();  assert TestBinarylizableObject.readCalled.get();}  }
class C{  @Override protected boolean isArgument(){  return super.isArgument() && (this.type != null);}  }
class C{  public InvalidKeyException(String msg){  super(msg);}  }
class C{  private long hash(final char[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public static double variance(double standardDeviation){  return standardDeviation * standardDeviation;}  }
class C{  public boolean isIncludeAll(){  return (inclusions.isEmpty());}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MVN");  translateAll(environment,instruction,"MVN",instructions);}  }
class C{  public static VideoCastControllerFragment newInstance(Bundle extras){  VideoCastControllerFragment f=new VideoCastControllerFragment();  Bundle b=new Bundle();  b.putBundle(EXTRAS,extras);  f.setArguments(b);  return f;}  }
class C{  public InactivePeerException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  protected void allocateBlocksAndSetTurnouts(int startIndex){  log.debug(_trainName + " allocateBlocksAndSetTurnouts startIndex=" + startIndex+ " _orders.size()="+ _orders.size());  ensureRouteConsecutivity();  for (int i=startIndex; i < _orders.size(); i++) {    log.debug(_trainName + " allocateBlocksAndSetTurnouts for loop #" + i);    BlockOrder bo=getBlockOrderAt(i);    OBlock block=bo.getBlock();    String pathAlreadySet=block.isPathSet(bo.getPathName());    if (pathAlreadySet == null) {      String message=null;      if ((block.getState() & OBlock.OCCUPIED) != 0) {        log.info(_trainName + " block allocation failed " + block.getDisplayName()+ " not allocated, but Occupied.");        message=" block allocation failed ";      }      if (message == null) {        message=block.allocate(this);        if (message != null) {          log.info(_trainName + " block allocation failed " + message);        }      }      if (message == null) {        message=bo.setPath(this);      }      if (message != null) {        log.debug(_trainName + " path setting failed for " + this.getDisplayName()+ " at block "+ block.getDisplayName()+ "  "+ message);        if (_stoppingBlock != null) {          _stoppingBlock.removePropertyChangeListener(this);        }        _stoppingBlock=block;        _stoppingBlock.addPropertyChangeListener(this);        return;      }    } else     if (pathAlreadySet.equals(this.getDisplayName())) {      log.debug(_trainName + " Path already set (and thereby block allocated) for " + bo.getPathName());    } else {      log.info(_trainName + " Block allocation failed: Path already set (and thereby block allocated) for " + bo.getPathName());      return;    }  }}  }
class C{  public static SendPingE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  SendPingE object=new SendPingE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","sendPing").equals(reader.getName())) {          object.setSendPing(org.oscm.xsd.SendPing.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public LatLonPoint toLatLonPoint(Ellipsoid ellip){  return UTMtoLL(this,ellip,new LatLonPoint.Double());}  }
class C{  protected void initPrefs(PreferencesForm frm,PreferenceGroup pg,Vector leadInstructors,boolean addBlankRows){  if (pg == null) {    if (addBlankRows)     frm.addBlankPrefRows();    return;  }  frm.getRoomPrefs().clear();  frm.getRoomPrefLevels().clear();  Set roomPrefs=pg.effectivePreferences(RoomPref.class,leadInstructors);  Iterator iter=roomPrefs.iterator();  while (iter.hasNext()) {    RoomPref rp=(RoomPref)iter.next();    Debug.debug("Adding room pref ... " + rp.getRoom().getUniqueId().toString());    frm.addToRoomPrefs(rp.getRoom().getUniqueId().toString(),rp.getPrefLevel().getUniqueId().toString());  }  frm.getRoomFeaturePrefs().clear();  frm.getRoomFeaturePrefLevels().clear();  Set roomFeatPrefs=pg.effectivePreferences(RoomFeaturePref.class,leadInstructors);  iter=roomFeatPrefs.iterator();  while (iter.hasNext()) {    RoomFeaturePref rfp=(RoomFeaturePref)iter.next();    Debug.debug("Adding room feature pref ... " + rfp.getRoomFeature().getUniqueId().toString());    frm.addToRoomFeatPrefs(rfp.getRoomFeature().getUniqueId().toString(),rfp.getPrefLevel().getUniqueId().toString());  }  frm.getBldgPrefs().clear();  frm.getBldgPrefLevels().clear();  Set bldgPrefs=pg.effectivePreferences(BuildingPref.class,leadInstructors);  iter=bldgPrefs.iterator();  while (iter.hasNext()) {    BuildingPref bp=(BuildingPref)iter.next();    Debug.debug("Adding building pref ... " + bp.getBuilding().getUniqueId().toString());    frm.addToBldgPrefs(bp.getBuilding().getUniqueId().toString(),bp.getPrefLevel().getUniqueId().toString());  }  frm.getDistPrefs().clear();  frm.getDistPrefLevels().clear();  Set distPrefs=pg.effectivePreferences(DistributionPref.class,leadInstructors);  iter=distPrefs.iterator();  while (iter.hasNext()) {    DistributionPref dp=(DistributionPref)iter.next();    Debug.debug("Adding distribution pref ... " + dp.getDistributionType().getUniqueId().toString());    frm.addToDistPrefs(dp.getDistributionType().getUniqueId().toString(),dp.getPrefLevel().getUniqueId().toString());  }  frm.getRoomGroups().clear();  frm.getRoomGroupLevels().clear();  Set rgPrefs=pg.effectivePreferences(RoomGroupPref.class,leadInstructors);  iter=rgPrefs.iterator();  while (iter.hasNext()) {    RoomGroupPref bp=(RoomGroupPref)iter.next();    Debug.debug("Adding room group pref ... " + bp.getRoomGroup().getUniqueId().toString());    frm.addToRoomGroups(bp.getRoomGroup().getUniqueId().toString(),bp.getPrefLevel().getUniqueId().toString());  }  Set datePatternPrefs=pg.effectivePreferences(DatePatternPref.class);  frm.getDatePatternPrefs().clear();  frm.getDatePatternPrefLevels().clear();  iter=datePatternPrefs.iterator();  while (iter.hasNext()) {    DatePatternPref dp=(DatePatternPref)iter.next();    if (!dp.appliesTo(pg))     continue;    Debug.debug("Adding date pattern pref ... " + dp.getDatePattern().getUniqueId().toString());    frm.addToDatePatternPrefs(dp.getDatePattern().getUniqueId().toString(),dp.getPrefLevel().getUniqueId().toString());  }  if (addBlankRows)   frm.addBlankPrefRows();}  }
class C{  @Override public void dateChanged(DateChangeEvent event){  LocalDate oldDate=event.getOldDate();  LocalDate newDate=event.getNewDate();  String oldDateString=PickerUtilities.localDateToString(oldDate,"(null)");  String newDateString=PickerUtilities.localDateToString(newDate,"(null)");  String messageStart="\nThe date in " + datePickerName + " has changed from: ";  String fullMessage=messageStart + oldDateString + " to: "+ newDateString+ ".";  if (!panel.messageTextArea.getText().startsWith(messageStart)) {    panel.messageTextArea.setText("");  }  panel.messageTextArea.append(fullMessage);}  }
class C{  public SoftDoublyIndexedTable(int c){  table=new Entry[c];}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean addToFile(String line){  try (BufferedWriter w=Files.newBufferedWriter(file,CHARSET,CREATE,WRITE,APPEND)){    w.append(line);    w.newLine();  } catch (  IOException ex) {    LOGGER.warning("Failed to write stream highlights: " + ex);    return false;  }  return true;}  }
class C{  public void addObservations(int states[][][]){  int timeSteps=states.length;  if (timeSteps - k - (k - 1) <= 0) {    return;  }  int agentRows=states[0].length;  if (agentRows == 0) {    return;  }  int agentColumns=states[0][0].length;  observations+=(timeSteps - k - (k - 1)) * agentRows * agentColumns;  int[][] prevVal=new int[agentRows][agentColumns];  int[][] nextVal=new int[agentRows][agentColumns];  for (int r=0; r < agentRows; r++) {    for (int c=0; c < agentColumns; c++) {      prevVal[r][c]=0;      nextVal[r][c]=0;      for (int p=0; p < k; p++) {        prevVal[r][c]*=numDiscreteValues;        prevVal[r][c]+=states[p][r][c];        nextVal[r][c]*=numDiscreteValues;        nextVal[r][c]+=states[k - 1 + p][r][c];      }    }  }  for (int t=k; t < timeSteps - (k - 1); t++) {    for (int r=0; r < agentRows; r++) {      for (int c=0; c < agentColumns; c++) {        nextVal[r][c]-=maxShiftedValue[states[t - 1][r][c]];        nextVal[r][c]*=numDiscreteValues;        nextVal[r][c]+=states[k - 1 + t][r][c];        jointCount[nextVal[r][c]][prevVal[r][c]]++;        prevCount[prevVal[r][c]]++;        nextCount[nextVal[r][c]]++;        prevVal[r][c]-=maxShiftedValue[states[t - k][r][c]];        prevVal[r][c]*=numDiscreteValues;        prevVal[r][c]+=states[t][r][c];      }    }  }}  }
class C{  public boolean enterBusy(){  return !lock.writeLockedByCurrentThread() && lock.tryReadLock();}  }
class C{  public ImmutableLeaf readLeaf(final long addr){  final ImmutableLeaf leaf=(ImmutableLeaf)readNodeOrLeaf(addr);  return leaf;}  }
class C{  public static final void saveMap(String filename,HashMap<LabelSet,Integer> map) throws Exception {  MLUtils.saveObject(map,filename);}  }
class C{  @Deprecated @Override public final void add(int index,E element){  throw new UnsupportedOperationException();}  }
class C{  public void testOverlapping(){  Instances result=null;  m_Instances.setClassIndex(2);  try {    result=applyFilter(new Filter[]{new AllFilter(),new AllFilter()},new Range[]{new Range("1,2,4"),new Range("2,4")},false);  } catch (  Exception e) {    fail("Problem applying the filter: " + e);  }  assertEquals(m_Instances.numInstances(),result.numInstances());  assertEquals(m_Instances.numAttributes() + 2,result.numAttributes());}  }
class C{  private void makeSpace(long spaceRequired){  if (spaceRequired > this.capacity.get() || spaceRequired < 0)   return;  CacheEntry[] timeOrderedEntries=new CacheEntry[this.entries.size()];  java.util.Arrays.sort(this.entries.values().toArray(timeOrderedEntries));  int i=0;  while (this.getFreeCapacity() < spaceRequired || this.getUsedCapacity() > this.lowWater) {    if (i < timeOrderedEntries.length) {      this.removeEntry(timeOrderedEntries[i++]);    }  }}  }
class C{  public boolean hasLinkedFroms(){  return hasRepeatingExtension(CrawlIssueLinkedFromUrl.class);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected PlanNode flatten(PlanNode input,TableGroupJoinNode leafTable,TableGroupJoinNode rootTable){  List<TableSource> tableSources=new ArrayList<>();  List<TableNode> tableNodes=new ArrayList<>();  List<JoinType> joinTypes=new ArrayList<>();  JoinType joinType=null;  ConditionList joinConditions=new ConditionList(0);  TableGroupJoinNode table=leafTable;  while (true) {    if (isRequired(table)) {      assert !isPending(table);      if (joinType != null)       joinTypes.add(joinType);      tableSources.add(table.getTable());      tableNodes.add(table.getTable().getTable());      if (table != rootTable) {        joinType=table.getParentJoinType();        if (table.getJoinConditions() != null) {          for (          ConditionExpression joinCondition : table.getJoinConditions()) {            if (joinCondition.getImplementation() != ConditionExpression.Implementation.GROUP_JOIN) {              joinConditions.add(joinCondition);            }          }        }      }    }    if (table == rootTable)     break;    table=table.getParent();  }  Collections.reverse(tableSources);  Collections.reverse(tableNodes);  Collections.reverse(joinTypes);  if (!joinConditions.isEmpty())   input=new Select(input,joinConditions);  return new Flatten(input,tableNodes,tableSources,joinTypes);}  }
class C{  public static <T>ArrayList<T> arrayList(Collection<T> c){  return new ArrayList<T>(c);}  }
class C{  public void mutableAdd(int k,double c,Vec x_t,final List<Double> qi){}  }
class C{  void localeFallbackTest(){  Locale xx=new Locale("xx");  Locale dispLocale=new Locale("xx","YY","ZZ");  String xxname=xx.getDisplayLanguage(xx);  String expected=localeNP.getDisplayLanguage(xx.getLanguage(),dispLocale);  if (!xxname.equals(expected)) {    throw new RuntimeException("Locale fallback did not perform correctly. got: " + xxname + " expected: "+ expected);  }}  }
class C{  public BlackVolatilityTermStructure(final int settlementDays,final Calendar cal,final BusinessDayConvention bdc,final DayCounter dc){  super(settlementDays,cal,bdc,dc);}  }
class C{  public boolean isOp(){  return _prefix.indexOf('@') >= 0;}  }
class C{  public static void calculateTiledPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans){  calculateTiledPositions(allocated,total,children,offsets,spans,true);}  }
class C{  private void generateBothEventOffsets(TXState txState){  assert this.farSideEventOffset == -1;  this.farSideEventOffset=generateEventOffset(txState);  generateNearSideEventOffset(txState);}  }
class C{  protected void deleteSessionVariables(String sessionId,String... varNames){  if (sessionId.equals("")) {    return;  }  Key key=keyFactory.newKey(sessionId);  Transaction transaction=datastore.newTransaction();  try {    Entity stateEntity=transaction.get(key);    Entity.Builder builder=Entity.builder(stateEntity);    StringBuilder delNames=new StringBuilder();    for (    String varName : varNames) {      delNames.append(varName + " ");      builder=builder.remove(varName);    }    datastore.update(builder.build());  } catch (  NullPointerException e) {  } finally {    if (transaction.active()) {      transaction.rollback();    }  }}  }
class C{  public void movePointer(final long pointer){  try {    if (pointer > pdf_datafile.length()) {      LogWriter.writeLog("Attempting to access ref outside file");    } else {      pdf_datafile.seek(pointer);    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " moving pointer to  "+ pointer+ " in file.");  }}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  public long tryOptimisticRead(){  long s;  return (((s=state) & WBIT) == 0L) ? (s & SBITS) : 0L;}  }
class C{  public static Map<ComponentWrapper,CC> parseComponentConstraints(Map<ComponentWrapper,String> constrMap){  HashMap<ComponentWrapper,CC> flowConstrMap=new HashMap<ComponentWrapper,CC>();  for (  ComponentWrapper c : constrMap.keySet()) {    flowConstrMap.put(c,parseComponentConstraint(constrMap.get(c)));  }  return flowConstrMap;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void notifyGroupItemClicked(View view,Node node){  if (mOnItemClickListener != null) {    mOnItemClickListener.onGroupItemClicked(MultiLevelListView.this,view,node.getObject(),node.getItemInfo());  }}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateCharacterStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void render(GetDocumentResponse aResponse,BratAnnotatorModel aBratAnnotatorModel,int aAnnotationOffsetStart,JCas aJCas,boolean aIsGetDocument,AnnotationService aAnnotationService){  if (aBratAnnotatorModel.getPreferences().isScrollPage() && !aIsGetDocument) {    aBratAnnotatorModel.setSentenceAddress(BratAjaxCasUtil.getSentenceBeginAddress(aJCas,aBratAnnotatorModel.getSentenceAddress(),aAnnotationOffsetStart,aBratAnnotatorModel.getProject(),aBratAnnotatorModel.getDocument(),aBratAnnotatorModel.getPreferences().getWindowSize()));  }  render(aResponse,aBratAnnotatorModel,aJCas,aAnnotationService);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.260 -0500",hash_original_method="ACF50FF54717652ACCF5120218FC2A60",hash_generated_method="9C7671ACA56F81AE7FE116893866060D") public MalformedURLException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void cellToRect(int cellX,int cellY,int cellHSpan,int cellVSpan,Rect resultRect){  final int cellWidth=mCellWidth;  final int cellHeight=mCellHeight;  final int widthGap=mWidthGap;  final int heightGap=mHeightGap;  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  int width=cellHSpan * cellWidth + ((cellHSpan - 1) * widthGap);  int height=cellVSpan * cellHeight + ((cellVSpan - 1) * heightGap);  int x=hStartPadding + cellX * (cellWidth + widthGap);  int y=vStartPadding + cellY * (cellHeight + heightGap);  resultRect.set(x,y,x + width,y + height);}  }
class C{  public static File compress(String src,String dest,int maxWidth,int quality) throws IOException {  Bitmap bitmap=getCompressedBitmap(src,maxWidth);  if (src == null || dest == null || bitmap == null) {    return null;  }  if (DEBUG) {    L.v(TAG,"compress() maxWidth=" + maxWidth + " quality="+ quality);    L.v(TAG,"compress() src=" + src);    L.v(TAG,"compress() dest=" + dest);    L.v(TAG,"compress() bitmap=(" + bitmap.getWidth() + ","+ bitmap.getHeight()+ ")");  }  FileOutputStream fos=null;  try {    Bitmap.CompressFormat format=Bitmap.CompressFormat.JPEG;    if (src.toLowerCase().lastIndexOf("png") != -1) {      format=Bitmap.CompressFormat.PNG;    }    fos=new FileOutputStream(dest);    bitmap.compress(format,quality,fos);    bitmap.recycle();    return new File(dest);  }  finally {    fos.close();  }}  }
class C{  public XPathException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;  if (cause == null) {    throw new NullPointerException("cause == null");  }}  }
class C{  public MqttDevice mqttDevice(){  return mqttDevice;}  }
class C{  public OpenForReadResult openForRead(Uri uri) throws IOException {  return openForRead(uri,false);}  }
class C{  public boolean isIcon(){  return isIcon;}  }
class C{  @Override protected void initData(){}  }
class C{  private void validateBoolean(final FacesContext context,final UIComponent component,final Object value,Boolean condition){  if (!value.equals(condition)) {    String requiredMessage=((UIInput)component).getRequiredMessage();    throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,requiredMessage,requiredMessage));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void split(int[] points,Object[] pieces){  int point0, point1;  point0=0;  point1=points[0];  for (int x=0; x < pieces.length; x++) {    pieces[x]=new boolean[point1 - point0];    System.arraycopy(genome,point0,pieces[x],0,point1 - point0);    point0=point1;    if (x >= pieces.length - 2)     point1=genome.length; else     point1=points[x + 1];  }}  }
class C{  public String savePath(String where){  if (where == null)   return null;  String filename=sketchPath(where);  createPath(filename);  return filename;}  }
class C{  protected void receivePlayerInfo(Packet c){  int pindex=c.getIntValue(0);  IPlayer newPlayer=(IPlayer)c.getObject(1);  if (getPlayer(newPlayer.getId()) == null) {    getGame().addPlayer(pindex,newPlayer);  } else {    getGame().setPlayer(pindex,newPlayer);  }  PreferenceManager.getClientPreferences().setLastPlayerColor(newPlayer.getColorIndex());  PreferenceManager.getClientPreferences().setLastPlayerCategory(newPlayer.getCamoCategory());  PreferenceManager.getClientPreferences().setLastPlayerCamoName(newPlayer.getCamoFileName());}  }
class C{  public synchronized void updateEntityPositionLookup(Entity e,HashSet<Coords> oldPositions){  HashSet<Coords> newPositions=e.getOccupiedCoords();  if (newPositions.equals(oldPositions)) {    return;  }  if (oldPositions != null) {    for (    Coords pos : oldPositions) {      HashSet<Integer> posEntities=entityPosLookup.get(pos);      if (posEntities != null) {        posEntities.remove(e.getId());      }    }  }  for (  Coords pos : newPositions) {    HashSet<Integer> posEntities=entityPosLookup.get(pos);    if (posEntities == null) {      posEntities=new HashSet<Integer>();      posEntities.add(e.getId());      entityPosLookup.put(pos,posEntities);    } else {      posEntities.add(e.getId());    }  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.150 -0400",hash_original_method="A1F2254892A17B86B1F3E10C887237FA",hash_generated_method="94A5319F080493FC830D6AD463D5A71E") public static Collection<File> listFilesAndDirs(File directory,IOFileFilter fileFilter,IOFileFilter dirFilter){  validateListFilesParameters(directory,fileFilter);  IOFileFilter effFileFilter=setUpEffectiveFileFilter(fileFilter);  IOFileFilter effDirFilter=setUpEffectiveDirFilter(dirFilter);  Collection<File> files=new java.util.LinkedList<File>();  if (directory.isDirectory()) {    files.add(directory);  }  innerListFiles(files,directory,FileFilterUtils.or(effFileFilter,effDirFilter),true);  return files;}  }
class C{  public void addTrace(final Trace trace){  if (traceList.contains(trace))   return;  traceList.add(trace);  performAutoScale(false);}  }
class C{  public void visit(Pipeline.PipelineVisitor visitor,Set<PValue> visitedNodes){  transformStack.peekFirst().visit(visitor,visitedNodes);}  }
class C{  public void run(){  try {    if (sLogger.isActivated()) {      sLogger.info("Initiate a new 1-1 chat session as originating");    }    String localSetup=createSetupOffer();    if (sLogger.isActivated()) {      sLogger.debug("Local setup attribute is " + localSetup);    }    int localMsrpPort;    if ("active".equals(localSetup)) {      localMsrpPort=9;    } else {      localMsrpPort=getMsrpMgr().getLocalMsrpPort();    }    String ipAddress=getDialogPath().getSipStack().getLocalIpAddress();    String sdp=SdpUtils.buildChatSDP(ipAddress,localMsrpPort,getMsrpMgr().getLocalSocketProtocol(),getAcceptTypes(),getWrappedTypes(),localSetup,getMsrpMgr().getLocalMsrpPath(),getSdpDirection());    ChatMessage chatMessage=getFirstMessage();    if (chatMessage != null) {      String from=ChatUtils.ANONYMOUS_URI;      String to=ChatUtils.ANONYMOUS_URI;      String cpim;      String mimeType=chatMessage.getMimeType();      String networkMimeType=ChatUtils.apiMimeTypeToNetworkMimeType(mimeType);      String networkContent=chatMessage.getContent();      String msgId=chatMessage.getMessageId();      long timestampSent=chatMessage.getTimestampSent();      if (MimeType.GEOLOC_MESSAGE.equals(mimeType)) {        networkContent=ChatUtils.persistedGeolocContentToNetworkGeolocContent(networkContent,msgId,timestampSent);      }      if (mImdnManager.isRequestOneToOneDeliveryDisplayedReportsEnabled()) {        cpim=ChatUtils.buildCpimMessageWithImdn(from,to,msgId,networkContent,networkMimeType,timestampSent);      } else       if (mImdnManager.isDeliveryDeliveredReportsEnabled()) {        cpim=ChatUtils.buildCpimMessageWithoutDisplayedImdn(from,to,msgId,networkContent,networkMimeType,timestampSent);      } else {        cpim=ChatUtils.buildCpimMessage(from,to,networkContent,networkMimeType,timestampSent);      }      String multipart=Multipart.BOUNDARY_DELIMITER + BOUNDARY_TAG + SipUtils.CRLF+ "Content-Type: application/sdp"+ SipUtils.CRLF+ "Content-Length: "+ sdp.getBytes(UTF8).length+ SipUtils.CRLF+ SipUtils.CRLF+ sdp+ SipUtils.CRLF+ Multipart.BOUNDARY_DELIMITER+ BOUNDARY_TAG+ SipUtils.CRLF+ "Content-Type: "+ CpimMessage.MIME_TYPE+ SipUtils.CRLF+ "Content-Length: "+ cpim.getBytes(UTF8).length+ SipUtils.CRLF+ SipUtils.CRLF+ cpim+ SipUtils.CRLF+ Multipart.BOUNDARY_DELIMITER+ BOUNDARY_TAG+ Multipart.BOUNDARY_DELIMITER;      getDialogPath().setLocalContent(multipart);    } else {      getDialogPath().setLocalContent(sdp);    }    SipRequest invite=createInvite();    getAuthenticationAgent().setAuthorizationHeader(invite);    getDialogPath().setInvite(invite);    sendInvite(invite);  } catch (  InvalidArgumentException|ParseException e) {    sLogger.error("Unable to set authorization header for chat invite!",e);    handleError(new ChatError(ChatError.SESSION_INITIATION_FAILED,e));  }catch (  FileAccessException|PayloadException e) {    sLogger.error("Unable to send 200OK response!",e);    handleError(new ChatError(ChatError.SESSION_INITIATION_FAILED,e));  }catch (  NetworkException e) {    handleError(new ChatError(ChatError.SESSION_INITIATION_FAILED,e));  }catch (  RuntimeException e) {    sLogger.error("Failed initiating chat session!",e);    handleError(new ChatError(ChatError.SESSION_INITIATION_FAILED,e));  }}  }
class C{  public final void printPopulationForHumans(final EvolutionState state,final int log,final int verbosity){  printPopulationForHumans(state,log);}  }
class C{  public void reset(){  System.arraycopy(IV,0,cbcV,0,IV.length);  Arrays.fill(cbcNextV,(byte)0);  cipher.reset();}  }
class C{  public ClusterGroupEmptyException(String msg){  super(msg);}  }
class C{  private void calculateCategoryRates(){synchronized (this) {    if (ratesKnown)     return;  }  double scale=get_substitution_scale();  double temp=1.0 / scale;  for (int i=0; i < categoryRates.length; i++)   categoryRates[i]=ratesParameter.getParameterValue(i) * temp;  ratesKnown=true;}  }
class C{  public static void shuffle(double[] a){  int N=a.length;  for (int i=0; i < N; i++) {    int r=i + uniform(N - i);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public static void iterate(Enumeration enumer,Command command) throws Exception {  iterate(new EnumIterator(enumer),command);}  }
class C{  public boolean isA_CreateAsset(){  Object oo=get_Value(COLUMNNAME_A_CreateAsset);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void remove(Component comp){  if (comp == rootPane) {    super.remove(comp);  } else {    getContentPane().remove(comp);  }}  }
class C{  public void testBug22290() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createTable("testbug22290","(`id` int(11) NOT NULL default '1',`cost` decimal(10,2) NOT NULL,PRIMARY KEY  (`id`)) DEFAULT CHARSET=utf8","InnoDB");  assertEquals(this.stmt.executeUpdate("INSERT INTO testbug22290 (`id`,`cost`) VALUES (1,'1.00')"),1);  Connection configuredConn=null;  try {    Properties props=new Properties();    props.setProperty("sessionVariables","sql_mode='STRICT_TRANS_TABLES'");    configuredConn=getConnectionWithProps(props);    this.pstmt=configuredConn.prepareStatement("update testbug22290 set cost = cost + ? where id = 1");    this.pstmt.setBigDecimal(1,new BigDecimal("1.11"));    assertEquals(this.pstmt.executeUpdate(),1);    assertEquals(this.stmt.executeUpdate("UPDATE testbug22290 SET cost='1.00'"),1);    this.pstmt=((com.mysql.jdbc.Connection)configuredConn).clientPrepareStatement("update testbug22290 set cost = cost + ? where id = 1");    this.pstmt.setBigDecimal(1,new BigDecimal("1.11"));    assertEquals(this.pstmt.executeUpdate(),1);  }  finally {    if (configuredConn != null) {      configuredConn.close();    }  }}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    value=NULL_OBJECT;  }  for (int i=1; i < elementData.length; i=i + 2) {    if (elementData[i] == value) {      return true;    }  }  return false;}  }
class C{  public void close() throws IOException {  if (!closed) {    super.close();    closed=true;  }}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putInt(SAVED_ORIENTATION_LOCK,this.orientationLock);}  }
class C{  public boolean isCached(){  return true;}  }
class C{  public void testLogRetention() throws Exception {  File logDir=prepareLogDir("testLogRetention");  DiskLog log=new DiskLog();  log.setLogDir(logDir.getAbsolutePath());  log.setReadOnly(false);  log.setLogFileSize(3000);  log.setTimeoutMillis(10000);  log.setLogFileRetainMillis(2000);  log.prepare();  writeEventsToLog(log,200);  int fileCount=log.fileCount();  assertTrue("More than two logs generated",fileCount > 2);  Thread.sleep(4000);  int logEvents=(200 / fileCount) * 2;  writeEventsToLog(log,200,logEvents);  Thread.sleep(3000);  int fileCount2=log.fileCount();  assertTrue("Aging out should delete no files",fileCount2 > fileCount);  log.setActiveSeqno(log.getMaxSeqno());  writeEventsToLog(log,log.getMaxSeqno() + 1,logEvents);  Thread.sleep(3000);  int fileCount3=log.fileCount();  assertEquals("Aging out should result in 3 logs",3,fileCount3);  log.release();}  }
class C{  public static void WITH_XERROR_HANDLER(XErrorHandler handler){  XSync();  saved_error=null;  current_error_handler=handler;}  }
class C{  public void testVirtualDestinationsDinamicallyIncludedBehavior2() throws Exception {  startAllBrokers();  Destination dest=createDestination("global.test",true);  MessageConsumer clientB2=createConsumer("BrokerB",createDestination("Consumer.foo-bar.global.test",false));  Thread.sleep(2 * 1000);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  MessageIdList msgsB2=getConsumerMessages("BrokerB",clientB2);  msgsB2.waitForMessagesToArrive(MESSAGE_COUNT);  assertEquals(MESSAGE_COUNT,msgsB2.getMessageCount());}  }
class C{  private boolean isActivityAvailable(Intent intent){  PackageManager pm=mContext.getPackageManager();  List<ResolveInfo> list=pm.queryIntentActivities(intent,0);  int listSize=list.size();  for (int i=0; i < listSize; i++) {    ResolveInfo resolveInfo=list.get(i);    if ((resolveInfo.activityInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {      return true;    }  }  return false;}  }
class C{  public int next(){  if (_currentNode != NULL) {    int node=_currentNode;    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }  return END;}  }
class C{  public void writeObjectImpl(Object obj) throws IOException {  Class cl=obj.getClass();  try {    Method method=cl.getMethod("writeReplace",new Class[0]);    Object repl=method.invoke(obj,new Object[0]);    writeObject(repl);    return;  } catch (  Exception e) {  }  try {    writeMapBegin(cl.getName());    for (; cl != null; cl=cl.getSuperclass()) {      Field[] fields=cl.getDeclaredFields();      for (int i=0; i < fields.length; i++) {        Field field=fields[i];        if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))         continue;        field.setAccessible(true);        writeString(field.getName());        writeObject(field.get(obj));      }    }    writeMapEnd();  } catch (  IllegalAccessException e) {    throw new IOExceptionWrapper(e);  }}  }
class C{  public void autonomousPeriodic(){}  }
class C{  public static DataPolicy fromOrdinal(byte ordinal){  return VALUES[ordinal];}  }
class C{  public static double chiSquaredProbability(double x,double v){  if (x < 0.0 || v < 1.0) {    return 0.0;  }  return incompleteGammaComplement(v / 2.0,x / 2.0);}  }
class C{  @TargetApi(21) public static AlbumDetailsFragment newInstance(AlbumListFragment.ViewHolder vh){  AlbumDetailsFragment fragment=new AlbumDetailsFragment();  Bundle args=new Bundle();  args.putInt(BUNDLE_KEY_ALBUMID,vh.albumId);  args.putString(BUNDLE_KEY_ALBUMTITLE,vh.albumTitle);  args.putString(BUNDLE_KEY_ALBUMARTIST,vh.albumArtist);  args.putString(BUNDLE_KEY_ALBUMGENRE,vh.albumGenre);  args.putInt(BUNDLE_KEY_ALBUMYEAR,vh.albumYear);  args.putDouble(BUNDLE_KEY_ALBUMRATING,vh.albumRating);  if (Utils.isLollipopOrLater()) {    args.putString(POSTER_TRANS_NAME,vh.artView.getTransitionName());  }  fragment.setArguments(args);  return fragment;}  }
class C{  @SuppressWarnings("deprecation") public void sendResult(Intent intent){  SignatureTestLog.d("Send result");  int failedClassesNumber=0;  if (mBundle == null) {    throw new IllegalStateException("Invalid bundle");  }  for (  String testType : mBundle.keySet()) {    failedClassesNumber+=getFailedClassesNumber(testType);  }  TextView result=(TextView)findViewById(R.id.test_result);  if (failedClassesNumber == 0) {    SignatureTestLog.d("PASS");    result.setText(R.string.test_passed);  } else {    SignatureTestLog.d("FAIL: " + failedClassesNumber);    result.setText(getString(R.string.test_failed,failedClassesNumber));  }  mAdpater=new TestSigResultArrayAdapter(SignatureTestActivity.this,R.layout.rcs_api_signature_item,mFailedItems);  mListView.setAdapter(mAdpater);}  }
class C{  public static <T>Predicate<T> and(Predicate<? super T>... components){  components=components.clone();  int n=components.length;  for (int i=0; i < n; ++i) {    Predicate<? super T> p=components[i];    if (p == ALWAYS_FALSE) {      return alwaysFalse();    }    if (p == ALWAYS_TRUE) {      components[i]=components[n - 1];      --i;      --n;    }  }  if (n == 0) {    return alwaysTrue();  }  if (n != components.length) {    @SuppressWarnings("unchecked") Predicate<? super T>[] newComponents=new Predicate[n];    System.arraycopy(newComponents,0,components,0,n);    components=newComponents;  }  return new AndPredicate<T>(components);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node insertedNode;  doc=(Document)load("staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(0);{    boolean success=false;    try {      insertedNode=employeeNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isDataExist(String x_app_id,String content_type,String package_name,String class_name){  WapPushManDBHelper dbh=getDatabase(this);  SQLiteDatabase db=dbh.getReadableDatabase();  boolean ret=dbh.queryLastApp(db,x_app_id,content_type) != null;  db.close();  return ret;}  }
class C{  public void init(String prefix,java.net.URL url){  try {    java.io.InputStream in=url.openStream();    Properties props=new Properties();    props.load(in);    init(getLayers(prefix,props));  } catch (  java.net.MalformedURLException murle) {    logger.warning("LayerHandler.init(URL): " + url + " is not a valid URL");  }catch (  java.io.IOException e) {    logger.warning("LayerHandler.init(URL): Caught an IOException");  }}  }
class C{  private ArraySet(Collection<E> set){  this();  if (set != null) {    addAll(set);  }}  }
class C{  public static void configurePlugin(ReplicatorPlugin plugin,PluginContext context) throws ReplicatorException {  String pluginClassName=plugin.getClass().getName();  try {    plugin.configure(context);  } catch (  ReplicatorException e) {    throw new ReplicatorException("Unable to configure plugin: class name=" + pluginClassName + " message=["+ e.getMessage()+ "]",e);  }catch (  Throwable t) {    String message="Unable to configure plugin: class name=" + pluginClassName + " message=["+ t.getMessage()+ "]";    logger.error(message,t);    throw new ReplicatorException(message,t);  }  if (logger.isDebugEnabled())   logger.debug("Plug-in configured successfully: class name=" + pluginClassName);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String suffix="_new";  String inputFilesString=null;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  String[] imageFiles;  int numImages=0;  int i;  int col, row;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      suffix=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("double")) {        dataType=DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=DataType.INTEGER;      }    }  }  if (inputFilesString == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      inputHeader=imageFiles[i];      WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");      int rows=image.getNumberRows();      int cols=image.getNumberColumns();      double inputNoData=image.getNoDataValue();      outputHeader=inputHeader.replace(".dep",suffix + ".dep");      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,inputNoData);      double[] data=null;      if (dataType == DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            output.setValue(row,col,data[col]);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else       if (dataType == DataType.FLOAT) {        double outputNoData=-32768;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != inputNoData) {              output.setValue(row,col,data[col]);            } else {              output.setValue(row,col,outputNoData);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else       if (dataType == DataType.INTEGER) {        double outputNoData=-32768;        double z;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != inputNoData) {              z=Math.round(data[col]);              output.setValue(row,col,(int)z);            } else {              output.setValue(row,col,outputNoData);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      }      image.close();      output.close();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testHasAttributes1() throws Throwable {  Document doc;  Element element;  NodeList elementList;  boolean hasAttributes;  doc=(Document)load("staff",builder);  elementList=doc.getElementsByTagName("employee");  element=(Element)elementList.item(0);  hasAttributes=element.hasAttributes();  assertFalse("nodehasattributes01_1",hasAttributes);  elementList=doc.getElementsByTagName("address");  element=(Element)elementList.item(0);  hasAttributes=element.hasAttributes();  assertTrue("nodehasattributes01_2",hasAttributes);}  }
class C{  private Effect parseEffect(XmlPullParser parser,MediaItem mediaItem){  final String effectId=parser.getAttributeValue("",ATTR_ID);  final String type=parser.getAttributeValue("",ATTR_TYPE);  final long durationMs=Long.parseLong(parser.getAttributeValue("",ATTR_DURATION));  final long startTimeMs=Long.parseLong(parser.getAttributeValue("",ATTR_BEGIN_TIME));  final Effect effect;  if (EffectColor.class.getSimpleName().equals(type)) {    final int colorEffectType=Integer.parseInt(parser.getAttributeValue("",ATTR_COLOR_EFFECT_TYPE));    final int color;    if (colorEffectType == EffectColor.TYPE_COLOR || colorEffectType == EffectColor.TYPE_GRADIENT) {      color=Integer.parseInt(parser.getAttributeValue("",ATTR_COLOR_EFFECT_VALUE));    } else {      color=0;    }    effect=new EffectColor(mediaItem,effectId,startTimeMs,durationMs,colorEffectType,color);  } else   if (EffectKenBurns.class.getSimpleName().equals(type)) {    final Rect startRect=new Rect(Integer.parseInt(parser.getAttributeValue("",ATTR_START_RECT_LEFT)),Integer.parseInt(parser.getAttributeValue("",ATTR_START_RECT_TOP)),Integer.parseInt(parser.getAttributeValue("",ATTR_START_RECT_RIGHT)),Integer.parseInt(parser.getAttributeValue("",ATTR_START_RECT_BOTTOM)));    final Rect endRect=new Rect(Integer.parseInt(parser.getAttributeValue("",ATTR_END_RECT_LEFT)),Integer.parseInt(parser.getAttributeValue("",ATTR_END_RECT_TOP)),Integer.parseInt(parser.getAttributeValue("",ATTR_END_RECT_RIGHT)),Integer.parseInt(parser.getAttributeValue("",ATTR_END_RECT_BOTTOM)));    effect=new EffectKenBurns(mediaItem,effectId,startRect,endRect,startTimeMs,durationMs);  } else {    throw new IllegalArgumentException("Invalid effect type: " + type);  }  return effect;}  }
class C{  public boolean isModerated(){  return moderated;}  }
class C{  public Vector2D invert(){  return new Vector2D(-this.x,-this.y);}  }
class C{  public static UnitValue parseUnitValue(String s,boolean isHor){  return parseUnitValue(s,null,isHor);}  }
class C{  public void store(double value,Offset offset){}  }
class C{  public JPanelConfigPeripheral(){  initComponents();  printServices=PrintServiceLookup.lookupPrintServices(null,null);  String[] printernames=ReportUtils.getPrintNames();  jcboMachineDisplay.addActionListener(dirty);  jcboConnDisplay.addActionListener(dirty);  jcboSerialDisplay.addActionListener(dirty);  m_jtxtJPOSName.getDocument().addDocumentListener(dirty);  jCustomerScreen.addActionListener(dirty);  jcboMachinePrinter1.addActionListener(dirty);  jcboConnPrinter1.addActionListener(dirty);  jcboSerialPrinter1.addActionListener(dirty);  m_jtxtJPOSPrinter1.getDocument().addDocumentListener(dirty);  m_jtxtJPOSDrawer1.getDocument().addDocumentListener(dirty);  printer1printerparams=new ParametersPrinter(printernames);  printer1printerparams.addDirtyManager(dirty);  m_jPrinterParams1.add(printer1printerparams.getComponent(),"printer");  jcboMachinePrinter2.addActionListener(dirty);  jcboConnPrinter2.addActionListener(dirty);  jcboSerialPrinter2.addActionListener(dirty);  m_jtxtJPOSPrinter2.getDocument().addDocumentListener(dirty);  m_jtxtJPOSDrawer2.getDocument().addDocumentListener(dirty);  printer2printerparams=new ParametersPrinter(printernames);  printer2printerparams.addDirtyManager(dirty);  m_jPrinterParams2.add(printer2printerparams.getComponent(),"printer");  jcboMachinePrinter3.addActionListener(dirty);  jcboConnPrinter3.addActionListener(dirty);  jcboSerialPrinter3.addActionListener(dirty);  m_jtxtJPOSPrinter3.getDocument().addDocumentListener(dirty);  m_jtxtJPOSDrawer3.getDocument().addDocumentListener(dirty);  printer3printerparams=new ParametersPrinter(printernames);  printer3printerparams.addDirtyManager(dirty);  m_jPrinterParams3.add(printer3printerparams.getComponent(),"printer");  jcboMachinePrinter4.addActionListener(dirty);  jcboConnPrinter4.addActionListener(dirty);  jcboSerialPrinter4.addActionListener(dirty);  m_jtxtJPOSPrinter4.getDocument().addDocumentListener(dirty);  m_jtxtJPOSDrawer4.getDocument().addDocumentListener(dirty);  printer4printerparams=new ParametersPrinter(printernames);  printer4printerparams.addDirtyManager(dirty);  m_jPrinterParams4.add(printer4printerparams.getComponent(),"printer");  jcboMachinePrinter5.addActionListener(dirty);  jcboConnPrinter5.addActionListener(dirty);  jcboSerialPrinter5.addActionListener(dirty);  m_jtxtJPOSPrinter5.getDocument().addDocumentListener(dirty);  m_jtxtJPOSDrawer5.getDocument().addDocumentListener(dirty);  printer5printerparams=new ParametersPrinter(printernames);  printer5printerparams.addDirtyManager(dirty);  m_jPrinterParams5.add(printer5printerparams.getComponent(),"printer");  jcboMachinePrinter6.addActionListener(dirty);  jcboConnPrinter6.addActionListener(dirty);  jcboSerialPrinter6.addActionListener(dirty);  m_jtxtJPOSPrinter6.getDocument().addDocumentListener(dirty);  m_jtxtJPOSDrawer6.getDocument().addDocumentListener(dirty);  printer6printerparams=new ParametersPrinter(printernames);  printer6printerparams.addDirtyManager(dirty);  m_jPrinterParams6.add(printer6printerparams.getComponent(),"printer");  jcboMachineScale.addActionListener(dirty);  jcboSerialScale.addActionListener(dirty);  jcboMachineScanner.addActionListener(dirty);  jcboSerialScanner.addActionListener(dirty);  cboPrinters.addActionListener(dirty);  jcboMachinePrinter1.addItem("Not defined");  jcboMachinePrinter1.addItem("screen");  jcboMachinePrinter1.addItem("printer");  jcboMachinePrinter1.addItem("epson");  jcboMachinePrinter1.addItem("tmu220");  jcboMachinePrinter1.addItem("star");  jcboMachinePrinter1.addItem("ithaca");  jcboMachinePrinter1.addItem("surepos");  jcboMachinePrinter1.addItem("plain");  jcboMachinePrinter1.addItem("javapos");  jcboConnPrinter1.addItem("serial");  jcboConnPrinter1.addItem("file");  jcboConnPrinter1.addItem("raw");  jcboConnPrinter1.addItem("usb");  jcboMachinePrinter2.addItem("Not defined");  jcboMachinePrinter2.addItem("screen");  jcboMachinePrinter2.addItem("printer");  jcboMachinePrinter2.addItem("epson");  jcboMachinePrinter2.addItem("tmu220");  jcboMachinePrinter2.addItem("star");  jcboMachinePrinter2.addItem("ithaca");  jcboMachinePrinter2.addItem("surepos");  jcboMachinePrinter2.addItem("plain");  jcboMachinePrinter2.addItem("javapos");  jcboConnPrinter2.addItem("serial");  jcboConnPrinter2.addItem("file");  jcboConnPrinter2.addItem("raw");  jcboConnPrinter2.addItem("usb");  jcboMachinePrinter3.addItem("Not defined");  jcboMachinePrinter3.addItem("screen");  jcboMachinePrinter3.addItem("printer");  jcboMachinePrinter3.addItem("epson");  jcboMachinePrinter3.addItem("tmu220");  jcboMachinePrinter3.addItem("star");  jcboMachinePrinter3.addItem("ithaca");  jcboMachinePrinter3.addItem("surepos");  jcboMachinePrinter3.addItem("plain");  jcboMachinePrinter3.addItem("javapos");  jcboConnPrinter3.addItem("serial");  jcboConnPrinter3.addItem("file");  jcboConnPrinter3.addItem("raw");  jcboConnPrinter3.addItem("usb");  jcboMachinePrinter4.addItem("Not defined");  jcboMachinePrinter4.addItem("screen");  jcboMachinePrinter4.addItem("printer");  jcboMachinePrinter4.addItem("epson");  jcboMachinePrinter4.addItem("tmu220");  jcboMachinePrinter4.addItem("star");  jcboMachinePrinter4.addItem("ithaca");  jcboMachinePrinter4.addItem("surepos");  jcboMachinePrinter4.addItem("plain");  jcboMachinePrinter4.addItem("javapos");  jcboConnPrinter4.addItem("serial");  jcboConnPrinter4.addItem("file");  jcboConnPrinter4.addItem("raw");  jcboConnPrinter4.addItem("usb");  jcboMachinePrinter5.addItem("Not defined");  jcboMachinePrinter5.addItem("screen");  jcboMachinePrinter5.addItem("printer");  jcboMachinePrinter5.addItem("epson");  jcboMachinePrinter5.addItem("tmu220");  jcboMachinePrinter5.addItem("star");  jcboMachinePrinter5.addItem("ithaca");  jcboMachinePrinter5.addItem("surepos");  jcboMachinePrinter5.addItem("plain");  jcboMachinePrinter5.addItem("javapos");  jcboConnPrinter5.addItem("serial");  jcboConnPrinter5.addItem("file");  jcboConnPrinter5.addItem("raw");  jcboConnPrinter5.addItem("usb");  jcboMachinePrinter6.addItem("Not defined");  jcboMachinePrinter6.addItem("screen");  jcboMachinePrinter6.addItem("printer");  jcboMachinePrinter6.addItem("epson");  jcboMachinePrinter6.addItem("tmu220");  jcboMachinePrinter6.addItem("star");  jcboMachinePrinter6.addItem("ithaca");  jcboMachinePrinter6.addItem("surepos");  jcboMachinePrinter6.addItem("plain");  jcboMachinePrinter6.addItem("javapos");  jcboConnPrinter6.addItem("serial");  jcboConnPrinter6.addItem("file");  jcboConnPrinter6.addItem("raw");  jcboConnPrinter6.addItem("usb");  jcboMachineDisplay.addItem("Not defined");  jcboMachineDisplay.addItem("dual screen");  jcboMachineDisplay.addItem("window");  jcboMachineDisplay.addItem("javapos");  jcboMachineDisplay.addItem("epson");  jcboMachineDisplay.addItem("ld200");  jcboMachineDisplay.addItem("surepos");  jcboConnDisplay.addItem("serial");  jcboConnDisplay.addItem("file");  jcboConnDisplay.addItem("raw");  jcboConnDisplay.addItem("usb");  jcboSerialDisplay.addItem("COM1");  jcboSerialDisplay.addItem("COM2");  jcboSerialDisplay.addItem("COM3");  jcboSerialDisplay.addItem("COM4");  jcboSerialDisplay.addItem("COM5");  jcboSerialDisplay.addItem("COM6");  jcboSerialDisplay.addItem("COM7");  jcboSerialDisplay.addItem("COM8");  jcboSerialDisplay.addItem("COM9");  jcboSerialDisplay.addItem("COM10");  jcboSerialDisplay.addItem("COM11");  jcboSerialDisplay.addItem("COM12");  jcboSerialDisplay.addItem("LPT1");  jcboSerialDisplay.addItem("/dev/ttyS0");  jcboSerialDisplay.addItem("/dev/ttyS1");  jcboSerialDisplay.addItem("/dev/ttyS2");  jcboSerialDisplay.addItem("/dev/ttyS3");  jcboSerialDisplay.addItem("/dev/ttyS4");  jcboSerialDisplay.addItem("/dev/ttyS5");  jcboMachineScale.addItem("Not defined");  jcboMachineScale.addItem("screen");  jcboMachineScale.addItem("casiopd1");  jcboMachineScale.addItem("caspdii");  jcboMachineScale.addItem("dialog1");  jcboMachineScale.addItem("samsungesp");  jcboMachineScale.addItem("Adam Equipment");  jcboSerialScale.addItem("COM1");  jcboSerialScale.addItem("COM2");  jcboSerialScale.addItem("COM3");  jcboSerialScale.addItem("COM4");  jcboSerialScale.addItem("COM5");  jcboSerialScale.addItem("COM6");  jcboSerialScale.addItem("COM7");  jcboSerialScale.addItem("COM8");  jcboSerialScale.addItem("COM9");  jcboSerialScale.addItem("COM10");  jcboSerialScale.addItem("COM11");  jcboSerialScale.addItem("COM12");  jcboSerialScale.addItem("/dev/ttyS0");  jcboSerialScale.addItem("/dev/ttyS1");  jcboSerialScale.addItem("/dev/ttyS2");  jcboSerialScale.addItem("/dev/ttyS3");  jcboSerialScale.addItem("/dev/ttyS4");  jcboSerialScale.addItem("/dev/ttyS5");  jcboMachineScanner.addItem("Not defined");  jcboMachineScanner.addItem("scanpal2");  jcboSerialScanner.addItem("COM1");  jcboSerialScanner.addItem("COM2");  jcboSerialScanner.addItem("COM3");  jcboSerialScanner.addItem("COM4");  jcboSerialScanner.addItem("COM5");  jcboSerialScanner.addItem("COM6");  jcboSerialScanner.addItem("COM7");  jcboSerialScanner.addItem("COM8");  jcboSerialScanner.addItem("COM9");  jcboSerialScanner.addItem("COM10");  jcboSerialScanner.addItem("COM11");  jcboSerialScanner.addItem("COM12");  jcboSerialScanner.addItem("/dev/ttyS0");  jcboSerialScanner.addItem("/dev/ttyS1");  jcboSerialScanner.addItem("/dev/ttyS2");  jcboSerialScanner.addItem("/dev/ttyS3");  jcboSerialScanner.addItem("/dev/ttyS4");  jcboSerialScanner.addItem("/dev/ttyS5");  cboPrinters.addItem("(Default)");  cboPrinters.addItem("(Show dialog)");  for (  String name : printernames) {    cboPrinters.addItem(name);  }}  }
class C{  protected boolean isIgnorableEntity(String name){  return "amp".equals(name) || "apos".equals(name) || "gt".equals(name)|| "lt".equals(name)|| "quot".equals(name);}  }
class C{  public static InternalLocator startLocator(int port,File logFile,File stateFile,InternalLogWriter logger,InternalLogWriter securityLogger,InetAddress bindAddress,boolean startDistributedSystem,java.util.Properties dsProperties,boolean peerLocator,boolean enableServerLocator,String hostnameForClients,boolean loadSharedConfigFromDir) throws IOException {  if (!peerLocator && !enableServerLocator) {    throw new IllegalArgumentException(LocalizedStrings.InternalLocator_EITHER_PEER_LOCATOR_OR_SERVER_LOCATOR_MUST_BE_ENABLED.toLocalizedString());  }  System.setProperty(FORCE_LOCATOR_DM_TYPE,"true");  InternalLocator slocator=null;  boolean startedLocator=false;  try {    slocator=createLocator(port,logFile,stateFile,logger,securityLogger,bindAddress,hostnameForClients,dsProperties,startDistributedSystem);    if (enableServerLocator) {      slocator.handler.willHaveServerLocator=true;    }    try {      if (peerLocator) {        slocator.startPeerLocation(startDistributedSystem);      }      if (startDistributedSystem) {        try {          slocator.startDistributedSystem();        } catch (        RuntimeException e) {          slocator.stop();          throw e;        }        final InternalDistributedSystem ids=(InternalDistributedSystem)slocator.myDs;        if (ids != null) {          ids.getDistributionManager().addHostedLocators(ids.getDistributedMember(),getLocatorStrings(),slocator.isSharedConfigurationEnabled());        }      }    } catch (    LocatorCancelException e) {      slocator.stop();    }    InternalDistributedSystem sys=InternalDistributedSystem.getConnectedInstance();    if (sys != null) {      try {        slocator.startServerLocation(sys);      } catch (      RuntimeException e) {        slocator.stop();        throw e;      }    }    slocator.endStartLocator(null);    startedLocator=true;    return slocator;  }  finally {    System.getProperties().remove(FORCE_LOCATOR_DM_TYPE);    if (!startedLocator) {      removeLocator(slocator);    }  }}  }
class C{  String toString(int indentFactor,int indent) throws JSONException {  int len=length();  if (len == 0) {    return "[]";  }  int i;  StringBuffer sb=new StringBuffer("[");  if (len == 1) {    sb.append(JSONObject.valueToString(this.myArrayList.get(0),indentFactor,indent));  } else {    int newindent=indent + indentFactor;    sb.append('\n');    for (i=0; i < len; i+=1) {      if (i > 0) {        sb.append(",\n");      }      for (int j=0; j < newindent; j+=1) {        sb.append(' ');      }      sb.append(JSONObject.valueToString(this.myArrayList.get(i),indentFactor,newindent));    }    sb.append('\n');    for (i=0; i < indent; i+=1) {      sb.append(' ');    }  }  sb.append(']');  return sb.toString();}  }
class C{  protected void singleEnsemble(final double[] ensemble,final NumberVector vec){  double[] buf=new double[1];  for (int i=0; i < ensemble.length; i++) {    buf[0]=vec.doubleValue(i);    ensemble[i]=voting.combine(buf,1);    if (Double.isNaN(ensemble[i])) {      LOG.warning("NaN after combining: " + FormatUtil.format(buf) + " "+ voting.toString());    }  }  applyScaling(ensemble,scaling);}  }
class C{  public static String random(final int len){  return random(len,RANDOM);}  }
class C{  public static void fill(int[] array){  Scanner input=new Scanner(System.in);  for (int i=0; i < array.length; i++)   array[i]=input.nextInt();}  }
class C{  public Transformer newTransformer(){  return new TransformerImpl(this);}  }
class C{  private void syncNotes(RevWalk revWalk,String localRefName,String originRefName) throws Exception {  Ref originRef=repo.getRef(originRefName);  if (originRef == null) {    return;  }  RevCommit originCommit=revWalk.parseCommit(originRef.getObjectId());  Ref localRef=repo.getRef(localRefName);  if (localRef == null) {    Result result=JgitUtils.updateRef(repo,originCommit,null,localRefName).update();    if (!result.equals(Result.FAST_FORWARD)) {      throw new GitClientException("Invalid result initializing the local ref: " + result);    }    return;  }  RevCommit localCommit=revWalk.parseCommit(localRef.getObjectId());  RevCommit baseCommit=getMergeBase(revWalk,localCommit,originCommit);  if (localCommit.equals(originCommit)) {    return;  }  if (originCommit.equals(baseCommit)) {    pushCommentsAndReviews();  } else   if (localCommit.equals(baseCommit)) {    Result result=JgitUtils.updateRef(repo,originCommit,localCommit,localRefName).update();    if (!result.equals(Result.FAST_FORWARD) && !result.equals(Result.NO_CHANGE)) {      throw new GitClientException("Invalid result advancing the local ref: " + result);    }  } else {    mergeNotesAndPush(revWalk,localRefName,baseCommit,localCommit,originCommit);  }}  }
class C{  protected void openSoftKeyboard(EditText et){  InputMethodManager inputManager=(InputMethodManager)et.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  inputManager.showSoftInput(et,0);}  }
class C{  public boolean isAcceptable(List<GeneralName> names){  if (permitted_names == null) {    prepareNames();  }  boolean[] types_presented=new boolean[9];  boolean[] permitted_found=new boolean[9];  for (  GeneralName name : names) {    int type=name.getTag();    if (excluded_names[type] != null) {      for (int i=0; i < excluded_names[type].size(); i++) {        if (excluded_names[type].get(i).isAcceptable(name)) {          return false;        }      }    }    if ((permitted_names[type] != null) && (!permitted_found[type])) {      types_presented[type]=true;      for (int i=0; i < permitted_names[type].size(); i++) {        if (permitted_names[type].get(i).isAcceptable(name)) {          permitted_found[type]=true;        }      }    }  }  for (int type=0; type < 9; type++) {    if (types_presented[type] && !permitted_found[type]) {      return false;    }  }  return true;}  }
class C{  @ObjectiveCName("loadLastMessageDate:") @Deprecated public long loadLastMessageDate(Peer peer){  return getConversationVM(peer).getLastReadMessageDate();}  }
class C{  public PlayMusicManager(Context context){  mContext=context;  instance=this;}  }
class C{  public boolean hasAnnotation(final TAnnotableElement element){  return getAnnotation(element) != null;}  }
class C{  protected boolean isStopped(){  return this._isStopped;}  }
class C{  public RequestCreator transform(Transformation transformation){  data.transform(transformation);  return this;}  }
class C{  public Frame<V> init(final Frame<? extends V> src){  returnValue=src.returnValue;  System.arraycopy(src.values,0,values,0,values.length);  top=src.top;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  int numPoints=0;  int lineNum=0;  int nlines=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  resolution=Double.parseDouble(args[3]);  if (!args[4].equalsIgnoreCase("not specified")) {    maxDist=Double.parseDouble(args[4]);  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    if (maxDist < Double.POSITIVE_INFINITY) {      maxDist=maxDist * maxDist;    }    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      nlines=countLinesInFile(pointFiles[i]);      if (firstLineHeader) {        numPoints+=nlines - 1;      } else {        numPoints+=nlines;      }    }    KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));    nlines=0;    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        lineNum=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            double[] entry={y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          lineNum++;          nlines++;          progress=(int)(100d * nlines / numPoints);          updateProgress("Reading point data:",progress);        }        in.close();        br.close();      } catch (      java.io.IOException e) {        System.err.println("Error: " + e.getMessage());      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    west=minX - 0.5 * resolution;    north=maxY + 0.5 * resolution;    nrows=(int)(Math.ceil((north - minY) / resolution));    ncols=(int)(Math.ceil((maxX - west) / resolution));    south=north - nrows * resolution;    east=west + ncols * resolution;    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "spectrum.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();    WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");    double halfResolution=resolution / 2;    for (row=0; row < nrows; row++) {      for (col=0; col < ncols; col++) {        easting=(col * resolution) + (west + halfResolution);        northing=(north - halfResolution) - (row * resolution);        double[] entry={northing,easting};        results=pointsTree.nearestNeighbor(entry,1,true);        if (results.get(0).distance < maxDist) {          image.setValue(row,col,results.get(0).value);        } else {          image.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nrows - 1));      updateProgress("Interpolating point data:",progress);    }    image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    image.addMetadataEntry("Created on " + new Date());    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){  try {    java.lang.reflect.Constructor c=this.getClass().getConstructor(new Class[]{String.class});    return c.newInstance(new Object[]{reader.getValue()});  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  @HLEFunction(nid=0xF983B186,version=150,checkInsideInterrupt=true) public int __sceSasRevVON(int sasCore,int dry,int wet){  checkSasHandleGood(sasCore);  waveformEffectIsDryOn=(dry > 0);  waveformEffectIsWetOn=(wet > 0);  return 0;}  }
class C{  Node<K,V> findFirst(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  public static void openShareDialog(Context context,String title,@SuppressWarnings("SameParameterValue") String uri,String shareText,String shareSubject){  Intent share=new Intent(Intent.ACTION_SEND);  share.setType("text/plain");  share.putExtra(Intent.EXTRA_TEXT,shareText);  share.putExtra(Intent.EXTRA_SUBJECT,shareSubject);  if (!TextUtils.isEmpty(uri)) {    share.setType("image/*");    share.putExtra(Intent.EXTRA_STREAM,Uri.parse(uri));  }  context.startActivity(Intent.createChooser(share,title));}  }
class C{  public MethodInfo(ConstPool cp,String methodname,String desc){  this(cp);  accessFlags=0;  name=cp.addUtf8Info(methodname);  cachedName=methodname;  descriptor=constPool.addUtf8Info(desc);}  }
class C{  private void checkPageComplete(){  if (((RiskAnalysisWizard)getWizard()).getAllGefaehrdungsUmsetzungen().isEmpty()) {    setPageComplete(false);  } else {    setPageComplete(true);  }}  }
class C{  public static byte[] base64DecodeToArray(final String s){  if (s == null) {    return null;  }  int len=s.length();  if (len == 0) {    return new byte[0];  }  if (len % 4 != 0) {    throw new java.lang.IllegalArgumentException(s);  }  byte[] b=new byte[len / 4 * 3];  int i=0, j=0, e=0, c, tmp;  while (i < len) {    c=Base64.Base64Chars.indexOf(s.charAt(i++));    tmp=c << 18;    c=Base64.Base64Chars.indexOf(s.charAt(i++));    tmp|=c << 12;    c=Base64.Base64Chars.indexOf(s.charAt(i++));    if (c < 64) {      tmp|=c << 6;      c=Base64.Base64Chars.indexOf(s.charAt(i++));      if (c < 64) {        tmp|=c;      } else {        e=1;      }    } else {      e=2;      i++;    }    b[j + 2]=(byte)(tmp & 0xff);    tmp>>=8;    b[j + 1]=(byte)(tmp & 0xff);    tmp>>=8;    b[j + 0]=(byte)(tmp & 0xff);    j+=3;  }  if (e != 0) {    len=b.length - e;    byte[] copy=new byte[len];    System.arraycopy(b,0,copy,0,len);    return copy;  }  return b;}  }
class C{  void mergeWith(DirtyRegion dr){  int start=Math.min(fOffset,dr.fOffset);  int end=Math.max(fOffset + fLength,dr.fOffset + dr.fLength);  fOffset=start;  fLength=end - start;  fText=(dr.fText == null ? fText : (fText == null) ? dr.fText : fText + dr.fText);}  }
class C{  public void addReferences(Object... references){  getGraphReader().addReferencesByKeysAndValues(references);}  }
class C{  public @Test final void testSetUsers(){  Role role=new Role(TEST_ROLE);  User user=new User(TEST_ROLE);  assertThat(role.getUsers()).hasSize(0);  role.setUsers(new HashSet<>(Collections.singletonList(user)));  assertThat(role.getUsers()).hasSize(1);}  }
class C{  @Override public int showSaveDialog(Component parent){  m_DialogType=SAVER_DIALOG;  m_CurrentConverter=null;  initGUI(SAVER_DIALOG);  boolean acceptAll=isAcceptAllFileFilterUsed();  FileFilter currentFilter=getFileFilter();  File currentFile=getSelectedFile();  setAcceptAllFileFilterUsed(false);  setFileFilter(currentFilter);  setSelectedFile(currentFile);  int result=super.showSaveDialog(parent);  if (result == APPROVE_OPTION) {    if (getFileFilter() instanceof ExtensionFileFilter) {      String filename=getSelectedFile().getAbsolutePath();      String[] extensions=((ExtensionFileFilter)getFileFilter()).getExtensions();      if (!filename.endsWith(extensions[0])) {        filename+=extensions[0];        setSelectedFile(new File(filename));      }    }  }  currentFilter=getFileFilter();  currentFile=getSelectedFile();  setAcceptAllFileFilterUsed(acceptAll);  setFileFilter(currentFilter);  setSelectedFile(currentFile);  m_DialogType=UNHANDLED_DIALOG;  removePropertyChangeListener(m_Listener);  if ((result == APPROVE_OPTION) && (getOverwriteWarning()) && (getSelectedFile().exists())) {    int retVal=JOptionPane.showConfirmDialog(parent,"The file '" + getSelectedFile() + "' already exists - overwrite it?");    if (retVal == JOptionPane.OK_OPTION) {      result=APPROVE_OPTION;    } else     if (retVal == JOptionPane.NO_OPTION) {      result=showSaveDialog(parent);    } else {      result=CANCEL_OPTION;    }  }  if (result == APPROVE_OPTION) {    m_LastFilter=getFileFilter();    configureCurrentConverter(SAVER_DIALOG);    if (m_CheckBoxOptions.isSelected()) {      m_EditorResult=JFileChooser.CANCEL_OPTION;      m_Editor.setValue(m_CurrentConverter);      PropertyDialog pd;      if (PropertyDialog.getParentDialog(this) != null) {        pd=new PropertyDialog(PropertyDialog.getParentDialog(this),m_Editor);      } else {        pd=new PropertyDialog(PropertyDialog.getParentFrame(this),m_Editor);      }      pd.setVisible(true);      result=m_EditorResult;    }  }  return result;}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public static boolean isHexString(final String string){  Preconditions.checkNotNull(string,"Error: String argument can't be null");  final CharMatcher cm=CharMatcher.inRange('0','9').or(CharMatcher.inRange('a','z')).or(CharMatcher.inRange('A','F'));  for (int i=0; i < string.length(); i++) {    if (!cm.apply(string.charAt(i))) {      return false;    }  }  return string.length() != 0;}  }
class C{  private void ensureSortedByValue(){  if (currentSortOrder != SORT_ORDER_BY_VALUE) {    Collections.sort(samples,VALUE_COMPARATOR);    currentSortOrder=SORT_ORDER_BY_VALUE;  }}  }
class C{  private static void shutdownCheckedOutConnections(final ConnectionPool connectionPool){  log.debug("shutdownCheckedOutConnections: waiting for synchronization.");  final ArrayList connectionsToClose=new ArrayList();synchronized (REFERENCE_TO_CONNECTION_SOURCE) {    log.debug("shutdownCheckedOutConnections: collecting coonection list.");    final Iterator referenceIter=REFERENCE_TO_CONNECTION_SOURCE.keySet().iterator();    while (referenceIter.hasNext()) {      final Reference ref=(Reference)referenceIter.next();      final ConnectionSource source=(ConnectionSource)REFERENCE_TO_CONNECTION_SOURCE.get(ref);      if (source.connectionPool == connectionPool) {        referenceIter.remove();        final HttpConnection connection=(HttpConnection)ref.get();        if (connection != null) {          connectionsToClose.add(connection);        }      }    }  }  log.debug("shutdownCheckedOutConnections: connections to close count = " + connectionsToClose.size());  for (final Iterator i=connectionsToClose.iterator(); i.hasNext(); ) {    final HttpConnection connection=(HttpConnection)i.next();    connection.close();    connection.setHttpConnectionManager(null);    connection.releaseConnection();  }}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  writer.append("create dataflow ");  writer.append(dataFlowName);  if (schemas != null) {    for (    CreateSchemaClause clause : schemas) {      formatter.beginDataFlowSchema(writer);      clause.toEPL(writer);      writer.append(",");    }  }  if (operators != null) {    formatter.beginDataFlowOperator(writer);    for (    DataFlowOperator clause : operators) {      clause.toEPL(writer,formatter);    }  }}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public ScrambledZipfianGenerator(long min,long max,double _zipfianconstant){  _min=min;  _max=max;  _itemcount=_max - _min + 1;  if (_zipfianconstant == USED_ZIPFIAN_CONSTANT) {    gen=new ZipfianGenerator(0,ITEM_COUNT,_zipfianconstant,ZETAN);  } else {    gen=new ZipfianGenerator(0,ITEM_COUNT,_zipfianconstant);  }}  }
class C{  private boolean removeOldHistory(long now){  CadenceData historyElement=history.peek();  while (historyElement != null) {    if (now - historyElement.systemTime <= MAX_HISTORY_TIME_IN_MILLIS && history.size() < MAX_HISTORY_SIZE) {      return true;    }    history.removeFirst();    historyElement=history.peek();  }  return false;}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  public void addLink(Link link){  getLinks().add(link);}  }
class C{  @Override public boolean isUser(){  return true;}  }
class C{  public static boolean isEditing(){  return (sInstance == null) ? false : sInstance.mIsEditing;}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public TDoubleIntHashMap(int initialCapacity,float loadFactor,TDoubleHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public boolean contains(double value){  return contains(new Double(value).toString());}  }
class C{  public static void main(String[] args) throws Exception {  JdpTestCase client=new JdpOnTestCase(new ClientConnection());  client.run();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return Boolean.valueOf(node != null && node.isPlayable());}  }
class C{  protected void add(StatsCollectionEvent sce,int quantity){  for (int i=0; i < quantity; i++) {    listener.statsCollected(sce);  }}  }
class C{  public static void notifyServerCrashed(final ServerLocation location){  DistributedMember id=new InternalDistributedMember(location);  notifyListeners(id,false,EventType.CRASHED);}  }
class C{  public void testNothingAnalyzes() throws Exception {  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,indexAnalyzer);  Document doc=new Document();  doc.add(new Field("body"," ",fieldType));  doc.add(newTextField("id","id",Field.Store.YES));  iw.addDocument(doc);  doc=new Document();  doc.add(new Field("body","something",fieldType));  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher searcher=newSearcher(ir);  UnifiedHighlighter highlighter=new UnifiedHighlighter(searcher,indexAnalyzer);  int docID=searcher.search(new TermQuery(new Term("id","id")),1).scoreDocs[0].doc;  Query query=new TermQuery(new Term("body","highlighting"));  int[] docIDs=new int[1];  docIDs[0]=docID;  String snippets[]=highlighter.highlightFields(new String[]{"body"},query,docIDs,new int[]{2}).get("body");  assertEquals(1,snippets.length);  assertEquals(" ",snippets[0]);  ir.close();}  }
class C{  public boolean matches(Double d){  if (m_Double == null)   return false; else   if (d == null)   return false; else   return (m_Double.doubleValue() == d.doubleValue());}  }
class C{  public void printStackTrace(){  super.printStackTrace();  if (cause != null) {    cause.printStackTrace();  }}  }
class C{  public StateOrdered(){}  }
class C{  public void updateLong(String columnName,long x) throws SQLException {  updateLong(findColumn(columnName),x);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:13.438 -0500",hash_original_method="B58A648696301FB54C97CC1043045CA2",hash_generated_method="527ED651A3F1B697DF725283544E2845") protected void _connectAction_() throws IOException {  super._connectAction_();  _reader=new BufferedReader(new InputStreamReader(_input_,__DEFAULT_ENCODING));  __writer=new BufferedWriter(new OutputStreamWriter(_output_,__DEFAULT_ENCODING));  __getReply();  setState(AUTHORIZATION_STATE);}  }
class C{  public void testmodInverseNeg2(){  byte aBytes[]={-15,24,123,57,-15,24,123,57,-15,24,123,57};  byte mBytes[]={122,2,4,122,2,4};  byte rBytes[]={85,47,127,4,-128,45};  BigInteger aNumber=new BigInteger(aBytes);  BigInteger modulus=new BigInteger(mBytes);  BigInteger result=aNumber.modInverse(modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void destroy(){  this.shutdown.set(true);}  }
class C{  public boolean hasArgument(String arg){  return arguments.contains(arg);}  }
class C{  public KeywordObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(8).putLong(getLong(rowNumber)).array();}  }
class C{  public static VersionedObjectList execute(ExecutablePool pool,Region region,Map map,EventID eventId,boolean skipCallbacks,boolean isRetry,Object callbackArg){  PutAllOpImpl op=new PutAllOpImpl(region,map,eventId,((PoolImpl)pool).getPRSingleHopEnabled(),skipCallbacks,callbackArg);  op.initMessagePart();  if (isRetry) {    op.getMessage().setIsRetry();  }  return (VersionedObjectList)pool.execute(op);}  }
class C{  public boolean isDone(){  return index > arcSegs + lineSegs;}  }
class C{  public void addConfiguredLicenseMapper(Mapper mapper){  if (licenseMapper != null) {    throw new BuildException("Only one license mapper is allowed.");  }  this.licenseMapper=mapper.getImplementation();}  }
class C{  public boolean isEviction(){  return (this.opDetails & OP_DETAILS_EVICT) != 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.656 -0400",hash_original_method="04147093F1D1C98977C291FCABD47396",hash_generated_method="9B99B116A9728DAD06DCE6A26F06ADFF") public NotFileFilter(IOFileFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The filter must not be null");  }  this.filter=filter;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  sb.append("FIXED");  sb.append("}");  return sb.toString();}  }
class C{  public static void main(String[] args){  Options options=new Options();  OptionBuilder.withArgName("help");  OptionBuilder.withDescription("show this help message");  Option helpOpts=OptionBuilder.create("help");  OptionBuilder.withArgName("urls");  OptionBuilder.hasArg();  OptionBuilder.withDescription("the urls file to check");  Option urlOpts=OptionBuilder.create("urls");  OptionBuilder.withArgName("numThreads");  OptionBuilder.hasArgs();  OptionBuilder.withDescription("the number of threads to use");  Option numThreadOpts=OptionBuilder.create("numThreads");  options.addOption(helpOpts);  options.addOption(urlOpts);  options.addOption(numThreadOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("urls")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("ResolveUrls",options);      return;    }    String urls=line.getOptionValue("urls");    int numThreads=100;    String numThreadsStr=line.getOptionValue("numThreads");    if (numThreadsStr != null) {      numThreads=Integer.parseInt(numThreadsStr);    }    ResolveUrls resolve=new ResolveUrls(urls,numThreads);    resolve.resolveUrls();  } catch (  Exception e) {    LOG.error("ResolveUrls: " + StringUtils.stringifyException(e));  }}  }
class C{  public void testTask() throws Exception {  U.sleep(3000);  for (int i=0; i < REPEAT_CNT; i++) {    String arg=DICTIONARY[new Random(System.currentTimeMillis()).nextInt(DICTIONARY.length)];    generateFile(TOTAL_WORDS);    Long genLen=igfs.info(FILE).length();    IgniteBiTuple<Long,Integer> taskRes=igfs.execute(new Task(),new IgfsStringDelimiterRecordResolver(" "),Collections.singleton(FILE),arg);    assert F.eq(genLen,taskRes.getKey());    assert F.eq(TOTAL_WORDS,taskRes.getValue());  }}  }
class C{  @OnClick(R.id.alt_button) public void altButtonPressed(){  usernameInput.setText("");  passwordInput.setText("");  altView.setVisibility(View.GONE);  mainView.setVisibility(View.VISIBLE);  imm.showSoftInput(usernameInput,InputMethodManager.SHOW_IMPLICIT);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementremoveattribute.class,args);}  }
class C{  protected int engineGetMacLength(){  return this.md.getDigestLength();}  }
class C{  public ActiveEntityDecorator(DrawingCanvas inner,ElementCanvas<E> canvas,Model<E> m){  super(inner);  this.canvas=canvas;  this.model=m;}  }
class C{  public boolean removeChild(int node){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  @Delete public String remove(String json){  IACLService ACL=(IACLService)getContext().getAttributes().get(IACLService.class.getCanonicalName());  ACLRule rule;  try {    rule=jsonToRule(json);  } catch (  Exception e) {    log.error("Error parsing ACL rule: " + json,e);    return "{\"status\" : \"Failed! " + e.getMessage() + "\"}";  }  boolean exists=false;  Iterator<ACLRule> iter=ACL.getRules().iterator();  while (iter.hasNext()) {    ACLRule r=iter.next();    if (r.getId() == rule.getId()) {      exists=true;      break;    }  }  String status=null;  if (!exists) {    status="Failed! a rule with this ID doesn't exist.";    log.error(status);  } else {    ACL.removeRule(rule.getId());    status="Success! Rule deleted";  }  return ("{\"status\" : \"" + status + "\"}");}  }
class C{  public boolean evaluate(InternalContextAdapter context){  return true;}  }
class C{  Resource(ResourceId resourceId,Object r){  this.r=r;  this.resourceId=resourceId;  this.serializable=r instanceof Serializable;  this.className=r.getClass().getName();}  }
class C{  private void startSecondary() throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName(IGFS_SECONDARY);  igfsCfg.setBlockSize(512);  igfsCfg.setDefaultMode(PRIMARY);  igfsCfg.setIpcEndpointConfiguration(SECONDARY_REST_CFG);  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  dataCacheCfg.setBackups(0);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setNearConfiguration(null);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("grid-secondary");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  Ignite g=G.start(cfg);  secondaryFs=(IgfsImpl)g.fileSystem(IGFS_SECONDARY);}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new OnePlayerRoomDoor(getClass(ctx));}  }
class C{  public boolean logout() throws LoginException {  if (subject.isReadOnly()) {    cleanState();    throw new LoginException("Subject is read-only");  }  Set<Principal> principals=subject.getPrincipals();  principals.remove(ldapPrincipal);  principals.remove(userPrincipal);  if (authzIdentity != null) {    principals.remove(authzPrincipal);  }  cleanState();  succeeded=false;  commitSucceeded=false;  ldapPrincipal=null;  userPrincipal=null;  authzPrincipal=null;  if (debug) {    System.out.println("\t\t[LdapLoginModule] logged out Subject");  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String q=getString(stack);  CaptureDevice capDev=getCapDev(stack);  if (capDev != null)   capDev.setAuxCaptureDeviceName(q);  return null;}  }
class C{  private SimMap readMap(){  SimMap simMap;  Settings settings=new Settings(MAP_BASE_MOVEMENT_NS);  WKTMapReader r=new WKTMapReader(true);  if (cachedMap == null) {    cachedMapFiles=new ArrayList<String>();  } else {    SimMap cached=checkCache(settings);    if (cached != null) {      nrofMapFilesRead=cachedMapFiles.size();      return cached;    } else {      cachedMapFiles=new ArrayList<String>();      cachedMap=null;    }  }  try {    int nrofMapFiles=settings.getInt(NROF_FILES_S);    for (int i=1; i <= nrofMapFiles; i++) {      String pathFile=settings.getSetting(FILE_S + i);      cachedMapFiles.add(pathFile);      r.addPaths(new File(pathFile),i);    }    nrofMapFilesRead=nrofMapFiles;  } catch (  IOException e) {    throw new SimError(e.toString(),e);  }  simMap=r.getMap();  checkMapConnectedness(simMap.getNodes());  simMap.mirror();  Coord offset=simMap.getMinBound().clone();  simMap.translate(-offset.getX(),-offset.getY());  checkCoordValidity(simMap.getNodes());  cachedMap=simMap;  return simMap;}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(cksumType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putOctetString(checksum);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public Color greenf(float green){  return rgba(red(),colorConvert(green),blue(),alpha());}  }
class C{  public boolean isParameter(){  return param;}  }
class C{  @Override public int compareTo(LongArrayListWritable message){  if (message == null) {    return 1;  }  if (this.size() < message.size()) {    return -1;  }  if (this.size() > message.size()) {    return 1;  }  for (int i=0; i < this.size(); i++) {    if (this.get(i) == null && message.get(i) == null) {      continue;    }    if (this.get(i) == null) {      return -1;    }    if (message.get(i) == null) {      return 1;    }    if (this.get(i).get() < message.get(i).get()) {      return -1;    }    if (this.get(i).get() > message.get(i).get()) {      return 1;    }  }  return 0;}  }
class C{  public void log(Level level,String msg){  log(level,null,null,msg,null);}  }
class C{  private static char CallCharMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallCharMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Char,false);    return Reflection.unwrapChar(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void queryEqualsCount(String type,int index,String value,int visibilityScope,CloudResponse<Integer> response){  try {    queryImpl(type,value,index,0,0,visibilityScope,1,0,false,true,false,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  void notifyPeerMapUpdated(){synchronized (activationLock) {synchronized (mainLock) {      if (!isReadyToShutdown() && blockerThread == null) {        AccessController.doPrivileged((PrivilegedAction<Void>)null);      } else {        mainLock.notifyAll();        timeoutPassed=false;      }    }  }}  }
class C{  @ReactMethod public void canShow(Promise promise){  promise.resolve(AppInviteDialog.canShow());}  }
class C{  private static void CallVoidMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallVoidMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Void,false);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public Days plus(Days days){  if (days == null) {    return this;  }  return plus(days.getValue());}  }
class C{  private Map<String,ExecutableElement> makeSetterMap(Map<ExecutableElement,String> getterToPropertyName){  Map<String,TypeMirror> getterMap=new TreeMap<String,TypeMirror>();  for (  Map.Entry<ExecutableElement,String> entry : getterToPropertyName.entrySet()) {    getterMap.put(entry.getValue(),entry.getKey().getReturnType());  }  Map<String,ExecutableElement> noPrefixMap=Maps.newLinkedHashMap();  Map<String,ExecutableElement> prefixMap=Maps.newLinkedHashMap();  boolean ok=true;  for (  ExecutableElement setter : setters) {    Map<String,ExecutableElement> map=noPrefixMap;    String name=setter.getSimpleName().toString();    TypeMirror type=getterMap.get(name);    if (type == null && name.startsWith("set")) {      name=Introspector.decapitalize(name.substring(3));      type=getterMap.get(name);      map=prefixMap;    }    if (type == null) {      errorReporter.reportError("Method does not correspond to a property of " + autoValueClass,setter);      ok=false;    } else {      VariableElement parameter=Iterables.getOnlyElement(setter.getParameters());      if (TYPE_EQUIVALENCE.equivalent(type,parameter.asType())) {        getterMap.remove(name);        map.put(name,setter);      } else {        errorReporter.reportError("Parameter type should be " + type,parameter);        ok=false;      }    }  }  if (!ok) {    return null;  }  boolean prefixing=!prefixMap.isEmpty();  if (prefixing && !noPrefixMap.isEmpty()) {    errorReporter.reportError("If any setter methods use the setFoo convention then all must",noPrefixMap.values().iterator().next());    return null;  }  if (!getterMap.isEmpty()) {    for (    Map.Entry<String,TypeMirror> entry : getterMap.entrySet()) {      String setterName=prefixing ? prefixWithSet(entry.getKey()) : entry.getKey();      String error=String.format("Expected a method with this signature: %s%s %s(%s)",builderTypeElement,TypeSimplifier.actualTypeParametersString(builderTypeElement),setterName,entry.getValue());      errorReporter.reportError(error,builderTypeElement);    }    return null;  }  return noPrefixMap.isEmpty() ? prefixMap : noPrefixMap;}  }
class C{  public static double toMegaByte(long bytes){  return (bytes / (double)(1024 * 1024));}  }
class C{  @Override protected boolean takesPartInCombat(){  return false;}  }
class C{  public void parseSerializedTotem(final String serialized){  if (CURSOR_MARK_START.equals(serialized)) {    values=null;    return;  }  final SortField[] sortFields=sortSpec.getSort().getSort();  final List<SchemaField> schemaFields=sortSpec.getSchemaFields();  List<Object> pieces=null;  try {    final byte[] rawData=Base64.base64ToByteArray(serialized);    ByteArrayInputStream in=new ByteArrayInputStream(rawData);    try {      pieces=(List<Object>)new JavaBinCodec().unmarshal(in);      boolean b=false;      for (      Object o : pieces) {        if (o instanceof BytesRefBuilder || o instanceof BytesRef || o instanceof String) {          b=true;          break;        }      }      if (b) {        in.reset();        pieces=(List<Object>)new JavaBinCodec().unmarshal(in);      }    }  finally {      in.close();    }  } catch (  Exception ex) {    throw new SolrException(ErrorCode.BAD_REQUEST,"Unable to parse '" + CURSOR_MARK_PARAM + "' after totem: "+ "value must either be '"+ CURSOR_MARK_START+ "' or the "+ "'"+ CURSOR_MARK_NEXT+ "' returned by a previous search: "+ serialized,ex);  }  assert null != pieces : "pieces wasn't parsed?";  if (sortFields.length != pieces.size()) {    throw new SolrException(ErrorCode.BAD_REQUEST,CURSOR_MARK_PARAM + " does not work with current sort (wrong size): " + serialized);  }  this.values=new ArrayList<>(sortFields.length);  final BytesRef tmpBytes=new BytesRef();  for (int i=0; i < sortFields.length; i++) {    SortField curSort=sortFields[i];    SchemaField curField=schemaFields.get(i);    Object rawValue=pieces.get(i);    if (null != curField) {      FieldType curType=curField.getType();      rawValue=curType.unmarshalSortValue(rawValue);    }    this.values.add(rawValue);  }}  }
class C{  public BasicTextImage(TerminalSize size,TextCharacter initialContent){  this(size,new TextCharacter[0][],initialContent);}  }
class C{  private boolean isMaintainAspectRatio(){  return preferences.getBoolean("SplashMaintainAspectRatio",false);}  }
class C{  public void remove(int index){  if (index >= size) {    throwException(index);  }  int toMove=size - index - 1;  if (toMove > 0) {    System.arraycopy(data,index + 1,data,index,toMove);  }  --size;}  }
class C{  public MarkedScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public URLRasterLocation(double latitude,double longitude,String name,String iconURL){  super(latitude,longitude,name,getIconRaster(latitude,longitude,iconURL));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  @Override @Direct public void copyTo(String relPath,Result<Boolean> result,WriteOption... options){  _root.copyTo(_path,toAbsolute(relPath),result,options);}  }
class C{  public TestDelegateBridge(final GameData data,final PlayerID id,final IDisplay dummyDisplay){  m_data=data;  m_id=id;  m_dummyDisplay=dummyDisplay;  final History history=new History(m_data);  final HistoryWriter historyWriter=new HistoryWriter(history);  historyWriter.startNextStep("","",PlayerID.NULL_PLAYERID,"");  final IServerMessenger messenger=mock(IServerMessenger.class);  try {    when(messenger.getLocalNode()).thenReturn(new Node("dummy",InetAddress.getLocalHost(),0));  } catch (  final UnknownHostException e) {    ClientLogger.logQuietly(e);  }  when(messenger.isServer()).thenReturn(true);  final ChannelMessenger channelMessenger=new ChannelMessenger(new UnifiedMessenger(messenger));  m_historyWriter=new DelegateHistoryWriter(channelMessenger);}  }
class C{  void open(File dbfile,int openFlags) throws Exception {  this.dbFile=dbfile;  this.openFlags=openFlags;  this.mydb=SQLiteDatabase.openDatabase(dbfile.getAbsolutePath(),null,openFlags);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  getAstStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__STRUCTURAL_TYPE:setStructuralType((TStructuralType)newValue);return;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();getGenStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();getPostponedSubstitutions().addAll((Collection<? extends TypeVariableMapping>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void reset(){  digest.reset();  messageLength=0;  if (mBuf != null) {    clearBlock(mBuf);  }  if (recoveredMessage != null) {    clearBlock(recoveredMessage);    recoveredMessage=null;  }  fullMessage=false;  if (preSig != null) {    preSig=null;    clearBlock(preBlock);    preBlock=null;  }}  }
class C{  public static BorderPane borderPane(Node top,Node center,Node bottom,Node left,Node right){  BorderPane bp=new BorderPane();  bp.setTop(top);  bp.setCenter(center);  bp.setBottom(bottom);  bp.setLeft(left);  bp.setRight(right);  return bp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.412 -0500",hash_original_method="8F5CD7EECBE2A2BA521BCB26962910D6",hash_generated_method="E466FD376B9C60C0AEA7E8D5D7A10988") public static boolean compareLoosely(String a,String b){  int ia, ib;  int matched;  int numNonDialableCharsInA=0;  int numNonDialableCharsInB=0;  if (a == null || b == null)   return a == b;  if (a.length() == 0 || b.length() == 0) {    return false;  }  ia=indexOfLastNetworkChar(a);  ib=indexOfLastNetworkChar(b);  matched=0;  while (ia >= 0 && ib >= 0) {    char ca, cb;    boolean skipCmp=false;    ca=a.charAt(ia);    if (!isDialable(ca)) {      ia--;      skipCmp=true;      numNonDialableCharsInA++;    }    cb=b.charAt(ib);    if (!isDialable(cb)) {      ib--;      skipCmp=true;      numNonDialableCharsInB++;    }    if (!skipCmp) {      if (cb != ca && ca != WILD && cb != WILD) {        break;      }      ia--;      ib--;      matched++;    }  }  if (matched < MIN_MATCH) {    int effectiveALen=a.length() - numNonDialableCharsInA;    int effectiveBLen=b.length() - numNonDialableCharsInB;    if (effectiveALen == effectiveBLen && effectiveALen == matched) {      return true;    }    return false;  }  if (matched >= MIN_MATCH && (ia < 0 || ib < 0)) {    return true;  }  if (matchIntlPrefix(a,ia + 1) && matchIntlPrefix(b,ib + 1)) {    return true;  }  if (matchTrunkPrefix(a,ia + 1) && matchIntlPrefixAndCC(b,ib + 1)) {    return true;  }  if (matchTrunkPrefix(b,ib + 1) && matchIntlPrefixAndCC(a,ia + 1)) {    return true;  }  return false;}  }
class C{  public <T extends DataObject>void insertInBatches(List<T> records,int partitionSize,DbClient dbClient,String type){  List<List<T>> volume_partitions=Lists.partition(records,partitionSize);  for (  List<T> partition : volume_partitions) {    try {      dbClient.createObject(partition);      _log.info("{} {} Records inserted to DB",partition.size(),type);    } catch (    DatabaseException e) {      _log.error("Error inserting {} records into the database:",type,e);    }  }}  }
class C{  @Override public void displayCardOffer(Offer offer){  this.acceptedOffers.add(offer);  if (offer.getType() == PlanConstants.DATA) {    dataAdapter.setCardOffer(offer);  }}  }
class C{  @Override public void onTokenRefresh(){  String refreshedToken=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"Refreshed token: " + refreshedToken);  sendRegistrationToServer(refreshedToken);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  @Override public void putAll(Map<? extends Integer,? extends Float> map){  Iterator<? extends Entry<? extends Integer,? extends Float>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Integer,? extends Float> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  private Base64(){}  }
class C{  public synchronized void insertChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException {  if (chunkIdx < 0 || chunkAuthTag == null || chunkAuthTag.length != CHUNK_AUTH_TAG_LENGTH) {    throw new FileEncryptionException("Invalid auth tag parameter given!");  } else {    if (atagList.size() <= chunkIdx) {      atagList.ensureCapacity(chunkIdx + 1);      padTo(atagList,chunkIdx);      atagList.add(chunkIdx,Arrays.copyOf(chunkAuthTag,CHUNK_AUTH_TAG_LENGTH));    } else {      atagList.set(chunkIdx,Arrays.copyOf(chunkAuthTag,CHUNK_AUTH_TAG_LENGTH));    }  }}  }
class C{  public static void promptEnterKey(final boolean isPromptEnabled){  if (isPromptEnabled) {    log.info("Press \"ENTER\" to continue...");    KEYBOARD_SCANNER.nextLine();  }}  }
class C{  public boolean userExists(String username){  return username != null && userEntityRepository.findByUsername(username) != null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double maxValue;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String whatToInterpolate="";  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  whatToInterpolate=args[2].toLowerCase();  returnNumberToInterpolate=args[3].toLowerCase();  resolution=Double.parseDouble(args[4]);  double circleCircumscrbingGridCell=Math.sqrt(2) * resolution / 2.0;  excludeNeverClassified=Boolean.parseBoolean(args[5]);  excludeUnclassified=Boolean.parseBoolean(args[6]);  excludeBareGround=Boolean.parseBoolean(args[7]);  excludeLowVegetation=Boolean.parseBoolean(args[8]);  excludeMediumVegetation=Boolean.parseBoolean(args[9]);  excludeHighVegetation=Boolean.parseBoolean(args[10]);  excludeBuilding=Boolean.parseBoolean(args[11]);  excludeLowPoint=Boolean.parseBoolean(args[12]);  excludeModelKeyPoint=Boolean.parseBoolean(args[13]);  excludeWater=Boolean.parseBoolean(args[14]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    PointRecColours pointColours;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      if (!whatToInterpolate.equals("rgb data")) {        str1="Data Scale:\tcontinuous";      } else {        str1="Data Scale:\trgb";      }      out.println(str1);      if (whatToInterpolate.equals("rgb data")) {        str1="Preferred Palette:\t" + "rgb.pal";      } else       if (whatToInterpolate.equals("intensity")) {        str1="Preferred Palette:\t" + "grey.pal";      } else {        str1="Preferred Palette:\t" + "spectrum.pal";      }      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      double halfResolution=resolution / 2;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          results=pointsTree.neighborsWithinRange(entry,circleCircumscrbingGridCell);          if (!results.isEmpty()) {            maxValue=Float.NEGATIVE_INFINITY;            for (i=0; i < results.size(); i++) {              z=results.get(i).value;              if (z > maxValue) {                maxValue=z;              }              ;            }            image.setValue(row,col,maxValue);          } else {            image.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Interpolating point data:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public List<Protos.Key> serializeKeyChainGroupToProtobuf(){  keyChainGroupLock.lock();  try {    return keyChainGroup.serializeToProtobuf();  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  private static Object js_push(Context cx,Scriptable thisObj,Object[] args){  if (thisObj instanceof NativeArray) {    NativeArray na=(NativeArray)thisObj;    if (na.denseOnly && na.ensureCapacity((int)na.length + args.length)) {      for (int i=0; i < args.length; i++) {        na.dense[(int)na.length++]=args[i];      }      return ScriptRuntime.wrapNumber(na.length);    }  }  long length=getLengthProperty(cx,thisObj);  for (int i=0; i < args.length; i++) {    setElem(cx,thisObj,length + i,args[i]);  }  length+=args.length;  Object lengthObj=setLengthProperty(cx,thisObj,length);  if (cx.getLanguageVersion() == Context.VERSION_1_2)   return args.length == 0 ? Undefined.instance : args[args.length - 1]; else   return lengthObj;}  }
class C{  public List<Employee> findByDepartmentDesignationAndBoundary(final Long deptId,final Long desigId,final Long boundaryId){  final Set<Long> bndIds=new HashSet<Long>();  final List<Boundary> boundaries=boundaryService.findActiveChildrenWithParent(boundaryId);  boundaries.forEach(null);  return employeeRepository.findByDepartmentDesignationAndBoundary(deptId,desigId,bndIds);}  }
class C{  @Override public void checkClientTrusted(X509Certificate[] x509Certificates,String string) throws CertificateException {}  }
class C{  public TungstenProperties createDoubleQueueRuntime(int queueSize,int blockSize,int blockInterval) throws Exception {  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,"test");  builder.setRole("master");  builder.addPipeline("master","stage","q1,q2");  builder.addStage("stage","q-extract","q-apply",null);  builder.addProperty("stage","stage","blockCommitRowCount",new Integer(blockSize).toString());  builder.addProperty("stage","stage","blockCommitInterval",new Integer(blockInterval).toString());  builder.addComponent("extractor","q-extract",InMemoryQueueAdapter.class);  builder.addProperty("extractor","q-extract","storeName","q1");  builder.addComponent("applier","q-apply",InMemoryQueueAdapter.class);  builder.addProperty("applier","q-apply","storeName","q2");  builder.addComponent("store","q1",InMemoryQueueStore.class);  builder.addProperty("store","q1","maxSize",new Integer(queueSize).toString());  builder.addComponent("store","q2",InMemoryQueueStore.class);  builder.addProperty("store","q2","maxSize",new Integer(queueSize).toString());  return builder.getConfig();}  }
class C{  public void clear(){  map.clear();}  }
class C{  protected static void connectDistributedSystem(){  dlstSystem=(new DistributedLockServiceDUnitTest()).getSystem();}  }
class C{  public boolean isIndexReady(){  return mIndexReady || !mIndexPopulateAtStartupEnabled;}  }
class C{  @Override public boolean checkIfMaster() throws QueryException {  proxy.lock.lock();  try {    SingleExecutionResult executionResult=new SingleExecutionResult(null,0,true,false);    executeQuery(this.isMasterConnection(),executionResult,"show global variables like 'innodb_read_only'",ResultSet.TYPE_FORWARD_ONLY);    MariaSelectResultSet queryResult=executionResult.getResultSet();    if (queryResult != null) {      queryResult.next();      this.masterConnection="OFF".equals(queryResult.getString(2));    } else {      this.masterConnection=false;    }    this.readOnly=!this.masterConnection;    return this.masterConnection;  } catch (  SQLException sqle) {    throw new QueryException("could not check the 'innodb_read_only' variable status on " + this.getHostAddress() + " : "+ sqle.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),sqle);  } finally {    proxy.lock.unlock();  }}  }
class C{  private void parseVia(Via v) throws ParseException {  lexer.match(TokenTypes.ID);  Token protocolName=lexer.getNextToken();  this.lexer.SPorHT();  lexer.match('/');  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  this.lexer.SPorHT();  Token protocolVersion=lexer.getNextToken();  this.lexer.SPorHT();  lexer.match('/');  this.lexer.SPorHT();  lexer.match(TokenTypes.ID);  this.lexer.SPorHT();  Token transport=lexer.getNextToken();  this.lexer.SPorHT();  Protocol protocol=new Protocol();  protocol.setProtocolName(protocolName.getTokenValue());  protocol.setProtocolVersion(protocolVersion.getTokenValue());  protocol.setTransport(transport.getTokenValue());  v.setSentProtocol(protocol);  HostNameParser hnp=new HostNameParser(this.getLexer());  HostPort hostPort=hnp.hostPort(true);  v.setSentBy(hostPort);  this.lexer.SPorHT();  while (lexer.lookAhead(0) == ';') {    this.lexer.consume(1);    this.lexer.SPorHT();    NameValue nameValue=this.nameValue();    String name=nameValue.getName();    if (name.equals(Via.BRANCH)) {      String branchId=(String)nameValue.getValueAsObject();      if (branchId == null)       throw new ParseException("null branch Id",lexer.getPtr());    }    v.setParameter(nameValue);    this.lexer.SPorHT();  }  if (lexer.lookAhead(0) == '(') {    this.lexer.selectLexer("charLexer");    lexer.consume(1);    StringBuffer comment=new StringBuffer();    while (true) {      char ch=lexer.lookAhead(0);      if (ch == ')') {        lexer.consume(1);        break;      } else       if (ch == '\\') {        Token tok=lexer.getNextToken();        comment.append(tok.getTokenValue());        lexer.consume(1);        tok=lexer.getNextToken();        comment.append(tok.getTokenValue());        lexer.consume(1);      } else       if (ch == '\n') {        break;      } else {        comment.append(ch);        lexer.consume(1);      }    }    v.setComment(comment.toString());  }}  }
class C{  @Override public double conf(double totalExampleWeight,double delta){  double inverseNormal=inverseNormal(1 - delta / 4);  return inverseNormal / Math.sqrt(totalExampleWeight) + Math.pow(inverseNormal,2.0d) / (4.0d * totalExampleWeight);}  }
class C{  public static Map groupBy(Object[] self,Object... closures){  return groupBy((Iterable)Arrays.asList(self),closures);}  }
class C{  Node(Object item,boolean isData){  UNSAFE.putObject(this,itemOffset,item);  this.isData=isData;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName() == MouseDelegator.ActiveModeProperty) {    String mmID=((MapMouseMode)evt.getNewValue()).getID();    if (Debug.debugging("editortool")) {      Debug.output("DET.propertyChange: mousemode changed to " + mmID);    }    if (!mmID.equals(((EditorLayer)getLayer()).getMouseMode().getID())) {      totalReset();    }    drawingTool.showPalette();  }}  }
class C{  public void beforeProcessControllerEvent(@Observes BeforeControllerEvent event){  if (usingCookies()) {    final Cookie[] cookies=request.getCookies();    if (null != cookies) {      for (      Cookie cookie : cookies) {        if (cookie.getName().equals(COOKIE_NAME)) {          request.setAttribute(SCOPE_ID,cookie.getValue());          return;        }      }    }  } else {    final String scopeId=event.getUriInfo().getQueryParameters().getFirst(SCOPE_ID);    if (scopeId != null) {      request.setAttribute(SCOPE_ID,scopeId);    }  }}  }
class C{  IndexCreationResponse(InternalDistributedSystem ds,Set recipients){  super(ds,recipients);}  }
class C{  protected void onActionBegin(){}  }
class C{  private void refreshPlayingTrack(){  if (sequence == null) {    return;  }  final Track[] tracks=sequence.getTracks();  if (tracks.length > 0) {    try {      playingTrack=TrackUtils.mergeSequenceToTrack(SequencerImpl.this,recordEnable);    } catch (    final InvalidMidiDataException ignored) {    }  }}  }
class C{  public static Media createMedia(String uri,boolean isVideo,Runnable onCompletion) throws IOException {  return Display.getInstance().createMedia(uri,isVideo,onCompletion);}  }
class C{  public static void disposeOf(final Map<?,? extends Disposable> disposables){  if (disposables != null) {    for (    final Disposable disposable : disposables.values()) {      disposeOf(disposable);    }  }}  }
class C{  public void reset(){  resetMappings();  notifyDataSetChanged();}  }
class C{  private void sampleChanceNode(ChanceNode n,Sample sample){  String id=n.getId();  if (!evidence.containsVar(id)) {    Value newVal=n.sample(sample);    sample.addPair(id,newVal);  } else {    Value evidenceValue=evidence.getValue(id);    ProbDistribution distrib=n.getDistrib();    double evidenceProb=1.0;    if (distrib instanceof ContinuousDistribution) {      evidenceProb=((ContinuousDistribution)distrib).getProbDensity(evidenceValue);    } else {      evidenceProb=n.getProb(sample,evidenceValue);    }    sample.addLogWeight(Math.log(evidenceProb));    sample.addPair(id,evidenceValue);  }}  }
class C{  static long toData(byte[] bytes){  if (bytes == null) {    return 0;  }  long res=XlibWrapper.unsafe.allocateMemory(bytes.length);  for (int i=0; i < bytes.length; i++) {    putByte(res + i,bytes[i]);  }  return res;}  }
class C{  public static void writeTextFile(String directory,String filename,String data,boolean overwrite){  try {    File f;    f=Util.createFileOnDevice(directory,filename,overwrite);    FileWriter fw=new FileWriter(f.getAbsoluteFile());    BufferedWriter bw=new BufferedWriter(fw);    bw.write(data);    bw.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public ArrayList<String> fizzBuzz(int n){  ArrayList<String> results=new ArrayList<String>();  for (int i=1; i <= n; i++) {    if (i % 15 == 0) {      results.add("fizz buzz");    } else     if (i % 5 == 0) {      results.add("buzz");    } else     if (i % 3 == 0) {      results.add("fizz");    } else {      results.add(String.valueOf(i));    }  }  return results;}  }
class C{  public static boolean isSorted(byte[] array){  if (array == null || array.length < 2) {    return true;  }  byte previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final byte current=array[i];    if (NumberUtils.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public int compareTo(MapNode o){  return this.getLocation().compareTo((o).getLocation());}  }
class C{  public int addOrderTerm(String termTypeId,BigDecimal termValue,Long termDays,String textValue){  GenericValue orderTerm=this.getDelegator().makeValue("OrderTerm");  orderTerm.put("termTypeId",termTypeId);  orderTerm.put("termValue",termValue);  orderTerm.put("termDays",termDays);  orderTerm.put("textValue",textValue);  return addOrderTerm(orderTerm);}  }
class C{  public MutableBucketData(final int branchingFactor,final ILeafData src){  keys=new MutableKeyBuffer(branchingFactor,src.getKeys());  vals=new MutableValueBuffer(branchingFactor,src.getValues());  versionTimestamps=(src.hasVersionTimestamps() ? new long[branchingFactor] : null);  deleteMarkers=(src.hasDeleteMarkers() ? new boolean[branchingFactor] : null);  rawRecords=(src.hasRawRecords() ? new boolean[branchingFactor] : null);  final int dataslots=keys.nkeys;  if (versionTimestamps != null) {    for (int i=0; i < dataslots; i++) {      versionTimestamps[i]=src.getVersionTimestamp(i);    }    minimumVersionTimestamp=src.getMinimumVersionTimestamp();    maximumVersionTimestamp=src.getMaximumVersionTimestamp();  } else {    minimumVersionTimestamp=Long.MAX_VALUE;    maximumVersionTimestamp=Long.MIN_VALUE;  }  if (deleteMarkers != null) {    for (int i=0; i < dataslots; i++) {      deleteMarkers[i]=src.getDeleteMarker(i);    }  }  if (rawRecords != null) {    for (int i=0; i < dataslots; i++) {      rawRecords[i]=src.getRawRecord(i) != IRawStore.NULL;    }  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xA232CBE6,version=150,checkInsideInterrupt=true) public int __sceSasSetTriangularWave(int sasCore,int voice,int unknown){  checkSasAndVoiceHandlesGood(sasCore,voice);  return 0;}  }
class C{  public void handleActionKey(){  UXStats.instance().log(UXAction.SEARCH_RESULT_ENTER_KEY_DOWNLOAD);  DOWNLOAD_LISTENER.actionPerformed(null);}  }
class C{  public ChainingXmlWriter indent(Integer indent){  outputProperties.setIndent(indent);  return this;}  }
class C{  protected void learnDeviceFromArpResponseData(Ethernet eth,DatapathId swdpid,OFPort port){  if (!(eth.getPayload() instanceof ARP))   return;  ARP arp=(ARP)eth.getPayload();  MacAddress dlAddr=eth.getSourceMACAddress();  MacAddress senderAddr=MacAddress.of(arp.getSenderHardwareAddress());  if (dlAddr.equals(senderAddr))   return;  if (senderAddr.isBroadcast() || senderAddr.isMulticast())   return;  if (senderAddr.getLong() == 0)   return;  VlanVid vlan=VlanVid.ofVlan(eth.getVlanID());  IPv4Address nwSrc=IPv4Address.of(arp.getSenderProtocolAddress());  Entity e=new Entity(senderAddr,((vlan.getVlan() >= 0) ? vlan : null),((nwSrc.getInt() != 0) ? nwSrc : null),swdpid,port,new Date());  learnDeviceByEntity(e);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="domestic";  Document doc;  NodeList elementList;  Element testAddr;  String attrValue;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  testAddr.removeAttributeNS(namespaceURI,localName);  attrValue=testAddr.getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","",attrValue);}  }
class C{  private CVisibilityEvaluator(){}  }
class C{  protected void clearError(){  ioError=false;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public _HtmlLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  public QRBase(String id){  this.id=Preconditions.checkNotNull(id);}  }
class C{  public void appendNewline(){  document.append("\\par");  document.append('\n');  lastWasControlWord=false;}  }
class C{  public void onAttachFragment(Fragment fragment){}  }
class C{  protected WritableDoubleDataStore computeCoreDists(DBIDs ids,KNNQuery<O> knnQ,int minPts){  final Logging LOG=getLogger();  final WritableDoubleDataStore coredists=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_DB);  FiniteProgress cprog=LOG.isVerbose() ? new FiniteProgress("Computing core sizes",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    coredists.put(iter,knnQ.getKNNForDBID(iter,minPts).getKNNDistance());    LOG.incrementProcessed(cprog);  }  LOG.ensureCompleted(cprog);  return coredists;}  }
class C{  public static Pointer to(int values[]){  return new Pointer(IntBuffer.wrap(values));}  }
class C{  public RequestStatus(String statusCode){  setStatusCode(statusCode);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.807 -0500",hash_original_method="36F8CCF4190068A92F1E830BF76C0680",hash_generated_method="91A1309A0BD0A60858790C38C54BF2FA") public boolean switchToLastInputMethod(IBinder imeToken){synchronized (mH) {    try {      return mService.switchToLastInputMethod(imeToken);    } catch (    RemoteException e) {      Log.w(TAG,"IME died: " + mCurId,e);      return false;    }  }}  }
class C{  public static SslHandler createSslHandler(URI remote,NettyTransportSslOptions options) throws Exception {  return new SslHandler(createSslEngine(remote,createSslContext(options),options));}  }
class C{  public void addHandler(ChunkDataBase handler){  if (this.chunkDataHandlers == null)   this.chunkDataHandlers=new ArrayList<>();  if (this.classToHandler == null)   this.classToHandler=new HashMap<>();  this.chunkDataHandlers.add(handler);  this.classToHandler.put(handler.getClass(),handler);}  }
class C{  public NondominatedSortingComparator(){  super(new RankComparator(),new CrowdingComparator());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element qelement;  Attr attr;  Attr qattr;  String elemNoPrefix;  String elemPrefix;  String attrNoPrefix;  String attrPrefix;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM/Test/elem","elem");  qelement=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","attr");  qattr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  elemNoPrefix=element.getPrefix();  elemPrefix=qelement.getPrefix();  attrNoPrefix=attr.getPrefix();  attrPrefix=qattr.getPrefix();  assertNull("nodegetprefix03_1",elemNoPrefix);  assertEquals("nodegetprefix03_2","qual",elemPrefix);  assertNull("nodegetprefix03_3",attrNoPrefix);  assertEquals("nodegetprefix03_4","qual",attrPrefix);}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  public EventListenerSupport(final Class<L> listenerInterface){  this(listenerInterface,Thread.currentThread().getContextClassLoader());}  }
class C{  @VisibleForTesting protected boolean acceptableFileName(String fileName){  boolean matches=acceptedPattern.matcher(fileName).matches();  if (!matches) {    log.error("File name contains illegal characters: " + fileName);  }  return matches;}  }
class C{  void recordTabRestoreResult(boolean succeeded,long time,long perceivedTime,int errorCode){  if (succeeded) {    RecordHistogram.recordEnumeratedHistogram("Tab.RestoreResult",TAB_RESTORE_RESULT_SUCCESS,TAB_RESTORE_RESULT_COUNT);    RecordHistogram.recordCountHistogram("Tab.RestoreTime",(int)time);    RecordHistogram.recordCountHistogram("Tab.PerceivedRestoreTime",(int)perceivedTime);  } else {switch (errorCode) {case NetError.ERR_INTERNET_DISCONNECTED:case NetError.ERR_NAME_RESOLUTION_FAILED:case NetError.ERR_DNS_TIMED_OUT:      RecordHistogram.recordEnumeratedHistogram("Tab.RestoreResult",TAB_RESTORE_RESULT_FAILURE_NETWORK_CONNECTIVITY,TAB_RESTORE_RESULT_COUNT);    break;default :  RecordHistogram.recordEnumeratedHistogram("Tab.RestoreResult",TAB_RESTORE_RESULT_FAILURE_OTHER,TAB_RESTORE_RESULT_COUNT);}}}  }
class C{  public static Set<VirtualFile> gitRoots(final Collection<FilePath> filePaths){  HashSet<VirtualFile> rc=new HashSet<VirtualFile>();  for (  FilePath path : filePaths) {    final VirtualFile root=getGitRootOrNull(path);    if (root != null) {      rc.add(root);    }  }  return rc;}  }
class C{  public static String decodeString(String s){  int backSlashIdx=s.indexOf('\\');  if (backSlashIdx == -1) {    return s;  }  int startIdx=0;  int sLength=s.length();  StringBuilder sb=new StringBuilder(sLength);  while (backSlashIdx != -1) {    sb.append(s.substring(startIdx,backSlashIdx));    if (backSlashIdx + 1 >= sLength) {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    char c=s.charAt(backSlashIdx + 1);    if (c == 't') {      sb.append('\t');      startIdx=backSlashIdx + 2;    } else     if (c == 'r') {      sb.append('\r');      startIdx=backSlashIdx + 2;    } else     if (c == 'n') {      sb.append('\n');      startIdx=backSlashIdx + 2;    } else     if (c == 'b') {      sb.append('\b');      startIdx=backSlashIdx + 2;    } else     if (c == 'f') {      sb.append('\f');      startIdx=backSlashIdx + 2;    } else     if (c == '"') {      sb.append('"');      startIdx=backSlashIdx + 2;    } else     if (c == '\'') {      sb.append('\'');      startIdx=backSlashIdx + 2;    } else     if (c == '>') {      sb.append('>');      startIdx=backSlashIdx + 2;    } else     if (c == '\\') {      sb.append('\\');      startIdx=backSlashIdx + 2;    } else     if (c == 'u') {      if (backSlashIdx + 5 >= sLength) {        throw new IllegalArgumentException("Incomplete Unicode escape sequence in: " + s);      }      String xx=s.substring(backSlashIdx + 2,backSlashIdx + 6);      try {        final int codePoint=Integer.parseInt(xx,16);        sb.append(Character.toChars(codePoint));        startIdx=backSlashIdx + 6;      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal Unicode escape sequence '\\u" + xx + "' in: "+ s);      }    } else     if (c == 'U') {      if (backSlashIdx + 9 >= sLength) {        throw new IllegalArgumentException("Incomplete Unicode escape sequence in: " + s);      }      String xx=s.substring(backSlashIdx + 2,backSlashIdx + 10);      try {        final int codePoint=Integer.parseInt(xx,16);        sb.append(Character.toChars(codePoint));        startIdx=backSlashIdx + 10;      } catch (      NumberFormatException e) {        throw new IllegalArgumentException("Illegal Unicode escape sequence '\\U" + xx + "' in: "+ s);      }    } else {      throw new IllegalArgumentException("Unescaped backslash in: " + s);    }    backSlashIdx=s.indexOf('\\',startIdx);  }  sb.append(s.substring(startIdx));  return sb.toString();}  }
class C{  public void inflate(Resources r,XmlPullParser parser,AttributeSet attrs,Resources.Theme theme) throws XmlPullParserException, IOException {}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="ExpedienteInfo";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("Numero",numero);  bdr.addSimpleElement("Fecha Inicio",DateTimeUtil.getDateTime(getFechaInicio(),"yyyy-MM-dd"));  bdr.addSimpleElement("Estado",estado);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  private void parseForSOAPFault(SOAPMessage message) throws ParserException, SoapFaultException {  try {    if (message.getSOAPBody().hasFault()) {      log.error(SOAP_FAULT_FOUND);      throw new SoapFaultException(SOAP_FAULT_FOUND,new SoapFault(message.getSOAPBody().getFault()));    }  } catch (  SOAPException e) {    log.error(PARSING_ERROR_MSG,e);    throw new ParserException(PARSING_ERROR_MSG,e);  }}  }
class C{  public static void clearSnapshotsFlags(IngestionRequestContext requestContext,Volume volume,Set<DataObject> updatedObjects,DbClient dbClient){  URIQueryResultList snapshotURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getVolumeSnapshotConstraint(volume.getId()),snapshotURIs);  Iterator<BlockSnapshot> snapshotsIterator=dbClient.queryIterativeObjects(BlockSnapshot.class,snapshotURIs);  while (snapshotsIterator.hasNext()) {    BlockSnapshot snap=snapshotsIterator.next();    _logger.info("Clearing internal volume flag of snapshot {} of RP volume {}",snap.getLabel(),volume.getLabel());    snap.clearInternalFlags(BlockIngestOrchestrator.INTERNAL_VOLUME_FLAGS);    updatedObjects.add(snap);  }  for (  BlockObject createdObject : requestContext.getBlockObjectsToBeCreatedMap().values()) {    if (createdObject instanceof BlockSnapshot) {      BlockSnapshot snapshot=(BlockSnapshot)createdObject;      if (snapshot.getParent() != null && volume.getId().equals(snapshot.getParent().getURI())) {        _logger.info("Clearing internal volume flag of snapshot {} of RP volume {}",snapshot.getLabel(),volume.getLabel());        snapshot.clearInternalFlags(BlockIngestOrchestrator.INTERNAL_VOLUME_FLAGS);      }    }  }}  }
class C{  boolean updateConfigurationLocked(Configuration values,ActivityRecord starting,boolean persistent,boolean initLocale){  if (mHeadless)   return true;  int changes=0;  boolean kept=true;  if (values != null) {    Configuration newConfig=new Configuration(mConfiguration);    changes=newConfig.updateFrom(values);    if (changes != 0) {      if (DEBUG_SWITCH || DEBUG_CONFIGURATION) {        Slog.i(TAG,"Updating configuration to: " + values);      }      EventLog.writeEvent(EventLogTags.CONFIGURATION_CHANGED,changes);      if (values.locale != null && !initLocale) {        saveLocaleLocked(values.locale,!values.locale.equals(mConfiguration.locale),values.userSetLocale);      }      if (values.customTheme != null) {        saveThemeResourceLocked(values.customTheme,!values.customTheme.equals(mConfiguration.customTheme));      }      mConfigurationSeq++;      if (mConfigurationSeq <= 0) {        mConfigurationSeq=1;      }      newConfig.seq=mConfigurationSeq;      mConfiguration=newConfig;      Slog.i(TAG,"Config changes=" + Integer.toHexString(changes) + " "+ newConfig);      final Configuration configCopy=new Configuration(mConfiguration);      mShowDialogs=shouldShowDialogs(newConfig);      AttributeCache ac=AttributeCache.instance();      if (ac != null) {        ac.updateConfiguration(configCopy);      }      mSystemThread.applyConfigurationToResources(configCopy);      if (persistent && Settings.System.hasInterestingConfigurationChanges(changes)) {        Message msg=mHandler.obtainMessage(UPDATE_CONFIGURATION_MSG);        msg.obj=new Configuration(configCopy);        mHandler.sendMessage(msg);      }      for (int i=mLruProcesses.size() - 1; i >= 0; i--) {        ProcessRecord app=mLruProcesses.get(i);        try {          if (app.thread != null) {            if (DEBUG_CONFIGURATION)             Slog.v(TAG,"Sending to proc " + app.processName + " new config "+ mConfiguration);            app.thread.scheduleConfigurationChanged(configCopy);          }        } catch (        Exception e) {        }      }      Intent intent=new Intent(Intent.ACTION_CONFIGURATION_CHANGED);      intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_REPLACE_PENDING | Intent.FLAG_RECEIVER_FOREGROUND);      broadcastIntentLocked(null,null,intent,null,null,0,null,null,null,AppOpsManager.OP_NONE,false,false,MY_PID,Process.SYSTEM_UID,UserHandle.USER_ALL);      if ((changes & ActivityInfo.CONFIG_LOCALE) != 0) {        intent=new Intent(Intent.ACTION_LOCALE_CHANGED);        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);        broadcastIntentLocked(null,null,intent,null,null,0,null,null,null,AppOpsManager.OP_NONE,false,false,MY_PID,Process.SYSTEM_UID,UserHandle.USER_ALL);      }    }  }  if (changes != 0 && starting == null) {    starting=mMainStack.topRunningActivityLocked(null);  }  if (starting != null) {    kept=mMainStack.ensureActivityConfigurationLocked(starting,changes);    mMainStack.ensureActivitiesVisibleLocked(starting,changes);  }  if (values != null && mWindowManager != null) {    mWindowManager.setNewConfiguration(mConfiguration);  }  return kept;}  }
class C{  public static FBField createField(FieldDescriptor fieldDescriptor,FieldDataProvider dataProvider,GDSHelper gdsHelper,boolean cached) throws SQLException {  final FBField result=FBField.createField(fieldDescriptor,dataProvider,cached);  result.setConnection(gdsHelper);  return result;}  }
class C{  public boolean evaluate(Context context,Writer out,String logTag,String instring) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException, IOException {  return evaluate(context,out,logTag,new BufferedReader(new StringReader(instring)));}  }
class C{  public String put(String key,Object o){  ob=o;  return key;}  }
class C{  public PubsubReader(PubsubOptions options,PubsubSource<T> outer) throws IOException, GeneralSecurityException {  this.outer=outer;  pubsubClient=outer.outer.pubsubFactory.newClient(outer.outer.timestampLabel,outer.outer.idLabel,options);  ackTimeoutMs=-1;  safeToAckIds=new HashSet<>();  notYetRead=new ArrayDeque<>();  inFlight=new LinkedHashMap<>();  ackedIds=new ConcurrentLinkedQueue<>();  notYetReadBytes=0;  minUnreadTimestampMsSinceEpoch=new BucketingFunction(SAMPLE_UPDATE.getMillis(),MIN_WATERMARK_SPREAD,MIN_WATERMARK_MESSAGES,MIN);  minReadTimestampMsSinceEpoch=newFun(MIN);  lastReceivedMsSinceEpoch=-1;  lastWatermarkMsSinceEpoch=BoundedWindow.TIMESTAMP_MIN_VALUE.getMillis();  current=null;  lastLogTimestampMsSinceEpoch=-1;  numReceived=0L;  numReceivedRecently=newFun(SUM);  numExtendedDeadlines=newFun(SUM);  numLateDeadlines=newFun(SUM);  numAcked=newFun(SUM);  numExpired=newFun(SUM);  numNacked=newFun(SUM);  numReadBytes=newFun(SUM);  minReceivedTimestampMsSinceEpoch=newFun(MIN);  maxReceivedTimestampMsSinceEpoch=newFun(MAX);  minWatermarkMsSinceEpoch=newFun(MIN);  maxWatermarkMsSinceEpoch=newFun(MAX);  numLateMessages=newFun(SUM);  numInFlightCheckpoints=new AtomicInteger();  maxInFlightCheckpoints=0;}  }
class C{  long loadInt64() throws IOException {  int a, b;  if (this.luacLittleEndian) {    a=loadInt();    b=loadInt();  } else {    b=loadInt();    a=loadInt();  }  return (((long)b) << 32) | (((long)a) & 0xffffffffL);}  }
class C{  public void onBatchComplete(){  mTagsWithLayoutVisited.clear();}  }
class C{  boolean awaitTermination(long timeout,TimeUnit unit) throws InterruptedException {  return schedulerService.awaitTermination(timeout,unit);}  }
class C{  public TIntLongHashMap(TIntHashingStrategy strategy){  super(strategy);}  }
class C{  public Fraction add(final Fraction fraction){  return addSub(fraction,true);}  }
class C{  public Vector3f cross(Vector3fc v){  return set(y * v.z() - z * v.y(),z * v.x() - x * v.z(),x * v.y() - y * v.x());}  }
class C{  protected void loadImage(String filePath,OMGraphicList ret){  File file=new File(filePath);  if (file.exists() && file.isDirectory()) {    String[] files=file.list();    for (int i=0; i < files.length; i++) {      loadImage(filePath + "/" + files[i],ret);    }  } else {    fireStatusUpdate(LayerStatusEvent.START_WORKING);    try {      URL fileURL=PropUtils.getResourceOrFileOrURL(filePath);      if (fileURL != null) {        if (imageReaderLoaders != null) {          ImageTile imageTile=null;          for (          ImageReaderLoader idl : imageReaderLoaders) {            if (idl.isLoadable(filePath)) {              ImageReader id=idl.getImageReader(fileURL);              ImageTile tmpImageTile=id.getImageTile(imageCache);              if (imageTile == null) {                imageTile=tmpImageTile;              } else               if (tmpImageTile != null && imageTile instanceof ErrImageTile) {                imageTile=tmpImageTile;              }              if (imageTile != null && !(imageTile instanceof ErrImageTile)) {                break;              }            }          }          if (imageTile != null) {            addImageToLists(imageTile,ret,fileURL);          }        } else {          logger.warning("ImageReaders not configured in " + getName() + " ImageTileLayer.");        }      } else {        logger.warning("Can't get URL from " + filePath);      }    } catch (    MalformedURLException murle) {    }  }}  }
class C{  public void defineProperty(String variable,String expression){  if (expression != null) {    definitions.put(variable,PuzzleEventDispatcher.get().parseExpression(this,expression));    Scanner sc=new Scanner(expression);    Pattern pattern=Pattern.compile("\"[^\"]*\"|[A-Za-z0-9._]+");    String token=sc.findInLine(pattern);    while (token != null) {      if (token.charAt(0) != '"' && token.contains(".")) {        this.dependencies.add(token.substring(0,token.lastIndexOf('.')));      }      token=sc.findInLine(pattern);    }    sc.close();  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public XmlTextBuilder(int initialCapacity){  m_textBuf=new StringBuffer(initialCapacity);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  protected long computeSVUID() throws IOException {  ByteArrayOutputStream bos;  DataOutputStream dos=null;  long svuid=0;  try {    bos=new ByteArrayOutputStream();    dos=new DataOutputStream(bos);    dos.writeUTF(name.replace('/','.'));    dos.writeInt(access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_INTERFACE| Opcodes.ACC_ABSTRACT));    Arrays.sort(interfaces);    for (int i=0; i < interfaces.length; i++) {      dos.writeUTF(interfaces[i].replace('/','.'));    }    writeItems(svuidFields,dos,false);    if (hasStaticInitializer) {      dos.writeUTF("<clinit>");      dos.writeInt(Opcodes.ACC_STATIC);      dos.writeUTF("()V");    }    writeItems(svuidConstructors,dos,true);    writeItems(svuidMethods,dos,true);    dos.flush();    byte[] hashBytes=computeSHAdigest(bos.toByteArray());    for (int i=Math.min(hashBytes.length,8) - 1; i >= 0; i--) {      svuid=(svuid << 8) | (hashBytes[i] & 0xFF);    }  }  finally {    if (dos != null) {      dos.close();    }  }  return svuid;}  }
class C{  public TreeNode(final ObjectType object){  m_object=Preconditions.checkNotNull(object,"Error: Node argument can not be null");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.TRANSITION_SPECIFICATION__REACTION:    return reaction != null;}return super.eIsSet(featureID);}  }
class C{  public static CCRibbon node(float w,String path,float l,ccColor4B color,float fade){  return new CCRibbon(w,path,l,color,fade);}  }
class C{  public boolean isReplacement(){  return isReplacement;}  }
class C{  public GeneralAlgorithmRunner(GraphSource graphSource,Parameters parameters){  this(null,graphSource,parameters,null,null);}  }
class C{  public NotificationChain basicSetLhs(Expression newLhs,NotificationChain msgs){  Expression oldLhs=lhs;  lhs=newLhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.RELATIONAL_EXPRESSION__LHS,oldLhs,newLhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean hasData(){  return !isEmpty();}  }
class C{  protected void handleSimpleCollision(final int nx,final int ny){  if (isZoneChangeAllowed()) {    if (getZone().leavesZone(this,nx,ny)) {      handleLeaveZone(nx,ny);      return;    }  }  if (isGhost()) {    move(getX(),getY(),nx,ny);  }}  }
class C{  public static void deletePost(BloggerService myService,String editLinkHref) throws ServiceException, IOException {  URL deleteUrl=new URL(editLinkHref);  myService.delete(deleteUrl);}  }
class C{  @Override public PLPosition convertPointTo3DPoint(GL10 gl,CGPoint point,float z){  PLPosition result=PLPosition.PLPositionMake(0.0f,0.0f,0.0f);  this.convertPointTo3DPoint(gl,point,z,result);  return result;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void resetCaches(){  caches=new DTEDCacheHandler[MAX_NUM_BOXES];}  }
class C{  public static void runTransformThread(Runnable runnable){  ThreadControllerWrapper.runThread(runnable,-1);}  }
class C{  @Override protected Link findLink(final String relation){  return getLinkIndex().find(relation);}  }
class C{  synchronized protected void checkHalt(){  if (_waitForSync && !_halt && !_waitForSensor&& !_waitForClear) {    if (log.isDebugEnabled())     log.debug("Was waiting for sync, OK to move. checkHalt calls notify()");    this.notify();  }}  }
class C{  public static String extractIpAddress(String name,int limit,String delimiter){  Iterable<String> splitter=Splitter.on(delimiter).limit(limit).split(name);  return Iterables.getLast(splitter);}  }
class C{  public void putMask(int i,short m){  masks[i]=m;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (rawValue: ");  result.append(rawValue);  result.append(')');  return result.toString();}  }
class C{  public static double log10(double x){  double ln=Math.log(x);  if (Double.isInfinite(ln))   return ln;  if (Double.isNaN(ln))   return ln;  return ln / LOG_10;}  }
class C{  public int read() throws IOException {  return read(tempBuf,0,1) == -1 ? -1 : (tempBuf[0] & 0xFF);}  }
class C{  @Override public boolean needAlGrid(){  return false;}  }
class C{  public AESWrapEngine(){  super(new AESEngine());}  }
class C{  public boolean saveStream(String targetFilename,String sourceLocation){  return saveStream(saveFile(targetFilename),sourceLocation);}  }
class C{  @Override public boolean push(final N n){  if (stackTop < size) {    stack[(stackTop++) & mask]=n;    return true;  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.BINDING_ELEMENT__REST:    setRest(REST_EDEFAULT);  return;case N4JSPackage.BINDING_ELEMENT__VAR_DECL:setVarDecl((VariableDeclaration)null);return;case N4JSPackage.BINDING_ELEMENT__NESTED_PATTERN:setNestedPattern((BindingPattern)null);return;case N4JSPackage.BINDING_ELEMENT__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public <K>T ajax(String url,Map<String,?> params,Class<K> type,AjaxCallback<K> callback){  callback.type(type).url(url).params(params);  return ajax(callback);}  }
class C{  public void remove(int index){  Component c=getComponent(index);  super.remove(index);  if (c != null && !(c instanceof JComponent)) {    getComponentToLayer().remove(c);  }  validateOptimizedDrawing();}  }
class C{  public void lockUnidadesDocumentales(String[] unidadDocumentalIDs) throws ActionNotAllowedException {  checkPermission(AppPermissions.BLOQUEO_DESBLOQUEO_UNIDADES_DOCUMENTALES);  iniciarTransaccion();  int nUdocs=unidadDocumentalIDs.length;  StringBuffer udocsLocked=new StringBuffer();  fondos.vos.UnidadDocumentalVO unidadDocumentalVO=null;  for (int i=0; i < nUdocs; i++) {    unidadDocumentalVO=_unidadDocumentalDBEntity.getUnidadDocumental(unidadDocumentalIDs[i]);    if (unidadDocumentalVO.getMarcasBloqueo() > 0) {      throw new RelacionOperacionNoPermitidaException(RelacionOperacionNoPermitidaException.XNO_ES_POSIBLE_BLOQUEAR_UDOC_BLOQUEADAS);    }    int marcas=MarcaUtil.setBitActivoInMarca(MarcaUdocRelacionConstants.POSICION_BIT_MARCA_BLOQUEADA_TRANSFERENCIA_EA_EXPURGO,unidadDocumentalVO.getMarcasBloqueo());    _unidadDocumentalDBEntity.updateMarcaBloqueo(unidadDocumentalVO.getIdElementocf(),marcas);    udocsLocked.append(unidadDocumentalVO.getNumExp()).append(":").append(unidadDocumentalVO.getTitulo()).append(" - ");  }  commit();}  }
class C{  public User(){}  }
class C{  @SuppressWarnings("unchecked") public synchronized E pop(){  if (elementCount == 0) {    throw new EmptyStackException();  }  final int index=--elementCount;  final E obj=(E)elementData[index];  elementData[index]=null;  modCount++;  return obj;}  }
class C{  public String toString(){  return m_locations.toString();}  }
class C{  public static String quote(String string){  if (string == null || string.length() == 0) {    return "\"\"";  }  char b;  char c=0;  int i;  int len=string.length();  StringBuffer sb=new StringBuffer(len + 4);  String t;  sb.append('"');  for (i=0; i < len; i+=1) {    b=c;    c=string.charAt(i);switch (c) {case '\\':case '"':      sb.append('\\');    sb.append(c);  break;case '/':if (b == '<') {  sb.append('\\');}sb.append(c);break;case '\b':sb.append("\\b");break;case '\t':sb.append("\\t");break;case '\n':sb.append("\\n");break;case '\f':sb.append("\\f");break;case '\r':sb.append("\\r");break;default :if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {t="000" + Integer.toHexString(c);sb.append("\\u" + t.substring(t.length() - 4));} else {sb.append(c);}}}sb.append('"');return sb.toString();}  }
class C{  public static double toRadians(final double angdeg){  if (USE_JDK_MATH) {    return Math.toRadians(angdeg);  }  return angdeg * (Math.PI / 180);}  }
class C{  public void build() throws IOException {  List<Arch> archs=this.config.getArchs();  if (archs.isEmpty()) {    archs=config.getTarget().getDefaultArchs();  }  if (archs.isEmpty()) {    throw new IllegalArgumentException("No archs specified in config");  }  if (archs.size() == 1 && this.config.getArch().equals(archs.get(0))) {    compile();  } else {    Map<Arch,File> slices=new TreeMap<>();    for (    Arch arch : archs) {      this.config.getLogger().info("Building %s slice",arch);      Config sliceConfig=this.config.builder().arch(arch).tmpDir(new File(this.config.getTmpDir(),arch.toString())).build();      new AppCompiler(sliceConfig).compile();      slices.put(arch,new File(sliceConfig.getTmpDir(),sliceConfig.getExecutableName()));      for (      Path path : sliceConfig.getResourcesPaths()) {        if (!this.config.getResourcesPaths().contains(path)) {          this.config.addResourcesPath(path);        }      }    }    this.config.getTarget().buildFat(slices);  }}  }
class C{  private void decorate(final Map<String,String> controllerAttibs){  final I18N i18n=SpringContextHelper.getBean(I18N.class);  final Label title=new Label(i18n.get("label.target.controller.attrs"),ContentMode.HTML);  title.addStyleName(SPUIDefinitions.TEXT_STYLE);  targetAttributesLayout.addComponent(title);  if (HawkbitCommonUtil.isNotNullOrEmpty(controllerAttibs)) {    for (    final Map.Entry<String,String> entry : controllerAttibs.entrySet()) {      targetAttributesLayout.addComponent(SPUIComponentProvider.createNameValueLabel(entry.getKey() + ": ",entry.getValue()));    }  }}  }
class C{  public void visitParameter(String name,int access){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  @Delete public String remove(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  FirewallRule rule=jsonToFirewallRule(fmJson);  if (rule == null) {    return "{\"status\" : \"Error! Could not parse firewall rule, see log for details.\"}";  }  String status=null;  boolean exists=false;  Iterator<FirewallRule> iter=firewall.getRules().iterator();  while (iter.hasNext()) {    FirewallRule r=iter.next();    if (r.ruleid == rule.ruleid) {      exists=true;      break;    }  }  if (!exists) {    status="Error! Can't delete, a rule with this ID doesn't exist.";    log.error(status);  } else {    firewall.deleteRule(rule.ruleid);    status="Rule deleted";  }  return ("{\"status\" : \"" + status + "\"}");}  }
class C{  public static String[] split(String s,String sep,boolean caseInsensitive){  String splitString=caseInsensitive ? sep.toLowerCase() : sep;  String input=caseInsensitive ? s.toLowerCase() : s;  int i, b, e;  int cnt;  String res[];  int ln=s.length();  int sln=sep.length();  if (sln == 0)   throw new IllegalArgumentException("The separator string has 0 length");  i=0;  cnt=1;  while ((i=input.indexOf(splitString,i)) != -1) {    cnt++;    i+=sln;  }  res=new String[cnt];  i=0;  b=0;  while (b <= ln) {    e=input.indexOf(splitString,b);    if (e == -1)     e=ln;    res[i++]=s.substring(b,e);    b=e + sln;  }  return res;}  }
class C{  public void test_isEqual$B$B(){  assertTrue("isEqual is not correct",MessageDigest.isEqual(AR1,AR2));}  }
class C{  protected IndexResultSet(){}  }
class C{  public static List<AnnotationDto> transformToDto(List<Annotation> annotations){  if (annotations == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<AnnotationDto> result=new ArrayList<>();  for (  Annotation annotation : annotations) {    result.add(transformToDto(annotation));  }  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Object handleGetObject(String key){  return propResBundle.handleGetObject(key);}  }
class C{  private IonDatagramLite load_helper(IonReader reader) throws IOException {  IonDatagramLite datagram=new IonDatagramLite(_system,_catalog);  IonWriter writer=PrivateIonWriterFactory.makeWriter(datagram);  writer.writeValues(reader);  return datagram;}  }
class C{  private InputStream writeJSONLD(Model statements) throws RDFHandlerException {  final StringWriter writer=new StringWriter();  final RDFWriter jsonldWriter=new JSONLDWriter(writer);  jsonldWriter.startRDF();  for (  final Namespace prefix : statements.getNamespaces()) {    jsonldWriter.handleNamespace(prefix.getPrefix(),prefix.getName());  }  for (  final Statement nextStatement : statements) {    jsonldWriter.handleStatement(nextStatement);  }  jsonldWriter.endRDF();  return new ByteArrayInputStream(writer.toString().getBytes(Charset.forName("UTF-8")));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.982 -0500",hash_original_method="4C2C559A1F5EA512B39B33D53CB17E9D",hash_generated_method="172F68C5AE823BE13435DB055190A3AF") public byte[] receive() throws IOException {  int length;  byte[] result;  _socket_.receive(__receivePacket);  result=new byte[length=__receivePacket.getLength()];  System.arraycopy(__receiveData,0,result,0,length);  return result;}  }
class C{  public void add(final Object element){  Set oldSelection=new HashSet(selection);  boolean rv=selection.add(element);  if (rv) {    fireSelectionChanged(oldSelection,selection);  }  oldSelection=null;}  }
class C{  public RefField findField(Class type){  if (type == null) {    type=void.class;  }  final List<Field> fields=new ArrayList<>();  Collections.addAll(fields,this.clazz.getFields());  Collections.addAll(fields,this.clazz.getDeclaredFields());  for (  final Field f : fields) {    if (type.equals(f.getType())) {      return new RefField(f);    }  }  throw new RuntimeException("no such field");}  }
class C{  private static Map<String,File> newAccessOrder(){  return new LinkedHashMap<String,File>(MAX_SIZE,0.75f,true);}  }
class C{  public void testDecodeAttributeBody() throws StunException {  byte[] attributeValue=msgFixture.connectionId;  char offset=Attribute.HEADER_LENGTH;  char length=(char)(attributeValue.length - offset);  connectionIdAttribute.decodeAttributeBody(attributeValue,offset,length);  assertEquals("ConnectionIdAttribute.decode() did not properly decode the " + "connection id field.",MsgFixture.CONNECTION_ID,connectionIdAttribute.getConnectionIdValue());}  }
class C{  public static ComponentUI createUI(JComponent c){  return new MetalRootPaneUI();}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  public AsyncResult TransferSubscriptionsAsync(TransferSubscriptionsRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  protected double[] distributionForInstanceMin(Instance instance) throws Exception {  double[] probs=new double[instance.numClasses()];  double numPredictions=0;  for (int i=0; i < m_Classifiers.length; i++) {    double[] dist=getClassifier(i).distributionForInstance(instance);    if (!instance.classAttribute().isNumeric() || !Utils.isMissingValue(dist[0])) {      for (int j=0; j < dist.length; j++) {        if ((probs[j] > dist[j]) || (numPredictions == 0)) {          probs[j]=dist[j];        }      }      numPredictions++;    }  }  for (int i=0; i < m_preBuiltClassifiers.size(); i++) {    double[] dist=m_preBuiltClassifiers.get(i).distributionForInstance(instance);    if (!instance.classAttribute().isNumeric() || !Utils.isMissingValue(dist[0])) {      for (int j=0; j < dist.length; j++) {        if ((probs[j] > dist[j]) || (numPredictions == 0)) {          probs[j]=dist[j];        }      }      numPredictions++;    }  }  if (instance.classAttribute().isNumeric()) {    if (numPredictions == 0) {      probs[0]=Utils.missingValue();    }  } else {    if (Utils.sum(probs) > 0) {      Utils.normalize(probs);    }  }  return probs;}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  private File showOpenDialogNative(){  FileDialog chooser=new FileDialog(new JFrame(),"Open",FileDialog.LOAD);  chooser.setDirectory(getCurrentLocation());  if (exts.size() >= 1) {    chooser.setFilenameFilter(new ExtensionSetFileFilter(exts.keySet(),description));  }  chooser.setVisible(true);  if (chooser.getFile() != null) {    currentDirectory=chooser.getDirectory();    return new File(chooser.getDirectory() + FS + chooser.getFile());  } else {    return null;  }}  }
class C{  public static void validateParamDefSet(VOPricedParameter voPP) throws ValidationException {  if (voPP.getVoParameterDef() == null) {    ValidationException ve=new ValidationException(ReasonEnum.PRICED_PARAM_WRONG_BASE,null,new Object[]{voPP});    logger.logWarn(Log4jLogger.SYSTEM_LOG,ve,LogMessageIdentifier.WARN_VALIDATION_EXCEPTION_PRICED_PARAM_WRONG_BASE);    throw ve;  }}  }
class C{  public boolean isPersistent(){  return isPersistent;}  }
class C{  @SuppressWarnings("unused") public DBRecord(){}  }
class C{  public String hello(){  return "Hello, World";}  }
class C{  public T image(int resid){  if (view instanceof ImageView) {    ImageView iv=(ImageView)view;    iv.setTag(AQuery.TAG_URL,null);    if (resid == 0) {      iv.setImageBitmap(null);    } else {      iv.setImageResource(resid);    }  }  return self();}  }
class C{  public final AGeneralOperationAccessor initialDSetPath(String initialDSetPath){  this.initialDSetPath=initialDSetPath;  return this;}  }
class C{  private void addSearchHistory(){  addSearchHistory(tfSearchEditor.getText());}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public void configure(){  setCommandStationType(getOptionState(option2Name));  setTurnoutHandling(getOptionState(option3Name));  jmri.jmrix.loconet.pr2.LnPr2Packetizer packets=new jmri.jmrix.loconet.pr2.LnPr2Packetizer();  packets.connectPort(this);  this.getSystemConnectionMemo().setLnTrafficController(packets);  this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  private static void SetShortArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: SetShortArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    short[] destinationArray=(short[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > destinationArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(Magic.objectAsAddress(destinationArray).plus(startIndex << LOG_BYTES_IN_SHORT),bufAddress,length << LOG_BYTES_IN_SHORT);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private int convertFocusDirectionToLayoutDirection(int focusDirection){switch (focusDirection) {case View.FOCUS_BACKWARD:    return LayoutState.LAYOUT_START;case View.FOCUS_FORWARD:  return LayoutState.LAYOUT_END;case View.FOCUS_UP:return mOrientation == VERTICAL ? LayoutState.LAYOUT_START : LayoutState.INVALID_LAYOUT;case View.FOCUS_DOWN:return mOrientation == VERTICAL ? LayoutState.LAYOUT_END : LayoutState.INVALID_LAYOUT;case View.FOCUS_LEFT:return mOrientation == HORIZONTAL ? LayoutState.LAYOUT_START : LayoutState.INVALID_LAYOUT;case View.FOCUS_RIGHT:return mOrientation == HORIZONTAL ? LayoutState.LAYOUT_END : LayoutState.INVALID_LAYOUT;default :if (DEBUG) {Log.d(TAG,"Unknown focus request:" + focusDirection);}return LayoutState.INVALID_LAYOUT;}}  }
class C{  public PdfEntry(BaseEntry sourceEntry){  super(sourceEntry);}  }
class C{  private void revertKeyClassNames(Collection<PojoDescriptor> selPojos){  for (  PojoDescriptor pojo : selPojos)   pojo.revertKeyClassName();}  }
class C{  public double forwardTimeEvolution(int x,int y,double t){  if (t < 0) {    throw new IllegalArgumentException("Cannot go backwards in time: t=" + t);  }  double m[]={getForwardRate(0,1),getForwardRate(1,0)};  double mt=m[0] + m[1];  if (y == x) {    return (m[x] * Math.exp(-mt * t) + m[1 - x]) / mt;  } else {    return m[x] * (1.0 - Math.exp(-mt * t)) / mt;  }}  }
class C{  @Override public void onTextChanged(CharSequence s,int start,int before,int after){  if (mRxMDConfiguration == null && (s instanceof Editable)) {    return;  }  Editable editable=(Editable)s;  if (checkNewLineInput(editable,start,before,after)) {    MDOrderListSpan mdOrderListSpan=getOrderListSpan(editable,start - 1,false);    MDUnOrderListSpan mdUnOrderListSpan=getUnOrderListSpan(editable,start - 1,false);    if (mdOrderListSpan != null) {      updateOrderListSpanBeforeNewLine(editable,start,mdOrderListSpan);      insertOrderList(editable,mdOrderListSpan,start);    } else     if (mdUnOrderListSpan != null) {      updateUnOrderListSpanBeforeNewLine(editable,start,mdUnOrderListSpan);      insertUnOrderList(editable,mdUnOrderListSpan,start);    }  } else   if (checkLineHeaderPosition(editable,start,before,after)) {    updateLineHeaderList(editable,start,before,after);  } else   if (isBeginningOfListSpan(editable,start,before,after) || mNeedFormat) {    updateListSpanBeginning(editable,start,before,after);  } else   if (isSatisfiedOrderListFormat(editable,start)) {    formatOrderList(editable,start);  }}  }
class C{  public PackedIntVector(int columns){  mColumns=columns;  mRows=0;  mRowGapStart=0;  mRowGapLength=mRows;  mValues=null;  mValueGap=new int[2 * columns];}  }
class C{  public void addLdc(int i){  if (i > 0xFF) {    addOpcode(LDC_W);    addIndex(i);  } else {    addOpcode(LDC);    add(i);  }}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public boolean insert() throws SQLException {  if (records.size() == 0 || !(records.get(0) instanceof AbstractRecord)) {    logger.debug("DatabaseWriter no record to insert or unknown record Class.");    return false;  }  final AbstractRecord record0=(AbstractRecord)records.get(0);  final String[] columnNames=record0.getDbColumnNames();  final String sql=(columnNames != null) ? PreparedStatementUtil.prepareInsertTemplateWithColumn(tableName,columnNames) : PreparedStatementUtil.prepareInsertTemplateWithoutColumn(tableName,record0.getAllFields().length);  for (  final Record record : records) {    try {      jdbcTemplate.update(sql,((AbstractRecord)record).getAllValuesToString());    } catch (    IllegalAccessException|DataAccessException ae) {      logger.error("DatabaseWriter insert error: " + ae);    }  }  records.clear();  return true;}  }
class C{  public boolean hasCount(){  return getCount() != null;}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  public MonetaryFormat noCode(){  if (codes == null)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,null,codeSeparator,codePrefixed);}  }
class C{  private void ratingApp(){  Uri uri=Uri.parse("market://details?id=" + getPackageName());  Intent intent=new Intent(Intent.ACTION_VIEW,uri);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  if (intent.resolveActivity(getPackageManager()) != null) {    startActivity(intent);  } else {    Toast.makeText(this,R.string.settings_rating_no_market,Toast.LENGTH_SHORT).show();  }}  }
class C{  public void writeBlocks(ByteBuf output) throws Exception {  int bitsPerBlock=4;  while (palette.size() > 1 << bitsPerBlock) {    bitsPerBlock+=1;  }  long maxEntryValue=(1L << bitsPerBlock) - 1;  output.writeByte(bitsPerBlock);  Type.VAR_INT.write(output,palette.size());  for (  int mappedId : palette) {    Type.VAR_INT.write(output,mappedId);  }  int length=(int)Math.ceil(SIZE * bitsPerBlock / 64.0);  Type.VAR_INT.write(output,length);  long[] data=new long[length];  for (int index=0; index < blocks.length; index++) {    int value=blocks[index];    int bitIndex=index * bitsPerBlock;    int startIndex=bitIndex / 64;    int endIndex=((index + 1) * bitsPerBlock - 1) / 64;    int startBitSubIndex=bitIndex % 64;    data[startIndex]=data[startIndex] & ~(maxEntryValue << startBitSubIndex) | ((long)value & maxEntryValue) << startBitSubIndex;    if (startIndex != endIndex) {      int endBitSubIndex=64 - startBitSubIndex;      data[endIndex]=data[endIndex] >>> endBitSubIndex << endBitSubIndex | ((long)value & maxEntryValue) >> endBitSubIndex;    }  }  for (  long l : data) {    Type.LONG.write(output,l);  }}  }
class C{  public static void reportError(final Context context,final String error){  log.onError(context,error);}  }
class C{  @AssistedInject public SharingProfileResource(@Assisted UserContext userContext,@Assisted Directory<SharingProfile> directory,@Assisted SharingProfile sharingProfile,DirectoryObjectTranslator<SharingProfile,APISharingProfile> translator){  super(directory,sharingProfile,translator);  this.userContext=userContext;  this.sharingProfile=sharingProfile;}  }
class C{  public Object invokeMethod(String methodName,Object[] args,Interpreter interpreter,CallStack callstack,SimpleNode callerInfo,boolean declaredOnly) throws EvalError {  if (args == null) {    args=new Object[0];  } else {    Object[] oa=new Object[args.length];    for (int i=0; i < args.length; i++) {      oa[i]=(args[i] == null ? Primitive.NULL : args[i]);    }    args=oa;  }  if (interpreter == null)   interpreter=declaringInterpreter;  if (callstack == null)   callstack=new CallStack(namespace);  if (callerInfo == null)   callerInfo=SimpleNode.JAVACODE;  Class[] types=Types.getTypes(args);  BshMethod bshMethod=null;  try {    bshMethod=namespace.getMethod(methodName,types,declaredOnly);  } catch (  UtilEvalError e) {  }  if (bshMethod != null)   return bshMethod.invoke(args,interpreter,callstack,callerInfo);  if (methodName.equals("toString"))   return toString();  if (methodName.equals("hashCode"))   return new Integer(this.hashCode());  if (methodName.equals("equals")) {    Object obj=args[0];    return this == obj ? Boolean.TRUE : Boolean.FALSE;  }  try {    bshMethod=namespace.getMethod("invoke",new Class[]{null,null});  } catch (  UtilEvalError e) {  }  if (bshMethod != null)   return bshMethod.invoke(new Object[]{methodName,args},interpreter,callstack,callerInfo);  throw new EvalError("Method " + StringUtil.methodString(methodName,types) + " not found in bsh scripted object: "+ namespace.getName(),callerInfo,callstack);}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  private static boolean isCapacityLimitExceeded(double usedCapacity,double totalCapacity){  double consumedPercent=(usedCapacity / totalCapacity) * 100;  if (consumedPercent >= 75) {    return true;  }  return false;}  }
class C{  public void insert(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode next=location.next;  if (next == null) {    last=ilast;  } else {    next.prev=ilast;  }  location.next=ifirst;  ilast.next=next;  ifirst.prev=location;  cache=null;  insns.removeAll(false);}  }
class C{  private boolean conditionC0(String value,int index){  if (contains(value,index,4,"CHIA")) {    return true;  } else   if (index <= 1) {    return false;  } else   if (isVowel(charAt(value,index - 2))) {    return false;  } else   if (!contains(value,index - 1,3,"ACH")) {    return false;  } else {    char c=charAt(value,index + 2);    return (c != 'I' && c != 'E') || contains(value,index - 2,6,"BACHER","MACHER");  }}  }
class C{  public void removeListener(final PropertyChangeListener listener,final String mapHash){  pcs.removePropertyChangeListener(listener);}  }
class C{  public EmployeeRenderer(){  icoemployee=new ImageIcon(getClass().getClassLoader().getResource("uk/chromis/images/user.png"));}  }
class C{  public boolean remove(int val){  Integer v=val;  if (list.contains(v)) {    list.remove(v);    return true;  }  return false;}  }
class C{  public static Spacing createKeepingFirstColumnSpacing(final int minSpaces,final int maxSpaces,final boolean keepLineBreaks,final int keepBlankLines){  return myFactory.createKeepingFirstColumnSpacing(minSpaces,maxSpaces,keepLineBreaks,keepBlankLines);}  }
class C{  boolean matches(String s,int offset,int len){  if (exact)   return len == totalLen && exp.regionMatches(ignoreCase,0,s,offset,len);  if (len < totalLen)   return false;  if (prefixLen > 0 && !prefix.regionMatches(ignoreCase,0,s,offset,prefixLen) || suffixLen > 0 && !suffix.regionMatches(ignoreCase,0,s,offset + len - suffixLen,suffixLen))   return false;  if (mids == null)   return true;  int nmids=mids.length;  int spos=offset + prefixLen;  int limit=offset + len - suffixLen;  for (int i=0; i < nmids; i++) {    String ms=mids[i];    int ml=ms.length();    while (spos + ml <= limit && !ms.regionMatches(ignoreCase,0,s,spos,ml))     spos++;    if (spos + ml > limit)     return false;    spos+=ml;  }  return true;}  }
class C{  public static void main(String[] args){  SlideLogic logic=new SlideLogic();  System.out.println("Against Random player");  GameController gc=new GameController(logic);  Player xPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.MiniMax,Player.XMARK,4);  Player oPlayer=PlayerFactory.createPlayer(PlayerFactory.Random,Player.OMARK);  gc.setXPlayer(xPlayer);  xPlayer.logic(logic);  gc.setOPlayer(oPlayer);  oPlayer.logic(logic);  ((IntelligentAgent)xPlayer).opponent(oPlayer);  tournament(gc,100);  System.out.println("AlphaBeta 6 vs. AlphaBeta 6");  gc=new GameController(logic);  xPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.AlphaBeta,Player.XMARK,6);  oPlayer=PlayerFactory.createPlayerWithPly(PlayerFactory.AlphaBeta,Player.OMARK,6);  ((IntelligentAgent)xPlayer).opponent(oPlayer);  ((IntelligentAgent)oPlayer).opponent(xPlayer);  gc.setXPlayer(xPlayer);  xPlayer.logic(logic);  gc.setOPlayer(oPlayer);  oPlayer.logic(logic);  tournament(gc,100);}  }
class C{  @Override public String toString(){  String map=entrySet().stream().map(null).collect(Collectors.joining(", "));  return "(" + map + ")";}  }
class C{  public static void fill(byte[] a,byte val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  @Override public float generatorSortValue(Text url,CrawlDatum datum,float initSort) throws ScoringFilterException {  return datum.getScore();}  }
class C{  public static DurableClientInfoResponse create(DistributionManager dm,InternalDistributedMember recipient,DurableClientInfoRequest request){  DurableClientInfoResponse m=new DurableClientInfoResponse();  m.setRecipient(recipient);  try {    GemFireCacheImpl c=(GemFireCacheImpl)CacheFactory.getInstanceCloseOk(dm.getSystem());    if (c.getCacheServers().size() > 0) {      CacheServerImpl server=(CacheServerImpl)c.getCacheServers().iterator().next();switch (request.action) {case DurableClientInfoRequest.HAS_DURABLE_CLIENT_REQUEST:{          m.returnVal=server.getAcceptor().getCacheClientNotifier().hasDurableClient(request.durableId);          break;        }case DurableClientInfoRequest.IS_PRIMARY_FOR_DURABLE_CLIENT_REQUEST:{        m.returnVal=server.getAcceptor().getCacheClientNotifier().hasPrimaryForDurableClient(request.durableId);        break;      }  }}} catch (CacheClosedException ex) {}return m;}  }
class C{  public static boolean isUnlimitedStrengthPolicyAvailable(){  try {    return Cipher.getMaxAllowedKeyLength("AES") >= 256;  } catch (  final NoSuchAlgorithmException e) {    e.printStackTrace();  }  return false;}  }
class C{  @Override @Nullable public ProblemDescriptor[] checkFile(@NotNull PsiFile file,@NotNull InspectionManager manager,boolean isOnTheFly){  return null;}  }
class C{  public boolean isMine(TransactionBag transactionBag){  try {    Script script=getScriptPubKey();    if (script.isSentToRawPubKey()) {      byte[] pubkey=script.getPubKey();      return transactionBag.isPubKeyMine(pubkey);    }    if (script.isPayToScriptHash()) {      return transactionBag.isPayToScriptHashMine(script.getPubKeyHash());    } else {      byte[] pubkeyHash=script.getPubKeyHash();      return transactionBag.isPubKeyHashMine(pubkeyHash);    }  } catch (  ScriptException e) {    log.debug("Could not parse tx output script: {}",e.toString());    return false;  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (key == null || key.trim().length() == 0)   errors.add("key",new ActionMessage("errors.required",""));  if (value == null)   value="";  return errors;}  }
class C{  private boolean mustNotifyUser(){  return sSettingsMgr.notifyBattery && batteryInformationChanged() && sLastKnownPercentage % sSettingsMgr.batteryNotificationIntervalInt == 0;}  }
class C{  @Override public String toString(){  return attr;}  }
class C{  @Transactional public void persist(Collection<RawProtein<SignalPRawMatch>> rawProteins,Map<String,Signature> modelIdToSignatureMap,Map<String,Protein> proteinIdToProteinMap){  for (  RawProtein<SignalPRawMatch> rawProtein : rawProteins) {    Protein protein=proteinIdToProteinMap.get(rawProtein.getProteinIdentifier());    if (protein == null) {      throw new IllegalStateException("Cannot store match to a protein that is not in database " + "[protein ID= " + rawProtein.getProteinIdentifier() + "]");    }    Collection<SignalPRawMatch> rawMatches=rawProtein.getMatches();    if (rawMatches == null || rawMatches.size() != 1) {      throw new IllegalStateException("Protein did not have only one SignalP match! " + "[protein ID= " + rawProtein.getProteinIdentifier() + "]");    }    for (    SignalPRawMatch rawMatch : rawMatches) {      if (rawMatch == null)       continue;      Signature signature=modelIdToSignatureMap.get(rawMatch.getModelId());      SignalPOrganismType organismType=rawMatch.getOrganismType();      if (organismType == null) {        throw new IllegalStateException("SignalP match organism type was null! " + "[protein ID= " + rawProtein.getProteinIdentifier() + "]");      }      Set<SignalPMatch.SignalPLocation> locations=new HashSet<SignalPMatch.SignalPLocation>();      locations.add(new SignalPMatch.SignalPLocation(rawMatch.getLocationStart(),rawMatch.getLocationEnd(),rawMatch.getdScore()));      SignalPMatch match=new SignalPMatch(signature,organismType,locations);      protein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  public void testDrainToNullN(){  LinkedBlockingDeque q=populatedDeque(SIZE);  try {    q.drainTo(null,0);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public boolean isTrue(String condition){  boolean result=false;  if (condition != null && condition.length() > 0) {    String s=condition.substring(0,1);    if (s.equalsIgnoreCase("Y") || s.equals("1") || s.equalsIgnoreCase("T"))     result=true;  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public <T>void renameBean(@Nonnull String oldName,@Nonnull String newName,@Nonnull T bean){  NamedBeanHandle<T> oldBean=new NamedBeanHandle<>(oldName,bean);  for (  NamedBeanHandle<T> h : namedBeanHandles) {    if (oldBean.equals(h)) {      h.setName(newName);    }  }  updateListenerRef(oldName,newName,((NamedBean)bean));}  }
class C{  public static double area(double side){  return (5 * Math.pow(side,2)) / (4 * Math.tan(Math.PI / 5));}  }
class C{  public SIPHeader parseSIPHeader(String header) throws ParseException {  int start=0;  int end=header.length() - 1;  try {    while (header.charAt(start) <= 0x20)     start++;    while (header.charAt(end) <= 0x20)     end--;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new ParseException("Empty header.",0);  }  StringBuffer buffer=new StringBuffer(end + 1);  int i=start;  int lineStart=start;  boolean endOfLine=false;  while (i <= end) {    char c=header.charAt(i);    if (c == '\r' || c == '\n') {      if (!endOfLine) {        buffer.append(header.substring(lineStart,i));        endOfLine=true;      }    } else {      if (endOfLine) {        endOfLine=false;        if (c == ' ' || c == '\t') {          buffer.append(' ');          lineStart=i + 1;        } else {          lineStart=i;        }      }    }    i++;  }  buffer.append(header.substring(lineStart,i));  buffer.append('\n');  HeaderParser hp=ParserFactory.createParser(buffer.toString());  if (hp == null)   throw new ParseException("could not create parser",0);  return hp.parse();}  }
class C{  public CDeleteDatabaseAction(final JFrame parent,final IDatabase database,final ITreeUpdater updater){  super("Remove Database");  m_parent=Preconditions.checkNotNull(parent,"IE01871: Parent argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01872: Database argument can't be null");  m_updater=Preconditions.checkNotNull(updater,"IE02866: updater argument can not be null");  putValue(ACCELERATOR_KEY,HotKeys.DELETE_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_DELETE_DATABASE".charAt(0));}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public synchronized void closeAsset(){  ProjectAssetManager mgr=getLookup().lookup(ProjectAssetManager.class);  if (mgr != null && savable != null) {    for (Iterator<AssetKey> it=assetKeyList.iterator(); it.hasNext(); ) {      AssetKey assetKey1=it.next();      logger.log(Level.INFO,"Removing asset {0}, from cache via main asset {1}.",new Object[]{assetKey1.getName(),getName()});      mgr.deleteFromCache(assetKey1);    }    savable=null;  } else   if (mgr == null) {    logger.log(Level.WARNING,"Closing asset {0} with no ProjectAssetManager assigned..?",getName());  }}  }
class C{  protected void readGraphicControlExt(){  read();  int packed=read();  dispose=(packed & 0x1c) >> 2;  if (dispose == 0) {    dispose=1;  }  transparency=(packed & 1) != 0;  delay=readShort() * 10;  transIndex=read();  read();}  }
class C{  public FloatVector(float[] values){  this.values=values.clone();}  }
class C{  public final static RealMatrix procrustinate(RealMatrix X,RealMatrix Xstar,boolean allowTranslation,boolean allowDilation){  return new Procrustes(X,Xstar,allowTranslation,allowDilation).procrustinate(X);}  }
class C{  public void transformValues(TFloatFunction function){  byte[] states=_states;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public static String[] parseGroups(String csvRoles,String csvGroups){  List<String> groups=new ArrayList<String>();  parseCsv(groups,csvRoles);  parseCsv(groups,csvGroups);  return (String[])groups.toArray(new String[groups.size()]);}  }
class C{  public void deleteGeolocSharings() throws RemoteException {  mRichcallService.tryToDeleteGeolocSharings();}  }
class C{  private List sortListbyActions(final List<WorkFlowMatrix> workFlowdet){  final LinkedList unsortedList=new LinkedList(workFlowdet);  WorkFlowMatrix rejectedMatrix=null;  final List<WorkFlowMatrix> workflowSortedList=new LinkedList<>();  final List<WorkFlowMatrix> rejectedRelatedList=new LinkedList<>();  final Iterator<WorkFlowMatrix> workFlowdetiterator=workFlowdet.iterator();  while (workFlowdetiterator.hasNext()) {    final WorkFlowMatrix wfMatrix=workFlowdetiterator.next();    if (wfMatrix.getPendingActions() == null && "NEW".equalsIgnoreCase(wfMatrix.getCurrentState())) {      workflowSortedList.add(wfMatrix);      workFlowdetiterator.remove();    }  }  Boolean isworkFlowCorrect=Boolean.TRUE;  while (!workflowSortedList.isEmpty() && !"END".equalsIgnoreCase(workflowSortedList.get(workflowSortedList.size() - 1).getNextAction())) {    final int size=workFlowdet.size();    final String sortedwfMatrixnextAction=workflowSortedList.get(workflowSortedList.size() - 1).getNextAction();    final String sortedwfMatrixnextState=workflowSortedList.get(workflowSortedList.size() - 1).getNextState();    int count=0;    for (    final WorkFlowMatrix wfMatrix : workFlowdet) {      if (sortedwfMatrixnextAction.equalsIgnoreCase(wfMatrix.getPendingActions()) && sortedwfMatrixnextState.equalsIgnoreCase(wfMatrix.getCurrentState())) {        workflowSortedList.add(wfMatrix);      } else {        count++;        if (count >= size) {          isworkFlowCorrect=Boolean.FALSE;          break;        }      }    }    if (isworkFlowCorrect) {      for (int j=0; j < workFlowdet.size(); j++) {        final Long actwfMatrixnextAction=workFlowdet.get(j).getId();        for (        final WorkFlowMatrix wfMatrix : workflowSortedList) {          if (actwfMatrixnextAction.equals(wfMatrix.getId())) {            workFlowdet.remove(j);          }        }      }    } else {      break;    }  }  if (isworkFlowCorrect) {    final Iterator<WorkFlowMatrix> rejectworkFlowdetiterator=workFlowdet.iterator();    while (rejectworkFlowdetiterator.hasNext()) {      final WorkFlowMatrix wfMatrix=rejectworkFlowdetiterator.next();      if (wfMatrix.getCurrentState().equalsIgnoreCase(REJECTED)) {        rejectedMatrix=wfMatrix;        for (        final WorkFlowMatrix wfmatrix : workFlowdet) {          if (wfMatrix.getNextAction().equalsIgnoreCase(wfmatrix.getPendingActions()) && wfMatrix.getNextState().equalsIgnoreCase(wfmatrix.getCurrentState())) {            rejectedRelatedList.add(wfmatrix);          }        }        rejectworkFlowdetiterator.remove();      }    }    if (rejectedMatrix != null) {      workflowSortedList.add(rejectedMatrix);    }    for (    final WorkFlowMatrix wfMatrix : rejectedRelatedList) {      if (wfMatrix != null && !workflowSortedList.contains(wfMatrix)) {        workflowSortedList.add(wfMatrix);      }    }    return workflowSortedList;  } else {    return unsortedList;  }}  }
class C{  public Bundler putByteArray(String key,byte[] value){  bundle.putByteArray(key,value);  return this;}  }
class C{  public void addStringToTable(final byte[] string){  if (earlyChange) {    stringTable[tableIndex++]=string;  }  if (tableIndex == 511) {    bitsToGet=10;  } else   if (tableIndex == 1023) {    bitsToGet=11;  } else   if (tableIndex == 2047) {    bitsToGet=12;  }  if (!earlyChange) {    stringTable[tableIndex++]=string;  }}  }
class C{  public boolean isSetMap_int_strset(){  return this.map_int_strset != null;}  }
class C{  static final MaxFragmentLengthExtension fromExtensionData(byte[] extensionData,InetSocketAddress peerAddress) throws HandshakeException {  DatagramReader reader=new DatagramReader(extensionData);  int code=reader.read(CODE_BITS);  Length length=Length.fromCode(code);  if (length != null) {    return new MaxFragmentLengthExtension(length);  } else {    throw new HandshakeException(String.format("Peer uses unknown code [%d] in %s extension",code,ExtensionType.MAX_FRAGMENT_LENGTH.name()),new AlertMessage(AlertLevel.FATAL,AlertDescription.ILLEGAL_PARAMETER,peerAddress));  }}  }
class C{  private static void edgeSplit(SsaMethod result){  edgeSplitPredecessors(result);  edgeSplitMoveExceptionsAndResults(result);  edgeSplitSuccessors(result);}  }
class C{  public void addObserver(final Observer observer){  observers.add(observer);}  }
class C{  public static byte[] internalize(Name name){  return internalize(name.getByteArray(),name.getByteOffset(),name.getByteLength());}  }
class C{  protected void assertThrows(int expectedErrorCode,Statement stat,String sql){  try {    stat.execute(sql);    fail("Expected error: " + expectedErrorCode);  } catch (  SQLException ex) {    assertEquals(expectedErrorCode,ex.getErrorCode());  }}  }
class C{  public static StackPane stackPane(Node... controls){  StackPane sp=new StackPane();  sp.getChildren().addAll(controls);  return sp;}  }
class C{  public void removeAll(){  if (popupMenu != null)   popupMenu.removeAll();}  }
class C{  Type signature(MethodSymbol msym,List<JCTypeParameter> typarams,List<JCVariableDecl> params,JCTree res,JCVariableDecl recvparam,List<JCExpression> thrown,Env<AttrContext> env){  List<Type> tvars=enter.classEnter(typarams,env);  attr.attribTypeVariables(typarams,env);  ListBuffer<Type> argbuf=new ListBuffer<Type>();  for (List<JCVariableDecl> l=params; l.nonEmpty(); l=l.tail) {    memberEnter(l.head,env);    argbuf.append(l.head.vartype.type);  }  Type restype=res == null ? syms.voidType : attr.attribType(res,env);  Type recvtype;  if (recvparam != null) {    memberEnter(recvparam,env);    recvtype=recvparam.vartype.type;  } else {    recvtype=null;  }  ListBuffer<Type> thrownbuf=new ListBuffer<Type>();  for (List<JCExpression> l=thrown; l.nonEmpty(); l=l.tail) {    Type exc=attr.attribType(l.head,env);    if (!exc.hasTag(TYPEVAR)) {      exc=chk.checkClassType(l.head.pos(),exc);    } else     if (exc.tsym.owner == msym) {      exc.tsym.flags_field|=THROWS;    }    thrownbuf.append(exc);  }  MethodType mtype=new MethodType(argbuf.toList(),restype,thrownbuf.toList(),syms.methodClass);  mtype.recvtype=recvtype;  return tvars.isEmpty() ? mtype : new ForAll(tvars,mtype);}  }
class C{  public void addColumn(T value){  addColumn(value,true);}  }
class C{  public String toStringOriginalFormatSysLog(){  StringBuilder sb=new StringBuilder();  sb.append(getTimeBytes()).append(" ").append("[").append(getThreadName()).append("]").append(" ").append(getLevel()).append(" ").append(getLogContent());  return sb.toString();}  }
class C{  public void process(WatchedEvent event){  LOGGER.info("Event State :: " + event.getState().name() + " Event Type:: "+ event.getType()+ " Event path :: "+ event.getPath());  if (m_shutdown.get()) {    LOGGER.warn("Transport is in Shutdown State.");    return;  }switch (event.getType()) {case NodeChildrenChanged:    if (m_group != null) {      boolean isDiscoveryTopic=false;      for (      String nettydiscoverable : m_NettyDiscoverableTopics) {        if (event.getPath().contains(nettydiscoverable)) {          isDiscoveryTopic=true;          for (          String nettyconextnode : m_nettyContexts) {            if (event.getPath().contains(nettyconextnode)) {              m_group.registerChildrenCallback(event.getPath());              m_group.getChildrenAndSetWatch(event.getPath());              break;            }          }        }      }      if (!isDiscoveryTopic) {        m_group.registerChildrenCallback(event.getPath());        m_group.getChildrenAndSetWatch(event.getPath());      }    }  break;case NodeCreated:if (m_group != null) {  m_group.registerDataCallBack(event.getPath());}break;case NodeDataChanged:if (m_group != null) {m_group.registerDataCallBack(event.getPath());}break;case NodeDeleted:if (m_group != null) {int parentIndex=event.getPath().lastIndexOf('/');String parentNode=event.getPath().substring(0,parentIndex);m_group.getChildrenAndSetWatch(parentNode);}break;case None:break;default :break;}}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_test)   m_test.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public boolean isObbMounted(String rawPath){  Preconditions.checkNotNull(rawPath,"rawPath cannot be null");  try {    return mMountService.isObbMounted(rawPath);  } catch (  RemoteException e) {    Log.e(TAG,"Failed to check if OBB is mounted",e);  }  return false;}  }
class C{  public GPSetType(){}  }
class C{  public CompletableFuture<Object> eval(final String script){  return eval(script,null,new SimpleBindings());}  }
class C{  private static ServiceFieldRestRep findFieldByAssetType(String assetType,Collection<ServiceFieldRestRep> fields){  for (  ServiceFieldRestRep field : fields) {    if (StringUtils.equals(field.getAssetType(),assetType)) {      return field;    }  }  return null;}  }
class C{  private int doProcess(int codecNo,Buffer input){  if (codecNo == codecs.length) {    try {      if (input.isFragmented()) {        final Buffer[] fragments=input.getFragments();        for (int i=0; i < input.getFragmentsSize(); i++) {          Buffer fragment=fragments[i];          renderer.write(fragment);          fragment.setData(null);        }        input.setFragments(null);      } else {        renderer.write(input);      }      return Codec.BUFFER_PROCESSED_OK;    } catch (    Exception e) {      return Codec.BUFFER_PROCESSED_FAILED;    }  } else {    Codec codec=codecs[codecNo];    int returnVal;    do {      try {        returnVal=codec.process(input,buffers[codecNo]);      } catch (      Exception e) {        return Codec.BUFFER_PROCESSED_FAILED;      }      if (returnVal == Codec.BUFFER_PROCESSED_FAILED) {        return Codec.BUFFER_PROCESSED_FAILED;      }      if ((returnVal & Codec.OUTPUT_BUFFER_NOT_FILLED) == 0) {        if (!(buffers[codecNo].isDiscard() || buffers[codecNo].isEOM())) {          doProcess(codecNo + 1,buffers[codecNo]);        }        buffers[codecNo].setOffset(0);        buffers[codecNo].setLength(0);        buffers[codecNo].setFlags(0);        buffers[codecNo].setFragments(null);      }    } while ((returnVal & Codec.INPUT_BUFFER_NOT_CONSUMED) != 0);    return returnVal;  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void testZeroNeg(){  String numA="0";  String numB="-27384627835298756289327365";  String res="-27384627835298756289327365";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public Builder withDisque(String host){  return withDisque(host,DEFAULT_DISQUE_PORT);}  }
class C{  public static void updateView(Context context,View view,WindowManager.LayoutParams params){  if (context == null || view == null || params == null) {    throw new IllegalArgumentException("argument cannot be null.");  }  mWindowManager=getWindowManager(context);  mWindowManager.updateViewLayout(view,params);}  }
class C{  public void addBidirectionalLink(String fromLocation,String toLocation,Double distance){  links.set(fromLocation,toLocation,distance);  links.set(toLocation,fromLocation,distance);}  }
class C{  private ArrayList<Individuum> rouletteRankSelection(ArrayList<Individuum> population){  final int popsize=population.size();  int totalweight=(popsize * (popsize + 1)) >> 1;  ArrayList<Individuum> survivors=new ArrayList<>(popsize);  for (int i=0; i < popsize; i++) {    int z=random.nextInt(totalweight);    for (int j=0, rank=popsize; j < popsize; ++j, --rank) {      if (z < rank) {        survivors.add(population.get(j));        break;      }      z-=rank;    }  }  assert (survivors.size() == popsize) : "Selection step failed - implementation error?";  return survivors;}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  for (int i=0; i < this.labels.size(); i++) {    result.append(getPieLabelRecord(i).toString()).append("\n");  }  return result.toString();}  }
class C{  public void clearAttributes(){  this.attributes.clear();}  }
class C{  public void toggleSelection(int position){  if (position >= 0 && (mAdapter.getMode() == SelectableAdapter.MODE_SINGLE || mAdapter.getMode() == SelectableAdapter.MODE_MULTI)) {    mAdapter.toggleSelection(position);  }  if (mActionMode == null)   return;  int count=mAdapter.getSelectedItemCount();  if (count == 0) {    mActionMode.finish();  } else {    updateContextTitle(count);  }}  }
class C{  static <T>T maskNull(T key){  return key == null ? (T)NULL_KEY : key;}  }
class C{  public static byte[] copy(final byte[] ct){  return copy(ct,0,ct.length);}  }
class C{  public EntropyRateCalculatorDiscrete(int base,int history){  super(base,history);}  }
class C{  public <T>T transform(Object value,Class<T> expectedReturnType){  Object result;  if (value == null)   throw new IllegalArgumentException("The 'value' parameter cannot be null.");  try {    String transformerCanonicalName=getTransformerCanonicalName();    AbstractTransformer transformer=getTransformerInstance(transformerCanonicalName);    Object mapperInstance=getMapperInstance(transformer,value);    result=executeTransformation(mapperInstance,value);  } catch (  Exception e) {    throw new RuntimeException(e);  }  return (T)result;}  }
class C{  public boolean jobExists(Connection conn,JobKey jobKey) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_JOB_EXISTENCE));    ps.setString(1,jobKey.getName());    ps.setString(2,jobKey.getGroup());    rs=ps.executeQuery();    if (rs.next()) {      return true;    } else {      return false;    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public static void registerBackupManager(IBackupElectricItemManager manager){  backupManagers.add(manager);}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  try {    vset=reach(env,vset);    expr.checkValue(env,ctx,vset,exp);    if (expr.type.isType(TC_CLASS)) {      ClassDeclaration c=env.getClassDeclaration(expr.type);      if (exp.get(c) == null) {        exp.put(c,this);      }      ClassDefinition def=c.getClassDefinition(env);      ClassDeclaration throwable=env.getClassDeclaration(idJavaLangThrowable);      if (!def.subClassOf(env,throwable)) {        env.error(where,"throw.not.throwable",def);      }      expr=convert(env,ctx,Type.tObject,expr);    } else     if (!expr.type.isType(TC_ERROR)) {      env.error(expr.where,"throw.not.throwable",expr.type);    }  } catch (  ClassNotFound e) {    env.error(where,"class.not.found",e.name,opNames[op]);  }  CheckContext exitctx=ctx.getTryExitContext();  if (exitctx != null) {    exitctx.vsTryExit=exitctx.vsTryExit.join(vset);  }  return DEAD_END;}  }
class C{  public void search(){  int to_pop=config.pop_limit;  if (LOG.isDebugEnabled()) {    LOG.debug("Stack::search(): pop: {} size: {}",to_pop,candidates.size());    for (    Candidate c : candidates)     LOG.debug("{}",c);  }  while (to_pop > 0 && !candidates.isEmpty()) {    Candidate got=candidates.poll();    if (got != null) {      addHypothesis(got);      --to_pop;      for (      Candidate c : got.extend())       if (c != null) {        addCandidate(c);      }    }  }}  }
class C{  public void insertProperty(String key,String value){  String query=new MessageFormat(insertQuery).format(new Object[]{tableName,keyColumn,valueColumn});  int res=jdbcTemplate.update(query,new Object[]{key,value});  if (logger.isDebugEnabled()) {    if (res != 1) {      logger.warn("Al intentar insertar el par (" + key + ","+ value+ ") en al tabla "+ tableName+ " se han modificado "+ res+ " filas.");    }  }}  }
class C{  public void shuffle(ec.util.MersenneTwisterFast random){  double[] objs=this.objs;  int numObjs=this.numObjs;  double obj;  int rand;  for (int x=numObjs - 1; x >= 1; x--) {    rand=random.nextInt(x + 1);    obj=objs[x];    objs[x]=objs[rand];    objs[rand]=obj;  }}  }
class C{  public void chainWave(AdvancedModelRenderer[] boxes,float speed,float degree,double rootOffset,float swing,float swingAmount){  float offset=this.calculateChainOffset(rootOffset,boxes);  for (int index=0; index < boxes.length; index++) {    boxes[index].rotateAngleX+=this.calculateChainRotation(speed,degree,swing,swingAmount,offset,index);  }}  }
class C{  protected static List<String> parseRoles(String rolesAsString){  List<String> roles=new ArrayList<String>();  StringTokenizer roleTokens=new StringTokenizer(rolesAsString,",");  while (roleTokens.hasMoreTokens()) {    String roleToken=roleTokens.nextToken();    roles.add(roleToken);  }  return roles;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.888 -0400",hash_original_method="4583C21333B440A518B6EBCE7C54AD83",hash_generated_method="4583C21333B440A518B6EBCE7C54AD83") void handleStale(ParsedDirective pd) throws SaslException {  if (false != m_staleFlag)   throw new SaslException("Too many stale directives.");  if ("true".equals(pd.getValue()))   m_staleFlag=true; else   throw new SaslException("Invalid stale directive value: " + pd.getValue());}  }
class C{  public static StaticLeftIndexedBipartiteGraph buildSmallTestLeftIndexedBipartiteGraph(){  Long2ObjectMap<LongList> leftSideGraph=new Long2ObjectOpenHashMap<LongList>(3);  leftSideGraph.put(1,new LongArrayList(new long[]{2,3,4,5}));  leftSideGraph.put(2,new LongArrayList(new long[]{5,6,10}));  leftSideGraph.put(3,new LongArrayList(new long[]{7,8,5,9,2,10,11,1}));  return new StaticLeftIndexedBipartiteGraph(leftSideGraph);}  }
class C{  public ProfileVisit jobTitle(String jobTitle){  this.jobTitle=jobTitle;  return this;}  }
class C{  void resetAlignmentHints(){  maxTextWidth=maxAcceleratorWidth=maxTextOffset=maxIconOffset=0;}  }
class C{  public ScrollableScroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  if (interpolator == null) {    mInterpolator=new ViscousFluidInterpolator();  } else {    mInterpolator=interpolator;  }  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;  mPhysicalCoeff=computeDeceleration(0.84f);}  }
class C{  public static void main(String[] args){  String fileName=args[0];  String netFile=args[1];  Id<Person>[] toGetIds=new Id[toGet.length];  for (int i=0; i < toGet.length; i++) {    toGetIds[i]=Id.create(toGet[i],Person.class);  }  Config config=ConfigUtils.createConfig();  Scenario scenario=ScenarioUtils.createScenario(config);  (new MatsimNetworkReader(scenario.getNetwork())).readFile(netFile);  (new PopulationReader(scenario)).readFile(fileName);  Population population=scenario.getPopulation();  Map<Id<Person>,? extends Person> persons=population.getPersons();  Map<Id,Person> personsToKeep=new HashMap<Id,Person>(toGet.length);  for (  Id<Person> id : toGetIds) {    personsToKeep.put(id,persons.get(id));  }  persons.clear();  for (  Person person : personsToKeep.values()) {    population.addPerson(person);  }  PopulationWriter writer=new PopulationWriter(population,scenario.getNetwork());  writer.write(fileName + ".filtered");}  }
class C{  @Activate protected void activate(Map<String,Object> properties){}  }
class C{  protected void removeAllActions(KeyStroke keyStroke){synchronized (actions) {    if (actions.containsKey(keyStroke)) {      actions.remove(keyStroke);    }  }}  }
class C{  private boolean addTrustedCert(String alias,InputStream in) throws Exception {  if (alias == null) {    throw new Exception(rb.getString("Must.specify.alias"));  }  if (keyStore.containsAlias(alias)) {    MessageFormat form=new MessageFormat(rb.getString("Certificate.not.imported.alias.alias.already.exists"));    Object[] source={alias};    throw new Exception(form.format(source));  }  X509Certificate cert=null;  try {    cert=(X509Certificate)cf.generateCertificate(in);  } catch (  ClassCastException|CertificateException ce) {    throw new Exception(rb.getString("Input.not.an.X.509.certificate"));  }  boolean selfSigned=false;  if (isSelfSigned(cert)) {    cert.verify(cert.getPublicKey());    selfSigned=true;  }  if (noprompt) {    keyStore.setCertificateEntry(alias,cert);    return true;  }  String reply=null;  String trustalias=keyStore.getCertificateAlias(cert);  if (trustalias != null) {    MessageFormat form=new MessageFormat(rb.getString("Certificate.already.exists.in.keystore.under.alias.trustalias."));    Object[] source={trustalias};    System.err.println(form.format(source));    reply=getYesNoReply(rb.getString("Do.you.still.want.to.add.it.no."));  } else   if (selfSigned) {    if (trustcacerts && (caks != null) && ((trustalias=caks.getCertificateAlias(cert)) != null)) {      MessageFormat form=new MessageFormat(rb.getString("Certificate.already.exists.in.system.wide.CA.keystore.under.alias.trustalias."));      Object[] source={trustalias};      System.err.println(form.format(source));      reply=getYesNoReply(rb.getString("Do.you.still.want.to.add.it.to.your.own.keystore.no."));    }    if (trustalias == null) {      printX509Cert(cert,System.out);      reply=getYesNoReply(rb.getString("Trust.this.certificate.no."));    }  }  if (reply != null) {    if ("YES".equals(reply)) {      keyStore.setCertificateEntry(alias,cert);      return true;    } else {      return false;    }  }  try {    Certificate[] chain=establishCertChain(null,cert);    if (chain != null) {      keyStore.setCertificateEntry(alias,cert);      return true;    }  } catch (  Exception e) {    printX509Cert(cert,System.out);    reply=getYesNoReply(rb.getString("Trust.this.certificate.no."));    if ("YES".equals(reply)) {      keyStore.setCertificateEntry(alias,cert);      return true;    } else {      return false;    }  }  return false;}  }
class C{  public Access acquireUnisolatedConnectionAccess() throws InterruptedException {  return accessSemaphore.acquireExclusive();}  }
class C{  @Nullable public static QualifiedName findCanonicalImportPath(@NotNull PsiElement symbol,@Nullable PsiElement foothold){  PsiFileSystemItem srcfile=symbol instanceof PsiFileSystemItem ? (PsiFileSystemItem)symbol : symbol.getContainingFile();  if (srcfile == null) {    return null;  }  VirtualFile virtualFile=srcfile.getVirtualFile();  if (virtualFile == null) {    return null;  }  if (srcfile instanceof PsiFile && symbol instanceof PsiNamedElement && !(symbol instanceof PsiFileSystemItem)) {    PsiElement toplevel=symbol;    if (symbol instanceof PyFunction) {      final PyClass containingClass=((PyFunction)symbol).getContainingClass();      if (containingClass != null) {        toplevel=containingClass;      }    }    PsiDirectory dir=((PsiFile)srcfile).getContainingDirectory();    while (dir != null) {      PsiFile initPy=dir.findFile(PyNames.INIT_DOT_PY);      if (initPy == null) {        break;      }      if (initPy instanceof PyFile && toplevel.equals(((PyFile)initPy).getElementNamed(((PsiNamedElement)toplevel).getName()))) {        virtualFile=dir.getVirtualFile();      }      dir=dir.getParentDirectory();    }  }  final QualifiedName qname=findShortestImportableQName(foothold != null ? foothold : symbol,virtualFile);  if (qname != null) {    for (    PyCanonicalPathProvider provider : Extensions.getExtensions(PyCanonicalPathProvider.EP_NAME)) {      final QualifiedName restored=provider.getCanonicalPath(qname,foothold);      if (restored != null) {        return restored;      }    }  }  return qname;}  }
class C{  static ImageIcon iconFor(String name){  return new ImageIcon(Display2D.class.getResource(name));}  }
class C{  @Nullable public RedeemData findRedeemDataByScriptHash(ByteString bytes){  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.641 -0500",hash_original_method="5A9C6F4DB0BEA2BB31C909F5BB55A3E0",hash_generated_method="01391EDFBAD2071E255DF8EBB2C3EB51") public boolean shouldRewriteQueryFromText(){  return ((mSearchMode & SEARCH_MODE_QUERY_REWRITE_FROM_TEXT) == 1);}  }
class C{  @Override public void processAttribute(String namespace,String localName,String value) throws ParseException {  if (namespace.equals(Namespaces.xml) && localName.equals("lang")) {    lang=xmlLang;  }}  }
class C{  public static boolean saveModel(List<DataStorage> dataList,String projectName,SlicingHandler slicer){  float[] coordinates=null;  int coordinateCount=0;  float[] rotationMatrix=new float[16];  float scaleFactorX=0;  float scaleFactorY=0;  float scaleFactorZ=0;  Point center=new Point(0,0,0);  float adjustZ=0;  float[] vector=new float[3];  for (int i=0; i < dataList.size(); i++)   coordinateCount+=dataList.get(i).getVertexArray().length;  if (coordinateCount == 0) {    return false;  }  int normals=(coordinateCount / COORDS_PER_TRIANGLE) * 3;  ByteBuffer bb=ByteBuffer.allocate(84 + (coordinateCount + normals) * 4 + coordinateCount * 2);  bb.order(ByteOrder.LITTLE_ENDIAN);  byte[] header=new byte[80];  bb.put(header);  bb.putInt(coordinateCount / COORDS_PER_TRIANGLE);  Log.i("Slicer","Saving new model");  for (int i=0; i < dataList.size(); i++) {    DataStorage data=dataList.get(i);    rotationMatrix=data.getRotationMatrix();    scaleFactorX=data.getLastScaleFactorX();    scaleFactorY=data.getLastScaleFactorY();    scaleFactorZ=data.getLastScaleFactorZ();    adjustZ=data.getAdjustZ();    center=data.getLastCenter();    coordinates=data.getVertexArray();    for (int j=0; j < coordinates.length; j+=9) {      bb.putFloat(0);      bb.putFloat(0);      bb.putFloat(0);      vector=setTransformationVector(coordinates[j],coordinates[j + 1],coordinates[j + 2],rotationMatrix,scaleFactorX,scaleFactorY,scaleFactorZ,adjustZ,center);      bb.putFloat(vector[0]);      bb.putFloat(vector[1]);      bb.putFloat(vector[2]);      vector=setTransformationVector(coordinates[j + 3],coordinates[j + 4],coordinates[j + 5],rotationMatrix,scaleFactorX,scaleFactorY,scaleFactorZ,adjustZ,center);      bb.putFloat(vector[0]);      bb.putFloat(vector[1]);      bb.putFloat(vector[2]);      vector=setTransformationVector(coordinates[j + 6],coordinates[j + 7],coordinates[j + 8],rotationMatrix,scaleFactorX,scaleFactorY,scaleFactorZ,adjustZ,center);      bb.putFloat(vector[0]);      bb.putFloat(vector[1]);      bb.putFloat(vector[2]);      bb.putShort((short)0);    }  }  bb.position(0);  byte[] data=bb.array();  Log.i("Slicer","Saved");  if (slicer != null) {    slicer.setData(data);  } else {    String path=LibraryController.getParentFolder().getAbsolutePath() + "/" + projectName+ ".stl";    try {      FileOutputStream fos=new FileOutputStream(path);      fos.write(data);      fos.close();    } catch (    Exception e) {      e.printStackTrace();    }    File file=new File(path);    LibraryModelCreation.createFolderStructure(mContext,file);    file.delete();  }  return true;}  }
class C{  public static void println(char x){  out.println(x);}  }
class C{  public void put(Buffer buffer){  activeAssembler=getAssembler(buffer.getTimeStamp());  assemblers[activeAssembler].put(buffer);}  }
class C{  public void prune(HashMap<String,TreeMap<String,Integer>> table){  for (Iterator<Map.Entry<String,TreeMap<String,Integer>>> I=table.entrySet().iterator(); I.hasNext(); ) {    Map.Entry<String,TreeMap<String,Integer>> e=I.next();    int sum=0;    for (    Integer count : e.getValue().values())     sum+=count;    for (Iterator<Map.Entry<String,Integer>> J=e.getValue().entrySet().iterator(); J.hasNext(); ) {      int count=J.next().getValue();      if (count * 100 < sum) {        sum-=count;        J.remove();      }    }    if (sum <= 10)     I.remove();  }}  }
class C{  public void testCreateIdForWAR() throws Exception {  WAR war=createWar();  String name=deployer.createIdForDeployable(war);  assertEquals("cargo",name);}  }
class C{  public static String extractDataRoot(String publicURL,String accessURL){  String reminder=publicURL.substring(accessURL.length() + 1);  String container=null;  if (reminder.indexOf("/") > 0) {    container=reminder.substring(0,reminder.indexOf("/"));  } else {    container=reminder;  }  if (container.endsWith("/")) {    container=container.substring(0,container.length() - 1);  }  return container;}  }
class C{  public DTEDLocator(String directory){  this(new File(directory));}  }
class C{  public boolean isForcedUpdate(){  return forceUpdate;}  }
class C{  @SuppressWarnings("unchecked") private static final <T>T[] mergeAccess(T[] array1,T[] array2,boolean override){  if (array1 == null) {    System.out.println("null !!!");  }  List<T> list=new ArrayList<T>();  for (  T po : array1) {    list.add(po);  }  for (  T o2 : array2) {    boolean found=false;    for (int i=0; i < array1.length; i++) {      final T o1=array1[i];      if (o1 instanceof OrgAccess) {        final OrgAccess oa1=(OrgAccess)o1;        final OrgAccess oa2=(OrgAccess)o2;        found=oa1.equals(oa2);        if (found && override) {          if (!oa2.readOnly)           oa1.readOnly=false;        }      } else       if (o1 instanceof MTableAccess) {        final MTableAccess ta1=(MTableAccess)o1;        final MTableAccess ta2=(MTableAccess)o2;        found=ta1.getAD_Table_ID() == ta2.getAD_Table_ID();        if (found && override) {          if (ta2.isCanReport())           ta1.setIsCanExport(true);          if (ta2.isCanReport())           ta1.setIsCanReport(true);          if (!ta2.isReadOnly())           ta1.setIsCanExport(false);          if (!ta2.isExclude())           ta1.setIsExclude(false);        }      } else       if (o1 instanceof MColumnAccess) {        final MColumnAccess ca1=(MColumnAccess)o1;        final MColumnAccess ca2=(MColumnAccess)o2;        found=ca1.getAD_Column_ID() == ca2.getAD_Column_ID();        if (found && override) {          if (!ca2.isReadOnly())           ca1.setIsReadOnly(false);          if (!ca2.isExclude())           ca1.setIsExclude(false);        }      } else       if (o1 instanceof MRecordAccess) {        final MRecordAccess ra1=(MRecordAccess)o1;        final MRecordAccess ra2=(MRecordAccess)o2;        found=ra1.getAD_Table_ID() == ra2.getAD_Table_ID() && ra1.getRecord_ID() == ra2.getRecord_ID();        if (found && override) {          if (!ra2.isReadOnly())           ra1.setIsReadOnly(false);          if (!ra2.isDependentEntities())           ra1.setIsDependentEntities(false);          if (!ra2.isExclude())           ra1.setIsExclude(false);        }      } else {        throw new AdempiereException("Not supported objects - " + o1 + ", "+ o2);      }      if (found) {        break;      }    }    if (!found) {      list.add(o2);    }  }  T[] arr=(T[])Array.newInstance(array1.getClass().getComponentType(),list.size());  return list.toArray(arr);}  }
class C{  static void useImplement(DoubledImplement di,boolean isOne){  try {    di.one();    if (!isOne) {      System.err.println("ERROR: did not get LinkageError on DI");    }  } catch (  LinkageError le) {    if (!isOne) {      System.out.println("Got LinkageError on DI (late)");    } else {      throw le;    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getAir(stack);}  }
class C{  private int handleR(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (index == value.length() - 1 && !slavoGermanic && contains(value,index - 2,2,"IE") && !contains(value,index - 4,2,"ME","MA")) {    result.appendAlternate('R');  } else {    result.append('R');  }  return charAt(value,index + 1) == 'R' ? index + 2 : index + 1;}  }
class C{  public void dup2X2(){  mv.visitInsn(Opcodes.DUP2_X2);}  }
class C{  private boolean skipToNextSync(ParsableByteArray pesBuffer){  while (pesBuffer.bytesLeft() > 0) {    if (!lastByteWas0B) {      lastByteWas0B=pesBuffer.readUnsignedByte() == 0x0B;      continue;    }    int secondByte=pesBuffer.readUnsignedByte();    if (secondByte == 0x77) {      lastByteWas0B=false;      return true;    } else {      lastByteWas0B=secondByte == 0x0B;    }  }  return false;}  }
class C{  public static String evaluateModel(String classifierString,String[] options) throws Exception {  Classifier classifier;  try {    classifier=AbstractClassifier.forName(classifierString,null);  } catch (  Exception e) {    throw new Exception("Can't find class with name " + classifierString + '.');  }  return evaluateModel(classifier,options);}  }
class C{  private List<Achievement> checkAchievements(Player player,List<Achievement> toCheck){  List<Achievement> reached=new ArrayList<Achievement>();  if (!player.arePlayerAchievementsLoaded()) {    return reached;  }  for (  Achievement achievement : toCheck) {    if (achievement.isFulfilled(player) && !player.hasReachedAchievement(achievement.getIdentifier())) {      logReachingOfAnAchievement(player,achievement);      if (achievement.isActive()) {        reached.add(achievement);      }    }  }  return reached;}  }
class C{  public static boolean verifySepsetIntegrity(SepsetMap sepset,Graph pattern){  for (  Node x : pattern.getNodes()) {    for (    Node y : pattern.getNodes()) {      if (x == y) {        continue;      }      if ((pattern.isAdjacentTo(y,x)) != (sepset.get(x,y) == null)) {        System.out.println("Sepset not consistent with graph for {" + x + ", "+ y+ "}");        return false;      }    }  }  return true;}  }
class C{  public static int compileShader(final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compileStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);    if (compileStatus[0] == 0) {      Log.e(TAG,"Error compiling shader: " + GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  public void updateApplicationTimeout(TimeSpan span) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  if (span != null)   scope.setAttribute("applicationtimeout",span.getDay() + "," + span.getHour()+ ","+ span.getMinute()+ ","+ span.getSecond()); else   scope.removeAttribute("applicationtimeout");}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  public void fill(final long value){  for (long i=0; i < count; i++) {    setRegister(i,value);  }}  }
class C{  public static ValueTime convertTime(Time x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long nanos=nanosFromCalendar(cal);  return ValueTime.fromNanos(nanos);}  }
class C{  public HomogenousSubstitutionModelDelegate(Tree tree,BranchModel branchModel){  this(tree,branchModel,0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public InputStream openClassfile(String classname){  if (this.classname.equals(classname))   return new ByteArrayInputStream(classfile); else   return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public McElieceCCA2Parameters(){  this.digest=new SHA256Digest();}  }
class C{  public void stop(){  cancelled=true;}  }
class C{  public static void main(String[] args) throws IllegalArgumentException, IOException {  FlagConfig flagConfig=FlagConfig.getFlagConfig(args);  args=flagConfig.remainingArgs;  if (flagConfig.luceneindexpath().isEmpty()) {    throw (new IllegalArgumentException("-luceneindexpath argument must be provided."));  }  VerbatimLogger.info("Building PSI model from index in: " + flagConfig.luceneindexpath() + "\n");  VerbatimLogger.info("Minimum frequency = " + flagConfig.minfrequency() + "\n");  VerbatimLogger.info("Maximum frequency = " + flagConfig.maxfrequency() + "\n");  VerbatimLogger.info("Number non-alphabet characters = " + flagConfig.maxnonalphabetchars() + "\n");  createIncrementalPSIVectors(flagConfig);}  }
class C{  public void addCloseHook(CloseHook hook){  if (closeHooks == null) {    closeHooks=new ArrayList<>();  }  closeHooks.add(hook);}  }
class C{  public void addFrequency(Token token,int docFreq){  if (tokenFrequency == null) {    tokenFrequency=new LinkedHashMap<>();  }  tokenFrequency.put(token,docFreq);}  }
class C{  @Override public IValue copy(final IScope scope) throws GamaRuntimeException {  return new MetaPopulation(populationSets.toArray(new IPopulationSet[populationSets.size()]));}  }
class C{  public AbstractSiteMap parseSiteMap(byte[] content,URL url) throws UnknownFormatException, IOException {  if (url == null) {    return null;  }  String filename=FilenameUtils.getName(url.getPath());  String contentType=TIKA.detect(content,filename);  return parseSiteMap(contentType,content,url);}  }
class C{  public Misclassifications(SessionModel model1,SessionModel model2,Parameters params){  if (params == null) {    throw new NullPointerException("Parameters must not be null");  }  if (model1 instanceof VcpcRunner && model2 instanceof PcRunner) {    this.usePcOutputs=true;    setVcpcFields((VcpcRunner)model1);    setPcFields((PcRunner)model2);  }  if ((model2 instanceof VcpcRunner && model1 instanceof PcRunner)) {    this.usePcOutputs=true;    setVcpcFields((VcpcRunner)model2);    setPcFields((PcRunner)model1);  }  if (model1 instanceof CpcRunner && model2 instanceof PcRunner) {    this.useCpcOutputs=true;    setCpcFields((CpcRunner)model1);    setPcFields((PcRunner)model2);  }  if ((model2 instanceof CpcRunner && model1 instanceof PcRunner)) {    this.useCpcOutputs=true;    setCpcFields((CpcRunner)model2);    setPcFields((PcRunner)model1);  }  if (model1 instanceof VcpcRunner && model2 instanceof CpcRunner) {    this.useVcpcOutputs=true;    setVcpcFields((VcpcRunner)model1);    setCpcFields((CpcRunner)model2);  }  if ((model2 instanceof VcpcRunner && model1 instanceof CpcRunner)) {    this.useVcpcOutputs=true;    setVcpcFields((VcpcRunner)model2);    setCpcFields((CpcRunner)model1);  }  if (model1 instanceof CpcRunner && model2 instanceof SampleVcpcRunner) {    this.useScpcOutputs=true;    setCpcFields((CpcRunner)model1);    setSvcpcFields((SampleVcpcRunner)model2);  }  if ((model2 instanceof CpcRunner && model1 instanceof SampleVcpcRunner)) {    this.useScpcOutputs=true;    setCpcFields((CpcRunner)model2);    setSvcpcFields((SampleVcpcRunner)model1);  }  if (model1 instanceof VcpcRunner && model2 instanceof SampleVcpcRunner) {    this.useSvcpcOutputs=true;    setVcpcFields((VcpcRunner)model1);    setSvcpcFields((SampleVcpcRunner)model2);  }  if ((model2 instanceof VcpcRunner && model1 instanceof SampleVcpcRunner)) {    this.useSvcpcOutputs=true;    setVcpcFields((VcpcRunner)model2);    setSvcpcFields((SampleVcpcRunner)model1);  }  if (model1 instanceof CpcRunner && model2 instanceof SampleVcpcFastRunner) {    this.useSFcpcOutputs=true;    setCpcFields((CpcRunner)model1);    setSfvcpcFields((SampleVcpcFastRunner)model2);  }  if ((model2 instanceof CpcRunner && model1 instanceof SampleVcpcFastRunner)) {    this.useSFcpcOutputs=true;    setCpcFields((CpcRunner)model2);    setSfvcpcFields((SampleVcpcFastRunner)model1);  }  if (model1 instanceof CpcRunner && model2 instanceof VcpcFastRunner) {    this.useFcpcOutputs=true;    setCpcFields((CpcRunner)model1);    setVcpcFastFields((VcpcFastRunner)model2);  }  if (model2 == null) {    model2=new DagWrapper(new Dag());  }  if (model1 == null) {    model1=new DagWrapper(new Dag());  }  if (!(model1 instanceof MultipleGraphSource) || !(model2 instanceof MultipleGraphSource)) {    throw new IllegalArgumentException("Must be graph sources.");  }  this.params=params;  String referenceName=params.getString("referenceGraphName",null);  if (referenceName == null) {    throw new IllegalArgumentException("Must specify a reference graph.");  }  if (referenceName.equals(model1.getName())) {    if (model1 instanceof Simulation && model2 instanceof GeneralAlgorithmRunner) {      this.referenceGraphs=((GeneralAlgorithmRunner)model2).getCompareGraphs(((Simulation)model1).getGraphs());    } else     if (model1 instanceof MultipleGraphSource) {      this.referenceGraphs=((MultipleGraphSource)model1).getGraphs();    }    if (model2 instanceof MultipleGraphSource) {      this.targetGraphs=((MultipleGraphSource)model2).getGraphs();    }    if (referenceGraphs == null) {      this.referenceGraphs=Collections.singletonList(((GraphSource)model1).getGraph());    }    if (targetGraphs == null) {      this.targetGraphs=Collections.singletonList(((GraphSource)model2).getGraph());    }  } else   if (referenceName.equals(model2.getName())) {    if (model2 instanceof Simulation && model1 instanceof GeneralAlgorithmRunner) {      this.referenceGraphs=((GeneralAlgorithmRunner)model1).getCompareGraphs(((Simulation)model2).getGraphs());    } else     if (model1 instanceof MultipleGraphSource) {      this.referenceGraphs=((MultipleGraphSource)model2).getGraphs();    }    if (model1 instanceof MultipleGraphSource) {      this.targetGraphs=((MultipleGraphSource)model1).getGraphs();    }    if (referenceGraphs == null) {      this.referenceGraphs=Collections.singletonList(((GraphSource)model2).getGraph());    }    if (targetGraphs == null) {      this.targetGraphs=Collections.singletonList(((GraphSource)model1).getGraph());    }  } else {    throw new IllegalArgumentException("Neither of the supplied session models is named '" + referenceName + "'.");  }  for (int i=0; i < targetGraphs.size(); i++) {    targetGraphs.set(i,GraphUtils.replaceNodes(targetGraphs.get(i),referenceGraphs.get(i).getNodes()));  }  if (algorithm != null) {    for (int i=0; i < referenceGraphs.size(); i++) {      referenceGraphs.set(i,algorithm.getComparisonGraph(referenceGraphs.get(i)));    }  }  if (referenceGraphs.size() != targetGraphs.size()) {    throw new IllegalArgumentException("I was expecting the same number of graphs in each parent.");  }  TetradLogger.getInstance().log("info","Graph Comparison");  for (int i=0; i < referenceGraphs.size(); i++) {    TetradLogger.getInstance().log("comparison","\nModel " + (i + 1));    TetradLogger.getInstance().log("comparison",getComparisonString(i));  }  this.nf=NumberFormatUtil.getInstance().getNumberFormat();}  }
class C{  public void testSerializationCompatibility() throws Exception {  SerializationTest.verifyGolden(this,new HttpRetryException(DETAIL,100,LOCATION),comparator);}  }
class C{  public FlowRadioGroup(Context context){  this(context,null);}  }
class C{  public boolean hasMoreSpaceStationElements(){  return this.getTurnSSEnum().hasMoreElements();}  }
class C{  public TextParserX(){  m_nullTextString="";  m_nullNumberString="";  m_nullDateTimeString="";  m_decimalSeparator=',';  m_datetimePattern="dd-MM-yyyy HH:mm:ss";  m_datePattern="dd-MM-yyyy";  m_timePattern="HH:mm:ss";}  }
class C{  protected static int findNextNewLineChar(CharSequence s,int start){  for (int i=start; i < s.length(); i++) {    if (s.charAt(i) == '\n') {      return i;    }  }  return -1;}  }
class C{  public IconButton(String text,String iconName){  setRolloverEnabled(true);  this.iconName=iconName;  this.message=text;  initialized=true;  useTransparentBackground=true;  updateButton();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.477 -0500",hash_original_method="2098CB9502FC347E6CEF0B39981B1FB6",hash_generated_method="F5FCAF9BD5CA5DB34A9139FFD115ABDC") private static void dualPivotQuicksort(double[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  double ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    double t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    double t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    double t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    double t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    double t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    double t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    double t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  double pivot1=ae2;  a[e2]=a[left];  double pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      double ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public SemanticRelatedness_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_MeasureType=jcas.getRequiredFeatureDE(casType,"MeasureType","uima.cas.String",featOkTst);  casFeatCode_MeasureType=(null == casFeat_MeasureType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_MeasureType).getCode();  casFeat_RelatednessValue=jcas.getRequiredFeatureDE(casType,"RelatednessValue","uima.cas.Double",featOkTst);  casFeatCode_RelatednessValue=(null == casFeat_RelatednessValue) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_RelatednessValue).getCode();  casFeat_MeasureName=jcas.getRequiredFeatureDE(casType,"MeasureName","uima.cas.String",featOkTst);  casFeatCode_MeasureName=(null == casFeat_MeasureName) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_MeasureName).getCode();  casFeat_WordPair=jcas.getRequiredFeatureDE(casType,"WordPair","org.dkpro.similarity.type.WordPair",featOkTst);  casFeatCode_WordPair=(null == casFeat_WordPair) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_WordPair).getCode();  casFeat_Term1=jcas.getRequiredFeatureDE(casType,"Term1","uima.cas.String",featOkTst);  casFeatCode_Term1=(null == casFeat_Term1) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Term1).getCode();  casFeat_Term2=jcas.getRequiredFeatureDE(casType,"Term2","uima.cas.String",featOkTst);  casFeatCode_Term2=(null == casFeat_Term2) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Term2).getCode();  casFeat_AnnotationPair=jcas.getRequiredFeatureDE(casType,"AnnotationPair","org.dkpro.similarity.type.AnnotationPair",featOkTst);  casFeatCode_AnnotationPair=(null == casFeat_AnnotationPair) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_AnnotationPair).getCode();}  }
class C{  @Override public double op(final double x){  if (x <= 0.0)   return 0.0;  final double gln=new GammaFunction().logValue(a);  if (x < (a + 1.0)) {    double ap=a;    double del=1.0 / a;    double sum=del;    for (int n=1; n <= 100; n++) {      ap+=1.0;      del*=x / ap;      sum+=del;      if (Math.abs(del) < Math.abs(sum) * 3.0e-7)       return sum * Math.exp(-x + a * Math.log(x) - gln);    }  } else {    double b=x + 1.0 - a;    double c=Constants.QL_MAX_REAL;    double d=1.0 / b;    double h=d;    for (int n=1; n <= 100; n++) {      final double an=-1.0 * n * (n - a);      b+=2.0;      d=an * d + b;      if (Math.abs(d) < Constants.QL_EPSILON)       d=Constants.QL_EPSILON;      c=b + an / c;      if (Math.abs(c) < Constants.QL_EPSILON)       c=Constants.QL_EPSILON;      d=1.0 / d;      final double del=d * c;      h*=del;      if (Math.abs(del - 1.0) < Constants.QL_EPSILON)       return h * Math.exp(-x + a * Math.log(x) - gln);    }  }  throw new ArithmeticException(ACCURACY_NOT_REACHED);}  }
class C{  static Monitoring authenticate() throws GeneralSecurityException, IOException {  GoogleCredential credential=GoogleCredential.getApplicationDefault().createScoped(MonitoringScopes.all());  HttpTransport httpTransport=new NetHttpTransport();  JsonFactory jsonFactory=new JacksonFactory();  Monitoring service=new Monitoring.Builder(httpTransport,jsonFactory,credential).setApplicationName("Monitoring Sample").build();  return service;}  }
class C{  public void request(RequestContext context,Object obj,String method,Object input){  request(context,obj.getClass().getName() + "." + method,input == null ? "" : "(" + input + ")");}  }
class C{  public MyStack(){  list=new java.util.ArrayList<Object>();}  }
class C{  public static void processImportedEntities(@NotNull PsiElement rootElement,@NotNull PerlNamespaceEntityProcessor<PerlExportDescriptor> processor){  for (  PsiElement element : PerlPsiUtil.collectUseStatements(rootElement)) {    PerlUseStatement useStatement=(PerlUseStatement)element;    String packageName=useStatement.getPackageName();    if (packageName != null) {      for (      PerlExportDescriptor entry : useStatement.getPackageProcessor().getImports(useStatement)) {        processor.process(packageName,entry);      }    }  }}  }
class C{  private void expungeStaleEntries(){  for (Object x; (x=queue.poll()) != null; ) {synchronized (queue) {      @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)x;      int i=indexFor(e.hash,table.length);      Entry<K,V> prev=table[i];      Entry<K,V> p=prev;      while (p != null) {        Entry<K,V> next=p.next;        if (p == e) {          if (prev == e)           table[i]=next; else           prev.next=next;          e.value=null;          size--;          break;        }        prev=p;        p=next;      }    }  }}  }
class C{  public dl addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static float[] subarray(float[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return EMPTY_FLOAT_ARRAY;  }  float[] subarray=new float[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  protected int[] refineOwners(KDTreeNode node,Instances centers,int[] candidates) throws Exception {  int[] owners=new int[candidates.length];  double minDistance=Double.POSITIVE_INFINITY;  int ownerIndex=-1;  Instance owner;  int numCand=candidates.length;  double[] distance=new double[numCand];  boolean[] inside=new boolean[numCand];  for (int i=0; i < numCand; i++) {    distance[i]=distanceToHrect(node,centers.instance(candidates[i]));    inside[i]=(distance[i] == 0.0);    if (distance[i] < minDistance) {      minDistance=distance[i];      ownerIndex=i;    }  }  owner=(Instance)centers.instance(candidates[ownerIndex]).copy();  int index=0;  for (int i=0; i < numCand; i++) {    if ((inside[i]) || (distance[i] == distance[ownerIndex])) {      owners[index++]=candidates[i];    } else {      Instance competitor=(Instance)centers.instance(candidates[i]).copy();      if (!candidateIsFullOwner(node,owner,competitor)) {        owners[index++]=candidates[i];      }    }  }  int[] result=new int[index];  for (int i=0; i < index; i++)   result[i]=owners[i];  return result;}  }
class C{  public RectListManager(Rectangle rect){  this();  add(rect);}  }
class C{  public int port(){  return _port;}  }
class C{  private void writeCharsInternal(String text,boolean skip){  log.log(Level.FINE,"writeCharsInternal({0})",text);  if (current.getElement() != null) {    if (skip) {      text=new String(skipWhitespaces(text.toCharArray()));      if (!text.isEmpty()) {        current.getElement().addContent(new WbXmlContent(text));      } else {        log.log(Level.FINE,"Skipping characters {0}",text);      }    } else {      current.getElement().addContent(new WbXmlContent(text));    }  }}  }
class C{  void updateOnReinitialize(Context context){}  }
class C{  private boolean validateValues(){  boolean isValid=true;  boolean isEdit=isEdit();  StringBuilder errorMessage=new StringBuilder();  if (acsTxt.getText().isEmpty() || acsTxt.getText().equalsIgnoreCase(Messages.acsTxt))   errorMessage.append(Messages.acsTxtErr).append("\n");  if (relTxt.getText().isEmpty())   errorMessage.append(Messages.relTxtErr).append("\n");  if (!certTxt.getText().isEmpty() && !certTxt.getText().toLowerCase().endsWith(".cer"))   errorMessage.append(Messages.certTxtInvalidExt).append("\n");  if ((!isEdit && certTxt.getText().isEmpty()) || (isEdit && certTxt.getText().isEmpty() && embedCertCheck.getSelection() == false))   errorMessage.append(Messages.certTxtErr).append("\n");  if (!isEdit && !certTxt.getText().isEmpty() && embedCertCheck.getSelection() == true) {    if (!new File(CerPfxUtil.getCertificatePath(certTxt.getText())).exists()) {      errorMessage.append(Messages.acsNoValidCert).append("\n");    }  }  if (errorMessage.length() > 0) {    setErrorMessage(errorMessage.toString());    isValid=false;  } else {    setErrorMessage(null);  }  return isValid;}  }
