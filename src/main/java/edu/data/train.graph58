class C{  protected final static RowSet mergeEnum(final RowCollection c0,final RowCollection c1) throws SpaceExceededException {  assert c0.rowdef == c1.rowdef : c0.rowdef.toString() + " != " + c1.rowdef.toString();  final RowSet r=new RowSet(c0.rowdef,c0.size() + c1.size());  try {    c0.sort();  } catch (  final Throwable e) {    ConcurrentLog.severe("RowSet","collection corrupted. cleaned. " + e.getMessage(),e);    c0.clear();  }  try {    c1.sort();  } catch (  final Throwable e) {    ConcurrentLog.severe("RowSet","collection corrupted. cleaned. " + e.getMessage(),e);    c1.clear();  }  int c0i=0, c1i=0;  int c0p, c1p;  int o;  final int objectsize=c0.rowdef.objectsize;  final int c0s=c0.size();  final int c1s=c1.size();  while (c0i < c0s && c1i < c1s) {    c0p=c0i * objectsize;    c1p=c1i * objectsize;    o=c0.rowdef.objectOrder.compare(c0.chunkcache,c0p,c1.chunkcache,c1p,c0.rowdef.primaryKeyLength);    if (o == 0) {      r.addSorted(c0.chunkcache,c0p,objectsize);      c0i++;      c1i++;      continue;    }    if (o < 0) {      r.addSorted(c0.chunkcache,c0p,objectsize);      c0i++;      continue;    }    if (o > 0) {      r.addSorted(c1.chunkcache,c1p,objectsize);      c1i++;      continue;    }  }  while (c0i < c0.size()) {    r.addSorted(c0.chunkcache,c0i * objectsize,objectsize);    c0i++;  }  while (c1i < c1.size()) {    r.addSorted(c1.chunkcache,c1i * objectsize,objectsize);    c1i++;  }  return r;}  }
class C{  private static BigDecimal daysPlusSeconds(BigInteger days,BigDecimal seconds){  return seconds.add(new BigDecimal(days.multiply(BigInteger.valueOf(24 * 60 * 60))));}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tFull name of base associator.\n" + "\t(default: " + defaultAssociatorString() + ")","W",1,"-W"));  if (m_Associator instanceof OptionHandler) {    result.addElement(new Option("","",0,"\nOptions specific to associator " + m_Associator.getClass().getName() + ":"));    result.addAll(Collections.list(((OptionHandler)m_Associator).listOptions()));  }  return result.elements();}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public void reverse(int from,int to){  if (from == to) {    return;  }  if (from > to) {    throw new IllegalArgumentException("from cannot be greater than to");  }  for (int i=from, j=to - 1; i < j; i++, j--) {    swap(i,j);  }}  }
class C{  public void write(Buffer buffer) throws IOException {  rtpTransmitter.sendRtpPacket(buffer);}  }
class C{  private void startAppListActivity(){  Intent intent=new Intent(LoginActivity.this,AppListActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);}  }
class C{  public boolean hasOutFile(){  CompilerOptions options=getCompilerOptions();  if (options == null) {    return false;  }  return !StringUtils.isEmpty(options.getOutFile()) || !StringUtils.isEmpty(options.getOut());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testRandomFiles() throws IOException {  Directory dir=newDirectory();  String segment="_123";  int chunk=1024;  SegmentInfo si=newSegmentInfo(dir,"_123");  byte[] segId=si.getId();  createRandomFile(dir,segment + ".zero",0,segId);  createRandomFile(dir,segment + ".one",1,segId);  createRandomFile(dir,segment + ".ten",10,segId);  createRandomFile(dir,segment + ".hundred",100,segId);  createRandomFile(dir,segment + ".big1",chunk,segId);  createRandomFile(dir,segment + ".big2",chunk - 1,segId);  createRandomFile(dir,segment + ".big3",chunk + 1,segId);  createRandomFile(dir,segment + ".big4",3 * chunk,segId);  createRandomFile(dir,segment + ".big5",3 * chunk - 1,segId);  createRandomFile(dir,segment + ".big6",3 * chunk + 1,segId);  createRandomFile(dir,segment + ".big7",1000 * chunk,segId);  List<String> files=new ArrayList<>();  for (  String file : dir.listAll()) {    if (file.startsWith(segment)) {      files.add(file);    }  }  si.setFiles(files);  si.getCodec().compoundFormat().write(dir,si,IOContext.DEFAULT);  Directory cfs=si.getCodec().compoundFormat().getCompoundReader(dir,si,IOContext.DEFAULT);  for (  String file : files) {    IndexInput check=dir.openInput(file,newIOContext(random()));    IndexInput test=cfs.openInput(file,newIOContext(random()));    assertSameStreams(file,check,test);    assertSameSeekBehavior(file,check,test);    test.close();    check.close();  }  cfs.close();  dir.close();}  }
class C{  public Right(){  super();}  }
class C{  public Portal createNewPortal(String sName,String userName){  Portal portal;  if (userName != null && userName.trim().length() > 0) {    portal=getByUserName(userName);    if (portal != null) {      return null;    }  } else {    return null;  }  if (sName == null) {    sName=generateSystemName();  }  if (!sName.startsWith("IP")) {    sName="IP" + sName;  }  if (sName.length() < 3) {    return null;  }  portal=getBySystemName(sName);  if (portal != null) {    return null;  }  portal=new Portal(sName,userName);  register(portal);  return portal;}  }
class C{  @Override public void actionPerform(Component component){  if (beforeRefreshHandler != null) {    beforeRefreshHandler.run();  }  CollectionDatasource datasource=owner.getDatasource();  Map<String,Object> params=getRefreshParams();  if (params != null) {    datasource.refresh(params);  } else {    datasource.refresh();  }  if (afterRefreshHandler != null) {    afterRefreshHandler.run();  }}  }
class C{  private void validateBusinessObjectFormatCreateRequest(BusinessObjectFormatCreateRequest request){  BusinessObjectFormatKey businessObjectFormatKey=getBusinessObjectFormatKey(request);  businessObjectFormatHelper.validateBusinessObjectFormatKey(businessObjectFormatKey,false);  updateBusinessObjectFormatAlternateKeyOnCreateRequest(request,businessObjectFormatKey);  request.setPartitionKey(alternateKeyHelper.validateStringParameter("partition key",request.getPartitionKey()));  attributeHelper.validateAttributes(request.getAttributes());  if (!CollectionUtils.isEmpty(request.getAttributeDefinitions())) {    Map<String,AttributeDefinition> attributeNameValidationMap=new HashMap<>();    for (    AttributeDefinition attributeDefinition : request.getAttributeDefinitions()) {      Assert.hasText(attributeDefinition.getName(),"An attribute definition name must be specified.");      attributeDefinition.setName(attributeDefinition.getName().trim());      String lowercaseAttributeDefinitionName=attributeDefinition.getName().toLowerCase();      if (attributeNameValidationMap.containsKey(lowercaseAttributeDefinitionName)) {        throw new IllegalArgumentException(String.format("Duplicate attribute definition name \"%s\" found.",attributeDefinition.getName()));      }      attributeNameValidationMap.put(lowercaseAttributeDefinitionName,attributeDefinition);    }  }  validateBusinessObjectFormatSchema(request.getSchema(),request.getPartitionKey());}  }
class C{  public static String create(ContentResolver resolver,ContentValues values){  if (resolver == null)   return null;  if (values == null)   return null;  Uri uri=resolver.insert(Contacts.People.CONTENT_URI,values);  return String.valueOf(ContentUris.parseId(uri));}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null) {    displayFrame.dispose();  }  displayFrame=null;  display=null;}  }
class C{  public static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){  if (StringUtils.isEmpty(groupBy) && !StringUtils.isEmpty(having)) {    throw new IllegalArgumentException("HAVING clauses are only permitted when using a groupBy clause");  }  if (!StringUtils.isEmpty(limit) && !sLimitPattern.matcher(limit).matches()) {    throw new IllegalArgumentException("invalid LIMIT clauses:" + limit);  }  StringBuilder query=new StringBuilder(120);  query.append("SELECT ");  if (distinct) {    query.append("DISTINCT ");  }  if (columns != null && columns.length != 0) {    appendColumns(query,columns);  } else {    query.append("* ");  }  query.append("FROM ");  query.append(tables);  appendClause(query," WHERE ",where);  appendClause(query," GROUP BY ",groupBy);  appendClause(query," HAVING ",having);  appendClause(query," ORDER BY ",orderBy);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public static synchronized void reload(){  if (instance != null) {    try {      log.trace("reload called");      instance.load(null);    } catch (    Exception e) {      throw translateException(e);    }  } else {    log.trace("reload called, create new GlobalConfImpl");    instance=new GlobalConfImpl(true);  }}  }
class C{  public final void testGetEncryptedData01() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.encryptedData,epki.getEncryptedData()));      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public static ECDHECryptography fromNamedCurveId(int supportedGroupId){  SupportedGroup group=SupportedGroup.fromId(supportedGroupId);  if (group == null) {    return null;  } else {    try {      return new ECDHECryptography(group.name());    } catch (    GeneralSecurityException e) {      LOGGER.log(Level.WARNING,"Cannot create ephemeral keys for group [{0}]: {1}",new Object[]{group.name(),e.getMessage()});      return null;    }  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/initiators") public TaskResourceRep createInitiator(@PathParam("id") URI id,InitiatorCreateParam createParam) throws DatabaseException {  Host host=queryObject(Host.class,id,true);  Cluster cluster=null;  validateInitiatorData(createParam,null);  Initiator initiator=new Initiator();  initiator.setHost(id);  initiator.setHostName(host.getHostName());  if (!NullColumnValueGetter.isNullURI(host.getCluster())) {    cluster=queryObject(Cluster.class,host.getCluster(),false);    initiator.setClusterName(cluster.getLabel());  }  initiator.setId(URIUtil.createId(Initiator.class));  populateInitiator(initiator,createParam);  _dbClient.createObject(initiator);  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Initiator.class,initiator.getId(),taskId,ResourceOperationTypeEnum.ADD_HOST_INITIATOR);  if (ComputeSystemHelper.isHostInUse(_dbClient,host.getId())) {    ComputeSystemController controller=getController(ComputeSystemController.class,null);    controller.addInitiatorsToExport(initiator.getHost(),Arrays.asList(initiator.getId()),taskId);  } else {    _dbClient.ready(Initiator.class,initiator.getId(),taskId);  }  auditOp(OperationTypeEnum.CREATE_HOST_INITIATOR,true,null,initiator.auditParameters());  return toTask(initiator,taskId,op);}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public static double[] toDoubleArray(STRUCT struct,final double defaultValue) throws SQLException {  if (struct == null)   return null;  return toDoubleArray(struct.getOracleAttributes(),defaultValue);}  }
class C{  @Override public void buildClassifier(Instances trainInstances) throws Exception {  m_numSubsets=0;  m_errors=0;  if (m_globalNB != null) {    m_errors=m_globalNB.getErrors();  }  if (trainInstances.attribute(m_attIndex).isNominal()) {    m_complexityIndex=trainInstances.attribute(m_attIndex).numValues();    handleEnumeratedAttribute(trainInstances);  } else {    m_complexityIndex=2;    trainInstances.sort(trainInstances.attribute(m_attIndex));    handleNumericAttribute(trainInstances);  }}  }
class C{  private void addDrawingRect(Rectangle2D rect,float x,float y){  addDrawingRect((float)(rect.getX() + x),(float)(rect.getY() + y),(float)rect.getWidth(),(float)rect.getHeight());}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar){  this(writer,separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean sendMessage(Message msg,@IpcConstant.MessagePolicy int policy){  if (mMessageService == null) {    System.err.println("have not bound success, have you call 'bind()' or is the message service is running ?.");    return false;  }  msg.arg2=policy;  if (policy == IpcConstant.POLICY_REPLY) {    msg.replyTo=getClientMessager();  }  try {    mMessageService.send(msg);  } catch (  RemoteException e) {    return false;  }  return true;}  }
class C{  public boolean parseText(){  return parseText;}  }
class C{  public GuacamoleHTTPTunnelMap(){  executor.scheduleAtFixedRate(new TunnelTimeoutTask(TUNNEL_TIMEOUT * 1000l),TUNNEL_TIMEOUT,TUNNEL_TIMEOUT,TimeUnit.SECONDS);}  }
class C{  public void removeKnowledgeGroup(int index){  OrderedPair<Set<MyNode>> old=knowledgeGroupRules.get(knowledgeGroups.get(index));  forbiddenRulesSpecs.remove(old);  requiredRulesSpecs.remove(old);  this.knowledgeGroups.remove(index);}  }
class C{  public final double gainRatio(){  return m_gainRatio;}  }
class C{  public static <T>Iterator<T> toUnique(Iterator<T> self,Comparator<T> comparator){  return new ToUniqueIterator<T>(self,comparator);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public void mouseDragged(MouseEvent e){  Debug.message("defaultdndcatcher","mouseDragged, startDrag=" + startDrag);  if (startDrag) {    startDrag=false;    if (md.getActiveMouseMode() instanceof SelectMouseMode) {      appendEvent(e);      setComponent((Component)e.getSource());      fireDragGestureRecognized(DnDConstants.ACTION_MOVE,((MouseEvent)getTriggerEvent()).getPoint());    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=DBObject.MEDIA_MASK_ALL;  if (curNumberOfParameters == 11) {    mediaMask=getMediaMask(stack);  }  boolean miscb=evalBool(stack.pop());  boolean yearb=evalBool(stack.pop());  boolean erb=evalBool(stack.pop());  boolean ratedb=evalBool(stack.pop());  boolean catb=evalBool(stack.pop());  boolean peopleb=evalBool(stack.pop());  boolean descb=evalBool(stack.pop());  boolean epsb=evalBool(stack.pop());  boolean titb=evalBool(stack.pop());  return Wizard.getInstance().searchFields(getRegex(stack),titb,epsb,descb,peopleb,catb,ratedb,erb,yearb,miscb,mediaMask);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void supplyMessenger(int networkType,Messenger messenger){  try {    mService.supplyMessenger(networkType,messenger);  } catch (  RemoteException e) {  }}  }
class C{  private DriverTask createDriverTask(String taskType){  String taskID=String.format("%s+%s+%s",HP3PARConstants.DRIVER_NAME,taskType,UUID.randomUUID());  DriverTask task=new HP3PARDriverTask(taskID);  return task;}  }
class C{  private static boolean parseAbbreviatedStep(PsiBuilder builder){  if (builder.getTokenType() == XPathTokenTypes.DOT || builder.getTokenType() == XPathTokenTypes.DOTDOT) {    makeToken(builder);    return true;  }  return false;}  }
class C{  public static RFFilter fromFrequency(long frequency){  if (frequency < 350000000) {    return NO_FILTER;  }  for (  RFFilter filter : values()) {    if (filter.getMinimumFrequency() <= frequency && frequency < filter.getMaximumFrequency()) {      return filter;    }  }  throw new IllegalArgumentException("E4KTunerController - " + "cannot find RF filter for frequency [" + frequency + "]");}  }
class C{  public void add(MemoryChunk memoryChunk){  for (MemoryChunk scanChunk=low; scanChunk != null; scanChunk=scanChunk.next) {    if (scanChunk.addr + scanChunk.size == memoryChunk.addr) {      scanChunk.size+=memoryChunk.size;      MemoryChunk nextChunk=scanChunk.next;      if (nextChunk != null) {        if (scanChunk.addr + scanChunk.size == nextChunk.addr) {          scanChunk.size+=nextChunk.size;          remove(nextChunk);        }      }      return;    } else     if (memoryChunk.addr + memoryChunk.size == scanChunk.addr) {      scanChunk.addr=memoryChunk.addr;      scanChunk.size+=memoryChunk.size;      MemoryChunk previousChunk=scanChunk.previous;      if (previousChunk != null) {        if (previousChunk.addr + previousChunk.size == scanChunk.addr) {          previousChunk.size+=scanChunk.size;          remove(scanChunk);        }      }      return;    } else     if (scanChunk.addr > memoryChunk.addr) {      addBefore(memoryChunk,scanChunk);      return;    }  }  if (high == null && low == null) {    high=memoryChunk;    low=memoryChunk;  } else {    addAfter(memoryChunk,high);  }}  }
class C{  private void closeJar(String path){  if (jarfiles.containsKey(path)) {    JarHolder theJar=(JarHolder)jarfiles.get(path);    theJar.close();  }}  }
class C{  public static void awaitFileClose(@Nullable IgfsEx igfs,IgfsPath file){  igfs.await(file);}  }
class C{  public JCustomTooltip(JComponent src,JComponent content){  this(src,content,false);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  HomeTitleDBDao.dropTable(db,ifExists);  HomeItemDBDao.dropTable(db,ifExists);  HomeChannelDBDao.dropTable(db,ifExists);}  }
class C{  private boolean isPolymorphicQualifier(AnnotationMirror qual){  return AnnotationUtils.containsSame(polyQualifiers.values(),qual);}  }
class C{  public String seedTipText(){  return "The randomization seed";}  }
class C{  protected void createThemeDirectory(String theme){  File path=null;  try {    ServletContext servletContext=getServletContext();    if (servletContext != null) {      String root=servletContext.getRealPath("/");      if (root != null && new File(root).isDirectory()) {        path=new File(servletContext.getRealPath("/VAADIN/themes/" + theme));        logger.debug("Creating directory [{}]",path);        path.mkdirs();      }    }  } catch (  Exception e) {    logger.info("Unable to create the directory [{}] for caching of themes compiled on the fly",path);  }}  }
class C{  protected static boolean convertType(Element e,BridgeContext ctx){  String s=e.getAttributeNS(null,SVG_TYPE_ATTRIBUTE);  if (s.length() == 0) {    return false;  }  if (SVG_FRACTAL_NOISE_VALUE.equals(s)) {    return true;  }  if (SVG_TURBULENCE_VALUE.equals(s)) {    return false;  }  throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TYPE_ATTRIBUTE,s});}  }
class C{  protected VirtualFile[] adjustAddedFileSet(final Component component,final VirtualFile[] files){  return files;}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public MultiwayMinPQ(Comparator<Key> comparator,Key[] a,int d){  if (d < 2)   throw new IllegalArgumentException("Dimension should be 2 or over");  this.d=d;  order=1;  keys=(Key[])new Comparable[d << 1];  comp=comparator;  for (  Key key : a)   insert(key);}  }
class C{  public boolean hasChildElements(){  return !isPrimitive() && (type != null && !type.fields.isEmpty());}  }
class C{  public final boolean isOverwriteEnabled(){  return overwrite;}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public void pushElemAttributeSet(ElemAttributeSet attrSet){  m_attrSetStack.push(attrSet);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.127 -0400",hash_original_method="7233480063D9B70EDAE30CAF1CCF8A70",hash_generated_method="9C5D91D1D5674A95DF8BDABEA911F9A5") protected void engineReset(){  messageLength=0;  buffer[BYTES_OFFSET]=0;  buffer[HASH_OFFSET]=H0;  buffer[HASH_OFFSET + 1]=H1;  buffer[HASH_OFFSET + 2]=H2;  buffer[HASH_OFFSET + 3]=H3;  buffer[HASH_OFFSET + 4]=H4;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private void enableControlAndChildren(Composite composite,boolean enabled){  composite.setEnabled(enabled);  for (  Control child : composite.getChildren()) {    child.setEnabled(enabled);    if (child instanceof Composite) {      enableControlAndChildren((Composite)child,enabled);    }  }}  }
class C{  public boolean moveToNextLocation(String locationName){  if (getNextLocationName().equals(locationName)) {    move();    return true;  }  return false;}  }
class C{  public void add(int start,int end,int handler,int type){  if (start < end)   entries.add(new ExceptionTableEntry(start,end,handler,type));}  }
class C{  protected void validate(){  if (!isHelping()) {    validateOnStart();    validateOnStatus();    validateOnStop();  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean isLeap(){  return Year.isLeap(year);}  }
class C{  public void testIntSortMissingLast() throws Exception {  checkSortMissingLast("intdv_missinglast","-1","4");}  }
class C{  public void verify(TransactionOutput output) throws VerificationException {  if (output.parentTransaction != null) {    if (!getOutpoint().getHash().equals(output.parentTransaction.getHash()))     throw new VerificationException("This input does not refer to the tx containing the output.");    if (getOutpoint().getIndex() != output.getIndex())     throw new VerificationException("This input refers to a different output on the given tx.");  }  Script pubKey=output.getScriptPubKey();  int myIndex=parentTransaction.getInputs().indexOf(this);  getScriptSig().correctlySpends(parentTransaction,myIndex,pubKey,true);}  }
class C{  private static EdgeType loopify(final EdgeType type){switch (type) {case JUMP_CONDITIONAL_FALSE:    return EdgeType.JUMP_CONDITIONAL_FALSE_LOOP;case JUMP_CONDITIONAL_TRUE:  return EdgeType.JUMP_CONDITIONAL_TRUE_LOOP;case JUMP_UNCONDITIONAL:return EdgeType.JUMP_UNCONDITIONAL_LOOP;default :return type;}}  }
class C{  public String toString(){  return new String(buffer,0,size);}  }
class C{  public SQLPermission(String name){  super(name);}  }
class C{  public static void shrink(Mat img,Size approxSize){  shrink(img,approxSize,false);}  }
class C{  @Override public int size(){  final Segment<K,V>[] segments=this.segments;  long sum=0;  long check=0;  int[] mc=new int[segments.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    check=0;    sum=0;    int mcsum=0;    for (int i=0; i < segments.length; ++i) {      sum+=segments[i].count;      mcsum+=mc[i]=segments[i].modCount;    }    if (mcsum != 0) {      for (int i=0; i < segments.length; ++i) {        check+=segments[i].count;        if (mc[i] != segments[i].modCount) {          check=-1;          break;        }      }    }    if (check == sum)     break;  }  if (check != sum) {    sum=0;    for (int i=0; i < segments.length; ++i)     segments[i].lock();    for (int i=0; i < segments.length; ++i)     sum+=segments[i].count;    for (int i=0; i < segments.length; ++i)     segments[i].unlock();  }  if (sum > Integer.MAX_VALUE)   return Integer.MAX_VALUE;  return (int)sum;}  }
class C{  @Override public void processAttribute(String namespace,String localName,String value) throws ParseException {  super.processAttribute(namespace,localName,value);  if (namespace.equals(Namespaces.g) && localName.equals("targetKind")) {    targetKind=value;  }}  }
class C{  public Finder(Connection connection,String datacenterPath) throws FinderException, InvalidPropertyFaultMsg, RuntimeFaultFaultMsg {  super(connection);  if (datacenterPath == null) {    this.datacenter=defaultDatacenter();  } else {    this.datacenter=datacenter(datacenterPath);  }}  }
class C{  private Keyboard(Context context,int defaultHeight,int layoutTemplateResId,CharSequence characters,boolean reversed,int columns,int horizontalPadding){  this(context,defaultHeight,layoutTemplateResId);  int x=0;  int y=0;  int column=0;  mTotalWidth=0;  Row row=new Row(this);  row.defaultHeight=mDefaultHeight;  row.defaultWidth=mDefaultWidth;  row.defaultHorizontalGap=mDefaultHorizontalGap;  row.verticalGap=mDefaultVerticalGap;  final int maxColumns=columns == -1 ? Integer.MAX_VALUE : columns;  mLayoutRows=1;  int start=reversed ? characters.length() - 1 : 0;  int end=reversed ? -1 : characters.length();  int step=reversed ? -1 : 1;  for (int i=start; i != end; i+=step) {    char c=characters.charAt(i);    if (column >= maxColumns || x + mDefaultWidth + horizontalPadding > mDisplayWidth) {      x=0;      y+=mDefaultVerticalGap + mDefaultHeight;      column=0;      ++mLayoutRows;    }    final Key key=new Key(row);    key.x=x;    key.realX=x;    key.y=y;    key.label=String.valueOf(c);    key.codes=key.getFromString(key.label);    column++;    x+=key.width + key.gap;    mKeys.add(key);    if (x > mTotalWidth) {      mTotalWidth=x;    }  }  mTotalHeight=y + mDefaultHeight;  mLayoutColumns=columns == -1 ? column : maxColumns;  setEdgeFlags();}  }
class C{  public static void main(String[] args){  Gbl.startMeasurement();  String inputDir="d:\\Berlin\\berlin-fggeoinfo\\30_Run_20_percent\\20101214_run793_794\\";  String networkFile=inputDir + "network_modified_20100806_added_BBI_AS_cl.xml.gz";  String inPlansFile="d:\\Berlin\\berlin-sharedsvn\\plans\\baseplan_10x_900s.xml.gz";  double scaleFactor=0.20;  String bbiDemandInFile=inputDir + "Anreise_Autobahnauffahrten_20100804.csv";  String timeStructure=inputDir + "Analyse_Fluege_20100804.csv";  String oldDemandTXLSXFoutFile="oldDemandTXLSXF.xml.gz";  String newDemandBBIoutFile="newDemandBBI.xml.gz";  String movedBackgroundDemand="movedBGdemand.xml.gz";  String shapeFile="d:/Berlin/berlin-fggeoinfo/10_Eingangsdaten/20101007_bezirke_GK4/Bezirke_Polygon_GK4.shp";  String actTypeOne="work";  String actTypeTwo="home";  String resultsOutFile="workHomeStats.txt";  Coord coordBBI=new Coord(4604545.48760,5805194.68221);  Coord coordTXL=new Coord(4588068.19422,5824668.31998);  Coord coordSXF=new Coord(4603377.91673,5807538.81303);  Coord minSXF=new Coord(4602500.000,5806200.000);  Coord maxSXF=new Coord(4604000.000,5807400.000);  Coord minTXL=new Coord(4586900.000,5824500.000);  Coord maxTXL=new Coord(4588800.000,5826300.000);  BBIextraDemand bbi=new BBIextraDemand(bbiDemandInFile,timeStructure,inputDir + oldDemandTXLSXFoutFile,inputDir + newDemandBBIoutFile,scaleFactor,coordBBI,coordTXL,coordSXF);  bbi.createDemand();  MergePopulations.mergePopulations(networkFile,inPlansFile,inputDir + oldDemandTXLSXFoutFile,inputDir + "completeOldDemandTXLSXF.xml.gz");  FilterPersonActs.filterPersonActs(networkFile,inPlansFile,inputDir + movedBackgroundDemand,minSXF,maxSXF,minTXL,maxTXL,coordBBI,inputDir,"movedActs.kmz");  MergePopulations.mergePopulations(networkFile,inputDir + movedBackgroundDemand,inputDir + newDemandBBIoutFile,inputDir + "completeNewDemandBBI.xml.gz");  FilterActsPerShape.run(networkFile,inputDir + "completeNewDemandBBI.xml.gz",shapeFile,coordBBI,coordBBI,actTypeOne,actTypeTwo,inputDir + resultsOutFile);  Gbl.printElapsedTime();}  }
class C{  private void sortByFrequency(){  list.clear();  for (  Bin bin : hash.values()) {    list.add(bin);  }  Collections.sort(list,frequencyComparator);  sorted=true;}  }
class C{  protected void actionCommand(Command cmd){  if (!autoDispose || lastCommandPressed == null) {    lastCommandPressed=cmd;  }  if (menu || (autoDispose && cmd.isDisposesDialog())) {    dispose();  }}  }
class C{  public void disposeConsumerResources(){synchronized (rasterizedBuffers) {    tileCache.releaseTiles(rasterizedBuffers);  }  tileCache.releaseTiles(rasterizedTileConsumerCache);}  }
class C{  public void connectToDatabase(){  try {    if (!m_DataBaseConnection.isConnected()) {      m_DataBaseConnection.connectToDatabase();    }  } catch (  Exception ex) {    printException(ex);  }}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  setIsApproved(true);  return true;}  }
class C{  public static String showInputDialog(Object message,Object initialSelectionValue){  return showInputDialog(null,message,initialSelectionValue);}  }
class C{  @Override public List<EvaluationStatistics> evaluate(MultiLabelClassifier classifier,Instances dataset){  List<EvaluationStatistics> result;  int trainSize;  Instances train;  Instances test;  Result res;  result=new ArrayList<>();  if (!m_PreserveOrder) {    dataset=new Instances(dataset);    dataset.randomize(new Random(m_Seed));  }  trainSize=(int)(dataset.numInstances() * m_TrainPercentage / 100.0);  train=new Instances(dataset,0,trainSize);  test=new Instances(dataset,trainSize,dataset.numInstances() - trainSize);  try {    res=Evaluation.evaluateModel(classifier,train,test,m_Threshold,m_Verbosity);    result.add(new EvaluationStatistics(classifier,dataset,res));  } catch (  Exception e) {    handleException("Failed to evaluate dataset '" + dataset.relationName() + "' with classifier: "+ Utils.toCommandLine(classifier),e);  }  if (m_Stopped)   result.clear();  return result;}  }
class C{  @Override public void stop(){  schedExecutor.shutdownNow();  try {    schedExecutor.awaitTermination(5,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    LOG.warn("Clean up registration thread was interrupted.",e);  }}  }
class C{  public static Class<?>[] convertParams(Object[] source){  Class<?>[] converted=null;  if (source != null) {    converted=new Class<?>[source.length];    for (int i=0; i < source.length; i++) {      if (source[i] != null) {        converted[i]=source[i].getClass();      } else {        converted[i]=null;      }    }  } else {    converted=new Class<?>[0];  }  return converted;}  }
class C{  protected void openProposalPopup(){  openProposalPopup(false);}  }
class C{  protected Property addCustomProperty(Map<String,Property> properties,String name){  Property prop=properties.remove(name);  return addCustomProperty(prop);}  }
class C{  public synchronized CloneableIterator<byte[]> keys(final boolean up,final boolean rotating) throws IOException {  return new KeyIterator(up,rotating,null,null);}  }
class C{  public boolean needsDefaultFormatter(){  if (mValueFormatter == null)   return true;  if (mValueFormatter instanceof DefaultValueFormatter)   return true;  return false;}  }
class C{  public static final double sum(double[] a){  double sum=0;  for (int i=0; i < a.length; ++i) {    sum+=a[i];  }  return sum;}  }
class C{  private void packColumn(final int column,final boolean alsoSetMaxSize){  int maxWidth=getTableHeader().getDefaultRenderer().getTableCellRendererComponent(this,getColumnModel().getColumn(column).getIdentifier(),false,false,0,column).getPreferredSize().width;  for (int row=getRowCount() - 1; row >= 0; row--)   maxWidth=Math.max(maxWidth,getCellRenderer(row,column).getTableCellRendererComponent(this,getValueAt(row,column),false,false,row,column).getPreferredSize().width);  getColumnModel().getColumn(column).setPreferredWidth(maxWidth);  if (alsoSetMaxSize)   getColumnModel().getColumn(column).setMaxWidth(maxWidth);}  }
class C{  public static void unzip(File input,File destinationDir) throws IOException {  try (ZipInputStream zipInput=new ZipInputStream(new BufferedInputStream(new FileInputStream(input)))){    ZipEntry entry;    while ((entry=zipInput.getNextEntry()) != null) {      File dest=new File(destinationDir,entry.getName());      if (entry.isDirectory()) {        FileMisc.mkdirs(dest);      } else {        FileMisc.mkdirs(dest.getParentFile());        try (OutputStream output=new BufferedOutputStream(new FileOutputStream(dest))){          copy(zipInput,output);        }       }    }  } }  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.234 -0500",hash_original_method="9AA41B9BF38033172F833E5120B7F6E3",hash_generated_method="21295F50A856000D35FCE235E745C6DC") public ServerHello(SecureRandom sr,byte[] server_version,byte[] session_id,CipherSuite cipher_suite,byte compression_method){  long gmt_unix_time=new java.util.Date().getTime() / 1000;  sr.nextBytes(random);  random[0]=(byte)((gmt_unix_time & 0xFF000000) >>> 24);  random[1]=(byte)((gmt_unix_time & 0xFF0000) >>> 16);  random[2]=(byte)((gmt_unix_time & 0xFF00) >>> 8);  random[3]=(byte)(gmt_unix_time & 0xFF);  this.session_id=session_id;  this.cipher_suite=cipher_suite;  this.compression_method=compression_method;  this.server_version=server_version;  length=38 + session_id.length;}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public long executeForLastInsertedRowId(String sql,Object[] bindArgs,int connectionFlags){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags)) {    return 0;  }  acquireConnection(sql,connectionFlags);  try {    return mConnection.executeForLastInsertedRowId(sql,bindArgs);  }  finally {    releaseConnection();  }}  }
class C{  public static void checkHttpCachingVeto(final SolrQueryResponse solrRsp,HttpServletResponse resp,final Method reqMethod){  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {    return;  }  if (solrRsp.isHttpCaching() && solrRsp.getException() == null) {    return;  }  resp.setHeader("Cache-Control","no-cache, no-store");  resp.setHeader("Pragma","no-cache");  resp.setHeader("Expires","Sat, 01 Jan 2000 01:00:00 GMT");  long timeNowForHeader=timeNowForHeader();  resp.setDateHeader("Last-Modified",timeNowForHeader);  resp.setHeader("ETag",'"' + Long.toHexString(timeNowForHeader) + '"');}  }
class C{  public int store(GenericValue value) throws GenericEntityException {  if (value == null) {    return 0;  }  return genericDAO.update(value);}  }
class C{  public SocketException(){}  }
class C{  private static MeteringRectangle[] regionsForNormalizedCoord(float nx,float ny,float fraction,final Rect cropRegion,int sensorOrientation){  int minCropEdge=Math.min(cropRegion.width(),cropRegion.height());  int halfSideLength=(int)(0.5f * fraction * minCropEdge);  PointF nsc=CameraUtil.normalizedSensorCoordsForNormalizedDisplayCoords(nx,ny,sensorOrientation);  int xCenterSensor=(int)(cropRegion.left + nsc.x * cropRegion.width());  int yCenterSensor=(int)(cropRegion.top + nsc.y * cropRegion.height());  Rect meteringRegion=new Rect(xCenterSensor - halfSideLength,yCenterSensor - halfSideLength,xCenterSensor + halfSideLength,yCenterSensor + halfSideLength);  meteringRegion.left=CameraUtil.clamp(meteringRegion.left,cropRegion.left,cropRegion.right);  meteringRegion.top=CameraUtil.clamp(meteringRegion.top,cropRegion.top,cropRegion.bottom);  meteringRegion.right=CameraUtil.clamp(meteringRegion.right,cropRegion.left,cropRegion.right);  meteringRegion.bottom=CameraUtil.clamp(meteringRegion.bottom,cropRegion.top,cropRegion.bottom);  return new MeteringRectangle[]{new MeteringRectangle(meteringRegion,CAMERA2_REGION_WEIGHT)};}  }
class C{  public boolean isOnlyVisible(){  return m_onlyVisible;}  }
class C{  public String formatSource(String input) throws FormatterException {  return formatSource(input,Collections.singleton(Range.closedOpen(0,input.length())));}  }
class C{  protected void aceptarDuplicarExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ActionNotAllowedException {  FichasForm fichasForm=(FichasForm)form;  ActionErrors errors=fichasForm.validateDuplicar(request);  if (errors == null || errors.isEmpty()) {    ServiceRepository services=getServiceRepository(request);    GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();    FichaVO fichaVO=fichasForm.populate(new FichaVO());    errors=comprobarDuplicados(descripcionService,request,null,fichaVO,fichasForm.getGuid());    if (errors == null || errors.isEmpty()) {      fichaVO=descripcionService.duplicarFicha(fichasForm.getIdFichaOrigen(),fichaVO);      fichasForm.setIdFichaOrigen(null);      goReturnPointExecuteLogic(mapping,form,request,response);    } else {      ErrorsTag.saveErrors(request,errors);      setReturnActionFordward(request,mapping.findForward("duplicarFicha"));    }  } else {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("duplicarFicha"));  }}  }
class C{  private void flush() throws IOException {  if (m_state != null) {    m_state.m_channel.force(true);  }}  }
class C{  public void testGetNCharacterSteram() throws Exception {  createTable("testGetNCharacterStream","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10))");  this.stmt.executeUpdate("INSERT INTO testGetNCharacterStream (c1, c2) VALUES (_utf8 'aaa', _utf8 'bbb')");  this.rs=this.stmt.executeQuery("SELECT c1, c2 FROM testGetNCharacterStream");  this.rs.next();  char[] c1=new char[3];  this.rs.getNCharacterStream(1).read(c1);  assertEquals("aaa",new String(c1));  char[] c2=new char[3];  this.rs.getNCharacterStream("c2").read(c2);  assertEquals("bbb",new String(c2));  this.rs.close();}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting())   return;}  }
class C{  public synchronized void println(String s,int log,boolean _announcement) throws OutputException {  if (log == NO_LOGS)   return;  println(s,V_VERBOSE,log,_announcement);}  }
class C{  public JPolicyQualifierInfo(String title){  this.title=title;  initComponents();}  }
class C{  public static boolean installBinary(Context context,int sourceId,String destName,String mode){  return getInternals().installBinary(context,sourceId,destName,mode);}  }
class C{  protected SVGOMToBeImplementedElement(){}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  protected RemoteServer(){  super();}  }
class C{  public void firePortsChanged(Collection<Operator> operators){  fireOperatorsChanged(OperatorEvent.PORTS_CHANGED,operators);}  }
class C{  public void testMethodAnnotationInArray() throws Exception {  ObjectMapper mapper=new ObjectMapper();  SimpleModule module=new SimpleModule("test",Version.unknownVersion());  module.addSerializer(String.class,new AnnotatedContextualSerializer());  mapper.registerModule(module);  ContextualArrayBean beans=new ContextualArrayBean("123");  assertEquals("{\"beans\":[\"array->123\"]}",mapper.writeValueAsString(beans));}  }
class C{  protected ActionResult<ItemStack> nockArrow(ItemStack bow,World world,EntityPlayer shooter,EnumHand hand){  boolean hasAmmo=findAmmoSlot(shooter,null) != null;  final ActionResult<ItemStack> ret=ForgeEventFactory.onArrowNock(bow,world,shooter,hand,hasAmmo);  if (ret != null)   return ret;  if (isAmmoRequired(bow,shooter) && !hasAmmo) {    return new ActionResult<>(EnumActionResult.FAIL,bow);  } else {    shooter.setActiveHand(hand);    return new ActionResult<>(EnumActionResult.SUCCESS,bow);  }}  }
class C{  private LinkedHashMap<Term,Integer> repeatingTerms(){  LinkedHashMap<Term,Integer> tord=new LinkedHashMap<>();  HashMap<Term,Integer> tcnt=new HashMap<>();  for (  PhrasePositions pp : phrasePositions) {    for (    Term t : pp.terms) {      Integer cnt0=tcnt.get(t);      Integer cnt=cnt0 == null ? new Integer(1) : new Integer(1 + cnt0.intValue());      tcnt.put(t,cnt);      if (cnt == 2) {        tord.put(t,tord.size());      }    }  }  return tord;}  }
class C{  public static int parseIOThreads(Integer threads){  final int result=threads == null ? Math.min(Constants.MAX_IO_THREADS,Environment.defaultThreads()) : threads;  return Math.max(1,result - 1);}  }
class C{  public int tty_nr(){  return Integer.parseInt(fields[6]);}  }
class C{  private static Timeline[] search(final BufferedReader br,final Timeline.Order order,final boolean writeToIndex,final boolean writeToBackend) throws IOException {  Timeline timelineReady=new Timeline(order);  Timeline timelineWorking=new Timeline(order);  String input;  Map<String,prop> props=new HashMap<String,prop>();  Set<String> images=new LinkedHashSet<>();  Set<String> videos=new LinkedHashSet<>();  String place_id="", place_name="";  boolean parsing_favourite=false, parsing_retweet=false;  int line=0;  boolean debuglog=false;  while ((input=br.readLine()) != null) {    line++;    input=input.trim();    if (input.length() == 0)     continue;    int p;    if ((p=input.indexOf("=\"account-group")) > 0) {      props.put("userid",new prop(input,p,"data-user-id"));      continue;    }    if ((p=input.indexOf("class=\"avatar")) > 0) {      props.put("useravatarurl",new prop(input,p,"src"));      continue;    }    if ((p=input.indexOf("class=\"fullname")) > 0) {      props.put("userfullname",new prop(input,p,null));      continue;    }    if ((p=input.indexOf("class=\"username")) > 0) {      props.put("usernickname",new prop(input,p,null));      continue;    }    if ((p=input.indexOf("class=\"tweet-timestamp")) > 0) {      props.put("tweetstatusurl",new prop(input,0,"href"));      props.put("tweettimename",new prop(input,p,"title"));    }    if ((p=input.indexOf("class=\"_timestamp")) > 0) {      props.put("tweettimems",new prop(input,p,"data-time-ms"));      continue;    }    if ((p=input.indexOf("class=\"ProfileTweet-action--retweet")) > 0) {      parsing_retweet=true;      continue;    }    if ((p=input.indexOf("class=\"ProfileTweet-action--favorite")) > 0) {      parsing_favourite=true;      continue;    }    if ((p=input.indexOf("class=\"TweetTextSize")) > 0) {      while (input.lastIndexOf("</p>") == -1) {        input=input + ' ' + br.readLine();      }      prop tweettext=new prop(input,p,null);      props.put("tweettext",tweettext);      continue;    }    if ((p=input.indexOf("class=\"ProfileTweet-actionCount")) > 0) {      if (parsing_retweet) {        prop tweetretweetcount=new prop(input,p,"data-tweet-stat-count");        props.put("tweetretweetcount",tweetretweetcount);        parsing_retweet=false;      }      if (parsing_favourite) {        props.put("tweetfavouritecount",new prop(input,p,"data-tweet-stat-count"));        parsing_favourite=false;      }      continue;    }    if ((p=input.indexOf("class=\"media media-thumbnail twitter-timeline-link media-forward is-preview")) > 0 || (p=input.indexOf("class=\"multi-photo")) > 0) {      images.add(new prop(input,p,"data-resolved-url-large").value);      continue;    }    if ((p=input.indexOf("class=\"animated-gif-thumbnail\"")) > 0) {      images.add(new prop(input,0,"src").value);      continue;    }    if ((p=input.indexOf("class=\"animated-gif\"")) > 0) {      images.add(new prop(input,p,"poster").value);      continue;    }    if ((p=input.indexOf("<source video-src")) >= 0 && input.indexOf("type=\"video/") > p) {      videos.add(new prop(input,p,"video-src").value);      continue;    }    if ((p=input.indexOf("class=\"Tweet-geo")) > 0) {      prop place_name_prop=new prop(input,p,"title");      place_name=place_name_prop.value;      continue;    }    if ((p=input.indexOf("class=\"ProfileTweet-actionButton u-linkClean js-nav js-geo-pivot-link")) > 0) {      prop place_id_prop=new prop(input,p,"data-place-id");      place_id=place_id_prop.value;      continue;    }    if (props.size() == 10 || (debuglog && props.size() > 4 && input.indexOf("stream-item") > 0)) {      if (debuglog)       System.out.println("*** line " + line + " propss.size() = "+ props.size());      prop userid=props.get("userid");      if (userid == null) {        if (debuglog)         System.out.println("*** line " + line + " MISSING value userid");        continue;      }      prop usernickname=props.get("usernickname");      if (usernickname == null) {        if (debuglog)         System.out.println("*** line " + line + " MISSING value usernickname");        continue;      }      prop useravatarurl=props.get("useravatarurl");      if (useravatarurl == null) {        if (debuglog)         System.out.println("*** line " + line + " MISSING value useravatarurl");        continue;      }      prop userfullname=props.get("userfullname");      if (userfullname == null) {        if (debuglog)         System.out.println("*** line " + line + " MISSING value userfullname");        continue;      }      UserEntry user=new UserEntry(userid.value,usernickname.value,useravatarurl.value,MessageEntry.html2utf8(userfullname.value));      ArrayList<String> imgs=new ArrayList<String>(images.size());      imgs.addAll(images);      ArrayList<String> vids=new ArrayList<String>(videos.size());      vids.addAll(videos);      prop tweettimems=props.get("tweettimems");      if (tweettimems == null) {        if (debuglog)         System.out.println("*** line " + line + " MISSING value tweettimems");        continue;      }      prop tweetretweetcount=props.get("tweetretweetcount");      if (tweetretweetcount == null) {        if (debuglog)         System.out.println("*** line " + line + " MISSING value tweetretweetcount");        continue;      }      prop tweetfavouritecount=props.get("tweetfavouritecount");      if (tweetfavouritecount == null) {        if (debuglog)         System.out.println("*** line " + line + " MISSING value tweetfavouritecount");        continue;      }      TwitterTweet tweet=new TwitterTweet(user.getScreenName(),Long.parseLong(tweettimems.value),props.get("tweettimename").value,props.get("tweetstatusurl").value,props.get("tweettext").value,Long.parseLong(tweetretweetcount.value),Long.parseLong(tweetfavouritecount.value),imgs,vids,place_name,place_id,user,writeToIndex,writeToBackend);      if (!DAO.messages.existsCache(tweet.getIdStr())) {        if (tweet.willBeTimeConsuming()) {          executor.execute(tweet);          if (tweet.isReady()) {            timelineReady.add(tweet,user);          } else {            timelineWorking.add(tweet,user);          }        } else {          tweet.run();          timelineReady.add(tweet,user);        }      }      images.clear();      props.clear();      continue;    }  }  br.close();  return new Timeline[]{timelineReady,timelineWorking};}  }
class C{  public static byte[] qUncompress(byte[] bytes) throws IOException {  Inflater inflater=new Inflater();  inflater.setInput(Arrays.copyOfRange(bytes,4,bytes.length));  ByteArrayOutputStream byteArray=new ByteArrayOutputStream();  try (InflaterOutputStream inflaterOutputStream=new InflaterOutputStream(byteArray,inflater)){    inflaterOutputStream.flush();  }   return byteArray.toByteArray();}  }
class C{  private static String[] makeColumnNames(ColumnType types[]){  String[] header=new String[types.length];  for (int i=0; i < types.length; i++) {    header[i]="C" + i;  }  return header;}  }
class C{  public PatternSyntaxException(String description,String pattern,int index){  this.desc=description;  this.pattern=pattern;  this.index=index;}  }
class C{  public GetRequest routing(String routing){  this.routing=routing;  return this;}  }
class C{  public void load(){}  }
class C{  private ContainerUtils(){}  }
class C{  static void scheduleAfter(Activity before,Activity after){  getInstance()._scheduleAfter(before,after);}  }
class C{  public void addMaster(MavenContext context,GraphNode master){  for (  TextElementHandler module : modules) {    String modulePath=module.getText();    try {      processModule(context,master,modulePath);    } catch (    Exception err) {      Tools.warnThrown("Unable to process dependent module " + modulePath,err);    }  }}  }
class C{  public static Automaton toAutomaton(BytesRef prefix){  final int numStatesAndTransitions=prefix.length + 1;  final Automaton automaton=new Automaton(numStatesAndTransitions,numStatesAndTransitions);  int lastState=automaton.createState();  for (int i=0; i < prefix.length; i++) {    int state=automaton.createState();    automaton.addTransition(lastState,state,prefix.bytes[prefix.offset + i] & 0xff);    lastState=state;  }  automaton.setAccept(lastState,true);  automaton.addTransition(lastState,lastState,0,255);  automaton.finishState();  assert automaton.isDeterministic();  return automaton;}  }
class C{  public void hitToPoint(TextHitInfo hit,Point2D point){  if (hit == null || point == null) {    throw new NullPointerException((hit == null ? "hit" : "point") + " can't be null");  }  ensureCache();  checkTextHit(hit);  float adv=0;  float off=0;  int ix=hit.getCharIndex();  boolean leading=hit.isLeadingEdge();  boolean ltr;  if (ix == -1 || ix == textLine.characterCount()) {    ltr=textLine.isDirectionLTR();    adv=(ltr == (ix == -1)) ? 0 : lineMetrics.advance;  } else {    ltr=textLine.isCharLTR(ix);    adv=textLine.getCharLinePosition(ix,leading);    off=textLine.getCharYPosition(ix);  }  point.setLocation(adv,off);  LayoutPath lp=textLine.getLayoutPath();  if (lp != null) {    lp.pathToPoint(point,ltr != leading,point);  }}  }
class C{  public List<File> sampleFiles(int number,FilenameFilter filter){  log.info("Sampling " + number + " files from "+ fromFolder.toString());  if (toFolder != null) {    log.info("Copying sampled files to " + toFolder.toString());  }  List<File> result=null;  File[] fileList=fromFolder.listFiles(filter);  if (fileList.length > 0) {    result=new ArrayList<File>();    if (fileList.length < number) {      log.warn("Although " + number + " files were requested, only "+ fileList.length+ " are available");    }    MyPermutator mp=new MyPermutator();    ArrayList<Integer> permutation=mp.permutate(fileList.length);    for (int i=0; i < Math.min(number,fileList.length); i++) {      File theFile=fileList[permutation.get(i) - 1];      if (toFolder != null) {        boolean checkMove=copyFile(toFolder,theFile);        if (!checkMove) {          log.warn("Could not successfully relocate " + theFile.toString());        }      }      result.add(theFile);    }  } else {    log.warn("The folder contains no relevant files. A null list is returned!");  }  log.info("File sampling complete.");  return result;}  }
class C{  private static void assertFilledWithConsecutiveBytes(final byte[] byteArray,final int startOffset,final int endOffset,int firstByte){  for (int i=startOffset; i < endOffset; ++i) {    assertEquals((byte)firstByte++,byteArray[i]);  }}  }
class C{  PropertyDescriptor(Class<?> bean,String base,@Nullable Method read,@Nullable Method write) throws IntrospectionException {  if (bean == null) {    throw new IntrospectionException("Target Bean class is null");  }  setClass0(bean);  setName(Introspector.decapitalize(base));  setReadMethod(read);  setWriteMethod(write);  this.baseName=base;}  }
class C{  public PagesPerMinute(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public void putByte(byte val) throws ArrayIndexOutOfBoundsException {  put(val,1);}  }
class C{  public Task<VcenterRestRep> updateAcls(URI id,ACLAssignmentChanges input){  UriBuilder uriBuilder=client.uriBuilder(getAclUrl());  return putTaskURI(input,uriBuilder.build(id));}  }
class C{  public boolean reset(){  if (isTrainEnRoute()) {    log.info("Train (" + getName() + ") has started its route, can not be reset");    return false;  }  setCurrentLocation(null);  setDepartureTrack(null);  setTerminationTrack(null);  setBuilt(false);  setBuildFailed(false);  setBuildFailedMessage(NONE);  setPrinted(false);  setModified(false);  setStatusCode(CODE_TRAIN_RESET);  if (_trainIcon != null && _trainIcon.isActive()) {    _trainIcon.remove();  }  return true;}  }
class C{  @Ignore public static <T>ObjectArray<T> instance(T[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public SootMethod lookupInitLayout_ID(Integer intId){  logger.info("calling lookupInitLayout_ID{}) ",String.format("%08x",intId));  return mLayoutInitMap.get(intId);}  }
class C{  public BulgarianStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private String printXFormat(final short x){  String sx=null;  if (x == Short.MIN_VALUE) {    sx="8000";  } else   if (x < 0) {    String t;    if (x == Short.MIN_VALUE) {      t="0";    } else {      t=Integer.toString((~(-x - 1)) ^ Short.MIN_VALUE,16);      if (t.charAt(0) == 'F' || t.charAt(0) == 'f') {        t=t.substring(16,32);      }    }switch (t.length()) {case 1:      sx="800" + t;    break;case 2:  sx="80" + t;break;case 3:sx='8' + t;break;case 4:switch (t.charAt(0)) {case '1':sx='9' + t.substring(1,4);break;case '2':sx='a' + t.substring(1,4);break;case '3':sx='b' + t.substring(1,4);break;case '4':sx='c' + t.substring(1,4);break;case '5':sx='d' + t.substring(1,4);break;case '6':sx='e' + t.substring(1,4);break;case '7':sx='f' + t.substring(1,4);break;}break;}} else {sx=Integer.toString(x,16);}return printXFormat(sx);}  }
class C{  protected JarPath(FilesystemPath root,String userPath,String path,PathImpl backing){  super(root,userPath,path);  if (_root == null)   _root=this;  if (backing instanceof JarPath)   throw new IllegalStateException(backing.toString() + " is already a jar");  _backing=backing;}  }
class C{  protected Object[] initializeRoots(){  getTreeElementMap().clear();  if (fInput instanceof CalleeHierarchy)   return initializeCalleeHiearchyRoots(); else {    Map<String,Map<String,Set<JsonElement>>> callerMap=((CallerHierarchy)fInput).getCallerMap();    return initializeCallerHierarchyRoots(callerMap);  }}  }
class C{  public void clearSearch(){  getTable().setSearchString("");}  }
class C{  @Override public Rectangle2D drawImage(final BufferedImage img,final FileDrawingAttributes attributes){  if (sceneBuffer.getSceneToUpdate() == null) {    return null;  }  if (attributes.size == null) {    attributes.size=new GamaPoint(data.getEnvWidth(),data.getEnvHeight());  }  sceneBuffer.getSceneToUpdate().addImage(img,attributes);  if (attributes.border != null) {    drawGridLine(new GamaPoint(img.getWidth(),img.getHeight()),attributes.border);  }  return rect;}  }
class C{  public static void main(String[] args){  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache star schema example started.");    CacheConfiguration<Integer,FactPurchase> factCacheCfg=new CacheConfiguration<>(PARTITIONED_CACHE_NAME);    factCacheCfg.setCacheMode(CacheMode.PARTITIONED);    factCacheCfg.setIndexedTypes(Integer.class,FactPurchase.class);    CacheConfiguration<Integer,Object> dimCacheCfg=new CacheConfiguration<>(REPLICATED_CACHE_NAME);    dimCacheCfg.setCacheMode(CacheMode.REPLICATED);    dimCacheCfg.setIndexedTypes(Integer.class,DimStore.class,Integer.class,DimProduct.class);    try (IgniteCache<Integer,FactPurchase> factCache=ignite.getOrCreateCache(factCacheCfg);IgniteCache<Integer,Object> dimCache=ignite.getOrCreateCache(dimCacheCfg)){      populateDimensions(dimCache);      populateFacts(factCache);      queryStorePurchases();      queryProductPurchases();    }  finally {      ignite.destroyCache(PARTITIONED_CACHE_NAME);      ignite.destroyCache(REPLICATED_CACHE_NAME);    }  } }  }
class C{  public void testNextLong(){  SplittableRandom sr=new SplittableRandom();  long f=sr.nextLong();  int i=0;  while (i < NCALLS && sr.nextLong() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  private String scanDirectiveName(Mark startMark){  int length=0;  char ch=reader.peek(length);  while (Constant.ALPHA.has(ch)) {    length++;    ch=reader.peek(length);  }  if (length == 0) {    throw new ScannerException("while scanning a directive",startMark,"expected alphabetic or numeric character, but found " + ch + "("+ ((int)ch)+ ")",reader.getMark());  }  String value=reader.prefixForward(length);  ch=reader.peek();  if (Constant.NULL_BL_LINEBR.hasNo(ch)) {    throw new ScannerException("while scanning a directive",startMark,"expected alphabetic or numeric character, but found " + ch + "("+ ((int)ch)+ ")",reader.getMark());  }  return value;}  }
class C{  public IllegalMonitorStateException(java.lang.String s){}  }
class C{  public void recount(){  count=0;  for (  char type : types) {    if (type != 0) {      count++;    }  }}  }
class C{  public Object executeScript(final String scriptName,final ScriptContext context,final Date asOnDate){  return executeScript(getScript(scriptName,asOnDate),context);}  }
class C{  public static DictionaryMatcher buildOperator(Map<String,String> operatorProperties) throws PlanGenException, DataFlowException {  String dictionaryStr=OperatorBuilderUtils.getRequiredProperty(DICTIONARY,operatorProperties);  String matchingTypeStr=OperatorBuilderUtils.getRequiredProperty(MATCHING_TYPE,operatorProperties);  PlanGenUtils.planGenAssert(!dictionaryStr.trim().isEmpty(),"dictionary is empty");  List<String> dictionaryList=OperatorBuilderUtils.splitStringByComma(dictionaryStr);  Dictionary dictionary=new Dictionary(dictionaryList);  List<Attribute> attributeList=OperatorBuilderUtils.constructAttributeList(operatorProperties);  KeywordMatchingType matchingType=KeywordMatcherBuilder.getKeywordMatchingType(matchingTypeStr);  PlanGenUtils.planGenAssert(matchingType != null,"matching type: " + matchingTypeStr + " is not valid, "+ "must be one of "+ KeywordMatcherBuilder.keywordMatchingTypeMap.keySet());  DictionaryPredicate predicate=new DictionaryPredicate(dictionary,attributeList,DataConstants.getStandardAnalyzer(),matchingType);  DictionaryMatcher operator=new DictionaryMatcher(predicate);  Integer limitInt=OperatorBuilderUtils.findLimit(operatorProperties);  if (limitInt != null) {    operator.setLimit(limitInt);  }  Integer offsetInt=OperatorBuilderUtils.findOffset(operatorProperties);  if (offsetInt != null) {    operator.setOffset(offsetInt);  }  return operator;}  }
class C{  public void trainTree(Tree<StateSet> trainTree,double randomness,Lexicon oldLexicon,boolean secondHalf,boolean noSmoothing,int unusedUnkThreshold){  double sentenceScore=0;  if (randomness == -1) {    sentenceScore=trainTree.getLabel().getIScore(0);    if (sentenceScore == 0) {      System.out.println("Something is wrong with this tree. I will skip it.");      return;    }  }  int sentenceScale=trainTree.getLabel().getIScale();  List<StateSet> words=trainTree.getYield();  List<StateSet> tags=trainTree.getPreTerminalYield();  for (int position=0; position < words.size(); position++) {    int nSubStates=tags.get(position).numSubStates();    short tag=tags.get(position).getState();    String word=words.get(position).getWord();    int globalWordIndex=wordIndexer.indexOf(word);    int tagSpecificWordIndex=tagWordIndexer[tag].indexOf(globalWordIndex);    double[] oldLexiconScores=null;    if (randomness == -1)     oldLexiconScores=oldLexicon.score(word,tag,position,noSmoothing,false);    StateSet currentState=tags.get(position);    double scale=ScalingTools.calcScaleFactor(currentState.getOScale() - sentenceScale) / sentenceScore;    for (short substate=0; substate < nSubStates; substate++) {      double weight=1;      if (randomness == -1) {        if (!Double.isInfinite(scale))         weight=currentState.getOScore(substate) * oldLexiconScores[substate] * scale; else         weight=Math.exp(Math.log(ScalingTools.SCALE) * (currentState.getOScale() - sentenceScale) - Math.log(sentenceScore) + Math.log(currentState.getOScore(substate)) + Math.log(oldLexiconScores[substate]));      } else       if (randomness == 0) {        weight=1;      } else {        weight=GrammarTrainer.RANDOM.nextDouble() * randomness / 100.0 + 1.0;      }      if (weight == 0)       continue;      expectedCounts[tag][substate][tagSpecificWordIndex]+=weight;    }  }}  }
class C{  public void paintSeparatorForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintForeground(context,g,x,y,w,h,orientation);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void clearEntry(IgniteTxKey key){  txState.clearEntry(key);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SSET;}  }
class C{  public SmtpClient() throws IOException {  this(null);}  }
class C{  public CertificateTypeExtension(ExtensionType type,boolean isClient,List<CertificateType> certificateTypes){  super(type);  this.isClientExtension=isClient;  this.certificateTypes=certificateTypes;}  }
class C{  static void errorUnexpectedAttribute(String systemID,int lineNr,String elementName,String attributeName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.UNEXPECTED_ATTRIBUTE,systemID,lineNr,elementName,attributeName,null,"Element " + elementName + " did not expect an attribute "+ "named "+ attributeName);}  }
class C{  private final static <T>void populateFromQuantilesSketch(final int k,final long n,final long bitPattern,final T[] combinedBuffer,final int baseBufferCount,final int numSamples,final T[] itemsArr,final long[] cumWtsArr,final Comparator<? super T> comparator){  long weight=1;  int nxt=0;  long bits=bitPattern;  assert bits == n / (2L * k);  for (int lvl=0; bits != 0L; lvl++, bits>>>=1) {    weight*=2;    if ((bits & 1L) > 0L) {      int offset=(2 + lvl) * k;      for (int i=0; i < k; i++) {        itemsArr[nxt]=combinedBuffer[i + offset];        cumWtsArr[nxt]=weight;        nxt++;      }    }  }  weight=1;  int startOfBaseBufferBlock=nxt;  for (int i=0; i < baseBufferCount; i++) {    itemsArr[nxt]=combinedBuffer[i];    cumWtsArr[nxt]=weight;    nxt++;  }  assert nxt == numSamples;  Arrays.sort(itemsArr,startOfBaseBufferBlock,numSamples,comparator);  cumWtsArr[numSamples]=0;}  }
class C{  public boolean isDynamicElement(Element e){  String ns=e.getNamespaceURI();  if (!SVGConstants.SVG_NAMESPACE_URI.equals(ns)) {    return false;  }  String ln=e.getLocalName();  if (ln.equals(SVGConstants.SVG_SCRIPT_TAG) || ln.startsWith("animate") || ln.equals(SVGConstants.SVG_SET_TAG)) {    return true;  }  return false;}  }
class C{  public void testAddContextParamToDocumentWithAnotherContextParam() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <context-param>" + "    <param-name>param1</param-name>"+ "    <param-value>value1</param-value>"+ "  </context-param>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlElement contextParamElement=createContextParamElement(webXml.getDescriptorType(),"param2","value2");  webXml.addTag(contextParamElement);  assertTrue(WebXmlUtils.hasContextParam(webXml,"param1"));  assertTrue(WebXmlUtils.hasContextParam(webXml,"param2"));}  }
class C{  public boolean providesIdentifier(){  return false;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) @Path("/{id}/resynchronize") public TaskResourceRep resynchronize(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,BlockSnapshot.class,"id");  BlockSnapshot snapshot=(BlockSnapshot)queryResource(id);  Volume volume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);  StorageSystem storage=_permissionsHelper.getObjectById(volume.getStorageController(),StorageSystem.class);  if (storage.checkIfVmax3()) {    if (snapshot.getSettingsInstance() == null) {      throw APIException.badRequests.snapshotNullSettingsInstance(snapshot.getLabel());    }  }  if (Type.openstack.name().equalsIgnoreCase(storage.getSystemType())) {    throw APIException.methodNotAllowed.notSupportedWithReason(String.format("Snapshot resynchronization is not possible on third-party storage systems"));  }  if (Type.vnxblock.name().equalsIgnoreCase(storage.getSystemType())) {    throw APIException.methodNotAllowed.notSupportedWithReason("Snapshot resynchronization is not supported on VNX storage systems");  }  BlockServiceApi blockServiceApiImpl=BlockService.getBlockServiceImpl(volume,_dbClient);  blockServiceApiImpl.validateResynchronizeSnapshot(snapshot,volume);  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.RESYNCHRONIZE_VOLUME_SNAPSHOT);  _dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),taskId,op);  snapshot.getOpStatus().put(taskId,op);  blockServiceApiImpl.resynchronizeSnapshot(snapshot,volume,taskId);  auditOp(OperationTypeEnum.RESYNCHRONIZE_VOLUME_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,id.toString(),volume.getId().toString(),snapshot.getStorageController().toString());  return toTask(snapshot,taskId,op);}  }
class C{  public Stream<T> stream(){  return (Stream)topic.stream();}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public int length(){  return this.length;}  }
class C{  private static void quickSort(double[] array,int[] index,int lo0,int hi0){  int lo=lo0;  int hi=hi0;  double mid;  int help;  if (hi0 > lo0) {    mid=array[index[(lo0 + hi0) / 2]];    while (lo <= hi) {      while ((array[index[lo]] < mid) && (lo < hi0)) {        ++lo;      }      while ((array[index[hi]] > mid) && (hi > lo0)) {        --hi;      }      if (lo <= hi) {        help=index[lo];        index[lo]=index[hi];        index[hi]=help;        ++lo;        --hi;      }    }    if (lo0 < hi) {      quickSort(array,index,lo0,hi);    }    if (lo < hi0) {      quickSort(array,index,lo,hi0);    }  }}  }
class C{  private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {  PrintWriter out=response.getWriter();  String label=request.getParameter("stop");  Monitor mon=removeMon(label,null,DEFAULT_UNITS);  if (mon == null) {    out.println(ERROR + ": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel");  } else {    mon.stop();    out.println(OK + ": stop successfully called on - " + mon);  }}  }
class C{  public String toString(){  return "TradePosition Id: " + this.getIdTradePosition() + " Version: "+ this.getVersion()+ " positionOpenDate: "+ this.getPositionOpenDate()+ " positionCloseDate: "+ this.getPositionCloseDate()+ " Side: "+ this.getSide()+ " Open Qty: "+ this.getOpenQuantity()+ " Total Buy qty: "+ this.getTotalBuyQuantity()+ " Total Buy Value: "+ new Money(this.getTotalBuyValue())+ " Total Sell qty: "+ this.getTotalSellQuantity()+ " Total Sell Value: "+ new Money(this.getTotalSellValue())+ " Total Comm: "+ new Money(this.getTotalCommission())+ " updateDate: "+ this.getLastUpdateDate();}  }
class C{  private void accumContour(int np,int icont,double[] x,double[] y,ContourAttrib cAttr){  if (np < kMinNumPoints)   return;  double[] xArr=new double[np];  double[] yArr=new double[np];  System.arraycopy(x,0,xArr,0,np);  System.arraycopy(y,0,yArr,0,np);  ContourPath path=new ContourPath(cAttr,icont,xArr,yArr);  pathList.add(path);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.938 -0500",hash_original_method="5491E96A191FF9AA58559CF28A27B675",hash_generated_method="F8C61246652072081D322D7B41B43ABE") public void union(float x,float y){  addTaintLocal(x + y);}  }
class C{  public boolean isPreferencesValid(){  return false;}  }
class C{  public String str(){  if (Double.isNaN(m_val)) {    return "NaN";  } else   if (Double.isInfinite(m_val)) {    if (m_val > 0)     return "Infinity"; else     return "-Infinity";  }  double num=m_val;  String s=Double.toString(num);  int len=s.length();  if (s.charAt(len - 2) == '.' && s.charAt(len - 1) == '0') {    s=s.substring(0,len - 2);    if (s.equals("-0"))     return "0";    return s;  }  int e=s.indexOf('E');  if (e < 0) {    if (s.charAt(len - 1) == '0')     return s.substring(0,len - 1); else     return s;  }  int exp=Integer.parseInt(s.substring(e + 1));  String sign;  if (s.charAt(0) == '-') {    sign="-";    s=s.substring(1);    --e;  } else   sign="";  int nDigits=e - 2;  if (exp >= nDigits)   return sign + s.substring(0,1) + s.substring(2,e)+ zeros(exp - nDigits);  while (s.charAt(e - 1) == '0')   e--;  if (exp > 0)   return sign + s.substring(0,1) + s.substring(2,2 + exp)+ "."+ s.substring(2 + exp,e);  return sign + "0." + zeros(-1 - exp)+ s.substring(0,1)+ s.substring(2,e);}  }
class C{  public ReaderAccessibleInfo(BigIntArray array,int bitMask,int maxNumKeysToStore){  this.array=array;  this.bitMask=bitMask;  this.maxNumKeysToStore=maxNumKeysToStore;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public CollectionExample(CollectionObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getUserId() != null) {    criteria.andUserIdEqualTo(sample.getUserId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getProjectName() != null) {    criteria.andProjectNameEqualTo(sample.getProjectName());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getTitle() != null) {    criteria.andTitleEqualTo(sample.getTitle());  }  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  public static void registerUserErrorMessagesBundle(ResourceBundle bundle){  registerUserErrorMessagesBundle(bundle,false);}  }
class C{  public Player loop(int loopTime){  this.loopTime=loopTime;  return this;}  }
class C{  public CAddressSpaceContent(final INaviAddressSpace addressSpace,final AddressSpaceContentBackend provider,final List<Pair<IAddress,INaviModule>> modules){  m_addressSpace=Preconditions.checkNotNull(addressSpace,"IE01791: Address space argument can not be null");  m_provider=Preconditions.checkNotNull(provider,"IE01792: Provider argument can not be null");  Preconditions.checkNotNull(modules,"IE01793: Modules argument can not be null");  for (  final Pair<IAddress,INaviModule> pair : modules) {    final IAddress address=pair.first();    final INaviModule module=pair.second();    m_modules.add(module);    m_imageBases.put(module,address);    final IDebugger debugger=addressSpace.getConfiguration().getDebugger();    if (debugger != null) {      debugger.setAddressTranslator(module,module.getConfiguration().getFileBase(),getImageBase(module));    }  }  final IDebugger debugger=addressSpace.getConfiguration().getDebugger();  if ((debugger == null) || !debugger.isConnected()) {    final DebuggerTemplate template=addressSpace.getConfiguration().getDebuggerTemplate();    if (template == null) {      addressSpace.getConfiguration().setDebugger(null);    } else {      final TcpDebugger newDebuggerdebugger=new TcpDebugger(template,new ProjectTargetSettings(m_addressSpace.getProject()));      for (      final INaviModule module : m_modules) {        newDebuggerdebugger.setAddressTranslator(module,module.getConfiguration().getFileBase(),getImageBase(module));      }      addressSpace.getConfiguration().setDebugger(newDebuggerdebugger);    }  }}  }
class C{  private boolean isSnapshotSessionSupported(BlockSnapshot snapshot){  boolean isSupported=false;  URI systemURI=snapshot.getStorageController();  StorageSystem system=dbClient.queryObject(StorageSystem.class,systemURI);  if ((system != null) && (system.checkIfVmax3())) {    s_logger.info("BlockSnapshotSession supported for snapshot {}:{}",snapshot.getId(),snapshot.getLabel());    isSupported=true;  }  return isSupported;}  }
class C{  @Override public void submit(StreamOp op){  writeSinceLastAcquire=true;  try {    limiter.apply(op);  } catch (  OverCapacityException ex) {    op.fail(ex);    return;  }  if (serviceTimeoutMs > 0) {    scheduleTimeout(op);  }  boolean notifyAcquireThread=false;  boolean completeOpNow=false;  boolean success=true;  if (StreamStatus.isUnavailable(status)) {    op.fail(new StreamUnavailableException("Stream " + name + " is closed."));    return;  }  if (StreamStatus.INITIALIZED == status && writer != null) {    completeOpNow=true;    success=true;  } else {synchronized (this) {      if (StreamStatus.isUnavailable(status)) {        completeOpNow=true;        success=true;      }      if (StreamStatus.INITIALIZED == status) {        completeOpNow=true;        success=true;      } else       if (StreamStatus.BACKOFF == status && lastAcquireFailureWatch.elapsed(TimeUnit.MILLISECONDS) < nextAcquireWaitTimeMs) {        completeOpNow=true;        success=false;      } else       if (failFastOnStreamNotReady) {        notifyAcquireThread=true;        completeOpNow=false;        success=false;        op.fail(new StreamNotReadyException("Stream " + name + " is not ready; status = "+ status));      } else {        notifyAcquireThread=true;        pendingOps.add(op);        pendingOpsCounter.inc();        if (1 == pendingOps.size()) {          if (op instanceof HeartbeatOp) {            ((HeartbeatOp)op).setWriteControlRecord(true);          }        }      }    }  }  if (notifyAcquireThread && !suspended) {    scheduleTryAcquireOnce(0L);  }  if (completeOpNow) {    executeOp(op,success);  }}  }
class C{  public boolean isOutputColumnNameAllowed(String columnName){  if (columnName == null || columnName.length() == 0)   return false;  getOutputColumnNames(false);  for (int i=0; i < m_outputcolumnnames.length; i++) {    if (columnName.equals(m_outputcolumnnames[i]))     return true;  }  return false;}  }
class C{  public double nextDouble(){  return 0.0d;}  }
class C{  public Text replaceWholeText(String content) throws DOMException {  return null;}  }
class C{  public TaskResourceRep unlinkTargetVolumesFromSnapshotSession(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param){  return unlinkTargetVolumesFromSnapshotSession(snapSessionURI,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET);}  }
class C{  public void warning(TranscoderException ex) throws TranscoderException {  System.err.println("WARNING: " + ex.getMessage());}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_predicates) {    for (int i=0; i < m_predicates.length; i++) {      m_predicates[i].fixupVariables(vars,globalsSize);    }  }  if (null != m_relativePathPattern) {    m_relativePathPattern.fixupVariables(vars,globalsSize);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public FaceletException(){  super();}  }
class C{  public boolean isCellEditable(int row,int col){  if (m_readOnly)   return false;  if (col == m_indexKeyColumn)   return false;  if (col < 0 && col >= m_fields.size())   return false;  if (col == m_indexActiveColumn && m_indexProcessedColumn == -1)   return true;  if (!isRowEditable(row))   return false;  return ((GridField)m_fields.get(col)).isEditable(false);}  }
class C{  @Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){  return cacheOnDisk(cacheOnDisk);}  }
class C{  @Override public void activate(){}  }
class C{  @Override public boolean hasAttributeType(){  return getTargetEntity() != null && !getTargetEntity().isVoid();}  }
class C{  public boolean contains(Object key){  return cache.containsKey(key);}  }
class C{  @Override public boolean suspendLocking(final long waitTimeMillis){  long startTime=System.currentTimeMillis();  long requestWaitTime=waitTimeMillis;  boolean interrupted=false;  try {    do {      checkDestroyed();      try {        return suspendLockingInterruptibly(requestWaitTime,false);      } catch (      InterruptedException ex) {        interrupted=true;        long millisPassed=System.currentTimeMillis() - startTime;        if (requestWaitTime >= 0) {          requestWaitTime=Math.max(0,requestWaitTime - millisPassed);        }      }    } while (requestWaitTime != 0);  }  finally {    if (interrupted)     Thread.currentThread().interrupt();  }  return false;}  }
class C{  private boolean canDelete(final INaviView[] views){  for (  final INaviView view : views) {    if (view.getType() != ViewType.NonNative) {      return false;    }  }  return true;}  }
class C{  private String toXmlStr(String s){  int control=s.indexOf("&");  while (control >= 0) {    s=s.substring(0,control) + "&amp;" + s.substring(control + 1);    if (control < s.length()) {      control++;    }    control=s.indexOf("&",control);  }  control=s.indexOf("<");  while (control >= 0) {    s=s.substring(0,control) + "&lt;" + s.substring(control + 1);    if (control < s.length()) {      control++;    }    control=s.indexOf("<",control);  }  control=s.indexOf(">");  while (control >= 0) {    s=s.substring(0,control) + "&gt;" + s.substring(control + 1);    if (control < s.length()) {      control++;    }    control=s.indexOf(">",control);  }  return s;}  }
class C{  public static void main(String[] args) throws Exception {  DemoUtils.setDkproHome(WekaSaveAndApplyModelSinglelabelDemo.class.getSimpleName());  ParameterSpace pSpace=getParameterSpace();  WekaSaveAndApplyModelSinglelabelDemo experiment=new WekaSaveAndApplyModelSinglelabelDemo();  experiment.runSaveModel(pSpace);  experiment.applyStoredModel(EXAMPLE_TEXT);}  }
class C{  public Accessor(Object instance,String className,ClassLoader classLoader){  Assert.isNotNull(instance);  Assert.isNotNull(className);  Assert.isNotNull(classLoader);  fInstance=instance;  try {    fClass=Class.forName(className,true,classLoader);  } catch (  ClassNotFoundException e) {    fail();  }catch (  ExceptionInInitializerError e) {    fail();  }}  }
class C{  public boolean isClosed() throws SQLException {  return closed;}  }
class C{  public double slope(){  return m;}  }
class C{  public void enableSyncCallback(){  mIsSyncCallback=true;}  }
class C{  public static WritableMap createMap(){  return new WritableNativeMap();}  }
class C{  public void addLiteralResultAttribute(String attrUri,String attrLocalName,String attrRawName,String attrValue){  QName key=new QName(attrUri,attrLocalName);  m_outputProperties.setProperty(key,attrValue);}  }
class C{  protected void validate_return(java.lang.String[] param){}  }
class C{  private JMenu createFileMenu(){  JMenu fileMenu=new JMenu("File");  fileMenu.addMenuListener(menuListener);  for (  Action action : actionManager.getOpenSaveWorkspaceActions()) {    fileMenu.add(action);  }  fileMenu.addSeparator();  fileMenu.add(actionManager.getClearWorkspaceAction());  fileMenu.addSeparator();  fileMenu.add(actionManager.getOpenNetworkAction());  JMenu worldSubMenu=new JMenu("Open World");  for (  Action action : actionManager.getOpenWorldActions()) {    worldSubMenu.add(action);  }  fileMenu.add(worldSubMenu);  fileMenu.addSeparator();  fileMenu.add(actionManager.getShowUpdaterDialog());  fileMenu.add(actionManager.getShowPropertyDialogAction());  fileMenu.addSeparator();  fileMenu.add(actionManager.getQuitWorkspaceAction());  return fileMenu;}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public static double blackFormulaImpliedStdDev(final Option.Type optionType,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount){  return blackFormulaImpliedStdDev(optionType,strike,forward,blackPrice,discount,Double.NaN,1.0e-6,0.0);}  }
class C{  public Figure(Lifeline actor,String _label,int y,boolean underline){  super(actor.getDiagram());  setTop(y);  String lab;  if (!_label.equals("")) {    lab=_label;  } else {    lab=actor.getName();  }  setLabel(lab.split("\\\\n"));  this.underline=underline;  textHeight=actor.getDiagram().getPaintDevice().getTextHeight();  for (  String l : getLabel()) {    int tw=actor.getDiagram().getPaintDevice().getTextWidth(l);    if (tw > textWidth) {      textWidth=tw;    }  }  int width=Math.max(actor.getDiagram().getConfiguration().getActorWidth(),textWidth);  setWidth(width);  actorHeight=actor.getDiagram().getConfiguration().getHeadHeight();  setHeight(actorHeight + 3 + getLabel().length * textHeight);  actorWidth=actor.getDiagram().getConfiguration().getActorWidth();  shouldShadow=actor.getDiagram().getConfiguration().isShouldShadowParticipants();}  }
class C{  @Override public void toBytes(ByteBuf buf){  buf.writeLong(pos.toLong());  buf.writeBoolean(hasFacing);  if (hasFacing) {    buf.writeByte(facing.getIndex());  }  ByteBufUtils.writeUTF8String(buf,lockCode);}  }
class C{  public void translate(int horizontal,int vertical){  MutableTransformer modelTransformer=getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);  try {    int dx=-vertical;    int dy=horizontal;    modelTransformer.translate(dy,dx);  } catch (  RuntimeException ex) {    throw ex;  }}  }
class C{  public void debugNoln(String format,Object... args){  if (mVerbose) {    String s=String.format(format,args);    System.out.print(s);  }}  }
class C{  public static boolean parseUseVarsParameters(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  boolean currentReparseState=((PerlBuilder)b).setReparseSQString(true);  boolean currentUseVarsState=((PerlBuilder)b).setUseVarsContent(true);  boolean r=PerlParserImpl.expr(b,l,-1);  ((PerlBuilder)b).setReparseSQString(currentReparseState);  ((PerlBuilder)b).setUseVarsContent(currentUseVarsState);  return r;}  }
class C{  protected void initialize(Class<T> mappedClass){  this.mappedClass=mappedClass;  this.mappedFields=new HashMap<String,PropertyDescriptor>();  this.mappedProperties=new HashSet<String>();  PropertyDescriptor[] pds=BeanUtils.getPropertyDescriptors(mappedClass);  for (  PropertyDescriptor pd : pds) {    if (pd.getWriteMethod() != null) {      Method readMethod=pd.getReadMethod();      if (readMethod != null) {        Column aColumn=readMethod.getAnnotation(Column.class);        if (aColumn != null) {          String name=NameUtils.getLegalName(aColumn.value());          this.mappedFields.put(lowerCaseName(name),pd);        }      }      this.mappedFields.put(lowerCaseName(pd.getName()),pd);      String underscoredName=underscoreName(pd.getName());      if (!lowerCaseName(pd.getName()).equals(underscoredName)) {        this.mappedFields.put(underscoredName,pd);      }      this.mappedProperties.add(pd.getName());    }  }}  }
class C{  public void amendTopics(ConfigurationSection config){  ConfigurationSection amendedTopics=config.getConfigurationSection("amended-topics");  if (amendedTopics != null) {    for (    String key : amendedTopics.getKeys(false)) {      HelpTopic target=getHelpTopic(key);      if (target == null) {        continue;      }      ConfigurationSection amend=amendedTopics.getConfigurationSection(key);      if (amend == null) {        continue;      }      target.amendTopic(color(amend.getString("shortText")),color(amend.getString("fullText")));      String perm=amend.getString("permission",null);      if (perm != null) {        target.amendCanSee(perm.isEmpty() ? null : perm);      }    }  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public String toInternal(String val){  if (val == null || 0 == val.length() || NEW.equals(val)) {    return UUID.randomUUID().toString().toLowerCase(Locale.ROOT);  } else {    if (val.length() != 36 || val.charAt(8) != DASH || val.charAt(13) != DASH || val.charAt(18) != DASH || val.charAt(23) != DASH) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid UUID String: '" + val + "'");    }    return val.toLowerCase(Locale.ROOT);  }}  }
class C{  private boolean isMultiApplyAttempt(){  if (workbench == null)   return false;  try {    final ISelectionService service=workbench.getActiveWorkbenchWindow().getSelectionService();    final IStructuredSelection sel=(IStructuredSelection)service.getSelection(IPageLayout.ID_PROBLEM_VIEW);    return sel != null && sel.size() >= 2;  } catch (  Exception e) {    return false;  }}  }
class C{  public String fetch(@NotNull final String url){  requireNonNull(url,"url parameter can't be null");  try {    return fetch(new URL(url).openConnection());  } catch (  IOException e) {    LOG.debug("Invalid URL",e);    return null;  }}  }
class C{  public CSVParserBuilder withSeparator(final char separator){  this.separator=separator;  return this;}  }
class C{  @SuppressWarnings("deprecation") public static String encodeUrl(Bundle parameters){  if (parameters == null) {    return "";  }  StringBuilder sb=new StringBuilder();  boolean first=true;  for (  String key : parameters.keySet()) {    if (first)     first=false; else     sb.append("&");    sb.append(URLEncoder.encode(key)).append("=").append(URLEncoder.encode(parameters.getString(key)));  }  return sb.toString();}  }
class C{  public String fastRegressionTipText(){  return "Use heuristic that avoids cross-validating the number of Logit-Boost iterations at every node. " + "When fitting the logistic regression functions at a node, LMT has to determine the number of LogitBoost " + "iterations to run. Originally, this number was cross-validated at every node in the tree. "+ "To save time, this heuristic cross-validates the number only once and then uses that number at every "+ "node in the tree. Usually this does not decrease accuracy but improves runtime considerably.";}  }
class C{  private List<String> checkAllColumnsInCube(CubeInstance cube,TableDesc table,Map<String,HiveTableMeta.HiveTableColumnMeta> fieldsMap){  Set<ColumnDesc> usedColumns=Sets.newHashSet();  for (  TblColRef col : cube.getAllColumns()) {    usedColumns.add(col.getColumnDesc());  }  List<String> violateColumns=Lists.newArrayList();  for (  ColumnDesc column : table.getColumns()) {    if (usedColumns.contains(column)) {      HiveTableMeta.HiveTableColumnMeta field=fieldsMap.get(column.getName());      if (field == null || !isColumnCompatible(column,field)) {        violateColumns.add(column.getName());      }    }  }  return violateColumns;}  }
class C{  public Query like(String fieldName,Reader... readers) throws IOException {  Map<String,Flt> words=new HashMap<String,Flt>();  for (  Reader r : readers) {    addTermWeights(r,words,fieldName);  }  return createQueryForField(fieldName,createQueue(fieldName,words));}  }
class C{  void estimateDropCell(int originX,int originY,int spanX,int spanY,int[] result){  final int countX=mCountX;  final int countY=mCountY;  pointToCellRounded(originX,originY,result);  int rightOverhang=result[0] + spanX - countX;  if (rightOverhang > 0) {    result[0]-=rightOverhang;  }  result[0]=Math.max(0,result[0]);  int bottomOverhang=result[1] + spanY - countY;  if (bottomOverhang > 0) {    result[1]-=bottomOverhang;  }  result[1]=Math.max(0,result[1]);}  }
class C{  protected LocalTile(Sector sector,double missingDataFlag,int tileWidth,int tileHeight,BufferWrapper elevations,Double minEl,Double maxEl){  this.sector=sector;  this.tileWidth=tileWidth;  this.tileHeight=tileHeight;  this.missingDataFlag=missingDataFlag;  this.elevations=elevations;  if (minEl != null)   this.minElevation=minEl;  if (maxEl != null)   this.maxElevation=maxEl;  if (minEl == null || maxEl == null)   this.computeMinMaxElevations();  return;}  }
class C{  public ZipfianGenerator(long min,long max,double _zipfianconstant,double _zetan){  items=max - min + 1;  base=min;  zipfianconstant=_zipfianconstant;  random=new Random();  theta=zipfianconstant;  zeta2theta=zeta(2,theta);  alpha=1.0 / (1.0 - theta);  zetan=_zetan;  countforzeta=items;  eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);  nextInt();}  }
class C{  public static String collectionToDelimitedString(Iterable<?> coll,String delim,String prefix,String suffix){  return collectionToDelimitedString(coll,delim,prefix,suffix,new StringBuilder());}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  Tile(int x,int y,int zoom,String url,Priority priority,TileFactory dtf){  this.url=url;  loaded=false;  this.zoom=zoom;  this.x=x;  this.y=y;  this.priority=priority;  this.dtf=dtf;}  }
class C{  public void add(T object){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.add(object);    } else {      mObjects.add(object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  private void initializeScreen(){  setupToolbar();  mProgressUpload=new ProgressDialog(getActivity());  mProgressUpload.setMessage(getString(R.string.progress_dialog_uploading));  mUsers=new ArrayList<>();  mUsersEmails=new ArrayList<>();  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  String loggedUserName=preferences.getString(Constants.KEY_USER_DISPLAY_NAME,"");  LinearLayoutManager llm=new LinearLayoutManager(getActivity());  llm.setStackFromEnd(true);  mFragmentMessagesBinding.rvMessage.setHasFixedSize(true);  mFragmentMessagesBinding.rvMessage.setLayoutManager(llm);  mFragmentMessagesBinding.setMessageViewModel(new MessageFragmViewModel(this,encodedMail,mChildChatKey,mFcmUserDeviceId,loggedUserName));  EmojIconActions emojIcon=new EmojIconActions(getActivity(),mFragmentMessagesBinding.getRoot(),mFragmentMessagesBinding.edtMessageContent,mFragmentMessagesBinding.ivEmoji);  emojIcon.ShowEmojIcon();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @NoInline @UnpreemptibleNoWarn("Non-preemptible but yield when table needs to be grown") public void add(Object object){  lock.acquire();  while (maxIndex >= table.length() || maxIndex >= freeReady()) {    int newTableSize=-1;    int newReadyForFinalizeSize=-1;    AddressArray newTable=null;    Object[] newReadyForFinalize=null;    if (maxIndex >= table.length()) {      newTableSize=STRESS ? table.length() + 1 : (int)(table.length() * GROWTH_FACTOR);    }    if (maxIndex >= freeReady()) {      newReadyForFinalizeSize=table.length() + countReady();      if (newReadyForFinalizeSize <= readyForFinalize.length) {        newReadyForFinalizeSize=-1;      }    }{      lock.release();      if (newTableSize >= 0) {        newTable=AddressArray.create(newTableSize);      }      if (newReadyForFinalizeSize >= 0) {        newReadyForFinalize=new Object[newReadyForFinalizeSize];      }      lock.acquire();    }    if (maxIndex >= table.length() && newTable != null) {      for (int i=0; i < table.length(); i++) {        newTable.set(i,table.get(i));      }      table=newTable;    }    if (maxIndex >= freeReady() && newReadyForFinalize != null) {      int j=0;      for (int i=nextReadyIndex; i < lastReadyIndex && i < readyForFinalize.length; i++) {        newReadyForFinalize[j++]=readyForFinalize[i];      }      if (lastReadyIndex < nextReadyIndex) {        for (int i=0; i < lastReadyIndex; i++) {          newReadyForFinalize[j++]=readyForFinalize[i];        }      }      lastReadyIndex=j;      nextReadyIndex=0;      readyForFinalize=newReadyForFinalize;    }  }  table.set(maxIndex++,Magic.objectAsAddress(object));  lock.release();}  }
class C{  public void destroy(){  log.fine("");}  }
class C{  protected void appendSummarySize(StringBuffer buffer,String fieldName,int size){  buffer.append(sizeStartText);  buffer.append(size);  buffer.append(sizeEndText);}  }
class C{  public TimeSeriesDataItem(RegularTimePeriod period,Number value){  ParamChecks.nullNotPermitted(period,"period");  this.period=period;  this.value=value;}  }
class C{  public T caseStructuredText(StructuredText object){  return null;}  }
class C{  protected Vector2[] parse(BufferedReader reader){  String line;  int i=0;  Vector2[] points=null;  try {    while ((line=reader.readLine()) != null) {      if (line.isEmpty())       continue;      if (line.startsWith("#"))       continue;      if (i == 0) {        int size=Integer.parseInt(line.trim());        points=new Vector2[size];      } else {        String[] xy=line.split("\\s");        double x=Double.parseDouble(xy[0].trim());        double y=Double.parseDouble(xy[1].trim());        Vector2 p=new Vector2(x,y);        points[i - 1]=p;      }      i++;    }    return points;  } catch (  IOException e) {    e.printStackTrace();  }catch (  NumberFormatException e) {    e.printStackTrace();  }catch (  ArrayIndexOutOfBoundsException e) {    e.printStackTrace();  }  return null;}  }
class C{  protected String rangeTipText(){  return "The upper and lower boundary for the range x is drawn from randomly.";}  }
class C{  public void testConstrStringMathContext(){  String a="-238768787678287e214";  int precision=5;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="-23876";  int resScale=-224;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  String biStr=new String("12345678901234567890123456789012345.0E+10");  String nbiStr=new String("-12345678901234567890123456789012345.E+10");  BigDecimal bd;  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(biStr,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());  bd=new BigDecimal(nbiStr,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(biStr,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());  bd=new BigDecimal(nbiStr,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(biStr,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());  bd=new BigDecimal(nbiStr,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(biStr,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbiStr,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  mc=new MathContext(7,RoundingMode.FLOOR);  bd=new BigDecimal("1000000.9",mc);  assertEquals("incorrect value","1000000",bd.toString());}  }
class C{  public final Object elementAt(int index){  return m_Objects[index];}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public ParticleGroup createParticleGroup(ParticleGroupDef def){  assert (isLocked() == false);  if (isLocked()) {    return null;  }  ParticleGroup g=m_particleSystem.createParticleGroup(def);  return g;}  }
class C{  public QueryWorkerJobStatus(String userID,ProjectPK projectPK,String jobID,String key,int ID,String SQL,long start,long elapse){  this.status=Status.EXECUTING;  this.userID=userID;  this.projectPK=projectPK;  this.jobID=jobID;  this.key=key;  this.ID=ID;  this.SQL=SQL;  this.elapse=elapse;  this.elapseTime=DurationFormatUtils.formatDurationHMS(elapse);}  }
class C{  public boolean isActive(){  return active && !flowVisualizer.isActive();}  }
class C{  static final int nextSecondarySeed(){  int r;  if ((r=getThreadLocalRandomSecondarySeed()) != 0) {    r^=r << 13;    r^=r >>> 17;    r^=r << 5;  } else   if ((r=ThreadLocalRandom.current().nextInt()) == 0)   r=1;  setThreadLocalRandomSecondarySeed(r);  return r;}  }
class C{  public void startRxApiTestActivity(View view){  startActivity(new Intent(RxOperatorExampleActivity.this,RxApiTestActivity.class));}  }
class C{  public boolean isCacheable(RequestHeaders request){  int responseCode=headers.getResponseCode();  if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_AUTHORITATIVE && responseCode != HttpURLConnection.HTTP_MULT_CHOICE && responseCode != HttpURLConnection.HTTP_MOVED_PERM && responseCode != HttpURLConnection.HTTP_GONE) {    return false;  }  if (request.hasAuthorization() && !isPublic && !mustRevalidate&& sMaxAgeSeconds == -1) {    return false;  }  if (noStore) {    return false;  }  return true;}  }
class C{  public void insertOOCSchedule(){  for (int i=0; i < confTeams.size(); ++i) {    confTeams.get(i).gameSchedule.add(0,confTeams.get(i).gameOOCSchedule0);    confTeams.get(i).gameSchedule.add(4,confTeams.get(i).gameOOCSchedule4);    confTeams.get(i).gameSchedule.add(9,confTeams.get(i).gameOOCSchedule9);  }}  }
class C{  private List<CLIQUESubspace<V>> findOneDimensionalDenseSubspaces(Relation<V> database){  List<CLIQUESubspace<V>> denseSubspaceCandidates=findOneDimensionalDenseSubspaceCandidates(database);  if (prune) {    return pruneDenseSubspaces(denseSubspaceCandidates);  }  return denseSubspaceCandidates;}  }
class C{  public void insertBack(int x){}  }
class C{  public CtClass makeClass(InputStream classfile,boolean ifNotFrozen) throws IOException, RuntimeException {  compress();  classfile=new BufferedInputStream(classfile);  CtClass clazz=new CtClassType(classfile,this);  clazz.checkModify();  String classname=clazz.getName();  if (ifNotFrozen)   checkNotFrozen(classname);  cacheCtClass(classname,clazz,true);  return clazz;}  }
class C{  protected void buildAlteredMessage(Mail newMail,Mail originalMail) throws MessagingException {  MimeMessage originalMessage=originalMail.getMessage();  MimeMessage newMessage=newMail.getMessage();  String[] relevantHeaderNames={RFC2822Headers.DATE,RFC2822Headers.FROM,RFC2822Headers.REPLY_TO,RFC2822Headers.TO,RFC2822Headers.SUBJECT,RFC2822Headers.RETURN_PATH};  @SuppressWarnings("unchecked") Enumeration<String> headerEnum=originalMessage.getMatchingHeaderLines(relevantHeaderNames);  while (headerEnum.hasMoreElements()) {    newMessage.addHeaderLine((String)headerEnum.nextElement());  }  StringWriter sout=new StringWriter();  PrintWriter out=new PrintWriter(sout,true);  String head=getMessageHeaders(originalMessage);  boolean all=false;  String messageText=getMessage(originalMail);  if (messageText != null) {    out.println(messageText);  }  if (isDebug) {    log("inline:" + getInLineType(originalMail));  }switch (getInLineType(originalMail)) {case ALL:    all=true;case HEADS:  out.println("Message Headers:");out.println(head);if (!all) {break;}case BODY:out.println("Message:");try {out.println(getMessageBody(originalMessage));} catch (Exception e) {out.println("body unavailable");}break;default :case NONE:break;}try {MimeMultipart multipart=new MimeMultipart("mixed");MimeMultipart mpContent=new MimeMultipart("alternative");MimeBodyPart contentPartRoot=new MimeBodyPart();contentPartRoot.setContent(mpContent);multipart.addBodyPart(contentPartRoot);MimeBodyPart part=new MimeBodyPart();part.setText(sout.toString());part.setDisposition("inline");mpContent.addBodyPart(part);if (isDebug) {log("attachmentType:" + getAttachmentType(originalMail));}if (getAttachmentType(originalMail) != NONE) {part=new MimeBodyPart();switch (getAttachmentType(originalMail)) {case HEADS:part.setText(head);break;case BODY:try {part.setText(getMessageBody(originalMessage));} catch (Exception e) {part.setText("body unavailable");}break;case ALL:String textBuffer=head + "\r\nMessage:\r\n" + getMessageBody(originalMessage);part.setText(textBuffer);break;case MESSAGE:part.setContent(originalMessage,"message/rfc822");break;}if ((originalMessage.getSubject() != null) && (originalMessage.getSubject().trim().length() > 0)) {part.setFileName(originalMessage.getSubject().trim());} else {part.setFileName("No Subject");}part.setDisposition("Attachment");multipart.addBodyPart(part);}if (attachError(originalMail) && originalMail.getErrorMessage() != null) {part=new MimeBodyPart();part.setContent(originalMail.getErrorMessage(),"text/plain");part.setHeader(RFC2822Headers.CONTENT_TYPE,"text/plain");part.setFileName("Reasons");part.setDisposition(javax.mail.Part.ATTACHMENT);multipart.addBodyPart(part);}newMail.getMessage().setContent(multipart);newMail.getMessage().setHeader(RFC2822Headers.CONTENT_TYPE,multipart.getContentType());} catch (Exception ioe) {throw new MessagingException("Unable to create multipart body",ioe);}}  }
class C{  double energyInitialization(int destruction){  if (destruction == 0 || destruction == 1) {    return 2000;  } else   if (destruction == 2) {    return 1600;  } else   if (destruction == 3) {    return 1200;  } else   if (destruction == 4) {    return 1000;  }  return 0;}  }
class C{  private void updateFailedImages(URI imageServerURI,ComputeImage image){  if (null != imageServerURI && null != image) {    String imageURIStr=image.getId().toString();    log.info("updateFailedImages : update failed image import details.");    ComputeImageServer imageServer=dbClient.queryObject(ComputeImageServer.class,imageServerURI);    if (imageServer.getComputeImages() == null || !imageServer.getComputeImages().contains(imageURIStr)) {      if (imageServer.getFailedComputeImages() == null) {        imageServer.setFailedComputeImages(new StringSet());      }      log.info("Image - {} failed to import on imageServer - {}",image.getLabel(),imageServer.getLabel());      imageServer.getFailedComputeImages().add(imageURIStr);      dbClient.updateObject(imageServer);    }  }}  }
class C{  private static boolean determineBlobs(final RowDescriptor rowDescriptor,final boolean[] isBlob){  assert rowDescriptor.getCount() == isBlob.length : "length of isBlob should be equal to length of rowDescriptor";  boolean hasBlobs=false;  for (int i=0; i < rowDescriptor.getCount(); i++) {    final FieldDescriptor field=rowDescriptor.getFieldDescriptor(i);    isBlob[i]=FBField.isType(field,Types.BLOB) || FBField.isType(field,Types.LONGVARBINARY) || FBField.isType(field,Types.LONGVARCHAR);    if (isBlob[i])     hasBlobs=true;  }  return hasBlobs;}  }
class C{  protected void collapseRemoteTaskPane(String repositoryName){  if (remoteTaskPanes.containsKey(repositoryName)) {    remoteTaskPanes.get(repositoryName).setCollapsed(true);  }}  }
class C{  public Metadata(MetadataType metadataType,String value,Alias alias){  this(metadataType,value,alias,false);}  }
class C{  public final void writeShort(int v) throws IOException {  out.write((v >>> 8) & 0xFF);  out.write((v >>> 0) & 0xFF);  incCount(2);}  }
class C{  private long searchSPSandPPS(){  ByteBuffer[] inputBuffers=mEncoder.getInputBuffers();  ByteBuffer[] outputBuffers=mEncoder.getOutputBuffers();  BufferInfo info=new BufferInfo();  byte[] csd=new byte[128];  int len=0, p=4, q=4;  long elapsed=0, now=timestamp();  while (elapsed < 3000000 && (mSPS == null || mPPS == null)) {    int bufferIndex=mEncoder.dequeueInputBuffer(1000000 / FRAMERATE);    if (bufferIndex >= 0) {      check(inputBuffers[bufferIndex].capacity() >= mData.length,"The input buffer is not big enough.");      inputBuffers[bufferIndex].clear();      inputBuffers[bufferIndex].put(mData,0,mData.length);      mEncoder.queueInputBuffer(bufferIndex,0,mData.length,timestamp(),0);    } else {      if (VERBOSE)       Log.e(TAG,"No buffer available !");    }    int index=mEncoder.dequeueOutputBuffer(info,1000000 / FRAMERATE);    if (index == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {      MediaFormat format=mEncoder.getOutputFormat();      ByteBuffer spsb=format.getByteBuffer("csd-0");      ByteBuffer ppsb=format.getByteBuffer("csd-1");      mSPS=new byte[spsb.capacity() - 4];      spsb.position(4);      spsb.get(mSPS,0,mSPS.length);      mPPS=new byte[ppsb.capacity() - 4];      ppsb.position(4);      ppsb.get(mPPS,0,mPPS.length);      break;    } else     if (index == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {      outputBuffers=mEncoder.getOutputBuffers();    } else     if (index >= 0) {      len=info.size;      if (len < 128) {        outputBuffers[index].get(csd,0,len);        if (len > 0 && csd[0] == 0 && csd[1] == 0 && csd[2] == 0 && csd[3] == 1) {          while (p < len) {            while (!(csd[p + 0] == 0 && csd[p + 1] == 0 && csd[p + 2] == 0 && csd[p + 3] == 1) && p + 3 < len)             p++;            if (p + 3 >= len)             p=len;            if ((csd[q] & 0x1F) == 7) {              mSPS=new byte[p - q];              System.arraycopy(csd,q,mSPS,0,p - q);            } else {              mPPS=new byte[p - q];              System.arraycopy(csd,q,mPPS,0,p - q);            }            p+=4;            q=p;          }        }      }      mEncoder.releaseOutputBuffer(index,false);    }    elapsed=timestamp() - now;  }  check(mPPS != null & mSPS != null,"Could not determine the SPS & PPS.");  mB64PPS=Base64.encodeToString(mPPS,0,mPPS.length,Base64.NO_WRAP);  mB64SPS=Base64.encodeToString(mSPS,0,mSPS.length,Base64.NO_WRAP);  return elapsed;}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  if (getCompressOutput()) {    setFileExtension(JSONLoader.FILE_EXTENSION_COMPRESSED);  } else {    setFileExtension(JSONLoader.FILE_EXTENSION);  }}  }
class C{  public static boolean loadMetadata(final Context context,final FilmstripItem data){  boolean metadataAdded=false;  if (data.getAttributes().isImage()) {    metadataAdded|=PanoramaMetadataLoader.loadPanoramaMetadata(context,data.getData().getUri(),data.getMetadata());    metadataAdded|=RgbzMetadataLoader.loadRgbzMetadata(context,data.getData().getUri(),data.getMetadata());  } else   if (data.getAttributes().isVideo()) {    metadataAdded=VideoRotationMetadataLoader.loadRotationMetadata(data);  }  data.getMetadata().setLoaded(true);  return metadataAdded;}  }
class C{  public static void zipTo(File dir,File destFile){  FileOutputStream ops=null;  ZipOutputStream zos=null;  try {    ops=new FileOutputStream(destFile);    zos=new ZipOutputStream(ops);    zipDir(dir,zos,"");  } catch (  FileNotFoundException e) {    e.printStackTrace();  } finally {    try {      if (zos != null)       zos.close(); else       if (ops != null)       ops.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public final void add(final int at,final long[] src,final int from,final int count){  if (count <= 0)   return;  if (at > size)   throw new IndexOutOfBoundsException();  ensure(size + count);  if (at < size) {    java.lang.System.arraycopy(list,at,list,at + count,size - at);  }  java.lang.System.arraycopy(src,from,list,at,count);  size+=count;}  }
class C{  private int addInvoices(MDunningLevel level){  int count=0;  String sql="SELECT i.C_Invoice_ID, i.C_Currency_ID," + " i.GrandTotal*i.MultiplierAP," + " invoiceOpen(i.C_Invoice_ID,i.C_InvoicePaySchedule_ID)*MultiplierAP,"+ " COALESCE(daysBetween(?,ips.DueDate),paymentTermDueDays(i.C_PaymentTerm_ID,i.DateInvoiced,?)),"+ " i.IsInDispute, i.C_BPartner_ID, i.C_InvoicePaySchedule_ID "+ "FROM C_Invoice_v i "+ " LEFT OUTER JOIN C_InvoicePaySchedule ips ON (i.C_InvoicePaySchedule_ID=ips.C_InvoicePaySchedule_ID) "+ "WHERE i.IsPaid='N' AND i.AD_Client_ID=?"+ " AND i.DocStatus IN ('CO','CL')"+ " AND (i.DunningGrace IS NULL OR i.DunningGrace<?) "+ " AND EXISTS (SELECT * FROM C_DunningLevel dl "+ "WHERE dl.C_DunningLevel_ID=?"+ " AND dl.C_Dunning_ID IN "+ "(SELECT COALESCE(bp.C_Dunning_ID, bpg.C_Dunning_ID) "+ "FROM C_BPartner bp"+ " INNER JOIN C_BP_Group bpg ON (bp.C_BP_Group_ID=bpg.C_BP_Group_ID) "+ "WHERE i.C_BPartner_ID=bp.C_BPartner_ID"+ " AND (bp.DunningGrace IS NULL OR bp.DunningGrace<?)))";  if (p_C_BPartner_ID != 0)   sql+=" AND i.C_BPartner_ID=?"; else   if (p_C_BP_Group_ID != 0)   sql+=" AND EXISTS (SELECT * FROM C_BPartner bp " + "WHERE i.C_BPartner_ID=bp.C_BPartner_ID AND bp.C_BP_Group_ID=?)";  if (p_OnlySOTrx)   sql+=" AND i.IsSOTrx='Y'";  if (!p_IsAllCurrencies)   sql+=" AND i.C_Currency_ID=" + p_C_Currency_ID;  if (p_AD_Org_ID != 0)   sql+=" AND i.AD_Org_ID=" + p_AD_Org_ID;  String sql2=null;  if (level.getParent().isCreateLevelsSequentially()) {    MDunningLevel[] previousLevels=level.getPreviousLevels();    if (previousLevels != null && previousLevels.length > 0) {      String sqlAppend="";      for (      MDunningLevel element : previousLevels) {        sqlAppend+=" AND i.C_Invoice_ID IN (SELECT C_Invoice_ID FROM C_DunningRunLine WHERE " + "C_DunningRunEntry_ID IN (SELECT C_DunningRunEntry_ID FROM C_DunningRunEntry WHERE " + "C_DunningRun_ID IN (SELECT C_DunningRun_ID FROM C_DunningRunEntry WHERE "+ "C_DunningLevel_ID=" + element.get_ID() + ")) AND Processed<>'N')";      }      sql+=sqlAppend;    }  }  sql2="SELECT COUNT(*), COALESCE(DAYSBETWEEN(MAX(dr2.DunningDate), MAX(dr.DunningDate)),0)" + "FROM C_DunningRun dr2, C_DunningRun dr" + " INNER JOIN C_DunningRunEntry dre ON (dr.C_DunningRun_ID=dre.C_DunningRun_ID)"+ " INNER JOIN C_DunningRunLine drl ON (dre.C_DunningRunEntry_ID=drl.C_DunningRunEntry_ID) "+ "WHERE dr2.C_DunningRun_ID=? AND drl.C_Invoice_ID=?";  BigDecimal DaysAfterDue=level.getDaysAfterDue();  int DaysBetweenDunning=level.getDaysBetweenDunning();  PreparedStatement pstmt=null;  PreparedStatement pstmt2=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setTimestamp(1,m_run.getDunningDate());    pstmt.setTimestamp(2,m_run.getDunningDate());    pstmt.setInt(3,m_run.getAD_Client_ID());    pstmt.setTimestamp(4,m_run.getDunningDate());    pstmt.setInt(5,level.getC_DunningLevel_ID());    pstmt.setTimestamp(6,m_run.getDunningDate());    if (p_C_BPartner_ID != 0)     pstmt.setInt(7,p_C_BPartner_ID); else     if (p_C_BP_Group_ID != 0)     pstmt.setInt(7,p_C_BP_Group_ID);    pstmt2=DB.prepareStatement(sql2,get_TrxName());    rs=pstmt.executeQuery();    while (rs.next()) {      int C_Invoice_ID=rs.getInt(1);      int C_Currency_ID=rs.getInt(2);      BigDecimal GrandTotal=rs.getBigDecimal(3);      BigDecimal Open=rs.getBigDecimal(4);      int DaysDue=rs.getInt(5);      boolean IsInDispute="Y".equals(rs.getString(6));      int C_BPartner_ID=rs.getInt(7);      int C_InvoicePaySchedule_ID=rs.getInt(8);      log.fine("DaysAfterDue: " + DaysAfterDue.intValue() + " isShowAllDue: "+ level.isShowAllDue());      log.fine("C_Invoice_ID - DaysDue - GrandTotal: " + C_Invoice_ID + " - "+ DaysDue+ " - "+ GrandTotal);      log.fine("C_InvoicePaySchedule_ID: " + C_InvoicePaySchedule_ID);      if (!p_IncludeInDispute && IsInDispute)       continue;      if (DaysDue > 0 && DaysDue < DaysAfterDue.intValue() && !level.isShowAllDue())       continue;      if (Env.ZERO.compareTo(Open) == 0)       continue;      int TimesDunned=0;      int DaysAfterLast=0;      pstmt2.setInt(1,m_run.get_ID());      pstmt2.setInt(2,C_Invoice_ID);      ResultSet rs2=pstmt2.executeQuery();      if (rs2.next()) {        TimesDunned=rs2.getInt(1);        DaysAfterLast=rs2.getInt(2);      }      rs2.close();      if (DaysBetweenDunning != 0 && TimesDunned > 0 && DaysAfterLast < DaysBetweenDunning && !level.isShowAllDue() && !level.isShowNotDue())       continue;      if (DaysDue < 0 && !level.isShowNotDue())       continue;      if (DaysAfterLast < DaysBetweenDunning)       TimesDunned=TimesDunned * -1;      if (createInvoiceLine(C_Invoice_ID,C_InvoicePaySchedule_ID,C_Currency_ID,GrandTotal,Open,DaysDue,IsInDispute,C_BPartner_ID,TimesDunned,DaysAfterLast,level.getC_DunningLevel_ID())) {        count++;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"addInvoices",e);    getProcessInfo().addLog(getProcessInfo().getAD_PInstance_ID(),null,null,e.getLocalizedMessage());  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;    pstmt2=null;  }  return count;}  }
class C{  @Override int lookForSelectablePosition(int position,boolean lookDown){  final ListAdapter adapter=mAdapter;  if (adapter == null || isInTouchMode()) {    return INVALID_POSITION;  }  final int count=adapter.getCount();  if (!mAreAllItemsSelectable) {    if (lookDown) {      position=Math.max(0,position);      while (position < count && !adapter.isEnabled(position)) {        position++;      }    } else {      position=Math.min(position,count - 1);      while (position >= 0 && !adapter.isEnabled(position)) {        position--;      }    }    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  } else {    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  }}  }
class C{  public static boolean hayError(DocumentoIER dier){  InformacionError ie=dier.getInformacionError();  return ie.getCodigo().get().equals("0") ? false : true;}  }
class C{  @Override public void stop(BundleContext context) throws Exception {  if (null != cmrRepositoryManager) {    cmrRepositoryManager.cancelAllUpdateRepositoriesJobs();  }  Platform.removeLogListener(logListener);  logListener=null;  super.stop(context);  plugin=null;}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  private SystemPropertiesProxy(){}  }
class C{  public static String valueOf(char[] data){  return new String(data,0,data.length);}  }
class C{  public void close(){}  }
class C{  public boolean isActive(final BlockHeight height){  if (!this.getId().isRoot()) {    throw new UnsupportedOperationException("call to isActive is only allowed for root namespaces");  }  final long blocksPerYear=NemGlobals.getBlockChainConfiguration().getEstimatedBlocksPerYear();  final BlockHeight expiryHeight=new BlockHeight(this.height.getRaw() + blocksPerYear);  return expiryHeight.compareTo(height) > 0 && this.height.compareTo(height) <= 0;}  }
class C{  private static UUID buildNewUUID(byte[] data){  long msb=0;  long lsb=0;  assert data.length == 16 : "data must be 16 bytes in length";  for (int i=0; i < 8; i++)   msb=(msb << 8) | (data[i] & 0xff);  for (int i=8; i < 16; i++)   lsb=(lsb << 8) | (data[i] & 0xff);  UUID newUUID=new UUID(msb,lsb);  return newUUID;}  }
class C{  public boolean dispatchKeyShortcutEvent(KeyEvent event){  onUserInteraction();  if (getWindow().superDispatchKeyShortcutEvent(event)) {    return true;  }  return onKeyShortcut(event.getKeyCode(),event);}  }
class C{  TopLevelVisibilityFix(String typeLabel,String suggestion) throws IllegalArgumentException {  description="Declare " + typeLabel + " as export "+ QuickfixUtil.readableStringForSuggestion(suggestion);  modifier=QuickfixUtil.modifierForSuggestion(suggestion);  internal=QuickfixUtil.modifierSuggestionIsInternal(suggestion);}  }
class C{  public Follower(String output,String sensor,boolean invert,String veto){  this.veto=veto;  this.sensor=sensor;  this.invert=invert;  this.output=output;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  OnMenuItemClickListener menuItemClickListener=new Listener(this);  if (Listener.logging) {    getMenuInflater().inflate(R.menu.activity_connections_logging,menu);    menu.findItem(R.id.endLogging).setOnMenuItemClickListener(menuItemClickListener);  } else {    getMenuInflater().inflate(R.menu.activity_connections,menu);    menu.findItem(R.id.startLogging).setOnMenuItemClickListener(menuItemClickListener);  }  menu.findItem(R.id.newConnection).setOnMenuItemClickListener(menuItemClickListener);  return true;}  }
class C{  public boolean isAddressedModePossible(jmri.LocoAddress l){  return isAddressedModePossible();}  }
class C{  private void flushInternal() throws IOException {  if (count > 0) {    out.write(buf,0,count);    count=0;  }}  }
class C{  public static int[] quickSort(int[] list){  return quicksortHelper(list,0,list.length - 1);}  }
class C{  private void toHexString(){  String subText=receivedData.getText();  StringBuffer hexText=new StringBuffer();  byte[] subBytes=subText.getBytes();  for (int i=0; i < subBytes.length; i++) {    int byteValue=subBytes[i];    if (byteValue < 0) {      byteValue+=256;    }    if (byteValue < 16) {      hexText.append("0" + Integer.toHexString(byteValue));    } else {      hexText.append(Integer.toHexString(byteValue));    }  }  hexDisplay=true;  subLabel.setText(PANEL_TITLE + " - hexadecimal display");  mqttMgr.setTitleText("");  hexButton.setText("Text");  receivedData.setText(hexText.toString());}  }
class C{  @Override public void restoreState(FacesContext facesContext,Object state){  Object[] stateArray=(Object[])state;  converterId=(String)stateArray[0];  forClass=(Class)stateArray[1];}  }
class C{  public void test_ctor_correctRejection(){  new TermIdEncoder(0);  new TermIdEncoder(1);  new TermIdEncoder(30);  new TermIdEncoder(31);  try {    new TermIdEncoder(-1);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled()) {      log.info("Ignoring expected exception: " + ex);    }  }  try {    new TermIdEncoder(32);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled()) {      log.info("Ignoring expected exception: " + ex);    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosTownhallAreaMayor(zone);}  }
class C{  QuickSelectSketch(final int nomEntries,final int lgResizeFactor,final SummaryFactory<S> summaryFactory){  this(nomEntries,lgResizeFactor,1f,summaryFactory);}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  private long toLong(InetAddress inetAddress){  byte[] address=inetAddress.getAddress();  long result=0;  for (int i=0; i < address.length; i++) {    result<<=8;    result|=address[i] & BYTE_MASK;  }  return result;}  }
class C{  public char read(){  return data.charAt(pos++);}  }
class C{  public boolean isCompressedDense(){  return compressedDense;}  }
class C{  public void fill(int rgb){  colorCalc(rgb);  fillFromCalc();}  }
class C{  private static long addCap(long a,long b){  long u=a + b;  if (u < 0L) {    u=Long.MAX_VALUE;  }  return u;}  }
class C{  protected void validate(ElementMetadata<?,?> metadata,ValidationContext vc){  if (metadata != null) {    metadata.validate(vc,this);  }}  }
class C{  void encode(DerOutputStream out) throws IOException {  out.putOctetString(octetString);}  }
class C{  public void valueOf(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    invokeStatic(boxed,new Method("valueOf",boxed,new Type[]{type}));  }}  }
class C{  public long transferTo(OutputStream dst) throws IOException {  return transferTo(0L,_size,dst);}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  public boolean isStdUserWorkflow(){  Object oo=get_Value(COLUMNNAME_IsStdUserWorkflow);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void onLoadFinish(BitmapDrawable drawable,ImageLoadHandler handler){  mFlag&=~STATUS_LOADING;  mFlag|=STATUS_DONE;  if (null == handler || null == mFirstImageViewHolder) {    return;  }  if (null != mImageTaskStatistics) {    mImageTaskStatistics.showBegin();  }  ImageViewHolder holder=mFirstImageViewHolder;  do {    final CubeImageView imageView=holder.getImageView();    if (null != imageView) {      imageView.onLoadFinish();      handler.onLoadFinish(this,imageView,drawable);    }  } while ((holder=holder.mNext) != null);  if (null != mImageTaskStatistics) {    mImageTaskStatistics.showComplete(ImageProvider.getBitmapSize(drawable));  }}  }
class C{  public ClientMessage sendMessage(byte[] body){  ClientMessage message=createMessage(body);  sendMessage(message);  return message;}  }
class C{  private void invalidateLineMapAfter(int itemIndex){  if (batchSetting) {    return;  }  int itemLineIndex=itemLineIndex(itemIndex);  Line line=lineMap.get(itemLineIndex,null);  if (line == null && lineMap.size() > 0) {    lineMap.remove(lineMap.size() - 1);  }  while (line != null) {    lineMap.remove(itemLineIndex);    itemLineIndex++;    line=lineMap.get(itemLineIndex,null);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:46.069 -0500",hash_original_method="4157DB54FF0EFBF9F8662A7A8A8DB6F2",hash_generated_method="894EDC9231418AEFE5ABBFFA0E812A84") public void restoreEntity(BackupDataInputStream data){  Context context=mContext;  String key=data.getKey();  if (DEBUG)   Log.d(TAG,"got entity '" + key + "' size="+ data.size());  if (isKeyInList(key,mPrefGroups)) {    File f=context.getSharedPrefsFile(key).getAbsoluteFile();    writeFile(f,data);  }}  }
class C{  public static int readInt(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonObject.getInt(key);  }  if (notNull && jsonObject.isNull(key)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));  }  int value=0;  if (!jsonObject.isNull(key)) {    value=jsonObject.getInt(key);  }  return value;}  }
class C{  @Override protected RdKNNNode createNewLeafNode(){  return new RdKNNNode(leafCapacity,true);}  }
class C{  public void flush(){  Handler[] handlerArray=m_logger.getHandlers();  for (int i=0; i < handlerArray.length; i++) {    Handler h=handlerArray[i];    h.flush();  }}  }
class C{  public DownloadTask resume(String taskId){  DownloadTask downloadTask=getCurrentTaskById(taskId);  if (downloadTask != null) {    if (downloadTask.getDownloadStatus() == DownloadStatus.DOWNLOAD_STATUS_PAUSE) {      downloadTask.setDownloadStatus(DownloadStatus.DOWNLOAD_STATUS_INIT);      Future future=executorService.submit(downloadTask);      futureMap.put(downloadTask.getId(),future);    }  } else {    downloadTask=getDBTaskById(taskId);    if (downloadTask != null) {      downloadTask.setDownloadStatus(DownloadStatus.DOWNLOAD_STATUS_INIT);      currentTaskList.put(taskId,downloadTask);      Future future=executorService.submit(downloadTask);      futureMap.put(downloadTask.getId(),future);    }  }  return downloadTask;}  }
class C{  protected SVGOMFESpotLightElement(){}  }
class C{  public void login(final String account,final String password) throws IOException {  unsetLoginData();  send("USER " + account);  String reply=receive();switch (getStatus(reply)) {case 2:    break;case 5:case 4:case 1:  throw new IOException(reply);default :send("PASS " + password);reply=receive();if (isNotPositiveCompletion(reply)) {throw new IOException(reply);}}setLoginData(account,password,reply);}  }
class C{  static void closeOut(OptimizedObjectOutputStream out){  U.close(out,null);  if (outPool != null) {    boolean b=outPool.offer(out);    assert b;  } else {    StreamHolder holder=holders.get();    if (holder != null)     holder.releaseOut();  }}  }
class C{  public static ThreadModel newThreadModel(Model model){switch (model) {case JAVA:    return new JavaThreadModel();case DETERMINISTIC:  return new RawThreadModel();default :throw new RuntimeException("Unknown thread model");}}  }
class C{  @Override public void userSelectedMoveListMove(int halfMoveNumber){  cursor.setCursor(halfMoveNumber);  refresh(false);  addDecorationsForLastMoveListMove();}  }
class C{  public void updateConsistencyGroupReadOnlyState(List<URI> vplexVolumeURIs,Boolean isReadOnly,String stepId){  try {    WorkflowStepCompleter.stepExecuting(stepId);    Volume vplexVolume=dbClient.queryObject(Volume.class,vplexVolumeURIs.get(0));    StorageSystem vplexSystem=dbClient.queryObject(StorageSystem.class,vplexVolume.getStorageController());    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    if (NullColumnValueGetter.isNullURI(vplexVolume.getConsistencyGroup())) {      log.info("Volume has no ConsistencyGroup: " + vplexVolume.getLabel());      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,vplexVolume.getConsistencyGroup());    ClusterConsistencyGroupWrapper clusterConsistencyGroup=getClusterConsistencyGroup(vplexVolume,cg);    String cgName=clusterConsistencyGroup.getCgName();    String clusterName=clusterConsistencyGroup.getClusterName();    boolean isDistributed=clusterConsistencyGroup.isDistributed();    client.updateConsistencyGroupReadOnly(cgName,clusterName,isDistributed,isReadOnly);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException ex) {    if (ServiceCode.VPLEX_API_FIRMWARE_UPDATE_NEEDED.equals(ex.getServiceCode())) {      WorkflowStepCompleter.stepSucceeded(stepId,ex.getLocalizedMessage());    } else {      log.info("Exception setting Consistency Group read-only state: " + ex.getMessage());      ServiceError svcError=VPlexApiException.errors.jobFailed(ex);      WorkflowStepCompleter.stepFailed(stepId,svcError);    }  }catch (  Exception ex) {    log.info("Exception setting Consistency Group read-only state: " + ex.getMessage());    ServiceError svcError=VPlexApiException.errors.jobFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,svcError);  }}  }
class C{  private void installClientDecorations(JRootPane root){  installBorder(root);  JComponent titlePane=createTitlePane(root);  setTitlePane(root,titlePane);  installWindowListeners(root,root.getParent());  installLayout(root);  if (!BeautyEyeLNFHelper.__isFrameBorderOpaque() && window != null) {    WindowTranslucencyHelper.setWindowOpaque(window,false);    root.revalidate();    root.repaint();  }}  }
class C{  public OMGraphic drawFeature(VPFFeatureWarehouse warehouse,double dpplat,double dpplon,LatLonPoint ll1,LatLonPoint ll2,List<Object> edge,String featureType,int primID){  if (warehouse != null) {    return warehouse.createEdge(covtable,this,edge,ll1,ll2,dpplat,dpplon,getCoordinates(edge),featureType,primID);  }  return null;}  }
class C{  private static String buildSdpWithoutOrientation(VideoCodec videoCodec,int localRtpPort){  int payloadType=videoCodec.getPayloadType();  StringBuilder sdp=new StringBuilder("m=video ").append(localRtpPort).append(" RTP/AVP ").append(payloadType).append(SipUtils.CRLF).append("a=rtpmap:").append(payloadType).append(" ").append(videoCodec.getEncoding()).append("/").append(videoCodec.getClockRate()).append(SipUtils.CRLF);  int width=videoCodec.getWidth();  int height=videoCodec.getHeight();  if (width != 0 && height != 0) {    sdp.append("a=framesize:").append(payloadType).append(" ").append(width).append("-").append(height).append(SipUtils.CRLF);  }  int frameRate=videoCodec.getFrameRate();  if (frameRate != 0) {    sdp.append("a=framerate:").append(frameRate).append(SipUtils.CRLF);  }  sdp.append("a=fmtp:").append(frameRate).append(" ").append(videoCodec.getParameters()).append(SipUtils.CRLF);  return sdp.toString();}  }
class C{  public String sql_delete(String vendorName,String catalogName,String schemaName,String tableName){  return sql_delete(vendorName,catalogName,schemaName,tableName,(String)null,null);}  }
class C{  public ItemStack decrStackSize(int var1,int var2){  if (slots[var1] != null) {    ItemStack itemstack;    if (slots[var1].stackSize <= var2) {      itemstack=slots[var1];      slots[var1]=null;      return itemstack;    } else {      itemstack=slots[var1].splitStack(var2);      if (slots[var1].stackSize == 0) {        slots[var1]=null;      }      return itemstack;    }  } else {    return null;  }}  }
class C{  public Bits(){  this(false);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void tagDefineTextField(int fieldId,String fieldName,String initialText,Rect boundary,int flags,AlphaColor textColor,int alignment,int fontId,int fontSize,int charLimit,int leftMargin,int rightMargin,int indentation,int lineSpacing) throws IOException {  if (initialText != null) {    strings.add(initialText);  }}  }
class C{  public Observable<ReactiveXCameraData> periodicDataRequest(long intervalMills){  return new PeriodicDataRequest(reactiveXCamera,intervalMills).get();}  }
class C{  public RawData(byte[] data,InetSocketAddress address,Principal clientIdentity,boolean multicast){  this(data,address,clientIdentity,null,multicast);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.800 -0500",hash_original_method="E23B4E2A713C93A88E352378F7DC6B9B",hash_generated_method="F6328C3E10841AEBBE550B2E6E81DCC3") @SuppressWarnings("unchecked") private void refreshExpGroupMetadataList(boolean forceChildrenCountRefresh,boolean syncGroupPositions){  final ArrayList<GroupMetadata> egml=mExpGroupMetadataList;  int egmlSize=egml.size();  int curFlPos=0;  mTotalExpChildrenCount=0;  if (syncGroupPositions) {    boolean positionsChanged=false;    for (int i=egmlSize - 1; i >= 0; i--) {      GroupMetadata curGm=egml.get(i);      int newGPos=findGroupPosition(curGm.gId,curGm.gPos);      if (newGPos != curGm.gPos) {        if (newGPos == AdapterView.INVALID_POSITION) {          egml.remove(i);          egmlSize--;        }        curGm.gPos=newGPos;        if (!positionsChanged)         positionsChanged=true;      }    }    if (positionsChanged) {      Collections.sort(egml);    }  }  int gChildrenCount;  int lastGPos=0;  for (int i=0; i < egmlSize; i++) {    GroupMetadata curGm=egml.get(i);    if ((curGm.lastChildFlPos == GroupMetadata.REFRESH) || forceChildrenCountRefresh) {      gChildrenCount=mExpandableListAdapter.getChildrenCount(curGm.gPos);    } else {      gChildrenCount=curGm.lastChildFlPos - curGm.flPos;    }    mTotalExpChildrenCount+=gChildrenCount;    curFlPos+=(curGm.gPos - lastGPos);    lastGPos=curGm.gPos;    curGm.flPos=curFlPos;    curFlPos+=gChildrenCount;    curGm.lastChildFlPos=curFlPos;  }}  }
class C{  public Builder replicate(int replicate){  this.replicate=replicate;  return this;}  }
class C{  public UpdateRequest upsert(byte[] source,int offset,int length){  safeUpsertRequest().source(source,offset,length);  return this;}  }
class C{  public void toEPL(StringWriter writer){  toEPL(new EPStatementFormatter(false),writer);}  }
class C{  public final void readInt(int[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    pa[start + i]=readInt();  }}  }
class C{  private String resolveNextPageUrl(String sourceOffset) throws ELEvalException {  String url;  if (conf.pagination.mode == PaginationMode.LINK_HEADER && next != null) {    url=next.getUri().toString();  } else   if (conf.pagination.mode == PaginationMode.BY_OFFSET || conf.pagination.mode == PaginationMode.BY_PAGE) {    if (sourceOffset != null) {      setPageOffset(sourceOffset);    }    url=resourceEval.eval(resourceVars,conf.resourceUrl,String.class);  } else {    url=resolvedUrl;  }  return url;}  }
class C{  public Collection<Address> members(){  return members;}  }
class C{  public CStepEndAction(final JFrame parent,final IFrontEndDebuggerProvider debugger,final ZyGraph graph){  m_parent=Preconditions.checkNotNull(parent,"IE00309: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01541: Debugger argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01537: Graph argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Step to the end of the function");}  }
class C{  public final char readChar() throws IOException {  return (char)readShort();}  }
class C{  public static double[] multiply(double[] a,double c){  double[] result=new double[a.length];  for (int i=0; i < a.length; i++) {    result[i]=a[i] * c;  }  return result;}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public static boolean isNetworkConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();  return activeNetworkInfo != null && activeNetworkInfo.isConnected();}  }
class C{  public void initialize(int ss,int ber){  mSignalStrength=ss;  mBitErrorRate=ber;}  }
class C{  public void attachRTCListener(PnRTCListener listener){  this.pcClient.setRTCListener(listener);}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String json=getNotificationGroupsList(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(json);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshots/{sid}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList deactivateConsistencyGroupSnapshot(@PathParam("id") final URI consistencyGroupId,@PathParam("sid") final URI snapshotId){  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(consistencyGroupId);  if (isIdEmbeddedInURL(consistencyGroupId) && consistencyGroup.checkForType(Types.RP)) {    throw APIException.badRequests.snapshotsNotSupportedForRPCGs();  }  if (BlockConsistencyGroupUtils.getLocalSystemsInCG(consistencyGroup,_dbClient).isEmpty()) {    _log.error("{} Group Snapshot operations not supported when there is no backend CG",consistencyGroup.getId());    throw APIException.badRequests.cannotCreateSnapshotOfVplexCG();  }  final BlockSnapshot snapshot=(BlockSnapshot)queryResource(snapshotId);  verifySnapshotIsForConsistencyGroup(snapshot,consistencyGroup);  List<Class<? extends DataObject>> excludeTypes=new ArrayList<Class<? extends DataObject>>();  excludeTypes.add(BlockSnapshotSession.class);  ArgValidator.checkReference(BlockSnapshot.class,snapshotId,checkForDelete(snapshot,excludeTypes));  BlockSnapshotSession session=BlockSnapshotSessionUtils.getLinkedTargetSnapshotSession(snapshot,_dbClient);  if (session != null) {    return deactivateAndUnlinkTargetVolumesForSession(session,snapshot);  }  final String task=UUID.randomUUID().toString();  TaskList response=new TaskList();  if (snapshot.getInactive()) {    Operation op=new Operation();    op.ready("The consistency group snapshot has already been deactivated");    op.setResourceType(ResourceOperationTypeEnum.DELETE_CONSISTENCY_GROUP_SNAPSHOT);    _dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),task,op);    response.getTaskList().add(toTask(snapshot,task,op));    return response;  }  List<BlockSnapshot> snapshots=new ArrayList<BlockSnapshot>();  snapshots=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshot,_dbClient);  Volume parentVolume=_permissionsHelper.getObjectById(snapshot.getParent(),Volume.class);  checkForPendingTasks(Arrays.asList(parentVolume.getTenant().getURI()),snapshots);  for (  BlockSnapshot snap : snapshots) {    Operation snapOp=_dbClient.createTaskOpStatus(BlockSnapshot.class,snap.getId(),task,ResourceOperationTypeEnum.DEACTIVATE_VOLUME_SNAPSHOT);    response.getTaskList().add(toTask(snap,task,snapOp));  }  addConsistencyGroupTask(consistencyGroup,response,task,ResourceOperationTypeEnum.DEACTIVATE_CONSISTENCY_GROUP_SNAPSHOT);  try {    BlockServiceApi blockServiceApiImpl=BlockService.getBlockServiceImpl(parentVolume,_dbClient);    blockServiceApiImpl.deleteSnapshot(snapshot,snapshots,task,VolumeDeleteTypeEnum.FULL.name());  } catch (  APIException|InternalException e) {    String errorMsg=String.format("Exception attempting to delete snapshot %s: %s",snapshot.getId(),e.getMessage());    _log.error(errorMsg);    for (    TaskResourceRep taskResourceRep : response.getTaskList()) {      taskResourceRep.setState(Operation.Status.error.name());      taskResourceRep.setMessage(errorMsg);      @SuppressWarnings({"unchecked"}) Class<? extends DataObject> clazz=URIUtil.getModelClass(taskResourceRep.getResource().getId());      _dbClient.error(clazz,taskResourceRep.getResource().getId(),task,e);    }    throw e;  }catch (  Exception e) {    String errorMsg=String.format("Exception attempting to delete snapshot %s: %s",snapshot.getId(),e.getMessage());    _log.error(errorMsg);    APIException apie=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    for (    TaskResourceRep taskResourceRep : response.getTaskList()) {      taskResourceRep.setState(Operation.Status.error.name());      taskResourceRep.setMessage(apie.getMessage());      @SuppressWarnings("unchecked") Class<? extends DataObject> clazz=URIUtil.getModelClass(taskResourceRep.getResource().getId());      _dbClient.error(clazz,taskResourceRep.getResource().getId(),task,apie);    }    throw apie;  }  auditBlockConsistencyGroup(OperationTypeEnum.DELETE_CONSISTENCY_GROUP_SNAPSHOT,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,snapshot.getId().toString(),snapshot.getLabel());  return response;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof CallSite) {    CallSite cs=(CallSite)obj;    return method.equals(cs.method) && bcIndex == cs.bcIndex;  } else {    return false;  }}  }
class C{  private int delete(char s[],int pos,int len){  if (pos < len)   System.arraycopy(s,pos + 1,s,pos,len - pos - 1);  return len - 1;}  }
class C{  public List<NamedRelatedResourceRep> listUserOrders(){  OrderList response=client.get(OrderList.class,PathConstants.ORDER2_URL);  return response.getOrders();}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public void stop(){  this.hasNext=false;}  }
class C{  @SuppressWarnings("fallthrough") String parseAttributeValueSpecification() throws IOException {  int delim=-1;switch (ch) {case '\'':case '"':    delim=ch;  ch=in.read();}while (true) {switch (ch) {case -1:  error("eof.arg","attribute value");return getString(0);case '&':parseEntityReference();break;case ' ':case '\t':case '\n':if (delim == -1) {return getString(0);}addString(' ');ch=in.read();break;case '\'':case '"':if (delim == ch) {ch=in.read();return getString(0);}default :addString(ch & 0xFF);ch=in.read();break;}}}  }
class C{  LocoNetMessage initTransfer(int type,int handle,String name,byte[] contents){  transferType=type;  transferStart=true;  transferHandle=handle;  transferName=name;  transferContents=contents;  return getStartDataMessage(transferType,handle,contents.length);}  }
class C{  public static String replaceFirst(String target,String regex,String replacement){  return target.replaceFirst(regex,replacement);}  }
class C{  public int size(){  return listeners.size();}  }
class C{  public void render(Graphics g){  if (g == null) {    System.err.println("JUnit.render: can't render null Graphics");    return;  }  g.setColor(getDisplayColor());  int ech_x=point1.x + (int)((symbol_.getIconWidth() / 2)) - (int)((echelon_.getIconWidth() / 2));  if (!eunit.echelon.equals("")) {    g.drawImage(echelon_.getImage(),ech_x,point1.y,this);    total_height=echelon_.getIconHeight();    total_width=echelon_.getIconWidth();  }  int sym_y=point1.y + (int)(echelon_.getIconHeight());  if (!eunit.symbol.equals("")) {    g.drawImage(symbol_.getImage(),point1.x,sym_y,this);    total_height+=symbol_.getIconHeight();    if (symbol_.getIconWidth() > total_width)     total_width=symbol_.getIconWidth();  }  if (!eunit.bottom1.equals("")) {    int x=point1.x + (symbol_.getIconWidth() / 2);    int y=point1.y + symbol_.getIconHeight() + echelon_.getIconHeight();    Font font=new Font("Helvetica",java.awt.Font.PLAIN,10);    g.setFont(font);    FontMetrics fm=g.getFontMetrics();    int w=fm.stringWidth(eunit.bottom1);    int h=fm.getHeight();    total_height+=h;    if (w > total_width)     total_width=w;    x-=w / 2;    y+=h;    g.drawString(eunit.bottom1,x,y);  }}  }
class C{  @Override public boolean doesMaxRowSizeIncludeBlobs(){  debugCodeCall("doesMaxRowSizeIncludeBlobs");  return false;}  }
class C{  @SuppressLint("SimpleDateFormat") private void processTokenResponse(String responseCode,String result){  String refreshToken;  String accessToken;  int timeToExpireSecond;  IdentityProxy identityProxy=IdentityProxy.getInstance();  try {    if (Constants.REQUEST_SUCCESSFUL.equals(responseCode)) {      JSONObject response=new JSONObject(result);      refreshToken=response.getString(Constants.REFRESH_TOKEN);      accessToken=response.getString(Constants.ACCESS_TOKEN);      timeToExpireSecond=Integer.parseInt(response.getString(Constants.EXPIRE_LABEL));      token.setRefreshToken(refreshToken);      token.setAccessToken(accessToken);      SharedPreferences mainPref=IdentityProxy.getInstance().getContext().getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);      Editor editor=mainPref.edit();      editor.putString(Constants.REFRESH_TOKEN,refreshToken);      editor.putString(Constants.ACCESS_TOKEN,accessToken);      Date date=new Date();      long expiresIN=date.getTime() + (timeToExpireSecond * 1000);      Date expireDate=new Date(expiresIN);      String strDate=dateFormat.format(expireDate);      token.setDate(strDate);      editor.putString(Constants.DATE_LABEL,strDate);      editor.commit();      identityProxy.receiveNewAccessToken(responseCode,Constants.SUCCESS_RESPONSE,token);    } else     if (responseCode != null) {      if (result != null) {        JSONObject responseBody=new JSONObject(result);        String errorDescription=responseBody.getString(Constants.ERROR_DESCRIPTION_LABEL);        identityProxy.receiveNewAccessToken(responseCode,errorDescription,token);      }    }  } catch (  JSONException e) {    identityProxy.receiveNewAccessToken(responseCode,null,token);    Log.e(TAG,"Invalid JSON." + e);  }}  }
class C{  private Element findReturnedToken(Node node) throws ParserException {  NodeList assertionNodes=((Element)node).getElementsByTagNameNS(ResponseUnmarshaller.TOKEN_TYPE_SAML2,ResponseUnmarshaller.ASSERTION_ELEMENT_NAME);  if (assertionNodes.getLength() == 0) {    return null;  }  if (assertionNodes.getLength() > 1) {    log.debug(PROCESS_RSTR_ERROR + ": more than one saml:Assertion returned");    throw new ParserException(PROCESS_RSTR_ERROR);  }  return (Element)assertionNodes.item(0);}  }
class C{  void makeTree(List nodeList,ListIterator<BaseToken> nodeIterator,CleanTimeValues cleanTimeValues){  while (nodeIterator.hasNext()) {    if (Thread.currentThread().isInterrupted()) {      handleInterruption();      return;    }    BaseToken token=nodeIterator.next();    if (token instanceof EndTagToken) {      EndTagToken endTagToken=(EndTagToken)token;      String tagName=endTagToken.getName();      TagInfo tag=getTagInfo(tagName,cleanTimeValues);      if ((tag == null && properties.isOmitUnknownTags()) && !isAllowedAsForeignMarkup(tagName,cleanTimeValues) || (tag != null && tag.isDeprecated() && properties.isOmitDeprecatedTags())) {        nodeIterator.set(null);      } else       if (tag != null && !tag.allowsBody()) {        nodeIterator.set(null);      } else {        TagPos matchingPosition=getOpenTags(cleanTimeValues).findTag(tagName);        if (matchingPosition != null) {          List closed=closeSnippet(nodeList,matchingPosition,endTagToken,cleanTimeValues);          if (closed.size() > 0) {            TagNode startingTag=(TagNode)closed.get(0);            if (startingTag.hasAttribute("xmlns")) {              cleanTimeValues.namespace.pop();            }          }          nodeIterator.set(null);          for (int i=closed.size() - 1; i >= 0; i--) {            TagNode closedTag=(TagNode)closed.get(i);            if (i > 0 && tag != null && tag.isContinueAfter(closedTag.getName())) {              TagNode cloned=closedTag.makeCopy();              cloned.setAutoGenerated(true);              nodeIterator.add(cloned);              nodeIterator.previous();            }          }          if (!getChildBreaks(cleanTimeValues).isEmpty()) {            while (matchingPosition.position < getChildBreaks(cleanTimeValues).getLastBreakingTagPosition()) {              getChildBreaks(cleanTimeValues).pop();            }          }          while (!getChildBreaks(cleanTimeValues).isEmpty() && tagName.equals(getChildBreaks(cleanTimeValues).getLastBreakingTag()) && matchingPosition.position == getChildBreaks(cleanTimeValues).getLastBreakingTagPosition()) {            if (nodeList.get(getChildBreaks(cleanTimeValues).closedByChildBreak.peek().position) != null) {              int position=getChildBreaks(cleanTimeValues).pop().position;              Object toReopen=nodeList.get(position);              if (toReopen instanceof TagNode) {                reopenBrokenNode(nodeIterator,(TagNode)toReopen,cleanTimeValues);              } else               if (toReopen instanceof List) {                List<TagNode> tagNodes=(List<TagNode>)toReopen;                for (                TagNode n : tagNodes) {                  if (Thread.currentThread().isInterrupted()) {                    return;                  }                  nodeIterator.add(n);                  makeTree(nodeList,nodeList.listIterator(nodeList.size() - 1),cleanTimeValues);                }                nodeList.set(position,null);              }            } else {              getChildBreaks(cleanTimeValues).pop();            }          }        }      }    } else     if (isStartToken(token)) {      TagNode startTagToken=(TagNode)token;      String tagName=startTagToken.getName();      TagInfo tag=getTagInfo(tagName,cleanTimeValues);      TagPos lastTagPos=getOpenTags(cleanTimeValues).isEmpty() ? null : getOpenTags(cleanTimeValues).getLastTagPos();      TagInfo lastTagInfo=lastTagPos == null ? null : getTagInfo(lastTagPos.name,cleanTimeValues);      cleanTimeValues.allTags.add(tagName);      if (startTagToken.hasAttribute("xmlns")) {        String ns=startTagToken.getAttributeByName("xmlns");        if (ns.equals("https://www.w3.org/1999/xhtml") || ns.equals("http://w3.org/1999/xhtml")) {          ns="http://www.w3.org/1999/xhtml";          Map<String,String> attributes=startTagToken.getAttributes();          attributes.put("xmlns","http://www.w3.org/1999/xhtml");          startTagToken.setAttributes(attributes);        }        if ("html".equals(tagName) && ns.equals("http://www.w3.org/TR/REC-html40")) {          startTagToken.removeAttribute("xmlns");        } else {          if (ns.trim().isEmpty()) {            startTagToken.removeAttribute("xmlns");          } else {            cleanTimeValues.namespace.push(ns);            startTagToken.addNamespaceDeclaration("",ns);          }        }      }      if (isAllowedAsForeignMarkup(tagName,cleanTimeValues)) {        startTagToken.setForeignMarkup(true);      } else {        startTagToken.setForeignMarkup(false);      }      if ("html".equals(tagName)) {        addAttributesToTag(cleanTimeValues.htmlNode,startTagToken.getAttributes());        nodeIterator.set(null);      } else       if ("body".equals(tagName)) {        cleanTimeValues._bodyOpened=true;        addAttributesToTag(cleanTimeValues.bodyNode,startTagToken.getAttributes());        nodeIterator.set(null);      } else       if ("head".equals(tagName)) {        cleanTimeValues._headOpened=true;        addAttributesToTag(cleanTimeValues.headNode,startTagToken.getAttributes());        nodeIterator.set(null);      } else       if (tag == null && properties.isOmitUnknownTags() && !isAllowedAsForeignMarkup(tagName,cleanTimeValues)) {        nodeIterator.set(null);        properties.fireUglyHtml(true,startTagToken,ErrorType.Unknown);      } else       if (tag != null && tag.isDeprecated() && properties.isOmitDeprecatedTags()) {        nodeIterator.set(null);        properties.fireUglyHtml(true,startTagToken,ErrorType.Deprecated);      } else       if (tag == null && lastTagInfo != null && !lastTagInfo.allowsAnything()) {        closeSnippet(nodeList,lastTagPos,startTagToken,cleanTimeValues);        nodeIterator.previous();      } else       if (tag != null && tag.hasPermittedTags() && getOpenTags(cleanTimeValues).someAlreadyOpen(tag.getPermittedTags())) {        nodeIterator.set(null);      } else       if (tag != null && tag.isUnique() && getOpenTags(cleanTimeValues).tagEncountered(tagName)) {        nodeIterator.set(null);        properties.fireHtmlError(true,startTagToken,ErrorType.UniqueTagDuplicated);      } else       if (!isFatalTagSatisfied(tag,cleanTimeValues)) {        nodeIterator.set(null);        properties.fireHtmlError(true,startTagToken,ErrorType.FatalTagMissing);      } else       if (mustAddRequiredParent(tag,cleanTimeValues)) {        String requiredParent=tag.getRequiredParentTags().iterator().next();        TagNode requiredParentStartToken=newTagNode(requiredParent);        if (isAllowedInLastOpenTag(requiredParentStartToken,cleanTimeValues)) {          requiredParentStartToken.setAutoGenerated(true);          nodeIterator.previous();          nodeIterator.add(requiredParentStartToken);          nodeIterator.previous();          properties.fireHtmlError(true,startTagToken,ErrorType.RequiredParentMissing);        } else {          saveToLastOpenTag(nodeList,token,cleanTimeValues);          nodeIterator.set(null);        }      } else       if (tag != null && lastTagPos != null && tag.isMustCloseTag(lastTagInfo)) {        getChildBreaks(cleanTimeValues).addBreak(lastTagPos,new TagPos(nodeIterator.previousIndex(),tag.getName()));        boolean certainty=startTagToken.hasAttribute("id") ? false : true;        properties.fireHtmlError(certainty,(TagNode)nodeList.get(lastTagPos.position),ErrorType.UnpermittedChild);        List closed=closeSnippet(nodeList,lastTagPos,startTagToken,cleanTimeValues);        int closedCount=closed.size();        if (tag.hasCopyTags() && closedCount > 0) {          ListIterator closedIt=closed.listIterator(closedCount);          List toBeCopied=new ArrayList();          while (closedIt.hasPrevious()) {            if (Thread.currentThread().isInterrupted()) {              return;            }            TagNode currStartToken=(TagNode)closedIt.previous();            if (tag.isCopy(currStartToken.getName())) {              toBeCopied.add(0,currStartToken);            } else {              break;            }          }          if (toBeCopied.size() > 0) {            Iterator copyIt=toBeCopied.iterator();            while (copyIt.hasNext()) {              if (Thread.currentThread().isInterrupted()) {                return;              }              TagNode currStartToken=(TagNode)copyIt.next();              if (!isCopiedTokenEqualToNextThreeCopiedTokens(currStartToken,nodeIterator)) {                nodeIterator.add(currStartToken.makeCopy());              } else {                copyIt.remove();              }            }            for (int i=0; i < toBeCopied.size(); i++) {              nodeIterator.previous();            }          }        }        nodeIterator.previous();      } else       if (!isAllowedInLastOpenTag(token,cleanTimeValues)) {        saveToLastOpenTag(nodeList,token,cleanTimeValues);        nodeIterator.set(null);      } else       if (tag != null && !tag.allowsBody()) {        TagNode newTagNode=createTagNode(startTagToken);        addPossibleHeadCandidate(tag,newTagNode,cleanTimeValues);        nodeIterator.set(newTagNode);      } else {        getOpenTags(cleanTimeValues).addTag(tagName,nodeIterator.previousIndex());      }    } else {      if (cleanTimeValues._headOpened && !cleanTimeValues._bodyOpened && properties.isKeepWhitespaceAndCommentsInHead()) {        if (token instanceof CommentNode) {          if (getOpenTags(cleanTimeValues).getLastTagPos() == null) {            cleanTimeValues._headTags.add(new ProxyTagNode((CommentNode)token,cleanTimeValues.bodyNode));          }        } else         if (token instanceof ContentNode) {          ContentNode contentNode=(ContentNode)token;          if (contentNode.isBlank()) {            BaseToken lastTok=(BaseToken)nodeList.get(nodeList.size() - 1);            if (lastTok == token) {              cleanTimeValues._headTags.add(new ProxyTagNode(contentNode,cleanTimeValues.bodyNode));            }          }        }      }      if (!isAllowedInLastOpenTag(token,cleanTimeValues)) {        saveToLastOpenTag(nodeList,token,cleanTimeValues);        nodeIterator.set(null);      }    }  }}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  protected void reloadSwipeStateInView(View frontView,int position){  if (!opened.get(position)) {    ViewCompat.setTranslationX(frontView,0.0f);  } else {    if (openedRight.get(position)) {      ViewCompat.setTranslationX(frontView,swipeListView.getWidth());    } else {      ViewCompat.setTranslationX(frontView,-swipeListView.getWidth());    }  }}  }
class C{  void doImage(HttpServletRequest request,HttpServletResponse response,File file) throws IOException {  BufferedImage image;  try {    image=ImageIO.read(file);  } catch (  IOException ex) {    response.sendError(HttpServletResponse.SC_NOT_FOUND);    return;  }  String fname=file.getName();  int height=image.getHeight();  int width=image.getWidth();  int pWidth=width;  int pHeight=height;  if (request.getParameter("maxWidth") != null) {    pWidth=Integer.parseInt(request.getParameter("maxWidth"));    if (pWidth < width) {      width=pWidth;    }    log.debug("{} @maxWidth: width: {}, pWidth: {}, height: {}, pHeight: {}",fname,width,pWidth,height,pHeight);  }  if (request.getParameter("minWidth") != null) {    pWidth=Integer.parseInt(request.getParameter("minWidth"));    if (pWidth > width) {      width=pWidth;    }    log.debug("{} @minWidth: width: {}, pWidth: {}, height: {}, pHeight: {}",fname,width,pWidth,height,pHeight);  }  if (request.getParameter("width") != null) {    width=Integer.parseInt(request.getParameter("width"));  }  if (width != image.getWidth()) {    height=(int)(height * (1.0 * width / image.getWidth()));    pHeight=height;    log.debug("{} @adjusting height: width: {}, pWidth: {}, height: {}, pHeight: {}",fname,width,pWidth,height,pHeight);  }  if (request.getParameter("maxHeight") != null) {    pHeight=Integer.parseInt(request.getParameter("maxHeight"));    if (pHeight < height) {      height=pHeight;    }    log.debug("{} @maxHeight: width: {}, pWidth: {}, height: {}, pHeight: {}",fname,width,pWidth,height,pHeight);  }  if (request.getParameter("minHeight") != null) {    pHeight=Integer.parseInt(request.getParameter("minHeight"));    if (pHeight > height) {      height=pHeight;    }    log.debug("{} @minHeight: width: {}, pWidth: {}, height: {}, pHeight: {}",fname,width,pWidth,height,pHeight);  }  if (request.getParameter("height") != null) {    height=Integer.parseInt(request.getParameter("height"));    log.debug("{} @height: width: {}, pWidth: {}, height: {}, pHeight: {}",fname,width,pWidth,height,pHeight);  }  if (height != image.getHeight() && width == image.getWidth()) {    width=(int)(width * (1.0 * height / image.getHeight()));    log.debug("{} @adjusting width: width: {}, pWidth: {}, height: {}, pHeight: {}",fname,width,pWidth,height,pHeight);  }  log.debug("{} @responding: width: {}, pWidth: {}, height: {}, pHeight: {}",fname,width,pWidth,height,pHeight);  ByteArrayOutputStream baos=new ByteArrayOutputStream();  if (height != image.getHeight() || width != image.getWidth()) {    BufferedImage resizedImage=new BufferedImage(width,height,image.getType());    Graphics2D g=resizedImage.createGraphics();    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);    g.drawImage(image,0,0,width,height,0,0,image.getWidth(),image.getHeight(),null);    g.dispose();    ImageIO.write(resizedImage,"png",baos);  } else {    ImageIO.write(image,"png",baos);  }  baos.close();  response.setContentType(IMAGE_PNG);  response.setStatus(HttpServletResponse.SC_OK);  response.setContentLength(baos.size());  response.getOutputStream().write(baos.toByteArray());  response.getOutputStream().close();}  }
class C{  public List<ItemSet> learn(){  return model.learn();}  }
class C{  private void actualEnterAnnotations(List<JCAnnotation> annotations,Env<AttrContext> env,Symbol s){  Map<TypeSymbol,ListBuffer<Attribute.Compound>> annotated=new LinkedHashMap<TypeSymbol,ListBuffer<Attribute.Compound>>();  Map<Attribute.Compound,DiagnosticPosition> pos=new HashMap<Attribute.Compound,DiagnosticPosition>();  for (List<JCAnnotation> al=annotations; !al.isEmpty(); al=al.tail) {    JCAnnotation a=al.head;    Attribute.Compound c=annotate.enterAnnotation(a,syms.annotationType,env);    if (c == null) {      continue;    }    if (annotated.containsKey(a.type.tsym)) {      if (!allowRepeatedAnnos) {        log.error(a.pos(),"repeatable.annotations.not.supported.in.source");        allowRepeatedAnnos=true;      }      ListBuffer<Attribute.Compound> l=annotated.get(a.type.tsym);      l=l.append(c);      annotated.put(a.type.tsym,l);      pos.put(c,a.pos());    } else {      annotated.put(a.type.tsym,ListBuffer.of(c));      pos.put(c,a.pos());    }    if (!c.type.isErroneous() && s.owner.kind != MTH && types.isSameType(c.type,syms.deprecatedType)) {      s.flags_field|=Flags.DEPRECATED;    }  }  s.setDeclarationAttributesWithCompletion(annotate.new AnnotateRepeatedContext<Attribute.Compound>(env,annotated,pos,log,false));}  }
class C{  public void toEPLCreateTablePart(StringWriter writer){  String delimiter="";  writer.write('(');  for (  SchemaColumnDesc col : columns) {    writer.append(delimiter);    col.toEPL(writer);    delimiter=", ";  }  writer.write(')');}  }
class C{  public DefaultTokenBuilder(String value){  this.value=value;}  }
class C{  public boolean isBeingManaged(final RaptorWindowItem item){  boolean result=false;synchronized (itemsManaged) {    for (    RaptorTabItem currentTabItem : itemsManaged) {      if (currentTabItem.raptorItem == item) {        result=true;        break;      }    }  }  return result;}  }
class C{  private static String generateFileListParam(final Path deploymentFile) throws Exception {  final StringBuilder sb=new StringBuilder();  try (final ZipInputStream zipin=new ZipInputStream(Files.newInputStream(deploymentFile))){    ZipEntry ze;    while ((ze=zipin.getNextEntry()) != null) {      if (ze.isDirectory())       continue;      if (sb.length() > 0)       sb.append("\r\n    ");      sb.append("<fileList path=\"").append(ze.getName()).append("\" sha256=\"");      sb.append(calculateDigest(zipin,(int)ze.getSize()));      sb.append("\" v=\"1\"/>");    }  }   return sb.toString();}  }
class C{  protected final void insertBefore(Node nde){  if (this == nde)   return;  if (getPrev() != null)   unlink();  if (nde == null) {    setNext(this);    setPrev(this);  } else {    setNext(nde);    setPrev(nde.getPrev());    nde.setPrev(this);    if (getPrev() != null)     getPrev().setNext(this);  }}  }
class C{  private void markDirty(){  if (!dirty) {    dirty=true;    managedForm.dirtyStateChanged();  }}  }
class C{  public boolean isExplicit(){  return explicit;}  }
class C{  public void run(Integer... codes){  if (codes.length > 0) {    warn(component,codes);  }  for (  ICalVersion version : versions) {    int count=0;    List<WarningsGroup> groups=component.validate(components,version);    for (    WarningsGroup group : groups) {      List<Warning> warnings=group.getWarnings();      ICalComponent comp=group.getComponent();      if (comp != null) {        Integer[] expectedCodes=componentWarnings.get(comp);        if (expectedCodes == null) {          failed(groups);        }        boolean passed=checkCodes(warnings,expectedCodes);        if (!passed) {          failed(groups);        }        count++;        continue;      }      ICalProperty prop=group.getProperty();      if (prop != null) {        Integer[] expectedCodes=propertyWarnings.get(prop);        if (expectedCodes == null) {          failed(groups);        }        boolean passed=checkCodes(warnings,expectedCodes);        if (!passed) {          failed(groups);        }        count++;        continue;      }    }    if (count != componentWarnings.size() + propertyWarnings.size()) {      failed(groups);    }  }}  }
class C{  public Register(final String name){  this.name=name;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GENERIC_DATA_DB'";  db.execSQL(sql);}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.upload_files_btn_cancel) {    setResult(RESULT_CANCELED);    finish();  } else   if (v.getId() == R.id.upload_files_btn_upload) {    new CheckAvailableSpaceTask().execute();  }}  }
class C{  public static void reverse(final char[] buffer,final int start,final int len){  if (len < 2)   return;  int end=(start + len) - 1;  char frontHigh=buffer[start];  char endLow=buffer[end];  boolean allowFrontSur=true, allowEndSur=true;  final int mid=start + (len >> 1);  for (int i=start; i < mid; ++i, --end) {    final char frontLow=buffer[i + 1];    final char endHigh=buffer[end - 1];    final boolean surAtFront=allowFrontSur && Character.isSurrogatePair(frontHigh,frontLow);    if (surAtFront && (len < 3)) {      return;    }    final boolean surAtEnd=allowEndSur && Character.isSurrogatePair(endHigh,endLow);    allowFrontSur=allowEndSur=true;    if (surAtFront == surAtEnd) {      if (surAtFront) {        buffer[end]=frontLow;        buffer[--end]=frontHigh;        buffer[i]=endHigh;        buffer[++i]=endLow;        frontHigh=buffer[i + 1];        endLow=buffer[end - 1];      } else {        buffer[end]=frontHigh;        buffer[i]=endLow;        frontHigh=frontLow;        endLow=endHigh;      }    } else {      if (surAtFront) {        buffer[end]=frontLow;        buffer[i]=endLow;        endLow=endHigh;        allowFrontSur=false;      } else {        buffer[end]=frontHigh;        buffer[i]=endHigh;        frontHigh=frontLow;        allowEndSur=false;      }    }  }  if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {    buffer[end]=allowFrontSur ? endLow : frontHigh;  }}  }
class C{  @Override protected Statement classBlock(RunNotifier notifier){  return childrenInvoker(notifier);}  }
class C{  public void addRecipePanel(@NotNull RecipeWidget recipe){  if (recipePanels.get(recipe) != null) {    return;  }  RecipeEditorPanel editorPanel=entityFactory.createRecipeEditorPanel(recipe.getDescriptor());  recipePanels.put(recipe,editorPanel);  RecipeEditorView editorView=((RecipeEditorView)editorPanel.getView());  RecipeDescriptor recipeDescriptor=recipe.getDescriptor();  editorView.setScriptUrl(recipeDescriptor.getLink("get recipe script").getHref());  editorView.setTags(recipeDescriptor.getTags());  editorView.setName(recipeDescriptor.getName());}  }
class C{  public boolean isVisible(){  if (source instanceof Component) {    return ((Component)source).isVisible();  } else {    return false;  }}  }
class C{  public void assertNoException(Runnable expression){  TestUtils.assertNoException(expression);}  }
class C{  protected void clear(int k){  for (int i=b(); --i >= 0; )   this.buffers[i]=new DoubleBuffer(k);  this.nextTriggerCalculationState=true;}  }
class C{  private int read(int width) throws JSONException {  try {    int value=this.bitreader.read(width);    if (probe) {      log(value,width);    }    return value;  } catch (  Throwable e) {    throw new JSONException(e);  }}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  public static LocalizedResource create(DataService dm,long objKey,LocalizedObjectTypes objectType,String value,String locale) throws NonUniqueBusinessKeyException {  LocalizedResource res=new LocalizedResource();  res.setLocale(locale);  res.setObjectKey(objKey);  res.setObjectType(objectType);  res.setValue(value);  if (dm.find(res) == null) {    dm.persist(res);  }  return res;}  }
class C{  private Id<Link> findVehicleLink(Person p){  for (  PlanElement planElement : p.getSelectedPlan().getPlanElements()) {    if (planElement instanceof Activity) {      Activity activity=(Activity)planElement;      ActivityFacilities facilities=this.qsim.getScenario().getActivityFacilities();      Config config=this.qsim.getScenario().getConfig();      final Id<Link> activityLinkId=PopulationUtils.computeLinkIdFromActivity(activity,facilities,config);      if (activityLinkId != null) {        return activityLinkId;      }    } else     if (planElement instanceof Leg) {      Leg leg=(Leg)planElement;      if (leg.getRoute().getStartLinkId() != null) {        return leg.getRoute().getStartLinkId();      }    }  }  throw new RuntimeException("Don't know where to put a vehicle for this agent.");}  }
class C{  private static Script scriptFromInputStream(InputStream inputStream,ScriptType scriptType){  String scriptString=getScriptStringFromInputStream(inputStream);  return scriptFromString(scriptString,scriptType);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.SOFTWARE_PATTERN___IS_A1:    getIsA_1().clear();  return;case UmplePackage.SOFTWARE_PATTERN___SINGLETON_1:getSingleton_1().clear();return;case UmplePackage.SOFTWARE_PATTERN___IMMUTABLE_1:getImmutable_1().clear();return;case UmplePackage.SOFTWARE_PATTERN___KEY_DEFINITION_1:getKeyDefinition_1().clear();return;case UmplePackage.SOFTWARE_PATTERN___CODE_INJECTION_1:getCodeInjection_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void release(LogConnection connection){  connectionManager.release(connection);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_REGION;}  }
class C{  public BlockView(Element elem,int axis){  super(elem,axis);}  }
class C{  protected void stacktrace(Throwable e,boolean always){  if (debug || always) {    println(">>> stacktrace:");    if (output instanceof PrintStream) {      e.printStackTrace((PrintStream)output);    } else {      e.printStackTrace((PrintWriter)output);    }  }}  }
class C{  public PropertyLoadException(String message){  super(message);}  }
class C{  public List<LocalTime> bottom(int n){  List<LocalTime> bottom=new ArrayList<>();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(PackedLocalTime.asLocalTime(values[i]));  }  return bottom;}  }
class C{  protected boolean isWhiteSpace(char ch){  return ((ch == ' ') || (ch == '\n') || (ch == '\t')|| (ch == 10)|| (ch == 13));}  }
class C{  protected void installListeners(){  pcl=createPropertyChangeListener();  desktop.addPropertyChangeListener(pcl);}  }
class C{  public static void toWriter(Node node,Writer writer,Map<String,String> outputProperties) throws TransformerException {  try {    Transformer transformer=TransformerFactory.newInstance().newTransformer();    for (    Map.Entry<String,String> property : outputProperties.entrySet()) {      try {        transformer.setOutputProperty(property.getKey(),property.getValue());      } catch (      IllegalArgumentException e) {      }    }    DOMSource source=new DOMSource(node);    StreamResult result=new StreamResult(writer);    transformer.transform(source,result);  } catch (  TransformerConfigurationException e) {  }catch (  TransformerFactoryConfigurationError e) {  }}  }
class C{  private void startPreview(){  try {    camera.setPreviewDisplay(surfaceHolder);    camera.startPreview();    previewing=true;  } catch (  Exception e) {    Toast.makeText(this,R.string.connect_vedio_device_fail,Toast.LENGTH_SHORT).show();    shutdownCamera();    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.266 -0400",hash_original_method="786CA87D0A59CA2245AACFD4BA15681F",hash_generated_method="786CA87D0A59CA2245AACFD4BA15681F") Node<K,V> findFirst(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    if (n.value != null)     return n;    n.helpDelete(b,n.next);  }}  }
class C{  private void style(View view,int value){  view.setScaleX(value);  view.setScaleY(value);  view.setAlpha(value);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public void matchWithExistingMovies(){  List<Movie> moviesFromMovieList=MovieList.getInstance().getMovies();  for (  MovieInSet mis : movies) {    if (mis.tmdbId > 0) {      for (      Movie movie : moviesFromMovieList) {        if (movie.getTmdbId() == mis.tmdbId) {          mis.setMovie(movie);          break;        }      }    }    if (mis.movie == null) {      if (StringUtils.isEmpty(mis.imdbId)) {        if (scraper.getMediaProvider() != null) {          MediaScrapeOptions options=new MediaScrapeOptions(MediaType.MOVIE);          options.setTmdbId(mis.tmdbId);          options.setLanguage(LocaleUtils.toLocale(MovieModuleManager.MOVIE_SETTINGS.getScraperLanguage().name()));          options.setCountry(MovieModuleManager.MOVIE_SETTINGS.getCertificationCountry());          options.setFanartSize(MovieModuleManager.MOVIE_SETTINGS.getImageFanartSize());          options.setPosterSize(MovieModuleManager.MOVIE_SETTINGS.getImagePosterSize());          try {            MediaMetadata md=((IMovieSetMetadataProvider)scraper.getMediaProvider()).getMetadata(options);            mis.imdbId=String.valueOf(md.getId(MediaMetadata.IMDB));          } catch (          Exception e) {            LOGGER.warn(e.getMessage());          }        }      }      if (StringUtils.isNotEmpty(mis.imdbId)) {        for (        Movie movie : moviesFromMovieList) {          if (mis.imdbId.equals(movie.getImdbId())) {            mis.setMovie(movie);            break;          }        }      }    }  }}  }
class C{  public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr){  if (null == byteBufferArr || byteBufferArr.length == 0) {    return null;  }  int noOfCol=byteBufferArr.length;  short offsetLen=(short)(noOfCol * 2);  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);  buffer.putShort(offsetLen);  for (int index=0; index < byteBufferArr.length - 1; index++) {    ByteBuffer individualCol=byteBufferArr[index];    int noOfBytes=individualCol.capacity();    buffer.putShort((short)(offsetLen + noOfBytes));    offsetLen+=noOfBytes;    individualCol.rewind();  }  for (int index=0; index < byteBufferArr.length; index++) {    ByteBuffer individualCol=byteBufferArr[index];    buffer.put(individualCol.array());  }  buffer.rewind();  return buffer.array();}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  if (publicId != null) {    publicId=publicId.toUpperCase(Locale.ENGLISH);  }  if (systemId != null) {    systemId=systemId.toUpperCase(Locale.ENGLISH);  }  InputSource source=null;  try {    String path=doctypeMap.get(publicId);    source=getInputSource(path);    if (source == null) {      path=doctypeMap.get(systemId);      source=getInputSource(path);    }  } catch (  Exception e) {    throw new SAXException(e.toString());  }  return source;}  }
class C{  @Override protected void keyTyped(char par1,int par2){  commandBox.textboxKeyTyped(par1,par2);}  }
class C{  protected void parseCommand(final String... args){  for (  String arg : args) {    final Command command=Command.valueOfName(arg);    if (command != null) {      setCommand(command);      break;    }  }}  }
class C{  public void clearBookmarkedConferences(){  bookmarkedConferences.clear();}  }
class C{  public boolean authenticate(final OddCallback<AuthToken> callback){synchronized (syncLock) {    if (isExpired()) {      return false;    }    if (!authenticating) {      authenticating=true;      timer=new Timer();      TimerTask task=getPollTask(callback);      timer.schedule(task,new Date(),interval);      TimerTask expiredTask=getExpiredTask(callback);      timer.schedule(expiredTask,expirationDate);    }    return true;  }}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(hashAlg);  sb.append(' ');  sb.append(flags);  sb.append(' ');  sb.append(iterations);  sb.append(' ');  if (salt == null)   sb.append('-'); else   sb.append(base16.toString(salt));  return sb.toString();}  }
class C{  public static Class asSubclass(Class<?> c,Class<?> superclass){  if (!superclass.isAssignableFrom(c)) {    throw new ClassCastException(superclass.getName());  }  return c;}  }
class C{  @NotNull public static <T>List<T> evaluateIterable(@NotNull final PyExpression expression,@NotNull final Class<T> aClass){  final PyAnyExpressionEvaluator evaluator=new PyAnyExpressionEvaluator(true);  final Object evaluate=evaluator.evaluate(expression);  final T resultSingle=PyUtil.as(evaluate,aClass);  if (resultSingle != null) {    return Collections.singletonList(resultSingle);  }  return PyUtil.asList(PyUtil.as(evaluate,List.class),aClass);}  }
class C{  public void calculateConditionals(){  String cName="";  Conditional c=null;  for (int i=0; i < _conditionalSystemNames.size(); i++) {    cName=_conditionalSystemNames.get(i);    c=InstanceManager.getDefault(jmri.ConditionalManager.class).getBySystemName(cName);    if (c == null) {      log.error("Invalid conditional system name when calculating Logix - " + cName);    } else {      c.calculate(mEnabled,null);    }  }}  }
class C{  public void characterize(){  entity=tb.getGame().getEntity(entity.getId());  current=new MoveOption(tb.getGame(),this);  bv=entity.calculateBattleValue();  runMP=entity.getRunMP();  if (entity instanceof Mech) {    if (((Mech)entity).hasMASC()) {      if (((Mech)entity).getMASCTarget() <= (5 + Compute.randomInt(6))) {        masc_threat=false;      } else {        masc_threat=true;        runMP=entity.getRunMPwithoutMASC();      }    } else {      if (((Mech)entity).hasTSM()) {        tsm_offset=true;      }    }  }  jumpMP=entity.getJumpMP();  overall_armor_percent=entity.getArmorRemainingPercent();  base_psr_odds=Compute.oddsAbove(entity.getBasePilotingRoll().getValue(),entity.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING)) / 100;  int heat_capacity=entity.getHeatCapacity();  int heat=entity.heat;  if (entity instanceof Mech) {    if (entity.isStealthActive() || entity.isNullSigActive() || entity.isVoidSigActive()) {      heat+=10;    }    if (entity.isChameleonShieldActive()) {      heat+=6;    }    heat+=entity.getEngineCritHeat();    if (entity.getPosition() != null) {      if (tb.getGame().getBoard().getHex(entity.getPosition()) != null) {        if (tb.getGame().getBoard().getHex(entity.getPosition()).containsTerrain(Terrains.FIRE) && (tb.getGame().getBoard().getHex(entity.getPosition()).getFireTurn() > 0)) {          heat+=5;        }      }    }    heat+=tb.getGame().getPlanetaryConditions().getTemperatureDifference(50,-30);  }  ArrayList<Mounted> ammo_list=entity.getAmmo();  double overall_damage[][]=new double[6][MAX_RANGE];  double cur_weapon_damage[]=new double[MAX_RANGE];  ArrayList<Integer> cur_weapon_arcs=new ArrayList<Integer>();  int overall_heat[][]=new int[6][MAX_RANGE];  int cur_weapon_heat, weapons_count=0;  int cur_weapon_arc;  int number_of_shooters=1;  boolean ammo_ranges[]={false,false,false};  int gunnery=entity.getCrew().getGunnery();  if (entity.getTaserFeedBackRounds() > 0) {    gunnery+=1;  }  if (!(entity instanceof Infantry) || (entity instanceof BattleArmor)) {    if (entity instanceof BattleArmor) {      number_of_shooters=((BattleArmor)entity).getShootingStrength();    }    if (entity instanceof Mech) {      cur_weapon_damage[1]=(tsm_offset ? 1.0 : 0.5) * (entity.getWeight() / 10) * (Compute.oddsAbove(entity.getCrew().getPiloting(),entity.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING)) / 100);      overall_damage[Compute.ARC_FORWARD][1]=2.0 * cur_weapon_damage[1];      if (!((Mech)entity).canFlipArms()) {        overall_damage[Compute.ARC_LEFTARM][1]=cur_weapon_damage[1];        overall_damage[Compute.ARC_RIGHTARM][1]=cur_weapon_damage[1];      }    }    if (entity instanceof BattleArmor) {      overall_damage[Compute.ARC_360][0]=(hits_by_racksize[number_of_shooters] * ((BattleArmor)entity).getVibroClaws() * Compute.oddsAbove(gunnery,entity.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_GUNNERY))) / 100.0;    }    for (    Mounted cur_weapon : entity.getWeaponList()) {      WeaponType weapon=(WeaponType)cur_weapon.getType();      int cur_weapon_id=entity.getEquipmentNum(cur_weapon);      if (!cur_weapon.canFire() || cur_weapon.isJammed() || ((cur_weapon.getLinked() == null) && (weapon.getAmmoType() != AmmoType.T_NA))) {        continue;      }      if ((weapon.getInternalName() == Infantry.SWARM_MEK) || (weapon.getInternalName() == Infantry.LEG_ATTACK) || (weapon.getInternalName() == Infantry.SWARM_MEK)|| (weapon.getInternalName() == Infantry.STOP_SWARM)) {        continue;      }      cur_weapon_arc=entity.getWeaponArc(cur_weapon_id);      cur_weapon_arcs=getWeaponArcs(cur_weapon_arc,entity.isSecondaryArcWeapon(cur_weapon_id));      cur_weapon_heat=cur_weapon.getCurrentHeat();      ammo_ranges=getAmmoRanges(weapon,ammo_list);      cur_weapon_damage=getRawDamage(cur_weapon,ammo_ranges);      boolean aptGunnery=entity.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING);      cur_weapon_damage=getExpectedDamage(weapon,gunnery,cur_weapon_damage,ammo_ranges,aptGunnery);      if (entity instanceof Mech) {        int overheat=(cur_weapon_heat + heat) - (heat_capacity + (tsm_offset ? 9 : 4));        if (overheat > 0) {          for (int i=0; i < cur_weapon_damage.length; i++) {            if (cur_weapon_damage[i] < overheat) {              cur_weapon_damage[i]=0.0;            }          }        }      }      if (!(entity instanceof BattleArmor)) {        cur_weapon_damage[0]=0.0;      }      if (cur_weapon_arcs.contains(Compute.ARC_FORWARD)) {        weapons_count++;      }      int weapon_min_range=weapon.getMinimumRange();      for (int i=0; i < cur_weapon_damage.length; i++) {        if (cur_weapon_damage[i] == 0.0) {          continue;        }        if (number_of_shooters > 1) {          cur_weapon_damage[i]*=hits_by_racksize[number_of_shooters];        }        for (        int firing_arc : cur_weapon_arcs) {          if (firing_arc > LAST_ARC) {            continue;          }          overall_damage[firing_arc][i]+=cur_weapon_damage[i];          if ((entity instanceof Mech) && (overall_damage[firing_arc][i] > 0)) {            overall_heat[firing_arc][i]+=cur_weapon_heat;          }          if ((firing_arc == Compute.ARC_FORWARD) && (i <= weapon_min_range) && (i < minRangeMods.length)) {            minRangeMods[i]+=(1 + weapon_min_range) - i;          }        }      }    }  } else {    number_of_shooters=((Infantry)entity).getShootingStrength();    cur_weapon_damage=getExpectedDamage((Infantry)entity,gunnery);    for (int i=0; i < cur_weapon_damage.length; i++) {      overall_damage[Compute.ARC_360][i]+=cur_weapon_damage[i];      overall_damage[Compute.ARC_360][i]*=hits_by_racksize[number_of_shooters];    }    for (    Mounted cur_weapon : entity.getWeaponList()) {      WeaponType weapon=(WeaponType)cur_weapon.getType();      if (cur_weapon.getLocation() != Infantry.LOC_FIELD_GUNS) {        continue;      }      if (!cur_weapon.canFire() || cur_weapon.isJammed() || ((cur_weapon.getLinked() == null) && (weapon.getAmmoType() != AmmoType.T_NA))) {        continue;      }      boolean aptGunnery=entity.getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING);      cur_weapon_damage=CEntity.getRawDamage(cur_weapon,null);      cur_weapon_damage=CEntity.getExpectedDamage(weapon,gunnery,cur_weapon_damage,ammo_ranges,aptGunnery);      for (int i=0; i < cur_weapon_damage.length; i++) {        if (cur_weapon_damage[i] == 0) {          continue;        }        overall_damage[Compute.ARC_360][i]+=cur_weapon_damage[i];      }    }    for (int cur_arc=FIRST_ARC + 1; cur_arc <= LAST_ARC; cur_arc++) {      overall_damage[cur_arc]=overall_damage[Compute.ARC_360];    }  }  for (int cur_arc=FIRST_ARC; cur_arc <= LAST_ARC; cur_arc++) {    for (int cur_range=0; cur_range < MAX_RANGE; cur_range++) {      if (overall_damage[cur_arc][cur_range] == 0.0) {        continue;      }      if ((entity instanceof Mech) && ((overall_heat[cur_arc][cur_range] + heat) > (heat_capacity + (tsm_offset ? 9 : 4)))) {        overall_damage[cur_arc][cur_range]*=(heat_capacity + (tsm_offset ? 9 : 4));        overall_damage[cur_arc][cur_range]/=(overall_heat[cur_arc][cur_range] + heat);      }      damages[cur_arc][cur_range]=overall_damage[cur_arc][cur_range];    }  }  for (int cur_range=1; cur_range < minRangeMods.length; cur_range++) {    if (weapons_count > 0) {      minRangeMods[cur_range]=(int)Math.round(((double)minRangeMods[cur_range]) / (double)weapons_count);    }  }  computeRange(Compute.ARC_FORWARD,overall_heat);  heat=(heat + heat_at_range) - heat_capacity;  if (heat <= 4) {    overheat=OVERHEAT_NONE;  }  if (heat > 4) {    overheat=OVERHEAT_LOW;  }  if ((heat > 9) & !tsm_offset) {    overheat=OVERHEAT_HIGH;  }  if ((heat > 12) & tsm_offset) {    overheat=OVERHEAT_HIGH;  }  double max=1.0;  double armor[][]=MECH_ARMOR;  if (entity instanceof Tank) {    if (((Tank)entity).hasNoTurret()) {      armor=TANK_ARMOR;    } else {      armor=TANK_WT_ARMOR;    }  }  if (entity instanceof Infantry) {    if (!(entity instanceof BattleArmor)) {      armor=INFANTRY_ARMOR;    } else {      if (entity.isClan()) {        armor=CLBA_ARMOR;      } else {        armor=ISBA_ARMOR;      }    }  }  if (entity instanceof Protomech) {    if (((Protomech)entity).hasMainGun()) {      armor=PROTOMECH_MG_ARMOR;    } else {      armor=PROTOMECH_ARMOR;    }  }  if (entity instanceof GunEmplacement) {    armor=((GunEmplacement)entity).isTurret() ? GUN_EMPLACEMENT_TURRET_ARMOR : GUN_EMPLACEMENT_ARMOR;  }  for (int arc=FIRST_ARC; arc <= LAST_PRIMARY_ARC; arc++) {    armor_health[arc]=0.0;    for (int i=0; i < armor[arc].length; i++) {      armor_health[arc]+=armor[arc][i] * getArmorValue(i,arc == ToHitData.SIDE_REAR);    }    if (entity instanceof Protomech) {      armor_health[arc]*=1.22;    }    max=Math.max(armor_health[arc],max);    armor_percent[arc]=armor_health[arc] / max;  }  avg_armor=(armor_health[0] + armor_health[1] + armor_health[2]+ armor_health[3]) / 4;  avg_iarmor=entity.getTotalInternal() / 7.0;  if (entity instanceof Infantry) {    avg_iarmor=entity instanceof BattleArmor ? ((BattleArmor)entity).getShootingStrength() : 1.0;  }  if (entity instanceof Tank) {    avg_iarmor=entity.getTotalInternal() / (((Tank)entity).hasNoTurret() ? 4.0 : 5.0);  }  if (entity instanceof Protomech) {    avg_iarmor=entity.getTotalInternal() / (((Protomech)entity).hasMainGun() ? 5.0 : 6.0);  }  if (entity instanceof GunEmplacement) {    avg_iarmor=1.0;  }}  }
class C{  protected void attribute(String tag,String attributeName,String value){}  }
class C{  @Override public void connectionStateChanged(State state){  log.info("Repository info connection state changed to {}",state);  if (state.equals(State.CONNECTED)) {    log.info("Curator (re)connected. Waking up the upgrade manager...");    wakeup();  }}  }
class C{  public static void clearExceptionInThreads(DistributionManager dm){  dm.clearExceptionInThreads();}  }
class C{  public InitiateMultipartUploadResult initiateMultipartUpload(InitiateMultipartUploadRequest initiateMultipartUploadRequest) throws OSSException, ClientException {  assertParameterNotNull(initiateMultipartUploadRequest,"initiateMultipartUploadRequest");  String key=initiateMultipartUploadRequest.getKey();  String bucketName=initiateMultipartUploadRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  assertParameterNotNull(key,"key");  ensureObjectKeyValid(key);  Map<String,String> headers=new HashMap<String,String>();  if (initiateMultipartUploadRequest.getObjectMetadata() != null) {    populateRequestMetadata(headers,initiateMultipartUploadRequest.getObjectMetadata());  }  removeHeader(headers,OSSHeaders.CONTENT_LENGTH);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_UPLOADS,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.POST).setBucket(bucketName).setKey(key).setHeaders(headers).setParameters(params).setInputStream(new ByteArrayInputStream(new byte[0])).setInputSize(0).setOriginalRequest(initiateMultipartUploadRequest).build();  return doOperation(request,initiateMultipartUploadResponseParser,bucketName,key,true);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  Show s=getShow(stack);  if (s == null)   return null;  String imgUrl=s.getAnyImageUrl(0,thumb);  return (imgUrl == null) ? null : imgUrl;}  }
class C{  public static <T extends Collection<?>>void notEmpty(String argumentName,T argumentObject){  notNull(argumentName,argumentObject);  if (argumentObject.size() == 0) {    throw new IllegalArgumentException(argumentName + " cannot be empty");  }}  }
class C{  private void handleVariablesButtonSelected(Text textField){  String variable=getVariable();  if (variable != null) {    textField.insert(variable);  }}  }
class C{  protected static List<Integer> sortGroupNodes(final List<Integer> groupNodeIndices,final BiMap<Integer,INaviGroupNode> groupNodeMap){  final List<Integer> sortedList=new ArrayList<Integer>();  final List<Integer> clonedList=new ArrayList<Integer>(groupNodeIndices);  final Set<INaviGroupNode> addedNodes=new HashSet<INaviGroupNode>();  while (!clonedList.isEmpty()) {    for (    final Integer id : clonedList) {      final INaviGroupNode node=groupNodeMap.get(id);      if ((node.getParentGroup() == null) || addedNodes.contains(node.getParentGroup())) {        addedNodes.add(node);        sortedList.add(id);        clonedList.remove(id);        break;      }    }  }  return sortedList;}  }
class C{  AttributeWeights useWeightingMethod(ExampleSet methodTrainingSet) throws OperatorException {  innerWeightingSetSource.deliver(methodTrainingSet);  getSubprocess(0).execute();  return innerAttributeWeightsSink.getData(AttributeWeights.class);}  }
class C{  public void start(@NonNull Activity activity,int requestCode){  activity.startActivityForResult(getIntent(activity),requestCode);}  }
class C{  protected boolean validateTransition(Operation patch,ExampleTaskServiceState currentTask,ExampleTaskServiceState patchBody){  super.validateTransition(patch,currentTask,patchBody);  if (patchBody.taskInfo.stage == TaskStage.STARTED && patchBody.subStage == null) {    patch.fail(new IllegalArgumentException("Missing substage"));    return false;  }  if (currentTask.taskInfo != null && currentTask.taskInfo.stage != null) {    if (currentTask.taskInfo.stage == TaskStage.STARTED && patchBody.taskInfo.stage == TaskStage.STARTED) {      if (currentTask.subStage.ordinal() > patchBody.subStage.ordinal()) {        patch.fail(new IllegalArgumentException("Task substage cannot move backwards"));        return false;      }    }  }  return true;}  }
class C{  public void close(){  parser.close();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("CfgLdapConfig[");  buffer.append("m_engine = ").append(m_engine);  buffer.append(", m_server = ").append(m_server);  buffer.append(", m_port = ").append(m_port);  buffer.append(", m_user = ").append(m_user);  buffer.append(", m_pwd = ").append(m_pwd);  buffer.append(", m_root = ").append(m_root);  buffer.append(", m_useOSAuth = ").append(m_useOSAuth);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocumentType01.class,args);}  }
class C{  @Override public String resourceText(){  return baseResource.resourceText().replaceAll("\r\n","\n");}  }
class C{  @DSComment("Dynamically loading library") @DSSpec(DSCat.JAVA_SECURITY) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.689 -0500",hash_original_method="0A3470DEBF4C375636532E38AAF3C5D7",hash_generated_method="88D9169C5FC0C884DFF6AA876D761784") public static void loadLibrary(String libName){}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public TransformerConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  public T caseS_Display(S_Display object){  return null;}  }
class C{  public static Map<String,Property> propertyMapFromEntity(Entity entity){  final Map<String,Property> propertyMap=new HashMap<>((int)(entity.getProperties().size() * 1.33F));  for (  Property property : entity.getProperties()) {    propertyMap.put(property.getPropertyName(),property);  }  return propertyMap;}  }
class C{  protected final void FPR2GPR_64(Instruction s){  int offset=-burs.ir.stackManager.allocateSpaceForConversion();  StackLocationOperand sl=new StackLocationOperand(true,offset,QW);  StackLocationOperand sl1=new StackLocationOperand(true,offset + 4,DW);  StackLocationOperand sl2=new StackLocationOperand(true,offset,DW);  EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,sl,Unary.getClearVal(s))));  RegisterOperand i1=Unary.getClearResult(s);  RegisterOperand i2=new RegisterOperand(regpool.getSecondReg(i1.getRegister()),TypeReference.Int);  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,i1,sl1)));  EMIT(MIR_Move.mutate(s,IA32_MOV,i2,sl2));}  }
class C{  public Key(Type type,Annotation[] anns){  Objects.requireNonNull(type);  _type=type;  _anns=anns;  if (anns == null || anns.length == 0) {    _annTypes=DEFAULT_ANN_TYPES;    return;  }  ArrayList<Class<? extends Annotation>> annTypeList=new ArrayList<>();  for (  Annotation ann : anns) {    if (isQualifier(ann.annotationType())) {      annTypeList.add(ann.annotationType());    }  }  if (annTypeList.size() == 0) {    _annTypes=DEFAULT_ANN_TYPES;    return;  }  Class<? extends Annotation>[] annTypes=new Class[annTypeList.size()];  annTypeList.toArray(annTypes);  _annTypes=annTypes;}  }
class C{  public byte[] encode(byte[] array){  return new String(encodeHex(array)).getBytes();}  }
class C{  private void deleteResourcesInLocalSystem(EnumerationDeletionContext aws){switch (aws.subStage) {case GET_LOCAL_RESOURCES:    getLocalResources(aws,AWSEnumerationDeletionSubStage.GET_REMOTE_RESOURCES);  break;case GET_REMOTE_RESOURCES:getRemoteInstances(aws,AWSEnumerationDeletionSubStage.COMPARE);break;case COMPARE:compareResources(aws,AWSEnumerationDeletionSubStage.PROCESS_COMPUTE_STATES);break;case PROCESS_COMPUTE_STATES:if (aws.nextPageLink == null) {aws.subStage=AWSEnumerationDeletionSubStage.ENUMERATION_STOP;} else {aws.subStage=AWSEnumerationDeletionSubStage.GET_NEXT_PAGE;}if (aws.instancesToBeDeleted == null || aws.instancesToBeDeleted.size() == 0) {logInfo("There are no compute states to be processed in the system");deleteResourcesInLocalSystem(aws);return;} else {if (aws.computeEnumerationRequest.preserveMissing) {retireComputeStates(aws);} else {deleteComputeStates(aws);}}break;case GET_NEXT_PAGE:getNextPageFromLocalSystem(aws,AWSEnumerationDeletionSubStage.GET_REMOTE_RESOURCES);break;case ENUMERATION_STOP:logInfo("Stopping enumeration");stopEnumeration(aws);break;default :Throwable t=new Exception("Unknown AWS enumeration deletion sub stage");signalErrorToEnumerationAdapter(aws,t);}}  }
class C{  private void flushLocations(TrackData data){  if (data.numBufferedLocations <= 0) {    return;  }  myTracksProviderUtils.bulkInsertTrackPoint(data.bufferedLocations,data.numBufferedLocations,data.track.getId());  data.numBufferedLocations=0;  if (data.track.getStartId() == -1L) {    data.track.setStartId(myTracksProviderUtils.getFirstTrackPointId(data.track.getId()));  }  data.track.setStopId(myTracksProviderUtils.getLastTrackPointId(data.track.getId()));}  }
class C{  public void alignByte(){  if (this.bitsInBuffer > 0 && this.bitsInBuffer < 8) {    this.byteCounter++;    this.bitsInBuffer=0;  }}  }
class C{  public static String encode(String encode){  StringBuilder str=new StringBuilder(encode);  String key;  int i=0;  while (i < str.length()) {    key=findValue(str.charAt(i));    if (key != null) {      str.replace(i,i + 1,key);      i+=key.length();    } else {      i++;    }  }  return str.toString();}  }
class C{  public static Vectorizer load(File f) throws IOException {  return load(f,false);}  }
class C{  private ResourceUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  @Transient public boolean isThereOpenTradePosition(){  for (  TradeOrder tradeOrder : this.getTradeOrders()) {    if (tradeOrder.getIsFilled() && tradeOrder.getTradePosition().equals(tradeOrder.getTradePosition().getContract().getTradePosition())) {      return true;    }  }  return false;}  }
class C{  public void clearNetMapListeners(){  listeners.clear();}  }
class C{  @Override public void run(){  Looper.prepare();synchronized (mReadyFence) {    mHandler=new EncoderHandler(this);    mReady=true;    mReadyFence.notify();  }  Looper.loop();  Log.d(TAG,"Encoder thread exiting");synchronized (mReadyFence) {    mReady=mRunning=false;    mHandler=null;  }}  }
class C{  private Iterable<int[]> splitArray(int[] arr){  int len1=arr.length / 2;  int len2=len1 + arr.length % 2;  int[] a1=new int[len1];  int[] a2=new int[len2];  System.arraycopy(arr,0,a1,0,len1);  System.arraycopy(arr,len1,a2,0,len2);  return Arrays.asList(a1,a2);}  }
class C{  public TextTable(final int rows,final int cols){  init(rows,cols);  for (int i=0; i < rows; i++) {    rowData.add(createNewRow(""));  }}  }
class C{  public void onMapInitialised(){  start();}  }
class C{  @Override public ImmutableListMultimap<K,V> build(){  return (ImmutableListMultimap<K,V>)super.build();}  }
class C{  public void testGetColumnPrivilegesUsingInfoSchema() throws Exception {  String dontRunPropertyName="com.mysql.jdbc.testsuite.cantGrant";  if (!runTestIfSysPropDefined(dontRunPropertyName)) {    if (versionMeetsMinimum(5,0,7)) {      Properties props=new Properties();      props.put("useInformationSchema","true");      Connection conn1=null;      Statement stmt1=null;      String userHostQuoted=null;      boolean grantFailed=true;      try {        conn1=getConnectionWithProps(props);        stmt1=conn1.createStatement();        createTable("t1","(c1 int)");        this.rs=stmt1.executeQuery("SELECT USER()");        this.rs.next();        String user=this.rs.getString(1);        List<String> userHost=StringUtils.split(user,"@",false);        if (userHost.size() < 2) {          fail("This test requires a JDBC URL with a user, and won't work with the anonymous user. " + "You can skip this test by setting the system property " + dontRunPropertyName);        }        userHostQuoted="'" + userHost.get(0) + "'@'"+ userHost.get(1)+ "'";        try {          stmt1.executeUpdate("GRANT update (c1) on t1 to " + userHostQuoted);          grantFailed=false;        } catch (        SQLException sqlEx) {          fail("This testcase needs to be run with a URL that allows the user to issue GRANTs " + " in the current database. You can skip this test by setting the system property \"" + dontRunPropertyName + "\".");        }        if (!grantFailed) {          DatabaseMetaData metaData=conn1.getMetaData();          this.rs=metaData.getColumnPrivileges(null,null,"t1",null);          this.rs.next();          assertEquals("t1",this.rs.getString("TABLE_NAME"));          assertEquals("c1",this.rs.getString("COLUMN_NAME"));          assertEquals(userHostQuoted,this.rs.getString("GRANTEE"));          assertEquals("UPDATE",this.rs.getString("PRIVILEGE"));        }      }  finally {        if (stmt1 != null) {          if (!grantFailed) {            stmt1.executeUpdate("REVOKE UPDATE (c1) ON t1 FROM " + userHostQuoted);          }          stmt1.close();        }        if (conn1 != null) {          conn1.close();        }      }    }  }}  }
class C{  private String addValue(){  StringBuilder sb=new StringBuilder();  HashSet<String> terms=new HashSet<>();  int num=TestUtil.nextInt(random(),0,255);  for (int i=0; i < num; i++) {    sb.append(' ');    char term=(char)TestUtil.nextInt(random(),'a','z');    sb.append(term);    terms.add("" + term);  }  expected.add(terms.size());  return sb.toString();}  }
class C{  protected String doIt() throws Exception {  MRecurring rec=new MRecurring(getCtx(),getRecord_ID(),get_TrxName());  log.info(rec.toString());  return rec.executeRun();}  }
class C{  public static <K,V>MapContext<K,V> createMapContext(MapContext<K,V> source){  MapContext<K,V> newValue=MapContext.getMapContext();  newValue.stackList.addAll(source.stackList);  return newValue;}  }
class C{  private boolean srdfOpRequresReadOnlyChange(String op){  return Arrays.asList(srdfSetReadOnlyOps).contains(op);}  }
class C{  protected void readConnector(final EntitySetupDescriptor desc,final Element element){  final List<Element> connectors=XMLUtil.getElements(element,"connector");  if (connectors.isEmpty()) {    return;  }  Element connector=connectors.get(0);  if (connector.hasAttribute("name")) {    desc.setConnectorName(connector.getAttribute("name"));  }  final List<Element> list=XMLUtil.getElements(connector,"port");  for (  final Element port : list) {    if (port.hasAttribute("name") && port.hasAttribute("expression")) {      desc.addPort(port.getAttribute("name"),port.getAttribute("expression"));    } else {      LOGGER.error("<port> without name or expression");    }  }}  }
class C{  public SymmetricSchurDecomposition schur(){  return new SymmetricSchurDecomposition(this);}  }
class C{  private void runRoutesDistance(String runDir,String runNr){  String configFile=runDir + runNr + "/output_config.xml";  int lastIteration=LoadMyScenarios.getLastIteration(configFile);  String networkFile=runDir + runNr + "/output_network.xml.gz";  String eventsFile=runDir + runNr + "/ITERS/it."+ lastIteration+ "/"+ lastIteration+ ".events.xml.gz";  Scenario sc=LoadMyScenarios.loadScenarioFromNetwork(networkFile);  LegModeRouteDistanceDistributionAnalyzer lmdfed=new LegModeRouteDistanceDistributionAnalyzer(null);  lmdfed.init(sc,eventsFile);  lmdfed.preProcessData();  lmdfed.postProcessData();  new File(runDir + "/analysis/legModeDistributions/").mkdirs();  lmdfed.writeResults(runDir + "/analysis/legModeDistributions/" + runNr+ ".");}  }
class C{  private Object parseValue(GridField field,Object in){  if (in == null)   return null;  int dt=field.getDisplayType();  try {    if (dt == DisplayType.Integer || (DisplayType.isID(dt) && field.getColumnName().endsWith("_ID"))) {      if (in instanceof Integer)       return in;      int i=Integer.parseInt(in.toString());      return new Integer(i);    } else     if (DisplayType.isNumeric(dt)) {      if (in instanceof BigDecimal)       return in;      return DisplayType.getNumberFormat(dt).parse(in.toString());    } else     if (DisplayType.isDate(dt)) {      if (in instanceof Timestamp)       return in;      long time=0;      try {        time=DisplayType.getDateFormat_JDBC().parse(in.toString()).getTime();        return new Timestamp(time);      } catch (      Exception e) {        log.log(Level.SEVERE,in + "(" + in.getClass()+ ")"+ e);        time=DisplayType.getDateFormat(dt).parse(in.toString()).getTime();      }      return new Timestamp(time);    } else     if (in instanceof Boolean)     return ((Boolean)in).booleanValue() ? "Y" : "N";  } catch (  Exception ex) {    log.log(Level.SEVERE,"Object=" + in,ex);    String error=ex.getLocalizedMessage();    if (error == null || error.length() == 0)     error=ex.toString();    StringBuffer errMsg=new StringBuffer();    errMsg.append(field.getColumnName()).append(" = ").append(in).append(" - ").append(error);    FDialog.error(0,this,"ValidationError",errMsg.toString());    return null;  }  return in;}  }
class C{  protected Dimension calculatePreferredSize(){  int width=(int)getPreferredSize().getWidth();  int height=0;  int items=model.getSize();  for (int i=0; i < items; i++) {    Object value=model.get(i);    JComponent component=renderer.getTickerRendererComponent(this,value);    Dimension cell=component.getPreferredSize();    height=Math.max(height,(int)cell.getHeight());  }  Insets insets=getInsets();  return new Dimension((width + insets.left + insets.right),(height + insets.top + insets.bottom));}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROPERTY_SETTER_DECLARATION;}  }
class C{  @Nullable private static <T>T bean(ListableBeanFactory ctx,Class<T> beanCls){  Map.Entry<String,T> entry=F.firstEntry(ctx.getBeansOfType(beanCls));  return entry == null ? null : entry.getValue();}  }
class C{  public void put(final String url,final Object requestBody,final Object... urlVariables){  getRestTemplate().put(url,requestBody,urlVariables);}  }
class C{  public String toString(){  return "WSessionCtx#" + counter;}  }
class C{  public Builder showActionBarBackButton(boolean showBackButton){  this.showActionBarBackButton=showBackButton;  return this;}  }
class C{  public final boolean cancelOperation(final int id,final boolean mayInterrupt){  return mChronosListener.cancel(id,mayInterrupt);}  }
class C{  public long ipToLong(byte[] address){  if (address.length != 4) {    throw new IllegalArgumentException("byte array must be of length 4");  }  long ipNum=0;  long multiplier=1;  for (int i=3; i >= 0; i--) {    int byteVal=(address[i] + 256) % 256;    ipNum+=byteVal * multiplier;    multiplier*=256;  }  return ipNum;}  }
class C{  protected void checkEhloHelo(SMTPSession session,String argument){  if (isBadHelo(session,argument)) {    session.setAttachment(BAD_EHLO_HELO,"true",State.Transaction);  }}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public static boolean dispatchManaExact(ItemStack stack,EntityPlayer player,int manaToSend,boolean add){  if (stack == null)   return false;  IInventory mainInv=player.inventory;  IInventory baublesInv=BotaniaAPI.internalHandler.getBaublesInventory(player);  int invSize=mainInv.getSizeInventory();  int size=invSize;  if (baublesInv != null)   size+=baublesInv.getSizeInventory();  for (int i=0; i < size; i++) {    boolean useBaubles=i >= invSize;    IInventory inv=useBaubles ? baublesInv : mainInv;    int slot=i - (useBaubles ? invSize : 0);    ItemStack stackInSlot=inv.getStackInSlot(slot);    if (stackInSlot == stack)     continue;    if (stackInSlot != null && stackInSlot.getItem() instanceof IManaItem) {      IManaItem manaItemSlot=(IManaItem)stackInSlot.getItem();      if (manaItemSlot.getMana(stackInSlot) + manaToSend <= manaItemSlot.getMaxMana(stackInSlot) && manaItemSlot.canReceiveManaFromItem(stackInSlot,stack)) {        if (stack.getItem() instanceof IManaItem && !((IManaItem)stack.getItem()).canExportManaToItem(stack,stackInSlot))         continue;        if (add)         manaItemSlot.addMana(stackInSlot,manaToSend);        if (useBaubles)         BotaniaAPI.internalHandler.sendBaubleUpdatePacket(player,slot);        return true;      }    }  }  return false;}  }
class C{  private void createInferredParameter(Tree.FunctionArgument anon,Declaration declaration,Tree.Parameter ap,Parameter parameter,Type type){  if (isTypeUnknown(type)) {    type=unit.getUnknownType();    if (!dynamic) {      ap.addError("could not infer parameter type: '" + parameter.getName() + "' would have unknown type");    }  } else   if (involvesTypeParams(declaration,type)) {    ap.addError("could not infer parameter type: '" + parameter.getName() + "' would have type '"+ type.asString(unit)+ "' involving type parameters");    type=unit.getUnknownType();  }  Value model=new Value();  model.setUnit(unit);  model.setType(type);  model.setName(parameter.getName());  model.setInferred(true);  parameter.setModel(model);  model.setInitializerParameter(parameter);  Function m=anon.getDeclarationModel();  model.setContainer(m);  model.setScope(m);  m.addMember(model);}  }
class C{  public synchronized boolean isPresent(String profileName){  return super.isPresentImpl(profileName);}  }
class C{  public static void putDoubleLE(long addr,double val){  long longVal=Double.doubleToLongBits(val);  if (UNALIGNED)   UNSAFE.putLong(addr,Long.reverseBytes(longVal)); else   putLongByByte(addr,longVal,false);}  }
class C{  public ObjectFactory(){}  }
class C{  public void testColdDeployWar(){  this.fileHandler.createFile("ram:///test.war");  WAR war=(WAR)factory.createDeployable("jonas4x","ram:///test.war",DeployableType.WAR);  war.setContext("testContext");  setupAdminColdDeployment();  deployer.deploy(war);  assertFalse(fileHandler.exists(deployer.getDeployableDir(war) + "/autoload/test.war"));  assertTrue(fileHandler.exists(deployer.getDeployableDir(war) + "/autoload/testContext.war"));}  }
class C{  @Override public void handleEvent(final LinkLeaveEvent event){  if (this.linkCountMap.containsKey(event.getLinkId())) {    int i=this.linkCountMap.get(event.getLinkId()).intValue();    i++;    this.linkCountMap.put(event.getLinkId(),Integer.valueOf(i));  }}  }
class C{  private <T>String generateJsonEncoding(T t) throws InternalException {  try {    return mapper.writeValueAsString(t);  } catch (  JsonProcessingException e) {    throw new InternalException("Failure to generate JSON.",e);  }}  }
class C{  public int capacity(){  return this.buffer.length;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  static double svd_random2(long[] iy){  throw null;}  }
class C{  @Override protected int computeVerticalScrollRange(){  final int count=getChildCount();  final int contentHeight=getHeight() - getPaddingBottom() - getPaddingTop();  if (count == 0) {    return contentHeight;  }  return getChildAt(0).getBottom();}  }
class C{  public boolean verifySignature(SignedObject so,int sender){  try {    return so.verify(controller.getStaticConf().getRSAPublicKey(sender),engine);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public void write(@NotNull V value,XmlWriter writer){  writer.addAttribute(UIFormXmlConstants.ATTRIBUTE_VALUE,value.toString());}  }
class C{  public DragSortController buildController(DragSortListView dslv){  DragSortController controller=new DragSortController(dslv);  controller.setDragHandleId(R.id.ivDragHandle);  controller.setRemoveEnabled(true);  controller.setSortEnabled(true);  controller.setDragInitMode(DragSortController.ON_DOWN);  controller.setRemoveMode(DragSortController.FLING_REMOVE);  return controller;}  }
class C{  private ConditionsType createConditions() throws DatatypeConfigurationException {  ConditionsType conditions=_assertionFactory.createConditionsType();  GregorianCalendar gc=new GregorianCalendar();  gc.setTime(_spec.getStartTime());  XMLGregorianCalendar xmlDate=DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);  conditions.setNotBefore(xmlDate.normalize());  gc.setTime(_spec.getExpirationTime());  xmlDate=DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);  conditions.setNotOnOrAfter(xmlDate.normalize());  return conditions;}  }
class C{  protected byte reportReturn(String methodCall,byte value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  @Override public void initialize(final IPlayerBridge iPlayerBridge,final PlayerID playerID){  playerBridge=iPlayerBridge;  this.playerID=playerID;}  }
class C{  public Iterator<Counter> iterateGroup(String grpName){  Collection<Counter> grpCounters=new ArrayList<>();  for (  HadoopLongCounter counter : cntrs.values()) {    if (grpName.equals(counter.group()))     grpCounters.add(new HadoopV2Counter(counter));  }  return grpCounters.iterator();}  }
class C{  protected void deleteExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=null;  AreasForm areasForm=(AreasForm)form;  if ((errors=validateFormParaEliminarArea(areasForm)) == null) {    GestionDescripcionBI descripcionService=getGestionDescripcionBI(request);    String idAreasABorrar[]=areasForm.getAreasABorrar();    if (!isAreaEnUso(request,idAreasABorrar))     descripcionService.deleteAreas(idAreasABorrar);  } else {    ErrorsTag.saveErrors(request,errors);  }  goLastClientExecuteLogic(mapping,form,request,response);}  }
class C{  public boolean isLot(){  Object oo=get_Value(COLUMNNAME_IsLot);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public UploadObject(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.190 -0500",hash_original_method="03238E01E6CC0C4AD4BEE1E476C6E17D",hash_generated_method="C5EA26D411549E035FF02BE748611EEB") public static boolean isProxyClass(Class<?> cl){  if (cl == null) {    throw new NullPointerException();  }synchronized (proxyCache) {    return proxyCache.containsKey(cl);  }}  }
class C{  public Bundler putString(String key,String value){  bundle.putString(key,value);  return this;}  }
class C{  protected double unwrapValue(Object value){  return ((Double)value).doubleValue();}  }
class C{  private String create(){  char[] text=new char[count + 1];  if (count > 0) {    text[0]='\n';    for (int i=1; i <= count; i++) {      text[i]=' ';    }    return new String(text);  }  return "\n";}  }
class C{  public void disconnect(){  mHelper.disconnect();}  }
class C{  public void addRtcpListener(RtcpEventListener listener){  listeners.addElement(listener);}  }
class C{  public void reportThatAOSIsInReplayMode(){  if (Controller.options.LOGGING_LEVEL >= 1) {    printlnToLogWithTimePrefix("AOS: In replay mode; controller thread only runs for OSR inlining.\n");  }}  }
class C{  protected boolean mustUpdateTiles(DrawContext dc){  if (this.isMinimized())   return false;  if (dc.getTextureCache().getTexture(this.textureCacheKey) == null)   return true;  if (tiles.isEmpty())   return true;  long contentUpdateTime=this.contents.getUpdateTime();  for (  ContentTile tile : this.tiles) {    if (this.mustUpdateTile(tile,contentUpdateTime))     return true;  }  return false;}  }
class C{  private boolean isSopSetting(VOConfigurationSetting setting){  if (setting.getInformationId().getKeyName().startsWith(SOP_STARTING_PREFIX)) {    return true;  }  return false;}  }
class C{  protected MoveOption.Table calculateMoveOptions(MoveOption base,Client client){  ArrayList<MoveOption> possible=new ArrayList<MoveOption>();  MoveOption.Table discovered=new MoveOption.Table();  if (entity.getJumpMPWithTerrain() > 0) {    possible.add((base.clone()).addStep(MoveStepType.START_JUMP));  }  possible.add(base);  discovered.put(base);  while (possible.size() > 0) {    MoveOption min=possible.remove(0);    Iterator<MovePath> adjacent=min.getNextMoves(true,true).iterator();    while (adjacent.hasNext()) {      MoveOption next=(MoveOption)adjacent.next();      if ((entity instanceof Mech) && (((Mech)entity).countBadLegs() >= 1) && (((Mech)entity).isLocationBad(Mech.LOC_LARM) && ((Mech)entity).isLocationBad(Mech.LOC_RARM))) {        MoveOption eject=next.clone();        eject.addStep(MoveStepType.EJECT);        discovered.put(eject.clone());      }      if (next.changeToPhysical() && next.isMoveLegal()) {        discovered.put(next);      } else       if (next.isMoveLegal()) {        if ((discovered.get(next) == null) || (next.getDistUtility() < discovered.get(next).getDistUtility())) {          discovered.put(next);          if (next.isJumping()) {            MoveOption left=next.clone();            MoveOption right=next.clone();            for (int turn=0; turn < 2; turn++) {              left.addStep(MoveStepType.TURN_LEFT);              right.addStep(MoveStepType.TURN_RIGHT);              discovered.put((left.clone()));              discovered.put((right.clone()));            }            right.addStep(MoveStepType.TURN_RIGHT);            discovered.put(right);          }          int index=Collections.<MoveOption>binarySearch(possible,next,MoveOption.DISTANCE_COMPARATOR);          if (index < 0) {            index=-index - 1;          }          possible.add(index,next);        }      }    }  }  for (Iterator<MoveOption> i=discovered.values().iterator(); i.hasNext(); ) {    MoveOption next=i.next();    next.clipToPossible();    if (!next.isMoveLegal()) {      i.remove();    }    if (entity.heat > 4) {      next.movement_threat+=(bv / 1000) * next.getMovementheatBuildup();      if (entity.heat > 7) {        next.movement_threat+=(bv / 500) * next.getMovementheatBuildup();      }      if (tsm_offset) {        if (entity.heat == 9) {          next.movement_threat-=(bv / 100) * next.getMovementheatBuildup();        }        if ((entity.heat < 12) && (entity.heat > 9)) {          next.movement_threat-=(bv / 500) * next.getMovementheatBuildup();        }      }      if (entity.heat > 12) {        next.movement_threat+=(bv / 100) * next.getMovementheatBuildup();      }    }    String pilotChecks=SharedUtility.doPSRCheck(next);    if (pilotChecks.length() > 0) {      next.inDanger=true;    }  }  return discovered;}  }
class C{  public static void disableApiHooks(){  ApiProxy.getCurrentEnvironment().getAttributes().put(GaeStudioConstants.DISABLE_API_HOOKS,true);}  }
class C{  public static boolean isEnabled(final Context context,final @IntegerRes int flagResId){  return isEnabled(context.getResources(),flagResId);}  }
class C{  @Field(20) public Pointer<Double> pdblVal(){  return this.io.getPointerField(this,20);}  }
class C{  public String addStepsForPromoteMirrors(Workflow workflow,String waitFor,List<URI> mirrorList,List<URI> promotees) throws ControllerException {  boolean isCG=isCGMirror(mirrorList.get(0),_dbClient);  List<Volume> promotedVolumes=_dbClient.queryObject(Volume.class,promotees);  if (!isCG) {    List<BlockMirror> mirrors=_dbClient.queryObject(BlockMirror.class,mirrorList);    for (    BlockMirror mirror : mirrors) {      URI controller=mirror.getStorageController();      String stepId=addStepsForDetachMirror(workflow,waitFor,PROMOTE_MIRROR_STEP_GROUP,mirrorList,isCG);      URI promotedVolumeForMirror=findPromotedVolumeForMirror(mirror.getId(),promotedVolumes);      stepId=workflow.createStep(PROMOTE_MIRROR_STEP_GROUP,String.format("Promote mirror: %s",mirror.getId()),stepId,controller,getDeviceType(controller),this.getClass(),promoteMirrorMethod(asList(mirror.getId()),asList(promotedVolumeForMirror),isCG),null,null);    }  } else {    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,mirrorList.get(0));    URI controller=mirror.getStorageController();    String stepId=addStepsForDetachMirror(workflow,waitFor,PROMOTE_MIRROR_STEP_GROUP,mirrorList,isCG);    List<URI> promotedVolumesForMirrors=findPromotedVolumesForMirrors(mirrorList,promotedVolumes);    stepId=workflow.createStep(PROMOTE_MIRROR_STEP_GROUP,String.format("Promote mirrors: %s",Joiner.on("\t").join(mirrorList)),stepId,controller,getDeviceType(controller),this.getClass(),promoteMirrorMethod(mirrorList,promotedVolumesForMirrors,isCG),null,null);  }  return PROMOTE_MIRROR_STEP_GROUP;}  }
class C{  @Override protected int examineExample(int i2) throws Exception {  int iSet=m_iSet[i2];  double F2=m_error[i2];  if (!m_I0.contains(i2)) {    F2=-SVMOutput(i2) - m_b + m_target[i2];    m_error[i2]=F2;    if (iSet == I1) {      if (F2 + m_epsilon < m_bUp) {        m_bUp=F2 + m_epsilon;        m_iUp=i2;      } else       if (F2 - m_epsilon > m_bLow) {        m_bLow=F2 - m_epsilon;        m_iLow=i2;      }    } else     if ((iSet == I2) && (F2 + m_epsilon > m_bLow)) {      m_bLow=F2 + m_epsilon;      m_iLow=i2;    } else     if ((iSet == I3) && (F2 - m_epsilon < m_bUp)) {      m_bUp=F2 - m_epsilon;      m_iUp=i2;    }  }  int i1=i2;  boolean bOptimality=true;  if (iSet == I0a) {    if (m_bLow - (F2 - m_epsilon) > 2 * m_fTolerance) {      bOptimality=false;      i1=m_iLow;      if ((F2 - m_epsilon) - m_bUp > m_bLow - (F2 - m_epsilon)) {        i1=m_iUp;      }    } else     if ((F2 - m_epsilon) - m_bUp > 2 * m_fTolerance) {      bOptimality=false;      i1=m_iUp;      if (m_bLow - (F2 - m_epsilon) > (F2 - m_epsilon) - m_bUp) {        i1=m_iLow;      }    }  } else   if (iSet == I0b) {    if (m_bLow - (F2 + m_epsilon) > 2 * m_fTolerance) {      bOptimality=false;      i1=m_iLow;      if ((F2 + m_epsilon) - m_bUp > m_bLow - (F2 + m_epsilon)) {        i1=m_iUp;      }    } else     if ((F2 + m_epsilon) - m_bUp > 2 * m_fTolerance) {      bOptimality=false;      i1=m_iUp;      if (m_bLow - (F2 + m_epsilon) > (F2 + m_epsilon) - m_bUp) {        i1=m_iLow;      }    }  } else   if (iSet == I1) {    if (m_bLow - (F2 + m_epsilon) > 2 * m_fTolerance) {      bOptimality=false;      i1=m_iLow;      if ((F2 + m_epsilon) - m_bUp > m_bLow - (F2 + m_epsilon)) {        i1=m_iUp;      }    } else     if ((F2 - m_epsilon) - m_bUp > 2 * m_fTolerance) {      bOptimality=false;      i1=m_iUp;      if (m_bLow - (F2 - m_epsilon) > (F2 - m_epsilon) - m_bUp) {        i1=m_iLow;      }    }  } else   if (iSet == I2) {    if ((F2 + m_epsilon) - m_bUp > 2 * m_fTolerance) {      bOptimality=false;      i1=m_iUp;    }  } else   if (iSet == I3) {    if (m_bLow - (F2 - m_epsilon) > 2 * m_fTolerance) {      bOptimality=false;      i1=m_iLow;    }  }  if (bOptimality) {    return 0;  }  return takeStep(i1,i2,m_alpha[i2],m_alphaStar[i2],F2);}  }
class C{  private void addTokenToBucket(int bucket,TokenMapToken token){  TokenMapToken old=tokenMap[bucket];  token.nextToken=old;  tokenMap[bucket]=token;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i;  byte sbiCrop;  byte sbiDecode;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%s' in array position %d",Byte.toString(source[i]),i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public static boolean isTextMimeType(String mimeType){  if (mimeType != null) {    try {      Collection<String> validMimeTypeRegex=APITestHarness.getInstance().getTankConfig().getAgentConfig().getTextMimeTypeRegex();      for (      String regex : validMimeTypeRegex) {        if (mimeType.matches(regex)) {          return true;        }      }    } catch (    Exception e) {      LOG.warn(e.toString());    }  }  return false;}  }
class C{  public static void main(String[] args){  int distinct=0, words=0;  int minlen=Integer.parseInt(args[0]);  ST<String,Integer> st=new ST<String,Integer>();  while (!StdIn.isEmpty()) {    String key=StdIn.readString();    if (key.length() < minlen)     continue;    words++;    if (st.contains(key)) {      st.put(key,st.get(key) + 1);    } else {      st.put(key,1);      distinct++;    }  }  String max="";  st.put(max,0);  for (  String word : st.keys()) {    if (st.get(word) > st.get(max))     max=word;  }  StdOut.println(max + " " + st.get(max));  StdOut.println("distinct = " + distinct);  StdOut.println("words    = " + words);}  }
class C{  public boolean appendEntryRequest(Message message,int fromMemberId,int term,int prevLogTerm,int prevLogIndex,int commitIndex,boolean isHeartbeat,int entryTerm,byte[] buffer,int bufferOffset,int bufferLen,boolean lastCommand) throws InterruptedException, GondolaException {  notImplemented(message,fromMemberId);  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  int count;  int modeCount;  double mode;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          z=data.get(0);          mode=z;          modeCount=1;          count=1;          for (a=1; a < dataSize; a++) {            if (data.get(a) == z) {              count++;            } else {              if (count > modeCount) {                mode=z;                modeCount=count;              }              count=1;              z=data.get(a);            }          }          if (count > modeCount) {            mode=z;          }          outputFile.setValue(row,col,mode);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected int insertKey(char val){  int hash, index;  hash=HashFunctions.hash(val) & 0x7fffffff;  index=hash % _states.length;  byte state=_states[index];  consumeFreeSlot=false;  if (state == FREE) {    consumeFreeSlot=true;    insertKeyAt(index,val);    return index;  }  if (state == FULL && _set[index] == val) {    return -index - 1;  }  return insertKeyRehash(val,index,hash,state);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    SerializationHandler rth=transformer.getResultTreeHandler();    if (m_disableOutputEscaping) {      rth.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    }    rth.characters(m_ch,0,m_ch.length);    if (m_disableOutputEscaping) {      rth.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");    }  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public void notifyListener(OMGraphic graphic,OMAction action){  if (requestor != null) {    if (DEBUG) {      Debug.output("OMDrawingTool: notifying requestor, graphic with action");    }    requestor.drawingComplete(graphic,action);  }  if (canvas != null) {    canvas.repaint();  }}  }
class C{  public static void writeDeclaredStaticField(final Class<?> cls,final String fieldName,final Object value) throws IllegalAccessException {  FieldUtils.writeDeclaredStaticField(cls,fieldName,value,false);}  }
class C{  private static final String resolveBackpath(final String path){  String p=path;  if (p.isEmpty() || p.charAt(0) != '/') {    p="/" + p;  }  final Matcher qm=CommonPattern.QUESTION.matcher(p);  final int end=qm.find() ? qm.start() : p.length();  final Matcher matcher=backPathPattern.matcher(p);  while (matcher.find()) {    if (matcher.start() > end)     break;    p=matcher.replaceAll("");    matcher.reset(p);  }  while (p.startsWith("/../")) {    p=p.substring(3);  }  if (p.equals("/..")) {    p="/";  }  return p.equals("") ? "/" : p;}  }
class C{  protected void moveImportFilesToArchive(final Set<String> importedFiles){  if (!importedFiles.isEmpty()) {    final SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MMM-dd-hh-mm-ss");    final String fullPathToArchiveFolder=pathToArchiveDirectory;    File dir=new File(fullPathToArchiveFolder + File.separator + dateFormat.format(new Date())+ File.separator);    dir.mkdirs();    String tempRoot=null;    for (    String importFileName : importedFiles) {      try {        File importFile=new File(importFileName);        FileUtils.copyFileToDirectory(importFile,dir,true);        if (tempRoot == null) {          tempRoot=resolveImportDirectory(importFile.getAbsolutePath());        }        importFile.delete();      } catch (      IOException e) {        ShopCodeContext.getLog(this).error(MessageFormat.format("Cant move file {0} to folder {1}",importFileName,dir.getAbsolutePath()),e);      }    }    if (!pathToImportDirectory.equals(tempRoot)) {      new File(tempRoot).delete();    }  }}  }
class C{  public int pixelsHigh(){  return mHeight;}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  public int recordParams(String target,CtClass[] params,boolean use0,int varNo,boolean isStatic) throws CompileError {  return gen.recordParams(params,isStatic,"$","$args","$$",use0,varNo,target,stable);}  }
class C{  @Override public boolean hasFailed(){  return failed;}  }
class C{  private TripSchedule rerouteTripSchedule(TripSchedule originalSchedule){  TripSchedule schedule=originalSchedule.clone();  schedule.arrivals=new int[newPatternLength];  schedule.departures=new int[newPatternLength];  int prevOutputDeparture=0;  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {      int hopTime=originalSchedule.arrivals[ss];      if (ss > 0)       hopTime-=originalSchedule.departures[ss - 1];      schedule.arrivals[ts]=prevOutputDeparture + hopTime;      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];      prevOutputDeparture=schedule.departures[ts];      ts++;      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];        prevOutputDeparture=schedule.departures[ts];        ts++;      }      ss=insertEndIndex + 1;      if (ts == newPatternLength)       break;    }    int hopTime=originalSchedule.arrivals[ss];    if (ss > 0)     hopTime-=originalSchedule.departures[ss - 1];    schedule.arrivals[ts]=prevOutputDeparture + hopTime;    int dwellTime=originalSchedule.departures[ss] - originalSchedule.arrivals[ss];    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;    prevOutputDeparture=schedule.departures[ts];  }  int timeShift=originalSchedule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];  for (int i=0; i < newPatternLength; i++) {    schedule.arrivals[i]+=timeShift;    schedule.departures[i]+=timeShift;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Original arrivals:   {}",originalSchedule.arrivals);    LOG.debug("Original departures: {}",originalSchedule.departures);    LOG.debug("Modified arrivals:   {}",schedule.arrivals);    LOG.debug("Modified departures: {}",schedule.departures);  }  return schedule;}  }
class C{  public AutoColorCorrelogram(int numBins,int[] distanceSet,IAutoCorrelogramFeatureExtractor extractionAlgorith){  this.numBins=numBins;  this.distanceSet=distanceSet;  if (extractionAlgorith == null) {switch (DEFAULT_EXTRACTION_METHOD) {case LireAlgorithm:      this.extractionAlgorithm=new MLuxAutoCorrelogramExtraction();    break;case NaiveHuangAlgorithm:  this.extractionAlgorithm=new NaiveAutoCorrelogramExtraction();break;case DynamicProgrammingHuangAlgorithm:this.extractionAlgorithm=DynamicProgrammingAutoCorrelogramExtraction.getInstance();break;}} else this.extractionAlgorithm=extractionAlgorith;if (numBins < 17) {quantH_f=4f;quantS_f=2f;quantV_f=2f;this.numBins=16;} else if (numBins < 33) {quantH_f=8f;quantS_f=2f;quantV_f=2f;this.numBins=32;} else if (numBins < 65) {quantH_f=8f;quantS_f=4f;quantV_f=2f;this.numBins=64;} else if (numBins < 129) {quantH_f=8f;quantS_f=4f;quantV_f=4f;this.numBins=128;} else {quantH_f=16f;quantS_f=4f;quantV_f=4f;this.numBins=256;}quantH=360f / quantH_f;quantS=256f / quantS_f;quantV=256f / quantV_f;}  }
class C{  private static NumberIterator _load(int from,int to){  return _load(from,to,to);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2) private void showProgress(final boolean show){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {    editContainer.setVisibility(show ? View.GONE : View.VISIBLE);    progressBar.setVisibility(show ? View.VISIBLE : View.GONE);  } else {    progressBar.setVisibility(show ? View.VISIBLE : View.GONE);    editContainer.setVisibility(show ? View.GONE : View.VISIBLE);  }}  }
class C{  public static void processStatementScheduleSingle(EPStatementHandleCallback handle,EPServicesContext services){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qTimeCP(handle.getAgentInstanceHandle(),services.getSchedulingService().getTime());  }  StatementAgentInstanceLock statementLock=handle.getAgentInstanceHandle().getStatementAgentInstanceLock();  statementLock.acquireWriteLock();  try {    if (!handle.getAgentInstanceHandle().isDestroyed()) {      if (handle.getAgentInstanceHandle().isHasVariables()) {        services.getVariableService().setLocalVersion();      }      handle.getScheduleCallback().scheduledTrigger(services.getEngineLevelExtensionServicesContext());      handle.getAgentInstanceHandle().internalDispatch();    }  } catch (  RuntimeException ex) {    services.getExceptionHandlingService().handleException(ex,handle.getAgentInstanceHandle(),ExceptionHandlerExceptionType.PROCESS,null);  } finally {    if (handle.getAgentInstanceHandle().isHasTableAccess()) {      services.getTableService().getTableExprEvaluatorContext().releaseAcquiredLocks();    }    handle.getAgentInstanceHandle().getStatementAgentInstanceLock().releaseWriteLock();    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aTimeCP();    }  }}  }
class C{  public boolean checkHeaders(List<String> fields){  for (  String s : fields)   if (!this.headers.contains(s))   return false;  return true;}  }
class C{  public boolean isSetOrderedStructMap(){  return this.orderedStructMap != null;}  }
class C{  public int search(final byte[] a){  return search(a,0,a.length);}  }
class C{  public AbstractDelegatingSailImplConfig(String type){  super(type);}  }
class C{  public ConnectionPoolTimeoutException(final String message){  super(message);}  }
class C{  public final CC endGroupX(String s){  hor.setEndGroup(s);  return this;}  }
class C{  private boolean checkRuleMatch(ACLRule newRule){  List<Integer> allowRuleList=new ArrayList<>();  for (  ACLRule existingRule : getRules()) {    if (newRule.match(existingRule)) {      return true;    }    if (existingRule.getAction() == Action.ALLOW && newRule.getAction() == Action.DENY) {      if (existingRule.match(newRule)) {        allowRuleList.add(existingRule.getId());      }    }  }  deny2Allow.put(newRule.getId(),allowRuleList);  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  Element element;  String elementTagName;  String elementNodeName;  Node appendedChild;  doc=(Document)load("staff",true);  docFragment=doc.createDocumentFragment();  element=doc.createElementNS("http://www.w3.org/DOM/Test","emp:address");  appendedChild=docFragment.appendChild(element);  element.setPrefix("dmstc");  elementTagName=element.getTagName();  elementNodeName=element.getNodeName();  assertEquals("nodesetprefix01_tagname","dmstc:address",elementTagName);  assertEquals("nodesetprefix01_nodeName","dmstc:address",elementNodeName);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public IdeaEstimate(double competition,long searchVolume,Money averageCpc,MonthlySearchVolume[] targetedMonthlySearches){  this.competition=competition;  this.searchVolume=searchVolume;  this.averageCpc=averageCpc;  this.targetedMonthlySearches=targetedMonthlySearches == null ? ImmutableList.<MonthlySearchVolume>of() : ImmutableList.copyOf(targetedMonthlySearches);}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  @Override public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){  if (useAnchor) {    double sourceX=source.getX();    double anchorX=this.domainAxis.java2DToValue(sourceX,info.getDataArea(),RectangleEdge.BOTTOM);    this.domainAxis.resizeRange2(factor,anchorX);  } else {    this.domainAxis.resizeRange(factor);  }}  }
class C{  public FileStatusContext(IFile file,IRegion region){  Assert.isNotNull(file);  fFile=file;  fSourceRegion=region;}  }
class C{  protected PreValidationImpl(){  super();}  }
class C{  public static String toHex(long n){  char s1[]=new char[16];  char s2[]=new char[18];  int i=0;  do {    long d=n & 0xf;    s1[i++]=(char)((d < 10) ? ('0' + d) : ('a' + d - 10));  } while ((n>>>=4) > 0);  s2[0]='0';  s2[1]='x';  int j=2;  while (--i >= 0) {    s2[j++]=s1[i];  }  return new String(s2,0,j);}  }
class C{  protected boolean isMoveCompleted(){  movementOffset+=getSpeed();  if (movementOffset >= 1.0) {    movementOffset-=1.0;    return true;  } else {    return false;  }}  }
class C{  private void remove(PollController conn){  if (conn == null) {    return;  }  if (_lifecycle.isDestroyed()) {    return;  }  _activeCount.incrementAndGet();  if (_activeCount.decrementAndGet() == 0 && _lifecycle.isDestroyed()) {    destroy();  }}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public void draw(Shape shape){  defineShape(shape,true,false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String documentTypeName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  documentTypeName=docType.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("doctypeNameSVG","svg",documentTypeName);  } else {    assertEquals("documentName","staff",documentTypeName);  }}  }
class C{  public GetExecInfoParams withExecId(@NotNull String execId){  requireNonNull(execId);  this.execId=execId;  return this;}  }
class C{  public void hleKernelThreadEnterWaitState(SceKernelThreadInfo thread,int waitType,int waitId,IWaitStateChecker waitStateChecker,int timeoutAddr,boolean callbacks){  int micros=0;  boolean forever=true;  if (Memory.isAddressGood(timeoutAddr)) {    micros=Memory.getInstance().read32(timeoutAddr);    forever=false;  }  hleKernelThreadEnterWaitState(thread,waitType,waitId,waitStateChecker,micros,forever,callbacks);}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){  if (cursor != null) {    final int totalCount=cursor.getCount();    if (totalCount > 0) {      cursor.moveToFirst();      String name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));      mMessageText.setText(getResources().getString(R.string.contacts_string,totalCount,name));      Log.d(TAG,"First contact loaded: " + name);      Log.d(TAG,"Total number of contacts: " + totalCount);      Log.d(TAG,"Total number of contacts: " + totalCount);    } else {      Log.d(TAG,"List of contacts is empty.");      mMessageText.setText(R.string.contacts_empty);    }  }}  }
class C{  public Token createToken(){  Token token=tokenList[currentFreeToken];  token.text=null;  token.type=Token.NULL;  token.offset=-1;  token.setNextToken(null);  currentFreeToken++;  if (currentFreeToken == size)   augmentTokenList();  return token;}  }
class C{  public MapHandler(RowProcessor convert){  super();  this.convert=convert;}  }
class C{  public boolean canEdit(){  return true;}  }
class C{  public void await() throws InterruptedException {  done.acquire();}  }
class C{  private void reset(){  setInputElement(null);}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public final boolean h8Castle(){  return (castleMask & (1 << H8_CASTLE)) != 0;}  }
class C{  private boolean checkHostCredentials(Host host){  boolean hasCredentials=false;  if (null != host.getUsername() && null != host.getPassword()) {    hasCredentials=true;  }  return hasCredentials;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("IssueReportServlet.init");}  }
class C{  public CalendarIntervalTriggerImpl(String name,Date startTime,Date endTime,IntervalUnit intervalUnit,int repeatInterval){  this(name,null,startTime,endTime,intervalUnit,repeatInterval);}  }
class C{  public ALayout(int spaceH,int spaceV,boolean colFill){  setSpaceH(spaceH);  setSpaceV(spaceV);  m_colFill=colFill;}  }
class C{  DataPair parseCalculate(String s,ArrayList<ConditionalVariable> variableList) throws JmriException {  s=s.toUpperCase();  BitSet argsUsed=new BitSet(_variableList.size());  DataPair dp=null;  boolean leftArg=false;  boolean rightArg=false;  int oper=OPERATOR_NONE;  int k=-1;  int i=0;  if (s.charAt(i) == '(') {    dp=parseCalculate(s.substring(++i),variableList);    leftArg=dp.result;    i+=dp.indexCount;    argsUsed.or(dp.argsUsed);  } else {    if (s.charAt(i) == 'R') {      try {        k=Integer.parseInt(String.valueOf(s.substring(i + 1,i + 3)));        i+=2;      } catch (      NumberFormatException nfe) {        k=Integer.parseInt(String.valueOf(s.charAt(++i)));      }catch (      IndexOutOfBoundsException ioob) {        k=Integer.parseInt(String.valueOf(s.charAt(++i)));      }      leftArg=variableList.get(k - 1).evaluate();      if (variableList.get(k - 1).isNegated()) {        leftArg=!leftArg;      }      i++;      argsUsed.set(k - 1);    } else     if (Bundle.getMessage("LogicNOT").equals(s.substring(i,i + (Bundle.getMessage("LogicNOT").length())))) {      i+=Bundle.getMessage("LogicNOT").length();      if (s.charAt(i) == '(') {        dp=parseCalculate(s.substring(++i),variableList);        leftArg=dp.result;        i+=dp.indexCount;        argsUsed.or(dp.argsUsed);      } else       if (s.charAt(i) == 'R') {        try {          k=Integer.parseInt(String.valueOf(s.substring(i + 1,i + 3)));          i+=2;        } catch (        NumberFormatException nfe) {          k=Integer.parseInt(String.valueOf(s.charAt(++i)));        }catch (        IndexOutOfBoundsException ioob) {          k=Integer.parseInt(String.valueOf(s.charAt(++i)));        }        leftArg=variableList.get(k - 1).evaluate();        if (variableList.get(k - 1).isNegated()) {          leftArg=!leftArg;        }        i++;        argsUsed.set(k - 1);      } else {        throw new JmriException(java.text.MessageFormat.format(rbx.getString("ParseError1"),new Object[]{s.substring(i)}));      }      leftArg=!leftArg;    } else {      throw new JmriException(java.text.MessageFormat.format(rbx.getString("ParseError9"),new Object[]{s}));    }  }  while (i < s.length()) {    if (s.charAt(i) != ')') {      if (Bundle.getMessage("LogicAND").equals(s.substring(i,i + (Bundle.getMessage("LogicAND").length())))) {        i+=Bundle.getMessage("LogicAND").length();        oper=OPERATOR_AND;      } else       if (Bundle.getMessage("LogicOR").equals(s.substring(i,i + (Bundle.getMessage("LogicOR").length())))) {        i+=Bundle.getMessage("LogicOR").length();        oper=OPERATOR_OR;      } else {        throw new JmriException(java.text.MessageFormat.format(rbx.getString("ParseError2"),new Object[]{s.substring(i)}));      }      if (s.charAt(i) == '(') {        dp=parseCalculate(s.substring(++i),variableList);        rightArg=dp.result;        i+=dp.indexCount;        argsUsed.or(dp.argsUsed);      } else {        if (s.charAt(i) == 'R') {          try {            k=Integer.parseInt(String.valueOf(s.substring(i + 1,i + 3)));            i+=2;          } catch (          NumberFormatException nfe) {            k=Integer.parseInt(String.valueOf(s.charAt(++i)));          }catch (          IndexOutOfBoundsException ioob) {            k=Integer.parseInt(String.valueOf(s.charAt(++i)));          }          rightArg=variableList.get(k - 1).evaluate();          if (variableList.get(k - 1).isNegated()) {            rightArg=!rightArg;          }          i++;          argsUsed.set(k - 1);        } else         if ((i + 3) < s.length() && Bundle.getMessage("LogicNOT").equals(s.substring(i,i + (Bundle.getMessage("LogicNOT").length())))) {          i+=Bundle.getMessage("LogicNOT").length();          if (s.charAt(i) == '(') {            dp=parseCalculate(s.substring(++i),variableList);            rightArg=dp.result;            i+=dp.indexCount;            argsUsed.or(dp.argsUsed);          } else           if (s.charAt(i) == 'R') {            try {              k=Integer.parseInt(String.valueOf(s.substring(i + 1,i + 3)));              i+=2;            } catch (            NumberFormatException nfe) {              k=Integer.parseInt(String.valueOf(s.charAt(++i)));            }catch (            IndexOutOfBoundsException ioob) {              k=Integer.parseInt(String.valueOf(s.charAt(++i)));            }            rightArg=variableList.get(k - 1).evaluate();            if (variableList.get(k - 1).isNegated()) {              rightArg=!rightArg;            }            i++;            argsUsed.set(k - 1);          } else {            throw new JmriException(java.text.MessageFormat.format(rbx.getString("ParseError3"),new Object[]{s.substring(i)}));          }          rightArg=!rightArg;        } else {          throw new JmriException(java.text.MessageFormat.format(rbx.getString("ParseError9"),new Object[]{s.substring(i)}));        }      }      if (oper == OPERATOR_AND) {        leftArg=(leftArg && rightArg);      } else       if (oper == OPERATOR_OR) {        leftArg=(leftArg || rightArg);      }    } else {      i++;      break;    }  }  dp=new DataPair();  dp.result=leftArg;  dp.indexCount=i;  dp.argsUsed=argsUsed;  return dp;}  }
class C{  @Override protected void onStart(){  super.onStart();  ResponseHandler.register(mDungeonsPurchaseObserver);  initializeOwnedItems();}  }
class C{  public static final Color convertColor(float[] color){  if (color.length == 3) {    return new Color(color[0],color[1],color[2]);  } else   if (color.length == 4) {    return new Color(color[0],color[1],color[2],color[3]);  } else {    throw new IllegalArgumentException(Messages.getString("exception.color.notEnoughComponents"));  }}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  if (scheme_ != null) {    sb.append(scheme_);    sb.append(':');  }  if (location_ != null) {    sb.append("//");    sb.append(location_);  }  if (path_ != null) {    sb.append(path_);  }  if (parameters_ != null) {    sb.append(';');    sb.append(parameters_);  }  if (query_ != null) {    sb.append('?');    sb.append(query_);  }  if (fragment_ != null) {    sb.append('#');    sb.append(fragment_);  }  return sb.toString();}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public static void assertSame(Object expected,Object actual,String errorMessage){  if (verbose) {    log("assertSame(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected == actual,errorMessage);}  }
class C{  private void scanBackward(final int repcount,long delta){  if (musicPlaybackService == null) {    return;  }  if (repcount == 0) {    mStartSeekPos=MusicUtils.position();    mLastSeekEventTime=0;  } else {    if (delta < 5000) {      delta=delta * 10;    } else {      delta=50000 + (delta - 5000) * 40;    }    long newpos=mStartSeekPos - delta;    if (newpos < 0) {      MusicUtils.previous(this);      final long duration=MusicUtils.duration();      mStartSeekPos+=duration;      newpos+=duration;    }    if (delta - mLastSeekEventTime > 250 || repcount < 0) {      MusicUtils.seek(newpos);      mLastSeekEventTime=delta;    }    if (repcount >= 0) {      mPosOverride=newpos;    } else {      mPosOverride=-1;    }    refreshCurrentTime();  }}  }
class C{  int sendNextByte(){  int result=0;  try {    long tDiff=interByteTime - ((System.currentTimeMillis() - lastRxTime) * 1000000000);    if (tDiff > 0) {      log.debug("TX: waiting " + tDiff + " ns");      Thread.sleep(tDiff / 1000000L,(int)(tDiff % 1000000L));    }  } catch (  InterruptedException ex) {    log.error("wait: " + ex.toString());  }  if (currTxCharPos >= currTxTgm.length) {    result=dequeueTelegram();  }  if (result == 0) {    writeChar(currTxTgm[currTxCharPos++],true);    if (currTxCharPos >= currTxTgm.length) {      setProtStat(ProtStatus.RECEIVING);    }  }  return result;}  }
class C{  public void draw(final Graphics g,final int x,final int y,final int height){  Preconditions.checkNotNull(g,"Error: Graphics context can't be null");  if (isVisible()) {    final Color oldColor=g.getColor();    g.setColor(m_caretColor);    g.drawLine(x,y,x,(y + height) - 1);    g.setColor(oldColor);  }}  }
class C{  private void verifySnapResults() throws Exception {  log.info("Verifying updated snapshot sresults for BlockSnapshotReplicationGroupInstanceMigration.");  BlockSnapshot snap=_dbClient.queryObject(BlockSnapshot.class,snapURI);  Assert.assertNotNull("deviceLabel should be set.",snap.getDeviceLabel());  Assert.assertTrue("deviceLabel should be set to " + DEVICE_LABEL,snap.getDeviceLabel().equals(DEVICE_LABEL));}  }
class C{  public static Query newDistanceQuery(final String field,final double latitude,final double longitude,final double radiusMeters){  final GeoShape shape=Geo3DUtil.fromDistance(latitude,longitude,radiusMeters);  return newShapeQuery(field,shape);}  }
class C{  public VisorGridDiscoveryEvent(int typeId,IgniteUuid id,String name,UUID nid,long ts,@Nullable String msg,String shortDisplay,UUID evtNodeId,String addr,boolean isDaemon){  super(typeId,id,name,nid,ts,msg,shortDisplay);  this.evtNodeId=evtNodeId;  this.addr=addr;  this.isDaemon=isDaemon;}  }
class C{  private void migrateRpBlockSnapshots(){  log.info("Migrating RecoverPoint BlockSnapshot objects.");  DbClient dbClient=getDbClient();  List<URI> blockSnapshotURIs=dbClient.queryByType(BlockSnapshot.class,false);  Iterator<BlockSnapshot> snapshots=dbClient.queryIterativeObjects(BlockSnapshot.class,blockSnapshotURIs);  int migrationCount=0;  while (snapshots.hasNext()) {    BlockSnapshot snapshot=snapshots.next();    if (snapshot != null && snapshot.getParent() != null && BlockSnapshot.checkForRP(dbClient,snapshot.getId())) {      Volume parent=dbClient.queryObject(Volume.class,snapshot.getParent().getURI());      if (parent.getRpTargets() != null) {        for (        String targetIdStr : parent.getRpTargets()) {          Volume targetVolume=dbClient.queryObject(Volume.class,URI.create(targetIdStr));          if (targetVolume != null && targetVolume.getVirtualArray().equals(snapshot.getVirtualArray())) {            log.info("Migrating RP BlockSnapshot {} - Setting deviceLabel field.",snapshot.getId().toString());            snapshot.setDeviceLabel(targetVolume.getDeviceLabel());            dbClient.persistObject(snapshot);            migrationCount++;          }        }      }    }  }  log.info("RecoverPoint BlockSnapshot migration complete.  A total of {} BlockSnapshots were migrated.",migrationCount);}  }
class C{  protected static long parseLongInteger(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  int count=temp & 0xFF;  if (count > LONG_INTEGER_LENGTH_MAX) {    throw new RuntimeException("Octet count greater than 8 and I can't represent that!");  }  long result=0;  for (int i=0; i < count; i++) {    temp=pduDataStream.read();    assert (-1 != temp);    result<<=8;    result+=(temp & 0xFF);  }  return result;}  }
class C{  public void nodeNotFound(final Node controlNode,final Node testNode,final String msg){  add(msg);}  }
class C{  public void paste(){  if (editable) {    Clipboard clipboard=getToolkit().getSystemClipboard();    try {      String selection=((String)clipboard.getContents(this).getTransferData(DataFlavor.stringFlavor)).replace('\r','\n');      int repeatCount=inputHandler.getRepeatCount();      StringBuffer buf=new StringBuffer();      for (int i=0; i < repeatCount; i++)       buf.append(selection);      selection=buf.toString();      setSelectedText(selection);    } catch (    Exception e) {      getToolkit().beep();      System.err.println("Clipboard does not" + " contain a string");    }  }}  }
class C{  public TFloatHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  private void runClock(){  if (!runClock) {    return;  }  long sleep;synchronized (pseudoTcp) {    pseudoTcp.notifyClock(PseudoTCPBase.now());    sleep=pseudoTcp.getNextClock(PseudoTCPBase.now());  }  if (sleep == -1) {    releaseAllLocks();    if (exception != null) {      logger.log(Level.SEVERE,"STATE: " + pseudoTcp.getState() + " ERROR: "+ exception.getMessage());    }  } else {    scheduleClockTask(sleep);  }}  }
class C{  public boolean isJspPage(String uri) throws JasperException {  init();  if (jspProperties == null) {    return false;  }  String uriPath=null;  int index=uri.lastIndexOf('/');  if (index >= 0) {    uriPath=uri.substring(0,index + 1);  }  String uriExtension=null;  index=uri.lastIndexOf('.');  if (index >= 0) {    uriExtension=uri.substring(index + 1);  }  for (  JspPropertyGroup jpg : jspProperties) {    JspProperty jp=jpg.getJspProperty();    String extension=jpg.getExtension();    String path=jpg.getPath();    if (extension == null) {      if (uri.equals(path)) {        return true;      }    } else {      if ((path == null || path.equals(uriPath)) && (extension.equals("*") || extension.equals(uriExtension))) {        return true;      }    }  }  return false;}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  public InvalidityDateExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.InvalidityDate_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  this.date=val.getGeneralizedTime();}  }
class C{  public boolean isCurrentThread(){  return Thread.currentThread() == mThread;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static LangProfile loadFromText(String lang,File file) throws LangDetectException {  LangProfile profile=new LangProfile(lang);  BufferedReader is=null;  try {    is=new BufferedReader(new InputStreamReader(new FileInputStream(file),"utf-8"));    int count=0;    while (is.ready()) {      String line=is.readLine();      profile.update(line);      ++count;    }    System.out.println(lang + ":" + count);  } catch (  IOException e) {    throw new LangDetectException(ErrorCode.CantOpenTrainData,"Can't open training database file '" + file.getName() + "'");  } finally {    try {      if (is != null)       is.close();    } catch (    IOException e) {    }  }  return profile;}  }
class C{  @OnClick(R.id.btn_create_new) public void onCreateNewClick(){  mPhotoChooserContainer.startAnimation(mShowFromBottom);  mPhotoChooserContainer.setVisibility(View.VISIBLE);  mBtnCreateNew.startAnimation(mHideFromBottom);  mBtnCreateNew.setVisibility(View.GONE);  AlphaAnimation alphaIn=new AlphaAnimation(0.f,1.f);  alphaIn.setDuration(mShowFromBottom.getDuration());  mPhotoChooserBackground.startAnimation(alphaIn);  mPhotoChooserBackground.setVisibility(View.VISIBLE);}  }
class C{  public void handleUploadError(int error){  if (mLogger.isActivated()) {    mLogger.debug("File upload failed");  }synchronized (mLock) {    mFileUploadService.removeFileUpload(mUploadId);    setState(FileUpload.State.FAILED);  }}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(int initialCapacity){  return new ConcurrentHashMap<K,V>(initialCapacity);}  }
class C{  private S3ObjectSummary createS3ObjectSummary(String filePath,long fileSizeInBytes){  S3ObjectSummary s3ObjectSummary=new S3ObjectSummary();  s3ObjectSummary.setKey(filePath);  s3ObjectSummary.setSize(fileSizeInBytes);  return s3ObjectSummary;}  }
class C{  public void tellAll(String[] percepts){  for (int i=0; i < percepts.length; i++) {    tell(percepts[i]);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public RestClient build(){  return new RestClient(this);}  }
class C{  private static File createMultiBitRuntime() throws IOException {  File multiBitDirectory=FileHandler.createTempDirectory("multibit");  String multiBitDirectoryPath=multiBitDirectory.getAbsolutePath();  System.out.println("Building MultiBit runtime in : " + multiBitDirectory.getAbsolutePath());  File multibitProperties=new File(multiBitDirectoryPath + File.separator + "multibit.properties");  multibitProperties.createNewFile();  multibitProperties.deleteOnExit();  File multibitCheckpoints=new File(multiBitDirectoryPath + File.separator + "multibit.checkpoints");  FileHandler.copyFile(new File("./src/main/resources/multibit.checkpoints"),multibitCheckpoints);  multibitCheckpoints.deleteOnExit();  return multiBitDirectory;}  }
class C{  private static AbstractTripleStore createTripleStore(JiniFederation fed) throws Exception {  AbstractTripleStore tripleStore=null;  tripleStore=(AbstractTripleStore)fed.getResourceLocator().locate(namespace,ITx.UNISOLATED);  if (tripleStore == null) {    final Properties properties=fed.getClient().getProperties(ScaleOut.class.getName());    tripleStore=new ScaleOutTripleStore(fed,namespace,ITx.UNISOLATED,properties);    tripleStore.create();  }  return tripleStore;}  }
class C{  public ScreenBuffer(TerminalSize size,TextCharacter filler){  this(new BasicTextImage(size,filler));}  }
class C{  private InetSocketAddress nextInetSocketAddress() throws UnknownHostException {  InetSocketAddress result=new InetSocketAddress(socketAddresses[nextSocketAddressIndex++],socketPort);  if (nextSocketAddressIndex == socketAddresses.length) {    socketAddresses=null;    nextSocketAddressIndex=0;  }  return result;}  }
class C{  public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + DATA_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=0x00;  binValue[5]=0x00;  binValue[6]=0x00;  binValue[7]=(byte)((getChangeIpFlag() ? 4 : 0) + (getChangePortFlag() ? 2 : 0));  return binValue;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  @Override public void step(){  super.step();  currentIteration++;  testAverageDeltas();}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int search(final CharSequence s,final int from,final int to){  final int n=pattern.length;  if (n == 0)   return from > to ? to : (from < 0 ? 0 : from);  if (n == 1)   return indexOf(s,from,to);  final char[] p=pattern;  final char last=p[n - 1];  final int m1=to - 1;  final int[] shift=badCharShift;  final int[] asciiShift=asciiBadCharShift;  final int m=mask;  final int hs=hashShift;  int i=(from < 0 ? 0 : from) + n - 1, j, k;  char c;  if (caseSensitive) {    while (i < m1) {      if (s.charAt(i) == last) {        j=n - 1;        k=i;        while (j-- != 0 && s.charAt(--k) == p[j])         ;        if (j < 0)         return k;      }      if ((c=s.charAt(++i)) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && s.charAt(i--) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  } else   if (asciiCase) {    while (i < m1) {      if (asciiToLowerCase(s.charAt(i)) == last) {        j=n - 1;        k=i;        while (j-- != 0 && asciiToLowerCase(s.charAt(--k)) == p[j])         ;        if (j < 0)         return k;      }      if ((c=asciiToLowerCase(s.charAt(++i))) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && asciiToLowerCase(s.charAt(i--)) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  } else {    while (i < m1) {      if (unicodeToLowerCase(s.charAt(i)) == last) {        j=n - 1;        k=i;        while (j-- != 0 && unicodeToLowerCase(s.charAt(--k)) == p[j])         ;        if (j < 0)         return k;      }      if ((c=unicodeToLowerCase(s.charAt(++i))) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && unicodeToLowerCase(s.charAt(i--)) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  }}  }
class C{  double biLinearInterpolation(double xCoord,double yCoord){  return biLinearValueInterpolation(this.sg,xCoord,yCoord);}  }
class C{  @Override synchronized public void dispose(){  for (int i=(ConsistList.size() - 1); i >= 0; i--) {    DccLocoAddress loco=ConsistList.get(i);    if (log.isDebugEnabled()) {      log.debug("Deleting Locomotive: " + loco.toString());    }    try {      remove(loco);    } catch (    Exception ex) {      log.error("Error removing loco: " + loco.toString() + " from consist: "+ ConsistAddress.toString());    }  }  tc.removeXNetListener(XNetInterface.COMMINFO | XNetInterface.CONSIST,this);}  }
class C{  boolean purge(Reference reference){  boolean r=(parent.keyType > HARD) && (key == reference);  r=r || ((parent.valueType > HARD) && (value == reference));  if (r) {    if (parent.keyType > HARD) {      ((Reference)key).clear();    }    if (parent.valueType > HARD) {      ((Reference)value).clear();    } else     if (parent.purgeValues) {      value=null;    }  }  return r;}  }
class C{  public void print(PrintStream ps){  for (  AlgorithmResult algorithmResult : algorithmResults) {    algorithmResult.print(ps);  }}  }
class C{  public boolean add(LIRInstruction inst){  overlap=false;  inst.visitEachOutput(valueConsumer);  inst.visitEachTemp(valueConsumer);  inst.visitEachInput(valueConsumer);  inst.visitEachAlive(valueConsumer);  return overlap;}  }
class C{  protected void paintHorizontalLine(Graphics g,JComponent c,int y,int left,int right){  if (lineTypeDashed) {    drawDashedHorizontalLine(g,y,left,right);  } else {    g.drawLine(left,y,right,y);  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected void handleFailure(MailAddress recipient,Mail aMail,Exception ex) throws MessagingException, IOException {  String user=getUsername(recipient);  MimeMessage originalMessage=aMail.getMessage();  MimeMessage message=new MimeMessage(originalMessage);  MimeMultipart multipart=new MimeMultipart();  MimeBodyPart noticePart=new MimeBodyPart();  noticePart.setText("An error was encountered while processing this mail with the active sieve script for user \"" + user + "\". The error encountered was:\r\n"+ ex.getLocalizedMessage()+ "\r\n");  multipart.addBodyPart(noticePart);  MimeBodyPart originalPart=new MimeBodyPart();  originalPart.setContent(originalMessage,"message/rfc822");  if ((originalMessage.getSubject() != null) && (!originalMessage.getSubject().trim().isEmpty())) {    originalPart.setFileName(originalMessage.getSubject().trim());  } else {    originalPart.setFileName("No Subject");  }  originalPart.setDisposition(MimeBodyPart.INLINE);  multipart.addBodyPart(originalPart);  message.setContent(multipart);  message.setSubject("[SIEVE ERROR] " + originalMessage.getSubject());  message.setHeader("X-Priority","1");  message.saveChanges();  storeMessageInbox(user,message);}  }
class C{  public ManagedConnection matchManagedConnections(Set connectionSet,javax.security.auth.Subject subject,ConnectionRequestInfo cxRequestInfo) throws ResourceException {  for (  Object connection : connectionSet) {    if (!(connection instanceof FBManagedConnection))     continue;    FBManagedConnection mc=(FBManagedConnection)connection;    if (mc.matches(subject,cxRequestInfo))     return mc;  }  return null;}  }
class C{  public DDFSubfield(DDFSubfieldDefinition poSFDefn,byte[] pachFieldData,int nBytesRemaining){  defn=poSFDefn;  MutableInt nBytesConsumed=new MutableInt();  DDFDataType ddfdt=poSFDefn.getType();  if (ddfdt == DDFDataType.DDFInt) {    setValue(new Integer(defn.extractIntData(pachFieldData,nBytesRemaining,nBytesConsumed)));  } else   if (ddfdt == DDFDataType.DDFFloat) {    setValue(new Double(defn.extractFloatData(pachFieldData,nBytesRemaining,nBytesConsumed)));  } else   if (ddfdt == DDFDataType.DDFString || ddfdt == DDFDataType.DDFBinaryString) {    setValue(defn.extractStringData(pachFieldData,nBytesRemaining,nBytesConsumed));  }  byteSize=nBytesConsumed.value;}  }
class C{  public ImmutableLocation toImmutableLocation(World w){  return new ImmutableLocation(x,y,z,w);}  }
class C{  public static Bundle addProperties(Bundle props,int pageNumber,int lastPageNumber){  props.putInt(THIS_PAGE_NUMBER,pageNumber);  return props;}  }
class C{  public Where<T,ID> between(String columnName,Object low,Object high) throws SQLException {  addClause(new Between(columnName,findColumnFieldType(columnName),low,high));  return this;}  }
class C{  public boolean compareSource(){  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public int compareTo(DoubleIntPair other){  int fdiff=Double.compare(this.first,other.first);  if (fdiff != 0) {    return fdiff;  }  return this.second - other.second;}  }
class C{  public void update(byte[] input,int offset,int length){  digestInstance.update(input,offset,length);}  }
class C{  public static VideoCodec createVideoCodecFromSdp(MediaDescription media){  String rtpmap=media.getMediaAttribute("rtpmap").getValue();  String encoding=rtpmap.substring(rtpmap.indexOf(media.mPayload) + media.mPayload.length() + 1).trim();  String codecName=encoding;  int clockRate=0;  int index=encoding.indexOf("/");  if (index != -1) {    codecName=encoding.substring(0,index);    clockRate=Integer.parseInt(encoding.substring(index + 1));  }  MediaAttribute frameSize=media.getMediaAttribute("framesize");  int videoWidth=0;  int videoHeight=0;  if (frameSize != null) {    try {      String value=frameSize.getValue();      index=value.indexOf(media.mPayload);      int separator=value.indexOf('-');      if ((index != -1) && (separator != -1)) {        videoWidth=Integer.parseInt(value.substring(index + media.mPayload.length() + 1,separator));        videoHeight=Integer.parseInt(value.substring(separator + 1));      }    } catch (    NumberFormatException e) {    }  }  MediaAttribute attr=media.getMediaAttribute("framerate");  int frameRate=0;  if (attr != null) {    try {      String value=attr.getValue();      index=value.indexOf(media.mPayload);      if ((index != -1) && (value.length() > media.mPayload.length())) {        frameRate=Integer.parseInt(value.substring(index + media.mPayload.length() + 1));      } else {        frameRate=Integer.parseInt(value);      }    } catch (    NumberFormatException e) {      frameRate=H264Config.FRAME_RATE;    }  }  MediaAttribute fmtp=media.getMediaAttribute("fmtp");  String codecParameters="";  if (fmtp != null) {    String value=fmtp.getValue();    index=0;    if ((index != -1) && (value.length() > media.mPayload.length())) {      codecParameters=value.substring(index + media.mPayload.length() + 1);    }  }  VideoCodec videoCodec=new VideoCodec(codecName,Integer.parseInt(media.mPayload),clockRate,frameRate,0,videoWidth,videoHeight,codecParameters);  return videoCodec;}  }
class C{  protected SVGOMFlowRegionElement(){}  }
class C{  public static void main(String args[]) throws IOException {  Method[] methods=List.class.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    System.out.println(methods[i]);  }}  }
class C{  public ClientMessage sendMessage(SimpleString targetAddress,String body,Map<String,Object> properties){  ClientMessage message=createMessage(body);  sendMessage(targetAddress,message);  return message;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ECFieldF2m) {    ECFieldF2m o=(ECFieldF2m)obj;    if (this.m == o.m) {      if (this.rp == null) {        if (o.rp == null) {          return true;        }      } else {        return Arrays.equals(this.ks,o.ks);      }    }  }  return false;}  }
class C{  protected Object handleUnknownData(Column column,Field fieldDefn,Object data){  if (column.isOptional() || fieldDefn.schema().isOptional()) {    logger.warn("Unexpected value for JDBC type {} and column {}: class={}",column.jdbcType(),column,data.getClass());    return null;  }  throw new IllegalArgumentException("Unexpected value for JDBC type " + column.jdbcType() + " and column "+ column+ ": class="+ data.getClass());}  }
class C{  public FieldAnnotationStruct(CstFieldRef field,AnnotationSetItem annotations){  if (field == null) {    throw new NullPointerException("field == null");  }  if (annotations == null) {    throw new NullPointerException("annotations == null");  }  this.field=field;  this.annotations=annotations;}  }
class C{  public static Date createTimeAgoFromOrigin(double age,Type units,java.util.Date origin){  return new Date(age,units,true,origin);}  }
class C{  public DistanceCentralityScorer(Hypergraph<V,E> graph,Function<E,? extends Number> edge_weights,boolean averaging){  this(graph,new DijkstraDistance<V,E>(graph,edge_weights),averaging,true,true);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public CloseAction(){  super(UIManager.getString("BETitlePane.closeButtonToolTipext",getLocale()));}  }
class C{  public void disconnectCamera(){  mRenderer.disconnectCamera();}  }
class C{  public synchronized PasswordSetting createPasswordSettingMD5(String key,String defaultValue){  PasswordSetting result=new PasswordSetting(DEFAULT_PROPS,PROPS,PasswordSetting.MD5,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  public static double[][] clone(double[][] source){  ParamChecks.nullNotPermitted(source,"source");  double[][] clone=new double[source.length][];  for (int i=0; i < source.length; i++) {    if (source[i] != null) {      double[] row=new double[source[i].length];      System.arraycopy(source[i],0,row,0,source[i].length);      clone[i]=row;    }  }  return clone;}  }
class C{  private Icon parseIconType(String iconType){  List<Icon> icons=Utils.getIcons();  for (  Icon icon : icons) {    if (icon.getIconType().name().toLowerCase().equals(iconType.toLowerCase())) {      return icon;    }  }  throw new IllegalArgumentException("Correct icon type not specified.");}  }
class C{  public void removeAccessory(HomekitAccessory accessory){  this.registry.remove(accessory);  logger.info("Removed accessory " + accessory.getLabel());  if (started) {    registry.reset();    webHandler.resetConnections();  }}  }
class C{  private void createResultContentHandler(Result outputTarget) throws TransformerException {  if (outputTarget instanceof SAXResult) {    SAXResult saxResult=(SAXResult)outputTarget;    m_resultContentHandler=saxResult.getHandler();    m_resultLexicalHandler=saxResult.getLexicalHandler();    if (m_resultContentHandler instanceof Serializer) {      m_serializer=(Serializer)m_resultContentHandler;    }  } else   if (outputTarget instanceof DOMResult) {    DOMResult domResult=(DOMResult)outputTarget;    Node outputNode=domResult.getNode();    Node nextSibling=domResult.getNextSibling();    Document doc;    short type;    if (null != outputNode) {      type=outputNode.getNodeType();      doc=(Node.DOCUMENT_NODE == type) ? (Document)outputNode : outputNode.getOwnerDocument();    } else {      try {        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();        dbf.setNamespaceAware(true);        if (m_isSecureProcessing) {          try {            dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);          } catch (          ParserConfigurationException pce) {          }        }        DocumentBuilder db=dbf.newDocumentBuilder();        doc=db.newDocument();      } catch (      ParserConfigurationException pce) {        throw new TransformerException(pce);      }      outputNode=doc;      type=outputNode.getNodeType();      ((DOMResult)outputTarget).setNode(outputNode);    }    DOMBuilder domBuilder=(Node.DOCUMENT_FRAGMENT_NODE == type) ? new DOMBuilder(doc,(DocumentFragment)outputNode) : new DOMBuilder(doc,outputNode);    if (nextSibling != null)     domBuilder.setNextSibling(nextSibling);    m_resultContentHandler=domBuilder;    m_resultLexicalHandler=domBuilder;  } else   if (outputTarget instanceof StreamResult) {    StreamResult sresult=(StreamResult)outputTarget;    try {      Serializer serializer=SerializerFactory.getSerializer(m_outputFormat.getProperties());      m_serializer=serializer;      if (null != sresult.getWriter())       serializer.setWriter(sresult.getWriter()); else       if (null != sresult.getOutputStream())       serializer.setOutputStream(sresult.getOutputStream()); else       if (null != sresult.getSystemId()) {        String fileURL=sresult.getSystemId();        if (fileURL.startsWith("file:///")) {          if (fileURL.substring(8).indexOf(":") > 0) {            fileURL=fileURL.substring(8);          } else {            fileURL=fileURL.substring(7);          }        } else         if (fileURL.startsWith("file:/")) {          if (fileURL.substring(6).indexOf(":") > 0) {            fileURL=fileURL.substring(6);          } else {            fileURL=fileURL.substring(5);          }        }        m_outputStream=new java.io.FileOutputStream(fileURL);        serializer.setOutputStream(m_outputStream);      } else       throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_OUTPUT_SPECIFIED,null));      m_resultContentHandler=serializer.asContentHandler();    } catch (    IOException ioe) {      throw new TransformerException(ioe);    }  } else {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_TO_RESULT_TYPE,new Object[]{outputTarget.getClass().getName()}));  }  if (m_resultContentHandler instanceof DTDHandler)   m_resultDTDHandler=(DTDHandler)m_resultContentHandler;  if (m_resultContentHandler instanceof DeclHandler)   m_resultDeclHandler=(DeclHandler)m_resultContentHandler;  if (m_resultContentHandler instanceof LexicalHandler)   m_resultLexicalHandler=(LexicalHandler)m_resultContentHandler;}  }
class C{  public static String encodeString(String source){  if (source == null) {    return source;  }  int i=firstIllegalCharacter(source);  if (i == -1) {    return source;  }  StringBuffer encoded=new StringBuffer();  encoded.append(source.substring(0,i));  byte bytes[]=toBytes(source);  for (; i < bytes.length; i++) {    int ch=bytes[i];    if (isLegal(ch)) {      encoded.append((char)ch);    } else {      encoded.append(QUOTE_MARKER + Integer.toHexString((byte)ch & 0xff).toUpperCase());    }  }  return encoded.toString();}  }
class C{  public int errorCode(){  return errorCode;}  }
class C{  public static void backAndForth(HGSearchResult<?> rs,int windowSize,int iteration){  boolean advance=true;  for (int i=0; i < iteration; i++) {    Object x=rs.current();    int steps=random(windowSize);    steps=forward(rs,steps);    if (back(rs,steps) != steps)     throw new RuntimeException("Moved " + steps + " forward, but not backward.");    if (!x.equals(rs.current()))     throw new RuntimeException("Moving " + steps + " steps forward and backward missed current "+ x);    if (advance) {      forward(rs,random(windowSize));      if (!rs.hasNext()) {        back(rs,random(windowSize));        advance=false;      }    } else {      back(rs,random(windowSize));      if (!rs.hasPrev()) {        forward(rs,random(windowSize));        advance=true;      }    }  }}  }
class C{  public static Bitmap resizeBitmap(final Bitmap input,int destWidth,int destHeight) throws OutOfMemoryError {  return resizeBitmap(input,destWidth,destHeight,0);}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  @Override public void remove(DrunkStatus status,StatusList statusList){  statusList.removeInternal(status);}  }
class C{  public PairwiseMatrix2DataTableRowIterator(NumericalMatrix matrix){  this(matrix,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Attr streetAttr;  boolean specified;  Node removedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(2);  attributes=testAddress.getAttributes();  assertNotNull("attributesNotNull",attributes);  removedNode=attributes.removeNamedItem("street");  streetAttr=(Attr)attributes.getNamedItem("street");  assertNotNull("streetAttrNotNull",streetAttr);  specified=streetAttr.getSpecified();  assertFalse("attrNotSpecified",specified);}  }
class C{  private void handleSitemap(ParseState state,RobotToken token){  String sitemap=token.getData();  try {    URL sitemap_url=new URL(new URL(state.getUrl()),sitemap);    String hostname=sitemap_url.getHost();    if ((hostname != null) && (hostname.length() > 0)) {      state.addSitemap(sitemap_url.toExternalForm());    }  } catch (  Exception e) {    reportWarning("Invalid URL with sitemap directive: " + sitemap,state.getUrl());  }}  }
class C{  protected void changeLayers(ContainerEvent e){  if (!doContainerChange) {    return;  }  Component[] comps=this.getComponents();  int ncomponents=comps.length;  int nBufLayerComponents=0;  BufferedLayer bufLayer;synchronized (this) {    bufLayer=getBufferedLayer();  }  if (ncomponents == 0 || comps[ncomponents - 1] != bufLayer) {    super.changeLayers(e);    return;  }  Component[] bufLayers=bufLayer.getLayers();  nBufLayerComponents=bufLayers.length;  Layer[] newLayers=new Layer[ncomponents + nBufLayerComponents - 1];  System.arraycopy(comps,0,newLayers,0,ncomponents - 1);  System.arraycopy(bufLayers,0,newLayers,ncomponents - 1,nBufLayerComponents);  if (DEBUG) {    debugmsg("changeLayers() - firing change");  }  firePropertyChange(LayersProperty,currentLayers,newLayers);  for (  Layer layer : addedLayers) {    layer.added(this);  }  addedLayers.removeAllElements();  currentLayers=newLayers;}  }
class C{  public RSyntaxTextArea(int textMode){  super(textMode);  init();}  }
class C{  private Query makeQuery(){  final SearchMode searchMode=getSearchMode();  if (searchMode == SearchMode.SAVED_QUERY) {    return makeQueryQuery();  } else   if (searchMode == SearchMode.IDS) {    return makeIDsQuery();  } else   if (searchMode == SearchMode.TITLE) {    return makeTitleQuery();  }  throw new UnsupportedOperationException();}  }
class C{  public boolean isFatalError(){  return fSeverity == RefactoringStatus.FATAL;}  }
class C{  private byte[] fetchGuid(){  PreparedStatement stmt=null;  ResultSet rows=null;  String sqltext=SELECT_GUID;  byte[] data=null;  try {    metrics.startTiming();    stmt=conn.prepareStatement(sqltext);    rows=stmt.executeQuery();    if (rows.next()) {      data=rows.getBytes(1);    }    rows.close();    rows=null;    stmt.close();    stmt=null;    metrics.recordGUIDS();  } catch (  SQLException e) {    if (OracleLog.isLoggingEnabled())     log.severe(e.toString());  } finally {    for (    String message : SODAUtils.closeCursor(stmt,rows)) {      if (OracleLog.isLoggingEnabled())       log.severe(message);    }  }  return (data);}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  public static boolean isNetworkEnabled(){  return networkEnabled;}  }
class C{  public static boolean contains(Enumeration<?> enumeration,Object element){  if (enumeration != null) {    while (enumeration.hasMoreElements()) {      Object candidate=enumeration.nextElement();      if (ObjectUtils.nullSafeEquals(candidate,element)) {        return true;      }    }  }  return false;}  }
class C{  public void unbox(final Type type){  Type t=NUMBER_TYPE;  Method sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=CHARACTER_TYPE;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=BOOLEAN_TYPE;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkCast(type);} else {checkCast(t);invokeVirtual(t,sig);}}  }
class C{  public void test_toString(){  MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute(null);  assertEquals("Unexpected class representation string",mac1.toString(),getClass().getName() + "$MockAttributedCharacterIteratorAttribute(null)");  TestAttributedCharacterIteratorAttribute mac2=new TestAttributedCharacterIteratorAttribute("test1");  assertEquals("Unexpected class representation string",mac2.toString(),getClass().getName() + "$TestAttributedCharacterIteratorAttribute(test1)");}  }
class C{  private static void addWhereDatePath(QueryParameter newQuery,String selectedAbsolutePath){  Date from=new Date();  Date to=new Date();  DirectoryFormatter.getDates(selectedAbsolutePath,from,to);  if (to.getTime() == 0) {    newQuery.addWhere(SQL_COL_DATE_TAKEN + " in (0,-1, null)").addOrderBy(SQL_COL_DATE_TAKEN + " desc");  } else {    newQuery.addWhere(FILTER_EXPR_DATE_MIN,"" + from.getTime()).addWhere(FILTER_EXPR_DATE_MAX,"" + to.getTime()).addOrderBy(SQL_COL_DATE_TAKEN + " desc");  }}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSSource({DSSourceKind.CONTACT_INFORMATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.930 -0500",hash_original_method="39CCF57C11710ED9D7B06C24BDE6652B",hash_generated_method="81B22971803C149D0C82E0B6074B8933") public static InputStream openContactPhotoInputStream(ContentResolver cr,Uri contactUri,boolean preferHighres){  if (preferHighres) {    final Uri displayPhotoUri=Uri.withAppendedPath(contactUri,Contacts.Photo.DISPLAY_PHOTO);    InputStream inputStream;    try {      AssetFileDescriptor fd=cr.openAssetFileDescriptor(displayPhotoUri,"r");      return fd.createInputStream();    } catch (    IOException e) {    }  }  Uri photoUri=Uri.withAppendedPath(contactUri,Photo.CONTENT_DIRECTORY);  if (photoUri == null) {    return null;  }  Cursor cursor=cr.query(photoUri,new String[]{ContactsContract.CommonDataKinds.Photo.PHOTO},null,null,null);  try {    if (cursor == null || !cursor.moveToNext()) {      return null;    }    byte[] data=cursor.getBlob(0);    if (data == null) {      return null;    }    return new ByteArrayInputStream(data);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public void manageWebAppBookmark(String url,String title,String operationType) throws AppCatalogException {  Toast.makeText(context,"Please wait, WebClip is being installed.",Toast.LENGTH_LONG).show();  final Intent bookmarkIntent=new Intent();  final Intent actionIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));  long urlHash=url.hashCode();  long uniqueId=(urlHash << MAX_URL_HASH) | actionIntent.hashCode();  actionIntent.putExtra(Browser.EXTRA_APPLICATION_ID,Long.toString(uniqueId));  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,actionIntent);  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,title);  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(context,R.drawable.ic_bookmark));  if (operationType != null) {    if (resources.getString(R.string.operation_install).equalsIgnoreCase(operationType)) {      bookmarkIntent.setAction(resources.getString(R.string.application_package_launcher_install_action));    } else     if (resources.getString(R.string.operation_uninstall).equalsIgnoreCase(operationType)) {      bookmarkIntent.setAction(resources.getString(R.string.application_package_launcher_uninstall_action));    } else {      throw new AppCatalogException("Cannot create webclip due to invalid operation type.");    }  } else {    bookmarkIntent.setAction(resources.getString(R.string.application_package_launcher_install_action));  }  context.sendBroadcast(bookmarkIntent);}  }
class C{  public Type basicGetType(){  if (getTypeSpecifier() != null) {    return getTypeSpecifier().getType();  }  return null;}  }
class C{  public void stopSearching(){  stopSearching=true;  if (finder != null) {    finder.stopSearching();  }}  }
class C{  public void testNextIntBoundNonPositive(){  SplittableRandom sr=new SplittableRandom();  Runnable[] throwingActions={null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  protected void not_null(Object obj) throws internal_error {  if (obj == null)   throw new internal_error("Null object used in set operation");}  }
class C{  public ProblemStub(int numberOfObjectives){  super(0,numberOfObjectives,0);}  }
class C{  public ECFieldElement sqrt(){  int[] x1=this.x;  if (Nat192.isZero(x1) || Nat192.isOne(x1)) {    return this;  }  int[] x2=Nat192.create();  SecP192K1Field.square(x1,x2);  SecP192K1Field.multiply(x2,x1,x2);  int[] x3=Nat192.create();  SecP192K1Field.square(x2,x3);  SecP192K1Field.multiply(x3,x1,x3);  int[] x6=Nat192.create();  SecP192K1Field.squareN(x3,3,x6);  SecP192K1Field.multiply(x6,x3,x6);  int[] x8=x6;  SecP192K1Field.squareN(x6,2,x8);  SecP192K1Field.multiply(x8,x2,x8);  int[] x16=x2;  SecP192K1Field.squareN(x8,8,x16);  SecP192K1Field.multiply(x16,x8,x16);  int[] x19=x8;  SecP192K1Field.squareN(x16,3,x19);  SecP192K1Field.multiply(x19,x3,x19);  int[] x35=Nat192.create();  SecP192K1Field.squareN(x19,16,x35);  SecP192K1Field.multiply(x35,x16,x35);  int[] x70=x16;  SecP192K1Field.squareN(x35,35,x70);  SecP192K1Field.multiply(x70,x35,x70);  int[] x140=x35;  SecP192K1Field.squareN(x70,70,x140);  SecP192K1Field.multiply(x140,x70,x140);  int[] x159=x70;  SecP192K1Field.squareN(x140,19,x159);  SecP192K1Field.multiply(x159,x19,x159);  int[] t1=x159;  SecP192K1Field.squareN(t1,20,t1);  SecP192K1Field.multiply(t1,x19,t1);  SecP192K1Field.squareN(t1,4,t1);  SecP192K1Field.multiply(t1,x3,t1);  SecP192K1Field.squareN(t1,6,t1);  SecP192K1Field.multiply(t1,x3,t1);  SecP192K1Field.square(t1,t1);  int[] t2=x3;  SecP192K1Field.square(t1,t2);  return Nat192.eq(x1,t2) ? new SecP192K1FieldElement(t1) : null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childValue;  int childLength;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.appendData(", Esquire");  childValue=child.getData();  childLength=childValue.length();  assertEquals("characterdataAppendDataAssert",24,childLength);}  }
class C{  public List<T> lruValues(){  ArrayList<T> lruValues=new ArrayList<T>(pmap.size());  CacheNode<T> next=lruFirst;  while (next != null) {    lruValues.add(next.get());    next=next.getAfter();  }  return lruValues;}  }
class C{  public static double mouseY(){synchronized (mouseLock) {    return mouseY;  }}  }
class C{  public Clustering<SubspaceModel> run(Database database,Relation<V> relation){  final int d=RelationUtil.dimensionality(relation);  ArrayModifiableDBIDs S=DBIDUtil.newArray(relation.getDBIDs());  double r=Math.abs(Math.log(d + d) / Math.log(beta * .5));  int n=(int)(2. / alpha);  int m=(int)(Math.pow(2. / alpha,r) * Math.log(4));  if (heuristics) {    m=Math.min(m,Math.min(1000000,d * d));  }  int minClusterSize=(int)(alpha * S.size());  Clustering<SubspaceModel> result=new Clustering<>("DOC Clusters","DOC");  IndefiniteProgress cprogress=LOG.isVerbose() ? new IndefiniteProgress("Number of clusters",LOG) : null;  while (S.size() > minClusterSize) {    Cluster<SubspaceModel> C;    if (heuristics) {      C=runFastDOC(database,relation,S,d,n,m,(int)r);    } else {      C=runDOC(database,relation,S,d,n,m,(int)r,minClusterSize);    }    if (C == null) {      break;    }    result.addToplevelCluster(C);    S.removeDBIDs(C.getIDs());    if (cprogress != null) {      cprogress.setProcessed(result.getAllClusters().size(),LOG);    }  }  if (S.size() > 0) {    long[] alldims=BitsUtil.ones(d);    result.addToplevelCluster(new Cluster<>(S,true,new SubspaceModel(new Subspace(alldims),Centroid.make(relation,S).getArrayRef())));  }  LOG.setCompleted(cprogress);  return result;}  }
class C{  public ContextSensitiveImportRewriteContext(CompilationUnit compilationUnit,int position,ImportRewrite importRewrite){  fCompilationUnit=compilationUnit;  fPosition=position;  fImportRewrite=importRewrite;  fDeclarationsInScope=null;  fImportedNames=null;}  }
class C{  protected void waitForMessagesToBeDelivered(){  long maxWaitTime=60000;  long waitTime=maxWaitTime;  long start=(maxWaitTime <= 0) ? 0 : System.currentTimeMillis();synchronized (lock) {    while (messages.size() < data.length && waitTime >= 0) {      try {        lock.wait(200);      } catch (      InterruptedException e) {        e.printStackTrace();      }      waitTime=maxWaitTime - (System.currentTimeMillis() - start);    }  }}  }
class C{  public boolean isChangeFlag(){  return changeFlag;}  }
class C{  protected void save(File file,double[] data) throws IOException {  PrintWriter writer=null;  try {    writer=new PrintWriter(file);    for (int i=0; i < data.length; i++) {      writer.println(data[i]);    }  }  finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  protected void addBoundPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TypeParameter_bound_feature"),getString("_UI_PropertyDescriptor_description","_UI_TypeParameter_bound_feature","_UI_TypeParameter_type"),TypesPackage.Literals.TYPE_PARAMETER__BOUND,true,false,true,null,null,null));}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  public static void main(String[] args){  TestWarnings tester=new TestWarnings();  run(tester,ARGS,TEST,NEGATED_TEST);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  public ModelData(StateMachineModelFactory<S,E> factory){  this.factory=factory;}  }
class C{  public void resetXRotations(){  rotateAngleX=initRotateAngleX;}  }
class C{  public int size(){  if (root != null)   return root.size();  return 0;}  }
class C{  public static void checkMainThread(){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && Looper.myLooper() != Looper.getMainLooper()) {    throw new IllegalStateException("Not in applications main thread");  }}  }
class C{  protected void isElementWellFormed(Node node){  boolean isNameWF=false;  if ((fFeatures & NAMESPACES) != 0) {    isNameWF=isValidQName(node.getPrefix(),node.getLocalName(),fIsXMLVersion11);  } else {    isNameWF=isXMLName(node.getNodeName(),fIsXMLVersion11);  }  if (!isNameWF) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"Element",node.getNodeName()});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));    }  }}  }
class C{  public boolean pingMyServer(long pingTimeout){  IQ result=ping(connection.getServiceName(),pingTimeout);  if (result == null) {    for (    PingFailedListener l : pingFailedListeners) {      l.pingFailed();    }    return false;  }  pongReceived();  return true;}  }
class C{  public void nextPair(){  if (current < maxCount) {    current++;  } else {    throw new RuntimeException("No keys left in PdfKeyPairsIterator");  }}  }
class C{  @Override public void prePlot(Graphics gx){  super.paintComponent(gx);  if (m_plotInstances != null) {    drawShapes(gx);  }}  }
class C{  public void fireTreeWillExpand(TreePath path) throws ExpandVetoException {  Object[] listeners=listenerList.getListenerList();  TreeExpansionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeWillExpandListener.class) {      if (e == null)       e=new TreeExpansionEvent(this,path);      ((TreeWillExpandListener)listeners[i + 1]).treeWillExpand(e);    }  }}  }
class C{  public void add(RecyclerDivider header){  this.myAppHeader=header;  notifyBinderDataSetChanged();}  }
class C{  private void processStart(final State current){  if (current.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    return;  }  try {    if (!isFinalStage(current)) {      if (current.nextPageLink == null) {        Operation queryEntityLocksPagination=Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_LOCAL_QUERY_TASKS)).setBody(buildEntityLockQuery(current));        queryEntityLocksPagination.setCompletion((null)).sendWith(this);      }    }  } catch (  Throwable e) {    failTask(e);  }}  }
class C{  public void cloneExecutionUnitFrom(ExecutionUnit original,boolean forParallelExecution){  Map<String,Operator> clonedOperatorsByName=new HashMap<String,Operator>();  for (  Operator originalChild : original.operators) {    Operator clonedOperator=originalChild.cloneOperator(originalChild.getName(),forParallelExecution);    addOperator(clonedOperator,!forParallelExecution);    clonedOperatorsByName.put(originalChild.getName(),clonedOperator);  }  cloneConnections(original.getInnerSources(),original,clonedOperatorsByName);  for (  Operator op : original.operators) {    cloneConnections(op.getOutputPorts(),original,clonedOperatorsByName);  }  original.getInnerSources().unlockPortExtenders();  original.getInnerSinks().unlockPortExtenders();  for (  Operator op : this.operators) {    op.getInputPorts().unlockPortExtenders();    op.getOutputPorts().unlockPortExtenders();  }  if (original.userData != null) {    for (    String key : original.userData.keySet()) {      UserData<Object> data=original.userData.get(key);      if (data != null) {        setUserData(key,data.copyUserData(this));      }    }  }  this.expanded=original.expanded;}  }
class C{  public String debugDump(int indent){  int save=indentation;  indentation=indent;  String retval=this.debugDump();  indentation=save;  return retval;}  }
class C{  public boolean isSynchronous(){  return _synch;}  }
class C{  public static Boolean isHiResDisplay(){  return isHiResDisplay;}  }
class C{  @Override public void openElement(String tagName){  XMLElement newElement=new XMLElement();  newElement.setName(tagName);  current.addChild(newElement);  stack.push(current);  current=newElement;}  }
class C{  public Swarm deploy(Archive<?> deployment) throws Exception {  if (this.server == null) {    throw SwarmMessages.MESSAGES.containerNotStarted("deploy(Archive<?>)");  }  this.server.deployer().deploy(deployment);  return this;}  }
class C{  public void parseShopping(String file) throws FileNotFoundException {  File f=new File(file);  if (!f.exists()) {    throw new FileNotFoundException("Could not find " + file);  }  MyShoppingSink mss=new MyShoppingSink(this.ct);  XmlReader xr=new XmlReader(f,false,CompressionMethod.None);  FastXmlReader fxr=new FastXmlReader(f,false,CompressionMethod.None);  xr.setSink(mss);  xr.run();  this.shops=mss.getFacilities();  this.shopAttributes=mss.getFacilityAttributes();  log.info("Assigning link Ids...");  for (  Id id : this.shops.getFacilities().keySet()) {    ActivityFacilityImpl af=(ActivityFacilityImpl)this.shops.getFacilities().get(id);    Id linkId=linkQT.getClosest(af.getCoord().getX(),af.getCoord().getY());    af.setLinkId(linkId);  }}  }
class C{  public TaskList createFullCopyOfApplication(URI id,VolumeGroupFullCopyCreateParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_CREATE_FULL_COPY_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  private final void consumeExpected(char expected) throws javax.xml.transform.TransformerException {  if (tokenIs(expected)) {    nextToken();  } else {    error(XPATHErrorResources.ER_EXPECTED_BUT_FOUND,new Object[]{String.valueOf(expected),m_token});    throw new XPathProcessorException(CONTINUE_AFTER_FATAL_ERROR);  }}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Insets insets=getBorderInsets(c);  Color oldColor=g.getColor();  g.translate(x,y);  if (tileIcon != null) {    color=(tileIcon.getIconWidth() == -1) ? Color.gray : null;  }  if (color != null) {    g.setColor(color);    g.fillRect(0,0,width - insets.right,insets.top);    g.fillRect(0,insets.top,insets.left,height - insets.top);    g.fillRect(insets.left,height - insets.bottom,width - insets.left,insets.bottom);    g.fillRect(width - insets.right,0,insets.right,height - insets.bottom);  } else   if (tileIcon != null) {    int tileW=tileIcon.getIconWidth();    int tileH=tileIcon.getIconHeight();    paintEdge(c,g,0,0,width - insets.right,insets.top,tileW,tileH);    paintEdge(c,g,0,insets.top,insets.left,height - insets.top,tileW,tileH);    paintEdge(c,g,insets.left,height - insets.bottom,width - insets.left,insets.bottom,tileW,tileH);    paintEdge(c,g,width - insets.right,0,insets.right,height - insets.bottom,tileW,tileH);  }  g.translate(-x,-y);  g.setColor(oldColor);}  }
class C{  public static void init(){  TABBED_CONNECTIONS.clear();  TABBED_CONNECTIONS.add(new Vector<BeanConnection>());}  }
class C{  public void assertEvictionCount(int expected){  TestCopyOnWrite.assertEquals("evictionCount",expected,nevicted);}  }
class C{  public void testPingPong2xMtuWithNaglingOff(){  PseudoTcpTestPingPong test=new PseudoTcpTestPingPong();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setOptNagling(false);  test.doTestPingPong(2000,5);}  }
class C{  public ccQuad3 tile(ccGridSize pos){  int idx=(gridSize_.y * pos.x + pos.y) * 4 * 3;  float[] vertArray=new float[ccQuad3.size];  for (int i=0; i < ccQuad3.size; i++) {    vertArray[i]=vertices.get(idx + i);  }  return new ccQuad3(vertArray);}  }
class C{  public void onGreenButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(GREEN_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_green));      storeRequestId(requestId,GREEN_BUTTON);    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.greenbutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  private static boolean isSatisfiedOrderListFormat(Editable editable,int start){  int startPosition=EditUtils.findBeforeNewLineChar(editable,start) + 1;  int endPosition=EditUtils.findNextNewLineCharCompat(editable,start);  MDOrderListSpan[] mdOrderListSpans=editable.getSpans(startPosition,endPosition,MDOrderListSpan.class);  if (mdOrderListSpans != null && mdOrderListSpans.length > 0) {    return false;  }  CharSequence charSequence=editable.subSequence(startPosition,endPosition);  Pattern p=Pattern.compile("^( *)(\\d+)\\. (.*?)$");  Matcher m=p.matcher(charSequence);  return m.matches();}  }
class C{  public void testNextDouble(){  Random r=new Random();  double f=r.nextDouble();  int i=0;  while (i < NCALLS && r.nextDouble() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public void testDoConfigureSetsDefaultConfigurationVersion() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.CONFIGURATION_VERSION),"//weblogic:configuration-version",config);}  }
class C{  public void testHotDeployFailureExpandedWar(){  java.io.File warFile=new java.io.File("target/test-artifacts/simple-war");  WAR war=(WAR)factory.createDeployable("jonas4x",warFile.getAbsolutePath(),DeployableType.WAR);  war.setContext("testExpandedWarContext");  setupAdminHotDeploymentFailure();  try {    deployer.deploy(war);    fail("No CargoException raised");  } catch (  CargoException expected) {    assertFalse(fileHandler.exists(deployer.getDeployableDir(war) + "/testExpandedWar"));    assertTrue(fileHandler.exists(deployer.getDeployableDir(war) + "/testExpandedWarContext"));  }}  }
class C{  public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){  int programHandle=GLES20.glCreateProgram();  if (programHandle != 0) {    GLES20.glAttachShader(programHandle,vertexShaderHandle);    GLES20.glAttachShader(programHandle,fragmentShaderHandle);    if (attributes != null) {      final int size=attributes.length;      for (int i=0; i < size; i++) {        GLES20.glBindAttribLocation(programHandle,i,attributes[i]);      }    }    GLES20.glLinkProgram(programHandle);    final int[] linkStatus=new int[1];    GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] == 0) {      Log.e(TAG,"Error compiling program: " + GLES20.glGetProgramInfoLog(programHandle));      GLES20.glDeleteProgram(programHandle);      programHandle=0;    }  }  if (programHandle == 0) {    throw new RuntimeException("Error creating program.");  }  return programHandle;}  }
class C{  public long length(){  try {    long len=fileLength;    if (SysProperties.CHECK2) {      len=file.size();      if (len != fileLength) {        DbException.throwInternalError("file " + name + " length "+ len+ " expected "+ fileLength);      }    }    if (SysProperties.CHECK2 && len % Constants.FILE_BLOCK_SIZE != 0) {      long newLength=len + Constants.FILE_BLOCK_SIZE - (len % Constants.FILE_BLOCK_SIZE);      file.truncate(newLength);      fileLength=newLength;      DbException.throwInternalError("unaligned file length " + name + " len "+ len);    }    return len;  } catch (  IOException e) {    throw DbException.convertIOException(e,name);  }}  }
class C{  public E push(E value){  elements.add(value);  return value;}  }
class C{  public int diff_commonPrefix(String text1,String text2){  int n=Math.min(text1.length(),text2.length());  for (int i=0; i < n; i++) {    if (text1.charAt(i) != text2.charAt(i)) {      return i;    }  }  return n;}  }
class C{  public final TextBuilder append(CharSequence csq){  return (csq == null) ? append("null") : append(csq,0,csq.length());}  }
class C{  public Folder initFolderService(ActionRequest actionRequest,ThemeDisplay themeDisplay){  String dateFolderName=DateTimeUtil.getStringDate();  Folder folder=null;  try {    long rootFolderId=0;    long parentFolderId=0;    boolean isRootFolderExist=isFolderExist(themeDisplay.getScopeGroupId(),0,ROOT_FOLDER_NAME);    ServiceContext serviceContext=ServiceContextFactory.getInstance(actionRequest);    serviceContext.setAddGroupPermissions(true);    serviceContext.setAddGuestPermissions(true);    if (isRootFolderExist) {      Folder rootFolder=null;      rootFolder=DLAppServiceUtil.getFolder(themeDisplay.getScopeGroupId(),0,ROOT_FOLDER_NAME);      rootFolderId=rootFolder.getFolderId();    } else {      Folder rootFolder=DLAppServiceUtil.addFolder(themeDisplay.getScopeGroupId(),0,ROOT_FOLDER_NAME,"All documents of OpenCPS",serviceContext);      rootFolderId=rootFolder.getFolderId();    }    boolean isParentFolderExist=isFolderExist(themeDisplay.getScopeGroupId(),rootFolderId,PARENT_FOLDER_NAME);    if (isParentFolderExist) {      Folder parentFolder=DLAppServiceUtil.getFolder(themeDisplay.getScopeGroupId(),rootFolderId,PARENT_FOLDER_NAME);      parentFolderId=parentFolder.getFolderId();    } else {      Folder parentFolder=DLAppServiceUtil.addFolder(themeDisplay.getScopeGroupId(),rootFolderId,PARENT_FOLDER_NAME,"All documents of Service Template File",serviceContext);      parentFolderId=parentFolder.getFolderId();    }    boolean isDateFolderExist=isFolderExist(themeDisplay.getScopeGroupId(),parentFolderId,dateFolderName);    Folder dateFolder=null;    if (isDateFolderExist) {      dateFolder=DLAppServiceUtil.getFolder(themeDisplay.getScopeGroupId(),parentFolderId,dateFolderName);    } else {      dateFolder=DLAppServiceUtil.addFolder(themeDisplay.getScopeGroupId(),parentFolderId,dateFolderName,"All documents of Service Template File upload in a day",serviceContext);    }    folder=dateFolder;  } catch (  Exception e) {  }  return folder;}  }
class C{  public static Color decode(String color,Color defaultColor){  if (color == null) {    return defaultColor;  }  Color c=getNamedColor(color);  if (c == null) {    try {      c=Color.decode(color);    } catch (    NumberFormatException ex) {      return defaultColor;    }  }  return c;}  }
class C{  public static void log(String TAG,String msg){  log(TAG,msg,3,null);}  }
class C{  private void clearTypeSubstitutions(final BaseType deletedType) throws CouldntDeleteException {  final Set<TypeSubstitution> substitutions=typesContainer.deleteSubstitutionsByType(deletedType);  if (!substitutions.isEmpty()) {    for (    final TypeSubstitution substitution : substitutions) {      backend.deleteTypeSubstitution(substitution);    }    notifySubstitutionsDeleted(substitutions);  }}  }
class C{  protected SVGOMFEDisplacementMapElement(){}  }
class C{  public static void showPosition(File file,int line,int column){  try {    String ln=getLine(file,line);    if (ln != null) {      err(ln);      if (column < 0)       return;      String t="^";      for (int i=0; i < column; i++)       t=" " + t;      err(t);    }  } catch (  IOException e) {  }}  }
class C{  private TMember createErrorPlaceholder(String memberName){  if (writeAccess) {    return TypeUtils.createTSetter(memberName,null,TypeRefsFactory.eINSTANCE.createUnknownTypeRef());  } else {    final TGetter g=TypesFactory.eINSTANCE.createTGetter();    g.setName(memberName);    g.setDeclaredTypeRef(TypeRefsFactory.eINSTANCE.createUnknownTypeRef());    return g;  }}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public void dispose(){}  }
class C{  public DeleteMonitoredItemsResponse clone(){  DeleteMonitoredItemsResponse result=new DeleteMonitoredItemsResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public void replaceStopFacilityInAllRoutes(TransitStopFacility toReplace,TransitStopFacility replaceWith){  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      replaceStopFacilityInRoute(route,toReplace,replaceWith);    }  }}  }
class C{  public boolean SP2On(String mac){  JsonObject initJsonObjectParams=broadlinkStandardParams(BroadlinkConstants.CMD_SP2_CONTROL_ID,BroadlinkConstants.CMD_SP2_CONTROL);  initJsonObjectParams.addProperty("status",1);  initJsonObjectParams.addProperty("mac",mac);  JsonObject out=broadlinkExecuteCommand(initJsonObjectParams);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  boolean shouldEDTSleep(){  Form current=impl.getCurrentForm();  return ((current == null || (!current.hasAnimations())) && (animationQueue == null || animationQueue.size() == 0) && inputEventStackPointer == 0 && (!impl.hasPendingPaints()) && hasNoSerialCallsPending() && !keyRepeatCharged && !longPointerCharged) || (isMinimized() && hasNoSerialCallsPending());}  }
class C{  public void put(int key,int value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=Math.max(mSize + 1,mKeys.length * 2);      int[] nkeys=new int[n];      int[] nvalues=new int[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  private void refreshTerrainFromList(){  if (lisTerrain.getSelectedIndex() == -1) {    return;  }  ITerrain terrain=Terrains.getTerrainFactory().createTerrain(lisTerrain.getSelectedValue());  terrain=curHex.getTerrain(terrain.getType());  choTerrainType.setSelectedItem(Terrains.getName(terrain.getType()));  texTerrainLevel.setText(Integer.toString(terrain.getLevel()));  cheTerrExitSpecified.setSelected(terrain.hasExitsSpecified());  texTerrExits.setText(Integer.toString(terrain.getExits()));}  }
class C{  public static byte[] SHA1(final byte[] message,final int offset,final int length){  MessageDigest digest;  try {    digest=MessageDigest.getInstance("SHA-1");    digest.update(message,offset,length);    final byte[] sha1=digest.digest();    return sha1;  } catch (  final NoSuchAlgorithmException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }  }  return null;}  }
class C{  public void testForkTimedGet(){  testForkTimedGet(mainPool());}  }
class C{  @Override public void process(Map<K,V> tuple){  if (!result) {    return;  }  V val=tuple.get(getKey());  if (val == null) {    return;  }  result=compareValue(val.doubleValue());}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public static double turnAngle(S2Point a,S2Point b,S2Point c){  double outAngle=S2Point.crossProd(b,a).angle(S2Point.crossProd(c,b));  return (robustCCW(a,b,c) > 0) ? outAngle : -outAngle;}  }
class C{  public void closeConnection(String userId){  this.pcClient.closeConnection(userId);}  }
class C{  private void runFindBugs(final FindBugs2 findBugs){  if (DEBUG) {    FindbugsPlugin.log("Running findbugs in thread " + Thread.currentThread().getName());  }  System.setProperty("findbugs.progress","true");  try {    findBugs.execute();  } catch (  InterruptedException e) {    if (DEBUG) {      FindbugsPlugin.getDefault().logException(e,"Worker interrupted");    }    Thread.currentThread().interrupt();  }catch (  IOException e) {    FindbugsPlugin.getDefault().logException(e,"Error performing FindBugs analysis");  } finally {    findBugs.dispose();  }}  }
class C{  public void addSample(T sample,long number){  this.n=this.n + number;  long sampleFreq=number;  if (freqDist.containsKey(sample)) {    sampleFreq=freqDist.get(sample) + number;  }  freqDist.put(sample,sampleFreq);  if (sampleFreq > maxFreq) {    maxFreq=sampleFreq;    maxSample=sample;  }}  }
class C{  public static List<EntityCondition> createConditionList(Map<String,? extends Object> parameters,List<ModelField> fieldList,Map<String,Object> queryStringMap,Delegator delegator,Map<String,?> context){  Set<String> processed=new LinkedHashSet<String>();  Set<String> keys=new LinkedHashSet<String>();  Map<String,ModelField> fieldMap=new LinkedHashMap<String,ModelField>();  for (  ModelField modelField : fieldList) {    fieldMap.put(modelField.getName(),modelField);  }  List<EntityCondition> result=new LinkedList<EntityCondition>();  for (  Map.Entry<String,? extends Object> entry : parameters.entrySet()) {    String parameterName=entry.getKey();    if (processed.contains(parameterName)) {      continue;    }    keys.clear();    String fieldName=parameterName;    Object fieldValue=null;    String operation=null;    boolean ignoreCase=false;    if (parameterName.endsWith("_ic") || parameterName.endsWith("_op")) {      fieldName=parameterName.substring(0,parameterName.length() - 3);    } else     if (parameterName.endsWith("_value")) {      fieldName=parameterName.substring(0,parameterName.length() - 6);    }    String key=fieldName.concat("_ic");    if (parameters.containsKey(key)) {      keys.add(key);      ignoreCase="Y".equals(parameters.get(key));    }    key=fieldName.concat("_op");    if (parameters.containsKey(key)) {      keys.add(key);      operation=(String)parameters.get(key);    }    key=fieldName.concat("_value");    if (parameters.containsKey(key)) {      keys.add(key);      fieldValue=parameters.get(key);    }    if (fieldName.endsWith("_fld0") || fieldName.endsWith("_fld1")) {      if (parameters.containsKey(fieldName)) {        keys.add(fieldName);      }      fieldName=fieldName.substring(0,fieldName.length() - 5);    }    if (parameters.containsKey(fieldName)) {      keys.add(fieldName);    }    processed.addAll(keys);    ModelField modelField=fieldMap.get(fieldName);    if (modelField == null) {      continue;    }    if (fieldValue == null) {      fieldValue=parameters.get(fieldName);    }    if (ObjectType.isEmpty(fieldValue) && !"empty".equals(operation)) {      continue;    }    result.add(createSingleCondition(modelField,operation,fieldValue,ignoreCase,delegator,context));    for (    String mapKey : keys) {      queryStringMap.put(mapKey,parameters.get(mapKey));    }  }  return result;}  }
class C{  public void dismissCard(boolean exitRight){  if (onCardChangeListener != null) {    onCardChangeListener.onCardDismissed(currentItem,exitRight);  }  populatePending=false;  reversePos=exitRight;  setCurrentItemInternal(currentItem + 1,true,false);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.SCRIPT_IM__SYMBOL_TABLE:    return symbolTable != null;}return super.eIsSet(featureID);}  }
class C{  public boolean isStaticMember(){  return staticMember;}  }
class C{  public CertificateVerify(HandshakeIODataStream in,int length) throws IOException {  if (length == 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateVerify");  } else {    if (in.readUint16() != length - 2) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateVerify");    }    signedHash=in.read(length - 2);  }  this.length=length;}  }
class C{  public void profileProperty(String key,String value){  addArg("profileProperties",FileMisc.noQuote(key) + "=" + FileMisc.noQuote(value));}  }
class C{  public void putMethodAnalysis(Class<?> analysisClass,MethodDescriptor methodDescriptor,Object object){  if (object == null) {    throw new IllegalArgumentException();  }  Map<MethodDescriptor,Object> objectMap=getObjectMap(analysisClass);  objectMap.put(methodDescriptor,object);}  }
class C{  public boolean isBreakable(){  return breakable;}  }
class C{  public static String readableFileSize(long size){  if (size <= 0)   return "0";  final String[] units=new String[]{"B","kB","MB","GB","TB"};  int digitGroups=(int)(Math.log10(size) / Math.log10(1024));  return new DecimalFormat("#,##0.#").format(size / Math.pow(1024,digitGroups)) + " " + units[digitGroups];}  }
class C{  public HostAddress(DerValue encoding) throws Asn1Exception, IOException {  DerValue der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x00) {    addrType=der.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x01) {    address=der.getData().getOctetString();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  public boolean first() throws SQLException {  checkCursorMove();  boolean result=fbFetcher.first();  if (result)   notifyRowUpdater();  return result;}  }
class C{  public Set<ObjectName> queryNames(ObjectName name,QueryExp query){  return mbsInterceptor.queryNames(cloneObjectName(name),query);}  }
class C{  public void dump(String context) throws KeyStoreException, NoSuchAlgorithmException {  dump(context,keyStore,keyPassword);}  }
class C{  @Override public void returnQuota(String resourceTicketId,QuotaCost cost) throws ResourceTicketNotFoundException {  ResourceTicketService.Patch patch=new ResourceTicketService.Patch();  patch.patchtype=ResourceTicketService.Patch.PatchType.USAGE_RETURN;  patch.cost=new HashMap<>();  for (  String key : cost.getCostKeys()) {    QuotaLineItem costItem=new QuotaLineItem();    costItem.setKey(key);    costItem.setValue(cost.getCost(key).getValue());    costItem.setUnit(cost.getCost(key).getUnit());    patch.cost.put(costItem.getKey(),costItem);  }  patchResourceTicketService(resourceTicketId,patch);}  }
class C{  private String[] toArrayIfNotNull(List<String> list){  if (list == null) {    return null;  }  return list.toArray(new String[list.size()]);}  }
class C{  public void load(Element element,Object o){  log.error("method with two args invoked");}  }
class C{  public List<AbstractCondition> toConditionsList(){  List<AbstractCondition> list=new ArrayList<>();  for (  Node<AbstractCondition> node : toList()) {    list.add(node.getData());  }  return list;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.036 -0500",hash_original_method="785F4CCF429F72C42E20A1AABCB6C5CE",hash_generated_method="075905FDD441758AAED077D2A076C316") protected void clearError(){  ioError=false;}  }
class C{  public void testNumberOfGeneratedTokens(){  String s;  String[] result;  s="HOWEVER, the egg only got larger and larger, and more and more human";  try {    result=Tokenizer.tokenize(m_Tokenizer,new String[]{"-min","1","-max","1",s});    assertEquals("number of tokens differ (1)",13,result.length);  } catch (  Exception e) {    fail("Error tokenizing string '" + s + "'!");  }  try {    result=Tokenizer.tokenize(m_Tokenizer,new String[]{"-min","2","-max","2",s});    assertEquals("number of tokens differ (2)",12,result.length);  } catch (  Exception e) {    fail("Error tokenizing string '" + s + "'!");  }  try {    result=Tokenizer.tokenize(m_Tokenizer,new String[]{"-min","1","-max","3",s});    assertEquals("number of tokens differ (3)",36,result.length);  } catch (  Exception e) {    fail("Error tokenizing string '" + s + "'!");  }  try {    s="cannot split";    result=Tokenizer.tokenize(m_Tokenizer,new String[]{"-min","1","-max","3",s});    assertEquals("number of tokens differ (4)",3,result.length);  } catch (  Exception e) {    fail("Error tokenizing string '" + s + "'!");  }}  }
class C{  public Object referenceInsert(String s,Object o){  if (o == null) {    ThreadLocalToolkit.log(new TemplateReferenceIsNull(s));  }  return o;}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,3,4}) public static void arraycopy(double[] src,int srcIdx,double[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    if ((src != dst || srcIdx > dstIdx) && DOUBLE_BULK_COPY_SUPPORTED) {      if (NEEDS_DOUBLE_ASTORE_BARRIER || NEEDS_DOUBLE_ALOAD_BARRIER) {        Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_DOUBLE);        Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_DOUBLE);        Barriers.doubleBulkCopy(src,srcOffset,dst,dstOffset,len << LOG_BYTES_IN_DOUBLE);      } else {        Memory.arraycopy64Bit(src,srcIdx,dst,dstIdx,len);      }    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  protected WizardBranchController(WizardPage[] pages){  this(WizardPage.createWizardPanelProvider(pages));}  }
class C{  private void doRun() throws IOException, InterruptedException {  SocketHelper helper=new SocketHelper();  while (shutdownRequested == false) {synchronized (this) {      String echoValue=helper.echo(socket.getSocket(),clientName);      if (!clientName.equals(echoValue))       throw new RuntimeException("Echo returned unexpected value: client=" + clientName + " echoValue="+ echoValue);      echoCount++;    }    Thread.sleep(sleepMillis);  }}  }
class C{  public ConditionalTable(String headVar){  table=new HashMap<Assignment,IndependentDistribution>();  this.headVar=headVar;  conditionalVars=new HashSet<String>();}  }
class C{  public static double pow(double d,int e){  if (e == 0) {    return 1.0;  } else   if (e < 0) {    e=-e;    d=1.0 / d;  }  final int splitFactor=0x8000001;  final double cd=splitFactor * d;  final double d1High=cd - (cd - d);  final double d1Low=d - d1High;  double resultHigh=1;  double resultLow=0;  double d2p=d;  double d2pHigh=d1High;  double d2pLow=d1Low;  while (e != 0) {    if ((e & 0x1) != 0) {      final double tmpHigh=resultHigh * d2p;      final double cRH=splitFactor * resultHigh;      final double rHH=cRH - (cRH - resultHigh);      final double rHL=resultHigh - rHH;      final double tmpLow=rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);      resultHigh=tmpHigh;      resultLow=resultLow * d2p + tmpLow;    }    final double tmpHigh=d2pHigh * d2p;    final double cD2pH=splitFactor * d2pHigh;    final double d2pHH=cD2pH - (cD2pH - d2pHigh);    final double d2pHL=d2pHigh - d2pHH;    final double tmpLow=d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);    final double cTmpH=splitFactor * tmpHigh;    d2pHigh=cTmpH - (cTmpH - tmpHigh);    d2pLow=d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);    d2p=d2pHigh + d2pLow;    e>>=1;  }  return resultHigh + resultLow;}  }
class C{  private String iteratorToString(OcrResultIterator i){  StringBuilder sb=new StringBuilder();  OcrResultIterator iter=new OcrResultIterator(i);  while (iter.hasNext()) {    sb.append(iter.getCurrentChar().getValue());    boolean newLine=iter.moveToNext();    if (newLine) {      sb.append('\n');    }  }  return sb.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getPlaylists();}  }
class C{  public boolean initialFragment(){  return !getNodes().isEmpty() && getNodes().get(0).getCorrelationIds().isEmpty();}  }
class C{  @VisibleForTesting boolean uploadMarker(String title,String description,String iconUrl,Location location){  if (isCancelled()) {    return false;  }  try {    if (!SendMapsUtils.uploadMarker(mapId,title,description,iconUrl,location,mapsClient,authToken,mapsGDataConverter)) {      Log.d(TAG,"Unable to upload marker");      return false;    }  } catch (  ParseException e) {    Log.d(TAG,"Unable to upload marker",e);    return false;  }catch (  HttpException e) {    Log.d(TAG,"Unable to upload marker",e);    return false;  }catch (  IOException e) {    Log.d(TAG,"Unable to upload marker",e);    return false;  }  return true;}  }
class C{  public LineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);  pointsChart=new ScatterChart(dataset,renderer);}  }
class C{  public void addRemoveAndGetTimeNanos(long duration){  rmvTimeNanos.addAndGet(duration);  getTimeNanos.addAndGet(duration);  if (delegate != null)   delegate.addRemoveAndGetTimeNanos(duration);}  }
class C{  public static float convertSVGNumber(String s){  return Float.parseFloat(s);}  }
class C{  @Override public int numElements() throws Exception {  if (m_zeroR != null) {    return 1;  }  return numNodes();}  }
class C{  @Override public void makeItemSelectable(final ILayer data,final boolean b){  data.getDefinition().setSelectable(b);}  }
class C{  public static IntTag parseInt(String mojangson) throws MojangsonParseException {  try {    return new IntTag(Integer.valueOf(mojangson));  } catch (  NumberFormatException nfe) {    throw new MojangsonParseException("\'" + mojangson + "\'",MojangsonParseException.ParseExceptionReason.INVALID_FORMAT_NUM);  }}  }
class C{  public Object readResolve(){  if (mode == null) {    mode=Node.Mode.NORMAL;  }  if (retentionStrategy == null) {    retentionStrategy=new DockerOnceRetentionStrategy(10);  }  try {    labelSet=Label.parse(labelString);  } catch (  Throwable t) {    LOG.error("Can't parse labels: {}",t);  }  return this;}  }
class C{  private void failTask(Collection<Throwable> es){  ServiceUtils.logSevere(this,es);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,es.iterator().next()));}  }
class C{  public void delete(){  isDeleted=true;}  }
class C{  @Override public byte[] decrypt(EncryptedPrivateKey privateKeyToDecode,KeyParameter aesKey) throws KeyCrypterException {  checkNotNull(privateKeyToDecode);  checkNotNull(aesKey);  try {    ParametersWithIV keyWithIv=new ParametersWithIV(new KeyParameter(aesKey.getKey()),privateKeyToDecode.getInitialisationVector());    BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));    cipher.init(false,keyWithIv);    byte[] cipherBytes=privateKeyToDecode.getEncryptedBytes();    byte[] decryptedBytes=new byte[cipher.getOutputSize(cipherBytes.length)];    final int length1=cipher.processBytes(cipherBytes,0,cipherBytes.length,decryptedBytes,0);    final int length2=cipher.doFinal(decryptedBytes,length1);    return Arrays.copyOf(decryptedBytes,length1 + length2);  } catch (  Exception e) {    throw new KeyCrypterException("Could not decrypt bytes",e);  }}  }
class C{  @Override public void addNetworkChangeEvent(final NetworkChangeEvent event){  this.networkChangeEvents.add(event);  for (  Link link : event.getLinks()) {    if (link instanceof TimeVariantLinkImpl) {      ((TimeVariantLinkImpl)link).applyEvent(event);    } else {      throw new IllegalArgumentException("Link " + link.getId().toString() + " is not TimeVariant.");    }  }}  }
class C{  public void testMT() throws Exception {  tryMT(3);}  }
class C{  public void incrementCount(){  this.count++;}  }
class C{  public SQLNonTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>(6);  result.addElement(new Option("\tThe regular expression that the attribute names must match.\n" + "\t(default: ([\\s\\S]+))","find",1,"-find <regexp>"));  result.addElement(new Option("\tThe string to replace the regular expression of matching attributes with.\n" + "\tCannot be used in conjunction with '-remove'.\n" + "\t(default: $0)","replace",1,"-replace <string>"));  result.addElement(new Option("\tIn case the matching string needs to be removed instead of replaced.\n" + "\tCannot be used in conjunction with '-replace <string>'.\n" + "\t(default: off)","remove",0,"-remove"));  result.addElement(new Option("\tReplaces all occurrences instead of just the first.\n" + "\t(default: only first occurrence)","all",0,"-all"));  result.addElement(new Option("\tThe attribute range to work on.\n" + "This is a comma separated list of attribute indices, with " + "\"first\" and \"last\" valid values.\n"+ "\tSpecify an inclusive range with \"-\".\n"+ "\tE.g: \"first-3,5,6-10,last\".\n"+ "\t(default: first-last)","R",1,"-R <range>"));  result.addElement(new Option("\tInverts the attribute selection range.\n" + "\t(default: off)","V",0,"-V"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public static void save(NetworkForm network){  network.validate("network");  if (Validation.hasErrors()) {    error(network);  }  try {    network.save();    flash.success(MessagesUtils.get(SAVED_SUCCESS,network.name));    String virtualArrayId=params.get(VIRTUAL_ARRAY_PARAM);    if (StringUtils.isNotBlank(virtualArrayId)) {      VirtualArrays.networks(virtualArrayId);    }    backToReferrer();    list();  } catch (  ViPRException e) {    flashException(e);    error(network);  }}  }
class C{  private void onSantaServiceStateUpdate(int state){switch (state) {case SantaServiceMessages.STATUS_IDLE:    mWaitingForApi=false;  stateData();break;case SantaServiceMessages.STATUS_IDLE_NODATA:mWaitingForApi=true;stateNoData();break;case SantaServiceMessages.STATUS_ERROR_NODATA:mWaitingForApi=true;stateNoData();case SantaServiceMessages.STATUS_ERROR:mWaitingForApi=true;stateNoData();case SantaServiceMessages.STATUS_PROCESSING:mWaitingForApi=true;break;}}  }
class C{  public boolean isDrawCirclesEnabled(){  return mDrawCircles;}  }
class C{  protected void readTrueData(ArrayDataInput i) throws FitsException {  try {    this.table.read(i);    i.skipAllBytes(this.heapOffset);    this.heap.read(i);    this.heapReadFromStream=true;  } catch (  IOException e) {    throw new FitsException("Error reading binary table data:" + e,e);  }  try {    i.skipAllBytes(FitsUtil.padding(getTrueSize()));  } catch (  EOFException e) {    throw new PaddingException("Error skipping padding after binary table",this,e);  }catch (  IOException e) {    throw new FitsException("Error reading binary table data padding",e);  }}  }
class C{  public static double[][] minus(double[][] v1,double[][] v2){  checkRowDimension(v2,v1.length);  checkColumnDimension(v2,v1[0].length);  double[][] array=new double[v1.length][v1[0].length];  for (int i=0; i < v1.length; i++)   for (int j=0; j < v1[0].length; j++)   array[i][j]=v1[i][j] - v2[i][j];  return array;}  }
class C{  public String patternTipText(){  return "The pattern for generating the data.";}  }
class C{  public void eraseThreadLocals(){  UNSAFE.putObject(this,THREADLOCALS,null);  UNSAFE.putObject(this,INHERITABLETHREADLOCALS,null);}  }
class C{  protected int weightedDistribution(int[] weights){  int sum=0;  for (  int weight : weights) {    sum+=weight;  }  int val=(int)Math.floor(m_random.nextDouble() * sum);  for (int i=0; i < weights.length; i++) {    val-=weights[i];    if (val < 0) {      return i;    }  }  return -1;}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){}  }
class C{  public char[] genericSignature(){  StringBuffer sig=new StringBuffer(10);  sig.append(this.sourceName).append(':');  int interfaceLength=this.superInterfaces == null ? 0 : this.superInterfaces.length;  if (interfaceLength == 0 || this.firstBound == this.superclass) {    if (this.superclass != null)     sig.append(this.superclass.genericTypeSignature());  }  for (int i=0; i < interfaceLength; i++) {    sig.append(':').append(this.superInterfaces[i].genericTypeSignature());  }  int sigLength=sig.length();  char[] genericSignature=new char[sigLength];  sig.getChars(0,sigLength,genericSignature,0);  return genericSignature;}  }
class C{  public boolean add(Object o){  processQueue();  return super.add(WeakElement.create(o,this.queue));}  }
class C{  public Vertex evaluateADD(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,3,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex source=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex relationship=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  Vertex target=evaluateExpression(arguments.get(2).getTarget(),variables,network,startTime,maxTime,stack);  source.addRelationship(relationship,target);  return source;}  }
class C{  public boolean isWhitelisted(GHUser user){  return !isMyselfUser(user) && usersSet.contains(user.getLogin()) || isInWhitelistedOrg(user);}  }
class C{  public static <T>T checkNotNull(T reference,String errorMessageTemplate,Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public AppUser retrieveUserInfo(String username){  Connection conn=null;  try {    conn=getConnection();    return this.retrieveUserInfo(conn,username);  } catch (  Exception ex) {  } finally {    DBUtils.close(conn);  }  return null;}  }
class C{  public void preCheckpointStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].preCheckpointStatistics(state);}  }
class C{  @Override public GraphicContext createGraphicContext(){  GraphicContext context=super.createGraphicContext();  if (definesScaleGrid()) {    ScalingGrid scalingGrid=new ScalingGrid();    scalingGrid.scaleGridLeft=scaleGridLeft;    scalingGrid.scaleGridTop=scaleGridTop;    scalingGrid.scaleGridRight=scaleGridRight;    scalingGrid.scaleGridBottom=scaleGridBottom;    context.scalingGrid=scalingGrid;  }  return context;}  }
class C{  public InlineQueryResultVoice build(){  return new InlineQueryResultVoice(id,voice_url,title,voice_duration,reply_markup,input_message_content,caption);}  }
class C{  public VirtualBaseType createVirtualBaseType(){  VirtualBaseTypeImpl virtualBaseType=new VirtualBaseTypeImpl();  return virtualBaseType;}  }
class C{  protected static void sampleMethodD(long n,long N,int count,long low,long[] values,int fromIndex,RandomEngine randomGenerator){  double nreal, Nreal, ninv, nmin1inv, U, X, Vprime, y1, y2, top, bottom, negSreal, qu1real;  long qu1, threshold, t, limit;  long S;  long chosen=-1 + low;  long negalphainv=-13;  nreal=n;  ninv=1.0 / nreal;  Nreal=N;  Vprime=Math.exp(Math.log(randomGenerator.raw()) * ninv);  qu1=-n + 1 + N;  qu1real=-nreal + 1.0 + Nreal;  threshold=-negalphainv * n;  while (n > 1 && count > 0 && threshold < N) {    nmin1inv=1.0 / (-1.0 + nreal);    for (; ; ) {      for (; ; ) {        X=Nreal * (-Vprime + 1.0);        S=(long)X;        if (S < qu1)         break;        Vprime=Math.exp(Math.log(randomGenerator.raw()) * ninv);      }      U=randomGenerator.raw();      negSreal=-S;      y1=Math.exp(Math.log(U * Nreal / qu1real) * nmin1inv);      Vprime=y1 * (-X / Nreal + 1.0) * (qu1real / (negSreal + qu1real));      if (Vprime <= 1.0)       break;      y2=1.0;      top=-1.0 + Nreal;      if (n - 1 > S) {        bottom=-nreal + Nreal;        limit=-S + N;      } else {        bottom=-1.0 + negSreal + Nreal;        limit=qu1;      }      for (t=N - 1; t >= limit; t--) {        y2=(y2 * top) / bottom;        top--;        bottom--;      }      if (Nreal / (-X + Nreal) >= y1 * Math.exp(Math.log(y2) * nmin1inv)) {        Vprime=Math.exp(Math.log(randomGenerator.raw()) * nmin1inv);        break;      }      Vprime=Math.exp(Math.log(randomGenerator.raw()) * ninv);    }    chosen+=S + 1;    values[fromIndex++]=chosen;    count--;    N-=S + 1;    Nreal=negSreal + (-1.0 + Nreal);    n--;    nreal--;    ninv=nmin1inv;    qu1=-S + qu1;    qu1real=negSreal + qu1real;    threshold+=negalphainv;  }  if (count > 0) {    if (n > 1) {      sampleMethodA(n,N,count,chosen + 1,values,fromIndex,randomGenerator);    } else {      S=(long)(N * Vprime);      chosen+=S + 1;      values[fromIndex++]=chosen;    }  }}  }
class C{  boolean isVisibleOrAdding(){  final AppWindowToken atoken=mAppToken;  return (mHasSurface || (!mRelayoutCalled && mViewVisibility == View.VISIBLE)) && mPolicyVisibility && !mAttachedHidden&& (atoken == null || !atoken.hiddenRequested)&& !mExiting&& !mDestroying;}  }
class C{  public static void assignPowerState(ComputeState computeState,String vmStatus){switch (vmStatus) {case INSTANCE_STATUS_RUNNING:    computeState.powerState=PowerState.ON;  break;case INSTANCE_STATUS_PROVISIONING:case INSTANCE_STATUS_STAGING:case INSTANCE_STATUS_STOPPING:case INSTANCE_STATUS_SUSPENDED:case INSTANCE_STATUS_SUSPENDING:computeState.powerState=PowerState.SUSPEND;break;case INSTANCE_STATUS_TERMINATED:computeState.powerState=PowerState.OFF;break;default :computeState.powerState=PowerState.UNKNOWN;}}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){switch (requestCode) {case PERMISSION_REQ:    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      fineLocationPermissionGranted();    }}}  }
class C{  public boolean isAll(){  return isAll;}  }
class C{  private List<SubmitRecord> resultsToSubmitRecord(Term submitRule,List<Term> results){  List<SubmitRecord> out=new ArrayList<>(results.size());  for (int resultIdx=results.size() - 1; 0 <= resultIdx; resultIdx--) {    Term submitRecord=results.get(resultIdx);    SubmitRecord rec=new SubmitRecord();    out.add(rec);    if (!(submitRecord instanceof StructureTerm) || 1 != submitRecord.arity()) {      return invalidResult(submitRule,submitRecord);    }    if ("ok".equals(submitRecord.name())) {      rec.status=SubmitRecord.Status.OK;    } else     if ("not_ready".equals(submitRecord.name())) {      rec.status=SubmitRecord.Status.NOT_READY;    } else {      return invalidResult(submitRule,submitRecord);    }    submitRecord=submitRecord.arg(0);    if (!(submitRecord instanceof StructureTerm)) {      return invalidResult(submitRule,submitRecord);    }    rec.labels=new ArrayList<>(submitRecord.arity());    for (    Term state : ((StructureTerm)submitRecord).args()) {      if (!(state instanceof StructureTerm) || 2 != state.arity() || !"label".equals(state.name())) {        return invalidResult(submitRule,submitRecord);      }      SubmitRecord.Label lbl=new SubmitRecord.Label();      rec.labels.add(lbl);      lbl.label=state.arg(0).name();      Term status=state.arg(1);      try {        if ("ok".equals(status.name())) {          lbl.status=SubmitRecord.Label.Status.OK;          appliedBy(lbl,status);        } else         if ("reject".equals(status.name())) {          lbl.status=SubmitRecord.Label.Status.REJECT;          appliedBy(lbl,status);        } else         if ("need".equals(status.name())) {          lbl.status=SubmitRecord.Label.Status.NEED;        } else         if ("may".equals(status.name())) {          lbl.status=SubmitRecord.Label.Status.MAY;        } else         if ("impossible".equals(status.name())) {          lbl.status=SubmitRecord.Label.Status.IMPOSSIBLE;        } else {          return invalidResult(submitRule,submitRecord);        }      } catch (      UserTermExpected e) {        return invalidResult(submitRule,submitRecord,e.getMessage());      }    }    if (rec.status == SubmitRecord.Status.OK) {      break;    }  }  Collections.reverse(out);  return out;}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public static Iterator iterator(Object o){  return DefaultTypeTransformation.asCollection(o).iterator();}  }
class C{  public String toString(){  return ("UniqueIdentity:" + id.toString() + "\n");}  }
class C{  public static boolean rectWithin(final double aMinLat,final double aMaxLat,final double aMinLon,final double aMaxLon,final double bMinLat,final double bMaxLat,final double bMinLon,final double bMaxLon){  return !(aMinLon < bMinLon || aMinLat < bMinLat || aMaxLon > bMaxLon || aMaxLat > bMaxLat);}  }
class C{  public void removeBytes(int offset,int len){  replaceBytes(offset,len,null);}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public static boolean isStdio(String filename){  return STDIO_NAME.equals(filename);}  }
class C{  public static void main(String[] args){  TestOverridenPrivateMethodsWithPackageFlag tester=new TestOverridenPrivateMethodsWithPackageFlag();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  int arrayLength(){  return mArray.length;}  }
class C{  private LinkedList<Link> path(final Node destinationNode,final LeastCostPathTree lcpt){  final LinkedList<Link> result=new LinkedList<>();  Node currentNode=destinationNode;  while (!currentNode.getId().equals(lcpt.getOrigin().getId())) {    final Node prevNode=this.network.getNodes().get(lcpt.getTree().get(currentNode.getId()).getPrevNodeId());    result.addFirst(getConnectingLink(prevNode,currentNode));    currentNode=prevNode;  }  return result;}  }
class C{  public void refresh(){}  }
class C{  @Interruptible public void applyCodePatches(CompiledMethod cm){  if (patchMap != null) {    for (int idx=0; idx < patchMap.length; idx+=2) {      CodeArray code=cm.codeArrayForOffset(Offset.fromIntZeroExtend(patchMap[idx]));      if (VM.BuildForIA32) {        org.jikesrvm.compilers.common.assembler.ia32.Assembler.patchCode(code,patchMap[idx],patchMap[idx + 1]);      } else       if (VM.BuildForPowerPC) {        org.jikesrvm.compilers.opt.mir2mc.ppc.AssemblerOpt.patchCode(code,patchMap[idx],patchMap[idx + 1]);      } else       if (VM.VerifyAssertions) {        VM._assert(VM.NOT_REACHED);      }    }    if (VM.BuildForPowerPC) {      boolean DEBUG_CODE_PATCH=false;      Magic.sync();      Memory.sync(Magic.objectAsAddress(instructions),instructions.length() << ArchConstants.getLogInstructionWidth());      RVMThread.softHandshake(codePatchSyncRequestVisitor);      if (DEBUG_CODE_PATCH) {        VM.sysWrite("all processors got synchronized!\n");      }    }  }}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<K,V>(key,value);}  }
class C{  final public void println(double v){  Writer out=this.out;  if (out == null)   return;  print(v);  try {    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public RpfUtil(){}  }
class C{  @Transactional public void updateOrder(final JSONObject order) throws ServiceException {  try {    final String orderId=order.optString(Keys.OBJECT_ID);    orderRepository.update(orderId,order);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Updates order failed",e);    throw new ServiceException(e);  }}  }
class C{  private void cancelNotification(){  final NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nm.cancel(NOTIFICATION_ID);}  }
class C{  protected void log(String s){  Log.d(mName,s);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static CCBezierTo action(float t,CCBezierConfig c){  return new CCBezierTo(t,c);}  }
class C{  public Customers(String alias){  this(alias,CUSTOMERS);}  }
class C{  public void drawHorizontalItem(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  BoxAndWhiskerXYDataset boxAndWhiskerData=(BoxAndWhiskerXYDataset)dataset;  Number x=boxAndWhiskerData.getX(series,item);  Number yMax=boxAndWhiskerData.getMaxRegularValue(series,item);  Number yMin=boxAndWhiskerData.getMinRegularValue(series,item);  Number yMedian=boxAndWhiskerData.getMedianValue(series,item);  Number yAverage=boxAndWhiskerData.getMeanValue(series,item);  Number yQ1Median=boxAndWhiskerData.getQ1Value(series,item);  Number yQ3Median=boxAndWhiskerData.getQ3Value(series,item);  double xx=domainAxis.valueToJava2D(x.doubleValue(),dataArea,plot.getDomainAxisEdge());  RectangleEdge location=plot.getRangeAxisEdge();  double yyMax=rangeAxis.valueToJava2D(yMax.doubleValue(),dataArea,location);  double yyMin=rangeAxis.valueToJava2D(yMin.doubleValue(),dataArea,location);  double yyMedian=rangeAxis.valueToJava2D(yMedian.doubleValue(),dataArea,location);  double yyAverage=0.0;  if (yAverage != null) {    yyAverage=rangeAxis.valueToJava2D(yAverage.doubleValue(),dataArea,location);  }  double yyQ1Median=rangeAxis.valueToJava2D(yQ1Median.doubleValue(),dataArea,location);  double yyQ3Median=rangeAxis.valueToJava2D(yQ3Median.doubleValue(),dataArea,location);  double exactBoxWidth=getBoxWidth();  double width=exactBoxWidth;  double dataAreaX=dataArea.getHeight();  double maxBoxPercent=0.1;  double maxBoxWidth=dataAreaX * maxBoxPercent;  if (exactBoxWidth <= 0.0) {    int itemCount=boxAndWhiskerData.getItemCount(series);    exactBoxWidth=dataAreaX / itemCount * 4.5 / 7;    if (exactBoxWidth < 3) {      width=3;    } else     if (exactBoxWidth > maxBoxWidth) {      width=maxBoxWidth;    } else {      width=exactBoxWidth;    }  }  g2.setPaint(getItemPaint(series,item));  Stroke s=getItemStroke(series,item);  g2.setStroke(s);  g2.draw(new Line2D.Double(yyMax,xx,yyQ3Median,xx));  g2.draw(new Line2D.Double(yyMax,xx - width / 2,yyMax,xx + width / 2));  g2.draw(new Line2D.Double(yyMin,xx,yyQ1Median,xx));  g2.draw(new Line2D.Double(yyMin,xx - width / 2,yyMin,xx + width / 2));  Shape box;  if (yyQ1Median < yyQ3Median) {    box=new Rectangle2D.Double(yyQ1Median,xx - width / 2,yyQ3Median - yyQ1Median,width);  } else {    box=new Rectangle2D.Double(yyQ3Median,xx - width / 2,yyQ1Median - yyQ3Median,width);  }  if (this.fillBox) {    g2.setPaint(lookupBoxPaint(series,item));    g2.fill(box);  }  g2.setStroke(getItemOutlineStroke(series,item));  g2.setPaint(getItemOutlinePaint(series,item));  g2.draw(box);  g2.setPaint(getArtifactPaint());  g2.draw(new Line2D.Double(yyMedian,xx - width / 2,yyMedian,xx + width / 2));  if (yAverage != null) {    double aRadius=width / 4;    if ((yyAverage > (dataArea.getMinX() - aRadius)) && (yyAverage < (dataArea.getMaxX() + aRadius))) {      Ellipse2D.Double avgEllipse=new Ellipse2D.Double(yyAverage - aRadius,xx - aRadius,aRadius * 2,aRadius * 2);      g2.fill(avgEllipse);      g2.draw(avgEllipse);    }  }  if (entities != null && box.intersects(dataArea)) {    addEntity(entities,box,dataset,series,item,yyAverage,xx);  }}  }
class C{  public void addField(String name,Object value){  addField(name,value,1.0f);}  }
class C{  public static long size(Matcher self){  return getCount(self);}  }
class C{  protected synchronized void updateMergeThreads(){  final List<MergeThread> activeMerges=new ArrayList<>();  int threadIdx=0;  while (threadIdx < mergeThreads.size()) {    final MergeThread mergeThread=mergeThreads.get(threadIdx);    if (!mergeThread.isAlive()) {      mergeThreads.remove(threadIdx);      continue;    }    activeMerges.add(mergeThread);    threadIdx++;  }  CollectionUtil.timSort(activeMerges);  final int activeMergeCount=activeMerges.size();  int bigMergeCount=0;  for (threadIdx=activeMergeCount - 1; threadIdx >= 0; threadIdx--) {    MergeThread mergeThread=activeMerges.get(threadIdx);    if (mergeThread.merge.estimatedMergeBytes > MIN_BIG_MERGE_MB * 1024 * 1024) {      bigMergeCount=1 + threadIdx;      break;    }  }  long now=System.nanoTime();  StringBuilder message;  if (verbose()) {    message=new StringBuilder();    message.append(String.format(Locale.ROOT,"updateMergeThreads ioThrottle=%s targetMBPerSec=%.1f MB/sec",doAutoIOThrottle,targetMBPerSec));  } else {    message=null;  }  for (threadIdx=0; threadIdx < activeMergeCount; threadIdx++) {    MergeThread mergeThread=activeMerges.get(threadIdx);    OneMerge merge=mergeThread.merge;    final boolean doPause=threadIdx < bigMergeCount - maxThreadCount;    double newMBPerSec;    if (doPause) {      newMBPerSec=0.0;    } else     if (merge.maxNumSegments != -1) {      newMBPerSec=forceMergeMBPerSec;    } else     if (doAutoIOThrottle == false) {      newMBPerSec=Double.POSITIVE_INFINITY;    } else     if (merge.estimatedMergeBytes < MIN_BIG_MERGE_MB * 1024 * 1024) {      newMBPerSec=Double.POSITIVE_INFINITY;    } else {      newMBPerSec=targetMBPerSec;    }    double curMBPerSec=merge.rateLimiter.getMBPerSec();    if (verbose()) {      long mergeStartNS=merge.mergeStartNS;      if (mergeStartNS == -1) {        mergeStartNS=now;      }      message.append('\n');      message.append(String.format(Locale.ROOT,"merge thread %s estSize=%.1f MB (written=%.1f MB) runTime=%.1fs (stopped=%.1fs, paused=%.1fs) rate=%s\n",mergeThread.getName(),bytesToMB(merge.estimatedMergeBytes),bytesToMB(merge.rateLimiter.totalBytesWritten),nsToSec(now - mergeStartNS),nsToSec(merge.rateLimiter.getTotalStoppedNS()),nsToSec(merge.rateLimiter.getTotalPausedNS()),rateToString(merge.rateLimiter.getMBPerSec())));      if (newMBPerSec != curMBPerSec) {        if (newMBPerSec == 0.0) {          message.append("  now stop");        } else         if (curMBPerSec == 0.0) {          if (newMBPerSec == Double.POSITIVE_INFINITY) {            message.append("  now resume");          } else {            message.append(String.format(Locale.ROOT,"  now resume to %.1f MB/sec",newMBPerSec));          }        } else {          message.append(String.format(Locale.ROOT,"  now change from %.1f MB/sec to %.1f MB/sec",curMBPerSec,newMBPerSec));        }      } else       if (curMBPerSec == 0.0) {        message.append("  leave stopped");      } else {        message.append(String.format(Locale.ROOT,"  leave running at %.1f MB/sec",curMBPerSec));      }    }    merge.rateLimiter.setMBPerSec(newMBPerSec);  }  if (verbose()) {    message(message.toString());  }}  }
class C{  public static boolean isValidJarContent(final byte[] jarBytes){  return hasValidJarContent(new ByteArrayInputStream(jarBytes));}  }
class C{  public void detachOverlayGraph(){  overlayGraph.set(null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int size(){  return size;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.507 -0500",hash_original_method="F6CA728A57FEA4C77AF7294872C7D495",hash_generated_method="0AB87D1FFE8ACBFD8140FF2BFBB1B700") public Intent putExtra(String name,float[] value){  mExtras.put(name,value);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Phrasal loadDecoder(String phrasalIniFile,LanguageModel<IString> lm) throws IOException {  return loadDecoder(IOTools.readConfigFile(phrasalIniFile),lm);}  }
class C{  private void checkLimits(float temp,float year){  if (Float.isNaN(overall_max_temp_) || temp > overall_max_temp_)   overall_max_temp_=temp;  if (Float.isNaN(overall_min_temp_) || temp < overall_min_temp_)   overall_min_temp_=temp;  if (Float.isNaN(overall_max_year_) || year > overall_max_year_)   overall_max_year_=year;  if (Float.isNaN(overall_min_year_) || year < overall_min_year_)   overall_min_year_=year;}  }
class C{  public void deleteAttributeAt(int columnIndex){  deleteAttributeAt(columnIndex,true);}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public ReadStreamOld openRead() throws IOException {  closeWrite();  TempReadStream read=new TempReadStream(_head);  read.setFreeWhenDone(true);  _head=null;  _tail=null;  return new ReadStreamOld(read);}  }
class C{  private void addNode(Node node) throws SyncException {  Short nodeId=node.getNodeId();  if (allNodes.get(nodeId) != null) {    throw new SyncException("Error adding node " + node + ": a node with that ID already exists");  }  allNodes.put(nodeId,node);  Short domainId=node.getDomainId();  List<Node> localDomain=localDomains.get(domainId);  if (localDomain == null) {    localDomains.put(domainId,localDomain=new ArrayList<Node>());  }  localDomain.add(node);}  }
class C{  public DefaultHighlightPainter(Color c){  color=c;}  }
class C{  public void remove(int key){  if (key == 0) {    zeroKey=false;    return;  }  checkSizeRemove();  int index=getIndex(key);  int plus=1;  do {    int k=keys[index];    if (k == key) {      keys[index]=0;      values[index]=DELETED;      deletedCount++;      size--;      return;    } else     if (k == 0 && values[index] == 0) {      return;    }    index=(index + plus++) & mask;  } while (plus <= len);}  }
class C{  public HistoryPseudoState(PseudoStateKind kind,StateHolder<S,E> defaultState,StateHolder<S,E> containingState){  super(kind);  Assert.isTrue(PseudoStateKind.HISTORY_SHALLOW == kind || PseudoStateKind.HISTORY_DEEP == kind,"Pseudo state must be either shallow or deep");  Assert.notNull(defaultState,"Holder defaultState must be set");  Assert.notNull(containingState,"Holder containingState must be set");  this.defaultState=defaultState;  this.containingState=containingState;}  }
class C{  public void addComponent(){  FacesContext ctx=FacesContext.getCurrentInstance();  UIComponent group=ctx.getViewRoot().findComponent("dynamicForm" + UINamingContainer.getSeparatorChar(ctx) + "group");  HtmlOutputText output=new HtmlOutputText();  output.setValue("OUTPUT");  group.getChildren().add(output);}  }
class C{  private Bytestream createBytestreamInitiation(String sessionID,String targetJID,List<StreamHost> streamHosts){  Bytestream initiation=new Bytestream(sessionID);  for (  StreamHost streamHost : streamHosts) {    initiation.addStreamHost(streamHost);  }  initiation.setType(IQ.Type.SET);  initiation.setTo(targetJID);  return initiation;}  }
class C{  public synchronized void close() throws IOException {  if (closed) {    return;  }  closeUnderlying();  closed=true;}  }
class C{  public void changeLength(double len){  double factor=this.norm();  factor=len / factor;  scalarMultiply(factor);}  }
class C{  public int tabForCoordinate(final JTabbedPane pane,final int x,final int y){  return tabForCoordinate(pane,x,y,true);}  }
class C{  private NetworkBuilder(boolean directed){  this.directed=directed;}  }
class C{  public String edgeType(){  return "dir=forward";}  }
class C{  public static <T>T invoke(final Object obj,final String methodName,final Object... arguments){  return invoke(obj,methodName,getArgumentTypes(arguments),arguments);}  }
class C{  protected String checkEquippedAndInRange(){  StackableItem projectiles=sender.getMissileIfNotHoldingOtherWeapon();  if (projectiles == null) {    Item bow=sender.getRangeWeapon();    if (bow == null) {      return "not-equipped";    }    projectiles=sender.getAmmunition();    if (projectiles == null) {      return "not-equipped";    }  } else {  }  final int maxRange=sender.getMaxRangeForArcher();  if (!sender.canDoRangeAttack(target,maxRange)) {    return "not-in-range";  }  String[] parts=projectiles.get("name").split(" ");  String type=parts[0];  projectiles.sub(1);  return type;}  }
class C{  public static void main(String[] argv){  runFilter(new AddUserFields(),argv);}  }
class C{  public Pagination(int offset,int limit){  this.offset=offset;  this.limit=limit;}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  @Subscribe public synchronized void onStepMoved(StepMovedEvent event){  PlatformImpl.runAndWait(null);}  }
class C{  private static void putElements(Cache<Integer,String> cache,int count){  System.out.println("--- " + cache.id() + "---");  for (int i=0; i < count; i++) {    cache.put(i,"Manual put of " + i);    if (i % 3 == 0) {      cache.get(i);    }  }  for (int i=0; i < count; i++) {    System.out.println(i + ":" + cache.get(i));  }  System.out.println(cache.statistics());  System.out.println();}  }
class C{  public static void decode(InputStream inputStream,OutputStream outputStream) throws IOException {  copy(new Base64InputStream(inputStream),outputStream);}  }
class C{  public void testWithExceptions() throws Exception {  int numDocs=atLeast(10000);  int numBytesPerDim=TestUtil.nextInt(random(),2,PointValues.MAX_NUM_BYTES);  int numDims=TestUtil.nextInt(random(),1,PointValues.MAX_DIMENSIONS);  byte[][][] docValues=new byte[numDocs][][];  for (int docID=0; docID < numDocs; docID++) {    byte[][] values=new byte[numDims][];    for (int dim=0; dim < numDims; dim++) {      values[dim]=new byte[numBytesPerDim];      random().nextBytes(values[dim]);    }    docValues[docID]=values;  }  boolean done=false;  while (done == false) {    try (MockDirectoryWrapper dir=newMockFSDirectory(createTempDir())){      try {        dir.setRandomIOExceptionRate(0.05);        dir.setRandomIOExceptionRateOnOpen(0.05);        verify(dir,docValues,null,numDims,numBytesPerDim,true);      } catch (      IllegalStateException ise) {        if (ise.getMessage().contains("this writer hit an unrecoverable error")) {          Throwable cause=ise.getCause();          if (cause != null && cause.getMessage().contains("a random IOException")) {            done=true;          } else {            throw ise;          }        } else {          throw ise;        }      }catch (      AssertionError ae) {        if (ae.getMessage() != null && ae.getMessage().contains("does not exist; files=")) {          done=true;        } else {          throw ae;        }      }catch (      IllegalArgumentException iae) {        assertTrue(iae.getMessage().contains("either increase maxMBSortInHeap or decrease maxPointsInLeafNode"));      }catch (      IOException ioe) {        String message=ioe.getMessage();        if (message.contains("a random IOException") || message.contains("background merge hit exception")) {          done=true;        } else {          throw ioe;        }      }    }   }}  }
class C{  public static boolean isAssignableFrom(Field destination,Field source){  boolean isFirst=true;  boolean isAddAllFunction=false;  boolean isPutAllFunction=false;  return isAssignableFrom(getGenericString(destination),getGenericString(source),destination.getType(),source.getType(),isFirst,isAddAllFunction,isPutAllFunction);}  }
class C{  static public tr createField(tr line,String FORMNAME,String PARAMETER,String labelText,String inputType,Object value,int sizeDisplay,int size,boolean longField,boolean mandatory,String onChange,StringBuffer script){  if (line == null)   line=new tr();  String labelInfo=labelText;  if (mandatory) {    labelInfo+="&nbsp;<font color=\"red\">*</font>";    String fName="document." + FORMNAME + "."+ PARAMETER;    script.append(fName).append(".required=true; ");  }  label llabel=new label().setFor(PARAMETER).addElement(labelInfo);  llabel.setID("ID_" + PARAMETER + "_Label");  line.addElement(new td().addElement(llabel).setAlign(AlignType.RIGHT));  input iinput=new input(inputType,PARAMETER,value == null ? "" : value.toString());  iinput.setSize(sizeDisplay).setMaxlength(size);  iinput.setID("ID_" + PARAMETER);  if (onChange != null && onChange.length() > 0)   iinput.setOnChange(onChange);  iinput.setTitle(labelText);  td field=new td().addElement(iinput).setAlign(AlignType.LEFT);  if (longField)   field.setColSpan(3);  line.addElement(field);  return line;}  }
class C{  public DirtyRegion removeNextDirtyRegion(){  if (fDirtyRegions.size() == 0) {    return null;  }  final DirtyRegion dr=fDirtyRegions.get(0);  fDirtyRegions.remove(0);  return dr;}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public static KnowledgeEdge serializableInstance(){  return new KnowledgeEdge("X","Y");}  }
class C{  public Quantity(final long quantity){  super(quantity,Quantity.class);}  }
class C{  private void updateInputs(){  inputsPanel.removeAll();  inputsPanel.setLayout(inputsLayout);  inputCategoryTaskPanes=new HashMap<>();  GridBagConstraints gbc=new GridBagConstraints();  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=1;  gbc.gridx=0;  gbc.gridy=0;  gbc.anchor=GridBagConstraints.WEST;  int totalEntryCount=0;  Map<String,List<FunctionInput>> filteredModel=inputsModel.getFilteredModel();  String filterName=inputsModel.getFilterNameString();  boolean searchStringGiven=!filterName.isEmpty();  List<String> keySet=new LinkedList<>(filteredModel.keySet());  boolean anyPerfectMatch=false;  for (  String type : keySet) {    boolean perfectMatch=false;    JXTaskPane inputCategoryTaskPane=new JXTaskPane();    inputCategoryTaskPane.setName(type);    List<FunctionInput> list=inputsModel.getFilteredModel(type);    for (    FunctionInput entry : list) {      String value=null;      if (entry.getCategory() == Category.DYNAMIC || entry.getCategory() == Category.CONSTANT) {        totalEntryCount+=1;        value=entry.getAdditionalInformation();      } else       if (entry.getCategory() == Category.SCOPE) {        totalEntryCount+=1;        value=parser.getExpressionContext().getScopeString(entry.getName());      }      FunctionInputPanel inputPanel=null;      if (value == null) {        inputPanel=new FunctionInputPanel(entry);      } else {        inputPanel=new FunctionInputPanel(entry,value);      }      inputPanel.registerObserver(inputObserver);      inputCategoryTaskPane.add(inputPanel);      if (!perfectMatch && searchStringGiven) {        if (filterName.toLowerCase(Locale.ENGLISH).equals(entry.getName().toLowerCase(Locale.ENGLISH))) {          perfectMatch=true;          anyPerfectMatch=true;        }      }    }    inputCategoryTaskPane.setTitle(type);    inputCategoryTaskPane.setAnimated(false);    if (filteredModel.keySet().size() == 1) {      inputCategoryTaskPane.setCollapsed(false);    } else {      inputCategoryTaskPane.setCollapsed(true);    }    if (perfectMatch) {      inputCategoryTaskPane.setCollapsed(false);    }    inputCategoryTaskPanes.put(type,inputCategoryTaskPane);    gbc.ipady=10;    inputsPanel.add(inputCategoryTaskPane,gbc);    gbc.gridy+=1;  }  if (totalEntryCount <= MAX_NMBR_INPUTS_SHOWN) {    for (    JXTaskPane taskPane : inputCategoryTaskPanes.values()) {      taskPane.setCollapsed(false);    }  } else {    if (!anyPerfectMatch) {      if (filteredModel.get(ExampleResolver.KEY_ATTRIBUTES) != null && filteredModel.get(ExampleResolver.KEY_SPECIAL_ATTRIBUTES) != null && filteredModel.get(ExampleResolver.KEY_ATTRIBUTES).size() + filteredModel.get(ExampleResolver.KEY_SPECIAL_ATTRIBUTES).size() <= MAX_NMBR_INPUTS_SHOWN) {        inputCategoryTaskPanes.get(ExampleResolver.KEY_ATTRIBUTES).setCollapsed(false);        inputCategoryTaskPanes.get(ExampleResolver.KEY_SPECIAL_ATTRIBUTES).setCollapsed(false);      } else       if (filteredModel.get(ExampleResolver.KEY_ATTRIBUTES) != null && filteredModel.get(ExampleResolver.KEY_ATTRIBUTES).size() <= MAX_NMBR_INPUTS_SHOWN) {        inputCategoryTaskPanes.get(ExampleResolver.KEY_ATTRIBUTES).setCollapsed(false);      }    }  }  if (filteredModel.isEmpty()) {    gbc.ipady=10;    inputsPanel.add(new JLabel(MESSAGE_NO_RESULTS),gbc);  }  inputsPanel.revalidate();}  }
class C{  final public MutableString replace(final char c,final char r){  int i=length();  final char[] a=array;  while (i-- != 0)   if (a[i] == c)   a[i]=r;  changed();  return this;}  }
class C{  public void removeTemplateFromCache(String name,String encoding) throws IOException {  removeTemplateFromCache(name,getLocale(),encoding,true);}  }
class C{  public FileEntry createFile(String name,InputStream content) throws ForbiddenException, ConflictException, ServerException {  if (isRoot(getVirtualFile())) {    throw new ForbiddenException("Can't create file in root folder.");  }  return new FileEntry(getVirtualFile().createFile(name,content),projectRegistry);}  }
class C{  public InOutParameter(final T value){  this.value=value;}  }
class C{  public static byte[] decode(String s){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    decode(s,bos);  } catch (  IOException e) {    throw new RuntimeException();  }  byte[] decodedBytes=bos.toByteArray();  try {    bos.close();    bos=null;  } catch (  IOException ex) {    System.err.println("Error while decoding BASE64: " + ex.toString());  }  return decodedBytes;}  }
class C{  public static boolean contains(short[] array,short value){  return indexOf(array,value) != -1;}  }
class C{  private static boolean memberEquals(final Class<?> type,final Object o1,final Object o2){  if (o1 == o2) {    return true;  }  if (o1 == null || o2 == null) {    return false;  }  if (type.isArray()) {    return arrayMemberEquals(type.getComponentType(),o1,o2);  }  if (type.isAnnotation()) {    return equals((Annotation)o1,(Annotation)o2);  }  return o1.equals(o2);}  }
class C{  public void parseCheckedEx() throws CustomDrawingParserException {  try {    start();  } catch (  ParseException e) {    throw new CustomDrawingParserException(e);  }catch (  TokenMgrException e) {    throw new CustomDrawingParserException(e);  }}  }
class C{  private void writeCategory(String category){  if (category == null || category.equals("")) {    return;  }  printWriter.println("<ExtendedData>");  printWriter.println("<Data name=\"type\"><value>" + StringUtils.formatCData(category) + "</value></Data>");  printWriter.println("</ExtendedData>");}  }
class C{  @Override public Uri insertCharacters(Uri uri,ContentValues cvs){synchronized (this) {    if (cvs.containsKey(CharacterEntry.COLUMN_NAME)) {      CharacterRecord rec=new CharacterRecord(cvs.getAsString(CharacterEntry.COLUMN_NAME),cvs.getAsString(CharacterEntry.COLUMN_RACE));      mCharacterMap.put(rec.getId(),rec);      return CharacterContract.CharacterEntry.buildUri(rec.getId());    } else     throw new RuntimeException("Failed to insert row into " + uri);  }}  }
class C{  public static ExprString toExprString(Expression expr){  if (expr instanceof ExprString)   return (ExprString)expr;  if (expr instanceof Literal)   return expr.getFactory().createLitString(((Literal)expr).getString(),expr.getStart(),expr.getEnd());  return new CastString(expr);}  }
class C{  public synchronized int addLog(int descriptor,int _verbosity,boolean postAnnouncements){  logs.addElement(new Log(descriptor,postAnnouncements));  return logs.size() - 1;}  }
class C{  public DBConnectionNotFound(){}  }
class C{  public static byte[][] split(final byte[] bytes,final int splitIndex){  if (splitIndex < 0 || bytes.length < splitIndex) {    throw new IllegalArgumentException("split index is out of range");  }  final byte[] lhs=new byte[splitIndex];  final byte[] rhs=new byte[bytes.length - splitIndex];  System.arraycopy(bytes,0,lhs,0,lhs.length);  System.arraycopy(bytes,splitIndex,rhs,0,rhs.length);  return new byte[][]{lhs,rhs};}  }
class C{  private void applyValues(Content content,DescriptorElement left,DescriptorElement right){  if (content instanceof Element) {    Element element=(Element)content;    List<Content> childNodes=element.getContent();    for (    Content n : childNodes) {      applyValues(n,left,right);    }  } else   if (content instanceof Text) {    Pattern pat=Pattern.compile("\\$(left:|right:)[^ ,\\t]*");    Text element=(Text)content;    Matcher m=pat.matcher(element.getText());    StringBuffer sb=new StringBuffer();    while (m.find()) {      String repl=replaceValue(m.group(),left,right).replaceAll("\\$","\\\\\\$");      m.appendReplacement(sb,repl);    }    m.appendTail(sb);    element.setText(sb.toString());  }}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      in.close();    }  finally {      in=null;    }  }}  }
class C{  public void add(int i,Action a){  m_actions.add(i,a);}  }
class C{  public String toString(){  return getClass().getName() + "[type=" + type+ ",index0="+ index0+ ",index1="+ index1+ "]";}  }
class C{  public static void planChangeAccepted(@AnalyticsCnsts.PlanChange String planChangeType,double amount){  Date date=new Date();  Timestamp curTime=new Timestamp(date.getTime());  String json=gson.toJson(new AnalyticsPlanChange(planChangeType,amount,curTime),AnalyticsPlanChange.class);  JSONObject jsonObject=null;  try {    jsonObject=new JSONObject(json);    jsonObject.put("_activity","planChanged");    Log.i("TEST","JSON AFTER ACTIVITY " + jsonObject.toString());    WLAnalytics.log("Plan change accepted by a user",jsonObject);  } catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  public void checkAndHandleLastVisibleCellChange(){  int currentLastVisibleItem=mCurrentFirstVisibleItem + mCurrentVisibleItemCount;  int previousLastVisibleItem=mPreviousFirstVisibleItem + mPreviousVisibleItemCount;  if (currentLastVisibleItem != previousLastVisibleItem) {    if (mCellIsMobile && mMobileItemId != INVALID_ID) {      updateNeighborViewsForID(mMobileItemId);      handleCellSwitch();    }  }}  }
class C{  public UserWrapper(User user){  Assert.notNull(user,"Not allowed to create an UserWrapper with null argument");  this.user=user;  this.user.getRoles().size();}  }
class C{  public static void storeStack(Throwable th,int currentStackFrame){  Thread t=Thread.currentThread();  if (t.getClass() == CODE) {    CodenameOneThread c=(CodenameOneThread)t;    c.storeStackForException(th,currentStackFrame);  }}  }
class C{  public boolean verifyReader(){  return this.verifyReader;}  }
class C{  protected void reportSqlTiming(long execTime,String sql,String methodCall){  _reportSqlTiming(execTime,sql,methodCall);}  }
class C{  private static String basename(String str){  int sl=str.lastIndexOf('/');  if (sl >= 0) {    return str.substring(sl + 1);  }  return str;}  }
class C{  public MutableValueBuffer(final int capacity,final IRaba src){  if (src == null)   throw new IllegalArgumentException();  if (capacity < src.capacity())   throw new IllegalArgumentException();  nvalues=src.size();  assert nvalues >= 0;  values=new byte[capacity][];  int i=0;  for (  byte[] a : src) {    values[i++]=a;  }}  }
class C{  public static void main(String[] args){  System.setProperty("vertx.logger-delegate-factory-class-name",SLF4JLogDelegateFactory.class.getName());  new HystrixDashboardLauncher().dispatch(args);}  }
class C{  private void moveText(){  if (textPos >= -((lineHeight + lineSpacing) * text.size())) {    textPos--;  } else {    resetTextPos();  }  this.repaint(0,0,this.getWidth(),this.getHeight());}  }
class C{  public int remove(Object key){  int hash=key == null ? 0 : key.hashCode() & 0x7FFFFFFF;  int index=hash % table.length;  Entry p=null;  for (Entry e=table[index]; e != null; e=e.next) {    if (e.hash == hash && (e.key == null && key == null || e.key != null && e.key.equals(key))) {      int result=e.value;      if (p == null) {        table[index]=e.next;      } else {        p.next=e.next;      }      count--;      return result;    }    p=e;  }  return 0;}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public T caseRecipientListRouter(RecipientListRouter object){  return null;}  }
class C{  @Nullable public static Artifact createArtifactOrNull(String artifactName) throws ArtifactNotFoundException {  return artifactName == null ? null : createArtifact(artifactName);}  }
class C{  @Override public void actionPerformed(ActionEvent ae){  for (int i=0; i < 9; i++) {    if (ae.getSource() == squareButtons[i]) {      EightPuzzleController contr=(EightPuzzleController)getController();      XYLocation locGap=((EightPuzzleEnvironment)env).getBoard().getLocationOf(0);      if (locGap.getXCoOrdinate() == i / 3) {        if (locGap.getYCoOrdinate() == i % 3 - 1)         contr.executeUserAction(EightPuzzleBoard.RIGHT); else         if (locGap.getYCoOrdinate() == i % 3 + 1)         contr.executeUserAction(EightPuzzleBoard.LEFT);      } else       if (locGap.getYCoOrdinate() == i % 3) {        if (locGap.getXCoOrdinate() == i / 3 - 1)         contr.executeUserAction(EightPuzzleBoard.DOWN); else         if (locGap.getXCoOrdinate() == i / 3 + 1)         contr.executeUserAction(EightPuzzleBoard.UP);      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void afterBeanDiscovery(@Observes final AfterBeanDiscovery event,BeanManager beanManager){  event.addContext(new RedirectScopeContext());}  }
class C{  private synchronized void linkStyleSheetAt(StyleSheet ss,int index){  if (resolvedStyles.size() > 0) {    Enumeration<ResolvedStyle> values=resolvedStyles.elements();    while (values.hasMoreElements()) {      ResolvedStyle rule=values.nextElement();      rule.insertExtendedStyleAt(ss.getRule(rule.getName()),index);    }  }}  }
class C{  private GeneralNeuronPropertiesPanel(final List<Neuron> neuronList,final Window parent,final boolean displayIDInfo){  this.neuronList=neuronList;  this.parent=parent;  this.displayIDInfo=displayIDInfo;  detailTriangle=new DropDownTriangle(UpDirection.LEFT,false,"More","Less",parent);  boundsClippingPanel=new BoundsClippingPanel(neuronList,parent);  initializeLayout();  fillFieldValues();}  }
class C{  @Override public boolean onJsPrompt(AmazonWebView view,String url,String message,String defaultValue,AmazonJsPromptResult result){  if (defaultValue != null && defaultValue.startsWith("gap")) {    if (defaultValue.startsWith("gap-iab://")) {      PluginResult scriptResult;      String scriptCallbackId=defaultValue.substring(10);      if (scriptCallbackId.startsWith("InAppBrowser")) {        if (message == null || message.length() == 0) {          scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray());        } else {          try {            scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray(message));          } catch (          JSONException e) {            scriptResult=new PluginResult(PluginResult.Status.JSON_EXCEPTION,e.getMessage());          }        }        this.webView.sendPluginResult(scriptResult,scriptCallbackId);        result.confirm("");        return true;      }    } else {      LOG.w(LOG_TAG,"InAppBrowser does not support Cordova API calls: " + url + " "+ defaultValue);      result.cancel();      return true;    }  }  return false;}  }
class C{  public static IStatus validateMethodName(String name){  return validateMethodName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  private static float dipToPx(Context context,float dp){  if (context == null) {    return -1;  }  float scale=context.getResources().getDisplayMetrics().density;  return dp * scale;}  }
class C{  @RpcMethod public VmDisksOpResponse attachDisks(String vmId,List<String> diskIds) throws InterruptedException, RpcException {  SyncHandler<VmDisksOpResponse,Host.AsyncClient.attach_disks_call> syncHandler=new SyncHandler<>();  attachDisks(vmId,diskIds,syncHandler);  syncHandler.await();  logger.info("attach_disks vm {}, disks {}, target {}",vmId,diskIds,getHostIp());  return ResponseValidator.checkAttachDisksResponse(syncHandler.getResponse());}  }
class C{  private void applySpecificPermissions(EnumMap<Node,Label> tree,Way way){  if (way.hasTag("access"))   applyLabel(Node.ACCESS,Label.fromTag(way.getTag("access")),tree);  if (way.hasTag("foot"))   applyLabel(Node.FOOT,Label.fromTag(way.getTag("foot")),tree);  if (way.hasTag("sidewalk")) {    String sidewalk=way.getTag("sidewalk");    if ("both".equalsIgnoreCase(sidewalk) || "left".equalsIgnoreCase(sidewalk) || "right".equalsIgnoreCase(sidewalk)) {      applyLabel(Node.FOOT,Label.YES,tree);    }  }  if (way.hasTag("vehicle"))   applyLabel(Node.VEHICLE,Label.fromTag(way.getTag("vehicle")),tree);  if (way.hasTag("bicycle"))   applyLabel(Node.BICYCLE,Label.fromTag(way.getTag("bicycle")),tree);  if (way.hasTag("cycleway")) {    Label label=Label.fromTag(way.getTag("cycleway"));    if (label != Label.NO) {      applyLabel(Node.BICYCLE,label,tree);    }  }  if (way.hasTag("cycleway:both"))   applyLabel(Node.BICYCLE,Label.fromTag(way.getTag("cycleway:both")),tree);  if (way.hasTag("motor_vehicle"))   applyLabel(Node.CAR,Label.fromTag(way.getTag("motor_vehicle")),tree);  if (way.hasTag("motorcar"))   applyLabel(Node.CAR,Label.fromTag(way.getTag("motorcar")),tree);}  }
class C{  @Inline private static Object allocateArrayInternal(int numElements,int size,TIB tib,int allocator,int align,int offset,int site){  Selected.Mutator mutator=Selected.Mutator.get();  allocator=mutator.checkAllocator(org.jikesrvm.runtime.Memory.alignUp(size,MIN_ALIGNMENT),align,allocator);  Address region=allocateSpace(mutator,size,align,offset,allocator,site);  Object result=ObjectModel.initializeArray(region,tib,numElements,size);  mutator.postAlloc(ObjectReference.fromObject(result),ObjectReference.fromObject(tib),size,allocator);  return result;}  }
class C{  public void listen(MfCardListener listener) throws IOException {  System.out.println("Listening for cards...");  readerWriter.setCardListener(listener);}  }
class C{  private void logModules(){  StringBuilder sb=new StringBuilder();  PollTcpManagerBase pollManager=NetworkSystem.currentPollManager();  if (pollManager != null) {    if (sb.length() > 0) {      sb.append(",");    }    sb.append(" poll keepalive (max=" + pollManager.pollMax() + ")");  } else   if (SelectManagerJni.getInitMessage() != null) {    log.config("  JNI poll: " + SelectManagerJni.getInitMessage());  }  if (JniServerSocketImpl.isEnabled()) {    if (sb.length() > 0)     sb.append(",");    sb.append(" socket");  } else   if (JniServerSocketImpl.getInitMessage() != null) {    log.config("  JNI socket: " + JniServerSocketImpl.getInitMessage());  } else {    log.config("  JNI socket: disabled for unknown reasons");  }  if (OpenSSLFactory.isEnabled()) {    if (sb.length() > 0)     sb.append(",");    sb.append(" openssl");  }  if (sb.length() > 0)   log.info("  Native:" + sb);  log.info("");}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo info=connectivityManager.getActiveNetworkInfo();  return info != null && info.isConnected();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case InformationModelPackage.INFORMATION_MODEL__NAME:    setName((String)newValue);  return;case InformationModelPackage.INFORMATION_MODEL__NAMESPACE:setNamespace((String)newValue);return;case InformationModelPackage.INFORMATION_MODEL__VERSION:setVersion((String)newValue);return;case InformationModelPackage.INFORMATION_MODEL__REFERENCES:getReferences().clear();getReferences().addAll((Collection<? extends ModelReference>)newValue);return;case InformationModelPackage.INFORMATION_MODEL__DESCRIPTION:setDescription((String)newValue);return;case InformationModelPackage.INFORMATION_MODEL__DISPLAYNAME:setDisplayname((String)newValue);return;case InformationModelPackage.INFORMATION_MODEL__CATEGORY:setCategory((String)newValue);return;case InformationModelPackage.INFORMATION_MODEL__PROPERTIES:getProperties().clear();getProperties().addAll((Collection<? extends FunctionblockProperty>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isLeaf(Object nd){  Node node=(Node)nd;  return !node.hasChildNodes();}  }
class C{  public String format(long val){  DecimalFormat df=getLongFormat();  if (df != null) {    return df.format(val);  }  return Long.toString(val);}  }
class C{  public static <T,K,L extends List<T>>BiFunction<Partition<T,K,L>,T,Boolean> alwaysInsert(){  return null;}  }
class C{  public double readDouble(){  return readDoubleArray()[0];}  }
class C{  public void showBackButton(){  if (getActivity() instanceof AppCompatActivity) {    ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true);  }}  }
class C{  public static byte[] keyGenPublic(byte[] privateKey){  byte[] publicKey=new byte[32];  curve_sigs.curve25519_keygen(publicKey,privateKey);  return publicKey;}  }
class C{  public static void main(final String[] args){  if (args.length < 1) {    usage(LocalizedStrings.AgentLauncher_MISSING_COMMAND.toLocalizedString());  }  SystemFailure.loadEmergencyClasses();  final AgentLauncher launcher=new AgentLauncher("Agent");  try {    final String command=args[0];    if (command.equalsIgnoreCase("start")) {      launcher.start(args);    } else     if (command.equalsIgnoreCase("server")) {      launcher.server(args);    } else     if (command.equalsIgnoreCase("stop")) {      launcher.stop(args);    } else     if (command.equalsIgnoreCase("status")) {      launcher.status(args);    } else     if (command.toLowerCase().matches("-{0,2}help")) {      if (args.length > 1) {        final String topic=args[1];        if (topic.equals("config")) {          launcher.configHelp();        } else {          usage(LocalizedStrings.AgentLauncher_NO_HELP_AVAILABLE_FOR_0.toLocalizedString(topic));        }      }      usage(LocalizedStrings.AgentLauncher_AGENT_HELP.toLocalizedString());    } else {      usage(LocalizedStrings.AgentLauncher_UNKNOWN_COMMAND_0.toLocalizedString(command));    }  } catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    throw e;  }catch (  Throwable t) {    SystemFailure.checkFailure();    t.printStackTrace();    System.err.println(LocalizedStrings.AgentLauncher_ERROR_0.toLocalizedString(t.getLocalizedMessage()));    System.exit(1);  }}  }
class C{  @Override protected boolean canExecuteScripts(){  return Jython.isPresent();}  }
class C{  public static boolean isAndroidComponentClass(SootClass clz){  if (clz.isInterface())   return false;  List<SootClass> supers=Scene.v().getActiveHierarchy().getSuperclassesOf(clz);  for (  SootClass sup : supers) {    if (Components.CLASS_NAMES.contains(sup.getName()))     return true;  }  return false;}  }
class C{  public static Dataset open(Object source) throws FileNotFoundException, IllegalArgumentException, SecurityException, WWRuntimeException {  return open(source,false);}  }
class C{  public void authorizeUser(AuthorizationCallback callback){  mCallback=callback;  String PRODUCT_DSN=Settings.Secure.getString(mContext.getContentResolver(),Settings.Secure.ANDROID_ID);  Bundle options=new Bundle();  String scope_data="{\"alexa:all\":{\"productID\":\"" + mProductId + "\", \"productInstanceAttributes\":{\"deviceSerialNumber\":\""+ PRODUCT_DSN+ "\"}}}";  options.putString(AuthzConstants.BUNDLE_KEY.SCOPE_DATA.val,scope_data);  options.putBoolean(AuthzConstants.BUNDLE_KEY.GET_AUTH_CODE.val,true);  options.putString(AuthzConstants.BUNDLE_KEY.CODE_CHALLENGE.val,getCodeChallenge());  options.putString(AuthzConstants.BUNDLE_KEY.CODE_CHALLENGE_METHOD.val,"S256");  mAuthManager.authorize(APP_SCOPES,options,authListener);}  }
class C{  public E first(){  return backingMap.firstKey();}  }
class C{  public PdxRegistryMismatchException(String message){  super(message);}  }
class C{  private void commitDeletions(UpdateRequestProcessor processor,SolrQueryRequest req) throws IOException {  CommitUpdateCommand commit=new CommitUpdateCommand(req,optimizeAfterDeletion);  commit.softCommit=softCommit;  processor.processCommit(commit);}  }
class C{  public static void main(String[] args){  tf=NumberFormat.getInstance();  tf.setGroupingUsed(true);  tf.setMaximumFractionDigits(0);  int LOW_T=1024;  int HIGH_T=65536;  int maxN=solutions.length - 1;  System.out.println("n\t\tActual number\tEst. T=1024\tEst. T=8192\tEst. T=65,536");  for (int n=1; n <= maxN; n++) {    BigDecimal results[]=new BigDecimal[4];    for (int idx=0, m=LOW_T; m <= HIGH_T; m*=8, idx++) {      results[idx]=new BigDecimal(0);      for (int t=0; t < m; t++) {        Board b=new Board(n);        int r=0;        BigDecimal lastEstimate=new BigDecimal(1);        while (r < n) {          int numChildren=b.numChildren(r);          if (!b.randomNextBoard(r)) {            lastEstimate=new BigDecimal(0);            break;          }          lastEstimate=lastEstimate.multiply(new BigDecimal(numChildren));          r++;        }        results[idx]=results[idx].add(lastEstimate);      }      results[idx]=results[idx].divide(new BigDecimal(m));    }    System.out.println(tab(n) + tab(solutions[n]) + tab(results[0])+ tab(results[1])+ tab(results[2]));  }}  }
class C{  public DrawerBuilder withStatusBarColor(@ColorInt int statusBarColor){  this.mStatusBarColor=statusBarColor;  return this;}  }
class C{  public static void main(String[] args){  if (args.length != 2) {    usage();    return;  }  String userName=args[0];  String userPassword=args[1];  try {    metafeedUrl=new URL(METAFEED_URL_BASE + userName);    allcalendarsFeedUrl=new URL(METAFEED_URL_BASE + userName + ALLCALENDARS_FEED_URL_SUFFIX);    owncalendarsFeedUrl=new URL(METAFEED_URL_BASE + userName + OWNCALENDARS_FEED_URL_SUFFIX);  } catch (  MalformedURLException e) {    System.err.println("Uh oh - you've got an invalid URL.");    e.printStackTrace();    return;  }  CalendarService service=new CalendarService("demo-CalendarFeedDemo-1");  try {    service.setUserCredentials(userName,userPassword);  } catch (  AuthenticationException e) {    e.printStackTrace();  }  try {    System.out.println("Calendars in metafeed");    printUserCalendars(service,metafeedUrl);    System.out.println("Calendars in allcalendars feed");    printUserCalendars(service,allcalendarsFeedUrl);    System.out.println("Calendars in owncalendars feed");    printUserCalendars(service,owncalendarsFeedUrl);    CalendarEntry newCalendar=createCalendar(service);    CalendarEntry updatedCalendar=updateCalendar(newCalendar);    deleteCalendar(newCalendar);    CalendarEntry newSubscription=createSubscription(service);    CalendarEntry updatedSubscription=updateSubscription(newSubscription);    deleteSubscription(newSubscription);  } catch (  IOException e) {    System.err.println("There was a problem communicating with the service.");    e.printStackTrace();  }catch (  ServiceException e) {    System.err.println("The server had a problem handling your request.");    e.printStackTrace();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TN4_CLASSIFIER__DECLARED_TYPE_ACCESS_MODIFIER:    return getDeclaredTypeAccessModifier();case TypesPackage.TN4_CLASSIFIER__DECLARED_PROVIDED_BY_RUNTIME:  return isDeclaredProvidedByRuntime();case TypesPackage.TN4_CLASSIFIER__DYNAMIZABLE:return isDynamizable();case TypesPackage.TN4_CLASSIFIER__TYPING_STRATEGY:return getTypingStrategy();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean contains(int rX,int rY,int rWidth,int rHeight){  return x <= rX && y <= rY && x + size.getWidth() >= rX + rWidth && y + size.getHeight() >= rY + rHeight;}  }
class C{  public InferencerConnectionWrapper(InferencerConnection con){  super(con);}  }
class C{  private boolean validateNewSchemaColumnsAreAdditiveToOldSchemaColumns(List<SchemaColumn> newSchemaColumns,List<SchemaColumn> oldSchemaColumns){  if (newSchemaColumns == null || oldSchemaColumns == null) {    return (newSchemaColumns == null && oldSchemaColumns == null);  } else   if (newSchemaColumns.size() != oldSchemaColumns.size()) {    return false;  } else {    for (int i=0; i < newSchemaColumns.size(); i++) {      SchemaColumn newSchemaColumnCopy=(SchemaColumn)newSchemaColumns.get(i).clone();      SchemaColumn oldSchemaColumnCopy=(SchemaColumn)oldSchemaColumns.get(i).clone();      newSchemaColumnCopy.setDescription(null);      oldSchemaColumnCopy.setDescription(null);      if (SCHEMA_COLUMN_DATA_TYPES_WITH_ALLOWED_SIZE_INCREASE.contains(newSchemaColumnCopy.getType().toUpperCase())) {        int newSize=NumberUtils.toInt(newSchemaColumnCopy.getSize());        int oldSize=NumberUtils.toInt(oldSchemaColumnCopy.getSize());        if (oldSize > 0 && newSize >= oldSize) {          newSchemaColumnCopy.setSize(null);          oldSchemaColumnCopy.setSize(null);        }      }      if (!newSchemaColumnCopy.equals(oldSchemaColumnCopy)) {        return false;      }    }    return true;  }}  }
class C{  public void stateChanged(ChangeEvent e){  if (e.getSource() != tabbedPane)   return;  if (tabbedPane.getSelectedIndex() == 1)   createGrid();}  }
class C{  public boolean hasHistory(){  return true;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  protected int FilterExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int filterMatch;  if (PrimaryExpr()) {    if (tokenIs('[')) {      insertOp(opPos,2,OpCodes.OP_LOCATIONPATH);      while (tokenIs('[')) {        Predicate();      }      filterMatch=FILTER_MATCH_PREDICATES;    } else {      filterMatch=FILTER_MATCH_PRIMARY;    }  } else {    filterMatch=FILTER_MATCH_FAILED;  }  return filterMatch;}  }
class C{  static void redistributeBuckets(ArrayList<NotificationInfo> highPriorityEvents,ArrayList<NotificationInfo> mediumPriorityEvents,ArrayList<NotificationInfo> lowPriorityEvents,int maxNotifications){  if (highPriorityEvents.size() > maxNotifications) {    lowPriorityEvents.addAll(0,mediumPriorityEvents);    List<NotificationInfo> itemsToMoveSublist=highPriorityEvents.subList(0,highPriorityEvents.size() - maxNotifications);    lowPriorityEvents.addAll(0,itemsToMoveSublist);    if (DEBUG) {      logEventIdsBumped(mediumPriorityEvents,itemsToMoveSublist);    }    mediumPriorityEvents.clear();    itemsToMoveSublist.clear();  }  if (mediumPriorityEvents.size() + highPriorityEvents.size() > maxNotifications) {    int spaceRemaining=maxNotifications - highPriorityEvents.size();    List<NotificationInfo> itemsToMoveSublist=mediumPriorityEvents.subList(spaceRemaining,mediumPriorityEvents.size());    lowPriorityEvents.addAll(0,itemsToMoveSublist);    if (DEBUG) {      logEventIdsBumped(itemsToMoveSublist,null);    }    itemsToMoveSublist.clear();  }}  }
class C{  public AlgorithmInitializationException(Algorithm algorithm){  super(algorithm);}  }
class C{  private void sendMotionEvent(MotionEvent prototype,int action,int pointerIdBits,int policyFlags){  prototype.setAction(action);  MotionEvent event=null;  if (pointerIdBits == ALL_POINTER_ID_BITS) {    event=prototype;  } else {    event=prototype.split(pointerIdBits);  }  if (action == MotionEvent.ACTION_DOWN) {    event.setDownTime(event.getEventTime());  } else {    event.setDownTime(mInjectedPointerTracker.getLastInjectedDownEventTime());  }  if (mLongPressingPointerId >= 0) {    final int remappedIndex=event.findPointerIndex(mLongPressingPointerId);    final int pointerCount=event.getPointerCount();    PointerProperties[] props=PointerProperties.createArray(pointerCount);    PointerCoords[] coords=PointerCoords.createArray(pointerCount);    for (int i=0; i < pointerCount; i++) {      event.getPointerProperties(i,props[i]);      event.getPointerCoords(i,coords[i]);      if (i == remappedIndex) {        coords[i].x-=mLongPressingPointerDeltaX;        coords[i].y-=mLongPressingPointerDeltaY;      }    }    MotionEvent remapped=MotionEvent.obtain(event.getDownTime(),event.getEventTime(),event.getAction(),event.getPointerCount(),props,coords,event.getMetaState(),event.getButtonState(),1.0f,1.0f,event.getDeviceId(),event.getEdgeFlags(),event.getSource(),event.getFlags());    if (event != prototype) {      event.recycle();    }    event=remapped;  }  if (DEBUG) {    Slog.d(LOG_TAG,"Injecting event: " + event + ", policyFlags=0x"+ Integer.toHexString(policyFlags));  }  policyFlags|=WindowManagerPolicy.FLAG_PASS_TO_USER;  if (mNext != null) {    mNext.onMotionEvent(event,null,policyFlags);  }  mInjectedPointerTracker.onMotionEvent(event);  if (event != prototype) {    event.recycle();  }}  }
class C{  public static void execute(Connection con,ExecutablePool pool,String region,Object key,Object expectedOldValue,Operation operation,EntryEventImpl event,Object callbackArg){  AbstractOp op=new DestroyOpImpl(region,key,expectedOldValue,operation,event,callbackArg);  pool.executeOn(con,op);}  }
class C{  public JSONObject(){  names=new ArrayList<String>();  values=new ArrayList<JSONValue>();  table=new HashIndexTable();}  }
class C{  static RegisterOperand InsertUnary(Instruction s,IR ir,Operator operator,TypeReference type,Operand o1){  RegisterOperand t=ir.regpool.makeTemp(type);  s.insertBefore(CPOS(s,Unary.create(operator,t,o1)));  return t.copyD2U();}  }
class C{  public Vector4d normalize(){  double invLength=1.0 / length();  x*=invLength;  y*=invLength;  z*=invLength;  w*=invLength;  return this;}  }
class C{  public void close() throws SQLException {  connection.close();}  }
class C{  protected String instanceToSvmlight(Instance inst){  StringBuffer result;  int i;  result=new StringBuffer();  if (inst.classAttribute().isNominal()) {    if (inst.classValue() == 0) {      result.append("1");    } else     if (inst.classValue() == 1) {      result.append("-1");    }  } else {    result.append("" + Utils.doubleToString(inst.classValue(),MAX_DIGITS));  }  for (i=0; i < inst.numAttributes(); i++) {    if (i == inst.classIndex()) {      continue;    }    if (inst.value(i) == 0) {      continue;    }    result.append(" " + (i + 1) + ":"+ Utils.doubleToString(inst.value(i),MAX_DIGITS));  }  return result.toString();}  }
class C{  public static void previousImage(final IdocApplet ui){  ElementVO ele=(ElementVO)ui.getFileVO().getListImage().get(ui.getFileVO().getImageSelectIndex());  if (ele.getImageSelectIndex() - 1 < 0) {    ele.setImageSelectIndex(ele.getNumPages() - 1);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() - 1);  }}  }
class C{  public static boolean isEmpty(@NonNull Realm realm){  return realm.where(Group.class).findFirst() == null;}  }
class C{  protected void verify(Date periods[][],BigDecimal expectedPrice,BigDecimal discountAmount,int paramTestMonth) throws Exception {  verify(SUBSCRIPTION_ID,periods,expectedPrice,discountAmount,paramTestMonth);}  }
class C{  public static Subscription emptySubscription(){  return EmptySubscription.INSTANCE;}  }
class C{  @SuppressWarnings("rawtypes") @Pure(Enforcement.FORCE) static public Object[] seqToNewArray(ISeq seq,Object[] passed,boolean reverse){  int len=seq == null ? 0 : seq.size();  Object[] dest=(Object[])Array.newInstance(passed.getClass().getComponentType(),len);  for (int i=0; seq != null; ++i, seq=seq.next()) {    if (reverse) {      dest[len - i - 1]=seq.first();    } else {      dest[i]=seq.first();    }  }  return dest;}  }
class C{  public Config(File diskDir,String poolName,boolean persistBackup,boolean registerInterest){  this.registerInterest=registerInterest;  this.persistBackup=persistBackup;  this.diskDir=diskDir;  this.poolName=poolName;}  }
class C{  void writeToByteBuffer(ByteBuffer buffer,boolean mb,boolean me){  boolean sr=mPayload.length < 256;  boolean il=mId.length > 0;  byte flags=(byte)((mb ? FLAG_MB : 0) | (me ? FLAG_ME : 0) | (sr ? FLAG_SR : 0)| (il ? FLAG_IL : 0)| mTnf);  buffer.put(flags);  buffer.put((byte)mType.length);  if (sr) {    buffer.put((byte)mPayload.length);  } else {    buffer.putInt(mPayload.length);  }  if (il) {    buffer.put((byte)mId.length);  }  buffer.put(mType);  buffer.put(mId);  buffer.put(mPayload);}  }
class C{  private void quadFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public void removeAllListeners(){  messageListeners.clear();  children.clear();}  }
class C{  @Inject public EclipseBasedN4JSWorkspace(IWorkspaceRoot workspace,IResourceSetProvider resourceSetProvider){  this.workspace=workspace;  this.resourceSetProvider=resourceSetProvider;}  }
class C{  public static <S extends HasRowOverHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    RowOverEvent event=new RowOverEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @Inline static void compilePutfieldBarrierOffsetImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.offsetFieldWriteBarrierMethod);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET:    if (resolve)     return getRewiredTarget();  return basicGetRewiredTarget();case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__ANY_PLUS_ACCESS:return isAnyPlusAccess();case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__NAME_OF_ANY_PLUS_PROPERTY:return getNameOfAnyPlusProperty();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void exportTree(Tree tree) throws IOException {  java.util.List<Tree> trees=new ArrayList<Tree>();  trees.add(tree);  exportTrees(trees);}  }
class C{  public static boolean makeDirectory(String directory,boolean createParents) throws IOException {  boolean created=false;  File dir=new File(directory);  if (createParents) {    created=dir.mkdirs();    if (created) {      log.debug("Directory created: {}",dir.getAbsolutePath());    } else {      log.debug("Directory was not created: {}",dir.getAbsolutePath());    }  } else {    created=dir.mkdir();    if (created) {      log.debug("Directory created: {}",dir.getAbsolutePath());    } else {      log.debug("Directory was not created: {}",dir.getAbsolutePath());    }  }  dir=null;  return created;}  }
class C{  public TLCRegionContainer(int offset,int length){  super(offset,length);}  }
class C{  @Override protected void validate(){  failIf((this.value < 0 || this.value > 1.0),"Ratio must be a float between 0 and 1");}  }
class C{  public CharBuffer insert(int index,char[] buffer,int offset,int len){  int length=length();  if (index < 0 || length < index)   throw new StringIndexOutOfBoundsException();  ensureCapacity(len + length);  int tail=length - index;  char[] thisBuffer=buffer;  for (int i=tail - 1; i >= 0; i--)   buffer[index + len + i]=thisBuffer[index + i];  System.arraycopy(buffer,offset,thisBuffer,index,len);  length(length + len);  return this;}  }
class C{  public VcsCommitStyleImpl(@Nullable Color foreground,@Nullable Color background,@Nullable VcsLogHighlighter.TextStyle textStyle){  myForeground=foreground;  myBackground=background;  myTextStyle=textStyle;}  }
class C{  public ToStringBuilder append(String fieldName,byte[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.WINDOWS_OS ? Boolean.valueOf(((SageTVInfraredReceive)stack.getUIMgrSafe().getRouter().getDefaultInputPlugin()).setIRReceivePort(getString(stack))) : Boolean.FALSE;}  }
class C{  public static BigDecimal allocatedAmtToDate(int C_Invoice_ID,int C_Currency_ID,int C_ConversionType_ID,BigDecimal MultiplierAP,Timestamp DateAcct) throws SQLException {  BigDecimal paidAmt=Adempiere.ZERO;  String sql="SELECT a.AD_Client_ID, a.AD_Org_ID," + " al.Amount, al.DiscountAmt, al.WriteOffAmt," + " a.C_Currency_ID, a.DateTrx "+ "FROM C_AllocationLine al"+ " INNER JOIN C_AllocationHdr a ON (al.C_AllocationHdr_ID=a.C_AllocationHdr_ID) "+ "WHERE al.C_Invoice_ID=?"+ " AND a.IsActive='Y' AND a.DateAcct <= ?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,C_Invoice_ID);  pstmt.setTimestamp(2,DateAcct);  ResultSet rs=pstmt.executeQuery();  while (rs.next()) {    int AD_Client_ID=rs.getInt(1);    int AD_Org_ID=rs.getInt(2);    BigDecimal Amount=rs.getBigDecimal(3);    BigDecimal DiscountAmt=rs.getBigDecimal(4);    BigDecimal WriteOffAmt=rs.getBigDecimal(5);    int C_CurrencyFrom_ID=rs.getInt(6);    Timestamp DateTrx=rs.getTimestamp(7);    BigDecimal invAmt=Amount.add(DiscountAmt).add(WriteOffAmt);    BigDecimal allocation=Currency.convert(invAmt.multiply(MultiplierAP),C_CurrencyFrom_ID,C_Currency_ID,DateTrx,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);    if (allocation != null)     paidAmt=paidAmt.add(allocation);  }  rs.close();  pstmt.close();  pstmt=null;  return paidAmt;}  }
class C{  public void close(){synchronized (this) {    if (_state == State.CLOSED)     return;    _state=State.CLOSED;  }synchronized (this) {    _idleHead=_idleTail=0;  }  for (int i=0; i < _idle.length; i++) {    ClientSocket stream;synchronized (this) {      stream=_idle[i];      _idle[i]=null;    }    if (stream != null)     stream.closeImpl();  }}  }
class C{  public SelectionToolSample(){  LineFigure lf=new LineFigure();  lf.setBounds(new Point2D.Double(40,40),new Point2D.Double(200,40));  Drawing drawing=new DefaultDrawing();  drawing.add(lf);  JFrame f=new JFrame("UltraMini");  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setSize(600,300);  DrawingView view=new DefaultDrawingView();  view.setDrawing(drawing);  f.getContentPane().add(view.getComponent());  DrawingEditor editor=new DefaultDrawingEditor();  editor.add(view);  editor.setTool(new SelectionTool());  f.setVisible(true);}  }
class C{  public AccountException(){  super();}  }
class C{  protected DTD(String name){  this.name=name;  defEntity("#RE",GENERAL,'\r');  defEntity("#RS",GENERAL,'\n');  defEntity("#SPACE",GENERAL,' ');  defineElement("unknown",EMPTY,false,true,null,null,null,null);}  }
class C{  public void loadSystemCustomConfigs(){  logger.debug("loadSystemCustomConfigs started");  long start=System.currentTimeMillis();  Map<String,CustomConfig> dbSystemConfigsByLabel=getSystemConfigsFromDb();  Map<String,CustomConfig> templateConfigsByLabel=getTemplateConfigs();  List<CustomConfig> created=new ArrayList<CustomConfig>();  List<CustomConfig> updated=new ArrayList<CustomConfig>();  List<CustomConfig> deleted=new ArrayList<CustomConfig>();  CustomConfig curConfig=null;  CustomConfig newConfig=null;  for (  String label : templateConfigsByLabel.keySet()) {    if (dbSystemConfigsByLabel.containsKey(label)) {      curConfig=dbSystemConfigsByLabel.get(label);      newConfig=templateConfigsByLabel.get(label);      if (!newConfig.getValue().equals(curConfig.getValue())) {        curConfig.setValue(newConfig.getValue());        logger.info("System-defined CustomConfig {} will be updated",label);        updated.add(curConfig);      }      dbSystemConfigsByLabel.remove(label);    } else {      newConfig=templateConfigsByLabel.get(label);      newConfig.setId(URIUtil.createId(CustomConfig.class));      logger.info("System-defined CustomConfig {} will be created",label);      created.add(newConfig);    }  }  for (  String label : dbSystemConfigsByLabel.keySet()) {    logger.info("System-defined CustomConfig {} will be deleted.",label);    deleted.add(dbSystemConfigsByLabel.get(label));    curConfig=getUserDefinedCustomConfig(label);    if (curConfig != null) {      logger.info("User-defined CustomConfig {} will be delete with user-defined instance",label);      deleted.add(curConfig);    }  }  dbClient.markForDeletion(deleted);  dbClient.createObject(created);  dbClient.persistObject(updated);  logger.info("loadSystemCustomConfigs results: Created: {}, Updated: {}, Deleted: {}",new Object[]{created.size(),updated.size(),deleted.size()});  logger.debug("loadSystemCustomConfigs ended and took {}",(System.currentTimeMillis() - start));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.136 -0500",hash_original_method="43D4C7C89B9FD66F7552269DD4A67BA9",hash_generated_method="E62196F0F1B9A536655AF36CC4AFAA5D") public static char[] toChars(int codePoint){  checkValidCodePoint(codePoint);  if (isSupplementaryCodePoint(codePoint)) {    int cpPrime=codePoint - 0x10000;    int high=0xD800 | ((cpPrime >> 10) & 0x3FF);    int low=0xDC00 | (cpPrime & 0x3FF);    return new char[]{(char)high,(char)low};  }  return new char[]{(char)codePoint};}  }
class C{  public void end() throws IOException {  socket.close();}  }
class C{  public void addStepsToReplicateCIFSShares(URI systemTarget,URI fsURI,StoragePort cifsPort,String taskId){  s_logger.info("Generating steps for Replicating CIFS shares to Target Cluster");  FileWorkflowCompleter completer=new FileWorkflowCompleter(fsURI,taskId);  Workflow workflow=null;  FileShare targetFileShare=null;  try {    FileShare sourceFileShare=s_dbClient.queryObject(FileShare.class,fsURI);    if (sourceFileShare.getPersonality().equals(PersonalityTypes.SOURCE.name())) {      List<String> targetfileUris=new ArrayList<String>();      targetfileUris.addAll(sourceFileShare.getMirrorfsTargets());      targetFileShare=s_dbClient.queryObject(FileShare.class,URI.create(targetfileUris.get(0)));    } else {      targetFileShare=s_dbClient.queryObject(FileShare.class,sourceFileShare.getParentFileShare());    }    workflow=this._workflowService.getNewWorkflow(this,REPLICATE_CIFS_SHARES_TO_TARGET_WF_NAME,false,taskId,completer);    SMBShareMap sourceSMBShareMap=sourceFileShare.getSMBFileShares();    SMBShareMap targetSMBShareMap=targetFileShare.getSMBFileShares();    if (sourceSMBShareMap == null && targetSMBShareMap != null) {      List<SMBFileShare> targetSMBShares=new ArrayList<SMBFileShare>(targetSMBShareMap.values());      deleteCIFSShareFromTarget(workflow,systemTarget,targetSMBShares,targetFileShare);    } else     if (targetSMBShareMap == null && sourceSMBShareMap != null) {      List<SMBFileShare> sourceSMBShares=new ArrayList<SMBFileShare>(sourceSMBShareMap.values());      createCIFSShareOnTarget(workflow,systemTarget,sourceSMBShares,cifsPort,targetFileShare,sourceFileShare);    } else     if (targetSMBShareMap != null && sourceSMBShareMap != null) {      List<SMBFileShare> targetSMBSharestoDelete=new ArrayList<SMBFileShare>();      List<SMBFileShare> targetSMBSharestoCreate=new ArrayList<SMBFileShare>();      for (      String sourceSMBSharesName : sourceSMBShareMap.keySet()) {        if (targetSMBShareMap.get(sourceSMBSharesName) == null) {          targetSMBSharestoCreate.add(sourceSMBShareMap.get(sourceSMBSharesName));        }      }      for (      String targetSMBSharesName : targetSMBShareMap.keySet()) {        if (sourceSMBShareMap.get(targetSMBSharesName) == null) {          targetSMBSharestoDelete.add(targetSMBShareMap.get(targetSMBSharesName));        }      }      if (!targetSMBSharestoCreate.isEmpty()) {        createCIFSShareOnTarget(workflow,systemTarget,targetSMBSharestoCreate,cifsPort,targetFileShare,sourceFileShare);      }      if (!targetSMBSharestoDelete.isEmpty()) {        deleteCIFSShareFromTarget(workflow,systemTarget,targetSMBSharestoDelete,targetFileShare);      }    }    String successMessage=String.format("Replicating source File System : %s, CIFS Shares to Target System finished successfully",sourceFileShare.getLabel());    workflow.executePlan(completer,successMessage);  } catch (  Exception ex) {    s_logger.error("Could not replicate source filesystem CIFS shares: " + fsURI,ex);    String opName=ResourceOperationTypeEnum.FILE_PROTECTION_ACTION_FAILOVER.getName();    ServiceError serviceError=DeviceControllerException.errors.createFileSharesFailed(fsURI.toString(),opName,ex);    completer.error(s_dbClient,this._locker,serviceError);  }}  }
class C{  private void union(Contact field,Annotation type,LabelMap map) throws Exception {  List<Label> list=support.getLabels(field,type);  for (  Label label : list) {    String path=label.getPath();    String name=label.getName();    if (map.get(path) != null) {      throw new PersistenceException("Duplicate annotation of name '%s' on %s",name,label);    }    process(field,label,map);  }}  }
class C{  public boolean isAcceptCheck(){  Object oo=get_Value(COLUMNNAME_AcceptCheck);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addCenterListener(CenterListener listener){  centerDelegate.add(listener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.253 -0400",hash_original_method="E6B23DB52F9D26F867FD6E13FC29AAA5",hash_generated_method="B8A737592209B154EDA075816BFCF468") public FileExistsException(File file){  super("File " + file + " exists");}  }
class C{  void handlePokeWakelock(int millis){  PowerManager powerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);  if (powerManager.isScreenOn()) {    mKeyguardScreenCallback.userActivity(millis);  }}  }
class C{  public static URL findWebInfClassesPath(ServletContext servletContext){  String path=servletContext.getRealPath("/WEB-INF/classes");  if (path == null)   return null;  File fp=new File(path);  if (fp.exists() == false)   return null;  try {    return fp.toURI().toURL();  } catch (  MalformedURLException e) {    throw new RuntimeException(e);  }}  }
class C{  static PreparedStatement prepareStatement(String sql) throws SQLException {  return prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);}  }
class C{  public final int compareTo(short other){  Version v=fromOrdinalNoThrow(other,false);  if (v == null) {    return this.ordinal() - other;  }  return compareTo(v);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.447 -0500",hash_original_method="148F3D833D327E61A5116C1FE99BCAC0",hash_generated_method="1DCC4F339640A2676A62F39974DC3ED7") public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (sipStack.isLoggingEnabled())   this.sipStack.getStackLogger().logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("BAD MESSAGE!");      sipStack.getStackLogger().logError(message);    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  southPanel.setLayout(southLayout);  centerPanel.setLayout(centerLayout);  mainLayout.setVgap(5);  getContentPane().add(mainPanel);  mainPanel.add(centerPanel,BorderLayout.CENTER);  mainPanel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(confirmPanel,BorderLayout.CENTER);  confirmPanel.addActionListener(this);}  }
class C{  public void tagEnableDebug(byte[] password) throws IOException {  if (tags != null) {    tags.tagEnableDebug(password);  }}  }
class C{  public ECPoint(BigInteger affineX,BigInteger affineY){  this.affineX=affineX;  if (this.affineX == null) {    throw new NullPointerException("affineX == null");  }  this.affineY=affineY;  if (this.affineY == null) {    throw new NullPointerException("affineY == null");  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'LESSONS' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'LESSON_NAME' TEXT NOT NULL ,"+ "'USER_LESSON' INTEGER NOT NULL ,"+ "'IMAGE_PATH' TEXT NOT NULL ,"+ "'BOOKMARKED' INTEGER NOT NULL );");}  }
class C{  private Read(){}  }
class C{  public void calculateTermFrequency(Set<Word> terms){  termFrequency=new int[terms.size()];  termMagnitude=0;  int i=0;  for (  final Word term : terms) {    for (    final Word token : tokens) {      if (term.getLemma().equals(token.getLemma())) {        termFrequency[i]++;        termMagnitude++;      }    }    i++;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void showHorizontalMenuPopUpWindow(View currentView,String[] actionButtonsValues,TypedArray actionButtonsIcons,String selectedOption,AdapterView.OnItemClickListener onItemClickListener){  HorizontalListView landscapeList=new HorizontalListView(mContext,null);  ListIconPopupWindowAdapter listAdapter=new ListIconPopupWindowAdapter(mContext,actionButtonsValues,actionButtonsIcons,selectedOption);  landscapeList.setOnItemClickListener(onItemClickListener);  landscapeList.setAdapter(listAdapter);  landscapeList.measure(0,0);  int popupLayoutHeight=0;  int popupLayoutWidth=0;  for (int i=0; i < listAdapter.getCount(); i++) {    View mView=listAdapter.getView(i,null,landscapeList);    mView.measure(View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED),View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED));    popupLayoutHeight=mView.getMeasuredHeight();    popupLayoutWidth+=mView.getMeasuredWidth();  }  int[] actionButtonCoordinates=new int[2];  currentView.getLocationOnScreen(actionButtonCoordinates);  int popupLayoutPadding=(int)mContext.getResources().getDimensionPixelSize(R.dimen.content_padding_normal);  final int popupLayoutX=actionButtonCoordinates[0] - popupLayoutWidth - popupLayoutPadding / 2;  final int popupLayoutY=actionButtonCoordinates[1];  mCurrentActionPopupWindow=(new CustomPopupWindow(landscapeList,popupLayoutWidth,popupLayoutHeight + popupLayoutPadding,R.style.SlideRightAnimation).getPopupWindow());  mCurrentActionPopupWindow.showAtLocation(mSurface,Gravity.NO_GRAVITY,popupLayoutX,popupLayoutY);}  }
class C{  public BERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  private void initializeContext() throws IOException {  String workingDir=System.getProperty("user.dir");  File dataset=FileUtils.getFile(workingDir + "/src/main/resources/dataset/emptyFlatXmlDataSet.xml");  File log4jFile=FileUtils.getFile(workingDir + "/src/main/resources/log4j/log4j.properties");  File datasetFolder=new File(destinationFolder + "/src/test/resources/dataSets");  File log4jFolder=new File(destinationFolder + "/src/test/resources");  dataset.mkdirs();  log4jFile.mkdirs();  FileUtils.copyFileToDirectory(dataset,datasetFolder);  FileUtils.copyFileToDirectory(log4jFile,log4jFolder);}  }
class C{  public static DirichletBayesIm serializableInstance(){  return blankDirichletIm(BayesPm.serializableInstance());}  }
class C{  public AsyncResult TestStackExAsync(TestStackExRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testParseSetMixedCase() throws Exception {  String values[]=new String[4];  values[0]="opt11111111111111";  values[1]="opt2222222222222";  values[2]="opt333333";  values[3]="OPT9012345678901234567890";  String[] setDefinition=new String[2];  setDefinition[0]="set('" + values[0] + "','"+ values[1]+ "','"+ values[2]+ "','"+ values[3]+ "')";  setDefinition[1]="SET('" + values[0] + "','"+ values[1]+ "','"+ values[2]+ "','"+ values[3]+ "')";  for (int i=0; i < 2; i++) {    String[] elements=SetToStringFilter.parseSet(setDefinition[i]);    for (int v=0; v < values.length; v++)     Assert.assertEquals(errorMsgMismatch,values[v],elements[v]);  }}  }
class C{  public SerializationException(){}  }
class C{  private static void addAbbreviation(String primitive,String abbreviation){  abbreviationMap.put(primitive,abbreviation);  reverseAbbreviationMap.put(abbreviation,primitive);}  }
class C{  public void testSyncFailure_StopsRefresh(){  mController.init();  SyncFinishedEvent event=new SyncFailedEvent();  mFakeEventBus.post(event);  verify(mMockUi).stopRefreshAnimation();}  }
