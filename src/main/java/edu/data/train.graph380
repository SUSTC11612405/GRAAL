class C{  public void transformValues(TIntFunction function){  byte[] states=_states;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public static Border createDashedBorder(int thickness,int color){  return createCSSBorder(TYPE_DASHED,thickness,color);}  }
class C{  public static Float createFloat(String str){  if (str == null) {    return null;  }  return Float.valueOf(str);}  }
class C{  private void eglSetup(){  mEGLDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("unable to get EGL14 display");  }  int[] version=new int[2];  if (!EGL14.eglInitialize(mEGLDisplay,version,0,version,1)) {    throw new RuntimeException("unable to initialize EGL14");  }  int[] attribList;  if (mEGLSharedContext == null) {    attribList=new int[]{EGL14.EGL_RED_SIZE,8,EGL14.EGL_GREEN_SIZE,8,EGL14.EGL_BLUE_SIZE,8,EGL14.EGL_RENDERABLE_TYPE,EGL14.EGL_OPENGL_ES2_BIT,EGL14.EGL_NONE};  } else {    attribList=new int[]{EGL14.EGL_RED_SIZE,8,EGL14.EGL_GREEN_SIZE,8,EGL14.EGL_BLUE_SIZE,8,EGL14.EGL_RENDERABLE_TYPE,EGL14.EGL_OPENGL_ES2_BIT,EGL_RECORDABLE_ANDROID,1,EGL14.EGL_NONE};  }  EGLConfig[] configs=new EGLConfig[1];  int[] numConfigs=new int[1];  EGL14.eglChooseConfig(mEGLDisplay,attribList,0,configs,0,configs.length,numConfigs,0);  checkEglError("eglCreateContext RGB888+recordable ES2");  int[] attrib_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};  if (mEGLSharedContext == null) {    mEGLContext=EGL14.eglCreateContext(mEGLDisplay,configs[0],EGL14.EGL_NO_CONTEXT,attrib_list,0);  } else {    mEGLContext=EGL14.eglCreateContext(mEGLDisplay,configs[0],mEGLSharedContext,attrib_list,0);  }  checkEglError("eglCreateContext");  int[] surfaceAttribs={EGL14.EGL_NONE};  mEGLSurface=EGL14.eglCreateWindowSurface(mEGLDisplay,configs[0],mSurface,surfaceAttribs,0);  checkEglError("eglCreateWindowSurface");  GLES20.glDisable(GLES20.GL_DEPTH_TEST);  GLES20.glDisable(GLES20.GL_CULL_FACE);}  }
class C{  protected int parseCalcMode(){  if (animationType == AnimationEngine.ANIM_TYPE_CSS && !targetElement.isPropertyAdditive(attributeLocalName) || animationType == AnimationEngine.ANIM_TYPE_XML && !targetElement.isAttributeAdditive(attributeNamespaceURI,attributeLocalName)) {    return SimpleAnimation.CALC_MODE_DISCRETE;  }  String calcModeString=element.getAttributeNS(null,SVG_CALC_MODE_ATTRIBUTE);  if (calcModeString.length() == 0) {    return getDefaultCalcMode();  } else   if (calcModeString.equals(SMILConstants.SMIL_LINEAR_VALUE)) {    return SimpleAnimation.CALC_MODE_LINEAR;  } else   if (calcModeString.equals(SMILConstants.SMIL_DISCRETE_VALUE)) {    return SimpleAnimation.CALC_MODE_DISCRETE;  } else   if (calcModeString.equals(SMILConstants.SMIL_PACED_VALUE)) {    return SimpleAnimation.CALC_MODE_PACED;  } else   if (calcModeString.equals(SMILConstants.SMIL_SPLINE_VALUE)) {    return SimpleAnimation.CALC_MODE_SPLINE;  }  throw new BridgeException(ctx,element,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_CALC_MODE_ATTRIBUTE,calcModeString});}  }
class C{  public static boolean isLocalFileUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_FILE_SCHEME.equals(scheme);}  }
class C{  @Override public void activateLight(){  lightControlList.stream().forEach(null);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  for (StepPattern pat=this; pat != null; pat=pat.m_relativePathPattern) {    if (pat != this)     buf.append("/");    buf.append(Axis.getNames(pat.m_axis));    buf.append("::");    if (0x000005000 == pat.m_whatToShow) {      buf.append("doc()");    } else     if (DTMFilter.SHOW_BYFUNCTION == pat.m_whatToShow) {      buf.append("function()");    } else     if (DTMFilter.SHOW_ALL == pat.m_whatToShow) {      buf.append("node()");    } else     if (DTMFilter.SHOW_TEXT == pat.m_whatToShow) {      buf.append("text()");    } else     if (DTMFilter.SHOW_PROCESSING_INSTRUCTION == pat.m_whatToShow) {      buf.append("processing-instruction(");      if (null != pat.m_name) {        buf.append(pat.m_name);      }      buf.append(")");    } else     if (DTMFilter.SHOW_COMMENT == pat.m_whatToShow) {      buf.append("comment()");    } else     if (null != pat.m_name) {      if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {        buf.append("@");      }      if (null != pat.m_namespace) {        buf.append("{");        buf.append(pat.m_namespace);        buf.append("}");      }      buf.append(pat.m_name);    } else     if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {      buf.append("@");    } else     if ((DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT) == pat.m_whatToShow) {      buf.append("doc-root()");    } else {      buf.append("?" + Integer.toHexString(pat.m_whatToShow));    }    if (null != pat.m_predicates) {      for (int i=0; i < pat.m_predicates.length; i++) {        buf.append("[");        buf.append(pat.m_predicates[i]);        buf.append("]");      }    }  }  return buf.toString();}  }
class C{  public static String toString(int[] oid){  StringBuilder sb=new StringBuilder(3 * oid.length);  for (int i=0; i < oid.length - 1; ++i) {    sb.append(oid[i]);    sb.append('.');  }  sb.append(oid[oid.length - 1]);  return sb.toString();}  }
class C{  public Operation createTaskStatus(String task,Operation op) throws IllegalArgumentException {  if (containsKey(task)) {    throw new IllegalArgumentException("task already exists");  }  if (op.getDescription() == null) {    throw new IllegalArgumentException("missing required parameter: description");  }  if (op.getStartTime() == null) {    op.setStartTime(Calendar.getInstance());  }  String status=op.getStatus();  if ((status.equalsIgnoreCase(Operation.Status.ready.name().toUpperCase())) || (status.equalsIgnoreCase(Operation.Status.error.name().toUpperCase()))) {    op.setEndTime(Calendar.getInstance());  }  put(task,op);  return op;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static boolean isPlaylistVisible(){  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPORTED_VARIABLE_DECLARATION;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public LRUCache(int cacheSizeBytes,PageFile<P> file){  this.file=file;  this.cacheSizeBytes=cacheSizeBytes;}  }
class C{  public String objectToJson(Object object) throws IllegalStateException {  ObjectMapper mapper=new ObjectMapper();  StringWriter stringWriter=new StringWriter();  try {    mapper.writeValue(stringWriter,object);  } catch (  IOException e) {    throw new IllegalStateException(e);  }  return stringWriter.toString();}  }
class C{  public Category(Wikipedia wiki,String pName) throws WikiApiException {  if (pName == null || pName.length() == 0) {    throw new WikiPageNotFoundException();  }  this.wiki=wiki;  catDAO=new CategoryDAO(wiki);  Title catTitle=new Title(pName);  createCategory(catTitle);}  }
class C{  boolean isContainerShowing(){  if (container == null) {    return false;  }  return container.isShowing();}  }
class C{  public static void gotoTableFromString(OFFlowMod.Builder fmb,String instStr,Logger log){  if (instStr == null || instStr.equals("")) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Goto Table Instruction not supported in OpenFlow 1.0");    return;  }  String[] keyValue=instStr.split("=");  if (keyValue.length != 2) {    throw new IllegalArgumentException("[Key, Value] " + keyValue + " does not have form 'key=value' parsing "+ instStr);  }  OFInstructionGotoTable.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildGotoTable();  ib.setTableId(TableId.of(Integer.parseInt(keyValue[1]))).build();  log.debug("Appending GotoTable instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public static boolean isSerializable(Class<?> c){  return ClassDiscovery.hasInterface(Serializable.class,c);}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public boolean isAutoSequence(){  Object oo=get_Value(COLUMNNAME_IsAutoSequence);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  @Override public void onLowMemory(){  super.onLowMemory();}  }
class C{  public List<Integer> finish(boolean right){  if (!active || right != this.right) {    return null;  } else   if (slots.isEmpty()) {    return null;  } else {    List<Integer> result=new ArrayList<>(slots);    reset();    return result;  }}  }
class C{  public ArrayList<HtmlLink> grabHTMLLinks(final String html){  ArrayList<HtmlLink> result=new ArrayList<>();  Matcher matcherTag=patternTag.matcher(html);  while (matcherTag.find()) {    String href=matcherTag.group(1);    String linkText=matcherTag.group(2);    Matcher matcherLink=patternLink.matcher(href);    while (matcherLink.find()) {      String link=matcherLink.group(1);      HtmlLink obj=new HtmlLink();      obj.setLink(link);      obj.setLinkText(linkText);      result.add(obj);    }  }  return result;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,(int)z1 / (int)z2);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      int const2=(int)constant2;      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,(int)z1 / const2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      int const1=(int)constant1;      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,const1 / (int)z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static BytesToNameCanonicalizer createRoot(){  long now=System.currentTimeMillis();  int seed=(((int)now) + ((int)now >>> 32)) | 1;  return createRoot(seed);}  }
class C{  private void markAsIncomplete(VM vm) throws IOException {  File backupDir=getBackupDirForMember(getBaselineDir(),getMemberId(vm));  assertTrue(backupDir.exists());  File incomplete=new File(backupDir,BackupManager.INCOMPLETE_BACKUP);  incomplete.createNewFile();}  }
class C{  public boolean forEach(TLongProcedure procedure){  byte[] states=_states;  long[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public static void addPRCRecipe(ItemStack inputSolid,FluidStack inputFluid,GasStack inputGas,ItemStack outputSolid,GasStack outputGas,double extraEnergy,int ticks){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addPRCRecipe",ItemStack.class,FluidStack.class,GasStack.class,ItemStack.class,GasStack.class,Double.TYPE,Integer.TYPE);    m.invoke(null,inputSolid,inputFluid,inputGas,outputSolid,outputGas,extraEnergy,ticks);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public CCAccelAmplitude(CCIntervalAction action,float d){  super(d);  rate=1.0f;  other=action;}  }
class C{  private void synchronise() throws IOException, RegistryException, InvalidConfigException {  LOG.info("Update default vocabularies to use latest versions...");  vocabManager.installOrUpdateDefaults();  LOG.info("Updating content of all installed vocabularies...");  for (  Vocabulary v : vocabManager.list()) {    LOG.debug("Updating vocabulary " + v.getUriString());    vocabManager.updateIfChanged(v.getUriString());  }  LOG.info("Updating content of all installed extensions...");  for (  Extension ex : extensionManager.list()) {    LOG.debug("Updating extension " + ex.getRowType());    extensionManager.updateIfChanged(ex.getRowType());  }}  }
class C{  public boolean isLeaf(){  return (childItems.size() == 0);}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("UTF8Targ");  targetClass=(ClassType)bpe.location().declaringType();  targetField=targetClass.fieldByName("aField");  ArrayReference targetVals=(ArrayReference)targetClass.getValue(targetClass.fieldByName("vals"));  for (int ii=0; ii < UTF8Targ.vals.length; ii++) {    StringReference val=(StringReference)targetVals.getValue(ii);    String valStr=val.value();    if (!valStr.equals(UTF8Targ.vals[ii]) || valStr.length() != UTF8Targ.vals[ii].length()) {      failure("     FAILED: Expected /" + printIt(UTF8Targ.vals[ii]) + "/, but got /"+ printIt(valStr)+ "/, length = "+ valStr.length());    }  }  doFancyVersion();  resumeTo("UTF8Targ","gus","()V");  try {    Thread.sleep(1000);  } catch (  InterruptedException ee) {  }  listenUntilVMDisconnect();  if (!testFailed) {    println("UTF8Test: passed");  } else {    throw new Exception("UTF8Test: failed");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void write(String s,int r){  for (int i=0; i < s.length(); i++)   write(s.charAt(i),r);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public Vec2D constrain(Vec2D min,Vec2D max){  x=MathUtils.clip(x,min.x,max.x);  y=MathUtils.clip(y,min.y,max.y);  return this;}  }
class C{  public final void writeByte(int v) throws java.io.IOException {  return;}  }
class C{  public PatternPathRouter(){  this.patternRouteList=new ArrayList<>();}  }
class C{  public void clear(IValidatable bean){  for (  Binding b : _optComponents.values()) {    b.clear(bean);  }  for (  Binding b : _bindings.values()) {    b.clear(bean);  }  _modified=false;}  }
class C{  private boolean isForAttributeOfLabelEqualsToIdAttributeOfFormField(Element element,String forAttributeValue){  if (StringUtils.isBlank(forAttributeValue)) {    return false;  }  for (  Element el : element.children().select(FORM_ELEMENT_CSS_LIKE_QUERY)) {    if (StringUtils.equalsIgnoreCase(forAttributeValue,el.id())) {      return true;    }  }  return false;}  }
class C{  public boolean reverseCorrectIt(){  log.info("reverseCorrectIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return false;}  }
class C{  @Deprecated public void addEventListener(AbstractPeerEventListener listener,Executor executor){  addBlocksDownloadedEventListener(executor,listener);  addChainDownloadStartedEventListener(executor,listener);  addConnectedEventListener(executor,listener);  addDisconnectedEventListener(executor,listener);  addGetDataEventListener(executor,listener);  addOnTransactionBroadcastListener(executor,listener);  addPreMessageReceivedEventListener(executor,listener);}  }
class C{  public synchronized static DockerClientFactory instance(){  if (instance == null) {    instance=new DockerClientFactory();  }  return instance;}  }
class C{  @Override public Double zscore(final String key,final String member){  checkIsInMultiOrPipeline();  client.zscore(key,member);  final String score=client.getBulkReply();  return (score != null ? new Double(score) : null);}  }
class C{  public ServerControllerTest(String name){  super(name);  this.baseDir=System.getProperty("com.mysql.jdbc.test.ServerController.basedir");}  }
class C{  public synchronized void add(File file){  if (file == null)   return;  File[] newValue=new File[value.length + 1];  System.arraycopy(value,0,newValue,0,value.length);  newValue[value.length]=file;  setValue(newValue);}  }
class C{  private boolean checkField(EditText editText){  boolean valid=true;  if (TextUtils.isEmpty(editText.getText())) {    editText.startAnimation(mWiggle);    editText.requestFocus();    valid=false;  }  return valid;}  }
class C{  protected void textChanged(){  this.narrowingDown=this.previousFilterText == null || this.previousFilterText.equals(ViewerMessages.FilteredTree_FilterMessage) || getFilterString().startsWith(this.previousFilterText);  this.previousFilterText=getFilterString();  this.refreshJob.cancel();  this.refreshJob.schedule(getRefreshJobDelay());}  }
class C{  protected Expression variable(int opPos) throws TransformerException {  Variable var=new Variable();  opPos=getFirstChildPos(opPos);  int nsPos=getOp(opPos);  java.lang.String namespace=(OpCodes.EMPTY == nsPos) ? null : (java.lang.String)getTokenQueue().elementAt(nsPos);  java.lang.String localname=(java.lang.String)getTokenQueue().elementAt(getOp(opPos + 1));  QName qname=new QName(namespace,localname);  var.setQName(qname);  return var;}  }
class C{  public void printMatrix(){  g.printMatrix();}  }
class C{  public NoSuchObjectException(final String msg,final Throwable e){  super(msg,e);  LOGGER.error(msg,e);}  }
class C{  public void add(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (last == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.first;    last.next=elem;    elem.prev=last;    last=insns.last;  }  cache=null;  insns.removeAll(false);}  }
class C{  public void testProcess(){  System.out.println("process");  AuditCommandImpl instance=null;}  }
class C{  private boolean resolveAmbiguity(Map<TestCase,Set<TestFitnessFunction>> testToGoals,Set<TestCase> tests,boolean unique){  Map<TestCase,Set<TestFitnessFunction>> fullTestToGoals=new LinkedHashMap<>();  for (  TestCase test : tests) {    Set<TestFitnessFunction> goals=filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals()));    goals.removeAll(testToGoals.get(test));    fullTestToGoals.put(test,goals);  }  if (unique)   findUniqueGoals(fullTestToGoals); else   findNonUbiquitousGoals(fullTestToGoals);  boolean added=false;  for (  TestCase test : tests) {    List<TestFitnessFunction> topGoals=getTopGoals(fullTestToGoals.get(test));    if (topGoals.isEmpty()) {      continue;    } else     if (topGoals.size() > MAX_SIMILAR_GOALS) {      TestFitnessFunction newGoal=chooseRepresentativeGoal(test,topGoals);      Set<TestFitnessFunction> newGoals=new LinkedHashSet<>(testToGoals.get(test));      newGoals.add(newGoal);      String newName=getTestName(test,newGoals);      if (newName.length() < MAX_CHARS) {        if (testToGoals.get(test).add(newGoal))         added=true;      }    } else {      Set<TestFitnessFunction> newGoals=new LinkedHashSet<>(testToGoals.get(test));      Iterator<TestFitnessFunction> iterator=topGoals.iterator();      String newName=testToName.get(test);      while (newName.length() < MAX_CHARS && iterator.hasNext()) {        TestFitnessFunction newGoal=iterator.next();        newGoals.add(newGoal);        newName=getTestName(test,newGoals);        if (testToGoals.get(test).add(newGoal))         added=true;      }    }  }  return added;}  }
class C{  @Override public UnitsRelations init(ProcessingEnvironment env){  elements=env.getElementUtils();  m=UnitsRelationsTools.buildAnnoMirrorWithDefaultPrefix(env,m.class);  km=UnitsRelationsTools.buildAnnoMirrorWithSpecificPrefix(env,m.class,Prefix.kilo);  mm=UnitsRelationsTools.buildAnnoMirrorWithSpecificPrefix(env,m.class,Prefix.milli);  m2=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,m2.class);  km2=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,km2.class);  mm2=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,mm2.class);  s=UnitsRelationsTools.buildAnnoMirrorWithDefaultPrefix(env,s.class);  h=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,h.class);  mPERs=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,mPERs.class);  kmPERh=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,kmPERh.class);  mPERs2=UnitsRelationsTools.buildAnnoMirrorWithNoPrefix(env,mPERs2.class);  return this;}  }
class C{  @Override public void performAdditionalDomainRenewLogic(DomainResource domainResource,String clientId,DateTime asOfDate,int years,EppInput eppInput,HistoryEntry historyEntry) throws EppException {  messageToThrow="renewed";}  }
class C{  public void addResourceClassPath(ClassLoader loader){  String classpath=null;  if (loader instanceof DynamicClassLoader)   classpath=((DynamicClassLoader)loader).getResourcePathSpecificFirst(); else   classpath=CauchoUtil.getClassPath();  addClassPath(classpath);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SafeVarargs public static <T>Optional<T> lowestCommonAncestor(TreeDef.Parented<T> treeDef,T... nodes){  return lowestCommonAncestor(treeDef,Arrays.asList(nodes));}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  private final void put(final String key,final int value){  super.put(key,Integer.toString(value));}  }
class C{  public void test_BlobIV_problemValue_01(){  final VTE vte=VTE.LITERAL;  final int hashCode=1974963648;  final int counter=0;  doBlobIVTest(vte,hashCode,counter);}  }
class C{  public static AffineTransformation scaleInstance(double xScale,double yScale){  AffineTransformation trans=new AffineTransformation();  trans.setToScale(xScale,yScale);  return trans;}  }
class C{  public Builder stereoReset(boolean stereoReset){  if (stereoReset) {    mFlags|=FLAG_STEREO_RESET;  } else {    mFlags&=~FLAG_STEREO_RESET;  }  return this;}  }
class C{  protected int numberOfAttributes(int total,double fraction){  int k=(int)Math.round((fraction < 1.0) ? total * fraction : fraction);  if (k > total)   k=total;  if (k < 1)   k=1;  return k;}  }
class C{  public static void writeToFileComplex_2D(String format,int n1,int n2,double[][] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int i=0; i < n1; i++) {      for (int j=0; j < 2 * n2; j=j + 2) {        if ((Math.abs(x[i][j]) < 5e-5) && (Math.abs(x[i][j + 1]) < 5e-5)) {          if (x[i][j + 1] >= 0.0) {            out.write("0 + 0i\t");          } else {            out.write("0 - 0i\t");          }          continue;        }        if (Math.abs(x[i][j + 1]) < 5e-5) {          if (x[i][j + 1] >= 0.0) {            out.write(String.format(format,x[i][j]) + " + 0i\t");          } else {            out.write(String.format(format,x[i][j]) + " - 0i\t");          }          continue;        }        if (Math.abs(x[i][j]) < 5e-5) {          if (x[i][j + 1] >= 0.0) {            out.write("0 + " + String.format(format,x[i][j + 1]) + "i\t");          } else {            out.write("0 - " + String.format(format,-x[i][j + 1]) + "i\t");          }          continue;        }        if (x[i][j + 1] < 0) {          out.write(String.format(format,x[i][j]) + " - " + String.format(format,-x[i][j + 1])+ "i\t");          continue;        }        out.write(String.format(format,x[i][j]) + " + " + String.format(format,x[i][j + 1])+ "i\t");      }      out.newLine();    }    out.newLine();    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static void d(String tag,String msg,Throwable thr){  log(LEVEL.DEBUG,tag,msg,thr);}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  @SuppressFBWarnings(value="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE",justification="File.listFiles() will return null if the File instance is not a directory. " + "Null dereference is not a possibility here since we validate inputFile is directory " + "via inputFile.isDirectory()") private static void zipDirectoryInternal(File inputFile,String directoryName,ZipOutputStream zos) throws IOException {  String entryName=directoryName + inputFile.getName();  if (inputFile.isDirectory()) {    entryName+="/";    File[] childFiles=inputFile.listFiles();    if (childFiles.length > 0) {      Arrays.sort(childFiles);      for (      File file : childFiles) {        zipDirectoryInternal(file,entryName,zos);      }      return;    }  }  ZipEntry entry=new ZipEntry(entryName);  entry.setTime(inputFile.lastModified());  zos.putNextEntry(entry);  if (inputFile.isFile()) {    Files.asByteSource(inputFile).copyTo(zos);  }}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  ResultAction changeCurrentMode(Mode mode){  return new UnwrapAction(getModeUsage().changeCurrentMode(mode));}  }
class C{  @Override public void flushToDisk() throws IOException {  getDelegate().flushToDisk();  logStream().flush();}  }
class C{  public static Number add(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return a.doubleValue() + b.doubleValue();  } else {    return a.longValue() + b.longValue();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.831 -0500",hash_original_method="6EB2D4EE24026300FF5D315D09C81847",hash_generated_method="5533FCC8620CB46E9315ABC72134C4C9") public float measureText(CharSequence text,int start,int end){  if (text == null) {    throw new IllegalArgumentException("text cannot be null");  }  if ((start | end | (end - start)| (text.length() - end)) < 0) {    throw new IndexOutOfBoundsException();  }  if (text.length() == 0 || start == end) {    return 0f;  }  if (text instanceof String) {    return measureText((String)text,start,end);  }  if (text instanceof SpannedString || text instanceof SpannableString) {    return measureText(text.toString(),start,end);  }  if (text instanceof GraphicsOperations) {    return ((GraphicsOperations)text).measureText(start,end,this);  }  char[] buf=TemporaryBuffer.obtain(end - start);  TextUtils.getChars(text,start,end,buf,0);  float result=measureText(buf,0,end - start);  TemporaryBuffer.recycle(buf);  return result;}  }
class C{  public boolean contains(String message){  return getMessage(message,false) != null;}  }
class C{  public final void removeRequired(String spec1,String spec2){  spec1=checkSpec(spec1);  spec2=checkSpec(spec2);  Set<MyNode> f1=getExtent(spec1);  Set<MyNode> f2=getExtent(spec2);  OrderedPair<Set<MyNode>> o=new OrderedPair<>(f1,f2);  requiredRulesSpecs.remove(o);}  }
class C{  protected void sequence_VarFakeDefinition(ISerializationContext context,VarFakeDefinition semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getVarFakeDefinitionAccess().getNameValid_IDParserRuleCall_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  @Override public void addPoolString(char[] buffer,int offset,int length){}  }
class C{  public void turnOff(){  on=false;}  }
class C{  private void clientServerTombstoneGCTest(String uniqueName,boolean replicatedRegion){  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  VM vm3=host.getVM(3);  final String name=uniqueName + "Region";  createServerRegion(vm0,name,replicatedRegion);  int port=createServerRegion(vm1,name,replicatedRegion);  createClientRegion(vm2,name,port,true,ClientRegionShortcut.CACHING_PROXY);  createClientRegion(vm3,name,port,true,ClientRegionShortcut.CACHING_PROXY);  createEntries(vm2);  destroyEntries(vm3);  unregisterInterest(vm3);  forceGC(vm0);  if (!replicatedRegion) {    forceGC(vm1);  }  checkClientReceivedGC(vm2);  checkClientDoesNotReceiveGC(vm3);}  }
class C{  private AbstractAnalysisFactory initialize(Class<? extends AbstractAnalysisFactory> factoryClazz) throws IOException {  Map<String,String> args=new HashMap<>();  args.put("luceneMatchVersion",Version.LATEST.toString());  Constructor<? extends AbstractAnalysisFactory> ctor;  try {    ctor=factoryClazz.getConstructor(Map.class);  } catch (  Exception e) {    throw new RuntimeException("factory '" + factoryClazz + "' does not have a proper ctor!");  }  AbstractAnalysisFactory factory=null;  try {    factory=ctor.newInstance(args);  } catch (  InstantiationException|IllegalAccessException e) {    throw new RuntimeException(e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof IllegalArgumentException) {      return null;    }  }  if (factory instanceof ResourceLoaderAware) {    try {      ((ResourceLoaderAware)factory).inform(new StringMockResourceLoader(""));    } catch (    IOException ignored) {    }catch (    IllegalArgumentException ignored) {    }  }  return factory;}  }
class C{  public OutlierResult run(Relation<? extends NumberVector> relation){  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT);  DoubleMinMax minmax=new DoubleMinMax();  Mean m=new Mean();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    m.reset();    NumberVector nv=relation.get(iditer);    for (int i=0; i < nv.getDimensionality(); i++) {      m.put(nv.doubleValue(i));    }    final double score=m.getMean();    scores.putDouble(iditer,score);    minmax.put(score);  }  DoubleRelation scoreres=new MaterializedDoubleRelation("Trivial mean score","mean-outlier",scores,relation.getDBIDs());  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax());  return new OutlierResult(meta,scoreres);}  }
class C{  @SuppressWarnings("unchecked") private <D extends ChronoLocalDate>ChronoLocalDateTime<D> tomorrowNoon(D date){  return (ChronoLocalDateTime<D>)date.plus(1,ChronoUnit.DAYS).atTime(LocalTime.of(12,0));}  }
class C{  protected void computeTreeLayout(TreeNode root,DrawContext dc,Dimension frameSize,Point location,int level,java.util.List<NodeLayout> nodes){  TreeAttributes attributes=this.getActiveAttributes();  int oldX=location.x;  if (this.mustDisplayNode(root,level)) {    Dimension size=this.getNodeSize(dc,frameSize,location.x,root,attributes);    int y=location.y - (size.height + this.getActiveAttributes().getRowSpacing());    Rectangle nodeBounds=new Rectangle(location.x,y,size.width,size.height);    NodeLayout layout=this.layoutCache.get(root);    if (layout == null)     layout=new NodeLayout(root);    layout.bounds=nodeBounds;    int rowSpacing=attributes.getRowSpacing();    layout.pickBounds=new Rectangle(0,nodeBounds.y - rowSpacing,frameSize.width,nodeBounds.height + rowSpacing * 2);    nodes.add(layout);    location.x+=this.indent;    location.y-=(size.height + this.getActiveAttributes().getRowSpacing());  }  if (this.tree.isNodeExpanded(root)) {    for (    TreeNode child : root.getChildren()) {      this.computeTreeLayout(child,dc,frameSize,location,level + 1,nodes);    }  }  location.x=oldX;}  }
class C{  public boolean isEncryptedColumn(){  return m_vo.IsEncryptedColumn;}  }
class C{  public void updateFile(OCFile file){  setFile(file);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.878 -0400",hash_original_method="028254B5788FE35C5559294819B2BDF5",hash_generated_method="AA47099D6C20923CDC4857478D78175E") public static IOFileFilter ageFileFilter(long cutoff){  return new AgeFileFilter(cutoff);}  }
class C{  public static JDialog createDialog(Component c,String title,boolean modal,JColorChooser chooserPane,ActionListener okListener,ActionListener cancelListener) throws HeadlessException {  Window window=JOptionPane.getWindowForComponent(c);  ColorChooserDialog dialog;  if (window instanceof Frame) {    dialog=new ColorChooserDialog((Frame)window,title,modal,c,chooserPane,okListener,cancelListener);  } else {    dialog=new ColorChooserDialog((Dialog)window,title,modal,c,chooserPane,okListener,cancelListener);  }  dialog.getAccessibleContext().setAccessibleDescription(title);  return dialog;}  }
class C{  public void testGridLineStringsRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(10);  grid.setNumberRows(10);  LineString[] pt=new LineString[100];  STRUCT[] st=new STRUCT[100];  LineStringGenerator pg=new LineStringGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setNumberPoints(10);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 100) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(LineString)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  OraReader or=new OraReader();  i=0;  while (i < 100 && pt[i] != null) {    LineString pt2=(LineString)or.read(st[i]);    assertTrue("The input LineString is not the same as the output LineString",pt[i].equals(pt2));    i++;  }}  }
class C{  public HttpAuthenticationException(String message){  super(message);}  }
class C{  public List<Domain> loadDomains(Universe root,Map<Table,Domain> coverage){  Project project=root.getProject();  if (SPARK_FLAG) {  }  List<Domain> domains=domainDAO.findByProject(root.getContext(),project.getId());  if (DYNAMIC_FLAG) {    try {      Set<AccessRight> accessRights=project.getAccessRights();      HashSet<String> checkIDs=new HashSet<String>();      for (      Domain domain : domains) {        checkIDs.add(domain.getId().getDomainId());        if (domain.getSubject() != null) {          try {            coverage.put(root.getTable(domain),domain);          } catch (          ScopeException e) {          }        }      }      HashMap<String,Pair<Domain,Table>> checkDuplicate=new HashMap<String,Pair<Domain,Table>>();      for (      Table table : root.getTables()) {        if (!coverage.containsKey(table)) {          String domainName=table.getName();          String tableRef=table.getSchema().isNullSchema() ? table.getName() : (table.getSchema().getName() + ":" + table.getName());          DomainPK domainPk=new DomainPK(project.getId(),checkUniqueId(tableRef,checkIDs));          Domain domain=new Domain(domainPk,domainName,new Expression("'" + tableRef + "'"),true);          if (table.getDescription() != null)           domain.setDescription(table.getDescription());          domain.setAccessRights(accessRights);          AccessRightsUtils.getInstance().setAccessRights(root.getContext(),domain,project);          domains.add(domain);          coverage.put(table,domain);          checkIDs.add(domainPk.getDomainId());          if (checkDuplicate.containsKey(domainName)) {            Pair<Domain,Table> duplicate=checkDuplicate.get(domainName);            if (duplicate != null) {              Table t=duplicate.getSecond();              Domain d=duplicate.getFirst();              d.setName(domainName + " (" + t.getSchema().getName()+ ")");              checkDuplicate.put(domainName,null);            }            domain.setName(domainName + " (" + table.getSchema().getName()+ ")");          } else {            checkDuplicate.put(domainName,new Pair<Domain,Table>(domain,table));          }        }      }    } catch (    DatabaseServiceException e) {      logger.error(e.getMessage(),e);      if (domains.isEmpty()) {        throw e;      } else {        throw e;      }    }catch (    ExecutionException e) {      logger.error(e.getMessage(),e);    }  }  if (SPARK_FLAG) {  }  return domains;}  }
class C{  public static Test suite(){  return (new TestSuite(AjaxRequestScriptITCase.class));}  }
class C{  private void findDestinationsForCarsFromLocation(RouteLocation rl,int routeIndex,boolean isSecondPass) throws BuildFailedException {  if (_reqNumOfMoves <= 0) {    return;  }  boolean messageFlag=true;  boolean foundCar=false;  _success=false;  for (_carIndex=0; _carIndex < _carList.size(); _carIndex++) {    Car car=_carList.get(_carIndex);    if (isSecondPass && !car.getFinalDestinationName().equals(rl.getName())) {      continue;    }    if (!car.getLocationName().equals(rl.getName())) {      continue;    }    foundCar=true;    if (isSecondPass && messageFlag) {      messageFlag=false;      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildExtraPassForLocation"),new Object[]{rl.getName()}));      addLine(_buildReport,SEVEN,BLANK_LINE);    }    if (!checkPickUpTrainDirection(car,rl)) {      addLine(_buildReport,FIVE,BLANK_LINE);      continue;    }    car=getCarOrder(car);    if (!generateCarLoadFromStaging(car)) {      if (!generateCarLoadStagingToStaging(car) && car.getTrack() == _departStageTrack && !_departStageTrack.shipsLoad(car.getLoadName(),car.getTypeName())) {        addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildErrorCarStageLoad"),new Object[]{car.toString(),car.getLoadName(),_departStageTrack.getName()}));        addLine(_buildReport,FIVE,BLANK_LINE);        continue;      }    }    if (findFinalDestinationForCarLoad(car) && car.getDestination() == null && car.getTrack() != _departStageTrack) {      checkCarOrder(car);      continue;    }    if (car.getFinalDestination() != null && car.getDestination() == null) {      if (!_train.isAllowLocalMovesEnabled() && splitString(car.getLocationName()).equals(splitString(car.getFinalDestinationName())) && car.getTrack() != _departStageTrack) {        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarHasFinalDestNoMove"),new Object[]{car.toString(),car.getFinalDestinationName()}));        addLine(_buildReport,FIVE,BLANK_LINE);        log.debug("Removing car ({}) from list",car.toString());        _carList.remove(car);        _carIndex--;        continue;      }      if (!_train.isAllowThroughCarsEnabled() && !_train.isLocalSwitcher() && !car.isCaboose()&& !car.hasFred()&& !car.isPassenger()&& splitString(car.getLocationName()).equals(splitString(_departLocation.getName()))&& splitString(car.getFinalDestinationName()).equals(splitString(_terminateLocation.getName()))&& !splitString(car.getLocationName()).equals(splitString(car.getFinalDestinationName()))) {        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarHasFinalDestination"),new Object[]{car.toString(),car.getLocationName(),car.getFinalDestinationName()}));        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildThroughTrafficNotAllow"),new Object[]{_departLocation.getName(),_terminateLocation.getName()}));        if (car.getTrack() == _departStageTrack) {          addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildErrorCarStageDest"),new Object[]{car.toString()}));        } else {          log.debug("Removing car ({}) from list",car.toString());          _carList.remove(car);          _carIndex--;        }        addLine(_buildReport,FIVE,BLANK_LINE);        continue;      }      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarRoutingBegins"),new Object[]{car.toString(),car.getTypeName(),car.getLoadName(),car.getLocationName(),car.getTrackName(),car.getFinalDestinationName(),car.getFinalDestinationTrackName()}));      if (car.getFinalDestinationTrack() != null && car.getFinalDestinationTrack().getScheduleMode() == Track.MATCH) {        String status=car.testDestination(car.getFinalDestination(),car.getFinalDestinationTrack());        if (!status.equals(Track.OKAY) && !status.startsWith(Track.LENGTH) && !(status.contains(Track.CUSTOM) && status.contains(Track.LOAD))) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoDestTrackNewLoad"),new Object[]{car.getFinalDestination().getName(),car.getFinalDestinationTrack().getName(),car.toString(),car.getLoadName(),status}));          if (status.startsWith(Track.CAPACITY)) {            addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildRemovingFinalDestination"),new Object[]{car.getFinalDestinationTrack().getName(),car.toString(),car.getFinalDestination().getName(),car.getFinalDestinationTrack().getName()}));            car.setFinalDestination(null);            car.setFinalDestinationTrack(null);          } else           if (car.getTrack() == _departStageTrack) {            addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildErrorCarStageDest"),new Object[]{car.toString()}));          } else {            log.debug("Removing car ({}) from list",car.toString());            _carList.remove(car);            _carIndex--;          }          addLine(_buildReport,FIVE,BLANK_LINE);          continue;        }      }      if (!Router.instance().setDestination(car,_train,_buildReport)) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNotAbleToSetDestination"),new Object[]{car.toString(),Router.instance().getStatus()}));        if ((!Router.instance().getStatus().startsWith(Track.LENGTH) && !_train.isServiceAllCarsWithFinalDestinationsEnabled()) || (car.getTrack() == _departStageTrack)) {          if (!Router.instance().getStatus().equals(Router.STATUS_CAR_AT_DESINATION)) {            if (!_notRoutable.contains(car)) {              _notRoutable.add(car);            }            addLine(_buildReport,FIVE,BLANK_LINE);            addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildWarningCarNotRoutable"),new Object[]{car.toString(),car.getLocationName(),car.getTrackName(),car.getFinalDestinationName(),car.getFinalDestinationTrackName()}));            addLine(_buildReport,FIVE,BLANK_LINE);          }          findDestinationAndTrack(car,rl,routeIndex,_routeList.size());          continue;        } else {          checkCarOrder(car);          continue;        }      } else {        if (!checkCarForDestinationAndTrack(car,rl,routeIndex) && car.getTrack() != _departStageTrack) {          log.debug("Skipping car ({}) no car destination",car.toString());          checkCarOrder(car);          continue;        } else {          if (car.getDestination() == null && car.getTrack() == _departStageTrack && _terminateStageTrack != null) {            log.debug("Car ({}) departing staging with final destination ({}) but no destination, try staging",car.toString(),car.getFinalDestinationName());            findDestinationAndTrack(car,rl,_train.getTrainTerminatesRouteLocation());          }        }      }    } else     if (checkCarForDestinationAndTrack(car,rl,routeIndex)) {    } else {      findDestinationAndTrack(car,rl,routeIndex,_routeList.size());    }    if (_success) {      break;    }    if (car.getTrack() == _departStageTrack && (car.getDestination() == null || car.getDestinationTrack() == null || car.getTrain() == null)) {      addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildWarningCarStageDest"),new Object[]{car.toString()}));      if (car.getFinalDestinationTrack() != null && car.getFinalDestinationTrack() == _terminateStageTrack) {        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingCarHasFinal"),new Object[]{car.toString(),car.getFinalDestinationName(),car.getFinalDestinationTrackName()}));        car.reset();      }      addLine(_buildReport,SEVEN,BLANK_LINE);    }  }  if (!foundCar) {    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildNoCarsAtLocation"),new Object[]{rl.getName()}));    addLine(_buildReport,FIVE,BLANK_LINE);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void checkPermissions(EnumSet<Permissions> contained,EnumSet<Permissions> required) throws MissingPermissionsException {  if (contained.contains(Permissions.ADMINISTRATOR))   return;  EnumSet<Permissions> missing=EnumSet.noneOf(Permissions.class);  for (  Permissions requiredPermission : required) {    if (!contained.contains(requiredPermission))     missing.add(requiredPermission);  }  if (missing.size() > 0)   throw new MissingPermissionsException(missing);}  }
class C{  public void removeRepositoryConnectionListener(RepositoryConnectionListener listener){  conListeners.remove(listener);}  }
class C{  private static void correctCodeWordVertices(ResultPoint[] vertices,boolean upsideDown){  float v0x=vertices[0].getX();  float v0y=vertices[0].getY();  float v2x=vertices[2].getX();  float v2y=vertices[2].getY();  float v4x=vertices[4].getX();  float v4y=vertices[4].getY();  float v6x=vertices[6].getX();  float v6y=vertices[6].getY();  float skew=v4y - v6y;  if (upsideDown) {    skew=-skew;  }  if (skew > SKEW_THRESHOLD) {    float deltax=v6x - v0x;    float deltay=v6y - v0y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v4x - v0x) * deltax / delta2;    vertices[4]=new ResultPoint(v0x + correction * deltax,v0y + correction * deltay);  } else   if (-skew > SKEW_THRESHOLD) {    float deltax=v2x - v4x;    float deltay=v2y - v4y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v2x - v6x) * deltax / delta2;    vertices[6]=new ResultPoint(v2x - correction * deltax,v2y - correction * deltay);  }  float v1x=vertices[1].getX();  float v1y=vertices[1].getY();  float v3x=vertices[3].getX();  float v3y=vertices[3].getY();  float v5x=vertices[5].getX();  float v5y=vertices[5].getY();  float v7x=vertices[7].getX();  float v7y=vertices[7].getY();  skew=v7y - v5y;  if (upsideDown) {    skew=-skew;  }  if (skew > SKEW_THRESHOLD) {    float deltax=v7x - v1x;    float deltay=v7y - v1y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v5x - v1x) * deltax / delta2;    vertices[5]=new ResultPoint(v1x + correction * deltax,v1y + correction * deltay);  } else   if (-skew > SKEW_THRESHOLD) {    float deltax=v3x - v5x;    float deltay=v3y - v5y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v3x - v7x) * deltax / delta2;    vertices[7]=new ResultPoint(v3x - correction * deltax,v3y - correction * deltay);  }}  }
class C{  public boolean areLastThreeNonRight(){  if (!hasThree())   return false;  double x1, y1, x2, y2, x3, y3;  int pos=points.size() - 3;  x1=points.get(pos).getX();  y1=points.get(pos).getY();  x2=points.get(pos + 1).getX();  y2=points.get(pos + 1).getY();  x3=points.get(pos + 2).getX();  y3=points.get(pos + 2).getY();  double val1=(x2 - x1) * (y3 - y1);  double val2=(y2 - y1) * (x3 - x1);  double diff=FloatingPoint.value(val1 - val2);  if (diff >= 0)   return true;  return false;}  }
class C{  public void reset(){  AttributeChangeNotification acn=new AttributeChangeNotification(this,0,0,"NbChanges reset","NbChanges","Integer",new Integer(nbChanges),new Integer(0));  state="initial state";  nbChanges=0;  nbResets++;  sendNotification(acn);}  }
class C{  private void onTaskFinished0(HadoopRunnableTask run,HadoopTaskStatus status){  HadoopTaskInfo info=run.taskInfo();  int pendingTasks0=pendingTasks.decrementAndGet();  if (log.isDebugEnabled())   log.debug("Hadoop task execution finished [info=" + info + ", state="+ status.state()+ ", waitTime="+ run.waitTime()+ ", execTime="+ run.executionTime()+ ", pendingTasks="+ pendingTasks0+ ", err="+ status.failCause()+ ']');  assert info.type() == MAP || info.type() == REDUCE : "Only MAP or REDUCE tasks are supported.";  boolean flush=pendingTasks0 == 0 && info.type() == MAP;  notifyTaskFinished(info,status,flush);}  }
class C{  private static Edge createTree(double polyLats[],double polyLons[]){  Edge edges[]=new Edge[polyLats.length - 1];  for (int i=1; i < polyLats.length; i++) {    double lat1=polyLats[i - 1];    double lon1=polyLons[i - 1];    double lat2=polyLats[i];    double lon2=polyLons[i];    edges[i - 1]=new Edge(lat1,lon1,lat2,lon2,Math.min(lat1,lat2),Math.max(lat1,lat2));  }  Arrays.sort(edges,null);  return createTree(edges,0,edges.length - 1);}  }
class C{  int stringWidth(String str){  return font.stringWidth(str);}  }
class C{  public void __replaceArg(final int index,final BOp newArg){  args[index]=newArg;  mutation();}  }
class C{  public boolean lessThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.greaterThanOrEqual(this);  return this.num() <= obj2.num();}  }
class C{  public void removeValueFromSharedPreferences(String key,Context context){  SharedPreferences sharedPref=context.getSharedPreferences(Constants.PREFERENCES_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=sharedPref.edit();  editor.remove(key);  editor.commit();}  }
class C{  public void incrementOneStatement(){  this.total++;}  }
class C{  private void handleDataIntegrityIssues(final JsonCommand jsonCommand,final DataIntegrityViolationException dve){  final Throwable realCause=dve.getMostSpecificCause();  if (realCause.getMessage().contains(ReportMailingJobConstants.NAME_PARAM_NAME)) {    final String name=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.NAME_PARAM_NAME);    throw new PlatformDataIntegrityException("error.msg.report.mailing.job.duplicate.name","Report mailing job with name `" + name + "` already exists",ReportMailingJobConstants.NAME_PARAM_NAME,name);  }  logger.error(dve.getMessage(),dve);  throw new PlatformDataIntegrityException("error.msg.charge.unknown.data.integrity.issue","Unknown data integrity issue with resource: " + realCause.getMessage());}  }
class C{  @Override public final int readInt() throws IOException {  dis.readFully(work,0,4);  return (work[3]) << 24 | (work[2] & 0xff) << 16 | (work[1] & 0xff) << 8 | (work[0] & 0xff);}  }
class C{  public void clear(URI sourceFile){  sourcePath.remove(sourceFile);}  }
class C{  public static int darker(int color,float factor){  int a=Color.alpha(color);  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  return Color.argb(a,Math.max((int)(r * factor),0),Math.max((int)(g * factor),0),Math.max((int)(b * factor),0));}  }
class C{  private void scrollListItemsBy(int amount){  tryOffsetChildrenTopAndBottom(amount);  final int listBottom=getHeight() - mListPadding.bottom;  final int listTop=mListPadding.top;  final PLAAbsListView.RecycleBin recycleBin=mRecycler;  if (amount < 0) {    View last=getLastChild();    int numChildren=getChildCount();    while (last.getBottom() < listBottom) {      final int lastVisiblePosition=mFirstPosition + numChildren - 1;      if (lastVisiblePosition < mItemCount - 1) {        addViewBelow(last,lastVisiblePosition);        last=getLastChild();        numChildren++;      } else {        break;      }    }    if (last.getBottom() < listBottom) {      tryOffsetChildrenTopAndBottom(listBottom - last.getBottom());    }    View first=getChildAt(0);    while (first.getBottom() < listTop) {      LayoutParams layoutParams=(LayoutParams)first.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(first);        recycleBin.addScrapView(first);      } else {        removeViewInLayout(first);      }      first=getChildAt(0);      mFirstPosition++;    }  } else {    View first=getChildAt(0);    while ((first.getTop() > listTop) && (mFirstPosition > 0)) {      first=addViewAbove(first,mFirstPosition);      mFirstPosition--;    }    if (first.getTop() > listTop) {      tryOffsetChildrenTopAndBottom(listTop - first.getTop());    }    int lastIndex=getChildCount() - 1;    View last=getChildAt(lastIndex);    while (last.getTop() > listBottom) {      LayoutParams layoutParams=(LayoutParams)last.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(last);        recycleBin.addScrapView(last);      } else {        removeViewInLayout(last);      }      last=getChildAt(--lastIndex);    }  }}  }
class C{  public static String canonicalizePath(String path,boolean discardRelativePrefix){  int segmentStart=0;  int deletableSegments=0;  for (int i=0; i <= path.length(); ) {    int nextSegmentStart;    if (i == path.length()) {      nextSegmentStart=i;    } else     if (path.charAt(i) == '/') {      nextSegmentStart=i + 1;    } else {      i++;      continue;    }    if (i == segmentStart + 1 && path.regionMatches(segmentStart,".",0,1)) {      path=path.substring(0,segmentStart) + path.substring(nextSegmentStart);      i=segmentStart;    } else     if (i == segmentStart + 2 && path.regionMatches(segmentStart,"..",0,2)) {      if (deletableSegments > 0 || discardRelativePrefix) {        deletableSegments--;        int prevSegmentStart=path.lastIndexOf('/',segmentStart - 2) + 1;        path=path.substring(0,prevSegmentStart) + path.substring(nextSegmentStart);        i=segmentStart=prevSegmentStart;      } else {        i++;        segmentStart=i;      }    } else {      if (i > 0) {        deletableSegments++;      }      i++;      segmentStart=i;    }  }  return path;}  }
class C{  public static void destroyRegion(){  try {    Region region1=cache.getRegion("/region1");    if (region1 != null) {      region1.destroyRegion();    }    Region region2=cache.getRegion("/region1");    if (region2 != null) {      region2.destroyRegion();    }  } catch (  Exception e) {    e.printStackTrace();    fail("test failed due to exception in destroy region" + e);  }}  }
class C{  @Override protected void initListeners(){  this.start.setOnClickListener(this);}  }
class C{  public int[] numVerticesSampledTotal(Set<? extends SampledVertex> vertices){  int[] list=numVerticesSampled(vertices);  int[] listTotal=new int[list.length];  listTotal[0]=list[0];  for (int i=1; i < list.length; i++) {    listTotal[i]=listTotal[i - 1] + list[i];  }  return listTotal;}  }
class C{  public int countPaymentFiles(long groupId,String paymentStatus,String keywords){  String[] names=null;  boolean andOperator=false;  if (Validator.isNotNull(keywords)) {    names=CustomSQLUtil.keywords(keywords);  } else {    andOperator=true;  }  return _countPaymentFiles(groupId,paymentStatus,andOperator,names);}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  InlineReturnStatement s=(InlineReturnStatement)clone();  if (expr != null) {    s.expr=expr.copyInline(ctx);  }  return s;}  }
class C{  public final CC gapLeft(String boundsSize){  hor.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3,E e4,E e5,E e6){  return new ImmutableCollections.ListN<E>(e1,e2,e3,e4,e5,e6);}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case SGraphPackage.REGION:    return createRegion();case SGraphPackage.TRANSITION:  return createTransition();case SGraphPackage.FINAL_STATE:return createFinalState();case SGraphPackage.CHOICE:return createChoice();case SGraphPackage.STATECHART:return createStatechart();case SGraphPackage.ENTRY:return createEntry();case SGraphPackage.EXIT:return createExit();case SGraphPackage.REACTION_PROPERTY:return createReactionProperty();case SGraphPackage.SCOPE:return createScope();case SGraphPackage.SYNCHRONIZATION:return createSynchronization();case SGraphPackage.STATE:return createState();case SGraphPackage.IMPORT_DECLARATION:return createImportDeclaration();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public MessageData(){}  }
class C{  public static TDoubleDoubleHashMap normalize(TDoubleDoubleHashMap histogram){  double sum=0;  double[] values=histogram.values();  for (int i=0; i < values.length; i++) {    sum+=values[i];  }  return normalize(histogram,sum);}  }
class C{  @Override public void onTabReselected(ActionBar.Tab tab,FragmentTransaction ft){}  }
class C{  public synchronized void allowThreadDecoding(ThreadSet threads){  for (  Thread t : threads) {    allowThreadDecoding(t);  }}  }
class C{  public void addNode(int n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  this.addElement(n);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 2) {    showUsage();  } else {    loadConf(args[0]);    verifyAsic(args[1]);  }}  }
class C{  @FlakyTest(tolerance=3) public void testPopupNoSelection() throws Exception {  AutoCompleteTextViewSimple theActivity=getActivity();  AutoCompleteTextView textView=theActivity.getTextView();  final Instrumentation instrumentation=getInstrumentation();  textView.requestFocus();  instrumentation.waitForIdleSync();  sendKeys("A");  instrumentation.waitForIdleSync();  Thread.sleep(WAIT_TIME);  assertFalse("onItemClick should not be called",theActivity.mItemClickCalled);  assertFalse("onItemSelected should not be called",theActivity.mItemSelectedCalled);}  }
class C{  public void close(){  if (getParentInternalFrame() != null) {    getParentInternalFrame().doDefaultCloseAction();  } else   if (getParentFrame() != null) {    ((Window)getParentFrame()).dispatchEvent(new WindowEvent(getParentFrame(),WindowEvent.WINDOW_CLOSING));  }}  }
class C{  public static <T extends IStaredItem>boolean allNotStared(final T[] items){  for (  final IStaredItem item : items) {    if (item.isStared()) {      return false;    }  }  return true;}  }
class C{  private void scrollToExecutionMark(){  if (markedLine < lineNumbers.size()) {    getEditor().scrollRectToVisible(lineNumbers.get(markedLine).getBounds());  }}  }
class C{  private void updateSearchAutoComplete(){  mSearchAutoComplete.setDropDownDismissedOnCompletion(false);  mSearchAutoComplete.setForceIgnoreOutsideTouch(false);}  }
class C{  public static final String makeJavaPackage(String path){  String classNameComponents[]=split(path,"/");  StringBuilder legalClassNames=new StringBuilder();  for (int i=0; i < classNameComponents.length; i++) {    legalClassNames.append(makeJavaIdentifier(classNameComponents[i]));    if (i < classNameComponents.length - 1) {      legalClassNames.append('.');    }  }  return legalClassNames.toString();}  }
class C{  private ConnectionResult handleRedirect(IBasicRequest oldRequest,Headers responseHeaders){  IBasicRequest redirectRequest=null;  RedirectHandler redirectHandler=oldRequest.getRedirectHandler();  if (redirectHandler != null) {    if (redirectHandler.isDisallowedRedirect(responseHeaders))     return new ConnectionResult(null,responseHeaders,null,null); else     redirectRequest=redirectHandler.onRedirect(responseHeaders);  }  if (redirectRequest == null) {    redirectRequest=new StringRequest(responseHeaders.getLocation(),oldRequest.getRequestMethod());    redirectRequest.setSSLSocketFactory(oldRequest.getSSLSocketFactory());    redirectRequest.setHostnameVerifier(oldRequest.getHostnameVerifier());    redirectRequest.setProxy(oldRequest.getProxy());  }  return getConnection(redirectRequest);}  }
class C{  public void nextBytes(byte[] bytes){  for (int x=0; x < bytes.length; x++)   bytes[x]=(byte)next(8);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof LogRecord))   return false;  LogRecord that=(LogRecord)o;  if (offset != that.getOffset())   return false;  if (data == null) {    if (that.getData() != null)     return false;  } else {    if (data.length != that.getData().length)     return false;    for (int i=0; i < data.length; i++) {      if (data[i] != that.getData()[i])       return false;    }  }  if (crcType != that.getCrcType())   return false;  if (crc != that.getCrc())   return false;  return true;}  }
class C{  public PolicyFile(){  init((URL)null);}  }
class C{  @Override public String toString(){  if (ActiveMQRAMessage.trace) {    ActiveMQRALogger.LOGGER.trace("toString()");  }  return message.toString();}  }
class C{  public void insert(String key,char val){  int len=key.length() + 1;  if (freenode + len > eq.length) {    redimNodeArrays(eq.length + BLOCK_SIZE);  }  char strkey[]=new char[len--];  key.getChars(0,len,strkey,0);  strkey[len]=0;  root=insert(root,strkey,0,val);}  }
class C{  public List<Object> syncAndReturnAll(){  if (getPipelinedResponseLength() > 0) {    List<Object> unformatted=client.getMany(getPipelinedResponseLength());    List<Object> formatted=new ArrayList<Object>();    for (    Object o : unformatted) {      try {        formatted.add(generateResponse(o).get());      } catch (      JedisDataException e) {        formatted.add(e);      }    }    return formatted;  } else {    return java.util.Collections.<Object>emptyList();  }}  }
class C{  private void createNegotiationTableForContractors(final TenderResponse tenderResponse) throws DocumentException, ApplicationException {  PdfPTable negotiationTable=null;  int count=0;  for (  final TenderResponseContractors tenderResponseContractors : tenderResponse.getTenderResponseContractors()) {    document.add(makePara(pdfLabel.get("tenderNegotiationpdf.contractorname") + " - " + tenderResponseContractors.getContractor().getName()+ "("+ tenderResponseContractors.getContractor().getCode()+ " ) ",Element.ALIGN_LEFT));    document.add(spacer());    negotiationTable=createNegotiationTable(tenderResponse,tenderResponseContractors.getContractor());    document.add(negotiationTable);    count++;    if (!(tenderResponse.getTenderResponseContractors().size() == count))     document.newPage(); else     document.add(spacer());  }}  }
class C{  public int numeroDetallesPrevision(String idPrevision){  int nDetallesPrevision=0;  if (idPrevision != null)   nDetallesPrevision=_detallePrevisionDBEntity.numeroDetallesPrevision(idPrevision);  return nDetallesPrevision;}  }
class C{  public static List<File> ensureBlockCompressed(Collection<File> files) throws IOException {  final ArrayList<File> toAdd=new ArrayList<>();  for (  File f : files) {    toAdd.add(ensureBlockCompressed(f));  }  return toAdd;}  }
class C{  void indent(){  lmargin=lmargin + width;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (baseFeatureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:      return TypesPackage.TENUM__AST_ELEMENT;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static boolean isStringType(int type){  return type == Value.STRING || type == Value.STRING_FIXED || type == Value.STRING_IGNORECASE;}  }
class C{  public Builder<T> lt(T value){  end=value;  excludeUpper=true;  return this;}  }
class C{  protected void deepCopy(DuplicateMap map){}  }
class C{  private void invalidateContext(String contextId) throws EventHandlerException {  handlerFactory.get(Event.EventType.CONTEXT_STATUS_UPDATE).handle(new ContextStatusEvent(contextId,ContextStatus.FAILED));}  }
class C{  public final synchronized void prefsChanged(boolean translateMoves){  if (game == null)   translateMoves=false;  if (translateMoves)   game.tree.translateMoves();  updateBookHints();  updateMoveList();  listener.prefsChanged(searchId,translateMoves);  if (translateMoves)   updateGUI();}  }
class C{  protected boolean internalLast() throws SQLException {  boolean ret=false;  if (numRows > 0) {    cursorPos=numRows;    if ((getShowDeleted() == false) && (rowDeleted() == true)) {      ret=internalPrevious();    } else {      ret=true;    }  }  if (ret == true)   absolutePos=numRows - numDeleted; else   absolutePos=0;  return ret;}  }
class C{  public T caseTypeArgument(TypeArgument object){  return null;}  }
class C{  private boolean isSameAs(byte[] a,byte[] b){  boolean isOkay=true;  if (messageLength > mBuf.length) {    if (mBuf.length > b.length) {      isOkay=false;    }    for (int i=0; i != mBuf.length; i++) {      if (a[i] != b[i]) {        isOkay=false;      }    }  } else {    if (messageLength != b.length) {      isOkay=false;    }    for (int i=0; i != b.length; i++) {      if (a[i] != b[i]) {        isOkay=false;      }    }  }  return isOkay;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) private byte skipEntityBackward(){  int initialCharIndex=charIndex;  while (charIndex > 0) {    lastChar=text.charAt(--charIndex);    if (lastChar == '&') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == ';') {      break;    }  }  charIndex=initialCharIndex;  lastChar=';';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  public void notifyListenersOfInitialization(){  if (initialized) {    for (    ActionListener l : listeners) {      l.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"ratGenInitialized"));    }  }}  }
class C{  protected Long wrapKey(long k){  return new Long(k);}  }
class C{  private File initFolder() throws IgniteSpiException {  if (initGuard.compareAndSet(false,true)) {    if (path == null)     throw new IgniteSpiException("Shared file system path is null " + "(it should be configured via setPath(..) configuration property).");    if (path.equals(DFLT_PATH) && warnGuard.compareAndSet(false,true))     U.warn(log,"Default local computer-only share is used by IP finder.");    try {      File tmp;      if (new File(path).exists())       tmp=new File(path); else {        try {          tmp=U.resolveWorkDirectory(path,false);        } catch (        IgniteCheckedException e) {          throw new IgniteSpiException("Failed to resolve directory [path=" + path + ", exception="+ e.getMessage()+ ']');        }      }      if (!tmp.isDirectory())       throw new IgniteSpiException("Failed to initialize shared file system path " + "(path must point to folder): " + path);      if (!tmp.canRead() || !tmp.canWrite())       throw new IgniteSpiException("Failed to initialize shared file system path " + "(path must be readable and writable): " + path);      folder=tmp;    }  finally {      initLatch.countDown();    }  } else {    try {      U.await(initLatch);    } catch (    IgniteInterruptedCheckedException e) {      throw new IgniteSpiException("Thread has been interrupted.",e);    }    if (folder == null)     throw new IgniteSpiException("Failed to initialize shared file system folder (check logs for errors).");  }  return folder;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(this.key.getSolrFieldName());  sb.append(':').append('"').append(this.value).append('"');  return sb.toString();}  }
class C{  int bindListen(){  int ret;  if (mSocketState == SocketState.CLOSED)   return EBADFD;  IBluetooth bluetoothProxy=BluetoothAdapter.getDefaultAdapter().getBluetoothService(null);  if (bluetoothProxy == null) {    Log.e(TAG,"bindListen fail, reason: bluetooth is off");    return -1;  }  try {    mPfd=bluetoothProxy.createSocketChannel(mType,mServiceName,mUuid,mPort,getSecurityFlags());  } catch (  RemoteException e) {    Log.e(TAG,Log.getStackTraceString(new Throwable()));    return -1;  }  try {synchronized (this) {      if (VDBG)       Log.d(TAG,"bindListen(), SocketState: " + mSocketState + ", mPfd: "+ mPfd);      if (mSocketState != SocketState.INIT)       return EBADFD;      if (mPfd == null)       return -1;      FileDescriptor fd=mPfd.getFileDescriptor();      if (VDBG)       Log.d(TAG,"bindListen(), new LocalSocket ");      mSocket=new LocalSocket(fd);      if (VDBG)       Log.d(TAG,"bindListen(), new LocalSocket.getInputStream() ");      mSocketIS=mSocket.getInputStream();      mSocketOS=mSocket.getOutputStream();    }    if (VDBG)     Log.d(TAG,"bindListen(), readInt mSocketIS: " + mSocketIS);    int channel=readInt(mSocketIS);synchronized (this) {      if (mSocketState == SocketState.INIT)       mSocketState=SocketState.LISTENING;    }    if (VDBG)     Log.d(TAG,"channel: " + channel);    if (mPort == -1) {      mPort=channel;    }    ret=0;  } catch (  IOException e) {    Log.e(TAG,"bindListen, fail to get port number, exception: " + e);    return -1;  }  return ret;}  }
class C{  protected View onContentViewCreated(View contentView){  return contentView;}  }
class C{  public static boolean byteArrayToFile(final byte[] array,final File targetFile){  return byteArrayToFile(array,targetFile,false);}  }
class C{  public static void putAt(StringBuffer self,IntRange range,Object value){  RangeInfo info=subListBorders(self.length(),range);  self.replace(info.from,info.to,value.toString());}  }
class C{  public IndentSequence(IndentChar indentChar,int indentSize){  this.indentChar=indentChar;  this.indentSize=indentSize;}  }
class C{  @Override public Entry<K,V> pollLastEntry(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public Deleted(){  super(KEY);}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  if (this.labels == null || this.labels.isEmpty())   return;  Position mainLabelPosition=this.determineMainLabelPosition(dc);  this.labels.get(0).setPosition(mainLabelPosition);  if (this.mustShowHostileIndicator()) {    this.determineIdentityLabelPositions();  }}  }
class C{  public static URI uri(String value){  return (value != null && value.length() > 0) ? URI.create(value) : null;}  }
class C{  public boolean removeRecurrenceException(RecurrenceException recurrenceException){  return super.removeElement(recurrenceException);}  }
class C{  @Override public void beginOfStream() throws AdeException, AdeFlowException {  if (s_marshaller == null) {    JAXBContext jaxbContext;    try {      jaxbContext=JAXBContext.newInstance(ADEEXT_JAXB_CONTEXT);    } catch (    JAXBException e) {      throw new AdeInternalException("failed to create JAXBContext object for package " + Arrays.toString(ADEEXT_JAXB_CONTEXT),e);    }    try {      s_marshaller=jaxbContext.createMarshaller();    } catch (    JAXBException e) {      throw new AdeInternalException("failed to create JAXB Marshaller object",e);    }    try {      s_marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,m_formatXMLOutput);      s_marshaller.setProperty(Marshaller.JAXB_FRAGMENT,Boolean.TRUE);      s_marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,XML_PLEX_V2_XSD);    } catch (    PropertyException e) {      throw new AdeInternalException("failed to set formatted output for JAXB Marshaller object",e);    }    SchemaFactory sf=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);    File xmlParent=Ade.getAde().getConfigProperties().getXsltDir().getAbsoluteFile();    xmlParent=xmlParent.getParentFile();    File systemSchema=new File(xmlParent,XML_PLEX_V2_XSD);    Schema schema;    try {      URL systemSchemaURL=systemSchema.toURI().toURL();      schema=sf.newSchema(systemSchemaURL);    } catch (    SAXException e) {      throw new AdeInternalException("failed to create XML Schemal for event log analysis results",e);    }catch (    MalformedURLException e) {      throw new AdeInternalException("failed to create URL from Schema path: " + systemSchema.getAbsolutePath(),e);    }    s_marshaller.setSchema(schema);  }  m_xmlMetaData.retrieveXMLMetaData(m_lastKnownModelInternalID,true,m_framingFlowType.getDuration());  if (m_inPeriod) {    writePeriod();  }}  }
class C{  @Deprecated public ExecutionWindowInfo update(String id,ExecutionWindowInfo window){  return client.put(ExecutionWindowInfo.class,window,getIdUrl(),id);}  }
class C{  public int lastIndexOf(Object element,boolean testForEquality){  return lastIndexOfFromTo(element,0,size - 1,testForEquality);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.VARIABLE_BINDING__PATTERN:    setPattern((BindingPattern)newValue);  return;case N4JSPackage.VARIABLE_BINDING__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public synchronized boolean addSampler(Sampler sampler){  if (tracerPool == null) {    throwClientError(toString() + " is closed.");  }  Sampler[] samplers=curSamplers;  for (int i=0; i < samplers.length; i++) {    if (samplers[i] == sampler) {      return false;    }  }  Sampler[] newSamplers=Arrays.copyOf(samplers,samplers.length + 1);  newSamplers[samplers.length]=sampler;  curSamplers=newSamplers;  return true;}  }
class C{  public boolean isUndefined(){  return value != null && value == 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.187 -0500",hash_original_method="69F227E2B854C20A513354DE72686880",hash_generated_method="934A6A1E92ED5BBA2594D085C9DBCA6F") public boolean addNmeaListener(GpsStatus.NmeaListener listener){  boolean result;  if (mNmeaListeners.get(listener) != null) {    return true;  }  try {    GpsStatusListenerTransport transport=new GpsStatusListenerTransport(listener);    result=mService.addGpsStatusListener(transport);    if (result) {      mNmeaListeners.put(listener,transport);    }  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in registerGpsStatusListener: ",e);    result=false;  }  return result;}  }
class C{  public DoubleVector cumulate(){  return copy().cumulateInPlace();}  }
class C{  public Vector2i negate(){  x=-x;  y=-y;  return this;}  }
class C{  public static String quoteJavaString(String s){  if (s == null) {    return "null";  }  return "\"" + javaEncode(s) + "\"";}  }
class C{  public boolean contains(Object key){  return containsKey(key);}  }
class C{  public static boolean isDigit(char ch){  return false;}  }
class C{  public TurbolinksSession restoreWithCachedSnapshot(boolean restoreWithCachedSnapshot){  this.restoreWithCachedSnapshot=restoreWithCachedSnapshot;  return this;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public void logout() throws IOException, ParseException, URISyntaxException {  if (null != ws) {    ws.close();    try {      Requests.POST.makeRequest(DiscordEndpoints.LOGOUT,new BasicNameValuePair("authorization",token));    } catch (    HTTP403Exception e) {      e.printStackTrace();    }  } else {    Discord4J.logger.error("Bot has not signed in yet!");  }}  }
class C{  public static <T extends GenericEntity>List<T> filterByAnd(List<T> values,Map<String,? extends Object> fields){  if (values == null)   return null;  List<T> result=null;  if (UtilValidate.isEmpty(fields)) {    result=new LinkedList<T>();    result.addAll(values);  } else {    result=new LinkedList<T>();    for (    T value : values) {      if (value.matchesFields(fields)) {        result.add(value);      }    }  }  return result;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public final void pushExpressionState(int cn,int en,PrefixResolver nc){  m_currentNodes.push(cn);  m_currentExpressionNodes.push(cn);  m_prefixResolvers.push(nc);}  }
class C{  @Override protected String doRender(Object obj,JPanel panel){  JTextArea text;  MultiLabelClassifier cls;  StringBuilder content;  cls=(MultiLabelClassifier)obj;  content=new StringBuilder();  content.append("Command-line\n");  content.append("============\n\n");  content.append(Utils.toCommandLine(cls) + "\n\n");  content.append("Model\n");  content.append("=====\n\n");  content.append(cls.getModel());  text=new JTextArea();  text.setFont(GUIHelper.getMonospacedFont());  text.setText(content.toString());  text.setCaretPosition(0);  panel.add(new BaseScrollPane(text),BorderLayout.CENTER);  return null;}  }
class C{  @Override public void addProject(IProject project){  if (projectDatabases.containsKey(project)) {    log.warn("Project [" + project + "] already added");    return;  }  projectDatabases.put(project,new DataSourceRegistry(DBeaverCore.getInstance(),project));}  }
class C{  public void addExtension(String extension){  if (!extension.startsWith("."))   extension="." + extension;  extensions.add(extension.toLowerCase());}  }
class C{  public boolean match(PostfixExpression node,Object other){  if (!(other instanceof PostfixExpression)) {    return false;  }  PostfixExpression o=(PostfixExpression)other;  return (node.getOperator().equals(o.getOperator()) && safeSubtreeMatch(node.getOperand(),o.getOperand()));}  }
class C{  public void print(TranspilerState state,Writer outCode,Optional<SourceMapInfo> optSourceMapInfo) throws IOException {  final boolean emitSourceMaps=optSourceMapInfo.isPresent();  final SourceMapAwareAppendable out=new SourceMapAwareAppendable(outCode,INDENT,emitSourceMaps);  PrettyPrinterSwitch.append(out,state);  if (emitSourceMaps) {    final SourceMapInfo sourceMapInfo=optSourceMapInfo.get();    final SourceMapGenerator generator=new SourceMapGeneratorV3();    out.newLine();    out.append("//# sourceMappingURL=" + sourceMapInfo.simpleSourceMapFileName);    out.newLine();    final List<SourceOutputMapping> mappings=new ArrayList<>(out.getSourceMapData());    removeCatchAllMapping(mappings);    sortMappings(mappings);    final PositionProvider positionProvider=PositionProvider.from(state.resource);    for (    SourceOutputMapping m : mappings) {      final EObject originalASTNode=state.tracer.getOriginalASTNode(m.elementInIM);      if (originalASTNode != null && originalASTNode.eResource() instanceof N4JSResource) {        final ITextRegion region=locationInFileProvider.getSignificantTextRegion(originalASTNode);        final String path=sourceMapInfo.resolve((N4JSResource)originalASTNode.eResource());        final FilePosition sourceStartPosition=positionProvider.toPosition(region.getOffset());        generator.addMapping(path,null,sourceStartPosition,m.outputStart,m.outputEnd);      }    }    generator.appendTo(sourceMapInfo.sourceMapBuff,sourceMapInfo.simpleCompiledFileName);  }}  }
class C{  @Transactional(readOnly=true) @SuppressWarnings("unchecked") public List<StepInstance> retrieveUnfinishedStepInstances(Step step){  Query query=entityManager.createQuery("select distinct i " + "from StepInstance i " + "where i.stepId = :stepId "+ "and i not in ("+ "select j "+ "from StepInstance j "+ "inner join j.executions e "+ "where e.state = :successful "+ "and j.stepId = :stepId) order by i.id desc");  query.setParameter("stepId",step.getId());  query.setParameter("successful",StepExecutionState.STEP_EXECUTION_SUCCESSFUL);synchronized (lockObject) {    LOGGER.debug("StepInstanceDAO locked");    return query.getResultList();  }}  }
class C{  @SuppressWarnings("null") @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="NP_NULL_ON_SOME_PATH",justification="we want to force an exception") public void lastItem(){  _defaultColor=_value.getBackground();  super.setState(READ);  findValue();  Iterator<VariableValue> i=variables.iterator();  while (i.hasNext()) {    VariableValue v=i.next();    if (v == null) {      log.error("Variable found as null in last item");    }    v.addPropertyChangeListener(this);  }  _value.setActionCommand("");  _value.addActionListener(this);}  }
class C{  public static String encode(String data){  try {    return encode(data,DEFAULT_CHAR_ENCODING);  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException(uee.toString());  }}  }
class C{  public static int px2sp(Context context,float px){  return (int)(pxToSp(context,px) + 0.5f);}  }
class C{  public void testUpdate3() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = 1;");  statement.execute("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 5 WHERE id = 1;");}  }
class C{  final private void modifyServerSchema(Attributes origAttrs,Attributes newAttrs) throws NamingException {  Attribute newAttrVal;  Attribute origAttrVal;switch (objectType) {case OBJECTCLASS:    origAttrVal=info.parser.stringifyObjDesc(origAttrs);  newAttrVal=info.parser.stringifyObjDesc(newAttrs);break;case ATTRIBUTE:origAttrVal=info.parser.stringifyAttrDesc(origAttrs);newAttrVal=info.parser.stringifyAttrDesc(newAttrs);break;case SYNTAX:origAttrVal=info.parser.stringifySyntaxDesc(origAttrs);newAttrVal=info.parser.stringifySyntaxDesc(newAttrs);break;case MATCHRULE:origAttrVal=info.parser.stringifyMatchRuleDesc(origAttrs);newAttrVal=info.parser.stringifyMatchRuleDesc(newAttrs);break;default :throw new SchemaViolationException("Cannot modify schema root");}ModificationItem[] mods=new ModificationItem[2];mods[0]=new ModificationItem(DirContext.REMOVE_ATTRIBUTE,origAttrVal);mods[1]=new ModificationItem(DirContext.ADD_ATTRIBUTE,newAttrVal);info.modifyAttributes(myEnv,mods);}  }
class C{  public boolean onShouldBeginZooming(PLIView view){  return true;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void removeGrupoUsuario(String idGrupo,String[] idUsuario){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_GRUPO,idGrupo));  if (idUsuario != null)   qual.append(" AND ").append(DBUtils.generateInTokenField(CAMPO_ID_USUARIO,idUsuario));  deleteVO(qual.toString(),TABLE_NAME);}  }
class C{  public int xToOffset(int line,int x){  TokenMarker tokenMarker=getTokenMarker();  FontMetrics fm=painter.getFontMetrics();  getLineText(line,lineSegment);  char[] segmentArray=lineSegment.array;  int segmentOffset=lineSegment.offset;  int segmentCount=lineSegment.count;  int width=horizontalOffset;  if (tokenMarker == null) {    for (int i=0; i < segmentCount; i++) {      char c=segmentArray[i + segmentOffset];      int charWidth;      if (c == '\t')       charWidth=(int)painter.nextTabStop(width,i) - width; else       charWidth=fm.charWidth(c);      if (painter.isBlockCaretEnabled()) {        if (x - charWidth <= width)         return i;      } else {        if (x - charWidth / 2 <= width)         return i;      }      width+=charWidth;    }    return segmentCount;  } else {    Token tokens;    if (painter.currentLineIndex == line && painter.currentLineTokens != null)     tokens=painter.currentLineTokens; else {      painter.currentLineIndex=line;      tokens=painter.currentLineTokens=tokenMarker.markTokens(lineSegment,line);    }    int offset=0;    painter.getToolkit();    Font defaultFont=painter.getFont();    SyntaxStyle[] styles=painter.getStyles();    for (; ; ) {      byte id=tokens.id;      if (id == Token.END)       return offset;      if (id == Token.NULL)       fm=painter.getFontMetrics(); else       fm=styles[id].getFontMetrics(defaultFont);      int length=tokens.length;      for (int i=0; i < length; i++) {        char c=segmentArray[segmentOffset + offset + i];        int charWidth;        if (c == '\t')         charWidth=(int)painter.nextTabStop(width,offset + i) - width; else         charWidth=fm.charWidth(c);        if (painter.isBlockCaretEnabled()) {          if (x - charWidth <= width)           return offset + i;        } else {          if (x - charWidth / 2 <= width)           return offset + i;        }        width+=charWidth;      }      offset+=length;      tokens=tokens.next;    }  }}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_FIELD_DECLARATION__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isCaretDecodingEnabled(){  return reader.isCaretDecodingEnabled();}  }
class C{  public static TypeDialog createEditTypeDialog(final JFrame owner,final TypeManager manager,final BaseType baseType){  return new TypeDialog(owner,manager,baseType);}  }
class C{  @SuppressWarnings("deprecation") private void check() throws Exception {  before();  try {    Path fsHome=new Path(primaryFsUri);    Path dir=new Path(fsHome,"/someDir1/someDir2/someDir3");    Path file=new Path(dir,"someFile");    assertPathDoesNotExist(primaryFs,file);    FsPermission fsPerm=new FsPermission((short)644);    FSDataOutputStream os=primaryFs.create(file,fsPerm,false,1,(short)1,1L,null);    os.write("abc".getBytes());    os.close();    FileStatus fileStatus=primaryFs.getFileStatus(file);    assertFalse(fileStatus.isDir());    assertEquals(file,fileStatus.getPath());    assertEquals(fsPerm,fileStatus.getPermission());  }  finally {    after();  }}  }
class C{  public boolean isTop(){  return valueNumbersUnconditionallyDereferenced.get(numValueNumbersInMethod + 1);}  }
class C{  public ITuple joinTuples(ITuple outerTuple,ITuple innerTuple,Schema outputSchema) throws Exception {  List<Span> newJoinSpanList=new ArrayList<>();  if (!compareField(innerTuple,outerTuple,this.getIDAttribute().getFieldName())) {    return null;  }  if (!compareField(innerTuple,outerTuple,this.getJoinAttribute().getFieldName())) {    return null;  }  IField spanFieldOfInnerTuple=null;  IField spanFieldOfOuterTuple=null;  try {    spanFieldOfInnerTuple=innerTuple.getField(SchemaConstants.SPAN_LIST);    spanFieldOfOuterTuple=outerTuple.getField(SchemaConstants.SPAN_LIST);  } catch (  Exception e) {    return null;  }  List<Span> innerSpanList=null;  List<Span> outerSpanList=null;  if (spanFieldOfInnerTuple.getClass().equals(ListField.class)) {    innerSpanList=(List<Span>)spanFieldOfInnerTuple.getValue();  }  if (spanFieldOfOuterTuple.getClass().equals(ListField.class)) {    outerSpanList=(List<Span>)spanFieldOfOuterTuple.getValue();  }  Iterator<Span> outerSpanIter=outerSpanList.iterator();  while (outerSpanIter.hasNext()) {    Span outerSpan=outerSpanIter.next();    if (!outerSpan.getFieldName().equals(this.getJoinAttribute().getFieldName())) {      continue;    }    Iterator<Span> innerSpanIter=innerSpanList.iterator();    while (innerSpanIter.hasNext()) {      Span innerSpan=innerSpanIter.next();      if (!innerSpan.getFieldName().equals(this.getJoinAttribute().getFieldName())) {        continue;      }      Integer threshold=this.getThreshold();      if (Math.abs(outerSpan.getStart() - innerSpan.getStart()) <= threshold && Math.abs(outerSpan.getEnd() - innerSpan.getEnd()) <= threshold) {        Integer newSpanStartIndex=Math.min(outerSpan.getStart(),innerSpan.getStart());        Integer newSpanEndIndex=Math.max(outerSpan.getEnd(),innerSpan.getEnd());        String fieldName=this.getJoinAttribute().getFieldName();        String fieldValue=(String)innerTuple.getField(fieldName).getValue();        String newFieldValue=fieldValue.substring(newSpanStartIndex,newSpanEndIndex);        String spanKey=outerSpan.getKey() + "_" + innerSpan.getKey();        Span newSpan=new Span(fieldName,newSpanStartIndex,newSpanEndIndex,spanKey,newFieldValue);        newJoinSpanList.add(newSpan);      }    }  }  if (newJoinSpanList.isEmpty()) {    return null;  }  List<Attribute> outputAttrList=outputSchema.getAttributes();  List<IField> outputFields=outputAttrList.stream().filter(null).map(null).map(null).collect(Collectors.toList());  outputFields.add(new ListField<>(newJoinSpanList));  return new DataTuple(outputSchema,outputFields.stream().toArray(null));}  }
class C{  public static JSONObject trueResult(){  return new JSONObject().put(Keys.STATUS_CODE,true);}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList list=getList();  if (list == null) {    list=new OMGraphicList();  } else {    list.clear();  }  TimeDrape drape=new TimeDrape(0,0,-1,-1);  drape.setVisible(isNoTime);  drape.setFillPaint(Color.gray);  drape.generate(getProjection());  list.add(drape);  list.add(getControlWidgetList(getProjection()));  return list;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.SETTER_DECLARATION__DEFINED_SETTER:    if (resolve)     return getDefinedSetter();  return basicGetDefinedSetter();case N4JSPackage.SETTER_DECLARATION__FPAR:return getFpar();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Entity copyEntity(JCas jCas,int begin,int end,Entity entity){  try {    final Entity instance=entity.getClass().getConstructor(JCas.class).newInstance(jCas);    instance.setBegin(begin);    instance.setEnd(end);    instance.setReferent(entity.getReferent());    instance.setValue(entity.getValue());    return instance;  } catch (  final Exception e) {    LOGGER.warn("Unable to copy entity",e);    return null;  }}  }
class C{  public static void starModule(final AbstractSQLProvider provider,final INaviModule module,final boolean isStared) throws CouldntSaveDataException {  final String starModuleQuery="UPDATE " + CTableNames.MODULES_TABLE + " SET stared = "+ isStared+ " WHERE id = "+ module.getConfiguration().getId();  try {    provider.getConnection().executeUpdate(starModuleQuery,true);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public static Complex subtract(double a,Complex c){  return new Complex(a - c.real,c.imag);}  }
class C{  public static PsiQualifiedReferenceElement removeFromReferenceList(PsiReferenceList refList,PsiClass aClass) throws IncorrectOperationException {  List<? extends PsiQualifiedReferenceElement> refs=Arrays.asList(refList instanceof GrReferenceList ? ((GrReferenceList)refList).getReferenceElementsGroovy() : refList.getReferenceElements());  for (  PsiQualifiedReferenceElement ref : refs) {    if (ref.isReferenceTo(aClass)) {      PsiQualifiedReferenceElement refCopy=(PsiQualifiedReferenceElement)ref.copy();      ref.delete();      return refCopy;    }  }  return null;}  }
class C{  public static void checkAndCreateIds(ExampleSetMetaData emd){  if (emd.getSpecial(Attributes.ID_NAME) == null) {    AttributeMetaData idMD=new AttributeMetaData(Attributes.ID_NAME,Ontology.INTEGER,Attributes.ID_NAME);    if (emd.getNumberOfExamples().isKnown()) {      if (emd.getNumberOfExamples().getValue().doubleValue() > 1) {        idMD.setValueRange(new Range(0,emd.getNumberOfExamples().getValue().doubleValue() - 1),SetRelation.EQUAL);      } else {        idMD.setValueRange(new Range(),SetRelation.EQUAL);      }    }    emd.addAttribute(idMD);  }}  }
class C{  private void _download_apk(InstalledApp app,String request_source){  if (app.get_download_url() == null) {    return;  }  Uri uri=Uri.parse(String.format(app.get_download_url(),app.get_display_name(),app.get_latest_version()));  DownloadManager dm=(DownloadManager)getSystemService(Context.DOWNLOAD_SERVICE);  DownloadManager.Request request=new DownloadManager.Request(uri);  if (ScheduledCheckService.SERVICE_SOURCE.equals(request_source) && PreferenceManager.getDefaultSharedPreferences(this).getBoolean(SettingsFragment.KEY_PREF_WIFI_ONLY,true)) {    request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI);  } else {    request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE | DownloadManager.Request.NETWORK_WIFI);  }  request.setAllowedOverRoaming(false).setTitle(getString(getApplicationInfo().labelRes)).setDescription(app.get_display_name() + " " + app.get_latest_version()+ ".apk").setVisibleInDownloadsUi(false).setDestinationInExternalFilesDir(this,Environment.DIRECTORY_DOWNLOADS,app.get_package_name() + "-" + app.get_latest_version()+ ".apk");  long id=dm.enqueue(request);  app.set_download_id(id);  app.save();  EventBusHelper.post_sticky(ModelModifiedMessage.event_type.APP_UPDATED,app.get_package_name());}  }
class C{  @Override public String toString(){  return "CUDA_POINTER_ATTRIBUTE_P2P_TOKENS[" + createString(",") + "]";}  }
class C{  public List searchEmployee(Integer status,Date fromDate,Date toDate) throws Exception {  List<Assignment> employeeList=new ArrayList<Assignment>();  String mainStr="";  try {    EgwStatus statusType=egwStatusHibernateDAO.findById(status,false);    if (statusType.getModuletype().equals("Employee") && statusType.getDescription().equals("Employed")) {      if (status.intValue() != 0) {        mainStr="from Assignment ev where ev.employee.StatusMaster.id =:employeeStatus";      }      if (fromDate != null && toDate != null) {        mainStr+=" and ev.dateOfFirstAppointment >= :fromDate " + " and ev.dateOfFirstAppointment <= :toDate " + " and ((ev.fromDate<=sysdate and ev.toDate >=sysdate) "+ " or (ev.fromDate in (select max(prd.fromDate) from Assignment prd where ev.employee.idPersonalInformation = prd.employee.idPersonalInformation "+ " and not exists (select prd1.id from Assignment prd1 where prd1.employee.idPersonalInformation=ev.assignment.employee.idPersonalInformation "+ " and ( prd1.dateOfFirstAppointment >= :fromDate and prd1.dateOfFirstAppointment <= :toDate and prd1.fromDate<= sysdate and prd1.toDate >= sysdate) )))) ";      }    } else     if (statusType.getModuletype().equals("Employee") && statusType.getDescription().equals("Retired")) {      if (status.intValue() != 0) {        mainStr="from Assignment ev where ev.employee.StatusMaster.id =:employeeStatus";      }      if (fromDate != null && toDate != null) {        mainStr+=" and ev.assignmentPrd.employeeId.retirementDate >= :fromDate " + " and ev.employee.retirementDate <= :toDate " + " and ((ev.fromDate<=sysdate and ev.toDate >=sysdate) "+ " or (ev.fromDate in (select max(prd.fromDate) from Assignment prd where ev.employee.idPersonalInformation = prd.employee.idPersonalInformation "+ " and not exists (select prd1.id from Assignment prd1 where prd1.employee.idPersonalInformation=ev.employee.idPersonalInformation "+ " and ( prd1.employee.retirementDate >= :fromDate and prd1.employee.retirementDate <= :toDate and prd1.fromDate<= sysdate and prd1.toDate >= sysdate) )))) ";      }    } else     if (statusType.getModuletype().equals("Employee") && statusType.getDescription().equals("Deceased")) {      if (status.intValue() != 0) {        mainStr="from Assignment ev where ev.employee.StatusMaster.id =:employeeStatus";      }      if (fromDate != null && toDate != null) {        mainStr+=" and ev.employee.deathDate >= :fromDate " + " and ev.employee.deathDate <= :toDate " + " and ((ev.fromDate<=sysdate and ev.toDate >=sysdate) "+ " or (ev.fromDate in (select max(prd.fromDate) from Assignment prd where ev.employee.idPersonalInformation = prd.employee.idPersonalInformation "+ " and not exists (select prd1.id from Assignment prd1 where prd1.employee.idPersonalInformation=ev.employee.idPersonalInformation "+ " and ( prd1.employee.deathDate >= :fromDate and prd1.employee.deathDate <= :toDate and prd1.fromDate<= sysdate and prd1.toDate >= sysdate) )))) ";      }    }    Query qry=null;    qry=getCurrentSession().createQuery(mainStr);    logger.info("Query----" + qry.toString());    if (status.intValue() != 0) {      qry.setInteger("employeeStatus",status);    }    if (fromDate != null) {      qry.setDate("fromDate",new java.sql.Date(fromDate.getTime()));    }    if (toDate != null) {      qry.setDate("toDate",new java.sql.Date(toDate.getTime()));    }    employeeList=(List)qry.list();  } catch (  HibernateException he) {    throw new ApplicationRuntimeException("Exception:" + he.getMessage(),he);  }catch (  Exception he) {    throw new ApplicationRuntimeException("Exception:" + he.getMessage(),he);  }  return employeeList;}  }
class C{  public void registerListener(ITransportListener tl) throws Exception {  m_transportListener=tl;}  }
class C{  public boolean force_gc(){  return soot.PhaseOptions.getBoolean(options,"force-gc");}  }
class C{  public boolean isSetAuthChallengeResponse(){  return this.authChallengeResponse != null;}  }
class C{  public static <Fact,AnalysisType extends BasicAbstractDataflowAnalysis<Fact>>void printCFG(Dataflow<Fact,AnalysisType> dataflow,PrintStream out){  DataflowCFGPrinter<Fact,AnalysisType> printer=new DataflowCFGPrinter<Fact,AnalysisType>(dataflow);  printer.print(out);}  }
class C{  public AnrInfo(Parcel in){  activity=in.readString();  cause=in.readString();  info=in.readString();}  }
class C{  public static void invokeAndWait(Runnable r) throws InterruptedException, java.lang.reflect.InvocationTargetException {  if (SwingUtilities.isEventDispatchThread()) {    r.run();  } else {    SwingUtilities.invokeAndWait(r);  }}  }
class C{  private CStepBlockHelper(){}  }
class C{  public int successfulShards(){  return successfulShards;}  }
class C{  protected void computeDirectionArrows(DrawContext dc,PathData pathData){  IntBuffer polePositions=pathData.getPolePositions();  int numPositions=polePositions.limit() / 2;  List<Position> tessellatedPositions=pathData.getTessellatedPositions();  final int FLOATS_PER_ARROWHEAD=9;  FloatBuffer buffer=(FloatBuffer)pathData.getValue(ARROWS_KEY);  if (buffer == null || buffer.capacity() < numPositions * FLOATS_PER_ARROWHEAD) {    buffer=Buffers.newDirectFloatBuffer(FLOATS_PER_ARROWHEAD * numPositions);  }  pathData.setValue(ARROWS_KEY,buffer);  buffer.clear();  Terrain terrain=dc.getTerrain();  int poleA=polePositions.get(0) / 2;  Vec4 polePtA=this.computePoint(dc,terrain,tessellatedPositions.get(poleA));  for (int i=2; i < polePositions.limit(); i+=2) {    int poleB=polePositions.get(i) / 2;    Vec4 polePtB=this.computePoint(dc,terrain,tessellatedPositions.get(poleB));    this.computeArrowheadGeometry(dc,poleA,poleB,polePtA,polePtB,buffer,pathData);    poleA=poleB;    polePtA=polePtB;  }  buffer.flip();  if (dc.isPickingMode()) {    if (buffer.remaining() != 0) {      Box box=Box.computeBoundingBox(new BufferWrapper.FloatBufferWrapper(buffer),3);      box=box.translate(pathData.getReferencePoint());      pathData.setValue(ARROWS_EXTENT,box);    } else {      pathData.setValue(ARROWS_EXTENT,null);    }  }}  }
class C{  public Entry(CstType exceptionType,int handler){  if (handler < 0) {    throw new IllegalArgumentException("handler < 0");  }  if (exceptionType == null) {    throw new NullPointerException("exceptionType == null");  }  this.handler=handler;  this.exceptionType=exceptionType;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  GroupImageDao.createTable(db,ifNotExists);}  }
class C{  public final boolean unlinkChunk(Chunk chunk){  ChunkPos chunkPos=new ChunkPos(chunk.xPosition,chunk.zPosition);  if (this.linkedChunks.contains(chunkPos)) {    ChunkDataBase chunkData=ChunkDataBase.forChunk(this.worldStorage,chunk);    if (chunkData != null && chunkData.unlinkSharedStorage(this)) {      if (this.linkedChunks.remove(chunkPos)) {        this.setDirty(true);        return true;      }    }  }  return false;}  }
class C{  public boolean isCurrent(EGLSurface eglSurface){  return mEGLContext.equals(EGL14.eglGetCurrentContext()) && eglSurface.equals(EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW));}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public synchronized void reset() throws IOException {  in.reset();}  }
class C{  public String toString(){  return "[" + start + "-"+ end+ "="+ charClass+ "]";}  }
class C{  public static void addRainParticles(Minecraft mc,EntityRenderer renderer,Random random){  float f=mc.theWorld.getRainStrength(1.0F);  if (!mc.gameSettings.fancyGraphics) {    f/=2.0F;  }  if (f != 0.0F) {    random.setSeed((long)renderer.rendererUpdateCount * 312987231L);    Entity entity=mc.getRenderViewEntity();    World world=mc.theWorld;    BlockPos blockpos=new BlockPos(entity);    double d0=0.0D;    double d1=0.0D;    double d2=0.0D;    int j=0;    int k=(int)(100.0F * f * f);    if (mc.gameSettings.particleSetting == 1) {      k>>=1;    } else     if (mc.gameSettings.particleSetting == 2) {      k=0;    }    for (int l=0; l < k; ++l) {      BlockPos blockpos1=world.getPrecipitationHeight(blockpos.add(random.nextInt(10) - random.nextInt(10),0,random.nextInt(10) - random.nextInt(10)));      Biome biome=world.getBiome(blockpos1);      BlockPos blockpos2=blockpos1.down();      IBlockState iblockstate=world.getBlockState(blockpos2);      if (blockpos1.getY() <= blockpos.getY() + 10 && blockpos1.getY() >= blockpos.getY() - 10 && biome.canRain()) {        double d3=random.nextDouble();        double d4=random.nextDouble();        AxisAlignedBB axisalignedbb=iblockstate.getBoundingBox(world,blockpos2);        if (iblockstate.getMaterial() != Material.LAVA && iblockstate.getBlock() != Blocks.MAGMA) {          if (iblockstate.getMaterial() != Material.AIR) {            ++j;            if (random.nextInt(j) == 0) {              d0=(double)blockpos2.getX() + d3;              d1=(double)((float)blockpos2.getY() + 0.1F) + axisalignedbb.maxY - 1.0D;              d2=(double)blockpos2.getZ() + d4;            }            mc.theWorld.spawnParticle(EnumParticleTypes.WATER_DROP,(double)blockpos2.getX() + d3,(double)((float)blockpos2.getY() + 0.1F) + axisalignedbb.maxY,(double)blockpos2.getZ() + d4,0.0D,0.0D,0.0D);          }        } else {          mc.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL,(double)blockpos1.getX() + d3,(double)((float)blockpos1.getY() + 0.1F) - axisalignedbb.minY,(double)blockpos1.getZ() + d4,0.0D,0.0D,0.0D);        }      }    }    if (j > 0 && random.nextInt(3) < renderer.rainSoundCounter++) {      renderer.rainSoundCounter=0;      if (d1 > (double)(blockpos.getY() + 1)) {        mc.theWorld.playSound(d0,d1,d2,SoundEvents.WEATHER_RAIN_ABOVE,SoundCategory.WEATHER,0.1F,0.5F,false);      } else {        mc.theWorld.playSound(d0,d1,d2,SoundEvents.WEATHER_RAIN,SoundCategory.WEATHER,0.2F,1.0F,false);      }    }  }}  }
class C{  public void killAllStrategyWorker(){  for (  String key : m_strategyWorkers.keySet()) {    killStrategyWorker(key);  }}  }
class C{  public static void copyStream(InputStream is,OutputStream os,long length,DownloadFileManager.OnDownloadListener listener){  final int buffer_size=1024;  int totalLen=0;  try {    byte[] bytes=new byte[buffer_size];    while (true) {      int count=is.read(bytes,0,buffer_size);      if (count == -1) {        listener.onFinishDownload();        break;      }      if (length != -1 && listener != null) {        totalLen=totalLen + count;        listener.onProgress(totalLen);      }      os.write(bytes,0,count);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public Nationality_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_countryCode=jcas.getRequiredFeatureDE(casType,"countryCode","uima.cas.String",featOkTst);  casFeatCode_countryCode=(null == casFeat_countryCode) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_countryCode).getCode();}  }
class C{  public ClassNode transform(){  processFields();  processMethods();  clearIntermediateResults();  if (className.equals(Properties.TARGET_CLASS) || className.startsWith(Properties.TARGET_CLASS + "$"))   TransformationStatistics.writeStatistics(className);  return cn;}  }
class C{  public CLoadDatabaseAction(final INaviModule module){  super("Load");  m_module=module;  putValue(Action.SMALL_ICON,new ImageIcon(CMain.class.getResource("data/load_from_database.png")));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Map<String,Object> sendMailFromScreen(DispatchContext dctx,Map<String,? extends Object> rServiceContext){  Map<String,Object> serviceContext=UtilMisc.makeMapWritable(rServiceContext);  LocalDispatcher dispatcher=dctx.getDispatcher();  String webSiteId=(String)serviceContext.remove("webSiteId");  String bodyText=(String)serviceContext.remove("bodyText");  String bodyScreenUri=(String)serviceContext.remove("bodyScreenUri");  String xslfoAttachScreenLocationParam=(String)serviceContext.remove("xslfoAttachScreenLocation");  String attachmentNameParam=(String)serviceContext.remove("attachmentName");  List<String> xslfoAttachScreenLocationListParam=UtilGenerics.checkList(serviceContext.remove("xslfoAttachScreenLocationList"));  List<String> attachmentNameListParam=UtilGenerics.checkList(serviceContext.remove("attachmentNameList"));  List<String> xslfoAttachScreenLocationList=new LinkedList<String>();  List<String> attachmentNameList=new LinkedList<String>();  if (UtilValidate.isNotEmpty(xslfoAttachScreenLocationParam))   xslfoAttachScreenLocationList.add(xslfoAttachScreenLocationParam);  if (UtilValidate.isNotEmpty(attachmentNameParam))   attachmentNameList.add(attachmentNameParam);  if (UtilValidate.isNotEmpty(xslfoAttachScreenLocationListParam))   xslfoAttachScreenLocationList.addAll(xslfoAttachScreenLocationListParam);  if (UtilValidate.isNotEmpty(attachmentNameListParam))   attachmentNameList.addAll(attachmentNameListParam);  Locale locale=(Locale)serviceContext.get("locale");  Map<String,Object> bodyParameters=UtilGenerics.checkMap(serviceContext.remove("bodyParameters"));  if (bodyParameters == null) {    bodyParameters=MapStack.create();  }  if (!bodyParameters.containsKey("locale")) {    bodyParameters.put("locale",locale);  } else {    locale=(Locale)bodyParameters.get("locale");  }  String partyId=(String)serviceContext.get("partyId");  if (partyId == null) {    partyId=(String)bodyParameters.get("partyId");  }  String orderId=(String)bodyParameters.get("orderId");  String custRequestId=(String)bodyParameters.get("custRequestId");  bodyParameters.put("communicationEventId",serviceContext.get("communicationEventId"));  NotificationServices.setBaseUrl(dctx.getDelegator(),webSiteId,bodyParameters);  String contentType=(String)serviceContext.remove("contentType");  StringWriter bodyWriter=new StringWriter();  MapStack<String> screenContext=MapStack.create();  screenContext.put("locale",locale);  ScreenRenderer screens=new ScreenRenderer(bodyWriter,screenContext,htmlScreenRenderer);  screens.populateContextForService(dctx,bodyParameters);  screenContext.putAll(bodyParameters);  if (bodyScreenUri != null) {    try {      screens.render(bodyScreenUri);    } catch (    GeneralException e) {      Debug.logError(e,"Error rendering screen for email: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenEmailError",UtilMisc.toMap("errorString",e.toString()),locale));    }catch (    IOException e) {      Debug.logError(e,"Error rendering screen for email: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenEmailError",UtilMisc.toMap("errorString",e.toString()),locale));    }catch (    SAXException e) {      Debug.logError(e,"Error rendering screen for email: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenEmailError",UtilMisc.toMap("errorString",e.toString()),locale));    }catch (    ParserConfigurationException e) {      Debug.logError(e,"Error rendering screen for email: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenEmailError",UtilMisc.toMap("errorString",e.toString()),locale));    }  }  boolean isMultiPart=false;  if (UtilValidate.isNotEmpty(xslfoAttachScreenLocationList)) {    List<Map<String,? extends Object>> bodyParts=new LinkedList<Map<String,? extends Object>>();    if (bodyText != null) {      bodyText=FlexibleStringExpander.expandString(bodyText,screenContext,locale);      bodyParts.add(UtilMisc.<String,Object>toMap("content",bodyText,"type","text/html"));    } else {      bodyParts.add(UtilMisc.<String,Object>toMap("content",bodyWriter.toString(),"type","text/html"));    }    for (int i=0; i < xslfoAttachScreenLocationList.size(); i++) {      String xslfoAttachScreenLocation=xslfoAttachScreenLocationList.get(i);      String attachmentName="Details.pdf";      if (UtilValidate.isNotEmpty(attachmentNameList) && attachmentNameList.size() >= i) {        attachmentName=attachmentNameList.get(i);      }      isMultiPart=true;      try {        Writer writer=new StringWriter();        MapStack<String> screenContextAtt=MapStack.create();        ScreenRenderer screensAtt=new ScreenRenderer(writer,screenContext,foScreenRenderer);        screensAtt.populateContextForService(dctx,bodyParameters);        screenContextAtt.putAll(bodyParameters);        screensAtt.render(xslfoAttachScreenLocation);        StreamSource src=new StreamSource(new StringReader(writer.toString()));        ByteArrayOutputStream baos=new ByteArrayOutputStream();        Fop fop=ApacheFopWorker.createFopInstance(baos,MimeConstants.MIME_PDF);        ApacheFopWorker.transform(src,null,fop);        baos.flush();        baos.close();        bodyParts.add(UtilMisc.<String,Object>toMap("content",baos.toByteArray(),"type","application/pdf","filename",attachmentName));      } catch (      Exception e) {        Debug.logError(e,"Error rendering PDF attachment for email: " + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendRenderingScreenPdfError",UtilMisc.toMap("errorString",e.toString()),locale));      }      serviceContext.put("bodyParts",bodyParts);    }  } else {    isMultiPart=false;    if (bodyText != null) {      bodyText=FlexibleStringExpander.expandString(bodyText,screenContext,locale);      serviceContext.put("body",bodyText);    } else {      serviceContext.put("body",bodyWriter.toString());    }    if (contentType != null && contentType.equalsIgnoreCase("text/plain")) {      serviceContext.put("contentType","text/plain");    } else {      serviceContext.put("contentType","text/html");    }  }  String subject=(String)serviceContext.remove("subject");  subject=FlexibleStringExpander.expandString(subject,screenContext,locale);  Debug.logInfo("Expanded email subject to: " + subject,module);  serviceContext.put("subject",subject);  serviceContext.put("partyId",partyId);  if (UtilValidate.isNotEmpty(orderId)) {    serviceContext.put("orderId",orderId);  }  if (UtilValidate.isNotEmpty(custRequestId)) {    serviceContext.put("custRequestId",custRequestId);  }  if (Debug.verboseOn())   Debug.logVerbose("sendMailFromScreen sendMail context: " + serviceContext,module);  Map<String,Object> result=ServiceUtil.returnSuccess();  Map<String,Object> sendMailResult;  Boolean hideInLog=(Boolean)serviceContext.get("hideInLog");  hideInLog=hideInLog == null ? false : hideInLog;  try {    if (!hideInLog) {      if (isMultiPart) {        sendMailResult=dispatcher.runSync("sendMailMultiPart",serviceContext);      } else {        sendMailResult=dispatcher.runSync("sendMail",serviceContext);      }    } else {      if (isMultiPart) {        sendMailResult=dispatcher.runSync("sendMailMultiPartHiddenInLog",serviceContext);      } else {        sendMailResult=dispatcher.runSync("sendMailHiddenInLog",serviceContext);      }    }  } catch (  Exception e) {    Debug.logError(e,"Error send email:" + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendError",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (ServiceUtil.isError(sendMailResult)) {    return ServiceUtil.returnError(ServiceUtil.getErrorMessage(sendMailResult));  }  result.put("messageWrapper",sendMailResult.get("messageWrapper"));  result.put("body",bodyWriter.toString());  result.put("subject",subject);  result.put("communicationEventId",sendMailResult.get("communicationEventId"));  if (UtilValidate.isNotEmpty(orderId)) {    result.put("orderId",orderId);  }  if (UtilValidate.isNotEmpty(custRequestId)) {    result.put("custRequestId",custRequestId);  }  return result;}  }
class C{  private void init(){  mFadeDuration=DEFAULT_FADE_DURATION;  mDesiredAspectRatio=0;  mPlaceholderImage=null;  mPlaceholderImageScaleType=DEFAULT_SCALE_TYPE;  mRetryImage=null;  mRetryImageScaleType=DEFAULT_SCALE_TYPE;  mFailureImage=null;  mFailureImageScaleType=DEFAULT_SCALE_TYPE;  mProgressBarImage=null;  mProgressBarImageScaleType=DEFAULT_SCALE_TYPE;  mActualImageScaleType=DEFAULT_ACTUAL_IMAGE_SCALE_TYPE;  mActualImageMatrix=null;  mActualImageFocusPoint=null;  mActualImageColorFilter=null;  mBackground=null;  mOverlays=null;  mPressedStateOverlay=null;  mRoundingParams=null;}  }
class C{  public void addContentType(int type){  findAttributeValues(LinkFormat.CONTENT_TYPE).add(Integer.toString(type));}  }
class C{  public static PublishingToMarketplaceNotPermittedException convertToApi(org.oscm.internal.types.exception.PublishingToMarketplaceNotPermittedException oldEx){  return convertExceptionToApi(oldEx,PublishingToMarketplaceNotPermittedException.class);}  }
class C{  public final static byte[] extractTargetInfoFromType2Message(byte[] msg,Integer msgFlags){  int flags=msgFlags == null ? extractFlagsFromType2Message(msg) : msgFlags;  if (!ByteUtilities.isFlagSet(flags,FLAG_NEGOTIATE_TARGET_INFO)) {    return null;  }  int pos=40;  return readSecurityBufferTarget(msg,pos);}  }
class C{  public boolean isMarked(){  return pair.mark;}  }
class C{  public void play(String url,int expectedKBitSecRate) throws Exception {  if (url.indexOf(':') > 0) {    URLConnection cn=new URL(url).openConnection();    cn.connect();    dumpHeaders(cn);    istream=cn.getInputStream();    FlashAACInputStream flvStream=new FlashAACInputStream(istream);    play(flvStream,expectedKBitSecRate);  } else   play(new FileInputStream(url),expectedKBitSecRate);}  }
class C{  public void addSourceGeometryToLayer(Object docSource,RenderableLayer layer){  if (WWUtil.isEmpty(docSource)) {    String message=Logging.getMessage("nullValue.SourceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (layer == null) {    String message=Logging.getMessage("nullValue.LayerIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GeoJSONDoc doc=null;  try {    doc=new GeoJSONDoc(docSource);    doc.parse();    if (doc.getRootObject() instanceof GeoJSONObject) {      this.addGeoJSONGeometryToLayer((GeoJSONObject)doc.getRootObject(),layer);    } else     if (doc.getRootObject() instanceof Object[]) {      for (      Object o : (Object[])doc.getRootObject()) {        if (o instanceof GeoJSONObject) {          this.addGeoJSONGeometryToLayer((GeoJSONObject)o,layer);        } else {          this.handleUnrecognizedObject(o);        }      }    } else {      this.handleUnrecognizedObject(doc.getRootObject());    }  } catch (  IOException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToReadGeoJSON",docSource);    Logging.logger().log(Level.SEVERE,message,e);    throw new WWRuntimeException(message,e);  } finally {    WWIO.closeStream(doc,docSource.toString());  }}  }
class C{  public FloatMatrix put(int r,FloatMatrix indices,float v){  return put(r,indices.findIndices(),v);}  }
class C{  public void unmountVmfsDatastore(Datastore datastore){  try {    String vmfsUuid=getVmfsVolumeUuid(datastore);    host.getHostStorageSystem().unmountVmfsVolume(vmfsUuid);  } catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public void writeFile(final String filename){  log.info("Writing table to " + filename);  BufferedWriter out=null;  try {    out=new BufferedWriter(new FileWriter(filename));    int maxLength=0;    for (    Object o : this.columns) {      double[] a=(double[])o;      if (maxLength < a.length) {        maxLength=a.length;      }    }    for (int i=0; i < maxLength; i++) {      for (      Object o : this.columns) {        double[] a=(double[])o;        if (i < a.length) {          out.write(Double.toString(a[i]));        }        out.write(SEPARATOR);      }      out.write(NEWLINE);    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public Set<ReceiptDetail> aggregateDuplicateReceiptDetailObject(final List<ReceiptDetail> receiptDetailSetParam){  final List<ReceiptDetail> newReceiptDetailList=new ArrayList<ReceiptDetail>(0);  int counter=0;  for (  final ReceiptDetail receiptDetailObj : receiptDetailSetParam) {    if (counter == 0)     newReceiptDetailList.add(receiptDetailObj); else {      final int checknew=checkIfReceiptDetailObjectExist(newReceiptDetailList,receiptDetailObj);      if (checknew == -1)       newReceiptDetailList.add(receiptDetailObj); else {        final ReceiptDetail receiptDetail=new ReceiptDetail();        final ReceiptDetail newReceiptDetailObj=newReceiptDetailList.get(checknew);        newReceiptDetailList.remove(checknew);        receiptDetail.setAccounthead(newReceiptDetailObj.getAccounthead());        receiptDetail.setAccountPayeeDetails(newReceiptDetailObj.getAccountPayeeDetails());        receiptDetail.setCramount(newReceiptDetailObj.getCramount().add(receiptDetailObj.getCramount()));        receiptDetail.setCramountToBePaid(newReceiptDetailObj.getCramountToBePaid());        receiptDetail.setDescription(newReceiptDetailObj.getDescription());        receiptDetail.setDramount(newReceiptDetailObj.getDramount().add(receiptDetailObj.getDramount()));        receiptDetail.setFinancialYear(newReceiptDetailObj.getFinancialYear());        receiptDetail.setFunction(newReceiptDetailObj.getFunction());        receiptDetail.setOrdernumber(newReceiptDetailObj.getOrdernumber());        newReceiptDetailList.add(receiptDetail);      }    }    counter++;  }  return new HashSet<ReceiptDetail>(newReceiptDetailList);}  }
class C{  public static Intent forgeIntentNewMessage(Context ctx,Intent newgroupChatMessage,String chatId){  newgroupChatMessage.setClass(ctx,GroupTalkView.class);  newgroupChatMessage.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);  newgroupChatMessage.putExtra(GroupTalkView.EXTRA_MODE,GroupChatMode.INCOMING);  newgroupChatMessage.putExtra(GroupChatIntent.EXTRA_CHAT_ID,chatId);  return newgroupChatMessage;}  }
class C{  ReturnStatement(AST ast){  super(ast);}  }
class C{  private boolean registerUsername(String username){  if (username != null && username.trim().length() > 0) {    MDC.put(USER_KEY,username);    return true;  }  return false;}  }
class C{  protected void threadSleep(){  try {    Thread.sleep(options.getCheckInterval() * 1000L);  } catch (  InterruptedException e) {    ;  }}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class<?> c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  private List<Offer> createAppOffers(Context context){  if (appOffers != null) {    return appOffers;  }  TypeToken<List<Offer>> token=new TypeToken<List<Offer>>(){  };  List<Offer> initialOffers=JsonUtils.parseJsonFile(context,"app_offers.json",token);  for (  Offer offer : initialOffers) {    int resId=context.getResources().getIdentifier(offer.getIcon(),"drawable",context.getPackageName());    offer.setCardIcon(resId);  }  appOffers=initialOffers;  return appOffers;}  }
class C{  public SpherePortrayal3D(double scale){  this(Color.white,scale);}  }
class C{  public BlockMask(Extent extent,BaseBlock... block){  this(extent,Arrays.asList(checkNotNull(block)));}  }
class C{  public static Animation[] fadeInThenOutAnimation(long duration,long delay){  return new Animation[]{fadeInAnimation(duration,0),fadeOutAnimation(duration,duration + delay)};}  }
class C{  public void testGetSpeed_default(){  testSpeed(PreferencesUtils.TRACK_COLOR_MODE_SLOW_DEFAULT,PreferencesUtils.TRACK_COLOR_MODE_MEDIUM_DEFAULT);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String name=e.getPropertyName();  if ("editorClosing".equals(name)) {    for (int n=0; n < sessionNodeKeys.size(); n++) {      if (e.getNewValue().equals((sessionNodeKeys.get(n)))) {        sessionNodeKeys.remove(n);      }    }  } else   if ("closeFrame".equals(e.getPropertyName())) {    if (getFramesMap().containsKey(e.getSource())) {      Object frameObject=getFramesMap().get(e.getSource());      JInternalFrame frame=(JInternalFrame)frameObject;      frame.setVisible(false);      frame.dispose();    }  } else   if ("name".equals(e.getPropertyName())) {    if (getFramesMap().containsKey(e.getSource())) {      Object frameObject=getFramesMap().get(e.getSource());      JInternalFrame frame=(JInternalFrame)frameObject;      String _name=(String)(e.getNewValue());      frame.setTitle(_name);      setMainTitle(_name);    }  }}  }
class C{  public TomcatManagerException(){  super();}  }
class C{  static String toHex(long n){  char s1[]=new char[16];  char s2[]=new char[18];  int i=0;  do {    long d=n & 0xf;    s1[i++]=(char)((d < 10) ? ('0' + d) : ('a' + d - 10));  } while ((n>>>=4) > 0);  s2[0]='0';  s2[1]='x';  int j=2;  while (--i >= 0) {    s2[j++]=s1[i];  }  return new String(s2,0,j);}  }
class C{  public void connect(TreeLinkNode root){  if (root == null)   return;  TreeLinkNode pre=root;  TreeLinkNode cur=null;  while (pre.left != null) {    cur=pre;    while (cur != null) {      cur.left.next=cur.right;      if (cur.next != null)       cur.right.next=cur.next.left;      cur=cur.next;    }    pre=pre.left;  }}  }
class C{  public static String tagToString(int tag){  char[] c=new char[4];  c[0]=(char)(0xff & (tag >> 24));  c[1]=(char)(0xff & (tag >> 16));  c[2]=(char)(0xff & (tag >> 8));  c[3]=(char)(0xff & (tag));  return new String(c);}  }
class C{  public static final Object readValueXml(XmlPullParser parser,String[] name) throws XmlPullParserException, java.io.IOException {  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      return readThisValueXml(parser,name);    } else     if (eventType == parser.END_TAG) {      throw new XmlPullParserException("Unexpected end tag at: " + parser.getName());    } else     if (eventType == parser.TEXT) {      throw new XmlPullParserException("Unexpected text: " + parser.getText());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Unexpected end of document");}  }
class C{  public String replace(String text){  return filter.replace(text);}  }
class C{  public void advancePosition(int advance){  if (extendedPosition) {    long[] parts=new long[3];    parts[0]=tweak[0] & 0xFFFFFFFFL;    parts[1]=(tweak[0] >>> 32) & 0xFFFFFFFFL;    parts[2]=tweak[1] & 0xFFFFFFFFL;    long carry=advance;    for (int i=0; i < parts.length; i++) {      carry+=parts[i];      parts[i]=carry;      carry>>>=32;    }    tweak[0]=((parts[1] & 0xFFFFFFFFL) << 32) | (parts[0] & 0xFFFFFFFFL);    tweak[1]=(tweak[1] & 0xFFFFFFFF00000000L) | (parts[2] & 0xFFFFFFFFL);  } else {    long position=tweak[0];    position+=advance;    tweak[0]=position;    if (position > LOW_RANGE) {      extendedPosition=true;    }  }}  }
class C{  public static InetAddress decrement(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0x00) {    addr[i]=(byte)0xff;    i--;  }  Preconditions.checkArgument(i >= 0,"Decrementing %s would wrap.",address);  addr[i]--;  return bytesToInetAddress(addr);}  }
class C{  public synchronized UDAudio stop(){  final MediaPlayer player=getMediaPlayer();  if (player != null && player.isPlaying()) {    try {      player.stop();    } catch (    Exception e) {      e.printStackTrace();    }  }  return this;}  }
class C{  public void attemptTickLabelFontSelection(){  FontChooserPanel panel=new FontChooserPanel(this.tickLabelFont);  int result=JOptionPane.showConfirmDialog(this,panel,localizationResources.getString("Font_Selection"),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);  if (result == JOptionPane.OK_OPTION) {    this.tickLabelFont=panel.getSelectedFont();    this.tickLabelFontField.setText(this.tickLabelFont.getFontName() + " " + this.tickLabelFont.getSize());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  getCapDevInput(stack).setProvider(0);  Scheduler.getInstance().kick(false);  return null;}  }
class C{  private static int recordSize(byte type){switch (type) {case ct_change_cipher_spec:case ct_alert:    return maxAlertRecordSize;case ct_handshake:  return maxRecordSize;case ct_application_data:return 0;}throw new RuntimeException("Unknown record type: " + type);}  }
class C{  public static int testLoop7Snippet(int a,int b,MemoryScheduleTest obj){  int ret=0;  int bb=b;  for (int i=0; i < a; i++) {    ret=obj.hash;    if (a > 10) {      bb++;    } else {      bb--;      for (int k=0; k < a; ++k) {        if (k % 2 == 1) {          for (int j=0; j < b; ++j) {            obj.hash=3;          }        }      }    }    ret=ret / 10;  }  return ret + bb;}  }
class C{  public Builder(final OutputStream output_stream){  if (output_stream == null) {    throw new IllegalArgumentException("Null input stream.");  }  this.wrappedStream=output_stream;}  }
class C{  public CLabel(Icon image,int horizontalAlignment){  super(image,horizontalAlignment);  init();}  }
class C{  public static boolean isOOM(Throwable t){  return t != null && (t instanceof OutOfMemoryError || (t instanceof IllegalStateException && t.getMessage() != null && t.getMessage().contains("OutOfMemoryError")));}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  int[] bandOffs;  if (numBanks == 1) {    bandOffs=orderBands(bandOffsets,w * h);  } else {    bandOffs=new int[bandOffsets.length];  }  SampleModel sampleModel=new BandedSampleModel(dataType,w,h,w,bankIndices,bandOffs);  return sampleModel;}  }
class C{  public void start(){  if (state == State.READY) {    if (rUncompressed) {      payloadSize=0;      audioRecorder.startRecording();      audioRecorder.read(buffer,0,buffer.length);    } else {      mediaRecorder.start();    }    state=State.RECORDING;  } else {    state=State.ERROR;  }}  }
class C{  public void draw(Canvas canvas,PinView leftThumb,PinView rightThumb){  canvas.drawLine(leftThumb.getX(),mY,rightThumb.getX(),mY,mPaint);}  }
class C{  protected String ensureAttributesNamespaceIsDeclared(String ns,String localName,String rawName) throws org.xml.sax.SAXException {  if (ns != null && ns.length() > 0) {    int index=0;    String prefixFromRawName=(index=rawName.indexOf(":")) < 0 ? "" : rawName.substring(0,index);    if (index > 0) {      String uri=m_prefixMap.lookupNamespace(prefixFromRawName);      if (uri != null && uri.equals(ns)) {        return null;      } else {        this.startPrefixMapping(prefixFromRawName,ns,false);        this.addAttribute("http://www.w3.org/2000/xmlns/",prefixFromRawName,"xmlns:" + prefixFromRawName,"CDATA",ns,false);        return prefixFromRawName;      }    } else {      String prefix=m_prefixMap.lookupPrefix(ns);      if (prefix == null) {        prefix=m_prefixMap.generateNextPrefix();        this.startPrefixMapping(prefix,ns,false);        this.addAttribute("http://www.w3.org/2000/xmlns/",prefix,"xmlns:" + prefix,"CDATA",ns,false);      }      return prefix;    }  }  return null;}  }
class C{  public void onActivityCreated(Context context){  mTextColorPrimary=ContextCompat.getColor(context,AppUtils.getThemedResId(context,android.R.attr.textColorPrimary));}  }
class C{  public boolean isWithin(final Membership[] bounds,final Membership... moreBounds){  for (  final Membership bound : bounds) {    if (bound != null && !bound.isWithin(this)) {      return false;    }  }  for (  final Membership bound : moreBounds) {    if (bound != null && !bound.isWithin(this)) {      return false;    }  }  return true;}  }
class C{  public boolean isAnyOrgTrx(){  Object oo=get_Value(COLUMNNAME_AnyOrgTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private final double f(double n,double m){  return (m + 0.5) * log2(n / m) + (n - m) * log2(n);}  }
class C{  public double computeAverageLocalOfObservations() throws Exception {  double te=0.0;  for (int b=0; b < totalObservations; b++) {    int timeSeries=timeSeriesIndex[b];    double[] source=vectorOfSourceObservations.elementAt(timeSeries);    double[] dest=vectorOfDestinationObservations.elementAt(timeSeries);    int[] counts=getCounts(source,dest,timeStepIndex[b],timeSeries);    double logTerm=0.0;    double cont=0.0;    if (counts[NEXT_PAST_SOURCE] > 0) {      logTerm=((double)counts[NEXT_PAST_SOURCE] / (double)counts[PAST_SOURCE]) / ((double)counts[NEXT_PAST] / (double)counts[PAST]);      cont=Math.log(logTerm);    }    te+=cont;    if (debug) {      System.out.println(b + ": " + dest[timeStepIndex[b]]+ " ("+ counts[NEXT_PAST_SOURCE]+ " / "+ counts[PAST_SOURCE]+ ") / ("+ counts[NEXT_PAST]+ " / "+ counts[PAST]+ ") = "+ logTerm+ " -> "+ (cont / Math.log(2.0))+ " -> sum: "+ (te / Math.log(2.0)));    }  }  lastAverage=te / (double)totalObservations / Math.log(2.0);  return lastAverage;}  }
class C{  @Deprecated public synchronized boolean isHostSet(){  return host != null;}  }
class C{  public CampaignConfigurationBuilder withLanguage(long languageId){  Language language=new Language();  language.setId(languageId);  return withCriterion(language);}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  this.context=context;  mShapeColor=DEFAULT_SHAPE_COLOR;  mShapeType=DEFAULT_SHAPE;  mLetterColor=DEFAULT_LETTER_COLOR;  mLetterSize=DEFAULT_LETTER_SIZE;  mLettersNumber=DEFAULT_LETTERS_NUMBER;  mInitials=DEFAULT_INITIALS_STATE;  mInitialsNumber=DEFAULT_INITIALS_NUMBER;  mRoundRectRx=DEFAULT_ROUND_RECT_RADIUS;  mRoundRectRy=DEFAULT_ROUND_RECT_RADIUS;  mShapePaint=new Paint();  mShapePaint.setStyle(Paint.Style.FILL);  mShapePaint.setAntiAlias(true);  mLetterPaint=new Paint();  mLetterPaint.setAntiAlias(true);  mLetterPaint.setTypeface(Typeface.createFromAsset(context.getAssets(),DEFAULT_FONT_PATH));  if (!isInEditMode() && attrs != null) {    initAttributes(context,attrs);  }}  }
class C{  public boolean isSearchOpen(){  return mIsSearchOpen;}  }
class C{  @Override public void handleEvent(VehicleLeavesTrafficEvent event){  double tripDistance=distancePerVehiclePerTrip.get(event.getVehicleId()).peekLast();  totalDistance+=tripDistance;  double distInterval=Math.floor(tripDistance / 100) * 100;  int distEntry=0;  if (numberOfTripsPerTripDistanceInterval.containsKey(distInterval)) {    distEntry=numberOfTripsPerTripDistanceInterval.get(distInterval);  }  numberOfTripsPerTripDistanceInterval.put(distInterval,++distEntry);  double tripDuration=event.getTime() - pers2lastDepatureTime.get(event.getPersonId());  totalTt+=tripDuration;  ttPerVehiclePerTrip.get(event.getVehicleId()).add(tripDuration);  double durationInterval=Math.floor(tripDuration / 100) * 100;  int durEntry=0;  if (numberOfTripsPerTripDurationInterval.containsKey(durationInterval)) {    durEntry=numberOfTripsPerTripDurationInterval.get(durationInterval);  }  numberOfTripsPerTripDurationInterval.put(durationInterval,++durEntry);  double avgTripSpeed=tripDistance / tripDuration;  sumOfSpeedsMessured+=avgTripSpeed;  avgSpeedPerVehiclePerTrip.get(event.getVehicleId()).add(avgTripSpeed);  double speedInterval=Math.floor(avgTripSpeed);  int speedEntry=0;  if (numberOfTripsPerTripSpeedInterval.containsKey(speedInterval)) {    speedEntry=numberOfTripsPerTripSpeedInterval.get(speedInterval);  }  numberOfTripsPerTripSpeedInterval.put(speedInterval,++speedEntry);}  }
class C{  void processCall(Instruction s){  for (  HeapOperand<?> operand : ssa.getHeapDefs(s)) {    DF_LatticeCell c=findOrCreateCell(operand.getHeapVariable());    if (c instanceof ObjectCell) {      ((ObjectCell)c).setBOTTOM();    } else {      ((ArrayCell)c).setBOTTOM();    }  }}  }
class C{  public boolean onMouseDown(){  if (enabled && hasVisibleItems) {    element.setClassName(css.menuBarItemSelected());    pressed=true;    actionSelectedHandler.onActionSelected(group);    return true;  }  return false;}  }
class C{  protected static boolean isConnectedWifi(){  NetworkInfo info=getNetworkInfo();  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  @Override public String toString(){  return canonicalForm;}  }
class C{  public TimeoutException(){  super();}  }
class C{  public static byte[] fromHexString(String text){  text=text.trim();  if (text.length() % 2 != 0)   text="0" + text;  int resLen=text.length() / 2;  int loNibble, hiNibble;  byte[] res=new byte[resLen];  for (int i=0; i < resLen; i++) {    int j=i << 1;    hiNibble=charToNibble(text.charAt(j));    loNibble=charToNibble(text.charAt(j + 1));    if (loNibble == -1 || hiNibble == -1)     return null;    res[i]=(byte)(hiNibble << 4 | loNibble);  }  return res;}  }
class C{  public BracketRule(IToken token){  fToken=token;}  }
class C{  @Override public void onRestoreInstanceState(Parcelable state){  SavedState ss=(SavedState)state;  super.onRestoreInstanceState(ss.getSuperState());  this.toolbar.setTitle(ss.toolbarTitle);}  }
class C{  private void dynInit(){}  }
class C{  private void loadEnvironmentDescription() throws IOException {  if (bufferedInputString == null) {    BufferedReader buf;    bufferedInputString="";    try {      buf=new BufferedReader(new FileReader(descriptionfile));    } catch (    IOException e) {      System.out.println("Error reading the input file " + descriptionfile);      throw (e);    }    try {      String temp="";      while (temp != null) {        temp=buf.readLine();        if (temp != null)         bufferedInputString+=temp + "\n";      }    } catch (    IOException e) {    }  }  StringReader stringReader=new StringReader(bufferedInputString);  Reader raw_in=new PreProcessor(stringReader);  StreamTokenizer in=new StreamTokenizer(raw_in);  String token;  SimulatedObject[] temp_objs=new SimulatedObject[MAX_SIM_OBJS];  int temp_objs_count=0;  ControlSystemS[] temp_css=new ControlSystemS[MAX_SIM_OBJS];  int temp_css_count=0;  double x, y, t, r;  double x1, y1, x2, y2;  int color1, color2;  int vc;  idcounter=0;  String string1, string2;  TBDictionary bboard=new TBDictionary();  boolean dfl=true;  top=5;  bottom=-5;  left=-5;  right=5;  in.wordChars('A','_');  in.quoteChar('"');  token="beginning of file";  try {    while (in.nextToken() != StreamTokenizer.TT_EOF) {      if (in.ttype == StreamTokenizer.TT_WORD) {        token=in.sval;        if (false)         System.out.println(token);        if (token.equalsIgnoreCase("dictionary")) {          String key, obj;          if (in.nextToken() == StreamTokenizer.TT_WORD) {            key=in.sval;          } else {            token=in.sval;            throw new IOException();          }          in.nextToken();          obj=in.sval;          bboard.put(key,obj);        }        if (token.equalsIgnoreCase("vision_noise")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            visionNoiseMean=(double)in.nval;          } else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            visionNoiseStddev=(double)in.nval;          } else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            visionNoiseSeed=(long)in.nval;          } else {            token=in.sval;            throw new IOException();          }        }        if (token.equalsIgnoreCase("view_robot_trails")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            token=in.sval;            throw new IOException();          } else {            if (in.sval.equalsIgnoreCase("on"))             draw_trails=true;          }        }        if (token.equalsIgnoreCase("view_robot_IDs")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            token=in.sval;            throw new IOException();          } else {            if (in.sval.equalsIgnoreCase("on"))             draw_ids=true;          }        }        if (token.equalsIgnoreCase("view_robot_state")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            token=in.sval;            throw new IOException();          } else {            if (in.sval.equalsIgnoreCase("on"))             draw_robot_state=true;          }        }        if (token.equalsIgnoreCase("view_object_info")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            token=in.sval;            throw new IOException();          } else {            if (in.sval.equalsIgnoreCase("on"))             draw_object_state=true;          }        }        if (token.equalsIgnoreCase("view_icons")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            token=in.sval;            throw new IOException();          } else {            if (in.sval.equalsIgnoreCase("on"))             draw_icons=true;          }        }        if (token.equalsIgnoreCase("background_image")) {          in.nextToken();          String img_filename=in.sval;          System.out.println("loading " + "background image file " + img_filename);          Toolkit tk=Toolkit.getDefaultToolkit();          bgimage=tk.getImage(img_filename);          tk.prepareImage(bgimage,-1,-1,this);        }        if (token.equalsIgnoreCase("background")) {          if (in.nextToken() == StreamTokenizer.TT_WORD) {            String tmp=in.sval;            tmp=tmp.replace('x','0');            tmp=tmp.replace('X','0');            bgcolor=new Color(Integer.parseInt(tmp,16));          } else {            bgcolor=new Color((int)in.nval);          }        }        if (token.equalsIgnoreCase("time")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            time_compression=in.nval;          } else {            token=in.sval;            throw new IOException();          }        }        if (token.equalsIgnoreCase("timeout")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            timeout=(long)in.nval;          } else {            token=in.sval;            throw new IOException();          }        }        if (token.equalsIgnoreCase("seed")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            if (!read_once)             seed=(long)in.nval;          } else {            token=in.sval;            throw new IOException();          }        }        if (token.equalsIgnoreCase("graphics")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            token=in.sval;            throw new IOException();          } else {            if (in.sval.equalsIgnoreCase("off"))             graphics_on=false;          }        }        if (token.equalsIgnoreCase("trials")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            if (trials == -1)             trials=(int)in.nval;            if (trials < 0)             throw new IOException();          } else {            token=in.sval;            throw new IOException();          }        }        if (token.equalsIgnoreCase("maxtimestep")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            timestep=(long)in.nval;            System.out.println("maxtimestep statement read, treated as timestep");          } else {            token=in.sval;            throw new IOException();          }        }        if (token.equalsIgnoreCase("timestep")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER) {            timestep=(long)in.nval;          } else {            token=in.sval;            throw new IOException();          }        }        if (token.equalsIgnoreCase("bounds")) {          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           left=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           right=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           bottom=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           top=in.nval; else {            token=in.sval;            throw new IOException();          }        }        if (token.equalsIgnoreCase("windowsize")) {          int localWidth=width;          int localHeight=height;          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           localWidth=(int)in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           localHeight=(int)in.nval; else {            token=in.sval;            throw new IOException();          }          if (!preserveSize) {            setSize(localWidth,localHeight);            reSizeWindow();          }        }        if (token.equalsIgnoreCase("object")) {          if (in.nextToken() == StreamTokenizer.TT_WORD)           string1=in.sval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           x=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           y=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           t=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           r=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_WORD) {            String tmp=in.sval;            tmp=tmp.replace('x','0');            tmp=tmp.replace('X','0');            color1=Integer.parseInt(tmp,16);          } else {            color1=(int)in.nval;          }          if (in.nextToken() == StreamTokenizer.TT_WORD) {            String tmp=in.sval;            tmp=tmp.replace('x','0');            tmp=tmp.replace('X','0');            color2=Integer.parseInt(tmp,16);          } else {            color2=(int)in.nval;          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           vc=(int)in.nval; else {            token=in.sval;            throw new IOException();          }          token=string1;          Class rclass=Class.forName(string1);          SimulatedObject obj=(SimulatedObject)rclass.newInstance();          obj.init(x,y,t,r,new Color(color1),new Color(color2),vc,idcounter++,seed++);          temp_objs[temp_objs_count++]=obj;        }        if (token.equalsIgnoreCase("linearobject")) {          if (in.nextToken() == StreamTokenizer.TT_WORD)           string1=in.sval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           x1=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           y1=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           x2=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           y2=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           r=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_WORD) {            String tmp=in.sval;            tmp=tmp.replace('x','0');            tmp=tmp.replace('X','0');            color1=Integer.parseInt(tmp,16);          } else {            color1=(int)in.nval;          }          if (in.nextToken() == StreamTokenizer.TT_WORD) {            String tmp=in.sval;            tmp=tmp.replace('x','0');            tmp=tmp.replace('X','0');            color2=Integer.parseInt(tmp,16);          } else {            color2=(int)in.nval;          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           vc=(int)in.nval; else {            token=in.sval;            throw new IOException();          }          token=string1;          System.out.println(string1);          Class rclass=Class.forName(string1);          SimulatedLinearObject obj=(SimulatedLinearObject)rclass.newInstance();          obj.init(x1,y1,x2,y2,r,new Color(color1),new Color(color2),vc,idcounter++,seed++);          temp_objs[temp_objs_count++]=obj;        }        if (token.equalsIgnoreCase("robot")) {          if (in.nextToken() == StreamTokenizer.TT_WORD)           string1=in.sval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_WORD)           string2=in.sval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           x=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           y=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           t=in.nval; else {            token=in.sval;            throw new IOException();          }          if (in.nextToken() == StreamTokenizer.TT_WORD) {            String tmp=in.sval;            tmp=tmp.replace('x','0');            tmp=tmp.replace('X','0');            color1=Integer.parseInt(tmp,16);          } else {            color1=(int)in.nval;          }          if (in.nextToken() == StreamTokenizer.TT_WORD) {            String tmp=in.sval;            tmp=tmp.replace('x','0');            tmp=tmp.replace('X','0');            color2=Integer.parseInt(tmp,16);          } else {            color2=(int)in.nval;          }          if (in.nextToken() == StreamTokenizer.TT_NUMBER)           vc=(int)in.nval; else {            token=in.sval;            throw new IOException();          }          token=string1;          Class rclass=Class.forName(string1);          SimulatedObject obj=(SimulatedObject)rclass.newInstance();          obj.init(x,y,t,0,new Color(color1),new Color(color2),vc,idcounter++,seed++);          temp_objs[temp_objs_count++]=obj;          ((Simple)obj).setDictionary(bboard);          token=string2;          Class csclass=Class.forName(string2);          ControlSystemS css=(ControlSystemS)csclass.newInstance();          css.init((Simple)obj,seed++);          temp_css[temp_css_count++]=(ControlSystemS)css;        }      } else {        throw new IOException();      }      stringReader.close();      raw_in.close();    }  } catch (  IOException e) {    dfl=false;    simulated_objects=new SimulatedObject[0];    String msg="bad format" + " at line " + in.lineno() + " in "+ descriptionfile+ " near "+ "'"+ token+ "'";    Dialog tmp;    if (graphics_on)     tmp=new DialogMessage(parent,"TBSim Error",msg); else     System.out.println(msg);    descriptionfile=null;  }catch (  ClassNotFoundException e) {    dfl=false;    simulated_objects=new SimulatedObject[0];    String msg="unable to find class " + "'" + token + "'"+ " at line "+ in.lineno()+ " in "+ descriptionfile+ ".\n"+ "You may need to check your CLASSPATH.";    Dialog tmp;    if (graphics_on)     tmp=new DialogMessage(parent,"TBSim Error",msg); else     System.out.println(msg);    descriptionfile=null;  }catch (  IllegalAccessException e) {    dfl=false;    simulated_objects=new SimulatedObject[0];    String msg="illegal to access class " + "'" + token + "'"+ " at line "+ in.lineno()+ " in "+ descriptionfile;    Dialog tmp;    if (graphics_on)     tmp=new DialogMessage(parent,"TBSim Error",msg); else     System.out.println(msg);    descriptionfile=null;  }catch (  InstantiationException e) {    dfl=false;    simulated_objects=new SimulatedObject[0];    String msg="instantiation error for " + "'" + token + "'"+ " at line "+ in.lineno()+ " in "+ descriptionfile;    Dialog tmp;    if (graphics_on)     tmp=new DialogMessage(parent,"TBSim Error",msg); else     System.out.println(msg);    descriptionfile=null;  }catch (  ClassCastException e) {    dfl=false;    simulated_objects=new SimulatedObject[0];    String msg="class conflict for " + "'" + token + "'"+ " at line "+ in.lineno()+ " in "+ descriptionfile+ "."+ " It could be that the control system was not "+ " written for the type of robot you "+ " specified.";    Dialog tmp;    if (graphics_on)     tmp=new DialogMessage(parent,"TBSim Error",msg); else     System.out.println(msg);    descriptionfile=null;  }  simulated_objects=new SimulatedObject[temp_objs_count];  for (int i=0; i < temp_objs_count; i++)   simulated_objects[i]=temp_objs[i];  for (int i=0; i < temp_objs_count; i++) {    simulated_objects[i].takeStep(0,simulated_objects);    if (simulated_objects[i] instanceof VisualObjectSensor) {      ((VisualObjectSensor)simulated_objects[i]).setVisionNoise(visionNoiseMean,visionNoiseStddev,visionNoiseSeed);    }  }  control_systems=new ControlSystemS[temp_css_count];  for (int i=0; i < temp_css_count; i++) {    control_systems[i]=temp_css[i];    control_systems[i].configure();  }  description_file_loaded=dfl;  read_once=true;}  }
class C{  @Override public String scrollToPositionAtProgress(float touchFraction){  if (mWidgets == null) {    return "";  }  int rowCount=mWidgets.getPackageSize();  if (rowCount == 0) {    return "";  }  stopScroll();  getCurScrollState(mScrollPosState,-1);  float pos=rowCount * touchFraction;  int availableScrollHeight=getAvailableScrollHeight(rowCount);  LinearLayoutManager layoutManager=((LinearLayoutManager)getLayoutManager());  layoutManager.scrollToPositionWithOffset(0,(int)-(availableScrollHeight * touchFraction));  int posInt=(int)((touchFraction == 1) ? pos - 1 : pos);  PackageItemInfo p=mWidgets.getPackageItemInfo(posInt);  return p.titleSectionName;}  }
class C{  public ComponentAnimation createAnimateLayoutFade(final int duration,int startingOpacity){  return animateLayout(duration,false,startingOpacity,false);}  }
class C{  public void testAddTooManyIndexesCodecReader() throws Exception {  Directory dir=newDirectory(random(),NoLockFactory.INSTANCE);  Document doc=new Document();  IndexWriter w=new IndexWriter(dir,new IndexWriterConfig(null));  for (int i=0; i < 100000; i++) {    w.addDocument(doc);  }  w.forceMerge(1);  w.commit();  w.close();  MockDirectoryWrapper dir2=newMockDirectory();  w=new IndexWriter(dir2,new IndexWriterConfig(null));  w.commit();  dir2.setMaxSizeInBytes(dir2.sizeInBytes() + 65536);  IndexReader r=DirectoryReader.open(dir);  CodecReader segReader=(CodecReader)r.leaves().get(0).reader();  CodecReader readers[]=new CodecReader[1 + (IndexWriter.MAX_DOCS / 100000)];  for (int i=0; i < readers.length; i++) {    readers[i]=segReader;  }  try {    w.addIndexes(readers);    fail("didn't get expected exception");  } catch (  IllegalArgumentException expected) {  }catch (  IOException fakeDiskFull) {    final Exception e;    if (fakeDiskFull.getMessage() != null && fakeDiskFull.getMessage().startsWith("fake disk full")) {      e=new RuntimeException("test failed: IW checks aren't working and we are executing addIndexes");      e.addSuppressed(fakeDiskFull);    } else {      e=fakeDiskFull;    }    throw e;  }  r.close();  w.close();  dir.close();  dir2.close();}  }
class C{  public final static byte[] encodeToByte(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new byte[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  byte[] dArr=new byte[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=(byte)CA[(i >>> 18) & 0x3f];    dArr[d++]=(byte)CA[(i >>> 12) & 0x3f];    dArr[d++]=(byte)CA[(i >>> 6) & 0x3f];    dArr[d++]=(byte)CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=(byte)CA[i >> 12];    dArr[dLen - 3]=(byte)CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? (byte)CA[i & 0x3f] : (byte)'=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  public void removeListener(final IDebuggerTemplateListener listener){  listeners.removeListener(listener);}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName) || DataSyncPreferenceFragment.class.getName().equals(fragmentName)|| NotificationPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  public void visit(TagHandler handler){  if (code == stagDefineFont3)   handler.defineFont3(this);}  }
class C{  protected void logError(OFErrorMsg error){  log.error("{} from switch {} in state {}",new Object[]{error.toString(),getSwitchInfoString(),this.toString()});}  }
class C{  public void itemStateChanged(ItemEvent e){  if (e.getStateChange() == ItemEvent.SELECTED) {    ChartPanel currentTab=(ChartPanel)m_jTabbedPaneContract.getSelectedComponent();    Integer newPeriod=new Integer(((BarSize)e.getItem()).getCode());    if (null != currentTab && !this.isConnected()) {      if (newPeriod.equals(BarSize.DAY)) {        newPeriod=currentTab.getTradestrategy().getBarSize();      }      if (!newPeriod.equals(currentTab.getTradestrategy().getStrategyData().getCandleDataset().getSeries(0).getBarSize())) {        if (newPeriod.compareTo(currentTab.getTradestrategy().getBarSize()) > -1) {          currentTab.getTradestrategy().getStrategyData().changeCandleSeriesPeriod(newPeriod);          this.clearStatusBarMessage();        } else {          this.setStatusBarMessage("Time period not supported by candle series",BasePanel.WARNING);        }      }    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:39.168 -0500",hash_original_method="F2F8EDC382104DB344E8DD617201B0F3",hash_generated_method="578DBC5A309B191CCA3B03F182C709DB") private byte[] twosComplement(){  prepareJavaRepresentation();  if (this.sign == 0) {    return new byte[]{0};  }  BigInteger temp=this;  int bitLen=bitLength();  int iThis=getFirstNonzeroDigit();  int bytesLen=(bitLen >> 3) + 1;  byte[] bytes=new byte[bytesLen];  int firstByteNumber=0;  int highBytes;  int bytesInInteger=4;  int hB;  if (bytesLen - (numberLength << 2) == 1) {    bytes[0]=(byte)((sign < 0) ? -1 : 0);    highBytes=4;    firstByteNumber++;  } else {    hB=bytesLen & 3;    highBytes=(hB == 0) ? 4 : hB;  }  int digitIndex=iThis;  bytesLen-=iThis << 2;  if (sign < 0) {    int digit=-temp.digits[digitIndex];    digitIndex++;    if (digitIndex == numberLength) {      bytesInInteger=highBytes;    }    for (int i=0; i < bytesInInteger; i++, digit>>=8) {      bytes[--bytesLen]=(byte)digit;    }    while (bytesLen > firstByteNumber) {      digit=~temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  } else {    while (bytesLen > firstByteNumber) {      int digit=temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  }  return bytes;}  }
class C{  public boolean isFunctionEnabled(String function){  return propertyContainsFunction("sys.usb.config",function);}  }
class C{  public boolean refreshObjectState(boolean keepOldState){  boolean changeDetected=false;  Object[] args=null;  if (keepOldState) {    oldObjectState.putAll(objectState);  }  for (  Map.Entry<String,Method> gettorMethodEntry : getterMethodMap.entrySet()) {    String property=gettorMethodEntry.getKey();    Object propertyValue=null;    try {      Method m=gettorMethodEntry.getValue();      propertyValue=m.invoke(mbeanObject,args);      OpenMethod op=methodHandlerMap.get(m);      propertyValue=op.toOpenReturnValue(propertyValue);    } catch (    Exception e) {      propertyValue=null;      if (logger.isTraceEnabled()) {        logger.trace(e.getMessage());      }    }    Object oldValue=objectState.put(property,propertyValue);    if (!changeDetected) {      if (propertyValue != null) {        if (!propertyValue.equals(oldValue)) {          changeDetected=true;        }      } else {        if (oldValue != null) {          changeDetected=true;        }      }    }  }  boolean retVal=prevRefreshChangeDetected || changeDetected;  prevRefreshChangeDetected=changeDetected;  return retVal;}  }
class C{  public IP nextIP(){  return new IP(value + 1);}  }
class C{  protected AbstractMatrix2D(){}  }
class C{  protected static int findNextNewLineCharCompat(CharSequence s,int start){  int position=findNextNewLineChar(s,start);  if (position == -1) {    return s.length();  }  return position;}  }
class C{  public void containerDestroy(Container container){  if (container != null) {    containerDeallocate(container);    getContainerList().remove(container);    Log.printLine("ContainerVm# " + getId() + " containerDestroy:......"+ container.getId()+ "Is deleted from the list");    while (getContainerList().contains(container)) {      Log.printConcatLine("The container",container.getId()," is still here");    }    container.setVm(null);  }}  }
class C{  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {  ArrayList<QualityQuery> res=new ArrayList<>();  StringBuilder sb;  try {    while (null != (sb=read(reader,"<top>",null,false,false))) {      HashMap<String,String> fields=new HashMap<>();      sb=read(reader,"<num>",null,true,false);      int k=sb.indexOf(":");      String id=sb.substring(k + 1).trim();      sb=read(reader,"<title>",null,true,false);      k=sb.indexOf(">");      String title=sb.substring(k + 1).trim();      read(reader,"<desc>",null,false,false);      sb.setLength(0);      String line=null;      while ((line=reader.readLine()) != null) {        if (line.startsWith("<narr>"))         break;        if (sb.length() > 0)         sb.append(' ');        sb.append(line);      }      String description=sb.toString().trim();      sb.setLength(0);      while ((line=reader.readLine()) != null) {        if (line.startsWith("</top>"))         break;        if (sb.length() > 0)         sb.append(' ');        sb.append(line);      }      String narrative=sb.toString().trim();      fields.put("title",title);      fields.put("description",description);      fields.put("narrative",narrative);      QualityQuery topic=new QualityQuery(id,fields);      res.add(topic);    }  }  finally {    reader.close();  }  QualityQuery qq[]=res.toArray(new QualityQuery[0]);  Arrays.sort(qq);  return qq;}  }
class C{  public void close() throws IOException {  br.close();}  }
class C{  static String normalizeDefaultHostname(String defaultHostname){  requireNonNull(defaultHostname,"defaultHostname");  if (needsNormalization(defaultHostname)) {    defaultHostname=IDN.toASCII(defaultHostname,IDN.ALLOW_UNASSIGNED);  }  if (!HOSTNAME_PATTERN.matcher(defaultHostname).matches()) {    throw new IllegalArgumentException("defaultHostname: " + defaultHostname);  }  return defaultHostname.toLowerCase(Locale.ENGLISH);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NODE_ID;case 2:  return DOMAIN_ID;case 3:return HOSTNAME;case 4:return PORT;default :return null;}}  }
class C{  public void receiveErrorqueryStorageFileSystems(java.lang.Exception e){}  }
class C{  protected void linkStationsToNetwork(){  log.info("Linking pt stations to network...");  Counter counter=new Counter("route # ");  Set<TransitStopFacility> newFacilities=new HashSet<>();  for (  TransitStopFacility facility : this.schedule.getFacilities().values()) {    final Id<Link> closestLink=findClosestLink(facility);    if (closestLink != null) {      List<Id<TransitStopFacility>> localLinkedFacilities=new ArrayList<>();      facility.setLinkId(closestLink);      localLinkedFacilities.add(facility.getId());      final List<Id<Link>> oppositeDirectionLinks=getOppositeDirection(closestLink);      if (oppositeDirectionLinks != null && !oppositeDirectionLinks.isEmpty()) {        TransitStopFacility[] newStopFacilities=multiplyStop(facility,oppositeDirectionLinks.size());        for (int i=0; i < oppositeDirectionLinks.size(); i++) {          newStopFacilities[i + 1].setLinkId(oppositeDirectionLinks.get(i));          localLinkedFacilities.add(newStopFacilities[i + 1].getId());          newFacilities.add(newStopFacilities[i + 1]);        }      }      linkedStopFacilitiesTree.put(facility.getId(),localLinkedFacilities);    }    counter.incCounter();  }  for (  TransitStopFacility facility : newFacilities) {    this.schedule.addStopFacility(facility);  }  counter.printCounter();  log.info("Linking pt stations to network... done.");  for (  List<Id<TransitStopFacility>> facilityList : linkedStopFacilitiesTree.values()) {    for (    Id<TransitStopFacility> facilityId : facilityList) {      linkedStopFacilities.add(facilityId);    }  }}  }
class C{  @Override public int compare(Scanner.Entry o1,Scanner.Entry o2){  return comparator.compare(o1.getBlockBuffer(),o1.getKeyOffset(),o1.getKeyLength(),o2.getBlockBuffer(),o2.getKeyOffset(),o2.getKeyLength());}  }
class C{  @Override public Response addTags(final String environmentId,final String containerId,final String tagsJson){  try {    Environment environment=environmentManager.loadEnvironment(environmentId);    EnvironmentContainerHost containerHost=environment.getContainerHostById(containerId);    Set<String> tags=JsonUtil.fromJson(tagsJson,new TypeToken<Set<String>>(){    }.getType());    for (    String tag : tags) {      containerHost=containerHost.addTag(tag);    }  } catch (  Exception e) {    return Response.status(Response.Status.BAD_REQUEST).entity(JsonUtil.toJson(e)).build();  }  return Response.ok().build();}  }
class C{  @Override protected boolean removeAllReferencesOnDelete(){  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceCaseActivation_();}  }
class C{  public boolean validate(ResponseHeaders networkResponse){  if (networkResponse.headers.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {    return true;  }  if (lastModified != null && networkResponse.lastModified != null && networkResponse.lastModified.getTime() < lastModified.getTime()) {    return true;  }  return false;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void findAndInit(Iterator<?> it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  public void close(ResponseListener<Object> listener){  service.closeLaunchSession(this,listener);}  }
class C{  public void cancelButtonActionPerformed(){  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText1.setText(stdStatus1);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);}  }
class C{  @Override public boolean equals(Object compareKey){  return (compareKey instanceof MonKeyImp && summaryLabel.equals(((MonKeyImp)compareKey).summaryLabel) && units.equals(((MonKeyImp)compareKey).units));}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthProgressBarUI();}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Instances(Reader reader) throws IOException {  StreamTokenizer tokenizer;  tokenizer=new StreamTokenizer(reader);  initTokenizer(tokenizer);  readHeader(tokenizer);  m_ClassIndex=-1;  m_Instances=new FastVector(1000);  while (getInstance(tokenizer,true)) {  }  ;  compactify();}  }
class C{  public Vector<int[]> computeStartAndEndTimePairs(boolean[] valid){  int startTime=0;  int endTime=0;  boolean lookingForStart=true;  Vector<int[]> startAndEndTimePairs=new Vector<int[]>();  for (int t=0; t < valid.length; t++) {    if (lookingForStart) {      if (valid[t]) {        if (t - startTime < k) {          continue;        } else {          endTime=t;          lookingForStart=false;          if (t == valid.length - 1) {            int[] timePair=new int[2];            timePair[0]=startTime;            timePair[1]=endTime;            startAndEndTimePairs.add(timePair);          }        }      } else {        startTime=t + 1;      }    } else {      boolean terminateSequence=false;      if (valid[t]) {        endTime=t;      } else {        terminateSequence=true;      }      if (t == valid.length - 1) {        terminateSequence=true;      }      if (terminateSequence) {        int[] timePair=new int[2];        timePair[0]=startTime;        timePair[1]=endTime;        startAndEndTimePairs.add(timePair);        lookingForStart=true;        startTime=t + 1;      }    }  }  return startAndEndTimePairs;}  }
class C{  public void ifNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNULL,label);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public MainThread(String[] args){  super("MainThread");  setDaemon(false);  this.agents=CommandLineArgs.getJavaAgentArgs();  this.args=args;  if (dbg) {    VM.sysWriteln("MainThread(args.length == ",args.length,"): constructor done");  }}  }
class C{  private boolean requestContainsSensitiveInfo(){  boolean sensitive=false;  for (  Map.Entry<String,String> header : conf.headers.entrySet()) {    if (header.getKey().contains(VAULT_EL_PREFIX) || header.getValue().contains(VAULT_EL_PREFIX)) {      sensitive=true;      break;    }  }  if (conf.requestBody != null && conf.requestBody.contains(VAULT_EL_PREFIX)) {    sensitive=true;  }  return sensitive;}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster destination=null;  WhiteboxRasterInfo imageInfo=null;  int nCols=0;  int nRows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double x, y, z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  String resampleMethod="nearest neighbour";  double north, south, east, west;  double gridResX, gridResY;  int currentFile=-1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  destHeader=args[1];  resampleMethod=args[2].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.equals("cubic convolution")) {    showFeedback("Resample method not recognized");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one images must be specified.");    return;  }  try {    destination=new WhiteboxRaster(destHeader,"rw");    nCols=destination.getNumberColumns();    nRows=destination.getNumberRows();    int nColsLessOne=nCols - 1;    int nRowsLessOne=nRows - 1;    north=destination.getNorth();    south=destination.getSouth();    east=destination.getEast();    west=destination.getWest();    gridResX=destination.getCellSizeX();    gridResY=destination.getCellSizeY();    double northernEdge=north - gridResY;    double westernEdge=west + gridResX;    if (north < south) {      northernEdge=north + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    outputNoData=destination.getNoDataValue();    double yRange=north - south - gridResY;    double xRange=east - west - gridResX;    int sourceCol, sourceRow;    double[][] imageData=new double[numImages][11];    for (a=0; a < numImages; a++) {      imageInfo=new WhiteboxRasterInfo(imageFiles[a]);      imageData[a][0]=imageInfo.getNorth();      imageData[a][1]=imageInfo.getSouth();      imageData[a][2]=imageInfo.getEast();      imageData[a][3]=imageInfo.getWest();      imageData[a][4]=imageInfo.getNumberRows();      imageData[a][5]=imageInfo.getNumberColumns();      imageData[a][6]=imageInfo.getCellSizeX();      imageData[a][7]=imageInfo.getCellSizeY();      imageData[a][8]=imageInfo.getNoDataValue();      imageData[a][9]=imageInfo.getEast() - imageInfo.getWest();      imageData[a][10]=imageInfo.getNorth() - imageInfo.getSouth();    }    if (resampleMethod.equals("nearest neighbour")) {      for (row=0; row < nRows; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        for (col=0; col < nCols; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          for (a=0; a < numImages; a++) {            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              if (a != currentFile) {                if (currentFile >= 0) {                  image.close();                }                image=new WhiteboxRaster(imageFiles[a],"r");                currentFile=a;              }              sourceRow=(int)Math.round((imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5));              sourceCol=(int)Math.round((x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5));              z=image.getValue(sourceRow,sourceCol);              if (z != imageData[a][8]) {                destination.setValue(row,col,z);                break;              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      image.close();    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.equals("cubic convolution")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[16][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[4][2];      }      for (row=0; row < nRows; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        for (col=0; col < nCols; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          for (a=0; a < numImages; a++) {            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              if (a != currentFile) {                if (currentFile >= 0) {                  image.close();                }                image=new WhiteboxRaster(imageFiles[a],"r");                currentFile=a;              }              imageNoData=imageData[a][8];              srcRow=(imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5);              srcCol=(x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5);              originRow=Math.floor(srcRow);              originCol=Math.floor(srcCol);              sumOfDist=0;              for (i=0; i < numNeighbours; i++) {                rowN=originRow + shiftY[i];                colN=originCol + shiftX[i];                neighbour[i][0]=image.getValue((int)rowN,(int)colN);                dY=rowN - srcRow;                dX=colN - srcCol;                if ((dX + dY) != 0 && neighbour[i][0] != imageNoData) {                  neighbour[i][1]=1 / (dX * dX + dY * dY);                  sumOfDist+=neighbour[i][1];                } else                 if (neighbour[i][0] == imageNoData) {                  neighbour[i][1]=0;                } else {                  destination.setValue(row,col,neighbour[i][0]);                  break;                }              }              if (sumOfDist > 0) {                z=0;                for (i=0; i < numNeighbours; i++) {                  z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;                }                destination.setValue(row,col,z);                break;              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      image.close();    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    returnData(destHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean hasNext(){  try {    return hasNextThrow();  } catch (  SQLException e) {    last=null;    closeQuietly();    throw new IllegalStateException("Errors getting more results of " + dataClass,e);  }}  }
class C{  public static ContentBlock unhighlighted(String content){  return new ContentBlock(content,false);}  }
class C{  protected void addTargetsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Annotation_targets_feature"),getString("_UI_PropertyDescriptor_description","_UI_Annotation_targets_feature","_UI_Annotation_type"),TypesPackage.Literals.ANNOTATION__TARGETS,true,false,true,null,null,null));}  }
class C{  public static void cacheReset(int WindowNo){  String key=String.valueOf(WindowNo) + ":";  int startNo=s_loadedLookups.size();  ArrayList<String> toDelete=new ArrayList<String>();  Iterator iterator=s_loadedLookups.keySet().iterator();  while (iterator.hasNext()) {    String info=(String)iterator.next();    if (info != null && info.startsWith(key))     toDelete.add(info);  }  for (int i=0; i < toDelete.size(); i++)   s_loadedLookups.remove(toDelete.get(i));  int endNo=s_loadedLookups.size();  s_log.fine("WindowNo=" + WindowNo + " - "+ startNo+ " -> "+ endNo);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public B put(TypeToken<? extends B> key,B value){  throw new UnsupportedOperationException();}  }
class C{  protected void calculateStatesPartialsPruning(int[] states1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3,int[] matrixMap){  double sum, tmp;  int u=0;  int v=0;  for (int k=0; k < patternCount; k++) {    int state1=states1[k];    int w=matrixMap[k] * matrixSize;    if (state1 < stateCount) {      for (int i=0; i < stateCount; i++) {        tmp=matrices1[w + state1];        sum=0.0;        for (int j=0; j < stateCount; j++) {          sum+=matrices2[w] * partials2[v + j];          w++;        }        partials3[u]=tmp * sum;        u++;      }      v+=stateCount;    } else {      for (int i=0; i < stateCount; i++) {        sum=0.0;        for (int j=0; j < stateCount; j++) {          sum+=matrices2[w] * partials2[v + j];          w++;        }        partials3[u]=sum;        u++;      }      v+=stateCount;    }  }}  }
class C{  public DepthFirstSearch(){  this(Integer.MAX_VALUE);}  }
class C{  public Closure addPostNodeCompletionDelegate(Closure delegate){  getProxyBuilder().postNodeCompletionDelegates.addFirst(delegate);  return delegate;}  }
class C{  public void createPictScenario07() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-01 11:00:00"));  String supplierAdminId="Pict07Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict07SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),15);  String customerAdminId="Pict07Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict07CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("10.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("30.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),Arrays.asList(VOVatRateFactory.newVOOrganizationVatRate(new BigDecimal("50.00"),customer)));  VOServiceDetails serviceUnitTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_07",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplierMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceUnitTempl,TestPriceModel.EXAMPLE_PICT07_RATA_MONTH,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VOServiceDetails serviceFreeTempl=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_07_Upgrade",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT07_RATA_MONTH,technicalServiceAsync,supplierMarketplace);  VOServiceDetails serviceFreeDetails=serviceSetup.savePriceModelForCustomer(serviceFreeTempl,TestPriceModel.FREE,customer);  serviceFreeDetails=serviceSetup.activateMarketableService(serviceFreeDetails);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceUnitTempl,serviceFreeTempl);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_07",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-01 12:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-02 05:00:00"),"FILE_UPLOAD",10);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long roleChangeTime=DateTimeHandling.calculateMillis("2013-08-02 06:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(roleChangeTime);  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-02 12:00:00"));  subDetails=subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-03 12:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-06 12:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-07 12:00:00"),"LONG_NUMBER","500");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-08 12:00:00"));  subDetails=subscrSetup.completeAsyncModifySubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-15 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(upgradedSubDetails,DateTimeHandling.calculateMillis("2013-08-15 12:10:00"),"FILE_UPLOAD",10);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-16 12:30:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-20 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_07",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_07",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_07",customer);}  }
class C{  public static String escapeCsv(String str){  if (StringUtils.containsNone(str,CSV_SEARCH_CHARS)) {    return str;  }  try {    StringWriter writer=new StringWriter();    escapeCsv(writer,str);    return writer.toString();  } catch (  IOException ioe) {    throw new UnhandledException(ioe);  }}  }
class C{  public void show(){  show(false,null);}  }
class C{  public GF2Matrix(int n,char typeOfMatrix){  this(n,typeOfMatrix,new java.security.SecureRandom());}  }
class C{  public boolean waitForDraw(long timeout) throws InterruptedException {  return drawLock.tryAcquire(timeout,TimeUnit.MILLISECONDS);}  }
class C{  public int hashCode(){  return getName().hashCode();}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList omGraphicList=new OMGraphicList();  omGraphicList.setTraverseMode(OMGraphicList.FIRST_ADDED_ON_TOP);  Projection projection=getProjection();  if (projection == null) {    if (Debug.debugging("location")) {      Debug.output(getName() + "|LocationLayer.prepare(): null projection, layer not ready.");    }    return omGraphicList;  }  if (Debug.debugging("location")) {    Debug.output(getName() + "|LocationLayer.prepare(): doing it");  }  if (useDeclutterMatrix && declutterMatrix != null) {    declutterMatrix.setWidth(projection.getWidth());    declutterMatrix.setHeight(projection.getHeight());    declutterMatrix.create();  }  if (Debug.debugging("location")) {    Debug.output(getName() + "|LocationLayer.prepare(): " + "calling prepare with projection: "+ projection+ " ul = "+ projection.getUpperLeft()+ " lr = "+ projection.getLowerRight());  }  Point2D ul=projection.getUpperLeft();  Point2D lr=projection.getLowerRight();  if (Debug.debugging("location")) {    double delta=lr.getX() - ul.getX();    Debug.output(getName() + "|LocationLayer.prepare(): " + " ul.lon ="+ ul.getX()+ " lr.lon = "+ lr.getY()+ " delta = "+ delta);  }  if (dataHandlers != null) {    for (    LocationHandler dataHandler : dataHandlers) {      dataHandler.get((float)ul.getY(),(float)ul.getX(),(float)lr.getY(),(float)lr.getX(),omGraphicList);    }  }  int size=0;  if (omGraphicList != null) {    size=omGraphicList.size();    if (Debug.debugging("basic")) {      Debug.output(getName() + "|LocationLayer.prepare(): finished with " + size+ " graphics");    }    for (    OMGraphic thingy : omGraphicList) {      if (useDeclutterMatrix && thingy instanceof Location) {        ((Location)thingy).generate(projection,declutterMatrix);      } else {        thingy.generate(projection);      }    }  } else   if (Debug.debugging("basic")) {    Debug.output(getName() + "|LocationLayer.prepare(): finished with null graphics list");  }  return omGraphicList;}  }
class C{  public LWL(Classifier classifier,int k,DistanceMetric dm){  this(classifier,k,dm,EpanechnikovKF.getInstance());}  }
class C{  @Override public boolean add(E o){  if (null == o) {    throw new NullPointerException();  }  if (offer(o)) {    return true;  }  throw new IllegalStateException();}  }
class C{  public void open() throws TTransportException {}  }
class C{  public NewOscWorldAction(final Workspace workspace){  super("OSC World",workspace);}  }
class C{  @Override public StackFrameDump dumpStackFrame() throws DebuggerException {  try {    Map<String,String> locals=gdb.infoLocals().getVariables();    locals.putAll(gdb.infoArgs().getVariables());    List<Variable> variables=new ArrayList<>(locals.size());    for (    Map.Entry<String,String> e : locals.entrySet()) {      String varName=e.getKey();      String varValue=e.getValue();      String varType;      try {        varType=gdb.ptype(varName).getType();      } catch (      GdbParseException pe) {        LOG.warn(pe.getMessage(),pe);        varType="";      }      VariablePath variablePath=new VariablePathImpl(singletonList(varName));      VariableImpl variable=new VariableImpl(varType,varName,varValue,true,variablePath,Collections.emptyList(),true);      variables.add(variable);    }    return new StackFrameDumpImpl(Collections.emptyList(),variables);  } catch (  GdbTerminatedException e) {    disconnect();    throw e;  }catch (  IOException|GdbParseException|InterruptedException e) {    throw new DebuggerException("Can't dump stack frame. " + e.getMessage(),e);  }}  }
class C{  public void addLiteralResultAttribute(String attrUri,String attrLocalName,String attrRawName,String attrValue){  QName key=new QName(attrUri,attrLocalName);  m_outputProperties.setProperty(key,attrValue);}  }
class C{  public Entry(String tag,long millis,String text){  if (tag == null)   throw new NullPointerException("tag == null");  if (text == null)   throw new NullPointerException("text == null");  mTag=tag;  mTimeMillis=millis;  mData=text.getBytes();  mFileDescriptor=null;  mFlags=IS_TEXT;}  }
class C{  public static String left(final int n){  return ESC + "[" + n+ "D";}  }
class C{  public static void populateFinalSolutionPerformances(Context.EvaluationPhases phase,Configuration configuration,FinalSolution finalSolution,boolean isFlagging){  Objective phaseObjective=PerformancesFactory.buildObjective(phase,configuration);  Node finalTree=new Constant(finalSolution.getSolution());  double[] phasePerformaceRoughtValues=phaseObjective.fitness(finalTree);  Map<String,Double> phasePerformances=null;switch (phase) {case TRAINING:    phasePerformances=finalSolution.getTrainingPerformances();  break;case VALIDATION:phasePerformances=finalSolution.getValidationPerformances();break;case LEARNING:phasePerformances=finalSolution.getLearningPerformances();break;}PerformacesObjective.populatePerformancesMap(phasePerformaceRoughtValues,phasePerformances,isFlagging);}  }
class C{  public void applyPattern(String template){  validatePattern(template);  pattern=template;}  }
class C{  public void insertUpdate(DocumentEvent e){  try {    int offs=e.getOffset();    if (firstOffsetModded == null || offs < firstOffsetModded.getOffset()) {      firstOffsetModded=e.getDocument().createPosition(offs);    }    offs=e.getOffset() + e.getLength();    if (lastOffsetModded == null || offs > lastOffsetModded.getOffset()) {      lastOffsetModded=e.getDocument().createPosition(offs);    }  } catch (  BadLocationException ble) {    ble.printStackTrace();  }  handleDocumentEvent(e);}  }
class C{  protected void addFromChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_fromChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_fromChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__FROM_CHANNELS,true,false,true,null,null,null));}  }
class C{  public FgsOrienter(ICovarianceMatrix covMatrix){  out.println("GES(orient) constructor");  setCovMatrix(covMatrix);  out.println("GES(orient) constructor done");}  }
class C{  protected void notifyListeners(Hashtable<TxState,Set<EventListener>> listeners,TxState state,boolean pre){  Set<EventListener> lstnrs=null;  FSMEnterEvent event=new FSMEnterEvent(eventsource_,state);synchronized (this) {    lstnrs=listeners.get(state);    if (lstnrs == null)     return;    lstnrs=new HashSet<EventListener>(lstnrs);  }  for (  EventListener listener : lstnrs) {    if (pre && (listener instanceof FSMPreEnterListener))     ((FSMPreEnterListener)listener).preEnter(event); else     if (!pre && (listener instanceof FSMEnterListener))     ((FSMEnterListener)listener).entered(event);  }}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DEFINITION_COLUMNS_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectDefinitionColumnNames/{businessObjectDefinitionColumnName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITION_COLUMNS_DELETE) public BusinessObjectDefinitionColumn deleteBusinessObjectDefinitionColumn(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectDefinitionColumnName") String businessObjectDefinitionColumnName){  return businessObjectDefinitionColumnService.deleteBusinessObjectDefinitionColumn(new BusinessObjectDefinitionColumnKey(namespace,businessObjectDefinitionName,businessObjectDefinitionColumnName));}  }
class C{  public CopyOnWriteMap(Map<K,V> data){  internalMap=new HashMap<K,V>(data);}  }
class C{  private void childClosed(final BaseAllocator childAllocator){  assertOpen();  if (DEBUG) {    Preconditions.checkArgument(childAllocator != null,"child allocator can't be null");synchronized (DEBUG_LOCK) {      final Object object=childAllocators.remove(childAllocator);      if (object == null) {        childAllocator.historicalLog.logHistory(logger);        throw new IllegalStateException("Child allocator[" + childAllocator.name + "] not found in parent allocator["+ name+ "]'s childAllocators");      }    }  }}  }
class C{  public long toLong(){  return TypeFormat.parseLong(this);}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void appendConstant(final StringBuffer buf,final Object cst){  if (cst == null) {    buf.append("null");  } else   if (cst instanceof String) {    appendString(buf,(String)cst);  } else   if (cst instanceof Type) {    buf.append("Type.getType(\"");    buf.append(((Type)cst).getDescriptor());    buf.append("\")");  } else   if (cst instanceof Handle) {    buf.append("new Handle(");    Handle h=(Handle)cst;    buf.append("Opcodes.").append(HANDLE_TAG[h.getTag()]).append(", \"");    buf.append(h.getOwner()).append("\", \"");    buf.append(h.getName()).append("\", \"");    buf.append(h.getDesc()).append("\")");  } else   if (cst instanceof Byte) {    buf.append("new Byte((byte)").append(cst).append(')');  } else   if (cst instanceof Boolean) {    buf.append(((Boolean)cst).booleanValue() ? "Boolean.TRUE" : "Boolean.FALSE");  } else   if (cst instanceof Short) {    buf.append("new Short((short)").append(cst).append(')');  } else   if (cst instanceof Character) {    int c=((Character)cst).charValue();    buf.append("new Character((char)").append(c).append(')');  } else   if (cst instanceof Integer) {    buf.append("new Integer(").append(cst).append(')');  } else   if (cst instanceof Float) {    buf.append("new Float(\"").append(cst).append("\")");  } else   if (cst instanceof Long) {    buf.append("new Long(").append(cst).append("L)");  } else   if (cst instanceof Double) {    buf.append("new Double(\"").append(cst).append("\")");  } else   if (cst instanceof byte[]) {    byte[] v=(byte[])cst;    buf.append("new byte[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof boolean[]) {    boolean[] v=(boolean[])cst;    buf.append("new boolean[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof short[]) {    short[] v=(short[])cst;    buf.append("new short[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(short)").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof char[]) {    char[] v=(char[])cst;    buf.append("new char[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(char)").append((int)v[i]);    }    buf.append('}');  } else   if (cst instanceof int[]) {    int[] v=(int[])cst;    buf.append("new int[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof long[]) {    long[] v=(long[])cst;    buf.append("new long[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('L');    }    buf.append('}');  } else   if (cst instanceof float[]) {    float[] v=(float[])cst;    buf.append("new float[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('f');    }    buf.append('}');  } else   if (cst instanceof double[]) {    double[] v=(double[])cst;    buf.append("new double[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('d');    }    buf.append('}');  }}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof DescriptionBean : "Assertion Error: Expected DescriptionBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[DescriptionTextRule]{" + digester.getMatch() + "} Begin");  }  super.begin(namespace,name,attributes);}  }
class C{  protected boolean isZoomToLayersKey(int keyCode){  return keyCode == '5';}  }
class C{  public void deleteAvatar(AvatarConfig config){  config.addCredentials(this);  POST(this.url + "/delete-avatar",config.toXML());}  }
class C{  private void handleExceptionalStatus(State state,InnerState innerState,HttpResponse response) throws StopRequest, RetryDownload {  int statusCode=response.getStatusLine().getStatusCode();  if (statusCode == 503 && mInfo.mNumFailed < Constants.MAX_RETRIES) {    handleServiceUnavailable(state,response);  }  if (statusCode == 301 || statusCode == 302 || statusCode == 303 || statusCode == 307) {    handleRedirect(state,response,statusCode);  }  int expectedStatus=innerState.mContinuingDownload ? 206 : DownloaderService.STATUS_SUCCESS;  if (statusCode != expectedStatus) {    handleOtherStatus(state,innerState,statusCode);  } else {    state.mRedirectCount=0;  }}  }
class C{  private void resizeFramebufferTexture(){  glDeleteTextures(tex);  createFramebufferTexture();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("slotDescription: ");  buffer.append(new String(slotDescription));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("manufacturerID: ");  buffer.append(new String(manufacturerID));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("flags: ");  buffer.append(Functions.slotInfoFlagsToString(flags));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("hardwareVersion: ");  buffer.append(hardwareVersion.toString());  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("firmwareVersion: ");  buffer.append(firmwareVersion.toString());  return buffer.toString();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  FilterValues<Integer> oper=new FilterValues<Integer>();  CollectorTestSink sortSink=new CollectorTestSink();  oper.filter.setSink(sortSink);  Integer[] values=new Integer[2];  oper.setValue(5);  oper.clearValues();  values[0]=200;  values[1]=2;  oper.setValue(4);  oper.setValues(values);  oper.beginWindow(0);  oper.data.process(2);  oper.data.process(5);  oper.data.process(7);  oper.data.process(42);  oper.data.process(200);  oper.data.process(2);  Assert.assertEquals("number emitted tuples",3,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",204,getTotal(sortSink.collectedTuples));  sortSink.clear();  oper.data.process(5);  Assert.assertEquals("number emitted tuples",0,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",0,getTotal(sortSink.collectedTuples));  sortSink.clear();  oper.data.process(2);  oper.data.process(33);  oper.data.process(2);  Assert.assertEquals("number emitted tuples",2,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",4,getTotal(sortSink.collectedTuples));  sortSink.clear();  oper.data.process(6);  oper.data.process(2);  oper.data.process(6);  oper.data.process(2);  oper.data.process(6);  oper.data.process(2);  oper.data.process(6);  oper.data.process(2);  Assert.assertEquals("number emitted tuples",4,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",8,getTotal(sortSink.collectedTuples));  sortSink.clear();  oper.setInverse(true);  oper.data.process(9);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",9,getTotal(sortSink.collectedTuples));  oper.endWindow();}  }
class C{  public Zone(ZoneTransferIn xfrin) throws IOException, ZoneTransferException {  fromXFR(xfrin);}  }
class C{  public static boolean verify(Signature signatureAlgorithm,PublicKey publicKey,byte[] signatureBytes,byte[] contentBytes) throws InvalidKeyException, SignatureException {  signatureAlgorithm.initVerify(publicKey);  signatureAlgorithm.update(contentBytes);  try {    return signatureAlgorithm.verify(signatureBytes);  } catch (  SignatureException e) {    return false;  }}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mSize >= mKeys.length && (mGarbage || hasReclaimedRefs())) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    WeakReference<?>[] nvalues=new WeakReference[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=new WeakReference(value);  mSize=pos + 1;}  }
class C{  public boolean removeAll(java.util.Collection<?> collection){  return this.hlist.removeAll(collection);}  }
class C{  public static double[] sqrtVector(double[] inVector){  int m=inVector.length;  double[] outVector=new double[m];  for (int i=0; i < m; ++i) {    outVector[i]=Math.sqrt(Math.abs(inVector[i]));  }  return (outVector);}  }
class C{  public long run(String[] args) throws Exception {  int nbatches=Integer.parseInt(args[0]);  int ncycles=Integer.parseInt(args[1]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  public Bookmark createorgetBookmark(final String url,final String user){  if (url == null || url.isEmpty())   return null;  try {    DigestURL durl=new DigestURL((url.indexOf("://") < 0) ? "http://" + url : url);    Bookmark bk=this.getBookmark(ASCII.String(durl.hash()));    if (bk == null) {      bk=new Bookmark(url);    }    bk.setOwner(user);    return (bk.getUrlHash() == null || bk.toMap() == null) ? null : bk;  } catch (  final MalformedURLException e) {    return null;  }}  }
class C{  public static List<Point> bresenham(int x0,int y0,int x1,int y1){  List<Point> points=new ArrayList<Point>(Math.abs(x1 - x0 + 1));  boolean steep=Math.abs(y1 - y0) > Math.abs(x1 - x0);  if (steep) {    int t=x0;    x0=y0;    y0=t;    t=x1;    x1=y1;    y1=t;  }  if (x0 > x1) {    int t=x0;    x0=x1;    x1=t;    t=y0;    y0=y1;    y1=t;  }  int deltax=x1 - x0;  int deltay=Math.abs(y1 - y0);  int error=deltax / 2;  int ystep=y0 < y1 ? 1 : -1;  int y=y0;  for (int x=x0; x <= x1; x+=1) {    if (steep)     points.add(new Point(y,x)); else     points.add(new Point(x,y));    error-=deltay;    if (error < 0) {      y+=ystep;      error+=deltax;    }  }  return points;}  }
class C{  public void startListening(Intent recognitionIntent){  speechRecognizer.startListening(recognitionIntent);}  }
class C{  public void close() throws IOException {  try {    if (bufferedBlockCipher != null) {      byte[] buf=new byte[bufferedBlockCipher.getOutputSize(0)];      int outLen=bufferedBlockCipher.doFinal(buf,0);      if (outLen != 0) {        out.write(buf,0,outLen);      }    }  } catch (  Exception e) {    throw new IOException("Error closing stream: " + e.toString());  }  flush();  super.close();}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public void addCell(final String cellContent){  toolTip.append("<td>");  toolTip.append(cellContent);  toolTip.append("</td>");}  }
class C{  public void dynamicDisplay(int col){  if (!gridTab.isOpen()) {    return;  }  for (  WEditor comp : editors) {    comp.setMandatoryLabels();  }  if (col > 0) {    GridField changedField=gridTab.getField(col);    String columnName=changedField.getColumnName();    ArrayList<?> dependants=gridTab.getDependantFields(columnName);    logger.config("(" + gridTab.toString() + ") "+ columnName+ " - Dependents="+ dependants.size());    if (dependants.size() == 0 && changedField.getCallout().length() > 0) {      return;    }  }  boolean noData=gridTab.getRowCount() == 0;  logger.config(gridTab.toString() + " - Rows=" + gridTab.getRowCount());  for (  WEditor comp : editors) {    GridField mField=comp.getGridField();    if (mField != null && mField.getIncluded_Tab_ID() <= 0) {      if (mField.isDisplayed(true)) {        if (!comp.isVisible()) {          comp.setVisible(true);        }        boolean dis=false;        if (noData) {          comp.setReadWrite(false);          dis=true;        } else {          boolean rw=mField.isEditable(true);          comp.setReadWrite(rw);          comp.setMandatory(mField.isMandatory(true));          comp.dynamicDisplay();          dis=!rw;        }        comp.repaintComponent();      } else       if (comp.isVisible()) {        comp.setVisible(false);      }    }  }  List<?> rows=grid.getRows().getChildren();  for (int i=0; i < rows.size(); i++) {    org.zkoss.zul.Row row=(org.zkoss.zul.Row)rows.get(i);    List<?> components=row.getChildren();    boolean visible=false;    boolean editorRow=false;    for (int j=0; j < components.size(); j++) {      Component component=(Component)components.get(j);      if (editorIds.contains(component.getUuid())) {        editorRow=true;        if (component.isVisible()) {          visible=true;          break;        }      }    }    if (editorRow && (row.isVisible() != visible))     row.setVisible(visible);  }  for (Iterator<Entry<String,List<org.zkoss.zul.Row>>> i=fieldGroupHeaders.entrySet().iterator(); i.hasNext(); ) {    Map.Entry<String,List<org.zkoss.zul.Row>> entry=i.next();    List<org.zkoss.zul.Row> contents=fieldGroupContents.get(entry.getKey());    boolean visible=false;    for (    org.zkoss.zul.Row row : contents) {      if (row.isVisible()) {        visible=true;        break;      }    }    List<org.zkoss.zul.Row> headers=entry.getValue();    for (    org.zkoss.zul.Row row : headers) {      if (row.isVisible() != visible)       row.setVisible(visible);    }  }  for (  EmbeddedPanel ep : includedPanel) {    if (ep.gridWindow.getTab(ep.tabIndex).isDisplayed()) {      ep.windowPanel.getParent().setVisible(true);      ep.group.setVisible(true);    } else {      ep.windowPanel.getParent().setVisible(false);      ep.group.setVisible(false);    }  }  for (  HorizontalEmbeddedPanel ep : horizontalIncludedPanel) {    if (ep.gridWindow.getTab(ep.tabIndex).isDisplayed()) {      ep.windowPanel.getParent().setVisible(true);      ep.divComponent.setVisible(true);    } else {      ep.windowPanel.getParent().setVisible(false);      ep.divComponent.setVisible(false);    }  }  logger.config(gridTab.toString() + " - fini - " + (col <= 0 ? "complete" : "seletive"));}  }
class C{  @Override public void drawRangeGridline(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Rectangle2D dataArea,double value){  Range range=axis.getRange();  if (!range.contains(value)) {    return;  }  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  Line2D line1=null;  Line2D line2=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    double x0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());    double x1=x0 + getXOffset();    double y0=dataArea.getMaxY();    double y1=y0 - getYOffset();    double y2=dataArea.getMinY();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x1,y2);  } else   if (orientation == PlotOrientation.VERTICAL) {    double y0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());    double y1=y0 - getYOffset();    double x0=dataArea.getMinX();    double x1=x0 + getXOffset();    double x2=dataArea.getMaxX();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x2,y1);  }  Paint paint=plot.getRangeGridlinePaint();  Stroke stroke=plot.getRangeGridlineStroke();  g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);  g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);  g2.draw(line1);  g2.draw(line2);}  }
class C{  public static KerberosTime now(){  long newMilli=System.currentTimeMillis();  long newMicro=System.nanoTime() / 1000;  long microElapsed=newMicro - initMicro;  long calcMilli=initMilli + microElapsed / 1000;  if (calcMilli - newMilli > 100 || newMilli - calcMilli > 100) {    if (DEBUG) {      System.out.println("System time adjusted");    }    initMilli=newMilli;    initMicro=newMicro;    return new KerberosTime(newMilli,0);  } else {    return new KerberosTime(calcMilli,(int)(microElapsed % 1000));  }}  }
class C{  public Dependency local(){  local=true;  return this;}  }
class C{  public boolean contains(float left,float top,float right,float bottom){  return this.left < this.right && this.top < this.bottom && this.left <= left && this.top <= top && this.right >= right && this.bottom >= bottom;}  }
class C{  public boolean contains(String aString){  return values.indexOf(dictionaryMap().get(aString)) >= 0;}  }
class C{  public static FSImageWriter newJpegWriter(float quality){  FSImageWriter writer=new FSImageWriter("jpg");  writer.setWriteCompressionMode(ImageWriteParam.MODE_EXPLICIT);  writer.setWriteCompressionType("JPEG");  writer.setWriteCompressionQuality(quality);  return writer;}  }
class C{  public void testStorageConfiguration() throws Exception {  StorageAgent agent=this.configureStorageService("testStorageConfiguration",1);  assertEquals("Initial backups should be 0",0,agent.list().length);  agent.release();}  }
class C{  public SootMethod resolveSpecialDispatch(SpecialInvokeExpr ie,SootMethod container){  container.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  SootMethod target=ie.getMethod();  target.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  if (target.getName().equals("<init>") || target.isPrivate())   return target; else   if (isClassSubclassOf(target.getDeclaringClass(),container.getDeclaringClass()))   return resolveConcreteDispatch(container.getDeclaringClass(),target); else   return target;}  }
class C{  public VdcNodeCheckResponse vdcNodeCheck(VdcNodeCheckParam checkParam){  WebResource rRoot;  rRoot=createRequest(VDCCONFIG_NODECHECK_URI);  rRoot.accept(MediaType.APPLICATION_XML);  try {    return addSignature(rRoot).post(VdcNodeCheckResponse.class,checkParam);  } catch (  UnauthorizedException e) {    throw GeoException.fatals.remoteVdcAuthorizationFailed(endPoint,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    throw GeoException.fatals.unableConnect(endPoint,e);  }}  }
class C{  public JARArchiveImpl(Archive<?> delegate){  super(JARArchive.class,delegate);}  }
class C{  public void startInstallerIntent(Uri fileUri){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setDataAndType(fileUri,resources.getString(R.string.application_mgr_mime));  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public void shutdown(){  pool.shutdown();}  }
class C{  public void test_newInstanceLjava_lang_Class$I(){  int[][] x;  int[] y={2};  x=(int[][])Array.newInstance(int[].class,y);  assertEquals("Failed to instantiate array properly",2,x.length);  boolean thrown=false;  try {    x=(int[][])Array.newInstance(null,y);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }  thrown=false;  try {    Array.newInstance(int[].class,new int[]{1,-1});  } catch (  NegativeArraySizeException e) {    thrown=true;  }  if (!thrown) {    fail("Negative array size failed to throw NegativeArraySizeException");  }  thrown=false;  try {    Array.newInstance(int[].class,new int[]{});  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Zero array size failed to throw IllegalArgumentException");  }}  }
class C{  public String next(){  model.setReadOnlyParams(true);  return BaseBean.OUTCOME_SERVICE_SUBSCRIBE;}  }
class C{  protected static final void checkOffset(int offset,CharacterIterator text){  if (offset < text.getBeginIndex() || offset > text.getEndIndex()) {    throw new IllegalArgumentException("offset out of bounds");  }}  }
class C{  public Key select(int k){  if (k < 0 || k >= size())   throw new IllegalArgumentException();  Node x=select(root,k);  return x.key;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public Socks5Message(int cmd,String hostName,int port){  super(cmd,null,port);  this.host=hostName;  this.version=SOCKS_VERSION;  addrType=SOCKS_ATYP_DOMAINNAME;  byte addr[]=hostName.getBytes();  data=new byte[7 + addr.length];  data[0]=(byte)SOCKS_VERSION;  data[1]=(byte)command;  data[2]=(byte)0;  data[3]=(byte)SOCKS_ATYP_DOMAINNAME;  data[4]=(byte)addr.length;  System.arraycopy(addr,0,data,5,addr.length);  data[data.length - 2]=(byte)(port >> 8);  data[data.length - 1]=(byte)(port);}  }
class C{  public void testBitLengthPositive3(){  byte aBytes[]={1,0,0,0,0,0,0,0,0,0,0};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(81,aNumber.bitLength());}  }
class C{  public static void listAcl(String fileSystem,String shareName){  renderArgs.put("dataTable",new ShareACLDataTable());  renderArgs.put("fileSystem",uri(fileSystem));  renderArgs.put("shareName",shareName);  renderArgs.put("aclURL","/file/filesystems/" + uri(fileSystem) + "/shares/"+ shareName+ "/acl");  renderArgs.put("permissionOptions",StringOption.options(new String[]{"Read","Change","FullControl"}));  renderArgs.put("fileSystemId",uri(fileSystem));  ViPRCoreClient client=BourneUtil.getViprClient();  FileShareRestRep restRep=client.fileSystems().get(uri(fileSystem));  renderArgs.put("fileSystemName",restRep.getName());  ShareACLForm shareACL=new ShareACLForm();  render(shareACL);}  }
class C{  public static final double[] toDoubleArray(Instance x,int L){  double a[]=new double[L];  for (int i=0; i < L; i++) {    a[i]=Math.round(x.value(i));  }  return a;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void processHttpResponseMessage(HttpMessage message){  HttpSessionTokensSet siteTokensSet=extension.getHttpSessionTokensSet(getSite());  if (siteTokensSet == null) {    log.debug("No session tokens for: " + this.getSite());    return;  }  Map<String,Cookie> tokenValues=new HashMap<>();  List<HttpCookie> cookiesToSet=message.getResponseHeader().getHttpCookies(message.getRequestHeader().getHostName());  for (  HttpCookie cookie : cookiesToSet) {    String lcCookieName=cookie.getName();    if (siteTokensSet.isSessionToken(lcCookieName)) {      try {        long maxAge=cookie.getMaxAge() < -1 ? 0 : cookie.getMaxAge();        Cookie ck=new Cookie(cookie.getDomain(),lcCookieName,cookie.getValue(),cookie.getPath(),(int)maxAge,cookie.getSecure());        tokenValues.put(lcCookieName,ck);      } catch (      IllegalArgumentException e) {        log.warn("Failed to create cookie [" + cookie + "] for site ["+ getSite()+ "]: "+ e.getMessage());      }    }  }  List<HttpCookie> requestCookies=message.getRequestHeader().getHttpCookies();  HttpSession session=message.getHttpSession();  if (session == null || !session.isValid()) {    session=getMatchingHttpSession(requestCookies,siteTokensSet);    if (log.isDebugEnabled()) {      log.debug("Matching session for response message (from site " + getSite() + "): "+ session);    }  } else {    if (log.isDebugEnabled()) {      log.debug("Matching cached session for response message (from site " + getSite() + "): "+ session);    }  }  boolean newSession=false;  if (session == null) {    session=new HttpSession(generateUniqueSessionName(),extension.getHttpSessionTokensSet(getSite()));    this.addHttpSession(session);    for (    HttpCookie cookie : requestCookies) {      String cookieName=cookie.getName();      if (siteTokensSet.isSessionToken(cookieName)) {        if (!tokenValues.containsKey(cookieName)) {          String domain=cookie.getDomain();          if (domain == null) {            domain=message.getRequestHeader().getHostName();          }          String path=cookie.getPath();          if (path == null) {            path="/";          }          Cookie ck=new Cookie(domain,cookieName,cookie.getValue(),path,(int)cookie.getMaxAge(),cookie.getSecure());          tokenValues.put(cookieName,ck);        }      }    }    newSession=true;  }  if (!tokenValues.isEmpty()) {    for (    Entry<String,Cookie> tv : tokenValues.entrySet()) {      session.setTokenValue(tv.getKey(),tv.getValue());    }  }  if (newSession && log.isDebugEnabled()) {    log.debug("Created a new session as no match was found: " + session);  }  session.setMessagesMatched(session.getMessagesMatched() + 1);  this.model.fireHttpSessionUpdated(session);  message.setHttpSession(session);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Out(String filename){  try {    OutputStream os=new FileOutputStream(filename);    OutputStreamWriter osw=new OutputStreamWriter(os,CHARSET_NAME);    out=new PrintWriter(osw,true);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){  T[] array=list.toArray((T[])new Object[list.size()]);  Arrays.sort(array,comparator);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(array[i++]);  }}  }
class C{  public void generateAtom(XmlWriter w) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3);  if (scheme != null) {    attrs.add(new XmlWriter.Attribute("scheme",scheme));  }  if (term != null) {    attrs.add(new XmlWriter.Attribute("term",term));  }  if (label != null) {    attrs.add(new XmlWriter.Attribute("label",label));  }  if (labelLang != null) {    attrs.add(new XmlWriter.Attribute("xml:lang",labelLang));  }  w.simpleElement(Namespaces.atomNs,"category",attrs,null);}  }
class C{  protected void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,int scale,int seriesIndex,Paint paint){  float temp;  if (xMin > xMax) {    temp=xMin;    xMin=xMax;    xMax=temp;  }  if (yMin > yMax) {    temp=yMin;    yMin=yMax;    yMax=temp;  }  SimpleSeriesRenderer renderer=mRenderer.getSeriesRendererAt(seriesIndex);  if (renderer.isGradientEnabled()) {    float minY=(float)toScreenPoint(new double[]{0,renderer.getGradientStopValue()},scale)[1];    float maxY=(float)toScreenPoint(new double[]{0,renderer.getGradientStartValue()},scale)[1];    float gradientMinY=Math.max(minY,Math.min(yMin,yMax));    float gradientMaxY=Math.min(maxY,Math.max(yMin,yMax));    int gradientMinColor=renderer.getGradientStopColor();    int gradientMaxColor=renderer.getGradientStartColor();    int gradientStartColor=gradientMaxColor;    int gradientStopColor=gradientMinColor;    if (yMin < minY) {      paint.setColor(gradientMinColor);      canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(gradientMinY),paint);    } else {      gradientStopColor=getGradientPartialColor(gradientMinColor,gradientMaxColor,(maxY - gradientMinY) / (maxY - minY));    }    if (yMax > maxY) {      paint.setColor(gradientMaxColor);      canvas.drawRect(Math.round(xMin),Math.round(gradientMaxY),Math.round(xMax),Math.round(yMax),paint);    } else {      gradientStartColor=getGradientPartialColor(gradientMaxColor,gradientMinColor,(gradientMaxY - minY) / (maxY - minY));    }    GradientDrawable gradient=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{gradientStartColor,gradientStopColor});    gradient.setBounds(Math.round(xMin),Math.round(gradientMinY),Math.round(xMax),Math.round(gradientMaxY));    gradient.draw(canvas);  } else {    if (Math.abs(yMin - yMax) < 1) {      if (yMin < yMax) {        yMax=yMin + 1;      } else {        yMax=yMin - 1;      }    }    canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(yMax),paint);  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WFieldUpdate.init");}  }
class C{  public void testBogusCSV() throws IOException {  FreeFormPointSet points=FreeFormPointSet.fromCsv(new File("src/test/resources/pointset/bogus.csv"));  assertNull(points);}  }
class C{  public final boolean analysisMode(){  return gameMode.analysisMode();}  }
class C{  private void showContextMenu(final MouseEvent event){  if (consumers.getSelectedIndex() > -1) {  }}  }
class C{  @Override public boolean isEmpty(){  return empty;}  }
class C{  public void startUp() throws PlayMusicNotFoundException, NoSuperUserException, CouldNotOpenDatabaseException {  PackageManager packageManager=mContext.getPackageManager();  try {    mPlayMusicApplicationInfo=packageManager.getApplicationInfo(PLAYMUSIC_PACKAGE_ID,0);  } catch (  PackageManager.NameNotFoundException e) {    throw new PlayMusicNotFoundException();  }  mPathPrivateData=mPlayMusicApplicationInfo.dataDir;  List<String> publicDataList=new ArrayList<>();  for (  String storage : FileTools.getStorages()) {    String publicData=storage + "/Android/data/com.google.android.music";    if (FileTools.directoryExists(publicData))     publicDataList.add(publicData);  }  mPathPublicData=publicDataList.toArray(new String[publicDataList.size()]);  loadDatabase();}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  @Override public void processEvent(Monitor mon){  JAMonDetailValue jamDetail=mon.getJAMonDetailRow();  jamDetail.setKeyToString(false);  addRow(jamDetail);}  }
class C{  public static void clear(JComboBox self){  self.removeAllItems();}  }
class C{  public static void validatePaymentTypeHandledByPSP(PaymentType paymentType) throws PaymentDataException {  if (paymentType == null || paymentType.getCollectionType() != PaymentCollectionType.PAYMENT_SERVICE_PROVIDER) {    PaymentDataException ex=new PaymentDataException("Validation of the payment type information failed",PaymentDataException.Reason.PAYMENT_TYPE_UNSUPPORTED_BY_PSP);    logger.logWarn(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.WARN_PAYMENT_TYPE_NOT_HANDLED_BY_PSP);    throw ex;  }}  }
class C{  public boolean isGasEqual(GasStack stack){  return stack != null && getGas() == stack.getGas();}  }
class C{  public static int convert2DTo1D(final int x,final int y,final int arrayWidth){  return y * arrayWidth + x;}  }
class C{  public Hessian2Input createHessian2Input(InputStream is){  Hessian2Input in=_freeHessian2Input.allocate();  if (in == null) {    in=new Hessian2Input(is);    in.setSerializerFactory(getSerializerFactory());  } else {    in.init(is);  }  return in;}  }
class C{  protected static void assertPartitionData(RegionAttributes regAttrs,PartitionAttributesData partitionAttributesData){  PartitionAttributesData data=partitionAttributesData;  PartitionAttributes partAttrs=regAttrs.getPartitionAttributes();  int redundantCopies=partAttrs.getRedundantCopies();  assertEquals(redundantCopies,data.getRedundantCopies());  long totalMaxMemory=partAttrs.getTotalMaxMemory();  assertEquals(totalMaxMemory,data.getTotalMaxMemory());  int totalNumBuckets=partAttrs.getTotalNumBuckets();  assertEquals(totalNumBuckets,data.getTotalNumBuckets());  int localMaxMemory=partAttrs.getLocalMaxMemory();  assertEquals(localMaxMemory,data.getLocalMaxMemory());  String colocatedWith=partAttrs.getColocatedWith();  assertEquals(colocatedWith,data.getColocatedWith());  String partitionResolver=null;  if (partAttrs.getPartitionResolver() != null) {    partitionResolver=partAttrs.getPartitionResolver().getName();  }  assertEquals(partitionResolver,data.getPartitionResolver());  long recoveryDelay=partAttrs.getRecoveryDelay();  assertEquals(recoveryDelay,data.getRecoveryDelay());  long startupRecoveryDelay=partAttrs.getStartupRecoveryDelay();  assertEquals(startupRecoveryDelay,data.getStartupRecoveryDelay());  if (partAttrs.getPartitionListeners() != null) {    for (int i=0; i < partAttrs.getPartitionListeners().length; i++) {      assertEquals((partAttrs.getPartitionListeners())[i].getClass().getCanonicalName(),data.getPartitionListeners()[i]);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.554 -0500",hash_original_method="9F7FB16A58B977A4E2DB5A0F397D878E",hash_generated_method="E4AC06DEA775AB143FDC21E24E9F7009") public final long addAndGet(long delta){  value+=delta;  return value;}  }
class C{  public int end(){  return Z_OK;}  }
class C{  public boolean isTimedOut(){  return internalResponse.timedOut();}  }
class C{  protected void addTime(long timeStamp){  if (timeStamp < startTime) {    if (Debug.debugging("clock")) {      Debug.output("Clock: setting startTime: " + timeStamp);    }    startTime=timeStamp;  }  if (timeStamp > endTime) {    if (Debug.debugging("clock")) {      Debug.output("Clock: setting endTime: " + timeStamp);    }    endTime=timeStamp;  }}  }
class C{  public static boolean join(@Nullable GridWorker w,@Nullable IgniteLogger log){  if (w != null)   try {    w.join();  } catch (  InterruptedException ignore) {    warn(log,"Got interrupted while waiting for completion of runnable: " + w);    Thread.currentThread().interrupt();    return false;  }  return true;}  }
class C{  public PrivateSetIntersection(ArrayList<byte[]> values) throws NoSuchAlgorithmException {  this.blindedItems=new ArrayList<BigInteger>();  BigInteger rand;  do {    rand=new BigInteger(DH_SUBGROUP_SIZE,random);  } while (rand.equals(BigInteger.ZERO) || rand.equals(BigInteger.ONE));  this.x=DH_GROUP_PARAMETERS.getG().modPow(rand,DH_GROUP_PARAMETERS.getP());  MessageDigest md=MessageDigest.getInstance(HASH_ALGORITHM);  for (  byte[] v : values) {    md.reset();    byte[] itemHash=md.digest(v);    BigInteger val=new BigInteger(1,itemHash);    BigInteger item=DH_GROUP_PARAMETERS.getG().modPow(val,DH_GROUP_PARAMETERS.getP());    BigInteger blindedItem=item.modPow(x,DH_GROUP_PARAMETERS.getP());    this.blindedItems.add(blindedItem);  }  Collections.shuffle(this.blindedItems,random);}  }
class C{  private void increaseUseCount(){  if (m_vec2 != null)   m_useCount2++;}  }
class C{  private byte[] serialized(final IHAWriteMessage msg){  return SerializerUtil.serialize(msg);}  }
class C{  public static boolean hasLoadSaveFailure(){  return loadSaveFailureEncountered;}  }
class C{  public T checked(String value){  return attr("checked",value);}  }
class C{  @SafeVarargs public static <T>T firstNonNull(T... values){  for (  T s : values) {    if (s != null) {      return s;    }  }  return null;}  }
class C{  private void initFrame(final GenericFrame frame,final SimbrainScriptEditor editor){  final JPanel mainPanel=new JPanel(new BorderLayout());  createAttachMenuBar(frame,editor);  JToolBar toolbar=editor.getToolbarOpenClose(frame,editor);  toolbar.addSeparator();  toolbar.add(getRunScriptAction(frame,editor));  mainPanel.add("North",toolbar);  mainPanel.add("Center",editor);  frame.setContentPane(mainPanel);  if (editor.getScriptFile() != null) {    frame.setTitle(editor.getScriptFile().getName());  }}  }
class C{  private void publish(){  if (mqttClient != null) {    if (publishTopic == null || publishTopic.equals("")) {      out(Messages.MqttClientView_28);      return;    }    try {      MqttTopic topic=mqttClient.getTopic(publishTopic);      topic.publish(payload,publishQos,retain);      out(getDate() + Messages.MqttClientView_29);      out(Messages.MqttClientView_30 + publishTopic + "\"\n"+ Messages.MqttClientView_32+ publishQos+ "\n"+ Messages.MqttClientView_34+ retain+ "\n"+ Messages.MqttClientView_36+ new String(payload)+ "\"");    } catch (    MqttPersistenceException e) {      e.printStackTrace();    }catch (    NullPointerException e) {      e.printStackTrace();    }catch (    MqttException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      out(Messages.MqttClientView_12);    }  }}  }
class C{  public String readLine() throws IOException {  StringBuffer line=new StringBuffer();  char ch=read();  try {    while (ch != '\n' && ch != '\r') {      if (hasComments) {        if (ch == lineComment) {          skipComments(ch);          break;        }        if (ch == startComment) {          skipComments(ch);          ch=read();        }      }      line.append(ch);      ch=read();    }    if (ch == '\r') {      if (next() == '\n')       read();    }    lastDelimiter=ch;  } catch (  EOFException e) {  }  return line.toString();}  }
class C{  public Selectable select(String key){  for (  NodePanel nodePanel : nodes) {    if (nodePanel.getKey().equals(key)) {      return doSelect(nodePanel,false);    }  }  for (  Connection connection : connections) {    if (connection.getKey().equals(key)) {      return doSelect(connection,false);    }  }  for (  OutBusPanel outBusPanel : outBuses) {    if (outBusPanel.getKey().equals(key)) {      return doSelect(outBusPanel,false);    }  }  return null;}  }
class C{  private double calculateIntervalForSeries(int series){  double result=Double.POSITIVE_INFINITY;  int itemCount=this.dataset.getItemCount(series);  if (itemCount > 1) {    double prev=this.dataset.getXValue(series,0);    for (int item=1; item < itemCount; item++) {      double x=this.dataset.getXValue(series,item);      result=Math.min(result,x - prev);      prev=x;    }  }  return result;}  }
class C{  boolean compareRestrictions(OwlClass other){  boolean newInfo=false;  if (this.onSubProperty(other)) {    Set<Value> sharedValues=new HashSet<>(this.values);    sharedValues.retainAll(other.values);    if (!sharedValues.isEmpty()) {      newInfo=this.addSuperClass(other) || newInfo;    } else {      Set<OwlClass> sharedSvf=new HashSet<>(this.svfClasses);      sharedSvf.retainAll(other.svfClasses);      if (!sharedSvf.isEmpty()) {        newInfo=this.addSuperClass(other) || newInfo;      }    }    Set<OwlClass> sharedAvf=new HashSet<>(this.avfClasses);    sharedAvf.retainAll(other.avfClasses);    if (!sharedAvf.isEmpty()) {      newInfo=other.addSuperClass(this) || newInfo;    }  }  return newInfo;}  }
class C{  public static String unifyLineSeparators(String s,String ls){  if (s == null) {    return null;  }  if (ls == null) {    ls=System.getProperty("line.separator");  }  if (!(ls.equals("\n") || ls.equals("\r") || ls.equals("\r\n"))) {    throw new IllegalArgumentException("Requested line separator is invalid.");  }  int length=s.length();  StringBuilder buffer=new StringBuilder(length);  for (int i=0; i < length; i++) {    if (s.charAt(i) == '\r') {      if ((i + 1) < length && s.charAt(i + 1) == '\n') {        i++;      }      buffer.append(ls);    } else     if (s.charAt(i) == '\n') {      buffer.append(ls);    } else {      buffer.append(s.charAt(i));    }  }  return buffer.toString();}  }
class C{  public TaskList resynchronizeFullCopy(URI sourceURI,URI fullCopyURI) throws InternalException {  s_logger.info("START resynchronize full copy {} from source {}",fullCopyURI,sourceURI);  Map<URI,BlockObject> resourceMap=BlockFullCopyUtils.verifySourceAndFullCopy(sourceURI,fullCopyURI,_uriInfo,_dbClient);  if (URIUtil.isType(sourceURI,BlockSnapshot.class)) {    throw APIException.badRequests.fullCopyResyncNotSupportedForSnapshot();  }  Volume sourceVolume=(Volume)resourceMap.get(sourceURI);  Volume fullCopyVolume=(Volume)resourceMap.get(fullCopyURI);  if (BlockFullCopyUtils.isFullCopyDetached(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.detachedFullCopyCannotBeResynchronized(fullCopyURI.toString());  }  if (BlockFullCopyUtils.isFullCopyInactive(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.inactiveFullCopyCannotBeResynchronized(fullCopyURI.toString());  }  if (!BlockFullCopyUtils.isFullCopyResynchronizable(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.fullCopyCannotBeResynchronized(fullCopyURI.toString(),fullCopyVolume.getReplicaState());  }  BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(fullCopyVolume);  TaskList taskList=fullCopyApiImpl.resynchronizeCopy(sourceVolume,fullCopyVolume);  auditOp(OperationTypeEnum.RESYNCHRONIZE_VOLUME_FULL_COPY,true,AuditLogManager.AUDITOP_BEGIN,fullCopyURI);  s_logger.info("FINISH resynchronize full copy {} from source {}",fullCopyURI,sourceURI);  return taskList;}  }
class C{  public void parseExponents(){  parseNumbers();  isParseExponents=true;}  }
class C{  public void tableChanged(WTableModelEvent e){  int rowsSelected=0;  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     rowsSelected++;  }  statusBar.setStatusDB(" " + rowsSelected + " ");}  }
class C{  public final ByteBuffer putChar(int index,char value){  return putShort(index,(short)value);}  }
class C{  protected void cacheStore(String key,Image image){  imageCache.put(key,image);}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (eventName.equals("text")) {    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.089 -0500",hash_original_method="ADC6A83F955A9ED0C1C75B5F08682583",hash_generated_method="AFCC3B46F8103D1E7497B67D0F397AC5") public void clear(){  id=INVALID_POINTER_ID;  toolType=TOOL_TYPE_UNKNOWN;}  }
class C{  @GET @Path("/legacy") @Produces({MediaType.APPLICATION_JSON}) @Deprecated public ListQueryAPIResponseEntity listQueryWithoutCoprocessor(@QueryParam("query") String query,@QueryParam("startTime") String startTime,@QueryParam("endTime") String endTime,@QueryParam("pageSize") int pageSize,@QueryParam("startRowkey") String startRowkey,@QueryParam("treeAgg") boolean treeAgg,@QueryParam("timeSeries") boolean timeSeries,@QueryParam("intervalmin") long intervalmin,@QueryParam("top") int top,@QueryParam("filterIfMissing") boolean filterIfMissing,@QueryParam("parallel") int parallel,@QueryParam("metricName") String metricName,@QueryParam("verbose") Boolean verbose){  StopWatch watch=new StopWatch();  watch.start();  ListQueryAPIResponseEntity result=new ListQueryAPIResponseEntity();  try {    validateQueryParameters(startRowkey,pageSize);    ListQueryCompiler comp=new ListQueryCompiler(query,filterIfMissing);    String serviceName=comp.serviceName();    SearchCondition condition=new SearchCondition();    condition.setFilter(comp.filter());    condition.setQueryExpression(comp.getQueryExpression());    if (comp.sortOptions() == null && top > 0) {      LOG.warn("Parameter \"top\" is only used for sort query! Ignore top parameter this time since it's not a sort query");    }    final List<String[]> partitionValues=comp.getQueryPartitionValues();    if (partitionValues != null) {      condition.setPartitionValues(Arrays.asList(partitionValues.get(0)));    }    EntityDefinition ed=EntityDefinitionManager.getEntityByServiceName(serviceName);    if (ed.isTimeSeries()) {      condition.setStartTime(startTime);      condition.setEndTime(endTime);    }    condition.setOutputVerbose(verbose == null || verbose);    condition.setOutputAlias(comp.getOutputAlias());    condition.setOutputAll(comp.isOutputAll());    condition.setStartRowkey(startRowkey);    condition.setPageSize(pageSize);    List<String> outputFields=comp.outputFields();    if (outputFields == null)     outputFields=new ArrayList<String>();    if (!comp.hasAgg() && !serviceName.equals(GenericMetricEntity.GENERIC_METRIC_SERVICE)) {      Set<String> filterFields=comp.getFilterFields();      if (filterFields != null)       outputFields.addAll(filterFields);      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      GenericEntityBatchReader reader=new GenericEntityBatchReader(serviceName,condition);      List<? extends TaggedLogAPIEntity> entityList=reader.read();      result.setObj(entityList);      result.setTotalResults(entityList.size());      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else     if (!comp.hasAgg() && serviceName.equals(GenericMetricEntity.GENERIC_METRIC_SERVICE)) {      if (metricName == null || metricName.isEmpty()) {        throw new IllegalArgumentException("metricName should not be empty for metric list query");      }      Set<String> filterFields=comp.getFilterFields();      if (filterFields != null)       outputFields.addAll(filterFields);      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      GenericMetricEntityBatchReader reader=new GenericMetricEntityBatchReader(metricName,condition);      List<? extends TaggedLogAPIEntity> entityList=reader.read();      result.setObj(entityList);      result.setTotalResults(entityList.size());      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else     if (!treeAgg && !timeSeries && parallel <= 0) {      List<String> groupbyFields=comp.groupbyFields();      List<String> aggregateFields=comp.aggregateFields();      Set<String> filterFields=comp.getFilterFields();      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (filterFields != null)       outputFields.addAll(filterFields);      outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }      FlatAggregator agg=new FlatAggregator(groupbyFields,comp.aggregateFunctionTypes(),comp.aggregateFields());      StreamReader reader=null;      if (ed.getMetricDefinition() == null) {        reader=new GenericEntityStreamReader(serviceName,condition);      } else {        reader=new GenericMetricEntityDecompactionStreamReader(metricName,condition);      }      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      reader.register(agg);      reader.readAsStream();      ArrayList<Map.Entry<List<String>,List<Double>>> obj=new ArrayList<Map.Entry<List<String>,List<Double>>>();      obj.addAll(agg.result().entrySet());      if (comp.sortOptions() == null) {        result.setObj(obj);      } else {        result.setObj(PostFlatAggregateSort.sort(agg.result(),comp.sortOptions(),top));      }      result.setTotalResults(0);      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else     if (!treeAgg && !timeSeries && parallel > 0) {      List<String> groupbyFields=comp.groupbyFields();      List<String> aggregateFields=comp.aggregateFields();      Set<String> filterFields=comp.getFilterFields();      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (filterFields != null)       outputFields.addAll(filterFields);      outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      FlatAggregator agg=new FlatAggregator(groupbyFields,comp.aggregateFunctionTypes(),comp.aggregateFields());      EntityCreationListener listener=EntityCreationListenerFactory.synchronizedEntityCreationListener(agg);      StreamReader reader=new GenericEntityStreamReaderMT(serviceName,condition,parallel);      reader.register(listener);      reader.readAsStream();      ArrayList<Map.Entry<List<String>,List<Double>>> obj=new ArrayList<Map.Entry<List<String>,List<Double>>>();      obj.addAll(agg.result().entrySet());      if (comp.sortOptions() == null) {        result.setObj(obj);      } else {        result.setObj(PostFlatAggregateSort.sort(agg.result(),comp.sortOptions(),top));      }      result.setTotalResults(0);      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else     if (!treeAgg && timeSeries) {      List<String> groupbyFields=comp.groupbyFields();      List<String> sortFields=comp.sortFields();      List<String> aggregateFields=comp.aggregateFields();      Set<String> filterFields=comp.getFilterFields();      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (filterFields != null)       outputFields.addAll(filterFields);      if (sortFields != null)       outputFields.addAll(sortFields);      outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }      StreamReader reader=null;      if (ed.getMetricDefinition() == null) {        if (parallel <= 0) {          reader=new GenericEntityStreamReader(serviceName,condition);        } else {          reader=new GenericEntityStreamReaderMT(serviceName,condition,parallel);        }      } else {        reader=new GenericMetricEntityDecompactionStreamReader(metricName,condition);        if (!outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {          outputFields.add(GenericMetricEntity.VALUE_FIELD);        }      }      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      TimeSeriesAggregator tsAgg=new TimeSeriesAggregator(groupbyFields,comp.aggregateFunctionTypes(),aggregateFields,DateTimeUtil.humanDateToDate(condition.getStartTime()).getTime(),DateTimeUtil.humanDateToDate(condition.getEndTime()).getTime(),intervalmin * 60 * 1000);      if (parallel <= 0) {        reader.register(tsAgg);      } else {        EntityCreationListener listener=EntityCreationListenerFactory.synchronizedEntityCreationListener(tsAgg);        reader.register(listener);      }      FlatAggregator sortAgg=null;      if (comp.sortOptions() != null) {        sortAgg=new FlatAggregator(groupbyFields,comp.sortFunctions(),comp.sortFields());        if (parallel <= 0) {          reader.register(sortAgg);        } else {          EntityCreationListener listener=EntityCreationListenerFactory.synchronizedEntityCreationListener(sortAgg);          reader.register(listener);        }      }      reader.readAsStream();      ArrayList<Map.Entry<List<String>,List<double[]>>> obj=new ArrayList<Map.Entry<List<String>,List<double[]>>>();      obj.addAll(tsAgg.getMetric().entrySet());      if (comp.sortOptions() == null) {        result.setObj(obj);      } else {        result.setObj(TimeSeriesPostFlatAggregateSort.sort(sortAgg.result(),tsAgg.getMetric(),comp.sortOptions(),top));      }      result.setTotalResults(0);      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    } else {      List<String> groupbyFields=comp.groupbyFields();      List<String> aggregateFields=comp.aggregateFields();      Set<String> filterFields=comp.getFilterFields();      if (groupbyFields != null)       outputFields.addAll(groupbyFields);      if (filterFields != null)       outputFields.addAll(filterFields);      outputFields.addAll(aggregateFields);      if (GenericMetricEntity.GENERIC_METRIC_SERVICE.equals(serviceName) && !outputFields.contains(GenericMetricEntity.VALUE_FIELD)) {        outputFields.add(GenericMetricEntity.VALUE_FIELD);      }      condition.setOutputFields(outputFields);      if (condition.isOutputAll()) {        LOG.info("Output: ALL");      } else {        LOG.info("Output: " + StringUtils.join(condition.getOutputFields(),", "));      }      GenericEntityStreamReader reader=new GenericEntityStreamReader(serviceName,condition);      HierarchicalAggregator agg=new HierarchicalAggregator(groupbyFields,comp.aggregateFunctionTypes(),comp.aggregateFields());      reader.register(agg);      reader.readAsStream();      if (comp.sortOptions() == null) {        result.setObj(agg.result());      } else {        result.setObj(PostHierarchicalAggregateSort.sort(agg.result(),comp.sortOptions()));      }      result.setTotalResults(0);      result.setSuccess(true);      result.setLastTimestamp(reader.getLastTimestamp());      result.setFirstTimestamp(reader.getFirstTimestamp());    }  } catch (  Exception ex) {    LOG.error("Fail executing list query: " + query,ex);    result.setException(EagleExceptionWrapper.wrap(ex));    result.setSuccess(false);    return result;  } finally {    watch.stop();    result.setElapsedms(watch.getTime());  }  LOG.info("Query done " + watch.getTime() + " ms");  return result;}  }
class C{  public void push(final long value){  if (value == 0L || value == 1L) {    mv.visitInsn(Opcodes.LCONST_0 + (int)value);  } else {    mv.visitLdcInsn(new Long(value));  }}  }
class C{  public AdapterPathSegment firstSegment(){  return (!mSegments.isEmpty()) ? (mSegments.get(0)) : null;}  }
class C{  public boolean isDeliverPayloads(){  return parseBoolean(getFieldValue(ConfigureNodeFields.deliver_payloads));}  }
class C{  protected Component createComponent(){  Component component;synchronized (components) {    component=new Component(++lastComponentID,this);    components.put(component.getComponentID(),component);  }  return component;}  }
class C{  public boolean isAccessibilityFocused(){  return getBooleanProperty(BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("GenerateModel[").append("]");  return sb.toString();}  }
class C{  public Piece(BigDecimal magnitude){  this.magnitude=magnitude;  this.unitType=PieceUnit.PC.getBaseUnit();}  }
class C{  public MailContent(){  html.a("<!DOCTYPE html><html><head>").a(CRLF).a("<meta name='viewport' content='width=device-width' />").a("<meta http-equiv='Content-Type' ").a("content='text/html; charset=UTF-8' />").a("</head><body>").nl();}  }
class C{  public static void broadcast(String message){  Iterator<Client> it=clients.iterator();  while (it.hasNext()) {    Client client=it.next();    try {      if (!client.client.isClosed()) {        client.output.writeBytes(message + "\n");        continue;      }    } catch (    Exception e) {    }    it.remove();  }}  }
class C{  public Component findComponentByType(Component.Type type){  for (  Component c : components) {    if (c.getType() == type)     return c;  }  return null;}  }
class C{  public void addCollector(Collector collector){  collectors.add(collector);}  }
class C{  public static void suggestSecurityManager(String managerClassName){  SecurityManager manager=null;  if (System.getSecurityManager() == null) {    try {      if (managerClassName == null) {        managerClassName=TestParams.defaultSecurityManager;      }      manager=((SecurityManager)Class.forName(managerClassName).newInstance());    } catch (    ClassNotFoundException cnfe) {      bomb("Security manager could not be found: " + managerClassName,cnfe);    }catch (    Exception e) {      bomb("Error creating security manager. ",e);    }    System.setSecurityManager(manager);  }}  }
class C{  public void fireStateChanged(){  changeSupport.fireStateChanged();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_POSITION___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ASSOCIATION_POSITION___COORDINATE_1:  return coordinate_1 != null && !coordinate_1.isEmpty();case UmplePackage.ASSOCIATION_POSITION___COORDINATE_2:return coordinate_2 != null && !coordinate_2.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public UnhandledException(String message,Throwable cause){  super(message,cause);}  }
class C{  public long genomeLength(){  return genome.length;}  }
class C{  public void registerGcmOnServer(){  if (Utils.checkPlayServices(this)) {    Intent intent=new Intent(this,MyRegistrationIntentService.class);    startService(intent);  }}  }
class C{  public ALMA2(){  this(0.8);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.004 -0400",hash_original_method="0FF0D3CF9935BD4D3758D93CDD8A5FD4",hash_generated_method="43893C2D138F0664E8EE85BF7680233A") public SimpleLog(String name){  logName=name;  setLevel(SimpleLog.LOG_LEVEL_INFO);  String lvl=getStringProperty(systemPrefix + "log." + logName);  int i=String.valueOf(name).lastIndexOf(".");  while (null == lvl && i > -1) {    name=name.substring(0,i);    lvl=getStringProperty(systemPrefix + "log." + name);    i=String.valueOf(name).lastIndexOf(".");  }  if (null == lvl) {    lvl=getStringProperty(systemPrefix + "defaultlog");  }  if ("all".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_ALL);  } else   if ("trace".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_TRACE);  } else   if ("debug".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_DEBUG);  } else   if ("info".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_INFO);  } else   if ("warn".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_WARN);  } else   if ("error".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_ERROR);  } else   if ("fatal".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_FATAL);  } else   if ("off".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_OFF);  }}  }
class C{  public static int encodeDate(long y,long m,long d){  return (int)(y * 512 + m * 32 + d);}  }
class C{  private void run(){  long startTime=System.nanoTime();  ShapeFile output=null;  ShapeFile output2=null;  int progress, oldProgress;  boolean conductFineSearch=false;  int j;  int refNeighbourhoodStart=40;  int refNeighbourhoodStep=20;  maxNeighbourhoodSize=500;  epsilon=1.2;  int polyOrder=2;  StringBuilder str;  KdTree<Double> controlPointTree=new KdTree.SqrEuclid<>(2,new Integer(2000));  try {    String ppFile1="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/test point3.shp";    String referenceFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/GuelphCampus_C6430-74072-L9_254_Blue_clipped.dep";    String transformedFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/GuelphCampus_C6430-74072-L9_253_Blue_clipped.dep";    String referenceTiePoints="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/campus 254 tie points.shp";    String transformedTiePoints="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/campus 253 tie points.shp";    String outputFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/tmp6.shp";    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("r1");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(4);    fields[0].setFieldLength(10);    output=new ShapeFile(outputFile,ShapeType.POINT,fields);    fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("r1");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(4);    fields[0].setFieldLength(10);    output2=new ShapeFile(outputFile.replace(".shp","_2.shp"),ShapeType.POINT,fields);    referenceImage=new WhiteboxRaster(referenceFile,"r");    referenceImage.setForceAllDataInMemory(true);    int rows1=referenceImage.getNumberRows();    int cols1=referenceImage.getNumberColumns();    referenceNoData=referenceImage.getNoDataValue();    transformedImage=new WhiteboxRaster(transformedFile,"r");    transformedImage.setForceAllDataInMemory(true);    transformedNoData=transformedImage.getNoDataValue();    ShapeFile pp1=new ShapeFile(ppFile1);    if (pp1.getShapeType().getBaseType() != ShapeType.POINT && pp1.getShapeType().getBaseType() != ShapeType.MULTIPOINT) {      return;    }    ShapeFileRecord record=pp1.getRecord(0);    double[][] point;    ShapeFile refTiePoints=new ShapeFile(referenceTiePoints);    if (refTiePoints.getShapeType().getBaseType() != ShapeType.POINT) {      return;    }    ShapeFile transTiePoints=new ShapeFile(transformedTiePoints);    if (transTiePoints.getShapeType().getBaseType() != ShapeType.POINT) {      return;    }    int numTiePoints=refTiePoints.getNumberOfRecords();    if (transTiePoints.getNumberOfRecords() != numTiePoints) {      return;    }    calculateOffsets();    conductFineSearch=true;    ArrayList<XYPoint> tiePointsRef=new ArrayList<>();    ArrayList<XYPoint> tiePointsTransform=new ArrayList<>();    for (int r=0; r < refTiePoints.getNumberOfRecords(); r++) {      double[][] refPoint=refTiePoints.getRecord(r).getGeometry().getPoints();      int refCol=referenceImage.getColumnFromXCoordinate(refPoint[0][0]);      int refRow=referenceImage.getRowFromYCoordinate(refPoint[0][1]);      point=transTiePoints.getRecord(r).getGeometry().getPoints();      int transCol=transformedImage.getColumnFromXCoordinate(point[0][0]);      int transRow=transformedImage.getRowFromYCoordinate(point[0][1]);      RowPriorityGridCell gc=findPixelMatch(refCol,refRow,transCol,transRow,conductFineSearch,refNeighbourhoodStart,refNeighbourhoodStep,30,1.0);      System.out.println("Control Point " + (r + 1) + ": "+ gc.z);      int matchedCol=gc.col;      int matchedRow=gc.row;      double matchedCorrelation=gc.z;      if (matchedCorrelation >= 0.95) {        double x2=transformedImage.getXCoordinateFromColumn(matchedCol);        double y2=transformedImage.getYCoordinateFromRow(matchedRow);        whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(x2,y2);        Object[] rowData=new Object[1];        rowData[0]=new Double(matchedCorrelation);        output.addRecord(PP,rowData);        PP=new whitebox.geospatialfiles.shapefile.Point(refPoint[0][0],refPoint[0][1]);        rowData=new Object[2];        rowData[0]=new Double(matchedCorrelation);        rowData[1]=new Double(0.0);        output2.addRecord(PP,rowData);        tiePointsRef.add(new XYPoint(refPoint[0][0],refPoint[0][1]));        tiePointsTransform.add(new XYPoint(x2,y2));      } else {        System.out.println("No suitable match could be located.");      }    }    conductFineSearch=false;    List<KdTree.Entry<Double>> results;    int newPolyOrder=polyOrder;    if (newPolyOrder == 4 && tiePointsRef.size() < 15) {      newPolyOrder--;    }    if (newPolyOrder == 3 && tiePointsRef.size() < 10) {      newPolyOrder--;    }    if (newPolyOrder == 2 && tiePointsRef.size() < 6) {      newPolyOrder--;    }    numTiePoints=0;    for (    XYPoint tie : tiePointsRef) {      double[] entry={tie.x,tie.y};      controlPointTree.addPoint(entry,(double)numTiePoints);      numTiePoints++;    }    PolynomialLeastSquares2DFitting pls=new PolynomialLeastSquares2DFitting(tiePointsRef,tiePointsTransform,newPolyOrder);    double rmse=pls.getOverallRMSE();    System.out.println("\nRMSE: " + rmse);    double north=transformedImage.getNorth();    double south=transformedImage.getSouth();    double east=transformedImage.getEast();    double west=transformedImage.getWest();    int totalPointsSearched=0;    int interval=1000;    double intervalSteps=1.5;    int loopNum=1;    do {      System.out.println("Interval: " + interval);      oldProgress=-1;      for (int r=0; r < rows1; r+=interval) {        for (int c=0; c < cols1; c+=interval) {          if (referenceImage.getValue(r,c) != referenceNoData) {            double refXCoord=referenceImage.getXCoordinateFromColumn(c);            double refYCoord=referenceImage.getYCoordinateFromRow(r);            double[] entry={refXCoord,refYCoord};            int numNearestNeighbours=15;            if (numTiePoints < 15) {              numNearestNeighbours=numTiePoints;            }            results=controlPointTree.nearestNeighbor(entry,numNearestNeighbours,true);            j=results.size();            double[] X1=new double[j];            double[] Y1=new double[j];            double[] X2=new double[j];            double[] Y2=new double[j];            for (int k=0; k < j; k++) {              double val=results.get(k).value;              X1[k]=tiePointsRef.get((int)val).x;              Y1[k]=tiePointsRef.get((int)val).y;              X2[k]=tiePointsTransform.get((int)val).x;              Y2[k]=tiePointsTransform.get((int)val).y;            }            int count=0;            double scaleFactor=0;            for (int k=0; k < j; k++) {              double x1Ref=X1[k];              double y1Ref=Y1[k];              double x1Tr=X2[k];              double y1Tr=Y2[k];              for (int m=k + 1; m < j; m++) {                double x2Ref=X1[m];                double y2Ref=Y1[m];                double x2Tr=X2[m];                double y2Tr=Y2[m];                double dist1=sqrt((x2Ref - x1Ref) * (x2Ref - x1Ref) + (y2Ref - y1Ref) * (y2Ref - y1Ref));                double dist2=sqrt((x2Tr - x1Tr) * (x2Tr - x1Tr) + (y2Tr - y1Tr) * (y2Tr - y1Tr));                if (dist1 > 0) {                  scaleFactor+=dist2 / dist1;                  count++;                }              }            }            scaleFactor=scaleFactor / count;            pls=new PolynomialLeastSquares2DFitting(X1,Y1,X2,Y2,1);            rmse=pls.getOverallRMSE();            XYPoint transCoords=pls.getForwardCoordinates(refXCoord,refYCoord);            if (transCoords.x <= east && transCoords.x >= west && transCoords.y >= south && transCoords.y <= north) {              totalPointsSearched++;              int transCol=transformedImage.getColumnFromXCoordinate(transCoords.x);              int transRow=transformedImage.getRowFromYCoordinate(transCoords.y);              int searchWindowRadius=(int)rmse * 2;              if (searchWindowRadius < 80) {                searchWindowRadius=80;              }              RowPriorityGridCell gc=findPixelMatch(c,r,transCol,transRow,conductFineSearch,refNeighbourhoodStart,refNeighbourhoodStep,searchWindowRadius,scaleFactor);              int matchedCol=gc.col;              int matchedRow=gc.row;              double matchedCorrelation=gc.z;              if (matchedCorrelation >= 0.95) {                double x2=transformedImage.getXCoordinateFromColumn(matchedCol);                double y2=transformedImage.getYCoordinateFromRow(matchedRow);                whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(x2,y2);                Object[] rowData=new Object[1];                rowData[0]=new Double(matchedCorrelation);                output.addRecord(PP,rowData);                PP=new whitebox.geospatialfiles.shapefile.Point(refXCoord,refYCoord);                rowData=new Object[1];                rowData[0]=new Double(matchedCorrelation);                output2.addRecord(PP,rowData);                tiePointsRef.add(new XYPoint(refXCoord,refYCoord));                tiePointsTransform.add(new XYPoint(x2,y2));                entry=new double[]{refXCoord,refYCoord};                controlPointTree.addPoint(entry,(double)numTiePoints);                numTiePoints++;                newPolyOrder=polyOrder;                if (newPolyOrder == 4 && tiePointsRef.size() < 15) {                  newPolyOrder--;                }                if (newPolyOrder == 3 && tiePointsRef.size() < 10) {                  newPolyOrder--;                }                if (newPolyOrder == 2 && tiePointsRef.size() < 6) {                  newPolyOrder--;                }              }            }          }        }        progress=(int)((100.0 * r) / rows1);        if (progress > oldProgress) {          System.out.println("Loop " + loopNum + " "+ progress+ "%"+ ", Num. tie points: "+ tiePointsRef.size()+ " of "+ totalPointsSearched+ " ("+ (100f * tiePointsRef.size() / totalPointsSearched)+ "%)");          oldProgress=progress;        }      }      loopNum++;      interval=(int)(interval / intervalSteps);    } while (interval >= 200);    referenceImage.close();    transformedImage.close();    output.write();    output2.write();    System.out.println("\nOperation complete!");    long endTime=System.nanoTime();    double duration=(endTime - startTime);    int secs=(int)(duration / 1000000000);    int hours=secs / 3600;    secs=secs - 3600 * hours;    int minutes=secs / 60;    secs=secs - minutes * 60;    int seconds=secs;    str=new StringBuilder();    str.append("Duration: ");    if (hours > 0) {      str.append(hours).append(" hours, ");    }    if (minutes > 0) {      str.append(minutes).append(" minutes, ");    }    if (seconds > 0) {      str.append(seconds).append(" seconds, ");    }    System.out.println(str.toString());  } catch (  Exception e) {    if (output != null && output2 != null) {      try {        output.write();        output2.write();      } catch (      Exception e2) {      }    }    e.printStackTrace();  }}  }
class C{  private void decodeNormal(Context ctx,IoSession session,IoBuffer in,ProtocolDecoderOutput out) throws CharacterCodingException, ProtocolDecoderException {  int matchCount=ctx.getMatchCount();  int oldPos=in.position();  int oldLimit=in.limit();  while (in.hasRemaining()) {    byte b=in.get();    if (delimBuf.get(matchCount) == b) {      matchCount++;      if (matchCount == delimBuf.limit()) {        int pos=in.position();        in.limit(pos);        in.position(oldPos);        ctx.append(in);        in.limit(oldLimit);        in.position(pos);        if (ctx.getOverflowPosition() == 0) {          IoBuffer buf=ctx.getBuffer();          buf.flip();          buf.limit(buf.limit() - matchCount);          try {            writeText(session,buf.getString(ctx.getDecoder()),out);          }  finally {            buf.clear();          }        } else {          int overflowPosition=ctx.getOverflowPosition();          ctx.reset();          throw new RecoverableProtocolDecoderException("Line is too long: " + overflowPosition);        }        oldPos=pos;        matchCount=0;      }    } else {      in.position(Math.max(0,in.position() - matchCount));      matchCount=0;    }  }  in.position(oldPos);  ctx.append(in);  ctx.setMatchCount(matchCount);}  }
class C{  protected Task<?> registerReminder(String reminderName,long dueTime,long period,TimeUnit timeUnit){  if (!(this instanceof Remindable)) {    throw new IllegalArgumentException("This must implement IRemindable: " + this.getClass().getName());  }  return runtime.registerReminder((Remindable)reference,reminderName,dueTime,period,timeUnit);}  }
class C{  public void validateParam() throws Exception {  Enumeration<AbstractParamPanel> en=tablePanel.elements();  AbstractParamPanel panel=null;  while (en.hasMoreElements()) {    panel=en.nextElement();    panel.validateParam(paramObject);  }}  }
class C{  public static boolean cs_gaxpy(Scs A,float[] x,float[] y){  int p, j, n, Ap[], Ai[];  float Ax[];  if (!Scs_util.CS_CSC(A) || x == null || y == null)   return (false);  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  for (j=0; j < n; j++) {    for (p=Ap[j]; p < Ap[j + 1]; p++) {      y[Ai[p]]+=Ax[p] * x[j];    }  }  return (true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  S3CheckpointData(byte[] state,long expTime,String key){  assert expTime >= 0;  this.state=state;  this.expTime=expTime;  this.key=key;}  }
class C{  public boolean visit(PrefixExpression node){  return true;}  }
class C{  public static Line2D extendLine(Line2D line,double startPercent,double endPercent){  ParamChecks.nullNotPermitted(line,"line");  double x1=line.getX1();  double x2=line.getX2();  double deltaX=x2 - x1;  double y1=line.getY1();  double y2=line.getY2();  double deltaY=y2 - y1;  x1=x1 - (startPercent * deltaX);  y1=y1 - (startPercent * deltaY);  x2=x2 + (endPercent * deltaX);  y2=y2 + (endPercent * deltaY);  return new Line2D.Double(x1,y1,x2,y2);}  }
class C{  public int yToLine(int y){  FontMetrics fm=painter.getFontMetrics();  int height=fm.getHeight();  return Math.max(0,Math.min(getLineCount() - 1,y / height + firstLine));}  }
class C{  public static boolean isFinal(int flags){  return (flags & AccFinal) != 0;}  }
class C{  private boolean executeCommand(BufferedReader reader){  for (  String s : COMMAND_HELP_MESSAGE) {    out.println(s);  }  System.err.print("Command: ");  try {    String name=reader.readLine();    if (name.equals("profile")) {      showProfileForId(selectProfile(reader));    } else     if (name.equals("register")) {      showNoticesForId(selectProfile(reader));    } else     if (name.startsWith("q") || name.startsWith("exit")) {      return false;    } else {      out.println("Unknown command.");    }  } catch (  Exception e) {    e.printStackTrace();  }  return true;}  }
class C{  public static <V,E>void addSubTree(Forest<V,E> tree,Forest<V,E> subTree,V node,E connectingEdge){  if (node != null && !tree.containsVertex(node))   throw new IllegalArgumentException("Specified tree does not contain the specified node as a vertex");  V root=subTree.getTrees().iterator().next().getRoot();  addFromSubTree(tree,subTree,connectingEdge,node,root);}  }
class C{  public void addMessage(int index){  if (m_10MinutesMsgCountArray[index] < Integer.MAX_VALUE) {    m_10MinutesMsgCountArray[index]++;  }}  }
class C{  static public String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String s=Double.toString(d);  if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {    while (s.endsWith("0")) {      s=s.substring(0,s.length() - 1);    }    if (s.endsWith(".")) {      s=s.substring(0,s.length() - 1);    }  }  return s;}  }
class C{  public void buscarProcedimientoSeleccionExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  BusquedasHelper.buscarProcedimientoComunLogic(mappings,(BusquedaElementosForm)form,request,response);  setReturnActionFordward(request,mappings.findForward("busqueda_valoracion_seleccion_udocs"));}  }
class C{  private Var createAnonVar(){  final Var var=new Var("_anon_" + UUID.randomUUID().toString().replaceAll("-","_"));  var.setAnonymous(true);  return var;}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case DomPackage.SIMPLE_TYPE_REFERENCE__OWNER:    return eInternalContainer().eInverseRemove(this,DomPackage.COMPOSITE__CONTENTS,Composite.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public RequestBuilder withStdOutRedirection(OutputRedirection outputRedirection){  Preconditions.checkNotNull(outputRedirection,"Std Out Redirection is null");  this.outputRedirection=outputRedirection;  return this;}  }
class C{  public static void addBuilder(IProject project,String builderId) throws CoreException {  Preconditions.checkArgument(project.exists());  IProjectDescription description=project.getDescription();  List<ICommand> commands=Lists.newArrayList(description.getBuildSpec());  for (  ICommand command : commands) {    if (command.getBuilderName().equals(builderId)) {      return;    }  }  ICommand command=description.newCommand();  command.setBuilderName(builderId);  commands.add(command);  description.setBuildSpec(commands.toArray(new ICommand[commands.size()]));  project.setDescription(description,IResource.FORCE,null);}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  public SubsetContinuousVariablesAction(DataEditor editor){  super("Copy Continuous Variables");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public String toString(){  StringBuffer st=new StringBuffer();  st.append("KStar Beta Verion (0.1b).\n" + "Copyright (c) 1995-97 by Len Trigg (trigg@cs.waikato.ac.nz).\n" + "Java port to Weka by Abdelaziz Mahoui "+ "(am14@cs.waikato.ac.nz).\n\nKStar options : ");  String[] ops=getOptions();  for (int i=0; i < ops.length; i++) {    st.append(ops[i] + ' ');  }  return st.toString();}  }
class C{  public SPARQLMinusIteration(Iteration<BindingSet,X> leftArg,Iteration<BindingSet,X> rightArg){  this(leftArg,rightArg,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void stop(){  stopped=true;  millis.set(Math.max(System.currentTimeMillis(),millis.get()));}  }
class C{  public MalformedConfigurationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public GridClientConsistentHash(Comparator<N> nodesComp,Object affSeed){  this.nodesComp=nodesComp;  this.affSeed=affSeed == null ? new Integer(PRIME) : affSeed;}  }
class C{  public void commit(){  try {    solrClient.commit();  } catch (  SolrServerException|IOException e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.953 -0500",hash_original_method="3AB5FDF932EF6EC77655D60EC646F9F8",hash_generated_method="1135714EB7DD65A9AB187E8EAB4B87C7") public BaseProgramBuilder addTexture(TextureType texType) throws IllegalArgumentException {  if (mTextureCount >= MAX_TEXTURE) {    throw new IllegalArgumentException("Max texture count exceeded.");  }  mTextureTypes[mTextureCount++]=texType;  return this;}  }
class C{  public static List<InetAddress> hostAddresses(){  List<InetAddress> addrList=new ArrayList<>();  Enumeration<NetworkInterface> IFCs=null;  try {    IFCs=NetworkInterface.getNetworkInterfaces();  } catch (  SocketException ex) {    log.error("Unable to get network interfaces.",ex);  }  if (IFCs != null) {    while (IFCs.hasMoreElements()) {      NetworkInterface IFC=IFCs.nextElement();      try {        if (IFC.isUp()) {          Enumeration<InetAddress> addresses=IFC.getInetAddresses();          while (addresses.hasMoreElements()) {            InetAddress address=addresses.nextElement();            if (!address.isLoopbackAddress() && !address.isLinkLocalAddress()) {              addrList.add(address);            }          }        }      } catch (      SocketException ex) {        log.error("Unable to read network interface {}.",IFC.toString(),ex);      }    }  }  return addrList;}  }
class C{  public int size(){  return indexToEntry.size();}  }
class C{  final public char yycharat(int pos){  return yy_buffer[yy_startRead + pos];}  }
class C{  public void addContextType(String id){  Assert.isNotNull(id);  if (getContextType(id) != null)   return;  TemplateContextType type=createContextType(id);  if (type != null)   addContextType(type);}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  return (encrypting) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);}  }
class C{  private void importSharedPreferences(){  final SharedPreferencesImport userTokenMigration=new SharedPreferencesImport(getContext(),SampleActivity.SHARED_PREF_NAME,"userToken",KEY_USER_TOKEN);  migrate(userTokenMigration);  final SharedPreferencesImport gcmTokenMigration=new SharedPreferencesImport(getContext(),SampleActivity.SHARED_PREF_NAME,"gcmToken",KEY_GCM_TOKEN);  migrate(gcmTokenMigration);}  }
class C{  public StructuredSyntaxDocumentFilter(DefaultStyledDocument document){  this.styledDocument=document;}  }
class C{  private int drawLabelString(Graphics g,Label l,String text,int x,int y,int textSpaceW){  Style style=l.getStyle();  int cx=g.getClipX();  int cy=g.getClipY();  int cw=g.getClipWidth();  int ch=g.getClipHeight();  g.clipRect(x,cy,textSpaceW,ch);  if (l.isTickerRunning()) {    Font font=style.getFont();    if (l.getShiftText() > 0) {      if (l.getShiftText() > textSpaceW) {        l.setShiftText(x - l.getX() - l.getStringWidth(font));      }    } else     if (l.getShiftText() + l.getStringWidth(font) < 0) {      l.setShiftText(textSpaceW);    }  }  int drawnW=drawLabelText(g,l,text,x,y,textSpaceW);  g.setClip(cx,cy,cw,ch);  return drawnW;}  }
class C{  public Vertex createPronoun(String text,Vertex meaning,Network network,Primitive type,Primitive type2){  Vertex word=createWord(text,meaning,false,network,Primitive.PRONOUN,null,type,type2,null);  return word;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static void copy(byte[] in,File out) throws IOException {  Assert.notNull(in,"No input byte array specified");  Assert.notNull(out,"No output File specified");  ByteArrayInputStream inStream=new ByteArrayInputStream(in);  OutputStream outStream=new BufferedOutputStream(new FileOutputStream(out));  copy(inStream,outStream);}  }
class C{  public HttpURL(final String original) throws URIException {  parseUriReference(original,false);  checkValid();}  }
class C{  public void addLink(Link link){  getLinks().add(link);}  }
class C{  private String computePrefixString(Map<String,String> prefixDeclarations){  if (prefixDeclarations == null)   return "";  StringBuilder sb=new StringBuilder();  for (  String prefix : prefixDeclarations.keySet()) {    String uri=prefixDeclarations.get(prefix);    sb.append("PREFIX ").append(prefix).append(":").append(" <").append(uri).append("> ");  }  return sb.toString();}  }
class C{  public static Explanation noMatch(String description,Collection<Explanation> details){  return new Explanation(false,0f,description,details);}  }
class C{  public LimeTableColumn(int model,final String id,final String name,int width,boolean vis,Class<?> clazz){  this(model,id,name,null,width,vis,clazz);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public TournamentSelection(){  this(2);}  }
class C{  public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int posX,int posY,int posZ,int p_77648_7_,float p_77648_8_,float p_77648_9_,float p_77648_10_){  if (!player.canPlayerEdit(posX,posY,posZ,p_77648_7_,stack)) {    return false;  } else {    UseHoeEvent event=new UseHoeEvent(player,stack,world,posX,posY,posZ);    if (MinecraftForge.EVENT_BUS.post(event)) {      return false;    }    if (event.getResult() == Result.ALLOW) {      stack.damageItem(1,player);      return true;    }    Block block=world.getBlock(posX,posY,posZ);    if (p_77648_7_ != 0 && world.getBlock(posX,posY + 1,posZ).isAir(world,posX,posY + 1,posZ) && (block == Blocks.grass || block == Blocks.dirt)) {      world.playSoundEffect((double)((float)posX + 0.5F),(double)((float)posY + 0.5F),(double)((float)posZ + 0.5F),Blocks.farmland.stepSound.getStepResourcePath(),(Blocks.farmland.stepSound.getVolume() + 1.0F) / 2.0F,Blocks.farmland.stepSound.getPitch() * 0.8F);      if (world.isRemote) {        return true;      } else {        world.setBlock(posX,posY,posZ,Blocks.farmland);        stack.damageItem(1,player);        return true;      }    } else {      return false;    }  }}  }
class C{  public static void assertPingTrue(String message,URL pingURL,Logger errorLogger){  assertPingTrue(message,null,pingURL,errorLogger);}  }
class C{  protected void removeTag(short tagId){  mExifTags.remove(tagId);}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public boolean isReplaceMenu(){  return replaceMenu;}  }
class C{  public Node root(){  return new Node(0);}  }
class C{  @Override public Iterator<PlayerID> iterator(){  return getPlayers().iterator();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NODE:  return isSetNode();}throw new IllegalStateException();}  }
class C{  private JsonObject copyWithContext(JsonObject jsonObj,int context){  JsonObject copy=new JsonObject();  for (  Map.Entry<String,JsonElement> entry : jsonObj.entrySet()) {    String field=entry.getKey();    if (!field.equals(Utils.CHILDREN_PROP)) {      copy.add(field,entry.getValue());    }  }  copy.addProperty(CONTEXT_PROP,Integer.valueOf(context));  return copy;}  }
class C{  private SchemaColumnEntity createSchemaColumnEntity(SchemaColumn schemaColumn,BusinessObjectFormatEntity businessObjectFormatEntity){  SchemaColumnEntity schemaColumnEntity=new SchemaColumnEntity();  schemaColumnEntity.setBusinessObjectFormat(businessObjectFormatEntity);  schemaColumnEntity.setName(schemaColumn.getName());  schemaColumnEntity.setType(schemaColumn.getType());  schemaColumnEntity.setSize(schemaColumn.getSize());  schemaColumnEntity.setRequired(schemaColumn.isRequired());  schemaColumnEntity.setDefaultValue(schemaColumn.getDefaultValue());  schemaColumnEntity.setDescription(schemaColumn.getDescription());  return schemaColumnEntity;}  }
class C{  @Override public ShardResponse takeCompletedOrError(){  return take(true);}  }
class C{  @Override protected Object convertToType(final Class type,final Object value) throws Throwable {  return value.toString();}  }
class C{  public static final String capitalize(String str,char... delimiters){  final int delimLen=delimiters == null ? -1 : delimiters.length;  if (TextUtils.isEmpty(str) || delimLen == 0) {    return str;  }  final char[] buffer=str.toCharArray();  boolean capitalizeNext=true;  for (int i=0; i < buffer.length; i++) {    char ch=buffer[i];    if (isDelimiter(ch,delimiters)) {      capitalizeNext=true;    } else     if (capitalizeNext) {      buffer[i]=Character.toTitleCase(ch);      capitalizeNext=false;    }  }  return new String(buffer);}  }
class C{  private void initSequences(Alignment alignment,int[] treeIndex){  int numSeqs=alignment.getSequenceCount();  DataType dataType=alignment.getDataType();  int numStates=dataType.getStateCount();  iSequences=new int[numSeqs][];  for (int i=0; i < numSeqs; i++) {    int seqLength=0;    for (int j=0; j < alignment.getSiteCount(); j++) {      int state=alignment.getState(i,j);      if (state >= 0 && state < numStates) {        seqLength+=1;      }    }    iSequences[treeIndex[i]]=new int[seqLength];    int count=0;    for (int j=0; j < alignment.getSiteCount(); j++) {      int state=alignment.getState(i,j);      if (state >= 0 && state < numStates) {        iSequences[treeIndex[i]][count]=state;        count+=1;      }    }  }}  }
class C{  private int[] parse(String vers) throws VersionFormatException {  int major, minor, service, revision;  int dot1, dot2, lastNum;  dot1=vers.indexOf(".");  if (dot1 != -1) {    dot2=vers.indexOf(".",dot1 + 1);    if (dot2 == -1)     dot2=vers.length();  } else {    dot1=vers.length();    dot2=-1;  }  try {    major=Integer.parseInt(vers.substring(0,dot1));  } catch (  NumberFormatException nfe) {    throw new VersionFormatException(vers);  }  minor=0;  service=0;  revision=0;  if (dot2 != -1) {    try {      minor=Integer.parseInt(vers.substring(dot1 + 1,dot2));    } catch (    NumberFormatException nfe) {      throw new VersionFormatException(vers);    }    try {      int q=dot2 + 1;      while (q < vers.length() && Character.isDigit(vers.charAt(q)))       q++;      lastNum=q;      if (q <= vers.length())       service=Integer.parseInt(vers.substring(dot2 + 1,q));    } catch (    NumberFormatException nfe) {      throw new VersionFormatException(vers);    }    try {      int q=lastNum + 1;      while (q < vers.length() && !Character.isDigit(vers.charAt(q)))       q++;      int p=q;      while (p < vers.length() && Character.isDigit(vers.charAt(p)))       p++;      if (q < vers.length() && p <= vers.length())       revision=Integer.parseInt(vers.substring(q,p));    } catch (    NumberFormatException okay) {    }  }  return new int[]{major,minor,service,revision};}  }
class C{  public boolean isExcludeFilterActive(){  return excFilterGroups != null;}  }
class C{  public void clearParts(){  for (int i=0; i < partsList.length; i++) {    partsList[i].clear();  }  this.currentPart=0;}  }
class C{  private boolean isAuthenticationTooOldForRequiredMaxAge(final ClientDetailsEntity client,final OIDCAuthorizationRequestContext authRequest,final IdPSession idpSession){  Integer max=client != null ? client.getDefaultMaxAge() : null;  log.debug("Client configuration set to max age {}",max);  final String maxAge=authRequest.getMaxAge();  log.debug("Authorization request contains max age {}",maxAge);  if (maxAge != null) {    max=Integer.parseInt(maxAge);    log.debug("Evaluated max age to use as {}",max);    final DateTime authTime=new DateTime(idpSession.getCreationInstant());    log.debug("Idp Session creation instant set to {}",authTime);    final DateTime now=DateTime.now();    log.debug("Now instant {}",now);    final long diffInSeconds=(now.getMillis() - authTime.getMillis()) / 1000;    log.debug("Difference between now and authentication instant in seconds is {}",diffInSeconds);    if (diffInSeconds > max) {      log.debug("Authentication is too old: {}. Clearing authentication context",authTime);      return true;    }  }  return false;}  }
class C{  private void loadInfoOf(ResultSet rs,WEditor editor,String name) throws SQLException {  if (editor == null)   return;  int intValue=rs.getInt(name);  if (rs.wasNull())   editor.setValue(null); else   editor.setValue(new Integer(intValue));}  }
class C{  public Fault createFault(){  FaultImpl fault=new FaultImpl();  return fault;}  }
class C{  @Override public XMLEventReader createXMLEventReader(Reader reader) throws XMLStreamException {  throw new XMLStreamException("The WBXML is a binary format!");}  }
class C{  public String toString(){  String s=super.toString() + "InhibitAnyPolicy: " + skipCerts+ "\n";  return s;}  }
class C{  public static Sentence newDisjunction(List<? extends Sentence> disjuncts){  if (disjuncts.size() == 0) {    return PropositionSymbol.FALSE;  } else   if (disjuncts.size() == 1) {    return disjuncts.get(0);  }  return new ComplexSentence(Util.first(disjuncts),Connective.OR,newDisjunction(Util.rest(disjuncts)));}  }
class C{  public boolean isIgnore(){  return (type != null) && type.isIgnore();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean askRootAccess(){  try {    Process p=Runtime.getRuntime().exec("su");    DataOutputStream os=new DataOutputStream(p.getOutputStream());    os.writeBytes("exit\n");    os.flush();    p.waitFor();    return p.exitValue() != 255;  } catch (  Exception e) {    return false;  }}  }
class C{  public void init(){  root=new VFolder(null,null);  String workingDir=getWorkingDirPath();  createFolder(workingDir);  createFolder(getTmpFolderPath());  accessedFiles.clear();}  }
class C{  public boolean isBeingSick(){  return this.beingSick;}  }
class C{  final private void turn22(IntGrid2D grid,int x,int y){  int p1, p2, p3, p4;  p1=grid.get(grid.stx(x),grid.sty(y));  p2=grid.get(grid.stx(x + 1),grid.sty(y));  p3=grid.get(grid.stx(x + 1),grid.sty(y + 1));  p4=grid.get(grid.stx(x),grid.sty(y + 1));  if (p.r.nextBoolean()) {    grid.set(grid.stx(x),grid.sty(y),p4);    grid.set(grid.stx(x + 1),grid.sty(y),p1);    grid.set(grid.stx(x + 1),grid.sty(y + 1),p2);    grid.set(grid.stx(x),grid.sty(y + 1),p3);  } else {    grid.set(grid.stx(x),grid.sty(y),p2);    grid.set(grid.stx(x + 1),grid.sty(y),p3);    grid.set(grid.stx(x + 1),grid.sty(y + 1),p4);    grid.set(grid.stx(x),grid.sty(y + 1),p1);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.648 -0500",hash_original_method="C7B4AEF12870EFF4E9873FB61486C527",hash_generated_method="D50FD6B1BA7DB541E43BBBA8267E9F56") public void fling(int velocityY){  if (getChildCount() > 0) {    int height=getHeight() - mPaddingBottom - mPaddingTop;    int bottom=getChildAt(0).getHeight();    mScroller.fling(mScrollX,mScrollY,0,velocityY,0,0,0,Math.max(0,bottom - height),0,height / 2);    final boolean movingDown=velocityY > 0;    if (mFlingStrictSpan == null) {      mFlingStrictSpan=StrictMode.enterCriticalSpan("ScrollView-fling");    }    invalidate();  }}  }
class C{  public SshProvider(){}  }
class C{  public boolean isAccountUpdatesRunning(String accountNumber){  if (m_accountRequests.containsKey(accountNumber)) {    return true;  }  return false;}  }
class C{  public final double sumOfWeights(){  double sum=0;  for (int i=0; i < numInstances(); i++) {    sum+=instance(i).weight();  }  return sum;}  }
class C{  public GridConcurrentLinkedHashSet(Collection<E> c){  super(new ConcurrentLinkedHashMap<E,E>(c.size()));  addAll(c);}  }
class C{  private DD computeEByTaylorSeries(){  DD s=DD.valueOf(2.0);  DD t=DD.valueOf(1.0);  double n=1.0;  int i=0;  while (t.doubleValue() > DD.EPS) {    i++;    n+=1.0;    t=t.divide(DD.valueOf(n));    s=s.add(t);  }  return s;}  }
class C{  @Override public CategoryItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,CategoryPlot plot,int rendererIndex,PlotRenderingInfo info){  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  CategoryItemRendererState state=super.initialise(g2,adjusted,plot,rendererIndex,info);  return state;}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName,X509NameEntryConverter converter){  this.converter=converter;  X509NameTokenizer nTok=new X509NameTokenizer(dirName);  while (nTok.hasMoreTokens()) {    String token=nTok.nextToken();    if (token.indexOf('+') > 0) {      X509NameTokenizer pTok=new X509NameTokenizer(token,'+');      addEntry(lookUp,pTok.nextToken(),FALSE);      while (pTok.hasMoreTokens()) {        addEntry(lookUp,pTok.nextToken(),TRUE);      }    } else {      addEntry(lookUp,token,FALSE);    }  }  if (reverse) {    Vector o=new Vector();    Vector v=new Vector();    Vector a=new Vector();    int count=1;    for (int i=0; i < this.ordering.size(); i++) {      if (((Boolean)this.added.elementAt(i)).booleanValue()) {        o.insertElementAt(this.ordering.elementAt(i),count);        v.insertElementAt(this.values.elementAt(i),count);        a.insertElementAt(this.added.elementAt(i),count);        count++;      } else {        o.insertElementAt(this.ordering.elementAt(i),0);        v.insertElementAt(this.values.elementAt(i),0);        a.insertElementAt(this.added.elementAt(i),0);        count=1;      }    }    this.ordering=o;    this.values=v;    this.added=a;  }}  }
class C{  public static void makeBoundingBlock(World world,int x,int y,int z,Coord4D orig){  world.setBlock(x,y,z,MekanismBlocks.BoundingBlock);  if (!world.isRemote) {    ((TileEntityBoundingBlock)world.getTileEntity(x,y,z)).setMainLocation(orig.xCoord,orig.yCoord,orig.zCoord);  }}  }
class C{  public String seedTipText(){  return "Specify the seed of randomization of the class order";}  }
class C{  private void removeTrack(){  asyncTasks.remove(this);  if (asyncTasks.isEmpty() || (getActiveCount() <= 1 && getQueue().isEmpty())) {    completer.accept(TrackingScheduledExecutor.this,null);  }}  }
class C{  public static boolean isValidIPv6(String address){  if (address.length() == 0) {    return false;  }  int octet;  int octets=0;  String temp=address + ":";  boolean doubleColonFound=false;  int pos;  int start=0;  while (start < temp.length() && (pos=temp.indexOf(':',start)) >= start) {    if (octets == 8) {      return false;    }    if (start != pos) {      String value=temp.substring(start,pos);      if (pos == (temp.length() - 1) && value.indexOf('.') > 0) {        if (!isValidIPv4(value)) {          return false;        }        octets++;      } else {        try {          octet=Integer.parseInt(temp.substring(start,pos),16);        } catch (        NumberFormatException ex) {          return false;        }        if (octet < 0 || octet > 0xffff) {          return false;        }      }    } else {      if (pos != 1 && pos != temp.length() - 1 && doubleColonFound) {        return false;      }      doubleColonFound=true;    }    start=pos + 1;    octets++;  }  return octets == 8 || doubleColonFound;}  }
class C{  @Override public void put(double val,double weight){  final double nn=weight + this.n;  final double delta=val - this.m1;  final double otherm2=val * val;  final double otherm3=otherm2 * val;  final double otherm4=otherm3 * val;  final double delta_nn=delta / nn;  final double delta_nn2=delta_nn * delta_nn;  final double delta_nn3=delta_nn2 * delta_nn;  final double na2=this.n * this.n;  final double nb2=weight * weight;  final double ntn=this.n * weight;  this.m4+=otherm4 + delta * delta_nn3 * ntn* (na2 - ntn + nb2) + 6. * (na2 * otherm2 + nb2 * this.m2) * delta_nn2 + 4. * (this.n * otherm3 - weight * this.m3) * delta_nn;  this.m3+=otherm3 + delta * delta_nn2 * ntn* (this.n - weight) + 3. * (this.n * otherm2 - weight * this.m2) * delta_nn;  this.m2+=otherm2 + delta * delta_nn * this.n* weight;  this.m1+=weight * delta_nn;  this.n=nn;  min=Math.min(min,val);  max=Math.max(max,val);}  }
class C{  private void resetNotes2(){  if (errorInStatus2) {    if (editMode) {      statusText1.setText(editStatus2);    } else {      statusText2.setText(stdStatus2);    }    errorInStatus2=false;  }}  }
class C{  public static synchronized void prependSoSource(SoSource extraSoSource) throws IOException {  assertInitialized();  extraSoSource.prepare(makePrepareFlags());  SoSource[] newSoSources=new SoSource[sSoSources.length + 1];  newSoSources[0]=extraSoSource;  System.arraycopy(sSoSources,0,newSoSources,1,sSoSources.length);  sSoSources=newSoSources;}  }
class C{  LocalDateTime withLocalMillis(long newMillis){  return (newMillis == getLocalMillis() ? this : new LocalDateTime(newMillis,getChronology()));}  }
class C{  @Override public int compare(String o1,String o2){  double w1=weightMap.get(o1).getWeight();  double w2=weightMap.get(o2).getWeight();  if (comparatorWeightType == ABSOLUTE_WEIGHTS) {    w1=Math.abs(w1);    w2=Math.abs(w2);  }  return Double.compare(w1,w2) * direction;}  }
class C{  private void send(long ntpts,long rtpts) throws IOException {  long hb=ntpts / 1000000000;  long lb=((ntpts - hb * 1000000000) * 4294967296L) / 1000000000;  setLong(hb,8,12);  setLong(lb,12,16);  setLong(rtpts,16,20);  upack.setLength(28);  usock.send(upack);}  }
class C{  public static String parse(String text){  if (text == null)   throw new IgniteException("Text cannot be null.");  return parse0(text.trim(),0,false).result();}  }
class C{  public static Script pydmlFromInputStream(InputStream inputStream){  return scriptFromInputStream(inputStream,ScriptType.PYDML);}  }
class C{  public Frame(final Frame<? extends V> src){  this(src.locals,src.values.length - src.locals);  init(src);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.507 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  void reinitializeShard(){  ensureNotFrozen();  assert state == ShardRoutingState.STARTED;  version++;  state=ShardRoutingState.INITIALIZING;  allocationId=AllocationId.newInitializing();  this.unassignedInfo=new UnassignedInfo(UnassignedInfo.Reason.REINITIALIZED,null);}  }
class C{  public void changePop(List<String> users,boolean enable,String enableFor,String action) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  if (enable) {    entry.addProperty(Constants.ENABLE,Constants.TRUE);    entry.addProperty(Constants.ENABLE_FOR,enableFor);    entry.addProperty(Constants.ACTION,action);  } else {    entry.addProperty(Constants.ENABLE,Constants.FALSE);  }  for (  String user : users) {    if (enable) {      logger.log(Level.INFO,"Updating POP3 settings ( " + "enable: true" + ", enableFor: " + enableFor + ", action: "+ action+ " ) for user "+ user+ " ...");    } else {      logger.log(Level.INFO,"Updating POP3 settings ( enable: false ) for " + "user " + user + " ...");    }    updateSettings(user,entry,Constants.POP);    logger.log(Level.INFO,"Successfully updated POP3 settings.");  }}  }
class C{  public WizardControl(DialogueSystem system){  this.system=system;  if (system.getModule(GUIFrame.class) == null) {    throw new RuntimeException("could not create wizard control: no GUI");  } else {    gui=system.getModule(GUIFrame.class);  }}  }
class C{  @Override public boolean evaluate(Number[] params){  return super.evaluate(params) && canApplyFunction(params);}  }
class C{  public Cos(){  super(Number.class,Number.class);}  }
class C{  public Hash(final Deserializer deserializer){  this.data=deserializer.readBytes("data");}  }
class C{  boolean isDependentOnAnyIteratorOfScopeLessThanItsOwn(ExecutionContext context){  boolean isDep=false;  Set dependencySet=context.getDependencySet(this,true);  Iterator itr=dependencySet.iterator();  int currScope=context.currentScope().getScopeID();  while (itr.hasNext()) {    RuntimeIterator ritr=(RuntimeIterator)itr.next();    if (ritr.getScopeID() <= currScope) {      isDep=true;      break;    }  }  return isDep;}  }
class C{  public void sortValues(){  sortImpl(false,false);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String setting=getString(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      stack.push(setting);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }switch (realPlug.getConfigType(setting)) {case SageTVPlugin.CONFIG_BOOL:        return "Boolean";case SageTVPlugin.CONFIG_INTEGER:      return "Integer";case SageTVPlugin.CONFIG_TEXT:    return "Text";case SageTVPlugin.CONFIG_CHOICE:  return "Choice";case SageTVPlugin.CONFIG_MULTICHOICE:return "Multichoice";case SageTVPlugin.CONFIG_FILE:return "File";case SageTVPlugin.CONFIG_DIRECTORY:return "Directory";case SageTVPlugin.CONFIG_BUTTON:return "Button";case SageTVPlugin.CONFIG_PASSWORD:return "Password";}}}return "";}  }
class C{  public DecamouflageAttackStrategy(AttackStrategy base){  this.base=base;}  }
class C{  private BigdataStatement makeStatement(final StatementPatternNode pat,final BindingSet solution,final Map<String,BigdataBNode> bnodes){  final BigdataValue s=getValue(pat.s(),solution,bnodes);  final BigdataValue p=getValue(pat.p(),solution,bnodes);  final BigdataValue o=getValue(pat.o(),solution,bnodes);  final BigdataValue c=pat.c() == null ? null : getValue(pat.c(),solution,bnodes);  if (s == null || p == null || o == null)   return null;  if (!(s instanceof Resource))   return null;  if (!(p instanceof URI))   return null;  if (!(o instanceof Value))   return null;  if (c != null && !(c instanceof Resource))   return null;  return f.createStatement((Resource)s,(URI)p,(Value)o,(Resource)c);}  }
class C{  private double clip(final double val){  double ret=val;  if (ret > upperBound) {    ret=upperBound;  } else   if (ret < lowerBound) {    ret=lowerBound;  }  return ret;}  }
class C{  public TaggingData(ContextGenerator cntxGen){  cntxGenVector=new ArrayList<ContextGenerator>();  cntxGenVector.add(cntxGen);}  }
class C{  public static ActorSDK sharedActor(){  return sdk;}  }
class C{  public static boolean nextBoolean(){  return random.nextBoolean();}  }
class C{  protected void updateButtonDayDate(Button dayButton,int currentMonth,int day){  if (twoDigitMode) {    if (day < 10) {      dayButton.setText("0" + day);    } else {      dayButton.setText("" + day);    }  } else {    dayButton.setText("" + day);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  TestIntervalCategoryDataset clone=(TestIntervalCategoryDataset)super.clone();  clone.data=(KeyedObjects2D)this.data.clone();  return clone;}  }
class C{  public TextEditChangeNode(TextEditBasedChange change){  super(null,change);}  }
class C{  @Override public boolean isSatisfiedBy(Assignment input){  return true;}  }
class C{  public final boolean compareAndSet(int index,short expected,short newValue){  boolean success=false;  short odd;  short even;  short oldValue;  int backingIndex=index >> 1;  boolean evenIndex=isEven(index);  while (!success) {    int oldPacked=this.backingArray.get(backingIndex);    if (evenIndex) {      oldValue=key1(oldPacked);      even=newValue;      odd=key2(oldPacked);    } else {      oldValue=key2(oldPacked);      even=key1(oldPacked);      odd=newValue;    }    if (oldValue != expected) {      return false;    }    int newPacked=key(even,odd);    success=this.backingArray.compareAndSet(backingIndex,oldPacked,newPacked);  }  return true;}  }
class C{  @RequestMapping(method=RequestMethod.GET) public ResultVO all(@And({@Spec(path="name",spec=Like.class),@Spec(path="validFlag",constVal="VALID",spec=In.class),@Spec(path="createdDate",params={"createdDateAfter, createdDateBefore"},spec=DateBetween.class)}) Specification<Client> clientSpecification,ClientParam param){  try {    if (param.getPageNo() == null) {      return resultHelper.successResp(clientDomain.getAll(clientSpecification,QueryHelper.getSort(param.getSortBy()),ClientVO.class));    }    return resultHelper.successResp(clientDomain.getPage(clientSpecification,QueryHelper.getPageRequest(param),ClientVO.class));  } catch (  CommonsException e) {    return resultHelper.infoResp(logger,e.getErrorType(),e.getMessage());  }catch (  Exception e) {    return resultHelper.errorResp(logger,e,ErrorType.UNKNOWN,e.getMessage());  }}  }
class C{  public void addConstantColumn(String name,Class type,Object dflt){  addColumn(name,ColumnFactory.getConstantColumn(type,dflt));}  }
class C{  private void parseAndStoreReferralParams(Context context,String decodedReferrer){  final String[] referralParts=decodedReferrer.split("&");  if (referralParts.length > 0) {    String key;    String value;    int positionOfEquals;    int sharedPreferenceKey;    for (    final String eachPart : referralParts) {      positionOfEquals=eachPart.indexOf('=');      if (positionOfEquals >= 1) {        key=eachPart.substring(0,positionOfEquals + 1);        value=eachPart.substring(positionOfEquals + 1,eachPart.length());        if (!TextUtils.isEmpty(key) && !TextUtils.isEmpty(value)) {          if ("share_token".equals(key)) {            SharedPreferenceHelper.set(R.string.pref_referrer,value);          } else {            sharedPreferenceKey=getSharedPreferenceKeyForCampaignParameter(key);            if (sharedPreferenceKey != 0) {              SharedPreferenceHelper.set(sharedPreferenceKey,value);            }          }        }      }    }  }}  }
class C{  public final void addAttribute(String uri,String local,String qname,String type,String val){  int index=super.getLength();  super.addAttribute(uri,local,qname,type,val);  if (index < MAXMinus1) {    return;  } else   if (index == MAXMinus1) {    switchOverToHash(MAX);  } else {    Integer i=new Integer(index);    m_indexFromQName.put(qname,i);    m_buff.setLength(0);    m_buff.append('{').append(uri).append('}').append(local);    String key=m_buff.toString();    m_indexFromQName.put(key,i);  }  return;}  }
class C{  public final void addDivider(@StringRes final int titleId){  Divider divider=new Divider();  divider.setTitle(getContext(),titleId);  adapter.add(divider);  adaptGridViewHeight();}  }
class C{  public static VOOrganization toVOOrganization(Organization organization,boolean imageDefined,LocalizerFacade localizerFacade){  return toVOOrganization(organization,imageDefined,localizerFacade,PerformanceHint.ALL_FIELDS);}  }
class C{  public void newInstance(final Type type){  typeInsn(Opcodes.NEW,type);}  }
class C{  private void sort(List<PatternReference> patterns){  Collections.sort(patterns,null);}  }
class C{  public void checkComputeSignificanceDoesntAlterAverage(int algNumber) throws Exception {  PredictiveInfoCalculatorKraskov piCalc=getNewCalc(algNumber);  String kraskov_K="4";  piCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  piCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);  super.testComputeSignificanceDoesntAlterAverage(piCalc,2,100);}  }
class C{  public SerialLight(String systemName){  super(systemName);  initializeLight(systemName);}  }
class C{  public final boolean isCaretVisible(){  return (!caretBlinks || blink) && caretVisible;}  }
class C{  private void performOpenRelatedWorkItemWith(final String editorID){  final Object selectedItem=getSelectedItem();  Check.isTrue(selectedItem instanceof RelatedLink,"selectedItem instanceof RelatedLink");  final RelatedLink relatedLink=(RelatedLink)selectedItem;  WorkItem workItem;  try {    final int targetWorkItemID=relatedLink.getTargetWorkItemID();    workItem=getServer().getConnection().getWorkItemClient().getWorkItemByID(targetWorkItemID);  } catch (  final Exception e) {    throw new RuntimeException(e);  }  WorkItemEditorHelper.openEditor(getServer(),workItem,editorID);}  }
class C{  public static DataDisplayTable listGlyphDimensionBounds(Font font){  String[] header={"Dimension","Value"};  Align[] displayAlignment={Align.Left,Align.Right};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  LocaTable locaTable=FontUtils.getLocaTable(font);  GlyphTable glyfTable=FontUtils.getGlyphTable(font);  int xMin=Integer.MAX_VALUE;  int yMin=Integer.MAX_VALUE;  int xMax=Integer.MIN_VALUE;  int yMax=Integer.MIN_VALUE;  for (int i=0; i < locaTable.numGlyphs(); i++) {    Glyph glyph=glyfTable.glyph(locaTable.glyphOffset(i),locaTable.glyphLength(i));    if (glyph.xMin() < xMin) {      xMin=glyph.xMin();    }    if (glyph.yMin() < yMin) {      yMin=glyph.yMin();    }    if (glyph.xMax() > xMax) {      xMax=glyph.xMax();    }    if (glyph.yMax() > yMax) {      yMax=glyph.yMax();    }  }  table.add(Arrays.asList(new String[]{"xMin",String.format("%d",xMin)}));  table.add(Arrays.asList(new String[]{"xMax",String.format("%d",xMax)}));  table.add(Arrays.asList(new String[]{"yMin",String.format("%d",yMin)}));  table.add(Arrays.asList(new String[]{"yMax",String.format("%d",yMax)}));  return table;}  }
class C{  public int findLine(int offset){  int line=lineStarts.length - 1;  while ((lineStarts[line] > offset) && (line > 0)) {    line--;  }  return line;}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  KeyResolverSpi tmp=cloneIfNeeded();  if (!tmp.engineCanResolve(element,baseURI,storage)) {    return null;  }  return tmp.engineResolvePublicKey(element,baseURI,storage);}  }
class C{  public boolean isEqual(AttributeSet attr){  return ((getAttributeCount() == attr.getAttributeCount()) && containsAttributes(attr));}  }
class C{  public void testInputWaitAvailable() throws Exception {  File f=this.initFile("testInputWaitAvailable");  FileOutputStream fos=new FileOutputStream(f);  DataOutputStream dos=new DataOutputStream(fos);  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  assertEquals("empty file",0,bfdi.waitAvailable(4,10));  dos.writeInt(0);  dos.writeInt(1);  dos.flush();  assertEquals("sufficient data",8,bfdi.waitAvailable(4,10));  bfdi.readInt();  assertEquals("exactly enough data",4,bfdi.waitAvailable(4,10));  bfdi.readInt();  assertEquals("data exhausted",0,bfdi.waitAvailable(4,10));  dos.close();  bfdi.close();}  }
class C{  VPlexMigrationInfo findMigration(String migrationName,URI baseMigrationPath,boolean retry) throws VPlexApiException {  int retryCount=0;  VPlexMigrationInfo migrationInfo=null;  while (++retryCount <= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {    try {      URI requestURI=_vplexApiClient.getBaseURI().resolve(baseMigrationPath);      s_logger.info("Find migration request URI is {}",requestURI.toString());      ClientResponse response=_vplexApiClient.get(requestURI);      String responseStr=response.getEntity(String.class);      s_logger.info("Response is {}",responseStr);      int status=response.getStatus();      response.close();      if (status != VPlexApiConstants.SUCCESS_STATUS) {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.getMigrationsFailureStatus(String.valueOf(status),cause);      }      List<VPlexMigrationInfo> allMigrationInfos=VPlexApiUtils.getChildrenFromResponse(baseMigrationPath.toString(),responseStr,VPlexMigrationInfo.class);      migrationInfo=null;      for (      VPlexMigrationInfo mInfo : allMigrationInfos) {        s_logger.info("Migration Info: {}",mInfo.toString());        if (mInfo.getName().equals(migrationName)) {          migrationInfo=mInfo;          break;        }      }      if ((migrationInfo != null) || (!retry) || (retryCount >= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        if (migrationInfo == null) {          throw VPlexApiException.exceptions.cantFindMigrationWithName(migrationName);        } else {          updateMigrationInfo(migrationInfo,baseMigrationPath);          break;        }      } else {        s_logger.warn("Migration not found on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      }    } catch (    VPlexApiException vae) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding migration on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),vae);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw vae;      }    }catch (    Exception e) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding migration on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),e);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw VPlexApiException.exceptions.failureFindingMigrationWithName(migrationName,e);      }    }  }  return migrationInfo;}  }
class C{  public final static int findFirstEqual(char[] source,int index,char[] match){  for (int i=index; i < source.length; i++) {    if (equalsOne(source[i],match) == true) {      return i;    }  }  return -1;}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  if (e == null)   throw new NullPointerException();  long nanos=unit.toNanos(timeout);  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(new Node<E>(e));    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();  return true;}  }
class C{  public void registerSensor(Sensor s,int i){  if ((i < 0) || (i > (inputBits[nodeType] - 1)) || (i > MAXSENSORS)) {    log.error("Unexpected sensor ordinal in registerSensor: " + Integer.toString(i + 1));    return;  }  hasActiveSensors=true;  if (sensorArray[i] == null) {    sensorArray[i]=s;    if (lastUsedSensor < i) {      lastUsedSensor=i;    }  } else {    log.warn("multiple registration of same sensor: CS" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERNODE) + i + 1));  }}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  private static Pool createPool(String host,String name,Integer port,boolean enableQueue){  return PoolManager.createFactory().addServer(host,port.intValue()).setSubscriptionEnabled(enableQueue).setSubscriptionRedundancy(-1).setReadTimeout(10000).setSocketBufferSize(32768).setMinConnections(3).setThreadLocalConnections(true).create("ConflationUnitTestPool" + name);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.BREAK_STATEMENT__LABEL:    return label != null;}return super.eIsSet(featureID);}  }
class C{  public void test_setTimeZoneLjava_util_TimeZone(){  try {    DateFormat format=DateFormat.getInstance();    TimeZone tz=TimeZone.getTimeZone("America/Los_Angeles");    format.setTimeZone(tz);    assertTrue("TimeZone is set incorrectly",tz.equals(format.getTimeZone()));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  @SuppressWarnings("unchecked") public ArrayDeque(final int minSize){  int size=countInitSize(minSize);  elements=(E[])new Object[size];  front=rear=0;  status=DequeStatus.Empty;  modCount=0;}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,DERTaggedObject externalData){  this(directReference,indirectReference,dataValueDescriptor,externalData.getTagNo(),externalData.toASN1Primitive());}  }
class C{  private void sincronizarBase(){  listaExcursao=ControleDAO.getBanco().getExcursaoDAO().listar();}  }
class C{  public boolean shouldStartScrape(){  return startScrape;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public void search(String fullTextSearchString) throws IOException, ServiceException {  ListQuery query=new ListQuery(listFeedUrl);  query.setFullTextQuery(fullTextSearchString);  ListFeed feed=service.query(query,ListFeed.class);  out.println("Results for [" + fullTextSearchString + "]");  for (  ListEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=createCaller().init();  test.config.traceTest=true;  test.config.memory=true;  test.config.networked=true;  test.config.beforeTest();  test.test();  test.config.afterTest();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String grassFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      grassFile=whiteboxHeaderFile.replace(".dep",".grd");      (new File(grassFile)).delete();      fw=new FileWriter(grassFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="DSAA";      out.println(str1);      str1=String.valueOf(cols) + " " + String.valueOf(rows);      out.println(str1);      double xMin=Math.min(wbr.getEast(),wbr.getWest());      double xMax=Math.max(wbr.getEast(),wbr.getWest());      str1=String.valueOf(xMin) + " " + String.valueOf(xMax);      out.println(str1);      double yMin=Math.min(wbr.getNorth(),wbr.getSouth());      double yMax=Math.max(wbr.getNorth(),wbr.getSouth());      str1=String.valueOf(yMin) + " " + String.valueOf(yMax);      out.println(str1);      str1=String.valueOf(0) + " " + String.valueOf(1);      out.println(str1);      double[] data=null;      String line="";      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=rows - 1; row >= 0; row--) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * (rows - 1 - row) / (rows - 1));          updateProgress(progress);        }      } else {        for (row=rows - 1; row >= 0; row--) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * (rows - 1 - row) / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Quaternion interpolateTo(Quaternion target,float t){  return copy().interpolateToSelf(target,t);}  }
class C{  protected void testYaml(URL url) throws Exception {  LOG.debug("URL: {}",url);  Throwable thrown=null;  try (Reader in=new InputStreamReader(url.openStream(),"UTF-8")){    new YamlTester(url,in,getConnection(),isRandomCost()).test();    LOG.debug("Test passed");  } catch (  Exception|AssertionError e) {    thrown=e;    throw e;  } finally {    if (thrown != null) {      LOG.error("Test failed",thrown);      try {        forgetConnection();      } catch (      Exception e2) {      }    }  }}  }
class C{  public static OSType calculateOS(){  String vendor=System.getProperty("java.vendor");  if ("The Android Project".equals(vendor)) {    return OSType.ANDROID;  }  String osName=System.getProperty("os.name");  osName=osName.toLowerCase(Locale.ENGLISH);  if (osName.startsWith("mac os")) {    return OSType.APPLE;  }  if (osName.startsWith("windows")) {    return OSType.WINDOWS;  }  if (osName.startsWith("linux")) {    return OSType.LINUX;  }  if (osName.startsWith("sun")) {    return OSType.SUN;  }  return OSType.UNKNOWN;}  }
class C{  public boolean hasInlinks(){  return fieldSetFlags()[20];}  }
class C{  private String linkifyDeadlockInfo(String line){  if (line != null && line.indexOf("Ox") >= 0) {    String begin=line.substring(0,line.indexOf("0x"));    int objectBegin=line.lastIndexOf("0x");    int monitorBegin=line.indexOf("0x");    String monitorHex=line.substring(monitorBegin,monitorBegin + 10);    String monitor=line.substring(objectBegin,objectBegin + 10);    String end=line.substring(line.indexOf("0x") + 10);    monitor="<a href=\"monitor://<" + monitor + ">\">"+ monitorHex+ "</a>";    return (begin + monitor + end);  } else {    return (line);  }}  }
class C{  public CSelectNodesWithSelection(final ZyGraph graph,final NaviNode node){  super("Select nodes with selection");  Preconditions.checkNotNull(graph,"IE00944: Graph argument can not be null");  Preconditions.checkNotNull(node,"IE00945: Node argument can not be null");  m_graph=graph;  m_node=node;}  }
class C{  @Override public String toString(){  return cronExpression;}  }
class C{  public void test_setFloatLjava_lang_ObjectIF(){  float[] x={0.0f};  boolean thrown=false;  try {    Array.setFloat(x,0,(float)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getFloat(x,0),0.0);  try {    Array.setFloat(new Object(),0,(float)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setFloat(x,4,(float)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setFloat(null,0,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") private static void writeEvictionPolicy(BinaryRawWriter out,EvictionPolicy p){  if (p instanceof FifoEvictionPolicy) {    out.writeByte((byte)1);    FifoEvictionPolicy p0=(FifoEvictionPolicy)p;    out.writeInt(p0.getBatchSize());    out.writeInt(p0.getMaxSize());    out.writeLong(p0.getMaxMemorySize());  } else   if (p instanceof LruEvictionPolicy) {    out.writeByte((byte)2);    LruEvictionPolicy p0=(LruEvictionPolicy)p;    out.writeInt(p0.getBatchSize());    out.writeInt(p0.getMaxSize());    out.writeLong(p0.getMaxMemorySize());  } else {    out.writeByte((byte)0);  }}  }
class C{  public static <REACTOR extends ReactBuilder>ReactPool<REACTOR> unboundedPool(final Collection<REACTOR> reactors){  final ReactPool<REACTOR> r=new ReactPool<>();  reactors.forEach(null);  return r;}  }
class C{  @SkipValidation @Action(value="/tender/worksPackage-viewWorksPackagePdf") public String viewWorksPackagePdf() throws JRException, Exception {  final ReportRequest reportRequest=new ReportRequest("Workspackage",worksPackage.getActivitiesForEstimate(),createHeaderParams());  final ReportOutput reportOutput=reportService.createReport(reportRequest);  if (reportOutput != null && reportOutput.getReportOutputData() != null)   WorkspackagePDF=new ByteArrayInputStream(reportOutput.getReportOutputData());  return PRINT;}  }
class C{  public static void main(String[] args){  int[] counts=new int[100];  System.out.print("Enter the integers between 1 and 100: ");  count(counts);  for (int i=0; i < counts.length; i++) {    if (counts[i] > 0)     System.out.println((i + 1) + " occurs " + counts[i]+ " time"+ (counts[i] > 1 ? "s" : ""));  }}  }
class C{  public final void testGetTrustedCer02() throws Exception {  PublicKey pk=new TestKeyPair(keyAlg).getPublic();  TrustAnchor ta=new TrustAnchor(validCaNameRfc2253,pk,null);  assertNull("null1",ta.getTrustedCert());  X500Principal x500p=new X500Principal(validCaNameRfc2253);  ta=new TrustAnchor(x500p,pk,null);  assertNull("null2",ta.getTrustedCert());  X509Certificate cert=new TestCertUtils.TestX509Certificate(x500p,x500p);  TrustAnchor ta2=new TrustAnchor(cert,null);  assertSame(cert,ta2.getTrustedCert());}  }
class C{  void resize(int newCapacity){  Entry<K,V>[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry<K,V>[] newTable=newTable(newCapacity);  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  public DoubleIteratorSpliterator(java8.util.PrimitiveIterator.OfDouble iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public static String renderJson(Object o){  Gson gson=new GsonBuilder().disableHtmlEscaping().setPrettyPrinting().create();  return gson.toJson(o);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long x=getLong(stack);  return (x == 0) ? "" : Sage.dfjFull(x);}  }
class C{  private boolean isEmpty(Path directory) throws IOException {  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(directory)){    return !directoryStream.iterator().hasNext();  } }  }
class C{  public StringElement addElement(String hashcode,String element){  StringElement se=new StringElement(element);  se.setFilterState(getFilterState());  se.setFilter(getFilter());  addElementToRegistry(hashcode,se);  return (this);}  }
class C{  private void notifyAccessibilityEventInternal(int eventType){  IAccessibilityServiceClient listener;  AccessibilityEvent event;synchronized (mLock) {    listener=mServiceInterface;    if (listener == null) {      return;    }    event=mPendingEvents.get(eventType);    if (event == null) {      return;    }    mPendingEvents.remove(eventType);    if (mSecurityPolicy.canRetrieveWindowContent(this)) {      event.setConnectionId(mId);    } else {      event.setSource(null);    }    event.setSealed(true);  }  try {    listener.onAccessibilityEvent(event);    if (DEBUG) {      Slog.i(LOG_TAG,"Event " + event + " sent to "+ listener);    }  } catch (  RemoteException re) {    Slog.e(LOG_TAG,"Error during sending " + event + " to "+ listener,re);  } finally {    event.recycle();  }}  }
class C{  private void executeQuery(QueryExecution<?> queryExecution) throws SortJdbcException, PreparingPersistStatementException, SortQueryException {  List<Param> params=new LinkedList<Param>();  String sql=queryExecution.getSql(params);  LOG.debug("============================================");  LOG.debug("Executing individual query:\n" + sql);  if (!params.isEmpty()) {    try (PreparedStatement stmt=prepareStatement(sql,runtimeProperties)){      setFetch(stmt,runtimeProperties);      setParameters(stmt,params);      try (ResultSet resultSet=stmt.executeQuery()){        queryExecution.processResultSet(resultSet);      } catch (      SQLException x) {        throw new SortJdbcException("SQLException executing the prepared statement query",x);      }    } catch (    SQLException x) {      throw new PreparingPersistStatementException("SQLException preparing statement",x);    }  } else {    try (Statement stmt=createStatement(runtimeProperties)){      setFetch(stmt,runtimeProperties);      try (ResultSet resultSet=stmt.executeQuery(sql)){        queryExecution.processResultSet(resultSet);      } catch (      SQLException x) {        throw new SortJdbcException("SQLException executing the statement query",x);      }    } catch (    SQLException x) {      throw new SortJdbcException("SQLException creating statement",x);    }  }}  }
class C{  private void validateDataProviderCreateRequest(DataProviderCreateRequest request) throws IllegalArgumentException {  request.setDataProviderName(alternateKeyHelper.validateStringParameter("data provider name",request.getDataProviderName()));}  }
class C{  public Boolean sismember(final String key,final String member){  checkIsInMulti();  client.sismember(key,member);  return client.getIntegerReply() == 1;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tStart temperature","A",1,"-A <float>"));  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));  newVector.addElement(new Option("\tDelta temperature","D",1,"-D <float>"));  newVector.addElement(new Option("\tRandom number seed","R",1,"-R <seed>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public final synchronized float readFloat(){  String input="";  float value=0.0F;  try {    input=in.readLine();  } catch (  IOException e) {  }  if (input != null) {    try {      value=Float.parseFloat(input);    } catch (    NumberFormatException e) {    }  }  return value;}  }
class C{  Triangle(double side1,double side2,double side3){  this.side1=side1;  this.side2=side2;  this.side3=side3;}  }
class C{  public static Object executeScript(String filePath,String functionName,ScriptContext scriptContext,Object[] args) throws ScriptException, NoSuchMethodException, IOException {  Assert.notNull("filePath",filePath,"scriptContext",scriptContext);  scriptContext.setAttribute(ScriptEngine.FILENAME,filePath,ScriptContext.ENGINE_SCOPE);  if (functionName == null) {    CompiledScript script=compileScriptFile(filePath);    if (script != null) {      return executeScript(script,functionName,scriptContext,args);    }  }  String fileExtension=getFileExtension(filePath);  ScriptEngineManager manager=new ScriptEngineManager();  ScriptEngine engine=manager.getEngineByExtension(fileExtension);  if (engine == null) {    throw new IllegalArgumentException("The script type is not supported for location: " + filePath);  }  if (Debug.verboseOn()) {    Debug.logVerbose("Begin processing script [" + filePath + "] using engine "+ engine.getClass().getName(),module);  }  engine.setContext(scriptContext);  URL scriptUrl=FlexibleLocation.resolveLocation(filePath);  FileReader reader=new FileReader(new File(scriptUrl.getFile()));  Object result=engine.eval(reader);  if (UtilValidate.isNotEmpty(functionName)) {    try {      Invocable invocableEngine=(Invocable)engine;      result=invocableEngine.invokeFunction(functionName,args == null ? EMPTY_ARGS : args);    } catch (    ClassCastException e) {      throw new ScriptException("Script engine " + engine.getClass().getName() + " does not support function/method invocations");    }  }  return result;}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  public void write(ArrayList<KeyValue> metadata,long imageStart,Raster raster,DataType dataType) throws IOException {  OutputStream oStream=new FileOutputStream(filePath);  if (oStream != null) {    outputStream=new BufferedOutputStream(oStream);  }  LabelParser parser=new LabelParser();  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(outputStream));  long size=parser.writeObject(writer,metadata,"");  long pad=imageStart - size;  for (int i=0; i < pad; ++i) {    writer.write(' ');  }  writer.flush();  dataStream=new DataOutputStream(outputStream);  writeRaster(raster,dataType);}  }
class C{  public AuthScope(final String host,int port,final String realm){  this(host,port,realm,ANY_SCHEME);}  }
class C{  @Nullable public final E last(){  if (myIterable instanceof List) {    return ContainerUtil.getLastItem((List<E>)myIterable);  }  Iterator<E> iterator=myIterable.iterator();  E cur=null;  while (iterator.hasNext()) {    cur=iterator.next();  }  return cur;}  }
class C{  public void finish() throws Exception {}  }
class C{  static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=(objectPackage != null ? objectPackage.getName() : "");    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public UserEntity(){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.PARAMETER___ANONYMOUS_PARAMETER_11:    return anonymous_parameter_1_1 != null && !anonymous_parameter_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private boolean isELReserved(String id){  int i=0;  int j=reservedWords.length;  while (i < j) {    int k=(i + j) / 2;    int result=reservedWords[k].compareTo(id);    if (result == 0) {      return true;    }    if (result < 0) {      i=k + 1;    } else {      j=k;    }  }  return false;}  }
class C{  public void paintListBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected void configureMQConnectionFactory(MQConnectionFactory cf) throws JMSException {  boolean bindings=Config.parms.getString("jt").equals("mqb");  if (bindings) {    cf.setTransportType(CommonConstants.WMQ_CM_BINDINGS);    cf.setPort(Config.parms.getInt("jp"));    cf.setChannel(Config.parms.getString("jc"));    if (Config.parms.getString("bt").equals("fp")) {      Log.logger.log(Level.INFO,"MQCNO_FASTPATH_BINDINGs set on");      cf.setMQConnectionOptions(CMQC.MQCNO_FASTPATH_BINDING);    } else     if (Config.parms.getString("bt").equals("is")) {      Log.logger.log(Level.INFO,"MQCNO_ISOLATED_BINDINGs set on");      cf.setMQConnectionOptions(CMQC.MQCNO_ISOLATED_BINDING);    }  } else {    cf.setTransportType(CommonConstants.WMQ_CM_CLIENT);    cf.setHostName(Config.parms.getString("jh"));    cf.setPort(Config.parms.getInt("jp"));    cf.setChannel(Config.parms.getString("jc"));    cf.setSSLCipherSuite(sslCipherSuite);  }  cf.setQueueManager(Config.parms.getString("jb"));  cf.setUseConnectionPooling(Config.parms.getBoolean("jo"));  if (useOldJMS) {    cf.setSubscriptionStore(CommonConstants.WMQ_SUBSTORE_QUEUE);  } else {    cf.setSubscriptionStore(CommonConstants.WMQ_SUBSTORE_BROKER);  }  if (providerVersion == 6) {    setProviderVersion(cf,"6.0.0.0");  } else   if (providerVersion == 7) {    setProviderVersion(cf,"7.0.0.0");  }  String psmode=System.getProperty(PSMODE);  if (psmode != null) {    if (cf instanceof MQTopicConnectionFactory) {      MQTopicConnectionFactory tcf=((MQTopicConnectionFactory)cf);      tcf.setBrokerPubQueue(Config.parms.getString("jq"));      if (psmode.equals(PSMODE_PUB)) {        if (ackCount >= 0) {          tcf.setPubAckInterval(ackCount);        }        if (itx) {          cf.setOutcomeNotification(true);          cf.setOptimisticPublication(true);        }      } else       if (psmode.equals(PSMODE_SUB)) {        if (useUniqueQ && !durable) {          tcf.setBrokerSubQueue("SYSTEM.JMS.ND.SUB.*");        }        if (itx) {          cf.setReceiveIsolation(CommonConstants.WMQ_RCVISOL_UNCOMMITTED);          cf.setProcessDuration(CommonConstants.WMQ_PROCESSING_SHORT);          cf.setOutcomeNotification(false);        }      }    } else {      cf.setBrokerPubQueue(Config.parms.getString("jq"));      if (ackCount >= 0) {        cf.setPubAckInterval(ackCount);      }      if (useUniqueQ && !durable) {        cf.setBrokerSubQueue("SYSTEM.JMS.ND.SUB.*");      }      if (psmode.equals(PSMODE_PUB)) {        if (itx) {          cf.setOutcomeNotification(true);          cf.setOptimisticPublication(true);        }      } else       if (psmode.equals(PSMODE_SUB)) {        if (itx) {          cf.setReceiveIsolation(JMSC.MQJMS_RCVISOL_UNCOMMITTED);          cf.setProcessDuration(JMSC.MQJMS_PROCESSING_SHORT);          cf.setOutcomeNotification(false);        }      }    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  void generateEventOffsets(TXState txState){switch (this.op) {case OP_NULL:    break;case OP_L_DESTROY:  generateNearSideOnlyEventOffset(txState);break;case OP_CREATE_LD:generateBothEventOffsets(txState);break;case OP_LLOAD_CREATE_LD:generateBothEventOffsets(txState);break;case OP_NLOAD_CREATE_LD:generateBothEventOffsets(txState);break;case OP_PUT_LD:generateBothEventOffsets(txState);break;case OP_LLOAD_PUT_LD:generateBothEventOffsets(txState);break;case OP_NLOAD_PUT_LD:generateBothEventOffsets(txState);break;case OP_D_INVALIDATE_LD:generateBothEventOffsets(txState);break;case OP_D_DESTROY:generateSharedEventOffset(txState);break;case OP_L_INVALIDATE:generateNearSideOnlyEventOffset(txState);break;case OP_PUT_LI:generateBothEventOffsets(txState);break;case OP_LLOAD_PUT_LI:generateBothEventOffsets(txState);break;case OP_NLOAD_PUT_LI:generateBothEventOffsets(txState);break;case OP_D_INVALIDATE:generateSharedEventOffset(txState);break;case OP_CREATE_LI:generateBothEventOffsets(txState);break;case OP_LLOAD_CREATE_LI:generateBothEventOffsets(txState);break;case OP_NLOAD_CREATE_LI:generateBothEventOffsets(txState);break;case OP_CREATE:generateSharedEventOffset(txState);break;case OP_SEARCH_CREATE:generateNearSideOnlyEventOffset(txState);break;case OP_LLOAD_CREATE:generateSharedEventOffset(txState);break;case OP_NLOAD_CREATE:generateSharedEventOffset(txState);break;case OP_LOCAL_CREATE:generateNearSideOnlyEventOffset(txState);break;case OP_PUT:generateSharedEventOffset(txState);break;case OP_SEARCH_PUT:generateNearSideOnlyEventOffset(txState);break;case OP_LLOAD_PUT:generateSharedEventOffset(txState);break;case OP_NLOAD_PUT:generateSharedEventOffset(txState);break;default :throw new IllegalStateException("<unhandled op " + this.op + " >");}}  }
class C{  @Override public void onPurchaseUpdatesResponse(final PurchaseUpdatesResponse purchaseUpdatesResponse){  Log.v(TAG,"onPurchaseUpdatesRecived recieved: Response -" + purchaseUpdatesResponse);  Log.v(TAG,"PurchaseUpdatesRequestStatus:" + purchaseUpdatesResponse.getPurchaseUpdatesRequestStatus());  Log.v(TAG,"RequestID:" + purchaseUpdatesResponse.getRequestId());  new PurchaseUpdatesAsyncTask().execute(purchaseUpdatesResponse);}  }
class C{  protected int _offset(int absRank){  return offsets[absRank];}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  XBLOMElement e=(XBLOMElement)n;  e.prefix=prefix;  return n;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.arrowPaint=SerialUtilities.readPaint(stream);  this.arrowStroke=SerialUtilities.readStroke(stream);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.776 -0500",hash_original_method="F1402A0F9737CAA37FCE790C5EE70D66",hash_generated_method="BABE3F4B0A7F54866E37EA5FC9813373") private void gatherSubjects(){  int count=0;  for (ThreadContainer c=root.child; c != null; c=c.next)   count++;  HashMap subjectTable=new HashMap((int)(count * 1.2),(float)0.9);  count=0;  for (ThreadContainer c=root.child; c != null; c=c.next) {    Threadable threadable=c.threadable;    if (threadable == null)     threadable=c.child.threadable;    String subj=threadable.simplifiedSubject();    if (subj == null || subj == "")     continue;    ThreadContainer old=(ThreadContainer)subjectTable.get(subj);    if (old == null || (c.threadable == null && old.threadable != null) || (old.threadable != null && old.threadable.subjectIsReply() && c.threadable != null && !c.threadable.subjectIsReply())) {      subjectTable.put(subj,c);      count++;    }  }  if (count == 0)   return;  ThreadContainer prev, c, rest;  for (prev=null, c=root.child, rest=c.next; c != null; prev=c, c=rest, rest=(rest == null ? null : rest.next)) {    Threadable threadable=c.threadable;    if (threadable == null)     threadable=c.child.threadable;    String subj=threadable.simplifiedSubject();    if (subj == null || subj == "")     continue;    ThreadContainer old=(ThreadContainer)subjectTable.get(subj);    if (old == c)     continue;    if (prev == null)     root.child=c.next; else     prev.next=c.next;    c.next=null;    if (old.threadable == null && c.threadable == null) {      ThreadContainer tail;      for (tail=old.child; tail != null && tail.next != null; tail=tail.next)       ;      tail.next=c.child;      for (tail=c.child; tail != null; tail=tail.next)       tail.parent=old;      c.child=null;    } else     if (old.threadable == null || (c.threadable != null && c.threadable.subjectIsReply() && !old.threadable.subjectIsReply())) {      c.parent=old;      c.next=old.child;      old.child=c;    } else {      ThreadContainer newc=new ThreadContainer();      newc.threadable=old.threadable;      newc.child=old.child;      for (ThreadContainer tail=newc.child; tail != null; tail=tail.next)       tail.parent=newc;      old.threadable=null;      old.child=null;      c.parent=old;      newc.parent=old;      old.child=c;      c.next=newc;    }    c=prev;  }  subjectTable.clear();  subjectTable=null;}  }
class C{  public void addSettings(Map<String,Object> settings){  if (null == this.settings) {    this.settings=new HashMap<String,Object>(settings.size());  }  this.settings.putAll(settings);}  }
class C{  public static void registerConfig(){  AbstractJMSProvider.registerConfig();  DefaultMessageFactory.registerConfig();  if (!Config.isInvalid()) {    final Class<?> dfClazz=Config.parms.getClazz("df");    Config.registerAnother(dfClazz);    jmsProvider=AbstractJMSProvider.getInstance();  }}  }
class C{  @Deprecated public ElideResponse post(String path,String jsonApiDocument,Object opaqueUser,SecurityMode securityMode){  RequestScope requestScope=null;  boolean isVerbose=false;  try (DataStoreTransaction transaction=dataStore.beginTransaction()){    User user=transaction.accessUser(opaqueUser);    JsonApiDocument doc=mapper.readJsonApiDocument(jsonApiDocument);    requestScope=new RequestScope(path,doc,transaction,user,dictionary,mapper,auditLogger,securityMode,permissionExecutor);    isVerbose=requestScope.getPermissionExecutor().isVerbose();    PostVisitor visitor=new PostVisitor(requestScope);    Supplier<Pair<Integer,JsonNode>> responder=visitor.visit(parse(path));    transaction.preCommit();    requestScope.getPermissionExecutor().executeCommitChecks();    requestScope.saveObjects();    transaction.flush();    ElideResponse response=buildResponse(responder.get());    auditLogger.commit();    transaction.commit();    requestScope.runCommitTriggers();    if (log.isTraceEnabled()) {      requestScope.getPermissionExecutor().printCheckStats();    }    return response;  } catch (  ForbiddenAccessException e) {    log.debug("{}",e.getLoggedMessage());    return buildErrorResponse(e,isVerbose);  }catch (  HttpStatusException e) {    return buildErrorResponse(e,isVerbose);  }catch (  IOException e) {    return buildErrorResponse(new TransactionException(e),isVerbose);  }catch (  ParseCancellationException e) {    return buildErrorResponse(new InvalidURLException(e),isVerbose);  } finally {    auditLogger.clear();  }}  }
class C{  protected ReplacedElement newIrreplaceableImageElement(int cssWidth,int cssHeight){  BufferedImage missingImage;  ReplacedElement mre;  try {    missingImage=ImageUtil.createCompatibleBufferedImage(cssWidth,cssHeight,BufferedImage.TYPE_INT_RGB);    Graphics2D g=missingImage.createGraphics();    g.setColor(Color.BLACK);    g.setBackground(Color.WHITE);    g.setFont(new Font("Serif",Font.PLAIN,12));    g.drawString("Missing",0,12);    g.dispose();    mre=new ImageReplacedElement(missingImage,cssWidth,cssHeight);  } catch (  Exception e) {    mre=new EmptyReplacedElement(cssWidth < 0 ? 0 : cssWidth,cssHeight < 0 ? 0 : cssHeight);  }  return mre;}  }
class C{  public final int peek(){  try {    return m_map[m_firstFree - 1];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public PersistentCookieStore(Context context){  mCookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  mCookieMap=new HashMap<String,ConcurrentHashMap<String,HttpCookie>>();  Map<String,?> prefsMap=mCookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=mCookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          HttpCookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!mCookieMap.containsKey(entry.getKey()))             mCookieMap.put(entry.getKey(),new ConcurrentHashMap<String,HttpCookie>());            mCookieMap.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String publicId;  String systemId;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root","PUB","SYS");  publicId=docType.getPublicId();  systemId=docType.getSystemId();  assertEquals("documenttypepublicid01","PUB",publicId);  assertEquals("documenttypesystemid01","SYS",systemId);}  }
class C{  static public List<Vec> selectIntialPoints(DataSet d,int k,DistanceMetric dm,Random rand,SeedSelection selectionMethod){  return selectIntialPoints(d,k,dm,null,rand,selectionMethod);}  }
class C{  public FDUPropertyEditor(){}  }
class C{  public boolean containsCondition(FallbackCondition condition){  return this.fallbackConditions.contains(condition);}  }
class C{  @Override public void sessionOpened(NextFilter nextFilter,IoSession session) throws Exception {  if (profileSessionOpened) {    long start=timeNow();    nextFilter.sessionOpened(session);    long end=timeNow();    sessionOpenedTimerWorker.addNewDuration(end - start);  } else {    nextFilter.sessionOpened(session);  }}  }
class C{  public void write(OutputStream oStream) throws IOException {  byte[] array=toByteArray();  oStream.write(array);}  }
class C{  private void ensureVlfCapacity(){  int vlfOffsetsCapacity=0;  if (this.vlfOffsets != null) {    vlfOffsetsCapacity=this.vlfOffsets.length;  }  if (this.vlfCount == vlfOffsetsCapacity) {    int[] tmp=new int[vlfOffsetsCapacity + EXPAND_SIZE];    for (int i=0; i < vlfOffsetsCapacity; i++) {      tmp[i]=this.vlfOffsets[i];    }    this.vlfOffsets=tmp;  }}  }
class C{  public File directory(){  return mOutputDir;}  }
class C{  public static int tokenizeCdataSection(char[] buf,int off,int end,Token token) throws EmptyTokenException, PartialTokenException, InvalidTokenException, ExtensibleTokenException {  if (off == end)   throw new EmptyTokenException();switch (charType(buf[off])) {case CT_RSQB:    off+=1;  if (off == end)   throw new PartialTokenException();if (buf[off] != ']') break;off+=1;if (off == end) throw new PartialTokenException();if (buf[off] != '>') {off-=1;break;}token.tokenEnd=off + 1;return TOK_CDATA_SECT_CLOSE;case CT_CR:off+=1;if (off == end) throw new ExtensibleTokenException(TOK_DATA_NEWLINE);if (charType(buf[off]) == CT_LF) off+=1;token.tokenEnd=off;return TOK_DATA_NEWLINE;case CT_LF:token.tokenEnd=off + 1;return TOK_DATA_NEWLINE;case CT_NONXML:case CT_MALFORM:throw new InvalidTokenException(off);case CT_LEAD2:if (end - off < 2) throw new PartialCharException(off);check2(buf,off);off+=2;break;default :off+=1;break;}token.tokenEnd=extendCdata(buf,off,end);return TOK_DATA_CHARS;}  }
class C{  public ConnectionFactory(String[] servers){  this(null,servers);}  }
class C{  public synchronized void clear(){  trace.clear();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("HR_Process_ID"))     p_HR_Process_ID=para[i].getParameterAsInt(); else     if (name.equals("HR_Payroll_ID"))     p_HR_Payroll_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("PaymentRule"))     p_PaymentRule=(String)para[i].getParameter(); else     if (name.equals("HR_Concept_ID"))     p_HR_Concept_ID=para[i].getParameterAsInt(); else     if (name.equals("HR_Department_ID"))     p_HR_Department_ID=para[i].getParameterAsInt(); else     if (name.equals("HR_Job_ID"))     p_HR_Job_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_HR_PaySelection_ID=getRecord_ID();}  }
class C{  public ByteArrayOutputStream(final int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    this.needNewBuffer(size);  }}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException {  return decode(image,null);}  }
class C{  private void handleDocumentAboutToBeChanged(){  IDocument document=fDocument;  if (fCharSequence == null || document == null)   return;  String content=document.get();synchronized (this) {    if (fCharSequence == null)     return;    fCharSequence=content;  }  releaseDocument();}  }
class C{  public static <B>Builder<B> builder(){  return new Builder<B>();}  }
class C{  public void close(){  writer.flush();  writer.close();}  }
class C{  public K max(){  return max;}  }
class C{  @Override public int sumAdjacent(Quadrant quad1,Quadrant quad2,int size){  return 0;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.308 -0500",hash_original_method="F98DCBD8FE8A6074B159B4049EE2DA7B",hash_generated_method="89015D45CAD68D7E33CD395D18D709AD") public int hashCode(){  return 42;}  }
class C{  private Map<URI,Integer> makeNetwork2MaxHostInitiators(Map<URI,Set<Initiator>> net2InitiatorsMap){  Map<URI,Integer> net2MaxHostInitiators=new HashMap<URI,Integer>();  for (  URI net : net2InitiatorsMap.keySet()) {    Map<URI,List<Initiator>> hostInitiatorsMap=makeHostInitiatorsMap(net2InitiatorsMap.get(net));    int max=0;    for (    URI host : hostInitiatorsMap.keySet()) {      int thisHost=hostInitiatorsMap.get(host).size();      max=(thisHost > max) ? thisHost : max;    }    net2MaxHostInitiators.put(net,max);    _log.info(String.format("Network %s max initiators per host %d",net.toString(),max));  }  return net2MaxHostInitiators;}  }
class C{  boolean parametersAreViewableAs(MethodType newType,boolean keepInterfaces){  if (form == newType.form && form.erasedType == this)   return true;  if (ptypes == newType.ptypes)   return true;  int argc=parameterCount();  if (argc != newType.parameterCount())   return false;  for (int i=0; i < argc; i++) {    if (!VerifyType.isNullConversion(newType.parameterType(i),parameterType(i),keepInterfaces))     return false;  }  return true;}  }
class C{  public boolean open(File file){  if (file == null)   return false;  m_file=file;  try {    if (file.getName().endsWith("jar"))     m_zipFile=new JarFile(file,false,JarFile.OPEN_READ); else     m_zipFile=new ZipFile(file,ZipFile.OPEN_READ);  } catch (  IOException ex) {    System.err.println("ZipUtil.open - " + ex);    m_zipFile=null;    return false;  }  return true;}  }
class C{  private Object readElement(InputNode node) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.read(node);}  }
class C{  private void authorMessage(){  Bag people=sim.socialNetwork.getAllNodes();  Bag tmp=new Bag();  if (people.numObjs > 0) {    Person person=(Person)people.objs[sim.random.nextInt(people.numObjs)];    person.addMessageToQueue(trackedMessage);    System.err.println("degree of the author is " + sim.socialNetwork.getEdges(person,tmp).numObjs);  }}  }
class C{  public boolean containsAll(TaxonList taxonList){  for (int i=0; i < taxonList.getTaxonCount(); i++) {    Taxon taxon=taxonList.getTaxon(i);    if (!taxa.contains(taxon)) {      return false;    }  }  return true;}  }
class C{  public void restoreOriginal() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static void assertMainSearcher(SolrIndexSearcher s){  assertTrue("Searcher isn't 'main': " + s.toString(),s.toString().contains(" main{"));  assertTrue("Searcher is non-caching",s.isCachingEnabled());}  }
class C{  public long elapsedTimeMillis(){  if (this.stopTime == 0) {    return System.currentTimeMillis() - this.startTime;  } else {    return this.stopTime - this.startTime;  }}  }
class C{  public IntegerDomainBuilder from(final int startInclusive){  return new IntegerDomainBuilder(startInclusive);}  }
class C{  public void writeProperty(String propertyName,ICalParameters parameters,ICalDataType dataType,JCalValue value) throws IOException {  if (stack.isEmpty()) {    throw new IllegalStateException(Messages.INSTANCE.getExceptionMessage(2));  }  if (componentEnded) {    throw new IllegalStateException(Messages.INSTANCE.getExceptionMessage(3));  }  generator.setCurrentValue(JCalPrettyPrinter.PROPERTY_VALUE);  generator.writeStartArray();  generator.writeString(propertyName);  generator.writeStartObject();  for (  Map.Entry<String,List<String>> entry : parameters) {    String name=entry.getKey().toLowerCase();    List<String> values=entry.getValue();    if (values.isEmpty()) {      continue;    }    if (values.size() == 1) {      generator.writeStringField(name,values.get(0));    } else {      generator.writeArrayFieldStart(name);      for (      String paramValue : values) {        generator.writeString(paramValue);      }      generator.writeEndArray();    }  }  generator.writeEndObject();  generator.writeString((dataType == null) ? "unknown" : dataType.getName().toLowerCase());  for (  JsonValue jsonValue : value.getValues()) {    writeValue(jsonValue);  }  generator.writeEndArray();  generator.setCurrentValue(null);}  }
class C{  public String reducedErrorPruningTipText(){  return "Whether reduced-error pruning is used instead of C.4.5 pruning.";}  }
class C{  public void addAttributes(Attributes atts) throws SAXException {  int nAtts=atts.getLength();  for (int i=0; i < nAtts; i++) {    String uri=atts.getURI(i);    if (null == uri)     uri="";    addAttributeAlways(uri,atts.getLocalName(i),atts.getQName(i),atts.getType(i),atts.getValue(i),false);  }}  }
class C{  public JavascriptRuntime(PluginContext context,String defaultDataSourceName){  this.context=context;  this.defaultDataSourceName=defaultDataSourceName;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  private static void optimizeStep(final Traversal.Admin traversal,final Step step){  final Step newStep;  if (step instanceof VertexStep) {    final VertexStep vs=(VertexStep)step;    newStep=new VertexStep<>(traversal,Edge.class,vs.getDirection(),vs.getEdgeLabels());  } else   if (step instanceof PropertiesStep) {    final PropertiesStep ps=(PropertiesStep)step;    newStep=new PropertiesStep(traversal,PropertyType.PROPERTY,ps.getPropertyKeys());  } else {    return;  }  TraversalHelper.replaceStep(step,newStep,traversal);}  }
class C{  @Override public void endDocument() throws SAXException {  try {    writer.write('\n');  } catch (  IOException e) {    throw (SAXException)new SAXException(e).initCause(e);  }}  }
class C{  public boolean isSetAuthenticationInfo(){  return this.authenticationInfo != null;}  }
class C{  public static StateListDrawable createStateListDrawable(Context context,int idNormal,int idPressed,int idFocused,int idUnable){  StateListDrawable bg=new StateListDrawable();  Drawable normal=idNormal == -1 ? null : context.getResources().getDrawable(idNormal);  Drawable pressed=idPressed == -1 ? null : context.getResources().getDrawable(idPressed);  Drawable focused=idFocused == -1 ? null : context.getResources().getDrawable(idFocused);  Drawable unable=idUnable == -1 ? null : context.getResources().getDrawable(idUnable);  bg.addState(new int[]{android.R.attr.state_pressed,android.R.attr.state_enabled},pressed);  bg.addState(new int[]{android.R.attr.state_enabled,android.R.attr.state_focused},focused);  bg.addState(new int[]{android.R.attr.state_enabled},normal);  bg.addState(new int[]{android.R.attr.state_focused},focused);  bg.addState(new int[]{android.R.attr.state_window_focused},unable);  bg.addState(new int[]{},normal);  return bg;}  }
class C{  public static void addGhoulArmorTextures(Item helmet,Item chestplate,Item leggings,Item boots,String res1,String res2){  addGhoulArmorTextures(helmet,chestplate,leggings,boots,new ResourceLocation(res1),new ResourceLocation(res2));}  }
class C{  FtpURLConnection(URL url,Proxy p){  super(url);  instProxy=p;  host=url.getHost();  port=url.getPort();  String userInfo=url.getUserInfo();  if (userInfo != null) {    int delimiter=userInfo.indexOf(':');    if (delimiter == -1) {      user=ParseUtil.decode(userInfo);      password=null;    } else {      user=ParseUtil.decode(userInfo.substring(0,delimiter++));      password=ParseUtil.decode(userInfo.substring(delimiter));    }  }}  }
class C{  public boolean isTerminated(){synchronized (privateInstanceLock) {    return isTerminated;  }}  }
class C{  @Override public int checkProperties(){  int errorCount=super.checkProperties();  for (  ExecutionUnit subprocess : subprocesses) {    for (    Operator o : subprocess.getOperators()) {      if (o.isEnabled()) {        errorCount+=o.checkProperties();      }    }  }  return errorCount;}  }
class C{  public void close() throws java.io.IOException {  os.close();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static <E extends Comparable<E>>void merge(E[] list1,E[] list2,E[] temp){  int current1=0;  int current2=0;  int current3=0;  while (current1 < list1.length && current2 < list2.length) {    if (list1[current1].compareTo(list2[current2]) < 0)     temp[current3++]=list1[current1++]; else     temp[current3++]=list2[current2++];  }  while (current1 < list1.length)   temp[current3++]=list1[current1++];  while (current2 < list2.length)   temp[current3++]=list2[current2++];}  }
class C{  static MethodHandle makeSpreadArguments(MethodHandle target,Class<?> spreadArgType,int spreadArgPos,int spreadArgCount){  MethodType targetType=target.type();  for (int i=0; i < spreadArgCount; i++) {    Class<?> arg=VerifyType.spreadArgElementType(spreadArgType,i);    if (arg == null)     arg=Object.class;    targetType=targetType.changeParameterType(spreadArgPos + i,arg);  }  target=target.asType(targetType);  MethodType srcType=targetType.replaceParameterTypes(spreadArgPos,spreadArgPos + spreadArgCount,spreadArgType);  MethodType lambdaType=srcType.invokerType();  Name[] names=arguments(spreadArgCount + 2,lambdaType);  int nameCursor=lambdaType.parameterCount();  int[] indexes=new int[targetType.parameterCount()];  for (int i=0, argIndex=1; i < targetType.parameterCount() + 1; i++, argIndex++) {    Class<?> src=lambdaType.parameterType(i);    if (i == spreadArgPos) {      MethodHandle aload=MethodHandles.arrayElementGetter(spreadArgType);      Name array=names[argIndex];      names[nameCursor++]=new Name(Lazy.NF_checkSpreadArgument,array,spreadArgCount);      for (int j=0; j < spreadArgCount; i++, j++) {        indexes[i]=nameCursor;        names[nameCursor++]=new Name(aload,array,j);      }    } else     if (i < indexes.length) {      indexes[i]=argIndex;    }  }  assert (nameCursor == names.length - 1);  Name[] targetArgs=new Name[targetType.parameterCount()];  for (int i=0; i < targetType.parameterCount(); i++) {    int idx=indexes[i];    targetArgs[i]=names[idx];  }  names[names.length - 1]=new Name(target,(Object[])targetArgs);  LambdaForm form=new LambdaForm("spread",lambdaType.parameterCount(),names);  return SimpleMethodHandle.make(srcType,form);}  }
class C{  @Override protected void writeEntityToNBT(NBTTagCompound nbt){  nbt.setByte("Fuse",(byte)this.fuse);  nbt.setInteger("explosiveID",this.explosiveID);  nbt.setTag("data",this.nbtData);}  }
class C{  public void endCompoundEdit(){}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildDeathmatchRecruiter(zone);}  }
class C{  void onUp(){  if (mFlingRunnable.mScroller.isFinished()) {    Log.d(TAG,"onUp-->scrollINtoSlots");    scrollIntoSlots();  }  dispatchUnpress();}  }
class C{  @Override public void beginProcessSubTokens(){  smap=new HashMap<String,ArrayList<String>>(1);  vals=new ArrayList<String>(4);}  }
class C{  public static void downto(float self,Number to,@ClosureParams(FirstParam.class) Closure closure){  float to1=to.floatValue();  if (self >= to1) {    for (float i=self; i >= to1; i--) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");}  }
class C{  @Deprecated public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  public AppEvent(EventType type,Object data,String token){  this(type,data);  this.token=token;  historyEvent=true;}  }
class C{  public static boolean isFile(File f){  boolean isFile=false;  try {    isFile=f.isFile();  } catch (  SecurityException se) {    if (Trace.pathResolver) {      Trace.trace(se.getMessage());    }  }  return isFile;}  }
class C{  public static void w(String tag,String msg,Throwable thr){  log(LEVEL.WARN,tag,msg,thr);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.516 -0500",hash_original_method="73C5F5A1DB2F1724F7BD39D759918D7C",hash_generated_method="B7E384896B37F4E6D4D4D652B8D232A7") public TelURLImpl telURL(boolean inBrackets) throws ParseException {  lexer.match(TokenTypes.TEL);  lexer.match(':');  TelephoneNumber tn=this.parseTelephoneNumber(inBrackets);  TelURLImpl telUrl=new TelURLImpl();  telUrl.setTelephoneNumber(tn);  return telUrl;}  }
class C{  private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  mOpsInstance=opsType.newInstance();  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);  mOpsInstance.onConfiguration(instance,true);}  }
class C{  public EaseIn(){}  }
class C{  public Builder jsonData(String data){  return jsonData(toBytes(data));}  }
class C{  public static void initSizeData(Activity activity){  DisplayMetrics metrics=new DisplayMetrics();  activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);  DISPLAY_WIDTH=metrics.widthPixels;  DISPLAY_HEIGHT=metrics.heightPixels;}  }
class C{  public void testEdgeCase(){  final int bits=3;  final int size=1 << bits;  final LongIndex ix0=new LongChunks(size - 1,bits);  ix0.integrity();  final LongIndex ix1=new LongChunks(size,bits);  ix1.integrity();  final LongIndex ix2=new LongChunks(size + 1,bits);  ix2.integrity();}  }
class C{  public double[] coefficients(){  return new double[]{m00,m01,m02,m03,m10,m11,m12,m13,m20,m21,m22,m23};}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor){  callChildVisitors(visitor,true);}  }
class C{  public String findKey(String key){  HeaderCard card=findCard(key);  if (card == null) {    return null;  } else {    return card.toString();  }}  }
class C{  private void authorizeModelResources(final WroModel model){  if (model != null && context.getConfig().isDebug()) {    if (authorizationManager instanceof MutableResourceAuthorizationManager) {      for (      final Resource resource : new WroModelInspector(model).getAllUniqueResources()) {        ((MutableResourceAuthorizationManager)authorizationManager).add(resource.getUri());      }    }  }}  }
class C{  protected boolean assertChildIndex(final int index){  if (index < 0 || index > getKeys().size())   throw new IndexOutOfBoundsException();  return true;}  }
class C{  public final double sampleMax(){  long max=_timeMax.getAndSet(0);  return _scale * max;}  }
class C{  public String printInput(Vertex input){  Vertex sentence=input.getRelationship(Primitive.INPUT);  if (sentence != null) {    return sentence.printString();  }  return "";}  }
class C{  public static synchronized void addCachedDatabaseConfigs(Collection<DatabaseTableConfig<?>> configs){  Map<Class<?>,DatabaseTableConfig<?>> newMap;  if (configMap == null) {    newMap=new HashMap<Class<?>,DatabaseTableConfig<?>>();  } else {    newMap=new HashMap<Class<?>,DatabaseTableConfig<?>>(configMap);  }  for (  DatabaseTableConfig<?> config : configs) {    newMap.put(config.getDataClass(),config);    logger.info("Loaded configuration for {}",config.getDataClass());  }  configMap=newMap;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildnodeancestor.class,args);}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  public int length(){  return this.map.size();}  }
class C{  @Override public int compare(CarbonFile o1,CarbonFile o2){  String firstFileName=o1.getName();  String secondFileName=o2.getName();  int lastIndexOfO1=firstFileName.lastIndexOf('_');  int lastIndexOfO2=secondFileName.lastIndexOf('_');  int file1=0;  int file2=0;  try {    file1=Integer.parseInt(firstFileName.substring(lastIndexOfO1 + 1));    file2=Integer.parseInt(secondFileName.substring(lastIndexOfO2 + 1));  } catch (  NumberFormatException e) {    return -1;  }  return (file1 < file2) ? -1 : (file1 == file2 ? 0 : 1);}  }
class C{  public static String normalizeNonPositiveInteger(String value){  return normalizeIntegerValue(value,null,"0");}  }
class C{  public static void enableLogging(String tag){  ANLog.enableLogging();  ANLog.setTag(tag);}  }
class C{  public void removeIndex(String name){  impl.removeIndex(name);}  }
class C{  public static boolean isWhite(int pType){  return pType < BKING;}  }
class C{  public String replace(final StrBuilder source){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(source.length()).append(source);  substitute(buf,0,buf.length());  return buf.toString();}  }
class C{  public mxGeometry(){  this(0,0,0,0);}  }
class C{  public ReilCreationThread(final INaviModule module,final INaviView view){  m_module=module;  m_view=view;}  }
class C{  public boolean isAltitudeRequired(){  return mAltitudeRequired;}  }
class C{  public void afterUpdate(EntryEvent oevt){  fail("Unexpected listener callback: afterUpdate");}  }
class C{  @Deprecated public void updateTag(Tag tag,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"updateTag",mAuthenticationToken,tag);}  }
class C{  public final boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (sock.getClass() != Socket.class) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return false;}  }
class C{  public void loadPropertiesFile(String propertiesPath,boolean silent){  properties=new java.util.Properties();  try {    InputStream in=null;    File propertiesFile=new File(propertiesPath);    if (propertiesFile.exists()) {      in=new FileInputStream(propertiesPath);      properties.load(in);      if (!silent)       LoggingUtils.getEvoLogger().info("* Properties loaded from " + propertiesFile.getAbsolutePath());    } else {      propertiesPath="evosuite.properties";      in=this.getClass().getClassLoader().getResourceAsStream(propertiesPath);      if (in != null) {        properties.load(in);        if (!silent)         LoggingUtils.getEvoLogger().info("* Properties loaded from " + this.getClass().getClassLoader().getResource(propertiesPath).getPath());      }    }  } catch (  FileNotFoundException e) {    logger.warn("- Error: Could not find configuration file " + propertiesPath);  }catch (  IOException e) {    logger.warn("- Error: Could not find configuration file " + propertiesPath);  }catch (  Exception e) {    logger.warn("- Error: Could not find configuration file " + propertiesPath);  }}  }
class C{  static void errorInvalidInput(String systemID,int lineNr,String unexpectedString) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Invalid input: " + unexpectedString);}  }
class C{  public long skip(long n) throws IOException {  return in.skip(n);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numUpslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numUpslopeNeighbours=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 > z) {              numUpslopeNeighbours++;            }          }          output.setValue(row,col,numUpslopeNeighbours);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static int sgn(double x){  if (x > 0.0)   return 1; else   if (x < 0.0)   return -1; else   return 0;}  }
class C{  public ScoreStats(final Population population,final String filename,final boolean createPNG) throws UncheckedIOException {  this.population=population;  this.fileName=filename;  this.createPNG=createPNG;}  }
class C{  public String minVariancePropTipText(){  return "The minimum proportion of the variance on all the data " + "that needs to be present at a node in order for splitting to " + "be performed in regression trees.";}  }
class C{  private void createVPlexBackendExportMasksForVolumes(StorageSystem vplex,StorageSystem array,URI varrayURI,ExportMaskPlacementDescriptor placementDescriptor,Set<URI> invalidMasks,Map<URI,Volume> volumes,String stepId) throws VPlexApiException {  Map<URI,ExportMask> maskSet=placementDescriptor.getMasks();  if (!invalidMasks.isEmpty()) {    _log.info(String.format("Found %d existing export masks, but all failed validation",invalidMasks.size()));  } else {    _log.info("Did not find any existing export masks");  }  _log.info("Attempting to generate ExportMasks...");  Map<ExportMask,ExportGroup> generatedMasks=generateExportMasks(varrayURI,vplex,array,stepId);  if (generatedMasks.isEmpty()) {    _log.info("Unable to generate any ExportMasks");    throw VPlexApiException.exceptions.couldNotGenerateArrayExportMask(vplex.getNativeGuid(),array.getNativeGuid(),_cluster);  }  for (  ExportMask mask : generatedMasks.keySet()) {    validateMaskAndPlaceVolumes(array,varrayURI,maskSet,invalidMasks,mask,placementDescriptor,volumes,String.format("Validating generated ViPR Export Mask %s (%s)",mask.getMaskName(),mask.getId()));  }  if (maskSet.isEmpty()) {    _log.info("Unable to find or create any suitable ExportMasks");    throw VPlexApiException.exceptions.couldNotFindValidArrayExportMask(vplex.getNativeGuid(),array.getNativeGuid(),_cluster);  }}  }
class C{  public static void stashDisableAssertionArg(String arg){  if (arg == null || arg.equals("")) {    assertionsEnabled=false;  } else {    disabledAssertionStrings=arg.split(":");  }}  }
class C{  public void append(StringBuffer buffer,String fieldName,float value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  @Deprecated private static NaviNode searchNode(final List<NaviNode> nodes,final INaviViewNode node){  for (  final NaviNode n : nodes) {    if (n.getRawNode() == node) {      return n;    }  }  return null;}  }
class C{  public boolean isBoundMappedToLastCycle(){  return this.boundMappedToLastCycle;}  }
class C{  public long lastExchangeTime(){  return lastExchangeTime;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean initializeOutputTest(){  for (int i=0; i < nOutBytes; i++) {    outBytes[i]=0;  }  if (obsDelay < 400) {    obsDelay=400;  }  curOutByte=begOutByte;  curOutBit=0;  _memo.getTrafficController().sendSerialMessage((SerialMessage)node.createInitPacket(),curFrame);  try {    wait(1000);  } catch (  Exception e) {  }  numIterations=0;  testRunning=true;  return (true);}  }
class C{  public String toStringInsecure(){  StringBuilder theString=new StringBuilder();  theString.append("[GenericEntity:");  theString.append(getEntityName());  theString.append(']');  for (  String curKey : new TreeSet<String>(fields.keySet())) {    Object curValue=fields.get(curKey);    theString.append('[');    theString.append(curKey);    theString.append(',');    theString.append(curValue);    theString.append('(');    theString.append(curValue != null ? curValue.getClass().getName() : "");    theString.append(')');    theString.append(']');  }  return theString.toString();}  }
class C{  public String searchpopup() throws Exception {  executeQuery();  return POPUP_VIEW;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  private void calcRandomOffset(int maxRandomOffset){  if (maxRandomOffset != 0) {    randomOffset=new Random().nextInt(maxRandomOffset + 1) * 1000L;  }}  }
class C{  public void removeUserNoUpdate(User user){synchronized (users) {    users.remove(user);  }}  }
class C{  @KnownFailure("Fixed in DonutBurger, boundary checks missing") public void test_wrap_02() throws SSLException {  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,-1,3,bb);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.wrap(bbA,0,-3,bb);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.wrap(bbA,bbA.length + 1,bbA.length,bb);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.wrap(bbA,0,bbA.length + 1,bb);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }}  }
class C{  public void run(){  Iterable<String> opts;  opts=getOptions(processors,classpath);  JavacTool tool=JavacTool.create();  JavacFileManager manager=null;  Iterable<? extends JavaFileObject> fileObjs=manager.getJavaFileObjectsFromStrings(fileNames);  CheckerPlugin.getDefault();  MessageConsole console=CheckerPlugin.findConsole();  MessageConsoleStream stream=console.newMessageStream();  Writer writer=new OutputStreamWriter(stream);  JavacTask task=tool.getTask(writer,manager,collector,opts,null,fileObjs);  task.call();  manager.close();}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){  if (mRemoveEnabled && mIsRemoving) {    mPositionX=position.x;  }}  }
class C{  public FilterClient(Client in){  super(in.settings(),in.threadPool(),in.headers());  this.in=in;}  }
class C{  private int updateForecast(){  List<Object> parameters=new ArrayList<Object>();  StringBuilder update=new StringBuilder();  update.append("UPDATE ").append(MForecastLine.Table_Name);  update.append(" SET ");  update.append(" QtyCalculated = NVL(M_ForecastLine.QtyCalculated,0) + NVL(frr.QtyCalculated,0),");  update.append(" Qty =  NVL(M_ForecastLine.Qty,0) + NVL(frr.QtyPlan,0) + NVL(frr.QtyAbnormal,0)");  update.append(" FROM PP_ForecastRunMaster frm ");  update.append(" INNER JOIN PP_ForecastRunResult frr ON (frr.PP_ForecastRunMaster_ID=frm.PP_ForecastRunMaster_ID) ");  update.append(" INNER JOIN PP_Period fp ON (fp.PP_Period_ID=frr.PP_Period_ID) ");  update.append(" INNER JOIN M_Product p ON (p.M_Product_ID=frm.M_Product_ID) ");  update.append(" INNER JOIN M_Product_Category pc ON (pc.M_Product_Category_ID=p.M_Product_Category_ID)");  update.append(" LEFT  JOIN M_Product_Classification pcl ON (pcl.value=p.Classification) ");  update.append(" LEFT  JOIN M_Product_Class pclass ON (pclass.value=p.Group1) ");  update.append(" LEFT  JOIN M_Product_Group pg ON (p.value=p.Group2) ");  StringBuilder whereClause=new StringBuilder(" WHERE M_ForecastLine.M_Forecast_ID=?  AND ");  whereClause.append(" M_ForecastLine.M_Product_ID = frm.M_Product_ID AND ");  whereClause.append(" M_ForecastLine.M_Warehouse_ID=frm.M_Warehouse_ID AND ");  whereClause.append(" M_ForecastLine.PP_Period_ID=frr.PP_Period_ID AND ");  parameters.add(p_M_Forecast_ID);  update.append(getWhere(whereClause.toString(),parameters));  return DB.executeUpdateEx(update.toString(),parameters.toArray(),get_TrxName());}  }
class C{  public LineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);  pointsChart=new ScatterChart(dataset,renderer);}  }
class C{  @ParamsNoField public OutputStream outStream(String name) throws IOException {  return mOutputParams.outStream(name);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public StandardPieSectionLabelGenerator(Locale locale){  this(DEFAULT_SECTION_LABEL_FORMAT,locale);}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState != null) {    if (patchState.taskState.stage != startState.taskState.stage) {      ServiceUtils.logInfo(this,"Moving to stage %s",patchState.taskState.stage);    }    startState.taskState=patchState.taskState;  }  return startState;}  }
class C{  public final void init(KeyStore ks) throws KeyStoreException {  spiImpl.engineInit(ks);}  }
class C{  @Override public void resized(final InternalDecorator source){  if (!source.isShowing()) {    return;  }  final WindowInfoImpl info=getInfo(source.getToolWindow().getId());  InternalDecorator another=null;  if (info.isFloating()) {    final Window owner=SwingUtilities.getWindowAncestor(source);    if (owner != null) {      info.setFloatingBounds(owner.getBounds());    }  } else {    ToolWindowAnchor anchor=info.getAnchor();    if (source.getParent() instanceof Splitter) {      float sizeInSplit=anchor.isSplitVertically() ? source.getHeight() : source.getWidth();      Splitter splitter=(Splitter)source.getParent();      if (splitter.getSecondComponent() == source) {        sizeInSplit+=splitter.getDividerWidth();        another=(InternalDecorator)splitter.getFirstComponent();      } else {        another=(InternalDecorator)splitter.getSecondComponent();      }      if (anchor.isSplitVertically()) {        info.setSideWeight(sizeInSplit / (float)splitter.getHeight());      } else {        info.setSideWeight(sizeInSplit / (float)splitter.getWidth());      }    }    float paneWeight=anchor.isHorizontal() ? (float)source.getHeight() / (float)myToolWindowsPane.getMyLayeredPane().getHeight() : (float)source.getWidth() / (float)myToolWindowsPane.getMyLayeredPane().getWidth();    info.setWeight(paneWeight);    if (another != null && anchor.isSplitVertically()) {      paneWeight=anchor.isHorizontal() ? (float)another.getHeight() / (float)myToolWindowsPane.getMyLayeredPane().getHeight() : (float)another.getWidth() / (float)myToolWindowsPane.getMyLayeredPane().getWidth();      another.getWindowInfo().setWeight(paneWeight);    }  }}  }
class C{  public void addAllTagsOf(Host h){  for (Iterator<Tag> tIt=h.getTags().iterator(); tIt.hasNext(); ) {    final Tag t=tIt.next();    addTag(t);  }}  }
class C{  private final void replyErrors(final String errorMessage,final String stackTrace,final String statusCode,final int statusCodeInt){  reply(true,errorMessage,stackTrace,statusCode,statusCodeInt,PcConstants.NA,null);}  }
class C{  public void logVelocityMessage(int level,String message){synchronized (this) {    Object[] data=new Object[2];    data[0]=new Integer(level);    data[1]=message;    pendingMessages.addElement(data);  }}  }
class C{  public static ObjectNotFoundException convertToApi(org.oscm.internal.types.exception.ObjectNotFoundException oldEx){  org.oscm.internal.types.exception.beans.DomainObjectExceptionBean bean=(org.oscm.internal.types.exception.beans.DomainObjectExceptionBean)getFaultInfo(oldEx);  DomainObjectExceptionBean v13Bean=convertBeanToApi(bean,DomainObjectExceptionBean.class);  if (bean != null) {    DomainObjectException.ClassEnum v13ClassEnum=EnumConverter.convert(bean.getClassEnum(),DomainObjectException.ClassEnum.class);    v13Bean.setClassEnum(v13ClassEnum);  }  return newApiException(ObjectNotFoundException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void sendStageProgressPatch(State current,TaskState.TaskStage stage){  if (current.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping patch operation processing (disabled)");    return;  }  this.sendSelfPatch(buildPatch(stage,null,null));}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public T caseInterfaceScope(InterfaceScope object){  return null;}  }
class C{  public void addTileEntity(BlockPos pos,TileEntity tileEntity){  tileEntity.setWorldObj((World)this.world);  tileEntity.setPos(pos);  IBlockState blockState=this.getBlockState(pos);  if (blockState.getBlock().hasTileEntity(blockState)) {    TileEntity oldBlockEntity=this.tileEntityMap.get(pos);    if (oldBlockEntity != null) {      oldBlockEntity.invalidate();    }    tileEntity.validate();    this.tileEntityMap.put(pos,tileEntity);    this.isModified=true;    tileEntity.onLoad();  }}  }
class C{  public void deleteTopic(String topic){  ZkClient zkClient=new ZkClient(zkConnection);  ZkUtils zkUtils=new ZkUtils(zkClient,zkConnection,false);  zkClient.setZkSerializer(new ZKStringSerializer());  AdminUtils.deleteTopic(zkUtils,topic);  zkClient.close();}  }
class C{  public void endPlayback(){  mMediaPlayer.reset();  mAudioManager.abandonAudioFocus(mAudioFocusChangeListener);}  }
class C{  @Override final public boolean isFull(){  return true;}  }
class C{  public static long sizeOf(Object obj){  return new Instruments().internalSizeOf(obj);}  }
class C{  public TransactionWrapper(Transaction t,int channelId,int id){  this.hash=t.getHashAsString();  this.channelId=channelId;  this.data=t.bitcoinSerialize();  this.id=id;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_OPTIONS_1__TRACE_OPTION_1:    getTraceOption_1().clear();  getTraceOption_1().addAll((Collection<? extends TraceOption_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String validate(Player player,RPAction action){  return validate(player,action,null);}  }
class C{  public Tasks<BlockSnapshotRestRep> createForVolume(URI volumeId,VolumeSnapshotParam input){  return postTasks(input,getByVolumeUrl(),volumeId);}  }
class C{  protected PrivateKey engineGeneratePrivate(KeySpec keySpec) throws InvalidKeySpecException {  try {    if (keySpec instanceof DHPrivateKeySpec) {      DHPrivateKeySpec dhPrivKeySpec=(DHPrivateKeySpec)keySpec;      return new DHPrivateKey(dhPrivKeySpec.getX(),dhPrivKeySpec.getP(),dhPrivKeySpec.getG());    } else     if (keySpec instanceof PKCS8EncodedKeySpec) {      return new DHPrivateKey(((PKCS8EncodedKeySpec)keySpec).getEncoded());    } else {      throw new InvalidKeySpecException("Inappropriate key specification");    }  } catch (  InvalidKeyException e) {    throw new InvalidKeySpecException("Inappropriate key specification",e);  }}  }
class C{  public static <C>int compareImplementationDistance(final Class<? extends C> clazz,final VirtualMethod<C> m1,final VirtualMethod<C> m2){  return Integer.valueOf(m1.getImplementationDistance(clazz)).compareTo(m2.getImplementationDistance(clazz));}  }
class C{  public void removeListener(EnvLoaderListener listener){  ArrayList<EnvLoaderListener> listeners=_listeners;  if (listeners == null)   return;synchronized (listeners) {    for (int i=listeners.size() - 1; i >= 0; i--) {      EnvLoaderListener oldListener=listeners.get(i);      if (listener == oldListener) {        listeners.remove(i);        return;      } else       if (oldListener == null)       listeners.remove(i);    }  }}  }
class C{  private boolean containsKey(final byte[] pk){  return this.table.containsKey(pk);}  }
class C{  public static String writeOneBlockToXml(Block toSerialize) throws BlocklySerializerException {  StringWriter sw=new StringWriter();  List<Block> temp=new ArrayList<>();  temp.add(toSerialize);  writeToXml(temp,sw);  String xmlString=sw.toString();  try {    sw.close();    return xmlString;  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  public boolean isDestroyStatements(){  return destroyStatements;}  }
class C{  public byte[] search(String id,String path,ContentServiceSoapBindingStub contentRepository) throws Exception {  Reference reference=new Reference(STORE,id,path);  Content[] readResult=contentRepository.read(new Predicate(new Reference[]{reference},STORE,null),Constants.PROP_CONTENT);  byte[] contentBytes=null;  if (readResult != null) {    Content content=(Content)readResult[0];    contentBytes=UtilsFile.getByteContent(content);  }  return contentBytes;}  }
class C{  public void runInjectorPipeline(PTransform<? super PBegin,PCollection<String>> readSource,String topic,String pubsubTimestampTabelKey){  PubsubFileInjector.Bound injector;  if (Strings.isNullOrEmpty(pubsubTimestampTabelKey)) {    injector=PubsubFileInjector.publish(topic);  } else {    injector=PubsubFileInjector.withTimestampLabelKey(pubsubTimestampTabelKey).publish(topic);  }  DataflowPipelineOptions copiedOptions=options.cloneAs(DataflowPipelineOptions.class);  if (options.getServiceAccountName() != null) {    copiedOptions.setServiceAccountName(options.getServiceAccountName());  }  if (options.getServiceAccountKeyfile() != null) {    copiedOptions.setServiceAccountKeyfile(options.getServiceAccountKeyfile());  }  copiedOptions.setStreaming(false);  copiedOptions.setWorkerHarnessContainerImage(DataflowPipelineRunner.BATCH_WORKER_HARNESS_CONTAINER_IMAGE);  copiedOptions.setNumWorkers(options.as(DataflowExampleOptions.class).getInjectorNumWorkers());  copiedOptions.setJobName(options.getJobName() + "-injector");  Pipeline injectorPipeline=Pipeline.create(copiedOptions);  injectorPipeline.apply(readSource).apply(IntraBundleParallelization.of(injector).withMaxParallelism(20));  PipelineResult result=injectorPipeline.run();  if (result instanceof DataflowPipelineJob) {    jobsToCancel.add(((DataflowPipelineJob)result));  }}  }
class C{  public final void remove(AnAction action){  if (!mySortedChildren.remove(action)) {    for (int i=0; i < myPairs.size(); i++) {      Pair<AnAction,Constraints> pair=myPairs.get(i);      if (pair.first.equals(action)) {        myPairs.remove(i);        break;      }    }  }}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  private ArrayDBIDs updateKNNsAfterDeletion(DBIDs ids){  SetDBIDs idsSet=DBIDUtil.ensureSet(ids);  ArrayModifiableDBIDs rkNN_ids=DBIDUtil.newArray();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    KNNList kNNs=storage.get(iditer);    for (DBIDIter it=kNNs.iter(); it.valid(); it.advance()) {      if (idsSet.contains(it)) {        rkNN_ids.add(iditer);        break;      }    }  }  List<? extends KNNList> kNNList=knnQuery.getKNNForBulkDBIDs(rkNN_ids,k);  DBIDIter iter=rkNN_ids.iter();  for (int i=0; i < rkNN_ids.size(); i++, iter.advance()) {    storage.put(iter,kNNList.get(i));  }  return rkNN_ids;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static double nextRandom(double k,double theta,Random random){  final double q1=0.0416666664, q2=0.0208333723, q3=0.0079849875;  final double q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332;  final double q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320;  final double a1=0.333333333, a2=-0.249999949, a3=0.199999867;  final double a4=-0.166677482, a5=0.142873973, a6=-0.124385581;  final double a7=0.110368310, a8=-0.112750886, a9=0.104089866;  final double e1=1.000000000, e2=0.499999994, e3=0.166666848;  final double e4=0.041664508, e5=0.008345522, e6=0.001353826;  final double e7=0.000247453;  if (k < 1.0) {    final double b=1.0 + 0.36788794412 * k;    while (true) {      final double p=b * random.nextDouble();      if (p <= 1.0) {        final double gds=Math.exp(Math.log(p) / k);        if (Math.log(random.nextDouble()) <= -gds) {          return (gds / theta);        }      } else {        final double gds=-Math.log((b - p) / k);        if (Math.log(random.nextDouble()) <= ((k - 1.0) * Math.log(gds))) {          return (gds / theta);        }      }    }  } else {    final double ss, s, d;    if (k != -1.0) {      ss=k - 0.5;      s=Math.sqrt(ss);      d=5.656854249 - 12.0 * s;    } else {      ss=0.0;      s=0.0;      d=0.0;    }    final double v1, v12;{      double tv1, tv2, tv12;      do {        tv1=2.0 * random.nextDouble() - 1.0;        tv2=2.0 * random.nextDouble() - 1.0;        tv12=tv1 * tv1 + tv2 * tv2;      } while (tv12 > 1.0);      v1=tv1;      v12=tv12;    }    final double b, c, si, q0;{      final double t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12);      final double x=s + 0.5 * t;      final double gds=x * x;      if (t >= 0.0) {        return (gds / theta);      }      final double un=random.nextDouble();      if (d * un <= t * t * t) {        return (gds / theta);      }      if (k != -1.0) {        final double r=1.0 / k;        q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;        if (k > 3.686) {          if (k > 13.022) {            b=1.77;            si=0.75;            c=0.1515 / s;          } else {            b=1.654 + 0.0076 * ss;            si=1.68 / s + 0.275;            c=0.062 / s + 0.024;          }        } else {          b=0.463 + s - 0.178 * ss;          si=1.235;          c=0.195 / s - 0.079 + 0.016 * s;        }      } else {        b=0.0;        c=0.0;        si=0.0;        q0=0.0;      }      if (x > 0.0) {        final double v=t / (s + s);        final double q;        if (Math.abs(v) > 0.25) {          q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);        } else {          q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;        }        if (Math.log(1.0 - un) <= q) {          return (gds / theta);        }      }    }    while (true) {      double e, u, sign_u, t;      do {        e=-Math.log(random.nextDouble());        u=random.nextDouble();        u=u + u - 1.0;        sign_u=(u > 0) ? 1.0 : -1.0;        t=b + (e * si) * sign_u;      } while (t <= -0.71874483771719);      final double v=t / (s + s);      final double q;      if (Math.abs(v) > 0.25) {        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);      } else {        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;      }      if (q <= 0.0) {        continue;      }      final double w;      if (q > 0.5) {        w=Math.exp(q) - 1.0;      } else {        w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q;      }      if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {        final double x=s + 0.5 * t;        return (x * x / theta);      }    }  }}  }
class C{  @Override public void layoutContainer(final Container parent){  withAllVisibleDo(parent,new ComponentOperation.InlineLayout(parent,myDefaultHeight,SizeProperty.PREFERED_SIZE,Orientation.VERTICAL));}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_security_IdentityScope(){  String nameNull=null;  String[] str={"test","","!@#$%^&*()","identity name"};  IdentityScope is;  IdentityScope iss=new IdentityScopeSubclass("test scope");  for (int i=0; i < str.length; i++) {    try {      is=new IdentityScopeSubclass(str[i],new IdentityScopeSubclass());      assertNotNull(is);      assertTrue(is instanceof IdentityScope);    } catch (    Exception e) {      fail("Unexpected exception for parameter " + str[i]);    }  }  try {    is=new IdentityScopeSubclass(nameNull,new IdentityScopeSubclass());  } catch (  NullPointerException npe) {  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    is=new IdentityScopeSubclass("test",iss);    is=new IdentityScopeSubclass("test",iss);    fail("KeyManagementException was not thrown");  } catch (  KeyManagementException npe) {  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown instead of KeyManagementException");  }}  }
class C{  @Override public double calculateAnomalyScore(double value){  double zScore=(value - mean) / Math.sqrt(variance);  return Math.abs(zScore);}  }
class C{  public boolean isPropertyAllowed(Name name){  return propertiesAllowed.contains(name);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public void end(){  ps.println("\t}");  ps.println("}");  ps.close();  j2DClient.get().addEventLine(new StandardEventLine("Stopping recoding to " + filename));}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (resourceBundleName != null) {    try {      rb=ResourceBundle.getBundle(resourceBundleName);    } catch (    MissingResourceException e) {      rb=null;    }  }}  }
class C{  public static void scale(Bitmap src,Bitmap dest,int clearColor){  scale(src,dest,clearColor,0,0,src.getWidth(),src.getHeight(),0,0,dest.getWidth(),dest.getHeight());}  }
class C{  private static void updateUserRoles(PlatformUser platformUser,VOUser voUser){  for (  RoleAssignment roleAssignment : platformUser.getAssignedRoles()) {    voUser.addUserRole(roleAssignment.getRole().getRoleName());  }}  }
class C{  public void warn(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  errHandler.warning(new TransformerException(formattedMsg,(SAXSourceLocator)xctxt.getSAXLocator()));}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  public final static byte[] decode(String str){  int sLen=str != null ? str.length() : 0;  if (sLen == 0)   return new byte[0];  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[str.charAt(i)] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[str.charAt(--i)] <= 0; )   if (str.charAt(i) == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[str.charAt(s++)];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();  if (Constants.ELEMNAME_SORT == type) {    setSortElem((ElemSort)newChild);    return newChild;  } else   return super.appendChild(newChild);}  }
class C{  public CopyOnWriteTextStore(TextStore modifiableTextStore){  Assert.isNotNull(modifiableTextStore);  fTextStore=new StringTextStore();  fModifiableTextStore=modifiableTextStore;}  }
class C{  public Device(Device device,Entity newEntity,int insertionpoint){  this.deviceManager=device.deviceManager;  this.deviceKey=device.deviceKey;  this.dhcpClientName=device.dhcpClientName;  if (insertionpoint < 0) {    insertionpoint=-(Arrays.binarySearch(device.entities,newEntity) + 1);  }  if (insertionpoint < 0) {    log.warn("Performing a replacement upon new entity add in Device. Should the entity have been removed first?");    this.entities=new Entity[device.entities.length];    int replacementpoint=-insertionpoint - 1;    System.arraycopy(device.entities,0,this.entities,0,replacementpoint);    this.entities[replacementpoint]=newEntity;    System.arraycopy(device.entities,replacementpoint + 1,this.entities,replacementpoint + 1,device.entities.length - (replacementpoint + 1));  } else {    this.entities=new Entity[device.entities.length + 1];    if (insertionpoint > 0) {      System.arraycopy(device.entities,0,this.entities,0,insertionpoint);    }    if (insertionpoint < device.entities.length) {      System.arraycopy(device.entities,insertionpoint,this.entities,insertionpoint + 1,device.entities.length - insertionpoint);    }    this.entities[insertionpoint]=newEntity;  }  this.oldAPs=null;  if (device.oldAPs != null) {    this.oldAPs=new ArrayList<AttachmentPoint>(device.oldAPs);  }  this.attachmentPoints=null;  if (device.attachmentPoints != null) {    this.attachmentPoints=new ArrayList<AttachmentPoint>(device.attachmentPoints);  }  this.macAddressString=this.entities[0].getMacAddress().toString();  this.entityClass=device.entityClass;  vlanIds=computeVlandIds();}  }
class C{  public boolean containsVirtualPoolResource(String virtualPoolId){  for (  RelatedResourceRep vpoolListResource : getVirtualPool()) {    URI vpoolListResourceId=vpoolListResource.getId();    if ((vpoolListResourceId != null) && (vpoolListResourceId.toString().equals(virtualPoolId))) {      return true;    }  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ExtendedBufferedReader(Reader r){  super(r);}  }
class C{  public static IntStream sampleWithoutReplacement(int origin,int boundExclusive,int numSamples){  int[] range=IntStream.range(origin,boundExclusive).toArray();  Random r=new Random();  for (int i=range.length - 1; i > 0; --i) {    int j=r.nextInt(i + 1);    int tmp=range[i];    range[i]=range[j];    range[j]=tmp;  }  return StreamSupport.intStream(Arrays.spliterator(range,0,numSamples),false);}  }
class C{  public SimpleLocalDefs(UnitGraph g){  if (Options.v().time())   Timers.v().defsTimer.start();  if (Options.v().verbose())   G.v().out.println("[" + g.getBody().getMethod().getName() + "]     Constructing SimpleLocalDefs...");  LocalDefsFlowAnalysis analysis=new LocalDefsFlowAnalysis(g);  if (Options.v().time())   Timers.v().defsPostTimer.start();{    Iterator unitIt=g.iterator();    localUnitPairToDefs=new HashMap<LocalUnitPair,List>(g.size() * 2 + 1,0.7f);    while (unitIt.hasNext()) {      Unit s=(Unit)unitIt.next();      Iterator boxIt=s.getUseBoxes().iterator();      while (boxIt.hasNext()) {        ValueBox box=(ValueBox)boxIt.next();        if (box.getValue() instanceof Local) {          Local l=(Local)box.getValue();          LocalUnitPair pair=new LocalUnitPair(l,s);          if (!localUnitPairToDefs.containsKey(pair)) {            IntPair intPair=analysis.localToIntPair.get(l);            ArrayPackedSet value=(ArrayPackedSet)analysis.getFlowBefore(s);            List unitLocalDefs=value.toList(intPair.op1,intPair.op2);            localUnitPairToDefs.put(pair,Collections.unmodifiableList(unitLocalDefs));          }        }      }    }  }  if (Options.v().time())   Timers.v().defsPostTimer.end();  if (Options.v().time())   Timers.v().defsTimer.end();  if (Options.v().verbose())   G.v().out.println("[" + g.getBody().getMethod().getName() + "]     SimpleLocalDefs finished.");}  }
class C{  public long add(long instant,int months){  if (months == 0) {    return instant;  }  long timePart=iChronology.getMillisOfDay(instant);  int thisYear=iChronology.getYear(instant);  int thisMonth=iChronology.getMonthOfYear(instant,thisYear);  int yearToUse;  int monthToUse=thisMonth - 1 + months;  if (monthToUse >= 0) {    yearToUse=thisYear + (monthToUse / iMax);    monthToUse=(monthToUse % iMax) + 1;  } else {    yearToUse=thisYear + (monthToUse / iMax) - 1;    monthToUse=Math.abs(monthToUse);    int remMonthToUse=monthToUse % iMax;    if (remMonthToUse == 0) {      remMonthToUse=iMax;    }    monthToUse=iMax - remMonthToUse + 1;    if (monthToUse == 1) {      yearToUse+=1;    }  }  int dayToUse=iChronology.getDayOfMonth(instant,thisYear,thisMonth);  int maxDay=iChronology.getDaysInYearMonth(yearToUse,monthToUse);  if (dayToUse > maxDay) {    dayToUse=maxDay;  }  long datePart=iChronology.getYearMonthDayMillis(yearToUse,monthToUse,dayToUse);  return datePart + timePart;}  }
class C{  public void exit(){  ((Depth)get()).dec();}  }
class C{  @Override public Settings overrideSettings(final Settings settings){  final String nameOfTest=name.getMethodName();switch (nameOfTest) {case "shouldAliasTraversalSourceVariables":case "shouldAliasTraversalSourceVariablesInSession":    try {      final String p=TestHelper.generateTempFileFromResource(GremlinDriverIntegrateTest.class,"generate-shouldRebindTraversalSourceVariables.groovy","").getAbsolutePath();      settings.scriptEngines.get("gremlin-groovy").scripts=Collections.singletonList(p);    } catch (    Exception ex) {      throw new RuntimeException(ex);    }  break;case "shouldWorkOverNioTransport":settings.channelizer=NioChannelizer.class.getName();break;case "shouldFailWithBadClientSideSerialization":final List<String> custom=Arrays.asList(JsonBuilder.class.getName() + ";" + JsonBuilderGryoSerializer.class.getName(),java.awt.Color.class.getName());settings.serializers.stream().filter(null).findFirst().get().config.put("custom",custom);break;case "shouldExecuteScriptInSessionOnTransactionalGraph":case "shouldExecuteSessionlessScriptOnTransactionalGraph":case "shouldExecuteScriptInSessionOnTransactionalWithManualTransactionsGraph":case "shouldExecuteInSessionAndSessionlessWithoutOpeningTransaction":case "shouldManageTransactionsInSession":deleteDirectory(new File("/tmp/neo4j"));settings.graphs.put("graph","conf/neo4j-empty.properties");break;case "shouldRequireAliasedGraphVariablesInStrictTransactionMode":settings.strictTransactionManagement=true;break;case "shouldAliasGraphVariablesInStrictTransactionMode":settings.strictTransactionManagement=true;deleteDirectory(new File("/tmp/neo4j"));settings.graphs.put("graph","conf/neo4j-empty.properties");break;case "shouldProcessSessionRequestsInOrderAfterTimeout":settings.scriptEvaluationTimeout=250;settings.threadPoolWorker=1;break;}return settings;}  }
class C{  protected void scaleNumericPredictions(){  double maxErr;  double minErr;  double err;  int i;  Double errd;  double temp;  maxErr=Double.NEGATIVE_INFINITY;  minErr=Double.POSITIVE_INFINITY;  if (m_Instances.classAttribute().isNominal()) {    maxErr=1;    minErr=0;  } else {    for (i=0; i < m_PlotSizes.size(); i++) {      errd=(Double)m_PlotSizes.get(i);      if (errd != null) {        err=Math.abs(errd.doubleValue());        if (err < minErr) {          minErr=err;        }        if (err > maxErr) {          maxErr=err;        }      }    }  }  for (i=0; i < m_PlotSizes.size(); i++) {    errd=(Double)m_PlotSizes.get(i);    if (errd != null) {      err=Math.abs(errd.doubleValue());      if (maxErr - minErr > 0) {        temp=(((err - minErr) / (maxErr - minErr)) * (m_MaximumPlotSizeNumeric - m_MinimumPlotSizeNumeric + 1));        m_PlotSizes.set(i,new Integer((int)temp) + m_MinimumPlotSizeNumeric);      } else {        m_PlotSizes.set(i,new Integer(m_MinimumPlotSizeNumeric));      }    } else {      m_PlotSizes.set(i,new Integer(m_MinimumPlotSizeNumeric));    }  }}  }
class C{  public static String cutPrefix(String string,String prefix){  if (string.startsWith(prefix)) {    string=string.substring(prefix.length());  }  return string;}  }
class C{  protected void renderStringValue(final UIComponent component,final ResponseWriter writer,final String attributeName,final String matchingValue) throws IOException {  if (component.getAttributes().get(attributeName) != null && matchingValue.equalsIgnoreCase(component.getAttributes().get(attributeName).toString()) && shouldRenderAttribute(component.getAttributes().get(attributeName))) {    writer.writeAttribute(attributeName,matchingValue,attributeName);  }}  }
class C{  @Override protected void prepare(){  if (mDataNotSet)   return;  calcMinMax();  if (mCenterText == null)   mCenterText="Total Value\n" + (int)getYValueSum();  calcFormats();  prepareMatrix();}  }
class C{  public static String unescapeCsv(String str){  if (str == null) {    return null;  }  try {    StringWriter writer=new StringWriter();    unescapeCsv(writer,str);    return writer.toString();  } catch (  IOException ioe) {    throw new UnhandledException(ioe);  }}  }
class C{  public static MouseWheelListener remove(MouseWheelListener l,MouseWheelListener oldl){  return (MouseWheelListener)removeInternal(l,oldl);}  }
class C{  private String discoverDriverClassName(URLClassLoader urlClassLoader) throws IOException {  String className=null;  URL resource=urlClassLoader.findResource("META-INF/services/java.sql.Driver");  if (resource != null) {    BufferedReader br=null;    try {      br=new BufferedReader(new InputStreamReader(resource.openStream()));      className=br.readLine();    }  finally {      if (br != null) {        br.close();      }    }  }  return className;}  }
class C{  public void paintScrollPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public LinkHandle(Figure owner){  super(owner);}  }
class C{  public QueryNodeProcessorPipeline(){}  }
class C{  public ClientResponse logoutToken(String rawToken,String username,boolean force) throws Exception {  WebResource rRoot=createRequest(LOGOUT_TOKEN).queryParam("force",force ? "true" : "false");  if (StringUtils.isNotBlank(username)) {    rRoot=rRoot.queryParam("username",username);  }  log.info("GeoServiceClient logout request: " + rRoot.getURI());  return addSignature(rRoot).header(RequestProcessingUtils.AUTH_TOKEN_HEADER,rawToken).type(MediaType.APPLICATION_XML).post(ClientResponse.class);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void copySetToMap(final Map<String,RawProtein<PIRSFHmmer2RawMatch>> proteinIdToProteinMap,final Set<RawProtein<PIRSFHmmer2RawMatch>> rawProteinSet){  LOGGER.debug("Copy raw proteins to a hash map...");  for (  RawProtein<PIRSFHmmer2RawMatch> rawProtein : rawProteinSet) {    if (SubfamilyPersistenceProcessor.isExpectedMatchSize(rawProtein)) {      proteinIdToProteinMap.put(rawProtein.getProteinIdentifier(),rawProtein);    } else {      LOGGER.warn("Didn't copy raw protein with ID " + rawProtein.getProteinIdentifier() + " into the map!");    }  }}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  if (intent != null) {    handleCommand(intent);  }  return 1;}  }
class C{  public SecretBuilder withMetadata(Map<String,String> metadata){  this.metadata=checkNotNull(metadata);  return this;}  }
class C{  public NameAndAccess createNameAndAccessFromString(EDataType eDataType,String initialValue){  return (NameAndAccess)super.createFromString(eDataType,initialValue);}  }
class C{  public ProviderNotFoundException(){}  }
class C{  public Set<EventBean> lookupRange(Object keyStart,boolean includeStart,Object keyEnd,boolean includeEnd,boolean allowRangeReversal){  if (keyStart == null || keyEnd == null) {    return Collections.emptySet();  }  keyStart=coerce(keyStart);  keyEnd=coerce(keyEnd);  SortedMap<Object,Set<EventBean>> submap;  try {    submap=propertyIndex.subMap(keyStart,includeStart,keyEnd,includeEnd);  } catch (  IllegalArgumentException ex) {    if (allowRangeReversal) {      submap=propertyIndex.subMap(keyEnd,includeStart,keyStart,includeEnd);    } else {      return Collections.emptySet();    }  }  return normalize(submap);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.DOMAIN__DOMAIN_ID:    setDomainID(DOMAIN_ID_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  static void addCommands(@NotNull Project project,@NotNull CompletionResultSet result){  String name;  String trailText=Plugin.resources.getString("lang.sqf.completion.tail_text.command");  for (int i=0; i < SQFStatic.LIST_COMMANDS.size(); i++) {    name=SQFStatic.LIST_COMMANDS.get(i);    result.addElement(LookupElementBuilder.createWithSmartPointer(name,SQFPsiUtil.createElement(project,name,SQFTypes.COMMAND)).withIcon(PluginIcons.ICON_SQF_COMMAND).appendTailText(" " + trailText,true));  }}  }
class C{  private boolean isIdentifier(String s){  if (s == null) {    return false;  }  s=s.trim();  if (s.length() > 0) {    if (!Character.isLetter(s.charAt(0))) {      return false;    }    for (int i=1; i < s.length(); i++) {      final char ch=s.charAt(i);      if (ch != '_' && ch != '-' && !Character.isLetterOrDigit(ch)) {        return false;      }    }  }  return false;}  }
class C{  private void processCall(Instruction s){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void paintComponent(Graphics g){  if (bgGradient == null || getHeight() != prevHeight) {    setupBackgroundAndEffect();  }  ((Graphics2D)g).setPaint(bgGradient);  g.fillRect(0,0,getWidth(),getHeight());}  }
class C{  private void println(String message){  Log.println(level,tag,message);}  }
class C{  public DefaultUrlConnectionExpiryCalculator(long relativeExpiry){  if (relativeExpiry < 0) {    throw new IllegalArgumentException("relativeExpiry < 0");  }  this.relativeExpiry=relativeExpiry;}  }
class C{  public void mark(final Label label){  mv.visitLabel(label);}  }
class C{  public byte[] evaluateChallenge(byte[] challengeData) throws SaslException {  if (completed) {    throw new IllegalStateException("CRAM-MD5 authentication already completed");  }  if (aborted) {    throw new IllegalStateException("CRAM-MD5 authentication previously aborted due to error");  }  try {    if (logger.isLoggable(Level.FINE)) {      logger.log(Level.FINE,"CRAMCLNT01:Received challenge: {0}",new String(challengeData,"UTF8"));    }    String digest=HMAC_MD5(pw,challengeData);    clearPassword();    String resp=username + " " + digest;    logger.log(Level.FINE,"CRAMCLNT02:Sending response: {0}",resp);    completed=true;    return resp.getBytes("UTF8");  } catch (  java.security.NoSuchAlgorithmException e) {    aborted=true;    throw new SaslException("MD5 algorithm not available on platform",e);  }catch (  java.io.UnsupportedEncodingException e) {    aborted=true;    throw new SaslException("UTF8 not available on platform",e);  }}  }
class C{  protected void createIotDeviceApp(){  getApplicationService().registerTopology(IotDevicePubSub.APP_NAME,null);  systemApps.add(IotDevicePubSub.APP_NAME);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public long topologyVersion(){  return topVer;}  }
class C{  public Analyzer saveReferenceSet(File file) throws IOException {  PopulationIO.writeObjectives(file,getReferenceSet());  return this;}  }
class C{  public DispatchHandlerFX(String id){  super(id,false,false,false,false);}  }
class C{  public BitInputStream(InputStream in){  this.in=in;}  }
class C{  public void testPurge() throws Exception {  List<MemoryFile> files=new ArrayList<MemoryFile>();  try {    while (true) {      MemoryFile newFile=new MemoryFile("MemoryFileTest",10000000);      newFile.allowPurging(true);      newFile.writeBytes(testString,0,0,testString.length);      files.add(newFile);      for (      MemoryFile file : files) {        try {          file.readBytes(testString,0,0,testString.length);        } catch (        IOException e) {          return;        }      }    }  }  finally {    for (    MemoryFile fileToClose : files) {      fileToClose.close();    }  }}  }
class C{  public void addInverse(final Match<T> aMatch){  add(new InverseMatch<>(aMatch));}  }
class C{  public static boolean isAvailable(){  try {    return create() != null;  } catch (  Exception e) {    log.log(Level.FINEST,e.toString(),e);    return false;  }}  }
class C{  public Parser createNewParser(){  DynamicVectorRenderer dvr=fileAcces.getDynamicRenderer();  Parser parser=new Parser(this.externalHandlers,this.options,this.fileAcces,this.res,this.resultsFromDecode);  fileAcces.setDVR(dvr);  int extractionMode=this.extractionMode;  parser.setRenderMode(renderMode);  parser.setExtractionMode(extractionMode);  parser.setGenerateGlyphOnRender(generateGlyphOnRender);  parser.setParms(displayRotation,scaling,indent,specialMode);  parser.setStatusBar(statusBar);  return parser;}  }
class C{  public PanControl(){  this(LEFT_MOUSE_BUTTON,false);}  }
class C{  private void checkBP(MBPartner bp) throws SQLException {  addLog(0,null,null,bp.getName() + ":");  checkPayments(bp);  checkInvoices(bp);  bp.setTotalOpenBalance();  bp.setActualLifeTimeValue();  bp.saveEx();  addLog(0,null,bp.getSO_CreditUsed(),Msg.getElement(getCtx(),"SO_CreditUsed"));  addLog(0,null,bp.getTotalOpenBalance(),Msg.getElement(getCtx(),"TotalOpenBalance"));  addLog(0,null,bp.getActualLifeTimeValue(),Msg.getElement(getCtx(),"ActualLifeTimeValue"));  commitEx();}  }
class C{  public static String toShowConsolidated(final IDocumentationHolder documentation){  return consolidate(documentation,true);}  }
class C{  public TungstenPropertiesIO(FileIO fileIO,FilePath filePath){  this.fileIO=fileIO;  this.filePath=filePath;}  }
class C{  private void clearTree(){  TreeUtil.removeAllChildren(getRootNode());  initRootNode();  getTreeModel().setRoot(getRootNode());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.450 -0400",hash_original_method="C4363C06EF39F3E979478C615A16D25B",hash_generated_method="8CD5F4944DC1A4F0B3F195F05E025641") private int handleCH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && contains(value,index,4,"CHAE")) {    result.append('K','X');    return index + 2;  } else   if (conditionCH0(value,index)) {    result.append('K');    return index + 2;  } else   if (conditionCH1(value,index)) {    result.append('K');    return index + 2;  } else {    if (index > 0) {      if (contains(value,0,2,"MC")) {        result.append('K');      } else {        result.append('X','K');      }    } else {      result.append('X');    }    return index + 2;  }}  }
class C{  public static <T>Rule<T> fromUri(final String uri,final List<String> methods,final T target){  return new Rule<>(uri,methods,target);}  }
class C{  public ObjectArrayList(Object[] elements){  elements(elements);}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public File saveTemp(String tempName,String extension) throws IOException {  File file=File.createTempFile(tempName,"." + extension);  save(file,extension);  return file;}  }
class C{  private ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope,InferenceContext inferenceContext){  TypeVariableBinding[] originalVariables=this.originalMethod.typeVariables;  int varLength=originalVariables.length;  if (inferenceContext.expectedType != null) {    this.returnType.collectSubstitutes(scope,inferenceContext.expectedType,inferenceContext,TypeConstants.CONSTRAINT_SUPER);    if (inferenceContext.status == InferenceContext.FAILED)     return null;  }  for (int i=0; i < varLength; i++) {    TypeVariableBinding originalVariable=originalVariables[i];    TypeBinding argument=this.typeArguments[i];    boolean argAlreadyInferred=argument != originalVariable;    if (originalVariable.firstBound == originalVariable.superclass) {      TypeBinding substitutedBound=Scope.substitute(this,originalVariable.superclass);      argument.collectSubstitutes(scope,substitutedBound,inferenceContext,TypeConstants.CONSTRAINT_SUPER);      if (inferenceContext.status == InferenceContext.FAILED)       return null;      if (argAlreadyInferred) {        substitutedBound.collectSubstitutes(scope,argument,inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);        if (inferenceContext.status == InferenceContext.FAILED)         return null;      }    }    for (int j=0, max=originalVariable.superInterfaces.length; j < max; j++) {      TypeBinding substitutedBound=Scope.substitute(this,originalVariable.superInterfaces[j]);      argument.collectSubstitutes(scope,substitutedBound,inferenceContext,TypeConstants.CONSTRAINT_SUPER);      if (inferenceContext.status == InferenceContext.FAILED)       return null;      if (argAlreadyInferred) {        substitutedBound.collectSubstitutes(scope,argument,inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);        if (inferenceContext.status == InferenceContext.FAILED)         return null;      }    }  }  if (!resolveSubstituteConstraints(scope,originalVariables,inferenceContext,true))   return null;  for (int i=0; i < varLength; i++) {    TypeBinding substitute=inferenceContext.substitutes[i];    if (substitute != null) {      this.typeArguments[i]=substitute;    } else {      this.typeArguments[i]=inferenceContext.substitutes[i]=originalVariables[i].upperBound();    }  }  this.typeArguments=Scope.substitute(this,this.typeArguments);  TypeBinding oldReturnType=this.returnType;  this.returnType=Scope.substitute(this,this.returnType);  this.inferredReturnType=inferenceContext.hasExplicitExpectedType && this.returnType != oldReturnType;  this.parameters=Scope.substitute(this,this.parameters);  this.thrownExceptions=Scope.substitute(this,this.thrownExceptions);  if (this.thrownExceptions == null)   this.thrownExceptions=Binding.NO_EXCEPTIONS;  checkMissingType: {    if ((this.tagBits & TagBits.HasMissingType) != 0)     break checkMissingType;    if ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {      this.tagBits|=TagBits.HasMissingType;      break checkMissingType;    }    for (int i=0, max=this.parameters.length; i < max; i++) {      if ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {        this.tagBits|=TagBits.HasMissingType;        break checkMissingType;      }    }    for (int i=0, max=this.thrownExceptions.length; i < max; i++) {      if ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {        this.tagBits|=TagBits.HasMissingType;        break checkMissingType;      }    }  }  return this;}  }
class C{  private void makeThread(User author,String contents,Project project,CommentThread thread){  thread.project=project;  thread.author=new UserIdent(author);  thread.save();  ReviewComment reviewComment=new ReviewComment();  reviewComment.createdDate=thread.createdDate;  reviewComment.author=thread.author;  reviewComment.thread=thread;  reviewComment.setContents(contents);  reviewComment.save();}  }
class C{  public boolean isSimple(){  return m_simpleString != null;}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_setting)   return;  if (e.getSource() == bOK) {    m_saved=true;    dispose();    return;  } else   if (e.getSource() == bCancel) {    dispose();    return;  }  try {    if (e.getSource() == typeField)     cmd_type(); else     if (e.getSource() == flatField)     m_cc.setFlatColor(JColorChooser.showDialog(this,flatField.getText(),m_cc.getFlatColor())); else     if (e.getSource() == gradientUpper)     m_cc.setGradientUpperColor(JColorChooser.showDialog(this,gradientUpper.getText(),m_cc.getGradientUpperColor())); else     if (e.getSource() == gradientLower)     m_cc.setGradientLowerColor(JColorChooser.showDialog(this,gradientLower.getText(),m_cc.getGradientLowerColor())); else     if (e.getSource() == gradientStartField)     m_cc.setGradientStartPoint(((KeyNamePair)gradientStartField.getSelectedItem()).getKey()); else     if (e.getSource() == gradientDistanceField)     m_cc.setGradientRepeatDistance(gradientDistanceField.getText()); else     if (e.getSource() == urlField)     m_cc.setTextureURL(urlField.getText()); else     if (e.getSource() == alphaField)     m_cc.setTextureCompositeAlpha(alphaField.getText()); else     if (e.getSource() == taintColor)     m_cc.setTextureTaintColor(JColorChooser.showDialog(this,taintColor.getText(),m_cc.getTextureTaintColor())); else     if (e.getSource() == lineColor)     m_cc.setLineColor(JColorChooser.showDialog(this,lineColor.getText(),m_cc.getLineColor())); else     if (e.getSource() == backColor)     m_cc.setLineBackColor(JColorChooser.showDialog(this,backColor.getText(),m_cc.getLineBackColor())); else     if (e.getSource() == widthField)     m_cc.setLineWidth(widthField.getText()); else     if (e.getSource() == distanceField)     m_cc.setLineDistance(distanceField.getText());  } catch (  Exception ee) {  }  setColor(m_cc);}  }
class C{  public void addListener(T listener){  if (listener == null) {    throw new NullPointerException();  }  listeners.add(listener);}  }
class C{  @SuppressWarnings("unused") protected final boolean cancelOperation(final int id){  return mHelper.cancelOperation(id,true);}  }
class C{  public AbstractPSOAlgorithm(Problem problem,int swarmSize,int leaderSize,DominanceComparator leaderComparator,DominanceComparator dominanceComparator,FitnessBasedArchive leaders,NondominatedPopulation archive,Variation mutation){  super(problem);  this.swarmSize=swarmSize;  this.leaderSize=leaderSize;  this.leaderComparator=leaderComparator;  this.dominanceComparator=dominanceComparator;  this.leaders=leaders;  this.archive=archive;  this.mutation=mutation;  particles=new Solution[swarmSize];  localBestParticles=new Solution[swarmSize];  velocities=new double[swarmSize][problem.getNumberOfVariables()];}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  protected void sendFile(UploadFileResult result){  Message message=new Message();  message.fillMessageForSend(activeUser,"",Const.MessageType.TYPE_FILE,result.data,null);  etMessage.setText("");  if (SocketManager.getInstance().isSocketConnect()) {    JSONObject emitMessage=EmitJsonCreator.createEmitSendMessage(message);    SocketManager.getInstance().emitMessage(Const.EmitKeyWord.SEND_MESSAGE,emitMessage);  } else {    unSentMessageList.add(message);  }  onMessageSent(message);}  }
class C{  public void shutdown(){}  }
class C{  public boolean isModifiable(){  return this.modifiable;}  }
class C{  @Inline @Override public final byte byteRead(ObjectReference objref,Word offset,Word location,int mode){  return Magic.getByteAtOffset(objref.toObject(),offset.toOffset());}  }
class C{  @RequestProcessing(value="/tags",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showTagsWall(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("tags.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final List<JSONObject> trendTags=tagQueryService.getTrendTags(Symphonys.getInt("tagsWallTrendCnt"));  final List<JSONObject> coldTags=tagQueryService.getColdTags(Symphonys.getInt("tagsWallColdCnt"));  dataModel.put(Common.TREND_TAGS,trendTags);  dataModel.put(Common.COLD_TAGS,coldTags);  filler.fillHeaderAndFooter(request,response,dataModel);}  }
class C{  public String xLabelFreqTipText(){  return "Show x axis labels this often";}  }
class C{  public static boolean mayBeVolatileFieldLoad(Instruction s){  return s.mayBeVolatileFieldLoad();}  }
class C{  void updateBlocks(int startLine,int endLine,int newLineCount){  if (mBlockEndLines == null) {    createBlocks();    return;  }  int firstBlock=-1;  int lastBlock=-1;  for (int i=0; i < mNumberOfBlocks; i++) {    if (mBlockEndLines[i] >= startLine) {      firstBlock=i;      break;    }  }  for (int i=firstBlock; i < mNumberOfBlocks; i++) {    if (mBlockEndLines[i] >= endLine) {      lastBlock=i;      break;    }  }  final int lastBlockEndLine=mBlockEndLines[lastBlock];  boolean createBlockBefore=startLine > (firstBlock == 0 ? 0 : mBlockEndLines[firstBlock - 1] + 1);  boolean createBlock=newLineCount > 0;  boolean createBlockAfter=endLine < mBlockEndLines[lastBlock];  int numAddedBlocks=0;  if (createBlockBefore)   numAddedBlocks++;  if (createBlock)   numAddedBlocks++;  if (createBlockAfter)   numAddedBlocks++;  final int numRemovedBlocks=lastBlock - firstBlock + 1;  final int newNumberOfBlocks=mNumberOfBlocks + numAddedBlocks - numRemovedBlocks;  if (newNumberOfBlocks == 0) {    mBlockEndLines[0]=0;    mBlockIndices[0]=INVALID_BLOCK_INDEX;    mNumberOfBlocks=1;    return;  }  if (newNumberOfBlocks > mBlockEndLines.length) {    final int newSize=ArrayUtils.idealIntArraySize(newNumberOfBlocks);    int[] blockEndLines=new int[newSize];    int[] blockIndices=new int[newSize];    System.arraycopy(mBlockEndLines,0,blockEndLines,0,firstBlock);    System.arraycopy(mBlockIndices,0,blockIndices,0,firstBlock);    System.arraycopy(mBlockEndLines,lastBlock + 1,blockEndLines,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);    System.arraycopy(mBlockIndices,lastBlock + 1,blockIndices,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);    mBlockEndLines=blockEndLines;    mBlockIndices=blockIndices;  } else {    System.arraycopy(mBlockEndLines,lastBlock + 1,mBlockEndLines,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);    System.arraycopy(mBlockIndices,lastBlock + 1,mBlockIndices,firstBlock + numAddedBlocks,mNumberOfBlocks - lastBlock - 1);  }  mNumberOfBlocks=newNumberOfBlocks;  final int deltaLines=newLineCount - (endLine - startLine + 1);  if (deltaLines != 0) {    mIndexFirstChangedBlock=firstBlock + numAddedBlocks;    for (int i=mIndexFirstChangedBlock; i < mNumberOfBlocks; i++) {      mBlockEndLines[i]+=deltaLines;    }  } else {    mIndexFirstChangedBlock=mNumberOfBlocks;  }  int blockIndex=firstBlock;  if (createBlockBefore) {    mBlockEndLines[blockIndex]=startLine - 1;    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;    blockIndex++;  }  if (createBlock) {    mBlockEndLines[blockIndex]=startLine + newLineCount - 1;    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;    blockIndex++;  }  if (createBlockAfter) {    mBlockEndLines[blockIndex]=lastBlockEndLine + deltaLines;    mBlockIndices[blockIndex]=INVALID_BLOCK_INDEX;  }}  }
class C{  public RecordsForCollection forCollection(CollectionId collectionId){  return recordMakerByCollectionId.computeIfAbsent(collectionId,null);}  }
class C{  public void testRecoverStrategy() throws Throwable {  RecoveryStrategy strategy=RecoveryStrategies.RECOVER;  CopycatClient client=mock(CopycatClient.class);  strategy.recover(client);  verify(client).recover();}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  cipher.init(forEncryption,params);}  }
class C{  private void processAttribute() throws XMLStreamException {  if (_attrPrefixSep < 0) {    if (isXMLNS(_attrQName)) {      _namespaces.setPrefix(_namespaces._defaultNsPrefix,_attrValue);    } else {      _attributes.addAttribute(_attrQName,null,_attrQName,_attrValue);    }  } else {    final int offset=_attrQName.offset();    final int length=_attrQName.length();    CharArray prefix=newSeq(offset,_attrPrefixSep - offset);    CharArray localName=newSeq(_attrPrefixSep + 1,offset + length - _attrPrefixSep - 1);    if (isXMLNS(prefix)) {      _namespaces.setPrefix(localName,_attrValue);    } else {      _attributes.addAttribute(localName,prefix,_attrQName,_attrValue);    }  }}  }
class C{  public void defineToFile(String key,Object value){  buildProperties.put(key,getProject().file(value).getAbsolutePath());}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  public static List<MerkleTreeNode> compress(List<MerkleTreeNode> nodes){  List<MerkleTreeNode> result=new ArrayList<>(nodes);  boolean hasChanged;  do {    if (result.size() <= 1)     return result;    hasChanged=false;    int leftPos, rightPos;    List<MerkleTreeNode> source=result;    result=new ArrayList<>();    int prevPos=-twoPower(source.get(0).getMerkleHeight());    for (int i=0; i < source.size(); i++) {      MerkleTreeNode left=source.get(i);      leftPos=prevPos + twoPower(left.getMerkleHeight());      if (i == source.size() - 1) {        result.add(left);        prevPos=leftPos;        continue;      }      MerkleTreeNode right=source.get(i + 1);      rightPos=leftPos + twoPower(left.getMerkleHeight());      if (isMergeableDistantPrunedNeighbours(left,leftPos,right,rightPos)) {        result.add(new PrunedNode(Hash.merge(left.getID(),mergeWithItself(right,left.getMerkleHeight() - right.getMerkleHeight())),left.getMerkleHeight() + 1));        hasChanged=true;        i++;      } else       if (isNeighbours(left,leftPos,right,rightPos)) {        if (left instanceof PrunedNode && right instanceof PrunedNode) {          result.add(new PrunedNode(Hash.merge(left.getID(),right.getID()),left.getMerkleHeight() + 1));          prevPos=rightPos;          hasChanged=true;          i++;        } else {          result.add(left);          result.add(right);          prevPos=rightPos;          i++;        }      } else {        result.add(left);        prevPos=leftPos;      }    }  } while (hasChanged);  return result;}  }
class C{  public void runSubsampler(String[] testFiles,int maxN,int targetCount,float ratio) throws IOException {  new Subsampler(testFiles,maxN,targetCount).subsample(ot.getValue(),ratio,of.getValue(),oe.getValue(),ofpath.getValue(),oepath.getValue(),ooutput.getValue());}  }
class C{  public ParsableByteArray(byte[] data,int limit){  this.data=data;  this.limit=limit;}  }
class C{  public JLookupSwitchStmt(Value key,List<Object> lookupValues,List<Object> targets,UnitBox defaultTarget){  this(Jimple.v().newImmediateBox(key),lookupValues,unitBoxListToArray(targets),defaultTarget);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createMessage(XSLTErrorResources.ER_TWO_OR_THREE,null));}  }
class C{  private void actionProcess(){  MUser user=MUser.get(Env.getCtx());  if (!user.isAdministrator()) {    fResult.setText("Not Administrator");    return;  }  m_script.setScript(editor.getText());  Exception e=m_script.execute();  if (e != null)   ADialog.error(m_WindowNo,this,"ScriptError",e.toString());  Object result=m_script.getResult(false);  fResult.setText(result == null ? "" : result.toString());}  }
class C{  public static void main(String[] args){  if (args.length > 0) {    numThreads=Integer.valueOf(args[0]);  }  int NUM_TRIALS=100;  Generator<IPoint> g=new UniformGenerator();  System.out.println("Num Threads:" + numThreads);  TrialSuite tsNative=new TrialSuite();  TrialSuite tsMulti=new TrialSuite();  TrialSuite tsHeur=new TrialSuite();  TrialSuite tsMultiHeur=new TrialSuite();  TrialSuite tsBoth=new TrialSuite();  TrialSuite tsMultiBoth=new TrialSuite();  for (int n=2048; n <= 1048576; n*=2) {    System.out.println(n + "...");    long numRemoved=0;    long numPointsOnHull=0;    for (int t=0; t < NUM_TRIALS; t++) {      IPoint[] master=g.generate(n);      IPoint[] points=new IPoint[master.length];      for (int i=0; i < master.length; i++) {        points[i]=new TwoDPoint(master[i]);      }      System.gc();      long now=System.currentTimeMillis();      IPoint[] hull1=new algs.model.problems.convexhull.andrew.ConvexHullScan().compute(points);      long after=System.currentTimeMillis();      tsNative.addTrial(n,now,after);      System.gc();      now=System.currentTimeMillis();      IPoint[] hull1a=new ConvexHullScan(numThreads).compute(points);      after=System.currentTimeMillis();      tsMulti.addTrial(n,now,after);      System.gc();      now=System.currentTimeMillis();      IPoint[] reduced=algs.model.problems.convexhull.AklToussaint.reduce(points);      long now2=System.currentTimeMillis();      IPoint[] hull2=new algs.model.problems.convexhull.andrew.ConvexHullScan().compute(reduced);      after=System.currentTimeMillis();      tsHeur.addTrial(n,now,now2);      tsBoth.addTrial(n,now,after);      System.gc();      now=System.currentTimeMillis();      IPoint[] reduced2a=AklToussaint.reduce(points);      now2=System.currentTimeMillis();      IPoint[] hull2a=new ConvexHullScan(numThreads).compute(reduced2a);      after=System.currentTimeMillis();      tsMultiHeur.addTrial(n,now,now2);      tsMultiBoth.addTrial(n,now,after);      assert (hull1.length == hull2.length);      assert (hull1a.length == hull1.length);      assert (hull2a.length == hull2.length);      assert (reduced2a.length == reduced.length);      numRemoved+=(master.length - reduced.length);      numPointsOnHull+=hull1.length;    }    System.out.println("NumRemoved:" + (1.0f * numRemoved) / NUM_TRIALS);    System.out.println("NumPointsOnHull:" + (1.0f * numPointsOnHull) / NUM_TRIALS);  }  System.out.println("native:" + tsNative.computeTable());  System.out.println("heuristic:" + tsHeur.computeTable());  System.out.println("both:" + tsBoth.computeTable());  System.out.println();  System.out.println("multithread:" + tsMulti.computeTable());  System.out.println("multi-threadheuristic:" + tsMultiHeur.computeTable());  System.out.println("multi-thread both:" + tsMultiBoth.computeTable());  System.out.println();}  }
class C{  protected Cipher(CipherSpi cipherSpi,Provider provider,String transformation){  if (!JceSecurityManager.INSTANCE.isCallerTrusted()) {    throw new NullPointerException();  }  this.spi=cipherSpi;  this.provider=provider;  this.transformation=transformation;  this.cryptoPerm=CryptoAllPermission.INSTANCE;  this.lock=null;}  }
class C{  @Override public void startActivityForResult(Intent intent,int requestCode){  if (requestCode != -1 && (requestCode & 0xffff0000) != 0) {    throw new IllegalArgumentException("Can only use lower 16 bits for requestCode");  }  super.startActivityForResult(intent,requestCode);}  }
class C{  public WeakIdentityHashMap(Map<? extends K,? extends V> t){  this(Math.max((int)(t.size() / DEFAULT_LOAD_FACTOR) + 1,16),DEFAULT_LOAD_FACTOR);  putAll(t);}  }
class C{  private void notifyDownloadCompleted(int status,boolean countRetry,int retryAfter,int redirectCount,boolean gotData,String filename){  updateDownloadDatabase(status,countRetry,retryAfter,redirectCount,gotData,filename);  if (DownloaderService.isStatusCompleted(status)) {  }}  }
class C{  public boolean declaresMethod(String name,List parameterTypes,Type returnType){  checkLevel(SIGNATURES);  Iterator<SootMethod> methodIt=methodIterator();  while (methodIt.hasNext()) {    SootMethod method=methodIt.next();    if (method.getName().equals(name) && method.getParameterTypes().equals(parameterTypes) && method.getReturnType().equals(returnType))     return true;  }  return false;}  }
class C{  private List<GenericEntry> retrieveAllPages(URL feedUrl) throws IOException, ServiceException {  List<GenericEntry> allEntries=new ArrayList<GenericEntry>();  try {    do {      GenericFeed feed=service.getFeed(feedUrl,GenericFeed.class);      allEntries.addAll(feed.getEntries());      feedUrl=(feed.getNextLink() == null) ? null : new URL(feed.getNextLink().getHref());    } while (feedUrl != null);  } catch (  ServiceException se) {    AppsForYourDomainException ae=AppsForYourDomainException.narrow(se);    throw (ae != null) ? ae : se;  }  return allEntries;}  }
class C{  public synchronized void write(byte b[],int off,int len) throws IOException {  if (len >= buf.length) {    flushBuffer();    out.write(b,off,len);  } else {    if (len > buf.length - count) {      flushBuffer();    }    System.arraycopy(b,off,buf,count,len);    count+=len;  }  totalBytesWritten+=len;  fireProgress();  lastActivityTime=System.currentTimeMillis();}  }
class C{  public int rtf(XPathContext support){  DTM frag=support.createDocumentFragment();  frag.appendTextChild(str());  return frag.getDocument();}  }
class C{  public static void DD_OrderLine(MDDOrderLine ol){  String trxName=ol.get_TrxName();  Properties m_ctx=ol.getCtx();  MPPMRP mrp=getQuery(ol,TYPEMRP_Demand,ORDERTYPE_DistributionOrder).firstOnly();  MLocator source=MLocator.get(m_ctx,ol.getM_Locator_ID());  MLocator target=MLocator.get(m_ctx,ol.getM_LocatorTo_ID());  if (mrp != null) {    mrp.setAD_Org_ID(source.getAD_Org_ID());    mrp.setName("MRP");    mrp.setDD_Order(ol.getParent());    mrp.setDescription(ol.getDescription());    mrp.setDatePromised(ol.getDatePromised());    mrp.setDateOrdered(ol.getDateOrdered());    mrp.setDateStartSchedule(ol.getDateOrdered());    mrp.setM_Warehouse_ID(source.getM_Warehouse_ID());    mrp.setM_Product_ID(ol.getM_Product_ID());    mrp.setQty(ol.getQtyOrdered().subtract(ol.getQtyDelivered()));    mrp.saveEx();  } else {    mrp=new MPPMRP(m_ctx,0,trxName);    mrp.setAD_Org_ID(source.getAD_Org_ID());    mrp.setName("MRP");    mrp.setDescription(ol.getDescription());    mrp.setDD_Order(ol.getParent());    mrp.setDD_OrderLine_ID(ol.getDD_OrderLine_ID());    mrp.setDatePromised(ol.getDatePromised());    mrp.setDateOrdered(ol.getDateOrdered());    mrp.setDateStartSchedule(ol.getDateOrdered());    mrp.setM_Warehouse_ID(source.getM_Warehouse_ID());    mrp.setM_Product_ID(ol.getM_Product_ID());    mrp.setQty(ol.getQtyOrdered().subtract(ol.getQtyDelivered()));    mrp.setOrderType(MPPMRP.ORDERTYPE_DistributionOrder);    mrp.setTypeMRP(MPPMRP.TYPEMRP_Demand);    mrp.saveEx();  }  mrp=getQuery(ol,TYPEMRP_Supply,ORDERTYPE_DistributionOrder).firstOnly();  if (mrp != null) {    mrp.setAD_Org_ID(target.getAD_Org_ID());    mrp.setName("MRP");    mrp.setDD_Order(ol.getParent());    mrp.setDescription(ol.getDescription());    mrp.setDatePromised(ol.getDatePromised());    mrp.setDateOrdered(ol.getDateOrdered());    mrp.setM_Product_ID(ol.getM_Product_ID());    mrp.setM_Warehouse_ID(target.getM_Warehouse_ID());    mrp.setQty(ol.getQtyOrdered().subtract(ol.getQtyDelivered()));    mrp.saveEx();  } else {    mrp=new MPPMRP(m_ctx,0,trxName);    mrp.setAD_Org_ID(target.getAD_Org_ID());    mrp.setName("MRP");    mrp.setDescription(ol.getDescription());    mrp.setDD_Order(ol.getParent());    mrp.setDD_OrderLine_ID(ol.getDD_OrderLine_ID());    mrp.setDatePromised(ol.getDatePromised());    mrp.setDateOrdered(ol.getDateOrdered());    mrp.setM_Product_ID(ol.getM_Product_ID());    mrp.setM_Warehouse_ID(target.getM_Warehouse_ID());    mrp.setQty(ol.getQtyOrdered().subtract(ol.getQtyDelivered()));    mrp.setOrderType(MPPMRP.ORDERTYPE_DistributionOrder);    mrp.setTypeMRP(MPPMRP.TYPEMRP_Supply);    mrp.saveEx();  }  return;}  }
class C{  public static double P_Recall(int y[],int ypred[]){  if (allMissing(y)) {    return Double.NaN;  }  double tp=P_TruePositives(y,ypred);  double fn=P_FalseNegatives(y,ypred);  if (tp == 0.0 && fn == 0.0)   return 0.0;  return tp / (tp + fn);}  }
class C{  public static boolean createNewFile(File targetFile){  if (targetFile.exists())   targetFile.delete();  try {    return targetFile.createNewFile();  } catch (  IOException e) {    return false;  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.906 -0500",hash_original_method="D644E56206842370DC4588BE79799AE3",hash_generated_method="DF9C009961D95E0DC22956E98C1707F5") public SHA1PRNG_SecureRandomImpl(){  seed=new int[HASH_OFFSET + EXTRAFRAME_OFFSET];  seed[HASH_OFFSET]=H0;  seed[HASH_OFFSET + 1]=H1;  seed[HASH_OFFSET + 2]=H2;  seed[HASH_OFFSET + 3]=H3;  seed[HASH_OFFSET + 4]=H4;  seedLength=0;  copies=new int[2 * FRAME_LENGTH + EXTRAFRAME_OFFSET];  nextBytes=new byte[DIGEST_LENGTH];  nextBIndex=HASHBYTES_TO_USE;  counter=COUNTER_BASE;  state=UNDEFINED;}  }
class C{  public String resolve(String name,String scope,DataSource dataSource) throws CustomConfigControllerException {  StringMap scopeMap=new StringMap();  CustomConfigType item=getCustomConfigType(name);  if (item != null) {    for (    String key : item.getScope().keySet()) {      List<String> scopeVals=java.util.Arrays.asList(item.getScope().get(key).split(","));      if (scopeVals.contains(scope)) {        scopeMap.put(key,scope);      }    }  }  String value=getCustomConfigValue(name,scopeMap);  CustomConfigResolver resolver=configResolvers.get(item.getConfigType());  String result=resolver.resolve(item,scopeMap,value,dataSource);  return result;}  }
class C{  public LTRStandardDecoder(AliasList aliasList,MessageDirection direction){  mLTRFSKDecoder=new LTRFSKDecoder();  if (direction == MessageDirection.OSW) {    mLTRMessageFramer=new MessageFramer(SyncPattern.LTR_STANDARD_OSW.getPattern(),LTR_STANDARD_MESSAGE_LENGTH);  } else {    mLTRMessageFramer=new MessageFramer(SyncPattern.LTR_STANDARD_ISW.getPattern(),LTR_STANDARD_MESSAGE_LENGTH);  }  mLTRFSKDecoder.addListener(mLTRMessageFramer);  mLTRMessageProcessor=new LTRStandardMessageProcessor(direction,aliasList);  mLTRMessageFramer.addMessageListener(mLTRMessageProcessor);  mLTRMessageProcessor.setMessageListener(this);}  }
class C{  private void sendMessage(String player,StringBuilder message){  logger.debug("sending a notice to '" + player + "': "+ message.toString());  DBCommandQueue.get().enqueue(new StoreMessageCommand("Harold",player,message.toString(),"N"));}  }
class C{  static void loadActionMap(LazyActionMap map){  map.put(new Actions(Actions.POSITIVE_UNIT_INCREMENT));  map.put(new Actions(Actions.POSITIVE_BLOCK_INCREMENT));  map.put(new Actions(Actions.NEGATIVE_UNIT_INCREMENT));  map.put(new Actions(Actions.NEGATIVE_BLOCK_INCREMENT));  map.put(new Actions(Actions.MIN_SCROLL_INCREMENT));  map.put(new Actions(Actions.MAX_SCROLL_INCREMENT));}  }
class C{  public void printAndCacheEntry(RecordEntry entry){  String id=entry.getId().substring(entry.getId().lastIndexOf('/') + 1);  entriesCached.put(id,entry);  out.println("-- id: " + id + "  title: "+ entry.getTitle().getPlainText());  for (  Field field : entry.getFields()) {    out.println("     <field name=" + field.getName() + ">"+ field.getValue()+ "</field>");  }}  }
class C{  public SearcherTaxonomyManager(IndexWriter writer,SearcherFactory searcherFactory,DirectoryTaxonomyWriter taxoWriter) throws IOException {  this(writer,true,searcherFactory,taxoWriter);}  }
class C{  public Iterator<DataPoint> iterator(){  return list.iterator();}  }
class C{  public double predictSingle(FVec feat){  return predictSingle(feat,false);}  }
class C{  @Override public String toString(String field){  StringBuilder buffer=new StringBuilder();  if (!getField().equals(field)) {    buffer.append(getField());    buffer.append(':');  }  buffer.append(term.text());  buffer.append('*');  return buffer.toString();}  }
class C{  public Builder add(long l){  if (pending == null) {    throw new IllegalStateException("Cannot be reused after build()");  }  if (pendingOff == pending.length) {    if (values.length == valuesOff) {      final int newLength=ArrayUtil.oversize(valuesOff + 1,8);      grow(newLength);    }    pack();  }  pending[pendingOff++]=l;  size+=1;  return this;}  }
class C{  public static void scrollToFirstMarker(OtrosJTextWithRulerScrollPane pane){  List<Marker> markers=pane.getMarkerModel().getMarkers();  if (markers.size() > 0) {    Marker marker=markers.get(0);    marker.markerClicked();  }}  }
class C{  public void tagRemoveObject2(int depth) throws IOException {  if (tags != null) {    tags.tagRemoveObject2(depth);  }}  }
class C{  public void render(World world,Matrix4 projMatrix){  renderer.setProjectionMatrix(projMatrix);  renderBodies(world);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:08.888 -0500",hash_original_method="9F182F09B08FED6314DBE96ECAD38ABB",hash_generated_method="A25B9B6C1CBF06EAF34257BEF6967579") public AbsoluteSizeSpan(int size){  mSize=size;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.143 -0500",hash_original_method="E72D81A306A857A102E9D4437AB18CA6",hash_generated_method="7865E9FC50251318513C5BE7BE5FFC44") public AuthenticationInfoHeader createAuthenticationInfoHeader(String response) throws ParseException {  if (response == null)   throw new NullPointerException("null arg response");  AuthenticationInfo auth=new AuthenticationInfo();  auth.setResponse(response);  return auth;}  }
class C{  private boolean save(){  String title=mTitle.getText().toString().trim();  boolean emptyTitle=title.length() == 0;  Resources r=getResources();  if (emptyTitle) {    mTitle.setError(r.getText(R.string.bookmark_needs_title));    return false;  }  long id=addFolderToCurrent(title);  if (id == -1) {    displayToastForExistingFolder();    return false;  }  setResult(RESULT_OK);  return true;}  }
class C{  public void runnableInvoked(RunnableQueue rq,Runnable r){  if (running && !(r instanceof NoRepaintRunnable)) {    repaint();  }}  }
class C{  public GitHubPRPullRequest(GHPullRequest pr) throws IOException {  userLogin=pr.getUser().getLogin();  number=pr.getNumber();  prUpdatedAt=pr.getUpdatedAt();  issueUpdatedAt=pr.getIssueUpdatedAt();  headSha=pr.getHead().getSha();  headRef=pr.getHead().getRef();  title=pr.getTitle();  baseRef=pr.getBase().getRef();  htmlUrl=pr.getHtmlUrl();  try {    Date maxDate=new Date(0);    for (    GHIssueComment comment : pr.getComments()) {      if (comment.getCreatedAt().compareTo(maxDate) > 0) {        maxDate=comment.getCreatedAt();      }    }    lastCommentCreatedAt=maxDate.getTime() == 0 ? null : new Date(maxDate.getTime());  } catch (  IOException e) {    LOGGER.error("Can't get comments for PR: {}",pr.getNumber(),e);    lastCommentCreatedAt=null;  }  try {    userEmail=pr.getUser().getEmail();  } catch (  Exception e) {    LOGGER.error("Can't get GitHub user email.",e);    userEmail="";  }  GHRepository remoteRepo=pr.getRepository();  try {    updateLabels(remoteRepo.getIssue(number).getLabels());  } catch (  IOException e) {    LOGGER.error("Can't retrieve label list: {}",e);    inBadState=true;  }  try {    mergeable=pr.getMergeable();  } catch (  IOException e) {    LOGGER.error("Can't get mergeable status.",e);    mergeable=false;  }  sourceRepoOwner=remoteRepo.getOwnerName();  state=pr.getState().toString();}  }
class C{  public void onOfferNeeded(long sessionId){  send(new PeerConnectionActor.OnOfferNeeded(sessionId));}  }
class C{  @Deprecated protected void onDccChatRequest(String sourceNick,String sourceLogin,String sourceHostname,long address,int port){}  }
class C{  public synchronized void decelerateTimeTravel(){  if (speedIndex > 0) {    Log.d(TAG,"Decelerating speed to: " + SPEEDS[speedIndex]);    --speedIndex;  } else {    Log.d(TAG,"Already at maximum backwards speed");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.082 -0500",hash_original_method="F2C1801AA96B9D8F59B00F59054F0306",hash_generated_method="F79F23C32867CAB3FEB10F1A45A86897") public void releaseAll(){  mEdgeGlowTop.onRelease();  mEdgeGlowBottom.onRelease();  mEdgeGlowLeft.onRelease();  mEdgeGlowRight.onRelease();}  }
class C{  public CallSpec<Void,HttpError> markMessageAsRead(String conversationId,String messageId,String userId){  return Resource.<Void,HttpError>newPutSpec(api,"/v1/users/{user_id}/conversations/{conversation_id}/messages/{message_id}/read",false).pathParam("user_id",userId).pathParam("conversation_id",conversationId).pathParam("message_id",messageId).responseAs(Void.class).build();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean hasBindAppWidgetPermission(String packageName){  try {    return sService.hasBindAppWidgetPermission(packageName,mContext.getUserId());  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  FullRowAggregateTest t=new FullRowAggregateTest();  t.setUpBase();  t.setUp();  t.setOutAndExpectedDeletionDisabled(true);  t.testRowIndexMaxDenseMatrixNegMR();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  public boolean booleanValue(){  return ((Boolean)value).booleanValue();}  }
class C{  private void init(){  barChartConsumer=new AttributeType(this,"Bar","setValue",double.class,true);  addConsumerType(barChartConsumer);  barChartVectorConsumer=new AttributeType(this,"BarVector",double[].class,true);  addConsumerType(barChartVectorConsumer);}  }
class C{  public boolean isFailIfUsed(){  return failIfUsed;}  }
class C{  @SuppressWarnings("ThrowableResultOfMethodCallIgnored") public static IgfsException toIgfsException(Throwable err){  IgfsException err0=err instanceof IgfsException ? (IgfsException)err : null;  IgfsException igfsErr=X.cause(err,IgfsException.class);  while (igfsErr != null && igfsErr != err0) {    err0=igfsErr;    igfsErr=X.cause(err,IgfsException.class);  }  if (err0 != err) {    if (err0 != null)     err0=newIgfsException(err0.getClass(),err0.getMessage(),err0); else {      if (err instanceof ClusterTopologyServerNotFoundException)       err0=new IgfsException("Cache server nodes not found.",err); else       err0=new IgfsException("Generic IGFS error occurred.",err);    }  }  return err0;}  }
class C{  private void randomVectorInDisk(Vector2f out){  float r=rnd.nextFloat();  float a=rnd.nextFloat() * 2.0f * (float)Math.PI;  float sqrtR=(float)Math.sqrt(r);  out.x=sqrtR * (float)Math.sin_roquen_9(a + 0.5 * Math.PI);  out.y=sqrtR * (float)Math.sin_roquen_9(a);}  }
class C{  public void encode(OutputStream out) throws CertificateException, IOException {  encode(out,false);}  }
class C{  protected void releaseResources(){}  }
class C{  public BoundaryPanel(int panelWidth,int panelHeight){  ToolTipManager.sharedInstance().setDismissDelay(Integer.MAX_VALUE);  m_panelWidth=panelWidth;  m_panelHeight=panelHeight;  setLayout(new BorderLayout());  m_plotPanel.setMinimumSize(new Dimension(m_panelWidth,m_panelHeight));  m_plotPanel.setPreferredSize(new Dimension(m_panelWidth,m_panelHeight));  m_plotPanel.setMaximumSize(new Dimension(m_panelWidth,m_panelHeight));  add(m_plotPanel,BorderLayout.CENTER);  setPreferredSize(m_plotPanel.getPreferredSize());  setMaximumSize(m_plotPanel.getMaximumSize());  setMinimumSize(m_plotPanel.getMinimumSize());  m_random=new Random(1);  for (  Color element : DEFAULT_COLORS) {    m_Colors.add(new Color(element.getRed(),element.getGreen(),element.getBlue()));  }  m_probabilityCache=new double[m_panelHeight][m_panelWidth][];}  }
class C{  public boolean containsJavaResources() throws JavaModelException {  return ((PackageFragmentInfo)getElementInfo()).containsJavaResources();}  }
class C{  static long toWindowsTime(FileTime time){  long value=time.to(TimeUnit.MICROSECONDS);  value-=WINDOWS_EPOCH_IN_MICROSECONDS;  value*=10L;  return value;}  }
