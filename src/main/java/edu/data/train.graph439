class C{  private ImageSprite(final Sprite sprite,final Object reference){  this.reference=reference;  image=getGC().createCompatibleImage(sprite.getWidth(),sprite.getHeight(),TransparencyMode.TRANSPARENCY);  sprite.draw(image.getGraphics(),0,0);}  }
class C{  private AbstractHttpClient(String baseUrl){  this(baseUrl,new BasicRequestHandler(){  });}  }
class C{  public void displayState(String status){  if (log.isDebugEnabled()) {    log.debug(getNameString() + " displayStatus " + _status);  }  NamedIcon icon=getIcon(status);  if (icon != null) {    super.setIcon(icon);  }  updateSize();}  }
class C{  @Override public void validate(String location,String subreddit,String pollingDelay,boolean celsius,boolean voiceCommands,boolean rememberConfig,boolean simpleLayout){  interactor.validate(location,subreddit,pollingDelay,celsius,voiceCommands,rememberConfig,simpleLayout,new ConfigurationSubscriber());}  }
class C{  public void updateIdFichDocumentoVital(String id,String idFich){  String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,id)).toString();  Map cols=Collections.singletonMap(CAMPO_ID_FICH,idFich);  updateFields(qual,cols,TABLE_NAME);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.917 -0500",hash_original_method="6C5ABF33E117D9BB891BADA4C861CBC2",hash_generated_method="E6ECDA0BAA469C811EFFB29E67203A65") public ViewPropertyAnimator rotationX(float value){  animateProperty(ROTATION_X,value);  return this;}  }
class C{  public Object doAction(Object[] parameters) throws Exception {  Method method=getMethod();  Object ret=method.invoke(this,parameters);  if (isVoidReturn())   return NoValue; else   return ret;}  }
class C{  public static void assumeTrue(boolean assumption) throws TestAbortedException {  assumeTrue(null);}  }
class C{  @Override public int hashCode(){  return new HashCodeBuilder(17,37).append(name).append(tcpPort).append(mcastPort).append(mcastTtl).append(socketLeaseTime).append(socketBufferSize).append(conserveSockets).append(roles).append(mcastAddress).append(bindAddress).append(serverBindAddress).append(locators).append(locatorWaitTime).append(logFile).append(deployWorkingDir).append(logLevel).append(startLocator).append(startLocatorPort).append(statisticSamplingEnabled).append(statisticSampleRate).append(statisticArchiveFile).append(ackWaitThreshold).append(ackForceDisconnectThreshold).append(cacheXmlFile).append(archiveDiskSpaceLimit).append(archiveFileSizeLimit).append(logDiskSpaceLimit).append(logFileSizeLimit).append(clusterSSLEnabled).append(clusterSSLProtocols).append(clusterSSLCiphers).append(clusterSSLRequireAuthentication).append(clusterSSLKeyStore).append(clusterSSLKeyStoreType).append(clusterSSLKeyStorePassword).append(clusterSSLTrustStore).append(clusterSSLTrustStorePassword).append(clusterSSLAlias).append(mcastSendBufferSize).append(mcastRecvBufferSize).append(mcastFlowControl).append(udpSendBufferSize).append(udpRecvBufferSize).append(udpFragmentSize).append(disableTcp).append(enableTimeStatistics).append(memberTimeout).append(membershipPortRange).append(maxWaitTimeForReconnect).append(maxNumReconnectTries).append(asyncDistributionTimeout).append(asyncQueueTimeout).append(asyncMaxQueueSize).append(clientConflation).append(durableClientId).append(durableClientTimeout).append(securityClientAuthInit).append(securityClientAuthenticator).append(securityManager).append(postProcessor).append(securityClientDHAlgo).append(securityPeerAuthInit).append(securityPeerAuthenticator).append(securityClientAccessor).append(securityClientAccessorPP).append(securityLogLevel).append(enableNetworkPartitionDetection).append(disableAutoReconnect).append(securityLogFile).append(securityPeerMembershipTimeout).append(security).append(userDefinedProps).append(removeUnresponsiveClient).append(deltaPropagation).append(props).append(distributedSystemId).append(remoteLocators).append(enforceUniqueHost).append(redundancyZone).append(sslProperties).append(clusterSSLProperties).append(groups).append(enableSharedConfiguration).append(useSharedConfiguration).append(loadSharedConfigurationFromDir).append(clusterConfigDir).append(httpServicePort).append(httpServiceBindAddress).append(startDevRestApi).append(memcachedPort).append(memcachedProtocol).append(memcachedBindAddress).append(distributedTransactions).append(redisPort).append(redisBindAddress).append(redisPassword).append(jmxManager).append(jmxManagerStart).append(jmxManagerPort).append(jmxManagerBindAddress).append(jmxManagerHostnameForClients).append(jmxManagerPasswordFile).append(jmxManagerAccessFile).append(jmxManagerHttpPort).append(jmxManagerUpdateRate).append(jmxManagerSSLEnabled).append(jmxManagerSslRequireAuthentication).append(jmxManagerSslProtocols).append(jmxManagerSslCiphers).append(jmxManagerSslProperties).append(jmxManagerSSLKeyStore).append(jmxManagerSSLKeyStoreType).append(jmxManagerSSLKeyStorePassword).append(jmxManagerSSLTrustStore).append(jmxManagerSSLTrustStorePassword).append(jmxManagerSSLAlias).append(serverSSLEnabled).append(serverSslRequireAuthentication).append(serverSslProtocols).append(serverSslCiphers).append(serverSslProperties).append(serverSSLKeyStore).append(serverSSLKeyStoreType).append(serverSSLKeyStorePassword).append(serverSSLTrustStore).append(serverSSLTrustStorePassword).append(serverSSLAlias).append(gatewaySSLEnabled).append(gatewaySslRequireAuthentication).append(gatewaySslProtocols).append(gatewaySslCiphers).append(gatewaySslProperties).append(gatewaySSLKeyStore).append(gatewaySSLKeyStoreType).append(gatewaySSLKeyStorePassword).append(gatewaySSLTrustStore).append(gatewaySSLTrustStorePassword).append(gatewaySSLAlias).append(httpServiceSSLEnabled).append(httpServiceSSLRequireAuthentication).append(httpServiceSSLProtocols).append(httpServiceSSLCiphers).append(httpServiceSSLProperties).append(httpServiceSSLKeyStore).append(httpServiceSSLKeyStoreType).append(httpServiceSSLKeyStorePassword).append(httpServiceSSLTrustStore).append(httpServiceSSLTrustStorePassword).append(httpServiceSSLAlias).append(securableCommunicationChannels).append(sslProtocols).append(sslCiphers).append(sslRequireAuthentication).append(sslKeyStore).append(sslKeyStoreType).append(sslKeyStorePassword).append(sslTrustStore).append(sslTrustStorePassword).append(sslWebServiceRequireAuthentication).append(locatorSSLAlias).append(sslDefaultAlias).append(sourceMap).append(userCommandPackages).append(offHeapMemorySize).append(lockMemory).append(shiroInit).append(modifiable).toHashCode();}  }
class C{  public boolean swap(){  mEgl.eglSwapBuffers(mEglDisplay,mEglSurface);  return mEgl.eglGetError() != EGL11.EGL_CONTEXT_LOST;}  }
class C{  private void cmd_save(boolean saveQuery){  Object selected=fQueryName.getSelectedItem();  if (selected == null) {    return;  }  StringBuffer code=codeUserQuery();  String name=selected.toString();  if (name.equals(m_sNew) || name.equals(m_sLast) || name.equals(m_sTipText)|| Util.isEmpty(name,true)) {  } else {    MUserQuery uq=MUserQuery.get(Env.getCtx(),m_AD_Tab_ID,name);    if (code.length() > 0) {      if (uq == null) {        uq=new MUserQuery(Env.getCtx(),0,null);        uq.setName(name);        uq.setAD_Table_ID(m_AD_Table_ID);        uq.setAD_Tab_ID(m_AD_Tab_ID);        uq.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));      }      uq.setCode(code.toString());    } else     if (code.length() <= 0) {      if (uq.delete(true)) {        ADialog.info(m_targetWindowNo,this,"Deleted",name);        refreshUserQueries();      } else       ADialog.warn(m_targetWindowNo,this,"DeleteError",name);      return;    }    if (uq.save()) {      refreshUserQueries();    } else     ADialog.warn(m_targetWindowNo,this,"SaveError",name);  }  if (saveQuery) {    MUserQuery last=MUserQuery.get(Env.getCtx(),m_AD_Tab_ID,m_sLast);    if (code.length() > 0) {      if (last == null) {        last=new MUserQuery(Env.getCtx(),0,null);        last.setName(m_sLast);        last.setAD_Table_ID(m_AD_Table_ID);        last.setAD_Tab_ID(m_AD_Tab_ID);        last.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));      }      last.setCode(code.toString());    } else     if (code.length() <= 0) {      if (!last.delete(true))       ADialog.warn(m_targetWindowNo,this,"DeleteError",name);      return;    }    if (!last.save())     ADialog.warn(m_targetWindowNo,this,"SaveError",name);  }}  }
class C{  public ConsulTopologyFraction(URL url){  url(url);}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public Dimension(){}  }
class C{  public void put(E e){  xfer(e,true,ASYNC,0);}  }
class C{  @Unpreemptible public boolean lockHeavy(Object o){  if (tentativeMicrolocking) {    if (!mutex.tryLock()) {      return false;    }  } else {    mutex.lock();  }  return lockHeavyLocked(o);}  }
class C{  public static long hexStringToLong(final String hexString){  Preconditions.checkNotNull(hexString,"Error: Unicode string can't be null");  Preconditions.checkArgument(isHexString(hexString),String.format("Error: Hex string '%s' is not a vaild hex string",hexString));  if ((hexString.length() == 16) && (hexString.charAt(0) >= 8)) {    final String strAddr1=hexString.substring(0,hexString.length() - 8);    final String strAddr2=hexString.substring(hexString.length() - 8);    return (Long.parseLong(strAddr1,16) << 32) + Long.parseLong(strAddr2,16);  }  return Long.parseLong(hexString,16);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_CASE_DEF___TRACE_DIRECTIVE_1:    return ((InternalEList<?>)getTraceDirective_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isTextList(){  return list;}  }
class C{  @Transient public void validate() throws Exception {  if (null == this.getOrderType())   throw new Exception("Order Type cannot be null");  if (null == this.getAction())   throw new Exception("Action cannot be null");  if (0 == this.getQuantity())   throw new Exception("Quantity cannot be zero");  if (OrderType.LMT.equals(this.getOrderType()) && null == this.getLimitPrice())   throw new Exception("Limit price cannot be null");  if (OrderType.STPLMT.equals(this.getOrderType()) && (null == this.getLimitPrice() || null == this.getAuxPrice()))   throw new Exception("Limit/Aux price cannot be null");  if (OrderType.STPLMT.equals(this.getOrderType()) && Action.BUY.equals(this.getAction()) && (-1 == CoreUtils.nullSafeComparator(this.getLimitPrice(),this.getAuxPrice())))   throw new Exception("Limit Price must be greater than Stop Price for Buy order");  if (OrderType.STPLMT.equals(this.getOrderType()) && Action.SELL.equals(this.getAction()) && (-1 == CoreUtils.nullSafeComparator(this.getAuxPrice(),this.getLimitPrice())))   throw new Exception("Limit Price must be less than Stop Price for Sell order");  if (((OrderType.TRAIL.equals(this.getOrderType()) || (OrderType.TRAILLIMIT.equals(this.getOrderType()))) && null == this.getAuxPrice() && null == this.getTrailingPercent()))   throw new Exception("Trail orders must have either AuxPrice or Trailing Percent set");  if ((OrderType.TRAILLIMIT.equals(this.getOrderType())) && null == this.getLimitPrice())   throw new Exception("Limit Price cannot be null for a TrailLimit order");  if (null == this.getFAProfile()) {    if (null == this.getFAGroup()) {      if (null != this.getTradestrategy().getPortfolio().getIndividualAccount()) {        this.setAccountNumber(this.getTradestrategy().getPortfolio().getIndividualAccount().getAccountNumber());      }    } else {      if (null == this.getFAMethod())       throw new Exception("FAGroup is set FAMethod cannot be null.");      if (null == this.getFAMethod() || null == this.getFAPercent())       throw new Exception("FAGroup is set FAPercent cannot be null.");    }  } else {    this.setFAGroup(null);    this.setFAMethod(null);    this.setFAPercent(null);  }  if (OrderType.MKT.equals(this.getOrderType())) {    this.setLimitPrice((new Money(0)).getBigDecimalValue());    this.setAuxPrice((new Money(0)).getBigDecimalValue());    this.setTrailingPercent((new Money(0)).getBigDecimalValue());    this.setTrailStopPrice((new Money(0)).getBigDecimalValue());  } else   if (OrderType.TRAIL.equals(this.getOrderType())) {    if (null != this.getTrailingPercent()) {      this.setAuxPrice(null);      this.setLimitPrice(null);    }  } else   if (OrderType.TRAILLIMIT.equals(this.getOrderType())) {    this.setTrailingPercent((new Money(0)).getBigDecimalValue());  }}  }
class C{  private final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public ClusterSearchShardsRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  @Override public boolean isLast() throws SQLException {  try {    debugCodeCall("isLast");    checkClosed();    int row=result.getRowId();    return row >= 0 && row == result.getRowCount() - 1;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void applyStyles(){  if (fText == null || fText.isDisposed())   return;  IStructuredModel model=null;  try {    model=getDomModel();    IStructuredDocumentRegion documentRegion=model.getStructuredDocument().getFirstStructuredDocumentRegion();    while (documentRegion != null) {      ITextRegionList regions=documentRegion.getRegions();      for (int i=0; i < regions.size(); i++) {        ITextRegion currentRegion=regions.get(i);        String namedStyle=(String)fContextToStyleMap.get(currentRegion.getType());        if (namedStyle == null)         continue;        TextAttribute attribute=getAttributeFor(namedStyle);        if (attribute == null)         continue;        StyleRange style=new StyleRange(documentRegion.getStartOffset(currentRegion),currentRegion.getTextLength(),attribute.getForeground(),attribute.getBackground(),attribute.getStyle());        style.strikeout=(attribute.getStyle() & TextAttribute.STRIKETHROUGH) != 0;        style.underline=(attribute.getStyle() & TextAttribute.UNDERLINE) != 0;        fText.setStyleRange(style);        Position[] positions=null;        for (        AbstractAngularSemanticHighlighting highlighting : SemanticHighlightingManager.getInstance().getHighlightings()) {          positions=highlighting.consumes(documentRegion,model.getIndexedRegion(documentRegion.getStartOffset()));          if (positions != null) {            for (int j=0; j < positions.length; j++) {              Position position=positions[j];              StyleRange styleRange=createStyleRange(getAttributeFor(highlighting.getStyleStringKey()),position);              fText.setStyleRange(styleRange);            }          }        }      }      documentRegion=documentRegion.getNext();    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (model != null) {      model.releaseFromRead();    }  }}  }
class C{  private static Collection clone(Collection list) throws CloneNotSupportedException {  Collection result=null;  if (list != null) {    try {      List clone=(List)list.getClass().newInstance();      Iterator iterator=list.iterator();      while (iterator.hasNext()) {        clone.add(KeyToGroupMap.clone(iterator.next()));      }      result=clone;    } catch (    Exception e) {      throw new CloneNotSupportedException("Exception.");    }  }  return result;}  }
class C{  private void init() throws Exception {  lAttribute.setValue(Msg.translate(m_ctx,"Attribute").replace("&",""));  lValue.setValue(Msg.translate(m_ctx,"Value").replace("&",""));  lSetFor.setValue(Msg.getMsg(m_ctx,"ValuePreferenceSetFor"));  cbClient.setLabel(Msg.translate(m_ctx,"AD_Client_ID"));  cbOrg.setLabel(Msg.translate(m_ctx,"AD_Org_ID"));  cbUser.setLabel(Msg.translate(m_ctx,"AD_User_ID"));  cbUser.setChecked(true);  cbWindow.setLabel(Msg.translate(m_ctx,"AD_Window_ID"));  cbWindow.setChecked(true);  setPanel.appendChild(setLayout);  fAttribute.setReadonly(true);  fValue.setReadonly(true);  Vbox box=new Vbox();  box.setWidth("100%");  box.setHeight("100%");  box.setParent(this);  box.appendChild(setPanel);  Rows rows=new Rows();  rows.setParent(setLayout);  Row row=new Row();  row.setSpans("1, 4, 1");  Div div=new Div();  div.setStyle("text-align: right");  div.appendChild(lAttribute);  row.appendChild(div);  row.appendChild(fAttribute);  fAttribute.setWidth("100%");  row.appendChild(lAttributeValue);  rows.appendChild(row);  row=new Row();  row.setSpans("1, 4, 1");  div=new Div();  div.setStyle("text-align: right");  div.appendChild(lValue);  row.appendChild(div);  row.appendChild(fValue);  fValue.setWidth("100%");  row.appendChild(lValueValue);  rows.appendChild(row);  row=new Row();  div=new Div();  div.setStyle("text-align: right");  div.appendChild(lSetFor);  row.appendChild(div);  row.appendChild(cbClient);  row.appendChild(cbOrg);  row.appendChild(cbUser);  row.appendChild(cbWindow);  rows.appendChild(row);  row=new Row();  row.setSpans("1, 5");  row.appendChild(new Space());  row.appendChild(lExplanation);  rows.appendChild(row);  Separator separator=new Separator();  separator.setBar(true);  separator.setHeight("20px");  box.appendChild(separator);  box.appendChild(confirmPanel);  this.setBorder("normal");  setLayout.makeNoStrip();  setLayout.setOddRowSclass("even");}  }
class C{  public static String convertUrl(String baseUrl,Verb httpVerb,Map<String,String> params){  try {    StringBuilder urlBuilder=new StringBuilder(httpVerb.name()).append(SEPARATOR).append(URLEncoder.encode(baseUrl,"UTF-8")).append(SEPARATOR);    StringBuilder paramsBuilder=new StringBuilder();    Set<Map.Entry<String,String>> values=params.entrySet();    for (    Map.Entry<String,String> param : values) {      paramsBuilder.append(param.getKey()).append(EQUAL).append(param.getValue()).append(SEPARATOR);    }    String paramsEncoded=URLEncoder.encode(paramsBuilder.deleteCharAt(paramsBuilder.lastIndexOf(SEPARATOR)).toString(),"UTF-8");    return urlBuilder.append(paramsEncoded).toString();  } catch (  UnsupportedEncodingException e) {    return null;  }}  }
class C{  public Duration minus(Duration duration){  long secsToSubtract=duration.getSeconds();  int nanosToSubtract=duration.getNano();  if (secsToSubtract == Long.MIN_VALUE) {    return plus(Long.MAX_VALUE,-nanosToSubtract).plus(1,0);  }  return plus(-secsToSubtract,-nanosToSubtract);}  }
class C{  @Override public void trigger(final DialogueState systemState,Collection<String> updatedVars){  if (updatedVars.contains(system.getSettings().systemOutput)) {    (new Thread(null)).start();  }}  }
class C{  @Override public boolean isBroadcastDomainPort(DatapathId sw,OFPort port){  return isBroadcastDomainPort(sw,port,true);}  }
class C{  boolean containsAttribute(String key){  return attributes.containsKey(key);}  }
class C{  public boolean isManager(){  return this.equals(MANAGER);}  }
class C{  public synchronized boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof Map))   return false;  Map t=(Map)o;  if (t.size() != size()) {    return false;  }  try {    Iterator i=entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      Object key=e.getKey();      Object value=e.getValue();      if (value == null) {        if (!(t.get(key) == null && t.containsKey(key)))         return false;      } else {        if (!value.equals(t.get(key)))         return false;      }    }  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }  return true;}  }
class C{  @Override public ICircle defaultEntity(){  return nullEntry;}  }
class C{  public NTNumericCredential(long token){  this.impersonationToken=token;}  }
class C{  public void clearTraktMovies(){  List<BaseMovie> traktCollection=new ArrayList<>();  List<BaseMovie> traktWatched=new ArrayList<>();  try {    traktCollection=TRAKT.sync().collectionMovies(Extended.DEFAULT_MIN);    traktWatched=TRAKT.sync().watchedMovies(Extended.DEFAULT_MIN);  } catch (  RetrofitError e) {    handleRetrofitError(e);    return;  }catch (  OAuthUnauthorizedException e) {    try {      refreshAccessToken();      traktCollection=TRAKT.sync().collectionMovies(Extended.DEFAULT_MIN);      traktWatched=TRAKT.sync().watchedMovies(Extended.DEFAULT_MIN);    } catch (    Exception e1) {      if (e1.getCause() instanceof RetrofitError) {        handleRetrofitError((RetrofitError)e1.getCause());      } else {        LOGGER.error("could not retrieve trakt.tv response: ",e1.getMessage());      }      return;    }  }  LOGGER.info("You have " + traktCollection.size() + " movies in your Trakt.tv collection");  LOGGER.info("You have " + traktWatched.size() + " movies watched");  List<SyncMovie> movieToRemove=new ArrayList<>();  for (  BaseMovie traktMovie : traktCollection) {    movieToRemove.add(toSyncMovie(traktMovie));  }  if (!movieToRemove.isEmpty()) {    try {      SyncItems items=new SyncItems().movies(movieToRemove);      TRAKT.sync().deleteItemsFromCollection(items);      LOGGER.info("removed " + movieToRemove.size() + " movies from your trakt.tv collection");    } catch (    RetrofitError e) {      handleRetrofitError(e);      return;    }catch (    OAuthUnauthorizedException e) {      handleRetrofitError((RetrofitError)e.getCause());      return;    }  }  movieToRemove.clear();  for (  BaseMovie traktMovie : traktWatched) {    movieToRemove.add(toSyncMovie(traktMovie));  }  if (!movieToRemove.isEmpty()) {    try {      SyncItems items=new SyncItems().movies(movieToRemove);      TRAKT.sync().deleteItemsFromWatchedHistory(items);      LOGGER.info("removed " + movieToRemove.size() + " movies from your trakt.tv watched");    } catch (    RetrofitError e) {      handleRetrofitError(e);      return;    }catch (    OAuthUnauthorizedException e) {      handleRetrofitError((RetrofitError)e.getCause());      return;    }  }}  }
class C{  public static void dump_machine(){  lalr_state ordered[]=new lalr_state[lalr_state.number()];  for (Enumeration s=lalr_state.all(); s.hasMoreElements(); ) {    lalr_state st=(lalr_state)s.nextElement();    ordered[st.index()]=st;  }  System.err.println("===== Viable Prefix Recognizer =====");  for (int i=0; i < lalr_state.number(); i++) {    if (ordered[i] == start_state)     System.err.print("START ");    System.err.println(ordered[i]);    System.err.println("-------------------");  }}  }
class C{  public RemoteRepositoryManager(final String serviceURL,final boolean useLBS,final HttpClient httpClient,final Executor executor){  if (serviceURL == null)   throw new IllegalArgumentException();  this.baseServiceURL=serviceURL;  this.useLBS=useLBS;  if (httpClient == null) {    this.httpClient=our_httpClient=HttpClientConfigurator.getInstance().newInstance();  } else {    this.httpClient=httpClient;    this.our_httpClient=null;  }  if (executor == null) {    this.executor=our_executor=Executors.newCachedThreadPool(DaemonThreadFactory.defaultThreadFactory());  } else {    this.executor=executor;    this.our_executor=null;  }  assertHttpClientRunning();  this.transactionManager=new RemoteTransactionManager(this);  setMaxRequestURLLength(Integer.parseInt(System.getProperty(MAX_REQUEST_URL_LENGTH,Integer.toString(DEFAULT_MAX_REQUEST_URL_LENGTH))));  setQueryMethod(System.getProperty(QUERY_METHOD,DEFAULT_QUERY_METHOD));  try {    ServiceProviderHook.forceLoad();  } catch (  java.lang.NoClassDefFoundError|java.lang.ExceptionInInitializerError e) {    if (log.isInfoEnabled()) {      log.info(EXCEPTION_MSG);    }  }}  }
class C{  public static List<Extension> loadExtensions(Connection conn,Properties props,String extensionClassNames,String errorMessageKey,ExceptionInterceptor exceptionInterceptor) throws SQLException {  List<Extension> extensionList=new LinkedList<Extension>();  List<String> interceptorsToCreate=StringUtils.split(extensionClassNames,",",true);  String className=null;  try {    for (int i=0, s=interceptorsToCreate.size(); i < s; i++) {      className=interceptorsToCreate.get(i);      Extension extensionInstance=(Extension)Class.forName(className).newInstance();      extensionInstance.init(conn,props);      extensionList.add(extensionInstance);    }  } catch (  Throwable t) {    SQLException sqlEx=SQLError.createSQLException(Messages.getString(errorMessageKey,new Object[]{className}),exceptionInterceptor);    sqlEx.initCause(t);    throw sqlEx;  }  return extensionList;}  }
class C{  public MultiplexingDatagramSocket() throws SocketException {}  }
class C{  public void pause(){}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public static String matrixToString(double[][] matrix){  StringBuffer result=new StringBuffer();  int last=matrix.length - 1;  for (int i=0; i <= last; i++) {    for (int j=0; j <= last; j++) {      result.append(Utils.doubleToString(matrix[i][j],6,2) + " ");      if (j == last) {        result.append('\n');      }    }  }  return result.toString();}  }
class C{  public static void print(char[] chars){  for (int i=0; i < chars.length; i++) {    System.out.print(chars[i]);  }  System.out.println();}  }
class C{  public boolean isStrategyWorkerRunning(String key){  if (m_strategyWorkers.containsKey(key)) {    StrategyRule strategy=m_strategyWorkers.get(key);    if (!strategy.isDone()) {      return true;    }  }  return false;}  }
class C{  public Object put(Object key,Object value){  Entry t=root;  if (t == null) {    incrementSize();    root=new Entry(key,value,null);    return null;  }  while (true) {    int cmp=compare(key,t.key);    if (cmp == 0) {      return t.setValue(value);    } else     if (cmp < 0) {      if (t.left != null) {        t=t.left;      } else {        incrementSize();        t.left=new Entry(key,value,t);        fixAfterInsertion(t.left);        return null;      }    } else {      if (t.right != null) {        t=t.right;      } else {        incrementSize();        t.right=new Entry(key,value,t);        fixAfterInsertion(t.right);        return null;      }    }  }}  }
class C{  public static String classNameToVariableName(String className){  assert !className.contains(".");  assert !className.contains("[");  assert !className.equals("");  return Character.toLowerCase(className.charAt(0)) + className.substring(1);}  }
class C{  public static void renderPairwiseOrthogonal(ComplexVector vec1,ComplexVector vec2){  IncompatibleVectorsException.checkVectorsCompatible(vec1,vec2);  if (vec1.getOpMode() != ComplexVector.Mode.CARTESIAN)   vec1.toCartesian();  if (vec2.getOpMode() != ComplexVector.Mode.CARTESIAN)   vec2.toCartesian();  float[] coordinates1=vec1.getCoordinates();  float[] coordinates2=vec2.getCoordinates();  for (int i=0; i < vec1.getDimension() * 2; i+=2) {    double resultThisPair=coordinates1[i] * coordinates2[i];    resultThisPair+=coordinates1[i + 1] * coordinates2[i + 1];    double norm1=coordinates1[i] * coordinates1[i];    norm1+=coordinates1[i + 1] * coordinates1[i + 1];    double norm2=coordinates2[i] * coordinates2[i];    norm2+=coordinates2[i + 1] * coordinates2[i + 1];    norm1=Math.sqrt(norm1);    norm2=Math.sqrt(norm2);    double cosine=0;    if (norm1 > 0 && norm2 > 0)     cosine=resultThisPair / (norm1 * norm2);    coordinates1[i]=(float)(coordinates1[i] - cosine * coordinates2[i]);    coordinates1[i + 1]=(float)(coordinates1[i + 1] - cosine * coordinates2[i + 1]);  }}  }
class C{  public static <S extends HasMouseMoveHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseMoveEvent event=new MouseMoveEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void removeLayoutComponent(Component comp){}  }
class C{  public void addSelectQuery(String query){  if (query != null && !query.isEmpty()) {    querylist.set(query,0);  }}  }
class C{  public void forceTermination(){  final Phaser root=this.root;  long s;  while ((s=root.state) >= 0) {    if (U.compareAndSwapLong(root,STATE,s,s | TERMINATION_BIT)) {      releaseWaiters(0);      releaseWaiters(1);      return;    }  }}  }
class C{  public void info(String s){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,s,null);  }}  }
class C{  private void releaseWaiters(int phase){  QNode q;  Thread t;  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) {    if (head.compareAndSet(q,q.next) && (t=q.thread) != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  @SuppressLint("WrongViewCast") public void showCenterizedTitleActionBar(String title){  statusnow=exstatus.TITLECUSTOM;  ab.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);  ab.setCustomView(titlelayoutRef);  ab.setDisplayShowTitleEnabled(false);  ab.setDisplayUseLogoEnabled(false);  ab.setDisplayShowCustomEnabled(true);  final TV text=(TV)ab.getCustomView().findViewById(R.id.title_display);  text.setText(title);  actionbartitle=title;  if (listener != null) {    listener.onShowCenterTextActionBar(ab,title);  }}  }
class C{  public double sum(){  Cell[] as=cells;  Cell a;  double sum=Double.longBitsToDouble(base);  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       sum+=Double.longBitsToDouble(a.value);    }  }  return sum;}  }
class C{  public HistogramModel(List<double[]> newData,List<String> dataNames,int bins,String title,String xAxisName,String yAxisName,Color[] colorPallet){  this.bins=bins;  this.dataNames=dataNames;  if (newData == null) {    addDataSources(INITIAL_DATA_SOURCES);  } else {    this.data=newData;  }  for (int i=0, n=data.size(); i < n; i++) {    if (data.get(i).length != 0) {      ((OverwritableHistogramDataset)dataSet).overwriteSeries(dataNames.get(i),data.get(i),getBins());    }  }}  }
class C{  private Composite createDiffViewers(Composite parent,final FormToolkit toolkit,List<TaskAttribute> diffTaskAttributes){  Composite composite=toolkit.createComposite(parent);  GridLayout contentLayout=new GridLayout();  contentLayout.marginHeight=0;  contentLayout.marginWidth=0;  composite.setLayout(contentLayout);  for (  final TaskAttribute diffTaskAttribute : diffTaskAttributes) {    createDiffViewer(toolkit,composite,diffTaskAttribute);  }  return composite;}  }
class C{  boolean isRunning(){  return state == State.RUNNING;}  }
class C{  public void hideAppMenu(){  if (mAppMenu != null && mAppMenu.isShowing())   mAppMenu.dismiss();}  }
class C{  public static boolean isStringType(int type){  return type == Value.STRING || type == Value.STRING_FIXED || type == Value.STRING_IGNORECASE;}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public void dispose(){  mListeners.clear();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @SuppressWarnings("unchecked") private void doStorageTests(SolrResourceLoader loader,StorageIO storageIO) throws Exception {  String resourceId="/test/foo";  JsonStorage jsonStorage=new JsonStorage(storageIO,loader);  Map<String,String> managedInitArgs=new HashMap<>();  managedInitArgs.put("ignoreCase","true");  managedInitArgs.put("dontIgnoreCase","false");  List<String> managedList=new ArrayList<>();  managedList.addAll(Arrays.asList("a","b","c","d","e"));  Map<String,Object> toStore=new HashMap<>();  toStore.put(ManagedResource.INIT_ARGS_JSON_FIELD,managedInitArgs);  toStore.put(ManagedResource.MANAGED_JSON_LIST_FIELD,managedList);  jsonStorage.store(resourceId,toStore);  String storedResourceId=jsonStorage.getStoredResourceId(resourceId);  assertTrue(storedResourceId + " file not found!",storageIO.exists(storedResourceId));  Object fromStorage=jsonStorage.load(resourceId);  assertNotNull(fromStorage);  Map<String,Object> storedMap=(Map<String,Object>)fromStorage;  Map<String,Object> storedArgs=(Map<String,Object>)storedMap.get(ManagedResource.INIT_ARGS_JSON_FIELD);  assertNotNull(storedArgs);  assertEquals("true",storedArgs.get("ignoreCase"));  List<String> storedList=(List<String>)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);  assertNotNull(storedList);  assertTrue(storedList.size() == managedList.size());  assertTrue(storedList.contains("a"));  managedInitArgs.put("anotherArg","someValue");  managedList.add("f");  jsonStorage.store(resourceId,toStore);  fromStorage=jsonStorage.load(resourceId);  assertNotNull(fromStorage);  storedMap=(Map<String,Object>)fromStorage;  storedArgs=(Map<String,Object>)storedMap.get(ManagedResource.INIT_ARGS_JSON_FIELD);  assertNotNull(storedArgs);  assertEquals("someValue",storedArgs.get("anotherArg"));  storedList=(List<String>)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);  assertNotNull(storedList);  assertTrue(storedList.size() == managedList.size());  assertTrue(storedList.contains("e"));}  }
class C{  protected String readLine() throws IOException {  StringBuilder sb=new StringBuilder();  int c;  while ((c=inputStream.read()) != -1) {    if (c == '\r')     continue;    if (c == '\n')     break;    sb.append((char)c);  }  return sb.toString();}  }
class C{  public Nodes buildFragment(InputSource is,String context) throws IOException, ParsingException {  xomTreeBuilder.setFragmentContext(context.intern());  tokenize(is);  return xomTreeBuilder.getDocumentFragment();}  }
class C{  public ApplierException(String message,Throwable cause){  super(message,cause);}  }
class C{  public long skipUntil(char c) throws IllegalArgumentException, IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  long counter=0;  while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {    if (lookaheadChar == '\n') {      lineCounter++;    }    lookaheadChar=super.read();    counter++;  }  return counter;}  }
class C{  @Override public ValidationMessage[] validate(String prefix,String uri,PageData page){  System.out.println("---------- Prefix=" + prefix + " URI="+ uri+ "----------");  InputStream is=page.getInputStream();  while (true) {    try {      int ch=is.read();      if (ch < 0)       break;      System.out.print((char)ch);    } catch (    IOException e) {      break;    }  }  System.out.println();  System.out.println("-----------------------------------------------");  return (null);}  }
class C{  private void processEntryElement(final StartElement interproStartElement,final XMLEventReader reader,final Map<SignatureLibrary,SignatureLibraryIntegratedMethods> libraryMethods) throws XMLStreamException {  String interProEntryDescription=null;  Set<GoTerm> goTerms=null;  Map<SignatureLibrary,List<String>> sigLibToMethodAcMap=null;  final String entryAccession=this.retrieveAttributeValue(interproStartElement,QNAME_AT_ID,true,"/interprodb/interpro/@id");  XMLEvent currentEvent;  boolean stillInEntryElement=true;  while (stillInEntryElement) {    currentEvent=reader.nextEvent();    if (currentEvent.isEndElement()) {      final EndElement endElement=currentEvent.asEndElement();      stillInEntryElement=!EL_INTERPRO.equals(endElement.getName().getLocalPart());    } else     if (currentEvent.isStartElement()) {      final StartElement startElement=currentEvent.asStartElement();      final String elementName=startElement.getName().getLocalPart();      if (EL_NAME.equals(elementName)) {        interProEntryDescription=retrieveElementCdata(reader,true,"/interprodb/interpro/name");      } else       if (EL_MEMBER_LIST.equals(elementName)) {        sigLibToMethodAcMap=processMemberDatabaseXrefs(reader);      } else       if (EL_CLASS_LIST.equals(elementName)) {        goTerms=processGoTerms(reader);      }    }  }  if (sigLibToMethodAcMap != null && sigLibToMethodAcMap.size() > 0) {    if (interProEntryDescription == null || entryAccession == null) {      throw new IllegalStateException("Finished parsing an 'interpro' element, but have not found the ID and name for the InterPro entry.");    }    final InterProEntry interproEntry=new InterProEntry(entryAccession,interProEntryDescription,goTerms);    for (    SignatureLibrary sigLib : sigLibToMethodAcMap.keySet()) {      if (!libraryMethods.keySet().contains(sigLib)) {        libraryMethods.put(sigLib,new SignatureLibraryIntegratedMethods(sigLib));      }      for (      String methodAccession : sigLibToMethodAcMap.get(sigLib)) {        SignatureLibraryIntegratedMethods integratedMethods=libraryMethods.get(sigLib);        if (integratedMethods.containsAccession(methodAccession)) {          throw new IllegalStateException("The method accession " + methodAccession + " appears in more than one InterPro Entry in the InterPro XML file.");        }        integratedMethods.addMethodEntryMapping(methodAccession,interproEntry);      }    }  }}  }
class C{  protected ComposedTypeRefImpl(){  super();}  }
class C{  public int addBoxPlot(String name,Color color,double[][] XY,double[][] dXdY){  return ((Plot2DCanvas)plotCanvas).addBoxPlot(name,color,XY,dXdY);}  }
class C{  public static Key generateX509Key(Key base){  Key key=null;  try {    X509EncodedKeySpec encodedKeySpec=new X509EncodedKeySpec(base.getEncoded());    KeyFactory keyFactory=KeyFactory.getInstance("RSA");    key=keyFactory.generatePublic(encodedKeySpec);  } catch (  Exception ex) {    GlowServer.logger.log(Level.SEVERE,"Unable to generate X509 encoded key",ex);  }  return key;}  }
class C{  public NameValue name(final String name){  this.name=name;  return this;}  }
class C{  public boolean test(Attribute att){  return test(att,false);}  }
class C{  public @Test final void testAddGrant(){  Role role=new Role(TEST_ROLE);  SecurityObject grant=new Grant(TEST_DESCR);  assertThat(role.getGrants()).hasSize(0);  role.addGrant(grant);  assertThat(role.getGrants()).hasSize(1);}  }
class C{  @Override public TypeVisibility isVisible(Resource contextResource,TVariable t){  TypeAccessModifier typeAccessModifier=t.getTypeAccessModifier();  return isVisible(contextResource,typeAccessModifier,t);}  }
class C{  public boolean empty(){  return first == last;}  }
class C{  private boolean loadCustomEmote(String line){  if (line.startsWith("#")) {    return false;  }  String code=null;  boolean literal=true;  String url=null;  int emoteset=Emoticon.SET_UNDEFINED;  int id=Emoticon.ID_UNDEFINED;  Dimension size=null;  String streamRestriction=null;  String[] split=line.trim().split("\\s+");  for (int i=0; i < split.length; i++) {    String item=split[i];    if (item.startsWith("re:") && item.length() > "re:".length()) {      literal=false;      code=item.substring("re:".length());    } else     if (item.startsWith("id:")) {      try {        id=Integer.parseInt(item.substring("id:".length()));      } catch (      NumberFormatException ex) {      }    } else     if (item.startsWith("set:")) {      try {        emoteset=Integer.parseInt(item.substring("set:".length()));      } catch (      NumberFormatException ex) {      }    } else     if (item.startsWith("chan:") && item.length() > "chan:".length()) {      streamRestriction=Helper.toStream(item.substring("chan:".length()));    } else     if (item.startsWith("size:")) {      try {        String[] sizes=item.substring("size:".length()).split("x");        int width=Integer.parseInt(sizes[0]);        int height=Integer.parseInt(sizes[1]);        size=new Dimension(width,height);      } catch (      NumberFormatException|ArrayIndexOutOfBoundsException ex) {      }    } else {      if (code == null) {        code=item;      } else       if (url == null) {        url=item;        if (!item.startsWith("http")) {          try {            Path path=Paths.get(Chatty.getUserDataDirectory()).resolve(Paths.get(url));            url=path.toUri().toURL().toString();          } catch (          MalformedURLException ex) {            url=null;          }        }      } else {      }    }  }  if (code != null && url != null) {    Emoticon.Builder b=new Emoticon.Builder(Emoticon.Type.CUSTOM,code,url);    b.setLiteral(literal).setEmoteset(emoteset);    b.setNumericId(id);    if (size != null) {      b.setSize(size.width,size.height);    }    b.addStreamRestriction(streamRestriction);    Emoticon emote=b.build();    customEmotes.add(emote);    if (id != Emoticon.ID_UNDEFINED) {      customEmotesById.put(id,emote);    }    return true;  }  return false;}  }
class C{  public ScServerHba addHbaToServer(String instanceId,String iqnOrWwn,boolean isIscsi){  Parameters params=new Parameters();  params.add("HbaPortType",isIscsi ? "Iscsi" : "FibreChannel");  params.add("WwnOrIscsiName",iqnOrWwn);  params.add("AllowManual",true);  RestResult rr=restClient.post(String.format("StorageCenter/ScPhysicalServer/%s/AddHba",instanceId),params.toJson());  if (!checkResults(rr)) {    LOG.warn("Error adding HBA to server {}",rr.getErrorMsg());    return null;  }  return gson.fromJson(rr.getResult(),ScServerHba.class);}  }
class C{  public NotificationChain basicSetTrueCase(Expression newTrueCase,NotificationChain msgs){  Expression oldTrueCase=trueCase;  trueCase=newTrueCase;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.CONDITIONAL_EXPRESSION__TRUE_CASE,oldTrueCase,newTrueCase);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public void MONITORENTER(){  this.env.topFrame().operandStack.popRef();  return;}  }
class C{  public SQLFeatureNotSupportedException(String reason){  super(reason,null,0);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Throwable fillInStackTrace()")) {    java_lang_Throwable_fillInStackTrace(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void resetCatalog(URI tenantId){  UriBuilder uriBuilder=client.uriBuilder(PathConstants.CATALOG_RESET_URL);  if (tenantId != null) {    uriBuilder=uriBuilder.queryParam(SearchConstants.TENANT_ID_PARAM,tenantId);  }  client.postURI(String.class,uriBuilder.build());}  }
class C{  public List<GenericValue> makeAllAdjustments(){  List<GenericValue> allAdjs=FastList.newInstance();  for (  GenericValue orderAdjustment : this.getAdjustments()) {    allAdjs.add(orderAdjustment);    if ("SHIPPING_CHARGES".equals(orderAdjustment.get("orderAdjustmentTypeId"))) {      Iterator<GenericValue> fsppas=this.freeShippingProductPromoActions.iterator();      while (fsppas.hasNext()) {      }    }  }  for (  ShoppingCartItem item : cartLines) {    Collection<GenericValue> adjs=item.getAdjustments();    if (adjs != null) {      for (      GenericValue orderAdjustment : adjs) {        orderAdjustment.set("orderItemSeqId",item.getOrderItemSeqId());        allAdjs.add(orderAdjustment);        if ("SHIPPING_CHARGES".equals(orderAdjustment.get("orderAdjustmentTypeId"))) {          Iterator<GenericValue> fsppas=this.freeShippingProductPromoActions.iterator();          while (fsppas.hasNext()) {          }        }      }    }  }  return allAdjs;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SETEND");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  protected void prepareRequestContextHeader(MediaType... headerMediaType) throws Exception {  context=createODataRequestContext(createODataRequest(GET,headerMediaType),createODataUriForServiceDocument(),entityDataModel);}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  public SteadyStateGA(ChromosomeFactory<T> factory){  super(factory);}  }
class C{  public ProbeTable addProduct(int vendorId,int productId,Class<? extends UsbSerialDriver> driverClass){  mProbeTable.put(Pair.create(vendorId,productId),driverClass);  return this;}  }
class C{  @Override public boolean isConnected(){  return (getRestTemplate() != null);}  }
class C{  public double nextDouble(){  return nextDouble(this.tau);}  }
class C{  boolean validate(final Color color,final Composite blend){  if (!validated) {    if (!tilesets.isEmpty()) {      for (      TileSetDefinition def : tilesets) {        add(def,color,blend);      }      tilesets.clear();      validated=true;      return true;    }    return false;  }  return true;}  }
class C{  public final int size(){  return written;}  }
class C{  public MMemo(Properties ctx,int AD_User_ID,int AD_Table_ID,int Record_ID,String comment,String trxName){  this(ctx,0,trxName);  setRecord(AD_Table_ID,Record_ID);  setComments(comment);}  }
class C{  @ExceptionHandler(value=ActivitiException.class) @ResponseBody public ErrorInformation handleActivitiException(Exception exception,HttpServletResponse response){  if ((ExceptionUtils.indexOfThrowable(exception,ActivitiClassLoadingException.class) != -1) || (ExceptionUtils.indexOfType(exception,ELException.class) != -1)) {    return getErrorInformationAndSetStatus(HttpStatus.BAD_REQUEST,exception,response);  } else {    logError("An Activiti error occurred.",exception);    return getErrorInformationAndSetStatus(HttpStatus.INTERNAL_SERVER_ERROR,exception,response);  }}  }
class C{  public void add(final GeneratedMessage.GeneratedExtension<?,?> extension){  if (extension.getDescriptor().getJavaType() == FieldDescriptor.JavaType.MESSAGE) {    if (extension.getMessageDefaultInstance() == null) {      throw new IllegalStateException("Registered message-type extension had null default instance: " + extension.getDescriptor().getFullName());    }    add(new ExtensionInfo(extension.getDescriptor(),extension.getMessageDefaultInstance()));  } else {    add(new ExtensionInfo(extension.getDescriptor(),null));  }}  }
class C{  public OKA2(){  super(3,2);}  }
class C{  @Scheduled(cron="0 0 * * * *") public void check(){  try {    List<ReportDescription> descriptionList=repository.findAll();    if (descriptionList == null || descriptionList.isEmpty()) {      logger.trace("have no report description");      return;    }    ReportDescription description=descriptionList.get(0);    if (!description.getActive()) {      logger.trace("description is not active");      return;    }    Calendar cal=Calendar.getInstance();    cal.setTime(new Date());    Integer nowHour=cal.get(Calendar.HOUR_OF_DAY);    if (nowHour.equals(description.getTime().getHour())) {      cal.add(Calendar.DAY_OF_MONTH,-1);      generator.generate(description,cal.getTime());      coreService.syncUnreadReportCount();    }  } catch (  Exception e) {    logger.error(e.getMessage(),e);  }}  }
class C{  public void error(Element e,String msg,Object... args){  messager.printMessage(Diagnostic.Kind.ERROR,String.format(msg,args),e);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public int numObjectsAtLocationOfObject(final Object obj){  LocationAndIndex lai=((LocationAndIndex)(locationAndIndexHash.get(obj)));  if (lai == null)   return 0;  assert sim.util.LocationLog.it(this,lai.location);  return lai.otherObjectsAtLocation.numObjs;}  }
class C{  public void ReInit(JavaCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public static String toString(int dir){switch (dir) {case LEFT_TO_RIGHT:    return "Left-to-Right";case RIGHT_TO_LEFT:  return "Right-to-Left";case EUROPEAN_NUMBER:return "European Number";case EUROPEAN_NUMBER_SEPARATOR:return "European Number Separator";case EUROPEAN_NUMBER_TERMINATOR:return "European Number Terminator";case ARABIC_NUMBER:return "Arabic Number";case COMMON_NUMBER_SEPARATOR:return "Common Number Separator";case BLOCK_SEPARATOR:return "Paragraph Separator";case SEGMENT_SEPARATOR:return "Segment Separator";case WHITE_SPACE_NEUTRAL:return "Whitespace";case OTHER_NEUTRAL:return "Other Neutrals";case LEFT_TO_RIGHT_EMBEDDING:return "Left-to-Right Embedding";case LEFT_TO_RIGHT_OVERRIDE:return "Left-to-Right Override";case RIGHT_TO_LEFT_ARABIC:return "Right-to-Left Arabic";case RIGHT_TO_LEFT_EMBEDDING:return "Right-to-Left Embedding";case RIGHT_TO_LEFT_OVERRIDE:return "Right-to-Left Override";case POP_DIRECTIONAL_FORMAT:return "Pop Directional Format";case DIR_NON_SPACING_MARK:return "Non-Spacing Mark";case BOUNDARY_NEUTRAL:return "Boundary Neutral";}return "Unassigned";}  }
class C{  void pushImportSource(Source sourceFromURIResolver){  m_importSourceStack.push(sourceFromURIResolver);}  }
class C{  private static TriangulationPoint nextFlipPoint(TriangulationPoint ep,TriangulationPoint eq,DelaunayTriangle ot,TriangulationPoint op){  Orientation o2d=orient2d(eq,op,ep);  if (o2d == Orientation.CW) {    return ot.pointCCW(op);  } else   if (o2d == Orientation.CCW) {    return ot.pointCW(op);  } else {    throw new PointOnEdgeException("Point on constrained edge not supported yet");  }}  }
class C{  @Override public int hashCode(){  return (this.data != null ? this.data.hashCode() : 0);}  }
class C{  public static FileDescriptor open(String path,int flags) throws FileNotFoundException {  FileDescriptor fd=null;  try {    int mode=((flags & O_ACCMODE) == O_RDONLY) ? 0 : 0600;    fd=Libcore.os.open(path,flags,mode);    if (fd.valid()) {      if (S_ISDIR(Libcore.os.fstat(fd).st_mode)) {        throw new ErrnoException("open",EISDIR);      }    }    return fd;  } catch (  ErrnoException errnoException) {    try {      if (fd != null) {        IoUtils.close(fd);      }    } catch (    IOException ignored) {    }    FileNotFoundException ex=new FileNotFoundException(path + ": " + errnoException.getMessage());    ex.initCause(errnoException);    throw ex;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_DECLARATOR_1:    return ((InternalEList<?>)getMethodDeclarator_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_11:  return ((InternalEList<?>)getAnonymous_concreteMethodDeclaration_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_BODY_1:return ((InternalEList<?>)getMethodBody_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_21:return ((InternalEList<?>)getAnonymous_concreteMethodDeclaration_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static DateIterator createDateIterator(RecurrenceIterator rit){  return new RecurrenceIteratorWrapper(rit);}  }
class C{  protected EnumAttributeSourceImpl(){  super();}  }
class C{  private static void appendAndStyleText(SpannableStringBuilder builder,SuggestionAnswer.TextField textField,int maxTextHeightSp,Paint.FontMetrics metrics,float density){  String text=textField.getText();  int type=textField.getType();  text=Html.fromHtml(text).toString();  int start=builder.length();  builder.append(Html.fromHtml(text));  int end=builder.length();  AbsoluteSizeSpan sizeSpan=new AbsoluteSizeSpan(getAnswerTextSizeSp(type),true);  builder.setSpan(sizeSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  ForegroundColorSpan colorSpan=new ForegroundColorSpan(getAnswerTextColor(type));  builder.setSpan(colorSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  if (type == ANSWERS_TOP_ALIGNED_TEXT_TYPE) {    TopAlignedSpan topAlignedSpan=new TopAlignedSpan(ANSWERS_TOP_ALIGNED_TEXT_SIZE_SP,maxTextHeightSp,metrics,density);    builder.setSpan(topAlignedSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.815 -0500",hash_original_method="7931502AE551A2F220A0C85C1181EB09",hash_generated_method="1F0A50D12F3AF83BCB8DD4F3AC55A247") private Intent createIntent(String action,Uri data,String extraData,String query,int actionKey,String actionMsg){  Intent intent=new Intent(action);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  if (data != null) {    intent.setData(data);  }  intent.putExtra(SearchManager.USER_QUERY,mUserQuery);  if (query != null) {    intent.putExtra(SearchManager.QUERY,query);  }  if (extraData != null) {    intent.putExtra(SearchManager.EXTRA_DATA_KEY,extraData);  }  if (mAppSearchData != null) {    intent.putExtra(SearchManager.APP_DATA,mAppSearchData);  }  if (actionKey != KeyEvent.KEYCODE_UNKNOWN) {    intent.putExtra(SearchManager.ACTION_KEY,actionKey);    intent.putExtra(SearchManager.ACTION_MSG,actionMsg);  }  intent.setComponent(mSearchable.getSearchActivity());  return intent;}  }
class C{  public static void serializeMeterConfigReply(List<OFMeterConfigStatsReply> meterConfigReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterConfigStatsReply meterConfigReply=meterConfigReplies.get(0);  jGen.writeStringField("version",meterConfigReply.getVersion().toString());  jGen.writeFieldName("meterConfig");  jGen.writeStartArray();  for (  OFMeterBand band : meterConfigReply.getEntries()) {    jGen.writeStartObject();    short type=(short)band.getType();    jGen.writeNumberField("bandType",type);switch (type) {case OFMeterBandTypeSerializerVer13.DROP_VAL:      OFMeterBandDrop bandDrop=(OFMeterBandDrop)band;    jGen.writeNumberField("rate",bandDrop.getRate());  jGen.writeNumberField("burstSize",bandDrop.getBurstSize());break;case OFMeterBandTypeSerializerVer13.DSCP_REMARK_VAL:OFMeterBandDscpRemark bandDscp=(OFMeterBandDscpRemark)band;jGen.writeNumberField("rate",bandDscp.getRate());jGen.writeNumberField("burstSize",bandDscp.getBurstSize());jGen.writeNumberField("precLevel",bandDscp.getPrecLevel());break;case OFMeterBandTypeSerializerVer13.EXPERIMENTER_VAL:OFMeterBandExperimenter bandExp=(OFMeterBandExperimenter)band;jGen.writeNumberField("rate",bandExp.getRate());jGen.writeNumberField("burstSize",bandExp.getBurstSize());jGen.writeNumberField("experimenter",bandExp.getExperimenter());break;default :break;}jGen.writeEndObject();}jGen.writeEndArray();}  }
class C{  public String percentTipText(){  return " The percentage of dimensions (attributes) the data should" + " be reduced to  (inclusive of the class attribute). This " + " NumberOfAttributes option is ignored if this option is"+ " present or is greater than zero.";}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  public PutMappingRequest type(String type){  this.type=type;  return this;}  }
class C{  public int indexOf(byte[] data,byte[] pattern){  int[] failure=computeFailure(pattern);  int j=0;  if (data.length == 0)   return -1;  for (int i=0; i < data.length; i++) {    while (j > 0 && pattern[j] != data[i]) {      j=failure[j - 1];    }    if (pattern[j] == data[i]) {      j++;    }    if (j == pattern.length) {      return i - pattern.length + 1;    }  }  return -1;}  }
class C{  public void animateViewIfNecessary(final int position,@NonNull final View view,@NonNull final Animator[] animators){  if (mShouldAnimate && position > mLastAnimatedPosition) {    if (mFirstAnimatedPosition == -1) {      mFirstAnimatedPosition=position;    }    animateView(position,view,animators);    mLastAnimatedPosition=position;  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 168) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void sendMessage(Message msg) throws MessagingException {  Transport.send(msg);}  }
class C{  public int writeLongShiftedGamma(long x) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (x < MAX_PRECOMPUTED)   return writeInt(SHIFTED_GAMMA[(int)x],SHIFTED_GAMMA[(int)x] >>> 26);  final int msb=Fast.mostSignificantBit(x);  final int l=writeUnary(msb + 1);  return l + (msb > 0 ? writeLong(x,msb) : 0);}  }
class C{  private String renderTupleExpr(TupleExpr theExpr) throws Exception {  SparqlTupleExprRenderer aRenderer=new SparqlTupleExprRenderer();  return aRenderer.render(theExpr);}  }
class C{  public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  if (this.particleAge++ >= this.particleMaxAge) {    this.setExpired();  }  this.setParticleTextureIndex(7 - this.particleAge * 8 / this.particleMaxAge);  this.moveEntity(this.motionX,this.motionY,this.motionZ);  this.motionX=(center.xCoord - posX) * 0.1;  this.motionY=(center.yCoord - posY) * 0.1;  this.motionZ=(center.zCoord - posZ) * 0.1;}  }
class C{  void pruneChild(){  --parent.nchild;  parent.unique+=unique;  parent.total_alpha+=total_alpha;  parent.total_red+=total_red;  parent.total_green+=total_green;  parent.total_blue+=total_blue;  parent.child[id]=null;  --cube.nodes;  cube=null;  parent=null;}  }
class C{  @SuppressWarnings("unchecked") public void initializeDefaultCacheConfiguration(IgniteConfiguration cfg) throws IgniteCheckedException {  List<CacheConfiguration> cacheCfgs=new ArrayList<>();  cacheCfgs.add(marshallerSystemCache());  cacheCfgs.add(utilitySystemCache());  if (IgniteComponentType.HADOOP.inClassPath())   cacheCfgs.add(CU.hadoopSystemCache());  cacheCfgs.add(atomicsSystemCache(cfg.getAtomicConfiguration()));  CacheConfiguration[] userCaches=cfg.getCacheConfiguration();  if (userCaches != null && userCaches.length > 0) {    if (!U.discoOrdered(cfg.getDiscoverySpi()) && !U.relaxDiscoveryOrdered())     throw new IgniteCheckedException("Discovery SPI implementation does not support node ordering and " + "cannot be used with cache (use SPI with @GridDiscoverySpiOrderSupport annotation, " + "like TcpDiscoverySpi)");    for (    CacheConfiguration ccfg : userCaches) {      if (CU.isHadoopSystemCache(ccfg.getName()))       throw new IgniteCheckedException("Cache name cannot be \"" + CU.SYS_CACHE_HADOOP_MR + "\" because it is reserved for internal purposes.");      if (CU.isAtomicsCache(ccfg.getName()))       throw new IgniteCheckedException("Cache name cannot be \"" + CU.ATOMICS_CACHE_NAME + "\" because it is reserved for internal purposes.");      if (CU.isUtilityCache(ccfg.getName()))       throw new IgniteCheckedException("Cache name cannot be \"" + CU.UTILITY_CACHE_NAME + "\" because it is reserved for internal purposes.");      if (CU.isMarshallerCache(ccfg.getName()))       throw new IgniteCheckedException("Cache name cannot be \"" + CU.MARSH_CACHE_NAME + "\" because it is reserved for internal purposes.");      cacheCfgs.add(ccfg);    }  }  cfg.setCacheConfiguration(cacheCfgs.toArray(new CacheConfiguration[cacheCfgs.size()]));  assert cfg.getCacheConfiguration() != null;  for (  CacheConfiguration ccfg : cfg.getCacheConfiguration())   IgfsUtils.prepareCacheConfiguration(cfg,ccfg);}  }
class C{  public SymbolTableEntryOriginal basicGetDelegationTarget(){  return delegationTarget;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION__DECLARED_TYPE_REF:    return declaredTypeRef != null;case N4JSPackage.VARIABLE_DECLARATION__BOGUS_TYPE_REF:  return bogusTypeRef != null;case N4JSPackage.VARIABLE_DECLARATION__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case N4JSPackage.VARIABLE_DECLARATION__ANNOTATIONS:return annotations != null && !annotations.isEmpty();case N4JSPackage.VARIABLE_DECLARATION__EXPRESSION:return expression != null;}return super.eIsSet(featureID);}  }
class C{  private void checkHeadingsHierarchy(Elements elements,TestSolutionHandler testSolutionHandler){  if (elements.isEmpty()) {    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);    return;  }  TestSolution checkResult=TestSolution.PASSED;  Iterator<Element> iter=elements.iterator();  Element element=iter.next();  int indexOfReference=getHeaderIndex(element);  int currentIndex;  int previousIndex=indexOfReference;  Element elementOfReference=element;  Element previousElement=element;  while (iter.hasNext()) {    element=iter.next();    currentIndex=getHeaderIndex(element);    if (currentIndex != -1) {      if (currentIndex - previousIndex >= 2) {        checkResult=TestSolution.FAILED;        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));      } else       if (currentIndex < indexOfReference) {        checkResult=TestSolution.FAILED;        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));      }      previousIndex=currentIndex;      previousElement=element;    }  }  testSolutionHandler.addTestSolution(checkResult);}  }
class C{  public void applyOutlierTreatment(double[] values) throws Exception {  for (int i=0; i < m_miningMeta.size(); i++) {    MiningFieldMetaInfo mfi=m_miningMeta.get(i);    values[i]=mfi.applyOutlierTreatment(values[i]);  }}  }
class C{  private boolean parseRN(ByteBuf buffer) throws RedisCommandParserException {  if (!buffer.isReadable(2))   return false;  byte b=buffer.readByte();  if (b != rID)   throw new RedisCommandParserException("expected \'" + (char)rID + "\', got \'"+ (char)b+ "\'");  b=buffer.readByte();  if (b != nID)   throw new RedisCommandParserException("expected: \'" + (char)nID + "\', got \'"+ (char)b+ "\'");  return true;}  }
class C{  public static Response create3489BindingResponse(TransportAddress mappedAddress,TransportAddress sourceAddress,TransportAddress changedAddress) throws IllegalArgumentException {  Response bindingResponse=new Response();  bindingResponse.setMessageType(Message.BINDING_SUCCESS_RESPONSE);  MappedAddressAttribute mappedAddressAttribute=AttributeFactory.createMappedAddressAttribute(mappedAddress);  SourceAddressAttribute sourceAddressAttribute=null;  if (sourceAddress != null)   sourceAddressAttribute=AttributeFactory.createSourceAddressAttribute(sourceAddress);  ChangedAddressAttribute changedAddressAttribute=null;  if (changedAddress != null)   changedAddressAttribute=AttributeFactory.createChangedAddressAttribute(changedAddress);  bindingResponse.putAttribute(mappedAddressAttribute);  if (sourceAddressAttribute != null)   bindingResponse.putAttribute(sourceAddressAttribute);  if (changedAddressAttribute != null)   bindingResponse.putAttribute(changedAddressAttribute);  return bindingResponse;}  }
class C{  public Splitter createSplitter(){  SplitterImpl splitter=new SplitterImpl();  return splitter;}  }
class C{  protected DeserializableList(final Collection<T> collection){  this(collection,DEFAULT_LABEL);}  }
class C{  private void addLinkToStructure(Map<NodePortTuple,Set<Link>> s,Link l){  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  if (s.get(n1) == null) {    s.put(n1,new HashSet<Link>());  }  if (s.get(n2) == null) {    s.put(n2,new HashSet<Link>());  }  s.get(n1).remove(l);  s.get(n2).remove(l);  s.get(n1).add(l);  s.get(n2).add(l);}  }
class C{  public void copyNodesAndLabels(GeometryGraph geomGraph,int argIndex){  for (Iterator nodeIt=geomGraph.getNodeIterator(); nodeIt.hasNext(); ) {    Node graphNode=(Node)nodeIt.next();    Node newNode=nodes.addNode(graphNode.getCoordinate());    newNode.setLabel(argIndex,graphNode.getLabel().getLocation(argIndex));  }}  }
class C{  private static int[] findDiagonal(final int x,final int y,final boolean[][] matrix,final int minLength){  int rx, ry, yy, xx, i;  for (yy=y; yy < matrix.length; yy++)   for (xx=x; xx < matrix[yy].length; xx++)   if (matrix[yy][xx]) {    rx=xx;    ry=yy;    for (i=1; (yy + i) < matrix.length && (xx + i) < matrix[yy].length; i++)     if (!matrix[yy + i][xx + i])     break;    if (i >= minLength)     return new int[]{rx,ry,i};  }  return null;}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public long maxRate(){  Long max=null;  for (  Sample s : samples) {    if (max == null) {      max=new Long(s.rate());    }    max=Math.max(max,s.rate());  }  return max.longValue();}  }
class C{  public static CashierData instance(final Long id,final Long officeId,String officeName,final Long staffId,final String staffName,final Long tellerId,final String tellerName,final String description,final Date startDate,final Date endDate,final Boolean isFullDay,final String startTime,final String endTime){  return new CashierData(id,officeId,officeName,staffId,staffName,tellerId,tellerName,description,startDate,endDate,isFullDay,startTime,endTime,null);}  }
class C{  protected KernelID createKernelID(int slot,int sig,Element ein,Element eout){  KernelID k=mKIDs.get(slot);  if (k != null) {    return k;  }  int id=mRS.nScriptKernelIDCreate(getID(mRS),slot,sig);  if (id == 0) {    throw new RSDriverException("Failed to create KernelID");  }  k=new KernelID(id,mRS,this,slot,sig);  mKIDs.put(slot,k);  return k;}  }
class C{  @Override public Request<BuilderStatus> cancel(ProjectReference projectReference,long taskId){  List<DummyBuilderStatus> statuses=availableBuilderStatuses.get(projectReference.name());  DummyBuilderStatus found=null;  if (statuses != null && !statuses.isEmpty()) {    for (    DummyBuilderStatus builderStatus : statuses) {      if (taskId == builderStatus.taskId()) {        found=builderStatus;      }    }  }  if (found != null) {    found.setStatus(BuilderState.CANCELLED);    List<DummyBuilderStatus> currents=currentBuilderStatuses.get(projectReference.name());    if (currents != null) {      currents.remove(found);    }  }  return new DummyRequest<BuilderStatus>(found);}  }
class C{  @Override public int proceduralInterval(){  return 5;}  }
class C{  public WriterToUTF8Buffered(OutputStream out){  m_os=out;  m_outputBytes=new byte[BYTES_MAX + 3];  m_inputChars=new char[CHARS_MAX + 2];  count=0;}  }
class C{  public IndTestDirichletScore(DataSet dataSet,double samplePrior,double structurePrior){  if (!(dataSet.isDiscrete())) {    throw new IllegalArgumentException("Data set must be discrete.");  }  this.dataSet=dataSet;  this.samplePrior=samplePrior;  this.structurePrior=structurePrior;  this.score=new DirichletScore(dataSet);  this.score.setSamplePrior(samplePrior);  this.score.setStructurePrior(structurePrior);  this.variables=this.score.getVariables();}  }
class C{  private void validateJobDefinition(JobDefinition jobDefinition){  assertNotNull(jobDefinition);  assertEquals(TEST_ACTIVITI_NAMESPACE_CD,jobDefinition.getNamespace());  assertEquals(TEST_ACTIVITI_JOB_NAME,jobDefinition.getJobName());  assertEquals(JOB_DESCRIPTION,jobDefinition.getDescription());  assertTrue(jobDefinition.getParameters().size() == 1);  Parameter parameter=jobDefinition.getParameters().get(0);  assertEquals(ATTRIBUTE_NAME_1_MIXED_CASE,parameter.getName());  assertEquals(ATTRIBUTE_VALUE_1,parameter.getValue());  assertEquals(HerdDaoSecurityHelper.SYSTEM_USER,jobDefinition.getLastUpdatedByUserId());}  }
class C{  public void abort(Executor executor){  checkClosed();}  }
class C{  public AuthenticationInfo loadSecurityProperties() throws ConfigurationException {  AuthenticationInfo authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties");  if (authInfo == null) {    throw new ServerRuntimeException("Unable to locate security information; ensure security.properties file is configured");  }  return authInfo;}  }
class C{  public CSVParser(Reader input,char delimiter,char encapsulator,char commentStart){  this(input,new CSVStrategy(delimiter,encapsulator,commentStart));}  }
class C{  private void purgeOne(){synchronized (queue) {    WeakKey key=(WeakKey)queue.poll();    if (key != null) {      super.remove(key.getReferenced());    }  }}  }
class C{  public boolean generate(Projection proj){  polarShapeLine=null;  correctFill=false;  setNeedToRegenerate(true);  if (proj == null) {    Debug.message("omgraphic","OMArc: null projection in generate!");    return false;  }  GeneralPath projectedShape=null;switch (renderType) {case RENDERTYPE_OFFSET:    if (!proj.isPlotable(center)) {      setNeedToRegenerate(true);      return false;    }  Point2D p1=proj.forward(center,new Point2D.Double());x1=p1.getX() + off_x;y1=p1.getY() + off_y;case RENDERTYPE_XY:double x=x1 - width / 2d;double y=y1 - height / 2d;Shape arcShape=createArcShape(x,y,width,height);AffineTransform af=null;if (rotationAngle != DEFAULT_ROTATIONANGLE) {af=new AffineTransform();af.rotate(rotationAngle,x1,y1);}PathIterator pi=arcShape.getPathIterator(af);projectedShape=new GeneralPath();projectedShape.append(pi,false);break;case RENDERTYPE_LATLON:GeneralPath specialCaseShape=null;if (proj instanceof GeoProj) {LatLonPoint llCenter=LatLonPoint.getDouble(center);Point2D p=proj.forward(llCenter.getY(),llCenter.getX(),new Point2D.Double());x1=p.getX();y1=p.getY();ArrayList<float[]> coordLists=getCoordLists(((GeoProj)proj),llCenter,radius,nverts);int size=coordLists.size();for (int i=0; i < size; i+=2) {float[] xpoints=(float[])coordLists.get(i);float[] ypoints=(float[])coordLists.get(i + 1);GeneralPath gp=createShape(xpoints,ypoints,(arcType != Arc2D.OPEN || (arcType == Arc2D.OPEN && !isClear(fillPaint))));projectedShape=appendShapeEdge(projectedShape,gp,false);correctFill=proj instanceof Cylindrical && ((shouldCenterBeInShape() && projectedShape != null && !projectedShape.contains(x1,y1)) || correctPolar);if (correctFill) {float[][] alts=doPolarFillCorrection(xpoints,ypoints,(llCenter.getRadLat() > 0f) ? -1 : proj.getWidth() + 1);int gp2length=alts[0].length - 2;GeneralPath gp1=createShape(alts[0],alts[1],true);GeneralPath gp2=createShape(alts[0],alts[1],0,gp2length,false);if (specialCaseShape == null || polarShapeLine == null) {specialCaseShape=gp1;polarShapeLine=gp2;} else {specialCaseShape.append(gp1,false);polarShapeLine.append(gp2,false);}}}} else {double degRadius=Math.toDegrees(radius);specialCaseShape=new GeneralPath(proj.forwardShape(new Arc2D.Double(center.getX() - degRadius,center.getY() - degRadius,2 * degRadius,2 * degRadius,start,extent,arcType)));}if (specialCaseShape != null) {projectedShape=specialCaseShape;}break;case RENDERTYPE_UNKNOWN:System.err.println("OMArc.generate(): invalid RenderType");return false;}setShape(projectedShape);setLabelLocation(projectedShape,proj);setNeedToRegenerate(false);return true;}  }
class C{  public synchronized void ensureUpdated(){}  }
class C{  private boolean isLoggable(){  return Log.isLoggable(tag,level);}  }
class C{  private void deleteTOCTag(SpanManager sm){  int temp=0;  while ((temp=sm.indexOf("__TOC__",temp)) != -1) {    sm.delete(temp,temp + 2 + 3+ 2);  }  temp=0;  while ((temp=sm.indexOf("__NOTOC__",temp)) != -1) {    sm.delete(temp,temp + 2 + 5+ 2);  }}  }
class C{  public static long parseLong(String text,int defaultValue){  try {    return Long.parseLong(text);  } catch (  NumberFormatException|NullPointerException ex) {    return defaultValue;  }}  }
class C{  public GenericRequestBuilder<Uri,?,?,GlideDrawable> loadTinyThumb(Uri uri,Key key){  Size size=clampSize(TINY_THUMB_SIZE,MAXIMUM_SMOOTH_PIXELS,getMaxImageDisplaySize());  return mTinyImageBuilder.clone().load(uri).signature(key).override(size.width(),size.height());}  }
class C{  public boolean isAlwaysUseAbsoluteElevation(){  return this.iconRenderer.isAlwaysUseAbsoluteElevation();}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public boolean isPageBreak(){  return m_isPageBreak;}  }
class C{  public boolean isLoading(){  return state.equals(LOADING);}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public void addButton(String name,String info,ActionListener al){  try {    URL url=PropUtils.getResourceOrFileOrURL(null,name);    if (url != null) {      addButton(url,info,al);    }  } catch (  MalformedURLException murle) {    Debug.error("OMToolSet.addButton: can't create button for " + info);  }}  }
class C{  public long readLong() throws EOFException, FormatException {  assertSize(8);  curptr+=8;  bytesinbuffer-=8;  return MoreMath.BuildLong(buffer,curptr - 8,MSBFirst);}  }
class C{  public E contains(E e){  if (e == null)   return null;  if (head == null) {    return null;  }  DoubleNode<E> n=head;  while (n != null) {    if (n.value.equals(e)) {      return n.value;    }    n=n.next;  }  return null;}  }
class C{  public static void swapCols(DenseDoubleMatrix2D matrix,long col1,long col2){  double temp=0;  long rows=matrix.getRowCount();  for (long row=0; row < rows; row++) {    temp=matrix.getDouble(row,col1);    matrix.setDouble(matrix.getDouble(row,col2),row,col1);    matrix.setDouble(temp,row,col2);  }}  }
class C{  public static <T>Callable<T> memoizeCallable(final Callable<T> s,final Cacheable<T> cache){  return null;}  }
class C{  public RuntimeSorter(boolean ascending){  super(ascending);}  }
class C{  private void flushBuffer() throws IOException {  if (bpos > 0) {    internalWrite(buffer,0,bpos,false);    bpos=0;  }}  }
class C{  public static synchronized void moveLogsFromLegacyDirIfNecessary(){  File sdcardDir=Environment.getExternalStorageDirectory();  File legacyDir=new File(sdcardDir,LEGACY_SAVED_LOGS_DIR);  if (legacyDir.exists() && legacyDir.isDirectory()) {    File savedLogsDir=getSavedLogsDirectory();    for (    File file : legacyDir.listFiles()) {      file.renameTo(new File(savedLogsDir,file.getName()));    }    legacyDir.delete();  }}  }
class C{  public MalformedURLException(String detailMessage){  super(detailMessage);}  }
class C{  public ObjectFactory(){}  }
class C{  private static void logHeadline(String msg){  String txt="======== " + msg + " ==========";  log(txt);}  }
class C{  public NbtTagShort(String name,int value){  super(name);  this.value=(short)value;}  }
class C{  public void testGetName() throws Exception {  CertificateFactory certFactBC=CertificateFactory.getInstance("X.509","BC");  CertificateFactory certFactDRL=CertificateFactory.getInstance("X.509","DRLCertFactory");  X509Certificate certBC=(X509Certificate)certFactBC.generateCertificate(new ByteArrayInputStream(T61STRING_CERT));  X509Certificate certDRL=(X509Certificate)certFactDRL.generateCertificate(new ByteArrayInputStream(T61STRING_CERT));  assertEquals(certBC,certDRL);  assertEquals(certBC.getSubjectX500Principal(),certBC.getSubjectX500Principal());  assertEquals(certDRL.getIssuerX500Principal(),certDRL.getIssuerX500Principal());  assertEquals(certBC.getSubjectX500Principal(),certDRL.getSubjectX500Principal());  assertEquals(certBC.getIssuerX500Principal(),certDRL.getIssuerX500Principal());  String[] formats={X500Principal.CANONICAL,X500Principal.RFC1779,X500Principal.RFC2253};  for (  String format : formats) {    assertEquals(certBC.getSubjectX500Principal().getName(format),certDRL.getSubjectX500Principal().getName(format));    assertEquals(certBC.getIssuerX500Principal().getName(format),certDRL.getIssuerX500Principal().getName(format));  }  String expected="" + "cn=entrust.net certification authority (2048)," + "ou=(c) 1999 entrust.net limited,"+ "ou=www.entrust.net/cps_2048 incorp. by ref. (limits liab.),"+ "o=entrust.net";  assertEquals(expected,certBC.getSubjectX500Principal().getName(X500Principal.CANONICAL));}  }
class C{  public void inject(Object target,Object value) throws Exception {  if (field != null) {    field.setAccessible(true);    field.set(target,value);  }  if (method != null) {    method.setAccessible(true);    method.invoke(target,value);  }}  }
class C{  private Trigger createTrigger(AutoScalerPolicyTrigger policyTrigger,String triggerId) throws MetricNotSupportedException {  Trigger trigger=new Trigger();  String metricType=policyTrigger.getMetricType();  Map<String,String> metricsMapper=IcapMonitorMetricsMapper.getMetricNameMapper();  String metricName=metricsMapper.get(metricType.toUpperCase());  if (metricName != null) {    trigger.setMetric(metricName);  } else   throw new MetricNotSupportedException(metricType);  String statType=policyTrigger.getStatType();  if (Trigger.AGGREGATE_TYPE_MAX.equalsIgnoreCase(statType)) {    trigger.setStatType(Trigger.AGGREGATE_TYPE_MAX);  } else {    trigger.setStatType(Trigger.AGGREGATE_TYPE_AVG);  }  trigger.setStatWindowSecs(policyTrigger.getStatWindow());  trigger.setBreachDurationSecs(policyTrigger.getBreachDuration());  trigger.setUnit(policyTrigger.getUnit());  if (triggerId.equals(AutoScalerPolicyTrigger.TriggerId_LowerThreshold)) {    trigger.setTriggerId(AutoScalerPolicyTrigger.TriggerId_LowerThreshold);    double threshold=IcapMonitorMetricsMapper.converMetricValue(metricName,policyTrigger.getLowerThreshold());    trigger.setMetricThreshold(threshold);    trigger.setThresholdType(Trigger.THRESHOLD_TYPE_LESS_THAN);  } else   if (triggerId.equals(AutoScalerPolicyTrigger.TriggerId_UpperThreshold)) {    trigger.setTriggerId(AutoScalerPolicyTrigger.TriggerId_UpperThreshold);    double threshold=IcapMonitorMetricsMapper.converMetricValue(metricName,policyTrigger.getUpperThreshold());    trigger.setMetricThreshold(threshold);    trigger.setThresholdType(Trigger.THRESHOLD_TYPE_LARGER_THAN);  }  trigger.setCallbackUrl(getCallbackUrl());  return trigger;}  }
class C{  public DSAPublicKeySpec(BigInteger y,BigInteger p,BigInteger q,BigInteger g){  this.y=y;  this.p=p;  this.q=q;  this.g=g;}  }
class C{  public void readBIFFromFile(String sFileName) throws BIFFormatException, IOException {  m_sFileName=sFileName;  try {    BIFReader bayesNet=new BIFReader();    bayesNet.processFile(sFileName);    m_BayesNet=new EditableBayesNet(bayesNet);    updateStatus();    a_datagenerator.setEnabled(m_BayesNet.getNrOfNodes() > 0);    m_BayesNet.clearUndoStack();  } catch (  Exception ex) {    ex.printStackTrace();    return;  }  setAppropriateNodeSize();  setAppropriateSize();}  }
class C{  public Wine withInputStream(InputStream inputStream){  this.inputStream=inputStream;  return this;}  }
class C{  public boolean isReuseAddress(){  try {    return channel.socket().getReuseAddress();  } catch (  SocketException e) {    throw new RuntimeIoException(e);  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tA filter to apply (can be specified multiple times).","F",1,"-F <classname [options]>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  if (bufOff + outOff > out.length) {    throw new DataLengthException("output buffer to small in doFinal");  }  int blockSize=cipher.getBlockSize();  int len=bufOff - blockSize;  byte[] block=new byte[blockSize];  if (forEncryption) {    cipher.processBlock(buf,0,block,0);    if (bufOff < blockSize) {      throw new DataLengthException("need at least one block of input for CTS");    }    for (int i=bufOff; i != buf.length; i++) {      buf[i]=block[i - blockSize];    }    for (int i=blockSize; i != bufOff; i++) {      buf[i]^=block[i - blockSize];    }    if (cipher instanceof CBCBlockCipher) {      BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();      c.processBlock(buf,blockSize,out,outOff);    } else {      cipher.processBlock(buf,blockSize,out,outOff);    }    System.arraycopy(block,0,out,outOff + blockSize,len);  } else {    byte[] lastBlock=new byte[blockSize];    if (cipher instanceof CBCBlockCipher) {      BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();      c.processBlock(buf,0,block,0);    } else {      cipher.processBlock(buf,0,block,0);    }    for (int i=blockSize; i != bufOff; i++) {      lastBlock[i - blockSize]=(byte)(block[i - blockSize] ^ buf[i]);    }    System.arraycopy(buf,blockSize,block,0,len);    cipher.processBlock(block,0,out,outOff);    System.arraycopy(lastBlock,0,out,outOff + blockSize,len);  }  int offset=bufOff;  reset();  return offset;}  }
class C{  private void move(Token newToken) throws IOException {  if (newToken == null)   throw new IOException("Can't move to the undefined (null) token.");  if (tokenMetadata.sortedTokens().contains(newToken))   throw new IOException("target token " + newToken + " is already owned by another node.");  InetAddress localAddress=FBUtilities.getBroadcastAddress();  if (getTokenMetadata().getTokens(localAddress).size() > 1) {    logger.error("Invalid request to move(Token); This node has more than one token and cannot be moved thusly.");    throw new UnsupportedOperationException("This node has more than one token and cannot be moved thusly.");  }  List<String> keyspacesToProcess=Schema.instance.getNonSystemKeyspaces();  PendingRangeCalculatorService.instance.blockUntilFinished();  for (  String keyspaceName : keyspacesToProcess) {    if (tokenMetadata.getPendingRanges(keyspaceName,localAddress).size() > 0)     throw new UnsupportedOperationException("data is currently moving to this node; unable to leave the ring");  }  Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS,valueFactory.moving(newToken));  setMode(Mode.MOVING,String.format("Moving %s from %s to %s.",localAddress,getLocalTokens().iterator().next(),newToken),true);  setMode(Mode.MOVING,String.format("Sleeping %s ms before start streaming/fetching ranges",RING_DELAY),true);  Uninterruptibles.sleepUninterruptibly(RING_DELAY,TimeUnit.MILLISECONDS);  RangeRelocator relocator=new RangeRelocator(Collections.singleton(newToken),keyspacesToProcess);  if (relocator.streamsNeeded()) {    setMode(Mode.MOVING,"fetching new ranges and streaming old ranges",true);    try {      relocator.stream().get();    } catch (    ExecutionException|InterruptedException e) {      throw new RuntimeException("Interrupted while waiting for stream/fetch ranges to finish: " + e.getMessage());    }  } else {    setMode(Mode.MOVING,"No ranges to fetch/stream",true);  }  setTokens(Collections.singleton(newToken));  if (logger.isDebugEnabled())   logger.debug("Successfully moved to new token {}",getLocalTokens().iterator().next());}  }
class C{  public BaleenConsoleLoggerBuilder(String pattern,Filter<ILoggingEvent> filter){  this(DEFAULT_NAME,pattern,filter);}  }
class C{  @Procedure @PerformsWrites @Description("apoc.index.search('name', 'query') YIELD node, weight - search for nodes in the free text index matching the given query") public Stream<WeightedNodeResult> search(@Name("index") String index,@Name("query") String query) throws ParseException {  if (!db.index().existsForNodes(index)) {    return Stream.empty();  }  return result(db.index().forNodes(index).query(new QueryContext(parseFreeTextQuery(query)).sort(Sort.RELEVANCE).top(100)));}  }
class C{  protected void putIntVolatile(long pos,int val){  unsafe.putIntVolatile(null,pos + addr,val);}  }
class C{  public void handleChangesToLoanProductToGLAccountMappings(final Long loanProductId,final Map<String,Object> changes,final JsonElement element,final AccountingRuleType accountingRuleType){switch (accountingRuleType) {case NONE:    break;case CASH_BASED:  mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.FUND_SOURCE.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),CASH_ACCOUNTS_FOR_LOAN.FUND_SOURCE.toString(),changes);mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.LOAN_PORTFOLIO.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),CASH_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.toString(),changes);mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.TRANSFERS_SUSPENSE.getValue(),CASH_ACCOUNTS_FOR_LOAN.TRANSFERS_SUSPENSE.toString(),changes);mergeLoanToIncomeAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_LOANS.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.INTEREST_ON_LOANS.getValue(),CASH_ACCOUNTS_FOR_LOAN.INTEREST_ON_LOANS.toString(),changes);mergeLoanToIncomeAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_FEES.getValue(),CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_FEES.toString(),changes);mergeLoanToIncomeAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_PENALTIES.getValue(),CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_PENALTIES.toString(),changes);mergeLoanToIncomeAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_RECOVERY.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_RECOVERY.getValue(),CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_RECOVERY.toString(),changes);mergeLoanToExpenseAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.LOSSES_WRITTEN_OFF.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.LOSSES_WRITTEN_OFF.getValue(),CASH_ACCOUNTS_FOR_LOAN.LOSSES_WRITTEN_OFF.toString(),changes);mergeLoanToLiabilityAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.OVERPAYMENT.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.OVERPAYMENT.getValue(),CASH_ACCOUNTS_FOR_LOAN.OVERPAYMENT.toString(),changes);break;case ACCRUAL_UPFRONT:case ACCRUAL_PERIODIC:mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.FUND_SOURCE.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.FUND_SOURCE.toString(),changes);mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.LOAN_PORTFOLIO.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.toString(),changes);mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.TRANSFERS_SUSPENSE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.TRANSFERS_SUSPENSE.toString(),changes);mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INTEREST_RECEIVABLE.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.INTEREST_RECEIVABLE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INTEREST_RECEIVABLE.toString(),changes);mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.FEES_RECEIVABLE.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.FEES_RECEIVABLE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.FEES_RECEIVABLE.toString(),changes);mergeLoanToAssetAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.PENALTIES_RECEIVABLE.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.PENALTIES_RECEIVABLE.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.PENALTIES_RECEIVABLE.toString(),changes);mergeLoanToIncomeAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_LOANS.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.INTEREST_ON_LOANS.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INTEREST_ON_LOANS.toString(),changes);mergeLoanToIncomeAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_FEES.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_FEES.toString(),changes);mergeLoanToIncomeAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_PENALTIES.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_PENALTIES.toString(),changes);mergeLoanToIncomeAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_RECOVERY.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_RECOVERY.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.INCOME_FROM_RECOVERY.toString(),changes);mergeLoanToExpenseAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.LOSSES_WRITTEN_OFF.getValue(),loanProductId,ACCRUAL_ACCOUNTS_FOR_LOAN.LOSSES_WRITTEN_OFF.getValue(),ACCRUAL_ACCOUNTS_FOR_LOAN.LOSSES_WRITTEN_OFF.toString(),changes);mergeLoanToLiabilityAccountMappingChanges(element,LOAN_PRODUCT_ACCOUNTING_PARAMS.OVERPAYMENT.getValue(),loanProductId,CASH_ACCOUNTS_FOR_LOAN.OVERPAYMENT.getValue(),CASH_ACCOUNTS_FOR_LOAN.OVERPAYMENT.toString(),changes);break;}}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.108 -0500",hash_original_method="D029A1C8EDAAF4B35F26BECE197613A0",hash_generated_method="D1366F397A526323804F681633521417") synchronized boolean saveState(Bundle outState){  boolean success=(outState != null);  if (success) {    outState.putBundle("ssl-error-handler",mSslPrefTable);  }  return success;}  }
class C{  public void closeChangeset() throws MalformedURLException, ProtocolException, IOException {  HttpURLConnection connection=null;  try {    connection=openConnectionForWriteAccess(getCloseChangesetUrl(changesetId),"PUT");    checkResponseCode(connection);  }  finally {    disconnect(connection);    changesetId=-1;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:34.100 -0500",hash_original_method="F73ADCF1F7F7E573F488FB12A7E0DEC9",hash_generated_method="709D340BF59F35234DFF46D5CEACA330") private int syncResultToErrorNumber(SyncResult syncResult){  if (syncResult.syncAlreadyInProgress)   return ContentResolver.SYNC_ERROR_SYNC_ALREADY_IN_PROGRESS;  if (syncResult.stats.numAuthExceptions > 0)   return ContentResolver.SYNC_ERROR_AUTHENTICATION;  if (syncResult.stats.numIoExceptions > 0)   return ContentResolver.SYNC_ERROR_IO;  if (syncResult.stats.numParseExceptions > 0)   return ContentResolver.SYNC_ERROR_PARSE;  if (syncResult.stats.numConflictDetectedExceptions > 0)   return ContentResolver.SYNC_ERROR_CONFLICT;  if (syncResult.tooManyDeletions)   return ContentResolver.SYNC_ERROR_TOO_MANY_DELETIONS;  if (syncResult.tooManyRetries)   return ContentResolver.SYNC_ERROR_TOO_MANY_RETRIES;  if (syncResult.databaseError)   return ContentResolver.SYNC_ERROR_INTERNAL;  throw new IllegalStateException("we are not in an error state, " + syncResult);}  }
class C{  public static byte checkRange(Object value,Comparable<Object> minLimit,Comparable<Object> maxLimit){  byte retVal=RC_WITHIN_RANGE;  if (minLimit != null && minLimit.compareTo(value) > 0)   retVal|=RC_BELOW_RANGE;  if (maxLimit != null && maxLimit.compareTo(value) < 0)   retVal|=RC_ABOVE_RANGE;  return (retVal);}  }
class C{  public void end(String endType) throws IOException {  dos.write(endType.getBytes());  if (END_TOTAL.equals(endType)) {    dos.flush();  }}  }
class C{  public String toString(){  return Character.toString(getValue());}  }
class C{  public FilterViewer(){}  }
class C{  public PickWorkspaceDialog(){  super(Display.getDefault().getActiveShell());}  }
class C{  protected void editTurnoutOperation(Turnout t,JComboBox<String> box){  TurnoutOperation op=t.getTurnoutOperation();  if (op == null) {    TurnoutOperation proto=TurnoutOperationManager.getInstance().getMatchingOperationAlways(t);    if (proto != null) {      op=proto.makeNonce(t);      t.setTurnoutOperation(op);    }  }  if (op != null) {    if (!op.isNonce()) {      op=op.makeNonce(t);    }    TurnoutOperationEditor dialog=new TurnoutOperationEditor(this,f,op,t,box);    dialog.setVisible(true);  } else {    JOptionPane.showMessageDialog(f,"There is no operation type suitable for this turnout","No operation type",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public FilteredCausedDelayHandler(final Scenario scenario,final int noOfTimeBins,final String userGroup,final PersonFilter personFilter,final AreaFilter areaFilter){  delegate=new CausedDelayHandler(scenario,noOfTimeBins);  this.pf=personFilter;  this.userGroup=userGroup;  this.af=areaFilter;  this.network=scenario.getNetwork();  LOGGER.info("Area and user group filtering is used, links fall inside the given shape and belongs to the given user group will be considered.");}  }
class C{  public boolean hasNext(){  return index < desc.length();}  }
class C{  public static Throwable zkException(Throwable throwable,String path){  if (throwable instanceof KeeperException) {    return throwable;  } else   if (throwable instanceof ZooKeeperClient.ZooKeeperConnectionException) {    return KeeperException.create(KeeperException.Code.CONNECTIONLOSS,path);  } else   if (throwable instanceof InterruptedException) {    return new DLInterruptedException("Interrupted on operating " + path,throwable);  } else {    return new UnexpectedException("Encountered unexpected exception on operatiing " + path,throwable);  }}  }
class C{  private void restoreDynamicRemove(FacesContext context,ComponentStruct struct){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletFullStateManagementStrategy.restoreDynamicRemove");  }  UIComponent child=locateComponentByClientId(context,context.getViewRoot(),struct.clientId);  if (child != null) {    StateContext stateContext=StateContext.getStateContext(context);    stateContext.getDynamicComponents().put(struct.clientId,child);    UIComponent parent=child.getParent();    parent.getChildren().remove(child);  }}  }
class C{  @Override public boolean isDone(){  throw new UnsupportedOperationException("Not implemented for default objective");}  }
class C{  public BlockBorder(Paint paint){  this(new RectangleInsets(1,1,1,1),paint);}  }
class C{  protected boolean calculateSize(){  if (p_sizeCalculated)   return true;  p_width=0;  m_printRows=new ArrayList<ArrayList<ArrayList<Object>>>(m_data.length);  float dynMxColumnWidth=m_firstPage.width / 2;  int rows=m_data.length;  int cols=m_columnHeader.length;  Dimension2DImpl[][] dataSizes=new Dimension2DImpl[rows][cols];  Dimension2DImpl[] headerSizes=new Dimension2DImpl[cols];  FontRenderContext frc=new FontRenderContext(null,true,true);  for (int dataCol=0; dataCol < cols; dataCol++) {    int col=dataCol;    if (m_additionalLines.containsKey(new Integer(dataCol))) {      col=((Integer)m_additionalLines.get(new Integer(dataCol))).intValue();      log.finest("DataColumn=" + dataCol + ", BelowColumn="+ col);    }    float colWidth=0;    for (int row=0; row < rows; row++) {      Object dataItem=m_data[row][dataCol];      if (dataItem == null) {        dataSizes[row][dataCol]=new Dimension2DImpl();        continue;      }      String string=dataItem.toString();      if (string.length() == 0) {        dataSizes[row][dataCol]=new Dimension2DImpl();        continue;      }      Font font=getFont(row,dataCol);      addPrintLines(row,col,dataItem);      dataSizes[row][dataCol]=new Dimension2DImpl();      if (dataItem instanceof Boolean) {        dataSizes[row][col].addBelow(LayoutEngine.IMAGE_SIZE);        continue;      } else       if (dataItem instanceof ImageElement) {        dataSizes[row][col].addBelow(new Dimension((int)((ImageElement)dataItem).getWidth(),(int)((ImageElement)dataItem).getHeight()));        float width=(float)Math.ceil(dataSizes[row][col].getWidth());        if (colWidth < width)         colWidth=width;        continue;      } else       if (dataItem instanceof BarcodeElement) {        dataSizes[row][col].addBelow(new Dimension((int)((BarcodeElement)dataItem).getWidth(),(int)((BarcodeElement)dataItem).getHeight()));        if (!((BarcodeElement)dataItem).isAllowOverflow()) {          float width=(float)Math.ceil(dataSizes[row][col].getWidth());          if (colWidth < width)           colWidth=width;        }        continue;      }      if (m_columnMaxWidth[col] == 0 || m_columnMaxWidth[col] == -1) {        TextLayout layout=new TextLayout(string,font,frc);        float width=layout.getAdvance() + 2;        float height=layout.getAscent() + layout.getDescent() + layout.getLeading();        if (width > dynMxColumnWidth)         m_columnMaxWidth[col]=(int)Math.ceil(dynMxColumnWidth); else         if (colWidth < width)         colWidth=width;        if (dataSizes[row][col] == null) {          dataSizes[row][col]=new Dimension2DImpl();          log.log(Level.WARNING,"No Size for r=" + row + ",c="+ col);        }        dataSizes[row][col].addBelow(width,height);      }      if (m_columnMaxWidth[col] != 0 && m_columnMaxWidth[col] != -1) {        float height=0;        if (HTMLElement.isHTML(string)) {          HTMLRenderer renderer=HTMLRenderer.get(string);          colWidth=renderer.getWidth();          if (m_columnMaxHeight[col] == -1)           height=renderer.getHeightOneLine(); else           height=renderer.getHeight();          renderer.setAllocation((int)colWidth,(int)height);          m_data[row][dataCol]=renderer;        } else {          String[] lines=Pattern.compile("$",Pattern.MULTILINE).split(string);          for (int lineNo=0; lineNo < lines.length; lineNo++) {            AttributedString aString=new AttributedString(lines[lineNo]);            aString.addAttribute(TextAttribute.FONT,font);            AttributedCharacterIterator iter=aString.getIterator();            LineBreakMeasurer measurer=new LineBreakMeasurer(iter,frc);            while (measurer.getPosition() < iter.getEndIndex()) {              TextLayout layout=measurer.nextLayout(Math.abs(m_columnMaxWidth[col]));              float width=layout.getAdvance();              if (colWidth < width)               colWidth=width;              float lineHeight=layout.getAscent() + layout.getDescent() + layout.getLeading();              if (m_columnMaxHeight[col] == -1) {                height=lineHeight;                break;              } else               if (m_columnMaxHeight[col] == 0 || (height + lineHeight) <= m_columnMaxHeight[col])               height+=lineHeight;            }          }        }        if (m_fixedWidth[col])         colWidth=Math.abs(m_columnMaxWidth[col]);        dataSizes[row][col].addBelow(colWidth,height);      }      dataSizes[row][col].roundUp();      if (dataItem instanceof NamePair)       m_rowColDrillDown.put(new Point(row,col),(NamePair)dataItem);      log.finest("Col=" + col + ", row="+ row+ " => "+ dataSizes[row][col]+ " - ColWidth="+ colWidth);    }    String string="";    if (m_columnHeader[dataCol] != null)     string=m_columnHeader[dataCol].toString();    if (col != dataCol)     headerSizes[dataCol]=new Dimension2DImpl(); else     if (colWidth == 0 && m_columnMaxWidth[dataCol] < 0 || string.length() == 0)     headerSizes[dataCol]=new Dimension2DImpl(); else {      Font font=getFont(HEADER_ROW,dataCol);      if (!font.isBold())       font=new Font(font.getName(),Font.BOLD,font.getSize());      if (m_columnMaxWidth[dataCol] == 0 || m_columnMaxWidth[dataCol] == -1 || !m_multiLineHeader) {        TextLayout layout=new TextLayout(string,font,frc);        float width=layout.getAdvance() + 3;        float height=layout.getAscent() + layout.getDescent() + layout.getLeading();        if (width > dynMxColumnWidth)         m_columnMaxWidth[dataCol]=(int)Math.ceil(dynMxColumnWidth); else         if (colWidth < width)         colWidth=width;        headerSizes[dataCol]=new Dimension2DImpl(width,height);      }      if (m_columnMaxWidth[dataCol] != 0 && m_columnMaxWidth[dataCol] != -1) {        float height=0;        String[] lines=Pattern.compile("$",Pattern.MULTILINE).split(string);        for (int lineNo=0; lineNo < lines.length; lineNo++) {          AttributedString aString=new AttributedString(lines[lineNo]);          aString.addAttribute(TextAttribute.FONT,font);          AttributedCharacterIterator iter=aString.getIterator();          LineBreakMeasurer measurer=new LineBreakMeasurer(iter,frc);          colWidth=Math.abs(m_columnMaxWidth[dataCol]);          while (measurer.getPosition() < iter.getEndIndex()) {            TextLayout layout=measurer.nextLayout(colWidth);            float lineHeight=layout.getAscent() + layout.getDescent() + layout.getLeading();            if (!m_multiLineHeader) {              height=lineHeight;              break;            } else             height+=lineHeight;          }        }        headerSizes[dataCol]=new Dimension2DImpl(colWidth,height);      }    }    headerSizes[dataCol].roundUp();    colWidth=(float)Math.ceil(colWidth);    if (dataCol == 0)     colWidth+=m_tFormat.getVLineStroke().floatValue();    if (colWidth != 0)     colWidth+=(2 * H_GAP) + m_tFormat.getVLineStroke().floatValue();    if (col != dataCol) {      m_columnWidths.add(new Float(0.0));      Float origWidth=(Float)m_columnWidths.get(col);      if (origWidth == null)       log.log(Level.SEVERE,"Column " + dataCol + " below "+ col+ " - no value for orig width"); else {        if (origWidth.compareTo(new Float(colWidth)) >= 0) {          log.finest("Same Width - Col=" + col + " - OrigWidth="+ origWidth+ " - Width="+ colWidth+ " - Total="+ p_width);        } else {          m_columnWidths.set(col,new Float(colWidth));          p_width+=(colWidth - origWidth.floatValue());          log.finest("New Width - Col=" + col + " - OrigWidth="+ origWidth+ " - Width="+ colWidth+ " - Total="+ p_width);        }      }    } else {      m_columnWidths.add(new Float(colWidth));      p_width+=colWidth;      log.finest("Width - Col=" + dataCol + " - Width="+ colWidth+ " - Total="+ p_width);    }  }  p_height=0;  for (int row=0; row < rows; row++) {    float rowHeight=0f;    for (int col=0; col < cols; col++) {      if (dataSizes[row][col].height > rowHeight)       rowHeight=(float)dataSizes[row][col].height;    }    rowHeight+=m_tFormat.getLineStroke().floatValue() + (2 * V_GAP);    m_rowHeights.add(new Float(rowHeight));    p_height+=rowHeight;  }  m_headerHeight=0;  for (int col=0; col < cols; col++) {    if (headerSizes[col].height > m_headerHeight)     m_headerHeight=(int)headerSizes[col].height;  }  m_headerHeight+=(4 * m_tFormat.getLineStroke().floatValue()) + (2 * V_GAP);  p_height+=m_headerHeight;  p_height+=m_tFormat.getLineStroke().floatValue();  log.fine("FirstPage=" + m_firstPage + ", NextPages="+ m_nextPages);  if (m_firstPage.height >= p_height && m_pageBreak.size() == 0) {    log.finest("Page Y=1 - PageHeight=" + m_firstPage.height + " - TableHeight="+ p_height);    m_firstRowOnPage.add(new Integer(0));    m_pageHeight.add(new Float(p_height));  } else {    float availableHeight=0f;    float usedHeight=0f;    boolean firstPage=true;    int addlRows=0;    for (int dataRow=0; dataRow < m_rowHeights.size(); dataRow++) {      float rowHeight=((Float)m_rowHeights.get(dataRow)).floatValue();      boolean pageBreak=isPageBreak(dataRow);      if (dataRow + 1 == m_rowHeights.size()) {        availableHeight-=m_tFormat.getLineStroke().floatValue();      }      if (!pageBreak && availableHeight < rowHeight) {        if (availableHeight > 40 && rowHeight > 40) {          log.finest("- Split (leave on current) Row=" + dataRow + " - Available="+ availableHeight+ ", RowHeight="+ rowHeight);        }        pageBreak=true;      }      if (pageBreak) {        availableHeight=firstPage ? m_firstPage.height : m_nextPages.height;        m_firstRowOnPage.add(new Integer(dataRow + addlRows));        if (!firstPage) {          m_pageHeight.add(new Float(usedHeight));          log.finest("Page Y=" + m_pageHeight.size() + " - PageHeight="+ usedHeight);        }        log.finest("Page Y=" + m_firstRowOnPage.size() + " - Row="+ dataRow+ " - force="+ isPageBreak(dataRow));        firstPage=false;        availableHeight-=m_headerHeight;        usedHeight+=m_headerHeight;      }      availableHeight-=rowHeight;      usedHeight+=rowHeight;      if (availableHeight < 0) {        log.finest("- Split (move to next) Row=" + dataRow + " - Available="+ availableHeight+ ", RowHeight="+ rowHeight);      }      log.finest("Page Y=" + m_pageHeight.size() + ", Row="+ dataRow+ ",AddlRows="+ addlRows+ ", Height="+ rowHeight+ " - Available="+ availableHeight+ ", Used="+ usedHeight);    }    m_pageHeight.add(new Float(usedHeight));    log.finest("Page Y=" + m_pageHeight.size() + " - PageHeight="+ usedHeight);  }  if (m_firstPage.width >= p_width) {    log.finest("Page X=1 - PageWidth=" + m_firstPage.width + " - TableWidth="+ p_width);    m_firstColumnOnPage.add(new Integer(0));    distributeColumns(m_firstPage.width - (int)p_width,0,m_columnWidths.size());  } else {    int availableWidth=0;    int lastStart=0;    for (int col=0; col < m_columnWidths.size(); col++) {      int columnWidth=((Float)m_columnWidths.get(col)).intValue();      if (availableWidth < columnWidth) {        if (col != 0)         distributeColumns(availableWidth,lastStart,col);        m_firstColumnOnPage.add(new Integer(col));        log.finest("Page X=" + m_firstColumnOnPage.size() + " - Col="+ col);        lastStart=col;        availableWidth=m_firstPage.width;        for (int repCol=0; repCol < m_repeatedColumns && col > repCol; repCol++) {          float repColumnWidth=((Float)m_columnWidths.get(repCol)).floatValue();          if (availableWidth < m_firstPage.width * 0.5)           break;          availableWidth-=repColumnWidth;        }      }      availableWidth-=columnWidth;    }  }  log.fine("Pages=" + getPageCount() + " X="+ m_firstColumnOnPage.size()+ "/Y="+ m_firstRowOnPage.size()+ " - Width="+ p_width+ ", Height="+ p_height);  return true;}  }
class C{  public void write(byte[] b) throws IOException {  this.write(b,0,b.length);}  }
class C{  protected String num2ShortID(int num,char[] IDChars,int IDWidth){  char ID[]=new char[IDWidth];  int i;  for (i=IDWidth - 1; i >= 0; i--) {    ID[i]=IDChars[num % IDChars.length];    num=num / IDChars.length - 1;    if (num < 0) {      break;    }  }  for (i--; i >= 0; i--) {    ID[i]=' ';  }  return new String(ID);}  }
class C{  @Override public void checkTimeout(){  if (!engine.allowRequestTimeout())   return;  Iterator<Entry<Integer,PageContextImpl>> it=runningPcs.entrySet().iterator();  PageContextImpl pc;  Entry<Integer,PageContextImpl> e;  while (it.hasNext()) {    e=it.next();    pc=e.getValue();    long timeout=pc.getRequestTimeout();    if (pc.getStartTime() + timeout < System.currentTimeMillis()) {      terminate(pc);      it.remove();    } else     if (pc.getStartTime() + 10000 < System.currentTimeMillis() && pc.getThread().getPriority() != Thread.MIN_PRIORITY) {      Log log=config.getLog("requesttimeout");      if (log != null)       log.log(Log.LEVEL_WARN,"controler","downgrade priority of the a thread at " + getPath(pc));      try {        pc.getThread().setPriority(Thread.MIN_PRIORITY);      } catch (      Throwable t) {      }    }  }}  }
class C{  @SuppressWarnings("static-method") protected boolean hoist(AncestorChain<?> d,LexicalScope s){  if (d.node instanceof Declaration && s.isCatchScope()) {    return d.parent != null && !(d.parent.node instanceof CatchStmt);  }  return s.isWithScope();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.688 -0500",hash_original_method="CD7C7C85680B5F62F444A1BDA84407A2",hash_generated_method="20FB5050F314D3DB2DCD5DD6E514AACF") public void goToSleep(long time){  try {    mService.goToSleep(time);  } catch (  RemoteException e) {  }}  }
class C{  public void requestHideToolTip(){  fireHideToolTip();}  }
class C{  private void fillResolveList(List<ResolveInfo> list){  ensureIntents();  PackageManager pm=getPackageManager();  list.clear();  if (mDisplayMode == DISPLAY_MODE_LAUNCH) {    list.addAll(pm.queryIntentActivities(sLaunchIntent,0));  } else   if (mDisplayMode == DISPLAY_MODE_SHORTCUT) {    list.addAll(pm.queryIntentActivities(sShortcutIntent,0));  }}  }
class C{  private final LevelNode generateNumerableStep(TreeNode stn,ModuleNode cm) throws AbortException {  errors.addAbort(stn.getLocation(),"Uses generateNumerable_Step");  UniqueString stepNum=null;  TreeNode[] heirs=stn.heirs();  int nextTok=0;  ThmOrAssumpDefNode tadn=null;  boolean isSuffices=false;  boolean isAssumeProve=false;  Context assumeContext=null;  LevelNode body=null;  TreeNode[] savedHeirs=heirs;  int savedNextTok=nextTok;  boolean hasNonExprBody=false;  if (heirs[nextTok].getKind() == N_NonExprBody) {    heirs=heirs[nextTok].heirs();    nextTok=0;    hasNonExprBody=true;  }  ;  if (heirs[nextTok].getKind() == TLAplusParserConstants.SUFFICES) {    nextTok++;    isSuffices=true;  }  ;  if (heirs[nextTok].getKind() == TLAplusParserConstants.PROVE) {    nextTok++;  }  ;  UniqueString op=null;switch (heirs[nextTok].getKind()) {case TLAplusParserConstants.QED:    body=new OpApplNode(OP_qed,new ExprNode[0],heirs[nextTok],cm);  nextTok++;break;case TLAplusParserConstants.CASE:case TLAplusParserConstants.HAVE:op=OP_have;if (heirs[nextTok].getKind() == TLAplusParserConstants.CASE) {op=OP_pfcase;};nextTok++;ExprNode[] args=new ExprNode[1];args[0]=generateExpression(heirs[nextTok],cm);body=new OpApplNode(op,args,heirs[nextTok],cm);nextTok++;break;case TLAplusParserConstants.TAKE:case TLAplusParserConstants.PICK:op=OP_take;if (heirs[nextTok].getKind() == TLAplusParserConstants.PICK) {op=OP_pick;};nextTok++;if (heirs[nextTok].getKind() == N_QuantBound) {int offset=nextTok;int quants=1;nextTok++;while ((nextTok < heirs.length) && (heirs[nextTok].getKind() == TLAplusParserConstants.COMMA)) {quants++;nextTok=nextTok + 2;};FormalParamNode[][] params=new FormalParamNode[quants][0];boolean[] bt=new boolean[quants];ExprNode[] paramBounds=new ExprNode[quants];processQuantBoundArgs(heirs,offset,params,bt,paramBounds,cm);if (op == OP_pick) {nextTok++;args=new ExprNode[1];args[0]=generateExpression(heirs[nextTok],cm);nextTok++;} else {args=new ExprNode[0];};body=new OpApplNode(op,null,args,params,bt,paramBounds,stn,cm);} else {int ids=1;while ((nextTok + 2 * ids - 1 < heirs.length) && (heirs[nextTok + 2 * ids - 1].getKind() == TLAplusParserConstants.COMMA)) {ids++;};FormalParamNode[] params=new FormalParamNode[ids];for (int i=0; i < ids; i++) {params[i]=new FormalParamNode(heirs[2 * i + nextTok].getUS(),0,heirs[2 * i + nextTok],symbolTable,cm);};nextTok=nextTok + 2 * ids - 1;if (op == OP_pick) {nextTok++;args=new ExprNode[1];args[0]=generateExpression(heirs[nextTok],cm);nextTok++;} else {args=new ExprNode[0];};body=new OpApplNode(op,args,params,stn,cm);};break;case TLAplusParserConstants.WITNESS:nextTok++;int ids=1;while ((nextTok + 2 * ids - 1 < heirs.length) && (heirs[nextTok + 2 * ids - 1].getKind() == TLAplusParserConstants.COMMA)) {ids++;};ExprNode[] exprs=new ExprNode[ids];for (int i=0; i < ids; i++) {exprs[i]=generateExpression(heirs[2 * i + nextTok],cm);};body=new OpApplNode(OP_tup,exprs,stn,cm);nextTok=nextTok + 2 * ids - 1;break;default :if (heirs[nextTok].getKind() == N_AssumeProve) {isAssumeProve=true;if (!isSuffices) {symbolTable.pushContext(new Context(moduleTable,errors));};body=generateAssumeProve(heirs[nextTok],cm);if (!isSuffices) {assumeContext=symbolTable.getContext();symbolTable.popContext();};} else {body=generateExpression(heirs[nextTok],cm);};nextTok++;break;};if (stepNum != null) {};if (hasNonExprBody) {heirs=savedHeirs;nextTok=savedNextTok + 1;};ProofNode proof=null;if (heirs.length > nextTok) {if (isAssumeProve && !isSuffices) {symbolTable.pushContext(assumeContext);};proof=generateProof(heirs[nextTok],cm);if (isAssumeProve && !isSuffices) {symbolTable.popContext();};};TheoremNode thm=new TheoremNode(stn,body,cm,proof,tadn);thm.suffices=isSuffices;return thm;}  }
class C{  @Override public boolean onPrepareOptionsMenu(Menu menu){  super.onCreateOptionsMenu(menu);  menu.clear();  if (conversationLayout.getVisibility() == LinearLayout.INVISIBLE) {    if (server.getStatus() == Status.CONNECTED) {      MenuInflater inflater=new MenuInflater(this);      inflater.inflate(R.menu.room_activity,menu);    } else {      MenuInflater inflater=new MenuInflater(this);      inflater.inflate(R.menu.room_activity_disconnected,menu);    }  } else {    MenuInflater inflater=new MenuInflater(this);    inflater.inflate(R.menu.conversations,menu);  }  return super.onPrepareOptionsMenu(menu);}  }
class C{  public LocalDateTime withCenturyOfEra(int centuryOfEra){  return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(),centuryOfEra));}  }
class C{  public void putObject(T value){  Node<T> newNode=new Node<T>(value);  Node<T> prevTailNode=tail.getAndSet(newNode);  prevTailNode.next=newNode;}  }
class C{  @Override public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public static double pointPosition(double x0,double y0,double x1,double y1,double x2,double y2){  return (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);}  }
class C{  @Override @CanIgnoreReturnValue public int read(byte[] bytes,int off,int len) throws IOException {  int numOfBytesRead=in.read(bytes,off,len);  if (numOfBytesRead != -1) {    hasher.putBytes(bytes,off,numOfBytesRead);  }  return numOfBytesRead;}  }
class C{  public static Volume checkIfVolumeExistsInDB(String volumeNativeGuid,DbClient dbClient){  List<Volume> activeVolumes=CustomQueryUtility.getActiveVolumeByNativeGuid(dbClient,volumeNativeGuid);  Iterator<Volume> volumeItr=activeVolumes.iterator();  return volumeItr.next();}  }
class C{  private List<VolumeDescriptor> upgradeToSRDFTargetVolume(final Volume volume,final VirtualPool vpool,final VirtualPoolChangeParam cosChangeParam,final String taskId) throws InternalException {  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,volume.getConsistencyGroup());  List<Recommendation> recommendations=getRecommendationsForVirtualPoolChangeRequest(volume,vpool,cosChangeParam);  if (recommendations.isEmpty()) {    throw APIException.badRequests.noStorageFoundForVolume();  }  Project project=_dbClient.queryObject(Project.class,volume.getProject());  VirtualArray varray=_dbClient.queryObject(VirtualArray.class,volume.getVirtualArray());  VolumeCreate param=new VolumeCreate(volume.getLabel(),String.valueOf(volume.getCapacity()),1,vpool.getId(),volume.getVirtualArray(),volume.getProject().getURI());  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));  if (volume.getIsComposite()) {    capabilities.put(VirtualPoolCapabilityValuesWrapper.IS_META_VOLUME,volume.getIsComposite());    capabilities.put(VirtualPoolCapabilityValuesWrapper.META_VOLUME_TYPE,volume.getCompositionType());    capabilities.put(VirtualPoolCapabilityValuesWrapper.META_VOLUME_MEMBER_COUNT,volume.getMetaMemberCount());    capabilities.put(VirtualPoolCapabilityValuesWrapper.META_VOLUME_MEMBER_SIZE,volume.getMetaMemberSize());    _log.debug(String.format("Capabilities : isMeta: %s, Meta Type: %s, Member size: %s, Count: %s",capabilities.getIsMetaVolume(),capabilities.getMetaVolumeType(),capabilities.getMetaVolumeMemberSize(),capabilities.getMetaVolumeMemberCount()));  }  TaskList taskList=new TaskList();  String volumeLabel=param.getName();  final BlockConsistencyGroup consistencyGroup=capabilities.getBlockConsistencyGroup() == null ? null : _dbClient.queryObject(BlockConsistencyGroup.class,capabilities.getBlockConsistencyGroup());  List<URI> volumeURIs=prepareRecommendedVolumes(taskId,taskList,project,varray,vpool,capabilities.getResourceCount(),recommendations,consistencyGroup,volumeLabel,param.getSize());  List<VolumeDescriptor> resultListVolumeDescriptors=new ArrayList<>();  Iterator<Recommendation> recommendationsIter=recommendations.iterator();  while (recommendationsIter.hasNext()) {    Recommendation recommendation=recommendationsIter.next();    try {      List<VolumeDescriptor> volumeDescriptors=createVolumeDescriptors((SRDFRecommendation)recommendation,volumeURIs,capabilities);      logVolumeDescriptorPrecreateInfo(volumeDescriptors,taskId);      resultListVolumeDescriptors.addAll(volumeDescriptors);    } catch (    InternalException e) {      if (_log.isErrorEnabled()) {        _log.error("Controller error",e);      }      String errorMsg=String.format("Controller error: %s",e.getMessage());      if (volumeURIs != null) {        for (        URI volumeURI : volumeURIs) {          Volume volume1=_dbClient.queryObject(Volume.class,volumeURI);          if (volume1 != null) {            Operation op=new Operation();            ServiceCoded coded=ServiceError.buildServiceError(ServiceCode.API_RP_VOLUME_CREATE_ERROR,errorMsg.toString());            op.setMessage(errorMsg);            op.error(coded);            _dbClient.createTaskOpStatus(Volume.class,volumeURI,taskId,op);            TaskResourceRep volumeTask=toTask(volume1,taskId,op);            if (volume1.getPersonality() != null && volume1.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {              taskList.getTaskList().add(volumeTask);            }          }        }      }      throw APIException.badRequests.cannotCreateSRDFVolumes(e);    }  }  return resultListVolumeDescriptors;}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public Builder serviceName(final String service_name){  this.serviceName=service_name;  return this;}  }
class C{  public void drawRect(int x,int y,int width,int height){  g.drawRect(x,y,width,height);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void connect(){  AndroidAuthSession mSession=new AndroidAuthSession(mAppKeys);  mDBApi=new DropboxAPI<AndroidAuthSession>(mSession);  this.accessToken=settings.getDropboxAuthToken();  if (accessToken.isEmpty()) {    mDBApi.getSession().startOAuth2Authentication(activity);  } else {    mDBApi.getSession().setOAuth2AccessToken(accessToken);  }}  }
class C{  public ClassOrInterfaceImpl(String name){  this.name=requireNonNull(name);  this.javadoc=null;  this.annotations=new ArrayList<>();  this.generics=new ArrayList<>();  this.interfaces=new ArrayList<>();  this.fields=new ArrayList<>();  this.methods=new ArrayList<>();  this.initalizers=new ArrayList<>();  this.classes=new ArrayList<>();  this.modifiers=EnumSet.noneOf(Modifier.class);}  }
class C{  private void removeExpireValues(){  storage.headMap(getUpdatingTime() - windowMs).clear();}  }
class C{  private void compareGraphs(Set<Statement> queryResult,Set<Statement> expectedResult) throws Exception {  if (!ModelUtil.equals(expectedResult,queryResult)) {    StringBuilder message=new StringBuilder(128);    message.append("\n============ ");    message.append(getName());    message.append(" =======================\n");    message.append("Expected result: \n");    for (    Statement st : expectedResult) {      message.append(st.toString());      message.append("\n");    }    message.append("=============");    StringUtil.appendN('=',getName().length(),message);    message.append("========================\n");    message.append("Query result: \n");    for (    Statement st : queryResult) {      message.append(st.toString());      message.append("\n");    }    message.append("=============");    StringUtil.appendN('=',getName().length(),message);    message.append("========================\n");    log.error(message.toString());    fail(message.toString());  }}  }
class C{  @SuppressWarnings("unchecked") public Map<String,Object> decodeHeader(final byte[] data){  final VersionedDecoder decoder=new VersionedDecoder(data,typeInfos);  decoder.skipBytes(4);  return (Map<String,Object>)decoder.instance(replayHeaderTypeid);}  }
class C{  public SmoothOverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:00.945 -0500",hash_original_method="87CEA39C87C6E6A55E0C3E8D0DB070E7",hash_generated_method="433F39090E4F70958D2750670C5A6784") public static void addExtensionHeader(String headerName,String className){  nameMap.put(headerName.toLowerCase(),className);}  }
class C{  protected void createNodes(DefaultMutableTreeNode localNode){  PropertyNode pNode=(PropertyNode)localNode.getUserObject();  Object localObject=pNode.value;  PropertyDescriptor localProperties[];  try {    BeanInfo bi=Introspector.getBeanInfo(localObject.getClass());    localProperties=bi.getPropertyDescriptors();  } catch (  IntrospectionException ex) {    System.err.println("PropertySelectorDialog: Couldn't introspect");    return;  }  for (  PropertyDescriptor localPropertie : localProperties) {    if (localPropertie.isHidden() || localPropertie.isExpert()) {      continue;    }    String name=localPropertie.getDisplayName();    Class<?> type=localPropertie.getPropertyType();    Method getter=localPropertie.getReadMethod();    Method setter=localPropertie.getWriteMethod();    Object value=null;    if (getter == null || setter == null) {      continue;    }    try {      Object args[]={};      value=getter.invoke(localObject,args);      PropertyEditor editor=null;      Class<?> pec=localPropertie.getPropertyEditorClass();      if (pec != null) {        try {          editor=(PropertyEditor)pec.newInstance();        } catch (        Exception ex) {        }      }      if (editor == null) {        editor=PropertyEditorManager.findEditor(type);      }      if ((editor == null) || (value == null)) {        continue;      }    } catch (    InvocationTargetException ex) {      System.err.println("Skipping property " + name + " ; exception on target: "+ ex.getTargetException());      ex.getTargetException().printStackTrace();      continue;    }catch (    Exception ex) {      System.err.println("Skipping property " + name + " ; exception: "+ ex);      ex.printStackTrace();      continue;    }    DefaultMutableTreeNode child=new DefaultMutableTreeNode(new PropertyNode(value,localPropertie,localObject.getClass()));    localNode.add(child);    createNodes(child);  }}  }
class C{  public DarculaSplitPaneDivider(DarculaSplitPaneUI ui){  super(ui);}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  return in.read(b,off,len);}  }
class C{  private boolean isControl(Element elem){  return elem.isLeaf();}  }
class C{  public static boolean isClient(){  return FMLCommonHandler.instance().getEffectiveSide().isClient();}  }
class C{  public boolean extract(IProgressListener ipl){  Util.secure(ipl).onTaskChanged("Extracting " + name);  return Util.extract(new File(ClientProxy.ROOT,name),new File(ClientProxy.ROOT));}  }
class C{  public void addDefinition(Block block){  String procedureName=getProcedureName(block);  if (mProcedureDefinitions.get(procedureName) == block) {    throw new IllegalStateException("Tried to add the same block definition twice");  }  if (mProcedureNameManager.contains(procedureName)) {    procedureName=mProcedureNameManager.generateUniqueName(procedureName,false);    setProcedureName(block,procedureName);  }  mProcedureDefinitions.put(procedureName,block);  mProcedureReferences.put(procedureName,new ArrayList<Block>());  mProcedureNameManager.addName(procedureName);}  }
class C{  BasicBlock upto(Instruction earlyPos,BasicBlock lateBlock,Instruction inst){  BasicBlock _origBlock=getOrigBlock(inst);  BasicBlock actBlock=lateBlock;  BasicBlock bestBlock=lateBlock;  BasicBlock earlyBlock=getBlock(earlyPos);  if (VM.VerifyAssertions) {    if (!dominator.dominates(earlyBlock.getNumber(),_origBlock.getNumber()) || !dominator.dominates(earlyBlock.getNumber(),lateBlock.getNumber())) {      SSA.printInstructions(ir);      VM.sysWrite("> " + earlyBlock.getNumber() + ", "+ _origBlock.getNumber()+ ", "+ lateBlock.getNumber()+ "\n");      VM.sysWrite("" + inst + "\n");    }    VM._assert(dominator.dominates(earlyBlock.getNumber(),_origBlock.getNumber()));    VM._assert(dominator.dominates(earlyBlock.getNumber(),lateBlock.getNumber()));  }  for (; ; ) {    if (frequency(actBlock) < frequency(bestBlock)) {      if (DEBUG) {        VM.sysWrite("going from " + frequency(_origBlock) + " to "+ frequency(actBlock)+ "\n");      }      bestBlock=actBlock;    }    if (actBlock == earlyBlock) {      break;    }    actBlock=dominator.getParent(actBlock);  }  if (bestBlock == _origBlock)   return null;  if (DEBUG)   VM.sysWrite("best Block: " + bestBlock + "\n");  return bestBlock;}  }
class C{  public String listIndexPartitions(long timestamp){  if (timestamp == ITx.UNISOLATED || timestamp == ITx.READ_COMMITTED) {    timestamp=getLiveJournal().getLastCommitTime();  }  final StringBuilder sb=new StringBuilder();  final AbstractJournal journal=getJournal(timestamp);  if (journal == null) {    return "No journal: timestamp=" + timestamp;  }  sb.append("timestamp=" + timestamp + "\njournal="+ journal.getResourceMetadata());  final Iterator<String> itr=journal.indexNameScan(null,timestamp);  while (itr.hasNext()) {    final String name=itr.next();    final BTree btree=(BTree)journal.getIndexLocal(name,timestamp);    assert btree != null : name;    final IndexMetadata indexMetadata=btree.getIndexMetadata();    final LocalPartitionMetadata pmd=indexMetadata.getPartitionMetadata();    sb.append("\nname=" + name + ", checkpoint="+ btree.getCheckpoint()+ ", pmd="+ pmd);  }  return sb.toString();}  }
class C{  public static boolean volumeHasDefaultNamingConvention(String volumeName,String supportingDeviceName,boolean isDistributed,List<String> claimedVolumeNames){  if (!deviceHasDefaultNamingConvention(supportingDeviceName,isDistributed,claimedVolumeNames)) {    s_logger.info("Supporting device {} does conform to default naming convention",supportingDeviceName);    return false;  }  if (!volumeName.endsWith(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX)) {    s_logger.info("Volume {} does not end with the expected suffix",volumeName);    return false;  }  if (volumeName.length() == VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX.length()) {    s_logger.info("Volume name {} consists only of the volume suffix",volumeName);    return false;  }  int endIndex=volumeName.length() - VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX.length();  if (!supportingDeviceName.equals(volumeName.substring(0,endIndex))) {    s_logger.info("Volume name {} does not conform to default naming convention",volumeName);    return false;  }  return true;}  }
class C{  public OrganizationDataException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public Interpreter interpreter(){  return interpreter;}  }
class C{  public SODModel(double[] center,long[] weightVector){  this.center=center;  this.weightVector=weightVector;}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_removeFilter == null) {    Instances toFilter=getInputFormat();    int[] attsToDelete=new int[toFilter.numAttributes()];    int numToDelete=0;    for (int i=0; i < toFilter.numAttributes(); i++) {      if (i == toFilter.classIndex()) {        continue;      }      AttributeStats stats=toFilter.attributeStats(i);      if (stats.missingCount == toFilter.numInstances()) {        attsToDelete[numToDelete++]=i;      } else       if (stats.distinctCount < 2) {        attsToDelete[numToDelete++]=i;      } else       if (toFilter.attribute(i).isNominal()) {        double variancePercent=(double)stats.distinctCount / (double)(stats.totalCount - stats.missingCount) * 100.0;        if (variancePercent > m_maxVariancePercentage) {          attsToDelete[numToDelete++]=i;        }      }    }    int[] finalAttsToDelete=new int[numToDelete];    System.arraycopy(attsToDelete,0,finalAttsToDelete,0,numToDelete);    m_removeFilter=new Remove();    m_removeFilter.setAttributeIndicesArray(finalAttsToDelete);    m_removeFilter.setInvertSelection(false);    m_removeFilter.setInputFormat(toFilter);    for (int i=0; i < toFilter.numInstances(); i++) {      m_removeFilter.input(toFilter.instance(i));    }    m_removeFilter.batchFinished();    Instance processed;    Instances outputDataset=m_removeFilter.getOutputFormat();    outputDataset.setRelationName(toFilter.relationName());    setOutputFormat(outputDataset);    while ((processed=m_removeFilter.output()) != null) {      processed.setDataset(outputDataset);      push(processed);    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public void stateChanged(ChangeEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));  if (JMenuItem.this.getModel().isArmed()) {    if (!isArmed) {      isArmed=true;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.ARMED);      fireAccessibilityFocusedEvent(JMenuItem.this);    }  } else {    if (isArmed) {      isArmed=false;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.ARMED,null);    }  }  if (JMenuItem.this.isFocusOwner()) {    if (!hasFocus) {      hasFocus=true;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.FOCUSED);    }  } else {    if (hasFocus) {      hasFocus=false;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.FOCUSED,null);    }  }  if (JMenuItem.this.getModel().isPressed()) {    if (!isPressed) {      isPressed=true;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.PRESSED);    }  } else {    if (isPressed) {      isPressed=false;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.PRESSED,null);    }  }  if (JMenuItem.this.getModel().isSelected()) {    if (!isSelected) {      isSelected=true;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.CHECKED);      fireAccessibilityFocusedEvent(JMenuItem.this);    }  } else {    if (isSelected) {      isSelected=false;      firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.CHECKED,null);    }  }}  }
class C{  protected int unwrapValue(Object value){  return ((Integer)value).intValue();}  }
class C{  protected RelNode convertSetOp(SqlCall call){  final RelNode left=convertQueryRecursive(call.operand(0),false,null).project();  final RelNode right=convertQueryRecursive(call.operand(1),false,null).project();  boolean all=false;  if (call.getOperator() instanceof SqlSetOperator) {    all=((SqlSetOperator)(call.getOperator())).isAll();  }switch (call.getKind()) {case UNION:    return LogicalUnion.create(ImmutableList.of(left,right),all);case INTERSECT:  if (!all) {    return LogicalIntersect.create(ImmutableList.of(left,right),all);  } else {    throw Util.newInternal("set operator INTERSECT ALL not suported");  }case EXCEPT:if (!all) {  return LogicalMinus.create(ImmutableList.of(left,right),all);} else {  throw Util.newInternal("set operator EXCEPT ALL not suported");}default :throw Util.unexpected(call.getKind());}}  }
class C{  public Builder type(String type){  this.type=type;  return this;}  }
class C{  @FlashException(referrer={"createSimple","edit","list"}) public static void save(VirtualArrayForm virtualArray){  if (virtualArray == null) {    list();  }  virtualArray.validate("virtualArray");  if (Validation.hasErrors()) {    Common.handleError();  }  VirtualArrayRestRep varray=virtualArray.save();  if (TenantUtils.canReadAllTenants() && VirtualArrayUtils.canUpdateACLs()) {    saveTenantACLs(varray.getId().toString(),virtualArray.tenants);  }  flash.success(MessagesUtils.get(SAVED_SUCCESS,virtualArray.name));  backToReferrer();  list();}  }
class C{  public void insert(T value){  if (value == null) {    throw new IllegalArgumentException("BinaryTree cannot store 'null' values.");  }  RightThreadedBinaryNode<T> newNode=construct(value);  if (root == null) {    setRoot(newNode);    root.thread=artificialRoot;    return;  }  RightThreadedBinaryNode<T> node=root;  RightThreadedBinaryNode<T> n;  while (true) {    int c=value.compareTo((T)node.value);    if (c < 0) {      if ((n=node.getLeftSon()) == null) {        node.left=newNode;        newNode.thread=node;        return;      } else {        node=n;      }    } else     if (c >= 0) {      if ((n=node.getRightSon()) == null) {        node.right=newNode;        newNode.thread=node.thread;        node.thread=null;        return;      } else {        node=n;      }    }  }}  }
class C{  public static <T>T rethrow(LocalizedMethodFault lmf) throws Exception {  Class<?> type=lmf.getFault().getClass();  String possibleWrapperType=type.getName() + EXCEPTION_SUFFIX;  Exception ex;  try {    ClassLoader cl=type.getClassLoader();    Class<?> faultClass=cl.loadClass(possibleWrapperType);    Constructor<?> ctor=faultClass.getConstructor(String.class,type);    ex=(Exception)ctor.newInstance(lmf.getLocalizedMessage(),lmf.getFault());  } catch (  ReflectiveOperationException e) {    throw new GenericVimFault(lmf.getLocalizedMessage(),lmf.getFault());  }  throw ex;}  }
class C{  private String createResultXML(BigDecimal amount,String currency){  PriceConverter pc=new PriceConverter();  StringBuffer resultxml=new StringBuffer("");  resultxml.append("<BillingDetails>");  resultxml.append("<OverallCosts netAmount=\"" + pc.getValueToDisplay(amount,false) + "\" currency=\""+ currency+ "\" grossAmount=\"14691\">");  resultxml.append("<Discount percent=\"0.00\" discountNetAmount=\"0\" ");  resultxml.append("netAmountAfterDiscount=\"0\" netAmountBeforeDiscount=\"0\" />");  resultxml.append("<VAT percent=\"5.00\" amount=\"10\"/>");  resultxml.append("</OverallCosts>");  resultxml.append("</BillingDetails>");  return resultxml.toString();}  }
class C{  public int hashCode(){  return value;}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  public ParkingAgentsTracker(Scenario scenario,double distance,ParkingInfrastructure parkingInfrastructure){  super();  this.parkingOccupancy=new ParkingOccupancyStats();  this.scenario=scenario;  this.distance=distance;  this.parkingInfrastructure=parkingInfrastructure;  this.carLegAgents=new HashSet<Id>();  this.linkEnteredAgents=new HashSet<Id>();  this.selectedParkingsMap=new HashMap<Id,Id>();  this.lastTimeStepsLinkEnteredAgents=new TreeSet<Id>();  this.searchingAgents=new HashSet<Id>();  this.agents=new HashMap<Id,PersonDriverAgentImpl>();  this.nextNonParkingActivity=new HashMap<Id,Activity>();  this.parkingIterationScoreSum=new DoubleValueHashMap<Id>();  this.setActiveReplanningIdentifiers(new HashMapHashSetConcat<DuringLegAgentSelector,Id>());  this.previousNonParkingActivityStartTime=new HashMap<Id,Double>();  this.setSearchStartTime(new HashMap<Id,Double>());  this.lastParkingFacilityId=new HashMap<Id,Id>();  this.lastCarMovementRegistered=new HashMap<Id,Double>();  this.endTimeOfPreviousActivity=new HashMap<Id,Double>();  this.didUseCarOnce=new HashSet<Id>();  this.parkingWalkTimesLog=new LinkedListValueHashMap<Id,Pair<Id,Double>>();  this.parkingSearchTimesLog=new LinkedListValueHashMap<Id,Pair<Id,Double>>();  this.parkingCostLog=new LinkedListValueHashMap<Id,Pair<Id,Double>>();}  }
class C{  public void tickStop(){  if (mTimer != null) {    mTimer.cancel();    mTimer=null;  }}  }
class C{  public PrimaryExpression createPrimaryExpression(){  PrimaryExpressionImpl primaryExpression=new PrimaryExpressionImpl();  return primaryExpression;}  }
class C{  public void add(ISyncProcessor processor){  mSyncProcessors.add(processor);}  }
class C{  @Override public <K,D,A,M extends Map<K,D>>CompletableFuture<M> groupBy(final Function<? super T,? extends K> classifier,final Supplier<M> mapFactory,final Collector<? super T,A,D> downstream){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  private RVMField(TypeReference declaringClass,MemberReference memRef,short modifiers,Atom signature,int constantValueIndex,RVMAnnotation[] annotations){  super(declaringClass,memRef,modifiers,signature,annotations);  this.constantValueIndex=constantValueIndex;  TypeReference typeRef=memRef.asFieldReference().getFieldContentsType();  this.size=(byte)typeRef.getMemoryBytes();  this.reference=typeRef.isReferenceType();  this.madeTraced=false;  if (VM.runningVM && isUntraced()) {    VM.sysFail("Untraced field " + toString() + " created at runtime!"+ " Untraced fields must be resolved at build time to ensure that"+ " the Untraced annotation is visible to the compilers!");  }}  }
class C{  public void unbind(String name) throws NamingException {  unbind(new CompositeName(name));}  }
class C{  public input removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public StringElement addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private HashtableEntry<K,V>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") HashtableEntry<K,V>[] newTable=(HashtableEntry<K,V>[])new HashtableEntry[newCapacity];  table=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  public DeviceUniqueIndex(EnumSet<DeviceField> keyFields){  super(keyFields);  index=new ConcurrentHashMap<IndexedEntity,Long>();}  }
class C{  private void init(AttributeSet attrs,int defStyle){  TypedArray a=null;  try {    a=getContext().obtainStyledAttributes(attrs,R.styleable.countingTextView,defStyle,0);    duration=a.getInt(R.styleable.countingTextView_duration,1200);  }  finally {    if (a != null) {      a.recycle();    }  }  interpolator=new AccelerateDecelerateInterpolator();}  }
class C{  @Override public Message<TimesyncResponse> apply(Message<TimesyncRequest> timesyncRequest){  return MessageBuilder.createMessage(new TimesyncResponse(),timesyncRequest.getHeaders());}  }
class C{  public static void writeProperties(Properties props,File file,boolean includeDefaults) throws IOException {  writeProperties(props,new FileOutputStream(file),includeDefaults);}  }
class C{  @Override public void initializeLM(){  this.languageModel=new KenLM(ngramOrder,path);  Vocabulary.registerLanguageModel(this.languageModel);  Vocabulary.id(config.default_non_terminal);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.EXISTENTIAL_TYPE_REF__WILDCARD:    return wildcard != null;case TypeRefsPackage.EXISTENTIAL_TYPE_REF__BOUND_TYPE_VARIABLE:  return boundTypeVariable != null;}return super.eIsSet(featureID);}  }
class C{  @Override public String generateURL(XYDataset dataset,int series,int item){  String url=this.prefix;  boolean firstParameter=url.indexOf("?") == -1;  url+=firstParameter ? "?" : "&amp;";  url+=this.seriesParameterName + "=" + series+ "&amp;"+ this.itemParameterName+ "="+ item;  return url;}  }
class C{  @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {    event.getText().clear();    PersianCalendar mPersianCalendar=new PersianCalendar();    mPersianCalendar.setTimeInMillis(mDateMillis);    String dateString=LanguageUtils.getPersianNumbers(mPersianCalendar.getPersianMonthName() + " " + mPersianCalendar.getPersianYear());    event.getText().add(dateString);    return true;  }  return super.dispatchPopulateAccessibilityEvent(event);}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  public boolean scheduleOnceIn(final double delta,final Steppable event,final int ordering){synchronized (lock) {    return _scheduleOnce(new Key(time + delta,ordering),event);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          if (p > 0) {            curv=(Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / Math.pow(p,1.5);            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testEqualsObject(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  Object obj=new Object();  assertFalse(aNumber.equals(obj));}  }
class C{  public ToStringBuilder(Object object,ToStringStyle style){  this(object,style,null);}  }
class C{  @DSVerified("Modeled Lifecycle Event") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:47:59.615 -0500",hash_original_method="88BB0202BF6BAEB771096BFB80D04435",hash_generated_method="89FD83C8377F7059D62B43FADD327332") public boolean onCreateThumbnail(Bitmap outBitmap,Canvas canvas){  return false;}  }
class C{  public static AnnotatedTypeMirror leastUpperBound(final AnnotatedTypeFactory typeFactory,final Iterable<AnnotatedTypeMirror> types){  final Iterator<AnnotatedTypeMirror> typesIter=types.iterator();  if (!typesIter.hasNext()) {    ErrorReporter.errorAbort("Calling LUB on empty list!");  }  AnnotatedTypeMirror lubType=typesIter.next();  AnnotatedTypeMirror nextType=null;  while (typesIter.hasNext()) {    nextType=typesIter.next();    if (lubType.getKind().isPrimitive()) {      if (!nextType.getKind().isPrimitive()) {        lubType=typeFactory.getBoxedType((AnnotatedPrimitiveType)lubType);      }    } else     if (nextType.getKind().isPrimitive()) {      if (!lubType.getKind().isPrimitive()) {        nextType=typeFactory.getBoxedType((AnnotatedPrimitiveType)nextType);      }    }    lubType=AnnotatedTypes.leastUpperBound(typeFactory,lubType,nextType);  }  return lubType;}  }
class C{  private void add(final JLabel label,final JTextField field){  panel.add(label);  panel.add(field);  if (previous == null) {    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);  } else {    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);  }  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);  previous=label;}  }
class C{  protected double[] evaluate(MultivariateFunction function,double[][] input){  double[] output=new double[input.length];  for (int i=0; i < input.length; i++) {    output[i]=function.value(input[i]);  }  return output;}  }
class C{  protected void goingInactive(OBlock block){  if (_runMode != MODE_RUN) {    return;  }  int idx=getIndexOfBlock(block,0);  if (log.isDebugEnabled()) {    log.debug(_trainName + " Block \"" + block.getDisplayName()+ "\" goingInactive. idx= "+ idx+ ", _idxCurrentOrder= "+ _idxCurrentOrder+ " - warrant= "+ getDisplayName());  }  if (idx < _idxCurrentOrder) {    deallocateUpToBlock(idx);  } else   if (idx == _idxCurrentOrder) {    if (log.isDebugEnabled()) {      log.debug(_trainName + " LOST TRAIN firePropertyChange(\"blockChange\", " + block.getDisplayName()+ ", null) - warrant= "+ getDisplayName());    }    if (_engineer != null) {      _engineer.setSpeed(SPEED_STOP);    }  }synchronized (this) {    notify();  }}  }
class C{  private static boolean checkOffset(String value,int offset,char expected){  return (offset < value.length()) && (value.charAt(offset) == expected);}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  String pathToFile=null;  if (!Environment.isApplet()) {    pathToFile=com.bbn.openmap.util.FileUtils.getFilePathToOpenFromUser("Choose Image File for Raster");  } else {    JOptionPane.showMessageDialog(null,"Can't search for images in an applet!","Can't Choose Image",JOptionPane.ERROR_MESSAGE);  }  if (pathToFile == null)   return;  try {    javax.swing.ImageIcon ii=new javax.swing.ImageIcon(pathToFile);    raster=new OMScalingRaster(90f,-180f,89f,-179f,ii);  } catch (  IllegalArgumentException iae) {    Debug.error("EditableOMScalingRaster:  " + pathToFile + " doesn't appear to be an image file");    raster=new OMScalingRaster(90f,-180f,89f,-179f,new BufferedImage(1,1,BufferedImage.TYPE_INT_RGB));  }  if (ga != null) {    ga.setTo(raster,true);  }  assertGrabPoints();}  }
class C{  public static long toLocalTimeZone(long utcTimeMillis){  return convertTimeZone(TimeZone.getTimeZone(TIMEZONE_UTC),TimeZone.getDefault(),utcTimeMillis);}  }
class C{  public Item routing(String routing){  this.routing=routing;  return this;}  }
class C{  @HLEFunction(nid=0x627E6F3A,version=150) public int sceKernelReferSystemStatus(TPointer statusPtr){  SceKernelSystemStatus status=new SceKernelSystemStatus();  status.read(statusPtr);  status.status=0;  status.write(statusPtr);  return 0;}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  public static boolean throwsException(Value val){  val=getEquivalentValueRoot(val);  if (val instanceof BinopExpr || val instanceof UnopExpr || val instanceof Local|| val instanceof Constant) {    if (val instanceof DivExpr || val instanceof RemExpr || val instanceof LengthExpr)     return true;    return false;  }  return true;}  }
class C{  public static void openInformation(Shell parent,String title,String message){  open(INFORMATION,parent,title,message,SWT.NONE);}  }
class C{  public static OperationNotPermittedException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  OperationNotPermittedException object=new OperationNotPermittedException();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement())       reader.next();      return object;    }    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","OperationNotPermittedException").equals(reader.getName())) {          nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");          if ("true".equals(nillableValue) || "1".equals(nillableValue)) {            object.setOperationNotPermittedException(null);            reader.next();          } else {            object.setOperationNotPermittedException(ApplicationExceptionBean.Factory.parse(reader));          }        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public VcenterDataCenterRestRep update(URI id,VcenterDataCenterUpdate input){  return client.put(VcenterDataCenterRestRep.class,input,getIdUrl(),id);}  }
class C{  public void dragEnter(DropTargetDragEvent e){  if (!isDragAcceptable(e)) {    e.rejectDrag();  } else {    e.acceptDrag(e.getDropAction());  }}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public double calculateLogLikelihood(){  if (!intervalsKnown)   setupIntervals();  if (demoModel == null)   return calculateAnalyticalLogLikelihood();  double logL=0.0;  double currentTime=0.0;  DemographicFunction demoFunction=demoModel.getDemographicFunction();  for (int j=0; j < intervalCount; j++) {    logL+=calculateIntervalLikelihood(demoFunction,intervals[j],currentTime,lineageCounts[j],getIntervalType(j));    int diff=getCoalescentEvents(j) - 1;    for (int k=0; k < diff; k++) {      logL+=calculateIntervalLikelihood(demoFunction,0.0,currentTime,lineageCounts[j] - k - 1,COALESCENT);    }    currentTime+=intervals[j];  }  return logL;}  }
class C{  public String globalInfo(){  return "SymmetricalUncertAttributeEval :\n\nEvaluates the worth of an attribute " + "by measuring the symmetrical uncertainty with respect to the class. " + "\n\n SymmU(Class, Attribute) = 2 * (H(Class) - H(Class | Attribute)) "+ "/ H(Class) + H(Attribute).\n";}  }
class C{  public GroupedStackedBarRenderer(){  super();  this.seriesToGroupMap=new KeyToGroupMap();}  }
class C{  public static XMethod createXMethod(JavaClass javaClass,Method method){  if (method == null) {    throw new NullPointerException("method must not be null");  }  XMethod xmethod=createXMethod(javaClass.getClassName(),method);  assert xmethod.isResolved();  return xmethod;}  }
class C{  @Path("merge") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse merge(final MergeRequest request) throws ApiException, IOException {  request.withProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.merge(request);}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  for (int i=off; i < (off + length); i++) {    int v=data[i] & 0xff;    out.write(encodingTable[(v >>> 4)]);    out.write(encodingTable[v & 0xf]);  }  return length * 2;}  }
class C{  private Range calculateXDataRange(float[][] data){  Range result=null;  if (data != null) {    float lowest=Float.POSITIVE_INFINITY;    float highest=Float.NEGATIVE_INFINITY;    for (int i=0; i < data[0].length; i++) {      float v=data[0][i];      if (v < lowest) {        lowest=v;      }      if (v > highest) {        highest=v;      }    }    if (lowest <= highest) {      result=new Range(lowest,highest);    }  }  return result;}  }
class C{  public void testTicketBlzg463a() throws Exception {  final ASTContainer container=new TestHelper("explainHints-blzg1463a","explainHints-blzg1463a.rq","empty.trig","explainHints-blzg1463a.srx").runTest();  final Iterator<BOp> explainHintAnnotatedBOps=ExplainHints.explainHintAnnotatedBOpIterator(container.getOptimizedAST());  assertTrue(explainHintAnnotatedBOps.hasNext());}  }
class C{  public CharSequence loadLabel(PackageManager pm){  if (mNonLocalizedLabel != null) {    return mNonLocalizedLabel;  }  if (mLabelRes != 0 && mSourcePackage != null) {    CharSequence label=pm.getText(mSourcePackage,mLabelRes,null);    if (label != null) {      return label;    }  }  return null;}  }
class C{  private void sendHandshakeDescriptionStatsRequest(){  OFDescStatsRequest descStatsRequest=factory.buildDescStatsRequest().setXid(handshakeTransactionIds--).build();  mainConnection.write(descStatsRequest);}  }
class C{  static String translateSQL(String sql,boolean escapeProcessing){  if (sql == null) {    throw DbException.getInvalidValueException("SQL",null);  }  if (!escapeProcessing) {    return sql;  }  if (sql.indexOf('{') < 0) {    return sql;  }  int len=sql.length();  char[] chars=null;  int level=0;  for (int i=0; i < len; i++) {    char c=sql.charAt(i);switch (c) {case '\'':case '"':case '/':case '-':      i=translateGetEnd(sql,i,c);    break;case '{':  level++;if (chars == null) {  chars=sql.toCharArray();}chars[i]=' ';while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}int start=i;if (chars[i] >= '0' && chars[i] <= '9') {chars[i - 1]='{';while (true) {checkRunOver(i,len,sql);c=chars[i];if (c == '}') {break;}switch (c) {case '\'':case '"':case '/':case '-':i=translateGetEnd(sql,i,c);break;default :}i++;}level--;break;} else if (chars[i] == '?') {i++;checkRunOver(i,len,sql);while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}if (sql.charAt(i) != '=') {throw DbException.getSyntaxError(sql,i,"=");}i++;checkRunOver(i,len,sql);while (Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}}while (!Character.isSpaceChar(chars[i])) {i++;checkRunOver(i,len,sql);}int remove=0;if (found(sql,start,"fn")) {remove=2;} else if (found(sql,start,"escape")) {break;} else if (found(sql,start,"call")) {break;} else if (found(sql,start,"oj")) {remove=2;} else if (found(sql,start,"ts")) {break;} else if (found(sql,start,"t")) {break;} else if (found(sql,start,"d")) {break;} else if (found(sql,start,"params")) {remove="params".length();}for (i=start; remove > 0; i++, remove--) {chars[i]=' ';}break;case '}':if (--level < 0) {throw DbException.getSyntaxError(sql,i);}chars[i]=' ';break;case '$':i=translateGetEnd(sql,i,c);break;default :}}if (level != 0) {throw DbException.getSyntaxError(sql,sql.length() - 1);}if (chars != null) {sql=new String(chars);}return sql;}  }
class C{  public boolean isDenseMode(){  return denseMode;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static void realWrite(final OutputStream out,final double d,final int dp) throws IOException {  if (Double.isNaN(d)) {    out.write(NAN_BYTES);    return;  }  final boolean tooBig;  final double e;  if (dp >= POWERS_10.length) {    tooBig=true;    e=Double.NaN;  } else {    e=d * POWERS_10[dp];    tooBig=e <= MIN || e > MAX;  }  if (tooBig) {    out.write(realFormat(d,dp).getBytes());    return;  }  final int s;  if (d < 0.0) {    s=(int)-MathUtils.round(-e);  } else {    s=(int)MathUtils.round(e);  }  if (dp == 0) {    intWrite(out,s);    return;  }  int t;  if (s < 0) {    t=-s;    out.write('-');  } else {    t=s;  }  if (t == 0) {    out.write('0');    out.write('.');    for (int k=0; k < dp; k++) {      out.write('0');    }    return;  }  int x=POWERS_10.length - 1;  while (POWERS_10[x] > t) {    x--;  }  if (x < dp) {    out.write((byte)'0');  } else {    while (x >= dp) {      int dig=0;      final int pwr=POWERS_10[x];      while (pwr <= t) {        t-=pwr;        dig++;      }      out.write('0' + dig);      x--;    }  }  out.write((byte)'.');  int y=Math.max(dp - 1,x);  while (y >= 0) {    int dig=0;    final int pwr=POWERS_10[y];    while (pwr <= t) {      t-=pwr;      dig++;    }    out.write('0' + dig);    y--;  }  assert t == 0;}  }
class C{  public boolean isSortingCategories(){  return sortingCategories;}  }
class C{  public int sizeHot(){  int x=0;  for (  Segment<K,V> s : segments) {    x+=s.sizeHot();  }  return x;}  }
class C{  public static void showView(final Window parent,final IViewContainer viewContainer,final INaviView view,final CGraphWindow window){  Preconditions.checkNotNull(parent,"IE00015: Parent argument can not be null");  Preconditions.checkNotNull(viewContainer,"IE00016: View container argument can not be null");  Preconditions.checkNotNull(view,"IE00018: View argument can not be null");  Preconditions.checkState(viewContainer.isLoaded(),"IE00017: View container must be loaded");  Preconditions.checkState(viewContainer.getViews().contains(view),"IE00019: View is not part of the given view container");  final INaviFunction function=viewContainer.getFunction(view);  if (isPureImportedFunction(function)) {    CMessageBox.showInformation(parent,"Imported functions are not part of a module and can not be opened.\n" + "Note that it is possible to open imported functions once they " + "are forwarded to real functions in other modules.");    return;  } else   if (isForwardedImportedFunction(function)) {    showForwardedFunction(parent,viewContainer,view,function,window);  } else {    CGraphOpener.showGraph(viewContainer,view,window,parent);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TYPE_SPECIFIER__TYPE:    if (resolve)     return getType();  return basicGetType();case TypesPackage.TYPE_SPECIFIER__TYPE_ARGUMENTS:return getTypeArguments();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isSerializable(String classname){  boolean result;  try {    result=isSerializable(Class.forName(classname));  } catch (  Exception e) {    result=false;  }  return result;}  }
class C{  public CaseInsensitiveHashSet(ObjectCollection<? extends String> c,float f){  super(c,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  public boolean isValidName(){  throw new UnsupportedOperationException();}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(clientId);  sb.append("\n ");switch (status) {case CONNECTED:    sb.append(context.getString(R.string.connectedto));  break;case DISCONNECTED:sb.append(context.getString(R.string.disconnected));break;case NONE:sb.append(context.getString(R.string.no_status));break;case CONNECTING:sb.append(context.getString(R.string.connecting));break;case DISCONNECTING:sb.append(context.getString(R.string.disconnecting));break;case ERROR:sb.append(context.getString(R.string.connectionError));}sb.append(" ");sb.append(host);return sb.toString();}  }
class C{  protected void triggerSubplotSelectEvent(PlotItem it){  for (  ActionListener actionListener : actionListeners) {    actionListener.actionPerformed(new DetailViewSelectedEvent(this,ActionEvent.ACTION_PERFORMED,null,0,it));  }}  }
class C{  public static PublicKey parse(DerValue in) throws IOException {  AlgorithmId algorithm;  PublicKey subjectKey;  if (in.tag != DerValue.tag_Sequence)   throw new IOException("corrupt subject key");  algorithm=AlgorithmId.parse(in.data.getDerValue());  try {    subjectKey=buildX509Key(algorithm,in.data.getUnalignedBitString());  } catch (  InvalidKeyException e) {    throw new IOException("subject key, " + e.getMessage(),e);  }  if (in.data.available() != 0)   throw new IOException("excess subject key");  return subjectKey;}  }
class C{  public void undo(){  super.undo();  this.object.restoreState(preState);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  @TargetApi(21) public Bundler putSize(String key,Size value){  bundle.putSize(key,value);  return this;}  }
class C{  public String attributeNamePrefixTipText(){  return "Prefix for the created attribute names. " + "(default: \"\")";}  }
class C{  static void loadJar(File file,boolean expandClasspath) throws IOException {  JarFile jar=new JarFile(file);  ModuleCandidate container=new ModuleCandidate();  boolean core=false;  Manifest mf=jar.getManifest();  if (mf != null) {    Attributes attr=mf.getMainAttributes();    if (attr != null) {      if (attr.getValue("Toast-Core-Plugin-Class") != null && isCorePhase) {        String clazz=(String)attr.getValue("Toast-Core-Plugin-Class");        container.setCorePlugin(true,clazz);        coreClasses.add(clazz);        core=true;        log.info("Injected Core Plugin: " + file.getName());      }      if (attr.getValue("Toast-Plugin-Class") != null) {        log.debug("Bypass Module Detected: " + file.getName());        String bypassClass=(String)attr.getValue("Toast-Plugin-Class");        container.setBypass(true,bypassClass);      }      if (attr.getValue("Robot-Class") != null) {        log.debug("Wrapping Module Detected: " + file.getName());        String wrapperClazz=attr.getValue("Robot-Class");        container.setWrapper(true,wrapperClazz);      }    }  }  if (core && isCorePhase || !core && !isCorePhase) {    container.setFile(file);    for (    ZipEntry ze : Collections.list(jar.entries())) {      if (classFile.matcher(ze.getName()).matches()) {        container.addClassEntry(ze.getName());      }    }    log.debug("Preliminary Candidate Added: " + file.getName());    getCandidates().add(container);    if (expandClasspath)     addURL(file.toURI().toURL());  }}  }
class C{  public void testGetPublicKey() throws Exception {  Identity i=new IdentityStub("testGetPublicKey");  assertNull(i.getPublicKey());  PublicKey pk=new PublicKeyStub("kkk","Identity.testGetPublicKey",null);  i.setPublicKey(pk);  assertSame(pk,i.getPublicKey());}  }
class C{  public static List<String> filterTags(List<LanguageRange> priorityList,Collection<String> tags,FilteringMode mode){  return null;}  }
class C{  public void testDefaults() throws Exception {  Similarity sim=getSimilarity("text");  assertEquals(DefaultSimilarity.class,sim.getClass());  assertEquals(true,((DefaultSimilarity)sim).getDiscountOverlaps());}  }
class C{  public void testDoCheckWithNullTextToCheck(){  LOGGER.debug("doCheckWithNullTextToCheck");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn(null);  TextOnlyContainsNonAlphanumericalCharactersChecker instance=new TextOnlyContainsNonAlphanumericalCharactersChecker(mockTextElementBuilder,DETECTION_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public static int decodeSbrExtension(Context ac,SpectralBandReplication sbr,boolean crc,int cnt,int idAac){  int numSbrBits=0;  sbr.reset=false;  if (sbr.sampleRate == 0) {    sbr.sampleRate=2 * ac.oc[1].m4ac.sampleRate;  }  if (ac.oc[1].m4ac.extSampleRate == 0) {    ac.oc[1].m4ac.extSampleRate=2 * ac.oc[1].m4ac.sampleRate;  }  if (crc) {    ac.br.skip(10);    numSbrBits+=10;  }  sbr.kx[0]=sbr.kx[1];  sbr.m[0]=sbr.m[1];  sbr.kxAndMPushed=true;  numSbrBits++;  if (ac.br.readBool()) {    numSbrBits+=readSbrHeader(sbr,ac.br);  }  if (sbr.reset) {    sbrReset(ac,sbr);  }  if (sbr.start) {    numSbrBits+=readSbrData(ac,sbr,idAac);  }  int numSkipBits=(cnt * 8 - 4 - numSbrBits);  ac.br.skip(numSkipBits);  int numAlignBits=numSkipBits & 7;  int bytesRead=(numSbrBits + numAlignBits + 4) >> 3;  if (bytesRead > cnt) {    log.error(String.format("Expected to read %d SBR bytes actually read %d",cnt,bytesRead));  }  return cnt;}  }
class C{  @Override public String toString(){  return build();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final void invertValueOrdering(){  mValueOrderingSign=-mValueOrderingSign;  mSorted=false;}  }
class C{  public void backup(){  SharedPreferences settings=mContext.getSharedPreferences(AndroidConstants.SHARED_PREFS_PHOTOS,0);  SharedPreferences.Editor editor=settings.edit();  editor.clear();  ObjectMapper mapper=new ObjectMapper();  try {    editor.putString("photoList",mapper.writeValueAsString(mPhotoLists));    editor.putString("photoListNextPage",mapper.writeValueAsString(mPhotoListsNextPage));  } catch (  JsonProcessingException e) {    Log.e("PhotoAdapter",e.getMessage());  }  editor.apply();}  }
class C{  private static List<CommanderItem> readCommanders(Context context,String commandType){  List<CommanderItem> result=new ArrayList<>();  SharedPreferences sp=getSharedPreferences(context);  int counter=0;  String keyPrefix=KEY_COMMANDER + commandType;  while (true) {    String key=keyPrefix + String.format("%02d",counter);    String content=sp.getString(key,null);    if (content == null) {      break;    }    String[] ds=content.split(",");    CommanderItem item=null;    if (ds.length == 7) {      item=new CommanderItem(ds[0],ds[1],ds[2],ds[3],ds[4],Boolean.parseBoolean(ds[5]),Boolean.parseBoolean(ds[6]));    } else     if (ds.length == 9) {      item=new ExpanderCommanderItem(ds[0],ds[1],ds[2],ds[3],ds[4],Boolean.parseBoolean(ds[5]),Boolean.parseBoolean(ds[6]),Integer.parseInt(ds[7]),McpGpioExpander.fromString(ds[8]));    }    if (item != null) {      result.add(item);    }    counter++;  }  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  @Override public boolean isOpaque(){  Color back=getBackground();  Component p=getParent();  if (p != null) {    p=p.getParent();  }  boolean colorMatch=(back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque();  return !colorMatch && super.isOpaque();}  }
class C{  public static int maxLength(Collection strings){  int max=0;  for (Iterator i=strings.iterator(); i.hasNext(); ) {    String string=(String)i.next();    max=Math.max(max,string.length());  }  return max;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.STRING_LITERAL;}  }
class C{  @Nullable public static AspectItem readFromNBT(NBTTagCompound nbt){  ItemStack item=nbt.hasKey("item") ? ItemStack.loadItemStackFromNBT(nbt.getCompoundTag("item")) : null;  if (item == null)   return null;  return AspectManager.getAspectItem(item);}  }
class C{  private MethodTypeSignature parseMethodTypeSignature(){  FieldTypeSignature[] ets;  assert (index == 0);  return MethodTypeSignature.make(parseZeroOrMoreFormalTypeParameters(),parseFormalParameters(),parseReturnType(),parseZeroOrMoreThrowsSignatures());}  }
class C{  public boolean isReadOnly(){  return false;}  }
class C{  public boolean isReadOnly(){  return readOnly;}  }
class C{  public void register(){  if (registered)   return;  plugin.getServer().getPluginManager().registerEvents(this,plugin);  registered=true;}  }
class C{  public IgfsFixedLengthRecordResolver(long recLen){  this.recLen=recLen;}  }
class C{  public void read(ByteBuffer buffer){  buffer.get(_mask);}  }
class C{  public T casePosition_(Position_ object){  return null;}  }
class C{  public static boolean isXML11InternalEntityContent(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT_INTERNAL) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public boolean isSecondaryIndex(){  return cfName.contains(".");}  }
class C{  @Override public boolean isMultiSelectEnabled(){  return true;}  }
class C{  @Inline @Entrypoint public static boolean booleanArrayRead(boolean[] ref,int index){  if (NEEDS_BOOLEAN_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_BOOLEAN);    return Selected.Mutator.get().booleanRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public void blockGateways(){  for (  IgniteCacheProxy<?,?> proxy : jCacheProxies.values())   proxy.gate().onStopped();}  }
class C{  public static boolean isAssignable(Type lhsType,Type rhsType){  if (rhsType == null || lhsType == null)   return false;  try {    return TypeUtils.isAssignable(rhsType,lhsType);  } catch (  Throwable e) {    logger.debug("Found unassignable type: " + e);    return false;  }}  }
class C{  public static byte[] gzip(String input){  FastByteArrayOutputStream baos=new FastByteArrayOutputStream();  PGZIPOutputStream gzos=null;  try {    gzos=new PGZIPOutputStream(baos);    gzos.write(input.getBytes("UTF-8"));  } catch (  IOException e) {    MainUtil.handleError(e);  } finally {    if (gzos != null)     try {      gzos.close();    } catch (    IOException ignore) {    }  }  return baos.toByteArray();}  }
class C{  public static ContextFreeGrammar load(Reader reader) throws IOException {  StreamTokenizer tokenizer=new StreamTokenizer(reader);  tokenizer.resetSyntax();  tokenizer.wordChars('a','z');  tokenizer.wordChars('A','Z');  tokenizer.wordChars('0','9');  tokenizer.wordChars('<','<');  tokenizer.wordChars('>','>');  tokenizer.wordChars('_','_');  tokenizer.wordChars('-','-');  tokenizer.wordChars('.','.');  tokenizer.wordChars(128 + 32,255);  tokenizer.whitespaceChars(0,' ');  tokenizer.quoteChar('"');  tokenizer.quoteChar('\'');  tokenizer.eolIsSignificant(true);  tokenizer.slashSlashComments(true);  tokenizer.slashStarComments(true);  ContextFreeGrammar grammar=new ContextFreeGrammar();  Rule rule=null;  Production production=null;  while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {    if ((tokenizer.ttype == ':') || (tokenizer.ttype == '=')) {      do {        tokenizer.nextToken();      } while ((tokenizer.ttype == ':') || (tokenizer.ttype == '='));      if ((rule == null) || (production != null)) {        throw new GrammarException("unexpected rule separator",tokenizer.lineno());      }      tokenizer.pushBack();    } else     if (tokenizer.ttype == '|') {      if ((rule != null) && (production == null)) {        throw new GrammarException("rule must contain at least one production",tokenizer.lineno());      }      production=null;    } else     if (tokenizer.ttype == StreamTokenizer.TT_EOL) {      if ((rule != null) && (production == null)) {        throw new GrammarException("rule must contain at least one production",tokenizer.lineno());      }      rule=null;      production=null;    } else {      String string=null;      if ((tokenizer.ttype == StreamTokenizer.TT_WORD) || (tokenizer.ttype == '\'') || (tokenizer.ttype == '\"')) {        string=tokenizer.sval;      } else       if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {        string=Double.toString(tokenizer.nval);      } else {        string=Character.toString((char)tokenizer.ttype);      }      if (string.startsWith("<") && string.endsWith(">")) {        string=string.substring(1,string.length() - 1);        if (string.isEmpty()) {          throw new GrammarException("invalid symbol",tokenizer.lineno());        }        if (rule == null) {          rule=new Rule(new Symbol(string,false));          grammar.add(rule);        } else         if (production == null) {          production=new Production();          production.add(new Symbol(string,false));          rule.add(production);        } else {          production.add(new Symbol(string,false));        }      } else {        if (rule == null) {          throw new GrammarException("rule must start with non-terminal",tokenizer.lineno());        } else         if (production == null) {          production=new Production();          production.add(new Symbol(string,true));          rule.add(production);        } else {          production.add(new Symbol(string,true));        }      }    }  }  if ((rule != null) && (production == null)) {    throw new GrammarException("rule must contain at least one production",tokenizer.lineno());  }  return grammar;}  }
class C{  private void respondWithHierarchyDelimiter(Responder responder,char delimiter){  final LSubResponse response=new LSubResponse("",true,delimiter);  responder.respond(response);}  }
class C{  public void attack(Creature c){}  }
class C{  public static Bitmap decodeBitmapBounded(InputStream is,int maxWidth,int maxHeight) throws IOException {  BufferedInputStream bufferedInputStream=new BufferedInputStream(is,STREAM_BUFFER_SIZE);  try {    bufferedInputStream.mark(STREAM_BUFFER_SIZE);    BitmapFactory.Options bmOptions=new BitmapFactory.Options();    bmOptions.inJustDecodeBounds=true;    BitmapFactory.decodeStream(bufferedInputStream,null,bmOptions);    bufferedInputStream.reset();    bmOptions.inJustDecodeBounds=false;    bmOptions.inSampleSize=calculateInSampleSize(bmOptions.outWidth,bmOptions.outHeight,maxWidth,maxHeight);    return BitmapFactory.decodeStream(bufferedInputStream,null,bmOptions);  }  finally {    bufferedInputStream.close();  }}  }
class C{  public Binding lookup(String varName){  if (varName.equals(binding.getVarName())) {    return binding;  }  return parent != null ? parent.lookup(varName) : null;}  }
class C{  @Override public Vertex parsePush(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  Vertex expression=network.createInstance(Primitive.PUSH);  Vertex value=parseElement(stream,elements,debug,network);  expression.addRelationship(Primitive.ARGUMENT,value,Integer.MAX_VALUE);  return expression;}  }
class C{  void appletEdit(){}  }
class C{  public Deathplace(){  super();}  }
class C{  public void add(final float operand){  this.value+=operand;}  }
class C{  private long calculateDurationInMicros(Span span){  Log clientSend=hasLog(Span.CLIENT_SEND,span);  Log clientReceived=hasLog(Span.CLIENT_RECV,span);  if (clientSend != null && clientReceived != null) {    return (clientReceived.getTimestamp() - clientSend.getTimestamp()) * 1000;  }  return span.getAccumulatedMicros();}  }
class C{  private boolean parseStep(PsiBuilder builder){  if (parseAxisSpecifier(builder)) {    if (!parseNodeTest(builder)) {      builder.error("node test expected");    }    while (builder.getTokenType() == XPathTokenTypes.LBRACKET) {      parsePredicate(builder);    }    return true;  } else   if (parseAbbreviatedStep(builder)) {    return true;  }  return false;}  }
class C{  public void removeTargetListener(String ns,String an,boolean isCSS,AnimationTargetListener l){  if (isCSS) {    ((SVGAnimationTargetContext)svgContext).removeTargetListener(an,l);  } else {    super.removeTargetListener(ns,an,isCSS,l);  }}  }
class C{  @Override @Async public void send(String to,String subject,String body) throws MessagingException {  log.info("Sending SMTP mail from thread " + Thread.currentThread().getName());  MimeMessage message=javaMailSender.createMimeMessage();  MimeMessageHelper helper;  helper=new MimeMessageHelper(message,true);  helper.setSubject(subject);  helper.setTo(to);  helper.setText(body,true);  javaMailSender.send(message);  log.info("Sent SMTP mail from thread " + Thread.currentThread().getName());}  }
class C{  public void useSelfRender(){  atlasIndex=CCSpriteIndexNotInitialized;  usesSpriteSheet_=false;  textureAtlas_=null;  spriteSheet_=null;  dirty_=recursiveDirty_=false;  float x1=0 + offsetPosition_.x;  float y1=0 + offsetPosition_.y;  float x2=x1 + rect_.size.width;  float y2=y1 + rect_.size.height;  vertexes.position(0);  tmpV[0]=x1;  tmpV[1]=y2;  tmpV[2]=0;  tmpV[3]=x1;  tmpV[4]=y1;  tmpV[5]=0;  tmpV[6]=x2;  tmpV[7]=y2;  tmpV[8]=0;  tmpV[9]=x2;  tmpV[10]=y1;  tmpV[11]=0;  BufferUtils.copyFloats(tmpV,0,vertexes,12);  vertexes.position(0);}  }
class C{  public final void testHashCode01(){  int hc=0;  EllipticCurve f=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);  hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static ServerContext newInstance(){  dispose();  return getCurrentInstance();}  }
class C{  public boolean isHarmonic(double f1,double f2){  if (Math.abs(getToneChanged(f1,f2)) >= 1) {    double minF0=100;    int minDivisor=(int)(f1 / minF0);    for (int i=1; i <= minDivisor; i++) {      double f0=f1 / i;      int maxMultiplier=(int)(f2 / f0 + 1);      for (int j=2; j <= maxMultiplier; j++) {        double f=f0 * j;        double diff=Math.abs(getToneChanged(f,f2) % 12);        if (diff > 6)         diff=12 - diff;        if (diff <= 1)         return true;      }    }  }  return false;}  }
class C{  public void ensureCapacity(int minimumCapacity){  int newCapacity=Tools.arraySize(minimumCapacity,m_fillFactor);  if (newCapacity > m_data.length) {    rehash(newCapacity);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProcessPara[").append(get_ID()).append("]");  return sb.toString();}  }
class C{  @Override public void close() throws IOException {  in.close();}  }
class C{  public Type attribStat(JCTree tree,Env<AttrContext> env){  return attribTree(tree,env,statInfo);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static double L_OneError(int Y[][],double Rpred[][]){  int N=Y.length;  int one_error=0;  for (int i=0; i < N; i++) {    if (allMissing(Y[i])) {      N--;      continue;    }    if (Y[i][Utils.maxIndex(Rpred[i])] <= 0)     one_error++;  }  return (double)one_error / (double)N;}  }
class C{  private int hashToInt(byte[] bytes,int start){  DataInput input=new DataInputStream(new ByteArrayInputStream(bytes,start,bytes.length - start));  int val;  try {    val=input.readInt();  } catch (  IOException e) {    throw new IllegalStateException(e);  }  return val;}  }
class C{  public static void copyResourceFile(String resourceFile,String destFile){  URL url=Activator.getDefault().getBundle().getEntry(resourceFile);  URL fileURL;  try {    fileURL=FileLocator.toFileURL(url);    URL resolve=FileLocator.resolve(fileURL);    File file=new File(resolve.getFile());    FileInputStream fis=new FileInputStream(file);    File outputFile=new File(destFile);    FileOutputStream fos=new FileOutputStream(outputFile);    writeFile(fis,fos);  } catch (  IOException e) {    Activator.getDefault().log(e.getMessage(),e);  }}  }
class C{  public JavaSearchTypeNameMatch(IType type,int modifiers){  this.type=type;  this.modifiers=modifiers;}  }
class C{  @Override protected void onAuthDescriptionsUpdated(){  super.onAuthDescriptionsUpdated();  getPreferenceScreen().removeAll();  if (mAccount != null) {    mProviderIcon.setImageDrawable(getDrawableForType(mAccount.type));    mProviderId.setText(getLabelForType(mAccount.type));  }  addPreferencesFromResource(R.xml.account_sync_settings);}  }
class C{  private void vibrateIfEnabled(){  final boolean enabled=styledAttributes.getBoolean(R.styleable.PinLock_vibrateOnClick,false);  if (enabled) {    Vibrator v=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);    final int duration=styledAttributes.getInt(R.styleable.PinLock_vibrateDuration,20);    v.vibrate(duration);  }}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String nl=System.getProperty("line.separator");  buf.append("              Version: ").append(this.getVersion()).append(nl);  buf.append("             IssuerDN: ").append(this.getIssuerDN()).append(nl);  buf.append("          This update: ").append(this.getThisUpdate()).append(nl);  buf.append("          Next update: ").append(this.getNextUpdate()).append(nl);  buf.append("  Signature Algorithm: ").append(this.getSigAlgName()).append(nl);  byte[] sig=this.getSignature();  buf.append("            Signature: ").append(new String(Hex.encode(sig,0,20))).append(nl);  for (int i=20; i < sig.length; i+=20) {    if (i < sig.length - 20) {      buf.append("                       ").append(new String(Hex.encode(sig,i,20))).append(nl);    } else {      buf.append("                       ").append(new String(Hex.encode(sig,i,sig.length - i))).append(nl);    }  }  Extensions extensions=c.getTBSCertList().getExtensions();  if (extensions != null) {    Enumeration e=extensions.oids();    if (e.hasMoreElements()) {      buf.append("           Extensions: ").append(nl);    }    while (e.hasMoreElements()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)e.nextElement();      Extension ext=extensions.getExtension(oid);      if (ext.getExtnValue() != null) {        byte[] octs=ext.getExtnValue().getOctets();        ASN1InputStream dIn=new ASN1InputStream(octs);        buf.append("                       critical(").append(ext.isCritical()).append(") ");        try {          if (oid.equals(Extension.cRLNumber)) {            buf.append(new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.deltaCRLIndicator)) {            buf.append("Base CRL: " + new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.issuingDistributionPoint)) {            buf.append(IssuingDistributionPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.cRLDistributionPoints)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.freshestCRL)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else {            buf.append(oid.getId());            buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);          }        } catch (        Exception ex) {          buf.append(oid.getId());          buf.append(" value = ").append("*****").append(nl);        }      } else {        buf.append(nl);      }    }  }  Set set=getRevokedCertificates();  if (set != null) {    Iterator it=set.iterator();    while (it.hasNext()) {      buf.append(it.next());      buf.append(nl);    }  }  return buf.toString();}  }
class C{  @Override protected int lookupCategory(int c){  int result=super.lookupCategory(c);  if (result != RuleBasedBreakIterator.IGNORE && categoryFlags[result]) {    ++dictionaryCharCount;  }  return result;}  }
class C{  static void checkMethodDesc(final String desc){  if (desc == null || desc.length() == 0) {    throw new IllegalArgumentException("Invalid method descriptor (must not be null or empty)");  }  if (desc.charAt(0) != '(' || desc.length() < 3) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }  int start=1;  if (desc.charAt(start) != ')') {    do {      if (desc.charAt(start) == 'V') {        throw new IllegalArgumentException("Invalid descriptor: " + desc);      }      start=checkDesc(desc,start,false);    } while (start < desc.length() && desc.charAt(start) != ')');  }  start=checkDesc(desc,start + 1,true);  if (start != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public boolean containsHeader(final String name){  for (final Iterator headerIter=headers.iterator(); headerIter.hasNext(); ) {    final Header header=(Header)headerIter.next();    if (header.getName().equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  private void buildGetS3KeyPrefixResponse(MockCloseableHttpResponse response,URI uri) throws JAXBException {  Pattern pattern=Pattern.compile("/herd-app/rest/businessObjectData(/namespaces/(?<namespace>.*?))?" + "/businessObjectDefinitionNames/(?<businessObjectDefinitionName>.*?)/businessObjectFormatUsages/(?<businessObjectFormatUsage>.*?)" + "/businessObjectFormatFileTypes/(?<businessObjectFormatFileType>.*?)/businessObjectFormatVersions/(?<businessObjectFormatVersion>.*?)"+ "/s3KeyPrefix");  Matcher matcher=pattern.matcher(uri.getPath());  if (matcher.find()) {    S3KeyPrefixInformation s3KeyPrefixInformation=new S3KeyPrefixInformation();    String namespace=getGroup(matcher,"namespace");    namespace=namespace == null ? "testNamespace" : namespace;    String businessObjectFormatUsage=getGroup(matcher,"businessObjectFormatUsage");    String businessObjectFormatType=getGroup(matcher,"businessObjectFormatFileType");    String businessObjectDefinitionName=getGroup(matcher,"businessObjectDefinitionName");    String businessObjectFormatVersion=getGroup(matcher,"businessObjectFormatVersion");    s3KeyPrefixInformation.setS3KeyPrefix(namespace.toLowerCase().replace('_','-') + "/exchange-a/" + businessObjectFormatUsage.toLowerCase().replace('_','-')+ "/"+ businessObjectFormatType.toLowerCase().replace('_','-')+ "/"+ businessObjectDefinitionName.toLowerCase().replace('_','-')+ "/frmt-v"+ businessObjectFormatVersion+ "/data-v0/process-date=2014-01-31");    response.setEntity(getHttpEntity(s3KeyPrefixInformation));  }}  }
class C{  public static boolean permitCurrentLog(long maxCount,long logCount,long currentLogTime,long prevLogTime){  if (maxCount == 0) {    return true;  } else   if (currentLogTime == prevLogTime) {    return true;  }  return logCount <= maxCount;}  }
class C{  public boolean add(float val){  int index=insertionIndex(val);  if (index < 0) {    return false;  }  byte previousState=_states[index];  _set[index]=val;  _states[index]=FULL;  postInsertHook(previousState == FREE);  return true;}  }
class C{  public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public static boolean exists(File f){  boolean exists=false;  try {    exists=f.exists();  } catch (  SecurityException se) {    if (Trace.pathResolver) {      Trace.trace(se.getMessage());    }  }  return exists;}  }
class C{  public Period withYears(int years){  if (years == this.years) {    return this;  }  return create(years,months,days);}  }
class C{  public final void testRemoveAllConstraintsFromCollection(){  Constraint<CharSequence> constraint1=Constraints.containsNumber();  Constraint<CharSequence> constraint2=Constraints.containsLetter();  Constraint<CharSequence> constraint3=Constraints.containsSymbol();  Collection<Constraint<CharSequence>> constraints=new LinkedList<>();  constraints.add(constraint1);  constraints.add(constraint2);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllConstraints(constraints);  passwordEditText.addConstraint(constraint3);  passwordEditText.removeAllConstraints(constraints);  passwordEditText.removeAllConstraints(constraints);  assertEquals(1,passwordEditText.getConstraints().size());  assertEquals(constraint3,passwordEditText.getConstraints().iterator().next());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrreplacedatacountnegative.class,args);}  }
class C{  public void onRefreshComplete(){  L.e(TAG,"onRefreshComplete !!!");  PtrViewHolder ptrViewHolder=getRefreshPtrView();  if (ptrViewHolder == null) {    L.e(TAG,"onRefreshComplete direction = " + mRefreshDirection + " is bug! let's fix it!");    return;  }  if (ptrViewHolder.ptrHandler != null) {    ptrViewHolder.ptrHandler.onRefreshEnd();  }  int endY=getRefreshOffsetY();  if (!mIsBeingDragged) {    mPtrScroller.smoothScroll(endY);  }  mIsRefreshing=false;  mRefreshDirection=0;}  }
class C{  protected UserProjectReference createProject(String name,String workspaceName,String remoteName,Path configurationPath){  if (remoteName == null) {    remoteName=getDefaultRemoteName();  }  if (getRemote(remoteName) == null) {    System.out.println(format("The remote named %s doesn't exists",remoteName));    return null;  }  Codenvy remoteCodenvy=readyRemotes.get(remoteName);  if (remoteCodenvy == null) {    System.out.println(format("The remote named %s is not yet available. Need to login first",remoteName));    return null;  }  UserWorkspace userWorkspace;  if (workspaceName == null) {    List<UserWorkspace> workspaces=getWorkspaces(remoteName,remoteCodenvy);    if (workspaces.size() > 1) {      System.out.println(format("Too many workspaces in the remote %s. Please specify the name of the workspace",remoteName));      return null;    } else     if (workspaces.isEmpty()) {      System.out.println("No workspace found in the remote %s. Please specify another remote or create a workspace first");      return null;    }    userWorkspace=workspaces.get(0);  } else {    userWorkspace=getWorkspaceWithName(workspaceName,remoteName,remoteCodenvy);    if (userWorkspace == null) {      System.out.println(format("The workspace with name %s has not been found in the remote %s",workspaceName,remoteName));      return null;    }  }  ProjectReference projectToCreate=codenvyClient.newProjectBuilder().withName(name).withWorkspaceId(userWorkspace.id()).withWorkspaceName(workspaceName).withType("blank").build();  System.out.print("Creating project...");  try {    remoteCodenvy.project().create(projectToCreate).execute();  } catch (  CodenvyErrorException e) {    if (isStackTraceEnabled()) {      throw e;    }    System.out.println("Unable to create the project:" + e.getMessage());    return null;  }  System.out.println("done !");  List<ProjectReference> projects=remoteCodenvy.project().getWorkspaceProjects(userWorkspace.id()).execute();  ProjectReference newProject=null;  for (  ProjectReference project : projects) {    if (name.equals(project.name())) {      newProject=project;      break;    }  }  if (newProject == null) {    return null;  }  UserProjectReference builtUserProjectReference=new DefaultUserProjectReference(remoteCodenvy,newProject,userWorkspace);  System.out.print("Now updating project configuration...");  remoteCodenvy.project().updateProject(builtUserProjectReference.getInnerReference(),configurationPath);  System.out.println("done !");  return builtUserProjectReference;}  }
class C{  public AsyncBufferedOutputStream(OutputStream out,int bufSize,int maxBuffers){  super(out);  buffers=new ConcurrentLinkedDeque<>();  buf=new byte[bufSize];  flusherThread.start();}  }
class C{  public TimeSeries(String title){  super(title);}  }
class C{  public RTMPClient(){  ioHandler=new RTMPMinaIoHandler();  ioHandler.setCodecFactory(getCodecFactory());  ioHandler.setMode(RTMP.MODE_CLIENT);  ioHandler.setHandler(this);  ioHandler.setRtmpConnManager(RTMPClientConnManager.getInstance());}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public void write(final ExampleSet exampleSet,final OutputStream outputStream) throws IOException {  DataOutputStream out=new DataOutputStream(outputStream);  List<AttributeRole> allRoles=new LinkedList<>();  Iterator<AttributeRole> i=exampleSet.getAttributes().allAttributeRoles();  while (i.hasNext()) {    allRoles.add(i.next());  }  boolean sparse=false;  if ((exampleSet.size() > 0) && (exampleSet.getExample(0).getDataRow() instanceof SparseDataRow)) {    sparse=true;  }  writeHeader(exampleSet.getAnnotations(),allRoles,out,sparse);  writeData(exampleSet,out,allRoles,sparse);  out.flush();}  }
class C{  public static boolean[] toBooleanArray(Long[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.659 -0500",hash_original_method="B7022E0CB9EF549D20482BA7616126CF",hash_generated_method="B52446F79F5608D2C75D96940DC21B7C") public boolean addAll(Collection<? extends E> c){  return al.addAllAbsent(c) > 0;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("AcctSchema[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public boolean isError(){  return fSeverity == IStatus.ERROR;}  }
class C{  protected synchronized void write(final String data){  if (m_rotateStrategy.isRotationNeeded(data,getFile())) {    try {      rotate();      m_rotateStrategy.reset();    } catch (    final IOException ioe) {      getErrorHandler().error("Error rotating file",ioe,null);    }  }  super.write(data);}  }
class C{  public void importImageMethod(URI ciId,ComputeImageServer imageServer,String opName,String stepId){  log.info("importImageMethod importing image {} on to imageServer {}",ciId,imageServer.getId());  ImageServerDialog d=null;  ComputeImage ci=null;  try {    WorkflowStepCompleter.stepExecuting(stepId);    ci=dbClient.queryObject(ComputeImage.class,ciId);    SSHSession session=new SSHSession();    session.connect(imageServer.getImageServerIp(),imageServer.getSshPort(),imageServer.getImageServerUser(),imageServer.getImageServerPassword());    d=new ImageServerDialog(session,imageServer.getSshTimeoutMs());    importImage(imageServer,ci,d);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  InternalException e) {    log.error("Exception importing image: " + e.getMessage(),e);    updateFailedImages(imageServer.getId(),ci);    WorkflowStepCompleter.stepFailed(stepId,e);  }catch (  Exception e) {    log.error("Unexpected exception importing image: " + e.getMessage(),e);    String operationName=opName;    if (null == operationName) {      operationName=ResourceOperationTypeEnum.IMPORT_IMAGE.getName();    }    updateFailedImages(imageServer.getId(),ci);    WorkflowStepCompleter.stepFailed(stepId,ImageServerControllerException.exceptions.unexpectedException(operationName,e));  } finally {    try {      if (d != null && d.isConnected()) {        d.close();      }    } catch (    Exception e) {      log.error(FAILED_TO_CLOSE_STR,e);    }  }}  }
class C{  private File searchFile(File directory,String pattern){  for (  File file : directory.listFiles()) {    if (file.getName().matches(pattern))     return file;  }  return null;}  }
class C{  public int incomingParameterBytes(){  int nWords=method.getParameterWords();  if (!method.isStatic())   nWords++;  return nWords << LOG_BYTES_IN_ADDRESS;}  }
class C{  private boolean stackContains(Stack stack,String url){  int n=stack.size();  boolean contains=false;  for (int i=0; i < n; i++) {    String url2=(String)stack.elementAt(i);    if (url2.equals(url)) {      contains=true;      break;    }  }  return contains;}  }
class C{  public void dispose(){  removeMouseListener(m_mouselistener);  m_searchField.removeListener(m_searchFieldListener);  m_graph.removeListener((INaviGraphListener)m_viewListener);  m_graph.removeListener((IZyGraphSelectionListener)m_viewListener);  removeViewListeners(m_graph.getRawView());}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(HelloAnalyticsApiSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=analytics " + "into analytics-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT,JSON_FACTORY,clientSecrets,Collections.singleton(AnalyticsScopes.ANALYTICS_READONLY)).setDataStoreFactory(DATA_STORE_FACTORY).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  protected Coordinate[] coordinates(boolean closed){  Coordinate[] result=points.toArray(new Coordinate[points.size() + (closed ? 1 : 0)]);  if (closed) {    result[result.length - 1]=result[0];  }  return result;}  }
class C{  public String toString(int networkID){  if (networks.get(networkID) != null)   return networks.get(networkID).toString();  return "";}  }
class C{  public static separadorbraga newInstance(String param1,String param2){  separadorbraga fragment=new separadorbraga();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public void sendFirst(Object message,ActorRef sender){  endpoint.getMailbox().scheduleFirst(new Envelope(message,endpoint.getScope(),endpoint.getMailbox(),sender));}  }
class C{  private Pair<ClustererState,Integer> createInput(int partitionNumber,int threadId,int inputStart){  int partitionSize=effectiveVocabulary.size() / vparts;  int partitionStart=partitionNumber * partitionSize;  int partitionEnd=partitionNumber == vparts - 1 ? effectiveVocabulary.size() : (partitionNumber + 1) * partitionSize;  partitionSize=partitionEnd - partitionStart;  int targetInputSize=partitionSize / numThreads;  int startIndex=inputStart == 0 ? partitionStart + inputStart : inputStart;  int endIndex=Math.min(partitionEnd,startIndex + targetInputSize);  if (endIndex - startIndex <= 0)   return null;  int i=endIndex - 1;  for (; i < partitionEnd - 1; ++i) {    IString iWord=effectiveVocabulary.get(i);    IString nextWord=effectiveVocabulary.get(i + 1);    int iClass=wordToClass.get(iWord);    int nextClass=wordToClass.get(nextWord);    if (iClass != nextClass) {      break;    }  }  logger.info(String.format("endIndex: %d -> %d",endIndex,i + 1));  endIndex=i + 1;  List<IString> inputVocab=effectiveVocabulary.subList(startIndex,endIndex);  logger.info(String.format("Partition %d thread %d size %d: input %d-%d",partitionNumber,threadId,inputVocab.size(),startIndex,endIndex - 1));  ClustererState state=new ClustererState(inputVocab,this.wordCount,this.historyCount,this.wordToClass,this.classCount,this.classHistoryCount,numClasses,this.currentObjectiveValue);  return new Pair<ClustererState,Integer>(state,endIndex);}  }
class C{  public void addColumn(final int index){  dataset.addValue(0,new Integer(1),new Integer(index + 1));  fireDataSourceAdded(index);}  }
class C{  public GmlEnvelope(Point lower,Point upper){  setGeoLocation(lower,upper);}  }
class C{  public boolean createCSV(Writer writer,char delimiter,Language language){  if (delimiter == 0)   delimiter='\t';  try {    for (int row=-1; row < m_printData.getRowCount(); row++) {      StringBuffer sb=new StringBuffer();      if (row != -1)       m_printData.setRowIndex(row);      boolean first=true;      for (int col=0; col < m_printFormat.getItemCount(); col++) {        MPrintFormatItem item=m_printFormat.getItem(col);        if (item.isPrinted()) {          if (first)           first=false; else           sb.append(delimiter);          if (row == -1)           createCSVvalue(sb,delimiter,m_printFormat.getItem(col).getPrintName(language)); else {            Object obj=m_printData.getNode(new Integer(item.getAD_Column_ID()));            String data="";            if (obj == null)             ; else             if (obj instanceof PrintDataElement) {              PrintDataElement pde=(PrintDataElement)obj;              if (pde.isPKey())               data=pde.getValueAsString(); else               data=pde.getValueDisplay(language);            } else             if (obj instanceof PrintData) {            } else             log.log(Level.SEVERE,"Element not PrintData(Element) " + obj.getClass());            createCSVvalue(sb,delimiter,data);          }        }      }      writer.write(sb.toString());      writer.write(Env.NL);    }    writer.flush();    writer.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"(w)",e);  }  return false;}  }
class C{  public boolean isNotFoundResponse(){  int code=getResponseCode();  if (code == 404) {    return true;  }  return false;}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  if (dataset == null) {    return null;  }  Range r=DatasetUtilities.findRangeBounds(dataset,false);  if (r == null) {    return null;  }  double offset=0;  return new Range(r.getLowerBound() + offset,r.getUpperBound() + offset);}  }
class C{  public DataSource(){  connectionProperties=new Properties();}  }
class C{  public Device(DeviceManagerImpl deviceManager,Long deviceKey,Entity entity,IEntityClass entityClass){  this.deviceManager=deviceManager;  this.deviceKey=deviceKey;  this.entities=new Entity[]{entity};  this.macAddressString=entity.getMacAddress().toString();  this.entityClass=entityClass;  Arrays.sort(this.entities);  this.dhcpClientName=null;  this.oldAPs=null;  this.attachmentPoints=null;  if (!entity.getSwitchDPID().equals(DatapathId.NONE) && !entity.getSwitchPort().equals(OFPort.ZERO)) {    DatapathId sw=entity.getSwitchDPID();    OFPort port=entity.getSwitchPort();    if (deviceManager.isValidAttachmentPoint(sw,port)) {      AttachmentPoint ap;      ap=new AttachmentPoint(sw,port,entity.getLastSeenTimestamp());      this.attachmentPoints=new ArrayList<AttachmentPoint>();      this.attachmentPoints.add(ap);    }  }  vlanIds=computeVlandIds();}  }
class C{  public static String toKilobytes(long bytes){  if (bytes < 0)   return "? " + GENERAL_UNIT_KILOBYTES;  long kbytes=bytes / 1024;  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;}  }
class C{  protected <K,V>CacheBinding<K,V> cache(String name,Class<K> keyType,TypeLiteral<V> valType){  return cache(name,TypeLiteral.get(keyType),valType);}  }
class C{  public static AtMostOneEdgePerPair serializableInstance(){  return new AtMostOneEdgePerPair();}  }
class C{  private State applyPatch(State current,State patch){  ServiceUtils.logInfo(this,"Moving to stage %s",patch.taskState.stage);  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public SortLabelsTest(String name){  super(name);}  }
class C{  @Override public Object accept(Visitor v){  return v.visit(this);}  }
class C{  public static byte[] copyToByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(4096);  copy(in,out);  return out.toByteArray();}  }
class C{  public XYMultipleSeriesRenderer(int scaleNumber){  scalesCount=scaleNumber;  initAxesRange(scaleNumber);}  }
class C{  @Override public boolean addEdge(E e,V v1,V v2){  return addChild(e,v1,v2);}  }
class C{  public Intent cloneFilter(){  return new Intent(this,false);}  }
class C{  public static boolean[] toBooleanArray(Character[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  static boolean replace(Conversation c){synchronized (sInstance) {    if (Log.isLoggable(LogTag.THREAD_CACHE,Log.VERBOSE)) {      LogTag.debug("Conversation.Cache.put: conv= " + c + ", hash: "+ c.hashCode());    }    if (!sInstance.mCache.contains(c)) {      if (DEBUG) {        dumpCache();      }      return false;    }    sInstance.mCache.remove(c);    sInstance.mCache.add(c);    return true;  }}  }
class C{  private ESAPIEncoder(){}  }
class C{  protected void scrubClass(final Class<?> testCaseClass) throws IllegalAccessException {  final Field[] fields=getClass().getDeclaredFields();  for (  Field field : fields) {    if (!field.getType().isPrimitive() && !Modifier.isStatic(field.getModifiers())) {      try {        field.setAccessible(true);        field.set(this,null);      } catch (      Exception e) {        android.util.Log.d("TestCase","Error: Could not nullify field!");      }      if (field.get(this) != null) {        android.util.Log.d("TestCase","Error: Could not nullify field!");      }    }  }}  }
class C{  public static void toString(final Object obj,final StringBuilder sb){  toString(obj,sb,"");}  }
class C{  private void resetThroughput(){  if (service.getManagedSessionCount() == 0) {    readBytesThroughput=0;    writtenBytesThroughput=0;    readMessagesThroughput=0;    writtenMessagesThroughput=0;  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  @Override public void close() throws SQLException {  try {    super.close();    batchParameters=null;    if (command != null) {      command.close();      command=null;    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected boolean isInMigration(){  boolean result=false;  for (  Vm vm : getVmList()) {    if (vm.isInMigration()) {      result=true;      break;    }  }  return result;}  }
class C{  private String mutator(String httpRequest,String staticResourceFolder,String payload){  return httpRequest.replaceFirst(staticResourceFolder + ".* ",payload + " ");}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.CONFIGURATION__PROPERTIES:    getProperties().clear();  getProperties().addAll((Collection<? extends Property>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean softSignin() throws IOException {  if (url == null) {    throw new IllegalStateException("Null host");  }  checkResolveHost();  if (sessionId != null) {    if (checkAuthorized(getAuthCheckUrl(sessionId))) {      LOGGER.fine("Skipping soft init; session ID already exists - " + sessionId);      return true;    } else {      sessionId=null;    }  }  long id=loadSessionId();  if (id == 0) {    return false;  }  boolean authorized=checkAuthorized(getAuthCheckUrl(id));  if (authorized) {    LOGGER.info("Authorized with session ID: " + id);    this.sessionId=id;  }  return authorized;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.866 -0500",hash_original_method="530617490987BC288812A812A090F855",hash_generated_method="65F03713B2CC1B6E54436E9A2163F7A7") public void writeToParcel(Parcel dest,int flags){  dest.writeInt(usagePercent);  dest.writeLong(durationMicros);  dest.writeString(usageDetails);  dest.writeString(checkinDetails);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.338 -0500",hash_original_method="3CA361324F026F8C9B0AA94A864ACDD9",hash_generated_method="1B1551AD543164CCE8ABE887F4733D99") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public int size(){  return super.size();}  }
class C{  public boolean isTLS11(){  return tls11;}  }
class C{  public static void updateBarsColorWoCheck(int color,Window window,boolean applyDarken,boolean navbar,boolean statusbar){  if (statusbar)   setStatusBarColor(applyDarken ? getDarkerColor(color) : color,window);  if (navbar)   setNavigationBarColor(applyDarken ? getDarkerColor(color) : color,window);}  }
class C{  public boolean isHorizontal(){  return p0.y == p1.y;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public boolean isEmpty(){  return data == null;}  }
class C{  public boolean isValid(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  return true;}  }
class C{  public CompletionEngine(INameEnvironment nameEnvironment,CompletionRequestor requestor,Map<String,String> settings){  super(settings);  this.requestor=requestor;  this.nameEnvironment=nameEnvironment;  this.typeCache=new HashtableOfObject(5);  this.openedBinaryTypes=0;  this.problemFactory=new CompletionProblemFactory();  this.problemReporter=new ProblemReporter(DefaultErrorHandlingPolicies.proceedWithAllProblems(),this.compilerOptions,this.problemFactory);  this.lookupEnvironment=new LookupEnvironment(this,this.compilerOptions,this.problemReporter,nameEnvironment);  requestor.setLookupEnvironment(lookupEnvironment);  this.parser=new CompletionParser(this.problemReporter,this.requestor.isExtendedContextRequired());}  }
class C{  @Override protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text") {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public UpperCaseFilter(TokenStream in){  super(in);}  }
class C{  private static void s_uarmean(SparseBlock a,double[] c,int m,int n,KahanObject kbuff,Mean kmean,int rl,int ru){  for (int i=rl, cix=rl * 3; i < ru; i++, cix+=3) {    int count=(a.isEmpty(i)) ? n : n - a.size(i);    kbuff.set(0,0);    if (!a.isEmpty(i)) {      mean(a.values(i),a.pos(i),a.size(i),count,kbuff,kmean);    }    c[cix + 0]=kbuff._sum;    c[cix + 1]=n;    c[cix + 2]=kbuff._correction;  }}  }
class C{  protected boolean columnsDiffer(Column currentColumn,Column desiredColumn){  String desiredDefault=desiredColumn.getDefaultValue();  String currentDefault=currentColumn.getDefaultValue();  boolean defaultsEqual=(desiredDefault == null) || desiredDefault.equals(currentDefault);  boolean sizeMatters=databaseInfo.hasSize(currentColumn.getMappedTypeCode()) && (desiredColumn.getSize() != null);  if ((databaseInfo.getTargetJdbcType(desiredColumn.getMappedTypeCode()) != currentColumn.getMappedTypeCode()) || (desiredColumn.isRequired() != currentColumn.isRequired()) || (sizeMatters && !StringUtils.equals(desiredColumn.getSize(),currentColumn.getSize()))|| !defaultsEqual) {    return true;  } else {    return false;  }}  }
class C{  public double filterFitness(double fitness){  return fitness;}  }
class C{  public boolean is_same(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  HouseNumber other=(HouseNumber)obj;  if (number == null) {    if (name == null) {      if (other.name != null)       return false;    } else     if (!name.equals(other.name))     return false;  } else   if (!number.equals(other.number))   return false;  if (street == null) {    if (other.street != null)     return false;  } else   if (!street.equals(other.street))   return false;  return true;}  }
class C{  public static String localizePath(String path){  String fileNameSeparator=("\\".equals(File.separator) ? "\\" + File.separator : File.separator);  return path.replaceAll("/+|\\\\+",fileNameSeparator);}  }
class C{  public static Serializable wrap(Object o){  if (o == null || o instanceof Serializable) {    return (Serializable)o;  }  if (o instanceof BasicStroke) {    BasicStroke stroke=(BasicStroke)o;    return new SerializableBasicStroke(stroke);  }  if ((o instanceof Point2D.Double) || (o instanceof Point2D.Float)) {    Point2D point=(Point2D)o;    return new SerializablePoint2D(point);  }  if (o instanceof Area) {    Area area=(Area)o;    return new SerializableArea(area);  }  if (o instanceof Shape) {    Shape shape=(Shape)o;    return new SerializableShape(shape);  }  throw new IllegalArgumentException(String.format("Failed to make value of type %s serializable.",o.getClass().getName()));}  }
class C{  public BaseComponent(final String id){  super(id);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof SymbolAxis)) {    return false;  }  SymbolAxis that=(SymbolAxis)obj;  if (!this.symbols.equals(that.symbols)) {    return false;  }  if (this.gridBandsVisible != that.gridBandsVisible) {    return false;  }  if (!PaintUtilities.equal(this.gridBandPaint,that.gridBandPaint)) {    return false;  }  if (!PaintUtilities.equal(this.gridBandAlternatePaint,that.gridBandAlternatePaint)) {    return false;  }  return super.equals(obj);}  }
class C{  public Matrix4x3d rotateYXZ(Vector3d angles){  return rotateYXZ(angles.y,angles.x,angles.z);}  }
class C{  public void authorize() throws ActiveMQException {  CoreRemotingConnection connection=(CoreRemotingConnection)sessionFactory.getConnection();  clusterChannel=connection.getChannel(ChannelImpl.CHANNEL_ID.CLUSTER.id,-1);  ClusterConnectReplyMessage packet=(ClusterConnectReplyMessage)clusterChannel.sendBlocking(new ClusterConnectMessage(clusterUser,clusterPassword),PacketImpl.CLUSTER_CONNECT_REPLY);  if (!packet.isAuthorized()) {    throw ActiveMQMessageBundle.BUNDLE.unableToValidateClusterUser(clusterUser);  }}  }
class C{  public ServerSocket createServerSocketUsingPortRange(InetAddress ba,int backlog,boolean isBindAddress,boolean useNIO,int tcpBufferSize,int[] tcpPortRange) throws IOException {  return createServerSocketUsingPortRange(ba,backlog,isBindAddress,useNIO,tcpBufferSize,tcpPortRange,sslConfig.isEnabled());}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public ExifReader(File jpegFile) throws JpegProcessingException {  this(new JpegSegmentReader(jpegFile).readSegment(JpegSegmentReader.SEGMENT_APP1));}  }
class C{  public PrintWriter toPrintWriter(){  boolean autoflush=true;  return new PrintWriter(toWriter(),autoflush);}  }
class C{  public void release() throws Exception {  _processLock.release();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().playSound(getString(stack));  return null;}  }
class C{  private static void escapes() throws Exception {  Pattern p=Pattern.compile("\\043");  Matcher m=p.matcher("#");  if (!m.find())   failCount++;  p=Pattern.compile("\\x23");  m=p.matcher("#");  if (!m.find())   failCount++;  p=Pattern.compile("\\u0023");  m=p.matcher("#");  if (!m.find())   failCount++;  report("Escape sequences");}  }
class C{  public JedisIcicle(final JedisPool jedisPool){  this.jedisPool=jedisPool;}  }
class C{  public void paintCheckBoxMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected Object readResolve() throws InvalidObjectException {  if (this.getClass() != TextAttribute.class) {    throw new InvalidObjectException("subclass didn't correctly implement readResolve");  }  TextAttribute instance=instanceMap.get(getName());  if (instance != null) {    return instance;  } else {    throw new InvalidObjectException("unknown attribute name");  }}  }
class C{  public int remove(int offset){  int old=get(offset);  remove(offset,1);  return old;}  }
class C{  public static Reflect on(String name) throws ReflectException {  return on(forName(name));}  }
class C{  @Override public int hashCode(){  return getMarketplaceId() == null ? 0 : getMarketplaceId().hashCode();}  }
class C{  public static Object deserialization(String filePath){  ObjectInputStream in=null;  try {    in=new ObjectInputStream(new FileInputStream(filePath));    Object o=in.readObject();    in.close();    return o;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  ClassNotFoundException e) {    throw new RuntimeException("ClassNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtils.close(in);  }}  }
class C{  @Override public boolean removeAll(Collection<?> c){  boolean result;  Iterator<?> iter;  result=false;  iter=c.iterator();  while (iter.hasNext()) {    result=remove(iter.next()) || result;  }  m_RecalcHashCode=result;  return result;}  }
class C{  public void font(int fontId,int textHeight){  this.fontId=new Integer(fontId);}  }
class C{  private void mutate(T chromosome){  if (Math.random() < Properties.P_TEST_INSERTION || chromosome.size() < 2) {    logger.debug("Test case empty, adding a random statement.");    T newChromosome=this.chromosomeFactory.getChromosome();    chromosome=newChromosome;  } else {    chromosome.mutate();  }  chromosome.setChanged(true);  notifyMutation(chromosome);}  }
class C{  static int roundDown(long n,long m){  return (int)((n / m) * m);}  }
class C{  public Stack.Entry pop(final String stack) throws IOException {  Stack s=getStack(stack);  if (s == null)   return null;  return s.pop();}  }
class C{  private void writeAttribute(OutputNode node,Object item,String key) throws Exception {  if (item != null) {    if (key != null) {      key=style.getAttribute(key);      node=node.setAttribute(key,null);    }    root.write(node,item);  }}  }
class C{  public void removeDesignation(Object entity,Class<?> concept) throws RepositoryException {  Resource resource=findResource(entity);  URI type=of.getNameOf(concept);  if (type == null) {    throw new ObjectPersistException("Concept is anonymous or is not registered: " + concept.getSimpleName());  }  types.removeTypeStatement(resource,type);  cachedObjects.remove(resource);}  }
class C{  public static PseudoRandom defaultPRNG(long seed){  return new XOrShiftPRNG(seed);}  }
class C{  public String toString(){  final int size=size();  StringBuffer sb=new StringBuffer(size * 3);  final ByteBuffer buffer=getByteBuffer();  final int start=getByteBufferPosition();  for (int i=0; i < size; i++) {    int b=buffer.get(start + i) & 0xFF;    sb.append(HEXA[b >> 4]);    sb.append(HEXA[b & 0xF]);    sb.append(((i & 0xF) == 0xF) ? '\n' : ' ');  }  return sb.toString();}  }
class C{  static <T>GeneralRange<T> all(Comparator<? super T> comparator){  return new GeneralRange<T>(comparator,false,null,OPEN,false,null,OPEN);}  }
class C{  public void dispose(){  m_thread.removeListener(m_listener);}  }
class C{  public ComputeCooccurrenceMatrixStripes(){}  }
class C{  public ToStringBuilder append(String fieldName,double[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public final void shiftOutputPositions(int lineOffset){  for (  Entry entry : entries) {    entry.setOutputPosition(new Position(entry.getOutputPosition().getLine() + lineOffset,entry.getOutputPosition().getColumn()));  }}  }
class C{  public int restrictionStart(){  return mRestriction == null ? -1 : mRestriction.getStart();}  }
class C{  private boolean resourceIsProject(IResource resource){  if (resource == null) {    return false;  }  IProject proj=resource.getProject();  boolean out=(proj == resource);  return out;}  }
class C{  public void addAttribute(String key,String nsPrefix,String nsURI,String value,String type) throws Exception {  String fullName=key;  if (nsPrefix != null) {    fullName=nsPrefix + ':' + key;  }  IXMLElement top=(IXMLElement)this.stack.peek();  if (top.hasAttribute(fullName)) {    throw new XMLParseException(top.getSystemID(),top.getLineNr(),"Duplicate attribute: " + key);  }  if (nsPrefix != null) {    top.setAttribute(fullName,nsURI,value);  } else {    top.setAttribute(fullName,value);  }}  }
class C{  public boolean match(CharSequence filter){  if (ID.toString().toLowerCase().contains(filter)) {    return true;  } else   if (attrs != null && attrs.length > 0) {    for (int i=0; i < attrs.length; i++) {      if (attrs[i].toString().toLowerCase().contains(filter)) {        return true;      }    }  }  return false;}  }
class C{  public static boolean isVisibleInHierarchy(IMember member,IPackageFragment pack) throws JavaModelException {  int type=member.getElementType();  if (type == IJavaElement.INITIALIZER || (type == IJavaElement.METHOD && member.getElementName().startsWith("<"))) {    return false;  }  int otherflags=member.getFlags();  IType declaringType=member.getDeclaringType();  if (Flags.isPublic(otherflags) || Flags.isProtected(otherflags) || (declaringType != null && isInterfaceOrAnnotation(declaringType))) {    return true;  } else   if (Flags.isPrivate(otherflags)) {    return false;  }  IPackageFragment otherpack=(IPackageFragment)member.getAncestor(IJavaElement.PACKAGE_FRAGMENT);  return (pack != null && pack.equals(otherpack));}  }
class C{  public CreateExecParams withCmd(@NotNull String[] cmd){  requireNonNull(cmd);  requireNonEmptyArray(cmd);  if (cmd[0].isEmpty()) {    throw new IllegalArgumentException("Create exec parameters: no command specified");  }  this.cmd=cmd;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.265 -0400",hash_original_method="3C083AD2868479DECE8F9AED46625365",hash_generated_method="F2A938346A1855C7329EB78BF96D8371") private void tryReduceLevel(){  HeadIndex<K,V> h=head;  HeadIndex<K,V> d;  HeadIndex<K,V> e;  if (h.level > 3 && (d=(HeadIndex<K,V>)h.down) != null && (e=(HeadIndex<K,V>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  public HeaderIterator iterator(final String name){  return new BasicListHeaderIterator(this.headers,name);}  }
class C{  @Override public Object multiLineText(final FormObject form){  final boolean[] flags=form.getFieldFlags();  final boolean[] characteristics=form.getCharacteristics();  final JComponent comp;  final String text=form.getTextString();  if (flags != null && flags[FormObject.READONLY_ID] || characteristics != null && characteristics[9]) {    final JTextPane newTextarea=new JTextPane();    newTextarea.setText(text);    newTextarea.setEditable(false);    if (form.getAlignment() != -1) {      final StyledDocument doc=newTextarea.getStyledDocument();      final SimpleAttributeSet center=new SimpleAttributeSet();switch (form.getAlignment()) {case SwingConstants.CENTER:        StyleConstants.setAlignment(center,StyleConstants.ALIGN_CENTER);      break;case SwingConstants.RIGHT:    StyleConstants.setAlignment(center,StyleConstants.ALIGN_RIGHT);  break;}doc.setParagraphAttributes(0,doc.getLength(),center,false);}newTextarea.getDocument().addDocumentListener(new TextDocumentListener(newTextarea,form));comp=newTextarea;} else {final JTextPane newTextarea=new JTextPane();newTextarea.setText(text);if (form.getAlignment() != -1) {final StyledDocument doc=newTextarea.getStyledDocument();final SimpleAttributeSet center=new SimpleAttributeSet();switch (form.getAlignment()) {case SwingConstants.CENTER:StyleConstants.setAlignment(center,StyleConstants.ALIGN_CENTER);break;case SwingConstants.RIGHT:StyleConstants.setAlignment(center,StyleConstants.ALIGN_RIGHT);break;}doc.setParagraphAttributes(0,doc.getLength(),center,false);}newTextarea.getDocument().addDocumentListener(new TextDocumentListener(newTextarea,form));comp=newTextarea;}setToolTip(form,comp);setupUniversalFeatures(comp,form);return comp;}  }
class C{  static XDropTargetProtocol createInstance(XDropTargetProtocolListener listener){  return new MotifDnDDropTargetProtocol(listener);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  Properties ctx=JSPEnv.getCtx(request);  response.setHeader("Cache-Control","no-cache");  response.setContentType("text/xml; charset=UTF-8");  response.setCharacterEncoding("UTF-8");  PrintWriter out=response.getWriter();  int expenseID=WebUtil.getParameterAsInt(request,"W_Expense_ID");  int clientID=WebUtil.getParameterAsInt(request,"clientID");  int campaignID=WebUtil.getParameterAsInt(request,"campaignID");  int projectID=WebUtil.getParameterAsInt(request,"projectID");  int phaseID=WebUtil.getParameterAsInt(request,"phaseID");  int taskID=WebUtil.getParameterAsInt(request,"taskID");  int orgID=WebUtil.getParameterAsInt(request,"orgID");  int warehouseID=WebUtil.getParameterAsInt(request,"warehouseID");  int partnerID=WebUtil.getParameterAsInt(request,"partnerID");  String get=Util.maskHTML(request.getParameter("get"),true);  if (get == null) {    out.println("<error>Unknown Request: NULL</error>");  } else   if (get.equalsIgnoreCase("clientList")) {    outputClients(ctx,out,clientID,(expenseID == 0));  } else   if (get.equalsIgnoreCase("orgList")) {    outputOrgs(ctx,out,clientID,orgID,(expenseID == 0));  } else   if (get.equalsIgnoreCase("campaignList")) {    outputCampaigns(ctx,out,campaignID,(expenseID == 0));  } else   if (get.equalsIgnoreCase("projectList")) {    outputProjects(ctx,out,projectID,(expenseID == 0));  } else   if (get.equalsIgnoreCase("phaseList")) {    outputPhases(ctx,out,projectID,phaseID,(expenseID == 0));  } else   if (get.equalsIgnoreCase("taskList")) {    outputTasks(ctx,out,projectID,phaseID,taskID,(expenseID == 0));  } else   if (get.equalsIgnoreCase("partnerList")) {    outputPartners(ctx,out,partnerID,(expenseID == 0));  } else   if (get.equalsIgnoreCase("warehouseList")) {    outputWarehouses(ctx,out,orgID,warehouseID,(expenseID == 0));  } else   if (get.equalsIgnoreCase("priceList")) {    outputPriceLists(ctx,out,(expenseID == 0));  } else {    out.println("<error>Unknown Request: " + get + "</error>");  }  out.flush();  out.close();}  }
class C{  public static List<URI> findInitiatorTargetsInVarray(DbClient dbClient,URI varrayURI,Initiator initiator,Set<StoragePort> storagePorts){  NetworkLite iniNetwork=BlockStorageScheduler.lookupNetworkLite(dbClient,Transport.FC,initiator.getInitiatorPort());  List<URI> targetPorts=new ArrayList<URI>();  if (iniNetwork != null) {    for (    StoragePort storagePort : storagePorts) {      if (iniNetwork.getId().equals(storagePort.getNetwork()) && storagePort.getTaggedVirtualArrays() != null && storagePort.getTaggedVirtualArrays().contains(varrayURI.toString())) {        targetPorts.add(storagePort.getId());      }    }    if (targetPorts.isEmpty()) {      for (      StoragePort storagePort : storagePorts) {        if (iniNetwork.connectedToNetwork(storagePort.getNetwork()) && storagePort.getTaggedVirtualArrays() != null && storagePort.getTaggedVirtualArrays().contains(varrayURI.toString())) {          targetPorts.add(storagePort.getId());        }      }    }  }  return targetPorts;}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (inBounds(e)) {    this.setBackground(bgClicked);  }  this.repaint();}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENTITY_SOURCE;}  }
class C{  public void changeRightLeft(float radians){  if (!enabled) {    return;  }  Pointing pointing=model.getPointing();  GeocentricCoordinates pointingXyz=pointing.getLineOfSight();  GeocentricCoordinates topXyz=pointing.getPerpendicular();  Vector3 horizontalXyz=Geometry.vectorProduct(pointingXyz,topXyz);  Vector3 deltaXyz=Geometry.scaleVector(horizontalXyz,radians);  Vector3 newPointingXyz=Geometry.addVectors(pointingXyz,deltaXyz);  newPointingXyz.normalize();  model.setPointing(newPointingXyz,topXyz);}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals("progress")) {    int progress=(Integer)evt.getNewValue();    progressBar.setValue(progress);  }}  }
class C{  private void exportSourceDocuments(Project aProject,File aCopyDir) throws IOException, ProjectExportException {  File sourceDocumentDir=new File(aCopyDir + SOURCE_FOLDER);  FileUtils.forceMkdir(sourceDocumentDir);  List<de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument> documents=repository.listSourceDocuments(aProject);  documents.addAll(automationService.listTabSepDocuments(aProject));  int i=1;  for (  de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument sourceDocument : documents) {    try {      FileUtils.copyFileToDirectory(repository.getSourceDocumentFile(sourceDocument),sourceDocumentDir);      progress=(int)Math.ceil(((double)i) / documents.size() * 10.0);      i++;    } catch (    FileNotFoundException e) {      StringBuffer errorMessage=new StringBuffer();      errorMessage.append("Source file '");      errorMessage.append(sourceDocument.getName());      errorMessage.append("' related to project couldn't be located in repository");      LOG.error(errorMessage.toString());      LOG.error(ExceptionUtils.getRootCause(e));      messages.add(errorMessage.toString());      throw new ProjectExportException("Couldn't find some source file(s) related to project");    }  }}  }
class C{  public void removeArchives(){  arcDefs.clear();}  }
class C{  @Override public MapStack<K> standAloneChildStack(){  MapStack<K> standAloneChild=MapStack.create(this);  standAloneChild.push();  return standAloneChild;}  }
class C{  public static byte[] generateKey(int keySize){  try {    KeyGenerator generator=KeyGenerator.getInstance(ALGORITHM_AES);    generator.init(keySize);    return generator.generateKey().getEncoded();  } catch (  NoSuchAlgorithmException e) {    throw new Error(e);  }}  }
class C{  public void addRSAInstanceInfo(String tenantName,RSAAMInstanceInfo instInfo) throws Exception {  getService().addRSAInstanceInfo(tenantName,instInfo,this.getServiceContext());}  }
class C{  private void readMasterStylesElement(IXMLElement elem) throws IOException {  readStylesChildren(elem,masterStyles);}  }
class C{  public void trim(){  trimNonNullValues();  trimNullValue();}  }
class C{  public void computeSetsBounds(Relation<V> points,int minSplitSize,DBIDs ptList){  this.minSplitSize=minSplitSize;  final int size=points.size();  final int dim=RelationUtil.dimensionality(points);  this.points=points;  int nPointSetSplits=(int)(logOProjectionConst * MathUtil.log2(size * dim + 1));  int nProject1d=(int)(logOProjectionConst * MathUtil.log2(size * dim + 1));  LOG.statistics(new LongStatistic(PREFIX + ".partition-size",nPointSetSplits));  LOG.statistics(new LongStatistic(PREFIX + ".num-projections",nProject1d));  splitsets=new ArrayList<>();  projectedPoints=new DoubleDataStore[nProject1d];  DoubleDataStore[] tmpPro=new DoubleDataStore[nProject1d];  Random rand=rnd.getSingleThreadedRandom();  FiniteProgress projp=LOG.isVerbose() ? new FiniteProgress("Random projections",nProject1d,LOG) : null;  for (int j=0; j < nProject1d; j++) {    double[] currRp=new double[dim];    double sum=0;    for (int i=0; i < dim; i++) {      double fl=rand.nextDouble() - 0.5;      currRp[i]=fl;      sum+=fl * fl;    }    sum=Math.sqrt(sum);    for (int i=0; i < dim; i++) {      currRp[i]/=sum;    }    WritableDoubleDataStore currPro=DataStoreUtil.makeDoubleStorage(ptList,DataStoreFactory.HINT_HOT);    for (DBIDIter it=ptList.iter(); it.valid(); it.advance()) {      NumberVector vecPt=points.get(it);      double sum2=0;      for (int i=0; i < dim; i++) {        sum2+=currRp[i] * vecPt.doubleValue(i);      }      currPro.put(it,sum2);    }    projectedPoints[j]=currPro;    LOG.incrementProcessed(projp);  }  LOG.ensureCompleted(projp);  long numprod=nProject1d * ptList.size();  LOG.statistics(new LongStatistic(PREFIX + ".num-scalar-products",numprod));  TIntArrayList proind=new TIntArrayList(nProject1d);  for (int j=0; j < nProject1d; j++) {    proind.add(j);  }  FiniteProgress splitp=LOG.isVerbose() ? new FiniteProgress("Splitting data",nPointSetSplits,LOG) : null;  for (int avgP=0; avgP < nPointSetSplits; avgP++) {    for (int i=0; i < nProject1d; i++) {      tmpPro[i]=projectedPoints[i];    }    proind.shuffle(rand);    TIntIterator it=proind.iterator();    int i=0;    while (it.hasNext()) {      int cind=it.next();      projectedPoints[cind]=tmpPro[i];      i++;    }    splitupNoSort(DBIDUtil.newArray(ptList),0,size,0,rand);    LOG.incrementProcessed(splitp);  }  LOG.ensureCompleted(splitp);}  }
class C{  void logWorkflow(Workflow workflow,boolean completed){  try {    boolean created=false;    com.emc.storageos.db.client.model.Workflow logWorkflow=null;    if (workflow._workflowURI != null) {      logWorkflow=_dbClient.queryObject(com.emc.storageos.db.client.model.Workflow.class,workflow._workflowURI);    } else {      workflow._workflowURI=URIUtil.createId(com.emc.storageos.db.client.model.Workflow.class);    }    if (logWorkflow == null) {      created=true;      logWorkflow=new com.emc.storageos.db.client.model.Workflow();      logWorkflow.setId(workflow._workflowURI);      logWorkflow.setCreationTime(Calendar.getInstance());      logWorkflow.setCompleted(false);    }    logWorkflow.setOrchControllerName(workflow._orchControllerName);    logWorkflow.setOrchMethod(workflow._orchMethod);    logWorkflow.setOrchTaskId(workflow._orchTaskId);    logWorkflow.setCompleted(completed);    if (completed) {      try {        Map<String,StepStatus> statusMap=workflow.getAllStepStatus();        String[] errorMessage=new String[]{workflow._successMessage};        Workflow.getOverallState(statusMap,errorMessage);        WorkflowState state=workflow.getWorkflowState();        logWorkflow.setCompletionState(state.name());        logWorkflow.setCompletionMessage(errorMessage[0]);      } catch (      WorkflowException ex) {        _log.error(ex.getMessage(),ex);      }    }    if (created) {      _dbClient.createObject(logWorkflow);    } else {      _dbClient.updateObject(logWorkflow);    }    if (workflow.getOrchTaskId() != null) {      List<Task> tasks=new ArrayList<>();      if (workflow._taskCompleter != null && workflow._taskCompleter.getId() != null) {        Set<URI> taskIds=new HashSet<>();        for (        URI resourceId : workflow._taskCompleter.getIds()) {          Task task=TaskUtils.findTaskForRequestId(_dbClient,resourceId,workflow.getOrchTaskId());          if (task != null && !taskIds.contains(task.getId())) {            tasks.add(task);            taskIds.add(task.getId());          }        }        for (        URI resourceId : workflow._taskCompleter.getIds()) {          Task task=TaskUtils.findTaskForRequestIdAssociatedResource(_dbClient,resourceId,workflow.getOrchTaskId());          if (task != null && !taskIds.contains(task.getId())) {            tasks.add(task);            taskIds.add(task.getId());          }        }      } else {        List<Task> foundTasks=TaskUtils.findTasksForRequestId(_dbClient,workflow.getOrchTaskId());        if (foundTasks != null && !foundTasks.isEmpty()) {          tasks.addAll(foundTasks);        }      }      if (tasks != null && !tasks.isEmpty()) {        for (        Task task : tasks) {          task.setWorkflow(workflow.getWorkflowURI());        }        _dbClient.updateObject(tasks);      }    }  } catch (  DatabaseException ex) {    _log.error("Cannot persist Cassandra Workflow record " + workflow.getWorkflowURI().toString(),ex);  }}  }
class C{  public LocatorState status(){  final LocatorLauncher launcher=getInstance();  if (this.starting.get()) {    debug("Getting status from the LocatorLauncher instance that actually launched the GemFire Locator.%n");    return new LocatorState(this,Status.STARTING);  } else   if (isRunning()) {    debug("Getting Locator status using host (%1$s) and port (%2$s)%n",getBindAddressAsString(),getPortAsString());    return statusWithPort();  } else   if (isPidInProcess() && launcher != null) {    return launcher.statusInProcess();  } else   if (getPid() != null) {    debug("Getting Locator status using process ID (%1$s)%n",getPid());    return statusWithPid();  } else   if (!(this.bindAddressSpecified || this.portSpecified)) {    debug("Getting Locator status using working directory (%1$s)%n",getWorkingDirectory());    return statusWithWorkingDirectory();  } else {    debug("Getting Locator status using host (%1$s) and port (%2$s)%n",getBindAddressAsString(),getPortAsString());    return statusWithPort();  }}  }
class C{  public <T extends JCTree>List<T> translate(List<T> trees,Type pt){  Type prevPt=this.pt;  List<T> res;  try {    this.pt=pt;    res=translate(trees);  }  finally {    this.pt=prevPt;  }  return res;}  }
class C{  void pack(){  Component component=getComponent();  if (component instanceof Window) {    ((Window)component).pack();  }}  }
class C{  public StringElement removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static EmptyMessage newACK(Message message){  EmptyMessage ack=new EmptyMessage(Type.ACK);  ack.setDestination(message.getSource());  ack.setDestinationPort(message.getSourcePort());  ack.setMID(message.getMID());  return ack;}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  boolean writeStyle(String name,Style style,boolean outputStyle) throws IOException {  boolean didOutputStyle=false;  Enumeration attributes=style.getAttributeNames();  if (attributes != null) {    while (attributes.hasMoreElements()) {      Object attribute=attributes.nextElement();      if (attribute instanceof CSS.Attribute) {        String value=style.getAttribute(attribute).toString();        if (value != null) {          if (!outputStyle) {            writeStyleStartTag();            outputStyle=true;          }          if (!didOutputStyle) {            didOutputStyle=true;            indentSmart();            write(name);            write(" {");          } else {            write(";");          }          write(' ');          write(attribute.toString());          write(": ");          write(value);        }      }    }  }  if (didOutputStyle) {    write(" }");    writeLineSeparator();  }  return didOutputStyle;}  }
class C{  public MaterialEditText cursorColor(int color){  try {    mCursorColor=color;    Field fCursorDrawableRes=TextView.class.getDeclaredField("mCursorDrawableRes");    fCursorDrawableRes.setAccessible(true);    int mCursorDrawableRes=fCursorDrawableRes.getInt(mEditText);    Field fEditor=TextView.class.getDeclaredField("mEditor");    fEditor.setAccessible(true);    Object editor=fEditor.get(mEditText);    Class<?> clazz=editor.getClass();    Field fCursorDrawable=clazz.getDeclaredField("mCursorDrawable");    fCursorDrawable.setAccessible(true);    Drawable[] drawables=new Drawable[2];    Resources res=mEditText.getContext().getResources();    drawables[0]=res.getDrawable(mCursorDrawableRes);    drawables[1]=res.getDrawable(mCursorDrawableRes);    drawables[0].setColorFilter(color,PorterDuff.Mode.SRC_IN);    drawables[1].setColorFilter(color,PorterDuff.Mode.SRC_IN);    fCursorDrawable.set(editor,drawables);  } catch (  final Throwable ignored) {  }  return this;}  }
class C{  private Proto(){}  }
class C{  public void removeBlockQuotePrefix(){  Line line=this.lines;  while (line != null) {    if (!line.isEmpty) {      if (line.value.charAt(line.leading) == '>') {        int rem=line.leading + 1;        if (line.leading + 1 < line.value.length() && line.value.charAt(line.leading + 1) == ' ') {          rem++;        }        line.value=line.value.substring(rem);        line.initLeading();      }    }    line=line.next;  }}  }
class C{  public static String prefix(Item item){  return String.format("%6d: <%02d> [%s] ",Clock.read(),Thread.currentThread().getId(),item);}  }
class C{  @Override protected Map<EdgeSeed,Edge> createEdges(){  final Map<EdgeSeed,Edge> edges=super.createEdges();  for (int i=0; i <= 10; i++) {    final Edge thirdEdge=new Edge(TestGroups.EDGE,DEST_DIR + i,SOURCE_DIR + (i + 1),true);    thirdEdge.putProperty(TestPropertyNames.INT,1);    thirdEdge.putProperty(TestPropertyNames.COUNT,1L);    addToMap(thirdEdge,edges);  }  return edges;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.875 -0400",hash_original_method="10E48FF5F36DFDEA8A99B2FC92DCE5A3",hash_generated_method="84CEB1CC881AF97A0D11AEE26EFE3C7D") public static boolean compileClasses(String nameRoot){  return false;}  }
class C{  public void debugPrint(Writer out,String prefix,boolean verbose){  IndentingWriter iw=new IndentingWriter(out,0,prefix);  int sz=size();  try {    for (int i=0; i < sz; i++) {      DalvInsn insn=(DalvInsn)get0(i);      String s;      if ((insn.codeSize() != 0) || verbose) {        s=insn.listingString("",0,verbose);      } else {        s=null;      }      if (s != null) {        iw.write(s);      }    }    iw.flush();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static String toBinaryString(long value){  return Long.toString(value,2);}  }
class C{  public List<byte[]> brpop(final int timeout,final byte[]... keys){  checkIsInMulti();  final List<byte[]> args=new ArrayList<byte[]>();  for (  final byte[] arg : keys) {    args.add(arg);  }  args.add(Protocol.toByteArray(timeout));  client.brpop(args.toArray(new byte[args.size()][]));  client.setTimeoutInfinite();  final List<byte[]> multiBulkReply=client.getBinaryMultiBulkReply();  client.rollbackTimeout();  return multiBulkReply;}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized void unlockWith(int newState){  state=newState;  unlock();}  }
class C{  public byte[] decompressSubframe(int x,int y){  x%=6;  y%=6;  int readptr=0;  byte[] compressedSubframe=this.compressedSubframe[y][x];  if ((compressedSubframe == null) || masked[y][x]) {    return null;  } else {    byte[] pixels=new byte[256 * 256];    for (int i=0; i < 256; i+=4) {      for (int j=0; j < 256; j+=8) {        int firstByte=compressedSubframe[readptr++] & 0xff;        int secondByte=compressedSubframe[readptr++] & 0xff;        int thirdByte=compressedSubframe[readptr++] & 0xff;        int val1=(firstByte << 4) | (secondByte >> 4);        int val2=((secondByte & 0x000F) << 8) | thirdByte;        for (int t=0; t < 4; t++) {          for (int e=0; e < 4; e++) {            int tableVal1=table[t][val1][e] & 0xff;            int tableVal2=table[t][val2][e] & 0xff;            if (tableVal1 >= RpfColortable.CADRG_COLORS) {              tableVal1=RpfColortable.CADRG_COLORS - 1;            }            if (tableVal2 >= RpfColortable.CADRG_COLORS) {              tableVal2=RpfColortable.CADRG_COLORS - 1;            }            int pixindex=(i + t) * 256 + j + e;            pixels[pixindex]=(byte)tableVal1;            pixels[pixindex + 4]=(byte)tableVal2;          }        }      }    }    return pixels;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (smallerOp_1: ");  result.append(smallerOp_1);  result.append(')');  return result.toString();}  }
class C{  @Override protected void onRestoreInstanceState(Bundle state){  ensureList();  super.onRestoreInstanceState(state);}  }
class C{  public int minCut(String s){  if (s == null || s.length() == 0)   return 0;  int len=s.length();  int[] cuts=new int[len + 1];  for (int i=0; i <= len; i++)   cuts[i]=i - 1;  for (int i=0; i < len; i++) {    for (int j=0; i - j >= 0 && i + j < len && s.charAt(i - j) == s.charAt(i + j); j++)     cuts[i + j + 1]=Math.min(cuts[i + j + 1],1 + cuts[i - j]);    for (int j=1; i - j + 1 >= 0 && i + j < len && s.charAt(i - j + 1) == s.charAt(i + j); j++)     cuts[i + j + 1]=Math.min(cuts[i + j + 1],1 + cuts[i - j + 1]);  }  return cuts[len];}  }
class C{  protected int checkCloseTagAndGetLength(CharSequence buffer,int offset,int bufferEnd){  if (offset >= bufferEnd) {    return -1;  }  String endTag=getEndTag();  if (isBufferAtString(buffer,offset,endTag)) {    return endTag.length();  }  if (StringUtil.containsChar(CHOMP_MODIFIERS,buffer.charAt(offset)) && isBufferAtString(buffer,offset + 1,endTag)) {    return endTag.length() + 1;  }  return -1;}  }
class C{  public ByteArrayOutputStream toSerializedContext() throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  ByteBufferSupport.addByteBuffer(frameworkId,bytes);  ByteBufferSupport.addByteBuffers(taskIds,bytes);  ByteBufferSupport.addByteBuffers(taskNodes,bytes);  ByteBufferSupport.addByteBuffers(pendingTasks,bytes);  ByteBufferSupport.addByteBuffers(stagingTasks,bytes);  ByteBufferSupport.addByteBuffers(activeTasks,bytes);  ByteBufferSupport.addByteBuffers(lostTasks,bytes);  ByteBufferSupport.addByteBuffers(killableTasks,bytes);  return bytes;}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode){  Rectangle2D filterRegion=SVGUtilities.convertFilterChainRegion(filterElement,filteredElement,filteredNode,ctx);  if (filterRegion == null) {    return null;  }  Filter sourceGraphic=filteredNode.getGraphicsNodeRable(true);  sourceGraphic=new PadRable8Bit(sourceGraphic,filterRegion,PadMode.ZERO_PAD);  FilterChainRable filterChain=new FilterChainRable8Bit(sourceGraphic,filterRegion);  float[] filterRes=SVGUtilities.convertFilterRes(filterElement,ctx);  filterChain.setFilterResolutionX((int)filterRes[0]);  filterChain.setFilterResolutionY((int)filterRes[1]);  Map filterNodeMap=new HashMap(11);  filterNodeMap.put(SVG_SOURCE_GRAPHIC_VALUE,sourceGraphic);  Filter in=buildFilterPrimitives(filterElement,filterRegion,filteredElement,filteredNode,sourceGraphic,filterNodeMap,ctx);  if (in == null) {    return null;  } else   if (in == sourceGraphic) {    in=createEmptyFilter(filterElement,filterRegion,filteredElement,filteredNode,ctx);  }  filterChain.setSource(in);  return filterChain;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.905 -0500",hash_original_method="EFC3C9ACE40E1AFA4E42220FC9A24C72",hash_generated_method="F66C33970BF05D2E98CDEA91DEC65093") public synchronized void stop(){  isRunning=false;  try {    sock.close();  } catch (  IOException e) {    e.printStackTrace();  }  Collection en=tcpMessageChannels.values();  for (Iterator it=en.iterator(); it.hasNext(); ) {    TCPMessageChannel next=(TCPMessageChannel)it.next();    next.close();  }  for (Iterator incomingMCIterator=incomingTcpMessageChannels.iterator(); incomingMCIterator.hasNext(); ) {    TCPMessageChannel next=(TCPMessageChannel)incomingMCIterator.next();    next.close();  }  this.notify();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.746 -0500",hash_original_method="B2D3144426F7F3C4C82468ADF000A2A4",hash_generated_method="67223B5A737323B177077CDC729F247B") public void debug(Object message){  log(Level.FINE,String.valueOf(message),null);}  }
class C{  private static String fixStringLength(String inString,int length,boolean right){  if (inString.length() < length) {    while (inString.length() < length) {      inString=(right ? inString.concat(" ") : " ".concat(inString));    }  } else   if (inString.length() > length) {    inString=inString.substring(0,length);  }  return inString;}  }
class C{  public void disconnectPort(LocoNetInterface i){  if (destination != i) {    log.warn("disconnectPort: disconnect called from non-connected LnPortController");  }  destination=null;  connected=false;}  }
class C{  protected String paramString(){  String approveButtonTextString=(approveButtonText != null ? approveButtonText : "");  String dialogTitleString=(dialogTitle != null ? dialogTitle : "");  String dialogTypeString;  if (dialogType == OPEN_DIALOG) {    dialogTypeString="OPEN_DIALOG";  } else   if (dialogType == SAVE_DIALOG) {    dialogTypeString="SAVE_DIALOG";  } else   if (dialogType == CUSTOM_DIALOG) {    dialogTypeString="CUSTOM_DIALOG";  } else   dialogTypeString="";  String returnValueString;  if (returnValue == CANCEL_OPTION) {    returnValueString="CANCEL_OPTION";  } else   if (returnValue == APPROVE_OPTION) {    returnValueString="APPROVE_OPTION";  } else   if (returnValue == ERROR_OPTION) {    returnValueString="ERROR_OPTION";  } else   returnValueString="";  String useFileHidingString=(useFileHiding ? "true" : "false");  String fileSelectionModeString;  if (fileSelectionMode == FILES_ONLY) {    fileSelectionModeString="FILES_ONLY";  } else   if (fileSelectionMode == DIRECTORIES_ONLY) {    fileSelectionModeString="DIRECTORIES_ONLY";  } else   if (fileSelectionMode == FILES_AND_DIRECTORIES) {    fileSelectionModeString="FILES_AND_DIRECTORIES";  } else   fileSelectionModeString="";  String currentDirectoryString=(currentDirectory != null ? currentDirectory.toString() : "");  String selectedFileString=(selectedFile != null ? selectedFile.toString() : "");  return super.paramString() + ",approveButtonText=" + approveButtonTextString+ ",currentDirectory="+ currentDirectoryString+ ",dialogTitle="+ dialogTitleString+ ",dialogType="+ dialogTypeString+ ",fileSelectionMode="+ fileSelectionModeString+ ",returnValue="+ returnValueString+ ",selectedFile="+ selectedFileString+ ",useFileHiding="+ useFileHidingString;}  }
class C{  public static MultiGlobMatcher fromMultiPattern(final String multiPattern,final String delimiter){  if (multiPattern == null || multiPattern.trim().length() == 0) {    return null;  }  final MultiGlobMatcher matcher=new MultiGlobMatcher();  final String[] patterns=multiPattern.split(delimiter);  for (int i=0; i < patterns.length; i++) {    matcher.addGlobPattern(patterns[i]);  }  return matcher;}  }
class C{  @Override public Storage deleteStorage(StorageAlternateKeyDto storageAlternateKey){  validateStorageAlternateKey(storageAlternateKey);  StorageEntity storageEntity=storageDaoHelper.getStorageEntity(storageAlternateKey);  storageDao.delete(storageEntity);  return createStorageFromEntity(storageEntity);}  }
class C{  public Type createType(){  TypeImpl type=new TypeImpl();  return type;}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  public static byte toByte(byte a,byte b){  return (byte)((a << NIBBLE_SIZE) | b);}  }
class C{  @Override public boolean isNullMeasureValue(int ordinal){  return isNullMeasureValue(ordinal,currentRow);}  }
class C{  private void parseLoggcLogfile(){  DefaultMutableTreeNode node=getDumpRootNode((DefaultMutableTreeNode)tree.getLastSelectedPathComponent());  if (node == null) {    return;  }  int pos=node.getParent().getIndex(node);  ((Logfile)((DefaultMutableTreeNode)node.getParent()).getUserObject()).getUsedParser().setDumpHistogramCounter(pos);  openLoggcFile();}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public boolean isInitialized(){  return value != null;}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws org.xml.sax.SAXException {  return getCurrentProcessor().resolveEntity(this,publicId,systemId);}  }
class C{  @SuppressWarnings("unchecked") protected static <T extends ImmutableObject>T clone(T t){  try {    T clone=(T)t.clone();    clone.hashCode=null;    return clone;  } catch (  CloneNotSupportedException e) {    throw new IllegalStateException();  }}  }
class C{  private void createRayTracingProgram() throws IOException {  String version=GL.getCapabilities().OpenGL30 ? "130" : null;  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad110.vs",GL_VERTEX_SHADER);  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raytracing110.fs",GL_FRAGMENT_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_FRAGMENT_SHADER,version);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random20.glsl",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glAttachShader(program,randomCommon);  glAttachShader(program,random);  glBindAttribLocation(program,0,"vertex");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rayTracingProgram=program;}  }
class C{  public final String sourceName(){  return sourceName;}  }
class C{  private View findChildUnder(float x,float y){  return findChildUnder(this,x,y);}  }
class C{  public static RuntimeException fail(String message){  checkAssertion(false,message);  return new AssertFailedException(message);}  }
class C{  public static int EMFILE(){  return Errno.EMFILE.intValue();}  }
class C{  public void resetXRotationPoints(){  rotationPointX=initRotationPointX;}  }
class C{  public static void printf(String format,Object... args){  out.printf(LOCALE,format,args);  out.flush();}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  private ColumnWithIntIndex[] createColumnWithIndexArray(byte[][] keyBlock,boolean isNoDictionary){  ColumnWithIntIndex[] columnWithIndexs;  if (isNoDictionary) {    columnWithIndexs=new ColumnWithIntIndexForHighCard[keyBlock.length];    for (int i=0; i < columnWithIndexs.length; i++) {      columnWithIndexs[i]=new ColumnWithIntIndexForHighCard(keyBlock[i],i);    }  } else {    columnWithIndexs=new ColumnWithIntIndex[keyBlock.length];    for (int i=0; i < columnWithIndexs.length; i++) {      columnWithIndexs[i]=new ColumnWithIntIndex(keyBlock[i],i);    }  }  return columnWithIndexs;}  }
class C{  public boolean isOnTemplate(){  return mHaplotypeA.isOnTemplate() && mHaplotypeB.isOnTemplate();}  }
class C{  private RawProtein<SmartRawMatch> filterByDerivedDomainEvalue(RawProtein<SmartRawMatch> matchRawProtein){  final RawProtein<SmartRawMatch> filtered=new RawProtein<SmartRawMatch>(matchRawProtein.getProteinIdentifier());  for (  SmartRawMatch match : matchRawProtein.getMatches()) {    final SmartThresholdFileParser.SmartThreshold threshold=smartThresholds.getThresholdByModelId(match.getModelId());    final double derivedDomainEvalue=threshold.getDerivedEvalue(match.getLocationScore());    if ((threshold.getRepeat_cut() == null || derivedDomainEvalue <= threshold.getRepeat_cut()) && (threshold.getFamily() == null || derivedDomainEvalue <= threshold.getCutoff())) {      filtered.addMatch(match);    }  }  return filtered;}  }
class C{  public void printButtonActionPerformed(java.awt.event.ActionEvent e){  int[] colWidth=new int[4];  TableColumnModel assignmentColumnModel=assignmentTable.getColumnModel();  colWidth[0]=assignmentColumnModel.getColumn(AssignmentTableModel.BIT_COLUMN).getWidth();  colWidth[1]=assignmentColumnModel.getColumn(AssignmentTableModel.ADDRESS_COLUMN).getWidth();  colWidth[2]=assignmentColumnModel.getColumn(AssignmentTableModel.SYSNAME_COLUMN).getWidth();  colWidth[3]=assignmentColumnModel.getColumn(AssignmentTableModel.USERNAME_COLUMN).getWidth();  String head;  if (inputSelected) {    head="C/MRI " + rb.getString("AssignmentPanelInputName") + " - "+ rb.getString("NodeBoxLabel")+ " "+ selNodeID;  } else {    head="C/MRI " + rb.getString("AssignmentPanelOutputName") + " - "+ rb.getString("NodeBoxLabel")+ " "+ selNodeID;  }  HardcopyWriter writer=null;  try {    writer=new HardcopyWriter(curFrame,head,10,.8,.5,.5,.5,false);  } catch (  HardcopyWriter.PrintCanceledException ex) {    return;  }  writer.increaseLineSpacing(20);  ((AssignmentTableModel)assignmentListModel).printTable(writer,colWidth);}  }
class C{  @RequestMapping(value={"/{id}"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@PathVariable("id") Integer processId,Principal principal){  RestWrapper restWrapper=null;  try {    Process parentProcess=processDAO.get(processId);    if (parentProcess.getProcess() != null)     processDAO.securityCheck(parentProcess.getProcess().getProcessId(),principal.getName(),"read"); else     processDAO.securityCheck(processId,principal.getName(),"read");    ProcessLogInfo processLogInfo=new ProcessLogInfo();    processLogInfo.setProcessId(processId);    List<ProcessLogInfo> processLogList=processLogDAO.getProcessLog(processLogInfo);    for (    ProcessLogInfo processLogInfo1 : processLogList) {      processLogInfo1.setTableAddTs(DateConverter.dateToString(processLogInfo1.getAddTs()));    }    restWrapper=new RestWrapper(processLogList,RestWrapper.OK);    LOGGER.info("Record with ID:" + processId + " selected from ProcessLog by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @ExceptionHandler(EntityNotFoundException.class) public String onNotFound(HttpServletRequest req,Exception ex){  return handleError(req,ex,NOT_FOUND_MSG);}  }
class C{  private void createResponse(final HttpServerRequest request,final HttpClientResponse response,final CopyTask task){  Logger log=RequestLoggerFactory.getLogger(CopyResourceHandler.class,request);  if (response.statusCode() == StatusCode.OK.getStatusCode()) {    log.debug("copy resource task successfully executed: {} -> {}",task.getSourceUri(),task.getDestinationUri());  } else {    log.debug("copy resource task failed: {} -> {}",task.getSourceUri(),task.getDestinationUri());  }  request.response().setStatusCode(response.statusCode());  request.response().setStatusMessage(response.statusMessage());  response.bodyHandler(null);}  }
class C{  public Long addUserToOrganisation(String SID,Long user_id,Long organisation_id,Long insertedby){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return organisationmanagement.addUserToOrganisation(user_id,organisation_id,users_id);    } else {      return new Long(-26);    }  } catch (  Exception err) {    log.error("addUserToOrganisation",err);  }  return new Long(-1);}  }
class C{  public final boolean isNative(){  return Modifier.isNative(getModifiers());}  }
class C{  public void testCase21(){  byte aBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public List<String> all(ICalDataType dataType){  String dataTypeStr=toLocalName(dataType);  return all(dataTypeStr);}  }
class C{  public JNumberDialog(java.awt.Dialog parent,boolean modal){  super(parent,modal);  init();}  }
class C{  public Integer uploadImage(String message,String fileName,Bitmap bitmap,int quality) throws Exception {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  if (fileName.endsWith("PNG") || fileName.endsWith("png")) {    bitmap.compress(CompressFormat.PNG,0,bos);  } else   if (fileName.endsWith("JPEG") || fileName.endsWith("JPG") || fileName.endsWith("jpg")|| fileName.endsWith("jpeg")) {    bitmap.compress(CompressFormat.JPEG,quality,bos);  } else {    throw new SocialAuthException("Image Format not supported");  }  InputStream inputStream=new ByteArrayInputStream(bos.toByteArray());  Response res;  try {    if (getCurrentProvider().getProviderId().equalsIgnoreCase("facebook") || getCurrentProvider().getProviderId().equalsIgnoreCase("twitter")) {      res=getCurrentProvider().uploadImage(message,fileName,inputStream);      Log.d("SocialAuthAdapter","Image Uploaded");      return res.getStatus();    } else {      throw new SocialAuthException("Provider not Supported");    }  } catch (  Exception e) {    throw new SocialAuthException("Image Upload Error");  }}  }
class C{  private static String generateToken(){  return UUID.randomUUID().toString();}  }
class C{  public synchronized void dispose(){  if (isDisposed) {    return;  }  isDisposed=true;  ArrayList<PooledConnection> list=recycledConnections;  for (int i=0, size=list.size(); i < size; i++) {    closeConnection(list.get(i));  }}  }
class C{  public static <K,V>Map<K,V> constrainedMap(Map<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedMap<K,V>(map,constraint);}  }
class C{  public void addImageSharingInvitationRejected(ContactId remoteContact,MmContent content,ImageSharing.ReasonCode reasonCode,long timestamp){  mImageSharingService.addImageSharingInvitationRejected(remoteContact,content,reasonCode,timestamp);}  }
class C{  protected void addDeprecatedPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DeprecatableElement_deprecated_feature"),getString("_UI_PropertyDescriptor_description","_UI_DeprecatableElement_deprecated_feature","_UI_DeprecatableElement_type"),SGenPackage.Literals.DEPRECATABLE_ELEMENT__DEPRECATED,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public Builder addFixed32(final int value){  if (result.fixed32 == null) {    result.fixed32=new ArrayList<Integer>();  }  result.fixed32.add(value);  return this;}  }
class C{  public static BitwiseOpExpression binaryAnd(){  return new BitwiseOpExpression(BitWiseOpEnum.BAND);}  }
class C{  public boolean retainEntries(TFloatLongProcedure procedure){  boolean modified=false;  byte[] states=_states;  float[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public static byte[] encodeBase64Chunked(final byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  public QuickTheory withFixedSeed(long seed){  return new QuickTheory(null);}  }
class C{  public String toString(CSSEngine eng){  StringBuffer sb=new StringBuffer();  sb.append("@import \"");  sb.append(uri);  sb.append("\"");  if (mediaList != null) {    for (int i=0; i < mediaList.getLength(); i++) {      sb.append(' ');      sb.append(mediaList.item(i));    }  }  sb.append(";\n");  return sb.toString();}  }
class C{  public Problem(Object initialState,ActionsFunction actionsFunction,ResultFunction resultFunction,GoalTest goalTest){  this(initialState,actionsFunction,resultFunction,goalTest,new DefaultStepCostFunction());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:19.401 -0400",hash_original_method="D5FF661797DACE8313953DC48C3DA11C",hash_generated_method="513C39CF8F7C91159F6C1EAE6C70C89C") public static String normalize(CharSequence src,Form form){  return NativeNormalizer.normalize(src,form);}  }
class C{  public Anonymous_guard_1_ createAnonymous_guard_1_(){  Anonymous_guard_1_Impl anonymous_guard_1_=new Anonymous_guard_1_Impl();  return anonymous_guard_1_;}  }
class C{  public ScaleSamsungEsp(String sPortPrinter){  m_sPortScale=sPortPrinter;  m_out=null;  m_in=null;  m_iStatusScale=SCALE_READY;  m_dWeightBuffer=0.0;  m_dWeightDecimals=1.0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.645 -0500",hash_original_method="BCFD29C2FE3D7BF7BBC15432578BF66F",hash_generated_method="4FEA5BAF7761C27311CDD7D7CA310926") public boolean isRetransmissionFilterActive(){  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int compare(Object object1,Object object2){  if (object1 == null)   return 1; else   if (object2 == null)   return -1;  T solution1=(T)object1;  T solution2=(T)object2;  if (solution1.getRank() < solution2.getRank())   return -1; else   if (solution1.getRank() > solution2.getRank())   return +1; else   if (solution1.getDistance() > solution2.getDistance())   return -1; else   if (solution2.getDistance() > solution1.getDistance())   return +1; else   return 0;}  }
class C{  public SmsPdu(SmsUdhElement[] udhElements,SmsUserData ud){  setUserDataHeaders(udhElements);  setUserData(ud);}  }
class C{  public static synchronized void unregisterDao(ConnectionSource connectionSource,Dao<?,?> dao){  if (connectionSource == null) {    throw new IllegalArgumentException("connectionSource argument cannot be null");  }  removeDaoToClassMap(new ClassConnectionSource(connectionSource,dao.getDataClass()),dao);}  }
class C{  private void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  parameterPanel.setLayout(parameterLayout);  labelResourceType.setHorizontalTextPosition(SwingConstants.LEADING);  labelResourceType.setText(Msg.translate(Env.getCtx(),"S_ResourceType_ID"));  labelResource.setHorizontalTextPosition(SwingConstants.LEADING);  labelResource.setText(Msg.translate(Env.getCtx(),"S_Resource_ID"));  bPrevious.setMargin(new Insets(0,0,0,0));  bPrevious.setText("<");  labelDate.setText(Msg.translate(Env.getCtx(),"Date"));  bNext.setMargin(new Insets(0,0,0,0));  bNext.setText(">");  getContentPane().add(mainPanel,BorderLayout.CENTER);  mainPanel.add(parameterPanel,BorderLayout.NORTH);  parameterPanel.add(labelResourceType,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(8,8,0,0),0,0));  parameterPanel.add(fieldResourceType,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,8,8,4),0,0));  parameterPanel.add(labelResource,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(8,4,0,4),0,0));  parameterPanel.add(fieldResource,new GridBagConstraints(1,1,1,1,0.5,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(0,0,8,4),0,0));  parameterPanel.add(bPrevious,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,8,8,0),0,0));  parameterPanel.add(labelDate,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(8,0,0,0),0,0));  parameterPanel.add(fieldDate,new GridBagConstraints(3,1,1,1,0.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,8,0),0,0));  parameterPanel.add(bNext,new GridBagConstraints(4,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,8,8),0,0));  mainPanel.add(new JScrollPane(timePane),BorderLayout.CENTER);  timePane.add(daySchedule,Msg.getMsg(Env.getCtx(),"Day"));  timePane.add(weekSchedule,Msg.getMsg(Env.getCtx(),"Week"));  timePane.add(monthSchedule,Msg.getMsg(Env.getCtx(),"Month"));  timePane.addChangeListener(this);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  this.getContentPane().add(statusBar,BorderLayout.SOUTH);}  }
class C{  public boolean isHash(){  return hash;}  }
class C{  private static String pruneNodeSpecificMessage(String text){  int size=text.length();  int i=0;  StringBuilder builder=new StringBuilder(size);  while (i < size) {    char c=text.charAt(i);    if (c == ' ') {      builder.append(c);      while (i < size - 1 && c == ' ') {        i++;        c=text.charAt(i);      }    }    if (c != '\n') {      builder.append(c);    }    i++;  }  return builder.toString().trim();}  }
class C{  public boolean isForeignKeysEmbedded(){  return foreignKeysEmbedded;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TypeScriptVerticle(Verticle delegateVerticle){  this.delegateVerticle=delegateVerticle;}  }
class C{  public final int size(){  return current_item;}  }
class C{  public static double overlap(SpatialComparable box1,SpatialComparable box2){  final int dim=assertSameDimensionality(box1,box2);  double omax, omin;  double overlap=1.;  for (int i=0; i < dim; i++) {    omax=Math.min(box1.getMax(i),box2.getMax(i));    omin=Math.max(box1.getMin(i),box2.getMin(i));    if (omax <= omin) {      return 0.;    }    overlap*=omax - omin;  }  return overlap;}  }
class C{  @SuppressWarnings("unchecked") private void doTestQuery(int cardinality,String[] fields) throws Exception {  String[] startOptions=new String[]{"(","["};  String[] endOptions=new String[]{")","]"};  Integer[] qRange=getRandomRange(cardinality,"id");  ModifiableSolrParams params=new ModifiableSolrParams();  params.set("q","id:[" + qRange[0] + " TO "+ qRange[1]+ "]");  params.set("facet","true");  String field=fields[random().nextInt(fields.length)];  params.set("facet.interval",field);  for (int i=0; i < 1 + random().nextInt(20); i++) {    Integer[] interval=getRandomRange(cardinality,field);    String open=startOptions[interval[0] % 2];    String close=endOptions[interval[1] % 2];    params.add("f." + field + ".facet.interval.set",open + interval[0] + ","+ interval[1]+ close);    params.add("facet.query",field + ":" + open.replace('(','{')+ interval[0]+ " TO "+ interval[1]+ close.replace(')','}'));  }  SolrQueryRequest req=req(params);  try {    SolrQueryResponse rsp=h.queryAndResponse("standard",req);    NamedList<Object> facetQueries=(NamedList<Object>)((NamedList<Object>)rsp.getValues().get("facet_counts")).get("facet_queries");    NamedList<Object> facetIntervals=(NamedList<Object>)((NamedList<Object>)(NamedList<Object>)((NamedList<Object>)rsp.getValues().get("facet_counts")).get("facet_intervals")).get(field);    assertEquals("Responses don't have the same number of facets: \n" + facetQueries + "\n"+ facetIntervals,facetQueries.size(),facetIntervals.size());    for (int i=0; i < facetIntervals.size(); i++) {      assertEquals("Interval did not match: " + facetIntervals.getName(i),facetIntervals.getVal(i).toString(),facetQueries.get(field + ":" + facetIntervals.getName(i).replace(","," TO ").replace('(','{').replace(')','}')).toString());    }  }  finally {    req.close();  }}  }
class C{  public void updateExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ActionNotAllowedException {  if (validate(mapping,form,request,response) == false) {    setReturnActionFordward(request,mapping.findForward("update-failed"));    return;  }  try {    ServiceRepository services=getServiceRepository(request);    GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();    FormatoFichasForm fmtFichasForm=(FormatoFichasForm)form;    FmtFichaVO fmtFichaVO=fmtFichasForm.populate(new FmtFichaVO());    fmtFichaVO=descripcionService.updateFmtFicha(fmtFichaVO);    goReturnPointExecuteLogic(mapping,form,request,response);  } catch (  ActionNotAllowedException anae) {    guardarError(request,anae);    setReturnActionFordward(request,mapping.findForward("update-failed"));  }}  }
class C{  public MockUpnpService(final boolean sendsAlive,final boolean maintainsRegistry){  this(sendsAlive,new MockUpnpServiceConfiguration(maintainsRegistry,false));}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  CommLockInfoDao.dropTable(db,ifExists);}  }
class C{  public boolean equals(BST<E> tree){  if (tree.size != size)   return false;  return equals(root,tree.root);}  }
class C{  public boolean isDepreciated(){  Object oo=get_Value(COLUMNNAME_IsDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  try {    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  public LabelMaker(boolean fullColor,int strikeWidth,int strikeHeight){  mFullColor=fullColor;  mStrikeWidth=strikeWidth;  mStrikeHeight=strikeHeight;  mTexelWidth=(float)(1.0 / mStrikeWidth);  mTexelHeight=(float)(1.0 / mStrikeHeight);  mClearPaint=new Paint();  mClearPaint.setARGB(0,0,0,0);  mClearPaint.setStyle(Style.FILL);  mState=STATE_NEW;}  }
class C{  public static Document saveUserConfig(String sessionID,Integer bookId,String fields,String params,AxSf axsf,Locale locale,String entidad) throws BookException, SessionException, ValidationException {  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  Validator.validate_Integer(bookId,ValidationException.ATTRIBUTE_BOOK);  Transaction tran=null;  Document result=null;  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    THashMap bookInformation=(THashMap)cacheBag.get(bookId);    Idocarchdet idoc=(Idocarchdet)bookInformation.get(IDocKeys.IDOCARCHDET_FLD_DEF_ASOBJECT);    FieldFormat fieldFormat=new FieldFormat(idoc.getDetval());    Session session=HibernateUtil.currentSession(entidad);    tran=session.beginTransaction();    UserConf usrConf=new UserConf();    ConfiguratorUser configuratorUser=new ConfiguratorUser();    usrConf=configuratorUser.getUsrConf(user,entidad);    usrConf=configuratorUser.getUserConfig(usrConf,bookId,axsf,true,fieldFormat.getFlddefs(),true,false,locale);    configuratorUser.getUsrConfFieldsChanged(usrConf,fields);    configuratorUser.getUsrConfParamsChanged(usrConf,params);    Document document=usrConf.getDoc();    result=configuratorUser.createOrUpdateXMLDocument(usrConf,bookId,false);    if (document == null) {      DBEntityDAOFactory.getCurrentDBEntityDAO().saveOrUpdateUserConfig(result.asXML(),user.getId(),0,entidad);    } else {      DBEntityDAOFactory.getCurrentDBEntityDAO().saveOrUpdateUserConfig(result.asXML(),user.getId(),1,entidad);    }    HibernateUtil.commitTransaction(tran);  } catch (  BookException bE) {    HibernateUtil.rollbackTransaction(tran);    throw bE;  }catch (  SessionException sE) {    HibernateUtil.rollbackTransaction(tran);    throw sE;  }catch (  Exception e) {    HibernateUtil.rollbackTransaction(tran);    log.error("Impossible to save the user configuration for the session [" + sessionID + "]",e);    throw new BookException(BookException.ERROR_CANNOT_SAVE_PERSIST_FIELDS);  } finally {    HibernateUtil.closeSession(entidad);  }  return result;}  }
class C{  protected NamedBean createInstance(){  return new DefaultConditional("IXIC 0");}  }
class C{  public WriteException(Collection<WriteRequest> requests,String message,Throwable cause){  super(message);  initCause(cause);  this.requests=asRequestList(requests);}  }
class C{  public static <T extends SabresObject>void fetchAll(List<T> objects) throws SabresException {  final Sabres sabres=Sabres.self();  sabres.open();  try {    for (    T o : objects) {      o.fetch(sabres);    }  }  finally {    sabres.close();  }}  }
class C{  public void init(){  TelephonyManager mgr=(TelephonyManager)AndroidFactory.getApplicationContext().getSystemService(Context.TELEPHONY_SERVICE);  mImsi=mgr.getSubscriberId();  String mcc_mnc=mgr.getSimOperator();  mMcc=mcc_mnc.substring(0,3);  mMnc=mcc_mnc.substring(3);  if (mcc_mnc.length() == 5) {    mMnc="0" + mMnc;  }}  }
class C{  public Kim kim(int integer){  Kim kim=this.kims[integer];  int from=this.froms[integer];  int thru=this.thrus[integer];  if (from != 0 || thru != kim.length) {    kim=new Kim(kim,from,thru);    this.froms[integer]=0;    this.thrus[integer]=kim.length;    this.kims[integer]=kim;  }  return kim;}  }
class C{  public NamedScheduledThreadPoolExecutor(String poolName,int fixPoolSize){  super(fixPoolSize,new NamedThreadFactory(poolName));  setPoolName(poolName);}  }
class C{  public boolean isClipped(){  return clipped;}  }
class C{  public final void removePropertyChangeListener(PropertyChangeListener listener){  pcs.removePropertyChangeListener(listener);}  }
class C{  private Map<String,PluginDescriptor> filter(Pattern excludes,Pattern includes,Map<String,PluginDescriptor> plugins){  Map<String,PluginDescriptor> map=new HashMap<String,PluginDescriptor>();  if (plugins == null) {    return map;  }  for (  PluginDescriptor plugin : plugins.values()) {    if (plugin == null) {      continue;    }    String id=plugin.getPluginId();    if (id == null) {      continue;    }    if (!includes.matcher(id).matches()) {      LOG.debug("not including: " + id);      continue;    }    if (excludes.matcher(id).matches()) {      LOG.debug("excluding: " + id);      continue;    }    map.put(plugin.getPluginId(),plugin);  }  return map;}  }
class C{  private void saveAndMoveCursor(final String fileName,final LogFile headerRecord,final Cursor cursor){  try {    cursor.moveToPrevious();    File file=new File(fileName);    Writer bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file.getAbsoluteFile()),"UTF-8"),30 * 1024);    bw.write(XML_HEADER);    bw.write(logToXml(headerRecord.getManufacturer(),headerRecord.getModel(),headerRecord.getRevision(),headerRecord.getSwid(),headerRecord.getSwVersion(),mExportVersion));    long previousBeginId=0;    String previousEnd="";    int i=0;    while (i < CELLS_PER_FILE && cursor.moveToNext()) {      final long beginId=Long.valueOf(cursor.getString(mColBeginPosId));      final String currentBegin=positionToXml(cursor.getLong(mColReqTimestamp),cursor.getDouble(mColReqLon),cursor.getDouble(mColReqLat),cursor.getDouble(mColReqAlt),cursor.getDouble(mColReqHead),cursor.getDouble(mColReqSpeed),cursor.getDouble(mColReqAcc),"begin");      final String currentEnd=positionToXml(cursor.getLong(mColLastTimestamp),cursor.getDouble(mColLastLon),cursor.getDouble(mColLastLat),cursor.getDouble(mColLastAlt),cursor.getDouble(mColLastHead),cursor.getDouble(mColLastSpeed),cursor.getDouble(mColLastAcc),"end");      if (i == 0) {        bw.write(scanToXml(cursor.getLong(mColTimestamp)));        bw.write(currentBegin);      } else {        if (beginId != previousBeginId) {          bw.write(previousEnd);          bw.write(CLOSE_SCAN_TAG);          bw.write(scanToXml(cursor.getLong(mColTimestamp)));          bw.write(currentBegin);        }      }      bw.write(cellToXML(cursor.getInt(mColIsServing),cursor.getInt(mColIsNeigbor),cursor.getString(mColMcc),cursor.getString(mColMnc),cursor.getString(mColLac),cursor.getString(mColLogicalCellId),cursor.getString(mColActualCellId),cursor.getString(mColUtranRnc),cursor.getString(mColStrengthDbm),cursor.getString(mColStrengthAsu),cursor.getInt(mColNetworkType),cursor.getString(mColPsc)));      previousBeginId=beginId;      previousEnd=currentEnd;      i++;    }    bw.write(previousEnd);    bw.write(CLOSE_SCAN_TAG);    bw.write(CLOSE_LOGFILE);    bw.close();    file=null;    bw=null;  } catch (  final IOException ioe) {    cursor.close();    Log.e(TAG,ioe.toString(),ioe);  }}  }
class C{  public void add(Component comp,Object constraints){  if (comp == null) {    throw new RuntimeException("Can't add null component to DockPanel");  }  if (comp instanceof DockWrapper) {    Debug.error("DockPanel: Unexpected call to add with a DockWrapper");    super.add(comp,constraints);  } else {    if (constraints.equals(BACKGROUND)) {      background=(JComponent)comp;      super.add(comp,constraints);      setLayer(comp,BACKGROUND_LAYER.intValue());    } else     if (constraints instanceof DockConstraint) {      if (comp instanceof JToolBar) {        JToolBar t=(JToolBar)comp;        t.setFloatable(false);      }      setConstraint((JComponent)comp,(DockConstraint)constraints);      if (!alreadyAdded(comp)) {        createDockWrapper((JComponent)comp);      }    } else {      Debug.error("DockPanel: Unexpected constraint: " + constraints);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void useDefaults(){  setAutoStart(false);  setDuration(1000);  setRepeatCount(ObjectAnimator.INFINITE);  setRepeatDelay(0);  setRepeatMode(ObjectAnimator.RESTART);  mMask.angle=MaskAngle.CW_0;  mMask.shape=MaskShape.LINEAR;  mMask.dropoff=0.5f;  mMask.fixedWidth=0;  mMask.fixedHeight=0;  mMask.intensity=0.0f;  mMask.relativeWidth=1.0f;  mMask.relativeHeight=1.0f;  mMask.tilt=20;  mMaskTranslation=new MaskTranslation();  setBaseAlpha(0.3f);  resetAll();}  }
class C{  public static void showErrorDialog(@NotNull final Project project,@NotNull final String message){  if (ApplicationManager.getApplication() == null) {    return;  }  Messages.showErrorDialog(project,message,TfPluginBundle.message(TfPluginBundle.KEY_TITLE_TEAM_SERVICES_ERROR));}  }
class C{  public String toString(){  return "ResponseAPDU: " + apdu.length + " bytes, SW="+ Integer.toHexString(getSW());}  }
class C{  public int size(){  return m_selectedNodes.size();}  }
class C{  public NamespaceConfig(final String name,final int totalSegments,final String unit,final String salt){  checkArgument(StringUtils.isNotEmpty(name));  this.name=name;  checkArgument(StringUtils.isNotEmpty(unit));  this.unit=unit;  checkArgument(totalSegments > 0,"totalSegments must be a positive integer");  availableSegments=new LinkedHashSet<>(totalSegments,1);  for (int i=0; i < totalSegments; i++) {    availableSegments.add(i);  }  allocationMap=new Experiment[totalSegments];  this.salt=StringUtils.stripToNull(salt);}  }
class C{  private void copyResource(InputStream resource,File file) throws IOException {  try (OutputStream out=new FileOutputStream(file)){    int length;    byte[] buf=new byte[1024];    while ((length=resource.read(buf)) > 0)     out.write(buf,0,length);  } }  }
class C{  public static int hash(int seed,boolean[] booleanArray){  if (booleanArray == null) {    return 0;  }  for (  boolean aBoolean : booleanArray) {    seed=hash(seed,aBoolean);  }  return seed;}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  public CircuitBreakerConfig build(){  return new CircuitBreakerConfig(failureRateThreshold,waitDurationInOpenState,ringBufferSizeInHalfOpenState,ringBufferSizeInClosedState,exceptionPredicate,circuitBreakerEventListener);}  }
class C{  public static boolean doesProjectExist(final SWTWorkbenchBot bot,String projectName){  SWTBotView explorer=getPackageExplorer(bot);  if (explorer == null) {    throw new WidgetNotFoundException("Could not find the 'Package Explorer' or 'Project Explorer' view.");  }  Widget explorerWidget=explorer.getWidget();  Tree explorerTree=bot.widget(widgetOfType(Tree.class),explorerWidget);  SWTBotTreeItem[] allItems=new SWTBotTree(explorerTree).getAllItems();  for (int i=0; i < allItems.length; i++) {    if (allItems[i].getText().equals(projectName)) {      return true;    }  }  return false;}  }
class C{  public boolean isFlaggedUsageMarkingFinished(){  return flaggedUsageMarkingFinished;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:18.864 -0500",hash_original_method="0598EE9DB236F7268C8A7877021962D5",hash_generated_method="510880B85D007E14A841E542571C558E") public Drawable loadIcon(PackageManager pm){  return mService.loadIcon(pm);}  }
class C{  protected static List<String> extractBootClassPath(final List<String> args){  return extractOptWithPattern(BOOT_CLASS_PATH_REGEX,false,args);}  }
class C{  public Object evalSingle(ExpressionAST e) throws ScopeException {  return eval_single(e);}  }
class C{  private boolean isCommon(){  return commonWords != null && commonWords.contains(termAttribute.buffer(),0,termAttribute.length());}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.TYPE_DEFINITION;}  }
class C{  public void parse(InputStream inputStream,DefaultSynthStyleFactory factory,URL urlResourceBase,Class<?> classResourceBase,Map<String,Object> defaultsMap) throws ParseException, IllegalArgumentException {  if (inputStream == null || factory == null || (urlResourceBase == null && classResourceBase == null)) {    throw new IllegalArgumentException("You must supply an InputStream, StyleFactory and Class or URL");  }  assert (!(urlResourceBase != null && classResourceBase != null));  _factory=factory;  _classResourceBase=classResourceBase;  _urlResourceBase=urlResourceBase;  _defaultsMap=defaultsMap;  try {    try {      SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();      saxParser.parse(new BufferedInputStream(inputStream),this);    } catch (    ParserConfigurationException e) {      throw new ParseException("Error parsing: " + e,0);    }catch (    SAXException se) {      throw new ParseException("Error parsing: " + se + " "+ se.getException(),0);    }catch (    IOException ioe) {      throw new ParseException("Error parsing: " + ioe,0);    }  }  finally {    reset();  }}  }
class C{  public void test_createSocket(){  SSLSocketFactory sf=(SSLSocketFactory)SSLSocketFactory.getDefault();  int sport=startServer("test_createSocket()");  int[] invalid={Integer.MIN_VALUE,-1,65536,Integer.MAX_VALUE};  try {    Socket st=new Socket("localhost",sport);    Socket s=sf.createSocket(st,"localhost",sport,false);    assertFalse(s.isClosed());  } catch (  Exception ex) {    fail("Unexpected exception " + ex);  }  try {    Socket st=new Socket("localhost",sport);    Socket s=sf.createSocket(st,"localhost",sport,true);    s.close();    assertTrue(st.isClosed());  } catch (  Exception ex) {    fail("Unexpected exception " + ex);  }  try {    sf.createSocket(null,"localhost",sport,true);    fail("IOException wasn't thrown");  } catch (  IOException ioe) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalid.length; i++) {    try {      Socket s=sf.createSocket(new Socket(),"localhost",1080,false);      fail("IOException wasn't thrown");    } catch (    IOException ioe) {    }  }  try {    Socket st=new Socket("bla-bla",sport);    Socket s=sf.createSocket(st,"bla-bla",sport,false);    fail("UnknownHostException wasn't thrown: " + "bla-bla");  } catch (  UnknownHostException uhe) {  }catch (  Exception e) {    fail(e + " was thrown instead of UnknownHostException");  }}  }
class C{  public int isNullable(final int column) throws SQLException {  if ((getColumnInformation(column).getFlags() & ColumnFlags.NOT_NULL) == 0) {    return ResultSetMetaData.columnNullable;  } else {    return ResultSetMetaData.columnNoNulls;  }}  }
class C{  public boolean isLeaf(V vertex){  if (!containsVertex(vertex))   return false;  return outDegree(vertex) == 0;}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public void startTiming(){  timeStamp=System.currentTimeMillis();}  }
class C{  @Override public void startIteration() throws AdeException {  m_trained=false;  m_lastSeen=new TreeMap<String,PerodicityBounder>();}  }
class C{  public static File createGreekTreeRepository() throws Exception {  final File repoRoot=Files.createTempDir();  final File wcRoot=Files.createTempDir();  repoRoot.deleteOnExit();  wcRoot.deleteOnExit();  final CommandLineResult result=UpstreamUtils.executeCommandLine(null,"svnadmin",new String[]{"create",repoRoot.getAbsolutePath()},-1,repoRoot);  handleCLIResult(result);  final CLIOutputWithRevisionResponse coResponse=subversionApi.checkout(dtoFactory.createDto(CheckoutRequest.class).withProjectPath(wcRoot.getAbsolutePath()).withUrl("file:///" + repoRoot.getAbsolutePath()));  assertTrue(coResponse.getRevision() > -1);  final List<String> pathsToAdd=new ArrayList<>();  for (  final String path : GREEK_TREE) {    final File fileForPath=new File(wcRoot,path);    final String[] pathParts=path.split("/");    Files.createParentDirs(fileForPath);    if (!path.endsWith("/") && fileForPath.createNewFile()) {      Files.write(("This is the file '" + pathParts[pathParts.length - 1] + "'.").getBytes(),fileForPath);      pathsToAdd.add(path.substring(1));    }  }  subversionApi.add(dtoFactory.createDto(AddRequest.class).withProjectPath(wcRoot.getAbsolutePath()).withPaths(pathsToAdd).withAddParents(true));  final CLIOutputResponse propResponse=subversionApi.propset(dtoFactory.createDto(PropertySetRequest.class).withValue("user").withProjectPath(wcRoot.getAbsolutePath()).withPath(".").withForce(true).withDepth(Depth.FULLY_RECURSIVE).withName("owner"));  assertTrue(propResponse.getOutput().size() > 0);  final CLIOutputWithRevisionResponse cResponse=subversionApi.commit(dtoFactory.createDto(CommitRequest.class).withProjectPath(wcRoot.getAbsolutePath()).withMessage("Initial commit."));  assertEquals(1L,cResponse.getRevision());  return repoRoot;}  }
class C{  public boolean isDisplayed(){  Object oo=get_Value(COLUMNNAME_IsDisplayed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static int byteCompaction(int mode,int[] codewords,int codeIndex,StringBuilder result){  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    char[] decodedData=new char[6];    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedData[5 - j]=(char)(value % 256);            value>>=8;          }          result.append(decodedData);          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      result.append((char)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        char[] decodedData=new char[6];        for (int j=0; j < 6; ++j) {          decodedData[5 - j]=(char)(value & 0xFF);          value>>=8;        }        result.append(decodedData);        count=0;      }    }  }  return codeIndex;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    try {      int offs=target.getCaretPosition();      int endOffs=Utilities.getRowEnd(target,offs);      if (select) {        target.moveCaretPosition(endOffs);      } else {        target.setCaretPosition(endOffs);      }    } catch (    BadLocationException bl) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public static boolean isEmpty(final boolean[] array){  return array == null || array.length == 0;}  }
class C{  private PhysicalNAS createPhysicalNas(final StorageSystem system,IsilonAccessZone isiAccessZone){  PhysicalNAS phyNas=new PhysicalNAS();  phyNas.setStorageDeviceURI(system.getId());  phyNas.setNasName(isiAccessZone.getName());  phyNas.setNativeId(isiAccessZone.getId());  phyNas.setNasState(VirtualNasState.LOADED.toString());  phyNas.setId(URIUtil.createId(PhysicalNAS.class));  String physicalNasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,isiAccessZone.getZone_id().toString(),NativeGUIDGenerator.PHYSICAL_NAS);  phyNas.setNativeGuid(physicalNasNativeGuid);  _log.info("Physical NAS created with guid {} ",phyNas.getNativeGuid());  StringMap dbMetrics=phyNas.getMetrics();  if (dbMetrics == null) {    dbMetrics=new StringMap();  }  setMaxDbMetricsAz(system,dbMetrics);  phyNas.setMetrics(dbMetrics);  return phyNas;}  }
class C{  public void multiplyAllValuesBy(final double multiplyBy,final int RoundType){  for (  final T t : keySet()) {    double val=mapValues.get(t);switch (RoundType) {case 1:      val=Math.floor(val * multiplyBy);    break;case 2:  val=Math.round(val * multiplyBy);break;case 3:val=Math.ceil(val * multiplyBy);break;default :val=val * multiplyBy;break;}put(t,(int)val);}}  }
class C{  protected int insertionIndex(int val){  byte[] states=_states;  int[] set=_set;  int length=states.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && set[index] == val) {    return -index - 1;  } else {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] == FULL && set[index] != val);    if (states[index] == REMOVED) {      int firstRemoved=index;      while (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {        index-=probe;        if (index < 0) {          index+=length;        }      }      return states[index] == FULL ? -index - 1 : firstRemoved;    }    return states[index] == FULL ? -index - 1 : index;  }}  }
class C{  public boolean hasComboId(){  return hasExtension(GwoComboId.class);}  }
class C{  private void inorder(){  inorder(root);}  }
class C{  public boolean isSetSrcPartitions(){  return this.srcPartitions != null;}  }
class C{  public StorageLun[] queryStorageLuns(String[] lunId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryStorageLuns(): ";  log.info(methodName + "Entry");  if (lunId != null) {    log.debug(methodName + "inputs processorIds[" + Arrays.asList(lunId)+ "]");  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  StorageLun[] luns=sosManager.queryStorageLuns(lunId);  log.info(methodName + "Exit returning array of luns of size[" + luns.length+ "]");  return luns;}  }
class C{  public Sample(Assignment a,double logWeight,double utility){  super(a);  this.logWeight=logWeight;  this.utility=utility;}  }
class C{  private void sendKey(int keyCode){switch (keyCode) {case '\n':    keyDownUp(KeyEvent.KEYCODE_ENTER);  break;default :if (keyCode >= '0' && keyCode <= '9') {  keyDownUp(keyCode - '0' + KeyEvent.KEYCODE_0);} else {  getCurrentInputConnection().commitText(String.valueOf((char)keyCode),1);}break;}}  }
class C{  public static boolean isExternalStorageWritable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state);}  }
class C{  public void join(Object[] pieces){  int sum=0;  for (int x=0; x < pieces.length; x++)   sum+=((float[])(pieces[x])).length;  int runningsum=0;  float[] newgenome=new float[sum];  for (int x=0; x < pieces.length; x++) {    System.arraycopy(pieces[x],0,newgenome,runningsum,((float[])(pieces[x])).length);    runningsum+=((float[])(pieces[x])).length;  }  genome=newgenome;}  }
class C{  public void printToStream(PrintStream ps){  for (int i=0, n=m_length; i < n; i++) {    int c=m_bytes[m_offset + i];    ps.print((char)c);  }}  }
class C{  private void fillNavListSummaryValues(){  ImageView travelMode;  travelMode=(ImageView)activity.findViewById(R.id.nav_instruction_list_travel_mode_iv);  travelMode.setImageResource(Navigator.getNavigator().getTravelModeResId(true));  TextView from, to, distance, time;  from=(TextView)activity.findViewById(R.id.nav_instruction_list_summary_from_tv);  to=(TextView)activity.findViewById(R.id.nav_instruction_list_summary_to_tv);  distance=(TextView)activity.findViewById(R.id.nav_instruction_list_summary_distance_tv);  time=(TextView)activity.findViewById(R.id.nav_instruction_list_summary_time_tv);  from.setText(Destination.getDestination().getStartPointToString());  to.setText(Destination.getDestination().getEndPointToString());  distance.setText(Navigator.getNavigator().getDistance());  time.setText(Navigator.getNavigator().getTime());}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  @Override public T execute() throws CodenvyException {  return call();}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case EipPackage.MESSAGE_PART:    return convertMessagePartToString(eDataType,instanceValue);case EipPackage.ROUTING_TYPE:  return convertRoutingTypeToString(eDataType,instanceValue);case EipPackage.EXCHANGE_TYPE:return convertExchangeTypeToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  final void removeHalfEdges(DoubleEdgeListHalfEdge edge){  int index=this.edges.indexOf(edge);  this.removeHalfEdges(index,edge);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public Object object(){  if (null == m_obj)   setObject(new Boolean(m_val));  return m_obj;}  }
class C{  public static boolean readModPoll(int register,int type,int numberOfRegisters,String expectedOutput){  return execModPoll(register,type,null,expectedOutput,numberOfRegisters);}  }
class C{  public ReadHallOfFamePointsCommand(String playername,String fametype){  this.playername=playername;  this.fametype=fametype;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TYPE_CONSTRAINT__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public void verify() throws InterruptedException {  conditionLatch.await(5,TimeUnit.SECONDS);  for (  AsyncCountableCondition condition : allConditions) {    condition.verify();  }}  }
class C{  @Override public EvoSVMModel train() throws OperatorException {  optimize();  return getModel(getBestValuesEver());}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean isGenericStreamPartition(){  return this.isBodyPartition() && (this.header.getKey()[14] == PartitionPack.GENERIC_STREAM_PARTITION_PACK_KEY_PARTITION_STATUS);}  }
class C{  public static int encodeLength(int len){  if (len <= 32) {    return 0;  }  int code=Integer.numberOfLeadingZeros(len);  int remaining=len << (code + 1);  code+=code;  if ((remaining & (1 << 31)) != 0) {    code--;  }  if ((remaining << 1) != 0) {    code--;  }  code=Math.min(31,52 - code);  return code;}  }
class C{  private final int moveScore(Position pos,String moveStr){  int score1=evalWhite(pos);  Position tmpPos=new Position(pos);  UndoInfo ui=new UndoInfo();  tmpPos.makeMove(TextIO.stringToMove(tmpPos,moveStr),ui);  int score2=evalWhite(tmpPos);  return score2 - score1;}  }
class C{  public CLIOutputResponse remove(final RemoveRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  cliArgs.add("remove");  final CommandLineResult result=runCommand(null,cliArgs,projectPath,request.getPaths());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  } else   if (o instanceof IdentityHashMap) {    IdentityHashMap<?,?> m=(IdentityHashMap<?,?>)o;    if (m.size() != size)     return false;    Object[] tab=m.table;    for (int i=0; i < tab.length; i+=2) {      Object k=tab[i];      if (k != null && !containsMapping(k,tab[i + 1]))       return false;    }    return true;  } else   if (o instanceof Map) {    Map<?,?> m=(Map<?,?>)o;    return entrySet().equals(m.entrySet());  } else {    return false;  }}  }
class C{  private static int skiprand(int seed,int n){  for (; n != 0; n--)   seed=random(seed);  return seed;}  }
class C{  protected SVGOMURIReferenceElement(){}  }
class C{  private void verifyHostname(SSLSocket socket) throws SSLPeerUnverifiedException, UnknownHostException {  if (!verifyHostname)   return;  SSLSession session=socket.getSession();  String hostname=session.getPeerHost();  try {    InetAddress addr=InetAddress.getByName(hostname);  } catch (  UnknownHostException uhe) {    throw new UnknownHostException("Could not resolve SSL sessions " + "server hostname: " + hostname);  }  X509Certificate[] certs=session.getPeerCertificateChain();  if (certs == null || certs.length == 0)   throw new SSLPeerUnverifiedException("No server certificates found!");  String dn=certs[0].getSubjectDN().getName();  if (logger.isDebugEnabled()) {    logger.debug("Server certificate chain:");    for (int i=0; i < certs.length; i++) {      logger.debug("X509Certificate[" + i + "]="+ certs[i]);    }  }  String cn=getCN(dn);  if (hostname.equalsIgnoreCase(cn)) {    if (logger.isDebugEnabled()) {      logger.debug("Target hostname valid: " + cn);    }  } else {    throw new SSLPeerUnverifiedException("HTTPS hostname invalid: expected '" + hostname + "', received '"+ cn+ "'");  }}  }
class C{  public <K>T ajax(String url,Class<K> type,Object handler,String callback){  AjaxCallback<K> cb=new AjaxCallback<K>();  cb.type(type).weakHandler(handler,callback);  return ajax(url,type,cb);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public static boolean isResetUnitStateAtEnd(final GameData data){  final boolean isReset;  data.acquireReadLock();  try {    final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_resetUnitStateAtEnd);    if (prop != null) {      isReset=Boolean.parseBoolean(prop);    } else {      isReset=isNonCombatDelegate(data);    }  }  finally {    data.releaseReadLock();  }  return isReset;}  }
class C{  protected LoadStats readData() throws Exception {  final long begin=System.currentTimeMillis();  final IStatementBuffer<Statement> buffer=bufferFactory.newStatementBuffer();  buffer.reset();  if (log.isInfoEnabled())   log.info("loading: " + resource);  final PresortRioLoader loader=new PresortRioLoader(buffer);  final InputStream rdfStream=new FileInputStream(resource);  final Reader reader=new BufferedReader(new InputStreamReader(rdfStream));  boolean success=false;  try {    final LoadStats stats=new LoadStats();    loader.loadRdf(reader,baseURL,rdfFormat,null,parserOptions);    success=true;    final long nstmts=loader.getStatementsAdded();    final long now=System.currentTimeMillis();    stats.toldTriples.set(nstmts);    stats.totalTime.set(now - begin);    stats.loadTime.set(now - begin);    if (log.isInfoEnabled())     log.info(stats.toString());    return stats;  } catch (  Exception ex) {    buffer.reset();    throw ex;  } finally {    reader.close();    rdfStream.close();    if (deleteAfter && success) {      if (!new File(resource).delete()) {        log.warn("Could not delete: " + resource);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized void addHeader(String arg0,String arg1){  if (RFC2822Headers.RETURN_PATH.equalsIgnoreCase(arg0)) {    headers.add(0,new InternetHeader(arg0,arg1));  } else {    super.addHeader(arg0,arg1);  }  modified();}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  public ActiveInfoStorageCalculatorViaMutualInfo(String miCalculatorClassName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  @SuppressWarnings("unchecked") Class<MutualInfoCalculatorMultiVariate> miClass=(Class<MutualInfoCalculatorMultiVariate>)Class.forName(miCalculatorClassName);  MutualInfoCalculatorMultiVariate miCalc=miClass.newInstance();  construct(miCalc);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_BODY_1__LINKING_OP_1:    return ((InternalEList<?>)getLinkingOp_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override protected void initListeners(){  this.fab.setOnClickListener(this);}  }
class C{  private void clearBlock(byte[] block){  for (int i=0; i != block.length; i++) {    block[i]=0;  }}  }
class C{  public void testSeedReset(){  final long seed1=123L;  final long seed2=234L;  MatsimRandom.reset(seed1);  double value1=MatsimRandom.getRandom().nextDouble();  MatsimRandom.reset(seed1);  double value2=MatsimRandom.getRandom().nextDouble();  assertEquals(value1,value2,EPSILON);  MatsimRandom.reset(seed2);  double value3=MatsimRandom.getRandom().nextInt();  assertTrue(Math.abs(value1 - value3) > EPSILON);}  }
class C{  boolean inWindow(int x,int y){  int w=getListWidth();  int h=hsbVis ? height - SCROLLBAR_AREA : height;  return ((x >= 0) && (x <= w)) && ((y >= 0) && (y <= h));}  }
class C{  public void addException(ClassType type){  addExceptionNoBidirectionalUpdate(type);  type.addMethodThrowingExceptionNoBidirectionalUpdate(this);}  }
class C{  protected boolean handlesExperiment(Experiment exp){  return true;}  }
class C{  public static Templates createTemplates(Source source){  try {    return getTransformerFactory().newTemplates(source);  } catch (  TransformerConfigurationException e) {    throw new XmlException(e);  }}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final TimeOffset timeOffset){  serializer.writeLong(label,timeOffset.getRaw());}  }
class C{  public void unregisterInterestRegistrationListener(InterestRegistrationListener listener){  this.writableInterestRegistrationListeners.remove(listener);}  }
class C{  private static void simplifyIf(IfNode insn){  InsnArg f=insn.getArg(0);  if (f.isInsnWrap()) {    InsnNode wi=((InsnWrapArg)f).getWrapInsn();    if (wi.getType() == InsnType.CMP_L || wi.getType() == InsnType.CMP_G) {      if (insn.getArg(1).isLiteral() && ((LiteralArg)insn.getArg(1)).getLiteral() == 0) {        insn.changeCondition(insn.getOp(),wi.getArg(0),wi.getArg(1));      } else {        LOG.warn("TODO: cmp {}",insn);      }    }  }}  }
class C{  protected TypeAliasImpl(){  super();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.217 -0500",hash_original_method="8C041823EF127A6F9DCC25E0329C5A09",hash_generated_method="E6994078FCA41404F2ACCD485CC61315") public String toString(){  StringBuffer sb=new StringBuffer(20 + infoPackage.length() + infoModule.length()+ infoRelease.length()+ infoTimestamp.length()+ infoClassloader.length());  sb.append("VersionInfo(").append(infoPackage).append(':').append(infoModule);  if (!UNAVAILABLE.equals(infoRelease))   sb.append(':').append(infoRelease);  if (!UNAVAILABLE.equals(infoTimestamp))   sb.append(':').append(infoTimestamp);  sb.append(')');  if (!UNAVAILABLE.equals(infoClassloader))   sb.append('@').append(infoClassloader);  return sb.toString();}  }
class C{  private void hideFab(){  fabPhoto.setVisibility(View.GONE);  final CoordinatorLayout.LayoutParams layoutParams=(CoordinatorLayout.LayoutParams)fabPhoto.getLayoutParams();  layoutParams.setAnchorId(View.NO_ID);  fabPhoto.requestLayout();  fabPhoto.hide();}  }
class C{  public Vec4 toHomogeneousDirection3(){  if (this.w == 0.0)   return this;  return new Vec4(this.x,this.y,this.z,0.0);}  }
class C{  public static String nowDateString(String format){  SimpleDateFormat df=new SimpleDateFormat(format);  return df.format(new Date());}  }
class C{  public void revokeVoice(String nickname) throws XMPPException {  changeRole(nickname,"visitor",null);}  }
class C{  public void writeXml(ResultSet rs,java.io.OutputStream oStream) throws SQLException, IOException {  wrs=new WebRowSetImpl();  wrs.populate(rs);  wrs.writeXml(oStream);}  }
class C{  public static String sanitizeUri(String uri) throws URISyntaxException {  try {    uri=URLDecoder.decode(uri,"UTF-8");  } catch (  UnsupportedEncodingException var4) {    try {      uri=URLDecoder.decode(uri,"ISO-8859-1");    } catch (    UnsupportedEncodingException var3) {      throw new Error();    }  }  if (!uri.startsWith("/")) {    return null;  } else {    URI uriObject=new URI(uri);    for (uri=uriObject.getPath(); uri != null && uri.startsWith("/"); uri=uri.substring(1)) {    }    return uri.toLowerCase();  }}  }
class C{  public static Document newDocument(){  try {    final DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    return builder.newDocument();  } catch (  ParserConfigurationException e) {    throw new RuntimeException(e);  }}  }
class C{  public Boolean timestamps(){  return timestamps;}  }
class C{  @Inline public static Object allocateScalar(int size,TIB tib,int allocator,int align,int offset,int site){  Selected.Mutator mutator=Selected.Mutator.get();  allocator=mutator.checkAllocator(org.jikesrvm.runtime.Memory.alignUp(size,MIN_ALIGNMENT),align,allocator);  Address region=allocateSpace(mutator,size,align,offset,allocator,site);  Object result=ObjectModel.initializeScalar(region,tib,size);  mutator.postAlloc(ObjectReference.fromObject(result),ObjectReference.fromObject(tib),size,allocator);  return result;}  }
class C{  public void removeAllFromDamaged(final Collection<Unit> damagedUnits){  for (  final Unit u : damagedUnits) {    while (m_damaged.contains(u)) {      m_damaged.remove(u);    }  }}  }
class C{  public int tabForCoordinate(final JTabbedPane pane,final int x,final int y){  ensureCurrentLayout();  final Point p=new Point(x,y);  if (visibleTabState.needsScrollTabs()) {    for (int i=0; i < visibleTabState.getTotal(); i++) {      final int realOffset=visibleTabState.getIndex(i);      if (rects[realOffset].contains(p.x,p.y))       return realOffset;    }    if (visibleTabState.getRightScrollTabRect().contains(p.x,p.y))     return -1;  } else {    final int tabCount=tabPane.getTabCount();    for (int i=0; i < tabCount; i++) {      if (rects[i].contains(p.x,p.y))       return i;    }  }  return -1;}  }
class C{  public void initOptions(){  for (  JCheckBox box : associations.keySet())   box.setSelected(associations.get(box).isEnabled());  DialogOption choice=DialogOption.parseInt(QuestionsHandler.GRAB_ASSOCIATIONS.getValue());switch (choice) {case YES:    always.setSelected(true);  break;case NO:never.setSelected(true);break;default :ask.setSelected(true);}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.964 -0400",hash_original_method="6C20BFD0E455B7843308DBD9944301A2",hash_generated_method="E010A6AB47E14A97CFDE9B6480119C19") public void forceTermination(){  final Phaser root=this.root;  long s;  while ((s=root.state) >= 0) {    if (UNSAFE.compareAndSwapLong(root,stateOffset,s,s | TERMINATION_BIT)) {      releaseWaiters(0);      releaseWaiters(1);      return;    }  }}  }
class C{  public void ruleR3(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node B : nodes) {    List<Node> intoBArrows=graph.getNodesInTo(B,Endpoint.ARROW);    List<Node> intoBCircles=graph.getNodesInTo(B,Endpoint.CIRCLE);    for (    Node D : intoBCircles) {      if (intoBArrows.size() < 2) {        continue;      }      ChoiceGenerator gen=new ChoiceGenerator(intoBArrows.size(),2);      int[] choice;      while ((choice=gen.next()) != null) {        Node A=intoBArrows.get(choice[0]);        Node C=intoBArrows.get(choice[1]);        if (graph.isAdjacentTo(A,C)) {          continue;        }        if (!graph.isAdjacentTo(A,D) || !graph.isAdjacentTo(C,D)) {          continue;        }        if (graph.getEndpoint(A,D) != Endpoint.CIRCLE) {          continue;        }        if (graph.getEndpoint(C,D) != Endpoint.CIRCLE) {          continue;        }        if (!isArrowpointAllowed(D,B,graph)) {          continue;        }        graph.setEndpoint(D,B,Endpoint.ARROW);        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Double triangle",graph.getEdge(D,B)));        System.out.println(SearchLogUtils.edgeOrientedMsg("Double triangle",graph.getEdge(D,B)));        changeFlag=true;      }    }  }}  }
class C{  public TomcatManagerException(String message){  super(message);}  }
class C{  public void removeField(CtField f) throws NotFoundException {  checkModify();}  }
class C{  private TreeElement<SourceMethodNode,SourceMethodNode> initializeCallerHierarchy(SourceMethodNode methodNode,Set<SourceMethodNode> processedNodes,Map<String,Map<String,Set<JsonElement>>> callerMap){  TreeElement<SourceMethodNode,SourceMethodNode> element=new TreeElement<SourceMethodNode,SourceMethodNode>(methodNode.toString(),methodNode,SourceMethodNode.class);  getTreeElementMap().put(methodNode,element);  if (!processedNodes.contains(methodNode)) {    processedNodes.add(methodNode);    Map<String,Set<JsonElement>> callers=callerMap.get(methodNode.signature);    if (callers != null) {      for (      String callerSig : callers.keySet()) {        SourceMethodNode callerNode=SourceMethodNode.get(callerSig);        TreeElement<SourceMethodNode,SourceMethodNode> caller=initializeCallerHierarchy(callerNode,processedNodes,callerMap);        element.addChild(caller);      }    }  }  return element;}  }
class C{  public final void trace(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {    log(SimpleLog.LOG_LEVEL_TRACE,message,t);  }}  }
class C{  public static Map<String,Object> prepareNotification(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  String templateName=(String)context.get("templateName");  Map<String,Object> templateData=UtilGenerics.checkMap(context.get("templateData"));  String webSiteId=(String)context.get("webSiteId");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=null;  if (templateData == null) {    templateData=new LinkedHashMap<String,Object>();  }  try {    setBaseUrl(delegator,webSiteId,templateData);    URL templateUrl=FlexibleLocation.resolveLocation(templateName);    if (templateUrl == null) {      Debug.logError("Problem getting the template URL: " + templateName + " not found",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonNotifyEmailProblemFindingTemplate",locale));    }    Writer writer=new StringWriter();    FreeMarkerWorker.renderTemplate(templateUrl.toExternalForm(),templateData,writer);    String notificationBody=writer.toString();    result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"CommonNotifyEmailMessageBodyGeneratedSuccessfully",locale));    result.put("body",notificationBody);  } catch (  IOException ie) {    Debug.logError(ie,"Problems reading template",module);    result=ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonNotifyEmailProblemReadingTemplate",locale));  }catch (  TemplateException te) {    Debug.logError(te,"Problems processing template",module);    result=ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonNotifyEmailProblemProcessingTemplate",locale));  }  return result;}  }
class C{  public void reset(EvolutionState state,int thread){  FloatVectorSpecies s=(FloatVectorSpecies)species;  MersenneTwisterFast random=state.random[thread];  for (int x=0; x < genome.length; x++) {    int type=s.mutationType(x);    if (type == FloatVectorSpecies.C_INTEGER_RESET_MUTATION || type == FloatVectorSpecies.C_INTEGER_RANDOM_WALK_MUTATION) {      long minGene=(long)Math.floor(s.minGene(x));      long maxGene=(long)Math.floor(s.maxGene(x));      genome[x]=randomValueFromClosedInterval(minGene,maxGene,random);    } else {      genome[x]=(s.minGene(x) + random.nextDouble(true,true) * (s.maxGene(x) - s.minGene(x)));    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tOutput additional statistics.","additional-stats",0,"-additional-stats"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  private boolean checkCurrentKeyAge() throws NumberFormatException {  long currentTokenKeyTS=Long.parseLong(_cachedTokenKeysBundle.getCurrentKeyEntry());  long now=System.currentTimeMillis();  long diff=now - currentTokenKeyTS;  if (diff >= _keyRotationIntervalInMsecs) {    return false;  }  return true;}  }
class C{  public SnapshotWriter writeObject(Object object){  serializer.writeObject(object,buffer);  return this;}  }
class C{  public long minorIndex(){  return minorIndex;}  }
class C{  @Override public String generateLabel(XYDataset dataset,int series,int item){  return generateLabelString(dataset,series,item);}  }
class C{  @Override public void tupleNotMatched(Map<K,V> tuple){  if (except.isConnected()) {    except.emit(cloneTuple(tuple));  }}  }
class C{  private JCTree matchAnnoToTree(Attribute.Compound findme,List<Attribute.Compound> annos,List<JCAnnotation> trees){  for (  Attribute.Compound anno : annos) {    for (    JCAnnotation tree : trees) {      JCTree match=matchAnnoToTree(findme,anno,tree);      if (match != null)       return match;    }  }  return null;}  }
class C{  public StackTraceElement(String declaringClass,String methodName,String fileName,int lineNumber){  this.declaringClass=Objects.requireNonNull(declaringClass,"Declaring class is null");  this.methodName=Objects.requireNonNull(methodName,"Method name is null");  this.fileName=fileName;  this.lineNumber=lineNumber;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private Set<Event> createAllEvents(Map<EventDefinition,EventData> eventDataMap){  Set<Event> allEvents=new HashSet<>();  for (  Map.Entry<EventDefinition,EventData> currentEventDefinitionAndData : eventDataMap.entrySet()) {    final Event currentEvent=eventPersistenceService.convertEventDefinitionToEvent(currentEventDefinitionAndData.getKey());    if (currentEventDefinitionAndData.getValue() != null) {      currentEvent.setEventData(currentEventDefinitionAndData.getValue().getData());      currentEvent.setEventSource(currentEventDefinitionAndData.getValue().getEventSource());      currentEvent.setStatus(Event.EventStatus.triggered);    }    allEvents.add(currentEvent);  }  return allEvents;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static DoubleMatrix2D equals(DoubleMatrix2D A,DoubleMatrix2D B){  return A.assign(B,F.equals);}  }
class C{  public <T>T withFeature(final Feature feature,final Supplier<T> isSet,final Supplier<T> isNotSet){  return hasFeature(feature) ? isSet.get() : isNotSet.get();}  }
class C{  public static PropertyManager newInstance(String propertyFile){  Properties props=new Properties();  try {    props.load(new BufferedInputStream(new FileInputStream(new File(propertyFile))));  } catch (  Exception e) {    throw new IllegalStateException(e.toString());  }  return new PropertyManager(props);}  }
class C{  public void animateText(Integer duration){  setDuration(duration);  animateText(getStartValue(),getEndValue());}  }
class C{  public boolean execute() throws SQLException {  return executeInternal();}  }
class C{  private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f){  int s=--size;  RunnableScheduledFuture<?> x=queue[s];  queue[s]=null;  if (s != 0)   siftDown(0,x);  setIndex(f,-1);  return f;}  }
class C{  private boolean isFirstTimeSeen(Statement result,IRI patternPredicate,Value patternObject,Resource... patternContext){  Resource resultSubject=result.getSubject();  IRI resultPredicate=result.getPredicate();  Value resultObject=result.getObject();  boolean firstTimeSeen;  if (1 == patternContext.length) {    Resource ctx=patternContext[0];    firstTimeSeen=!(ctx.equals(resultSubject) || ctx.equals(resultPredicate) || ctx.equals(resultObject));  } else   if (null != patternObject) {    firstTimeSeen=!(resultObject.equals(resultSubject) || resultObject.equals(resultPredicate));  } else   if (null != patternPredicate) {    firstTimeSeen=!(resultPredicate.equals(resultSubject));  } else {    firstTimeSeen=true;  }  return firstTimeSeen;}  }
class C{  public void onIndexChanged(WebHistoryItem item,int index){}  }
class C{  private void limpar(){  Campo.limpar(txtFormacao,txtGrupo);  Campo.limpar(txtDescricao);}  }
class C{  protected void init(Visualization vis,String group,Schema schema){  setVisualization(vis);  setGroup(group);  addColumns(schema);  if (canGetBoolean(VisualItem.VISIBLE)) {    index(VisualItem.VISIBLE);  }  if (canGetBoolean(VisualItem.STARTVISIBLE)) {    index(VisualItem.STARTVISIBLE);  }  if (canGetBoolean(VisualItem.VALIDATED)) {    index(VisualItem.VALIDATED);  }}  }
class C{  public void addReorganizeEventListener(Executor executor,WalletReorganizeEventListener listener){  reorganizeListeners.add(new ListenerRegistration<WalletReorganizeEventListener>(listener,executor));}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double gridRes=0;  double currentVal=0;  double maxDist=0;  double lineSlope=0;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double oldDist=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double totalElevation=0;  double numElevations=0;  boolean useMaxDist=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Double.parseDouble(args[i]);      if (azimuth > 360 || azimuth < 0) {        azimuth=0.1;      }      if (azimuth == 0) {        azimuth=0.1;      }      if (azimuth == 180) {        azimuth=179.9;      }      if (azimuth == 360) {        azimuth=359.9;      }      if (azimuth < 180) {        lineSlope=Math.tan(Math.toRadians(90 - azimuth));      } else {        lineSlope=Math.tan(Math.toRadians(270 - azimuth));      }    } else     if (i == 3) {      if (!args[i].toLowerCase().equals("not specified")) {        maxDist=Double.parseDouble(args[i]);        useMaxDist=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          totalElevation=0;          numElevations=0;          yIntercept=-row - lineSlope * col;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            if (useMaxDist) {              deltaX=(x - col) * gridRes;              deltaY=(y - row) * gridRes;              dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);              if (dist > maxDist) {                flag=false;                break;              }            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            if (z1 != noData && z2 != noData) {              z=z1 + (y - y1) * (z2 - z1);              totalElevation+=z;              numElevations++;            }          } while (flag);          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            if (useMaxDist) {              deltaX=(x - col) * gridRes;              deltaY=(-y - row) * gridRes;              dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);              if (dist > maxDist) {                flag=false;                break;              }            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            if (z1 != noData && z2 != noData) {              z=z1 + (x - x1) * (z2 - z1);              totalElevation+=z;              numElevations++;            }          } while (flag);          if (numElevations > 0) {            z=totalElevation / numElevations - currentVal;            output.setValue(row,col,z);          } else {            output.setValue(row,col,0);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void createFirstAccount(){  AccountManager am=AccountManager.get(getApplicationContext());  am.addAccount(MainApp.getAccountType(),null,null,null,this,new AccountCreationCallback(),null);}  }
class C{  public static void errorLogger(String message){  message="<li><b><font color='#6600CC'>" + message + "</font></b></li>";  log(message,false,false);}  }
class C{  public static void divideRowBy(double[][] matrix,int aRow,int fromCol,double value){  int cols=matrix[0].length;  double[] r=matrix[aRow];  for (int col=fromCol; col < cols; col++) {    r[col]/=value;  }}  }
class C{  public CurvedLiner(){  this(20);}  }
class C{  public static QueryStorageFileSystems parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStorageFileSystems object=new QueryStorageFileSystems();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStorageFileSystems".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStorageFileSystems)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","fsUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","fsUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setFsUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private static void ensureState(Map<Integer,Map<State,Set<GraphTransition>>> transitions,State state,int numRows){  for (int row=0; row <= numRows; row++) {    if (!transitions.containsKey(row))     transitions.put(row,new HashMap<State,Set<GraphTransition>>());    if (!transitions.get(row).containsKey(state))     transitions.get(row).put(state,new HashSet<GraphTransition>());  }}  }
class C{  public int addRelation(Instances value){  if (!isRelationValued()) {    return -1;  }  if (!((RelationalAttributeInfo)m_AttributeInfo).m_Header.equalHeaders(value)) {    throw new IllegalArgumentException("Incompatible value for " + "relation-valued attribute.\n" + ((RelationalAttributeInfo)m_AttributeInfo).m_Header.equalHeadersMsg(value));  }  Integer index=((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.get(value);  if (index != null) {    return index.intValue();  } else {    int intIndex=((NominalAttributeInfo)m_AttributeInfo).m_Values.size();    ((NominalAttributeInfo)m_AttributeInfo).m_Values.add(value);    ((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.put(value,new Integer(intIndex));    return intIndex;  }}  }
class C{  public Property modifyDemand(final PropertyImpl propertyModel,final PropertyImpl oldProperty) throws TaxCalculatorExeption {  Date propCompletionDate=null;  if (!propertyModel.getPropertyDetail().getPropertyTypeMaster().getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND))   propCompletionDate=getLowestDtOfCompFloorWise(propertyModel.getPropertyDetail().getFloorDetails()); else   propCompletionDate=propertyModel.getPropertyDetail().getDateOfCompletion();  final PropertyImpl newProperty=(PropertyImpl)createDemand(propertyModel,propCompletionDate);  Property modProperty=null;  if (oldProperty == null)   LOGGER.info("modifyBasicProp, Could not get the previous property. DCB for arrears will be incorrect"); else {    modProperty=createDemandForModify(oldProperty,newProperty,propCompletionDate);    modProperty=createArrearsDemand(oldProperty,propCompletionDate,newProperty);  }  Map<Installment,Set<EgDemandDetails>> demandDetailsSetByInstallment=null;  List<Installment> installments=null;  final Set<EgDemandDetails> oldEgDemandDetailsSet=getOldDemandDetails(oldProperty,newProperty);  demandDetailsSetByInstallment=getEgDemandDetailsSetByInstallment(oldEgDemandDetailsSet);  installments=new ArrayList<Installment>(demandDetailsSetByInstallment.keySet());  Collections.sort(installments);  for (  final Installment inst : installments) {    final Map<String,BigDecimal> dmdRsnAmt=new LinkedHashMap<String,BigDecimal>();    for (    final String rsn : DEMAND_RSNS_LIST) {      final EgDemandDetails newDmndDtls=getEgDemandDetailsForReason(demandDetailsSetByInstallment.get(inst),rsn);      if (newDmndDtls != null && newDmndDtls.getAmtCollected() != null)       if (newDmndDtls.getAmtCollected().compareTo(BigDecimal.ZERO) > 0)       dmdRsnAmt.put(newDmndDtls.getEgDemandReason().getEgDemandReasonMaster().getCode(),newDmndDtls.getAmtCollected());    }    getExcessCollAmtMap().put(inst,dmdRsnAmt);  }  final Ptdemand currentDemand=getCurrrentDemand(modProperty);  demandDetailsSetByInstallment=getEgDemandDetailsSetByInstallment(currentDemand.getEgDemandDetails());  installments=new ArrayList<Installment>(demandDetailsSetByInstallment.keySet());  Collections.sort(installments);  for (  final Installment inst : installments) {    final Map<String,BigDecimal> dmdRsnAmt=new LinkedHashMap<String,BigDecimal>();    for (    final String rsn : DEMAND_RSNS_LIST) {      final EgDemandDetails newDmndDtls=getEgDemandDetailsForReason(demandDetailsSetByInstallment.get(inst),rsn);      if (newDmndDtls != null && newDmndDtls.getAmtCollected() != null) {        final BigDecimal extraCollAmt=newDmndDtls.getAmtCollected().subtract(newDmndDtls.getAmount());        if (extraCollAmt.compareTo(BigDecimal.ZERO) > 0) {          dmdRsnAmt.put(newDmndDtls.getEgDemandReason().getEgDemandReasonMaster().getCode(),extraCollAmt);          newDmndDtls.setAmtCollected(newDmndDtls.getAmtCollected().subtract(extraCollAmt));          newDmndDtls.setModifiedDate(new Date());        }      }    }    getExcessCollAmtMap().put(inst,dmdRsnAmt);  }  LOGGER.info("Excess Collection - " + getExcessCollAmtMap());  adjustExcessCollectionAmount(installments,demandDetailsSetByInstallment,currentDemand);  return modProperty;}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public static DateTimeFormatter weekyearWeek(){  if (ww == null) {    ww=new DateTimeFormatterBuilder().append(weekyearElement()).append(weekElement()).toFormatter();  }  return ww;}  }
class C{  public DimensionExpressionScope(Universe universe,Domain domain,Space target) throws ScopeException {  super(universe,domain,target);}  }
class C{  public static boolean isValueLinkCard(String stPassed){  if (isEmpty(stPassed))   return defaultEmptyOK;  String st=stripCharsInBag(stPassed,creditCardDelimiters);  if (st.length() == 16 && (st.startsWith("7") || st.startsWith("6"))) {    return true;  }  return false;}  }
class C{  public int indexOf(String string){  checkWidget();  if (string == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  return Arrays.asList(getStringsFromTable()).indexOf(string);}  }
class C{  public boolean visit(SuperFieldAccess node){  return true;}  }
class C{  public void adjustBackground(boolean correct){  if (correct) {    StateListDrawable drawable=(StateListDrawable)mToggleButton.getBackground();    ((GradientDrawable)drawable.getCurrent()).setColor(ContextCompat.getColor(itemView.getContext(),R.color.buttonBackgroundRight));  } else {    StateListDrawable drawable=(StateListDrawable)mToggleButton.getBackground();    ((GradientDrawable)drawable.getCurrent()).setColor(ContextCompat.getColor(itemView.getContext(),R.color.buttonBackground));  }}  }
class C{  public TreeMap<K,V> mapValue(K key,Function<? super V,? extends V> function){  return apply(key).map(null).getOrElse(this);}  }
class C{  public static String asJson(Object object) throws JsonProcessingException {  return MAPPER.writeValueAsString(object);}  }
class C{  @Override public boolean hasCustomName(){  return lockableContainer.hasCustomName();}  }
class C{  public static Dog maxDog(Dog d1,Dog d2){  if (d1.size >= d2.size)   return d1;  return d2;}  }
class C{  public ComputeUserUndeclaredException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public Builder retryTimes(int retryTimes){  this.innerZkRetryTimes=retryTimes;  return this;}  }
class C{  public Array(int capacity){  this(true,capacity);}  }
class C{  protected String uniqueCacheName(){  StringBuilder sb=new StringBuilder();  sb.append(this.getClass().getName());  sb.append("/");  sb.append(nextUniqueId++);  return sb.toString();}  }
class C{  public void removeLayoutComponent(Component comp){  removeConstraints(comp);}  }
class C{  public void createRPClassesWithoutBaking(){  if (inited) {    return;  }  inited=true;  if (!RPClass.hasRPClass("entity")) {    Entity.generateRPClass();  }  if (!RPClass.hasRPClass("active_entity")) {    ActiveEntity.generateRPClass();  }  if (!RPClass.hasRPClass("area")) {    AreaEntity.generateRPClass();  }  if (!RPClass.hasRPClass("blood")) {    Blood.generateRPClass();  }  if (!RPClass.hasRPClass("chest")) {    Chest.generateRPClass();  }  if (!RPClass.hasRPClass("corpse")) {    Corpse.generateRPClass();  }  if (!RPClass.hasRPClass("door")) {    Door.generateRPClass();  }  if (!RPClass.hasRPClass("expiration_tracker")) {    ExpirationTracker.generateRPClass();  }  if (!RPClass.hasRPClass("fire")) {    Fire.generateRPClass();  }  if (!RPClass.hasRPClass("block")) {    Block.generateRPClass();  }  if (!RPClass.hasRPClass("blocktarget")) {    BlockTarget.generateRPClass();  }  if (!RPClass.hasRPClass("fish_source")) {    FishSource.generateRPClass();  }  if (!RPClass.hasRPClass("game_board")) {    GameBoard.generateRPClass();  }  if (!RPClass.hasRPClass("gate")) {    Gate.generateGateRPClass();  }  if (!RPClass.hasRPClass("gold_source")) {    GoldSource.generateRPClass();  }  if (!RPClass.hasRPClass("water_source")) {    WaterSpringSource.generateRPClass();  }  if (!RPClass.hasRPClass("well_source")) {    WellSource.generateRPClass();  }  if (!RPClass.hasRPClass("weather_entity")) {    WeatherEntity.generateRPClass();  }  if (!RPClass.hasRPClass("item")) {    Item.generateRPClass();  }  if (!RPClass.hasRPClass("item_information")) {    ItemInformation.generateRPClass();  }  if (!RPClass.hasRPClass("plant_grower")) {    PassiveEntityRespawnPoint.generateRPClass();  }  if (!RPClass.hasRPClass("portal")) {    Portal.generateRPClass();  }  if (!RPClass.hasRPClass("sign")) {    Sign.generateRPClass();  }  if (!RPClass.hasRPClass("spell")) {    Spell.generateRPClass();  }  if (!RPClass.hasRPClass("wallblocker")) {    WalkBlocker.generateRPClass();  }  if (!RPClass.hasRPClass("house_portal")) {    HousePortal.generateRPClass();  }  if (!RPClass.hasRPClass("useable_entity")) {    UseableEntity.generateRPClass();  }  if (!RPClass.hasRPClass("wall")) {    Wall.generateRPClass();  }  if (!RPClass.hasRPClass("rpentity")) {    RPEntity.generateRPClass();  }  if (!RPClass.hasRPClass("npc")) {    NPC.generateRPClass();  }  if (!RPClass.hasRPClass("player")) {    Player.generateRPClass();  }  if (!RPClass.hasRPClass("creature")) {    Creature.generateRPClass();  }  if (!RPClass.hasRPClass("sheep")) {    Sheep.generateRPClass();  }  if (!RPClass.hasRPClass("pet")) {    Pet.generateRPClass();  }  if (!RPClass.hasRPClass("cat")) {    Cat.generateRPClass();  }  if (!RPClass.hasRPClass("baby_dragon")) {    BabyDragon.generateRPClass();  }  if (!RPClass.hasRPClass("purple_dragon")) {    PurpleDragon.generateRPClass();  }  if (!RPClass.hasRPClass("ambient_sound_source")) {    LoopedSoundSource.generateRPClass();  }  if (!RPClass.hasRPClass("growing_entity_spawner")) {    GrowingPassiveEntityRespawnPoint.generateRPClass();  }  if (!RPClass.hasRPClass("food")) {    SheepFood.generateRPClass();  }  if (!RPClass.hasRPClass("arrest_warrant")) {    ArrestWarrant.generateRPClass();  }  if (!RPClass.hasRPClass("rented_sign")) {    RentedSign.generateRPClass();  }  if (!RPClass.hasRPClass(Market.MARKET_RPCLASS_NAME)) {    Market.generateRPClass();  }  if (!RPClass.hasRPClass(Offer.OFFER_RPCLASS_NAME)) {    Offer.generateRPClass();  }  if (!RPClass.hasRPClass(Earning.EARNING_RPCLASS_NAME)) {    Earning.generateRPClass();  }  if (!RPClass.hasRPClass(Events.ATTACK)) {    AttackEvent.generateRPClass();  }  if (!RPClass.hasRPClass("buddy_login")) {    BuddyLoginEvent.generateRPClass();  }  if (!RPClass.hasRPClass("buddy_logout")) {    BuddyLogoutEvent.generateRPClass();  }  if (!RPClass.hasRPClass("examine")) {    ExamineEvent.generateRPClass();  }  if (!RPClass.hasRPClass("healed")) {    HealedEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.IMAGE)) {    ImageEffectEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.PRIVATE_TEXT)) {    PrivateTextEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.PROGRESS_STATUS_CHANGE)) {    ProgressStatusEvent.generateRPClass();  }  if (!RPClass.hasRPClass("show_item_list")) {    ShowItemListEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.SOUND)) {    SoundEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.PUBLIC_TEXT)) {    TextEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.GROUP_CHANGE)) {    GroupChangeEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.GROUP_INVITE)) {    GroupInviteEvent.generateRPClass();  }  if (!RPClass.hasRPClass("transition_graph")) {    TransitionGraphEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.TRADE_STATE_CHANGE)) {    TradeStateChangeEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.PLAYER_LOGGED_ON)) {    PlayerLoggedOnEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.PLAYER_LOGGED_OUT)) {    PlayerLoggedOutEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.REACHED_ACHIEVEMENT)) {    ReachedAchievementEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.VIEW_CHANGE)) {    ViewChangeEvent.generateRPClass();  }  if (!RPClass.hasRPClass(Events.GLOBAL_VISUAL)) {    GlobalVisualEffectEvent.generateRPClass();  }  if (!RPClass.hasRPClass("action")) {    createActionRPClass();    createChatActionRPClass();    createCidActionRPClass();    createMoveToActionRPClass();    createTellActionRPClass();  }}  }
class C{  public final void testValidateLowercaseAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.LOWERCASE,true,allowedCharacters);  assertFalse(characterOrNumberValidator.validate("Ab 1-"));}  }
class C{  protected boolean actionNecessary(Double ratio,double thresholdSentinelRatio){  return ratio != null && ratio <= thresholdSentinelRatio;}  }
class C{  public void transform(AffineTransform at){  clip[2]=clip[0];  clip[3]=clip[7];  clip[4]=clip[6];  clip[5]=clip[1];  at.transform(clip,0,clip,0,4);  double xmin=clip[0], ymin=clip[1];  double xmax=clip[6], ymax=clip[7];  for (int i=0; i < 7; i+=2) {    if (clip[i] < xmin)     xmin=clip[i];    if (clip[i] > xmax)     xmax=clip[i];    if (clip[i + 1] < ymin)     ymin=clip[i + 1];    if (clip[i + 1] > ymax)     ymax=clip[i + 1];  }  clip[0]=xmin;  clip[1]=ymin;  clip[6]=xmax;  clip[7]=ymax;}  }
class C{  public static String center(String str,int size,String delim){  int sz=str.length();  int p=size - sz;  if (p < 1) {    return str;  }  str=leftPad(str,sz + p / 2,delim);  str=rightPad(str,size,delim);  return str;}  }
class C{  public double calculateAUC(ROCData rocData){  if (rocData.getNumberOfPoints() == 2) {    return 0.5;  }  double aucSum=0.0d;  double[] last=null;  Iterator<ROCPoint> i=rocData.iterator();  while (i.hasNext()) {    ROCPoint point=i.next();    double fpDivN=point.getFalsePositives() / rocData.getTotalNegatives();    double tpDivP=point.getTruePositives() / rocData.getTotalPositives();    if (last != null) {      double width=fpDivN - last[0];      double leftHeight=last[1];      double rightHeight=tpDivP;      aucSum+=leftHeight * width + (rightHeight - leftHeight) * width / 2;    }    last=new double[]{fpDivN,tpDivP};  }  return aucSum;}  }
class C{  public boolean forEachDescending(TDoubleProcedure procedure){  for (int i=_pos; i-- > 0; ) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  private Element createSPEntityDescriptor(RelyingParty rp) throws Exception {  Element entEle=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);  entEle.setAttribute(SAMLNames.ENTID,rp.getUrl());  Element spSSO=createSPSSODescriptor(rp);  entEle.appendChild(spSSO);  Element orgEle=createOrganization(rp.getName(),rp.getName(),rp.getUrl(),SAMLNames.ENGLISH);  entEle.appendChild(orgEle);  return entEle;}  }
class C{  protected boolean readNumOutputBits(){  try {    outputBits=Integer.parseInt(numOutputField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error13"));    statusText1.setVisible(true);    outputBits=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (outputBits <= 0) {    statusText1.setText(rb.getString("Error14"));    statusText1.setVisible(true);    outputBits=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (outputBits > 8000) {    statusText1.setText(rb.getString("Error15"));    statusText1.setVisible(true);    outputBits=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  return true;}  }
class C{  public RColumn(Properties ctx,String columnName,int displayType,String sql,int AD_Reference_Value_ID,String refColumnName){  m_columnName=columnName;  m_colHeader=Msg.translate(ctx,columnName);  if (refColumnName != null)   m_colHeader=Msg.translate(ctx,refColumnName);  m_displayType=displayType;  m_colSQL=sql;  if (m_colSQL == null || m_colSQL.length() == 0)   m_colSQL=columnName;  if (DisplayType.isText(displayType))   m_colClass=String.class; else   if (displayType == DisplayType.Amount) {    m_colClass=BigDecimal.class;    m_colSize=70;  } else   if (displayType == DisplayType.YesNo)   m_colClass=Boolean.class; else   if (DisplayType.isDate(displayType))   m_colClass=Timestamp.class; else   if (displayType == DisplayType.Quantity || displayType == DisplayType.Number || displayType == DisplayType.CostPrice) {    m_colClass=Double.class;    m_colSize=70;  } else   if (displayType == DisplayType.Integer)   m_colClass=Integer.class; else   if (displayType == DisplayType.List) {    Language language=Language.getLanguage(Env.getAD_Language(ctx));    m_colSQL="(" + MLookupFactory.getLookup_ListEmbed(language,AD_Reference_Value_ID,columnName) + ")";    m_displaySQL=m_colSQL;    m_colClass=String.class;    m_isIDcol=false;  } else   if (displayType == DisplayType.ID) {    m_colClass=Integer.class;  } else {    m_colClass=String.class;    Language language=Language.getLanguage(Env.getAD_Language(ctx));    if (columnName.equals("Account_ID") || columnName.equals("User1_ID") || columnName.equals("User2_ID")) {      m_displaySQL="(" + MLookupFactory.getLookup_TableDirEmbed(language,"C_ElementValue_ID",RModel.TABLE_ALIAS,columnName) + ")";      m_colSQL+="," + m_displaySQL;      m_isIDcol=true;    } else     if (columnName.startsWith("UserElement") && refColumnName != null) {      m_displaySQL="(" + MLookupFactory.getLookup_TableDirEmbed(language,refColumnName,RModel.TABLE_ALIAS,columnName) + ")";      m_colSQL+="," + m_displaySQL;      m_isIDcol=true;    } else     if (columnName.equals("C_LocFrom_ID") || columnName.equals("C_LocTo_ID")) {      m_displaySQL="(" + MLookupFactory.getLookup_TableDirEmbed(language,"C_Location_ID",RModel.TABLE_ALIAS,columnName) + ")";      m_colSQL+="," + m_displaySQL;      m_isIDcol=true;    } else     if (columnName.equals("AD_OrgTrx_ID")) {      m_displaySQL="(" + MLookupFactory.getLookup_TableDirEmbed(language,"AD_Org_ID",RModel.TABLE_ALIAS,columnName) + ")";      m_colSQL+="," + m_displaySQL;      m_isIDcol=true;    } else     if (displayType == DisplayType.TableDir) {      m_displaySQL="(" + MLookupFactory.getLookup_TableDirEmbed(language,columnName,RModel.TABLE_ALIAS) + ")";      m_colSQL+="," + m_displaySQL;      m_isIDcol=true;    }  }}  }
class C{  static public void assertEquals(String message,byte expected,byte actual){  assertEquals(message,new Byte(expected),new Byte(actual));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_DECLARATION__DEFINED_VARIABLE:    return definedVariable != null;}return super.eIsSet(featureID);}  }
class C{  public static int displayWidth(char ch){  if (ch <= '\u04f9' || ch == '\u05be' || (ch >= '\u05d0' && ch <= '\u05ea') || ch == '\u05F3' || ch == '\u05f4' || (ch >= '\u0e00' && ch <= '\u0e7f') || (ch >= '\u1e00' && ch <= '\u20af') || (ch >= '\u2100' && ch <= '\u213a') || (ch >= '\uff61' && ch <= '\uffdc')) {    return 1;  }  return 2;}  }
class C{  public TermsBuilder include(long[] terms){  if (includePattern != null) {    throw new IllegalArgumentException("include clause must be an array of exact values or a regex, not both");  }  this.includeTerms=longsArrToStringArr(terms);  return this;}  }
class C{  public synchronized void startProduction(ImageConsumer ic){  addConsumer(ic);  Thread thread=new Thread(this,"RenderableImageProducer Thread");  thread.start();}  }
class C{  public static <V,E>SynchronizedTree<V,E> synchronizedTree(Tree<V,E> tree){  return new SynchronizedTree<V,E>(tree);}  }
class C{  public void dispose(){  m_project.removeListener(m_internalListener);}  }
class C{  public static boolean canStreamMedia(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  if (info == null || !info.isConnected())   return false;switch (info.getType()) {case ConnectivityManager.TYPE_WIFI:case ConnectivityManager.TYPE_BLUETOOTH:case ConnectivityManager.TYPE_ETHERNET:    return true;default :  return !MainApplication.getEnvironment(context).getUserPrefs().isDownloadOverWifiOnly() || NetworkUtil.isOnZeroRatedNetwork(context,config);}}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.119 -0500",hash_original_method="DF00243144DD556AB3E9A0ABE3AEC78F",hash_generated_method="618055F7154B638264B318EE88C0D9E0") protected final boolean compareAndSetState(int expect,int update){  return unsafe.compareAndSwapInt(this,stateOffset,expect,update);}  }
class C{  public static int hashInsertOnly(final long[] hashTable,final int lgArrLongs,final long hash){  final int arrayMask=(1 << lgArrLongs) - 1;  final int stride=getStride(hash,lgArrLongs);  int curProbe=(int)(hash & arrayMask);  while (hashTable[curProbe] != 0) {    curProbe=(curProbe + stride) & arrayMask;  }  hashTable[curProbe]=hash;  return curProbe;}  }
class C{  @Override public boolean equals(Object other){  return other instanceof LaunchPhase && Objects.equals(phase,((LaunchPhase)other).phase) && Objects.equals(subphase,((LaunchPhase)other).subphase);}  }
class C{  public MLet(URL[] urls,ClassLoader parent){  this(urls,parent,true);}  }
class C{  public AccountHeaderBuilder withActivity(@NonNull Activity activity){  this.mActivity=activity;  return this;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof DocumentName);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.FUNCTION;}  }
class C{  public void test_valueRangeSerialized() throws IOException {  byte[] expected={(byte)172,(byte)237,0,5,115,114,0,29,106,97,118,97,46,116,105,109,101,46,116,101,109,112,111,114,97,108,46,86,97,108,117,101,82,97,110,103,101,(byte)154,113,(byte)169,86,(byte)242,(byte)205,90,(byte)184,2,0,4,74,0,10,109,97,120,76,97,114,103,101,115,116,74,0,11,109,97,120,83,109,97,108,108,101,115,116,74,0,10,109,105,110,76,97,114,103,101,115,116,74,0,11,109,105,110,83,109,97,108,108,101,115,116,120,112,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,10};  ValueRange range=ValueRange.of(10,20,30,40);  try (ByteArrayOutputStream baos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(baos)){    oos.writeObject(range);    byte[] actual=baos.toByteArray();    assertEquals(actual,expected,"Serialized bytes incorrect");  } }  }
class C{  public void onCombine() throws IOException {}  }
class C{  protected void sequence_RegularExpressionFlags(ISerializationContext context,RegularExpressionFlags semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static int hashByteArray(int seed,byte... byteArray){  return hash(seed,byteArray);}  }
class C{  public CompiereThemeBlueMetal(){  setDefault();  s_theme=this;  s_name=NAME;}  }
class C{  public static CRC checkAndCorrect(BinaryMessage message){  int calculated=0;  for (int i=message.nextSetBit(MESSAGE_START); i >= MESSAGE_START && i < CRC_START; i=message.nextSetBit(i + 1)) {    calculated^=CHECKSUMS[i - MESSAGE_START];  }  int checksum=getChecksum(message);  if (calculated == checksum) {    return CRC.PASSED;  } else {    int[] errors=findBitErrors(calculated ^ checksum);    if (errors != null) {      for (      int error : errors) {        message.flip(MESSAGE_START + error);      }      return CRC.CORRECTED;    }  }  return CRC.FAILED_CRC;}  }
class C{  private void checkForVdcRolesUsingDomains(StringSet domains){  VirtualDataCenter localVdc=VdcUtil.getLocalVdc();  List<RoleAssignmentEntry> vdcRoles=_permissionsHelper.convertToRoleAssignments(localVdc.getRoleAssignments(),true);  List<String> matchingUsers=checkRolesUsingDomains(vdcRoles,domains);  if (!matchingUsers.isEmpty()) {    throw APIException.badRequests.cannotDeleteAuthProviderWithVdcRoles(matchingUsers.size(),matchingUsers);  }}  }
class C{  @SuppressWarnings("unchecked") public MemberMatrix(){  memberMatrix=new MemberList[SOURCE_COUNT_WITHOUT_CONSUMED][MEMBER_TYPE_COUNT];  consumed=new HashSet<>(2);  nonImplemented=new MemberList<>(2);}  }
class C{  public T caseLiteral(Literal object){  return null;}  }
class C{  @DSComment("Event associated with motion") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.780 -0500",hash_original_method="187F7D3A42078A42C8212C3EFE0E8B16",hash_generated_method="DDB1558C76E1712D2A8FA62A70F35900") public final void recycle(){  if (TRACK_RECYCLED_LOCATION) {    if (mRecycledLocation != null) {      throw new RuntimeException(toString() + " recycled twice!",mRecycledLocation);    }    mRecycledLocation=new RuntimeException("Last recycled here");  } else {    if (mRecycled) {      throw new RuntimeException(toString() + " recycled twice!");    }    mRecycled=true;  }synchronized (gRecyclerLock) {    if (gRecyclerUsed < MAX_RECYCLED) {      gRecyclerUsed++;      mNext=gRecyclerTop;      gRecyclerTop=this;    }  }}  }
class C{  public void testGetSystemId() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String publicId;  String systemId;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root","PUB","SYS");  publicId=docType.getPublicId();  systemId=docType.getSystemId();  assertEquals("documenttypepublicid01","PUB",publicId);  assertEquals("documenttypesystemid01","SYS",systemId);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.259 -0500",hash_original_method="77CDCB3AD1301C069F2E513DC8F21CC0",hash_generated_method="F3E389E8A04049A10986837EC4E60A62") public BERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  private List<Volume> createRpVolumes(String volumeName,int numTargets,ProtectionSet protectionSet){  List<Volume> volumes=new ArrayList<Volume>();  String rsetName="RSet-" + volumeName;  Volume sourceVolume=new Volume();  URI sourceVolumeURI=URIUtil.createId(Volume.class);  rpTestVolumeURIs.add(sourceVolumeURI);  volumes.add(sourceVolume);  sourceVolume.setId(sourceVolumeURI);  sourceVolume.setLabel(volumeName);  sourceVolume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());  sourceVolume.setRSetName(rsetName);  sourceVolume.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));  _dbClient.createObject(sourceVolume);  Volume sourceVolumeJournal=new Volume();  URI sourceVolumeJournalURI=URIUtil.createId(Volume.class);  rpTestVolumeURIs.add(sourceVolumeJournalURI);  volumes.add(sourceVolumeJournal);  sourceVolumeJournal.setId(sourceVolumeJournalURI);  sourceVolumeJournal.setLabel(volumeName + RP_SRC_JOURNAL_APPEND);  sourceVolumeJournal.setPersonality(Volume.PersonalityTypes.METADATA.toString());  sourceVolumeJournal.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));  _dbClient.createObject(sourceVolumeJournal);  for (int i=1; i <= numTargets; i++) {    Volume sourceVolumeTarget=new Volume();    URI sourceVolumeTargetURI=URIUtil.createId(Volume.class);    rpTestVolumeURIs.add(sourceVolumeTargetURI);    volumes.add(sourceVolumeTarget);    sourceVolumeTarget.setId(sourceVolumeTargetURI);    sourceVolumeTarget.setLabel(volumeName + RP_TGT_APPEND + "vArray"+ i);    sourceVolumeTarget.setPersonality(Volume.PersonalityTypes.TARGET.toString());    sourceVolumeTarget.setRSetName(rsetName);    sourceVolumeTarget.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));    _dbClient.createObject(sourceVolumeTarget);    Volume sourceVolumeTargetJournal=new Volume();    URI sourceVolumeTargetJournalURI=URIUtil.createId(Volume.class);    rpTestVolumeURIs.add(sourceVolumeTargetJournalURI);    volumes.add(sourceVolumeTargetJournal);    sourceVolumeTargetJournal.setId(sourceVolumeTargetJournalURI);    sourceVolumeTargetJournal.setLabel(volumeName + RP_TGT_JOURNAL_APPEND + "vArray"+ i);    sourceVolumeTargetJournal.setPersonality(Volume.PersonalityTypes.METADATA.toString());    sourceVolumeTargetJournal.setProtectionSet(new NamedURI(protectionSet.getId(),protectionSet.getLabel()));    _dbClient.createObject(sourceVolumeTargetJournal);  }  return volumes;}  }
class C{  public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + DATA_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=(byte)((value >> 24) & 0xff);  binValue[5]=(byte)((value >> 16) & 0xff);  binValue[6]=(byte)((value >> 8) & 0xff);  binValue[7]=(byte)((value) & 0xff);  return binValue;}  }
class C{  public static void flush(OutputStream sckOutputStream) throws IOException {  try {    sckOutputStream.flush();  } catch (  IOException e) {    MeshLog.e(DEBUG,USE_LOG4J,CLASS,"flush() IOException, throw IOException");    throw e;  }}  }
class C{  public <VV>DataStream<Vertex<K,VV>> aggregate(FlatMapFunction<Edge<K,EV>,Vertex<K,VV>> edgeMapper,MapFunction<Vertex<K,VV>,Vertex<K,VV>> vertexMapper){  return this.edges.flatMap(edgeMapper).keyBy(0).map(vertexMapper);}  }
class C{  public StreamConsumer(InputStream stream){  in=new BufferedInputStream(stream);  thread.start();}  }
class C{  public final boolean isEnabled(JsonParser.Feature f){  return (_parserFeatures & f.getMask()) != 0;}  }
class C{  public HttpUrl url(){  return url;}  }
class C{  @Override public void validate(){}  }
class C{  @Override public long contentLength() throws IOException {  InputStream is=this.getInputStream();  Assert.state(is != null,"resource input stream must not be null");  try {    long size=0;    byte[] buf=new byte[255];    int read;    while ((read=is.read(buf)) != -1) {      size+=read;    }    return size;  }  finally {    try {      is.close();    } catch (    IOException ex) {    }  }}  }
class C{  @Get("json") public Map<String,Object> retrieve(){  return retrieveInternal(false);}  }
class C{  private void removeCardViews(){  for (int i=0; i < getChildCount(); i++) {    removeViewAt(i);    i--;  }}  }
class C{  public TFileIndex(int entryCount,DataInput in,BytesComparator comparator) throws IOException {  index=new ArrayList<TFileIndexEntry>(entryCount);  recordNumIndex=new ArrayList<Long>(entryCount);  int size=Utils.readVInt(in);  if (size > 0) {    byte[] buffer=new byte[size];    in.readFully(buffer);    DataInputStream firstKeyInputStream=new DataInputStream(new ByteArrayInputStream(buffer,0,size));    int firstKeyLength=Utils.readVInt(firstKeyInputStream);    firstKey=new ByteArray(new byte[firstKeyLength]);    firstKeyInputStream.readFully(firstKey.buffer());    for (int i=0; i < entryCount; i++) {      size=Utils.readVInt(in);      if (buffer.length < size) {        buffer=new byte[size];      }      in.readFully(buffer,0,size);      TFileIndexEntry idx=new TFileIndexEntry(new DataInputStream(new ByteArrayInputStream(buffer,0,size)));      index.add(idx);      sum+=idx.entries();      recordNumIndex.add(sum);    }  } else {    if (entryCount != 0) {      throw new RuntimeException("Internal error");    }  }  this.comparator=comparator;}  }
class C{  private void validate(EdgeWeightedGraph G){  if (G.V() < 2)   throw new IllegalArgumentException("number of vertices of G is less than 2");  for (  Edge e : G.edges()) {    if (e.weight() < 0)     throw new IllegalArgumentException("edge " + e + " has negative weight");  }}  }
class C{  public InstrumentHeader createUnsavedInstrumentHeader(InstrumentType instrumentType,String instrumentNum,Double instrumentAmount,Date instrumentDate,String statusCode,User user){  InstrumentHeader instrHdr=new InstrumentHeader();  instrHdr.setInstrumentNumber(instrumentNum);  instrHdr.setInstrumentType(instrumentType);  instrHdr.setInstrumentAmount(BigDecimal.valueOf(instrumentAmount));  instrHdr.setInstrumentDate(instrumentDate);  instrHdr.setStatusId(createEgwStatus(statusCode,CollectionConstants.MODULE_NAME_RECEIPTHEADER));  instrHdr.setCreatedDate(new Date());  instrHdr.setModifiedDate(new Date());  instrHdr.setCreatedBy(user);  instrHdr.setModifiedBy(user);  return instrHdr;}  }
class C{  private ParameterList parseParameters(List<Map<String,Object>> params,Declaration owner,List<TypeParameter> typeParameters){  ParameterList plist=new ParameterList();  if (params != null) {    for (    Map<String,Object> p : params) {      Parameter param=new Parameter();      final String paramtype=(String)p.get("$pt");      param.setHidden(p.containsKey("$hdn"));      param.setName((String)p.get(KEY_NAME));      param.setDeclaration(owner);      param.setDefaulted(p.containsKey(KEY_DEFAULT));      param.setSequenced(p.containsKey("seq"));      param.setAtLeastOne(p.containsKey("$min1"));      if (paramtype == null || "v".equals(paramtype)) {        Value _v=new Value();        param.setModel(_v);      } else       if ("f".equals(paramtype)) {        @SuppressWarnings("unchecked") List<List<Map<String,Object>>> paramLists=(List<List<Map<String,Object>>>)p.get(KEY_PARAMS);        Function _m=new Function();        param.setModel(_m);        if (paramLists == null) {          _m.addParameterList(new ParameterList());        } else {          boolean first=true;          for (          List<Map<String,Object>> subplist : paramLists) {            ParameterList _params=parseParameters(subplist,_m,typeParameters);            if (first) {              first=false;            } else {              _params.setNamedParametersSupported(false);            }            _m.addParameterList(_params);          }        }      } else {        throw new IllegalArgumentException("Unknown parameter type " + paramtype);      }      FunctionOrValue paramModel=param.getModel();      if (paramModel != null) {        paramModel.setInitializerParameter(param);        paramModel.setName(param.getName());        paramModel.setUnit(u2);        if (owner instanceof Scope) {          Scope scope=(Scope)owner;          paramModel.setContainer(scope);          paramModel.setScope(scope);        }        if (p.get(KEY_TYPE) instanceof Map) {          @SuppressWarnings("unchecked") final Map<String,Object> ktype=(Map<String,Object>)p.get(KEY_TYPE);          paramModel.setType(getTypeFromJson(ktype,owner,typeParameters));        } else {          for (          TypeParameter tp : typeParameters) {            if (tp.getName().equals(p.get(KEY_TYPE))) {              paramModel.setType(tp.getType());            }          }        }        @SuppressWarnings("unchecked") final Map<String,Object> _anns=(Map<String,Object>)p.remove(KEY_ANNOTATIONS);        setAnnotations(paramModel,(Integer)p.remove(KEY_PACKED_ANNS),_anns);      }      plist.getParameters().add(param);    }  }  return plist;}  }
class C{  public BurlapProtocolException(Throwable rootCause){  super(String.valueOf(rootCause));  this.rootCause=rootCause;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z, val, val2;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double numUpslopeFlowpaths=0;  double flowpathLengthToAdd=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits(pntr.getXYUnits());    WhiteboxRaster numInflowingNeighbours=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numInflowingNeighbours.isTemporaryFile=true;    WhiteboxRaster numUpslopeDivideCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numUpslopeDivideCells.isTemporaryFile=true;    WhiteboxRaster totalFlowpathLength=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalFlowpathLength.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          if (z > 0) {            numInflowingNeighbours.setValue(row,col,z);          } else {            numInflowingNeighbours.setValue(row,col,-1);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3:",progress);    }    updateProgress("Loop 2 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        val=numInflowingNeighbours.getValue(row,col);        if (val <= 0 && val != noData) {          flag=false;          x=col;          y=row;          do {            val=numInflowingNeighbours.getValue(y,x);            if (val <= 0 && val != noData) {              if (val == -1) {                numUpslopeDivideCells.setValue(y,x,0);                numUpslopeFlowpaths=1;              } else {                numUpslopeFlowpaths=numUpslopeDivideCells.getValue(y,x);              }              numInflowingNeighbours.setValue(y,x,noData);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength=gridLengths[c];                val2=totalFlowpathLength.getValue(y,x);                flowpathLengthToAdd=val2 + numUpslopeFlowpaths * flowLength;                x+=dX[c];                y+=dY[c];                numUpslopeDivideCells.setValue(y,x,numUpslopeDivideCells.getValue(y,x) + numUpslopeFlowpaths);                totalFlowpathLength.setValue(y,x,totalFlowpathLength.getValue(y,x) + flowpathLengthToAdd);                numInflowingNeighbours.setValue(y,x,numInflowingNeighbours.getValue(y,x) - 1);              } else {                flag=true;              }            } else {              flag=true;            }          } while (!flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3:",progress);    }    numUpslopeDivideCells.flush();    totalFlowpathLength.flush();    numInflowingNeighbours.close();    updateProgress("Loop 3 of 3:",0);    double[] data1=null;    double[] data2=null;    double[] data3=null;    for (row=0; row < rows; row++) {      data1=numUpslopeDivideCells.getRowValues(row);      data2=totalFlowpathLength.getRowValues(row);      data3=pntr.getRowValues(row);      for (col=0; col < cols; col++) {        if (data3[col] != noData) {          if (data1[col] > 0) {            val=data2[col] / data1[col];            output.setValue(row,col,val);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    numUpslopeDivideCells.close();    totalFlowpathLength.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SingleColor(Paint color){  this.color=color;}  }
class C{  public synchronized void run(){  running=true;  while (running) {    try {      Socket s=ss.accept();      acceptedConnections++;      if (acceptedConnections >= acceptLimit) {        running=false;      }      new Thread(new Worker(s),"additional worker").start();    } catch (    SocketException e) {      log(e.getMessage());      running=false;    }catch (    IOException e) {      log(e.getMessage());    }  }  log("AcceptThread terminated" + this);}  }
class C{  public void testGetNameWhenOverride(){  EAR ear=new EAR("c:/some/path/to/ear/test.ear");  ear.setName("name");  assertEquals("name",ear.getName());}  }
class C{  public void layersChanged(){  if (staticScene != null) {    garbage.add(staticScene);    staticScene.invalidateLayers();    staticScene=null;  }  if (backScene != null) {    garbage.add(backScene);    backScene=null;  }}  }
class C{  public Invitations addInvitationLink(Long user_level,String username,String message,String baseurl,String email,String subject,Long rooms_id,String conferencedomain,Boolean isPasswordProtected,String invitationpass,Integer valid,Date validFrom,Date validTo,Long createdBy,String baseUrl,Long language_id,Boolean sendMail,Date gmtTimeStart,Date gmtTimeEnd,Long appointmentId,String fromUserField){  try {    if (authLevelManagement.checkUserLevel(user_level)) {      Invitations invitation=new Invitations();      invitation.setIsPasswordProtected(isPasswordProtected);      if (isPasswordProtected) {        invitation.setInvitationpass(manageCryptStyle.getInstanceOfCrypt().createPassPhrase(invitationpass));      }      invitation.setInvitationWasUsed(false);      log.debug(baseUrl);      invitation.setBaseUrl(baseUrl);      if (valid == 1) {        invitation.setIsValidByTime(false);        invitation.setCanBeUsedOnlyOneTime(false);      } else       if (valid == 2) {        invitation.setIsValidByTime(true);        invitation.setCanBeUsedOnlyOneTime(false);        Date gmtTimeStartShifted=new Date(gmtTimeStart.getTime() - (5 * 60 * 1000));        invitation.setValidFrom(gmtTimeStartShifted);        invitation.setValidTo(gmtTimeEnd);      } else {        invitation.setIsValidByTime(false);        invitation.setCanBeUsedOnlyOneTime(true);        invitation.setInvitationWasUsed(false);      }      invitation.setDeleted("false");      Users us=usersDao.getUser(createdBy);      String hashRaw="HASH" + (System.currentTimeMillis());      invitation.setHash(MD5.do_checksum(hashRaw));      invitation.setInvitedBy(us);      invitation.setInvitedname(username);      invitation.setInvitedEMail(email);      invitation.setRoom(roommanagement.getRoomById(rooms_id));      invitation.setConferencedomain(conferencedomain);      invitation.setStarttime(new Date());      invitation.setAppointmentId(appointmentId);      invitation=em.merge(invitation);      long invitationId=invitation.getInvitations_id();      invitation.setInvitations_id(invitationId);      if (invitationId > 0) {        if (sendMail) {          this.sendInvitionLink(us.getAdresses().getEmail(),username,message,baseurl,email,subject,invitation.getHash(),validFrom,validTo,language_id,fromUserField);        }        return invitation;      }    }  } catch (  Exception err) {    log.error("addInvitationLink",err);  }  return null;}  }
class C{  public void delete() throws IOException {  cache.delete();}  }
class C{  public void changeColor(){  mChangeColor=!mChangeColor;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.446 -0500",hash_original_method="C7D1B39DFE3B0192F0BEF83FC7C40106",hash_generated_method="7A1651F101C7D29ABD74AA763DDBF0F7") public boolean equals(Object other){  if (other == null)   return false;  if (!other.getClass().equals(this.getClass()))   return false;  NameValue that=(NameValue)other;  if (this == that)   return true;  if (this.name == null && that.name != null || this.name != null && that.name == null)   return false;  if (this.name != null && that.name != null && this.name.compareToIgnoreCase(that.name) != 0)   return false;  if (this.value != null && that.value == null || this.value == null && that.value != null)   return false;  if (this.value == that.value)   return true;  if (value instanceof String) {    if (isQuotedString)     return this.value.equals(that.value);    String val=(String)this.value;    String val1=(String)that.value;    return val.compareToIgnoreCase(val1) == 0;  } else   return this.value.equals(that.value);}  }
class C{  public Wildcard createWildcard(){  WildcardImpl wildcard=new WildcardImpl();  return wildcard;}  }
class C{  public void testCompareToZeroZero(){  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=BigInteger.ZERO;  assertEquals(0,aNumber.compareTo(bNumber));}  }
class C{  private Figure readAElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  CompositeFigure g=factory.createG(a);  String href=readAttribute(elem,"xlink:href",null);  if (href == null) {    href=readAttribute(elem,"href",null);  }  String target=readAttribute(elem,"target",null);  if (DEBUG) {    System.out.println("SVGInputFormat.readAElement href=" + href);  }  for (  IXMLElement child : elem.getChildren()) {    Figure childFigure=readElement(child);    if (readAttribute(child,"visibility","visible").equals("visible") && !readAttribute(child,"display","inline").equals("none")) {      if (childFigure != null) {        g.basicAdd(childFigure);      }    }    if (childFigure != null) {      childFigure.set(LINK,href);      childFigure.set(LINK_TARGET,target);    } else {      if (DEBUG) {        System.out.println("SVGInputFormat <a> has no child figure");      }    }  }  return (g.getChildCount() == 1) ? g.getChild(0) : g;}  }
class C{  public final double correlationCoefficient() throws Exception {  return m_delegate.correlationCoefficient();}  }
class C{  public static boolean putMapNotEmptyKeyAndValue(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key) || StringUtils.isEmpty(value)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public static byte[] internalize(byte[] buf,int offset,int len){  byte[] translated=new byte[len];  for (int j=0; j < len; j++) {    byte b=buf[offset + j];    if (b == '/')     translated[j]=(byte)'.'; else     translated[j]=b;  }  return translated;}  }
class C{  public static boolean addLocator(int distributedSystemId,DistributionLocatorId locator,LocatorMembershipListener locatorListener,DistributionLocatorId sourceLocator){  ConcurrentHashMap<Integer,Set<DistributionLocatorId>> allLocatorsInfo=(ConcurrentHashMap<Integer,Set<DistributionLocatorId>>)locatorListener.getAllLocatorsInfo();  Set<DistributionLocatorId> locatorsSet=new CopyOnWriteHashSet<DistributionLocatorId>();  locatorsSet.add(locator);  Set<DistributionLocatorId> existingValue=allLocatorsInfo.putIfAbsent(distributedSystemId,locatorsSet);  if (existingValue != null) {    if (!existingValue.contains(locator)) {      existingValue.add(locator);      addServerLocator(distributedSystemId,locatorListener,locator);      locatorListener.locatorJoined(distributedSystemId,locator,sourceLocator);    } else {      return false;    }  } else {    addServerLocator(distributedSystemId,locatorListener,locator);    locatorListener.locatorJoined(distributedSystemId,locator,sourceLocator);  }  return true;}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  private ArrayList<Schedule> loadSchedules(boolean firstLoad){  try {    log("Updating Schedule: " + schedulePath);    File file=new File(schedulePath);    if (!file.exists()) {      log("ERROR: Schedule file not found");      return new ArrayList<Schedule>();    }    ArrayList<Schedule> schedules=new ArrayList<Schedule>();    BufferedReader reader=new BufferedReader(new FileReader(file));    String line=reader.readLine();    line=reader.readLine();    while (line != null) {      Schedule schedule=Schedule.parseSchedule(line,firstLoad);      if (schedule != null) {        schedules.add(schedule);      } else       if (line.trim().length() > 0) {        log("ERROR: Problem loading schedule. Entry: " + line);      }      line=reader.readLine();    }    reader.close();    return schedules;  } catch (  Exception e) {    log("ERROR: loading schedules failed: " + e.getMessage());    return new ArrayList<Schedule>();  }}  }
class C{  @Override public void buildClusterer(Instances data) throws Exception {  m_numberOfClusters=-1;  m_cobwebTree=null;  m_numberSplits=0;  m_numberMerges=0;  getCapabilities().testWithFail(data);  data=new Instances(data);  if (getSeed() >= 0) {    data.randomize(new Random(getSeed()));  }  for (int i=0; i < data.numInstances(); i++) {    updateClusterer(data.instance(i));  }  updateFinished();}  }
class C{  public boolean isSetGui(){  return this.gui != null;}  }
class C{  public void deleteOneToOneFileTransfers() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteOneToOneFileTransfers();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public boolean equals(Object a){  if (a == null) {    return false;  }  if (a instanceof CanFrame) {    CanFrame m=(CanFrame)a;    if ((_header != m.getHeader()) || (_isRtr != m.isRtr()) || (_isExtended != m.isExtended())) {      return false;    }    if (_nDataChars != m.getNumDataElements()) {      return false;    }    for (int i=0; i < _nDataChars; i++) {      if (_dataChars[i] != m.getElement(i)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public int count(){  return array.length;}  }
class C{  public static boolean isPutAllFakeThreadID(long tid){  return Bits.THREAD_ID.extract(tid) / MAX_THREAD_PER_CLIENT > 0;}  }
class C{  public Flag registerOptional(final char nameChar,final String name,final String description){  return registerOptional(nameChar,name,null,"",description,null);}  }
class C{  private void calculateSphereSize(double scale,KStarWrapper params){  int i;  double sphereSize, minprob=1.0;  double pstar;  double pstarSum=0.0;  double pstarSquareSum=0.0;  double inc;  for (i=0; i < m_NumInstances; i++) {    if (m_Distances[i] < 0) {      continue;    } else {      pstar=PStar(m_Distances[i],scale);      if (minprob > pstar) {        minprob=pstar;      }      inc=pstar / m_ActualCount;      pstarSum+=inc;      pstarSquareSum+=inc * inc;    }  }  sphereSize=(pstarSquareSum == 0 ? 0 : pstarSum * pstarSum / pstarSquareSum);  params.sphere=sphereSize;  params.avgProb=pstarSum;  params.minProb=minprob;}  }
class C{  private static int indexForStackSlot(FrameMap frameMap,StackSlot slot){  assert frameMap.offsetForStackSlot(slot) % frameMap.getTarget().wordSize == 0;  int value=frameMap.offsetForStackSlot(slot) / frameMap.getTarget().wordSize;  return value;}  }
class C{  public void messageSent(DMessage msg){  int type=msg.getType();  if (type < 0 || type >= DMessage.OutSIZE)   type=DMessage.OutSIZE;  long targetIsolate=msg.getTargetIsolate();  Object outLock=getOutLock();  if (!m_isolate) {synchronized (m_isolateLock) {      if (m_lastIsolate != Isolate.DEFAULT_ID) {        DMessageCounter counter=m_isolateCounterMap.get(m_lastIsolate);        outLock=counter.getOutLock();      }    }  }synchronized (outLock) {    if (!m_isolate && targetIsolate != Isolate.DEFAULT_ID) {      DMessageCounter counter=m_isolateCounterMap.get(targetIsolate);      counter.messageSent(msg);      m_outCounts[type]+=1;      outLock.notifyAll();    } else {      m_outCounts[type]+=1;      outLock.notifyAll();    }  }}  }
class C{  private int roundAllocationSize(int size){  return size + ((-size) & ((1 << JavaHeader.LOG_MIN_ALIGNMENT) - 1));}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public void addPath(String path){  this.pathes.add(path);}  }
class C{  public void sendComment(boolean commentWithConsoleLinkOnFailure){  if (!commenter.hasComment()) {    return;  }  if (commentWithConsoleLinkOnFailure && buildResult.isWorseOrEqualTo(hudson.model.Result.UNSTABLE)) {    commenter.addBuildFailureMessage();  } else {    commenter.addBuildLink();  }  new PostCommentTask(logger,diffClient,diff.getRevisionID(false),commenter.getComment(),commentAction).run();}  }
class C{  @Override public void start(){  if (!system.getSettings().remoteConnections.isEmpty()) {    InputStream content=new ByteArrayInputStream(getLocalAddress().getBytes());    forwardContent(MessageType.INIT,content);  }  Runtime.getRuntime().addShutdownHook(new Thread(null));  paused=false;}  }
class C{  public RetryTransactionEvent(TransactionEvent txEvent,int numRetries,long timeWhenEmitted){  this.txEvent=txEvent;  this.numRetries=numRetries;  this.timeWhenEmitted=timeWhenEmitted;}  }
class C{  public void notIdle(){  if (idleTimeoutMsec.get() > 0)   lastActionMsec.set(System.currentTimeMillis());}  }
class C{  public AssociationAlreadyRegisteredException(){  super();}  }
class C{  public void run(){  try {    while (!mInterrupted) {      try {        Buffer packet=new Buffer();        packet.setData(new byte[0]);        packet.setLength(0);        packet.setFormat(mFormat);        packet.setSequenceNumber(mSeqNo++);        packet.setTimestamp(mSystemTimeBase.getTimestamp());        mBuffer.addObject(packet);        if (!mIncomingStarted) {          Thread.sleep(DUMMY_SOURCE_OPENING_PERIOD);        } else {          Thread.sleep(DUMMY_SOURCE_PERIOD);        }      } catch (      InterruptedException e) {        if (sLogger.isActivated()) {          sLogger.debug(e.getMessage());        }      }    }  } catch (  RuntimeException e) {    sLogger.error("Dummy packet source has failed!",e);  }}  }
class C{  @Override public List<EventObject> retrieveHeadlessEvents(){  return m_headlessEvents;}  }
class C{  public <D>D oneToMany(D destination,final T source){  try {    return this.<D,T>getJMapper(relationalOneToManyMapper,destination.getClass()).getDestination(destination,source);  } catch (  Exception e) {    return this.logAndReturnNull(e);  }}  }
class C{  public ResolveUrls(String urlsFile,int numThreads){  this.urlsFile=urlsFile;  this.numThreads=numThreads;}  }
class C{  public void updatePosition(){  Point2D synapseCenter;  if (isSelfConnection()) {    synapseCenter=globalToLocal(new Point2D.Double(target.getCenter().getX() + offset,target.getCenter().getY() + offset));  } else {    synapseCenter=globalToLocal(calcCenter(source.getCenter(),target.getCenter()));  }  this.offset(synapseCenter.getX() - offset,synapseCenter.getY() - offset);  if (circle == null) {    circle=PPath.createEllipse(0,0,(float)offset * 2,(float)offset * 2);    ((PPath)circle).setStrokePaint(null);    setBounds(circle.getFullBounds());  }  if (line == null) {    line=getLine(globalToLocal(synapseCenter));  }  if (!isSelfConnection()) {    line.reset();    line.append(new Line2D.Double(globalToLocal(source.getCenter()),synapseCenter),false);    publicLine.setLine(source.getCenter(),localToGlobal(synapseCenter));  }}  }
class C{  public static EnumInfo execute(ExecutablePool pool,int enumId){  AbstractOp op=new GetPDXEnumByIdOpImpl(enumId);  return (EnumInfo)pool.execute(op);}  }
class C{  protected N4GetterDeclarationImpl(){  super();}  }
class C{  public String translate(final StringBuilder source,final Map<String,String> translationTable){  final Set<Map.Entry<String,String>> entries=translationTable.entrySet();  StringBuilder builder=new StringBuilder(source);  for (  final Entry<String,String> entry : entries) {    String key=entry.getKey();    if (key != null && !key.isEmpty()) {      String translation=entry.getValue();      int index=builder.indexOf(key);      if (index < 0 || translation == null) {        if (ConcurrentLog.isFine("TRANSLATOR"))         ConcurrentLog.fine("TRANSLATOR","Unused String: " + key);      } else {        while (index >= 0) {          boolean boundary=index + key.length() >= builder.length();          if (!boundary) {            char c=builder.charAt(index + key.length() - 1);            char lc=builder.charAt(index + key.length());            boundary|=(SentenceReader.punctuation(c) || SentenceReader.invisible(c));            boundary|=(SentenceReader.punctuation(lc) || SentenceReader.invisible(lc));          }          if (boundary && index > 0) {            char c=builder.charAt(index - 1);            boundary=(SentenceReader.punctuation(c) || SentenceReader.invisible(c));            char fc=builder.charAt(index);            boundary|=(SentenceReader.punctuation(fc) || SentenceReader.invisible(fc));          }          if (boundary) {            builder.replace(index,index + key.length(),translation);            index=builder.indexOf(key,index + translation.length());          } else {            index=builder.indexOf(key,index + key.length());          }        }      }    }  }  return builder.toString();}  }
class C{  public boolean isExplicitPolicyRequired(){  return explicitPolicyRequired;}  }
class C{  public void onKey(int key){switch (mAutoModeSwitchState) {case AUTO_MODE_SWITCH_STATE_MOMENTARY:    if (key == LatinKeyboard.KEYCODE_MODE_CHANGE) {      if (mIsSymbols) {        mAutoModeSwitchState=AUTO_MODE_SWITCH_STATE_SYMBOL_BEGIN;      } else {        mAutoModeSwitchState=AUTO_MODE_SWITCH_STATE_ALPHA;      }    } else     if (getPointerCount() == 1) {      mInputMethodService.changeKeyboardMode();    } else {      mAutoModeSwitchState=AUTO_MODE_SWITCH_STATE_CHORDING;    }  break;case AUTO_MODE_SWITCH_STATE_SYMBOL_BEGIN:if (key != LatinIME.ASCII_SPACE && key != LatinIME.ASCII_ENTER && key >= 0) {  mAutoModeSwitchState=AUTO_MODE_SWITCH_STATE_SYMBOL;}break;case AUTO_MODE_SWITCH_STATE_SYMBOL:if (key == LatinIME.ASCII_ENTER || key == LatinIME.ASCII_SPACE) {mInputMethodService.changeKeyboardMode();}break;}}  }
class C{  public QueueCursor(int capacity,boolean fair){  super();  this.queue=new ArrayBlockingQueue<E>(capacity,fair);}  }
class C{  public BinomialMinPQ(Comparator<Key> C){  comp=C;}  }
class C{  public ObjectReference prepareObjectReference(){  return loadObjectReference();}  }
class C{  @Override public void deinstall(JEditorPane editor){  super.deinstall(editor);  editor.removeKeyListener(this);}  }
class C{  public DigestDocument(final String path){  super(path);}  }
class C{  public static void main(String[] args){  System.out.println(time());  System.out.println(date());  System.out.println(month());  System.out.println(day());}  }
class C{  private static void replaceTupleVariables(HashMap<String,String> varChanges,TupleExpr tuple,Map<String,Value> valMap) throws Exception {  TupleVarRenamer visitor=new TupleVarRenamer(varChanges,valMap);  tuple.visit(visitor);}  }
class C{  public LibraryLocation(IPath libraryPath,IPath sourcePath,IPath packageRoot){  this(libraryPath,sourcePath,packageRoot,null);}  }
class C{  private boolean isReference(Value value){  return value != null && value.isReference();}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final INaviView view){  Preconditions.checkNotNull(provider,"IE00611: Provider argument can not be null");  Preconditions.checkNotNull(view,"IE00612: View argument can not be null");  Preconditions.checkArgument(view.inSameDatabase(provider),"IE00613: View is not part of this database");}  }
class C{  public boolean isFk(){  return _isFk;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testBug67803() throws Exception {  MysqlXADataSource dataSource=new MysqlXADataSource();  dataSource.setUrl(dbUrl);  dataSource.setUseCursorFetch(true);  dataSource.setDefaultFetchSize(50);  dataSource.setUseServerPrepStmts(true);  dataSource.setExceptionInterceptors("testsuite.regression.ConnectionRegressionTest$TestBug67803ExceptionInterceptor");  XAConnection testXAConn1=dataSource.getXAConnection();  testXAConn1.getXAResource().start(new MysqlXid("2".getBytes(),"2".getBytes(),1),0);}  }
class C{  public Database addDatabase(final String description,final String driver,final String host,final String name,final String user,final String password,final String identity,final boolean savePassword,final boolean autoConnect){  Preconditions.checkNotNull(description,"Error: description argument can not be null");  Preconditions.checkNotNull(driver,"Error: driver argument can not be null");  Preconditions.checkNotNull(host,"Error: host argument can not be null");  Preconditions.checkNotNull(name,"Error: name argument can not be null");  final IDatabase newDatabase=m_manager.addDatabase(new CDatabase(description,driver,host,name,user,password,identity,savePassword,autoConnect));  return ObjectFinders.getObject(newDatabase,m_databases);}  }
class C{  public static <T>Middleware<SyncHandler<Response<T>>,AsyncHandler<Response<ByteString>>> htmlSerializeResponseSync(final String templateName){  Middleware<SyncHandler<Response<T>>,AsyncHandler<Response<T>>> syncToAsync=null;  return syncToAsync.and(htmlSerializeResponse(templateName));}  }
class C{  protected void drawRadarPoly(Graphics2D g2,Rectangle2D plotArea,Point2D centre,PlotRenderingInfo info,int series,int catCount,double headH,double headW){  Polygon polygon=new Polygon();  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  for (int cat=0; cat < catCount; cat++) {    Number dataValue=getPlotValue(series,cat);    if (dataValue != null) {      double value=dataValue.doubleValue();      if (value >= 0) {        double angle=getStartAngle() + (getDirection().getFactor() * cat * 360 / catCount);        Point2D point=getWebPoint(plotArea,angle,value / this.maxValue);        polygon.addPoint((int)point.getX(),(int)point.getY());        Paint paint=getSeriesPaint(series);        Paint outlinePaint=getSeriesOutlinePaint(series);        Stroke outlineStroke=getSeriesOutlineStroke(series);        Ellipse2D head=new Ellipse2D.Double(point.getX() - headW / 2,point.getY() - headH / 2,headW,headH);        g2.setPaint(paint);        g2.fill(head);        g2.setStroke(outlineStroke);        g2.setPaint(outlinePaint);        g2.draw(head);        if (entities != null) {          int row, col;          if (this.dataExtractOrder == TableOrder.BY_ROW) {            row=series;            col=cat;          } else {            row=cat;            col=series;          }          String tip=null;          if (this.toolTipGenerator != null) {            tip=this.toolTipGenerator.generateToolTip(this.dataset,row,col);          }          String url=null;          if (this.urlGenerator != null) {            url=this.urlGenerator.generateURL(this.dataset,row,col);          }          Shape area=new Rectangle((int)(point.getX() - headW),(int)(point.getY() - headH),(int)(headW * 2),(int)(headH * 2));          CategoryItemEntity entity=new CategoryItemEntity(area,tip,url,this.dataset,this.dataset.getRowKey(row),this.dataset.getColumnKey(col));          entities.add(entity);        }      }    }  }  Paint paint=getSeriesPaint(series);  g2.setPaint(paint);  g2.setStroke(getSeriesOutlineStroke(series));  g2.draw(polygon);  if (this.webFilled) {    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.1f));    g2.fill(polygon);    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));  }}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor oldCursor=super.swapCursor(newCursor);  if (super.getCount() > 0) {    this.mArrayImpl=null;  }  return oldCursor;}  }
class C{  @Override protected ProducerConfig createKafkaProducerConfig(){  if (brokerList != null) {    getConfigProperties().setProperty(BROKER_KEY,brokerList);  }  if (isBatchProcessing) {    if (batchSize != 0) {      getConfigProperties().setProperty(BATCH_NUM_KEY,String.valueOf(batchSize));    }    getConfigProperties().setProperty(PRODUCER_KEY,ASYNC_PRODUCER_TYPE);  }  return super.createKafkaProducerConfig();}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node refChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node insertedNode;  doc1=(Document)load("staff",false);  doc2=(Document)load("staff",true);  newChild=doc1.createElement("newChild");  elementList=doc2.getElementsByTagName("employee");  elementNode=elementList.item(1);  refChild=elementNode.getFirstChild();{    boolean success=false;    try {      insertedNode=elementNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public final byte[] genExemptionBlob() throws IllegalStateException, ExemptionMechanismException {  if (!isInit) {    throw new IllegalStateException("ExemptionMechanism is not initialized");  }  generated=false;  byte[] result=spiImpl.engineGenExemptionBlob();  generated=true;  return result;}  }
class C{  public boolean removeElement(Element element){  return removeElement(element.getElementKey(),element);}  }
class C{  public static Automaton makeString(String s){  Automaton a=new Automaton();  int lastState=a.createState();  for (int i=0, cp=0; i < s.length(); i+=Character.charCount(cp)) {    int state=a.createState();    cp=s.codePointAt(i);    a.addTransition(lastState,state,cp);    lastState=state;  }  a.setAccept(lastState,true);  a.finishState();  assert a.isDeterministic();  assert Operations.hasDeadStates(a) == false;  return a;}  }
class C{  private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){  return x > left && x < right && y > top && y < bottom;}  }
class C{  @Implementation public boolean hasAction(String action){  return actions.contains(action);}  }
class C{  public final void add(@NotNull AnAction action,@NotNull Constraints constraint){  add(action,constraint,ActionManager.getInstance());}  }
class C{  public int newGroup(){  throw new RuntimeException("Not implemented!");}  }
class C{  public void start(){  if (!mMonitorStarted) {    mMonitorStarted=true;    Looper.getMainLooper().setMessageLogging(mBlockCanaryCore.monitor);  }}  }
class C{  public void show(){  show(Path.ROOT);}  }
class C{  public CGraphSearchPanel(final ZyGraph graph){  super(new BorderLayout());  m_searchField=new CGraphSearchField(graph);  add(m_searchField);  final JButton button=new JButton(CActionProxy.proxy(new CShowResultsAction()));  add(button,BorderLayout.EAST);}  }
class C{  public static long[] known_N_compute_B_and_K(long N,double epsilon,double delta,int quantiles,double[] returnSamplingRate){  if (delta > 0.0) {    return known_N_compute_B_and_K_slow(N,epsilon,delta,quantiles,returnSamplingRate);  }  returnSamplingRate[0]=1.0;  return known_N_compute_B_and_K_quick(N,epsilon);}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  private void send(boolean decision){  if (mListener != null) {    mListener.receive(mNormalOutput ? decision : !decision);  }}  }
class C{  private static String byteArrayToString(byte[] bytes){  StringBuilder builder=new StringBuilder("[");  for (int i=0; i < bytes.length; i++) {    if (i > 0) {      builder.append(", ");    }    builder.append(byteToString(bytes[i]));  }  return builder.append(']').toString();}  }
class C{  public String toString(){  return "MAP file:\n" + root;}  }
class C{  private DoubleFactor makeFactor(BNode node,Assignment evidence){  DoubleFactor factor=new DoubleFactor();  Map<Assignment,Double> flatTable=node.getFactor();  for (  Assignment a : flatTable.keySet()) {    if (a.consistentWith(evidence)) {      Assignment a2=new Assignment(a);      a2.removePairs(evidence.getVariables());      if (node instanceof ChanceNode || node instanceof ActionNode) {        factor.addEntry(a2,flatTable.get(a),0.0f);      } else       if (node instanceof UtilityNode) {        factor.addEntry(a2,1.0f,flatTable.get(a));      }    }  }  return factor;}  }
class C{  private void paintMarkers(final Graphics2D g){  if (markerLoop1 == null && markerLoop2 == null || chartList.isEmpty() || !(chartList.get(0) instanceof TimeChart))   return;  final TimeChart<?> tc=(TimeChart<?>)chartList.get(0);  g.setStroke(Chart.STROKE_DASHED);  for (int i=0; i < 2; i++) {    final Integer loop=i == 0 ? markerLoop1 : markerLoop2;    if (loop == null)     continue;    g.setColor(COLOR_MARKER);    int x=tc.loopToX(loop);    g.drawLine(x,0,x,getHeight() - 1);    final String text=tc.isInSeconds() ? repProc.formatLoopTime(loop) : Integer.toString(loop);    final int width=g.getFontMetrics().stringWidth(text);    if (x + width > getWidth())     x-=width;    g.setColor(Color.BLACK);    g.fillRect(x - 1,0 + i * 12,width + 2,12);    g.setColor(COLOR_MARKER);    g.drawString(text,x,10 + i * 12);  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  final int fullyRelease(Node node){  boolean failed=true;  try {    int savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void serialStream(){  Optional<Integer> sumOfTrades=trades.stream().filter(filterPredicate).map(mapFunction).reduce(null);  System.out.println(sumOfTrades.get());}  }
class C{  public int generate(int uc,int len,CharBuffer dst){  if (uc <= 0xffff) {    if (Surrogate.is(uc)) {      error=CoderResult.malformedForLength(len);      return -1;    }    if (dst.remaining() < 1) {      error=CoderResult.OVERFLOW;      return -1;    }    dst.put((char)uc);    error=null;    return 1;  }  if (uc < Surrogate.UCS4_MIN) {    error=CoderResult.malformedForLength(len);    return -1;  }  if (uc <= Surrogate.UCS4_MAX) {    if (dst.remaining() < 2) {      error=CoderResult.OVERFLOW;      return -1;    }    dst.put(Surrogate.high(uc));    dst.put(Surrogate.low(uc));    error=null;    return 2;  }  error=CoderResult.unmappableForLength(len);  return -1;}  }
class C{  public void initObjectGraph(Object module){  mObjectGraph=module != null ? ObjectGraph.create(module) : null;}  }
class C{  protected void addClassifier(){  GenericObjectEditorDialog dialog;  dialog=getGOEDialog(MultiLabelClassifier.class,new BR());  dialog.setTitle("Add classifier");  dialog.setLocationRelativeTo(this);  dialog.setVisible(true);  if (dialog.getResult() != GenericObjectEditorDialog.APPROVE_OPTION)   return;  if (m_ListClassifiers.getList().getSelectedIndex() > -1)   m_ModelClassifiers.insertElementAt(OptionUtils.toCommandLine(dialog.getCurrent()),m_ListClassifiers.getList().getSelectedIndex()); else   m_ModelClassifiers.addElement(OptionUtils.toCommandLine(dialog.getCurrent()));  m_Modified=true;  updateButtons();}  }
class C{  public WebUser(String username,String password){  this.username=username;  this.password=password;}  }
class C{  public final int delete(Uri uri,String selection,String[] selectionArgs){  ContentProviderClient contentProviderClient=null;  try {    contentProviderClient=mContentResolver.acquireContentProviderClient(uri);    return contentProviderClient.getLocalContentProvider().delete(uri,selection,selectionArgs);  }  finally {    if (contentProviderClient != null) {      contentProviderClient.release();    }  }}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_DOWN:    launchSettings();  return true;case KeyEvent.KEYCODE_DPAD_UP:showIpAddress();return true;default :return false;}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  words=(long[])fields.get("bits",null);  wordsInUse=words.length;  recalculateWordsInUse();  sizeIsSticky=(words.length > 0 && words[words.length - 1] == 0L);  checkInvariants();}  }
class C{  private String extractUpdateFromFilePath(String isoPath){  String fileName=getFileNameFromPath(isoPath);  int idx=fileName.indexOf("update");  if (idx != -1) {    String result=fileName.substring(idx).split("-")[0];    return shortenUpdateLabel(result);  } else {    return "";  }}  }
class C{  public boolean isFloating(){  return mode == Mode.floating;}  }
class C{  public static void main(String[] args){  try {    Properties p=CollectionUtilities.read(args[0]);    System.out.println(p);  } catch (  Exception ex) {  }}  }
class C{  public double computeAverageLocalOfObservations() throws Exception {  lastAverage=miKernel.computeAverageLocalOfObservations();  return lastAverage;}  }
class C{  public Builder addQueryParameter(String name,String value){  if (name == null)   throw new IllegalArgumentException("name == null");  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();  encodedQueryNamesAndValues.add(canonicalize(name,QUERY_COMPONENT_ENCODE_SET,false,true,true));  encodedQueryNamesAndValues.add(value != null ? canonicalize(value,QUERY_COMPONENT_ENCODE_SET,false,true,true) : null);  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.LITERAL_ANNOTATION_ARGUMENT__LITERAL:    return literal != null;}return super.eIsSet(featureID);}  }
class C{  public GossipSettings(){}  }
class C{  public static void recursiveReplace(JsonObject base,String annotation){  if (base == null) {    return;  }  for (  Map.Entry<String,JsonElement> entry : base.entrySet()) {    if (entry.getValue().isJsonArray()) {      JsonArray newArray=new JsonArray();      for (      JsonElement arrayEl : entry.getValue().getAsJsonArray()) {        JsonElement elToAdd=arrayEl;        if (arrayEl.isJsonObject()) {          JsonObject arrayObj=arrayEl.getAsJsonObject();          recursiveReplace(arrayObj,annotation);          if (arrayObj.has(annotation)) {            JsonObject newObj=rewriteFnSelector(annotation,arrayObj);            if (newObj != null) {              elToAdd=newObj;            }          }        }        newArray.add(elToAdd);      }      entry.setValue(newArray);    } else     if (entry.getValue().isJsonObject()) {      JsonObject entryObj=entry.getValue().getAsJsonObject();      recursiveReplace(entryObj,annotation);      if (entryObj.has(annotation)) {        JsonObject newObj=rewriteFnSelector(annotation,entryObj);        if (newObj != null)         entry.setValue(newObj);      }    }  }}  }
class C{  void waitForExit(){  Runtime runtime=Runtime.getRuntime();  ShutdownSystem shutdown=_resinSystem.getSystem(ShutdownSystem.class);  if (shutdown == null) {    throw new IllegalStateException(L.l("'{0}' requires an active {1}",this,ShutdownSystem.class.getSimpleName()));  }  while (!_server.isClosing()) {    try {      Thread.sleep(10);      if (!checkMemory(runtime)) {        shutdown.shutdown(ShutdownModeAmp.IMMEDIATE,ExitCode.MEMORY,"Server shutdown from out of memory");        return;      }      if (!checkFileDescriptor()) {        shutdown.shutdown(ShutdownModeAmp.IMMEDIATE,ExitCode.MEMORY,"Server shutdown from out of file descriptors");        return;      }synchronized (this) {        wait(10000);      }    } catch (    OutOfMemoryError e) {      String msg="Server shutdown from out of memory";      ShutdownSystem.shutdownOutOfMemory(msg);    }catch (    Throwable e) {      log.log(Level.WARNING,e.toString(),e);      return;    }  }}  }
class C{  public static int readUnsignedIntToInt(ByteBuffer data){  int result=0xFF & data.get();  for (int i=1; i < 4; i++) {    result<<=8;    result|=0xFF & data.get();  }  if (result < 0) {    throw new IllegalArgumentException("Top bit not zero: " + result);  }  return result;}  }
class C{  public static boolean removeFile(File target){  return FileUtil.deleteFile(target);}  }
class C{  @Deprecated public ObjectInputStream deserialize(String className,byte[] data) throws OperationsException, ReflectionException {  if (className == null) {    throw new RuntimeOperationsException(new IllegalArgumentException(),"Null className passed in parameter");  }  final ClassLoaderRepository clr=getClassLoaderRepository();  Class<?> theClass;  try {    if (clr == null)     throw new ClassNotFoundException(className);    theClass=clr.loadClass(className);  } catch (  ClassNotFoundException e) {    throw new ReflectionException(e,"The given class could not be " + "loaded by the default loader " + "repository");  }  return instantiator.deserialize(theClass.getClassLoader(),data);}  }
class C{  public Class loadTagFilePrototype() throws JasperException {  ctxt.setPrototypeMode(true);  try {    return loadTagFile();  }  finally {    ctxt.setPrototypeMode(false);  }}  }
class C{  private void deleteOrRetireHelper(EnumerationContext ctx){  if (ctx.deletionNextPageLink == null) {    logInfo("Finished %s of compute states for Azure",ctx.enumRequest.preserveMissing ? "retiring" : "deletion");    ctx.subStage=EnumerationSubStages.FINISHED;    handleSubStage(ctx);    return;  }  CompletionHandler completionHandler=null;  logFine("Querying page [%s] for resources to be %s",ctx.deletionNextPageLink,ctx.enumRequest.preserveMissing ? "retire" : "delete");  sendRequest(Operation.createGet(this,ctx.deletionNextPageLink).setCompletion(completionHandler));}  }
class C{  protected void assertEntryEquals(File file,String key,int skip,double expected) throws IOException {  Assert.assertEquals(expected,getEntryValue(file,key,skip),TestThresholds.STATISTICS_EPS);}  }
class C{  public static boolean excludeByClass(Class<?> clazz,List<Class<?>> excludeClazz){  for (  Class<?> ec : excludeClazz) {    if (ec.isAssignableFrom(clazz)) {      return true;    }  }  return false;}  }
class C{  public void randomizeTable(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    randomizeRow(nodeIndex,rowIndex);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int toDigit(char ch,int idx) throws IgniteCheckedException {  int digit=Character.digit(ch,16);  if (digit == -1)   throw new IgniteCheckedException("Illegal hexadecimal character " + ch + " at index "+ idx);  return digit;}  }
class C{  public void closeElement() throws IOException {  closeElement(true);}  }
class C{  public static void srs_print_bytes(String tag,ByteBuffer bb,int size){  StringBuilder sb=new StringBuilder();  int i=0;  int bytes_in_line=16;  int max=bb.remaining();  for (i=0; i < size && i < max; i++) {    sb.append(String.format("0x%s ",Integer.toHexString(bb.get(i) & 0xFF)));    if (((i + 1) % bytes_in_line) == 0) {      Log.i(tag,String.format("%03d-%03d: %s",i / bytes_in_line * bytes_in_line,i,sb.toString()));      sb=new StringBuilder();    }  }  if (sb.length() > 0) {    Log.i(tag,String.format("%03d-%03d: %s",size / bytes_in_line * bytes_in_line,i - 1,sb.toString()));  }}  }
class C{  public MockCharFilterFactory(Map<String,String> args){  super(args);  remainder=requireInt(args,"remainder");  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.202 -0500",hash_original_method="162A603AB5DA029339CF16BB4270637E",hash_generated_method="0D0CF7EDC037A4D1AFC9A3CB92A5F5D8") public static int parseInt(String string,int radix) throws NumberFormatException {  if (DroidSafeAndroidRuntime.control)   throw new NumberFormatException("Invalid radix: " + radix);  return string.getTaintInt() + radix;}  }
class C{  static Class<?>[] canonicalizeAll(Class<?>[] ts,int how){  Class<?>[] cs=null;  for (int imax=ts.length, i=0; i < imax; i++) {    Class<?> c=canonicalize(ts[i],how);    if (c == void.class)     c=null;    if (c != null) {      if (cs == null)       cs=ts.clone();      cs[i]=c;    }  }  return cs;}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  public static StreamFactoryService newService(String engineURI,boolean isReuseViews){  return new StreamFactorySvcImpl(engineURI,isReuseViews);}  }
class C{  static public String executeFunction(String[] values,Variables variables){  try {    if (values[2].equalsIgnoreCase("mod")) {      return NumericFunctions.mod(NumberUtils.toInt(values[3]),NumberUtils.toInt(values[4]));    } else     if (values[2].equalsIgnoreCase("randompositivewhole")) {      return NumericFunctions.randomPositiveWhole(NumberUtils.toInt(values[3]));    } else     if (values[2].equalsIgnoreCase("randomnegativewhole")) {      return NumericFunctions.randomNegativeWhole(NumberUtils.toInt(values[3]));    } else     if (values[2].equalsIgnoreCase("randompositivefloat")) {      return NumericFunctions.randomPositiveFloat(NumberUtils.toInt(values[3]),NumberUtils.toInt(values[4]));    } else     if (values[2].equalsIgnoreCase("randomnegativefloat")) {      return NumericFunctions.randomNegativeFloat(NumberUtils.toInt(values[3]),NumberUtils.toInt(values[4]));    } else     if (values[2].equalsIgnoreCase("add")) {      return NumericFunctions.add(values,variables);    } else     if (values[2].equalsIgnoreCase("subtract")) {      return NumericFunctions.subtract(values,variables);    }    return "";  } catch (  Exception ex) {    return "";  }}  }
class C{  @Override public void event(CometEvent event) throws IOException, ServletException {  HttpServletRequest request=event.getHttpServletRequest();  HttpServletResponse response=event.getHttpServletResponse();  if (event.getEventType() == CometEvent.EventType.BEGIN) {    String action=request.getParameter("action");    if (action != null) {      if ("login".equals(action)) {        String nickname=request.getParameter("nickname");        request.getSession(true).setAttribute("nickname",nickname);        response.sendRedirect("index.jsp");        event.close();        return;      }      String nickname=(String)request.getSession(true).getAttribute("nickname");      String message=request.getParameter("message");      messageSender.send(nickname,message);      response.sendRedirect("post.jsp");      event.close();      return;    }    if (request.getSession(true).getAttribute("nickname") == null) {      log("Redirect to login for session: " + request.getSession(true).getId());      response.sendRedirect("login.jsp");      event.close();      return;    }    begin(event,request,response);  } else   if (event.getEventType() == CometEvent.EventType.ERROR) {    error(event,request,response);  } else   if (event.getEventType() == CometEvent.EventType.END) {    end(event,request,response);  } else   if (event.getEventType() == CometEvent.EventType.READ) {    read(event,request,response);  }}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:47.483 -0500",hash_original_method="C8DAB2ADB788499C67FF0E8E9408ECE5",hash_generated_method="643D65C3E0FADDCD503AC887A11DE305") public int restoreAll(long token,RestoreObserver observer){  int err=-1;  if (mObserver != null) {    Log.d(TAG,"restoreAll() called during active restore");    return -1;  }  mObserver=new RestoreObserverWrapper(mContext,observer);  try {    err=mBinder.restoreAll(token,mObserver);  } catch (  RemoteException e) {    Log.d(TAG,"Can't contact server to restore");  }  return err;}  }
class C{  public List gatherNodeString(EvolutionState state,int threadnum,GPNode node,int index){  List list=new ArrayList();  if (node instanceof ERC) {    list.add(node.name().trim());    list.add(getKeyFromNode(state,threadnum,node,index).trim());  } else   list.add(node.toString().trim());  if (node.children.length > 0) {    for (int i=0; i < node.children.length; i++) {      index++;      List sublist=gatherNodeString(state,threadnum,node.children[i],index);      list.addAll(sublist);    }  }  return list;}  }
class C{  public IMethod findOverridingMethodInType(IType overridingType,IMethod overridden) throws JavaModelException {  int flags=overridden.getFlags();  if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overridden.isConstructor())   return null;  IMethod[] overridingMethods=overridingType.getMethods();  for (int i=0; i < overridingMethods.length; i++) {    IMethod overriding=overridingMethods[i];    flags=overriding.getFlags();    if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overriding.isConstructor())     continue;    if (isSubsignature(overriding,overridden)) {      return overriding;    }  }  return null;}  }
class C{  @Override public void run(){  final SolrQuery params=new SolrQuery();  params.setParam("defType","edismax");  params.setStart(0);  params.setRows(1000);  params.setFacet(false);  params.setSort(new SortClause(CollectionSchema.load_date_dt.getSolrFieldName(),SolrQuery.ORDER.desc));  params.setFields(CollectionSchema.id.getSolrFieldName());  params.setQuery(CollectionSchema.failreason_s.getSolrFieldName() + AbstractSolrConnector.CATCHALL_DTERM);  params.set(CommonParams.DF,CollectionSchema.id.getSolrFieldName());  SolrDocumentList docList;  try {    docList=this.sb.index.fulltext().getDefaultConnector().getDocumentListByParams(params);    if (docList != null)     for (int i=docList.size() - 1; i >= 0; i--) {      SolrDocument doc=docList.get(i);      String hash=(String)doc.getFieldValue(CollectionSchema.id.getSolrFieldName());      cache.putHashOnly(hash);    }  } catch (  IOException e) {    ConcurrentLog.logException(e);  }}  }
class C{  public static String mainDirectory(String directory){  String dirname=directory + File.separator + Properties.PROJECT_PREFIX.replace('.',File.separatorChar);  File dir=new File(dirname);  logger.debug("Target directory: " + dirname);  dir.mkdirs();  return dirname;}  }
class C{  public ComponentAnimation createAnimateLayoutFadeAndWait(final int duration,int startingOpacity){  return null;}  }
class C{  private RawProtein<SmartRawMatch> filterKinaseHack(RawProtein<SmartRawMatch> matchRawProtein){  boolean seenS=false;  boolean seenT=false;  for (  SmartRawMatch match : matchRawProtein.getMatches()) {    if (seenS && seenT)     break;    seenT|=SMART_TYR_KINASE_METHOD.equals(match.getModelId());    seenS|=SMART_SER_THR_KINASE_METHOD.equals(match.getModelId());  }  if (!(seenS && seenT)) {    return matchRawProtein;  }  final Protein protein=proteinDAO.read(matchRawProtein.getProteinDatabaseId());  if (protein == null) {    throw new IllegalStateException("Cannot access the Protein via the protein primary key from the RawProtein object.");  }  final String sequence=protein.getSequence();  final boolean tyrosineOK=SMART_TYR_REGEX.matcher(sequence).matches();  final boolean serineThreonineOK=SMART_SER_THR_REGEX.matcher(sequence).matches();  final RawProtein<SmartRawMatch> filtered=new RawProtein<SmartRawMatch>(matchRawProtein.getProteinIdentifier());  for (  SmartRawMatch match : matchRawProtein.getMatches()) {    if (!KINASE_METHODS.contains(match.getModelId())) {      filtered.addMatch(match);    } else     if (SMART_TYR_KINASE_METHOD.equals(match.getModelId()) && tyrosineOK) {      filtered.addMatch(match);    } else     if (SMART_SER_THR_KINASE_METHOD.equals(match.getModelId()) && serineThreonineOK) {      filtered.addMatch(match);    }  }  return filtered;}  }
class C{  public boolean isBlocked(){  return blocked;}  }
class C{  public static void writeToXml(List<Block> toSerialize,Writer writer) throws BlocklySerializerException {  writeToXmlImpl(toSerialize,null,writer);}  }
class C{  protected boolean allKeyFieldsPresent(Entity e,EnumSet<DeviceField> keyFields){  for (  DeviceField f : keyFields) {switch (f) {case MAC:      break;case IPV4:    if (e.ipv4Address == null)     return false;  break;case SWITCH:if (e.switchDPID == null) return false;break;case PORT:if (e.switchPort == null) return false;break;case VLAN:break;default :throw new IllegalStateException();}}return true;}  }
class C{  void variableOperatorChanged(int row,String oper){  ConditionalVariable variable=_variableList.get(row);  int oldOper=variable.getOpern();  if (row > 0) {    if (oper.equals(Bundle.getMessage("LogicOR"))) {      variable.setOpern(Conditional.OPERATOR_OR);    } else {      variable.setOpern(Conditional.OPERATOR_AND);    }  } else {    variable.setOpern(Conditional.OPERATOR_NONE);  }  if (variable.getOpern() != oldOper) {    makeAntecedent();  }}  }
class C{  private boolean onTouchRotateMode(MotionEvent event){  return false;}  }
class C{  public double pdf(double x){  return c * Math.exp(-Math.abs(x - mu) / beta);}  }
class C{  public byte map(byte src){  int i=0xff & src;  return glyphIndex[i];}  }
class C{  @Override public void sequencesLoaded(Long bottomNewSequenceId,Long topNewSequenceId,Long bottomPrecalculatedSequenceId,Long topPrecalculatedSequenceId){}  }
class C{  public FSTCompletionBuilder(int buckets,BytesRefSorter sorter,int shareMaxTailLength){  if (buckets < 1 || buckets > 255) {    throw new IllegalArgumentException("Buckets must be >= 1 and <= 255: " + buckets);  }  if (sorter == null)   throw new IllegalArgumentException("BytesRefSorter must not be null.");  this.sorter=sorter;  this.buckets=buckets;  this.shareMaxTailLength=shareMaxTailLength;}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public boolean isOnSegment(){  return isPointOnSegment;}  }
class C{  protected GraphicsNode instantiateGraphicsNode(){  return null;}  }
class C{  private void loadPrefixFile(String prefixTuningFile){  if (prefixTuningFile.equals("RANDOM")) {    randomPrefixes=true;    random=new Random();    prefixes=new ArrayList<>();    return;  }  prefixes=IStrings.tokenizeFile(prefixTuningFile);  logger.info("Prefix tuning mode: {} examples",prefixes.size());  if (prefixes.size() != tuneSource.size()) {    throw new RuntimeException("Prefix file size not equal to source file size");  }  logger.info("Prefix tuning mode: {} examples",prefixes.size());  for (int i=0, sz=references.size(); i < sz; ++i) {    references.get(i).add(0,prefixes.get(i));  }}  }
class C{  public static <E>TopicProcessor<E> share(String name,int bufferSize,WaitStrategy strategy,boolean autoCancel){  return new TopicProcessor<>(name,bufferSize,strategy == null ? WaitStrategy.phasedOffLiteLock(200,100,TimeUnit.MILLISECONDS) : strategy,true,autoCancel,null);}  }
class C{  private SingleByteCharsetConverter(String encodingName) throws UnsupportedEncodingException {  String allBytesString=new String(allBytes,0,BYTE_RANGE,encodingName);  int allBytesLen=allBytesString.length();  System.arraycopy(unknownCharsMap,0,this.charToByteMap,0,this.charToByteMap.length);  for (int i=0; i < BYTE_RANGE && i < allBytesLen; i++) {    char c=allBytesString.charAt(i);    this.byteToChars[i]=c;    this.charToByteMap[c]=allBytes[i];  }}  }
class C{  public BranchGroupPortrayal3D(BranchGroup scene){  this(scene,1.0f,null);}  }
class C{  public void startObjectValue(O object,String name){}  }
class C{  @Override protected ScheduledEvent queryResource(URI id){  return getScheduledEventById(id,false);}  }
class C{  public Builder addListenUrls(List<String> urls){  List<String> needAdd=new ArrayList<String>();  for (  String url : urls) {    if (!UrlUtil.isUrl(url)) {      continue;    }    needAdd.add(url);  }  if (!CollectionUtil.isEmpty(needAdd)) {    if (mListenUrls == null) {      mListenUrls=new HashSet<String>();    }    mListenUrls.addAll(needAdd);  }  return this;}  }
class C{  public final boolean hasAttribute(Class<? extends Attribute> attClass){  return this.attributes.containsKey(attClass);}  }
class C{  private Map<MethodConfig,MethodConfig> loadMethods(Path jar,List<MethodConfig> methodConfigs) throws Exception {  final Map<MethodConfig,MethodConfig> map=new HashMap<>();  List<String> list=new ArrayList<>();  if (classpath != null) {    list.addAll(Arrays.asList(classpath.split(";|:")));  }  list.add(jar.toAbsolutePath().toString());  URL[] urls=new URL[list.size()];  for (int i=0; i < list.size(); i++) {    urls[i]=new File(list.get(i)).toURI().toURL();  }  URLClassLoader cl=new URLClassLoader(urls);  for (  MethodConfig config : methodConfigs) {    Method jmethod;    try {      Class<?> clz=cl.loadClass(config.owner.replace('/','.'));      if (clz == null) {        System.err.println("clz is null:" + config.owner);      }      jmethod=findAnyMethodMatch(clz,config.name,toJavaType(Type.getArgumentTypes(config.desc)));    } catch (    Exception ex) {      System.err.println("can't load method: L" + config.owner + ";->"+ config.name+ config.desc);      throw ex;    }    if (jmethod != null) {      jmethod.setAccessible(true);      config.jmethod=jmethod;      map.put(config,config);    } else {      throw new NoSuchMethodException("can't find method " + config.name + config.desc+ " on class "+ config.owner+ " or its parent");    }  }  return map;}  }
class C{  private void tryScheduleAction(Runnable action){  try {    scheduler.submit(action);  } catch (  RejectedExecutionException e) {  }}  }
class C{  public boolean isAllAgents(){  return allAgents.getSelection();}  }
class C{  private void collapseBucket(int hole){  assert this.buckets[hole] != null;  --this.size;  int currentIndex=hole;  while (true) {    currentIndex=getNextIndex(currentIndex);    XYZAddressable bucket=this.buckets[currentIndex];    if (bucket == null) {      this.buckets[hole]=null;      return;    }    int targetIndex=getIndex(bucket.getX(),bucket.getY(),bucket.getZ());    if (hole < currentIndex) {      if (targetIndex <= hole || currentIndex < targetIndex) {        this.buckets[hole]=bucket;        hole=currentIndex;      }    } else {      if (hole >= targetIndex && targetIndex > currentIndex) {        this.buckets[hole]=bucket;        hole=currentIndex;      }    }  }}  }
class C{  public void write(String s,int off,int len){  try {synchronized (lock) {      ensureOpen();      out.write(s,off,len);    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  commandBox.mouseClicked(par1,par2,par3);}  }
class C{  public BinaryOut(Socket socket){  try {    OutputStream os=socket.getOutputStream();    out=new BufferedOutputStream(os);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
