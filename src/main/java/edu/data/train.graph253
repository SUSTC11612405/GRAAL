class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public void calculateIntegratePartials(double[] inPartials,double[] proportions,double[] outPartials){  int u=0;  int v=0;  for (int k=0; k < patternCount; k++) {    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;    outPartials[u]=inPartials[v] * proportions[0];    u++;    v++;  }  for (int j=1; j < matrixCount; j++) {    u=0;    for (int k=0; k < patternCount; k++) {      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;      outPartials[u]+=inPartials[v] * proportions[j];      u++;      v++;    }  }}  }
class C{  public DeltaCRLIndicatorExtension(BigInteger crlNum) throws IOException {  super(PKIXExtensions.DeltaCRLIndicator_Id,true,crlNum,NAME,LABEL);}  }
class C{  static <E>void writeMultiset(Multiset<E> multiset,ObjectOutputStream stream) throws IOException {  int entryCount=multiset.entrySet().size();  stream.writeInt(entryCount);  for (  Multiset.Entry<E> entry : multiset.entrySet()) {    stream.writeObject(entry.getElement());    stream.writeInt(entry.getCount());  }}  }
class C{  public static void removeObject_test() throws Exception {  println("Test: removeObject(String bucketName, String objectName)");  String fileName=createFile(3 * MB);  client.putObject(bucketName,fileName,fileName);  Files.delete(Paths.get(fileName));  client.removeObject(bucketName,fileName);}  }
class C{  private Patient saveNewPatient(Element root,User creator,boolean propagateErrors,HttpServletRequest request) throws Exception {  PatientService patientService=Context.getPatientService();  XformsService xformsService=(XformsService)Context.getService(XformsService.class);  Patient pt=new Patient();  pt.setCreator(creator);  pt.setDateCreated(new Date());  PersonName pn=new PersonName();  pn.setGivenName(DOMUtil.getElementValue(root,XformBuilder.NODE_GIVEN_NAME));  pn.setFamilyName(DOMUtil.getElementValue(root,XformBuilder.NODE_FAMILY_NAME));  pn.setMiddleName(DOMUtil.getElementValue(root,XformBuilder.NODE_MIDDLE_NAME));  pn.setDegree(DOMUtil.getElementValue(root,XformBuilder.NODE_DEGREE));  pn.setFamilyName2(DOMUtil.getElementValue(root,XformBuilder.NODE_FAMILY_NAME2));  pn.setFamilyNamePrefix(DOMUtil.getElementValue(root,XformBuilder.NODE_FAMILY_NAME_PREFIX));  pn.setFamilyNameSuffix(DOMUtil.getElementValue(root,XformBuilder.NODE_FAMILY_NAME_SUFFIX));  pn.setPrefix(DOMUtil.getElementValue(root,XformBuilder.NODE_PREFIX));  pn.setPreferred(true);  pn.setCreator(creator);  pn.setDateCreated(pt.getDateCreated());  pt.addName(pn);  pt.setBirthdateEstimated("true".equals(DOMUtil.getElementValue(root,XformBuilder.NODE_BIRTH_DATE_ESTIMATED)));  String val=DOMUtil.getElementValue(root,XformBuilder.NODE_BIRTH_DATE);  if (val != null && val.length() > 0)   try {    pt.setBirthdate(XformsUtil.fromSubmitString2Date(val));  } catch (  Exception e) {    log.error(val,e);  }  pt.setGender(DOMUtil.getElementValue(root,XformBuilder.NODE_GENDER));  PatientIdentifier identifier=new PatientIdentifier();  identifier.setCreator(creator);  identifier.setDateCreated(pt.getDateCreated());  identifier.setIdentifier(DOMUtil.getElementValue(root,XformBuilder.NODE_IDENTIFIER));  int id=Integer.parseInt(DOMUtil.getElementValue(root,XformBuilder.NODE_IDENTIFIER_TYPE_ID));  PatientIdentifierType identifierType=patientService.getPatientIdentifierType(id);  identifier.setIdentifierType(identifierType);  identifier.setLocation(getLocation(DOMUtil.getElementValue(root,XformBuilder.NODE_LOCATION_ID)));  identifier.setPreferred(true);  pt.addIdentifier(identifier);  addPersonAttributes(pt,root,xformsService,creator);  addPersonAddresses(pt,root,creator);  addOtherIdentifiers(pt,root,creator,patientService,propagateErrors,request);  Patient pt2=patientService.identifierInUse(identifier.getIdentifier(),identifier.getIdentifierType(),pt);  if (pt2 == null) {    pt=patientService.savePatient(pt);    addPersonRepeatAttributes(pt,root,xformsService);    if (request != null)     request.setAttribute(XformConstants.REQUEST_ATTRIBUTE_ID_PATIENT_ID,pt.getPatientId().toString());    return pt;  } else   if (rejectExistingPatientCreation()) {    String message=Context.getMessageSourceService().getMessage("xforms.problemPatientExists") + identifier.getIdentifier() + Context.getMessageSourceService().getMessage("xforms.accepted");    log.error(message);    if (request != null)     request.setAttribute(XformConstants.REQUEST_ATTRIBUTE_ID_ERROR_MESSAGE,message);    if (propagateErrors)     throw new Exception(message);    return null;  } else {    String message=Context.getMessageSourceService().getMessage("xforms.problemPatientExists") + identifier.getIdentifier() + Context.getMessageSourceService().getMessage("xforms.accepted");    log.warn(message);    if (request != null)     request.setAttribute(XformConstants.REQUEST_ATTRIBUTE_ID_ERROR_MESSAGE,message);    if (propagateErrors)     throw new Exception(message);    return pt;  }}  }
class C{  public void removeSection(String strSection){  sections.remove(strSection);}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  protected SVGOMURIReferenceElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static String datetime2Str(Date d){  if (d == null)   return "";  SimpleDateFormat sdf=new SimpleDateFormat(DATE_TIME_FORMAT);  return sdf.format(d);}  }
class C{  public LightPortrayal3D(Color color){  light=new AmbientLight(new Color3f(color));  light.setInfluencingBounds(new BoundingSphere(new Point3d(0,0,0),Double.POSITIVE_INFINITY));}  }
class C{  protected NativePointerObject(){  nativePointer=0;}  }
class C{  public void addToThis(GF2Polynomial b){  expandN(b.len);  xorThisBy(b);}  }
class C{  public static double[] matrixProduct(double[] v,double[][] A) throws Exception {  if (v.length != A.length) {    throw new Exception("Number of entries of v " + v.length + " does not match the number of rows of A "+ A.length);  }  double[] result=new double[A[0].length];  for (int c=0; c < result.length; c++) {    result[c]=0;    for (int r=0; r < v.length; r++) {      result[c]+=v[r] * A[r][c];    }  }  return result;}  }
class C{  public static File stringToFile(final String content,final File file) throws IOException {  if (content == null) {    throw new NullPointerException("null string given");  }  return byteArrayToFile(content.getBytes(),file);}  }
class C{  public void addToDictionary(String s){  if (!getAutoComplete())   return;  if (dict == null) {    setUp();    this.dict=createDefaultDictionary();  }  dict.addEntry(s.trim());}  }
class C{  public Position(int position,int line,int column){  super();  this.position=position;  this.line=line;  this.column=column;}  }
class C{  private Product createProduct(TechnicalProduct technicalProduct,Organization supplier,String productId,PriceModel priceModel){  Product product=new Product();  product.setVendor(supplier);  product.setProductId(productId);  product.setPriceModel(priceModel);  product.setProvisioningDate(System.currentTimeMillis());  product.setTechnicalProduct(technicalProduct);  product.setStatus(ServiceStatus.INACTIVE);  product.setType(ServiceType.TEMPLATE);  product.setAutoAssignUserEnabled(Boolean.FALSE);  ParameterSet emptyPS=new ParameterSet();  product.setParameterSet(emptyPS);  persist(product);  return product;}  }
class C{  public void write(int b){  return;}  }
class C{  public String[] split(String expr){  return Pattern.compile(expr).split(this);}  }
class C{  public float indexerScore(Text url,NutchDocument doc,CrawlDatum dbDatum,CrawlDatum fetchDatum,Parse parse,Inlinks inlinks,float initScore) throws ScoringFilterException {  return (float)Math.pow(dbDatum.getScore(),scorePower) * initScore;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void mergeGroupsAsObjects(Object3D object){  if (object.isContainer() && object.getNumChildren() == 1 && object.getChildAt(0).getName().startsWith("Object")) {    Object3D child=object.getChildAt(0);    object.removeChild(child);    child.setName(object.getName());    addChildSetParent(object.getParent(),child);    object.getParent().removeChild(object);    object=child;  }  for (int i=0; i < object.getNumChildren(); i++) {    mergeGroupsAsObjects(object.getChildAt(i));  }}  }
class C{  public static String encodeBase64URLSafeString(final byte[] binaryData){  return StringUtils.newStringUtf8(encodeBase64(binaryData,false,true));}  }
class C{  public static double maxLambdaLogisticL1(ClassificationDataSet cds){  final double D_part_i=0.5;  final int n=cds.getNumNumericalVars();  Vec delta_L=new DenseVector(n);  List<Vec> X=cds.getDataVectors();  for (int i=0; i < X.size(); i++) {    double y_i=cds.getDataPointCategory(i) * 2 - 1;    Vec x=X.get(i);    delta_L.mutableAdd(D_part_i * y_i,x);  }  return max(abs(delta_L.max()),abs(delta_L.min())) / (cds.getSampleSize());}  }
class C{  public DtoTaxConfigServiceImpl(final DtoFactory dtoFactory,final GenericService<TaxConfig> taxConfigGenericService,final GenericService<Tax> taxGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,taxConfigGenericService,adaptersRepository);  this.taxService=taxGenericService;}  }
class C{  protected int nextInDTDDeclarations() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case ']':nextChar();context=DOCTYPE_CONTEXT;inDTD=false;return LexicalUnits.RSQUARE_BRACKET;case '%':return readPEReference();case '<':switch (nextChar()) {case '?':context=PI_CONTEXT;return readPIStart();case '!':switch (nextChar()) {case '-':return readComment();case 'E':switch (nextChar()) {case 'L':context=ELEMENT_DECLARATION_CONTEXT;return readIdentifier("EMENT",LexicalUnits.ELEMENT_DECLARATION_START,-1);case 'N':context=ENTITY_CONTEXT;return readIdentifier("TITY",LexicalUnits.ENTITY_START,-1);default :throw createXMLException("invalid.character");}case 'A':context=ATTLIST_CONTEXT;return readIdentifier("TTLIST",LexicalUnits.ATTLIST_START,-1);case 'N':context=NOTATION_CONTEXT;return readIdentifier("OTATION",LexicalUnits.NOTATION_START,-1);default :throw createXMLException("invalid.character");}default :throw createXMLException("invalid.character");}default :throw createXMLException("invalid.character");}}  }
class C{  public StackedBarChartExample(final String title){  super(title);  final CategoryDataset dataset=createDataset();  final JFreeChart chart=createChart(dataset);  final ChartPanel chartPanel=new ChartPanel(chart);  chartPanel.setPreferredSize(new java.awt.Dimension(590,350));  setContentPane(chartPanel);}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){  if (comparator == null) {    return Collections.binarySearch((List<? extends Comparable<? super T>>)list,object);  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends T> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-comparator.compare(it.next(),object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=-comparator.compare(list.get(mid),object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte b1, b2;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1))) {      break;    }    end--;  }  int i=0;  while (i < end) {    while (i < end && ignore(data.charAt(i))) {      i++;    }    b1=decodingTable[data.charAt(i++)];    while (i < end && ignore(data.charAt(i))) {      i++;    }    b2=decodingTable[data.charAt(i++)];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex string");    }    out.write((b1 << 4) | b2);    length++;  }  return length;}  }
class C{  public List<byte[]> tryDecode(final String targetToken){  final ByteBuffer payloadBuf=extractValidPayloadFields(targetToken);  if (payloadBuf == null) {    return null;  }  final List<byte[]> fields=new ArrayList<>();  try {    byte[] field=null;    while ((field=tryReadPayloadNextField(payloadBuf)).length > 0) {      fields.add(field);      if (fields.size() > MAX_FIELD_SIZE) {        return null;      }    }    return fields;  } catch (  final BufferUnderflowException e) {    return null;  }}  }
class C{  protected void waitForMessagesToBeDelivered(){  long maxWaitTime=60000;  long waitTime=maxWaitTime;  long start=(maxWaitTime <= 0) ? 0 : System.currentTimeMillis();synchronized (lock) {    while (messages.size() < data.length && waitTime >= 0) {      try {        lock.wait(200);      } catch (      InterruptedException e) {        e.printStackTrace();      }      waitTime=maxWaitTime - (System.currentTimeMillis() - start);    }  }}  }
class C{  private void checkForSavingOrNot(ICoreService coreService,long methodId,long sensorTypeId,RegisteredSensorConfig rsc,InvocationSequenceData invocationSequenceData,double startTime,double endTime,double duration){  double minduration=minDurationMap.get(invocationStartId.get()).doubleValue();  if (duration >= minduration) {    if (LOG.isDebugEnabled()) {      LOG.debug("Saving invocation. " + duration + " > "+ minduration+ " ID(local): "+ rsc.getId());    }    invocationSequenceData.setDuration(duration);    invocationSequenceData.setStart(startTime);    invocationSequenceData.setEnd(endTime);    coreService.addMethodSensorData(sensorTypeId,methodId,String.valueOf(startTime),invocationSequenceData);  } else {    if (LOG.isDebugEnabled()) {      LOG.debug("Not saving invocation. " + duration + " < "+ minduration+ " ID(local): "+ rsc.getId());    }  }}  }
class C{  private void savePage(DataSetDesign dataSetDesign){  String queryText=getQueryText();  Properties props=new Properties();  props.put(Query.PROP_SETUP_QUERY_TEXT,getSetupQueryText());  dataSetDesign.setQueryText(queryText);  dataSetDesign.setPrivateProperties(DesignUtil.convertToDesignProperties(props));  IConnection customConn=null;  try {    IDriver customDriver=new Driver();    customConn=customDriver.getConnection(null);    java.util.Properties connProps=DesignSessionUtil.getEffectiveDataSourceProperties(getInitializationDesign().getDataSourceDesign());    customConn.open(connProps);    updateDesign(dataSetDesign,customConn,queryText);  } catch (  OdaException e) {    dataSetDesign.setResultSets(null);    dataSetDesign.setParameters(null);    e.printStackTrace();  } finally {    closeConnection(customConn);  }}  }
class C{  private List convertGraphToList(Graph solutionGraph){  impurePairs.clear();  Iterator<Node> it1=solutionGraph.getNodes().iterator();  List<Node> latentsList=new ArrayList<>();  List<ArrayList<Node>> clusters=new ArrayList<>();  while (it1.hasNext()) {    Node next=it1.next();    if (next.getNodeType() == NodeType.LATENT) {      latentsList.add(next);      clusters.add(new ArrayList<Node>());    }  }  it1=solutionGraph.getNodes().iterator();  while (it1.hasNext()) {    Node next=it1.next();    if (!(next.getNodeType() == NodeType.LATENT)) {      for (int w=0; w < latentsList.size(); w++) {        if (solutionGraph.getNodesInTo(next,Endpoint.ARROW).contains(latentsList.get(w))) {          (clusters.get(w)).add(next);        }      }    }  }  List arrayClusters=new ArrayList();  String names[]=tetradTest.getVarNames();  for (int w=0; w < clusters.size(); w++) {    List<Node> listCluster=clusters.get(w);    int newCluster[]=new int[listCluster.size()];    for (int v=0; v < newCluster.length; v++) {      for (int s=0; s < names.length; s++) {        if (names[s].equals(listCluster.get(v).toString())) {          newCluster[v]=s;          break;        }      }    }    arrayClusters.add(newCluster);  }  for (int i=0; i < solutionGraph.getNodes().size() - 1; i++) {    for (int j=i + 1; j < solutionGraph.getNodes().size(); j++) {      Node nodei=(Node)solutionGraph.getNodes().get(i);      Node nodej=(Node)solutionGraph.getNodes().get(j);      if (!(nodei.getNodeType() == NodeType.LATENT) && !(nodej.getNodeType() == NodeType.LATENT) && solutionGraph.isAdjacentTo(nodei,nodej)) {        impurePairs.add(solutionGraph.getNodes().get(i));        impurePairs.add(solutionGraph.getNodes().get(j));      }    }  }  return arrayClusters;}  }
class C{  @Override public void output(Vertex output){}  }
class C{  public void removeModelChange(String tableName,ModelValidator listener){  if (tableName == null || listener == null)   return;  String propertyName=m_globalValidators.contains(listener) ? tableName + "*" : tableName + listener.getAD_Client_ID();  ArrayList<ModelValidator> list=m_modelChangeListeners.get(propertyName);  if (list == null)   return;  list.remove(listener);  if (list.size() == 0)   m_modelChangeListeners.remove(propertyName);}  }
class C{  private void addSuccessMessage(RequestAndResponse requestAndResponse,String message) throws IOException {  requestAndResponse.print("<span class=\"successMessage\">" + message + "</span>");}  }
class C{  private void updatePreferences(){  Log.d(TAG,"Updating preferences");  analytics.setEnabled(preferenceFragment.findPreference(Analytics.PREF_KEY).isEnabled());}  }
class C{  private Object readResolve(){  return Minutes.minutes(getValue());}  }
class C{  FiringPlan guessFullAirToGroundPlan(Entity shooter,Targetable target,@Nullable EntityState targetState,MovePath flightPath,IGame game,boolean assumeUnderFlightPath){  final String METHOD_NAME="guessFullAirToGroundPlan(Entity, Targetable, EntityState, MovePath, IGame, " + "boolean)";  if (targetState == null) {    targetState=new EntityState(target);  }  if (!assumeUnderFlightPath && !isTargetUnderFlightPath(flightPath,targetState)) {    return new FiringPlan(target);  }  FiringPlan myPlan=new FiringPlan(target);  if ((shooter.getPosition() == null) || shooter.isOffBoard() || !game.getBoard().contains(shooter.getPosition())) {    owner.log(getClass(),METHOD_NAME,LogLevel.ERROR,"Shooter's position is NULL/Off Board!");    return myPlan;  }  if ((target.getPosition() == null) || target.isOffBoard() || !game.getBoard().contains(target.getPosition())) {    owner.log(getClass(),METHOD_NAME,LogLevel.ERROR,"Target's position is NULL/Off Board!");    return myPlan;  }  for (  Mounted weapon : shooter.getWeaponList()) {    WeaponFireInfo shoot=buildWeaponFireInfo(shooter,flightPath,target,targetState,weapon,game,true,true);    if (shoot.getProbabilityToHit() > 0) {      myPlan.add(shoot);    }  }  calculateUtility(myPlan,calcHeatTolerance(shooter,null),(shooter instanceof Aero));  return myPlan;}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  protected void sequence_TypeVariableWithDefSiteVariance(ISerializationContext context,TypeVariable semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public SOMGroupNode(final NetworkPanel networkPanel,final SOMGroup group){  super(networkPanel,group);  setCustomMenuItems();  setInteractionBox(new SOMInteractionBox(networkPanel));  updateText();}  }
class C{  public Buffer read() throws Exception {  VideoSample sample=(VideoSample)getPlayer().readSample();  if (sample == null) {    return null;  }  buffer.setData(sample.getData());  buffer.setLength(sample.getLength());  buffer.setFormat(getFormat());  buffer.setSequenceNumber(seqNo++);  if (sample.isMarker()) {    buffer.setFlags(Buffer.FLAG_RTP_MARKER);  }  buffer.setTimeStamp(sample.getTimeStamp());  buffer.setVideoOrientation(sample.getVideoOrientation());  return buffer;}  }
class C{  private Address scanFrame(int verbosity){  if (!setUpFrame(verbosity))   return fp;  scanFrameForObjects(verbosity);  if (processCodeLocations && compiledMethodType != CompiledMethod.TRAP)   processFrameForCode(verbosity);  iterator.cleanupPointers();  if (compiledMethodType != CompiledMethod.TRAP) {    if (compiledMethod.getMethod().getDeclaringClass().hasBridgeFromNativeAnnotation()) {      fp=RuntimeEntrypoints.unwindNativeStackFrameForGC(fp);      if (verbosity >= 2)       Log.write("scanFrame skipping native C frames\n");    }    if (reinstallReturnBarrier && verbosity == DEFAULT_VERBOSITY) {      thread.installStackTrampolineBridge(fp);      reinstallReturnBarrier=false;    }  }  return fp;}  }
class C{  @Override public void addAttribute(String name,int value){  ((Element)current).setAttribute(name,Integer.toString(value));}  }
class C{  public void removeNonExistingModule(final MemoryModule module){  Preconditions.checkNotNull(module,"IE02256: E00084: Module argument can not be null");  for (  final ProcessManagerListener listener : listeners) {    try {      listener.removedNonExistingModule(module);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  String password(){  return password;}  }
class C{  public void test_SelectDistinct() throws SQLException {  String selectQuery="SELECT DISTINCT rating FROM " + DatabaseCreator.CUSTOMERS_TABLE;  ResultSet result=statement.executeQuery(selectQuery);  HashSet<Integer> values=new HashSet<Integer>();  values.add(Integer.valueOf(100));  values.add(Integer.valueOf(200));  values.add(Integer.valueOf(300));  while (result.next()) {    Integer rating=result.getInt("rating");    assertTrue("result set doesn't contain value",values.contains(rating));    assertTrue("wrong value in the result set",values.remove(rating));  }  result.close();  assertTrue("Result set has wrong size",values.isEmpty());}  }
class C{  public boolean readCharacteristic(BluetoothGattCharacteristic charact,BleCharactCallback bleCallback){  if ((characteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_READ) > 0) {    setCharacteristicNotification(getBluetoothGatt(),charact,false);    handleCharacteristicReadCallback(bleCallback);    return handleAfterInitialed(getBluetoothGatt().readCharacteristic(charact),bleCallback);  } else {    if (bleCallback != null) {      bleCallback.onFailure(new OtherException("Characteristic [is not] readable!"));    }    return false;  }}  }
class C{  public static boolean addOreWasherRecipe(ItemStack aInput,int aWaterAmount,Object... aOutput){  if (aInput == null || aOutput == null || aOutput.length <= 0 || aOutput[0] == null)   return false;  GT_Utility.removeSimpleIC2MachineRecipe(aInput,getOreWashingRecipeList(),null);  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.orewashing,aInput,true))   return false;  NBTTagCompound tNBT=new NBTTagCompound();  tNBT.setInteger("amount",aWaterAmount);  GT_Utility.addSimpleIC2MachineRecipe(aInput,getOreWashingRecipeList(),tNBT,aOutput);  return true;}  }
class C{  public Builder facingExactMatch(boolean match){  criteria.facingExactMatch=match;  return (this);}  }
class C{  public synchronized void ensureCapacity(int minimumCapacity){  if (elementData.length < minimumCapacity) {    int next=(capacityIncrement <= 0 ? elementData.length : capacityIncrement) + elementData.length;    grow(minimumCapacity > next ? minimumCapacity : next);  }}  }
class C{  public boolean isEditing(OMGraphic omg){  boolean ret=false;  EditableOMGraphic eomg=getCurrentEditable();  if (eomg != null && eomg.getGraphic() == omg || (eomg instanceof EditableOMGraphicList && ((OMGraphicList)((EditableOMGraphicList)eomg).getGraphic()).contains(omg))) {    ret=true;  }  return ret;}  }
class C{  private void addNewMergedAttribute(AttributeWeightedExampleSet es,List<String> mergeList,FeatureGenerator generator) throws GenerationException {  Attribute mergeAttribute=null;  Iterator<String> i=mergeList.iterator();  while (i.hasNext()) {    Attribute currentAttribute=es.getAttributes().getRegular(i.next());    if (mergeAttribute == null) {      mergeAttribute=currentAttribute;    } else {      generator=generator.newInstance();      Attribute[] args=new Attribute[]{mergeAttribute,currentAttribute};      generator.setArguments(args);      List<FeatureGenerator> generatorList=new LinkedList<FeatureGenerator>();      generatorList.add(generator);      List<Attribute> newAttributes=FeatureGenerator.generateAll(es.getExampleTable(),generatorList);      mergeAttribute=newAttributes.get(0);    }  }  es.getAttributes().addRegular(mergeAttribute);}  }
class C{  public Pi(){  super("pi",0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.496 -0500",hash_original_method="056AA616A824F08818D1B78343E1C249",hash_generated_method="28FB349096C79F28004E74C0CD161B7C") protected void haltedProcessMessage(Message msg){}  }
class C{  private static String urlEncode(final String text) throws UnsupportedEncodingException {  return URLEncoder.encode(text,"UTF-8");}  }
class C{  public void removeAll(){  checkWidget();  items.clear();  redrawTables();}  }
class C{  public VerificationResult verify(String receivingUrl,ParameterList response,DiscoveryInformation discovered) throws MessageException, DiscoveryException, AssociationException {  VerificationResult result=new VerificationResult();  _log.info("Verifying authentication response...");  if ("cancel".equals(response.getParameterValue("openid.mode"))) {    result.setAuthResponse(AuthFailure.createAuthFailure(response));    _log.info("Received auth failure.");    return result;  }  if ("setup_needed".equals(response.getParameterValue("openid.mode")) || ("id_res".equals(response.getParameterValue("openid.mode")) && response.hasParameter("openid.user_setup_url"))) {    AuthImmediateFailure fail=AuthImmediateFailure.createAuthImmediateFailure(response);    result.setAuthResponse(fail);    result.setOPSetupUrl(fail.getUserSetupUrl());    _log.info("Received auth immediate failure.");    return result;  }  AuthSuccess authResp=AuthSuccess.createAuthSuccess(response);  _log.info("Received positive auth response.");  result.setAuthResponse(authResp);  if (!verifyReturnTo(receivingUrl,authResp)) {    result.setStatusMsg("Return_To URL verification failed.");    _log.error("Return_To URL verification failed.");    return result;  }  discovered=verifyDiscovered(authResp,discovered);  if (discovered == null || !discovered.hasClaimedIdentifier()) {    result.setStatusMsg("Discovered information verification failed.");    _log.error("Discovered information verification failed.");    return result;  }  if (!verifyNonce(authResp,discovered)) {    result.setStatusMsg("Nonce verification failed.");    _log.error("Nonce verification failed.");    return result;  }  return (verifySignature(authResp,discovered,result));}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(byteArrayToString(longitude,true));  sb.append(" ");  sb.append(byteArrayToString(latitude,true));  sb.append(" ");  sb.append(byteArrayToString(altitude,true));  return sb.toString();}  }
class C{  private void showErrorToast(String message){  Toast.makeText(LoginActivity.this,message,Toast.LENGTH_LONG).show();}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    DQSetupInfo dqSetupInfo=new DQSetupInfo();    dqSetupInfo.setPage(startPage);    dqSetupInfo.setPageSize(pageSize);    LOGGER.debug("Listing DQ properties on page" + dqSetupInfo.getPage());    List<Properties> propertiesList=dataQualityDAO.listDQSetup(startPage,pageSize);    DQSetupInfo dqSetup=new DQSetupInfo();    List<DQSetupInfo> dqSetups=new ArrayList<DQSetupInfo>();    int count=0;    int i=0;    for (    Properties properties : propertiesList) {      if (count % 5 == 0) {        dqSetups.add(i,new DQSetupInfo());      }      if (properties.getKey().equals(dqSetup.getRulesUserName())) {        dqSetups.get(i).setRulesUserNameValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getRulesPassword())) {        dqSetups.get(i).setRulesPasswordValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getRulesPackage())) {        dqSetups.get(i).setRulesPackageValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getFileDelimiterRegex())) {        dqSetups.get(i).setFileDelimiterRegexValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getMinPassThresholdPercent())) {        dqSetups.get(i).setMinPassThresholdPercentValue(properties.getValue());        count++;      } else       if (properties.getKey().equals(dqSetup.getProcessName())) {        dqSetups.get(i).setProcessName(properties.getValue());      }      if (count % 5 == 0) {        LOGGER.debug("The value of if statement is:" + count);        dqSetups.get(i).setDescription(properties.getDescription());        dqSetups.get(i).setParentProcessId(properties.getParentProcessId());        dqSetups.get(i).setSubProcessId(properties.getSubProcessId());        dqSetups.get(i).setCounter(properties.getCounter());        LOGGER.debug("parentprocess id is" + dqSetups.get(i).getSubProcessId() + ","+ dqSetups.get(i).getParentProcessId());        i++;      }    }    restWrapper=new RestWrapper(dqSetups,RestWrapper.OK);    LOGGER.info("All records listed from DQSetup by User:" + principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void move(Vector3 pos,Vector3 normal){  if (movable instanceof ViewDependent)   ((ViewDependent)movable).update(controller.getViewpointNode().getCamera());  movable.setLocation(pos.getX(),pos.getY(),pos.getZ(),false);}  }
class C{  public static int writeVariableInt(byte[] buff,int pos,int x){  if (x < 0) {    buff[pos++]=(byte)0xf0;    buff[pos++]=(byte)(x >> 24);    buff[pos++]=(byte)(x >> 16);    buff[pos++]=(byte)(x >> 8);    buff[pos]=(byte)x;    return 5;  } else   if (x < 0x80) {    buff[pos]=(byte)x;    return 1;  } else   if (x < 0x4000) {    buff[pos++]=(byte)(0x80 | (x >> 8));    buff[pos]=(byte)x;    return 2;  } else   if (x < 0x200000) {    buff[pos++]=(byte)(0xc0 | (x >> 16));    buff[pos++]=(byte)(x >> 8);    buff[pos]=(byte)x;    return 3;  } else   if (x < 0x10000000) {    buff[pos++]=(byte)(0xe0 | (x >> 24));    buff[pos++]=(byte)(x >> 16);    buff[pos++]=(byte)(x >> 8);    buff[pos]=(byte)x;    return 4;  } else {    buff[pos++]=(byte)0xf0;    buff[pos++]=(byte)(x >> 24);    buff[pos++]=(byte)(x >> 16);    buff[pos++]=(byte)(x >> 8);    buff[pos]=(byte)x;    return 5;  }}  }
class C{  public ExitPointSpecItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public void selectLevelOfDetail(RenderContext rc,Placemark placemark,double cameraDistance){  if (!(placemark instanceof MilStd2525Placemark)) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"MilStd2525LevelOfDetailSelector","selectLevelOfDetail","The placemark is not a MilStd2525Placemark"));  }  MilStd2525Placemark milStdPlacemark=(MilStd2525Placemark)placemark;  boolean highlighted=milStdPlacemark.isHighlighted();  boolean highlightChanged=this.lastHighlightState != highlighted;  if (cameraDistance > FAR_THRESHOLD) {    if (this.lastLevelOfDetail != LOW_LEVEL_OF_DETAIL || highlightChanged) {      String simpleCode=milStdPlacemark.symbolCode.substring(0,3) + "*------*****";      this.placemarkAttributes=MilStd2525.getPlacemarkAttributes(simpleCode,null,milStdPlacemark.attributes);      this.lastLevelOfDetail=LOW_LEVEL_OF_DETAIL;    }  } else   if (cameraDistance > NEAR_THRESHOLD) {    if (this.lastLevelOfDetail != MEDIUM_LEVEL_OF_DETAIL || highlightChanged) {      this.placemarkAttributes=MilStd2525.getPlacemarkAttributes(milStdPlacemark.symbolCode,null,milStdPlacemark.attributes);      this.lastLevelOfDetail=MEDIUM_LEVEL_OF_DETAIL;    }  } else {    if (this.lastLevelOfDetail != HIGHEST_LEVEL_OF_DETAIL || highlightChanged) {      this.placemarkAttributes=MilStd2525.getPlacemarkAttributes(milStdPlacemark.symbolCode,milStdPlacemark.modifiers,milStdPlacemark.attributes);      this.lastLevelOfDetail=HIGHEST_LEVEL_OF_DETAIL;    }  }  if (highlightChanged) {    if (highlighted) {      double scale=this.placemarkAttributes.getImageScale();      this.placemarkAttributes=new PlacemarkAttributes(this.placemarkAttributes).setImageScale(scale * 1.2);    }  }  this.lastHighlightState=highlighted;  if (this.placemarkAttributes != null) {    milStdPlacemark.setAttributes(this.placemarkAttributes);  }}  }
class C{  private void deleteSnapshot(int ver) throws IOException {  if (ver == 0)   return;  deleteFile(versionName(snapshotPrefix,ver));}  }
class C{  public NotImplementedException(final String message,final Throwable cause,final String code){  super(message,cause);  this.code=code;}  }
class C{  private static void populateValues(String[] values,Cursor cursor,int[] columnIndicies,int startingIndex){  assert startingIndex == 0 || startingIndex == 1;  for (int i=0; i < columnIndicies.length; i++) {    values[startingIndex + i * 2]=cursor.getString(columnIndicies[i]);  }}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public SetParams px(long millisecondsToExpire){  addParam(PX,millisecondsToExpire);  return this;}  }
class C{  public static void drawBounds(Canvas canvas,Paint paint,float size,RectF rect){  drawBounds(canvas,paint,size,rect.left,rect.top,rect.right,rect.bottom);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int defineTag(int ifdId,short tagId){  return (tagId & 0x0000ffff) | (ifdId << 16);}  }
class C{  public GutterIconInfo addOffsetTrackingIcon(int offs,Icon icon) throws BadLocationException {  return iconArea.addOffsetTrackingIcon(offs,icon);}  }
class C{  public LocalDateTime withMinimumValue(){  return setCopy(getMinimumValue());}  }
class C{  public final BottomSheet show(){  bottomSheet.show();  return bottomSheet;}  }
class C{  public static boolean isValidPubid(int c){  return c < NUMBER_OF_CHARACTERS && (MASKS[c] & PUBID_CHARACTER) != 0;}  }
class C{  public LTRPulseShapingFilter(){  mBuffer=new BitSet();  mBuffer.clear();}  }
class C{  public double nextDouble(){  return nextDouble(this.my_k);}  }
class C{  private E xfer(E e,boolean haveData,int how,long nanos){  if (haveData && (e == null))   throw new NullPointerException();  Node s=null;  retry:   for (; ; ) {    for (Node h=head, p=h; p != null; ) {      boolean isData=p.isData;      Object item=p.item;      if (item != p && (item != null) == isData) {        if (isData == haveData)         break;        if (p.casItem(item,e)) {          for (Node q=p; q != h; ) {            Node n=q.next;            if (head == h && casHead(h,n == null ? q : n)) {              h.forgetNext();              break;            }            if ((h=head) == null || (q=h.next) == null || !q.isMatched())             break;          }          LockSupport.unpark(p.waiter);          return this.<E>cast(item);        }      }      Node n=p.next;      p=(p != n) ? n : (h=head);    }    if (how != NOW) {      if (s == null)       s=new Node(e,haveData);      Node pred=tryAppend(s,haveData);      if (pred == null)       continue retry;      if (how != ASYNC)       return awaitMatch(s,pred,e,(how == TIMED),nanos);    }    return e;  }}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  private Type erasure(Type t){  return types.erasure(t);}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  public boolean hasChanged(){  if (m_text != null)   if (m_oldText != null)   return !m_oldText.equals(m_text.getDisplay()); else   return true; else   if (m_oldText != null)   return true;  if (m_pAttributeWhere != null)   if (m_oldWhere != null)   return !m_oldWhere.equals(m_pAttributeWhere); else   return true; else   if (m_oldWhere != null)   return true;  return false;}  }
class C{  @Override public void screen(String category,String name,Properties properties){  try {    if (analytics != null) {      analytics.screen(category,name,properties);    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public boolean updateDepthBuffer(){  boolean changed=false;  if (this.depthBuffer && this.geometryBuffer != null) {    if (this.geometryDepthBuffer == null) {      this.geometryDepthBuffer=new DepthBuffer();      changed=true;    }    if (this.geometryDepthBuffer.blitDepthBuffer(this.geometryBuffer))     changed=true;  }  return changed;}  }
class C{  public static void releaseLoader(URLClassLoader classLoader){  releaseLoader(classLoader,null);}  }
class C{  public BadPartitioningException(){}  }
class C{  protected void assertCustomer(Customer actual,Customer expected){  assertThat(actual,is(not(nullValue())));  assertThat(actual.getId(),is(expected.getId()));  assertThat(actual.getName(),is(expected.getName()));  List<String> actualPhoneNumbers=actual.getPhoneNumbers();  List<String> expectedPhoneNumbers=expected.getPhoneNumbers();  assertThat(actualPhoneNumbers.size(),is(expectedPhoneNumbers.size()));  int phoneNumberIndex=0;  for (  String phoneNumber : actualPhoneNumbers) {    assertThat(phoneNumber,is(expectedPhoneNumbers.get(phoneNumberIndex++)));  }  List<Address> actualAddresses=actual.getAddress();  List<Address> expectedAddresses=expected.getAddress();  assertThat(actualAddresses.size(),is(expectedAddresses.size()));  int addressIndex=0;  for (  Address address : actualAddresses) {    assertAddress(address,expectedAddresses.get(addressIndex++));  }  assertThat(actual.getDateTime(),is(expected.getDateTime()));  List<Order> actualOrders=actual.getOrders();  List<Order> expectedOrders=expected.getOrders();  assertThat(actualOrders.size(),is(expectedOrders.size()));  int orderIndex=0;  for (  Order order : actualOrders) {    assertOrder(order,expectedOrders.get(orderIndex++));  }  assertBankAccount(actual.getBankAccount(),expected.getBankAccount());}  }
class C{  public Alignment simulate(){  NodeRef root=m_tree.getRoot();  double[] categoryProbs=m_siteModel.getCategoryProportions();  int[] category=new int[m_sequenceLength];  for (int i=0; i < m_sequenceLength; i++) {    category[i]=MathUtils.randomChoicePDF(categoryProbs);  }  int[] seq=new int[m_sequenceLength];  if (has_ancestralSequence) {    seq=sequence2intArray(ancestralSequence);  } else {    FrequencyModel frequencyModel=m_siteModel.getFrequencyModel();    for (int i=0; i < m_sequenceLength; i++) {      seq[i]=MathUtils.randomChoicePDF(frequencyModel.getFrequencies());    }  }  if (DEBUG) {synchronized (this) {      System.out.println();      System.out.println("root Sequence:");      Utils.printArray(seq);    }  }  SimpleAlignment alignment=new SimpleAlignment();  alignment.setReportCountStatistics(false);  alignment.setDataType(m_siteModel.getFrequencyModel().getDataType());  traverse(root,seq,category,alignment);  return alignment;}  }
class C{  private <V>RunnableScheduledFuture<V> trackTask(RunnableScheduledFuture<V> task){  task=new TrackedFuture<V>(task);  asyncTasks.add(task);  return task;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  private CRemoteBrowserHelpers(){}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public Dimension stringSize(FontMetrics f){  Dimension d=new Dimension();  int old=0;  String s;  int noa=0;  while ((s=getLine(noa)) != null) {    noa++;    old=f.stringWidth(s);    if (old > d.width) {      d.width=old;    }  }  d.height=noa * f.getHeight();  return d;}  }
class C{  protected void sendEntriesToSwitch(DatapathId switchId){  IOFSwitch sw=switchService.getSwitch(switchId);  if (sw == null)   return;  String stringId=sw.getId().toString();  if ((entriesFromStorage != null) && (entriesFromStorage.containsKey(stringId))) {    Map<String,OFFlowMod> entries=entriesFromStorage.get(stringId);    List<String> sortedList=new ArrayList<String>(entries.keySet());    Collections.sort(sortedList,new FlowModSorter(stringId));    for (    String entryName : sortedList) {      OFFlowMod flowMod=entries.get(entryName);      if (flowMod != null) {        if (log.isDebugEnabled()) {          log.debug("Pushing static entry {} for {}",stringId,entryName);        }        writeFlowModToSwitch(sw,flowMod);      }    }  }}  }
class C{  protected Object postNodeCompletion(Object parent,Object node){  for (  Closure postNodeCompletionDelegate : getProxyBuilder().getPostNodeCompletionDelegates()) {    (postNodeCompletionDelegate).call(new Object[]{this,parent,node});  }  return node;}  }
class C{  public Lambda(Node node,String variableName,Class<?> variableType){  this(node,new String[]{variableName},new Class<?>[]{variableType});}  }
class C{  public void reenableWarnings(){  warningsCleared=false;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_guard_2_();}  }
class C{  public static String repeat(String source,int count){  StringBand result=new StringBand(count);  while (count > 0) {    result.append(source);    count--;  }  return result.toString();}  }
class C{  protected void close(){  if (cursor != null) {    cursor.close();    cursor=null;    state=State.EXHAUSTED;  }}  }
class C{  private void paintCheckIconSelectedAndMouseOver(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createCheckMark(0,0,width,height);  g.setPaint(iconSelectedMouseOver);  g.fill(s);}  }
class C{  public final TextBuilder append(long l){  if (l <= 0) {    if (l == 0)     return append("0");    if (l == Long.MIN_VALUE)     return append("-9223372036854775808");    append('-');    l=-l;  }  if (l <= Integer.MAX_VALUE)   return append((int)l);  append(l / 1000000000);  int i=(int)(l % 1000000000);  int digits=MathLib.digitLength(i);  append("000000000",0,9 - digits);  return append(i);}  }
class C{  public static boolean isBlank(String s){  return ((null == s) || (EMPTY_STRING.equals(s.trim())));}  }
class C{  public final void error(String str){  Space.printUsagePages();  Space.printUsageMB();  fail(str);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public BulkRequest add(ActionRequest... requests){  for (  ActionRequest request : requests) {    add(request,null);  }  return this;}  }
class C{  public static NetworkManagerWrapper wrapNetworkManager(Player player){  try {    PlayerConnection connection=((CraftPlayer)player).getHandle().playerConnection;    if (connection.networkManager instanceof NetworkManagerWrapper)     return (NetworkManagerWrapper)connection.networkManager;    Field field=PlayerConnection.class.getDeclaredField("networkManager");    Field modifiersField=Field.class.getDeclaredField("modifiers");    modifiersField.setAccessible(true);    modifiersField.setInt(field,field.getModifiers() & ~Modifier.FINAL);    NetworkManagerWrapper wrapper=NetworkManagerWrapper.wrap(connection.networkManager);    field.set(connection,wrapper);    return wrapper;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void joinParticleGroups(ParticleGroup groupA,ParticleGroup groupB){  assert (isLocked() == false);  if (isLocked()) {    return;  }  m_particleSystem.joinParticleGroups(groupA,groupB);}  }
class C{  public static void copyToClipboard(final ZyGraphNode<?> node,final int line){  Preconditions.checkNotNull(node,"Error: Node argument can not be null");  final IZyNodeRealizer realizer=node.getRealizer();  final ZyLabelContent content=realizer.getNodeContent();  Preconditions.checkArgument((line >= 0) && (line < content.getLineCount()),"Error: Line argument is out of bounds");  if (content.isSelectable()) {    final ZyLabelContent zyContent=content;    ClipboardHelpers.copyToClipboard(zyContent.getLineContent(line).getText());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Matrix radialGradientMatrix(ScalableGradientNode gradient,Rect pathBounds){  MatrixNode mtxNode=gradient.getMatrixNode();  if (mtxNode != null) {    double tx=mtxNode.tx;    double ty=mtxNode.ty;    FXGMatrix fxgMtx=new FXGMatrix(mtxNode.a,mtxNode.b,mtxNode.c,mtxNode.d,0,0);    fxgMtx.scale(SwfConstants.TWIPS_PER_PIXEL / (float)SwfConstants.GRADIENT_SQUARE,SwfConstants.TWIPS_PER_PIXEL / (float)SwfConstants.GRADIENT_SQUARE);    fxgMtx.translate(tx,ty);    return fxgMtx.toSWFMatrix();  }  double w=!Double.isNaN(gradient.getScaleX()) ? gradient.getScaleX() * SwfConstants.TWIPS_PER_PIXEL : pathBounds.getWidth();  double h=!Double.isNaN(gradient.getScaleY()) ? gradient.getScaleY() * SwfConstants.TWIPS_PER_PIXEL : pathBounds.getHeight();  double tx=(!Double.isNaN(gradient.getX()) ? gradient.getX() : (pathBounds.xMax + pathBounds.xMin) / (2.0 * SwfConstants.TWIPS_PER_PIXEL));  double ty=(!Double.isNaN(gradient.getY()) ? gradient.getY() : (pathBounds.yMax + pathBounds.yMin) / (2.0 * SwfConstants.TWIPS_PER_PIXEL));  FXGMatrix matrix=new FXGMatrix();  matrix.scale(w / SwfConstants.GRADIENT_SQUARE,h / SwfConstants.GRADIENT_SQUARE);  if (!Double.isNaN(gradient.getRotation()) && (gradient.getRotation() != 0))   matrix.rotate(gradient.getRotation());  matrix.translate(tx,ty);  return matrix.toSWFMatrix();}  }
class C{  public static String handleException(Object source,String msg,Throwable t,boolean silent){  String result;  result=msg.trim() + "\n" + Utils.throwableToString(t);  if (!silent) {    if (source != null)     System.err.println(source.getClass().getName());    System.err.println(result);  }  return result;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static void handleEncodings(Map<String,String> info) throws SQLException {  final IEncodingFactory encodingFactory=EncodingFactory.getPlatformDefault();  final String iscEncoding=info.get("isc_dpb_lc_ctype");  final String localEncoding=info.get("isc_dpb_local_encoding");  final EncodingDefinition encodingDefinition=encodingFactory.getEncodingDefinition(iscEncoding,localEncoding);  if (encodingDefinition != null) {    if (!encodingDefinition.isInformationOnly()) {      info.put("isc_dpb_local_encoding",encodingDefinition.getJavaEncodingName());    }    info.put("isc_dpb_lc_ctype",encodingDefinition.getFirebirdEncodingName());  } else   if (iscEncoding != null) {    log.warn("No EncodingDefinition for " + iscEncoding + " / "+ localEncoding+ " specifying "+ iscEncoding+ " as connection encoding");    info.put("isc_dpb_lc_ctype",iscEncoding);  } else   if (localEncoding != null) {    log.warn("No EncodingDefinition for " + localEncoding + "; ignoring connection encoding");  }  String mappingPath=info.get("isc_dpb_mapping_path");  if (encodingDefinition != null && mappingPath != null) {    encodingDefinition.getEncoding().withTranslation(encodingFactory.getCharacterTranslator(mappingPath));  }}  }
class C{  private PubsubFuture<Subscription> createSubscription(final Subscription subscription){  return createSubscription(subscription.name(),subscription);}  }
class C{  public Cursor convertCursor(Element e){  Value cursorValue=CSSUtilities.getComputedStyle(e,SVGCSSEngine.CURSOR_INDEX);  String cursorStr=SVGConstants.SVG_AUTO_VALUE;  if (cursorValue != null) {    if (cursorValue.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE && cursorValue.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {      cursorStr=cursorValue.getStringValue();      return convertBuiltInCursor(e,cursorStr);    } else     if (cursorValue.getCssValueType() == CSSValue.CSS_VALUE_LIST) {      int nValues=cursorValue.getLength();      if (nValues == 1) {        cursorValue=cursorValue.item(0);        if (cursorValue.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {          cursorStr=cursorValue.getStringValue();          return convertBuiltInCursor(e,cursorStr);        }      } else       if (nValues > 1) {        return convertSVGCursor(e,cursorValue);      }    }  }  return convertBuiltInCursor(e,cursorStr);}  }
class C{  public static void w(String msg){  if (BuildConfig.DEBUG)   android.util.Log.w(TAG,buildMessage(msg));}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  Paint paint=gc.getPaint();  return toSVG((GradientPaint)paint);}  }
class C{  public void startServer() throws Exception {  server=new LdapServer();  int serverPort=10389;  server.setTransports(new TcpTransport(serverPort));  server.setDirectoryService(service);  server.start();}  }
class C{  public void removeTab(String name){  this.tabs.remove(name);  render();}  }
class C{  public Solution test(Solution parent,Solution offspring){  AdaptiveGridArchive archive=getArchive();  int parentIndex=archive.findIndex(parent);  int offspringIndex=archive.findIndex(offspring);  if (parentIndex == -1) {    return offspring;  } else   if (offspringIndex == -1) {    return parent;  } else   if (archive.getDensity(parentIndex) > archive.getDensity(offspringIndex)) {    return offspring;  } else {    return parent;  }}  }
class C{  public static String toString(long value){  return Long.toString(value);}  }
class C{  public Boolean isIsDefault(){  return isDefault;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public PriorityQueue(SortedSet<? extends E> c){  getFromSortedSet(c);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.918 -0500",hash_original_method="788172F4432069DD19F6D1F4ED0FDE85",hash_generated_method="B16D1BB8705D157654A596714DBB3827") protected synchronized void engineNextBytes(byte[] bytes){  int i, n;  long bits;  int nextByteToReturn;  int lastWord;  final int extrabytes=7;  if (bytes == null) {    throw new NullPointerException("bytes == null");  }  lastWord=seed[BYTES_OFFSET] == 0 ? 0 : (seed[BYTES_OFFSET] + extrabytes) >> 3 - 1;  if (state == UNDEFINED) {    updateSeed(RandomBitsSupplier.getRandomBits(DIGEST_LENGTH));    nextBIndex=HASHBYTES_TO_USE;  } else   if (state == SET_SEED) {    System.arraycopy(seed,HASH_OFFSET,copies,HASHCOPY_OFFSET,EXTRAFRAME_OFFSET);    for (i=lastWord + 3; i < FRAME_LENGTH + 2; i++) {      seed[i]=0;    }    bits=(seedLength << 3) + 64;    if (seed[BYTES_OFFSET] < MAX_BYTES) {      seed[14]=(int)(bits >>> 32);      seed[15]=(int)(bits & 0xFFFFFFFF);    } else {      copies[EXTRAFRAME_OFFSET + 14]=(int)(bits >>> 32);      copies[EXTRAFRAME_OFFSET + 15]=(int)(bits & 0xFFFFFFFF);    }    nextBIndex=HASHBYTES_TO_USE;  }  state=NEXT_BYTES;  if (bytes.length == 0) {    return;  }  nextByteToReturn=0;  n=(HASHBYTES_TO_USE - nextBIndex) < (bytes.length - nextByteToReturn) ? HASHBYTES_TO_USE - nextBIndex : bytes.length - nextByteToReturn;  if (n > 0) {    System.arraycopy(nextBytes,nextBIndex,bytes,nextByteToReturn,n);    nextBIndex+=n;    nextByteToReturn+=n;  }  if (nextByteToReturn >= bytes.length) {    return;  }  n=seed[BYTES_OFFSET] & 0x03;  for (; ; ) {    if (n == 0) {      seed[lastWord]=(int)(counter >>> 32);      seed[lastWord + 1]=(int)(counter & 0xFFFFFFFF);      seed[lastWord + 2]=END_FLAGS[0];    } else {      seed[lastWord]|=(int)((counter >>> RIGHT1[n]) & MASK[n]);      seed[lastWord + 1]=(int)((counter >>> RIGHT2[n]) & 0xFFFFFFFF);      seed[lastWord + 2]=(int)((counter << LEFT[n]) | END_FLAGS[n]);    }    if (seed[BYTES_OFFSET] > MAX_BYTES) {      copies[EXTRAFRAME_OFFSET]=seed[FRAME_LENGTH];      copies[EXTRAFRAME_OFFSET + 1]=seed[FRAME_LENGTH + 1];    }    SHA1Impl.computeHash(seed);    if (seed[BYTES_OFFSET] > MAX_BYTES) {      System.arraycopy(seed,0,copies,FRAME_OFFSET,FRAME_LENGTH);      System.arraycopy(copies,EXTRAFRAME_OFFSET,seed,0,FRAME_LENGTH);      SHA1Impl.computeHash(seed);      System.arraycopy(copies,FRAME_OFFSET,seed,0,FRAME_LENGTH);    }    counter++;    int j=0;    for (i=0; i < EXTRAFRAME_OFFSET; i++) {      int k=seed[HASH_OFFSET + i];      nextBytes[j]=(byte)(k >>> 24);      nextBytes[j + 1]=(byte)(k >>> 16);      nextBytes[j + 2]=(byte)(k >>> 8);      nextBytes[j + 3]=(byte)(k);      j+=4;    }    nextBIndex=0;    j=HASHBYTES_TO_USE < (bytes.length - nextByteToReturn) ? HASHBYTES_TO_USE : bytes.length - nextByteToReturn;    if (j > 0) {      System.arraycopy(nextBytes,0,bytes,nextByteToReturn,j);      nextByteToReturn+=j;      nextBIndex+=j;    }    if (nextByteToReturn >= bytes.length) {      break;    }  }}  }
class C{  private static void doExecuteSuccess(Object activity,int requestCode){  executeMethod(activity,MPermissionUtil.findMethodWithRequestCode(activity.getClass(),OnMPermissionGranted.class,requestCode));}  }
class C{  private static RegExp compile(CharacterClass... regexPattern){  List<String> ss=from(regexPattern);  String pattern=ListHelper.join(ss,"|");  return RegExp.compile(pattern,"g");}  }
class C{  private boolean isMethodsPageEmpty(Eml eml){  String studyExtent=eml.getStudyExtent();  String sample=eml.getSampleDescription();  String quality=eml.getQualityControl();  List<String> methods=eml.getMethodSteps();  for (  String method : methods) {    if (!Strings.isNullOrEmpty(method)) {      return false;    }  }  return (Strings.isNullOrEmpty(studyExtent) && Strings.isNullOrEmpty(sample) && Strings.isNullOrEmpty(quality));}  }
class C{  public RocSortOrder sortOrder(){  return mSortOrder;}  }
class C{  public String toString(){  String toWrite="";  for (int j=0; j < _size; j++) {    for (int k=0; k < _size; k++) {      if (_cells[j][k].getAlive()) {        toWrite+="X";      } else {        toWrite+=".";      }    }    toWrite+="\n";  }  return toWrite;}  }
class C{  protected void checkTxDataSource(String configuration,DataSourceFixture dataSourceFixture) throws Exception {  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.jndiLocation,pathToTxDataSource + "/@JNDIName",configuration);  XMLAssert.assertXpathEvaluatesTo(dataSourceFixture.jndiLocation,pathToTxDataSource + "/@PoolName",configuration);  XMLAssert.assertXpathEvaluatesTo(serverName,pathToTxDataSource + "/@Targets",configuration);  XMLAssert.assertXpathEvaluatesTo("server",pathToTxDataSource + "/@Targets",configuration);  XMLAssert.assertXpathNotExists("//JDBCDataSource",configuration);}  }
class C{  protected void constructLops(){  try {    dmlTranslator.constructLops(dmlProgram);  } catch (  ParseException e) {    throw new MLContextException("Exception occurred while constructing LOPS (low-level operators)",e);  }catch (  LanguageException e) {    throw new MLContextException("Exception occurred while constructing LOPS (low-level operators)",e);  }catch (  HopsException e) {    throw new MLContextException("Exception occurred while constructing LOPS (low-level operators)",e);  }catch (  LopsException e) {    throw new MLContextException("Exception occurred while constructing LOPS (low-level operators)",e);  }}  }
class C{  public JPanel(LayoutManager layout){  this(layout,true);}  }
class C{  @RequestProcessing(value="/top/checkin",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showCheckin(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("/top/checkin.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  final List<JSONObject> users=activityQueryService.getTopCheckinUsers(Symphonys.getInt("topCheckinCnt"));  dataModel.put(Common.TOP_CHECKIN_USERS,users);  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public double deltaForward(){  final double temp=stdDev * forward;  final double DalphaDforward=dAlpha_dD1 / temp;  final double DbetaDforward=dBeta_dD2 / temp;  final double temp2=DalphaDforward * forward + alpha + DbetaDforward * x;  return discount * temp2;}  }
class C{  public static Paint newCornerPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_CORNER_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint cornerPaint=new Paint();  cornerPaint.setColor(DEFAULT_CORNER_COLOR);  cornerPaint.setStrokeWidth(lineThicknessPx);  cornerPaint.setStyle(Paint.Style.STROKE);  return cornerPaint;}  }
class C{  public void testDeadlocksCreate() throws Exception {  checkDeadlocksRepeat(5,2,2,2,0,0,0,0,CREATE_CNT);}  }
class C{  public void testParsingAndSearching() throws Exception {  String field="content";  String docs[]={"\\ abcdefg1","\\79 hijklmn1","\\\\ opqrstu1"};  Query matchAll[]={new WildcardQuery(new Term(field,"*")),new WildcardQuery(new Term(field,"*1")),new WildcardQuery(new Term(field,"**1")),new WildcardQuery(new Term(field,"*?")),new WildcardQuery(new Term(field,"*?1")),new WildcardQuery(new Term(field,"?*1")),new WildcardQuery(new Term(field,"**")),new WildcardQuery(new Term(field,"***")),new WildcardQuery(new Term(field,"\\\\*"))};  Query matchNone[]={new WildcardQuery(new Term(field,"a*h")),new WildcardQuery(new Term(field,"a?h")),new WildcardQuery(new Term(field,"*a*h")),new WildcardQuery(new Term(field,"?a")),new WildcardQuery(new Term(field,"a?"))};  PrefixQuery matchOneDocPrefix[][]={{new PrefixQuery(new Term(field,"a")),new PrefixQuery(new Term(field,"ab")),new PrefixQuery(new Term(field,"abc"))},{new PrefixQuery(new Term(field,"h")),new PrefixQuery(new Term(field,"hi")),new PrefixQuery(new Term(field,"hij")),new PrefixQuery(new Term(field,"\\7"))},{new PrefixQuery(new Term(field,"o")),new PrefixQuery(new Term(field,"op")),new PrefixQuery(new Term(field,"opq")),new PrefixQuery(new Term(field,"\\\\"))}};  WildcardQuery matchOneDocWild[][]={{new WildcardQuery(new Term(field,"*a*")),new WildcardQuery(new Term(field,"*ab*")),new WildcardQuery(new Term(field,"*abc**")),new WildcardQuery(new Term(field,"ab*e*")),new WildcardQuery(new Term(field,"*g?")),new WildcardQuery(new Term(field,"*f?1"))},{new WildcardQuery(new Term(field,"*h*")),new WildcardQuery(new Term(field,"*hi*")),new WildcardQuery(new Term(field,"*hij**")),new WildcardQuery(new Term(field,"hi*k*")),new WildcardQuery(new Term(field,"*n?")),new WildcardQuery(new Term(field,"*m?1")),new WildcardQuery(new Term(field,"hij**"))},{new WildcardQuery(new Term(field,"*o*")),new WildcardQuery(new Term(field,"*op*")),new WildcardQuery(new Term(field,"*opq**")),new WildcardQuery(new Term(field,"op*q*")),new WildcardQuery(new Term(field,"*u?")),new WildcardQuery(new Term(field,"*t?1")),new WildcardQuery(new Term(field,"opq**"))}};  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));  for (int i=0; i < docs.length; i++) {    Document doc=new Document();    doc.add(newTextField(field,docs[i],Field.Store.NO));    iw.addDocument(doc);  }  iw.close();  IndexReader reader=DirectoryReader.open(dir);  IndexSearcher searcher=newSearcher(reader);  for (  Query q : matchAll) {    if (VERBOSE)     System.out.println("matchAll: q=" + q + " "+ q.getClass().getName());    ScoreDoc[] hits=searcher.search(q,1000).scoreDocs;    assertEquals(docs.length,hits.length);  }  for (  Query q : matchNone) {    if (VERBOSE)     System.out.println("matchNone: q=" + q + " "+ q.getClass().getName());    ScoreDoc[] hits=searcher.search(q,1000).scoreDocs;    assertEquals(0,hits.length);  }  for (int i=0; i < matchOneDocPrefix.length; i++) {    for (int j=0; j < matchOneDocPrefix[i].length; j++) {      Query q=matchOneDocPrefix[i][j];      if (VERBOSE)       System.out.println("match 1 prefix: doc=" + docs[i] + " q="+ q+ " "+ q.getClass().getName());      ScoreDoc[] hits=searcher.search(q,1000).scoreDocs;      assertEquals(1,hits.length);      assertEquals(i,hits[0].doc);    }  }  for (int i=0; i < matchOneDocWild.length; i++) {    for (int j=0; j < matchOneDocWild[i].length; j++) {      Query q=matchOneDocWild[i][j];      if (VERBOSE)       System.out.println("match 1 wild: doc=" + docs[i] + " q="+ q+ " "+ q.getClass().getName());      ScoreDoc[] hits=searcher.search(q,1000).scoreDocs;      assertEquals(1,hits.length);      assertEquals(i,hits[0].doc);    }  }  reader.close();  dir.close();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.647 -0500",hash_original_method="1178A5AAEAFD3956E42497222F39B739",hash_generated_method="1E775A118847D9F735DCABC8A65D2104") synchronized static void computePRF(byte[] out,byte[] secret,byte[] str_byts,byte[] seed) throws GeneralSecurityException {  if (sha_mac == null) {    init();  }  SecretKeySpec keyMd5;  SecretKeySpec keySha1;  if ((secret == null) || (secret.length == 0)) {    secret=new byte[8];    keyMd5=new SecretKeySpec(secret,"HmacMD5");    keySha1=new SecretKeySpec(secret,"HmacSHA1");  } else {    int length=secret.length >> 1;    int offset=secret.length & 1;    keyMd5=new SecretKeySpec(secret,0,length + offset,"HmacMD5");    keySha1=new SecretKeySpec(secret,length,length + offset,"HmacSHA1");  }  if (logger != null) {    logger.println("secret[" + secret.length + "]: ");    logger.printAsHex(16,""," ",secret);    logger.println("label[" + str_byts.length + "]: ");    logger.printAsHex(16,""," ",str_byts);    logger.println("seed[" + seed.length + "]: ");    logger.printAsHex(16,""," ",seed);    logger.println("MD5 key:");    logger.printAsHex(16,""," ",keyMd5.getEncoded());    logger.println("SHA1 key:");    logger.printAsHex(16,""," ",keySha1.getEncoded());  }  md5_mac.init(keyMd5);  sha_mac.init(keySha1);  int pos=0;  md5_mac.update(str_byts);  byte[] hash=md5_mac.doFinal(seed);  while (pos < out.length) {    md5_mac.update(hash);    md5_mac.update(str_byts);    md5_mac.update(seed);    if (pos + md5_mac_length < out.length) {      md5_mac.doFinal(out,pos);      pos+=md5_mac_length;    } else {      System.arraycopy(md5_mac.doFinal(),0,out,pos,out.length - pos);      break;    }    hash=md5_mac.doFinal(hash);  }  if (logger != null) {    logger.println("P_MD5:");    logger.printAsHex(md5_mac_length,""," ",out);  }  pos=0;  sha_mac.update(str_byts);  hash=sha_mac.doFinal(seed);  byte[] sha1hash;  while (pos < out.length) {    sha_mac.update(hash);    sha_mac.update(str_byts);    sha1hash=sha_mac.doFinal(seed);    for (int i=0; (i < sha_mac_length) & (pos < out.length); i++) {      out[pos++]^=sha1hash[i];    }    hash=sha_mac.doFinal(hash);  }  if (logger != null) {    logger.println("PRF:");    logger.printAsHex(sha_mac_length,""," ",out);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void stopTempSensorManager(){  if (tempSensorManager != null) {    SensorManagerFactory.releaseTempSensorManager();    tempSensorManager=null;  }}  }
class C{  public boolean isInJavadocFormalReference(){  return (this.javadoc & CompletionOnJavadoc.FORMAL_REFERENCE) != 0;}  }
class C{  public String toString(){  return thisX500Name.toString();}  }
class C{  void read(DatabaseMetaData metaData) throws SQLException {  ResultSet rs=null;  try {    rs=metaData.getPrimaryKeys(null,schema,table);    while (rs.next()) {      String c=rs.getString("COLUMN_NAME");      primaryKeys.add(c);    }    JdbcUtils.closeSilently(rs);    rs=metaData.getIndexInfo(null,schema,table,false,true);    indexes=New.hashMap();    while (rs.next()) {      IndexInspector info=new IndexInspector(rs);      if (info.type.equals(IndexType.UNIQUE) && info.name.toLowerCase().startsWith("primary")) {        continue;      }      if (indexes.containsKey(info.name)) {        indexes.get(info.name).addColumn(rs);      } else {        indexes.put(info.name,info);      }    }    JdbcUtils.closeSilently(rs);    rs=metaData.getColumns(null,schema,table,null);    columns=New.hashMap();    while (rs.next()) {      ColumnInspector col=new ColumnInspector();      col.name=rs.getString("COLUMN_NAME");      col.type=rs.getString("TYPE_NAME");      col.clazz=ModelUtils.getClassForSqlType(col.type,dateTimeClass);      col.size=rs.getInt("COLUMN_SIZE");      col.allowNull=rs.getInt("NULLABLE") == DatabaseMetaData.columnNullable;      col.isAutoIncrement=rs.getBoolean("IS_AUTOINCREMENT");      if (primaryKeys.size() == 1) {        if (col.name.equalsIgnoreCase(primaryKeys.get(0))) {          col.isPrimaryKey=true;        }      }      if (!col.isAutoIncrement) {        col.defaultValue=rs.getString("COLUMN_DEF");      }      columns.put(col.name,col);    }  }  finally {    JdbcUtils.closeSilently(rs);  }}  }
class C{  protected double[] kNNDistances(){  int k=getEntry(0).getKnnDistances().length;  double[] result=new double[k];  for (int i=0; i < getNumEntries(); i++) {    for (int j=0; j < k; j++) {      MkTabEntry entry=getEntry(i);      result[j]=Math.max(result[j],entry.getKnnDistance(j + 1));    }  }  return result;}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    StyledEditorKit kit=getStyledEditorKit(editor);    MutableAttributeSet attr=kit.getInputAttributes();    boolean bold=(StyleConstants.isBold(attr)) ? false : true;    SimpleAttributeSet sas=new SimpleAttributeSet();    StyleConstants.setBold(sas,bold);    setCharacterAttributes(editor,sas,false);  }}  }
class C{  public void parse() throws CompilationFailedException {  if (this.phase > Phases.PARSING) {    throw new GroovyBugError("parsing is already complete");  }  if (this.phase == Phases.INITIALIZATION) {    nextPhase();  }  Reader reader=null;  try {    reader=source.getReader();    parserPlugin=getConfiguration().getPluginFactory().createParserPlugin();    cst=parserPlugin.parseCST(this,reader);    reader.close();  } catch (  IOException e) {    getErrorCollector().addFatalError(new SimpleMessage(e.getMessage(),this));  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {      }    }  }}  }
class C{  void serviceTypeAdded(ServiceEvent event){  if (null == _addedTypes.putIfAbsent(event.getType(),event.getType())) {    this.getListener().serviceTypeAdded(event);  } else {    logger.finest("Service Type Added called for a service type already added: " + event);  }}  }
class C{  public void assertNotNull(Object object){  TestUtils.assertNotNull(object);}  }
class C{  public ChooserIntentBuilder title(CharSequence title){  mIntent.putExtra(BottomSheetChooserActivity.EXTRA_TITLE,title);  return this;}  }
class C{  public void connectInput(SharedDouble input){  this.input=input;}  }
class C{  public final void testGenerateSeedint01(){  try {    sr.generateSeed(-1);    fail("generateSeed(-1) :: No NegativeArraySizeException");  } catch (  NegativeArraySizeException e) {  }}  }
class C{  public Void handleRequestBulkList(KinesisEvent event,Context context){  LambdaLogger logger=context.getLogger();  logger.log("Received " + event.getRecords().size() + " raw Event Records.");  try {    List<UserRecord> userRecords=RecordDeaggregator.deaggregate(event.getRecords());    for (    UserRecord userRecord : userRecords) {      logger.log(new String(userRecord.getData().array()));    }  } catch (  Exception e) {    logger.log(e.getMessage());  }  return null;}  }
class C{  private List<Map<String,Object>> globFiles(final SBJob job,final File workingDir,HashAlgorithm hashAlgorithm,final SBOutputPort outputPort,Object outputBinding) throws SBGlobException {  if (outputPort.getOutputBinding() != null) {    outputBinding=outputPort.getOutputBinding();  }  if (outputBinding == null) {    logger.debug("Output binding is empty. Skip output extraction.");    return null;  }  Object glob=SBBindingHelper.getGlob(outputBinding);  if (glob == null) {    logger.debug("GLOB does not exist. Skip output extraction.");    return null;  }  Set<File> paths=globService.glob(job,workingDir,glob);  if (paths == null) {    logger.info("Glob service didn't find any files.");    return null;  }  logger.debug("Glob service returned result {}",paths);  final List<Map<String,Object>> result=new ArrayList<>();  for (  File path : paths) {    try {      logger.info("Processing {}.",path);      File file=path;      Map<String,Object> fileData=new HashMap<>();      SBFileValueHelper.setFileType(fileData);      if (hashAlgorithm != null) {        SBFileValueHelper.setChecksum(file,fileData,hashAlgorithm);      }      SBFileValueHelper.setSize(file.length(),fileData);      SBFileValueHelper.setName(file.getName(),fileData);      SBFileValueHelper.setPath(file.getAbsolutePath(),fileData);      List<?> secondaryFiles=getSecondaryFiles(job,hashAlgorithm,fileData,file.getAbsolutePath(),outputBinding);      if (secondaryFiles != null) {        SBFileValueHelper.setSecondaryFiles(secondaryFiles,fileData);      }      Object metadata=SBBindingHelper.getMetadata(outputBinding);      metadata=metadataService.evaluateMetadataExpressions(job,fileData,metadata);      logger.info("Metadata expressions evaluated. Metadata is {}.",metadata);      if (metadata != null) {        SBFileValueHelper.setMetadata(metadata,fileData);      }      metadata=metadataService.processMetadata(job,fileData,outputPort,outputBinding);      if (metadata != null) {        logger.info("Metadata for {} resolved. Metadata is {}",outputPort.getId(),metadata);        SBFileValueHelper.setMetadata(metadata,fileData);      } else {        logger.info("Metadata for {} output is empty.",outputPort.getId());      }      result.add(fileData);      boolean loadContents=SBBindingHelper.loadContents(outputBinding);      if (loadContents) {        SBFileValueHelper.setContents(fileData);      }    } catch (    Exception e) {      logger.error("Failed to extract outputs",e);      throw new SBGlobException("Failed to extract outputs.",e);    }  }  return result;}  }
class C{  public Span trim(CharSequence src){  if (start < end)   while (src.charAt(end - 1) == 32) {    end--;    if (start == end)     break;  }  if (start < end)   while (src.charAt(start) == 32) {    start++;    if (start == end)     break;  }  return this;}  }
class C{  public static boolean isAirborneMove(final GameData data){  final boolean isAirborneMove;  data.acquireReadLock();  try {    final String prop=data.getSequence().getStep().getProperties().getProperty(GameStep.PROPERTY_airborneMove);    if (prop != null) {      isAirborneMove=Boolean.parseBoolean(prop);    } else {      isAirborneMove=isAirborneDelegate(data);    }  }  finally {    data.releaseReadLock();  }  return isAirborneMove;}  }
class C{  public void startDocument() throws IOException {}  }
class C{  private void populateMethodCache(){  StringBuffer methodKey;  Method[] methods=getAccessibleMethods(clazz);  for (int i=0; i < methods.length; i++) {    Method method=methods[i];    Method publicMethod=getPublicMethod(method);    if (publicMethod != null) {      methodMap.add(publicMethod);      methodCache.put(makeMethodKey(publicMethod),publicMethod);    }  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.IF_STATEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Principal localPrincipal(){  return !localCertificates.isEmpty() ? ((X509Certificate)localCertificates.get(0)).getSubjectX500Principal() : null;}  }
class C{  private void verifyFunction(LinearFunction f1) throws LanguageException {  if (f1 == null || f1._b.length != f1._vars.length) {    if (LOG.isTraceEnabled() && f1 != null)     LOG.trace("PARFOR: f1: " + f1.toString());    throw new LanguageException("PARFOR loop dependency analysis: " + "MATRIX subscripts are not in linear form (a0 + a1*x).");  }  for (  String var : f1._vars) {    if (!_bounds._lower.containsKey(var)) {      LOG.trace("PARFOR: not allowed variable in matrix subscript: " + var);      throw new LanguageException("PARFOR loop dependency analysis: " + "MATRIX subscripts use non-index variables.");    }  }}  }
class C{  public long readLong() throws IOException, EOFException {  this.readFully(this.temp,0,8);  long res=temp[0];  res<<=8;  res|=(temp[1] & 0xff);  res<<=8;  res|=(temp[2] & 0xff);  res<<=8;  res|=(temp[3] & 0xff);  res<<=8;  res|=(temp[4] & 0xff);  res<<=8;  res|=(temp[5] & 0xff);  res<<=8;  res|=(temp[6] & 0xff);  res<<=8;  res|=(temp[7] & 0xff);  return res;}  }
class C{  public Collection<MailAddress> match(final Mail mail) throws MessagingException {  ImmutableList<Set<MailAddress>> individualMatchedResults=performMatchOnMatchers(mail);  return computeIntersection(individualMatchedResults);}  }
class C{  @Override protected void createEditPolicies(){}  }
class C{  public JPaymentRefund(JPaymentNotifier notifier,String sName){  m_notifier=notifier;  m_sName=sName;  initComponents();}  }
class C{  public static Tier newInstance(){  final Tier returnInstance=new Tier();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public DateTime plus(ReadableDuration duration){  return withDurationAdded(duration,1);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected Instances renameAttributes(Instances data,String prefix) throws Exception {  Instances result;  int i;  ArrayList<Attribute> atts;  atts=new ArrayList<Attribute>();  for (i=0; i < data.numAttributes(); i++) {    if (i == data.classIndex()) {      atts.add((Attribute)data.attribute(i).copy());    } else {      atts.add(data.attribute(i).copy(prefix + data.attribute(i).name()));    }  }  result=new Instances(data.relationName(),atts,data.numInstances());  for (i=0; i < data.numInstances(); i++) {    result.add((Instance)data.instance(i).copy());  }  if (data.classIndex() > -1) {    result.setClassIndex(data.classIndex());  }  return result;}  }
class C{  public boolean isRegularFile(){  if (permissions == null)   return false;  return ((permissions.intValue() & 0100000) != 0);}  }
class C{  void addSize(int delta){  size+=delta;}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  protected Color computeBackgroundColor(Color color){  float[] colorArray=new float[4];  Color.RGBtoHSB(color.getRed(),color.getGreen(),color.getBlue(),colorArray);  if (colorArray[2] > 0.5)   return new Color(0,0,0,0.7f); else   return new Color(1,1,1,0.7f);}  }
class C{  public SpherePortrayal3D(Image image,double scale){  this(image,scale,DEFAULT_DIVISIONS);}  }
class C{  public Analyzer includeAllMetrics(){  includeHypervolume();  includeGenerationalDistance();  includeInvertedGenerationalDistance();  includeAdditiveEpsilonIndicator();  includeMaximumParetoFrontError();  includeSpacing();  includeContribution();  includeR1();  includeR2();  includeR3();  return this;}  }
class C{  public IndexRequest type(String type){  this.type=type;  return this;}  }
class C{  public ShardChannelTable(String schema,String tableType){  this.tableType=tableType;  initialize(schema);}  }
class C{  protected void finish(QueuedInputEvent q,boolean handled){  q.mFlags|=QueuedInputEvent.FLAG_FINISHED;  if (handled) {    q.mFlags|=QueuedInputEvent.FLAG_FINISHED_HANDLED;  }  forward(q);}  }
class C{  public static java.io.BufferedReader openReaderDetectCharset(java.io.File filePath,String defaultCharset) throws java.io.IOException {  return openReaderDetectCharset(filePath,defaultCharset,true);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.506 -0500",hash_original_method="09AF95BC0271C57553075E85B6A27865",hash_generated_method="09AF95BC0271C57553075E85B6A27865") SIPTransactionErrorEvent(SIPTransaction sourceTransaction,int transactionErrorID){  super(sourceTransaction);  errorID=transactionErrorID;}  }
class C{  public void sub(){  RatPoly top=pop();  RatPoly next=pop();  push(next.sub(top));}  }
class C{  public void fillPolygon(Polygon p){  g.fillPolygon(p);}  }
class C{  public final boolean isWild(){  return m_wild;}  }
class C{  void updateVisibilityModel(){  Component c=getContainer();  if (c instanceof JTextField) {    JTextField field=(JTextField)c;    BoundedRangeModel vis=field.getHorizontalVisibility();    int hspan=(int)getPreferredSpan(X_AXIS);    int extent=vis.getExtent();    int maximum=Math.max(hspan,extent);    extent=(extent == 0) ? maximum : extent;    int value=maximum - extent;    int oldValue=vis.getValue();    if ((oldValue + extent) > maximum) {      oldValue=maximum - extent;    }    value=Math.max(0,Math.min(value,oldValue));    vis.setRangeProperties(value,extent,0,maximum,false);  }}  }
class C{  public void validate(FacesContext facesContext,UIComponent component,Object value) throws ValidatorException {  if (value == null) {    return;  }  String email=value.toString();  if (email.length() == 0) {    return;  }  if (!ADMValidator.isEmail(email)) {    Object[] args=null;    String label=JSFUtils.getLabel(component);    if (label != null) {      args=new Object[]{label};    }    ValidationException e=new ValidationException(ValidationException.ReasonEnum.EMAIL,label,null);    String text=JSFUtils.getText(e.getMessageKey(),args,facesContext);    throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));  }}  }
class C{  public static <T>void fill(List<? super T> list,T object){  ListIterator<? super T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(object);  }}  }
class C{  public static boolean isValid(String address){  return isValidIPv4(address) || isValidIPv6(address);}  }
class C{  public long size(){  return size;}  }
class C{  public boolean notificationGroupExists(String notificationGroupName){  try {    return getService().notificationGroupExistsByName(notificationGroupName);  } catch (  RemoteException e) {    Log.e(TAG,e.getLocalizedMessage(),e);    return true;  }}  }
class C{  public GroupedInspector(Groupable object,GUIState state,String name){  Properties properties=Properties.getProperties(object);  if (properties instanceof SimpleProperties) {    buildGroupedInspector((SimpleProperties)properties,state,name,object.provideGroupProperties(),object.provideGroupNames(),object.showExtraProperties());  } else   throw new RuntimeException("A Groupable Object must provide SimpleProperties.");}  }
class C{  public CurrencyException(String message){  super(message);}  }
class C{  public ResetBlockChatAction(Block block){  this.blockToReset=block;}  }
class C{  public void throwSecurityExceptionIfNotLoggedIn() throws AuthenticationException {  final int state=getCurrentCart().getLogonState();  if (state != ShoppingCart.LOGGED_IN) {    if (state == ShoppingCart.SESSION_EXPIRED) {      throw new CredentialsExpiredException("Session expired");    }    throw new BadCredentialsException("User not logged in");  }}  }
class C{  public ProductTypeAttrServiceImpl(final GenericDAO<ProductTypeAttr,Long> genericDao){  super(genericDao);}  }
class C{  public InternalDistributedMember(String i,int p,Version version){  this(i,p,version,MemberFactory.newNetMember(i,p));}  }
class C{  public NamingEnumeration listBindings(String name) throws NamingException {  return listBindings(nameParser.parse(name));}  }
class C{  @Override public void removeIndex(final IScope scope,final Object index){  remove(index);}  }
class C{  public String toString(){  if (im == 0)   return re + "";  if (re == 0)   return im + "i";  if (im < 0)   return re + " - " + (-im)+ "i";  return re + " + " + im+ "i";}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  void switchToSession(TerminalSession session){  if (mTerminalView.attachSession(session)) {    noteSessionInfo();    updateBackgroundColor();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void clearCampos(){  campos.clear();}  }
class C{  private static void writeToStreamAndClose(String[] lines,OutputStream outputStream){  try (PrintStream writer=new PrintStream(outputStream)){    for (    String line : lines) {      writer.println(line);    }  } }  }
class C{  protected CCRotateBy(float t,float a){  super(t);  angle=a;}  }
class C{  @Override public void putStack(ItemStack aStack){  if (inventory instanceof TileEntity && ((TileEntity)inventory).getWorldObj().isRemote) {    inventory.setInventorySlotContents(getSlotIndex(),aStack);  }  onSlotChanged();}  }
class C{  public boolean hasMatches(){  return (matches == null || matches.length == 0) ? false : true;}  }
class C{  protected void updateActions(){  setActions(computeActions());}  }
class C{  @Override public void endWindow(){  if (numList.size() == 0)   return;  double[] values=new double[numList.size()];  for (int i=0; i < numList.size(); i++) {    values[i]=numList.get(i).doubleValue();  }  try {    connectable.getRengine().assign("numList",values);  } catch (  REngineException e) {    log.error("Exception: ",e);    DTThrowable.rethrow(e);  }  double rMax=0;  try {    rMax=connectable.getRengine().parseAndEval("max(numList)").asDouble();    connectable.getRengine().parseAndEval("rm(list = setdiff(ls(), lsf.str()))");  } catch (  Exception e) {    log.error("Exception: ",e);    DTThrowable.rethrow(e);  }  log.debug(String.format("Max is : " + rMax));  max.emit(rMax);  numList.clear();}  }
class C{  private Identity identity(final String tkn) throws IOException {  return parse(this.user.uri().set(URI.create(new Href(PsTwitter.VERIFY_URL).with(PsTwitter.ACCESS_TOKEN,tkn).toString())).back().header("accept","application/json").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_OK).as(JsonResponse.class).json().readObject());}  }
class C{  public String name(AccountInfo ai){  if (ai.name() != null && !ai.name().trim().isEmpty()) {    return ai.name();  }  String email=ai.email();  if (email != null) {    int at=email.indexOf('@');    return 0 < at ? email.substring(0,at) : email;  }  return nameEmail(ai);}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public ExtensionUserManagement(){  initialize();}  }
class C{  public Hours toStandardHours(){  checkYearsAndMonths("Hours");  long millis=getMillis();  millis+=((long)getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;  millis+=((long)getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;  long hours=millis / DateTimeConstants.MILLIS_PER_HOUR;  hours=FieldUtils.safeAdd(hours,getHours());  hours=FieldUtils.safeAdd(hours,((long)getDays()) * ((long)DateTimeConstants.HOURS_PER_DAY));  hours=FieldUtils.safeAdd(hours,((long)getWeeks()) * ((long)DateTimeConstants.HOURS_PER_WEEK));  return Hours.hours(FieldUtils.safeToInt(hours));}  }
class C{  void removeTeam(GlowTeam team){  team.getEntries().forEach(null);  teams.remove(team.getName());  broadcast(ScoreboardTeamMessage.remove(team.getName()));}  }
class C{  public _BuildControllerUpdate(){  super();}  }
class C{  public OptionScanNode buildContextMenuTree(List<? extends OptionScanActionNode> actions){  if (actions.size() == 0) {    return new ClearFocusNode();  }  return buildTreeFromNodeList(new ArrayList<OptionScanNode>(actions),CONTEXT_MENU_NODE,new ClearFocusNode());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Album al=getAlbum(stack);  return (al == null) ? "" : al.getTitle();}  }
class C{  public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException {}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public PasswordEditText(@NonNull final Context context,@Nullable final AttributeSet attributeSet,final int defaultStyle,final int defaultStyleResource){  super(context,attributeSet,defaultStyle,defaultStyleResource);  initialize(attributeSet);}  }
class C{  public UnorderedIter unorderedIter(){  return new UnorderedIter();}  }
class C{  public int recv(byte[] buffer,int len) throws IOException {  return recv(buffer,0,len);}  }
class C{  public static boolean isParameterOptional(String operatorKey,String parameterName){  Operator operator=null;  int index=operatorKey.indexOf(".");  if (index != -1) {    operatorKey=operatorKey.substring(index + 1);  }  try {    OperatorDescription description=OperatorService.getOperatorDescription(operatorKey);    if (description == null) {      LogService.getRoot().log(Level.FINER,"com.rapidminer.gui.OperatorDocToHtmlConverter.null_operator",operatorKey);      return false;    }    operator=description.createOperatorInstance();    if (operator == null) {      LogService.getRoot().log(Level.FINER,"com.rapidminer.gui.OperatorDocToHtmlConverter.null_operator",operatorKey);      return false;    }    Parameters parameters=operator.getParameters();    if (parameters != null) {      ParameterType type=parameters.getParameterType(parameterName);      if (type != null) {        return type.isOptional();      }    }    return false;  } catch (  OperatorCreationException e) {    LogService.getRoot().log(Level.FINER,"com.rapidminer.gui.OperatorDocToHtmlConverter.null_operator",operatorKey);    return false;  }}  }
class C{  public void testDeleteAllTracks(){  EndToEndTestUtils.createSimpleTrack(1,true);  assertTrue(EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount() > 0);  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_delete_all),true);  instrumentation.waitForIdleSync();  EndToEndTestUtils.rotateCurrentActivity();  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_yes),true,true);  EndToEndTestUtils.waitTextToDisappear(trackListActivity.getString(R.string.generic_progress_title));  instrumentation.waitForIdleSync();  assertTrue(EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.track_list_empty_message)));  assertEquals(0,EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount());}  }
class C{  private void launchRcsService(boolean boot,boolean user) throws RcsAccountException {  ConfigurationMode mode=mRcsSettings.getConfigurationMode();  boolean logActivated=sLogger.isActivated();  if (logActivated) {    sLogger.debug("Launch RCS service: HTTPS=" + mode + ", boot="+ boot+ ", user="+ user);  }  if (ConfigurationMode.AUTO != mode) {    mAccountUtility.createRcsAccount(mRcsAccountUsername,true);    mRcsSettings.setTermsAndConditionsResponse(TermsAndConditionsResponse.ACCEPTED);    LauncherUtils.launchRcsCoreService(mCtx,mRcsSettings);    return;  }  int version=mRcsSettings.getProvisioningVersion();  if (Version.RESETED_NOQUERY.toInt() == version) {    if (hasChangedAccount()) {      HttpsProvisioningService.startHttpsProvisioningService(mCtx,true,user);    } else {      if (logActivated) {        sLogger.debug("Provisioning is blocked with this account");      }    }  } else   if (isFirstLaunch() || hasChangedAccount()) {    HttpsProvisioningService.startHttpsProvisioningService(mCtx,true,user);  } else   if (Version.DISABLED_NOQUERY.toInt() == version) {    if (user) {      HttpsProvisioningService.startHttpsProvisioningService(mCtx,false,user);    }  } else {    HttpsProvisioningService.startHttpsProvisioningService(mCtx,false,user);    if (Version.DISABLED_DORMANT.toInt() == version) {    } else {      LauncherUtils.launchRcsCoreService(mCtx,mRcsSettings);    }  }}  }
class C{  public static double[] join(double[] arrayA,double... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  double[] array=new double[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static <T extends SabresObject>void saveAll(List<T> objects) throws SabresException {  final Sabres sabres=Sabres.self();  sabres.open();  sabres.beginTransaction();  try {    for (    SabresObject o : objects) {      o.saveInTransaction(sabres);    }    sabres.setTransactionSuccessful();  }  finally {    sabres.endTransaction();    sabres.close();  }}  }
class C{  @Override public boolean isDisplayAllEvents(){  return true;}  }
class C{  public UncheckedExecutionException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  public Vector4i add(int x,int y,int z,int w){  this.x+=x;  this.y+=y;  this.z+=z;  this.w+=w;  return this;}  }
class C{  public static IP MIN_IP(){  return new IP(0L);}  }
class C{  public static String resolveBacktracePath(String currentDir,String fileName){  String result=normalizeFileName(fileName);  int dotdotCount=DelphiUtils.countSubstrings(result,"..");  result=result.replaceAll("\\.\\./","");  for (int i=0; i < dotdotCount; ++i) {    currentDir=currentDir.substring(0,currentDir.lastIndexOf('/'));  }  return currentDir + "/" + result;}  }
class C{  @Override protected void onHandleIntent(Intent intent){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);  try {    InstanceID instanceID=InstanceID.getInstance(this);    String token=instanceID.getToken(getString(R.string.gcm_defaultSenderId),GoogleCloudMessaging.INSTANCE_ID_SCOPE,null);    sharedPreferences.edit().putBoolean(Constants.SHARED_KEY_HAS_TOKEN,true).apply();    sharedPreferences.edit().putString(Constants.SHARED_KEY_TOKEN,token).apply();  } catch (  Exception e) {    sharedPreferences.edit().putBoolean(Constants.SHARED_KEY_HAS_TOKEN,false).apply();  }  LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(Constants.INTENT_REGISTRATION_COMPLETE));}  }
class C{  public int size(){  return onGoingRecoveries.size();}  }
class C{  public static void main(String[] args){  Header.printHeader(MonthlyFileFacilityAssociater.class.toString(),args);  String processedFolder=args[0];  String shapefile=args[1];  int idField=Integer.parseInt(args[2]);  int numberOfThreads=Integer.parseInt(args[3]);  List<File> inputFiles=GrainUtils.getMonthlyOutputFolders(processedFolder);  for (  File month : inputFiles) {    LOG.info("====> Processing month " + month.getAbsolutePath());    String thisXmlFolder=month.getAbsolutePath() + (month.getAbsolutePath().endsWith("/") ? "" : "/") + "xml/";    String thisOutputFolder=month.getAbsolutePath() + (month.getAbsolutePath().endsWith("/") ? "" : "/");    String[] sa={thisXmlFolder,thisOutputFolder,String.valueOf(numberOfThreads),shapefile,String.valueOf(idField)};    try {      ClusteredChainGenerator.main(sa);    } catch (    IOException e) {      e.printStackTrace();      LOG.error("Could not complete month!!");    }    LOG.info("====> Done processing month.");  }  Header.printFooter();}  }
class C{  public Shape createScrollButtonTogetherIncrease(int x,int y,int w,int h){  return createRectangle(x,y,w,h);}  }
class C{  public Builder geodesic(boolean geodesic){  this.geodesic=geodesic;  return this;}  }
class C{  public void initState(List<PKIXCertPathChecker> certPathCheckers) throws CertPathValidatorException {  subjectNamesTraversed=new HashSet<GeneralNameInterface>();  traversedCACerts=0;  forwardCheckers=new ArrayList<PKIXCertPathChecker>();  for (  PKIXCertPathChecker checker : certPathCheckers) {    if (checker.isForwardCheckingSupported()) {      checker.init(true);      forwardCheckers.add(checker);    }  }  init=true;}  }
class C{  @Provides @Singleton DaoSession provideSession(){  DaoMaster daoMaster=new DaoMaster(mDatabase);  return daoMaster.newSession();}  }
class C{  public static float readFloat(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return (float)jsonObject.getDouble(key);  }  if (notNull && jsonObject.isNull(key)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));  }  float value=0.0f;  if (!jsonObject.isNull(key)) {    value=(float)jsonObject.getDouble(key);  }  return value;}  }
class C{  public boolean isTextList(){  return extractor.isTextList();}  }
class C{  public void saveWindowStates(){  for (  Window window : windows.keySet()) {    saveWindowState(window);  }}  }
class C{  void read(ByteBuffer buff,int chunkId,int offset,int maxLength){  int start=buff.position();  int pageLength=buff.getInt();  if (pageLength > maxLength || pageLength < 4) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"File corrupted in chunk {0}, expected page length 4..{1}, got {2}",chunkId,maxLength,pageLength);  }  buff.limit(start + pageLength);  short check=buff.getShort();  int mapId=DataUtils.readVarInt(buff);  if (mapId != map.getId()) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"File corrupted in chunk {0}, expected map id {1}, got {2}",chunkId,map.getId(),mapId);  }  int checkTest=DataUtils.getCheckValue(chunkId) ^ DataUtils.getCheckValue(offset) ^ DataUtils.getCheckValue(pageLength);  if (check != (short)checkTest) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"File corrupted in chunk {0}, expected check value {1}, got {2}",chunkId,checkTest,check);  }  int len=DataUtils.readVarInt(buff);  keys=new Object[len];  int type=buff.get();  boolean node=(type & 1) == DataUtils.PAGE_TYPE_NODE;  if (node) {    children=new PageReference[len + 1];    long[] p=new long[len + 1];    for (int i=0; i <= len; i++) {      p[i]=buff.getLong();    }    long total=0;    for (int i=0; i <= len; i++) {      long s=DataUtils.readVarLong(buff);      total+=s;      children[i]=new PageReference(null,p[i],s);    }    totalCount=total;  }  boolean compressed=(type & DataUtils.PAGE_COMPRESSED) != 0;  if (compressed) {    Compressor compressor;    if ((type & DataUtils.PAGE_COMPRESSED_HIGH) == DataUtils.PAGE_COMPRESSED_HIGH) {      compressor=map.getStore().getCompressorHigh();    } else {      compressor=map.getStore().getCompressorFast();    }    int lenAdd=DataUtils.readVarInt(buff);    int compLen=pageLength + start - buff.position();    byte[] comp=DataUtils.newBytes(compLen);    buff.get(comp);    int l=compLen + lenAdd;    buff=ByteBuffer.allocate(l);    compressor.expand(comp,0,compLen,buff.array(),buff.arrayOffset(),l);  }  map.getKeyType().read(buff,keys,len,true);  if (!node) {    values=new Object[len];    map.getValueType().read(buff,values,len,false);    totalCount=len;  }  recalculateMemory();}  }
class C{  public static boolean hasCombBar(){  return (!AndroidDevices.isPhone() && ((VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) && (VERSION.SDK_INT <= VERSION_CODES.JELLY_BEAN)));}  }
class C{  public void testFacetingWithRandomSorts() throws Exception {  final int numDocs=TestUtil.nextInt(random(),1000,3000);  String[] fieldsToFacetOn={"int","long","str"};  String[] facetMethods={"enum","fc","fcs"};  for (int i=1; i <= numDocs; i++) {    SolrInputDocument doc=buildRandomDocument(i);    assertU(adoc(doc));  }  assertU(commit());  Collection<String> allFieldNames=getAllSortFieldNames();  String[] fieldNames=new String[allFieldNames.size()];  allFieldNames.toArray(fieldNames);  String f=fieldNames[TestUtil.nextInt(random(),0,fieldNames.length - 1)];  String order=0 == TestUtil.nextInt(random(),0,1) ? " asc" : " desc";  String sort=f + order + (f.equals("id") ? "" : ", id" + order);  String rows="" + TestUtil.nextInt(random(),13,50);  String facetField=fieldsToFacetOn[TestUtil.nextInt(random(),0,fieldsToFacetOn.length - 1)];  String facetMethod=facetMethods[TestUtil.nextInt(random(),0,facetMethods.length - 1)];  SentinelIntSet ids=assertFullWalkNoDupsWithFacets(numDocs,params("q","*:*","fl","id," + facetField,"facet","true","facet.field",facetField,"facet.method",facetMethod,"facet.missing","true","facet.limit","-1","rows",rows,"sort",sort));  assertEquals(numDocs,ids.size());}  }
class C{  public LayerTreeModel(LayerList layerList,boolean includeHiddenLayers){  if (layerList == null) {    String message=Logging.getMessage("nullValue.LayersListArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.initialize();  this.includeHiddenLayers=includeHiddenLayers;  this.refresh(layerList);}  }
class C{  @Override public Record process(GenericData.Record record,String topic) throws Exception {  GobblinTrackingLumosRecord eventRecord=null;  if (record != null && record.get("namespace") != null && record.get("name") != null) {    final String name=record.get("name").toString();    if (name.equals("DeltaPublished") || name.equals("SnapshotPublished")) {      final long timestamp=(long)record.get("timestamp");      final Map<String,String> metadata=StringUtil.convertObjectMapToStringMap(record.get("metadata"));      final String jobContext="Lumos:" + name;      final String cluster=ClusterUtil.matchClusterCode(metadata.get("clusterIdentifier"));      final String projectName=metadata.get("azkabanProjectName");      final String flowId=metadata.get("azkabanFlowId");      final String jobId=metadata.get("azkabanJobId");      final int execId=Integer.parseInt(metadata.get("azkabanExecId"));      final String dataset=metadata.get("datasetUrn");      final String targetDirectory=metadata.get("TargetDirectory");      final String datasourceColo=metadata.get("DatasourceColo");      final String sourceDatabase=metadata.get("Database");      final String sourceTable=metadata.get("Table");      String datacenter=null;      String devEnv=null;      final Matcher sourceColoMatcher=DatasourceColoPattern.matcher(datasourceColo);      if (sourceColoMatcher.find()) {        datacenter=sourceColoMatcher.group(2);        devEnv=sourceColoMatcher.group(1);      } else {        datacenter=datasourceColo;      }      final long recordCount=StringUtil.parseLong(metadata.get("recordCount"));      final String partitionType="snapshot";      final String partition=metadata.get("partition");      String partitionName=null;      String subpartitionType=null;      String subpartitionName=null;      final long dropdate=StringUtil.parseLong(metadata.get("Dropdate"));      long maxDataDateEpoch3=dropdate;      long maxDataKey=0;      if (!isPartitionRegular(partition)) {        maxDataKey=StringUtil.parseLong(getPartitionEpoch(partition));      }      if (name.equals("SnapshotPublished")) {        partitionName=partition;        if (dropdate < 1460000000000L) {          maxDataDateEpoch3=StringUtil.parseLong(getPartitionEpoch(targetDirectory));        }      } else {        partitionName=partitionFromTargetDirectory(targetDirectory);        subpartitionType="_delta";        subpartitionName=partition;        if (dropdate < 1460000000000L) {          maxDataDateEpoch3=StringUtil.parseLong(getPartitionEpoch(subpartitionName));        }      }      eventRecord=new GobblinTrackingLumosRecord(timestamp,cluster,jobContext,projectName,flowId,jobId,execId);      eventRecord.setDatasetUrn(dataset,targetDirectory,partitionType,partitionName,subpartitionType,subpartitionName);      eventRecord.setMaxDataDate(maxDataDateEpoch3,maxDataKey);      eventRecord.setSource(datacenter,devEnv,sourceDatabase,sourceTable);      eventRecord.setRecordCount(recordCount);    }  }  return eventRecord;}  }
class C{  public static void shouldNeverReachHere(){  shouldNeverReachHere(null);}  }
class C{  @SuppressWarnings({"rawtypes","serial"}) public void testServiceSparql11Constant(){  final BigdataValueFactory f=store.getValueFactory();  final BigdataURI serviceEndpoint=f.createURI("http://custom.endpoint");  final IV serviceEndpointIV=makeIV(serviceEndpoint);  final BigdataValue[] values=new BigdataValue[]{serviceEndpoint};  store.getLexiconRelation().addTerms(values,values.length,false);  final ServiceNode serviceNode=(ServiceNode)new Helper(){{      tmp=service(constantNode(serviceEndpointIV),joinGroupNode(statementPatternNode(varNode(x),constantNode(a),varNode(y))));    }  }.getTmp();  final Set<IVariable<?>> requiredBound=new HashSet<IVariable<?>>();  final Set<IVariable<?>> desiredBound=new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("y"));    }  };  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBound,serviceNode.getRequiredBound(sa));  assertEquals(desiredBound,serviceNode.getDesiredBound(sa));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  Show s=getShowObj(obj);  if (s != null)   return s.getYear();  Album al=getAlbumObj(obj);  return (al == null) ? "" : al.getYear();}  }
class C{  private String parseFormat(){switch (this.format[0]) {case AL.AL_FORMAT_MONO8:    return "8-bit mono";case AL.AL_FORMAT_MONO16:  return "16-bit mono";case AL.AL_FORMAT_STEREO8:return "8-bit stereo";case AL.AL_FORMAT_STEREO16:return "16-bit stereo";}if (this.format[0] == JoalAudioFactory.AL_FORMAT_QUAD8 && JoalAudioFactory.AL_FORMAT_QUAD8 != FORMAT_UNKNOWN) {return "8-bit quadrophonic";} else if (this.format[0] == JoalAudioFactory.AL_FORMAT_QUAD16 && JoalAudioFactory.AL_FORMAT_QUAD16 != FORMAT_UNKNOWN) {return "16-bit quadrophonic";} else if (this.format[0] == JoalAudioFactory.AL_FORMAT_51CHN8 && JoalAudioFactory.AL_FORMAT_51CHN8 != FORMAT_UNKNOWN) {return "8-bit 5.1 surround";} else if (this.format[0] == JoalAudioFactory.AL_FORMAT_51CHN16 && JoalAudioFactory.AL_FORMAT_51CHN16 != FORMAT_UNKNOWN) {return "16-bit 5.1 surround";} else if (this.format[0] == JoalAudioFactory.AL_FORMAT_61CHN8 && JoalAudioFactory.AL_FORMAT_61CHN8 != FORMAT_UNKNOWN) {return "8-bit 6.1 surround";} else if (this.format[0] == JoalAudioFactory.AL_FORMAT_61CHN16 && JoalAudioFactory.AL_FORMAT_61CHN16 != FORMAT_UNKNOWN) {return "16-bit 6.1 surround";} else if (this.format[0] == JoalAudioFactory.AL_FORMAT_71CHN8 && JoalAudioFactory.AL_FORMAT_71CHN8 != FORMAT_UNKNOWN) {return "8 bit 7.1 surround";} else if (this.format[0] == JoalAudioFactory.AL_FORMAT_71CHN16 && JoalAudioFactory.AL_FORMAT_71CHN16 != FORMAT_UNKNOWN) {return "16 bit 7.1 surround";} else {return "unknown format";}}  }
class C{  public int hiDateTime(){  final int hi=(int)(ticks >> 32);  return hi;}  }
class C{  @Override public void clear() throws IOException {  if (this.solr0 != null)   this.solr0.clear();  if (this.solr1 != null)   this.solr1.clear();}  }
class C{  public void parseIoSample(IIntInputStream parser) throws IOException {  int size=parser.read("ZNet RX IO Sample Size");  if (size != 1) {    throw new XBeeParseException("Sample size is not supported if > 1 for ZNet I/O");  }  this.setDigitalChannelMaskMsb(parser.read("ZNet RX IO Sample Digital Mask 1"));  this.setDigitalChannelMaskLsb(parser.read("ZNet RX IO Sample Digital Mask 2"));  this.setAnalogChannelMask(parser.read("ZNet RX IO Sample Analog Channel Mask"));  this.analogChannelMask=this.analogChannelMask & 0x8f;  this.digitalChannelMaskMsb=this.digitalChannelMaskMsb & 0x1c;  if (this.containsDigital()) {    log.info("response contains digital data");    this.setDioMsb(parser.read("ZNet RX IO DIO MSB"));    this.setDioLsb(parser.read("ZNet RX IO DIO LSB"));  } else {    log.info("response does not contain digital data");  }  int enabledCount=0;  for (int i=0; i < 4; i++) {    if (this.isAnalogEnabled(i)) {      log.info("response contains analog[" + i + "]");      analog[i]=ByteUtils.parse10BitAnalog(parser,enabledCount);      enabledCount++;    }  }  if (this.isSupplyVoltageEnabled()) {    analog[SUPPLY_VOLTAGE_INDEX]=ByteUtils.parse10BitAnalog(parser,enabledCount);    enabledCount++;  }  log.debug("There are " + analog + " analog inputs in this packet");}  }
class C{  public double manhattanDistance(final java.awt.geom.Point2D p){  final double dx=Math.abs((double)this.x - p.getX());  final double dy=Math.abs((double)this.y - p.getY());  return dx + dy;}  }
class C{  private static int[] mult512(int[] a,int[] b){  int[] result=new int[32];  int[] a0=new int[8];  System.arraycopy(a,0,a0,0,Math.min(8,a.length));  int[] a1=new int[8];  if (a.length > 8) {    System.arraycopy(a,8,a1,0,Math.min(8,a.length - 8));  }  int[] b0=new int[8];  System.arraycopy(b,0,b0,0,Math.min(8,b.length));  int[] b1=new int[8];  if (b.length > 8) {    System.arraycopy(b,8,b1,0,Math.min(8,b.length - 8));  }  int[] c=mult256(a1,b1);  result[31]^=c[15];  result[30]^=c[14];  result[29]^=c[13];  result[28]^=c[12];  result[27]^=c[11];  result[26]^=c[10];  result[25]^=c[9];  result[24]^=c[8];  result[23]^=c[7] ^ c[15];  result[22]^=c[6] ^ c[14];  result[21]^=c[5] ^ c[13];  result[20]^=c[4] ^ c[12];  result[19]^=c[3] ^ c[11];  result[18]^=c[2] ^ c[10];  result[17]^=c[1] ^ c[9];  result[16]^=c[0] ^ c[8];  result[15]^=c[7];  result[14]^=c[6];  result[13]^=c[5];  result[12]^=c[4];  result[11]^=c[3];  result[10]^=c[2];  result[9]^=c[1];  result[8]^=c[0];  a1[0]^=a0[0];  a1[1]^=a0[1];  a1[2]^=a0[2];  a1[3]^=a0[3];  a1[4]^=a0[4];  a1[5]^=a0[5];  a1[6]^=a0[6];  a1[7]^=a0[7];  b1[0]^=b0[0];  b1[1]^=b0[1];  b1[2]^=b0[2];  b1[3]^=b0[3];  b1[4]^=b0[4];  b1[5]^=b0[5];  b1[6]^=b0[6];  b1[7]^=b0[7];  int[] d=mult256(a1,b1);  result[23]^=d[15];  result[22]^=d[14];  result[21]^=d[13];  result[20]^=d[12];  result[19]^=d[11];  result[18]^=d[10];  result[17]^=d[9];  result[16]^=d[8];  result[15]^=d[7];  result[14]^=d[6];  result[13]^=d[5];  result[12]^=d[4];  result[11]^=d[3];  result[10]^=d[2];  result[9]^=d[1];  result[8]^=d[0];  int[] e=mult256(a0,b0);  result[23]^=e[15];  result[22]^=e[14];  result[21]^=e[13];  result[20]^=e[12];  result[19]^=e[11];  result[18]^=e[10];  result[17]^=e[9];  result[16]^=e[8];  result[15]^=e[7] ^ e[15];  result[14]^=e[6] ^ e[14];  result[13]^=e[5] ^ e[13];  result[12]^=e[4] ^ e[12];  result[11]^=e[3] ^ e[11];  result[10]^=e[2] ^ e[10];  result[9]^=e[1] ^ e[9];  result[8]^=e[0] ^ e[8];  result[7]^=e[7];  result[6]^=e[6];  result[5]^=e[5];  result[4]^=e[4];  result[3]^=e[3];  result[2]^=e[2];  result[1]^=e[1];  result[0]^=e[0];  return result;}  }
class C{  public double localScore(int i,int... parents){  for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN;  double residualVariance=getCovariances().getValue(i,i);  int n=getSampleSize();  int p=parents.length;  TetradMatrix covxx=getSelection1(getCovariances(),parents);  try {    TetradMatrix covxxInv=covxx.inverse();    TetradVector covxy=getSelection2(getCovariances(),parents,i);    TetradVector b=covxxInv.times(covxy);    residualVariance-=covxy.dotProduct(b);    if (residualVariance <= 0) {      if (isVerbose()) {        out.println("Nonpositive residual varianceY: resVar / varianceY = " + (residualVariance / getCovariances().getValue(i,i)));      }      return Double.NaN;    }    double c=getPenaltyDiscount();    return score(residualVariance,n,logn,p,c);  } catch (  Exception e) {    boolean removedOne=true;    while (removedOne) {      List<Integer> _parents=new ArrayList<>();      for (int y=0; y < parents.length; y++)       _parents.add(parents[y]);      _parents.removeAll(forbidden);      parents=new int[_parents.size()];      for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y);      removedOne=printMinimalLinearlyDependentSet(parents,getCovariances());    }    return Double.NaN;  }}  }
class C{  public Jerry wrap(String html){  final Document doc=builder.parse(html);  for (  Node node : nodes) {    Document workingDoc=doc.clone();    Node inmostNode=workingDoc;    while (inmostNode.hasChildNodes()) {      inmostNode=inmostNode.getFirstChild();    }    Node parent=node.getParentNode();    int index=node.getSiblingIndex();    inmostNode.addChild(node);    parent.insertChild(workingDoc.getFirstChild(),index);  }  return this;}  }
class C{  public static DoubleVector middle(DoubleVector v1,DoubleVector v2){  double x=(v1.x + v2.x) / 2d, y=(v1.y + v2.y) / 2d, z=(v1.z + v2.z) / 2d;  return new DoubleVector(x,y,z);}  }
class C{  public String mastState(){  if (getSignalMast() == null) {    return "<empty>";  } else {    return getSignalMast().getAspect();  }}  }
class C{  public static EventSetDescriptor findEventSetDescriptor(Class type,String name){  EventSetDescriptor[] esds=getEventSetDescriptors(type);  for (  EventSetDescriptor esd : esds) {    if (esd.getName().equals(name)) {      return esd;    }  }  return null;}  }
class C{  public String toString(String pre,NumberFormat nf){  return pre + "[Min(" + FormatUtil.format(min,",",nf)+ "), Max("+ FormatUtil.format(max,",",nf)+ ")]";}  }
class C{  public synchronized void close(){  this.notifyAll();}  }
class C{  boolean canConfigure(){  return !configuring;}  }
class C{  @Override public DataRow next(){  if (eof == true) {    return null;  }  if (!lineRead) {    if (!hasNext()) {      return null;    }  }  linesRead++;  lineRead=false;  return currentDataRow;}  }
class C{  public DirectoryAdapter(Context context){  super(context,R.layout.adapter_directory);  mContext=context;}  }
class C{  public NonLocalRegionEntry(Region.Entry re,LocalRegion br){  this.key=re.getKey();  this.value=re.getValue();  if (this.value instanceof CachedDeserializable) {    this.value=CachedDeserializableFactory.create((CachedDeserializable)this.value);  }  Assert.assertTrue(this.value != Token.NOT_AVAILABLE,"getEntry did not fault value in from disk");  this.lastModified=0l;  this.isRemoved=Token.isRemoved(value);  if (re instanceof EntrySnapshot) {    this.versionTag=((EntrySnapshot)re).getVersionTag();  } else {  }}  }
class C{  public BrownianBridge(final double[] times){  this.size_=times.length;  this.t_=Arrays.copyOfRange(times,0,this.size_);  this.sqrtdt_=new double[this.size_];  this.bridgeIndex_=new int[this.size_];  this.leftIndex_=new int[this.size_];  this.rightIndex_=new int[this.size_];  this.leftWeight_=new double[this.size_];  this.rightWeight_=new double[this.size_];  this.stdDev_=new double[this.size_];  initialize();}  }
class C{  public void addParameter(String name,String[] values){  String[] oldArr=(String[])this.parameters.get(name);  if (oldArr != null) {    String[] newArr=new String[oldArr.length + values.length];    System.arraycopy(oldArr,0,newArr,0,oldArr.length);    System.arraycopy(values,0,newArr,oldArr.length,values.length);    this.parameters.put(name,newArr);  } else {    this.parameters.put(name,values);  }}  }
class C{  public static void logThis(String TAG,String message,Throwable error){  if (message != null) {    if (error != null) {      Log.e(TAG,message,error);    } else {      Log.d(TAG,message);    }  }}  }
class C{  public OMDistance(){  super();  setRenderType(RENDERTYPE_LATLON);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.ATTRIBUTE__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case MappingPackage.ATTRIBUTE__VALUE:  return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public void onWriteData(){  if (mLogWritten) {    return;  } else {    mLogWritten=true;  }  long completionTime=SystemClock.elapsedRealtime();  if (mError || mPlaybackStartTime == -1 || mEngineCompleteTime == -1) {    EventLogTags.writeTtsSpeakFailure(mServiceApp,mCallerUid,mCallerPid,getUtteranceLength(),getLocaleString(),mRequest.getSpeechRate(),mRequest.getPitch());    return;  }  if (mStopped) {    return;  }  final long audioLatency=mPlaybackStartTime - mReceivedTime;  final long engineLatency=mEngineStartTime - mRequestProcessingStartTime;  final long engineTotal=mEngineCompleteTime - mRequestProcessingStartTime;  EventLogTags.writeTtsSpeakSuccess(mServiceApp,mCallerUid,mCallerPid,getUtteranceLength(),getLocaleString(),mRequest.getSpeechRate(),mRequest.getPitch(),engineLatency,engineTotal,audioLatency);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private PdxReaderImpl prepForOrderedReading(){  PdxReaderImpl result=this;  if (this.dis instanceof PdxInstanceInputStream) {    result=new PdxReaderImpl(this);  }  int pos=0;  if (result.blobType.getFieldCount() > 0) {    pos=getPositionForField(result.blobType.getFields().get(0));  }  result.dis.position(pos);  return result;}  }
class C{  public static int parseInt(char[] chars){  int value=0;  for (int i=0, j=(int)Math.pow(10,chars.length - 1); i < chars.length; i++, j/=10) {    value+=(chars[i] - 48) * j;  }  return value;}  }
class C{  public double calculateLogLikelihood(){  StructuredIntervalList list=new ColouredTreeIntervals(treeModel,colourSamplerModel.getTreeColouring());  ColourChangeMatrix mm=migrationModel.getMigrationMatrix();  StructuredCoalescent sc=new StructuredCoalescent();  double logL=sc.calculateLogLikelihood(colourSamplerModel.getTreeColouring(),list,mm,metaPopulationModel);  return logL;}  }
class C{  public boolean covers(Geometry geom){  return eval(geom);}  }
class C{  @Override public void updateNClob(String columnLabel,Reader x) throws SQLException {  updateClob(columnLabel,x,-1);}  }
class C{  public synchronized void connect() throws Exception {  if (!connected) {    terminal=new UDPMasterTerminal(address);    terminal.setPort(port);    terminal.setTimeout(timeout);    terminal.activate();    connected=true;  }}  }
class C{  public static Point resizeToFill(int imageWidth,int imageHeight,int imageRotation,int boundWidth,int boundHeight){  if (imageRotation % 180 != 0) {    int savedWidth=imageWidth;    imageWidth=imageHeight;    imageHeight=savedWidth;  }  Point p=new Point();  p.x=boundWidth;  p.y=boundHeight;  if (imageWidth != 0 && imageHeight != 0) {    if (imageWidth * boundHeight > boundWidth * imageHeight) {      p.y=imageHeight * p.x / imageWidth;    } else {      p.x=imageWidth * p.y / imageHeight;    }  } else {    Log.w(TAG,"zero width/height, falling back to bounds (w|h|bw|bh):" + imageWidth + "|"+ imageHeight+ "|"+ boundWidth+ "|"+ boundHeight);  }  return p;}  }
class C{  private String validateTagAndNetworkAndComputeDescriptionInformation(ComputeState computeState) throws Throwable {  if (this.isAwsClientMock) {    return null;  }  ComputeState taggedComputeState=getComputeByAWSId(this.host,computeState.id);  assertEquals(taggedComputeState.descriptionLink,computeState.descriptionLink);  assertTrue(taggedComputeState.networkInterfaceLinks != null);  assertTrue(taggedComputeState.networkInterfaceLinks.size() == 2);  URI[] networkLinkURIs=new URI[2];  for (int i=0; i < taggedComputeState.networkInterfaceLinks.size(); i++) {    networkLinkURIs[i]=UriUtils.buildUri(this.host,taggedComputeState.networkInterfaceLinks.get(i));  }  Map<URI,NetworkInterfaceState> NICMap=this.host.getServiceState(null,NetworkInterfaceState.class,networkLinkURIs);  assertNotNull(NICMap.get(networkLinkURIs[0]).address);  assertNotNull(NICMap.get(networkLinkURIs[1]).address);  assertTrue(taggedComputeState.customProperties.get(AWS_VPC_ID) != null);  return taggedComputeState.customProperties.get(AWS_VPC_ID);}  }
class C{  @NoInline private static void arraycopyPiecemeal(float[] src,int srcIdx,float[] dst,int dstIdx,int len){  if (srcIdx < dstIdx) {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  } else {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  }}  }
class C{  public boolean isSetMsg(){  return this.msg != null;}  }
class C{  private static void wrapSetterMethod(ClassNode classNode,boolean bindable,String propertyName){  String getterName="get" + MetaClassHelper.capitalize(propertyName);  MethodNode setter=classNode.getSetterMethod("set" + MetaClassHelper.capitalize(propertyName));  if (setter != null) {    Statement code=setter.getCode();    Expression oldValue=varX("$oldValue");    Expression newValue=varX("$newValue");    Expression proposedValue=varX(setter.getParameters()[0].getName());    BlockStatement block=new BlockStatement();    block.addStatement(declS(oldValue,callThisX(getterName)));    block.addStatement(stmt(callThisX("fireVetoableChange",args(constX(propertyName),oldValue,proposedValue))));    block.addStatement(code);    if (bindable) {      block.addStatement(declS(newValue,callThisX(getterName)));      block.addStatement(stmt(callThisX("firePropertyChange",args(constX(propertyName),oldValue,newValue))));    }    setter.setCode(block);  }}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("tomee1x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomee1xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomee1x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomeeExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomee1x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomeeRuntimeConfiguration.class);  configurationFactory.registerConfiguration("tomee7x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Tomee7xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("tomee7x",ContainerType.INSTALLED,ConfigurationType.EXISTING,TomeeExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("tomee7x",ContainerType.REMOTE,ConfigurationType.RUNTIME,TomeeRuntimeConfiguration.class);}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public boolean isTraversable(File f){  Boolean traversable=null;  if (f != null) {    if (getFileView() != null) {      traversable=getFileView().isTraversable(f);    }    FileView uiFileView=getUI().getFileView(this);    if (traversable == null && uiFileView != null) {      traversable=uiFileView.isTraversable(f);    }    if (traversable == null) {      traversable=getFileSystemView().isTraversable(f);    }  }  return (traversable != null && traversable.booleanValue());}  }
class C{  public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory){  return new GraphQualifierHierarchy(factory,null);}  }
class C{  protected void addAll(double[] values,int group){  for (  double value : values) {    add(value,group);  }}  }
class C{  private int generateNonce(){  return RANDOM.nextInt();}  }
class C{  public static <T>ArrayList<T> arrayList(Collection<T> c){  return new ArrayList<T>(c);}  }
class C{  public static DisMaxQueryBuilder disMaxQuery(){  return new DisMaxQueryBuilder();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void checkIfContainsFileWithExt(String fileExtension) throws Exception {  File[] files=diskDir.listFiles();  for (int j=0; j < files.length; j++) {    if (files[j].getAbsolutePath().endsWith(fileExtension)) {      fail("file \"" + files[j].getAbsolutePath() + "\" still exists");    }  }}  }
class C{  private int runTransactionalAssignment(TargetFilterQuery targetFilterQuery,Long dsId){  final String actionMessage=String.format(ACTION_MESSAGE,targetFilterQuery.getName());  return transactionTemplate.execute(null);}  }
class C{  public void buildClassifier(Instances data) throws Exception {  if (m_Classifiers.length == 0) {    throw new Exception("No base classifiers have been set!");  }  getCapabilities().testWithFail(data);  Instances newData=new Instances(data);  newData.deleteWithMissingClass();  Random random=new Random(m_Seed);  newData.randomize(random);  if (newData.classAttribute().isNominal() && (m_NumXValFolds > 1)) {    newData.stratify(m_NumXValFolds);  }  Instances train=newData;  Instances test=newData;  Classifier bestClassifier=null;  int bestIndex=-1;  double bestPerformance=Double.NaN;  int numClassifiers=m_Classifiers.length;  for (int i=0; i < numClassifiers; i++) {    Classifier currentClassifier=getClassifier(i);    Evaluation evaluation;    if (m_NumXValFolds > 1) {      evaluation=new Evaluation(newData);      for (int j=0; j < m_NumXValFolds; j++) {        train=newData.trainCV(m_NumXValFolds,j,new Random(1));        test=newData.testCV(m_NumXValFolds,j);        currentClassifier.buildClassifier(train);        evaluation.setPriors(train);        evaluation.evaluateModel(currentClassifier,test);      }    } else {      currentClassifier.buildClassifier(train);      evaluation=new Evaluation(train);      evaluation.evaluateModel(currentClassifier,test);    }    double error=evaluation.errorRate();    if (m_Debug) {      System.err.println("Error rate: " + Utils.doubleToString(error,6,4) + " for classifier "+ currentClassifier.getClass().getName());    }    if ((i == 0) || (error < bestPerformance)) {      bestClassifier=currentClassifier;      bestPerformance=error;      bestIndex=i;    }  }  m_ClassifierIndex=bestIndex;  if (m_NumXValFolds > 1) {    bestClassifier.buildClassifier(newData);  }  m_Classifier=bestClassifier;}  }
class C{  public static String serializeURLSafe(String string){  if (string == null) {    return null;  }  try {    InputStream raw=new ByteArrayInputStream(string.getBytes(UTF_8));    ByteArrayOutputStream deflated=new ByteArrayOutputStream();    stream(raw,new DeflaterOutputStream(deflated,new Deflater(Deflater.BEST_COMPRESSION)));    String base64=DatatypeConverter.printBase64Binary(deflated.toByteArray());    return base64.replace('+','-').replace('/','_').replace("=","");  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected Set<NodePortTuple> identifyBroadcastDomainPorts(){  Set<NodePortTuple> broadcastDomainPorts=new HashSet<NodePortTuple>();  broadcastDomainPorts.addAll(this.portBroadcastDomainLinks.keySet());  Set<NodePortTuple> additionalNpt=new HashSet<NodePortTuple>();  Map<NodePortTuple,Set<Link>> spLinks=new HashMap<NodePortTuple,Set<Link>>();  for (  NodePortTuple npt : switchPortLinks.keySet()) {    spLinks.put(npt,new HashSet<Link>(switchPortLinks.get(npt)));  }  for (  NodePortTuple npt : spLinks.keySet()) {    Set<Link> links=spLinks.get(npt);    boolean bdPort=false;    ArrayList<Link> linkArray=new ArrayList<Link>();    if (links.size() > 2) {      bdPort=true;    } else     if (links.size() == 2) {      for (      Link l : links) {        linkArray.add(l);      }      Link l1=linkArray.get(0);      Link l2=linkArray.get(1);      if (!l1.getSrc().equals(l2.getDst()) || !l1.getSrcPort().equals(l2.getDstPort()) || !l1.getDst().equals(l2.getSrc())|| !l1.getDstPort().equals(l2.getSrcPort())) {        bdPort=true;      }    }    if (bdPort && (broadcastDomainPorts.contains(npt) == false)) {      additionalNpt.add(npt);    }  }  if (additionalNpt.size() > 0) {    log.warn("The following switch ports have multiple " + "links incident on them, so these ports will be treated " + " as braodcast domain ports. {}",additionalNpt);    broadcastDomainPorts.addAll(additionalNpt);  }  return broadcastDomainPorts;}  }
class C{  private int toModifierFlags(int mods){  return modifierFlags((mods & GLFW_MOD_ALT) != 0,(mods & GLFW_MOD_CONTROL) != 0,(mods & GLFW_MOD_SUPER) != 0,(mods & GLFW_MOD_SHIFT) != 0);}  }
class C{  private static void checkHandlers(FileWriter fw) throws Exception {  Set<InvokeExpr> invokesInSystem=getAllSystemInvokes();  fw.write("\n\nMethods overriding a system method that are not called from model: \n");  for (  SootClass clz : Scene.v().getClasses()) {    if (!(Project.v().isLibClass(clz) || Project.v().isSrcClass(clz)))     continue;    for (    SootMethod method : clz.getMethods()) {      if (method.isConcrete() && Hierarchy.isImplementedSystemMethod(method)) {        if (Hierarchy.isAndroidComponentClass(clz) && (method.isConstructor() || "void <clinit>()".equals(method.getSubSignature())))         continue;        boolean found=false;        for (        SootMethod srcMeth : PTABridge.v().incomingEdgesIns(method)) {          if (API.v().isSystemMethod(srcMeth)) {            found=true;            break;          }        }        if (!found && !API.v().isSystemClass(method.getDeclaringClass())) {          fw.write(method + " overrides " + API.v().getClosestOverridenAPIMethod(method)+ "\n");          AnalysisReport.v().addEntry("Application method that overrides API method is dead code.",method,AnalysisReport.Level.LOW);          List<SootMethod> couldCall=new LinkedList<SootMethod>();          for (          InvokeExpr invoke : invokesInSystem) {            if (SootUtils.couldCallBasedOnTypes(invoke,method))             couldCall.add(JimpleRelationships.v().getEnclosingMethod(invoke));          }          if (couldCall.isEmpty()) {            fw.write("\tMethod not called anywhere in Android API/Runtime!\n");          } else {            fw.write("\tMethod could be called from following Android API/Runtime Methods:\n");            for (            SootMethod m : couldCall)             fw.write("\t  " + m + "\n");          }        }      }    }  }  fw.write("\n");}  }
class C{  public Node addChild(Node parent){  nodeCheck(parent,true);  return getNode(addChild(parent.getRow()));}  }
class C{  private void createTopology(){  n1.addNeighbor(n2);  n1.addNeighbor(n4);  n2.addNeighbor(n1);  n2.addNeighbor(n5);  n2.addNeighbor(n3);  n3.addNeighbor(n2);  n3.addNeighbor(n6);  n3.addNeighbor(n7);  n4.addNeighbor(n1);  n4.addNeighbor(n5);  n5.addNeighbor(n4);  n5.addNeighbor(n2);  n5.addNeighbor(n6);  n6.addNeighbor(n5);  n6.addNeighbor(n3);  n6.addNeighbor(n7);  n7.addNeighbor(n6);  n7.addNeighbor(n3);  n7.addNeighbor(n8);  n8.addNeighbor(n7);}  }
class C{  @Override public String toString(){  return String.valueOf(getValue());}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null || getClass() != obj.getClass())   return false;  DateFormatSymbols that=(DateFormatSymbols)obj;  return (Arrays.equals(eras,that.eras) && Arrays.equals(months,that.months) && Arrays.equals(shortMonths,that.shortMonths)&& Arrays.equals(weekdays,that.weekdays)&& Arrays.equals(shortWeekdays,that.shortWeekdays)&& Arrays.equals(ampms,that.ampms)&& Arrays.deepEquals(getZoneStringsWrapper(),that.getZoneStringsWrapper())&& ((localPatternChars != null && localPatternChars.equals(that.localPatternChars)) || (localPatternChars == null && that.localPatternChars == null)));}  }
class C{  public ServerResponseInterface newSIPServerResponse(SIPResponse responseReceived,MessageChannel responseMessageChannel){  Iterator<SIPClientTransaction> transactionIterator;  SIPClientTransaction nextTransaction;  SIPClientTransaction currentTransaction;  String key=responseReceived.getTransactionId();  currentTransaction=(SIPClientTransaction)clientTransactionTable.get(key);  if (currentTransaction == null || (!currentTransaction.isMessagePartOfTransaction(responseReceived) && !key.startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE))) {    transactionIterator=clientTransactionTable.values().iterator();    currentTransaction=null;    while (transactionIterator.hasNext() && currentTransaction == null) {      nextTransaction=(SIPClientTransaction)transactionIterator.next();      if (nextTransaction.isMessagePartOfTransaction(responseReceived)) {        currentTransaction=nextTransaction;      }    }    if (currentTransaction == null) {      if (isLoggingEnabled(StackLogger.TRACE_INFO)) {        responseMessageChannel.logResponse(responseReceived,System.currentTimeMillis(),"before processing");      }      return sipMessageFactory.newSIPServerResponse(responseReceived,responseMessageChannel);    }  }  boolean acquired=currentTransaction.acquireSem();  if (isLoggingEnabled(StackLogger.TRACE_INFO)) {    currentTransaction.logResponse(responseReceived,System.currentTimeMillis(),"before processing");  }  if (acquired) {    ServerResponseInterface sri=sipMessageFactory.newSIPServerResponse(responseReceived,currentTransaction);    if (sri != null) {      currentTransaction.setResponseInterface(sri);    } else {      if (isLoggingEnabled()) {        stackLogger.logDebug("returning null - serverResponseInterface is null!");      }      currentTransaction.releaseSem();      return null;    }  } else {    if (isLoggingEnabled())     stackLogger.logDebug("Could not aquire semaphore !!");  }  if (acquired)   return currentTransaction; else   return null;}  }
class C{  protected void invalidateSchema(){  m_schema=null;}  }
class C{  public Future<Boolean> start(String ignored1,String ignored2){  return start();}  }
class C{  public FluentTriFunction<T1,T2,T3,R> retry(final int times,final int backoffStartTime){  return FluentFunctions.of(null);}  }
class C{  public LongSparseLongArray(int initialCapacity){  initialCapacity=ArrayUtils.idealLongArraySize(initialCapacity);  mKeys=new long[initialCapacity];  mValues=new long[initialCapacity];  mSize=0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static MatrixBlock aggStable(JavaPairRDD<MatrixIndexes,MatrixBlock> in,AggregateOperator aop){  return aggStable(in.values(),aop);}  }
class C{  private void sendMotionEventStripInactivePointers(MotionEvent prototype,int policyFlags){  ReceivedPointerTracker receivedTracker=mReceivedPointerTracker;  if (prototype.getPointerCount() == receivedTracker.getActivePointerCount()) {    sendMotionEvent(prototype,prototype.getAction(),ALL_POINTER_ID_BITS,policyFlags);    return;  }  if (receivedTracker.getActivePointerCount() == 0 && !receivedTracker.wasLastReceivedUpPointerActive()) {    return;  }  final int actionMasked=prototype.getActionMasked();  final int actionPointerId=prototype.getPointerId(prototype.getActionIndex());  if (actionMasked != MotionEvent.ACTION_MOVE) {    if (!receivedTracker.isActiveOrWasLastActiveUpPointer(actionPointerId)) {      return;    }  }  int pointerIdBits=0;  final int pointerCount=prototype.getPointerCount();  for (int pointerIndex=0; pointerIndex < pointerCount; pointerIndex++) {    final int pointerId=prototype.getPointerId(pointerIndex);    if (receivedTracker.isActiveOrWasLastActiveUpPointer(pointerId)) {      pointerIdBits|=(1 << pointerId);    }  }  sendMotionEvent(prototype,prototype.getAction(),pointerIdBits,policyFlags);}  }
class C{  protected FloatType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public Message build(){  return message;}  }
class C{  public EventNode peek() throws Exception {  if (peek == null) {    peek=next();  }  return peek;}  }
class C{  public Vector3d mulDirection(Matrix4fc mat){  return mulDirection(mat,this);}  }
class C{  private static int compareTo(byte[] ip1,byte[] ip2){  if (Arrays.areEqual(ip1,ip2)) {    return 0;  }  if (Arrays.areEqual(max(ip1,ip2),ip1)) {    return 1;  }  return -1;}  }
class C{  public int indexOfMax(){  int index=0;  double ma=V[0];  for (int i=1; i < size(); i++) {    if (ma < V[i]) {      ma=V[i];      index=i;    }  }  return index;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public void addPath(Path path,int style){  addCommand(new PDFShapeCmd(path,style));}  }
class C{  public boolean isDistributedSystem(){  return this.equals(DISTRIBUTED_SYSTEM);}  }
class C{  public static List<MarkerParameter> createBugParameters(IJavaProject project,BugCollection theCollection,IProgressMonitor monitor){  List<MarkerParameter> bugParameters=new ArrayList<MarkerParameter>();  if (project == null) {    FindbugsPlugin.getDefault().logException(new NullPointerException("project is null"),"project is null");    return bugParameters;  }  Iterator<BugInstance> iterator=theCollection.iterator();  while (iterator.hasNext() && !monitor.isCanceled()) {    BugInstance bug=iterator.next();    DetectorFactory detectorFactory=bug.getDetectorFactory();    if (detectorFactory != null && !detectorFactory.getPlugin().isGloballyEnabled()) {      continue;    }    MarkerParameter mp=createMarkerParameter(project,bug);    if (mp != null) {      bugParameters.add(mp);    }  }  return bugParameters;}  }
class C{  public GeoPoint(final PlanetModel planetModel,final double lat,final double lon){  this(planetModel,Math.sin(lat),Math.sin(lon),Math.cos(lat),Math.cos(lon),lat,lon);}  }
class C{  public static void saveIconOnlyPref(boolean logoutOnExit){  Preferences prefs=getPrefs();  prefs.putBoolean(getCustomUserKey(ICON_ONLY_KEY),logoutOnExit);  flushPrefs(prefs);}  }
class C{  public int indexOf(char ch){  return indexOf(ch,0);}  }
class C{  public static long toLongValue(Object o) throws PageException {  if (o instanceof Character)   return (((Character)o).charValue()); else   if (o instanceof Boolean)   return ((((Boolean)o).booleanValue()) ? 1L : 0L); else   if (o instanceof Number)   return (((Number)o).longValue()); else   if (o instanceof String) {    String str=(String)o;    try {      return Long.parseLong(str);    } catch (    NumberFormatException nfe) {      return (long)toDoubleValue(str);    }  } else   if (o instanceof Castable)   return (long)((Castable)o).castToDoubleValue(); else   if (o instanceof ObjectWrap)   return toLongValue(((ObjectWrap)o).getEmbededObject());  throw new CasterException(o,"long");}  }
class C{  private void buildDomTree(){  int szNodes=nodes.size();  for (int i=0; i < szNodes; i++) {    DomInfo info=domInfos[i];    if (info.idom == -1)     continue;    SsaBasicBlock domParent=nodes.get(info.idom);    domParent.addDomChild(nodes.get(i));  }}  }
class C{  public NodeListImpl(Node rootNode,String tagName,boolean deepSearch){  mRootNode=rootNode;  mTagName=tagName;  mDeepSearch=deepSearch;}  }
class C{  public PolynomialTerm(double coefficient,int[] variables){  if (variables == null) {    throw new NullPointerException("Variables cannot be null.");  }  this.variables=new int[variables.length];  System.arraycopy(variables,0,this.variables,0,variables.length);  this.coefficient=coefficient;}  }
class C{  public Builder underline(){  this.underline=true;  return this;}  }
class C{  private void copyTagToPageScope(int scope){  Iterator<String> iter=null;switch (scope) {case VariableInfo.NESTED:    if (nestedVars != null) {      iter=nestedVars.iterator();    }  break;case VariableInfo.AT_BEGIN:if (atBeginVars != null) {  iter=atBeginVars.iterator();}break;case VariableInfo.AT_END:if (atEndVars != null) {iter=atEndVars.iterator();}break;}while ((iter != null) && iter.hasNext()) {String varName=iter.next();Object obj=getAttribute(varName);varName=findAlias(varName);if (obj != null) {invokingJspCtxt.setAttribute(varName,obj);} else {invokingJspCtxt.removeAttribute(varName,PAGE_SCOPE);}}}  }
class C{  protected SystemMemberJmxImpl(AdminDistributedSystemJmxImpl system,InternalDistributedMember member) throws AdminException {  super(system,member);  initializeMBean();}  }
class C{  public BuildMetadataContextAction(){}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  private void adjustForTopFadingEdge(View childInSelectedRow,int topSelectionPixel,int bottomSelectionPixel){  if (childInSelectedRow.getTop() < topSelectionPixel) {    int spaceAbove=topSelectionPixel - childInSelectedRow.getTop();    int spaceBelow=bottomSelectionPixel - childInSelectedRow.getBottom();    int offset=Math.min(spaceAbove,spaceBelow);    offsetChildrenTopAndBottom(offset);  }}  }
class C{  public static VersionInfoResponse create(DistributionManager dm,InternalDistributedMember recipient){  VersionInfoResponse m=new VersionInfoResponse();  m.setRecipient(recipient);  m.verInfo=GemFireVersion.asString();  return m;}  }
class C{  private void writeMMFile(ExecutionContext ec,String fname) throws DMLRuntimeException {  MatrixObject mo=ec.getMatrixObject(input1.getName());  String outFmt="matrixmarket";  if (mo.isDirty()) {    mo.exportData(fname,outFmt);  } else {    OutputInfo oi=((MatrixFormatMetaData)mo.getMetaData()).getOutputInfo();    MatrixCharacteristics mc=mo.getMatrixCharacteristics();    if (oi == OutputInfo.TextCellOutputInfo) {      try {        WriterMatrixMarket writer=new WriterMatrixMarket();        writer.mergeTextcellToMatrixMarket(mo.getFileName(),fname,mc.getRows(),mc.getCols(),mc.getNonZeros());      } catch (      IOException e) {        throw new DMLRuntimeException(e);      }    } else     if (oi == OutputInfo.BinaryBlockOutputInfo) {      mo.exportData(fname,outFmt);    } else {      throw new DMLRuntimeException("Unexpected data format (" + OutputInfo.outputInfoToString(oi) + "): can not export into MatrixMarket format.");    }  }}  }
class C{  public static int copyAndCloseOutput(Reader input,Writer output) throws IOException {  try {    return copy(input,output);  }  finally {    output.close();  }}  }
class C{  public void edit(Handler h) throws CannotCompileException {}  }
class C{  public float mag(){  return (float)Math.sqrt(x * x + y * y + z * z);}  }
class C{  public MProductCategoryAcct(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public void readExif(InputStream inStream) throws IOException {  if (inStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifData d=null;  try {    d=new ExifReader(this).read(inStream);  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }  mData=d;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static int showYesNoCancelQuestion(final Component parent,final String msg){  return JOptionPane.showConfirmDialog(isIconified(parent) ? null : parent,msg,System.getProperty(DEFAULT_WINDOW_TITLE_PROPERTY),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);}  }
class C{  public DateRange modify(long start,long end){  return new DateRange(Math.max(this.start,start),Math.min(this.end,end - 1));}  }
class C{  private Connection wrapConnection(final Connection connection,final JdbcDatabaseContainer container,final String url){  Set<Connection> connections=containerConnections.get(container.getContainerId());  if (connections == null) {    connections=new HashSet<>();    containerConnections.put(container.getContainerId(),connections);  }  connections.add(connection);  final Set<Connection> finalConnections=connections;  return new ConnectionWrapper(connection,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.858 -0500",hash_original_method="9981F0DD702462FD09DA371539E225DF",hash_generated_method="08CD887017BEACDA1AECAC968CDD0187") public void onInputEvent(InputEvent event,int nestingLevel){  if (event instanceof KeyEvent) {    final KeyEvent keyEvent=(KeyEvent)event;    onKeyEvent(keyEvent,nestingLevel);  } else {    final MotionEvent motionEvent=(MotionEvent)event;    if (motionEvent.isTouchEvent()) {      onTouchEvent(motionEvent,nestingLevel);    } else     if ((motionEvent.getSource() & InputDevice.SOURCE_CLASS_TRACKBALL) != 0) {      onTrackballEvent(motionEvent,nestingLevel);    } else {      onGenericMotionEvent(motionEvent,nestingLevel);    }  }}  }
class C{  public static void send(){  String clientid=readID();  if (clientid == null) {    clientid=generateRandomString();    saveID(clientid);  }  final RPAction action=new RPAction();  if (RPClass.getRPClass("cstatus") != null) {    action.put("type","cstatus");  } else {    action.put("type","cid");  }  if (clientid != null) {    action.put("cid",clientid);  }  String version=Debug.VERSION;  if (Debug.PRE_RELEASE_VERSION != null) {    version=version + " - " + Debug.PRE_RELEASE_VERSION;  }  action.put("version",version);  try {    Class<?> clazz=Class.forName("games.stendhal.client.update.Starter");    if (clazz != null) {      Object[] objects=clazz.getSigners();      if (objects instanceof Certificate[]) {        Certificate[] certs=(Certificate[])objects;        if ((certs.length > 0)) {          byte[] key=certs[0].getPublicKey().getEncoded();          action.put("dist",Hash.toHexString(Hash.hash(key)));        }      }    }  } catch (  Throwable e) {    logger.error(e,e);  }  try {    Class<?> clazz=Class.forName("games.stendhal.client.StendhalBuild");    Object buildNumber=clazz.getMethod("getBuildNumber").invoke(null);    if (buildNumber != null) {      action.put("build",buildNumber.toString());    }  } catch (  Throwable e) {    logger.debug(e,e);  }  ClientSingletonRepository.getClientFramework().send(action);}  }
class C{  @Override public void doGenerate(Monitor monitor) throws IOException {  super.doGenerate(monitor);}  }
class C{  public String toString(){  return "[" + value + "]";}  }
class C{  private static void processImage(final Switchboard sb,final serverObjects prop,final int item,final SearchEvent theSearch,final String target_special_pattern,long timeout,boolean authenticated){  prop.put("content",theSearch.query.contentdom.getCode() + 1);  try {    SearchEvent.ImageResult image=theSearch.oneImageResult(item,timeout);    final String imageUrlstring=image.imageUrl.toNormalform(true);    final String imageUrlExt=MultiProtocolURL.getFileExtension(image.imageUrl.getFileName());    final String target=sb.getConfig(imageUrlstring.matches(target_special_pattern) ? SwitchboardConstants.SEARCH_TARGET_SPECIAL : SwitchboardConstants.SEARCH_TARGET_DEFAULT,"_self");    final String license=URLLicense.aquireLicense(image.imageUrl);    final String viewImageExt=!imageUrlExt.isEmpty() && ImageViewer.isBrowserRendered(imageUrlExt) ? imageUrlExt : "png";    StringBuilder thumbURLBuilder=new StringBuilder("ViewImage.").append(viewImageExt).append("?maxwidth=").append(DEFAULT_IMG_WIDTH).append("&maxheight=").append(DEFAULT_IMG_HEIGHT).append("&isStatic=true&quadratic");    if (authenticated) {      thumbURLBuilder.append("&url=").append(imageUrlstring);    } else {      thumbURLBuilder.append("&code=").append(URLLicense.aquireLicense(image.imageUrl));    }    String thumbURL=thumbURLBuilder.toString();    prop.putHTML("content_item_hrefCache",thumbURL);    if (authenticated) {      prop.putHTML("content_item_hrefFullPreview","ViewImage." + viewImageExt + "?isStatic=true&url="+ imageUrlstring);    } else {      prop.putHTML("content_item_hrefFullPreview",thumbURL);    }    prop.putHTML("content_item_href",imageUrlstring);    prop.putHTML("content_item_target",target);    prop.put("content_item_code",license);    prop.putHTML("content_item_name",shorten(image.imagetext,MAX_NAME_LENGTH));    prop.put("content_item_mimetype",image.mimetype);    prop.put("content_item_fileSize",0);    String itemWidth=DEFAULT_IMG_WIDTH + "px", itemHeight=DEFAULT_IMG_HEIGHT + "px", itemStyle="";    if (ImageViewer.isBrowserRendered(imageUrlExt)) {      if (image.width > image.height) {        itemWidth="";        itemHeight="100%";        if (image.height > 0) {          double scale=((double)DEFAULT_IMG_HEIGHT) / ((double)image.height);          int margin=(int)((image.height - image.width) * (scale / 2.0));          itemStyle="margin-left: " + margin + "px;";        }      } else {        itemWidth="100%";        itemHeight="";        if (image.height > image.width && image.width > 0) {          double scale=((double)DEFAULT_IMG_WIDTH) / ((double)image.width);          int margin=(int)((image.width - image.height) * (scale / 2.0));          itemStyle="margin-top: " + margin + "px;";        }      }    }    prop.put("content_item_width",itemWidth);    prop.put("content_item_height",itemHeight);    prop.put("content_item_style",itemStyle);    prop.put("content_item_attr","");    prop.put("content_item_urlhash",ASCII.String(image.imageUrl.hash()));    prop.put("content_item_source",image.sourceUrl.toNormalform(true));    prop.putXML("content_item_source-xml",image.sourceUrl.toNormalform(true));    prop.put("content_item_sourcedom",image.sourceUrl.getHost());    prop.put("content_item_nl",(item == theSearch.query.offset) ? 0 : 1);    prop.put("content_item",1);  } catch (  MalformedURLException e) {    prop.put("content_item","0");  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x09C26C7E,version=271) public int sceUsbCamSetContrast(int contrast){  this.contrast=contrast;  return 0;}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public ImageTitle(Image image,RectangleEdge position,HorizontalAlignment horizontalAlignment,VerticalAlignment verticalAlignment){  this(image,image.getHeight(null),image.getWidth(null),position,horizontalAlignment,verticalAlignment,Title.DEFAULT_PADDING);}  }
class C{  private static void addMacKeyboardActionsTo(String key){  InputMap im=(InputMap)UIManager.get(key);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,KeyEvent.META_DOWN_MASK),DefaultEditorKit.beginLineAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,KeyEvent.META_DOWN_MASK),DefaultEditorKit.endLineAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,KeyEvent.ALT_DOWN_MASK),DefaultEditorKit.previousWordAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,KeyEvent.ALT_DOWN_MASK),DefaultEditorKit.nextWordAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,KeyEvent.META_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK),DefaultEditorKit.selectionBeginLineAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,KeyEvent.META_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK),DefaultEditorKit.selectionEndLineAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,KeyEvent.ALT_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK),DefaultEditorKit.selectionPreviousWordAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,KeyEvent.ALT_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK),DefaultEditorKit.selectionNextWordAction);  im.put(KeyStroke.getKeyStroke(KeyEvent.VK_A,KeyEvent.META_DOWN_MASK),DefaultEditorKit.selectAllAction);}  }
class C{  public void eolIsSignificant(boolean flag){  eolIsSignificantP=flag;}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("C_Cashbook_Acct");}  }
class C{  public JpaRepositoryState(String machineId,JpaRepositoryState parentState,String state,boolean initial,Set<JpaRepositoryAction> stateActions,Set<JpaRepositoryAction> entryActions,Set<JpaRepositoryAction> exitActions){  this.machineId=machineId;  this.parentState=parentState;  this.state=state;  this.initial=initial;  this.stateActions=stateActions;  this.entryActions=entryActions;  this.exitActions=exitActions;}  }
class C{  private static void explicitOverlapTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"explicit_explicit",TestType.UNION);  final Random random=new Random(randomLong());  final HLL hll=newHLL(HLLType.EMPTY);  final HLL emptyHLL=newHLL(HLLType.EMPTY);  cumulativeUnionLine(output,hll,emptyHLL,schemaVersion);  for (int i=0; i < EXPLICIT_THRESHOLD; i++) {    final HLL explicitHLL=newHLL(HLLType.EXPLICIT);    explicitHLL.addRaw(random.nextLong());    cumulativeUnionLine(output,hll,explicitHLL,schemaVersion);    cumulativeUnionLine(output,hll,explicitHLL,schemaVersion);  }  output.flush();  output.close();}  }
class C{  public static void main(String[] argv){  ArgParser ap=new ArgParser("EsriShapeExport");  ap.add("shp","A URL to a shape file (.shp).",1);  if (argv.length < 1) {    ap.bail("",true);  }  ap.parse(argv);  String[] files=ap.getArgValues("shp");  if (files != null && files[0] != null) {    String shp=files[0];    String dbf=null;    try {      dbf=shp.substring(0,shp.lastIndexOf('.') + 1) + PARAM_DBF;      DbfTableModel model=DbfTableModel.getDbfTableModel(PropUtils.getResourceOrFileOrURL(dbf));      EsriGraphicList list=EsriGraphicList.getEsriGraphicList(PropUtils.getResourceOrFileOrURL(shp),null,null);      logger.info(list.getDescription());      EsriShapeExport ese=new EsriShapeExport(list,model,null);      ese.export();    } catch (    MalformedURLException murle) {      logger.warning("EsriShapeExport: Malformed URL Exception\n" + murle.getMessage());    }catch (    NullPointerException npe) {      logger.warning("EsriShapeExport: Path to shape file isn't good enough to find .dbf file and .shx file.");    }catch (    Exception exception) {      logger.warning("EsriShapeExport: Exception\n" + exception.getMessage());      exception.printStackTrace();    }  } else {    ap.bail("Need a path to a Shape file (.shp)",true);  }  System.exit(0);}  }
class C{  public void push(E value){  super.get().addLast(value);}  }
class C{  public StreamingTemplateEngine(ClassLoader parentLoader){  this.parentLoader=parentLoader;}  }
class C{  public void onPrepared(MediaPlayer player){  mState=State.PLAYING;  updateNotification(String.format(getString(R.string.media_state_playing),mFile.getFileName()));  if (mMediaController != null) {    mMediaController.setEnabled(true);  }  player.seekTo(mStartPosition);  configAndStartMediaPlayer();  if (!mPlayOnPrepared) {    processPauseRequest();  }  if (mMediaController != null) {    mMediaController.updatePausePlay();  }}  }
class C{  private void updateWorkAmount(double workTime){  if (workTime <= 0) {    currentWorkAmount*=2;  } else {    totalTimeTaken+=workTime;    completedWorkAmount+=currentWorkAmount;    currentWorkAmount=(int)Math.ceil(targetExecutionMs * completedWorkAmount / totalTimeTaken);  }}  }
class C{  public final boolean logModified(Logger log){  if (_lifecycle.isDestroyed())   return true;  DependencyContainer dependencies=_dependencies;  if (dependencies != null)   return dependencies.logModified(log); else   return false;}  }
class C{  EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  public Vset checkAmbigName(Environment env,Context ctx,Vset vset,Hashtable exp,UnaryExpression loc){  try {    if (ctx.getField(env,id) != null) {      return checkValue(env,ctx,vset,exp);    }  } catch (  ClassNotFound ee) {  }catch (  AmbiguousMember ee) {  }  ClassDefinition c=toResolvedType(env,ctx,true);  if (c != null) {    loc.right=new TypeExpression(where,c.getType());    return vset;  }  type=Type.tPackage;  return vset;}  }
class C{  public MethodInfo findMethodHere(String name,Class<?>... paramTypes){  return findMethodHere(name,ClassInfo.findOrCreateClass(paramTypes));}  }
class C{  public static double interpolate(double amount,double value1,double value2){  return (1 - amount) * value1 + amount * value2;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassPanelUI();}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public XYLocation(int x,int y){  xCoOrdinate=x;  yCoOrdinate=y;}  }
class C{  public void test_wrap_ByteBuffer_ByteBuffer_02(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100).asReadOnlyBuffer();  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbs,bbd);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  private void checkPresenceCode(String code,boolean isUserModification,MUCUser mucUser,String from){  if ("307".equals(code)) {    if (isUserModification) {      joined=false;      fireUserStatusListeners("kicked",new Object[]{mucUser.getItem().getActor(),mucUser.getItem().getReason()});      occupantsMap.clear();      nickname=null;      userHasLeft();    } else {      List<String> params=new ArrayList<String>();      params.add(from);      params.add(mucUser.getItem().getActor());      params.add(mucUser.getItem().getReason());      fireParticipantStatusListeners("kicked",params);    }  } else   if ("301".equals(code)) {    if (isUserModification) {      joined=false;      fireUserStatusListeners("banned",new Object[]{mucUser.getItem().getActor(),mucUser.getItem().getReason()});      occupantsMap.clear();      nickname=null;      userHasLeft();    } else {      List<String> params=new ArrayList<String>();      params.add(from);      params.add(mucUser.getItem().getActor());      params.add(mucUser.getItem().getReason());      fireParticipantStatusListeners("banned",params);    }  } else   if ("321".equals(code)) {    if (isUserModification) {      joined=false;      fireUserStatusListeners("membershipRevoked",new Object[]{});      occupantsMap.clear();      nickname=null;      userHasLeft();    }  } else   if ("303".equals(code)) {    List<String> params=new ArrayList<String>();    params.add(from);    params.add(mucUser.getItem().getNick());    fireParticipantStatusListeners("nicknameChanged",params);  }}  }
class C{  public CycleTriggerThreshold(){  super(Options.set,"Cycle Trigger Threshold","Trigger cycle detection if the space available falls below this threshold",1024);}  }
class C{  public static void writeCharsToFile(File file,char[] chars,Charset charset) throws IOException, FileNotFoundException {  FileOutputStream fileOS=new FileOutputStream(file);  OutputStreamWriter osWriter=new OutputStreamWriter(fileOS,charset);  StreamUtil.writeCharsToWriter(chars,osWriter);}  }
class C{  protected void closeAllStorages(){  if (storageRecorder.isRecordingOn() || storageRecorder.isRecordingScheduled()) {    try {      stopRecording();    } catch (    Exception e) {      log.warn("Recording storage could not be finalized during the CMR shut-down.",e);    }  }  for (  StorageData openedStorage : openedStoragesMap.keySet()) {    try {      this.closeStorage(openedStorage);    } catch (    Exception e) {      log.warn("Storage " + openedStorage + " could not be finalized during the CMR shut-down.",e);    }  }}  }
class C{  public void removeEdge(N a,N b){  if (!containsBoth(a,b))   return;  nodes.get(a).getOutgoing().remove(b);  nodes.get(b).getIncoming().remove(a);}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(Address.toDottedQuad(address));  sb.append(" ");  sb.append(protocol);  for (int i=0; i < services.length; i++) {    sb.append(" " + services[i]);  }  return sb.toString();}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  public AbstractSimpleConfigurator(final Shell parent,final SimpleFeatureCollection featureCollection,final Style style){  super(parent);  this.featureCollection=featureCollection;  this.style=style;}  }
class C{  public boolean containsKey(byte[] key){  assert (this.index != null) : "index == null; closeDate=" + this.closeDate + ", now="+ new Date();  if (this.index == null) {    log.severe("this.index == null in containsKey(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return false;  }  key=normalizeKey(key);synchronized (this.index) {    return this.index.get(key) >= 0;  }}  }
class C{  public TermsByQueryRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  public IncompatibleClassChangeError(){  super();}  }
class C{  private void loadColor(){  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);  int backgroundColor=sp.getInt("BACKGROUND_COLOR",-1);  int textColor=sp.getInt("TEXT_COLOR",-1);  if (backgroundColor != -1 && textColor != -1) {    setColors(backgroundColor,textColor);  } else {    initialColors=new int[]{ContextCompat.getColor(this,R.color.colorPrimary),ContextCompat.getColor(this,R.color.textColorPrimary)};  }}  }
class C{  public void testMergeTwoDocuments() throws Exception {  SAXBuilder sb=new SAXBuilder();  String doc1="<topnode><parentnode><value>8</value></parentnode></topnode>";  String doc2="<topnode><parentnode><value>13</value></parentnode></topnode>";  String doc3="<topnode><parentnode><value>26</value></parentnode></topnode>";  Document saxDoc1=sb.build(new StringReader(doc1));  Document saxDoc2=sb.build(new StringReader(doc2));  Document saxDoc3=sb.build(new StringReader(doc3));  DocumentMerger merger=new DocumentMerger();  merger.addMergeItem(saxDoc1);  merger.addMergeItem(saxDoc2);  merger.addMergeItem(saxDoc3);  Document mergedDoc=(Document)merger.performMerge();  Element rootNode=mergedDoc.getRootElement();  List<Element> list=rootNode.getChildren("parentnode");  assertNotNull(list);  assertEquals(3,list.size());  assertEquals(((Element)list.get(0)).getChildText("value"),"8");  assertEquals(((Element)list.get(1)).getChildText("value"),"13");  assertEquals(((Element)list.get(2)).getChildText("value"),"26");}  }
class C{  public SailWrapper(Sail baseSail){  setBaseSail(baseSail);}  }
class C{  public void addForeignWatch(TableKraken table,byte[] key,String serverId){  WatchForeign watch=new WatchForeign(key,table,serverId);  WatchTable watchTable=getWatchTable(table);  watchTable.addWatchForeign(watch,key);}  }
class C{  public static boolean deodexApkFailSafe(File odexFile,File dexFile){  File smaliFolder=new File(dexFile.getParentFile().getAbsolutePath() + File.separator + dexFile.getName().substring(0,dexFile.getName().lastIndexOf(".")));  smaliFolder.getParentFile().mkdirs();  String[] cmd={"java",Cfg.getMaxHeadSizeArg(),"-jar",S.getBaksmali(),"-x","-c","boot.oat","-d",S.getBootTmp().getParentFile().getAbsolutePath(),odexFile.getAbsolutePath(),"-o",smaliFolder.getAbsolutePath()};  String[] cmd2={"java",Cfg.getMaxHeadSizeArg(),"-jar",S.getSmali(),"-a","" + SessionCfg.getSdk(),"-o",dexFile.getAbsolutePath(),smaliFolder.getAbsolutePath()};  CmdUtils.runCommand(cmd);  if (!smaliFolder.exists()) {    Logger.appendLog("[Deodexer][E]Failed at baksmali " + odexFile.getName());    return false;  }  CmdUtils.runCommand(cmd2);  return dexFile.exists();}  }
class C{  public RpfFrame(RpfFrameEntry rfe){  this(rfe.framePath);  if (!isValid() && rfe.exists && rfe.rpfdirIndex != -1) {    String lowerCaseFramePath=rfe.framePath.substring(rfe.rpfdirIndex + 3);    lowerCaseFramePath=lowerCaseFramePath.toLowerCase();    String rpfDir=rfe.framePath.substring(0,rfe.rpfdirIndex + 3);    if (DEBUG_RPFFRAME) {      Debug.output("RpfFrame " + rfe.framePath + " not found, checking "+ rpfDir+ lowerCaseFramePath);    }    if (initFile(rpfDir + lowerCaseFramePath)) {      rfe.framePath=rpfDir + lowerCaseFramePath;    } else {      rfe.exists=false;    }  }  Dchum=true;}  }
class C{  short readShort(){  int b1, b2;  b1=pkt.data[inCursor++] & 0xff;  b2=pkt.data[inCursor++] & 0xff;  return (short)((b1 << 8) + b2);}  }
class C{  public Ling(DataSet d){  dataSet=d;}  }
class C{  private Map<Id<Node>,ArrayList<ActivityFacility>> aggregateMeasurePointsWithSameNearestNode(){  Map<Id<Node>,ArrayList<ActivityFacility>> aggregatedOrigins=new ConcurrentHashMap<>();  for (  ActivityFacility measuringPoint : measuringPoints.getFacilities().values()) {    Node fromNode=NetworkUtils.getCloserNodeOnLink(measuringPoint.getCoord(),NetworkUtils.getNearestLinkExactly(scenario.getNetwork(),measuringPoint.getCoord()));    Id<Node> nodeId=fromNode.getId();    if (!aggregatedOrigins.containsKey(nodeId)) {      aggregatedOrigins.put(nodeId,new ArrayList<ActivityFacility>());    }    aggregatedOrigins.get(nodeId).add(measuringPoint);  }  log.info("Number of measurement points (origins): " + measuringPoints.getFacilities().values().size());  log.info("Number of aggregated measurement points (origins): " + aggregatedOrigins.size());  return aggregatedOrigins;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TYPE_SPECIFIER;}  }
class C{  public static Object[] asArray(Object arguments){  if (arguments == null) {    return EMPTY_ARGUMENTS;  }  if (arguments instanceof Object[]) {    return (Object[])arguments;  }  return new Object[]{arguments};}  }
class C{  public static NettyTransport createTransport(URI remoteURI) throws Exception {  Map<String,String> map=PropertyUtil.parseQuery(remoteURI.getQuery());  Map<String,String> transportURIOptions=PropertyUtil.filterProperties(map,"transport.");  NettyTransportOptions transportOptions=null;  remoteURI=PropertyUtil.replaceQuery(remoteURI,map);  if (!remoteURI.getScheme().equalsIgnoreCase("ssl") && !remoteURI.getScheme().equalsIgnoreCase("wss")) {    transportOptions=NettyTransportOptions.INSTANCE.clone();  } else {    transportOptions=NettyTransportSslOptions.INSTANCE.clone();  }  Map<String,String> unused=PropertyUtil.setProperties(transportOptions,transportURIOptions);  if (!unused.isEmpty()) {    String msg=" Not all transport options could be set on the TCP based" + " Transport. Check the options are spelled correctly." + " Unused parameters=[" + unused + "]."+ " This provider instance cannot be started.";    throw new IllegalArgumentException(msg);  }  NettyTransport result=null;switch (remoteURI.getScheme().toLowerCase()) {case "tcp":case "ssl":    result=new NettyTcpTransport(remoteURI,transportOptions);  break;case "ws":case "wss":result=new NettyWSTransport(remoteURI,transportOptions);break;default :throw new IllegalArgumentException("Invalid URI Scheme: " + remoteURI.getScheme());}return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  Element entElement;  Node attrNode;  Text textNode;  Node removedNode;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  attrNode=entElement.getAttributeNode("domestic");  textNode=(Text)attrNode.getFirstChild();  assertNotNull("attrChildNotNull",textNode);{    boolean success=false;    try {      removedNode=attrNode.removeChild(textNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setValue_throws_NO_MODIFICATION_ERR",success);  }}  }
class C{  MySQLAuthPacket(byte packetNumber,String user,byte[] encryptedPassword,String db){  super(4 + 4 + 1+ 23+ user.length()+ 1+ encryptedPassword.length+ 1+ (db == null || db.length() == 0 ? 0 : db.length() + 1),packetNumber);  int flags=1 | (db == null || db.length() == 0 ? 0 : 8) | 128| 256| 512| 8192| 32768;  putInt32(flags);  putInt32(0x00ffffff);  putByte((byte)0x21);  putBytes(new byte[23]);  putString(user);  putLenBytes(encryptedPassword);  if (db != null && db.length() > 0) {    putString(db);  }}  }
class C{  @Inline static void compilePutfieldBarrierByteImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.byteFieldWriteBarrierMethod);}  }
class C{  public boolean isSetHostname(){  return this.hostname != null;}  }
class C{  static char[] unsafeGetChars(String string){  char[] value=(char[])UNSAFE.getObject(string,STRING_VALUE_FIELD_OFFSET);  if (STRING_OFFSET_FIELD_OFFSET != -1) {    int offset=UNSAFE.getInt(string,STRING_OFFSET_FIELD_OFFSET);    int count=UNSAFE.getInt(string,STRING_COUNT_FIELD_OFFSET);    if (offset == 0 && count == value.length) {      return value;    } else {      char result[]=new char[count];      System.arraycopy(value,offset,result,0,count);      return result;    }  } else {    return value;  }}  }
class C{  public DialogDemo(JFrame frame){  super(new BorderLayout());  this.frame=frame;  customDialog=new CustomDialog(frame,"geisel",this);  customDialog.pack();  JPanel frequentPanel=createSimpleDialogBox();  JPanel featurePanel=createFeatureDialogBox();  JPanel iconPanel=createIconDialogBox();  label=new JLabel("Click the \"Show it!\" button" + " to bring up the selected dialog.",JLabel.CENTER);  Border padding=BorderFactory.createEmptyBorder(20,20,5,20);  frequentPanel.setBorder(padding);  featurePanel.setBorder(padding);  iconPanel.setBorder(padding);  JTabbedPane tabbedPane=new JTabbedPane();  tabbedPane.addTab("Simple Modal Dialogs",null,frequentPanel,simpleDialogDesc);  tabbedPane.addTab("More Dialogs",null,featurePanel,moreDialogDesc);  tabbedPane.addTab("Dialog Icons",null,iconPanel,iconDesc);  add(tabbedPane,BorderLayout.CENTER);  add(label,BorderLayout.PAGE_END);  label.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.208 -0400",hash_original_method="EE30809419C042C9133DA321A16F7DFD",hash_generated_method="108A0CC68AF0F1C128B1F7C2EFE7950F") @Override public void write(int idx) throws IOException {  out.write(idx);}  }
class C{  public void insert(int index,boolean v){  _insert(index,booleanNode(v));}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/stop") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList stopContinuousCopies(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume volume=_dbClient.queryObject(Volume.class,id);  checkForPendingTasks(Arrays.asList(volume.getTenant().getURI()),Arrays.asList(volume));  boolean vplexVolume=checkIfVolumeIsForVplex(id);  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  verifyCopyIDs(param);  validateSRDFStopOperation(id,param);  for (  Copy copy : param.getCopies()) {    URI copyID=copy.getCopyID();    if (!URIUtil.isValid(copyID)) {      copyID=null;    }    ArgValidator.checkFieldNotEmpty(copy.getType(),"type");    if (copy.getType().equalsIgnoreCase(TechnologyType.RP.toString())) {      taskResp=performProtectionAction(id,copy,ProtectionOp.STOP.getRestOp());      taskList.getTaskList().add(taskResp);    } else     if (!vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {      taskList=stopMirrors(id,copyID);    } else     if (vplexVolume && copy.getType().equalsIgnoreCase(TechnologyType.NATIVE.toString())) {      taskList=stopVplexMirrors(id,copyID);    } else     if (copy.getType().equalsIgnoreCase(TechnologyType.SRDF.toString())) {      id=VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,id);      copy.setCopyID(VPlexSrdfUtil.getSrdfIdFromVolumeId(_dbClient,copy.getCopyID()));      taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.STOP.getRestOp());      taskList.getTaskList().add(taskResp);    } else {      throw APIException.badRequests.invalidCopyType(copy.getType());    }    if (copyID == null) {      return taskList;    }  }  return taskList;}  }
class C{  @RequestMapping(value=PARTITION_KEY_GROUPS_URI_PREFIX + "/{partitionKeyGroupName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_PARTITION_KEY_GROUPS_DELETE) public PartitionKeyGroup deletePartitionKeyGroup(@PathVariable("partitionKeyGroupName") String partitionKeyGroupName){  PartitionKeyGroupKey partitionKeyGroupKey=new PartitionKeyGroupKey();  partitionKeyGroupKey.setPartitionKeyGroupName(partitionKeyGroupName);  return partitionKeyGroupService.deletePartitionKeyGroup(partitionKeyGroupKey);}  }
class C{  public static List<Instance<String>> generateStringInstances(int n){  List<Instance<String>> instances=new ArrayList<Instance<String>>();  for (int i=0; i < n; i++) {    Instance<String> instance=new Instance<String>();switch (ClassifierTestUtil.random.nextInt(3)) {case 0:      instance.setOutcome("A");    instance.add(new Feature("hello",-1050 + ClassifierTestUtil.random.nextInt(100)));  break;case 1:instance.setOutcome("B");instance.add(new Feature("hello",-50 + ClassifierTestUtil.random.nextInt(100)));break;case 2:instance.setOutcome("C");instance.add(new Feature("hello",950 + ClassifierTestUtil.random.nextInt(100)));break;}instances.add(instance);}return instances;}  }
class C{  protected <T>T deserializeObjectFromJson(HttpEntity entity,TypeReference<T> typeReference) throws IOException {  return objectMapper.readValue(entity.getContent(),typeReference);}  }
class C{  public void addItem(Album a){synchronized (mAlbums) {    mAlbums.add(a);    sortListLocked();  }}  }
class C{  public static void markEducateModalDone(int reqCode,ProtectedAction action){  Request req;  int actionIndex=-1;  ProtectedAction[] actions;  req=sReqMgr.getRequest(reqCode);  if (req == null) {    Log.w(TAG,"markEducateModalDone: unknown req " + reqCode);    return;  }  if (action == null) {    throw new IllegalArgumentException("No action provided");  }  if (action.mPermDetails.mUsage != PermissionUse.ESSENTIAL) {    throw new IllegalArgumentException("Invalid action provided: " + action.mPermDetails.mPermission + ", "+ action.mPermDetails.mUsage);  }  actions=req.getActions();  for (int i=0; i < actions.length; i++) {    if (actions[i] == action) {      actionIndex=i;      break;    }  }  if (actionIndex == -1) {    throw new IllegalArgumentException("Provided action not part of active request");  }  Util.setEduDone(req.getOwner().getUiContext(),action.mPermDetails);  showEducateUi(reqCode,actionIndex);}  }
class C{  public void sendPacket(byte[] packet,int repeats){  if (repeats > 7) {    log.error("Too many repeats!");  }  if (packet.length <= 1) {    log.error("Invalid DCC packet length: " + packet.length);  }  if (packet.length > 6) {    log.error("Only 6-byte packets accepted: " + packet.length);  }  LocoNetMessage m=new LocoNetMessage(11);  m.setElement(0,0xED);  m.setElement(1,0x0B);  m.setElement(2,0x7F);  int length=packet.length - 1;  m.setElement(3,(repeats & 0x7) + 16 * (length & 0x7));  int highBits=0;  if (length >= 1 && ((packet[0] & 0x80) != 0)) {    highBits|=0x01;  }  if (length >= 2 && ((packet[1] & 0x80) != 0)) {    highBits|=0x02;  }  if (length >= 3 && ((packet[2] & 0x80) != 0)) {    highBits|=0x04;  }  if (length >= 4 && ((packet[3] & 0x80) != 0)) {    highBits|=0x08;  }  if (length >= 5 && ((packet[4] & 0x80) != 0)) {    highBits|=0x10;  }  m.setElement(4,highBits);  m.setElement(5,0);  m.setElement(6,0);  m.setElement(7,0);  m.setElement(8,0);  m.setElement(9,0);  for (int i=0; i < packet.length - 1; i++) {    m.setElement(5 + i,packet[i] & 0x7F);  }  if (throttledTransmitter != null) {    throttledTransmitter.sendLocoNetMessage(m);  } else {    tc.sendLocoNetMessage(m);  }}  }
class C{  public static void attachMetadata(boolean playing,String artist,String album,String track,int durationInSecs){  mScrobbleDroidIntent.putExtra("playing",playing);  mScrobbleDroidIntent.putExtra("artist",artist);  mScrobbleDroidIntent.putExtra("album",album);  mScrobbleDroidIntent.putExtra("track",track);  mScrobbleDroidIntent.putExtra("secs",durationInSecs);}  }
class C{  public void orderStatus(int orderId,String status,int filled,int remaining,double avgFillPrice,int permId,int parentId,double lastFillPrice,int clientId,String whyHeld){  try {    TradeOrder transientInstance=m_tradePersistentModel.findTradeOrderByKey(new Integer(orderId));    if (null == transientInstance) {      error(orderId,3170,"Warning Order not found for Order Key: " + orderId + " make sure Client ID: "+ this.m_clientId+ " is not the master in TWS. On orderStatus update.");      return;    }    boolean changed=false;    if (CoreUtils.nullSafeComparator(transientInstance.getStatus(),status.toUpperCase()) != 0) {      transientInstance.setStatus(status.toUpperCase());      changed=true;    }    if (CoreUtils.nullSafeComparator(transientInstance.getWhyHeld(),whyHeld) != 0) {      transientInstance.setWhyHeld(whyHeld);      changed=true;    }    if (CoreUtils.nullSafeComparator(new Integer(filled),transientInstance.getFilledQuantity()) == 1) {      if (filled > 0) {        transientInstance.setAverageFilledPrice(new BigDecimal(avgFillPrice));        transientInstance.setFilledQuantity(filled);        changed=true;      }    }    if (changed) {      transientInstance.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());      transientInstance.setStatus(status.toUpperCase());      transientInstance.setWhyHeld(whyHeld);      _log.debug("Order Status changed. Status: " + status);      TWSBrokerModel.logOrderStatus(orderId,status,filled,remaining,avgFillPrice,permId,parentId,lastFillPrice,clientId,whyHeld);      boolean isFilled=transientInstance.getIsFilled();      transientInstance=m_tradePersistentModel.persistTradeOrder(transientInstance);      if (OrderStatus.CANCELLED.equals(transientInstance.getStatus())) {        this.fireTradeOrderCancelled(transientInstance);      } else {        this.fireTradeOrderStatusChanged(transientInstance);        if (transientInstance.getIsFilled() && !isFilled)         this.fireTradeOrderFilled(transientInstance);      }    }  } catch (  Exception ex) {    error(orderId,3200,"Errors updating open order status: " + ex.getMessage());  }}  }
class C{  static NodeTextRep prependToOpName(NodeTextRep ntRep,SemanticNode ntRepNode,OpApplNode oaNode,String prefix){  NodeTextRep result=ntRep.clone();  SymbolNode opSym=oaNode.getOperator();  if (!(opSym instanceof OpDefNode)) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something unexpected is going on at " + "line 6509 of NewDecomposeProofHandler.");    return null;  }  OpDefNode opDef=(OpDefNode)opSym;  if (opDef.getKind() != OpDefNode.UserDefinedOpKind) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something unexpected is going on at " + "line 6518 of NewDecomposeProofHandler.");    return null;  }  String[] split=opDef.getName().toString().split("!");  Location ntLoc=ntRepNode.getLocation();  Location opApplLoc=oaNode.getLocation();  boolean isAlphaNum=true;  String ppart=split[split.length - 1];  int i=0;  while ((i < ppart.length()) && isAlphaNum) {    Character ch=ppart.charAt(i);    if (!(Character.isLetterOrDigit(ch) || (ch == '_'))) {      isAlphaNum=false;    }    i++;  }  int oaBeginLine=opApplLoc.beginLine() - ntLoc.beginLine();  int bCol=opApplLoc.beginColumn();  int oaBeginLoc=colToLoc(bCol,result.mapping[oaBeginLine]);  int oaEndLine=opApplLoc.endLine() - ntLoc.beginLine();  int oaEndLoc=colToLoc(opApplLoc.endColumn(),result.mapping[oaEndLine]);  int bLine=oaBeginLine;  int bPos=oaBeginLoc;  if (!isAlphaNum) {    SemanticNode[] oaArgs=oaNode.getArgs();    if (oaArgs.length == 0) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something unexpected is going on at " + "line 6477 of NewDecomposeProofHandler.");      return null;    }    Location firstArgLoc=oaArgs[0].getLocation();    bLine=firstArgLoc.endLine() - ntLoc.beginLine();    bCol=firstArgLoc.endColumn() + 1;    bPos=colToLoc(firstArgLoc.endColumn() + 1,result.mapping[bLine]);  }  boolean notDone=true;  while (notDone) {    while (notDone && bPos < result.nodeText[bLine].length()) {      if (!Character.isWhitespace(result.nodeText[bLine].charAt(bPos))) {        notDone=false;      } else {        bCol++;        bPos++;      }    }    if (notDone) {      bLine++;      bPos=0;      if (bLine >= result.nodeText[bLine].length()) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something unexpected is going on at " + "line 6506 of NewDecomposeProofHandler.");        return null;      }    }  }  int ePos=result.nodeText[bLine].length();  if (oaEndLine == bLine) {    ePos=oaEndLoc + 1;  }  String[] aSplit=result.nodeText[bLine].substring(bPos,ePos).split("!");  for (i=0; i < aSplit.length; i++) {    aSplit[i]=aSplit[i].trim();  }  boolean OK=aSplit.length >= split.length;  i=0;  while (OK && i < split.length) {    OK=split[i].equals(aSplit[i]) || ((i == split.length - 1) && aSplit[i].startsWith(split[i]) && !(isAlphaNum && (Character.isLetterOrDigit(aSplit[i].charAt(split[i].length())) || (aSplit[i].charAt(split[i].length()) == '_'))));    i++;  }  if (!OK) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Cannot rename use of " + opDef.getName());    return null;  }  result.nodeText[bLine]=result.nodeText[bLine].substring(0,bPos) + prefix + result.nodeText[bLine].substring(bPos);  adjustMappingPairVector(bCol + 1,prefix.length(),result.mapping[bLine]);  Vector<Insertion>[] insVecArray=new Vector[result.nodeText.length];  for (i=0; i < result.nodeText.length; i++) {    insVecArray[i]=new Vector<Insertion>();    if (i == bLine) {      insVecArray[i].add(new Insertion(bPos,0,prefix.length()));    }  }  adjustIndentation(ntRep,result,insVecArray);  return result;}  }
class C{  public static String tabulate(String src,int tabsCount){  char[] tabs=new char[SPACES_IN_TAB * tabsCount];  fill(tabs,' ');  final StringBuilder builder=new StringBuilder();  final String[] lines=src.split("\n");  for (int i=0; i < lines.length - 1; i++) {    builder.append(tabs).append(lines[i]).append('\n');  }  builder.append(tabs).append(lines[lines.length - 1]);  return builder.toString();}  }
class C{  public WhereBuilder or(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "OR",columnName,op,value);  return this;}  }
class C{  public void start(int startIndex){  this.tagStartIndex=startIndex;  this.name=null;  this.idNdx=-1;  this.attributesCount=0;  this.tagLength=0;  this.modified=false;  this.type=TagType.START;  this.rawTag=false;}  }
class C{  public void selectParameters(List<Parameter> params){  if (nodeHeightPrior == TreePriorType.CONSTANT) {    params.add(getParameter("constant.popSize"));  } else   if (nodeHeightPrior == TreePriorType.EXPONENTIAL) {    params.add(getParameter("exponential.popSize"));    if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {      params.add(getParameter("exponential.growthRate"));    } else {      params.add(getParameter("exponential.doublingTime"));    }  } else   if (nodeHeightPrior == TreePriorType.LOGISTIC) {    params.add(getParameter("logistic.popSize"));    if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {      params.add(getParameter("logistic.growthRate"));    } else {      params.add(getParameter("logistic.doublingTime"));    }    params.add(getParameter("logistic.t50"));  } else   if (nodeHeightPrior == TreePriorType.EXPANSION) {    params.add(getParameter("expansion.popSize"));    if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {      params.add(getParameter("expansion.growthRate"));    } else {      params.add(getParameter("expansion.doublingTime"));    }    params.add(getParameter("expansion.ancestralProportion"));  } else   if (nodeHeightPrior == TreePriorType.SKYLINE) {    params.add(getParameter("skyline.popSize"));  } else   if (nodeHeightPrior == TreePriorType.EXTENDED_SKYLINE) {    params.add(getParameter("demographic.populationSizeChanges"));    params.add(getParameter("demographic.populationMean"));  } else   if (nodeHeightPrior == TreePriorType.GMRF_SKYRIDE) {    params.add(getParameter("skyride.precision"));  } else   if (nodeHeightPrior == TreePriorType.SKYGRID) {    params.add(getParameter("skygrid.precision"));  } else   if (nodeHeightPrior == TreePriorType.YULE || nodeHeightPrior == TreePriorType.YULE_CALIBRATION) {    params.add(getParameter("yule.birthRate"));  } else   if (nodeHeightPrior == TreePriorType.BIRTH_DEATH || nodeHeightPrior == TreePriorType.BIRTH_DEATH_INCOMPLETE_SAMPLING) {    params.add(getParameter(BirthDeathModelParser.MEAN_GROWTH_RATE_PARAM_NAME));    params.add(getParameter(BirthDeathModelParser.RELATIVE_DEATH_RATE_PARAM_NAME));    if (nodeHeightPrior == TreePriorType.BIRTH_DEATH_INCOMPLETE_SAMPLING)     params.add(getParameter(BirthDeathModelParser.BIRTH_DEATH + "." + BirthDeathModelParser.SAMPLE_PROB));  } else   if (nodeHeightPrior == TreePriorType.BIRTH_DEATH_SERIAL_SAMPLING) {    params.add(getParameter(BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.LAMBDA));    params.add(getParameter(BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.RELATIVE_MU));    Parameter psi=getParameter(BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.PSI);    if (options.maximumTipHeight > 0) {      psi.setInitial(MathUtils.round(1 / options.maximumTipHeight,4));    }    params.add(psi);    params.add(getParameter(BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.ORIGIN));  } else   if (nodeHeightPrior == TreePriorType.BIRTH_DEATH_BASIC_REPRODUCTIVE_NUMBER) {    params.add(getParameter(BirthDeathEpidemiologyModelParser.ORIGIN));    params.add(getParameter(BirthDeathEpidemiologyModelParser.R0));    params.add(getParameter(BirthDeathEpidemiologyModelParser.RECOVERY_RATE));    params.add(getParameter(BirthDeathEpidemiologyModelParser.SAMPLING_PROBABILITY));  }}  }
class C{  public String compose(String s){  return _convertDelegator.compose(s);}  }
class C{  @Override public void installSplitContainerSettings(){  super.installSplitContainerSettings();  UIManager.put("SplitContainer.dividerSize",new Integer(12));  UIManager.put("SplitContainer.bgColor",Colors.WINDOW_BACKGROUND);}  }
class C{  protected final void loadFromStrip(int numStrips,int size,int width,int height,Raster raster) throws IOException {  if (iStream != null) {    iStream.close();  }  iStream=new FileImageInputStream(new File(dataFilePath));  iStream.seek(imageStart);  byte[] bbArray=new byte[size];  ByteBuffer bbuf=ByteBuffer.wrap(bbArray);  bbuf.order(byteOrder);  int r=0;  for (int i=0; i < numStrips; ++i) {    bbuf.rewind();    int h=Math.min(rasterLength - height * i,height);    int len=h * width * bytesPerSample;    len=iStream.read(bbArray,0,len);    bbuf.rewind();    raster.set(r,h,bbArray);    r+=h;  }}  }
class C{  public static CCMultiplexLayer node(CCLayer... params){  return new CCMultiplexLayer(params);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  boolean isFirst=true;  for (  ICategory category : categories) {    if (isFirst) {      isFirst=false;    } else {      sb.append("|");    }    sb.append(getQueryString(category));  }  for (  ICategory category : excludeCategories) {    if (isFirst) {      isFirst=false;    } else {      sb.append("|");    }    sb.append("-");    sb.append(getQueryString(category));  }  return sb.toString();}  }
class C{  public void mark(long n){  tickIfNecessary();  count.add(n);  rateAvg.update(n);}  }
class C{  private void installWindowListeners(JRootPane root,Component parent){  if (parent instanceof Window) {    window=(Window)parent;  } else {    window=SwingUtilities.getWindowAncestor(parent);  }  if (window != null) {    if (mouseInputListener == null) {      mouseInputListener=createWindowMouseInputListener(root);    }    window.addMouseListener(mouseInputListener);    window.addMouseMotionListener(mouseInputListener);    if (windowListener == null) {      windowListener=createFocusListener();      window.addWindowListener(windowListener);    }  }}  }
class C{  private void createKerningTables(){  Kern[] hEntries=new Kern[hkernElements.length];  for (int i=0; i < hkernElements.length; i++) {    Element hkernElement=hkernElements[i];    SVGHKernElementBridge hkernBridge=(SVGHKernElementBridge)ctx.getBridge(hkernElement);    Kern hkern=hkernBridge.createKern(ctx,hkernElement,this);    hEntries[i]=hkern;  }  hKerningTable=new KerningTable(hEntries);  Kern[] vEntries=new Kern[vkernElements.length];  for (int i=0; i < vkernElements.length; i++) {    Element vkernElement=vkernElements[i];    SVGVKernElementBridge vkernBridge=(SVGVKernElementBridge)ctx.getBridge(vkernElement);    Kern vkern=vkernBridge.createKern(ctx,vkernElement,this);    vEntries[i]=vkern;  }  vKerningTable=new KerningTable(vEntries);}  }
class C{  public ImmutableByteBufferInputStream(ImmutableByteBufferInputStream copy){  super(copy);}  }
class C{  @PUT @Path("/{id}") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public ScheduledEventRestRep updateEvent(@PathParam("id") String id,ScheduledEventUpdateParam updateParam){  ScheduledEvent scheduledEvent=queryResource(uri(id));  ArgValidator.checkEntity(scheduledEvent,uri(id),true);  validateParam(updateParam.getScheduleInfo());  try {    OrderCreateParam orderCreateParam=OrderCreateParam.deserialize(org.apache.commons.codec.binary.Base64.decodeBase64(scheduledEvent.getOrderCreationParam().getBytes(UTF_8)));    validateAutomaticExpirationNumber(updateParam.getAdditionalScheduleInfo());    orderCreateParam.setAdditionalScheduleInfo(updateParam.getAdditionalScheduleInfo());    scheduledEvent.setOrderCreationParam(new String(org.apache.commons.codec.binary.Base64.encodeBase64(orderCreateParam.serialize()),UTF_8));    updateScheduledEvent(scheduledEvent,updateParam.getScheduleInfo());  } catch (  APIException ex) {    log.error(ex.getMessage(),ex);    throw ex;  }catch (  Exception e) {    log.error(e.getMessage(),e);  }  return map(scheduledEvent);}  }
class C{  private void updateConfiguratorComboBox(){  List<AbstractConfigurator<?>> configurators=new LinkedList<>();  for (  String typeId : ConfigurationManager.getInstance().getAllTypeIds()) {    if (source == null || source.getTypeIds() != null && source.getTypeIds().contains(typeId)) {      AbstractConfigurator<?> c=ConfigurationManager.getInstance().getAbstractConfigurator(typeId);      configurators.add(c);    }  }  configuratorCombo.setModel(new DefaultComboBoxModel(configurators.toArray()));  AbstractConfigurator<?> currentConfigurator=(AbstractConfigurator<?>)configuratorCombo.getSelectedItem();  if (currentConfigurator != null) {    descriptionArea.setText(currentConfigurator.getDescription());  } else {    descriptionArea.setText("");  }  if (configurators.isEmpty()) {    configuratorCombo.setEnabled(false);    addButton.setEnabled(false);  } else {    if (!configuratorCombo.isEnabled()) {      configuratorCombo.setEnabled(true);      addButton.setEnabled(true);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.189 -0500",hash_original_method="C98C1C3289511C3CD05158CF07015375",hash_generated_method="4B06B7DA9AFCA961A27A7E6E2AFFFDDE") private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    View child;    if (!mStackFromBottom) {      child=getChildAt(0);      delta=child.getTop() - mListPadding.top;      if (mFirstPosition != 0) {        delta-=mDividerHeight;      }      if (delta < 0) {        delta=0;      }    } else {      child=getChildAt(childCount - 1);      delta=child.getBottom() - (getHeight() - mListPadding.bottom);      if (mFirstPosition + childCount < mItemCount) {        delta+=mDividerHeight;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      offsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  public void test_getRepositoryProperties01() throws Exception {  final Properties p=m_mgr.getRepositoryProperties(namespace);  assertEquals(namespace,p.getProperty(RelationSchema.NAMESPACE));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.533 -0500",hash_original_method="7B7F5CA7C760A6206185BE96F86E54F2",hash_generated_method="A35E3DDDC5BAEC620248E657DBB8D9F5") public boolean isURIRoute(){  return uriRoute;}  }
class C{  public void cancel(){  if (activeProvider != null) {    activeProvider.cancel();  }}  }
class C{  void readFile(String name) throws org.jdom2.JDOMException, java.io.IOException {  if (log.isDebugEnabled()) {    log.debug("readFile " + name);  }  Element root=rootFromName(name);  readNames(root);}  }
class C{  public DomElementHelper(){  this.bodyElement=RootPanel.getBodyElement();  initElements();}  }
class C{  public void pushLock(ValueNode object,MonitorIdNode monitorId){  assert object.isAlive() && object.getStackKind() == JavaKind.Object : "unexpected value: " + object;  lockedObjects=Arrays.copyOf(lockedObjects,lockedObjects.length + 1);  monitorIds=Arrays.copyOf(monitorIds,monitorIds.length + 1);  lockedObjects[lockedObjects.length - 1]=object;  monitorIds[monitorIds.length - 1]=monitorId;  assert lockedObjects.length == monitorIds.length;}  }
class C{  public void addEmojiconGroup(EaseEmojiconGroupEntity groupEntity){  emojiconGroupList.add(groupEntity);  pagerView.addEmojiconGroup(groupEntity,true);  tabBar.addTab(groupEntity.getIcon());}  }
class C{  public String readLine() throws IOException {  StringBuilder line=new StringBuilder();  int i;  char c;  i=read();  if (i == -1)   return null;  while (i > -1 && i != '\n' && i != '\r') {    c=(char)(i & 0xFF);    line=line.append(c);    i=read();  }  if (i == '\r') {    if ((i=read()) != '\n')     throw new IOException("Unexpected character " + Integer.toHexString(i) + ". Expected 0x0d. Had read "+ line);  }  return line.toString();}  }
class C{  protected void validateLunUniqueId(java.lang.String[] param){}  }
class C{  public BoundedObject queryOne(int px,int py){  return queryOne(px,py,root);}  }
class C{  public void postTypeVarSubstitution(AnnotatedTypeVariable varDecl,AnnotatedTypeVariable varUse,AnnotatedTypeMirror value){  if (!varUse.getAnnotationsField().isEmpty() && !AnnotationUtils.areSame(varUse.getAnnotationsField(),varDecl.getAnnotationsField())) {    value.replaceAnnotations(varUse.getAnnotationsField());  }}  }
class C{  @Override @SuppressWarnings("rawtypes") public void resyncGroupClones(StorageSystem storage,List<URI> clones,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("START resync group clone operation");  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,clones);    Volume clone=_dbClient.queryObject(Volume.class,clones.get(0));    Volume sourceVol=_dbClient.queryObject(Volume.class,clone.getAssociatedSourceVolume());    String consistencyGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(sourceVol,_dbClient);    String replicationGroupName=clone.getReplicationGroupInstance();    CIMObjectPath groupSynchronized=_cimPath.getGroupSynchronizedPath(storage,consistencyGroupName,replicationGroupName);    if (_helper.checkExists(storage,groupSynchronized,false,false) != null) {      CIMObjectPath cimJob=null;      CIMArgument[] resyncCGCloneInput=_helper.getResyncReplicaInputArguments(groupSynchronized);      cimJob=_helper.callModifyReplica(storage,resyncCGCloneInput);      ControllerServiceImpl.enqueueJob(new QueueJob(new SmisCloneResyncJob(cimJob,storage.getId(),taskCompleter)));    } else {      ServiceError error=DeviceControllerErrors.smis.unableToFindSynchPath(consistencyGroupName);      taskCompleter.error(_dbClient,error);    }  } catch (  Exception e) {    String message=String.format("Exception when trying to resync clones from consistency group on array %s",storage.getSerialNumber());    _log.error(message,e);    taskCompleter.error(_dbClient,DeviceControllerException.exceptions.resynchronizeFullCopyFailed(e));  }}  }
class C{  @Override protected int sizeOf(String key,BitmapLoader.BitmapCacheInfo bitmapCacheInfo){  return bitmapCacheInfo.getBitmap().getByteCount() / 1024;}  }
class C{  private void logSearchPanelLoadDuration(boolean wasPrefetch,long durationMs){  ContextualSearchUma.logSearchPanelLoadDuration(wasPrefetch,durationMs);}  }
class C{  public final void dispose() throws GSSException {  state=STATE_DELETED;  delegatedCred=null;}  }
class C{  List<Token> expand(List<Token> arg) throws IOException, LexerException {  List<Token> expansion=new ArrayList<Token>();  boolean space=false;  push_source(new FixedTokenSource(arg),false);  EXPANSION:   for (; ; ) {    Token tok=expanded_token();switch (tok.getType()) {case EOF:      break EXPANSION;case WHITESPACE:case CCOMMENT:case CPPCOMMENT:    space=true;  break;default :if (space && !expansion.isEmpty()) expansion.add(Token.space);expansion.add(tok);space=false;break;}}pop_source();return expansion;}  }
class C{  @Override public void beginTransaction(){  throw new UnsupportedOperationException("Transaction Unsupported.");}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,systemLineSeparator);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new WindowsSplitPaneUI();}  }
class C{  public boolean isTaxIncluded(){  if (m_M_PriceList_ID == 0) {    m_M_PriceList_ID=DB.getSQLValue(get_TrxName(),"SELECT M_PriceList_ID FROM C_Order WHERE C_Order_ID=?",getC_Order_ID());  }  MPriceList pl=MPriceList.get(getCtx(),m_M_PriceList_ID,get_TrxName());  return pl.isTaxIncluded();}  }
class C{  public static boolean isGridLayer(final Layer layer){  final Collection<PropertyDescriptor> descriptors=layer.getFeatureSource().getSchema().getDescriptors();  for (  final PropertyDescriptor desc : descriptors) {    final Class<?> binding=desc.getType().getBinding();    if (BASE_GRID_CLASS.isAssignableFrom(binding) || BASE_READER_CLASS.isAssignableFrom(binding)) {      return true;    }  }  return false;}  }
class C{  public void removeChangeListener(ChangeListener listener){  changeSupport.removeChangeListener(listener);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(" MSmartBrowse[").append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ABSTRACT___ABSTRACT_1:    return isAbstract_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void close(){  connection.closeChannel(id);}  }
class C{  public static boolean isNotNull(final Object object){  return object != null;}  }
class C{  final void internalSetModifiers(int pmodifiers){  supportedOnlyIn2();  preValueChange(MODIFIERS_PROPERTY);  this.modifierFlags=pmodifiers;  postValueChange(MODIFIERS_PROPERTY);}  }
class C{  @Deprecated public Date(int year,int month,int day){  super(year,month,day);}  }
class C{  public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type){  this.type=type;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:47.119 -0500",hash_original_method="712ABC4CE2C3A9D659D9E51530EC203D",hash_generated_method="190F3C53417FE6D5980891B58347F2FB") private static void split(String content,List<String> tokens,List<Integer> offsets){  Matcher matcher=SPLIT_PATTERN.matcher(content);  while (matcher.find()) {    tokens.add(matcher.group());    offsets.add(matcher.start());  }}  }
class C{  public IpcClientTcpEndpoint(Socket clientSock){  assert clientSock != null;  this.clientSock=clientSock;}  }
class C{  @Override public void validate(FacesContext facesContext,UIComponent component,Object value) throws ValidatorException {  if (value == null) {    return;  }  String languageISOCode=value.toString();  if (languageISOCode.length() == 0) {    return;  }  checkLocale(languageISOCode,facesContext);}  }
class C{  public boolean isInterrupted(){  return interrupted;}  }
class C{  @VisibleForTesting protected State buildPatch(TaskState.TaskStage stage,@Nullable Throwable e){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  if (null != e) {    state.taskState.failure=Utils.toServiceErrorResponse(e);  }  return state;}  }
class C{  public boolean hasIssueType(){  return getIssueType() != null;}  }
class C{  public void printProgressBar(){  System.out.println("0%                 20%                 40%                 60%                 80%               100%");  System.out.print("|");  for (int i=1; i <= 10; i++) {    for (int j=1; j <= 9; j++) {      System.out.print("-");    }    System.out.print("|");  }  System.out.println();  System.out.print(progressCharacter);}  }
class C{  public void testFloatsRoundTrip(){  byte[] encoded=new byte[Float.BYTES];  for (int i=0; i < 10000; i++) {    float value=Float.intBitsToFloat(random().nextInt());    NumericUtils.intToSortableBytes(NumericUtils.floatToSortableInt(value),encoded,0);    float actual=NumericUtils.sortableIntToFloat(NumericUtils.sortableBytesToInt(encoded,0));    assertEquals(Float.floatToIntBits(value),Float.floatToIntBits(actual));  }}  }
class C{  public TagTransformation(String sourceTag){  this(sourceTag,null);}  }
class C{  public synchronized String command(String command,String parameter,String channel){  command=StringUtil.toLowerCase(command);  if (commands.containsKey(command)) {    String commandText=commands.get(command);    String[] parameters;    if (parameter == null || parameter.isEmpty()) {      parameters=new String[0];    } else {      parameters=parameter.split(" ");    }    String replaced=new ParameterReplacer().replace(commandText,parameters);    if (replaced != null) {      replaced=replaced.replaceAll("\\$chan",channel);    }    return replaced;  }  return null;}  }
class C{  private synchronized void awaitResponse() throws BOSHException {  HttpEntity entity=null;  try {    HttpResponse httpResp=client.execute(post,context);    entity=httpResp.getEntity();    byte[] data=EntityUtils.toByteArray(entity);    String encoding=entity.getContentEncoding() != null ? entity.getContentEncoding().getValue() : null;    if (ZLIBCodec.getID().equalsIgnoreCase(encoding)) {      data=ZLIBCodec.decode(data);    } else     if (GZIPCodec.getID().equalsIgnoreCase(encoding)) {      data=GZIPCodec.decode(data);    }    body=StaticBody.fromString(new String(data,CHARSET));    statusCode=httpResp.getStatusLine().getStatusCode();    sent=true;  } catch (  IOException iox) {    abort();    toThrow=new BOSHException("Could not obtain response",iox);    throw (toThrow);  }catch (  RuntimeException ex) {    abort();    throw (ex);  }}  }
class C{  public static com.sun.tools.javac.util.List<JavaFileObject> toJavaFileObjects(JavaFileManager fileManager,Collection<File> sourceFiles) throws IOException {  com.sun.tools.javac.util.List<JavaFileObject> fileObjects=com.sun.tools.javac.util.List.nil();  JavacFileManager javacFileManager=(JavacFileManager)fileManager;  for (  JavaFileObject fo : javacFileManager.getJavaFileObjectsFromFiles(sourceFiles)) {    fileObjects=fileObjects.append(fo);  }  if (fileObjects.length() != sourceFiles.size()) {    throw new IOException("invalid file list");  }  return fileObjects;}  }
class C{  public boolean isObligatorio(){  return obligatorio;}  }
class C{  public AffinityKey<Long> key(){  if (key == null)   key=new AffinityKey<>(id,orgId);  return key;}  }
class C{  protected boolean registerMBean(final String objectName){  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  try {    mxbeanName=new ObjectName(objectName);    mbs.registerMBean(this,mxbeanName);  } catch (  MalformedObjectNameException e1) {    e1.printStackTrace();    return false;  }catch (  NullPointerException e1) {    e1.printStackTrace();    return false;  }catch (  InstanceAlreadyExistsException e) {    e.printStackTrace();    return false;  }catch (  MBeanRegistrationException e) {    e.printStackTrace();    return false;  }catch (  NotCompliantMBeanException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public void add(int[] vals){  add(vals,0,vals.length);}  }
class C{  public boolean supportsSubqueriesInComparisons() throws SQLException {  return true;}  }
class C{  public void runUsing(EclipseRunner runner) throws Exception {  runner.run(toArgList());}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.GENERIC_REFERENCE;}  }
class C{  public static String toSdpAttribute(RtcCandidate candidate){  final StringBuilder sb=new StringBuilder("candidate:");  sb.append(candidate.getFoundation());  sb.append(" ");switch (candidate.getComponentType()) {case RTP:    sb.append(1);  break;case RTCP:sb.append(2);break;}sb.append(" ");if (candidate.getTransportType() == RtcCandidate.TransportType.UDP) {sb.append("UDP");} else {sb.append("TCP");}sb.append(" ");sb.append(candidate.getPriority());sb.append(" ");sb.append(candidate.getAddress());sb.append(" ");sb.append(candidate.getPort());sb.append(" typ ");switch (candidate.getType()) {case HOST:sb.append("host");break;case SERVER_REFLEXIVE:sb.append("srflx");break;case PEER_REFLEXIVE:sb.append("prflx");break;case RELAY:sb.append("relay");break;}if (candidate.getRelatedAddress() != null) {sb.append(" raddr ");sb.append(candidate.getRelatedAddress());sb.append(" rport ");sb.append(candidate.getRelatedPort());}if (candidate.getTransportType() != RtcCandidate.TransportType.UDP) {sb.append(" tcptype ");switch (candidate.getTransportType()) {case TCP_ACTIVE:sb.append("active");break;case TCP_PASSIVE:sb.append("passive");break;case TCP_SO:sb.append("so");break;}}return sb.toString();}  }
class C{  @ParametersAreNonnullByDefault public static List<Size> filterBlackListedSizes(List<Size> sizes,String blacklistString){  String[] blacklistStringArray=blacklistString.split(",");  if (blacklistStringArray.length == 0) {    return sizes;  }  Set<String> blacklistedSizes=new HashSet(Lists.newArrayList(blacklistStringArray));  List<Size> newSizeList=new ArrayList<>();  for (  Size size : sizes) {    if (!isBlackListed(size,blacklistedSizes)) {      newSizeList.add(size);    }  }  return newSizeList;}  }
class C{  public DTLZ1(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public static void cancelOneTask(BackgroundTask backgroundTask,boolean shouldClearPersistedTask){synchronized (sInstance) {    Thread thread=backgroundTask.getCurrentThread();    TaskRunnable runnable=backgroundTask.getTaskRunnable();    if (shouldClearPersistedTask || !runnable.mShouldPersist) {      if (thread != null) {        thread.interrupt();      }      sInstance.mTaskThreadPool.remove(runnable);      sInstance.mExecutingTaskWorkQueue.remove(backgroundTask);    }  }}  }
class C{  public JBZipFile(String name,String encoding) throws IOException {  this(new File(name),encoding);}  }
class C{  public static boolean generateMagic(BC2IR bc2ir,GenerationContext gc,MethodReference meth) throws MagicNotImplementedException {  Atom methodName=meth.getName();  PhysicalRegisterSet phys=gc.getTemps().getPhysicalRegisterSet().asIA32();  if (methodName == MagicNames.getESIAsThread) {    RegisterOperand rop=gc.getTemps().makeTROp();    bc2ir.markGuardlessNonNull(rop);    bc2ir.push(rop);  } else   if (methodName == MagicNames.setESIAsThread) {    Operand val=bc2ir.popRef();    if (val instanceof RegisterOperand) {      bc2ir.appendInstruction(Move.create(REF_MOVE,gc.getTemps().makeTROp(),val));    } else {      String msg=" Unexpected operand Magic.setESIAsThread";      throw MagicNotImplementedException.UNEXPECTED(msg);    }  } else   if (methodName == MagicNames.getFramePointer) {    gc.forceFrameAllocation();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Address);    RVMField f=ArchEntrypoints.framePointerField;    RegisterOperand pr=new RegisterOperand(phys.getESI(),TypeReference.Address);    bc2ir.appendInstruction(GetField.create(GETFIELD,val,pr.copy(),new AddressConstantOperand(f.getOffset()),new LocationOperand(f),new TrueGuardOperand()));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.getJTOC || methodName == MagicNames.getTocPointer) {    TypeReference t=(methodName == MagicNames.getJTOC ? TypeReference.IntArray : TypeReference.Address);    RegisterOperand val=gc.getTemps().makeTemp(t);    AddressConstantOperand addr=new AddressConstantOperand(Magic.getTocPointer());    bc2ir.appendInstruction(Move.create(REF_MOVE,val,addr));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.isync) {  } else   if (methodName == MagicNames.sync) {  } else   if (methodName == MagicNames.prefetch) {    bc2ir.appendInstruction(CacheOp.create(PREFETCH,bc2ir.popAddress()));  } else   if (methodName == MagicNames.pause) {    bc2ir.appendInstruction(Empty.create(PAUSE));  } else   if (methodName == MagicNames.getCallerFramePointer) {    Operand fp=bc2ir.popAddress();    RegisterOperand val=gc.getTemps().makeTemp(TypeReference.Address);    bc2ir.appendInstruction(Load.create(REF_LOAD,val,fp,offsetOperand(STACKFRAME_FRAME_POINTER_OFFSET),null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setCallerFramePointer) {    Operand val=bc2ir.popAddress();    Operand fp=bc2ir.popAddress();    bc2ir.appendInstruction(Store.create(REF_STORE,val,fp,offsetOperand(STACKFRAME_FRAME_POINTER_OFFSET),null));  } else   if (methodName == MagicNames.getCompiledMethodID) {    Operand fp=bc2ir.popAddress();    RegisterOperand val=gc.getTemps().makeTempInt();    bc2ir.appendInstruction(Load.create(INT_LOAD,val,fp,offsetOperand(STACKFRAME_METHOD_ID_OFFSET),null));    bc2ir.push(val.copyD2U());  } else   if (methodName == MagicNames.setCompiledMethodID) {    Operand val=bc2ir.popInt();    Operand fp=bc2ir.popAddress();    bc2ir.appendInstruction(Store.create(INT_STORE,val,fp,offsetOperand(STACKFRAME_METHOD_ID_OFFSET),null));  } else   if (methodName == MagicNames.getReturnAddressLocation) {    Operand fp=bc2ir.popAddress();    Instruction s=bc2ir._binaryHelper(REF_ADD,fp,offsetOperand(STACKFRAME_RETURN_ADDRESS_OFFSET),TypeReference.Address);    bc2ir.appendInstruction(s);  } else {    String msg=" Magic method not implemented: " + meth;    if (methodName == MagicNames.returnToNewStack) {      throw MagicNotImplementedException.EXPECTED(msg);    } else {      return false;    }  }  return true;}  }
class C{  private static void columnOpTransform(Matrix M,int low,int high,int n,double q,double p,int shift){  double z;  for (int i=low; i <= high; i++) {    z=M.get(i,n + shift);    M.set(i,n + shift,q * z + p * M.get(i,n));    M.set(i,n,q * M.get(i,n) - p * z);  }}  }
class C{  public DBMSEvent extract(String eventId) throws ReplicatorException, InterruptedException {  this.setLastEventId(eventId);  return this.extract();}  }
class C{  public synchronized void addToQueue(final ImageResourceLoader imageResourceLoader,final String uri,final MutableFSImage mfsi,final int width,final int height){  XRLog.general(Level.FINE,"Queueing load for image uri " + uri);  _loadQueue.addLast(new ImageLoadItem(imageResourceLoader,uri,mfsi,width,height));  notifyAll();}  }
class C{  public void dipose(){  m_synchronizer.dispose();  m_selectionMenu.dispose();  final List<IGraphMenuPlugin> plugins=Lists.newArrayList();  for (  final IPlugin<IPluginInterface> plugin : PluginInterface.instance().getPluginRegistry()) {    if (plugin instanceof IGraphMenuPlugin) {      plugins.add((IGraphMenuPlugin)plugin);    }  }  for (  final IGraphMenuPlugin plugin : plugins) {    try {      plugin.closed(m_model.getGraphFrame());    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);      final String innerMessage="E00106: " + "Plugin caused an unexpected exception";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The plugin %s caused an unexpected exception.",plugin.getName()),new String[]{"The plugin contains a bug."},new String[]{"The plugin probably behaves erroneously from this point on but it remains active"});      NaviErrorDialog.show(m_model.getParent(),innerMessage,innerDescription,exception);    }  }  m_pluginsMenu.dispose();}  }
class C{  private static int anyOfRightLength(Automaton.Builder builder,String x,int n){  int s=builder.createState();  if (x.length() == n) {    builder.setAccept(s,true);  } else {    builder.addTransition(s,anyOfRightLength(builder,x,n + 1),'0','9');  }  return s;}  }
class C{  static AttrCharsets createFromString(final String str){  if (str == null) {    return null;  } else {    return new AttrCharsets(str);  }}  }
class C{  public static Process execute(final List commands) throws IOException {  return execute(stringify(commands));}  }
class C{  @SuppressWarnings("unused") @Deprecated public boolean isSame(IgfsPath path){  A.notNull(path,"path");  return this == path || this.path.equals(path.path);}  }
class C{  @Override public GroupPlans selectPlans(final JointPlans jointPlans,final ReplanningGroup group){  final Collection<JointPlan> jpCollection=getJointPlans(group,jointPlans);  final JointPlans jointPlansInstance=new JointPlans();  fillWithWeakJointPlans(jointPlansInstance,jpCollection);  final GroupPlans selected=delegate.selectPlans(jointPlansInstance,group);  jointPlansInstance.clear();  return selected;}  }
class C{  @Override protected void onMode(String target,String sourceNick,String sourceLogin,String sourceHostname,String mode){}  }
class C{  public void writeInt(int v){  try {    dos.writeInt(v);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  protected String[] validateResult(String[] result){  if (result != null) {    recordsRead++;  }  return result;}  }
class C{  public boolean equivalent(INode state){  return equals(state);}  }
class C{  @Override public Object invoke(final Object proxy,final Method method,final Object[] args) throws Throwable {  System.out.println("Play mock for " + method);  for (  MockResolver mockResolver : mockRepository.getAll()) {    InvocationHandler handler=mockResolver.getInvocationHandler(proxy,method,args);    if (handler != null) {      return handler.invoke(mockResolver,method,args);    }  }  throw new IllegalStateException("There is no mock registered that can handle " + method);}  }
class C{  private static boolean isComposingChar(int c){  return COMPOSING_CHARACTERS.contains(c);}  }
class C{  protected JMS20WorkerThread(String name){  super(name);  try {    final Class<?> dfClazz=Config.parms.getClazz("df");    destFactory=(DestinationFactory)dfClazz.newInstance();    msgFactory=DefaultMessageFactory.getInstance();  } catch (  Exception e) {    Log.logger.log(Level.SEVERE,"Problem getting DestinationFactory class {0}",e);  }}  }
class C{  static void writeMillis(DataOutput out,long millis) throws IOException {  if (millis % (30 * 60000L) == 0) {    long units=millis / (30 * 60000L);    if (((units << (64 - 6)) >> (64 - 6)) == units) {      out.writeByte((int)(units & 0x3f));      return;    }  }  if (millis % 60000L == 0) {    long minutes=millis / 60000L;    if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {      out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));      return;    }  }  if (millis % 1000L == 0) {    long seconds=millis / 1000L;    if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {      out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));      out.writeInt((int)(seconds & 0xffffffff));      return;    }  }  out.writeByte(millis < 0 ? 0xff : 0xc0);  out.writeLong(millis);}  }
class C{  public double switchedPow10(double val){  return this.smallLogFlag ? Math.pow(10.0,val) : adjustedPow10(val);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public DisambiguationAuthenticator(final MSAAuthenticator msaAuthenticator,final ADALAuthenticator adalAuthenticator){  mMSAAuthenticator=msaAuthenticator;  mADALAuthenticator=adalAuthenticator;}  }
class C{  @Override public boolean needsMaterialization(){  return true;}  }
class C{  private X(){}  }
class C{  @Transactional public String addProduct(final JSONObject product) throws ServiceException {  try {    return productRepository.add(product);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Adds product failed",e);    throw new ServiceException(e);  }}  }
class C{  public synchronized static boolean exists(String location){  location=normalize(location);  String[] testfiles=new String[]{"hgstore_idx_HGATOMTYPE","je.lck"};  File dir=new File(location);  if (!dir.isDirectory())   return false;  List<String> all=Arrays.asList(dir.list());  for (  String testfile : testfiles)   if (new File(dir,testfile).exists() || all.contains(testfile))   return true;  return false;}  }
class C{  private PostgreSQLModuleCallgraphsLoader(){}  }
class C{  public WicketLoginCommandImpl(final ShoppingCartCommandRegistry registry,final CustomerService customerService,final ShopService shopService,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final CartRepository cartRepository){  super(registry,customerService,shopService,priceService,pricingPolicyProvider,productService);  this.cartRepository=cartRepository;}  }
class C{  public void testMultiplePageBehaviour(final View v){  final Intent testActivity=new Intent(this,TestMultiplePageActivity.class);  startActivity(testActivity);}  }
class C{  public TIntArrayList(int[] values){  this(Math.max(values.length,DEFAULT_CAPACITY));  add(values);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_ENUM_DECLARATION__LITERALS:    return ((InternalEList<?>)getLiterals()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static QueryColumn toQueryColumn(Object o) throws PageException {  if (o instanceof QueryColumn)   return (QueryColumn)o;  throw new CasterException(o,"querycolumn");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static int dpToPx(@NonNull Resources res,int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,res.getDisplayMetrics());}  }
class C{  public FrameBlock readTransformMetaDataFromFile(String metapath) throws IOException {  return readTransformMetaDataFromFile(null,metapath,TfUtils.TXMTD_SEP);}  }
class C{  public int compare(Spec s1,Spec s2){  if (s1 == null) {    return 1;  } else   if (s2 == null) {    return -1;  } else {    long s1Time=getLastClosedTime(s1);    long s2Time=getLastClosedTime(s2);    if (s1Time == s2Time) {      return 0;    } else     if (s1Time > s2Time) {      return -1;    } else {      return 1;    }  }}  }
class C{  public SWFText tagDefineText(int id,Rect bounds,Matrix matrix) throws IOException {  startTag(TAG_DEFINETEXT,id,true);  return defineText(bounds,matrix,false);}  }
class C{  public MarkdownDialog(Frame owner,boolean modal){  super(owner,modal);}  }
class C{  public UndoRedoManager(){  getLabels();  undoAction=new UndoAction();  redoAction=new RedoAction();}  }
class C{  private VOMarketplace determineMarketplaceForSubscription(HttpServletRequest httpRequest,AuthorizationRequestData rdo) throws ObjectNotFoundException {  Map<String,VOMarketplace> cachedMarketplaces=getMarketplaceMapFromSession(httpRequest.getSession());  VOMarketplace mpl=cachedMarketplaces.get(rdo.getSubscriptionKey());  if (mpl == null) {    MarketplaceService marketplaceService=ServiceAccess.getServiceAcccessFor(httpRequest.getSession()).getService(MarketplaceService.class);    mpl=marketplaceService.getMarketplaceForSubscription(ADMStringUtils.parseUnsignedLong(rdo.getSubscriptionKey()),"en");    if (mpl != null) {      cachedMarketplaces.put(rdo.getSubscriptionKey(),mpl);    }  }  return mpl;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.881 -0500",hash_original_method="A784152F9E30B67264CE14AA01B5FC5D",hash_generated_method="AFFFCDC65DE7F65E3FC9C87F421D0B5F") public static void applyInvokeWithSystemProperty(Arguments args){  if (args.invokeWith == null && args.niceName != null) {    if (args.niceName != null) {      String property="wrap." + args.niceName;      if (property.length() > 31) {        property=property.substring(0,31);      }      args.invokeWith=SystemProperties.get(property);      if (args.invokeWith != null && args.invokeWith.length() == 0) {        args.invokeWith=null;      }    }  }}  }
class C{  public boolean containsKey(long key){  return lookup(key).isDefined();}  }
class C{  protected RecordEntity_Impl(){  super();}  }
class C{  public Result run(Database database,Relation<O> relation){  DistanceQuery<O> distQuery=database.getDistanceQuery(relation,EuclideanDistanceFunction.STATIC);  KNNQuery<O> knnQuery=database.getKNNQuery(distQuery,10);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    relation.get(iditer);    knnQuery.getKNNForDBID(iditer,10);  }  return null;}  }
class C{  public static GrammarAST findOptionValueAST(GrammarRootAST root,String option){  GrammarAST options=(GrammarAST)root.getFirstChildWithType(ANTLRParser.OPTIONS);  if (options != null && options.getChildCount() > 0) {    for (    Object o : options.getChildren()) {      GrammarAST c=(GrammarAST)o;      if (c.getType() == ANTLRParser.ASSIGN && c.getChild(0).getText().equals(option)) {        return (GrammarAST)c.getChild(1);      }    }  }  return null;}  }
class C{  public RenameAction(IWorkbenchSite site){  super(site);  setText(JSDTTypeScriptUIMessages.RenameAction_text);  fRenameJavaElement=new RenameTypeScriptElementAction(site);  fRenameJavaElement.setText(getText());}  }
class C{  public CursesWindow(int x,int y,int width,int height,String title){  super(x,y,width,height,false,title);  this.windowWidth=width;  chatLog=new TextArea();  chatLog.setColors(new CharColor(CharColor.WHITE,CharColor.BLACK));  textField=new TextField();  button=new Button("Send");  button.setShortCut('\n');  button.addListener(this);  int innerHeight=height - 5;  GridLayoutManager manager=new GridLayoutManager(1,innerHeight);  super.getRootPanel().setLayoutManager(manager);  manager.addWidget(chatLog,0,0,1,innerHeight - 2,WidgetsConstants.ALIGNMENT_CENTER,WidgetsConstants.ALIGNMENT_CENTER);  manager.addWidget(textField,0,innerHeight - 2,1,1,WidgetsConstants.ALIGNMENT_CENTER,WidgetsConstants.ALIGNMENT_CENTER);  manager.addWidget(button,0,innerHeight - 1,1,1,WidgetsConstants.ALIGNMENT_CENTER,WidgetsConstants.ALIGNMENT_CENTER);}  }
class C{  @Override public String toString(){  return String.format("%s{count=%d, sum=%d, min=%d, average=%f, max=%d}",this.getClass().getSimpleName(),getCount(),getSum(),getMin(),getAverage(),getMax());}  }
class C{  public final double SFMeanPriorEntropy(){  if (m_NoPriors || !m_ComplexityStatisticsAvailable) {    return Double.NaN;  }  return m_SumPriorEntropy / m_WithClass;}  }
class C{  public boolean isNull(int key){  return get(key) == null;}  }
class C{  public void writeLogToFile(XMLWriter writer,TreePriorGenerator treePriorGenerator,ClockModelGenerator clockModelGenerator,SubstitutionModelGenerator substitutionModelGenerator,TreeLikelihoodGenerator treeLikelihoodGenerator){  writer.writeComment("write log to file");  if (options.logFileName == null) {    options.logFileName=options.fileNameStem + ".log";  }  writer.writeOpenTag(LoggerParser.LOG,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,"fileLog"),new Attribute.Default<String>(LoggerParser.LOG_EVERY,options.logEvery + ""),new Attribute.Default<String>(LoggerParser.FILE_NAME,options.logFileName),new Attribute.Default<Boolean>(LoggerParser.ALLOW_OVERWRITE_LOG,options.allowOverwriteLog)});  if (options.hasData()) {    writer.writeIDref(CompoundLikelihoodParser.POSTERIOR,"posterior");  }  writer.writeIDref(CompoundLikelihoodParser.PRIOR,"prior");  if (options.hasData()) {    writer.writeIDref(CompoundLikelihoodParser.LIKELIHOOD,"likelihood");  }  if (options.useStarBEAST) {    writer.writeIDref(MultiSpeciesCoalescentParser.SPECIES_COALESCENT,TraitData.TRAIT_SPECIES + "." + COALESCENT);    writer.writeIDref(MixedDistributionLikelihoodParser.DISTRIBUTION_LIKELIHOOD,SPOPS);    writer.writeIDref(SpeciationLikelihoodParser.SPECIATION_LIKELIHOOD,SPECIATION_LIKE);    writer.writeIDref(ParameterParser.PARAMETER,TraitData.TRAIT_SPECIES + "." + options.starBEASTOptions.POP_MEAN);    writer.writeIDref(ParameterParser.PARAMETER,SpeciesTreeModelParser.SPECIES_TREE + "." + SPLIT_POPS);    if (options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_BIRTH_DEATH) {      writer.writeIDref(ParameterParser.PARAMETER,TraitData.TRAIT_SPECIES + "." + BirthDeathModelParser.MEAN_GROWTH_RATE_PARAM_NAME);      writer.writeIDref(ParameterParser.PARAMETER,TraitData.TRAIT_SPECIES + "." + BirthDeathModelParser.RELATIVE_DEATH_RATE_PARAM_NAME);    } else     if (options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_YULE || options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_YULE_CALIBRATION) {      writer.writeIDref(ParameterParser.PARAMETER,TraitData.TRAIT_SPECIES + "." + YuleModelParser.YULE+ "."+ YuleModelParser.BIRTH_RATE);    } else {      throw new IllegalArgumentException("Get wrong species tree prior using *BEAST : " + options.getPartitionTreePriors().get(0).getNodeHeightPrior().toString());    }    writer.writeIDref(TMRCAStatisticParser.TMRCA_STATISTIC,SpeciesTreeModelParser.SPECIES_TREE + "." + TreeModelParser.ROOT_HEIGHT);  }  for (  PartitionTreeModel model : options.getPartitionTreeModels()) {    writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + TreeModel.TREE_MODEL + "."+ TreeModelParser.ROOT_HEIGHT);  }  if (options.useStarBEAST) {    for (    Taxa taxa : options.speciesSets) {      writer.writeIDref(TMRCAStatisticParser.TMRCA_STATISTIC,"tmrca(" + taxa.getId() + ")");    }  } else {    for (    Taxa taxa : options.taxonSets) {      PartitionTreeModel treeModel=options.taxonSetsTreeModel.get(taxa);      writer.writeIDref(TMRCAStatisticParser.TMRCA_STATISTIC,"tmrca(" + treeModel.getPrefix() + taxa.getId()+ ")");    }  }  for (  PartitionTreePrior prior : options.getPartitionTreePriors()) {    treePriorGenerator.writeParameterLog(prior,writer);  }  for (  PartitionSubstitutionModel model : options.getPartitionSubstitutionModels()) {    substitutionModelGenerator.writeLog(model,writer);  }  for (  PartitionClockModel model : options.getPartitionClockModels()) {    clockModelGenerator.writeLog(model,writer);  }  for (  PartitionClockModel model : options.getPartitionClockModels()) {    clockModelGenerator.writeLogStatistic(model,writer);  }  generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_FILE_LOG_PARAMETERS,writer);  treeLikelihoodGenerator.writeTreeLikelihoodReferences(writer);  clockModelGenerator.writeClockLikelihoodReferences(writer);  generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_FILE_LOG_LIKELIHOODS,writer);  for (  PartitionTreeModel model : options.getPartitionTreeModels()) {    PartitionTreePrior prior=model.getPartitionTreePrior();    treePriorGenerator.writePriorLikelihoodReferenceLog(prior,model,writer);    writer.writeText("");  }  for (  PartitionTreePrior prior : options.getPartitionTreePriors()) {    if (prior.getNodeHeightPrior() == TreePriorType.EXTENDED_SKYLINE) {      writer.writeIDref(CoalescentLikelihoodParser.COALESCENT_LIKELIHOOD,prior.getPrefix() + COALESCENT);    } else     if (prior.getNodeHeightPrior() == TreePriorType.SKYGRID) {      writer.writeIDref(GMRFSkyrideLikelihoodParser.SKYGRID_LIKELIHOOD,prior.getPrefix() + "skygrid");    }  }  writer.writeCloseTag(LoggerParser.LOG);  generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_FILE_LOG,writer);}  }
class C{  private void insertArgument(long executionId,String param){  int[] argTypes=new int[]{Types.BIGINT,Types.VARCHAR};  Object[] args=new Object[]{executionId,param};  jdbcTemplate.update(getQuery(CREATE_TASK_ARGUMENT),args,argTypes);}  }
class C{  public void addTrace(Trace trace){  if (trace.getTraceColor() == null) {    trace.setTraceColor(XYGraphMediaFactory.getInstance().getColor(DEFAULT_TRACES_COLOR[traceNum % DEFAULT_TRACES_COLOR.length]));    ++traceNum;  }  if (legendMap.containsKey(trace.getYAxis()))   legendMap.get(trace.getYAxis()).addTrace(trace); else {    legendMap.put(trace.getYAxis(),new Legend(this));    legendMap.get(trace.getYAxis()).addTrace(trace);    add(legendMap.get(trace.getYAxis()));  }  plotArea.addTrace(trace);  trace.setXYGraph(this);  trace.dataChanged(null);  revalidate();  repaint();}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  private synchronized static void loadColorNames(){  if (colorNames == null) {    colorNames=new HashMap<String,ColorRGB>();    try {      BufferedReader in=new BufferedReader(new InputStreamReader(ColorImplicitObject.class.getResourceAsStream("/webtiersample/rgb.txt")));      String line;      while ((line=in.readLine()) != null) {        if (!line.startsWith("!")) {          String colorText=line.substring(0,12);          String colorName=line.substring(12).trim();          StringTokenizer st=new StringTokenizer(colorText," ");          int red=Integer.parseInt(st.nextToken().trim());          int green=Integer.parseInt(st.nextToken().trim());          int blue=Integer.parseInt(st.nextToken().trim());          colorNames.put(colorName,new ColorRGB(red,green,blue));        }      }      in.close();    } catch (    IOException e) {      throw new RuntimeException("Could not load rgb.txt",e);    }  }}  }
class C{  protected void paintDecorations(List textRuns,Graphics2D g2d,int decorationType){  Paint prevPaint=null;  Paint prevStrokePaint=null;  Stroke prevStroke=null;  Rectangle2D decorationRect=null;  double yLoc=0, height=0;  for (int i=0; i < textRuns.size(); i++) {    TextRun textRun=(TextRun)textRuns.get(i);    AttributedCharacterIterator runaci=textRun.getACI();    runaci.first();    TextPaintInfo tpi=(TextPaintInfo)runaci.getAttribute(PAINT_INFO);    if ((tpi != null) && (tpi.composite != null)) {      g2d.setComposite(tpi.composite);    }    Paint paint=null;    Stroke stroke=null;    Paint strokePaint=null;    if (tpi != null) {switch (decorationType) {case TextSpanLayout.DECORATION_UNDERLINE:        paint=tpi.underlinePaint;      stroke=tpi.underlineStroke;    strokePaint=tpi.underlineStrokePaint;  break;case TextSpanLayout.DECORATION_OVERLINE:paint=tpi.overlinePaint;stroke=tpi.overlineStroke;strokePaint=tpi.overlineStrokePaint;break;case TextSpanLayout.DECORATION_STRIKETHROUGH:paint=tpi.strikethroughPaint;stroke=tpi.strikethroughStroke;strokePaint=tpi.strikethroughStrokePaint;break;default :return;}}if (textRun.isFirstRunInChunk()) {Shape s=textRun.getLayout().getDecorationOutline(decorationType);Rectangle2D r2d=s.getBounds2D();yLoc=r2d.getY();height=r2d.getHeight();}if (textRun.isFirstRunInChunk() || (paint != prevPaint) || (stroke != prevStroke)|| (strokePaint != prevStrokePaint)) {if (decorationRect != null) {if (prevPaint != null) {g2d.setPaint(prevPaint);g2d.fill(decorationRect);}if (prevStroke != null && prevStrokePaint != null) {g2d.setPaint(prevStrokePaint);g2d.setStroke(prevStroke);g2d.draw(decorationRect);}decorationRect=null;}}if ((paint != null || strokePaint != null) && !textRun.getLayout().isVertical() && !textRun.getLayout().isOnATextPath()) {Shape decorationShape=textRun.getLayout().getDecorationOutline(decorationType);if (decorationRect == null) {Rectangle2D r2d=decorationShape.getBounds2D();decorationRect=new Rectangle2D.Double(r2d.getX(),yLoc,r2d.getWidth(),height);} else {Rectangle2D bounds=decorationShape.getBounds2D();double minX=Math.min(decorationRect.getX(),bounds.getX());double maxX=Math.max(decorationRect.getMaxX(),bounds.getMaxX());decorationRect.setRect(minX,yLoc,maxX - minX,height);}}prevPaint=paint;prevStroke=stroke;prevStrokePaint=strokePaint;}if (decorationRect != null) {if (prevPaint != null) {g2d.setPaint(prevPaint);g2d.fill(decorationRect);}if (prevStroke != null && prevStrokePaint != null) {g2d.setPaint(prevStrokePaint);g2d.setStroke(prevStroke);g2d.draw(decorationRect);}}}  }
class C{  public static final double[] toDoubleArray(int i,int L){  double u[]=new double[L];  if (i == 0)   return u;  String s=Integer.toBinaryString(i);  for (int j=0; j < s.length(); j++) {    u[j]=(double)Integer.parseInt(String.valueOf(s.charAt(j)));  }  return u;}  }
class C{  public static int findBinaryGap(long n){  int gap=0;  int maxGap=0;  while (n > 0) {    if ((n & 1) == 1) {      while (n >>> 1 > 0 && (n >>> 1 & 1) == 0) {        gap++;        n=n >>> 1;      }      if (gap > maxGap) {        maxGap=gap;      }      gap=0;    }    n=n >>> 1;  }  return maxGap;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ManagedResourceService(final InetSocketAddress addr,final int requestServicePoolSize) throws IOException {  super(addr,requestServicePoolSize);  this.allocator=new DirectBufferPoolAllocator(DirectBufferPool.INSTANCE);}  }
class C{  public void drawFrame(int textureId){  mFilter.onDraw(IDENTITY_MATRIX,mRectDrawable.getVertexArray(),0,mRectDrawable.getVertexCount(),mRectDrawable.getCoordsPerVertex(),mRectDrawable.getVertexStride(),mRectDrawable.getTexCoordArray(),textureId,mRectDrawable.getTexCoordStride());}  }
class C{  public void removeSprite(OdorWorldEntity sprite){  sprites.remove(sprite);}  }
class C{  protected GFFResultWriterForNucSeqs(){  super();}  }
class C{  void addAggregate(Aggregate aggregate){  aggregates.add(aggregate);}  }
class C{  public CmpExpr newCmpExpr(Value op1,Value op2){  return new JCmpExpr(op1,op2);}  }
class C{  public void zeros(long offset,int count) throws IOException {  final long targetOffset=offset + count;  final int zerosBulkCopies=count / zerosMaxPage;  final long srcAddress=PlatformDependent.directBufferAddress(ZERO_PAGE);  for (int i=0; i < zerosBulkCopies; i++) {    final int bufferPosition=checkOffset(offset,zerosMaxPage);    final long destAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;    PlatformDependent.copyMemory(srcAddress,destAddress,zerosMaxPage);    offset+=zerosMaxPage;  }  final int remainingToBeZeroes=(int)(targetOffset - offset);  final int bufferPosition=checkOffset(offset,remainingToBeZeroes);  final long destAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  PlatformDependent.copyMemory(srcAddress,destAddress,remainingToBeZeroes);  if (targetOffset > this.length) {    this.length=targetOffset;  }}  }
class C{  private JFind(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  public void message(SourceLocator srcLctr,String msg,boolean terminate) throws TransformerException {  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler) {    errHandler.warning(new TransformerException(msg,srcLctr));  } else {    if (terminate)     throw new TransformerException(msg,srcLctr); else     System.out.println(msg);  }}  }
class C{  Copier(byte[] info,ConstPool src,ConstPool dest,Map map){  this(info,src,dest,map,true);}  }
class C{  private void deletedNodesImplementation(final Iterable<INaviViewNode> nodes){  final boolean oldProxyMode=m_graph.getSettings().getProximitySettings().getProximityBrowsing();  boolean needsLayout=false;  for (  final INaviViewNode node : nodes) {    removeNode(m_mappings.getNode(node));    needsLayout|=isCollapsedGroupNode(node);  }  if (oldProxyMode) {    m_graph.getSettings().getProximitySettings().setProximityBrowsing(oldProxyMode);  }  if (m_graph.getSettings().getLayoutSettings().getAutomaticLayouting() && needsLayout) {    m_graph.doLayout();  }  m_graphInternals.notifyNodeDeleted();}  }
class C{  public static final double poundsToKilograms(double pound){  return pound * POUND_TO_KILOGRAM;}  }
class C{  public void testPosNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=-1;  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static String validateCanal(final Route route,final Collection<Unit> units,final PlayerID player,final GameData data){  for (  final Territory routeTerritory : route.getAllTerritories()) {    final Optional<String> result=validateCanal(routeTerritory,route,units,player,data);    if (result.isPresent()) {      return result.get();    }  }  return null;}  }
class C{  public DatatypeConfigurationException(String message){  super(message);}  }
class C{  public static void putInt(Context context,String key,int value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putInt(key,value);  editor.commit();}  }
class C{  public byte[] retrieveFolderDocumentFile(AcsAccessObject acs,ArchiveObject arch,FolderObject fdr,int docId,String entidad) throws Exception {  byte[] fileData=null;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (acs == null)     fileData=FolderMdoFdr.retrieveFolderDocumentFile(dbConn,null,arch.getArchiveToken(),fdr.getFolderToken(),docId,entidad); else     fileData=FolderMdoFdr.retrieveFolderDocumentFile(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdr.getFolderToken(),docId,entidad);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return fileData;}  }
class C{  public HeaderCardBuilder value(String newValue) throws HeaderCardException {  if (this.card == null) {    this.card=new HeaderCard(this.key.key(),newValue,null);    this.header.addLine(this.card);  } else {    this.card.setValue(newValue);  }  return this;}  }
class C{  public boolean initialize(){  if (mBluetoothManager == null) {    mBluetoothManager=(BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);    if (mBluetoothManager == null) {      L.e("Unable to initialize BluetoothManager.");      return false;    }  }  mBluetoothAdapter=mBluetoothManager.getAdapter();  if (mBluetoothAdapter == null) {    L.e("Unable to obtain a BluetoothAdapter.");    return false;  }  return true;}  }
class C{  public long roundHalfFloor(long instant){  throw unsupported();}  }
class C{  public Builder withId(long id){  this.criteriaIdBuilder=new Criteria.Builder();  criteriaIdBuilder.withSelection(DownloadContract.Batches._ID,Criteria.Wildcard.EQUALS).withArgument(String.valueOf(id));  return this;}  }
class C{  static void exportMaskUpdate(ExportMask exportMask,Map<URI,Integer> volumeMap,List<Initiator> initiators,List<URI> targets){  if (volumeMap != null) {    for (    URI volume : volumeMap.keySet()) {      exportMask.addVolume(volume,volumeMap.get(volume));    }  }  if (initiators != null) {    for (    Initiator initiator : initiators) {      exportMask.addInitiator(initiator);    }  }  if (targets != null) {    for (    URI target : targets) {      exportMask.addTarget(target);    }  }}  }
class C{  public void updateRaster(float lt,float ln,int offset_x1,int offset_y1,ImageIcon ii,LinkProperties properties,int graphicUpdateMask) throws IOException, InterruptedException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,offset_x1,offset_y1,ii,properties,link.dos);}  }
class C{  public boolean isAccessibleColumnSelected(int c){  if (validateIfNecessary()) {    if (c < 0 || c >= getAccessibleColumnCount()) {      return false;    }    int nRows=getAccessibleRowCount();    TableCellElementInfo startCell=getCell(0,c);    if (startCell == null) {      return false;    }    int start=startCell.getElement().getStartOffset();    TableCellElementInfo endCell=getCell(nRows - 1,c);    if (endCell == null) {      return false;    }    int end=endCell.getElement().getEndOffset();    return start >= editor.getSelectionStart() && end <= editor.getSelectionEnd();  }  return false;}  }
class C{  public JCTree.JCCompilationUnit parse(JavaFileObject source){  clear(source);  JCTree.JCCompilationUnit result=compiler.parse(source);  return result;}  }
class C{  public DataBufferInt(int size,int numBanks){  super(STABLE,TYPE_INT,size,numBanks);  bankdata=new int[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new int[size];  }  data=bankdata[0];}  }
class C{  public void addTransition(S source,S target,S state,E event,Long period,Integer count,Collection<Action<S,E>> actions,Guard<S,E> guard,TransitionKind kind,SecurityRule securityRule){  if (securityRule == null) {    @SuppressWarnings("unchecked") ConfigurationData<S,E> config=getSharedObject(ConfigurationData.class);    securityRule=config.getTransitionSecurityRule();  }  transitionData.add(new TransitionData<>(source,target,state,event,period,count,actions,guard,kind,securityRule));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", type: ");  result.append(type);  result.append(')');  return result.toString();}  }
class C{  private void renderTaggedGraphNodesContainerNode(final CTaggedGraphNodesContainerNode node){  final List<NaviNode> graphNodes=node.getGraphNodes();  if (!graphNodes.isEmpty()) {    if (isAllTaggedAndSelected(graphNodes)) {      setForeground(COLOR_TAGGED_SELECTED_ALL);    } else     if (isAnyTaggedAndSelected(graphNodes)) {      setForeground(COLOR_TAGGED_SELECTED_ANY);    } else     if (isAllTaggedAndInvisible(graphNodes)) {      setForeground(COLOR_TAGGED_INVISIBLE);    }    setToolTipText(buildToolTip(node));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static List<Entry> loadEntriesFromFile(String path){  File sdcard=Environment.getExternalStorageDirectory();  File file=new File(sdcard,path);  List<Entry> entries=new ArrayList<Entry>();  try {    @SuppressWarnings("resource") BufferedReader br=new BufferedReader(new FileReader(file));    String line;    while ((line=br.readLine()) != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(vals,Integer.parseInt(split[split.length - 1])));      }    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  }  return entries;}  }
class C{  private boolean LoadUNK(ByteBuffer f,SceModule module,int baseAddress,boolean analyzeOnly) throws IOException {  byte m0=f.get();  byte m1=f.get();  byte m2=f.get();  byte m3=f.get();  if (m0 == 0x43 && m1 == 0x49 && m2 == 0x53 && m3 == 0x4F) {    log.info("This is not an executable file!");    log.info("Try using the Load UMD menu item");  } else   if ((m0 == 0 && m1 == 0x50 && m2 == 0x53 && m3 == 0x46)) {    log.info("This is not an executable file!");  } else {    boolean handled=false;    if (f.limit() >= 16 * 2048 + 6) {      f.position(16 * 2048);      byte[] id=new byte[6];      f.get(id);      if ((((char)id[1]) == 'C') && (((char)id[2]) == 'D') && (((char)id[3]) == '0')&& (((char)id[4]) == '0')&& (((char)id[5]) == '1')) {        log.info("This is not an executable file!");        log.info("Try using the Load UMD menu item");        handled=true;      }    }    if (!handled) {      log.info("Unrecognized file format");      log.info(String.format("File magic %02X %02X %02X %02X",m0,m1,m2,m3));      if (log.isDebugEnabled()) {        byte[] buffer=new byte[256];        buffer[0]=m0;        buffer[1]=m1;        buffer[2]=m2;        buffer[3]=m3;        f.get(buffer,4,buffer.length - 4);        log.debug(String.format("File header: %s",Utilities.getMemoryDump(buffer,0,buffer.length)));      }    }  }  return false;}  }
class C{  @Override public void dropTables(final Set<TableReference> tablesToDrop){  schemaMutationLock.runWithLock(null);}  }
class C{  public static void deleteWordAtCursor(InputConnection connection,String separators){  Range range=getWordRangeAtCursor(connection,separators,null);  if (range == null)   return;  connection.finishComposingText();  int newCursor=getCursorPosition(connection) - range.charsBefore;  connection.setSelection(newCursor,newCursor);  connection.deleteSurroundingText(0,range.charsBefore + range.charsAfter);}  }
class C{  public DistributionPointName(DerValue encoding) throws IOException {  if (encoding.isContextSpecific(TAG_FULL_NAME) && encoding.isConstructed()) {    encoding.resetTag(DerValue.tag_Sequence);    fullName=new GeneralNames(encoding);  } else   if (encoding.isContextSpecific(TAG_RELATIVE_NAME) && encoding.isConstructed()) {    encoding.resetTag(DerValue.tag_Set);    relativeName=new RDN(encoding);  } else {    throw new IOException("Invalid encoding for DistributionPointName");  }}  }
class C{  public void addParameter(int index,String label,Component comp){  JLabel lbl;  JPanel panel;  lbl=new JLabel(label.replace("" + GUIHelper.MNEMONIC_INDICATOR,""));  lbl.setDisplayedMnemonic(GUIHelper.getMnemonic(label));  lbl.setLabelFor(comp);  panel=new JPanel(new FlowLayout(FlowLayout.LEFT));  panel.add(lbl);  panel.add(comp);  if (index == -1) {    m_Rows.add(panel);    m_Labels.add(lbl);    m_Parameters.add(comp);  } else {    m_Rows.add(index,panel);    m_Labels.add(index,lbl);    m_Parameters.add(index,comp);  }  update();}  }
class C{  private boolean lineOutOfRange(int line){  return line <= 0 || line >= nlOffsets.length || (line == nlOffsets.length - 1 && finalNL);}  }
class C{  public void exit(){synchronized (statemachine) {    statemachine.exit();  }}  }
class C{  private Token(){}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(nombre)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DocumentosConstants.LABEL_DOCUMENTOS_DOCUMENTO_NOMBRE,request.getLocale())));  }  if (StringUtils.isBlank(id) && ((fichero == null) || StringUtils.isBlank(fichero.getFileName()))) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DocumentosConstants.LABEL_DOCUMENTOS_DOCUMENTO_NUEVO_DOC,request.getLocale())));  } else {    String fullFileName=fichero.getFileName();    if (StringUtils.isNotBlank(fullFileName)) {      String nombre=FilenameUtils.getName(fullFileName);      String extension=FilenameUtils.getExtension(fullFileName);      if (StringUtils.isBlank(nombre)) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosConstants.ERROR_NOMBRE_FICHERO_INVALIDO));      }      if (StringUtils.isBlank(extension) || extension.length() > DocumentosConstants.LONGITUD_MAX_EXTENSION) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosConstants.ERROR_EXTENSION_FICHERO_INVALIDA));      }    }  }  return errors;}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    length--;  } else {    badIndex(index);  }}  }
class C{  @Override public long position(String pattern,long start) throws SQLException {  throw unsupported("LOB search");}  }
class C{  private char sourceCharacter(int position,int spanSize) throws IOException {  return (char)buffer.get(position - spanSize);}  }
class C{  public ResetCounter(String name,boolean resetHigher){  super(name);  this.resetHigher=resetHigher;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.441 -0400",hash_original_method="C70C3A95CC69C815CEA97A11A597B28A",hash_generated_method="04972A776A6CFDACEFE618F29818A262") @Override public int read(char[] chars,int offset,int length) throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=length;  int returnLength=length;  if (position > size) {    returnLength=length - (int)(position - size);    position=size;  }  processChars(chars,offset,returnLength);  return returnLength;}  }
class C{  @Override public void invalidate(){  super.invalidate();  onChunkUnload();}  }
class C{  @Override public <T>Provider<T> provider(InjectionPoint<T> ip){  Objects.requireNonNull(ip);  Provider<T> provider=lookupProvider(ip);  if (provider != null) {    return provider;  }  provider=autoProvider(ip);  if (provider != null) {    return provider;  }  return new ProviderNull(ip.key(),-10000,new InjectScopeSingleton());}  }
class C{  public V remove(K key,V value){  List<V> values=(List<V>)map.get(key);  if (values == null)   return null;  if (values.remove(value)) {    valuesSize--;    if (values.size() == 0)     map.remove(key);    return value;  }  return null;}  }
class C{  public Document createDocument(String ns,String root,String uri,InputStream is) throws IOException {  if (!SVGDOMImplementation.SVG_NAMESPACE_URI.equals(ns) || !"svg".equals(root)) {    throw new RuntimeException("Bad root element");  }  return createDocument(uri,is);}  }
class C{  public int indexOf(Object key){  return key == null ? indexOfNull() : indexOf(key,key.hashCode());}  }
class C{  public void testMergeOneContextParamIntoDocumentWithSameContextParam() throws Exception {  String srcXml="<web-app>" + "  <context-param>" + "    <param-name>param</param-name>"+ "    <param-value>value</param-value>"+ "  </context-param>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));}  }
class C{  private AbstractIndex loadBlocks(String taskId,List<TableBlockInfo> tableBlockInfoList,AbsoluteTableIdentifier tableIdentifier) throws CarbonUtilException {  List<DataFileFooter> footerList=CarbonUtil.readCarbonIndexFile(taskId,tableBlockInfoList,tableIdentifier);  AbstractIndex segment=new SegmentTaskIndex();  segment.buildIndex(footerList);  return segment;}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  protected int index(int key){  int hash, index, length;  final byte[] states=_states;  final int[] set=_set;  length=states.length;  hash=HashFunctions.hash(key) & 0x7fffffff;  index=hash % length;  byte state=states[index];  if (state == FREE)   return -1;  if (state == FULL && set[index] == key)   return index;  return indexRehashed(key,index,hash,state);}  }
class C{  public CircularRedirectException(String message){  super(message);}  }
class C{  private void publishEventToBase(Event event) throws EPAuthenticationException, IOException, ServiceException {  GoogleBaseService baseService=getBaseService();  GoogleBaseEntry entry=null;  if (event.getBaseUrl() != null) {    entry=baseService.getEntry(event.getBaseUrl(),GoogleBaseEntry.class);    entry=new GoogleBaseEntry();  } else {    entry=new GoogleBaseEntry();  }  GoogleBaseAttributesExtension gbaseAttributes=entry.getGoogleBaseAttributes();  entry.setTitle(new PlainTextConstruct(event.getTitle()));  entry.setContent(new PlainTextConstruct(event.getDescription()));  gbaseAttributes.setItemType("events and activities");  DateTime startDateTime=new DateTime(event.getStartDate());  startDateTime.setDateOnly(true);  DateTime endDateTime=null;  if (event.getStartDate().equals(event.getEndDate())) {    Calendar endDateCal=new GregorianCalendar();    endDateCal.setTime(event.getEndDate());    endDateCal.add(Calendar.DATE,1);    endDateTime=new DateTime(endDateCal.getTime());  } else {    endDateTime=new DateTime(event.getEndDate());  }  endDateTime.setDateOnly(true);  gbaseAttributes.addDateTimeRangeAttribute("event date range",new DateTimeRange(startDateTime,endDateTime));  gbaseAttributes.addTextAttribute("event performer","Google mashup test");  gbaseAttributes.addUrlAttribute("performer url","http://code.google.com/apis/gdata.html");  if (event.getBaseUrl() != null) {    baseService.update(event.getBaseUrl(),entry);  } else {    GoogleBaseEntry resultEntry=baseService.insert(FeedURLFactory.getDefault().getItemsFeedURL(),entry);    updateSsEventEditUrl(event.getSsEditUrl(),null,resultEntry.getEditLink().getHref());  }}  }
class C{  XorMappedAddressAttribute(){  super(XOR_MAPPED_ADDRESS);}  }
class C{  boolean addEventLine(final EventLine line){  if (eventTypes.contains(line.getType())) {    channel.addLine(line);    return true;  }  return false;}  }
class C{  @SuppressWarnings("UnusedDeclaration") public static byte[] errorData(Throwable err){  if (err instanceof PlatformExtendedException) {    PlatformContext ctx=((PlatformExtendedException)err).context();    try (PlatformMemory mem=ctx.memory().allocate()){      PlatformOutputStream out=mem.output();      BinaryRawWriterEx writer=ctx.writer(out);      try {        PlatformUtils.writeErrorData(err,writer,ctx.kernalContext().log(PlatformContext.class));      }  finally {        out.synchronize();      }      PlatformInputStream in=mem.input();      in.synchronize();      int len=in.remaining();      assert len > 0;      byte[] arr=in.array();      byte[] res=new byte[len];      System.arraycopy(arr,0,res,0,len);      return res;    }   } else   return null;}  }
class C{  public Long updateAppointment(String SID,Long appointmentId,String appointmentName,String appointmentLocation,String appointmentDescription,Calendar appointmentstart,Calendar appointmentend,Boolean isDaily,Boolean isWeekly,Boolean isMonthly,Boolean isYearly,Long categoryId,Long remind,String[] mmClient,Long roomType,String baseurl,Long languageId,Boolean isPasswordProtected,String password) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      Appointment appointment=appointmentLogic.getAppointMentById(appointmentId);      if (!appointment.getUserId().getUser_id().equals(users_id)) {        throw new AxisFault("The Appointment cannot be updated by the given user");      }    } else     if (authLevelManagement.checkUserLevel(user_level)) {    } else {      throw new AxisFault("Not allowed to preform that action, Authenticate the SID first");    }    List<Map<String,String>> newList=new ArrayList<Map<String,String>>();    for (    String singleClient : mmClient) {      String[] params=singleClient.split(",");      Map<String,String> map=new HashMap<String,String>();      map.put("meetingMemberId",params[0]);      map.put("firstname",params[1]);      map.put("lastname",params[2]);      map.put("email",params[3]);      map.put("userId",params[4]);      map.put("jNameTimeZone",params[5]);      newList.add(map);    }    log.debug("updateAppointment");    RoomTypes rt=roommanagement.getRoomTypesById(roomType);    Appointment app=appointmentLogic.getAppointMentById(appointmentId);    Rooms room=app.getRoom();    if (room != null) {      room.setComment(appointmentDescription);      room.setName(appointmentName);      room.setRoomtype(rt);      roommanagement.updateRoomObject(room);    }    Users user=userManagement.getUserById(users_id);    return appointmentDao.updateAppointment(appointmentId,appointmentName,appointmentDescription,appointmentstart.getTime(),appointmentend.getTime(),isDaily,isWeekly,isMonthly,isYearly,categoryId,remind,newList,users_id,baseurl,languageId,isPasswordProtected,password,user.getOmTimeZone().getIcal(),appointmentLocation);  } catch (  Exception err) {    log.error("[updateAppointment]",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  public static XMLReader createXMLReader(boolean validating,boolean namespaceAware) throws Exception {  SAXParserFactory factory=SAXParserFactory.newInstance();  factory.setValidating(validating);  factory.setNamespaceAware(namespaceAware);  SAXParser parser=factory.newSAXParser();  return parser.getXMLReader();}  }
class C{  public void testSqlFieldsQueryMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  SqlFieldsQuery qry=new SqlFieldsQuery("select * from Integer");  testQueryMetrics(cache,qry);}  }
class C{  public static boolean isSurrogatePair(char high,char low){  return (isHighSurrogate(high) && isLowSurrogate(low));}  }
class C{  public boolean isConstantString(){  return isConstant() && (value instanceof String);}  }
class C{  public String transform(String html,URL url,boolean setBaseTag) throws PageException {  StringBuffer target=new StringBuffer();  SourceCode cfml=new SourceCode(html,false,CFMLEngine.DIALECT_CFML);  while (!cfml.isAfterLast()) {    if (cfml.forwardIfCurrent('<')) {      target.append('<');      try {        for (int i=0; i < tags.length; i++) {          if (cfml.forwardIfCurrent(tags[i].tag + " ")) {            target.append(tags[i].tag + " ");            transformTag(target,cfml,tags[i],url);          }        }      } catch (      MalformedURLException me) {        throw Caster.toPageException(me);      }    } else {      target.append(cfml.getCurrent());      cfml.next();    }  }  if (!setBaseTag)   return target.toString();  html=target.toString();  String prefix="", postfix="";  int index=StringUtil.indexOfIgnoreCase(html,"</head>");  if (index == -1) {    prefix="<head>";    postfix="</head>";    index=StringUtil.indexOfIgnoreCase(html,"</html>");  }  if (index != -1) {    StringBuffer sb=new StringBuffer();    sb.append(html.substring(0,index));    String port=url.getPort() == -1 ? "" : ":" + url.getPort();    sb.append(prefix + "<base href=\"" + (url.getProtocol() + "://" + url.getHost()+ port)+ "\">"+ postfix);    sb.append(html.substring(index));    html=sb.toString();  }  return html;}  }
class C{  protected void drawMaximized(DrawContext dc){  this.drawFrame(dc);  if (this.renderToTexture && !dc.isPickingMode()) {    this.drawContentTiles(dc);  } else {    this.drawContentDirect(dc);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String faultName(){  return faultName;}  }
class C{  public void gotoFrame(boolean play) throws IOException {  writeCode(GOTO_FRAME_2);  out.writeUI16(1);  out.writeUI8(play ? 1 : 0);}  }
class C{  public Matrix zoomOut(float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(0.7f,0.7f,x,y);  return save;}  }
class C{  public static ServletHolder create(String prefix,Path root){  root=root.toAbsolutePath();  checkArgument(Files.exists(root),"Root must exist: %s",root);  checkArgument(prefix.startsWith("/"),"Prefix must start with a slash: %s",prefix);  ServletHolder holder=new ServletHolder(StaticResourceServlet.class);  holder.setInitParameter("root",root.toString());  if (Files.isDirectory(root)) {    checkArgument(prefix.endsWith("/*"),"Prefix (%s) must end with /* since root (%s) is a directory",prefix,root);    holder.setInitParameter("prefix",prefix.substring(0,prefix.length() - 1));  } else {    holder.setInitParameter("prefix",prefix);  }  return holder;}  }
class C{  protected Component createComponent(){  AttributeSet attr=getElement().getAttributes();  Component comp=StyleConstants.getComponent(attr);  return comp;}  }
class C{  public Builder textColor(int color){  textColor=color;  return this;}  }
class C{  @ConstructorProperties({"model"}) public JTree(TreeModel newModel){  super();  expandedStack=new Stack<Stack<TreePath>>();  toggleClickCount=2;  expandedState=new Hashtable<TreePath,Boolean>();  setLayout(null);  rowHeight=16;  visibleRowCount=20;  rootVisible=true;  selectionModel=new DefaultTreeSelectionModel();  cellRenderer=null;  scrollsOnExpand=true;  setOpaque(true);  expandsSelectedPaths=true;  updateUI();  setModel(newModel);}  }
class C{  public double toDouble(){  return mNumerator / (double)mDenominator;}  }
class C{  public void testCreateDeployerWhenNoDeployerElementSpecified() throws Exception {  TestableDeployerMojo mojo=new TestableDeployerMojo();  org.codehaus.cargo.container.deployer.Deployer deployer=mojo.createDeployer(new RemoteContainerStub());  assertEquals(RemoteDeployerStub.class.getName(),deployer.getClass().getName());  assertEquals(DeployerType.REMOTE,deployer.getType());}  }
class C{  public void addAll(Collection<SelectClauseElementRaw> elements){  selectClauseElements.addAll(elements);}  }
class C{  private void updateBorderText(){  final List<INaviView> views=m_project.getContent().getViews();  m_callgraphBorder.setTitle(String.format("%d Call graph Views",CViewFilter.getCallgraphViewCount(views)));  m_flowgraphBorder.setTitle(String.format("%d Flow graph Views",CViewFilter.getFlowgraphViewCount(views)));  m_mixedgraphBorder.setTitle(String.format("%d Mixed graph Views",CViewFilter.getMixedgraphViewCount(views)));  updateUI();}  }
class C{  public void reset(int length){  pos=0;  count=length;}  }
class C{  public ExternalProcessResult awaitTerminationAndResult(int timeoutMs,boolean destroyOnError) throws InterruptedException, TimeoutException, OperationCancellation, IOException {  awaitTermination(timeoutMs,destroyOnError);  return new ExternalProcessResult(process.exitValue(),getStdOutBytes(),getStdErrBytes());}  }
class C{  public SizedTextField(final int columns,final SizePolicy sizePolicy){  super(columns);  GUIUtils.restrictSize(this,sizePolicy);}  }
class C{  public InputSource(InputStream byteStream){  setByteStream(byteStream);}  }
class C{  private String key(InetSocketAddress addr){  assert addr != null;  SB sb=new SB();  sb.a(addr.getAddress().getHostAddress()).a(DELIM).a(addr.getPort());  return sb.toString();}  }
class C{  public static void closeSilently(Writer writer){  if (writer != null) {    try {      writer.flush();      writer.close();    } catch (    Exception e) {    }  }}  }
class C{  public ResourceLoader(Class<?> anyClass){  this.anyClass=anyClass;}  }
class C{  public BytesReference source(){  return source;}  }
class C{  public ServerProxyNoBoundary(){  requestFileName="getstate.query";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.997 -0500",hash_original_method="E04B804C1814B5C9E0689952B28AE769",hash_generated_method="E04B804C1814B5C9E0689952B28AE769") ScheduledFutureTask(Runnable r,V result,long ns,long period){  super(r,result);  this.time=ns;  this.period=period;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public void reset(){  aggregationMap.clear();}  }
class C{  public static boolean isRegistered(Class<? extends NbtSerializable> clazz){  Class c;  return tag.containsKey(clazz) || ((((c=aliases.get(clazz))) != null) && tag.containsKey(c));}  }
class C{  public void startNonEscaping() throws org.xml.sax.SAXException {  m_disableOutputEscapingStates.push(true);}  }
class C{  public Snackbar build(){  Snackbar snackbar=Snackbar.make(parentView,message,duration);  new SnackbarCustomiser(snackbar).customiseMessage(messageTextColor,appendMessages).setBackgroundColor(backgroundColor).setAction(actionText,actionClickListener).setActionTextColor(actionTextColor).setActionAllCaps(actionAllCaps).setCallbacks(callbackBuilder.build()).setIcon(icon,iconMarginStart,iconMarginEnd);  return snackbar;}  }
class C{  public ByteArrayRequestEntity(final byte[] content){  this(content,null);}  }
class C{  private String collectText() throws XMLStreamException {  StringBuilder elementText=new StringBuilder();  while (xmlReader.isCharacters()) {    elementText.append(xmlReader.getText().replaceAll("\r","").trim());    xmlReader.next();  }  return elementText.toString();}  }
class C{  public static Animation outToTopAnimation(long duration,Interpolator interpolator){  Animation outtotop=new TranslateAnimation(Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,0.0f,Animation.RELATIVE_TO_PARENT,-1.0f);  outtotop.setDuration(duration);  outtotop.setInterpolator(interpolator == null ? new AccelerateInterpolator() : interpolator);  return outtotop;}  }
class C{  private String faviconUrl(){  String origin=mSite.getAddress().getOrigin();  if (origin == null) {    return "http://" + mSite.getAddress().getHost();  }  Uri uri=Uri.parse(origin);  if (uri.getPort() != -1) {    uri=uri.buildUpon().authority(uri.getHost()).build();  }  return uri.toString();}  }
class C{  public ScheduleItem addItem(String type){  _IdNumber++;  _sequenceNum++;  String id=_id + "c" + Integer.toString(_IdNumber);  log.debug("Adding new item to ({}) id: {}",getName(),id);  ScheduleItem si=new ScheduleItem(id,type);  si.setSequenceId(_sequenceNum);  Integer old=Integer.valueOf(_scheduleHashTable.size());  _scheduleHashTable.put(si.getId(),si);  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,old,Integer.valueOf(_scheduleHashTable.size()));  si.addPropertyChangeListener(this);  return si;}  }
class C{  public BalancedHostAttrConstraint(Func1<String,Set<String>> coTasksGetter,String hostAttributeName,int expectedValues){  this.coTasksGetter=coTasksGetter;  this.hostAttributeName=hostAttributeName;  this.name=BalancedHostAttrConstraint.class.getName() + "-" + hostAttributeName;  this.expectedValues=expectedValues;}  }
class C{  public T itemClicked(Object handler,String method){  Common common=new Common().forward(handler,method,true,ON_ITEM_SIG);  return itemClicked(common);}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CommonTermsQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public final Handler newHandler(String tag){  return new Handler(getHandlerThread(tag).getLooper());}  }
class C{  public void removeListener(){  mOutput.removeListener();}  }
class C{  public void init(Controller c){  super.init(c);  display=new Display2D(1300,600,this);  displayFrame=display.createFrame();  displayFrame.setTitle("Gridlock Display");  c.registerFrame(displayFrame);  displayFrame.setVisible(true);  display.attach(tractsPortrayal,"Census Tracts");  display.attach(roadsPortrayal,"Roads");  display.attach(agentPortrayal,"Agents");  trafficChart=new TimeSeriesChartGenerator();  trafficChart.setTitle("Traffic Statistics");  trafficChart.setYAxisLabel("Speed");  trafficChart.setXAxisLabel("Time");  JFrame chartFrame=trafficChart.createFrame(this);  chartFrame.pack();  c.registerFrame(chartFrame);}  }
class C{  @After public void tearDown(){  serializer=null;  deserializer=null;}  }
class C{  BKLogWriteHandler(ZKLogMetadataForWriter logMetadata,DistributedLogConfiguration conf,ZooKeeperClientBuilder zkcBuilder,BookKeeperClientBuilder bkcBuilder,LogSegmentMetadataStore metadataStore,OrderedScheduler scheduler,LedgerAllocator allocator,StatsLogger statsLogger,StatsLogger perLogStatsLogger,AlertStatsLogger alertStatsLogger,String clientId,int regionId,PermitLimiter writeLimiter,FeatureProvider featureProvider,DynamicDistributedLogConfiguration dynConf,DistributedLock lock){  super(logMetadata,conf,zkcBuilder,bkcBuilder,metadataStore,scheduler,statsLogger,alertStatsLogger,null,WRITE_HANDLE_FILTER,clientId);  this.perLogStatsLogger=perLogStatsLogger;  this.writeLimiter=writeLimiter;  this.featureProvider=featureProvider;  this.dynConf=dynConf;  this.ledgerAllocator=allocator;  this.lock=lock;  this.metadataUpdater=LogSegmentMetadataStoreUpdater.createMetadataUpdater(conf,metadataStore);  ensembleSize=conf.getEnsembleSize();  if (ensembleSize < conf.getWriteQuorumSize()) {    writeQuorumSize=ensembleSize;    LOG.warn("Setting write quorum size {} greater than ensemble size {}",conf.getWriteQuorumSize(),ensembleSize);  } else {    writeQuorumSize=conf.getWriteQuorumSize();  }  if (writeQuorumSize < conf.getAckQuorumSize()) {    ackQuorumSize=writeQuorumSize;    LOG.warn("Setting write ack quorum size {} greater than write quorum size {}",conf.getAckQuorumSize(),writeQuorumSize);  } else {    ackQuorumSize=conf.getAckQuorumSize();  }  if (conf.getEncodeRegionIDInLogSegmentMetadata()) {    this.regionId=regionId;  } else {    this.regionId=DistributedLogConstants.LOCAL_REGION_ID;  }  this.sanityCheckTxnId=conf.getSanityCheckTxnID();  this.validateLogSegmentSequenceNumber=conf.isLogSegmentSequenceNumberValidationEnabled();  maxLogSegmentSequenceNo=new MaxLogSegmentSequenceNo(logMetadata.getMaxLSSNData());  inprogressLSSNs=new LinkedList<Long>();  maxTxId=new MaxTxId(zooKeeperClient,logMetadata.getMaxTxIdPath(),conf.getSanityCheckTxnID(),logMetadata.getMaxTxIdData());  scheduleGetLedgersTask(false,true);  setLastLedgerRollingTimeMillis(Utils.nowInMillis());  if (conf.getLogSegmentRollingIntervalMinutes() > 0) {    rollingPolicy=new TimeBasedRollingPolicy(conf.getLogSegmentRollingIntervalMinutes() * 60 * 1000);  } else {    rollingPolicy=new SizeBasedRollingPolicy(conf.getMaxLogSegmentBytes());  }  StatsLogger segmentsStatsLogger=statsLogger.scope("segments");  openOpStats=segmentsStatsLogger.getOpStatsLogger("open");  closeOpStats=segmentsStatsLogger.getOpStatsLogger("close");  recoverOpStats=segmentsStatsLogger.getOpStatsLogger("recover");  deleteOpStats=segmentsStatsLogger.getOpStatsLogger("delete");}  }
class C{  public JFontChooser(){  this(new DefaultFontChooserModel());}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void end(String namespace,String name) throws Exception {  Object top=digester.pop();  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[FactoryRule]{" + digester.getMatch() + "} Pop "+ top.getClass());  }  if (!CLASS_NAME.equals(top.getClass().getName())) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SSAT");  translateAll(environment,instruction,"SSAT",instructions);}  }
class C{  public static void main(String args[]){  try {    DriverManager.registerDriver(new org.postgresql.Driver());    s_cType=C_MULTIPLE;    statementTiming();    statementTiming();    statementTiming();    s_fetchSize=10;    s_cType=C_SHARED;    s_do_yield=false;    runTest();    runTest();    s_do_yield=true;    runTest();    runTest();    s_cType=C_MULTIPLE;    s_do_yield=false;    runTest();    runTest();    s_do_yield=true;    runTest();    runTest();    s_cType=C_PRECREATED;    s_do_yield=false;    runTest();    runTest();    s_do_yield=true;    runTest();    runTest();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private int stripMultipartHeaders(byte[] b,int offset){  int i=0;  for (i=offset; i < b.length; i++) {    if (b[i] == '\r' && b[++i] == '\n' && b[++i] == '\r' && b[++i] == '\n')     break;  }  return i + 1;}  }
class C{  @Override public void deregisterUserMonitor(UserMonitor userMonitor){  UserMonitor monitor=users.remove(userMonitor.getUserName());  assert (monitor == null || monitor == userMonitor);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public DoubleVectorIndividual crossover(EvolutionState state,DoubleVectorIndividual target,DoubleVectorIndividual child,int thread){  if (Cr == CR_UNSPECIFIED)   state.output.warnOnce("Differential Evolution Parameter cr unspecified.  Assuming cr = 0.5");  int index=state.random[thread].nextInt(child.genome.length);  double val=child.genome[index];  for (int i=0; i < child.genome.length; i++) {    if (state.random[thread].nextDouble() < Cr)     child.genome[i]=target.genome[i];  }  child.genome[index]=val;  return child;}  }
class C{  public boolean intersects(BitSet set){  for (int i=Math.min(unitsInUse,set.unitsInUse) - 1; i >= 0; i--)   if ((bits[i] & set.bits[i]) != 0)   return true;  return false;}  }
class C{  public void remove(@NotNull Collection<VirtualFile> files){synchronized (myDefinitelyUntrackedFiles) {    myDefinitelyUntrackedFiles.removeAll(files);  }}  }
class C{  public long size(){  return size;}  }
class C{  private boolean isTabSepFileFormatCorrect(File aFile){  try {    LineIterator it=new LineIterator(new FileReader(aFile));    while (it.hasNext()) {      String line=it.next();      if (line.trim().length() == 0) {        continue;      }      if (line.split("\t").length != 2) {        return false;      }    }  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public ParallecHeader(){}  }
class C{  public boolean isProxyRevalidate(){  return proxyRevalidate;}  }
class C{  private UserTransactionHelper(){}  }
class C{  public static String formatPrice(Double price){  if (price == null)   return "";  return formatPrice(price.doubleValue());}  }
class C{  public MapperBuilder analyzing(ChooseConfig config){  this.config=config;  return this;}  }
class C{  public static void verify(final ClassReader cr,final ClassLoader loader,final boolean dump,final PrintWriter pw){  ClassNode cn=new ClassNode();  cr.accept(new CheckClassAdapter(cn,false),ClassReader.SKIP_DEBUG);  Type syperType=cn.superName == null ? null : Type.getObjectType(cn.superName);  List<MethodNode> methods=cn.methods;  List<Type> interfaces=new ArrayList<Type>();  for (Iterator<String> i=cn.interfaces.iterator(); i.hasNext(); ) {    interfaces.add(Type.getObjectType(i.next()));  }  for (int i=0; i < methods.size(); ++i) {    MethodNode method=methods.get(i);    SimpleVerifier verifier=new SimpleVerifier(Type.getObjectType(cn.name),syperType,interfaces,(cn.access & Opcodes.ACC_INTERFACE) != 0);    Analyzer<BasicValue> a=new Analyzer<BasicValue>(verifier);    if (loader != null) {      verifier.setClassLoader(loader);    }    try {      a.analyze(cn.name,method);      if (!dump) {        continue;      }    } catch (    Exception e) {      e.printStackTrace(pw);    }    printAnalyzerResult(method,a,pw);  }  pw.flush();}  }
class C{  BlobOutputStream(RowCursor cursor,ColumnBlob column,int blobId){  _table=cursor.table();  _cursor=cursor;  _column=column;  _blobId=blobId;  _isLargeBlob=true;}  }
class C{  public static File findExeInProjectBin(File projectRoot,String exe){  File file=NodeFinder.resolvePath(projectRoot,NodeFinder.NODE_MODULES,BIN,exe);  if (file.exists()) {    return file;  }  return null;}  }
class C{  protected int incrementSampleIndex(int index,int count){  index+=count;  if (index >= samples.length) {    index-=samples.length;  } else   if (index < 0) {    index+=samples.length;  }  return index;}  }
class C{  public void add(int attribute){  if (data.length == size) {    grow();  }  data[size++]=attribute;}  }
class C{  private void validateDebugSettings(){  verifyDiffCheckBox.setSelected(controller.isDiffVerificationEnabled());  verifyEncodingCheckBox.setSelected(controller.isEncodingVerificationEnabled());  statsOutputCheckBox.setSelected(controller.isStatsOutputEnabled());  boolean flagA=controller.isDiffVerificationEnabled() || controller.isEncodingVerificationEnabled();  debugOuputCheckBox.setEnabled(flagA);  debugOuputCheckBox.setSelected(controller.isDebugOutputEnabled());  boolean flagB=controller.isDebugOutputEnabled();  debugOutputLabel.setEnabled(flagA && flagB);  debugOutputField.setEnabled(flagA && flagB);}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  private void discoverConnectivity(StorageSystem storageSystem){  StringSet newVarrays=StoragePoolAssociationHelper.getVplexSystemConnectedVarrays(storageSystem.getId(),_dbClient);  if (storageSystem.getVirtualArrays() == null) {    storageSystem.setVirtualArrays(newVarrays);  } else {    storageSystem.getVirtualArrays().replace(newVarrays);  }  _dbClient.updateAndReindexObject(storageSystem);}  }
class C{  public static Simulation fromXml(String xml) throws ParserConfigurationException, SAXException, IOException {  return XmlReader.fromXml(new InputSource(new StringReader(xml)));}  }
class C{  private void init(){  URL home=getClass().getResource("..");  File local;  if (home != null) {    System.out.println("looks like you are not starting from a jar-package");    local=new File(home.getPath() + "/" + helproot+ "/"+ language+ "/");    System.out.println("local: " + local.getAbsolutePath());    initFile(local);    try {      local=new File(new File(home.getPath()).getParentFile().getParentFile(),helproot + "/" + language);      System.out.println("local: " + local.getAbsolutePath());      initFile(local);    } catch (    Exception e) {      System.out.println("but not loading from the developer workbench?!");    }  } else {    System.out.println("looks like you are starting from a jar-package");    local=CommandLoader.getLocation();    initJar(local);  }  List<String> l=getLanguages();  for (  String aL : l) {    System.out.println("language found: " + aL);  }}  }
class C{  public void initElements(){  JPanel viewcontroller=new JPanel();  int pref_height=10;  viewcontroller.setVisible(true);  viewcontroller.setLayout(null);  viewcontroller.setBackground(new Color(11,11,11));  JScrollPane pane=new JScrollPane(viewcontroller);  pane.setBorder(null);  pane.getVerticalScrollBar().setUI(new GuiScrollbar());  pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  int i=0;  for (  SRX_Reg.SRX_Wrapper wrapper : SRX_Reg.wrappers.values()) {    viewcontroller.add(new GuiSRX(50,10 + 120 * i,wrapper,viewcontroller));    pref_height+=120;    i++;  }  viewcontroller.setPreferredSize(new Dimension(600,pref_height));  this.add(pane);}  }
class C{  public static OnSetClause create(Expression expression){  OnSetClause clause=new OnSetClause();  clause.addAssignment(expression);  return clause;}  }
class C{  public boolean isControllerSimultaneitySupported(){  return mControllerSimultaneitySupported;}  }
class C{  protected boolean replaceStackBlocks(int blockX,int blockZ,int inChunkX,int inChunkZ,double baseBlockNoise,ChunkPrimer chunkPrimer,ChunkGeneratorBetweenlands chunkGenerator,Biome[] biomesForGeneration,float[] terrainWeights,float terrainWeight,EnumGeneratorPass pass){  return true;}  }
class C{  public static final Cache<String,BlockReader> createCache(int concurrencyLevel,int initialCapacity,int maximunSize){  CacheBuilder builder=CacheBuilder.newBuilder().concurrencyLevel(concurrencyLevel).initialCapacity(initialCapacity).maximumSize(maximunSize);  return buildCache(builder);}  }
class C{  public Replacement(URI uri,int offset,int length,String text){  super(uri,offset,length);  this.text=text;}  }
class C{  public void clear(){  toPropagate.clear();}  }
class C{  public T caseExecutionNode(ExecutionNode object){  return null;}  }
class C{  private boolean mutationInsert(){  boolean changed=false;  final double ALPHA=Properties.P_STATEMENT_INSERTION;  int count=0;  TestFactory testFactory=TestFactory.getInstance();  while (Randomness.nextDouble() <= Math.pow(ALPHA,count) && (!Properties.CHECK_MAX_LENGTH || size() < Properties.CHROMOSOME_LENGTH)) {    count++;    int position=testFactory.insertRandomStatement(test,getLastMutatableStatement());    if (position >= 0 && position < test.size()) {      changed=true;      mutationHistory.addMutationEntry(new TestMutationHistoryEntry(TestMutationHistoryEntry.TestMutation.INSERTION,test.getStatement(position)));    }  }  return changed;}  }
class C{  public static Scenario createScenario(final Config config){  if (config == null) {    throw new NullPointerException("config must not be null!");  }  return new MutableScenario(config);}  }
class C{  public static <I,F,V>SimpleFeatureData<I,F,V> load(Stream<Tuple3<I,F,V>> tuples){  Map<I,List<Tuple2<F,V>>> itemMap=new HashMap<>();  Map<F,List<Tuple2<I,V>>> featMap=new HashMap<>();  tuples.forEach(null);  return new SimpleFeatureData<>(itemMap,featMap);}  }
class C{  @Override public boolean isUndoEnabled(){  return ((DataSortedTableModel)m_TableData.getModel()).isUndoEnabled();}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  @Override public boolean canGameStart(){  if (m_gameSelectorModel.getGameData() == null) {    return false;  }  final boolean diceServerValid=m_diceServerEditor.isBeanValid();  final boolean summaryValid=m_forumPosterEditor.isBeanValid();  final boolean webSiteValid=m_webPosterEditor.isBeanValid();  final boolean emailValid=m_emailSenderEditor.isBeanValid();  final boolean pbemReady=diceServerValid && summaryValid && emailValid&& webSiteValid&& m_gameSelectorModel.getGameData() != null;  if (!pbemReady) {    return false;  }  for (  final PBEMLocalPlayerComboBoxSelector player : m_playerTypes) {    if (player.isPlayerEnabled()) {      return true;    }  }  return false;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a number and its width: ");  int number=input.nextInt();  int width=input.nextInt();  System.out.println(number + " formatted to width " + width+ ": "+ format(number,width));}  }
class C{  public boolean isSectionTextVisible(){  return null == sectionTextVisible ? _sectionTextVisible : sectionTextVisible.get();}  }
class C{  public void stopThread(){  stop=true;synchronized (this) {    notify();  }}  }
class C{  private boolean closeEv(final Packet p){  if (evidences.containsKey(p.getId()) == false) {    if (Cfg.DEBUG) {      Check.log(TAG + " Requested log not found");    }    return false;  }  final Evidence evidence=evidences.get(p.getId());  if (evidence != null) {    if (Cfg.DEBUG) {      Check.log(TAG + " (closeLog): " + evidence);    }    evidence.close();  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " ERROR (closeLog): evidence==null");    }  }  evidences.remove(p.getId());  return true;}  }
class C{  public PatternFilenameFilter(String patternStr){  this(Pattern.compile(patternStr));}  }
class C{  public OpenNetworkAction(Workspace workspace){  super("Open Network",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Network.png"));}  }
class C{  public void putAll(Map<String,String> map){  for (  Entry<String,String> entry : map.entrySet()) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  public StoredTransactionOutput(Sha256Hash hash,long index,BigInteger value,int height,boolean isCoinbase,byte[] scriptBytes){  this.hash=hash;  this.index=index;  this.value=value;  this.height=isCoinbase ? height : NONCOINBASE_HEIGHT;  this.scriptBytes=scriptBytes;}  }
class C{  public Element previous(){  int stackSize;  if (elementStack == null || (stackSize=elementStack.size()) == 0) {    return null;  }  StackItem item=elementStack.peek();  Element elem=item.getElement();  int index=item.getIndex();  if (index > 0) {    return getDeepestLeaf(elem.getElement(--index));  } else   if (index == 0) {    return elem;  } else   if (index == -1) {    if (stackSize == 1) {      return null;    }    StackItem top=elementStack.pop();    item=elementStack.peek();    elementStack.push(top);    elem=item.getElement();    index=item.getIndex();    return ((index == -1) ? elem : getDeepestLeaf(elem.getElement(index)));  }  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:01.587 -0500",hash_original_method="096D4D4F0EE82FD61B43B813E755281E",hash_generated_method="C56BAAE3C8CF809F5B6303E13BAA4F9F") private void inflate(Resources r,XmlPullParser parser,AttributeSet attrs) throws XmlPullParserException, IOException {  int type;  final int innerDepth=parser.getDepth() + 1;  int depth;  int listAllocated=20;  int listSize=0;  int[] colorList=new int[listAllocated];  int[][] stateSpecList=new int[listAllocated][];  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && ((depth=parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {    if (type != XmlPullParser.START_TAG) {      continue;    }    if (depth > innerDepth || !parser.getName().equals("item")) {      continue;    }    int colorRes=0;    int color=0xffff0000;    boolean haveColor=false;    int i;    int j=0;    final int numAttrs=attrs.getAttributeCount();    int[] stateSpec=new int[numAttrs];    for (i=0; i < numAttrs; i++) {      final int stateResId=attrs.getAttributeNameResource(i);      if (stateResId == 0)       break;      if (stateResId == com.android.internal.R.attr.color) {        colorRes=attrs.getAttributeResourceValue(i,0);        if (colorRes == 0) {          color=attrs.getAttributeIntValue(i,color);          haveColor=true;        }      } else {        stateSpec[j++]=attrs.getAttributeBooleanValue(i,false) ? stateResId : -stateResId;      }    }    stateSpec=StateSet.trimStateSet(stateSpec,j);    if (colorRes != 0) {      color=r.getColor(colorRes);    } else     if (!haveColor) {      throw new XmlPullParserException(parser.getPositionDescription() + ": <item> tag requires a 'android:color' attribute.");    }    if (listSize == 0 || stateSpec.length == 0) {      mDefaultColor=color;    }    if (listSize + 1 >= listAllocated) {      listAllocated=ArrayUtils.idealIntArraySize(listSize + 1);      int[] ncolor=new int[listAllocated];      System.arraycopy(colorList,0,ncolor,0,listSize);      int[][] nstate=new int[listAllocated][];      System.arraycopy(stateSpecList,0,nstate,0,listSize);      colorList=ncolor;      stateSpecList=nstate;    }    colorList[listSize]=color;    stateSpecList[listSize]=stateSpec;    listSize++;  }  mColors=new int[listSize];  mStateSpecs=new int[listSize][];  System.arraycopy(colorList,0,mColors,0,listSize);  System.arraycopy(stateSpecList,0,mStateSpecs,0,listSize);}  }
class C{  protected void initOutputLocators(Instances data,int[] indices){  if (indices == null) {    m_OutputStringAtts=new StringLocator(data);    m_OutputRelAtts=new RelationalLocator(data);  } else {    m_OutputStringAtts=new StringLocator(data,indices);    m_OutputRelAtts=new RelationalLocator(data,indices);  }}  }
class C{  public void copyPluginSoLib(Context context,String dexPath,String nativeLibDir){  String cpuName=getCpuName();  String cpuArchitect=getCpuArch(cpuName);  sNativeLibDir=nativeLibDir;  Log.d(TAG,"cpuArchitect: " + cpuArchitect);  long start=System.currentTimeMillis();  try {    ZipFile zipFile=new ZipFile(dexPath);    Enumeration<? extends ZipEntry> entries=zipFile.entries();    while (entries.hasMoreElements()) {      ZipEntry zipEntry=(ZipEntry)entries.nextElement();      if (zipEntry.isDirectory()) {        continue;      }      String zipEntryName=zipEntry.getName();      if (zipEntryName.endsWith(".so") && zipEntryName.contains(cpuArchitect)) {        final long lastModify=zipEntry.getTime();        if (lastModify == DLConfigs.getSoLastModifiedTime(context,zipEntryName)) {          Log.d(TAG,"skip copying, the so lib is exist and not change: " + zipEntryName);          continue;        }        mSoExecutor.execute(new CopySoTask(context,zipFile,zipEntry,lastModify));      }    }  } catch (  IOException e) {    e.printStackTrace();  }  long end=System.currentTimeMillis();  Log.d(TAG,"### copy so time : " + (end - start) + " ms");}  }
class C{  public void copy(Hashtable props){  super.copy(props);  init(props);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void check(final int api){}  }
class C{  @Override public Map<String,Object> nextRow(){  if (reader == null) {    reader=new BufferedReader((Reader)context.getDataSource().getData(url));  }  String line;  while (true) {    try {      line=reader.readLine();    } catch (    IOException exp) {      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,"Problem reading from input",exp);    }    if (line == null) {      closeResources();      return null;    }    if (acceptLineRegex != null && !acceptLineRegex.matcher(line).find())     continue;    if (skipLineRegex != null && skipLineRegex.matcher(line).find())     continue;    Map<String,Object> row=new HashMap<>();    row.put("rawLine",line);    return row;  }}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public void updateNull(String columnName) throws SQLException {  updateNull(findColumn(columnName));}  }
class C{  protected void replaceFirstEventToSend(){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".replaceFirstEventToSend Replacing event");  }  SendableEvent theEvent=eventsToSend.first();  eventsToSend.remove(theEvent);  addNewEvent(eventsFromAdapters.get(theEvent));  eventsFromAdapters.remove(theEvent);  pollEmptyAdapters();}  }
class C{  public ButtonClickerObserver(final ButtonClickerActivity buttonClickerActivity){  super(buttonClickerActivity);  this.baseActivity=buttonClickerActivity;}  }
class C{  public NewMultiArrayExpr newNewMultiArrayExpr(ArrayType type,List sizes){  return new JNewMultiArrayExpr(type,sizes);}  }
class C{  public void startNalUnit(int type){  Assertions.checkState(!isFilling);  isFilling=type == targetType;  if (isFilling) {    nalLength=3;    isCompleted=false;  }}  }
class C{  @Override public ServiceDocumentQueryResult queryDocumentPage(String pageLink) throws BadRequestException, DocumentNotFoundException, TimeoutException, InterruptedException {  checkNotNull(pageLink,"Cannot query documents with null pageLink");  checkArgument(!pageLink.isEmpty(),"Cannot query documents with empty pageLink");  pageLink=decodePageLink(pageLink);  Operation result=get(pageLink);  ServiceDocumentQueryResult queryResult=result.getBody(QueryTask.class).results;  queryResult.nextPageLink=encodePageLink(queryResult.nextPageLink);  queryResult.prevPageLink=encodePageLink(queryResult.prevPageLink);  return queryResult;}  }
class C{  public Builder cloneFromCard(Card card){  mCard=card.createShallowClone();  return this;}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public LocalDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour){  this(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,ISOChronology.getInstanceUTC());}  }
class C{  private static Shape createArrowTipShape(final Point2D from,final Point2D to){  final int arrowOffset=1;  final Polygon arrowPolygon=new Polygon();  arrowPolygon.addPoint(arrowOffset - arrowLength,arrowLength / 2);  arrowPolygon.addPoint(arrowOffset,0);  arrowPolygon.addPoint(arrowOffset - arrowLength,arrowLength / -2);  final AffineTransform transform=new AffineTransform();  transform.translate(to.getX(),to.getY());  transform.scale(arrowLength,arrowLength);  final double rotate=Math.atan2(to.getY() - from.getY(),to.getX() - from.getX());  transform.rotate(rotate);  return transform.createTransformedShape(arrowPolygon);}  }
class C{  public StorageCapability[] queryStorageCapabilities(String[] capId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryStorageCapabilities(): ";  log.info(methodName + "Entry");  if (capId != null) {    log.info(methodName + "input storage capability Ids: " + Arrays.asList(capId));  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  StorageCapability[] capabilities=sosManager.queryStorageCapabilities(capId);  log.info(methodName + "Exit returning array of capabilities of size[" + capabilities.length+ "]");  return capabilities;}  }
class C{  public void tabChanged(BasePanel currBasePanel,BasePanel newBasePanel){}  }
class C{  @Override public void onDateSet(DatePickerDialog view,int year,int monthOfYear,int dayOfMonth){  tvDate.setText(Util.stringFromDateInts(year,monthOfYear,dayOfMonth));}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private MoveValidator(){}  }
class C{  public void receiveErrorcreatePlatformSession(java.lang.Exception e){}  }
class C{  public PutWarmerRequest(String name){  this.name=name;}  }
class C{  @Override public void evaluate(Solution solution){  double[] x=EncodingUtils.getReal(solution);  double[] f=new double[numberOfObjectives];  int k=numberOfVariables - numberOfObjectives + 1;  double g=0.0;  for (int i=numberOfVariables - k; i < numberOfVariables; i++) {    g+=Math.pow(x[i] - 0.5,2.0);  }  for (int i=0; i < numberOfObjectives; i++) {    f[i]=1.0 + g;    for (int j=0; j < numberOfObjectives - i - 1; j++) {      f[i]*=Math.cos(0.5 * Math.PI * x[j]);    }    if (i != 0) {      f[i]*=Math.sin(0.5 * Math.PI * x[numberOfObjectives - i - 1]);    }  }  solution.setObjectives(f);}  }
class C{  public static final MapPoint convertPoint(ImagePoint imagePoint,MapEnvelope mapEnv,int imgHeight,int imgWidth){  double mapX=convertX(imagePoint,mapEnv,imgWidth);  double mapY=convertY(imagePoint,mapEnv,imgHeight);  return new MapPoint(mapX,mapY);}  }
class C{  private static short CallStaticShortMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticShortMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Short);    return Reflection.unwrapShort(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public boolean isValid(){  return JEditorPaneAccessibleHypertextSupport.this.linksValid;}  }
class C{  public void prpUsageMap(BoundryWisePropUsgeBean bndryBean,Object[] bndryObj,Map<Integer,BoundryWisePropUsgeBean> propUsageIDMap,String usgage,Integer propNullId){  LOGGER.debug("Entered into prpUsageMap method");  BigDecimal totalDemand=ZERO;  BigDecimal arrDmd=ZERO;  BigDecimal currDmd=ZERO;  Integer propCount=0;  Integer propId=0;  arrDmd=arrDmd.add((BigDecimal)bndryObj[2]);  currDmd=currDmd.add((BigDecimal)bndryObj[3]);  BigDecimal bndryObjAvAmt=ZERO;  totalDemand=totalDemand.add(arrDmd).add(currDmd);  propCount=(Integer)bndryObj[4];  if (usgage == null) {    propId=propNullId;  } else   if (usgage != null && usgage.equals("withUsage")) {    propId=Integer.valueOf(((Long)bndryObj[1]).intValue());  }  bndryBean.setArrDmd(roundOff(arrDmd));  bndryBean.setCurrDmd(roundOff(currDmd));  bndryBean.setPropCount(propCount);  bndryBean.setTotalDemand(roundOff(totalDemand));  propUsageIDMap.put(propId,bndryBean);  LOGGER.debug("Property Id : " + propId + ", "+ "Total Properties : "+ bndryBean.getPropCount()+ ", "+ "Arrears Demand : "+ bndryBean.getArrDmd()+ ", "+ "Current Demand : "+ bndryBean.getCurrDmd()+ ", "+ "Total Demand : "+ bndryBean.getTotalDemand());  LOGGER.debug("Exit from prpUsageMap method");}  }
class C{  public XClipboard(String name,String selectionName){  super(name);  selection=new XSelection(XAtom.get(selectionName));  selection.registerOwershipListener(this);}  }
class C{  @Bean @Order(50) public FilterRegistrationBean dosFilter(){  final FilterRegistrationBean filterRegBean=new FilterRegistrationBean();  filterRegBean.setFilter(new DosFilter(securityProperties.getDos().getFilter().getMaxRead(),securityProperties.getDos().getFilter().getMaxWrite(),securityProperties.getDos().getFilter().getWhitelist(),securityProperties.getClients().getBlacklist(),securityProperties.getClients().getRemoteIpHeader()));  filterRegBean.addUrlPatterns("/{tenant}/controller/v1/*","/rest/*");  return filterRegBean;}  }
class C{  public ResponseAPDU(byte[] apdu){  apdu=apdu.clone();  check(apdu);  this.apdu=apdu;}  }
class C{  private synchronized void handleServiceConnectionError(LicenseValidator validator){  mPolicy.processServerResponse(Policy.RETRY,null);  if (mPolicy.allowAccess()) {    validator.getCallback().allow(Policy.RETRY);  } else {    validator.getCallback().dontAllow(Policy.RETRY);  }}  }
class C{  public DcwVariableLengthIndexFile(String filename,boolean msbfirst) throws FormatException, IOException {  this(new BinaryBufferedFile(filename),msbfirst);}  }
class C{  @POST @Path("restore/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response restoreBackup(@QueryParam("backupname") String backupName,@QueryParam("isLocal") boolean isLocal,@QueryParam("password") String password,@QueryParam("isgeofromscratch") @DefaultValue("false") boolean isGeoFromScratch){  log.info("Receive restore request");  if (password == null || password.isEmpty()) {    log.error("The password is missing");    throw new IllegalArgumentException("The password is missing");  }  if (!canDoRestore(backupName,isLocal)) {    return Response.status(ASYNC_STATUS).build();  }  return doRestore(backupName,isLocal,password,isGeoFromScratch);}  }
class C{  public boolean undo(){  return table.undo();}  }
class C{  public SnackbarBuilder actionText(@StringRes int actionTextResId){  this.actionText=context.getString(actionTextResId);  return this;}  }
class C{  void reset(){  System.arraycopy(iv,0,register,0,blockSize);}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    in=it.next().openStream();  }}  }
class C{  private static byte[] logDownloadAdditional(String filename){  if (Cfg.DEBUG) {    Check.requires(filename != null,"null file");  }  if (Cfg.DEBUG) {    Check.requires(!filename.endsWith("/"),"path shouldn't end with /");  }  if (Cfg.DEBUG) {    Check.requires(!filename.endsWith("*"),"path shouldn't end with *");  }  final String path=StringUtils.chomp(Path.hidden(),"/");  final int macroPos=filename.indexOf(path);  if (macroPos >= 0) {    if (Cfg.DEBUG) {      Check.log(TAG + " macropos: " + macroPos);    }    final String start=filename.substring(0,macroPos);    final String end=filename.substring(macroPos + path.length());    filename=start + Directory.hiddenDirMacro + end;  }  if (Cfg.DEBUG) {    Check.log(TAG + " filename: " + filename);  }  final int version=2008122901;  final byte[] wfilename=WChar.getBytes(filename);  final byte[] buffer=new byte[wfilename.length + 8];  final DataBuffer databuffer=new DataBuffer(buffer,0,buffer.length);  databuffer.writeInt(version);  databuffer.writeInt(wfilename.length);  databuffer.write(wfilename);  return buffer;}  }
class C{  private int readContent(InputStream is){  int nread=0;  log("Read content");  String lengthString=headers.get(requestHeaders[REQ_CONTENT_LENGTH]);  int length=new Integer(lengthString).intValue();  length=readData(is,length);  return length;}  }
class C{  public JavaSearchTypeNameMatch(IType type,int modifiers){  this.type=type;  this.modifiers=modifiers;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.319 -0500",hash_original_method="B66B9D5A22E4810AC45D3DC362BC1AC2",hash_generated_method="B39BB31E1BE3EBDBA3318B7C22DF6856") public String group(){  return group(0);}  }
class C{  public DD selfSqr(){  return this.selfMultiply(this);}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  public DuplicateUserException(Throwable cause){  super(cause);}  }
class C{  public Builder withLogIndex(long index){  response.logIndex=Assert.argNot(index,index < 0,"term must not be negative");  return this;}  }
class C{  public void write(int c) throws IOException {  ensureOpen();  if (bufferSize == 0) {    initOut();    out.write(c);  } else {    if (getRemaining() == 0)     if (autoFlush)     flushBuffer(); else     bufferOverflow();    buf.buf[buf.pos++]=(char)c;  }}  }
class C{  public void cfgPackage(ConfigurationValue cfgval,String name,String desc){  packages.add(new PackageInfo(name,desc));  packageNames.add(name);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof JFreeChart)) {    return false;  }  JFreeChart that=(JFreeChart)obj;  if (!this.renderingHints.equals(that.renderingHints)) {    return false;  }  if (this.borderVisible != that.borderVisible) {    return false;  }  if (!ObjectUtilities.equal(this.borderStroke,that.borderStroke)) {    return false;  }  if (!PaintUtilities.equal(this.borderPaint,that.borderPaint)) {    return false;  }  if (!this.padding.equals(that.padding)) {    return false;  }  if (!ObjectUtilities.equal(this.title,that.title)) {    return false;  }  if (!ObjectUtilities.equal(this.subtitles,that.subtitles)) {    return false;  }  if (!ObjectUtilities.equal(this.plot,that.plot)) {    return false;  }  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.backgroundImage,that.backgroundImage)) {    return false;  }  if (this.backgroundImageAlignment != that.backgroundImageAlignment) {    return false;  }  if (this.backgroundImageAlpha != that.backgroundImageAlpha) {    return false;  }  if (this.notify != that.notify) {    return false;  }  return true;}  }
class C{  public static void append(File file,Writer writer,String charset,boolean writeBom) throws IOException {  appendBuffered(file,writer,charset,writeBom);}  }
class C{  @Override public void RemoveFromSuppressLLDPs(DatapathId sw,OFPort port){  NodePortTuple npt=new NodePortTuple(sw,port);  this.suppressLinkDiscovery.remove(npt);  discover(npt);}  }
class C{  private ValueObjectImpl(){  this.isVoid=true;}  }
class C{  public void buttonSetCaption(final String cCaption,final int nFace){switch (nFace) {case 1:    getDictionary(PdfDictionary.MK).setTextStreamValue(PdfDictionary.AC,StringUtils.toBytes(cCaption));  break;case 2:getDictionary(PdfDictionary.MK).setTextStreamValue(PdfDictionary.RC,StringUtils.toBytes(cCaption));break;default :getDictionary(PdfDictionary.MK).setTextStreamValue(PdfDictionary.CA,StringUtils.toBytes(cCaption));}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static long[] clone(final long[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  @Override public int hashCode(){  int hash=37;  hash=HashUtilities.hashCode(hash,this.g1);  hash=HashUtilities.hashCode(hash,this.g2);  hash=HashUtilities.hashCode(hash,this.g3);  return hash;}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  public void testIndex() throws IOException {  Index index=Index.createIndex(indexDir.toString(),indexName);  PositionInvertedIndex invidx=(PositionInvertedIndex)index.getInvertedIndex();  PositionSpec readspec=invidx.getPositionSpec();  assertEquals(positionSpec.getMode(),readspec.getMode());  assertArrayEquals(positionSpec.getLowerBounds(),readspec.getLowerBounds(),0.01);  assertArrayEquals(positionSpec.getUpperBounds(),readspec.getUpperBounds(),0.01);  assertArrayEquals(positionSpec.getPositionBits(),readspec.getPositionBits());  ApplicationSetup.setProperty("ignore.low.idf.terms","false");  ApplicationSetup.setProperty("matching.dsms",ConsistentOriScoreModifier.class.getName());  ApplicationSetup.setProperty("consistent.ori.histogram.bins","36");  QLFDocument<QuantisedKeypoint> qdoc=new QLFDocument<QuantisedKeypoint>(MemoryLocalFeatureList.read(getClass().getResourceAsStream("siftintensity/ukbench00000.jpg.loc"),QuantisedKeypoint.class),"00000",null);  QLFDocumentQuery<QuantisedKeypoint> query=new QLFDocumentQuery<QuantisedKeypoint>(qdoc);  ResultSet res=search(index,query);  for (int i=0; i < res.getScores().length; i++) {    assertEquals(i,res.getDocids()[i]);  }}  }
class C{  public GetAlbums(ListType.Limits limits,String... properties){  super();  addParameterToRequest("limits",limits);  addParameterToRequest("properties",properties);}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,Cookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          Cookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,Cookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  protected CCColorLayer(ccColor4B color){  CGSize s=CCDirector.sharedDirector().winSize();  init(color,s.width,s.height);}  }
class C{  @Override public void endProcessTokens(){  if (map != null) {    tokens.emit(map);    map=null;  }}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(EOL).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + EOL;  if (expectedTokenSequences.length == 0) {  } else {    if (expectedTokenSequences.length == 1) {      retval+="Was expecting:" + EOL + "    ";    } else {      retval+="Was expecting one of:" + EOL + "    ";    }    retval+=expected.toString();  }  return retval;}  }
class C{  private static int appendTypeSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer,boolean isVarArgs){  if (start >= string.length) {    throw new IllegalArgumentException();  }  char c=string[start];  if (isVarArgs) {switch (c) {case C_ARRAY:      return appendArrayTypeSignature(string,start,fullyQualifyTypeNames,buffer,true);case C_RESOLVED:case C_UNRESOLVED:case C_TYPE_VARIABLE:case C_BOOLEAN:case C_BYTE:case C_CHAR:case C_DOUBLE:case C_FLOAT:case C_INT:case C_LONG:case C_SHORT:case C_VOID:case C_STAR:case C_EXTENDS:case C_SUPER:case C_CAPTURE:case C_INTERSECTION:default :    throw new IllegalArgumentException();}} else {switch (c) {case C_ARRAY:  return appendArrayTypeSignature(string,start,fullyQualifyTypeNames,buffer);case C_RESOLVED:case C_UNRESOLVED:return appendClassTypeSignature(string,start,fullyQualifyTypeNames,buffer);case C_TYPE_VARIABLE:int e=Util.scanTypeVariableSignature(string,start);buffer.append(string,start + 1,e - start - 1);return e;case C_BOOLEAN:buffer.append(BOOLEAN);return start;case C_BYTE:buffer.append(BYTE);return start;case C_CHAR:buffer.append(CHAR);return start;case C_DOUBLE:buffer.append(DOUBLE);return start;case C_FLOAT:buffer.append(FLOAT);return start;case C_INT:buffer.append(INT);return start;case C_LONG:buffer.append(LONG);return start;case C_SHORT:buffer.append(SHORT);return start;case C_VOID:buffer.append(VOID);return start;case C_CAPTURE:return appendCaptureTypeSignature(string,start,fullyQualifyTypeNames,buffer);case C_INTERSECTION:return appendIntersectionTypeSignature(string,start,fullyQualifyTypeNames,buffer);case C_STAR:case C_EXTENDS:case C_SUPER:return appendTypeArgumentSignature(string,start,fullyQualifyTypeNames,buffer);default :throw new IllegalArgumentException();}}}  }
class C{  public static Date convertISO8601toDate(String dateString) throws ParseException {  DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");  Date date=dateFormat.parse(dateString);  return date;}  }
class C{  public List<Integer> countSmaller(int[] nums){  NumWithIndex[] array=new NumWithIndex[nums.length];  for (int i=0; i < nums.length; i++) {    array[i]=new NumWithIndex(nums[i],i);  }  return MergeSort.sort(array);}  }
class C{  @Override public List<byte[]> hmget(final byte[] key,final byte[]... fields){  checkIsInMultiOrPipeline();  client.hmget(key,fields);  return client.getBinaryMultiBulkReply();}  }
class C{  @Override public boolean removeFromWorld(){  removeNPC("Easter Bunny");  SingletonRepository.getTurnNotifier().dontNotify(teleporterBehaviour);  return true;}  }
class C{  Object tokenNumber(int c){  Object result=tokenAny(c);  try {    Double d=new Double((String)result);    return d;  } catch (  NumberFormatException e) {    return result;  }}  }
class C{  public static boolean createProduction(MAcctSchema as,int AD_Org_ID,int M_Product_ID,int M_AttributeSetInstance_ID,int M_ProductionLine_ID,int M_CostElement_ID,BigDecimal Amt,BigDecimal Qty,String Description,String trxName){  String sql="DELETE M_CostDetail " + "WHERE Processed='N' AND COALESCE(DeltaAmt,0)=0 AND COALESCE(DeltaQty,0)=0" + " AND M_ProductionLine_ID=" + M_ProductionLine_ID + " AND C_AcctSchema_ID ="+ as.getC_AcctSchema_ID()+ " AND M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID;  int no=DB.executeUpdate(sql,trxName);  if (no != 0)   s_log.config("Deleted #" + no);  MCostDetail cd=get(as.getCtx(),"M_ProductionLine_ID=?",M_ProductionLine_ID,M_AttributeSetInstance_ID,as.getC_AcctSchema_ID(),trxName);  if (cd == null) {    cd=new MCostDetail(as,AD_Org_ID,M_Product_ID,M_AttributeSetInstance_ID,M_CostElement_ID,Amt,Qty,Description,trxName);    cd.setM_ProductionLine_ID(M_ProductionLine_ID);  } else {    cd.setDeltaAmt(Amt.subtract(cd.getAmt()));    cd.setDeltaQty(Qty.subtract(cd.getQty()));    if (cd.isDelta()) {      cd.setProcessed(false);      cd.setAmt(Amt);      cd.setQty(Qty);    } else     return true;  }  boolean ok=cd.save();  if (ok && !cd.isProcessed()) {    MClient client=MClient.get(as.getCtx(),as.getAD_Client_ID());    if (client.isCostImmediate())     cd.process();  }  s_log.config("(" + ok + ") "+ cd);  return ok;}  }
class C{  public static boolean isPrivate(int flags){  return (flags & AccPrivate) != 0;}  }
class C{  public void decreaseNestingLevel(){  getTypeIndexesPerLevel().remove(this.nestingLevel);  this.nestingLevel--;}  }
class C{  CdmaSmsCbProgramResults(Parcel in){  mCategory=in.readInt();  mLanguage=in.readInt();  mCategoryResult=in.readInt();}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public static void main(final String[] args) throws Exception {  new DatabaseFactory().initializeDatabase();  SingletonRepository.getRPWorld();  Configuration.setConfigurationFile("marauroa-prod.ini");  final AgeDumper itemDumper=new AgeDumper();  itemDumper.dump();}  }
class C{  public int reverseBits(int n){  int res=0;  for (int i=0; i < 32; i++)   res=(res << 1) ^ ((n >>> i) & 1);  return res;}  }
class C{  public int hashCode(){  int hash=1;  hash=hash * 31 + m_code.hashCode();  hash=hash * 31 + (m_fieldRef == null ? 0 : m_fieldRef.hashCode());  return hash;}  }
class C{  public MyStringBuilder2(String s){  this.s=s;}  }
class C{  public void stopJobQueue(){  log.info("Stopping geosvc job queue");  _queue.stop(DEFAULT_MAX_WAIT_STOP);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String leftPad(String s,int minLength,char filling){  int ln=s.length();  if (minLength <= ln) {    return s;  }  StringBuilder res=new StringBuilder(minLength);  int dif=minLength - ln;  for (int i=0; i < dif; i++) {    res.append(filling);  }  res.append(s);  return res.toString();}  }
class C{  public static Map<String,Object> deactivateContentAssocMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  Locale locale=(Locale)context.get("locale");  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  GenericValue pk=delegator.makeValue("ContentAssoc");  pk.setAllFields(context,false,null,Boolean.TRUE);  pk.setAllFields(context,false,"ca",Boolean.TRUE);  GenericValue contentAssoc=null;  try {    contentAssoc=EntityQuery.use(delegator).from("ContentAssoc").where(pk).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Entity Error:" + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocRetrievingError",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  if (contentAssoc == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocDeactivatingError",locale));  }  GenericValue userLogin=(GenericValue)context.get("userLogin");  String userLoginId=(String)userLogin.get("userLoginId");  String lastModifiedByUserLogin=userLoginId;  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);  contentAssoc.put("lastModifiedDate",lastModifiedDate);  contentAssoc.put("thruDate",UtilDateTime.nowTimestamp());  String permissionStatus=null;  Map<String,Object> serviceInMap=FastMap.newInstance();  serviceInMap.put("userLogin",context.get("userLogin"));  serviceInMap.put("targetOperationList",targetOperationList);  serviceInMap.put("contentPurposeList",contentPurposeList);  serviceInMap.put("entityOperation",context.get("entityOperation"));  serviceInMap.put("contentIdTo",contentAssoc.get("contentIdTo"));  serviceInMap.put("contentIdFrom",contentAssoc.get("contentId"));  Map<String,Object> permResults=null;  try {    permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);  } catch (  GenericServiceException e) {    Debug.logError(e,"Problem checking permissions","ContentServices");    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPermissionNotGranted",locale));  }  permissionStatus=(String)permResults.get("permissionStatus");  if (permissionStatus != null && permissionStatus.equals("granted")) {    try {      contentAssoc.store();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(e.getMessage());    }  } else {    String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);    return ServiceUtil.returnError(errorMsg);  }  return result;}  }
class C{  default Filterable<T> removeAll(final Iterable<? extends T> it){  return removeAll(StreamUtils.stream(it));}  }
class C{  public static int numberOfTrailingZeros(long longValue){  if (longValue == 0)   return 64;  int x, y;  int n=63;  y=(int)longValue;  if (y != 0) {    n=n - 32;    x=y;  } else   x=(int)(longValue >>> 32);  y=x << 16;  if (y != 0) {    n=n - 16;    x=y;  }  y=x << 8;  if (y != 0) {    n=n - 8;    x=y;  }  y=x << 4;  if (y != 0) {    n=n - 4;    x=y;  }  y=x << 2;  if (y != 0) {    n=n - 2;    x=y;  }  return n - ((x << 1) >>> 31);}  }
class C{  public Bag[] objectsHitBy(final Rectangle2D.Double rect){  Bag[] hitObjs=new Bag[portrayals.size()];  Iterator iter=portrayals.iterator();  int x=0;  while (iter.hasNext()) {    hitObjs[x]=new Bag();    FieldPortrayal2DHolder p=(FieldPortrayal2DHolder)(iter.next());    if (p.visible) {      p.portrayal.hitObjects(getDrawInfo2D(p,rect),hitObjs[x]);    }    x++;  }  return hitObjs;}  }
class C{  public boolean equalsTopo(Segment s){  return ls.equalsTopo(s.getLineSegment());}  }
class C{  public ConnectionPoolTimeoutException(String message){  super(message);}  }
class C{  public static <T>Stream<T> of(){  return EMPTY;}  }
class C{  public void appendChar(int x){  elems=ArrayUtils.ensureCapacity(elems,length + 1);  elems[length]=(byte)((x >> 8) & 0xFF);  elems[length + 1]=(byte)((x) & 0xFF);  length=length + 2;}  }
class C{  public boolean isReference(){  return value.isReference();}  }
class C{  public NClob createNClob() throws SQLException {  return new MariaDbClob();}  }
class C{  public boolean isExclLowerBound(){  return exclLowerBound;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void createImports(StringBuffer sb){  for (  String name : s_importClasses) {    sb.append("import ").append(name).append(";").append(NL);  }  sb.append(NL);}  }
class C{  public void testListOptions() throws Exception {  if (m_OptionTester.getOptionHandler() != null) {    if (!m_OptionTester.checkListOptions()) {      fail(getClassname() + ": " + "Options cannot be listed via listOptions.");    }  }}  }
class C{  public void refreshPushRules(){  ArrayList<MXSession> sessions=null;synchronized (this) {    sessions=getSessions();  }  for (  MXSession session : sessions) {    if (null != session.getDataHandler()) {      session.getDataHandler().refreshPushRules();    }  }}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  protected void paintTitleBackground(Graphics g){  boolean isSelected=frame.isSelected();  if (isSelected)   g.setColor(selectedTitleColor); else   g.setColor(notSelectedTitleColor);  g.fillRect(0,0,getWidth(),getHeight());}  }
class C{  public static Integer[] nullToEmpty(final Integer[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;  }  return array;}  }
class C{  public IndentingWriter(Writer out,int width,String prefix){  super(out);  if (out == null) {    throw new NullPointerException("out == null");  }  if (width < 0) {    throw new IllegalArgumentException("width < 0");  }  if (prefix == null) {    throw new NullPointerException("prefix == null");  }  this.width=(width != 0) ? width : Integer.MAX_VALUE;  this.maxIndent=width >> 1;  this.prefix=(prefix.length() == 0) ? null : prefix;  bol();}  }
class C{  final public SyntaxTreeNode Recursive() throws ParseException {  SyntaxTreeNode tn, sn[];  Token t;  bpa("Recursive");  expecting="RECURSIVE";  t=jj_consume_token(RECURSIVE);  addHeir(new SyntaxTreeNode(mn,t));  expecting="Identifier, operator or _";  tn=ConstantDeclarationItems();  addHeir(tn);  expecting=",";  label_6:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[15]=jj_gen;break label_6;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier, operator or _";tn=ConstantDeclarationItems();addHeir(tn);expecting="`,' or `)'";}sn=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Recursive,sn);}throw new Error("Missing return statement in function");}  }
class C{  public DrawerBuilder withScrollToTopAfterClick(boolean scrollToTopAfterClick){  this.mScrollToTopAfterClick=scrollToTopAfterClick;  return this;}  }
class C{  public InlineKeyboardMarkup build(){  return new InlineKeyboardMarkup(this);}  }
class C{  public void writeFile(){  BufferedWriter bw=null;  try {    String[] arr=list.split(";");    bw=new BufferedWriter(new FileWriter(file));    for (int i=0; i < arr.length; i++) {      bw.write(arr[i],0,arr[i].length());      bw.newLine();    }    bw.flush();    bw.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static String mapCodeToSqlState(int code){switch (code) {case 1022:    return "23000";case 1037:  return "HY001";case 1038:return "HY001";case 1040:return "08004";case 1042:return "08S01";case 1043:return "08S01";case 1044:return "42000";case 1045:return "28000";case 1047:return "HY000";case 1050:return "42S01";case 1051:return "42S02";case 1052:return "23000";case 1053:return "08S01";case 1054:return "42S22";case 1055:return "42000";case 1056:return "42000";case 1057:return "42000";case 1058:return "21S01";case 1059:return "42000";case 1060:return "42S21";case 1061:return "42000";case 1062:return "23000";case 1063:return "42000";case 1064:return "42000";case 1065:return "42000";case 1066:return "42000";case 1067:return "42000";case 1068:return "42000";case 1069:return "42000";case 1070:return "42000";case 1071:return "42000";case 1072:return "42000";case 1073:return "42000";case 1074:return "42000";case 1075:return "42000";case 1080:return "08S01";case 1081:return "08S01";case 1082:return "42S12";case 1083:return "42000";case 1084:return "42000";case 1090:return "42000";case 1091:return "42000";case 1101:return "42000";case 1102:return "42000";case 1103:return "42000";case 1104:return "42000";case 1106:return "42000";case 1107:return "42000";case 1109:return "42S02";case 1110:return "42000";case 1112:return "42000";case 1113:return "42000";case 1115:return "42000";case 1118:return "42000";case 1120:return "42000";case 1121:return "42000";case 1129:return "HY000";case 1130:return "HY000";case 1131:return "42000";case 1132:return "42000";case 1133:return "42000";case 1136:return "21S01";case 1138:return "42000";case 1139:return "42000";case 1140:return "42000";case 1141:return "42000";case 1142:return "42000";case 1143:return "42000";case 1144:return "42000";case 1145:return "42000";case 1146:return "42S02";case 1147:return "42000";case 1148:return "42000";case 1149:return "42000";case 1152:return "08S01";case 1153:return "08S01";case 1154:return "08S01";case 1155:return "08S01";case 1156:return "08S01";case 1157:return "08S01";case 1158:return "08S01";case 1159:return "08S01";case 1160:return "08S01";case 1161:return "08S01";case 1162:return "42000";case 1163:return "42000";case 1164:return "42000";case 1166:return "42000";case 1167:return "42000";case 1169:return "23000";case 1170:return "42000";case 1171:return "42000";case 1172:return "42000";case 1173:return "42000";case 1177:return "42000";case 1178:return "42000";case 1179:return "25000";case 1184:return "08S01";case 1189:return "08S01";case 1190:return "08S01";case 1203:return "42000";case 1205:return "41000";case 1207:return "25000";case 1211:return "42000";case 1213:return "40001";case 1216:return "23000";case 1217:return "23000";case 1218:return "08S01";case 1222:return "21000";case 1226:return "42000";case 1230:return "42000";case 1231:return "42000";case 1232:return "42000";case 1234:return "42000";case 1235:return "42000";case 1239:return "42000";case 1241:return "21000";case 1242:return "21000";case 1247:return "42S22";case 1248:return "42000";case 1249:return "01000";case 1250:return "42000";case 1251:return "08004";case 1252:return "42000";case 1253:return "42000";case 1261:return "01000";case 1262:return "01000";case 1263:return "01000";case 1264:return "01000";case 1265:return "01000";case 1280:return "42000";case 1281:return "42000";case 1286:return "42000";default :return null;}}  }
class C{  public TsFciRunner2(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    current=it.next().openStream();  }}  }
class C{  void updateDays(WheelView year,WheelView month,WheelView day){  Calendar calendar=Calendar.getInstance();  calendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR) + year.getCurrentItem());  calendar.set(Calendar.MONTH,month.getCurrentItem());  int maxDays=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  day.setViewAdapter(new DateNumericAdapter(this,1,maxDays,calendar.get(Calendar.DAY_OF_MONTH) - 1));  curDay=Math.min(maxDays,day.getCurrentItem() + 1);  day.setCurrentItem(curDay - 1,true);}  }
class C{  public static void registerInstance(ActivityLifecycleMonitor monitor){  sLifecycleMonitor.set(monitor);}  }
class C{  public boolean execute(IGameState gameState){  TicTacToeState state=(TicTacToeState)gameState;  TicTacToeBoard board=state.board();  board.set(emptyCell.col,emptyCell.row,board.get(col,row));  board.clear(col,row);  return true;}  }
class C{  public static Optional<Object[]> remove(final T accessor,final Object... keyValues){  return ElementHelper.remove((Object)accessor,keyValues);}  }
class C{  public void writeListEnd() throws IOException {  flushIfFull();  _buffer[_offset++]=(byte)BC_END;}  }
class C{  public boolean containsAttribute(Object name,Object value){  return attributes.containsAttribute(name,value);}  }
class C{  public void shutdown(){  this.shallRun=false;  this.interrupt();  Log.getLog().info("catched caretaker termination signal");}  }
class C{  public void testCloning(){  NumberFormat nf=new DecimalFormat("0");  RelativeDateFormat df1=new RelativeDateFormat();  df1.setSecondFormatter(nf);  RelativeDateFormat df2=null;  df2=(RelativeDateFormat)df1.clone();  assertTrue(df1 != df2);  assertTrue(df1.getClass() == df2.getClass());  assertTrue(df1.equals(df2));  nf.setMinimumFractionDigits(2);  assertFalse(df1.equals(df2));}  }
class C{  public static Cardinality createCardinality(AtlasCardinality cardinality){switch (cardinality) {case SINGLE:    return Cardinality.SINGLE;case LIST:  return Cardinality.LIST;case SET:return Cardinality.SET;default :throw new IllegalStateException("Unrecognized cardinality: " + cardinality);}}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:26.691 -0500",hash_original_method="E2E38A09C125F42D0156C70D28A0D14A",hash_generated_method="2B73A6BB9617147F2ACA4FA0B0C80426") private static void openZygoteSocketIfNeeded() throws ZygoteStartFailedEx {  int retryCount;  if (sPreviousZygoteOpenFailed) {    retryCount=0;  } else {    retryCount=10;  }  for (int retry=0; (sZygoteSocket == null) && (retry < (retryCount + 1)); retry++) {    if (retry > 0) {      try {        Log.i("Zygote","Zygote not up yet, sleeping...");        Thread.sleep(ZYGOTE_RETRY_MILLIS);      } catch (      InterruptedException ex) {      }    }    try {      sZygoteSocket=new LocalSocket();      sZygoteSocket.connect(new LocalSocketAddress(ZYGOTE_SOCKET,LocalSocketAddress.Namespace.RESERVED));      sZygoteInputStream=new DataInputStream(sZygoteSocket.getInputStream());      sZygoteWriter=new BufferedWriter(new OutputStreamWriter(sZygoteSocket.getOutputStream()),256);      Log.i("Zygote","Process: zygote socket opened");      sPreviousZygoteOpenFailed=false;      break;    } catch (    IOException ex) {      if (sZygoteSocket != null) {        try {          sZygoteSocket.close();        } catch (        IOException ex2) {          Log.e(LOG_TAG,"I/O exception on close after exception",ex2);        }      }      sZygoteSocket=null;    }  }  if (sZygoteSocket == null) {    sPreviousZygoteOpenFailed=true;    throw new ZygoteStartFailedEx("connect failed");  }}  }
class C{  public static IntList squareListIterative(IntList L){  if (L == null) {    return null;  }  IntList res=new IntList(L.head * L.head,null);  IntList ptr=res;  L=L.tail;  while (L != null) {    ptr.tail=new IntList(L.head * L.head,null);    L=L.tail;    ptr=ptr.tail;  }  return res;}  }
class C{  static public boolean isValid(String[] values){  try {    if (values[3] == "")     return false;    if (values[2].equalsIgnoreCase("userid") || values[2].equalsIgnoreCase("randomalphalower") || values[2].equalsIgnoreCase("randomalphaupper")|| values[2].equalsIgnoreCase("randomalphamixed")|| values[2].equalsIgnoreCase("randomnumeric")|| values[2].equalsIgnoreCase("randomspecial")|| values[2].equalsIgnoreCase("randomalphamixednumeric")|| values[2].equalsIgnoreCase("randomalphamixedspecial")|| values[2].equalsIgnoreCase("randomalphamixednumericspecial")|| values[2].equalsIgnoreCase("concat")|| values[2].equalsIgnoreCase("useridFromRange")|| values[2].equalsIgnoreCase("useridFromRangeExclude")|| values[2].equalsIgnoreCase("useridFromRangeInclude")|| values[2].equalsIgnoreCase("useridFromRangeWithMod")|| values[2].equalsIgnoreCase("useridFromRangeWithModExclude")|| values[2].equalsIgnoreCase("useridFromRangeWithModInclude")|| values[2].equalsIgnoreCase("substring"))     return true;    return false;  } catch (  Exception ex) {    return false;  }}  }
class C{  @CanIgnoreReturnValue public static <T>T readBytes(InputStream input,ByteProcessor<T> processor) throws IOException {  checkNotNull(input);  checkNotNull(processor);  byte[] buf=createBuffer();  int read;  do {    read=input.read(buf);  } while (read != -1 && processor.processBytes(buf,0,read));  return processor.getResult();}  }
class C{  public static Date decodeDateTime(CharSequence chars) throws DecodingException {  if (isDateTime(chars)) {    char dayHigh=chars.charAt(0);    char dayLow=chars.charAt(1);    int day=decodeFixedDay(dayHigh,dayLow);    char monthFirstChar=chars.charAt(3);    char monthSecondChar=chars.charAt(4);    char monthThirdChar=chars.charAt(5);    int month=decodeMonth(monthFirstChar,monthSecondChar,monthThirdChar);    char milleniumChar=chars.charAt(7);    char centuryChar=chars.charAt(8);    char decadeChar=chars.charAt(9);    char yearChar=chars.charAt(10);    int year=decodeYear(milleniumChar,centuryChar,decadeChar,yearChar);    char zoneDeterminent=chars.charAt(21);    char zoneDigitOne=chars.charAt(22);    char zoneDigitTwo=chars.charAt(23);    char zoneDigitThree=chars.charAt(24);    char zoneDigitFour=chars.charAt(25);    int offset=decodeZone(zoneDeterminent,zoneDigitOne,zoneDigitTwo,zoneDigitThree,zoneDigitFour);    char hourHigh=chars.charAt(12);    char hourLow=chars.charAt(13);    int hour=applyHourOffset(offset,decodeNumber(hourHigh,hourLow));    char minuteHigh=chars.charAt(15);    char minuteLow=chars.charAt(16);    int minute=applyMinuteOffset(offset,decodeNumber(minuteHigh,minuteLow));    char secondHigh=chars.charAt(18);    char secondLow=chars.charAt(19);    int second=decodeNumber(secondHigh,secondLow);    GregorianCalendar calendar=new GregorianCalendar(TimeZone.getTimeZone("GMT"),Locale.US);    calendar.clear();    calendar.set(year,month,day,hour,minute,second);    return calendar.getTime();  } else {    final String message;    if (chars == null) {      message="Expected a date-time but was nothing.";    } else {      message=new StringBuffer("Expected a date-time but was ").append(chars.toString()).toString();    }    throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,message);  }}  }
class C{  private static void thresholdBlock(byte[] luminances,int xoffset,int yoffset,int threshold,int stride,BitMatrix matrix){  for (int y=0, offset=yoffset * stride + xoffset; y < BLOCK_SIZE; y++, offset+=stride) {    for (int x=0; x < BLOCK_SIZE; x++) {      if ((luminances[offset + x] & 0xFF) <= threshold) {        matrix.set(xoffset + x,yoffset + y);      }    }  }}  }
class C{  protected void processElement(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  String str=XMLUtil.read(reader,'%');  char ch=str.charAt(0);  if (ch != '!') {    XMLUtil.skipTag(reader);    return;  }  str=XMLUtil.read(reader,'%');  ch=str.charAt(0);switch (ch) {case '-':    XMLUtil.skipComment(reader);  break;case '[':this.processConditionalSection(reader,entityResolver);break;case 'E':this.processEntity(reader,entityResolver);break;case 'A':this.processAttList(reader,entityResolver);break;default :XMLUtil.skipTag(reader);}}  }
class C{  public static PatternObserverExpr observer(String namespace,String name,Expression[] parameters){  return new PatternObserverExpr(namespace,name,parameters);}  }
class C{  public void reconnectBlocking(String gateway,String sessionId,int lastSeq){  logger.debug("Trying to reconnect to gateway {}",gateway);  socketAdapter.getWebSocket().disconnect();  if (token == null || !checkTokenBlocking(token)) {    token=requestTokenBlocking();  }  try {    WebSocketFactory factory=new WebSocketFactory();    factory.setSSLContext(SSLContext.getDefault());    socketAdapter=new DiscordWebsocketAdapter(new URI(gateway),this,true,sessionId,lastSeq);  } catch (  URISyntaxException|NoSuchAlgorithmException e) {    logger.warn("Reconnect failed. Please contact the developer!",e);    return;  }  try {    if (!socketAdapter.isReady().get()) {      throw new IllegalStateException("Socket closed before ready packet was received!");    }  } catch (  InterruptedException|ExecutionException e) {    logger.warn("Reconnect failed. Please contact the developer!",e);  }}  }
class C{  public final GF2nPolynomial quotient(GF2nPolynomial b) throws RuntimeException, ArithmeticException {  GF2nPolynomial[] result=new GF2nPolynomial[2];  result=divide(b);  return result[0];}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void save(Tree t,Parser parser,String fileName,String fontName,int fontSize) throws IOException {  List<String> ruleNames=parser != null ? Arrays.asList(parser.getRuleNames()) : null;  save(t,ruleNames,fileName,fontName,fontSize);}  }
class C{  public static GF2Vector syndromeDecode(GF2Vector syndVec,GF2mField field,PolynomialGF2mSmallM gp,PolynomialGF2mSmallM[] sqRootMatrix){  int n=1 << field.getDegree();  GF2Vector errors=new GF2Vector(n);  if (!syndVec.isZero()) {    PolynomialGF2mSmallM syndrome=new PolynomialGF2mSmallM(syndVec.toExtensionFieldVector(field));    PolynomialGF2mSmallM t=syndrome.modInverse(gp);    PolynomialGF2mSmallM tau=t.addMonomial(1);    tau=tau.modSquareRootMatrix(sqRootMatrix);    PolynomialGF2mSmallM[] ab=tau.modPolynomialToFracton(gp);    PolynomialGF2mSmallM a2=ab[0].multiply(ab[0]);    PolynomialGF2mSmallM b2=ab[1].multiply(ab[1]);    PolynomialGF2mSmallM xb2=b2.multWithMonomial(1);    PolynomialGF2mSmallM a2plusXb2=a2.add(xb2);    int headCoeff=a2plusXb2.getHeadCoefficient();    int invHeadCoeff=field.inverse(headCoeff);    PolynomialGF2mSmallM elp=a2plusXb2.multWithElement(invHeadCoeff);    for (int i=0; i < n; i++) {      int z=elp.evaluateAt(i);      if (z == 0) {        errors.setBit(i);      }    }  }  return errors;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.531 -0500",hash_original_method="5F840B47C39798AC1AA2E3C6DCFC9B43",hash_generated_method="83A9877A95611BF082C2348B8392889A") public final void lazySet(long newValue){  value=newValue;}  }
class C{  public Builder extractors(Map<Class,ObjectMapperRsExtractor> extractors){  this.extractors=Maps.copyOf(extractors);  return this;}  }
class C{  protected synchronized void initRMLWrappers(){  Set membersWithThisRegion=DistributedRegion.this.distAdvisor.adviseGeneric();  initPostCreateRegionMembershipListeners(membersWithThisRegion);}  }
class C{  public void seekStart(long offset) throws IOException {  if (_is != null)   _is.getChannel().position(offset);}  }
class C{  public PrintStream remove(PrintStream p){  int index;  if (contains(p)) {    index=m_Streams.indexOf(p);    m_Timestamps.remove(index);    m_Prefixes.remove(index);    return (PrintStream)m_Streams.remove(index);  } else {    return null;  }}  }
class C{  public synchronized final boolean isSizeChanged(){  return sizeChanged;}  }
class C{  public boolean onMouseDown(){  if (enabled && hasVisibleItems) {    element.setClassName(css.menuBarItemSelected());    pressed=true;    actionSelectedHandler.onActionSelected(group);    return true;  }  return false;}  }
class C{  private static void init() throws Exception {  WebserviceTestBase.getMailReader().deleteMails();  setup=new WebserviceTestSetup();  mpService_Operator=ServiceFactory.getDefault().getMarketPlaceService(WebserviceTestBase.getPlatformOperatorKey(),WebserviceTestBase.getPlatformOperatorPassword());  String technologyProviderUserKey=createTechnologyProvider();  accountService_TechnologyProvider=ServiceFactory.getDefault().getAccountService(technologyProviderUserKey,WebserviceTestBase.DEFAULT_PASSWORD);  spService_TechnologyProvider=ServiceFactory.getDefault().getServiceProvisioningService(technologyProviderUserKey,WebserviceTestBase.DEFAULT_PASSWORD);  WebserviceTestBase.getOperator().addCurrency("EUR");  create1Supplier();  create2Marketplaces();  createServicesForMarketplace1(INITIAL_NUMBER_SERVICES + 1);  ServiceProvisioningService sps=spService_SupplierList.get(0);  VOService serviceToDelete=sps.deactivateService(servicesForMarketplace1.get(servicesForMarketplace1.size() - 1));  sps.deleteService(serviceToDelete);  servicesForMarketplace1.remove(servicesForMarketplace1.size() - 1);  System.out.println("Available services after delete: " + servicesForMarketplace1.size());}  }
class C{  public boolean hasDaysGain(){  return hasExtension(DaysGain.class);}  }
class C{  void ensureValidGridBounds(int colCount,int rowCount){  if (gridX <= 0) {    throw new IndexOutOfBoundsException("The column index " + gridX + " must be positive.");  }  if (gridX > colCount) {    throw new IndexOutOfBoundsException("The column index " + gridX + " must be less than or equal to "+ colCount+ ".");  }  if (gridX + gridWidth - 1 > colCount) {    throw new IndexOutOfBoundsException("The grid width " + gridWidth + " must be less than or equal to "+ (colCount - gridX + 1)+ ".");  }  if (gridY <= 0) {    throw new IndexOutOfBoundsException("The row index " + gridY + " must be positive.");  }  if (gridY > rowCount) {    throw new IndexOutOfBoundsException("The row index " + gridY + " must be less than or equal to "+ rowCount+ ".");  }  if (gridY + gridHeight - 1 > rowCount) {    throw new IndexOutOfBoundsException("The grid height " + gridHeight + " must be less than or equal to "+ (rowCount - gridY + 1)+ ".");  }}  }
class C{  public static void logError(Throwable exception,String message,Object... args){  message=MessageFormat.format(message,args);  log(IStatus.ERROR,IStatus.OK,message,exception);}  }
class C{  public ConnectionManager(ConnectionManagerConfiguration configuration) throws Exception {  _configuration=configuration;  if (_configuration == null) {    throw new ConnectionManagerException("Invalid null connection manager configuration.");  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public MUserMail(PO po,int AD_User_ID,EMail mail){  this(po.getCtx(),0,null);  setClientOrg(po);  setAD_User_ID(AD_User_ID);  setSubject(mail.getSubject());  setMailText(mail.getMessageCRLF());  if (mail.isSentOK())   setMessageID(mail.getMessageID()); else {    setMessageID(mail.getSentMsg());    setIsDelivered(ISDELIVERED_No);  }}  }
class C{  public String toString(){  return "NullParameter Type=" + m_type;}  }
class C{  public ClientAuthenticatorException(final String message,final OneDriveErrorCodes code){  this(message,null,code);}  }
class C{  public boolean isHideInPortrait(){  return hideInPortrait;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public static String reverse(String str){  if (str == null) {    return null;  }  return new StringBuilder(str).reverse().toString();}  }
class C{  private void processTest(DeploymentMode depMode) throws Exception {  this.depMode=depMode;  try {    Ignite ignite1=startGrid(1);    startGrid(2);    long res=ignite1.compute().execute(FactorialTask.class,3L);    assert res == factorial(3);    res=ignite1.compute().execute(FactorialTask.class,3L);    assert res == factorial(3);  }  finally {    stopGrid(2);    stopGrid(1);  }}  }
class C{  public Long(long value){}  }
class C{  public static void launchExplorer(File file){  try {    Launcher.launchExplorer(file);  } catch (  SecurityException e) {    showError(I18n.tr("FrostWire will not launch the specified file for security reasons."));  }catch (  LaunchException e) {    GUIMediator.showError(I18n.tr("FrostWire could not launch the specified file.\n\nExecuted command: {0}.",StringUtils.explode(e.getCommand()," ")));  }catch (  IOException e) {    showError(I18n.tr("FrostWire could not launch the specified file."));  }}  }
class C{  private Delegate createDelegate(final String delegateName,final String configString) throws ValidationException {  JsonObject delegateObject=new JsonObject(configString);  Set<HttpMethod> methods=new HashSet<>();  delegateObject.getJsonArray(METHODS).forEach(null);  Pattern pattern;  try {    pattern=Pattern.compile(delegateObject.getString(PATTERN));  } catch (  Exception e) {    throw new ValidationException("Could not parse pattern [" + delegateObject.getString(PATTERN) + "] of  delegate "+ delegateName,e);  }  List<JsonObject> requests=new ArrayList<>();  for (int i=0; i < delegateObject.getJsonArray(REQUESTS).size(); i++) {    if (LOG.isTraceEnabled()) {      LOG.trace("request of [{}] #: {}",delegateName,i);    }    requests.add((JsonObject)delegateObject.getJsonArray(REQUESTS).getValue(i));  }  return new Delegate(monitoringHandler,selfClient,delegateName,pattern,methods,requests);}  }
class C{  public boolean isTaggingEnabled(){  return taggingEnabled;}  }
class C{  public boolean isOnlyCurrentRows(){  return m_vo.onlyCurrentRows;}  }
class C{  @Override protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder enc){  super.initialize(type,oldInstance,newInstance,enc);  if (type != oldInstance.getClass()) {    return;  }  BeanInfo info=null;  try {    info=Introspector.getBeanInfo(type);  } catch (  IntrospectionException ex) {    enc.getExceptionListener().exceptionThrown(ex);    return;  }  PropertyDescriptor[] pds=info.getPropertyDescriptors();  Method getter, setter;  for (int i=0; i < pds.length; i++) {    if (Boolean.TRUE.equals(pds[i].getValue("transient"))) {      continue;    }    getter=pds[i].getReadMethod();    setter=pds[i].getWriteMethod();    if (getter == null || setter == null) {      continue;    }    Expression getterExp=new Expression(oldInstance,getter.getName(),null);    try {      Object oldVal=getterExp.getValue();      enc.writeExpression(getterExp);      Object targetVal=enc.get(oldVal);      Object newVal=new Expression(newInstance,getter.getName(),null).getValue();      if (targetVal == null ? (newVal != null && oldVal == null) : targetVal != newVal && !targetVal.equals(newVal)) {        enc.writeStatement(new Statement(oldInstance,setter.getName(),new Object[]{oldVal}));      }    } catch (    Exception ex) {      enc.getExceptionListener().exceptionThrown(ex);    }  }}  }
class C{  public void testRunToEventId() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  Future<Pipeline> future=pipeline.shutdownAfterEventId("5");  startAndAssertEventsApplied(pipeline,future);  pipeline.release(runtime);}  }
class C{  protected void test(String algorithmName) throws IOException {  Problem problem=ProblemFactory.getInstance().getProblem("DTLZ2_2");  long seed=PRNG.getRandom().nextLong();  PRNG.setSeed(seed);  Algorithm algorithm=AlgorithmFactory.getInstance().getAlgorithm(algorithmName,new Properties(),problem);  for (int i=0; i < N; i++) {    if (algorithm instanceof EvolutionaryAlgorithm) {      Population population=((EvolutionaryAlgorithm)algorithm).getPopulation();      if (population instanceof NondominatedSortingPopulation) {        ((NondominatedSortingPopulation)population).update();      }    }    algorithm.step();  }  NondominatedPopulation normalResult=algorithm.getResult();  File file=TestUtils.createTempFile();  Checkpoints checkpoints=null;  PRNG.setSeed(seed);  for (int i=0; i < N; i++) {    checkpoints=new Checkpoints(AlgorithmFactory.getInstance().getAlgorithm(algorithmName,new Properties(),problem),file,0);    checkpoints.step();  }  NondominatedPopulation checkpointResult=checkpoints.getResult();  TestUtils.assertEquals(normalResult,checkpointResult);}  }
class C{  public boolean isValidOffset(final long offset){  if (offset < 0) {    return false;  }  return BigInteger.valueOf(offset).compareTo(BigInteger.valueOf(virtualSize)) < 0;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  protected double achievementScalarizingFunction(Solution solution,double[] weights){  double result=Double.NEGATIVE_INFINITY;  double[] objectives=(double[])solution.getAttribute(NORMALIZED_OBJECTIVES);  for (int i=0; i < solution.getNumberOfObjectives(); i++) {    result=Math.max(result,objectives[i] / weights[i]);  }  return result;}  }
class C{  public AsyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  public String localName(){  return theLocalName;}  }
class C{  void appendEndElement(){  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,NULL);  previousSibling=currentParent;  nodes.readSlot(currentParent,gotslot);  currentParent=gotslot[1] & 0xFFFF;  previousSiblingWasParent=true;}  }
class C{  public void await() throws InterruptedException {  Thread t=Thread.currentThread();  if (!ownerAccess.compareAndSet(this,null,t)) {    throw new IllegalStateException("A second thread tried to acquire a signal barrier that is already owned.");  }  LockSupport.park(this);  ownerAccess.compareAndSet(this,t,null);  if (t.isInterrupted())   throw new InterruptedException();}  }
class C{  public YearMonth withMonthOfYear(int monthOfYear){  int[] newValues=getValues();  newValues=getChronology().monthOfYear().set(this,MONTH_OF_YEAR,newValues,monthOfYear);  return new YearMonth(this,newValues);}  }
class C{  public FlowRadioGroup(Context context,AttributeSet attrs){  super(context,attrs);  init();}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public boolean forEach(TDoubleProcedure procedure){  double[] set=_set;  Object[] values=_values;  for (int i=set.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public void onFailure(R result,Throwable failure,ExecutionContext context){}  }
class C{  public static void stringToGsm8BitUnpackedField(String s,byte dest[],int offset,int length){  int outByteIndex=offset;  SparseIntArray charToLanguageTable=sCharsToGsmTables[0];  SparseIntArray charToShiftTable=sCharsToShiftTables[0];  for (int i=0, sz=s.length(); i < sz && (outByteIndex - offset) < length; i++) {    char c=s.charAt(i);    int v=charToLanguageTable.get(c,-1);    if (v == -1) {      v=charToShiftTable.get(c,-1);      if (v == -1) {        v=charToLanguageTable.get(' ',' ');      } else {        if (!(outByteIndex + 1 - offset < length)) {          break;        }        dest[outByteIndex++]=GSM_EXTENDED_ESCAPE;      }    }    dest[outByteIndex++]=(byte)v;  }  while ((outByteIndex - offset) < length) {    dest[outByteIndex++]=(byte)0xff;  }}  }
class C{  public ODataTokenList tokenize() throws IllegalArgumentException {  this.curPosition=0;  int oldPosition;  char curCharacter;  String token="";  while (this.curPosition < this.expressionLength) {    oldPosition=this.curPosition;    curCharacter=this.expression.charAt(this.curPosition);switch (curCharacter) {case ' ':      eatWhiteSpaces(curCharacter);    break;case '(':  this.tokens.appendODataToken(this.curPosition,ODataTokenKind.OPENPAREN,curCharacter);this.curPosition=this.curPosition + 1;break;case ')':this.tokens.appendODataToken(this.curPosition,ODataTokenKind.CLOSEPAREN,curCharacter);this.curPosition=this.curPosition + 1;break;case '\'':token="";readLiteral(curCharacter);break;case ',':this.tokens.appendODataToken(oldPosition,ODataTokenKind.COMMA,curCharacter);this.curPosition=this.curPosition + 1;break;case '=':case '?':this.curPosition=this.curPosition + 1;this.tokens.appendODataToken(oldPosition,ODataTokenKind.SYMBOL,curCharacter);break;default :String rem_expr=this.expression.substring(this.curPosition);boolean isBinary=checkForBinary(oldPosition,rem_expr);if (isBinary) {break;}boolean isAndOr=checkForAndOrOperator(oldPosition,rem_expr);if (isAndOr) {break;}boolean isBoolean=checkForBoolean(oldPosition,rem_expr);if (isBoolean) {break;}boolean isLiteral=checkForLiteral(oldPosition,curCharacter,rem_expr);if (isLiteral) {break;}token=Character.toString(curCharacter);throw new IllegalArgumentException("Unknown character: " + oldPosition + ' '+ token+ ' '+ this.expression);}}return this.tokens;}  }
class C{  public void removeConnection(Connection connection){  connections.remove(connection.handle());  persistence.deleteConnection(connection);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(NumbersTest.class);}  }
class C{  public void enable() throws IOException {  if (isOptOut()) {    configuration.getCategory(Configuration.CATEGORY_GENERAL).get("opt-out").set("false");    configuration.save();  }  FMLCommonHandler.instance().bus().register(this);}  }
class C{  public void layoutContainer(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Rectangle availR=scrollPane.getBounds();  availR.x=availR.y=0;  Insets insets=parent.getInsets();  availR.x=insets.left;  availR.y=insets.top;  availR.width-=insets.left + insets.right;  availR.height-=insets.top + insets.bottom;  boolean leftToRight=SwingUtilities.isLeftToRight(scrollPane);  Rectangle colHeadR=new Rectangle(0,availR.y,0,0);  if ((colHead != null) && (colHead.isVisible())) {    int colHeadHeight=Math.min(availR.height,colHead.getPreferredSize().height);    colHeadR.height=colHeadHeight;    availR.y+=colHeadHeight;    availR.height-=colHeadHeight;  }  Rectangle rowHeadR=new Rectangle(0,0,0,0);  if ((rowHead != null) && (rowHead.isVisible())) {    int rowHeadWidth=Math.min(availR.width,rowHead.getPreferredSize().width);    rowHeadR.width=rowHeadWidth;    availR.width-=rowHeadWidth;    if (leftToRight) {      rowHeadR.x=availR.x;      availR.x+=rowHeadWidth;    } else {      rowHeadR.x=availR.x + availR.width;    }  }  Border viewportBorder=scrollPane.getViewportBorder();  Insets vpbInsets;  if (viewportBorder != null) {    vpbInsets=viewportBorder.getBorderInsets(parent);    availR.x+=vpbInsets.left;    availR.y+=vpbInsets.top;    availR.width-=vpbInsets.left + vpbInsets.right;    availR.height-=vpbInsets.top + vpbInsets.bottom;  } else {    vpbInsets=new Insets(0,0,0,0);  }  Component view=(viewport != null) ? viewport.getView() : null;  Dimension viewPrefSize=(view != null) ? view.getPreferredSize() : new Dimension(0,0);  Dimension extentSize=(viewport != null) ? viewport.toViewCoordinates(availR.getSize()) : new Dimension(0,0);  boolean viewTracksViewportWidth=false;  boolean viewTracksViewportHeight=false;  boolean isEmpty=(availR.width < 0 || availR.height < 0);  Scrollable sv;  if (!isEmpty && view instanceof Scrollable) {    sv=(Scrollable)view;    viewTracksViewportWidth=sv.getScrollableTracksViewportWidth();    viewTracksViewportHeight=sv.getScrollableTracksViewportHeight();  } else {    sv=null;  }  Rectangle vsbR=new Rectangle(0,availR.y - vpbInsets.top,0,0);  boolean vsbNeeded;  if (isEmpty) {    vsbNeeded=false;  } else   if (vsbPolicy == VERTICAL_SCROLLBAR_ALWAYS) {    vsbNeeded=true;  } else   if (vsbPolicy == VERTICAL_SCROLLBAR_NEVER) {    vsbNeeded=false;  } else {    vsbNeeded=!viewTracksViewportHeight && (viewPrefSize.height > extentSize.height);  }  if ((vsb != null) && vsbNeeded) {    adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);    extentSize=viewport.toViewCoordinates(availR.getSize());  }  Rectangle hsbR=new Rectangle(availR.x - vpbInsets.left,0,0,0);  boolean hsbNeeded;  if (isEmpty) {    hsbNeeded=false;  } else   if (hsbPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {    hsbNeeded=true;  } else   if (hsbPolicy == HORIZONTAL_SCROLLBAR_NEVER) {    hsbNeeded=false;  } else {    hsbNeeded=!viewTracksViewportWidth && (viewPrefSize.width > extentSize.width);  }  if ((hsb != null) && hsbNeeded) {    adjustForHSB(true,availR,hsbR,vpbInsets);    if ((vsb != null) && !vsbNeeded && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {      extentSize=viewport.toViewCoordinates(availR.getSize());      vsbNeeded=viewPrefSize.height > extentSize.height;      if (vsbNeeded) {        adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);      }    }  }  if (viewport != null) {    viewport.setBounds(availR);    if (sv != null) {      extentSize=viewport.toViewCoordinates(availR.getSize());      boolean oldHSBNeeded=hsbNeeded;      boolean oldVSBNeeded=vsbNeeded;      viewTracksViewportWidth=sv.getScrollableTracksViewportWidth();      viewTracksViewportHeight=sv.getScrollableTracksViewportHeight();      if (vsb != null && vsbPolicy == VERTICAL_SCROLLBAR_AS_NEEDED) {        boolean newVSBNeeded=!viewTracksViewportHeight && (viewPrefSize.height > extentSize.height);        if (newVSBNeeded != vsbNeeded) {          vsbNeeded=newVSBNeeded;          adjustForVSB(vsbNeeded,availR,vsbR,vpbInsets,leftToRight);          extentSize=viewport.toViewCoordinates(availR.getSize());        }      }      if (hsb != null && hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED) {        boolean newHSBbNeeded=!viewTracksViewportWidth && (viewPrefSize.width > extentSize.width);        if (newHSBbNeeded != hsbNeeded) {          hsbNeeded=newHSBbNeeded;          adjustForHSB(hsbNeeded,availR,hsbR,vpbInsets);          if ((vsb != null) && !vsbNeeded && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {            extentSize=viewport.toViewCoordinates(availR.getSize());            vsbNeeded=viewPrefSize.height > extentSize.height;            if (vsbNeeded) {              adjustForVSB(true,availR,vsbR,vpbInsets,leftToRight);            }          }        }      }      if (oldHSBNeeded != hsbNeeded || oldVSBNeeded != vsbNeeded) {        viewport.setBounds(availR);      }    }  }  vsbR.height=availR.height + vpbInsets.top + vpbInsets.bottom;  hsbR.width=availR.width + vpbInsets.left + vpbInsets.right;  rowHeadR.height=availR.height + vpbInsets.top + vpbInsets.bottom;  rowHeadR.y=availR.y - vpbInsets.top;  colHeadR.width=availR.width + vpbInsets.left + vpbInsets.right;  colHeadR.x=availR.x - vpbInsets.left;  if (rowHead != null) {    rowHead.setBounds(rowHeadR);  }  if (colHead != null) {    colHead.setBounds(colHeadR);  }  if (vsb != null) {    if (vsbNeeded) {      if (colHead != null && UIManager.getBoolean("ScrollPane.fillUpperCorner")) {        if ((leftToRight && upperRight == null) || (!leftToRight && upperLeft == null)) {          vsbR.y=colHeadR.y;          vsbR.height+=colHeadR.height;        }      }      vsb.setVisible(true);      vsb.setBounds(vsbR);    } else {      vsb.setVisible(false);    }  }  if (hsb != null) {    if (hsbNeeded) {      if (rowHead != null && UIManager.getBoolean("ScrollPane.fillLowerCorner")) {        if ((leftToRight && lowerLeft == null) || (!leftToRight && lowerRight == null)) {          if (leftToRight) {            hsbR.x=rowHeadR.x;          }          hsbR.width+=rowHeadR.width;        }      }      hsb.setVisible(true);      hsb.setBounds(hsbR);    } else {      hsb.setVisible(false);    }  }  if (lowerLeft != null) {    lowerLeft.setBounds(leftToRight ? rowHeadR.x : vsbR.x,hsbR.y,leftToRight ? rowHeadR.width : vsbR.width,hsbR.height);  }  if (lowerRight != null) {    lowerRight.setBounds(leftToRight ? vsbR.x : rowHeadR.x,hsbR.y,leftToRight ? vsbR.width : rowHeadR.width,hsbR.height);  }  if (upperLeft != null) {    upperLeft.setBounds(leftToRight ? rowHeadR.x : vsbR.x,colHeadR.y,leftToRight ? rowHeadR.width : vsbR.width,colHeadR.height);  }  if (upperRight != null) {    upperRight.setBounds(leftToRight ? vsbR.x : rowHeadR.x,colHeadR.y,leftToRight ? vsbR.width : rowHeadR.width,colHeadR.height);  }}  }
class C{  private void verifyResult(Subscription subscription,BaseResult result) throws TechnicalServiceOperationException {  TechnicalServiceOperationException e=null;  String msg="";  if (result == null) {    msg="The webservice call returned null";    e=new TechnicalServiceOperationException(msg,new Object[]{subscription.getSubscriptionId(),"null"});    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_TECH_SERVICE_WS_NULL,subscription.getSubscriptionId());  } else   if (result.getRc() != RETURN_CODE_OK) {    msg="The webservice call returned the error code: " + result.getRc();    e=new TechnicalServiceOperationException(msg,new Object[]{subscription.getSubscriptionId(),result.getDesc()});    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_TECH_SERVICE_WS_ERROR_CODE,subscription.getSubscriptionId(),String.valueOf(result.getRc()),result.getDesc());  }  if (e != null) {    throw e;  }}  }
class C{  public static int extractHighSignedNibble(int value){  return (value << 24) >> 28;}  }
class C{  public void shutdownMessageReceived(InternalDistributedMember id,String reason){  if (logger.isDebugEnabled()) {    logger.debug("Membership: recording shutdown status of {}",id);  }synchronized (this.shutdownMembers) {    this.shutdownMembers.put(id,id);    services.getHealthMonitor().memberShutdown(id,reason);    services.getJoinLeave().memberShutdown(id,reason);  }}  }
class C{  private void init(){  setResizable(true);  setMaximizable(true);  setIconifiable(true);  setClosable(true);  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);  addInternalFrameListener(new WindowFrameListener());}  }
class C{  private void process(JsonParser jsonParser) throws IOException, ODataUnmarshallingException {  if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {    LOG.info("Starting to parse {} token",jsonParser.getCurrentName());    String key=jsonParser.getCurrentName();    jsonParser.nextToken();    JsonToken token=jsonParser.getCurrentToken();    if (token == JsonToken.START_ARRAY) {      if (JsonConstants.VALUE.equals(key)) {        throw new ODataUnmarshallingException("Feed is not supported");      }      values.put(key,getCollectionValue(jsonParser));    } else     if (token == JsonToken.START_OBJECT) {      values.put(key,getEmbeddedObject(jsonParser));    } else {      if (token.equals(JsonToken.VALUE_NULL)) {        values.put(key,null);      } else {        values.put(key,jsonParser.getText());      }    }  }}  }
class C{  public ImageWarp(int[] pix,int width,int height){  this(pix,width,height,LatLonGCT.INSTANCE,new DataBounds(-180.0,-90.0,180.0,90.0));}  }
class C{  private Mailbox loadMailbox(MailboxSession session,File mailboxFile,MailboxPath mailboxPath) throws MailboxException {  MaildirFolder folder=new MaildirFolder(mailboxFile.getAbsolutePath(),mailboxPath,locker);  folder.setMessageNameStrictParse(isMessageNameStrictParse());  try {    Mailbox loadedMailbox=new SimpleMailbox(mailboxPath,folder.getUidValidity());    loadedMailbox.setACL(folder.getACL(session));    return loadedMailbox;  } catch (  IOException e) {    throw new MailboxException("Unable to load Mailbox " + mailboxPath,e);  }}  }
class C{  public void syncTraktMovieWatched(){  if (!isEnabled()) {    return;  }  syncTraktMovieWatched(MovieList.getInstance().getMovies());}  }
class C{  public MigrationInfo[] outOfOrder(){  List<MigrationInfo> outOfOrderMigrations=new ArrayList<MigrationInfo>();  for (  MigrationInfo migrationInfo : migrationInfos) {    if (migrationInfo.getState() == MigrationState.OUT_OF_ORDER) {      outOfOrderMigrations.add(migrationInfo);    }  }  return outOfOrderMigrations.toArray(new MigrationInfo[outOfOrderMigrations.size()]);}  }
class C{  public boolean eventGeneratable(EventSetDescriptor esd){  String eventName=esd.getName();  return eventGeneratable(eventName);}  }
class C{  public int joinElection(ElectionContext context,boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException {  context.joinedElectionFired();  final String shardsElectZkPath=context.electionPath + LeaderElector.ELECTION_NODE;  long sessionId=zkClient.getSolrZooKeeper().getSessionId();  String id=sessionId + "-" + context.id;  String leaderSeqPath=null;  boolean cont=true;  int tries=0;  while (cont) {    try {      if (joinAtHead) {        log.debug("Node {} trying to join election at the head",id);        List<String> nodes=OverseerTaskProcessor.getSortedElectionNodes(zkClient,shardsElectZkPath);        if (nodes.size() < 2) {          leaderSeqPath=zkClient.create(shardsElectZkPath + "/" + id+ "-n_",null,CreateMode.EPHEMERAL_SEQUENTIAL,false);        } else {          String firstInLine=nodes.get(1);          log.debug("The current head: {}",firstInLine);          Matcher m=LEADER_SEQ.matcher(firstInLine);          if (!m.matches()) {            throw new IllegalStateException("Could not find regex match in:" + firstInLine);          }          leaderSeqPath=shardsElectZkPath + "/" + id+ "-n_"+ m.group(1);          zkClient.create(leaderSeqPath,null,CreateMode.EPHEMERAL,false);        }      } else {        leaderSeqPath=zkClient.create(shardsElectZkPath + "/" + id+ "-n_",null,CreateMode.EPHEMERAL_SEQUENTIAL,false);      }      log.debug("Joined leadership election with path: {}",leaderSeqPath);      context.leaderSeqPath=leaderSeqPath;      cont=false;    } catch (    ConnectionLossException e) {      List<String> entries=zkClient.getChildren(shardsElectZkPath,null,true);      boolean foundId=false;      for (      String entry : entries) {        String nodeId=getNodeId(entry);        if (id.equals(nodeId)) {          foundId=true;          break;        }      }      if (!foundId) {        cont=true;        if (tries++ > 20) {          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);        }        try {          Thread.sleep(50);        } catch (        InterruptedException e2) {          Thread.currentThread().interrupt();        }      }    }catch (    KeeperException.NoNodeException e) {      if (tries++ > 20) {        context=null;        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,"",e);      }      cont=true;      try {        Thread.sleep(50);      } catch (      InterruptedException e2) {        Thread.currentThread().interrupt();      }    }  }  checkIfIamLeader(context,replacement);  return getSeq(context.leaderSeqPath);}  }
class C{  public FastHexaObjectGridPortrayal2D(boolean immutableField){  setImmutableField(immutableField);}  }
class C{  public StaggeredDifferentiator(int N,double delta){  super(1,N);  bands[0][0]=1.0 / (2 * N);  bands[0][1]=1.0;  this.delta=delta;  generateCoefficients();}  }
class C{  public void releaseSession(int handle){  CanMessage msg=new CanMessage(2,tc.getCanid());  msg.setOpCode(CbusConstants.CBUS_KLOC);  msg.setElement(1,handle);  log.debug("Release session handle " + handle);  tc.sendCanMessage(msg,null);}  }
class C{  public static InternalSSLKey load() throws Exception {  Path file=Paths.get(SystemProperties.getConfPath(),KEY_FILE_NAME);  if (Files.exists(file)) {    KeyStore ks=loadPkcs12KeyStore(file.toFile(),KEY_PASSWORD);    PrivateKey key=(PrivateKey)ks.getKey(KEY_ALIAS,KEY_PASSWORD);    if (key == null) {      throw new CodedException(X_INTERNAL_ERROR,"Could not get key from '%s'",file);    }    X509Certificate cert=(X509Certificate)ks.getCertificate(KEY_ALIAS);    if (cert == null) {      throw new CodedException(X_INTERNAL_ERROR,"Could not get certificate from '%s'",file);    }    return new InternalSSLKey(key,cert);  }  return null;}  }
class C{  public static double root(double a,double b,Function f,double... args){  return root(1e-15,1000,a,b,0,f,args);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.TYPE_TYPE_REF__TYPE_ARG:    setTypeArg((TypeArgument)null);  return;case TypeRefsPackage.TYPE_TYPE_REF__CONSTRUCTOR_REF:setConstructorRef(CONSTRUCTOR_REF_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void clear(){  this.keys.clear();}  }
class C{  private void writeEntityContainer(EntityContainer entityContainer) throws XMLStreamException {  xmlWriter.writeStartElement(ENTITY_CONTAINER);  xmlWriter.writeAttribute(NAME,entityContainer.getName());  for (  EntitySet entitySet : entityContainer.getEntitySets()) {    entitySetWriter.write(entitySet);  }  for (  Singleton singleton : entityContainer.getSingletons()) {    singletonWriter.write(singleton);  }  xmlWriter.writeEndElement();}  }
class C{  public static Class<?> invocationHandlerReturnType(Class<?> type){  if (type == byte.class)   return Byte.class;  if (type == char.class)   return Character.class;  if (type == double.class)   return Double.class;  if (type == float.class)   return Float.class;  if (type == int.class)   return Integer.class;  if (type == long.class)   return Long.class;  if (type == short.class)   return Short.class;  if (type == boolean.class)   return Boolean.class;  return type;}  }
class C{  @Override public void ambientLight(float r,float g,float b){  ambientLight(r,g,b,0,0,0);}  }
class C{  public ITurnOrdered nextEvenElement(){  return this.getEvenEnum().nextElement();}  }
class C{  public String undo(){  if (!canUndo()) {    return "";  }  UndoAction undoAction=m_undoStack.get(m_nCurrentEditAction);  m_bNeedsUndoAction=false;  undoAction.undo();  m_bNeedsUndoAction=true;  m_nCurrentEditAction--;  return undoAction.getUndoMsg();}  }
class C{  public void clearActors(){  actors.clear();}  }
class C{  private String detectVersion() throws NodeJsDebuggerException {  NodeJsDebugCommand<String> command=createCommand("process.version",new NodeJsOutputRegExpParser(PROCESS_VERSION_COMMAND_OUTPUT_PATTERN));  return doExecute(command);}  }
class C{  private void addCertificateCandidates(X509Certificate userCert,Collection<Object> certCollection) throws CertificatePathBuildingException {  certCollection.add(userCert);  try {    Enumeration<String> certAliases=this.trustStore.aliases();    while (certAliases.hasMoreElements()) {      String alias=certAliases.nextElement();      certCollection.add(this.trustStore.getCertificate(alias));    }  } catch (  KeyStoreException e) {    throw new CertificatePathBuildingException("Bad trustStore!",e);  }}  }
class C{  public static boolean isValidFolderNameForPackage(String folderName,String sourceLevel,String complianceLevel){  return JavaConventions.validateIdentifier(folderName,sourceLevel,complianceLevel).getSeverity() != IStatus.ERROR;}  }
class C{  private void onDuplicatesFound(SelectedItems selectedItems,StringBuffer debugMessage){  if (debugMessage != null) {    Log.w(Global.LOG_CONTEXT,mDebugPrefix + debugMessage);  }  if (selectedItems != null) {    QueryParameter query=new QueryParameter();    FotoSql.setWhereSelectionPks(query,selectedItems);    final Activity activity=getActivity();    if (activity != null) {      int delCount=0;      String sqlWhere=query.toAndroidWhere();      try {        delCount=FotoSql.deleteMedia(activity.getContentResolver(),sqlWhere,null,true);      } catch (      Exception ex) {        Log.w(Global.LOG_CONTEXT,"deleteMedia via update failed for 'where " + sqlWhere + "'.");      }      if (debugMessage != null) {        Log.w(Global.LOG_CONTEXT,mDebugPrefix + " deleted " + delCount+ " duplicates\n\tDELETE ... WHERE "+ sqlWhere);      }      if (delCount > 0) {        requery("after delete duplicates");      }    }  }}  }
class C{  public boolean await(long timeout,TimeUnit timeUnit) throws InterruptedException {  return synchronizer.await(timeout,timeUnit);}  }
class C{  public static byte[] secureRandomBytes(int len){  if (len <= 0) {    len=1;  }  byte[] buff=new byte[len];  SecureRandom sr=getSecureRandom();synchronized (sr) {    sr.nextBytes(buff);  }  return buff;}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {  }}  }
class C{  public FieldSortBuilder sortMode(String sortMode){  this.sortMode=sortMode;  return this;}  }
class C{  protected void persistTimestampRecord(Timestamper.TimestampSucceeded message,TimestampRecord timestampRecord) throws Exception {  logRecordManager.saveTimestampRecord(timestampRecord,message.getMessageRecords(),message.getHashChains());}  }
class C{  public Cluster findClusterByNameAndDatacenter(URI datacenterId,String name,boolean activeOnly){  List<NamedElement> clusters=findIdsByDatacenter(datacenterId);  Iterator<NamedElement> clusterIt=clusters.iterator();  while (clusterIt.hasNext()) {    Cluster cluster=findById(clusterIt.next().getId());    if (cluster != null && cluster.getLabel().equalsIgnoreCase(name)) {      return cluster;    }  }  return null;}  }
class C{  public static float[] values(Float[] array){  float[] dest=new float[array.length];  for (int i=0; i < array.length; i++) {    Float v=array[i];    if (v != null) {      dest[i]=v.floatValue();    }  }  return dest;}  }
class C{  public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  public Measurement convert(Reading r,Measurement last){  if (last != null) {    this.Xt=last.getX();    this.Yt=last.getY();    this.Zt=last.getZ();  }  if (this.Xt > 9.E99) {    this.Xt=0;  }  if (this.Yt > 9.E99) {    this.Yt=0;  }  if (this.Zt > 9.E99) {    this.Zt=0;  }  return convert(r);}  }
class C{  public static int hashCode(Object[] field){  int result=0;  for (int i=0, size=field == null ? 0 : field.length; i < size; i++) {    Object element=field[i];    if (element != null) {      result=31 * result + element.hashCode();    }  }  return result;}  }
class C{  public boolean hasType(){  return super.hasAttribute(TYPE);}  }
class C{  protected static void log2Console(LEVEL level,String tag,String msg,Throwable thr){switch (level) {case VERBOSE:    if (thr == null) {      android.util.Log.v(tag,msg);    } else {      android.util.Log.v(tag,msg,thr);    }  break;case DEBUG:if (thr == null) {  android.util.Log.d(tag,msg);} else {  android.util.Log.d(tag,msg,thr);}break;case INFO:if (thr == null) {android.util.Log.i(tag,msg);} else {android.util.Log.i(tag,msg,thr);}break;case WARN:if (thr == null) {android.util.Log.w(tag,msg);} else if (TextUtils.isEmpty(msg)) {android.util.Log.w(tag,thr);} else {android.util.Log.w(tag,msg,thr);}break;case ERROR:if (thr == null) {android.util.Log.e(tag,msg);} else {android.util.Log.e(tag,msg,thr);}break;case ASSERT:if (thr == null) {android.util.Log.wtf(tag,msg);} else if (TextUtils.isEmpty(msg)) {android.util.Log.wtf(tag,thr);} else {android.util.Log.wtf(tag,msg,thr);}break;default :break;}}  }
class C{  public boolean pushAutomator2Device(){  InputStream io=AbstractDevice.class.getResourceAsStream("automator.jar");  File dest=new File(FileUtils.getTempDirectory(),"automator.jar");  try {    FileUtils.copyInputStreamToFile(io,dest);  } catch (  IOException e) {    e.printStackTrace();  }  CommandLine pushcommand=adbCommand("push ",dest.getAbsolutePath(),"/data/local/tmp/");  String outputPush=executeCommandQuietly(pushcommand);  log.debug("Push automator.jar to device {}",outputPush);  try {    Thread.sleep(1000);  } catch (  InterruptedException ie) {    throw new RuntimeException(ie);  }  return outputPush.contains("KB/s");}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void release(Jedis j,byte[] lockKey,byte[] lockValue){  if (lockValue != null) {    if (Arrays.equals(j.get(lockKey),lockValue)) {      j.del(lockKey);    }  }}  }
class C{  public void tag(int tagType,boolean longTag,byte[] contents) throws IOException {  int length=(contents != null) ? contents.length : 0;  InStream in=(length > 0) ? new InStream(contents) : null;switch (tagType) {case TAG_END:    tagtypes.tagEnd();  break;case TAG_SHOWFRAME:tagtypes.tagShowFrame();break;case TAG_DEFINESHAPE:case TAG_DEFINESHAPE2:case TAG_DEFINESHAPE3:parseDefineShape(tagType,in);break;case TAG_DOACTION:parseDoAction(in);break;case TAG_FREECHARACTER:tagtypes.tagFreeCharacter(in.readUI16());break;case TAG_PLACEOBJECT:parsePlaceObject(in,length);break;case TAG_PLACEOBJECT2:parsePlaceObject2(in);break;case TAG_REMOVEOBJECT:tagtypes.tagRemoveObject(in.readUI16(),in.readUI16());break;case TAG_REMOVEOBJECT2:tagtypes.tagRemoveObject2(in.readUI16());break;case TAG_SETBACKGROUNDCOLOR:tagtypes.tagSetBackgroundColor(new Color(in));break;case TAG_FRAMELABEL:tagtypes.tagFrameLabel(in.readString());break;case TAG_DEFINESPRITE:parseDefineSprite(in);break;case TAG_PROTECT:tagtypes.tagProtect((length > 0) ? in.read(length) : null);break;case TAG_ENABLEDEBUG:tagtypes.tagEnableDebug((length > 0) ? in.read(length) : null);break;case TAG_DEFINEFONT:parseDefineFont(in);break;case TAG_DEFINEFONTINFO:parseFontInfo(in,length);break;case TAG_DEFINEFONT2:case TAG_DEFINEFONT3:parseDefineFont2(in);break;case TAG_DEFINETEXTFIELD:parseDefineTextField(in);break;case TAG_DEFINETEXT:case TAG_DEFINETEXT2:parseDefineText(tagType,in);break;case TAG_DEFINEBUTTON:parseDefineButton(in);break;case TAG_DEFINEBUTTON2:parseDefineButton2(in);break;case TAG_DEFINEBUTTONCXFORM:parseButtonCXForm(in);break;case TAG_EXPORT:parseExport(in);break;case TAG_IMPORT:parseImport(in);break;case TAG_DEFINEQUICKTIMEMOVIE:tagtypes.tagDefineQuickTimeMovie(in.readUI16(),in.readString());break;case TAG_DEFINEBITSJPEG2:parseDefineJPEG2(in,length);break;case TAG_DEFINEBITSLOSSLESS:parseDefineBitsLossless(in,length,false);break;case TAG_DEFINEBITSLOSSLESS2:parseDefineBitsLossless(in,length,true);break;case TAG_DEFINEMORPHSHAPE:parseMorphShape(in);break;case TAG_NAMECHARACTER:tagtypes.tagNameCharacter(contents);break;case TAG_GENERATOR_TEXT:tagtypes.tagGeneratorText(contents);break;case TAG_TEMPLATECOMMAND:tagtypes.tagGeneratorCommand(contents);break;case TAG_FLASHGENERATOR:tagtypes.tagGenerator(contents);break;case TAG_GEN_EXTERNAL_FONT:tagtypes.tagGeneratorFont(contents);break;case TAG_SERIALNUMBER:tagtypes.tagSerialNumber(in.readString());break;case TAG_DEFINESOUND:parseDefineSound(in);break;case TAG_STARTSOUND:parseStartSound(in);break;case TAG_DEFINEBUTTONSOUND:parseDefineButtonSound(in);break;case TAG_SOUNDSTREAMHEAD:parseSoundStreamHead(true,in);break;case TAG_SOUNDSTREAMHEAD2:parseSoundStreamHead(false,in);break;case TAG_SOUNDSTREAMBLOCK:parseSoundStreamBlock(in);break;case TAG_DEFINEBITS:parseDefineBits(in);break;case TAG_JPEGTABLES:if (in != null) parseDefineJPEGTables(in);break;case TAG_DEFINEBITSJPEG3:parseDefineBitsJPEG3(in);break;case TAG_METADATA:if (in != null) parseMetaData(in);break;default :tagtypes.tag(tagType,longTag,contents);break;}}  }
class C{  public boolean saveStream(File targetFile,String sourceLocation){  return saveStream(targetFile,createInputRaw(sourceLocation));}  }
class C{  public static boolean timeStampChanged(String location){synchronized (installLock) {    if (fgHasChanged.contains(location)) {      return true;    }    File file=new File(location);    if (file.exists()) {      if (fgInstallTimeMap == null) {        readInstallInfo();      }      Long stamp=fgInstallTimeMap.get(location);      long fstamp=file.lastModified();      if (stamp != null) {        if (stamp.longValue() == fstamp) {          return false;        }      }      stamp=new Long(fstamp);      fgInstallTimeMap.put(location,stamp);      writeInstallInfo();      fgHasChanged.add(location);      return true;    }  }  return false;}  }
class C{  private static void testParameterAnnotation(Method m,boolean exceptionExpected){  java.lang.annotation.Annotation[][] annotationsArray;  try {    annotationsArray=m.getParameterAnnotations();    if (exceptionExpected) {      System.err.println("Error: Did not get an exception reading annotations on method" + m);      System.err.println("Annotations found: " + java.util.Arrays.toString(annotationsArray));      throw new RuntimeException();    }    if (annotationsArray.length == 0) {      System.err.println("Error: no parameters for " + m);      throw new RuntimeException();    } else {      java.lang.annotation.Annotation[] annotations=annotationsArray[0];      if (annotations.length == 0) {        System.err.println("Error: no annotations on " + m);        throw new RuntimeException();      }    }  } catch (  Throwable t) {    if (!exceptionExpected) {      System.err.println("Error: Got an unexpected exception reading annotations on " + m);      throw new RuntimeException(t);    }  }}  }
class C{  public EquinoxLauncher(File installationRoot){  this.installationRoot=Objects.requireNonNull(installationRoot);  File pluginsDir=new File(installationRoot,"plugins");  Preconditions.checkArgument(FileMisc.dirExists(pluginsDir),"Eclipse launcher must have a plugins directory: %s",installationRoot);  for (  File file : FileMisc.list(pluginsDir)) {    if (file.isFile()) {      String fileName=file.getName();      if (fileName.endsWith(".jar")) {        int verSplit=fileName.lastIndexOf('_');        while (verSplit != -1) {          try {            String name=fileName.substring(0,verSplit);            String version=fileName.substring(verSplit + 1,fileName.length() - ".jar".length());            plugins.put(name,Version.valueOf(version));            break;          } catch (          IllegalArgumentException e) {            verSplit=fileName.lastIndexOf('_',verSplit - 1);          }        }      }    }  }  BiConsumer<String,String> requireBecause=null;  requireBecause.accept("org.eclipse.osgi","running the OSGi platform");  requireBecause.accept("org.eclipse.equinox.common","bundle discovery and installation");  requireBecause.accept("org.eclipse.update.configurator","bundle discovery and installation");  requireBecause.accept("org.eclipse.core.runtime","eclipse application support");  requireBecause.accept("org.eclipse.equinox.ds","OSGi declarative services");}  }
class C{  public MSF4JClient.Builder<T> requestInterceptors(Iterable<RequestInterceptor> requestInterceptors){  this.requestInterceptors.clear();  for (  RequestInterceptor requestInterceptor : requestInterceptors) {    this.requestInterceptors.add(requestInterceptor);  }  return this;}  }
class C{  public static Counter counter(Class<?> namespace,String name){  return new DelegatingCounter(MetricName.named(namespace,name));}  }
class C{  public IMouseState createEdgeExitState(final Edge e,final MouseEvent event){  final CEdgeExitState state=new CEdgeExitState(this,m_graph,e);  m_factory.createEdgeExitAction().execute(state,event);  return state;}  }
class C{  public static boolean belowOrEqual(int a,int b){  return Integer.compareUnsigned(a,b) <= 0;}  }
class C{  public void unsubscribe(String clientHandle,final String topic,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.unsubscribe(topic,invocationContext,activityToken);}  }
class C{  private static void initTestFile(File f,long size) throws Exception {  try (BufferedWriter awriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f),"8859_1"))){    for (int i=0; i < size; i++) {      awriter.write("e");    }  } }  }
class C{  public void hide(){  if (popupMenu != null) {    popupMenu.removeFromParent();    popupMenu=null;  }  if (lockLayer != null) {    lockLayer.removeFromParent();    lockLayer=null;  }}  }
class C{  public final double readDouble(){  return Double.longBitsToDouble(readLong());}  }
class C{  public Option(AttributeSet attr){  this.attr=attr.copyAttributes();  selected=(attr.getAttribute(HTML.Attribute.SELECTED) != null);}  }
class C{  public static byte codonToAmino(final byte c1,final byte c2,final byte c3){  final int x1=c1 << DNA_UNKNOWN_BITS2;  final int x2=c2 << DNA_UNKNOWN_BITS;  final int x=x1 | x2 | c3;  return CODON_TO_AMINO[x];}  }
class C{  public void testResourcesAvailable(){  new LatvianAnalyzer().close();}  }
class C{  public void init(){  Debug.message("eomg","EditableOMRect.init()");  setCanGrabGraphic(false);  setStateMachine(new RectStateMachine(this));  gPoints=new GrabPoint[6];}  }
class C{  public void updateTimeLabel(long sysTime,long offsetTime){  if (timeLabel != null) {    if (sysTime != Long.MAX_VALUE) {      if (realTimeMode) {        Date date=new Date(sysTime);        String timeText=TimePanel.dateFormat_realTime.format(date);        timeLabel.setText(timeText);      } else {        Date date=new Date(sysTime);        DateFormat dateFormat=new SimpleDateFormat("HH:mm:ss");        String sts=dateFormat.format(date);        timeLabel.setText(sts + " (" + convertOffsetTimeToText(offsetTime)+ ")");      }    } else {      timeLabel.setText(NO_TIME_STRING);    }  }}  }
class C{  public SignerInfo toSignerInfo(){  return info;}  }
class C{  private static boolean isUtility(Document doc,int position) throws BadLocationException {  String before=doc.getText(0,position);  String after=doc.getText(position,doc.getLength() - position);  int start=before.lastIndexOf("<model");  int middle=before.lastIndexOf("</model>");  int end=after.indexOf("</model>");  if (start >= 0 && end >= 0 && middle < start) {    String modeltext=before.substring(start,before.length()) + after.substring(0,end);    int countProbs=0;    int countUtils=0;    Pattern p=Pattern.compile("((?:prob)|(?:util))\\=");    Matcher m=p.matcher(modeltext);    while (m.find()) {      if (m.group(1).equals("prob")) {        countProbs++;      } else {        countUtils++;      }    }    return countUtils > countProbs;  }  return false;}  }
class C{  public Iterator<byte[]> keys(final boolean up) throws IOException {  return this.datbase.keys(up,false);}  }
class C{  protected void events(VisorNodeDataCollectorJobResult res,VisorNodeDataCollectorTaskArg arg){  try {    if (checkExplicitTaskMonitoring(ignite))     res.taskMonitoringEnabled(true); else {      res.taskMonitoringEnabled(arg.taskMonitoringEnabled());      if (arg.taskMonitoringEnabled()) {        ConcurrentMap<String,VisorComputeMonitoringHolder> storage=ignite.cluster().nodeLocalMap();        VisorComputeMonitoringHolder holder=storage.get(COMPUTE_MONITORING_HOLDER_KEY);        if (holder == null) {          VisorComputeMonitoringHolder holderNew=new VisorComputeMonitoringHolder();          VisorComputeMonitoringHolder holderOld=storage.putIfAbsent(COMPUTE_MONITORING_HOLDER_KEY,holderNew);          holder=holderOld == null ? holderNew : holderOld;        }        holder.startCollect(ignite,arg.eventsOrderKey());        res.taskMonitoringEnabled(ignite.allEventsUserRecordable(VISOR_TASK_EVTS));      }    }    events0(res,arg.eventsOrderKey(),arg.eventsThrottleCounterKey(),arg.taskMonitoringEnabled());  } catch (  Exception eventsEx) {    res.eventsEx(eventsEx);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.EXPRESSION_LIST__EXPRS:    getExprs().clear();  return;}super.eUnset(featureID);}  }
class C{  public String stem(String s){  if (stem(s.toCharArray(),s.length()))   return toString(); else   return s;}  }
class C{  public synchronized void addActivityManagerListener(ActivityManagerListener l){  listeners.add(l);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private PropertyEditor loadPropertyEditor(Class clz){  PropertyEditor editor=null;  try {    editor=(PropertyEditor)clz.newInstance();  } catch (  Exception e) {    e.printStackTrace();  }  return editor;}  }
class C{  public DataUri(String text){  this("text/plain",text);}  }
class C{  public String globalBlendTipText(){  return "The parameter for global blending. Values are restricted to [0,100].";}  }
class C{  private static boolean isEnforceable(Context context){  Intent intent=new Intent(ACTION_GOOGLE_APPS_LOCATION_SETTINGS);  ResolveInfo resolveInfo=context.getPackageManager().resolveActivity(intent,PackageManager.MATCH_DEFAULT_ONLY);  return resolveInfo != null;}  }
class C{  public PriorityQueue(PriorityQueue<? extends E> c){  getFromPriorityQueue(c);}  }
class C{  public static void openView(SecuritySpecModel inputElement){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  InfoFlowSummaryViewPart view=(InfoFlowSummaryViewPart)activePage.findView(VIEW_ID);  if (view == null) {    try {      view=(InfoFlowSummaryViewPart)activePage.showView(VIEW_ID);    } catch (    PartInitException e) {      e.printStackTrace();    }  }  view.setInputElement(inputElement);}  }
class C{  public final void faceto(final int x,final int y){  final int rndx=x - getX();  final int rndy=y - getY();  if (Math.abs(rndx) > Math.abs(rndy)) {    if (rndx < 0.0) {      setDirection(Direction.LEFT);    } else {      setDirection(Direction.RIGHT);    }  } else {    if (rndy < 0.0) {      setDirection(Direction.UP);    } else {      setDirection(Direction.DOWN);    }  }}  }
class C{  void addNewEntryForNullKey(V value){  entryForNullKey=new HashMapEntry<K,V>(null,value,0,null);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4));}  }
class C{  private Base64(){}  }
class C{  public static void println(Object x){  out.println(x);}  }
class C{  private void mergeCluster(int mergeID){  if (mergeID < gt0Clusters.size()) {    for (int i=0; i < numGTClasses; i++) {      if (mergeMap[i] == mergeID)       mergeMap[i]=workclass;      if (mergeMap[i] > mergeID)       mergeMap[i]--;    }    GTCluster gtcMerge=gt0Clusters.get(mergeID);    if (debug)     System.out.println("Merging C" + gtcMerge.workclass + " into C"+ workclass+ " with Con "+ connections.get(mergeID)+ " / "+ gtcMerge.connections.get(workclass));    mapTrueLabelToWorkLabel.put(gtcMerge.label,workclass);    Iterator iterator=mapTrueLabelToWorkLabel.keySet().iterator();    while (iterator.hasNext()) {      Integer key=(Integer)iterator.next();      int value=mapTrueLabelToWorkLabel.get(key);      if (value == mergeID)       mapTrueLabelToWorkLabel.put(key,workclass);      if (value > mergeID)       mapTrueLabelToWorkLabel.put(key,value - 1);    }    points.addAll(gtcMerge.points);    clusterRepresentations.addAll(gtcMerge.clusterRepresentations);    if (mergedWorkLabels == null) {      mergedWorkLabels=new ArrayList<Integer>();    }    mergedWorkLabels.add(gtcMerge.orgWorkClass);    if (gtcMerge.mergedWorkLabels != null)     mergedWorkLabels.addAll(gtcMerge.mergedWorkLabels);    gt0Clusters.remove(mergeID);    for (int c=mergeID; c < gt0Clusters.size(); c++) {      gt0Clusters.get(c).workclass=c;    }    calculateKnn();    for (int c=0; c < gt0Clusters.size(); c++) {      gt0Clusters.get(c).connections.remove(mergeID);      gt0Clusters.get(c).calculateClusterConnection(workclass,false);      gt0Clusters.get(workclass).calculateClusterConnection(c,false);    }  } else {    System.out.println("Merge indices are not valid");  }}  }
class C{  public double predictSingle(FVec feat,boolean output_margin){  return predictSingle(feat,output_margin,0);}  }
class C{  public double eval(double params[]){  boolean p1=params[0] == 0.0 ? false : true;  boolean p2=params[1] == 0.0 ? false : true;  return (((p1 && p2) == true) ? 1.0 : 0.0);}  }
class C{  public void testBooleanListAsProp() throws Exception {  ObjectMapper m=new ObjectMapper();  String JSON="[\"" + TypedListAsProp.class.getName() + "\",[true, false]]";  JavaType type=TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class,Boolean.class);  TypedListAsProp<Object> result=m.readValue(JSON,type);  assertNotNull(result);  assertEquals(2,result.size());  assertEquals(Boolean.TRUE,result.get(0));  assertEquals(Boolean.FALSE,result.get(1));}  }
class C{  public static Builder builder(){  return new Builder(new PublishRequest());}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=this.getCurrentCandle();    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (this.isThereOpenPosition()) {      _log.info("Strategy complete open position filled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      if (OrderStatus.PARTIALFILLED.equals(this.getOpenPositionOrder().getStatus())) {        if (isRiskViolated(currentCandleItem.getClose(),this.getTradestrategy().getRiskAmount(),this.getOpenPositionOrder().getQuantity(),this.getOpenPositionOrder().getAverageFilledPrice())) {          this.cancelOrder(this.getOpenPositionOrder());        }      }      this.cancel();      return;    }    if (null != openPositionOrderKey && !this.getTradeOrder(openPositionOrderKey).isActive()) {      _log.info("Strategy complete open position cancelled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      updateTradestrategyStatus(TradestrategyStatus.CANCELLED);      this.cancel();      return;    }    if (startPeriod.equals(this.getTradestrategy().getTradingday().getOpen().plusMinutes(this.getTradestrategy().getBarSize() / 60)) && newBar) {      CandleItem prevCandleItem=null;      if (getCurrentCandleCount() > 0) {        prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);      }      if (prevCandleItem.isSide(getTradestrategy().getSide())) {        if ((Side.BOT.equals(getTradestrategy().getSide()) && prevCandleItem.getVwap() < currentCandleItem.getVwap()) || (Side.SLD.equals(getTradestrategy().getSide()) && prevCandleItem.getVwap() > currentCandleItem.getVwap())) {          Money price=new Money(prevCandleItem.getHigh());          Money priceStop=new Money(prevCandleItem.getLow());          String action=Action.BUY;          if (Side.SLD.equals(getTradestrategy().getSide())) {            price=new Money(prevCandleItem.getLow());            priceStop=new Money(prevCandleItem.getHigh());            action=Action.SELL;          }          TradeOrder tradeOrder=createRiskOpenPosition(action,price,priceStop,true,null,null,null,null);          openPositionOrderKey=tradeOrder.getOrderKey();        } else {          _log.info("Rule Vwap 5 min Side Gap bar. Vwap not in direction of side. Symbol: " + getSymbol() + " Time: "+ startPeriod);          if (Side.SLD.equals(getTradestrategy().getSide())) {            this.updateTradestrategyStatus(TradestrategyStatus.GB);          } else {            this.updateTradestrategyStatus(TradestrategyStatus.RB);          }          this.cancel();        }      } else {        _log.info("Rule 5 min Red/Green bar opposite to trade direction. Symbol: " + getSymbol() + " Time: "+ startPeriod);        if (Side.SLD.equals(getTradestrategy().getSide())) {          this.updateTradestrategyStatus(TradestrategyStatus.GB);        } else {          this.updateTradestrategyStatus(TradestrategyStatus.RB);        }        this.cancel();      }    } else     if (!startPeriod.isBefore(TradingCalendar.getDateAtTime(startPeriod,10,30,0))) {      if (!this.isThereOpenPosition() && !TradestrategyStatus.CANCELLED.equals(getTradestrategy().getStatus())) {        this.updateTradestrategyStatus(TradestrategyStatus.TO);        this.cancelAllOrders();        _log.info("Rule 10:30:00 bar, time out unfilled open position Symbol: " + getSymbol() + " Time: "+ startPeriod);      }      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error  runRule exception: " + ex.getMessage(),ex);    error(1,20,"Error  runRule exception: " + ex.getMessage());  }}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  private void processAnsiOsCommand(){  if (ansiOsCommand.charAt(0) != '0' || ansiOsCommand.charAt(1) != ';') {    Logger.log("Ignoring unsupported ANSI OSC sequence: '" + ansiOsCommand + "'");    return;  }}  }
class C{  protected Set<String> generateWidgetCreationForCellByTemplate(SourcePrinter out,C context,JSONObject child,JClassType dataObject,String bindingContextVariable){  HasDataProviderDataBindingProcessor bindingProcessor=createDataBindingProcessor(context,dataObject,bindingContextVariable);  return generateWidgetCreationForCellByTemplate(out,context,child,dataObject,bindingContextVariable,bindingProcessor);}  }
class C{  public boolean isConstructed(byte constructedTag){  if (!isConstructed()) {    return false;  }  return ((tag & 0x01f) == constructedTag);}  }
class C{  public StatusDetail toOk(final String message){  return statusDetail(name,OK,message,details);}  }
class C{  protected boolean isUseIdentityHashCode(){  return useIdentityHashCode;}  }
class C{  public Permutation rightMultiply(Permutation p){  if (p.perm.length != perm.length) {    throw new IllegalArgumentException("length mismatch");  }  Permutation result=new Permutation(perm.length);  for (int i=perm.length - 1; i >= 0; i--) {    result.perm[i]=perm[p.perm[i]];  }  return result;}  }
class C{  private static boolean copyKnownStaticField(Class<?> jdkType,String rvmFieldName,TypeReference rvmFieldType,Offset rvmFieldOffset){  if (classLibrary == "harmony") {    if (jdkType.equals(java.lang.Number.class)) {      throw new Error("Unknown field in java.lang.Number " + rvmFieldName + " "+ rvmFieldType);    } else     if (jdkType.equals(java.lang.Boolean.class)) {      throw new Error("Unknown field in java.lang.Boolean " + rvmFieldName + " "+ rvmFieldType);    } else     if (jdkType.equals(java.lang.Byte.class)) {      if (rvmFieldName.equals("CACHE") && rvmFieldType.isArrayType()) {        Statics.setSlotContents(rvmFieldOffset,new Byte[256]);        return true;      } else {        throw new Error("Unknown field in java.lang.Byte " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Double.class)) {      throw new Error("Unknown field in java.lang.Double " + rvmFieldName + " "+ rvmFieldType);    } else     if (jdkType.equals(java.lang.Float.class)) {      throw new Error("Unknown field in java.lang.Float " + rvmFieldName + " "+ rvmFieldType);    } else     if (jdkType.equals(java.lang.Integer.class)) {      if (rvmFieldName.equals("decimalScale") && rvmFieldType.isArrayType()) {        int[] java_lang_Integer_decimalScale=new int[]{1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1};        Statics.setSlotContents(rvmFieldOffset,java_lang_Integer_decimalScale);        return true;      } else {        throw new Error("Unknown field in java.lang.Integer " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Long.class)) {      throw new Error("Unknown field in java.lang.Long " + rvmFieldName + " "+ rvmFieldType);    } else     if (jdkType.equals(java.lang.Short.class)) {      throw new Error("Unknown field in java.lang.Short " + rvmFieldName + " "+ rvmFieldType);    } else     if (jdkType.equals(java.util.HashMap.class)) {      if (rvmFieldName.equals("DEFAULT_SIZE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,16);        return true;      } else {        throw new Error("Unknown field in java.util.HashMap " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.util.AbstractMap.class)) {      throw new Error("Unknown field in java.util.AbstractMap " + rvmFieldName + " "+ rvmFieldType);    } else     if (jdkType.equals(java.lang.ref.ReferenceQueue.class)) {      if (rvmFieldName.equals("DEFAULT_QUEUE_SIZE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,128);        return true;      } else {        throw new Error("Unknown field in java.lang.ref.ReferenceQueue " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Throwable.class)) {      if (rvmFieldName.equals("zeroLengthStackTrace") && rvmFieldType.isArrayType()) {        Statics.setSlotContents(rvmFieldOffset,new StackTraceElement[0]);        return true;      } else {        throw new Error("Unknown field in java.lang.Throwable " + rvmFieldName + " "+ rvmFieldType);      }    } else {      return false;    }  } else   if (classLibrary == "classpath") {    if (jdkType.equals(java.lang.Number.class)) {      if (rvmFieldName.equals("digits") && rvmFieldType.isArrayType()) {        char[] java_lang_Number_digits=new char[]{'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};        Statics.setSlotContents(rvmFieldOffset,java_lang_Number_digits);        return true;      } else {        throw new Error("Unknown field in java.lang.Number " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Boolean.class)) {      throw new Error("Unknown field in java.lang.Boolean " + rvmFieldName + " "+ rvmFieldType);    } else     if (jdkType.equals(java.lang.Byte.class)) {      if (rvmFieldName.equals("byteCache") && rvmFieldType.isArrayType()) {        Byte[] java_lang_Byte_byteCache=new Byte[256];        for (int i=-128; i < 128; i++) {          Byte value=(byte)i;          BootImageMap.findOrCreateEntry(value);          java_lang_Byte_byteCache[128 + i]=value;        }        Statics.setSlotContents(rvmFieldOffset,java_lang_Byte_byteCache);        return true;      } else       if (rvmFieldName.equals("MIN_CACHE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,-128);        return true;      } else       if (rvmFieldName.equals("MAX_CACHE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,127);        return true;      } else       if (rvmFieldName.equals("SIZE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,8);        return true;      } else {        throw new Error("Unknown field in java.lang.Byte " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Double.class)) {      if (rvmFieldName.equals("ZERO")) {        Statics.setSlotContents(rvmFieldOffset,Double.valueOf(0.0));        return true;      } else       if (rvmFieldName.equals("ONE")) {        Statics.setSlotContents(rvmFieldOffset,Double.valueOf(1.0));        return true;      } else       if (rvmFieldName.equals("SIZE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,64);        return true;      } else {        throw new Error("Unknown field in java.lang.Double " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Float.class)) {      if (rvmFieldName.equals("ZERO")) {        Statics.setSlotContents(rvmFieldOffset,Float.valueOf(0.0f));        return true;      } else       if (rvmFieldName.equals("ONE")) {        Statics.setSlotContents(rvmFieldOffset,Float.valueOf(1.0f));        return true;      } else       if (rvmFieldName.equals("SIZE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,32);        return true;      } else {        throw new Error("Unknown field in java.lang.Float " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Integer.class)) {      if (rvmFieldName.equals("intCache") && rvmFieldType.isArrayType()) {        Integer[] java_lang_Integer_intCache=new Integer[256];        for (int i=-128; i < 128; i++) {          Integer value=i;          java_lang_Integer_intCache[128 + i]=value;        }        Statics.setSlotContents(rvmFieldOffset,java_lang_Integer_intCache);        return true;      } else       if (rvmFieldName.equals("MIN_CACHE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,-128);        return true;      } else       if (rvmFieldName.equals("MAX_CACHE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,127);        return true;      } else       if (rvmFieldName.equals("SIZE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,32);        return true;      } else {        throw new Error("Unknown field in java.lang.Integer " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Long.class)) {      if (rvmFieldName.equals("longCache") && rvmFieldType.isArrayType()) {        Long[] java_lang_Long_longCache=new Long[256];        for (int i=-128; i < 128; i++) {          Long value=(long)i;          BootImageMap.findOrCreateEntry(value);          java_lang_Long_longCache[128 + i]=value;        }        Statics.setSlotContents(rvmFieldOffset,java_lang_Long_longCache);        return true;      } else       if (rvmFieldName.equals("MIN_CACHE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,-128);        return true;      } else       if (rvmFieldName.equals("MAX_CACHE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,127);        return true;      } else       if (rvmFieldName.equals("SIZE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,64);        return true;      } else {        throw new Error("Unknown field in java.lang.Long " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.lang.Short.class)) {      if (rvmFieldName.equals("shortCache") && rvmFieldType.isArrayType()) {        Short[] java_lang_Short_shortCache=new Short[256];        for (short i=-128; i < 128; i++) {          Short value=i;          BootImageMap.findOrCreateEntry(value);          java_lang_Short_shortCache[128 + i]=value;        }        Statics.setSlotContents(rvmFieldOffset,java_lang_Short_shortCache);        return true;      } else       if (rvmFieldName.equals("MIN_CACHE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,-128);        return true;      } else       if (rvmFieldName.equals("MAX_CACHE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,127);        return true;      } else       if (rvmFieldName.equals("SIZE") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,16);        return true;      } else {        throw new Error("Unknown field in java.lang.Short " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.util.HashMap.class)) {      if (rvmFieldName.equals("DEFAULT_CAPACITY") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,11);        return true;      } else       if (rvmFieldName.equals("DEFAULT_LOAD_FACTOR") && rvmFieldType.isFloatType()) {        Statics.setSlotContents(rvmFieldOffset,Float.floatToIntBits(0.75f));        return true;      } else {        throw new Error("Unknown field in java.util.HashMap " + rvmFieldName + " "+ rvmFieldType);      }    } else     if (jdkType.equals(java.util.AbstractMap.class)) {      if (rvmFieldName.equals("KEYS") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,0);        return true;      } else       if (rvmFieldName.equals("VALUES") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,1);        return true;      } else       if (rvmFieldName.equals("ENTRIES") && rvmFieldType.isIntType()) {        Statics.setSlotContents(rvmFieldOffset,2);        return true;      } else {        throw new Error("Unknown field in java.util.AbstractMap " + rvmFieldName + " "+ rvmFieldType);      }    } else {      return false;    }  } else {    throw new Error("Unknown class library: \"" + classLibrary + "\"");  }}  }
class C{  private ContentValues unpackScreen(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  Screen screen=unpackProto(new Screen(),buffer,dataSize);  ContentValues values=new ContentValues();  values.put(WorkspaceScreens._ID,screen.id);  values.put(WorkspaceScreens.SCREEN_RANK,screen.rank);  return values;}  }
class C{  public ClusterIpInfo queryCurrentClusterIpinfo() throws Exception {  return localIpinfo;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public static void putBooleanField(Object obj,long fieldOff,boolean val){  UNSAFE.putBoolean(obj,fieldOff,val);}  }
class C{  public CoapClient create(){  StringBuilder builder=new StringBuilder();  if (scheme != null)   builder.append(scheme).append("://");  builder.append(host).append(":").append(port);  for (  String element : path)   builder.append("/").append(element);  if (query.length > 0)   builder.append("?");  for (int i=0; i < query.length; i++) {    builder.append(query[i]);    if (i < query.length - 1)     builder.append("&");  }  return new CoapClient(builder.toString());}  }
class C{  public void commit(){  txnService.commitTransaction(session);}  }
class C{  private static void chainedTimeSource(){  TimeSource tsNow=new SystemTimeSource();  TimeSource tsMinus1Day=new OffsetTimeSource(tsNow.millis() - DAY_LENGTH_MILLIS,tsNow);  TimeSource tsMinus1DayEst=new EstimatorTimeSource(tsMinus1Day,100,new TriavaNullLogger());  compareTimeSources(SYSTEM_SOURCE_NAME,"Chained",tsNow,tsMinus1DayEst);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.387 -0500",hash_original_method="01E4D9F834B911866303A5B2D2AF3A41",hash_generated_method="22B5BDC7E79E593A8D2FF29BBCDCF246") private final void processMsg(Message msg){  StateInfo curStateInfo=mStateStack[mStateStackTopIndex];  if (mDbg) {    Log.d(TAG,"processMsg: " + curStateInfo.state.getName());  }  while (!curStateInfo.state.processMessage(msg)) {    curStateInfo=curStateInfo.parentStateInfo;    if (curStateInfo == null) {      mSm.unhandledMessage(msg);      if (isQuit(msg)) {        transitionTo(mQuittingState);      }      break;    }    if (mDbg) {      Log.d(TAG,"processMsg: " + curStateInfo.state.getName());    }  }  if (curStateInfo != null) {    State orgState=mStateStack[mStateStackTopIndex].state;    mProcessedMessages.add(msg,curStateInfo.state,orgState);  } else {    mProcessedMessages.add(msg,null,null);  }}  }
class C{  public void removeItemListener(ItemListener l){  listenerList.remove(ItemListener.class,l);}  }
class C{  public void append(char[] text){  if (!isReadOnly()) {    if (text == null || text.length == 0) {      return;    }    int length=getLength();synchronized (this.lock) {      if (this.contents == null)       return;      moveAndResizeGap(length,text.length);      System.arraycopy(text,0,this.contents,length,text.length);      this.gapStart+=text.length;      this.flags|=F_HAS_UNSAVED_CHANGES;    }    notifyChanged(new BufferChangedEvent(this,length,0,new String(text)));  }}  }
class C{  public void install(JTextComponent c){  component=c;  removeAllHighlights();}  }
class C{  private void removeNullValuesFromStringColumn(final String datatableName,final JsonObject column,final Map<String,ResultsetColumnHeaderData> mapColumnNameDefinition){  final Boolean mandatory=(column.has("mandatory")) ? column.get("mandatory").getAsBoolean() : false;  final String name=(column.has("name")) ? column.get("name").getAsString() : "";  final String type=(mapColumnNameDefinition.containsKey(name)) ? mapColumnNameDefinition.get(name).getColumnType() : "";  if (StringUtils.isNotEmpty(type)) {    if (mandatory && stringDataTypes.contains(type.toLowerCase())) {      StringBuilder sqlBuilder=new StringBuilder();      sqlBuilder.append("UPDATE `" + datatableName + "` SET `"+ name+ "` = '' WHERE `"+ name+ "` IS NULL");      this.jdbcTemplate.update(sqlBuilder.toString());    }  }}  }
class C{  public CachedRenderableLayer(Sector coverage,int numLevels){  this.extentTree=new BasicQuadTree<Renderable>(numLevels,coverage,null);}  }
class C{  private boolean consistRosterMatch(NceConsistRosterEntry cre){  if (consistTextField.getText().equals(cre.getConsistNumber()) && locoTextField1.getText().equals(cre.getLoco1DccAddress()) && locoTextField2.getText().equals(cre.getLoco2DccAddress())&& locoTextField3.getText().equals(cre.getLoco3DccAddress())&& locoTextField4.getText().equals(cre.getLoco4DccAddress())&& locoTextField5.getText().equals(cre.getLoco5DccAddress())&& locoTextField6.getText().equals(cre.getLoco6DccAddress())) {    if (newConsist) {      textConRoadName.setText(cre.getRoadName());      textConRoadNumber.setText(cre.getRoadNumber());      textConModel.setText(cre.getModel());      dirButton1.setText(convertDTD(cre.getLoco1Direction()));      dirButton2.setText(convertDTD(cre.getLoco2Direction()));      dirButton3.setText(convertDTD(cre.getLoco3Direction()));      dirButton4.setText(convertDTD(cre.getLoco4Direction()));      dirButton5.setText(convertDTD(cre.getLoco5Direction()));      dirButton6.setText(convertDTD(cre.getLoco6Direction()));    }    return true;  } else {    return false;  }}  }
class C{  public Date parse(String text,String format) throws ParserException {  return parse(text,format,Locale.US);}  }
class C{  protected void onReleaseResources(List<AppEntry> apps){}  }
class C{  public UriParameterMap(){  this(LinkedListMultimap.<String,String>create());}  }
