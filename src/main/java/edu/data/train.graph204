class C{  public ConnectionFailedException(final Throwable thr){  super(thr.getMessage(),thr);}  }
class C{  static ScribeItem newCardScribeItem(Card card){  return new ScribeItem.Builder().setItemType(ScribeItem.TYPE_TWEET).setCardEvent(new ScribeItem.CardEvent(SCRIBE_PROMO_APP_CARD_TYPE)).build();}  }
class C{  public boolean isAnyUser2(){  Object oo=get_Value(COLUMNNAME_AnyUser2);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ServerSession(ObexTransport trans,ServerRequestHandler handler,Authenticator auth) throws IOException {  mAuthenticator=auth;  mTransport=trans;  mInput=mTransport.openInputStream();  mOutput=mTransport.openOutputStream();  mListener=handler;  mMaxPacketLength=256;  mClosed=false;  mProcessThread=new Thread(this);  mProcessThread.start();}  }
class C{  public EpsilonBoxObjectiveComparator(double epsilon){  this.epsilons=new double[]{epsilon};}  }
class C{  public static boolean testDns(){  try {    final DatagramSocket socket=new DatagramSocket();    try {      socket.setSoTimeout(10000);      final byte[] query=buildDnsQuery("www","android","com");      final DatagramPacket queryPacket=new DatagramPacket(query,query.length,InetAddress.parseNumericAddress("8.8.8.8"),53);      socket.send(queryPacket);      final byte[] reply=new byte[query.length];      final DatagramPacket replyPacket=new DatagramPacket(reply,reply.length);      socket.receive(replyPacket);      return true;    }  finally {      socket.close();    }  } catch (  IOException e) {    Log.d(TAG,"error: " + e);  }  return false;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected boolean shouldMove(final ILoadBalancerService loadBalancerService){  if (loadBalancerService == null)   throw new IllegalArgumentException();  final boolean highlyUtilizedService;  try {    final UUID serviceUUID=resourceManager.getDataServiceUUID();    highlyUtilizedService=loadBalancerService.isHighlyUtilizedDataService(serviceUUID);  } catch (  Exception ex) {    log.warn("Could not determine if this data service is highly utilized");    return false;  }  if (!highlyUtilizedService) {    if (log.isInfoEnabled())     log.info("Service is not highly utilized.");    return false;  }  final ResourceScores resourceScores=resourceManager.getResourceScores();  final boolean shouldMove=(resourceScores.percentCPUTime >= resourceManager.movePercentCpuTimeThreshold) || (resourceScores.majorPageFaultsPerSec > 20) || (resourceScores.dataDirBytesFree < Bytes.gigabyte * 5)|| (resourceScores.dataDirBytesFree < Bytes.gigabyte * .5);  return shouldMove;}  }
class C{  public boolean skipSpaces(){  while (this.pos < this.value.length() && this.value.charAt(this.pos) == ' ') {    this.pos++;  }  return this.pos < this.value.length();}  }
class C{  public PluginsInfo info(){  return info;}  }
class C{  public AlertIdWithTimestamp(BigInteger id,Long timestamp){  this.alertId=id;  this.alertEnqueueTime=timestamp;}  }
class C{  public static boolean tryAddAllItemStacksToInventory(IInventory inventory,ItemStack[] items,int startSlot,int slotCount){  int itemsToAdd=0;  int itemsAdded=0;  for (  ItemStack item : items) {    itemsToAdd+=item.stackSize;    itemsAdded+=addItemToInventory(inventory,item,startSlot,slotCount);  }  return itemsToAdd == itemsAdded;}  }
class C{  private void ensureCapacity(int numMappings){  int newCapacity=Collections.roundUpToPowerOfTwo(capacityForInitSize(numMappings));  HashtableEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (newCapacity <= oldCapacity) {    return;  }  rehash();  if (newCapacity == oldCapacity * 2) {    doubleCapacity();    return;  }  HashtableEntry<K,V>[] newTable=makeTable(newCapacity);  if (size != 0) {    int newMask=newCapacity - 1;    for (int i=0; i < oldCapacity; i++) {      for (HashtableEntry<K,V> e=oldTable[i]; e != null; ) {        HashtableEntry<K,V> oldNext=e.next;        int newIndex=e.hash & newMask;        HashtableEntry<K,V> newNext=newTable[newIndex];        newTable[newIndex]=e;        e.next=newNext;        e=oldNext;      }    }  }}  }
class C{  public boolean isIncludeInferred(){  return includeInferred;}  }
class C{  public FunctionScoreQueryBuilder(ScoreFunctionBuilder scoreFunctionBuilder){  if (scoreFunctionBuilder == null) {    throw new IllegalArgumentException("function_score: function must not be null");  }  queryBuilder=null;  this.filters.add(null);  this.scoreFunctions.add(scoreFunctionBuilder);}  }
class C{  public final CC id(String s){  setId(s);  return this;}  }
class C{  public static void trimRootLevelStringFields(Object bean){  if (bean == null) {    return;  }  Field[] fields=bean.getClass().getDeclaredFields();  if (fields == null) {    return;  }  for (  Field f : fields) {    if (f.getType().isPrimitive()) {      continue;    }    if (f.getType().equals(String.class)) {      try {        f.setAccessible(true);        String value=(String)f.get(bean);        f.set(bean,StringUtils.trimToNull(value));      } catch (      IllegalAccessException e) {      }    }  }}  }
class C{  public SendableVoiceMessage build(){  return new SendableVoiceMessage(voice,duration,replyTo,replyMarkup,disableNotification,caption);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_ITEM___TRACE_ENTITY_1:    getTraceEntity_1().clear();  return;case UmplePackage.TRACE_ITEM___PRE_OR_POST_CONDITION_1:getPreOrPostCondition_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static Pagination parseQueryParams(final MultivaluedMap<String,String> queryParams) throws InvalidValueException {  final Map<PaginationKey,Integer> pageData=new HashMap<>();  queryParams.entrySet().forEach(null);  return new Pagination(pageData).evaluate(DEFAULT_PAGE_LIMIT,MAX_PAGE_LIMIT);}  }
class C{  public Builder put(String settingPrefix,String groupName,String[] settings,String[] values) throws SettingsException {  if (settings.length != values.length) {    throw new SettingsException("The settings length must match the value length");  }  for (int i=0; i < settings.length; i++) {    if (values[i] == null) {      continue;    }    put(settingPrefix + "." + groupName+ "."+ settings[i],values[i]);  }  return this;}  }
class C{  public Attribute attribute(String name){  for (int i=0; i < numAttributes(); i++) {    if (attribute(i).name().equals(name)) {      return attribute(i);    }  }  return null;}  }
class C{  public synchronized void cancelConflictingJobs(CopyJob newJob) throws IOException {  for (  CopyJob job : queue) {    if (job.conflicts(newJob)) {      node.message("top: now cancel existing conflicting job=" + job + " due to newJob="+ newJob);      job.cancel("conflicts with new job",null);    }  }}  }
class C{  public void push(@NotNull StatusNotification notification){  stack.push(notification);}  }
class C{  public int read(){  if (position >= document.getLength()) {    return -1;  }  try {    document.getText((int)position,1,segment);    position++;    return segment.array[segment.offset];  } catch (  BadLocationException ble) {    ble.printStackTrace();    return -1;  }}  }
class C{  public boolean isIndexed(){  Object oo=get_Value(COLUMNNAME_IsIndexed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ByteRange valueOf(String string){  if (string.isEmpty()) {    return null;  }  String[] nums=null;  int i=0;  boolean firstMinus=string.charAt(0) == '-';  if (firstMinus) {    string=string.substring(1);  }  while ((i < SPLITS.length) && ((nums == null) || (nums.length != 2))) {    nums=StringUtils.splitByWholeSeparator(string,SPLITS[i++],2);  }  if ((nums == null) || (nums.length != 2)) {    return null;  }  Integer min=DioriteMathUtils.asInt(firstMinus ? ("-" + nums[0]) : nums[0]);  if ((min == null) || (min < Byte.MIN_VALUE)) {    return null;  }  Integer max=DioriteMathUtils.asInt(nums[1]);  if ((max == null) || (max > Byte.MAX_VALUE) || (min > max)) {    return null;  }  return new ByteRange(min.byteValue(),max.byteValue());}  }
class C{  public void showEmpty(int messageRes,View.OnClickListener onClickListener){  if (viewLoading == null) {    throw new NullPointerException("Unable to access Empty View, check if the empty view was initialized.");  } else {    messageRes=messageRes == 0 ? R.string.global_empty_list : messageRes;    viewEmptyMessage.setText(messageRes);    showEmpty(onClickListener);  }}  }
class C{  public static String formatForUI(Calendar today,Calendar date){  if (today.get(Calendar.YEAR) == date.get(Calendar.YEAR)) {    if (today.get(Calendar.DAY_OF_YEAR) == date.get(Calendar.DAY_OF_YEAR)) {      return "Today";    }    return currentYearDateFormat(date.getTimeInMillis());  } else {    return format(date.getTimeInMillis());  }}  }
class C{  public MqttMessage(){  setPayload(new byte[]{});}  }
class C{  public byte[] sign(){  try {    if (md5 != null && md5_hash == null) {      md5_hash=new byte[16];      md5.digest(md5_hash,0,md5_hash.length);    }    if (md5_hash != null) {      if (signature != null) {        signature.update(md5_hash);      } else       if (cipher != null) {        cipher.update(md5_hash);      }    }    if (sha != null && sha_hash == null) {      sha_hash=new byte[20];      sha.digest(sha_hash,0,sha_hash.length);    }    if (sha_hash != null) {      if (signature != null) {        signature.update(sha_hash);      } else       if (cipher != null) {        cipher.update(sha_hash);      }    }    if (signature != null) {      return signature.sign();    } else     if (cipher != null) {      return cipher.doFinal();    }    return EmptyArray.BYTE;  } catch (  DigestException e) {    return EmptyArray.BYTE;  }catch (  SignatureException e) {    return EmptyArray.BYTE;  }catch (  BadPaddingException e) {    return EmptyArray.BYTE;  }catch (  IllegalBlockSizeException e) {    return EmptyArray.BYTE;  }}  }
class C{  public final void yypopStream() throws java.io.IOException {  zzReader.close();  ZzFlexStreamInfo s=(ZzFlexStreamInfo)zzStreams.pop();  zzBuffer=s.zzBuffer;  zzReader=s.zzReader;  zzEndRead=s.zzEndRead;  zzStartRead=s.zzStartRead;  zzCurrentPos=s.zzCurrentPos;  zzMarkedPos=s.zzMarkedPos;  zzAtEOF=s.zzAtEOF;  zzEOFDone=s.zzEOFDone;  yyline=s.yyline;  yycolumn=s.yycolumn;}  }
class C{  public boolean isCompatibleRaster(Raster raster){  SampleModel sm=raster.getSampleModel();  if (sm instanceof ComponentSampleModel) {    if (sm.getNumBands() != getNumComponents()) {      return false;    }    for (int i=0; i < nBits.length; i++) {      if (sm.getSampleSize(i) < nBits[i]) {        return false;      }    }    return (raster.getTransferType() == transferType);  } else {    return false;  }}  }
class C{  public void trace(Throwable throwable,String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.TRACE,throwable,msg,arg0,arg1,arg2,null);}  }
class C{  protected boolean mustExpandNode(){  if (this.kmlRoot.getFeature() instanceof KMLAbstractContainer) {    return Boolean.TRUE.equals(this.kmlRoot.getFeature().getOpen());  }  return this.kmlRoot.getFeature() != null;}  }
class C{  private void doConcatenate(Warrant w){  if (_startW != null) {    List<BlockOrder> orders=_startW.getOrders();    int limit=orders.size() - 1;    for (int i=0; i < limit; i++) {      w.addBlockOrder(new BlockOrder(orders.get(i)));    }    w.setViaOrder(_startW.getViaOrder());    w.setAvoidOrder(_startW.getAvoidOrder());    if (log.isDebugEnabled())     log.debug("doConcatenate: limit= " + limit + ",  orders.size()= "+ orders.size());    BlockOrder bo=new BlockOrder(orders.get(limit));    if (_endW != null) {      orders=_endW.getOrders();      bo.setExitName(orders.get(0).getExitName());      w.addBlockOrder(bo);      for (int i=1; i < orders.size(); i++) {        w.addBlockOrder(new BlockOrder(orders.get(i)));      }      BlockOrder boo=w.getViaOrder();      if (boo == null) {        w.setViaOrder(_endW.getViaOrder());      }      boo=w.getAvoidOrder();      if (boo == null) {        w.setAvoidOrder(_endW.getAvoidOrder());      }    } else {      w.addBlockOrder(bo);    }    List<ThrottleSetting> commands=_startW.getThrottleCommands();    for (int i=0; i < commands.size(); i++) {      w.addThrottleCommand(new ThrottleSetting(commands.get(i)));    }    if (_endW != null) {      commands=_endW.getThrottleCommands();      for (int i=0; i < commands.size(); i++) {        w.addThrottleCommand(new ThrottleSetting(commands.get(i)));      }    }    _warrantMap.put(w.getDisplayName(),w);    newWarrantFrame(new WarrantFrame(w,false));  } else {    newWarrantFrame(new WarrantFrame(w,true));  }  _startW=null;  _endW=null;  dispose();}  }
class C{  protected Class<?> loadClass(String className,boolean resolveClass) throws ClassNotFoundException {  if (className == null) {    throw new NullPointerException();  }  if (className.indexOf("/") != -1) {    throw new ClassNotFoundException(className);  }  Class<?> clazz=findLoadedClass(className);  if (clazz == null) {    if (parentClassLoader == null) {      clazz=BootstrapClassLoader.getBootstrapClassLoader().loadClass(className,false);    } else {      try {        clazz=parentClassLoader.loadClass(className);      } catch (      ClassNotFoundException e) {      }    }    if (clazz == null) {      clazz=findClass(className);      if (clazz == null) {        throw new ClassNotFoundException(className);      }    }  }  if (resolveClass) {    resolveClass(clazz);  }  return clazz;}  }
class C{  protected void notifyConnectionListeners(int type,Exception ex){  Iterator<ConnectionListener> iter;  ConnectionListener l;  iter=m_ConnectionListeners.iterator();  while (iter.hasNext()) {    l=iter.next();    l.connectionChange(new ConnectionEvent(this,type,m_DbUtils,ex));  }}  }
class C{  public void doWeird(SqeParameter param){}  }
class C{  public BulletParser parseAttribute(final Attribute attribute){  parsedAttrs.add(attribute);  return this;}  }
class C{  public static <T extends HierarchicalType>List<T> sortTypes(List<T> types){  Map<String,T> typesByName=new HashMap<>();  for (  T type : types) {    typesByName.put(type.name,type);  }  List<T> result=new ArrayList<>(types.size());  Set<T> processed=new HashSet<>();  for (  T type : types) {    addToResult(type,result,processed,typesByName);  }  return result;}  }
class C{  public boolean hasResourceId(){  return hasExtension(ResourceId.class);}  }
class C{  public int indexOf(String str){  return indexOf(str,0);}  }
class C{  protected Shape createInterior(final SegmentType segmentType,final int x,final int y,final int w,final int h){switch (segmentType) {case FIRST:    return shapeGenerator.createRoundRectangle(x + 1,y + 1,w,h - 2,CornerSize.INTERIOR,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.SQUARE,CornerStyle.SQUARE);case MIDDLE:  return shapeGenerator.createRectangle(x - 2,y + 1,w + 3,h - 2);case LAST:return shapeGenerator.createRoundRectangle(x - 2,y + 1,w + 1,h - 2,CornerSize.INTERIOR,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);default :return shapeGenerator.createRoundRectangle(x + 1,y + 1,w - 2,h - 2,CornerSize.INTERIOR);}}  }
class C{  public static Stats createAndMergeFrom(Stats model){  Stats r=new Stats(model.name,model.unit,0);  r.histogram=new int[model.histogram.length];  System.arraycopy(model.histogram,0,r.histogram,0,model.histogram.length);  r.counts=new long[model.histogram.length];  r.merge(model);  return r;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.438 -0500",hash_original_method="6BF74F97A8D55EADCED3E5638A05F0CD",hash_generated_method="BB0AD71DC13F57FADAD9813796AF8E2F") static public void assertNotSame(String message,Object expected,Object actual){  if (expected == actual)   failSame(message);}  }
class C{  public MatchQueryBuilder maxExpansions(int maxExpansions){  this.maxExpansions=maxExpansions;  return this;}  }
class C{  public boolean checkForBroadcastAddress(DccLocoAddress addr){  if (addr.getNumber() < 1) {    log.warn("Trying to use broadcast address!");    return true;  }  return false;}  }
class C{  protected final JsonToken parseNumberText(int c) throws IOException, JsonParseException {  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  int outPtr=0;  boolean negative=(c == INT_MINUS);  if (negative) {    outBuf[outPtr++]='-';    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    c=(int)_inputBuffer[_inputPtr++] & 0xFF;    if (c < INT_0 || c > INT_9) {      return _handleInvalidNumberStart(c,true);    }  }  if (c == INT_0) {    c=_verifyNoLeadingZeroes();  }  outBuf[outPtr++]=(char)c;  int intLen=1;  int end=_inputPtr + outBuf.length;  if (end > _inputEnd) {    end=_inputEnd;  }  while (true) {    if (_inputPtr >= end) {      return _parserNumber2(outBuf,outPtr,negative,intLen);    }    c=(int)_inputBuffer[_inputPtr++] & 0xFF;    if (c < INT_0 || c > INT_9) {      break;    }    ++intLen;    outBuf[outPtr++]=(char)c;  }  if (c == '.' || c == 'e' || c == 'E') {    return _parseFloatText(outBuf,outPtr,c,negative,intLen);  }  --_inputPtr;  _textBuffer.setCurrentLength(outPtr);  return resetInt(negative,intLen);}  }
class C{  @Override public int read() throws IOException {  int num=read(oneBuf,0,1);  return num == -1 ? -1 : ((int)oneBuf[0]) & BYTE_MASK;}  }
class C{  public static String normalizeUrl(String requestUrl) throws OAuthException {  if ((requestUrl == null) || (requestUrl.length() == 0)) {    throw new OAuthException("Request Url cannot be empty");  }  URI uri;  try {    uri=new URI(requestUrl);  } catch (  URISyntaxException e) {    throw new OAuthException(e);  }  String authority=uri.getAuthority();  String scheme=uri.getScheme();  if (authority == null || scheme == null) {    throw new OAuthException("Invalid Request Url");  }  authority=authority.toLowerCase();  scheme=scheme.toLowerCase();  if ((scheme.equals("http") && uri.getPort() == 80) || (scheme.equals("https") && uri.getPort() == 443)) {    int index=authority.lastIndexOf(":");    if (index >= 0) {      authority=authority.substring(0,index);    }  }  return scheme + "://" + authority+ uri.getRawPath();}  }
class C{  public Instant withMillis(long newMillis){  return (newMillis == iMillis ? this : new Instant(newMillis));}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  public NoUniqueResultException(){}  }
class C{  public void printDMLSourceLine(int lineNum){  if (lineNum > 0 && lineNum < dmlScript.length)   System.out.format("%-4d %s\n",lineNum,dmlScript[lineNum - 1]);}  }
class C{  public DoubleMatrix jblas_solveSymmetric(double[][] B){  return org.jblas.Solve.solveSymmetric(new DoubleMatrix(this.getArray()),new DoubleMatrix(B));}  }
class C{  public void finalizeObserver() throws Exception {  try {    CocoJNI.cocoFinalizeObserver(this.pointer);  } catch (  Exception e) {    throw new Exception("Observer finalization failed.\n" + e.toString());  }}  }
class C{  @Override protected void validate() throws IllegalStateException {  super.validate();  if (getPublicationLabel() == null) {    throw new IllegalStateException(NEWS_PUBLICATION_LABEL + " is not set");  }}  }
class C{  public static void addReferenceDistanceCheck(InsnList distance,Type type,InsnList mutant){  distance.add(copy(mutant));  distance.add(new MethodInsnNode(Opcodes.INVOKESTATIC,PackageInfo.getNameWithSlash(ReplaceVariable.class),"getDistance","(Ljava/lang/Object;Ljava/lang/Object;)D",false));}  }
class C{  public PfamModel addModel(String accession){  PfamModel model=modelAccessionToModelMap.get(accession);  if (model != null) {    throw new IllegalStateException("PfamModel accession " + accession + " appears more than once in the Pfam Clan file.");  }  model=new PfamModel(accession);  modelAccessionToModelMap.put(accession,model);  return model;}  }
class C{  public static int findMethodInReminderList(ArrayList<Integer> values,int method){  int index=values.indexOf(method);  if (index == -1) {    index=0;  }  return index;}  }
class C{  public int howManyFiltered(){  return (getFilteredRootNode() != null && getRootNode() != null ? getRootNode().getChildCount() - getFilteredRootNode().getChildCount() : 0);}  }
class C{  public boolean accept(File dir,String name){  File f=new File(dir,name);  if ((name.indexOf(AS_CLASS) > -1) && (name.indexOf(".as") > -1) && (name.compareToIgnoreCase(fileToKeep) != 0)) {    return true;  } else {    return false;  }}  }
class C{  public TObjectFloatHashMap(int initialCapacity,TObjectHashingStrategy<K> strategy){  super(initialCapacity,strategy);}  }
class C{  public DefaultKeyedValueDataset(){  this(null);}  }
class C{  protected void updateCastlingRightsForNonEpNonCastlingMove(Move move){switch (move.getPiece()) {case KING:    setCastling(colorToMove,CASTLE_NONE);  break;default :if (move.getPiece() == ROOK && move.getFrom() == SQUARE_A1 && colorToMove == WHITE || move.getCapture() == ROOK && move.getTo() == SQUARE_A1 && colorToMove == BLACK) {  setCastling(WHITE,getCastling(WHITE) & CASTLE_SHORT);} else if (move.getPiece() == ROOK && move.getFrom() == SQUARE_H1 && colorToMove == WHITE || move.getCapture() == ROOK && move.getTo() == SQUARE_H1 && colorToMove == BLACK) {  setCastling(WHITE,getCastling(WHITE) & CASTLE_LONG);} else if (move.getPiece() == ROOK && move.getFrom() == SQUARE_A8 && colorToMove == BLACK || move.getCapture() == ROOK && move.getTo() == SQUARE_A8 && colorToMove == WHITE) {  setCastling(BLACK,getCastling(BLACK) & CASTLE_SHORT);} else if (move.getPiece() == ROOK && move.getFrom() == SQUARE_H8 && colorToMove == BLACK || move.getCapture() == ROOK && move.getTo() == SQUARE_H8 && colorToMove == WHITE) {  setCastling(BLACK,getCastling(BLACK) & CASTLE_LONG);}break;}}  }
class C{  public boolean isReadOnly(){  return m_readOnly;}  }
class C{  public synchronized Identifier forceResolve(Environment env,Identifier nm){  if (nm.isQualified())   return nm;  Identifier className=(Identifier)classes.get(nm);  if (className != null) {    return className;  }  className=Identifier.lookup(currentPackage,nm);  classes.put(nm,className);  return className;}  }
class C{  private static void addComponentDimConstraintString(DimConstraint dc,StringBuffer sb,boolean asAPI,boolean isHor,boolean noGrowAdd){  int gp=dc.getGrowPriority();  if (gp != 100) {    if (asAPI) {      sb.append(isHor ? ".growPrioX(" : ".growPrioY(").append(gp).append(')');    } else {      sb.append(isHor ? ",growpriox " : ",growprioy ").append(gp);    }  }  if (noGrowAdd == false) {    Float gw=dc.getGrow();    if (gw != null) {      String g=gw != 100f ? floatToString(gw,asAPI) : "";      if (asAPI) {        sb.append(isHor ? ".growX(" : ".growY(").append(g).append(')');      } else {        sb.append(isHor ? ",growx" : ",growy").append(g.length() > 0 ? (" " + g) : "");      }    }  }  int sp=dc.getShrinkPriority();  if (sp != 100) {    if (asAPI) {      sb.append(isHor ? ".shrinkPrioX(" : ".shrinkPrioY(").append(sp).append(')');    } else {      sb.append(isHor ? ",shrinkpriox " : ",shrinkprioy ").append(sp);    }  }  Float sw=dc.getShrink();  if (sw != null && sw.intValue() != 100) {    String s=floatToString(sw,asAPI);    if (asAPI) {      sb.append(isHor ? ".shrinkX(" : ".shrinkY(").append(s).append(')');    } else {      sb.append(isHor ? ",shrinkx " : ",shrinky ").append(s);    }  }  String eg=dc.getEndGroup();  if (eg != null) {    if (asAPI) {      sb.append(isHor ? ".endGroupX(\"" : ".endGroupY(\"").append(eg).append("\")");    } else {      sb.append(isHor ? ",endgroupx " : ",endgroupy ").append(eg);      removeTrailingSpace(sb);    }  }  String sg=dc.getSizeGroup();  if (sg != null) {    if (asAPI) {      sb.append(isHor ? ".sizeGroupX(\"" : ".sizeGroupY(\"").append(sg).append("\")");    } else {      sb.append(isHor ? ",sizegroupx " : ",sizegroupy ").append(sg);      removeTrailingSpace(sb);    }  }  appendBoundSize(dc.getSize(),sb,isHor,asAPI);  UnitValue al=dc.getAlign();  if (al != null) {    if (asAPI) {      sb.append(isHor ? ".alignX(\"" : ".alignY(\"").append(getUV(al)).append("\")");    } else {      sb.append(isHor ? ",alignx " : ",aligny ").append(getUV(al));    }  }  BoundSize gapBef=dc.getGapBefore();  BoundSize gapAft=dc.getGapAfter();  if (gapBef != null || gapAft != null) {    if (asAPI) {      sb.append(isHor ? ".gapX(" : ".gapY(").append(getBS(gapBef,asAPI)).append(", ").append(getBS(gapAft,asAPI)).append(")");    } else {      sb.append(isHor ? ",gapx " : ",gapy ").append(getBS(gapBef));      if (gapAft != null)       sb.append(' ').append(getBS(gapAft));    }  }}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,String desc,Element sourceElement,InputEvent inputEvent,String targetFrame){  super(source,type,targetURL,desc,sourceElement,inputEvent);  this.targetFrame=targetFrame;}  }
class C{  public static int playCraps(){  int dice1=rollDice();  int dice2=rollDice();  printScore(dice1,dice2);  int point=checkSum(dice1,dice2);  if (point <= 1) {    printResult(point);    return point;  }  int sum;  do {    dice1=rollDice();    dice2=rollDice();    sum=dice1 + dice2;  } while (sum != point && sum != 7);  printScore(dice1,dice2);  if (sum == 7) {    printResult(0);    point=0;  } else {    printResult(1);    point=1;  }  return point;}  }
class C{  @Nullable public static Date stringToDate(@NonNull String dateAsString,@NonNull DateFormat df){  try {    df.setTimeZone(UTC);    return df.parse(dateAsString);  } catch (  ParseException e) {    return null;  }}  }
class C{  public int clear(final int holder){  return holder & ~_mask;}  }
class C{  public acronym removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static double convertTempo(double tempo){  if (tempo <= 0) {    tempo=1;  }  return ((double)60000000l) / tempo;}  }
class C{  public String readLine() throws IOException {  boolean gotCR=false, gotLF=false;  pos=0;  lineBuf=new StringBuffer();  while (!gotLF) {    int c=is.read();    if (c == -1) {      return null;    }    if (gotCR) {      if (c == LF) {        gotLF=true;      } else {        gotCR=false;        consume(CR);        consume(c);      }    } else {      if (c == CR) {        gotCR=true;      } else {        consume(c);      }    }  }  lineBuf.append(buf,0,pos);  return new String(lineBuf);}  }
class C{  public InvalidAttributeValueException(String explanation){  super(explanation);}  }
class C{  public boolean greaterEqual(RegisterPriority other){  return ordinal() >= other.ordinal();}  }
class C{  public void testNextDoubleBounded2(){  SplittableRandom sr=new SplittableRandom();  for (double least=0.0001; least < 1.0e20; least*=8) {    for (double bound=least * 1.001; bound < 1.0e20; bound*=16) {      double f=sr.nextDouble(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      double j;      while (i < NCALLS && (j=sr.nextDouble(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  @Nonnull public BugInstance addMethod(MethodAnnotation methodAnnotation){  add(methodAnnotation);  return this;}  }
class C{  public static Object ask(ActorSelection actorSelection,Object message,Timeout timeout) throws Exception {  return Await.result(Patterns.ask(actorSelection,message,timeout),timeout.duration());}  }
class C{  public StylesheetRoot(XSLTSchema schema,ErrorListener listener) throws TransformerConfigurationException {  this(listener);  m_availElems=schema.getElemsAvailable();}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  @Override public final boolean isAnnotationPresent(Class<? extends Annotation> annotationClass){  return getAnnotation(annotationClass) != null;}  }
class C{  public void removeDragSourceListener(DragSourceListener dsl){  if (dsl != null) {synchronized (this) {      listener=DnDEventMulticaster.remove(listener,dsl);    }  }}  }
class C{  public PreviewInfoJson previewWithOverride(String pipelineName,List<StageOutputJson> stageOutputsToOverrideJson,String rev,Integer batchSize,Integer batches,Boolean skipTargets,String endStage,Long timeout) throws ApiException {  Object postBody=stageOutputsToOverrideJson;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling previewWithOverride");  }  if (stageOutputsToOverrideJson == null) {    throw new ApiException(400,"Missing the required parameter 'stageOutputsToOverrideJson' when calling previewWithOverride");  }  String path="/v1/pipeline/{pipelineName}/preview".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  queryParams.addAll(apiClient.parameterToPairs("","batchSize",batchSize));  queryParams.addAll(apiClient.parameterToPairs("","batches",batches));  queryParams.addAll(apiClient.parameterToPairs("","skipTargets",skipTargets));  queryParams.addAll(apiClient.parameterToPairs("","endStage",endStage));  queryParams.addAll(apiClient.parameterToPairs("","timeout",timeout));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<PreviewInfoJson>(){  };  return apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public RectangleConstraint toRangeHeight(Range range){  ParamChecks.nullNotPermitted(range,"range");  return new RectangleConstraint(this.width,this.widthRange,this.widthConstraintType,range.getUpperBound(),range,LengthConstraintType.RANGE);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void disableNewLine(){  Appender appender=Logger.getRootLogger().getAppender("stdout");  defaultLayout=(PatternLayout)appender.getLayout();  PatternLayout newLayout=new PatternLayout(defaultLayout.getConversionPattern().replace("%n",""));  appender.setLayout(newLayout);}  }
class C{  public Builder addListeners(@NonNull Iterable<Listener> listeners){  for (  Listener curListener : listeners) {    addListener(curListener);  }  return this;}  }
class C{  public int doEndTag(){  return EVAL_PAGE;}  }
class C{  public void loadSomeData(Repository repo) throws Exception {  RepositoryConnection cxn=repo.getConnection();  cxn.setAutoCommit(false);  try {    Resource s=new URIImpl("http://www.bigdata.com/rdf#Mike");    URI p=new URIImpl("http://www.bigdata.com/rdf#loves");    Value o=new URIImpl("http://www.bigdata.com/rdf#RDF");    Statement stmt=new StatementImpl(s,p,o);    cxn.add(stmt);    cxn.commit();  } catch (  Exception ex) {    cxn.rollback();    throw ex;  } finally {    cxn.close();  }}  }
class C{  public static void preProcessTree(SimpleNode s){  for (  SimpleNode child : getNodeIterator(s)) {    preProcessTree(child);  }  if (s instanceof ASTExpression) {    ASTExpression expression=(ASTExpression)s;    if (expression.getType().equals(ASTExpression.AND)) {      if (allChildrenAreNot(expression)) {        ASTTerm allDocsTerm=createAllDocTermNode();        pushChild(expression,allDocsTerm);      } else       if (isNotFlag(expression.jjtGetChild(0))) {        int firstNonNotChild=findFirstNonNotChild(expression);        swapChildren(expression,0,firstNonNotChild);      }    }    if (expression.getType().equals(ASTExpression.OR)) {      for (int i=0; i < expression.jjtGetNumChildren(); i++) {        SimpleNode child=(SimpleNode)expression.jjtGetChild(i);        if (isNotFlag(child)) {          ASTExpression newExpression=new ASTExpression(QueryParserTreeConstants.JJTEXPRESSION);          newExpression.setNotFlag(false);          newExpression.setType(ASTExpression.AND);          pushChild(newExpression,child);          pushChild(newExpression,createAllDocTermNode());          newExpression.jjtSetParent(expression);          expression.jjtAddChild(newExpression,i);        }      }    }  }}  }
class C{  public String toString(){  return (eventbaseID == null ? "" : eventbaseID + ".") + "repeat" + (repeatIterationSpecified ? "(" + repeatIteration + ")" : "")+ (offset != 0 ? super.toString() : "");}  }
class C{  @Override public int nextInt(){  return (int)nextLong(items);}  }
class C{  public Builder withButton(@StringRes int buttonTextResourceId,View.OnClickListener onClickListener){  return withButton(rootView.getContext().getString(buttonTextResourceId),onClickListener);}  }
class C{  private void logDoneMessage(){  this.loggedDoneMessage=true;  StartupStatus.startup(LocalizedStrings.CreatePersistentRegionProcessor_DONE_WAITING_FOR_BUCKET_MEMBERS,new Object[]{this.region,TransformUtils.persistentMemberIdToLogEntryTransformer.transform(this.thisMember)});}  }
class C{  public boolean isLeaf(){  return ((int)id & 1) != 0;}  }
class C{  public void addGeolocSharingInvitationRejected(ContactId contact,ReasonCode reasonCode,long timestamp){  String sharingId=SessionIdGenerator.getNewId();  mRichcallLog.addIncomingGeolocSharing(contact,sharingId,GeolocSharing.State.REJECTED,reasonCode,timestamp);  mBroadcaster.broadcastInvitation(sharingId);}  }
class C{  public ActivityDelegateImpl(Class<?> regularClass,Class<?> incognitoClass){  super(regularClass,incognitoClass);}  }
class C{  public SerializerReadBuilder(SerializableBuilder sb){  m_sb=sb;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:01.322 -0400",hash_original_method="376293A3CE70EA0FB2E3C1A63DEB8BCE",hash_generated_method="72585AC5EDC5D844BA0733F6DEBF2695") public static PrintJobId unflattenFromString(String string){  return new PrintJobId(string);}  }
class C{  private static boolean isSixBytesSequence(byte b){  return -4 <= b && b <= -3;}  }
class C{  public OFBasicVendorDataType(long type,Instantiable<OFVendorData> instantiator){  super(instantiator);  this.type=type;}  }
class C{  public void evaluatePopulation(final EvolutionState state){  if (numTests > 1)   expand(state);  individualCounter=0;  subPopCounter=0;  if (state.evalthreads == 1) {    int[] numinds=new int[state.population.subpops.length];    int[] from=new int[numinds.length];    for (int i=0; i < numinds.length; i++) {      numinds[i]=state.population.subpops[i].individuals.length;      from[i]=0;    }    SimpleProblemForm prob=null;    if (cloneProblem)     prob=(SimpleProblemForm)(p_problem.clone()); else     prob=(SimpleProblemForm)(p_problem);    evalPopChunk(state,numinds,from,0,prob);  } else {    ThreadPool.Worker[] threads=new ThreadPool.Worker[state.evalthreads];    for (int i=0; i < threads.length; i++) {      SimpleEvaluatorThread run=new SimpleEvaluatorThread();      run.threadnum=i;      run.state=state;      run.prob=(SimpleProblemForm)(p_problem.clone());      threads[i]=pool.start(run,"ECJ Evaluation Thread " + i);    }    pool.joinAll();  }  if (numTests > 1)   contract(state);}  }
class C{  public void assertNotEqual(double expected,double actual,double minRelativeError){  TestUtils.assertNotEqual(expected,actual,minRelativeError);}  }
class C{  public ReverseComplementingReader(final SequencesReader reader){  if (reader == null) {    throw new NullPointerException();  }  if (reader.type() != SequenceType.DNA) {    throw new IllegalArgumentException();  }  mUnderlyingReader=reader;}  }
class C{  public Period availabilityLag(){  return availabilityLag;}  }
class C{  public Logix createNewLogix(String systemName,String userName){  Logix x;  if (userName != null && !userName.equals("")) {    x=getByUserName(userName);    if (x != null) {      return null;    }  }  x=getBySystemName(systemName);  if (x == null) {    x=getBySystemName(systemName.toUpperCase());  }  if (x != null) {    return null;  }  x=new DefaultLogix(systemName,userName);  register(x);  if (systemName.startsWith("IX:AUTO:")) {    try {      int autoNumber=Integer.parseInt(systemName.substring(8));      if (autoNumber > lastAutoLogixRef) {        lastAutoLogixRef=autoNumber;      }    } catch (    NumberFormatException e) {      log.warn("Auto generated SystemName " + systemName + " is not in the correct format");    }  }  return x;}  }
class C{  protected static final int networkByteOrderToInt(byte[] buf,int start,int count){  if (count > 4) {    throw new IllegalArgumentException("Cannot handle more than 4 bytes");  }  int answer=0;  for (int i=0; i < count; i++) {    answer<<=8;    answer|=((int)buf[start + i] & 0xff);  }  return answer;}  }
class C{  public PipelineMetrics(String pipelineName){  this.pipelineName=pipelineName;}  }
class C{  public static DocViewerComponent open(InputStream input,final String name,final String format){  DocViewerComponent comp=new DocViewerComponent(name);  BufferedReader br;  br=new BufferedReader(new InputStreamReader(input,Charset.forName("UTF-8")));  String line;  String text=new String();  try {    while ((line=br.readLine()) != null) {      text=text.concat(line + "\n");    }  } catch (  IOException e) {    e.printStackTrace();  }  comp.setText(text);  return comp;}  }
class C{  public Check createCheck(){  CheckImpl check=new CheckImpl();  return check;}  }
class C{  protected SiteMap parseSyndicationFormat(URL sitemapUrl,Document doc) throws UnknownFormatException {  SiteMap sitemap=new SiteMap(sitemapUrl);  NodeList list=doc.getElementsByTagName("feed");  if (list.getLength() > 0) {    parseAtom(sitemap,(Element)list.item(0),doc);    sitemap.setProcessed(true);    return sitemap;  } else {    list=doc.getElementsByTagName("channel");    if (list.getLength() > 0) {      parseRSS(sitemap,doc);      sitemap.setProcessed(true);      return sitemap;    } else {      throw new UnknownFormatException("Unknown syndication format at " + sitemapUrl);    }  }}  }
class C{  public HitBox(String name,BoundingShape shape){  this(name,Point2D.ZERO,shape);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebEnv.dump(request);  WebEnv.dump(request.getSession());  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null) {    WebUtil.createTimeoutPage(request,response,this,null);    return;  }  String columnName=WebUtil.getParameter(request,"ColumnName");  int AD_Process_ID=WebUtil.getParameterAsInt(request,"AD_Process_ID");  int page=WebUtil.getParameterAsInt(request,"page");  log.info("This is the page on original call" + page);  if (AD_Process_ID > 0) {    if (AD_Process_ID < 1 || columnName == null || columnName.equals("")) {      WebUtil.createErrorPage(request,response,this,Msg.getMsg(wsc.ctx,"ParameterMissing"));      return;    }    String targetBase="'" + columnName;    MProcess process=MProcess.get(wsc.ctx,AD_Process_ID);    MProcessPara para=null;    MProcessPara[] parameter=process.getParameters();    for (int i=0; i < parameter.length; i++) {      para=parameter[i];      if (para.getColumnName().equals(columnName))       i=parameter.length;    }    WebDoc doc=WebDoc.createPopup(para.getColumnName());    div panel=new div();    panel.setStyle("height: 330px;overflow: scroll;overflow: auto;");    panel.addElement(fillTable(wsc,para.getColumnName(),para.getAD_Reference_Value_ID(),request.getRequestURI(),targetBase,false,page));    String text="Reset";    input resetbtn=new input("button",text,"  " + text);    resetbtn.setID(text);    resetbtn.setClass("resetbtn");    String script=targetBase + "F.value='';" + targetBase+ "D.value='';closePopup();";    resetbtn.setOnClick(script);    text="First";    input firstpgbtn=new input(input.TYPE_BUTTON,text,"  " + text);    firstpgbtn.setOnClick("startLookup('" + columnName + "', "+ AD_Process_ID+ ", 1);return false;");    firstpgbtn.setID(text);    firstpgbtn.setClass("firstpgbtn");    text="Prior";    input prevpgbtn=new input(input.TYPE_BUTTON,text,"  " + text);    int prevpage=(page == 1) ? 1 : page - 1;    prevpgbtn.setOnClick("startLookup('" + columnName + "', "+ AD_Process_ID+ ", "+ prevpage+ ");return false;");    prevpgbtn.setID(text);    prevpgbtn.setClass("prevpgbtn");    text="Next";    input nextpgbtn=new input(input.TYPE_BUTTON,text,"  " + text);    int nextpage=(page + 1);    nextpgbtn.setOnClick("startLookup('" + columnName + "', "+ AD_Process_ID+ ", "+ nextpage+ ");return false;");    nextpgbtn.setID(text);    nextpgbtn.setClass("nextpgbtn");    text="Next";    input lastpgbtn=new input(input.TYPE_BUTTON,text,"  " + text);    int lastpage=m_recordCount / MAX_LINES + 1;    lastpgbtn.setOnClick("startLookup('" + columnName + "', "+ AD_Process_ID+ ", "+ lastpage+ ");return false;");    lastpgbtn.setID(text);    lastpgbtn.setClass("lastpgbtn");    int index1=(page - 1) * MAX_LINES + 1;    int index2=(page) * MAX_LINES < m_recordCount ? (page) * MAX_LINES : m_recordCount;    doc.getTable().addElement(new tr(new td(panel).setColSpan(2)));    doc.addPopupClose(ws.ctx)[0].addElement("&nbsp;#&nbsp;" + index1 + "-"+ index2+ " / "+ m_recordCount).addElement(resetbtn).addElement(firstpgbtn).addElement(prevpgbtn).addElement(nextpgbtn).addElement(lastpgbtn);    WebUtil.createResponse(request,response,this,null,doc,false);  } else {    if (ws == null) {      WebUtil.createTimeoutPage(request,response,this,null);      return;    }    GridField mField=ws.curTab.getField(columnName);    log.config("ColumnName=" + columnName + ", MField="+ mField);    if (mField == null || columnName == null || columnName.equals("")) {      WebUtil.createErrorPage(request,response,this,Msg.getMsg(ws.ctx,"ParameterMissing"));      return;    }    String targetBase="'" + columnName;    WebDoc doc=WebDoc.createPopup(mField.getHeader());    boolean hasDependents=ws.curTab.hasDependants(columnName);    boolean hasCallout=mField.getCallout().length() > 0;    div panel=new div();    panel.setStyle("height: 330px;overflow: scroll;overflow: auto;");    panel.addElement(fillTable(wsc,mField.getColumnName(),mField.getAD_Reference_Value_ID(),request.getRequestURI(),targetBase,hasDependents || hasCallout,page));    String text="Reset";    input resetbtn=new input(input.TYPE_RESET,text,"  " + text);    resetbtn.setID(text);    resetbtn.setClass("resetbtn");    String script=targetBase + "F.value='';" + targetBase+ "D.value='';self.close();";    if (hasDependents || hasCallout)     script+="startUpdate(" + targetBase + "F);";    resetbtn.setOnClick(script);    text="First";    input firstpgbtn=new input(input.TYPE_BUTTON,text,"  " + text);    firstpgbtn.setOnClick("startLookup('" + columnName + "', "+ AD_Process_ID+ ", 1);return false;");    firstpgbtn.setID(text);    firstpgbtn.setClass("firstpgbtn");    text="Prior";    input prevpgbtn=new input(input.TYPE_BUTTON,text,"  " + text);    int prevpage=(page == 1) ? 1 : page - 1;    prevpgbtn.setOnClick("startLookup('" + columnName + "', "+ AD_Process_ID+ ", "+ prevpage+ ");return false;");    prevpgbtn.setID(text);    prevpgbtn.setClass("prevpgbtn");    text="Next";    input nextpgbtn=new input(input.TYPE_BUTTON,text,"  " + text);    int nextpage=(page + 1);    nextpgbtn.setOnClick("startLookup('" + columnName + "', "+ AD_Process_ID+ ", "+ nextpage+ ");return false;");    nextpgbtn.setID(text);    nextpgbtn.setClass("nextpgbtn");    text="Last";    input lastpgbtn=new input(input.TYPE_BUTTON,text,"  " + text);    int lastpage=m_recordCount / MAX_LINES + 1;    lastpgbtn.setOnClick("startLookup('" + columnName + "', "+ AD_Process_ID+ ", "+ lastpage+ ");return false;");    lastpgbtn.setID(text);    lastpgbtn.setClass("lastpgbtn");    int index1=(page - 1) * MAX_LINES + 1;    int index2=(page) * MAX_LINES < m_recordCount ? (page) * MAX_LINES : m_recordCount;    doc.getTable().addElement(new tr(new td(panel).setColSpan(2)));    doc.addPopupClose(ws.ctx)[0].addElement("&nbsp;#&nbsp;" + index1 + "-"+ index2+ " / "+ m_recordCount).addElement(resetbtn).addElement(firstpgbtn).addElement(prevpgbtn).addElement(nextpgbtn).addElement(lastpgbtn);    WebUtil.createResponse(request,response,this,null,doc,false);  }}  }
class C{  public JavaClass parse(InputStream is) throws IOException {  return new ByteCodeParser().parse(is);}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.main);  mPreview=(CameraSourcePreview)findViewById(R.id.preview);  mGraphicOverlay=(GraphicOverlay)findViewById(R.id.faceOverlay);  int rc=ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA);  if (rc == PackageManager.PERMISSION_GRANTED) {    createCameraSource();  } else {    requestCameraPermission();  }}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  public Set<ByteString> namespaces(){  return contents.keySet();}  }
class C{  public static ManualLagGraphParams serializableInstance(){  return new ManualLagGraphParams();}  }
class C{  public ToDataException(String message,Throwable cause){  super(message,cause);}  }
class C{  void put(ThreadLocal<?> key,Object value){  cleanUp();  int firstTombstone=-1;  for (int index=key.hash & mask; ; index=next(index)) {    Object k=table[index];    if (k == key.reference) {      table[index + 1]=value;      return;    }    if (k == null) {      if (firstTombstone == -1) {        table[index]=key.reference;        table[index + 1]=value;        size++;        return;      }      table[firstTombstone]=key.reference;      table[firstTombstone + 1]=value;      tombstones--;      size++;      return;    }    if (firstTombstone == -1 && k == TOMBSTONE) {      firstTombstone=index;    }  }}  }
class C{  public static long round(double d){  return (long)floor(d + 0.5d);}  }
class C{  @SuppressWarnings("fallthrough") private static void clearCalendarByRegEx(Calendar calendar,String regEx){switch (regEx) {case YEAR_DATE_FORMAT:{      calendar.clear(Calendar.MONTH);      calendar.clear(Calendar.DAY_OF_MONTH);      clearTime(calendar);      break;    }case YEAR_MONTH_DATE_FORMAT:{    calendar.clear(Calendar.DAY_OF_MONTH);    clearTime(calendar);    break;  }case MONTH_DAY_DATE_FORMAT:{  calendar.clear(Calendar.YEAR);  clearTime(calendar);  break;}case YEAR_MONTH_DAY_DATE_FORMAT:{clearTime(calendar);break;}}}  }
class C{  @Override protected Address advanceToBlock(Address block,int sizeClass){  return makeFreeList(block,sizeClass);}  }
class C{  public boolean canGetDouble(){  return canGet(double.class);}  }
class C{  public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){  String userId=null;  ResponseData data=null;  if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {    try {      Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);      sig.initVerify(publicKey);      sig.update(signedData.getBytes());      if (!sig.verify(Base64.decode(signature))) {        Log.e(TAG,"Signature verification failed.");        handleInvalidResponse();        return;      }    } catch (    NoSuchAlgorithmException e) {      throw new RuntimeException(e);    }catch (    InvalidKeyException e) {      handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PUBLIC_KEY);      return;    }catch (    SignatureException e) {      throw new RuntimeException(e);    }catch (    Base64DecoderException e) {      Log.e(TAG,"Could not Base64-decode signature.");      handleInvalidResponse();      return;    }    try {      data=ResponseData.parse(signedData);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Could not parse response.");      handleInvalidResponse();      return;    }    if (data.responseCode != responseCode) {      Log.e(TAG,"Response codes don't match.");      handleInvalidResponse();      return;    }    if (data.nonce != mNonce) {      Log.e(TAG,"Nonce doesn't match.");      handleInvalidResponse();      return;    }    if (!data.packageName.equals(mPackageName)) {      Log.e(TAG,"Package name doesn't match.");      handleInvalidResponse();      return;    }    if (!data.versionCode.equals(mVersionCode)) {      Log.e(TAG,"Version codes don't match.");      handleInvalidResponse();      return;    }    userId=data.userId;    if (TextUtils.isEmpty(userId)) {      Log.e(TAG,"User identifier is empty.");      handleInvalidResponse();      return;    }  }switch (responseCode) {case LICENSED:case LICENSED_OLD_KEY:    int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);  handleResponse(limiterResponse,data);break;case NOT_LICENSED:handleResponse(Policy.NOT_LICENSED,data);break;case ERROR_CONTACTING_SERVER:Log.w(TAG,"Error contacting licensing server.");handleResponse(Policy.RETRY,data);break;case ERROR_SERVER_FAILURE:Log.w(TAG,"An error has occurred on the licensing server.");handleResponse(Policy.RETRY,data);break;case ERROR_OVER_QUOTA:Log.w(TAG,"Licensing server is refusing to talk to this device, over quota.");handleResponse(Policy.RETRY,data);break;case ERROR_INVALID_PACKAGE_NAME:handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME);break;case ERROR_NON_MATCHING_UID:handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID);break;case ERROR_NOT_MARKET_MANAGED:handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED);break;default :Log.e(TAG,"Unknown response code for license check.");handleInvalidResponse();}}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final FilterMode filter){  insertBitmap(bitmap,x,y,-1,filter);}  }
class C{  public AdaptiveCpuLoadProbe(boolean useAvg,boolean useProcs){  this.useAvg=useAvg;  this.useProcs=useProcs;}  }
class C{  public static void main(String[] args){}  }
class C{  public void load(ClusterIpInfo getClusterIpInfo){  if (getClusterIpInfo != null) {    if (getClusterIpInfo.getIpv4Setting() != null) {      network_vip=getClusterIpInfo.getIpv4Setting().getNetworkVip();      network_netmask=getClusterIpInfo.getIpv4Setting().getNetworkNetmask();      network_gateway=getClusterIpInfo.getIpv4Setting().getNetworkGateway();      if (getClusterIpInfo.getIpv4Setting().getNetworkAddrs().size() >= 1) {        ipv4_network_addrs1=getClusterIpInfo.getIpv4Setting().getNetworkAddrs().get(0);      }      if (getClusterIpInfo.getIpv4Setting().getNetworkAddrs().size() >= 2) {        ipv4_network_addrs2=getClusterIpInfo.getIpv4Setting().getNetworkAddrs().get(1);      }      if (getClusterIpInfo.getIpv4Setting().getNetworkAddrs().size() >= 3) {        ipv4_network_addrs3=getClusterIpInfo.getIpv4Setting().getNetworkAddrs().get(2);      }      if (getClusterIpInfo.getIpv4Setting().getNetworkAddrs().size() >= 4) {        ipv4_network_addrs4=getClusterIpInfo.getIpv4Setting().getNetworkAddrs().get(3);      }      if (getClusterIpInfo.getIpv4Setting().getNetworkAddrs().size() >= 5) {        ipv4_network_addrs5=getClusterIpInfo.getIpv4Setting().getNetworkAddrs().get(4);      }      if (ipv4_network_addrs4 != null && !ipv4_network_addrs4.equals(DEFAULT_IPV4_ADDR)) {        this.nodeCount=5;      } else       if (ipv4_network_addrs2 != null && !ipv4_network_addrs2.equals(DEFAULT_IPV4_ADDR)) {        this.nodeCount=3;      } else {        this.nodeCount=1;      }    } else {      loadIpv4SettingsDefaults();    }    if (getClusterIpInfo.getIpv6Setting() != null) {      network_vip6=getClusterIpInfo.getIpv6Setting().getNetworkVip6();      network_prefix_length=getClusterIpInfo.getIpv6Setting().getNetworkPrefixLength();      network_gateway6=getClusterIpInfo.getIpv6Setting().getNetworkGateway6();      if (getClusterIpInfo.getIpv6Setting().getNetworkAddrs().size() >= 1) {        ipv6_network_addrs1=getClusterIpInfo.getIpv6Setting().getNetworkAddrs().get(0);      }      if (getClusterIpInfo.getIpv6Setting().getNetworkAddrs().size() >= 2) {        ipv6_network_addrs2=getClusterIpInfo.getIpv6Setting().getNetworkAddrs().get(1);      }      if (getClusterIpInfo.getIpv6Setting().getNetworkAddrs().size() >= 3) {        ipv6_network_addrs3=getClusterIpInfo.getIpv6Setting().getNetworkAddrs().get(2);      }      if (getClusterIpInfo.getIpv6Setting().getNetworkAddrs().size() >= 4) {        ipv6_network_addrs4=getClusterIpInfo.getIpv6Setting().getNetworkAddrs().get(3);      }      if (getClusterIpInfo.getIpv6Setting().getNetworkAddrs().size() >= 5) {        ipv6_network_addrs5=getClusterIpInfo.getIpv6Setting().getNetworkAddrs().get(4);      }      int v6NodeCount=0;      if (ipv6_network_addrs4 != null && !ipv6_network_addrs4.equals(DEFAULT_IPV6_ADDR)) {        v6NodeCount=5;      } else       if (ipv6_network_addrs2 != null && !ipv6_network_addrs2.equals(DEFAULT_IPV6_ADDR)) {        v6NodeCount=3;      } else {        v6NodeCount=1;      }      if (v6NodeCount > this.nodeCount) {        this.nodeCount=v6NodeCount;      }    } else {      loadIpv6SettingsDefaults();    }  }}  }
class C{  public TheoryBuilder3(final Supplier<Strategy> state,final Source<A> as,Source<B> bs,Source<C> cs,Predicate3<A,B,C> assumptions){  this.state=state;  this.as=as;  this.bs=bs;  this.cs=cs;  this.assumptions=assumptions;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void addFeature(String feature){synchronized (features) {    features.add(feature);    renewEntityCapsVersion();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().isMediaPlayerSignaLost());}  }
class C{  public Trigger(Duration duration,Related related){  setDuration(duration,related);}  }
class C{  public DataSource<CloseableReference<PooledByteBuffer>> fetchEncodedImage(ImageRequest imageRequest,Object callerContext){  Preconditions.checkNotNull(imageRequest.getSourceUri());  try {    Producer<CloseableReference<PooledByteBuffer>> producerSequence=mProducerSequenceFactory.getEncodedImageProducerSequence(imageRequest);    if (imageRequest.getResizeOptions() != null) {      imageRequest=ImageRequestBuilder.fromRequest(imageRequest).setResizeOptions(null).build();    }    return submitFetchRequest(producerSequence,imageRequest,ImageRequest.RequestLevel.FULL_FETCH,callerContext);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.478 -0500",hash_original_method="2F0441D135E4CBEEA76B3CCA00FAD23B",hash_generated_method="39BF0CEE4D7555B1BA6A2E532E0DAC1B") public void addTransaction(SIPClientTransaction clientTransaction){  if (stackLogger.isLoggingEnabled())   stackLogger.logDebug("added transaction " + clientTransaction);  addTransactionHash(clientTransaction);}  }
class C{  public boolean isSameFinancialYear(Date fromDate,Date toDate){  if (getFinYearByDate(fromDate).getId().longValue() == getFinYearByDate(toDate).getId().longValue()) {    return true;  } else {    return false;  }}  }
class C{  public static void sleep(long ms) throws IgniteInterruptedCheckedException {  try {    Thread.sleep(ms);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof MutableBoolean) {    return value == ((MutableBoolean)obj).booleanValue();  }  return false;}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  @Override public DriverTask createConsistencyGroup(VolumeConsistencyGroup volumeConsistencyGroup){  LOG.info("Creating consistency group {}",volumeConsistencyGroup.getDisplayName());  return cgHelper.createConsistencyGroup(volumeConsistencyGroup);}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  int len=(length + 2) / 3 * 4;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public FaceUnlock(Context context){  mContext=context;  mLockPatternUtils=new LockPatternUtils(context);  mHandler=new Handler(this);}  }
class C{  public double distance(double x,double y,double z){  double xd=this.x - x;  double yd=this.y - y;  double zd=this.z - z;  return Math.sqrt(xd * xd + yd * yd + zd * zd);}  }
class C{  protected void sequence_speciesOrGridDisplayStatement(ISerializationContext context,speciesOrGridDisplayStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void makeCurrent(){  mEglCore.makeCurrent(mEGLSurface);}  }
class C{  public static VOPublicLandingpage toVOLandingpage(PublicLandingpage domObj){  if (domObj == null) {    return null;  }  VOPublicLandingpage voObj=new VOPublicLandingpage();  updateValueObject(voObj,domObj);  voObj.setMarketplaceId(domObj.getMarketplace().getMarketplaceId());  voObj.setNumberServices(domObj.getNumberServices());  voObj.setFillinCriterion(domObj.getFillinCriterion());  return voObj;}  }
class C{  public h3 addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private static final int parseTimeString(String str){  str=str.trim();  int ret=0;  boolean neg=false;  int i=0;  if (str.charAt(0) == '-') {    neg=true;    i++;  }  int num=0;  final int len=str.length();  for (; i < len; i++) {    char c=str.charAt(i);    if ((c >= '0') && (c <= '9')) {      num=num * 10 + c - '0';    } else     if (c == ':') {      ret+=num;      num=0;      ret*=60;    }  }  ret+=num;  ret*=1000;  if (neg)   ret=-ret;  return ret;}  }
class C{  protected double measureCacheHits(){  if (m_optimizer != null) {    return m_optimizer.getCacheHits();  } else {    return 0;  }}  }
class C{  static public double normalInverse(double y0) throws ArithmeticException {  double x, y, z, y2, x0, x1;  int code;  final double s2pi=Math.sqrt(2.0 * Math.PI);  if (y0 <= 0.0)   throw new IllegalArgumentException();  if (y0 >= 1.0)   throw new IllegalArgumentException();  code=1;  y=y0;  if (y > (1.0 - 0.13533528323661269189)) {    y=1.0 - y;    code=0;  }  if (y > 0.13533528323661269189) {    y=y - 0.5;    y2=y * y;    x=y + y * (y2 * Polynomial.polevl(y2,P0,4) / Polynomial.p1evl(y2,Q0,8));    x=x * s2pi;    return (x);  }  x=Math.sqrt(-2.0 * Math.log(y));  x0=x - Math.log(x) / x;  z=1.0 / x;  if (x < 8.0)   x1=z * Polynomial.polevl(z,P1,8) / Polynomial.p1evl(z,Q1,8); else   x1=z * Polynomial.polevl(z,P2,8) / Polynomial.p1evl(z,Q2,8);  x=x0 - x1;  if (code != 0)   x=-x;  return (x);}  }
class C{  @DSModeled() public static Toast makeText(Context context,CharSequence text,int duration){  Toast result=new Toast(context);  result.addTaint(text.getTaint());  result.addTaint(duration);  return result;}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  private boolean isMineshafterPresent(){  try {    Class.forName("mineshafter.MineServer");    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7){  return new ImmutableCollections.ListN<E>(e1,e2,e3,e4,e5,e6,e7);}  }
class C{  public static void writeUnsafe(PacketOutputStream out,Reader reader,boolean noBackslashEscapes) throws IOException {  out.writeUnsafe(QUOTE);  char[] buffer=new char[1024];  int len;  while ((len=reader.read(buffer)) >= 0) {    byte[] data=new String(buffer,0,len).getBytes("UTF-8");    writeBytesEscaped(out,data,data.length,noBackslashEscapes);  }  out.writeUnsafe(QUOTE);}  }
class C{  protected void addWar(WarArchiveMerger wam,String artifactIdent) throws MojoExecutionException, IOException {  for (  Object artifactObject : getProject().getArtifacts()) {    Artifact artifact=(Artifact)artifactObject;    ScopeArtifactFilter filter=new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME);    if (!artifact.isOptional() && filter.include(artifact)) {      String type=artifact.getType();      if ("war".equals(type)) {        String name=artifact.getGroupId() + ":" + artifact.getArtifactId();        if (name.equals(artifactIdent)) {          try {            wam.addMergeItem(new DefaultWarArchive(artifact.getFile().getPath()));          } catch (          MergeException e) {            throw new MojoExecutionException("Problem merging WAR",e);          }          return;        }      }    }  }  throw new MojoExecutionException("Could not find a dependent WAR file matching " + artifactIdent);}  }
class C{  public boolean isNew(){  return isNew;}  }
class C{  protected PotentialAttribute(WorkspaceComponent parent,Object object,String methodName,Class<?> dataType,Class<?>[] argDataTypes,Object[] argValues,String description){  this.parent=parent;  this.baseObject=object;  this.methodName=methodName;  this.dataType=dataType;  this.argumentDataTypes=argDataTypes;  this.argumentValues=argValues;  this.description=description;}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public void testSize0PrivateMode() throws Exception {  processSize0Test(DeploymentMode.PRIVATE);}  }
class C{  public void addIndices(Collection<IIndex> indices){  for (Iterator<IIndex> it=indices.iterator(); it.hasNext(); ) {    addIndex((IIndex)it.next());  }}  }
class C{  public void test_setEndRuleIIIIZ(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,8,Calendar.SUNDAY,1,false);  st.setEndRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,1,true);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,7,12,0).getTime())));  assertTrue("StartRule improperly set3",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,20,12,0).getTime())));  assertTrue("StartRule improperly set4",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,6,12,0).getTime())));  assertTrue("StartRule improperly set5",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,21,12,0).getTime())));  try {    st.setEndRule(20,15,Calendar.SUNDAY,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,35,Calendar.SUNDAY,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,15,12,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,-1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public Language(String name,String AD_Language,Locale locale){  this(name,AD_Language,locale,null,null,null);}  }
class C{  @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) throws FilterUnsupportedException {  DimColumnResolvedFilterInfo dimColumnResolvedFilterInfo=new DimColumnResolvedFilterInfo();  if (!this.isExpressionResolve && exp instanceof BinaryConditionalExpression) {    BinaryConditionalExpression binaryConditionalExpression=(BinaryConditionalExpression)exp;    Expression left=binaryConditionalExpression.getLeft();    Expression right=binaryConditionalExpression.getRight();    if (left instanceof ColumnExpression) {      ColumnExpression columnExpression=(ColumnExpression)left;      if (columnExpression.getDataType().equals(DataType.TimestampType)) {        isExpressionResolve=true;      } else {        if (FilterUtil.checkIfExpressionContainsColumn(right)) {          isExpressionResolve=true;        } else {          dimColumnResolvedFilterInfo.setColumnIndex(columnExpression.getCarbonColumn().getOrdinal());          dimColumnResolvedFilterInfo.setFilterValues(FilterUtil.getFilterListForRS(right,columnExpression,defaultValue,surrogate));        }      }    } else     if (right instanceof ColumnExpression) {      ColumnExpression columnExpression=(ColumnExpression)right;      if (columnExpression.getDataType().equals(DataType.TimestampType)) {        isExpressionResolve=true;      } else {        if (checkIfExpressionContainsColumn(left)) {          isExpressionResolve=true;        } else {          dimColumnResolvedFilterInfo.setColumnIndex(columnExpression.getCarbonColumn().getOrdinal());          dimColumnResolvedFilterInfo.setFilterValues(FilterUtil.getFilterListForRS(left,columnExpression,defaultValue,surrogate));        }      }    }  }  if (this.isExpressionResolve && exp instanceof ConditionalExpression) {    ConditionalExpression conditionalExpression=(ConditionalExpression)exp;    List<ColumnExpression> columnList=conditionalExpression.getColumnList();    dimColumnResolvedFilterInfo.setColumnIndex(columnList.get(0).getDimension().getOrdinal());    dimColumnResolvedFilterInfo.setFilterValues(FilterUtil.getFilterListForAllMembersRS(exp,columnList.get(0),defaultValue,surrogate,isIncludeFilter));  }}  }
class C{  public static Element firstChildElement(Element element,String childElementName){  if (element == null)   return null;  if (UtilValidate.isEmpty(childElementName))   return null;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && (childElementName == null || childElementName.equals(node.getLocalName() != null ? node.getLocalName() : node.getNodeName()))) {        Element childElement=(Element)node;        return childElement;      }    } while ((node=node.getNextSibling()) != null);  }  return null;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String01() throws Exception {  for (  String validValue : getValidValues()) {    try {      TrustManagerFactory.getInstance(validValue,(String)null);      fail();    } catch (    IllegalArgumentException expected) {    }    try {      TrustManagerFactory.getInstance(validValue,"");      fail();    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  private WindowsSecurityDescriptor(List<AclEntry> acl) throws IOException {  boolean initialized=false;  acl=new ArrayList<AclEntry>(acl);  sidList=new ArrayList<Long>(acl.size());  try {    int size=SIZEOF_ACL;    for (    AclEntry entry : acl) {      UserPrincipal user=entry.principal();      if (!(user instanceof WindowsUserPrincipals.User))       throw new ProviderMismatchException();      String sidString=((WindowsUserPrincipals.User)user).sidString();      try {        long pSid=ConvertStringSidToSid(sidString);        sidList.add(pSid);        size+=GetLengthSid(pSid) + Math.max(SIZEOF_ACCESS_ALLOWED_ACE,SIZEOF_ACCESS_DENIED_ACE);      } catch (      WindowsException x) {        throw new IOException("Failed to get SID for " + user.getName() + ": "+ x.errorString());      }    }    aclBuffer=NativeBuffers.getNativeBuffer(size);    sdBuffer=NativeBuffers.getNativeBuffer(SIZEOF_SECURITY_DESCRIPTOR);    InitializeAcl(aclBuffer.address(),size);    int i=0;    while (i < acl.size()) {      AclEntry entry=acl.get(i);      long pSid=sidList.get(i);      try {        encode(entry,pSid,aclBuffer.address());      } catch (      WindowsException x) {        throw new IOException("Failed to encode ACE: " + x.errorString());      }      i++;    }    InitializeSecurityDescriptor(sdBuffer.address());    SetSecurityDescriptorDacl(sdBuffer.address(),aclBuffer.address());    initialized=true;  } catch (  WindowsException x) {    throw new IOException(x.getMessage());  } finally {    if (!initialized)     release();  }}  }
class C{  @Override public void onSuccess(Map<String,List<String>> metadata){  checkNotSet();  this.metadata=metadata;}  }
class C{  public ScaleAndIndexes indexes(Collection<Integer> indexes){  return new ScaleAndIndexes(scale,Ints.toArray(indexes));}  }
class C{  @Override public void prepare() throws IOException {  super.prepare();  long totalSize=0;  for (  IStorageDescriptor descriptor : descriptors) {    totalSize+=descriptor.getSize();  }  setTotalSize(totalSize);  executorService.execute(new ReadTask());}  }
class C{  public boolean isNumberTop(){  assert (!isTop()) : "TOP BasedNumberElement has no number!";  return value.isTop();}  }
class C{  private static void readZoneInfoMap(DataInputStream din,Map<String,Object> zimap) throws IOException {  int size=din.readUnsignedShort();  String[] pool=new String[size];  for (int i=0; i < size; i++) {    pool[i]=din.readUTF().intern();  }  size=din.readUnsignedShort();  for (int i=0; i < size; i++) {    try {      zimap.put(pool[din.readUnsignedShort()],pool[din.readUnsignedShort()]);    } catch (    ArrayIndexOutOfBoundsException ex) {      throw new IOException("Corrupt zone info map");    }  }}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  public void testManagedBean() throws Exception {  String beanName="com.sun.faces.TestBean";  ManagedBeanInfo beanInfo=new ManagedBeanInfo(beanName,beanName,"session",null,null,null,null);  ApplicationFactory aFactory=(ApplicationFactory)FactoryFinder.getFactory(FactoryFinder.APPLICATION_FACTORY);  ApplicationImpl application=(ApplicationImpl)aFactory.getApplication();  ApplicationAssociate associate=ApplicationAssociate.getCurrentInstance();  BeanManager manager=associate.getBeanManager();  manager.register(beanInfo);  VariableResolver variableResolver=application.getVariableResolver();  Object result=variableResolver.resolveVariable(getFacesContext(),beanName);  assertTrue(result instanceof TestBean);}  }
class C{  public void startTimeoutTimer(){  timeoutTimer.start();}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,RequestParams params,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=new HttpPost(url);  if (params != null)   request.setEntity(paramsToEntity(params,responseHandler));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public static UUIDPersistentHandle makeHandle(final String value){  return new UUIDPersistentHandle(new UUID(value));}  }
class C{  public SparseLongArray(){  this(10);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (connectivity == null) {    throw new NullPointerException();  }  if (polynomials == null) {    throw new NullPointerException();  }  if (errorDistributions == null) {    throw new NullPointerException();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void unlockUI(ProcessInfo pi){  if (!ADialog.ask(0,panel,"VPaySelectPrint?","(" + pi.getSummary() + ")"))   return;  int AD_Form_ID=106;  FormFrame ff=new FormFrame();  ff.openForm(AD_Form_ID);  if (m_ps != null) {    VPayPrint pp=(VPayPrint)ff.getFormPanel();    pp.setPaySelection(m_ps.getC_PaySelection_ID());  }  ff.pack();  panel.setVisible(false);  AEnv.addToWindowManager(ff);  AEnv.showCenterScreen(ff);  this.dispose();}  }
class C{  public void removeNode(final Node node){  dirty=true;  if (node.state == OsmElement.STATE_DELETED) {    Log.d("StorageDelegator","removeNode: nore already deleted " + node.getOsmId());    return;  }  undo.save(node);  try {    if (node.state == OsmElement.STATE_CREATED) {      apiStorage.removeElement(node);    } else {      apiStorage.insertElementSafe(node);    }    removeWayNodes(node);    removeElementFromRelations(node);    currentStorage.removeNode(node);    node.updateState(OsmElement.STATE_DELETED);    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  private void configMediaPlayerState(){  LogUtils.d(TAG,"configMediaPlayerState. mAudioFocus=",mAudioFocus);  if (mAudioFocus == AUDIO_NO_FOCUS_NO_DUCK) {    if (mState == PlaybackStateCompat.STATE_PLAYING) {      pause();    }  } else {    if (mAudioFocus == AUDIO_NO_FOCUS_CAN_DUCK) {      mMediaPlayer.setVolume(VOLUME_DUCK,VOLUME_DUCK);    } else {      if (mMediaPlayer != null) {        mMediaPlayer.setVolume(VOLUME_NORMAL,VOLUME_NORMAL);      }    }    if (mPlayOnFocusGain) {      if (mMediaPlayer != null && !mMediaPlayer.isPlaying()) {        LogUtils.d(TAG,"configMediaPlayerState startMediaPlayer. seeking to ",mCurrentPosition);        if (mCurrentPosition == mMediaPlayer.getCurrentPosition()) {          mMediaPlayer.start();          mState=PlaybackStateCompat.STATE_PLAYING;        } else {          mMediaPlayer.seekTo(mCurrentPosition);          mState=PlaybackStateCompat.STATE_BUFFERING;        }      }      mPlayOnFocusGain=false;    }  }  if (mCallback != null) {    mCallback.onPlaybackStatusChanged(mState);  }}  }
class C{  public static Operator indexScan_Default(IndexRowType indexType,boolean reverse,IndexKeyRange indexKeyRange,IndexScanSelector indexScanSelector){  Ordering ordering=new Ordering();  int fields=indexType.nFields();  for (int f=0; f < fields; f++) {    ordering.append(new TPreparedField(indexType.typeAt(f),f),!reverse);  }  return indexScan_Default(indexType,indexKeyRange,ordering,indexScanSelector,1);}  }
class C{  public OutputStream createOutput(String filename){  try {    File file=new File(filename);    if (!file.isAbsolute()) {      file=new File(sketchPath(filename));    }    FileOutputStream fos=new FileOutputStream(file);    if (file.getName().toLowerCase().endsWith(".gz")) {      return new GZIPOutputStream(fos);    }    return fos;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  public static Pattern compile(String globPattern){  return new GlobPattern(globPattern).compiled();}  }
class C{  public void addPrefix(String prefix,boolean selected){  if (prefixAction == null) {    prefixAction=new UpdatePrefixListAction(listModel);  }  final JCheckBox cb=(JCheckBox)prefixList.add(new JCheckBox(prefix));  cb.setOpaque(false);  checkboxes.addElement(cb);  cb.setSelected(selected);  cb.addActionListener(prefixAction);  if (selected) {    listModel.addPrefix(prefix);  }  cb.addFocusListener(listFocusListener);}  }
class C{  public LessConstraint(double constraintValue){  super(Double.valueOf(constraintValue));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.058 -0500",hash_original_method="AD032216A82F0FAAB91D671673032B40",hash_generated_method="E7C35CDB9FE2C7A1F6746493D30D3D59") public void disconnected(){  if (false)   Log.v("ddm-hello","Disconnected!");}  }
class C{  public boolean deleteAttachmentPoint(DatapathId sw,OFPort port){  AttachmentPoint ap=new AttachmentPoint(sw,port,new Date(0));  if (this.oldAPs != null) {    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();    apList.addAll(this.oldAPs);    int index=apList.indexOf(ap);    if (index > 0) {      apList.remove(index);      this.oldAPs=apList;    }  }  if (this.attachmentPoints != null) {    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();    apList.addAll(this.attachmentPoints);    int index=apList.indexOf(ap);    if (index > 0) {      apList.remove(index);      this.attachmentPoints=apList;      return true;    }  }  return false;}  }
class C{  protected void showToast(String msg,final int duration){  Toast.makeText(getApplicationContext(),msg,Toast.LENGTH_SHORT).show();}  }
class C{  public void sendAmmoChange(int nEntity,int nWeapon,int nAmmo){  Object[] data={new Integer(nEntity),new Integer(nWeapon),new Integer(nAmmo)};  send(new Packet(Packet.COMMAND_ENTITY_AMMOCHANGE,data));}  }
class C{  public int size(){  return encodedNames.size();}  }
class C{  public static int indexHeaderLength(String codec,String suffix){  return headerLength(codec) + StringHelper.ID_LENGTH + 1+ suffix.length();}  }
class C{  public final CC push(){  return pushX().pushY();}  }
class C{  public int numProcessors(){  return m_processors;}  }
class C{  public MutableFloat(final Number value){  super();  this.value=value.floatValue();}  }
class C{  public static int parseRGB(FXGNode node,String value,String name){  Matcher m;  m=rgbPattern.matcher(value);  if (!m.matches()) {    throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidColorValue",name,value);  }  value=value.substring(1);  int a=255;  int r=Integer.parseInt(value.substring(0,2),16) & 0xFF;  int g=Integer.parseInt(value.substring(2,4),16) & 0xFF;  int b=Integer.parseInt(value.substring(4,6),16) & 0xFF;  return (a << 24) | (r << 16) | (g << 8)| b;}  }
class C{  @Category(FlakyTest.class) @Test public void testServerEventsInPeerSystem() throws Exception {  try {    doTestServerEventsInPeerSystem();  }  finally {    disconnectAllFromDS();  }}  }
class C{  public Doc_AllocationTax(MAccount DiscountAccount,BigDecimal DiscountAmt,MAccount WriteOffAccount,BigDecimal WriteOffAmt,boolean isSOTrx){  m_DiscountAccount=DiscountAccount;  m_DiscountAmt=DiscountAmt;  m_WriteOffAccount=WriteOffAccount;  m_WriteOffAmt=WriteOffAmt;  m_IsSOTrx=isSOTrx;}  }
class C{  public String toString(){  return this.propName;}  }
class C{  public static void main(String[] args){  SpringApplication.run(TransportationStarter.class,args);}  }
class C{  public void removeRange(int fromIndex,int toIndex){  if (fromIndex > toIndex) {    throw new IllegalArgumentException("fromIndex must be <= toIndex");  }  for (int i=toIndex; i >= fromIndex; i--) {    delegate.removeElementAt(i);  }  fireIntervalRemoved(this,fromIndex,toIndex);}  }
class C{  @Override public void roomLeave(IClient client,IScope room){  try {    log.debug("roomLeave " + client.getId() + " "+ room.getClients().size()+ " "+ room.getContextPath()+ " "+ room.getName());    RoomClient currentClient=this.clientListManager.getClientByStreamId(client.getId());    if (currentClient != null) {      log.debug("currentClient IS NOT NULL");      this.roomLeaveByScope(currentClient,room,true);    }  } catch (  Exception err) {    log.error("[roomLeave]",err);  }}  }
class C{  public void exportColumns(ImmutableBitSet selectedCols,ByteArray buf){  int pos=0;  for (int i=0; i < selectedCols.trueBitCount(); i++) {    int c=selectedCols.trueBitAt(i);    Preconditions.checkNotNull(cols[c].array());    System.arraycopy(cols[c].array(),cols[c].offset(),buf.array(),buf.offset() + pos,cols[c].length());    pos+=cols[c].length();  }  buf.setLength(pos);}  }
class C{  public static void rotateM(float[] m,int mOffset,float a,float x,float y,float z){synchronized (TEMP_MATRIX_ARRAY) {    setRotateM(TEMP_MATRIX_ARRAY,0,a,x,y,z);    multiplyMM(TEMP_MATRIX_ARRAY,16,m,mOffset,TEMP_MATRIX_ARRAY,0);    System.arraycopy(TEMP_MATRIX_ARRAY,16,m,mOffset,16);  }}  }
class C{  public void intersectWith(ParameterProperty targetDerefParamSet){  bits&=targetDerefParamSet.bits;}  }
class C{  public static String selectProject(Shell parentShell,String defaultValue){  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  ContainerSelectionDialog dialog=new ContainerSelectionDialog(parentShell,workspaceRoot,false,"Select new file container");  if (dialog.open() == ContainerSelectionDialog.OK) {    Object[] result=dialog.getResult();    if (result.length == 1) {      return ((Path)result[0]).toString();    }  }  return defaultValue;}  }
class C{  public void loadArgs(final int arg,final int count){  int index=getArgIndex(arg);  for (int i=0; i < count; ++i) {    Type t=argumentTypes[arg + i];    loadInsn(t,index);    index+=t.getSize();  }}  }
class C{  public static String[] fileToArray(File file,String label){  LinkedList<String> words=new LinkedList<>();  words.add(label);  BufferedReader in=openReader(file);  for (String line=readLine(in,file); line != null; line=readLine(in,file)) {    String[] lineWords=line.split("\\s+");    for (    String lineWord : lineWords)     if (!lineWord.matches("^\\s*$"))     words.add(lineWord);  }  closeReader(in,file);  return words.toArray(new String[words.size()]);}  }
class C{  public TerminalExample(String name,String description,Class<?> mainClass,String... resources){  super(name,description,mainClass,resources);}  }
class C{  public OMBitmap(int x1,int y1,int w,int h,byte[] bytes){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  x=x1;  y=y1;  width=w;  height=h;  bits=bytes;}  }
class C{  private CNodeColorizer(){}  }
class C{  @Override protected void onResume(){  super.onResume();  PurchasingManager.initiateGetUserIdRequest();}  }
class C{  public static void deleteGroupNodeComment(final SQLProvider provider,final INaviGroupNode groupNode,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE02469: provider argument can not be null");  Preconditions.checkNotNull(groupNode,"IE02470: groupNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02471: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02472: userId argument can not be null");  final String function=" { ? = call delete_group_node_comment(?, ?, ?) } ";  try {    final CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentStatement.registerOutParameter(1,Types.INTEGER);      deleteCommentStatement.setInt(2,groupNode.getId());      deleteCommentStatement.setInt(3,commentId);      deleteCommentStatement.setInt(4,userId);      deleteCommentStatement.execute();      deleteCommentStatement.getInt(1);      if (deleteCommentStatement.wasNull()) {        throw new IllegalArgumentException("Error: the comment id returned from the database was null");      }    }  finally {      deleteCommentStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public static Spider create(PageProcessor pageProcessor){  return new Spider(pageProcessor);}  }
class C{  private void editSelectedBusinessTransaction(){  ISelection selection=tableViewer.getSelection();  if (selection instanceof StructuredSelection) {    BusinessTransactionDefinition businessTransactionDef=(BusinessTransactionDefinition)((StructuredSelection)selection).getFirstElement();    if (businessTransactionDef.getId() == BusinessTransactionDefinition.DEFAULT_ID) {      return;    }    ApplicationDefinition appDefinition=getApplication();    String[] existingBusinessTxNames=new String[appDefinition.getBusinessTransactionDefinitions().size()];    int i=0;    for (    BusinessTransactionDefinition businessTx : appDefinition.getBusinessTransactionDefinitions()) {      existingBusinessTxNames[i]=businessTx.getBusinessTransactionDefinitionName();      i++;    }    EditNameDescriptionDialog dialog=new EditNameDescriptionDialog(Display.getCurrent().getActiveShell(),businessTransactionDef.getBusinessTransactionDefinitionName(),businessTransactionDef.getDescription(),"Edit Business Transaction","Enter new business transaction name and/or description",existingBusinessTxNames);    if (Dialog.OK == dialog.open()) {      businessTransactionDef.setBusinessTransactionDefinitionName(dialog.getName());      if (StringUtils.isNotBlank(dialog.getDescription())) {        businessTransactionDef.setDescription(dialog.getDescription());      }      updateContent(new StructuredSelection(businessTransactionDef));      markDirty();    }  }}  }
class C{  public HTMLWriter(Writer out,String docType,ResourceBundle i18n) throws IOException {  this(out,docType);  this.i18n=i18n;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SessionManagerImpl(){  log.debug("SessionManagerImpl created");  this.sessions=new HashMap<String,Session>();  this.sessionParticipants=new HashMap<String,String>();  this.sessionRequests=new HashMap<String,String>();  this.lock=new ReentrantLock();}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof LaggedFactor)) {    return false;  }  LaggedFactor c=(LaggedFactor)o;  return c.getFactor().equals(this.getFactor()) && c.getLag() == this.getLag();}  }
class C{  public static void validate(Map<String,String> info,Map<String,? extends Object> test,boolean reverse,ModelService model,String mode,Locale locale) throws ServiceValidationException {  if (info == null || test == null) {    throw new ServiceValidationException("Cannot validate NULL maps",model);  }  Set<String> testSet=test.keySet();  Set<String> keySet=info.keySet();  if (info.size() == 0 && test.size() == 0)   return;  if (reverse && !testSet.containsAll(keySet)) {    Set<String> missing=new TreeSet<String>(keySet);    missing.removeAll(testSet);    List<String> missingMsgs=new LinkedList<String>();    for (    String key : missing) {      String msg=model.getParam(key).getPrimaryFailMessage(locale);      if (msg == null) {        String errMsg=UtilProperties.getMessage(ServiceUtil.resource,"ModelService.following_required_parameter_missing",locale);        msg=errMsg + " [" + mode+ "] ["+ model.name+ "."+ key+ "]";      }      missingMsgs.add(msg);    }    List<String> missingCopy=new LinkedList<String>();    missingCopy.addAll(missing);    throw new ServiceValidationException(missingMsgs,model,missingCopy,null,mode);  }  if (!keySet.containsAll(testSet)) {    Set<String> extra=new TreeSet<String>(testSet);    extra.removeAll(keySet);    List<String> extraMsgs=new LinkedList<String>();    for (    String key : extra) {      ModelParam param=model.getParam(key);      String msg=null;      if (param != null) {        msg=param.getPrimaryFailMessage(locale);      }      if (msg == null) {        msg="Unknown parameter found: [" + model.name + "."+ key+ "]";      }      extraMsgs.add(msg);    }    List<String> extraCopy=new LinkedList<String>();    extraCopy.addAll(extra);    throw new ServiceValidationException(extraMsgs,model,null,extraCopy,mode);  }  List<String> typeFailMsgs=new LinkedList<String>();  for (  String key : testSet) {    ModelParam param=model.getParam(key);    Object testObject=test.get(key);    String infoType=info.get(key);    if (UtilValidate.isNotEmpty(param.validators)) {      for (      ModelParam.ModelParamValidator val : param.validators) {        if (UtilValidate.isNotEmpty(val.getMethodName())) {          try {            if (!typeValidate(val,testObject)) {              String msg=val.getFailMessage(locale);              if (msg == null) {                msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";              }              typeFailMsgs.add(msg);            }          } catch (          GeneralException e) {            Debug.logError(e,module);            String msg=param.getPrimaryFailMessage(locale);            if (msg == null) {              msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";            }            typeFailMsgs.add(msg);          }        } else {          if (!ObjectType.instanceOf(testObject,infoType,null)) {            String msg=val.getFailMessage(locale);            if (msg == null) {              msg="The following parameter failed validation: [" + model.name + "."+ key+ "]";            }            typeFailMsgs.add(msg);          }        }      }    } else {      if (!ObjectType.instanceOf(testObject,infoType,null)) {        String testType=testObject == null ? "null" : testObject.getClass().getName();        String msg="Type check failed for field [" + model.name + "."+ key+ "]; expected type is ["+ infoType+ "]; actual type is ["+ testType+ "]";        typeFailMsgs.add(msg);      }    }  }  if (typeFailMsgs.size() > 0) {    throw new ServiceValidationException(typeFailMsgs,model,mode);  }}  }
class C{  public static String join(final List params){  final int maxParamsToShow=20;  return params.size() <= maxParamsToShow ? join(params,", ") : format("%s, ... (%s more)",join(params.subList(0,maxParamsToShow)),params.size() - maxParamsToShow);}  }
class C{  public BandPassBuilder gridDensity(int density){  mGridDensity=density;  return this;}  }
class C{  private VariableDeclaration variables(int declType,int pos) throws IOException {  int end;  VariableDeclaration pn=new VariableDeclaration(pos);  pn.setType(declType);  pn.setLineno(ts.lineno);  String varjsdoc=getAndResetJsDoc();  if (varjsdoc != null) {    pn.setJsDoc(varjsdoc);  }  for (; ; ) {    AstNode destructuring=null;    Name name=null;    int tt=peekToken(), kidPos=ts.tokenBeg;    end=ts.tokenEnd;    if (tt == Token.LB || tt == Token.LC) {      destructuring=destructuringPrimaryExpr();      end=getNodeEnd(destructuring);      if (!(destructuring instanceof DestructuringForm))       reportError("msg.bad.assign.left",kidPos,end - kidPos);      markDestructuring(destructuring);    } else {      mustMatchToken(Token.NAME,"msg.bad.var");      name=createNameNode();      name.setLineno(ts.getLineno());      if (inUseStrictDirective) {        String id=ts.getString();        if ("eval".equals(id) || "arguments".equals(ts.getString())) {          reportError("msg.bad.id.strict",id);        }      }      defineSymbol(declType,ts.getString(),inForInit);    }    int lineno=ts.lineno;    String jsdoc=getAndResetJsDoc();    AstNode init=null;    if (matchToken(Token.ASSIGN)) {      init=assignExpr();      end=getNodeEnd(init);    }    VariableInitializer vi=new VariableInitializer(kidPos,end - kidPos);    if (destructuring != null) {      if (init == null && !inForInit) {        reportError("msg.destruct.assign.no.init");      }      vi.setTarget(destructuring);    } else {      vi.setTarget(name);    }    vi.setInitializer(init);    vi.setType(declType);    vi.setJsDoc(jsdoc);    vi.setLineno(lineno);    pn.addVariable(vi);    if (!matchToken(Token.COMMA))     break;  }  pn.setLength(end - pos);  return pn;}  }
class C{  public void java_net_InetAddressImpl_getHostByAddr(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public static String generateFileName(){  return new BigInteger(130,random).toString(32);}  }
class C{  public static AsymmetricKeyParameter createKey(byte[] privateKeyInfoData) throws IOException {  return createKey(PrivateKeyInfo.getInstance(ASN1Primitive.fromByteArray(privateKeyInfoData)));}  }
class C{  void write(ImageOutputStream ios) throws IOException {}  }
class C{  public static Enumeration sortEnumeration(java.util.Enumeration e){  return sortEnumeration(e,null);}  }
class C{  public static boolean supportsEs2(Context context){  final ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final ConfigurationInfo configurationInfo=activityManager.getDeviceConfigurationInfo();  return configurationInfo.reqGlEsVersion >= 0x20000;}  }
class C{  private String constructTcpInfo(InetAddress host){  String domain=host.getCanonicalHostName();  String address=host.getHostAddress();  if (domain.equals(address))   return "[" + address + "]"; else   return domain + " [" + address+ "]";}  }
class C{  public static String toString(ASN1ObjectIdentifier objectIdentifer){  String id=objectIdentifer.getId();  String name=oidToNameMapping.get(id);  if (name == null) {    return id;  }  return MessageFormat.format("{0} ({1})",name,id);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public void addByte(int val){  checksum+=val;}  }
class C{  public void printMatrixCell(LocalVariableMap variables,String[] args){  String varname=args[0];  int rowIndex, columnIndex;  try {    rowIndex=Integer.parseInt(args[1]);    columnIndex=Integer.parseInt(args[2]);  } catch (  Exception e) {    System.err.print("Invalid display cell arguments.");    return;  }  if (variables != null && !variables.keySet().isEmpty()) {    if (variables.get(varname) != null) {      if (variables.get(varname).getDataType() == DataType.MATRIX) {        double cellValue;        try {          MatrixObject mo=(MatrixObject)variables.get(varname);          if (mo.getStatusAsString().equals("EMPTY") && (OptimizerUtils.estimateSizeExactSparsity(mo.getNumRows(),mo.getNumColumns(),mo.getSparsity()) > OptimizerUtils.getLocalMemBudget())) {            System.err.println("ERROR: DML matrix/vector dimensions are too large to fit in main memory.");            return;          }          MatrixBlock mb=mo.acquireRead();          cellValue=mb.getValue(rowIndex,columnIndex);          mo.release();        } catch (        Exception e) {          System.err.println("Error processing DML matrix variable " + varname + ". Certain matrix operations are disabled due to memory constraints or read-only restrictions.");          return;        }        System.out.println(varname + "[" + rowIndex+ ","+ columnIndex+ "] = "+ cellValue);      } else       System.out.println("Variable \"" + varname + "\" is not a matrix or vector variable.");    } else     System.out.println("DML matrix variable \"" + varname + "\" is not in the current frame scope. Try \"a\" to list all variables within current frame scope.");  } else   System.out.println("Symbol table for current frame is empty");}  }
class C{  public AutoRotateDrawable(Drawable drawable,int interval,boolean clockwise){  super(Preconditions.checkNotNull(drawable));  mInterval=interval;  mClockwise=clockwise;}  }
class C{  @NoInline private static void throwNewIllegalArgumentException(){  throw new IllegalArgumentException();}  }
class C{  public static LogWriter createLogWriter(final Properties properties){  Properties nonDefault=properties;  if (nonDefault == null) {    nonDefault=new Properties();  }  DistributedTestUtils.addHydraProperties(nonDefault);  DistributionConfig dc=new DistributionConfigImpl(nonDefault);  LogWriter logger=LogWriterFactory.createLogWriterLogger(false,false,dc,false);  nonDefault.put(DistributionConfig.LOG_WRITER_NAME,logger);  return logger;}  }
class C{  public void addCachedObject(String key,CachingStrategy cachingStrategy){  Lock writeLock=cachingStrategy.lock().writeLock();  try {    writeLock.lock();    cachingStrategy.init();  }  finally {    writeLock.unlock();  }  cache.put(key,cachingStrategy);}  }
class C{  private static void createThreadPool(){  if (mThreadPoolSize <= 0) {    mExecutorService=Executors.newCachedThreadPool();  } else {    mExecutorService=Executors.newFixedThreadPool(mThreadPoolSize);  }}  }
class C{  public void copyTo(@Name("destination") int[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public final static short secondaryOrder(int order){  order=order & RBCollationTables.SECONDARYORDERMASK;  return ((short)(order >> RBCollationTables.SECONDARYORDERSHIFT));}  }
class C{  protected void uninstallDefaults(JComponent c){  SynthContext context=getContext(c,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;}  }
class C{  public static <A>MonoTValue<A> of(final AnyMValue<Mono<A>> monads){  return new MonoTValue<>(monads);}  }
class C{  public LetterView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  init();}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ExportableElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == AnnotableElement.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == AnnotableScriptElement.class) {switch (derivedFeatureID) {case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__ANNOTATION_LIST:  return N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST;default :return -1;}}if (baseClass == ModifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__DECLARED_MODIFIERS:return N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @SuppressFBWarnings(value="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE",justification="File.listFiles() will return null if the File instance is not a directory. " + "Null dereference is not a possibility here since we validate sourceDirectory is " + "directory via sourceDirectory.isDirectory()") public static void zipDirectory(File sourceDirectory,OutputStream outputStream) throws IOException {  checkNotNull(sourceDirectory);  checkNotNull(outputStream);  checkArgument(sourceDirectory.isDirectory(),"%s is not a valid directory",sourceDirectory.getAbsolutePath());  ZipOutputStream zos=new ZipOutputStream(outputStream);  for (  File file : sourceDirectory.listFiles()) {    zipDirectoryInternal(file,"",zos);  }  zos.finish();}  }
class C{  @Override public boolean containsKey(Object key){  waitForKey(key);  return super.containsKey(key);}  }
class C{  public PerlinNoiseGenerator(long seed){  this(new Random(seed));}  }
class C{  public static String[] readNamesFromFont(final int type,final String subFont,final int mode) throws Exception {  String[] fontNames=new String[1];  fontNames[0]="";  if (type == TRUETYPE || type == TRUETYPE_COLLECTION) {    fontNames=TTGlyphs.readFontNames(new FontData(subFont),mode);  } else   if (type == TYPE1) {    fontNames=T1Glyphs.readFontNames(new FontData(subFont));  }  return fontNames;}  }
class C{  public void centerOnHex(Coords c){  if (c == null)   return;  if (GUIPreferences.getInstance().getBoolean("SOFTCENTER")) {    Point p=getCentreHexLocation(c);    softCenterTarget.setLocation((double)p.x / boardSize.getWidth(),(double)p.y / boardSize.getHeight());    double w=scrollpane.getViewport().getWidth();    double h=scrollpane.getViewport().getHeight();    double bw=boardSize.getWidth();    double bh=boardSize.getHeight();    double minX=(w / 2 - HEX_W) / bw;    double minY=(h / 2 - HEX_H) / bh;    double maxX=(bw + HEX_W - w / 2) / bw;    double maxY=(bh + HEX_H - h / 2) / bh;    softCenterTarget.setLocation(Math.min(softCenterTarget.getX(),maxX),Math.min(softCenterTarget.getY(),maxY));    softCenterTarget.setLocation(Math.max(softCenterTarget.getX(),minX),Math.max(softCenterTarget.getY(),minY));    double[] v=getVisibleArea();    oldCenter.setLocation((v[0] + v[2]) / 2,(v[1] + v[3]) / 2);    waitTimer=0;    isSoftCentering=true;  } else {    Point p=getCentreHexLocation(c);    centerOnPointRel((double)p.x / boardSize.getWidth(),(double)p.y / boardSize.getHeight());  }}  }
class C{  public void pop(){  mv.visitInsn(Opcodes.POP);}  }
class C{  public BasicHeaderElementIterator(final HeaderIterator headerIterator,final HeaderValueParser parser){  if (headerIterator == null) {    throw new IllegalArgumentException("Header iterator may not be null");  }  if (parser == null) {    throw new IllegalArgumentException("Parser may not be null");  }  this.headerIt=headerIterator;  this.parser=parser;}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public static double fahrenheitToCelsius(double fahrenheit){  return (5.0 / 9) * (fahrenheit - 32);}  }
class C{  public static <T extends NativeObject>T readFromNative(T instance){  instance.typeInfo.readFromNative(instance);  return instance;}  }
class C{  public static void renameCubeForDeletion(int partitionCount,String storePath,String schemaName,String cubeName){  String cubeNameWithPartition="";  String schemaNameWithPartition="";  String fullPath="";  String newFilePath="";  String newFileName="";  Callable<Void> c=null;  long time=System.currentTimeMillis();  FileFactory.FileType fileType=null;  ExecutorService executorService=Executors.newFixedThreadPool(10);  for (int i=0; i < partitionCount; i++) {    schemaNameWithPartition=schemaName + '_' + i;    cubeNameWithPartition=cubeName + '_' + i;    newFileName=cubeNameWithPartition + '_' + time;    fullPath=storePath + File.separator + schemaNameWithPartition+ File.separator+ cubeNameWithPartition;    newFilePath=storePath + File.separator + schemaNameWithPartition+ File.separator+ newFileName;    fileType=FileFactory.getFileType(fullPath);    try {      if (FileFactory.isFileExist(fullPath,fileType)) {        CarbonFile file=FileFactory.getCarbonFile(fullPath,fileType);        boolean isRenameSuccessfull=file.renameTo(newFilePath);        if (!isRenameSuccessfull) {          LOGGER.error("Problem renaming the cube :: " + fullPath);          c=new DeleteCube(file);          executorService.submit(c);        } else {          c=new DeleteCube(FileFactory.getCarbonFile(newFilePath,fileType));          executorService.submit(c);        }      }    } catch (    IOException e) {      LOGGER.error("Problem renaming the cube :: " + fullPath);    }  }  executorService.shutdown();}  }
class C{  @Deprecated public static String toString(Match match){  return "";}  }
class C{  public CookieManager(CookieStore store,CookiePolicy cookiePolicy){  this.store=store == null ? new CookieStoreImpl() : store;  policy=cookiePolicy == null ? CookiePolicy.ACCEPT_ORIGINAL_SERVER : cookiePolicy;}  }
class C{  private String createZipFile(List<String> expected,String filename,String[]... fieldsEntries) throws Exception {  File tmpFile=tempFolder.resolve(filename).toFile();  String tmpFileName=tmpFile.getPath();  ZipOutputStream out=new ZipOutputStream(new FileOutputStream(tmpFile));  PrintStream writer=new PrintStream(out,true);  int index=0;  for (  String[] entry : fieldsEntries) {    out.putNextEntry(new ZipEntry(Integer.toString(index)));    for (    String field : entry) {      writer.println(field);      expected.add(field);    }    out.closeEntry();    index++;  }  writer.close();  out.close();  return tmpFileName;}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public static long longFromBase64(String value){  int pos=0;  long longVal=base64Values[value.charAt(pos++)];  int len=value.length();  while (pos < len) {    longVal<<=6;    longVal|=base64Values[value.charAt(pos++)];  }  return longVal;}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  public void testBug69290() throws Exception {  String[] testStepDescription=new String[]{"MySQL MetaData","I__S MetaData"};  Connection connUseIS=getConnectionWithProps("useInformationSchema=true");  Connection connNullAll=getConnectionWithProps("nullCatalogMeansCurrent=false");  Connection connUseISAndNullAll=getConnectionWithProps("useInformationSchema=true,nullCatalogMeansCurrent=false");  final String testCatalog=this.conn.getCatalog();  Connection[] testConnections=new Connection[]{this.conn,connUseIS};  final List<String> tableTypes=Arrays.asList(new String[]{"LOCAL TEMPORARY","SYSTEM TABLE","SYSTEM VIEW","TABLE","VIEW"});  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    this.rs=testDbMetaData.getTableTypes();    int idx=0;    while (this.rs.next()) {      String message=testStepDescription[i] + ", table type '" + this.rs.getString("TABLE_TYPE")+ "'";      if (idx >= tableTypes.size()) {        fail(message + " not expected.");      }      assertEquals(message,tableTypes.get(idx++),this.rs.getString("TABLE_TYPE"));    }  }  createTable("testBug69290_table","(c1 INT)");  createView("testBug69290_view","AS SELECT * FROM testBug69290_table WHERE c1 > 1");  int[][] countResults=new int[][]{{0,0,0},{0,0,0}};  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    this.rs=testDbMetaData.getTables("information_schema",null,"%",null);    while (this.rs.next()) {      assertEquals(testStepDescription[i] + ", 'information_schema' catalog/schema, wrong table type for '" + this.rs.getString("TABLE_NAME")+ "'.","SYSTEM VIEW",this.rs.getString("TABLE_TYPE"));      countResults[i][0]++;    }    this.rs=testDbMetaData.getTables("mysql",null,"%",null);    while (this.rs.next()) {      assertEquals(testStepDescription[i] + ", 'mysql' catalog/schema, wrong table type for '" + this.rs.getString("TABLE_NAME")+ "'.","SYSTEM TABLE",this.rs.getString("TABLE_TYPE"));      countResults[i][1]++;    }    this.rs=testDbMetaData.getTables("performance_schema",null,"%",null);    while (this.rs.next()) {      assertEquals(testStepDescription[i] + ", 'performance_schema' catalog/schema, wrong table type for '" + this.rs.getString("TABLE_NAME")+ "'.","SYSTEM TABLE",this.rs.getString("TABLE_TYPE"));      countResults[i][2]++;    }    this.rs=testDbMetaData.getTables(testCatalog,null,"testBug69290_%",null);    assertTrue(testStepDescription[i] + ", '" + testCatalog+ "' catalog/schema, expected row from getTables().",this.rs.next());    assertEquals(testStepDescription[i] + ", '" + testCatalog+ "' catalog/schema, wrong table type for '"+ this.rs.getString("TABLE_NAME")+ "'.","TABLE",this.rs.getString("TABLE_TYPE"));    assertTrue(testStepDescription[i] + ", '" + testCatalog+ "' catalog/schema, expected row from getTables().",this.rs.next());    assertEquals(testStepDescription[i] + ", '" + testCatalog+ "' catalog/schema, wrong table type for '"+ this.rs.getString("TABLE_NAME")+ "'.","VIEW",this.rs.getString("TABLE_TYPE"));  }  assertTrue("The number of results from getTables() MySQl(" + countResults[0][0] + ") and I__S("+ countResults[1][0]+ ") should be the same for 'information_schema' catalog/schema.",countResults[0][0] == countResults[1][0]);  assertTrue("The number of results from getTables() MySQl(" + countResults[0][1] + ") and I__S("+ countResults[1][1]+ ") should be the same for 'mysql' catalog/schema.",countResults[0][1] == countResults[1][1]);  assertTrue("The number of results from getTables() MySQl(" + countResults[0][2] + ") and I__S("+ countResults[1][2]+ ") should be the same for 'performance_schema' catalog/schema.",countResults[0][2] == countResults[1][2]);  testConnections=new Connection[]{connNullAll,connUseISAndNullAll};  countResults=new int[][]{{0,0,0,0,0},{0,0,0,0,0}};  for (int i=0; i < testStepDescription.length; i++) {    DatabaseMetaData testDbMetaData=testConnections[i].getMetaData();    int j=0;    for (    String tableType : tableTypes) {      this.rs=testDbMetaData.getTables(null,null,"%",new String[]{tableType});      while (this.rs.next()) {        assertEquals(testStepDescription[i] + ", table type filter '" + tableType+ "', wrong table type for '"+ this.rs.getString("TABLE_NAME")+ "'.",tableType,this.rs.getString("TABLE_TYPE"));        countResults[i][j]++;      }      j++;    }  }  int i=0;  for (  String tableType : tableTypes) {    assertTrue("The number of results from getTables() MySQl(" + countResults[0][i] + ") and I__S("+ countResults[1][i]+ ") should be the same for '"+ tableType+ "' table type filter.",countResults[0][i] == countResults[1][i]);    i++;  }}  }
class C{  protected void updateMetrics(){  host=(RSyntaxTextArea)getContainer();  Font f=host.getFont();  if (font != f) {    calculateLongestLine();  }}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  public MilStd2525IconRetriever(String retrieverPath){  super(retrieverPath);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  private static boolean isBrokenPsiClass(PsiClass psiClass){  return (psiClass == null || psiClass instanceof PsiAnonymousClass || psiClass instanceof PsiSyntheticClass);}  }
class C{  public static void toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders,HttpHeaders out){  final Iterator<Entry<CharSequence,CharSequence>> i=inHeaders.iteratorCharSequence();  while (i.hasNext()) {    final Entry<CharSequence,CharSequence> entry=i.next();    final AsciiString aName=AsciiString.of(entry.getKey()).toLowerCase();    if (!HTTP_TO_HTTP2_HEADER_BLACKLIST.contains(aName)) {      if (aName.contentEqualsIgnoreCase(HttpHeaderNames.TE) && !AsciiString.contentEqualsIgnoreCase(entry.getValue(),HttpHeaderValues.TRAILERS)) {        continue;      }      out.add(aName,entry.getValue().toString());    }  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected Engine engineUnsafe(){  return this.currentEngineReference.get();}  }
class C{  public static boolean hasCycles(final HGHandle root,final HGALGenerator adjencyGenerator){  HGAtomSet visited=new HGAtomSet();  Queue<HGHandle> to_explore=new LinkedList<HGHandle>();  to_explore.add(root);  while (!to_explore.isEmpty()) {    HGHandle next=to_explore.remove();    visited.add(next);    HGSearchResult<Pair<HGHandle,HGHandle>> rs=adjencyGenerator.generate(next);    try {      while (rs.hasNext()) {        Pair<HGHandle,HGHandle> x=rs.next();        if (visited.contains(x.getSecond()))         return true;        to_explore.add(x.getSecond());      }    }  finally {      rs.close();    }  }  return false;}  }
class C{  public static void perform(IR ir){  if (DEBUG) {    report("Creating an AnnotatedLSTGraph for " + ir.method);  }  ir.HIRInfo.loopStructureTree=new AnnotatedLSTGraph(ir,ir.HIRInfo.loopStructureTree);  if (DEBUG) {    report(ir.HIRInfo.loopStructureTree.toString());  }}  }
class C{  public static long select(final long[] arr,int lo,int hi,final int pivot){  while (hi > lo) {    int j=partition(arr,lo,hi);    if (j == pivot) {      return arr[pivot];    }    if (j > pivot) {      hi=j - 1;    } else {      lo=j + 1;    }  }  return arr[pivot];}  }
class C{  protected void checkIfDone(){  boolean finished=!stillWaiting();  if (finished) {    finished();  }}  }
class C{  public ArrayList<ShortcutInfo> bindItems(ArrayList<ShortcutInfo> items){  ArrayList<View> icons=new ArrayList<View>();  ArrayList<ShortcutInfo> extra=new ArrayList<ShortcutInfo>();  for (  ShortcutInfo item : items) {    if (!ALLOW_FOLDER_SCROLL && icons.size() >= mMaxItemsPerPage) {      extra.add(item);    } else {      icons.add(createNewView(item));    }  }  arrangeChildren(icons,icons.size(),false);  return extra;}  }
class C{  public static void generateHashFunctions() throws IOException {  File hashFile=new File(hashFunctionsFileName);  if (!hashFile.exists()) {    ObjectOutputStream oos=new ObjectOutputStream(new GZIPOutputStream(new FileOutputStream(hashFile)));    oos.writeInt(bits);    oos.writeInt(dimensions);    oos.writeInt(numFunctionBundles);    for (int c=0; c < numFunctionBundles; c++) {      for (int i=0; i < bits; i++) {        for (int j=0; j < dimensions; j++) {          oos.writeFloat((float)(Math.random() * w - w / 2));        }      }    }    oos.close();  } else {    System.err.println("Hashes could not be written: " + hashFunctionsFileName + " already exists");  }}  }
class C{  public void addFieldToIndex(String idxName,String field,int orderNum,boolean descending) throws IgniteCheckedException {  IndexDescriptor desc=indexes.get(idxName);  if (desc == null)   desc=addIndex(idxName,SORTED);  desc.addField(field,orderNum,descending);}  }
class C{  public Table findTable(int tableID) throws SQLException {  return findTable(tableID,null);}  }
class C{  public void asyncLock(Image internal){}  }
class C{  public boolean nextDomain(){  return nextElement(RDE_DOMAIN_URI,"domain");}  }
class C{  public void insertBefore(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=insn;  } else {    prev.next=insn;  }  location.prev=insn;  insn.next=location;  insn.prev=prev;  cache=null;  insn.index=0;}  }
class C{  public static boolean validateLockForCloseReg(Session session,Integer bookID,int fdrid,AuthenticationUser user,ScrOfic scrOfic,String entidad) throws HibernateException, Exception {  boolean result=false;  int timeLockRegisterUser=0;  try {    timeLockRegisterUser=Integer.parseInt(Configurator.getInstance().getProperty(ConfigurationKeys.KEY_DESKTOP_TIME_LOCK_REGISTER_USER)) * 1000;  } catch (  Exception e) {    log.error("Error al obtener el parametro de configuracion: timeLockRegisterUser");    timeLockRegisterUser=80640000;  }  AxFdrhEntity axFdrhEntity=null;  List listIdocfdrstat=ISicresQueries.getIdocfdrstat(session,bookID,fdrid);  Timestamp currentDate=DBEntityDAOFactory.getCurrentDBEntityDAO().getDBServerDate(entidad);  if (listIdocfdrstat != null && !listIdocfdrstat.isEmpty()) {    result=getLockRegByUser(session,user,timeLockRegisterUser,listIdocfdrstat,currentDate);  } else {    result=true;  }  axFdrhEntity=new AxFdrhEntity();  axFdrhEntity.updateAccessControl(bookID,user.getId().intValue(),currentDate,fdrid,entidad);  return result;}  }
class C{  public String toString(){  calculateDerived();  return "Count   " + Utils.doubleToString(count,8) + '\n'+ "Min     "+ Utils.doubleToString(min,8)+ '\n'+ "Max     "+ Utils.doubleToString(max,8)+ '\n'+ "Sum     "+ Utils.doubleToString(sum,8)+ '\n'+ "SumSq   "+ Utils.doubleToString(sumSq,8)+ '\n'+ "Mean    "+ Utils.doubleToString(mean,8)+ '\n'+ "StdDev  "+ Utils.doubleToString(stdDev,8)+ '\n';}  }
class C{  public UnresolvedFunctionCall(FunctionInterface caller,FunctionInterface called,UnitInterface callerUnit){  this.caller=caller;  this.called=called;  this.callerUnit=callerUnit;}  }
class C{  public boolean match(QualifiedName node,Object other){  if (!(other instanceof QualifiedName)) {    return false;  }  QualifiedName o=(QualifiedName)other;  return (safeSubtreeMatch(node.getQualifier(),o.getQualifier()) && safeSubtreeMatch(node.getName(),o.getName()));}  }
class C{  private void initStaticResourcesProductionFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering static resources production Filter");  FilterRegistration.Dynamic staticResourcesProductionFilter=servletContext.addFilter("staticResourcesProductionFilter",new StaticResourcesProductionFilter());  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/index.html");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/assets/*");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/scripts/*");  staticResourcesProductionFilter.setAsyncSupported(true);}  }
class C{  private String readQueryString(String queryResource) throws RepositoryException, IOException {  InputStream stream=SPARQLServiceEvaluationTest.class.getResourceAsStream(queryResource);  try {    return IOUtil.readString(new InputStreamReader(stream,"UTF-8"));  }  finally {    stream.close();  }}  }
class C{  public CacheReflectionTmLookup(String cls,String mtd){  A.notNull(cls,"cls");  A.notNull(mtd,"mtd");  this.cls=cls;  this.mtd=mtd;}  }
class C{  private Replace parseReplace(){  Replace command=new Replace(session);  currentPrepared=command;  read("INTO");  Table table=readTableOrView();  command.setTable(table);  if (readIf("(")) {    if (isSelect()) {      command.setQuery(parseSelect());      read(")");      return command;    }    Column[] columns=parseColumnList(table);    command.setColumns(columns);  }  if (readIf("VALUES")) {    do {      ArrayList<Expression> values=New.arrayList();      read("(");      if (!readIf(")")) {        do {          if (readIf("DEFAULT")) {            values.add(null);          } else {            values.add(readExpression());          }        } while (readIfMore());      }      command.addRow(values.toArray(new Expression[values.size()]));    } while (readIf(","));  } else {    command.setQuery(parseSelect());  }  return command;}  }
class C{  public void move(){  int newX=getX() + offsetX;  int newY=getY() + offsetY;  if (gp instanceof HorizontalGrabPoint) {    ((HorizontalGrabPoint)gp).set(newX,newY,true);  } else   if (gp instanceof VerticalGrabPoint) {    ((VerticalGrabPoint)gp).set(newX,newY,true);  } else {    gp.set(newX,newY);  }  if (gp instanceof OffsetGrabPoint) {    ((OffsetGrabPoint)gp).moveOffsets();  }}  }
class C{  public static void writeDescriptor(Descriptor descriptor,File file,String encoding) throws IOException {  writeDescriptor(descriptor,file,encoding,false);}  }
class C{  public void printil(String s){  javaLine++;  writer.print(SPACES.substring(0,indent));  writer.println(s);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  init();  LookupTables.setupItypes(request,true);}  }
class C{  public ShipmentCompleteOrderEventHandlerImpl(final PaymentProcessorFactory paymentProcessorFactory){  this.paymentProcessorFactory=paymentProcessorFactory;}  }
class C{  public BufferedImageRenderPolicy(){  super();}  }
class C{  public void deleteFile() throws IOException {  CloseableUtils.tryToClose(mOut);  Uri fileToDelete=getUri();  if (ContentResolver.SCHEME_FILE.equals(fileToDelete.getScheme())) {    File file=new File(fileToDelete.getPath());    if (!file.delete()) {      throw new IOException("Unable to delete file: " + file.getAbsolutePath());    }  } else {    throw new IOException("Not possible to delete file: " + fileToDelete);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getAllArtists();}  }
class C{  int encrypt(byte[] plain,int plainOffset,int plainLen,byte[] cipher,int cipherOffset){  if ((plainLen % numBytes) != 0) {    throw new ProviderException("Internal error in input buffering");  }  int nShift=blockSize - numBytes;  int loopCount=plainLen / numBytes;  for (; loopCount > 0; plainOffset+=numBytes, cipherOffset+=numBytes, loopCount--) {    embeddedCipher.encryptBlock(register,0,k,0);    if (nShift != 0) {      System.arraycopy(register,numBytes,register,0,nShift);    }    for (int i=0; i < numBytes; i++) {      register[nShift + i]=cipher[i + cipherOffset]=(byte)(k[i] ^ plain[i + plainOffset]);    }  }  return plainLen;}  }
class C{  public static void storePrefs(final PreferencesManager preferencesManager,final KeymapValuesHolder valuesHolder){  final String keymapPrefAsJson=preferencesManager.getValue(KEYMAP_PREF_KEY);  JSONObject prefObject;  if (keymapPrefAsJson == null) {    prefObject=new JSONObject();  } else {    final JSONValue parseResult=JSONParser.parseStrict(keymapPrefAsJson);    prefObject=parseResult.isObject();  }  for (  final Entry<EditorType,Keymap> entry : valuesHolder) {    if (entry.getKey() != null && entry.getValue() != null) {      prefObject.put(entry.getKey().getEditorTypeKey(),new JSONString(entry.getValue().getKey()));    }  }  final String newJson=prefObject.toString();  preferencesManager.setValue(KEYMAP_PREF_KEY,newJson);}  }
class C{  public boolean isIncludeInSenderChannel(){  return includeInSenderChannel;}  }
class C{  public void removeLoggingListener(final LoggingListener loggingListener){  this.loggingListeners.remove(loggingListener);}  }
class C{  public NicknameFeed retrievePageOfNicknames(String startNickname) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving one page of nicknames" + (startNickname != null ? " starting at " + startNickname : "") + ".");  URL retrieveUrl=new URL(domainUrlBase + "nickname/" + SERVICE_VERSION+ "/");  AppsForYourDomainQuery query=new AppsForYourDomainQuery(retrieveUrl);  query.setStartNickname(startNickname);  return nicknameService.query(query,NicknameFeed.class);}  }
class C{  public static <T>T fromJsonString(String jsonString,Class<T> clazz){  try {    return getGson().fromJson(jsonString,clazz);  } catch (  Throwable var3) {    var3.printStackTrace();    return null;  }}  }
class C{  private void checkAlpha(Composite composite){  if (composite instanceof AlphaComposite) {    AlphaComposite alphaComposite=(AlphaComposite)composite;    float alpha=alphaComposite.getAlpha();    int rule=alphaComposite.getRule();    if (alpha != 1.0 || (rule != AlphaComposite.SRC && rule != AlphaComposite.SRC_OVER)) {      mHasCompositing=true;    }  } else {    mHasCompositing=true;  }}  }
class C{  public void scrollToCurrentLocation(){  if (!topmostLayer.isVisible()) {    Log.i(TAG,"Location pin is not visible. Scroll to current location skipped");    return;  }  PositionMarker pin=(PositionMarker)topmostLayer.getMapObject(POS_PIN_ID);  Point tempPoint=(pin.getPosition());  scrollMapTo(tempPoint);}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static Settings init(){  return settings;}  }
class C{  public static final void frontEndStatistics(SpecObj spec){}  }
class C{  public Row next(){  Row r;  if (file == null) {    r=list.get(index++);  } else {    if (listIndex >= list.size()) {      list.clear();      listIndex=0;      Data buff=rowBuff;      buff.reset();      int min=Constants.FILE_BLOCK_SIZE;      file.readFully(buff.getBytes(),0,min);      int len=buff.readInt() * Constants.FILE_BLOCK_SIZE;      buff.checkCapacity(len);      if (len - min > 0) {        file.readFully(buff.getBytes(),min,len - min);      }      while (true) {        r=readRow(buff);        if (r == null) {          break;        }        list.add(r);      }    }    index++;    r=list.get(listIndex++);  }  return r;}  }
class C{  public GPSPoint(int vehID,long time,int status,Coordinate c){  this.vehID=vehID;  this.status=status;  this.coordinate=c;  GregorianCalendar gc=new GregorianCalendar(TimeZone.getTimeZone(SA_TIME_ZONE),new Locale(SA_LANGUAGE,SA_CODE));  gc.setTimeInMillis(time * 1000);  this.time=gc;}  }
class C{  private void showModalOnEDT(boolean isModal){  assert SwingUtilities.isEventDispatchThread();  init();  abortDialog.setModal(isModal);  abortDialog.setVisible(true);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("weight")) {    final int oldWeight=weight;    weight=changes.getInt("weight");    if (weight > oldWeight) {      playRandomSoundFromCategory(SoundLayer.CREATURE_NOISE.groupName,"eat");    }    fireChange(PROP_WEIGHT);  }}  }
class C{  public static Plane constructNormalizedZPlane(final double x,final double y){  if (Math.abs(x) < MINIMUM_RESOLUTION && Math.abs(y) < MINIMUM_RESOLUTION)   return null;  final double denom=1.0 / Math.sqrt(x * x + y * y);  return new Plane(y * denom,-x * denom,0.0,0.0);}  }
class C{  protected static boolean isValidSegment(String segment){  int size=segment.length();  if (size == 0)   return false;  for (int i=0; i < size; i++) {    char c=segment.charAt(i);    if (c == '/')     return false;  }  return true;}  }
class C{  void shiftPc(int where,int gapLength,boolean exclusive){  int n=tableLength();  for (int i=0; i < n; ++i) {    int pos=i * 4 + 2;    int pc=ByteArray.readU16bit(info,pos);    if (pc > where || (exclusive && pc == where))     ByteArray.write16bit(pc + gapLength,info,pos);  }}  }
class C{  public CustomFile(final String fileName,final String baseSoftwareModuleName,final String baseSoftwareModuleVersion){  this.fileName=fileName;  this.baseSoftwareModuleName=baseSoftwareModuleName;  this.baseSoftwareModuleVersion=baseSoftwareModuleVersion;}  }
class C{  public LinkedCaseInsensitiveMap(){  this((Locale)null);}  }
class C{  private List<Field<?>> computeProjection(String[] projectionIn){  List<Field<?>> projection=null;  if (projectionMap == null) {    if (strictMode) {      throw new IllegalStateException("Strict mode requires a projection map to be set");    }    if (projectionIn != null && projectionIn.length > 0) {      projection=new ArrayList<>(projectionIn.length);      for (      String expression : projectionIn) {        projection.add(Field.field(expression));      }    }  } else {    if (projectionIn == null || projectionIn.length == 0) {      projection=projectionMap.getDefaultProjection();    } else {      projection=new ArrayList<>(projectionIn.length);      for (      String expression : projectionIn) {        Field<?> column=projectionMap.get(expression);        if (column != null) {          projection.add(column);        } else         if (strictMode) {          throw new IllegalArgumentException("Invalid column: " + expression);        }      }    }  }  return projection;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void project(float[] x,float[] y,float[] p,float[] div){  float fact=-0.5f / width;  for (int i=1, idx=1 + totalWidth, j=1; j <= height; ) {    div[idx]=(x[idx + 1] - x[idx - 1] + y[idx + totalWidth] - y[idx - totalWidth]) * fact;    p[idx]=0;    if (i < width) {      i++;      idx++;    } else {      i=1;      j++;      idx+=3;    }  }  setBoundary(0,div);  setBoundary(0,p);  linearSolver(0,p,div,1,4);  fact=-0.5f * width;  for (int i=1, idx=1 + totalWidth, j=1; j <= height; ) {    x[idx]+=fact * (p[idx + 1] - p[idx - 1]);    y[idx]+=fact * (p[idx + totalWidth] - p[idx - totalWidth]);    if (i < width) {      i++;      idx++;    } else {      i=1;      idx+=3;      j++;    }  }  setBoundary(1,x);  setBoundary(2,y);}  }
class C{  public static void uiImpl(){  UIManager.put("Frame.icon",__IconFactory__.getInstance().getFrameIcon_16_16());  UIManager.put("Frame.iconifyIcon",__IconFactory__.getInstance().getIconfiedIcon());  UIManager.put("Frame.iconifyIcon_rover",__IconFactory__.getInstance().getIconfiedIcon_rover());  UIManager.put("Frame.iconifyIcon_pressed",__IconFactory__.getInstance().getIconfiedIcon_pressed());  UIManager.put("Frame.minimizeIcon",__IconFactory__.getInstance().getFrameMinIcon());  UIManager.put("Frame.minimizeIcon_rover",__IconFactory__.getInstance().getFrameMinIcon_rover());  UIManager.put("Frame.minimizeIcon_pressed",__IconFactory__.getInstance().getFrameMinIcon_pressed());  UIManager.put("Frame.maximizeIcon",__IconFactory__.getInstance().getFrameMaxIcon());  UIManager.put("Frame.maximizeIcon_rover",__IconFactory__.getInstance().getFrameMaxIcon_rover());  UIManager.put("Frame.maximizeIcon_pressed",__IconFactory__.getInstance().getFrameMaxIcon_pressed());  UIManager.put("Frame.closeIcon",__IconFactory__.getInstance().getFrameCloseIcon());  UIManager.put("Frame.closeIcon_rover",__IconFactory__.getInstance().getFrameCloseIcon_rover());  UIManager.put("Frame.closeIcon_pressed",__IconFactory__.getInstance().getFrameCloseIcon_pressed());  UIManager.put("Frame.setupIcon",__IconFactory__.getInstance().getFrameSetupIcon());  UIManager.put("activeCaptionText",new ColorUIResource(BeautyEyeLNFHelper.activeCaptionTextColor));  UIManager.put("inactiveCaptionText",new ColorUIResource(BEUtils.getColor(BeautyEyeLNFHelper.activeCaptionTextColor,-49,-27,-7)));  UIManager.put("RootPaneUI",BERootPaneUI.class.getName());  UIManager.put("RootPane.defaultButtonWindowKeyBindings",new Object[]{"ENTER","press","released ENTER","release","ctrl ENTER","press","ctrl released ENTER","release"});  Object dialogBorder=new BorderUIResource(BeautyEyeLNFHelper.__getFrameBorder());  UIManager.put("RootPane.frameBorder",dialogBorder);  UIManager.put("RootPane.plainDialogBorder",dialogBorder);  UIManager.put("RootPane.informationDialogBorder",dialogBorder);  UIManager.put("RootPane.errorDialogBorder",dialogBorder);  UIManager.put("RootPane.colorChooserDialogBorder",dialogBorder);  UIManager.put("RootPane.fileChooserDialogBorder",dialogBorder);  UIManager.put("RootPane.questionDialogBorder",dialogBorder);  UIManager.put("RootPane.warningDialogBorder",dialogBorder);}  }
class C{  private ConcurrentSkipListMap.Node<K,V> loNode(){  if (lo == null)   return m.findFirst(); else   if (loInclusive)   return m.findNear(lo,GT | EQ); else   return m.findNear(lo,GT);}  }
class C{  public static double nextAfter(final double start,final double direction){  if (Double.isNaN(start) || Double.isNaN(direction)) {    return Double.NaN;  }  if (start == direction) {    return direction;  }  final double absStart=Math.abs(start);  final double absDir=Math.abs(direction);  final boolean toZero=!isSameSign(start,direction) || absDir < absStart;  if (toZero) {    if (absStart == Double.MIN_VALUE) {      return copySign(0.0,start);    }    if (Double.isInfinite(absStart)) {      return copySign(Double.MAX_VALUE,start);    }    return copySign(Double.longBitsToDouble(Double.doubleToLongBits(absStart) - 1L),start);  } else {    if (start == 0.0) {      return copySign(Double.MIN_VALUE,direction);    }    if (absStart == Double.MAX_VALUE) {      return copySign(Double.POSITIVE_INFINITY,start);    }    return copySign(Double.longBitsToDouble(Double.doubleToLongBits(absStart) + 1L),start);  }}  }
class C{  public void verifyPunctuationIsSpaceDelimited(Token left,Token right,Token punc,String puncStr){  Location puncLocation=ListenerUtil.getTokenLocation(punc);  if (checkLeftSpaces(left,punc,1)) {    printer.error(rule,puncStr + Messages.AT_COLUMN + puncLocation.column+ " "+ Messages.SPACE_BEFORE,puncLocation);  }  if (checkRightSpaces(right,punc,1)) {    printer.error(rule,puncStr + Messages.AT_COLUMN + puncLocation.column+ " "+ Messages.SPACE_AFTER,puncLocation);  }}  }
class C{  private void writeImage(RenderedImage image,GIFWritableImageMetadata imageMetadata,ImageWriteParam param,byte[] globalColorTable,Rectangle sourceBounds,Dimension destSize) throws IOException {  ColorModel colorModel=image.getColorModel();  SampleModel sampleModel=image.getSampleModel();  boolean writeGraphicsControlExtension;  if (imageMetadata == null) {    imageMetadata=(GIFWritableImageMetadata)getDefaultImageMetadata(new ImageTypeSpecifier(image),param);    writeGraphicsControlExtension=imageMetadata.transparentColorFlag;  } else {    NodeList list=null;    try {      IIOMetadataNode root=(IIOMetadataNode)imageMetadata.getAsTree(IMAGE_METADATA_NAME);      list=root.getElementsByTagName("GraphicControlExtension");    } catch (    IllegalArgumentException iae) {    }    writeGraphicsControlExtension=list != null && list.getLength() > 0;    if (param != null && param.canWriteProgressive()) {      if (param.getProgressiveMode() == ImageWriteParam.MODE_DISABLED) {        imageMetadata.interlaceFlag=false;      } else       if (param.getProgressiveMode() == ImageWriteParam.MODE_DEFAULT) {        imageMetadata.interlaceFlag=true;      }    }  }  if (Arrays.equals(globalColorTable,imageMetadata.localColorTable)) {    imageMetadata.localColorTable=null;  }  imageMetadata.imageWidth=destSize.width;  imageMetadata.imageHeight=destSize.height;  if (writeGraphicsControlExtension) {    writeGraphicControlExtension(imageMetadata);  }  writePlainTextExtension(imageMetadata);  writeApplicationExtension(imageMetadata);  writeCommentExtension(imageMetadata);  int bitsPerPixel=getNumBits(imageMetadata.localColorTable == null ? (globalColorTable == null ? sampleModel.getSampleSize(0) : globalColorTable.length / 3) : imageMetadata.localColorTable.length / 3);  writeImageDescriptor(imageMetadata,bitsPerPixel);  writeRasterData(image,sourceBounds,destSize,param,imageMetadata.interlaceFlag);}  }
class C{  protected boolean isMultiReport(HttpServletRequest request,HttpServletResponse response,ActionForm form,ActionMapping mapping){  return false;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.LOCAL_ARGUMENTS_VARIABLE___GET_NAME:    return getName();}return super.eInvoke(operationID,arguments);}  }
class C{  public int limit(){  return limit;}  }
class C{  @Post @LogMessageDoc(level="ERROR",message="Error parsing push flow mod request: {request}",explanation="An invalid request was sent to static flow pusher",recommendation="Fix the format of the static flow mod request") public String store(String fmJson){  IStorageSourceService storageSource=(IStorageSourceService)getContext().getAttributes().get(IStorageSourceService.class.getCanonicalName());  Map<String,Object> rowValues;  try {    rowValues=StaticFlowEntries.jsonToStorageEntry(fmJson);    String status=null;    if (!checkMatchIp(rowValues)) {      status="Warning! Pushing a static flow entry that matches IP " + "fields without matching for IP payload (ether-type 2048) will cause " + "the switch to wildcard higher level fields.";      log.error(status);    } else {      status="Entry pushed";    }    storageSource.insertRowAsync(StaticFlowEntryPusher.TABLE_NAME,rowValues);    return ("{\"status\" : \"" + status + "\"}");  } catch (  IOException e) {    log.error("Error parsing push flow mod request: " + fmJson,e);    return "{\"status\" : \"Error! Could not parse flod mod, see log for details.\"}";  }}  }
class C{  public static org.oscm.vo.Setting convertToApi(org.oscm.internal.vo.Setting oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.Setting newVO=new org.oscm.vo.Setting();  newVO.setKey(oldVO.getKey());  newVO.setValue(oldVO.getValue());  return newVO;}  }
class C{  public static void e(String msg){  if (sIsLogEnabled) {    Log.e(sApplicationTag,getContent(getCurrentStackTraceElement()) + "\n>" + msg);  }}  }
class C{  protected void createMapObjects(){  if (mapHandler == null) {    Debug.error("MapContent: MapHandler not set!");    return;  }  graphicHandlers=getGraphicHandlers(mapHandler);  Iterator iterator=graphicHandlers.iterator();  while (iterator.hasNext()) {    ((OM3DGraphicHandler)iterator.next()).addGraphicsToScene(this);  }}  }
class C{  public LegHistogram(final int binSize,final int nofBins,Id<Population> popId,Population population){  super();  this.binSize=binSize;  this.nofBins=nofBins;  this.popId=popId;  this.population=population;  reset(0);}  }
class C{  public ConfigProperties(String[] pars,String resource){  try {    if (resource != null) {      loadSystemResource(resource);      System.err.println("ConfigProperties: System resource " + resource + " loaded.");    }  } catch (  Exception e) {    System.err.println("ConfigProperties: " + e);  }  if (pars == null || pars.length == 0)   return;  try {    load(pars[0]);    System.err.println("ConfigProperties: File " + pars[0] + " loaded.");    pars[0]="";  } catch (  IOException e) {    System.err.println("ConfigProperties: Failed loading '" + pars[0] + "' as a file, interpreting it as a property.");  }catch (  Exception e) {    System.err.println("ConfigProperties: " + e);  }  if (pars.length == 1 && pars[0].length() == 0)   return;  try {    loadCommandLineDefs(pars);    System.err.println("ConfigProperties: Command line defs loaded.");  } catch (  Exception e) {    System.err.println("ConfigProperties: " + e);  }}  }
class C{  protected PlanNode toQueryForSelect(SelectNode selectNode,OrderByList orderByList,ValueNode offsetClause,ValueNode fetchFirstClause) throws StandardException {  PlanNode query=toQuery(selectNode);  ResultColumnList rcl=selectNode.getResultColumns();  List<ResultField> results=resultColumns(rcl);  List<ExpressionNode> projects=new ArrayList<>(rcl.size());  for (  ResultColumn result : rcl) {    ExpressionNode expr=toExpression(result.getExpression());    projects.add(expr);  }  List<OrderByExpression> sorts=new ArrayList<>();  if (orderByList != null) {    for (    OrderByColumn orderByColumn : orderByList) {      ExpressionNode expression=toOrderGroupBy(orderByColumn.getExpression(),projects,"ORDER");      sorts.add(new OrderByExpression(expression,orderByColumn.isAscending()));    }  }  if ((selectNode.getGroupByList() != null) || (selectNode.getHavingClause() != null) || hasAggregateFunction(projects)|| hasAggregateFunctionA(sorts)) {    query=toAggregateSource(query,selectNode.getGroupByList(),projects);    query=new Select(query,toConditions(selectNode.getHavingClause(),projects));  }  if (selectNode.hasWindows())   throw new UnsupportedSQLException("WINDOW",selectNode);  do_distinct: {    if (selectNode.isDistinct()) {      Project project=new Project(query,projects);      if (sorts.isEmpty()) {        query=new Distinct(project);        break do_distinct;      } else       if (adjustSortsForDistinct(sorts,project)) {        query=new Sort(project,sorts);        query=new Distinct(query,Distinct.Implementation.EXPLICIT_SORT);        break do_distinct;      } else {        query=new AggregateSource(query,new ArrayList<>((projects)));      }    }    if (!sorts.isEmpty()) {      query=new Sort(query,sorts);    }    query=new Project(query,projects);  }  if ((offsetClause != null) || (fetchFirstClause != null))   query=toLimit(query,offsetClause,fetchFirstClause);  query=new ResultSet(query,results);  return query;}  }
class C{  protected void logDBColumnData(Cursor cursor,String column){  int index=cursor.getColumnIndex(column);  Log.i(LOG_TAG,"columnName: " + column);  Log.i(LOG_TAG,"columnValue: " + cursor.getString(index));}  }
class C{  public void transform(double[] src,int srcOff,double[] dst,int dstOff,int length){  int step=2;  if (src == dst && srcOff < dstOff && dstOff < srcOff + length * 2) {    srcOff=srcOff + length * 2 - 2;    dstOff=dstOff + length * 2 - 2;    step=-2;  }  while (--length >= 0) {    double x=src[srcOff + 0];    double y=src[srcOff + 1];    dst[dstOff + 0]=x * m00 + y * m01 + m02;    dst[dstOff + 1]=x * m10 + y * m11 + m12;    srcOff+=step;    dstOff+=step;  }}  }
class C{  public Builder deltaType(Object val){  this.deltaType=val;  return this;}  }
class C{  private SyncState(){}  }
class C{  @Override public boolean ready() throws IOException {  try {    return this.reader.ready();  } catch (  IOException oldError) {    throw wrapIOException(oldError);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_BASE_TYPE:    setDelegationBaseType((SymbolTableEntryOriginal)null);  return;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:setDelegationSuperClassSteps(DELEGATION_SUPER_CLASS_STEPS_EDEFAULT);return;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET:setDelegationTarget((SymbolTableEntryOriginal)null);return;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:setDelegationTargetIsAbstract(DELEGATION_TARGET_IS_ABSTRACT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean removeRef(Object obj) throws IOException {  if (_refs != null) {    _refs.remove(obj);    return true;  } else   return false;}  }
class C{  public static void validateManifest(String manifestName,Manifest manifest) throws ConfigException {  Attributes attr=manifest.getMainAttributes();  if (attr == null)   return;  String extList=attr.getValue("Extension-List");  if (extList == null)   return;  Pattern pattern=Pattern.compile("[, \t]+");  String[] split=pattern.split(extList);  for (int i=0; i < split.length; i++) {    String ext=split[i];    String name=attr.getValue(ext + "-Extension-Name");    if (name == null)     continue;    Package pkg=Package.getPackage(name);    if (pkg == null) {      log.warning(L.l("package {0} is missing.  {1} requires package {0}.",name,manifestName));      continue;    }    String version=attr.getValue(ext + "-Specification-Version");    if (version == null)     continue;    if (pkg.getSpecificationVersion() == null || pkg.getSpecificationVersion().equals("")) {      log.warning(L.l("installed {0} is not compatible with version `{1}'.  {2} requires version {1}.",name,version,manifestName));    } else     if (!pkg.isCompatibleWith(version)) {      log.warning(L.l("installed {0} is not compatible with version `{1}'.  {2} requires version {1}.",name,version,manifestName));    }  }}  }
class C{  private void createRasterizerTextures(){  this.positionTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,positionTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);  this.normalTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,normalTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA16F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_2__AND_OP_1:    setAndOp_1(AND_OP_1_EDEFAULT);  return;case UmplePackage.ANONYMOUS_LINKING_OP_2__CONSTRAINT_EXPR_1:getConstraintExpr_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static Resource createInstance(String sessionID,ResourceType type,String key,ResourceNode parent,Directory directory) throws ResourceException {  Resource newInstance=null;  if (type == ResourceType.CLUSTER) {    newInstance=createCluster(key,parent,directory);  } else   if (type == ResourceType.MANAGER) {    newInstance=createClusterMember(key,parent,directory);  } else   if (type == ResourceType.PROCESS) {    newInstance=createProcess(key,parent,directory);  } else   if (type == ResourceType.RESOURCE_MANAGER) {    newInstance=createResourceManager(key,parent,directory);  } else   if (type == ResourceType.OPERATION) {    newInstance=createOperation(key,parent,directory);  } else   if (type == ResourceType.FOLDER) {    newInstance=createFolder(key,parent,directory);  } else   if (type == ResourceType.CONFIGURATION) {    newInstance=createResourceConfiguration(key,parent,directory);  } else {    throw new ResourceException(String.format("Unable to create new instance for resourceType=%s for parent of type=%s",type,parent.getType()));  }  if (newInstance == null) {    throw new ResourceException(String.format("Unable to create new instance for resourceType=%s for parent of type=%s",type,parent.getType()));  }  return newInstance;}  }
class C{  private void showCurrentNotification(){  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  if (currentNotificationSetting.msgId == -1 && currentNotificationSetting.iconId == -1) {    nm.cancel(GTG.FROG_NOTIFICATION_ID);    return;  }  CharSequence text=getText(currentNotificationSetting.msgId);  Notification.Builder builder=new Notification.Builder(this);  builder.setSmallIcon(currentNotificationSetting.iconId);  builder.setOngoing(currentNotificationSetting.isOngoing);  builder.setAutoCancel(!currentNotificationSetting.isOngoing);  builder.setTicker(text);  Intent intent=new Intent(this,SettingsActivity.class);  PendingIntent contentIntent=PendingIntent.getActivity(this,0,currentNotificationSetting.intent != null ? currentNotificationSetting.intent : intent,PendingIntent.FLAG_UPDATE_CURRENT);  builder.setContentIntent(contentIntent);  Notification notification=builder.getNotification();  nm.notify(GTG.FROG_NOTIFICATION_ID,notification);}  }
class C{  public double[] executePostscript(){  boolean firstBracket=false;  this.ptr=0;  if (debug) {    System.out.println("-----stream data--------\n");    for (int aa=0; aa < streamLength; aa++) {      System.out.print((char)stream[aa]);    }    System.out.print("<<<<");    System.out.println("-------------\n");  }  level=0;  byte[] nextVal;  while (ptr < streamLength) {    nextVal=getNextValue();    if (nextVal != null) {      if (nextVal.length == 1 && (nextVal[0] == START_BRACE || nextVal[0] == END_BRACE)) {        if (firstBracket && (nextVal[0] == START_BRACE)) {          final double i=pop();          final int fType=currentType;          safeStack=new double[100];          safeStackType=new int[100];          System.arraycopy(stack,0,safeStack,0,100);          System.arraycopy(stackType,0,safeStackType,0,100);          safeStkPtr=stkPtr;          safeStkTypePrt=stkTypePtr;          if (fType == PS_BOOLEAN) {            if (i > 0) {              cont=true;            }          } else {            throw new RuntimeException("Possible syntax error in PostScript stream!");          }        }        firstBracket=true;      } else {        final int ID=getCommandID(nextVal);        if (ID == -1) {          try {            final double number=convertToDouble(nextVal);            if (debug) {              System.out.println("number=" + number);            }            final int numberInt=(int)number;            if (numberInt == number) {              push(number,PS_INTEGER);            } else {              push(number,PS_REAL);            }          } catch (          final Exception e) {            LogWriter.writeLog("Exception " + e);          }        } else {          final int result=execute(ID);          if (result == -1 && LogWriter.isRunningFromIDE) {            throw new RuntimeException("Unsupported command with value " + PostscriptUtils.toString(ID));          }        }        if (debug) {          final StringBuilder str=new StringBuilder("Stack now ");          for (int ii=0; ii < stkPtr; ii++) {            str.append(stack[ii]).append(' ');          }          System.out.println(str);        }      }    }    if (level == 0) {      break;    }    if (ptr >= streamLength) {      break;    }  }  return stack;}  }
class C{  public h3(String value){  addElement(value);}  }
class C{  public static double erf(double x){  double p=0.3275911;  double[] a={0.254829592,-0.284496736,1.421413741,-1.453152027,1.061405429};  boolean negArg=(x < 0);  if (negArg) {    x=-x;  }  double t=1.0 / (1 + p * x);  double multiplier=0.0;  double tToPower=t;  for (int i=0; i < 5; i++) {    multiplier+=a[i] * tToPower;    tToPower*=t;  }  double retVal=1.0 - multiplier * Math.exp(-x * x);  return negArg ? -retVal : retVal;}  }
class C{  MessageListener wrapMessageListener(final MessageListener listener){  if (ActiveMQRAMessageConsumer.trace) {    ActiveMQRALogger.LOGGER.trace("getMessageSelector()");  }  return new ActiveMQRAMessageListener(listener,this);}  }
class C{  public MeanAndStandardDeviation(Number mean,Number standardDeviation){  this.mean=mean;  this.standardDeviation=standardDeviation;}  }
class C{  public void removeStep(Step step){  checkNotNull(step,"The step can not be null");  writeStepsSafelyConsume(null);  for (  OutputSocket<?> socket : step.getOutputSockets()) {    socket.setPreviewed(false);  }  step.setRemoved();  this.eventBus.unregister(step);  this.eventBus.post(new StepRemovedEvent(step));}  }
class C{  protected Move makeSanMoveOverride(String shortAlgebraic,SanValidations validations,Move[] pseudoLegals){  return null;}  }
class C{  int run(Options options) throws Exception {  if (getConf().getBoolean("isMR1",false) && "local".equals(getConf().get("mapred.job.tracker"))) {    throw new IllegalStateException("Running with LocalJobRunner (i.e. all of Hadoop inside a single JVM) is not supported " + "because LocalJobRunner does not (yet) implement the Hadoop Distributed Cache feature, " + "which is required for passing files via --files and --libjars");  }  long programStartTime=System.nanoTime();  if (options.fairSchedulerPool != null) {    getConf().set("mapred.fairscheduler.pool",options.fairSchedulerPool);  }  getConf().setInt(SolrOutputFormat.SOLR_RECORD_WRITER_MAX_SEGMENTS,options.maxSegments);  getConf().setBoolean("mapred.used.genericoptionsparser",true);  if (options.log4jConfigFile != null) {    Utils.setLogConfigFile(options.log4jConfigFile,getConf());    addDistributedCacheFile(options.log4jConfigFile,getConf());  }  job=Job.getInstance(getConf());  job.setJarByClass(getClass());  if (options.morphlineFile == null) {    throw new ArgumentParserException("Argument --morphline-file is required",null);  }  verifyGoLiveArgs(options,null);  verifyZKStructure(options,null);  int mappers=new JobClient(job.getConfiguration()).getClusterStatus().getMaxMapTasks();  LOG.info("Cluster reports {} mapper slots",mappers);  if (options.mappers == -1) {    mappers=8 * mappers;  } else {    mappers=options.mappers;  }  if (mappers <= 0) {    throw new IllegalStateException("Illegal number of mappers: " + mappers);  }  options.mappers=mappers;  FileSystem fs=options.outputDir.getFileSystem(job.getConfiguration());  if (fs.exists(options.outputDir) && !delete(options.outputDir,true,fs)) {    return -1;  }  Path outputResultsDir=new Path(options.outputDir,RESULTS_DIR);  Path outputReduceDir=new Path(options.outputDir,"reducers");  Path outputStep1Dir=new Path(options.outputDir,"tmp1");  Path outputStep2Dir=new Path(options.outputDir,"tmp2");  Path outputTreeMergeStep=new Path(options.outputDir,"mtree-merge-output");  Path fullInputList=new Path(outputStep1Dir,FULL_INPUT_LIST);  LOG.debug("Creating list of input files for mappers: {}",fullInputList);  long numFiles=addInputFiles(options.inputFiles,options.inputLists,fullInputList,job.getConfiguration());  if (numFiles == 0) {    LOG.info("No input files found - nothing to process");    return 0;  }  int numLinesPerSplit=(int)ceilDivide(numFiles,mappers);  if (numLinesPerSplit < 0) {    numLinesPerSplit=Integer.MAX_VALUE;  }  numLinesPerSplit=Math.max(1,numLinesPerSplit);  int realMappers=Math.min(mappers,(int)ceilDivide(numFiles,numLinesPerSplit));  calculateNumReducers(options,realMappers);  int reducers=options.reducers;  LOG.info("Using these parameters: " + "numFiles: {}, mappers: {}, realMappers: {}, reducers: {}, shards: {}, fanout: {}, maxSegments: {}",new Object[]{numFiles,mappers,realMappers,reducers,options.shards,options.fanout,options.maxSegments});  LOG.info("Randomizing list of {} input files to spread indexing load more evenly among mappers",numFiles);  long startTime=System.nanoTime();  if (numFiles < job.getConfiguration().getInt(MAIN_MEMORY_RANDOMIZATION_THRESHOLD,100001)) {    randomizeFewInputFiles(fs,outputStep2Dir,fullInputList);  } else {    int numLinesPerRandomizerSplit=Math.max(10 * 1000 * 1000,numLinesPerSplit);    Job randomizerJob=randomizeManyInputFiles(getConf(),fullInputList,outputStep2Dir,numLinesPerRandomizerSplit);    if (!waitForCompletion(randomizerJob,options.isVerbose)) {      return -1;    }  }  float secs=(System.nanoTime() - startTime) / (float)(10 ^ 9);  LOG.info("Done. Randomizing list of {} input files took {} secs",numFiles,secs);  job.setInputFormatClass(NLineInputFormat.class);  NLineInputFormat.addInputPath(job,outputStep2Dir);  NLineInputFormat.setNumLinesPerSplit(job,numLinesPerSplit);  FileOutputFormat.setOutputPath(job,outputReduceDir);  String mapperClass=job.getConfiguration().get(JobContext.MAP_CLASS_ATTR);  if (mapperClass == null) {    Class clazz=MorphlineMapper.class;    mapperClass=clazz.getName();    job.setMapperClass(clazz);  }  job.setJobName(getClass().getName() + "/" + Utils.getShortClassName(mapperClass));  if (job.getConfiguration().get(JobContext.REDUCE_CLASS_ATTR) == null) {    job.setReducerClass(SolrReducer.class);  }  if (options.updateConflictResolver == null) {    throw new IllegalArgumentException("updateConflictResolver must not be null");  }  job.getConfiguration().set(SolrReducer.UPDATE_CONFLICT_RESOLVER,options.updateConflictResolver);  if (options.zkHost != null) {    assert options.collection != null;    if (job.getConfiguration().get(JobContext.PARTITIONER_CLASS_ATTR) == null) {      job.setPartitionerClass(SolrCloudPartitioner.class);    }    job.getConfiguration().set(SolrCloudPartitioner.ZKHOST,options.zkHost);    job.getConfiguration().set(SolrCloudPartitioner.COLLECTION,options.collection);  }  job.getConfiguration().setInt(SolrCloudPartitioner.SHARDS,options.shards);  job.setOutputFormatClass(SolrOutputFormat.class);  if (options.solrHomeDir != null) {    SolrOutputFormat.setupSolrHomeCache(options.solrHomeDir,job);  } else {    assert options.zkHost != null;    ZooKeeperInspector zki=new ZooKeeperInspector();    SolrZkClient zkClient=zki.getZkClient(options.zkHost);    try {      String configName=zki.readConfigName(zkClient,options.collection);      File tmpSolrHomeDir=zki.downloadConfigDir(zkClient,configName);      SolrOutputFormat.setupSolrHomeCache(tmpSolrHomeDir,job);      options.solrHomeDir=tmpSolrHomeDir;    }  finally {      zkClient.close();    }  }  MorphlineMapRunner runner=setupMorphline(options);  if (options.isDryRun && runner != null) {    LOG.info("Indexing {} files in dryrun mode",numFiles);    startTime=System.nanoTime();    dryRun(runner,fs,fullInputList);    secs=(System.nanoTime() - startTime) / (float)(10 ^ 9);    LOG.info("Done. Indexing {} files in dryrun mode took {} secs",numFiles,secs);    goodbye(null,programStartTime);    return 0;  }  job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM,options.morphlineFile.getName());  job.setNumReduceTasks(reducers);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(SolrInputDocumentWritable.class);  LOG.info("Indexing {} files using {} real mappers into {} reducers",new Object[]{numFiles,realMappers,reducers});  startTime=System.nanoTime();  if (!waitForCompletion(job,options.isVerbose)) {    return -1;  }  secs=(System.nanoTime() - startTime) / (float)(10 ^ 9);  LOG.info("Done. Indexing {} files using {} real mappers into {} reducers took {} secs",new Object[]{numFiles,realMappers,reducers,secs});  int mtreeMergeIterations=0;  if (reducers > options.shards) {    mtreeMergeIterations=(int)Math.round(log(options.fanout,reducers / options.shards));  }  LOG.debug("MTree merge iterations to do: {}",mtreeMergeIterations);  int mtreeMergeIteration=1;  while (reducers > options.shards) {    job=Job.getInstance(getConf());    job.setJarByClass(getClass());    job.setJobName(getClass().getName() + "/" + Utils.getShortClassName(TreeMergeMapper.class));    job.setMapperClass(TreeMergeMapper.class);    job.setOutputFormatClass(TreeMergeOutputFormat.class);    job.setNumReduceTasks(0);    job.setOutputKeyClass(Text.class);    job.setOutputValueClass(NullWritable.class);    job.setInputFormatClass(NLineInputFormat.class);    Path inputStepDir=new Path(options.outputDir,"mtree-merge-input-iteration" + mtreeMergeIteration);    fullInputList=new Path(inputStepDir,FULL_INPUT_LIST);    LOG.debug("MTree merge iteration {}/{}: Creating input list file for mappers {}",new Object[]{mtreeMergeIteration,mtreeMergeIterations,fullInputList});    numFiles=createTreeMergeInputDirList(outputReduceDir,fs,fullInputList);    if (numFiles != reducers) {      throw new IllegalStateException("Not same reducers: " + reducers + ", numFiles: "+ numFiles);    }    NLineInputFormat.addInputPath(job,fullInputList);    NLineInputFormat.setNumLinesPerSplit(job,options.fanout);    FileOutputFormat.setOutputPath(job,outputTreeMergeStep);    LOG.info("MTree merge iteration {}/{}: Merging {} shards into {} shards using fanout {}",new Object[]{mtreeMergeIteration,mtreeMergeIterations,reducers,(reducers / options.fanout),options.fanout});    startTime=System.nanoTime();    if (!waitForCompletion(job,options.isVerbose)) {      return -1;    }    if (!renameTreeMergeShardDirs(outputTreeMergeStep,job,fs)) {      return -1;    }    secs=(System.nanoTime() - startTime) / (float)(10 ^ 9);    LOG.info("MTree merge iteration {}/{}: Done. Merging {} shards into {} shards using fanout {} took {} secs",new Object[]{mtreeMergeIteration,mtreeMergeIterations,reducers,(reducers / options.fanout),options.fanout,secs});    if (!delete(outputReduceDir,true,fs)) {      return -1;    }    if (!rename(outputTreeMergeStep,outputReduceDir,fs)) {      return -1;    }    assert reducers % options.fanout == 0;    reducers=reducers / options.fanout;    mtreeMergeIteration++;  }  assert reducers == options.shards;  for (  FileStatus stats : fs.listStatus(outputReduceDir)) {    String dirPrefix=SolrOutputFormat.getOutputName(job);    Path srcPath=stats.getPath();    if (stats.isDirectory() && srcPath.getName().startsWith(dirPrefix)) {      String dstName=dirPrefix + srcPath.getName().substring(dirPrefix.length() + "-m".length());      Path dstPath=new Path(srcPath.getParent(),dstName);      if (!rename(srcPath,dstPath,fs)) {        return -1;      }    }  }  ;  if (!rename(outputReduceDir,outputResultsDir,fs)) {    return -1;  }  if (options.goLive && !new GoLive().goLive(options,listSortedOutputShardDirs(outputResultsDir,fs))) {    return -1;  }  goodbye(job,programStartTime);  return 0;}  }
class C{  @Override public void onNewBitmapReady(Bitmap bitmap){  if (mRenderer == null)   return;  Bitmap copy=mPaintView.getDrawingCopy();  mRenderer.updatePaintTexture(copy);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static SpannableString typeface(Context context,int strResId){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  return typeface(context.getString(strResId),sDefaultTypefaceCollection,Typeface.NORMAL);}  }
class C{  @Override public void bind(SocketAddress bindpoint) throws IOException {  if (self == this) {    super.bind(bindpoint);  } else {    throw new IOException("Underlying socket should already be connected");  }}  }
class C{  public RangeQueryBuilder lte(int to){  this.to=to;  this.includeUpper=true;  return this;}  }
class C{  public MethodNotSupportedException(final String message){  super(message);}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    getWindow().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));    int topPadding=Common.getStatusBarHeight(mContext);    if (mDrawerLayout != null) {      mDrawerLayout.setPadding(0,topPadding,0,0);      mNavDrawerLayout.setPadding(0,topPadding,0,0);      mCurrentQueueDrawerLayout.setPadding(0,topPadding,0,0);    }    TypedValue tv=new TypedValue();    int actionBarHeight=0;    if (getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {      actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());    }    if (mDrawerParentLayout != null) {      mDrawerParentLayout.setPadding(0,actionBarHeight,0,0);      mDrawerParentLayout.setClipToPadding(false);    }  }}  }
class C{  private void overlayProvider(AuthnProvider authn,AuthnUpdateParam param){  if (param == null) {    return;  }  authn.setGroupAttribute(param.getGroupAttribute());  if (param.getGroupWhitelistValueChanges() != null) {    StringSet ssOld=authn.getGroupWhitelistValues();    if (ssOld == null) {      ssOld=new StringSet();    }    if (param.getGroupWhitelistValueChanges().getAdd() != null) {      ssOld.addAll(param.getGroupWhitelistValueChanges().getAdd());    }    if (param.getGroupWhitelistValueChanges().getRemove() != null) {      ssOld.removeAll(new HashSet<String>(param.getGroupWhitelistValueChanges().getRemove()));    }    authn.setGroupWhitelistValues(ssOld);  }  if (param.getDomainChanges() != null) {    StringSet ssOld=authn.getDomains();    if (ssOld == null) {      ssOld=new StringSet();    }    Set<String> toAdd=param.getDomainChanges().getAdd();    if (toAdd != null) {      for (      String s : toAdd) {        ssOld.add(s.toLowerCase());      }    }    Set<String> toRemove=param.getDomainChanges().getRemove();    ssOld.removeAll(toRemove);    authn.setDomains(ssOld);  }  if (param.getManagerDn() != null) {    authn.setManagerDN(param.getManagerDn());  }  authn.setManagerPassword(param.getManagerPassword());  authn.setSearchBase(param.getSearchBase());  authn.setSearchFilter(param.getSearchFilter());  authn.setSearchScope(param.getSearchScope());  if (param.getServerUrlChanges() != null) {    StringSet ssOld=authn.getServerUrls();    if (ssOld == null) {      ssOld=new StringSet();    }    if (param.getServerUrlChanges().getAdd() != null) {      ssOld.addAll(param.getServerUrlChanges().getAdd());    }    if (param.getServerUrlChanges().getRemove() != null) {      ssOld.removeAll(new HashSet<String>(param.getServerUrlChanges().getRemove()));    }    if (ssOld.isEmpty()) {      ArgValidator.checkFieldNotEmpty(ssOld,"Attempt to remove the last url is not allowed.  At least one url must be in the provider.");    }    authn.setServerUrls(ssOld);  }  if (param.getMode() != null && param.getMode().equals(AuthnProvider.ProvidersType.keystone.toString()) && param.getTenantsSynchronizationOptionsChanges() != null) {    StringSet oldOptions=authn.getTenantsSynchronizationOptions();    if (oldOptions == null) {      oldOptions=new StringSet();    }    if (param.getTenantsSynchronizationOptionsChanges().getAdd() != null) {      oldOptions.addAll(param.getTenantsSynchronizationOptionsChanges().getAdd());    }    if (param.getTenantsSynchronizationOptionsChanges().getRemove() != null) {      oldOptions.removeAll(new HashSet<String>(param.getTenantsSynchronizationOptionsChanges().getRemove()));    }    if (oldOptions.isEmpty()) {      ArgValidator.checkFieldNotEmpty(oldOptions,"Interval cannot be empty. Please provide the value.");    }    authn.setTenantsSynchronizationOptions(oldOptions);  }  if (param.getMode() != null) {    authn.setMode(param.getMode());  }  authn.setLabel(param.getLabel());  authn.setDescription(param.getDescription());  authn.setDisable(param.getDisable() != null ? param.getDisable() : authn.getDisable());  authn.setAutoRegCoprHDNImportOSProjects(param.getAutoRegCoprHDNImportOSProjects() != null ? param.getAutoRegCoprHDNImportOSProjects() : authn.getAutoRegCoprHDNImportOSProjects());  authn.setMaxPageSize(param.getMaxPageSize());  if (param.getGroupObjectClassChanges() != null) {    StringSet ssOld=authn.getGroupObjectClassNames();    if (ssOld == null) {      ssOld=new StringSet();    }    if (param.getGroupObjectClassChanges().getRemove() != null) {      ssOld.removeAll(new HashSet<String>(param.getGroupObjectClassChanges().getRemove()));    }    if (param.getGroupObjectClassChanges().getAdd() != null) {      ssOld.addAll(param.getGroupObjectClassChanges().getAdd());    }    authn.setGroupObjectClassNames(ssOld);  }  if (param.getGroupMemberAttributeChanges() != null) {    StringSet ssOld=authn.getGroupMemberAttributeTypeNames();    if (ssOld == null) {      ssOld=new StringSet();    }    if (param.getGroupMemberAttributeChanges().getRemove() != null) {      ssOld.removeAll(new HashSet<String>(param.getGroupMemberAttributeChanges().getRemove()));    }    if (param.getGroupMemberAttributeChanges().getAdd() != null) {      ssOld.addAll(param.getGroupMemberAttributeChanges().getAdd());    }    authn.setGroupMemberAttributeTypeNames(ssOld);  }}  }
class C{  protected ExifTag addTag(ExifTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  public boolean containsKey(double key){  TableEntry[] table=m_Table;  int hash=hashCode(key);  int index=(hash & 0x7FFFFFFF) % table.length;  for (TableEntry e=table[index]; e != null; e=e.next) {    if ((e.hash == hash) && (Math.abs(e.key - key) < EPSILON)) {      return true;    }  }  return false;}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int nodeType;  java.util.List result=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  for (int indexN10073=0; indexN10073 < employeeList.getLength(); indexN10073++) {    child=(Node)employeeList.item(indexN10073);    nodeType=(int)child.getNodeType();    childName=child.getNodeName();    if (equals(1,nodeType)) {      result.add(childName);    } else {      assertEquals("textNodeType",3,nodeType);      assertEquals("textNodeName","#text",childName);    }  }  assertEqualsAutoCase("element","nodeNames",expected,result);}  }
class C{  public JavaTranslator(Class clazz){  this.metaObject=new MetaObjectClass(clazz);  sourceCode=new ArrayList<>();  namesMapper=new QualifiedTypesMap();}  }
class C{  private InterchangeObject constructInterchangeObject(Class clazz,InterchangeObject.InterchangeObjectBO interchangeObjectBO,Node node) throws IOException {  try {    Constructor<?> constructor=clazz.getConstructor(interchangeObjectBO.getClass());    InterchangeObject interchangeObject=(InterchangeObject)constructor.newInstance(interchangeObjectBO);    logger.debug(String.format("Constructing the object model for %s metadata in the header partition.",interchangeObject.getClass().getSimpleName()));    return interchangeObject;  } catch (  NoSuchMethodException|IllegalAccessException|InstantiationException|InvocationTargetException e) {    throw new IOException(String.format("No matching constructor for class %s",clazz.getSimpleName()));  }}  }
class C{  public synchronized Way[] performClosedWaySplit(Way way,Node node1,Node node2,boolean createPolygons){  createCheckpoint(R.string.undo_action_split_way);  Way[] result=getDelegator().splitAtNodes(way,node1,node2,createPolygons);  map.invalidate();  return result;}  }
class C{  public static boolean cleanup(String sessionId){  return cleanup(sessionMap.get(sessionId));}  }
class C{  public PDFObject(PDFFile owner,PDFXref xref){  this.type=INDIRECT;  this.value=xref;  this.owner=owner;}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  public boolean isUseInInternet(){  return !isLocalIP();}  }
class C{  public static String replace(String text,String repl,String with){  return replace(text,repl,with,-1);}  }
class C{  private Tuple<Message,Connection> tryOtherMessages(){  List<Tuple<Message,Connection>> messages=new ArrayList<Tuple<Message,Connection>>();  Collection<Message> msgCollection=getMessageCollection();  for (  Connection con : getConnections()) {    DTNHost other=con.getOtherNode(getHost());    ProphetV2Router othRouter=(ProphetV2Router)other.getRouter();    if (othRouter.isTransferring()) {      continue;    }    for (    Message m : msgCollection) {      if (othRouter.hasMessage(m.getId())) {        continue;      }      if ((othRouter.getPredFor(m.getTo()) >= getPredFor(m.getTo()))) {        messages.add(new Tuple<Message,Connection>(m,con));      }    }  }  if (messages.size() == 0) {    return null;  }  Collections.sort(messages,new TupleComparator());  return tryMessagesForConnected(messages);}  }
class C{  public JSONStringer key(String name) throws JSONException {  if (name == null) {    throw new JSONException("Names must be non-null");  }  beforeKey();  string(name);  return this;}  }
class C{  public MetalinkFileBuilder addUrl(String url,String location,int priority){  BasicElement be=new BasicElement("url",url);  if (location != null && location.length() == 2)   be.addAttribute("location",location);  if (priority > 0 && priority < 1000000)   be.addAttribute("priority",priority);  this.url.add(be);  return this;}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache transaction example started.");    CacheConfiguration<Integer,Account> cfg=new CacheConfiguration<>(CACHE_NAME);    cfg.setAtomicityMode(CacheAtomicityMode.TRANSACTIONAL);    try (IgniteCache<Integer,Account> cache=ignite.getOrCreateCache(cfg)){      cache.put(1,new Account(1,100));      cache.put(2,new Account(1,200));      System.out.println();      System.out.println(">>> Accounts before deposit: ");      System.out.println(">>> " + cache.get(1));      System.out.println(">>> " + cache.get(2));      deposit(cache,1,100);      deposit(cache,2,200);      System.out.println();      System.out.println(">>> Accounts after transfer: ");      System.out.println(">>> " + cache.get(1));      System.out.println(">>> " + cache.get(2));      System.out.println(">>> Cache transaction example finished.");    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public DataBuffer encode(){  try {    DataBuffer buffer=new DataBuffer();    int length=Header.PROTOCOL_HEADER_LENGTH;    if (mData != null) {      length+=mData.readableBytes();    }    buffer.writeInt(length);    mHeader.setLength(length);    buffer.writeDataBuffer(mHeader.encode(mHeader.getVersion()));    buffer.writeDataBuffer(mData);    return buffer;  } catch (  Exception e) {    logger.error("encode error!!!",e);    throw new RuntimeException("encode error!!!");  }}  }
class C{  @POST @Path("/classificationdef") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public AtlasClassificationDef createClassificationDef(AtlasClassificationDef classificationDef) throws AtlasBaseException {  AtlasClassificationDef ret=typeDefStore.createClassificationDef(classificationDef);  return ret;}  }
class C{  public boolean isNormalized(){  return m_norm;}  }
class C{  public void testWarHotDeployment() throws Exception {  setContainer(createContainer(createConfiguration(ConfigurationType.STANDALONE)));  WAR war=(WAR)new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-war"),DeployableType.WAR);  war.setContext("simple");  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/"+ war.getContext()+ "/index.jsp");  getLocalContainer().start();  PingUtils.assertPingFalse("simple war should not be started at this point",warPingURL,getLogger());  Deployer deployer=createDeployer(getContainer());  DeployableMonitor deployableMonitor=new URLDeployableMonitor(warPingURL);  deployableMonitor.setLogger(this.getLogger());  deployer.deploy(war,deployableMonitor);  PingUtils.assertPingTrue("simple war should have been started at this point",warPingURL,getLogger());  getLocalContainer().stop();}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public PrintScreenPainter(Window element){  m_element=element;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return (left.notEquals(right)) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public void dispatchOnStart(){  mMultiSelectManager.registerCallback(this);  updateMultiSelectState();}  }
class C{  public LinkingOp_ createLinkingOp_(){  LinkingOp_Impl linkingOp_=new LinkingOp_Impl();  return linkingOp_;}  }
class C{  public static ViewAction swipeLeftSlow(){  return actionWithAssertions(new GeneralSwipeAction(Swipe.SLOW,translate(GeneralLocation.CENTER_RIGHT,-EDGE_FUZZ_FACTOR,0),GeneralLocation.CENTER_LEFT,Press.FINGER));}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  public List<NamedRelatedResourceRep> listByImageType(String imageType){  URI getUri=client.uriBuilder(baseUrl).queryParam("imageType",imageType).build();  ComputeImageList response=client.getURI(ComputeImageList.class,getUri);  return ResourceUtils.defaultList(response.getComputeImages());}  }
class C{  public void calculateZoomFrom(Set<GeoPosition> positions){  if (positions.size() < 2) {    return;  }  int zoom=getZoom();  Rectangle2D rect=generateBoundingRect(positions,zoom);  int count=0;  while (!getViewportBounds().contains(rect)) {    Point2D centr=new Point2D.Double(rect.getX() + rect.getWidth() / 2,rect.getY() + rect.getHeight() / 2);    GeoPosition px=getTileFactory().pixelToGeo(centr,zoom);    setCenterPosition(px);    count++;    if (count > 30)     break;    if (getViewportBounds().contains(rect)) {      break;    }    zoom=zoom + 1;    if (zoom > 15) {      break;    }    setZoom(zoom);    rect=generateBoundingRect(positions,zoom);  }}  }
class C{  protected TypeConstraintImpl(){  super();}  }
class C{  @SuppressWarnings("unchecked") private View createView(MetaClass meta){  View view=new View(meta.getJavaClass(),false);  for (  MetaProperty metaProperty : meta.getProperties()) {    if (metaProperty.isReadOnly()) {      continue;    }switch (metaProperty.getType()) {case DATATYPE:case ENUM:      view.addProperty(metaProperty.getName());    break;case ASSOCIATION:case COMPOSITION:  String viewName=metaProperty.getRange().getCardinality().isMany() ? View.LOCAL : View.MINIMAL;View propView=viewRepository.getView(metaProperty.getRange().asClass(),viewName);view.addProperty(metaProperty.getName(),new View(propView,metaProperty.getRange().asClass().getName() + ".entity-inspector-view",true));break;default :throw new IllegalStateException("unknown property type");}}return view;}  }
class C{  @Deprecated static public void updateState(String taskId,Operation.Status status,String message) throws WorkflowException {  Workflow.StepState state=Workflow.StepState.EXECUTING;  if (status == Operation.Status.ready) {    state=Workflow.StepState.SUCCESS;  }  if (status == Operation.Status.error) {    state=Workflow.StepState.ERROR;  }  updateState(taskId,state,message);}  }
class C{  private void connect() throws ConnectException {  RepositoryConfig repositoryConfig=configurationStorage.getRepositoryConfig();  connection.connect(repositoryConfig.getHost(),repositoryConfig.getPort());}  }
class C{  public DeleteRequest id(String id){  this.id=id;  return this;}  }
class C{  private void showOverlay(){  showOverlay(false);}  }
class C{  public JsonToken peek(){  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }switch (p) {case PEEKED_BEGIN_OBJECT:    return JsonToken.BEGIN_OBJECT;case PEEKED_END_OBJECT:  return JsonToken.END_OBJECT;case PEEKED_BEGIN_ARRAY:return JsonToken.BEGIN_ARRAY;case PEEKED_END_ARRAY:return JsonToken.END_ARRAY;case PEEKED_SINGLE_QUOTED_NAME:case PEEKED_DOUBLE_QUOTED_NAME:case PEEKED_UNQUOTED_NAME:return JsonToken.NAME;case PEEKED_TRUE:case PEEKED_FALSE:return JsonToken.BOOLEAN;case PEEKED_NULL:return JsonToken.NULL;case PEEKED_SINGLE_QUOTED:case PEEKED_DOUBLE_QUOTED:case PEEKED_UNQUOTED:case PEEKED_BUFFERED:return JsonToken.STRING;case PEEKED_LONG:case PEEKED_NUMBER:return JsonToken.NUMBER;case PEEKED_EOF:return JsonToken.END_DOCUMENT;default :throw new AssertionError();}}  }
class C{  public static byte[] encodeBoolean(boolean value){  return value ? new byte[]{1} : new byte[]{0};}  }
class C{  public FillOutsideLine(Type type){  this.mType=type;}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  return findRangeBounds(dataset,false);}  }
class C{  private void scan(Field field,Annotation label,Annotation[] list){  if (label instanceof Attribute) {    process(field,label,list);  }  if (label instanceof ElementUnion) {    process(field,label,list);  }  if (label instanceof ElementListUnion) {    process(field,label,list);  }  if (label instanceof ElementMapUnion) {    process(field,label,list);  }  if (label instanceof ElementList) {    process(field,label,list);  }  if (label instanceof ElementArray) {    process(field,label,list);  }  if (label instanceof ElementMap) {    process(field,label,list);  }  if (label instanceof Element) {    process(field,label,list);  }  if (label instanceof Version) {    process(field,label,list);  }  if (label instanceof Text) {    process(field,label,list);  }  if (label instanceof Transient) {    remove(field,label);  }}  }
class C{  public CeFanSearchRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  private void validateSnapshotTargetNotExported(List<URI> blockObjectsToAdd,List<URI> blockObjectsExisting){  for (  URI blockObjToAdd : blockObjectsToAdd) {    if (URIUtil.isType(blockObjToAdd,BlockSnapshot.class)) {      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjToAdd);      for (      URI blockObjExisting : blockObjectsExisting) {        if (URIUtil.isType(blockObjExisting,Volume.class)) {          Volume volume=_dbClient.queryObject(Volume.class,blockObjExisting);          if (snapshot.getNativeId() != null && snapshot.getNativeId().equals(volume.getNativeId())) {            throw APIException.badRequests.snapshotTargetAlreadyExported(volume.getId(),snapshot.getId());          }        }      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Cursor queryAllPurchasedItems(){  return mDb.query(PURCHASED_ITEMS_TABLE_NAME,PURCHASED_COLUMNS,null,null,null,null,null);}  }
class C{  public SessionStartedEvent(final String sessionId,final Map<String,String> properties){  super(sessionId);  this.properties=null == properties ? emptyMap() : copyOf(properties);}  }
class C{  private Boolean onHomeServerUrlUpdate(){  if (!TextUtils.equals(mHomeServerUrl,mHomeServerEditText.getText().toString())) {    mHomeServerUrl=mHomeServerEditText.getText().toString();    checkFlows();    return true;  } else {    mDialog.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(true);    return false;  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  @Override public void clearParameters() throws SQLException {  try {    debugCodeCall("clearParameters");    checkClosed();    ArrayList<? extends ParameterInterface> parameters=command.getParameters();    for (int i=0, size=parameters.size(); i < size; i++) {      ParameterInterface param=parameters.get(i);      param.setValue(null,batchParameters == null);    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehasattributes01.class,args);}  }
class C{  @Override public int read(){  if (currentPos < data.length) {    return data[currentPos++];  } else {    if (!isFinal) {      try {        Thread.sleep(100);      } catch (      InterruptedException e) {      }      return read();    }    return -1;  }}  }
class C{  public VOSubscriptionDetails subscribeToService(VOSubscription subscription,VOService service,VOUser user,VORoleDefinition role) throws Exception {  List<VOUsageLicense> users=null;  if (user != null) {    users=createUsageLicenceVOList(user,role);  }  VOBillingContact voBillingContact=accountService.saveBillingContact(newVOBillingContact());  VOPaymentInfo voPaymentInfo=null;  if (service.getPriceModel().getType() != PriceModelType.FREE_OF_CHARGE) {    voPaymentInfo=accountService.getPaymentInfos().get(0);  } else {    voBillingContact=null;  }  VOSubscription createdSubscription=subscriptionService.subscribeToService(subscription,service,users,voPaymentInfo,voBillingContact,new ArrayList<VOUda>());  return subscriptionService.getSubscriptionDetails(createdSubscription.getSubscriptionId());}  }
class C{  public Object loginUser(String SID,String usernameOrEmail,String Userpass,Boolean storePermanent,Long language_id,Long ldapConfigId){  boolean withLdap=false;  if (ldapConfigId > 0) {    withLdap=true;  }  try {    log.warn("loginUser: " + SID + " "+ usernameOrEmail);    RoomClient currentClient;    IConnection current=Red5.getConnectionLocal();    if (current == null)     return null;    Object o;    if (withLdap) {      log.debug("Ldap Login");      currentClient=clientListManager.getClientByStreamId(current.getClient().getId());      LdapConfig ldapConfig=ldapConfigDao.getLdapConfigById(ldapConfigId);      String ldapLogin=usernameOrEmail;      if (ldapConfig.getAddDomainToUserName() != null && ldapConfig.getAddDomainToUserName()) {        ldapLogin=usernameOrEmail + "@" + ldapConfig.getDomain();      }      o=ldapLoginManagement.doLdapLogin(ldapLogin,Userpass,currentClient,SID,ldapConfig.getConfigFileName());    } else {      currentClient=clientListManager.getClientByStreamId(current.getClient().getId());      o=userManagement.loginUser(SID,usernameOrEmail,Userpass,currentClient,storePermanent);    }    if (o == null)     return null;    if (!o.getClass().isAssignableFrom(Users.class))     return o;    if (currentClient.getUser_id() != null && currentClient.getUser_id() > 0) {      Users u=(Users)o;      currentClient.setFirstname(u.getFirstname());      currentClient.setLastname(u.getLastname());      Collection<Set<IConnection>> conCollection=current.getScope().getConnections();      for (      Set<IConnection> conset : conCollection) {        for (        IConnection cons : conset) {          if (cons != null) {            RoomClient rcl=this.clientListManager.getClientByStreamId(cons.getClient().getId());            if (rcl != null && rcl.getIsScreenClient() != null && rcl.getIsScreenClient()) {            } else {              if (cons instanceof IServiceCapableConnection) {                if (!cons.equals(current)) {                  ((IServiceCapableConnection)cons).invoke("roomConnect",new Object[]{currentClient},this);                }              }            }          }        }      }    }    return o;  } catch (  Exception err) {    log.error("loginUser : ",err);  }  return null;}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static NamedList doStandardDebug(SolrQueryRequest req,String userQuery,Query query,DocList results,boolean dbgQuery,boolean dbgResults) throws IOException {  NamedList dbg=new SimpleOrderedMap();  doStandardQueryDebug(req,userQuery,query,dbgQuery,dbg);  doStandardResultsDebug(req,query,results,dbgResults,dbg);  return dbg;}  }
class C{  public DHPublicKeySpec(BigInteger y,BigInteger p,BigInteger g){  this.y=y;  this.p=p;  this.g=g;}  }
class C{  public static String encodeClientURI(String uri){  if (uri == null) {    return Constants.URI_CLIENT_PREFIX;  }  return Constants.URI_CLIENT_PREFIX + uri;}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (session == null) {    throw new NullPointerException();  }  if (sessionNodeWrappers == null) {    throw new NullPointerException();  }  if (sessionEdges == null) {    throw new NullPointerException();  }}  }
class C{  public Salsa20Engine(int rounds){  if (rounds <= 0 || (rounds & 1) != 0) {    throw new IllegalArgumentException("'rounds' must be a positive, even number");  }  this.rounds=rounds;}  }
class C{  protected void writeStartParagraph(Element elem) throws IOException {  AttributeSet attr=elem.getAttributes();  Object resolveAttr=attr.getAttribute(StyleConstants.ResolveAttribute);  if (resolveAttr instanceof StyleContext.NamedStyle) {    writeStartTag("<p class=" + mapStyleName(((StyleContext.NamedStyle)resolveAttr).getName()) + ">");  } else {    writeStartTag("<p>");  }}  }
class C{  public boolean instructionIsReturn(){  return isReturn;}  }
class C{  public DescriptiveStatistics distribution(Graph graph){  AdjacencyMatrix<Vertex> y=new AdjacencyMatrix<Vertex>(graph);  List<TIntArrayList> components=extractComponents(y);  DescriptiveStatistics stats=new DescriptiveStatistics();  for (  TIntArrayList component : components) {    stats.addValue(component.size());  }  return stats;}  }
class C{  public RouteTracker(HttpRoute route){  this(route.getTargetHost(),route.getLocalAddress());}  }
class C{  public Permutation(int size){  super();  permutation=new int[size];  for (int i=0; i < size; i++) {    permutation[i]=i;  }}  }
class C{  @Override public TreeNode nextElement(){  TreeNode returnValue=currentChild;  if (currentChild != null) {    currentChild=currentChild.getRightSibling();  } else {    throw new NoSuchElementException("TreeNodeChildrenEnumerator");  }  return returnValue;}  }
class C{  public ISchedulingRule createRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return root;  return factoryFor(resource).createRule(resource);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int numCols;  int numRows;  double z;  double noData;  float progress;  int i;  int numReclassRanges;  int numReclassRangesMinusOne;  String[] reclassRangeStr=null;  double[][] reclassRange;  boolean blnAssignMode=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reclassRangeStr=args[i].split("\t");      if (reclassRangeStr[2].toLowerCase().equals("not specified")) {        blnAssignMode=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double[] data;    noData=image.getNoDataValue();    numReclassRanges=reclassRangeStr.length / 3;    numReclassRangesMinusOne=numReclassRanges - 1;    reclassRange=new double[3][numReclassRanges];    i=0;    for (int b=0; b < reclassRangeStr.length; b++) {      if (!reclassRangeStr[b].toLowerCase().equals("not specified")) {        if (!reclassRangeStr[b].toLowerCase().equals("nodata")) {          reclassRange[i][b / 3]=Double.parseDouble(reclassRangeStr[b]);        } else {          reclassRange[i][b / 3]=noData;        }      } else {        reclassRange[i][b / 3]=0;      }      i++;      if (i == 3) {        i=0;      }    }    if (numReclassRanges == 0) {      showFeedback("There is an error with the reclass ranges.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    if (blnAssignMode) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] == reclassRange[1][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] >= reclassRange[1][i] && data[col] < reclassRange[2][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public MockNioSession(){}  }
class C{  public GT_Cover_None(){}  }
class C{  @Override public void updateDouble(int columnIndex,double x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDouble(" + columnIndex + ", "+ x+ "d);");    }    update(columnIndex,ValueDouble.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static TransactionCommands processTransactionMenuCommand(String cmd){  if (cmd.equals("list") || cmd.equals("l")) {    return FinancePortfoliosClient.TransactionCommands.QUERY_FEED;  } else   if (cmd.equals("show") || cmd.equals("s")) {    return FinancePortfoliosClient.TransactionCommands.QUERY_ENTRY;  } else   if (cmd.equals("create") || cmd.equals("c")) {    return FinancePortfoliosClient.TransactionCommands.CREATE;  } else   if (cmd.equals("update") || cmd.equals("u")) {    return FinancePortfoliosClient.TransactionCommands.UPDATE;  } else   if (cmd.equals("delete") || cmd.equals("d")) {    return FinancePortfoliosClient.TransactionCommands.DELETE;  } else   if (cmd.equals("back") || cmd.equals("b")) {    return FinancePortfoliosClient.TransactionCommands.BACK;  } else   if (cmd.equals("quit") || cmd.equals("q")) {    return FinancePortfoliosClient.TransactionCommands.QUIT;  } else {    return FinancePortfoliosClient.TransactionCommands.HELP;  }}  }
class C{  public void endVisit(TextElement node){}  }
class C{  public static Map<String,Object> taskArgument(UUID nodeId,String cacheName,String sql,long timeout,Object[] args,int pageSize,int maxRows){  assert sql != null;  assert timeout >= 0;  assert pageSize > 0;  assert maxRows >= 0;  Map<String,Object> map=U.newHashMap(7);  map.put("confNodeId",nodeId);  map.put("cache",cacheName);  map.put("sql",sql);  map.put("timeout",timeout);  map.put("args",args != null ? Arrays.asList(args) : Collections.emptyList());  map.put("pageSize",pageSize);  map.put("maxRows",maxRows);  return map;}  }
class C{  public void copy(){  invokeAction("copy",TransferHandler.getCopyAction());}  }
class C{  public static IClassFileReader createDefaultClassFileReader(InputStream stream,int decodingFlag){  try {    return new ClassFileReader(Util.getInputStreamAsByteArray(stream,-1),decodingFlag);  } catch (  ClassFormatException e) {    return null;  }catch (  IOException e) {    return null;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof StandardEntityCollection) {    StandardEntityCollection that=(StandardEntityCollection)obj;    return ObjectUtilities.equal(this.entities,that.entities);  }  return false;}  }
class C{  public static void checkTimestamp(String expected,IonValue actual){  checkType(IonType.TIMESTAMP,actual);  IonTimestamp v=(IonTimestamp)actual;  if (expected == null) {    assertTrue("expected null value",v.isNullValue());    assertNull(v.timestampValue());  } else {    assertEquals("timestamp content",expected,v.timestampValue().toString());    assertEquals("timestamp content",expected,v.toString());  }}  }
class C{  public mxCellMarker(mxGraphComponent graphComponent,Color validColor,Color invalidColor,double hotspot){  this.graphComponent=graphComponent;  this.validColor=validColor;  this.invalidColor=invalidColor;  this.hotspot=hotspot;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xC7EF2559,version=150) public int sceHttpDisableKeepAlive(int templateId){  return 0;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException();          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException();          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException();          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException();    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException();    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void randomize(Random random){  for (int j=numInstances() - 1; j > 0; j--)   swap(j,(int)(random.nextDouble() * (double)j));}  }
class C{  public static OFGroup createL2DCOMulticastOverMulticastTunnels(U16 index,U16 tunnelId){  return OFGroup.of(0 | (index.getRaw() & 0x03ff) | (tunnelId.getRaw() << 12)| (L2OverlaySubType.L2_OVERLAY_MULTICAST_OVER_MULTICAST_TUNNELS << 10)| (OFDPAGroupType.L2_DATA_CENTER_OVERLAY << 28));}  }
class C{  public void store16(int addr,int value){  store16(addr,value,AccessSource.CODE);}  }
class C{  public void addInputPort(InputPort inputPort,CommProtocolFactory protocolFactory,Process protocolConfigurationProcess) throws IOException {  protocolConfigurations.add(protocolConfigurationProcess);  String medium=inputPort.location().getScheme();  CommListenerFactory factory=getCommListenerFactory(medium);  if (factory == null) {    throw new UnsupportedCommMediumException(medium);  }  CommListener listener=factory.createListener(interpreter,protocolFactory,inputPort);  listenersMap.put(inputPort.name(),listener);}  }
class C{  SetupWindow(SetupManager manager,String key,String labelKey,String moreInfoURL){  _manager=manager;  _key=key;  _labelKey=labelKey;  _moreInfoURL=moreInfoURL;}  }
class C{  protected final ISchedulingRule parent(IResource resource){switch (resource.getType()) {case IResource.ROOT:case IResource.PROJECT:    return resource;default :  return resource.getParent();}}  }
class C{  public static void closeSilently(Connection conn){  if (conn != null) {    try {      conn.close();    } catch (    SQLException e) {    }  }}  }
class C{  public static RuleViolation isOutputStandard(TransactionOutput output){  if (output.getValue().compareTo(MIN_ANALYSIS_NONDUST_OUTPUT) < 0)   return RuleViolation.DUST;  for (  ScriptChunk chunk : output.getScriptPubKey().getChunks()) {    if (chunk.isPushData() && !chunk.isShortestPossiblePushData())     return RuleViolation.SHORTEST_POSSIBLE_PUSHDATA;  }  return RuleViolation.NONE;}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return result == null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static AgentStatusResponse checkAgentStatusResponse(AgentStatusResponse agentStatusResponse,String hostAddress) throws RpcException {  logger.info("Checking {}",agentStatusResponse);switch (agentStatusResponse.getStatus()) {case OK:    break;case RESTARTING:  throw new IllegalStateException("Agent is restarting, host = " + hostAddress);case UPGRADING:throw new IllegalStateException("Agent is upgrading, host = " + hostAddress);default :throw new RpcException(String.format("Unknown result: %s",agentStatusResponse.getStatus()));}return agentStatusResponse;}  }
class C{  private static boolean isApplicable(Method method,Class[] classes){  Class[] methodArgs=method.getParameterTypes();  if (methodArgs.length != classes.length) {    return false;  }  for (int i=0; i < classes.length; ++i) {    if (!isMethodInvocationConvertible(methodArgs[i],classes[i])) {      return false;    }  }  return true;}  }
class C{  public static int length(final int x){  return x == 0 ? 1 : mostSignificantBit(x) + 1;}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  public static double length(Vector3 v){  return length(v.x,v.y,v.z);}  }
class C{  public void testOpsModeUnique(){  InstanceManager.setProgrammerManager(new DebugProgrammerManager());  Programmer p=InstanceManager.getDefault(jmri.ProgrammerManager.class).getAddressedProgrammer(true,777);  Assert.assertTrue("same ops mode programmer",InstanceManager.getDefault(jmri.ProgrammerManager.class).getAddressedProgrammer(true,777) == p);}  }
class C{  public void addGraphData(String id,String description,String default_value,Function<Hypergraph<V,E>,String> graph_transformer){  if (graph_data.equals(Collections.EMPTY_MAP))   graph_data=new HashMap<String,GraphMLMetadata<Hypergraph<V,E>>>();  graph_data.put(id,new GraphMLMetadata<Hypergraph<V,E>>(description,default_value,graph_transformer));}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("cfu.options.title"));  this.add(getPanelMisc(),getPanelMisc().getName());}  }
class C{  public ServiceNotPublishedException(String message){  super(message);}  }
class C{  private static boolean isEligibleMove(LIRInstruction op){  if (op instanceof ValueMoveOp) {    ValueMoveOp moveOp=(ValueMoveOp)op;    Value source=moveOp.getInput();    Value dest=moveOp.getResult();    return source.getValueKind().equals(dest.getValueKind());  }  return false;}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName,X509NameEntryConverter converter){  this.converter=converter;  X509NameTokenizer nTok=new X509NameTokenizer(dirName);  while (nTok.hasMoreTokens()) {    String token=nTok.nextToken();    if (token.indexOf('+') > 0) {      X509NameTokenizer pTok=new X509NameTokenizer(token,'+');      addEntry(lookUp,pTok.nextToken(),FALSE);      while (pTok.hasMoreTokens()) {        addEntry(lookUp,pTok.nextToken(),TRUE);      }    } else {      addEntry(lookUp,token,FALSE);    }  }  if (reverse) {    Vector o=new Vector();    Vector v=new Vector();    Vector a=new Vector();    int count=1;    for (int i=0; i < this.ordering.size(); i++) {      if (((Boolean)this.added.elementAt(i)).booleanValue()) {        o.insertElementAt(this.ordering.elementAt(i),count);        v.insertElementAt(this.values.elementAt(i),count);        a.insertElementAt(this.added.elementAt(i),count);        count++;      } else {        o.insertElementAt(this.ordering.elementAt(i),0);        v.insertElementAt(this.values.elementAt(i),0);        a.insertElementAt(this.added.elementAt(i),0);        count=1;      }    }    this.ordering=o;    this.values=v;    this.added=a;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.THROW_STATEMENT__EXPRESSION:    return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private VOSubscriptionDetails givenSubscription(boolean isFree){  VOSubscriptionDetails subscription=new VOSubscriptionDetails();  subscription.setSubscriptionId("test");  subscription.setSubscribedService(new VOService());  if (isFree) {    VOPriceModel priceModel=new VOPriceModel();    priceModel.setType(PriceModelType.FREE_OF_CHARGE);    subscription.setPriceModel(priceModel);  } else {    VOPriceModel priceModel=new VOPriceModel();    priceModel.setType(PriceModelType.PER_UNIT);    subscription.setPriceModel(priceModel);    prepareBillingContact(subscription,10000);    preparePaymentInfo(subscription,10001);  }  return subscription;}  }
class C{  private void proto(){  ToHitData proto=ProtomechPhysicalAttackAction.toHit(clientgui.getClient().getGame(),cen,target);  String title=Messages.getString("PhysicalDisplay.ProtoMechAttackDialog.title",new Object[]{target.getDisplayName()});  String message=Messages.getString("PhysicalDisplay.ProtoMechAttackDialog.message",new Object[]{proto.getValueAsString(),new Double(Compute.oddsAbove(proto.getValue(),ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING))),proto.getDesc(),ProtomechPhysicalAttackAction.getDamageFor(ce(),target) + proto.getTableDesc()});  if (clientgui.doYesNoDialog(title,message)) {    disableButtons();    if (GUIPreferences.getInstance().getAutoDeclareSearchlight()) {      doSearchlight();    }    attacks.addElement(new ProtomechPhysicalAttackAction(cen,target.getTargetType(),target.getTargetId()));    ready();  }}  }
class C{  public Map<Triple,Double> findCollidersUsingSepsets(SepsetProducer sepsetProducer,Graph graph,boolean verbose){  TetradLogger.getInstance().log("details","Starting Collider Orientation:");  Map<Triple,Double> colliders=new HashMap<>();  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    findColliders(sepsetProducer,graph,verbose,colliders,b);  }  TetradLogger.getInstance().log("details","Finishing Collider Orientation.");  return colliders;}  }
class C{  public static Integer parse(Integer color){  return parse(color,null);}  }
class C{  public void clear(){  this.fingerprintMap.clear();  this.templateMap.clear();  this.sourcecodeMap.values().forEach(null);  this.sourcecodeMap.clear();}  }
class C{  @Inline public void addEvent(EventType et,double dval1,String sval1){  if (!enabled)   return;  addEventInternal(et,dval1,sval1);}  }
class C{  public void receiveStoreAndForwardMsgSessionInvitation(TerminatingStoreAndForwardOneToOneChatMessageSession session){  if (sLogger.isActivated()) {    sLogger.debug("Handle event S&F messages session invitation");  }  mChatService.receiveOneToOneChatInvitation(session);}  }
class C{  protected SwapSpaceSpi spi(){  return new FileSwapSpaceSpi();}  }
class C{  public int createString(String s){  byte[] utf8=s.getBytes(utf8charset);  addByte((byte)0);  startVector(1,utf8.length,1);  bb.position(space-=utf8.length);  bb.put(utf8,0,utf8.length);  return endVector();}  }
class C{  private TzdbZoneRulesCompiler(){}  }
class C{  public ResultFileSeedMerger(){  super();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected Object[] initializeRoots(){  MethodModel method=null;  String sourceFilter=null;  String sinkFilter=null;  if (fInput instanceof MethodModel) {    method=(MethodModel)fInput;  } else   if (fInput instanceof MethodWithSourceSinkFilter) {    MethodWithSourceSinkFilter methodWithSourceSinkFilter=(MethodWithSourceSinkFilter)fInput;    method=methodWithSourceSinkFilter.getMethod();    SourceSinkPair sourceSinkFilter=methodWithSourceSinkFilter.getSourceSinkFilter();    sourceFilter=sourceSinkFilter.getO1();    sinkFilter=sourceSinkFilter.getO2();  }  if (!method.hasInfoFlowInfo())   return NO_CHILDREN;  List<Object> roots=new ArrayList<Object>();  boolean hasSourceInfo=false;  TreeElement<String,MethodArgumentModel> sourceRoot=new TreeElement<String,MethodArgumentModel>("Sources","Sources",MethodArgumentModel.class);  for (int i=-1; i < method.getMethodArguments().size(); i++) {    MethodArgumentModel methodArg=method.getArgumentModel(i);    Map<String,List<CallLocationModel>> infoKindToCalls=methodArg.getSourceInfoUnits();    if (infoKindToCalls != null && !infoKindToCalls.isEmpty()) {      Set<String> infoKinds=infoKindToCalls.keySet();      if (sourceFilter == null || infoKinds.contains(sourceFilter)) {        if (sourceFilter != null) {          infoKinds=new HashSet<String>();          infoKinds.add(sourceFilter);        }        hasSourceInfo=true;        TreeElement<MethodArgumentModel,String> methArgElement=new TreeElement<MethodArgumentModel,String>(methodArg.toString(),methodArg,String.class);        for (        String infoKind : infoKinds) {          TreeElement<String,CallLocationModel> infoKindElement=new TreeElement<String,CallLocationModel>(infoKind,infoKind,CallLocationModel.class);          methArgElement.addChild(infoKindElement);          List<CallLocationModel> locs=infoKindToCalls.get(infoKind);          if (locs != null) {            for (            CallLocationModel loc : locs) {              TreeElement<CallLocationModel,Object> locElement=new TreeElement<CallLocationModel,Object>(loc.toString(),loc,Object.class);              infoKindElement.addChild(locElement);            }          }        }        sourceRoot.addChild(methArgElement);      }    }  }  if (hasSourceInfo)   roots.add(sourceRoot);  List<String> sinkInfoKinds=method.getSinkInfoKinds();  if (sinkInfoKinds != null) {    TreeElement<String,String> sinkRoot=new TreeElement<String,String>("Sinks","Sinks",String.class);    String infoKindsStr=(sinkFilter != null) ? sinkFilter : sinkInfoKinds.toString();    TreeElement<String,Object> infoKindsElement=new TreeElement<String,Object>(infoKindsStr,infoKindsStr,Object.class);    sinkRoot.addChild(infoKindsElement);    roots.add(sinkRoot);  }  return roots.toArray();}  }
class C{  private synchronized void endEditing(int reason,boolean forceVKBOpen,boolean forceVKBClose){  if (!mIsEditing || mEditText == null) {    return;  }  mLastEndEditReason=reason;  boolean isNextActionFlagSet=((mEditText.getImeOptions() & 0xf) == EditorInfo.IME_ACTION_NEXT);  boolean leaveKeyboardShowing=impl.isAsyncEditMode() || (reason == REASON_IME_ACTION) && isNextActionFlagSet || forceVKBOpen;  if (forceVKBClose) {    leaveKeyboardShowing=false;  }  if (!leaveKeyboardShowing) {    showVirtualKeyboard(false);  }  int imo=mEditText.getImeOptions() & 0xf;  if (reason == REASON_IME_ACTION && mEditText.mTextArea instanceof TextField && ((TextField)mEditText.mTextArea).getDoneListener() != null && ((imo & EditorInfo.IME_ACTION_DONE) != 0 || (imo & EditorInfo.IME_ACTION_SEARCH) != 0 || (imo & EditorInfo.IME_ACTION_SEND) != 0 || (imo & EditorInfo.IME_ACTION_GO) != 0)) {    ((TextField)mEditText.mTextArea).fireDoneEvent();    showVirtualKeyboard(false);  }  mLastEditText=mEditText;  removeView(mEditText);  Component editingComponent=mEditText.mTextArea;  mEditText.removeTextChangedListener(mEditText.mTextWatcher);  mEditText=null;  if (impl.isAsyncEditMode()) {    Runnable onComplete=(Runnable)editingComponent.getClientProperty("android.onAsyncEditingComplete");    editingComponent.putClientProperty("android.onAsyncEditingComplete",null);    if (onComplete != null) {      Display.getInstance().callSerially(onComplete);    }  }  waitingForSynchronousEditingCompletion=false;}  }
class C{  public static void run(String configFile){  new PTMapperImpl(configFile).run();}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public void start(){  m_debugger.addListener(m_debuglistener);  final ProcessManager processManager=m_debugger.getProcessManager();  processManager.addListener(m_processListener);  for (  final TargetProcessThread thread : processManager.getThreads()) {    thread.addListener(m_threadEventListener);  }}  }
class C{  public JSONObject(Map map){  if (map != null) {    Iterator i=map.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      super.put(e.getKey(),wrap(e.getValue()));    }  }}  }
class C{  public int compare(QuadEdge qeA,QuadEdge qeB){  if (this.map.get(qeA) < this.map.get(qeB)) {    return 1;  } else   if (this.map.get(qeA) == this.map.get(qeB)) {    return 0;  } else {    return -1;  }}  }
class C{  public void addFilePart(String fieldName,File uploadFile,String fileName) throws IOException {  if (TextUtils.isEmpty(fileName)) {    fileName=uploadFile.getName();  }  mWriter.append("--" + mBoundary).append(LINE_FEED);  mWriter.append("Content-Disposition: form-data; name=\"" + fieldName + "\"; filename=\""+ fileName+ "\"").append(LINE_FEED);  mWriter.append("Content-Type: " + URLConnection.guessContentTypeFromName(fileName)).append(LINE_FEED);  mWriter.append("Content-Transfer-Encoding: binary").append(LINE_FEED);  mWriter.append(LINE_FEED);  mWriter.flush();  FileInputStream inputStream=new FileInputStream(uploadFile);  byte[] buffer=new byte[4096];  int bytesRead=-1;  while ((bytesRead=inputStream.read(buffer)) != -1) {    mOutputStream.write(buffer,0,bytesRead);  }  mOutputStream.flush();  inputStream.close();  mWriter.append(LINE_FEED);  mWriter.flush();}  }
class C{  @Deprecated public static void init(Resources res){  mMetrics=res.getDisplayMetrics();  mMinimumFlingVelocity=ViewConfiguration.getMinimumFlingVelocity();  mMaximumFlingVelocity=ViewConfiguration.getMaximumFlingVelocity();}  }
class C{  protected void updateSession(){  setSession(computeSession());}  }
class C{  public void testParenthesisMust2() throws IOException {  BooleanQuery.Builder q3=new BooleanQuery.Builder();  q3.add(new BooleanClause(t1,BooleanClause.Occur.SHOULD));  q3.add(new BooleanClause(t2,BooleanClause.Occur.SHOULD));  BooleanQuery.Builder q4=new BooleanQuery.Builder();  q4.add(new BooleanClause(c1,BooleanClause.Occur.SHOULD));  q4.add(new BooleanClause(c2,BooleanClause.Occur.SHOULD));  BooleanQuery.Builder q2=new BooleanQuery.Builder();  q2.add(q3.build(),BooleanClause.Occur.SHOULD);  q2.add(q4.build(),BooleanClause.Occur.MUST);  assertEquals(1,search(q2.build()));}  }
class C{  public static List<BigInteger> findIDsByStatus(EntityManager em,boolean enabled){  requireArgument(em != null,"Entity manager can not be null.");  TypedQuery<BigInteger> query=em.createNamedQuery("Alert.findIDByStatus",BigInteger.class);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("enabled",enabled);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.583 -0500",hash_original_method="A1FC6FBF45CD4662583E11635A563069",hash_generated_method="889DBFFCEA6AA85967FA554415EFE20F") public boolean isMalformed(){  return ((this.type) == 1);}  }
class C{  private void moveDownTrace(){  int index=getSelectedRow();  if (index > -1) {    assert 0 <= index && index < gcTraceSet.size();    GCTrace gcTrace=gcTraceSet.findGCTrace(index);    gcTraceSet.moveDown(gcTrace.getName());  }}  }
class C{  public void broadcastLogoutForce(String rawToken,String username){  List<URI> vdcIds=dbClient.queryByType(VirtualDataCenter.class,true);  Iterator<VirtualDataCenter> vdcIter=dbClient.queryIterativeObjects(VirtualDataCenter.class,vdcIds);  while (vdcIter.hasNext()) {    VirtualDataCenter vdc=vdcIter.next();    if (vdc.getShortId().equals(VdcUtil.getLocalShortVdcId())) {      log.info("Skipping local vdc.  Already proceeded logout?force locally");      continue;    }    try {      ClientResponse resp=geoClientCacheMgt.getGeoClient(vdc.getShortId()).logoutToken(rawToken,username,true);    } catch (    Exception e) {      log.error("Could not contact remote VDC to invalidate token with force option: {}",vdc.getShortId());    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.EIP_MODEL__OWNED_ROUTES:    return ownedRoutes != null && !ownedRoutes.isEmpty();case EipPackage.EIP_MODEL__OWNED_SERVICE_REFS:  return ownedServiceRefs != null && !ownedServiceRefs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void initialize(UimaContext aContext) throws ResourceInitializationException {  super.initialize(aContext);  language=Language.getLanguageFromString((String)aContext.getConfigParameterValue(PARAM_LANGUAGE));  find_intervals=(Boolean)aContext.getConfigParameterValue(PARAM_INTERVALS);  find_interval_candidates=(Boolean)aContext.getConfigParameterValue(PARAM_INTERVAL_CANDIDATES);  ResourceScanner rs=ResourceScanner.getInstance();  readResources(rs.getRules(language.getName()));}  }
class C{  public static CommitVersionInfo build(IndexCommit commit){  long generation=commit.getGeneration();  long version=0;  try {    final Map<String,String> commitData=commit.getUserData();    String commitTime=commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);    if (commitTime != null) {      try {        version=Long.parseLong(commitTime);      } catch (      NumberFormatException e) {        LOG.warn("Version in commitData was not formated correctly: " + commitTime,e);      }    }  } catch (  IOException e) {    LOG.warn("Unable to get version from commitData, commit: " + commit,e);  }  return new CommitVersionInfo(generation,version);}  }
class C{  private static boolean isValidPort(int port){  return port >= 0 && port <= 65535;}  }
class C{  public Boolean isObjective(){  return objective;}  }
class C{  public Panel(){  initComponents();  table.setColumnSelectionAllowed(false);  table.setRowSelectionAllowed(true);  table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  ListSelectionModel selectionModel=table.getSelectionModel();  selectionModel.addListSelectionListener(new SelectionListener());  JTableHeader header=table.getTableHeader();  header.setReorderingAllowed(false);  GUIUtilities.setTableHeader(header);  for (int i=0; i < gcTraceGeneratorSet.size(); ++i) {    GCTraceGenerator gcTraceGenerator=gcTraceGeneratorSet.get(i);    String type=" " + gcTraceGenerator.getGCTraceType() + " ";    generatorMenu.addItem(type);    assert type.equals(generatorMenu.getItemAt(i));  }}  }
class C{  public void removeWebEventListener(String type,ActionListener listener){  EventDispatcher e=getEventDispatcher(type,false);  if (e != null) {    e.removeListener(listener);    if (!e.hasListeners()) {      listeners.remove(type);    }  }}  }
class C{  @Override public boolean containsValue(Object value){  Entry tab[]=table;  if (value == null) {    for (int i=tab.length; i-- > 0; )     for (Entry e=tab[i]; e != null; e=e.next)     if (e.value == null)     return true;  } else {    for (int i=tab.length; i-- > 0; )     for (Entry e=tab[i]; e != null; e=e.next)     if (value.equals(e.value))     return true;  }  return false;}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  static void printarray(PrintStream out,String name,int expectedLen,double[][] array2d){  out.println(name);  checkLen(expectedLen,array2d.length);  out.println(TABLE_START_DECL + " ");  int i=0;  for (  double[] array : array2d) {    out.print("        {");    for (    double d : array) {      out.printf("%-25.25s",format(d));    }    out.println("}, // " + i++);  }  out.println(TABLE_END_DECL);}  }
class C{  static public BufferedReader createReader(File file){  try {    InputStream is=new FileInputStream(file);    if (file.getName().toLowerCase().endsWith(".gz")) {      is=new GZIPInputStream(is);    }    return createReader(is);  } catch (  Exception e) {    if (file == null) {      throw new RuntimeException("File passed to createReader() was null");    } else {      e.printStackTrace();      throw new RuntimeException("Couldn't create a reader for " + file.getAbsolutePath());    }  }}  }
class C{  public boolean isLocateAtCenter(){  return locateAtCenter;}  }
class C{  public static boolean argumentLabelStartCheck(PsiBuilder builder,GroovyParser parser){  PsiBuilder.Marker marker=builder.mark();  if (ParserUtils.lookAhead(builder,GroovyTokenTypes.mSTAR,GroovyTokenTypes.mCOLON)) {    builder.advanceLexer();    marker.done(GroovyElementTypes.ARGUMENT_LABEL);    return true;  }  final IElementType type=builder.getTokenType();  if (ParserUtils.lookAhead(builder,GroovyTokenTypes.mIDENT,GroovyTokenTypes.mCOLON) || TokenSets.KEYWORDS.contains(type) || GroovyTokenTypes.mSTRING_LITERAL.equals(type)|| GroovyTokenTypes.mGSTRING_LITERAL.equals(type)) {    builder.advanceLexer();    if (GroovyTokenTypes.mCOLON.equals(builder.getTokenType())) {      marker.done(GroovyElementTypes.ARGUMENT_LABEL);      return true;    } else {      marker.rollbackTo();      return false;    }  }  if (GroovyTokenTypes.mGSTRING_BEGIN.equals(type) || GroovyTokenTypes.mREGEX_BEGIN.equals(type) || GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN.equals(type)|| TokenSets.NUMBERS.contains(type)|| GroovyTokenTypes.mLBRACK.equals(type)|| GroovyTokenTypes.mLPAREN.equals(type)|| GroovyTokenTypes.mLCURLY.equals(type)) {    PrimaryExpression.parsePrimaryExpression(builder,parser);    if (GroovyTokenTypes.mCOLON.equals(builder.getTokenType())) {      marker.done(GroovyElementTypes.ARGUMENT_LABEL);      return true;    } else {      marker.rollbackTo();      return false;    }  }  marker.drop();  return false;}  }
class C{  public void release(){  if (db != null) {    db.close();    db=null;  }}  }
class C{  public void build(){  logger.info("Building suffix arrays...");  TimeKeeper timer=TimingUtils.start();  int numSourcePositions=srcBitext.length - numSentences;  srcSuffixArray=build(srcBitext,numSourcePositions);  if (srcSuffixArray.length != numSourcePositions)   throw new RuntimeException();  timer.mark("Source array");  int numTargetPositions=tgtBitext.length - numSentences;  tgtSuffixArray=build(tgtBitext,numTargetPositions);  if (tgtSuffixArray.length != numTargetPositions)   throw new RuntimeException();  timer.mark("Target array");  logger.info("Done constructing suffix arrays: {}",timer);}  }
class C{  public static boolean findOption(String name,List<String> args,boolean remove){  int idx=args.indexOf(name);  if (idx >= 0) {    if (remove) {      args.remove(idx);    }    return true;  }  return false;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Invoice_ID"))     m_C_Invoice_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public static AnnotationMirror findEffectiveAnnotationInHierarchy(final QualifierHierarchy qualifierHierarchy,final AnnotatedTypeMirror toSearch,final AnnotationMirror top){  return findEffectiveAnnotationInHierarchy(qualifierHierarchy,toSearch,top,false);}  }
class C{  protected String generateDeployerFeaturesText(String containerId){  StringBuilder output=new StringBuilder();  output.append("h3.Deployer Features");  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  if (containerId.equals("jonas5x")) {    output.append("{note}The {{jonas5x}} local deployer requires the target JOnAS server " + "to be in {{development}} mode.");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);    output.append("If this is not the case, please use the {{jonas5x}} remote deployer.");    output.append(LINE_SEPARATOR);    output.append("Note that the {{jonas5x}} remote deployer can be used on a local " + "server by setting the {{GeneralPropertySet.HOSTNAME}} parameter to " + "{{localhost}}.{note}");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);  }  output.append("|| Feature name || Java API || Ant tasks || Maven 2 / Maven 3 plugin || Comment ||");  output.append(LINE_SEPARATOR);  if (this.deployerFactory.isDeployerRegistered(containerId,DeployerType.INSTALLED)) {    output.append("| [Installed Deployer] | ");    output.append("(/) {{" + computedFQCN(this.deployerFactory.getDeployerClass(containerId,DeployerType.INSTALLED).getName()) + "}} | (/) | (/) | |");  } else {    output.append("| [Installed Deployer] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (this.deployerFactory.isDeployerRegistered(containerId,DeployerType.EMBEDDED)) {    output.append("| [Embedded Deployer] | ");    output.append("(/) {{" + computedFQCN(this.deployerFactory.getDeployerClass(containerId,DeployerType.EMBEDDED).getName()) + "}} | (/) | (/) | |");  } else {    output.append("| [Embedded Deployer] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (this.deployerFactory.isDeployerRegistered(containerId,DeployerType.REMOTE)) {    output.append("| [Remote Deployer] | ");    output.append("(/) {{" + computedFQCN(this.deployerFactory.getDeployerClass(containerId,DeployerType.REMOTE).getName()) + "}} | (/) | (/) | |");  } else {    output.append("| [Remote Deployer] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (containerId.startsWith("glassfish")) {    String glassFishPropertySetLink=JAVADOC_URL_PREFIX + GlassFishPropertySet.class.getName().replace('.','/') + ".html#";    output.append("{info:title=Adding arguments to the Deployer}");    output.append(LINE_SEPARATOR);    output.append("The Glassfish installed deployer allows for additional deployment and ");    output.append("undeployment arguments by adding properties prefixed with ");    output.append("{{[GlassFishPropertySet.DEPLOY_ARG_PREFIX|" + glassFishPropertySetLink);    output.append("DEPLOY_ARG_PREFIX]}} and {{[GlassFishPropertySet.UNDEPLOY_ARG_PREFIX|");    output.append(glassFishPropertySetLink + "UNDEPLOY_ARG_PREFIX]}} respectively ");    output.append("followed by a number starting at {{1}}.");    output.append("{info}");    output.append(LINE_SEPARATOR);  }  return output.toString();}  }
class C{  public DtoPaymentGatewayInfoImpl(String label,String name,boolean active){  this.name=name;  this.label=label;  this.active=active;}  }
class C{  public int read(byte[] b) throws IOException {  return this.read(b,0,b.length);}  }
class C{  public int read(byte[] b,int off,int len){  return 0;}  }
class C{  public void messageReceived(final NextFilter nextFilter,final IoBuffer buf){  try {    if (buf.remaining() >= SocksProxyConstants.SOCKS_4_RESPONSE_SIZE) {      handleResponse(buf);    }  } catch (  Exception ex) {    closeSession("Proxy handshake failed: ",ex);  }}  }
class C{  public boolean inExcludeSegments(){  return getSegmentNumberRelativeToGroup() >= SegmentedTimeline.this.segmentsIncluded;}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {}  }
class C{  protected Logger createLogger(){  return Log.getLogger("org.eclipse.jetty.servlets." + SERVLET_NAME);}  }
class C{  public static void assertMatrix4x3dEquals(Matrix4x3dc m1,Matrix4x3dc m2,double delta){  Assert.assertEquals(m1.m00(),m2.m00(),delta);  Assert.assertEquals(m1.m01(),m2.m01(),delta);  Assert.assertEquals(m1.m02(),m2.m02(),delta);  Assert.assertEquals(m1.m10(),m2.m10(),delta);  Assert.assertEquals(m1.m11(),m2.m11(),delta);  Assert.assertEquals(m1.m12(),m2.m12(),delta);  Assert.assertEquals(m1.m20(),m2.m20(),delta);  Assert.assertEquals(m1.m21(),m2.m21(),delta);  Assert.assertEquals(m1.m22(),m2.m22(),delta);  Assert.assertEquals(m1.m30(),m2.m30(),delta);  Assert.assertEquals(m1.m31(),m2.m31(),delta);  Assert.assertEquals(m1.m32(),m2.m32(),delta);}  }
class C{  public IconicsDrawableOld color(int color){  paint.setColor(color);  invalidateSelf();  return this;}  }
class C{  public AABB(AABB box){  this(box,box.getExtent());}  }
class C{  ClientResponse put(URI resourceURI){  return put(resourceURI,VPlexApiConstants.ACCEPT_JSON_FORMAT_0);}  }
class C{  public void sendMessage(Message message) throws XMPPException {  connection.sendPacket(message);}  }
class C{  public boolean add(final char[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  public void dialogFragment(Fragment to){  getRoot().manager.dialogFragment(to);}  }
class C{  private static void doSort(float[] a,int left,int right,float[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        float t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  float[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new float[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    float[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public TeXFormula(String s,Map<String,String> map) throws ParseException {  this.jlmXMLMap=map;  this.textStyle=textStyle;  parser=new TeXParser(s,this);  parser.parse();}  }
class C{  @Override public void close(){  super.close();  allLocks.remove(fileName);  try {    FileChannel channel=lock.channel();    lock.release();    channel.close();    File file=new File(fileName + LCK_EXT);    file.delete();  } catch (  IOException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.663 -0400",hash_original_method="C785E1255DBAB6B7D98E548DC14AD6C8",hash_generated_method="474643B385CA82B7220A24627CA94C44") protected boolean engineVerify(byte[] sigBytes,int offset,int length) throws SignatureException {  return checkSignature(sigBytes,offset,length);}  }
class C{  private void paintControl(final PaintEvent e){  this.gc=e.gc;  e.gc.setAdvanced(true);  e.gc.setAntialias(SWT.ON);  drawBackground();  drawGrid();  for (  final SampleWrapper sample : this.samples.values()) {    drawData(sample);  }  if (this.captionVisible && this.samples.size() == 1) {    drawCaption();  }}  }
class C{  public boolean isComplete(){  return completed;}  }
class C{  public void init(boolean forEncryption,CipherParameters param,String label){  init(forEncryption,param);  this.label=label;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  public static ModifiableDBIDs ensureModifiable(DBIDs ids){  if (ids instanceof ModifiableDBIDs) {    return (ModifiableDBIDs)ids;  } else {    if (ids instanceof ArrayDBIDs) {      return newArray(ids);    }    if (ids instanceof HashSetDBIDs) {      return newHashSet(ids);    }    return newArray(ids);  }}  }
class C{  public void testMetadataFileList(ArchiveSource src) throws IOException {  src.clear();  addAllTestData(src);  List<String> files=new ArrayList<String>(src.getAllMetadataFileNames());  Collections.sort(files);  assertEquals(m_metafiles,files);}  }
class C{  public static boolean readBoolean(Parcel in){  return 0 == in.readInt();}  }
class C{  public void clearNotices(){  notices.clear();}  }
class C{  public static double parseNumberPercentWithSeparateRange(FXGNode node,String value,String name,double minNumber,double maxNumber,double minPercent,double maxPercent,double defaultValue){  if (value.length() != 0 && value.charAt(value.length() - 1) == '%') {    String doubleValue=value.substring(0,value.length() - 1);    try {      return parseDouble(node,doubleValue,name,minPercent,maxPercent,defaultValue);    } catch (    FXGException e) {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidPercentValue",name,value);    }  } else {    return parseDouble(node,value,name,minNumber,maxNumber,defaultValue);  }}  }
class C{  private double calculateYFactor(){  double deltaSource=sourceBBOX.getMaxY() - sourceBBOX.getMinY();  double deltaTarget=targetBBOX.getMaxY() - targetBBOX.getMinY();  return deltaTarget / deltaSource;}  }
class C{  public Pedigree(Pedigree other){  __isset_bitfield=other.__isset_bitfield;  this.true_as_of_secs=other.true_as_of_secs;  if (other.is_set_source()) {    this.source=other.source;  }  if (other.is_set_system()) {    this.system=new OrigSystem(other.system);  }}  }
class C{  public boolean isInDownload(Way way){  for (  Node n : way.getNodes()) {    if (!getDelegator().isInDownload(n.getLat(),n.getLon())) {      return false;    }  }  return true;}  }
class C{  public void reserveIds(final IPredicate<?>[] preds){  if (preds == null)   throw new IllegalArgumentException();  for (  IPredicate<?> p : preds) {    reserve(p.getId());  }}  }
class C{  public static Set<TypeVariable> methodTypeToTargets(final AnnotatedExecutableType methodType){  final List<AnnotatedTypeVariable> annotatedTypeVars=methodType.getTypeVariables();  final Set<TypeVariable> targets=new LinkedHashSet<>(annotatedTypeVars.size());  for (  final AnnotatedTypeVariable atv : annotatedTypeVars) {    targets.add(atv.getUnderlyingType());  }  return targets;}  }
class C{  public ZoneInfoProvider(File fileDir) throws IOException {  if (fileDir == null) {    throw new IllegalArgumentException("No file directory provided");  }  if (!fileDir.exists()) {    throw new IOException("File directory doesn't exist: " + fileDir);  }  if (!fileDir.isDirectory()) {    throw new IOException("File doesn't refer to a directory: " + fileDir);  }  iFileDir=fileDir;  iResourcePath=null;  iLoader=null;  iZoneInfoMap=loadZoneInfoMap(openResource("ZoneInfoMap"));}  }
class C{  @SuppressWarnings("deprecation") public void testSimpleRWWriterReader() throws FileNotFoundException, IOException {  final ChecksumUtility checker=ChecksumUtility.getCHK();  final HALogManager manager=new HALogManager(m_logdir);  final IRootBlockView rbv=openRBV(StoreTypeEnum.RW);  assertTrue(rbv.getStoreType() == StoreTypeEnum.RW);  final HALogFile logfile=manager.createLog(rbv);  final IHALogWriter writer=logfile.getWriter();  int sequence=0;  final ByteBuffer data=randomData(2000);  final UUID storeUUID=UUID.randomUUID();  final IHAWriteMessage msg=new HAWriteMessage(storeUUID,rbv.getCommitCounter(),rbv.getFirstCommitTime(),sequence,data.limit(),checker.checksum(data),rbv.getStoreType(),rbv.getQuorumToken(),1000,0);  writer.write(msg,data);  final IHALogReader reader=logfile.getReader();  assertTrue(reader.hasMoreBuffers());  ByteBuffer rbuf=ByteBuffer.allocate(1 * 1024 * 1024);  IHAWriteMessage rmsg=reader.processNextBuffer(rbuf);  assertTrue(rmsg.getSize() == msg.getSize());  writer.close(closeRBV(rbv));  assertFalse(reader.hasMoreBuffers());  assertTrue(logfile.isOpen());  reader.close();  assertFalse(logfile.isOpen());  try {    HALogManager.main(new String[]{m_logdir.getAbsolutePath()});  } catch (  InterruptedException e) {  }}  }
class C{  protected void grow(){  if (dists == EMPTY_DISTS) {    dists=new double[INITIAL_SIZE];    ids=new int[INITIAL_SIZE];    return;  }  final int len=dists.length;  final int newlength=len + (len >> 1);  double[] odists=dists;  dists=new double[newlength];  System.arraycopy(odists,0,dists,0,odists.length);  int[] oids=ids;  ids=new int[newlength];  System.arraycopy(oids,0,ids,0,oids.length);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public Hash(String plainText,String algorithm){  super();  setPlainText(plainText);  setAlgorithm(algorithm);}  }
class C{  public void writeToStream(OutputStream os) throws IOException {  getWrappedPath().writeToStream(os);}  }
class C{  public boolean isValidChannel(int channel){  if (isCurrentChannel(channel)) {    return true;  }  int count=mFreeLCNCounts[channel];  int threshold=(int)((double)mFreeHighestCount * 0.2);  return count >= threshold;}  }
class C{  public float minutes(){  return seconds() / 60;}  }
class C{  UndoLog(Session session){  this.database=session.getDatabase();  largeTransactions=database.getSettings().largeTransactions;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultKeyedValues clone=(DefaultKeyedValues)super.clone();  clone.keys=(ArrayList)this.keys.clone();  clone.values=(ArrayList)this.values.clone();  clone.indexMap=(HashMap)this.indexMap.clone();  return clone;}  }
class C{  private Drawable tileify(Drawable drawable,boolean clip){  if (drawable instanceof LayerDrawable) {    LayerDrawable background=(LayerDrawable)drawable;    final int N=background.getNumberOfLayers();    Drawable[] outDrawables=new Drawable[N];    for (int i=0; i < N; i++) {      int id=background.getId(i);      outDrawables[i]=tileify(background.getDrawable(i),(id == android.R.id.progress || id == android.R.id.secondaryProgress));    }    LayerDrawable newBg=new LayerDrawable(outDrawables);    for (int i=0; i < N; i++) {      newBg.setId(i,background.getId(i));    }    return newBg;  } else   if (drawable instanceof BitmapDrawable) {    final Bitmap tileBitmap=((BitmapDrawable)drawable).getBitmap();    if (mSampleTile == null) {      mSampleTile=tileBitmap;    }    final ShapeDrawable shapeDrawable=new ShapeDrawable(getDrawableShape());    final BitmapShader bitmapShader=new BitmapShader(tileBitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);    shapeDrawable.getPaint().setShader(bitmapShader);    return (clip) ? new ClipDrawable(shapeDrawable,Gravity.LEFT,ClipDrawable.HORIZONTAL) : shapeDrawable;  }  return drawable;}  }
class C{  @Inject public FsRepository(RepositoryName name,RepositorySettings repositorySettings,IndexShardRepository indexShardRepository,Environment environment) throws IOException {  super(name.getName(),repositorySettings,indexShardRepository);  Path locationFile;  String location=repositorySettings.settings().get("location",settings.get("repositories.fs.location"));  if (location == null) {    logger.warn("the repository location is missing, it should point to a shared file system location that is available on all master and data nodes");    throw new RepositoryException(name.name(),"missing location");  }  locationFile=environment.resolveRepoFile(location);  if (locationFile == null) {    if (environment.repoFiles().length > 0) {      logger.warn("The specified location [{}] doesn't start with any repository paths specified by the path.repo setting: [{}] ",location,environment.repoFiles());      throw new RepositoryException(name.name(),"location [" + location + "] doesn't match any of the locations specified by path.repo");    } else {      logger.warn("The specified location [{}] should start with a repository path specified by the path.repo setting, but the path.repo setting was not set on this node",location);      throw new RepositoryException(name.name(),"location [" + location + "] doesn't match any of the locations specified by path.repo because this setting is empty");    }  }  blobStore=new FsBlobStore(settings,locationFile);  this.chunkSize=repositorySettings.settings().getAsBytesSize("chunk_size",settings.getAsBytesSize("repositories.fs.chunk_size",null));  this.compress=repositorySettings.settings().getAsBoolean("compress",settings.getAsBoolean("repositories.fs.compress",false));  this.basePath=BlobPath.cleanPath();}  }
class C{  public Dimension minimumLayoutSize(Container target){  Dimension size;synchronized (this) {    checkContainer(target);    checkRequests();    size=new Dimension(xTotal.minimum,yTotal.minimum);  }  Insets insets=target.getInsets();  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);  return size;}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public int size(String key){  List<Serializable> entries=data.get(key);  if (entries == null) {    throw new IllegalArgumentException(MessageFormat.format(INVALID_KEY,key));  } else {    return entries.size();  }}  }
class C{  public static int search(Card[] cards,Card target){  for (int i=0; i < cards.length; i++) {    if (cards[i].equals(target)) {      return i;    }  }  return -1;}  }
class C{  public static double parseDouble(String text){  return parseDouble(text,0.0);}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  public void deleteSelectedEntry(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    String alias=kseFrame.getSelectedEntryAlias();    String message=MessageFormat.format(res.getString("DeleteTrustedCertificateAction.ConfirmDelete.message"),alias);    int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("DeleteTrustedCertificateAction.DeleteEntry.Title"),JOptionPane.YES_NO_OPTION);    if (selected != JOptionPane.YES_OPTION) {      return;    }    keyStore.deleteEntry(alias);    currentState.append(newState);    kseFrame.updateControls(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  protected void progress(double pct,int blocksSoFar,Date date){  log.info(String.format("Chain download %d%% done with %d blocks to go, block date %s",(int)pct,blocksSoFar,DateFormat.getDateTimeInstance().format(date)));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void configureOverlay(){  dimmer=new StackPane();  dimmer.setManaged(false);  dimmerMessage=new Label(DEFAULT_OVERLAY_MESSAGE);  dimmerMessage.setFont(Font.font(dimmerMessage.getFont().getFamily(),FontWeight.BOLD,18));  dimmerMessage.setTextFill(Color.WHITE);  dimmer.getChildren().add(dimmerMessage);  dimmer.setStyle("-fx-background-color: rgba(0, 0, 0, 0.6);");  getChildren().add(dimmer);  layoutBoundsProperty().addListener(null);}  }
class C{  public Process runCommand(String command) throws Exception {  return runCommand(command,new HashMap<String,String>());}  }
class C{  private PathAndLeafHolder makeDeepHierarchy(int depth,Group<CnATreeElement> parent,PathAndLeafHolder pathAndLeafHolder) throws CommandException {  if (depth <= 0) {    CnATreeElement c=createNewElement(parent,depth);    parent.addChild(c);    pathAndLeafHolder.appendElementToPath(c.getTitle());    pathAndLeafHolder.leaf=c;    return pathAndLeafHolder;  }  @SuppressWarnings("unchecked") Group<CnATreeElement> child=(Group<CnATreeElement>)createNewNamedGroup(parent,parent.getTitle().split("-")[0] + "-" + depth);  parent.addChild(child);  pathAndLeafHolder.appendElementToPath(child.getTitle());  return makeDeepHierarchy(depth - 1,child,pathAndLeafHolder);}  }
class C{  protected char checkZone(char zone){  zone=Character.toUpperCase(zone);  if (zone != 'N' && zone != 'S') {    throw new NumberFormatException("Invalid UTMPoint zone letter: " + zone);  }  return zone;}  }
class C{  public static <T>void assertThrows(final Consumer<Void> consumer,final Class<T> exceptionClass,final Consumer<T> assertExceptionProperties){  assertThrows(consumer,exceptionClass,assertExceptionProperties,null);}  }
class C{  public long numCqsOnRegion(String regionName){  DefaultQueryService queryService=(DefaultQueryService)((GemFireCacheImpl)CacheFactory.getAnyInstance()).getLocalQueryService();  try {    CqQuery[] cqs=queryService.getCqs(regionName);    if (cqs != null) {      return cqs.length;    }  } catch (  Exception ex) {  }  return 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.404 -0400",hash_original_method="C1DAA8A1CE7EAD292D96D0E0AC7B4475",hash_generated_method="8DBEEEA0DE0417A5E8CF3806B098982C") void parseDirectives() throws SaslException {  char prevChar;  char currChar;  int rc=0;  boolean haveQuotedPair=false;  String currentName="<no name>";  if (m_state == STATE_NO_UTF8_SUPPORT)   throw new SaslException("No UTF-8 support on platform");  prevChar=0;  while (m_curPos < m_directives.length()) {    currChar=m_directives.charAt(m_curPos);switch (m_state) {case STATE_LOOKING_FOR_FIRST_DIRECTIVE:case STATE_LOOKING_FOR_DIRECTIVE:      if (isWhiteSpace(currChar)) {        break;      } else       if (isValidTokenChar(currChar)) {        m_scanStart=m_curPos;        m_state=STATE_SCANNING_NAME;      } else {        m_errorPos=m_curPos;        throw new SaslException("Parse error: Invalid name character");      }    break;case STATE_SCANNING_NAME:  if (isValidTokenChar(currChar)) {    break;  } else   if (isWhiteSpace(currChar)) {    currentName=m_directives.substring(m_scanStart,m_curPos);    m_state=STATE_LOOKING_FOR_EQUALS;  } else   if ('=' == currChar) {    currentName=m_directives.substring(m_scanStart,m_curPos);    m_state=STATE_LOOKING_FOR_VALUE;  } else {    m_errorPos=m_curPos;    throw new SaslException("Parse error: Invalid name character");  }break;case STATE_LOOKING_FOR_EQUALS:if (isWhiteSpace(currChar)) {break;} else if ('=' == currChar) {m_state=STATE_LOOKING_FOR_VALUE;} else {m_errorPos=m_curPos;throw new SaslException("Parse error: Expected equals sign '='.");}break;case STATE_LOOKING_FOR_VALUE:if (isWhiteSpace(currChar)) {break;} else if ('"' == currChar) {m_scanStart=m_curPos + 1;m_state=STATE_SCANNING_QUOTED_STRING_VALUE;} else if (isValidTokenChar(currChar)) {m_scanStart=m_curPos;m_state=STATE_SCANNING_TOKEN_VALUE;} else {m_errorPos=m_curPos;throw new SaslException("Parse error: Unexpected character");}break;case STATE_SCANNING_TOKEN_VALUE:if (isValidTokenChar(currChar)) {break;} else if (isWhiteSpace(currChar)) {addDirective(currentName,false);m_state=STATE_LOOKING_FOR_COMMA;} else if (',' == currChar) {addDirective(currentName,false);m_state=STATE_LOOKING_FOR_DIRECTIVE;} else {m_errorPos=m_curPos;throw new SaslException("Parse error: Invalid value character");}break;case STATE_SCANNING_QUOTED_STRING_VALUE:if ('\\' == currChar) haveQuotedPair=true;if (('"' == currChar) && ('\\' != prevChar)) {addDirective(currentName,haveQuotedPair);haveQuotedPair=false;m_state=STATE_LOOKING_FOR_COMMA;}break;case STATE_LOOKING_FOR_COMMA:if (isWhiteSpace(currChar)) break; else if (currChar == ',') m_state=STATE_LOOKING_FOR_DIRECTIVE; else {m_errorPos=m_curPos;throw new SaslException("Parse error: Expected a comma.");}break;}if (0 != rc) break;prevChar=currChar;m_curPos++;}if (rc == 0) {switch (m_state) {case STATE_SCANNING_TOKEN_VALUE:addDirective(currentName,false);break;case STATE_LOOKING_FOR_FIRST_DIRECTIVE:case STATE_LOOKING_FOR_COMMA:break;case STATE_LOOKING_FOR_DIRECTIVE:throw new SaslException("Parse error: Trailing comma.");case STATE_SCANNING_NAME:case STATE_LOOKING_FOR_EQUALS:case STATE_LOOKING_FOR_VALUE:throw new SaslException("Parse error: Missing value.");case STATE_SCANNING_QUOTED_STRING_VALUE:throw new SaslException("Parse error: Missing closing quote.");}}}  }
class C{  @Override public boolean isRunning(){  return !paused;}  }
class C{  public SQLiteDatabaseConfiguration(String path,int openFlags){  if (path == null) {    throw new IllegalArgumentException("path must not be null.");  }  this.path=path;  label=stripPathForLogs(path);  this.openFlags=openFlags;  maxSqlCacheSize=25;  locale=Locale.getDefault();}  }
class C{  private void addColumn(T value,boolean fireEvent){  for (  List<T> row : rowData) {    row.add(value);  }  if (fireEvent) {    this.fireTableStructureChanged();  }}  }
class C{  public static Size scale(Size from,Size to){  Size current=from;  if (!to.fitsIn(current)) {    while (true) {      Size scaled150=current.scale(3,2);      Size scaled200=current.scale(2,1);      if (to.fitsIn(scaled150)) {        return scaled150;      } else       if (to.fitsIn(scaled200)) {        return scaled200;      } else {        current=scaled200;      }    }  } else {    while (true) {      Size scaled66=current.scale(2,3);      Size scaled50=current.scale(1,2);      if (!to.fitsIn(scaled50)) {        if (to.fitsIn(scaled66)) {          return scaled66;        } else {          return current;        }      } else {        current=scaled50;      }    }  }}  }
class C{  public boolean hasYomi(){  return super.hasAttribute(YOMI);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SKILL_REF__REF:    setRef((SkillFakeDefinition)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isNegated(){  return negated;}  }
class C{  public boolean doesClassMatch(int profile){  if (profile == PROFILE_A2DP) {    if (hasService(Service.RENDER)) {      return true;    }switch (getDeviceClass()) {case Device.AUDIO_VIDEO_HIFI_AUDIO:case Device.AUDIO_VIDEO_HEADPHONES:case Device.AUDIO_VIDEO_LOUDSPEAKER:case Device.AUDIO_VIDEO_CAR_AUDIO:      return true;default :    return false;}} else if (profile == PROFILE_HEADSET) {if (hasService(Service.RENDER)) {  return true;}switch (getDeviceClass()) {case Device.AUDIO_VIDEO_HANDSFREE:case Device.AUDIO_VIDEO_WEARABLE_HEADSET:case Device.AUDIO_VIDEO_CAR_AUDIO:  return true;default :return false;}} else if (profile == PROFILE_OPP) {if (hasService(Service.OBJECT_TRANSFER)) {return true;}switch (getDeviceClass()) {case Device.COMPUTER_UNCATEGORIZED:case Device.COMPUTER_DESKTOP:case Device.COMPUTER_SERVER:case Device.COMPUTER_LAPTOP:case Device.COMPUTER_HANDHELD_PC_PDA:case Device.COMPUTER_PALM_SIZE_PC_PDA:case Device.COMPUTER_WEARABLE:case Device.PHONE_UNCATEGORIZED:case Device.PHONE_CELLULAR:case Device.PHONE_CORDLESS:case Device.PHONE_SMART:case Device.PHONE_MODEM_OR_GATEWAY:case Device.PHONE_ISDN:return true;default :return false;}} else if (profile == PROFILE_HID) {return (getDeviceClass() & Device.Major.PERIPHERAL) == Device.Major.PERIPHERAL;} else if (profile == PROFILE_PANU || profile == PROFILE_NAP) {if (hasService(Service.NETWORKING)) {return true;}return (getDeviceClass() & Device.Major.NETWORKING) == Device.Major.NETWORKING;} else {return false;}}  }
class C{  private void organizeComment(final JSONObject comment) throws RepositoryException {  comment.put(Common.TIME_AGO,Times.getTimeAgo(comment.optLong(Comment.COMMENT_CREATE_TIME)));  comment.put(Comment.COMMENT_CREATE_TIME,new Date(comment.optLong(Comment.COMMENT_CREATE_TIME)));  final String authorId=comment.optString(Comment.COMMENT_AUTHOR_ID);  JSONObject author=userCache.getUser(authorId);  if (null == author) {    author=userRepository.get(authorId);  }  final String userEmail=author.optString(User.USER_EMAIL);  final String thumbnailURL=avatarQueryService.getAvatarURL(userEmail);  comment.put(Comment.COMMENT_T_AUTHOR_THUMBNAIL_URL,thumbnailURL);  comment.put(Comment.COMMENT_T_COMMENTER,author);  comment.put(Comment.COMMENT_T_AUTHOR_NAME,author.optString(User.USER_NAME));  comment.put(Comment.COMMENT_T_AUTHOR_REAL_NAME,author.optString(UserExt.USER_REAL_NAME));  comment.put(Comment.COMMENT_T_AUTHOR_URL,author.optString(User.USER_URL));  processCommentContent(comment);}  }
class C{  @SuppressWarnings("unchecked") public static List<Double> toList(double[] array){  return DefaultTypeTransformation.primitiveArrayToList(array);}  }
class C{  public static String formatElapsedTime(Context context,double millis){  StringBuilder sb=new StringBuilder();  int seconds=(int)Math.floor(millis / 1000);  int days=0, hours=0, minutes=0;  if (seconds > SECONDS_PER_DAY) {    days=seconds / SECONDS_PER_DAY;    seconds-=days * SECONDS_PER_DAY;  }  if (seconds > SECONDS_PER_HOUR) {    hours=seconds / SECONDS_PER_HOUR;    seconds-=hours * SECONDS_PER_HOUR;  }  if (seconds > SECONDS_PER_MINUTE) {    minutes=seconds / SECONDS_PER_MINUTE;    seconds-=minutes * SECONDS_PER_MINUTE;  }  if (days > 0) {    sb.append(context.getString(R.string.battery_history_days,days,hours,minutes,seconds));  } else   if (hours > 0) {    sb.append(context.getString(R.string.battery_history_hours,hours,minutes,seconds));  } else   if (minutes > 0) {    sb.append(context.getString(R.string.battery_history_minutes,minutes,seconds));  } else {    sb.append(context.getString(R.string.battery_history_seconds,seconds));  }  return sb.toString();}  }
class C{  private void removeSeparator(){  if (buffer.charAt(buffer.length() - 1) == ',') {    buffer.deleteCharAt(buffer.length() - 1);  }}  }
class C{  public static long handleKeyUp(long state,int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {    return release(state,META_SHIFT_ON,META_SHIFT_MASK,META_CAP_PRESSED,META_CAP_RELEASED,META_CAP_USED,event);  }  if (keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT || keyCode == KeyEvent.KEYCODE_NUM) {    return release(state,META_ALT_ON,META_ALT_MASK,META_ALT_PRESSED,META_ALT_RELEASED,META_ALT_USED,event);  }  if (keyCode == KeyEvent.KEYCODE_SYM) {    return release(state,META_SYM_ON,META_SYM_MASK,META_SYM_PRESSED,META_SYM_RELEASED,META_SYM_USED,event);  }  return state;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.252 -0500",hash_original_method="8C3214A0C48FDFFD8AB05D4DDD8B0479",hash_generated_method="776C289EE7AF764259C1C6D8553F0C8A") public static AndroidHttpClient newInstance(String userAgent,Context context){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setConnectionTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSoTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSocketBufferSize(params,8192);  HttpClientParams.setRedirecting(params,false);  SSLSessionCache sessionCache=context == null ? null : new SSLSessionCache(context);  HttpProtocolParams.setUserAgent(params,userAgent);  SchemeRegistry schemeRegistry=new SchemeRegistry();  schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));  schemeRegistry.register(new Scheme("https",SSLCertificateSocketFactory.getHttpSocketFactory(SOCKET_OPERATION_TIMEOUT,sessionCache),443));  ClientConnectionManager manager=new ThreadSafeClientConnManager(params,schemeRegistry);  return new AndroidHttpClient(manager,params);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private CGraphExporter(){}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  return this.arrangement.arrange(this,g2,constraint);}  }
class C{  public void addPath(String pathItem){  pathItems.add(pathItem);}  }
class C{  @MediumTest public void testStabilityInTime(){  long t=System.currentTimeMillis();  VelocityTracker vt=VelocityTracker.obtain();  drag(vt,100,200,100,200,10,t,400);  vt.computeCurrentVelocity(1);  float firstX=vt.getXVelocity();  float firstY=vt.getYVelocity();  vt.clear();  drag(vt,100,200,100,200,10,t + 3600 * 1000,400);  vt.computeCurrentVelocity(1);  float secondX=vt.getXVelocity();  float secondY=vt.getYVelocity();  assertEqualFuzzy(firstX,secondX,0.1f);  assertEqualFuzzy(firstY,secondY,0.1f);  vt.recycle();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  String returnHeaderFile="";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  String outDir=(new File(imageFiles[0])).getParentFile().toString();  if (args.length > 1) {    outDir=args[1];  }  if (!outDir.endsWith(File.separator)) {    outDir=outDir + File.separator;  }  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      File file=new File(fileName);      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String shortFileName=file.getName().replace("." + fileExtension,"");      long fileLength=file.length();      file=null;      String srtmFormat="SRTM1";      if (fileLength == 3601 * 3601 * 2) {        rows=3601;        cols=3601;      } else       if (fileLength == 1201 * 1201 * 2) {        rows=1201;        cols=1201;        srtmFormat="SRTM3";      } else {        showFeedback("The input SRTM file does not appear to be supported by the import tool.");        return;      }      double cellSize=1.0 / cols;      char[] charArray=shortFileName.toCharArray();      char[] tmp=new char[2];      tmp[0]=charArray[1];      tmp[1]=charArray[2];      double south=Double.parseDouble(new String(tmp));      if (charArray[0] == 'S' || charArray[0] == 's') {        south=-south;      }      south=south - (0.5 * cellSize);      tmp=new char[3];      tmp[0]=charArray[4];      tmp[1]=charArray[5];      tmp[2]=charArray[6];      double west=Double.parseDouble(new String(tmp));      if (charArray[3] == 'W' || charArray[3] == 'w') {        west=-west;      }      west=west - (0.5 * cellSize);      double north=south + 1.0 + cellSize;      double east=west + 1.0 + cellSize;      String whiteboxHeaderFile=outDir + shortFileName + ".dep";      if (i == 0) {        returnHeaderFile=whiteboxHeaderFile;      }      WhiteboxRaster output=new WhiteboxRaster(whiteboxHeaderFile,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.INTEGER,noData,noData);      RandomAccessFile rIn=null;      FileChannel inChannel=null;      ByteBuffer buf=ByteBuffer.allocate((int)fileLength);      rIn=new RandomAccessFile(fileName,"r");      inChannel=rIn.getChannel();      inChannel.position(0);      inChannel.read(buf);      java.nio.ByteOrder byteorder=java.nio.ByteOrder.BIG_ENDIAN;      buf.order(byteorder);      buf.rewind();      byte[] ba=new byte[(int)fileLength];      buf.get(ba);      double z;      row=0;      col=0;      int pos=0;      int oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=(double)buf.getShort(pos);          output.setValue(row,col,z);          pos+=2;        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Importing SRTM file...",progress);          oldProgress=progress;        }      }      inChannel.close();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.setXYUnits("degrees");      output.setProjection("geographic coordinates");      output.setZUnits("metres");      output.writeHeaderFile();      output.close();    }    returnData(returnHeaderFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DataModelPipeline(Classifier baseClassifier,DataTransform... transforms){  this(baseClassifier,new DataTransformProcess(transforms));}  }
class C{  public boolean hasIPv4Address(){  for (  LinkAddress address : mLinkAddresses) {    if (address.getAddress() instanceof Inet4Address) {      return true;    }  }  return false;}  }
class C{  public void updateCapabilitiesTimeLastRequest(ContactId contact){  String contactNumber=contact.toString();  if (sLogger.isActivated()) {    sLogger.debug("Update time of last capabilities request for ".concat(contactNumber));  }synchronized (mContactInfoCache) {    ContactInfo contactInfo=getContactInfoInternal(contact);    Capabilities capabilities=contactInfo.getCapabilities();    long now=System.currentTimeMillis();    CapabilitiesBuilder capaBuilder=new CapabilitiesBuilder(capabilities);    capaBuilder.setTimestampOfLastRequest(now);    contactInfo.setCapabilities(capaBuilder.build());    ContentValues values=new ContentValues();    values.put(KEY_CAPABILITY_TIMESTAMP_LAST_REQUEST,now);    Uri uri=Uri.withAppendedPath(CONTENT_URI,contactNumber);    mLocalContentResolver.update(uri,values,null,null);  }}  }
class C{  private void handleHtmlChangeAccount(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleChangeAccount();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("account");  pageWrapper.addHeader();  if (isUserALocalAdminOrNotClosed(requestAndResponse)) {    try {      final String userId=getURIParameterOrUserId(requestAndResponse);      final User currentUser=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));      final User editedUser=dbLogic.getUserById(userId);      if (editedUser == null) {        requestAndResponse.print(servletText.errorNoAccountFound());      } else {        final boolean currentIsEditedUser=isCurrentUserTheEditedUser(currentUser,editedUser);        final boolean isUserAdmin=isUserAnAdmin(requestAndResponse);        if (!isUserAdmin && !currentIsEditedUser) {          requestAndResponse.print(servletText.errorPageNotAllowed());        } else {          final boolean canChangeIsAdmin=isUserAdmin;          final String submitted=requestAndResponse.request.getParameter("save");          boolean needsForm=true;          if (submitted != null) {            boolean needsChange=false;            boolean hasErrors=false;            if (isTheCsrftWrong(requestAndResponse,requestAndResponse.request.getParameter("csrft"))) {              requestAndResponse.print(servletText.errorRequiresSignIn(false));              needsForm=false;            }            String changedPassword=null;            if (doesUserNotHavePasswordAndNeedsIt(editedUser)) {              final String newPassword=requestAndResponse.request.getParameter("newpassword");              final String newPassword2=requestAndResponse.request.getParameter("newpassword2");              hasErrors=validateNewPassword(requestAndResponse,editedUser,currentIsEditedUser,newPassword,newPassword2);              if (!hasErrors) {                changedPassword=newPassword;                needsChange=true;              }            }            String changedUserName=null;            String newUserName=requestAndResponse.request.getParameter("username");            if (newUserName != null) {              newUserName=newUserName.toLowerCase();            }            final String oldUserName=editedUser.getUserName();            if (newUserName != null && !newUserName.isEmpty() && !newUserName.equals(oldUserName)) {              if (!editedUser.getIsAnon()) {                addErrorMessage(requestAndResponse,servletText.errorUsernameMayNotBeChanged());                hasErrors=true;              } else               if (!AccountAttributeValidator.isUserNameValid(newUserName)) {                addErrorMessage(requestAndResponse,servletText.errorUserNameIsNotValid());                hasErrors=true;              } else               if (dbLogic.getUserByUserName(newUserName) != null) {                addErrorMessage(requestAndResponse,servletText.errorUserNameIsAlreadyTaken());                hasErrors=true;              } else {                changedUserName=newUserName;                needsChange=true;              }            }            String changedEmail=null;            String email=requestAndResponse.request.getParameter("email");            if (email != null && email.isEmpty()) {              email=null;            }            boolean emailIsChanged=false;            if (email == null && editedUser.getEmail() != null) {              changedEmail=email;              needsChange=true;              emailIsChanged=true;            } else             if (email != null && !AccountAttributeValidator.isEmailValid(email)) {              addErrorMessage(requestAndResponse,servletText.errorEmailIsNotValid());              hasErrors=true;            } else             if (email != null) {              changedEmail=email;              needsChange=true;              emailIsChanged=true;            }            final boolean mayContact=getCheckBoxValue(requestAndResponse,"mayContact");            if (mayContact != editedUser.getMayContact()) {              needsChange=true;            }            final boolean isAccountClosed=getCheckBoxValue(requestAndResponse,"isAccountClosed");            if (isAccountClosed != editedUser.getIsAccountClosed()) {              needsChange=true;            }            final boolean isAdmin=getCheckBoxValue(requestAndResponse,"isAdmin");            if (isAdmin != editedUser.getIsAdmin()) {              if (!isAdmin && editedUser.getIsSingleUser()) {                hasErrors=true;                addErrorMessage(requestAndResponse,servletText.errorSingleUserMustStayAnAdmin());              }              if (!canChangeIsAdmin) {                hasErrors=true;                addErrorMessage(requestAndResponse,servletText.errorOnlyAnAdminCanChangeIsAdmin());              }              needsChange=true;            }            if (needsChange && !hasErrors) {              final Long time=new Long(System.currentTimeMillis());              editedUser.setModTime(time);              if (changedPassword != null) {                editedUser.setPassword(DigestUtils.sha1Hex(changedPassword));              }              if (changedUserName != null) {                editedUser.setUserName(changedUserName);                editedUser.setIsAnon(false);              }              if (emailIsChanged) {                editedUser.setEmail(changedEmail);              }              editedUser.setMayContact(mayContact);              if (canChangeIsAdmin) {                editedUser.setIsAdmin(isAdmin);                editedUser.setIsAccountClosed(isAccountClosed);              }              addSuccessMessage(requestAndResponse,servletText.sentenceChangesWereSaved());              needsForm=false;            } else             if (hasErrors) {              addErrorMessage(requestAndResponse,servletText.errorChangesWereNotSaved());            } else {              addErrorMessage(requestAndResponse,servletText.errorNoChangesToSave());            }          }          if (needsForm) {            requestAndResponse.print("<div class=\"infoheader\">" + servletText.sentenceEnterNewAccountDetailsHere(currentIsEditedUser,editedUser.getUserName()) + "</div>");            requestAndResponse.print("<form action=\"/changeAccount/" + (currentIsEditedUser ? "" : userId) + "\" method=\"POST\"><div class=\"account\">"+ "<input type=\"hidden\" name=\"csrft\" value=\""+ getCsrft(requestAndResponse)+ "\">");            if (editedUser.getIsAnon()) {              requestAndResponse.print("<div class=\"infoheader\">" + servletText.sentencePleaseChangeNameFromGenerated(currentIsEditedUser,editedUser.getUserName()) + "</div>");              requestAndResponse.print("<input autocorrect=\"off\" type=\"text\" id=\"username\" name=\"username\" placeholder=\"" + servletText.sentenceChooseAUserName() + "\" maxlength=\"20\"><br>");            }            if (doesUserNotHavePasswordAndNeedsIt(editedUser)) {              addNewPasswordFormFields(requestAndResponse,editedUser,currentIsEditedUser);            }            requestAndResponse.print("<input type=\"email\" id=\"email\" name=\"email\" placeholder=\"" + servletText.sentenceEmailOptional() + "\" maxlength=\"100\" value=\""+ StringEscapeUtils.escapeHtml4(editedUser.getEmailOrBlank())+ "\"><br>");            requestAndResponse.print("<input type=\"checkbox\" name=\"mayContact\" id=\"mayContact\"" + (editedUser.getMayContact() ? " checked" : "") + "><label for=\"mayContact\">"+ (currentIsEditedUser ? servletText.sentenceIMayBeContacted() : servletText.sentenceUserMayBeContacted())+ "</label><br>");            if (canChangeIsAdmin) {              requestAndResponse.print("<input type=\"checkbox\" name=\"isAccountClosed\" id=\"isAccountClosed\"" + (editedUser.getIsAccountClosed() ? " checked" : "") + "><label for=\"isAccountClosed\">"+ servletText.sentenceIsAccountClosed()+ "</label><br>");              requestAndResponse.print("<input type=\"checkbox\" name=\"isAdmin\" id=\"isAdmin\"" + (editedUser.getIsAdmin() ? " checked" : "") + "><label for=\"isAdmin\">"+ servletText.sentenceUserIsAnAdmin()+ "</label><br>");            }            requestAndResponse.print("<table class=\"responseAndSave\"><tr>" + "<td><div id=\"response\"></div></td>" + "<td><button onclick=\"replacePaneForForm(event, '" + servletText.buttonChangeAccountDetails() + "'); return false;\" id=\"save\" name=\"save\" class=\"specialbutton\" style=\"float:right; margin-top:10px;\">"+ servletText.buttonChangeAccountDetails()+ "</button></td>"+ "</tr></table></div>"+ "</form>");          }        }      }      dbLogic.commit();    } catch (    final PersistenceException e) {      requestAndResponse.print(servletText.errorInternalDatabase());    }  }  pageWrapper.addFooter();}  }
class C{  public boolean alwaysLookConnected(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  public final GVector scaleSelf(double s){  for (int i=0; i < length; i++) {    values[i]=values[i] * s;  }  return this;}  }
class C{  public boolean contains(final Set<Holiday> holidays,final LocalDate date){  return contains(holidays,date,null);}  }
class C{  public StrBuilder insert(final int index,final double value){  return insert(index,String.valueOf(value));}  }
class C{  public TreeElement<?,?> findTreeElementForModelObject(IModelChangeSupport modelObject){  return ((SecuritySpecTreeElementContentProvider)fContentProvider).findTreeElementForModelObject(modelObject);}  }
class C{  public static List<AspectInformation> filterIds(final List<AspectInformation> list,final Predicate<String> predicate){  if (list == null) {    return null;  }  return list.stream().filter(null).collect(Collectors.toList());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.STATE_CASE__STATE:    setState((ExecutionState)null);  return;case SexecPackage.STATE_CASE__STEP:setStep((Step)null);return;}super.eUnset(featureID);}  }
class C{  public MemberDefinition findAnyMethod(Environment env,Identifier nm) throws ClassNotFound {  MemberDefinition f;  for (f=getFirstMatch(nm); f != null; f=f.getNextMatch()) {    if (f.isMethod()) {      return f;    }  }  ClassDeclaration sup=getSuperClass();  if (sup == null)   return null;  return sup.getClassDefinition(env).findAnyMethod(env,nm);}  }
class C{  protected String processParam(String param) throws SQLException {  return escapedParser.parse(param);}  }
class C{  public List<Class<?>> findAvailableClasses(String uri) throws IOException {  _resourcesNotLoaded.clear();  List<Class<?>> classes=new ArrayList<>();  List<String> strings=findAvailableStrings(uri);  for (  String className : strings) {    try {      Class<?> clazz=_classLoader.loadClass(className);      classes.add(clazz);    } catch (    Exception notAvailable) {      _resourcesNotLoaded.add(className);    }  }  return classes;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Literal.class) {switch (baseOperationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:      return N4JSPackage.TEMPLATE_SEGMENT___GET_VALUE_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public TypeBinding convertToRawType(TypeBinding type,boolean forceRawEnclosingType){  int dimension;  TypeBinding originalType;switch (type.kind()) {case Binding.BASE_TYPE:case Binding.TYPE_PARAMETER:case Binding.WILDCARD_TYPE:case Binding.INTERSECTION_TYPE:case Binding.RAW_TYPE:    return type;case Binding.ARRAY_TYPE:  dimension=type.dimensions();originalType=type.leafComponentType();break;default :if (type.id == TypeIds.T_JavaLangObject) return type;dimension=0;originalType=type;}boolean needToConvert;switch (originalType.kind()) {case Binding.BASE_TYPE:return type;case Binding.GENERIC_TYPE:needToConvert=true;break;case Binding.PARAMETERIZED_TYPE:ParameterizedTypeBinding paramType=(ParameterizedTypeBinding)originalType;needToConvert=paramType.genericType().isGenericType();break;default :needToConvert=false;break;}ReferenceBinding originalEnclosing=originalType.enclosingType();TypeBinding convertedType;if (originalEnclosing == null) {convertedType=needToConvert ? createRawType((ReferenceBinding)originalType.erasure(),null) : originalType;} else {ReferenceBinding convertedEnclosing;if (originalEnclosing.kind() == Binding.RAW_TYPE) {needToConvert|=!((ReferenceBinding)originalType).isStatic();convertedEnclosing=originalEnclosing;} else if (forceRawEnclosingType && !needToConvert) {convertedEnclosing=(ReferenceBinding)convertToRawType(originalEnclosing,forceRawEnclosingType);needToConvert=originalEnclosing != convertedEnclosing;} else if (needToConvert || ((ReferenceBinding)originalType).isStatic()) {convertedEnclosing=(ReferenceBinding)convertToRawType(originalEnclosing,false);} else {convertedEnclosing=convertToParameterizedType(originalEnclosing);}if (needToConvert) {convertedType=createRawType((ReferenceBinding)originalType.erasure(),convertedEnclosing);} else if (originalEnclosing != convertedEnclosing) {convertedType=createParameterizedType((ReferenceBinding)originalType.erasure(),null,convertedEnclosing);} else {convertedType=originalType;}}if (originalType != convertedType) {return dimension > 0 ? (TypeBinding)createArrayType(convertedType,dimension) : convertedType;}return type;}  }
class C{  void select(final int index){  for (  final Control c : this.container.getChildren()) {    c.dispose();  }  this.tabs.get(index).build(this.container);  this.container.layout();  for (int i=0; i < this.buttons.size(); i++) {    this.buttons.get(i).setSelection(i == index);  }}  }
class C{  private boolean needsScrollBars(){  return tileEntity.filters.size() > 4;}  }
class C{  public boolean equals(Object o){  if (this == o)   return true;  if (o == null)   return false;  if (o instanceof QName) {    final QName qName=(QName)o;    if (!namespaceURI.equals(qName.namespaceURI))     return false;    return localPart.equals(qName.localPart);  } else   if (o instanceof String) {    final String string=(String)o;    if (string.length() == 0)     return false;    int lastColonIndex=string.lastIndexOf(":");    if (lastColonIndex < 0 || lastColonIndex == string.length() - 1)     return false;    final String stringPrefix=string.substring(0,lastColonIndex);    final String stringLocalPart=string.substring(lastColonIndex + 1);    if (stringPrefix.equals(prefix) || stringPrefix.equals(namespaceURI)) {      return localPart.equals(stringLocalPart);    }    return false;  }  return false;}  }
class C{  @Override public void flushBuffer() throws IOException {  if (this.printWriter != null) {    this.printWriter.flush();  }  if (this.gzipOutputStream != null) {    this.gzipOutputStream.flush();  }  if (!disableFlushBuffer) {    super.flushBuffer();  }}  }
class C{  @RequestMapping(value="/stub/admin/evictions/products",method=RequestMethod.GET) public ResponseEntity<?> evictionProducts(){  fr.gael.dhus.service.EvictionService evictionService=ApplicationContextProvider.getBean(fr.gael.dhus.service.EvictionService.class);  fr.gael.dhus.service.ProductService productService=ApplicationContextProvider.getBean(fr.gael.dhus.service.ProductService.class);  try {    List<Product> products=evictionService.getEvictableProducts();    ArrayList<ProductData> productDatas=new ArrayList<ProductData>();    for (    Product product : products) {      ProductData productData=new ProductData(product.getId(),product.getUuid(),product.getIdentifier());      ArrayList<String> summary=new ArrayList<String>();      for (      MetadataIndex index : productService.getIndexes(product.getId())) {        if ("summary".equals(index.getCategory())) {          summary.add(index.getName() + " : " + index.getValue());          Collections.sort(summary,null);        }      }      productData.setSummary(summary);      productData.setHasQuicklook(product.getQuicklookFlag());      productData.setHasThumbnail(product.getThumbnailFlag());      productDatas.add(productData);    }    return new ResponseEntity<>(productDatas,HttpStatus.OK);  } catch (  org.springframework.security.access.AccessDeniedException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);  }}  }
class C{  public static final boolean isValid(EClass astNodeType,N4Modifier modifier){switch (modifier) {case PUBLIC:case PROJECT:    return isN4TypeDeclaration(astNodeType) || isN4MemberDeclaration(astNodeType) || isFunctionDeclaration(astNodeType)|| isExportedVariableStatement(astNodeType);case PROTECTED:case PRIVATE:  return isN4MemberDeclaration(astNodeType);case EXTERNAL:return isN4TypeDeclaration(astNodeType) || isFunctionDeclaration(astNodeType) || isExportedVariableStatement(astNodeType);case ABSTRACT:return isN4ClassDeclaration(astNodeType) || isN4MethodDeclaration(astNodeType) || isN4FieldAccessor(astNodeType);case STATIC:return isN4MemberDeclaration(astNodeType);case CONST:return isN4FieldDeclaration(astNodeType);default :return false;}}  }
class C{  public T toArray(){  return getBaseArray().toRealArray();}  }
class C{  private void checkPhrase(){  JOptionPane.showOptionDialog(null,"Speech utterance is greater than" + MAX_PHRASE_LENGTH + "chars! Not guaranteed to render correctly.","Warning",JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,null,null);}  }
class C{  public void deleteNodes(String[] ids){  Object[] cells=new Object[ids.length];  for (int x=0; x < ids.length; x++) {    cells[x]=nodes.remove(ids[x]);  }  graph.removeCells(cells,true);}  }
class C{  private void purchaseStateChanged(Context context,String signedData,String signature){  Intent intent=new Intent(Consts.ACTION_PURCHASE_STATE_CHANGED);  intent.setClass(context,BillingService.class);  intent.putExtra(Consts.INAPP_SIGNED_DATA,signedData);  intent.putExtra(Consts.INAPP_SIGNATURE,signature);  context.startService(intent);}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public VerifierInfo(String packageName,PublicKey publicKey){  if (packageName == null || packageName.length() == 0) {    throw new IllegalArgumentException("packageName must not be null or empty");  } else   if (publicKey == null) {    throw new IllegalArgumentException("publicKey must not be null");  }  this.packageName=packageName;  this.publicKey=publicKey;}  }
class C{  public static String readFileContents(File file){  StringBuilder scriptText=new StringBuilder();  String newLine=System.getProperty("line.separator");  Scanner scanner=null;  try {    scanner=new Scanner(new FileInputStream(file));    while (scanner.hasNextLine()) {      scriptText.append(scanner.nextLine() + newLine);    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  } finally {    scanner.close();  }  return scriptText.toString();}  }
class C{  public void drop(Component dragged,int x,int y){}  }
class C{  @Override public void backtrack(int count){  cursor-=count;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument07.class,args);}  }
class C{  private void readResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  Header header=response.getFirstHeader("Content-Disposition");  if (header != null) {    innerState.mHeaderContentDisposition=header.getValue();  }  header=response.getFirstHeader("Content-Location");  if (header != null) {    innerState.mHeaderContentLocation=header.getValue();  }  header=response.getFirstHeader("ETag");  if (header != null) {    innerState.mHeaderETag=header.getValue();  }  String headerTransferEncoding=null;  header=response.getFirstHeader("Transfer-Encoding");  if (header != null) {    headerTransferEncoding=header.getValue();  }  String headerContentType=null;  header=response.getFirstHeader("Content-Type");  if (header != null) {    headerContentType=header.getValue();    if (!headerContentType.equals("application/vnd.android.obb")) {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect Mime type");    }  }  if (headerTransferEncoding == null) {    header=response.getFirstHeader("Content-Length");    if (header != null) {      innerState.mHeaderContentLength=header.getValue();      long contentLength=Long.parseLong(innerState.mHeaderContentLength);      if (contentLength != -1 && contentLength != mInfo.mTotalBytes) {        Log.e(Constants.TAG,"Incorrect file size delivered.");      }    }  } else {    if (Constants.LOGVV) {      Log.v(Constants.TAG,"ignoring content-length because of xfer-encoding");    }  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Content-Disposition: " + innerState.mHeaderContentDisposition);    Log.v(Constants.TAG,"Content-Length: " + innerState.mHeaderContentLength);    Log.v(Constants.TAG,"Content-Location: " + innerState.mHeaderContentLocation);    Log.v(Constants.TAG,"ETag: " + innerState.mHeaderETag);    Log.v(Constants.TAG,"Transfer-Encoding: " + headerTransferEncoding);  }  boolean noSizeInfo=innerState.mHeaderContentLength == null && (headerTransferEncoding == null || !headerTransferEncoding.equalsIgnoreCase("chunked"));  if (noSizeInfo) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"can't know size of download, giving up");  }}  }
class C{  public VisorCacheConfigurationCollectorJob(Collection<IgniteUuid> arg,boolean debug){  super(arg,debug);}  }
class C{  public static boolean isFunction(final LuaValue target){  return target != null && target.type() == LuaValue.TFUNCTION;}  }
class C{  public String repositoriesUrl(String account,String collection,String project){  Objects.requireNonNull(project,"Project required");  return getTeamBaseUrl(account,collection) + format(REPOSITORIES,project) + getApiVersion();}  }
class C{  @Override synchronized protected void sendMessage(AbstractMRMessage m,AbstractMRListener reply){  msgQueue.addLast(m);  listenerQueue.addLast(reply);  if (m != null) {    log.debug("just notified transmit thread with message " + m.toString());  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  if ((attributes != null) && attributes.containsKey("x")) {    int x=Integer.parseInt(attributes.get("x"));    int y=Integer.parseInt(attributes.get("y"));    int width=Integer.parseInt(attributes.get("width"));    int height=Integer.parseInt(attributes.get("height"));    zone.disAllowTeleport(x,y,width,height);  } else {    zone.disAllowTeleport();  }}  }
class C{  public Dimension preferredLayoutSize(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Insets insets=parent.getInsets();  int prefWidth=insets.left + insets.right;  int prefHeight=insets.top + insets.bottom;  Dimension extentSize=null;  Dimension viewSize=null;  Component view=null;  if (viewport != null) {    extentSize=viewport.getPreferredSize();    view=viewport.getView();    if (view != null) {      viewSize=view.getPreferredSize();    } else {      viewSize=new Dimension(0,0);    }  }  if (extentSize != null) {    prefWidth+=extentSize.width;    prefHeight+=extentSize.height;  }  Border viewportBorder=scrollPane.getViewportBorder();  if (viewportBorder != null) {    Insets vpbInsets=viewportBorder.getBorderInsets(parent);    prefWidth+=vpbInsets.left + vpbInsets.right;    prefHeight+=vpbInsets.top + vpbInsets.bottom;  }  if ((rowHead != null) && rowHead.isVisible()) {    prefWidth+=rowHead.getPreferredSize().width;  }  if ((colHead != null) && colHead.isVisible()) {    prefHeight+=colHead.getPreferredSize().height;  }  if ((vsb != null) && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {    if (vsbPolicy == VERTICAL_SCROLLBAR_ALWAYS) {      prefWidth+=vsb.getPreferredSize().width;    } else     if ((viewSize != null) && (extentSize != null)) {      boolean canScroll=true;      if (view instanceof Scrollable) {        canScroll=!((Scrollable)view).getScrollableTracksViewportHeight();      }      if (canScroll && (viewSize.height > extentSize.height)) {        prefWidth+=vsb.getPreferredSize().width;      }    }  }  if ((hsb != null) && (hsbPolicy != HORIZONTAL_SCROLLBAR_NEVER)) {    if (hsbPolicy == HORIZONTAL_SCROLLBAR_ALWAYS) {      prefHeight+=hsb.getPreferredSize().height;    } else     if ((viewSize != null) && (extentSize != null)) {      boolean canScroll=true;      if (view instanceof Scrollable) {        canScroll=!((Scrollable)view).getScrollableTracksViewportWidth();      }      if (canScroll && (viewSize.width > extentSize.width)) {        prefHeight+=hsb.getPreferredSize().height;      }    }  }  return new Dimension(prefWidth,prefHeight);}  }
class C{  protected void add(double value,int group){  if ((group < 0) || (group >= numberOfGroups)) {    throw new IllegalArgumentException();  }  data.add(new RankedObservation(value,group));}  }
class C{  private void retrieveFeed(PrintStream out) throws Exception {  PrintWriter writer=new PrintWriter(out);  XmlWriter xmlWriter=new XmlWriter(writer);  CodeSearchFeed myFeed=codesearchService.getFeed(privateFeedUrl,CodeSearchFeed.class);  out.println("Retrieved feed: ");  out.println("Title: " + myFeed.getTitle().getPlainText());  out.println("Entries: " + myFeed.getEntries().size());  out.println("Updated: " + myFeed.getUpdated());  out.println("Start in: " + myFeed.getStartIndex());  out.println("Entries:");  for (  CodeSearchEntry entry : myFeed.getEntries()) {    out.println("\tId: " + entry.getId());    out.println("\tTitle: " + entry.getTitle());    out.println("\tLink: " + entry.getHtmlLink().getHref());    out.println("\tUpdated: " + entry.getUpdated());    out.println("\tAuthor: " + entry.getAuthors().get(0).getName());    if (entry.getRights() != null)     out.println("\tLicense:" + entry.getRights().getPlainText());    out.println("\tPackage: ");    out.println("\t\t Name:" + entry.getPackage().getName());    out.println("\t\t URI:" + entry.getPackage().getUri());    entry.getPackage().generate(xmlWriter,codesearchService.getExtensionProfile());    out.println("XML: ");    writer.flush();    out.println("");    out.println("\tFile: " + entry.getFile().getName());    entry.getFile().generate(xmlWriter,codesearchService.getExtensionProfile());    out.println("XML: ");    writer.flush();    out.println("");    out.println("\tMatches: ");    for (    Match m : entry.getMatches()) {      out.println(m.getLineNumber() + ": " + m.getLineText().getPlainText());      m.generate(xmlWriter,codesearchService.getExtensionProfile());      out.println("XML: ");      writer.flush();      out.println("");    }  }}  }
class C{  public void testResourcesAvailable(){  new EnglishAnalyzer().close();}  }
class C{  public SelectablePoint(int x,int y){  super(x,y);}  }
class C{  public static RE createRE(String expression) throws RESyntaxException {  return createRE(expression,RE.MATCH_NORMAL);}  }
class C{  public static Object preprocessGamaValue(final Object gamaValue){  if (gamaValue instanceof GamaColor) {    final GamaColor gamaColor=(GamaColor)gamaValue;    return gamaColor.getRGB();  }  return gamaValue;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST:    return getAnnotationList();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void copyDocument(Element from,Element to,String newNamespace){  Document doc=to.getOwnerDocument();  NodeList nl=from.getChildNodes();  int length=nl.getLength();  for (int i=0; i < length; i++) {    Node node=nl.item(i);    Node newNode=null;    if (Node.ELEMENT_NODE == node.getNodeType()) {      Element oldElement=(Element)node;      newNode=doc.createElementNS(newNamespace,oldElement.getTagName());      NamedNodeMap m=oldElement.getAttributes();      Element newElement=(Element)newNode;      for (int index=0; index < m.getLength(); index++) {        Node attr=m.item(index);        newElement.setAttribute(attr.getNodeName(),attr.getNodeValue());      }      copyDocument(oldElement,newElement,newNamespace);    } else {      newNode=node.cloneNode(true);      newNode=to.getOwnerDocument().importNode(newNode,true);    }    if (newNode != null) {      to.appendChild(newNode);    }  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 15:{        addToken(start,zzStartRead - 1,Token.PREPROCESSOR);        addEndToken(INTERNAL_COMPILER_DIRECTIVE);        return firstToken;      }case 35:    break;case 4:{    addToken(Token.PREPROCESSOR);  }case 36:break;case 5:{addNullToken();return firstToken;}case 37:break;case 27:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 38:break;case 6:{addToken(Token.WHITESPACE);}case 39:break;case 21:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 40:break;case 20:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 41:break;case 26:{addToken(Token.RESERVED_WORD);}case 42:break;case 16:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.PREPROCESSOR);}case 43:break;case 9:{addToken(Token.SEPARATOR);}case 44:break;case 17:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_COMPILER_DIRECTIVE2);return firstToken;}case 45:break;case 2:{addToken(Token.IDENTIFIER);}case 46:break;case 18:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 47:break;case 25:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 48:break;case 30:{addToken(Token.FUNCTION);}case 49:break;case 7:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 50:break;case 14:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_MLC2);return firstToken;}case 51:break;case 32:{addToken(Token.DATA_TYPE);}case 52:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 53:break;case 31:{addToken(Token.LITERAL_BOOLEAN);}case 54:break;case 22:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 55:break;case 34:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 56:break;case 29:{start=zzMarkedPos - 3;yybegin(COMPILER_DIRECTIVE2);}case 57:break;case 24:{start=zzMarkedPos - 2;yybegin(MLC2);}case 58:break;case 33:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 59:break;case 19:{addToken(Token.ERROR_NUMBER_FORMAT);}case 60:break;case 28:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 61:break;case 13:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.COMMENT_MULTILINE);}case 62:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 63:break;case 10:{addToken(Token.OPERATOR);}case 64:break;case 8:{start=zzMarkedPos - 1;yybegin(MLC);}case 65:break;case 23:{start=zzMarkedPos - 2;yybegin(COMPILER_DIRECTIVE);}case 66:break;case 11:{}case 67:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 68:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case COMPILER_DIRECTIVE:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_COMPILER_DIRECTIVE);return firstToken;}case 438:break;case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 439:break;case YYINITIAL:{addNullToken();return firstToken;}case 440:break;case COMPILER_DIRECTIVE2:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_COMPILER_DIRECTIVE2);return firstToken;}case 441:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 442:break;case MLC2:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_MLC2);return firstToken;}case 443:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void test_lastIndexOfSubList2(){  ArrayList sub=new ArrayList();  sub.add(new Integer(1));  sub.add(new Integer(2));  sub.add(new Integer(3));  ArrayList sub2=new ArrayList();  sub2.add(new Integer(7));  sub2.add(new Integer(8));  ArrayList src=new ArrayList();  src.addAll(sub);  src.addAll(sub);  src.addAll(sub);  src.add(new Integer(5));  src.add(new Integer(6));  Collections.reverse(src);  sub=new ArrayList(src.subList(0,8));  assertEquals("TestA : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,5));  assertEquals("TestB : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(2,5));  assertEquals("TestC : Returned wrong lastIndexOfSubList, ",8,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(9,11));  assertEquals("TestD : Returned wrong lastIndexOfSubList, ",9,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(10,11));  assertEquals("TestE : Returned wrong lastIndexOfSubList, ",10,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,2));  assertEquals("TestF : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,1));  assertEquals("TestG : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  sub=new ArrayList(src.subList(0,11));  assertEquals("TestH : Returned wrong lastIndexOfSubList, ",0,Collections.lastIndexOfSubList(src,sub));  assertEquals("TestI : Returned wrong lastIndexOfSubList, ",-1,Collections.lastIndexOfSubList(src,sub2));}  }
class C{  public FileCommitSeqno(FileIO fileIO){  this.fileIO=fileIO;}  }
class C{  public UserEntry forceUserToChangePassword(String username) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Requiring " + username + " to change password at "+ "next login.");  URL retrieveUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  UserEntry userEntry=userService.getEntry(retrieveUrl,UserEntry.class);  userEntry.getLogin().setChangePasswordAtNextLogin(true);  URL updateUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  return userService.update(updateUrl,userEntry);}  }
class C{  public Complex(){  this(0,0);}  }
class C{  public Object visit(ASTMulNode node,Object data){  return showNode(node,data);}  }
class C{  protected void changeId(int newId){  m_id=newId;}  }
class C{  @Gridify(gridName="org.apache.ignite.p2p.GridP2PGridifySelfTest1") public Integer executeGridifyResource(int res){  String path="org/apache/ignite/p2p/p2p.properties";  GridTestClassLoader tstClsLdr=new GridTestClassLoader(GridP2PTestTask.class.getName(),GridP2PTestJob.class.getName());  byte[] bytes=new byte[20];  try (InputStream in=tstClsLdr.getResourceAsStream(path)){    if (in == null) {      System.out.println("Resource could not be loaded: " + path);      return -2;    }    in.read(bytes);  } catch (  IOException e) {    System.out.println("Failed to read from resource stream: " + e.getMessage());    return -3;  }  String rsrcVal=new String(bytes).trim();  System.out.println("Remote resource content is : " + rsrcVal);  if (!rsrcVal.equals("resource=loaded")) {    System.out.println("Invalid loaded resource value: " + rsrcVal);    return -4;  }  return res;}  }
class C{  public void afterQueryEvaluation(Object result){}  }
class C{  @SuppressWarnings("unchecked") protected void receiveEntities(Packet c){  List<Entity> newEntities=(List<Entity>)c.getObject(0);  List<Entity> newOutOfGame=(List<Entity>)c.getObject(1);  getGame().setEntitiesVector(newEntities);  if (newOutOfGame != null) {    getGame().setOutOfGameEntitiesVector(newOutOfGame);  }}  }
class C{  public static Object readField(final Field field,final Object target) throws IllegalAccessException {  return FieldUtils.readField(field,target,false);}  }
class C{  public int indexOfFromTo(int element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  int[] theElements=elements;  for (int i=from; i <= to; i++) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  public static <T extends Object & Comparable<? super T>>T max(Collection<? extends T> coll){  Iterator<? extends T> i=coll.iterator();  T candidate=i.next();  while (i.hasNext()) {    T next=i.next();    if (next.compareTo(candidate) > 0)     candidate=next;  }  return candidate;}  }
class C{  public <T>void clearSideOutputElements(TupleTag<T> tag){  peekSideOutputElements(tag).clear();}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  TransformKey bind(TransformKey other){  if (other == null) {    return this;  }  ElementKey<?,?> otherParent=other.getParent();  MetadataKey<?> otherKey=other.getKey();  MetadataContext otherContext=other.getContext();  if ((otherParent == parent) && (otherKey == key) && ((otherContext != null && otherContext.equals(context)) || (otherContext == null && context == null))) {    return this;  }  return new TransformKey(otherParent != null ? otherParent : parent,otherKey != null ? otherKey : key,otherContext != null ? otherContext : context);}  }
class C{  @Override public String toString(){  return value;}  }
class C{  protected void waitForDownloadOrTimeout_skipNotification(long id) throws TimeoutException, InterruptedException {  waitForDownloadOrTimeout(id,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME);}  }
class C{  @PostConstruct public void init(){  minDuration=DurationHelper.formattedStringToDuration(controllerPollProperties.getMinPollingTime());  maxDuration=DurationHelper.formattedStringToDuration(controllerPollProperties.getMaxPollingTime());  globalPollTime=DurationHelper.formattedStringToDuration(tenantConfigurationManagement.getGlobalConfigurationValue(TenantConfigurationKey.POLLING_TIME_INTERVAL,String.class));  globalOverdueTime=DurationHelper.formattedStringToDuration(tenantConfigurationManagement.getGlobalConfigurationValue(TenantConfigurationKey.POLLING_OVERDUE_TIME_INTERVAL,String.class));  final TenantConfigurationValue<String> pollTimeConfValue=tenantConfigurationManagement.getConfigurationValue(TenantConfigurationKey.POLLING_TIME_INTERVAL,String.class);  if (!pollTimeConfValue.isGlobal()) {    tenantPollTime=DurationHelper.formattedStringToDuration(pollTimeConfValue.getValue());  }  final TenantConfigurationValue<String> overdueTimeConfValue=tenantConfigurationManagement.getConfigurationValue(TenantConfigurationKey.POLLING_OVERDUE_TIME_INTERVAL,String.class);  if (!overdueTimeConfValue.isGlobal()) {    tenantOverdueTime=DurationHelper.formattedStringToDuration(overdueTimeConfValue.getValue());  }  final Panel rootPanel=new Panel();  rootPanel.setSizeFull();  rootPanel.addStyleName("config-panel");  final VerticalLayout vLayout=new VerticalLayout();  vLayout.setMargin(true);  final Label headerDisSetType=new Label(i18n.get("configuration.polling.title"));  headerDisSetType.addStyleName("config-panel-header");  vLayout.addComponent(headerDisSetType);  fieldPollTime=DurationConfigField.builder().caption(i18n.get("configuration.polling.time")).checkBoxTooltip(i18n.get("configuration.polling.custom.value")).range(minDuration,maxDuration).globalDuration(globalPollTime).tenantDuration(tenantPollTime).build();  fieldPollTime.addChangeListener(this);  vLayout.addComponent(fieldPollTime);  fieldPollingOverdueTime=DurationConfigField.builder().caption(i18n.get("configuration.polling.overduetime")).checkBoxTooltip(i18n.get("configuration.polling.custom.value")).range(minDuration,maxDuration).globalDuration(globalOverdueTime).tenantDuration(tenantOverdueTime).build();  fieldPollingOverdueTime.addChangeListener(this);  vLayout.addComponent(fieldPollingOverdueTime);  rootPanel.setContent(vLayout);  setCompositionRoot(rootPanel);}  }
class C{  public FileDownloadInfo.NetworkState checkCanUseNetwork(FileDownloadInfo downloadInfo){  final NetworkInfo info=systemFacade.getActiveNetworkInfo();  if (info == null || !info.isConnected()) {    return FileDownloadInfo.NetworkState.NO_CONNECTION;  }  if (NetworkInfo.DetailedState.BLOCKED.equals(info.getDetailedState())) {    return FileDownloadInfo.NetworkState.BLOCKED;  }  if (systemFacade.isNetworkRoaming() && !downloadInfo.allowRoaming()) {    return FileDownloadInfo.NetworkState.CANNOT_USE_ROAMING;  }  if (systemFacade.isActiveNetworkMetered() && !downloadInfo.allowMetered()) {    return FileDownloadInfo.NetworkState.TYPE_DISALLOWED_BY_REQUESTOR;  }  return checkIsNetworkTypeAllowed(downloadInfo,info.getType());}  }
class C{  public static boolean isWrench(ItemStack item){  if (item == null)   return false;  return isIToolWrench(item);}  }
class C{  final Buffer sendCommand(int command,String extraData,Buffer queryPacket,boolean skipCheck,String extraDataCharEncoding,int timeoutMillis) throws SQLException {  this.commandCount++;  this.enablePacketDebug=this.connection.getEnablePacketDebug();  this.readPacketSequence=0;  int oldTimeout=0;  if (timeoutMillis != 0) {    try {      oldTimeout=this.mysqlConnection.getSoTimeout();      this.mysqlConnection.setSoTimeout(timeoutMillis);    } catch (    SocketException e) {      throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,e,getExceptionInterceptor());    }  }  try {    checkForOutstandingStreamingData();    this.oldServerStatus=this.serverStatus;    this.serverStatus=0;    this.hadWarnings=false;    this.warningCount=0;    this.queryNoIndexUsed=false;    this.queryBadIndexUsed=false;    this.serverQueryWasSlow=false;    if (this.useCompression) {      int bytesLeft=this.mysqlInput.available();      if (bytesLeft > 0) {        this.mysqlInput.skip(bytesLeft);      }    }    try {      clearInputStream();      if (queryPacket == null) {        int packLength=HEADER_LENGTH + COMP_HEADER_LENGTH + 1+ ((extraData != null) ? extraData.length() : 0)+ 2;        if (this.sendPacket == null) {          this.sendPacket=new Buffer(packLength);        }        this.packetSequence=-1;        this.compressedPacketSequence=-1;        this.readPacketSequence=0;        this.checkPacketSequence=true;        this.sendPacket.clear();        this.sendPacket.writeByte((byte)command);        if ((command == MysqlDefs.INIT_DB) || (command == MysqlDefs.CREATE_DB) || (command == MysqlDefs.DROP_DB)|| (command == MysqlDefs.QUERY)|| (command == MysqlDefs.COM_PREPARE)) {          if (extraDataCharEncoding == null) {            this.sendPacket.writeStringNoNull(extraData);          } else {            this.sendPacket.writeStringNoNull(extraData,extraDataCharEncoding,this.connection.getServerCharset(),this.connection.parserKnowsUnicode(),this.connection);          }        } else         if (command == MysqlDefs.PROCESS_KILL) {          long id=Long.parseLong(extraData);          this.sendPacket.writeLong(id);        }        send(this.sendPacket,this.sendPacket.getPosition());      } else {        this.packetSequence=-1;        this.compressedPacketSequence=-1;        send(queryPacket,queryPacket.getPosition());      }    } catch (    SQLException sqlEx) {      throw sqlEx;    }catch (    Exception ex) {      throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,ex,getExceptionInterceptor());    }    Buffer returnPacket=null;    if (!skipCheck) {      if ((command == MysqlDefs.COM_EXECUTE) || (command == MysqlDefs.COM_RESET_STMT)) {        this.readPacketSequence=0;        this.packetSequenceReset=true;      }      returnPacket=checkErrorPacket(command);    }    return returnPacket;  } catch (  IOException ioEx) {    preserveOldTransactionState();    throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,ioEx,getExceptionInterceptor());  }catch (  SQLException e) {    preserveOldTransactionState();    throw e;  } finally {    if (timeoutMillis != 0) {      try {        this.mysqlConnection.setSoTimeout(oldTimeout);      } catch (      SocketException e) {        throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,e,getExceptionInterceptor());      }    }  }}  }
class C{  public MCountry(Properties ctx,int C_Country_ID,String trxName){  super(ctx,C_Country_ID,trxName);  if (C_Country_ID == 0) {    setDisplaySequence(DISPLAYSEQUENCE);    setHasRegion(false);    setHasPostal_Add(false);    setIsAddressLinesLocalReverse(false);    setIsAddressLinesReverse(false);  }}  }
class C{  public static long Extend(long fp,byte[] bytes,int start,int len){  final long[] mod=ByteModTable_7;  int end=start + len;  for (int i=start; i < end; i++) {    fp=(fp >>> 8) ^ mod[(bytes[i] ^ (int)fp) & 0xFF];  }  return fp;}  }
class C{  @PostMapping("/signup") @ResponseStatus(HttpStatus.CREATED) public U signup(@RequestBody U user){  log.debug("Signing up: " + user);  lemonService.signup(user);  log.debug("Signed up: " + user);  return lemonService.userForClient();}  }
class C{  public long idleTimeBeforeConnectionTest(){  return idleTimeBeforeConnectionTest;}  }
class C{  static double parseVersion(String s){  Matcher m=numPat.matcher(s);  double res=0.0, f=1;  while (m.find()) {    res+=Integer.parseInt(m.group(1)) * f;    f/=1000;  }  return res;}  }
class C{  private void startReplicationService(TungstenProperties replProps) throws ReplicatorException {  String serviceName=replProps.getString(ReplicatorConf.SERVICE_NAME);  String serviceType=replProps.getString(ReplicatorConf.SERVICE_TYPE);  boolean isDetached=replProps.getBoolean(ReplicatorConf.DETACHED);  OpenReplicatorManagerMBean orm=null;  try {    if (isDetached) {      throw new ReplicatorException("Creating of detached service is no longer supported");    } else {      orm=createInternalService(serviceName);    }    replicators.put(serviceName,orm);    orm.start(replProps.getBoolean(ReplicatorConf.FORCE_OFFLINE));    int listenPort=orm.getMasterListenPort();    if (listenPort > masterListenPortMax)     masterListenPortMax=listenPort;    logger.info(String.format("%s/%s replication service '%s' started successfully",(isDetached ? "detached" : "internal"),serviceType,serviceName));  } catch (  Exception e) {    logger.error(String.format("Unable to start replication service '%s'",serviceName),e);  }}  }
class C{  public static <E,S extends MutableSortedBag<E>>UnmodifiableSortedBag<E> of(S bag){  if (bag == null) {    throw new IllegalArgumentException("cannot create an UnmodifiableSortedBag for null");  }  return new UnmodifiableSortedBag<>(bag);}  }
class C{  public static CompilerOptions fromConfig(CeylonConfig config){  CompilerOptions options=new CompilerOptions();  options.mapOptions(config);  return options;}  }
class C{  public void addAll(HashMap<Integer,char[]> records){  for (  Entry<Integer,char[]> e : records.entrySet()) {    this.add(e.getValue(),e.getKey());  }}  }
class C{  public GenericAttr(String name,AbstractDocument owner) throws DOMException {  super(name,owner);  setNodeName(name);}  }
class C{  public Map<String,Long> releaseExpiredLocks() throws Exception {  return releaseLocks(false);}  }
class C{  protected boolean removeTelegramListener(TelegramListener remListener){  return (TelegramListeners.remove(remListener));}  }
class C{  private static void reportCounter(){  final Counter counter=registry.counter(APP_PREFIX.tagged("what","job-count"));  counter.inc();  counter.inc();  counter.dec();}  }
class C{  public Map<String,Object> build(){  return map;}  }
class C{  public int length(){  return getSize();}  }
class C{  public void initIncoming(){  getIncomingBuilder().init();}  }
class C{  public static <K,V extends Comparable<V>>List<Entry<K,V>> sortByValue(Map<K,V> map){  List<Entry<K,V>> entries=new ArrayList<>(map.entrySet());  Collections.sort(entries,new ByValue<K,V>());  return entries;}  }
class C{  private void initCollapsedLayout(final String trackName,final String artistName,final Bitmap albumArt){  mNotificationTemplate.setTextViewText(R.id.notification_base_line_one,trackName != null ? trackName : "---");  mNotificationTemplate.setTextViewText(R.id.notification_base_line_two,artistName != null ? artistName : "---");  if (albumArt != null) {    mNotificationTemplate.setImageViewBitmap(R.id.notification_base_image,albumArt);  }}  }
class C{  public Data transform(Data data,XMLCryptoContext xc,OutputStream os) throws TransformException {  return spi.transform(data,xc,os);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.min(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.min(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.min(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public HighlightTextView(Context context,AttributeSet attrs){  this(context,attrs,android.R.attr.textViewStyle);}  }
class C{  public ParserConfigurationException(String msg){  super(msg);}  }
class C{  public void addContactTest(){  if (null == identity) {    Toast.makeText(context,"Create one ID first that we can load afterwards",Toast.LENGTH_LONG).show();    System.err.println("No identity to add contact to, please create one");    return;  }  PanboxContact c=new PanboxContact();  c.setEmail("contactAdded@bla.de");  c.setName("AddedLastName");  c.setFirstName("Alice");  c.setTrustLevel(2);  CloudProviderInfo cpi1=new CloudProviderInfo("Cloud1","Alice-Cloud1");  c.addCloudProvider(cpi1);  KeyPair cSigKey=CryptCore.generateKeypair();  KeyPair cEncKey=CryptCore.generateKeypair();  c.setCertEnc(CryptCore.createSelfSignedX509Certificate(cEncKey.getPrivate(),cEncKey.getPublic(),c));  c.setCertSign(CryptCore.createSelfSignedX509Certificate(cSigKey.getPrivate(),cSigKey.getPublic(),c));  try {    identity.getAddressbook().addContact(c);  } catch (  ContactExistsException e) {    e.printStackTrace();  }  AbstractIdentityManager idm=IdentityManagerAndroid.getInstance(context);  idm.storeMyIdentity(identity);}  }
class C{  @Override public String toString(){  return "Entry, xIndex: " + mXIndex + " val (sum): "+ getVal();}  }
class C{  @ObjectiveCName("changeMyAvatarWithDescriptor:") public void changeMyAvatar(String descriptor){  modules.getProfileModule().changeAvatar(descriptor);}  }
class C{  private void removePlaylist(final String playlistId){  YouTubeSqlDb.getInstance().playlists().delete(playlistId);  for (  YouTubePlaylist playlist : playlists) {    if (playlist.getId().equals(playlistId)) {      playlists.remove(playlist);      break;    }  }  playlistsAdapter.notifyDataSetChanged();}  }
class C{  private void useStatus(){  closeAction=CloseAction.TITLE_GAME;  setVisible(false);}  }
class C{  @Override protected void visit(final Object obj){  set[slot]=(ITuple<?>)(obj == NULL_VALUE ? null : obj);}  }
class C{  public static void json(String tag,String json,int methodCount){  validateMethodCount(methodCount);  if (TextUtils.isEmpty(json)) {    d(tag,"Empty/Null json content",methodCount);    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(tag,message,methodCount);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(tag,message,methodCount);    }  } catch (  JSONException e) {    d(tag,e.getCause().getMessage() + "\n" + json,methodCount);  }}  }
class C{  public VecBufferBlocks(int coordsPerVec,String dataType,ByteBuffer buffer,int capacity){  super(capacity);  if (coordsPerVec < 1) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dataType == null) {    String message=Logging.getMessage("nullValue.DataTypeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.coordsPerVec=coordsPerVec;  this.dataType=dataType;  this.buffer=buffer;}  }
class C{  public long copy(final InputStream from,final OutputStream to) throws IOException {  long count=0;  byte[] tmp=mByteArrayPool.get(mTempBufSize);  try {    while (true) {      int read=from.read(tmp,0,mTempBufSize);      if (read == -1) {        return count;      }      to.write(tmp,0,read);      count+=read;    }  }  finally {    mByteArrayPool.release(tmp);  }}  }
class C{  public DeLiCluLeafEntry(DBID id,NumberVector vector){  super(id,vector);  this.hasHandled=false;  this.hasUnhandled=true;}  }
class C{  public JSeparator(int orientation){  checkOrientation(orientation);  this.orientation=orientation;  setFocusable(false);  updateUI();}  }
class C{  public StdXMLBuilder(IXMLElement prototype){  this.stack=null;  this.root=null;  this.prototype=prototype;}  }
class C{  public void addHaltestelle(String id,double x,double y){  Coord coord=new Coord(x,y);  SwissHaltestelle swissStop=new SwissHaltestelle(id,coord);  this.haltestellen.put(coord.getX(),coord.getY(),swissStop);  this.haltestellenMap.put(swissStop.getId(),swissStop);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  instructorId="";  screenName="instructor";  super.reset(mapping,request);  setPosType(request);  prevId=nextId=null;  ignoreDist=false;  email=null;}  }
class C{  private static byte[] encode(byte[] binaryData){  boolean isChunked=true;  long binaryDataLength=binaryData.length;  long lengthDataBits=binaryDataLength * EIGHTBIT;  long fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  long tripletCount=lengthDataBits / TWENTYFOURBITGROUP;  long encodedDataLengthLong=0;  int chunckCount=0;  if (fewerThan24bits != 0) {    encodedDataLengthLong=(tripletCount + 1) * 4;  } else {    encodedDataLengthLong=tripletCount * 4;  }  if (isChunked) {    chunckCount=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLengthLong / CHUNK_SIZE));    encodedDataLengthLong+=chunckCount * CHUNK_SEPARATOR.length;  }  if (encodedDataLengthLong > Integer.MAX_VALUE) {    throw new IllegalArgumentException("Input array too big, output array would be bigger than Integer.MAX_VALUE=" + Integer.MAX_VALUE);  }  int encodedDataLength=(int)encodedDataLengthLong;  byte encodedData[]=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < tripletCount; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < chunckCount) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  private void notifyNoActivity(){  logger.debug("No activity notified, sending enquireLink");  if (sessionContext().getSessionState().isBound()) {    enquireLinkSender.enquireLink();  }}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public void jsmin() throws IOException, UnterminatedRegExpLiteralException, UnterminatedCommentException, UnterminatedStringLiteralException {  if (peek() == 0xEF) {    get();    get();    get();  }  theA='\n';  action(3);  while (theA != EOF) {switch (theA) {case ' ':      if (isAlphanum(theB)) {        action(1);      } else {        action(2);      }    break;case '\n':switch (theB) {case '{':case '[':case '(':case '+':case '-':case '!':case '~':    action(1);  break;case ' ':action(3);break;default :if (isAlphanum(theB)) {action(1);} else {action(2);}}break;default :switch (theB) {case ' ':if (isAlphanum(theA)) {action(1);break;}action(3);break;case '\n':switch (theA) {case '}':case ']':case ')':case '+':case '-':case '"':case '\'':case '`':action(1);break;default :if (isAlphanum(theA)) {action(1);} else {action(3);}}break;default :action(1);break;}}}out.flush();}  }
class C{  public boolean isDefaultGatewaySettable(){  return defaultGatewaySettable;}  }
class C{  public Task<FileShareRestRep> associateFilePolicy(URI fileSystemId,URI filePolicyId){  UriBuilder builder=client.uriBuilder(getIdUrl() + "/assign-file-policy/{file_policy_uri}");  URI targetUri=builder.build(fileSystemId,filePolicyId);  return putTaskURI(null,targetUri);}  }
class C{  private byte[] writeCheckedBytes(MessageNano proto){  CheckedMessage wrapper=new CheckedMessage();  wrapper.payload=MessageNano.toByteArray(proto);  CRC32 checksum=new CRC32();  checksum.update(wrapper.payload);  wrapper.checksum=checksum.getValue();  return MessageNano.toByteArray(wrapper);}  }
class C{  public GraphicalView(Context context,AbstractChart chart){  super(context);  mChart=chart;  mHandler=new Handler();  if (mChart instanceof XYChart) {    mRenderer=((XYChart)mChart).getRenderer();  } else {    mRenderer=((RoundChart)mChart).getRenderer();  }  if (mRenderer.isZoomButtonsVisible()) {    zoomInImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom_in.png"));    zoomOutImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom_out.png"));    fitZoomImage=BitmapFactory.decodeStream(GraphicalView.class.getResourceAsStream("image/zoom-1.png"));  }  if (mRenderer instanceof XYMultipleSeriesRenderer && ((XYMultipleSeriesRenderer)mRenderer).getMarginsColor() == XYMultipleSeriesRenderer.NO_COLOR) {    ((XYMultipleSeriesRenderer)mRenderer).setMarginsColor(mPaint.getColor());  }  if (mRenderer.isZoomEnabled() && mRenderer.isZoomButtonsVisible() || mRenderer.isExternalZoomEnabled()) {    mZoomIn=new Zoom(mChart,true,mRenderer.getZoomRate());    mZoomOut=new Zoom(mChart,false,mRenderer.getZoomRate());    mFitZoom=new FitZoom(mChart);  }  int version=7;  try {    version=Integer.valueOf(Build.VERSION.SDK);  } catch (  Exception e) {  }  if (version < 7) {    mTouchHandler=new TouchHandlerOld(this,mChart);  } else {    mTouchHandler=new TouchHandler(this,mChart);  }}  }
class C{  protected void checkAntVersion(Hashtable h){  if (null == h)   h=new Hashtable();  try {    final String ANT_VERSION_CLASS="org.apache.tools.ant.Main";    final String ANT_VERSION_METHOD="getAntVersion";    final Class noArgs[]=new Class[0];    Class clazz=ObjectFactory.findProviderClass(ANT_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(ANT_VERSION_METHOD,noArgs);    Object returnValue=method.invoke(null,new Object[0]);    h.put(VERSION + "ant",(String)returnValue);  } catch (  Exception e) {    h.put(VERSION + "ant",CLASS_NOTPRESENT);  }}  }
class C{  private void initializeIdTable(){  logger.info("Special tokens: start: {}  end: {}",TokenUtils.START_TOKEN,TokenUtils.END_TOKEN);  int[] table=new int[Vocabulary.systemSize()];  for (int i=0; i < table.length; ++i) {    table[i]=model.index(Vocabulary.systemGet(i));  }  istringIdToKenLMId=new AtomicReference<int[]>(table);}  }
class C{  public TreeCategory(String name,int iconID){  this(name,iconID,true);}  }
class C{  public boolean isSetSyncValue(){  return this.syncValue != null;}  }
class C{  public void assertEqual(long expected,long actual,String errorMessage){  TestUtils.assertEqual(expected,actual,errorMessage);}  }
class C{  private void convertWhere(final Blackboard bb,final SqlNode where){  if (where == null) {    return;  }  SqlNode newWhere=pushDownNotForIn(where);  replaceSubqueries(bb,newWhere,RelOptUtil.Logic.UNKNOWN_AS_FALSE);  final RexNode convertedWhere=bb.convertExpression(newWhere);  if (convertedWhere.isAlwaysTrue()) {    return;  }  final RelNode filter=RelOptUtil.createFilter(bb.root,convertedWhere);  final RelNode r;  final CorrelationUse p=getCorrelationUse(bb,filter);  if (p != null) {    assert p.r instanceof Filter;    Filter f=(Filter)p.r;    r=LogicalFilter.create(f.getInput(),f.getCondition(),ImmutableSet.of(p.id));  } else {    r=filter;  }  bb.setRoot(r,false);}  }
class C{  public static void chachaCore(int rounds,int[] input,int[] x){  if (input.length != 16) {    throw new IllegalArgumentException();  }  if (x.length != 16) {    throw new IllegalArgumentException();  }  if (rounds % 2 != 0) {    throw new IllegalArgumentException("Number of rounds must be even");  }  int x00=input[0];  int x01=input[1];  int x02=input[2];  int x03=input[3];  int x04=input[4];  int x05=input[5];  int x06=input[6];  int x07=input[7];  int x08=input[8];  int x09=input[9];  int x10=input[10];  int x11=input[11];  int x12=input[12];  int x13=input[13];  int x14=input[14];  int x15=input[15];  for (int i=rounds; i > 0; i-=2) {    x00+=x04;    x12=rotl(x12 ^ x00,16);    x08+=x12;    x04=rotl(x04 ^ x08,12);    x00+=x04;    x12=rotl(x12 ^ x00,8);    x08+=x12;    x04=rotl(x04 ^ x08,7);    x01+=x05;    x13=rotl(x13 ^ x01,16);    x09+=x13;    x05=rotl(x05 ^ x09,12);    x01+=x05;    x13=rotl(x13 ^ x01,8);    x09+=x13;    x05=rotl(x05 ^ x09,7);    x02+=x06;    x14=rotl(x14 ^ x02,16);    x10+=x14;    x06=rotl(x06 ^ x10,12);    x02+=x06;    x14=rotl(x14 ^ x02,8);    x10+=x14;    x06=rotl(x06 ^ x10,7);    x03+=x07;    x15=rotl(x15 ^ x03,16);    x11+=x15;    x07=rotl(x07 ^ x11,12);    x03+=x07;    x15=rotl(x15 ^ x03,8);    x11+=x15;    x07=rotl(x07 ^ x11,7);    x00+=x05;    x15=rotl(x15 ^ x00,16);    x10+=x15;    x05=rotl(x05 ^ x10,12);    x00+=x05;    x15=rotl(x15 ^ x00,8);    x10+=x15;    x05=rotl(x05 ^ x10,7);    x01+=x06;    x12=rotl(x12 ^ x01,16);    x11+=x12;    x06=rotl(x06 ^ x11,12);    x01+=x06;    x12=rotl(x12 ^ x01,8);    x11+=x12;    x06=rotl(x06 ^ x11,7);    x02+=x07;    x13=rotl(x13 ^ x02,16);    x08+=x13;    x07=rotl(x07 ^ x08,12);    x02+=x07;    x13=rotl(x13 ^ x02,8);    x08+=x13;    x07=rotl(x07 ^ x08,7);    x03+=x04;    x14=rotl(x14 ^ x03,16);    x09+=x14;    x04=rotl(x04 ^ x09,12);    x03+=x04;    x14=rotl(x14 ^ x03,8);    x09+=x14;    x04=rotl(x04 ^ x09,7);  }  x[0]=x00 + input[0];  x[1]=x01 + input[1];  x[2]=x02 + input[2];  x[3]=x03 + input[3];  x[4]=x04 + input[4];  x[5]=x05 + input[5];  x[6]=x06 + input[6];  x[7]=x07 + input[7];  x[8]=x08 + input[8];  x[9]=x09 + input[9];  x[10]=x10 + input[10];  x[11]=x11 + input[11];  x[12]=x12 + input[12];  x[13]=x13 + input[13];  x[14]=x14 + input[14];  x[15]=x15 + input[15];}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  int length=getSortElemCount();  for (int i=0; i < length; i++) {    getSortElem(i).endCompose(sroot);  }  super.endCompose(sroot);}  }
class C{  private boolean createRequest(Message msg) throws MessagingException, SQLException {  Address[] from=msg.getFrom();  String fromAddress;  if (from[0].toString().indexOf('<') != -1 && from[0].toString().indexOf('>') != -1) {    fromAddress=from[0].toString().substring(from[0].toString().indexOf('<') + 1,from[0].toString().indexOf('>'));    log.info("fromAddress stripped: " + fromAddress);  } else {    fromAddress=from[0].toString();  }  String[] hdrs=msg.getHeader("Message-ID");  int retValuedup=0;  String sqldup="select r_request_id from r_request " + "where ad_client_id = ? " + "and documentno = ? "+ "and startdate = ?";  PreparedStatement pstmtdup=null;  pstmtdup=DB.prepareStatement(sqldup,null);  pstmtdup.setInt(1,getAD_Client_ID());  pstmtdup.setString(2,hdrs[0].substring(0,30));  pstmtdup.setTimestamp(3,new Timestamp(msg.getSentDate().getTime()));  ResultSet rsdup=pstmtdup.executeQuery();  if (rsdup.next())   retValuedup=rsdup.getInt(1);  rsdup.close();  pstmtdup.close();  pstmtdup=null;  if (retValuedup > 0) {    log.info("request already existed for msg -> " + hdrs[0]);    return true;  }  int request_upd=0;  String sqlupd="SELECT r_request_id " + "  FROM r_request " + " WHERE ad_client_id = ? "+ "   AND summary LIKE 'FROM: ' || ? || '%' "+ "   AND (   documentno = "+ "              SUBSTR "+ "                 (?, "+ "                  INSTR "+ "                      (?, "+ "                       '<' "+ "                      ) "+ "                 ) "+ "        OR (    ? LIKE 'Re: %' "+ "            AND summary = "+ "                      'FROM: ' "+ "                   || ? "+ "                   || CHR (10) "+ "                   || SUBSTR (?, 5) "+ "           ) "+ "       ) ";  PreparedStatement pstmtupd=null;  pstmtupd=DB.prepareStatement(sqlupd,null);  pstmtupd.setInt(1,getAD_Client_ID());  pstmtupd.setString(2,fromAddress);  pstmtupd.setString(3,msg.getSubject());  pstmtupd.setString(4,msg.getSubject());  pstmtupd.setString(5,msg.getSubject());  pstmtupd.setString(6,fromAddress);  pstmtupd.setString(7,msg.getSubject());  ResultSet rsupd=pstmtupd.executeQuery();  if (rsupd.next())   request_upd=rsupd.getInt(1);  rsupd.close();  pstmtupd.close();  pstmtupd=null;  if (request_upd > 0) {    log.info("msg -> " + hdrs[0] + " is an answer for req "+ request_upd);    return updateRequest(request_upd,msg);  }  MRequest req=new MRequest(getCtx(),0,get_TrxName());  req.setSummary("FROM: " + fromAddress + "\n"+ msg.getSubject());  req.setResult("FROM: " + from[0].toString() + "\n"+ getMessage(msg));  if (hdrs != null)   req.setDocumentNo(hdrs[0].substring(0,30));  if (R_RequestType_ID > 0)   req.setR_RequestType_ID(R_RequestType_ID); else   req.setR_RequestType_ID();  if (SalesRep_ID > 0)   req.setSalesRep_ID(SalesRep_ID);  if (AD_Role_ID > 0)   req.setAD_Role_ID(AD_Role_ID);  if (from != null) {    int retValueu=-1;    String sqlu="SELECT ad_user_id " + "  FROM ad_user " + " WHERE UPPER (email) = UPPER (?) "+ "   AND ad_client_id = ?";    PreparedStatement pstmtu=null;    pstmtu=DB.prepareStatement(sqlu,null);    pstmtu.setString(1,fromAddress);    pstmtu.setInt(2,getAD_Client_ID());    ResultSet rsu=pstmtu.executeQuery();    if (rsu.next())     retValueu=rsu.getInt(1);    rsu.close();    pstmtu.close();    pstmtu=null;    if (retValueu > 0) {      req.setAD_User_ID(retValueu);    } else {      if (AD_User_ID > 0)       req.setAD_User_ID(AD_User_ID);    }  }  if (req.getAD_User_ID() > 0) {    MUser us=new MUser(getCtx(),req.getAD_User_ID(),get_TrxName());    if (us.getC_BPartner_ID() > 0)     req.setC_BPartner_ID(us.getC_BPartner_ID());  }  if (req.getC_BPartner_ID() <= 0 && C_BPartner_ID > 0) {    req.setC_BPartner_ID(C_BPartner_ID);  }  req.setStartDate(new Timestamp(msg.getSentDate().getTime()));  if (p_DefaultConfidentiality != null) {    req.setConfidentialType(p_DefaultConfidentiality);    req.setConfidentialTypeEntry(p_DefaultConfidentiality);  }  if (p_DefaultPriority != null) {    req.setPriority(p_DefaultPriority);    req.setPriorityUser(p_DefaultPriority);  }  if (req.save(get_TrxName())) {    log.info("created request " + req.getR_Request_ID() + " from msg -> "+ hdrs[0]);    if (msg.isMimeType("multipart/*")) {      try {        Multipart mp=(Multipart)msg.getContent();        for (int i=0, n=mp.getCount(); i < n; i++) {          Part part=mp.getBodyPart(i);          String disposition=part.getDisposition();          if ((disposition != null) && ((disposition.equals(Part.ATTACHMENT) || (disposition.equals(Part.INLINE))))) {            MAttachment attach=req.createAttachment();            InputStream in=part.getInputStream();            ByteArrayOutputStream out=new ByteArrayOutputStream();            final int BUF_SIZE=1 << 8;            byte[] buffer=new byte[BUF_SIZE];            int bytesRead=-1;            while ((bytesRead=in.read(buffer)) > -1) {              out.write(buffer,0,bytesRead);            }            in.close();            byte[] bytes=out.toByteArray();            attach.addEntry(part.getFileName(),bytes);            attach.saveEx(get_TrxName());          }        }      } catch (      IOException e) {        log.log(Level.FINE,"Error extracting attachments",e);      }    }    return true;  } else {    return false;  }}  }
class C{  public TransformPanel(JComponent header){  this(new Vector2(),0.0,true,header);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  getAstStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE:setStructuralType((TStructuralType)newValue);return;case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();getGenStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();getPostponedSubstitutions().addAll((Collection<? extends TypeVariableMapping>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static <V extends Vec>Vec covarianceDiag(Vec means,List<V> dataset){  final int d=dataset.get(0).length();  DenseVector diag=new DenseVector(d);  covarianceDiag(means,diag,dataset);  ;  return diag;}  }
class C{  void addChronoChangedListener(Consumer<Chronology> listener){  if (chronoListeners == null) {    chronoListeners=new ArrayList<Consumer<Chronology>>();  }  chronoListeners.add(listener);}  }
class C{  @Override protected void createChildren(){}  }
class C{  public static List<? extends Point2D> computeGroundHeadingIndicatorPoints(DrawContext dc,Vec4 symbolPoint,Angle heading,double length,double frameHeight){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (heading == null) {    String msg=Logging.getMessage("nullValue.HeadingIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  View view=dc.getView();  Vec4 dir=computeDirectionOfMovement(dc,symbolPoint,heading,length);  Vec4 pt1=view.project(symbolPoint);  Vec4 pt2=view.project(symbolPoint.add3(dir));  return Arrays.asList(new Point2D.Double(0,0),new Point2D.Double(0,-frameHeight / 2d),new Point2D.Double(pt2.x - pt1.x,-frameHeight / 2d + (pt2.y - pt1.y)));}  }
class C{  private static void addToIndex(ArrayDeque<FilterValueSetParam> remainingParameters,FilterHandle filterCallback,FilterParamIndexBase index,Object filterForValue,ArrayDeque<EventTypeIndexBuilderIndexLookupablePair> treePathInfo,FilterServiceGranularLockFactory lockFactory){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".addToIndex (" + Thread.currentThread().getId() + ") Adding to index "+ index.toString()+ "  expressionValue="+ filterForValue);  }  index.getReadWriteLock().readLock().lock();  EventEvaluator eventEvaluator;  try {    eventEvaluator=index.get(filterForValue);    if (eventEvaluator != null) {      boolean added=addToEvaluator(remainingParameters,filterCallback,eventEvaluator,treePathInfo,lockFactory);      if (added) {        return;      }    }  }  finally {    index.getReadWriteLock().readLock().unlock();  }  index.getReadWriteLock().writeLock().lock();  try {    eventEvaluator=index.get(filterForValue);    if (eventEvaluator != null) {      boolean added=addToEvaluator(remainingParameters,filterCallback,eventEvaluator,treePathInfo,lockFactory);      if (added) {        return;      }      FilterParamIndexBase nextIndex=(FilterParamIndexBase)eventEvaluator;      FilterHandleSetNode newNode=new FilterHandleSetNode(lockFactory.obtainNew());      newNode.add(nextIndex);      index.remove(filterForValue);      index.put(filterForValue,newNode);      addToNode(remainingParameters,filterCallback,newNode,treePathInfo,lockFactory);      return;    }    if (remainingParameters.isEmpty()) {      FilterHandleSetNode node=new FilterHandleSetNode(lockFactory.obtainNew());      addToNode(remainingParameters,filterCallback,node,treePathInfo,lockFactory);      index.put(filterForValue,node);      return;    }    FilterValueSetParam parameterPickedForIndex=remainingParameters.removeFirst();    FilterParamIndexBase nextIndex=IndexFactory.createIndex(parameterPickedForIndex.getLookupable(),lockFactory,parameterPickedForIndex.getFilterOperator());    index.put(filterForValue,nextIndex);    treePathInfo.add(new EventTypeIndexBuilderIndexLookupablePair(nextIndex,parameterPickedForIndex.getFilterForValue()));    addToIndex(remainingParameters,filterCallback,nextIndex,parameterPickedForIndex.getFilterForValue(),treePathInfo,lockFactory);  }  finally {    index.getReadWriteLock().writeLock().unlock();  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  try {    writer.write(new String(ch,start,length));  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  protected void registerAnimatedImageAttributes(){  addAttributeProcessor(new AnimationDelayLmlAttribute(),"delay");  addAttributeProcessor(new AnimationMaxDelayLmlAttribute(),"maxDelay");  addAttributeProcessor(new BackwardsLmlAttribute(),"backwards");  addAttributeProcessor(new BouncingLmlAttribute(),"bounce","bouncing");  addAttributeProcessor(new CurrentFrameLmlAttribute(),"frame","currentFrame");  addAttributeProcessor(new FramesLmlAttribute(),"frames");  addAttributeProcessor(new PlayOnceLmlAttribute(),"playOnce");}  }
class C{  private String buildProteinIdentifier(OpenReadingFrame orf){  return "pep_" + getIdentifierSuffix(orf);}  }
class C{  public void start(){  stop();  for (int i=0; i < mDispatchers.length; i++) {    RequestDispatcher networkDispatcher=new RequestDispatcher(mUnFinishQueue,mRequestQueue);    mDispatchers[i]=networkDispatcher;    networkDispatcher.start();  }}  }
class C{  public boolean isCloudMessageFailSilently(){  return cloudMessageFailSilently;}  }
class C{  public static int indexOf(double[] array,double value,int startIndex){  for (int i=startIndex; i < array.length; i++) {    if (Double.compare(array[i],value) == 0) {      return i;    }  }  return -1;}  }
class C{  private double maxMoved(double[][] means,double[][] newmeans,double[] dists){  assert (means.length == k);  assert (newmeans.length == k);  assert (dists.length == k);  boolean issquared=(distanceFunction instanceof SquaredEuclideanDistanceFunction);  double max=0.;  for (int i=0; i < k; i++) {    double d=distanceFunction.distance(DoubleVector.wrap(means[i]),DoubleVector.wrap(newmeans[i]));    d=issquared ? Math.sqrt(d) : d;    dists[i]=d;    max=(d > max) ? d : max;  }  return max;}  }
class C{  public static boolean isProductStocked(Properties ctx,int M_Product_ID){  MProduct product=get(ctx,M_Product_ID);  return product.isStocked();}  }
class C{  public FilterScorer(Scorer in,Weight weight){  super(weight);  if (in == null) {    throw new NullPointerException("wrapped Scorer must not be null");  }  this.in=in;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  java.io.File f=getFile(stack);  return IOUtils.writeStringToFile(f,s);}  }
class C{  public boolean isAlterModify(){  return columnsToModify.size() > 0;}  }
class C{  protected boolean startsWithIgnoreCase(String str1,String str2){  String s1=org.compiere.util.Util.stripDiacritics(str1.toUpperCase()).replaceAll("^\\s+","");  ;  String s2=org.compiere.util.Util.stripDiacritics(str2.toUpperCase()).replaceAll("^\\s+","");  ;  return s1.startsWith(s2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:01.070 -0500",hash_original_method="17DACA856A7B157094F93A364689CD76",hash_generated_method="5FEE795E274CE971D1548A2E27611C70") public boolean hasTag(){  return hasParameter(ParameterNames.TAG);}  }
class C{  public boolean add(Coordinate[] coord,boolean allowRepeated,boolean direction){  if (direction) {    for (int i=0; i < coord.length; i++) {      add(coord[i],allowRepeated);    }  } else {    for (int i=coord.length - 1; i >= 0; i--) {      add(coord[i],allowRepeated);    }  }  return true;}  }
class C{  public void testResourceELEval() throws Exception {  ResourceHandler handler=getFacesContext().getApplication().getResourceHandler();  assertNotNull(handler);  Resource resource=handler.createResource("simple-with-el.css");  assertNotNull(resource);  byte[] bytes=getBytes(resource.getInputStream());  ByteArrayInputStream bai=new ByteArrayInputStream(bytes);  BufferedReader reader=new BufferedReader(new InputStreamReader(bai));  List<String> lines=new ArrayList<String>();  for (String l=reader.readLine(); l != null; l=reader.readLine()) {    String t=l.trim();    if (t.length() > 0) {      lines.add(t);    }  }  assertEquals(4,lines.size());  final String[] expectedLines={"# /test","# /test","h2 { color: red }","# /test}"};  for (int i=0, len=expectedLines.length; i < len; i++) {    assertEquals(expectedLines[i],expectedLines[i],lines.get(i));  }}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  public void gotoFrame(String label) throws IOException {  writeCode(GOTO_LABEL);  out.writeUI16(OutStream.getStringLength(label));  out.writeString(label);}  }
class C{  public static double[] inference(double alpha,double beta,double[][] phi,int[] doc){  int K=phi.length;  int V=phi[0].length;  int[][] nw=new int[V][K];  int[] nd=new int[K];  int[] nwsum=new int[K];  int ndsum=0;  int N=doc.length;  int[] z=new int[N];  for (int n=0; n < N; n++) {    int topic=(int)(Math.random() * K);    z[n]=topic;    nw[doc[n]][topic]++;    nd[topic]++;    nwsum[topic]++;  }  ndsum=N;  for (int i=0; i < ITERATIONS; i++) {    for (int n=0; n < z.length; n++) {      int topic=z[n];      nw[doc[n]][topic]--;      nd[topic]--;      nwsum[topic]--;      ndsum--;      double[] p=new double[K];      for (int k=0; k < K; k++) {        p[k]=phi[k][doc[n]] * (nd[k] + alpha) / (ndsum + K * alpha);      }      for (int k=1; k < p.length; k++) {        p[k]+=p[k - 1];      }      double u=Math.random() * p[K - 1];      for (topic=0; topic < p.length; topic++) {        if (u < p[topic])         break;      }      nw[doc[n]][topic]++;      nd[topic]++;      nwsum[topic]++;      ndsum++;      z[n]=topic;    }  }  double[] theta=new double[K];  for (int k=0; k < K; k++) {    theta[k]=(nd[k] + alpha) / (ndsum + K * alpha);  }  return theta;}  }
class C{  public boolean match(QualifiedType node,Object other){  if (!(other instanceof QualifiedType)) {    return false;  }  QualifiedType o=(QualifiedType)other;  return (safeSubtreeMatch(node.getQualifier(),o.getQualifier()) && safeSubtreeMatch(node.getName(),o.getName()));}  }
class C{  public void showNoticesForId(String profileId) throws IOException, ServiceException {  out.println("Notices for profile id: " + profileId);  RegisterFeed feed=service.getFeed(new URL(REGISTER_FEED_PATH + "ui/" + profileId),RegisterFeed.class);  if (feed.getEntries().size() == 0) {    out.println("There are no notices for this profile");  }  int noticeIndex=1;  for (  RegisterEntry entry : feed.getEntries()) {    out.println(noticeIndex + ")" + entry.getTitle().getPlainText());    noticeIndex++;  }}  }
class C{  private static String layoutCompoundLabelImpl(JComponent c,FontMetrics fm,String text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  if (icon != null) {    iconR.width=icon.getIconWidth();    iconR.height=icon.getIconHeight();  } else {    iconR.width=iconR.height=0;  }  boolean textIsEmpty=(text == null) || text.equals("");  int lsb=0;  int rsb=0;  int gap;  View v;  if (textIsEmpty) {    textR.width=textR.height=0;    text="";    gap=0;  } else {    int availTextWidth;    gap=(icon == null) ? 0 : textIconGap;    if (horizontalTextPosition == CENTER) {      availTextWidth=viewR.width;    } else {      availTextWidth=viewR.width - (iconR.width + gap);    }    v=(c != null) ? (View)c.getClientProperty("html") : null;    if (v != null) {      textR.width=Math.min(availTextWidth,(int)v.getPreferredSpan(View.X_AXIS));      textR.height=(int)v.getPreferredSpan(View.Y_AXIS);    } else {      textR.width=SwingUtilities2.stringWidth(c,fm,text);      lsb=SwingUtilities2.getLeftSideBearing(c,fm,text);      if (lsb < 0) {        textR.width-=lsb;      }      if (textR.width > availTextWidth) {        text=SwingUtilities2.clipString(c,fm,text,availTextWidth);        textR.width=SwingUtilities2.stringWidth(c,fm,text);      }      textR.height=fm.getHeight();    }  }  if (verticalTextPosition == TOP) {    if (horizontalTextPosition != CENTER) {      textR.y=0;    } else {      textR.y=-(textR.height + gap);    }  } else   if (verticalTextPosition == CENTER) {    textR.y=(iconR.height / 2) - (textR.height / 2);  } else {    if (horizontalTextPosition != CENTER) {      textR.y=iconR.height - textR.height;    } else {      textR.y=(iconR.height + gap);    }  }  if (horizontalTextPosition == LEFT) {    textR.x=-(textR.width + gap);  } else   if (horizontalTextPosition == CENTER) {    textR.x=(iconR.width / 2) - (textR.width / 2);  } else {    textR.x=(iconR.width + gap);  }  int labelR_x=Math.min(iconR.x,textR.x);  int labelR_width=Math.max(iconR.x + iconR.width,textR.x + textR.width) - labelR_x;  int labelR_y=Math.min(iconR.y,textR.y);  int labelR_height=Math.max(iconR.y + iconR.height,textR.y + textR.height) - labelR_y;  int dx, dy;  if (verticalAlignment == TOP) {    dy=viewR.y - labelR_y;  } else   if (verticalAlignment == CENTER) {    dy=(viewR.y + (viewR.height / 2)) - (labelR_y + (labelR_height / 2));  } else {    dy=(viewR.y + viewR.height) - (labelR_y + labelR_height);  }  if (horizontalAlignment == LEFT) {    dx=viewR.x - labelR_x;  } else   if (horizontalAlignment == RIGHT) {    dx=(viewR.x + viewR.width) - (labelR_x + labelR_width);  } else {    dx=(viewR.x + (viewR.width / 2)) - (labelR_x + (labelR_width / 2));  }  textR.x+=dx;  textR.y+=dy;  iconR.x+=dx;  iconR.y+=dy;  if (lsb < 0) {    textR.x-=lsb;    textR.width+=lsb;  }  if (rsb > 0) {    textR.width-=rsb;  }  return text;}  }
class C{  public static byte[] encodeBase64Chunked(byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @NotNull default B append(char ch) throws BufferOverflowException {  BytesInternal.appendUtf8Char(this,ch);  return (B)this;}  }
class C{  @Override protected void integrityCheckParameters(MkTabEntry parentEntry,MkTabTreeNode<O> parent,int index,AbstractMTree<O,MkTabTreeNode<O>,MkTabEntry,?> mTree){  super.integrityCheckParameters(parentEntry,parent,index,mTree);  MkTabEntry entry=parent.getEntry(index);  double[] knnDistances=kNNDistances();  if (!entry.getKnnDistances().equals(knnDistances)) {    String soll=knnDistances.toString();    String ist=entry.getKnnDistances().toString();    throw new RuntimeException("Wrong knnDistances in node " + parent.getPageID() + " at index "+ index+ " (child "+ entry+ ")"+ "\nsoll: "+ soll+ ",\n ist: "+ ist);  }}  }
class C{  public NtpMessage(){  this.mode=3;  this.transmitTimestamp=(System.currentTimeMillis() / 1000.0) + 2208988800.0;}  }
class C{  private void lubPrimaryAnnotations(AnnotatedTypeMirror type1,AnnotatedTypeMirror type2,AnnotatedTypeMirror lub){  Set<? extends AnnotationMirror> lubSet=qualifierHierarchy.leastUpperBounds(type1.getAnnotations(),type2.getAnnotations());  lub.replaceAnnotations(lubSet);}  }
class C{  private URI buildWsServiceUri(String serviceId){  return UriUtils.buildPublicUri(this.host,UriUtils.buildUriPath(this.servicePrefix,serviceId));}  }
class C{  public Object invoke(String actionName,Object params[],String signature[]) throws MBeanException, ReflectionException {  if (actionName == null) {    final RuntimeException r=new IllegalArgumentException("Operation name  cannot be null");    throw new RuntimeOperationsException(r,"Exception occurred trying to invoke the operation on the MBean");  }  throw new ReflectionException(new NoSuchMethodException(actionName),"The operation with name " + actionName + " could not be found");}  }
class C{  @Provides @Config("stackdriverMaxQps") public static int provideStackdriverMaxQps(){  return 30;}  }
class C{  public void addDataPoint(double value,int series){  this.series.get(series).addDataPoint(value);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testMultipleLogsBackwardScan() throws Exception {  File logDir=prepareLogDir("testMultipleLogsBackwards");  DiskLog log=openLog(logDir,false,3000);  writeEventsToLog(log,50);  logger.info("Log file count: " + log.fileCount());  log.release();  DiskLog log2=openLog(logDir,true);  LogConnection conn2=log2.connect(true);  for (int i=49; i >= 0; i--) {    assertTrue("Looking for seqno=" + i,conn2.seek(i));    THLEvent e=conn2.next();    assertNotNull("Returned event must not be null!",e);    assertEquals("Test expected seqno",i,e.getSeqno());    assertEquals("Test expected fragno",(short)0,e.getFragno());    assertEquals("Test expected eventId",new Long(i).toString(),e.getEventId());  }  log2.release();}  }
class C{  public long timestamp(){  return ts;}  }
class C{  public boolean supportsUserTokenType(EndpointDescription endpoint,UserTokenType type){  return findUserTokenPolicy(type) != null;}  }
class C{  public TransferEntropyCalculatorMultiVariateViaCondMutualInfo(Class<ConditionalMutualInfoCalculatorMultiVariate> condMiCalcClass) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(condMiCalcClass);}  }
class C{  private void stateData(){  Log.d(TAG,"Santa is online.");  updateNavigation();  scheduleUIUpdate();  hideStatus();  setCastDisabled(mFlagDisableCast);  long time=SantaPreferences.getCurrentTime();  AbstractLaunch launchSanta=mCardAdapter.getLauncher(CardAdapter.SANTA);  if (time > mFirstDeparture && time < OFFLINE_SANTA_FINALARRIVAL) {    enableTrackerMode(true);    SantaNotificationBuilder.ScheduleNotificationNotification(this);    if (mFlagSwitchOff) {      launchSanta.setState(AbstractLaunch.STATE_DISABLED);    } else     if (time > mFinalArrival) {      launchSanta.setState(AbstractLaunch.STATE_DISABLED);      showStatus(R.string.still_trying_to_reach_santa);    } else {      launchSanta.setState(AbstractLaunch.STATE_READY);    }  } else   if (time < mFirstDeparture) {    final long notificationTime=SantaPreferences.getAdjustedTime(mFirstDeparture);    SantaNotificationBuilder.ScheduleSantaNotification(getApplicationContext(),notificationTime,NotificationConstants.NOTIFICATION_TAKEOFF);    SantaNotificationBuilder.ScheduleNotificationNotification(this);    startCountdown(mFirstDeparture);    launchSanta.setState(AbstractLaunch.STATE_LOCKED);  } else {    launchSanta.setState(AbstractLaunch.STATE_FINISHED);    stopCountdown();    enableTrackerMode(false);  }}  }
class C{  private void hideEmptyViews(){  if (titleResourceId == 0 && titleString == null) {    textViewTitle.setVisibility(View.GONE);  }  if (layoutResourceId == 0 && message == null && messageResourceId == 0) {    scrollView.setVisibility(View.GONE);  }}  }
class C{  public void add(double x,double y,double deltaX,double deltaY){  add(new VectorDataItem(x,y,deltaX,deltaY),true);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_TYPE_DEFINITION;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.411 -0500",hash_original_method="A77E98452A80882EFF084EC07221C698",hash_generated_method="E4F44393B75AC158C63D0C406E4215A4") public String query(String handle) throws IOException {  return query(false,handle);}  }
class C{  public static KeyMID fromInboundMessage(Message message){  return new KeyMID(message.getMID(),message.getSource().getAddress(),message.getSourcePort());}  }
class C{  public static boolean isJRockitVM(){  return isJVM(ORACLE_JROCKIT_JVM_NAME);}  }
class C{  public RelatedProductsRecyclerAdapter(Context context,RelatedProductsRecyclerInterface relatedProductsRecyclerInterface){  this.context=context;  this.relatedProductsRecyclerInterface=relatedProductsRecyclerInterface;  relatedProducts=new ArrayList<>();}  }
class C{  public boolean isPostConstructCalled(){  return this.postConstructCalled;}  }
class C{  static PageParameterDetector.PagePattern create(ParsedUrl url,boolean isFirstQueryParam,String queryName,String queryValue){  try {    return new QueryParamPagePattern(url,isFirstQueryParam,queryName,queryValue);  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public static void invokeStoragePreference(Activity activity){  System.out.println("StoragePreference.invokeStoragePreference: external dirs -> " + SystemUtils.getExternalFilesDirs(activity).length);  if (AndroidPlatform.saf()) {    StoragePicker.show(activity);  } else   if (activity instanceof PreferenceActivity) {    final StoragePreference storagePreference=(StoragePreference)((PreferenceActivity)activity).findPreference(Constants.PREF_KEY_STORAGE_PATH);    if (storagePreference != null) {      storagePreference.showDialog(null);    }  }}  }
class C{  public CheckedListIterator(ListIterator<E> i,Class<E> type){  this.i=i;  this.type=type;}  }
class C{  private boolean checkDepartureStagingTrack(Track departStageTrack){  if (!departStageTrack.acceptsPickupTrain(_train)) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingNotTrain"),new Object[]{departStageTrack.getName()}));    return false;  }  if (departStageTrack.getNumberRS() == 0 && _train.getTrainDepartsRouteLocation().getMaxCarMoves() > 0) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingEmpty"),new Object[]{departStageTrack.getName()}));    return false;  }  if (departStageTrack.getUsedLength() > _train.getTrainDepartsRouteLocation().getMaxTrainLength()) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingTrainTooLong"),new Object[]{departStageTrack.getName(),departStageTrack.getUsedLength(),Setup.getLengthUnit().toLowerCase(),_train.getTrainDepartsRouteLocation().getMaxTrainLength()}));    return false;  }  if (departStageTrack.getNumberCars() > _train.getTrainDepartsRouteLocation().getMaxCarMoves()) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingTooManyCars"),new Object[]{departStageTrack.getName(),departStageTrack.getNumberCars(),_train.getTrainDepartsRouteLocation().getMaxCarMoves()}));    return false;  }  if (_reqNumEngines > 0 && _reqNumEngines != departStageTrack.getNumberEngines()) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingNotEngines"),new Object[]{departStageTrack.getName(),departStageTrack.getNumberEngines(),_reqNumEngines}));    return false;  }  if ((departStageTrack.getTrainDirections() & _train.getTrainDepartsRouteLocation().getTrainDirection()) == 0) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingNotDirection"),new Object[]{departStageTrack.getName()}));    return false;  }  if (departStageTrack.getNumberEngines() > 0) {    for (    RollingStock rs : engineManager.getList()) {      Engine eng=(Engine)rs;      if (eng.getTrack() == departStageTrack) {        if (eng.getRouteLocation() != null) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepart"),new Object[]{departStageTrack.getName(),eng.getTrainName()}));          return false;        }        if (eng.getTrain() != null && eng.getTrain() != _train) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartEngineTrain"),new Object[]{departStageTrack.getName(),eng.toString(),eng.getTrainName()}));          return false;        }        if (!_train.acceptsTypeName(eng.getTypeName())) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartEngineType"),new Object[]{departStageTrack.getName(),eng.toString(),eng.getTypeName(),_train.getName()}));          return false;        }        if (!_train.getEngineModel().equals(Train.NONE) && !_train.getEngineModel().equals(eng.getModel())) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartEngineModel"),new Object[]{departStageTrack.getName(),eng.toString(),eng.getModel(),_train.getName()}));          return false;        }        if (!_train.getRoadOption().equals(Train.ALL_LOADS) && !_train.getEngineRoad().equals(Train.NONE) && !_train.getEngineRoad().equals(eng.getRoadName())) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartEngineRoad"),new Object[]{departStageTrack.getName(),eng.toString(),eng.getRoadName(),_train.getName()}));          return false;        }        if (_train.getEngineRoad().equals(Train.NONE) && !_train.acceptsRoadName(eng.getRoadName())) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartEngineRoad"),new Object[]{departStageTrack.getName(),eng.toString(),eng.getRoadName(),_train.getName()}));          return false;        }        if (!_train.acceptsOwnerName(eng.getOwner())) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartEngineOwner"),new Object[]{departStageTrack.getName(),eng.toString(),eng.getOwner(),_train.getName()}));          return false;        }        if (!_train.acceptsBuiltDate(eng.getBuilt())) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartEngineBuilt"),new Object[]{departStageTrack.getName(),eng.toString(),eng.getBuilt(),_train.getName()}));          return false;        }      }    }  }  boolean foundCaboose=false;  boolean foundFRED=false;  if (departStageTrack.getNumberCars() > 0) {    for (    RollingStock rs : carManager.getList()) {      Car car=(Car)rs;      if (car.getTrack() != departStageTrack) {        continue;      }      if (car.getKernel() != null && !car.getKernel().isLead(car)) {        continue;      }      if (car.getRouteLocation() != null) {        log.debug("Car ({}) has route location ({})",car.toString(),car.getRouteLocation().getName());        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepart"),new Object[]{departStageTrack.getName(),car.getTrainName()}));        return false;      }      if (car.getTrain() != null && car.getTrain() != _train) {        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartCarTrain"),new Object[]{departStageTrack.getName(),car.toString(),car.getTrainName()}));        return false;      }      if (!_train.acceptsTypeName(car.getTypeName())) {        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartCarType"),new Object[]{departStageTrack.getName(),car.toString(),car.getTypeName(),_train.getName()}));        return false;      }      if (!_train.acceptsRoadName(car.getRoadName())) {        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartCarRoad"),new Object[]{departStageTrack.getName(),car.toString(),car.getRoadName(),_train.getName()}));        return false;      }      if (!car.isCaboose() && !car.isPassenger() && (!car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName()) || !departStageTrack.isAddCustomLoadsEnabled() && !departStageTrack.isAddCustomLoadsAnySpurEnabled() && !departStageTrack.isAddCustomLoadsAnyStagingTrackEnabled())&& !_train.acceptsLoad(car.getLoadName(),car.getTypeName())) {        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartCarLoad"),new Object[]{departStageTrack.getName(),car.toString(),car.getLoadName(),_train.getName()}));        return false;      }      if (!_train.acceptsOwnerName(car.getOwner())) {        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartCarOwner"),new Object[]{departStageTrack.getName(),car.toString(),car.getOwner(),_train.getName()}));        return false;      }      if (!_train.acceptsBuiltDate(car.getBuilt())) {        addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartCarBuilt"),new Object[]{departStageTrack.getName(),car.toString(),car.getBuilt(),_train.getName()}));        return false;      }      if (car.getDestination() != null) {        log.debug("Car ({}) has a destination ({}, {})",car.toString(),car.getDestinationName(),car.getDestinationTrackName());        if (!_train.services(car)) {          addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingDepartCarDestination"),new Object[]{departStageTrack.getName(),car.toString(),car.getDestinationName(),_train.getName()}));          return false;        }      }      if (car.isCaboose() && (_train.getCabooseRoad().equals(Train.NONE) || _train.getCabooseRoad().equals(car.getRoadName()))) {        foundCaboose=true;      }      if (car.hasFred() && (_train.getCabooseRoad().equals(Train.NONE) || _train.getCabooseRoad().equals(car.getRoadName()))) {        foundFRED=true;      }    }  }  if ((_train.getRequirements() & Train.CABOOSE) == Train.CABOOSE && !foundCaboose) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingNoCaboose"),new Object[]{departStageTrack.getName(),_train.getCabooseRoad()}));    return false;  }  if ((_train.getRequirements() & Train.FRED) == Train.FRED && !foundFRED) {    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildStagingNoCarFRED"),new Object[]{departStageTrack.getName(),_train.getCabooseRoad()}));    return false;  }  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrainCanDepartTrack"),new Object[]{_train.getName(),departStageTrack.getName()}));  return true;}  }
class C{  public FBTpbMapper(String mappingResource,ClassLoader cl) throws FBResourceException {  try {    ResourceBundle res=ResourceBundle.getBundle(mappingResource,Locale.getDefault(),cl);    Map<String,String> mapping=new HashMap<>();    Enumeration<String> en=res.getKeys();    while (en.hasMoreElements()) {      String key=en.nextElement();      String value=res.getString(key);      mapping.put(key,value);    }    processMapping(mapping);  } catch (  MissingResourceException mrex) {    throw new FBResourceException("Cannot load TPB mapping." + mrex.getMessage());  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  public boolean skipPast(String to) throws JSONException {  boolean b;  char c;  int i;  int j;  int offset=0;  int length=to.length();  char[] circle=new char[length];  for (i=0; i < length; i+=1) {    c=next();    if (c == 0) {      return false;    }    circle[i]=c;  }  for (; ; ) {    j=offset;    b=true;    for (i=0; i < length; i+=1) {      if (circle[j] != to.charAt(i)) {        b=false;        break;      }      j+=1;      if (j >= length) {        j-=length;      }    }    if (b) {      return true;    }    c=next();    if (c == 0) {      return false;    }    circle[offset]=c;    offset+=1;    if (offset >= length) {      offset-=length;    }  }}  }
class C{  String removeExtension(String filename){  int dotIndex=filename.lastIndexOf(".");  return (dotIndex == -1) ? filename : filename.substring(0,dotIndex);}  }
class C{  @Override protected List<FrameworkMethod> computeTestMethods(){  List<FrameworkMethod> result=new ArrayList<FrameworkMethod>();  if (!skip) {    Iterator<FrameworkMethod> methods=super.computeTestMethods().iterator();    while (methods.hasNext()) {      FrameworkMethod method=methods.next();      if (method.getAnnotation(JsfTest.class) != null) {        JsfTest jsfTest=method.getAnnotation(JsfTest.class);        boolean excludeFlag=false;        if (jsfTest.excludes().length > 0) {          JsfServerExclude exclude=JsfServerExclude.fromString(System.getProperty("jsf.serverString"));          if (exclude != null) {            for (            JsfServerExclude current : jsfTest.excludes()) {              if (current.equals(exclude)) {                excludeFlag=true;              }            }          }        }        if (!excludeFlag && System.getProperty("jsf.version") != null) {          try {            JsfVersion serverVersion=JsfVersion.fromString(System.getProperty("jsf.version"));            if (serverVersion.ordinal() < jsfTest.value().ordinal()) {            } else {              result.add(method);            }          } catch (          IllegalArgumentException exception) {            result.add(method);          }        }      } else {        result.add(method);      }    }  }  return result;}  }
class C{  void doScroll(MotionEvent event,int rowsDown){  boolean up=rowsDown < 0;  int amount=Math.abs(rowsDown);  for (int i=0; i < amount; i++) {    if (mEmulator.isMouseTrackingActive()) {      sendMouseEventCode(event,up ? TerminalEmulator.MOUSE_WHEELUP_BUTTON : TerminalEmulator.MOUSE_WHEELDOWN_BUTTON,true);    } else     if (mEmulator.isAlternateBufferActive()) {      handleKeyCode(up ? KeyEvent.KEYCODE_DPAD_UP : KeyEvent.KEYCODE_DPAD_DOWN,0);    } else {      mTopRow=Math.min(0,Math.max(-(mEmulator.getScreen().getActiveTranscriptRows()),mTopRow + (up ? -1 : 1)));      if (!awakenScrollBars())       invalidate();    }  }}  }
class C{  public JavaCompletionProposalImpl(String replacementString,int replacementOffset,int replacementLength,Images image,StyledString displayString,int relevance,boolean inJavadoc,JavaContentAssistInvocationContext invocationContext){  super(invocationContext);  Assert.isNotNull(replacementString);  Assert.isTrue(replacementOffset >= 0);  Assert.isTrue(replacementLength >= 0);  setReplacementString(replacementString);  setReplacementOffset(replacementOffset);  setReplacementLength(replacementLength);  setImage(image);  setStyledDisplayString(displayString == null ? new StyledString(replacementString) : displayString);  setRelevance(relevance);  setCursorPosition(replacementString.length());  setInJavadoc(inJavadoc);  setSortString(displayString == null ? replacementString : displayString.getString());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.JS_DOC_NODE__MARKERS:    return ((InternalEList<?>)getMarkers()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isOutlineVisible(){  return this.outlineVisible;}  }
class C{  protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationConfig config,JavaType type,BeanProperty property) throws JsonMappingException {synchronized (_incompleteDeserializers) {    JsonDeserializer<Object> deser=_findCachedDeserializer(type);    if (deser != null) {      return deser;    }    int count=_incompleteDeserializers.size();    if (count > 0) {      deser=_incompleteDeserializers.get(type);      if (deser != null) {        return deser;      }    }    try {      return _createAndCache2(config,type,property);    }  finally {      if (count == 0 && _incompleteDeserializers.size() > 0) {        _incompleteDeserializers.clear();      }    }  }}  }
class C{  @SuppressWarnings("unchecked") protected void onUpdateComplete(int token,Object cookie,int result){  ((AsyncProviderCommand<ArgType>)cookie).onCompletion(token,result);}  }
class C{  public SearchPanel(LayoutType layout,boolean regExp,String prefix,boolean incremental,String button){  super();  m_LayoutType=layout;  m_RegExpEnabled=regExp;  m_Prefix=prefix;  m_ButtonCaption=(incremental ? null : button);  m_Incremental=incremental;  initGUI();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.607 -0500",hash_original_method="365AF52E63589F5A5C820D079E688641",hash_generated_method="527320AD9F0FCCD508946053C0EEB737") public final boolean isDither(){  return 1 == ((getFlags() & DITHER_FLAG) + 0);}  }
class C{  public static boolean hasReadyMobileRadio(Context context){  if (TEST_RADIOS) {    return SystemProperties.get(TEST_RADIOS_PROP).contains("mobile");  }  final ConnectivityManager conn=ConnectivityManager.from(context);  return conn.isNetworkSupported(TYPE_MOBILE) && hasSubscription(context);}  }
class C{  public XMLDocument(Reader reader) throws Exception {  this();  read(reader);}  }
class C{  private void generateComplete(){  if (progressWindow != null) {    progressWindow.dispose();    progressWindow=null;  }  tabbedPane.setSelectedIndex(1);  ProcessInfoUtil.setLogFromDB(genForm.getProcessInfo());  StringBuffer iText=new StringBuffer();  iText.append("<b>").append(genForm.getProcessInfo().getSummary()).append("</b><br>(").append(Msg.getMsg(Env.getCtx(),genForm.getTitle())).append(")<br>").append(genForm.getProcessInfo().getLogInfo(true));  info.setContent(iText.toString());  int[] ids=genForm.getProcessInfo().getIDs();  if (ids == null || ids.length == 0)   return;  log.config("PrintItems=" + ids.length);  m_ids=ids;  Clients.response(new AuEcho(this,"onAfterProcess",null));}  }
class C{  public UDWebView loadUrl(String url){  if (!TextUtils.isEmpty(url)) {    final LVWebView view=this.getView();    if (view != null) {      view.loadUrl(url);    }  }  return this;}  }
class C{  public boolean isFlavorRemoteObjectType(){  return isRepresentationClassRemote() && isRepresentationClassSerializable() && isMimeTypeEqual(javaRemoteObjectMimeType);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.874 -0400",hash_original_method="0A51AA436E84FC1839627DBD91C415A7",hash_generated_method="A0CB6D6463B2DF102D642EA511770E72") public static IOFileFilter and(IOFileFilter... filters){  return new AndFileFilter(toList(filters));}  }
class C{  public static Map<String,Index> indexMapFromEntity(Entity entity){  final Map<String,Index> indexMap=new HashMap<>((int)(entity.getIndexes().size() * 1.33F));  for (  Index index : entity.getIndexes()) {    indexMap.put(index.getName(),index);  }  return indexMap;}  }
class C{  @Override protected void beforeShow(){  super.beforeShow();  m_Current=m_Editor.getValue();  if (m_Editor.getCustomEditor() instanceof GOEPanel)   m_Result=CANCEL_OPTION; else   m_Result=APPROVE_OPTION;}  }
class C{  protected Object readResolve() throws ObjectStreamException {  ClusterGroupAdapter parent=(ClusterGroupAdapter)super.readResolve();  return new AgeClusterGroup(parent,isOldest);}  }
class C{  public void test_before_after(){  Calendar early=Calendar.getInstance();  Calendar late=Calendar.getInstance();  early.set(2008,3,20,17,28,12);  late.set(2008,3,20,17,28,22);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2008,3,20,17,18,12);  late.set(2008,3,20,17,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2008,3,20,17,28,12);  late.set(2008,3,20,27,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2008,3,10,17,28,12);  late.set(2008,3,20,17,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2008,2,20,17,28,12);  late.set(2008,3,20,17,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));  early.set(2007,3,20,17,28,12);  late.set(2008,3,20,17,28,12);  assertTrue(early.before(late));  assertFalse(early.before(early));  assertFalse(late.before(early));  assertTrue(late.after(early));  assertFalse(late.after(late));  assertFalse(early.after(late));}  }
class C{  public final MutableDouble3D normalize(){  final double invertedlen=1.0 / Math.sqrt(x * x + y * y + z * z);  if (invertedlen == infinity || invertedlen == -infinity || invertedlen == 0 || invertedlen != invertedlen)   throw new ArithmeticException("" + this + " length is "+ Math.sqrt(x * x + y * y + z * z)+ ", cannot normalize");  x=x * invertedlen;  y=y * invertedlen;  z=z * invertedlen;  return this;}  }
class C{  public static Map makeCallerChain(Object payload,Class... ifaces) throws OpenDataException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, Exception, ClassNotFoundException {  CompositeType rt=new CompositeType("a","b",new String[]{"a"},new String[]{"a"},new OpenType[]{javax.management.openmbean.SimpleType.INTEGER});  TabularType tt=new TabularType("a","b",rt,new String[]{"a"});  TabularDataSupport t1=new TabularDataSupport(tt);  TabularDataSupport t2=new TabularDataSupport(tt);  AdvisedSupport as=new AdvisedSupport();  as.setTarget(payload);  InvocationHandler delegateInvocationHandler=(InvocationHandler)Reflections.getFirstCtor("org.springframework.aop.framework.JdkDynamicAopProxy").newInstance(as);  InvocationHandler cdsInvocationHandler=Gadgets.createMemoizedInvocationHandler(Gadgets.createMap("getCompositeType",rt));  CompositeInvocationHandlerImpl invocationHandler=new CompositeInvocationHandlerImpl();  invocationHandler.addInvocationHandler(CompositeData.class,cdsInvocationHandler);  invocationHandler.setDefaultHandler(delegateInvocationHandler);  final CompositeData cdsProxy=Gadgets.createProxy(invocationHandler,CompositeData.class,ifaces);  JSONObject jo=new JSONObject();  Map m=new HashMap();  m.put("t",cdsProxy);  Reflections.setFieldValue(jo,"properties",m);  Reflections.setFieldValue(jo,"properties",m);  Reflections.setFieldValue(t1,"dataMap",jo);  Reflections.setFieldValue(t2,"dataMap",jo);  return Gadgets.makeMap(t1,t2);}  }
class C{  @Override public String storeArrived(String clientHandle,String topic,MqttMessage message){  db=mqttDb.getWritableDatabase();  traceHandler.traceDebug(TAG,"storeArrived{" + clientHandle + "}, {"+ message.toString()+ "}");  byte[] payload=message.getPayload();  int qos=message.getQos();  boolean retained=message.isRetained();  boolean duplicate=message.isDuplicate();  ContentValues values=new ContentValues();  String id=java.util.UUID.randomUUID().toString();  values.put(MqttServiceConstants.MESSAGE_ID,id);  values.put(MqttServiceConstants.CLIENT_HANDLE,clientHandle);  values.put(MqttServiceConstants.DESTINATION_NAME,topic);  values.put(MqttServiceConstants.PAYLOAD,payload);  values.put(MqttServiceConstants.QOS,qos);  values.put(MqttServiceConstants.RETAINED,retained);  values.put(MqttServiceConstants.DUPLICATE,duplicate);  values.put(MTIMESTAMP,System.currentTimeMillis());  try {    db.insertOrThrow(ARRIVED_MESSAGE_TABLE_NAME,null,values);  } catch (  SQLException e) {    traceHandler.traceException(TAG,"onUpgrade",e);    throw e;  }  int count=getArrivedRowCount(clientHandle);  traceHandler.traceDebug(TAG,"storeArrived: inserted message with id of {" + id + "} - Number of messages in database for this clientHandle = "+ count);  return id;}  }
class C{  public static boolean isNPC(String name) throws UserDoesNotExistException {  User user=getUserByName(name);  if (user == null) {    throw new UserDoesNotExistException(name);  }  return user.isNPC();}  }
class C{  public RenameTerrainVisualPanel1(){  initComponents();}  }
class C{  public void add(int i){  requestFreeSize(4);  U.intToBytes(i,data,size);  size+=4;}  }
class C{  public void readData(DataInput din) throws IOException {  function=din.readUnsignedShort();  data=(short)(din.readShort() & 0xFFFF);}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  if (m_inCData) {    cdata(ch,start,length);    return;  }  String s=new String(ch,start,length);  Node childNode;  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {    ((Text)childNode).appendData(s);  } else {    Text text=m_doc.createTextNode(s);    append(text);  }}  }
class C{  private Operation buildGetAllImagesQuery(){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(ImageService.State.class));  QueryTask.Query stateClause=new QueryTask.Query().setTermPropertyName("state").setTermMatchValue(ImageState.READY.toString());  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.query.addBooleanClause(stateClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return ((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true));}  }
class C{  protected void handleSpecialSubstitution(String replace,String replaceWith,int startPos,String description){  super.handleSpecialSubstitution(replace,replaceWith,startPos,description);  if (replace.equals("<dictionary>")) {    if (replaceWith.charAt(0) == '(') {      error("Dictionary group can't be enclosed in (",startPos,description);    }    dictionaryExpression=replaceWith;    dictionaryChars=CharSet.parseString(replaceWith);  }}  }
class C{  public static double cdf(double val,double alpha,double beta){  return regularizedIncBeta(val,alpha,beta);}  }
class C{  public void writeComment(String reviewCommitHash,String commentData) throws GitClientException {  ReviewComment comment=new ReviewComment();  comment.setDescription(commentData);  writeComment(reviewCommitHash,comment);}  }
class C{  void doReplicate(int x,int y,int tx,int ty){  Creature from=getCreature(x,y);  Occupant to=getOccupant(tx,ty);  creatureCheck(x,y,"replicate");  collisionCheck(x,y,tx,ty,"replicate");  Creature newCreature=from.replicate();  createCreature(tx,ty,newCreature);  getInLine(x,y);}  }
class C{  private void startBackgroundNodeRepairTask(){  this.dbMgr.start();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static double intersectRayPlane(double originX,double originY,double originZ,double dirX,double dirY,double dirZ,double a,double b,double c,double d,double epsilon){  double denom=a * dirX + b * dirY + c * dirZ;  if (denom < 0.0) {    double t=-(a * originX + b * originY + c * originZ + d) / denom;    if (t >= 0.0)     return t;  }  return -1.0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected void onSocketTimeOut(SocketTimeoutException e) throws Exception {  String message="Timed out waiting for JDP packet. Should arrive within " + connection.pauseInSeconds + " seconds, but waited for "+ timeOut+ " seconds.";  log.severe(message);  throw new Exception(message,e);}  }
class C{  public void logVelocityMessage(int level,String message){switch (level) {case LogSystem.WARN_ID:    logger.warn(message);  break;case LogSystem.INFO_ID:logger.info(message);break;case LogSystem.DEBUG_ID:logger.debug(message);break;case LogSystem.ERROR_ID:logger.error(message);break;default :logger.debug(message);break;}}  }
class C{  private void validateCGRemoved(ConsistencyGroupUID cgToValidate,String cgName) throws RecoverPointException {  try {    logger.info(String.format("Validating that RP CG [%s] (%d) has been removed.",cgName,cgToValidate.getId()));    int cgDeleteAttempt=0;    while (cgDeleteAttempt < MAX_WAIT_FOR_RP_DELETE_ATTEMPTS) {      boolean cgDeleted=true;      logger.info(String.format("Validation attempt %d of %d",cgDeleteAttempt + 1,MAX_WAIT_FOR_RP_DELETE_ATTEMPTS));      List<ConsistencyGroupUID> allCGs=functionalAPI.getAllConsistencyGroups();      for (      ConsistencyGroupUID cgUID : allCGs) {        if (cgToValidate.getId() == cgUID.getId()) {          logger.info(String.format("RP CG [%s] (%d) has not been removed yet. Will wait and check again...",cgName,cgToValidate.getId()));          waitForRpOperation();          cgDeleteAttempt++;          cgDeleted=false;          if (cgDeleteAttempt == (MAX_WAIT_FOR_RP_DELETE_ATTEMPTS / 2)) {            this.reconnect();          }          break;        }      }      if (cgDeleted) {        logger.info(String.format("RP CG [%s] (%d) has been removed.",cgName,cgToValidate.getId()));        break;      }    }    if (cgDeleteAttempt >= MAX_WAIT_FOR_RP_DELETE_ATTEMPTS) {      logger.error(String.format("Max attempts reached waiting for RP CG [%s] (%d) to be removed from RP. " + "Please check RP System. Delete operation will continue...",cgName,cgToValidate.getId()));      throw RecoverPointException.exceptions.failedToDeleteConsistencyGroup(cgName,new Exception("Max attempts reached waiting for RP CG to be removed from RP."));    }  } catch (  Exception e) {    logger.error(String.format("Exception hit while waiting for RP CG [%s] to be removed.",cgName));    throw RecoverPointException.exceptions.failedToDeleteConsistencyGroup(cgName,e);  }}  }
class C{  @Override protected Object convertToType(final Class targetType,final Object value) throws Exception {  Class sourceType=value.getClass();  if (value instanceof java.sql.Timestamp) {    java.sql.Timestamp timestamp=(java.sql.Timestamp)value;    long timeInMillis=timestamp.getTime() / 1000 * 1000;    timeInMillis+=timestamp.getNanos() / 1000000;    return this.toDate(targetType,timeInMillis);  }  if (value instanceof Date) {    Date date=(Date)value;    return this.toDate(targetType,date.getTime());  }  if (value instanceof Calendar) {    Calendar calendar=(Calendar)value;    return this.toDate(targetType,calendar.getTime().getTime());  }  if (value instanceof Long) {    Long longObj=(Long)value;    return this.toDate(targetType,longObj.longValue());  }  String stringValue=value.toString().trim();  if (stringValue.length() == 0) {    return this.handleMissing(targetType);  }  if (this.useLocaleFormat) {    Calendar calendar=null;    if (this.patterns != null && this.patterns.length > 0) {      calendar=this.parse(sourceType,targetType,stringValue);    } else {      DateFormat format=this.getFormat(this.locale,this.timeZone);      calendar=this.parse(sourceType,targetType,stringValue,format);    }    if (Calendar.class.isAssignableFrom(targetType)) {      return calendar;    } else {      return this.toDate(targetType,calendar.getTime().getTime());    }  }  return this.toDate(targetType,stringValue);}  }
class C{  private void initializeDownloadProgress(String version,long versionSize){  _coordinator.setTargetInfo(new DownloadingInfo(version,versionSize));  for (  Site site : drUtil.listSites()) {    for (    String nodeId : _coordinator.getAllNodes(site.getUuid())) {      _coordinator.setNodeGlobalScopeInfo(new DownloadingInfo(version,versionSize),site.getUuid(),DOWNLOADINFO_KIND,nodeId);    }  }}  }
class C{  public ProjectComparisonEntry compareModules(TModule module,String implementationID,final boolean includePolyfills){  Optional<? extends IN4JSProject> opt=n4jsCore.findProject(module.eResource().getURI());  if (!opt.isPresent()) {    return null;  }  IN4JSProject project=opt.get();  IN4JSProject implProject=null;  IN4JSProject apiProject=null;  TModule apiModule=null;  TModule apiImplModule=null;  if (!project.getImplementationId().isPresent()) {    final ApiImplMapping mapping=ApiImplMapping.of(n4jsCore);    implProject=mapping.getImpl(project.getProjectId(),implementationID);    if (implProject == null) {      return null;    }    apiProject=project;    apiModule=module;    URI impUri=projectUtils.findArtifact(implProject,apiModule.getQualifiedName(),Optional.of(N4JSGlobals.N4JS_FILE_EXTENSION));    if (impUri != null) {      IResourceDescriptions xtextIndex=n4jsCore.getXtextIndex(module.eResource().getResourceSet());      IResourceDescription resourceDescription=xtextIndex.getResourceDescription(impUri);      if (resourceDescription != null) {        apiImplModule=n4jsCore.loadModuleFromIndex(module.eResource().getResourceSet(),resourceDescription,false);      } else {        if (logger.isDebugEnabled()) {          logger.debug("...ouch nothing in index for " + impUri);        }        Resource implResource=module.eResource().getResourceSet().getResource(impUri,true);        apiImplModule=(TModule)implResource.getContents().get(1);        if (logger.isDebugEnabled()) {          logger.debug("TModule loaded from Resource: " + apiImplModule);        }      }    } else {      if (logger.isDebugEnabled()) {        logger.debug("No implementation given. For " + apiModule.getQualifiedName());      }    }  } else {    if (implementationID.equals(project.getImplementationId().get())) {      implProject=project;      apiImplModule=module;      ImmutableList<? extends IN4JSProject> apiProjects=implProject.getImplementedProjects();      labelA:       for (      IN4JSProject ap : apiProjects) {        URI apiURI=projectUtils.findArtifact(ap,apiImplModule.getQualifiedName(),Optional.of(N4JSGlobals.N4JSD_FILE_EXTENSION));        if (apiURI != null) {          IResourceDescriptions xtextIndex=n4jsCore.getXtextIndex(apiImplModule.eResource().getResourceSet());          IResourceDescription resourceDescription=xtextIndex.getResourceDescription(apiURI);          apiModule=n4jsCore.loadModuleFromIndex(apiImplModule.eResource().getResourceSet(),resourceDescription,false);          if (apiModule != null)           break labelA;        }      }    } else {      return null;    }  }  if (apiModule != null) {    return compareModules(apiProject,apiModule,implProject,apiImplModule,includePolyfills);  } else {    return null;  }}  }
class C{  public static void removeSelectionHandleFrom(final PNode node){  if (node == null) {    throw new IllegalArgumentException("node must not be null");  }  Collection handlesToRemove=new ArrayList();  for (Iterator i=node.getChildrenIterator(); i.hasNext(); ) {    PNode n=(PNode)i.next();    if (n instanceof SelectionHandle) {      handlesToRemove.add(n);    }  }  node.removeChildren(handlesToRemove);}  }
class C{  public void addConnectionListener(ConnectionListener l){  m_ConnectionPanel.addConnectionListener(l);}  }
class C{  public Cache(int pref_size){  this(pref_size,9);}  }
class C{  public static void printStackTrace(SQLException e,PrintWriter pw){  SQLException next=e;  while (next != null) {    next.printStackTrace(pw);    next=next.getNextException();    if (next != null) {      pw.println("Next SQLException:");    }  }}  }
class C{  private boolean isMonthly(){  return MONTHLY.equalsIgnoreCase(this.executionWindowType);}  }
class C{  public void test(){  final HttpDiceRollerDialog dialog=new HttpDiceRollerDialog(getFocusedFrame(),6,1,"Test",m_remoteDiceServer,"test-roll");  dialog.setTest();  dialog.roll();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_FINAL:      return TypesPackage.TCLASSIFIER___IS_FINAL;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == SyntaxRelatedTElement.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void saveOffsets(Context context){  String str="";  for (  Map.Entry<Integer,Long> entry : _monitor.getOffsets().entrySet())   str+=entry.getKey() + " " + entry.getValue()+ ",";  Utils.saveString(PREF_OFFSETS,str,context);}  }
class C{  Script(){}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public static void ICONST_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ICONST_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  @Override public void allocateNew(int valueCount){  final int size=getSizeFromCount(valueCount);  allocateBytes(size);}  }
class C{  public SmellSource(final double[] distalstim,final DecayFunction decay,final double dispersion,final double[] location){  this.stimulusVector=distalstim;  this.decayFunction=decay;  this.stimulusDispersion=dispersion;  this.location=location;}  }
class C{  public static void show(Context context){  if (context != null) {    InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    imm.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT,0);  } else {    Log.w(TAG,"show called with null context: " + context);  }}  }
class C{  public static String readStream(InputStream in){  BufferedReader reader=new BufferedReader(new InputStreamReader(in));  StringBuilder sb=new StringBuilder();  String line=null;  try {    while ((line=reader.readLine()) != null) {      sb.append(line + "\n");    }  } catch (  IOException e) {    Log.e(MainActivity.class.getSimpleName(),"Error reading stream",e);  } finally {    try {      in.close();    } catch (    IOException e) {    }    try {      reader.close();    } catch (    IOException e) {    }  }  return sb.toString();}  }
class C{  @Override public Object create(String name){  Object o=nameToPrototypeMap.get(name);  if (o == null) {    throw new IllegalArgumentException("Storable name not known to factory: " + name);  }  if (o instanceof Class) {    try {      return ((Class)o).newInstance();    } catch (    Exception e) {      IllegalArgumentException error=new IllegalArgumentException("Storable class not instantiable by factory: " + name);      error.initCause(e);      throw error;    }  } else {    try {      return o.getClass().getMethod("clone",(Class[])null).invoke(o,(Object[])null);    } catch (    Exception e) {      IllegalArgumentException error=new IllegalArgumentException("Storable prototype not cloneable by factory. Name: " + name);      error.initCause(e);      throw error;    }  }}  }
class C{  private void translateMap(Map map){  for (  MapLayer layer : map) {    translateLayer(layer);  }}  }
class C{  @Override public void executeQuery(boolean mustExecuteOnMaster,ExecutionResult executionResult,final String sql,int resultSetScrollType) throws QueryException {  cmdPrologue();  try {    writer.send(sql,Packet.COM_QUERY);    getResult(executionResult,resultSetScrollType,false,true);  } catch (  QueryException queryException) {    throw addQueryInfo(sql,queryException);  }catch (  MaxAllowedPacketException e) {    if (e.isMustReconnect())     connect();    throw new QueryException("Could not send query: " + e.getMessage(),-1,INTERRUPTED_EXCEPTION.getSqlState(),e);  }catch (  IOException e) {    throw new QueryException("Could not send query: " + e.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),e);  }}  }
class C{  public static Atom findAsciiAtom(String str){  return findOrCreate(null,false,str);}  }
class C{  public CandiesProcessor(File workingDir,String classPath,File extractedCandiesJavascriptDir){  this.workingDir=workingDir;  this.classPath=(classPath == null ? System.getProperty("java.class.path") : classPath);  String[] cp=this.classPath.split(File.pathSeparator);  int[] indices=new int[0];  for (int i=0; i < cp.length; i++) {    if (cp[i].replace('\\','/').matches(".*org/jsweet/lib/.*-testbundle/.*/.*-testbundle-.*\\.jar")) {      logger.warn("candies processor ignores classpath entry: " + cp[i]);      indices=ArrayUtils.add(indices,i);    }  }  cp=ArrayUtils.removeAll(cp,indices);  this.classPath=StringUtils.join(cp,File.pathSeparator);  logger.info("candies processor classpath: " + this.classPath);  candiesSourceDir=new File(workingDir,CANDIES_SOURCES_DIR_NAME);  candiesProcessedDir=new File(workingDir,CANDIES_PROCESSED_DIR_NAME);  candiesStoreFile=new File(workingDir,CANDIES_STORE_FILE_NAME);  candiesTsdefsDir=new File(workingDir,CANDIES_TSDEFS_DIR_NAME);  logger.debug("processed classes dir: " + getCandiesProcessedDir() + " - "+ getCandiesProcessedDir().getAbsolutePath());  setCandiesJavascriptOutDir(extractedCandiesJavascriptDir);}  }
class C{  @Override public boolean isOpen(){  return in != null || out != null;}  }
class C{  public void emitDirect(int taskId,Collection<Tuple> anchors,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,anchors,tuple);}  }
class C{  public StartEmbedServerScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  @Override public void updated(Dictionary<String,?> properties) throws ConfigurationException {  LOGGER.fine("Updating configuration of managed server instance");  if (isRunning()) {    stop();  }  NetworkConfig networkConfig=NetworkConfig.createStandardWithoutFile();  if (properties != null) {    for (Enumeration<String> allKeys=properties.keys(); allKeys.hasMoreElements(); ) {      String key=allKeys.nextElement();      networkConfig.set(key,properties.get(key));    }  }  managedServer=serverFactory.newServer(networkConfig);  int securePort=networkConfig.getInt(NetworkConfig.Keys.COAP_SECURE_PORT);  if (securePort > 0) {    Endpoint secureEndpoint=endpointFactory.getSecureEndpoint(networkConfig,new InetSocketAddress((InetAddress)null,securePort));    if (secureEndpoint != null) {      LOGGER.fine("Adding secure endpoint on address " + secureEndpoint.getAddress());      managedServer.addEndpoint(secureEndpoint);    } else {      LOGGER.warning("Secure endpoint has been configured in server properties but EndpointFactory does not support creation of secure Endpoints");    }  }  managedServer.start();  running=true;  resourceTracker=new ServiceTracker<Resource,Resource>(context,Resource.class.getName(),this);  resourceTracker.open();}  }
class C{  @Override public void detachSingleClone(StorageSystem storageSystem,URI cloneVolumeURI,TaskCompleter taskCompleter){  URI sourceVolumeURI=null;  try {    Volume targetVolume=dbClient.queryObject(Volume.class,cloneVolumeURI);    sourceVolumeURI=targetVolume.getAssociatedSourceVolume();    Volume sourceVolume=dbClient.queryObject(Volume.class,sourceVolumeURI);    hdsProtectionOperations.deleteShadowImagePair(storageSystem,sourceVolume,targetVolume);    hdsProtectionOperations.removeDummyLunPath(storageSystem,cloneVolumeURI);    ReplicationUtils.removeDetachedFullCopyFromSourceFullCopiesList(targetVolume,dbClient);    targetVolume.setReplicaState(ReplicationState.DETACHED.name());    targetVolume.setAssociatedSourceVolume(NullColumnValueGetter.getNullURI());    dbClient.persistObject(targetVolume);    if (taskCompleter != null) {      taskCompleter.ready(dbClient);    }  } catch (  Exception e) {    String errorMsg=String.format(DETACH_ERROR_MSG_FORMAT,cloneVolumeURI,sourceVolumeURI);    log.error(errorMsg,e);    ServiceError serviceError=DeviceControllerErrors.hds.methodFailed("detachSingleClone",e.getMessage());    if (taskCompleter != null) {      taskCompleter.error(dbClient,serviceError);    }  }}  }
class C{  private String fieldsStringPretty(int level){  if (level > Config.v().VA_PRINTING_LEVEL)   return "<additional depth not shown>";  if (this.invalidated) {    return INVALIDATED;  } else {    StringBuffer buf=new StringBuffer();    String indent="\n" + VAUtils.indent(level);    boolean firstField=true;    for (    SootField sootField : getFieldsToDisplay(this.getSootClass())) {      Set<VAModel> vaModels=this.getFieldVAModels(sootField);      if (vaModels == null || vaModels.size() > 0) {        if (firstField)         firstField=false; else         buf.append(",");        buf.append(indent);        buf.append(sootField.getName());        buf.append(": ");        if (vaModels == null) {          buf.append(INVALIDATED);        } else {          boolean firstValue=true;          for (          VAModel vaModel : vaModels) {            if (vaModel != null) {              if (firstValue)               firstValue=false; else               buf.append(",");              if (this == vaModel) {                buf.append("<itself>");              } else {                buf.append(vaModel.toStringPretty(level + 1));              }            }          }        }      }    }    return buf.toString();  }}  }
class C{  public String toString(){  return "" + value;}  }
class C{  public void propagateSwtBackground(final Component component,final Color background,final boolean preserveDefaults){  assert EventQueue.isDispatchThread();  assert component != null;  ResourceConverter converter=ResourceConverter.getInstance();  java.awt.Color bg=converter.convertColor(background);  if (!bg.equals(component.getBackground()) || !preserveDefaults) {    component.setBackground(bg);  }}  }
class C{  @Nullable public Map<String,String> updatedMeta(){  return meta;}  }
class C{  public static String convertFileName(String name,int maxBytes,Charset charSet) throws CharacterCodingException {  if (maxBytes <= 0) {    throw new IllegalArgumentException("maxBytes must be > 0");  }  name=I18NConvert.instance().compose(name);  if (name.length() > maxBytes || name.getBytes().length > maxBytes) {    int extStart=name.lastIndexOf('.');    if (extStart == -1) {      name=getPrefixWithMaxBytes(name,maxBytes,charSet);    } else {      int extLength=name.length() - extStart;      int extEnd=extLength > 11 ? extStart + 11 : name.length();      byte[] extension=getMaxBytes(name.substring(extStart,extEnd),16,charSet);      try {        if (extension.length >= maxBytes - 10) {          name=getPrefixWithMaxBytes(name,maxBytes,charSet);        } else {          name=getPrefixWithMaxBytes(name,maxBytes - extension.length,charSet) + new String(extension,charSet.name());        }      } catch (      UnsupportedEncodingException uee) {        throw new RuntimeException("Could not handle string",uee);      }    }  }  for (int i=0; i < ILLEGAL_CHARS_ANY_OS.length; i++)   name=name.replace(ILLEGAL_CHARS_ANY_OS[i],'_');  if (OSUtils.isWindows() || OSUtils.isOS2()) {    for (int i=0; i < ILLEGAL_CHARS_WINDOWS.length; i++)     name=name.replace(ILLEGAL_CHARS_WINDOWS[i],'_');  } else   if (OSUtils.isLinux() || OSUtils.isSolaris()) {    for (int i=0; i < ILLEGAL_CHARS_UNIX.length; i++)     name=name.replace(ILLEGAL_CHARS_UNIX[i],'_');  } else   if (OSUtils.isMacOSX()) {    for (int i=0; i < ILLEGAL_CHARS_MACOS.length; i++)     name=name.replace(ILLEGAL_CHARS_MACOS[i],'_');  }  return name;}  }
class C{  public void printRecords(final Iterable<?> values) throws IOException {  for (  final Object value : values) {    if (value instanceof Object[]) {      this.printRecord((Object[])value);    } else     if (value instanceof Iterable) {      this.printRecord((Iterable<?>)value);    } else {      this.printRecord(value);    }  }}  }
class C{  public LabelNode gotoLabel(final LabelNode l){  Instantiation owner=findOwner(instructions.indexOf(l));  return owner.rangeTable.get(l);}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  void doExport(final JobStatusListener statusListener,final String imageExportDescriptorName,final CsvExportDescriptor imageExportDescriptor,final String fileToExport) throws Exception {  final Logger log=ShopCodeContext.getLog(this);  final String msgInfoImp=MessageFormat.format("export file : {0}",fileToExport);  statusListener.notifyMessage(msgInfoImp);  log.info(msgInfoImp);  final String select=imageExportDescriptor.getSelectSql();  String info=MessageFormat.format("start images export with {0} path using {1}",imageExportDescriptor.getSelectSql(),imageExportDescriptorName);  statusListener.notifyMessage(info);  log.info(info);  for (  final ImageExportDomainObjectStrategy domainStrategy : strategies) {    if (domainStrategy.supports(select)) {      domainStrategy.doImageExport(statusListener,fileToExport);    }  }}  }
class C{  public void disable(Capability c){  m_Capabilities.disable(c);}  }
class C{  public Builder(){}  }
class C{  public static Map<String,List<Double>> parseDemand(String demandFile){  BufferedReader br=IOUtils.getBufferedReader(demandFile);  Map<String,List<Double>> orderMap=new HashMap<String,List<Double>>();  try {    br.readLine();    String input;    int i=1;    while ((input=br.readLine()) != null) {      String[] array=input.split(",");      String customer=array[0];      double longi=Double.parseDouble(array[1]);      double lati=Double.parseDouble(array[2]);      String product=array[3];      double mass=Double.parseDouble(array[4]);      double sale=Double.parseDouble(array[5]);      double duration=Double.parseDouble(array[6]);      double start=Double.parseDouble(array[7]);      double end=Double.parseDouble(array[8]);      List<Double> list=new ArrayList<Double>();      if (orderMap.containsKey(customer)) {        List<Double> tempList=orderMap.get(customer);        orderMap.get(customer).set(2,tempList.get(2) + mass);        orderMap.get(customer).set(3,tempList.get(3) + sale);        orderMap.get(customer).set(4,tempList.get(4) + 1.0);      } else {        list=new ArrayList<Double>();        list.add(longi);        list.add(lati);        list.add(mass);        list.add(sale);        list.add(1.0);        orderMap.put(customer,list);      }      i++;    }  } catch (  IOException e) {    log.error("Could not read demand file");  } finally {    try {      br.close();    } catch (    IOException e) {      log.error("Could not close demand file");    }  }  return orderMap;}  }
class C{  public static int compileShader(final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compileStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);    if (compileStatus[0] == 0) {      Log.e(TAG,"Error compiling shader: " + GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  @Override public String toString(){  return "cudaMemcpy3DParms[" + createString(",") + "]";}  }
class C{  public static Vector<String> find(String classname,String pkgname){  Vector<String> result;  Class<?> cls;  result=new Vector<String>();  try {    cls=Class.forName(classname);    result=find(cls,pkgname);  } catch (  Exception e) {    e.printStackTrace();  }  return result;}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean skipScope(){switch (fToken) {case Symbols.TokenRPAREN:    return skipScope(Symbols.TokenLPAREN,Symbols.TokenRPAREN);case Symbols.TokenRBRACKET:  return skipScope(Symbols.TokenLBRACKET,Symbols.TokenRBRACKET);case Symbols.TokenRBRACE:return skipScope(Symbols.TokenLBRACE,Symbols.TokenRBRACE);case Symbols.TokenGREATERTHAN:if (!fPrefs.prefHasGenerics) return false;int storedPosition=fPosition;int storedToken=fToken;nextToken();switch (fToken) {case Symbols.TokenIDENT:if (!JavaHeuristicScanner.isGenericStarter(getTokenContent())) break;case Symbols.TokenQUESTIONMARK:case Symbols.TokenGREATERTHAN:if (skipScope(Symbols.TokenLESSTHAN,Symbols.TokenGREATERTHAN)) return true;}fPosition=storedPosition;fToken=storedToken;return false;default :Assert.isTrue(false);return false;}}  }
class C{  public static Date dateGenerator(Date receiveDate,String pattern){  Calendar cal=Calendar.getInstance();  cal.setTime(receiveDate);  String[] splitPattern=StringUtil.split(pattern,StringPool.SPACE);  int bookingDays=0;  int bookingHour=0;  int bookingMinutes=0;  if (splitPattern.length == 2) {    bookingDays=GetterUtil.getInteger(splitPattern[0],0);    String[] splitHour=StringUtil.split(splitPattern[1],StringPool.COLON);    if (splitHour.length == 2) {      bookingHour=GetterUtil.getInteger(splitHour[0]);      bookingMinutes=GetterUtil.getInteger(splitHour[1]);    }  }  cal.add(Calendar.DATE,bookingDays);  cal.add(Calendar.HOUR,bookingHour);  cal.add(Calendar.MINUTE,bookingMinutes);  return cal.getTime();}  }
class C{  public boolean isReturn(){  return _return;}  }
class C{  public final double errorRate(){  return m_delegate.errorRate();}  }
class C{  public static String literalToString(long lit,ArgType type){  if (type == null || !type.isTypeKnown()) {    String n=Long.toString(lit);    if (Math.abs(lit) > 100) {      n+="; // 0x" + Long.toHexString(lit) + " float:"+ Float.intBitsToFloat((int)lit)+ " double:"+ Double.longBitsToDouble(lit);    }    return n;  }switch (type.getPrimitiveType()) {case BOOLEAN:    return lit == 0 ? "false" : "true";case CHAR:  return StringUtils.unescapeChar((char)lit);case BYTE:return formatByte((byte)lit);case SHORT:return formatShort((short)lit);case INT:return formatInteger((int)lit);case LONG:return formatLong(lit);case FLOAT:return formatFloat(Float.intBitsToFloat((int)lit));case DOUBLE:return formatDouble(Double.longBitsToDouble(lit));case OBJECT:case ARRAY:if (lit != 0) {LOG.warn("Wrong object literal: {} for type: {}",lit,type);return Long.toString(lit);}return "null";default :throw new JadxRuntimeException("Unknown type in literalToString: " + type);}}  }
class C{  static String normalize(String path){  if (path == null)   return "";  if (!path.endsWith("/"))   return path + "/";  return path;}  }
class C{  public BusinessObjectDataKey createBusinessObjectDataKey(BusinessObjectData businessObjectData){  BusinessObjectDataKey businessObjectDataKey=new BusinessObjectDataKey();  businessObjectDataKey.setNamespace(businessObjectData.getNamespace());  businessObjectDataKey.setBusinessObjectDefinitionName(businessObjectData.getBusinessObjectDefinitionName());  businessObjectDataKey.setBusinessObjectFormatUsage(businessObjectData.getBusinessObjectFormatUsage());  businessObjectDataKey.setBusinessObjectFormatFileType(businessObjectData.getBusinessObjectFormatFileType());  businessObjectDataKey.setBusinessObjectFormatVersion(businessObjectData.getBusinessObjectFormatVersion());  businessObjectDataKey.setPartitionValue(businessObjectData.getPartitionValue());  businessObjectDataKey.setSubPartitionValues(businessObjectData.getSubPartitionValues());  businessObjectDataKey.setBusinessObjectDataVersion(businessObjectData.getVersion());  return businessObjectDataKey;}  }
class C{  public Boolean isVirtualSMCPresent(){  return virtualSMCPresent;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void incrementCount(BinaryRule key,double[][][] increment){  double[][][] current=getCount(key);  if (current == null) {    setCount(key,increment);    return;  }  for (int i=0; i < current.length; i++) {    for (int j=0; j < current[i].length; j++) {      if (increment[i][j] == null)       continue;      if (current[i][j] == null)       current[i][j]=new double[increment[i][j].length];      for (int k=0; k < current[i][j].length; k++) {        current[i][j][k]+=increment[i][j][k];      }    }  }  setCount(key,current);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ObjectIdentifier == false) {    return false;  }  ObjectIdentifier other=(ObjectIdentifier)obj;  return Arrays.equals(encoding,other.encoding);}  }
class C{  static public U64 makeCookie(int application,int user){  if (!appIdMap.containsKey(application)) {    throw new AppIDNotRegisteredException(application);  }  long longApp=application;  long longUser=user & USER_MASK;  return U64.of((longApp << APP_ID_SHIFT) | longUser);}  }
class C{  public SignatureChecker withData(String signedData){  this.signedData=signedData;  return this;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public String assignProviderAudioSocket(AbstractProviderConnection connection){  String socket=connection.getAudioSocketName();  if (socket == null) {    socket="com.fastbootmobile.encore.AUDIO_SOCKET_" + connection.getProviderName() + "_"+ System.currentTimeMillis();    if (connection.createAudioSocket(mNativeHub,socket)) {      Log.i(TAG,"Provider connected and socket set: " + connection.getProviderName());    } else {      Log.w(TAG,"Error while creating audio socket for " + connection.getProviderName());    }  }  return socket;}  }
class C{  @Override public void onWebSocketBinary(byte[] payload,int offset,int len){  Session session=getSession();  if (session == null || !session.isOpen())   return;  BinaryDecoder decoder=DecoderFactory.get().binaryDecoder(payload,offset,len,null);  Object request;  try {    request=readFromClient.read(null,decoder).getMessage();  } catch (  Exception e) {    log.warn("Failed to decode message from client",e);    session.close(StatusCode.BAD_PAYLOAD,"Could not parse frame");    return;  }  try {    if (request instanceof SendMessage) {      sendMessageRequest((SendMessage)request);    } else     if (request instanceof SubscribeToChannel) {      subscribeRequest((SubscribeToChannel)request);    } else {      throw new IllegalStateException("Unknown request type: " + request.getClass().getName());    }  } catch (  Exception e) {    log.info("Failed to publish message",e);    session.close(StatusCode.SERVER_ERROR,"Internal server error");  }}  }
class C{  public void flush() throws IOException {  stream.flush();}  }
class C{  public static boolean viewsIntersect(View view1,View view2){  if (view1 == null || view2 == null)   return false;  final int[] view1Loc=new int[2];  view1.getLocationOnScreen(view1Loc);  final Rect view1Rect=new Rect(view1Loc[0],view1Loc[1],view1Loc[0] + view1.getWidth(),view1Loc[1] + view1.getHeight());  int[] view2Loc=new int[2];  view2.getLocationOnScreen(view2Loc);  final Rect view2Rect=new Rect(view2Loc[0],view2Loc[1],view2Loc[0] + view2.getWidth(),view2Loc[1] + view2.getHeight());  return view1Rect.intersect(view2Rect);}  }
class C{  public static ZoneLayer<Id> convertActivityFacilities2ZoneLayer(ActivityFacilitiesImpl facility,int srid){  int setPoints=0;  GeometryFactory factory=new GeometryFactory();  Set<Zone<Id>> zones=new HashSet<Zone<Id>>();  Iterator<? extends ActivityFacility> facilityIterator=facility.getFacilities().values().iterator();  while (facilityIterator.hasNext()) {    ActivityFacility af=facilityIterator.next();    Coord coord=af.getCoord();    Point point=factory.createPoint(new Coordinate(coord.getX(),coord.getY()));    point.setSRID(srid);    Zone<Id> zone=new Zone<Id>(point);    zone.setAttribute(af.getId());    zones.add(zone);    setPoints++;  }  log.info("Having " + setPoints + " 'ActivityFacilitiesImpl' items converted into 'ZoneLayer' format");  log.info("Done with conversion!");  ZoneLayer<Id> layer=new ZoneLayer<Id>(zones);  if (!checkConversion(facility,layer))   log.error("Conversion error: Either not all items are converted or coordinates are wrong!");  return layer;}  }
class C{  @Override public String toString(){  return "probs: " + this.probs.toString();}  }
class C{  protected Boolean computeRemoteReceivedHeaderInvalid() throws MessagingException {  Boolean isInvalid=Boolean.FALSE;  try {    getRemoteAddress();  } catch (  UnknownHostException e) {    isInvalid=Boolean.TRUE;  }  return isInvalid;}  }
class C{  public boolean isEventExistsInQueue(Event event){  Iterator<StorageEvent> it=getEventQ().iterator();  while (it.hasNext()) {    StorageEvent storageEvent=it.next();    NameValuePair nvpList[]=storageEvent.getParameterList();    String eventId=event.getEventId().toString();    for (    NameValuePair nvp : nvpList) {      if (nvp.getParameterName().equalsIgnoreCase("SOSEventId") && nvp.getParameterValue().equalsIgnoreCase(eventId)) {        return true;      }    }  }  return false;}  }
class C{  public String consumeToAny(String... seq){  int start=pos;  while (!isEmpty() && !matchesAny(seq)) {    pos++;  }  return queue.substring(start,pos);}  }
class C{  private CacheConfiguration createCacheConfiguration(){  CacheConfiguration ccfg=new CacheConfiguration();  ccfg.setName(CACHE_NAME);  ccfg.setEvictionPolicy(new LruEvictionPolicy(10));  ccfg.setSwapEnabled(true);  return ccfg;}  }
class C{  public void indefinite(){  TimingSpecifier ts=new IndefiniteTimingSpecifier(owner,isBegin);  timingSpecifiers.add(ts);}  }
class C{  public boolean isComplete(){  if ((m_state == STATE_VALID_SERVER_RESPONSE) || (m_state == STATE_INVALID_SERVER_RESPONSE) || (m_state == STATE_DISPOSED))   return true; else   return false;}  }
class C{  public void testXMLCreate() throws JDOMException, IOException {  RouteManager manager=RouteManager.instance();  List<Route> temprouteList=manager.getRoutesByIdList();  Assert.assertEquals("Starting Number of Routes",0,temprouteList.size());  Route r1=manager.newRoute("Test Number 1");  Route r2=manager.newRoute("Test Number 2");  Route r3=manager.newRoute("Test Number 3");  temprouteList=manager.getRoutesByIdList();  Assert.assertEquals("New Number of Routes",3,temprouteList.size());  RouteManagerXml.instance().writeOperationsFile();  Route r4=manager.newRoute("Test Number 4");  Route r5=manager.newRoute("Test Number 5");  Route r6=manager.newRoute("Test Number 6");  Assert.assertNotNull("route r1 exists",r1);  Assert.assertNotNull("route r2 exists",r2);  Assert.assertNotNull("route r3 exists",r3);  Assert.assertNotNull("route r4 exists",r4);  Assert.assertNotNull("route r5 exists",r5);  Assert.assertNotNull("route r6 exists",r6);  LocationManager lmanager=LocationManager.instance();  Location Acton=lmanager.newLocation("Acton");  Location Bedford=lmanager.newLocation("Bedford");  Location Chelmsford=lmanager.newLocation("Chelmsford");  r1.setComment("r1 comment");  RouteLocation r1l1=r1.addLocation(Acton);  r1.addLocation(Bedford);  r1.addLocation(Chelmsford);  r1.addLocation(Bedford);  r1.addLocation(Acton);  r1l1.setDropAllowed(false);  r1l1.setPickUpAllowed(false);  r1l1.setCarMoves(3);  r1l1.setComment("rl1 comment");  r1l1.setGrade(Double.valueOf("5"));  r1l1.setMaxCarMoves(8);  r1l1.setMaxTrainLength(345);  r1l1.setTrainDirection(Location.SOUTH);  r1l1.setTrainIconX(56);  r1l1.setTrainIconY(78);  r1l1.setTrainLength(234);  r1l1.setTrainWeight(987);  r2.setComment("r2 comment");  r2.addLocation(Chelmsford);  RouteLocation r2l2=r2.addLocation(Bedford);  r2.addLocation(Chelmsford);  RouteLocation r2l4=r2.addLocation(Bedford);  r2l2.setDropAllowed(false);  r2l2.setPickUpAllowed(true);  r2l2.setCarMoves(3);  r2l2.setComment("r2l2 comment");  r2l2.setGrade(Double.valueOf("1"));  r2l2.setMaxCarMoves(181);  r2l2.setMaxTrainLength(4561);  r2l2.setTrainDirection(Location.EAST);  r2l2.setTrainIconX(651);  r2l2.setTrainIconY(871);  r2l2.setTrainLength(234);  r2l2.setTrainWeight(987);  r2l4.setDropAllowed(true);  r2l4.setPickUpAllowed(false);  r2l4.setCarMoves(3);  r2l4.setComment("r2l4 comment");  r2l4.setGrade(Double.valueOf("2"));  r2l4.setMaxCarMoves(18);  r2l4.setMaxTrainLength(456);  r2l4.setTrainDirection(Location.NORTH);  r2l4.setTrainIconX(65);  r2l4.setTrainIconY(87);  r2l4.setTrainLength(234);  r2l4.setTrainWeight(987);  r3.setComment("r3 comment");  r4.setComment("r4 comment");  r5.setComment("r5 comment");  r6.setComment("r6 comment");  RouteManagerXml.instance().writeOperationsFile();  manager.dispose();  manager=RouteManager.instance();  temprouteList=manager.getRoutesByIdList();  Assert.assertEquals("Starting Number of Routes",0,temprouteList.size());  RouteManagerXml.instance().readFile(RouteManagerXml.instance().getDefaultOperationsFilename());  temprouteList=manager.getRoutesByIdList();  Assert.assertEquals("Number of Routes",6,temprouteList.size());  r1=manager.getRouteByName("Test Number 1");  r2=manager.getRouteByName("Test Number 2");  r3=manager.getRouteByName("Test Number 3");  r4=manager.getRouteByName("Test Number 4");  r5=manager.getRouteByName("Test Number 5");  r6=manager.getRouteByName("Test Number 6");  Assert.assertNotNull("route r1 exists",r1);  Assert.assertNotNull("route r2 exists",r2);  Assert.assertNotNull("route r3 exists",r3);  Assert.assertNotNull("route r4 exists",r4);  Assert.assertNotNull("route r5 exists",r5);  Assert.assertNotNull("route r6 exists",r6);  Assert.assertEquals("r1 comment","r1 comment",r1.getComment());  List<RouteLocation> locs=r1.getLocationsBySequenceList();  Assert.assertEquals("number of locations in route r1",5,locs.size());  RouteLocation rl1=locs.get(0);  Assert.assertEquals("rl1 can drop",false,rl1.isDropAllowed());  Assert.assertEquals("rl1 can pickup",false,rl1.isPickUpAllowed());  Assert.assertEquals("rl1 car moves",0,rl1.getCarMoves());  Assert.assertEquals("rl1 comment","rl1 comment",rl1.getComment());  Assert.assertEquals("rl1 grade","5.0",Double.toString(rl1.getGrade()));  Assert.assertEquals("rl1 max car moves",8,rl1.getMaxCarMoves());  Assert.assertEquals("rl1 max train length",345,rl1.getMaxTrainLength());  Assert.assertEquals("rl1 train direction",Location.SOUTH,rl1.getTrainDirection());  Assert.assertEquals("rl1 IconX",56,rl1.getTrainIconX());  Assert.assertEquals("rl1 IconY",78,rl1.getTrainIconY());  Assert.assertEquals("rl1 train length",0,rl1.getTrainLength());  Assert.assertEquals("rl1 train weight",0,rl1.getTrainWeight());  Assert.assertEquals("r2 comment","r2 comment",r2.getComment());  locs=r2.getLocationsBySequenceList();  Assert.assertEquals("number of locations in route r2",4,locs.size());  RouteLocation rl2=locs.get(1);  Assert.assertEquals("rl2 can drop",false,rl2.isDropAllowed());  Assert.assertEquals("rl2 can pickup",true,rl2.isPickUpAllowed());  Assert.assertEquals("rl2 car moves",0,rl2.getCarMoves());  Assert.assertEquals("rl2 comment","r2l2 comment",rl2.getComment());  Assert.assertEquals("rl2 grade","1.0",Double.toString(rl2.getGrade()));  Assert.assertEquals("rl2 max car moves",181,rl2.getMaxCarMoves());  Assert.assertEquals("rl2 max train length",4561,rl2.getMaxTrainLength());  Assert.assertEquals("rl2 train direction",Location.EAST,rl2.getTrainDirection());  Assert.assertEquals("rl2 IconX",651,rl2.getTrainIconX());  Assert.assertEquals("rl2 IconY",871,rl2.getTrainIconY());  Assert.assertEquals("rl2 train length",0,rl2.getTrainLength());  Assert.assertEquals("rl2 train weight",0,rl2.getTrainWeight());  RouteLocation rl4=locs.get(3);  Assert.assertEquals("rl4 can drop",true,rl4.isDropAllowed());  Assert.assertEquals("rl4 can pickup",false,rl4.isPickUpAllowed());  Assert.assertEquals("rl4 car moves",0,rl4.getCarMoves());  Assert.assertEquals("rl4 comment","r2l4 comment",rl4.getComment());  Assert.assertEquals("rl4 grade","2.0",Double.toString(rl4.getGrade()));  Assert.assertEquals("rl4 max car moves",18,rl4.getMaxCarMoves());  Assert.assertEquals("rl4 max train length",456,rl4.getMaxTrainLength());  Assert.assertEquals("rl4 train direction",Location.NORTH,rl4.getTrainDirection());  Assert.assertEquals("rl4 IconX",65,rl4.getTrainIconX());  Assert.assertEquals("rl4 IconY",87,rl4.getTrainIconY());  Assert.assertEquals("rl4 train length",0,rl4.getTrainLength());  Assert.assertEquals("rl4 train weight",0,rl4.getTrainWeight());  Assert.assertEquals("r3 comment","r3 comment",r3.getComment());  Assert.assertEquals("r4 comment","r4 comment",r4.getComment());  Assert.assertEquals("r5 comment","r5 comment",r5.getComment());  Assert.assertEquals("r6 comment","r6 comment",r6.getComment());  manager.dispose();  RouteManagerXml.instance().setOperationsFileName("OperationsJUnitTestRouteRoster.xml.bak");  manager=RouteManager.instance();  temprouteList=manager.getRoutesByIdList();  Assert.assertEquals("Starting Number of Routes",0,temprouteList.size());  RouteManagerXml.instance().readFile(RouteManagerXml.instance().getDefaultOperationsFilename());  temprouteList=manager.getRoutesByIdList();  Assert.assertEquals("Number of Routes",3,temprouteList.size());  r1=manager.getRouteByName("Test Number 1");  r2=manager.getRouteByName("Test Number 2");  r3=manager.getRouteByName("Test Number 3");  r4=manager.getRouteByName("Test Number 4");  r5=manager.getRouteByName("Test Number 5");  r6=manager.getRouteByName("Test Number 6");  Assert.assertNotNull("route r1 exists",r1);  Assert.assertNotNull("route r2 exists",r2);  Assert.assertNotNull("route r3 exists",r3);  Assert.assertNull("route r4 exists",r4);  Assert.assertNull("route r5 exists",r5);  Assert.assertNull("route r6 exists",r6);}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public int length(){  return length;}  }
class C{  private void restart(Class<?> activity){  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    Log.e(TAG,"error : ",e);  }  Intent intent=new Intent(context.getApplicationContext(),activity);  restart(intent);}  }
class C{  public DDM(double warningThreshold,double driftThreshold){  super();  setWarningThreshold(warningThreshold);  setDriftThreshold(driftThreshold);  driftHandled();}  }
class C{  @Override public void add(int location,E object){  insertElementAt(object,location);}  }
class C{  public void addRepositoryConnectionInterceptor(RepositoryConnectionInterceptor interceptor){  conInterceptors.add(interceptor);}  }
class C{  @Override public void execute(JobExecutionContext context) throws JobExecutionException {  LOGGER.info("Starting retention job");  JobDataMap data=context.getMergedJobDataMap();  String url=data.getString(RetentionConstants.RETENTION_URL);  HttpGet httpget=new HttpGet(url);  try {    CloseableHttpResponse response=httpClient.execute(httpget);    LOGGER.info("Response was {}",response);  } catch (  IOException e) {    throw new JobExecutionException("Could not execute http get request " + httpget,e);  }}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  return Color.argb(128,r,g,b);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private boolean dictionaryCacheAlreadyExists(CacheType cacheType){  return null != cacheTypeToCacheMap.get(cacheType);}  }
class C{  private boolean conditionCH0(String value,int index){  if (index != 0) {    return false;  } else   if (!contains(value,index + 1,5,"HARAC","HARIS") && !contains(value,index + 1,3,"HOR","HYM","HIA","HEM")) {    return false;  } else   if (contains(value,0,5,"CHORE")) {    return false;  } else {    return true;  }}  }
class C{  @Pure public static boolean willNeverMove(Object obj){  return Selected.Plan.get().willNeverMove(ObjectReference.fromObject(obj));}  }
class C{  private List<Rule> parseRules(JSONArray rules) throws AdeUsageException, JSONException {  if (rules.length() == 0)   throw new AdeUsageException("No rules specified");  List<Rule> currentRules=new ArrayList<Rule>();  for (int i=0; i < rules.length(); i++) {    JSONObject rule=rules.getJSONObject(i);    String name=rule.getString("name");    String description=rule.getString("description");    String membershipRule=rule.getString("membershipRule");    if (!verifyStringParam(name,200,"[a-zA-Z0-9_ ]*") || (description != null && description.length() > 1000) || name.equalsIgnoreCase("unassigned_rule")|| !verifyStringParam(membershipRule,256,"[a-zA-Z0-9.:?/*-]*")) {      throw new AdeUsageException("Invalid parameters for rules was specified");    }    currentRules.add(new Rule(name,membershipRule,description));    validateRuleNames(currentRules);  }  return currentRules;}  }
class C{  @Override public void addClassAnnotation(char[] buffer,int offset,int length){  String annType=new String(buffer,offset,length);  if (_annTypes.contains(annType)) {    addClass(_className);  }}  }
class C{  public static String semverize(String ver){  ver=ver.replaceFirst("^v","");  ver=ver.replaceAll("\\.([^\\d]+)","-$1");  ver=ver.replaceFirst("^(\\d+\\.\\d+)($|-)","$1.0$2");  return ver;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    String newText=text.getText();    if (newText == null)     newText="";    String oldText=m_attachment.getTextMsg();    if (oldText == null)     oldText="";    if (!m_change)     m_change=!newText.equals(oldText);    if (newText.length() > 0 || m_attachment.getEntryCount() > 0) {      if (m_change) {        m_attachment.setBinaryData(new byte[0]);        m_attachment.setTextMsg(text.getText());        m_attachment.saveEx();      }    } else     m_attachment.delete(true);    dispose();  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();  } else   if (e.getSource() == bDeleteAll) {    deleteAttachment();    dispose();  } else   if (e.getSource() == bDelete)   deleteAttachmentEntry(); else   if (e.getSource() == cbContent)   displayData(cbContent.getSelectedIndex()); else   if (e.getSource() == bLoad)   loadFile(); else   if (e.getSource() == bSave)   saveAttachmentToFile(); else   if (e.getSource() == bOpen) {    if (!openAttachment())     saveAttachmentToFile();  }}  }
class C{  public static void injectNBT(ItemStack stack,NBTTagCompound nbt){  stack.setTagCompound(nbt);}  }
class C{  @Inject OptionsParser(String[] preprocessedArgs){  this.preprocessedArgs=preprocessedArgs;  this.debug=debugFlagPresent(preprocessedArgs);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public boolean authenticateUser(String username,String passwd){  log.debug("authenticateUser");  Properties ldapAuthenticateProperties=new Properties();  ldapAuthenticateProperties.put(Context.PROVIDER_URL,ldap_connection_url);  ldapAuthenticateProperties.put(Context.INITIAL_CONTEXT_FACTORY,CONTEXT_FACTORY);  ldapAuthenticateProperties.put(Context.REFERRAL,"follow");  ldapAuthenticateProperties.put(Context.SECURITY_AUTHENTICATION,ldap_auth_type);  ldapAuthenticateProperties.put(Context.SECURITY_PRINCIPAL,username);  ldapAuthenticateProperties.put(Context.SECURITY_CREDENTIALS,passwd);  ldapAuthenticateProperties.put("java.naming.ldap.referral.bind","true");  if (ldap_admin_dn == null)   ldap_admin_dn="";  if (!ldap_auth_type.equals(LDAP_AUTH_TYPE_NONE) && ldap_admin_dn.length() > 0) {    log.debug("\n\nAuthentification to LDAP - Server start");    try {      loginToLdapServer();      authContext=new InitialDirContext(ldapAuthenticateProperties);    } catch (    Exception ae) {      log.error("\n\nAuthentification on LDAP Server failed : " + ae.getMessage());      log.error("[Authentification on LDAP Server failed]",ae);      return false;    }  } else {    log.debug("\n\nConnection to LDAP - Server start (without Server login)");    try {      authContext=new InitialDirContext(ldapAuthenticateProperties);    } catch (    Exception e) {      log.error("\n\nConnection to LDAP Server failed : " + e.getMessage());      log.error("[Connection to LDAP Server failed]",e);      return false;    }  }  return true;}  }
class C{  public void reply(SerialReply m){  if (status.getText().equals(rb.getString("StatusStart"))) {    status.setText(rb.getString("StatusRunning"));  }  if (m.getNumDataElements() != 2) {    return;  }  if ((m.getElement(1) & 0xFF) == 0x77) {    return;  }  int num=m.getElement(0) & 0x7F;  scanSeen[num]=true;  nodesModel.fireTableRowsUpdated(num,num);}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(rawClass.getModifiers());}  }
class C{  public Product copyForSubscription(Organization targetCustomer,Subscription owningSubscription){  Product copy=new Product();  copy.setDataContainer(new ProductData());  setSubscriptionProductType(copy);  copy.setStatus(this.getStatus());  copy.setTemplate(getTemplateIfSubscriptionOrSelf());  copy.setTargetCustomer(targetCustomer);  copy.setOwningSubscription(owningSubscription);  copy.setVendor(this.getVendor());  copy.setTechnicalProduct(this.getTechnicalProduct());  setDatacontainerValues(copy,copy.getType());  setParamatersAndPriceModel(copy);  return copy;}  }
class C{  public IntIterator edgeRows(int node){  return edgeRows(node,UNDIRECTED);}  }
class C{  public ConcatExpression add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  public Level previousLevel(){  return this.parent.level(this.levelNumber - 1);}  }
class C{  public boolean hasLevelNo(){  return m_hasLevelNo;}  }
class C{  private String hexAV() throws IOException {  if (pos + 4 >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  beg=pos;  pos++;  while (true) {    if (pos == chars.length || chars[pos] == '+' || chars[pos] == ',' || chars[pos] == ';') {      end=pos;      break;    }    if (chars[pos] == ' ') {      end=pos;      pos++;      for (; pos < chars.length && chars[pos] == ' '; pos++) {      }      break;    } else     if (chars[pos] >= 'A' && chars[pos] <= 'F') {      chars[pos]+=32;    }    pos++;  }  int hexLen=end - beg;  if (hexLen < 5 || (hexLen & 1) == 0) {    throw new IOException("Invalid distinguished name string");  }  encoded=new byte[hexLen / 2];  for (int i=0, p=beg + 1; i < encoded.length; p+=2, i++) {    encoded[i]=(byte)getByte(p);  }  return new String(chars,beg,hexLen);}  }
class C{  public void trustSSLHosts(String... hosts){  mailSender.trustHosts(hosts);}  }
class C{  public static boolean isMarkup(int c){  return c == '<' || c == '&' || c == '%';}  }
class C{  @Override public synchronized boolean put(final Connection connection){  if (connection != null) {    return connections.put(connection.getPeerAddress(),connection);  } else {    return false;  }}  }
class C{  public void line(double value,Paint color,float width,boolean stack){  SourcedPlotElement parent=stack ? findParent() : null;  plotElements.add(new ConstantLine(value,color,new BasicStroke(width),parent));}  }
class C{  public VOLocalizedText(String locale,String text,int version){  this.locale=locale;  this.text=text;  this.version=version;}  }
class C{  public boolean hasInverseRelationship(Primitive type,Primitive target){  return hasInverseRelationship(this.network.createVertex(type),this.network.createVertex(target));}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public RewrittenUrl matches(final String url,final HttpServletRequest hsRequest,final HttpServletResponse hsResponse,RuleChain chain) throws IOException, ServletException, InvocationTargetException {  RuleExecutionOutput ruleExecutionOutput=super.matchesBase(url,hsRequest,hsResponse,chain);  if (ruleExecutionOutput == null || !ruleExecutionOutput.isRuleMatched()) {    return null;  }  if (queryStringAppend && hsRequest.getQueryString() != null && hsRequest.getQueryString().length() > 0) {    String target=ruleExecutionOutput.getReplacedUrl();    if (target.contains("?")) {      ruleExecutionOutput.setReplacedUrl(target + "&" + hsRequest.getQueryString());    } else {      ruleExecutionOutput.setReplacedUrl(target + "?" + hsRequest.getQueryString());    }  }  if (toServletContext != null)   ruleExecutionOutput.setReplacedUrlContext(toServletContext);  return RuleExecutionOutput.getRewritenUrl(toType,encodeToUrl,ruleExecutionOutput);}  }
class C{  public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  Object newValue=evt.getNewValue();  if (newValue instanceof Integer)   Env.setContext(Env.getCtx(),m_WindowNo,"Account_ID",((Integer)newValue).intValue());}  }
class C{  public MonitorServiceClient buildMonitorClient(){  return buildClient();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public Message createMessage(){  return new MimeMessage(Session.getDefaultInstance(new Properties(),null));}  }
class C{  private final synchronized void notifyGUI(){  if (Thread.currentThread().isInterrupted())   return;  long now=System.currentTimeMillis();  if (now < lastGUIUpdate + guiUpdateInterval)   return;  lastGUIUpdate=now;  if ((searchRequest == null) || (searchRequest.currPos == null))   return;  int id=engineState.searchId;  if (depthModified) {    listener.notifyDepth(id,statCurrDepth);    depthModified=false;  }  if (currMoveModified) {    Move m=TextIO.UCIstringToMove(statCurrMove);    Position pos=searchRequest.currPos;    if ((searchRequest.ponderMove != null) && (m != null)) {      pos=new Position(pos);      UndoInfo ui=new UndoInfo();      pos.makeMove(searchRequest.ponderMove,ui);    }    listener.notifyCurrMove(id,pos,m,statCurrMoveNr);    currMoveModified=false;  }  if (pvModified) {    listener.notifyPV(id,searchRequest.currPos,statPvInfo,searchRequest.ponderMove);    pvModified=false;  }  if (statsModified) {    listener.notifyStats(id,statNodes,statNps,statTBHits,statHash,statTime);    statsModified=false;  }}  }
class C{  public Name add(Rdn comp){  return add(size(),comp);}  }
class C{  public static EncodedImage create(InputStream i) throws IOException {  byte[] buffer=Util.readInputStream(i);  if (buffer.length > 200000) {    System.out.println("Warning: loading large images using EncodedImage.create(InputStream) might lead to memory issues, try using EncodedImage.create(InputStream, int)");  }  return new EncodedImage(new byte[][]{buffer});}  }
class C{  public void h_Socket(SocketPermission perm){  if (Thread.currentThread().getThreadGroup().equals(main) && !isPortException(perm)) {    throw new ThreadingException("Networking On Main Thread!");  }  if (perm.getActions().contains("listen")) {    if (existsInCallStack("sun.management.jmxremote.*",".*") != -1)     return;    SocketPermission impliee=new SocketPermission("*:5800-5810","listen");    if (!impliee.implies(perm) && !isPortException(perm)) {switch (SecurityPolicy.get()) {case NONE:        break;default :      SecurityPolicy.log().warn("Socket Port Warning, not within 5800...5810 (FMS will not forward it!): " + perm.getName());    SecurityPolicy.log().exception(new Throwable());  break;}}}}  }
class C{  public ImageBorderAppliesToWizard(EditableResources res,String theme){  this.res=res;  this.theme=theme;  initComponents();  appliesTo.setModel(new DefaultListModel());}  }
class C{  @Deprecated public static String list2String(Collection<?> in,String separator){  return Collection2String(in,separator);}  }
class C{  private Database buildDerivatorDB(Relation<ParameterizationFunction> relation,DBIDs ids){  ProxyDatabase proxy=new ProxyDatabase(ids);  int dim=dimensionality(relation);  SimpleTypeInformation<DoubleVector> type=new VectorFieldTypeInformation<>(DoubleVector.FACTORY,dim);  MaterializedRelation<DoubleVector> prep=new MaterializedRelation<>(type,ids);  proxy.addRelation(prep);  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    DoubleVector v=DoubleVector.wrap(relation.get(iter).getColumnVector());    prep.insert(iter,v);  }  return proxy;}  }
class C{  public void initialize(AlgorithmParameterSpec algParams,SecureRandom random) throws InvalidAlgorithmParameterException {  if (!(algParams instanceof DHParameterSpec)) {    throw new InvalidAlgorithmParameterException("Inappropriate parameter type");  }  params=(DHParameterSpec)algParams;  pSize=params.getP().bitLength();  try {    checkKeySize(pSize);  } catch (  InvalidParameterException ipe) {    throw new InvalidAlgorithmParameterException(ipe.getMessage());  }  lSize=params.getL();  if ((lSize != 0) && (lSize > pSize)) {    throw new InvalidAlgorithmParameterException("Exponent size must not be larger than modulus size");  }  this.random=random;}  }
class C{  public boolean updateEntry(int i,byte[] data){  MAttachmentEntry entry=getEntry(i);  if (entry == null)   return false;  entry.setData(data);  return true;}  }
class C{  public ConstantExponentialModel(String name,Parameter N0Parameter,Parameter timeParameter,Parameter growthRateParameter,Type units,boolean usingGrowthRate){  super(name);  constExponential=new ConstExponential(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.timeParameter=timeParameter;  addVariable(timeParameter);  timeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.usingGrowthRate=usingGrowthRate;  setUnits(units);}  }
class C{  @Override public boolean supportsStringValues(){  return SUPPORTS_STRING_VALUES;}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X509Name || obj instanceof ASN1Sequence)) {    return false;  }  ASN1Primitive derO=((ASN1Encodable)obj).toASN1Primitive();  if (this.toASN1Primitive().equals(derO)) {    return true;  }  X509Name other;  try {    other=X509Name.getInstance(obj);  } catch (  IllegalArgumentException e) {    return false;  }  int orderingSize=ordering.size();  if (orderingSize != other.ordering.size()) {    return false;  }  boolean[] indexes=new boolean[orderingSize];  int start, end, delta;  if (ordering.elementAt(0).equals(other.ordering.elementAt(0))) {    start=0;    end=orderingSize;    delta=1;  } else {    start=orderingSize - 1;    end=-1;    delta=-1;  }  for (int i=start; i != end; i+=delta) {    boolean found=false;    ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)ordering.elementAt(i);    String value=(String)values.elementAt(i);    for (int j=0; j < orderingSize; j++) {      if (indexes[j]) {        continue;      }      ASN1ObjectIdentifier oOid=(ASN1ObjectIdentifier)other.ordering.elementAt(j);      if (oid.equals(oOid)) {        String oValue=(String)other.values.elementAt(j);        if (equivalentStrings(value,oValue)) {          indexes[j]=true;          found=true;          break;        }      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  protected FilePreferences loadFile(){  try {    if (!preferencesFile.exists()) {      if (!preferencesFile.createNewFile()) {        throw new RuntimeException("Can not create file.");      }      this.rootNode=new JsonPreferences();    } else {      this.rootNode=mapper.readValue(preferencesFile,JsonPreferences.class);    }  } catch (  JsonMappingException e) {    this.rootNode=new JsonPreferences();  }catch (  IOException e) {    throw new RuntimeException(e);  }  this.rootNode.addCallback(this);  return this;}  }
class C{  public static Query newShapeQuery(String field,GeoShape shape){  return new PointInGeo3DShapeQuery(field,shape);}  }
class C{  public Vector3f max(Vector3fc v){  this.x=x > v.x() ? x : v.x();  this.y=y > v.y() ? y : v.y();  this.z=z > v.z() ? z : v.z();  return this;}  }
class C{  protected void configureWebAppContext(final WebContextWithExtraConfigurations context) throws Exception {  context.setAttribute("javax.servlet.context.tempdir",getScratchDir());  context.setAttribute("org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern",".*/[^/]*servlet-api-[^/]*\\.jar$|.*/javax.servlet.jsp.jstl-.*\\.jar$|.*/[^/]*taglibs.*\\.jar$");  context.setAttribute("org.eclipse.jetty.containerInitializers",jspInitializers());  context.setAttribute(InstanceManager.class.getName(),new SimpleInstanceManager());  context.addBean(new ServletContainerInitializersStarter(context),true);  context.addServlet(jspServletHolder(),"*.jsp");  context.replaceConfiguration(WebInfConfiguration.class,WebInfConfigurationHomeUnpacked.class);}  }
class C{  @Override public void paint(Graphics g){}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public LockInfo(String className,int identityHashCode){  if (className == null) {    throw new NullPointerException("Parameter className cannot be null");  }  this.className=className;  this.identityHashCode=identityHashCode;}  }
class C{  boolean expandGroup(int groupPos){  ExpandableListPosition elGroupPos=ExpandableListPosition.obtain(ExpandableListPosition.GROUP,groupPos,-1,-1);  PositionMetadata pm=getFlattenedPos(elGroupPos);  elGroupPos.recycle();  boolean retValue=expandGroup(pm);  pm.recycle();  return retValue;}  }
class C{  @Override public void cancel(){  m_gameSelectorModel.deleteObserver(this);}  }
class C{  public boolean isSameTax(){  Object oo=get_Value(COLUMNNAME_IsSameTax);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isClassType(Type t){  return t.equals(RefType.v("java.lang.Class"));}  }
class C{  public void updateMacroValue(int macroIndex,int pairIndex,String newValue){switch (pairIndex) {case 0:    getMacros().get(macroIndex).setFirst(newValue);  fireUpdate(this);break;case 1:getMacros().get(macroIndex).setSecond(newValue);fireUpdate(this);break;default :throw new IndexOutOfBoundsException(pairIndex + " > 1");}}  }
class C{  private void dismantleResource(String resourcePath,boolean unclaimVolumes,boolean isDevice) throws VPlexApiException {  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DISMANTLE);    s_logger.info("Dismantle resource URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    if (isDevice) {      argsMap.put(VPlexApiConstants.ARG_DASH_R,resourcePath);    } else {      argsMap.put(VPlexApiConstants.ARG_DASH_V,resourcePath);    }    if (unclaimVolumes) {      argsMap.put(VPlexApiConstants.ARG_UNCLAIM,"");    }    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Dismantle POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Delete virtual volume response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Dismantling of resource is completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.dismantleResourceFailureStatus(resourcePath,String.valueOf(response.getStatus()),cause);      }    }    if (responseStr.contains(VPlexApiConstants.DISMANTLE_ERROR_MSG)) {      s_logger.info("SUCCESS Response string contains DISMANTLE_ERROR_MSG string: " + responseStr);      throw VPlexApiException.exceptions.dismantleResourceFailureStatus(resourcePath,String.valueOf(response.getStatus()),responseStr);    }    s_logger.info("Resource {} successfully dismantled.",resourcePath);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedDismantleResource(resourcePath,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public void close() throws IOException {  flush();  owner.close();}  }
class C{  public static double[][] minus(double v2,double[][] v1){  double[][] array=new double[v1.length][v1[0].length];  for (int i=0; i < v1.length; i++)   for (int j=0; j < v1[0].length; j++)   array[i][j]=v2 - v1[i][j];  return array;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int cols, rows, col, row, a, numImages, loopNum, progress;  double noData;  String inputFilesString;  String[] imageFiles;  String[] shortNames;  long[] imageNs;  boolean isZeroBackground;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  isZeroBackground=Boolean.parseBoolean(args[1]);  try {    imageNs=new long[numImages];    shortNames=new String[numImages];    double[] data;    loopNum=0;    for (a=0; a < numImages; a++) {      loopNum++;      updateProgress("Loop " + loopNum + " of "+ numImages+ ":",0);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (isZeroBackground) {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData && data[col] != 0) {              imageNs[a]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(row * 100.0 / rows);          updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);        }      } else {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              imageNs[a]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(row * 100.0 / rows);          updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);        }      }      image.close();    }    String retstr;    DecimalFormat df=new DecimalFormat("###,###,###,###");    retstr="Number of Grid Cells:\n\n";    for (a=0; a < numImages; a++) {      retstr+=shortNames[a] + ":\t" + df.format(imageNs[a])+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  login();  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);}  }
class C{  public static void storeGeofenceEnabled(Context context,boolean enable){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=prefs.edit();  editor.putBoolean(PREFERENCES_GEOFENCE_ENABLED,enable);  editor.apply();}  }
class C{  public boolean last() throws GenericEntityException {  try {    return resultSet.last();  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the cursor to last",e);  }}  }
class C{  public boolean isWaitForResponse(){  return waitForResponse;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.194 -0500",hash_original_method="E3AC8BD9C0992AF624180216E36F1FC7",hash_generated_method="DDD1B73EF63996EC35AEB8E335F6DB91") public Chunk(int type,ByteBuffer buf){  this.type=type;  this.data=buf.array();  this.offset=buf.arrayOffset();  this.length=buf.position();}  }
class C{  @Override protected final void parseArgs(String[] args) throws AdeException {  if (args.length == 0) {    usageError("Expecting at least one argument");    return;  }  if (args.length > 3) {    usageError("Too many arguments");  }  m_analysisGroupId=args[0];  if (args.length > 1) {    m_startDate=ExtDateTimeUtils.startOfDay(ArgumentConstants.parseDate(args[1]));  } else {    usageError("Expecting start date argument");  }  if (args.length > 2) {    m_endDate=ArgumentConstants.parseDate(args[2]);    m_endDate=ExtDateTimeUtils.daysAfter(ExtDateTimeUtils.startOfDay(m_endDate),1);  } else {    usageError("Expecting end date argument");  }}  }
class C{  public void putAsString(String key,float value){  String strValue=Float.toString(value);  super.put(key,strValue);}  }
class C{  public static <T>boolean equals(List<T> a,List<T> b){  if (a == b) {    return true;  } else   if (a == null || b == null) {    return false;  } else   if (a.size() != b.size()) {    return false;  } else {    for (int i=0; i < a.size(); i++) {      T itemA=a.get(i);      T itemB=b.get(i);      if (!equal(itemA,itemB)) {        return false;      }    }    return true;  }}  }
class C{  public boolean readDescriptor(BluetoothGattDescriptor descriptor,BleDescriptorCallback bleCallback){  handleDescriptorReadCallback(bleCallback);  return handleAfterInitialed(getBluetoothGatt().readDescriptor(descriptor),bleCallback);}  }
class C{  public AllowEventsParser(String allowEvents){  super(allowEvents);}  }
class C{  private static int checkChar(final char c,final String signature,int pos){  if (getChar(signature,pos) == c) {    return pos + 1;  }  throw new IllegalArgumentException(signature + ": '" + c+ "' expected at index "+ pos);}  }
class C{  public void emptyElement(String elName) throws IOException {  _writeIndent();  _write("<" + elName);  _writeAtts();  _writeLn("/>");}  }
class C{  @Override public Value sample(){  if (intervals == null) {    if (table.isEmpty()) {      log.warning("creating intervals for an empty table");    }    intervals=new Intervals<Value>(table);  }  if (intervals.isEmpty()) {    log.warning("interval is empty, table: " + table);    return ValueFactory.none();  }  Value sample=intervals.sample();  return sample;}  }
class C{  public boolean isPanelNameUsed(String name){  if (panelsList.size() == 0) {    return false;  }  for (int i=0; i < panelsList.size(); i++) {    try {      Editor editor=panelsList.get(i);      if (editor.getTargetFrame().getTitle().equals(name)) {        return true;      }    } catch (    Exception e) {    }  }  return false;}  }
class C{  public void freeNotCoveredInstances(){  m_notCovered=null;}  }
class C{  public ResultVO successResp(Object object){  ResultVO vo=new ResultVO(ResultConstant.OK);  vo.setOperationStatus(OperationStatus.SUCCESS);  if (vo.getMessage() == null) {    vo.setMessage(ResultConstant.SUCCESS);  }  vo.setData(object);  return vo;}  }
class C{  @Override public <T extends DataObject>Joiner join(Class<T> clazz,String alias,T... objs){  return new Joiner(getDbClient()).join(clazz,alias,objs);}  }
class C{  public CalendarIntervalScheduleBuilder withIntervalInYears(int intervalInYears){  validateInterval(intervalInYears);  this.interval=intervalInYears;  this.intervalUnit=IntervalUnit.YEAR;  return this;}  }
class C{  private String percentEncodeRfc3986(String s){  String out;  try {    out=URLEncoder.encode(s,UTF8_CHARSET).replace("+","%20").replace("*","%2A").replace("%7E","~");  } catch (  UnsupportedEncodingException e) {    out=s;  }  return out;}  }
class C{  private void updateFileSystem(VNXeApiClient apiClient,DbClient dbClient,FileShare fsObj){  SMBShareMap shareMap=fsObj.getSMBFileShares();  if (shareMap == null) {    shareMap=new SMBShareMap();    fsObj.setSMBFileShares(shareMap);  }  VNXeCifsShare vnxeShare=apiClient.findCifsShareByName(smbShare.getName());  if (vnxeShare != null) {    smbShare.setNativeId(vnxeShare.getId());    SMBFileShare share=smbShare.getSMBFileShare();    share.setMountPoint(share.getNetBIOSName(),share.getStoragePortNetworkId(),share.getStoragePortName(),share.getName());    shareMap.put(share.getName(),share);    createDefaultACEForShare(dbClient,fsObj.getId(),smbShare);  } else {    _logger.error("Could not find the smbShare : {} in vnxe",smbShare.getName());    setErrorStatus(String.format("Could not find the smbShare: %s in the VNXe array",smbShare.getName()));  }  dbClient.persistObject(fsObj);}  }
class C{  Iter(){  while ((next=findFirst()) != null) {    Object x=next.value;    if (x != null && x != next) {      @SuppressWarnings("unchecked") V vv=(V)x;      nextValue=vv;      break;    }  }}  }
class C{  protected void prepareIO(){  Input input=new Input(data);  input.enforceAMF3();  dataInput=new DataInput(input,new Deserializer());  Output output=new Output(data);  output.enforceAMF3();  dataOutput=new DataOutput(output,new Serializer());}  }
class C{  public DistributedLogConfiguration(){  super();  addConfiguration(new SystemConfiguration());}  }
class C{  private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {  char c;  int i;  JSONObject jsonobject=null;  String string;  String tagName;  Object token;  token=x.nextToken();  if (token == BANG) {    c=x.next();    if (c == '-') {      if (x.next() == '-') {        x.skipPast("-->");        return false;      }      x.back();    } else     if (c == '[') {      token=x.nextToken();      if ("CDATA".equals(token)) {        if (x.next() == '[') {          string=x.nextCDATA();          if (string.length() > 0) {            context.accumulate("content",string);          }          return false;        }      }      throw x.syntaxError("Expected 'CDATA['");    }    i=1;    do {      token=x.nextMeta();      if (token == null) {        throw x.syntaxError("Missing '>' after '<!'.");      } else       if (token == LT) {        i+=1;      } else       if (token == GT) {        i-=1;      }    } while (i > 0);    return false;  } else   if (token == QUEST) {    x.skipPast("?>");    return false;  } else   if (token == SLASH) {    token=x.nextToken();    if (name == null) {      throw x.syntaxError("Mismatched close tag " + token);    }    if (!token.equals(name)) {      throw x.syntaxError("Mismatched " + name + " and "+ token);    }    if (x.nextToken() != GT) {      throw x.syntaxError("Misshaped close tag");    }    return true;  } else   if (token instanceof Character) {    throw x.syntaxError("Misshaped tag");  } else {    tagName=(String)token;    token=null;    jsonobject=new JSONObject();    for (; ; ) {      if (token == null) {        token=x.nextToken();      }      if (token instanceof String) {        string=(String)token;        token=x.nextToken();        if (token == EQ) {          token=x.nextToken();          if (!(token instanceof String)) {            throw x.syntaxError("Missing value");          }          jsonobject.accumulate(string,XML.stringToValue((String)token));          token=null;        } else {          jsonobject.accumulate(string,"");        }      } else       if (token == SLASH) {        if (x.nextToken() != GT) {          throw x.syntaxError("Misshaped tag");        }        if (jsonobject.length() > 0) {          context.accumulate(tagName,jsonobject);        } else {          context.accumulate(tagName,"");        }        return false;      } else       if (token == GT) {        for (; ; ) {          token=x.nextContent();          if (token == null) {            if (tagName != null) {              throw x.syntaxError("Unclosed tag " + tagName);            }            return false;          } else           if (token instanceof String) {            string=(String)token;            if (string.length() > 0) {              jsonobject.accumulate("content",XML.stringToValue(string));            }          } else           if (token == LT) {            if (parse(x,jsonobject,tagName)) {              if (jsonobject.length() == 0) {                context.accumulate(tagName,"");              } else               if (jsonobject.length() == 1 && jsonobject.opt("content") != null) {                context.accumulate(tagName,jsonobject.opt("content"));              } else {                context.accumulate(tagName,jsonobject);              }              return false;            }          }        }      } else {        throw x.syntaxError("Misshaped tag");      }    }  }}  }
class C{  public void repeat(float offset,String syncbaseID){  TimingSpecifier ts=new RepeatTimingSpecifier(owner,isBegin,offset,syncbaseID);  timingSpecifiers.add(ts);}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  m_oTabuList=new Operation[m_nTabuList];  int iCurrentTabuList=0;  initCache(bayesNet,instances);  double fBestScore;  double fCurrentScore=0.0;  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    fCurrentScore+=calcNodeScore(iAttribute);  }  BayesNet bestBayesNet;  fBestScore=fCurrentScore;  bestBayesNet=new BayesNet();  bestBayesNet.m_Instances=instances;  bestBayesNet.initStructure();  copyParentSets(bestBayesNet,bayesNet);  for (int iRun=0; iRun < m_nRuns; iRun++) {    Operation oOperation=getOptimalOperation(bayesNet,instances);    performOperation(bayesNet,instances,oOperation);    if (oOperation == null) {      throw new Exception("Panic: could not find any step to make. Tabu list too long?");    }    m_oTabuList[iCurrentTabuList]=oOperation;    iCurrentTabuList=(iCurrentTabuList + 1) % m_nTabuList;    fCurrentScore+=oOperation.m_fDeltaScore;    if (fCurrentScore > fBestScore) {      fBestScore=fCurrentScore;      copyParentSets(bestBayesNet,bayesNet);    }    if (bayesNet.getDebug()) {      printTabuList();    }  }  copyParentSets(bayesNet,bestBayesNet);  bestBayesNet=null;  m_Cache=null;}  }
class C{  public void onToggleAnimate(View view){  updateEnabledState();}  }
class C{  private double association(Node x,Node y){  numIndTests++;  independenceTest.isIndependent(x,y,new LinkedList<Node>());  return 1.0 - independenceTest.getPValue();}  }
class C{  public static boolean isFloat(CharSequence self){  try {    Float.valueOf(self.toString().trim());    return true;  } catch (  NumberFormatException nfe) {    return false;  }}  }
