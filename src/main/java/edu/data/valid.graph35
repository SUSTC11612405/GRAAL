class C{  private void loadNormal(Context ctx,ImageLoader img){  Glide.with(ctx).load(img.getUrl()).placeholder(img.getPlaceHolder()).into(img.getImgView());}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  public static Map<String,Object> params(String key1,Object value1,String key2,Object value2,String key3,Object value3,String key4,Object value4){  return map(key1,value1,key2,value2,key3,value3,key4,value4);}  }
class C{  protected void dragDividerTo(int location){  splitPaneUI.dragDividerTo(location);}  }
class C{  public RESTEndpointBuilder apiVersion(String apiVersion){  headers.put("Accept-API-Version","protocol=1.0,resource=" + apiVersion);  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SPKIDataType createSPKIDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SPKIDataTypeImpl();}  }
class C{  public static boolean isSynchronized(int mod){  return (mod & ACC_SYNCHRONIZED) != 0;}  }
class C{  public void makeImmutable(){  if (mutable) {    if (decision != null) {      decision.makeImmutable();    }    if (status != null) {      status.makeImmutable();    }    mutable=false;  }}  }
class C{  @Override public void reset(){  if (!included || getResponse().isCommitted())   getResponse().reset();}  }
class C{  private void extendSelection(TreePath newLead){  TreePath aPath=getAnchorSelectionPath();  int aRow=(aPath == null) ? -1 : getRowForPath(tree,aPath);  int newIndex=getRowForPath(tree,newLead);  if (aRow == -1) {    tree.setSelectionRow(newIndex);  } else {    if (aRow < newIndex) {      tree.setSelectionInterval(aRow,newIndex);    } else {      tree.setSelectionInterval(newIndex,aRow);    }    setAnchorSelectionPath(aPath);    setLeadSelectionPath(newLead);  }}  }
class C{  private static boolean isTlsProtocol(byte[] packet){  return (packet[0] & 0xff) == 0x16 && (packet[1] & 0xff) == 0x03 && (packet[2] & 0xff) == 0x01;}  }
class C{  public ConnectIOException(String s,Exception ex){  super(s,ex);}  }
class C{  public boolean isLeaf(Object node){  if (asksAllowsChildren)   return !((TreeNode)node).getAllowsChildren();  return ((TreeNode)node).isLeaf();}  }
class C{  private static int bit(int i){  int ret=(1 << (i & LOW_ORDER_BITMASK));  return ret;}  }
class C{  private StringUtil(){}  }
class C{  private SecurityHolder initSecurity(){  Policy policy=Policy.getPolicy();  CodeSource source=null;  PermissionCollection permissions=null;  if (policy != null) {    try {      String docBase=context.getRealPath("/");      if (docBase == null) {        docBase=options.getScratchDir().toString();      }      String codeBase=docBase;      if (!codeBase.endsWith(File.separator)) {        codeBase=codeBase + File.separator;      }      File contextDir=new File(codeBase);      URL url=contextDir.getCanonicalFile().toURI().toURL();      source=new CodeSource(url,(Certificate[])null);      permissions=policy.getPermissions(source);      if (!docBase.endsWith(File.separator)) {        permissions.add(new FilePermission(docBase,"read"));        docBase=docBase + File.separator;      } else {        permissions.add(new FilePermission(docBase.substring(0,docBase.length() - 1),"read"));      }      docBase=docBase + "-";      permissions.add(new FilePermission(docBase,"read"));      String workDir=options.getScratchDir().toString();      if (!workDir.endsWith(File.separator)) {        permissions.add(new FilePermission(workDir,"read,write"));        workDir=workDir + File.separator;      }      workDir=workDir + "-";      permissions.add(new FilePermission(workDir,"read,write,delete"));      permissions.add(new RuntimePermission("accessClassInPackage.org.apache.jasper.runtime"));    } catch (    Exception e) {      context.log("Security Init for context failed",e);    }  }  return new SecurityHolder(source,permissions);}  }
class C{  public static int registerSystemFontDirectories(){  return fontRegisterProvider.registerSystemFontDirectories();}  }
class C{  @Override public boolean isAbandonedConfig(){  return abandonedConfig != null;}  }
class C{  public InvalidSessionIdException(String sessionId){  super(SessionBundle.getString("invalidSessionID") + sessionId);}  }
class C{  protected void hasProperty(Properties properties,String name){  if (properties.getProperty(name) == null)   throw new IllegalArgumentException(sm.getString("mcastService.missing.property",name));}  }
class C{  public ServletRequestEvent(ServletContext sc,ServletRequest request){  super(sc);  this.request=request;}  }
class C{  private VerificationStatus.HashMatchResult verifyHash(int dgNumber,Map<Integer,VerificationStatus.HashMatchResult> hashResults){  short fid=LDSFileUtil.lookupFIDByTag(LDSFileUtil.lookupTagByDataGroupNumber(dgNumber));  SODFile sod=null;  byte[] storedHash=null;  try {    sod=lds.getSODFile();    Map<Integer,byte[]> storedHashes=sod.getDataGroupHashes();    storedHash=storedHashes.get(dgNumber);  } catch (  Exception e) {    verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.STORED_HASH_NOT_FOUND_FAILURE,hashResults);    return null;  }  String digestAlgorithm=sod.getDigestAlgorithm();  try {    digest=getDigest(digestAlgorithm);  } catch (  NoSuchAlgorithmException nsae) {    verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.UNSUPPORTED_DIGEST_ALGORITHM_FAILURE,null);    return null;  }  byte[] dgBytes=null;  try {    InputStream dgIn=null;    int length=lds.getLength(fid);    if (length > 0) {      dgBytes=new byte[length];      dgIn=lds.getInputStream(fid);      DataInputStream dgDataIn=new DataInputStream(dgIn);      dgDataIn.readFully(dgBytes);    }    if (dgIn == null && (verificationStatus.getEAC() != VerificationStatus.Verdict.SUCCEEDED) && (fid == PassportService.EF_DG3 || fid == PassportService.EF_DG4)) {      LOGGER.warning("Skipping DG" + dgNumber + " during HT verification because EAC failed.");      VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,null);      hashResults.put(dgNumber,hashResult);      return hashResult;    }    if (dgIn == null) {      LOGGER.warning("Skipping DG" + dgNumber + " during HT verification because file could not be read.");      VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,null);      hashResults.put(dgNumber,hashResult);      return hashResult;    }  } catch (  Exception e) {    VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,null);    hashResults.put(dgNumber,hashResult);    verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE,hashResults);    return hashResult;  }  try {    byte[] computedHash=digest.digest(dgBytes);    VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,computedHash);    hashResults.put(dgNumber,hashResult);    if (!Arrays.equals(storedHash,computedHash)) {      verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.HASH_MISMATCH_FAILURE,hashResults);    }    return hashResult;  } catch (  Exception ioe) {    VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,null);    hashResults.put(dgNumber,hashResult);    verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE,hashResults);    return hashResult;  }}  }
class C{  public ByteArrayPool(int arraySize){  this(arraySize,MAX_POOL_SIZE);}  }
class C{  public String[] findAuthRoles(){  return (authRoles);}  }
class C{  public ScrollBar(int orientation){  super(orientation);  this.putClientProperty("JScrollBar.fastWheelScrolling",Boolean.TRUE);}  }
class C{  public static String formatBigDecimal(BigDecimal v,Locale locale){  NumberFormat numberFormat=NumberFormat.getInstance(locale);  int scale=2;  if (v.intValue() >= 100) {    scale=1;  }  return numberFormat.format(v.setScale(scale,RoundingMode.UP));}  }
class C{  public boolean usesBasicAuth(){  return basicAuth;}  }
class C{  @Override public void close() throws IOException {  throw exception;}  }
class C{  public void testEntrySetUsesComparatorOnly(){  Map<String,String> map=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  map.put("ABC","a");  assertTrue(map.entrySet().contains(new SimpleEntry<String,String>("abc","a")));  assertTrue(map.entrySet().remove(new SimpleEntry<String,String>("abc","a")));  assertEquals(0,map.size());}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  public static void saveSAML2TokenWithoutSecondaryKey(String primaryKey,Object samlObj,long expirationTime) throws SAML2TokenRepositoryException {  saveSAML2Token(primaryKey,null,samlObj,expirationTime);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof MSISDNPrincipal)) {    return false;  }  MSISDNPrincipal that=(MSISDNPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public double scalar_product(PlaPointFloat p_1,PlaPointFloat p_2){  if (p_1 == null || p_2 == null) {    System.out.println("FloatPoint.scalar_product: parameter point is null");    return 0;  }  double dx_1=p_1.v_x - v_x;  double dx_2=p_2.v_x - v_x;  double dy_1=p_1.v_y - v_y;  double dy_2=p_2.v_y - v_y;  return (dx_1 * dx_2 + dy_1 * dy_2);}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public void publishRecovery(ReplicationMsg msg){  publish(msg,true,true);}  }
class C{  public boolean delete(Long failedActionID){  if (failedActionID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_FAILEDACTIONID + "=" + failedActionID,null) > 0;}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.CredentialsContextElement createCredentialsContextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.CredentialsContextElementImpl();}  }
class C{  public static boolean isOID(String alias){  return ObjectIdentifier.isOID(normalize(alias));}  }
class C{  public SAMLException(Throwable t){  super(t);}  }
class C{  public void create(String tokenID,String objName,Map attributes) throws SMSException, SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::create dn: " + objName);  }  SMSEntry entry=new SMSEntry(getToken(tokenID),objName);  entry.setAttributes(attributes);  entry.save();}  }
class C{  public LocalBackendSearchOperation(SearchOperation search){  super(search);  LocalBackendWorkflowElement.attachLocalOperation(search,this);}  }
class C{  public String createAuthnRequestEnvelope(HttpServletRequest request){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSLoginHelper.createAuthnRequestEnvelope(): called" + request.getParameter("metaAlias"));  }  try {    String metaAlias=request.getParameter("metaAlias");    setMetaInfo(metaAlias,null);    FSAuthnRequest authnRequest=null;    Map headerMap=new HashMap();    Enumeration headerNames=request.getHeaderNames();    while (headerNames.hasMoreElements()) {      String hn=headerNames.nextElement().toString();      String hv=request.getHeader(hn);      headerMap.put(hn,hv);    }    Set idpSet=getIDPs(metaAlias);    String LRURL=request.getParameter(IFSConstants.LRURL);    if (LRURL == null || LRURL.equals("")) {      LRURL=FSServiceUtils.getFederationDonePageURL(request,hostConfig,metaAlias);    }    authnRequest=getAuthnReq(headerMap,LRURL,true);    authnRequest.setMinorVersion(FSServiceUtils.getMinorVersion(hostDescriptor.getProtocolSupportEnumeration()));    if (authnRequest == null) {      FSUtils.debug.error("FSLoginHelper.createAuthnRequest()::AuthnRequest is null");      return errorPage + "&" + IFSConstants.FEDERROR+ "="+ URLEncDec.encode("Unable to create AuthnRequest")+ "&"+ IFSConstants.FEDREMARK+ "="+ URLEncDec.encode("Please check your Federation Configuration.");    }    String requestID=authnRequest.getRequestID();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLoginHelper.createAuthnRequest()::RequestID: " + requestID);    }    FSSessionManager sessMngr=FSSessionManager.getInstance(metaAlias);    sessMngr.setAuthnRequest(requestID,authnRequest);    Object ssoToken=SessionManager.getProvider().getSession(request);    if (ssoToken != null) {      sessMngr.setLocalSessionToken(requestID,ssoToken);    }    FSAuthnRequestEnvelope authnRequestEnvelope=null;    boolean isPassive=false;    FSIDPList idpList=null;    String assertionConsumerURL=FSServiceUtils.getAssertionConsumerServiceURL(hostDescriptor,null);    List idpEntryList=null;    String idpID=null;    String idpLocation=null;    Iterator iter=idpSet.iterator();    while (iter.hasNext()) {      idpID=(String)iter.next();      if (idpID != null) {        IDPDescriptorType idpDescr=metaManager.getIDPDescriptor(realm,idpID);        idpLocation=idpDescr.getSingleSignOnServiceURL();        if (idpEntryList == null) {          idpEntryList=new ArrayList();        }        idpEntryList.add(new IDPEntry(idpID,idpID,idpLocation));      }    }    int minorVersion=FSServiceUtils.getMinorVersion(hostDescriptor.getProtocolSupportEnumeration());    IDPEntries idpEntries=new IDPEntries(idpEntryList);    idpList=new FSIDPList(idpEntries,null);    idpList.setMinorVersion(minorVersion);    if (FSServiceUtils.isSigningOn()) {      if (hostDescriptor.isAuthnRequestsSigned()) {        authnRequest.signXML(IDFFMetaUtils.getFirstAttributeValueFromConfig(hostConfig,IFSConstants.SIGNING_CERT_ALIAS));      }    }    authnRequestEnvelope=new FSAuthnRequestEnvelope(authnRequest,hostEntityID,hostEntityID,assertionConsumerURL,idpList,isPassive);    authnRequestEnvelope.setMinorVersion(minorVersion);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLoginHelper.createAuthnRequest: " + "AuthnRequestEnvelope: " + authnRequestEnvelope.toXMLString());    }    return authnRequestEnvelope.toXMLString();  } catch (  Exception e) {    FSUtils.debug.error("FSLoginHelper.createAuthnRequest():Exception Occured: ",e);    return null;  }}  }
class C{  public FrameBodyTDEN(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  private <C1 extends ConfigurationClient>List<ManagedObject<? extends C1>> findReferences(ManagementContext context,AbstractManagedObjectDefinition<C1,?> mod,String name) throws LdapException {  List<ManagedObject<? extends C1>> instances=findInstances(context,mod);  Iterator<ManagedObject<? extends C1>> i=instances.iterator();  while (i.hasNext()) {    ManagedObject<? extends C1> mo=i.next();    boolean hasReference=false;    for (    String value : mo.getPropertyValues(AggregationPropertyDefinition.this)) {      if (compare(value,name) == 0) {        hasReference=true;        break;      }    }    if (!hasReference) {      i.remove();    }  }  return instances;}  }
class C{  public InvalidAttributeValueException(String explanation){  super(explanation);}  }
class C{  public double lengthSquared(){  return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);}  }
class C{  public static List<Foo> findByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().findByUuid_C(uuid,companyId);}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreatepi1.class,args);}  }
class C{  static boolean spanSetFromAttributes(int axis,SizeRequirements r,CSS.LengthValue cssWidth,CSS.LengthValue cssHeight){  if (axis == X_AXIS) {    if ((cssWidth != null) && (!cssWidth.isPercentage())) {      r.minimum=r.preferred=r.maximum=(int)cssWidth.getValue();      return true;    }  } else {    if ((cssHeight != null) && (!cssHeight.isPercentage())) {      r.minimum=r.preferred=r.maximum=(int)cssHeight.getValue();      return true;    }  }  return false;}  }
class C{  public IMP_LIMIT(){  this("");}  }
class C{  private ServiceTracker<?,?> initServiceTracker(BundleContext context){  ServiceTracker<?,?> tracker=new ServiceTrackerNotifier<>(context,ClusterManagementService.class.getName(),null,this);  tracker.open();  return tracker;}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public static PropertyException illegalPropertyValueException(final PropertyDefinition<?> pd,final Object value){  return new PropertyException(pd,createMessage(pd,value));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrchildnodes1.class,args);}  }
class C{  public final boolean isOnKeyRelease(){  return onKeyRelease;}  }
class C{  public void readFully(byte[] data,int offset,int length) throws IOException, EOFException {  int remaining=length;  while (remaining > 0) {    int location=offset + length - remaining;    int count=read(data,location,remaining);    if (-1 == count) {      throw new EOFException();    }    remaining-=count;  }}  }
class C{  @Override public void bindView(View view,Context context,Cursor cursor){  ViewHolder viewHolder=(ViewHolder)view.getTag();  int stationType=cursor.getInt(cursor.getColumnIndex(FmRadioStation.Station.COLUMN_STATION_TYPE));  int stationFreq=cursor.getInt(cursor.getColumnIndex(FmRadioStation.Station.COLUMN_STATION_FREQ));  String stationName=cursor.getString(cursor.getColumnIndex(FmRadioStation.Station.COLUMN_STATION_NAME));  if (FmRadioStation.STATION_TYPE_FAVORITE == stationType) {    viewHolder.mStationTypeView.setImageResource(R.drawable.btn_fm_favorite_on);  } else {    viewHolder.mStationTypeView.setImageResource(0);  }  viewHolder.mStationFreqView.setText(FmRadioUtils.formatStation(stationFreq));  viewHolder.mStationNameView.setText(stationName);}  }
class C{  private Polyline smoothen_corners(Polyline p_polyline){  if (p_polyline.plaline_len() < 4)   return p_polyline;  boolean polyline_changed=false;  PlaLineIntAlist line_arr=p_polyline.alist_copy(10);  for (int index=0; index < line_arr.size(-3); ++index) {    PlaLineInt new_line=smoothen_corner(line_arr,index);    if (new_line == null)     continue;    polyline_changed=true;    line_arr.add(index + 2,new_line);    ++index;  }  if (!polyline_changed)   return p_polyline;  return new Polyline(line_arr);}  }
class C{  public MediaDescription createMediaDescription(String media,int port,int numPorts,String transport,String[] formats){  MediaDescriptionImpl mediaDescriptionImpl=new MediaDescriptionImpl();  try {    MediaField mediaImpl=new MediaField();    mediaImpl.setMediaType(media);    mediaImpl.setMediaPort(port);    mediaImpl.setPortCount(numPorts);    mediaImpl.setProtocol(transport);    Vector formatsV=new Vector(formats.length);    for (int i=0; i < formats.length; i++)     formatsV.add(formats[i]);    mediaImpl.setMediaFormats(formatsV);    mediaDescriptionImpl.setMedia(mediaImpl);  } catch (  SdpException s) {    s.printStackTrace();  }  return mediaDescriptionImpl;}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  FSUtils.debug.message("FSAuthnResponse.toBASE64EncodedString: Called");  if ((responseID == null) || (responseID.length() == 0)) {    responseID=FSUtils.generateID();    if (responseID == null) {      FSUtils.debug.error("FSAuthnResponse.toBASE64EncodedString: " + "couldn't generate ResponseID.");      throw new FSMsgException("errorGenerateID",null);    }  }  return Base64.encode(this.toXMLString(true,true).getBytes());}  }
class C{  public ReplyMessageAttribute(String message){  super(OctetUtils.toOctets(AttributeType.REPLY_MESSAGE,message));  this.msg=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  protected void paintIcon(Graphics g,AbstractButton b,Rectangle iconRect){  super.paintIcon(g,b,iconRect);}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  public String toString(){  return this.toBigInteger(sign).toString();}  }
class C{  public ScriptCompiler shiftLeft(String sourceName,Reader source){  sources.put(sourceName,source);  return this;}  }
class C{  public Result modifyDN(ModifyDNRequest request) throws LdapException {  addTransactionIdControl(request);  return connection.modifyDN(request);}  }
class C{  public Cache(int pref_size){  this(pref_size,9);}  }
class C{  public void write(String fileName) throws IOException {  FileOutputStream outputFile;  byte profileData[];  profileData=getData();  outputFile=new FileOutputStream(fileName);  outputFile.write(profileData);  outputFile.close();}  }
class C{  protected static TrustAnchor findTrustAnchor(X509Certificate cert,Set trustAnchors) throws AnnotatedException {  return findTrustAnchor(cert,trustAnchors,null);}  }
class C{  public ConfigureGoogleAppsCompleteViewBean(){  super("ConfigureGoogleAppsComplete");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public static boolean isNotBlank(final String s){  return (s != null && s.trim().length() > 0);}  }
class C{  public boolean visitStep(ExpressionOwner owner,NodeTest step){  return true;}  }
class C{  Node(){  this.children=new Node[256];  this.symbol=0;  this.terminalBits=0;}  }
class C{  public static void dumpApplicationInfoList(String tag,String label,ArrayList<AppInfo> list){  Log.d(tag,label + " size=" + list.size());  for (  AppInfo info : list) {    Log.d(tag,"   title=\"" + info.title + "\" iconBitmap="+ info.iconBitmap+ " firstInstallTime="+ info.firstInstallTime+ " componentName="+ info.componentName.getPackageName());  }}  }
class C{  public AsfTagTextField createField(final AsfFieldKey asfFieldKey,final String value){  if (value == null) {    throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());  }  if (asfFieldKey == null) {    throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());  }switch (asfFieldKey) {case COVER_ART:    throw new UnsupportedOperationException("Cover Art cannot be created using this method");case BANNER_IMAGE:  throw new UnsupportedOperationException("Banner Image cannot be created using this method");default :return new AsfTagTextField(asfFieldKey.getFieldName(),value);}}  }
class C{  private void init_key(){  P=P_orig.clone();  S=S_orig.clone();}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  CloseWindowViewBean vb=(CloseWindowViewBean)getViewBean(CloseWindowViewBean.class);  vb.forwardTo(getRequestContext());}  }
class C{  public static boolean isGetPostAllowed(SSOToken userToken,String url,String scope) throws SSOException, PolicyException, NameNotFoundException {  PolicyEvaluator pe=new PolicyEvaluator(IPLANETAMWEBAGENTSERVICE);  Set<ResourceResult> resResults=pe.getResourceResults(userToken,url,scope,Collections.EMPTY_MAP);  ResourceResult resResult=resResults.iterator().next();  PolicyDecision pd=resResult.getPolicyDecision();  Map<String,ActionDecision> decisions=pd.getActionDecisions();  ActionDecision get=decisions.get(GET_ACTION);  ActionDecision post=decisions.get(POST_ACTION);  return (get != null && get.getValues().contains(ALLOW_DECISION)) && (post != null && post.getValues().contains(ALLOW_DECISION));}  }
class C{  @Activate protected void activate(ComponentContext context){  reset();}  }
class C{  public IndexIdentifier(Object... components){  super(components);}  }
class C{  public void toggle_clearance_violations(){  if (clearance_violations == null) {    clearance_violations=new IteraClearanceViolations(items_list);    int violation_count=clearance_violations.violation_list.size();    String curr_message=violation_count + " " + resources.getString("clearance_violations_found");    i_brd.screen_messages.set_status_message(curr_message);  } else {    clearance_violations=null;    i_brd.screen_messages.set_status_message("");  }  i_brd.repaint();}  }
class C{  public NewID createNewID(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NEWID,value);  if (obj == null) {    return new NewIDImpl(value);  } else {    return (NewID)obj;  }}  }
class C{  private byte[] createSegmentTable(int newCommentLength,int setupHeaderLength,List<OggPageHeader.PacketStartAndLength> extraPackets){  logger.finest("Create SegmentTable CommentLength:" + newCommentLength + ":SetupHeaderLength:"+ setupHeaderLength);  ByteArrayOutputStream resultBaos=new ByteArrayOutputStream();  byte[] newStart;  byte[] restShouldBe;  byte[] nextPacket;  if (setupHeaderLength == 0) {    newStart=createSegments(newCommentLength,false);    return newStart;  } else {    newStart=createSegments(newCommentLength,true);  }  if (extraPackets.size() > 0) {    restShouldBe=createSegments(setupHeaderLength,true);  } else {    restShouldBe=createSegments(setupHeaderLength,false);  }  logger.finest("Created " + newStart.length + " segments for header");  logger.finest("Created " + restShouldBe.length + " segments for setup");  try {    resultBaos.write(newStart);    resultBaos.write(restShouldBe);    if (extraPackets.size() > 0) {      logger.finer("Creating segments for " + extraPackets.size() + " packets");      for (      OggPageHeader.PacketStartAndLength packet : extraPackets) {        nextPacket=createSegments(packet.getLength(),false);        resultBaos.write(nextPacket);      }    }  } catch (  IOException ioe) {    throw new RuntimeException("Unable to create segment table:" + ioe.getMessage());  }  return resultBaos.toByteArray();}  }
class C{  private void searchTree(char searchTerm,List<TreeNode> candidates,SearchContext context){  List<TreeNode> previousCandidates=new ArrayList<TreeNode>(candidates);  candidates.clear();  for (  TreeNode previousCandidate : previousCandidates) {    electWildcard(searchTerm,previousCandidate,candidates,context);    electChildren(searchTerm,previousCandidate.getChild(),candidates,context);  }}  }
class C{  protected JComponent createEditor(){  JComponent editor=spinner.getEditor();  maybeRemoveEditorBorder(editor);  installEditorBorderListener(editor);  editor.setInheritsPopupMenu(true);  updateEditorAlignment(editor);  return editor;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public boolean contains(int s){  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == s)     return true;  }  return false;}  }
class C{  public void deleteEntity(String ssoToken,String entityName,String entityType,String entityLocation) throws EntityException, SSOException {  initializeObject(ssoToken,entityLocation);  Set entityNameSet=new HashSet();  try {    int type=0;    type=getIntTypeFromStr(entityType);    String entDN=getEntityDN(entityName,type,entityLocation);    entityNameSet.add(entDN);    if (entity != null) {      entity.deleteEntities(type,entityNameSet);      if (EntityUtils.debug.messageEnabled()) {        EntityUtils.debug.message("EntityObjectImpl.deleteEntity():" + " Deleted " + entityNameSet.toString());      }    }  } catch (  AMException amex) {    EntityUtils.debug.error("EntityObjectImpl.deleteEntity() : " + "Delete Entity Failed. " + amex);    throw EntityUtils.convertException(amex);  }}  }
class C{  public void removeLoader(String name) throws Exception {  ObjectName oname=new ObjectName(name);  Container container=getParentContainerFromChild(oname);  if (container instanceof Context) {    ((Context)container).setLoader(null);  }}  }
class C{  @Override public int compare(Tree tree1,Tree tree2){  return priority(tree1) - priority(tree2);}  }
class C{  public static String formatDate(final Date date,final String pattren){  final SimpleDateFormat formatter=new SimpleDateFormat(pattren,new Locale("en","US"));  if (date == null) {    return "";  }  return formatter.format(date);}  }
class C{  public static boolean isLauncherAppTarget(Intent launchIntent){  if (launchIntent != null && Intent.ACTION_MAIN.equals(launchIntent.getAction()) && launchIntent.getComponent() != null && launchIntent.getCategories() != null && launchIntent.getCategories().size() == 1 && launchIntent.hasCategory(Intent.CATEGORY_LAUNCHER) && TextUtils.isEmpty(launchIntent.getDataString())) {    Bundle extras=launchIntent.getExtras();    if (extras == null) {      return true;    } else {      Set<String> keys=extras.keySet();      return keys.size() == 1 && keys.contains(ItemInfo.EXTRA_PROFILE);    }  }  ;  return false;}  }
class C{  void migratedEnvironmentCondition(String from,String to){  environmentConditionMigration.put(from,to);}  }
class C{  private void requestPermissions(){  if (ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {    ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},MY_PERMISSIONS_REQUEST_WRITE_STORAGE);  } else {    dispatchTakePictureIntent();  }}  }
class C{  public static void doSSOFederate(HttpServletRequest request,HttpServletResponse response,PrintWriter out,AuthnRequest authnReq,String spEntityID,String idpMetaAlias,String nameIDFormat,String relayState,SAML2EventLogger auditor) throws SAML2Exception {  doSSOFederate(request,response,out,authnReq,spEntityID,idpMetaAlias,nameIDFormat,relayState,null,auditor);}  }
class C{  protected KeyFactory(KeyFactorySpi keyFacSpi,Provider provider,String algorithm){  this.spi=keyFacSpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  public void fatalError(SAXParseException spe) throws SAXParseException {  PolicyManager.debug.error(spe.getMessage() + "\nLine Number in XML file : " + spe.getLineNumber()+ "\nColumn Number in XML file : "+ spe.getColumnNumber());}  }
class C{  public FrameBodyTALB(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  @Override public synchronized String toString(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {    MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"toString()","Entry");  }  String respStr="";  String[] fields=getFields();  if ((fields == null) || (fields.length == 0)) {    if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {      MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"toString()","Empty Descriptor");    }    return respStr;  }  if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {    MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"toString()","Printing " + fields.length + " fields");  }  for (int i=0; i < fields.length; i++) {    if (i == (fields.length - 1)) {      respStr=respStr.concat(fields[i]);    } else {      respStr=respStr.concat(fields[i] + ", ");    }  }  if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {    MODELMBEAN_LOGGER.logp(Level.FINEST,DescriptorSupport.class.getName(),"toString()","Exit returning " + respStr);  }  return respStr;}  }
class C{  @Override public void reset(){  this.response.reset();}  }
class C{  static DnTemplate compile(String template){  return compile(template,false);}  }
class C{  static boolean criteriaIsValid(final Schema schema,final String criteria,final String valueStr,final LocalizableMessageBuilder invalidReason){  char c=criteria.charAt(0);  if (c == '!') {    return criteriaIsValid(schema,criteria.substring(1),valueStr,invalidReason);  }  if (c == '(') {    final int length=criteria.length();    int depth=1;    for (int i=1; i < length; i++) {      c=criteria.charAt(i);      if (c == ')') {        depth--;        if (depth == 0) {          final String subCriteria=criteria.substring(1,i);          if (!criteriaIsValid(schema,subCriteria,valueStr,invalidReason)) {            return false;          }          if (i == length - 1) {            return true;          } else {            c=criteria.charAt(i + 1);            if (c == '|' || c == '&') {              return criteriaIsValid(schema,criteria.substring(i + 2),valueStr,invalidReason);            } else {              invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_ILLEGAL_CHAR.get(valueStr,criteria,c,i + 1));              return false;            }          }        }      } else       if (c == '(') {        depth++;      }    }    invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_MISSING_CLOSE_PAREN.get(valueStr,criteria));    return false;  }  if (c == '?') {    if (criteria.startsWith("?true")) {      if (criteria.length() == 5) {        return true;      } else {        c=criteria.charAt(5);        if (c == '|' || c == '&') {          return criteriaIsValid(schema,criteria.substring(6),valueStr,invalidReason);        } else {          invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_ILLEGAL_CHAR.get(valueStr,criteria,c,5));          return false;        }      }    } else     if (criteria.startsWith("?false")) {      if (criteria.length() == 6) {        return true;      } else {        c=criteria.charAt(6);        if (c == '|' || c == '&') {          return criteriaIsValid(schema,criteria.substring(7),valueStr,invalidReason);        } else {          invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_ILLEGAL_CHAR.get(valueStr,criteria,c,6));          return false;        }      }    } else {      invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_QUESTION_MARK.get(valueStr,criteria));      return false;    }  }  if ("true".equals(criteria) || "false".equals(criteria)) {    return true;  }  final int dollarPos=criteria.indexOf('$');  if (dollarPos < 0) {    invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_NO_DOLLAR.get(valueStr,criteria));    return false;  } else   if (dollarPos == 0) {    invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_NO_ATTR.get(valueStr,criteria));    return false;  } else   if (dollarPos == criteria.length() - 1) {    invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_NO_MATCH_TYPE.get(valueStr,criteria));    return false;  } else {    try {      readOID(new SubstringReader(criteria.substring(0,dollarPos)),schema.getOption(ALLOW_MALFORMED_NAMES_AND_OPTIONS));    } catch (    final DecodeException de) {      invalidReason.append(de.getMessageObject());      return false;    }  }  int endPos;  c=criteria.charAt(dollarPos + 1);switch (c) {case 'e':    if (criteria.startsWith("eq",dollarPos + 1)) {      endPos=dollarPos + 3;      break;    } else {      invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));      return false;    }case 's':  if (criteria.startsWith("substr",dollarPos + 1)) {    endPos=dollarPos + 7;    break;  } else {    invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));    return false;  }case 'g':if (criteria.startsWith("ge",dollarPos + 1)) {  endPos=dollarPos + 3;  break;} else {  invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));  return false;}case 'l':if (criteria.startsWith("le",dollarPos + 1)) {endPos=dollarPos + 3;break;} else {invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));return false;}case 'a':if (criteria.startsWith("approx",dollarPos + 1)) {endPos=dollarPos + 7;break;} else {invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));return false;}default :invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));return false;}if (endPos >= criteria.length()) {return true;} else {c=criteria.charAt(endPos);if (c == '|' || c == '&') {return criteriaIsValid(schema,criteria.substring(endPos + 1),valueStr,invalidReason);} else {invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_ILLEGAL_CHAR.get(valueStr,criteria,c,endPos));return false;}}}  }
class C{  public Object clone() throws CloneNotSupportedException {  if (this instanceof Cloneable) {    return super.clone();  } else {    throw new CloneNotSupportedException();  }}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public AttributeMissingException(Throwable cause){  super(cause);}  }
class C{  public JToggleButton(){  this(null,null,false);}  }
class C{  public static void parallelSort(byte[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1); else   new ArraysParallelSortHelpers.FJByte.Sorter(null,a,new byte[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.StatusElementImpl();}  }
class C{  private TextImpl nextTextNode(){  Node nextSibling=getNextSibling();  if (nextSibling == null) {    return null;  }  short nodeType=nextSibling.getNodeType();  return nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE ? (TextImpl)nextSibling : null;}  }
class C{  public synchronized void sendMessage(byte message[],InetAddress receiverAddress,int receiverPort,boolean retry) throws IOException {  if (message == null || receiverAddress == null)   throw new IllegalArgumentException("Null argument");  if (peerPortAdvertisedInHeaders <= 0) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("receiver port = " + receiverPort + " for this channel "+ this+ " key "+ key);    }    if (receiverPort <= 0) {      this.peerPortAdvertisedInHeaders=5060;    } else {      this.peerPortAdvertisedInHeaders=receiverPort;    }    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("2.Storing peerPortAdvertisedInHeaders = " + peerPortAdvertisedInHeaders + " for this channel "+ this+ " key "+ key);    }  }  Socket sock=null;  IOException problem=null;  try {    sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),receiverAddress,receiverPort,"TLS",message,retry,this);  } catch (  IOException any) {    problem=any;    logger.logWarning("Failed to connect " + this.peerAddress + ":"+ receiverPort+ " but trying the advertised port="+ this.peerPortAdvertisedInHeaders+ " if it's different than the port we just failed on, rcv addr="+ receiverAddress+ ", port="+ receiverPort);    logger.logError("Error is ",any);  }  if (sock == null) {    if (peerAddressAdvertisedInHeaders != null && peerPortAdvertisedInHeaders > 0) {      logger.logWarning("Couldn't connect to receiverAddress = " + receiverAddress + " receiverPort = "+ receiverPort+ " key = "+ key+ " retrying on peerPortAdvertisedInHeaders "+ peerPortAdvertisedInHeaders);      InetAddress address=InetAddress.getByName(peerAddressAdvertisedInHeaders);      sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),address,this.peerPortAdvertisedInHeaders,"TLS",message,retry,this);      this.peerPort=this.peerPortAdvertisedInHeaders;      this.peerAddress=address;      this.key=MessageChannel.getKey(peerAddress,peerPortAdvertisedInHeaders,"TLS");      logger.logWarning("retry suceeded to receiverAddress = " + receiverAddress + " peerPortAdvertisedInHeaders = "+ peerPortAdvertisedInHeaders+ " key = "+ key);    } else {      throw problem;    }  }  if (sock != mySock && sock != null) {    if (mySock != null) {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("Old socket different than new socket on channel " + key);        logger.logStackTrace();        logger.logWarning("Old socket local ip address " + mySock.getLocalSocketAddress());        logger.logWarning("Old socket remote ip address " + mySock.getRemoteSocketAddress());        logger.logWarning("New socket local ip address " + sock.getLocalSocketAddress());        logger.logWarning("New socket remote ip address " + sock.getRemoteSocketAddress());      }      close(false,false);    }    if (problem == null) {      if (mySock != null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {          logger.logWarning("There was no exception for the retry mechanism so creating a new thread based on the new socket for incoming " + key);        }      }      mySock=sock;      this.myClientInputStream=mySock.getInputStream();      Thread mythread=new Thread(this);      mythread.setDaemon(true);      mythread.setName("TCPMessageChannelThread");      mythread.start();    } else {      if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {        logger.logWarning("There was an exception for the retry mechanism so not creating a new thread based on the new socket for incoming " + key);      }      mySock=sock;    }  }}  }
class C{  public void testCase4(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=1;  int bSign=1;  byte rBytes[]={10,40,100,-55,96,51,76,40,-45,85,115,44,-127,115,-21,-62,-15,85,64,-87,-2,-36,-36,-106};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public void write(int ch) throws IOException {  OutputStream output=m_streams.get();  if (null != output) {    output.write(ch);  }}  }
class C{  private static LDAPFilter decode(String filterString,int startPos,int endPos) throws LDAPException {  int length=endPos - startPos;  if (length <= 0) {    LocalizableMessage message=ERR_LDAP_FILTER_STRING_NULL.get();    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }  if (1 < filterString.length() && filterString.startsWith("'") && filterString.endsWith("'")) {    LocalizableMessage message=ERR_LDAP_FILTER_ENCLOSED_IN_APOSTROPHES.get(filterString);    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }  if (filterString.charAt(startPos) == '(') {    if (filterString.charAt(endPos - 1) == ')') {      startPos++;      endPos--;    } else {      LocalizableMessage message=ERR_LDAP_FILTER_MISMATCHED_PARENTHESES.get(filterString,startPos,endPos);      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);    }  }  char c=filterString.charAt(startPos);  if (c == '&') {    return decodeCompoundFilter(FilterType.AND,filterString,startPos + 1,endPos);  } else   if (c == '|') {    return decodeCompoundFilter(FilterType.OR,filterString,startPos + 1,endPos);  } else   if (c == '!') {    return decodeCompoundFilter(FilterType.NOT,filterString,startPos + 1,endPos);  }  int equalPos=-1;  for (int i=startPos; i < endPos; i++) {    if (filterString.charAt(i) == '=') {      equalPos=i;      break;    }  }  if (equalPos <= startPos) {    LocalizableMessage message=ERR_LDAP_FILTER_NO_EQUAL_SIGN.get(filterString,startPos,endPos);    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }  int attrEndPos;  FilterType filterType;switch (filterString.charAt(equalPos - 1)) {case '~':    filterType=FilterType.APPROXIMATE_MATCH;  attrEndPos=equalPos - 1;break;case '>':filterType=FilterType.GREATER_OR_EQUAL;attrEndPos=equalPos - 1;break;case '<':filterType=FilterType.LESS_OR_EQUAL;attrEndPos=equalPos - 1;break;case ':':return decodeExtensibleMatchFilter(filterString,startPos,equalPos,endPos);default :filterType=FilterType.EQUALITY;attrEndPos=equalPos;break;}String attrType=filterString.substring(startPos,attrEndPos);for (int i=0; i < attrType.length(); i++) {switch (attrType.charAt(i)) {case '-':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case ';':case '=':case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case '_':case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':break;case '.':case '/':case ':':case '<':case '>':case '?':case '@':case '[':case '\\':case ']':case '^':case '`':default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_CHAR_IN_ATTR_TYPE.get(attrType,attrType.charAt(i),i);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}}String valueStr=filterString.substring(equalPos + 1,endPos);if (valueStr.length() == 0) {return new LDAPFilter(filterType,null,null,attrType,ByteString.empty(),null,null,null,null,false);} else if (valueStr.equals("*")) {return new LDAPFilter(FilterType.PRESENT,null,null,attrType,null,null,null,null,null,false);} else if (valueStr.indexOf('*') >= 0) {return decodeSubstringFilter(filterString,attrType,equalPos,endPos);} else {boolean hasEscape=false;byte[] valueBytes=getBytes(valueStr);for (byte valueByte : valueBytes) {if (valueByte == 0x5C) {hasEscape=true;break;}}ByteString value;if (hasEscape) {ByteStringBuilder valueBuffer=new ByteStringBuilder(valueStr.length());for (int i=0; i < valueBytes.length; i++) {if (valueBytes[i] == 0x5C) {if (i + 2 >= valueBytes.length) {LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}byte byteValue=0;switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue=(byte)0x10;break;case 0x32:byteValue=(byte)0x20;break;case 0x33:byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}valueBuffer.appendByte(byteValue);} else {valueBuffer.appendByte(valueBytes[i]);}}value=valueBuffer.toByteString();} else {value=ByteString.wrap(valueBytes);}return new LDAPFilter(filterType,null,null,attrType,value,null,null,null,null,false);}}  }
class C{  public ModifyRequestProtocolOp(ByteString dn){  this.dn=dn;  this.modifications=new ArrayList<>();}  }
class C{  public SSLSocketFactory(javax.net.ssl.SSLSocketFactory socketfactory){  super();  this.sslcontext=null;  this.socketfactory=socketfactory;  this.nameResolver=null;}  }
class C{  public final int skipBytes(int n) throws IOException {  int total=0;  int cur=0;  while ((total < n) && ((cur=(int)in.skip(n - total)) > 0)) {    total+=cur;  }  return total;}  }
class C{  public int size(){  return count;}  }
class C{  public static int resetPreParseCount(){  return preParseCounter.getAndSet(0);}  }
class C{  private void handleException(Exception ex) throws Throwable {  Throwable realException;  if (ex instanceof PrivilegedActionException) {    ex=((PrivilegedActionException)ex).getException();  }  if (ex instanceof InvocationTargetException) {    realException=ex.getCause();    if (realException == null) {      realException=ex;    }  } else {    realException=ex;  }  throw realException;}  }
class C{  public static String makeKey(String host,int port,String transport){  return new StringBuilder(host).append(":").append(port).append("/").append(transport).toString().toLowerCase();}  }
class C{  public PrivilegeSet(){  this.privileges=new ArrayList<>();  this.applications=new ArrayList<>();  this.resourceTypes=new ArrayList<>();  this.referralPrivileges=new ArrayList<>();}  }
class C{  public boolean is_diagonal_right(){  return dir_x == dir_y;}  }
class C{  public static double bearing(Point p1,Point p2){  double degrees2radians=Math.PI / 180;  double radians2degrees=180 / Math.PI;  Position coordinates1=p1.getCoordinates();  Position coordinates2=p2.getCoordinates();  double lon1=degrees2radians * coordinates1.getLongitude();  double lon2=degrees2radians * coordinates2.getLongitude();  double lat1=degrees2radians * coordinates1.getLatitude();  double lat2=degrees2radians * coordinates2.getLatitude();  double a=Math.sin(lon2 - lon1) * Math.cos(lat2);  double b=Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);  return radians2degrees * Math.atan2(a,b);}  }
class C{  public ParserConfigurationException(String msg){  super(msg);}  }
class C{  public void print(File file) throws IOException {  checkExec();  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPrintJobAccess();  }  checkActionSupport(Action.PRINT);  checkFileValidation(file);  peer.print(file);}  }
class C{  private boolean complete_expansion_room(ExpandRoomFreespaceIncomplete p_incomplete_room){  Collection<ExpandRoomFreespaceComplete> completed_rooms=autoroute_engine.complete_expansion_room(p_incomplete_room);  return (completed_rooms.size() > 0);}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);}  }
class C{  public ExtendedType(int nodetype,String namespace,String localName,int hash){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=hash;}  }
class C{  public long skip(long n) throws IOException {  if (n < 0L) {    throw new IllegalArgumentException("skip value is negative");  }synchronized (lock) {    ensureOpen();    long r=n;    while (r > 0) {      if (nextChar >= nChars)       fill();      if (nextChar >= nChars)       break;      if (skipLF) {        skipLF=false;        if (cb[nextChar] == '\n') {          nextChar++;        }      }      long d=nChars - nextChar;      if (r <= d) {        nextChar+=r;        r=0;        break;      } else {        r-=d;        nextChar=nChars;      }    }    return n - r;  }}  }
class C{  public FrameBodyWOAS(String urlLink){  super(urlLink);}  }
class C{  public boolean isSIPAddress(){  return address instanceof SipUri;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchild.class,args);}  }
class C{  public static SASLContext createSASLContext(final HashMap<String,String> saslProps,final String serverFQDN,final String mechanism,final IdentityMapper<?> identityMapper) throws SaslException {  return new SASLContext(saslProps,serverFQDN,mechanism,identityMapper);}  }
class C{  public Object parse(String s) throws Exception {  ByteArrayInputStream bin=null;  String st=stripWhitespaces(s);  try {    bin=new ByteArrayInputStream(st.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException ex) {    throw new Exception("Encoding not supported:" + ex.toString());  }  return parse(bin);}  }
class C{  public SchemaBuilder addToSchemaOverwrite(){  return addToSchema(true);}  }
class C{  public CMSSignedData generate(CMSProcessable content,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return generate(content,false,sigProvider);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.ExtensionsElement createExtensionsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.ExtensionsElementImpl();}  }
class C{  public void swap(String displayName,String viewBeanClassName,Map pageSessionAttributeValues){  trail.remove(trail.size() - 1);  trail.add(new Marker(displayName,viewBeanClassName,pageSessionAttributeValues));}  }
class C{  public Entitlement(String applicationName,String resourceName,Set<String> actionNames){  setApplicationName(applicationName);  setResourceName(resourceName);  setActionNames(actionNames);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void install(JFormattedTextField ftf){  super.install(ftf);  positionCursorAtInitialLocation();}  }
class C{  public static boolean isFileNewer(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileNewer(file,date.getTime());}  }
class C{  public AddOperation processAdd(Entry entry){  return processAdd(entry,null);}  }
class C{  public Set<ReferralPrivilege> searchReferral(SSOToken adminToken,String realm,BufferedIterator iterator,ResourceSearchIndexes indexes,boolean bSubTree,Set<String> excludeDNs) throws EntitlementException {  Set<ReferralPrivilege> results=new HashSet<ReferralPrivilege>();  String filter=getFilter(indexes,null,bSubTree);  String baseDN=getSearchBaseDN(realm,REFERRAL_STORE);  if (PolicyConstants.DEBUG.messageEnabled()) {    PolicyConstants.DEBUG.message("[PolicyEval] DataStore.searchReferral");    PolicyConstants.DEBUG.message("[PolicyEval] search filter: " + filter);    PolicyConstants.DEBUG.message("[PolicyEval] search DN: " + baseDN);  }  if (filter != null) {    SSOToken token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());    long start=DB_MONITOR_REFERRAL.start();    if (SMSEntry.checkIfEntryExists(baseDN,token)) {      try {        Iterator i=SMSEntry.search(token,baseDN,filter,NO_LIMIT,NO_LIMIT,NOT_SORTED,NOT_SORTED,excludeDNs);        while (i.hasNext()) {          SMSDataEntry e=(SMSDataEntry)i.next();          ReferralPrivilege referral=ReferralPrivilege.getInstance(new JSONObject(e.getAttributeValue(SERIALIZABLE_INDEX_KEY)));          iterator.add(referral);          results.add(referral);        }        iterator.isDone();      } catch (      JSONException e) {        Object[] arg={baseDN};        throw new EntitlementException(52,arg,e);      }catch (      SMSException e) {        Object[] arg={baseDN};        throw new EntitlementException(52,arg,e);      }    }    DB_MONITOR_REFERRAL.end(start);  }  return results;}  }
class C{  public void change_user_unit_factor(double p_new_factor){  PlaCoordTransform old_transform=coordinate_transform;  coordinate_transform=new PlaCoordTransform(p_new_factor,old_transform.user_unit,old_transform.board_unit_factor,old_transform.board_unit);}  }
class C{  public Boolean isSingleThreadModel(){  if (singleThreadModel || instance != null) {    return Boolean.valueOf(singleThreadModel);  }  return null;}  }
class C{  public TemplateLine(AttributeType attributeType,int lineNumber,Tag[] tags){  this(attributeType,lineNumber,tags,false,false);}  }
class C{  public static ValueExpression createValueExceptionWithValue(final Object originalValue){  return FacesContext.getCurrentInstance().getApplication().getExpressionFactory().createValueExpression(originalValue,originalValue.getClass());}  }
class C{  @Override public String toString(){  return gserValue;}  }
class C{  private void removeConstraints(Component comp){  comptable.remove(comp);}  }
class C{  public boolean isInAABB(Vector min,Vector max){  return x >= min.x && x <= max.x && y >= min.y && y <= max.y && z >= min.z && z <= max.z;}  }
class C{  public synchronized void addTextListener(TextListener l){  if (l == null) {    return;  }  textListener=AWTEventMulticaster.add(textListener,l);  newEventsOnly=true;}  }
class C{  public void draw(java.awt.Graphics p_graphics){  int corner_count=corner_list.size();  if (snapped_mouse_position != null) {    ++corner_count;  }  PlaPointFloat[] corners=new PlaPointFloat[corner_count];  java.util.Iterator<PlaPointInt> it=corner_list.iterator();  for (int i=0; i < corners.length - 1; ++i) {    corners[i]=(it.next()).to_float();  }  if (snapped_mouse_position == null) {    corners[corners.length - 1]=it.next().to_float();  } else {    corners[corners.length - 1]=snapped_mouse_position;  }  i_brd.gdi_context.draw(corners,300,java.awt.Color.white,p_graphics,0.5);}  }
class C{  public static AddressMask valueOf(final String mask){  return new AddressMask(mask);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  validateData();  StringBuffer xml=new StringBuffer(300);  xml.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xml.append(SAML2Constants.ECP_PREFIX);  }  xml.append(RESPONSE);  if (declareNS) {    xml.append(SAML2Constants.SPACE).append(SAML2Constants.ECP_DECLARE_STR).append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_DECLARE_STR);  }  xml.append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_PREFIX).append(SAML2Constants.MUST_UNDERSTAND).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(mustUnderstand.toString()).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_PREFIX).append(SAML2Constants.ACTOR).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(actor).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.ASSERTION_CONSUMER_SVC_URL).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(assertionConsumerServiceURL).append(SAML2Constants.QUOTE).append(SAML2Constants.END_TAG).append(SAML2Constants.ECP_END_TAG).append(RESPONSE).append(SAML2Constants.END_TAG);  return xml.toString();}  }
class C{  public T eval(){  return eval(bindings());}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (requestCode == REQUEST_READ_CONTACTS) {    if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {      populateAutoComplete();    }  }}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();}  }
class C{  public void makeCurrent(EGLSurface eglSurface){  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    Log.d(TAG,"NOTE: makeCurrent w/o display");  }  if (!EGL14.eglMakeCurrent(mEGLDisplay,eglSurface,eglSurface,mEGLContext)) {    throw new RuntimeException("eglMakeCurrent failed");  }}  }
class C{  public FullRequestInputStream(final InputStream source){  super(source);}  }
class C{  public java.lang.Object read_abstract_interface(java.lang.Class clz){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public void testCertPathValidator04() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathValidator.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown thrown");    } catch (    IllegalArgumentException e) {    }    try {      CertPathValidator.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public MappingWindow(){  initialize();}  }
class C{  private void emitRDFArrayTag(XMPNode arrayNode,boolean isStartTag,int indent) throws IOException {  if (isStartTag || arrayNode.hasChildren()) {    writeIndent(indent);    write(isStartTag ? "<rdf:" : "</rdf:");    if (arrayNode.getOptions().isArrayAlternate()) {      write("Alt");    } else     if (arrayNode.getOptions().isArrayOrdered()) {      write("Seq");    } else {      write("Bag");    }    if (isStartTag && !arrayNode.hasChildren()) {      write("/>");    } else {      write(">");    }    writeNewline();  }}  }
class C{  public void rewind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("rewind",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.rewind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private ChronoLocalDateTimeImpl<D> with(Temporal newDate,LocalTime newTime){  if (date == newDate && time == newTime) {    return this;  }  D cd=ChronoLocalDateImpl.ensureValid(date.getChronology(),newDate);  return new ChronoLocalDateTimeImpl<>(cd,newTime);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr oldAttribute;  NodeList addressElementList;  Element testAddress;  Attr attrAddress;  doc=(Document)load("hc_staff",true);  addressElementList=doc.getElementsByTagName("acronym");  testAddress=(Element)addressElementList.item(4);  oldAttribute=doc.createAttribute("title");{    boolean success=false;    try {      attrAddress=testAddress.removeAttributeNode(oldAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public void paintFormattedTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected void addTestEntriesToDB(String... ldifEntries) throws Exception {  for (  String ldifEntry : ldifEntries) {    Entry entry=TestCaseUtils.entryFromLdifString(ldifEntry);    AddOperation addOp=connection.processAdd(entry);    if (addOp.getResultCode() != ResultCode.SUCCESS) {      logger.trace("Failed to add entry " + entry.getName() + "Result code = : "+ addOp.getResultCode());    } else {      logger.trace(entry.getName() + " added " + addOp.getResultCode());    }  }}  }
class C{  public NewAuthInstanceViewBean(){  super("NewAuthInstance");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public Future<List<Job>> jobRange(long from,long to,String order){  Future<List<Job>> future=Future.future();  jobService.jobRange(from,to,order,future.completer());  return future;}  }
class C{  protected int proxiedStep(RouteInfo plan,RouteInfo fact){  if (fact.getHopCount() <= 1)   return UNREACHABLE;  if (!plan.getTargetHost().equals(fact.getTargetHost()))   return UNREACHABLE;  final int phc=plan.getHopCount();  final int fhc=fact.getHopCount();  if (phc < fhc)   return UNREACHABLE;  for (int i=0; i < fhc - 1; i++) {    if (!plan.getHopTarget(i).equals(fact.getHopTarget(i)))     return UNREACHABLE;  }  if (phc > fhc)   return TUNNEL_PROXY;  if ((fact.isTunnelled() && !plan.isTunnelled()) || (fact.isLayered() && !plan.isLayered()))   return UNREACHABLE;  if (plan.isTunnelled() && !fact.isTunnelled())   return TUNNEL_TARGET;  if (plan.isLayered() && !fact.isLayered())   return LAYER_PROTOCOL;  if (plan.isSecure() != fact.isSecure())   return UNREACHABLE;  return COMPLETE;}  }
class C{  public int compare(File file1,File file2){  return caseSensitivity.checkCompareTo(file1.getName(),file2.getName());}  }
class C{  public static boolean importBackup(String importFile,Context context,int widgetId){  try {    BackupData data=readSettings(new File(importFile),context,widgetId);    String backFileName=FileProvider.backFileName(widgetId);    if (BitmapUtils.saveBitmap(data.backImage,data.decoder.getRect(KEY_STRETCH),FileProvider.widgetBackFile(context,widgetId))) {    } else {      context.deleteFile(backFileName);    }    WidgetDB db=WidgetDB.get(context);    db.deleteToggles(widgetId);    for (int i=0; i < 8; i++) {      AbstractTracker tracker=data.settings.trackers[i];      if (tracker == null) {        continue;      }      if (tracker.getId().startsWith("ss_")) {        final SimpleShortcut shrt=(SimpleShortcut)tracker;        shrt.setId(SimpleShortcut.getId(widgetId,i));        db.saveShrt(shrt,data.icons[i]);      } else       if (data.icons[i] != null) {        db.saveIcon(SimpleShortcut.getId(widgetId,i),data.icons[i]);        if (tracker.getId().startsWith("pl_")) {          PluginDB.get(context).save((PluginTracker)tracker);        }      }    }    WidgetDB.closeAll();    SettingStorage.clearCache();    SettingStorage.addWidget(context,widgetId,data.decoder.settings.toString());    context.getSharedPreferences(Globals.EXTRA_PREFS_NAME,Context.MODE_PRIVATE).edit().putLong("last_edit" + widgetId,System.currentTimeMillis()).commit();    PCWidgetActivity.fullUpdateSingleWidgets(context,widgetId);    SettingStorage.cleanupCachedPlugins(context);    return true;  } catch (  Exception e) {    Debug.log(e);    return false;  }}  }
class C{  public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_short",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_short(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected LayoutManager createLayoutManager(){  if (tabPane.getTabLayoutPolicy() == JTabbedPane.SCROLL_TAB_LAYOUT) {    return new TabbedPaneScrollLayout();  } else {    return new TabbedPaneLayout();  }}  }
class C{  protected Object allocateArray(int len){  return new char[len];}  }
class C{  protected GridBagConstraints lookupConstraints(Component comp){  GridBagConstraints constraints=comptable.get(comp);  if (constraints == null) {    setConstraints(comp,defaultConstraints);    constraints=comptable.get(comp);  }  return constraints;}  }
class C{  @Override public Object runScriptOnResource(ScriptContext request,OperationOptions options){  if ("SHELL".equals(request.getScriptLanguage())) {    return "OK";  } else   if ("Groovy".equals(request.getScriptLanguage())) {    return executeGroovyScript(request);  }  throw new ConnectorException(request.getScriptLanguage() + " script language is not supported");}  }
class C{  public TypeConstraintException(Throwable exception){  this(null,null,exception);}  }
class C{  private void convert(File from,File to) throws IOException {  try (BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(from),SOURCE_ENCODING))){    try (PrintWriter out=new PrintWriter(new OutputStreamWriter(new FileOutputStream(to),"UTF-8"))){      out.print("<!DOCTYPE html><html><head><meta charset=\"UTF-8\" />" + "<title>Source Code</title></head><body><pre>");      String line;      while ((line=in.readLine()) != null) {        StringBuilder result=new StringBuilder();        int len=line.length();        for (int i=0; i < len; i++) {          char c=line.charAt(i);switch (c) {case '&':            result.append("&amp;");          break;case '<':        result.append("&lt;");      break;default :    result.append(c);}}out.print(result.toString() + LINE_SEPARATOR);}out.print("</pre></body></html>");} } }  }
class C{  public void handleTblDataActionHrefRequest(String serviceName){  ServicesModel model=(ServicesModel)getModel();  SCUtils utils=new SCUtils(serviceName,model);  String propertiesViewBeanURL=utils.getServiceDisplayURL();  if ((propertiesViewBeanURL != null) && (propertiesViewBeanURL.trim().length() > 0)) {    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    if (curRealm == null) {      curRealm=AMModelBase.getStartDN(getRequestContext().getRequest());    }    try {      String pageTrailID=(String)getPageSessionAttribute(PG_SESSION_PAGE_TRAIL_ID);      propertiesViewBeanURL+="?ServiceName=" + serviceName + "&Location="+ Locale.URLEncodeField(curRealm,getCharset(model))+ "&Template=true&Op="+ AMAdminConstants.OPERATION_EDIT+ "&"+ PG_SESSION_PAGE_TRAIL_ID+ "="+ pageTrailID;      HttpServletResponse response=getRequestContext().getResponse();      response.sendRedirect(propertiesViewBeanURL);    } catch (    UnsupportedEncodingException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }catch (    IOException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  } else {    ServicesEditViewBean vb=(ServicesEditViewBean)getViewBean(ServicesEditViewBean.class);    setPageSessionAttribute(ServicesEditViewBean.SERVICE_NAME,serviceName);    setPageSessionAttribute(AMAdminConstants.SAVE_VB_NAME,getClass().getName());    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  }}  }
class C{  private void whenLoginThrowInvalidPasswordException(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    when(module.login()).thenThrow(new InvalidPasswordException("test-pw-failure"));  }}  }
class C{  DNLock readLockEntry(DN entryDN) throws DirectoryException {  final DNLock lock=DirectoryServer.getLockManager().tryReadLockEntry(entryDN);  if (lock != null) {    return lock;  }  throw new DirectoryException(ResultCode.BUSY,ERR_BACKEND_CANNOT_LOCK_ENTRY.get(entryDN));}  }
class C{  public boolean containsKey(PdfName key){  return map.containsKey(key);}  }
class C{  public void addExtension(String oid,boolean critical,byte[] value){  this.addExtension(new DERObjectIdentifier(oid),critical,value);}  }
class C{  public SCSAML2SOAPBindingModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,serviceName,map);}  }
class C{  static String doTargetResourceNormalization(String originalTargetResource){  String targetResource=originalTargetResource;  while (targetResource.endsWith(PARAM_WILDCARD)) {    int len=targetResource.length();    targetResource=targetResource.substring(0,len - 2);  }  return targetResource;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public boolean read(){  if (mBluetoothGatt == null)   return false;  if (mBroadcastCapabilitesCharacterisitc != null) {    mBluetoothGatt.readCharacteristic(mBroadcastCapabilitesCharacterisitc);    return true;  } else   if (mActiveSlotCharacteristic != null) {    mBluetoothGatt.readCharacteristic(mActiveSlotCharacteristic);    return true;  } else   if (mAdvertisingIntervalCharacteristic != null) {    mBluetoothGatt.readCharacteristic(mAdvertisingIntervalCharacteristic);    return true;  }  return false;}  }
class C{  public final byte[] wrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  if (mode != WRAP_MODE) {    throw new IllegalStateException();  }  return spiImpl.engineWrap(key);}  }
class C{  public boolean isNodeAncestor(TreeNode anotherNode){  if (anotherNode == null) {    return false;  }  TreeNode ancestor=this;  do {    if (ancestor == anotherNode) {      return true;    }  } while ((ancestor=ancestor.getParent()) != null);  return false;}  }
class C{  public java.lang.String toString(){  StringBuffer sb=new StringBuffer(1200);  sb.append("<Modify xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"");  if ((id != null) && id.length() != 0) {    sb.append(" id=\"").append(id).append("\"");  }  sb.append(">");  if (resourceID != null) {    sb.append(resourceID.toString());  } else   if (encryptResID != null) {    sb.append(encryptResID.toString());  }  if (inserts != null) {    Iterator iter=inserts.iterator();    while (iter.hasNext()) {      sb.append(((InsertEntry)iter.next()).toString());    }  }  if (removes != null) {    Iterator iter1=removes.iterator();    while (iter1.hasNext()) {      sb.append(((RemoveEntry)iter1.next()).toString());    }  }  sb.append("</Modify>");  return sb.toString();}  }
class C{  static public PrintWriter log(Throwable xcpt,PrintWriter out){  out.println("-----------");  out.println(xcpt.toString());  out.println("Stack Trace:");  out.print(getStackTrace(xcpt));  out.println("-----------");  out.flush();  return out;}  }
class C{  private void advanceRunState(int targetState){  for (; ; ) {    int c=ctl.get();    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;  }}  }
class C{  public SQLTransientConnectionException(){}  }
class C{  public Object peek(int n){  try {    return m_map[m_firstFree - (1 + n)];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public static void registerRotationPolicy(DN configEntryDN,RotationPolicy<?> policy){  Reject.ifNull(configEntryDN,policy);  directoryServer.rotationPolicies.put(configEntryDN,policy);}  }
class C{  private FSLogoutStatus doIDPSoapProfile(String providerId){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSLOHandler.doIDPSoapProfile : providerId=" + providerId);  }  FSLogoutStatus bSoapStatus=doSoapProfile(providerId);  if (bSoapStatus.getStatus().equalsIgnoreCase(IFSConstants.SAML_SUCCESS)) {    FSUtils.debug.message("SOAP first round went fine. Calling continue logout");    FSLogoutUtil.removeCurrentSessionPartner(metaAlias,providerId,ssoToken,userID);    FSUtils.debug.message("SOAP partner removed in case of success");  } else {    FSUtils.debug.message("SOAP first round false. No continue logout");    if (!isCurrentProviderIDPRole) {      FSLogoutUtil.removeCurrentSessionPartner(metaAlias,providerId,ssoToken,userID);    }    logoutStatus=false;  }  if (!isHttpRedirect && (logoutStatus || !isCurrentProviderIDPRole)) {    continueLogout(logoutStatus);  }  if (!isHttpRedirect) {    FSUtils.debug.message("FSSLOHandler.doIDPSoapProfile: call MP/SOAP");    try {      if ((SessionManager.getProvider().isValid(ssoToken)) && (MultiProtocolUtils.isMultipleProtocolSession(ssoToken,SingleLogoutManager.IDFF))) {        int retStatus=handleMultiProtocolLogout(true,null,remoteEntityId);        logoutStatus=updateLogoutStatus(logoutStatus,retStatus);      }    } catch (    SessionException ex) {      FSUtils.debug.message("FSSLOHandler.doIDPSoapProfile2",ex);    }  }  if (!logoutStatus) {    return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);  } else {    if (response != null && !isHttpRedirect) {      returnAfterCompletion();    }    return bSoapStatus;  }}  }
class C{  public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){  if (org == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);}  }
class C{  public static VbriFrame parseVBRIFrame(ByteBuffer header) throws InvalidAudioFrameException {  VbriFrame VBRIFrame=new VbriFrame(header);  return VBRIFrame;}  }
class C{  public ImmutableList<A> reverse(){  if (isEmpty() || tail.isEmpty()) {    return this;  }  ImmutableList<A> rev=empty();  for (ImmutableList<A> l=this; l.nonEmpty(); l=l.tail) {    rev=new ImmutableList<>(l.head,rev);  }  return rev;}  }
class C{  public PasswordPolicyResponseControl(){  this(false,null,-1,null);}  }
class C{  private <M extends Configuration>void deregisterDeleteListener(DN baseDN,ServerManagedObjectDeleteListener<M> listener){  try {    if (configRepository.hasEntry(baseDN)) {      for (      ConfigDeleteListener l : configRepository.getDeleteListeners(baseDN)) {        if (l instanceof ConfigDeleteListenerAdaptor) {          ConfigDeleteListenerAdaptor<?> adaptor=(ConfigDeleteListenerAdaptor<?>)l;          if (adaptor.getServerManagedObjectDeleteListener() == listener) {            configRepository.deregisterDeleteListener(baseDN,adaptor);          }        }      }    } else {      deregisterDelayedDeleteListener(baseDN,listener);    }  } catch (  ConfigException e) {    logger.trace("Unable to deregister delete listener",e);  }}  }
class C{  private Locale(boolean unused,String lowerCaseLanguageCode,String upperCaseCountryCode){  this.languageCode=lowerCaseLanguageCode;  this.countryCode=upperCaseCountryCode;  this.variantCode="";}  }
class C{  public static void message(String msg){  debugInst.debug(IDebug.MESSAGE,msg);}  }
class C{  public ShapeTileBox offset_box(int p_half_width,int p_no){  PlaSegmentInt curr_line_segment=segment_get(p_no + 1);  ShapeTileBox result=curr_line_segment.bounding_box().offset(p_half_width);  return result;}  }
class C{  public ConcurrentModificationException(Throwable cause){  super(ERR_CONCURRENT_MODIFICATION_EXCEPTION_DEFAULT.get(),cause);}  }
class C{  public void endElement(){  nss.popContext();}  }
class C{  private void addLdapSyntaxDescription(String definition,Schema currentSchema,SchemaBuilder schemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  String oid=SchemaUtils.parseSyntaxOID(definition);  final String finalDefinition;  if (!currentSchema.hasSyntax(oid)) {    finalDefinition=completeDefinitionWhenAddingSchemaElement(definition,modifiedSchemaFiles);  } else {    Syntax existingSyntax=currentSchema.getSyntax(oid);    finalDefinition=completeDefinitionWhenReplacingSchemaElement(definition,existingSyntax,modifiedSchemaFiles);  }  schemaBuilder.addSyntax(finalDefinition,true);}  }
class C{  private void verifyHostName(X509Certificate[] chain) throws CertificateException {  if (host != null) {    final X500Principal subjectX500Principal=chain[0].getSubjectX500Principal();    boolean matches=false;    try {      DN dn=DN.valueOf(subjectX500Principal.getName());      String value=dn.rdn().getFirstAVA().getAttributeValue().toString();      matches=hostMatch(value,host);      if (!matches) {        logger.warn(LocalizableMessage.raw("Subject DN RDN value is: " + value + " and does not match host value: "+ host));        for (int i=0; i < acceptedHosts.size() && !matches; i++) {          if (hostMatch(acceptedHosts.get(i),host)) {            X509Certificate[] current=acceptedChains.get(i);            matches=current.length == chain.length;            for (int j=0; j < chain.length && matches; j++) {              matches=chain[j].equals(current[j]);            }          }        }      }    } catch (    Throwable t) {      logger.warn(LocalizableMessage.raw("Error parsing subject dn: " + subjectX500Principal,t));    }    if (!matches) {      throw new OpendsCertificateException("Hostname mismatch between host name " + host + " and subject DN: "+ subjectX500Principal,chain);    }  }}  }
class C{  protected void addUrl(URL url){  if (urls.contains(url)) {    LOGGER.info("Skipped CRL url (duplicate): " + url);    return;  }  urls.add(url);  LOGGER.info("Added CRL url: " + url);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node commentNode;  int nodeType;  String commentName;  String commentNodeName;  doc=(Document)load("hc_staff",false);  elementList=doc.getChildNodes();  for (int indexN10044=0; indexN10044 < elementList.getLength(); indexN10044++) {    commentNode=(Node)elementList.item(indexN10044);    nodeType=(int)commentNode.getNodeType();    if (equals(8,nodeType)) {      commentNodeName=commentNode.getNodeName();      assertEquals("existingNodeName","#comment",commentNodeName);    }  }  commentNode=doc.createComment("This is a comment");  commentNodeName=commentNode.getNodeName();  assertEquals("createdNodeName","#comment",commentNodeName);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  final Request request=requestEvent.getRequest();  try {    final Response response=messageFactory.createResponse(200,request);    ((SipProvider)requestEvent.getSource()).sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void syncBeforeInvoke(){  copyTagToPageScope(VariableInfo.NESTED);  copyTagToPageScope(VariableInfo.AT_BEGIN);}  }
class C{  public static RequestedSecurityToken createToken(Node element) throws WSFederationException {  if (!element.getLocalName().equals(WSFederationConstants.RST_TAG_NAME)) {    WSFederationUtils.debug.error("Got node " + element.getLocalName() + " (expecting "+ WSFederationConstants.RST_TAG_NAME+ ")");    throw new WSFederationException(WSFederationUtils.bundle.getString("invalidToken"));  }  Node token=element.getFirstChild();  if (token.getNamespaceURI().equals(SAMLConstants.assertionSAMLNameSpaceURI) && token.getLocalName().equals(SAMLConstants.TAG_ASSERTION)) {    return new SAML11RequestedSecurityToken(element);  }  return null;}  }
class C{  private NSObject parseData() throws ParseException {  NSObject obj=null;  skip();  if (accept(DATA_GSOBJECT_BEGIN_TOKEN)) {    skip();    expect(DATA_GSBOOL_BEGIN_TOKEN,DATA_GSDATE_BEGIN_TOKEN,DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN);    if (accept(DATA_GSBOOL_BEGIN_TOKEN)) {      skip();      expect(DATA_GSBOOL_TRUE_TOKEN,DATA_GSBOOL_FALSE_TOKEN);      if (accept(DATA_GSBOOL_TRUE_TOKEN)) {        obj=new NSNumber(true);      } else {        obj=new NSNumber(false);      }      skip();    } else     if (accept(DATA_GSDATE_BEGIN_TOKEN)) {      skip();      String dateString=readInputUntil(DATA_END_TOKEN);      obj=new NSDate(dateString);    } else     if (accept(DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN)) {      skip();      String numberString=readInputUntil(DATA_END_TOKEN);      obj=new NSNumber(numberString);    }    read(DATA_END_TOKEN);  } else {    String dataString=readInputUntil(DATA_END_TOKEN);    dataString=dataString.replaceAll("\\s+","");    int numBytes=dataString.length() / 2;    byte[] bytes=new byte[numBytes];    for (int i=0; i < bytes.length; i++) {      String byteString=dataString.substring(i * 2,i * 2 + 2);      int byteValue=Integer.parseInt(byteString,16);      bytes[i]=(byte)byteValue;    }    obj=new NSData(bytes);    skip();  }  return obj;}  }
class C{  public static DeleteRequest unmodifiableDeleteRequest(final DeleteRequest request){  if (request instanceof UnmodifiableDeleteRequestImpl) {    return request;  }  return new UnmodifiableDeleteRequestImpl(request);}  }
class C{  @Override public String toString(){  int len=length();  char[] buf=new char[len];  getChars(0,len,buf,0);  return new String(buf);}  }
class C{  public void addEmptyValues(final Vector<JKTableColumn> tableColumns){  for (  final JKTableColumn col : tableColumns) {    final JKTableColumnValue value=new JKTableColumnValue(col);    this.columnsValues.add(value);  }}  }
class C{  static <T>Promise<Void> allBlocking(final List<Promise<T>> promises){  return allBlocking(promises.toArray(new Promise[promises.size()]));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static void addModification(Modification modification){  instance.modifications.add(modification);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS01.class,args);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.DescriptionType createDescriptionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.DescriptionTypeImpl();}  }
class C{  @Override public Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  int count=countByField2(field2);  if (count == 0) {    return null;  }  List<Foo> list=findByField2(field2,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {  ServiceConfig sc=getServerConfig(ssoToken,instanceName);  if (sc != null) {    Map map=sc.getAttributes();    map.remove(ATTR_PARENT_SITE_ID);    Set newSet=getPropertiesSet(upgradedValues);    map.put(ATTR_SERVER_CONFIG,newSet);    sc.setAttributes(map);  } else {    throw new ConfigurationException("Unable to upgrade server " + "default properties: no properties found!");  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  hasFocus=comboBox.hasFocus();  if (!comboBox.isEditable()) {    Rectangle r=rectangleForCurrentValue();    paintCurrentValue(g,r,hasFocus);  }}  }
class C{  public Set createDynamicGroups(Map groupsMap) throws AMException, SSOException {  Iterator iter=groupsMap.keySet().iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupName=(String)iter.next();    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + groupName+ ","+ entryDN;    Map attributes=(Map)groupsMap.get(groupName);    AMDynamicGroupImpl groupImpl=new AMDynamicGroupImpl(token,groupDN);    groupImpl.setAttributes(attributes);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){  int min=0;  long pref=0;  int max=Integer.MAX_VALUE;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    min=Math.max((int)v.getMinimumSpan(axis),min);    pref=Math.max((int)v.getPreferredSpan(axis),pref);    max=Math.max((int)v.getMaximumSpan(axis),max);  }  if (r == null) {    r=new SizeRequirements();    r.alignment=0.5f;  }  r.preferred=(int)pref;  r.minimum=min;  r.maximum=max;  return r;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataElement createX509DataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataElementImpl();}  }
class C{  private static boolean eq(Object x,Object y){  return x == y || x.equals(y);}  }
class C{  @Override public void performTask(TokenStorageAdapter adapter) throws DataLayerException {  adapter.delete(tokenId,etag);  handler.processResults(tokenId);}  }
class C{  public int readByte() throws IOException {  ++length;  return in.read() & 0xff;}  }
class C{  private void parseHost(MessageBytes valueMB){  if (valueMB == null || valueMB.isNull()) {    request.setServerPort(request.getLocalPort());    try {      request.serverName().duplicate(request.localName());    } catch (    IOException e) {      response.setStatus(400);      setErrorState(ErrorState.CLOSE_CLEAN,e);    }    return;  }  ByteChunk valueBC=valueMB.getByteChunk();  byte[] valueB=valueBC.getBytes();  int valueL=valueBC.getLength();  int valueS=valueBC.getStart();  int colonPos=-1;  if (hostNameC.length < valueL) {    hostNameC=new char[valueL];  }  boolean ipv6=(valueB[valueS] == '[');  boolean bracketClosed=false;  for (int i=0; i < valueL; i++) {    char b=(char)valueB[i + valueS];    hostNameC[i]=b;    if (b == ']') {      bracketClosed=true;    } else     if (b == ':') {      if (!ipv6 || bracketClosed) {        colonPos=i;        break;      }    }  }  if (colonPos < 0) {    request.serverName().setChars(hostNameC,0,valueL);  } else {    request.serverName().setChars(hostNameC,0,colonPos);    int port=0;    int mult=1;    for (int i=valueL - 1; i > colonPos; i--) {      int charValue=HexUtils.getDec(valueB[i + valueS]);      if (charValue == -1) {        response.setStatus(400);        setErrorState(ErrorState.CLOSE_CLEAN,null);        break;      }      port=port + (charValue * mult);      mult=10 * mult;    }    request.setServerPort(port);  }}  }
class C{  protected static Map removeEmptyValues(Map attrMap){  Map finalMap=new HashMap();  Iterator iter=attrMap.keySet().iterator();  while (iter.hasNext()) {    String tStr=(String)iter.next();    Set s=(Set)attrMap.get(tStr);    if (!s.isEmpty()) {      finalMap.put(tStr,attrMap.get(tStr));    }  }  return finalMap;}  }
class C{  public void menuSelectionChanged(boolean isIncluded){  if (DEBUG) {    System.out.println("In JMenu.menuSelectionChanged to " + isIncluded);  }  setSelected(isIncluded);}  }
class C{  public static SmsRouteTreeBuilder leaf(String uriTemplate,Predicate<String> handlesFunction,boolean generalActions){  return new SmsRouteTreeBuilder(uriTemplate).handles(handlesFunction).supportGeneralActions(generalActions);}  }
class C{  private int[] packTimes(){  int[] times=new int[2];  times[0]=startTime;  times[1]=endTime;  return times;}  }
class C{  public void testCreateAttributeNS1() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI=null;  String qualifiedName="test";  String nodeName;  doc=(Document)load("staffNS",builder);  attribute=doc.createAttributeNS(namespaceURI,qualifiedName);  nodeName=attribute.getNodeName();  assertEquals("documentcreateattributeNS01","test",nodeName);}  }
class C{  static void copyFile(File original,File copy) throws IOException {  copyInputStreamToFile(new FileInputStream(original),copy);}  }
class C{  public Observable<Void> removeJobObservable(long id){  io.vertx.rx.java.ObservableFuture<Void> handler=io.vertx.rx.java.RxHelper.observableFuture();  removeJob(id,handler.toHandler());  return handler;}  }
class C{  private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public void push(final Type value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {switch (value.getSort()) {case Type.BOOLEAN:      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);    break;case Type.CHAR:  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);break;case Type.BYTE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);break;case Type.SHORT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);break;case Type.INT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);break;case Type.FLOAT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);break;case Type.LONG:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);break;case Type.DOUBLE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);break;default :mv.visitLdcInsn(value);}}}  }
class C{  public String doSASLPlain(ByteSequence bindDN,ByteSequence bindPassword,Map<String,List<String>> saslProperties,List<Control> requestControls,List<Control> responseControls) throws ClientException, LDAPException {  String authID=null;  String authzID=null;  if (saslProperties == null || saslProperties.isEmpty()) {    LocalizableMessage message=ERR_LDAPAUTH_NO_SASL_PROPERTIES.get(SASL_MECHANISM_PLAIN);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  for (  Entry<String,List<String>> entry : saslProperties.entrySet()) {    String name=entry.getKey();    List<String> values=entry.getValue();    String lowerName=toLowerCase(name);    if (lowerName.equals(SASL_PROPERTY_AUTHID)) {      authID=getSingleValue(values,ERR_LDAPAUTH_AUTHID_SINGLE_VALUED);    } else     if (lowerName.equals(SASL_PROPERTY_AUTHZID)) {      authzID=getSingleValue(values,ERR_LDAPAUTH_AUTHZID_SINGLE_VALUED);    } else {      LocalizableMessage message=ERR_LDAPAUTH_INVALID_SASL_PROPERTY.get(name,SASL_MECHANISM_PLAIN);      throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);    }  }  if (authID == null || authID.length() == 0) {    LocalizableMessage message=ERR_LDAPAUTH_SASL_AUTHID_REQUIRED.get(SASL_MECHANISM_PLAIN);    throw new ClientException(ReturnCode.CLIENT_SIDE_PARAM_ERROR,message);  }  if (bindPassword == null) {    bindPassword=ByteString.empty();  }  String saslCredentials=(authzID != null ? authzID : "") + '\u0000' + authID+ '\u0000'+ bindPassword;  sendBindRequest(SASL_MECHANISM_PLAIN,bindDN,ByteString.valueOfUtf8(saslCredentials),requestControls);  LDAPMessage responseMessage=readBindResponse(ERR_LDAPAUTH_CANNOT_READ_BIND_RESPONSE);  responseControls.addAll(responseMessage.getControls());  checkConnected(responseMessage);  checkSuccessfulBind(responseMessage,SASL_MECHANISM_PLAIN);  return null;}  }
class C{  public static void main(String[] args) throws Exception {  Server server=new Server(ZStreamingConfig.getJettyServerPortNum());  HandlerCollection handlers=new HandlerCollection();  handlers.addHandler(new ProcessStartActionHandler());  handlers.addHandler(new ProcessStopActionHandler());  handlers.addHandler(new TimeRangeOHLCActionHandler());  handlers.addHandler(new TimeRangeStreamingQuoteActionHandler());  server.setHandler(handlers);  server.start();  server.join();}  }
class C{  public synchronized void addHyperlinkListener(HyperlinkListener listener){  listenerList.add(HyperlinkListener.class,listener);}  }
class C{  public static PolicyRequest parseXML(Node pNode) throws PolicyEvaluationException {  PolicyRequest preq=new PolicyRequest();  String attr=XMLUtils.getNodeAttributeValue(pNode,APP_SSOTOKEN);  if (attr == null) {    debug.error("PolicyRequestparseXML(Node): missing attribute " + APP_SSOTOKEN);    String objs[]={APP_SSOTOKEN};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  preq.setAppSSOToken(attr);  attr=XMLUtils.getNodeAttributeValue(pNode,REQUEST_ID);  if (attr == null) {    debug.error("PolicyRequest.parseXML(Node): missing attribute " + REQUEST_ID);    String objs[]={REQUEST_ID};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  preq.setRequestId(attr);  Node node=XMLUtils.getChildNode(pNode,GET_RESOURCE_RESULTS);  if (node != null) {    ResourceResultRequest resourceResultReq=null;    try {      resourceResultReq=ResourceResultRequest.parseXML(node);    } catch (    PolicyEvaluationException pe) {      throw new PolicyEvaluationException(pe,preq.getRequestId());    }    preq.setResourceResultRequest(resourceResultReq);    preq.setMethodID(POLICY_REQUEST_GET_RESOURCE_RESULTS);    return preq;  }  node=XMLUtils.getChildNode(pNode,ADD_POLICY_LISTENER);  if (node != null) {    PolicyListenerRequest plr=null;    try {      plr=PolicyListenerRequest.parseXML(node);    } catch (    PolicyEvaluationException pe) {      throw new PolicyEvaluationException(pe,preq.getRequestId());    }    preq.setPolicyListenerRequest(plr);    preq.setMethodID(POLICY_REQUEST_ADD_POLICY_LISTENER);    return preq;  }  node=XMLUtils.getChildNode(pNode,REMOVE_POLICY_LISTENER);  if (node != null) {    RemoveListenerRequest rmListenerReq=null;    try {      rmListenerReq=RemoveListenerRequest.parseXML(node);    } catch (    PolicyEvaluationException pe) {      throw new PolicyEvaluationException(pe,preq.getRequestId());    }    preq.setRemoveListenerRequest(rmListenerReq);    preq.setMethodID(POLICY_REQUEST_REMOVE_POLICY_LISTENER);    return preq;  }  node=XMLUtils.getChildNode(pNode,ADVICES_HANDLEABLE_BY_AM_REQUEST);  if (node != null) {    preq.setAdvicesHandleableByAMRequest(new AdvicesHandleableByAMRequest());    preq.setMethodID(POLICY_REQUEST_ADVICES_HANDLEABLE_BY_AM_REQUEST);    return preq;  }  debug.error("PolicyRequest: invalid method specified");  throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_policy_request_method",null,null);}  }
class C{  public MotionStageSprite(String[] SVGData,int stageZone,float xPos,float yPos,float xVel,float yVel,Image... sprites){  super(SVGData,xPos,yPos,xVel,yVel,sprites);  zone=stageZone;}  }
class C{  public TagResult generateLDIF(EntryWriter entryWriter) throws IOException, MakeLDIFException {  for (  Branch b : branches.values()) {    TagResult result=b.writeEntries(entryWriter);    if (!result.keepProcessingTemplateFile()) {      return result;    }  }  entryWriter.closeEntryWriter();  return TagResult.SUCCESS_RESULT;}  }
class C{  public static Map removeEmptyValues(Map attrMap){  Map finalMap=new HashMap();  Iterator iter=attrMap.keySet().iterator();  while (iter.hasNext()) {    String tStr=(String)iter.next();    Set s=(Set)attrMap.get(tStr);    if (!s.isEmpty()) {      finalMap.put(tStr,attrMap.get(tStr));    }  }  return finalMap;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_entitiesremovenameditem1.class,args);}  }
class C{  public void receiveTopoInfoFromRS(TopologyMsg topoMsg,ReplicationServerHandler rsHandler,boolean allowResetGenId) throws IOException, DirectoryException {  if (logger.isTraceEnabled()) {    debug("receiving TopologyMsg from serverId=" + rsHandler.getServerId() + ":\n"+ topoMsg);  }  try {    lock();  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();    return;  }  try {    rsHandler.processTopoInfoFromRS(topoMsg);    if (allowResetGenId) {      resetGenerationIdIfPossible();      setGenerationIdIfUnset(rsHandler.getGenerationId());    }    if (isDifferentGenerationId(rsHandler.getGenerationId())) {      LocalizableMessage message=WARN_BAD_GENERATION_ID_FROM_RS.get(rsHandler.getServerId(),rsHandler.session.getReadableRemoteAddress(),rsHandler.getGenerationId(),baseDN,getLocalRSServerId(),generationId);      logger.warn(message);      ErrorMsg errorMsg=new ErrorMsg(getLocalRSServerId(),rsHandler.getServerId(),message);      rsHandler.send(errorMsg);    }synchronized (pendingStatusMessagesLock) {      pendingStatusMessages.enqueueTopoInfoToAllDSsExcept(null);    }    statusAnalyzer.notifyPendingStatusMessage();  } catch (  Exception e) {    logger.error(LocalizableMessage.raw(stackTraceToSingleLineString(e)));  } finally {    release();  }}  }
class C{  public boolean offer(E e){  return add(e);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.StatementAbstractType createStatementAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.StatementAbstractTypeImpl();}  }
class C{  public void endElement(String elemName) throws SAXException {  if (m_tracer != null)   super.fireEndElem(elemName);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.ServiceNameElement createServiceNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.ServiceNameElementImpl();}  }
class C{  public void handleTblServerButtonAddRequest(RequestInvocationEvent event){  ServerAddViewBean vb=(ServerAddViewBean)getViewBean(ServerAddViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  return new MetalSplitPaneDivider(this);}  }
class C{  public void createVisibleAdminUidArgument(final LocalizableMessage description){  try {    this.adminUidArg=adminUid(description);  } catch (  final ArgumentException unexpected) {    throw new RuntimeException("Unexpected");  }}  }
class C{  public void testAndNotPosPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=1;  int bSign=1;  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.andNot(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void drawTextRun(Canvas c,TextPaint wp,int start,int end,int contextStart,int contextEnd,boolean runIsRtl,float x,int y){  if (mCharsValid) {    int count=end - start;    int contextCount=contextEnd - contextStart;    drawTextRun(c,mChars,start,count,contextStart,contextCount,x,y,runIsRtl,wp);  } else {    int delta=mStart;    drawTextRun(c,mText,delta + start,delta + end,delta + contextStart,delta + contextEnd,x,y,runIsRtl,wp);  }}  }
class C{  protected View createChild(String name){  View child=null;  if (name.equals(REDIRECT_URL)) {    child=new StaticTextField(this,REDIRECT_URL,"");  } else {    throw new IllegalArgumentException("Invalid child name [" + name + "]");  }  return child;}  }
class C{  public AbstractRestletAccessAuditFilter(Component component,Restlet restlet,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,RestletBodyAuditor<?> requestDetailCreator,RestletBodyAuditor<?> responseDetailCreator){  this.requestDetailCreator=requestDetailCreator;  this.responseDetailCreator=responseDetailCreator;  this.auditEventPublisher=auditEventPublisher;  this.auditEventFactory=auditEventFactory;  this.component=component;  setNext(restlet);}  }
class C{  public SSLHandshakeException(Throwable cause){  super(cause);}  }
class C{  public PlaLineInt plaline(int index){  return lines_list.get(index);}  }
class C{  @Override public Foo remove(Serializable primaryKey) throws NoSuchFooException {  Session session=null;  try {    session=openSession();    Foo foo=(Foo)session.get(FooImpl.class,primaryKey);    if (foo == null) {      if (_log.isDebugEnabled()) {        _log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);      }      throw new NoSuchFooException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);    }    return remove(foo);  } catch (  NoSuchFooException nsee) {    throw nsee;  }catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public SearchResultReferenceProtocolOp(List<String> referralURLs){  if (referralURLs == null) {    this.referralURLs=new ArrayList<>();  } else {    this.referralURLs=referralURLs;  }}  }
class C{  public AMAuthCallBackException(Throwable t){  super(t);}  }
class C{  public static void loadFromContext(Context context){  CrashConstants.ANDROID_VERSION=android.os.Build.VERSION.RELEASE;  CrashConstants.ANDROID_BUILD=android.os.Build.DISPLAY;  CrashConstants.PHONE_MODEL=android.os.Build.MODEL;  CrashConstants.PHONE_MANUFACTURER=android.os.Build.MANUFACTURER;  loadFilesPath(context);  loadPackageData(context);  loadCrashIdentifier(context);  loadDeviceIdentifier(context);}  }
class C{  public final void testPSSParameterSpec0206(){  new PSSParameterSpec("SHA-1","MGF1",null,20,1);}  }
class C{  public static void checkAllowedPrivilige(final JKPrivilige privilige){  logger.debug("checkAllowedPrivilige() : ",privilige);  final JKAuthorizer auth=getAuthorizer();  auth.checkAllowed(privilige);}  }
class C{  public static boolean isSupplemental(int c){  return (c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  public void deselect_all(){  Arrays.fill(sel_array,false);}  }
class C{  public View create(Element elem){  Document doc=elem.getDocument();  Object i18nFlag=doc.getProperty("i18n");  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {    return createI18N(elem);  } else {    JTextComponent c=getComponent();    if (c instanceof JTextArea) {      JTextArea area=(JTextArea)c;      View v;      if (area.getLineWrap()) {        v=new WrappedPlainView(elem,area.getWrapStyleWord());      } else {        v=new PlainView(elem);      }      return v;    }  }  return null;}  }
class C{  public AlignmentAction(String nm,int a){  super(nm);  this.a=a;}  }
class C{  private void addEntriesWithHistorical(final int dnSuffix,final int entryCnt) throws Exception {  for (int i=0; i < entryCnt; i++) {    String sdn="dn: uid=user" + i + dnSuffix+ ","+ TEST_ROOT_DN_STRING;    TestCaseUtils.addEntry(sdn,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: user" + i,"cn: Aaccf Amar","sn: Amar","givenName: Aaccf","userPassword: password","description: Initial description","displayName: 1");    String path=TestCaseUtils.createTempFile(sdn,"changetype: modify","add: cn;lang-en","cn;lang-en: Aaccf Amar","cn;lang-en: Aaccf A Amar","-","replace: givenName","givenName: new given","-","replace: userPassword","userPassword: new pass","-","replace: description","description: replaced description","-","replace: sn","sn: replaced sn","-","add: displayName","displayName: 2","-","delete: displayName","displayName: 1","-");    String[] args={"-h","127.0.0.1","-p",String.valueOf(TestCaseUtils.getServerLdapPort()),"-D","cn=Directory Manager","-w","password","-f",path};    ldapmodify(args);    args[9]=TestCaseUtils.createTempFile(sdn,"changetype: modify","replace: displayName","displayName: 2","-");    ldapmodify(args);  }  for (int i=0; i < entryCnt; i++) {    DN dn=DN.valueOf("uid=user" + i + dnSuffix+ ","+ TEST_ROOT_DN_STRING);    getEntry(dn,1000,true);  }}  }
class C{  protected void process() throws java.io.IOException {  tables=new LinkedHashMap<>();  if (ttcIndex >= 0) {    int dirIdx=ttcIndex;    if (dirIdx < 0) {      if (fileName != null) {        throw new IOException("the.font.index.for.1.must.be.positive").setMessageParams(fileName);      } else {        throw new IOException("the.font.index.must.be.positive");      }    }    String mainTag=readStandardString(4);    if (!mainTag.equals("ttcf")) {      if (fileName != null) {        throw new IOException("1.is.not.a.valid.ttc.file").setMessageParams(fileName);      } else {        throw new IOException("not.a.valid.ttc.file");      }    }    raf.skipBytes(4);    int dirCount=raf.readInt();    if (dirIdx >= dirCount) {      if (fileName != null) {        throw new IOException("the.font.index.for.1.must.be.between.0.and.2.it.was.3").setMessageParams(fileName,dirCount - 1,dirIdx);      } else {        throw new IOException("the.font.index.must.be.between.0.and.1.it.was.2").setMessageParams(dirCount - 1,dirIdx);      }    }    raf.skipBytes(dirIdx * 4);    directoryOffset=raf.readInt();  }  raf.seek(directoryOffset);  int ttId=raf.readInt();  if (ttId != 0x00010000 && ttId != 0x4F54544F) {    if (fileName != null) {      throw new IOException("1.is.not.a.valid.ttf.or.otf.file").setMessageParams(fileName);    } else {      throw new IOException("not.a.valid.ttf.or.otf.file");    }  }  int num_tables=raf.readUnsignedShort();  raf.skipBytes(6);  for (int k=0; k < num_tables; ++k) {    String tag=readStandardString(4);    raf.skipBytes(4);    int[] table_location=new int[2];    table_location[0]=raf.readInt();    table_location[1]=raf.readInt();    tables.put(tag,table_location);  }  checkCff();  readHheaTable();  readNameTable();  readHeadTable();  readOs_2Table();  readPostTable();  readGlyphWidths();  readCmapTable();}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text" || ((propertyName == "font" || propertyName == "foreground") && oldValue != newValue && getClientProperty(javax.swing.plaf.basic.BasicHTML.propertyKey) != null)) {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public boolean equals(Object obj){  return obj != null && obj instanceof DocFlavor && getStringValue().equals(((DocFlavor)obj).getStringValue());}  }
class C{  public void clear(){  removeAll(false);}  }
class C{  public static Control createDisconnectControl(String section){  return new DisconnectClientControl(false,section);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  HtmlEntityDao.createTable(db,ifNotExists);  CollectEntityDao.createTable(db,ifNotExists);}  }
class C{  @Override public Principal authenticate(String username,String credentials){  if (username == null || credentials == null) {    return null;  }  Connection dbConnection=null;  dbConnection=open();  if (dbConnection == null) {    return null;  }  try {    return authenticate(dbConnection,username,credentials);  }  finally {    close(dbConnection);  }}  }
class C{  public Date(long date){  super(date);}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(JComponent c){  return getHandler();}  }
class C{  public static boolean postYN(String targetIn){  SAMLUtils.debug.message("Inside postYN()");  if ((targetIn == null) || (targetIn.length() == 0)) {    return false;  }  Set targets=(Set)SAMLServiceManager.getAttribute(SAMLConstants.POST_TO_TARGET_URLS);  if ((targets == null) || (targets.size() == 0)) {    return false;  }  URL targetUrl=null;  try {    targetUrl=new URL(targetIn);  } catch (  MalformedURLException me) {    SAMLUtils.debug.error("SAMLUtils:postYN(): Malformed URL passed");    return false;  }  String targetInHost=targetUrl.getHost();  int targetInPort=targetUrl.getPort();  String targetInPath=targetUrl.getPath();  String targetToCompare=new StringBuffer(targetInHost.toLowerCase()).append(":").append(String.valueOf(targetInPort)).append("/").append(targetInPath).toString();  if (targets.contains(targetToCompare)) {    return true;  } else {    return false;  }}  }
class C{  private static boolean exceptionIsMapFailureException(java.io.IOException e){  if (e.getMessage() != null && e.getMessage().contains("Map failed"))   return true;  return false;}  }
class C{  public static Foo findByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_Last(uuid,orderByComparator);}  }
class C{  public static void deregisterSynchronizationProvider(SynchronizationProvider<?> provider){  directoryServer.synchronizationProviders.remove(provider);}  }
class C{  public URIReferenceException(){  super();}  }
class C{  public void add(Set<IPrivilege> privileges) throws EntitlementException {  for (  IPrivilege p : privileges) {    if (p instanceof Privilege) {      add((Privilege)p);    } else     if (p instanceof ReferralPrivilege) {      add((ReferralPrivilege)p);    }  }}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  public void postNewNameIDSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,ManageNameIDRequest idRequest,ManageNameIDResponse idResponse,String binding){  return;}  }
class C{  public void test_replaceAllLjava_util_ListLjava_lang_ObjectLjava_lang_Object(){  String string1="A-B-C-D-E-S-JF-SUB-G-H-I-J-SUBL-K-L-LIST-M-N--S-S-O-SUBLIS-P-Q-R-SUBLIST-S-T-U-V-W-X-Y-Z";  char[] chars=string1.toCharArray();  List list=new ArrayList();  for (int i=0; i < chars.length; i++) {    list.add(new Character(chars[i]));  }  try {    Collections.replaceAll(null,new Object(),new Object());    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  boolean result=Collections.replaceAll(list,new Character('1'),new Character('Z'));  assertFalse("Test1: Collections.replaceAll() returned wrong result",result);  assertEquals("Test2 : ReplaceAll modified the list incorrectly",string1,getString(list));  result=Collections.replaceAll(list,new Character('S'),new Character('K'));  assertTrue("Test3: Collections.replaceAll() returned wrong result",result);  assertEquals("Test4: ReplaceAll modified the list incorrectly",(string1=string1.replace('S','K')),getString(list));  result=Collections.replaceAll(list,new Character('Z'),new Character('N'));  assertTrue("Test5: Collections.replaceAll() returned wrong result",result);  assertEquals("Test6: ReplaceAll modified the list incorrectly",(string1=string1.replace('Z','N')),getString(list));  result=Collections.replaceAll(list,new Character('A'),new Character('B'));  assertTrue("Test7: Collections.replaceAll() returned wrong result",result);  assertEquals("Test8: ReplaceAll modified the list incorrectly",(string1=string1.replace('A','B')),getString(list));  LinkedList smallList=new LinkedList();  for (int i=0; i < 10; i++) {    smallList.add(objArray[i]);  }  smallList.set(4,new Integer(5));  result=Collections.replaceAll(smallList,new Integer(5),null);  assertTrue("Test9: Collections.replaceAll() returned wrong result",result);  for (int i=0; i < smallList.size(); i++) {    if (i == 4 || i == 5)     assertSame("Test9: ReplaceAll didn't replace element at " + i,null,smallList.get(i)); else     assertEquals("Test9: ReplaceAll shouldn't have replaced element at " + i,new Integer(i),smallList.get(i));  }  result=Collections.replaceAll(smallList,null,new Integer(99));  assertTrue("Test10: Collections.replaceAll() returned wrong result",result);  for (int i=0; i < smallList.size(); i++) {    if (i == 4 || i == 5)     assertEquals("Test10: ReplaceAll didn't replace element at " + i,new Integer(99),smallList.get(i)); else     assertEquals("Test10: ReplaceAll shouldn't have replaced element at " + i,new Integer(i),smallList.get(i));  }  Mock_ArrayList mal=new Mock_ArrayList();  mal.add("First");  mal.add("Second");  try {    Collections.replaceAll(mal,"Second",null);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public static HierarchyListener remove(HierarchyListener l,HierarchyListener oldl){  return (HierarchyListener)removeInternal(l,oldl);}  }
class C{  public static String crypt(ByteSequence password) throws NoSuchAlgorithmException {  SecureRandom randomGenerator=new SecureRandom();  StringBuilder salt=new StringBuilder();  while (salt.length() < saltLength) {    int index=(int)(randomGenerator.nextFloat() * itoa64.length());    salt.append(itoa64.charAt(index));  }  return BSDMD5Crypt.crypt(password,salt.toString());}  }
class C{  @Override protected void uninstallDefaults(){  SynthContext context=getContext(splitPane,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;  context=getContext(splitPane,Region.SPLIT_PANE_DIVIDER,ENABLED);  dividerStyle.uninstallDefaults(context);  context.dispose();  dividerStyle=null;  super.uninstallDefaults();}  }
class C{  public boolean retainAll(Collection<?> c){  return al.retainAll(c);}  }
class C{  private boolean checkJarEntry(final JarEntry jarEntry){  return Pattern.compile("lang.+\\.xml").matcher(jarEntry.getName()).matches();}  }
class C{  static MatchingRuleImpl collationLessThanOrEqualMatchingRule(Locale locale){  return new CollationLessThanOrEqualToMatchingRuleImpl(locale);}  }
class C{  protected void removeNextProtocolMessages(List<ProtocolMessage> protocolMessages,int fromIndex){  for (int i=protocolMessages.size() - 1; i >= fromIndex; i--) {    protocolMessages.remove(i);  }}  }
class C{  public void addRebuildIndex(String index){  final String[] newIndexParts=index.split("\\.");  for (  String s : new ArrayList<String>(rebuildList)) {    final String[] existingIndexParts=s.split("\\.");    if (newIndexParts[0].equalsIgnoreCase(existingIndexParts[0])) {      if (newIndexParts.length == 1 && existingIndexParts.length > 1) {        rebuildList.remove(s);      } else       if ((newIndexParts.length == 1 && existingIndexParts.length == 1) || (newIndexParts.length > 1 && existingIndexParts.length == 1) || newIndexParts[1].equalsIgnoreCase(existingIndexParts[1])) {        return;      }    }  }  this.rebuildList.add(index);}  }
class C{  public void stop(){  this.isRunning=false;  sock.close();  for (  Object messageChannel : messageChannels) {    ((MessageChannel)messageChannel).close();  }  if (sipStack.stackCongenstionControlTimeout > 0 && congestionAuditor != null) {    this.congestionAuditor.stop();  }}  }
class C{  public static char[] convertFromUtf32(int codePoint){  if (codePoint < 0x10000) {    return new char[]{(char)codePoint};  }  codePoint-=0x10000;  return new char[]{(char)(codePoint / 0x400 + 0xd800),(char)(codePoint % 0x400 + 0xdc00)};}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void validate(ClientRegistration clientRegistration,String redirectUri) throws InvalidRequestException, RedirectUriMismatchException {  if (isEmpty(redirectUri)) {    if (clientRegistration.getRedirectUris().size() == 1) {      return;    }    throw new InvalidRequestException("Missing parameter: redirect_uri");  }  final URI request=URI.create(redirectUri);  if (request.getFragment() != null) {    throw new RedirectUriMismatchException();  }  if (!request.isAbsolute()) {    throw new RedirectUriMismatchException();  }  for (  URI uri : clientRegistration.getRedirectUris()) {    if (uri.equals(request)) {      return;    }  }  throw new RedirectUriMismatchException();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  try {    CoreAttributesModel model=(CoreAttributesModel)getModel();    Map original=model.getAttributeValues();    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);    model.setAttributeValues(ps.getAttributeValues(original,true,model));    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");    forwardTo();  } catch (  AMConsoleException a) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",a.getMessage());    forwardTo();  }}  }
class C{  protected boolean needToEscapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){  return true;}  }
class C{  public void printProfileData(){  System.out.println("Total Intervals:     " + totalIntervals);  System.out.println("Total Duration:      " + totalDuration);  System.out.println();  System.out.println();  for (  ProfileStackFrame frame : getRootFrames()) {    printFrame(frame,0);  }}  }
class C{  public Object deliverMoreNodes(boolean parsemore){  if (fNoMoreEvents)   return Boolean.FALSE;  try {    Object result=fCoroutineManager.co_resume(parsemore ? Boolean.TRUE : Boolean.FALSE,fControllerCoroutineID,fSourceCoroutineID);    if (result == Boolean.FALSE)     fCoroutineManager.co_exit(fControllerCoroutineID);    return result;  } catch (  NoSuchMethodException e) {    return e;  }}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public void markTokens(int lineIndex,TokenHandler tokenHandler){  Segment seg=new Segment();  if (lineIndex < 0 || lineIndex >= lineMgr.getLineCount())   throw new ArrayIndexOutOfBoundsException("lineCount=" + lineMgr.getLineCount() + "; index="+ lineIndex);  int firstInvalidLineContext=lineMgr.getFirstInvalidLineContext();  int start;  if (firstInvalidLineContext == -1) {    start=lineIndex;  } else {    start=Math.min(firstInvalidLineContext,lineIndex);  }  TokenMarker.LineContext oldContext=null;  TokenMarker.LineContext context=null;  for (int i=start; i <= lineIndex; i++) {    getLineText(i,seg);    oldContext=lineMgr.getLineContext(i);    TokenMarker.LineContext prevContext=((i == 0) ? null : lineMgr.getLineContext(i - 1));    TokenHandler _tokenHandler=i == lineIndex ? tokenHandler : DummyTokenHandler.INSTANCE;    context=markTokens(seg,prevContext,_tokenHandler);    lineMgr.setLineContext(i,context);  }  int lineCount=lineMgr.getLineCount();  if (lineCount - 1 == lineIndex)   lineMgr.setFirstInvalidLineContext(-1); else   if (oldContext != context)   lineMgr.setFirstInvalidLineContext(lineIndex + 1); else   if (firstInvalidLineContext == -1)   ; else {    lineMgr.setFirstInvalidLineContext(Math.max(firstInvalidLineContext,lineIndex + 1));  }}  }
class C{  public boolean connectUsingStartTLS(){  return startTlsHostPort != null && startTlsHostPort.equals(getHostPortToConnect());}  }
class C{  public void schedule(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,false);}  }
class C{  private void validateStaticAttribute(Set staticSet) throws PolicyException {  if (DEBUG.messageEnabled()) {    DEBUG.message("IDRepoResponseProvider.validateStaticAttribute():" + "entering with staticSet=" + staticSet);  }  if (!staticSet.isEmpty()) {    staticResponse=new HashMap();    for (Iterator it=staticSet.iterator(); it.hasNext(); ) {      String attrValueString=(String)it.next();      if (attrValueString.indexOf(ATTR_DELIMITER) == -1) {        clearProperties();        DEBUG.error("IDRepoResponseProvider" + ".validateStaticAttribute():" + " Invalid format in defining StaticAttribute, needs"+ " to be attr=value format");        String args[]={attrValueString};        throw new PolicyException(ResBundleUtils.rbName,"invalid_format_static_property",args,null);      } else {        int index=attrValueString.indexOf(ATTR_DELIMITER);        String attrName=attrValueString.substring(0,index).trim();        String attrValue=attrValueString.substring(index + 1);        Set values=PolicyUtils.delimStringToSet(attrValue,VAL_DELIMITER);        PolicyUtils.appendElementToMap(attrName,values,staticResponse);        if (DEBUG.messageEnabled()) {          DEBUG.message("IDRepoResponseProvider." + "validateStaticAttribute():" + "attrName=" + attrName + ",values="+ values);          DEBUG.message("IDRepoResponseProvider." + "validateStaticAttribute():" + "caching staticResponse:"+ staticResponse);        }      }    }  }  if (DEBUG.messageEnabled()) {    DEBUG.message("IDRepoResponseProvider.validateStaticAttribute():" + "returning");  }}  }
class C{  protected static boolean isUnderRootSuffix(String objDN){  if (objDN == null || objDN.length() == 0) {    return true;  }  DN rootDN=DN.valueOf(rootSuffix);  DN objectDN=DN.valueOf(objDN);  return rootDN.equals(objectDN) || rootDN.equals(objectDN.parent());}  }
class C{  public static String toString(Pnt[] matrix){  StringBuilder buf=new StringBuilder("{");  for (  Pnt row : matrix)   buf.append(" " + row);  buf.append(" }");  return buf.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS01.class,args);}  }
class C{  public ProductService retrieveProduct(String productId,Handler<AsyncResult<Product>> resultHandler){  delegate.retrieveProduct(productId,resultHandler);  return this;}  }
class C{  public String toString(){  Object[] lList=listenerList;  String s="EventListenerList: ";  s+=lList.length / 2 + " listeners: ";  for (int i=0; i <= lList.length - 2; i+=2) {    s+=" type " + ((Class)lList[i]).getName();    s+=" listener " + lList[i + 1];  }  return s;}  }
class C{  public SecurityTokenManager(java.lang.Object credential) throws SecurityTokenException {  if (providerClass == null || providerClass.trim().length() == 0) {    debug.error("Con: Security Token Provider class is not defined");    throw new SecurityTokenException(bundle.getString("noProvider"));  }  try {    provider=(SecurityTokenProvider)Class.forName(providerClass).newInstance();  } catch (  Exception e) {    debug.message("Con: Unable to get instance of Token Provider",e);    throw new SecurityTokenException(bundle.getString("noProviderInstance"));  }  XMLSignatureManager manager=null;  try {    manager=XMLSignatureManager.getInstance();  } catch (  Exception e) {    debug.message("Con: Unable to get instance of XMLSigManager",e);  }  provider.initialize(credential,manager);}  }
class C{  public static int findFreePort() throws IOException {  return findFreePorts(1)[0];}  }
class C{  public final void testToString01() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,TestUtils.getPolicyTree(),testPublicKey);  assertNotNull(vr.toString());}  }
class C{  public RxGalleryFinal cropUseSourceImageAspectRatio(){  configuration.setAspectRatioX(0);  configuration.setAspectRatioY(0);  return this;}  }
class C{  public SessionSubject(Element subjectElement) throws FSMsgException, SAMLException {  SecurityTokenManager.debug.message("SessionSubject(Element): Called");  int elementCount=0;  Element elt=(Element)subjectElement;  String rootTagName=elt.getLocalName();  String rootTagNS=elt.getNamespaceURI();  if (rootTagName == null) {    if (SecurityTokenManager.debug.messageEnabled()) {      SecurityTokenManager.debug.message("SessionSubject: local name missing");    }    throw new FSMsgException(SAMLUtils.bundle.getString("nullInput"));  }  if (!(rootTagName.equals("SessionSubject"))) {    if (SecurityTokenManager.debug.messageEnabled()) {      SecurityTokenManager.debug.message("SessionSubject: invalid root element");    }    throw new FSMsgException(SAMLUtils.bundle.getString("invalidElement"));  }  NodeList nl=subjectElement.getChildNodes();  int length=nl.getLength();  if (length == 0) {    if (SecurityTokenManager.debug.messageEnabled()) {      SecurityTokenManager.debug.message("SessionSubject: No sub elements found");    }    throw new FSMsgException(SAMLUtils.bundle.getString("emptyElement"));  }  for (int n=0; n < length; n++) {    Node child=(Node)nl.item(n);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    String childName=child.getLocalName();    if (childName.equals("NameIdentifier")) {      setNameIdentifier(new NameIdentifier((Element)child));      elementCount++;    } else     if (childName.equals("SubjectConfirmation")) {      super.setSubjectConfirmation(new SubjectConfirmation((Element)child));      elementCount++;    } else     if (childName.equals("IDPProvidedNameIdentifier")) {      _idpNameIdentifier=new IDPProvidedNameIdentifier((Element)child);      elementCount++;    } else {      if (SecurityTokenManager.debug.messageEnabled()) {        SecurityTokenManager.debug.message("SessionSubject: Invalid element encountered.");      }      throw new FSMsgException(SAMLUtils.bundle.getString("invalidElement"));    }  }  if (elementCount > 3) {    if (SecurityTokenManager.debug.messageEnabled()) {      SecurityTokenManager.debug.message("SessionSubject: more than allowed elements passed");    }    throw new FSMsgException(SAMLUtils.bundle.getString("moreElement"));  }  if (_idpNameIdentifier == null) {    if (SecurityTokenManager.debug.messageEnabled()) {      SecurityTokenManager.debug.message("SessionSubject: mandatory IDPProvidedNameIdentifier " + "missing");    }    throw new FSMsgException(SAMLUtils.bundle.getString("missingElement"));  }  SecurityTokenManager.debug.message("SessionSubject(Element): leaving");}  }
class C{  public void paintTreeBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec01(){  KeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(ks instanceof RSAMultiPrimePrivateCrtKeySpec);}  }
class C{  public void tearDown() throws java.lang.Exception {  int tries=0;  for (tries=0; tries < RETRY_OBJECT_DELETES; tries++) {    try {      riSipStack.deleteSipProvider(riSipProvider);    } catch (    ObjectInUseException ex) {      sleep(RETRY_OBJECT_DELETES_AFTER);      continue;    }    break;  }  if (tries >= RETRY_OBJECT_DELETES)   throw new TckInternalError("Failed to delete riSipProvider!");  for (tries=0; tries < RETRY_OBJECT_DELETES; tries++) {    try {      riSipStack.deleteListeningPoint(riListeningPoint);    } catch (    ObjectInUseException ex) {      sleep(RETRY_OBJECT_DELETES_AFTER);      continue;    }    break;  }  if (tries >= RETRY_OBJECT_DELETES)   throw new TckInternalError("Failed to delete riListeningPoint!");  riSipProvider=null;  riListeningPoint=null;  for (tries=0; tries < RETRY_OBJECT_DELETES; tries++) {    try {      tiSipStack.deleteSipProvider(tiSipProvider);    } catch (    ObjectInUseException ex) {      sleep(RETRY_OBJECT_DELETES_AFTER);      continue;    }    break;  }  if (tries >= RETRY_OBJECT_DELETES)   throw new TiUnexpectedError("Failed to delete tiSipProvider!");  for (tries=0; tries < RETRY_OBJECT_DELETES; tries++) {    try {      tiSipStack.deleteListeningPoint(tiListeningPoint);    } catch (    ObjectInUseException ex) {      sleep(RETRY_OBJECT_DELETES_AFTER);      continue;    }    break;  }  if (tries >= RETRY_OBJECT_DELETES)   throw new TiUnexpectedError("Failed to delete tiListeningPoint!");  riSipStack.stop();  tiSipStack.stop();  tiSipProvider=null;  tiListeningPoint=null;  sleep(STACKS_SHUT_DOWN_FOR);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (fileFilters != null) {    for (int i=0; i < fileFilters.size(); i++) {      if (i > 0) {        buffer.append(",");      }      Object filter=fileFilters.get(i);      buffer.append(filter == null ? "null" : filter.toString());    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public synchronized void removeIconsForPkg(String packageName,UserHandleCompat user){  removeFromMemCacheLocked(packageName,user);  long userSerial=mUserManager.getSerialNumberForUser(user);  mIconDb.getWritableDatabase().delete(IconDB.TABLE_NAME,IconDB.COLUMN_COMPONENT + " LIKE ? AND " + IconDB.COLUMN_USER+ " = ?",new String[]{packageName + "/%",Long.toString(userSerial)});}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  public void read(ByteBuffer byteBuffer) throws InvalidFrameException, InvalidDataTypeException {  String identifier=readIdentifier(byteBuffer);  byte[] buffer=new byte[getFrameSizeSize()];  if (!isValidID3v2FrameIdentifier(identifier)) {    logger.config("Invalid identifier:" + identifier);    byteBuffer.position(byteBuffer.position() - (getFrameIdSize() - 1));    throw new InvalidFrameIdentifierException(getLoggingFilename() + ":" + identifier+ ":is not a valid ID3v2.20 frame");  }  byteBuffer.get(buffer,0,getFrameSizeSize());  frameSize=decodeSize(buffer);  if (frameSize < 0) {    throw new InvalidFrameException(identifier + " has invalid size of:" + frameSize);  } else   if (frameSize == 0) {    logger.warning("Empty Frame:" + identifier);    throw new EmptyFrameException(identifier + " is empty frame");  } else   if (frameSize > byteBuffer.remaining()) {    logger.warning("Invalid Frame size larger than size before mp3 audio:" + identifier);    throw new InvalidFrameException(identifier + " is invalid frame");  } else {    logger.fine("Frame Size Is:" + frameSize);    String id=ID3Tags.convertFrameID22To24(identifier);    if (id == null) {      id=ID3Tags.convertFrameID22To23(identifier);      if (id == null) {        if (ID3Tags.isID3v22FrameIdentifier(identifier)) {          id=identifier;        } else {          id=UNSUPPORTED_ID;        }      }    }    logger.fine("Identifier was:" + identifier + " reading using:"+ id);    ByteBuffer frameBodyBuffer=byteBuffer.slice();    frameBodyBuffer.limit(frameSize);    try {      frameBody=readBody(id,frameBodyBuffer,frameSize);    }  finally {      byteBuffer.position(byteBuffer.position() + frameSize);    }  }}  }
class C{  public String toString(){  return action.toString() + (fields == null ? "" : fields.toString());}  }
class C{  @Override public void startIntentSenderFromFragment(final Fragment fragment,final IntentSender intent,final int requestCode,@Nullable final Intent fillInIntent,final int flagsMask,final int flagsValues,final int extraFlags,final Bundle options) throws IntentSender.SendIntentException {  super.startIntentSenderFromFragment(fragment,intent,requestCode,fillInIntent,flagsMask,flagsValues,extraFlags,options);}  }
class C{  protected void selectNextIndex(){  int s=list.getSelectedIndex();  if ((s + 1) < list.getModel().getSize()) {    s+=1;    list.setSelectedIndex(s);    list.ensureIndexIsVisible(s);  }}  }
class C{  public long remove(long socket){  long result=0;  for (int i=0; i < size; i++) {    if (sockets[i] == socket) {      result=timeouts[i];      sockets[i]=sockets[size - 1];      timeouts[i]=timeouts[size - 1];      size--;      break;    }  }  return result;}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  public static int frequency(Collection<?> c,Object o){  int result=0;  if (o == null) {    for (    Object e : c)     if (e == null)     result++;  } else {    for (    Object e : c)     if (o.equals(e))     result++;  }  return result;}  }
class C{  public void logStackTrace(){  this.logStackTrace(TRACE_DEBUG);}  }
class C{  private static EntryIDSet evaluateIndexQuery(IndexQuery indexQuery,String indexName,SearchFilter filter,StringBuilder debugBuffer,BackendMonitor monitor){  LocalizableMessageBuilder debugMessage=monitor.isFilterUseEnabled() ? new LocalizableMessageBuilder() : null;  StringBuilder indexNameOut=debugBuffer == null ? null : new StringBuilder();  EntryIDSet results=indexQuery.evaluate(debugMessage,indexNameOut);  if (debugBuffer != null) {    appendDebugIndexInformation(debugBuffer,filter.getAttributeType(),indexName);    appendDebugUnindexedInformation(debugBuffer,filter.getAttributeType(),indexNameOut);  }  updateStats(monitor,filter,results,debugMessage);  return results;}  }
class C{  public AMLoginViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute1;  Attr attribute2;  Attr newAttribute1;  Attr newAttribute2;  Attr attribute;  String attrValue;  String attrName;  String attNodeName;  String attrLocalName;  String attrNS;  doc=(Document)load("staffNS",false);  element=doc.createElementNS("namespaceURI","root");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Level2","l2:att");  newAttribute1=element.setAttributeNodeNS(attribute1);  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Level1","att");  newAttribute2=element.setAttributeNodeNS(attribute2);  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Level2","att");  attrValue=attribute.getNodeValue();  attrName=attribute.getName();  attNodeName=attribute.getNodeName();  attrLocalName=attribute.getLocalName();  attrNS=attribute.getNamespaceURI();  assertEquals("elementgetattributenodens01_attrValue","",attrValue);  assertEquals("elementgetattributenodens01_attrName","l2:att",attrName);  assertEquals("elementgetattributenodens01_attrNodeName","l2:att",attNodeName);  assertEquals("elementgetattributenodens01_attrLocalName","att",attrLocalName);  assertEquals("elementgetattributenodens01_attrNs","http://www.w3.org/DOM/Level2",attrNS);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void invokePostResponsePlugins(boolean workflowExecuted){  if (workflowExecuted) {    List<LocalBackendAddOperation> localOperations=(List)getAttachment(Operation.LOCALBACKENDOPERATIONS);    if (localOperations != null) {      for (      LocalBackendAddOperation localOp : localOperations) {        getPluginConfigManager().invokePostResponseAddPlugins(localOp);      }    }  } else {    getPluginConfigManager().invokePostResponseAddPlugins(this);  }}  }
class C{  public Builder removeAllNames(){  this.names.clear();  return this;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof PropertyPermission))   return false;  PropertyPermission that=(PropertyPermission)obj;  return (this.mask == that.mask) && (this.getName().equals(that.getName()));}  }
class C{  public MimeType(String rawdata) throws MimeTypeParseException {  parse(rawdata);}  }
class C{  protected void messageReceived(SessionMessage msg,Member sender){  ClassLoader contextLoader=Thread.currentThread().getContextClassLoader();  try {    ClassLoader[] loaders=getClassLoaders();    Thread.currentThread().setContextClassLoader(loaders[0]);    if (log.isDebugEnabled()) {      log.debug(sm.getString("deltaManager.receiveMessage.eventType",getName(),msg.getEventTypeString(),sender));    }switch (msg.getEventType()) {case SessionMessage.EVT_GET_ALL_SESSIONS:      handleGET_ALL_SESSIONS(msg,sender);    break;case SessionMessage.EVT_ALL_SESSION_DATA:  handleALL_SESSION_DATA(msg,sender);break;case SessionMessage.EVT_ALL_SESSION_TRANSFERCOMPLETE:handleALL_SESSION_TRANSFERCOMPLETE(msg,sender);break;case SessionMessage.EVT_SESSION_CREATED:handleSESSION_CREATED(msg,sender);break;case SessionMessage.EVT_SESSION_EXPIRED:handleSESSION_EXPIRED(msg,sender);break;case SessionMessage.EVT_SESSION_ACCESSED:handleSESSION_ACCESSED(msg,sender);break;case SessionMessage.EVT_SESSION_DELTA:handleSESSION_DELTA(msg,sender);break;case SessionMessage.EVT_CHANGE_SESSION_ID:handleCHANGE_SESSION_ID(msg,sender);break;case SessionMessage.EVT_ALL_SESSION_NOCONTEXTMANAGER:handleALL_SESSION_NOCONTEXTMANAGER(msg,sender);break;default :break;}} catch (Exception x) {log.error(sm.getString("deltaManager.receiveMessage.error",getName()),x);} finally {Thread.currentThread().setContextClassLoader(contextLoader);}}  }
class C{  public Subject createSubject(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT,elem);  if (obj == null) {    return new SubjectImpl(elem);  } else {    return (Subject)obj;  }}  }
class C{  public PluginConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  pluginLock=new ReentrantLock();  startupPlugins=new DirectoryServerPlugin[0];  shutdownPlugins=new DirectoryServerPlugin[0];  postConnectPlugins=new DirectoryServerPlugin[0];  postDisconnectPlugins=new DirectoryServerPlugin[0];  ldifImportPlugins=new DirectoryServerPlugin[0];  ldifImportEndPlugins=new DirectoryServerPlugin[0];  ldifImportBeginPlugins=new DirectoryServerPlugin[0];  ldifExportPlugins=new DirectoryServerPlugin[0];  preParseAbandonPlugins=new DirectoryServerPlugin[0];  preParseAddPlugins=new DirectoryServerPlugin[0];  preParseBindPlugins=new DirectoryServerPlugin[0];  preParseComparePlugins=new DirectoryServerPlugin[0];  preParseDeletePlugins=new DirectoryServerPlugin[0];  preParseExtendedPlugins=new DirectoryServerPlugin[0];  preParseModifyPlugins=new DirectoryServerPlugin[0];  preParseModifyDNPlugins=new DirectoryServerPlugin[0];  preParseSearchPlugins=new DirectoryServerPlugin[0];  preParseUnbindPlugins=new DirectoryServerPlugin[0];  preOperationAddPlugins=new DirectoryServerPlugin[0];  preOperationBindPlugins=new DirectoryServerPlugin[0];  preOperationComparePlugins=new DirectoryServerPlugin[0];  preOperationDeletePlugins=new DirectoryServerPlugin[0];  preOperationExtendedPlugins=new DirectoryServerPlugin[0];  preOperationModifyPlugins=new DirectoryServerPlugin[0];  preOperationModifyDNPlugins=new DirectoryServerPlugin[0];  preOperationSearchPlugins=new DirectoryServerPlugin[0];  postOperationAbandonPlugins=new DirectoryServerPlugin[0];  postOperationAddPlugins=new DirectoryServerPlugin[0];  postOperationBindPlugins=new DirectoryServerPlugin[0];  postOperationComparePlugins=new DirectoryServerPlugin[0];  postOperationDeletePlugins=new DirectoryServerPlugin[0];  postOperationExtendedPlugins=new DirectoryServerPlugin[0];  postOperationModifyPlugins=new DirectoryServerPlugin[0];  postOperationModifyDNPlugins=new DirectoryServerPlugin[0];  postOperationSearchPlugins=new DirectoryServerPlugin[0];  postOperationUnbindPlugins=new DirectoryServerPlugin[0];  postResponseAddPlugins=new DirectoryServerPlugin[0];  postResponseBindPlugins=new DirectoryServerPlugin[0];  postResponseComparePlugins=new DirectoryServerPlugin[0];  postResponseDeletePlugins=new DirectoryServerPlugin[0];  postResponseExtendedPlugins=new DirectoryServerPlugin[0];  postResponseModifyPlugins=new DirectoryServerPlugin[0];  postResponseModifyDNPlugins=new DirectoryServerPlugin[0];  postResponseSearchPlugins=new DirectoryServerPlugin[0];  postSynchronizationAddPlugins=new DirectoryServerPlugin[0];  postSynchronizationDeletePlugins=new DirectoryServerPlugin[0];  postSynchronizationModifyPlugins=new DirectoryServerPlugin[0];  postSynchronizationModifyDNPlugins=new DirectoryServerPlugin[0];  searchResultEntryPlugins=new DirectoryServerPlugin[0];  searchResultReferencePlugins=new DirectoryServerPlugin[0];  subordinateModifyDNPlugins=new DirectoryServerPlugin[0];  subordinateDeletePlugins=new DirectoryServerPlugin[0];  intermediateResponsePlugins=new DirectoryServerPlugin[0];  registeredPlugins=new ConcurrentHashMap<>();  skippedPreOperationPlugins=new ConcurrentHashMap<>();}  }
class C{  public ModifyDNOperationWrapper(ModifyDNOperation modifyDN){  super(modifyDN);}  }
class C{  public static void main(String[] args){  int retCode=mainExportLDIF(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public void fill_area(PlaPointFloat[][] p_point_lists,Graphics p_g,Color p_color,double p_translucency_factor){  if (p_color == null)   return;  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);  for (int jndex=0; jndex < p_point_lists.length; ++jndex) {    Polygon draw_polygon=new Polygon();    PlaPointFloat[] curr_point_list=p_point_lists[jndex];    for (int index=0; index < curr_point_list.length; index++) {      Point2D curr_corner=coordinate_transform.board_to_screen(curr_point_list[index]);      draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));    }    draw_path.append(draw_polygon,false);  }  Graphics2D g2=(Graphics2D)p_g;  g2.setColor(p_color);  set_translucency(g2,p_translucency_factor);  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.fill(draw_path);}  }
class C{  protected boolean isAccessToUnderlyingConnectionAllowed(){  return accessToUnderlyingConnectionAllowed;}  }
class C{  public static boolean delete(final File file){  if (file.isDirectory()) {    for (    String item : file.list()) {      File subFile=new File(file.getAbsolutePath() + File.separator + item);      if (!delete(subFile)) {        return false;      }    }  }  return file.delete();}  }
class C{  public List<String> defaultComments(ProtoElement element){  if (!element.hasAttribute(ElementDocumentationAttribute.KEY)) {    return ImmutableList.<String>of("");  }  return pythonCommon.convertToCommentedBlock(getSphinxifiedScopedDescription(element));}  }
class C{  public LoggingSessionInputBuffer(final SessionInputBuffer in,final Wire wire){  super();  this.in=in;  this.wire=wire;}  }
class C{  public LDIFWriter(LDIFExportConfig exportConfig) throws IOException {  ifNull(exportConfig);  this.exportConfig=exportConfig;  writer=exportConfig.getWriter();}  }
class C{  public static StartTLSExtendedRequest newStartTLSExtendedRequest(final SSLContext sslContext){  return new StartTLSExtendedRequestImpl(sslContext);}  }
class C{  public boolean append(ByteBuffer b,int len){  int newcount=bufSize + len;  if (newcount > buf.length) {    expand(newcount);  }  b.get(buf,bufSize,len);  bufSize=newcount;  if (discard) {    if (bufSize > START_DATA.length && (firstIndexOf(buf,0,START_DATA) == -1)) {      bufSize=0;      log.error(sm.getString("xByteBuffer.discarded.invalidHeader"));      return false;    }  }  return true;}  }
class C{  public void add(String value){  valueList.add(value);}  }
class C{  public InputStream postStream(final String uri,final Object params) throws IOException {  HttpURLConnection connection=createPost(uri);  sendParams(connection,params);  return getResponseStream(connection);}  }
class C{  void sync() throws SyncFailedException {  fileDescriptor.sync();}  }
class C{  void updateStats(SearchFilter searchFilter,long matchingEntries){  if (!filterUseEnabled) {    return;  }  FilterStats stats;synchronized (filterToStats) {    stats=filterToStats.get(searchFilter);    if (stats != null) {      stats.update(1,matchingEntries);    } else {      stats=new FilterStats();      stats.update(1,matchingEntries);      removeLowestHit();      filterToStats.put(searchFilter,stats);    }  }}  }
class C{  public SystemLogHandler(PrintStream wrapped){  super(wrapped);  this.wrapped=wrapped;}  }
class C{  @Override public void finalize() throws Throwable {  super.finalize();  if (server != null) {    server.shutdown(true);  }  restExpressRunning=false;}  }
class C{  protected void CopyHeader(){  seek(0);  int major=getCard8();  int minor=getCard8();  int hdrSize=getCard8();  int offSize=getCard8();  nextIndexOffset=hdrSize;  OutputList.addLast(new RangeItem(buf,0,hdrSize));}  }
class C{  public WhereBuilder or(WhereBuilder where){  String condition=whereItems.size() == 0 ? " " : "OR ";  return expr(condition + "(" + where.toString()+ ")");}  }
class C{  @Override public void sendError(int status,String message) throws IOException {  if (isCommitted()) {    throw new IllegalStateException(sm.getString("coyoteResponse.sendError.ise"));  }  if (included) {    return;  }  setError();  getCoyoteResponse().setStatus(status);  getCoyoteResponse().setMessage(message);  resetBuffer();  setSuspended(true);}  }
class C{  public PortUnreachableException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  @Deprecated protected void editablePropertyChanged(PropertyChangeEvent e){}  }
class C{  public String constantName(){  return constantName;}  }
class C{  public void test_setBooleanLjava_lang_ObjectZ() throws Exception {  TestField x=new TestField();  Field f=null;  boolean val=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setBoolean(x,false);    val=f.getBoolean(x);  } catch (  Exception e) {    fail("Exception during setboolean test: " + e.toString());  }  assertTrue("Returned incorrect float field value",!val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("doubleField");    f.setBoolean(x,false);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("booleanPFField");    assertFalse(f.isAccessible());    f.setBoolean(x,true);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setBoolean(null,true);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("booleanSField");  f.setBoolean(null,false);  val=f.getBoolean(x);  assertFalse("Returned incorrect boolean field value",val);}  }
class C{  public MediaSize(float x,float y,int units,MediaSizeName media){  super(x,y,units);  if (x > y) {    throw new IllegalArgumentException("X dimension > Y dimension");  }  if (media != null && mediaMap.get(media) == null) {    mediaName=media;    mediaMap.put(mediaName,this);  }  sizeVector.add(this);}  }
class C{  @ConstructorProperties({"lineWidth","endCap","lineJoin","miterLimit","dashArray","dashPhase"}) public BasicStroke(float width,int cap,int join,float miterlimit,float dash[],float dash_phase){  if (width < 0.0f) {    throw new IllegalArgumentException("negative width");  }  if (cap != CAP_BUTT && cap != CAP_ROUND && cap != CAP_SQUARE) {    throw new IllegalArgumentException("illegal end cap value");  }  if (join == JOIN_MITER) {    if (miterlimit < 1.0f) {      throw new IllegalArgumentException("miter limit < 1");    }  } else   if (join != JOIN_ROUND && join != JOIN_BEVEL) {    throw new IllegalArgumentException("illegal line join value");  }  if (dash != null) {    if (dash_phase < 0.0f) {      throw new IllegalArgumentException("negative dash phase");    }    boolean allzero=true;    for (int i=0; i < dash.length; i++) {      float d=dash[i];      if (d > 0.0) {        allzero=false;      } else       if (d < 0.0) {        throw new IllegalArgumentException("negative dash length");      }    }    if (allzero) {      throw new IllegalArgumentException("dash lengths all zero");    }  }  this.width=width;  this.cap=cap;  this.join=join;  this.miterlimit=miterlimit;  if (dash != null) {    this.dash=(float[])dash.clone();  }  this.dash_phase=dash_phase;}  }
class C{  private static final <T,E extends MapElement<T>>E exactFind(E[] map,CharChunk name){  int pos=find(map,name);  if (pos >= 0) {    E result=map[pos];    if (name.equals(result.name)) {      return result;    }  }  return null;}  }
class C{  public ClassDefinition(Class<?> theClass,byte[] theClassFile){  if (theClass == null || theClassFile == null) {    throw new NullPointerException();  }  mClass=theClass;  mClassFile=theClassFile;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentName=getStringOptionValue(IArgument.AGENT_NAME);  Set attributeNames=new HashSet();  attributeNames.addAll(rc.getOption(IArgument.ATTRIBUTE_NAMES));  String[] params={realm,agentName,attributeNames.toString()};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_AGENT_PROPERTIES",params);    AMIdentity amid=new AMIdentity(adminSSOToken,agentName,IdType.AGENTONLY,realm,null);    amid.removeAttributes(attributeNames);    outputWriter.printlnMessage(getResourceString("agent-remove-properties-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_AGENT_PROPERTIES",params);  } catch (  IdRepoException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("RemoveAgentProperties.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_AGENT_PROPERTIES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("RemoveAgentProperties.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_AGENT_PROPERTIES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static void register(String path){  register(path,null);}  }
class C{  @Descriptor("Exports all configurations to 'conf' folder.") public void configexport(CommandSession session,@Descriptor(USER_PASS_DESC) @MetaVar(USER_PASS_METAVAR) @Parameter(names={"-u","--user"},absentValue=USER_PASS_DEFAULT) final String userPass,@Descriptor(IDM_URL_DESC) @MetaVar(IDM_URL_METAVAR) @Parameter(names={"--url"},absentValue=IDM_URL_DEFAULT) final String idmUrl,@Descriptor(IDM_PORT_DESC) @MetaVar(IDM_PORT_METAVAR) @Parameter(names={"-P","--port"},absentValue="") final String idmPort){  configexport(session,userPass,idmUrl,idmPort,"conf");}  }
class C{  public void deiconifyFrame(JInternalFrame f){  JInternalFrame.JDesktopIcon desktopIcon=f.getDesktopIcon();  Container c=desktopIcon.getParent();  JDesktopPane d=f.getDesktopPane();  if (c != null && d != null) {    c.add(f);    if (f.isMaximum()) {      Rectangle desktopBounds=c.getBounds();      if (f.getWidth() != desktopBounds.width || f.getHeight() != desktopBounds.height) {        setBoundsForFrame(f,0,0,desktopBounds.width,desktopBounds.height);      }    }    removeIconFor(f);    if (f.isSelected()) {      f.moveToFront();      f.restoreSubcomponentFocus();    } else {      try {        f.setSelected(true);      } catch (      PropertyVetoException e2) {      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode02.class,args);}  }
class C{  public void testConstructorBytesPositive2(){  byte aBytes[]={12,56,100};  byte rBytes[]={12,56,100};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  StringBuffer xml=new StringBuffer(3000);  String prefix="";  String libprefix="";  String uri="";  String liburi="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;    libprefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;    liburi=IFSConstants.LIB_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("Subject").append(" ").append(uri).append(" ").append(liburi).append(" ").append("xsi:type").append("=\"").append(libprefix).append("SubjectType").append("\"").append(">");  if (getNameIdentifier() != null) {    xml.append(getNameIdentifier().toString(includeNS,false));  }  if (getSubjectConfirmation() != null) {    xml.append(getSubjectConfirmation().toString(includeNS,false));  }  if (_idpNameIdentifier != null) {    xml.append(_idpNameIdentifier.toXMLString(includeNS,false));  }  xml.append("</").append(prefix).append("Subject").append(">");  return xml.toString();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequiresGenericClaimDialectElement createRequiresGenericClaimDialectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequiresGenericClaimDialectElementImpl();}  }
class C{  public SelectTransform(String allowed){  name=SELECT_URI;  Parameter parameter=new Parameter(Parameter.NAME_ALLOWED,allowed);  parameters=new ArrayList();  parameters.add(parameter);}  }
class C{  private void showDlgAttributes(){  RuleBuilder.instance().resetFilterPath();  Intent intent=new Intent();  intent.setClass(getApplicationContext(),ActivityDlgAttributes.class);  startActivityForResult(intent,REQUEST_ADD_FILTER);}  }
class C{  public StatefulRefreshToken(JsonValue token) throws InvalidGrantException {  super(token);  if (!OAUTH_REFRESH_TOKEN.equals(getTokenName())) {    throw new InvalidGrantException("Token is not an refresh token: " + getTokenId());  }}  }
class C{  final Node succ(Node p){  Node next=p.next;  return (p == next) ? head : next;}  }
class C{  public boolean isDocOrdered(){  return m_inNaturalOrderStatic;}  }
class C{  public CompareResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  private void processEntry(ManifestEntryVerifier mev) throws IOException {  if (!parsingBlockOrSF) {    JarEntry je=mev.getEntry();    if ((je != null) && (je.signers == null)) {      je.signers=mev.verify(verifiedSigners,sigFileSigners);      je.certs=mapSignersToCertArray(je.signers);    }  } else {    try {      parsingBlockOrSF=false;      if (debug != null) {        debug.println("processEntry: processing block");      }      String uname=mev.getEntry().getName().toUpperCase(Locale.ENGLISH);      if (uname.endsWith(".SF")) {        String key=uname.substring(0,uname.length() - 3);        byte bytes[]=baos.toByteArray();        sigFileData.put(key,bytes);        Iterator<SignatureFileVerifier> it=pendingBlocks.iterator();        while (it.hasNext()) {          SignatureFileVerifier sfv=it.next();          if (sfv.needSignatureFile(key)) {            if (debug != null) {              debug.println("processEntry: processing pending block");            }            sfv.setSignatureFile(bytes);            sfv.process(sigFileSigners,manifestDigests);          }        }        return;      }      String key=uname.substring(0,uname.lastIndexOf("."));      if (signerCache == null)       signerCache=new ArrayList<>();      if (manDig == null) {synchronized (manifestRawBytes) {          if (manDig == null) {            manDig=new ManifestDigester(manifestRawBytes);            manifestRawBytes=null;          }        }      }      SignatureFileVerifier sfv=new SignatureFileVerifier(signerCache,manDig,uname,baos.toByteArray());      if (sfv.needSignatureFileBytes()) {        byte[] bytes=sigFileData.get(key);        if (bytes == null) {          if (debug != null) {            debug.println("adding pending block");          }          pendingBlocks.add(sfv);          return;        } else {          sfv.setSignatureFile(bytes);        }      }      sfv.process(sigFileSigners,manifestDigests);    } catch (    IOException ioe) {      if (debug != null)       debug.println("processEntry caught: " + ioe);    }catch (    SignatureException se) {      if (debug != null)       debug.println("processEntry caught: " + se);    }catch (    NoSuchAlgorithmException nsae) {      if (debug != null)       debug.println("processEntry caught: " + nsae);    }catch (    CertificateException ce) {      if (debug != null)       debug.println("processEntry caught: " + ce);    }  }}  }
class C{  public UNKNOWN(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  protected String blanksToString(String couldBeBlank,String subForBlanks){  return (("".equals(couldBeBlank) || couldBeBlank == null) ? subForBlanks : couldBeBlank);}  }
class C{  public void testSetHostnameVerifier() throws Throwable {  setUpStoreProperties();  SSLServerSocket ss=(SSLServerSocket)getContext().getServerSocketFactory().createServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  connection.setSSLSocketFactory(getContext().getSocketFactory());  TestHostnameVerifier hnv_late=new TestHostnameVerifier();  connection.setHostnameVerifier(hnv_late);  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  assertTrue("Hostname verification was not done",hnv_late.verified);  assertFalse("Hostname verification should not be done by this verifier",hnv.verified);  checkConnectionStateParameters(connection,peerSocket);  connection.connect();}  }
class C{  static boolean isProxyAuthzControl(String oid){  return OID_PROXIED_AUTH_V1.equals(oid) || OID_PROXIED_AUTH_V2.equals(oid);}  }
class C{  public final int peepOrNull(){  return ((null != m_map) && (m_firstFree > 0)) ? m_map[m_firstFree - 1] : DTM.NULL;}  }
class C{  public boolean hasChild(String childName){  return children.containsKey(childName);}  }
class C{  private void write(MessageBytes mb){  if (mb.getType() != MessageBytes.T_BYTES) {    mb.toBytes();    ByteChunk bc=mb.getByteChunk();    byte[] buffer=bc.getBuffer();    for (int i=bc.getOffset(); i < bc.getLength(); i++) {      if ((buffer[i] > -1 && buffer[i] <= 31 && buffer[i] != 9) || buffer[i] == 127) {        buffer[i]=' ';      }    }  }  write(mb.getByteChunk());}  }
class C{  private static void loadPackageData(Context context){  if (context != null) {    try {      PackageManager packageManager=context.getPackageManager();      PackageInfo packageInfo=packageManager.getPackageInfo(context.getPackageName(),0);      CrashConstants.APP_PACKAGE=packageInfo.packageName;      CrashConstants.APP_VERSION="" + packageInfo.versionCode;      CrashConstants.APP_VERSION_NAME=packageInfo.versionName;      int buildNumber=loadBuildNumber(context,packageManager);      if ((buildNumber != 0) && (buildNumber > packageInfo.versionCode)) {        CrashConstants.APP_VERSION="" + buildNumber;      }    } catch (    PackageManager.NameNotFoundException e) {      L.e("Exception thrown when accessing the package info:");      e.printStackTrace();    }  }}  }
class C{  public SQLNonTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void dragEnter(DropTargetDragEvent dtde){}  }
class C{  public SwitchFilter addRequestCase(final Expression<Boolean> condition,final Handler handler){  requestCases.add(new Case(condition,handler));  return this;}  }
class C{  private void updatePacketRecvAddress(DatagramPacket packet){  packet.setAddress(connectedAddress);  packet.setPort(connectedPort);}  }
class C{  public static boolean isSAMLDecryptionDebugEnabled(){  return SystemPropertiesManager.getAsBoolean(SAML2Constants.SAML_DECRYPTION_DEBUG_MODE);}  }
class C{  public boolean hasSASLMechanism(String saslMechanism){  return this.saslMechanism.equals(saslMechanism);}  }
class C{  public PBEParameterSpec(byte[] salt,int iterationCount){  if (salt == null) {    throw new NullPointerException("salt == null");  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;}  }
class C{  public static Node selectSingleNode(Node doc,String str) throws XPathException {  return selectSingleNode(doc,str,doc);}  }
class C{  @Override public void contextInitialized(ServletContextEvent event){  this.context=event.getServletContext();  log("contextInitialized()");}  }
class C{  public JarException(){}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public BufferedReader(Reader in,int sz){  super(in);  if (sz <= 0)   throw new IllegalArgumentException("Buffer size <= 0");  this.in=in;  cb=new char[sz];  nextChar=nChars=0;}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public NodeList nodelist() throws javax.xml.transform.TransformerException {  return (m_origObj instanceof NodeList) ? (NodeList)m_origObj : super.nodelist();}  }
class C{  public void test_getSubject(){  Subject subj=new Subject();  AccessControlContext acc=new AccessControlContext(new ProtectionDomain[0]);  try {    assertNull(Subject.getSubject(acc));  } catch (  Exception e) {    fail("Unexpected exception " + e);  }}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  setResourceBundle(record);  log(record);}  }
class C{  public void changePassword(String oldPassword,String newPassword) throws IdRepoException, SSOException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  idServices.changePassword(token,type,name,oldPassword,newPassword,orgName,getDN());}  }
class C{  public int size(){  return addrs.size();}  }
class C{  public PasteAction(){  super(pasteAction);}  }
class C{  public void parseAdvice(Element element){  NodeList nl=element.getChildNodes();  int length=nl.getLength();  for (int n=0; n < length; n++) {    Node child=(Node)nl.item(n);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    String childName=child.getLocalName();    if (childName.equals("Assertion")) {      try {        if (securityAssertions == null) {          securityAssertions=new ArrayList();        }        securityAssertions.add(new SecurityAssertion((Element)child));      } catch (      Exception ex) {        FSUtils.debug.error("FSAssertion.parseAdvice: Error in" + "parsing security assertion",ex);      }    }  }  if ((securityAssertions != null) && (!securityAssertions.isEmpty())) {    _advice=new Advice(null,securityAssertions,null);  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  backTrail();  forwardToRealmView(event);}  }
class C{  public Task scheduleNextIteration(GregorianCalendar calendar) throws DirectoryException {  Task nextTask=null;  Date nextTaskDate=null;  try {    nextTaskDate=getNextIteration(calendar);  } catch (  IllegalArgumentException e) {    logger.traceException(e);    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_TOKENS_COMBO.get(ATTR_RECURRING_TASK_SCHEDULE));  }  SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_COMPACT_LOCAL_TIME);  String nextTaskStartTime=dateFormat.format(nextTaskDate);  try {    nextTask=task.getClass().newInstance();    Entry nextTaskEntry=recurringTaskEntry.duplicate(false);    SimpleDateFormat df=new SimpleDateFormat("yyyyMMddHHmmssSSS");    String nextTaskID=task.getTaskID() + "-" + df.format(nextTaskDate);    String nextTaskIDName=NAME_PREFIX_TASK + "id";    nextTaskEntry.replaceAttribute(Attributes.create(nextTaskIDName,nextTaskID));    RDN nextTaskRDN=new RDN(DirectoryServer.getSchema().getAttributeType(nextTaskIDName),nextTaskID);    DN nextTaskDN=taskScheduler.getTaskBackend().getScheduledTasksParentDN().child(nextTaskRDN);    nextTaskEntry.setDN(nextTaskDN);    String nextTaskStartTimeName=NAME_PREFIX_TASK + "scheduled-start-time";    nextTaskEntry.replaceAttribute(Attributes.create(nextTaskStartTimeName,nextTaskStartTime));    nextTask.initializeTaskInternal(serverContext,taskScheduler,nextTaskEntry);    nextTask.initializeTask();  } catch (  Exception e) {    logger.traceException(e);  }  return nextTask;}  }
class C{  public static void updateStationToDb(Context context,String newStationName,int newStationType,int stationFreq){  final int size=3;  ContentValues values=new ContentValues(size);  values.put(Station.COLUMN_STATION_NAME,newStationName);  values.put(Station.COLUMN_STATION_FREQ,stationFreq);  values.put(Station.COLUMN_STATION_TYPE,newStationType);  context.getContentResolver().update(Station.CONTENT_URI,values,Station.COLUMN_STATION_FREQ + "=? AND " + Station.COLUMN_STATION_TYPE+ "<>"+ STATION_TYPE_CURRENT,new String[]{String.valueOf(stationFreq)});  Log.d(TAG,"FmRadioStation.updateStationToDb: new name = " + newStationName + ", new freq type = "+ newStationType);}  }
class C{  public void run(){  try {    Thread.sleep(timeout);    thread.interrupt();  } catch (  InterruptedException e) {  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS02.class,args);}  }
class C{  public SearchResult(String name,String className,Object obj,Attributes attrs){  super(name,className,obj);  this.attrs=attrs;}  }
class C{  public static final double determinant(PlaPointFloat p_a,PlaPointFloat p_b){  return p_a.v_x * p_b.v_y - p_a.v_y * p_b.v_x;}  }
class C{  @Restricted(NoExternalUse.class) public String iotaStr(){  return String.valueOf(iota());}  }
class C{  public ID3v24Tag(AbstractTag mp3tag){  logger.config("Creating tag from a tag of a different version");  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();  if (mp3tag != null) {    if ((mp3tag instanceof ID3v24Tag)) {      throw new UnsupportedOperationException("Copy Constructor not called. Please type cast the argument");    } else     if (mp3tag instanceof AbstractID3v2Tag) {      this.setLoggingFilename(((AbstractID3v2Tag)mp3tag).getLoggingFilename());      copyPrimitives((AbstractID3v2Tag)mp3tag);      copyFrames((AbstractID3v2Tag)mp3tag);    } else     if (mp3tag instanceof ID3v1Tag) {      ID3v1Tag id3tag=(ID3v1Tag)mp3tag;      ID3v24Frame newFrame;      AbstractID3v2FrameBody newBody;      if (id3tag.title.length() > 0) {        newBody=new FrameBodyTIT2((byte)0,id3tag.title);        newFrame=new ID3v24Frame(ID3v24Frames.FRAME_ID_TITLE);        newFrame.setBody(newBody);        frameMap.put(newFrame.getIdentifier(),newFrame);      }      if (id3tag.artist.length() > 0) {        newBody=new FrameBodyTPE1((byte)0,id3tag.artist);        newFrame=new ID3v24Frame(ID3v24Frames.FRAME_ID_ARTIST);        newFrame.setBody(newBody);        frameMap.put(newFrame.getIdentifier(),newFrame);      }      if (id3tag.album.length() > 0) {        newBody=new FrameBodyTALB((byte)0,id3tag.album);        newFrame=new ID3v24Frame(ID3v24Frames.FRAME_ID_ALBUM);        newFrame.setBody(newBody);        frameMap.put(newFrame.getIdentifier(),newFrame);      }      if (id3tag.year.length() > 0) {        newBody=new FrameBodyTDRC((byte)0,id3tag.year);        newFrame=new ID3v24Frame(ID3v24Frames.FRAME_ID_YEAR);        newFrame.setBody(newBody);        frameMap.put(newFrame.getIdentifier(),newFrame);      }      if (id3tag.comment.length() > 0) {        newBody=new FrameBodyCOMM((byte)0,"ENG","",id3tag.comment);        newFrame=new ID3v24Frame(ID3v24Frames.FRAME_ID_COMMENT);        newFrame.setBody(newBody);        frameMap.put(newFrame.getIdentifier(),newFrame);      }      if (((id3tag.genre & ID3v1Tag.BYTE_TO_UNSIGNED) >= 0) && ((id3tag.genre & ID3v1Tag.BYTE_TO_UNSIGNED) != ID3v1Tag.BYTE_TO_UNSIGNED)) {        Integer genreId=id3tag.genre & ID3v1Tag.BYTE_TO_UNSIGNED;        String genre="(" + genreId + ") "+ GenreTypes.getInstanceOf().getValueForId(genreId);        newBody=new FrameBodyTCON((byte)0,genre);        newFrame=new ID3v24Frame(ID3v24Frames.FRAME_ID_GENRE);        newFrame.setBody(newBody);        frameMap.put(newFrame.getIdentifier(),newFrame);      }      if (mp3tag instanceof ID3v11Tag) {        ID3v11Tag id3tag2=(ID3v11Tag)mp3tag;        if (id3tag2.track > 0) {          newBody=new FrameBodyTRCK((byte)0,Byte.toString(id3tag2.track));          newFrame=new ID3v24Frame(ID3v24Frames.FRAME_ID_TRACK);          newFrame.setBody(newBody);          frameMap.put(newFrame.getIdentifier(),newFrame);        }      }    } else     if (mp3tag instanceof AbstractLyrics3) {      Lyrics3v2 lyric;      if (mp3tag instanceof Lyrics3v2) {        lyric=new Lyrics3v2((Lyrics3v2)mp3tag);      } else {        lyric=new Lyrics3v2(mp3tag);      }      Iterator<Lyrics3v2Field> iterator=lyric.iterator();      Lyrics3v2Field field;      ID3v24Frame newFrame;      while (iterator.hasNext()) {        try {          field=iterator.next();          newFrame=new ID3v24Frame(field);          frameMap.put(newFrame.getIdentifier(),newFrame);        } catch (        InvalidTagException ex) {          logger.warning("Unable to convert Lyrics3 to v24 Frame:Frame Identifier");        }      }    }  }}  }
class C{  public static Entry modifyEntryStrict(final Entry entry,final Collection<Modification> changes) throws LdapException {  return modifyEntry0(entry,changes,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns08.class,args);}  }
class C{  public IOException(Throwable cause){  this(UnknownIOException,cause);}  }
class C{  public boolean isParameter(){  return (type & PARAMETER) != 0;}  }
class C{  public ObjectInUseException(String message){  super(message);}  }
class C{  protected boolean engineVerify(byte[] sigBytes) throws SignatureException {  if (sigBytes == null) {    throw new NullPointerException("sigBytes == null");  }  return checkSignature(sigBytes,0,0);}  }
class C{  private StringBuffer format(BigInteger number,StringBuffer result,FieldDelegate delegate,boolean formatLong){  if (multiplier != 1) {    number=number.multiply(getBigIntegerMultiplier());  }  boolean isNegative=number.signum() == -1;  if (isNegative) {    number=number.negate();  }synchronized (digitList) {    int maxIntDigits, minIntDigits, maxFraDigits, minFraDigits, maximumDigits;    if (formatLong) {      maxIntDigits=super.getMaximumIntegerDigits();      minIntDigits=super.getMinimumIntegerDigits();      maxFraDigits=super.getMaximumFractionDigits();      minFraDigits=super.getMinimumFractionDigits();      maximumDigits=maxIntDigits + maxFraDigits;    } else {      maxIntDigits=getMaximumIntegerDigits();      minIntDigits=getMinimumIntegerDigits();      maxFraDigits=getMaximumFractionDigits();      minFraDigits=getMinimumFractionDigits();      maximumDigits=maxIntDigits + maxFraDigits;      if (maximumDigits < 0) {        maximumDigits=Integer.MAX_VALUE;      }    }    digitList.set(isNegative,number,useExponentialNotation ? maximumDigits : 0);    return subformat(result,delegate,isNegative,true,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);  }}  }
class C{  public void write(int b){  try {synchronized (this) {      ensureOpen();      out.write(b);      if ((b == '\n') && autoFlush)       out.flush();    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  public void onSelectMedia(View v){  if (!mPermissionsGranted) {    mStatusView.setErrorMessage("The application has not been granted permission to read from external storage");  } else {    selectVideoFile();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetnextsiblingnull.class,args);}  }
class C{  private void clearBuffer(){  for (int i=0; i < BUF_SIZE; i++) {    buf[i]=0;  }}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public boolean isCompressionLossless(){  if (getCompressionMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Compression mode not MODE_EXPLICIT!");  }  return false;}  }
class C{  private void delete(File file) throws ApplicationException {  final boolean isFile=file.isFile();  final String absolutePath=file.getAbsolutePath();  if (isVerbose()) {    LocalizableMessage msg=isFile ? INFO_PROGRESS_DELETING_FILE.get(absolutePath) : INFO_PROGRESS_DELETING_DIRECTORY.get(absolutePath);    notifyListeners(getFormattedWithPoints(msg));  }  boolean delete=false;  int nTries=5;  for (int i=0; i < nTries && !delete; i++) {    delete=file.delete();    if (!delete) {      try {        Thread.sleep(1000);      } catch (      Exception ex) {      }    }  }  if (!delete) {    LocalizableMessage errMsg=isFile ? INFO_ERROR_DELETING_FILE.get(absolutePath) : INFO_ERROR_DELETING_DIRECTORY.get(absolutePath);    throw new ApplicationException(ReturnCode.FILE_SYSTEM_ACCESS_ERROR,errMsg,null);  }  if (isVerbose()) {    notifyListeners(getFormattedDoneWithLineBreak());  }}  }
class C{  public void dispatchCharactersEvents(int nodeHandle,org.xml.sax.ContentHandler ch,boolean normalize) throws org.xml.sax.SAXException {}  }
class C{  public void testSetScaleSame(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=18;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.equals(aNumber));}  }
class C{  public boolean optionsEqual(AttributeDescription attributeDescription){  return toAttribute0().getAttributeDescription().equals(attributeDescription);}  }
class C{  private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementremoveattribute.class,args);}  }
class C{  public void cache(SessionInfo info,String jwtToken){  Reject.ifNull(info,jwtToken,"Arguments cannot be null.");  sessionInfoCache.put(jwtToken,info);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().addFoo(foo);}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public static String last(final String value,int n){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (n > value.length()) {    return value;  }  return value.substring(value.length() - n);}  }
class C{  public void testValueOfNegScaleNeg(){  long a=-98374823947823578L;  int scale=-12;  BigDecimal aNumber=BigDecimal.valueOf(a,scale);  String result="-9.8374823947823578E+28";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  private static String readFile(String fileName){  String classMethod="UpgradeUtils:readFile : ";  StringBuilder fileData=new StringBuilder();  String fileString="";  try {    BufferedReader reader=new BufferedReader(new FileReader(fileName));    char[] buf=new char[1024];    int numRead=0;    while ((numRead=reader.read(buf)) != -1) {      String readData=String.valueOf(buf,0,numRead);      fileData.append(readData);      buf=new char[1024];    }    reader.close();    fileString=fileData.toString();  } catch (  Exception e) {    debug.error(classMethod + "Error reading file : " + fileName);  }  return fileString;}  }
class C{  protected boolean isLayoutValid(int axis){  if (axis == majorAxis) {    return majorAllocValid;  } else {    return minorAllocValid;  }}  }
class C{  public void intervalAdded(ListDataEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  public FrameBodyTENC(){}  }
class C{  public void clear(){  map.clear();}  }
class C{  public static FontProgram createFont() throws java.io.IOException {  return createFont(FontConstants.HELVETICA);}  }
class C{  public static <S>ServiceLoader<S> loadInstalled(Class<S> service){  ClassLoader cl=ClassLoader.getSystemClassLoader();  if (cl != null) {    while (cl.getParent() != null) {      cl=cl.getParent();    }  }  return ServiceLoader.load(service,cl);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssX509V3Token11Element createWssX509V3Token11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssX509V3Token11ElementImpl();}  }
class C{  public static boolean hasLollipop(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  public static final String createXPATHMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey);  if (msg == null) {    msg=fResourceBundle.getString(XPATHErrorResources.BAD_CODE);    throwex=true;  }  if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      fmsg=fResourceBundle.getString(XPATHErrorResources.FORMAT_FAILED);      fmsg+=" " + msg;    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  public void paintSliderThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl(value);}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {      throw new IndexOutOfBoundsException();    } else     if (len == 0) {      return;    }    if (len >= nChars) {      flushBuffer();      out.write(cbuf,off,len);      return;    }    int b=off, t=off + len;    while (b < t) {      int d=min(nChars - nextChar,t - b);      System.arraycopy(cbuf,b,cb,nextChar,d);      b+=d;      nextChar+=d;      if (nextChar >= nChars)       flushBuffer();    }  }}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String03() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  for (int i=1; i < invalidValues.length; i++) {    for (int j=0; j < validValues.length; j++) {      try {        SSLContext.getInstance(validValues[j],invalidValues[i]);        fail("NuSuchProviderException must be thrown (protocol: ".concat(validValues[j]).concat(" provider: ").concat(invalidValues[i]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public String toString(){  return value;}  }
class C{  public JSONObject(Map map){  super(map);}  }
class C{  public UnionMember(String __name,org.omg.CORBA.Any __label,org.omg.CORBA.TypeCode __type,org.omg.CORBA.IDLType __type_def){  name=__name;  label=__label;  type=__type;  type_def=__type_def;}  }
class C{  public ManageReferralControl(){  super(OID,true,null);}  }
class C{  public int hashCode(){  return m_hashCode;}  }
class C{  public Object pop(){  Object val=m_map[--m_firstFree];  m_map[m_firstFree]=null;  return val;}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.LocalizedURIType createLocalizedURIType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.LocalizedURITypeImpl();}  }
class C{  public CompletedLoginProcess(LoginAuthenticator loginAuthenticator,LoginConfiguration loginConfiguration,CoreServicesWrapper coreServicesWrapper,SSOToken ssoToken){  super(loginAuthenticator,loginConfiguration,null,coreServicesWrapper);  this.ssoToken=ssoToken;  orgDn=coreServicesWrapper.getDomainNameByRequest(loginConfiguration.getHttpRequest());}  }
class C{  @Override public void printValue(PrintWriter writer,int indent,String name,Object value){  String repl=name;  if (replacements.get(name) != null) {    repl=replacements.get(name);  }  super.printValue(writer,indent,repl,value);}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public static Map<String,Object> toJsonValueMap(Map<String,Set<String>> attributeMap){  Map<String,Object> jsonValueMap=new HashMap<String,Object>(attributeMap.size());  for (  Map.Entry<String,Set<String>> entry : attributeMap.entrySet()) {    if ((entry.getValue() != null) && !entry.getValue().isEmpty()) {      jsonValueMap.put(entry.getKey(),entry.getValue().iterator().next());    } else {      jsonValueMap.put(entry.getKey(),null);    }  }  return jsonValueMap;}  }
class C{  public void testToString(){  assertTrue(new CodeSigner(cpath,null).toString().contains(""));  assertTrue(new CodeSigner(cpath,ts).toString().contains(""));  assertTrue(new CodeSigner(cpath,null).toString().contains("Signer"));  assertTrue(new CodeSigner(cpath,ts).toString().contains(ts.toString()));}  }
class C{  public RequestLine parseRequestLine(final CharArrayBuffer buffer,final ParserCursor cursor) throws ParseException {  if (buffer == null) {    throw new IllegalArgumentException("Char array buffer may not be null");  }  if (cursor == null) {    throw new IllegalArgumentException("Parser cursor may not be null");  }  int indexFrom=cursor.getPos();  int indexTo=cursor.getUpperBound();  try {    skipWhitespace(buffer,cursor);    int i=cursor.getPos();    int blank=buffer.indexOf(' ',i,indexTo);    if (blank < 0) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    String method=buffer.substringTrimmed(i,blank);    cursor.updatePos(blank);    skipWhitespace(buffer,cursor);    i=cursor.getPos();    blank=buffer.indexOf(' ',i,indexTo);    if (blank < 0) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    String uri=buffer.substringTrimmed(i,blank);    cursor.updatePos(blank);    ProtocolVersion ver=parseProtocolVersion(buffer,cursor);    skipWhitespace(buffer,cursor);    if (!cursor.atEnd()) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    return createRequestLine(method,uri,ver);  } catch (  IndexOutOfBoundsException e) {    throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterMoreInfo);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementreplaceattributewithself.class,args);}  }
class C{  public AuditEvent auditAccessAttempt(){  return accessEvent().forHttpServletRequest(request).timestamp(startTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(AM_ACCESS_ATTEMPT).component(component).toEvent();}  }
class C{  public static Request convert(YarRequest yarRequest,Class<?> interfaceClass){  DefaultRequest request=new DefaultRequest();  request.setInterfaceName(interfaceClass.getName());  request.setMethodName(yarRequest.getMethodName());  request.setRequestId(yarRequest.getId());  addArguments(request,interfaceClass,yarRequest.getMethodName(),yarRequest.getParameters());  if (yarRequest instanceof AttachmentRequest) {    request.setAttachments(((AttachmentRequest)yarRequest).getAttachments());  }  return request;}  }
class C{  public void createDocument() throws ConnectorException {  try {    DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();    document=documentBuilder.newDocument();  } catch (  Exception e) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,e);  }}  }
class C{  protected void resetChildrenRowsFrom(int newRow,int childIndex,int modelIndex){  int lastRow=newRow;  int lastModelIndex=modelIndex;  FHTreeStateNode node;  int maxCounter=getChildCount();  for (int counter=childIndex; counter < maxCounter; counter++) {    node=(FHTreeStateNode)getChildAt(counter);    lastRow+=(node.childIndex - lastModelIndex);    lastModelIndex=node.childIndex + 1;    if (node.isExpanded) {      lastRow=node.setRowAndChildren(lastRow);    } else {      node.row=lastRow++;    }  }  lastRow+=childCount - lastModelIndex;  node=(FHTreeStateNode)getParent();  if (node != null) {    node.resetChildrenRowsFrom(lastRow,node.getIndex(this) + 1,this.childIndex + 1);  } else {    rowCount=lastRow;  }}  }
class C{  public double min_width(){  if (min_width != null)   return min_width.doubleValue();  min_width=Double.valueOf(500);  return min_width.doubleValue();}  }
class C{  @SuppressWarnings("deprecation") public boolean isInverted(){  return ((getData() & 0x8) != 0);}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public void testDivideBigDecimal2(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=-15;  String c="-5E-26";  int resScale=26;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public SAML2Config build(){  return new SAML2Config(this);}  }
class C{  public void init(Locale locale) throws CLIException {  Class defClass=getDefinitionClass();  getProductName(defClass);  getCommands(defClass);}  }
class C{  public void testGetInstanceStringString03() throws IllegalArgumentException, NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  KeyAgreement keyA;  for (int i=0; i < validValues.length; i++) {    keyA=KeyAgreement.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",keyA.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyA.getProvider().getName(),defaultProviderName);  }}  }
class C{  public Tree(final Material type,TreeSpecies species,BlockFace dir){  super(type,species);  setDirection(dir);}  }
class C{  public boolean isValidOn(Date date){  return !date.before(x509Certificate.getStartDate().getDate()) && !date.after(x509Certificate.getEndDate().getDate());}  }
class C{  private void handleRequestControls() throws DirectoryException {  LocalBackendWorkflowElement.evaluateProxyAuthControls(this);  LocalBackendWorkflowElement.removeAllDisallowedControls(baseDN,this);  for (  Control c : getRequestControls()) {    final String oid=c.getOID();    if (OID_LDAP_ASSERTION.equals(oid)) {      LDAPAssertionRequestControl assertControl=getRequestControl(LDAPAssertionRequestControl.DECODER);      SearchFilter assertionFilter;      try {        assertionFilter=assertControl.getSearchFilter();      } catch (      DirectoryException de) {        logger.traceException(de);        throw new DirectoryException(de.getResultCode(),ERR_SEARCH_CANNOT_PROCESS_ASSERTION_FILTER.get(de.getMessageObject()),de);      }      Entry entry;      try {        entry=DirectoryServer.getEntry(baseDN);      } catch (      DirectoryException de) {        logger.traceException(de);        throw new DirectoryException(de.getResultCode(),ERR_SEARCH_CANNOT_GET_ENTRY_FOR_ASSERTION.get(de.getMessageObject()));      }      if (entry == null) {        throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,ERR_SEARCH_NO_SUCH_ENTRY_FOR_ASSERTION.get());      }      if (!getAccessControlHandler().isAllowed(this,entry,assertionFilter)) {        throw new DirectoryException(ResultCode.INSUFFICIENT_ACCESS_RIGHTS,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(oid));      }      try {        if (!assertionFilter.matchesEntry(entry)) {          throw new DirectoryException(ResultCode.ASSERTION_FAILED,ERR_SEARCH_ASSERTION_FAILED.get());        }      } catch (      DirectoryException de) {        if (de.getResultCode() == ResultCode.ASSERTION_FAILED) {          throw de;        }        logger.traceException(de);        throw new DirectoryException(de.getResultCode(),ERR_SEARCH_CANNOT_PROCESS_ASSERTION_FILTER.get(de.getMessageObject()),de);      }    } else     if (LocalBackendWorkflowElement.isProxyAuthzControl(oid)) {      continue;    } else     if (OID_PERSISTENT_SEARCH.equals(oid)) {      final PersistentSearchControl ctl=getRequestControl(PersistentSearchControl.DECODER);      persistentSearch=new PersistentSearch(this,ctl.getChangeTypes(),ctl.getChangesOnly(),ctl.getReturnECs());    } else     if (OID_LDAP_SUBENTRIES.equals(oid)) {      SubentriesControl subentriesControl=getRequestControl(SubentriesControl.DECODER);      setReturnSubentriesOnly(subentriesControl.getVisibility());    } else     if (OID_LDUP_SUBENTRIES.equals(oid)) {      addAdditionalLogItem(AdditionalLogItem.keyOnly(getClass(),"obsoleteSubentryControl"));      setReturnSubentriesOnly(true);    } else     if (OID_MATCHED_VALUES.equals(oid)) {      setMatchedValuesControl(getRequestControl(MatchedValuesControl.DECODER));    } else     if (OID_ACCOUNT_USABLE_CONTROL.equals(oid)) {      setIncludeUsableControl(true);    } else     if (OID_REAL_ATTRS_ONLY.equals(oid)) {      setRealAttributesOnly(true);    } else     if (OID_VIRTUAL_ATTRS_ONLY.equals(oid)) {      setVirtualAttributesOnly(true);    } else     if (OID_GET_EFFECTIVE_RIGHTS.equals(oid) && DirectoryServer.isSupportedControl(OID_GET_EFFECTIVE_RIGHTS)) {    } else     if (c.isCritical() && !backendSupportsControl(oid)) {      throw new DirectoryException(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_SEARCH_UNSUPPORTED_CRITICAL_CONTROL.get(oid));    }  }}  }
class C{  public void startServer() throws IOException {  Runtime rt=Runtime.getRuntime();  process=rt.exec(startCommand);  CommandLineFetcher error=new CommandLineFetcher(process.getErrorStream(),serverErrorOutput);  CommandLineFetcher output=new CommandLineFetcher(process.getInputStream(),serverOutput);  error.start();  output.start();  LOGGER.info("Server successfully started.");}  }
class C{  public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  public static boolean isIPv4(String ipAddress){  if (ipAddress == null || ipAddress.isEmpty()) {    return false;  }  Matcher ipv4Matcher=IP_V4_PATTERN.matcher(ipAddress);  return ipv4Matcher.find();}  }
class C{  public final int peepTail(){  return m_map[m_firstFree - 1];}  }
class C{  public AWTEvent peekEvent(int id){  pushPopLock.lock();  try {    for (int i=NUM_PRIORITIES - 1; i >= 0; i--) {      EventQueueItem q=queues[i].head;      for (; q != null; q=q.next) {        if (q.event.getID() == id) {          return q.event;        }      }    }  }  finally {    pushPopLock.unlock();  }  return null;}  }
class C{  public static List toList(Object[] array){  List list=null;  if ((array != null) && (array.length > 0)) {    list=new ArrayList(array.length);    for (int i=0; i < array.length; i++) {      list.add((array[i].toString()).trim());    }  }  return (list == null) ? Collections.EMPTY_LIST : list;}  }
class C{  public boolean doVerifierAction(String logName,boolean result){  if (result) {    if (Debug.messageEnabled()) {      Debug.message(logName + ":Verification Successful");    }  } else {    Debug.error(logName + ":Verification Failure");  }  return result;}  }
class C{  public static void put(final Map<? extends String,? extends Object> map){  JKThreadLocal.get().putAll(map);}  }
class C{  public void write(char cbuf[],int off,int len){  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  buf.append(cbuf,off,len);}  }
class C{  public long skip(long n) throws IOException {  if (n < 0)   throw new IllegalArgumentException("skip() value is negative");  int nn=(int)Math.min(n,maxSkipBufferSize);synchronized (lock) {    if ((skipBuffer == null) || (skipBuffer.length < nn))     skipBuffer=new char[nn];    long r=n;    while (r > 0) {      int nc=read(skipBuffer,0,(int)Math.min(r,nn));      if (nc == -1)       break;      r-=nc;    }    return n - r;  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void stop(){  this.run=false;}  }
class C{  public boolean equal(org.omg.DynamicAny.DynAny dyn_any){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("equal",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    return $self.equal(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected Field(String name){  super(name);}  }
class C{  public static ThreatResult withData(String type,String desc,MethodNode mn,List<String> detections){  String detectionStr="";  for (  String detection : detections) {    detectionStr+=detection + "<br>";  }  return new ThreatResult(type,desc,"<b>" + mn.name + "()</b>:<br>Detections:<br><br>"+ detectionStr);}  }
class C{  public static void resetStartupCalled(){  startupCalled=false;}  }
class C{  @Override public void addMembershipListener(MembershipListener membershipListener){  if (!this.membershipListeners.contains(membershipListener))   this.membershipListeners.add(membershipListener);}  }
class C{  @BeforeClass public void beforeClass() throws Exception {  TestCaseUtils.startServer();  Entry configEntry=TestCaseUtils.makeEntry("dn: cn=samba password,cn=Plugins,cn=config","objectClass: ds-cfg-samba-password-plugin","objectClass: ds-cfg-plugin","objectClass: top","ds-cfg-plugin-type: postoperationextended","ds-cfg-plugin-type: preoperationmodify","ds-cfg-pwd-sync-policy: sync-nt-password","ds-cfg-pwd-sync-policy: sync-lm-password","ds-cfg-samba-administrator-dn: cn=samba admin,o=test","cn: samba password","ds-cfg-enabled: true","ds-cfg-java-class: org.opends.server.plugins.SambaPasswordPlugin");  TestCaseUtils.addEntry(configEntry);}  }
class C{  public FacebookOperationCanceledException(){  super();}  }
class C{  @SuppressWarnings("unused") public float dipToPixel(float dip){  DisplayMetrics metrics=this.getDisplayMetrics(this.getContext());  return dip * metrics.density;}  }
class C{  private void updateSpanTopParameters(){  spanTopMin=spanTop[0];  spanTopMax=spanTop[0];  for (int i=1; i < mSpanCount; i++) {    if (spanTopMin > spanTop[i])     spanTopMin=spanTop[i];    if (spanTopMax < spanTop[i])     spanTopMax=spanTop[i];  }}  }
class C{  public void windowActivated(WindowEvent e){}  }
class C{  public StatelessSession generate(SessionInfo info) throws SessionException {  String jwt=getJwtSessionMapper().asJwt(info);  SessionID sessionID=SessionID.generateStatelessSessionID(sessionServerConfig,info.getClientDomain(),jwt);  cache.cache(info,jwt);  return new StatelessSession(sessionID,info,this);}  }
class C{  void reset(){  try {    remove(0,getLength());    if (initialText != null) {      insertString(0,initialText,null);    }  } catch (  BadLocationException e) {  }}  }
class C{  public final void popContextNodeList(){  if (m_contextNodeLists.isEmpty())   System.err.println("Warning: popContextNodeList when stack is empty!"); else   m_contextNodeLists.pop();}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public LazyObjectAccessor(ConnectionFactory connectionFactory,String componentContext,String localId,JsonValue value){  this.connectionFactory=connectionFactory;  this.object=value;  this.componentContext=componentContext;  this.localId=localId;  this.loaded=true;}  }
class C{  protected void prepareMyRecordsIfNeeded(ProtocolMessage pm){  if (pm.getRecords() != null && !pm.getRecords().isEmpty()) {    byte[] records=recordHandler.wrapData(messageBytesCollector.getProtocolMessageBytes(),pm.getProtocolMessageType(),pm.getRecords());    messageBytesCollector.appendRecordBytes(records);    messageBytesCollector.flushProtocolMessageBytes();  }}  }
class C{  @Override public boolean isDebugEnabled(){  return true;}  }
class C{  public BeanContextServiceAvailableEvent(BeanContextServices bcs,Class sc){  super((BeanContext)bcs);  serviceClass=sc;}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append("role info name: " + name);  result.append("; isReadable: " + isReadable);  result.append("; isWritable: " + isWritable);  result.append("; description: " + description);  result.append("; minimum degree: " + minDegree);  result.append("; maximum degree: " + maxDegree);  result.append("; MBean class: " + referencedMBeanClassName);  return result.toString();}  }
class C{  protected void createDomain(SSOToken token,Guid orgGuid,AttrSet attrSet) throws AMException, SSOException {  if (DCTREE_START_DN == null) {    throw new AMException(AMSDKBundle.getString("355"),"355");  }  String domainName=attrSet.getValue(IPLANET_DOMAIN_NAME_ATTR);  attrSet.remove(IPLANET_DOMAIN_NAME_ATTR);  if ((domainName != null) && (!domainName.equals(""))) {    try {      DomainComponentTree dcTree=new DomainComponentTree(token,new Guid(DCTREE_START_DN));      dcTree.addDomain(domainName);      dcTree.setDomainMapping(domainName,orgGuid);      String status=attrSet.getValue(INET_DOMAIN_STATUS_ATTR);      if (status != null) {        dcTree.setDomainStatus(domainName,status);      }      AttrSet[] attrSetArray=splitAttrSet(orgGuid.getDn(),attrSet);      if (attrSetArray[1] != null) {        setDomainAttributes(token,orgGuid.getDn(),attrSetArray[1]);      }    } catch (    InvalidDCRootException ie) {      debug.error("DCTree.createDomain(): ",ie);      throw new AMException(AMSDKBundle.getString("343"),"343");    }catch (    UMSException ue) {      debug.error("DCTree.createDomain(): ",ue);      throw new AMException(AMSDKBundle.getString("344"),"344");    }  }}  }
class C{  public ConfigureData(String baseDir,ServletContext sctx,String hostname,SSOToken ssoToken){  this.baseDir=baseDir;  this.sctx=sctx;  this.hostname=hostname;  this.ssoToken=ssoToken;}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AttributeProfileElement createAttributeProfileElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AttributeProfileElementImpl();}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {}  }
class C{  public void removeAll(){  clear();}  }
class C{  public final void applySetting(DocumentBuilderFactory factory){  strategy.applySetting(factory,value);}  }
class C{  public void addHeading(String s){}  }
class C{  protected void initParams(){  params=new Hashtable<Integer,Object>();}  }
class C{  public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {  m_elemStack.pop();  m_currentNode=m_elemStack.isEmpty() ? null : (Node)m_elemStack.peek();}  }
class C{  private static String newString(final byte[] bytes,final Charset charset){  return bytes == null ? null : new String(bytes,charset);}  }
class C{  protected EditorKit createDefaultEditorKit(){  return new StyledEditorKit();}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public boolean hasGlobalSubSchema(){  return subConfigMeta.hasGlobalSubSchema();}  }
class C{  public long nextOperationID(){  long opID=nextOperationID.getAndIncrement();  if (opID < 0) {synchronized (nextOperationID) {      if (nextOperationID.get() < 0) {        nextOperationID.set(1);        return 0;      } else {        return nextOperationID.getAndIncrement();      }    }  }  return opID;}  }
class C{  public FireballBig genFireballBig(float xPos,float yPos){  String fireballBounds="M 0,0 L " + fireballScaleX + " ,0"+ " "+ fireballScaleX+ ","+ fireballScaleY+ " 0,"+ fireballScaleY+ " Z";  float fireballXVel=2.24f * REL_HEIGHT;  return new FireballBig(root,fireballBounds,xPos,yPos,fireballXVel,fireballb,fireballBlast);}  }
class C{  public static boolean hasDescriptor(LocalizableMessage msg,LocalizableMessageDescriptor.Arg7<?,?,?,?,?,?,?> desc){  return msg.ordinal() == desc.ordinal() && msg.resourceName().equals(desc.resourceName());}  }
class C{  public PluginResult.ImportLDIF invokeLDIFImportPlugins(LDIFImportConfig importConfig,Entry entry){  PluginResult.ImportLDIF result=null;  for (  DirectoryServerPlugin p : ldifImportPlugins) {    try {      result=p.doLDIFImport(importConfig,entry);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_PLUGIN_LDIF_IMPORT_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),entry.getName(),stackTraceToSingleLineString(e));      logger.error(message);      return PluginResult.ImportLDIF.stopEntryProcessing(message);    }    if (result == null) {      LocalizableMessage message=ERR_PLUGIN_LDIF_IMPORT_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),entry.getName());      logger.error(message);      return PluginResult.ImportLDIF.stopEntryProcessing(message);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.ImportLDIF.continueEntryProcessing();  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public static DefaultMutableTreeNode sort(DefaultMutableTreeNode node){  List<DefaultMutableTreeNode> children=Collections.list(node.children());  List<String> orgCnames=new ArrayList<String>();  List<String> cNames=new ArrayList<String>();  DefaultMutableTreeNode temParent=new DefaultMutableTreeNode();  for (  DefaultMutableTreeNode child : children) {    DefaultMutableTreeNode ch=(DefaultMutableTreeNode)child;    temParent.insert(ch,0);    String uppser=ch.toString().toUpperCase();    if (cNames.contains(uppser)) {      uppser+="$COPY";    }    cNames.add(uppser);    orgCnames.add(uppser);    if (!child.isLeaf()) {      sort(child);    }  }  Collections.sort(cNames);  for (  String name : cNames) {    int indx=orgCnames.indexOf(name);    int insertIndex=node.getChildCount();    node.insert(children.get(indx),insertIndex);  }  for (int i=0; i < node.getChildCount() - 1; i++) {    DefaultMutableTreeNode child=(DefaultMutableTreeNode)node.getChildAt(i);    for (int j=i + 1; j <= node.getChildCount() - 1; j++) {      DefaultMutableTreeNode prevNode=(DefaultMutableTreeNode)node.getChildAt(j);      if (!prevNode.isLeaf() && child.isLeaf()) {        node.insert(child,j);        node.insert(prevNode,i);      }    }  }  return node;}  }
class C{  public static String removeNonWords(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.replaceAll("[^\\w]+","");}  }
class C{  public void printStats(){  if (table.size() != 0) {    FSSessionManager.sessStats.record("Number of entries in " + name + " table for provider "+ providerId+ " in realm "+ realm+ " : "+ table.size());  } else {    FSSessionManager.sessStats.record("No entry found in " + name + " table for provider "+ providerId+ " in realm "+ realm+ ".");  }}  }
class C{  public WildcardFileFilter(String wildcard){  this(wildcard,null);}  }
class C{  public void testFloatValueNegMantissaIsZero(){  byte[] a={1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=-1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == Float.NEGATIVE_INFINITY);}  }
class C{  public boolean isPaintable(){  return false;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void paintOptionPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void socksConnect(InetAddress applicationServerAddress,int applicationServerPort,int timeout) throws IOException {  try {    IoBridge.connect(fd,socksGetServerAddress(),socksGetServerPort(),timeout);  } catch (  Exception e) {    throw new SocketException("SOCKS connection failed",e);  }  socksRequestConnection(applicationServerAddress,applicationServerPort);  lastConnectedAddress=applicationServerAddress;  lastConnectedPort=applicationServerPort;}  }
class C{  public LocalDateTime createDateTime(LocalDateTime dateTime,ZoneOffset standardOffset,ZoneOffset wallOffset){switch (this) {case UTC:{      int difference=wallOffset.getTotalSeconds() - ZoneOffset.UTC.getTotalSeconds();      return dateTime.plusSeconds(difference);    }case STANDARD:{    int difference=wallOffset.getTotalSeconds() - standardOffset.getTotalSeconds();    return dateTime.plusSeconds(difference);  }default :return dateTime;}}  }
class C{  private RunnableScheduledFuture<?> finishPoll(RunnableScheduledFuture<?> f){  int s=--size;  RunnableScheduledFuture<?> x=queue[s];  queue[s]=null;  if (s != 0)   siftDown(0,x);  setIndex(f,-1);  return f;}  }
class C{  private static synchronized void stopReplayThreads(){  for (  ReplayThread replayThread : replayThreads) {    replayThread.shutdown();  }  for (  ReplayThread replayThread : replayThreads) {    try {      replayThread.join();    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }  replayThreads.clear();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void test_engineCreateSSLEngine_01(){  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  try {    SSLEngine sleng=ssl.engineCreateSSLEngine();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }}  }
class C{  private void register(String key,Object value) throws SAXException {  if (key != null) {    if (_mapping.get(key) != null || (_handler != null && _handler.hasVariable(key))) {      throw new SAXException("ID " + key + " is already defined");    }    if (_handler != null) {      _handler.setVariable(key,value);    } else {      _mapping.put(key,value);    }  }}  }
class C{  static byte[] base64ToByteArray(String s){  return base64ToByteArray(s,false);}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public static String responseAttributesToXMLString(Set attrs){  StringBuilder xmlSB=new StringBuilder(1000);  xmlSB.append("<" + GET_RESPONSE_DECISIONS + ">"+ CRLF);  Iterator names=attrs.iterator();  while (names.hasNext()) {    String name=(String)names.next();    xmlSB.append("<").append(ATTRIBUTE).append(" ").append(ATTRIBUTE_NAME).append("=\"").append(XMLUtils.escapeSpecialCharacters(name)).append("\"/>").append(CRLF);  }  xmlSB.append("</" + GET_RESPONSE_DECISIONS + ">"+ CRLF);  return xmlSB.toString();}  }
class C{  public JKTableModel(){}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String[] params={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_SUPPORTED_IDTYPES",params);  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set supportedIdTypes=amir.getSupportedIdTypes();    if ((supportedIdTypes != null) && !supportedIdTypes.isEmpty()) {      String msg=getResourceString("supported-type-result");      String[] arg={""};      for (Iterator i=supportedIdTypes.iterator(); i.hasNext(); ) {        arg[0]=((IdType)i.next()).getName();        outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));      }    } else {      outputWriter.printlnMessage(getResourceString("no-supported-idtype"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_SUPPORTED_IDTYPES",params);  } catch (  IdRepoException e) {    String[] args={realm,e.getMessage()};    debugError("GetSupportedIdTypes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_SUPPORTED_IDTYPES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,e.getMessage()};    debugError("GetSupportedIdTypes.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_SUPPORTED_IDTYPES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public V put(K key,V value){  Object _key=key;  Object _value=value;  if (_key == null) {    _key=NULL_OBJECT;  }  if (_value == null) {    _value=NULL_OBJECT;  }  int index=findIndex(_key,elementData);  if (elementData[index] != _key) {    modCount++;    if (++size > threshold) {      rehash();      index=findIndex(_key,elementData);    }    elementData[index]=_key;    elementData[index + 1]=null;  }  Object result=elementData[index + 1];  elementData[index + 1]=_value;  return massageValue(result);}  }
class C{  @Override public void removeAttributes(SSOToken token,IdType type,String name,Set<String> attrNames) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("removeAttributes invoked");  }  attrNames=removeUndefinedAttributes(type,attrNames);  if (attrNames.isEmpty()) {    throw newIdRepoException(IdRepoErrorCode.ILLEGAL_ARGUMENTS);  }  String dn=getDN(type,name);  ModifyRequest modifyRequest=LDAPRequests.newModifyRequest(dn);  for (  String attr : attrNames) {    modifyRequest.addModification(ModificationType.DELETE,attr);  }  Connection conn=null;  try {    conn=createConnection();    conn.modify(modifyRequest);  } catch (  LdapException ere) {    DEBUG.error("An error occurred while removing attributes from identity: " + name + " attributes: "+ attrNames,ere);    handleErrorResult(ere);  } finally {    IOUtils.closeIfNotNull(conn);  }}  }
class C{  public static void validateRelayStateURL(String orgName,String hostEntityId,String relayState,String role) throws SAML2Exception {  if (relayState != null && !relayState.isEmpty()) {    if (!RELAY_STATE_VALIDATOR.isRedirectUrlValid(relayState,SAMLEntityInfo.from(orgName,hostEntityId,role))) {      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidRelayStateUrl"));    }  }}  }
class C{  private void doCollection(TagPluginContext ctxt){  ctxt.generateImport("java.util.*");  generateIterators(ctxt);  String itemsV=ctxt.getTemporaryVariableName();  ctxt.generateJavaSource("Object " + itemsV + "= ");  ctxt.generateAttribute("items");  ctxt.generateJavaSource(";");  String indexV=null, beginV=null, endV=null, stepV=null;  if (hasBegin) {    beginV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("int " + beginV + " = ");    ctxt.generateAttribute("begin");    ctxt.generateJavaSource(";");  }  if (hasEnd) {    indexV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("int " + indexV + " = 0;");    endV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("int " + endV + " = ");    ctxt.generateAttribute("end");    ctxt.generateJavaSource(";");  }  if (hasStep) {    stepV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("int " + stepV + " = ");    ctxt.generateAttribute("step");    ctxt.generateJavaSource(";");  }  String iterV=ctxt.getTemporaryVariableName();  ctxt.generateJavaSource("Iterator " + iterV + " = null;");  ctxt.generateJavaSource("if (" + itemsV + " instanceof Object[])");  ctxt.generateJavaSource(iterV + "=toIterator((Object[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof boolean[])");  ctxt.generateJavaSource(iterV + "=toIterator((boolean[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof byte[])");  ctxt.generateJavaSource(iterV + "=toIterator((byte[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof char[])");  ctxt.generateJavaSource(iterV + "=toIterator((char[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof short[])");  ctxt.generateJavaSource(iterV + "=toIterator((short[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof int[])");  ctxt.generateJavaSource(iterV + "=toIterator((int[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof long[])");  ctxt.generateJavaSource(iterV + "=toIterator((long[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof float[])");  ctxt.generateJavaSource(iterV + "=toIterator((float[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof double[])");  ctxt.generateJavaSource(iterV + "=toIterator((double[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof Collection)");  ctxt.generateJavaSource(iterV + "=((Collection)" + itemsV+ ").iterator();");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof Iterator)");  ctxt.generateJavaSource(iterV + "=(Iterator)" + itemsV+ ";");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof Enumeration)");  ctxt.generateJavaSource(iterV + "=toIterator((Enumeration)" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof Map)");  ctxt.generateJavaSource(iterV + "=((Map)" + itemsV+ ").entrySet().iterator();");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof String)");  ctxt.generateJavaSource(iterV + "=toIterator(new StringTokenizer((String)" + itemsV+ ", \",\"));");  ctxt.generateJavaSource("if (" + iterV + " != null) {");  if (hasBegin) {    String tV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("for (int " + tV + "="+ beginV+ ";"+ tV+ ">0 && "+ iterV+ ".hasNext(); "+ tV+ "--)");    ctxt.generateJavaSource(iterV + ".next();");  }  ctxt.generateJavaSource("while (" + iterV + ".hasNext()){");  if (hasVar) {    ctxt.generateJavaSource("_jspx_page_context.setAttribute(");    ctxt.generateAttribute("var");    ctxt.generateJavaSource(", " + iterV + ".next());");  }  ctxt.generateBody();  if (hasStep) {    String tV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("for (int " + tV + "="+ stepV+ "-1;"+ tV+ ">0 && "+ iterV+ ".hasNext(); "+ tV+ "--)");    ctxt.generateJavaSource(iterV + ".next();");  }  if (hasEnd) {    if (hasStep) {      ctxt.generateJavaSource(indexV + "+=" + stepV+ ";");    } else {      ctxt.generateJavaSource(indexV + "++;");    }    if (hasBegin) {      ctxt.generateJavaSource("if(" + beginV + "+"+ indexV+ ">"+ endV+ ")");    } else {      ctxt.generateJavaSource("if(" + indexV + ">"+ endV+ ")");    }    ctxt.generateJavaSource("break;");  }  ctxt.generateJavaSource("}");  ctxt.generateJavaSource("}");}  }
class C{  protected void paintComponent(Graphics g){  if (isDragging) {    danger=true;  }  super.paintComponent(g);}  }
class C{  @Override public final void invoke(Request request,Response response) throws IOException, ServletException {  boolean unavailable=false;  Throwable throwable=null;  long t1=System.currentTimeMillis();  requestCount.incrementAndGet();  StandardWrapper wrapper=(StandardWrapper)getContainer();  Servlet servlet=null;  Context context=(Context)wrapper.getParent();  if (!context.getState().isAvailable()) {    response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,sm.getString("standardContext.isUnavailable"));    unavailable=true;  }  if (!unavailable && wrapper.isUnavailable()) {    container.getLogger().info(sm.getString("standardWrapper.isUnavailable",wrapper.getName()));    long available=wrapper.getAvailable();    if ((available > 0L) && (available < Long.MAX_VALUE)) {      response.setDateHeader("Retry-After",available);      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,sm.getString("standardWrapper.isUnavailable",wrapper.getName()));    } else     if (available == Long.MAX_VALUE) {      response.sendError(HttpServletResponse.SC_NOT_FOUND,sm.getString("standardWrapper.notFound",wrapper.getName()));    }    unavailable=true;  }  try {    if (!unavailable) {      servlet=wrapper.allocate();    }  } catch (  UnavailableException e) {    container.getLogger().error(sm.getString("standardWrapper.allocateException",wrapper.getName()),e);    long available=wrapper.getAvailable();    if ((available > 0L) && (available < Long.MAX_VALUE)) {      response.setDateHeader("Retry-After",available);      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,sm.getString("standardWrapper.isUnavailable",wrapper.getName()));    } else     if (available == Long.MAX_VALUE) {      response.sendError(HttpServletResponse.SC_NOT_FOUND,sm.getString("standardWrapper.notFound",wrapper.getName()));    }  }catch (  ServletException e) {    container.getLogger().error(sm.getString("standardWrapper.allocateException",wrapper.getName()),StandardWrapper.getRootCause(e));    throwable=e;    exception(request,response,e);  }catch (  Throwable e) {    ExceptionUtils.handleThrowable(e);    container.getLogger().error(sm.getString("standardWrapper.allocateException",wrapper.getName()),e);    throwable=e;    exception(request,response,e);    servlet=null;  }  MessageBytes requestPathMB=request.getRequestPathMB();  DispatcherType dispatcherType=DispatcherType.REQUEST;  if (request.getDispatcherType() == DispatcherType.ASYNC)   dispatcherType=DispatcherType.ASYNC;  request.setAttribute(Globals.DISPATCHER_TYPE_ATTR,dispatcherType);  request.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,requestPathMB);  ApplicationFilterChain filterChain=ApplicationFilterFactory.createFilterChain(request,wrapper,servlet);  try {    if ((servlet != null) && (filterChain != null)) {      if (context.getSwallowOutput()) {        try {          SystemLogHandler.startCapture();          if (request.isAsyncDispatching()) {            request.getAsyncContextInternal().doInternalDispatch();          } else {            filterChain.doFilter(request.getRequest(),response.getResponse());          }        }  finally {          String log=SystemLogHandler.stopCapture();          if (log != null && log.length() > 0) {            context.getLogger().info(log);          }        }      } else {        if (request.isAsyncDispatching()) {          request.getAsyncContextInternal().doInternalDispatch();        } else {          filterChain.doFilter(request.getRequest(),response.getResponse());        }      }    }  } catch (  ClientAbortException e) {    throwable=e;    exception(request,response,e);  }catch (  IOException e) {    container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName(),context.getName()),e);    throwable=e;    exception(request,response,e);  }catch (  UnavailableException e) {    container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName(),context.getName()),e);    wrapper.unavailable(e);    long available=wrapper.getAvailable();    if ((available > 0L) && (available < Long.MAX_VALUE)) {      response.setDateHeader("Retry-After",available);      response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,sm.getString("standardWrapper.isUnavailable",wrapper.getName()));    } else     if (available == Long.MAX_VALUE) {      response.sendError(HttpServletResponse.SC_NOT_FOUND,sm.getString("standardWrapper.notFound",wrapper.getName()));    }  }catch (  ServletException e) {    Throwable rootCause=StandardWrapper.getRootCause(e);    if (!(rootCause instanceof ClientAbortException)) {      container.getLogger().error(sm.getString("standardWrapper.serviceExceptionRoot",wrapper.getName(),context.getName(),e.getMessage()),rootCause);    }    throwable=e;    exception(request,response,e);  }catch (  Throwable e) {    ExceptionUtils.handleThrowable(e);    container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName(),context.getName()),e);    throwable=e;    exception(request,response,e);  }  if (filterChain != null) {    filterChain.release();  }  try {    if (servlet != null) {      wrapper.deallocate(servlet);    }  } catch (  Throwable e) {    ExceptionUtils.handleThrowable(e);    container.getLogger().error(sm.getString("standardWrapper.deallocateException",wrapper.getName()),e);    if (throwable == null) {      throwable=e;      exception(request,response,e);    }  }  try {    if ((servlet != null) && (wrapper.getAvailable() == Long.MAX_VALUE)) {      wrapper.unload();    }  } catch (  Throwable e) {    ExceptionUtils.handleThrowable(e);    container.getLogger().error(sm.getString("standardWrapper.unloadException",wrapper.getName()),e);    if (throwable == null) {      throwable=e;      exception(request,response,e);    }  }  long t2=System.currentTimeMillis();  long time=t2 - t1;  processingTime+=time;  if (time > maxTime)   maxTime=time;  if (time < minTime)   minTime=time;}  }
class C{  public static boolean attributeExists(String serviceName,String attributeName,String schemaType) throws UpgradeException {  boolean isExists=false;  try {    ServiceSchemaManager sm=getServiceSchemaManager(serviceName);    ServiceSchema ss=sm.getSchema(schemaType);    Map attributeDefaults=ss.getAttributeDefaults();    if (attributeDefaults.containsKey(attributeName)) {      HashSet hashSet=(HashSet)attributeDefaults.get(attributeName);      String value=(String)(hashSet.iterator().next());      isExists=true;    }  } catch (  SMSException sme) {    throw new UpgradeException("Error getting attribute value");  }  return isExists;}  }
class C{  void notNested(){synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }synchronized (this) {  }}  }
class C{  private static View buildActivityView(Activity activity,ResolveInfo resolveInfo,PackageManager pm,LayoutInflater inflater,ViewGroup parent,OnClickListener listener,Intent intent,String defaultText){  ActivityInfo activityInfo=resolveInfo.activityInfo;  intent.setAction(resolveInfo.filter.getAction(0));  intent.setComponent(new ComponentName(activityInfo.packageName,activityInfo.name));  View item=inflater.inflate(R.layout.nfc_tag_uri,parent,false);  item.setOnClickListener(listener);  item.setTag(new ClickInfo(activity,intent));  ImageView icon=(ImageView)item.findViewById(R.id.icon);  icon.setImageDrawable(resolveInfo.loadIcon(pm));  TextView text=(TextView)item.findViewById(R.id.secondary);  text.setText(resolveInfo.loadLabel(pm));  text=(TextView)item.findViewById(R.id.primary);  text.setText(defaultText);  return item;}  }
class C{  @Override public void close() throws SQLException {  try {    if (_stmt != null) {      ((AbandonedTrace)_stmt).removeTrace(this);      _stmt=null;    }    if (_conn != null) {      ((AbandonedTrace)_conn).removeTrace(this);      _conn=null;    }    _res.close();  } catch (  final SQLException e) {    handleException(e);  }}  }
class C{  private Message handleInteraction(Message requestMsg) throws DSTException, SOAPFaultException, SOAPBindingException, InteractionRedirectException {  if (requestMsg == null || httpRequest == null || httpResponse == null || soapURI == null) {    DSTUtils.debug.error("DSTClient:handeInteraction:null values");    throw new DSTException(DSTUtils.bundle.getString("nullInputParams"));  }  DSTUtils.debug.message("DSTClient:handleInteraction:init");  String resend=httpRequest.getParameter(InteractionManager.RESEND_MESSAGE);  String returnURL=httpRequest.getRequestURL().toString();  Message response;  try {    InteractionManager manager=InteractionManager.getInstance();    if (resend == null) {      response=manager.sendRequest(requestMsg,soapURI,certAlias,soapAction,returnURL,httpRequest,httpResponse);    } else {      response=manager.resendRequest(returnURL,httpRequest,httpResponse);    }    return response;  } catch (  InteractionRedirectException ire) {    DSTUtils.debug.message("DSTClient:handleInteraction: Interaction" + "Redirection happened.");    throw ire;  }catch (  InteractionException ie) {    DSTUtils.debug.error("DSTClient:handleInteraction: Interaction" + " Error occured.",ie);    throw new DSTException(ie);  }}  }
class C{  public static CompoundBorder createCompoundBorder(Border outsideBorder,Border insideBorder){  return new CompoundBorder(outsideBorder,insideBorder);}  }
class C{  private Properties extractProperties(Set<String> wrappingSet){  final String[] vals=wrappingSet.toArray(RadiusServerConstants.EMPTY_STRING_ARY);  final Properties cfg=new Properties();  for (  final String val : vals) {    final int idx=val.indexOf('=');    if (idx == -1) {      cfg.setProperty(val,"");    } else {      cfg.setProperty(val.substring(0,idx),val.substring(idx + 1));    }  }  return cfg;}  }
class C{  public static boolean hasEnoughSpace(String recordingSdcard){  boolean ret=false;  try {    StatFs fs=new StatFs(recordingSdcard);    long blocks=fs.getAvailableBlocks();    long blockSize=fs.getBlockSize();    long spaceLeft=blocks * blockSize;    Log.d(TAG,"hasEnoughSpace: available space=" + spaceLeft);    ret=spaceLeft > LOW_SPACE_THRESHOLD ? true : false;  } catch (  IllegalArgumentException e) {    Log.e(TAG,"sdcard may be unmounted:" + recordingSdcard);  }  return ret;}  }
class C{  public String toString(){  String string=getClass().getName();  string+="[" + paramString() + "]";  return string;}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) / 4;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  public boolean removeParameter(String name){  throw new UnsupportedOperationException("Removing parameters in a stack is not supported.");}  }
class C{  public Point add(Point p,Point q) throws DivisionException {  BigInteger xp=p.getX();  BigInteger yp=p.getY();  BigInteger xq=q.getX();  BigInteger yq=q.getY();  if (xq.subtract(xp).mod(curve.getP()).equals(BigInteger.ZERO)) {    throw new DivisionException("xq was equal to xp (mod p)");  }  BigInteger l=((yq.subtract(yp)).multiply((xq.subtract(xp)).modInverse(curve.getP()))).mod(curve.getP());  BigInteger xr=l.pow(2).subtract(xp).subtract(xq).mod(curve.getP());  BigInteger yr=(l.multiply(xp.subtract(xr))).subtract(yp).mod(curve.getP());  Point ret=new Point(xr,yr);  return ret;}  }
class C{  public NSDate(String textRepresentation) throws ParseException {  date=parseDateString(textRepresentation);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdatanomodificationallowederr.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns06.class,args);}  }
class C{  void finished(){  request=null;}  }
class C{  public PlaPointFloat dsn_to_board(double[] p_tuple){  double x=dsn_to_board(p_tuple[0] - base_x);  double y=dsn_to_board(p_tuple[1] - base_y);  return new PlaPointFloat(x,y);}  }
class C{  Counter(ElemNumber numberElem,NodeSetDTM countNodes) throws TransformerException {  m_countNodes=countNodes;  m_numberElem=numberElem;}  }
class C{  public void applyPattern(String pattern){  ndf.applyPattern(pattern);}  }
class C{  @Override public void create(Token token) throws CoreTokenException {  final ResultHandler<Token,CoreTokenException> createHandler=adapter.create(token);  createHandler.getResults();  debug("Token {0} created",token.getTokenId());}  }
class C{  TemplateEntry nextEntry(){  if (!hasNext()) {    throw new NoSuchElementException();  }  final TemplateEntry entry=nextEntry;  nextEntry=null;  return entry;}  }
class C{  public <C extends ConfigurationClient,S extends Configuration>R visitAggregation(AggregationPropertyDefinition<C,S> pd,String v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("b2bua: got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    Dialog dialog=st.getDialog();    ToHeader to=(ToHeader)request.getHeader(ToHeader.NAME);    SipURI toUri=(SipURI)to.getAddress().getURI();    SipURI target=registrar.get(toUri.getUser());    if (target == null) {      System.out.println("User " + toUri + " is not registered.");      throw new RuntimeException("User not registered " + toUri);    } else {      ClientTransaction otherLeg=call(target);      otherLeg.setApplicationData(st);      st.setApplicationData(otherLeg);      dialog.setApplicationData(otherLeg.getDialog());      otherLeg.getDialog().setApplicationData(dialog);    }  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public MultiDomainServerState(String cookie) throws DirectoryException {  list=new ConcurrentSkipListMap<>(splitGenStateToServerStates(cookie));}  }
class C{  public static ModifyRequest newModifyRequest(final String name){  Reject.ifNull(name);  return new ModifyRequestImpl(DN.valueOf(name));}  }
class C{  public void addSubTree(Tree<E> node){  node.parent=this;  children.add(node);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthenticatingAuthorityElement createAuthenticatingAuthorityElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthenticatingAuthorityElementImpl(value);}  }
class C{  public boolean isFocusTraversable(){  Component comp=getTextComponent();  if (comp instanceof JTextComponent) {    if (((JTextComponent)comp).isEditable()) {      return true;    }  }  return false;}  }
class C{  public String toString(){  CharArrayBuffer buffer=new CharArrayBuffer(16);  buffer.append(this.protocol);  buffer.append('/');  buffer.append(Integer.toString(this.major));  buffer.append('.');  buffer.append(Integer.toString(this.minor));  return buffer.toString();}  }
class C{  protected void authenticatorConfig(){  LoginConfig loginConfig=context.getLoginConfig();  SecurityConstraint constraints[]=context.findConstraints();  if (context.getIgnoreAnnotations() && (constraints == null || constraints.length == 0) && !context.getPreemptiveAuthentication()) {    return;  } else {    if (loginConfig == null) {      loginConfig=DUMMY_LOGIN_CONFIG;      context.setLoginConfig(loginConfig);    }  }  if (context.getAuthenticator() != null) {    return;  }  if (context.getRealm() == null) {    log.error(sm.getString("contextConfig.missingRealm"));    ok=false;    return;  }  Valve authenticator=null;  if (customAuthenticators != null) {    authenticator=(Valve)customAuthenticators.get(loginConfig.getAuthMethod());  }  if (authenticator == null) {    if (authenticators == null) {      log.error(sm.getString("contextConfig.authenticatorResources"));      ok=false;      return;    }    String authenticatorName=authenticators.getProperty(loginConfig.getAuthMethod());    if (authenticatorName == null) {      log.error(sm.getString("contextConfig.authenticatorMissing",loginConfig.getAuthMethod()));      ok=false;      return;    }    try {      Class<?> authenticatorClass=Class.forName(authenticatorName);      authenticator=(Valve)authenticatorClass.newInstance();    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      log.error(sm.getString("contextConfig.authenticatorInstantiate",authenticatorName),t);      ok=false;    }  }  if (authenticator != null) {    Pipeline pipeline=context.getPipeline();    if (pipeline != null) {      pipeline.addValve(authenticator);      if (log.isDebugEnabled()) {        log.debug(sm.getString("contextConfig.authenticatorConfigured",loginConfig.getAuthMethod()));      }    }  }}  }
class C{  public Enumeration postorderEnumeration(){  return new PostorderEnumeration(this);}  }
class C{  public String toString(){  return attrType;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509SubjectName createX509DataTypeX509SubjectName() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509SubjectNameImpl();}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_ByteBuffer$ByteBuffer_02(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbR=ByteBuffer.allocate(100).asReadOnlyBuffer();  ByteBuffer[] bbA={bbR,ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bbs,bbA);    fail("ReadOnlyBufferException wasn't thrown");  } catch (  ReadOnlyBufferException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of ReadOnlyBufferException");  }}  }
class C{  void processMonitorRequestMsg(MonitorRequestMsg msg,ServerHandler sender){  enqueueMonitorMsg(msg,sender);}  }
class C{  public String versionPrintable(){  return versionPrintable;}  }
class C{  public Set searchUsers(String wildcard,int level,String userSearchTemplate,Map avPairs) throws AMException, SSOException {  if (AMCompliance.isComplianceUserDeletionEnabled() && AMCompliance.isAncestorOrgDeleted(super.token,super.entryDN,AMObject.ORGANIZATION)) {    if (debug.warningEnabled()) {      debug.warning("AMOrganization.searchAssDynGroup: " + "ancestor org is deleted for: " + super.entryDN + " :returning empty set");    }    return Collections.EMPTY_SET;  }  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER,userSearchTemplate),wildcard,avPairs,level);}  }
class C{  public IssuingDistributionPointExtension(Object value) throws IOException {  this.extensionId=PKIXExtensions.IssuingDistributionPoint_Id;  this.critical=true;  if (!(value instanceof byte[])) {    throw new IOException("Illegal argument type");  }  extensionValue=(byte[])value;  DerValue val=new DerValue(extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + "IssuingDistributionPointExtension.");  }  if (val.data == null || val.data.available() == 0) {    return;  }  DerValue opt=val.data.getDerValue();  if (opt.isContextSpecific(TAG_DIST_PT) && opt.isConstructed()) {    DerValue distPnt=opt.data.getDerValue();    if (distPnt.isContextSpecific(TAG_FULL_NAME) && distPnt.isConstructed()) {      distPnt.resetTag(DerValue.tag_Sequence);      fullName=new GeneralNames(distPnt);    } else     if (distPnt.isContextSpecific(TAG_REL_NAME) && distPnt.isConstructed()) {      distPnt.resetTag(DerValue.tag_Set);      relativeName=new RDN(derValueToAVAs(distPnt));    } else {      throw new IOException("Invalid encoding for " + "IssuingDistributionPointExtension.");    }    if (val.data.available() == 0) {      return;    }    opt=val.data.getDerValue();  }  if (opt.isContextSpecific(TAG_ONLY_USER_CERTS)) {    opt.resetTag(DerValue.tag_Boolean);    onlyContainsUserCerts=opt.getBoolean();    if (val.data.available() == 0) {      return;    }    opt=val.data.getDerValue();  }  if (opt.isContextSpecific(TAG_ONLY_CA_CERTS)) {    opt.resetTag(DerValue.tag_Boolean);    onlyContainsCACerts=opt.getBoolean();    if (onlyContainsUserCerts && onlyContainsCACerts) {      throw new IOException("onlyContainsUserCerts and " + "onlyContainsCACerts can't both be true");    }    if (val.data.available() == 0) {      return;    }    opt=val.data.getDerValue();  }  if (opt.isContextSpecific(TAG_REASONS) && !opt.isConstructed()) {    opt.resetTag(DerValue.tag_BitString);    reasonFlags=(opt.getUnalignedBitString()).toBooleanArray();    if (val.data.available() == 0) {      return;    }    opt=val.data.getDerValue();  }  if (opt.isContextSpecific(TAG_INDIRECT_CRL)) {    opt.resetTag(DerValue.tag_Boolean);    indirectCRL=opt.getBoolean();    if (val.data.available() == 0) {      return;    }  }  throw new IOException("Invalid encoding for " + "IssuingDistributionPointExtension.");}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  boolean continueFlag=isOptionSet(IArgument.CONTINUE);  IOutput outputWriter=getOutputWriter();  List serviceNames=(List)rc.getOption(IArgument.SERVICE_NAME);  ServiceManager ssm=null;  boolean bError=false;  try {    ssm=new ServiceManager(adminSSOToken);  } catch (  SMSException e) {    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  for (Iterator i=serviceNames.iterator(); i.hasNext(); ) {    String name=(String)i.next();    String[] param={name};    try {      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_SERVICE",param);      deleteService(rc,ssm,name,adminSSOToken);      outputWriter.printlnMessage(getResourceString("service-deleted"));      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCESS_DELETE_SERVICE",param);    } catch (    CLIException e) {      bError=true;      if (continueFlag) {        outputWriter.printlnError(getResourceString("service-deletion-failed") + e.getMessage());        if (isVerbose()) {          outputWriter.printlnError(Debugger.getStackTrace(e));        }      } else {        throw e;      }    }  }  if (bError) {    throw new CLIException(getResourceString("one-or-more-services-not-deleted"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  protected void startTag(Element elem) throws IOException, BadLocationException {  if (synthesizedElement(elem)) {    return;  }  AttributeSet attr=elem.getAttributes();  Object nameAttribute=attr.getAttribute(StyleConstants.NameAttribute);  HTML.Tag name;  if (nameAttribute instanceof HTML.Tag) {    name=(HTML.Tag)nameAttribute;  } else {    name=null;  }  if (name == HTML.Tag.PRE) {    inPre=true;    preEndOffset=elem.getEndOffset();  }  closeOutUnwantedEmbeddedTags(attr);  if (inContent) {    writeLineSeparator();    inContent=false;    newlineOutputed=false;  }  if (completeDoc && name == HTML.Tag.BODY && !wroteHead) {    wroteHead=true;    indentSmart();    write("<head>");    writeLineSeparator();    incrIndent();    writeStyles(((HTMLDocument)getDocument()).getStyleSheet());    decrIndent();    writeLineSeparator();    indentSmart();    write("</head>");    writeLineSeparator();  }  indentSmart();  write('<');  write(elem.getName());  writeAttributes(attr);  write('>');  if (name != HTML.Tag.PRE) {    writeLineSeparator();  }  if (name == HTML.Tag.TEXTAREA) {    textAreaContent(elem.getAttributes());  } else   if (name == HTML.Tag.SELECT) {    selectContent(elem.getAttributes());  } else   if (completeDoc && name == HTML.Tag.BODY) {    writeMaps(((HTMLDocument)getDocument()).getMaps());  } else   if (name == HTML.Tag.HEAD) {    HTMLDocument document=(HTMLDocument)getDocument();    wroteHead=true;    incrIndent();    writeStyles(document.getStyleSheet());    if (document.hasBaseTag()) {      indentSmart();      write("<base href=\"" + document.getBase() + "\">");      writeLineSeparator();    }    decrIndent();  }}  }
class C{  @Override public int read() throws IOException {  while (in != null) {    int result=in.read();    if (result >= 0) {      return result;    }    nextStream();  }  return -1;}  }
class C{  public WaitingThread(Condition cond,RouteSpecificPool pool){  if (cond == null) {    throw new IllegalArgumentException("Condition must not be null.");  }  this.cond=cond;  this.pool=pool;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  PolicyModel model=(PolicyModel)getModel();  String providerType=(String)propertySheetModel.getValue(ATTR_RESPONSEPROVIDER_TYPE);  setPageSessionAttribute(ResponseProviderOpViewBeanBase.CALLING_VIEW_BEAN,(String)getPageSessionAttribute(CALLING_VIEW_BEAN));  String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  String viewBeanURL=model.getResponseProviderViewBeanURL(realmName,providerType);  unlockPageTrailForSwapping();  if ((viewBeanURL != null) && (viewBeanURL.trim().length() > 0)) {    forwardToURL(viewBeanURL,providerType,realmName);  } else {    forwardToViewBean(model,providerType,realmName);  }}  }
class C{  private void sendBadRequestResponse(SIPRequest sipRequest,SIPServerTransaction transaction,String reasonPhrase){  if (transaction.getState() != TransactionState.TERMINATED) {    SIPResponse sipResponse=sipRequest.createResponse(Response.BAD_REQUEST);    if (reasonPhrase != null)     sipResponse.setReasonPhrase(reasonPhrase);    ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();    if (serverHeader != null) {      sipResponse.setHeader(serverHeader);    }    try {      if (sipRequest.getMethod().equals(Request.INVITE)) {        sipStack.addTransactionPendingAck(transaction);      }      transaction.sendResponse(sipResponse);      transaction.releaseSem();    } catch (    Exception ex) {      logger.logError("Problem sending error response",ex);      transaction.releaseSem();      sipStack.removeTransaction(transaction);    }  }}  }
class C{  public Test(){  if (!resource.read_if_possible()) {    System.out.println("Immediate read request didn't work");  }  if (!resource.write_if_possible()) {    System.out.println("Immediate write request didn't work");  }  new Writer("w/0").start();  new Reader("r/1").start();  new Writer("w/1").start();  new Writer("w/2").start();  new Reader("r/2").start();  new Reader("r/3").start();}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  getCurrentProcessor().ignorableWhitespace(this,ch,start,length);}  }
class C{  public static boolean isVoid(String desc){  return desc.endsWith("V");}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  setDisplayFieldValue(FORM_ACTION,urlViewBean);}  }
class C{  protected void engineReset(){  messageLength=0;  buffer[BYTES_OFFSET]=0;  buffer[HASH_OFFSET]=H0;  buffer[HASH_OFFSET + 1]=H1;  buffer[HASH_OFFSET + 2]=H2;  buffer[HASH_OFFSET + 3]=H3;  buffer[HASH_OFFSET + 4]=H4;}  }
class C{  @Override public void write(int b) throws IOException {  throw exception;}  }
class C{  public void testGetName() throws Exception {  CertificateFactory certFactBC=CertificateFactory.getInstance("X.509","BC");  CertificateFactory certFactDRL=CertificateFactory.getInstance("X.509","DRLCertFactory");  X509Certificate certBC=(X509Certificate)certFactBC.generateCertificate(new ByteArrayInputStream(T61STRING_CERT));  X509Certificate certDRL=(X509Certificate)certFactDRL.generateCertificate(new ByteArrayInputStream(T61STRING_CERT));  assertEquals(certBC,certDRL);  assertEquals(certBC.getSubjectX500Principal(),certBC.getSubjectX500Principal());  assertEquals(certDRL.getIssuerX500Principal(),certDRL.getIssuerX500Principal());  assertEquals(certBC.getSubjectX500Principal(),certDRL.getSubjectX500Principal());  assertEquals(certBC.getIssuerX500Principal(),certDRL.getIssuerX500Principal());  String[] formats={X500Principal.CANONICAL,X500Principal.RFC1779,X500Principal.RFC2253};  for (  String format : formats) {    assertEquals(certBC.getSubjectX500Principal().getName(format),certDRL.getSubjectX500Principal().getName(format));    assertEquals(certBC.getIssuerX500Principal().getName(format),certDRL.getIssuerX500Principal().getName(format));  }  String expected="" + "cn=entrust.net certification authority (2048)," + "ou=(c) 1999 entrust.net limited,"+ "ou=www.entrust.net/cps_2048 incorp. by ref. (limits liab.),"+ "o=entrust.net";  assertEquals(expected,certBC.getSubjectX500Principal().getName(X500Principal.CANONICAL));}  }
class C{  public InReplyToParser(String inReplyTo){  super(inReplyTo);}  }
class C{  static BufferedImage gaussianBlur(BufferedImage src,BufferedImage dst,int radius){  int width=src.getWidth();  int height=src.getHeight();  if (dst == null || dst.getWidth() != width || dst.getHeight() != height || src.getType() != dst.getType()) {    dst=createColorModelCompatibleImage(src);  }  float[] kernel=createGaussianKernel(radius);  if (src.getType() == BufferedImage.TYPE_INT_ARGB) {    int[] srcPixels=new int[width * height];    int[] dstPixels=new int[width * height];    getPixels(src,0,0,width,height,srcPixels);    blur(srcPixels,dstPixels,width,height,kernel,radius);    blur(dstPixels,srcPixels,height,width,kernel,radius);    setPixels(dst,0,0,width,height,srcPixels);  } else   if (src.getType() == BufferedImage.TYPE_BYTE_GRAY) {    byte[] srcPixels=new byte[width * height];    byte[] dstPixels=new byte[width * height];    getPixels(src,0,0,width,height,srcPixels);    blur(srcPixels,dstPixels,width,height,kernel,radius);    blur(dstPixels,srcPixels,height,width,kernel,radius);    setPixels(dst,0,0,width,height,srcPixels);  } else {    throw new IllegalArgumentException("EffectUtils.gaussianBlur() src image is not a supported type, type=[" + src.getType() + "]");  }  return dst;}  }
class C{  public void paintTabbedPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.NameIDFormatElement createNameIDFormatElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.NameIDFormatElementImpl(value);}  }
class C{  public void test_PBKDF2_rfc3211_192() throws Exception {  char[] password=("All n-entities must communicate with other " + "n-entities via n-1 entiteeheehees").toCharArray();  byte[] salt=new byte[]{(byte)0x12,(byte)0x34,(byte)0x56,(byte)0x78,(byte)0x78,(byte)0x56,(byte)0x34,(byte)0x12};  int iterations=500;  int keyLength=192;  byte[] expected=new byte[]{(byte)0x6a,(byte)0x89,(byte)0x70,(byte)0xbf,(byte)0x68,(byte)0xc9,(byte)0x2c,(byte)0xae,(byte)0xa8,(byte)0x4a,(byte)0x8d,(byte)0xf2,(byte)0x85,(byte)0x10,(byte)0x85,(byte)0x86,(byte)0x07,(byte)0x12,(byte)0x63,(byte)0x80,(byte)0xcc,(byte)0x47,(byte)0xab,(byte)0x2d};  test_PBKDF2_UTF8(password,salt,iterations,keyLength,expected);  test_PBKDF2_8BIT(password,salt,iterations,keyLength,expected);}  }
class C{  public SelectResponseProviderTypeViewBean(){  super("SelectResponseProviderType",DEFAULT_DISPLAY_URL);}  }
class C{  @Override public void unbind(String name) throws NamingException {  unbind(new CompositeName(name));}  }
class C{  public int read() throws IOException {synchronized (lock) {    ensureOpen();    for (; ; ) {      if (nextChar >= nChars) {        fill();        if (nextChar >= nChars)         return -1;      }      if (skipLF) {        skipLF=false;        if (cb[nextChar] == '\n') {          nextChar++;          continue;        }      }      return cb[nextChar++];    }  }}  }
class C{  protected String paramString(){  String paintBorderString=(paintBorder ? "true" : "false");  String marginString=(margin != null ? margin.toString() : "");  String floatableString=(floatable ? "true" : "false");  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  return super.paramString() + ",floatable=" + floatableString+ ",margin="+ marginString+ ",orientation="+ orientationString+ ",paintBorder="+ paintBorderString;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode06.class,args);}  }
class C{  public Future<Long> cardByType(String type,JobState state){  Future<Long> future=Future.future();  jobService.cardByType(type,state,future.completer());  return future;}  }
class C{  private static boolean isAlpha(char p_char){  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));}  }
class C{  public static HostPort allAddresses(int port){  return new HostPort(WILDCARD_ADDRESS,port);}  }
class C{  void updateFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("RefreshFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.updateFinish();}  }
class C{  public void testPlusNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String c="-92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.plus());}  }
class C{  public void clear(){  m.clear();}  }
class C{  public JKTagMapping(final String sourceQName,final String targetQName,final JKNamespace namespace){  logger.info(String.format("creating TagMapping with sourceTag(%s) and (%s)",sourceQName,targetQName));  this.sourceQName=sourceQName;  this.targetQName=targetQName;  this.namespace=namespace;  this.auto=true;}  }
class C{  private void printArgumentUsage(Argument a,StringBuilder buffer){  String value;  if (a.needsValue()) {    LocalizableMessage pHolder=a.getValuePlaceholder();    if (pHolder != null) {      value=" " + pHolder;    } else {      value=" {value}";    }  } else {    value="";  }  final Argument usageArgument=getUsageArgument();  Character shortIDChar=a.getShortIdentifier();  if (shortIDChar != null) {    if (a.equals(usageArgument)) {      buffer.append("-?, ");    }    buffer.append("-");    buffer.append(shortIDChar);    String longIDString=a.getLongIdentifier();    if (longIDString != null) {      buffer.append(", --");      buffer.append(longIDString);    }    buffer.append(value);  } else {    String longIDString=a.getLongIdentifier();    if (longIDString != null) {      if (a.equals(usageArgument)) {        buffer.append("-?, ");      }      buffer.append("--");      buffer.append(longIDString);      buffer.append(value);    }  }  buffer.append(EOL);  indentAndWrap(buffer,INDENT,a.getDescription());  if (a.needsValue() && a.getDefaultValue() != null && a.getDefaultValue().length() > 0) {    indentAndWrap(buffer,INDENT,INFO_ARGPARSER_USAGE_DEFAULT_VALUE.get(a.getDefaultValue()));  }}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  append(m_doc.createProcessingInstruction(target,data));}  }
class C{  public boolean continueOnError(){  return continueOnError;}  }
class C{  public long insert(String attributeName,Long eventID,Long dataTypeID){  if (attributeName == null || eventID == null || dataTypeID == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_EVENTATTRIBUTENAME,attributeName);  initialValues.put(KEY_EVENTID,eventID);  initialValues.put(KEY_DATATYPEID,dataTypeID);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  protected HashAttributeSet(Class<?> interfaceName){  if (interfaceName == null) {    throw new NullPointerException("null interface");  }  myInterface=interfaceName;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public REBIND(String detailMessage,int minorCode,CompletionStatus completionStatus){  super(detailMessage,minorCode,completionStatus);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue08.class,args);}  }
class C{  public static void parallelSort(int[] a){  int n=a.length, p, g;  if (n <= MIN_ARRAY_SORT_GRAN || (p=ForkJoinPool.getCommonPoolParallelism()) == 1)   DualPivotQuicksort.sort(a,0,n - 1,null,0,0); else   new ArraysParallelSortHelpers.FJInt.Sorter(null,a,new int[n],0,n,0,((g=n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ? MIN_ARRAY_SORT_GRAN : g).invoke();}  }
class C{  public void commit() throws CannotWriteException {  AudioFileIO.write(this);}  }
class C{  MBeanAttributeInfo createAttributeInfo(){  if (info == null) {    info=new MBeanAttributeInfo(getName(),getType(),getDescription(),isReadable(),isWriteable(),false);  }  return (MBeanAttributeInfo)info;}  }
class C{  public String toPercentHexString(){  if (isEmpty()) {    return "";  }  StringBuilder builder=new StringBuilder(length * 3);  for (int i=0; i < length; i++) {    builder.append('%');    builder.append(StaticUtils.byteToHex(buffer[offset + i]));  }  return builder.toString();}  }
class C{  private void parse() throws PAOSException {  if (paosHeaderStr.length() == 0) {    PAOSUtils.debug.error("PAOSHeader:PAOSHeader: Null POAS header.");    throw new PAOSException("PAOS header value is empty");  }  StringTokenizer st1=new StringTokenizer(paosHeaderStr,";");  int n=st1.countTokens();  String versExts=st1.nextToken().trim();  int indexOfExt=versExts.indexOf("ext=");  String vers=null;  if (indexOfExt < 0) {    vers=versExts;  } else {    vers=versExts.substring(0,indexOfExt).trim();  }  String versions=null;  if (vers.startsWith("ver=")) {    versions=vers.substring(4).trim();  } else {    versions=vers;  }  StringTokenizer st3=new StringTokenizer(versions,",");  while (st3.hasMoreTokens()) {    versionList.add(trimQuotes(st3.nextToken().trim()));  }  if (indexOfExt >= 0) {    String extensions=versExts.substring(indexOfExt + 4).trim();    StringTokenizer st4=new StringTokenizer(extensions,",");    while (st4.hasMoreTokens()) {      extensionList.add(trimQuotes(st4.nextToken().trim()));    }  }  String servAndOpt=null;  StringTokenizer st5=null;  String serv=null;  HashSet optSet=null;  while (st1.hasMoreTokens()) {    servAndOpt=st1.nextToken();    st5=new StringTokenizer(servAndOpt,",");    if (st5.hasMoreTokens()) {      serv=trimQuotes(st5.nextToken().trim());    }    if (st5.hasMoreTokens()) {      optSet=new HashSet();      while (st5.hasMoreTokens()) {        optSet.add(trimQuotes(st5.nextToken().trim()));      }    }    servicesAndOptions.put(serv,optSet);    optSet=null;  }}  }
class C{  public ThreadPoolConfig(int core,int max,int queueSize,int keepAliveSeconds){  if (core < 1) {    this.coreThreads=DEFAULT_CORE_THREADS;    logger.warning("System configured to used invalid Radius Thread Pool Core size of " + core + ". Using the value of "+ DEFAULT_CORE_THREADS+ " instead.");  } else {    this.coreThreads=core;  }  if (max < this.coreThreads) {    this.maxThreads=coreThreads;    logger.warning("System configured to use Radius Server 'Thread Pool Max Size' that is less than 'Thread " + "Pool Core Size. Using size equal to Core Size - i.e. a static pool of size " + coreThreads);  } else {    this.maxThreads=max;  }  if (queueSize < 1 || queueSize > 1000) {    this.queueSize=DEFAULT_QUEUE_SIZE;    logger.warning("System configured to use an invalid Radius Server 'Thread Pool Queue Size' value of '" + queueSize + "'. Using the default value of '"+ DEFAULT_QUEUE_SIZE+ "' instead.");  } else {    this.queueSize=queueSize;  }  if (keepAliveSeconds < 1 || keepAliveSeconds > 3600) {    this.keepAliveSeconds=DEFAULT_KEEP_ALIVE_SECONDS;    logger.warning("System configured to use an invalid Radius Server 'Thread Pool Keep-Alive Seconds' value of" + " '" + keepAliveSeconds + "'. Using the default value of '"+ DEFAULT_KEEP_ALIVE_SECONDS+ "' instead.");  } else {    this.keepAliveSeconds=keepAliveSeconds;  }}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(data,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public static String readFromPasswordFile(String passwordfile){  String line=null;  BufferedReader in=null;  try {    in=new BufferedReader(new FileReader(passwordfile));    if (in.ready()) {      line=in.readLine();    }    return line;  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (in != null) {      try {        in.close();      } catch (      Exception e) {        e.printStackTrace();      }    }  }  return null;}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public void removeCOSTemplates() throws UMSException {  ArrayList aList=(ArrayList)getCOSTemplates();  for (int i=0; i < aList.size(); i++) {    COSTemplate cosTemplate=(COSTemplate)aList.get(i);    cosTemplate.remove();  }}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("quad iterator iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=quad.getX1();    coords[1]=quad.getY1();    type=SEG_MOVETO;  } else {    coords[0]=quad.getCtrlX();    coords[1]=quad.getCtrlY();    coords[2]=quad.getX2();    coords[3]=quad.getY2();    type=SEG_QUADTO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,index == 0 ? 1 : 2);  }  return type;}  }
class C{  public void addTreeWillExpandListener(TreeWillExpandListener tel){  listenerList.add(TreeWillExpandListener.class,tel);}  }
class C{  public Sapling(TreeSpecies species,boolean isInstantGrowable){  this(Material.SAPLING,species,isInstantGrowable);}  }
class C{  public void removeNotify(){synchronized (getTreeLock()) {    ListPeer peer=(ListPeer)this.peer;    if (peer != null) {      selected=peer.getSelectedIndexes();    }    super.removeNotify();  }}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  private static ResultCode registerSuccessResultCode(final int intValue,final LocalizableMessage name,final Enum resultCodeEnum){  final ResultCode t=new ResultCode(intValue,name,false,resultCodeEnum);  ELEMENTS.put(intValue,t);  return t;}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> patchInstance(Context context,String resourceId,PatchRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public TextOutputCallback(int messageType,String message){  if ((messageType != INFORMATION && messageType != WARNING && messageType != ERROR) || message == null || message.length() == 0)   throw new IllegalArgumentException();  this.messageType=messageType;  this.message=message;}  }
class C{  public static boolean hasDescriptor(LocalizableMessage msg,LocalizableMessageDescriptor.Arg3<?,?,?> desc){  return msg.ordinal() == desc.ordinal() && msg.resourceName().equals(desc.resourceName());}  }
class C{  public void write_scope(IndentFileWriter p_file,DsnIdentifier p_identifier) throws java.io.IOException {  p_file.new_line();  p_file.write("(rect ");  p_identifier.write(this.layer.name,p_file);  for (int i=0; i < coor.length; ++i) {    p_file.write(" ");    p_file.write(new Double(coor[i]).toString());  }  p_file.write(")");}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public InvalidPreferencesFormatException(Throwable cause){  super(cause);}  }
class C{  public synchronized boolean contains(Object value){  if (value == null) {    throw new NullPointerException();  }  Entry tab[]=table;  for (int i=tab.length; i-- > 0; ) {    for (Entry e=tab[i]; e != null; e=e.next) {      if (e.value.equals(value)) {        return true;      }    }  }  return false;}  }
class C{  public void test_getName(){  try {    MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute("test1");    assertEquals("Incorrect attribute name","test1",mac1.getName());  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public static void bindClassLoader(Object obj,Object token,ClassLoader classLoader) throws NamingException {  if (ContextAccessController.checkSecurityToken(obj,token)) {    Context context=objectBindings.get(obj);    if (context == null) {      throw new NamingException(sm.getString("contextBindings.unknownContext",obj));    }    clBindings.put(classLoader,context);    clObjectBindings.put(classLoader,obj);  }}  }
class C{  public ArrayIndexOutOfBoundsException(){  super();}  }
class C{  public void precheck(File file) throws IOException {  if (!file.exists()) {    logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_BECAUSE_FILE_NOT_FOUND.getMsg(file.getName()));    throw new IOException(ErrorMessage.GENERAL_WRITE_FAILED_BECAUSE_FILE_NOT_FOUND.getMsg(file.getName()));  }  if (!file.canWrite()) {    logger.severe(ErrorMessage.GENERAL_WRITE_FAILED.getMsg(file.getName()));    throw new IOException(ErrorMessage.GENERAL_WRITE_FAILED.getMsg(file.getName()));  }  if (file.length() <= MINIMUM_FILESIZE) {    logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_BECAUSE_FILE_IS_TOO_SMALL.getMsg(file.getName()));    throw new IOException(ErrorMessage.GENERAL_WRITE_FAILED_BECAUSE_FILE_IS_TOO_SMALL.getMsg(file.getName()));  }}  }
class C{  private String createBackendID(DN... baseDNs){  StringBuilder buffer=new StringBuilder();  for (  DN dn : baseDNs) {    if (buffer.length() > 0) {      buffer.append("___");    }    String ndn=dn.toNormalizedUrlSafeString();    for (int i=0; i < ndn.length(); i++) {      char c=ndn.charAt(i);      if (Character.isLetterOrDigit(c)) {        buffer.append(c);      } else {        buffer.append('_');      }    }  }  return buffer.toString();}  }
class C{  public ResourceOwnerConsentRequired(String clientName,String clientDescription,Map<String,String> scopeDescriptions,Map<String,String> claimDescriptions,UserInfoClaims claims,String userDisplayName,boolean saveConsentEnabled){  this.clientName=clientName;  this.clientDescription=clientDescription;  this.scopeDesciptions=scopeDescriptions;  this.claimDesciptions=claimDescriptions;  this.claims=claims;  this.userDisplayName=userDisplayName;  this.saveConsentEnabled=saveConsentEnabled;}  }
class C{  public static boolean delete(@NonNull String key){  failIfNotInitialized();  try {    mCache.delete(key);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void put(String name,String supported,String level){  IDFFAuthContext c=new IDFFAuthContext();  c.name=name;  c.supported=supported;  c.key=null;  c.value=null;  c.level=level;  collections.put(name,c);}  }
class C{  public void resolveConnection(Activity activity,ConnectionResult result){  if (result.hasResolution()) {    try {      result.startResolutionForResult(activity,RESOLVE_CONNECTION_REQUEST_CODE);    } catch (    IntentSender.SendIntentException e) {      mConnectionStatePublishSubject.onNext(ConnectionState.unableToResolve(result));    }  } else {    GoogleApiAvailability.getInstance().getErrorDialog(activity,result.getErrorCode(),NO_RESOLUTION_REQUEST_CODE).show();  }}  }
class C{  @Deprecated public static void restartServer(String className,LocalizableMessage reason,DirectoryEnvironmentConfig config){  DirectoryServer.restart(className,reason,config);}  }
class C{  private byte[] magSerializedForm(){  int len=mag.length;  int bitLen=(len == 0 ? 0 : ((len - 1) << 5) + bitLengthForInt(mag[0]));  int byteLen=(bitLen + 7) >>> 3;  byte[] result=new byte[byteLen];  for (int i=byteLen - 1, bytesCopied=4, intIndex=len - 1, nextInt=0; i >= 0; i--) {    if (bytesCopied == 4) {      nextInt=mag[intIndex--];      bytesCopied=1;    } else {      nextInt>>>=8;      bytesCopied++;    }    result[i]=(byte)nextInt;  }  return result;}  }
class C{  public static synchronized CoderResult malformedForLength(int length) throws IllegalArgumentException {  if (length > 0) {    Integer key=Integer.valueOf(length);synchronized (_malformedErrors) {      CoderResult r=_malformedErrors.get(key);      if (r == null) {        r=new CoderResult(TYPE_MALFORMED_INPUT,length);        _malformedErrors.put(key,r);      }      return r;    }  }  throw new IllegalArgumentException("length <= 0: " + length);}  }
class C{  public static boolean loadAttributes(final String filepath,Bundle out){  ExifInterface e;  try {    e=new ExifInterface(filepath);  } catch (  IOException e1) {    e1.printStackTrace();    return false;  }  for (  String tag : EXIF_TAGS) {    out.putString(tag,e.getAttribute(tag));  }  return true;}  }
class C{  boolean isSubPopupMenu(JPopupMenu popup){  int ncomponents=this.getComponentCount();  Component[] component=this.getComponents();  for (int i=0; i < ncomponents; i++) {    Component comp=component[i];    if (comp instanceof JMenu) {      JMenu menu=(JMenu)comp;      JPopupMenu subPopup=menu.getPopupMenu();      if (subPopup == popup)       return true;      if (subPopup.isSubPopupMenu(popup))       return true;    }  }  return false;}  }
class C{  public synchronized StringBuffer replace(int start,int end,String string){  replace0(start,end,string);  return this;}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public void processAuthnResponse(FSAuthnResponse authnResponse){  FSUtils.debug.message("FSAssertionArtifactHandler.ProcessAuthnResponse: Called");  this.authnResponse=authnResponse;  FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostEntityId,hostConfig);  if (spAdapter != null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionArtifactHandler, POST" + " Invokde spAdapter.preSSOFederationProcess");    }    try {      spAdapter.preSSOFederationProcess(hostEntityId,request,response,authnRequest,authnResponse,null);    } catch (    Exception e) {      FSUtils.debug.error("FSAssertionArtifactHandler" + " SPAdapter.preSSOFederationSuccess",e);    }  }  String baseURL=FSServiceUtils.getBaseURL(request);  String framedLoginPageURL=FSServiceUtils.getCommonLoginPageURL(hostMetaAlias,authnRequest.getRelayState(),null,request,baseURL);  this.relayState=authnRequest.getRelayState();  if ((this.relayState == null) || (this.relayState.trim().length() == 0)) {    this.relayState=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostConfig,IFSConstants.PROVIDER_HOME_PAGE_URL);    if ((this.relayState == null) || (this.relayState.trim().length() == 0)) {      this.relayState=baseURL + IFSConstants.SP_DEFAULT_RELAY_STATE;    }  }  try {    if (authnResponse == null) {      String[] data={FSUtils.bundle.getString("missingAuthnResponse")};      LogUtil.error(Level.INFO,LogUtil.MISSING_AUTHN_RESPONSE,data,ssoToken);      FSUtils.debug.error("FSAssertionArtifactHandler." + "processAuthnResponse: " + FSUtils.bundle.getString("missingAuthnResponse") + " AuthnRequest Processing Failed at the IDP "+ "Redirecting to the Framed Login Page");      response.sendRedirect(framedLoginPageURL);      return;    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionArtifactHandler.doPost:Received " + authnResponse.toXMLString());    }    boolean valid=verifyResponseStatus(authnResponse);    if (!valid) {      FSSessionManager sessionManager=FSSessionManager.getInstance(hostMetaAlias);      String inResponseTo=authnResponse.getInResponseTo();      sessionManager.removeAuthnRequest(inResponseTo);      String[] data={authnResponse.toXMLString()};      LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data,ssoToken);      FSUtils.debug.warning("FSAssertionArtifactHandler." + " processAuthnResponse: " + FSUtils.bundle.getString("invalidResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");      if ((spAdapter == null) || !(spAdapter.postSSOFederationFailure(hostEntityId,request,response,authnRequest,authnResponse,null,FederationSPAdapter.INVALID_AUTHN_RESPONSE))) {        response.sendRedirect(framedLoginPageURL);      }      return;    }    List assertions=authnResponse.getAssertion();    FSSubject validSubject=(FSSubject)validateAssertions(assertions);    if (validSubject == null) {      String[] data={FSUtils.bundle.getString("invalidAssertion")};      LogUtil.error(Level.INFO,LogUtil.INVALID_ASSERTION,data,ssoToken);      FSUtils.debug.error("FSAssertionArtifactHandler." + "processAuthnResponse: " + FSUtils.bundle.getString("InvalidResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");      response.sendRedirect(framedLoginPageURL);      return;    }    FSSessionManager sessionManager=FSSessionManager.getInstance(hostMetaAlias);    if (doFederate) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAssertionArtifactHandler." + "processAuthnResponse: Initiate Account Federation");      }      NameIdentifier ni=validSubject.getIDPProvidedNameIdentifier();      if (ni == null) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAssertionArtifactHandler.processAuthnResponse:" + " IDPProvided NameIdentifier is null");        }        ni=validSubject.getNameIdentifier();      }      if (ni != null) {        int returnCode=doAccountFederation(ni);        if (returnCode == FederationSPAdapter.SUCCESS) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAssertionArtifactHandler." + "processAuthnResponse: Account federation" + " successful");          }          String inResponseTo=authnResponse.getInResponseTo();          sessionManager.removeAuthnRequest(inResponseTo);          sessionManager.removeLocalSessionToken(inResponseTo);          return;        } else {          String[] data={FSUtils.bundle.getString("AccountFederationFailed")};          LogUtil.error(Level.INFO,LogUtil.ACCOUNT_FEDERATION_FAILED,data,ssoToken);          FSUtils.debug.error("FSAssertionArtifactHandler." + "processAuthnResponse: " + FSUtils.bundle.getString("AccountFederationFailed") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");          if (spAdapter == null || !spAdapter.postSSOFederationFailure(hostEntityId,request,response,authnRequest,authnResponse,(FSResponse)samlResponse,returnCode)) {            response.sendRedirect(framedLoginPageURL);          }        }      } else {        throw new FSException("missingNIofSubject",null);      }    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAssertionArtifactHandler." + "processAuthnResponse: Initiate SingleSign-On");      }      NameIdentifier niIdp=validSubject.getIDPProvidedNameIdentifier();      NameIdentifier ni=validSubject.getNameIdentifier();      if (niIdp == null) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAssertionArtifactHandler.processAuthnResponse:" + " IDPProvided NameIdentifier is null");        }        niIdp=ni;      }      if ((niIdp == null) || (ni == null)) {        String[] data={FSUtils.bundle.getString("invalidResponse")};        LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data,ssoToken);        FSUtils.debug.error("FSAssertionArtifactHandler." + " processAuthnResponse: " + FSUtils.bundle.getString("invalidResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");        response.sendRedirect(framedLoginPageURL);        return;      }      String idpHandle=niIdp.getName();      String spHandle=ni.getName();      int handleType;      if ((idpHandle == null) || (spHandle == null)) {        String[] data={FSUtils.bundle.getString("invalidResponse")};        LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data,ssoToken);        FSUtils.debug.error("FSAssertionArtifactHandler." + "processAuthnResponse: " + FSUtils.bundle.getString("invalidResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");        response.sendRedirect(framedLoginPageURL);        return;      }      if (idpHandle.equals(spHandle)) {        ni=niIdp;        handleType=IFSConstants.REMOTE_OPAQUE_HANDLE;      } else {        handleType=IFSConstants.LOCAL_OPAQUE_HANDLE;      }      Map env=new HashMap();      env.put(IFSConstants.FS_USER_PROVIDER_ENV_AUTHNRESPONSE_KEY,authnResponse);      int returnCode=doSingleSignOn(ni,handleType,niIdp,env);      if (returnCode == FederationSPAdapter.SUCCESS) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAssertionArtifactHandler." + "processAuthnResponse: Accountfederation successful");        }        String requestID=authnResponse.getInResponseTo();        sessionManager.removeAuthnRequest(requestID);        if (isIDPProxyEnabled(requestID)) {          sendProxyResponse(requestID);          return;        }        String[] data={this.relayState};        LogUtil.access(Level.INFO,LogUtil.ACCESS_GRANTED_REDIRECT_TO,data,ssoToken);        FSUtils.debug.message("ArtifactHandler.notfederated, postSSO");        if (spAdapter != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAssertionArtifactHandler," + " Invoke spAdapter.postSSOFederationSuccess");          }          try {            if (spAdapter.postSSOFederationSuccess(hostEntityId,request,response,ssoToken,authnRequest,authnResponse,null)) {              return;            }          } catch (          Exception e) {            FSUtils.debug.error("FSAssertionArtifadctHandler" + " SPAdapter.postSSOFederationSuccess:",e);          }        }        redirectToResource(this.relayState);        return;      } else {        String[] data={FSUtils.bundle.getString("SSOfailed")};        LogUtil.error(Level.INFO,LogUtil.SINGLE_SIGNON_FAILED,data,ssoToken);        FSUtils.debug.error("FSAssertionArtifactHandler." + "processAuthnResponse: " + FSUtils.bundle.getString("invalidResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");        if (spAdapter == null || !spAdapter.postSSOFederationFailure(hostEntityId,request,response,authnRequest,authnResponse,null,returnCode)) {          response.sendRedirect(framedLoginPageURL);        }        return;      }    }  } catch (  Exception e) {    FSUtils.debug.error("FSAssertionArtifactHandler." + "processAuthnResponse: Exception Occured: ",e);    try {      FSUtils.debug.error("FSAssertionArtifactHandler." + "processAuthnResponse: " + FSUtils.bundle.getString("invalidResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");      response.sendRedirect(framedLoginPageURL);    } catch (    IOException ioe) {      FSUtils.debug.error("FSAssertionArtifactHandler." + "processAuthnResponse: IOException Occured: ",ioe);      return;    }    return;  }}  }
class C{  public AgentAddViewBean(){  super("AgentAdd");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  private boolean shouldDrawItemSection(ViewHolder holder,int childIndex,List<AlphabeticalAppsList.AdapterItem> items){  int pos=holder.getPosition();  AlphabeticalAppsList.AdapterItem item=items.get(pos);  if (item.viewType != AllAppsGridAdapter.ICON_VIEW_TYPE) {    return false;  }  return (childIndex == 0) || (items.get(pos - 1).viewType == AllAppsGridAdapter.SECTION_BREAK_VIEW_TYPE);}  }
class C{  public PdfADocument(PdfReader reader,PdfWriter writer,StampingProperties properties){  super(reader,writer,properties);  byte[] existingXmpMetadata=getXmpMetadata();  if (existingXmpMetadata == null) {    throw new PdfAConformanceException(PdfAConformanceException.DocumentToReadFromShallBeAPdfAConformantFileWithValidXmpMetadata);  }  XMPMeta meta;  try {    meta=XMPMetaFactory.parseFromBuffer(existingXmpMetadata);  } catch (  XMPException exc) {    throw new PdfAConformanceException(PdfAConformanceException.DocumentToReadFromShallBeAPdfAConformantFileWithValidXmpMetadata);  }  PdfAConformanceLevel conformanceLevel=PdfAConformanceLevel.getConformanceLevel(meta);  if (conformanceLevel == null) {    throw new PdfAConformanceException(PdfAConformanceException.DocumentToReadFromShallBeAPdfAConformantFileWithValidXmpMetadata);  }  setChecker(conformanceLevel);}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public NotYetConnectedException(){}  }
class C{  public Node.Nodes parse(String inFileName) throws JasperException, IOException {  isTagFile=ctxt.isTagFile();  directiveOnly=false;  return doParse(inFileName,null,ctxt.getTagFileJar());}  }
class C{  Context2(Context2 parent){  if (parent == null) {    prefixTable=new Hashtable();    uriTable=new Hashtable();    elementNameTable=null;    attributeNameTable=null;  } else   setParent(parent);}  }
class C{  protected void fireActionPerformed(){  Object[] listeners=listenerList.getListenerList();  int modifiers=0;  AWTEvent currentEvent=EventQueue.getCurrentEvent();  if (currentEvent instanceof InputEvent) {    modifiers=((InputEvent)currentEvent).getModifiers();  } else   if (currentEvent instanceof ActionEvent) {    modifiers=((ActionEvent)currentEvent).getModifiers();  }  ActionEvent e=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,(command != null) ? command : getText(),EventQueue.getMostRecentEventTime(),modifiers);  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  public final Collection<? extends CRL> generateCRLs(InputStream inStream) throws CRLException {  return spiImpl.engineGenerateCRLs(inStream);}  }
class C{  public boolean equals(Object o){  if (o instanceof ISSecurityPermission) {    ISSecurityPermission p=(ISSecurityPermission)o;    if (p.hashCode() == hashCode) {      return true;    }  }  return false;}  }
class C{  public InputStream call(String message,String cookies) throws Exception {  if (debug.messageEnabled()) {    debug.message("SOAP Client: Message being sent:" + message);  }  InputStream in_buf=null;  boolean done=false;  int urlIndex=0;  while (!done) {    if (url == null) {      if (urls != null) {        if (urlIndex >= urls.length) {          if (debug.warningEnabled()) {            debug.warning("SOAPClient: No vaild server found");          }          throw (new RemoteException("no-server-found"));        }        url=urls[urlIndex++];      } else {        url=JAXRPCUtil.getValidURL(serviceName);      }    }    URL endpoint=new URL(url);    HttpURLConnection connection=HttpURLConnectionManager.getConnection(endpoint);    connection.setDoOutput(true);    connection.setUseCaches(useCache);    connection.setRequestMethod("POST");    connection.setRequestProperty("Content-Type","text/xml; charset=\"utf-8\"");    connection.setRequestProperty("SOAPAction","\"\"");    if (cookies != null) {      connection.setRequestProperty("Cookie",cookies);    }    String userInfo=endpoint.getUserInfo();    if (userInfo != null) {      connection.setRequestProperty("Authorization","Basic " + Base64.encode(userInfo.getBytes("UTF-8")));    }    byte[] data=message.getBytes("UTF-8");    int requestLength=data.length;    connection.setRequestProperty("Content-Length",Integer.toString(requestLength));    OutputStream out=null;    try {      out=connection.getOutputStream();    } catch (    ConnectException ce) {      if (debug.warningEnabled()) {        debug.warning("SOAP Client: Connection Exception: " + url,ce);      }      JAXRPCUtil.serverFailed(url);      url=null;      continue;    }    out.write(data);    out.flush();    try {      in_buf=connection.getInputStream();    } catch (    IOException ioe) {      if (debug.messageEnabled()) {        debug.message("SOAP Client: READ Exception",ioe);      }      in_buf=connection.getErrorStream();      isException=true;    } finally {      done=true;    }  }  if (debug.messageEnabled()) {    StringBuffer inbuf=new StringBuffer();    String line;    BufferedReader reader=new BufferedReader(new InputStreamReader(in_buf,"UTF-8"));    while ((line=reader.readLine()) != null) {      inbuf.append(line).append("\n");    }    String data=new String(inbuf);    debug.message("SOAP Client: Input: " + message + "\nOutput: "+ data);    in_buf=new ByteArrayInputStream(data.getBytes("UTF-8"));  }  return (in_buf);}  }
class C{  public void lock() throws InterruptedException {  lock.lockInterruptibly();}  }
class C{  public void reset(){  System.arraycopy(IV,0,cbcV,0,IV.length);  Arrays.fill(cbcNextV,(byte)0);  cipher.reset();}  }
class C{  public Constraints(){}  }
class C{  public void testGcdBothZeros(){  byte rBytes[]={0};  BigInteger aNumber=new BigInteger("0");  BigInteger bNumber=BigInteger.valueOf(0L);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public PdfPage copyTo(PdfDocument toDocument){  return copyTo(toDocument,null);}  }
class C{  public SchemaBuilder addToSchemaOverwrite(){  return getSchemaBuilder().addObjectClass(new ObjectClass(this),true);}  }
class C{  public DatabaseDownException(final Exception ex,final String dbName,final String host,final int port){  super(ex,host,port);  this.dbName=dbName;}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  throw new IOException(Localizer.getMessage("jsp.error.xml.operationNotSupported","mark()","UTF-8"));}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {  try {    if (null != getStylesheetRoot()) {      if (0 == m_stylesheetLevel)       getStylesheetRoot().recompose();    } else     throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_STYLESHEETROOT,null));    XSLTElementProcessor elemProcessor=getCurrentProcessor();    if (null != elemProcessor)     elemProcessor.startNonText(this);    m_stylesheetLevel--;    popSpaceHandling();    m_parsingComplete=(m_stylesheetLevel < 0);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public WildcardFileFilter(List<String> wildcards){  this(wildcards,null);}  }
class C{  private User onUserRequest(@Nullable User currentUser,@NotNull TLUser userRequest){  final User user;  if (currentUser == null) {    user=new User(userRequest.getId());  } else {    user=new User(currentUser);  }  user.setUserHash(userRequest.getAccessHash());  BotLogger.debug(LOGTAG,"userRequestId: " + user.getUserId());  return user;}  }
class C{  public Class resolve(String id,AttrSet set){  String[][] OC_JC_MAP=null;  try {    OC_JC_MAP=ConfigManagerUMS.getConfigManager().getClassResolver();  } catch (  ConfigManagerException e) {    debug.error("ConfigManager.getClassResolver(): " + e);  }  Class javaClass=com.iplanet.ums.PersistentObject.class;  if (OC_JC_MAP == null) {    debug.warning("DefaultClassResolver.resolve: OC_JC_MAP is null");    return javaClass;  }  Attr attr=set.getAttribute("objectclass");  String[] objectClasses=null;  if (attr != null) {    objectClasses=attr.getStringValues();  }  if (objectClasses != null) {    int ocLength=objectClasses.length;    int ocJcLength=OC_JC_MAP.length;    outerLoop:     for (int k=0; k < ocJcLength; k++) {      for (int i=0; i < ocLength; i++) {        if (objectClasses[i].equalsIgnoreCase(OC_JC_MAP[k][0])) {          try {            javaClass=Class.forName(OC_JC_MAP[k][1]);          } catch (          Exception e) {            debug.error("Exception while trying Class.forName for: " + OC_JC_MAP[k][1] + " : "+ e.getMessage()+ " - Defaulting to PersistentObject");          }          break outerLoop;        }      }    }  }  return javaClass;}  }
class C{  private static int lengthOfMimeNames(String val){  int len=val.indexOf(' ');  if (len < 0)   len=val.length();  return len;}  }
class C{  public void test_ConstructorIILjava_util_Random(){  BigInteger bi1=new BigInteger(10,5,rand);  BigInteger bi2=new BigInteger(10,5,rand);  assertTrue(bi1 + " is negative",bi1.compareTo(BigInteger.ZERO) >= 0);  assertTrue(bi1 + " is too big",bi1.compareTo(new BigInteger("1024",10)) < 0);  assertTrue(bi2 + " is negative",bi2.compareTo(BigInteger.ZERO) >= 0);  assertTrue(bi2 + " is too big",bi2.compareTo(new BigInteger("1024",10)) < 0);  Random rand=new Random();  BigInteger bi;  int certainty[]={0,1,2,3,4,5,6,7,8,9,10,Integer.MIN_VALUE,Integer.MIN_VALUE + 1,-2,-1};  for (int i=2; i <= 20; i++) {    for (int c=0; c < certainty.length; c++) {      bi=new BigInteger(i,c,rand);      assertEquals(i,bi.bitLength());    }  }  try {    new BigInteger(1,80,(Random)null);    fail("ArithmeticException expected");  } catch (  ArithmeticException expected) {  }  try {    new BigInteger(-1,(Random)null);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public static boolean isRunningAsWindowsService(){  return OperatingSystem.isWindows() && serviceState() == SERVICE_STATE_ENABLED;}  }
class C{  boolean isCreated(){  return isCreated;}  }
class C{  public Mp4AlacBox(Mp4BoxHeader header,ByteBuffer dataBuffer){  this.header=header;  this.dataBuffer=dataBuffer;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateentref1.class,args);}  }
class C{  public void initializeProperties(Properties properties){  Properties newProps=new Properties();  newProps.putAll(systemConfigProps);  newProps.putAll(properties);  systemConfigProps=newProps;}  }
class C{  public int compareTo(NameImpl obj){  if (this == obj) {    return 0;  }  int len1=size();  int len2=obj.size();  int n=Math.min(len1,len2);  int index1=0, index2=0;  while (n-- != 0) {    String comp1=get(index1++);    String comp2=obj.get(index2++);    if (syntaxTrimBlanks) {      comp1=comp1.trim();      comp2=comp2.trim();    }    int local;    if (syntaxCaseInsensitive) {      local=comp1.compareToIgnoreCase(comp2);    } else {      local=comp1.compareTo(comp2);    }    if (local != 0) {      return local;    }  }  return len1 - len2;}  }
class C{  public BrdArea(PlaArea p_area,int p_layer,PlaVectorInt p_translation,int p_rotation_in_degree,boolean p_side_changed,int p_clearance_type,int p_id_no,int p_group_no,String p_name,ItemFixState p_fixed_state,RoutingBoard p_board){  this(p_area,p_layer,p_translation,p_rotation_in_degree,p_side_changed,NetNosList.EMPTY,p_clearance_type,p_id_no,p_group_no,p_name,p_fixed_state,p_board);}  }
class C{  public void testConstrStringWithExponentWithPoint5(){  String a="238096483923847545735673567457356356789029.5784902768787678287E+21";  int aScale=-2;  BigInteger bA=new BigInteger("2380964839238475457356735674573563567890295784902768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  void writeHeaders(List<Header> headerBlock) throws IOException {  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name.toAsciiLowercase();    Integer staticIndex=NAME_TO_FIRST_INDEX.get(name);    if (staticIndex != null) {      writeInt(staticIndex + 1,PREFIX_4_BITS,0);      writeByteString(headerBlock.get(i).value);    } else {      out.writeByte(0x00);      writeByteString(name);      writeByteString(headerBlock.get(i).value);    }  }}  }
class C{  void addToParent(Element siuHeaderE){  Document doc=siuHeaderE.getOwnerDocument();  Element credentialE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING_11,SOAPBindingConstants.PTAG_CREDENTIAL);  siuHeaderE.appendChild(credentialE);  if (child != null) {    credentialE.appendChild(doc.importNode(child,true));  }  if (notOnOrAfter != null) {    credentialE.setAttributeNS(null,SOAPBindingConstants.ATTR_NOT_ON_OR_AFTER,DateUtils.toUTCDateFormat(notOnOrAfter));  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof MenuShortcut) {    return equals((MenuShortcut)obj);  }  return false;}  }
class C{  private void executeValidWorkflowAndExtractCheckValues(){  ConfigHandler configHandler=new ClientConfigHandler();  TransportHandler transportHandler=configHandler.initializeTransportHandler(config);  TlsContext tlsContext=configHandler.initializeTlsContext(config);  WorkflowExecutor workflowExecutor=configHandler.initializeWorkflowExecutor(transportHandler,tlsContext);  WorkflowTrace trace=tlsContext.getWorkflowTrace();  workflowExecutor.executeWorkflow();  transportHandler.closeConnection();  ECDHClientKeyExchangeMessage message=(ECDHClientKeyExchangeMessage)trace.getFirstHandshakeMessage(HandshakeMessageType.CLIENT_KEY_EXCHANGE);  BigInteger x=message.getPublicKeyBaseX().getValue();  BigInteger y=message.getPublicKeyBaseY().getValue();  checkPoint=new Point(x,y);  checkPMS=message.getPremasterSecret().getValue();}  }
class C{  public byte[] toBytes() throws UnsupportedEncodingException {  StringBuilder result=new StringBuilder(256);  result.append(requestLine).append("\r\n");  for (int i=0; i < namesAndValues.size(); i+=2) {    result.append(namesAndValues.get(i)).append(": ").append(namesAndValues.get(i + 1)).append("\r\n");  }  result.append("\r\n");  return result.toString().getBytes("ISO-8859-1");}  }
class C{  public AclEntryType type(){  return type;}  }
class C{  public boolean greaterThan(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThan(this);  return this.num() > obj2.num();}  }
class C{  public AMSearchResults searchUsers(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchUsers(wildcard,null,searchControl);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node oldChild;  NodeList elementList;  Node elementNode;  Node removedChild;  doc=(Document)load("hc_staff",true);  oldChild=doc.createElement("br");  elementList=doc.getElementsByTagName("p");  elementNode=elementList.item(1);{    boolean success=false;    try {      removedChild=elementNode.removeChild(oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  private void generatePreamble(Node.Nodes page) throws JasperException {  String servletPackageName=ctxt.getServletPackageName();  String servletClassName=ctxt.getServletClassName();  String serviceMethodName=Constants.SERVICE_METHOD_NAME;  genPreamblePackage(servletPackageName);  genPreambleImports();  out.printin("public final class ");  out.print(servletClassName);  out.print(" extends ");  out.println(pageInfo.getExtends());  out.printin("    implements org.apache.jasper.runtime.JspSourceDependent,");  out.println();  out.printin("                 org.apache.jasper.runtime.JspSourceImports");  if (!pageInfo.isThreadSafe()) {    out.println(",");    out.printin("                 javax.servlet.SingleThreadModel");  }  out.println(" {");  out.pushIndent();  generateDeclarations(page);  genPreambleStaticInitializers();  genPreambleClassVariableDeclarations();  genPreambleMethods();  out.printin("public void ");  out.print(serviceMethodName);  out.println("(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)");  out.pushIndent();  out.pushIndent();  out.printil("throws java.io.IOException, javax.servlet.ServletException {");  out.popIndent();  out.println();  if (!pageInfo.isErrorPage()) {    out.printil("final java.lang.String _jspx_method = request.getMethod();");    out.printin("if (!\"GET\".equals(_jspx_method) && !\"POST\".equals(_jspx_method) && !\"HEAD\".equals(_jspx_method) && ");    out.println("!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {");    out.pushIndent();    out.printin("response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ");    out.println("\"" + Localizer.getMessage("jsp.error.servlet.invalid.method") + "\");");    out.printil("return;");    out.popIndent();    out.printil("}");    out.println();  }  out.printil("final javax.servlet.jsp.PageContext pageContext;");  if (pageInfo.isSession())   out.printil("javax.servlet.http.HttpSession session = null;");  if (pageInfo.isErrorPage()) {    out.printil("java.lang.Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);");    out.printil("if (exception != null) {");    out.pushIndent();    out.printil("response.setStatus(javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR);");    out.popIndent();    out.printil("}");  }  out.printil("final javax.servlet.ServletContext application;");  out.printil("final javax.servlet.ServletConfig config;");  out.printil("javax.servlet.jsp.JspWriter out = null;");  out.printil("final java.lang.Object page = this;");  out.printil("javax.servlet.jsp.JspWriter _jspx_out = null;");  out.printil("javax.servlet.jsp.PageContext _jspx_page_context = null;");  out.println();  declareTemporaryScriptingVars(page);  out.println();  out.printil("try {");  out.pushIndent();  out.printin("response.setContentType(");  out.print(quote(pageInfo.getContentType()));  out.println(");");  if (ctxt.getOptions().isXpoweredBy()) {    out.printil("response.addHeader(\"X-Powered-By\", \"JSP/2.1\");");  }  out.printil("pageContext = _jspxFactory.getPageContext(this, request, response,");  out.printin("\t\t\t");  out.print(quote(pageInfo.getErrorPage()));  out.print(", " + pageInfo.isSession());  out.print(", " + pageInfo.getBuffer());  out.print(", " + pageInfo.isAutoFlush());  out.println(");");  out.printil("_jspx_page_context = pageContext;");  out.printil("application = pageContext.getServletContext();");  out.printil("config = pageContext.getServletConfig();");  if (pageInfo.isSession())   out.printil("session = pageContext.getSession();");  out.printil("out = pageContext.getOut();");  out.printil("_jspx_out = out;");  out.println();}  }
class C{  public static boolean serviceHasSubSchema(SSOToken token,String serviceName,SchemaType schemaType) throws SMSException, SSOException {  boolean schemaTypeFlg=false;  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);    Set types=ssm.getSchemaTypes();    if (debug.messageEnabled()) {      debug.message("AMServiceUtils.serviceHasSubSchema() " + "SchemaTypes types for " + serviceName + " are: "+ types);    }    schemaTypeFlg=types.contains(schemaType);  } catch (  ServiceNotFoundException ex) {    if (debug.warningEnabled()) {      debug.warning("AMServiceUtils.serviceHasSubSchema() " + "Service does not exist : " + serviceName);    }  }  return (schemaTypeFlg);}  }
class C{  @Override public void write(String s,int off,int len) throws IOException {  if (writer != null) {    writer.write(s,off,len);  } else {    ensureOpen();    if (len >= bufferSize - nextChar)     reAllocBuff(len);    s.getChars(off,off + len,cb,nextChar);    nextChar+=len;  }}  }
class C{  public void testConstructorStringRadix10Zero(){  String value="-00000000000000";  int radix=10;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  private PdfVersion(int major,int minor){  this.major=major;  this.minor=minor;}  }
class C{  public static void addAttributeToSubSchema(String serviceName,String subSchemaName,String schemaType,String attributeSchemaFile) throws UpgradeException {  String classMethod="UpgradeUtils:addAttributeToSubSchema : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Adding attribute schema : " + attributeSchemaFile);    debug.message(" to subSchema " + subSchemaName + " to service "+ serviceName);  }  FileInputStream fis=null;  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType);  try {    fis=new FileInputStream(attributeSchemaFile);    ss.addAttributeSchema(fis);  } catch (  IOException ioe) {    debug.error(classMethod + "File not found " + attributeSchemaFile);    throw new UpgradeException(ioe.getMessage());  }catch (  SMSException sme) {    debug.error(classMethod + "Cannot add attribute schema to : " + serviceName,sme);    throw new UpgradeException(sme.getMessage());  }catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSOToken : ",ssoe);    throw new UpgradeException(ssoe.getMessage());  }catch (  Exception e) {    debug.error(classMethod + "Error setting attribute schema : ",e);    throw new UpgradeException(e.getMessage());  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.BUSY_HERE,request);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),100);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public static void validatePluginMessage(Messenger messenger,Plugin source,String channel,byte[] message){  if (messenger == null) {    throw new IllegalArgumentException("Messenger cannot be null");  }  if (source == null) {    throw new IllegalArgumentException("Plugin source cannot be null");  }  if (!source.isEnabled()) {    throw new IllegalArgumentException("Plugin must be enabled to send messages");  }  if (message == null) {    throw new IllegalArgumentException("Message cannot be null");  }  if (!messenger.isOutgoingChannelRegistered(source,channel)) {    throw new ChannelNotRegisteredException(channel);  }  if (message.length > Messenger.MAX_MESSAGE_SIZE) {    throw new MessageTooLargeException(message);  }  validateChannel(channel);}  }
class C{  public ACTIVITY_REQUIRED(String detailMessage,int minorCode,CompletionStatus completionStatus){  super(detailMessage,minorCode,completionStatus);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  @Override public void addHeader(String name,String value){  addHeader(name,value,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS01.class,args);}  }
class C{  public Mp4DiscNoField(int discNo,int total){  super(Mp4FieldKey.DISCNUMBER.getFieldName(),String.valueOf(discNo));  numbers=new ArrayList<Short>();  numbers.add(new Short("0"));  numbers.add((short)discNo);  numbers.add((short)total);}  }
class C{  public boolean isOnPanel(){  return onPanel;}  }
class C{  @Override public void onFocusChange(View v,boolean hasFocus){  mRecyclerViewBridge.setFocusView(v,oldView,1.1f);  oldView=v;}  }
class C{  private void createMp4Field(Mp4Tag tag,Mp4BoxHeader header,ByteBuffer raw) throws UnsupportedEncodingException {  if (header.getDataLength() == 0) {  } else   if (header.getId().equals(Mp4TagReverseDnsField.IDENTIFIER)) {    try {      TagField field=new Mp4TagReverseDnsField(header,raw);      tag.addField(field);    } catch (    Exception e) {      logger.warning(ErrorMessage.MP4_UNABLE_READ_REVERSE_DNS_FIELD.getMsg(e.getMessage()));      TagField field=new Mp4TagRawBinaryField(header,raw);      tag.addField(field);    }  } else {    int currentPos=raw.position();    boolean isDataIdentifier=Utils.getString(raw,Mp4BoxHeader.IDENTIFIER_POS,Mp4BoxHeader.IDENTIFIER_LENGTH,"ISO-8859-1").equals(Mp4DataBox.IDENTIFIER);    raw.position(currentPos);    if (isDataIdentifier) {      int type=Utils.getIntBE(raw,Mp4DataBox.TYPE_POS_INCLUDING_HEADER,Mp4DataBox.TYPE_POS_INCLUDING_HEADER + Mp4DataBox.TYPE_LENGTH - 1);      Mp4FieldType fieldType=Mp4FieldType.getFieldType(type);      logger.config("Box Type id:" + header.getId() + ":type:"+ fieldType);      if (header.getId().equals(Mp4FieldKey.TRACK.getFieldName())) {        TagField field=new Mp4TrackField(header.getId(),raw);        tag.addField(field);      } else       if (header.getId().equals(Mp4FieldKey.DISCNUMBER.getFieldName())) {        TagField field=new Mp4DiscNoField(header.getId(),raw);        tag.addField(field);      } else       if (header.getId().equals(Mp4FieldKey.GENRE.getFieldName())) {        TagField field=new Mp4GenreField(header.getId(),raw);        tag.addField(field);      } else       if (header.getId().equals(Mp4FieldKey.ARTWORK.getFieldName()) || Mp4FieldType.isCoverArtType(fieldType)) {        int processedDataSize=0;        int imageCount=0;        while (processedDataSize < header.getDataLength()) {          if (imageCount > 0) {            type=Utils.getIntBE(raw,processedDataSize + Mp4DataBox.TYPE_POS_INCLUDING_HEADER,processedDataSize + Mp4DataBox.TYPE_POS_INCLUDING_HEADER + Mp4DataBox.TYPE_LENGTH - 1);            fieldType=Mp4FieldType.getFieldType(type);          }          Mp4TagCoverField field=new Mp4TagCoverField(raw,fieldType);          tag.addField(field);          processedDataSize+=field.getDataAndHeaderSize();          imageCount++;        }      } else       if (fieldType == Mp4FieldType.TEXT) {        TagField field=new Mp4TagTextField(header.getId(),raw);        tag.addField(field);      } else       if (fieldType == Mp4FieldType.IMPLICIT) {        TagField field=new Mp4TagTextNumberField(header.getId(),raw);        tag.addField(field);      } else       if (fieldType == Mp4FieldType.INTEGER) {        TagField field=new Mp4TagByteField(header.getId(),raw);        tag.addField(field);      } else {        boolean existingId=false;        for (        Mp4FieldKey key : Mp4FieldKey.values()) {          if (key.getFieldName().equals(header.getId())) {            existingId=true;            logger.warning("Known Field:" + header.getId() + " with invalid field type of:"+ type+ " is ignored");            break;          }        }        if (!existingId) {          logger.warning("UnKnown Field:" + header.getId() + " with invalid field type of:"+ type+ " created as binary");          TagField field=new Mp4TagBinaryField(header.getId(),raw);          tag.addField(field);        }      }    } else {      if (header.getId().equals(Mp4NonStandardFieldKey.AAPR.getFieldName())) {        TagField field=new Mp4TagRawBinaryField(header,raw);        tag.addField(field);      } else {        TagField field=new Mp4TagRawBinaryField(header,raw);        tag.addField(field);      }    }  }}  }
class C{  public final int _type2(int identity){  int eType;  if (identity < m_blocksize)   eType=m_exptype_map0[identity]; else   eType=m_exptype_map[identity >>> m_SHIFT][identity & m_MASK];  if (NULL != eType)   return m_extendedTypes[eType].getNodeType(); else   return NULL;}  }
class C{  public void requestPasswordChangedByRequiredTime(){  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_CHANGED_BY_REQUIRED_TIME);}  }
class C{  void createOpenDJBackup() throws ConfiguratorException {  createBackupDirectories();  File backupFile=getBackupFileLocation();  File opendjDirectory=new File(baseDirectory,OPENDJ_DIR);  try {    zipUtils.zipDirectory(opendjDirectory,backupFile);  } catch (  IOException e) {    throw new ConfiguratorException("Failed to create OpenDJ backup: " + e.getMessage());  }}  }
class C{  public boolean isReset(){  return isReset;}  }
class C{  @Inject public CloseableHttpClientProvider(ShutdownManager shutdownManager){  this.shutdownManager=shutdownManager;}  }
class C{  public TransportNotSupportedException(){  super();}  }
class C{  public JarEntry(JarEntry je){  this((ZipEntry)je);  this.attr=je.attr;  this.certs=je.certs;  this.signers=je.signers;}  }
class C{  @Override public EncryptedAssertion encrypt(Key recipientPublicKey,String dataEncAlgorithm,int dataEncStrength,String recipientEntityID) throws SAML2Exception {  Element el=EncManager.getEncInstance().encrypt(toXMLString(true,true),recipientPublicKey,dataEncAlgorithm,dataEncStrength,recipientEntityID,"EncryptedAssertion");  return AssertionFactory.getInstance().createEncryptedAssertion(el);}  }
class C{  public synchronized boolean needsGui(){  BeanContext bc=getBeanContextPeer();  if (bc != this) {    if (bc instanceof Visibility)     return ((Visibility)bc).needsGui();    if (bc instanceof Container || bc instanceof Component)     return true;  }synchronized (children) {    for (Iterator i=children.keySet().iterator(); i.hasNext(); ) {      Object c=i.next();      try {        return ((Visibility)c).needsGui();      } catch (      ClassCastException cce) {      }      if (c instanceof Container || c instanceof Component)       return true;    }  }  return false;}  }
class C{  public void testUpdate3() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = 1;");  statement.execute("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 5 WHERE id = 1;");}  }
class C{  public ResourceSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void destroyInternalSession(SessionID sessionID){  InternalSession sess=sessionAccessManager.removeInternalSession(sessionID);  if (sess != null && sess.getState() != INVALID) {    signalRemove(sess,SessionEventType.DESTROY);    sessionAuditor.auditActivity(sess.toSessionInfo(),AM_SESSION_DESTROYED);  }  sessionAccessManager.removeSessionId(sessionID);}  }
class C{  public void testCFII_ServerStartLater_Block() throws Exception {  ensureServerClosed();  assertTrue(this.channel1.isBlocking());  statusNotConnected_NotPending();  try {    this.channel1.connect(localAddr1);    fail("Should throw a ConnectException here.");  } catch (  ConnectException e) {  }  statusChannelClosed();  ensureServerOpen();  try {    this.channel1.finishConnect();    fail("Should throw a ClosedChannelException here.");  } catch (  ClosedChannelException e) {  }}  }
class C{  public void handleReorderEntryButtonRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(AUTH_ENTRY_TABLE);  table.restoreStateData();  cacheValues();  setPageSessionAttribute(ENTRY_LIST,AMAuthConfigUtils.authConfigurationEntryToXMLString(getTableData()));  ReorderAuthChainsViewBean vb=(ReorderAuthChainsViewBean)getViewBean(ReorderAuthChainsViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public int start(){  if (first < 0)   throw new IllegalStateException("No match available");  return first;}  }
class C{  @NonNull public static Interpolator decelerate(){  return new DecelerateInterpolator();}  }
class C{  public final void testEqualsObject04(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertFalse(c1.equals("TEST_TYPE"));}  }
class C{  public void start_scope(LogfileScope p_logfile_scope){  if (!write_enabled)   return;  try {    file_writer.write(p_logfile_scope.name);    file_writer.write("\n");  } catch (  IOException e2) {    System.out.println("Logfile.start_scope: write failed");  }}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  private void publishInDebugLogger(String message,Throwable t){  tracer.traceException(message,t);}  }
class C{  private boolean hasObjectClassOrAttribute(String objectClassName,String attrTypeName){  ObjectClass oc=DirectoryServer.getSchema().getObjectClass(objectClassName);  if (oc.isPlaceHolder()) {    logger.trace("No %s objectclass is defined in the server schema.",objectClassName);    return containsObjectClassByName(objectClassName);  }  if (!objectClasses.containsKey(oc)) {    return false;  }  AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attrTypeName);  if (attrType.isPlaceHolder()) {    logger.trace("No %s attribute type is defined in the server schema.",attrTypeName);    return false;  }  return userAttributes.containsKey(attrType) || operationalAttributes.containsKey(attrType);}  }
class C{  @Override public boolean equals(Object obj){  boolean equalled=true;  if (obj == null) {    return false;  }  if (!getClass().equals(obj.getClass())) {    return false;  }  LogicalSubject object=(LogicalSubject)obj;  if (eSubjects == null) {    if (object.getESubjects() != null) {      return false;    }  } else {    if ((object.getESubjects()) == null) {      return false;    } else     if (!eSubjects.containsAll(object.getESubjects())) {      return false;    } else     if (!object.getESubjects().containsAll(eSubjects)) {      return false;    }  }  if (pSubjectName == null) {    if (object.getPSubjectName() != null) {      return false;    }  } else {    if (!pSubjectName.equals(object.getPSubjectName())) {      return false;    }  }  return equalled;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("http://www.nist.gov","nomatch");  assertSize("size",0,elementList);}  }
class C{  public void handleBtnNextRequest(RequestInvocationEvent event){  PWResetUserValidationModel model=(PWResetUserValidationModel)getModel();  String userAttrValue=(String)getDisplayFieldValue(TF_USER_ATTR);  if (userAttrValue != null) {    userAttrValue=userAttrValue.trim();  }  HiddenField hf=(HiddenField)getChild(FLD_USER_ATTR);  String userAttrName=(String)hf.getValue();  String orgDN=(String)getPageSessionAttribute(ORG_DN);  String orgDNFlag=(String)getPageSessionAttribute(ORG_DN_FLAG);  RequestContext reqContext=event.getRequestContext();  ISLocaleContext localeContext=new ISLocaleContext();  localeContext.setLocale(reqContext.getRequest());  java.util.Locale localeObj=localeContext.getLocale();  String locale=localeObj.toString();  model.setUserLocale(locale);  if (orgDNFlag != null && orgDNFlag.equals(STRING_TRUE)) {    model.setRealmFlag(true);  }  if (userAttrValue == null || userAttrValue.length() == 0) {    setErrorMessage(model.getErrorTitle(),model.getMissingUserAttrMessage(userAttrName));    forwardTo();  } else {    if (model.isUserAttrValueValid(orgDN,userAttrValue) && model.isUserExists(userAttrValue,userAttrName,orgDN) && model.isUserActive(model.getUserRealm())) {      forwardToPWResetQuestionVB(orgDN,userAttrValue,orgDNFlag,locale);    } else {      setErrorMessage(model.getErrorTitle(),model.getErrorMessage());      forwardTo();    }  }}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener listener){  if (listener == null || propertyName == null) {    return;  }  listener=this.map.extract(listener);  if (listener != null) {    this.map.remove(propertyName,listener);  }}  }
class C{  public AMSearchResults searchFilteredRoles(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(FILTERED_ROLE),getSearchFilter(AMObject.FILTERED_ROLE),wildcard,avPairs,searchControl);}  }
class C{  public static Foo findByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  private static int findAnyZero(float[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    float middleValue=a[middle];    if (middleValue < 0.0f) {      low=middle + 1;    } else     if (middleValue > 0.0f) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  public HashAttributeSet(){  this(Attribute.class);}  }
class C{  public Map<String,Set<String>> read(SSOToken token,String objName) throws SMSException, SSOException {  try {    String[] objs={token.getTokenID().toString(),objName};    Map attrs=(Map)client.send(client.encodeMessage("read",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null);    return ((attrs == null) ? null : new CaseInsensitiveHashMap<String,Set<String>>(attrs));  } catch (  SSOException ssoe) {    throw ssoe;  }catch (  SMSException smse) {    throw smse;  }catch (  Exception re) {    debug.error("SMSJAXRPCObject:read -- Exception:",re);    throw (new SMSException(re,"sms-JAXRPC-cannot-read"));  }}  }
class C{  private void assertChildNotExisting(String childName) throws XMPException {  if (!XMPConst.ARRAY_ITEM_NAME.equals(childName) && findChildByName(childName) != null) {    throw new XMPException("Duplicate property or field node '" + childName + "'",XMPError.BADXMP);  }}  }
class C{  private void addMatchingRuleUse(String definition,Schema currentSchema,SchemaBuilder schemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  String oid=SchemaUtils.parseMatchingRuleUseOID(definition);  final String finalDefinition;  if (!currentSchema.hasMatchingRuleUse(oid)) {    finalDefinition=completeDefinitionWhenAddingSchemaElement(definition,modifiedSchemaFiles);  } else {    MatchingRuleUse existingMRU=currentSchema.getMatchingRuleUse(oid);    finalDefinition=completeDefinitionWhenReplacingSchemaElement(definition,existingMRU,modifiedSchemaFiles);  }  schemaBuilder.addMatchingRuleUse(finalDefinition,true);}  }
class C{  public static int calculateBCHCode(int value,int poly){  int msbSetInPoly=findMSBSet(poly);  value<<=msbSetInPoly - 1;  while (findMSBSet(value) >= msbSetInPoly) {    value^=poly << (findMSBSet(value) - msbSetInPoly);  }  return value;}  }
class C{  static boolean testEqual(List<LDAPAttribute> list1,List<LDAPAttribute> list2){  Iterator<LDAPAttribute> e1=list1.iterator();  Iterator<LDAPAttribute> e2=list2.iterator();  while (e1.hasNext() && e2.hasNext()) {    LDAPAttribute o1=e1.next();    LDAPAttribute o2=e2.next();    if (o1 == null ? o2 != null : !testEqual(o1,o2)) {      return false;    }  }  return !e1.hasNext() && !e2.hasNext();}  }
class C{  public RemoteHttpServletRequest(HttpServletRequest request){  super(request);  Cookie[] cookies=request.getCookies();  if (cookies != null) {    if (cookies.length > 0) {      internalCookies=new RemoteCookie[cookies.length];    }    for (int c=0; c < cookies.length; c++) {      internalCookies[c]=new RemoteCookie(cookies[c]);    }  }  Enumeration hNames=getHeaderNames();  while (hNames.hasMoreElements()) {    String headerName=(String)hNames.nextElement();    internalHeader.put(headerName,getHeader(headerName));    internalHeaders.put(headerName,createSet(getHeaders(headerName)));    headerNames.add(headerName);  }  method=getMethod();  pathInfo=getPathInfo();  pathTranslated=getPathTranslated();  contextPath=getContextPath();  queryString=getQueryString();  remoteUser=getRemoteUser();  userPrincipal=getUserPrincipal();  requestedSessionId=getRequestedSessionId();  requestURI=getRequestURI();  requestURL=getRequestURL();  servletPath=getServletPath();  remoteSession=new RemoteSession(getSession());}  }
class C{  public String createNameIdentifier(){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSNameIdentifierGeneratorHelper." + "createNameIdentifier called");  }  if (generator != null) {    return generator.createNameIdentifier();  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierGeneratorHelper.create" + "NameIdentifier returning null as generator is null");    }    return null;  }}  }
class C{  public ACTIVITY_REQUIRED(int minorCode,CompletionStatus completionStatus){  this("",minorCode,completionStatus);}  }
class C{  public SQLSyntaxErrorException(){}  }
class C{  private ByteBuffer writeHeaderToBuffer(int padding,int size) throws IOException {  unsynchronization=false;  extended=false;  experimental=false;  footer=false;  ByteBuffer headerBuffer=ByteBuffer.allocate(TAG_HEADER_LENGTH);  headerBuffer.put(TAG_ID);  headerBuffer.put(getMajorVersion());  headerBuffer.put(getRevision());  byte flagsByte=0;  if (isUnsynchronization()) {    flagsByte|=MASK_V24_UNSYNCHRONIZATION;  }  if (extended) {    flagsByte|=MASK_V24_EXTENDED_HEADER;  }  if (experimental) {    flagsByte|=MASK_V24_EXPERIMENTAL;  }  if (footer) {    flagsByte|=MASK_V24_FOOTER_PRESENT;  }  headerBuffer.put(flagsByte);  int additionalHeaderSize=0;  if (extended) {    additionalHeaderSize+=TAG_EXT_HEADER_LENGTH;    if (updateTag) {      additionalHeaderSize+=TAG_EXT_HEADER_UPDATE_LENGTH;    }    if (crcDataFlag) {      additionalHeaderSize+=TAG_EXT_HEADER_CRC_LENGTH;    }    if (tagRestriction) {      additionalHeaderSize+=TAG_EXT_HEADER_RESTRICTION_LENGTH;    }  }  headerBuffer.put(ID3SyncSafeInteger.valueToBuffer(padding + size + additionalHeaderSize));  ByteBuffer extHeaderBuffer=null;  if (extended) {    int extendedSize=TAG_EXT_HEADER_LENGTH;    if (updateTag) {      extendedSize+=TAG_EXT_HEADER_UPDATE_LENGTH;    }    if (crcDataFlag) {      extendedSize+=TAG_EXT_HEADER_CRC_LENGTH;    }    if (tagRestriction) {      extendedSize+=TAG_EXT_HEADER_RESTRICTION_LENGTH;    }    extHeaderBuffer=ByteBuffer.allocate(extendedSize);    extHeaderBuffer.putInt(extendedSize);    extHeaderBuffer.put((byte)TAG_EXT_NUMBER_BYTES_DATA_LENGTH);    byte extFlag=0;    if (updateTag) {      extFlag|=MASK_V24_TAG_UPDATE;    }    if (crcDataFlag) {      extFlag|=MASK_V24_CRC_DATA_PRESENT;    }    if (tagRestriction) {      extFlag|=MASK_V24_TAG_RESTRICTIONS;    }    extHeaderBuffer.put(extFlag);    if (updateTag) {      extHeaderBuffer.put((byte)0);    }    if (crcDataFlag) {      extHeaderBuffer.put((byte)TAG_EXT_HEADER_CRC_DATA_LENGTH);      extHeaderBuffer.put((byte)0);      extHeaderBuffer.putInt(crcData);    }    if (tagRestriction) {      extHeaderBuffer.put((byte)TAG_EXT_HEADER_RESTRICTION_DATA_LENGTH);      extHeaderBuffer.put((byte)0);    }  }  if (extHeaderBuffer != null) {    extHeaderBuffer.flip();    headerBuffer.put(extHeaderBuffer);  }  headerBuffer.flip();  return headerBuffer;}  }
class C{  public RxGalleryFinal cropWithAspectRatio(float x,float y){  configuration.setAspectRatioX(x);  configuration.setAspectRatioY(y);  return this;}  }
class C{  public static boolean needSetLBCookieAndRedirect(HttpServletRequest request,HttpServletResponse response,boolean isIDP){  if (!requireAddCookie(request)) {    return false;  }  if (debug.messageEnabled()) {    debug.message("FSUtils.needSetLBCookieAndRedirect:" + " lbCookie not set.");  }  setlbCookie(request,response);  if (!requireRedirect(request)) {    return false;  }  String queryString=request.getQueryString();  StringBuilder reqURLSB=new StringBuilder();  reqURLSB.append(request.getRequestURL().toString()).append("?redirected=1");  if (queryString != null) {    reqURLSB.append("&").append(queryString);  }  try {    String reqMethod=request.getMethod();    if (reqMethod.equals("POST")) {      String samlMessageName=null;      String samlMessage=null;      if (isIDP) {        samlMessageName=IFSConstants.SAML_REQUEST;        samlMessage=request.getParameter(samlMessageName);      } else {        samlMessageName=IFSConstants.SAML_RESPONSE;        samlMessage=request.getParameter(samlMessageName);        if (samlMessage == null) {          samlMessageName=IFSConstants.SAML_ART;          samlMessage=request.getParameter(samlMessageName);        }      }      if (samlMessage == null) {        return false;      }      String relayState=request.getParameter(IFSConstants.RELAY_STATE);      FSUtils.postToTarget(request,response,samlMessageName,samlMessage,IFSConstants.RELAY_STATE,relayState,reqURLSB.toString());    } else     if (reqMethod.equals("GET")) {      response.sendRedirect(reqURLSB.toString());    } else {      return false;    }    return true;  } catch (  IOException ioe) {    debug.error("FSUtils.needSetLBCookieAndRedirect: ",ioe);  }catch (  SAML2Exception saml2E) {    debug.error("FSUtils.needSetLBCookieAndRedirect: ",saml2E);  }  return false;}  }
class C{  private Builder(){  super(net.aimeizi.person.QueryParameter.SCHEMA$);}  }
class C{  protected Textifier createTextifier(){  return new Textifier();}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }  boolean isJdk14OrHigher=false;  try {    Throwable.class.getMethod("getCause",(Class<?>)null);    isJdk14OrHigher=true;  } catch (  NoSuchMethodException nsme) {  }  if (!isJdk14OrHigher) {    Throwable exception=getException();    for (int i=0; (i < 10) && (null != exception); i++) {      s.println("---------");      try {        if (exception instanceof DTMException) {          String locInfo=((DTMException)exception).getLocationAsString();          if (null != locInfo) {            s.println(locInfo);          }        }        exception.printStackTrace(s);      } catch (      Throwable e) {        s.println("Could not print stack trace...");      }      try {        Method meth=((Object)exception).getClass().getMethod("getException",(Class<?>)null);        if (null != meth) {          Throwable prev=exception;          exception=(Throwable)meth.invoke(exception,(Class<?>)null);          if (prev == exception) {            break;          }        } else {          exception=null;        }      } catch (      InvocationTargetException ite) {        exception=null;      }catch (      IllegalAccessException iae) {        exception=null;      }catch (      NoSuchMethodException nsme) {        exception=null;      }    }  }}  }
class C{  public static CheckoutService createService(Vertx vertx,ServiceDiscovery discovery){  CheckoutService ret=CheckoutService.newInstance(io.vertx.blueprint.microservice.cart.CheckoutService.createService((io.vertx.core.Vertx)vertx.getDelegate(),(io.vertx.servicediscovery.ServiceDiscovery)discovery.getDelegate()));  return ret;}  }
class C{  public ReplicationParameters connectionParamsForDestination(ConnectionParameters destinationParams){  this.connParamsForDestination=destinationParams;  return this;}  }
class C{  public static boolean isNumeric(String s){  try {    Double.parseDouble(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public ACTIVITY_REQUIRED(String detailMessage){  this(detailMessage,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.FederationConfigElement createFederationConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.FederationConfigElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrremovechild2.class,args);}  }
class C{  OfRef(AbstractPipeline<?,T,?> upstream,Comparator<? super T> comparator){  super(upstream,StreamShape.REFERENCE,StreamOpFlag.IS_ORDERED | StreamOpFlag.NOT_SORTED);  this.isNaturalSort=false;  this.comparator=Objects.requireNonNull(comparator);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthSplitPaneUI();}  }
class C{  private void initConfig() throws SMSException, SSOException {  final ServiceConfig delegationConfig=configManager.getGlobalConfig(null);  permissionsConfig=delegationConfig.getSubConfig(PERMISSIONS);  privilegesConfig=delegationConfig.getSubConfig(PRIVILEGES);}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  final void removeTreeNode(HashMap<K,V> map,Node<K,V>[] tab,boolean movable){  int n;  if (tab == null || (n=tab.length) == 0)   return;  int index=(n - 1) & hash;  TreeNode<K,V> first=(TreeNode<K,V>)tab[index], root=first, rl;  TreeNode<K,V> succ=(TreeNode<K,V>)next, pred=prev;  if (pred == null)   tab[index]=first=succ; else   pred.next=succ;  if (succ != null)   succ.prev=pred;  if (first == null)   return;  if (root.parent != null)   root=root.root();  if (root == null || root.right == null || (rl=root.left) == null || rl.left == null) {    tab[index]=first.untreeify(map);    return;  }  TreeNode<K,V> p=this, pl=left, pr=right, replacement;  if (pl != null && pr != null) {    TreeNode<K,V> s=pr, sl;    while ((sl=s.left) != null)     s=sl;    boolean c=s.red;    s.red=p.red;    p.red=c;    TreeNode<K,V> sr=s.right;    TreeNode<K,V> pp=p.parent;    if (s == pr) {      p.parent=s;      s.right=p;    } else {      TreeNode<K,V> sp=s.parent;      if ((p.parent=sp) != null) {        if (s == sp.left)         sp.left=p; else         sp.right=p;      }      if ((s.right=pr) != null)       pr.parent=s;    }    p.left=null;    if ((p.right=sr) != null)     sr.parent=p;    if ((s.left=pl) != null)     pl.parent=s;    if ((s.parent=pp) == null)     root=s; else     if (p == pp.left)     pp.left=s; else     pp.right=s;    if (sr != null)     replacement=sr; else     replacement=p;  } else   if (pl != null)   replacement=pl; else   if (pr != null)   replacement=pr; else   replacement=p;  if (replacement != p) {    TreeNode<K,V> pp=replacement.parent=p.parent;    if (pp == null)     root=replacement; else     if (p == pp.left)     pp.left=replacement; else     pp.right=replacement;    p.left=p.right=p.parent=null;  }  TreeNode<K,V> r=p.red ? root : balanceDeletion(root,replacement);  if (replacement == p) {    TreeNode<K,V> pp=p.parent;    p.parent=null;    if (pp != null) {      if (p == pp.left)       pp.left=null; else       if (p == pp.right)       pp.right=null;    }  }  if (movable)   moveRootToFront(tab,r);}  }
class C{  protected void selectContent(AttributeSet attr) throws IOException {  Object model=attr.getAttribute(StyleConstants.ModelAttribute);  incrIndent();  if (model instanceof OptionListModel) {    OptionListModel<Option> listModel=(OptionListModel<Option>)model;    int size=listModel.getSize();    for (int i=0; i < size; i++) {      Option option=listModel.getElementAt(i);      writeOption(option);    }  } else   if (model instanceof OptionComboBoxModel) {    OptionComboBoxModel<Option> comboBoxModel=(OptionComboBoxModel<Option>)model;    int size=comboBoxModel.getSize();    for (int i=0; i < size; i++) {      Option option=comboBoxModel.getElementAt(i);      writeOption(option);    }  }  decrIndent();}  }
class C{  private void displayXObject(PdfName xobjectName){  PdfStream xobjectStream=getXObjectStream(xobjectName);  PdfName subType=xobjectStream.getAsName(PdfName.Subtype);  IXObjectDoHandler handler=xobjectDoHandlers.get(subType);  if (handler == null) {    handler=xobjectDoHandlers.get(PdfName.Default);  }  handler.handleXObject(this,xobjectStream);}  }
class C{  private boolean doAcquireSharedNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  static DatagramSocketImpl createDatagramSocketImpl(boolean isMulticast) throws SocketException {  if (prefixImplClass != null) {    try {      return (DatagramSocketImpl)prefixImplClass.newInstance();    } catch (    Exception e) {      throw new SocketException("can't instantiate DatagramSocketImpl");    }  } else {    if (isMulticast)     exclusiveBind=false;    if (useDualStackImpl && !isMulticast)     return new DualStackPlainDatagramSocketImpl(exclusiveBind); else     return new TwoStacksPlainDatagramSocketImpl(exclusiveBind);  }}  }
class C{  public Enumeration<Permission> elements(){  List<Permission> results=new ArrayList<>();synchronized (this) {    for (    List<UnresolvedPermission> l : perms.values()) {synchronized (l) {        results.addAll(l);      }    }  }  return Collections.enumeration(results);}  }
class C{  public Subpath(){}  }
class C{  public EventParser(String event){  super(event);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node newChild;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  newChild=doc.createElement("terday");{    boolean success=false;    try {      retval=titleAttr.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  static Entry makeEntryFrom(List<String> base,List<String> attrs){  List<String> ldif=new ArrayList<>(base);  ldif.addAll(attrs);  return makeEntry(ldif.toArray(new String[0]));}  }
class C{  public NSString(byte[] bytes,final int startIndex,final int endIndex,String encoding) throws UnsupportedEncodingException {  content=new String(bytes,startIndex,endIndex - startIndex,encoding);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  entryDNType=CoreSchema.getEntryDNAttributeType();  EntryDNVirtualAttributeProvider provider=new EntryDNVirtualAttributeProvider();  virtualAttributeRule=new VirtualAttributeRule(entryDNType,provider,Collections.<DN>emptySet(),SearchScope.WHOLE_SUBTREE,Collections.<DN>emptySet(),Collections.<SearchFilter>emptySet(),ConflictBehavior.VIRTUAL_OVERRIDES_REAL);  Entry entry=TestCaseUtils.makeEntry("dn: o=test","objectClass: top","objectClass: organization","o: test");  virtualAttribute=new VirtualAttribute(entryDNType,entry,virtualAttributeRule);}  }
class C{  public int value(){  return _value;}  }
class C{  protected void threadDump(PrintWriter writer,StringManager smClient,Enumeration<Locale> requestedLocales){  writer.println(smClient.getString("managerServlet.threaddump"));  writer.print(Diagnostics.getThreadDump(requestedLocales));}  }
class C{  private synchronized MonitorNotification updateNotifications(GaugeMonitorObservedObject o){  MonitorNotification n=null;  if (o.getStatus() == RISING_OR_FALLING) {    if (isFirstGreaterThanLast((Number)o.getDerivedGauge(),highThreshold,o.getType())) {      if (notifyHigh) {        n=new MonitorNotification(THRESHOLD_HIGH_VALUE_EXCEEDED,this,0,0,"",null,null,null,highThreshold);      }      o.setStatus(FALLING);    } else     if (isFirstGreaterThanLast(lowThreshold,(Number)o.getDerivedGauge(),o.getType())) {      if (notifyLow) {        n=new MonitorNotification(THRESHOLD_LOW_VALUE_EXCEEDED,this,0,0,"",null,null,null,lowThreshold);      }      o.setStatus(RISING);    }  } else {    if (o.getStatus() == RISING) {      if (isFirstGreaterThanLast((Number)o.getDerivedGauge(),highThreshold,o.getType())) {        if (notifyHigh) {          n=new MonitorNotification(THRESHOLD_HIGH_VALUE_EXCEEDED,this,0,0,"",null,null,null,highThreshold);        }        o.setStatus(FALLING);      }    } else     if (o.getStatus() == FALLING) {      if (isFirstGreaterThanLast(lowThreshold,(Number)o.getDerivedGauge(),o.getType())) {        if (notifyLow) {          n=new MonitorNotification(THRESHOLD_LOW_VALUE_EXCEEDED,this,0,0,"",null,null,null,lowThreshold);        }        o.setStatus(RISING);      }    }  }  return n;}  }
class C{  public AuthnContext createAuthnContext(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_CONTEXT);  if (obj == null) {    return new AuthnContextImpl();  } else {    return (AuthnContext)obj;  }}  }
class C{  public static ValueRange of(long min,long max){  if (min > max) {    throw new IllegalArgumentException("Minimum value must be less than maximum value");  }  return new ValueRange(min,min,max,max);}  }
class C{  public X509Attribute(String oid,ASN1Encodable value){  this.attr=new Attribute(new ASN1ObjectIdentifier(oid),new DERSet(value));}  }
class C{  public List unshift(Object element){  add(0,element);  return this;}  }
class C{  public void close(){  queueDatabase.sync();  queueDatabase.close();  dbEnv.close();}  }
class C{  boolean isEven(){  return (intLen == 0) || ((value[offset + intLen - 1] & 1) == 0);}  }
class C{  private void readNameTable() throws java.io.IOException {  int table_location[];  table_location=tables.get("name");  if (table_location == null) {    if (fileName != null) {      throw new IOException("table.1.does.not.exist.in.2").setMessageParams("name",fileName);    } else {      throw new IOException("table.1.does.not.exist").setMessageParams("name");    }  }  allNameEntries=new LinkedHashMap<>();  raf.seek(table_location[0] + 2);  int numRecords=raf.readUnsignedShort();  int startOfStorage=raf.readUnsignedShort();  for (int k=0; k < numRecords; ++k) {    int platformID=raf.readUnsignedShort();    int platformEncodingID=raf.readUnsignedShort();    int languageID=raf.readUnsignedShort();    int nameID=raf.readUnsignedShort();    int length=raf.readUnsignedShort();    int offset=raf.readUnsignedShort();    List<String[]> names;    if (allNameEntries.containsKey(nameID)) {      names=allNameEntries.get(nameID);    } else {      allNameEntries.put(nameID,names=new ArrayList<>());    }    int pos=(int)raf.getPosition();    raf.seek(table_location[0] + startOfStorage + offset);    String name;    if (platformID == 0 || platformID == 3 || platformID == 2 && platformEncodingID == 1) {      name=readUnicodeString(length);    } else {      name=readStandardString(length);    }    names.add(new String[]{Integer.toString(platformID),Integer.toString(platformEncodingID),Integer.toString(languageID),name});    raf.seek(pos);  }}  }
class C{  public ResourceOwner authenticate(OAuth2Request request) throws NotFoundException {  final String username=request.getParameter(USERNAME);  final char[] password=request.getParameter(PASSWORD) == null ? null : request.<String>getParameter(PASSWORD).toCharArray();  try {    final String realm=realmNormaliser.normalise(request.<String>getParameter(OAuth2Constants.Custom.REALM));    final String authChain=request.getParameter(AUTH_CHAIN);    return authenticate(request.<Request>getRequest(),username,password,realm,authChain);  } catch (  org.forgerock.json.resource.NotFoundException e) {    throw new NotFoundException(e.getMessage());  }}  }
class C{  public static String postRequest(URL url,String postData,String encoding,String contentType,int readTimeout,int socketTimeout){  return postRequest(url,postData,encoding,contentType,false,readTimeout,socketTimeout);}  }
class C{  public static boolean isBase64(final byte octet){  return octet == PAD_DEFAULT || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);}  }
class C{  @Override public void deleteITable(IndexIdentifier indexId){  String tableToDelete=Utils.calculateITableName(indexId);  deleteITable(tableToDelete);}  }
class C{  public final void cancel(){synchronized (this) {    if (valid) {      valid=false;      ((AbstractSelector)selector()).cancel(this);    }  }}  }
class C{  @Override public void addWrapperLifecycle(String listener){synchronized (wrapperLifecyclesLock) {    String results[]=new String[wrapperLifecycles.length + 1];    for (int i=0; i < wrapperLifecycles.length; i++)     results[i]=wrapperLifecycles[i];    results[wrapperLifecycles.length]=listener;    wrapperLifecycles=results;  }  fireContainerEvent("addWrapperLifecycle",listener);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    Response response=messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);    }    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    this.byeSeen=true;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void organizationConfigChanged(){  organizationConfigChanged(null,null,null,null,null,0);}  }
class C{  public ImmutableList concat(java.util.List<?> elements){  ImmutableList immList=new ImmutableList(list);  immList.list.addAll(elements);  return immList;}  }
class C{  public DLSequence(){}  }
class C{  private void applyRDNChanges(List<Modification> modifications) throws DirectoryException {  if (deleteOldRDN()) {    for (    AVA ava : entryDN.rdn()) {      Attribute a=Attributes.create(ava.getAttributeType(),ava.getAttributeName(),ava.getAttributeValue());      if (a.getAttributeDescription().getAttributeType().isNoUserModification() && !isInternalOperation() && !isSynchronizationOperation()) {        throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_MODDN_OLD_RDN_ATTR_IS_NO_USER_MOD.get(entryDN,a.getAttributeDescription()));      }      List<ByteString> missingValues=new LinkedList<>();      newEntry.removeAttribute(a,missingValues);      if (missingValues.isEmpty()) {        modifications.add(new Modification(ModificationType.DELETE,a));      }    }  }  for (  AVA ava : newRDN) {    Attribute a=Attributes.create(ava.getAttributeType(),ava.getAttributeName(),ava.getAttributeValue());    List<ByteString> duplicateValues=new LinkedList<>();    newEntry.addAttribute(a,duplicateValues);    if (duplicateValues.isEmpty()) {      if (a.getAttributeDescription().getAttributeType().isNoUserModification()) {        if (!isInternalOperation() && !isSynchronizationOperation()) {          throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_MODDN_NEW_RDN_ATTR_IS_NO_USER_MOD.get(entryDN,a.getAttributeDescription()));        }      } else {        modifications.add(new Modification(ModificationType.ADD,a));      }    }  }  if (DirectoryServer.checkSchema() && !isSynchronizationOperation()) {    LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();    if (!newEntry.conformsToSchema(null,false,true,true,invalidReason)) {      throw new DirectoryException(ResultCode.OBJECTCLASS_VIOLATION,ERR_MODDN_VIOLATES_SCHEMA.get(entryDN,invalidReason));    }    for (    AVA ava : newRDN) {      AttributeType at=ava.getAttributeType();      if (at.isObsolete()) {        throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_MODDN_NEWRDN_ATTR_IS_OBSOLETE.get(entryDN,at.getNameOrOID()));      }    }  }}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize,byte[] iv,int offset){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException("offset < 0: " + offset);  }  if (iv.length - offset < 2 * (wordSize / 8)) {    throw new IllegalArgumentException("iv.length - offset < 2 * (wordSize / 8)");  }  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=new byte[offset + 2 * (wordSize / 8)];  System.arraycopy(iv,offset,this.iv,0,2 * (wordSize / 8));}  }
class C{  @Override public int compareTo(SortedRoom p_other){  int compare_value=touching_side_no_of_room - p_other.touching_side_no_of_room;  if (compare_value != 0)   return compare_value;  PlaPointFloat compare_corner=room_shape.corner_approx(touching_side_no_of_room);  double this_distance=first_corner().to_float().distance(compare_corner);  double other_distance=p_other.first_corner().to_float().distance(compare_corner);  double delta_distance=this_distance - other_distance;  if (Math.abs(delta_distance) > c_dist_tolerance)   return Signum.as_int(delta_distance);  if (first_corner().equals(p_other.first_corner())) {    double this_distance2=last_corner().to_float().distance(compare_corner);    double other_distance2=p_other.last_corner().to_float().distance(compare_corner);    delta_distance=this_distance2 - other_distance2;    if (Math.abs(delta_distance) <= c_dist_tolerance) {      if (neighbour_room_touch_is_corner && p_other.neighbour_room_touch_is_corner) {        int compare_line_no=touching_side_no_of_room;        if (room_touch_is_corner) {          compare_line_no=room_shape.prev_no(compare_line_no);        }        PlaDirection compare_dir=room_shape.border_line(compare_line_no).direction().opposite();        PlaLineInt this_compare_line=neighbour_shape.border_line(touching_side_no_of_neighbour_room);        PlaLineInt other_compare_line=p_other.neighbour_shape.border_line(p_other.touching_side_no_of_neighbour_room);        delta_distance=compare_dir.compare_from(this_compare_line.direction(),other_compare_line.direction());      }    }  }  return Signum.as_int(delta_distance);}  }
class C{  protected TextSyntax(String value,Locale locale){  this.value=verify(value);  this.locale=verify(locale);}  }
class C{  public GridBagConstraints(){  gridx=RELATIVE;  gridy=RELATIVE;  gridwidth=1;  gridheight=1;  weightx=0;  weighty=0;  anchor=CENTER;  fill=NONE;  insets=new Insets(0,0,0,0);  ipadx=0;  ipady=0;}  }
class C{  private <C extends ConfigurationClient,S extends Configuration>void processRelation(ManagedObjectPath<?,?> path,SetRelationDefinition<C,S> r){  AbstractManagedObjectDefinition<C,S> d=r.getChildDefinition();  helpHandler.registerManagedObjectDefinition(d);  processPath(path.child(r,d));  for (  AbstractManagedObjectDefinition<? extends C,? extends S> c : d.getAllChildren()) {    helpHandler.registerManagedObjectDefinition(c);    processPath(path.child(r,c));  }}  }
class C{  public void addFilter(OutputFilter filter){  OutputFilter[] newFilterLibrary=new OutputFilter[filterLibrary.length + 1];  for (int i=0; i < filterLibrary.length; i++) {    newFilterLibrary[i]=filterLibrary[i];  }  newFilterLibrary[filterLibrary.length]=filter;  filterLibrary=newFilterLibrary;  activeFilters=new OutputFilter[filterLibrary.length];}  }
class C{  public void objectChanged(String name,int type,Map cMap){  objectChanged(name,null,type,cMap);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(values.size());  for (int i=0; i < values.size(); i++) {    s.writeObject(values.elementAt(i));  }}  }
class C{  void addEntry(WriteableTransaction txn,Entry entry) throws StorageRuntimeException {  Set<String> labeledURIs=entry.getReferralURLs();  if (labeledURIs != null) {    update(txn,entry.getName(),labeledURIs);  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  @SuppressWarnings("unused") public static void translatePoint(PointF point,float offsetX,float offsetY,float angle){  ScFeature.translatePoint(point,offsetX,angle);  ScFeature.translatePoint(point,offsetY,angle + 90.0f);}  }
class C{  private void applyPartnerDeviceProfileOverrides(Context context,DisplayMetrics dm){  Partner p=Partner.get(context.getPackageManager());  if (p != null) {    p.applyInvariantDeviceProfileOverrides(this,dm);  }}  }
class C{  public final int indexOf(int elem){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public MarshalException(String message,Throwable exception){  this(message,null,exception);}  }
class C{  public ArtResult fanout(BrdAbitPin p_pin,interactive.IteraSettings p_settings,int p_ripup_costs,ThreadStoppable p_stoppable){  if (p_pin.first_layer() != p_pin.last_layer() || p_pin.net_count() != 1) {    return ArtResult.ALREADY_CONNECTED;  }  int pin_net_no=p_pin.get_net_no(0);  int pin_layer=p_pin.first_layer();  Set<BrdItem> pin_connected_set=p_pin.get_connected_set(pin_net_no);  for (  BrdItem curr_item : pin_connected_set) {    if (curr_item.first_layer() != pin_layer || curr_item.last_layer() != pin_layer) {      return ArtResult.ALREADY_CONNECTED;    }  }  Set<BrdItem> unconnected_set=p_pin.get_unconnected_set(pin_net_no);  if (unconnected_set.isEmpty()) {    return ArtResult.ALREADY_CONNECTED;  }  ArtControl ctrl_settings=new ArtControl(this,pin_net_no,p_settings);  ctrl_settings.is_fanout=true;  ctrl_settings.stop_remove_fanout_vias=false;  if (p_ripup_costs >= 0) {    ctrl_settings.ripup_allowed=true;    ctrl_settings.ripup_costs=p_ripup_costs;  }  SortedSet<BrdItem> ripped_item_list=new TreeSet<BrdItem>();  ArtEngine a_engine=new ArtEngine(this,pin_net_no,ctrl_settings.trace_clearance_idx,p_stoppable);  ArtResult result=a_engine.autoroute_connection(pin_connected_set,unconnected_set,ctrl_settings,ripped_item_list);  if (result == ArtResult.ROUTED) {    TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP,p_stoppable);    changed_area_optimize(NetNosList.EMPTY,p_settings.trace_pullt_min_move,ctrl_settings.trace_costs,t_limit);  }  return result;}  }
class C{  public String toString(){  String answer=super.toString();  if (rootException != null) {    answer+=" [Root exception is " + rootException + "]";  }  if (remainingName != null) {    answer+="; remaining name '" + remainingName + "'";  }  return answer;}  }
class C{  public AMSearchResults searchSubOrganizationalUnits(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT),getSearchFilter(AMObject.ORGANIZATIONAL_UNIT),wildcard,avPairs,searchControl);}  }
class C{  @Override public void remove(String id) throws IOException {  File file=file(id);  if (file == null) {    return;  }  if (manager.getContext().getLogger().isDebugEnabled()) {    manager.getContext().getLogger().debug(sm.getString(getStoreName() + ".removing",id,file.getAbsolutePath()));  }  file.delete();}  }
class C{  public boolean isVisible(){  return !ServiceManager.isRealmEnabled() && privateInstance.visible;}  }
class C{  public boolean seek(ByteBuffer byteBuffer){  return false;}  }
class C{  private void populateDefaultApplications() throws UpgradeException {  final Document entitlementDoc=getEntitlementXML();  final NodeList subConfigs=entitlementDoc.getElementsByTagName(SMSUtils.SUB_CONFIG);  for (int idx=0; idx < subConfigs.getLength(); idx++) {    final Node subConfig=subConfigs.item(idx);    final String id=getNodeAttributeValue(subConfig,ID);    final String name=getNodeAttributeValue(subConfig,NAME);    if (APPLICATION.equals(id)) {      defaultApplicationNames.add(name);    }  }}  }
class C{  private static void initialize(ContentResolver gContentResolver,String gDirectoryName,int gCameraRequestCode,int gGalleryRequestCode,int gImageQuality,ImageType gImageType,int gMaxSizeInPixel){  contentResolver=gContentResolver;  directoryName=gDirectoryName;  cameraRequestCode=gCameraRequestCode;  galleryRequestCode=gGalleryRequestCode;  imageQuality=gImageQuality;  imageType=gImageType;  maxSizeInPixel=gMaxSizeInPixel;}  }
class C{  public void close() throws IOException {  if (!closed) {    super.close();    closed=true;  }}  }
class C{  ParentInheritance(String pattern,boolean skipParse) throws AciException {  if (skipParse) {    if (pattern.startsWith(parentPat)) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_USERATTR_ROLEDN_INHERITANCE_PATTERN.get(pattern);      throw new AciException(message);    } else {      pattern=pattern.trim();      Pattern pattern1=Pattern.compile(ATTR_NAME);      Matcher matcher=pattern1.matcher(pattern);      if (!matcher.find() || matcher.groupCount() != 1) {        LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_ATTRIBUTE_TYPE_NAME.get(pattern);        throw new AciException(message);      }      numLevels=1;      levels[0]=0;    }  } else {    parse(pattern);  }}  }
class C{  public final String[] keys(){  String[] keysArr=new String[m_firstFree];  for (int i=0; i < m_firstFree; i++) {    keysArr[i]=m_map[i];  }  return keysArr;}  }
class C{  public Textifier visitAnnotation(final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  text.add(visible ? ")\n" : ") // invisible\n");  return t;}  }
class C{  OpenSSLSessionImpl(byte[] derData,String peerHost,int peerPort,X509Certificate[] peerCertificates,AbstractSessionContext sessionContext) throws IOException {  this(NativeCrypto.d2i_SSL_SESSION(derData),null,peerCertificates,peerHost,peerPort,sessionContext);  if (this.sslSessionNativePointer == 0) {    throw new IOException("Invalid session data");  }}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.workingKey=((KeyParameter)params).getKey();    setKey(this.workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to Blowfish init - " + params.getClass().getName());}  }
class C{  public void clear(byte value){  for (int y=0; y < height; ++y) {    for (int x=0; x < width; ++x) {      bytes[y][x]=value;    }  }}  }
class C{  @Deprecated public static Bundle parseUrl(String url){  url=url.replace("fbconnect","http");  try {    URL u=new URL(url);    Bundle b=decodeUrl(u.getQuery());    b.putAll(decodeUrl(u.getRef()));    return b;  } catch (  MalformedURLException e) {    return new Bundle();  }}  }
class C{  public COSNotFoundException(){}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.RSAKeyValueElement createRSAKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.RSAKeyValueElementImpl();}  }
class C{  protected static String replaceProperties(String text,Properties properties){  Set<Map.Entry<Object,Object>> entries=properties.entrySet();  for (  Map.Entry<Object,Object> entry : entries) {    Object key=entry.getKey();    Object value=entry.getValue();    if (key != null && value != null) {      String pattern="${" + key + "}";      text=Strings.replaceAllWithoutRegex(text,pattern,value.toString());    }  }  return text;}  }
class C{  protected final int addNode(int type,int expandedTypeID,int parentIndex,int previousSibling,int dataOrPrefix,boolean canHaveFirstChild){  int nodeIndex=m_size++;  if (nodeIndex == m_maxNodeIndex) {    addNewDTMID(nodeIndex);    m_maxNodeIndex+=(1 << DTMManager.IDENT_DTM_NODE_BITS);  }  m_firstch.addElement(DTM.NULL);  m_nextsib.addElement(DTM.NULL);  m_parent.addElement(parentIndex);  m_exptype.addElement(expandedTypeID);  m_dataOrQName.addElement(dataOrPrefix);  if (m_prevsib != null) {    m_prevsib.addElement(previousSibling);  }  if (m_locator != null && m_useSourceLocationProperty) {    setSourceLocation();  }switch (type) {case DTM.NAMESPACE_NODE:    declareNamespaceInContext(parentIndex,nodeIndex);  break;case DTM.ATTRIBUTE_NODE:break;default :if (DTM.NULL != previousSibling) {m_nextsib.setElementAt(nodeIndex,previousSibling);} else if (DTM.NULL != parentIndex) {m_firstch.setElementAt(nodeIndex,parentIndex);}break;}return nodeIndex;}  }
class C{  public void addAllResourceTypeUuids(final Set<String> resourceTypeUuids){  this.resourceTypeUuids.addAll(resourceTypeUuids);}  }
class C{  public void insertChar(AttributedCharacterIterator newParagraph,int insertPos){  if (collectStats) {    printStats();  }  if (wantStats) {    collectStats=true;  }  fStart=newParagraph.getBeginIndex();  int end=newParagraph.getEndIndex();  if (end - fStart != fChars.length + 1) {    initAll(newParagraph);  }  char[] newChars=new char[end - fStart];  int newCharIndex=insertPos - fStart;  System.arraycopy(fChars,0,newChars,0,newCharIndex);  char newChar=newParagraph.setIndex(insertPos);  newChars[newCharIndex]=newChar;  System.arraycopy(fChars,newCharIndex,newChars,newCharIndex + 1,end - insertPos - 1);  fChars=newChars;  if (fBidi != null || Bidi.requiresBidi(newChars,newCharIndex,newCharIndex + 1) || newParagraph.getAttribute(TextAttribute.BIDI_EMBEDDING) != null) {    fBidi=new Bidi(newParagraph);    if (fBidi.isLeftToRight()) {      fBidi=null;    }  }  fParagraph=StyledParagraph.insertChar(newParagraph,fChars,insertPos,fParagraph);  invalidateComponents();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public WeakLongHashMap(){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(DEFAULT_INITIAL_CAPACITY);  table=(Entry<K>[])new Entry[DEFAULT_INITIAL_CAPACITY];}  }
class C{  public String generateName(final Random random,final int length,int middlesToUse){  return generateName(null,length,middlesToUse);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeparentnodenull.class,args);}  }
class C{  public final void testWriteint03() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(null,md);      try {        for (int i=0; i < MY_MESSAGE_LEN; i++) {          dos.write(myMessage[i]);        }        fail("OutputStream not set. write(int) must not work");      } catch (      Exception e) {        return;      }    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  protected void enableLocalSession(Router router){  router.route().handler(CookieHandler.create());  router.route().handler(SessionHandler.create(LocalSessionStore.create(vertx,"shopping.user.session")));}  }
class C{  public void addChild(String type,String name) throws MBeanException {  Container contained=null;  try {    contained=(Container)Class.forName(type).newInstance();    contained.setName(name);    if (contained instanceof StandardHost) {      HostConfig config=new HostConfig();      contained.addLifecycleListener(config);    } else     if (contained instanceof StandardContext) {      ContextConfig config=new ContextConfig();      contained.addLifecycleListener(config);    }  } catch (  InstantiationException e) {    throw new MBeanException(e);  }catch (  IllegalAccessException e) {    throw new MBeanException(e);  }catch (  ClassNotFoundException e) {    throw new MBeanException(e);  }  boolean oldValue=true;  ContainerBase container=null;  try {    container=(ContainerBase)getManagedResource();    oldValue=container.getStartChildren();    container.setStartChildren(false);    container.addChild(contained);    contained.init();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }catch (  LifecycleException e) {    throw new MBeanException(e);  } finally {    if (container != null) {      container.setStartChildren(oldValue);    }  }}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(port).toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue06.class,args);}  }
class C{  public void displayGUI(){  JFrame appWindow=new JFrame("Directory Server Profile Data");  appWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);  Container contentPane=appWindow.getContentPane();  contentPane.setLayout(new BorderLayout());  contentPane.setFont(new Font("Monospaced",Font.PLAIN,12));  String blankHTML="<HTML><BODY><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR>" + "</BODY></HTML>";  frameInfoPane=new JEditorPane("text/html",blankHTML);  splitPane.setBottomComponent(new JScrollPane(frameInfoPane));  String label="Profile Data:  " + totalIntervals + " sample intervals "+ "captured over "+ totalDuration+ " milliseconds";  DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode(label,true);  ProfileStackFrame[] theRootFrames=getRootFrames();  if (theRootFrames.length == 0) {    System.err.println("ERROR:  No data available for viewing.");    return;  }  for (  ProfileStackFrame frame : getRootFrames()) {    boolean hasChildren=frame.hasSubFrames();    DefaultMutableTreeNode frameNode=new DefaultMutableTreeNode(frame,hasChildren);    recurseTreeNodes(frame,frameNode);    rootNode.add(frameNode);  }  profileTree=new JTree(new DefaultTreeModel(rootNode,true));  profileTree.setFont(new Font("Monospaced",Font.PLAIN,12));  DefaultTreeSelectionModel selectionModel=new DefaultTreeSelectionModel();  selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);  profileTree.setSelectionModel(selectionModel);  profileTree.addTreeSelectionListener(this);  profileTree.setSelectionPath(new TreePath(rootNode.getFirstChild()));  valueChanged(null);  splitPane.setTopComponent(new JScrollPane(profileTree));  splitPane.setResizeWeight(0.5);  splitPane.setOneTouchExpandable(true);  contentPane.add(splitPane,BorderLayout.CENTER);  appWindow.pack();  appWindow.setVisible(true);}  }
class C{  private static int analyze(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  int stepCount=0;  int analysisResult=0x00000000;  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    stepCount++;    boolean predAnalysis=analyzePredicate(compiler,stepOpCodePos,stepType);    if (predAnalysis)     analysisResult|=BIT_PREDICATE;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:      analysisResult|=BIT_FILTER;    break;case OpCodes.FROM_ROOT:  analysisResult|=BIT_ROOT;break;case OpCodes.FROM_ANCESTORS:analysisResult|=BIT_ANCESTOR;break;case OpCodes.FROM_ANCESTORS_OR_SELF:analysisResult|=BIT_ANCESTOR_OR_SELF;break;case OpCodes.FROM_ATTRIBUTES:analysisResult|=BIT_ATTRIBUTE;break;case OpCodes.FROM_NAMESPACE:analysisResult|=BIT_NAMESPACE;break;case OpCodes.FROM_CHILDREN:analysisResult|=BIT_CHILD;break;case OpCodes.FROM_DESCENDANTS:analysisResult|=BIT_DESCENDANT;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:if (2 == stepCount && BIT_ROOT == analysisResult) {analysisResult|=BIT_ANY_DESCENDANT_FROM_ROOT;}analysisResult|=BIT_DESCENDANT_OR_SELF;break;case OpCodes.FROM_FOLLOWING:analysisResult|=BIT_FOLLOWING;break;case OpCodes.FROM_FOLLOWING_SIBLINGS:analysisResult|=BIT_FOLLOWING_SIBLING;break;case OpCodes.FROM_PRECEDING:analysisResult|=BIT_PRECEDING;break;case OpCodes.FROM_PRECEDING_SIBLINGS:analysisResult|=BIT_PRECEDING_SIBLING;break;case OpCodes.FROM_PARENT:analysisResult|=BIT_PARENT;break;case OpCodes.FROM_SELF:analysisResult|=BIT_SELF;break;case OpCodes.MATCH_ATTRIBUTE:analysisResult|=(BIT_MATCH_PATTERN | BIT_ATTRIBUTE);break;case OpCodes.MATCH_ANY_ANCESTOR:analysisResult|=(BIT_MATCH_PATTERN | BIT_ANCESTOR);break;case OpCodes.MATCH_IMMEDIATE_ANCESTOR:analysisResult|=(BIT_MATCH_PATTERN | BIT_PARENT);break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (OpCodes.NODETYPE_NODE == compiler.getOp(stepOpCodePos + 3)) {analysisResult|=BIT_NODETEST_ANY;}stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);if (stepOpCodePos < 0) break;}analysisResult|=(stepCount & BITS_COUNT);return analysisResult;}  }
class C{  public boolean isDefined(Object key){  if (key instanceof StyleConstants) {    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);    if (cssKey != null) {      key=cssKey;    }  }  return super.isDefined(key);}  }
class C{  public PlaPointFloat add(PlaPointFloat p_other){  return new PlaPointFloat(v_x + p_other.v_x,v_y + p_other.v_y);}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_unwrap_ByteBuffer$ByteBuffer_04(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer[] bbd={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  SSLEngine sse=getEngine(host,port);  try {    sse.unwrap(bbs,bbd);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  public void removeLayoutComponent(Component c){  if (c == viewport) {    viewport=null;  } else   if (c == vsb) {    vsb=null;  } else   if (c == hsb) {    hsb=null;  } else   if (c == rowHead) {    rowHead=null;  } else   if (c == colHead) {    colHead=null;  } else   if (c == lowerLeft) {    lowerLeft=null;  } else   if (c == lowerRight) {    lowerRight=null;  } else   if (c == upperLeft) {    upperLeft=null;  } else   if (c == upperRight) {    upperRight=null;  }}  }
class C{  public void dismiss(){  unregisterObserver();  if (mPopupWindow != null) {    mPopupWindow.dismiss();  }}  }
class C{  public static MappedMember findFieldInParent(MappedClass owner,String name,String desc,boolean originalNames){  for (  MappedClass interfaceClass : owner.getInterfaces()) {    MappedMember mm=findFieldInParentInclusive(interfaceClass,name,desc,originalNames);    if (mm != null) {      return mm;    }  }  if (owner.getParent() != null) {    MappedMember mm=findFieldInParentInclusive(owner.getParent(),name,desc,originalNames);    if (mm != null) {      return mm;    }  }  return null;}  }
class C{  public static long highestOneBit(long v){  v|=(v >> 1);  v|=(v >> 2);  v|=(v >> 4);  v|=(v >> 8);  v|=(v >> 16);  v|=(v >> 32);  return v - (v >>> 1);}  }
class C{  protected View createChild(String name){  View view=null;  if (name.equals(SEC_MH_COMMON)) {    view=new CCSecondaryMasthead(this,name);  } else   if (name.equals(PGTITLE)) {    view=new CCPageTitle(this,ptModel,name);  } else   if (ptModel.isChildSupported(name)) {    view=ptModel.createChild(this,name);  } else   if (name.equals(PROPERTY_ATTRIBUTE)) {    view=new AMPropertySheet(this,propertySheetModel,name);  } else   if (propertySheetModel.isChildSupported(name)) {    view=propertySheetModel.createChild(this,name,getModel());  } else {    view=super.createChild(name);  }  return view;}  }
class C{  public static boolean isDefined(int codePoint){  return getType(codePoint) != Character.UNASSIGNED;}  }
class C{  public String group(int group){  if (first < 0)   throw new IllegalStateException("No match found");  if (group < 0 || group > groupCount())   throw new IndexOutOfBoundsException("No group " + group);  if ((groups[group * 2] == -1) || (groups[group * 2 + 1] == -1))   return null;  return getSubSequence(groups[group * 2],groups[group * 2 + 1]).toString();}  }
class C{  private CipherKeyEntry generateAndPublishKeyEntry(final String transformation,final int keyLengthBits) throws CryptoManagerException {  CipherKeyEntry keyEntry=generateKeyEntry(transformation,keyLengthBits);  publishKeyEntry(keyEntry);  cipherKeyEntryCache.put(keyEntry.getKeyID(),keyEntry);  return keyEntry;}  }
class C{  @Override public FilterDef findFilterDef(String filterName){synchronized (filterDefs) {    return (filterDefs.get(filterName));  }}  }
class C{  public static int mainCompare(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  LDAPConnectionOptions connectionOptions=new LDAPConnectionOptions();  LDAPCompareOptions compareOptions=new LDAPCompareOptions();  LDAPConnection connection=null;  final BooleanArgument continueOnError;  final BooleanArgument noop;  final BooleanArgument saslExternal;  final BooleanArgument showUsage;  final BooleanArgument useCompareResultCode;  final BooleanArgument startTLS;  final BooleanArgument trustAll;  final BooleanArgument useSSL;  final BooleanArgument verbose;  final FileBasedArgument bindPasswordFile;  final FileBasedArgument keyStorePasswordFile;  final FileBasedArgument trustStorePasswordFile;  final IntegerArgument port;  final IntegerArgument version;  final StringArgument assertionFilter;  final StringArgument bindDN;  final StringArgument bindPassword;  final StringArgument certNickname;  final StringArgument controlStr;  final StringArgument encodingStr;  final StringArgument filename;  final StringArgument hostName;  final StringArgument keyStorePath;  final StringArgument keyStorePassword;  final StringArgument saslOptions;  final StringArgument trustStorePath;  final StringArgument trustStorePassword;  final IntegerArgument connectTimeout;  final StringArgument propertiesFileArgument;  final BooleanArgument noPropertiesFileArgument;  BooleanArgument scriptFriendlyArgument=null;  final List<String> dnStrings=new ArrayList<>();  final String attributeType;  final byte[] attributeVal;  Reader rdr=null;  LocalizableMessage toolDescription=INFO_LDAPCOMPARE_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false,true,1,0," \'attribute:value\' \"DN\" ...");  argParser.setShortToolDescription(REF_SHORT_DESC_LDAPCOMPARE.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  try {    scriptFriendlyArgument=BooleanArgument.builder("script-friendly").shortIdentifier('s').description(INFO_DESCRIPTION_SCRIPT_FRIENDLY.get()).buildAndAddToParser(argParser);    propertiesFileArgument=StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    argParser.setFilePropertiesArgument(propertiesFileArgument);    noPropertiesFileArgument=BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildAndAddToParser(argParser);    argParser.setNoPropertiesFileArgument(noPropertiesFileArgument);    hostName=StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(INFO_DESCRIPTION_HOST.get()).defaultValue("localhost").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildAndAddToParser(argParser);    port=IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(INFO_DESCRIPTION_PORT.get()).range(1,65535).defaultValue(389).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    useSSL=BooleanArgument.builder(OPTION_LONG_USE_SSL).shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_DESCRIPTION_USE_SSL.get()).buildAndAddToParser(argParser);    startTLS=BooleanArgument.builder(OPTION_LONG_START_TLS).shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_DESCRIPTION_START_TLS.get()).buildAndAddToParser(argParser);    bindDN=StringArgument.builder(OPTION_LONG_BINDDN).shortIdentifier(OPTION_SHORT_BINDDN).description(INFO_DESCRIPTION_BINDDN.get()).valuePlaceholder(INFO_BINDDN_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPassword=StringArgument.builder(OPTION_LONG_BINDPWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_DESCRIPTION_BINDPASSWORD.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    bindPasswordFile=FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_DESCRIPTION_BINDPASSWORDFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    filename=StringArgument.builder(OPTION_LONG_FILENAME).shortIdentifier(OPTION_SHORT_FILENAME).description(INFO_COMPARE_DESCRIPTION_FILENAME.get()).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    saslExternal=BooleanArgument.builder("useSASLExternal").shortIdentifier('r').description(INFO_DESCRIPTION_USE_SASL_EXTERNAL.get()).buildAndAddToParser(argParser);    saslOptions=StringArgument.builder(OPTION_LONG_SASLOPTION).shortIdentifier(OPTION_SHORT_SASLOPTION).description(INFO_DESCRIPTION_SASL_PROPERTIES.get()).multiValued().valuePlaceholder(INFO_SASL_OPTION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustAll=trustAllArgument();    argParser.addArgument(trustAll);    keyStorePath=StringArgument.builder(OPTION_LONG_KEYSTOREPATH).shortIdentifier(OPTION_SHORT_KEYSTOREPATH).description(INFO_DESCRIPTION_KEYSTOREPATH.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePassword=StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_DESCRIPTION_KEYSTOREPASSWORD.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    keyStorePasswordFile=FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_DESCRIPTION_KEYSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    certNickname=StringArgument.builder("certNickname").shortIdentifier('N').description(INFO_DESCRIPTION_CERT_NICKNAME.get()).valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePath=StringArgument.builder(OPTION_LONG_TRUSTSTOREPATH).shortIdentifier(OPTION_SHORT_TRUSTSTOREPATH).description(INFO_DESCRIPTION_TRUSTSTOREPATH.get()).valuePlaceholder(INFO_TRUSTSTOREPATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePassword=StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildAndAddToParser(argParser);    trustStorePasswordFile=FileBasedArgument.builder(OPTION_LONG_TRUSTSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD_FILE).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD_FILE.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    assertionFilter=StringArgument.builder(OPTION_LONG_ASSERTION_FILE).description(INFO_DESCRIPTION_ASSERTION_FILTER.get()).valuePlaceholder(INFO_ASSERTION_FILTER_PLACEHOLDER.get()).buildAndAddToParser(argParser);    controlStr=StringArgument.builder("control").shortIdentifier('J').description(INFO_DESCRIPTION_CONTROLS.get()).multiValued().valuePlaceholder(INFO_LDAP_CONTROL_PLACEHOLDER.get()).buildAndAddToParser(argParser);    version=IntegerArgument.builder(OPTION_LONG_PROTOCOL_VERSION).shortIdentifier(OPTION_SHORT_PROTOCOL_VERSION).description(INFO_DESCRIPTION_VERSION.get()).defaultValue(3).valuePlaceholder(INFO_PROTOCOL_VERSION_PLACEHOLDER.get()).buildAndAddToParser(argParser);    connectTimeout=IntegerArgument.builder(OPTION_LONG_CONNECT_TIMEOUT).description(INFO_DESCRIPTION_CONNECTION_TIMEOUT.get()).lowerBound(0).defaultValue(CliConstants.DEFAULT_LDAP_CONNECT_TIMEOUT).valuePlaceholder(INFO_TIMEOUT_PLACEHOLDER.get()).buildAndAddToParser(argParser);    encodingStr=StringArgument.builder("encoding").shortIdentifier('i').description(INFO_DESCRIPTION_ENCODING.get()).valuePlaceholder(INFO_ENCODING_PLACEHOLDER.get()).buildAndAddToParser(argParser);    continueOnError=BooleanArgument.builder("continueOnError").shortIdentifier('c').description(INFO_DESCRIPTION_CONTINUE_ON_ERROR.get()).buildAndAddToParser(argParser);    noop=BooleanArgument.builder(OPTION_LONG_DRYRUN).shortIdentifier(OPTION_SHORT_DRYRUN).description(INFO_DESCRIPTION_NOOP.get()).buildAndAddToParser(argParser);    verbose=verboseArgument();    argParser.addArgument(verbose);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    useCompareResultCode=BooleanArgument.builder("useCompareResultCode").shortIdentifier('m').description(INFO_LDAPCOMPARE_DESCRIPTION_USE_COMPARE_RESULT.get()).buildAndAddToParser(argParser);    argParser.setUsageArgument(showUsage,out);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return SUCCESS;  }  if (bindPassword.isPresent() && bindPasswordFile.isPresent()) {    printWrappedText(err,conflictingArgsErrorMessage(bindPassword,bindPasswordFile));    return CLIENT_SIDE_PARAM_ERROR;  }  ArrayList<String> attrAndDNStrings=argParser.getTrailingArguments();  if (attrAndDNStrings.isEmpty()) {    printWrappedText(err,ERR_LDAPCOMPARE_NO_ATTR.get());    return CLIENT_SIDE_PARAM_ERROR;  }  String attributeString=attrAndDNStrings.remove(0);  dnStrings.addAll(attrAndDNStrings);  if (dnStrings.isEmpty() && !filename.isPresent()) {    printWrappedText(err,ERR_LDAPCOMPARE_NO_DNS.get());    return CLIENT_SIDE_PARAM_ERROR;  }  if (!dnStrings.isEmpty() && filename.isPresent()) {    printWrappedText(err,ERR_LDAPCOMPARE_FILENAME_AND_DNS.get());    return CLIENT_SIDE_PARAM_ERROR;  }  int idx=attributeString.indexOf(":");  if (idx == -1) {    printWrappedText(err,ERR_LDAPCOMPARE_INVALID_ATTR_STRING.get(attributeString));    return CLIENT_SIDE_PARAM_ERROR;  }  attributeType=attributeString.substring(0,idx);  String remainder=attributeString.substring(idx + 1,attributeString.length());  if (remainder.length() > 0) {    char nextChar=remainder.charAt(0);    if (nextChar == ':') {      String base64=remainder.substring(1,remainder.length());      try {        attributeVal=Base64.decode(base64);      } catch (      ParseException e) {        printWrappedText(err,INFO_COMPARE_CANNOT_BASE64_DECODE_ASSERTION_VALUE.get());        printWrappedText(err,e.getLocalizedMessage());        return CLIENT_SIDE_PARAM_ERROR;      }    } else     if (nextChar == '<') {      try {        String filePath=remainder.substring(1,remainder.length());        attributeVal=LDAPToolUtils.readBytesFromFile(filePath,err);      } catch (      Exception e) {        printWrappedText(err,INFO_COMPARE_CANNOT_READ_ASSERTION_VALUE_FROM_FILE.get(e));        return CLIENT_SIDE_PARAM_ERROR;      }    } else {      attributeVal=remainder.getBytes();    }  } else {    attributeVal=remainder.getBytes();  }  String hostNameValue=hostName.getValue();  int portNumber=389;  try {    portNumber=port.getIntValue();  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ae.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  try {    int versionNumber=version.getIntValue();    if (versionNumber != 2 && versionNumber != 3) {      printWrappedText(err,ERR_DESCRIPTION_INVALID_VERSION.get(versionNumber));      return CLIENT_SIDE_PARAM_ERROR;    }    connectionOptions.setVersionNumber(versionNumber);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ae.getMessageObject());    return CLIENT_SIDE_PARAM_ERROR;  }  String bindDNValue=bindDN.getValue();  String fileNameValue=filename.getValue();  String bindPasswordValue;  try {    bindPasswordValue=getPasswordValue(bindPassword,bindPasswordFile,bindDNValue,out,err);  } catch (  ClientException ex) {    printWrappedText(err,ex.getMessage());    return CLIENT_SIDE_PARAM_ERROR;  }  String keyStorePathValue=keyStorePath.getValue();  String trustStorePathValue=trustStorePath.getValue();  String keyStorePasswordValue=null;  if (keyStorePassword.isPresent()) {    keyStorePasswordValue=keyStorePassword.getValue();  } else   if (keyStorePasswordFile.isPresent()) {    keyStorePasswordValue=keyStorePasswordFile.getValue();  }  String trustStorePasswordValue=null;  if (trustStorePassword.isPresent()) {    trustStorePasswordValue=trustStorePassword.getValue();  } else   if (trustStorePasswordFile.isPresent()) {    trustStorePasswordValue=trustStorePasswordFile.getValue();  }  compareOptions.setShowOperations(noop.isPresent());  compareOptions.setVerbose(verbose.isPresent());  compareOptions.setContinueOnError(continueOnError.isPresent());  compareOptions.setEncoding(encodingStr.getValue());  if (controlStr.isPresent()) {    for (    String ctrlString : controlStr.getValues()) {      Control ctrl=LDAPToolUtils.getControl(ctrlString,err);      if (ctrl == null) {        printWrappedText(err,ERR_TOOL_INVALID_CONTROL_STRING.get(ctrlString));        return CLIENT_SIDE_PARAM_ERROR;      }      compareOptions.getControls().add(ctrl);    }  }  if (assertionFilter.isPresent()) {    String filterString=assertionFilter.getValue();    LDAPFilter filter;    try {      filter=LDAPFilter.decode(filterString);      Control assertionControl=new LDAPAssertionRequestControl(true,filter);      compareOptions.getControls().add(assertionControl);    } catch (    LDAPException le) {      printWrappedText(err,ERR_LDAP_ASSERTION_INVALID_FILTER.get(le.getMessage()));      return CLIENT_SIDE_PARAM_ERROR;    }  }  connectionOptions.setSASLExternal(saslExternal.isPresent());  if (saslOptions.isPresent()) {    for (    String saslOption : saslOptions.getValues()) {      boolean val;      if (saslOption.startsWith("mech=")) {        val=connectionOptions.setSASLMechanism(saslOption);      } else {        val=connectionOptions.addSASLProperty(saslOption);      }      if (!val) {        return CLIENT_SIDE_PARAM_ERROR;      }    }  }  connectionOptions.setUseSSL(useSSL.isPresent());  connectionOptions.setStartTLS(startTLS.isPresent());  if (connectionOptions.useSASLExternal()) {    if (!connectionOptions.useSSL() && !connectionOptions.useStartTLS()) {      printWrappedText(err,ERR_TOOL_SASLEXTERNAL_NEEDS_SSL_OR_TLS.get());      return CLIENT_SIDE_PARAM_ERROR;    }    if (keyStorePathValue == null) {      printWrappedText(err,ERR_TOOL_SASLEXTERNAL_NEEDS_KEYSTORE.get());      return CLIENT_SIDE_PARAM_ERROR;    }  }  LDAPCompare ldapCompare=null;  try {    if (initializeServer) {      DirectoryServer.bootstrapClient();    }    SSLConnectionFactory sslConnectionFactory=null;    if (connectionOptions.useSSL() || connectionOptions.useStartTLS()) {      String clientAlias;      if (certNickname.isPresent()) {        clientAlias=certNickname.getValue();      } else {        clientAlias=null;      }      sslConnectionFactory=new SSLConnectionFactory();      sslConnectionFactory.init(trustAll.isPresent(),keyStorePathValue,keyStorePasswordValue,clientAlias,trustStorePathValue,trustStorePasswordValue);      connectionOptions.setSSLConnectionFactory(sslConnectionFactory);    }    AtomicInteger nextMessageID=new AtomicInteger(1);    connection=new LDAPConnection(hostNameValue,portNumber,connectionOptions,out,err);    int timeout=connectTimeout.getIntValue();    connection.connectToHost(bindDNValue,bindPasswordValue,nextMessageID,timeout);    ldapCompare=new LDAPCompare(nextMessageID,out,err);    ldapCompare.isScriptFriendly=scriptFriendlyArgument.isPresent();    if (fileNameValue == null && dnStrings.isEmpty()) {      rdr=new InputStreamReader(System.in);    } else     if (fileNameValue != null) {      try {        rdr=new FileReader(fileNameValue);      } catch (      Throwable t) {        String details=t.getMessage();        if (details == null) {          details=t.toString();        }        printWrappedText(err,ERR_LDAPCOMPARE_ERROR_READING_FILE.get(fileNameValue,details));        return CLIENT_SIDE_PARAM_ERROR;      }    }    int resultCode;    if (rdr != null) {      resultCode=ldapCompare.readAndExecute(connection,attributeType,attributeVal,rdr,compareOptions);    } else {      resultCode=ldapCompare.readAndExecute(connection,attributeType,attributeVal,dnStrings,compareOptions);    }    if (useCompareResultCode.isPresent()) {      return resultCode;    }    return SUCCESS;  } catch (  LDAPException le) {    LDAPToolUtils.printErrorMessage(err,le.getMessageObject(),le.getResultCode(),le.getMessageObject(),le.getMatchedDN());    return le.getResultCode();  }catch (  LDAPConnectionException lce) {    LDAPToolUtils.printErrorMessage(err,lce.getMessageObject(),lce.getResultCode(),lce.getMessageObject(),lce.getMatchedDN());    return lce.getResultCode();  }catch (  Exception e) {    printWrappedText(err,e.getMessage());    return OPERATIONS_ERROR;  } finally {    if (connection != null) {      if (ldapCompare != null) {        connection.close(ldapCompare.nextMessageID);      } else {        connection.close(null);      }    }  }}  }
class C{  public String toStringImpl(){  return str;}  }
class C{  private boolean isMemberOfGroup(String groupName,DN userDN,String userRDN,SSOToken token) throws SSOException, PolicyException {  if (debug.messageEnabled()) {    debug.message("LDAPGroups.isMemberOfGroup():" + " entering with groupName = " + groupName + ",userDN = "+ userDN);  }  if ((groupName == null) || (groupName.length() == 0) || (userDN == null)) {    return false;  }  String tokenID=token.getTokenID().toString();  boolean groupMatch=false;  SearchResultEntry entry;  try (Connection conn=connPool.getConnection()){    entry=conn.searchSingleEntry(LDAPRequests.newSingleEntrySearchRequest(groupName));  } catch (  Exception e) {    debug.warning("LDAPGroups: invalid group name {} specified in the policy definition.",groupName);    return false;  }  debug.message("LDAPGroups.isMemberOfGroup(): get {} group attribute",STATIC_GROUP_MEMBER_ATTR);  Attribute attribute=entry.getAttribute(STATIC_GROUP_MEMBER_ATTR);  if (attribute != null) {    for (    ByteString memberDNStr : attribute) {      debug.message("LDAPGroups.isMemberOfGroup(): memberDNStr = ",memberDNStr);      DN memberDN=DN.valueOf(memberDNStr.toString());      if (userDN.equals(memberDN)) {        groupMatch=true;        break;      }    }  }  if (!groupMatch) {    debug.message("LDAPGroups.isMemberOfGroup(): get {} group attribute",STATIC_GROUP_MEMBER_ALT_ATTR);    attribute=entry.getAttribute(STATIC_GROUP_MEMBER_ALT_ATTR);    if (attribute != null) {      for (      ByteString memberDNStr : attribute) {        debug.message("LDAPGroups.isMemberOfGroup(): memberDNStr = ",memberDNStr);        DN memberDN=DN.valueOf(memberDNStr.toString());        if (userDN.equals(memberDN)) {          groupMatch=true;          break;        }      }    }  }  if (!groupMatch) {    attribute=entry.getAttribute(DYNAMIC_GROUP_MEMBER_URL);    if (attribute != null) {      for (      ByteString memberUrl : attribute) {        try {          LDAPUrl ldapUrl=LDAPUrl.valueOf(memberUrl.toString());          Set members=findDynamicGroupMembersByUrl(ldapUrl,userRDN);          Iterator iter=members.iterator();          while (iter.hasNext()) {            String memberDNStr=(String)iter.next();            DN memberDN=DN.valueOf(memberDNStr);            if (userDN.equals(memberDN)) {              groupMatch=true;              break;            }          }        } catch (        LocalizedIllegalArgumentException e) {          throw new PolicyException(e);        }      }    }  }  debug.message("LDAPGroups.isMemberOfGroup():adding entry {} {} {} {} in subject evaluation cache.",tokenID,ldapServer,groupName,groupMatch);  SubjectEvaluationCache.addEntry(tokenID,ldapServer,groupName,groupMatch);  return groupMatch;}  }
class C{  protected void pushMessage(byte[] data,boolean reconnect,boolean waitForAck) throws IOException {  keepalive();  if (reconnect)   closeSocket();  if (!isConnected())   openSocket();  soOut.write(data);  soOut.flush();  if (waitForAck)   waitForAck();  SenderState.getSenderState(getDestination()).setReady();}  }
class C{  public void createPluginsData(final Element rootElement) throws ConnectorException {  Element element=creator.getDocument().createElement("PluginsInfo");  rootElement.appendChild(element);  InitCommandEventArgs args=new InitCommandEventArgs();  args.setXml(this.creator);  args.setRootElement(rootElement);  if (configuration.getEvents() != null) {    configuration.getEvents().run(EventTypes.InitCommand,args,configuration);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImported;  Attr attr;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  String namespaceURI;  doc=(Document)load("staffNS",true);  docImported=(Document)load("staff",true);  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test","a_:b0");  importedAttr=docImported.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeValue=importedAttr.getNodeValue();  nodeType=(int)importedAttr.getNodeType();  namespaceURI=importedAttr.getNamespaceURI();  assertEquals("documentimportnode05_nodeName","a_:b0",nodeName);  assertEquals("documentimportnode05_nodeType",2,nodeType);  assertEquals("documentimportnode05_nodeValue","",nodeValue);  assertEquals("documentimportnode05_namespaceURI","http://www.w3.org/DOM/Test",namespaceURI);}  }
class C{  protected void reset(AuthSubject subject) throws LoginException {  if (authDebug.messageEnabled()) {    authDebug.message("AuthContext::reset(" + organizationName + ", "+ ((subject == null) ? "null" : subject.toString())+ ")");  }  loginStatus=AUTH_NOT_STARTED;  informationRequired=null;  submittedInformation=null;  loginException=null;  loginThread=new AuthLoginThread(this);  authDebug.message("AuthLoginThread isAlive = " + loginThread.isAlive());  String contextName=null;  if (applicationName == null) {    contextName=organizationName;  } else {    contextName=organizationName + "%" + applicationName;  }  authDebug.message("AuthContext::reset:using contextName=" + contextName);  if (subject == null) {    loginContext=new LoginContext(contextName,loginThread);  } else {    loginContext=new LoginContext(contextName,subject,loginThread);  }  if (authDebug.messageEnabled()) {    authDebug.message("Successfully reset AuthContext for organization: " + organizationName + ((subject == null) ? " with no subject name " : " with subjects: " + subject));  }}  }
class C{  public RealmTestHelper(){  init();  MockitoAnnotations.initMocks(this);}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  public static boolean callsSuper(MethodNode mn){  for (  AbstractInsnNode ain : mn.instructions.toArray()) {    if (ain.getOpcode() == Opcodes.INVOKESPECIAL) {      MethodInsnNode min=(MethodInsnNode)ain;      if (min.name.equals(mn.name)) {        return true;      }    }  }  return false;}  }
class C{  ADSContextException(ErrorType error,LocalizableMessage msg,Throwable cause){  super(msg,cause);  this.error=error;  toString="ADSContextException: error type " + error + "."+ (cause != null ? "  Root cause: " + cause : "");}  }
class C{  public void processMouseEvent(MouseEvent event,MenuElement path[],MenuSelectionManager manager){}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  int blockLen=(lineLen * 3) / 4;  if (blockLen <= 0)   throw new IllegalArgumentException();  int lines=(iLen + blockLen - 1) / blockLen;  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();  StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  final boolean isOwnedBy(AbstractQueuedLongSynchronizer sync){  return sync == AbstractQueuedLongSynchronizer.this;}  }
class C{  public void auditDelete(){  if (shouldAudit(ConfigOperation.DELETE)) {    JsonValue afterState=json(object());    AMConfigAuditEventBuilder builder=getBaseBuilder().operation(ConfigOperation.DELETE).after(afterState);    recordBeforeStateIfNotNull(builder,beforeState);    auditEventPublisher.tryPublish(CONFIG_TOPIC,builder.toEvent());  }}  }
class C{  public void clearParameters() throws SQLException {  params.clear();}  }
class C{  public void appendNodes(NodeVector nodes){  int nNodes=nodes.size();  if (null == m_map) {    m_mapSize=nNodes + m_blocksize;    m_map=new int[m_mapSize];  } else   if ((m_firstFree + nNodes) >= m_mapSize) {    m_mapSize+=(nNodes + m_blocksize);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + nNodes);    m_map=newMap;  }  System.arraycopy(nodes.m_map,0,m_map,m_firstFree,nNodes);  m_firstFree+=nNodes;}  }
class C{  public String paramString(){  String typeStr;switch (id) {case TEXT_VALUE_CHANGED:    typeStr="TEXT_VALUE_CHANGED";  break;default :typeStr="unknown type";}return typeStr;}  }
class C{  public boolean isLocal(){  return isLocal;}  }
class C{  private void modifyEntry(Entry srcEntry,Entry dstEntry){  List<Attribute> srcList=srcEntry.getAllAttributes(attrCert);  List<Attribute> dstList=dstEntry.getAllAttributes(attrCert);  if (!srcList.equals(dstList)) {    DN dstDN=dstEntry.getName();    deleteEntry(dstDN);    addEntry(srcEntry,dstDN);  }}  }
class C{  public String toString(){  return ("Operation: " + op);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AddressCardType createAddressCardType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AddressCardTypeImpl();}  }
class C{  public void onLogout(HttpServletRequest req,HttpServletResponse res,SSOToken ssoToken) throws AuthenticationException {  debug.message("FirstTimeLogin.onLogout called");}  }
class C{  @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  @Deprecated public Time(int hour,int minute,int second){  super(70,0,1,hour,minute,second);}  }
class C{  public static boolean isDigit(final char c){  final ASCIICharProp cp=ASCIICharProp.valueOf(c);  return cp != null ? cp.isDigit() : false;}  }
class C{  public SubjectLocality createSubjectLocality(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_LOCALITY,xml);  if (obj == null) {    return new SubjectLocalityImpl(xml);  } else {    return (SubjectLocality)obj;  }}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("LDAPPreReadRequestControl(criticality=");  buffer.append(isCritical());  buffer.append(",attrs=\"");  if (!rawAttributes.isEmpty()) {    Iterator<String> iterator=rawAttributes.iterator();    buffer.append(iterator.next());    while (iterator.hasNext()) {      buffer.append(",");      buffer.append(iterator.next());    }  }  buffer.append("\")");}  }
class C{  static int compareTo(final byte[] b1,final int offset1,final int length1,final byte[] b2,final int offset2,final int length2){  int count=Math.min(length1,length2);  int i=offset1;  int j=offset2;  while (count-- != 0) {    final int firstByte=0xFF & b1[i++];    final int secondByte=0xFF & b2[j++];    if (firstByte != secondByte) {      return firstByte - secondByte;    }  }  return length1 - length2;}  }
class C{  protected void parseClassNames(String classNamesString,List<String> classNamesList){  classNamesList.clear();  if (classNamesString == null)   return;  ClassLoader loader=this.getClass().getClassLoader();  if (isUseContextClassLoader())   loader=Thread.currentThread().getContextClassLoader();  String[] classNames=classNamesString.split("[ ]*,[ ]*");  for (int i=0; i < classNames.length; i++) {    if (classNames[i].length() == 0)     continue;    try {      Class<?> principalClass=Class.forName(classNames[i],false,loader);      if (Principal.class.isAssignableFrom(principalClass)) {        classNamesList.add(classNames[i]);      } else {        log.error("Class " + classNames[i] + " is not implementing "+ "java.security.Principal! Class not added.");      }    } catch (    ClassNotFoundException e) {      log.error("Class " + classNames[i] + " not found! Class not added.");    }  }}  }
class C{  public NotificationPropertyNotificationMessageTemplateElement(AccountStatusNotificationProperty property){  this.property=property;}  }
class C{  private int resolveGap(int i){  return i > mGapStart ? i - mGapLength : i;}  }
class C{  public String toXMLString(){  try {    StringBuffer xmlString=new StringBuffer();    String[] authIdentifierArray=new String[1];    authIdentifierArray[0]=authIdentifier;    if (debug.messageEnabled()) {      debug.message("New authIdentifier : " + authIdentifier);      debug.message("Returning authIdentifier : " + authIdentifierArray[0]);    }    xmlString.append(MessageFormat.format(AuthXMLTags.XML_RESPONSE_PREFIX,(Object[])authIdentifierArray));    if (debug.messageEnabled()) {      debug.message("Request type is : " + requestType);    }switch (requestType) {case AuthXMLRequest.NewAuthContext:      if (loginStatus == AuthContext.Status.FAILED || isException) {        xmlString.append(createXMLErrorString());        AuthUtils.destroySession(authContext);      } else       if (loginStatus == AuthContext.Status.SUCCESS) {        xmlString.append(createLoginStatusString());        debug.message("destroying old session");        if (oldSession != null) {          AuthD authD=AuthD.getAuth();          authD.destroySession(oldSession.getID());        }      } else {        xmlString.append(createLoginStatusString());      }    break;case AuthXMLRequest.Login:case AuthXMLRequest.LoginIndex:case AuthXMLRequest.LoginSubject:case AuthXMLRequest.SubmitRequirements:  if (validSessionNoUpgrade) {    debug.message("Session is Valid and does not need " + "update. Returning success.");    loginStatus=AuthContext.Status.SUCCESS;    xmlString.append(createLoginStatusString());    break;  }if (reqdCallbacks != null) {  String xmlCallback=AuthXMLUtils.getXMLForCallbacks(reqdCallbacks);  xmlString.append(AuthXMLTags.GET_REQS_BEGIN);  xmlString.append(xmlCallback);  xmlString.append(AuthXMLTags.GET_REQS_END);  addRemoteRequestResponse(xmlString);} else {  if ((loginStatus == AuthContext.Status.FAILED) || isException) {    xmlString.append(createLoginStatusString());    xmlString.append(createXMLErrorString());    AuthUtils.destroySession(authContext);  } else   if (loginStatus == AuthContext.Status.SUCCESS) {    if (oldSession != null) {      AuthD authD=AuthD.getAuth();      if (authContext.getLoginState().getForceFlag()) {        authD.destroySession(authContext.getLoginState().getSid());        authContext.getLoginState().setSession(oldSession);        authContext.getLoginState().setForceAuth(false);      } else {        if (SystemProperties.getAsBoolean(Constants.DESTROY_SESSION_AFTER_UPGRADE)) {          if (debug.messageEnabled()) {            debug.message("AuthXMLResponse.toXMLString : " + "destroying old session");          }          authD.destroySession(oldSession.getID());        }      }    }    xmlString.append(createLoginStatusString());  }}break;case AuthXMLRequest.QueryInformation:if (isException) {xmlString.append(createXMLErrorString());} else {xmlString.append(getXMLForQueryInfo());}break;case AuthXMLRequest.Logout:case AuthXMLRequest.Abort:if (isException) {xmlString.append(createXMLErrorString());} else {xmlString.append(createLoginStatusString());}break;}xmlString.append(AuthXMLTags.XML_RESPONSE_SUFFIX);return xmlString.toString();} catch (Exception e) {debug.message("Exceiton in toXMLString : ",e);return null;}}  }
class C{  @Nullable public Bitmap crop(){  if (bitmap == null) {    return null;  }  final Bitmap src=bitmap;  final Bitmap.Config srcConfig=src.getConfig();  final Bitmap.Config config=srcConfig == null ? Bitmap.Config.ARGB_8888 : srcConfig;  final int viewportHeight=touchManager.getViewportHeight();  final int viewportWidth=touchManager.getViewportWidth();  final Bitmap dst=Bitmap.createBitmap(viewportWidth,viewportHeight,config);  Canvas canvas=new Canvas(dst);  final int left=(getRight() - viewportWidth) / 2;  final int top=(getBottom() - viewportHeight) / 2;  canvas.translate(-left,-top);  drawBitmap(canvas);  return dst;}  }
class C{  public int hashCode(){  if (this.affineX != null) {    return affineX.hashCode() * 31 + affineY.hashCode();  }  return 11;}  }
class C{  private void handleRequestControls() throws DirectoryException {  LocalBackendWorkflowElement.removeAllDisallowedControls(bindDN,this);  for (  Control c : getRequestControls()) {    final String oid=c.getOID();    if (OID_AUTHZID_REQUEST.equals(oid)) {      returnAuthzID=true;    } else     if (OID_PASSWORD_POLICY_CONTROL.equals(oid)) {      pwPolicyControlRequested=true;    } else     if (c.isCritical()) {      throw new DirectoryException(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_BIND_UNSUPPORTED_CRITICAL_CONTROL.get(oid));    }  }}  }
class C{  public AciHandler(){}  }
class C{  public StatusDetailImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);    makeImmutable();  } else {    XACMLSDKUtils.debug.error("StatusDetailImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  public FSAuthContextResult decideAuthnContext(List authContextRef,String presentAuthContext,String authType){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAuthnDecisionHandler::" + "decideAuthnContext called with list. " + authContextRef + " and authComparisonType "+ authType);  }  if (authType == null) {    authType=IFSConstants.MINIMUM;  }  FSAuthContextResult returnObj=new FSAuthContextResult();  if (authContextRef != null) {    if (authType.equals(IFSConstants.MINIMUM)) {      compAuthType=1;    } else     if (authType.equals(IFSConstants.BETTER)) {      compAuthType=2;    } else     if (authType.equals(IFSConstants.MAXIMUM)) {      compAuthType=3;    }    Iterator authIter=authContextRef.iterator();    while (authIter.hasNext()) {      String authCntxt=(String)authIter.next();      returnObj=decideAuthnContext(authCntxt,presentAuthContext);      if (returnObj != null) {        return returnObj;      }    }  }  return returnObj;}  }
class C{  public static Optional<CommandLineInterface> parse(final String... args){  final OptionGroup operatingModes=new OptionGroup();  operatingModes.setRequired(true);  Stream.of(OperatingMode.values()).forEach(null);  final Collection<Option> ops=Stream.of(OperatingMode.values()).map(null).collect(null,null,null);  final OptionGroup authenticationModes=new OptionGroup();  authenticationModes.setRequired(true);  authenticationModes.addOption(CommandLineInterface.OPTION_USERNAME);  authenticationModes.addOption(CommandLineInterface.OPTION_KEYSTORE);  ops.add(CommandLineInterface.OPTION_PASSWORD);  ops.add(CommandLineInterface.OPTION_USE_TOKEN);  ops.add(CommandLineInterface.OPTION_FAULT_TOLERANT);  ops.add(CommandLineInterface.OPTION_CLOSED_SEASON);  ops.add(CommandLineInterface.OPTION_ZONK);  final Options options=new Options();  options.addOptionGroup(operatingModes);  options.addOptionGroup(authenticationModes);  ops.forEach(null);  final CommandLineParser parser=new DefaultParser();  try {    final CommandLine cli=parser.parse(options,args);    CommandLineInterface.logOptionValues(cli);    return Optional.of(new CommandLineInterface(options,cli));  } catch (  final ParseException ex) {    CommandLineInterface.printHelp(options,ex.getMessage(),true);    return Optional.empty();  }}  }
class C{  public JobMediaSheets(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  } else   if (o instanceof ByteSequence) {    final ByteSequence other=(ByteSequence)o;    return other.equals(buffer,0,length);  } else {    return false;  }}  }
class C{  private void delEntry(DN dn) throws Exception {  connection.processDelete(dn);  assertNull(getEntry(dn,1000,false));}  }
class C{  public ListIterator listIterator(){  return sdpFields.listIterator();}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2) private AutoInstallsLayout createWorkspaceLoaderFromAppRestriction(){  if (!Utilities.ATLEAST_JB_MR2) {    return null;  }  Context ctx=getContext();  UserManager um=(UserManager)ctx.getSystemService(Context.USER_SERVICE);  Bundle bundle=um.getApplicationRestrictions(ctx.getPackageName());  if (bundle == null) {    return null;  }  String packageName=bundle.getString(RESTRICTION_PACKAGE_NAME);  if (packageName != null) {    try {      Resources targetResources=ctx.getPackageManager().getResourcesForApplication(packageName);      return AutoInstallsLayout.get(ctx,packageName,targetResources,mOpenHelper.mAppWidgetHost,mOpenHelper);    } catch (    NameNotFoundException e) {      Log.e(TAG,"Target package for restricted profile not found",e);      return null;    }  }  return null;}  }
class C{  public void removeTreeSelectionListener(TreeSelectionListener tsl){  listenerList.remove(TreeSelectionListener.class,tsl);  if (listenerList.getListenerCount(TreeSelectionListener.class) == 0 && selectionRedirector != null) {    selectionModel.removeTreeSelectionListener(selectionRedirector);    selectionRedirector=null;  }}  }
class C{  private void heapify(){  Object[] array=queue;  int n=size;  int half=(n >>> 1) - 1;  Comparator<? super E> cmp=comparator;  if (cmp == null) {    for (int i=half; i >= 0; i--)     siftDownComparable(i,(E)array[i],array,n);  } else {    for (int i=half; i >= 0; i--)     siftDownUsingComparator(i,(E)array[i],array,n,cmp);  }}  }
class C{  public String toString(){  return "NamedStyle:" + getName() + " "+ attributes;}  }
class C{  public static String toCommaSeparatedFormat(Set set){  StringBuilder buff=new StringBuilder();  boolean firstEntry=true;  for (Iterator iter=set.iterator(); iter.hasNext(); ) {    if (!firstEntry) {      buff.append(", ");    } else {      firstEntry=false;    }    buff.append((String)iter.next());  }  return buff.toString();}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits,byte[] iv,int offset){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length - offset < 8) {    throw new IllegalArgumentException("iv.length - offset < 8");  }  this.effectiveKeyBits=effectiveKeyBits;  this.iv=new byte[8];  System.arraycopy(iv,offset,this.iv,0,8);}  }
class C{  public INITIALIZE(){  this("");}  }
class C{  private void addSortedStyle(SelectorMapping mapping,Vector<SelectorMapping> elements){  int size=elements.size();  if (size > 0) {    int specificity=mapping.getSpecificity();    for (int counter=0; counter < size; counter++) {      if (specificity >= elements.elementAt(counter).getSpecificity()) {        elements.insertElementAt(mapping,counter);        return;      }    }  }  elements.addElement(mapping);}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  flushPending();  try {    if (inTemporaryOutputState()) {      m_writer.write(ch,start,length);    } else {      writeNormalizedChars(ch,start,length,m_lineSepUse);    }    if (m_tracer != null)     super.fireCharEvent(ch,start,length);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public void configureArrowButton(){  if (arrowButton != null) {    arrowButton.setEnabled(comboBox.isEnabled());    arrowButton.setFocusable(comboBox.isFocusable());    arrowButton.setRequestFocusEnabled(false);    arrowButton.addMouseListener(popup.getMouseListener());    arrowButton.addMouseMotionListener(popup.getMouseMotionListener());    arrowButton.resetKeyboardActions();    arrowButton.putClientProperty("doNotCancelPopup",HIDE_POPUP_KEY);    arrowButton.setInheritsPopupMenu(true);  }}  }
class C{  public int read(char cbuf[],int offset,int length) throws IOException {  return sd.read(cbuf,offset,length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("hc_staff",true);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("class");  streetAttr.setNodeValue("Y&ent1;");  value=streetAttr.getValue();  assertEquals("value","Y&ent1;",value);  value=streetAttr.getNodeValue();  assertEquals("nodeValue","Y&ent1;",value);}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeStartSequence();  writer.writeInteger(targetPosition);  writer.writeInteger(contentCount);  writer.writeEnumerated(vlvResultCode);  if (contextID != null) {    writer.writeOctetString(contextID);  }  writer.writeEndSequence();  writer.writeEndSequence();}  }
class C{  public void _read(InputStream input){  value=input.read_octet();}  }
class C{  public NameIdentifier(String name,String nameQualifier) throws SAMLException {  if ((name == null) || (name.length() == 0)) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("NameIdentifier: null input specified");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (nameQualifier != null) {    _nameQualifier=nameQualifier;  }  _name=name;}  }
class C{  long cleanup(long now){  int inUseConnectionCount=0;  int idleConnectionCount=0;  RealConnection longestIdleConnection=null;  long longestIdleDurationNs=Long.MIN_VALUE;synchronized (this) {    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {      RealConnection connection=i.next();      if (pruneAndGetAllocationCount(connection,now) > 0) {        inUseConnectionCount++;        continue;      }      idleConnectionCount++;      long idleDurationNs=now - connection.idleAtNanos;      if (idleDurationNs > longestIdleDurationNs) {        longestIdleDurationNs=idleDurationNs;        longestIdleConnection=connection;      }    }    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {      connections.remove(longestIdleConnection);    } else     if (idleConnectionCount > 0) {      return keepAliveDurationNs - longestIdleDurationNs;    } else     if (inUseConnectionCount > 0) {      return keepAliveDurationNs;    } else {      return -1;    }  }  Util.closeQuietly(longestIdleConnection.getSocket());  return 0;}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue05.class,args);}  }
class C{  public int hashCode(){  return address.hashCode() + ((broadcast != null) ? broadcast.hashCode() : 0) + maskLength;}  }
class C{  public static AuthorizationIdentityRequestControl newControl(final boolean isCritical){  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  public static FSFederationTerminationNotification parseXML(String xml) throws FSMsgException {  Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);  if (doc == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFederationTerminationNotification.parseXML:Error " + "while parsing input xml string");    }    throw new FSMsgException("parseError",null);  }  Element root=doc.getDocumentElement();  return new FSFederationTerminationNotification(root);}  }
class C{  private void construct(String domain,Map<String,String> props) throws MalformedObjectNameException {  if (domain == null)   throw new NullPointerException("domain cannot be null");  if (props == null)   throw new NullPointerException("key property list cannot be null");  if (props.isEmpty())   throw new MalformedObjectNameException("key property list cannot be empty");  if (!isDomain(domain))   throw new MalformedObjectNameException("Invalid domain: " + domain);  final StringBuilder sb=new StringBuilder();  sb.append(domain).append(':');  _domain_length=domain.length();  int nb_props=props.size();  _kp_array=new Property[nb_props];  String[] keys=new String[nb_props];  final Map<String,Property> keys_map=new HashMap<String,Property>();  Property prop;  int key_index;  int i=0;  for (  Map.Entry<String,String> entry : props.entrySet()) {    if (sb.length() > 0)     sb.append(",");    String key=entry.getKey();    String value;    try {      value=entry.getValue();    } catch (    ClassCastException e) {      throw new MalformedObjectNameException(e.getMessage());    }    key_index=sb.length();    checkKey(key);    sb.append(key);    keys[i]=key;    sb.append("=");    boolean value_pattern=checkValue(value);    sb.append(value);    if (!value_pattern) {      prop=new Property(key_index,key.length(),value.length());    } else {      _property_value_pattern=true;      prop=new PatternProperty(key_index,key.length(),value.length());    }    addProperty(prop,i,keys_map,key);    i++;  }  int len=sb.length();  char[] initial_chars=new char[len];  sb.getChars(0,len,initial_chars,0);  char[] canonical_chars=new char[len];  System.arraycopy(initial_chars,0,canonical_chars,0,_domain_length + 1);  setCanonicalName(initial_chars,canonical_chars,keys,keys_map,_domain_length + 1,_kp_array.length);}  }
class C{  public boolean appliesToEntry(Entry entry){  return (conflictBehavior != VirtualAttributeCfgDefn.ConflictBehavior.REAL_OVERRIDES_VIRTUAL || !entry.hasAttribute(attributeType)) && (baseDNs.isEmpty() || matchesAnyBaseDN(entry.getName())) && (filters.isEmpty() || matchesAnyFilter(entry))&& (groupDNs.isEmpty() || isMemberOfAnyGroup(entry));}  }
class C{  public static int mainModify(String[] args){  return mainModify(args,true,System.out,System.err);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PagesPerMinuteColor);}  }
class C{  public static int d(String tag,String msg){  return Log.d(tag,msg);}  }
class C{  @Override public void onDestroy(){  Log.d(TAG,"start FmRadioActivity.onDestroy");  unregisterSdcardReceiver();  mHandler.removeCallbacksAndMessages(null);  if (mService != null) {    mService.unregisterFmRadioListener(mFmRadioListener);  }  mFmRadioListener=null;  if (null != mPopupMenu) {    mPopupMenu.dismiss();    mPopupMenu=null;  }  Log.d(TAG,"end FmRadioActivity.onDestroy");  super.onDestroy();}  }
class C{  public Run(){}  }
class C{  public BlacklistException(String message){  super(message);}  }
class C{  public void destroy(){}  }
class C{  protected void handleTitle(char text[]){  handleText(text);}  }
class C{  public LinkedList(Collection<? extends E> c){  this();  addAll(c);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider() throws NoSuchAlgorithmException, IllegalArgumentException, KeyManagementException {  try {    SSLContext.getInstance(null,mProv);    fail("NoSuchAlgorithmException or NullPointerException should be thrown " + "(protocol is null)");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      SSLContext.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  SSLContext sslC;  for (int i=0; i < validValues.length; i++) {    sslC=SSLContext.getInstance(validValues[i],mProv);    assertTrue("Not instanceof SSLContext object",sslC instanceof SSLContext);    assertEquals("Incorrect protocol",sslC.getProtocol(),validValues[i]);    assertEquals("Incorrect provider",sslC.getProvider(),mProv);    checkSSLContext(sslC);  }}  }
class C{  private void validatePattern(String template){  boolean quote=false;  int next, last=-1, count=0;  final int patternLength=template.length();  for (int i=0; i < patternLength; i++) {    next=(template.charAt(i));    if (next == '\'') {      if (count > 0) {        validatePatternCharacter((char)last);        count=0;      }      if (last == next) {        last=-1;      } else {        last=next;      }      quote=!quote;      continue;    }    if (!quote && (last == next || (next >= 'a' && next <= 'z') || (next >= 'A' && next <= 'Z'))) {      if (last == next) {        count++;      } else {        if (count > 0) {          validatePatternCharacter((char)last);        }        last=next;        count=1;      }    } else {      if (count > 0) {        validatePatternCharacter((char)last);        count=0;      }      last=-1;    }  }  if (count > 0) {    validatePatternCharacter((char)last);  }  if (quote) {    throw new IllegalArgumentException("Unterminated quote");  }}  }
class C{  public AMUser createUser(String uid,Map attrMap,Map serviceNameAndAttrs) throws AMException, SSOException {  Set serviceNames=getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);  if (serviceNames == Collections.EMPTY_SET) {    serviceNames=new HashSet();  }  Set assignServiceNames=serviceNameAndAttrs.keySet();  Set registered=dsServices.getRegisteredServiceNames(null,entryDN);  Iterator it=assignServiceNames.iterator();  while (it.hasNext()) {    String tmpS=(String)it.next();    if (!registered.contains(tmpS)) {      Object[] args={tmpS};      throw new AMException(AMSDKBundle.getString("459",args,super.locale),"459",args);    }  }  it=assignServiceNames.iterator();  while (it.hasNext()) {    String tmp=(String)it.next();    serviceNames.add(tmp);  }  Set objectClasses=null;  if ((serviceNames != null) && (!serviceNames.isEmpty())) {    objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);    Set userOCs=(Set)attrMap.get("objectclass");    objectClasses=AMCommonUtils.combineOCs(userOCs,objectClasses);  }  String userDN=AMNamingAttrManager.getNamingAttr(USER) + "=" + uid+ ","+ super.entryDN;  AMUserImpl user=new AMUserImpl(super.token,userDN);  user.setAttributes(attrMap);  it=assignServiceNames.iterator();  while (it.hasNext()) {    String thisService=(String)it.next();    Map sAttrMap=(Map)serviceNameAndAttrs.get(thisService);    try {      ServiceSchemaManager ssm=new ServiceSchemaManager(thisService,token);      ServiceSchema ss=ssm.getSchema(SchemaType.USER);      sAttrMap=ss.validateAndInheritDefaults(sAttrMap,true);      sAttrMap=AMCommonUtils.removeEmptyValues(sAttrMap);      user.setAttributes(sAttrMap);    } catch (    SMSException se) {      debug.error("AMOrganizationImpl: Data validation failed-> " + thisService,se);      Object args[]={thisService};      throw new AMException(AMSDKBundle.getString("976",args,super.locale),"976",args);    }  }  if (objectClasses != null && !objectClasses.isEmpty()) {    user.setAttribute("objectclass",objectClasses);  }  user.create();  return (user);}  }
class C{  public synchronized boolean isConsumer(ImageConsumer ic){  return (proxies != null && proxies.containsKey(ic));}  }
class C{  public TreePath(Object[] path){  if (path == null || path.length == 0)   throw new IllegalArgumentException("path in TreePath must be non null and not empty.");  lastPathComponent=path[path.length - 1];  if (path.length > 1)   parentPath=new TreePath(path,path.length - 1);}  }
class C{  public LogRecord createLogRecord(String messageIDName,String[] dataInfo,Hashtable ssoProperties){  LogRecord logRec=null;  LogMessageID logMsgId=(LogMessageID)hashMessageIDs.get(messageIDName);  if (logMsgId != null) {    logRec=new LogRecord(logMsgId.getLogLevel(),formatMessage(dataInfo,logMsgId),ssoProperties);    logRec.addLogInfo(LogConstants.MESSAGE_ID,logMsgId.getPrefix() + "-" + logMsgId.getID());  } else {    Debug.error("LogMessageProviderBase.createLogRecord: " + "unable to locale message ID object for " + messageIDName);  }  return logRec;}  }
class C{  public LifetimeExceededException(){  super();}  }
class C{  public InvalidScopeException(final String message,final UrlLocation parameterLocation){  super(400,"invalid_scope",message,parameterLocation);}  }
class C{  public static Optional<String> trimEnd(final String input,String... chars){  return Optional.ofNullable(input).filter(null).map(null);}  }
class C{  public int read() throws java.io.IOException {  if (isBack) {    isBack=false;    return back & 0xff;  }  return byteSource.get(byteSourcePosition++);}  }
class C{  public String toString(boolean detail){  if (!detail || resolvedObj == null) {    return toString();  } else {    return (toString() + "; resolved object " + resolvedObj);  }}  }
class C{  public void RemoveAllNoClear(){  if (null == m_map)   return;  m_firstFree=0;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  private static String rdocifyAbsoluteMarkdownLinks(String comment){  StringBuffer sb=new StringBuffer();  Matcher m=CommentPatterns.ABSOLUTE_LINK_PATTERN.matcher(comment);  if (!m.find()) {    return comment;  }  do {    m.appendReplacement(sb,String.format("{%s}[%s]",m.group(1),m.group(2)));  } while (m.find());  m.appendTail(sb);  return sb.toString();}  }
class C{  static JAXBContext newInstance(String contextPath,String className,ClassLoader classLoader,Map properties) throws JAXBException {  try {    Class spFactory=safeLoadClass(className,classLoader);    return newInstance(contextPath,spFactory,classLoader,properties);  } catch (  ClassNotFoundException x) {    throw new JAXBException(Messages.format(Messages.PROVIDER_NOT_FOUND,className),x);  }catch (  RuntimeException x) {    throw x;  }catch (  Exception x) {    throw new JAXBException(Messages.format(Messages.COULD_NOT_INSTANTIATE,className,x),x);  }}  }
class C{  public static void main(final String[] args){  if (args.length < 5) {    System.err.println("Usage: host port username password userDN");    System.exit(1);  }  final String hostName=args[0];  final int port=Integer.parseInt(args[1]);  final String userName=args[2];  final String password=args[3];  final String userDN=args[4];  final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(hostName,port);  Connection connection=null;  ByteStringBuilder builder=new ByteStringBuilder();  ASN1Writer asn1Writer=ASN1.getWriter(builder);  try {    asn1Writer.writeStartSequence();    asn1Writer.writeOctetString("description");    asn1Writer.writeEndSequence();    asn1Writer.flush();    asn1Writer.close();  } catch (  Exception e) {    System.out.println("Failed to prepare control value: " + e.getCause());    System.exit(-1);  }  try {    connection=factory.getConnection();    connection.bind(userName,password.toCharArray());    final ModifyRequest request=Requests.newModifyRequest(userDN).addModification(ModificationType.REPLACE,"description","A new description").addControl(GenericControl.newControl("1.3.6.1.1.13.1",true,builder.toByteString()));    final Result result=connection.modify(request);    if (result.isSuccess()) {      final PreReadResponseControl control=result.getControl(PreReadResponseControl.DECODER,new DecodeOptions());      final Entry unmodifiedEntry=control.getEntry();      writer.writeComment("Before modification");      writer.writeEntry(unmodifiedEntry);      writer.flush();      final SearchResultEntry modifiedEntry=connection.searchSingleEntry(userDN,SearchScope.BASE_OBJECT,"(objectclass=*)","description");      writer.writeComment("After modification");      writer.writeEntry(modifiedEntry);      writer.flush();    }  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());  }catch (  final IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  @Override public List<Foo> findByUuid(String uuid){  return findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public IDFFMetaException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
