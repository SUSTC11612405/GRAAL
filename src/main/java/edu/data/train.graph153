class C{  public void testWriteLittleEndian() throws Exception {  assertWriteLittleEndian32(bytes(0x78,0x56,0x34,0x12),0x12345678);  assertWriteLittleEndian32(bytes(0xf0,0xde,0xbc,0x9a),0x9abcdef0);  assertWriteLittleEndian64(bytes(0xf0,0xde,0xbc,0x9a,0x78,0x56,0x34,0x12),0x123456789abcdef0L);  assertWriteLittleEndian64(bytes(0x78,0x56,0x34,0x12,0xf0,0xde,0xbc,0x9a),0x9abcdef012345678L);}  }
class C{  public boolean isDone(Integer timeoutMs) throws InterruptedException, TimeoutException, ExecutionException {  if (this.queries == null)   return false;  if (!this.queries.isEmpty()) {    return false;  } else {    if (ongoingQueries == null)     return false;    long start=System.currentTimeMillis();    long elapse=0;    for (    ExecuteHierarchyQuery query : ongoingQueries) {      Future<ExecuteHierarchyQueryResult> job=query.getJob();      if (job != null && !job.isDone()) {        if (timeoutMs == null) {          job.get();        } else {          int remaining=timeoutMs - (int)elapse;          if (remaining > 0) {            job.get(remaining,TimeUnit.MILLISECONDS);          } else {            return false;          }          elapse=System.currentTimeMillis() - start;        }      }    }    return true;  }}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  if (log.isInfoEnabled()) {    log.info("|-Storage Service active...");  }}  }
class C{  protected static String defaultDecoderIndexFilename(){  return decoderIndexFileName;}  }
class C{  public void verifyKey(VerifyEvent event){  try {    event.doit=false;    if (event.stateMask == SWT.NONE && Character.isDigit(event.character)) {      int input=Character.getNumericValue(event.character);      ISelection selection=editor.getSelectionProvider().getSelection();      if (selection != null && selection instanceof ITextSelection) {        ITextSelection textSelection=(ITextSelection)selection;        IDocument document=editor.getDocumentProvider().getDocument(editor.getEditorInput());        if (textSelection.getLength() == 0 && document != null) {          IRegion region=DocumentHelper.getRegionExpandedBoth(document,textSelection.getOffset(),DocumentHelper.getDefaultWordDetector());          try {            String insertionText=" " + document.get(region.getOffset(),region.getLength());            StringBuilder sb=new StringBuilder();            for (int i=0; i < input; i++) {              sb.append(insertionText);            }            document.replace(region.getOffset() + region.getLength(),0,sb.toString());          } catch (          BadLocationException e) {            e.printStackTrace();          }        }      }    }  }  finally {    uninstall();  }}  }
class C{  public void addTextProperty(String propertyName,TextNode node){  if (node instanceof TextLayoutFormatNode) {    if (FXG_LINKACTIVEFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkActiveFormat == null) {        linkActiveFormat=(TextLayoutFormatNode)node;        linkActiveFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkActiveFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKHOVERFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkHoverFormat == null) {        linkHoverFormat=(TextLayoutFormatNode)node;        linkHoverFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkHoverFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else     if (FXG_LINKNORMALFORMAT_PROPERTY_ELEMENT.equals(propertyName)) {      if (linkNormalFormat == null) {        linkNormalFormat=(TextLayoutFormatNode)node;        linkNormalFormat.setParent(this);        if (properties == null)         properties=new HashMap<String,TextNode>(3);        properties.put(propertyName,linkNormalFormat);      } else {        throw new FXGException(getStartLine(),getStartColumn(),"MultipleLinkFormatElements");      }    } else {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"UnknownLinkFormat",propertyName);    }  } else {    super.addTextProperty(propertyName,node);  }}  }
class C{  public boolean isEverHittable(){  return hittable;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.646 -0500",hash_original_method="429014701CBDF3E63C4D942F6F6D141A",hash_generated_method="B62EF7D8E52E9EF213344FDB1A7B0FF5") private static boolean isNanp(String dialStr){  boolean retVal=false;  if (dialStr != null) {    if (dialStr.length() == NANP_LENGTH) {      if (isTwoToNine(dialStr.charAt(0)) && isTwoToNine(dialStr.charAt(3))) {        retVal=true;        for (int i=1; i < NANP_LENGTH; i++) {          char c=dialStr.charAt(i);          if (!PhoneNumberUtils.isISODigit(c)) {            retVal=false;            break;          }        }      }    }  } else {    Log.e("isNanp: null dialStr passed in",dialStr);  }  return retVal;}  }
class C{  public String finish(){  return null;}  }
class C{  private void appendCoordinate(Coordinate coordinate,Writer writer) throws IOException {  writer.write(writeNumber(coordinate.x) + " " + writeNumber(coordinate.y));  if (outputDimension >= 3 && !Double.isNaN(coordinate.z)) {    writer.write(" ");    writer.write(writeNumber(coordinate.z));  }}  }
class C{  public void syncVdcConfig(VdcConfigSyncParam vdcConfigList,String vdcName) throws GeoException {  WebResource rRoot=createRequest(VDCCONFIG_URI);  rRoot.accept(MediaType.APPLICATION_XML);  try {    addSignature(rRoot).put(vdcConfigList);  } catch (  UnauthorizedException e) {    log.error("Failed to sync VDC : 401 Unauthorized, " + vdcName,e);    throw GeoException.fatals.remoteVdcAuthorizationFailed(vdcName,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    log.error("Failed to sync VDC : " + vdcName,e);    throw GeoException.fatals.failedToSyncConfigurationForVdc(vdcName,e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.573 -0400",hash_original_method="865E5C3BA09922B2D2CC59AD7D677871",hash_generated_method="EA423ECBD3F35350F55C578F5F215162") public boolean containsValue(Object value){  return indexOfValue(value) >= 0;}  }
class C{  private void enableFields(){  regexTextField.setVisible(separationComboBox.getSelectedItem() == ColumnSeparator.REGULAR_EXPRESSION);  regexEvalButton.setVisible(separationComboBox.getSelectedItem() == ColumnSeparator.REGULAR_EXPRESSION);}  }
class C{  public void testInvalidLatitude() throws Exception {  testInvalidGpx(INVALID_LATITUDE_GPX);}  }
class C{  public static WritableNativeMap makeNativeMap(Bundle bundle){  WritableNativeMap nativeMap=new WritableNativeMap();  if (bundle == null) {    return nativeMap;  }  for (  String key : bundle.keySet()) {    addEntry(nativeMap,key,bundle.get(key));  }  return nativeMap;}  }
class C{  public boolean onJobUpdateTick(){  if (!hasJobStarted) {    onJobStarted();    hasJobStarted=true;  }  boolean abort=false;  for (  EntityMinion m : workerList) {    if (m.isDead) {      abort=true;      break;    }  }  if (abort) {    onJobFinished();  }  return isFinished;}  }
class C{  public boolean isPreserveOriginal(){  return preserveOriginal;}  }
class C{  @Override public Object convert(Message message) throws JMSException {  if (message instanceof TextMessage) {    return ((TextMessage)message).getText();  } else   if (message instanceof StreamMessage) {    return ((StreamMessage)message).readString();  } else   if (message instanceof BytesMessage) {    return extractByteArrayFromMessage((BytesMessage)message);  } else   if (message instanceof MapMessage) {    return extractMapFromMessage((MapMessage)message);  } else   if (message instanceof ObjectMessage) {    return extractSerializableFromMessage((ObjectMessage)message);  } else {    return message;  }}  }
class C{  public static String strip(String str){  return strip(str,null);}  }
class C{  private void startClient(InetAddress hostAddress,int hostPort,String deviceName,byte iconType,byte[] iconData) throws IOException {  this.hostAddress=hostAddress;  this.hostPort=hostPort;  this.deviceName=deviceName;  this.iconType=iconType;  this.iconData=iconData;  PacketHELO p;  if (hasIcon)   p=new PacketHELO(deviceName,iconType,iconData); else   p=new PacketHELO(deviceName);  p.send(hostAddress,hostPort);  oPingThread=new PingThread(hostAddress,hostPort,20000);  oPingThread.start();}  }
class C{  public static synchronized void unregisterProvider(String providerID) throws SyncFactoryException {  initMapIfNecessary();  if (implementations.containsKey(providerID)) {    implementations.remove(providerID);  }}  }
class C{  public ObjIdMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException(LocalizedStrings.ObjIdMap_ILLEGAL_INITIAL_CAPACITY_0.toLocalizedString(Integer.valueOf(initialCapacity)));  }  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException(LocalizedStrings.ObjIdMap_ILLEGAL_LOAD_FACTOR_0.toLocalizedString(new Float(loadFactor)));  }  if (initialCapacity == 0) {    initialCapacity=1;  }  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  public static CompiereColor showDialog(Frame owner,CompiereColor color){  ColorEditor cce=new ColorEditor(owner,color);  if (cce.isSaved())   return cce.getColor();  return color;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:52.196 -0500",hash_original_method="8E4CA51B7E680A60FEA1CBDAF0FD16D6",hash_generated_method="C743A7FE4EBA471AA8FCEB886CE3FF2E") public static int toIntValue(Object decoded){  return new BigInteger((byte[])decoded).intValue();}  }
class C{  private void assertAllEntryMethodsReturnImmutableEntries(NavigableMap<String,String> map){  assertImmutable(map.ceilingEntry("B"));  assertImmutable(map.firstEntry());  assertImmutable(map.floorEntry("D"));  assertImmutable(map.higherEntry("A"));  assertImmutable(map.lastEntry());  assertImmutable(map.lowerEntry("C"));  assertImmutable(map.pollFirstEntry());  assertImmutable(map.pollLastEntry());}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Peer))   return false;  String h0=this.get(Schema.hash);  String h1=((Peer)o).get(Schema.hash);  return h0.equals(h1);}  }
class C{  public RegexSearchTupleSet(){  this(false);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.IS_A__SINGLE_IS_A1:    return getSingleIsA_1();case UmplePackage.IS_A__MULTIPLE_IS_A1:  return getMultipleIsA_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private ClassPathLocationScanner createLocationScanner(String protocol){  if ("file".equals(protocol)) {    return new FileSystemClassPathLocationScanner();  }  if ("jar".equals(protocol) || "zip".equals(protocol) || "wsjar".equals(protocol)) {    return new JarFileClassPathLocationScanner();  }  FeatureDetector featureDetector=new FeatureDetector(classLoader);  return null;}  }
class C{  public Boolean isRootVRP(){  return rootVRP;}  }
class C{  public void lockPortal(final int ID){  int index=unlockedPortals.size() - 1;  if (unlockedPortals.contains(ID)) {    while (index >= 0) {      if (unlockedPortals.get(index) == ID) {        unlockedPortals.remove(index);        logger.debug("Removed portal ID " + Integer.toString(ID) + " from player "+ getName()+ ".");      }      index-=1;    }  }}  }
class C{  public static void checkDDP(Metadata metadata,String producer,String owner,String application,int count,long maxwait) throws WarpException {  if (!loaded) {    return;  }  RateLimiter producerLimiter=producerRateLimiters.get(producer);  RateLimiter applicationLimiter=applicationRateLimiters.get(application);  long appMaxWait=maxwait;  long producerMaxWait=maxwait;  if (null == producerLimiter && null == applicationLimiter && -1.0D == DEFAULT_RATE_PRODUCER) {    return;  } else   if (null == producerLimiter) {    producerLimiter=RateLimiter.create(Math.max(MINIMUM_RATE_LIMIT,DEFAULT_RATE_PRODUCER));    producerRateLimiters.put(producer,producerLimiter);  }  if (null != applicationLimiter) {synchronized (applicationLimiter) {      if (!applicationLimiter.tryAcquire(count,appMaxWait * count,TimeUnit.MILLISECONDS)) {        StringBuilder sb=new StringBuilder();        sb.append("Storing data for ");        if (null != metadata) {          GTSHelper.metadataToString(sb,metadata.getName(),metadata.getLabels());        }        sb.append(" would incur a wait greater than ");        sb.append(appMaxWait);        sb.append(" ms per datapoint due to your Daily Data Points limit being already exceeded for application '" + application + "'. Current max rate is "+ applicationLimiter.getRate()+ " datapoints/s.");        Map<String,String> labels=new HashMap<String,String>();        labels.put(SensisionConstants.SENSISION_LABEL_APPLICATION,application);        Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_RATE_PER_APP,labels,1);        Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_RATE_PER_APP_GLOBAL,Sensision.EMPTY_LABELS,1);        throw new WarpException(sb.toString());      }    }  }synchronized (producerLimiter) {    if (!producerLimiter.tryAcquire(count,producerMaxWait * count,TimeUnit.MILLISECONDS)) {      StringBuilder sb=new StringBuilder();      sb.append("Storing data for ");      if (null != metadata) {        GTSHelper.metadataToString(sb,metadata.getName(),metadata.getLabels());      }      sb.append(" would incur a wait greater than ");      sb.append(producerMaxWait);      sb.append(" ms per datapoint due to your Daily Data Points limit being already exceeded. Current maximum rate is " + producerLimiter.getRate() + " datapoints/s.");      Map<String,String> labels=new HashMap<String,String>();      labels.put(SensisionConstants.SENSISION_LABEL_PRODUCER,producer);      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_RATE,labels,1);      Sensision.update(SensisionConstants.SENSISION_CLASS_CONTINUUM_THROTTLING_RATE_GLOBAL,Sensision.EMPTY_LABELS,1);      throw new WarpException(sb.toString());    }  }}  }
class C{  @Deprecated @SuppressWarnings("deprecation") public final void suspend(){  if (stopOrSuspend(true))   Thread.currentThread().suspend();}  }
class C{  void sendRequest(AndroidHttpClientConnection httpClientConnection) throws HttpException, IOException {  if (mCancelled)   return;  if (HttpLog.LOGV) {    HttpLog.v("Request.sendRequest() " + mHost.getSchemeName() + "://"+ getHostPort());    if (false) {      Iterator i=mHttpRequest.headerIterator();      while (i.hasNext()) {        Header header=(Header)i.next();        HttpLog.v(header.getName() + ": " + header.getValue());      }    }  }  requestContentProcessor.process(mHttpRequest,mConnection.getHttpContext());  httpClientConnection.sendRequestHeader(mHttpRequest);  if (mHttpRequest instanceof HttpEntityEnclosingRequest) {    httpClientConnection.sendRequestEntity((HttpEntityEnclosingRequest)mHttpRequest);  }  if (HttpLog.LOGV) {    HttpLog.v("Request.requestSent() " + mHost.getSchemeName() + "://"+ getHostPort()+ mPath);  }}  }
class C{  private static ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int index,int size){  throw new ArrayIndexOutOfBoundsException();}  }
class C{  private void handleWidgetDispose(Event e){  if (e.widget == widget) {    if (dropDownMenuManager != null) {      dropDownMenuManager.dispose();      dropDownMenuManager=null;    }    if (currentAction != null && currentActionListener != null) {      currentAction.removePropertyChangeListener(currentActionListener);    }    widget=null;    disposeOldImages();  }}  }
class C{  private static void deleteFrom(int deleteAt,int[] starts,int numStarts){  while (starts[--numStarts] > deleteAt) {    starts[numStarts]-=1;  }}  }
class C{  private final void processConstants(SemanticNode expr){switch (expr.getKind()) {case ModuleKind:{      ModuleNode expr1=(ModuleNode)expr;      OpDefNode[] opDefs=expr1.getOpDefs();      for (int i=0; i < opDefs.length; i++) {        Object def=opDefs[i].getToolObject(TLCGlobals.ToolId);        if (def instanceof OpDefNode) {          this.processedDefs.add((OpDefNode)def);          this.processConstants(((OpDefNode)def).getBody());        }        this.processConstants(opDefs[i].getBody());      }      ModuleNode[] imods=expr1.getInnerModules();      for (int i=0; i < imods.length; i++) {        this.processConstants(imods[i]);      }      AssumeNode[] assumps=expr1.getAssumptions();      for (int i=0; i < assumps.length; i++) {        this.processConstants(assumps[i]);      }      TheoremNode[] thms=expr1.getTheorems();      for (int i=0; i < thms.length; i++) {        this.processConstants(thms[i]);      }      return;    }case OpApplKind:{    OpApplNode expr1=(OpApplNode)expr;    SymbolNode opNode=expr1.getOperator();    Object val=this.defns.get(opNode.getName());    if (val != null) {      opNode.setToolObject(TLCGlobals.ToolId,val);    } else {      SemanticNode[] args=expr1.getArgs();      for (int i=0; i < args.length; i++) {        if (args[i] != null) {          this.processConstants(args[i]);        }      }      ExprNode[] bnds=expr1.getBdedQuantBounds();      for (int i=0; i < bnds.length; i++) {        this.processConstants(bnds[i]);      }    }    return;  }case LetInKind:{  LetInNode expr1=(LetInNode)expr;  OpDefNode[] letDefs=expr1.getLets();  for (int i=0; i < letDefs.length; i++) {    this.processConstants(letDefs[i].getBody());  }  this.processConstants(expr1.getBody());  return;}case SubstInKind:{SubstInNode expr1=(SubstInNode)expr;Subst[] subs=expr1.getSubsts();for (int i=0; i < subs.length; i++) {  this.processConstants(subs[i].getExpr());}this.processConstants(expr1.getBody());return;}case APSubstInKind:{APSubstInNode expr1=(APSubstInNode)expr;Subst[] subs=expr1.getSubsts();for (int i=0; i < subs.length; i++) {this.processConstants(subs[i].getExpr());}this.processConstants(expr1.getBody());return;}case NumeralKind:{NumeralNode expr1=(NumeralNode)expr;IntValue val=IntValue.gen(expr1.val());if (expr1.bigVal() != null) {Assert.fail(EC.TLC_INTEGER_TOO_BIG,expr1.toString());return;}expr1.setToolObject(TLCGlobals.ToolId,val);return;}case DecimalKind:{DecimalNode expr1=(DecimalNode)expr;Assert.fail(EC.TLC_CANT_HANDLE_REAL_NUMBERS,expr1.toString());return;}case StringKind:{StringNode expr1=(StringNode)expr;StringValue val=new StringValue(expr1.getRep());expr1.setToolObject(TLCGlobals.ToolId,val);return;}case AssumeKind:{AssumeNode expr1=(AssumeNode)expr;this.processConstants(expr1.getAssume());return;}case TheoremKind:{TheoremNode expr1=(TheoremNode)expr;this.processConstants(expr1.getTheorem());return;}case OpArgKind:{SymbolNode opArgNode=((OpArgNode)expr).getOp();if (opArgNode.getKind() == UserDefinedOpKind) {OpDefNode opdef=(OpDefNode)opArgNode;if (!processedDefs.contains(opdef)) {processedDefs.add(opdef);this.processConstants(opdef.getBody());}}return;}case LabelKind:{LabelNode expr1=(LabelNode)expr;this.processConstants(expr1.getBody());}}}  }
class C{  public static Object translateIntoOtherGameData(final Object object,final GameData translateInto){  try {    ByteArrayOutputStream sink=new ByteArrayOutputStream(1024);    final GameObjectOutputStream out=new GameObjectOutputStream(sink);    out.writeObject(object);    out.flush();    out.close();    final ByteArrayInputStream source=new ByteArrayInputStream(sink.toByteArray());    sink=null;    final GameObjectStreamFactory factory=new GameObjectStreamFactory(translateInto);    final ObjectInputStream in=factory.create(source);    try {      return in.readObject();    } catch (    final ClassNotFoundException ex) {      throw new RuntimeException(ex);    }  } catch (  final IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  @NotNull public AsyncCallbackBuilder<T> failure(@NotNull FailureCallback failureCallback){  this.failureCallback=failureCallback;  return this;}  }
class C{  private static List<Pair<InputSource,File>> checkInputs(String... jsFiles) throws IOException {  List<Pair<InputSource,File>> inputs=new ArrayList<Pair<InputSource,File>>();  for (  String jsFile : jsFiles) {    File f=new File(jsFile);    if (!f.canRead()) {      throw new IOException("Cannot read " + jsFile);    }    InputSource is=new InputSource(f.getAbsoluteFile().toURI());    inputs.add(Pair.pair(is,f));  }  return inputs;}  }
class C{  public SimplifyTask(IdTrackerType idTrackerType){  requiredNodes=IdTrackerFactory.createInstance(idTrackerType);  visitedNodes=IdTrackerFactory.createInstance(idTrackerType);  availableNodes=IdTrackerFactory.createInstance(idTrackerType);  allNodes=new SimpleObjectStore<NodeContainer>(new SingleClassObjectSerializationFactory(NodeContainer.class),"afnd",true);  allWays=new SimpleObjectStore<WayContainer>(new SingleClassObjectSerializationFactory(WayContainer.class),"afwy",true);}  }
class C{  public int localsSize(){  return localsSize;}  }
class C{  static UnionImpl wrapInstance(Memory srcMem,long seed){  Family.UNION.checkFamilyID(srcMem.getByte(FAMILY_BYTE));  UpdateSketch gadget=DirectQuickSelectSketch.getInstance(srcMem,seed);  UnionImpl unionImpl=new UnionImpl(gadget,seed);  unionImpl.unionMem_=srcMem;  return unionImpl;}  }
class C{  @Override public Value convertTo(int t){  if (t == type) {    return this;  } else   if (t == Value.CLOB) {    ValueLob copy=ValueLob.createClob(getReader(),-1);    return copy;  } else   if (t == Value.BLOB) {    ValueLob copy=ValueLob.createBlob(getInputStream(),-1);    return copy;  }  return super.convertTo(t);}  }
class C{  @Override public void replaceMissingValues(double[] array){  if ((array == null) || (array.length != m_AttValues.length)) {    throw new IllegalArgumentException("Unequal number of attributes!");  }  freshAttributeVector();  for (int i=0; i < m_AttValues.length; i++) {    if (isMissing(i)) {      m_AttValues[i]=array[i];    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_2__MORE_CODE_1:    return getMoreCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override protected ImageIcon createImageIcon(){  final ByteArrayOutputStream baos=new ByteArrayOutputStream(5904);  try (final InputStream in=resource.openStream()){    int data;    while ((data=in.read()) != -1)     baos.write(data);  } catch (  final IOException ie) {    Env.LOGGER.error("Failed to read texture: " + resource.getFile(),ie);    return null;  }  final BufferedImage bimg=DdsParser.parseDDS(baos.toByteArray());  String name=resource.getFile();  name=name.substring(name.lastIndexOf('/') + 1);  if (LIGHT_TEXTURE_SET.contains(name)) {    for (int y=bimg.getHeight() - 1; y >= 0; y--)     for (int x=bimg.getWidth() - 1; x >= 0; x--) {      final int rgb=bimg.getRGB(x,y);      bimg.setRGB(x,y,(rgb & 0xff000000) | ((rgb & 0xfe0000) >> 1) | ((rgb & 0xfe00) >> 1)| ((rgb & 0xfe) >> 1));    }  }  return new ImageIcon(bimg);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AverageTrueRangeDataset)) {    return false;  }  AverageTrueRangeDataset that=(AverageTrueRangeDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public boolean isPhantom(){  return isPhantom;}  }
class C{  public MBeanServerPermission(String name,String actions){  super(getCanonicalName(parseMask(name)),actions);  mask=parseMask(name);  if (actions != null && actions.length() > 0)   throw new IllegalArgumentException("MBeanServerPermission " + "actions must be null: " + actions);}  }
class C{  private void updateRange(double x,double y){  mMinX=Math.min(mMinX,x);  mMaxX=Math.max(mMaxX,x);  mMinY=Math.min(mMinY,y);  mMaxY=Math.max(mMaxY,y);}  }
class C{  public static Test suite(){  return (new TestSuite(TlvITCase.class));}  }
class C{  protected <T>org.apache.atlas.kafka.KafkaConsumer<T> createKafkaConsumer(Class<T> type,MessageDeserializer<T> deserializer,KafkaStream stream,int consumerId,ConsumerConnector consumerConnector,boolean autoCommitEnabled){  return new org.apache.atlas.kafka.KafkaConsumer<T>(deserializer,stream,consumerId,consumerConnector,autoCommitEnabled);}  }
class C{  public void deselectAt(final int index){  checkWidget();  checkNullElement();  if (index < 0 || index >= this.elements.size()) {    SWT.error(SWT.ERROR_INVALID_RANGE);  }  this.selection.remove(index);  updateSelection();}  }
class C{  public void unlock(){  setLock.unlock(this);}  }
class C{  PackageSetting(PackageSetting orig){  super(orig);  appId=orig.appId;  pkg=orig.pkg;  sharedUser=orig.sharedUser;}  }
class C{  public void mult(float n){  x*=n;  y*=n;  z*=n;}  }
class C{  public AccountHeaderBuilder withPaddingBelowHeader(boolean paddingBelowHeader){  this.mPaddingBelowHeader=paddingBelowHeader;  return this;}  }
class C{  public void close(){  customOnClose();  LSettingsGui.removeAllBoundedScl(cp);  dispose();}  }
class C{  protected PairContext(JsonNode json){  children=null != json ? json.fields() : null;}  }
class C{  public boolean isAllowUnreachableCode(){  return allowUnreachableCode;}  }
class C{  public boolean isEmpty(){  return stack.isEmpty();}  }
class C{  public double notional(){  return notional(new Date());}  }
class C{  public boolean addEntry(final String list,final String entry){  boolean ret=false;  if (names.containsKey(list)) {    entries.get(names.get(list)).add(entry);    ret=true;  }  return ret;}  }
class C{  public boolean isError(){  Object oo=get_Value(COLUMNNAME_IsError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){  String inputDesc=String.format("earlyEvents=%s, lateEvents=%s, " + "anytimeEvents=%s, actualEvents=%s",earlyEvents.toString(),lateEvents.toString(),anytimeEvents.toString(),actualEvents.toString());  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);  for (  PortChangeEvent ev : early) {    assertFalse("Test setup error. Early and late overlap",late.contains(ev));    assertFalse("Test setup error. Early and anytime overlap",any.contains(ev));  }  for (  PortChangeEvent ev : late) {    assertFalse("Test setup error. Late and early overlap",early.contains(ev));    assertFalse("Test setup error. Late and any overlap",any.contains(ev));  }  for (  PortChangeEvent ev : any) {    assertFalse("Test setup error. Anytime and early overlap",early.contains(ev));    assertFalse("Test setup error. Anytime and late overlap",late.contains(ev));  }  for (  PortChangeEvent a : actualEvents) {    if (early.remove(a)) {      continue;    }    if (any.remove(a)) {      continue;    }    if (late.remove(a)) {      if (!early.isEmpty()) {        fail(a + " is in late list, but haven't seen all required " + "early events. "+ inputDesc);      } else {        continue;      }    }    fail(a + " was not expected. " + inputDesc);  }  if (!early.isEmpty())   fail("Elements left in early: " + early + ". "+ inputDesc);  if (!late.isEmpty())   fail("Elements left in late: " + late + ". "+ inputDesc);  if (!any.isEmpty())   fail("Elements left in any: " + any + ". "+ inputDesc);}  }
class C{  public static LocoNetMessage createSv2Message(int source,int command,int destination,int svNum,int d1,int d2,int d3,int d4) throws java.lang.IllegalArgumentException {  if (!isSupportedSv2Command(command)) {    throw new java.lang.IllegalArgumentException("Command is not a supported SV2 command");  }  LocoNetMessage m=new LocoNetMessage(SV2_LENGTH_ELEMENT_VALUE);  m.setOpCode(LnConstants.OPC_PEER_XFER);  m.setElement(SV2_LENGTH_ELEMENT_INDEX,SV2_LENGTH_ELEMENT_VALUE);  m.setElement(SV2_SRC_ELEMENT_INDEX,(source & SV2_SRC_ELEMENT_MASK));  m.setElement(SV2_SV_CMD_ELEMENT_INDEX,command);  m.setElement(SV2_SV_TYPE_ELEMENT_INDEX,SV2_SV_TYPE_ELEMENT_VALIDITY_CHECK_VALUE);  int svx1=SV2_SVX1_ELEMENT_VALIDITY_CHECK_VALUE;  svx1=svx1 + (((destination & 0x80) == 0x80) ? SV2_SV_DST_L_DSTLX7_CHECK_MASK : 0);  svx1=svx1 + (((destination & 0x8000) == 0x8000) ? SV2_SV_DST_H_DSTHX7_CHECK_MASK : 0);  svx1=svx1 + (((svNum & 0x80) == 0x80) ? SV2_SV_ADRL_SVADRL7_CHECK_MASK : 0);  svx1=svx1 + (((svNum & 0x8000) == 0x8000) ? SV2_SV_ADRH_SVADRH7_CHECK_MASK : 0);  m.setElement(SV2_SVX1_ELEMENT_INDEX,svx1);  m.setElement(SV2_SV_DST_L_ELEMENT_INDEX,(destination & 0x7f));  m.setElement(SV2_SV_DST_H_ELEMENT_INDEX,((destination >> 8) & 0x7f));  m.setElement(SV2_SV_ADRL_ELEMENT_INDEX,(svNum & 0x7f));  m.setElement(SV2_SV_ADRH_ELEMENT_INDEX,((svNum >> 8) & 0x7f));  int svx2=SV2_SVX2_ELEMENT_VALIDITY_CHECK_VALUE;  svx2=svx2 + (((d1 & 0x80) == 0x80) ? SV2_SV_D1_D1X7_CHECK_MASK : 0);  svx2=svx2 + (((d2 & 0x80) == 0x80) ? SV2_SV_D2_D2X7_CHECK_MASK : 0);  svx2=svx2 + (((d3 & 0x80) == 0x80) ? SV2_SV_D3_D3X7_CHECK_MASK : 0);  svx2=svx2 + (((d4 & 0x80) == 0x80) ? SV2_SV_D4_D4X7_CHECK_MASK : 0);  m.setElement(SV2_SVX2_ELEMENT_INDEX,svx2);  m.setElement(SV2_SVD1_ELEMENT_INDEX,(d1 & 0x7f));  m.setElement(SV2_SVD2_ELEMENT_INDEX,(d2 & 0x7f));  m.setElement(SV2_SVD3_ELEMENT_INDEX,(d3 & 0x7f));  m.setElement(SV2_SVD4_ELEMENT_INDEX,(d4 & 0x7f));  return m;}  }
class C{  protected NumericLiteralImpl(){  super();}  }
class C{  static TypeMember createArrayMember(final int id,final BaseType parentType,final BaseType baseType,final String name,final int numberOfElements){  return new TypeMember(id,parentType,baseType,name,Optional.<Integer>absent(),Optional.of(numberOfElements),Optional.<Integer>absent());}  }
class C{  public AttributeOperand clone(){  AttributeOperand result=new AttributeOperand();  result.NodeId=NodeId;  result.Alias=Alias;  result.BrowsePath=BrowsePath == null ? null : BrowsePath.clone();  result.AttributeId=AttributeId;  result.IndexRange=IndexRange;  return result;}  }
class C{  protected void waitForMessage(long delayMs){  try {synchronized (this.messageReceiveSync) {      while (this.receiveCount == 0) {        this.messageReceiveSync.wait(delayMs);      }    }  } catch (  InterruptedException intExc) {    LOG.warn("sleep interrupted: wait for message to arrive");  }}  }
class C{  public Entry<K,V> putEntry(K key,V value){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public Y lt(String value){  if (value == null || value.trim().length() == 0) {    return super.lt((Integer)null);  } else {    return super.lt(Integer.parseInt(value.trim()));  }}  }
class C{  protected static String guessType(File file){  String name=file.getName();  String suffix=name.substring(name.lastIndexOf(".") + 1);  String type=mimeMap.get(suffix.toLowerCase(Locale.ROOT));  return (type != null) ? type : "application/octet-stream";}  }
class C{  public static File copyIntoTempFile(String fileName,InputStream inputStream) throws IOException {  BufferedInputStream bufferedStream=inputStream instanceof BufferedInputStream ? (BufferedInputStream)inputStream : new BufferedInputStream(inputStream);  File destFile=null;  try {    destFile=File.createTempFile(fileName,null);    destFile.deleteOnExit();    FileOutputStream fileOutputStream=new FileOutputStream(destFile);    BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(fileOutputStream);    try {      byte[] buffer=new byte[8192];      int length;      while ((length=bufferedStream.read(buffer)) > 0) {        bufferedOutputStream.write(buffer,0,length);      }    }  finally {      bufferedOutputStream.close();      fileOutputStream.close();    }  }  finally {    bufferedStream.close();    inputStream.close();  }  return destFile;}  }
class C{  public boolean isOr(){  return ANDOR_Or.equals(getAndOr());}  }
class C{  public void resumeTransfer(RecoverPointVolumeProtectionInfo volumeInfo) throws RecoverPointException {  try {    ConsistencyGroupUID cgUID=new ConsistencyGroupUID();    cgUID.setId(volumeInfo.getRpVolumeGroupID());    if (volumeInfo.getRpVolumeCurrentProtectionStatus() == RecoverPointVolumeProtectionInfo.volumeProtectionStatus.PROTECTED_SOURCE) {      String cgName=functionalAPI.getGroupName(cgUID);      logger.info("Protection resumed on CG " + cgName);      functionalAPI.startGroupTransfer(cgUID);    } else {      ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(volumeInfo);      functionalAPI.startGroupCopyTransfer(cgCopyUID);      String cgCopyName=functionalAPI.getGroupCopyName(cgCopyUID);      String cgName=functionalAPI.getGroupName(cgCopyUID.getGroupUID());      logger.info("Protection resumed on CG copy " + cgCopyName + " on CG "+ cgName);    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToResumeProtection(volumeInfo.getRpVolumeGroupID(),e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToResumeProtection(volumeInfo.getRpVolumeGroupID(),e);  }}  }
class C{  public InstanceStatus process() throws APPlatformException {  Operation operationState=ph.getOperation();  FlowState flowState=ph.getState();  LOGGER.debug("Dispatching in EC2Processor with OperationState={} and FlowState={}",operationState,flowState);  FlowState newState=null;  InstanceStatus result=new InstanceStatus();  try {switch (operationState) {case EC2_CREATION:case EC2_MODIFICATION:case EC2_DELETION:      newState=manageProvisioningProcess(flowState,result);    break;case EC2_ACTIVATION:  newState=manageActivationProcess(flowState,result);break;case EC2_OPERATION:newState=manageOperationProcess(flowState,result);break;default :break;}} catch (AmazonServiceException e) {String ec=e.getErrorCode();int statusCode=e.getStatusCode();if ("AuthFailure".equals(ec) || "UnauthorizedOperation".equals(ec)) {throw new SuspendException(Messages.getAll("error_suspend_awscode_" + ec,e.getMessage()));}if (("IncorrectInstanceState".equals(ec) || "Unsupported".equals(ec)) && 400 == statusCode) {throw new InstanceNotAliveException(Messages.getAll("error_suspend_instance_error",e.getMessage()));}throwPlatformException(operationState,Messages.getAll("error_aws_general",e.toString()));}catch (AmazonClientException e) {throw new SuspendException(Messages.getAll("error_aws_general",e.getMessage()));}if (newState != null) {LOGGER.debug("Process in EC2Processor changes FlowState to {}",newState.toString());ph.setState(newState);} else {LOGGER.debug("Process in EC2Processor leaves FlowState unchanged");}result.setIsReady(ph.getState() == FlowState.FINISHED || ph.getState() == FlowState.DESTROYED);result.setRunWithTimer(ph.getState() != FlowState.MANUAL);result.setDescription(Messages.getAll("status_" + ph.getState()));result.setChangedParameters(ph.getSettings().getParameters());return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(4);  testEmployee.setAttribute("lang","EN-us");  attrValue=testEmployee.getAttribute("lang");  assertEquals("attrValue","EN-us",attrValue);}  }
class C{  private boolean attributeExists(Class<?> aClass,Attribute attribute){  if (!classExists(aClass))   return false;  for (  XmlAttribute xmlAttribute : findXmlClass(aClass).attributes)   if (xmlAttribute.name.equals(attribute.getName()))   return true;  return false;}  }
class C{  public void gotoMark(){  _currentNode=_markedNode;}  }
class C{  public void writeDetails(javax.xml.namespace.QName qname,org.apache.axis.encoding.SerializationContext context) throws java.io.IOException {  context.serialize(qname,null,this);}  }
class C{  public void insert(int pos,int val){  if (size == data.length) {    if (data.length == MAX_ARRAY_SIZE) {      throw new OutOfMemoryError("Array size has reached the Java maximum.");    }    final int newsize=(size >= LAST_GROW_SIZE) ? MAX_ARRAY_SIZE : (size + (size >> 1) + 1);    final int[] oldd=data;    data=new int[newsize];    System.arraycopy(oldd,0,data,0,pos);    System.arraycopy(oldd,pos,data,pos + 1,size - pos);  } else {    System.arraycopy(data,pos,data,pos + 1,size - pos);  }  data[pos]=val;  size++;}  }
class C{  private boolean isParentMaximizable(){  if (rootParent instanceof JFrame) {    return ((JFrame)rootParent).isResizable();  }  return false;}  }
class C{  public AuthenticationFailedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public int hashCode(){  return 1;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitFloatMemberValue(this);}  }
class C{  public boolean isSmallestMinZ(final PlanetModel planetModel){  if (minZ == null)   return false;  return minZ - planetModel.getMinimumZValue() < Vector.MINIMUM_RESOLUTION;}  }
class C{  public boolean isEmpty(){  return height < 0;}  }
class C{  public long vsize(){  return Long.parseLong(fields[22]);}  }
class C{  private static String[] nameMethodFields(RemoteClass.Method[] methods){  String[] names=new String[methods.length];  for (int i=0; i < names.length; i++) {    names[i]="$method_" + methods[i].getName() + "_"+ i;  }  return names;}  }
class C{  protected void inferCaller(String loggerClassName){  needToInferCaller=false;  boolean isSearchingForLogger=true;  for (  StackTraceElement elem : new Throwable().getStackTrace()) {    String className=elem.getClassName();    boolean matches=className.equals(loggerClassName);    if (matches && isSearchingForLogger) {      isSearchingForLogger=false;      continue;    }    if (!matches && !isSearchingForLogger) {      setSourceClassName(className);      setSourceMethodName(elem.getMethodName());      return;    }  }}  }
class C{  public OrgJobDescription(){  super(KEY);}  }
class C{  public static String jdkVendor(){  return jdkVendor;}  }
class C{  public static Automaton makeEmpty(){  Automaton a=new Automaton();  a.finishState();  return a;}  }
class C{  public boolean hasModeSupport(){  return isAvailable() && mCapabilities.intersects(mAllModes);}  }
class C{  public void trimToSize(){  int newCapacity=nextPrime((int)(1 + 1.2 * size()));  if (table.length > newCapacity) {    rehash(newCapacity);  }}  }
class C{  public TitlePage titleTypeface(String typefacePath){  this.titleTypefacePath=typefacePath;  return this;}  }
class C{  public TimestampValidityState(long timestamp){  myTimestamp=timestamp;}  }
class C{  public boolean hasMainGun(){  return !m_bHasNoMainGun;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static Dog maxDog(Dog[] dogs){  Dog maxDog=dogs[0];  for (  Dog d : dogs) {    if (d.size > maxDog.size) {      maxDog=d;    }  }  return maxDog;}  }
class C{  public int memberOf(){  return theMemberOf;}  }
class C{  private static int byteCompaction(int mode,int[] codewords,Charset encoding,int codeIndex,StringBuilder result){  ByteArrayOutputStream decodedBytes=new ByteArrayOutputStream();  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedBytes.write((byte)(value >> (8 * (5 - j))));          }          value=0;          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      decodedBytes.write((byte)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        for (int j=0; j < 6; ++j) {          decodedBytes.write((byte)(value >> (8 * (5 - j))));        }        value=0;        count=0;      }    }  }  result.append(new String(decodedBytes.toByteArray(),encoding));  return codeIndex;}  }
class C{  @Override public void open() throws Exception {  this.isOpen=true;  this.sourceTuple=null;}  }
class C{  public static int[] matrixToArray(int[][] m){  int[] list=new int[m.length * m[0].length];  int k=0;  for (int i=0; i < m.length; i++) {    for (int j=0; j < m[i].length; j++) {      list[k]=m[i][j];      k++;    }  }  return list;}  }
class C{  @Secured(SecurityFunctions.FN_NOTIFICATION_REGISTRATION_STATUS_PUT) @RequestMapping(value="/notificationRegistrationStatus/namespaces/{namespace}/notificationNames/{notificationName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) public NotificationRegistrationStatusUpdateResponse updateNotificationRegistrationStatus(@PathVariable("namespace") String namespace,@PathVariable("notificationName") String notificationName,@RequestBody NotificationRegistrationStatusUpdateRequest notificationRegistrationStatusUpdateRequest){  return notificationRegistrationStatusService.updateNotificationRegistrationStatus(namespace,notificationName,notificationRegistrationStatusUpdateRequest);}  }
class C{  public Socket createSocket(InetAddress address,int port,InetAddress myAddress,int myPort) throws IOException {  if (myAddress != null)   return new Socket(address,port,myAddress,myPort); else   if (port != 0) {    Socket sock=new Socket();    sock.bind(new InetSocketAddress(port));    sock.connect(new InetSocketAddress(address,port));    return sock;  } else   return new Socket(address,port);}  }
class C{  public ColumnVisibilityAction(TableColumn column){  super((String)null);  setStateAction();  installColumn(column);}  }
class C{  public static void main(String... a) throws Exception {  TestPerfectHash test=(TestPerfectHash)TestBase.createCaller().init();  test.measure();  largeFile();  test.test();  test.measure();}  }
class C{  private void sendPartiallyMinedBlockUpdateToAllPlayers(PartiallyMinedBlock block){  MultiMine.instance().networkHelper.sendPacketToAllAroundPoint(new PartialBlockPacket("server",block.getPos().getX(),block.getPos().getY(),block.getPos().getZ(),block.getProgress()),new TargetPoint(block.getDimension(),block.getPos().getX(),block.getPos().getY(),block.getPos().getZ(),32D));}  }
class C{  public boolean isSwitchListEnabled(){  return _switchList;}  }
class C{  public List<FeedItem> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public static boolean toBooleanValue(double d){  return d != 0;}  }
class C{  public boolean intersect(Sector sector){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","intersect","missingSector"));  }  if ((this.minLatitude < sector.maxLatitude) && (this.maxLatitude > sector.minLatitude) && (this.minLongitude < sector.maxLongitude)&& (this.maxLongitude > sector.minLongitude)) {    if (this.minLatitude < sector.minLatitude)     this.minLatitude=sector.minLatitude;    if (this.maxLatitude > sector.maxLatitude)     this.maxLatitude=sector.maxLatitude;    if (this.minLongitude < sector.minLongitude)     this.minLongitude=sector.minLongitude;    if (this.maxLongitude > sector.maxLongitude)     this.maxLongitude=sector.maxLongitude;    return true;  }  return false;}  }
class C{  public static void pairwiseMultiply(float[] a,float[] b,float[] result){  if (a.length != b.length) {    throw new RuntimeException();  }  for (int i=0; i < result.length; i++) {    result[i]=a[i] * b[i];  }}  }
class C{  public static boolean isPerAppThemeComponent(String component){  return !(DEFAULT_PKG.equals(component) || ThemeConfig.SYSTEMUI_STATUS_BAR_PKG.equals(component) || ThemeConfig.SYSTEMUI_NAVBAR_PKG.equals(component));}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public Row createRow(Value[] data,int memory){  return database.createRow(data,memory);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__CHARACTER:    return getCharacter();case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__SEQUENCE:  return getSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void endVisit(ContinueStatement node){}  }
class C{  private NeuronDialog(final List<Neuron> neurons){  neuronList=neurons;}  }
class C{  public void addMoney(Money money){  getMoney().add(money);}  }
class C{  public Object clone() throws CloneNotSupportedException {  FilterExprWalker clone=(FilterExprWalker)super.clone();  if (null != m_exprObj)   clone.m_exprObj=(XNodeSet)m_exprObj.clone();  return clone;}  }
class C{  private static PlanningCoCodingGroup[] findCocodesBruteForce(CompressedSizeEstimator sizeEstimator,float numRowsWeight,PlanningCoCodingGroup[] singltonGroups){  PriorityQueue<PlanningGroupMergeAction> q=new PriorityQueue<PlanningGroupMergeAction>();  for (int leftIx=0; leftIx < singltonGroups.length; leftIx++) {    PlanningCoCodingGroup leftGrp=singltonGroups[leftIx];    for (int rightIx=leftIx + 1; rightIx < singltonGroups.length; rightIx++) {      PlanningCoCodingGroup rightGrp=singltonGroups[rightIx];      float cardRatio=leftGrp.getCardinalityRatio() + rightGrp.getCardinalityRatio();      if (cardRatio < GROUPABILITY_THRESHOLD) {        PlanningGroupMergeAction potentialMerge=new PlanningGroupMergeAction(sizeEstimator,numRowsWeight,leftGrp,rightGrp);        if (potentialMerge.getChangeInSize() < 0) {          q.add(potentialMerge);        }      }    }  }  PlanningCoCodingGroup[] colGroups=singltonGroups;  while (q.size() > 0) {    PlanningGroupMergeAction merge=q.poll();    int leftIx=findInArray(colGroups,merge.getLeftGrp());    int rightIx=findInArray(colGroups,merge.getRightGrp());    if (leftIx < 0 || rightIx < 0) {    } else {      PlanningCoCodingGroup mergedGrp=merge.getMergedGrp();      PlanningCoCodingGroup[] newColGroups=new PlanningCoCodingGroup[colGroups.length - 1];      int targetIx=0;      for (int i=0; i < colGroups.length; i++) {        if (i != leftIx && i != rightIx) {          newColGroups[targetIx]=colGroups[i];          targetIx++;        }      }      newColGroups[newColGroups.length - 1]=mergedGrp;      for (int i=0; i < newColGroups.length - 1; i++) {        PlanningCoCodingGroup newLeftGrp=newColGroups[i];        PlanningCoCodingGroup newRightGrp=mergedGrp;        if (newLeftGrp.getCardinalityRatio() + newRightGrp.getCardinalityRatio() < GROUPABILITY_THRESHOLD) {          PlanningGroupMergeAction newPotentialMerge=new PlanningGroupMergeAction(sizeEstimator,numRowsWeight,newLeftGrp,newRightGrp);          if (newPotentialMerge.getChangeInSize() < 0) {            q.add(newPotentialMerge);          }        }      }      colGroups=newColGroups;    }  }  return colGroups;}  }
class C{  public void deleteCustomerPaymentTypes(VOOrganization customerOrg) throws ObjectNotFoundException, OperationNotPermittedException, OperationPendingException {  List<VOOrganizationPaymentConfiguration> emptyPaymentConfig=Arrays.asList(new VOOrganizationPaymentConfiguration[]{newVOOrganizationPaymentConfiguration(customerOrg,null)});  accountService.savePaymentConfiguration(getDefaultPaymentConfig(),emptyPaymentConfig,getDefaultServicePaymentConfig(),null);}  }
class C{  void moveMethodsIntoClasses(ClassMemberDeclaration declaration){  Node classMembers=declaration.classNode.getLastChild();  String fieldName=declaration.memberName;  declaration.exprRoot.detachFromParent();  declaration.rhs.detachFromParent();  Node memberFunc=IR.memberFunctionDef(fieldName,declaration.rhs);  memberFunc.setStaticMember(declaration.isStatic);  memberFunc.setJSDocInfo(declaration.jsDoc);  if (declaration.classNode.getToken() == Token.INTERFACE) {    Node body=declaration.rhs.getLastChild();    Preconditions.checkState(body.isBlock());    if (body.getChildCount() != 0) {      compiler.report(JSError.make(declaration.rhs,GentsErrorManager.GENTS_CLASS_PASS_ERROR,String.format("Interface method %s should be empty.",declaration.memberName)));    }    declaration.rhs.replaceChild(body,new Node(Token.EMPTY));  }  classMembers.addChildToBack(memberFunc);  nodeComments.moveComment(declaration.exprRoot,memberFunc);  compiler.reportCodeChange();}  }
class C{  @Before public void beforeTest(){  ServerConfDatabaseCtx.get().beginTransaction();}  }
class C{  private static byte char64(char x){  if (x > index_64.length) {    return -1;  }  return index_64[x];}  }
class C{  @Override public final String readUTF() throws IOException {  return dis.readUTF();}  }
class C{  public void dropEntireInventory(World world,int x,int y,int z,Block par5,int par6){  TileEntity tileEntity=world.getTileEntity(x,y,z);  if (tileEntity != null) {    if (tileEntity instanceof IInventory) {      IInventory inventory=(IInventory)tileEntity;      for (int i=0; i < inventory.getSizeInventory(); ++i) {        ItemStack var7=inventory.getStackInSlot(i);        if (var7 != null) {          Random random=new Random();          float var8=random.nextFloat() * 0.8F + 0.1F;          float var9=random.nextFloat() * 0.8F + 0.1F;          float var10=random.nextFloat() * 0.8F + 0.1F;          while (var7.stackSize > 0) {            int var11=random.nextInt(21) + 10;            if (var11 > var7.stackSize) {              var11=var7.stackSize;            }            var7.stackSize-=var11;            EntityItem var12=new EntityItem(world,(x + var8),(y + var9),(z + var10),new ItemStack(var7.getItem(),var11,var7.getItemDamage()));            if (var7.hasTagCompound()) {              var12.getEntityItem().setTagCompound((NBTTagCompound)var7.getTagCompound().copy());            }            float var13=0.05F;            var12.motionX=((float)random.nextGaussian() * var13);            var12.motionY=((float)random.nextGaussian() * var13 + 0.2F);            var12.motionZ=((float)random.nextGaussian() * var13);            world.spawnEntityInWorld(var12);            if (var7.stackSize <= 0) {              inventory.setInventorySlotContents(i,null);            }          }        }      }    }  }}  }
class C{  public DateOrTimeProperty(Date date,boolean hasTime){  setDate(date,hasTime);}  }
class C{  public void add(String fieldName,String value){  if (fieldName == null)   throw new IllegalArgumentException("fieldname == null");  if (value == null)   throw new IllegalArgumentException("value == null");  if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {    throw new IllegalArgumentException("Unexpected header: " + fieldName + ": "+ value);  }  addLenient(fieldName,value);}  }
class C{  public boolean hasWildcard(){  return WILDCARD.equals(type) || WILDCARD.equals(subtype);}  }
class C{  private static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private Coordinate intersection(Coordinate p1,Coordinate p2,Coordinate q1,Coordinate q2){  Coordinate intPt=intersectionWithNormalization(p1,p2,q1,q2);  if (!isInSegmentEnvelopes(intPt)) {    intPt=new Coordinate(nearestEndpoint(p1,p2,q1,q2));  }  if (precisionModel != null) {    precisionModel.makePrecise(intPt);  }  return intPt;}  }
class C{  public void testCreateEmbeddedContainerWithExtraClasspathLocation() throws Exception {  String resourceValue="file in extra classpath";  File resourceFile=File.createTempFile("maven2-plugin-test-embedded-extra",".txt");  resourceFile.deleteOnExit();  String resourceName=resourceFile.getName();  String resourceLocation=resourceFile.getParent();  FileOutputStream os=new FileOutputStream(resourceFile);  os.write(resourceValue.getBytes("UTF-8"));  os.close();  Dependency dependencyElement=new Dependency();  dependencyElement.setLocation(resourceLocation);  org.codehaus.cargo.maven2.configuration.Container containerElement=setUpContainerElement(new EmbeddedLocalContainerStub());  containerElement.setDependencies(new Dependency[]{dependencyElement});  org.codehaus.cargo.container.EmbeddedLocalContainer container=(EmbeddedLocalContainer)containerElement.createContainer(new StandaloneLocalConfigurationStub("configuration/home"),new NullLogger(),createTestCargoProject("whatever"));  assertEquals(resourceValue,getResource(container.getClassLoader(),resourceName));  assertEquals(resourceValue,getResource(Thread.currentThread().getContextClassLoader(),resourceName));}  }
class C{  public ObjectFactory(){}  }
class C{  public MarketplaceRemovedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public List<NetworkFCZoneInfo> unexportVolumes(URI varrayURI,Collection<URI> volUris,URI exportGroupUri,URI storagePortUri,String initiatorPort,boolean hasExistingVolumes){  List<NetworkFCZoneInfo> ourReferences=new ArrayList<NetworkFCZoneInfo>();  VirtualArray virtualArray=_dbClient.queryObject(VirtualArray.class,varrayURI);  if (virtualArray != null && virtualArray.getAutoSanZoning() == false) {    _log.info("Automatic SAN zoning is disabled in virtual array: " + virtualArray.getLabel());    return null;  }  initiatorPort=formatWWN(initiatorPort);  StoragePort port=null;  try {    port=_dbClient.queryObject(StoragePort.class,storagePortUri);    if (port == null) {      return null;    }  } catch (  DatabaseException ex) {    return null;  }  List<String> endPoints=new ArrayList<String>();  endPoints.add(initiatorPort);  endPoints.add(formatWWN(port.getPortNetworkId()));  String key=null;{    NetworkFCZoneInfo fabricInfo=new NetworkFCZoneInfo();    fabricInfo.setEndPoints(endPoints);    key=fabricInfo.makeEndpointsKey();  }  Map<String,FCZoneReference> volRefMap=makeExportToReferenceMap(key);  if (volRefMap.isEmpty()) {    return null;  } else {    for (    URI volUri : volUris) {      FCZoneReference ourReference=volRefMap.get(make2UriKey(volUri,exportGroupUri));      if (ourReference == null) {        continue;      }      NetworkFCZoneInfo fabricInfo=createZoneInfoForRef(ourReference,volUri,initiatorPort,port.getPortNetworkId(),null);      ourReferences.add(fabricInfo);      volRefMap.remove(make2UriKey(volUri,exportGroupUri));    }    boolean live=false;    for (    FCZoneReference ref : volRefMap.values()) {      if (ref.getInactive() == false) {        BlockObject vol=BlockObject.fetch(_dbClient,ref.getVolumeUri());        ExportGroup group=_dbClient.queryObject(ExportGroup.class,ref.getGroupUri());        if (vol != null && vol.getInactive() == false && group != null && group.getInactive() == false) {          live=true;        } else {          _dbClient.markForDeletion(ref);        }      }    }    if (live == false && hasExistingVolumes == false) {      for (      NetworkFCZoneInfo fabricInfo : ourReferences) {        fabricInfo._isLastReference=true;        NetworkLite portNet=getStoragePortNetwork(port);        NetworkLite iniNet=BlockStorageScheduler.lookupNetworkLite(_dbClient,StorageProtocol.block2Transport("FC"),initiatorPort);        List<NetworkSystem> networkSystems=getZoningNetworkSystems(iniNet,portNet);        for (        NetworkSystem ns : networkSystems) {          if (!ns.getId().equals(fabricInfo.getNetworkDeviceId())) {            fabricInfo.setAltNetworkDeviceId(ns.getId());            break;          }        }      }    }    return ourReferences;  }}  }
class C{  @Override protected Parcelable onSaveInstanceState(){  final int scrollY=getScrollY();  setScrollY(0);  final Parcelable returnValue=super.onSaveInstanceState();  setScrollY(scrollY);  return returnValue;}  }
class C{  public boolean retainAll(AbstractShortList other){  if (!(other instanceof ShortArrayList))   return super.retainAll(other);  int limit=other.size() - 1;  int j=0;  short[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    ShortArrayList sortedList=(ShortArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public ObjectFactory(){}  }
class C{  public static long availableMemory(){  return RUNTIME.freeMemory() + (RUNTIME.maxMemory() - RUNTIME.totalMemory());}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public StrBuilder appendPadding(int length,char padChar){  if (length >= 0) {    ensureCapacity(size + length);    for (int i=0; i < length; i++) {      buffer[size++]=padChar;    }  }  return this;}  }
class C{  public void fireObjectsInserted(DBIDs insertions){  fireObjectsChanged(insertions,Type.INSERT);}  }
class C{  public JSONArray put(Object value){  add(value);  return this;}  }
class C{  public void assertNotEqual(double expected,double actual,double minRelativeError,String errorMessage){  TestUtils.assertNotEqual(expected,actual,minRelativeError,errorMessage);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement1;  Element newElement2;  String attribute1;  String attribute2;  doc=(Document)load("staff",true);  newElement1=doc.createElement("ADDRESS");  newElement2=doc.createElement("address");  newElement1.setAttribute("district","Fort Worth");  newElement2.setAttribute("county","Dallas");  attribute1=newElement1.getAttribute("district");  attribute2=newElement2.getAttribute("county");  assertEquals("attrib1","Fort Worth",attribute1);  assertEquals("attrib2","Dallas",attribute2);}  }
class C{  public void run(){  if (ExecutionThread.currentThread().isKilled()) {    return;  }  varPath.getValue().add(expression.evaluate());}  }
class C{  @Override protected void paintComponent(Graphics g){  if (img != null) {    setOpaque(false);    g.drawImage(img,0,0,DisplayUtils.getScaledSize(img.getWidth()),DisplayUtils.getScaledSize(img.getHeight()),null);  }  super.paintComponent(g);}  }
class C{  public boolean hasProxy(String proxyName){  return proxyMap.containsKey(proxyName);}  }
class C{  public Map<String,String> retrieveParameters(ModeledAuthenticatedUser user,String identifier){  Map<String,String> parameterMap=new HashMap<String,String>();  boolean canRetrieveParameters;  try {    canRetrieveParameters=hasObjectPermission(user,identifier,ObjectPermission.Type.UPDATE);  } catch (  GuacamoleException e) {    return parameterMap;  }  if (canRetrieveParameters) {    for (    SharingProfileParameterModel parameter : parameterMapper.select(identifier))     parameterMap.put(parameter.getName(),parameter.getValue());  }  return parameterMap;}  }
class C{  public void addButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode != null) {    statusText1.setText(rb.getString("Error1") + Integer.toString(nodeAddress) + rb.getString("Error2"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeType=nodeTypeBox.getSelectedIndex();  curNode=new SerialNode(nodeAddress,nodeType);  setNodeParameters();  SerialSensorManager.instance().registerSensorsForNode(curNode);  resetNotes();  changedNode=true;  statusText1.setText(rb.getString("FeedBackAdd") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  public double optDouble(String key){  return optDouble(key,Double.NaN);}  }
class C{  @RpcMethod public void deleteDisks(List<String> diskIds,AsyncMethodCallback<Host.AsyncClient.delete_disks_call> handler) throws RpcException {  ensureClient();  DeleteDisksRequest deleteDisksRequest=new DeleteDisksRequest(diskIds);  clientProxy.setTimeout(DELETE_DISK_TIMEOUT_MS);  logger.info("delete_disks diskIds {}, target {}, request {}",diskIds,getHostIp(),deleteDisksRequest);  try {    clientProxy.delete_disks(deleteDisksRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public void reset(){  stopPlayback();  setDataSource(null,null);  mediaPlayerImpl.reset();}  }
class C{  public boolean isEmailAvailable(){  ServiceDiscoveryManager discoManager=ServiceDiscoveryManager.getInstanceFor(connection);  try {    String workgroupService=StringUtils.parseServer(workgroupJID);    DiscoverInfo infoResult=discoManager.discoverInfo(workgroupService);    return infoResult.containsFeature("jive:email:provider");  } catch (  XMPPException e) {    return false;  }}  }
class C{  void onShow(TabSelectionType selectionType,long previousTimestampMillis){  long now=SystemClock.elapsedRealtime();  if (mLastShowMillis != -1 && selectionType == TabSelectionType.FROM_USER) {    long age=now - mLastShowMillis;    int rank=computeMRURank(mTab,mTabModel);    RecordHistogram.recordCountHistogram("Tab.SwitchedToForegroundAge",(int)age);    RecordHistogram.recordCountHistogram("Tab.SwitchedToForegroundMRURank",rank);  }  increaseTabShowCount();  boolean isOnBrowserStartup=sAllTabsShowCount == 1;  boolean performsLazyLoad=mTabCreationState == TabCreationState.FROZEN_FOR_LAZY_LOAD && mLastShowMillis == -1;  int status;  if (mRestoreStartedAtMillis == -1 && !performsLazyLoad) {    status=TAB_STATUS_MEMORY_RESIDENT;  } else   if (mLastShowMillis == -1) {    if (isOnBrowserStartup) {      status=TAB_STATUS_RELOAD_COLD_START_FG;    } else     if (mTabCreationState == TabCreationState.FROZEN_ON_RESTORE) {      status=TAB_STATUS_RELOAD_COLD_START_BG;    } else     if (mTabCreationState == TabCreationState.FROZEN_FOR_LAZY_LOAD) {      status=TAB_STATUS_LAZY_LOAD_FOR_BG_TAB;    } else {      assert mTabCreationState == TabCreationState.LIVE_IN_FOREGROUND || mTabCreationState == TabCreationState.LIVE_IN_BACKGROUND;      status=TAB_STATUS_RELOAD_EVICTED;    }  } else {    status=TAB_STATUS_RELOAD_EVICTED;  }  if (selectionType == TabSelectionType.FROM_USER) {    RecordHistogram.recordEnumeratedHistogram("Tab.StatusWhenSwitchedBackToForeground",status,TAB_STATUS_LIM);  }  if (mLastShowMillis == -1) {    if (mTabCreationState == TabCreationState.LIVE_IN_BACKGROUND) {      if (mRestoreStartedAtMillis == -1) {        RecordHistogram.recordEnumeratedHistogram("Tab.BackgroundLoadStatus",TAB_BACKGROUND_LOAD_SHOWN,TAB_BACKGROUND_LOAD_LIM);      } else {        RecordHistogram.recordEnumeratedHistogram("Tab.BackgroundLoadStatus",TAB_BACKGROUND_LOAD_LOST,TAB_BACKGROUND_LOAD_LIM);      }    } else     if (mTabCreationState == TabCreationState.FROZEN_FOR_LAZY_LOAD) {      assert mRestoreStartedAtMillis == -1;      RecordHistogram.recordEnumeratedHistogram("Tab.BackgroundLoadStatus",TAB_BACKGROUND_LOAD_SKIPPED,TAB_BACKGROUND_LOAD_LIM);    }  }  if (mLastShowMillis == -1 && previousTimestampMillis > 0) {    if (isOnBrowserStartup) {      RecordHistogram.recordCountHistogram("Tabs.ForegroundTabAgeAtStartup",(int)millisecondsToMinutes(System.currentTimeMillis() - previousTimestampMillis));    } else     if (selectionType == TabSelectionType.FROM_USER) {      RecordHistogram.recordCountHistogram("Tab.AgeUponRestoreFromColdStart",(int)millisecondsToMinutes(System.currentTimeMillis() - previousTimestampMillis));    }  }  mLastShowMillis=now;  updateTabState(TAB_STATE_ACTIVE);}  }
class C{  public void addHyperedgeInNode(HyperEdge hyperEdge){  if (hyperEdge != null) {    if (null == hyperedges)     hyperedges=new ArrayList<>();    hyperedges.add(hyperEdge);    semiringPlus(hyperEdge);  }}  }
class C{  public AlternatingSequencesWriter(SequenceDataSource source,File outputDir,long sizeLimit,final Collection<String> namesToExclude,PrereadType type,boolean compressed,Integer trimQualityThreshold){  super(source,outputDir,sizeLimit,namesToExclude,type,compressed,trimQualityThreshold);}  }
class C{  public void resetCursors(){  nextCursor=null;  previousCursor=null;}  }
class C{  static public FunctionNode MIN(final ValueExpressionNode v1,final ValueExpressionNode v2){  return new FunctionNode(FunctionRegistry.MIN,null,new ValueExpressionNode[]{v1,v2});}  }
class C{  public void nextSeed(){  currentSeed++;  currentNFE=0;  updateStatistics();  sendProgressEvent(true);}  }
class C{  protected double distance(int doc,FunctionValues dv1,FunctionValues dv2){  double[] vals1=new double[source1.dimension()];  double[] vals2=new double[source1.dimension()];  dv1.doubleVal(doc,vals1);  dv2.doubleVal(doc,vals2);  return vectorDistance(vals1,vals2,power,oneOverPower);}  }
class C{  public void addRaster(int x1,int y1,String url,LinkProperties properties) throws IOException {  LinkRaster.write(x1,y1,url,properties,link.dos);}  }
class C{  public Set<ClientProducerInternal> cloneProducers(){  Set<ClientProducerInternal> producersClone;synchronized (producers) {    producersClone=new HashSet<>(producers);  }  return producersClone;}  }
class C{  @LargeTest public void testThumbnailForMPEG4QCIF() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  final int atTime=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth();  final int outHeight=mediaVideoItem.getHeight() * 2;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public SingleClientConnManager(HttpParams params,SchemeRegistry schreg){  if (schreg == null) {    throw new IllegalArgumentException("Scheme registry must not be null.");  }  this.schemeRegistry=schreg;  this.connOperator=createConnectionOperator(schreg);  this.uniquePoolEntry=new PoolEntry();  this.managedConn=null;  this.lastReleaseTime=-1L;  this.alwaysShutDown=false;  this.isShutDown=false;}  }
class C{  @Deprecated public Block(NetworkParameters params,byte[] payloadBytes) throws ProtocolException {  super(params,payloadBytes,0,params.getDefaultSerializer(),payloadBytes.length);}  }
class C{  public <T>T waitForState(String uri,Class<T> type,Predicate<T> predicate) throws Throwable {  return ServiceHostUtils.waitForServiceState(type,uri,predicate,this,this.waitIterationSleep,this.waitIterationCount,null);}  }
class C{  protected boolean isLob(MetadataClass referenceClass,boolean isForMapKey){  return hasLob(isForMapKey);}  }
class C{  @Override public boolean isRunning(){  return false;}  }
class C{  @Override public void writeCredentials(final URI targetUri,final Credential credentials){  validateTargetUri(targetUri);  Credential.validate(credentials);  Trace.writeLine("SecretStore::writeCredentials");  final String targetName=this.getTargetName(targetUri);  this.writeCredential(targetName,credentials);  _credentialCache.writeCredentials(targetUri,credentials);}  }
class C{  public void changePassword(String user,String currentPassword,String newPassword) throws InterruptedException {  driver.findElement(By.xpath(uiElementMapper.getElement("emm.home.navbar.logged.in.user.span"))).click();  driver.findElement(By.id(uiElementMapper.getElement("emm.home.change.password.button.id"))).click();  CommonUtil.setValueOfHiddenInput(driver,uiElementMapper.getElement("emm.home.user.input.id"),user);  By currentPasswordInput=By.id(uiElementMapper.getElement("emm.home.change.password.current.pwd.input"));  wait.until(ExpectedConditions.visibilityOfElementLocated(currentPasswordInput));  WebElement inputElement=driver.findElement(currentPasswordInput);  inputElement.sendKeys(currentPassword);  inputElement=driver.findElement(By.id(uiElementMapper.getElement("emm.home.change.password.new.pwd.input")));  inputElement.sendKeys(newPassword);  inputElement=driver.findElement(By.id(uiElementMapper.getElement("emm.home.change.password.retype.pwd.input")));  inputElement.sendKeys(newPassword);  driver.findElement(By.id(uiElementMapper.getElement("emm.home.change.password.yes.link.id"))).click();  CommonUtil.waitAndClick(driver,By.id(uiElementMapper.getElement("emm.home.change.password.success.link")));}  }
class C{  protected List<SQLExpr> parseIntoArgs(){  List<SQLExpr> args=new ArrayList<SQLExpr>();  if (lexer.token() == (Token.INTO)) {    accept(Token.INTO);    for (; ; ) {      SQLExpr var=exprParser.primary();      if (var instanceof SQLIdentifierExpr) {        var=new SQLVariantRefExpr(((SQLIdentifierExpr)var).getName());      }      args.add(var);      if (lexer.token() == Token.COMMA) {        accept(Token.COMMA);        continue;      } else {        break;      }    }  }  return args;}  }
class C{  public boolean isFromDHCP(){  return fromDHCP;}  }
class C{  protected RestClientItf createNewRestClient(URI endpoint,String username,String password,String version,Client client){  XtremIOClient xioClient=null;  if (version != null && !version.isEmpty() && Integer.valueOf(version.split(DOT_OPERATOR)[0]) >= XIO_MIN_4X_VERSION) {    xioClient=new XtremIOV2Client(endpoint,username,password,client);  } else {    xioClient=new XtremIOV1Client(endpoint,username,password,client);  }  return xioClient;}  }
class C{  public ObjectId(Date time,int inc){  this(time,_genmachine,inc);}  }
class C{  public TDoubleLongHashMap(int initialCapacity,float loadFactor,TDoubleHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public String save(){  String outcome=null;  try {    Response response=getTrackingCodeManagementService().saveTrackingCode(model.getTrackingCodeObject());    ui.handle(INFO_SAVED);    updateModelTrackingCode(response.getResult(POTrackingCode.class));  } catch (  SaaSApplicationException e) {    ui.handleException(e);    outcome=CONCURRENT_MODIFICATION_ERROR;  }  return outcome;}  }
class C{  public static boolean isAppInBackground(Context context){  ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.RunningTaskInfo> taskList=am.getRunningTasks(1);  if (taskList != null && !taskList.isEmpty()) {    ComponentName topActivity=taskList.get(0).topActivity;    if (topActivity != null && !topActivity.getPackageName().equals(context.getPackageName())) {      return true;    }  }  return false;}  }
class C{  public CurrentProject(ProjectDescriptor projectDescription){  this.projectDescription=projectDescription;  this.rootProject=projectDescription;}  }
class C{  public void close(){  mFileUploadCache.clear();  if (sLogger.isActivated()) {    sLogger.info("File upload service API is closed");  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredScope: ");  result.append(declaredScope);  result.append(')');  return result.toString();}  }
class C{  public void compileSingleFiles(List<File> modelFiles,IssueAcceptor issueAcceptor) throws N4JSCompileException {  compileSingleFiles(Collections.emptyList(),modelFiles,issueAcceptor);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.536 -0500",hash_original_method="6E13019DC70D12278C5C1075A86F8BFE",hash_generated_method="7D47522DE1396B44E04041823D17AA3A") public final void sendMessage(Message msg){  if (mSmHandler == null)   return;  mSmHandler.sendMessage(msg);}  }
class C{  public static String removeSpecialChar(String tempStr){  if (tempStr != null) {    tempStr=replace(tempStr,",","",true,true);    tempStr=replace(tempStr,".","",true,true);    tempStr=replace(tempStr,"!","",true,true);    tempStr=replace(tempStr,"?","",true,true);    tempStr=replace(tempStr,"'","",true,true);    tempStr=replace(tempStr,":","",true,true);    tempStr=replace(tempStr,"(","",true,true);    tempStr=replace(tempStr,")","",true,true);    tempStr=replace(tempStr,"+","",true,true);    tempStr=replace(tempStr,"-","",true,true);    tempStr=replace(tempStr,">","",true,true);    tempStr=replace(tempStr,"<","",true,true);    tempStr=replace(tempStr,"/","",true,true);    while (tempStr.indexOf("  ") > 0) {      tempStr=replace(tempStr,"  "," ",true,true);    }    tempStr=replace(tempStr,"	"," ",true,true);  }  return tempStr;}  }
class C{  protected void updateEntry(HashEntry entry,Object newValue){  entry.setValue(newValue);}  }
class C{  private static void sort(long[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        long ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        long a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      long last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    long t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    long t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    long t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    long t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    long pivot1=a[e2];    long pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      long ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        long ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    long pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      long ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public RawData(byte[] data,InetAddress address,int port,boolean multicast){  this(data,address,port,null,multicast);}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeObject(approximation);}  }
class C{  public boolean dispatch(boolean complete) throws IOException, XNIException {  try {    boolean again;    do {      again=false;switch (fScannerState) {case SCANNER_STATE_TRAILING_MISC:{          fEntityScanner.skipSpaces();          if (fEntityScanner.skipChar('<')) {            setScannerState(SCANNER_STATE_START_OF_MARKUP);            again=true;          } else {            setScannerState(SCANNER_STATE_CONTENT);            again=true;          }          break;        }case SCANNER_STATE_START_OF_MARKUP:{        fMarkupDepth++;        if (fEntityScanner.skipChar('?')) {          setScannerState(SCANNER_STATE_PI);          again=true;        } else         if (fEntityScanner.skipChar('!')) {          setScannerState(SCANNER_STATE_COMMENT);          again=true;        } else         if (fEntityScanner.skipChar('/')) {          reportFatalError("MarkupNotRecognizedInMisc",null);          again=true;        } else         if (isValidNameStartChar(fEntityScanner.peekChar())) {          reportFatalError("MarkupNotRecognizedInMisc",null);          scanStartElement();          setScannerState(SCANNER_STATE_CONTENT);        } else         if (isValidNameStartHighSurrogate(fEntityScanner.peekChar())) {          reportFatalError("MarkupNotRecognizedInMisc",null);          scanStartElement();          setScannerState(SCANNER_STATE_CONTENT);        } else {          reportFatalError("MarkupNotRecognizedInMisc",null);        }        break;      }case SCANNER_STATE_PI:{      scanPI();      setScannerState(SCANNER_STATE_TRAILING_MISC);      break;    }case SCANNER_STATE_COMMENT:{    if (!fEntityScanner.skipString("--")) {      reportFatalError("InvalidCommentStart",null);    }    scanComment();    setScannerState(SCANNER_STATE_TRAILING_MISC);    break;  }case SCANNER_STATE_CONTENT:{  int ch=fEntityScanner.peekChar();  if (ch == -1) {    setScannerState(SCANNER_STATE_TERMINATED);    return false;  }  reportFatalError("ContentIllegalInTrailingMisc",null);  fEntityScanner.scanChar();  setScannerState(SCANNER_STATE_TRAILING_MISC);  break;}case SCANNER_STATE_REFERENCE:{reportFatalError("ReferenceIllegalInTrailingMisc",null);setScannerState(SCANNER_STATE_TRAILING_MISC);break;}case SCANNER_STATE_TERMINATED:{return false;}}} while (complete || again);} catch (MalformedByteSequenceException e) {fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (CharConversionException e) {fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (EOFException e) {if (fMarkupDepth != 0) {reportFatalError("PrematureEOF",null);return false;}setScannerState(SCANNER_STATE_TERMINATED);return false;}return true;}  }
class C{  public final boolean canSetInt(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetInt());}  }
class C{  public Composer reboundBottom(boolean reboundBottom){  mReboundBottom=reboundBottom;  return this;}  }
class C{  private void sendNext(){  SendPacket packet=mPacket;  mPacket=null;  if (packet != null) {    mStatus=mCursor == mTotal;    packet.setSuccess(mStatus);    packet.endPacket();    mCursor=mTotal;    notifyProgress();  }  mSending.set(!mQueue.isEmpty());  if (mSending.get()) {    packet=mQueue.poll();    if (packet.isCanceled()) {      sendNext();    } else {      mPacket=packet;      sendHead();    }  }}  }
class C{  public void refreshVolumeProperties(URI systemURI,List<URI> volumeURIs) throws Exception {  StorageSystem storage=dbClient.queryObject(StorageSystem.class,systemURI);  for (  URI volumeURI : volumeURIs) {    Volume volume=dbClient.queryObject(Volume.class,volumeURI);    CIMObjectPath volumePath=cimPath.getVolumePath(storage,volume.getNativeId());    CIMInstance volumeInstance=helper.getInstance(storage,volumePath,false,false,null);    if (volumeInstance != null && volume != null) {      String wwn=CIMPropertyFactory.getPropertyValue(volumeInstance,SmisConstants.CP_WWN_NAME);      log.info(String.format("Updating volume %s %s wwn from %s to %s ",volume.getLabel(),volume.getId().toString(),volume.getWWN(),wwn.toUpperCase()));      volume.setWWN(wwn.toUpperCase());      String accessState=CIMPropertyFactory.getPropertyValue(volumeInstance,SmisConstants.CP_ACCESS);      String[] statusDescriptions=CIMPropertyFactory.getPropertyArray(volumeInstance,SmisConstants.CP_STATUS_DESCRIPTIONS);      List<String> statusDescriptionList=Arrays.asList(statusDescriptions);      if (!volume.checkForRp()) {        String newAccessState=SmisUtils.generateAccessState(accessState,statusDescriptionList);        log.info(String.format("Updating volume %s %s access state from %s to %s ",volume.getLabel(),volume.getId().toString(),volume.getAccessState(),newAccessState));        volume.setAccessState(newAccessState);      }      dbClient.updateObject(volume);    }  }}  }
class C{  private WebDoc createPage(HttpServletRequest request,WebSessionCtx wsc,int AD_Role_ID,int AD_User_ID,int AD_Client_ID,int AD_Org_ID){  String windowTitle="Menu";  WebDoc doc=WebDoc.create(windowTitle);  head head=doc.getHead();  head.addElement(new base().setTarget(WebEnv.TARGET_WINDOW));  head.addElement(new link(WebEnv.getBaseDirectory("/css/menu.css"),link.REL_STYLESHEET,link.TYPE_CSS));  head.addElement(new script((Element)null,WebEnv.getBaseDirectory("/js/menu.js")));  head.addElement(new script((Element)null,WebEnv.getBaseDirectory("/js/window.js")));  String statusMessage=Msg.getMsg(wsc.ctx,"SelectMenuItem");  String scriptTxt="top.document.title='" + windowTitle + " - "+ wsc.loginInfo+ "'; "+ "var defaultStatus='"+ statusMessage+ "';";  body body=doc.getBody();  body.setTitle(statusMessage);  table table=doc.getTable();  doc.setClasses("menuTable","menuHeader");  input txtSearch=new input(input.TYPE_TEXT,"txtSearch","");  txtSearch.setOnKeyDown("searchMenu('main',this.value,event,'" + WebEnv.TARGET_WINDOW + "')");  doc.getTopLeft().addElement("Find: ");  doc.getTopLeft().addElement(txtSearch);  int AD_Tree_ID=DB.getSQLValue(null,"SELECT COALESCE(r.AD_Tree_Menu_ID, ci.AD_Tree_Menu_ID)" + "FROM AD_ClientInfo ci" + " INNER JOIN AD_Role r ON (ci.AD_Client_ID=r.AD_Client_ID) "+ "WHERE AD_Role_ID=?",AD_Role_ID);  if (AD_Tree_ID <= 0)   AD_Tree_ID=10;  log.fine("doPost - AD_Tree_ID=" + AD_Tree_ID + " - "+ Env.getAD_Language(wsc.ctx));  MTree tree=new MTree(wsc.ctx,AD_Tree_ID,false,false,null);  MTreeNode root=tree.getRoot();  Enumeration en=root.preorderEnumeration();  tree.trimTree();  StringBuffer buf=new StringBuffer();  StringBuffer buffav=new StringBuffer();  en=root.preorderEnumeration();  int oldLevel=0;  while (en.hasMoreElements()) {    MTreeNode nd=(MTreeNode)en.nextElement();    int level=nd.getLevel();    if (level == 0)     continue;    while (oldLevel < level) {      if (level == 1)       buf.append("<ul class=\"mktree\"  id=\"main\">\n"); else       buf.append("<ul style=\"display:none\">\n");      oldLevel++;    }    while (oldLevel > level) {      oldLevel--;      if (oldLevel == 1)       buf.append("</ul>\n"); else       buf.append("</ul></li>\n");    }    buf.append(printNode(nd,wsc.ctx));    if (nd.isOnBar())     buffav.append(printNode(nd,wsc.ctx));  }  while (oldLevel > 0) {    oldLevel--;    if (oldLevel == 1)     buf.append("</ul>\n"); else     buf.append("</ul></li>\n");  }  buf.append("<ul><li class=\"menuSummary\" id=\"218\" onClick=\"changeMenu(event);\">Favorites<ul style=\"display:none\">\n");  buf.append(buffav);  buf.append("</ul></li></ul>\n");  td td=new td().setColSpan(2).setNoWrap(true);  td.setClass("menuCenter");  td.addElement(buf.toString());  table.addElement(new tr().addElement(td));  td=new td().setColSpan(2);  td.setClass("menuFooter");  td=new td().setColSpan(2);  td.setClass("menuFooter");  String url=request.getRequestURI() + "?Exit=true";  td.addElement(new a(url,Msg.getMsg(wsc.ctx,"Exit")));  table.addElement(new tr().addElement(td));  return doc;}  }
class C{  public void write(int c){  if (c != -1) {    current.append((char)c);  }  if (c == '\n') {    current=new StringBuffer();    lines.add(current);  }}  }
class C{  private void updateNames(){  for (  Cluster<?> cluster : clustering.getAllClusters()) {    if (names.get(cluster) == null) {      String sugname=cluster.getNameAutomatic();      Integer count=namecount.get(sugname);      if (count == null) {        count=new Integer(0);      }      names.put(cluster,sugname + " " + count.toString());      count++;      namecount.put(sugname,count);    }  }}  }
class C{  @Override public AddressMessage makeAddressMessage(byte[] payloadBytes,int length) throws ProtocolException {  return new AddressMessage(params,payloadBytes,this,length);}  }
class C{  public static Interval evensFromTo(int from,int to){  if (from % 2 != 0) {    if (from < to) {      from++;    } else {      from--;    }  }  if (to % 2 != 0) {    if (to > from) {      to--;    } else {      to++;    }  }  return Interval.fromToBy(from,to,to > from ? 2 : -2);}  }
class C{  public VTextIcon(final Component component,final String label,final int rotateHint){  fComponent=component;  fLabel=label;  fRotation=verifyRotation(label,rotateHint);  calcDimensions();  fComponent.addPropertyChangeListener(this);}  }
class C{  private void showNotification(){  CharSequence text=getText(R.string.remote_service_started);  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,Controller.class),0);  Notification notification=new Notification.Builder(this).setSmallIcon(R.drawable.stat_sample).setTicker(text).setWhen(System.currentTimeMillis()).setContentTitle(getText(R.string.remote_service_label)).setContentText(text).setContentIntent(contentIntent).build();  mNM.notify(R.string.remote_service_started,notification);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case DomPackage.FULL_TYPE_REFERENCE___MODULE_NAME_SET:    return moduleNameSet();case DomPackage.FULL_TYPE_REFERENCE___TO_STRING:  return toString();case DomPackage.FULL_TYPE_REFERENCE___FULL_TYPE_NAME:return fullTypeName();}return super.eInvoke(operationID,arguments);}  }
class C{  public float value(){  return _map._values[_index];}  }
class C{  public int indexOf(Object e,int index){  Object[] elements=getArray();  return indexOf(e,elements,index,elements.length);}  }
class C{  private void build(Document doc,Node parent){  Element e=doc.createElement(name);  if (value != null && !value.isEmpty())   e.appendChild(doc.createTextNode(value));  for (int i=0; i < attributesNames.size(); i++)   e.setAttribute(attributesNames.get(i),attributesValues.get(i).toString());  parent.appendChild(e);}  }
class C{  public static Path2D generateBorderShape(Rectangle bounds,int side,BorderPropertySet border,boolean drawInterior,float scaledOffset){  return generateBorderShape(bounds,side,border,drawInterior,scaledOffset,1);}  }
class C{  public DistTXPrecommitMessage(){}  }
class C{  public void testIntValueNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  int result=218520473;  assertTrue("incorrect value",aNumber.intValue() == result);}  }
class C{  public static Field resolveField(Class<?> claz,String name){  notNull(claz,name);  Field[] fields=claz.getDeclaredFields();  for (  Field field : fields)   if (field.getName().equals(name))   return field;  Class<?>[] suprs=claz.getInterfaces();  for (  Class<?> supr : suprs) {    Field res=resolveField(supr,name);    if (res != null)     return res;  }  Class<?> supr=claz.getSuperclass();  if (supr != null)   return resolveField(supr,name);  return null;}  }
class C{  protected void after(Description description) throws Throwable {  if (jmxConnector != null) {    jmxConnector.close();    jmxConnector=null;  }  con=null;}  }
class C{  public void copyToClipboard(Object obj){  impl.copyToClipboard(obj);}  }
class C{  public void readFrom(StreamInput in) throws IOException {  nodeId=in.readOptionalString();  state=State.fromValue(in.readByte());  reason=in.readOptionalString();}  }
class C{  private void addListParameter(DaemonParameters parameters,String parameterName,List<String> list){  int i=0;  if (list == null || list.size() == 0) {    return;  }  StringBuilder listJSON=new StringBuilder();  listJSON.append("[");  for (  String item : list) {    if (i != 0) {      listJSON.append(",");    }    listJSON.append("\"" + item + "\"");    i++;  }  listJSON.append("]");  parameters.setParameter(parameterName,listJSON.toString());}  }
class C{  private void displayTiming(long millis){  SimpleDateFormat df=new SimpleDateFormat("H:mm:ss.SSS",Locale.getDefault());  df.setTimeZone(TimeZone.getTimeZone("UTC"));  System.out.println("Time spent: " + df.format(new Date(millis)));}  }
class C{  public void unregisterListeners(Plugin plugin){  for (Iterator<Listener> it=listenersByPlugin.get(plugin).iterator(); it.hasNext(); ) {    eventBus.unregister(it.next());    it.remove();  }}  }
class C{  public void onKernalStop(){  latch.countDown();}  }
class C{  RegisteredProject putProject(ProjectConfig config,FolderEntry folder,boolean updated,boolean detected) throws ServerException, ConflictException, NotFoundException {  final RegisteredProject project=new RegisteredProject(folder,config,updated,detected,this.projectTypeRegistry);  projects.put(project.getPath(),project);  return project;}  }
class C{  public MariaDbProcedureStatement clone() throws CloneNotSupportedException {  MariaDbProcedureStatement clone=(MariaDbProcedureStatement)super.clone();  clone.outputResultSet=null;  return clone;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof LifetimeAttribute))   return false;  if (obj == this)   return true;  LifetimeAttribute att=(LifetimeAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.lifetime != lifetime)   return false;  return true;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public void indentWithTabs(){  indentWithTabs(4);}  }
class C{  private String createExpandFileshareStep(Workflow workflow,String waitFor,List<FileDescriptor> fileDescriptors,String taskId){  _log.info("START Expand file system");  Map<URI,Long> filesharesToExpand=new HashMap<URI,Long>();  for (  FileDescriptor descriptor : fileDescriptors) {    FileShare fileShare=_dbClient.queryObject(FileShare.class,descriptor.getFsURI());    if (fileShare.getCapacity() != null && fileShare.getCapacity().longValue() != 0 && descriptor.getFileSize() > fileShare.getCapacity().longValue()) {      filesharesToExpand.put(fileShare.getId(),descriptor.getFileSize());    }  }  Workflow.Method expandMethod=null;  for (  Map.Entry<URI,Long> entry : filesharesToExpand.entrySet()) {    _log.info("Creating WF step for Expand FileShare for  {}",entry.getKey().toString());    FileShare fileShareToExpand=_dbClient.queryObject(FileShare.class,entry.getKey());    StorageSystem storage=_dbClient.queryObject(StorageSystem.class,fileShareToExpand.getStorageDevice());    Long fileSize=entry.getValue();    expandMethod=expandFileSharesMethod(storage.getId(),fileShareToExpand.getId(),fileSize);    waitFor=workflow.createStep(EXPAND_FILESYSTEMS_STEP,String.format("Expand FileShare %s",fileShareToExpand),waitFor,storage.getId(),storage.getSystemType(),getClass(),expandMethod,null,null);    _log.info("Creating workflow step {}",EXPAND_FILESYSTEMS_STEP);  }  return waitFor;}  }
class C{  public static URL[] pathToURLs(String path){  StringTokenizer st=new StringTokenizer(path,File.pathSeparator);  URL[] urls=new URL[st.countTokens()];  int count=0;  while (st.hasMoreTokens()) {    URL url=fileToURL(new File(st.nextToken()));    if (url != null) {      urls[count++]=url;    }  }  if (urls.length != count) {    URL[] tmp=new URL[count];    System.arraycopy(urls,0,tmp,0,count);    urls=tmp;  }  return urls;}  }
class C{  public FModel loadModel(URI uri,URI root){  ModelPersistenceHandler persistenceHandler=createModelPersistenceHandler(resourceSetProvider.get());  return (FModel)persistenceHandler.loadModel(uri,root);}  }
class C{  public void onServiceStateChanged(ServiceState serviceState){}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  int i=0;  for (i=0; i < len; i++) {    int ch1=is.read();    int ch2=is.read();    if (ch1 < 0)     return i == 0 ? -1 : i;    cbuf[off + i]=(char)((ch2 << 8) + ch1);  }  return i;}  }
class C{  public MWMSection(Properties ctx,int WM_Section_ID,String trxName){  super(ctx,WM_Section_ID,trxName);  if (WM_Section_ID == 0) {  }}  }
class C{  private void readMasterPageElement(IXMLElement elem,HashMap<String,Style> styles) throws IOException {  if (DEBUG) {    System.out.println("ODGStylesReader unsupported <" + elem.getName() + "> element.");  }}  }
class C{  public void validateContents() throws InvalidTokenException {  if (token.getSubject() == null) {    throw new InvalidTokenException(sm.getString("auth.ite.bad.subject"));  }}  }
class C{  private static int determineConsecutiveBinaryCount(CharSequence msg,byte[] bytes,int startpos) throws WriterException {  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (bytes[idx] == 63 && ch != '?') {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  @Override public void deleteSingleVolumeMirror(StorageSystem storageSystem,URI mirror,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    StringBuilder logMsgBuilder=new StringBuilder(String.format("Delete Mirror Start - Array:%s",storageSystem.getSerialNumber()));    Set<String> thickLogicalUnitIdList=new HashSet<String>();    Set<String> thinLogicalUnitIdList=new HashSet<String>();    HDSApiClient hdsApiClient=hdsApiFactory.getClient(HDSUtils.getHDSServerManagementServerInfo(storageSystem),storageSystem.getSmisUserName(),storageSystem.getSmisPassword());    String systemObjectID=HDSUtils.getSystemObjectID(storageSystem);    BlockMirror mirrorObj=dbClient.queryObject(BlockMirror.class,mirror);    logMsgBuilder.append(String.format("%nMirror:%s",mirrorObj.getLabel()));    String logicalUnitObjectId=HDSUtils.getLogicalUnitObjectId(mirrorObj.getNativeId(),storageSystem);    LogicalUnit logicalUnit=hdsApiClient.getLogicalUnitInfo(systemObjectID,logicalUnitObjectId);    if (logicalUnit == null) {      log.info(String.format("Mirror %s already deleted: ",mirrorObj.getNativeId()));      dbClient.markForDeletion(mirrorObj);    } else {      if (mirrorObj.getThinlyProvisioned()) {        thinLogicalUnitIdList.add(logicalUnitObjectId);      } else {        thickLogicalUnitIdList.add(logicalUnitObjectId);      }      log.info(logMsgBuilder.toString());      if (!thickLogicalUnitIdList.isEmpty()) {        String asyncThickLUsJobId=hdsApiClient.deleteThickLogicalUnits(systemObjectID,thickLogicalUnitIdList,storageSystem.getModel());        if (null != asyncThickLUsJobId) {          ControllerServiceImpl.enqueueJob(new QueueJob(new HDSBlockMirrorDeleteJob(asyncThickLUsJobId,mirrorObj.getStorageController(),taskCompleter)));        }      }      if (!thinLogicalUnitIdList.isEmpty()) {        String asyncThinHDSJobId=hdsApiClient.deleteThinLogicalUnits(systemObjectID,thinLogicalUnitIdList,storageSystem.getModel());        if (null != asyncThinHDSJobId) {          ControllerServiceImpl.enqueueJob(new QueueJob(new HDSBlockMirrorDeleteJob(asyncThinHDSJobId,mirrorObj.getStorageController(),taskCompleter)));        }      }    }    log.info("Delete Mirror End - Array: {} Mirror: {}",storageSystem.getSerialNumber(),mirror);  } catch (  Exception e) {    log.error("Problem in deleteSingleVolumeMirror: ",e);    ServiceError error=DeviceControllerErrors.hds.methodFailed("deleteSingleVolumeMirror",e.getMessage());    taskCompleter.error(dbClient,error);  }}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    for (LinkedEntry<K,V> header=this.header, e=header.nxt; e != header; e=e.nxt) {      if (e.value == null) {        return true;      }    }    return false;  }  for (LinkedEntry<K,V> header=this.header, e=header.nxt; e != header; e=e.nxt) {    if (value.equals(e.value)) {      return true;    }  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.361 -0500",hash_original_method="9E2AB8D38F6DEA48480ED96DF34C2F9C",hash_generated_method="23DFD6C9B96B7D06C6CD1A45BE791BD5") static public void assertTrue(boolean condition){  assertTrue(null,condition);}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(new Integer(myUID),this);}  }
class C{  public static void validateVOSettings(List<VOPSPSetting> settings) throws ValidationException {  Set<String> keys=new HashSet<String>();  for (  VOPSPSetting setting : settings) {    validate(setting);    boolean newEntry=keys.add(setting.getSettingKey());    if (!newEntry) {      ValidationException ve=new ValidationException(ReasonEnum.DUPLICATE_VALUE,FIELD_NAME_SETTING_KEY,new Object[]{setting.getSettingKey()});      logger.logWarn(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.WARN_DUPLICATE_PSP_SETTING_KEY);      throw ve;    }  }}  }
class C{  public CommonGramsFilterFactory(Map<String,String> args){  super(args);  commonWordFiles=get(args,"words");  format=get(args,"format");  ignoreCase=getBoolean(args,"ignoreCase",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean isNew(){  boolean is;  if (m_editFlag == FolderEditFlag.NEW)   is=true; else   is=false;  return is;}  }
class C{  public void undock(){  if (dockPane != null) {    dockPane.undock(this);  }  this.dockedProperty.set(false);}  }
class C{  public void service(Mail mail) throws MessagingException {  try {    MimeMessage message=mail.getMessage();    if (ignoreLocalSender) {      if (mail.getSender() != null && getMailetContext().isLocalServer(mail.getSender().getDomain())) {        return;      }    }    String[] headerArray=message.getHeader(headerName);    if (headerArray != null && headerArray.length > 0) {      return;    }    ByteArrayOutputStream baos=new ByteArrayOutputStream();    double probability;    if (message.getSize() < getMaxSize()) {      message.writeTo(baos);      probability=analyzer.computeSpamProbability(new BufferedReader(new StringReader(baos.toString())));    } else {      probability=0.0;    }    mail.setAttribute(MAIL_ATTRIBUTE_NAME,probability);    message.setHeader(headerName,Double.toString(probability));    DecimalFormat probabilityForm=(DecimalFormat)DecimalFormat.getInstance();    probabilityForm.applyPattern("##0.##%");    String probabilityString=probabilityForm.format(probability);    String senderString;    if (mail.getSender() == null) {      senderString="null";    } else {      senderString=mail.getSender().toString();    }    if (probability > 0.1) {      log(headerName + ": " + probabilityString+ "; From: "+ senderString+ "; Recipient(s): "+ getAddressesString(mail.getRecipients()));      if (tagSubject) {        appendToSubject(message," [" + probabilityString + (probability > 0.9 ? " SPAM" : " spam")+ "]");      }    }    saveChanges(message);  } catch (  Exception e) {    log("Exception: " + e.getMessage(),e);    throw new MessagingException("Exception thrown",e);  }}  }
class C{  public MatsimCountsReader(final Counts counts){  this(new IdentityTransformation(),counts);}  }
class C{  public double convertToPanelX(double xval){  double temp=(xval - m_minX) / (m_maxX - m_minX);  double temp2=temp * (m_XaxisEnd - m_XaxisStart);  temp2=temp2 + m_XaxisStart;  return temp2;}  }
class C{  public void add(String description){  add(null,description);}  }
class C{  public void drawAnnotation(final WorkflowAnnotation anno,final Graphics2D g2,final boolean printing){  g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);  Rectangle2D loc=anno.getLocation();  AnnotationColor col=anno.getStyle().getAnnotationColor();  if (g2.getClip() != null && !g2.getClip().intersects(anno.getLocation())) {    return;  }  if (model.getDragged() != null && model.getDragged().getDraggedAnnotation().equals(anno)) {    drawAnnoDragIndicators(g2,anno,loc,printing);    shadowOperatorsWhileDragging(g2,anno,printing);  }  if (anno.equals(model.getHovered()) && !isProcessInteractionHappening(rendererModel)) {    g2.setColor(col.getColorHighlight());  } else {    g2.setColor(col.getColor());  }  if (anno.equals(model.getSelected())) {    if (model.getDragged() != null && model.getDragged().isDragInProgress() || model.getResized() != null && model.getResized().isResizeInProgress()) {      g2.setColor(col.getColorTransparent());    } else {      g2.setColor(col.getColorHighlight());    }  }  g2.fillRect((int)loc.getX(),(int)loc.getY(),(int)loc.getWidth(),(int)loc.getHeight());  int cacheId=createCacheId(anno);  WeakReference<Image> cachedImgRef=displayCache.get(anno.getId());  Image cachedImage=cachedImgRef != null ? cachedImgRef.get() : null;  if (cachedID.get(anno.getId()) == null || cachedID.get(anno.getId()) != cacheId || cachedImage == null) {    cachedImage=cacheAnnotationImage(anno,cacheId);  }  if (printing) {    printAnnotationFromEditor(anno,g2);  } else {    g2.drawImage(cachedImage,(int)loc.getX(),(int)loc.getY(),null);  }  cachedImage=null;  if (anno.equals(model.getSelected())) {    Stroke prevStroke=g2.getStroke();    if (model.getDragged() != null && model.getDragged().getHoveredOperator() != null) {      g2.setColor(DRAG_LINK_COLOR);      g2.setStroke(DRAG_BORDER_STROKE);    } else {      g2.setColor(ProcessDrawer.OPERATOR_BORDER_COLOR_SELECTED);    }    g2.drawRect((int)loc.getX(),(int)loc.getY(),(int)loc.getWidth(),(int)loc.getHeight() - 1);    g2.setStroke(prevStroke);    if (anno instanceof ProcessAnnotation || model.getDragged() != null && model.getDragged().getHoveredOperator() == null && model.getDragged().isUnsnapped()) {      drawProcessAnnoResizeIndicators(g2,loc,printing);    }  } else   if (anno.equals(model.getHovered())) {    if (!isProcessInteractionHappening(rendererModel)) {      if (anno.getStyle().getAnnotationColor() == AnnotationColor.TRANSPARENT) {        g2.setColor(Color.LIGHT_GRAY);        g2.drawRect((int)loc.getX(),(int)loc.getY(),(int)loc.getWidth() - 1,(int)loc.getHeight() - 1);      }    }  }  if (anno.isOverflowing() && model.getResized() == null) {    drawOverflowIndicator(anno,g2,loc,printing);  }  if (model.getDragged() != null && anno instanceof OperatorAnnotation && !model.getDragged().getDraggedAnnotation().equals(anno) && model.getDragged().isDragInProgress() && model.getDragged().isUnsnapped()) {    overshadowRect(loc,g2);  }}  }
class C{  @Override public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  List result=null;  if (RectangleEdge.isTopOrBottom(edge)) {    result=refreshTicksHorizontal(g2,dataArea,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    result=refreshTicksVertical(g2,dataArea,edge);  }  return result;}  }
class C{  public DataReadOnlyException(Throwable cause){  super(cause);}  }
class C{  public static Authentication buildAuthentication(final ProfileRequestContext profileRequestContext){  final SubjectContext principal=profileRequestContext.getSubcontext(SubjectContext.class);  if (principal == null || principal.getPrincipalName() == null) {    throw new OIDCException("No SubjectContext found in the profile request context");  }  final Set<GrantedAuthority> authorities=new LinkedHashSet<>();  authorities.add(new SimpleGrantedAuthority(OIDCConstants.ROLE_USER));  final AuthenticationContext authCtx=profileRequestContext.getSubcontext(AuthenticationContext.class);  if (authCtx != null) {    LOG.debug("Found an authentication context in the profile request context");    final RequestedPrincipalContext principalContext=authCtx.getSubcontext(RequestedPrincipalContext.class);    if (principalContext != null && principalContext.getMatchingPrincipal() != null) {      LOG.debug("Found requested principal context context with matching principal {}",principalContext.getMatchingPrincipal().getName());      final AuthenticationClassRefAuthority authority=new AuthenticationClassRefAuthority(principalContext.getMatchingPrincipal().getName());      LOG.debug("Adding authority {}",authority.getAuthority());      authorities.add(new SimpleGrantedAuthority(authority.toString()));    }    if (authCtx.getAuthenticationResult() != null) {      final AuthenticationMethodRefAuthority authority=new AuthenticationMethodRefAuthority(authCtx.getAuthenticationResult().getAuthenticationFlowId());      LOG.debug("Adding authority {}",authority.getAuthority());      authorities.add(new SimpleGrantedAuthority(authority.toString()));    }  }  final User user=new User(principal.getPrincipalName(),UUID.randomUUID().toString(),Collections.singleton(new SimpleGrantedAuthority(OIDCConstants.ROLE_USER)));  LOG.debug("Created user details object for {} with authorities {}",user.getUsername(),user.getAuthorities());  final SpringSecurityAuthenticationToken authenticationToken=new SpringSecurityAuthenticationToken(profileRequestContext,authorities);  LOG.debug("Final authentication token authorities are {}",authorities);  authenticationToken.setAuthenticated(true);  authenticationToken.setDetails(user);  return authenticationToken;}  }
class C{  public void dropStudent(String student){  students.remove(student);}  }
class C{  public ExplainRequest parent(String parent){  this.routing=parent;  return this;}  }
class C{  protected Transferable createTransferable(JComponent c){  Object[] values=null;  if (c instanceof JList) {    values=((JList)c).getSelectedValues();  } else   if (c instanceof JTable) {    JTable table=(JTable)c;    int[] rows=table.getSelectedRows();    if (rows != null) {      values=new Object[rows.length];      for (int i=0; i < rows.length; i++) {        values[i]=table.getValueAt(rows[i],0);      }    }  }  if (values == null || values.length == 0) {    return null;  }  StringBuffer plainBuf=new StringBuffer();  StringBuffer htmlBuf=new StringBuffer();  htmlBuf.append("<html>\n<body>\n<ul>\n");  for (  Object obj : values) {    String val=((obj == null) ? "" : obj.toString());    plainBuf.append(val + "\n");    htmlBuf.append("  <li>" + val + "\n");  }  plainBuf.deleteCharAt(plainBuf.length() - 1);  htmlBuf.append("</ul>\n</body>\n</html>");  return new FileTransferable(plainBuf.toString(),htmlBuf.toString(),values);}  }
class C{  public void deleteRow() throws SQLException {  checkState();  rs.deleteRow();  notifyRowChanged();}  }
class C{  public double applyOutlierTreatment(double value) throws Exception {  double newVal=value;  if (m_outlierTreatmentMethod != Outlier.ASIS) {    if (m_outlierTreatmentMethod == Outlier.ASMISSINGVALUES) {      newVal=applyMissingValueTreatment(value);    } else {      if (value < m_lowValue) {        newVal=m_lowValue;      } else       if (value > m_highValue) {        newVal=m_highValue;      }    }  }  return newVal;}  }
class C{  public static Map<String,Object> authOrderPaymentPreference(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String orderPaymentPreferenceId=(String)context.get("orderPaymentPreferenceId");  BigDecimal overrideAmount=(BigDecimal)context.get("overrideAmount");  if (overrideAmount != null) {    if (overrideAmount.compareTo(BigDecimal.ZERO) < 0) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentAmountIsNegative",UtilMisc.toMap("overrideAmount",overrideAmount),locale));    }    if (overrideAmount.compareTo(BigDecimal.ZERO) == 0) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentAmountIsZero",UtilMisc.toMap("overrideAmount",overrideAmount),locale));    }  }  GenericValue orderHeader=null;  GenericValue orderPaymentPreference=null;  try {    orderPaymentPreference=EntityQuery.use(delegator).from("OrderPaymentPreference").where("orderPaymentPreferenceId",orderPaymentPreferenceId).queryOne();    orderHeader=orderPaymentPreference.getRelatedOne("OrderHeader",false);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale) + " " + orderPaymentPreferenceId);  }  OrderReadHelper orh=new OrderReadHelper(orderHeader);  BigDecimal totalRemaining=orh.getOrderGrandTotal();  Long procAttempt=orderPaymentPreference.getLong("processAttempt");  if (procAttempt == null) {    procAttempt=Long.valueOf(0);  }  orderPaymentPreference.set("processAttempt",Long.valueOf(procAttempt.longValue() + 1));  try {    orderPaymentPreference.store();    orderPaymentPreference.refresh();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemGettingOrderPaymentPreferences",locale));  }  boolean reAuth=false;  if (orderPaymentPreference.get("statusId") != null && "PAYMENT_AUTHORIZED".equals(orderPaymentPreference.getString("statusId"))) {    reAuth=true;  }  BigDecimal transAmount=null;  if (overrideAmount != null) {    transAmount=overrideAmount;  } else {    transAmount=orderPaymentPreference.getBigDecimal("maxAmount");  }  transAmount=transAmount.setScale(decimals,rounding);  if ((transAmount != null) && (transAmount.compareTo(BigDecimal.ZERO) <= 0)) {    Map<String,Object> results=ServiceUtil.returnSuccess();    results.put("finished",Boolean.TRUE);    results.put("errors",Boolean.FALSE);    return results;  }  try {    Map<String,Object> authPaymentResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,transAmount);    if (authPaymentResult != null) {      BigDecimal thisAmount=(BigDecimal)authPaymentResult.get("processAmount");      try {        boolean processResult=processResult(dctx,authPaymentResult,userLogin,orderPaymentPreference,locale);        if (processResult) {          Map<String,Object> results=ServiceUtil.returnSuccess();          results.put("messages",authPaymentResult.get("customerRespMsgs"));          results.put("processAmount",thisAmount);          results.put("finished",Boolean.TRUE);          results.put("errors",Boolean.FALSE);          results.put("authCode",authPaymentResult.get("authCode"));          return results;        } else {          boolean needsNsfRetry=needsNsfRetry(orderPaymentPreference,authPaymentResult,delegator);          if (needsNsfRetry) {          }          if (!needsNsfRetry) {            if (UtilValidate.isNotEmpty(orderHeader.getString("autoOrderShoppingListId"))) {              GenericValue productStore=orderHeader.getRelatedOne("ProductStore",false);              if ("Y".equals(productStore.getString("autoOrderCcTryOtherCards"))) {                List<GenericValue> otherPaymentMethodAndCreditCardList=null;                String billToPartyId=null;                GenericValue billToParty=orh.getBillToParty();                if (billToParty != null) {                  billToPartyId=billToParty.getString("partyId");                } else {                }                if (UtilValidate.isNotEmpty(billToPartyId)) {                  otherPaymentMethodAndCreditCardList=EntityQuery.use(delegator).from("PaymentMethodAndCreditCard").where("partyId",billToPartyId,"paymentMethodTypeId","CREDIT_CARD").filterByDate().queryList();                }                if (UtilValidate.isNotEmpty(otherPaymentMethodAndCreditCardList)) {                  for (                  GenericValue otherPaymentMethodAndCreditCard : otherPaymentMethodAndCreditCardList) {                    orderPaymentPreference.set("paymentMethodId",otherPaymentMethodAndCreditCard.getString("paymentMethodId"));                    Map<String,Object> authRetryResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,transAmount);                    try {                      boolean processRetryResult=processResult(dctx,authPaymentResult,userLogin,orderPaymentPreference,locale);                      if (processRetryResult) {                        orderPaymentPreference.store();                        Map<String,Object> results=ServiceUtil.returnSuccess();                        results.put("messages",authRetryResult.get("customerRespMsgs"));                        results.put("processAmount",thisAmount);                        results.put("finished",Boolean.TRUE);                        results.put("errors",Boolean.FALSE);                        return results;                      }                    } catch (                    GeneralException e) {                      String errMsg="Error saving and processing payment authorization results: " + e.toString();                      Debug.logError(e,errMsg + "; authRetryResult: " + authRetryResult,module);                      Map<String,Object> results=ServiceUtil.returnSuccess();                      results.put(ModelService.ERROR_MESSAGE,errMsg);                      results.put("finished",Boolean.FALSE);                      results.put("errors",Boolean.TRUE);                      return results;                    }                  }                }              }            }          }          Map<String,Object> results=ServiceUtil.returnSuccess();          results.put("messages",authPaymentResult.get("customerRespMsgs"));          results.put("finished",Boolean.FALSE);          results.put("errors",Boolean.FALSE);          return results;        }      } catch (      GeneralException e) {        String errMsg="Error saving and processing payment authorization results: " + e.toString();        Debug.logError(e,errMsg + "; authPaymentResult: " + authPaymentResult,module);        Map<String,Object> results=ServiceUtil.returnSuccess();        results.put(ModelService.ERROR_MESSAGE,errMsg);        results.put("finished",Boolean.FALSE);        results.put("errors",Boolean.TRUE);        return results;      }    } else {      String errMsg="Invalid Order Payment Preference: maxAmount is 0";      Debug.logInfo(errMsg,module);      Map<String,Object> results=ServiceUtil.returnSuccess();      results.put("finished",Boolean.FALSE);      results.put("errors",Boolean.TRUE);      results.put(ModelService.ERROR_MESSAGE,errMsg);      orderPaymentPreference.set("statusId","PAYMENT_CANCELLED");      try {        orderPaymentPreference.store();      } catch (      GenericEntityException e) {        Debug.logError(e,"ERROR: Problem setting OrderPaymentPreference status to CANCELLED",module);      }      return results;    }  } catch (  GeneralException e) {    Debug.logError(e,"Error processing payment authorization",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentCannotBeAuthorized",UtilMisc.toMap("errroString",e.toString()),locale));  }}  }
class C{  public static boolean isClassLiteralPossible(ClassNode classNode){  return Modifier.isPublic(classNode.getModifiers());}  }
class C{  public List<org.wso2.emm.agent.beans.Operation> checkPreviousNotifications() throws AndroidAgentException {  List<Operation> notificationOperations;  try {    notificationDAO.open();    List<Notification> dismissedNotifications=notificationDAO.getAllDismissedNotifications();    notificationOperations=new ArrayList<>();    org.wso2.emm.agent.beans.Operation operation;    for (    Notification notification : dismissedNotifications) {      operation=new org.wso2.emm.agent.beans.Operation();      operation.setId(notification.getId());      operation.setCode(Constants.Operation.NOTIFICATION);      operation.setStatus(context.getResources().getString(R.string.operation_value_completed));      operation.setOperationResponse(buildResponse(Notification.Status.DISMISSED));      notificationOperations.add(operation);      notificationDAO.updateNotification(notification.getId(),Notification.Status.SENT);    }    return notificationOperations;  }  finally {    notificationDAO.close();  }}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  return 6;}  }
class C{  protected boolean checkState(){  boolean result=false;  if (emptyStringAllowed) {    result=true;  }  if (textField == null) {    return false;  }  String txt=textField.getText();  result=txt.trim().length() > 0 || emptyStringAllowed;  result=result && doCheckState();  if (result) {    clearErrorMessage();  } else {    showErrorMessage(errorMessage);  }  return result;}  }
class C{  void commit(MemberRc member,String s){  try {    Command command=member.checkoutCommand();    byte[] bytes=s.getBytes("UTF-8");    command.commit(bytes,0,bytes.length);    command.release();  } catch (  Throwable e) {    throw new RuntimeException(e);  }}  }
class C{  public Population breedPopulation(final EvolutionState state){  Population pop=state.population;  for (int i=0; i < pop.subpops.length; i++) {    Subpopulation subpop=pop.subpops[i];    if (!(subpop.species instanceof CMAESSpecies))     state.output.fatal("To use CMAESBreeder, subpopulation " + i + " must contain a CMAESSpecies.  But it contains a "+ subpop.species);    CMAESSpecies species=(CMAESSpecies)(subpop.species);    species.updateDistribution(state,subpop);    Individual[] inds=subpop.individuals;    for (int j=0; j < inds.length; j++)     inds[j]=species.newIndividual(state,0);  }  return pop;}  }
class C{  public NativeAppElement findElementByXpath(String xpath){  return findElement(By.xpath(xpath));}  }
class C{  public OMGraphic remove(int location){  throw new RuntimeException("removeOMGraphicAt() not permitted for OMGraphicHash(). Use remove(key) instead.");}  }
class C{  public Object visit(ASTDivNode node,Object data){  return showNode(node,data);}  }
class C{  public EglCore(EGLContext sharedContext,int flags){  if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("EGL already set up");  }  if (sharedContext == null) {    sharedContext=EGL14.EGL_NO_CONTEXT;  }  mEGLDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("unable to get EGL14 display");  }  int[] version=new int[2];  if (!EGL14.eglInitialize(mEGLDisplay,version,0,version,1)) {    mEGLDisplay=null;    throw new RuntimeException("unable to initialize EGL14");  }  if ((flags & FLAG_TRY_GLES3) != 0) {    EGLConfig config=getConfig(flags,3);    if (config != null) {      int[] attrib3_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,3,EGL14.EGL_NONE};      EGLContext context=EGL14.eglCreateContext(mEGLDisplay,config,sharedContext,attrib3_list,0);      if (EGL14.eglGetError() == EGL14.EGL_SUCCESS) {        mEGLConfig=config;        mEGLContext=context;        mGlVersion=3;      }    }  }  if (mEGLContext == EGL14.EGL_NO_CONTEXT) {    EGLConfig config=getConfig(flags,2);    if (config == null) {      throw new RuntimeException("Unable to find a suitable EGLConfig");    }    int[] attrib2_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};    EGLContext context=EGL14.eglCreateContext(mEGLDisplay,config,sharedContext,attrib2_list,0);    checkEglError("eglCreateContext");    mEGLConfig=config;    mEGLContext=context;    mGlVersion=2;  }  int[] values=new int[1];  EGL14.eglQueryContext(mEGLDisplay,mEGLContext,EGL14.EGL_CONTEXT_CLIENT_VERSION,values,0);  Log.d(TAG,"EGLContext created, client version " + values[0]);}  }
class C{  @Override public void write(byte[] buf,int off,int nbytes){  digest.update(buf,off,nbytes);}  }
class C{  private void addRecordFromDict(@NotNull final Map<Object,Object> result,@NotNull final PyExpression key,@Nullable final PyExpression value){  result.put(myEvaluateKeys ? evaluate(key) : key,myEvaluateCollectionItems ? evaluate(value) : value);}  }
class C{  public static CharSequence formatTimestamp(Context context,long date,boolean isForumTimestamp){  if (isForumTimestamp && PreferencesUtils.getForumDates(context)) {    return DateUtils.formatDateTime(context,date,DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_ABBREV_MONTH| DateUtils.FORMAT_SHOW_TIME);  } else {    if (date == 0) {      return context.getString(R.string.text_unknown);    }    return DateUtils.getRelativeTimeSpanString(date);  }}  }
class C{  private void initActions(){  getActionMap().put(UndoAction.ID,undo.getUndoAction());  getActionMap().put(RedoAction.ID,undo.getRedoAction());}  }
class C{  private int hash(int hashCode){  return supplementalHash(hashCode) & (capacity - 1);}  }
class C{  public CustomizedOsmNetworkReader(final Network network,final CoordinateTransformation transformation){  this(network,transformation,true);}  }
class C{  public EntitySlot(final String name,final String contentSlotName){  super(name);  this.contentSlotName=contentSlotName;}  }
class C{  public String format(int x){  long lx=x;  if (fmt == 'o' || fmt == 'x' || fmt == 'X')   lx&=0xFFFFFFFFL;  return format(lx);}  }
class C{  public static void main(String[] args){  checkCalcForceExertedBy();}  }
class C{  private void processOperation(HierarchyWrapperOperation operation){  operation.startOfProcess();  otherContentList.forEach(null);  if (elementContent != null && elementContent.isContentElement()) {    operation.processElement(elementContent);  }  operation.manipulateChildElements(children);  HierarchyWrapperOperation subOperation=operation.createSubOperation();  for (  HierarchyWrapper child : children) {    child.processOperation(subOperation);  }  operation.endOfProcess();}  }
class C{  public Object key(){  StringBuilder key=new StringBuilder();  for (int i=0; i < filled.length; i++) {    if (filled[i]) {      key.append('T');    } else {      key.append('F');    }  }  return key.toString();}  }
class C{  public void push(final int value){  if (value >= -1 && value <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + value);  } else   if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,value);  } else   if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public static void correctLocation(JSONObject map){  String location=map.has("location") ? (String)map.get("location") : null;  if (location != null && location.length() > 0) {    String location_country=map.has("location_country") ? (String)map.get("location_country") : null;    if (location_country != null && location_country.length() > 0) {      if (location.endsWith(", " + location_country)) {        location=location.substring(0,location.length() - location_country.length() - 2);        map.put("location",location);      }    }  }}  }
class C{  public static ImageIcon createIcon(BasicStroke stroke,int width,int height,boolean horizontalOrientation){  BufferedImage bigImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=(Graphics2D)bigImage.getGraphics();  g.setBackground(OMColor.clear);  g.setPaint(OMColor.clear);  g.fillRect(0,0,width,height);  g.setPaint(Color.black);  g.setStroke(stroke);  if (horizontalOrientation) {    g.drawLine(0,height / 2,width,height / 2);  } else {    g.drawLine(width / 2,0,width / 2,height);  }  return new ImageIcon(bigImage);}  }
class C{  protected FeatureParameterImpl(){  super();}  }
class C{  private static void parseNamespacesForElement(XmlPullParser parser,XmlNamespaceDictionary namespaceDictionary) throws XmlPullParserException {  int eventType=parser.getEventType();  Preconditions.checkState(eventType == XmlPullParser.START_TAG,"expected start of XML element, but got something else (event type %s)",eventType);  int depth=parser.getDepth();  int nsStart=parser.getNamespaceCount(depth - 1);  int nsEnd=parser.getNamespaceCount(depth);  for (int i=nsStart; i < nsEnd; i++) {    String namespace=parser.getNamespaceUri(i);    if (namespaceDictionary.getAliasForUri(namespace) == null) {      String prefix=parser.getNamespacePrefix(i);      String originalAlias=prefix == null ? "" : prefix;      String alias=originalAlias;      int suffix=1;      while (namespaceDictionary.getUriForAlias(alias) != null) {        suffix++;        alias=originalAlias + suffix;      }      namespaceDictionary.set(alias,namespace);    }  }}  }
class C{  public boolean hitObject(Object object,DrawInfo2D range){  final double width=range.draw.width * scale;  final double height=range.draw.height * scale;  return (range.clip.intersects(range.draw.x - width / 2,range.draw.y - height / 2,width,height));}  }
class C{  private JCheckBoxMenuItem createCheckItem(Container c,String txt,boolean selected,String setting){  Settings s=new Settings(gui.MainWindow.GUI_NS);  JCheckBoxMenuItem i=new JCheckBoxMenuItem(txt);  if (setting == null) {    i.setSelected(selected);  } else {    i.setSelected(s.getBoolean(setting,selected));  }  i.addActionListener(this);  c.add(i);  return i;}  }
class C{  public synchronized TypeSubstitution createTypeSubstitution(final INaviOperandTreeNode node,final BaseType baseType,final int position,final int offset,final IAddress address) throws CouldntSaveDataException {  return createTypeSubstitution(node,baseType,new ArrayList<TypeMember>(),position,offset,address);}  }
class C{  public void push(String message){  if (messages.containsKey(message)) {    messages.put(message,messages.get(message) + 1);  } else {    messages.put(message,1);  }}  }
class C{  public boolean isNeverUploadCrashDump(){  if (isCellularExperimentEnabled())   return !isUsageAndCrashReportingEnabled();  return !isUploadCrashDumpEnabled();}  }
class C{  private int currentDepth(){  try {    Integer oneBased=((Integer)DEPTH_FIELD.get(this));    return oneBased - 1;  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }}  }
class C{  public int startPos(JCTree tree){  if (tree == null)   return Position.NOPOS;  return TreeInfo.getStartPos(tree);}  }
class C{  void build(){  XSLTAttributeDef hrefAttr=new XSLTAttributeDef(null,"href",XSLTAttributeDef.T_URL,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef elementsAttr=new XSLTAttributeDef(null,"elements",XSLTAttributeDef.T_SIMPLEPATTERNLIST,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef methodAttr=new XSLTAttributeDef(null,"method",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef versionAttr=new XSLTAttributeDef(null,"version",XSLTAttributeDef.T_NMTOKEN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef encodingAttr=new XSLTAttributeDef(null,"encoding",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef omitXmlDeclarationAttr=new XSLTAttributeDef(null,"omit-xml-declaration",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef standaloneAttr=new XSLTAttributeDef(null,"standalone",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef doctypePublicAttr=new XSLTAttributeDef(null,"doctype-public",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef doctypeSystemAttr=new XSLTAttributeDef(null,"doctype-system",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef cdataSectionElementsAttr=new XSLTAttributeDef(null,"cdata-section-elements",XSLTAttributeDef.T_QNAMES_RESOLVE_NULL,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef indentAttr=new XSLTAttributeDef(null,"indent",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef mediaTypeAttr=new XSLTAttributeDef(null,"media-type",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef nameAttrRequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_QNAME,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef nameAVTRequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_AVT_QNAME,true,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef nameAVT_NCNAMERequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_NCNAME,true,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef nameAttrOpt_ERROR=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef useAttr=new XSLTAttributeDef(null,"use",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef namespaceAVTOpt=new XSLTAttributeDef(null,"namespace",XSLTAttributeDef.T_URL,false,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef decimalSeparatorAttr=new XSLTAttributeDef(null,"decimal-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,".");  XSLTAttributeDef infinityAttr=new XSLTAttributeDef(null,"infinity",XSLTAttributeDef.T_CDATA,false,XSLTAttributeDef.ERROR,"Infinity");  XSLTAttributeDef minusSignAttr=new XSLTAttributeDef(null,"minus-sign",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"-");  XSLTAttributeDef NaNAttr=new XSLTAttributeDef(null,"NaN",XSLTAttributeDef.T_CDATA,false,XSLTAttributeDef.ERROR,"NaN");  XSLTAttributeDef percentAttr=new XSLTAttributeDef(null,"percent",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"%");  XSLTAttributeDef perMilleAttr=new XSLTAttributeDef(null,"per-mille",XSLTAttributeDef.T_CHAR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef zeroDigitAttr=new XSLTAttributeDef(null,"zero-digit",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"0");  XSLTAttributeDef digitAttr=new XSLTAttributeDef(null,"digit",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"#");  XSLTAttributeDef patternSeparatorAttr=new XSLTAttributeDef(null,"pattern-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,";");  XSLTAttributeDef groupingSeparatorAttr=new XSLTAttributeDef(null,"grouping-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,",");  XSLTAttributeDef useAttributeSetsAttr=new XSLTAttributeDef(null,"use-attribute-sets",XSLTAttributeDef.T_QNAMES,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef testAttrRequired=new XSLTAttributeDef(null,"test",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrRequired=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrOpt=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrDefNode=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,XSLTAttributeDef.ERROR,"node()");  XSLTAttributeDef selectAttrDefDot=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,XSLTAttributeDef.ERROR,".");  XSLTAttributeDef matchAttrRequired=new XSLTAttributeDef(null,"match",XSLTAttributeDef.T_PATTERN,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef matchAttrOpt=new XSLTAttributeDef(null,"match",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef priorityAttr=new XSLTAttributeDef(null,"priority",XSLTAttributeDef.T_NUMBER,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef modeAttr=new XSLTAttributeDef(null,"mode",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef spaceAttr=new XSLTAttributeDef(Constants.S_XMLNAMESPACEURI,"space",false,false,false,XSLTAttributeDef.WARNING,"default",Constants.ATTRVAL_STRIP,"preserve",Constants.ATTRVAL_PRESERVE);  XSLTAttributeDef spaceAttrLiteral=new XSLTAttributeDef(Constants.S_XMLNAMESPACEURI,"space",XSLTAttributeDef.T_URL,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef stylesheetPrefixAttr=new XSLTAttributeDef(null,"stylesheet-prefix",XSLTAttributeDef.T_CDATA,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef resultPrefixAttr=new XSLTAttributeDef(null,"result-prefix",XSLTAttributeDef.T_CDATA,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef disableOutputEscapingAttr=new XSLTAttributeDef(null,"disable-output-escaping",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef levelAttr=new XSLTAttributeDef(null,"level",false,false,false,XSLTAttributeDef.ERROR,"single",Constants.NUMBERLEVEL_SINGLE,"multiple",Constants.NUMBERLEVEL_MULTI,"any",Constants.NUMBERLEVEL_ANY);  levelAttr.setDefault("single");  XSLTAttributeDef countAttr=new XSLTAttributeDef(null,"count",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef fromAttr=new XSLTAttributeDef(null,"from",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef valueAttr=new XSLTAttributeDef(null,"value",XSLTAttributeDef.T_EXPR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef formatAttr=new XSLTAttributeDef(null,"format",XSLTAttributeDef.T_CDATA,false,true,XSLTAttributeDef.ERROR);  formatAttr.setDefault("1");  XSLTAttributeDef langAttr=new XSLTAttributeDef(null,"lang",XSLTAttributeDef.T_NMTOKEN,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef letterValueAttr=new XSLTAttributeDef(null,"letter-value",false,true,false,XSLTAttributeDef.ERROR,"alphabetic",Constants.NUMBERLETTER_ALPHABETIC,"traditional",Constants.NUMBERLETTER_TRADITIONAL);  XSLTAttributeDef groupingSeparatorAVT=new XSLTAttributeDef(null,"grouping-separator",XSLTAttributeDef.T_CHAR,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef groupingSizeAttr=new XSLTAttributeDef(null,"grouping-size",XSLTAttributeDef.T_NUMBER,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef dataTypeAttr=new XSLTAttributeDef(null,"data-type",false,true,true,XSLTAttributeDef.ERROR,"text",Constants.SORTDATATYPE_TEXT,"number",Constants.SORTDATATYPE_TEXT);  dataTypeAttr.setDefault("text");  XSLTAttributeDef orderAttr=new XSLTAttributeDef(null,"order",false,true,false,XSLTAttributeDef.ERROR,"ascending",Constants.SORTORDER_ASCENDING,"descending",Constants.SORTORDER_DESCENDING);  orderAttr.setDefault("ascending");  XSLTAttributeDef caseOrderAttr=new XSLTAttributeDef(null,"case-order",false,true,false,XSLTAttributeDef.ERROR,"upper-first",Constants.SORTCASEORDER_UPPERFIRST,"lower-first",Constants.SORTCASEORDER_LOWERFIRST);  XSLTAttributeDef terminateAttr=new XSLTAttributeDef(null,"terminate",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  terminateAttr.setDefault("no");  XSLTAttributeDef xslExcludeResultPrefixesAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"exclude-result-prefixes",XSLTAttributeDef.T_PREFIXLIST,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslExtensionElementPrefixesAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"extension-element-prefixes",XSLTAttributeDef.T_PREFIX_URLLIST,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslUseAttributeSetsAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"use-attribute-sets",XSLTAttributeDef.T_QNAMES,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslVersionAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"version",XSLTAttributeDef.T_NMTOKEN,false,false,XSLTAttributeDef.ERROR);  XSLTElementDef charData=new XSLTElementDef(this,null,"text()",null,null,null,new ProcessorCharacters(),ElemTextLiteral.class);  charData.setType(XSLTElementDef.T_PCDATA);  XSLTElementDef whiteSpaceOnly=new XSLTElementDef(this,null,"text()",null,null,null,null,ElemTextLiteral.class);  charData.setType(XSLTElementDef.T_PCDATA);  XSLTAttributeDef resultAttr=new XSLTAttributeDef(null,"*",XSLTAttributeDef.T_AVT,false,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef xslResultAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"*",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.WARNING);  XSLTElementDef[] templateElements=new XSLTElementDef[23];  XSLTElementDef[] templateElementsAndParams=new XSLTElementDef[24];  XSLTElementDef[] templateElementsAndSort=new XSLTElementDef[24];  XSLTElementDef[] exsltFunctionElements=new XSLTElementDef[24];  XSLTElementDef[] charTemplateElements=new XSLTElementDef[15];  XSLTElementDef resultElement=new XSLTElementDef(this,null,"*",null,templateElements,new XSLTAttributeDef[]{spaceAttrLiteral,xslExcludeResultPrefixesAttr,xslExtensionElementPrefixesAttr,xslUseAttributeSetsAttr,xslVersionAttr,xslResultAttr,resultAttr},new ProcessorLRE(),ElemLiteralResult.class,20,true);  XSLTElementDef unknownElement=new XSLTElementDef(this,"*","unknown",null,templateElementsAndParams,new XSLTAttributeDef[]{xslExcludeResultPrefixesAttr,xslExtensionElementPrefixesAttr,xslUseAttributeSetsAttr,xslVersionAttr,xslResultAttr,resultAttr},new ProcessorUnknown(),ElemUnknown.class,20,true);  XSLTElementDef xslValueOf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"value-of",null,null,new XSLTAttributeDef[]{selectAttrRequired,disableOutputEscapingAttr},new ProcessorTemplateElem(),ElemValueOf.class,20,true);  XSLTElementDef xslCopyOf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"copy-of",null,null,new XSLTAttributeDef[]{selectAttrRequired},new ProcessorTemplateElem(),ElemCopyOf.class,20,true);  XSLTElementDef xslNumber=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"number",null,null,new XSLTAttributeDef[]{levelAttr,countAttr,fromAttr,valueAttr,formatAttr,langAttr,letterValueAttr,groupingSeparatorAVT,groupingSizeAttr},new ProcessorTemplateElem(),ElemNumber.class,20,true);  XSLTElementDef xslSort=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"sort",null,null,new XSLTAttributeDef[]{selectAttrDefDot,langAttr,dataTypeAttr,orderAttr,caseOrderAttr},new ProcessorTemplateElem(),ElemSort.class,19,true);  XSLTElementDef xslWithParam=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"with-param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemWithParam.class,19,true);  XSLTElementDef xslApplyTemplates=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"apply-templates",null,new XSLTElementDef[]{xslSort,xslWithParam},new XSLTAttributeDef[]{selectAttrDefNode,modeAttr},new ProcessorTemplateElem(),ElemApplyTemplates.class,20,true);  XSLTElementDef xslApplyImports=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"apply-imports",null,null,new XSLTAttributeDef[]{},new ProcessorTemplateElem(),ElemApplyImport.class);  XSLTElementDef xslForEach=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"for-each",null,templateElementsAndSort,new XSLTAttributeDef[]{selectAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemForEach.class,true,false,true,20,true);  XSLTElementDef xslIf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"if",null,templateElements,new XSLTAttributeDef[]{testAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemIf.class,20,true);  XSLTElementDef xslWhen=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"when",null,templateElements,new XSLTAttributeDef[]{testAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemWhen.class,false,true,1,true);  XSLTElementDef xslOtherwise=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"otherwise",null,templateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemOtherwise.class,false,false,2,false);  XSLTElementDef xslChoose=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"choose",null,new XSLTElementDef[]{xslWhen,xslOtherwise},new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemChoose.class,true,false,true,20,true);  XSLTElementDef xslAttribute=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"attribute",null,charTemplateElements,new XSLTAttributeDef[]{nameAVTRequired,namespaceAVTOpt,spaceAttr},new ProcessorTemplateElem(),ElemAttribute.class,20,true);  XSLTElementDef xslCallTemplate=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"call-template",null,new XSLTElementDef[]{xslWithParam},new XSLTAttributeDef[]{nameAttrRequired},new ProcessorTemplateElem(),ElemCallTemplate.class,20,true);  XSLTElementDef xslVariable=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"variable",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemVariable.class,20,true);  XSLTElementDef xslParam=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemParam.class,19,true);  XSLTElementDef xslText=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"text",null,new XSLTElementDef[]{charData},new XSLTAttributeDef[]{disableOutputEscapingAttr},new ProcessorText(),ElemText.class,20,true);  XSLTElementDef xslProcessingInstruction=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"processing-instruction",null,charTemplateElements,new XSLTAttributeDef[]{nameAVT_NCNAMERequired,spaceAttr},new ProcessorTemplateElem(),ElemPI.class,20,true);  XSLTElementDef xslElement=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"element",null,templateElements,new XSLTAttributeDef[]{nameAVTRequired,namespaceAVTOpt,useAttributeSetsAttr,spaceAttr},new ProcessorTemplateElem(),ElemElement.class,20,true);  XSLTElementDef xslComment=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"comment",null,charTemplateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemComment.class,20,true);  XSLTElementDef xslCopy=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"copy",null,templateElements,new XSLTAttributeDef[]{spaceAttr,useAttributeSetsAttr},new ProcessorTemplateElem(),ElemCopy.class,20,true);  XSLTElementDef xslMessage=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"message",null,templateElements,new XSLTAttributeDef[]{terminateAttr},new ProcessorTemplateElem(),ElemMessage.class,20,true);  XSLTElementDef xslFallback=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"fallback",null,templateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemFallback.class,20,true);  XSLTElementDef exsltFunction=new XSLTElementDef(this,Constants.S_EXSLT_FUNCTIONS_URL,"function",null,exsltFunctionElements,new XSLTAttributeDef[]{nameAttrRequired},new ProcessorExsltFunction(),ElemExsltFunction.class);  XSLTElementDef exsltResult=new XSLTElementDef(this,Constants.S_EXSLT_FUNCTIONS_URL,"result",null,templateElements,new XSLTAttributeDef[]{selectAttrOpt},new ProcessorExsltFuncResult(),ElemExsltFuncResult.class);  int i=0;  templateElements[i++]=charData;  templateElements[i++]=xslApplyTemplates;  templateElements[i++]=xslCallTemplate;  templateElements[i++]=xslApplyImports;  templateElements[i++]=xslForEach;  templateElements[i++]=xslValueOf;  templateElements[i++]=xslCopyOf;  templateElements[i++]=xslNumber;  templateElements[i++]=xslChoose;  templateElements[i++]=xslIf;  templateElements[i++]=xslText;  templateElements[i++]=xslCopy;  templateElements[i++]=xslVariable;  templateElements[i++]=xslMessage;  templateElements[i++]=xslFallback;  templateElements[i++]=xslProcessingInstruction;  templateElements[i++]=xslComment;  templateElements[i++]=xslElement;  templateElements[i++]=xslAttribute;  templateElements[i++]=resultElement;  templateElements[i++]=unknownElement;  templateElements[i++]=exsltFunction;  templateElements[i++]=exsltResult;  System.arraycopy(templateElements,0,templateElementsAndParams,0,i);  System.arraycopy(templateElements,0,templateElementsAndSort,0,i);  System.arraycopy(templateElements,0,exsltFunctionElements,0,i);  templateElementsAndParams[i]=xslParam;  templateElementsAndSort[i]=xslSort;  exsltFunctionElements[i]=xslParam;  i=0;  charTemplateElements[i++]=charData;  charTemplateElements[i++]=xslApplyTemplates;  charTemplateElements[i++]=xslCallTemplate;  charTemplateElements[i++]=xslApplyImports;  charTemplateElements[i++]=xslForEach;  charTemplateElements[i++]=xslValueOf;  charTemplateElements[i++]=xslCopyOf;  charTemplateElements[i++]=xslNumber;  charTemplateElements[i++]=xslChoose;  charTemplateElements[i++]=xslIf;  charTemplateElements[i++]=xslText;  charTemplateElements[i++]=xslCopy;  charTemplateElements[i++]=xslVariable;  charTemplateElements[i++]=xslMessage;  charTemplateElements[i++]=xslFallback;  XSLTElementDef importDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"import",null,null,new XSLTAttributeDef[]{hrefAttr},new ProcessorImport(),null,1,true);  XSLTElementDef includeDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"include",null,null,new XSLTAttributeDef[]{hrefAttr},new ProcessorInclude(),null,20,true);  XSLTAttributeDef[] scriptAttrs=new XSLTAttributeDef[]{new XSLTAttributeDef(null,"lang",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"src",XSLTAttributeDef.T_URL,false,false,XSLTAttributeDef.WARNING)};  XSLTAttributeDef[] componentAttrs=new XSLTAttributeDef[]{new XSLTAttributeDef(null,"prefix",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"elements",XSLTAttributeDef.T_STRINGLIST,false,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"functions",XSLTAttributeDef.T_STRINGLIST,false,false,XSLTAttributeDef.WARNING)};  XSLTElementDef[] topLevelElements=new XSLTElementDef[]{includeDef,importDef,whiteSpaceOnly,unknownElement,new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"strip-space",null,null,new XSLTAttributeDef[]{elementsAttr},new ProcessorStripSpace(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"preserve-space",null,null,new XSLTAttributeDef[]{elementsAttr},new ProcessorPreserveSpace(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"output",null,null,new XSLTAttributeDef[]{methodAttr,versionAttr,encodingAttr,omitXmlDeclarationAttr,standaloneAttr,doctypePublicAttr,doctypeSystemAttr,cdataSectionElementsAttr,indentAttr,mediaTypeAttr,XSLTAttributeDef.m_foreignAttr},new ProcessorOutputElem(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"key",null,null,new XSLTAttributeDef[]{nameAttrRequired,matchAttrRequired,useAttr},new ProcessorKey(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"decimal-format",null,null,new XSLTAttributeDef[]{nameAttrOpt_ERROR,decimalSeparatorAttr,groupingSeparatorAttr,infinityAttr,minusSignAttr,NaNAttr,percentAttr,perMilleAttr,zeroDigitAttr,digitAttr,patternSeparatorAttr},new ProcessorDecimalFormat(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"attribute-set",null,new XSLTElementDef[]{xslAttribute},new XSLTAttributeDef[]{nameAttrRequired,useAttributeSetsAttr},new ProcessorAttributeSet(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"variable",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorGlobalVariableDecl(),ElemVariable.class,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorGlobalParamDecl(),ElemParam.class,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"template",null,templateElementsAndParams,new XSLTAttributeDef[]{matchAttrOpt,nameAttrOpt_ERROR,priorityAttr,modeAttr,spaceAttr},new ProcessorTemplate(),ElemTemplate.class,true,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"namespace-alias",null,null,new XSLTAttributeDef[]{stylesheetPrefixAttr,resultPrefixAttr},new ProcessorNamespaceAlias(),null,20,true),new XSLTElementDef(this,Constants.S_BUILTIN_EXTENSIONS_URL,"component",null,new XSLTElementDef[]{new XSLTElementDef(this,Constants.S_BUILTIN_EXTENSIONS_URL,"script",null,new XSLTElementDef[]{charData},scriptAttrs,new ProcessorLRE(),ElemExtensionScript.class,20,true)},componentAttrs,new ProcessorLRE(),ElemExtensionDecl.class),new XSLTElementDef(this,Constants.S_BUILTIN_OLD_EXTENSIONS_URL,"component",null,new XSLTElementDef[]{new XSLTElementDef(this,Constants.S_BUILTIN_OLD_EXTENSIONS_URL,"script",null,new XSLTElementDef[]{charData},scriptAttrs,new ProcessorLRE(),ElemExtensionScript.class,20,true)},componentAttrs,new ProcessorLRE(),ElemExtensionDecl.class),exsltFunction};  XSLTAttributeDef excludeResultPrefixesAttr=new XSLTAttributeDef(null,"exclude-result-prefixes",XSLTAttributeDef.T_PREFIXLIST,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef extensionElementPrefixesAttr=new XSLTAttributeDef(null,"extension-element-prefixes",XSLTAttributeDef.T_PREFIX_URLLIST,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef idAttr=new XSLTAttributeDef(null,"id",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef versionAttrRequired=new XSLTAttributeDef(null,"version",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING);  XSLTElementDef stylesheetElemDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"stylesheet","transform",topLevelElements,new XSLTAttributeDef[]{extensionElementPrefixesAttr,excludeResultPrefixesAttr,idAttr,versionAttrRequired,spaceAttr},new ProcessorStylesheetElement(),null,true,-1,false);  importDef.setElements(new XSLTElementDef[]{stylesheetElemDef,resultElement,unknownElement});  includeDef.setElements(new XSLTElementDef[]{stylesheetElemDef,resultElement,unknownElement});  build(null,null,null,new XSLTElementDef[]{stylesheetElemDef,whiteSpaceOnly,resultElement,unknownElement},null,new ProcessorStylesheetDoc(),null);}  }
class C{  protected static void recursiveBuildInnerJoin(int streamNum,Stack<Integer> streamCallStack,QueryGraph queryGraph,Set<Integer> completedStreams,LinkedHashMap<Integer,int[]> substreamsPerStream,DependencyGraph dependencyGraph) throws ExprValidationException {  completedStreams.add(streamNum);  if (dependencyGraph.hasDependency(streamNum)) {    Set<Integer> dependencies=dependencyGraph.getDependenciesForStream(streamNum);    for (    Integer dependentStream : dependencies) {      if (!streamCallStack.contains(dependentStream)) {        throw new ExprValidationException("Historical stream " + streamNum + " parameter dependency originating in stream "+ dependentStream+ " cannot or may not be satisfied by the join");      }    }  }  Set<Integer> navigableStreams=queryGraph.getNavigableStreams(streamNum);  Integer[] navigableStreamArr=navigableStreams.toArray(new Integer[navigableStreams.size()]);  for (  int navigableStream : navigableStreamArr) {    if (dependencyGraph.hasUnsatisfiedDependency(navigableStream,completedStreams)) {      navigableStreams.remove(navigableStream);    }  }  navigableStreams.removeAll(completedStreams);  if (navigableStreams.isEmpty()) {    substreamsPerStream.put(streamNum,new int[0]);    return;  }  int[] substreams=new int[navigableStreams.size()];  substreamsPerStream.put(streamNum,substreams);  int count=0;  for (  int stream : navigableStreams) {    substreams[count++]=stream;    completedStreams.add(stream);  }  for (  int stream : navigableStreams) {    streamCallStack.push(stream);    recursiveBuildInnerJoin(stream,streamCallStack,queryGraph,completedStreams,substreamsPerStream,dependencyGraph);    streamCallStack.pop();  }}  }
class C{  protected String tradAlphaCount(long val,XResourceBundle thisBundle){  if (val > Long.MAX_VALUE) {    this.error(XSLTErrorResources.ER_NUMBER_TOO_BIG);    return XSLTErrorResources.ERROR_STRING;  }  char[] table=null;  int lookupIndex=1;  char buf[]=new char[100];  int charPos;  charPos=0;  IntArrayWrapper groups=(IntArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_NUMBERGROUPS);  StringArrayWrapper tables=(StringArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_NUM_TABLES));  String numbering=thisBundle.getString(org.apache.xml.utils.res.XResourceBundle.LANG_NUMBERING);  if (numbering.equals(org.apache.xml.utils.res.XResourceBundle.LANG_MULT_ADD)) {    String mult_order=thisBundle.getString(org.apache.xml.utils.res.XResourceBundle.MULT_ORDER);    LongArrayWrapper multiplier=(LongArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_MULTIPLIER));    CharArrayWrapper zeroChar=(CharArrayWrapper)thisBundle.getObject("zero");    int i=0;    while (i < multiplier.getLength() && val < multiplier.getLong(i)) {      i++;    }    do {      if (i >= multiplier.getLength())       break;      if (val < multiplier.getLong(i)) {        if (zeroChar.getLength() == 0) {          i++;        } else {          if (buf[charPos - 1] != zeroChar.getChar(0))           buf[charPos++]=zeroChar.getChar(0);          i++;        }      } else       if (val >= multiplier.getLong(i)) {        long mult=val / multiplier.getLong(i);        val=val % multiplier.getLong(i);        int k=0;        while (k < groups.getLength()) {          lookupIndex=1;          if (mult / groups.getInt(k) <= 0)           k++; else {            CharArrayWrapper THEletters=(CharArrayWrapper)thisBundle.getObject(tables.getString(k));            table=new char[THEletters.getLength() + 1];            int j;            for (j=0; j < THEletters.getLength(); j++) {              table[j + 1]=THEletters.getChar(j);            }            table[0]=THEletters.getChar(j - 1);            lookupIndex=(int)mult / groups.getInt(k);            if (lookupIndex == 0 && mult == 0)             break;            char multiplierChar=((CharArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_MULTIPLIER_CHAR))).getChar(i);            if (lookupIndex < table.length) {              if (mult_order.equals(org.apache.xml.utils.res.XResourceBundle.MULT_PRECEDES)) {                buf[charPos++]=multiplierChar;                buf[charPos++]=table[lookupIndex];              } else {                if (lookupIndex == 1 && i == multiplier.getLength() - 1) {                } else                 buf[charPos++]=table[lookupIndex];                buf[charPos++]=multiplierChar;              }              break;            } else             return XSLTErrorResources.ERROR_STRING;          }        }        i++;      }    } while (i < multiplier.getLength());  }  int count=0;  String tableName;  while (count < groups.getLength()) {    if (val / groups.getInt(count) <= 0)     count++; else {      CharArrayWrapper theletters=(CharArrayWrapper)thisBundle.getObject(tables.getString(count));      table=new char[theletters.getLength() + 1];      int j;      for (j=0; j < theletters.getLength(); j++) {        table[j + 1]=theletters.getChar(j);      }      table[0]=theletters.getChar(j - 1);      lookupIndex=(int)val / groups.getInt(count);      val=val % groups.getInt(count);      if (lookupIndex == 0 && val == 0)       break;      if (lookupIndex < table.length) {        buf[charPos++]=table[lookupIndex];      } else       return XSLTErrorResources.ERROR_STRING;      count++;    }  }  return new String(buf,0,charPos);}  }
class C{  public SyncMovies(final int hostId,Bundle syncExtras){  this.hostId=hostId;  this.movieId=-1;  this.syncExtras=syncExtras;}  }
class C{  public void retrieveFacetsEnabled(IProject project){  List<String> facetIdList=FacetFinder.getEnabledNonJavaFacetIds(project);  if (facetIdList.isEmpty()) {    facetsEnabled=null;  } else {    facetsEnabled=Joiner.on(',').join(facetIdList);    try {      facetsEnabled=URLEncoder.encode(facetsEnabled,"UTF-8");    } catch (    UnsupportedEncodingException e) {      CorePluginLog.logError(e);    }  }}  }
class C{  public SlicedMultivariateTreeParameterModel(TreeModel tree,Parameter parameter,boolean includeRoot,boolean includeTips,int dim,int slice){  super(tree,parameter,includeRoot,includeTips,dim);  this.slice=slice;}  }
class C{  private int findValue(String string){  for (int i=0; i < options.length; i++) {    if (options[i].equals(string)) {      return i;    }  }  fail("Invalid Enumeration Value, \"" + string + "\"");  return -1;}  }
class C{  private void drawArrow(Graphics g,Point s,Point e){  double aDir=MathUtil.atan2(e.getY() - s.getY(),e.getX() - s.getX());  if (aDir < -Math.PI / 2) {    aDir=MathUtil.atan2(s.getY() - e.getY(),s.getX() - e.getX());    aDir-=Math.PI;  }  aDir-=Math.PI / 2;  ArrowHead arrowHead=new ArrowHead(arrowHeight,arrowWidth);  arrowHead.rotate(aDir);  arrowHead.translate(s.getX() + ((e.getX() - s.getX()) / 2),s.getY() + ((e.getY() - s.getY()) / 2));  arrowHead.paint(g);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public FontHints(){  Toolkit tk=Toolkit.getDefaultToolkit();  desktopHints=(Map)(tk.getDesktopProperty("awt.font.desktophints"));}  }
class C{  @SideEffectFree public void config(@Nullable String msg){  throw new RuntimeException();}  }
class C{  @Override public String generateToolTip(XYDataset dataset,int series,int item){  return generateLabelString(dataset,series,item);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public boolean removeEventListener(WalletEventListener listener){  return ListenerRegistration.removeFromList(listener,eventListeners);}  }
class C{  public void persist(ResourceObject resource,URI context) throws RepositoryException {  Transaction transaction=createTransaction();  transaction.setAllContexts(context);  transaction.persist(resource);}  }
class C{  protected OutOfLineContent(ElementKey<?,?> key){  super(key);}  }
class C{  public void shutdown(){  threadPools.shutdown();}  }
class C{  @Override public long skip(long n) throws IOException {  if (_is == null) {    if (_s == null)     return -1;    _is=_s.getInputStream();  }  return _is.skip(n);}  }
class C{  public boolean equals(ExtendedType other){  try {    return other.nodetype == this.nodetype && other.localName.equals(this.localName) && other.namespace.equals(this.namespace);  } catch (  NullPointerException e) {    return false;  }}  }
class C{  public static XMethod createXMethod(InvokeInstruction invokeInstruction,ConstantPoolGen cpg){  String className=invokeInstruction.getClassName(cpg);  String methodName=invokeInstruction.getName(cpg);  String methodSig=invokeInstruction.getSignature(cpg);  return createXMethod(className,methodName,methodSig,invokeInstruction.getOpcode() == Constants.INVOKESTATIC);}  }
class C{  protected boolean isFilled(){  return TacGrpSidc.FSUPP_ARS_C2ARS_NFA_IRR.equalsIgnoreCase(this.maskedSymbolCode) || TacGrpSidc.FSUPP_ARS_KLBOX_BLUE_IRR.equalsIgnoreCase(this.maskedSymbolCode) || TacGrpSidc.FSUPP_ARS_KLBOX_PURPLE_IRR.equalsIgnoreCase(this.maskedSymbolCode);}  }
class C{  public void clear(){  verifyState();  initDepth.set(initDepth.get() - 1);  if (initDepth.get() == 0) {    resourceCache.set(null);    cacheLocked.set(null);    initDepth.set(null);  }}  }
class C{  private int handleCH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && contains(value,index,4,"CHAE")) {    result.append('K','X');    return index + 2;  } else   if (conditionCH0(value,index)) {    result.append('K');    return index + 2;  } else   if (conditionCH1(value,index)) {    result.append('K');    return index + 2;  } else {    if (index > 0) {      if (contains(value,0,2,"MC")) {        result.append('K');      } else {        result.append('X','K');      }    } else {      result.append('X');    }    return index + 2;  }}  }
class C{  private final Name addName(int[] quads,int qlen,int lastQuadBytes) throws JsonParseException {  int byteLen=(qlen << 2) - 4 + lastQuadBytes;  int lastQuad;  if (lastQuadBytes < 4) {    lastQuad=quads[qlen - 1];    quads[qlen - 1]=(lastQuad << ((4 - lastQuadBytes) << 3));  } else {    lastQuad=0;  }  char[] cbuf=_textBuffer.emptyAndGetCurrentSegment();  int cix=0;  for (int ix=0; ix < byteLen; ) {    int ch=quads[ix >> 2];    int byteIx=(ix & 3);    ch=(ch >> ((3 - byteIx) << 3)) & 0xFF;    ++ix;    if (ch > 127) {      int needed;      if ((ch & 0xE0) == 0xC0) {        ch&=0x1F;        needed=1;      } else       if ((ch & 0xF0) == 0xE0) {        ch&=0x0F;        needed=2;      } else       if ((ch & 0xF8) == 0xF0) {        ch&=0x07;        needed=3;      } else {        _reportInvalidInitial(ch);        needed=ch=1;      }      if ((ix + needed) > byteLen) {        _reportInvalidEOF(" in field name");      }      int ch2=quads[ix >> 2];      byteIx=(ix & 3);      ch2=(ch2 >> ((3 - byteIx) << 3));      ++ix;      if ((ch2 & 0xC0) != 0x080) {        _reportInvalidOther(ch2);      }      ch=(ch << 6) | (ch2 & 0x3F);      if (needed > 1) {        ch2=quads[ix >> 2];        byteIx=(ix & 3);        ch2=(ch2 >> ((3 - byteIx) << 3));        ++ix;        if ((ch2 & 0xC0) != 0x080) {          _reportInvalidOther(ch2);        }        ch=(ch << 6) | (ch2 & 0x3F);        if (needed > 2) {          ch2=quads[ix >> 2];          byteIx=(ix & 3);          ch2=(ch2 >> ((3 - byteIx) << 3));          ++ix;          if ((ch2 & 0xC0) != 0x080) {            _reportInvalidOther(ch2 & 0xFF);          }          ch=(ch << 6) | (ch2 & 0x3F);        }      }      if (needed > 2) {        ch-=0x10000;        if (cix >= cbuf.length) {          cbuf=_textBuffer.expandCurrentSegment();        }        cbuf[cix++]=(char)(0xD800 + (ch >> 10));        ch=0xDC00 | (ch & 0x03FF);      }    }    if (cix >= cbuf.length) {      cbuf=_textBuffer.expandCurrentSegment();    }    cbuf[cix++]=(char)ch;  }  String baseName=new String(cbuf,0,cix);  if (lastQuadBytes < 4) {    quads[qlen - 1]=lastQuad;  }  return _symbols.addName(baseName,quads,qlen);}  }
class C{  public <K,V>void writeAll(String spaceName,Map<SwapKey,byte[]> batch,@Nullable ClassLoader ldr) throws IgniteCheckedException {  getSpi().storeAll(spaceName,batch,context(ldr));}  }
class C{  private Button createButton(final String fileName,final boolean verticalExpand,final int alignment){  final Button button=new Button(this,SWT.PUSH);  final ClassLoader loader=org.mihalis.opal.itemSelector.DualList.class.getClassLoader();  final Image image=new Image(getDisplay(),loader.getResourceAsStream("images/" + fileName));  button.setImage(image);  button.setLayoutData(new GridData(GridData.CENTER,alignment,false,verticalExpand));  SWTGraphicUtil.addDisposer(button,image);  return button;}  }
class C{  @Override protected void createOtherToolBars(){  if (GUI.debugFX) {    System.out.println("createOtherToolBars almost finished for JavaFX");  }  menuItems.createMainMenu(true,currentCommandListener,isSingle,commonValues,currentCommands,fxButtons);  topPane.getChildren().add(((JavaFXMenuItems)menuItems).getCurrentMenuFX());  topPane.getChildren().add(fxButtons.getTopButtons());}  }
class C{  public static void d(String tag,String s,Object... args){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,String.format(s,args));}  }
class C{  public static String decode(String decode){  StringBuilder str=new StringBuilder(decode);  Matcher m=Pattern.compile("&[A-Za-z]+;").matcher(str);  String replaceStr;  int matchPointer=0;  while (m.find(matchPointer)) {    replaceStr=fromHtmlEntity(m.group());    str.replace(m.start(),m.end(),replaceStr);    matchPointer=m.start() + replaceStr.length();  }  return str.toString();}  }
class C{  public T caseUnary(Unary object){  return null;}  }
class C{  public int millis(){  return (int)(System.currentTimeMillis() - millisOffset);}  }
class C{  protected void closeFile(boolean closeRemux){  if (closeRemux) {    try {      if (remuxer != null) {        remuxer.close();        remuxer=null;      }    } catch (    Exception e) {    }  }  try {    if (fileChannel != null) {      fileChannel.close();      fileChannel=null;    }  } catch (  Exception e) {  }  try {    if (fileStream != null) {      fileStream.close();      fileStream=null;    }  } catch (  Exception e) {  }  currFile=null;}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public boolean matches(String seq){  return queue.regionMatches(true,pos,seq,0,seq.length());}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((SerialListener)client).reply((SerialReply)m);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.773 -0400",hash_original_method="6B60D7F6AE629840306B83B2B10FEDBF",hash_generated_method="C386FD922E0961B57B289A4051F2A0E6") @Override public void write(String str) throws IOException {  try {    int len=0;    if (str != null) {      len=str.length();    }    beforeWrite(len);    out.write(str);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  private boolean isPronounPerson(Mention pronoun){  return pronoun.getPerson() != Person.UNKNOWN && (pronoun.getGender() == Gender.M || pronoun.getGender() == Gender.F) || pronoun.getAnimacy() == Animacy.ANIMATE;}  }
class C{  @DSComment("Location manager") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.108 -0500",hash_original_method="A73A17F882D5C0CB78BFCF12E6BF5D56",hash_generated_method="661252561785095187961056FE5269CA") public boolean isProviderEnabled(String provider){  if (provider == null) {    throw new IllegalArgumentException("provider==null");  }  try {    return mService.isProviderEnabled(provider);  } catch (  RemoteException ex) {    Log.e(TAG,"isProviderEnabled: RemoteException",ex);    return false;  }}  }
class C{  protected boolean isValidScheme(String scheme){  if (scheme == null) {    return false;  }  if (!SCHEME_PATTERN.matcher(scheme).matches()) {    return false;  }  if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {    return false;  }  return true;}  }
class C{  public MapNode selectNearest(Collection<MapNode> nodes,MapWayFilter filter){  MapNode result=null;  double dist=Double.MAX_VALUE;  double newDist;  for (  MapNode node : nodes) {    newDist=getDistKM(node);    boolean found=(newDist < dist);    if (found && filter != null) {      found=false;      for (      WayRef ref : node.getWayRefs()) {        if (filter.isAccepted(ref.getWay()))         found=true;      }    }    if (found) {      result=node;      dist=newDist;    }  }  return result;}  }
class C{  public RemoteInterpreter(Properties property,String noteId,String className,String interpreterRunner,String interpreterPath,String localRepoPath,int connectTimeout,int maxPoolSize,RemoteInterpreterProcessListener remoteInterpreterProcessListener,ApplicationEventListener appListener){  super(property);  this.noteId=noteId;  this.className=className;  initialized=false;  this.interpreterRunner=interpreterRunner;  this.interpreterPath=interpreterPath;  this.localRepoPath=localRepoPath;  env=getEnvFromInterpreterProperty(property);  this.connectTimeout=connectTimeout;  this.maxPoolSize=maxPoolSize;  this.remoteInterpreterProcessListener=remoteInterpreterProcessListener;  this.applicationEventListener=appListener;}  }
class C{  public <A,B,C,D,T>T provideNew(Class<T> desiredObjectClass,A a,B b,C c,D d){  return createProvider(Shank.getFactory(desiredObjectClass,name),a,b,c,d).call();}  }
class C{  private CaptureSession createAndStartCaptureSession(){  long sessionTime=getSessionTime();  Location location=mLocationManager.getCurrentLocation();  String title=CameraUtil.instance().createJpegName(sessionTime);  CaptureSession session=getServices().getCaptureSessionManager().createNewSession(title,sessionTime,location);  session.startEmpty(new CaptureStats(mHdrPlusEnabled),new Size((int)mPreviewArea.width(),(int)mPreviewArea.height()));  return session;}  }
class C{  public MACDItem(RegularTimePeriod period,BigDecimal MACD,BigDecimal signalLine,BigDecimal MACDHistogram){  super(period,new MACD(MACD,signalLine,MACDHistogram));}  }
class C{  private boolean hasTripleVdcVersionsInFederation(VdcPreCheckResponse vdcResp){  Set<String> allVersions=new HashSet<>();  allVersions.add(VdcUtil.getDbSchemaVersion(vdcResp.getSoftwareVersion()));  List<URI> vdcIds=dbClient.queryByType(VirtualDataCenter.class,true);  List<URI> vdcVersionIds=dbClient.queryByType(VdcVersion.class,true);  List<VdcVersion> vdcVersions=dbClient.queryObject(VdcVersion.class,vdcVersionIds);  Map<URI,VdcVersion> vdcIdVdcVersionMap=new HashMap<>();  for (  VdcVersion vdcVersion : vdcVersions) {    vdcIdVdcVersionMap.put(vdcVersion.getVdcId(),vdcVersion);  }  for (  URI vdcId : vdcIds) {    if (vdcIdVdcVersionMap.containsKey(vdcId)) {      String schemaVersion=vdcIdVdcVersionMap.get(vdcId).getVersion();      log.info("Get vdc version {} on {}",schemaVersion,vdcId);      allVersions.add(schemaVersion);    } else {      log.info("Can not get vdc version on {}, will use default version instead",vdcId);      allVersions.add(DbConfigConstants.DEFAULT_VDC_DB_VERSION);    }  }  log.info("Current vdc versions in federation {}",allVersions);  boolean hasTriple=allVersions.size() > 2;  if (hasTriple) {    log.error("Not allowed to have three different vdc versions in a federation.");  }  return hasTriple;}  }
class C{  public static long[] known_N_compute_B_and_K(long N,double epsilon,double delta,int quantiles,double[] returnSamplingRate){  returnSamplingRate[0]=1.0;  if (epsilon <= 0.0) {    long[] result=new long[2];    result[0]=1;    result[1]=N;    return result;  }  if (epsilon >= 1.0 || delta >= 1.0) {    long[] result=new long[2];    result[0]=2;    result[1]=1;    return result;  }  if (delta > 0.0) {    return known_N_compute_B_and_K_slow(N,epsilon,delta,quantiles,returnSamplingRate);  }  return known_N_compute_B_and_K_quick(N,epsilon);}  }
class C{  public LogEventRotateReader(LogRecord logRecord,boolean checkCRC) throws ReplicatorException, IOException {  this.logRecord=logRecord;  this.checkCRC=checkCRC;  load();}  }
class C{  public Disjunction createDisjunction(){  DisjunctionImpl disjunction=new DisjunctionImpl();  return disjunction;}  }
class C{  public SQLTimeoutException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public boolean isAtHost(){  return isAtElement(RDE_HOST_URI,"host");}  }
class C{  public void iinc(final int local,final int amount){  mv.visitIincInsn(local,amount);}  }
class C{  public PatternParameter(OptionID optionID){  super(optionID);}  }
class C{  private void onShutDown(){  if (containerProcessManager != null) {    try {      containerProcessManager.stop();    } catch (    Throwable e) {      log.error("Exception while stopping task manager {}",e);    }    log.info("Stopped task manager");  }  if (jmxServer != null) {    try {      jmxServer.stop();      log.info("Stopped Jmx Server");    } catch (    Throwable e) {      log.error("Exception while stopping jmx server {}",e);    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildAlexander(zone);}  }
class C{  public synchronized void removeNotifications(String type) throws InstanceNotFoundException {  Vector<Integer> v=getNotificationIDs(type);  if (v.isEmpty())   throw new InstanceNotFoundException("Timer notifications to remove not in the list of notifications");  for (  Integer i : v)   removeNotification(i);}  }
class C{  public int lerpColor(int c1,int c2,float amt){  return g.lerpColor(c1,c2,amt);}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.512 -0500",hash_original_method="4105C6229BFDC8C2B450D57FAD8A78CA",hash_generated_method="1D158E827BC908009601A331BE3E2C15") public Intent putExtra(String name,String[] value){  mExtras.put(name,value);  return this;}  }
class C{  public T caseAnonymous_recordEntity_2_(Anonymous_recordEntity_2_ object){  return null;}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public DatasourceTransactionInterceptor(PlatformTransactionManager ptm,TransactionAttributeSource tas){  setTransactionManager(ptm);  setTransactionAttributeSource(tas);}  }
class C{  public void testAgainstBrzozowski(){  int num=atLeast(200);  for (int i=0; i < num; i++) {    Automaton a=AutomatonTestUtil.randomAutomaton(random());    a=AutomatonTestUtil.minimizeSimple(a);    Automaton b=MinimizationOperations.minimize(a,Integer.MAX_VALUE);    assertTrue(Operations.sameLanguage(a,b));    assertEquals(a.getNumStates(),b.getNumStates());    int numStates=a.getNumStates();    int sum1=0;    for (int s=0; s < numStates; s++) {      sum1+=a.getNumTransitions(s);    }    int sum2=0;    for (int s=0; s < numStates; s++) {      sum2+=b.getNumTransitions(s);    }    assertEquals(sum1,sum2);  }}  }
class C{  public String toString(){  removeUnusedSets();  String s="";  for (  SmallAttributeSet set : attributesPool.keySet()) {    s=s + set + "\n";  }  return s;}  }
class C{  public static final void show(Window owner,SandboxBody body){  EditBodyDialog dialog=new EditBodyDialog(owner,body);  dialog.setLocationRelativeTo(owner);  dialog.setIconImage(Icons.EDIT_BODY.getImage());  dialog.setVisible(true);  if (!dialog.canceled) {    SandboxBody bodyChanges=dialog.body;    body.setOutlineColor(bodyChanges.getOutlineColor());    body.setFillColor(bodyChanges.getFillColor());    body.setActive(bodyChanges.isActive());    body.setAngularDamping(bodyChanges.getAngularDamping());    body.setAngularVelocity(bodyChanges.getAngularVelocity());    body.setAsleep(bodyChanges.isAsleep());    body.setAutoSleepingEnabled(bodyChanges.isAutoSleepingEnabled());    body.setBullet(bodyChanges.isBullet());    body.setGravityScale(bodyChanges.getGravityScale());    body.setLinearDamping(bodyChanges.getLinearDamping());    body.setMass(new Mass(bodyChanges.getMass()));    body.setName(bodyChanges.getName());    body.setLinearVelocity(bodyChanges.getLinearVelocity().copy());    body.setMassExplicit(bodyChanges.isMassExplicit());    Transform transform=body.getTransform();    transform.setRotation(dialog.pnlTransform.getRotation());    transform.setTranslation(dialog.pnlTransform.getTranslation());  }}  }
class C{  public void testSingle() throws Exception {  Collection<File> res=parse(single(FILE_1_1));  assert res.size() == 1;  assert res.contains(FILE_1_1);  res=parse(single(MISSING_FILE));  assert res.size() == 0;}  }
class C{  protected File createDirecory(String directoryName){  return createDirectory(null,directoryName);}  }
class C{  public T hardwareAccelerated11(){  if (act != null) {    act.getWindow().setFlags(AQuery.FLAG_HARDWARE_ACCELERATED,AQuery.FLAG_HARDWARE_ACCELERATED);  }  return self();}  }
class C{  public static int[] HSLtoRGB(float h,float s,float l,float alpha){  if (s < 0.0f || s > 100.0f) {    String message="Color parameter outside of expected range - Saturation";    throw new IllegalArgumentException(message);  }  if (l < 0.0f || l > 100.0f) {    String message="Color parameter outside of expected range - Luminance";    throw new IllegalArgumentException(message);  }  if (alpha < 0.0f || alpha > 1.0f) {    String message="Color parameter outside of expected range - Alpha";    throw new IllegalArgumentException(message);  }  h=h % 360.0f;  h/=360f;  s/=100f;  l/=100f;  float q=0;  if (l < 0.5)   q=l * (1 + s); else   q=(l + s) - (s * l);  float p=2 * l - q;  int r=Math.round(Math.max(0,HueToRGB(p,q,h + (1.0f / 3.0f)) * 256));  int g=Math.round(Math.max(0,HueToRGB(p,q,h) * 256));  int b=Math.round(Math.max(0,HueToRGB(p,q,h - (1.0f / 3.0f)) * 256));  return new int[]{r,g,b};}  }
class C{  public void commitChanges(){  if (enableStatusTriangle.isDown() || randomizerState == RandBehavior.FORCE_ON) {    randomizerPanel.commitRandom(randomizer);    if (Polarity.EXCITATORY.equals(polarity)) {      exRandomizer=randomizer;    } else {      inRandomizer=randomizer;    }  }}  }
class C{  public ListEntryModel(ListEntry originalEntry){  this.originalEntry=originalEntry;}  }
class C{  protected JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  @Override public void insertAgentsIntoMobsim(){  for (int i=1; i <= NUMBER_OF_AMBULANCES; i++) {    AmbulanceAgent agent=new AmbulanceAgent(events,lockEngine,machine,Id.createPersonId("Ambulance" + String.valueOf(i)),stationLinkId);    Vehicle vehicle=VehicleUtils.getFactory().createVehicle(Id.createVehicleId("Ambulance" + String.valueOf(i)),VehicleUtils.getDefaultVehicleType());    qsim.createAndParkVehicleOnLink(vehicle,stationLinkId);    qsim.insertAgentIntoMobsim(agent);    dispatcher.addAgent(agent);  }}  }
class C{  public OpenMrsJsonRequest(OpenMrsConnectionDetails connectionDetails,String urlSuffix,JSONObject jsonRequest,Response.Listener<JSONObject> listener,Response.ErrorListener errorListener){  this(connectionDetails.getUser(),connectionDetails.getPassword(),connectionDetails.getBuendiaApiUrl() + urlSuffix,jsonRequest,listener,errorListener);}  }
class C{  @Override public void mousePressed(MouseEvent event){  if (!isEnabled()) {    return;  }  if (getTime() == null) {    setTime(LocalTime.NOON);  }  if (event.getSource() == getComponentDecreaseSpinnerButton()) {    setTime(getTime().plusMinutes(-1));    decreaseTimer.start();  } else {    setTime(getTime().plusMinutes(1));    increaseTimer.start();  }}  }
class C{  public static byte[] convertToUnicodeByteArray(String s){  if (s == null) {    return null;  }  char c[]=s.toCharArray();  byte[] result=new byte[(c.length * 2) + 2];  for (int i=0; i < c.length; i++) {    result[(i * 2)]=(byte)(c[i] >> 8);    result[((i * 2) + 1)]=(byte)c[i];  }  result[result.length - 2]=0;  result[result.length - 1]=0;  return result;}  }
class C{  public PretenureThresholdFraction(){  super(Options.set,"Pretenure Threshold Fraction","Objects larger than this fraction of the remaining nursery will be allocated directly into the LOS.",DEFAULT_PRETENURE_THRESHOLD_FRACTION);}  }
class C{  public synchronized void registerManagedResource(String resourceId,Class<? extends ManagedResource> implClass,ManagedResourceObserver observer){  if (resourceId == null)   throw new IllegalArgumentException("Must provide a non-null resourceId to register a ManagedResource!");  Matcher resourceIdValidator=resourceIdRegex.matcher(resourceId);  if (!resourceIdValidator.matches()) {    String errMsg=String.format(Locale.ROOT,"Invalid resourceId '%s'; must start with %s or %s.",resourceId,CONFIG_BASE_PATH,SCHEMA_BASE_PATH);    throw new SolrException(ErrorCode.SERVER_ERROR,errMsg);  }  Matcher reservedEndpointsMatcher=reservedEndpointsPattern.matcher(resourceId);  if (reservedEndpointsMatcher.matches()) {    throw new SolrException(ErrorCode.SERVER_ERROR,reservedEndpointsMatcher.group(1) + " is a reserved endpoint used by the Solr REST API!");  }  ManagedResourceRegistration reg=registered.get(resourceId);  if (reg != null) {    if (!reg.implClass.equals(implClass)) {      String errMsg=String.format(Locale.ROOT,"REST API path %s already registered to instances of %s",resourceId,reg.implClass.getName());      throw new SolrException(ErrorCode.SERVER_ERROR,errMsg);    }    if (observer != null) {      reg.observers.add(observer);      log.info("Added observer of type {} to existing ManagedResource {}",observer.getClass().getName(),resourceId);    }  } else {    registered.put(resourceId,new ManagedResourceRegistration(resourceId,implClass,observer));    log.info("Registered ManagedResource impl {} for path {}",implClass.getName(),resourceId);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.655 -0500",hash_original_method="B37E37F388D00532D9BE005F391E9AE5",hash_generated_method="783EE48230B34BDEE2030AD8909E7990") @Override public String toString(){  return ((addr != null) ? addr.toString() : hostname) + ":" + port;}  }
class C{  public JSONArray put(Collection<Object> value){  this.put(new JSONArray(value));  return this;}  }
class C{  public NewMidiWorldAction(final Workspace workspace){  super("MIDI World",workspace);}  }
class C{  @Override public void inflict(ShockStatus status,StatusList statusList,Entity attacker){  if (!statusList.hasStatus(status.getStatusType())) {    RPEntity entity=statusList.getEntity();    if (entity != null) {      if (attacker == null) {        entity.sendPrivateText(NotificationType.SCENE_SETTING,"You are shocked.");      } else {        entity.sendPrivateText(NotificationType.SCENE_SETTING,"You have been shocked by " + attacker.getName() + ".");      }    }  }  int count=statusList.countStatusByType(status.getStatusType());  if (count <= 6) {    statusList.addInternal(status);  }  if (count == 0) {    statusList.activateStatusAttribute("status_" + status.getName());    TurnNotifier.get().notifyInSeconds(60,new StatusRemover(statusList,status));    TurnNotifier.get().notifyInTurns(0,new ShockStatusTurnListener(statusList));  }}  }
class C{  public int equivHashCode(){  return returnType.hashCode() * 101 + modifiers * 17 + name.hashCode();}  }
class C{  public RestoreAction(){  super(RESTORE_CMD);}  }
class C{  public void testRemoveUnsatisfiableFilters(){  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final StatementPatternNode spo1=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o1"),null,Scope.DEFAULT_CONTEXTS);    final StatementPatternNode spo2=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o2"),null,Scope.DEFAULT_CONTEXTS);    final JoinGroupNode jgn=new JoinGroupNode(spo2);    final StatementPatternNode spo3=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o3"),null,Scope.DEFAULT_CONTEXTS);    spo3.setOptional(true);    whereClause.addChild(spo1);    whereClause.addChild(jgn);    whereClause.addChild(spo3);    final FunctionNode filterBound1=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o1")});    final FunctionNode filterBound2=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o2")});    final FunctionNode filterBound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o3")});    final FunctionNode filterNotBound1=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o1")}));    final FunctionNode filterNotBound2=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o2")}));    final FunctionNode filterNotBound3=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o3")}));    final FunctionNode filterNotBound4=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o4")}));    whereClause.addChild(new FilterNode(filterBound1));    whereClause.addChild(new FilterNode(filterBound2));    whereClause.addChild(new FilterNode(filterBound3));    whereClause.addChild(new FilterNode(filterNotBound1));    whereClause.addChild(new FilterNode(filterNotBound2));    whereClause.addChild(new FilterNode(filterNotBound3));    whereClause.addChild(new FilterNode(filterNotBound4));    whereClause.addChild(new FilterNode(filterNotBound2));    whereClause.addChild(new FilterNode(filterNotBound3));  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final StatementPatternNode spo1=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o1"),null,Scope.DEFAULT_CONTEXTS);    final StatementPatternNode spo2=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o2"),null,Scope.DEFAULT_CONTEXTS);    final JoinGroupNode jgn=new JoinGroupNode(spo2);    final StatementPatternNode spo3=new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o3"),null,Scope.DEFAULT_CONTEXTS);    spo3.setOptional(true);    whereClause.addChild(spo1);    whereClause.addChild(jgn);    whereClause.addChild(spo3);    final FunctionNode filterBound3=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o3")});    final FunctionNode filterNotBound1=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o1")}));    final FunctionNode filterNotBound2=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o2")}));    final FunctionNode filterNotBound3=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o3")}));    whereClause.addChild(new FilterNode(filterBound3));    whereClause.addChild(new FilterNode(filterNotBound1));    whereClause.addChild(new FilterNode(filterNotBound2));    whereClause.addChild(new FilterNode(filterNotBound3));  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  public double deviation(double[][] samples){  final int N=totalLength(samples);  final double A2=unstandardized(samples,N);  final int k=samples.length;  double H=0.;  for (  double[] sample : samples) {    H+=1. / sample.length;  }  double g=0., h=1. / (N - 1);  for (int i=N - 2; i > 0; i--) {    g+=h / (N - i);    h+=1. / i;  }  final int k2=k * k;  final double hk=h * k;  final double a=(4 * g - 6) * (k - 1) + (10 - 6 * g) * H;  final double b=(2 * g - 4) * k2 + 8 * hk + (2 * g - 14 * h - 4) * H - 8 * h + 4 * g - 6;  final double c=(6 * h + 2 * g - 2) * k2 + (4 * h - 4 * g + 6) * k + (2 * h - 6) * H + 4 * h;  final double d=(2 * h + 6) * k2 - 4 * hk;  final double N2=N * N, N3=N2 * N;  final double sigmasq=(a * N3 + b * N2 + c * N + d) / ((N - 1.) * (N - 2.) * (N - 3.));  return sigmasq > 0 ? (A2 - (k - 1)) / Math.sqrt(sigmasq) : 0.;}  }
class C{  @Override public void onCreate(SQLiteDatabase db,ConnectionSource connectionSource){  try {    Log.i(DatabaseHelper.class.getName(),"onCreate");    TableUtils.createTable(connectionSource,Person.class);    TableUtils.createTable(connectionSource,Stream.class);    TableUtils.createTable(connectionSource,Message.class);    TableUtils.createTable(connectionSource,MessageRange.class);    TableUtils.createTable(connectionSource,Emoji.class);  } catch (  SQLException e) {    Log.e(DatabaseHelper.class.getName(),"Can't create database",e);    throw new RuntimeException(e);  }}  }
class C{  public LogRecord(){  mByteStream=new ByteArrayOutputStream();  mStream=new PrintStream(mByteStream);}  }
class C{  @Override public int compare(EngineInfo lhs,EngineInfo rhs){  if (lhs.system && !rhs.system) {    return -1;  } else   if (rhs.system && !lhs.system) {    return 1;  } else {    return rhs.priority - lhs.priority;  }}  }
class C{  public static void execute(Connection connection,ExecutablePool pool,List events){  AbstractOp op=new PrimaryAckOpImpl(events);  pool.executeOn(connection,op);}  }
class C{  public void addPublisher(Publisher publisher){  getPublishers().add(publisher);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction remove=new RPAction();  remove.put("type","removebuddy");  remove.put("target",params[0]);  ClientSingletonRepository.getClientFramework().send(remove);  return true;}  }
class C{  public SVGFeFloodElementBridge(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ResultSet executeQuery(String sql) throws GenericDataSourceException, GenericEntityException {  prepareStatement(sql);  return executeQuery();}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public GraphicsState(final int minX,final int minY){  this.minX=-minX;  this.minY=-minY;  resetCTM();}  }
class C{  public void addEastPanel(JComponent comp){  mainPanel.add(comp,BorderLayout.EAST);}  }
class C{  private static double discriminant(double a,double b,double c){  return b * b - 4 * a * c;}  }
class C{  private static void collectAllTablesInSubqueries(GridSqlElement el,Set<String> schemas,Set<String> tbls){  if (el == null)   return;  el=GridSqlAlias.unwrap(el);  if (el instanceof GridSqlOperation || el instanceof GridSqlFunction) {    for (    GridSqlElement child : el)     collectAllTablesInSubqueries(child,schemas,tbls);  } else   if (el instanceof GridSqlSubquery)   collectAllTables(((GridSqlSubquery)el).select(),schemas,tbls);}  }
class C{  public void processAttribute(QName qn,String attrValue) throws ParseException {}  }
class C{  protected void onPostExecute(Uri imagePath){  UiUtils.setActivityResult(DownloadImageActivity.this,imagePath,"download failed");  DownloadImageActivity.this.finish();}  }
class C{  public boolean isSyntheticDefaultValueForRequiredReturned(){  return syntheticDefaultValueForRequiredReturned;}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  public PdfRendererBuilder toStream(OutputStream out){  this._os=out;  return this;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  int sourceNode=transformer.getXPathContext().getCurrentNode();  XObject var=getValue(transformer,sourceNode);  transformer.getXPathContext().getVarStack().setLocalVariable(m_index,var);}  }
class C{  public static void main(String[] args){  String root="/home/jjoubert/data/";  String studyArea="Gauteng";  String version="20091010104236";  String[] thresholdArray={"0300"};  String[] sampleArray={"01","02","03","04","05","06","07","08","09","10"};  for (  String threshold : thresholdArray) {    for (    String sample : sampleArray) {      GapDensityAnalyser gda=new GapDensityAnalyser(studyArea,version,threshold,sample,root);      gda.analyseGapDensity();    }  }}  }
class C{  public void makeImmutable(){  if (!isImmutable) {    overflowEntries=overflowEntries.isEmpty() ? Collections.<K,V>emptyMap() : Collections.unmodifiableMap(overflowEntries);    isImmutable=true;  }}  }
class C{  public boolean isSourceComments(){  return sourceComments;}  }
class C{  private void mergeSmall(T[] target,int pos,T[] s1,int from1,int to1,T[] s2,int from2,int to2){  T x1=s1[from1], x2=s2[from2];  while (true) {    if (comp.compare(x1,x2) <= 0) {      target[pos++]=x1;      if (++from1 > to1) {        System.arraycopy(s2,from2,target,pos,to2 - from2 + 1);        break;      }      x1=s1[from1];    } else {      target[pos++]=x2;      if (++from2 > to2) {        System.arraycopy(s1,from1,target,pos,to1 - from1 + 1);        break;      }      x2=s2[from2];    }  }}  }
class C{  public boolean match(Assignment node,Object other){  if (!(other instanceof Assignment)) {    return false;  }  Assignment o=(Assignment)other;  return (node.getOperator().equals(o.getOperator()) && safeSubtreeMatch(node.getLeftHandSide(),o.getLeftHandSide()) && safeSubtreeMatch(node.getRightHandSide(),o.getRightHandSide()));}  }
class C{  void fillPage(){  if (trace.isDebugEnabled()) {    trace.debug("pageOut.storePage fill " + data.getPos());  }  reserve(data.getRemaining() + 1);  reserved-=data.getRemaining();  data.write();  initNextData();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.348 -0400",hash_original_method="16009F7E89FC8CC2A15B27C66C701DE5",hash_generated_method="3DD76A0217B2D72589AB0D1EEAB20583") @Override public int hashCode(){  int hashCode=getClass().hashCode();  for (  int b : bytes) {    hashCode+=b;  }  return hashCode;}  }
class C{  public void moveInterface(NetworkInterface ni,GridCell to){  to.addInterface(ni);  boolean removeOk=this.interfaces.remove(ni);  assert removeOk : "interface " + ni + " not found from cell with "+ interfaces.toString();}  }
class C{  public void organize(){  if (DEBUG) {    logger.fine("organizing frames...");  }  initFileHolder();  Iterator it=filenames.iterator();  DTEDNameTranslator dnt=getTranslator();  while (it.hasNext()) {    File file=(File)it.next();    String filename=file.getAbsolutePath();    try {      dnt.set(filename);      int l=dnt.getLevel();      int lt=(int)(dnt.getLat() + 90);      int ln=(int)(dnt.getLon() + 180);      if (DEBUG) {        logger.fine("  placing " + filename + " at files["+ l+ "]["+ lt+ "]["+ ln+ "]");      }      files[l][lt][ln]=file;    } catch (    FormatException fe) {      continue;    }catch (    ArrayIndexOutOfBoundsException aioobe) {      continue;    }  }}  }
class C{  public LibertyStandaloneLocalConfiguration(String dir){  super(dir);}  }
class C{  private void updateSlider(StreamControl sc){  sc.seekbarView.setProgress(getStreamVolume(sc.streamType));  final boolean muted=isMuted(sc.streamType);  sc.icon.setImageDrawable(null);  sc.icon.setImageResource(muted ? sc.iconMuteRes : sc.iconRes);  if (((sc.streamType == AudioManager.STREAM_RING) || (sc.streamType == AudioManager.STREAM_NOTIFICATION)) && mAudioManager.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {    sc.icon.setImageResource(R.drawable.ic_audio_ring_notif_vibrate);  }  if (sc.streamType == AudioService.STREAM_REMOTE_MUSIC) {    sc.seekbarView.setEnabled(true);  } else   if ((sc.streamType != mAudioManager.getMasterStreamType() && muted) || (sConfirmSafeVolumeDialog != null)) {    sc.seekbarView.setEnabled(false);  } else {    sc.seekbarView.setEnabled(true);  }}  }
class C{  public WeightedRandomChoice(double weight){  this.weight=weight;}  }
class C{  @Override public ODataResponse handle(ODataContext ctx,ODataRequest rq,ODataResponse rsp,UriInfo uri,Exception e){  try {    if (e == null)     logger.debug("Uri " + ctx.getPathInfo().getRequestUri()); else     logger.error("Uri " + ctx.getPathInfo().getRequestUri() + ": "+ e.getMessage(),e);  } catch (  ODataException e1) {    logger.fatal("An exception occured while logging an ODataResponse",e1);  }  return rsp;}  }
class C{  private ReferentUtils(){}  }
class C{  public FormatsRESOURCE(ResourceBundle rb,String sPrefix){  m_rb=rb;  m_sPrefix=sPrefix;}  }
class C{  public void testGoodRpc() throws RpcException {  Response response=Response.newBuilder().setStrData("Response Data").build();  rpcForwarder.registerService(TestService.newReflectiveService(new FakeServiceImpl(REQUEST).withResponse(response)));  SocketRpcProtos.Response rpcResponse=rpcForwarder.doBlockingRpc(RPC_REQUEST);  assertTrue(rpcResponse.getCallback());  assertEquals(response.toByteString(),rpcResponse.getResponseProto());  Callback<SocketRpcProtos.Response> rpcCallback=new Callback<SocketRpcProtos.Response>();  rpcForwarder.doRpc(RPC_REQUEST,rpcCallback);  assertTrue(rpcCallback.isInvoked());  rpcResponse=rpcCallback.getResponse();  assertTrue(rpcResponse.getCallback());  assertEquals(response.toByteString(),rpcResponse.getResponseProto());  response=Response.newBuilder().setStrData("New Data").build();  rpcForwarder.registerBlockingService(new FakeServiceImpl(REQUEST).withResponse(response).toBlockingService());  rpcResponse=rpcForwarder.doBlockingRpc(RPC_REQUEST);  assertTrue(rpcResponse.getCallback());  assertEquals(response.toByteString(),rpcResponse.getResponseProto());  rpcCallback=new Callback<SocketRpcProtos.Response>();  rpcForwarder.doRpc(RPC_REQUEST,rpcCallback);  assertTrue(rpcCallback.isInvoked());  rpcResponse=rpcCallback.getResponse();  assertTrue(rpcResponse.getCallback());  assertEquals(response.toByteString(),rpcResponse.getResponseProto());}  }
class C{  public static String unifyLineSeparators(String s){  return unifyLineSeparators(s,System.getProperty("line.separator"));}  }
class C{  public static ArrayOfDoublesUnion heapifyUnion(final Memory mem,final long seed){  return new HeapArrayOfDoublesUnion(mem,seed);}  }
class C{  public MWMArea(Properties ctx,int WM_Area_ID,String trxName){  super(ctx,WM_Area_ID,trxName);  if (WM_Area_ID == 0) {  }}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar='z';  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (int c='0'; c <= '9'; c++) {    octets[c]=true;  }  for (int c='A'; c <= 'Z'; c++) {    octets[c]=true;  }  for (int c='a'; c <= 'z'; c++) {    octets[c]=true;  }  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.ENTER_STATE;}  }
class C{  private void checkIfAvailable(final InternalDistributedMember initiator,List<SuspectRequest> sMembers,final NetView cv){  for (  final SuspectRequest sr : sMembers) {    final InternalDistributedMember mbr=sr.getSuspectMember();    if (!cv.contains(mbr) || membersInFinalCheck.contains(mbr)) {      continue;    }    if (mbr.equals(localAddress)) {      continue;    }    final String reason=sr.getReason();    logger.debug("Scheduling final check for member {}; reason={}",mbr,reason);    checkExecutor.execute(null);  }}  }
class C{  public void deleteAt(int row,int count){  if (((row | count) < 0) || (row + count > size())) {    throw new IndexOutOfBoundsException(row + ", " + count);  }  moveRowGapTo(row + count);  mRowGapStart-=count;  mRowGapLength+=count;}  }
class C{  private ContainerCapability createContainerCapability(DeployableType type){  Mock mockContainerCapability=mock(ContainerCapability.class);  mockContainerCapability.stubs().method("supportsDeployableType").with(eq(type)).will(returnValue(true));  mockContainerCapability.stubs().method("supportsDeployableType").with(not(eq(type))).will(returnValue(false));  return (ContainerCapability)mockContainerCapability.proxy();}  }
class C{  public RouteFindingAgentFrame(){  setTitle("RFA - the Route Finding Agent");  setSelectorItems(SCENARIO_SEL,new String[]{"Romania, from Arad","Romania, from Lugoj","Romania, from Fagaras","Australia, from Sydney","Australia, from Random"},0);  setSelectorItems(Q_SEARCH_IMPL_SEL,SearchFactory.getInstance().getQSearchImplNames(),1);  setSelectorItems(HEURISTIC_SEL,new String[]{"=0","SLD"},1);}  }
class C{  protected static Long min(Long l1,Long l2){  if (l1 == null && l2 == null) {    return null;  }  if (l2 == null) {    return l1;  }  if (l1 == null) {    return l2;  }  return Math.min(l1,l2);}  }
class C{  public void dumpAll(Iterator<? extends Object> data,Writer output){  dumpAll(data,output,null);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static ErrorCodeAttribute createErrorCodeAttribute(byte errorClass,byte errorNumber) throws StunException {  return createErrorCodeAttribute(errorClass,errorNumber,null);}  }
class C{  public float[] transposeToArray(float[] result,int offset){  if (result == null || result.length - offset < 9) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","transposeToArray","missingResult"));  }  result[offset++]=(float)this.m[0];  result[offset++]=(float)this.m[3];  result[offset++]=(float)this.m[6];  result[offset++]=(float)this.m[1];  result[offset++]=(float)this.m[4];  result[offset++]=(float)this.m[7];  result[offset++]=(float)this.m[2];  result[offset++]=(float)this.m[5];  result[offset]=(float)this.m[8];  return result;}  }
class C{  public DigestOutputStream(OutputStream stream,MessageDigest digest){  super(stream);  setMessageDigest(digest);}  }
class C{  public void addPropertyChangeListener(final PropertyChangeListener l){  propertySupport.addPropertyChangeListener(l);}  }
class C{  public static void main(String[] args) throws Exception {  DirectProvider tp=new DirectProvider();  Topology t=tp.newTopology("PeriodicSource");  Random r=new Random();  TStream<Double> gaussian=t.poll(null,1,TimeUnit.SECONDS);  gaussian=gaussian.peek(null);  gaussian=gaussian.filter(null);  TStream<String> gs=gaussian.map(null);  gs.print();  tp.submit(t);}  }
class C{  protected byte[] intToBytes(int value){  byte ret[]=new byte[4];  ret[0]=(byte)((value >>> 24) & 0xff);  ret[1]=(byte)((value >>> 16) & 0xff);  ret[2]=(byte)((value >>> 8) & 0xff);  ret[3]=(byte)((value) & 0xff);  return ret;}  }
class C{  public static ValueLobDb createTempClob(Reader in,long length,DataHandler handler){  BufferedReader reader;  if (in instanceof BufferedReader) {    reader=(BufferedReader)in;  } else {    reader=new BufferedReader(in,Constants.IO_BUFFER_SIZE);  }  try {    boolean compress=handler.getLobCompressionAlgorithm(Value.CLOB) != null;    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(handler,compress,remaining);    char[] buff;    if (len >= Integer.MAX_VALUE) {      String data=IOUtils.readStringAndClose(reader,-1);      buff=data.toCharArray();      len=buff.length;    } else {      buff=new char[len];      reader.mark(len);      len=IOUtils.readFully(reader,buff,len);    }    if (len <= handler.getMaxLengthInplaceLob()) {      byte[] small=new String(buff,0,len).getBytes(Constants.UTF8);      return ValueLobDb.createSmallLob(Value.CLOB,small,len);    }    reader.reset();    ValueLobDb lob=new ValueLobDb(handler,reader,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  @Override public void ignorableWhitespace(char[] values,int param,int param2) throws SAXException {}  }
class C{  private void createMA(){  MStorage[] storages=MStorage.getAll(getCtx(),getM_Product_ID(),getM_Locator_ID(),get_TrxName());  boolean allZeroASI=true;  for (int i=0; i < storages.length; i++) {    if (storages[i].getM_AttributeSetInstance_ID() != 0) {      allZeroASI=false;      break;    }  }  if (allZeroASI)   return;  MInventoryLineMA ma=null;  BigDecimal sum=Env.ZERO;  for (int i=0; i < storages.length; i++) {    MStorage storage=storages[i];    if (storage.getQtyOnHand().signum() == 0)     continue;    if (ma != null && ma.getM_AttributeSetInstance_ID() == storage.getM_AttributeSetInstance_ID())     ma.setMovementQty(ma.getMovementQty().add(storage.getQtyOnHand())); else     ma=new MInventoryLineMA(this,storage.getM_AttributeSetInstance_ID(),storage.getQtyOnHand());    if (!ma.save())     ;    sum=sum.add(storage.getQtyOnHand());  }  if (sum.compareTo(getQtyBook()) != 0) {    log.warning("QtyBook=" + getQtyBook() + " corrected to Sum of MA="+ sum);    setQtyBook(sum);  }}  }
class C{  private boolean updateCaret(){  return shiftsCaret && caretOffset != -1;}  }
class C{  static boolean isSubSet(BitSet x,BitSet y){  y=(BitSet)y.clone();  y.and(x);  return y.equals(x);}  }
class C{  public byte[] booleanRepresentation(int ind,int n){  byte[] rep=new byte[n];  for (int i=0; i < n; i++) {    rep[i]=(byte)0;  }  for (int i=0; i < n; i++) {    int rem=ind % 2;    if (rem == 1) {      rep[n - i - 1]=(byte)1;      ind-=1;    }    ind/=2;  }  return rep;}  }
class C{  @Nullable public static String parseCommand(@NonNull String expectedPrefix,@NonNull String rawCommand){  if (rawCommand.startsWith(expectedPrefix))   return rawCommand.substring(expectedPrefix.length());  return null;}  }
class C{  @Override public boolean isConcrete(){  return true;}  }
class C{  @Override protected void done(){  executionList.execute();}  }
class C{  @Override @Deprecated public void invalidate(){  LOGGER.warn("deprecated method 'invalidate()' used...");}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  DownloadDao.createTable(db,ifNotExists);}  }
class C{  public boolean canGet(Class type){  if (type == null)   return false;  if (m_columnType.isPrimitive()) {    boolean primTypes=type.isAssignableFrom(m_columnType) || (TypeLib.isNumericType(m_columnType) && TypeLib.isNumericType(type));    return primTypes || type.isAssignableFrom(TypeLib.getWrapperType(m_columnType)) || type.isAssignableFrom(String.class);  } else {    return type.isAssignableFrom(m_columnType);  }}  }
class C{  private boolean startUpdate(UpdateRackHeartbeat updateRack,UpdatePodSystem updatePod){  long now=CurrentTime.currentTime();  if (_lastHubTime + getTimeout() < now) {  } else   if (_lastRackCrc != updateRack.getCrc()) {  } else   if (updatePod != null && _lastPodCrc != updatePod.getCrc()) {  } else {    return false;  }  _lastHubTime=now;  _lastRackCrc=updateRack.getCrc();  if (updatePod != null) {    _lastPodCrc=updatePod.getCrc();  }  return true;}  }
class C{  public void removeNetMapListener(NetMapListener nml){  listenerSupport.removeNetMapListener(nml);}  }
class C{  protected void sequence_LetIdentifierRef(ISerializationContext context,IdentifierRef semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.IDENTIFIER_REF__ID) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.IDENTIFIER_REF__ID));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getLetIdentifierRefAccess().getIdIdentifiableElementLetAsIdentifierParserRuleCall_0_1(),semanticObject.getId());  feeder.finish();}  }
class C{  public static boolean isNamedProcess(Context context,String processName){  if (context == null) {    return false;  }  int pid=android.os.Process.myPid();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningAppProcessInfo> processInfoList=manager.getRunningAppProcesses();  if (ListUtils.isEmpty(processInfoList)) {    return false;  }  for (  RunningAppProcessInfo processInfo : processInfoList) {    if (processInfo != null && processInfo.pid == pid && ObjectUtils.isEquals(processName,processInfo.processName)) {      return true;    }  }  return false;}  }
class C{  public void removeListener(final IDatabaseManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  SplitRecord(int argument,ArgumentType test){  this.argument=argument;  this.test=test;}  }
class C{  static public void showMissingWarning(String method){  PGraphics.showMissingWarning(method);}  }
class C{  protected ElementReferenceExpressionImpl(){  super();}  }
class C{  public void addPrefix(String s){  if (!prefix.contains(s)) {    prefix.addElement(s);    update();  }}  }
class C{  private void printContextDetails(SSLContext context){  System.out.println("Default   Protocols: " + Arrays.toString(context.getDefaultSSLParameters().getProtocols()));  System.out.println("Supported Protocols: " + Arrays.toString(context.getSupportedSSLParameters().getProtocols()));  System.out.println("Current   Protocol : " + context.getProtocol());}  }
class C{  @SuppressWarnings("WeakerAccess") public static Salsa20Engine createSalsa20(byte[] key){  MessageDigest md=Encryption.getMessageDigestInstance();  KeyParameter keyParameter=new KeyParameter(md.digest(key));  ParametersWithIV ivParameter=new ParametersWithIV(keyParameter,SALSA20_IV);  Salsa20Engine engine=new Salsa20Engine();  engine.init(true,ivParameter);  return engine;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.220 -0500",hash_original_method="30B86613A1A86863CB3CC06881524D96",hash_generated_method="79A44A5945DF7BD54D84D1E861FA1CD1") public final static VersionInfo[] loadVersionInfo(String[] pckgs,ClassLoader clsldr){  if (pckgs == null) {    throw new IllegalArgumentException("Package identifier list must not be null.");  }  ArrayList vil=new ArrayList(pckgs.length);  for (int i=0; i < pckgs.length; i++) {    VersionInfo vi=loadVersionInfo(pckgs[i],clsldr);    if (vi != null)     vil.add(vi);  }  return (VersionInfo[])vil.toArray(new VersionInfo[vil.size()]);}  }
class C{  public void releaseLock(String name){  LockState state=getLock(name);  releaseLock(name,state);}  }
class C{  public PhysicalDisplay(ClientGUI clientgui){  super(clientgui);  clientgui.getClient().getGame().addGameListener(this);  clientgui.getBoardView().addBoardViewListener(this);  setupStatusBar(Messages.getString("PhysicalDisplay.waitingForPhysicalAttackPhase"));  attacks=new Vector<EntityAction>();  buttons=new HashMap<PhysicalCommand,MegamekButton>((int)(PhysicalCommand.values().length * 1.25 + 0.5));  for (  PhysicalCommand cmd : PhysicalCommand.values()) {    String title=Messages.getString("PhysicalDisplay." + cmd.getCmd());    MegamekButton newButton=new MegamekButton(title,SkinSpecification.UIComponents.PhaseDisplayButton.getComp());    newButton.addActionListener(this);    newButton.setActionCommand(cmd.getCmd());    newButton.setEnabled(false);    buttons.put(cmd,newButton);  }  numButtonGroups=(int)Math.ceil((buttons.size() + 0.0) / buttonsPerGroup);  butDone.setText("<html><b>" + Messages.getString("PhysicalDisplay.Done") + "</b></html>");  butDone.setEnabled(false);  layoutScreen();  setupButtonPanel();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  LeastFrequentKeyMap<String,Integer> oper=new LeastFrequentKeyMap<String,Integer>();  CountAndLastTupleTestSink matchSink=new CountAndLastTupleTestSink();  CountAndLastTupleTestSink listSink=new CountAndLastTupleTestSink();  oper.least.setSink(matchSink);  oper.list.setSink(listSink);  oper.beginWindow(0);  HashMap<String,Integer> amap=new HashMap<String,Integer>(1);  HashMap<String,Integer> bmap=new HashMap<String,Integer>(1);  HashMap<String,Integer> cmap=new HashMap<String,Integer>(1);  int atot=5;  int btot=3;  int ctot=6;  amap.put("a",null);  bmap.put("b",null);  cmap.put("c",null);  for (int i=0; i < atot; i++) {    oper.data.process(amap);  }  for (int i=0; i < btot; i++) {    oper.data.process(bmap);  }  for (int i=0; i < ctot; i++) {    oper.data.process(cmap);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,matchSink.count);  HashMap<String,Integer> tuple=(HashMap<String,Integer>)matchSink.tuple;  Integer val=tuple.get("b");  Assert.assertEquals("Count of b was ",btot,val.intValue());  Assert.assertEquals("number emitted tuples",1,listSink.count);  ArrayList<HashMap<String,Integer>> list=(ArrayList<HashMap<String,Integer>>)listSink.tuple;  val=list.get(0).get("b");  Assert.assertEquals("Count of b was ",btot,val.intValue());  matchSink.clear();  listSink.clear();  oper.beginWindow(0);  atot=5;  btot=10;  ctot=5;  for (int i=0; i < atot; i++) {    oper.data.process(amap);  }  for (int i=0; i < btot; i++) {    oper.data.process(bmap);  }  for (int i=0; i < ctot; i++) {    oper.data.process(cmap);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,matchSink.count);  Assert.assertEquals("number emitted tuples",1,listSink.count);  list=(ArrayList<HashMap<String,Integer>>)listSink.tuple;  int acount=0;  int ccount=0;  for (  HashMap<String,Integer> h : list) {    val=h.get("a");    if (val == null) {      ccount=h.get("c");    } else {      acount=val;    }  }  Assert.assertEquals("Count of a was ",atot,acount);  Assert.assertEquals("Count of c was ",ctot,ccount);  HashMap<String,Integer> mtuple=(HashMap<String,Integer>)matchSink.tuple;  val=mtuple.get("a");  if (val == null) {    val=mtuple.get("c");  }  Assert.assertEquals("Count of least frequent key was ",ctot,val.intValue());}  }
class C{  public boolean isMeasureWithLargestChildEnabled(){  return mUseLargestChild;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void delete(){  try {    Files.delete(file.toPath());  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public BufferedReader openModelFile(){  String filename=modelDir + File.separator + modelFile;  BufferedReader fin=null;  try {    fin=new BufferedReader(new FileReader(filename));  } catch (  IOException e) {    System.out.println("Couldn't open model file: " + filename);    System.out.println(e.toString());    fin=null;  }  return fin;}  }
class C{  public TStructuralType basicGetStructuralType(){  return structuralType;}  }
class C{  public static int hash(int aSeed,boolean aBoolean){  return firstTerm(aSeed) + (aBoolean ? 1 : 0);}  }
class C{  private static IgniteHadoopWeightedMapReducePlanner createPlanner(IgfsMock igfs){  IgniteHadoopWeightedMapReducePlanner planner=new IgniteHadoopWeightedMapReducePlanner();  IgfsIgniteMock ignite=new IgfsIgniteMock(null,igfs);  GridTestUtils.setFieldValue(planner,HadoopAbstractMapReducePlanner.class,"ignite",ignite);  return planner;}  }
class C{  private void orgComboChanged(){  KeyNamePair org=(KeyNamePair)orgCombo.getSelectedItem();  if (org == null || m_comboActive)   return;  log.config(": " + org);  m_comboActive=true;  KeyNamePair[] whs=m_login.getWarehouses(org);  if (warehouseCombo.getItemCount() > 0)   warehouseCombo.removeAllItems();  if (whs != null) {    KeyNamePair iniValue=null;    String iniDefault=Ini.getProperty(Ini.P_WAREHOUSE);    for (int i=0; i < whs.length; i++) {      warehouseCombo.addItem(whs[i]);      if (whs[i].getName().equals(iniDefault))       iniValue=whs[i];    }    if (iniValue != null)     warehouseCombo.setSelectedItem(iniValue);  }  m_comboActive=false;}  }
class C{  public void testPrivateMode() throws Exception {  processTest(DeploymentMode.PRIVATE);}  }
class C{  public void testBug73163() throws Exception {  try {    this.stmt=this.conn.prepareStatement("LOAD DATA INFILE ? INTO TABLE testBug73163");  } catch (  SQLException e) {    if (e.getCause() instanceof IndexOutOfBoundsException && Util.isJdbc4()) {      fail("IOOBE thrown in Java6+ while preparing a LOAD DATA statement with placeholders.");    } else {      throw e;    }  }}  }
class C{  private void heapifyDown(double cur){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    double best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best < twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur >= best) {      break;    }    twoheap[twopos]=best;    twopos=bestchild;  }  twoheap[twopos]=cur;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.167 -0500",hash_original_method="CC352C2425871DC27A0C55CF39D4ABAB",hash_generated_method="C7B47C8513D14DF9685682FBD153F45C") public ContentDispositionHeader createContentDispositionHeader(String contentDisposition) throws ParseException {  if (contentDisposition == null)   throw new NullPointerException("null arg contentDisposition");  ContentDisposition c=new ContentDisposition();  c.setDispositionType(contentDisposition);  return c;}  }
class C{  public RegisterSpec withReg(int newReg){  if (reg == newReg) {    return this;  }  return makeLocalOptional(newReg,type,local);}  }
class C{  protected int clusterForFeature(double[] f,Cluster[] clustersArray){  double distance, min=clustersArray[0].getDistance(f);  int result=0;  for (int i=1; i < clustersArray.length; i++) {    distance=clustersArray[i].getDistance(f);    if (distance < min) {      min=distance;      result=i;    }  }  return result;}  }
class C{  private CCodeNodeHelpers(){}  }
class C{  protected static void sampleMethodA(long n,long N,int count,long low,long[] values,int fromIndex,RandomEngine randomGenerator){  double V, quot, Nreal, top;  long S;  long chosen=-1 + low;  top=N - n;  Nreal=N;  while (n >= 2 && count > 0) {    V=randomGenerator.raw();    S=0;    quot=top / Nreal;    while (quot > V) {      S++;      top--;      Nreal--;      quot=(quot * top) / Nreal;    }    chosen+=S + 1;    values[fromIndex++]=chosen;    count--;    Nreal--;    n--;  }  if (count > 0) {    S=(long)(Math.round(Nreal) * randomGenerator.raw());    chosen+=S + 1;    values[fromIndex]=chosen;  }}  }
class C{  @Override public void declareOutputFields(OutputFieldsDeclarer declarer){}  }
class C{  public void init(@NonNull Context context,@IntRange(from=0) int position){  this.position=position;  if (titleResource != null) {    this.title=context.getString(titleResource);    this.titleResource=null;  }}  }
class C{  public boolean empty(){switch (type) {case '*':case '?':    return true;case '+':case '|':  for (ContentModel m=(ContentModel)content; m != null; m=m.next) {    if (m.empty()) {      return true;    }  }return false;case ',':case '&':for (ContentModel m=(ContentModel)content; m != null; m=m.next) {if (!m.empty()) {  return false;}}return true;default :return false;}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public Style addStyle(String nm,Style parent){  Style style=new NamedStyle(nm,parent);  if (nm != null) {    styles.addAttribute(nm,style);  }  return style;}  }
class C{  private void manageHangUpEvent(Event event){  if (Event.EVENT_TYPE_CALL_ANSWER.equals(event.type)) {    MXSession session=Matrix.getMXSession(getApplicationContext(),event.getMatrixId());    if (!TextUtils.equals(event.getSender(),session.getCredentials().userId)) {      return;    }  }  String callId=null;  try {    callId=event.getContentAsJsonObject().get("call_id").getAsString();  } catch (  Exception e) {  }  if (null != callId) {    hidePendingCallNotification(callId);  }  Log.d(LOG_TAG,"manageHangUpEvent stopRinging");  CallViewActivity.stopRinging();}  }
class C{  private void processFile(Script s,File file) throws IOException {  if (!file.exists())   throw new FileNotFoundException(file.getName());  if (!editFiles) {    BufferedReader reader=new BufferedReader(new FileReader(file));    try {      PrintWriter writer=new PrintWriter(System.out);      processReader(s,reader,writer);      writer.flush();    }  finally {      reader.close();    }  } else {    File backup;    if (backupExtension == null) {      backup=File.createTempFile("groovy_",".tmp");      backup.deleteOnExit();    } else {      backup=new File(file.getPath() + backupExtension);    }    backup.delete();    if (!file.renameTo(backup))     throw new IOException("unable to rename " + file + " to "+ backup);    BufferedReader reader=new BufferedReader(new FileReader(backup));    try {      PrintWriter writer=new PrintWriter(new FileWriter(file));      try {        processReader(s,reader,writer);      }  finally {        writer.close();      }    }  finally {      reader.close();    }  }}  }
class C{  public boolean forEachEntry(TLongIntProcedure procedure){  byte[] states=_states;  long[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public void transform(Source xmlSource,Result outputTarget) throws TransformerException {  transform(xmlSource,outputTarget,true);}  }
class C{  public static CloseableHttpClient newInsecureClient(){  return HttpClientBuilder.create().setHostnameVerifier(newNaiveVerifier()).setSslcontext(newNaiveSslContext()).setMaxConnPerRoute(4).setMaxConnTotal(8).build();}  }
class C{  public boolean stillHasRelatedImageView(){  if (null == mFirstImageViewHolder || mFirstImageViewHolder.getImageView() == null) {    return false;  } else {    return true;  }}  }
class C{  public VisorThreadLockInfo(String clsName,Integer identityHashCode){  assert clsName != null;  this.clsName=clsName;  this.identityHashCode=identityHashCode;}  }
class C{  @Override public boolean onMenuItemClick(MenuItem item){  int id=item.getItemId();switch (id) {case R.id.publish:    publish();  break;case R.id.subscribe:subscribe();break;case R.id.newConnection:createAndConnect();break;case R.id.disconnect:disconnect();break;case R.id.connectMenuOption:reconnect();break;case R.id.startLogging:enablePahoLogging();break;case R.id.endLogging:disablePahoLogging();break;}return false;}  }
class C{  public final void warning(String line){  if (shuttingDown) {    return;  }synchronized (cachedWarningMessages) {    if (g == null) {      cachedWarningMessages.add(line);    } else {      if (!cachedWarningMessages.isEmpty()) {        for (        String cachedLine : cachedWarningMessages) {          g.printLine(cachedLine);        }        cachedWarningMessages.clear();      }      if (line != null) {        g.printLine(line);      }    }  }}  }
class C{  @Override public synchronized void mark(int readlimit){  iis.mark();}  }
class C{  public Builder tcpNoDelay(boolean tcpNoDelay){  this.tcpNoDelay=tcpNoDelay;  return this;}  }
class C{  @Deprecated public void createNotebookAsync(Notebook notebook,OnClientCallback<LinkedNotebook> callback){  AsyncReflector.execute(this,callback,"createNotebook",notebook);}  }
class C{  private synchronized void removeMessageListener(MessageTypeEventHandler<?> messageListener){synchronized (messageListeners) {    messageListeners.remove(messageListener);  }}  }
class C{  protected void togglePopup(){  if (isVisible()) {    hide();  } else {    show();  }}  }
class C{  protected IntLiteralImpl(){  super();}  }
class C{  public void updateUI(){  super.updateUI();  if (getFindPopupMenu() != null) {    SwingUtilities.updateComponentTreeUI(getFindPopupMenu());  }}  }
class C{  public Vector subtract(double x,double y,double z){  return new Vector(this.x - x,this.y - y,this.z - z);}  }
class C{  public Tag(){  super();}  }
class C{  protected void readImage(){  ix=readShort();  iy=readShort();  iw=readShort();  ih=readShort();  int packed=read();  lctFlag=(packed & 0x80) != 0;  interlace=(packed & 0x40) != 0;  lctSize=2 << (packed & 7);  if (lctFlag) {    lct=readColorTable(lctSize);    act=lct;  } else {    act=gct;    if (bgIndex == transIndex)     bgColor=0;  }  int save=0;  if (transparency) {    save=act[transIndex];    act[transIndex]=0;  }  if (act == null) {    status=STATUS_FORMAT_ERROR;  }  if (err())   return;  decodeImageData();  skip();  if (err())   return;  frameCount++;  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB_PRE);  setPixels();  frames.add(new GifFrame(image,delay));  if (transparency) {    act[transIndex]=save;  }  resetFrame();}  }
class C{  protected void postResponse(){}  }
class C{  public boolean canPace(){  return true;}  }
class C{  protected void sequence_S_Reflex(ISerializationContext context,S_Reflex semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public StorageArray[] queryArrays(String[] arrayId) throws InvalidArgument, InvalidSession, StorageFault {  final String methodName="queryArrays(): ";  log.info(methodName + "Entry");  if (arrayId != null) {    log.info(methodName + "input array Ids: " + Arrays.asList(arrayId));  }  sslUtil.checkHttpRequest(true,true);  UsageContext uc=contextManager.getUsageContext();  if (Util.isEmpty(uc.getHostInitiator())) {    StorageArray[] arrays=new StorageArray[0];    log.info(methodName + "Exit returning storage arrays of size[" + (arrays != null ? arrays.length : 0)+ "]");    return arrays;  }  SOSManager sosManager=contextManager.getSOSManager();  StorageArray[] arrays=sosManager.queryArrays(arrayId);  log.info(methodName + "Exit returning storage arrays of size[" + (arrays != null ? arrays.length : 0)+ "]");  return arrays;}  }
class C{  private boolean hasFallbackChildren(){  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK)     return true;  }  return false;}  }
class C{  public void test_ticket_1717() throws Exception {{    m_repo.remove(new RemoveOp(null,null,null));    String query="SELECT ?z ?s1 {  ?s ?p ?o .   BIND(?o+1 AS ?z)  BIND(?z+1 AS ?z2) }";    final TupleQuery tq=m_repo.getBigdataSailRemoteRepository().getConnection().prepareTupleQuery(QueryLanguage.SPARQL,query,null);    final TupleQueryResult tqr=tq.evaluate();    try {      int count=0;      while (tqr.hasNext()) {        System.out.println(tqr.next());        count++;      }      assertEquals(0,count);    }  finally {      tqr.close();    }  }}  }
class C{  public static <T>List<T> toList(Enumeration<T> self){  List<T> answer=new ArrayList<T>();  while (self.hasMoreElements()) {    answer.add(self.nextElement());  }  return answer;}  }
class C{  public static boolean isInitiatorInVArraysNetworks(URI virtualArrayURI,Initiator initiator,DbClient dbClient){  boolean foundAnAssociatedNetwork=false;  Set<NetworkLite> networks=NetworkUtil.getEndpointAllNetworksLite(initiator.getInitiatorPort(),dbClient);  if (networks == null || networks.isEmpty()) {    _log.info(String.format("Initiator %s (%s) is not associated with any network.",initiator.getInitiatorPort(),initiator.getId().toString()));    return false;  } else {    for (    NetworkLite networkLite : networks) {      if (networkLite == null) {        continue;      }      Set<String> varraySet=networkLite.fetchAllVirtualArrays();      if (varraySet != null && varraySet.contains(virtualArrayURI.toString())) {        _log.info(String.format("Initiator %s (%s) was found to be associated to VirtualArray %s through network %s.",initiator.getInitiatorPort(),initiator.getId().toString(),virtualArrayURI.toString(),networkLite.getNativeGuid()));        foundAnAssociatedNetwork=true;      }    }  }  return foundAnAssociatedNetwork;}  }
class C{  public void sendSerialData(byte[] data){  if (data == null)   throw new NullPointerException("The passed data is null, have you checked its validity?");  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  sendData(data);  Log.i("Device " + this.name + ": Serial data sent, values: "+ ArrayUtils.toHexString(data)+ ".");}  }
class C{  public void addRoute(String routeName){  if (!containsRoute(routeName)) {    routeCombo.getItems().add(routeName);  }}  }
class C{  public void registerOutParameter(int parameterIndex,SQLType sqlType,String typeName) throws SQLException {  try {    if (this.wrappedStmt != null) {      ((CallableStatement)this.wrappedStmt).registerOutParameter(parameterIndex,sqlType,typeName);    } else {      throw SQLError.createSQLException("No operations allowed after statement closed",SQLError.SQL_STATE_GENERAL_ERROR,this.exceptionInterceptor);    }  } catch (  SQLException sqlEx) {    checkAndFireConnectionError(sqlEx);  }}  }
class C{  private T select(T[] d,int from,int to,int k){  while (true) {    int pivotIndex=(to + from) >>> 1;    int pivotNewIndex=selectPartition(d,from,to,pivotIndex);    int pivotDist=pivotNewIndex - from + 1;    if (pivotDist == k) {      return d[pivotNewIndex];    } else     if (k < pivotDist) {      to=pivotNewIndex - 1;    } else {      k=k - pivotDist;      from=pivotNewIndex + 1;    }  }}  }
class C{  protected boolean isSwipeEnabled(){  return swipeMode != SwipeListView.SWIPE_MODE_NONE;}  }
class C{  public FloatMatrix put(FloatMatrix indices,FloatMatrix v){  return put(indices.findIndices(),v);}  }
class C{  public QueueCursor(int capacity){  this(capacity,false);}  }
class C{  public static void dumpCurrentRow(ICursor cursor,int maxColumnWidth){  StringBuilder builder=new StringBuilder("\n");  dumpCurrentRow(cursor,maxColumnWidth,builder);  Logger.d(Logger.LOG_TAG,builder.toString());}  }
class C{  public GreaterOp_ createGreaterOp_(){  GreaterOp_Impl greaterOp_=new GreaterOp_Impl();  return greaterOp_;}  }
class C{  @Override public void flush(){  super.flush();  mc.flush();}  }
class C{  public void initData(String sceneName){  sceneControl.initScene(sceneName);}  }
class C{  public void worldToLocalCoordinate(Vector3 coord){  srs.getProjection().worldToLocal(coord);  coord.setZ(coord.getZ() - minZ);  coord.multiplyLocal(pixelScale);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xCD9E4BB5,version=150) public int sceKernelRegisterSysEventHandler(TPointer handler){  pspSysEventHandler sysEventHandler=new pspSysEventHandler();  sysEventHandler.read(handler);  if (log.isDebugEnabled()) {    log.debug(String.format("sceKernelRegisterSysEventHandler handler: %s",sysEventHandler));  }  return 0;}  }
class C{  public synchronized void removeChannelsFromFavorites(Set<String> channels){  for (  String channel : channels) {    removeChannelFromFavorites(channel);  }  settings.setSettingChanged(FAVORITES_SETTING);}  }
class C{  public boolean isRowVisible(int row){  if (row != -1) {    Rectangle cellRect=getCellRect(row,0,false);    Rectangle visibleRect=getVisibleRect();    return visibleRect.intersects(cellRect);  } else   return false;}  }
class C{  public void columnSelectionChanged(ListSelectionEvent e){}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID,signedAttrGen,unsignedAttrGen);}  }
class C{  public void warn(Object message,Throwable t){}  }
class C{  public final void firePixelMatrixChanged(final PixelMatrix oldPixelMatrix,final PixelMatrix pixelMatrix){  if (oldPixelMatrix == null) {    throw new IllegalArgumentException("oldPixelMatrix must not be null");  }  if (pixelMatrix == null) {    throw new IllegalArgumentException("pixelMatrix must not be null");  }  Object[] listeners=listenerList.getListenerList();  VisionWorldModelEvent event=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == VisionWorldModelListener.class) {      if (event == null) {        event=new VisionWorldModelEvent(source,oldPixelMatrix,pixelMatrix);      }      ((VisionWorldModelListener)listeners[i + 1]).pixelMatrixChanged(event);    }  }}  }
class C{  public byte[] sign(){  byte[] output=digest.digest();  digest.reset();  digest.update(opad);  return digest.digest(output);}  }
class C{  protected Object suspendMessage() throws IOException {  messageOutput.flush();  return byteOutput;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"REVSH");  translateAll(environment,instruction,"REVSH",instructions);}  }
class C{  public CstInterfaceMethodRef(CstType definingClass,CstNat nat){  super(definingClass,nat);  methodRef=null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void logging(String msg){  System.out.println(msg);}  }
class C{  @SuppressWarnings("unchecked") public ClusterUpdateSettingsRequest persistentSettings(Map source){  try {    XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);    builder.map(source);    persistentSettings(builder.string());  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }  return this;}  }
class C{  public map addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  writeStringToFile(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public CompilationUnitDeclaration resolve(CompilationUnitDeclaration unit,ICompilationUnit sourceUnit,boolean verifyMethods,boolean analyzeCode,boolean generateCode){  try {    if (unit == null) {      this.parseThreshold=0;      beginToCompile(new ICompilationUnit[]{sourceUnit});      for (int i=0; i < this.totalUnits; i++) {        if (this.unitsToProcess[i] != null && this.unitsToProcess[i].compilationResult.compilationUnit == sourceUnit) {          unit=this.unitsToProcess[i];          break;        }      }      if (unit == null) {        unit=this.unitsToProcess[0];      }    } else {      this.lookupEnvironment.buildTypeBindings(unit,null);      this.lookupEnvironment.completeTypeBindings();    }    this.lookupEnvironment.unitBeingCompleted=unit;    this.parser.getMethodBodies(unit);    if (unit.scope != null) {      unit.scope.faultInTypes();      if (unit.scope != null && verifyMethods) {        unit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());      }      unit.resolve();      if (analyzeCode) {        unit.analyseCode();      }      unit.finalizeProblems();    }    if (this.unitsToProcess != null) {      this.unitsToProcess[0]=null;    }    this.requestor.acceptResult(unit.compilationResult.tagAsAccepted());    return unit;  } catch (  AbortCompilation e) {    this.handleInternalException(e,unit);    return unit == null ? this.unitsToProcess[0] : unit;  }catch (  Error e) {    this.handleInternalException(e,unit,null);    throw e;  }catch (  RuntimeException e) {    this.handleInternalException(e,unit,null);    throw e;  } finally {  }}  }
class C{  public boolean removeKey(int key){  int i=indexOfKey(key);  if (i < 0)   return false;  this.state[i]=REMOVED;  this.distinct--;  if (this.distinct < this.lowWaterMark) {    int newCapacity=chooseShrinkCapacity(this.distinct,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public DBObject_PrimaryKey_Table(DBConnection parent,String name,int sequence){  super(parent,name,sequence);}  }
class C{  public static CallFormat writeCall(VariableElement variable) throws ProcessorError {  ClassParceler parceler=findParceler(variable);  if (parceler == null) {    throw null;  }  return parceler.writeCall();}  }
class C{  @Override public void debuggerAdded(final BackEndDebuggerProvider provider,final IDebugger debugger){  addItem(new CDebuggerWrapper(debugger));}  }
class C{  public void sort(){  Collections.sort(tasks);  for (  PlotItem subitem : subitems) {    subitem.sort();  }}  }
class C{  public boolean isPrefixed(){  return tag.indexOf(':') >= 0;}  }
class C{  public static String buildMessage(String message,Throwable cause){  if (cause != null) {    StringBuilder sb=new StringBuilder();    if (message != null) {      sb.append(message).append("; ");    }    sb.append("nested exception is ").append(cause);    return sb.toString();  } else {    return message;  }}  }
class C{  void fillActiveViews(int childCount,int firstActivePosition){  if (mActiveViews.length < childCount) {    mActiveViews=new View[childCount];  }  mFirstActivePosition=firstActivePosition;  final View[] activeViews=mActiveViews;  for (int i=0; i < childCount; i++) {    View child=getChildAt(i);    LayoutParams lp=(LayoutParams)child.getLayoutParams();    if (lp != null && lp.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER) {      activeViews[i]=child;    }  }}  }
class C{  public boolean hasStatus(){  return fieldSetFlags()[1];}  }
class C{  private void doGenCert(String alias,String sigAlgName,InputStream in,PrintStream out) throws Exception {  Certificate signerCert=keyStore.getCertificate(alias);  byte[] encoded=signerCert.getEncoded();  X509CertImpl signerCertImpl=new X509CertImpl(encoded);  X509CertInfo signerCertInfo=(X509CertInfo)signerCertImpl.get(X509CertImpl.NAME + "." + X509CertImpl.INFO);  X500Name issuer=(X500Name)signerCertInfo.get(X509CertInfo.SUBJECT + "." + X509CertInfo.DN_NAME);  Date firstDate=getStartDate(startDate);  Date lastDate=new Date();  lastDate.setTime(firstDate.getTime() + validity * 1000L * 24L* 60L* 60L);  CertificateValidity interval=new CertificateValidity(firstDate,lastDate);  PrivateKey privateKey=(PrivateKey)recoverKey(alias,storePass,keyPass).fst;  if (sigAlgName == null) {    sigAlgName=getCompatibleSigAlgName(privateKey.getAlgorithm());  }  Signature signature=Signature.getInstance(sigAlgName);  signature.initSign(privateKey);  X509CertInfo info=new X509CertInfo();  info.set(X509CertInfo.VALIDITY,interval);  info.set(X509CertInfo.SERIAL_NUMBER,new CertificateSerialNumber(new java.util.Random().nextInt() & 0x7fffffff));  info.set(X509CertInfo.VERSION,new CertificateVersion(CertificateVersion.V3));  info.set(X509CertInfo.ALGORITHM_ID,new CertificateAlgorithmId(AlgorithmId.get(sigAlgName)));  info.set(X509CertInfo.ISSUER,issuer);  BufferedReader reader=new BufferedReader(new InputStreamReader(in));  boolean canRead=false;  StringBuffer sb=new StringBuffer();  while (true) {    String s=reader.readLine();    if (s == null)     break;    if (s.startsWith("-----BEGIN") && s.indexOf("REQUEST") >= 0) {      canRead=true;    } else     if (s.startsWith("-----END") && s.indexOf("REQUEST") >= 0) {      break;    } else     if (canRead) {      sb.append(s);    }  }  byte[] rawReq=Pem.decode(new String(sb));  PKCS10 req=new PKCS10(rawReq);  info.set(X509CertInfo.KEY,new CertificateX509Key(req.getSubjectPublicKeyInfo()));  info.set(X509CertInfo.SUBJECT,dname == null ? req.getSubjectName() : new X500Name(dname));  CertificateExtensions reqex=null;  Iterator<PKCS10Attribute> attrs=req.getAttributes().getAttributes().iterator();  while (attrs.hasNext()) {    PKCS10Attribute attr=attrs.next();    if (attr.getAttributeId().equals((Object)PKCS9Attribute.EXTENSION_REQUEST_OID)) {      reqex=(CertificateExtensions)attr.getAttributeValue();    }  }  CertificateExtensions ext=createV3Extensions(reqex,null,v3ext,req.getSubjectPublicKeyInfo(),signerCert.getPublicKey());  info.set(X509CertInfo.EXTENSIONS,ext);  X509CertImpl cert=new X509CertImpl(info);  cert.sign(privateKey,sigAlgName);  dumpCert(cert,out);  for (  Certificate ca : keyStore.getCertificateChain(alias)) {    if (ca instanceof X509Certificate) {      X509Certificate xca=(X509Certificate)ca;      if (!isSelfSigned(xca)) {        dumpCert(xca,out);      }    }  }}  }
class C{  void update(Snackbar snackbar,boolean animate){  mMessageView.setMaxLines(snackbar.getSingleLine() ? 1 : Integer.MAX_VALUE);  mMessageView.setTemplate(snackbar.getTemplateText());  setViewText(mMessageView,snackbar.getText(),animate);  String actionText=snackbar.getActionText();  if (actionText != null) {    mActionButtonView.setVisibility(View.VISIBLE);    setViewText(mActionButtonView,snackbar.getActionText(),animate);  } else {    mActionButtonView.setVisibility(View.GONE);  }}  }
class C{  public static boolean isFailureAnOption(Class<?> testClass,String methodName,Function<String,Void> log){  String className=testClass.getName();  if (TestCase.class.isAssignableFrom(testClass)) {    Method method;    try {      method=testClass.getMethod(methodName,new Class[0]);    } catch (    NoSuchMethodException ex) {      log.apply("Cannot find method " + methodName + " of "+ className);      return false;    }    return method.isAnnotationPresent(FailureIsAnOption.class);  } else {    List<Description> filtered=Request.method(testClass,methodName).getRunner().getDescription().getChildren();    if (filtered.isEmpty()) {      log.apply("Failed to match test for " + methodName + " of "+ className);      return false;    } else {      Description methodDesc=filtered.get(0);      return methodDesc.getAnnotation(FailureIsAnOption.class) != null;    }  }}  }
class C{  @Override public boolean supportsOrderByUnrelated(){  debugCodeCall("supportsOrderByUnrelated");  return true;}  }
class C{  public Builder textSize(int size){  ensurePositiveInt(size,"text size must be > 0");  textSize=size;  return this;}  }
class C{  @Deprecated public void findActorImages(){  if (MovieModuleManager.MOVIE_SETTINGS.isWriteActorImages()) {    try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(getPathNIO())){      for (      Path path : directoryStream) {        if (Utils.isRegularFile(path)) {          for (          MovieActor actor : getActors()) {            if (StringUtils.isBlank(actor.getThumbPath())) {              String name=actor.getNameForStorage();              if (name.equals(path.getFileName().toString())) {                actor.setThumbPath(path.toAbsolutePath().toString());              }            }          }        }      }    } catch (    IOException ex) {    }  }}  }
class C{  @BeforeClass public static void startServer(){  SLF4JBridgeHandler.removeHandlersForRootLogger();  SLF4JBridgeHandler.install();  try {    SelfSignedCertificate ssc=new SelfSignedCertificate();    ServerBuilder sb=new ServerBuilder().port(0,SessionProtocol.HTTPS).defaultMaxRequestLength(16 * 1024 * 1024).sslContext(GrpcSslContexts.forServer(ssc.certificate(),ssc.privateKey()).clientAuth(ClientAuth.REQUIRE).trustManager(TestUtils.loadCert("ca.pem")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).build());    startStaticServer(new ArmeriaGrpcServerBuilder(sb,new GrpcServiceBuilder()));  } catch (  IOException|CertificateException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public boolean processEvent() throws ReplicatorException, InterruptedException {  MySQLPacket packet=MySQLPacket.readPacket(input,readTimeout * 1000);  if (packet == null) {    if (logger.isDebugEnabled()) {      logger.debug("No packet returned from network");    }    return false;  }  int length=packet.getDataLength();  int number=packet.getPacketNumber();  short type=packet.getUnsignedByte();  if (logger.isDebugEnabled()) {    logger.debug("Received packet: number=" + number + " length="+ length+ " type="+ type);  }switch (type) {case 0:    try {      processBinlogEvent(packet);    } catch (    IOException e) {      throw new ExtractorException("Error processing binlog: " + e.getMessage(),e);    }  break;case 0xFE:throw new ExtractorException("EOF packet received");case 0xFF:int errno=packet.getShort();packet.getByte();String sqlState=packet.getString(5);String errMsg=packet.getString();String msg="Error packet received: errno=" + errno + " sqlstate="+ sqlState+ " error="+ errMsg;throw new ExtractorException(msg);default :throw new ExtractorException("Unexpected response while fetching binlog data: packet=" + packet.toString());}return true;}  }
class C{  public static void close(Statement stmt) throws SQLException {  if (stmt != null) {    stmt.close();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrValue;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("title");  attrValue=addrAttr.getNodeValue();  assertEquals("nodeValue","Yes",attrValue);}  }
class C{  String playerHasEnoughUnits(final Collection<Unit> units,final Territory at,final PlayerID player){  if (!player.getUnits().getUnits().containsAll(units)) {    return "Not enough units";  }  return null;}  }
class C{  protected Address buildAndroidAddress(JsonObject jResult) throws JsonSyntaxException {  Address gAddress=new Address(mLocale);  if (!jResult.has("lat") || !jResult.has("lon") || !jResult.has("address"))   return null;  gAddress.setLatitude(jResult.get("lat").getAsDouble());  gAddress.setLongitude(jResult.get("lon").getAsDouble());  JsonObject jAddress=jResult.get("address").getAsJsonObject();  int addressIndex=0;  if (jAddress.has("road")) {    gAddress.setAddressLine(addressIndex++,jAddress.get("road").getAsString());    gAddress.setThoroughfare(jAddress.get("road").getAsString());  }  if (jAddress.has("suburb")) {    gAddress.setSubLocality(jAddress.get("suburb").getAsString());  }  if (jAddress.has("postcode")) {    gAddress.setAddressLine(addressIndex++,jAddress.get("postcode").getAsString());    gAddress.setPostalCode(jAddress.get("postcode").getAsString());  }  if (jAddress.has("city")) {    gAddress.setAddressLine(addressIndex++,jAddress.get("city").getAsString());    gAddress.setLocality(jAddress.get("city").getAsString());  } else   if (jAddress.has("town")) {    gAddress.setAddressLine(addressIndex++,jAddress.get("town").getAsString());    gAddress.setLocality(jAddress.get("town").getAsString());  } else   if (jAddress.has("village")) {    gAddress.setAddressLine(addressIndex++,jAddress.get("village").getAsString());    gAddress.setLocality(jAddress.get("village").getAsString());  }  if (jAddress.has("county")) {    gAddress.setSubAdminArea(jAddress.get("county").getAsString());  }  if (jAddress.has("state")) {    gAddress.setAdminArea(jAddress.get("state").getAsString());  }  if (jAddress.has("country")) {    gAddress.setAddressLine(addressIndex++,jAddress.get("country").getAsString());    gAddress.setCountryName(jAddress.get("country").getAsString());  }  if (jAddress.has("country_code"))   gAddress.setCountryCode(jAddress.get("country_code").getAsString());  Bundle extras=new Bundle();  if (jResult.has("polygonpoints")) {    JsonArray jPolygonPoints=jResult.get("polygonpoints").getAsJsonArray();    ArrayList<GeoPoint> polygonPoints=new ArrayList<GeoPoint>(jPolygonPoints.size());    for (int i=0; i < jPolygonPoints.size(); i++) {      JsonArray jCoords=jPolygonPoints.get(i).getAsJsonArray();      double lon=jCoords.get(0).getAsDouble();      double lat=jCoords.get(1).getAsDouble();      GeoPoint p=new GeoPoint(lat,lon);      polygonPoints.add(p);    }    extras.putParcelableArrayList("polygonpoints",polygonPoints);  }  if (jResult.has("boundingbox")) {    JsonArray jBoundingBox=jResult.get("boundingbox").getAsJsonArray();    BoundingBox bb=new BoundingBox(jBoundingBox.get(1).getAsDouble(),jBoundingBox.get(2).getAsDouble(),jBoundingBox.get(0).getAsDouble(),jBoundingBox.get(3).getAsDouble());    extras.putParcelable("boundingbox",bb);  }  if (jResult.has("osm_id")) {    long osm_id=jResult.get("osm_id").getAsLong();    extras.putLong("osm_id",osm_id);  }  if (jResult.has("osm_type")) {    String osm_type=jResult.get("osm_type").getAsString();    extras.putString("osm_type",osm_type);  }  if (jResult.has("display_name")) {    String display_name=jResult.get("display_name").getAsString();    extras.putString("display_name",display_name);  }  gAddress.setExtras(extras);  return gAddress;}  }
class C{  public void updateDisplay(IMultiPoint[] items){  if (items == null) {    return;  }  model.setItems(items);  int width=getCanvas().getWidth();  int height=getCanvas().getHeight();  nativeItems=items;  items=transform(items,width,height);  model.setItems(items);  getCanvas().redrawState();  getCanvas().repaint();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.FUNCTION_DEFINITION__DEFINED_TYPE:    setDefinedType((Type)null);  return;case N4JSPackage.FUNCTION_DEFINITION__FPARS:getFpars().clear();return;case N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)null);return;case N4JSPackage.FUNCTION_DEFINITION__GENERATOR:setGenerator(GENERATOR_EDEFAULT);return;case N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC:setDeclaredAsync(DECLARED_ASYNC_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static Vector2D create(double x,double y){  return new Vector2D(x,y);}  }
class C{  private void sendNotification(Bundle data){  if (data != null) {    try {      String mTitle=data.getString("title","title is empty");      String mMessage=data.getString("message","message is empty");      String mSubtitle=data.getString("subtitle","subtitle is empty");      Intent mIntent=new Intent(this,MainActivity.class);      mIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);      PendingIntent mPendingIntent=PendingIntent.getActivity(this,0,mIntent,PendingIntent.FLAG_ONE_SHOT);      Uri mDefaultSoundURI=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);      NotificationCompat.Builder mNotificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.mipmap.ic_launcher).setContentTitle(mTitle).setSubText(mSubtitle).setContentText(mMessage).setAutoCancel(true).setSound(mDefaultSoundURI).setContentIntent(mPendingIntent);      NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);      notificationManager.notify(0,mNotificationBuilder.build());    } catch (    Exception e) {      Log.d(GCM_LISTENER_DEBUG,"Exception on sendNotification: " + e.getMessage());    }  }}  }
class C{  public String toJson(){  return JsonUtils.getSerializer().toJson(this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public EnumRowStatus(int valueIndex) throws IllegalArgumentException {  super(valueIndex);}  }
class C{  @DSComment("GUI, dialog") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:26.491 -0500",hash_original_method="DB04742794ECD07699F134042784BBAE",hash_generated_method="995FB47B2ED1ADE79D1CFC3C7747B4D2") public void dismiss(){  dismissInternal(false);}  }
class C{  @Override public IBlockState onBlockPlaced(World worldIn,BlockPos pos,EnumFacing facing,float hitX,float hitY,float hitZ,int meta,EntityLivingBase placer){  return func_181088_a(worldIn,pos,facing.getOpposite()) ? this.getDefaultState().withProperty(FACING,facing) : this.getDefaultState().withProperty(FACING,EnumFacing.DOWN);}  }
class C{  private void updateTaskTenant(TaskResourceRep taskResourceRep){  Task task=_dbClient.queryObject(Task.class,taskResourceRep.getId());  if (areEqual(task.getTenant(),NullColumnValueGetter.getNullURI())) {    StorageOSUser user=getUserFromContext();    URI userTenantUri=URI.create(user.getTenantId());    task.setTenant(userTenantUri);    RelatedResourceRep tenant=new RelatedResourceRep();    tenant.setId(userTenantUri);    tenant.setLink(new RestLinkRep("self",URI.create("/tenants/" + userTenantUri.toString())));    taskResourceRep.setTenant(tenant);    _dbClient.persistObject(task);    List<String> traceParams=new ArrayList<String>();    traceParams.add(task.getId().toString());    traceParams.add(user.getName());    traceParams.add(user.getTenantId());    _log.info("Update the task {} with the user's {} tenant {}",traceParams);  }}  }
class C{  public double averageArea(){  return averageArea(level);}  }
class C{  public void updatePosition(Particle particle,long elapsedTime){  Vector3f speed=particle.getSpeed();  float delta=elapsedTime / 1000.0f;  float dx=speed.x * delta;  float dy=speed.y * delta;  float dz=speed.z * delta;  Vector3f pos=particle.getPosition();  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);}  }
class C{  protected void runTests() throws Exception {  runOnce();}  }
class C{  @LogMessageDoc(level="INFO",message="Listening for internal floodlight RPC on {port}",explanation="The internal RPC service is ready for connections") protected void startServer(ChannelPipelineFactory pipelineFactory){  final ServerBootstrap bootstrap=new ServerBootstrap(new NioServerSocketChannelFactory(bossExecutor,workerExecutor));  bootstrap.setOption("reuseAddr",true);  bootstrap.setOption("child.keepAlive",true);  bootstrap.setOption("child.tcpNoDelay",true);  bootstrap.setOption("child.sendBufferSize",SEND_BUFFER_SIZE);  bootstrap.setOption("child.receiveBufferSize",SEND_BUFFER_SIZE);  bootstrap.setPipelineFactory(pipelineFactory);  serverBootstrap=bootstrap;  int port=syncManager.getClusterConfig().getNode().getPort();  InetSocketAddress sa;  String listenAddress=syncManager.getClusterConfig().getListenAddress();  if (listenAddress != null)   sa=new InetSocketAddress(listenAddress,port); else   sa=new InetSocketAddress(port);  cg.add(bootstrap.bind(sa));  logger.info("Listening for internal floodlight RPC on {}",sa);}  }
class C{  public StandardMethodMetadata(Method introspectedMethod){  this(introspectedMethod,false);}  }
class C{  public Vector(){  this(DEFAULT_SIZE,0);}  }
class C{  @Override public void call(final Throwable throwable){  Timber.e(throwable,"RxNetErrorProcessor");}  }
class C{  public void addFilter(PacketFilter filter){  if (filter == null) {    throw new IllegalArgumentException("Parameter cannot be null.");  }  if (size == filters.length) {    PacketFilter[] newFilters=new PacketFilter[filters.length + 2];    for (int i=0; i < filters.length; i++) {      newFilters[i]=filters[i];    }    filters=newFilters;  }  filters[size]=filter;  size++;}  }
class C{  @Override public boolean propertyExists(final String name) throws JMSException {  if (ActiveMQRAMessage.trace) {    ActiveMQRALogger.LOGGER.trace("propertyExists(" + name + ")");  }  return message.propertyExists(name);}  }
class C{  public static Number count(double[] self,Object value){  return count(InvokerHelper.asIterator(self),value);}  }
class C{  public boolean isDate(){  if (m_displayType == 0)   return m_value instanceof Timestamp;  return DisplayType.isDate(m_displayType);}  }
class C{  private String toISO8601(Date date){  String formatted=ISO8601_df.format(date);  return formatted;}  }
class C{  private static Headers combine(Headers cachedHeaders,Headers networkHeaders) throws IOException {  Headers.Builder result=new Headers.Builder();  for (int i=0, size=cachedHeaders.size(); i < size; i++) {    String fieldName=cachedHeaders.name(i);    String value=cachedHeaders.value(i);    if ("Warning".equalsIgnoreCase(fieldName) && value.startsWith("1")) {      continue;    }    if (!OkHeaders.isEndToEnd(fieldName) || networkHeaders.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0, size=networkHeaders.size(); i < size; i++) {    String fieldName=networkHeaders.name(i);    if ("Content-Length".equalsIgnoreCase(fieldName)) {      continue;    }    if (OkHeaders.isEndToEnd(fieldName)) {      result.add(fieldName,networkHeaders.value(i));    }  }  return result.build();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public DataQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public static Counter<String> readWeights(String filename){  return readWeights(filename,null);}  }
class C{  private void _cancelActivity(Activity a){  boolean fire=false;synchronized (this) {synchronized (a) {      if (a.isScheduled()) {        _removeActivity(a);        fire=true;      }      a.setRunning(false);    }  }  if (fire)   a.fireActivityCancelled();}  }
class C{  public void resetLabelsToSkip(){  mIsAxisModulusCustom=false;}  }
class C{  public IntVector(int n,int s){  this(n);  set(s);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void write(Writer out,Object object) throws IOException {  if (object instanceof String) {    out.write((String)object);  } else   if (object instanceof Object[]) {    out.write(toArrayString((Object[])object));  } else   if (object instanceof Map) {    out.write(toMapString((Map)object));  } else   if (object instanceof Collection) {    out.write(toListString((Collection)object));  } else   if (object instanceof Writable) {    Writable writable=(Writable)object;    writable.writeTo(out);  } else   if (object instanceof InputStream || object instanceof Reader) {    Reader reader;    if (object instanceof InputStream) {      reader=new InputStreamReader((InputStream)object);    } else {      reader=(Reader)object;    }    char[] chars=new char[8192];    int i;    while ((i=reader.read(chars)) != -1) {      out.write(chars,0,i);    }    reader.close();  } else {    out.write(toString(object));  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.MODEL__MODEL:    return basicSetModel(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void acceptState(){}  }
class C{  public static boolean intersects(Coordinate p1,Coordinate p2,Coordinate q){  if (((q.x >= (p1.x < p2.x ? p1.x : p2.x)) && (q.x <= (p1.x > p2.x ? p1.x : p2.x))) && ((q.y >= (p1.y < p2.y ? p1.y : p2.y)) && (q.y <= (p1.y > p2.y ? p1.y : p2.y)))) {    return true;  }  return false;}  }
class C{  public static DeleteSnapshotRequest deleteSnapshotRequest(String repository,String snapshot){  return new DeleteSnapshotRequest(repository,snapshot);}  }
class C{  @Override public SpatialSampledEdgeDecorator<E> createEdge(E delegate){  return new SpatialSampledEdgeDecorator<E>(delegate);}  }
class C{  private void addRow(T value,boolean fireEvent){  rowData.add(createNewRow(value));  if (fireEvent) {    this.fireTableRowsInserted(getRowCount(),getRowCount());  }}  }
class C{  public static String rowToString(JSONArray ja){  StringBuilder sb=new StringBuilder();  for (int i=0; i < ja.length(); i+=1) {    if (i > 0) {      sb.append(',');    }    Object object=ja.opt(i);    if (object != null) {      String string=object.toString();      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '"')) {        sb.append('"');        int length=string.length();        for (int j=0; j < length; j+=1) {          char c=string.charAt(j);          if (c >= ' ' && c != '"') {            sb.append(c);          }        }        sb.append('"');      } else {        sb.append(string);      }    }  }  sb.append('\n');  return sb.toString();}  }
class C{  private void createRemoteDir(ITestDevice device,String remoteFilePath) throws DeviceNotAvailableException {  if (device.doesFileExist(remoteFilePath)) {    return;  }  File f=new File(remoteFilePath);  String parentPath=f.getParent();  if (parentPath != null) {    createRemoteDir(device,parentPath);  }  device.executeShellCommand(String.format("mkdir %s",remoteFilePath));}  }
class C{  private void updateChargeAnim(){  if (getBatteryStatus() != BatteryManager.BATTERY_STATUS_CHARGING) {    if (mIsAnimating) {      mIsAnimating=false;      mAnimOffset=0;      mHandler.removeCallbacks(mInvalidate);    }    return;  }  mIsAnimating=true;  if (mAnimOffset > 360) {    mAnimOffset=0;  } else {    mAnimOffset+=3;  }  mHandler.removeCallbacks(mInvalidate);  mHandler.postDelayed(mInvalidate,50);}  }
class C{  @Override public void aggregateDimensionData(AbstractScannedResult scannedResult,MeasureAggregator[] aggeragtor){  long[] surrogateKeyOfColumnGroup=null;  surrogateKeyOfColumnGroup=columnGroupKeyGenerator.getKeyArray(scannedResult.getDimensionKey(blockIndex));  Object actualData=null;  int surrogate=0;  int aggStartIndex=aggregatorStartIndexes;  for (int i=0; i < dimensionAggeragtorInfo.size(); i++) {    surrogate=(int)surrogateKeyOfColumnGroup[dimensionAggeragtorInfo.get(i).getDim().getColumnGroupOrdinal()];    if (1 == surrogate) {      continue;    }    actualData=DataTypeUtil.getDataBasedOnDataType(columnDictionary.get(i).getDictionaryValueForKey(surrogate),dimensionAggeragtorInfo.get(i).getDim().getDataType());    if (null == actualData) {      continue;    }    if (DataType.DECIMAL == dimensionAggeragtorInfo.get(i).getDim().getDataType()) {      actualData=((Decimal)actualData).toJavaBigDecimal();    }    for (int j=0; j < dimensionAggeragtorInfo.get(i).getAggList().size(); j++) {      aggeragtor[aggStartIndex++].agg(actualData);    }  }}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public void addICalendar(ICalendar ical){  writer().write(ical);}  }
class C{  public static String shadeDouble(double d,double max){  int a=(int)Math.floor(d * 10 / max + 0.5);  if (a > 10 || a < 0) {    String x=lnf.format(d);    a=5 - x.length();    for (int i=0; i < a; i++) {      x+=" ";    }    return "<" + x + ">";  }  return "[" + shades[a] + "]";}  }
class C{  public Wine runBackground(String executableToRun) throws ScriptFailureException {  runBackground(executableToRun,null,null);  return this;}  }
class C{  @DSComment("Power management") @DSSpec(DSCat.DEVICE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.662 -0500",hash_original_method="557ADDA01C2A32642A34A73D3A75D3D5",hash_generated_method="82D4DE857663CEA5A041286E314C40BF") public void acquire(long timeout){synchronized (mToken) {    acquireLocked();    mHandler.postDelayed(mReleaser,timeout);  }}  }
class C{  @Override public void commitTransactionStage3() throws IOException {  getRollBackFile().delete();  if (inTransaction)   finishTransaction();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Text dayNode;  DocumentFragment docFrag;  Node retval;  Node firstChild;  Node lastChild;  Node refChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  dayNode=doc.createTextNode("day");  docFrag=doc.createDocumentFragment();  retval=docFrag.appendChild(terNode);  retval=docFrag.appendChild(dayNode);  refChild=titleAttr.getFirstChild();  retval=titleAttr.insertBefore(docFrag,refChild);  value=titleAttr.getValue();  assertEquals("attrValue","terdayYes",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","terdayYes",value);  value=retval.getNodeValue();  assertNull("retvalValue",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","ter",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","Yes",value);}  }
class C{  public void update(int from,int to){  Change.Source<?> source=IdRangeChangeSource.forItems(from,to,30);  ExecutorService executorService=new ThreadPoolExecutor(0,10,0,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());  WikibaseUris uris=new WikibaseUris("www.wikidata.org");  Update<?> update=new Update<>(source,wikibaseRepository,rdfRepository(),munger,executorService,0,uris,false);  update.run();  executorService.shutdown();}  }
class C{  public void onDisconnected(IgniteFuture<?> reconnectFut){synchronized (this) {    nodeLeft=true;    if (pendingFut != null) {      IgniteClientDisconnectedCheckedException err=new IgniteClientDisconnectedCheckedException(reconnectFut,"Failed to wait for transaction synchronizer, client node disconnected: " + nodeId);      pendingFut.onDone(err);      pendingFut=null;    }  }}  }
class C{  public void testBug57022() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  String originalCatalog=this.conn.getCatalog();  createDatabase("bug57022");  createProcedure("bug57022.procbug57022","(x int, out y int)\nbegin\ndeclare z int;\nset z = x+1, y = z;\nend\n");  CallableStatement cStmt=null;  try {    cStmt=this.conn.prepareCall("{call `bug57022`.`procbug57022`(?, ?)}");    cStmt.setInt(1,5);    cStmt.registerOutParameter(2,Types.INTEGER);    cStmt.execute();    assertEquals(6,cStmt.getInt(2));    cStmt.clearParameters();    cStmt.close();    this.conn.setCatalog("bug57022");    cStmt=this.conn.prepareCall("{call bug57022.procbug57022(?, ?)}");    cStmt.setInt(1,5);    cStmt.registerOutParameter(2,Types.INTEGER);    cStmt.execute();    assertEquals(6,cStmt.getInt(2));    cStmt.clearParameters();    cStmt.close();    this.conn.setCatalog("mysql");    cStmt=this.conn.prepareCall("{call `bug57022`.`procbug57022`(?, ?)}");    cStmt.setInt(1,5);    cStmt.registerOutParameter(2,Types.INTEGER);    cStmt.execute();    assertEquals(6,cStmt.getInt(2));  }  finally {    if (cStmt != null) {      cStmt.clearParameters();      cStmt.close();    }    this.conn.setCatalog(originalCatalog);  }}  }
class C{  public CompositeAction add(Action a){  m_actions.add(a);  return this;}  }
class C{  protected String createFontReference(Font f){  return "F" + (currentFontIndex++);}  }
class C{  public TypeProposalInfo(IJavaProject project,CompletionProposal proposal){  super(project,proposal);}  }
class C{  public double calculateCost(Session session){  Trace t=session.getTrace();  if (t.isDebugEnabled()) {    t.debug("Plan       : calculate cost for plan {0}",Arrays.toString(allFilters));  }  double cost=1;  boolean invalidPlan=false;  final HashSet<Column> allColumnsSet=ExpressionVisitor.allColumnsForTableFilters(allFilters);  for (int i=0; i < allFilters.length; i++) {    TableFilter tableFilter=allFilters[i];    if (t.isDebugEnabled()) {      t.debug("Plan       :   for table filter {0}",tableFilter);    }    PlanItem item=tableFilter.getBestPlanItem(session,allFilters,i,allColumnsSet);    planItems.put(tableFilter,item);    if (t.isDebugEnabled()) {      t.debug("Plan       :   best plan item cost {0} index {1}",item.cost,item.getIndex().getPlanSQL());    }    cost+=cost * item.cost;    setEvaluatable(tableFilter,true);    Expression on=tableFilter.getJoinCondition();    if (on != null) {      if (!on.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {        invalidPlan=true;        break;      }    }  }  if (invalidPlan) {    cost=Double.POSITIVE_INFINITY;  }  if (t.isDebugEnabled()) {    session.getTrace().debug("Plan       : plan cost {0}",cost);  }  for (  TableFilter f : allFilters) {    setEvaluatable(f,false);  }  return cost;}  }
class C{  public static Builder builder(Buffer buffer){  return new Builder(buffer);}  }
class C{  protected static void show_times(){  long total_time=final_time - start_time;  System.err.println(". . . . . . . . . . . . . . . . . . . . . . . . . ");  System.err.println("  Timing Summary");  System.err.println("    Total time       " + timestr(final_time - start_time,total_time));  System.err.println("      Startup        " + timestr(prelim_end - start_time,total_time));  System.err.println("      Parse          " + timestr(parse_end - prelim_end,total_time));  if (check_end != 0)   System.err.println("      Checking       " + timestr(check_end - parse_end,total_time));  if (check_end != 0 && build_end != 0)   System.err.println("      Parser Build   " + timestr(build_end - check_end,total_time));  if (nullability_end != 0 && check_end != 0)   System.err.println("        Nullability  " + timestr(nullability_end - check_end,total_time));  if (first_end != 0 && nullability_end != 0)   System.err.println("        First sets   " + timestr(first_end - nullability_end,total_time));  if (machine_end != 0 && first_end != 0)   System.err.println("        State build  " + timestr(machine_end - first_end,total_time));  if (table_end != 0 && machine_end != 0)   System.err.println("        Table build  " + timestr(table_end - machine_end,total_time));  if (reduce_check_end != 0 && table_end != 0)   System.err.println("        Checking     " + timestr(reduce_check_end - table_end,total_time));  if (emit_end != 0 && build_end != 0)   System.err.println("      Code Output    " + timestr(emit_end - build_end,total_time));  if (emit.symbols_time != 0)   System.err.println("        Symbols      " + timestr(emit.symbols_time,total_time));  if (emit.parser_time != 0)   System.err.println("        Parser class " + timestr(emit.parser_time,total_time));  if (emit.action_code_time != 0)   System.err.println("          Actions    " + timestr(emit.action_code_time,total_time));  if (emit.production_table_time != 0)   System.err.println("          Prod table " + timestr(emit.production_table_time,total_time));  if (emit.action_table_time != 0)   System.err.println("          Action tab " + timestr(emit.action_table_time,total_time));  if (emit.goto_table_time != 0)   System.err.println("          Reduce tab " + timestr(emit.goto_table_time,total_time));  System.err.println("      Dump Output    " + timestr(dump_end - emit_end,total_time));}  }
class C{  public boolean contains(BasicBlock b){  return b.inq;}  }
class C{  public void onStartDelegate(){  pilotUISyncer.hostActivityOnStarted();}  }
class C{  public DictionaryCompoundWordTokenFilterFactory(Map<String,String> args){  super(args);  dictFile=require(args,"dictionary");  minWordSize=getInt(args,"minWordSize",CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);  minSubwordSize=getInt(args,"minSubwordSize",CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);  maxSubwordSize=getInt(args,"maxSubwordSize",CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);  onlyLongestMatch=getBoolean(args,"onlyLongestMatch",true);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @SuppressWarnings("unchecked") @Test public void wrongFirstParameter(){  List<String> parameterTypes=Mockito.mock(List.class);  Mockito.when(parameterTypes.size()).thenReturn(2);  Mockito.when(parameterTypes.get(0)).thenReturn("long");  Mockito.when(rsc.getParameterTypes()).thenReturn(parameterTypes);  Object[] parameters=new Object[]{1L,"Value"};  Object object=new Object();  preparedStatementParameterHook.beforeBody(0,0,object,parameters,rsc);  preparedStatementParameterHook.firstAfterBody(0,0,object,parameters,null,rsc);  preparedStatementParameterHook.secondAfterBody(coreService,0,0,object,parameters,null,rsc);  Mockito.verifyZeroInteractions(statementStorage);  Mockito.verifyZeroInteractions(coreService);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void sendEmail(Context context,String[] recipients,String subject,String text,Uri stream){  Intent intent=createSendEmailIntent(recipients,subject,text,stream);  checkContext(context,intent);  context.startActivity(intent);}  }
class C{  private void checkAZombieServer(ServerWrapper zombieServer){  try {    QueryResponse resp=zombieServer.client.query(solrQuery);    if (resp.getStatus() == 0) {      ServerWrapper wrapper=zombieServers.remove(zombieServer.getKey());      if (wrapper != null) {        wrapper.failedPings=0;        if (wrapper.standard) {          addToAlive(wrapper);        }      } else {      }    }  } catch (  Exception e) {    zombieServer.failedPings++;    if (!zombieServer.standard && zombieServer.failedPings >= NONSTANDARD_PING_LIMIT) {      zombieServers.remove(zombieServer.getKey());    }  }}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  void endAction(){  if (currentAction == null)   return;  if (mergingSingles)   newRangeToCurrentAction();  Object[] tuple={currentActionType,currentAction};  actionList.subList(actionsIndex,actionList.size()).clear();  actionList.add(tuple);  actionsIndex=actionList.size();  isBackspace=false;  currentActionType=null;  currentAction=null;  actionLastRange=null;  newRangePosition=-1L;  newRangeLength=-1L;  mergedSinglesTop=-1L;}  }
class C{  @Override public int available() throws IOException {  return m_InputStream.available();}  }
class C{  public void selectOperators(List<Operator> ops){  if (options.hasData()) {    Operator op;    if (model.getDataType().getType() == DataType.MICRO_SAT) {      if (model.getClockType() == ClockType.STRICT_CLOCK) {        op=getOperator("microsatUpDownRateHeights");        ops.add(op);      } else {        throw new UnsupportedOperationException("Microsatellite only supports strict clock model");      }    } else {switch (model.getClockType()) {case STRICT_CLOCK:        op=getOperator("upDownRateHeights");      ops.add(op);    break;case UNCORRELATED:switch (model.getClockDistributionType()) {case LOGNORMAL:    op=getOperator("upDownUCLDMeanHeights");  ops.add(op);break;case GAMMA:op=getOperator("upDownUCGDMeanHeights");ops.add(op);break;case CAUCHY:throw new UnsupportedOperationException("Uncorrelated Cauchy model not implemented yet");case EXPONENTIAL:op=getOperator("upDownUCEDMeanHeights");ops.add(op);break;}if (model.isContinuousQuantile()) {ops.add(getOperator("uniformBranchRateQuantiles"));} else {ops.add(getOperator("swapBranchRateCategories"));ops.add(getOperator("uniformBranchRateCategories"));}break;case AUTOCORRELATED:throw new UnsupportedOperationException("Autocorrelated relaxed clock model not implemented yet");case RANDOM_LOCAL_CLOCK:case FIXED_LOCAL_CLOCK:op=getOperator("upDownRateHeights");ops.add(op);break;default :throw new IllegalArgumentException("Unknown clock model");}}}}  }
class C{  public static String encodingCleanup(String str){  StringBuilder sb=new StringBuilder();  boolean startedWithCorrectString=false;  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (Character.isDigit(c) || Character.isLetter(c) || c == '-' || c == '_') {      startedWithCorrectString=true;      sb.append(c);      continue;    }    if (startedWithCorrectString)     break;  }  return sb.toString().trim();}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.viewPager=this.findView(R.id.view_pager_vp);  this.tabLayout=this.findView(R.id.tab_layout_tl);}  }
class C{  public static void register(XTIFFDescriptor odesc){  OperationRegistry reg=JAI.getDefaultInstance().getOperationRegistry();  reg.registerDescriptor(odesc);  ImageCodec.registerCodec(new XTIFFCodec());}  }
class C{  static double hypot_NaN(final double xAbs,final double yAbs,final double zAbs){  if (xAbs == Double.POSITIVE_INFINITY || yAbs == Double.POSITIVE_INFINITY || zAbs == Double.POSITIVE_INFINITY) {    return Double.POSITIVE_INFINITY;  }  return Double.NaN;}  }
class C{  public XMLElement2(){  this(new Hashtable(),false,true,true);}  }
class C{  public final void testAddValidator(){  Validator<CharSequence> validator=Validators.notEmpty("foo");  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addValidator(validator);  abstractValidateableView.addValidator(validator);  Collection<Validator<CharSequence>> validators=abstractValidateableView.getValidators();  assertEquals(1,validators.size());  assertEquals(validator,validators.iterator().next());}  }
class C{  public void selectItemAt(int position){  selectItemAt(position,true);}  }
class C{  public DBException(Exception e,String sql,List<Object> params){  this(e);  m_sql=sql;  if (params != null)   m_params=params.toArray();}  }
class C{  public String mapFieldName(String owner,String name,String desc){  return name;}  }
class C{  private void hideOverrideCommentText(){  sashForm.setMaximizedControl(policyFailureTable);}  }
class C{  public String soundex(String str){  if (str == null) {    return null;  }  str=SoundexUtils.clean(str);  if (str.length() == 0) {    return str;  }  char out[]={'0','0','0','0'};  char last, mapped;  int incount=1, count=1;  out[0]=str.charAt(0);  last=getMappingCode(str,0);  while ((incount < str.length()) && (count < out.length)) {    mapped=getMappingCode(str,incount++);    if (mapped != 0) {      if ((mapped != '0') && (mapped != last)) {        out[count++]=mapped;      }      last=mapped;    }  }  return new String(out);}  }
class C{  private static Document createFromStringText(String text) throws Exception {  Document document=null;  if (text != null) {    document=DocumentHelper.parseText(text);  }  return document;}  }
class C{  public void addSpiderListener(SpiderListener listener){  if (spider != null) {    this.spider.addSpiderListener(listener);  } else {    this.pendingSpiderListeners.add(listener);  }}  }
class C{  public BlockwiseStatus(int contentFormat,int num,int szx){  this.contentFormat=contentFormat;  this.currentNum=num;  this.currentSzx=szx;}  }
class C{  private ASN1Sequence filterUnauthenticatedAttributes(ASN1Set unauthenticatedAttributes,TimestampToken timestampToken){  ASN1EncodableVector result=new ASN1EncodableVector();  for (int ii=0; ii < unauthenticatedAttributes.size(); ii++) {    final Attribute attribute=Attribute.getInstance(unauthenticatedAttributes.getObjectAt(ii));    final ASN1ObjectIdentifier attrType=attribute.getAttrType();    if (id_aa_ets_archiveTimestampV2.equals(attrType) || id_aa_ets_archiveTimestampV3.equals(attrType)) {      try {        TimeStampToken token=new TimeStampToken(new CMSSignedData(DSSASN1Utils.getDEREncoded(attribute.getAttrValues().getObjectAt(0).toASN1Primitive())));        if (!token.getTimeStampInfo().getGenTime().before(timestampToken.getGenerationTime())) {          continue;        }      } catch (      Exception e) {        throw new DSSException(e);      }    }    result.add(unauthenticatedAttributes.getObjectAt(ii));  }  return new DERSequence(result);}  }
class C{  public static String toString(double M[][],String name){  StringBuilder sb=new StringBuilder(name + " = [\n");  for (int j=0; j < M.length; j++) {    for (int k=0; k < M[j].length; k++) {      sb.append(String.format("%6.2f ",M[j][k]));    }    sb.append(";\n");  }  sb.append("]");  return sb.toString();}  }
class C{  private EnvironmentLogger buildParentTree(String childName){  if (childName == null || childName.equals(""))   return null;  int p=childName.lastIndexOf('.');  String parentName;  if (p > 0)   parentName=childName.substring(0,p); else   parentName="";  EnvironmentLogger parent=null;  SoftReference<EnvironmentLogger> parentRef=_envLoggers.get(parentName);  if (parentRef != null)   parent=parentRef.get();  if (parent != null)   return parent; else {    parent=new EnvironmentLogger(parentName,null);    _envLoggers.put(parentName,new SoftReference<EnvironmentLogger>(parent));    EnvironmentLogger grandparent=buildParentTree(parentName);    if (grandparent != null)     parent.setParent(grandparent);    return parent;  }}  }
class C{  public CUdevice(){}  }
class C{  public void reportTestEnded(TestIdentifier test){  Test result=findTest(test);  if (!result.getResult().equals(CtsTestStatus.FAIL)) {    result.setResultStatus(CtsTestStatus.PASS);  }  result.updateEndTime();}  }
class C{  private void parseEntity(Element entityNode,Vector<Entity> list){  Entity entity=null;  String chassis=entityNode.getAttribute(CHASSIS);  String model=entityNode.getAttribute(MODEL);  entity=getEntity(chassis,model);  if (entity == null) {    warning.append("Failed to load entity!");    return;  }  parseEntityAttributes(entity,entityNode);  NodeList nl=entityNode.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node currNode=nl.item(i);    if (currNode.getParentNode() != entityNode) {      continue;    }    int nodeType=currNode.getNodeType();    if (nodeType == Node.ELEMENT_NODE) {      Element currEle=(Element)currNode;      String nodeName=currNode.getNodeName();      if (nodeName.equalsIgnoreCase(PILOT)) {        parsePilot(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(LOCATION)) {        parseLocation(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(MOVEMENT)) {        parseMovement(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(TURRETLOCK)) {        parseTurretLock(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(TURRET2LOCK)) {        parseTurret2Lock(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(SI)) {        parseSI(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(HEAT)) {        parseHeat(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(FUEL)) {        parseFuel(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(KF)) {        parseKF(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(SAIL)) {        parseSail(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(AEROCRIT)) {        parseAeroCrit(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(TANKCRIT)) {        parseTankCrit(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(BOMBS)) {        parseBombs(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(C3I)) {        parseC3I(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(BA_MEA)) {        parseBAMEA(currEle,entity);      } else       if (nodeName.equalsIgnoreCase(BA_APM)) {        parseBAAPM(currEle,entity);      }    } else {      continue;    }  }  list.add(entity);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public boolean canHaveAttachment(){  if (getKeyColumnName().endsWith("_ID"))   return true;  return false;}  }
class C{  private void filtroPesquisa(String valor,ObservableList<Visitante> listaVisitante){  FilteredList<Visitante> dadosFiltrados=new FilteredList<>(listaVisitante,null);  dadosFiltrados.setPredicate(null);  SortedList<Visitante> dadosOrdenados=new SortedList<>(dadosFiltrados);  dadosOrdenados.comparatorProperty().bind(tbVisitante.comparatorProperty());  Filtro.mensagem(legenda,dadosOrdenados.size(),"Quantidade de visitantes encontrados");  tbVisitante.setItems(dadosOrdenados);}  }
class C{  public CreateIndexRequest(String index){  this(index,EMPTY_SETTINGS);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void runTests() throws Exception {  startToMain("RedefineTarg");  ThreadReference thread=toTop();  println("------ Before Redefine ------");  checkFrames(thread,before);  println("------ After Redefine ------");  doRedefine("Different_RedefineSubTarg.class");  checkFrames(thread,after);  println("------ Static 2 ------");  toTop();  checkFrames(thread,shorter);  println("------ Instance ------");  toTop();  checkFrames(thread,shorter);  println("------ Re-entered ------");  toTop();  checkFrames(thread,refresh);  println("------ Breakpoints ------");  doRedefine("RedefineSubTarg.class");  for (int i=0; i < bps.length; ++i) {    setBP(bps[i]);  }  listenUntilVMDisconnect();  if (bpCnt != bpPlaces.length) {    failure("FAIL: Wrong number of breakpoints encountered: " + bpCnt);  }  if (!testFailed) {    println("RedefineTest(method): passed");  } else {    throw new Exception("RedefineTest(method): failed");  }}  }
class C{  public double capacity(){  return capacity;}  }
class C{  public Iterator<E> iterator(){  return new ListIterator<E>(this);}  }
class C{  public void testMakeContainerWithOneDeployable(){  CargoTask task=new CargoTask();  task.setContainerId("resin2x");  task.setType(ContainerType.INSTALLED);  ConfigurationElement configurationElement=task.createConfiguration();  configurationElement.setType("standalone");  DeployableElement warElement=new DeployableElement();  warElement.setType(DeployableType.WAR.getType());  warElement.setFile("some/war");  configurationElement.addConfiguredDeployable(warElement);  configurationElement.setHome("somewhere");  LocalContainer container=(LocalContainer)task.makeContainer();  assertEquals(Resin2xStandaloneLocalConfiguration.class.getName(),container.getConfiguration().getClass().getName());  assertEquals(1,container.getConfiguration().getDeployables().size());  Deployable deployable=container.getConfiguration().getDeployables().get(0);  assertEquals(WAR.class.getName(),deployable.getClass().getName());  assertEquals("some/war",deployable.getFile());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void removeChannelFromFavorites(String channel){  channel=prepareChannel(channel);  if (channel != null) {    settings.listRemove(FAVORITES_SETTING,channel);  }}  }
class C{  protected synchronized void establishStoreHome() throws IOException {  if (m_storeDirOK) {    return;  }  if (!m_storeHome.exists()) {    if (!m_storeHome.mkdir()) {      throw new IOException("Unable to create the metastore directory: " + m_storeHome.toString());    }  }  if (!m_storeHome.isDirectory()) {    throw new IOException("The metastore (" + m_storeHome + ") seems to exist, but it isn't a directory!");  }  m_storeDirOK=true;  lockStore();  File[] contents=m_storeHome.listFiles();  for (  File f : contents) {    if (f.isDirectory()) {      Map<String,File> store=new LinkedHashMap<String,File>();      m_stores.put(f.getName(),store);      File[] storeEntries=f.listFiles();      for (      File se : storeEntries) {        store.put(se.getName(),se);      }    }  }  unlockStore();}  }
class C{  @SuppressWarnings("unchecked") public ClassListParameter(OptionID optionID,Class<?> restrictionClass){  super(optionID);  this.restrictionClass=(Class<C>)restrictionClass;}  }
class C{  public AtomicLongArray(long[] array){  this.array=array.clone();}  }
class C{  @SuppressWarnings("unchecked") private void attemptAuthentication(boolean usePasswdFromSharedState) throws LoginException {  getUsernamePassword(usePasswdFromSharedState);  String localPassword;  if (((localPassword=userCredentials.getProperty(username)) == null) || (!localPassword.equals(new String(password)))) {    if (logger.debugOn()) {      logger.debug("login","Invalid username or password");    }    throw new FailedLoginException("Invalid username or password");  }  if (storePass && !sharedState.containsKey(USERNAME_KEY) && !sharedState.containsKey(PASSWORD_KEY)) {    sharedState.put(USERNAME_KEY,username);    sharedState.put(PASSWORD_KEY,password);  }  user=new JMXPrincipal(username);  if (logger.debugOn()) {    logger.debug("login","User '" + username + "' successfully validated");  }}  }
class C{  public byte[] evaluateChallenge(byte[] challengeData) throws SaslException {  if (completed) {    throw new IllegalStateException("EXTERNAL authentication already completed");  }  completed=true;  return username;}  }
class C{  public ICalReader(Reader reader){  this(reader,ICalVersion.V2_0);}  }
class C{  private Instance readInstance(ResultSet rs) throws Exception {  ResultSetMetaData md=rs.getMetaData();  int numAttributes=md.getColumnCount();  double[] vals=new double[numAttributes];  m_structure.delete();  for (int i=1; i <= numAttributes; i++) {switch (m_DataBaseConnection.translateDBColumnType(md.getColumnTypeName(i))) {case DatabaseConnection.STRING:      String str=rs.getString(i);    if (rs.wasNull()) {      vals[i - 1]=Utils.missingValue();    } else {      Double index=m_nominalIndexes[i - 1].get(str);      if (index == null) {        index=new Double(m_structure.attribute(i - 1).addStringValue(str));      }      vals[i - 1]=index.doubleValue();    }  break;case DatabaseConnection.TEXT:str=rs.getString(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {Double index=m_nominalIndexes[i - 1].get(str);if (index == null) {  index=new Double(m_structure.attribute(i - 1).addStringValue(str));}vals[i - 1]=index.doubleValue();}break;case DatabaseConnection.BOOL:boolean boo=rs.getBoolean(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=(boo ? 1.0 : 0.0);}break;case DatabaseConnection.DOUBLE:double dd=rs.getDouble(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=dd;}break;case DatabaseConnection.BYTE:byte by=rs.getByte(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=by;}break;case DatabaseConnection.SHORT:short sh=rs.getShort(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=sh;}break;case DatabaseConnection.INTEGER:int in=rs.getInt(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=in;}break;case DatabaseConnection.LONG:long lo=rs.getLong(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=lo;}break;case DatabaseConnection.FLOAT:float fl=rs.getFloat(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=fl;}break;case DatabaseConnection.DATE:Date date=rs.getDate(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=date.getTime();}break;case DatabaseConnection.TIME:Time time=rs.getTime(i);if (rs.wasNull()) {vals[i - 1]=Utils.missingValue();} else {vals[i - 1]=time.getTime();}break;default :vals[i - 1]=Utils.missingValue();}}Instance inst;if (m_CreateSparseData) {inst=new SparseInstance(1.0,vals);} else {inst=new DenseInstance(1.0,vals);}if (m_DataBaseConnection.getUpperCase()) {m_idColumn=m_idColumn.toUpperCase();}if (m_structure.attribute(0).name().equals(m_idColumn)) {inst.deleteAttributeAt(0);m_oldStructure.add(inst);inst=m_oldStructure.instance(0);m_oldStructure.delete(0);} else {m_structure.add(inst);inst=m_structure.instance(0);m_structure.delete(0);}return inst;}  }
class C{  public boolean isSerializing(){  return serializing;}  }
class C{  private Object findOffsetInfo(LocalDateTime dt,ZoneOffsetTransition trans){  LocalDateTime localTransition=trans.getDateTimeBefore();  if (trans.isGap()) {    if (dt.isBefore(localTransition)) {      return trans.getOffsetBefore();    }    if (dt.isBefore(trans.getDateTimeAfter())) {      return trans;    } else {      return trans.getOffsetAfter();    }  } else {    if (dt.isBefore(localTransition) == false) {      return trans.getOffsetAfter();    }    if (dt.isBefore(trans.getDateTimeAfter())) {      return trans.getOffsetBefore();    } else {      return trans;    }  }}  }
class C{  public String convertMultiplicativeOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public FastBlurFilter(int radius){  if (radius < 1) {    radius=1;  }  this.radius=radius;}  }
class C{  public static SepsetMapDci ResolveSepsets(List<SepsetMapDci> sepsets,List<IndependenceTest> independenceTests,Method method,SepsetMapDci resolvedIndependent,SepsetMapDci resolvedDependent){  SepsetMapDci resolvedSepset=new SepsetMapDci();  Set<Node> allVars=new HashSet<>();  for (  IndependenceTest independenceTest : independenceTests) {    allVars.addAll(independenceTest.getVariables());  }  for (  NodePair pair : allNodePairs(new ArrayList<>(allVars))) {    List<List<List<Node>>> pairSepsets=new ArrayList<>();    List<IndependenceTest> testsWithPair=new ArrayList<>();    for (int k=0; k < independenceTests.size(); k++) {      IndependenceTest independenceTest=independenceTests.get(k);      if (independenceTest.getVariables().containsAll(Arrays.asList(pair.getFirst(),pair.getSecond()))) {        pairSepsets.add(sepsets.get(k).getSet(pair.getFirst(),pair.getSecond()));        testsWithPair.add(independenceTest);      }    }    if (testsWithPair.size() < 2) {      if (testsWithPair.size() == 1) {        if (pairSepsets.get(0) == null) {          continue;        }        for (        List<Node> sepset : pairSepsets.get(0)) {          resolvedSepset.set(pair.getFirst(),pair.getSecond(),sepset);        }      }      continue;    }    List<List<Node>> allConditioningSets=new ArrayList<>();    for (    List<List<Node>> conditioningSet : pairSepsets) {      if (conditioningSet == null) {        continue;      }      allConditioningSets.addAll(conditioningSet);    }    for (    List<Node> conditioningSet : allConditioningSets) {      List<IndependenceTest> testsWithSet=new ArrayList<>();      for (      IndependenceTest independenceTest : testsWithPair) {        if (independenceTest.getVariables().containsAll(conditioningSet) || conditioningSet.isEmpty()) {          testsWithSet.add(independenceTest);        }      }      if (testsWithSet.size() < 2) {        if (testsWithPair.size() == 1) {          resolvedSepset.set(pair.getFirst(),pair.getSecond(),conditioningSet);        }        continue;      }      boolean separated=false;      boolean inconsistent=false;      for (int k=0; k < testsWithSet.size(); k++) {        IndependenceTest testWithSet=testsWithSet.get(k);        if (k == 0) {          separated=testWithSet.isIndependent(pair.getFirst(),pair.getSecond(),conditioningSet);          continue;        }        if (separated != testWithSet.isIndependent(pair.getFirst(),pair.getSecond(),conditioningSet)) {          inconsistent=true;          break;        }      }      if (inconsistent) {        if (method == Method.fisher) {          if (isIndependentPooledFisher(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.fisher2) {          if (isIndependentPooledFisher2(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.tippett) {          if (isIndependentPooledTippett(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.worsleyfriston) {          if (isIndependentPooledWorsleyFriston(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.stouffer) {          if (isIndependentPooledStouffer(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.mudholkergeorge) {          if (isIndependentPooledMudholkerGeorge(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.mudholkergeorge2) {          if (isIndependentPooledMudholkerGeorge2(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.averagetest) {          if (isIndependentPooledAverageTest(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.average) {          if (isIndependentPooledAverage(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.random) {          if (isIndependentPooledRandom(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.fdr) {          if (isIndependentMajorityFdr(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else         if (method == Method.majority) {          if (isIndependentMajorityIndep(testsWithSet,pair.getFirst(),pair.getSecond(),conditioningSet)) {            resolvedSepset.set(pair.getFirst(),pair.getFirst(),conditioningSet);            resolvedIndependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          } else {            resolvedDependent.set(pair.getFirst(),pair.getSecond(),conditioningSet);          }        } else {          throw new RuntimeException("Invalid Test");        }      } else {        resolvedSepset.set(pair.getFirst(),pair.getSecond(),conditioningSet);      }    }  }  return resolvedSepset;}  }
class C{  public void removeConflictAddedListener(final ConflictCacheListener listener){  Check.notNull(listener,"listener");synchronized (listenerLock) {    conflictListeners.removeListener(listener,ADDED);  }}  }
class C{  public static boolean equals(byte[][] field1,byte[][] field2){  int index1=0;  int length1=field1 == null ? 0 : field1.length;  int index2=0;  int length2=field2 == null ? 0 : field2.length;  while (true) {    while (index1 < length1 && field1[index1] == null) {      index1++;    }    while (index2 < length2 && field2[index2] == null) {      index2++;    }    boolean atEndOf1=index1 >= length1;    boolean atEndOf2=index2 >= length2;    if (atEndOf1 && atEndOf2) {      return true;    } else     if (atEndOf1 != atEndOf2) {      return false;    } else     if (!Arrays.equals(field1[index1],field2[index2])) {      return false;    }    index1++;    index2++;  }}  }
class C{  public void onDraw(Paint paint){  shadowPaint.setShadowLayer(mShadowRadius,0.0f,mShadowOffset,shadowColor);}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public static int max(int... values){  int max=values[0];  for (int i=1; i < values.length; i++) {    if (values[i] > max) {      max=values[i];    }  }  return max;}  }
class C{  private Drawable tileify(Drawable drawable,boolean clip){  if (drawable instanceof LayerDrawable) {    LayerDrawable background=(LayerDrawable)drawable;    final int N=background.getNumberOfLayers();    Drawable[] outDrawables=new Drawable[N];    for (int i=0; i < N; i++) {      int id=background.getId(i);      outDrawables[i]=tileify(background.getDrawable(i),(id == android.R.id.progress || id == android.R.id.secondaryProgress));    }    LayerDrawable newBg=new LayerDrawable(outDrawables);    for (int i=0; i < N; i++) {      newBg.setId(i,background.getId(i));    }    return newBg;  } else   if (drawable instanceof BitmapDrawable) {    final Bitmap tileBitmap=((BitmapDrawable)drawable).getBitmap();    if (mSampleTile == null) {      mSampleTile=tileBitmap;    }    final ShapeDrawable shapeDrawable=new ShapeDrawable(getDrawableShape());    final BitmapShader bitmapShader=new BitmapShader(tileBitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);    shapeDrawable.getPaint().setShader(bitmapShader);    return (clip) ? new ClipDrawable(shapeDrawable,Gravity.LEFT,ClipDrawable.HORIZONTAL) : shapeDrawable;  }  return drawable;}  }
class C{  public void runButtonActionPerformed(java.awt.event.ActionEvent e){  if (!mRunButton.isSelected()) {    return;  }  boolean ok=false;  for (int i=0; i < MAXSEQUENCE; i++) {    if (mUseField[i].isSelected()) {      ok=true;    }  }  if (!ok) {    mRunButton.setSelected(false);    return;  }  mNextSequenceElement=0;  sendNextItem();}  }
class C{  public boolean removeSpringElements(VerletSpring3D s){  if (removeSpring(s)) {    return (removeParticle(s.a) && removeParticle(s.b));  }  return false;}  }
class C{  public QName(){}  }
class C{  protected boolean longitudesCrossDateline(Dimension dim,float[] longitudes){  Float x1=null;  for (int j=this.n0; j <= this.n1; j++) {    for (int i=this.m0; i <= this.m1; i++) {      int k=j * dim.width + i;      float x2=longitudes[k];      if (x1 != null) {        if (Math.signum(x1) != Math.signum(x2)) {          float delta=Math.abs(x1 - x2);          if (delta > 180f && delta < 360f)           return true;        }      }      x1=x2;    }  }  return false;}  }
class C{  public String outputProbsForSVMTipText(){  return "Fit a logistic regression to the output of SVM for " + "producing probability estimates";}  }
class C{  public void addPattern(String pattern) throws ParseException {  if (pattern == null)   return;  PatternEntry.Parser parser=new PatternEntry.Parser(pattern);  PatternEntry entry=parser.next();  while (entry != null) {    fixEntry(entry);    entry=parser.next();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET:    return rewiredTarget != null;}return super.eIsSet(featureID);}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(int initialCapacity){  return new ConcurrentHashMap<K,V>(initialCapacity);}  }
class C{  protected CleanupTask(final Protos.TaskInfo info){  super(info);}  }
class C{  public SourceRange cspCases(List<JCCase> trees){  if ((trees == null) || !(trees.nonEmpty()))   return null;  SourceRange list_sr=new SourceRange();  for (List<JCCase> l=trees; l.nonEmpty(); l=l.tail) {    list_sr.mergeWith(csp(l.head));  }  positions.put(trees,list_sr);  return list_sr;}  }
class C{  public void addChapter(Chapter chapter){  for (  Chapter chap : chapters)   if (chap.identifier.equals(chapter.identifier)) {    chap=chapter;    return;  }  if (chapters.length < 7) {    Chapter[] newchap=new Chapter[chapters.length + 1];    for (int i=0; i < chapters.length; i++)     newchap[i]=chapters[i];    newchap[chapters.length]=chapter;    chapters=newchap;  } else   FMLLog.log("AbyssalCraftAPI",Level.ERROR,"NecroData instance is already full, can't add a new Chapter!");}  }
class C{  public boolean isDayExcluded(int day){  if ((day < 1) || (day > MAX_DAYS_IN_MONTH)) {    throw new IllegalArgumentException("The day parameter must be in the range of 1 to " + MAX_DAYS_IN_MONTH);  }  return excludeDays[day - 1];}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setRecursive(true);}  }
class C{  private List<WordToken> addSentenceWordTokensWithPosTags(Sentence sentIn,JCas jCas) throws AnalysisEngineProcessException {  List<WordToken> wordTokens=new ArrayList<>();  try {    String sentValue=sentIn.getCoveredText();    if (isUpperCase(sentValue)) {      sentValue=sentValue.toLowerCase();    }    Span[] tokens=wordTokenizer.tokenizePos(sentValue);    String[] words=new String[tokens.length];    for (int a=0; a < tokens.length; a++) {      words[a]=tokens[a].getCoveredText(sentValue).toString();    }    String[] posTags=posTagger.tag(words);    for (int a=0; a < tokens.length; a++) {      Span wordSpan=tokens[a];      WordToken wordToken=new WordToken(jCas);      wordToken.setBegin(sentIn.getBegin() + wordSpan.getStart());      wordToken.setEnd(sentIn.getBegin() + wordSpan.getEnd());      wordToken.setSentenceOrder(a);      wordToken.setPartOfSpeech(posTags[a]);      addToJCasIndex(wordToken);      wordTokens.add(wordToken);    }  } catch (  Exception e) {    throw new AnalysisEngineProcessException(e);  }  return wordTokens;}  }
class C{  protected Point2D calculateLabelLocation(Rectangle2D labelBounds,double ascent,Rectangle2D plotArea,double startAngle){  Arc2D arc1=new Arc2D.Double(plotArea,startAngle,0,Arc2D.OPEN);  Point2D point1=arc1.getEndPoint();  double deltaX=-(point1.getX() - plotArea.getCenterX()) * this.axisLabelGap;  double deltaY=-(point1.getY() - plotArea.getCenterY()) * this.axisLabelGap;  double labelX=point1.getX() - deltaX;  double labelY=point1.getY() - deltaY;  if (labelX < plotArea.getCenterX()) {    labelX-=labelBounds.getWidth();  }  if (labelX == plotArea.getCenterX()) {    labelX-=labelBounds.getWidth() / 2;  }  if (labelY > plotArea.getCenterY()) {    labelY+=ascent;  }  return new Point2D.Double(labelX,labelY);}  }
class C{  public void clear(){  clearHelper(root);  root=factory.getQuadTreeNode();}  }
class C{  public ESRISpecialistPointRecord(byte b[],int off) throws IOException {  super(b,off);}  }
class C{  public String findServiceId(KeystoneApiClient keystoneApi,String serviceName){  _log.debug("START - findServiceId");  if (serviceName == null) {    _log.error("serviceName is null");    throw APIException.internalServerErrors.targetIsNullOrEmpty("Service name");  }  ServiceResponse services=keystoneApi.getKeystoneServices();  for (  ServiceV2 service : services.getServices()) {    if (service.getName().equals(serviceName)) {      _log.debug("END - findServiceId");      return service.getId();    }  }  _log.warn("Missing service {}",serviceName);  return null;}  }
class C{  public void resetProgressBar(int maximum){  this.removeActor(progressBar);  progressBar=new ProgressBar(0,maximum,1,false,Assets.I.skin,"level");  progressBar.setWidth(717);  progressBar.setX(100);  progressBar.setY(Constants.VIRTUAL_HEIGHT - 32);  progressBar.setDisabled(true);  this.addActor(progressBar);  progressBar.toBack();}  }
class C{  private List<IItem> createInsertList(List<IItem> itemDragList){  List<IItem> tempList=new ArrayList<IItem>();  List<IItem> insertList=new ArrayList<IItem>();  int depth=0;  int removed=0;  for (  IItem item : itemDragList) {    createInsertList(item,tempList,insertList,depth,removed);  }  this.numberOfControls=tempList.size() - removed;  return insertList;}  }
class C{  public ParallelTaskBuilder preparePing(){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.setProtocol(RequestProtocol.PING);  return cb;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  return Boolean.valueOf(EPG.getInstance().isOverriden(EPG.getInstance().getProviderIDForEPGDSName(s),getChannel(stack).getStationID()));}  }
class C{  public void onPause(boolean multitasking){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onPause(multitasking);    }  }}  }
class C{  @Deprecated public void recordData(long start,long end,long rxBytes,long txBytes){  recordData(start,end,new NetworkStats.Entry(IFACE_ALL,UID_ALL,SET_DEFAULT,TAG_NONE,rxBytes,0L,txBytes,0L,0L));}  }
class C{  public void test_10() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,true,true,false);  insertSparql(cxn);  IValueCentricTextIndexer<?> searchEngine=cxn.getTripleStore().getLexiconRelation().getSearchEngine();  assertEquals(0,searchEngine.count(query("1")));  assertEquals(0,searchEngine.count(query("2")));  assertEquals(0,searchEngine.count(query("3")));  assertEquals(0,searchEngine.count(query("4")));  assertEquals(0,searchEngine.count(query("true")));  assertEquals(0,searchEngine.count(query("false")));  assertEquals(1,searchEngine.count(query("plain")));  assertEquals(0,searchEngine.count(query("datatyped")));  assertEquals(1,searchEngine.count(query("english")));  endTest(cxn);}  }
class C{  private void extendPathForZoneChangeIfRequested(RPAction action,List<Node> path){  if ((path == null) || path.isEmpty()) {    return;  }  if (!action.has("extend")) {    return;  }  Direction dir=Direction.build(action.getInt("extend"));  Node lastNode=path.get(path.size() - 1);  path.add(new Node(lastNode.getX() + dir.getdx(),lastNode.getY() + dir.getdy()));}  }
class C{  public void parse(String line,String timeKey) throws Exception {  if (line.startsWith(FLAG)) {    String[] items=line.split(",");    if (items[1].startsWith("Network")) {      for (int i=0; i < items.length; ++i) {        if (items[i].startsWith("eth")) {          NetworkInterfaceCard nic=new NetworkInterfaceCard();          nic.setName(items[i]);          nic.setIdx(i);          ncList.add(nic);        }      }    } else {      for (      NetworkInterfaceCard nic : ncList) {        nic.setValue(NumberUtils.toFloat(items[nic.getIdx()]));      }      caculate();    }  }}  }
class C{  public void commit() throws HeuristicRollbackException, RollbackException, HeuristicMixedException, SystemException {  if (!isActive) {    throw new SystemException(LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGER_INVALID.toLocalizedString());  }  int cozOfException=-1;  Transaction transactionImpl=getTransaction();  if (transactionImpl == null) {    String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_COMMIT_TRANSACTION_IS_NULL_CANNOT_COMMIT_A_NULL_TRANSACTION.toLocalizedString();    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (VERBOSE)     writer.fine(exception);    throw new IllegalStateException(exception);  }  GlobalTransaction gtx=getGlobalTransaction(transactionImpl);  if (gtx == null) {    String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_COMMIT_GLOBAL_TRANSACTION_IS_NULL_CANNOT_COMMIT_A_NULL_GLOBAL_TRANSACTION.toLocalizedString();    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (VERBOSE)     writer.fine(exception);    throw new SystemException(exception);  }  boolean isCommit=false;  int status=-1;  if (((status=gtx.getStatus()) == Status.STATUS_ACTIVE) || status == Status.STATUS_MARKED_ROLLBACK) {synchronized (gtx) {      if ((status=gtx.getStatus()) == Status.STATUS_ACTIVE) {        gtx.setStatus(Status.STATUS_COMMITTING);        isCommit=true;      } else       if (status == Status.STATUS_MARKED_ROLLBACK) {        gtx.setStatus(Status.STATUS_ROLLING_BACK);        cozOfException=MARKED_ROLLBACK;      } else {        String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_COMMIT_TRANSACTION_NOT_ACTIVE_CANNOT_BE_COMMITTED_TRANSACTION_STATUS_0.toLocalizedString(Integer.valueOf(status));        LogWriterI18n writer=TransactionUtils.getLogWriterI18n();        if (VERBOSE)         writer.fine(exception);        throw new IllegalStateException(exception);      }    }  } else {    String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_COMMIT_TRANSACTION_IS_NOT_ACTIVE_AND_CANNOT_BE_COMMITTED.toLocalizedString();    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (VERBOSE)     writer.fine(exception);    throw new IllegalStateException(exception);  }  boolean isClean=false;  Exception e=null;  try {    ((TransactionImpl)transactionImpl).notifyBeforeCompletion();    isClean=true;  } catch (  Exception ge) {    setRollbackOnly();    cozOfException=EXCEPTION_IN_NOTIFY_BEFORE_COMPLETION;    e=ge;  }  if (isCommit) {synchronized (gtx) {      if ((status=gtx.getStatus()) == Status.STATUS_COMMITTING) {        try {          gtx.commit();        } catch (        RollbackException rbe) {          e=rbe;          cozOfException=COMMIT_FAILED_SO_ROLLEDBAK;        }catch (        SystemException se) {          e=se;          cozOfException=COMMIT_FAILED_ROLLBAK_ALSO_FAILED;        }      } else       if (status == Status.STATUS_ROLLING_BACK) {        try {          gtx.rollback();          if (isClean)           cozOfException=MARKED_ROLLBACK;        } catch (        SystemException se) {          e=se;          cozOfException=ROLLBAK_FAILED;        }      }    }  } else {    try {      gtx.rollback();    } catch (    SystemException se) {      e=se;      cozOfException=ROLLBAK_FAILED;    }  }  try {    ((TransactionImpl)transactionImpl).notifyAfterCompletion(status=gtx.getStatus());  } catch (  Exception ge) {    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.infoEnabled())     writer.info(LocalizedStrings.TransactionManagerImpl_EXCEPTION_IN_NOTIFY_AFTER_COMPLETION_DUE_TO__0,ge.getMessage(),ge);  }  Thread thread=Thread.currentThread();  transactionMap.remove(thread);  this.gtxSet.remove(gtx);  if (status != Status.STATUS_COMMITTED) {switch (cozOfException) {case EXCEPTION_IN_NOTIFY_BEFORE_COMPLETION:{        String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_COMMIT_TRANSACTION_ROLLED_BACK_BECAUSE_OF_EXCEPTION_IN_NOTIFYBEFORECOMPLETION_FUNCTION_CALL_ACTUAL_EXCEPTION_0.toLocalizedString();        LogWriterI18n writer=TransactionUtils.getLogWriterI18n();        if (VERBOSE)         writer.fine(exception,e);        RollbackException re=new RollbackException(exception);        re.initCause(e);        throw re;      }case MARKED_ROLLBACK:{      String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_COMMIT_TRANSACTION_ROLLED_BACK_BECAUSE_A_USER_MARKED_IT_FOR_ROLLBACK.toLocalizedString();      LogWriterI18n writer=TransactionUtils.getLogWriterI18n();      if (VERBOSE)       writer.fine(exception,e);      throw new RollbackException(exception);    }case COMMIT_FAILED_SO_ROLLEDBAK:{    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (VERBOSE)     writer.fine(e);    throw (RollbackException)e;  }case COMMIT_FAILED_ROLLBAK_ALSO_FAILED:case ROLLBAK_FAILED:{  LogWriterI18n writer=TransactionUtils.getLogWriterI18n();  if (VERBOSE)   writer.fine(e);  throw (SystemException)e;}}}gtx.setStatus(Status.STATUS_NO_TRANSACTION);}  }
class C{  public boolean with_cse(){  return soot.PhaseOptions.getBoolean(options,"with-cse");}  }
class C{  public boolean readMessage(InputStream is,OutboxAmp outbox) throws IOException {  InH3 hIn=_hIn;  if (is.available() < 0) {    return false;  }  try {    return readMessage(hIn,outbox);  }  finally {  }}  }
class C{  public static void unsubscribe(Subscription subscription){  if (subscription != null && subscription.isUnsubscribed()) {    subscription.unsubscribe();  }}  }
class C{  public static boolean isUserInRole(String role){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(role));    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.298 -0400",hash_original_method="A338A2C46A5DAA31B5F3D3B73AA16B49",hash_generated_method="59C3EBD8D9BDD3F1810EFCD43DA984FB") public NoRouteToHostException(String detailMessage){  super(detailMessage);}  }
class C{  public static final void normalize(Vector3d v){  if ((v.x == 0.0) && (v.y == 0.0) && (v.z == 0.0))   return;  normalize(v,v.length());}  }
class C{  public static String rtp(String query,String tablePrefix,String schedNameLiteral){  return MessageFormat.format(query,new Object[]{tablePrefix,schedNameLiteral});}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  public void red(short r){  self.red=r;}  }
class C{  public StateMachineException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void show(char initialChar){  initialString=initialString.append(initialChar);  show();  if (SWT.getPlatform() != "carbon") {    setEditText(initialString.toString());  }}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  private Filter buildListQualifierFilter(QualifierFilterEntity entry){  List<String> valueSet=EntityQualifierUtils.parseList(entry.getValue());  Iterator<String> it=valueSet.iterator();  String fieldName=entry.getKey();  String qualifierName=fieldName;  if (!_ed.isTag(entry.getKey())) {    qualifierName=_ed.getDisplayNameMap().get(entry.getKey()).getQualifierName();  }  FilterList setFilterList;  if (ComparisonOperator.IN.equals(entry.getOp())) {    setFilterList=new FilterList(Operator.MUST_PASS_ONE);  } else   if (ComparisonOperator.NOT_IN.equals(entry.getOp())) {    setFilterList=new FilterList(Operator.MUST_PASS_ALL);  } else {    throw new IllegalArgumentException(String.format("Don't support operation: %s on LIST type of value yet: %s, valid options: IN/NOT IN [LIST]",entry.getOp(),entry.toString()));  }  while (it.hasNext()) {    String value=it.next();    BinaryComparator comparator=new BinaryComparator(EntityQualifierUtils.toBytes(_ed,fieldName,value));    SingleColumnValueFilter filter=new SingleColumnValueFilter(_ed.getColumnFamily().getBytes(),qualifierName.getBytes(),convertToHBaseCompareOp(entry.getOp()),comparator);    filter.setFilterIfMissing(_filterIfMissing);    setFilterList.addFilter(filter);  }  return setFilterList;}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return false;}  }
class C{  public static boolean isNullOrEmpty(@Nullable Collection collection){  return collection == null || collection.isEmpty();}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearSignature(){  signature=null;  fieldSetFlags()[12]=false;  return this;}  }
class C{  public static Color createColor(int red,int green,int blue,int alpha,boolean forceAlpha){  int value=((alpha & 0xff) << 24) | ((red & 0xff) << 16) | ((green & 0xff) << 8)| blue & 0xff;  return createColor(value,forceAlpha);}  }
class C{  public static int[] matrixToArray(int[][] input){  return matrixToArray(input,0,input.length,0,input[0].length);}  }
class C{  public static String computeResponseValue(IoSession session,HashMap<String,String> map,String method,String pwd,String charsetName,String body) throws AuthenticationException, UnsupportedEncodingException {  byte[] hA1;  StringBuilder sb;  boolean isMD5Sess="md5-sess".equalsIgnoreCase(StringUtilities.getDirectiveValue(map,"algorithm",false));  if (!isMD5Sess || (session.getAttribute(SESSION_HA1) == null)) {    sb=new StringBuilder();    sb.append(StringUtilities.stringTo8859_1(StringUtilities.getDirectiveValue(map,"username",true))).append(':');    String realm=StringUtilities.stringTo8859_1(StringUtilities.getDirectiveValue(map,"realm",false));    if (realm != null) {      sb.append(realm);    }    sb.append(':').append(pwd);    if (isMD5Sess) {      byte[] prehA1;synchronized (md5) {        md5.reset();        prehA1=md5.digest(sb.toString().getBytes(charsetName));      }      sb=new StringBuilder();      sb.append(ByteUtilities.asHex(prehA1));      sb.append(':').append(StringUtilities.stringTo8859_1(StringUtilities.getDirectiveValue(map,"nonce",true)));      sb.append(':').append(StringUtilities.stringTo8859_1(StringUtilities.getDirectiveValue(map,"cnonce",true)));synchronized (md5) {        md5.reset();        hA1=md5.digest(sb.toString().getBytes(charsetName));      }      session.setAttribute(SESSION_HA1,hA1);    } else {synchronized (md5) {        md5.reset();        hA1=md5.digest(sb.toString().getBytes(charsetName));      }    }  } else {    hA1=(byte[])session.getAttribute(SESSION_HA1);  }  sb=new StringBuilder(method);  sb.append(':');  sb.append(StringUtilities.getDirectiveValue(map,"uri",false));  String qop=StringUtilities.getDirectiveValue(map,"qop",false);  if ("auth-int".equalsIgnoreCase(qop)) {    ProxyIoSession proxyIoSession=(ProxyIoSession)session.getAttribute(ProxyIoSession.PROXY_SESSION);    byte[] hEntity;synchronized (md5) {      md5.reset();      hEntity=md5.digest(body.getBytes(proxyIoSession.getCharsetName()));    }    sb.append(':').append(hEntity);  }  byte[] hA2;synchronized (md5) {    md5.reset();    hA2=md5.digest(sb.toString().getBytes(charsetName));  }  sb=new StringBuilder();  sb.append(ByteUtilities.asHex(hA1));  sb.append(':').append(StringUtilities.getDirectiveValue(map,"nonce",true));  sb.append(":00000001:");  sb.append(StringUtilities.getDirectiveValue(map,"cnonce",true));  sb.append(':').append(qop).append(':');  sb.append(ByteUtilities.asHex(hA2));  byte[] hFinal;synchronized (md5) {    md5.reset();    hFinal=md5.digest(sb.toString().getBytes(charsetName));  }  return ByteUtilities.asHex(hFinal);}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.removePropertyChangeListener(propertyName,in_pcl);}  }
class C{  void addUsedRec(ZoneRec rec){  if (usedZoneRecs == null) {    usedZoneRecs=new ArrayList<ZoneRec>();  }  usedZoneRecs.add(rec);}  }
class C{  static double computeDesiredEllipsoidMagnitude(final PlanetModel planetModel,final double x,final double y,final double z){  return 1.0 / Math.sqrt(x * x * planetModel.inverseAbSquared + y * y * planetModel.inverseAbSquared + z * z * planetModel.inverseCSquared);}  }
class C{  public void registerPresenter(RosiePresenter presenter){  if (presenter == null) {    throw new IllegalArgumentException("The presenter instance to be registered can't be null");  }  presenters.add(presenter);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public ISchedulingRule validateEditRule(IResource[] resources){  if (resources.length == 0)   return null;  if (resources.length == 1)   return isReadOnly(resources[0]) ? parent(resources[0]) : null;  HashSet<ISchedulingRule> rules=new HashSet<ISchedulingRule>();  for (int i=0; i < resources.length; i++)   if (isReadOnly(resources[i]))   rules.add(parent(resources[i]));  if (rules.isEmpty())   return null;  if (rules.size() == 1)   return rules.iterator().next();  ISchedulingRule[] ruleArray=rules.toArray(new ISchedulingRule[rules.size()]);  return new MultiRule(ruleArray);}  }
class C{  public Postcondition_ createPostcondition_(){  Postcondition_Impl postcondition_=new Postcondition_Impl();  return postcondition_;}  }
class C{  public byte[] encode(){  byte binValue[]=new byte[getDataLength() + HEADER_LENGTH];  int offset=0;  binValue[offset++]=(byte)(getAttributeType() >> 8);  binValue[offset++]=(byte)(getAttributeType() & 0x00FF);  binValue[offset++]=(byte)(getDataLength() >> 8);  binValue[offset++]=(byte)(getDataLength() & 0x00FF);  Iterator<Character> attributes=getAttributes();  while (attributes.hasNext()) {    char att=attributes.next();    binValue[offset++]=(byte)(att >> 8);    binValue[offset++]=(byte)(att & 0x00FF);  }  if (offset < binValue.length) {    char att=getAttribute(0);    binValue[offset++]=(byte)(att >> 8);    binValue[offset++]=(byte)(att & 0x00FF);  }  return binValue;}  }
class C{  public void put(String key,Object value){  params.add(new AbstractMap.SimpleEntry<>(key,value));}  }
class C{  public static void main(String[] args){  TestThrowsTagInheritence tester=new TestThrowsTagInheritence();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals("Trace(Start)")) {    try {      mqisdpMgr.startTrace();      trace.setText("Trace(Stop)");    } catch (    Exception ex) {    }  } else   if (e.getActionCommand().equals("Trace(Stop)")) {    mqisdpMgr.stopTrace();    trace.setText("Trace(Start)");  } else {    cleanSession.setSelected(true);    clientId.setText(CLIENT_ID);    keepAlive.setText(KEEP_ALIVE);    lwtTopic.setText("");    lwtData.setText("");    lwtRetain.setSelected(false);    lwtQoS.setSelectedIndex(0);    persistEnable.setSelected(false);    persistDir.setText(DEF_PERSIST_DIR);  }}  }
class C{  public static String stripVcfHeader(String vcfString){  return vcfString.replaceAll("##.*\n","");}  }
class C{  @Override public void panDomainAxes(double percent,PlotRenderingInfo info,Point2D source){  if (!isDomainPannable()) {    return;  }  int domainAxisCount=getDomainAxisCount();  for (int i=0; i < domainAxisCount; i++) {    ValueAxis axis=getDomainAxis(i);    if (axis == null) {      continue;    }    if (axis.isInverted()) {      percent=-percent;    }    axis.pan(percent);  }}  }
class C{  public String globalInfo(){  return "A Hoeffding tree (VFDT) is an incremental, anytime decision tree induction algorithm" + " that is capable of learning from massive data streams, assuming that the" + " distribution generating examples does not change over time. Hoeffding trees"+ " exploit the fact that a small sample can often be enough to choose an optimal"+ " splitting attribute. This idea is supported mathematically by the Hoeffding"+ " bound, which quantifies the number of observations (in our case, examples)"+ " needed to estimate some statistics within a prescribed precision (in our"+ " case, the goodness of an attribute).\n\nA theoretically appealing feature "+ " of Hoeffding Trees not shared by otherincremental decision tree learners is that "+ " it has sound guarantees of performance. Using the Hoeffding bound one can show that "+ " its output is asymptotically nearly identical to that of a non-incremental learner "+ " using infinitely many examples. For more information see: \n\n"+ getTechnicalInformation().toString();}  }
class C{  private FieldPosition[] expandAffix(String pattern){  ArrayList<FieldPosition> positions=null;  int stringIndex=0;  for (int i=0; i < pattern.length(); ) {    char c=pattern.charAt(i++);    if (c == QUOTE) {      int field=-1;      Format.Field fieldID=null;      c=pattern.charAt(i++);switch (c) {case CURRENCY_SIGN:        String string;      if (i < pattern.length() && pattern.charAt(i) == CURRENCY_SIGN) {        ++i;        string=symbols.getInternationalCurrencySymbol();      } else {        string=symbols.getCurrencySymbol();      }    if (string.length() > 0) {      if (positions == null) {        positions=new ArrayList<>(2);      }      FieldPosition fp=new FieldPosition(Field.CURRENCY);      fp.setBeginIndex(stringIndex);      fp.setEndIndex(stringIndex + string.length());      positions.add(fp);      stringIndex+=string.length();    }  continue;case PATTERN_PERCENT:c=symbols.getPercent();field=-1;fieldID=Field.PERCENT;break;case PATTERN_PER_MILLE:c=symbols.getPerMill();field=-1;fieldID=Field.PERMILLE;break;case PATTERN_MINUS:c=symbols.getMinusSign();field=-1;fieldID=Field.SIGN;break;}if (fieldID != null) {if (positions == null) {positions=new ArrayList<>(2);}FieldPosition fp=new FieldPosition(fieldID,field);fp.setBeginIndex(stringIndex);fp.setEndIndex(stringIndex + 1);positions.add(fp);}}stringIndex++;}if (positions != null) {return positions.toArray(EmptyFieldPositionArray);}return EmptyFieldPositionArray;}  }
class C{  public Attribute customSet(String set){  xmlAttribute.set=set;  return this;}  }
class C{  public boolean readNonBlock() throws IOException {  if (_readOffset < _readLength) {    return true;  }  if (_readBuffer == null) {    _readOffset=0;    _readLength=0;    return false;  }  int readLength=_source.readNonBlock(_readBuffer,0,_readBuffer.length);  _readOffset=0;  if (readLength > 0) {    _readLength=readLength;    _position+=readLength;    if (_isEnableReadTime)     _readTime=CurrentTime.currentTime();    return true;  } else {    _readLength=0;    return false;  }}  }
class C{  public boolean defineMethodEquals(SymbolResolver resolver){  return isDefiningMethod("equals",ImmutableList.of(ReferenceTypeUsage.OBJECT(resolver)),resolver);}  }
class C{  @Override public final boolean readBoolean() throws IOException {  return dis.readBoolean();}  }
class C{  static void eliminateDeadInstructions(IR ir){  eliminateDeadInstructions(ir,false);}  }
class C{  public static void closeOutputStream(OutputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e);    }  }}  }
class C{  public static UtcOffset parse(String text){  Pattern timeZoneRegex=Pattern.compile("^([-\\+])?(\\d{1,2})(:?(\\d{2}))?(:?(\\d{2}))?$");  Matcher m=timeZoneRegex.matcher(text);  if (!m.find()) {    throw Messages.INSTANCE.getIllegalArgumentException(21,text);  }  String signStr=m.group(1);  boolean positive=!"-".equals(signStr);  String hourStr=m.group(2);  int hourOffset=Integer.parseInt(hourStr);  String minuteStr=m.group(4);  int minuteOffset=(minuteStr == null) ? 0 : Integer.parseInt(minuteStr);  return new UtcOffset(positive,hourOffset,minuteOffset);}  }
class C{  public long kstkesp(){  return Long.parseLong(fields[28]);}  }
class C{  protected float floatSpeed(int lSpeed){  if (lSpeed == 0) {    return 0.f;  } else   if (lSpeed == 1) {    return -1.f;  } else   if (super.speedStepMode == SpeedStepMode128) {    return ((lSpeed - 1) / 126.f);  } else {    return (int)(lSpeed * 27.f + 0.5) + 1;  }}  }
class C{  public boolean isValid(){  return true;}  }
class C{  private Widget packWidget(int dpi,LauncherAppWidgetProviderInfo info){  Widget widget=new Widget();  widget.provider=info.provider.flattenToShortString();  widget.label=info.label;  widget.configure=info.configure != null;  if (info.icon != 0) {    widget.icon=new Resource();    Drawable fullResIcon=mIconCache.getFullResIcon(info.provider.getPackageName(),info.icon);    Bitmap icon=Utilities.createIconBitmap(fullResIcon,mContext);    widget.icon.data=Utilities.flattenBitmap(icon);    widget.icon.dpi=dpi;  }  return widget;}  }
class C{  public UpdateSelectedDateEvent(int direction){  this.direction=direction;}  }
class C{  public QuestNotCompletedCondition(final String questname){  this.questname=checkNotNull(questname);}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  GridAffinityAssignment(AffinityTopologyVersion topVer){  this.topVer=topVer;  primary=new HashMap<>();  backup=new HashMap<>();  clientEvtChange=false;}  }
class C{  private static byte[] withCorrectBlockSize(final byte[] key){  if (key.length != CcAes.BLOCK) {    throw new IllegalArgumentException(String.format("the length of the AES key must be exactly %d bytes",CcAes.BLOCK));  }  return key;}  }
class C{  public Color color(){  return color(r,g,b);}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public DViewCertificateFingerprint(JDialog parent,byte[] encodedCertificate,DigestType fingerprintAlg){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.encodedCertificate=encodedCertificate;  this.fingerprintAlg=fingerprintAlg;  initComponents();}  }
class C{  public Boolean isMemoryReservationLockedToMax(){  return memoryReservationLockedToMax;}  }
class C{  private static void loadAllRegions(Properties ctx){  s_regions=new CCache<String,MRegion>("C_Region",100);  String sql="SELECT * FROM C_Region WHERE IsActive='Y'";  try {    Statement stmt=DB.createStatement();    ResultSet rs=stmt.executeQuery(sql);    while (rs.next()) {      MRegion r=new MRegion(ctx,rs,null);      s_regions.put(String.valueOf(r.getC_Region_ID()),r);      if (r.isDefault())       s_default=r;    }    rs.close();    stmt.close();  } catch (  SQLException e) {    s_log.log(Level.SEVERE,sql,e);  }  s_log.fine(s_regions.size() + " - default=" + s_default);}  }
class C{  private Map<String,String> sort(Properties properties){  List<String> propertyKeys=new ArrayList<String>();  for (  Object propKey : properties.keySet()) {    String key=(String)propKey;    propertyKeys.add(key);  }  Collections.sort(propertyKeys);  Map<String,String> result=new LinkedHashMap<String,String>();  for (  String key : propertyKeys) {    result.put(key,properties.getProperty(key));  }  return result;}  }
class C{  final void incrementValidNext(){  validIndex++;}  }
class C{  public static double pdf(double x,double mu,double sigma,double lambda){  final double dx=x - mu;  final double lss=lambda * sigma * sigma;  final double erfc=NormalDistribution.erfc((lss - dx) / (sigma * MathUtil.SQRT2));  return erfc > 0. ? .5 * lambda * Math.exp(lambda * (lss * .5 - dx))* erfc : 0.;}  }
class C{  @Override void resetList(){  clearRecycledState(mHeaderViewInfos);  clearRecycledState(mFooterViewInfos);  super.resetList();  mLayoutMode=LAYOUT_NORMAL;}  }
class C{  public TextChange remove(ICompilationUnit unit){  return fMap.remove(unit);}  }
class C{  public SearchRequest source(Map source){  try {    XContentBuilder builder=XContentFactory.contentBuilder(Requests.CONTENT_TYPE);    builder.map(source);    return source(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthSeparatorUI();}  }
class C{  private static void addDataEventListenerToPeer(Executor executor,Peer peer,PeerDataEventListener downloadListener){  peer.addBlocksDownloadedEventListener(executor,downloadListener);  peer.addChainDownloadStartedEventListener(executor,downloadListener);  peer.addGetDataEventListener(executor,downloadListener);  peer.addPreMessageReceivedEventListener(executor,downloadListener);}  }
class C{  public void clear(){  values.clear();}  }
class C{  public static Vec4 computeBufferNormal(FloatBuffer coords,int stride){  Vec4[] verts=WWMath.findThreeIndependentVertices(coords,stride);  return verts != null ? WWMath.computeTriangleNormal(verts[0],verts[1],verts[2]) : null;}  }
class C{  public Register createRegister(byte b1,byte b2){  return new SimpleRegister(b1,b2);}  }
class C{  public static DocumentEvent mergeProcessedDocumentEvents(List<DocumentEvent> documentEvents) throws BadLocationException {  if (documentEvents.size() == 0)   return null;  final ListIterator<DocumentEvent> iterator=documentEvents.listIterator(documentEvents.size());  final DocumentEvent firstEvent=iterator.previous();  final Document document=firstEvent.getDocument();  int offset=firstEvent.getOffset();  int length=firstEvent.getLength();  int textLength=firstEvent.getText() == null ? 0 : firstEvent.getText().length();  while (iterator.hasPrevious()) {    final int delta=length - textLength;    final DocumentEvent event=(DocumentEvent)iterator.previous();    final int eventOffset=event.getOffset();    final int eventLength=event.getLength();    final int eventTextLength=event.getText() == null ? 0 : event.getText().length();    if (eventOffset > offset + textLength + delta) {      length=(eventOffset - delta) - (offset + textLength) + length + eventLength;      textLength=(eventOffset - delta) + eventTextLength - offset;    } else     if (eventOffset + eventTextLength < offset) {      length=offset - (eventOffset + eventTextLength) + length + eventLength;      textLength=offset + textLength - eventOffset;      offset=eventOffset;    } else {      final int start=Math.max(0,eventOffset - offset);      final int end=Math.min(length,eventTextLength + eventOffset - offset);      length+=eventLength - (end - start);      offset=Math.min(offset,eventOffset);      final int totalDelta=delta + eventLength - eventTextLength;      textLength=length - totalDelta;    }  }  final String text=document.get(offset,textLength);  return new DocumentEvent(document,offset,length,text);}  }
class C{  public FormatsException(String msg){  super(msg);}  }
class C{  public BackpropTrainer(BackpropNetwork network){  super(network);  this.layers=network.getNeuronGroupsAsList();  errorMap=new HashMap<Neuron,Double>();  weightDeltaMap=new HashMap<Synapse,Double>();  biasDeltaMap=new HashMap<Neuron,Double>();  this.setIteration(0);  mse=0;}  }
class C{  public static <T>T[] requireNonNullElements(T[] array){  requireNonNull(array,"The provided array is null.");  int len=array.length;  for (int i=0; i < len; i++) {    if (array[i] == null) {      throw new NullPointerException("Item " + i + " in the array "+ Arrays.toString(array)+ " is null");    }  }  return array;}  }
class C{  public void read(InputStream in) throws SocksException, IOException {  read(in,true);}  }
class C{  public void testGetFileByInputStream(ArchiveSource src) throws IOException {  src.clear();  addAllTestData(src);  testGetFileByInputStream(src,m_file1,m_data1);  testGetFileByInputStream(src,m_file2,m_data2);  testGetFileByInputStream(src,m_file3,m_data3);}  }
class C{  public boolean isSubscribed(String sockJSSessionID,String channel){  String httpSessionId=SessionMapper.getHTTPSessionID(sockJSSessionID);  if (subscriptions.get(channel) == null) {    subscriptions.put(channel,new HashSet<String>());  }  return subscriptions.get(channel).contains(httpSessionId);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.Departments);  DepartmentListForm departmentListForm=(DepartmentListForm)form;  departmentListForm.setDepartments(Department.findAll(sessionContext.getUser().getCurrentAcademicSessionId()));  if ("Apply".equals(departmentListForm.getOp())) {    sessionContext.getUser().setProperty("Departments.showUnusedDepts",departmentListForm.getShowUnusedDepts() ? "1" : "0");  } else {    departmentListForm.setShowUnusedDepts("1".equals(sessionContext.getUser().getProperty("Departments.showUnusedDepts","0")));  }  boolean dispLastChanges=CommonValues.Yes.eq(UserProperty.DisplayLastChanges.get(sessionContext.getUser()));  if ("Export PDF".equals(request.getParameter("op"))) {    PdfWebTable webTable=new PdfWebTable((dispLastChanges ? 13 : 12),"Department List - " + sessionContext.getUser().getCurrentAuthority().getQualifiers("Session").get(0).getQualifierLabel(),"departmentList.do?ord=%%",(dispLastChanges ? new String[]{"Number","Abbv","Name","External\nManager","Subjects","Rooms","Status","Dist Pref\nPriority","Allow\nRequired","Instructor\nPref","Events","Student\nScheduling","Last\nChange"} : new String[]{"Number","Abbreviation","Name","External\nManager","Subjects","Rooms","Status","Dist Pref\nPriority","Allow\nRequired","Instructor\nPref","Events","Student\nScheduling"}),new String[]{"left","left","left","left","right","right","left","right","left","left","left","left","left"},new boolean[]{true,true,true,true,true,true,true,true,true,true,true,(dispLastChanges ? true : false),false});    for (Iterator i=departmentListForm.getDepartments().iterator(); i.hasNext(); ) {      Department d=(Department)i.next();      if (departmentListForm.getShowUnusedDepts() || !d.getSubjectAreas().isEmpty() || !d.getTimetableManagers().isEmpty()|| d.isExternalManager().booleanValue()) {        DecimalFormat df5=new DecimalFormat("####0");        String lastChangeStr=null;        Long lastChangeCmp=null;        if (dispLastChanges) {          List changes=ChangeLog.findLastNChanges(d.getSession().getUniqueId(),null,null,d.getUniqueId(),1);          ChangeLog lastChange=(changes == null || changes.isEmpty() ? null : (ChangeLog)changes.get(0));          lastChangeStr=(lastChange == null ? "" : ChangeLog.sDFdate.format(lastChange.getTimeStamp()) + " by " + lastChange.getManager().getShortName());          lastChangeCmp=new Long(lastChange == null ? 0 : lastChange.getTimeStamp().getTime());        }        String allowReq="";        int allowReqOrd=0;        if (d.isAllowReqRoom() != null && d.isAllowReqRoom().booleanValue()) {          if (!allowReq.isEmpty())           allowReq+=", ";          allowReq+="room";          allowReqOrd+=1;        }        if (d.isAllowReqTime() != null && d.isAllowReqTime().booleanValue()) {          if (!allowReq.isEmpty())           allowReq+=", ";          allowReq+="time";          allowReqOrd+=2;        }        if (d.isAllowReqDistribution() != null && d.isAllowReqDistribution().booleanValue()) {          if (!allowReq.isEmpty())           allowReq+=", ";          allowReq+="distribution";          allowReqOrd+=4;        }        if (allowReqOrd == 7)         allowReq="all";        webTable.addLine(null,new String[]{d.getDeptCode(),d.getAbbreviation(),d.getName(),(d.isExternalManager().booleanValue() ? d.getExternalMgrAbbv() : ""),df5.format(d.getSubjectAreas().size()),df5.format(d.getRoomDepts().size()),(d.getStatusType() == null ? "@@ITALIC " : "") + d.effectiveStatusType().getLabel() + (d.getStatusType() == null ? "@@END_ITALIC " : ""),(d.getDistributionPrefPriority() == null && d.getDistributionPrefPriority().intValue() != 0 ? "" : d.getDistributionPrefPriority().toString()),allowReq,d.isInheritInstructorPreferences() ? "Yes" : "No",d.isAllowEvents() ? "Yes" : "No",d.isAllowStudentScheduling() ? "Yes" : "No",lastChangeStr},new Comparable[]{d.getDeptCode(),d.getAbbreviation(),d.getName(),(d.isExternalManager().booleanValue() ? d.getExternalMgrAbbv() : ""),new Integer(d.getSubjectAreas().size()),new Integer(d.getRoomDepts().size()),d.effectiveStatusType().getOrd(),d.getDistributionPrefPriority(),new Integer(allowReqOrd),d.isInheritInstructorPreferences(),d.isAllowEvents(),d.isAllowStudentScheduling(),lastChangeCmp});      }    }    ExportUtils.exportPDF(webTable,WebTable.getOrder(sessionContext,"DepartmentList.ord"),response,"departments");    return null;  }  WebTable webTable=new WebTable((dispLastChanges ? 13 : 12),"","departmentList.do?ord=%%",(dispLastChanges ? new String[]{"Code","Abbv","Name","External<br>Manager","Subjects","Rooms","Status","Dist&nbsp;Pref<br>Priority","Allow<br>Required","Instructor<br>Preferences","Events","Student<br>Scheduling","Last<br>Change"} : new String[]{"Code","Abbreviation","Name","External Manager","Subjects","Rooms","Status","Dist&nbsp;Pref<br>Priority","Allow<br>Required","Instructor<br>Preferences","Events","Student<br>Scheduling"}),new String[]{"left","left","left","left","right","right","left","right","left","left","left","left","left"},new boolean[]{true,true,true,true,true,true,true,true,true,true,true,(dispLastChanges ? true : false),false});  WebTable.setOrder(sessionContext,"DepartmentList.ord",request.getParameter("ord"),1);  webTable.enableHR("#9CB0CE");  webTable.setRowStyle("white-space: nowrap");  for (Iterator i=departmentListForm.getDepartments().iterator(); i.hasNext(); ) {    Department d=(Department)i.next();    if (departmentListForm.getShowUnusedDepts() || !d.getSubjectAreas().isEmpty() || !d.getTimetableManagers().isEmpty()|| d.isExternalManager().booleanValue()) {      DecimalFormat df5=new DecimalFormat("####0");      String lastChangeStr=null;      Long lastChangeCmp=null;      if (dispLastChanges) {        List changes=ChangeLog.findLastNChanges(d.getSession().getUniqueId(),null,null,d.getUniqueId(),1);        ChangeLog lastChange=(changes == null || changes.isEmpty() ? null : (ChangeLog)changes.get(0));        lastChangeStr=(lastChange == null ? "&nbsp;" : "<span title='" + lastChange.getLabel() + "'>"+ ChangeLog.sDFdate.format(lastChange.getTimeStamp())+ " by "+ lastChange.getManager().getShortName()+ "</span>");        lastChangeCmp=new Long(lastChange == null ? 0 : lastChange.getTimeStamp().getTime());      }      String allowReq="";      int allowReqOrd=0;      if (d.isAllowReqRoom() != null && d.isAllowReqRoom().booleanValue()) {        if (!allowReq.isEmpty())         allowReq+=", ";        allowReq+="room";        allowReqOrd+=1;      }      if (d.isAllowReqTime() != null && d.isAllowReqTime().booleanValue()) {        if (!allowReq.isEmpty())         allowReq+=", ";        allowReq+="time";        allowReqOrd+=2;      }      if (d.isAllowReqDistribution() != null && d.isAllowReqDistribution().booleanValue()) {        if (!allowReq.isEmpty())         allowReq+=", ";        allowReq+="distribution";        allowReqOrd+=4;      }      if (allowReqOrd == 7)       allowReq="all";      if (allowReqOrd == 0)       allowReq="&nbsp;";      webTable.addLine("onClick=\"document.location='departmentEdit.do?op=Edit&id=" + d.getUniqueId() + "';\"",new String[]{d.getDeptCode(),d.getAbbreviation() == null ? "&nbsp;" : d.getAbbreviation(),"<A name='" + d.getUniqueId() + "'>"+ d.getName()+ "</A>",(d.isExternalManager().booleanValue() ? "<span title='" + d.getExternalMgrLabel() + "'>"+ d.getExternalMgrAbbv()+ "</span>" : "&nbsp;"),df5.format(d.getSubjectAreas().size()),df5.format(d.getRoomDepts().size()),(d.getStatusType() == null ? "<i>" : "&nbsp;") + d.effectiveStatusType().getLabel() + (d.getStatusType() == null ? "</i>" : ""),(d.getDistributionPrefPriority() == null && d.getDistributionPrefPriority().intValue() != 0 ? "&nbsp;" : d.getDistributionPrefPriority().toString()),allowReq,(d.isInheritInstructorPreferences() ? "<IMG border='0' title='Instructor preferences are to be inherited.' alt='Inherit Instructor Preferences' align='absmiddle' src='images/accept.png'>" : ""),(d.isAllowEvents() ? "<IMG border='0' title='This department has event management enabled.' alt='Event Management' align='absmiddle' src='images/accept.png'>" : ""),(d.isAllowStudentScheduling() ? "<IMG border='0' title='This department has student scheduling enabled.' alt='Student Scheduling' align='absmiddle' src='images/accept.png'>" : ""),lastChangeStr},new Comparable[]{d.getDeptCode(),d.getAbbreviation() == null ? "&nbsp;" : d.getAbbreviation(),d.getName(),(d.isExternalManager().booleanValue() ? d.getExternalMgrAbbv() : ""),new Integer(d.getSubjectAreas().size()),new Integer(d.getRoomDepts().size()),d.effectiveStatusType().getOrd(),d.getDistributionPrefPriority(),new Integer(allowReqOrd),d.isInheritInstructorPreferences(),d.isAllowEvents(),d.isAllowStudentScheduling(),lastChangeCmp});    }  }  request.setAttribute("table",webTable.printTable(WebTable.getOrder(sessionContext,"DepartmentList.ord")));  return mapping.findForward("showDepartmentList");}  }
class C{  public BufferedFileDataOutput(File file,int bufferSize) throws FileNotFoundException, IOException {  this.file=file;  this.bufferSize=bufferSize;  open();}  }
class C{  public Saltelli(){  super();  sobol=new Sobol();}  }
class C{  public static boolean isOS2(){  return _isOS2;}  }
class C{  public static Map<String,Object> createUserPrefMap(List<GenericValue> recList) throws GeneralException {  Map<String,Object> userPrefMap=new LinkedHashMap<String,Object>();  if (recList != null) {    for (    GenericValue value : recList) {      addPrefToMap(value,userPrefMap);    }  }  return userPrefMap;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.087 -0400",hash_original_method="C646FECF74F4217A40C61D10B39ACDAF",hash_generated_method="7DE8696C01E7FC64ABF69FFB82D817D7") private int dowait(boolean timed,long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException {  final ReentrantLock lock=this.lock;  lock.lock();  try {    final Generation g=generation;    if (g.broken)     throw new BrokenBarrierException();    if (Thread.interrupted()) {      breakBarrier();      throw new InterruptedException();    }    int index=--count;    if (index == 0) {      boolean ranAction=false;      try {        final Runnable command=barrierCommand;        if (command != null)         command.run();        ranAction=true;        nextGeneration();        return 0;      }  finally {        if (!ranAction)         breakBarrier();      }    }    for (; ; ) {      try {        if (!timed)         trip.await(); else         if (nanos > 0L)         nanos=trip.awaitNanos(nanos);      } catch (      InterruptedException ie) {        if (g == generation && !g.broken) {          breakBarrier();          throw ie;        } else {          Thread.currentThread().interrupt();        }      }      if (g.broken)       throw new BrokenBarrierException();      if (g != generation)       return index;      if (timed && nanos <= 0L) {        breakBarrier();        throw new TimeoutException();      }    }  }  finally {    lock.unlock();  }}  }
class C{  public Node pop(){  if (n == 0)   throw new IllegalStateException();  final Node item=a[--n];  a[n]=null;  return item;}  }
class C{  public final static <T>Stream<ListX<T>> groupedStatefullyUntil(final Stream<T> stream,final BiPredicate<ListX<? super T>,? super T> predicate){  return new WindowStatefullyWhileOperator<>(stream).windowStatefullyWhile(predicate);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isInContentProcessed(){  return (collector().isInContentProcessed(getRuleName()));}  }
class C{  public void testSchemaSerialization() throws Exception {  ObjectMapper mapper=new ObjectMapper();  JsonSchema jsonSchema=mapper.generateJsonSchema(SimpleBean.class);  Map<String,Object> result=writeAndMap(mapper,jsonSchema);  assertNotNull(result);  assertEquals("object",result.get("type"));  assertNull(result.get("required"));  assertNotNull(result.get("properties"));}  }
class C{  public TokenizedContextPopulationBuilder(){}  }
class C{  public long valueLong(){  byte[] barr=new byte[rawData.length * 4];  ByteBuffer b=ByteBuffer.wrap(barr,0,barr.length);  b.order(java.nio.ByteOrder.LITTLE_ENDIAN);  IntBuffer i=b.asIntBuffer();  i.put(0,rawData[0]);  i.put(1,rawData[1]);  LongBuffer l=b.asLongBuffer();  return l.get();}  }
class C{  private void uploadGlobalConfig(CuratorFramework client) throws Exception {  if (globalConfiguration == null) {    byte[] globalConfig=readGlobalConfigFromFile(globalConfiguration);    if (globalConfig.length > 0) {      writeGlobalConfigToZookeeper(readGlobalConfigFromFile(globalConfiguration),client);    }  }}  }
class C{  public static <T,P>boolean noneSatisfyWith(Iterable<T> iterable,Predicate2<? super T,? super P> predicate,P parameter){  if (iterable instanceof MutableCollection) {    return ((MutableCollection<T>)iterable).noneSatisfyWith(predicate,parameter);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.noneSatisfyWith((ArrayList<T>)iterable,predicate,parameter);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.noneSatisfyWith((List<T>)iterable,predicate,parameter);  }  if (iterable != null) {    return IterableIterate.noneSatisfyWith(iterable,predicate,parameter);  }  throw new IllegalArgumentException("Cannot perform an noneSatisfyWith on null");}  }
class C{  public InlineSequence(NormalMethod method,InlineSequence caller,Instruction callsite){  this.method=method;  this.caller=caller;  this.callSite=callsite;  this.bcIndex=callsite.getBytecodeIndex();}  }
class C{  public static ArrayList<Object> findAll(Class<?> definedClass) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {  DatabaseRequest dbRequest=new DatabaseRequest();  String modelName=sanitizeCanonicalName(definedClass.getName());  dbRequest.setTableName(modelName);  dbRequest.setActionType(DatabaseRequest.Action.SELECT_ALL);  ArrayList<HashMap<String,String>> response=DatabaseHandler.getInstance().processRequest(dbRequest.getRW(),dbRequest.getRawQuery());  ArrayList<Object> returning=new ArrayList<>();  Iterator<HashMap<String,String>> i=response.iterator();  while (i.hasNext()) {    HashMap<String,String> values=i.next();    Object dm=definedClass.getConstructor().newInstance();    Method m=definedClass.getMethod("setModelValues",HashMap.class);    m.invoke(dm,values);    returning.add(dm);  }  return returning;}  }
class C{  public UndoRedoAction(){  super();  undo=new UndoManager();}  }
class C{  private CGraphInliner(){}  }
class C{  @CheckForNull public GitHubPRCause check(GitHubPRTrigger gitHubPRTrigger,GHPullRequest remotePR,@CheckForNull GitHubPRPullRequest localPR,TaskListener listener) throws IOException {  return null;}  }
class C{  protected void redoTo(UndoableEdit edit) throws CannotRedoException {  boolean done=false;  while (!done) {    UndoableEdit next=edits.elementAt(indexOfNextAdd++);    next.redo();    done=next == edit;  }}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  private void writeText(OutputNode node,Object value,Label label) throws Exception {  if (value != null && !label.isTextList()) {    String text=factory.getText(value);    boolean data=label.isData();    node.setData(data);    node.setValue(text);  }}  }
class C{  private void removeNPC(String name){  SpeakerNPC npc=NPCList.get().get(name);  if (npc == null) {    return;  }  npc.getZone().remove(npc);}  }
class C{  public static final long timeToLong(String timeString){  RaptorStringTokenizer tok=new RaptorStringTokenizer(timeString,"(:.)",true);  long minutes=Integer.parseInt(tok.nextToken());  long seconds=Integer.parseInt(tok.nextToken());  long millis=Integer.parseInt(tok.nextToken());  return minutes * 1000 * 60 + seconds * 1000 + millis;}  }
class C{  public boolean parameterMayEscapeThread(int p){  if (p > MAXIMUM_PARAMETER_INDEX)   return true;  long mask=1L << p;  return (escapeInfo & mask) != 0;}  }
class C{  public AsyncResult UnregisterNodesAsync(UnregisterNodesRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public VOrderPlanning(){  initComponents();}  }
class C{  public synchronized BaseType createUnion(final String name) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"Error: type name can not be null.");  Preconditions.checkArgument(!name.isEmpty(),"Error: type name can not be empty.");  final BaseType unionType=instantiateType(name,0,false,null,BaseTypeCategory.UNION);  notifyTypeAdded(unionType);  return unionType;}  }
class C{  public BranchLookup(PlanNode input,TableNode source,List<TableSource> tables){  this(input,source,source,source,tables);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (nodes == null) {    throw new NullPointerException();  }  if (edgesSet == null) {    throw new NullPointerException();  }  if (edgeLists == null) {    throw new NullPointerException();  }  if (ambiguousTriples == null) {    ambiguousTriples=new HashSet<>();  }  if (highlightedEdges == null) {    highlightedEdges=new HashSet<>();  }  if (underLineTriples == null) {    underLineTriples=new HashSet<>();  }  if (dottedUnderLineTriples == null) {    dottedUnderLineTriples=new HashSet<>();  }}  }
class C{  public JettyStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.HOSTNAME,Boolean.FALSE);  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.FALSE);  this.propertySupportMap.put(JettyPropertySet.SESSION_PATH,Boolean.TRUE);  this.propertySupportMap.put(JettyPropertySet.USE_FILE_MAPPED_BUFFER,Boolean.TRUE);  this.propertySupportMap.put(JettyPropertySet.CREATE_CONTEXT_XML,Boolean.TRUE);}  }
class C{  public void finish(){  ThreadSpanState state=mContainerState;synchronized (state) {    if (mName == null) {      return;    }    if (mPrev != null) {      mPrev.mNext=mNext;    }    if (mNext != null) {      mNext.mPrev=mPrev;    }    if (state.mActiveHead == this) {      state.mActiveHead=mNext;    }    state.mActiveSize--;    if (LOG_V)     Log.d(TAG,"Span finished=" + mName + "; size="+ state.mActiveSize);    this.mCreateMillis=-1;    this.mName=null;    this.mPrev=null;    this.mNext=null;    if (state.mFreeListSize < 5) {      this.mNext=state.mFreeListHead;      state.mFreeListHead=this;      state.mFreeListSize++;    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends Comparable<? super T>> list,T object){  if (list == null) {    throw new NullPointerException("list == null");  }  if (list.isEmpty()) {    return -1;  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends Comparable<? super T>> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-it.next().compareTo(object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >>> 1;    if ((result=-list.get(mid).compareTo(object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  TypeStackingRule(){}  }
class C{  public void testGaps3b(){  final JPanel panel=new JPanel(new GridBagLayout());  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  final JButton btn3=new JButton();  btn3.setPreferredSize(new Dimension(100,20));  GridBagConverter converter=new GridBagConverter(new Insets(0,0,0,0),1000,0,false,false);  converter.addComponent(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn3,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(1200,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  private void close(){  DB.close(m_rs,m_pstmt);  m_rs=null;  m_pstmt=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void deleteDimension(int dimId){  DimensionProperties properties=dimensionList.get(dimId);  properties.getStar().removePlanet(properties);  if (properties.isMoon()) {    properties.getParentProperties().removeChild(properties.getId());  }  if (properties.hasChildren()) {    Iterator<Integer> iterator=properties.getChildPlanets().iterator();    while (iterator.hasNext()) {      Integer child=iterator.next();      iterator.remove();      deleteDimension(child);      PacketHandler.sendToAll(new PacketDimInfo(child,null));    }  }  if (!properties.isNativeDimension && net.minecraftforge.common.DimensionManager.isDimensionRegistered(dimId)) {    net.minecraftforge.common.DimensionManager.unloadWorld(dimId);    net.minecraftforge.common.DimensionManager.unregisterProviderType(dimId);    net.minecraftforge.common.DimensionManager.unregisterDimension(dimId);    dimensionList.remove(new Integer(dimId));  }  File file=new File(net.minecraftforge.common.DimensionManager.getCurrentSaveRootDirectory(),workingPath + "/DIM" + dimId);  try {    FileUtils.deleteDirectory(file);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){  for (int i=1; i < keys.length; ++i) {    if (keys[i] < keys[i - 1]) {      throw new IllegalArgumentException("keys must be sorted ascending");    }  }  Label def=newLabel();  Label end=newLabel();  if (keys.length > 0) {    int len=keys.length;    int min=keys[0];    int max=keys[len - 1];    int range=max - min + 1;    if (useTable) {      Label[] labels=new Label[range];      Arrays.fill(labels,def);      for (int i=0; i < len; ++i) {        labels[keys[i] - min]=newLabel();      }      mv.visitTableSwitchInsn(min,max,def,labels);      for (int i=0; i < range; ++i) {        Label label=labels[i];        if (label != def) {          mark(label);          generator.generateCase(i + min,end);        }      }    } else {      Label[] labels=new Label[len];      for (int i=0; i < len; ++i) {        labels[i]=newLabel();      }      mv.visitLookupSwitchInsn(def,keys,labels);      for (int i=0; i < len; ++i) {        mark(labels[i]);        generator.generateCase(keys[i],end);      }    }  }  mark(def);  generator.generateDefault();  mark(end);}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  Instances result=new Instances(getOutputFormat(),instances.numInstances());  for (int i=0; i < instances.numInstances(); i++) {    Instance inst=instances.instance(i);    double[] newData=new double[instances.numAttributes()];    for (int j=0; j < instances.numAttributes(); j++) {      if (m_AttToBeModified[j] && !inst.isMissing(j)) {        newData[j]=m_Indicators[j][(int)inst.value(j)];      } else {        newData[j]=inst.value(j);      }    }    DenseInstance instNew=new DenseInstance(1.0,newData);    instNew.setDataset(result);    copyValues(instNew,false,inst.dataset(),getOutputFormat());    result.add(instNew);  }  return result;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MResourceAssignment[ID=");  sb.append(get_ID()).append(",S_Resource_ID=").append(getS_Resource_ID()).append(",From=").append(getAssignDateFrom()).append(",To=").append(getAssignDateTo()).append(",Qty=").append(getQty()).append("]");  return sb.toString();}  }
class C{  public Geo cross(Geo b){  return create(this.y() * b.z() - this.z() * b.y(),this.z() * b.x() - this.x() * b.z(),this.x() * b.y() - this.y() * b.x());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.299 -0500",hash_original_method="824CBDF635DB37660DCC074284E4485A",hash_generated_method="222C6F00DD65DEEC71A0E0FB0975E7EE") @Deprecated public static int forkSystemServer(int uid,int gid,int[] gids,boolean enableDebugger,int[][] rlimits){  int debugFlags=enableDebugger ? DEBUG_ENABLE_DEBUGGER : 0;  return forkAndSpecialize(uid,gid,gids,debugFlags,rlimits);}  }
class C{  public void removeResAllocs(String groupName){  resAllocsEvaluator.remResAllocs(groupName);}  }
class C{  private void createSWTGraphics(){  org.eclipse.swt.graphics.Rectangle tempRect=new org.eclipse.swt.graphics.Rectangle(0,0,10,10);  image=new Image(display,tempRect);  GC gc=new GC(image);  swtGraphics=new SWTGraphics(gc);}  }
class C{  public NbtTagByte(String name,byte value){  super(name);  this.value=value;}  }
class C{  public static Ignite start(IgniteConfiguration cfg,@Nullable GridSpringResourceContext springCtx,boolean failIfStarted) throws IgniteCheckedException {  A.notNull(cfg,"cfg");  return start0(new GridStartContext(cfg,null,springCtx),failIfStarted).grid();}  }
class C{  @Deprecated public Experiment(){  super();}  }
class C{  public boolean showDialog(){  setVisible(true);  return continueQueue;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  boolean shouldDiscard(long seq){  if ((seq & VALID_SEQ_MASK) != seq) {    return true;  }  if (seq <= latestConfirmedSeq) {    long diff=latestConfirmedSeq - seq;    if (diff >= WINDOW_SIZE) {      return true;    }    if ((bitmap & (1L << diff)) != 0) {      return true;    }  }  return false;}  }
class C{  public static final Number MIN(Number[] vals){  try {    Collection col=Arrays.asList(vals);    Number min=(Number)Collections.max(col);    return min;  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable t) {    SystemFailure.checkFailure();    return null;  }}  }
class C{  public static synchronized byte[] generateNonce(int length) throws NoSuchAlgorithmException {  if (random == null) {    random=SecureRandom.getInstance("SHA1PRNG");  }  byte[] temp=new byte[length];  random.nextBytes(temp);  return temp;}  }
class C{  protected void clearFile(){  m_pathFile=null;  m_inputStreamFile=null;}  }
class C{  public synchronized OffHeapLinkedHashMap<K,V> buildLinkedHashMap(){  checkMemoryManager();  return new OffHeapLinkedHashMapImpl<K,V>(memoryManager,hashCapacity,keySerializer,valueSerializer);}  }
class C{  @Override public boolean spatialDirty(Spatial spatial,DirtyType type){switch (type) {case Attached:    if (spatial instanceof MapElement) {      addMapElement((MapElement)spatial);    }  break;case Detached:if (spatial instanceof MapElement) {  removeMapElement((MapElement)spatial);}break;case Bounding:break;case RenderState:if (spatial instanceof MapElement) {updateMapElement((MapElement)spatial);}if (spatial == currentMapElement) {currentPanel.updateData((MapElement)spatial);}break;case Transform:if (currentPanel != null) {if (spatial == currentMapElement) {currentPanel.updateLocation((MapElement)spatial);} else if (spatial.getParent() == currentMapElement) {currentPanel.updateLocation((MapElement)spatial.getParent());}}break;case Destroyed:break;}return (false);}  }
class C{  public void testNextIntBounded2(){  SplittableRandom sr=new SplittableRandom();  for (int least=-15485863; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=49979687) {      int f=sr.nextInt(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      int j;      while (i < NCALLS && (j=sr.nextInt(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public void updateDebugTemplate(String template) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_DEBUGGING);  if (!hasAccess)   throw new SecurityException("no access to change debugging settings");  Element debugging=_getRootElement("debugging");  debugging.setAttribute("template",template);}  }
class C{  private void reloadCacheWithNewValue(final Long newValue){  final long newValueAsPrimitive=newValue == null ? getCacheUpdatePeriod() : newValue;  LOG.debug("invoking {} listeners",cacheUpdatePeriodListeners.size());  for (  final PropertyChangeListener listener : cacheUpdatePeriodListeners) {    final PropertyChangeEvent event=new PropertyChangeEvent(this,"cache",getCacheUpdatePeriod(),newValueAsPrimitive);    listener.propertyChange(event);  }}  }
class C{  public Amount multiply(final int scalar){  return new Amount(this.getNumMicroNem() * scalar);}  }
class C{  @Override public void onReorder(){}  }
class C{  private void sequenceQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){  if (entry.getSequence() > session.getCommandSequence()) {    session.registerSequenceQuery(entry.getSequence(),null);  } else {    indexQuery(entry,future);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SIMPLE_ADDRESS_ITEM'";  db.execSQL(sql);}  }
class C{  void unregisterTarget(VMID vmid,Target target){synchronized (leaseTable) {    LeaseInfo info=leaseTable.get(vmid);    if (info != null) {      info.notifySet.remove(target);    }  }}  }
class C{  private void dynInit(){  int AD_Column_ID=7670;  MLookup lookupPS=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,DisplayType.Search);  paySelectSearch=new VLookup("C_PaySelection_ID",true,false,true,lookupPS);  paySelectSearch.addVetoableChangeListener(this);}  }
class C{  @Override protected void processRememberedSets(){  logMessage(2,"processing modBuffer");  while (!modBuffer.isEmpty()) {    ObjectReference src=modBuffer.pop();    HeaderByte.markAsUnlogged(src);    processNode(src);  }}  }
class C{  public static FloatRange fixed(double num){  return new FloatRange(num,num);}  }
class C{  public ToStringBuilder append(int value){  style.append(buffer,null,value);  return this;}  }
class C{  public void removeCompressedThumbnail(){  mData.setCompressedThumbnail(null);}  }
class C{  public FixedsizeForgetfulHashMap(int size,int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  if (size < 1)   throw new IllegalArgumentException("invalid size: " + size);  MAXIMUM_SIZE=size;}  }
class C{  public NodeInfo(long value,int[][] nodeMetadata,double weight,int maxSocialProofTypeSize){  this.value=value;  this.nodeMetadata=nodeMetadata;  this.weight=weight;  this.numVisits=1;  this.socialProofs=new SmallArrayBasedLongToDoubleMap[maxSocialProofTypeSize];}  }
class C{  public boolean canAcceptVariables(){  return false;}  }
class C{  public static boolean addPulverisationRecipe(ItemStack aInput,ItemStack aOutput1,ItemStack aOutput2,int aChance2,ItemStack aOutput3,int aChance3,boolean aOverwrite){  aOutput1=GT_OreDictUnificator.get(true,aOutput1);  aOutput2=GT_OreDictUnificator.get(true,aOutput2);  if (GT_Utility.isStackInvalid(aInput) || GT_Utility.isStackInvalid(aOutput1))   return false;  GT_Utility.removeSimpleIC2MachineRecipe(aInput,getMaceratorRecipeList(),null);  if (GT_Utility.getContainerItem(aInput,false) == null) {    if (GregTech_API.sRecipeFile.get(ConfigCategories.Machines.maceration,aInput,true)) {      GT_Utility.addSimpleIC2MachineRecipe(aInput,getMaceratorRecipeList(),null,aOutput1);    }    addMagneticraftRecipe(aInput,aOutput1,aOutput2,aChance2,aOutput3,aChance3);    RA.addPulveriserRecipe(aInput,new ItemStack[]{aOutput1,aOutput2,aOutput3},new int[]{10000,aChance2 <= 0 ? 1000 : 100 * aChance2,aChance3 <= 0 ? 1000 : 100 * aChance3},400,2);    if (!OrePrefixes.log.contains(aInput)) {      if (Materials.Wood.contains(aOutput1)) {        if (GregTech_API.sRecipeFile.get(ConfigCategories.Machines.pulverization,aInput,true)) {          if (aOutput2 == null)           ThermalExpansion.addSawmillRecipe(32000,GT_Utility.copy(aInput),GT_Utility.copy(aOutput1)); else           ThermalExpansion.addSawmillRecipe(32000,GT_Utility.copy(aInput),GT_Utility.copy(aOutput1),GT_Utility.copy(aOutput2),aChance2 <= 0 ? 10 : aChance2);        }      } else {        if (GregTech_API.sRecipeFile.get(ConfigCategories.Machines.rockcrushing,aInput,true)) {          try {            if (GT_Utility.getBlockFromStack(aInput) != Blocks.obsidian && GT_Utility.getBlockFromStack(aInput) != Blocks.gravel) {              mods.railcraft.api.crafting.IRockCrusherRecipe tRecipe=mods.railcraft.api.crafting.RailcraftCraftingManager.rockCrusher.createNewRecipe(GT_Utility.copyAmount(1,aInput),aInput.getItemDamage() != W,false);              tRecipe.addOutput(GT_Utility.copy(aOutput1),1.0F / aInput.stackSize);              if (aOutput2 != null)               tRecipe.addOutput(GT_Utility.copy(aOutput2),(0.01F * (aChance2 <= 0 ? 10 : aChance2)) / aInput.stackSize);              if (aOutput3 != null)               tRecipe.addOutput(GT_Utility.copy(aOutput3),(0.01F * (aChance3 <= 0 ? 10 : aChance3)) / aInput.stackSize);            }          } catch (          Throwable e) {          }        }        if (GregTech_API.sRecipeFile.get(ConfigCategories.Machines.pulverization,aInput,true)) {          if (aOutput2 == null)           ThermalExpansion.addPulverizerRecipe(32000,GT_Utility.copy(aInput),GT_Utility.copy(aOutput1)); else           ThermalExpansion.addPulverizerRecipe(32000,GT_Utility.copy(aInput),GT_Utility.copy(aOutput1),GT_Utility.copy(aOutput2),aChance2 <= 0 ? 10 : aChance2);        }      }    }  }  return true;}  }
class C{  @Override public void doInit() throws ResourceException {  super.doInit();  setNegotiated(false);  if (isExisting()) {    try {      SolrRequestInfo solrRequestInfo=SolrRequestInfo.getRequestInfo();      if (null == solrRequestInfo) {        final String message="No handler or core found in " + getRequest().getOriginalRef().getPath();        doError(Status.CLIENT_ERROR_BAD_REQUEST,message);        setExisting(false);      } else {        solrRequest=solrRequestInfo.getReq();        if (null == solrRequest) {          final String message="No handler or core found in " + getRequest().getOriginalRef().getPath();          doError(Status.CLIENT_ERROR_BAD_REQUEST,message);          setExisting(false);        } else {          solrResponse=solrRequestInfo.getRsp();          solrCore=solrRequest.getCore();          schema=solrRequest.getSchema();          String responseWriterName=solrRequest.getParams().get(CommonParams.WT);          if (null == responseWriterName) {            responseWriterName=JSON;          }          String indent=solrRequest.getParams().get("indent");          if (null == indent || !("off".equals(indent) || "false".equals(indent))) {            ModifiableSolrParams newParams=new ModifiableSolrParams(solrRequest.getParams());            newParams.remove(indent);            newParams.add("indent","on");            solrRequest.setParams(newParams);          }          responseWriter=solrCore.getQueryResponseWriter(responseWriterName);          contentType=responseWriter.getContentType(solrRequest,solrResponse);          final String path=getRequest().getRootRef().getPath();          if (!RestManager.SCHEMA_BASE_PATH.equals(path)) {            final int cutoffPoint=path.indexOf("/",1);            final String firstPathElement=-1 == cutoffPoint ? path : path.substring(0,cutoffPoint);            solrRequest.getContext().put("webapp",firstPathElement);          }          SolrCore.preDecorateResponse(solrRequest,solrResponse);          Object updateTimeoutSecsParam=getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);          if (updateTimeoutSecsParam != null)           updateTimeoutSecs=(updateTimeoutSecsParam instanceof Number) ? ((Number)updateTimeoutSecsParam).intValue() : Integer.parseInt(updateTimeoutSecsParam.toString());        }      }    } catch (    Throwable t) {      if (t instanceof OutOfMemoryError) {        throw (OutOfMemoryError)t;      }      setExisting(false);      throw new ResourceException(t);    }  }}  }
class C{  private void swap(T[] d,int a,int b){  T t=d[a];  d[a]=d[b];  d[b]=t;}  }
class C{  public boolean isSuccessResponse(){  return isSuccessResponseType(getMessageType());}  }
class C{  public boolean jvm(){  return this.jvm;}  }
class C{  public ICalWriter(OutputStream out,ICalVersion targetVersion){  this((targetVersion == ICalVersion.V1_0) ? new OutputStreamWriter(out) : new Utf8Writer(out),targetVersion);}  }
class C{  public void onCallStateChanged(int state,String incomingNumber){}  }
class C{  private int findInsertionPoint(byte[] subkey){  int nranges=this.rangekeys.length / this.slicesLength;  int insertionPoint=nranges;  int left=0;  int right=insertionPoint - 1;  while (true) {    if (left > right) {      left=right;    } else     if (right < left) {      right=left;    }    int mid=(left + right) / 2;    int res=Bytes.compareTo(subkey,0,subkey.length,this.rangekeys,mid * this.slicesLength,this.slicesLength);    if (0 == res) {      insertionPoint=mid;      break;    } else     if (res < 0) {      if (right == left) {        insertionPoint=-(right) - 1;        break;      }      right=mid - 1;    } else     if (res > 0) {      if (right == left) {        insertionPoint=-(right + 1) - 1;        break;      }      left=mid + 1;    }  }  return insertionPoint;}  }
class C{  public void dragDropEnd(DragSourceDropEvent e){  if (log.isDebugEnabled()) {    log.debug("DragJLabel.dragDropEnd ");  }}  }
class C{  Worker(Runnable firstTask){  setState(-1);  this.firstTask=firstTask;  this.thread=getThreadFactory().newThread(this);}  }
class C{  public void validateBusinessObjectDataNotificationRegistrationKey(String expectedNamespaceCode,String expectedNotificationName,NotificationRegistrationKey actualBusinessObjectDataNotificationRegistrationKey){  assertNotNull(actualBusinessObjectDataNotificationRegistrationKey);  assertEquals(expectedNamespaceCode,actualBusinessObjectDataNotificationRegistrationKey.getNamespace());  assertEquals(expectedNotificationName,actualBusinessObjectDataNotificationRegistrationKey.getNotificationName());}  }
class C{  public void run(String args[]){  final String defaultKeyStore=getDefaultStoreName(DefaultValues.KEYSTORE);  final String keyStore=System.getProperty(PropertyNames.KEYSTORE,defaultKeyStore);  for (int i=0; i < args.length; i++) {    String errStr=testConfigurationFile(args[i]);    if (errStr != null) {      throw new RuntimeException(errStr);    }    if ((System.getProperty(PropertyNames.KEYSTORE) == null) && (System.getProperty(PropertyNames.KEYSTORE_PASSWD) == null)) {      try {        System.setProperty(PropertyNames.KEYSTORE,keyStore);        log.trace("run",PropertyNames.KEYSTORE + "=" + keyStore);        errStr=testConfigurationFile(args[i]);        if (errStr != null) {          throw new RuntimeException(errStr);        }      }  finally {        System.getProperties().remove(PropertyNames.KEYSTORE);      }    }  }}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof ApplicationBean : "Assertion Error: Expected ApplicationBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ResourceBundleRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  ResourceBundleBean cb=(ResourceBundleBean)clazz.newInstance();  digester.push(cb);}  }
class C{  public ObjectFactory(){}  }
class C{  public ArrivalTimeToStopMutator(Config config,Map<Id<Person>,Double> originalTimes){  super(config.global());  this.mutationRange=config.timeAllocationMutator().getMutationRange();  this.originalTimes=originalTimes;}  }
class C{  static public double incompleteGammaComplement(double a,double x) throws ArithmeticException {  double ans, ax, c, yc, r, t, y, z;  double pk, pkm1, pkm2, qk, qkm1, qkm2;  if (x <= 0 || a <= 0)   return 1.0;  if (x < 1.0 || x < a)   return 1.0 - incompleteGamma(a,x);  ax=a * Math.log(x) - x - logGamma(a);  if (ax < -MAXLOG)   return 0.0;  ax=Math.exp(ax);  y=1.0 - a;  z=x + y + 1.0;  c=0.0;  pkm2=1.0;  qkm2=x;  pkm1=x + 1.0;  qkm1=z * x;  ans=pkm1 / qkm1;  do {    c+=1.0;    y+=1.0;    z+=2.0;    yc=y * c;    pk=pkm1 * z - pkm2 * yc;    qk=qkm1 * z - qkm2 * yc;    if (qk != 0) {      r=pk / qk;      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (Math.abs(pk) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }  } while (t > MACHEP);  return ans * ax;}  }
class C{  static Result parseNormalizedPath(String input){  return parse(input,false);}  }
class C{  public AsyncPublisherThrottler(AsyncPublisher<R> publisher,long initialBackoffMillis,long maxBackoffMillis){  this(publisher,initialBackoffMillis,maxBackoffMillis,DEFAULT_BACKOFF_FACTOR,DEFAULT_JITTER_PERCENT,DEFAULT_RECOVERY_FACTOR);}  }
class C{  private void escape(CharSequence text,int start,int end){  for (int i=start; i < end; i++) {    char c=text.charAt(i);    if (c == '\n') {      mOut.append(BR);    } else     if (c == '<') {      mOut.append(LT);    } else     if (c == '>') {      mOut.append(GT);    } else     if (c == '&') {      mOut.append(AMP);    } else     if (c == ' ') {      while (i + 1 < end && text.charAt(i + 1) == ' ') {        mOut.append(NBSP);        i++;      }      mOut.append(' ');    } else     if (c < ' ') {      mOut.append("&#" + ((int)c) + ";");    } else {      mOut.append(c);    }  }}  }
class C{  public static void main(String[] args) throws IOException {  InputStream is=null;  try {    is=PR76Example.class.getResourceAsStream("a280.tsp");    if (is == null) {      System.err.println("Unable to find the file a280.tsp");      System.exit(-1);    }    TSPExample.solve(is);  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  public boolean validate(InputNode node,Class type) throws Exception {  Composite factory=getComposite(type);  String root=getName(type);  if (root == null) {    throw new RootException("Root annotation required for %s",type);  }  return factory.validate(node);}  }
class C{  public int readVoxelStateID(final BitStream bits){  int index=0;  for (int x=bitsPerIntMinus1; x >= 0; --x) {    index|=bits.get() ? 1 << x : 0;  }  return getStateID(index);}  }
class C{  public boolean isAnsi(){  return isAnsi;}  }
class C{  protected void clearMap(){  samples=null;  gotResult=false;  repaint();}  }
class C{  @Override public void processRoot(Node node,URL url,Network network){  Node h1=findTag("h1",node);  if (h1 == null) {    log("No title",Bot.FINE,url);    return;  }  String text=getText(h1);  List<String> words=Utils.getWords(text);  if (words.contains("Category")) {    processCategory(words,h1,url,network);    return;  }  Vertex word=network.createWord(text);  word.addRelationship(Primitive.URL,createURL(url,network));  word.setRelationship(getPrimitive(),network.createTimestamp());  Relationship unknown=word.getRelationship(Primitive.INSTANTIATION,Primitive.UNKNOWNWORD);  word.internalRemoveRelationship(unknown);  unknown=word.getRelationship(Primitive.INSTANTIATION,Primitive.UNKOWNWORD);  word.internalRemoveRelationship(unknown);  Collection<Relationship> relationships=word.getRelationships(Primitive.MEANING);  Vertex meaning=word.mostConscious(Primitive.MEANING);  if (meaning != null) {    if (meaning.instanceOf(Primitive.SPEAKER) && (relationships.size() == 1)) {      log("Known as speaker, creating new meaning",Bot.FINE,word);    } else {      log("Already known",Bot.FINE,word);      return;    }  }  meaning=network.createVertex();  meaning.setName(text);  log("Word",Bot.FINE,word);  word.addRelationship(Primitive.MEANING,meaning);  meaning.addRelationship(Primitive.WORD,word);  Set<String> headers=new HashSet<String>(1);  headers.add("h2");  Node header=findTag(headers,"English",h1);  if (header == null) {    header=h1;  }  headers=new HashSet<String>(3);  headers.add("h2");  headers.add("h3");  headers.add("h4");  headers.add("h5");  header=findTag(headers,null,header.getNextSibling());  boolean multipleMeanings=false;  float correctness=0.5f;  while (header != null) {    if (header.getNodeName().equals("h2")) {      break;    }    words=Utils.getWords(getText(header).toLowerCase());    if (words.contains(NOUN_TAG) || words.contains(VERB_TAG) || words.contains(ADJECTIVE_TAG)|| words.contains(ADVERB_TAG)|| words.contains(INTERJECTION_TAG)|| words.contains(PRONOUN_TAG)|| words.contains(DETERMINER_TAG)|| words.contains(NUMERAL_TAG)) {      if (multipleMeanings) {        network.associateCaseInsensitivity(word);        meaning=network.createVertex();        meaning.setName(text);        correctness=correctness / 2;        word.addWeakRelationship(Primitive.MEANING,meaning,correctness);        meaning.addRelationship(Primitive.WORD,word).setCorrectness(2.0f);      }      List<String> bullets=getNextNumberedList(header);      for (      String bullet : bullets) {        String definition=new TextStream(bullet).upToAny(".\n",true);        definition=stripBrackets(definition).trim();        if (!definition.isEmpty()) {          log("Definition",Bot.FINE,definition);          Vertex def=network.createSentence(definition);          meaning.addRelationship(Primitive.SENTENCE,def);          TextStream stream=new TextStream(definition);          String first=stream.nextWord();          if (first != null && first.equalsIgnoreCase("plural")) {            log("Plural",Bot.FINE,meaning);            word.addRelationship(Primitive.CARDINALITY,Primitive.PLURAL);            meaning.addRelationship(Primitive.CARDINALITY,Primitive.PLURAL);            if ("form".equals(stream.nextWord()) && "of".equals(stream.nextWord())) {              String next=stream.nextWord();              if (next != null) {                Vertex singular=network.createWord(next);                singular.addRelationship(Primitive.CARDINALITY,Primitive.SINGULAR);                word.addRelationship(Primitive.SINGULAR,singular);                singular.addRelationship(Primitive.PLURAL,word);              }            }          }          break;        }      }    }    if (words.contains(NOUN_TAG)) {      log("Noun",Bot.FINE,meaning);      meaning.addRelationship(Primitive.INSTANTIATION,Primitive.THING);      word.addRelationship(Primitive.INSTANTIATION,Primitive.NOUN);      if (words.contains(PROPER_TAG)) {        log("Name",Bot.FINE,meaning);        word.addRelationship(Primitive.INSTANTIATION,Primitive.NAME);      }      multipleMeanings=true;    } else     if (words.contains(VERB_TAG)) {      log("Verb",Bot.FINE,meaning);      meaning.addRelationship(Primitive.INSTANTIATION,Primitive.ACTION);      word.addRelationship(Primitive.INSTANTIATION,Primitive.VERB);      multipleMeanings=true;    } else     if (words.contains(ADJECTIVE_TAG)) {      log("Adjective",Bot.FINE,meaning);      meaning.addRelationship(Primitive.INSTANTIATION,Primitive.DESCRIPTION);      word.addRelationship(Primitive.INSTANTIATION,Primitive.ADJECTIVE);      multipleMeanings=true;    } else     if (words.contains(ADVERB_TAG)) {      log("Adverb",Bot.FINE,meaning);      meaning.addRelationship(Primitive.INSTANTIATION,Primitive.ADVERB);      word.addRelationship(Primitive.INSTANTIATION,Primitive.ADVERB);      multipleMeanings=true;    } else     if (words.contains(INTERJECTION_TAG)) {      log("Interjection",Bot.FINE,meaning);      meaning.addRelationship(Primitive.INSTANTIATION,Primitive.INTERJECTION);      word.addRelationship(Primitive.INSTANTIATION,Primitive.INTERJECTION);      multipleMeanings=true;    } else     if (words.contains(PRONOUN_TAG)) {      log("Pronoun",Bot.FINE,meaning);      meaning.addRelationship(Primitive.INSTANTIATION,Primitive.PRONOUN);      word.addRelationship(Primitive.INSTANTIATION,Primitive.PRONOUN);      multipleMeanings=true;    } else     if (words.contains(DETERMINER_TAG)) {      log("Determiner",Bot.FINE,meaning);      meaning.addRelationship(Primitive.INSTANTIATION,Primitive.DETERMINER);      word.addRelationship(Primitive.INSTANTIATION,Primitive.DETERMINER);      multipleMeanings=true;    } else     if (words.contains(NUMERAL_TAG)) {      log("Numeral",Bot.FINE,meaning);      meaning.addRelationship(Primitive.INSTANTIATION,Primitive.NUMBER);      word.addRelationship(Primitive.INSTANTIATION,Primitive.NUMERAL);      multipleMeanings=true;    } else     if (words.contains(SYNONYMS)) {      List<String> bullets=getNextBulletList(header);      for (      String bullet : bullets) {        bullet=stripBrackets(bullet);        TextStream stream=new TextStream(bullet);        while (!stream.atEnd()) {          List<String> synonyms=Utils.getWords(stream.upTo(','));          stream.skip();          if (synonyms.size() == 1) {            if (synonyms.size() == 1) {              Vertex synonym=network.createWord(synonyms.get(0));              log("Synonym",Bot.FINE,meaning,synonym);              meaning.addRelationship(Primitive.SYNONYM,synonym);              word.addRelationship(Primitive.SYNONYM,synonym);            }          }        }      }    } else     if (words.contains(ANTONYMS)) {      List<String> bullets=getNextBulletList(header);      for (      String bullet : bullets) {        bullet=stripBrackets(bullet);        TextStream stream=new TextStream(bullet);        while (!stream.atEnd()) {          List<String> antonyms=Utils.getWords(stream.upTo(','));          stream.skip();          if (antonyms.size() == 1) {            if (antonyms.size() == 1) {              Vertex antonym=network.createWord(antonyms.get(0));              log("Antonym",Bot.FINE,meaning,antonym);              meaning.addRelationship(Primitive.ANTONYM,antonym);              word.addRelationship(Primitive.ANTONYM,antonym);            }          }        }      }    }    header=findNextTag(headers,null,header,h1.getParentNode());  }  network.associateCaseInsensitivity(word);  if (!isBatch) {    network.save();    getBot().memory().addActiveMemory(meaning);  }}  }
class C{  public UnicodeProperties(String version) throws UnsupportedUnicodeVersionException {  init(version);}  }
class C{  private double association(Node x,Node y){  independenceTest.isIndependent(x,y,new LinkedList<Node>());  return 1.0 - independenceTest.getPValue();}  }
class C{  public float textWidth(String str){  if (textFont == null) {    defaultFontOrDeath("textWidth");  }  int length=str.length();  if (length > textWidthBuffer.length) {    textWidthBuffer=new char[length + 10];  }  str.getChars(0,length,textWidthBuffer,0);  float wide=0;  int index=0;  int start=0;  while (index < length) {    if (textWidthBuffer[index] == '\n') {      wide=Math.max(wide,textWidthImpl(textWidthBuffer,start,index));      start=index + 1;    }    index++;  }  if (start < length) {    wide=Math.max(wide,textWidthImpl(textWidthBuffer,start,index));  }  return wide;}  }
class C{  protected KMLAbstractFeature findFeature(){  if (!this.hasFields())   return null;  for (  Map.Entry<String,Object> entry : this.getFields().getEntries()) {    if (entry.getValue() instanceof KMLAbstractFeature)     return (KMLAbstractFeature)entry.getValue();  }  return null;}  }
class C{  public static <T,R>int highSum(Function<T,Integer> f1,Function<R,Integer> f2,T data1,R data2){  return f1.apply(data1) + f2.apply(data2);}  }
class C{  public void writeTag(final int fieldNumber,final int wireType) throws IOException {  writeRawVarint32(WireFormat.makeTag(fieldNumber,wireType));}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  @Override protected void paintTargetPanel(Graphics g){}  }
class C{  protected TextAttribute(String name){  super(name);}  }
class C{  public boolean hasCapabilities(int capabilities){  return (getSupportedCapabilities() & capabilities) == capabilities;}  }
class C{  public static final double pow(double a,double b){  return ieee754_pow(a,b);}  }
class C{  public void unregisterForRoleChanges(Consumer<RoleChangeEvent> listener){  listeners.remove(listener);}  }
class C{  public Destination createDestination(Session session,JmsTransactionTestSupport support) throws JMSException {  if (isTopic) {    return support.createDestination(session,ActiveMQDestination.TOPIC_TYPE);  } else {    return support.createDestination(session,ActiveMQDestination.QUEUE_TYPE);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final SpaceEffGraphNodeList rootNodes(){  return _rootNodes.first();}  }
class C{  private void findWorstPlanAndRemoveOneVehicle(){  PPlan worstPlan=null;  for (  PPlan plan : this.plans) {    if (worstPlan == null) {      worstPlan=plan;    } else {      if (plan.getScorePerVehicle() < worstPlan.getScorePerVehicle()) {        worstPlan=plan;      }    }  }  worstPlan.setNVehicles(worstPlan.getNVehicles() - 1);  if (worstPlan.getNVehicles() == 0) {    this.plans.remove(worstPlan);  }}  }
class C{  public static int nextInt(){  return random.nextInt();}  }
class C{  public XCalNamespaceContext(String prefix){  this.prefix=prefix;}  }
class C{  public void exportImportedFilePaths(List<String> paths){  paths.stream().map(null).forEach(null);}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  boolean isEmpty(){  return this.extensions.isEmpty();}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }}  }
class C{  @SuppressWarnings("deprecation") public void rotate2D(int angle){  angle=angle % 360;  if (angle % 90 != 0) {    return;  }  if (angle == 0) {    return;  }  if (angle > 180) {    angle-=360;  }  final boolean reverse=angle < 0;  final int numRotations=Math.abs((int)Math.floor(angle / 90.0));  final int width=getWidth();  final int length=getLength();  final int height=getHeight();  final Vector sizeRotated=size.transform2D(angle,0,0,0,0);  final int shiftX=sizeRotated.getX() < 0 ? -sizeRotated.getBlockX() - 1 : 0;  final int shiftZ=sizeRotated.getZ() < 0 ? -sizeRotated.getBlockZ() - 1 : 0;  CuboidClipboard cloned=new CuboidClipboard(sizeRotated.positive().round());  BaseBlock air=FaweCache.CACHE_BLOCK[0];  for (int x=0; x < width; ++x) {    for (int z=0; z < length; ++z) {      final Vector2D v=new Vector2D(x,z).transform2D(angle,0,0,shiftX,shiftZ);      final int newX=v.getBlockX();      final int newZ=v.getBlockZ();      for (int y=0; y < height; ++y) {        BaseBlock block=getBlock(x,y,z);        if (block == air || block == null) {          continue;        }        if (reverse) {          for (int i=0; i < numRotations; ++i) {            if (block.hasWildcardData()) {              block=new BaseBlock(block);            }            block.rotate90Reverse();          }        } else {          for (int i=0; i < numRotations; ++i) {            if (block.hasWildcardData()) {              block=new BaseBlock(block);            }            block.rotate90();          }        }        cloned.setBlock(newX,y,newZ,block);      }    }  }  this.ids=cloned.ids;  this.datas=cloned.datas;  this.nbtMap=cloned.nbtMap;  size=new Vector(Math.abs(sizeRotated.getBlockX()),Math.abs(sizeRotated.getBlockY()),Math.abs(sizeRotated.getBlockZ()));  offset=offset.transform2D(angle,0,0,0,0).subtract(shiftX,0,shiftZ);  dx=cloned.dx;  dxz=cloned.dxz;}  }
class C{  public Vector3d mul(Vector3fc v){  x*=v.x();  y*=v.y();  z*=v.z();  return this;}  }
class C{  public final void testIsSatisfiedFails(){  ContainsLetterConstraint containsLetterConstraint=new ContainsLetterConstraint();  assertFalse(containsLetterConstraint.isSatisfied("123123"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.493 -0500",hash_original_method="7997D0B28C80AB12F09EF0050700F72A",hash_generated_method="6CD09AE0D6A2C8361B72008D380C7BC9") protected void unhandledMessage(Message msg){  if (mSmHandler.mDbg)   Log.e(TAG,mName + " - unhandledMessage: msg.what=" + msg.what);}  }
class C{  Data copyOnWrite(){  Data d=data;  d.writing=true;  int w=writeVersion;  if (w <= data.version) {    return d;  }  Data d2=new Data(w,data);  d2.writing=true;  d.writing=false;  return d2;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.IMPLEMENTED_PROJECTS__IMPLEMENTED_PROJECTS:    getImplementedProjects().clear();  getImplementedProjects().addAll((Collection<? extends ProjectReference>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  static public boolean isBoxed(final Class<?> type){  return UNBOX.containsKey(type);}  }
class C{  @Override public String versionText(){  return API_VERSION;}  }
class C{  public static Map<String,Object> cleanSyncRemoveInfo(DispatchContext dctx,Map<String,? extends Object> context){  Debug.logInfo("Running cleanSyncRemoveInfo",module);  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  try {    double keepRemoveInfoHours=24;    List<GenericValue> entitySyncRemoveList=EntityQuery.use(delegator).from("EntitySync").queryList();    for (    GenericValue entitySyncRemove : entitySyncRemoveList) {      Double curKrih=entitySyncRemove.getDouble("keepRemoveInfoHours");      if (curKrih != null) {        double curKrihVal=curKrih.doubleValue();        if (curKrihVal > keepRemoveInfoHours) {          keepRemoveInfoHours=curKrihVal;        }      }    }    int keepSeconds=(int)Math.floor(keepRemoveInfoHours * 3600);    Calendar nowCal=Calendar.getInstance();    nowCal.setTimeInMillis(System.currentTimeMillis());    nowCal.add(Calendar.SECOND,-keepSeconds);    Timestamp keepAfterStamp=new Timestamp(nowCal.getTimeInMillis());    int numRemoved=delegator.removeByCondition("EntitySyncRemove",EntityCondition.makeCondition(ModelEntity.STAMP_TX_FIELD,EntityOperator.LESS_THAN,keepAfterStamp));    Debug.logInfo("In cleanSyncRemoveInfo removed [" + numRemoved + "] values with TX timestamp before ["+ keepAfterStamp+ "]",module);    return ServiceUtil.returnSuccess();  } catch (  GenericEntityException e) {    Debug.logError(e,"Error cleaning out EntitySyncRemove info: " + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtErrorCleaningEntitySyncRemove",UtilMisc.toMap("errorString",e.toString()),locale));  }}  }
class C{  private void install(AceBean aceBean,final Session session,Principal principal,AcInstallationHistoryPojo history) throws RepositoryException, SecurityException {  if (aceBean.isInitialContentOnlyConfig()) {    return;  }  final AccessControlManager acMgr=session.getAccessControlManager();  JackrabbitAccessControlList acl=AccessControlUtils.getModifiableAcl(acMgr,aceBean.getJcrPath());  if (acl == null) {    final String msg="Skipped installing privileges/actions for non existing path: " + aceBean.getJcrPath();    LOG.debug(msg);    history.addMessage(msg);    return;  }  final JackrabbitAccessControlList newAcl=installActions(aceBean,principal,acl,session,acMgr,history);  if (acl != newAcl) {    history.addVerboseMessage("added action(s) for path: " + aceBean.getJcrPath() + ", principal: "+ principal.getName()+ ", actions: "+ aceBean.getActionsString()+ ", allow: "+ aceBean.isAllow());    removeRedundantPrivileges(aceBean,session);    acl=newAcl;  }  if (installPrivileges(aceBean,principal,acl,session,acMgr)) {    history.addVerboseMessage("added privilege(s) for path: " + aceBean.getJcrPath() + ", principal: "+ principal.getName()+ ", privileges: "+ aceBean.getPrivilegesString()+ ", allow: "+ aceBean.isAllow());  }  acMgr.setPolicy(aceBean.getJcrPath(),acl);}  }
class C{  public static int codePointCount(BytesRef utf8){  int pos=utf8.offset;  final int limit=pos + utf8.length;  final byte[] bytes=utf8.bytes;  int codePointCount=0;  for (; pos < limit; codePointCount++) {    int v=bytes[pos] & 0xFF;    if (v < 0x80) {      pos+=1;      continue;    }    if (v >= 0xc0) {      if (v < 0xe0) {        pos+=2;        continue;      }      if (v < 0xf0) {        pos+=3;        continue;      }      if (v < 0xf8) {        pos+=4;        continue;      }    }    throw new IllegalArgumentException();  }  if (pos > limit)   throw new IllegalArgumentException();  return codePointCount;}  }
class C{  public int binarySearchFromTo(byte key,int from,int to){  return cern.colt.Sorting.binarySearchFromTo(this.elements,key,from,to);}  }
class C{  @Override protected void onResume(){  super.onResume();  PurchasingManager.initiateGetUserIdRequest();}  }
class C{  public Symbol(int integer){  this.integer=integer;  this.weight=0;  this.next=null;  this.back=null;  this.one=null;  this.zero=null;}  }
class C{  public void contextInitialized(ServletContextEvent event){  if (this.servletContext == null) {    this.servletContext=event.getServletContext();  }}  }
class C{  public InfoPacket(String name,int packetID,long size,int srcID,int destID,int netServiceType){  this.name=name;  packetId=packetID;  srcId=srcID;  destId=destID;  this.size=size;  this.netServiceType=netServiceType;  init();}  }
class C{  public LogRecord(File file,long offset,boolean truncated){  this.file=file;  this.offset=offset;  this.data=null;  this.crc=0;  this.crcType=CRC_TYPE_NONE;  this.truncated=truncated;}  }
class C{  @Override public boolean isBusy(){  return (m_splitThread != null);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public B put(TypeToken<? extends B> key,B value){  throw new UnsupportedOperationException();}  }
class C{  public void configureManagers(){}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filePath,int reqWidth,int reqHeight){  return decodeSampledBitmapFromFile(filePath,reqWidth,reqHeight,false);}  }
class C{  public V peek(long key){  Entry<V> e=find(key);  return e == null ? null : e.value;}  }
class C{  public Gebaeude(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());  setTitel(getTypeFactory().getMessage(TYPE_ID));}  }
class C{  public static boolean intersects(Polygon rectangle,Geometry b){  RectangleIntersects rp=new RectangleIntersects(rectangle);  return rp.intersects(b);}  }
class C{  public BasicLocation(int x,int y,String name,OMGraphic locationMarker){  super(x,y,name,locationMarker);}  }
class C{  public void testStemming() throws Exception {  Reader reader=new StringReader("Tischen");  TokenStream stream=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)stream).setReader(reader);  stream=tokenFilterFactory("GermanStem").create(stream);  assertTokenStreamContents(stream,new String[]{"tisch"});}  }
class C{  public void testPropertiesFile(){  NettyOptions options=new NettyOptions(PropertiesReader.loadFromClasspath("netty-test.properties").properties());  assertEquals(options.threads(),1);  assertEquals(options.connectTimeout(),1000);  assertEquals(options.sendBufferSize(),1024);  assertEquals(options.receiveBufferSize(),1024);  assertEquals(options.reuseAddress(),false);  assertEquals(options.tcpKeepAlive(),false);  assertEquals(options.tcpNoDelay(),true);  assertEquals(options.acceptBacklog(),1234);}  }
class C{  private static void checkProblemSize(int n,int nr_class){  if (n >= Integer.MAX_VALUE / nr_class || n * nr_class < 0) {    throw new IllegalArgumentException("'number of classes' * 'number of instances' is too large: " + nr_class + "*"+ n);  }}  }
class C{  public boolean rotate(int side,Vector3D hit){  int result=getSideToRotate(side,hit);  if (result != -1) {    setOrientation(Direction.fromOrdinal(result));    provider.events.publish(new OrientationChangeEvent());    return true;  }  return false;}  }
class C{  private void updateZone(StendhalRPZone zone,StendhalMapStructure map) throws IOException {  String name=zone.getName();  zone.addTilesets(name + ".tilesets",map.getTilesets());  zone.addLayer(name + ".0_floor",map.getLayer("0_floor"));  zone.addLayer(name + ".1_terrain",map.getLayer("1_terrain"));  zone.addLayer(name + ".2_object",map.getLayer("2_object"));  loadOptionalLayer(zone,map,"3_roof");  loadOptionalLayer(zone,map,"4_roof_add");  loadOptionalLayer(zone,map,"blend_ground");  loadOptionalLayer(zone,map,"blend_roof");  zone.addCollisionLayer(name + ".collision",map.getLayer("collision"));  zone.addProtectionLayer(name + ".protection",map.getLayer("protection"));}  }
class C{  public CannotFindMethodException(SootClass clz,SootMethod method){  super(String.format("Cannot find or resolve %s in %s.",method,clz));}  }
class C{  public boolean isInstrumented(){  return isInstrumented;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.448 -0400",hash_original_method="66710A9067B88FB9B934FC4457CB1061",hash_generated_method="C8D00130EB62EA5A4F98FD7143947A18") private int handleC(String value,DoubleMetaphoneResult result,int index){  if (conditionC0(value,index)) {    result.append('K');    index+=2;  } else   if (index == 0 && contains(value,index,6,"CAESAR")) {    result.append('S');    index+=2;  } else   if (contains(value,index,2,"CH")) {    index=handleCH(value,result,index);  } else   if (contains(value,index,2,"CZ") && !contains(value,index - 2,4,"WICZ")) {    result.append('S','X');    index+=2;  } else   if (contains(value,index + 1,3,"CIA")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"CC") && !(index == 1 && charAt(value,0) == 'M')) {    return handleCC(value,result,index);  } else   if (contains(value,index,2,"CK","CG","CQ")) {    result.append('K');    index+=2;  } else   if (contains(value,index,2,"CI","CE","CY")) {    if (contains(value,index,3,"CIO","CIE","CIA")) {      result.append('S','X');    } else {      result.append('S');    }    index+=2;  } else {    result.append('K');    if (contains(value,index + 1,2," C"," Q"," G")) {      index+=3;    } else     if (contains(value,index + 1,1,"C","K","Q") && !contains(value,index + 1,2,"CE","CI")) {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  public CustomSoapEnvInResponse(){  requestFileName="getstate.query";  responseFile="customsoapenv.answer";}  }
class C{  @Override public void keyReleased(KeyEvent e){synchronized (keyLock) {    keysDown.remove(e.getKeyCode());  }  for (  DrawListener listener : listeners)   listener.keyPressed(e.getKeyCode());}  }
class C{  private static int hexchar2int(byte c){  if (c >= '0' && c <= '9') {    return (c - '0');  }  if (c >= 'A' && c <= 'F') {    return (c - 'A' + 10);  }  if (c >= 'a' && c <= 'f') {    return (c - 'a' + 10);  }  return (-1);}  }
class C{  public static Map unmodifiableMap(Map m){  return new UnmodifiableMap(m);}  }
class C{  public Week(int week,Year year){  if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {    throw new IllegalArgumentException("The 'week' argument must be in the range 1 - 53.");  }  this.week=(byte)week;  this.year=(short)year.getYear();  peg(Calendar.getInstance());}  }
class C{  public ArgumentDefinition createArgumentDefinition(){  ArgumentDefinitionImpl argumentDefinition=new ArgumentDefinitionImpl();  return argumentDefinition;}  }
class C{  protected Report reportSumByNameRound(List<TaskStats> taskStats){  LinkedHashMap<String,TaskStats> p2=new LinkedHashMap<>();  int reported=0;  for (  final TaskStats stat1 : taskStats) {    if (stat1.getElapsed() >= 0) {      reported++;      String name=stat1.getTask().getName();      String rname=stat1.getRound() + "." + name;      TaskStats stat2=p2.get(rname);      if (stat2 == null) {        try {          stat2=stat1.clone();        } catch (        CloneNotSupportedException e) {          throw new RuntimeException(e);        }        p2.put(rname,stat2);      } else {        stat2.add(stat1);      }    }  }  return genPartialReport(reported,p2,taskStats.size());}  }
class C{  protected void reduce(){  for (int w=0; w < dim; w++) {    double min=Double.POSITIVE_INFINITY;    for (int j=0; j < dim; j++) {      if (costMatrix[w][j] < min) {        min=costMatrix[w][j];      }    }    for (int j=0; j < dim; j++) {      costMatrix[w][j]-=min;    }  }  double[] min=new double[dim];  for (int j=0; j < dim; j++) {    min[j]=Double.POSITIVE_INFINITY;  }  for (int w=0; w < dim; w++) {    for (int j=0; j < dim; j++) {      if (costMatrix[w][j] < min[j]) {        min[j]=costMatrix[w][j];      }    }  }  for (int w=0; w < dim; w++) {    for (int j=0; j < dim; j++) {      costMatrix[w][j]-=min[j];    }  }}  }
class C{  private List<ParameterInfo<?>> makeParamInfoList(Method method){  List<ParameterInfo<?>> paramInfoList=new ArrayList<>();  Type[] paramTypes=method.getGenericParameterTypes();  Annotation[][] paramAnnotations=method.getParameterAnnotations();  for (int i=0; i < paramAnnotations.length; i++) {    Annotation[] annotations=paramAnnotations[i];    if (Utils.getIntersection(SUPPORTED_PARAM_ANNOTATIONS,Collections.unmodifiableSet(new HashSet(Arrays.asList(annotations)))) > 1) {      throw new IllegalArgumentException(String.format("Must have exactly one annotation from %s for parameter %d in method %s",SUPPORTED_PARAM_ANNOTATIONS,i,method));    }    Annotation annotation=null;    Type parameterType=paramTypes[i];    Function<?,Object> converter=null;    String defaultVal=null;    for (    Annotation annotation0 : annotations) {      annotation=annotation0;      Class<? extends Annotation> annotationType=annotation.annotationType();      if (PathParam.class.isAssignableFrom(annotationType)) {        converter=ParamConvertUtils.createPathParamConverter(parameterType);      } else       if (QueryParam.class.isAssignableFrom(annotationType)) {        converter=ParamConvertUtils.createQueryParamConverter(parameterType);      } else       if (FormParam.class.isAssignableFrom(annotationType)) {        converter=ParamConvertUtils.createFormParamConverter(parameterType);      } else       if (FormDataParam.class.isAssignableFrom(annotationType)) {        converter=ParamConvertUtils.createFormDataParamConverter(parameterType);      } else       if (HeaderParam.class.isAssignableFrom(annotationType)) {        converter=ParamConvertUtils.createHeaderParamConverter(parameterType);      } else       if (CookieParam.class.isAssignableFrom(annotationType)) {        converter=ParamConvertUtils.createCookieParamConverter(parameterType);      } else       if (DefaultValue.class.isAssignableFrom(annotationType)) {        defaultVal=((DefaultValue)annotation).value();      }    }    ParameterInfo<?> parameterInfo=ParameterInfo.create(parameterType,annotation,defaultVal,converter);    paramInfoList.add(parameterInfo);  }  return Collections.unmodifiableList(paramInfoList);}  }
class C{  private void updateAccessPoints(){  if (getActivity() == null)   return;  if (mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_WIFI)) {    addMessagePreference(R.string.wifi_empty_list_user_restricted);    return;  }  final int wifiState=mWifiManager.getWifiState();switch (wifiState) {case WifiManager.WIFI_STATE_ENABLED:    final Collection<AccessPoint> accessPoints=constructAccessPoints();  getPreferenceScreen().removeAll();if (accessPoints.size() == 0) {  addMessagePreference(R.string.wifi_empty_list_wifi_on);}for (AccessPoint accessPoint : accessPoints) {getPreferenceScreen().addPreference(accessPoint);}break;case WifiManager.WIFI_STATE_ENABLING:getPreferenceScreen().removeAll();break;case WifiManager.WIFI_STATE_DISABLING:addMessagePreference(R.string.wifi_stopping);break;case WifiManager.WIFI_STATE_DISABLED:setOffMessage();break;}}  }
class C{  public static void next(final IdocFrame ui){  FileVO ele=(FileVO)ui.getFileVO();  if (ele.getImageSelectIndex() + 2 > ele.getListImage().size()) {    ele.setImageSelectIndex(0);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() + 1);  }}  }
class C{  public ListResetPCPolicy(OMGraphicHandlerLayer layer){  setLayer(layer);}  }
class C{  public static <STATE,ACTION,PLAYER>MinimaxSearch<STATE,ACTION,PLAYER> createFor(Game<STATE,ACTION,PLAYER> game){  return new MinimaxSearch<STATE,ACTION,PLAYER>(game);}  }
class C{  private boolean isSubTypeOfMvpView(Class<?> klass){  if (klass.equals(MvpView.class)) {    return true;  }  Class[] superInterfaces=klass.getInterfaces();  for (int i=0; i < superInterfaces.length; i++) {    if (isSubTypeOfMvpView(superInterfaces[0])) {      return true;    }  }  return false;}  }
class C{  public static GraphDocument fetchGraphDocument(IFile file){  return INSTANCE.getGraphDocument(file);}  }
class C{  public ParserConfigurationException(){}  }
class C{  public static RxYouTubeExtractor create(@Nullable OkHttpClient.Builder okhttpBuilder,@Nullable Scheduler scheduler){  RxJavaCallAdapterFactory factory;  if (scheduler == null) {    factory=RxJavaCallAdapterFactory.create();  } else {    factory=RxJavaCallAdapterFactory.createWithScheduler(scheduler);  }  return new RxYouTubeExtractor(okhttpBuilder,factory);}  }
class C{  private boolean isBelowSolidBlock(World worldIn,BlockPos pos){  return worldIn.getBlockState(pos.up()).isSideSolid(worldIn,pos.up(),EnumFacing.DOWN);}  }
class C{  private void createCrossing4NotSignalizedLink(DgCrossing crossing,Link link,DgCrossingNode inLinkToNode,Id<Link> backLinkId,LanesToLinkAssignment l2l){  if (l2l == null) {    List<Id<Link>> toLinks=this.getTurningMoves4LinkWoLanes(link);    for (    Id<Link> outLinkId : toLinks) {      Id<DgGreen> lightId=this.createLights(link.getId(),null,outLinkId,backLinkId,inLinkToNode,crossing);    }  } else {    for (    Lane lane : l2l.getLanes().values()) {      if (lane.getToLaneIds() == null || lane.getToLaneIds().isEmpty()) {        for (        Id<Link> outLinkId : lane.getToLinkIds()) {          Id<DgGreen> lightId=this.createLights(link.getId(),lane.getId(),outLinkId,backLinkId,inLinkToNode,crossing);        }      }    }  }}  }
class C{  public SpringQuorumPeerConfig createNewConfig(Properties newProp,int serverId) throws IOException, ConfigException {  SpringQuorumPeerConfig newConfig=new SpringQuorumPeerConfig();  newConfig.setMachineId(serverId);  Properties prop=new Properties();  prop.putAll(_properties);  prop.putAll(newProp);  newConfig.setProperties(prop);  newConfig.init();  return newConfig;}  }
class C{  private void loadTableAccess(boolean reload){  if (m_tableAccess != null && !reload)   return;  ArrayList<MTableAccess> list=new ArrayList<MTableAccess>();  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="SELECT * FROM AD_Table_Access " + "WHERE AD_Role_ID=? AND IsActive='Y'";  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getAD_Role_ID());    rs=pstmt.executeQuery();    while (rs.next())     list.add(new MTableAccess(getCtx(),rs,get_TrxName()));  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);  }  m_tableAccess=new MTableAccess[list.size()];  list.toArray(m_tableAccess);  log.fine("#" + m_tableAccess.length);}  }
class C{  public static Action increaseFontSizeAction(JTextArea textArea){  return changeFontSizeAction(textArea,"A+",INCREASE_FONT_SIZE,1);}  }
class C{  void adjustOrPutValue(final long key,final long adjustAmount){  final int arrayMask=keys.length - 1;  int probe=(int)hash(key) & arrayMask;  int drift=1;  while (states[probe] != 0 && keys[probe] != key) {    probe=(probe + 1) & arrayMask;    drift++;    assert (drift < DRIFT_LIMIT) : "drift: " + drift + " >= DRIFT_LIMIT";  }  if (states[probe] == 0) {    assert (numActive <= loadThreshold) : "numActive: " + numActive + " > loadThreshold : "+ loadThreshold;    keys[probe]=key;    values[probe]=adjustAmount;    states[probe]=(short)drift;    numActive++;  } else {    assert (keys[probe] == key);    values[probe]+=adjustAmount;  }}  }
class C{  private String createString(String f){  return "srcXInBytes=" + srcXInBytes + f+ "srcY="+ srcY+ f+ "srcMemoryType="+ CUmemorytype.stringFor(srcMemoryType)+ f+ "srcHost ="+ srcHost+ f+ "srcDevice ="+ srcDevice+ f+ "srcArray ="+ srcArray+ f+ "srcPitch="+ srcPitch+ f+ "dstXInBytes="+ dstXInBytes+ f+ "dstY="+ dstY+ f+ "dstMemoryType="+ CUmemorytype.stringFor(dstMemoryType)+ f+ "dstHost ="+ dstHost+ f+ "dstDevice ="+ dstDevice+ f+ "dstArray ="+ dstArray+ f+ "dstPitch="+ dstPitch+ f+ "WidthInBytes="+ WidthInBytes+ f+ "Height="+ Height;}  }
class C{  public ErrorRevealingChecks(){  this.checks=new LinkedHashSet<>();}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  @Override public void severe(StringId msgID,Object[] params,Throwable ex){  if (isEnabled(Level.FATAL)) {    severe(msgID.toLocalizedString(params),ex);  }}  }
class C{  private void validateCGVolumes(List<VolumeDescriptor> volumeDescriptors){  VolumeDescriptor sourceVolumeDescriptor=null;  List<VolumeDescriptor> targets=new ArrayList<VolumeDescriptor>();  for (  VolumeDescriptor volumeDescriptor : volumeDescriptors) {    if (volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_SOURCE) || volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_EXISTING_SOURCE) || volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE)) {      sourceVolumeDescriptor=volumeDescriptor;    } else     if (volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_TARGET) || volumeDescriptor.getType().equals(VolumeDescriptor.Type.RP_VPLEX_VIRT_TARGET)) {      targets.add(volumeDescriptor);    }  }  Volume sourceVolume=_dbClient.queryObject(Volume.class,sourceVolumeDescriptor.getVolumeURI());  Volume targetVolume=null;  StorageSystem sourceStorageSystem=_dbClient.queryObject(StorageSystem.class,sourceVolume.getStorageController());  StorageSystem targetStorageSystem=null;  for (  VolumeDescriptor targetVolumeDescriptor : targets) {    targetVolume=_dbClient.queryObject(Volume.class,targetVolumeDescriptor.getVolumeURI());    targetStorageSystem=_dbClient.queryObject(StorageSystem.class,targetVolume.getStorageController());    if (Long.compare(targetVolume.getProvisionedCapacity(),sourceVolume.getProvisionedCapacity()) < 0) {      throw DeviceControllerExceptions.recoverpoint.cgCannotBeCreatedInvalidVolumeSizes(sourceStorageSystem.getSystemType(),String.valueOf(sourceVolume.getProvisionedCapacity()),targetStorageSystem.getSystemType(),String.valueOf(targetVolume.getProvisionedCapacity()));    }  }}  }
class C{  protected void applyOnData(ExampleSet exampleSet,Attribute[] oldAttributes,Attribute[] newAttributes){  for (  Example example : exampleSet) {    for (int i=0; i < oldAttributes.length; i++) {      if (oldAttributes[i].isNumerical()) {        example.setValue(newAttributes[i],computeValue(oldAttributes[i],example.getValue(oldAttributes[i])));      }    }  }}  }
class C{  static public void logError(String msg,Exception e){  AnalysisContext currentAnalysisContext2=currentAnalysisContext();  if (currentAnalysisContext2 == null) {    if (e instanceof NoSuchBugPattern) {      return;    }    e.printStackTrace(System.err);    return;  }  if (e instanceof MissingClassException) {    reportMissingClass(((MissingClassException)e).getClassNotFoundException());    return;  }  if (e instanceof edu.umd.cs.findbugs.classfile.MissingClassException) {    reportMissingClass(((edu.umd.cs.findbugs.classfile.MissingClassException)e).toClassNotFoundException());    return;  }  RepositoryLookupFailureCallback lookupFailureCallback=currentAnalysisContext2.getLookupFailureCallback();  if (lookupFailureCallback != null) {    lookupFailureCallback.logError(msg,e);  }}  }
class C{  public synchronized void info(String msg,Object[] params){  LogRecord record=new LogRecord(Level.INFO,msg);  record.setParameters(params);  log(record);}  }
class C{  public synchronized boolean removeTemplate(CodeTemplate template){  if (template == null) {    throw new IllegalArgumentException("template cannot be null");  }  return templates.remove(template);}  }
class C{  private synchronized void checkOnlineServers(){  Iterator itr;  itr=online.listIterator();  while (itr.hasNext()) {    Server server=(Server)itr.next();    String url=getServerURL(server);    GetMethod get=new GetMethod(url);    get.setFollowRedirects(false);    try {      httpClient.executeMethod(get);      if (!okServerResponse(get.getStatusCode())) {        offline.add(server);        itr.remove();        log.debug("Server going OFFLINE! " + getServerURL(server));        listener.serverOffline(server);      }    } catch (    Exception e) {      offline.add(server);      itr.remove();      log.debug("Server going OFFLINE! " + getServerURL(server));      listener.serverOffline(server);    } finally {      get.releaseConnection();    }  }}  }
class C{  public static boolean isEmpty(CharSequence str){  return TextUtils.isEmpty(str);}  }
class C{  public final Node peepTail(){  return m_map[m_firstFree - 1];}  }
class C{  private boolean isComputeHost(ComputeDescription computeDescription){  List<String> supportedChildren=computeDescription.supportedChildren;  return supportedChildren != null && supportedChildren.contains(ComputeType.VM_GUEST.name());}  }
class C{  private void validateStoragePolicyRule(StoragePolicyRule storagePolicyRule) throws IllegalArgumentException {  Assert.notNull(storagePolicyRule,"A storage policy rule must be specified.");  Assert.hasText(storagePolicyRule.getRuleType(),"A storage policy rule type must be specified.");  storagePolicyRule.setRuleType(storagePolicyRule.getRuleType().trim());  Assert.notNull(storagePolicyRule.getRuleValue(),"A storage policy rule value must be specified.");  Assert.isTrue(storagePolicyRule.getRuleValue() >= 0,"Storage policy rule value must be a positive integer or zero.");}  }
class C{  public static boolean isTempFile(String path){  return path.contains(".temp");}  }
class C{  public static void addTagMetaData(ConfigWebImpl cw){  if (true)   return;  PageContextImpl pc=null;  try {    pc=ThreadUtil.createPageContext(cw,DevNullOutputStream.DEV_NULL_OUTPUT_STREAM,"localhost","/","",new Cookie[0],new Pair[0],null,new Pair[0],new StructImpl(),false,-1);  } catch (  Throwable t) {    return;  }  PageContext orgPC=ThreadLocalPageContext.get();  try {    ThreadLocalPageContext.register(pc);    _addTagMetaData(pc,cw,CFMLEngine.DIALECT_CFML);    _addTagMetaData(pc,cw,CFMLEngine.DIALECT_LUCEE);  } catch (  Throwable t) {  } finally {    pc.getConfig().getFactory().releaseLuceePageContext(pc,true);    ThreadLocalPageContext.register(orgPC);  }}  }
class C{  public void removeSprite() throws IOException {  writeCode(REMOVE_SPRITE);}  }
class C{  public ByteList MethodBody(ByteList bytes,int max_stack,int max_locals,int scope_depth,int max_scope,int code_length,ByteList code,int exception_table_length,ByteList exception_table,ObjectList<ByteList> traits,int method_info_index){  if (show_bytecode) {    defns_out.write("\n      MethodBody " + "max_stack=" + max_stack);    defns_out.write(" max_locals=" + max_locals);    defns_out.write(" scope_depth=" + scope_depth + " max_scope="+ max_scope);    defns_out.write(" code_length=" + code_length + " traits_count="+ traits.size()+ " -> "+ method_info_index);  }  if (debug) {    System.out.print("\n      bytes.size() = " + bytes.size() + ", code.size() = "+ code.size());  }  Int(bytes,method_info_index);  Int(bytes,max_stack);  Int(bytes,max_locals);  Int(bytes,scope_depth);  Int(bytes,max_scope);  Int(bytes,code_length);  if (code_length != 0) {    bytes.addAll(code);  }  Int(bytes,exception_table_length);  if (exception_table_length != 0) {    bytes.addAll(exception_table);  }  Int(bytes,traits.size());  Traits(bytes,traits);  return bytes;}  }
class C{  private boolean shouldAvoidCodec(String codec){  return !avoidCodecs.isEmpty() && avoidCodecs.contains(codec);}  }
class C{  public void trace(String format,Object arg){}  }
class C{  public GeoRssBox(){  this(null,null);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void sendError(int i,String string) throws IOException {  statusCode=i;  super.sendError(i,string);}  }
class C{  public void put(String[] mtlNames){  if (mtlNames == null || mtlNames.length == 0)   throw new IllegalArgumentException("mtlNames must not be null or empty");  baseMaterials=mtlNames;}  }
class C{  public static final CButton createHistoryButton(boolean withText){  if (withText)   return createHistoryButton(Msg.getMsg(Env.getCtx(),A_HISTORY));  return createHistoryButton(null);}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (super.canTraverseOutsideSubtree())   return true; else {    int n=m_args.length;    for (int i=0; i < n; i++) {      if (m_args[i].canTraverseOutsideSubtree())       return true;    }    return false;  }}  }
class C{  private void doParentDefaultCloseAction(){  ((Window)rootParent).dispatchEvent(new WindowEvent((Window)rootParent,WindowEvent.WINDOW_CLOSING));}  }
class C{  protected void onEntranceTransitionPrepare(){}  }
class C{  public Builder deleteProfileUrl(){  deleteFields.add("profileUrl");  return this;}  }
class C{  public RemoveImageParams withForce(boolean force){  this.force=force;  return this;}  }
class C{  @DSComment("Data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.425 -0500",hash_original_method="25E2CFAA647DEEE085853277B0217FAA",hash_generated_method="E3F5D709C82F888D13DC27A9FF81A645") public boolean hasAccuracy(){  return mHasAccuracy;}  }
class C{  public Object clone(){  ObjectIntHashMap result=null;  try {    result=(ObjectIntHashMap)super.clone();  } catch (  CloneNotSupportedException e) {  }  result.table=new Entry[table.length];  result.entrySet=null;  result.modCount=0;  result.size=0;  result.init();  result.putAllForCreate(this);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.492 -0400",hash_original_method="623EDDCAAC7B1519CF46C5182C287E51",hash_generated_method="C6929B16100C98552FBAD8C27E8C5561") protected TrueFileFilter(){}  }
class C{  protected boolean isUseFieldNames(){  return useFieldNames;}  }
class C{  public String createMethod(Workflow workflow,String waitFor,String methodName,String stepId,String stepDescription,URI storage,Object[] args){  StorageSystem system=_dbClient.queryObject(StorageSystem.class,storage);  Workflow.Method method=new Workflow.Method(methodName,args);  String waitForStep=workflow.createStep(null,stepDescription,waitFor,storage,system.getSystemType(),getClass(),method,null,stepId);  return waitForStep;}  }
class C{  public static IFile findFileOfEditor(IEditorPart editor){  return getAssociatedFile(editor.getEditorInput());}  }
class C{  public ArrayList detatchAll(){  ArrayList old=portrayals;  popup.removeAll();  createConsoleMenu();  portrayals=new ArrayList();  portrayalSwitchMask=null;  subgraphCount=0;  dirty=true;  return old;}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public void updateObject(String columnName,Object x,int scale) throws SQLException {  updateObject(findColumn(columnName),x,scale);}  }
class C{  @Override public UntypedResultSet fetchRow(final String ksName,final String index,final String cfName,final DocPrimaryKey docPk,final String[] columns,final ConsistencyLevel cl) throws InvalidRequestException, RequestExecutionException, RequestValidationException, IOException {  return process(cl,buildFetchQuery(ksName,index,cfName,columns,docPk.isStaticDocument),docPk.values);}  }
class C{  private Cipher initialiseCipher(Key key) throws BuildException {  Cipher cipher=null;  try {    cipher=Cipher.getInstance(this.cipherTransformation);    final byte[] iv=new byte[16];    Arrays.fill(iv,(byte)0);    IvParameterSpec ivSpec=new IvParameterSpec(iv);    if (encrypt) {      cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);      this.logInfo("Initialised cipher to perform encryption using " + this.cipherTransformation);      this.logInfo("key: " + hex(key.getEncoded()));    } else {      cipher.init(Cipher.DECRYPT_MODE,key,ivSpec);      this.logInfo("Initialised cipher to perform decryption using " + this.cipherTransformation);    }  } catch (  NoSuchAlgorithmException e) {    throw new BuildException("Cipher transformation algorithm [" + this.cipherTransformation + "] not supported",e);  }catch (  NoSuchPaddingException e) {    throw new BuildException("Cipher padding scheme not supported",e);  }catch (  InvalidKeyException e) {    this.logInfo("Error: " + e);    throw new BuildException("Invalid key for cipher",e);  }catch (  InvalidAlgorithmParameterException e) {    this.logInfo("Error: " + e);    throw new BuildException("Invalid AlgorithmParameter for cipher",e);  }  return cipher;}  }
class C{  public static MPaySelectionCheck createForPayment(Properties ctx,int C_Payment_ID,String trxName){  if (C_Payment_ID == 0)   return null;  MPayment payment=new MPayment(ctx,C_Payment_ID,null);  String PaymentRule=PAYMENTRULE_Check;  if (payment.getTenderType().equals(X_C_Payment.TENDERTYPE_CreditCard))   PaymentRule=PAYMENTRULE_CreditCard; else   if (payment.getTenderType().equals(X_C_Payment.TENDERTYPE_DirectDebit))   PaymentRule=PAYMENTRULE_DirectDebit; else   if (payment.getTenderType().equals(X_C_Payment.TENDERTYPE_DirectDeposit))   PaymentRule=PAYMENTRULE_DirectDeposit;  MPaySelection ps=new MPaySelection(ctx,0,trxName);  ps.setAD_Org_ID(payment.getAD_Org_ID());  ps.setC_BankAccount_ID(payment.getC_BankAccount_ID());  ps.setName(Msg.translate(ctx,"C_Payment_ID") + ": " + payment.getDocumentNo());  ps.setDescription(payment.getDescription());  ps.setPayDate(payment.getDateTrx());  ps.setTotalAmt(payment.getPayAmt());  ps.setIsApproved(true);  ps.saveEx();  MPaySelectionCheck psc=new MPaySelectionCheck(ps,PaymentRule);  psc.setC_BPartner_ID(payment.getC_BPartner_ID());  psc.setC_Payment_ID(payment.getC_Payment_ID());  psc.setIsReceipt(payment.isReceipt());  psc.setPayAmt(payment.getPayAmt());  psc.setDiscountAmt(payment.getDiscountAmt());  psc.setQty(1);  psc.setDocumentNo(payment.getDocumentNo());  psc.setProcessed(true);  psc.setIsGeneratedDraft(!payment.isProcessed());  psc.saveEx();  MPaySelectionLine psl=null;  if (payment.getC_Invoice_ID() != 0) {    psl=new MPaySelectionLine(ps,10,PaymentRule);    psl.setC_Invoice_ID(payment.getC_Invoice_ID());    psl.setIsSOTrx(payment.isReceipt());    psl.setOpenAmt(payment.getPayAmt().add(payment.getDiscountAmt()));    psl.setPayAmt(payment.getPayAmt());    psl.setDiscountAmt(payment.getDiscountAmt());    psl.setDifferenceAmt(Env.ZERO);    psl.setC_PaySelectionCheck_ID(psc.getC_PaySelectionCheck_ID());    psl.setProcessed(true);    psl.saveEx();  } else {    MPaymentAllocate[] pAllocs=MPaymentAllocate.get(payment);    if (pAllocs.length != 0) {      int numInv=0;      for (int i=0; i < pAllocs.length; i++) {        MPaymentAllocate pAlloc=pAllocs[i];        if (pAlloc.getC_Invoice_ID() != 0) {          MPaySelectionLine psla=null;          psla=new MPaySelectionLine(ps,10 * (i + 1),PaymentRule);          psla.setC_Invoice_ID(pAlloc.getC_Invoice_ID());          psla.setIsSOTrx(payment.isReceipt());          psla.setOpenAmt(pAlloc.getAmount().add(pAlloc.getDiscountAmt()));          psla.setPayAmt(pAlloc.getAmount());          psla.setDiscountAmt(pAlloc.getDiscountAmt());          psla.setDifferenceAmt(Env.ZERO);          psla.setC_PaySelectionCheck_ID(psc.getC_PaySelectionCheck_ID());          psla.setProcessed(true);          psla.saveEx();          numInv++;        }      }      if (numInv > 0) {        psc.setQty(numInv);        psc.saveEx();      }    }  }  ps.setProcessed(true);  ps.saveEx();  return psc;}  }
class C{  private void createSchema(SQLiteDatabase db){  String sql;  sql="CREATE TABLE " + TABLE_OBJECTS + " ("+ KEY_UUID+ " TEXT PRIMARY KEY, "+ KEY_CLASS_NAME+ " TEXT NOT NULL, "+ KEY_OBJECT_ID+ " TEXT, "+ KEY_JSON+ " TEXT, "+ KEY_IS_DELETING_EVENTUALLY+ " INTEGER DEFAULT 0, "+ "UNIQUE("+ KEY_CLASS_NAME+ ", "+ KEY_OBJECT_ID+ ")"+ ");";  db.execSQL(sql);  sql="CREATE TABLE " + TABLE_DEPENDENCIES + " ("+ KEY_KEY+ " TEXT NOT NULL, "+ KEY_UUID+ " TEXT NOT NULL, "+ "PRIMARY KEY("+ KEY_KEY+ ", "+ KEY_UUID+ ")"+ ");";  db.execSQL(sql);}  }
class C{  private void dump(DBTransaction transaction) throws Exception {  final String query="insert into age(datewhen, charname, age, version) values(?, ?, ?, ?)";  date=new java.sql.Date(new java.util.Date().getTime());  PreparedStatement ps=transaction.prepareStatement(query,null);  for (  final RPObject object : new CharacterIterator(transaction,false)) {    final String name=object.get("name");    logPlayer(ps,name,object);  }  ps.close();}  }
